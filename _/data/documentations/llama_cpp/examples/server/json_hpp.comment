['text':'     __ _____ _____ _____','line_number':1,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':2,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':6,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':7,'multiline':False]['text':'***************************************************************************\
 * Note on documentation: The source files contain links to the online      *
 * documentation of the public API at https://json.nlohmann.me. This URL    *
 * contains the most recent documentation and should also be applicable to  *
 * previous versions; documentation for deprecated functions is not         *
 * removed, but marked deprecated. See "Generate documentation" section in  *
 * file docs/README.md.                                                     *
\***************************************************************************','line_number':9,'multiline':True]['text':' all_of, find, for_each','line_number':21,'multiline':False]['text':' nullptr_t, ptrdiff_t, size_t','line_number':22,'multiline':False]['text':' hash, less','line_number':23,'multiline':False]['text':' initializer_list','line_number':24,'multiline':False]['text':' istream, ostream','line_number':26,'multiline':False]['text':' JSON_NO_IO','line_number':27,'multiline':False]['text':' random_access_iterator_tag','line_number':28,'multiline':False]['text':' unique_ptr','line_number':29,'multiline':False]['text':' accumulate','line_number':30,'multiline':False]['text':' string, stoi, to_string','line_number':31,'multiline':False]['text':' declval, forward, move, pair, swap','line_number':32,'multiline':False]['text':' vector','line_number':33,'multiline':False]['text':' #include <nlohmann/adl_serializer.hpp>','line_number':35,'multiline':False]['text':'     __ _____ _____ _____','line_number':36,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':37,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':38,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':41,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':42,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':48,'multiline':False]['text':'     __ _____ _____ _____','line_number':49,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':50,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':51,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':54,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':55,'multiline':False]['text':' This file contains all macro definitions affecting or depending on the ABI','line_number':59,'multiline':False]['text':' NOLINT(modernize-macro-to-enum)','line_number':69,'multiline':False]['text':' NOLINT(modernize-macro-to-enum)','line_number':70,'multiline':False]['text':' NOLINT(modernize-macro-to-enum)','line_number':71,'multiline':False]['text':' Construct the namespace ABI tags component','line_number':97,'multiline':False]['text':' Construct the namespace version component','line_number':107,'multiline':False]['text':' Combine namespace components','line_number':122,'multiline':False]['text':' namespace (inline namespace) NOLINT(readability/namespace) ','line_number':146,'multiline':True]['text':' namespace nlohmann','line_number':147,'multiline':False]['text':' #include <nlohmann/detail/conversions/from_json.hpp>','line_number':150,'multiline':False]['text':'     __ _____ _____ _____','line_number':151,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':152,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':153,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':156,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':157,'multiline':False]['text':' transform','line_number':161,'multiline':False]['text':' array','line_number':162,'multiline':False]['text':' forward_list','line_number':163,'multiline':False]['text':' inserter, front_inserter, end','line_number':164,'multiline':False]['text':' map','line_number':165,'multiline':False]['text':' string','line_number':166,'multiline':False]['text':' tuple, make_tuple','line_number':167,'multiline':False]['text':' is_arithmetic, is_same, is_enum, underlying_type, is_convertible','line_number':168,'multiline':False]['text':' unordered_map','line_number':169,'multiline':False]['text':' pair, declval','line_number':170,'multiline':False]['text':' valarray','line_number':171,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':173,'multiline':False]['text':'     __ _____ _____ _____','line_number':174,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':175,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':176,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':179,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':180,'multiline':False]['text':' nullptr_t','line_number':184,'multiline':False]['text':' exception','line_number':185,'multiline':False]['text':' runtime_error','line_number':186,'multiline':False]['text':' to_string','line_number':187,'multiline':False]['text':' vector','line_number':188,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':190,'multiline':False]['text':'     __ _____ _____ _____','line_number':191,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':192,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':193,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':196,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':197,'multiline':False]['text':' array','line_number':201,'multiline':False]['text':' size_t','line_number':202,'multiline':False]['text':' uint8_t','line_number':203,'multiline':False]['text':' string','line_number':204,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':206,'multiline':False]['text':'     __ _____ _____ _____','line_number':207,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':208,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':209,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':212,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':213,'multiline':False]['text':' declval, pair','line_number':217,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':218,'multiline':False]['text':'     __ _____ _____ _____','line_number':219,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':220,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':221,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':224,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':225,'multiline':False]['text':' #include <nlohmann/detail/meta/void_t.hpp>','line_number':231,'multiline':False]['text':'     __ _____ _____ _____','line_number':232,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':233,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':234,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':235,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':237,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':238,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':242,'multiline':False]['text':' namespace detail','line_number':255,'multiline':False]['text':' https://en.cppreference.com/w/cpp/experimental/is_detected','line_number':263,'multiline':False]['text':' namespace detail','line_number':313,'multiline':False]['text':' #include <nlohmann/thirdparty/hedley/hedley.hpp>','line_number':316,'multiline':False]['text':'     __ _____ _____ _____','line_number':319,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':320,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':321,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':324,'multiline':False]['text':' SPDX-FileCopyrightText: 2016-2021 Evan Nemerson <evan@nemerson.com>','line_number':325,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':326,'multiline':False]['text':' Hedley - https://nemequ.github.io/hedley
 * Created by Evan Nemerson <evan@nemerson.com>
 ','line_number':328,'multiline':True]['text':' JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. ','line_number':1104,'multiline':True]['text':' SAL ','line_number':1442,'multiline':True]['text':' SAL ','line_number':2028,'multiline':True]['text':' SAL ','line_number':2042,'multiline':True]['text':' JSON_HEDLEY_IS_CONSTEXPR_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. ','line_number':2068,'multiline':True]['text':' Remaining macros are deprecated. ','line_number':2315,'multiline':True]['text':' !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) ','line_number':2361,'multiline':True]['text':' This file contains all internal macro definitions (except those affecting ABI)','line_number':2364,'multiline':False]['text':' You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them','line_number':2365,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':2367,'multiline':False]['text':' exclude unsupported compilers','line_number':2370,'multiline':False]['text':' C++ language standard detection','line_number':2383,'multiline':False]['text':' if the user manually specified the used c++ version this is skipped','line_number':2384,'multiline':False]['text':' fix for issue #464','line_number':2390,'multiline':False]['text':' the cpp 11 flag is always specified because it is the minimal required version','line_number':2396,'multiline':False]['text':' std::filesystem does not work on MinGW GCC 8: https://sourceforge.net/p/mingw-w64/bugs/737/','line_number':2420,'multiline':False]['text':' no filesystem support before GCC 8: https://en.cppreference.com/w/cpp/compiler_support','line_number':2426,'multiline':False]['text':' no filesystem support before Clang 7: https://en.cppreference.com/w/cpp/compiler_support','line_number':2432,'multiline':False]['text':' no filesystem support before MSVC 19.14: https://en.cppreference.com/w/cpp/compiler_support','line_number':2438,'multiline':False]['text':' no filesystem support before iOS 13','line_number':2444,'multiline':False]['text':' no filesystem support before macOS Catalina','line_number':2450,'multiline':False]['text':' ranges header shipping in GCC 11.1.0 (released 2021-04-27) has syntax error','line_number':2476,'multiline':False]['text':' disable documentation warnings on clang','line_number':2498,'multiline':False]['text':' allow disabling exceptions','line_number':2505,'multiline':False]['text':' override exception macros','line_number':2519,'multiline':False]['text':' allow overriding assert','line_number':2539,'multiline':False]['text':' assert','line_number':2541,'multiline':False]['text':' allow to access some private functions (needed by the test suite)','line_number':2545,'multiline':False]['text':'!
@brief macro to briefly define a mapping between an enum and JSON
@def NLOHMANN_JSON_SERIALIZE_ENUM
@since version 3.4.0
','line_number':2552,'multiline':True]['text':' Ugly macros to avoid uglier copy-paste when specializing basic_json. They','line_number':2583,'multiline':False]['text':' may be removed in the future once the class is split.','line_number':2584,'multiline':False]['text':' Macros to simplify conversion from/to types','line_number':2600,'multiline':False]['text':'!
@brief macro
@def NLOHMANN_DEFINE_TYPE_INTRUSIVE
@since version 3.9.0
','line_number':2737,'multiline':True]['text':'!
@brief macro
@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE
@since version 3.9.0
','line_number':2750,'multiline':True]['text':' inspired from https://stackoverflow.com/a/26745591','line_number':2764,'multiline':False]['text':' allows to call any std function as if (e.g. with begin):','line_number':2765,'multiline':False]['text':' using std::begin; begin(x);','line_number':2766,'multiline':False]['text':'','line_number':2767,'multiline':False]['text':' it allows using the detected idiom to retrieve the return type','line_number':2768,'multiline':False]['text':' of such an expression','line_number':2769,'multiline':False]['text':' namespace detail2 ','line_number':2795,'multiline':True]['text':' partial_ordering','line_number':2821,'multiline':False]['text':'/////////////////////////','line_number':2828,'multiline':False]['text':' JSON type enumeration //','line_number':2829,'multiline':False]['text':'/////////////////////////','line_number':2830,'multiline':False]['text':'!
@brief the JSON type enumeration

This enumeration collects the different JSON types. It is internally used to
distinguish the stored values, and the functions @ref basic_json::is_null(),
@ref basic_json::is_object(), @ref basic_json::is_array(),
@ref basic_json::is_string(), @ref basic_json::is_boolean(),
@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
@ref basic_json::is_structured() rely on it.

@note There are three enumeration entries (number_integer, number_unsigned, and
number_float), because the library distinguishes these three types for numbers:
@ref basic_json::number_unsigned_t is used for unsigned integers,
@ref basic_json::number_integer_t is used for signed integers, and
@ref basic_json::number_float_t is used for floating-point numbers or to
approximate integers which do not fit in the limits of their respective type.

@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON
value with the default value for a given type

@since version 1.0.0
','line_number':2832,'multiline':True]['text':'/< null value','line_number':2858,'multiline':False]['text':'/< object (unordered set of name/value pairs)','line_number':2859,'multiline':False]['text':'/< array (ordered collection of values)','line_number':2860,'multiline':False]['text':'/< string value','line_number':2861,'multiline':False]['text':'/< boolean value','line_number':2862,'multiline':False]['text':'/< number value (signed integer)','line_number':2863,'multiline':False]['text':'/< number value (unsigned integer)','line_number':2864,'multiline':False]['text':'/< number value (floating-point)','line_number':2865,'multiline':False]['text':'/< binary array (ordered collection of bytes)','line_number':2866,'multiline':False]['text':'/< discarded by the parser callback function','line_number':2867,'multiline':False]['text':'!
@brief comparison operator for JSON types

Returns an ordering that is similar to Python:
- order: null < boolean < number < object < array < string < binary
- furthermore, each type is not smaller than itself
- discarded values are not comparable
- binary is represented as a b"" string in python and directly comparable to a
  string; however, making a binary array directly comparable with a string would
  be surprising behavior in a JSON file.

@since version 1.0.0
','line_number':2870,'multiline':True]['text':' *NOPAD*','line_number':2884,'multiline':False]['text':' null ','line_number':2890,'multiline':True]['text':' object ','line_number':2890,'multiline':True]['text':' array ','line_number':2890,'multiline':True]['text':' string ','line_number':2890,'multiline':True]['text':' boolean ','line_number':2891,'multiline':True]['text':' integer ','line_number':2891,'multiline':True]['text':' unsigned ','line_number':2891,'multiline':True]['text':' float ','line_number':2891,'multiline':True]['text':' binary ','line_number':2892,'multiline':True]['text':' *NOPAD*','line_number':2901,'multiline':False]['text':' GCC selects the built-in operator< over an operator rewritten from','line_number':2909,'multiline':False]['text':' a user-defined spaceship operator','line_number':2910,'multiline':False]['text':' Clang, MSVC, and ICC select the rewritten candidate','line_number':2911,'multiline':False]['text':' (see GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105200)','line_number':2912,'multiline':False]['text':' *NOPAD*','line_number':2916,'multiline':False]['text':' namespace detail','line_number':2920,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':2923,'multiline':False]['text':'     __ _____ _____ _____','line_number':2924,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':2925,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':2926,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':2927,'multiline':False]['text':'','line_number':2928,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':2929,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':2930,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':2934,'multiline':False]['text':'!
@brief replace all occurrences of a substring by another string

@param[in,out] s  the string to manipulate; changed so that all
               occurrences of @a f are replaced with @a t
@param[in]     f  the substring to replace with @a t
@param[in]     t  the string to replace @a f

@pre The search string @a f must not be empty. **This precondition is
enforced with an assertion.**

@since version 2.0.0
','line_number':2941,'multiline':True]['text':' find first occurrence of f','line_number':2959,'multiline':False]['text':' make sure f was found','line_number':2960,'multiline':False]['text':' replace with t, and','line_number':2961,'multiline':False]['text':' find next occurrence of f','line_number':2962,'multiline':False]['text':'!
 * @brief string escaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to escape
 * @return    escaped string
 *
 * Note the order of escaping "~" to "~0" and "/" to "~1" is important.
 ','line_number':2966,'multiline':True]['text':'!
 * @brief string unescaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to unescape
 * @return    unescaped string
 *
 * Note the order of escaping "~1" to "/" and "~0" to "~" is important.
 ','line_number':2981,'multiline':True]['text':' namespace detail','line_number':2995,'multiline':False]['text':' #include <nlohmann/detail/input/position_t.hpp>','line_number':2998,'multiline':False]['text':'     __ _____ _____ _____','line_number':2999,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3000,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3001,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3002,'multiline':False]['text':'','line_number':3003,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3004,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3005,'multiline':False]['text':' size_t','line_number':3009,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':3011,'multiline':False]['text':'/ struct to capture the start position of the current token','line_number':3018,'multiline':False]['text':'/ the total number of characters read','line_number':3021,'multiline':False]['text':'/ the number of characters read in the current line','line_number':3023,'multiline':False]['text':'/ the number of lines read','line_number':3025,'multiline':False]['text':'/ conversion to size_t to preserve SAX interface','line_number':3028,'multiline':False]['text':' namespace detail','line_number':3035,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3038,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3040,'multiline':False]['text':'     __ _____ _____ _____','line_number':3041,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3042,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3043,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3044,'multiline':False]['text':'','line_number':3045,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3046,'multiline':False]['text':' SPDX-FileCopyrightText: 2018 The Abseil Authors','line_number':3047,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3048,'multiline':False]['text':' array','line_number':3052,'multiline':False]['text':' size_t','line_number':3053,'multiline':False]['text':' conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type','line_number':3054,'multiline':False]['text':' index_sequence, make_index_sequence, index_sequence_for','line_number':3055,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3057,'multiline':False]['text':' the following utilities are natively available in C++14','line_number':3069,'multiline':False]['text':' alias templates to reduce boilerplate','line_number':3077,'multiline':False]['text':' The following code is taken from https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h','line_number':3081,'multiline':False]['text':' which is part of Google Abseil (https://github.com/abseil/abseil-cpp), licensed under the Apache License 2.0.','line_number':3082,'multiline':False]['text':'// START OF CODE FROM GOOGLE ABSEIL','line_number':3084,'multiline':False]['text':' integer_sequence','line_number':3086,'multiline':False]['text':'','line_number':3087,'multiline':False]['text':' Class template representing a compile-time integer sequence. An instantiation','line_number':3088,'multiline':False]['text':' of `integer_sequence<T, Ints...>` has a sequence of integers encoded in its','line_number':3089,'multiline':False]['text':' type through its template arguments (which is a common need when','line_number':3090,'multiline':False]['text':' working with C++11 variadic templates). `absl::integer_sequence` is designed','line_number':3091,'multiline':False]['text':' to be a drop-in replacement for C++14's `std::integer_sequence`.','line_number':3092,'multiline':False]['text':'','line_number':3093,'multiline':False]['text':' Example:','line_number':3094,'multiline':False]['text':'','line_number':3095,'multiline':False]['text':'   template< class T, T... Ints >','line_number':3096,'multiline':False]['text':'   void user_function(integer_sequence<T, Ints...>);','line_number':3097,'multiline':False]['text':'','line_number':3098,'multiline':False]['text':'   int main()','line_number':3099,'multiline':False]['text':'   {','line_number':3100,'multiline':False]['text':'     // user_function's `T` will be deduced to `int` and `Ints...`','line_number':3101,'multiline':False]['text':'     // will be deduced to `0, 1, 2, 3, 4`.','line_number':3102,'multiline':False]['text':'     user_function(make_integer_sequence<int, 5>());','line_number':3103,'multiline':False]['text':'   }','line_number':3104,'multiline':False]['text':' index_sequence','line_number':3115,'multiline':False]['text':'','line_number':3116,'multiline':False]['text':' A helper template for an `integer_sequence` of `size_t`,','line_number':3117,'multiline':False]['text':' `absl::index_sequence` is designed to be a drop-in replacement for C++14's','line_number':3118,'multiline':False]['text':' `std::index_sequence`.','line_number':3119,'multiline':False]['text':' Note that SeqSize == sizeof...(Ints). It's passed explicitly for efficiency.','line_number':3129,'multiline':False]['text':' Recursion helper for 'make_integer_sequence<T, N>'.','line_number':3142,'multiline':False]['text':' 'Gen<T, N>::type' is an alias for 'integer_sequence<T, 0, 1, ... N-1>'.','line_number':3143,'multiline':False]['text':' namespace utility_internal','line_number':3157,'multiline':False]['text':' Compile-time sequences of integers','line_number':3159,'multiline':False]['text':' make_integer_sequence','line_number':3161,'multiline':False]['text':'','line_number':3162,'multiline':False]['text':' This template alias is equivalent to','line_number':3163,'multiline':False]['text':' `integer_sequence<int, 0, 1, ..., N-1>`, and is designed to be a drop-in','line_number':3164,'multiline':False]['text':' replacement for C++14's `std::make_integer_sequence`.','line_number':3165,'multiline':False]['text':' make_index_sequence','line_number':3169,'multiline':False]['text':'','line_number':3170,'multiline':False]['text':' This template alias is equivalent to `index_sequence<0, 1, ..., N-1>`,','line_number':3171,'multiline':False]['text':' and is designed to be a drop-in replacement for C++14's','line_number':3172,'multiline':False]['text':' `std::make_index_sequence`.','line_number':3173,'multiline':False]['text':' index_sequence_for','line_number':3177,'multiline':False]['text':'','line_number':3178,'multiline':False]['text':' Converts a typename pack into an index sequence of the same length, and','line_number':3179,'multiline':False]['text':' is designed to be a drop-in replacement for C++14's','line_number':3180,'multiline':False]['text':' `std::index_sequence_for()`','line_number':3181,'multiline':False]['text':'// END OF CODE FROM GOOGLE ABSEIL','line_number':3185,'multiline':False]['text':' dispatch utility (taken from ranges-v3)','line_number':3189,'multiline':False]['text':' taken from ranges-v3','line_number':3193,'multiline':False]['text':' namespace detail','line_number':3211,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':3214,'multiline':False]['text':'     __ _____ _____ _____','line_number':3215,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3216,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3217,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3218,'multiline':False]['text':'','line_number':3219,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3220,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3221,'multiline':False]['text':' numeric_limits','line_number':3225,'multiline':False]['text':' false_type, is_constructible, is_integral, is_same, true_type','line_number':3226,'multiline':False]['text':' declval','line_number':3227,'multiline':False]['text':' tuple','line_number':3228,'multiline':False]['text':' #include <nlohmann/detail/iterators/iterator_traits.hpp>','line_number':3230,'multiline':False]['text':'     __ _____ _____ _____','line_number':3231,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3232,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3233,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3234,'multiline':False]['text':'','line_number':3235,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3236,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3237,'multiline':False]['text':' random_access_iterator_tag','line_number':3241,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':3243,'multiline':False]['text':' #include <nlohmann/detail/meta/void_t.hpp>','line_number':3245,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3247,'multiline':False]['text':' This is required as some compilers implement std::iterator_traits in a way that','line_number':3270,'multiline':False]['text':' doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.','line_number':3271,'multiline':False]['text':' namespace detail','line_number':3293,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3296,'multiline':False]['text':' #include <nlohmann/detail/meta/call_std/begin.hpp>','line_number':3298,'multiline':False]['text':'     __ _____ _____ _____','line_number':3299,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3300,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3301,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3302,'multiline':False]['text':'','line_number':3303,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3304,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3305,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3309,'multiline':False]['text':' #include <nlohmann/detail/meta/call_std/end.hpp>','line_number':3318,'multiline':False]['text':'     __ _____ _____ _____','line_number':3319,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3320,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3321,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3322,'multiline':False]['text':'','line_number':3323,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3324,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3325,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3329,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3338,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':3340,'multiline':False]['text':' #include <nlohmann/json_fwd.hpp>','line_number':3342,'multiline':False]['text':'     __ _____ _____ _____','line_number':3343,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':3344,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':3345,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':3346,'multiline':False]['text':'','line_number':3347,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':3348,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':3349,'multiline':False]['text':' int64_t, uint64_t','line_number':3354,'multiline':False]['text':' map','line_number':3355,'multiline':False]['text':' allocator','line_number':3356,'multiline':False]['text':' string','line_number':3357,'multiline':False]['text':' vector','line_number':3358,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':3360,'multiline':False]['text':'!
    @brief namespace for Niels Lohmann
    @see https://github.com/nlohmann
    @since version 1.0.0
    ','line_number':3363,'multiline':True]['text':'!
    @brief default JSONSerializer template argument

    This serializer ignores the template arguments and uses ADL
    ([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
    for serialization.
    ','line_number':3370,'multiline':True]['text':'/ a class to store JSON values','line_number':3380,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/','line_number':3381,'multiline':False]['text':'/ @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document','line_number':3395,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/','line_number':3396,'multiline':False]['text':'!
    @brief default specialization
    @sa https://json.nlohmann.me/api/json/
    ','line_number':3400,'multiline':True]['text':'/ @brief a minimal map-like container that preserves insertion order','line_number':3406,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/ordered_map/','line_number':3407,'multiline':False]['text':'/ @brief specialization that maintains the insertion order of object keys','line_number':3411,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/ordered_json/','line_number':3412,'multiline':False]['text':' INCLUDE_NLOHMANN_JSON_FWD_HPP_','line_number':3417,'multiline':False]['text':'!
@brief detail namespace with internal helper functions

This namespace collects functions that should not be exposed,
implementations of some @ref basic_json methods, and meta-programming helpers.

@since version 2.1.0
','line_number':3421,'multiline':True]['text':'///////////','line_number':3432,'multiline':False]['text':' helpers //','line_number':3433,'multiline':False]['text':'///////////','line_number':3434,'multiline':False]['text':' Note to maintainers:','line_number':3436,'multiline':False]['text':'','line_number':3437,'multiline':False]['text':' Every trait in this file expects a non CV-qualified type.','line_number':3438,'multiline':False]['text':' The only exceptions are in the 'aliases for detected' section','line_number':3439,'multiline':False]['text':' (i.e. those of the form: decltype(T::member_function(std::declval<T>())))','line_number':3440,'multiline':False]['text':'','line_number':3441,'multiline':False]['text':' In this case, T has to be properly CV-qualified to constraint the function arguments','line_number':3442,'multiline':False]['text':' (e.g. to_json(BasicJsonType&, const T&))','line_number':3443,'multiline':False]['text':' used by exceptions create() member functions','line_number':3450,'multiline':False]['text':' true_type for pointer to possibly cv-qualified basic_json or std::nullptr_t','line_number':3451,'multiline':False]['text':' false_type otherwise','line_number':3452,'multiline':False]['text':'////////////////////','line_number':3460,'multiline':False]['text':' json_ref helpers //','line_number':3461,'multiline':False]['text':'////////////////////','line_number':3462,'multiline':False]['text':'////////////////////////','line_number':3473,'multiline':False]['text':' aliases for detected //','line_number':3474,'multiline':False]['text':'////////////////////////','line_number':3475,'multiline':False]['text':' trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists','line_number':3507,'multiline':False]['text':' trait checking if j.get<T> is valid','line_number':3511,'multiline':False]['text':' use this trait instead of std::is_constructible or std::is_convertible,','line_number':3512,'multiline':False]['text':' both rely on, or make use of implicit conversions, and thus fail when T','line_number':3513,'multiline':False]['text':' has several constructors/operator= (see https://github.com/nlohmann/json/issues/958)','line_number':3514,'multiline':False]['text':' This trait checks if JSONSerializer<T>::from_json(json const&) exists','line_number':3531,'multiline':False]['text':' this overload is used for non-default-constructible user-defined-types','line_number':3532,'multiline':False]['text':' This trait checks if BasicJsonType::json_serializer<T>::to_json exists','line_number':3546,'multiline':False]['text':' Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.','line_number':3547,'multiline':False]['text':' obtains the actual object key comparator','line_number':3567,'multiline':False]['text':'/////////////////','line_number':3580,'multiline':False]['text':' is_ functions //','line_number':3581,'multiline':False]['text':'/////////////////','line_number':3582,'multiline':False]['text':' https://en.cppreference.com/w/cpp/types/conjunction','line_number':3584,'multiline':False]['text':' https://en.cppreference.com/w/cpp/types/negation','line_number':3591,'multiline':False]['text':' Reimplementation of is_constructible and is_default_constructible, due to them being broken for','line_number':3594,'multiline':False]['text':' std::pair and std::tuple until LWG 2367 fix (see https://cplusplus.github.io/LWG/lwg-defects.html#2367).','line_number':3595,'multiline':False]['text':' This causes compile errors in e.g. clang 3.5 or gcc 4.9.','line_number':3596,'multiline':False]['text':' to be 100% correct, it should use https://en.cppreference.com/w/cpp/iterator/input_or_output_iterator','line_number':3660,'multiline':False]['text':' and https://en.cppreference.com/w/cpp/iterator/sentinel_for','line_number':3661,'multiline':False]['text':' but reimplementing these would be too much work, as a lot of other concepts are used underneath','line_number':3662,'multiline':False]['text':' The following implementation of is_complete_type is taken from','line_number':3676,'multiline':False]['text':' https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/','line_number':3677,'multiline':False]['text':' and is written by Xiang Fan who agreed to using it in this library.','line_number':3678,'multiline':False]['text':' macOS's is_constructible does not play well with nonesuch...','line_number':3698,'multiline':False]['text':' launder type through decltype() to fix compilation failure on ICPC','line_number':3753,'multiline':False]['text':' special case for types like std::filesystem::path whose iterator's value_type are themselves','line_number':3776,'multiline':False]['text':' c.f. https://github.com/nlohmann/json/pull/3073','line_number':3777,'multiline':False]['text':' special case for types like std::filesystem::path whose iterator's value_type are themselves','line_number':3811,'multiline':False]['text':' c.f. https://github.com/nlohmann/json/pull/3073','line_number':3812,'multiline':False]['text':' is there an assert somewhere on overflows?','line_number':3844,'multiline':False]['text':' checks if a given type T is a template specialization of Primary','line_number':3892,'multiline':False]['text':' checks if A and B are comparable using Compare functor','line_number':3902,'multiline':False]['text':' type trait to check if KeyType can be used as object key (without a BasicJsonType)','line_number':3915,'multiline':False]['text':' see is_usable_as_basic_json_key_type below','line_number':3916,'multiline':False]['text':' type trait to check if KeyType can be used as object key','line_number':3929,'multiline':False]['text':' true if:','line_number':3930,'multiline':False]['text':'   - KeyType is comparable with BasicJsonType::object_t::key_type','line_number':3931,'multiline':False]['text':'   - if ExcludeObjectKeyType is true, KeyType is not BasicJsonType::object_t::key_type','line_number':3932,'multiline':False]['text':'   - the comparator is transparent or RequireTransparentComparator is false','line_number':3933,'multiline':False]['text':'   - KeyType is not a JSON iterator or json_pointer','line_number':3934,'multiline':False]['text':' type trait to check if object_t has an erase() member functions accepting KeyType','line_number':3948,'multiline':False]['text':' a naive helper to check if a type is an ordered_map (exploits the fact that','line_number':3957,'multiline':False]['text':' ordered_map inherits capacity() from std::vector)','line_number':3958,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':3966,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':3972,'multiline':False]['text':' to avoid useless casts (see https://github.com/nlohmann/json/issues/2893#issuecomment-889152324)','line_number':3975,'multiline':False]['text':' there's a disjunction trait in another PR; replace when merged','line_number':3997,'multiline':False]['text':'val','line_number':4071,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':4086,'multiline':False]['text':' is_c_string','line_number':4087,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':4088,'multiline':False]['text':' namespace impl','line_number':4105,'multiline':False]['text':' checks whether T is a [cv] char */[cv] char[] C string','line_number':4107,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':4114,'multiline':False]['text':' is_transparent','line_number':4115,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':4116,'multiline':False]['text':' namespace impl','line_number':4127,'multiline':False]['text':' checks whether T has a member named is_transparent','line_number':4129,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':4133,'multiline':False]['text':' namespace detail','line_number':4135,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':4138,'multiline':False]['text':'     __ _____ _____ _____','line_number':4139,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':4140,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':4141,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':4142,'multiline':False]['text':'','line_number':4143,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':4144,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':4145,'multiline':False]['text':' strlen','line_number':4149,'multiline':False]['text':' string','line_number':4150,'multiline':False]['text':' forward','line_number':4151,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':4153,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':4155,'multiline':False]['text':'c','line_number':4174,'multiline':True]['text':' cppcheck-suppress ignoredReturnValue','line_number':4182,'multiline':False]['text':'out','line_number':4193,'multiline':True]['text':' namespace detail','line_number':4285,'multiline':False]['text':'//////////////','line_number':4294,'multiline':False]['text':' exceptions //','line_number':4295,'multiline':False]['text':'//////////////','line_number':4296,'multiline':False]['text':'/ @brief general exception of the @ref basic_json class','line_number':4298,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/exception/','line_number':4299,'multiline':False]['text':'/ returns the explanatory string','line_number':4303,'multiline':False]['text':'/ the id of the exception','line_number':4309,'multiline':False]['text':' NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':4310,'multiline':False]['text':' NOLINT(bugprone-throw-keyword-missing)','line_number':4314,'multiline':False]['text':'leaf_element','line_number':4321,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':4361,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4362,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4363,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4364,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4365,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4366,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4367,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4368,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4369,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':4370,'multiline':False]['text':'/ an exception object as storage for error messages','line_number':4392,'multiline':False]['text':'/ @brief exception indicating a parse error','line_number':4396,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/parse_error/','line_number':4397,'multiline':False]['text':'!
    @brief create a parse error exception
    @param[in] id_       the id of the exception
    @param[in] pos       the position where the error occurred (or with
                         chars_read_total=0 if the position cannot be
                         determined)
    @param[in] what_arg  the explanatory string
    @return parse_error object
    ','line_number':4401,'multiline':True]['text':'!
    @brief byte index of the parse error

    The byte index of the last read character in the input file.

    @note For an input with n bytes, 1 is the index of the first character and
          n+1 is the index of the terminating null byte or the end of file.
          This also holds true when reading a byte vector (CBOR or MessagePack).
    ','line_number':4427,'multiline':True]['text':'/ @brief exception indicating errors with iterators','line_number':4449,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/','line_number':4450,'multiline':False]['text':'/ @brief exception indicating executing a member function with a wrong type','line_number':4467,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/type_error/','line_number':4468,'multiline':False]['text':'/ @brief exception indicating access out of the defined range','line_number':4484,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/out_of_range/','line_number':4485,'multiline':False]['text':'/ @brief exception indicating other library errors','line_number':4501,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/other_error/','line_number':4502,'multiline':False]['text':' namespace detail','line_number':4518,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':4521,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':4523,'multiline':False]['text':' #include <nlohmann/detail/meta/identity_tag.hpp>','line_number':4525,'multiline':False]['text':'     __ _____ _____ _____','line_number':4526,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':4527,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':4528,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':4529,'multiline':False]['text':'','line_number':4530,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':4531,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':4532,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':4536,'multiline':False]['text':' dispatching helper struct','line_number':4543,'multiline':False]['text':' namespace detail','line_number':4546,'multiline':False]['text':' #include <nlohmann/detail/meta/std_fs.hpp>','line_number':4549,'multiline':False]['text':'     __ _____ _____ _____','line_number':4550,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':4551,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':4552,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':4553,'multiline':False]['text':'','line_number':4554,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':4555,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':4556,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':4560,'multiline':False]['text':' namespace detail','line_number':4569,'multiline':False]['text':' namespace detail','line_number':4577,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':4581,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':4583,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':4585,'multiline':False]['text':' overloads for basic_json template parameters','line_number':4602,'multiline':False]['text':' JSON_DISABLE_ENUM_SERIALIZATION','line_number':4703,'multiline':False]['text':' forward_list doesn't have an insert method','line_number':4705,'multiline':False]['text':' valarray doesn't have an insert method','line_number':4722,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':4740,'multiline':False]['text':'unused','line_number':4750,'multiline':True]['text':'unused','line_number':4757,'multiline':True]['text':'unused','line_number':4770,'multiline':True]['text':' get<BasicJsonType>() returns *this, this won't call a from_json','line_number':4783,'multiline':False]['text':' method when value_type is BasicJsonType','line_number':4784,'multiline':False]['text':'unused','line_number':4795,'multiline':True]['text':' get<BasicJsonType>() returns *this, this won't call a from_json','line_number':4804,'multiline':False]['text':' method when value_type is BasicJsonType','line_number':4805,'multiline':False]['text':'unused','line_number':4834,'multiline':True]['text':'unused','line_number':4834,'multiline':True]['text':' overload for arithmetic types, not chosen for basic_json template arguments','line_number':4884,'multiline':False]['text':' (BooleanType, etc..); note: Is it really necessary to provide explicit','line_number':4885,'multiline':False]['text':' overloads for boolean_t etc. in case of a custom BooleanType which is not','line_number':4886,'multiline':False]['text':' an arithmetic type?','line_number':4887,'multiline':False]['text':'unused','line_number':4933,'multiline':True]['text':'unused','line_number':4939,'multiline':True]['text':'unused','line_number':4939,'multiline':True]['text':'unused','line_number':4946,'multiline':True]['text':'unused','line_number':4952,'multiline':True]['text':'unused','line_number':4952,'multiline':True]['text':'unused','line_number':4958,'multiline':True]['text':' namespace detail','line_number':5038,'multiline':False]['text':'/ namespace to hold default `from_json` function','line_number':5041,'multiline':False]['text':'/ to see why this is required:','line_number':5042,'multiline':False]['text':'/ http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html','line_number':5043,'multiline':False]['text':' NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)','line_number':5044,'multiline':False]['text':' NOLINT(misc-definitions-in-headers)','line_number':5047,'multiline':False]['text':' namespace','line_number':5050,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_json.hpp>','line_number':5055,'multiline':False]['text':'     __ _____ _____ _____','line_number':5056,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':5057,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':5058,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':5059,'multiline':False]['text':'','line_number':5060,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':5061,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':5062,'multiline':False]['text':' copy','line_number':5066,'multiline':False]['text':' begin, end','line_number':5067,'multiline':False]['text':' string','line_number':5068,'multiline':False]['text':' tuple, get','line_number':5069,'multiline':False]['text':' is_same, is_constructible, is_floating_point, is_enum, underlying_type','line_number':5070,'multiline':False]['text':' move, forward, declval, pair','line_number':5071,'multiline':False]['text':' valarray','line_number':5072,'multiline':False]['text':' vector','line_number':5073,'multiline':False]['text':' #include <nlohmann/detail/iterators/iteration_proxy.hpp>','line_number':5075,'multiline':False]['text':'     __ _____ _____ _____','line_number':5076,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':5077,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':5078,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':5079,'multiline':False]['text':'','line_number':5080,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':5081,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':5082,'multiline':False]['text':' size_t','line_number':5086,'multiline':False]['text':' input_iterator_tag','line_number':5087,'multiline':False]['text':' string, to_string','line_number':5088,'multiline':False]['text':' tuple_size, get, tuple_element','line_number':5089,'multiline':False]['text':' move','line_number':5090,'multiline':False]['text':' enable_borrowed_range','line_number':5093,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':5096,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':5098,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':5100,'multiline':False]['text':' For ADL','line_number':5110,'multiline':False]['text':'/ the iterator','line_number':5125,'multiline':False]['text':'/ an index for arrays (used to create key names)','line_number':5127,'multiline':False]['text':'/ last stringified array index','line_number':5129,'multiline':False]['text':'/ a string representation of the array index','line_number':5131,'multiline':False]['text':'/ an empty string (to return a reference for primitive values)','line_number':5133,'multiline':False]['text':' older GCCs are a bit fussy and require explicit noexcept specifiers on defaulted functions','line_number':5147,'multiline':False]['text':'/ dereference operator (needed for range-based for)','line_number':5156,'multiline':False]['text':'/ increment operator (needed for range-based for)','line_number':5162,'multiline':False]['text':' NOLINT(cert-dcl21-cpp)','line_number':5171,'multiline':False]['text':'/ equality operator (needed for InputIterator)','line_number':5179,'multiline':False]['text':'/ inequality operator (needed for range-based for)','line_number':5185,'multiline':False]['text':'/ return key of the iterator','line_number':5191,'multiline':False]['text':' use integer array index as key','line_number':5198,'multiline':False]['text':' use key from the object','line_number':5209,'multiline':False]['text':' use an empty key for all primitive types','line_number':5213,'multiline':False]['text':'/ return value of the iterator','line_number':5227,'multiline':False]['text':'/ proxy class for the items() function','line_number':5234,'multiline':False]['text':'/ the container to iterate','line_number':5238,'multiline':False]['text':'/ construct iteration proxy from a container','line_number':5244,'multiline':False]['text':'/ return iterator begin (needed for range-based for)','line_number':5254,'multiline':False]['text':'/ return iterator end (needed for range-based for)','line_number':5260,'multiline':False]['text':' Structured Bindings Support','line_number':5267,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':5268,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':5269,'multiline':False]['text':' Structured Bindings Support','line_number':5275,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':5276,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':5277,'multiline':False]['text':' namespace detail','line_number':5284,'multiline':False]['text':' The Addition to the STD Namespace is required to add','line_number':5287,'multiline':False]['text':' Structured Bindings Support to the iteration_proxy_value class','line_number':5288,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':5289,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':5290,'multiline':False]['text':' Fix: https://github.com/nlohmann/json/issues/1401','line_number':5295,'multiline':False]['text':' namespace std','line_number':5315,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':5322,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':5324,'multiline':False]['text':' #include <nlohmann/detail/meta/std_fs.hpp>','line_number':5326,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':5328,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':5330,'multiline':False]['text':'////////////////','line_number':5337,'multiline':False]['text':' constructors //','line_number':5338,'multiline':False]['text':'////////////////','line_number':5339,'multiline':False]['text':'
 * Note all external_constructor<>::construct functions need to call
 * j.m_value.destroy(j.m_type) to avoid a memory leak in case j contains an
 * allocated value (e.g., a string). See bug issue
 * https://github.com/nlohmann/json/issues/2865 for more information.
 ','line_number':5341,'multiline':True]['text':'///////////','line_number':5565,'multiline':False]['text':' to_json //','line_number':5566,'multiline':False]['text':'///////////','line_number':5567,'multiline':False]['text':' JSON_DISABLE_ENUM_SERIALIZATION','line_number':5631,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':5687,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':5689,'multiline':False]['text':' for https://github.com/nlohmann/json/pull/1134','line_number':5700,'multiline':False]['text':'unused','line_number':5709,'multiline':True]['text':' namespace detail','line_number':5737,'multiline':False]['text':'/ namespace to hold default `to_json` function','line_number':5740,'multiline':False]['text':'/ to see why this is required:','line_number':5741,'multiline':False]['text':'/ http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html','line_number':5742,'multiline':False]['text':' NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)','line_number':5743,'multiline':False]['text':' NOLINT(misc-definitions-in-headers)','line_number':5746,'multiline':False]['text':' namespace','line_number':5749,'multiline':False]['text':' #include <nlohmann/detail/meta/identity_tag.hpp>','line_number':5754,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/adl_serializer/','line_number':5759,'multiline':False]['text':'/ @brief convert a JSON value to any value type','line_number':5763,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/adl_serializer/from_json/','line_number':5764,'multiline':False]['text':'/ @brief convert a JSON value to any value type','line_number':5773,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/adl_serializer/from_json/','line_number':5774,'multiline':False]['text':'/ @brief convert any value type to a JSON value','line_number':5783,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/adl_serializer/to_json/','line_number':5784,'multiline':False]['text':' #include <nlohmann/byte_container_with_subtype.hpp>','line_number':5796,'multiline':False]['text':'     __ _____ _____ _____','line_number':5797,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':5798,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':5799,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':5800,'multiline':False]['text':'','line_number':5801,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':5802,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':5803,'multiline':False]['text':' uint8_t, uint64_t','line_number':5807,'multiline':False]['text':' tie','line_number':5808,'multiline':False]['text':' move','line_number':5809,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':5811,'multiline':False]['text':'/ @brief an internal type for a backed binary type','line_number':5816,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/','line_number':5817,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/','line_number':5825,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/','line_number':5830,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/','line_number':5835,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/','line_number':5840,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/','line_number':5847,'multiline':False]['text':'/ @brief sets the binary subtype','line_number':5865,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/','line_number':5866,'multiline':False]['text':'/ @brief return the binary subtype','line_number':5873,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/subtype/','line_number':5874,'multiline':False]['text':'/ @brief return whether the value has a subtype','line_number':5880,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/','line_number':5881,'multiline':False]['text':'/ @brief clears the binary subtype','line_number':5887,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/','line_number':5888,'multiline':False]['text':' #include <nlohmann/detail/conversions/from_json.hpp>','line_number':5902,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_json.hpp>','line_number':5904,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':5906,'multiline':False]['text':' #include <nlohmann/detail/hash.hpp>','line_number':5908,'multiline':False]['text':'     __ _____ _____ _____','line_number':5909,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':5910,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':5911,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':5912,'multiline':False]['text':'','line_number':5913,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':5914,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':5915,'multiline':False]['text':' uint8_t','line_number':5919,'multiline':False]['text':' size_t','line_number':5920,'multiline':False]['text':' hash','line_number':5921,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':5923,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':5925,'multiline':False]['text':' boost::hash_combine','line_number':5932,'multiline':False]['text':'!
@brief hash a JSON value

The hash function tries to rely on std::hash where possible. Furthermore, the
type of the JSON value is taken into account to have different hash values for
null, 0, 0U, and false, etc.

@tparam BasicJsonType basic_json specialization
@param j JSON value to hash
@return hash value of j
','line_number':5939,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':6032,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':6033,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':6034,'multiline':False]['text':' namespace detail','line_number':6038,'multiline':False]['text':' #include <nlohmann/detail/input/binary_reader.hpp>','line_number':6041,'multiline':False]['text':'     __ _____ _____ _____','line_number':6042,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':6043,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':6044,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':6045,'multiline':False]['text':'','line_number':6046,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':6047,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':6048,'multiline':False]['text':' generate_n','line_number':6052,'multiline':False]['text':' array','line_number':6053,'multiline':False]['text':' ldexp','line_number':6054,'multiline':False]['text':' size_t','line_number':6055,'multiline':False]['text':' uint8_t, uint16_t, uint32_t, uint64_t','line_number':6056,'multiline':False]['text':' snprintf','line_number':6057,'multiline':False]['text':' memcpy','line_number':6058,'multiline':False]['text':' back_inserter','line_number':6059,'multiline':False]['text':' numeric_limits','line_number':6060,'multiline':False]['text':' char_traits, string','line_number':6061,'multiline':False]['text':' make_pair, move','line_number':6062,'multiline':False]['text':' vector','line_number':6063,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':6065,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':6067,'multiline':False]['text':'     __ _____ _____ _____','line_number':6068,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':6069,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':6070,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':6071,'multiline':False]['text':'','line_number':6072,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':6073,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':6074,'multiline':False]['text':' array','line_number':6078,'multiline':False]['text':' size_t','line_number':6079,'multiline':False]['text':' strlen','line_number':6080,'multiline':False]['text':' begin, end, iterator_traits, random_access_iterator_tag, distance, next','line_number':6081,'multiline':False]['text':' shared_ptr, make_shared, addressof','line_number':6082,'multiline':False]['text':' accumulate','line_number':6083,'multiline':False]['text':' string, char_traits','line_number':6084,'multiline':False]['text':' enable_if, is_base_of, is_pointer, is_integral, remove_pointer','line_number':6085,'multiline':False]['text':' pair, declval','line_number':6086,'multiline':False]['text':' FILE *','line_number':6089,'multiline':False]['text':' istream','line_number':6090,'multiline':False]['text':' JSON_NO_IO','line_number':6091,'multiline':False]['text':' #include <nlohmann/detail/iterators/iterator_traits.hpp>','line_number':6093,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':6095,'multiline':False]['text':'/ the supported input formats','line_number':6102,'multiline':False]['text':'//////////////////','line_number':6105,'multiline':False]['text':' input adapters //','line_number':6106,'multiline':False]['text':'//////////////////','line_number':6107,'multiline':False]['text':'!
Input adapter for stdio file access. This adapter read only 1 byte and do not use any
 buffer. This adapter is a very low level adapter.
','line_number':6110,'multiline':True]['text':' make class move-only','line_number':6126,'multiline':False]['text':'/ the file pointer to read from','line_number':6139,'multiline':False]['text':'!
Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
beginning of input. Does not support changing the underlying std::streambuf
in mid-input. Maintains underlying std::istream and std::streambuf to support
subsequent use of standard std::istream operations to process any input
characters following those used in parsing the JSON input.  Clears the
std::istream flags; any input errors (e.g., EOF) will be detected by the first
subsequent call for input from the std::istream.
','line_number':6144,'multiline':True]['text':' clear stream flags; we use underlying streambuf I/O, do not','line_number':6160,'multiline':False]['text':' maintain ifstream flags, except eof','line_number':6161,'multiline':False]['text':' delete because of pointer members','line_number':6172,'multiline':False]['text':' std::istream/std::streambuf use std::char_traits<char>::to_int_type, to','line_number':6184,'multiline':False]['text':' ensure that std::char_traits<char>::eof() and the character 0xFF do not','line_number':6185,'multiline':False]['text':' end up as the same value, e.g. 0xFFFFFFFF.','line_number':6186,'multiline':False]['text':' set eof manually, as we don't use the istream interface.','line_number':6190,'multiline':False]['text':'/ the associated input stream','line_number':6199,'multiline':False]['text':' JSON_NO_IO','line_number':6203,'multiline':False]['text':' General-purpose iterator-based adapter. It might not be as fast as','line_number':6205,'multiline':False]['text':' theoretically possible for some containers, but it is extremely versatile.','line_number':6206,'multiline':False]['text':' UTF-32','line_number':6249,'multiline':False]['text':' get the current character','line_number':6264,'multiline':False]['text':' UTF-32 to UTF-8 encoding','line_number':6267,'multiline':False]['text':' unknown character','line_number':6296,'multiline':False]['text':' UTF-16','line_number':6307,'multiline':False]['text':' get the current character','line_number':6322,'multiline':False]['text':' UTF-16 to UTF-8 encoding','line_number':6325,'multiline':False]['text':' Wraps another input apdater to convert wide character types into individual bytes.','line_number':6366,'multiline':False]['text':' check if buffer needs to be filled','line_number':6378,'multiline':False]['text':' use buffer','line_number':6387,'multiline':False]['text':'/ a buffer for UTF-8 bytes','line_number':6402,'multiline':False]['text':'/ index to the utf8_codes array for the next valid byte','line_number':6405,'multiline':False]['text':'/ number of valid bytes in the utf8_codes array','line_number':6407,'multiline':False]['text':' General purpose iterator-based input','line_number':6449,'multiline':False]['text':' Convenience shorthand from container to iterator','line_number':6457,'multiline':False]['text':' Enables ADL on begin(container) and end(container)','line_number':6458,'multiline':False]['text':' Encloses the using declarations in namespace for not to leak them to outside scope','line_number':6459,'multiline':False]['text':' namespace container_input_adapter_factory_impl','line_number':6482,'multiline':False]['text':' Special cases with fast paths','line_number':6491,'multiline':False]['text':' JSON_NO_IO','line_number':6506,'multiline':False]['text':' Null-delimited strings, and the like.','line_number':6510,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':6526,'multiline':False]['text':' This class only handles inputs of input_buffer_adapter type.','line_number':6531,'multiline':False]['text':' It's required so that expressions like {ptr, len} can be implicitly cast','line_number':6532,'multiline':False]['text':' to the correct adapter.','line_number':6533,'multiline':False]['text':' NOLINT(hicpp-move-const-arg,performance-move-const-arg)','line_number':6555,'multiline':False]['text':' namespace detail','line_number':6562,'multiline':False]['text':' #include <nlohmann/detail/input/json_sax.hpp>','line_number':6565,'multiline':False]['text':'     __ _____ _____ _____','line_number':6566,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':6567,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':6568,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':6569,'multiline':False]['text':'','line_number':6570,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':6571,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':6572,'multiline':False]['text':' string','line_number':6577,'multiline':False]['text':' move','line_number':6578,'multiline':False]['text':' vector','line_number':6579,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':6581,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':6583,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':6585,'multiline':False]['text':'!
@brief SAX interface

This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
Each function is called in different situations while the input is parsed. The
boolean return value informs the parser whether to continue processing the
input.
','line_number':6590,'multiline':True]['text':'!
    @brief a null value was read
    @return whether parsing should proceed
    ','line_number':6607,'multiline':True]['text':'!
    @brief a boolean value was read
    @param[in] val  boolean value
    @return whether parsing should proceed
    ','line_number':6613,'multiline':True]['text':'!
    @brief an integer number was read
    @param[in] val  integer value
    @return whether parsing should proceed
    ','line_number':6620,'multiline':True]['text':'!
    @brief an unsigned integer number was read
    @param[in] val  unsigned integer value
    @return whether parsing should proceed
    ','line_number':6627,'multiline':True]['text':'!
    @brief a floating-point number was read
    @param[in] val  floating-point value
    @param[in] s    raw token value
    @return whether parsing should proceed
    ','line_number':6634,'multiline':True]['text':'!
    @brief a string value was read
    @param[in] val  string value
    @return whether parsing should proceed
    @note It is safe to move the passed string value.
    ','line_number':6642,'multiline':True]['text':'!
    @brief a binary value was read
    @param[in] val  binary value
    @return whether parsing should proceed
    @note It is safe to move the passed binary value.
    ','line_number':6650,'multiline':True]['text':'!
    @brief the beginning of an object was read
    @param[in] elements  number of object elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    ','line_number':6658,'multiline':True]['text':'!
    @brief an object key was read
    @param[in] val  object key
    @return whether parsing should proceed
    @note It is safe to move the passed string.
    ','line_number':6666,'multiline':True]['text':'!
    @brief the end of an object was read
    @return whether parsing should proceed
    ','line_number':6674,'multiline':True]['text':'!
    @brief the beginning of an array was read
    @param[in] elements  number of array elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    ','line_number':6680,'multiline':True]['text':'!
    @brief the end of an array was read
    @return whether parsing should proceed
    ','line_number':6688,'multiline':True]['text':'!
    @brief a parse error occurred
    @param[in] position    the position in the input where the error occurs
    @param[in] last_token  the last read token
    @param[in] ex          an exception object describing the error
    @return whether parsing should proceed (must return false)
    ','line_number':6694,'multiline':True]['text':'!
@brief SAX implementation to create a JSON value from SAX events

This class implements the @ref json_sax interface and processes the SAX events
to create a JSON value which makes it basically a DOM parser. The structure or
hierarchy of the JSON value is managed by the stack `ref_stack` which contains
a pointer to the respective array or object for each recursion depth.

After successful parsing, the value that is passed by reference to the
constructor contains the parsed value.

@tparam BasicJsonType  the JSON type
','line_number':6716,'multiline':True]['text':'!
    @param[in,out] r  reference to a JSON value that is manipulated while
                       parsing
    @param[in] allow_exceptions_  whether parse errors yield exceptions
    ','line_number':6739,'multiline':True]['text':' make class move-only','line_number':6748,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6750,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6752,'multiline':False]['text':'unused','line_number':6779,'multiline':True]['text':' add null at given key and store the reference for later','line_number':6814,'multiline':False]['text':'unused','line_number':6852,'multiline':True]['text':'unused','line_number':6852,'multiline':True]['text':'!
    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements
    ','line_number':6870,'multiline':True]['text':'/ the parsed JSON value','line_number':6900,'multiline':False]['text':'/ stack to model hierarchy of values','line_number':6902,'multiline':False]['text':'/ helper to hold the reference for the next object element','line_number':6904,'multiline':False]['text':'/ whether a syntax error occurred','line_number':6906,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':6908,'multiline':False]['text':' make class move-only','line_number':6932,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6934,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6936,'multiline':False]['text':'unused','line_number':6963,'multiline':True]['text':' check callback for object start','line_number':6983,'multiline':False]['text':' check object limit','line_number':6990,'multiline':False]['text':' check callback for key','line_number':7003,'multiline':False]['text':' add discarded value at given key and store the reference for later','line_number':7007,'multiline':False]['text':' discard object','line_number':7022,'multiline':False]['text':' remove discarded value','line_number':7038,'multiline':False]['text':' check array limit','line_number':7060,'multiline':False]['text':' discard array','line_number':7082,'multiline':False]['text':' remove discarded value','line_number':7092,'multiline':False]['text':'unused','line_number':7102,'multiline':True]['text':'unused','line_number':7102,'multiline':True]['text':'!
    @param[in] v  value to add to the JSON value we build during parsing
    @param[in] skip_callback  whether we should skip calling the callback
               function; this is required after start_array() and
               start_object() SAX events, because otherwise we would call the
               callback function with an empty array or object, respectively.

    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements

    @return pair of boolean (whether value should be kept) and pointer (to the
            passed value in the ref_stack hierarchy; nullptr if not kept)
    ','line_number':7120,'multiline':True]['text':' do not handle this value if we know it would be added to a discarded','line_number':7140,'multiline':False]['text':' container','line_number':7141,'multiline':False]['text':' create value','line_number':7147,'multiline':False]['text':' check callback','line_number':7150,'multiline':False]['text':' do not handle this value if we just learnt it shall be discarded','line_number':7153,'multiline':False]['text':' skip this value if we already decided to skip the parent','line_number':7165,'multiline':False]['text':' (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)','line_number':7166,'multiline':False]['text':' we now only expect arrays and objects','line_number':7172,'multiline':False]['text':' array','line_number':7175,'multiline':False]['text':' object','line_number':7182,'multiline':False]['text':' check if we should store an element for the current key','line_number':7184,'multiline':False]['text':'/ the parsed JSON value','line_number':7199,'multiline':False]['text':'/ stack to model hierarchy of values','line_number':7201,'multiline':False]['text':'/ stack to manage which values to keep','line_number':7203,'multiline':False]['text':'/ stack to manage which object keys to keep','line_number':7205,'multiline':False]['text':'/ helper to hold the reference for the next object element','line_number':7207,'multiline':False]['text':'/ whether a syntax error occurred','line_number':7209,'multiline':False]['text':'/ callback function','line_number':7211,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':7213,'multiline':False]['text':'/ a discarded value for the callback','line_number':7215,'multiline':False]['text':'unused','line_number':7234,'multiline':True]['text':'unused','line_number':7239,'multiline':True]['text':'unused','line_number':7244,'multiline':True]['text':'unused','line_number':7249,'multiline':True]['text':'unused','line_number':7249,'multiline':True]['text':'unused','line_number':7254,'multiline':True]['text':'unused','line_number':7259,'multiline':True]['text':'unused','line_number':7264,'multiline':True]['text':'unused','line_number':7269,'multiline':True]['text':'unused','line_number':7279,'multiline':True]['text':'unused','line_number':7289,'multiline':True]['text':'unused','line_number':7289,'multiline':True]['text':'unused','line_number':7289,'multiline':True]['text':' namespace detail','line_number':7295,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':7298,'multiline':False]['text':'     __ _____ _____ _____','line_number':7299,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':7300,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':7301,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':7302,'multiline':False]['text':'','line_number':7303,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':7304,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':7305,'multiline':False]['text':' array','line_number':7309,'multiline':False]['text':' localeconv','line_number':7310,'multiline':False]['text':' size_t','line_number':7311,'multiline':False]['text':' snprintf','line_number':7312,'multiline':False]['text':' strtof, strtod, strtold, strtoll, strtoull','line_number':7313,'multiline':False]['text':' initializer_list','line_number':7314,'multiline':False]['text':' char_traits, string','line_number':7315,'multiline':False]['text':' move','line_number':7316,'multiline':False]['text':' vector','line_number':7317,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':7319,'multiline':False]['text':' #include <nlohmann/detail/input/position_t.hpp>','line_number':7321,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':7323,'multiline':False]['text':'/////////','line_number':7330,'multiline':False]['text':' lexer //','line_number':7331,'multiline':False]['text':'/////////','line_number':7332,'multiline':False]['text':'/ token types for the parser','line_number':7338,'multiline':False]['text':'/< indicating the scanner is uninitialized','line_number':7341,'multiline':False]['text':'/< the `true` literal','line_number':7342,'multiline':False]['text':'/< the `false` literal','line_number':7343,'multiline':False]['text':'/< the `null` literal','line_number':7344,'multiline':False]['text':'/< a string -- use get_string() for actual value','line_number':7345,'multiline':False]['text':'/< an unsigned integer -- use get_number_unsigned() for actual value','line_number':7346,'multiline':False]['text':'/< a signed integer -- use get_number_integer() for actual value','line_number':7347,'multiline':False]['text':'/< an floating point number -- use get_number_float() for actual value','line_number':7348,'multiline':False]['text':'/< the character for array begin `[`','line_number':7349,'multiline':False]['text':'/< the character for object begin `{`','line_number':7350,'multiline':False]['text':'/< the character for array end `]`','line_number':7351,'multiline':False]['text':'/< the character for object end `}`','line_number':7352,'multiline':False]['text':'/< the name separator `:`','line_number':7353,'multiline':False]['text':'/< the value separator `,`','line_number':7354,'multiline':False]['text':'/< indicating a parse error','line_number':7355,'multiline':False]['text':'/< indicating the end of the input buffer','line_number':7356,'multiline':False]['text':'/< a literal or the begin of a value (only for diagnostics)','line_number':7357,'multiline':False]['text':'/ return name of values of type token_type (only used for errors)','line_number':7360,'multiline':False]['text':' LCOV_EXCL_START','line_number':7399,'multiline':False]['text':' catch non-enum values','line_number':7400,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':7402,'multiline':False]['text':'!
@brief lexical analysis

This class organizes the lexical analysis during JSON deserialization.
','line_number':7406,'multiline':True]['text':' delete because of pointer members','line_number':7430,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':7432,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':7434,'multiline':False]['text':'///////////////////','line_number':7438,'multiline':False]['text':' locales','line_number':7439,'multiline':False]['text':'///////////////////','line_number':7440,'multiline':False]['text':'/ return the locale-dependent decimal point','line_number':7442,'multiline':False]['text':'///////////////////','line_number':7451,'multiline':False]['text':' scan functions','line_number':7452,'multiline':False]['text':'///////////////////','line_number':7453,'multiline':False]['text':'!
    @brief get codepoint from 4 hex characters following `\u`

    For input "\u c1 c2 c3 c4" the codepoint is:
      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)

    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
    between the ASCII value of the character and the desired integer value.

    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
            non-hex character)
    ','line_number':7455,'multiline':True]['text':' this function only makes sense after reading `\u`','line_number':7472,'multiline':False]['text':'!
    @brief check if the next byte(s) are inside a given range

    Adds the current byte and, for each passed range, reads a new byte and
    checks if it is inside the range. If a violation was detected, set up an
    error message and return false. Otherwise, return true.

    @param[in] ranges  list of integers; interpreted as list of pairs of
                       inclusive lower and upper bound, respectively

    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
         1, 2, or 3 pairs. This precondition is enforced by an assertion.

    @return true if and only if no range violation was detected
    ','line_number':7503,'multiline':True]['text':'!
    @brief scan a string literal

    This function scans a string according to Sect. 7 of RFC 8259. While
    scanning, bytes are escaped and copied into buffer token_buffer. Then the
    function returns successfully, token_buffer is *not* null-terminated (as it
    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
    string.

    @return token_type::value_string if string could be successfully scanned,
            token_type::parse_error otherwise

    @note In case of errors, variable error_message contains a textual
          description.
    ','line_number':7540,'multiline':True]['text':' reset token_buffer (ignore opening quote)','line_number':7557,'multiline':False]['text':' we entered the function by reading an open quote','line_number':7560,'multiline':False]['text':' get next character','line_number':7565,'multiline':False]['text':' end of file while parsing string','line_number':7568,'multiline':False]['text':' closing quote','line_number':7575,'multiline':False]['text':' escapes','line_number':7581,'multiline':False]['text':' quotation mark','line_number':7586,'multiline':False]['text':' reverse solidus','line_number':7590,'multiline':False]['text':' solidus','line_number':7594,'multiline':False]['text':' backspace','line_number':7598,'multiline':False]['text':' form feed','line_number':7602,'multiline':False]['text':' line feed','line_number':7606,'multiline':False]['text':' carriage return','line_number':7610,'multiline':False]['text':' tab','line_number':7614,'multiline':False]['text':' unicode escapes','line_number':7619,'multiline':False]['text':' start with codepoint1','line_number':7623,'multiline':False]['text':' check if code point is a high surrogate','line_number':7631,'multiline':False]['text':' expect next \uxxxx entry','line_number':7634,'multiline':False]['text':' check if codepoint2 is a low surrogate','line_number':7645,'multiline':False]['text':' overwrite codepoint','line_number':7648,'multiline':False]['text':' high surrogate occupies the most significant 22 bits','line_number':7650,'multiline':False]['text':' low surrogate occupies the least significant 15 bits','line_number':7652,'multiline':False]['text':' there is still the 0xD800, 0xDC00 and 0x10000 noise','line_number':7654,'multiline':False]['text':' in the result, so we have to subtract with:','line_number':7655,'multiline':False]['text':' (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00','line_number':7656,'multiline':False]['text':' result of the above calculation yields a proper codepoint','line_number':7680,'multiline':False]['text':' translate codepoint into bytes','line_number':7683,'multiline':False]['text':' 1-byte characters: 0xxxxxxx (ASCII)','line_number':7686,'multiline':False]['text':' 2-byte characters: 110xxxxx 10xxxxxx','line_number':7691,'multiline':False]['text':' 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx','line_number':7697,'multiline':False]['text':' 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx','line_number':7704,'multiline':False]['text':' other characters after escape','line_number':7714,'multiline':False]['text':' invalid control characters','line_number':7723,'multiline':False]['text':' U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))','line_number':7916,'multiline':False]['text':' U+0080..U+07FF: bytes C2..DF 80..BF','line_number':8016,'multiline':False]['text':' U+0800..U+0FFF: bytes E0 A0..BF 80..BF','line_number':8055,'multiline':False]['text':' U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF','line_number':8065,'multiline':False]['text':' U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF','line_number':8066,'multiline':False]['text':' U+D000..U+D7FF: bytes ED 80..9F 80..BF','line_number':8089,'multiline':False]['text':' U+10000..U+3FFFF F0 90..BF 80..BF 80..BF','line_number':8099,'multiline':False]['text':' U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF','line_number':8109,'multiline':False]['text':' U+100000..U+10FFFF F4 80..8F 80..BF 80..BF','line_number':8121,'multiline':False]['text':' remaining bytes (80..C1 and F5..FF) are ill-formed','line_number':8131,'multiline':False]['text':'!
     * @brief scan a comment
     * @return whether comment could be scanned successfully
     ','line_number':8141,'multiline':True]['text':' single-line comments skip input until a newline or EOF is read','line_number':8149,'multiline':False]['text':' multi-line comments skip input until */ is read','line_number':8168,'multiline':False]['text':' unexpected character after reading '/'','line_number':8203,'multiline':False]['text':'!
    @brief scan a number literal

    This function scans a string according to Sect. 6 of RFC 8259.

    The function is realized with a deterministic finite state machine derived
    from the grammar described in RFC 8259. Starting in state "init", the
    input is read and used to determined the next state. Only state "done"
    accepts the number. State "error" is a trap state to model errors. In the
    table below, "anything" means any character but the ones listed before.

    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
    ---------|----------|----------|----------|---------|---------|----------|-----------
    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
    zero     | done     | done     | exponent | done    | done    | decimal1 | done
    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]
    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
    any2     | any2     | any2     | done     | done    | done    | done     | done

    The state machine is realized with one label per state (prefixed with
    "scan_number_") and `goto` statements between them. The state machine
    contains cycles, but any cycle can be left when EOF is read. Therefore,
    the function is guaranteed to terminate.

    During scanning, the read bytes are stored in token_buffer. This string is
    then converted to a signed integer, an unsigned integer, or a
    floating-point number.

    @return token_type::value_unsigned, token_type::value_integer, or
            token_type::value_float if number could be successfully scanned,
            token_type::parse_error otherwise

    @note The scanner is independent of the current locale. Internally, the
          locale's decimal point is used instead of `.` to work with the
          locale-dependent converters.
    ','line_number':8230,'multiline':True]['text':' lgtm [cpp/use-of-goto]','line_number':8270,'multiline':False]['text':' reset token_buffer to store the number's bytes','line_number':8272,'multiline':False]['text':' the type of the parsed number; initially set to unsigned; will be','line_number':8275,'multiline':False]['text':' changed if minus sign, decimal point or exponent is read','line_number':8276,'multiline':False]['text':' state (init): we just found out we need to scan a number','line_number':8279,'multiline':False]['text':' all other characters are rejected outside scan_number()','line_number':8308,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':8309,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':8310,'multiline':False]['text':' state: we just parsed a leading minus sign','line_number':8314,'multiline':False]['text':' state: we just parse a zero (maybe with a leading minus sign)','line_number':8346,'multiline':False]['text':' state: we just parsed a number 0-9 (maybe with a leading minus sign)','line_number':8367,'multiline':False]['text':' state: we just parsed a decimal point','line_number':8403,'multiline':False]['text':' we just parsed at least one number after a decimal point','line_number':8430,'multiline':False]['text':' we just parsed an exponent','line_number':8460,'multiline':False]['text':' we just parsed an exponent sign','line_number':8495,'multiline':False]['text':' we just parsed a number after the exponent or exponent sign','line_number':8521,'multiline':False]['text':' unget the character after the number (we only read it to know that','line_number':8544,'multiline':False]['text':' we are done scanning a number)','line_number':8545,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':8548,'multiline':False]['text':' try to parse integers first and fall back to floats','line_number':8551,'multiline':False]['text':' we checked the number format before','line_number':8556,'multiline':False]['text':' we checked the number format before','line_number':8572,'multiline':False]['text':' this code is reached if we parse a floating-point number or if an','line_number':8585,'multiline':False]['text':' integer conversion above failed','line_number':8586,'multiline':False]['text':' we checked the number format before','line_number':8589,'multiline':False]['text':'!
    @param[in] literal_text  the literal text to expect
    @param[in] length        the length of the passed literal text
    @param[in] return_type   the token type to return on success
    ','line_number':8595,'multiline':True]['text':'///////////////////','line_number':8616,'multiline':False]['text':' input management','line_number':8617,'multiline':False]['text':'///////////////////','line_number':8618,'multiline':False]['text':'/ reset token_buffer; current character is beginning of token','line_number':8620,'multiline':False]['text':'
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a
    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
    for use in error messages.

    @return character read from the input
    ','line_number':8628,'multiline':True]['text':' just reset the next_unget variable and work with current','line_number':8645,'multiline':False]['text':'!
    @brief unget current character (read it again on next get)

    We implement unget by setting variable next_unget to true. The input is not
    changed - we just simulate ungetting by modifying chars_read_total,
    chars_read_current_line, and token_string. The next call to get() will
    behave as if the unget character is read again.
    ','line_number':8667,'multiline':True]['text':' in case we "unget" a newline, we have to also decrement the lines_read','line_number':8681,'multiline':False]['text':'/ add a character to token_buffer','line_number':8701,'multiline':False]['text':'///////////////////','line_number':8708,'multiline':False]['text':' value getters','line_number':8709,'multiline':False]['text':'///////////////////','line_number':8710,'multiline':False]['text':'/ return integer value','line_number':8712,'multiline':False]['text':'/ return unsigned integer value','line_number':8718,'multiline':False]['text':'/ return floating-point value','line_number':8724,'multiline':False]['text':'/ return current string value (implicitly resets the token; useful only once)','line_number':8730,'multiline':False]['text':'///////////////////','line_number':8736,'multiline':False]['text':' diagnostics','line_number':8737,'multiline':False]['text':'///////////////////','line_number':8738,'multiline':False]['text':'/ return position of last read token','line_number':8740,'multiline':False]['text':'/ return the last read token (for errors only).  Will never contain EOF','line_number':8746,'multiline':False]['text':'/ (an arbitrary value that is not a valid char value, often -1), because','line_number':8747,'multiline':False]['text':'/ 255 may legitimately occur.  May contain NUL, which should be escaped.','line_number':8748,'multiline':False]['text':' escape control characters','line_number':8751,'multiline':False]['text':' escape control characters','line_number':8757,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':8759,'multiline':False]['text':' add character as is','line_number':8764,'multiline':False]['text':'/ return syntax error message','line_number':8772,'multiline':False]['text':'///////////////////','line_number':8779,'multiline':False]['text':' actual scanner','line_number':8780,'multiline':False]['text':'///////////////////','line_number':8781,'multiline':False]['text':'!
    @brief skip the UTF-8 byte order mark
    @return true iff there is no BOM or the correct BOM has been skipped
    ','line_number':8783,'multiline':True]['text':' check if we completely parse the BOM','line_number':8791,'multiline':False]['text':' the first character is not the beginning of the BOM; unget it to','line_number':8795,'multiline':False]['text':' process is later','line_number':8796,'multiline':False]['text':' initially, skip the BOM','line_number':8812,'multiline':False]['text':' read next character and ignore whitespace','line_number':8819,'multiline':False]['text':' ignore comments','line_number':8822,'multiline':False]['text':' skip following whitespace','line_number':8830,'multiline':False]['text':' structural characters','line_number':8836,'multiline':False]['text':' literals','line_number':8850,'multiline':False]['text':' string','line_number':8867,'multiline':False]['text':' number','line_number':8871,'multiline':False]['text':' end of input (the null byte is needed when parsing from','line_number':8885,'multiline':False]['text':' string literals)','line_number':8886,'multiline':False]['text':' error','line_number':8891,'multiline':False]['text':'/ input adapter','line_number':8899,'multiline':False]['text':'/ whether comments should be ignored (true) or signaled as errors (false)','line_number':8902,'multiline':False]['text':'/ the current character','line_number':8905,'multiline':False]['text':'/ whether the next get() call should just return current','line_number':8908,'multiline':False]['text':'/ the start position of the current token','line_number':8911,'multiline':False]['text':'/ raw input token string (for error messages)','line_number':8914,'multiline':False]['text':'/ buffer for variable-length tokens (numbers, strings)','line_number':8917,'multiline':False]['text':'/ a description of occurred lexer errors','line_number':8920,'multiline':False]['text':' number values','line_number':8923,'multiline':False]['text':'/ the decimal point','line_number':8928,'multiline':False]['text':' namespace detail','line_number':8932,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':8935,'multiline':False]['text':' #include <nlohmann/detail/meta/is_sax.hpp>','line_number':8937,'multiline':False]['text':'     __ _____ _____ _____','line_number':8938,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':8939,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':8940,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':8941,'multiline':False]['text':'','line_number':8942,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':8943,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':8944,'multiline':False]['text':' size_t','line_number':8948,'multiline':False]['text':' declval','line_number':8949,'multiline':False]['text':' string','line_number':8950,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':8952,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':8954,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':8956,'multiline':False]['text':' namespace detail','line_number':9098,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':9101,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':9103,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':9105,'multiline':False]['text':'/ how to treat CBOR tags','line_number':9112,'multiline':False]['text':'/< throw a parse_error exception in case of a tag','line_number':9115,'multiline':False]['text':'/< ignore tags','line_number':9116,'multiline':False]['text':'/< store tags as binary type','line_number':9117,'multiline':False]['text':'!
@brief determine system byte order

@return true if and only if system's byte order is little endian

@note from https://stackoverflow.com/a/1001328/266378
','line_number':9120,'multiline':True]['text':'/////////////////','line_number':9133,'multiline':False]['text':' binary reader //','line_number':9134,'multiline':False]['text':'/////////////////','line_number':9135,'multiline':False]['text':'!
@brief deserialization of CBOR, MessagePack, and UBJSON values
','line_number':9137,'multiline':True]['text':'!
    @brief create a binary reader

    @param[in] adapter  input adapter to read from
    ','line_number':9153,'multiline':True]['text':' make class move-only','line_number':9163,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':9165,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':9167,'multiline':False]['text':'!
    @param[in] format  the binary format to parse
    @param[in] sax_    a SAX event processor
    @param[in] strict  whether to expect the input to be consumed completed
    @param[in] tag_handler  how to treat CBOR tags

    @return whether parsing was successful
    ','line_number':9170,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':9206,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':9207,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':9208,'multiline':False]['text':' strict mode: next byte must be EOF','line_number':9211,'multiline':False]['text':'////////','line_number':9234,'multiline':False]['text':' BSON //','line_number':9235,'multiline':False]['text':'////////','line_number':9236,'multiline':False]['text':'!
    @brief Reads in a BSON-object and passes it to the SAX-parser.
    @return whether a valid BSON-value was passed to the SAX parser
    ','line_number':9238,'multiline':True]['text':'is_array','line_number':9252,'multiline':True]['text':'!
    @brief Parses a C-style string from the BSON input.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @return `true` if the \x00-byte indicating the end of the string was
             encountered before the EOF; false` indicates an unexpected EOF.
    ','line_number':9260,'multiline':True]['text':'!
    @brief Parses a zero-terminated string of length @a len from the BSON
           input.
    @param[in] len  The length (including the zero-byte at the end) of the
                    string to be read.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 1
    @return `true` if the string was successfully parsed
    ','line_number':9285,'multiline':True]['text':'!
    @brief Parses a byte array input of length @a len from the BSON input.
    @param[in] len  The length of the byte array to be read.
    @param[in,out] result  A reference to the binary variable where the read
                            array is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 0
    @return `true` if the byte array was successfully parsed
    ','line_number':9309,'multiline':True]['text':' All BSON binary values have a subtype','line_number':9328,'multiline':False]['text':'!
    @brief Read a BSON document element of the given @a element_type.
    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
    @param[in] element_type_parse_position The position in the input stream,
               where the `element_type` was read.
    @warning Not all BSON element types are supported yet. An unsupported
             @a element_type will give rise to a parse_error.114:
             Unsupported BSON record type 0x...
    @return whether a valid BSON-object/array was passed to the SAX parser
    ','line_number':9336,'multiline':True]['text':' double','line_number':9351,'multiline':False]['text':' string','line_number':9357,'multiline':False]['text':' object','line_number':9364,'multiline':False]['text':' array','line_number':9369,'multiline':False]['text':' binary','line_number':9374,'multiline':False]['text':' boolean','line_number':9381,'multiline':False]['text':' null','line_number':9386,'multiline':False]['text':' int32','line_number':9391,'multiline':False]['text':' int64','line_number':9397,'multiline':False]['text':' anything else not supported (yet)','line_number':9403,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':9406,'multiline':False]['text':'!
    @brief Read a BSON element list (as specified in the BSON-spec)

    The same binary layout is used for objects and arrays, hence it must be
    indicated with the argument @a is_array which one is expected
    (true --> array, false --> object).

    @param[in] is_array Determines if the element list being read is to be
                        treated as an object (@a is_array == false), or as an
                        array (@a is_array == true).
    @return whether a valid BSON-object/array was passed to the SAX parser
    ','line_number':9414,'multiline':True]['text':' get_bson_cstr only appends','line_number':9453,'multiline':False]['text':'!
    @brief Reads an array from the BSON input and passes it to the SAX-parser.
    @return whether a valid BSON-array was passed to the SAX parser
    ','line_number':9460,'multiline':True]['text':'is_array','line_number':9474,'multiline':True]['text':'////////','line_number':9482,'multiline':False]['text':' CBOR //','line_number':9483,'multiline':False]['text':'////////','line_number':9484,'multiline':False]['text':'!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true) or whether the last read character should
                         be considered instead (false)
    @param[in] tag_handler how CBOR tags should be treated

    @return whether a valid CBOR value was passed to the SAX parser
    ','line_number':9486,'multiline':True]['text':' EOF','line_number':9499,'multiline':False]['text':' Integer 0x00..0x17 (0..23)','line_number':9503,'multiline':False]['text':' Unsigned integer (one-byte uint8_t follows)','line_number':9530,'multiline':False]['text':' Unsigned integer (two-byte uint16_t follows)','line_number':9536,'multiline':False]['text':' Unsigned integer (four-byte uint32_t follows)','line_number':9542,'multiline':False]['text':' Unsigned integer (eight-byte uint64_t follows)','line_number':9548,'multiline':False]['text':' Negative integer -1-0x00..-1-0x17 (-1..-24)','line_number':9554,'multiline':False]['text':' Negative integer (one-byte uint8_t follows)','line_number':9581,'multiline':False]['text':' Negative integer -1-n (two-byte uint16_t follows)','line_number':9587,'multiline':False]['text':' Negative integer -1-n (four-byte uint32_t follows)','line_number':9593,'multiline':False]['text':' Negative integer -1-n (eight-byte uint64_t follows)','line_number':9599,'multiline':False]['text':' Binary data (0x00..0x17 bytes follow)','line_number':9606,'multiline':False]['text':' Binary data (one-byte uint8_t for n follows)','line_number':9631,'multiline':False]['text':' Binary data (two-byte uint16_t for n follow)','line_number':9632,'multiline':False]['text':' Binary data (four-byte uint32_t for n follow)','line_number':9633,'multiline':False]['text':' Binary data (eight-byte uint64_t for n follow)','line_number':9634,'multiline':False]['text':' Binary data (indefinite length)','line_number':9635,'multiline':False]['text':' UTF-8 string (0x00..0x17 bytes follow)','line_number':9641,'multiline':False]['text':' UTF-8 string (one-byte uint8_t for n follows)','line_number':9666,'multiline':False]['text':' UTF-8 string (two-byte uint16_t for n follow)','line_number':9667,'multiline':False]['text':' UTF-8 string (four-byte uint32_t for n follow)','line_number':9668,'multiline':False]['text':' UTF-8 string (eight-byte uint64_t for n follow)','line_number':9669,'multiline':False]['text':' UTF-8 string (indefinite length)','line_number':9670,'multiline':False]['text':' array (0x00..0x17 data items follow)','line_number':9676,'multiline':False]['text':' array (one-byte uint8_t for n follows)','line_number':9704,'multiline':False]['text':' array (two-byte uint16_t for n follow)','line_number':9710,'multiline':False]['text':' array (four-byte uint32_t for n follow)','line_number':9716,'multiline':False]['text':' array (eight-byte uint64_t for n follow)','line_number':9722,'multiline':False]['text':' array (indefinite length)','line_number':9728,'multiline':False]['text':' map (0x00..0x17 pairs of data items follow)','line_number':9731,'multiline':False]['text':' map (one-byte uint8_t for n follows)','line_number':9758,'multiline':False]['text':' map (two-byte uint16_t for n follow)','line_number':9764,'multiline':False]['text':' map (four-byte uint32_t for n follow)','line_number':9770,'multiline':False]['text':' map (eight-byte uint64_t for n follow)','line_number':9776,'multiline':False]['text':' map (indefinite length)','line_number':9782,'multiline':False]['text':' tagged item','line_number':9785,'multiline':False]['text':' tagged item (1 bytes follow)','line_number':9800,'multiline':False]['text':' tagged item (2 bytes follow)','line_number':9801,'multiline':False]['text':' tagged item (4 bytes follow)','line_number':9802,'multiline':False]['text':' tagged item (8 bytes follow)','line_number':9803,'multiline':False]['text':' ignore binary subtype','line_number':9816,'multiline':False]['text':' use binary subtype and store in binary container','line_number':9852,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':9890,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':9891,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':9892,'multiline':False]['text':' false','line_number':9896,'multiline':False]['text':' true','line_number':9899,'multiline':False]['text':' null','line_number':9902,'multiline':False]['text':' Half-Precision Float (two-byte IEEE 754)','line_number':9905,'multiline':False]['text':' code from RFC 7049, Appendix D, Figure 3:','line_number':9921,'multiline':False]['text':' As half-precision floating-point numbers were only added','line_number':9922,'multiline':False]['text':' to IEEE 754 in 2008, today's programming platforms often','line_number':9923,'multiline':False]['text':' still only have limited support for them. It is very','line_number':9924,'multiline':False]['text':' easy to include at least decoding support for them even','line_number':9925,'multiline':False]['text':' without such support. An example of a small decoder for','line_number':9926,'multiline':False]['text':' half-precision floating-point numbers in the C language','line_number':9927,'multiline':False]['text':' is shown in Fig. 3.','line_number':9928,'multiline':False]['text':' Single-Precision Float (four-byte IEEE 754)','line_number':9953,'multiline':False]['text':' Double-Precision Float (eight-byte IEEE 754)','line_number':9959,'multiline':False]['text':' anything else (0xFF is handled inside the other types)','line_number':9965,'multiline':False]['text':'!
    @brief reads a CBOR string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.
    Additionally, CBOR's strings with indefinite lengths are supported.

    @param[out] result  created string

    @return whether string creation completed
    ','line_number':9974,'multiline':True]['text':' UTF-8 string (0x00..0x17 bytes follow)','line_number':9994,'multiline':False]['text':' UTF-8 string (one-byte uint8_t for n follows)','line_number':10023,'multiline':False]['text':' UTF-8 string (two-byte uint16_t for n follow)','line_number':10029,'multiline':False]['text':' UTF-8 string (four-byte uint32_t for n follow)','line_number':10035,'multiline':False]['text':' UTF-8 string (eight-byte uint64_t for n follow)','line_number':10041,'multiline':False]['text':' UTF-8 string (indefinite length)','line_number':10047,'multiline':False]['text':'!
    @brief reads a CBOR byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into the byte array.
    Additionally, CBOR's byte arrays with indefinite lengths are supported.

    @param[out] result  created byte array

    @return whether byte array creation completed
    ','line_number':10070,'multiline':True]['text':' Binary data (0x00..0x17 bytes follow)','line_number':10090,'multiline':False]['text':' Binary data (one-byte uint8_t for n follows)','line_number':10119,'multiline':False]['text':' Binary data (two-byte uint16_t for n follow)','line_number':10126,'multiline':False]['text':' Binary data (four-byte uint32_t for n follow)','line_number':10133,'multiline':False]['text':' Binary data (eight-byte uint64_t for n follow)','line_number':10140,'multiline':False]['text':' Binary data (indefinite length)','line_number':10147,'multiline':False]['text':'!
    @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an
                    array of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether array creation completed
    ','line_number':10170,'multiline':True]['text':'!
    @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an
                    object of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether object creation completed
    ','line_number':10208,'multiline':True]['text':'///////////','line_number':10263,'multiline':False]['text':' MsgPack //','line_number':10264,'multiline':False]['text':'///////////','line_number':10265,'multiline':False]['text':'!
    @return whether a valid MessagePack value was passed to the SAX parser
    ','line_number':10267,'multiline':True]['text':' EOF','line_number':10274,'multiline':False]['text':' positive fixint','line_number':10278,'multiline':False]['text':' fixmap','line_number':10409,'multiline':False]['text':' fixarray','line_number':10428,'multiline':False]['text':' fixstr','line_number':10447,'multiline':False]['text':' str 8','line_number':10480,'multiline':False]['text':' str 16','line_number':10481,'multiline':False]['text':' str 32','line_number':10482,'multiline':False]['text':' nil','line_number':10488,'multiline':False]['text':' false','line_number':10491,'multiline':False]['text':' true','line_number':10494,'multiline':False]['text':' bin 8','line_number':10497,'multiline':False]['text':' bin 16','line_number':10498,'multiline':False]['text':' bin 32','line_number':10499,'multiline':False]['text':' ext 8','line_number':10500,'multiline':False]['text':' ext 16','line_number':10501,'multiline':False]['text':' ext 32','line_number':10502,'multiline':False]['text':' fixext 1','line_number':10503,'multiline':False]['text':' fixext 2','line_number':10504,'multiline':False]['text':' fixext 4','line_number':10505,'multiline':False]['text':' fixext 8','line_number':10506,'multiline':False]['text':' fixext 16','line_number':10507,'multiline':False]['text':' float 32','line_number':10513,'multiline':False]['text':' float 64','line_number':10519,'multiline':False]['text':' uint 8','line_number':10525,'multiline':False]['text':' uint 16','line_number':10531,'multiline':False]['text':' uint 32','line_number':10537,'multiline':False]['text':' uint 64','line_number':10543,'multiline':False]['text':' int 8','line_number':10549,'multiline':False]['text':' int 16','line_number':10555,'multiline':False]['text':' int 32','line_number':10561,'multiline':False]['text':' int 64','line_number':10567,'multiline':False]['text':' array 16','line_number':10573,'multiline':False]['text':' array 32','line_number':10579,'multiline':False]['text':' map 16','line_number':10585,'multiline':False]['text':' map 32','line_number':10591,'multiline':False]['text':' negative fixint','line_number':10597,'multiline':False]['text':' anything else','line_number':10632,'multiline':False]['text':'!
    @brief reads a MessagePack string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.

    @param[out] result  created string

    @return whether string creation completed
    ','line_number':10641,'multiline':True]['text':' fixstr','line_number':10660,'multiline':False]['text':' str 8','line_number':10697,'multiline':False]['text':' str 16','line_number':10703,'multiline':False]['text':' str 32','line_number':10709,'multiline':False]['text':'!
    @brief reads a MessagePack byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into a byte array.

    @param[out] result  created byte array

    @return whether byte array creation completed
    ','line_number':10724,'multiline':True]['text':' helper function to set the subtype','line_number':10736,'multiline':False]['text':' bin 8','line_number':10745,'multiline':False]['text':' bin 16','line_number':10752,'multiline':False]['text':' bin 32','line_number':10759,'multiline':False]['text':' ext 8','line_number':10766,'multiline':False]['text':' ext 16','line_number':10776,'multiline':False]['text':' ext 32','line_number':10786,'multiline':False]['text':' fixext 1','line_number':10796,'multiline':False]['text':' fixext 2','line_number':10804,'multiline':False]['text':' fixext 4','line_number':10812,'multiline':False]['text':' fixext 8','line_number':10820,'multiline':False]['text':' fixext 16','line_number':10828,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':10836,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':10837,'multiline':False]['text':'!
    @param[in] len  the length of the array
    @return whether array creation completed
    ','line_number':10841,'multiline':True]['text':'!
    @param[in] len  the length of the object
    @return whether object creation completed
    ','line_number':10863,'multiline':True]['text':'//////////','line_number':10893,'multiline':False]['text':' UBJSON //','line_number':10894,'multiline':False]['text':'//////////','line_number':10895,'multiline':False]['text':'!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether a valid UBJSON value was passed to the SAX parser
    ','line_number':10897,'multiline':True]['text':'!
    @brief reads a UBJSON string

    This function is either called after reading the 'S' byte explicitly
    indicating a string, or in case of an object key where the 'S' byte can be
    left out.

    @param[out] result   created string
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether string creation completed
    ','line_number':10909,'multiline':True]['text':' TODO(niels): may we ignore N here?','line_number':10927,'multiline':False]['text':'!
    @param[out] dim  an integer vector storing the ND array dimensions
    @return whether reading ND array size vector is successful
    ','line_number':11014,'multiline':True]['text':'!
    @param[out] result  determined size
    @param[in,out] is_ndarray  for input, `true` means already inside an ndarray vector
                               or ndarray dimension is not allowed; `false` means ndarray
                               is allowed; for output, `true` means an ndarray is found;
                               is_ndarray can only return `true` when its initial value
                               is `false`
    @param[in] prefix  type marker if already read, otherwise set to 0

    @return whether size determination completed
    ','line_number':11072,'multiline':True]['text':' NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char','line_number':11115,'multiline':False]['text':' ndarray dimensional vector can only contain integers, and can not embed another array','line_number':11228,'multiline':False]['text':' return normal array size if 1D row vector','line_number':11237,'multiline':False]['text':' if ndarray, convert to an object in JData annotated array format','line_number':11242,'multiline':False]['text':' test if any dimension in an ndarray is 0, if so, return a 1D empty container','line_number':11244,'multiline':False]['text':' because dim elements shall not have zeros, result = 0 means overflow happened; it also can't be npos as it is used to initialize size in get_ubjson_size_type()','line_number':11262,'multiline':False]['text':'!
    @brief determine the type and size for a container

    In the optimized UBJSON format, a type and a size can be provided to allow
    for a more compact representation.

    @param[out] result  pair of the size and the type
    @param[in] inside_ndarray  whether the parser is parsing an ND array dimensional vector

    @return whether pair creation completed
    ','line_number':11295,'multiline':True]['text':' size','line_number':11308,'multiline':False]['text':' type','line_number':11309,'multiline':False]['text':' must not ignore 'N', because 'N' maybe the type','line_number':11316,'multiline':False]['text':' use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters','line_number':11350,'multiline':False]['text':'!
    @param prefix  the previously read or set type prefix
    @return whether value creation completed
    ','line_number':11369,'multiline':True]['text':' EOF','line_number':11377,'multiline':False]['text':' true','line_number':11380,'multiline':False]['text':' false','line_number':11382,'multiline':False]['text':' null','line_number':11385,'multiline':False]['text':' code from RFC 7049, Appendix D, Figure 3:','line_number':11468,'multiline':False]['text':' As half-precision floating-point numbers were only added','line_number':11469,'multiline':False]['text':' to IEEE 754 in 2008, today's programming platforms often','line_number':11470,'multiline':False]['text':' still only have limited support for them. It is very','line_number':11471,'multiline':False]['text':' easy to include at least decoding support for them even','line_number':11472,'multiline':False]['text':' without such support. An example of a small decoder for','line_number':11473,'multiline':False]['text':' half-precision floating-point numbers in the C language','line_number':11474,'multiline':False]['text':' is shown in Fig. 3.','line_number':11475,'multiline':False]['text':' char','line_number':11517,'multiline':False]['text':' string','line_number':11534,'multiline':False]['text':' array','line_number':11540,'multiline':False]['text':' object','line_number':11543,'multiline':False]['text':' anything else','line_number':11546,'multiline':False]['text':'!
    @return whether array creation completed
    ','line_number':11553,'multiline':True]['text':' if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):','line_number':11564,'multiline':False]['text':' {"_ArrayType_" : "typeid", "_ArraySize_" : [n1, n2, ...], "_ArrayData_" : [v1, v2, ...]}','line_number':11565,'multiline':False]['text':' use bit 8 to indicate ndarray, here we remove the bit to restore the type marker','line_number':11569,'multiline':False]['text':' sax->string() takes a reference','line_number':11582,'multiline':False]['text':'!
    @return whether object creation completed
    ','line_number':11661,'multiline':True]['text':' do not accept ND-array size in objects in BJData','line_number':11672,'multiline':False]['text':' Note, no reader for UBJSON binary types is implemented because they do','line_number':11744,'multiline':False]['text':' not exist','line_number':11745,'multiline':False]['text':' get size of following number string','line_number':11749,'multiline':False]['text':' get number string','line_number':11758,'multiline':False]['text':' parse number string','line_number':11770,'multiline':False]['text':'/////////////////////','line_number':11813,'multiline':False]['text':' Utility functions //','line_number':11814,'multiline':False]['text':'/////////////////////','line_number':11815,'multiline':False]['text':'!
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a -'ve valued
    `std::char_traits<char_type>::eof()` in that case.

    @return character read from the input
    ','line_number':11817,'multiline':True]['text':'!
    @return character read from the input after ignoring all 'N' entries
    ','line_number':11832,'multiline':True]['text':'
    @brief read a number from the input

    @tparam NumberType the type of the number
    @param[in] format   the current format (for diagnostics)
    @param[out] result  number of type @a NumberType

    @return whether conversion completed

    @note This function needs to respect the system's endianness, because
          bytes in CBOR, MessagePack, and UBJSON are stored in network order
          (big endian) and therefore need reordering on little endian systems.
          On the other hand, BSON and BJData use little endian and should reorder
          on big endian systems.
    ','line_number':11846,'multiline':True]['text':' step 1: read input into array with system's byte order','line_number':11864,'multiline':False]['text':' reverse byte order prior to conversion if necessary','line_number':11874,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':11881,'multiline':False]['text':' step 2: convert array into number of type T and return','line_number':11885,'multiline':False]['text':'!
    @brief create a string by reading characters from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of characters to read
    @param[out] result string created by reading @a len bytes

    @return whether string creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of string memory.
    ','line_number':11890,'multiline':True]['text':'!
    @brief create a byte array by reading bytes from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of bytes to read
    @param[out] result byte array created by reading @a len bytes

    @return whether byte array creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of memory.
    ','line_number':11923,'multiline':True]['text':'!
    @param[in] format   the current format (for diagnostics)
    @param[in] context  further context information (for diagnostics)
    @return whether the last read character is not EOF
    ','line_number':11956,'multiline':True]['text':'!
    @return a string representation of the last read byte
    ','line_number':11972,'multiline':True]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':11978,'multiline':False]['text':'!
    @param[in] format   the current format
    @param[in] detail   a detailed error message
    @param[in] context  further context information
    @return a message string to use in the parse_error exceptions
    ','line_number':11982,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':12016,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':12017,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':12018,'multiline':False]['text':'/ input adapter','line_number':12027,'multiline':False]['text':'/ the current character','line_number':12030,'multiline':False]['text':'/ the number of characters read','line_number':12033,'multiline':False]['text':'/ whether we can assume little endianness','line_number':12036,'multiline':False]['text':'/ input format','line_number':12039,'multiline':False]['text':'/ the SAX parser','line_number':12042,'multiline':False]['text':' excluded markers in bjdata optimized type','line_number':12045,'multiline':False]['text':' lookup tables','line_number':12064,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':12065,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':12070,'multiline':False]['text':' namespace detail','line_number':12083,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':12086,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':12088,'multiline':False]['text':' #include <nlohmann/detail/input/parser.hpp>','line_number':12090,'multiline':False]['text':'     __ _____ _____ _____','line_number':12091,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':12092,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':12093,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':12094,'multiline':False]['text':'','line_number':12095,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':12096,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':12097,'multiline':False]['text':' isfinite','line_number':12101,'multiline':False]['text':' uint8_t','line_number':12102,'multiline':False]['text':' function','line_number':12103,'multiline':False]['text':' string','line_number':12104,'multiline':False]['text':' move','line_number':12105,'multiline':False]['text':' vector','line_number':12106,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':12108,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':12110,'multiline':False]['text':' #include <nlohmann/detail/input/json_sax.hpp>','line_number':12112,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':12114,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':12116,'multiline':False]['text':' #include <nlohmann/detail/meta/is_sax.hpp>','line_number':12118,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':12120,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':12122,'multiline':False]['text':'//////////','line_number':12128,'multiline':False]['text':' parser //','line_number':12129,'multiline':False]['text':'//////////','line_number':12130,'multiline':False]['text':'/ the parser read `{` and started to process a JSON object','line_number':12134,'multiline':False]['text':'/ the parser read `}` and finished processing a JSON object','line_number':12136,'multiline':False]['text':'/ the parser read `[` and started to process a JSON array','line_number':12138,'multiline':False]['text':'/ the parser read `]` and finished processing a JSON array','line_number':12140,'multiline':False]['text':'/ the parser read a key of a value in an object','line_number':12142,'multiline':False]['text':'/ the parser finished reading a JSON value','line_number':12144,'multiline':False]['text':'depth','line_number':12150,'multiline':True]['text':'event','line_number':12150,'multiline':True]['text':'parsed','line_number':12150,'multiline':True]['text':'!
@brief syntax analysis

This class implements a recursive descent parser.
','line_number':12152,'multiline':True]['text':'/ a parser reading from an input adapter','line_number':12168,'multiline':False]['text':' read first token','line_number':12177,'multiline':False]['text':'!
    @brief public parser interface

    @param[in] strict      whether to expect the last token to be EOF
    @param[in,out] result  parsed JSON value

    @throw parse_error.101 in case of an unexpected token
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails
    ','line_number':12181,'multiline':True]['text':' in strict mode, input must be completely read','line_number':12198,'multiline':False]['text':' in case of an error, return discarded value','line_number':12207,'multiline':False]['text':' set top-level value to null if it was discarded by the callback','line_number':12214,'multiline':False]['text':' function','line_number':12215,'multiline':False]['text':' in strict mode, input must be completely read','line_number':12226,'multiline':False]['text':' in case of an error, return discarded value','line_number':12234,'multiline':False]['text':'!
    @brief public accept interface

    @param[in] strict  whether to expect the last token to be EOF
    @return whether the input is a proper JSON text
    ','line_number':12245,'multiline':True]['text':' strict mode: next byte must be EOF','line_number':12264,'multiline':False]['text':' stack to remember the hierarchy of structured values we are parsing','line_number':12280,'multiline':False]['text':' true = array; false = object','line_number':12281,'multiline':False]['text':' value to avoid a goto (see comment where set to true)','line_number':12283,'multiline':False]['text':' invariant: get_token() was called before each iteration','line_number':12290,'multiline':False]['text':' closing } -> we are done','line_number':12300,'multiline':False]['text':' parse key','line_number':12310,'multiline':False]['text':' parse separator (:)','line_number':12322,'multiline':False]['text':' remember we are now inside an object','line_number':12330,'multiline':False]['text':' parse values','line_number':12333,'multiline':False]['text':' closing ] -> we are done','line_number':12345,'multiline':False]['text':' remember we are now inside an array','line_number':12355,'multiline':False]['text':' parse values (no need to call get_token)','line_number':12358,'multiline':False]['text':' using "uninitialized" to avoid "expected" message','line_number':12437,'multiline':False]['text':' the last token was unexpected','line_number':12450,'multiline':False]['text':' we reached this line after we successfully parsed a value','line_number':12463,'multiline':False]['text':' empty stack: we reached the end of the hierarchy: done','line_number':12466,'multiline':False]['text':' array','line_number':12470,'multiline':False]['text':' comma -> next value','line_number':12472,'multiline':False]['text':' parse a new value','line_number':12475,'multiline':False]['text':' closing ]','line_number':12480,'multiline':False]['text':' We are done with this array. Before we can parse a','line_number':12488,'multiline':False]['text':' new value, we need to evaluate the new state first.','line_number':12489,'multiline':False]['text':' By setting skip_to_state_evaluation to false, we','line_number':12490,'multiline':False]['text':' are effectively jumping to the beginning of this if.','line_number':12491,'multiline':False]['text':' states.back() is false -> object','line_number':12503,'multiline':False]['text':' comma -> next value','line_number':12505,'multiline':False]['text':' parse key','line_number':12508,'multiline':False]['text':' parse separator (:)','line_number':12521,'multiline':False]['text':' parse values','line_number':12529,'multiline':False]['text':' closing }','line_number':12534,'multiline':False]['text':' We are done with this object. Before we can parse a','line_number':12542,'multiline':False]['text':' new value, we need to evaluate the new state first.','line_number':12543,'multiline':False]['text':' By setting skip_to_state_evaluation to false, we','line_number':12544,'multiline':False]['text':' are effectively jumping to the beginning of this if.','line_number':12545,'multiline':False]['text':'/ get next token from lexer','line_number':12558,'multiline':False]['text':'/ callback function','line_number':12594,'multiline':False]['text':'/ the type of the last read token','line_number':12596,'multiline':False]['text':'/ the lexer','line_number':12598,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':12600,'multiline':False]['text':' namespace detail','line_number':12604,'multiline':False]['text':' #include <nlohmann/detail/iterators/internal_iterator.hpp>','line_number':12607,'multiline':False]['text':'     __ _____ _____ _____','line_number':12608,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':12609,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':12610,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':12611,'multiline':False]['text':'','line_number':12612,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':12613,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':12614,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':12618,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':12620,'multiline':False]['text':'     __ _____ _____ _____','line_number':12621,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':12622,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':12623,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':12624,'multiline':False]['text':'','line_number':12625,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':12626,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':12627,'multiline':False]['text':' ptrdiff_t','line_number':12631,'multiline':False]['text':' numeric_limits','line_number':12632,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':12634,'multiline':False]['text':'
@brief an iterator for primitive JSON types

This class models an iterator for primitive JSON types (boolean, number,
string). It's only purpose is to allow the iterator/const_iterator classes
to "iterate" over primitive values. Internally, the iterator is modeled by
a `difference_type` variable. Value begin_value (`0`) models the begin,
end_value (`1`) models past the end.
','line_number':12641,'multiline':True]['text':'/ iterator as signed integer type','line_number':12658,'multiline':False]['text':'/ set iterator to a defined beginning','line_number':12667,'multiline':False]['text':'/ set iterator to a defined past the end','line_number':12673,'multiline':False]['text':'/ return whether the iterator can be dereferenced','line_number':12679,'multiline':False]['text':'/ return whether the iterator is at end','line_number':12685,'multiline':False]['text':' NOLINT(cert-dcl21-cpp)','line_number':12719,'multiline':False]['text':' NOLINT(cert-dcl21-cpp)','line_number':12732,'multiline':False]['text':' namespace detail','line_number':12752,'multiline':False]['text':'!
@brief an iterator value

@note This structure could easily be a union, but MSVC currently does not allow
unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
','line_number':12760,'multiline':True]['text':'/ iterator for JSON objects','line_number':12768,'multiline':False]['text':'/ iterator for JSON arrays','line_number':12770,'multiline':False]['text':'/ generic iterator for all other types','line_number':12772,'multiline':False]['text':' namespace detail','line_number':12776,'multiline':False]['text':' #include <nlohmann/detail/iterators/iter_impl.hpp>','line_number':12779,'multiline':False]['text':'     __ _____ _____ _____','line_number':12780,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':12781,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':12782,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':12783,'multiline':False]['text':'','line_number':12784,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':12785,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':12786,'multiline':False]['text':' iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next','line_number':12790,'multiline':False]['text':' conditional, is_const, remove_const','line_number':12791,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':12793,'multiline':False]['text':' #include <nlohmann/detail/iterators/internal_iterator.hpp>','line_number':12795,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':12797,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':12799,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':12801,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':12803,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':12805,'multiline':False]['text':' forward declare, to be able to friend it later on','line_number':12812,'multiline':False]['text':'!
@brief a template for a bidirectional iterator for the @ref basic_json class
This class implements a both iterators (iterator and const_iterator) for the
@ref basic_json class.
@note An iterator is called *initialized* when a pointer to a JSON value has
      been set (e.g., by a constructor or a copy assignment). If the iterator is
      default-constructed, it is *uninitialized* and most methods are undefined.
      **The library uses assertions to detect calls on uninitialized iterators.**
@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
','line_number':12816,'multiline':True]['text':' NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)','line_number':12833,'multiline':False]['text':'/ the iterator with BasicJsonType of different const-ness','line_number':12835,'multiline':False]['text':'/ allow basic_json to access private members','line_number':12837,'multiline':False]['text':' make sure BasicJsonType is basic_json or const basic_json','line_number':12845,'multiline':False]['text':' superficial check for the LegacyBidirectionalIterator named requirement','line_number':12848,'multiline':False]['text':'/ The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.','line_number':12854,'multiline':False]['text':'/ The C++ Standard has never required user-defined iterators to derive from std::iterator.','line_number':12855,'multiline':False]['text':'/ A user-defined iterator should provide publicly accessible typedefs named','line_number':12856,'multiline':False]['text':'/ iterator_category, value_type, difference_type, pointer, and reference.','line_number':12857,'multiline':False]['text':'/ Note that value_type is required to be non-const, even for constant iterators.','line_number':12858,'multiline':False]['text':'/ the type of the values when the iterator is dereferenced','line_number':12861,'multiline':False]['text':'/ a type to represent differences between iterators','line_number':12863,'multiline':False]['text':'/ defines a pointer to the type iterated over (value_type)','line_number':12865,'multiline':False]['text':'/ defines a reference to the type iterated over (value_type)','line_number':12869,'multiline':False]['text':'!
    @brief constructor for a given JSON instance
    @param[in] object  pointer to a JSON object for this iterator
    @pre object != nullptr
    @post The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':12880,'multiline':True]['text':'!
    @note The conventional copy constructor and copy assignment are implicitly
          defined. Combined with the following converting constructor and
          assignment, they support: (1) copy from iterator to iterator, (2)
          copy from const iterator to const iterator, and (3) conversion from
          iterator to const iterator. However conversion from const iterator
          to iterator is not defined.
    ','line_number':12920,'multiline':True]['text':'!
    @brief const copy constructor
    @param[in] other const iterator to copy from
    @note This copy constructor had to be defined explicitly to circumvent a bug
          occurring on msvc v19.0 compiler (VS 2015) debug build. For more
          information refer to: https://github.com/nlohmann/json/issues/1608
    ','line_number':12929,'multiline':True]['text':'!
    @brief converting assignment
    @param[in] other const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    ','line_number':12940,'multiline':True]['text':'!
    @brief converting constructor
    @param[in] other  non-const iterator to copy from
    @note It is not checked whether @a other is initialized.
    ','line_number':12956,'multiline':True]['text':'!
    @brief converting assignment
    @param[in] other  non-const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    ','line_number':12965,'multiline':True]['text':' NOLINT(cert-oop54-cpp)','line_number':12971,'multiline':False]['text':'!
    @brief set the iterator to the first value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':12979,'multiline':True]['text':' set to end so begin()==end() is true: null is empty','line_number':13003,'multiline':False]['text':'!
    @brief set the iterator past the last value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13023,'multiline':True]['text':'!
    @brief return a reference to the value pointed to by the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13062,'multiline':True]['text':'!
    @brief dereference the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13106,'multiline':True]['text':'!
    @brief post-increment (it++)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13148,'multiline':True]['text':' NOLINT(cert-dcl21-cpp)','line_number':13152,'multiline':False]['text':'!
    @brief pre-increment (++it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13159,'multiline':True]['text':'!
    @brief post-decrement (it--)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13199,'multiline':True]['text':' NOLINT(cert-dcl21-cpp)','line_number':13203,'multiline':False]['text':'!
    @brief pre-decrement (--it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13210,'multiline':True]['text':'!
    @brief comparison: equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13250,'multiline':True]['text':' if objects are not the same, the comparison is undefined','line_number':13257,'multiline':False]['text':'!
    @brief comparison: not equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13286,'multiline':True]['text':'!
    @brief comparison: smaller
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13296,'multiline':True]['text':' if objects are not the same, the comparison is undefined','line_number':13302,'multiline':False]['text':'!
    @brief comparison: less than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13331,'multiline':True]['text':'!
    @brief comparison: greater than
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13340,'multiline':True]['text':'!
    @brief comparison: greater than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13349,'multiline':True]['text':'!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13358,'multiline':True]['text':'!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13395,'multiline':True]['text':'!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13404,'multiline':True]['text':'!
    @brief addition of distance and iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13415,'multiline':True]['text':'!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13426,'multiline':True]['text':'!
    @brief return difference
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13437,'multiline':True]['text':'!
    @brief access to successor
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13466,'multiline':True]['text':'!
    @brief return the key of an object iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13504,'multiline':True]['text':'!
    @brief return the value of an iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':13520,'multiline':True]['text':'/ associated JSON instance','line_number':13530,'multiline':False]['text':'/ the actual iterator of the associated instance','line_number':13532,'multiline':False]['text':' namespace detail','line_number':13536,'multiline':False]['text':' #include <nlohmann/detail/iterators/iteration_proxy.hpp>','line_number':13539,'multiline':False]['text':' #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>','line_number':13541,'multiline':False]['text':'     __ _____ _____ _____','line_number':13542,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':13543,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':13544,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':13545,'multiline':False]['text':'','line_number':13546,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':13547,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':13548,'multiline':False]['text':' ptrdiff_t','line_number':13552,'multiline':False]['text':' reverse_iterator','line_number':13553,'multiline':False]['text':' declval','line_number':13554,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':13556,'multiline':False]['text':'////////////////////','line_number':13563,'multiline':False]['text':' reverse_iterator //','line_number':13564,'multiline':False]['text':'////////////////////','line_number':13565,'multiline':False]['text':'!
@brief a template for a reverse iterator class

@tparam Base the base iterator type to reverse. Valid types are @ref
iterator (to create @ref reverse_iterator) and @ref const_iterator (to
create @ref const_reverse_iterator).

@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
  It is possible to write to the pointed-to element (only if @a Base is
  @ref iterator).

@since version 1.0.0
','line_number':13567,'multiline':True]['text':'/ shortcut to the reverse iterator adapter','line_number':13590,'multiline':False]['text':'/ the reference type for the pointed-to element','line_number':13592,'multiline':False]['text':'/ create reverse iterator from iterator','line_number':13595,'multiline':False]['text':'/ create reverse iterator from base class','line_number':13599,'multiline':False]['text':'/ post-increment (it++)','line_number':13602,'multiline':False]['text':' NOLINT(cert-dcl21-cpp)','line_number':13603,'multiline':False]['text':'/ pre-increment (++it)','line_number':13608,'multiline':False]['text':'/ post-decrement (it--)','line_number':13614,'multiline':False]['text':' NOLINT(cert-dcl21-cpp)','line_number':13615,'multiline':False]['text':'/ pre-decrement (--it)','line_number':13620,'multiline':False]['text':'/ add to iterator','line_number':13626,'multiline':False]['text':'/ add to iterator','line_number':13632,'multiline':False]['text':'/ subtract from iterator','line_number':13638,'multiline':False]['text':'/ return difference','line_number':13644,'multiline':False]['text':'/ access to successor','line_number':13650,'multiline':False]['text':'/ return the key of an object iterator','line_number':13656,'multiline':False]['text':'/ return the value of an iterator','line_number':13663,'multiline':False]['text':' namespace detail','line_number':13671,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':13674,'multiline':False]['text':' #include <nlohmann/detail/json_pointer.hpp>','line_number':13676,'multiline':False]['text':'     __ _____ _____ _____','line_number':13677,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':13678,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':13679,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':13680,'multiline':False]['text':'','line_number':13681,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':13682,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':13683,'multiline':False]['text':' all_of','line_number':13687,'multiline':False]['text':' isdigit','line_number':13688,'multiline':False]['text':' errno, ERANGE','line_number':13689,'multiline':False]['text':' strtoull','line_number':13690,'multiline':False]['text':' ostream','line_number':13692,'multiline':False]['text':' JSON_NO_IO','line_number':13693,'multiline':False]['text':' max','line_number':13694,'multiline':False]['text':' accumulate','line_number':13695,'multiline':False]['text':' string','line_number':13696,'multiline':False]['text':' move','line_number':13697,'multiline':False]['text':' vector','line_number':13698,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':13700,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':13702,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':13704,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':13706,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':13708,'multiline':False]['text':'/ @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document','line_number':13713,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/','line_number':13714,'multiline':False]['text':' allow basic_json to access private members','line_number':13718,'multiline':False]['text':' for backwards compatibility accept BasicJsonType','line_number':13738,'multiline':False]['text':'/ @brief create JSON pointer','line_number':13741,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/json_pointer/','line_number':13742,'multiline':False]['text':'/ @brief return a string representation of the JSON pointer','line_number':13747,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/to_string/','line_number':13748,'multiline':False]['text':'/ @brief return a string representation of the JSON pointer','line_number':13759,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_string/','line_number':13760,'multiline':False]['text':'/ @brief write string representation of the JSON pointer to stream','line_number':13768,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/','line_number':13769,'multiline':False]['text':'/ @brief append another JSON pointer at the end of this JSON pointer','line_number':13777,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/','line_number':13778,'multiline':False]['text':'/ @brief append an unescaped reference token at the end of this JSON pointer','line_number':13787,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/','line_number':13788,'multiline':False]['text':'/ @brief append an array index at the end of this JSON pointer','line_number':13795,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/','line_number':13796,'multiline':False]['text':'/ @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer','line_number':13802,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slash/','line_number':13803,'multiline':False]['text':'/ @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer','line_number':13810,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slash/','line_number':13811,'multiline':False]['text':' NOLINT(performance-unnecessary-value-param)','line_number':13812,'multiline':False]['text':'/ @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer','line_number':13817,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_slash/','line_number':13818,'multiline':False]['text':'/ @brief returns the parent of this JSON pointer','line_number':13824,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/parent_pointer/','line_number':13825,'multiline':False]['text':'/ @brief remove last reference token','line_number':13838,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/pop_back/','line_number':13839,'multiline':False]['text':'/ @brief return last reference token','line_number':13850,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/back/','line_number':13851,'multiline':False]['text':'/ @brief append an unescaped token at the end of the reference pointer','line_number':13862,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/push_back/','line_number':13863,'multiline':False]['text':'/ @brief append an unescaped token at the end of the reference pointer','line_number':13869,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/push_back/','line_number':13870,'multiline':False]['text':'/ @brief return whether pointer points to the root document','line_number':13876,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/empty/','line_number':13877,'multiline':False]['text':'!
    @param[in] s  reference token to be converted into an array index

    @return integer representation of @a s

    @throw parse_error.106  if an array index begins with '0'
    @throw parse_error.109  if an array index begins not with a digit
    @throw out_of_range.404 if string @a s could not be converted to an integer
    @throw out_of_range.410 if an array index exceeds size_type
    ','line_number':13884,'multiline':True]['text':' error condition (cf. RFC 6901, Sect. 4)','line_number':13899,'multiline':False]['text':' error condition (cf. RFC 6901, Sect. 4)','line_number':13905,'multiline':False]['text':' strtoull doesn't reset errno','line_number':13913,'multiline':False]['text':' NOLINT(runtime/int)','line_number':13914,'multiline':False]['text':' invalid input or empty string','line_number':13915,'multiline':False]['text':' out of range','line_number':13916,'multiline':False]['text':' incomplete read','line_number':13917,'multiline':False]['text':' only triggered on special platforms (like 32bit), see also','line_number':13922,'multiline':False]['text':' https://github.com/nlohmann/json/pull/2203','line_number':13923,'multiline':False]['text':' NOLINT(runtime/int)','line_number':13924,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':13926,'multiline':False]['text':'!
    @brief create and return a reference to the pointed to value

    @complexity Linear in the number of reference tokens.

    @throw parse_error.109 if array index is not a number
    @throw type_error.313 if value cannot be unflattened
    ','line_number':13946,'multiline':True]['text':' in case no reference tokens exist, return a reference to the JSON value','line_number':13959,'multiline':False]['text':' j which will be overwritten by a primitive value','line_number':13960,'multiline':False]['text':' start a new array if reference token is 0','line_number':13969,'multiline':False]['text':' start a new object otherwise','line_number':13974,'multiline':False]['text':' create an entry in the object','line_number':13982,'multiline':False]['text':' create an entry in the array','line_number':13989,'multiline':False]['text':'
                The following code is only reached if there exists a reference
                token _and_ the current value is primitive. In this case, we have
                an error situation, because primitive values may only occur as
                single value; that is, with an empty list of reference tokens.
                ','line_number':13994,'multiline':True]['text':'!
    @brief return a reference to the pointed to value

    @note This version does not throw if a value is not present, but tries to
          create nested values instead. For instance, calling this function
          with pointer `"/this/that"` on a null value is equivalent to calling
          `operator[]("this").operator[]("that")` on that value, effectively
          changing the null value to an object.

    @param[in] ptr  a JSON value

    @return reference to the JSON value pointed to by the JSON pointer

    @complexity Linear in the length of the JSON pointer.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':14015,'multiline':True]['text':' convert null values to arrays or objects before continuing','line_number':14039,'multiline':False]['text':' check if reference token is a number','line_number':14042,'multiline':False]['text':' change value to array for numbers or "-" or to object otherwise','line_number':14050,'multiline':False]['text':' use unchecked object access','line_number':14060,'multiline':False]['text':' explicitly treat "-" as index beyond the end','line_number':14069,'multiline':False]['text':' convert array index to number; unchecked access','line_number':14074,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':14096,'multiline':True]['text':' note: at performs range check','line_number':14111,'multiline':False]['text':' "-" always fails the range check','line_number':14120,'multiline':False]['text':' note: at performs range check','line_number':14126,'multiline':False]['text':'!
    @brief return a const reference to the pointed to value

    @param[in] ptr  a JSON value

    @return const reference to the JSON value pointed to by the JSON
    pointer

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':14147,'multiline':True]['text':' use unchecked object access','line_number':14169,'multiline':False]['text':' "-" cannot be used for const access','line_number':14178,'multiline':False]['text':' use unchecked array access','line_number':14182,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':14203,'multiline':True]['text':' note: at performs range check','line_number':14218,'multiline':False]['text':' "-" always fails the range check','line_number':14227,'multiline':False]['text':' note: at performs range check','line_number':14233,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    ','line_number':14254,'multiline':True]['text':' we did not find the key in the object','line_number':14269,'multiline':False]['text':' "-" always fails the range check','line_number':14281,'multiline':False]['text':' invalid char','line_number':14286,'multiline':False]['text':' first char should be between '1' and '9'','line_number':14293,'multiline':False]['text':' other char should be between '0' and '9'','line_number':14300,'multiline':False]['text':' index out of range','line_number':14309,'multiline':False]['text':' we do not expect primitive values if there is still a','line_number':14327,'multiline':False]['text':' reference token to process','line_number':14328,'multiline':False]['text':' no reference token left means we found a primitive value','line_number':14334,'multiline':False]['text':'!
    @brief split the string input to reference tokens

    @note This function is only called by the json_pointer constructor.
          All exceptions below are documented there.

    @throw parse_error.107  if the pointer is not empty or begins with '/'
    @throw parse_error.108  if character '~' is not followed by '0' or '1'
    ','line_number':14338,'multiline':True]['text':' special case: empty reference string -> no reference tokens','line_number':14351,'multiline':False]['text':' check if nonempty reference string begins with slash','line_number':14357,'multiline':False]['text':' extract the reference tokens:','line_number':14363,'multiline':False]['text':' - slash: position of the last read slash (or end of string)','line_number':14364,'multiline':False]['text':' - start: position after the previous slash','line_number':14365,'multiline':False]['text':' search for the first slash after the first character','line_number':14367,'multiline':False]['text':' set the beginning of the first reference token','line_number':14369,'multiline':False]['text':' we can stop if start == 0 (if slash == string_t::npos)','line_number':14371,'multiline':False]['text':' set the beginning of the next reference token','line_number':14373,'multiline':False]['text':' (will eventually be 0 if slash == string_t::npos)','line_number':14374,'multiline':False]['text':' find next slash','line_number':14376,'multiline':False]['text':' use the text between the beginning of the reference token','line_number':14379,'multiline':False]['text':' (start) and the last slash (slash).','line_number':14380,'multiline':False]['text':' check reference tokens are properly escaped','line_number':14383,'multiline':False]['text':' ~ must be followed by 0 or 1','line_number':14390,'multiline':False]['text':' finally, store the reference token','line_number':14399,'multiline':False]['text':'!
    @param[in] reference_string  the reference string to the current value
    @param[in] value             the value to consider
    @param[in,out] result        the result object to insert values to

    @note Empty objects or arrays are flattened to `null`.
    ','line_number':14408,'multiline':True]['text':' flatten empty array as null','line_number':14426,'multiline':False]['text':' iterate array and use index as reference string','line_number':14431,'multiline':False]['text':' flatten empty object as null','line_number':14445,'multiline':False]['text':' iterate object and use keys as reference string','line_number':14450,'multiline':False]['text':' add primitive value with its reference string','line_number':14469,'multiline':False]['text':'!
    @param[in] value  flattened JSON

    @return unflattened JSON

    @throw parse_error.109 if array index is not a number
    @throw type_error.314  if value is not an object
    @throw type_error.315  if object values are not primitive
    @throw type_error.313  if value cannot be unflattened
    ','line_number':14476,'multiline':True]['text':' iterate the JSON object values','line_number':14497,'multiline':False]['text':' assign value to reference pointed to by JSON pointer; Note that if','line_number':14505,'multiline':False]['text':' the JSON pointer is "" (i.e., points to the whole value), function','line_number':14506,'multiline':False]['text':' get_and_create returns a reference to result itself. An assignment','line_number':14507,'multiline':False]['text':' will then create a primitive value.','line_number':14508,'multiline':False]['text':' can't use conversion operator because of ambiguity','line_number':14515,'multiline':False]['text':'/ @brief compares two JSON pointers for equality','line_number':14532,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_eq/','line_number':14533,'multiline':False]['text':'/ @brief compares JSON pointer and string for equality','line_number':14540,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_eq/','line_number':14541,'multiline':False]['text':'/ @brief 3-way compares two JSON pointers','line_number':14548,'multiline':False]['text':' *NOPAD*','line_number':14550,'multiline':False]['text':' *NOPAD*','line_number':14552,'multiline':False]['text':'/ @brief compares two JSON pointers for equality','line_number':14555,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_eq/','line_number':14556,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14558,'multiline':False]['text':'/ @brief compares JSON pointer and string for equality','line_number':14562,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_eq/','line_number':14563,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14565,'multiline':False]['text':'/ @brief compares string and JSON pointer for equality','line_number':14569,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_eq/','line_number':14570,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14572,'multiline':False]['text':'/ @brief compares two JSON pointers for inequality','line_number':14576,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_ne/','line_number':14577,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14579,'multiline':False]['text':'/ @brief compares JSON pointer and string for inequality','line_number':14583,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_ne/','line_number':14584,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14586,'multiline':False]['text':'/ @brief compares string and JSON pointer for inequality','line_number':14590,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/json_pointer/operator_ne/','line_number':14591,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14593,'multiline':False]['text':'/ @brief compares two JSON pointer for less-than','line_number':14597,'multiline':False]['text':' NOLINTNEXTLINE(readability-redundant-declaration)','line_number':14599,'multiline':False]['text':'/ the reference tokens','line_number':14605,'multiline':False]['text':' functions cannot be defined inside class due to ODR violations','line_number':14610,'multiline':False]['text':' #include <nlohmann/detail/json_ref.hpp>','line_number':14671,'multiline':False]['text':'     __ _____ _____ _____','line_number':14672,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':14673,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':14674,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':14675,'multiline':False]['text':'','line_number':14676,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':14677,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':14678,'multiline':False]['text':' #include <nlohmann/detail/abi_macros.hpp>','line_number':14685,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':14687,'multiline':False]['text':' class should be movable only','line_number':14719,'multiline':False]['text':' namespace detail','line_number':14750,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':14753,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':14755,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':14757,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':14759,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':14761,'multiline':False]['text':' #include <nlohmann/detail/output/binary_writer.hpp>','line_number':14763,'multiline':False]['text':'     __ _____ _____ _____','line_number':14764,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':14765,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':14766,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':14767,'multiline':False]['text':'','line_number':14768,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':14769,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':14770,'multiline':False]['text':' reverse','line_number':14774,'multiline':False]['text':' array','line_number':14775,'multiline':False]['text':' map','line_number':14776,'multiline':False]['text':' isnan, isinf','line_number':14777,'multiline':False]['text':' uint8_t, uint16_t, uint32_t, uint64_t','line_number':14778,'multiline':False]['text':' memcpy','line_number':14779,'multiline':False]['text':' numeric_limits','line_number':14780,'multiline':False]['text':' string','line_number':14781,'multiline':False]['text':' move','line_number':14782,'multiline':False]['text':' vector','line_number':14783,'multiline':False]['text':' #include <nlohmann/detail/input/binary_reader.hpp>','line_number':14785,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':14787,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':14789,'multiline':False]['text':'     __ _____ _____ _____','line_number':14790,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':14791,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':14792,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':14793,'multiline':False]['text':'','line_number':14794,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':14795,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':14796,'multiline':False]['text':' copy','line_number':14800,'multiline':False]['text':' size_t','line_number':14801,'multiline':False]['text':' back_inserter','line_number':14802,'multiline':False]['text':' shared_ptr, make_shared','line_number':14803,'multiline':False]['text':' basic_string','line_number':14804,'multiline':False]['text':' vector','line_number':14805,'multiline':False]['text':' streamsize','line_number':14808,'multiline':False]['text':' basic_ostream','line_number':14809,'multiline':False]['text':' JSON_NO_IO','line_number':14810,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':14812,'multiline':False]['text':'/ abstract output adapter interface','line_number':14819,'multiline':False]['text':'/ a type to simplify interfaces','line_number':14833,'multiline':False]['text':'/ output adapter for byte vectors','line_number':14837,'multiline':False]['text':'/ output adapter for output streams','line_number':14862,'multiline':False]['text':' JSON_NO_IO','line_number':14885,'multiline':False]['text':'/ output adapter for basic_string','line_number':14887,'multiline':False]['text':' JSON_NO_IO','line_number':14922,'multiline':False]['text':' namespace detail','line_number':14936,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':14939,'multiline':False]['text':'/////////////////','line_number':14946,'multiline':False]['text':' binary writer //','line_number':14947,'multiline':False]['text':'/////////////////','line_number':14948,'multiline':False]['text':'!
@brief serialization to CBOR and MessagePack values
','line_number':14950,'multiline':True]['text':'!
    @brief create a binary writer

    @param[in] adapter  output adapter to write to
    ','line_number':14961,'multiline':True]['text':'!
    @param[in] j  JSON value to serialize
    @pre       j.type() == value_t::object
    ','line_number':14971,'multiline':True]['text':'!
    @param[in] j  JSON value to serialize
    ','line_number':15001,'multiline':True]['text':' CBOR does not differentiate between positive signed','line_number':15026,'multiline':False]['text':' integers and unsigned integers. Therefore, we used the','line_number':15027,'multiline':False]['text':' code from the value_t::number_unsigned case here.','line_number':15028,'multiline':False]['text':' The conversions below encode the sign in the first','line_number':15056,'multiline':False]['text':' byte, and the value is converted to a positive number.','line_number':15057,'multiline':False]['text':' NaN is 0xf97e00 in CBOR','line_number':15120,'multiline':False]['text':' Infinity is 0xf97c00, -Infinity is 0xf9fc00','line_number':15127,'multiline':False]['text':' step 1: write control byte and the string length','line_number':15141,'multiline':False]['text':' LCOV_EXCL_START','line_number':15162,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':15168,'multiline':False]['text':' step 2: write the string','line_number':15170,'multiline':False]['text':' step 1: write control byte and the array size','line_number':15179,'multiline':False]['text':' LCOV_EXCL_START','line_number':15200,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':15206,'multiline':False]['text':' step 2: write each element','line_number':15208,'multiline':False]['text':' step 1: write control byte and the binary array size','line_number':15242,'multiline':False]['text':' LCOV_EXCL_START','line_number':15263,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':15269,'multiline':False]['text':' step 2: write each element','line_number':15271,'multiline':False]['text':' step 1: write control byte and the object size','line_number':15281,'multiline':False]['text':' LCOV_EXCL_START','line_number':15302,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':15308,'multiline':False]['text':' step 2: write each element','line_number':15310,'multiline':False]['text':'!
    @param[in] j  JSON value to serialize
    ','line_number':15325,'multiline':True]['text':' nil','line_number':15332,'multiline':False]['text':' true and false','line_number':15338,'multiline':False]['text':' MessagePack does not differentiate between positive','line_number':15350,'multiline':False]['text':' signed integers and unsigned integers. Therefore, we used','line_number':15351,'multiline':False]['text':' the code from the value_t::number_unsigned case here.','line_number':15352,'multiline':False]['text':' positive fixnum','line_number':15355,'multiline':False]['text':' uint 8','line_number':15360,'multiline':False]['text':' uint 16','line_number':15366,'multiline':False]['text':' uint 32','line_number':15372,'multiline':False]['text':' uint 64','line_number':15378,'multiline':False]['text':' negative fixnum','line_number':15387,'multiline':False]['text':' int 8','line_number':15393,'multiline':False]['text':' int 16','line_number':15400,'multiline':False]['text':' int 32','line_number':15407,'multiline':False]['text':' int 64','line_number':15414,'multiline':False]['text':' positive fixnum','line_number':15426,'multiline':False]['text':' uint 8','line_number':15431,'multiline':False]['text':' uint 16','line_number':15437,'multiline':False]['text':' uint 32','line_number':15443,'multiline':False]['text':' uint 64','line_number':15449,'multiline':False]['text':' step 1: write control byte and the string length','line_number':15464,'multiline':False]['text':' fixstr','line_number':15468,'multiline':False]['text':' str 8','line_number':15473,'multiline':False]['text':' str 16','line_number':15479,'multiline':False]['text':' str 32','line_number':15485,'multiline':False]['text':' step 2: write the string','line_number':15490,'multiline':False]['text':' step 1: write control byte and the array size','line_number':15499,'multiline':False]['text':' fixarray','line_number':15503,'multiline':False]['text':' array 16','line_number':15508,'multiline':False]['text':' array 32','line_number':15514,'multiline':False]['text':' step 2: write each element','line_number':15519,'multiline':False]['text':' step 0: determine if the binary type has a set subtype to','line_number':15529,'multiline':False]['text':' determine whether or not to use the ext or fixext types','line_number':15530,'multiline':False]['text':' step 1: write control byte and the byte string length','line_number':15533,'multiline':False]['text':' fixext 1','line_number':15544,'multiline':False]['text':' fixext 2','line_number':15547,'multiline':False]['text':' fixext 4','line_number':15550,'multiline':False]['text':' fixext 8','line_number':15553,'multiline':False]['text':' fixext 16','line_number':15556,'multiline':False]['text':' ext 8','line_number':15559,'multiline':False]['text':' bin 8','line_number':15567,'multiline':False]['text':' ext 16','line_number':15580,'multiline':False]['text':' bin 16','line_number':15581,'multiline':False]['text':' ext 32','line_number':15589,'multiline':False]['text':' bin 32','line_number':15590,'multiline':False]['text':' step 1.5: if this is an ext type, write the subtype','line_number':15596,'multiline':False]['text':' step 2: write the byte string','line_number':15602,'multiline':False]['text':' step 1: write control byte and the object size','line_number':15612,'multiline':False]['text':' fixmap','line_number':15616,'multiline':False]['text':' map 16','line_number':15621,'multiline':False]['text':' map 32','line_number':15627,'multiline':False]['text':' step 2: write each element','line_number':15632,'multiline':False]['text':'!
    @param[in] j  JSON value to serialize
    @param[in] use_count   whether to use '#' prefixes (optimized format)
    @param[in] use_type    whether to use '$' prefixes (optimized format)
    @param[in] add_prefix  whether prefixes need to be used for this value
    @param[in] use_bjdata  whether write in BJData format, default is false
    ','line_number':15647,'multiline':True]['text':' excluded markers in bjdata optimized type','line_number':15729,'multiline':False]['text':' decode bjdata ndarray in the JData format (https://github.com/NeuroJSON/jdata)','line_number':15805,'multiline':False]['text':' excluded markers in bjdata optimized type','line_number':15827,'multiline':False]['text':'////////','line_number':15867,'multiline':False]['text':' BSON //','line_number':15868,'multiline':False]['text':'////////','line_number':15869,'multiline':False]['text':'!
    @return The size of a BSON document entry header, including the id marker
            and the entry name size (and its null-terminator).
    ','line_number':15871,'multiline':True]['text':'id','line_number':15884,'multiline':True]['text':'zero-terminator','line_number':15884,'multiline':True]['text':'!
    @brief Writes the given @a element_type and @a name to the output adapter
    ','line_number':15887,'multiline':True]['text':' boolean','line_number':15893,'multiline':False]['text':'!
    @brief Writes a BSON element with key @a name and boolean value @a value
    ','line_number':15899,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and double value @a value
    ','line_number':15909,'multiline':True]['text':'!
    @return The size of the BSON-encoded string in @a value
    ','line_number':15919,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and string value @a value
    ','line_number':15927,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and null value
    ','line_number':15941,'multiline':True]['text':'!
    @return The size of the BSON-encoded integer @a value
    ','line_number':15949,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and integer @a value
    ','line_number':15959,'multiline':True]['text':' int32','line_number':15967,'multiline':False]['text':' int64','line_number':15972,'multiline':False]['text':'!
    @return The size of the BSON-encoded unsigned integer in @a j
    ','line_number':15977,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and unsigned @a value
    ','line_number':15987,'multiline':True]['text':' int32 ','line_number':15995,'multiline':True]['text':' int64 ','line_number':16000,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and object @a value
    ','line_number':16009,'multiline':True]['text':' object','line_number':16015,'multiline':False]['text':'!
    @return The size of the BSON-encoded array @a value
    ','line_number':16019,'multiline':True]['text':'!
    @return The size of the BSON-encoded binary array @a value
    ','line_number':16034,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and array @a value
    ','line_number':16042,'multiline':True]['text':' array','line_number':16048,'multiline':False]['text':'!
    @brief Writes a BSON element with key @a name and binary value @a value
    ','line_number':16061,'multiline':True]['text':'!
    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
    @return The calculated size for the BSON document entry for @a j with the given @a name.
    ','line_number':16075,'multiline':True]['text':' LCOV_EXCL_START','line_number':16112,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)','line_number':16115,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':16117,'multiline':False]['text':'!
    @brief Serializes the JSON value @a j to BSON and associates it with the
           key @a name.
    @param name The name to associate with the JSON entity @a j within the
                current BSON document
    ','line_number':16121,'multiline':True]['text':' LCOV_EXCL_START','line_number':16159,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)','line_number':16162,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':16164,'multiline':False]['text':'!
    @brief Calculates the size of the BSON serialization of the given
           JSON-object @a j.
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    ','line_number':16168,'multiline':True]['text':'!
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    ','line_number':16185,'multiline':True]['text':'////////','line_number':16201,'multiline':False]['text':' CBOR //','line_number':16202,'multiline':False]['text':'////////','line_number':16203,'multiline':False]['text':'unused','line_number':16205,'multiline':True]['text':' Single-Precision Float','line_number':16207,'multiline':False]['text':'unused','line_number':16210,'multiline':True]['text':' Double-Precision Float','line_number':16212,'multiline':False]['text':'///////////','line_number':16215,'multiline':False]['text':' MsgPack //','line_number':16216,'multiline':False]['text':'///////////','line_number':16217,'multiline':False]['text':'unused','line_number':16219,'multiline':True]['text':' float 32','line_number':16221,'multiline':False]['text':'unused','line_number':16224,'multiline':True]['text':' float 64','line_number':16226,'multiline':False]['text':'//////////','line_number':16229,'multiline':False]['text':' UBJSON //','line_number':16230,'multiline':False]['text':'//////////','line_number':16231,'multiline':False]['text':' UBJSON: write number (floating point)','line_number':16233,'multiline':False]['text':' UBJSON: write number (unsigned integer)','line_number':16247,'multiline':False]['text':' int8','line_number':16258,'multiline':False]['text':' uint8','line_number':16266,'multiline':False]['text':' int16','line_number':16274,'multiline':False]['text':' uint16 - bjdata only','line_number':16282,'multiline':False]['text':' int32','line_number':16290,'multiline':False]['text':' uint32 - bjdata only','line_number':16298,'multiline':False]['text':' int64','line_number':16306,'multiline':False]['text':' uint64 - bjdata only','line_number':16314,'multiline':False]['text':' high-precision number','line_number':16322,'multiline':False]['text':' UBJSON: write number (signed integer)','line_number':16334,'multiline':False]['text':' int8','line_number':16346,'multiline':False]['text':' uint8','line_number':16354,'multiline':False]['text':' int16','line_number':16362,'multiline':False]['text':' uint16 - bjdata only','line_number':16370,'multiline':False]['text':' int32','line_number':16378,'multiline':False]['text':' uint32 - bjdata only','line_number':16386,'multiline':False]['text':' int64','line_number':16394,'multiline':False]['text':' LCOV_EXCL_START','line_number':16398,'multiline':False]['text':' high-precision number','line_number':16403,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':16413,'multiline':False]['text':'!
    @brief determine the type prefix of container values
    ','line_number':16416,'multiline':True]['text':' anything else is treated as high-precision number','line_number':16459,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16460,'multiline':False]['text':' anything else is treated as high-precision number','line_number':16497,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16498,'multiline':False]['text':' fallthrough','line_number':16507,'multiline':False]['text':' discarded values','line_number':16515,'multiline':False]['text':'unused','line_number':16520,'multiline':True]['text':' float 32','line_number':16522,'multiline':False]['text':'unused','line_number':16525,'multiline':True]['text':' float 64','line_number':16527,'multiline':False]['text':'!
    @return false if the object is successfully converted to a bjdata ndarray, true if the type or size is invalid
    ','line_number':16530,'multiline':True]['text':'/////////////////////','line_number':16642,'multiline':False]['text':' Utility functions //','line_number':16643,'multiline':False]['text':'/////////////////////','line_number':16644,'multiline':False]['text':'
    @brief write a number to output input
    @param[in] n number of type @a NumberType
    @param[in] OutputIsLittleEndian Set to true if output data is
                                 required to be little endian
    @tparam NumberType the type of the number

    @note This function needs to respect the system's endianness, because bytes
          in CBOR, MessagePack, and UBJSON are stored in network order (big
          endian) and therefore need reordering on little endian systems.
          On the other hand, BSON and BJData use little endian and should reorder
          on big endian systems.
    ','line_number':16646,'multiline':True]['text':' step 1: write number to array of length NumberType','line_number':16662,'multiline':False]['text':' step 2: write array to output (with possible reordering)','line_number':16666,'multiline':False]['text':' reverse byte order prior to conversion if necessary','line_number':16669,'multiline':False]['text':' The following to_char_type functions are implement the conversion','line_number':16704,'multiline':False]['text':' between uint8_t and CharType. In case CharType is not unsigned,','line_number':16705,'multiline':False]['text':' such a conversion is required to allow values greater than 128.','line_number':16706,'multiline':False]['text':' See <https://github.com/nlohmann/json/issues/1286> for a discussion.','line_number':16707,'multiline':False]['text':'/ whether we can assume little endianness','line_number':16745,'multiline':False]['text':'/ the output','line_number':16748,'multiline':False]['text':' namespace detail','line_number':16752,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':16755,'multiline':False]['text':' #include <nlohmann/detail/output/serializer.hpp>','line_number':16757,'multiline':False]['text':'     __ _____ _____ _____','line_number':16758,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':16759,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':16760,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':16761,'multiline':False]['text':'','line_number':16762,'multiline':False]['text':' SPDX-FileCopyrightText: 2008-2009 Björn Hoehrmann <bjoern@hoehrmann.de>','line_number':16763,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':16764,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':16765,'multiline':False]['text':' reverse, remove, fill, find, none_of','line_number':16769,'multiline':False]['text':' array','line_number':16770,'multiline':False]['text':' localeconv, lconv','line_number':16771,'multiline':False]['text':' labs, isfinite, isnan, signbit','line_number':16772,'multiline':False]['text':' size_t, ptrdiff_t','line_number':16773,'multiline':False]['text':' uint8_t','line_number':16774,'multiline':False]['text':' snprintf','line_number':16775,'multiline':False]['text':' numeric_limits','line_number':16776,'multiline':False]['text':' string, char_traits','line_number':16777,'multiline':False]['text':' setfill, setw','line_number':16778,'multiline':False]['text':' is_same','line_number':16779,'multiline':False]['text':' move','line_number':16780,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_chars.hpp>','line_number':16782,'multiline':False]['text':'     __ _____ _____ _____','line_number':16783,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':16784,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':16785,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':16786,'multiline':False]['text':'','line_number':16787,'multiline':False]['text':' SPDX-FileCopyrightText: 2009 Florian Loitsch <https://florian.loitsch.com/>','line_number':16788,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':16789,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':16790,'multiline':False]['text':' array','line_number':16794,'multiline':False]['text':' signbit, isfinite','line_number':16795,'multiline':False]['text':' intN_t, uintN_t','line_number':16796,'multiline':False]['text':' memcpy, memmove','line_number':16797,'multiline':False]['text':' numeric_limits','line_number':16798,'multiline':False]['text':' conditional','line_number':16799,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':16801,'multiline':False]['text':'!
@brief implements the Grisu2 algorithm for binary to decimal floating-point
conversion.

This implementation is a slightly modified version of the reference
implementation which may be obtained from
http://florian.loitsch.com/publications (bench.tar.gz).

The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.

For a detailed description of the algorithm see:

[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
    Language Design and Implementation, PLDI 2010
[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
    Design and Implementation, PLDI 1996
','line_number':16808,'multiline':True]['text':' f * 2^e','line_number':16840,'multiline':False]['text':' = q','line_number':16842,'multiline':False]['text':'!
    @brief returns x - y
    @pre x.e == y.e and x.f >= y.f
    ','line_number':16849,'multiline':True]['text':'!
    @brief returns x * y
    @note The result is rounded. (Only the upper q bits are returned.)
    ','line_number':16861,'multiline':True]['text':' Computes:','line_number':16869,'multiline':False]['text':'  f = round((x.f * y.f) / 2^q)','line_number':16870,'multiline':False]['text':'  e = x.e + y.e + q','line_number':16871,'multiline':False]['text':' Emulate the 64-bit * 64-bit multiplication:','line_number':16873,'multiline':False]['text':'','line_number':16874,'multiline':False]['text':' p = u * v','line_number':16875,'multiline':False]['text':'   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)','line_number':16876,'multiline':False]['text':'   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )','line_number':16877,'multiline':False]['text':'   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )','line_number':16878,'multiline':False]['text':'   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )','line_number':16879,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)','line_number':16880,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )','line_number':16881,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )','line_number':16882,'multiline':False]['text':'','line_number':16883,'multiline':False]['text':' (Since Q might be larger than 2^32 - 1)','line_number':16884,'multiline':False]['text':'','line_number':16885,'multiline':False]['text':'   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)','line_number':16886,'multiline':False]['text':'','line_number':16887,'multiline':False]['text':' (Q_hi + H does not overflow a 64-bit int)','line_number':16888,'multiline':False]['text':'','line_number':16889,'multiline':False]['text':'   = p_lo + 2^64 p_hi','line_number':16890,'multiline':False]['text':' The full product might now be computed as','line_number':16910,'multiline':False]['text':'','line_number':16911,'multiline':False]['text':' p_hi = p3 + p2_hi + p1_hi + (Q >> 32)','line_number':16912,'multiline':False]['text':' p_lo = p0_lo + (Q << 32)','line_number':16913,'multiline':False]['text':'','line_number':16914,'multiline':False]['text':' But in this particular case here, the full p_lo is not required.','line_number':16915,'multiline':False]['text':' Effectively we only need to add the highest bit in p_lo to p_hi (and','line_number':16916,'multiline':False]['text':' Q_hi + 1 does not overflow).','line_number':16917,'multiline':False]['text':' round, ties up','line_number':16919,'multiline':False]['text':'!
    @brief normalize x such that the significand is >= 2^(q-1)
    @pre x.f != 0
    ','line_number':16926,'multiline':True]['text':'!
    @brief normalize x such that the result has the exponent E
    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
    ','line_number':16943,'multiline':True]['text':'!
Compute the (normalized) diyfp representing the input number 'value' and its
boundaries.

@pre value must be finite and positive
','line_number':16965,'multiline':True]['text':' Convert the IEEE representation into a diyfp.','line_number':16977,'multiline':False]['text':'','line_number':16978,'multiline':False]['text':' If v is denormal:','line_number':16979,'multiline':False]['text':'      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))','line_number':16980,'multiline':False]['text':' If v is normalized:','line_number':16981,'multiline':False]['text':'      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))','line_number':16982,'multiline':False]['text':' = p (includes the hidden bit)','line_number':16987,'multiline':False]['text':' = 2^(p-1)','line_number':16990,'multiline':False]['text':' Compute the boundaries m- and m+ of the floating-point value','line_number':17003,'multiline':False]['text':' v = f * 2^e.','line_number':17004,'multiline':False]['text':'','line_number':17005,'multiline':False]['text':' Determine v- and v+, the floating-point predecessor and successor if v,','line_number':17006,'multiline':False]['text':' respectively.','line_number':17007,'multiline':False]['text':'','line_number':17008,'multiline':False]['text':'      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)','line_number':17009,'multiline':False]['text':'         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)','line_number':17010,'multiline':False]['text':'','line_number':17011,'multiline':False]['text':'      v+ = v + 2^e','line_number':17012,'multiline':False]['text':'','line_number':17013,'multiline':False]['text':' Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_','line_number':17014,'multiline':False]['text':' between m- and m+ round to v, regardless of how the input rounding','line_number':17015,'multiline':False]['text':' algorithm breaks ties.','line_number':17016,'multiline':False]['text':'','line_number':17017,'multiline':False]['text':'      ---+-------------+-------------+-------------+-------------+---  (A)','line_number':17018,'multiline':False]['text':'         v-            m-            v             m+            v+','line_number':17019,'multiline':False]['text':'','line_number':17020,'multiline':False]['text':'      -----------------+------+------+-------------+-------------+---  (B)','line_number':17021,'multiline':False]['text':'                       v-     m-     v             m+            v+','line_number':17022,'multiline':False]['text':' (B)','line_number':17027,'multiline':False]['text':' (A)','line_number':17028,'multiline':False]['text':' Determine the normalized w+ = m+.','line_number':17030,'multiline':False]['text':' Determine w- = m- such that e_(w-) = e_(w+).','line_number':17033,'multiline':False]['text':' Given normalized diyfp w, Grisu needs to find a (normalized) cached','line_number':17039,'multiline':False]['text':' power-of-ten c, such that the exponent of the product c * w = f * 2^e lies','line_number':17040,'multiline':False]['text':' within a certain range [alpha, gamma] (Definition 3.2 from [1])','line_number':17041,'multiline':False]['text':'','line_number':17042,'multiline':False]['text':'      alpha <= e = e_c + e_w + q <= gamma','line_number':17043,'multiline':False]['text':'','line_number':17044,'multiline':False]['text':' or','line_number':17045,'multiline':False]['text':'','line_number':17046,'multiline':False]['text':'      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q','line_number':17047,'multiline':False]['text':'                          <= f_c * f_w * 2^gamma','line_number':17048,'multiline':False]['text':'','line_number':17049,'multiline':False]['text':' Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies','line_number':17050,'multiline':False]['text':'','line_number':17051,'multiline':False]['text':'      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma','line_number':17052,'multiline':False]['text':'','line_number':17053,'multiline':False]['text':' or','line_number':17054,'multiline':False]['text':'','line_number':17055,'multiline':False]['text':'      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)','line_number':17056,'multiline':False]['text':'','line_number':17057,'multiline':False]['text':' The choice of (alpha,gamma) determines the size of the table and the form of','line_number':17058,'multiline':False]['text':' the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well','line_number':17059,'multiline':False]['text':' in practice:','line_number':17060,'multiline':False]['text':'','line_number':17061,'multiline':False]['text':' The idea is to cut the number c * w = f * 2^e into two parts, which can be','line_number':17062,'multiline':False]['text':' processed independently: An integral part p1, and a fractional part p2:','line_number':17063,'multiline':False]['text':'','line_number':17064,'multiline':False]['text':'      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e','line_number':17065,'multiline':False]['text':'              = (f div 2^-e) + (f mod 2^-e) * 2^e','line_number':17066,'multiline':False]['text':'              = p1 + p2 * 2^e','line_number':17067,'multiline':False]['text':'','line_number':17068,'multiline':False]['text':' The conversion of p1 into decimal form requires a series of divisions and','line_number':17069,'multiline':False]['text':' modulos by (a power of) 10. These operations are faster for 32-bit than for','line_number':17070,'multiline':False]['text':' 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be','line_number':17071,'multiline':False]['text':' achieved by choosing','line_number':17072,'multiline':False]['text':'','line_number':17073,'multiline':False]['text':'      -e >= 32   or   e <= -32 := gamma','line_number':17074,'multiline':False]['text':'','line_number':17075,'multiline':False]['text':' In order to convert the fractional part','line_number':17076,'multiline':False]['text':'','line_number':17077,'multiline':False]['text':'      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...','line_number':17078,'multiline':False]['text':'','line_number':17079,'multiline':False]['text':' into decimal form, the fraction is repeatedly multiplied by 10 and the digits','line_number':17080,'multiline':False]['text':' d[-i] are extracted in order:','line_number':17081,'multiline':False]['text':'','line_number':17082,'multiline':False]['text':'      (10 * p2) div 2^-e = d[-1]','line_number':17083,'multiline':False]['text':'      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...','line_number':17084,'multiline':False]['text':'','line_number':17085,'multiline':False]['text':' The multiplication by 10 must not overflow. It is sufficient to choose','line_number':17086,'multiline':False]['text':'','line_number':17087,'multiline':False]['text':'      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.','line_number':17088,'multiline':False]['text':'','line_number':17089,'multiline':False]['text':' Since p2 = f mod 2^-e < 2^-e,','line_number':17090,'multiline':False]['text':'','line_number':17091,'multiline':False]['text':'      -e <= 60   or   e >= -60 := alpha','line_number':17092,'multiline':False]['text':' c = f * 2^e ~= 10^k','line_number':17097,'multiline':False]['text':'!
For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
satisfies (Definition 3.2 from [1])

     alpha <= e_c + e + q <= gamma.
','line_number':17104,'multiline':True]['text':' Now','line_number':17113,'multiline':False]['text':'','line_number':17114,'multiline':False]['text':'      alpha <= e_c + e + q <= gamma                                    (1)','line_number':17115,'multiline':False]['text':'      ==> f_c * 2^alpha <= c * 2^e * 2^q','line_number':17116,'multiline':False]['text':'','line_number':17117,'multiline':False]['text':' and since the c's are normalized, 2^(q-1) <= f_c,','line_number':17118,'multiline':False]['text':'','line_number':17119,'multiline':False]['text':'      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)','line_number':17120,'multiline':False]['text':'      ==> 2^(alpha - e - 1) <= c','line_number':17121,'multiline':False]['text':'','line_number':17122,'multiline':False]['text':' If c were an exact power of ten, i.e. c = 10^k, one may determine k as','line_number':17123,'multiline':False]['text':'','line_number':17124,'multiline':False]['text':'      k = ceil( log_10( 2^(alpha - e - 1) ) )','line_number':17125,'multiline':False]['text':'        = ceil( (alpha - e - 1) * log_10(2) )','line_number':17126,'multiline':False]['text':'','line_number':17127,'multiline':False]['text':' From the paper:','line_number':17128,'multiline':False]['text':' "In theory the result of the procedure could be wrong since c is rounded,','line_number':17129,'multiline':False]['text':'  and the computation itself is approximated [...]. In practice, however,','line_number':17130,'multiline':False]['text':'  this simple function is sufficient."','line_number':17131,'multiline':False]['text':'','line_number':17132,'multiline':False]['text':' For IEEE double precision floating-point numbers converted into','line_number':17133,'multiline':False]['text':' normalized diyfp's w = f * 2^e, with q = 64,','line_number':17134,'multiline':False]['text':'','line_number':17135,'multiline':False]['text':'      e >= -1022      (min IEEE exponent)','line_number':17136,'multiline':False]['text':'           -52        (p - 1)','line_number':17137,'multiline':False]['text':'           -52        (p - 1, possibly normalize denormal IEEE numbers)','line_number':17138,'multiline':False]['text':'           -11        (normalize the diyfp)','line_number':17139,'multiline':False]['text':'         = -1137','line_number':17140,'multiline':False]['text':'','line_number':17141,'multiline':False]['text':' and','line_number':17142,'multiline':False]['text':'','line_number':17143,'multiline':False]['text':'      e <= +1023      (max IEEE exponent)','line_number':17144,'multiline':False]['text':'           -52        (p - 1)','line_number':17145,'multiline':False]['text':'           -11        (normalize the diyfp)','line_number':17146,'multiline':False]['text':'         = 960','line_number':17147,'multiline':False]['text':'','line_number':17148,'multiline':False]['text':' This binary exponent range [-1137,960] results in a decimal exponent','line_number':17149,'multiline':False]['text':' range [-307,324]. One does not need to store a cached power for each','line_number':17150,'multiline':False]['text':' k in this range. For each such k it suffices to find a cached power','line_number':17151,'multiline':False]['text':' such that the exponent of the product lies in [alpha,gamma].','line_number':17152,'multiline':False]['text':' This implies that the difference of the decimal exponents of adjacent','line_number':17153,'multiline':False]['text':' table entries must be less than or equal to','line_number':17154,'multiline':False]['text':'','line_number':17155,'multiline':False]['text':'      floor( (gamma - alpha) * log_10(2) ) = 8.','line_number':17156,'multiline':False]['text':'','line_number':17157,'multiline':False]['text':' (A smaller distance gamma-alpha would require a larger table.)','line_number':17158,'multiline':False]['text':' NB:','line_number':17160,'multiline':False]['text':' Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.','line_number':17161,'multiline':False]['text':' This computation gives exactly the same results for k as','line_number':17251,'multiline':False]['text':'      k = ceil((kAlpha - e - 1) * 0.30102999566398114)','line_number':17252,'multiline':False]['text':' for |e| <= 1500, but doesn't require floating-point operations.','line_number':17253,'multiline':False]['text':' NB: log_10(2) ~= 78913 / 2^18','line_number':17254,'multiline':False]['text':'!
For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
For n == 0, returns 1 and sets pow10 := 1.
','line_number':17271,'multiline':True]['text':' LCOV_EXCL_START','line_number':17277,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':17283,'multiline':False]['text':'               <--------------------------- delta ---->','line_number':17337,'multiline':False]['text':'                                  <---- dist --------->','line_number':17338,'multiline':False]['text':' --------------[------------------+-------------------]--------------','line_number':17339,'multiline':False]['text':'               M-                 w                   M+','line_number':17340,'multiline':False]['text':'','line_number':17341,'multiline':False]['text':'                                  ten_k','line_number':17342,'multiline':False]['text':'                                <------>','line_number':17343,'multiline':False]['text':'                                       <---- rest ---->','line_number':17344,'multiline':False]['text':' --------------[------------------+----+--------------]--------------','line_number':17345,'multiline':False]['text':'                                  w    V','line_number':17346,'multiline':False]['text':'                                       = buf * 10^k','line_number':17347,'multiline':False]['text':'','line_number':17348,'multiline':False]['text':' ten_k represents a unit-in-the-last-place in the decimal representation','line_number':17349,'multiline':False]['text':' stored in buf.','line_number':17350,'multiline':False]['text':' Decrement buf by ten_k while this takes buf closer to w.','line_number':17351,'multiline':False]['text':' The tests are written in this order to avoid overflow in unsigned','line_number':17353,'multiline':False]['text':' integer arithmetic.','line_number':17354,'multiline':False]['text':'!
Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
','line_number':17366,'multiline':True]['text':' Generates the digits (and the exponent) of a decimal floating-point','line_number':17376,'multiline':False]['text':' number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's','line_number':17377,'multiline':False]['text':' w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.','line_number':17378,'multiline':False]['text':'','line_number':17379,'multiline':False]['text':'               <--------------------------- delta ---->','line_number':17380,'multiline':False]['text':'                                  <---- dist --------->','line_number':17381,'multiline':False]['text':' --------------[------------------+-------------------]--------------','line_number':17382,'multiline':False]['text':'               M-                 w                   M+','line_number':17383,'multiline':False]['text':'','line_number':17384,'multiline':False]['text':' Grisu2 generates the digits of M+ from left to right and stops as soon as','line_number':17385,'multiline':False]['text':' V is in [M-,M+].','line_number':17386,'multiline':False]['text':' (significand of (M+ - M-), implicit exponent is e)','line_number':17391,'multiline':False]['text':' (significand of (M+ - w ), implicit exponent is e)','line_number':17392,'multiline':False]['text':' Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):','line_number':17394,'multiline':False]['text':'','line_number':17395,'multiline':False]['text':'      M+ = f * 2^e','line_number':17396,'multiline':False]['text':'         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e','line_number':17397,'multiline':False]['text':'         = ((p1        ) * 2^-e + (p2        )) * 2^e','line_number':17398,'multiline':False]['text':'         = p1 + p2 * 2^e','line_number':17399,'multiline':False]['text':' p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)','line_number':17403,'multiline':False]['text':' p2 = f mod 2^-e','line_number':17404,'multiline':False]['text':' 1)','line_number':17406,'multiline':False]['text':'','line_number':17407,'multiline':False]['text':' Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]','line_number':17408,'multiline':False]['text':'      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)','line_number':17415,'multiline':False]['text':'','line_number':17416,'multiline':False]['text':'      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))','line_number':17417,'multiline':False]['text':'         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))','line_number':17418,'multiline':False]['text':'','line_number':17419,'multiline':False]['text':'      M+ = p1                                             + p2 * 2^e','line_number':17420,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e','line_number':17421,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e','line_number':17422,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + (                         rest) * 2^e','line_number':17423,'multiline':False]['text':'','line_number':17424,'multiline':False]['text':' Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)','line_number':17425,'multiline':False]['text':'','line_number':17426,'multiline':False]['text':'      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]','line_number':17427,'multiline':False]['text':'','line_number':17428,'multiline':False]['text':' but stop as soon as','line_number':17429,'multiline':False]['text':'','line_number':17430,'multiline':False]['text':'      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e','line_number':17431,'multiline':False]['text':' Invariants:','line_number':17436,'multiline':False]['text':'      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)','line_number':17437,'multiline':False]['text':'      pow10 = 10^(n-1) <= p1 < 10^n','line_number':17438,'multiline':False]['text':'','line_number':17439,'multiline':False]['text':' d = p1 div 10^(n-1)','line_number':17440,'multiline':False]['text':' r = p1 mod 10^(n-1)','line_number':17441,'multiline':False]['text':'','line_number':17442,'multiline':False]['text':'      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e','line_number':17443,'multiline':False]['text':'         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)','line_number':17444,'multiline':False]['text':'','line_number':17445,'multiline':False]['text':' buffer := buffer * 10 + d','line_number':17447,'multiline':False]['text':'','line_number':17448,'multiline':False]['text':'      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)','line_number':17449,'multiline':False]['text':'','line_number':17450,'multiline':False]['text':'','line_number':17453,'multiline':False]['text':'      M+ = buffer * 10^n + (p1 + p2 * 2^e)','line_number':17454,'multiline':False]['text':'      pow10 = 10^n','line_number':17455,'multiline':False]['text':'','line_number':17456,'multiline':False]['text':' Now check if enough digits have been generated.','line_number':17458,'multiline':False]['text':' Compute','line_number':17459,'multiline':False]['text':'','line_number':17460,'multiline':False]['text':'      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e','line_number':17461,'multiline':False]['text':'','line_number':17462,'multiline':False]['text':' Note:','line_number':17463,'multiline':False]['text':' Since rest and delta share the same exponent e, it suffices to','line_number':17464,'multiline':False]['text':' compare the significands.','line_number':17465,'multiline':False]['text':' V = buffer * 10^n, with M- <= V <= M+.','line_number':17469,'multiline':False]['text':' We may now just stop. But instead look if the buffer could be','line_number':17473,'multiline':False]['text':' decremented to bring V closer to w.','line_number':17474,'multiline':False]['text':'','line_number':17475,'multiline':False]['text':' pow10 = 10^n is now 1 ulp in the decimal representation V.','line_number':17476,'multiline':False]['text':' The rounding procedure works with diyfp's with an implicit','line_number':17477,'multiline':False]['text':' exponent of e.','line_number':17478,'multiline':False]['text':'','line_number':17479,'multiline':False]['text':'      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e','line_number':17480,'multiline':False]['text':'','line_number':17481,'multiline':False]['text':'','line_number':17489,'multiline':False]['text':'      pow10 = 10^(n-1) <= p1 < 10^n','line_number':17490,'multiline':False]['text':' Invariants restored.','line_number':17491,'multiline':False]['text':' 2)','line_number':17494,'multiline':False]['text':'','line_number':17495,'multiline':False]['text':' The digits of the integral part have been generated:','line_number':17496,'multiline':False]['text':'','line_number':17497,'multiline':False]['text':'      M+ = d[k-1]...d[1]d[0] + p2 * 2^e','line_number':17498,'multiline':False]['text':'         = buffer            + p2 * 2^e','line_number':17499,'multiline':False]['text':'','line_number':17500,'multiline':False]['text':' Now generate the digits of the fractional part p2 * 2^e.','line_number':17501,'multiline':False]['text':'','line_number':17502,'multiline':False]['text':' Note:','line_number':17503,'multiline':False]['text':' No decimal point is generated: the exponent is adjusted instead.','line_number':17504,'multiline':False]['text':'','line_number':17505,'multiline':False]['text':' p2 actually represents the fraction','line_number':17506,'multiline':False]['text':'','line_number':17507,'multiline':False]['text':'      p2 * 2^e','line_number':17508,'multiline':False]['text':'          = p2 / 2^-e','line_number':17509,'multiline':False]['text':'          = d[-1] / 10^1 + d[-2] / 10^2 + ...','line_number':17510,'multiline':False]['text':'','line_number':17511,'multiline':False]['text':' Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)','line_number':17512,'multiline':False]['text':'','line_number':17513,'multiline':False]['text':'      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m','line_number':17514,'multiline':False]['text':'                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)','line_number':17515,'multiline':False]['text':'','line_number':17516,'multiline':False]['text':' using','line_number':17517,'multiline':False]['text':'','line_number':17518,'multiline':False]['text':'      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)','line_number':17519,'multiline':False]['text':'                = (                   d) * 2^-e + (                   r)','line_number':17520,'multiline':False]['text':'','line_number':17521,'multiline':False]['text':' or','line_number':17522,'multiline':False]['text':'      10^m * p2 * 2^e = d + r * 2^e','line_number':17523,'multiline':False]['text':'','line_number':17524,'multiline':False]['text':' i.e.','line_number':17525,'multiline':False]['text':'','line_number':17526,'multiline':False]['text':'      M+ = buffer + p2 * 2^e','line_number':17527,'multiline':False]['text':'         = buffer + 10^-m * (d + r * 2^e)','line_number':17528,'multiline':False]['text':'         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e','line_number':17529,'multiline':False]['text':'','line_number':17530,'multiline':False]['text':' and stop as soon as 10^-m * r * 2^e <= delta * 2^e','line_number':17531,'multiline':False]['text':' Invariant:','line_number':17538,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e','line_number':17539,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e','line_number':17540,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e','line_number':17541,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e','line_number':17542,'multiline':False]['text':'','line_number':17543,'multiline':False]['text':' d = (10 * p2) div 2^-e','line_number':17546,'multiline':False]['text':' r = (10 * p2) mod 2^-e','line_number':17547,'multiline':False]['text':'','line_number':17548,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e','line_number':17549,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))','line_number':17550,'multiline':False]['text':'         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e','line_number':17551,'multiline':False]['text':'','line_number':17552,'multiline':False]['text':' buffer := buffer * 10 + d','line_number':17554,'multiline':False]['text':'','line_number':17555,'multiline':False]['text':'      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e','line_number':17556,'multiline':False]['text':'','line_number':17557,'multiline':False]['text':'','line_number':17560,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * p2 * 2^e','line_number':17561,'multiline':False]['text':' Invariant restored.','line_number':17562,'multiline':False]['text':' Check if enough digits have been generated.','line_number':17564,'multiline':False]['text':'','line_number':17565,'multiline':False]['text':'      10^-m * p2 * 2^e <= delta * 2^e','line_number':17566,'multiline':False]['text':'              p2 * 2^e <= 10^m * delta * 2^e','line_number':17567,'multiline':False]['text':'                    p2 <= 10^m * delta','line_number':17568,'multiline':False]['text':' V = buffer * 10^-m, with M- <= V <= M+.','line_number':17577,'multiline':False]['text':' 1 ulp in the decimal representation is now 10^-m.','line_number':17581,'multiline':False]['text':' Since delta and dist are now scaled by 10^m, we need to do the','line_number':17582,'multiline':False]['text':' same with ulp in order to keep the units in sync.','line_number':17583,'multiline':False]['text':'','line_number':17584,'multiline':False]['text':'      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e','line_number':17585,'multiline':False]['text':'','line_number':17586,'multiline':False]['text':' By construction this algorithm generates the shortest possible decimal','line_number':17590,'multiline':False]['text':' number (Loitsch, Theorem 6.2) which rounds back to w.','line_number':17591,'multiline':False]['text':' For an input number of precision p, at least','line_number':17592,'multiline':False]['text':'','line_number':17593,'multiline':False]['text':'      N = 1 + ceil(p * log_10(2))','line_number':17594,'multiline':False]['text':'','line_number':17595,'multiline':False]['text':' decimal digits are sufficient to identify all binary floating-point','line_number':17596,'multiline':False]['text':' numbers (Matula, "In-and-Out conversions").','line_number':17597,'multiline':False]['text':' This implies that the algorithm does not produce more than N decimal','line_number':17598,'multiline':False]['text':' digits.','line_number':17599,'multiline':False]['text':'','line_number':17600,'multiline':False]['text':'      N = 17 for p = 53 (IEEE double precision)','line_number':17601,'multiline':False]['text':'      N = 9  for p = 24 (IEEE single precision)','line_number':17602,'multiline':False]['text':'!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
','line_number':17605,'multiline':True]['text':'  --------(-----------------------+-----------------------)--------    (A)','line_number':17617,'multiline':False]['text':'          m-                      v                       m+','line_number':17618,'multiline':False]['text':'','line_number':17619,'multiline':False]['text':'  --------------------(-----------+-----------------------)--------    (B)','line_number':17620,'multiline':False]['text':'                      m-          v                       m+','line_number':17621,'multiline':False]['text':'','line_number':17622,'multiline':False]['text':' First scale v (and m- and m+) such that the exponent is in the range','line_number':17623,'multiline':False]['text':' [alpha, gamma].','line_number':17624,'multiline':False]['text':' = c ~= 10^-k','line_number':17628,'multiline':False]['text':' The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]','line_number':17630,'multiline':False]['text':'  ----(---+---)---------------(---+---)---------------(---+---)----','line_number':17635,'multiline':False]['text':'          w-                      w                       w+','line_number':17636,'multiline':False]['text':'          = c*m-                  = c*v                   = c*m+','line_number':17637,'multiline':False]['text':'','line_number':17638,'multiline':False]['text':' diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and','line_number':17639,'multiline':False]['text':' w+ are now off by a small amount.','line_number':17640,'multiline':False]['text':' In fact:','line_number':17641,'multiline':False]['text':'','line_number':17642,'multiline':False]['text':'      w - v * 10^k < 1 ulp','line_number':17643,'multiline':False]['text':'','line_number':17644,'multiline':False]['text':' To account for this inaccuracy, add resp. subtract 1 ulp.','line_number':17645,'multiline':False]['text':'','line_number':17646,'multiline':False]['text':'  --------+---[---------------(---+---)---------------]---+--------','line_number':17647,'multiline':False]['text':'          w-  M-                  w                   M+  w+','line_number':17648,'multiline':False]['text':'','line_number':17649,'multiline':False]['text':' Now any number in [M-, M+] (bounds included) will round to w when input,','line_number':17650,'multiline':False]['text':' regardless of how the input rounding algorithm breaks ties.','line_number':17651,'multiline':False]['text':'','line_number':17652,'multiline':False]['text':' And digit_gen generates the shortest possible such number in [M-, M+].','line_number':17653,'multiline':False]['text':' Note that this does not mean that Grisu2 always generates the shortest','line_number':17654,'multiline':False]['text':' possible number in the interval (m-, m+).','line_number':17655,'multiline':False]['text':' = -(-k) = k','line_number':17659,'multiline':False]['text':'!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
','line_number':17664,'multiline':True]['text':' If the neighbors (and boundaries) of 'value' are always computed for double-precision','line_number':17679,'multiline':False]['text':' numbers, all float's can be recovered using strtod (and strtof). However, the resulting','line_number':17680,'multiline':False]['text':' decimal representations are not exactly "short".','line_number':17681,'multiline':False]['text':'','line_number':17682,'multiline':False]['text':' The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)','line_number':17683,'multiline':False]['text':' says "value is converted to a string as if by std::sprintf in the default ("C") locale"','line_number':17684,'multiline':False]['text':' and since sprintf promotes floats to doubles, I think this is exactly what 'std::to_chars'','line_number':17685,'multiline':False]['text':' does.','line_number':17686,'multiline':False]['text':' On the other hand, the documentation for 'std::to_chars' requires that "parsing the','line_number':17687,'multiline':False]['text':' representation using the corresponding std::from_chars function recovers value exactly". That','line_number':17688,'multiline':False]['text':' indicates that single precision floating-point numbers should be recovered using','line_number':17689,'multiline':False]['text':' 'std::strtof'.','line_number':17690,'multiline':False]['text':'','line_number':17691,'multiline':False]['text':' NB: If the neighbors are computed for single-precision numbers, there is a single float','line_number':17692,'multiline':False]['text':'     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision','line_number':17693,'multiline':False]['text':'     value is off by 1 ulp.','line_number':17694,'multiline':False]['text':'!
@brief appends a decimal representation of e to buf
@return a pointer to the element following the exponent.
@pre -1000 < e < 1000
','line_number':17704,'multiline':True]['text':' Always print at least two digits in the exponent.','line_number':17729,'multiline':False]['text':' This is for compatibility with printf("%g").','line_number':17730,'multiline':False]['text':'!
@brief prettify v = buf * 10^decimal_exponent

If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
notation. Otherwise it will be printed in exponential notation.

@pre min_exp < 0
@pre max_exp > 0
','line_number':17752,'multiline':True]['text':' v = buf * 10^(n-k)','line_number':17772,'multiline':False]['text':' k is the length of the buffer (number of decimal digits)','line_number':17773,'multiline':False]['text':' n is the position of the decimal point relative to the start of the buffer.','line_number':17774,'multiline':False]['text':' digits[000]','line_number':17778,'multiline':False]['text':' len <= max_exp + 2','line_number':17779,'multiline':False]['text':' Make it look like a floating-point number (#362, #378)','line_number':17782,'multiline':False]['text':' dig.its','line_number':17790,'multiline':False]['text':' len <= max_digits10 + 1','line_number':17791,'multiline':False]['text':' 0.[000]digits','line_number':17802,'multiline':False]['text':' len <= 2 + (-min_exp - 1) + max_digits10','line_number':17803,'multiline':False]['text':' dE+123','line_number':17814,'multiline':False]['text':' len <= 1 + 5','line_number':17815,'multiline':False]['text':' d.igitsE+123','line_number':17821,'multiline':False]['text':' len <= max_digits10 + 1 + 5','line_number':17822,'multiline':False]['text':' namespace dtoa_impl','line_number':17833,'multiline':False]['text':'!
@brief generates a decimal representation of the floating-point number value in [first, last).

The format of the resulting decimal representation is similar to printf's %g
format. Returns an iterator pointing past-the-end of the decimal representation.

@note The input number must be finite, i.e. NaN's and Inf's are not supported.
@note The buffer must be large enough.
@note The result is NOT null-terminated.
','line_number':17835,'multiline':True]['text':' maybe unused - fix warning','line_number':17850,'multiline':False]['text':' Use signbit(value) instead of (value < 0) since signbit works for -0.','line_number':17853,'multiline':False]['text':' +-0','line_number':17864,'multiline':False]['text':' Make it look like a floating-point number (#362, #378)','line_number':17867,'multiline':False]['text':' Compute v = buffer * 10^decimal_exponent.','line_number':17878,'multiline':False]['text':' The decimal digits are stored in the buffer, which needs to be interpreted','line_number':17879,'multiline':False]['text':' as an unsigned decimal integer.','line_number':17880,'multiline':False]['text':' len is the length of the buffer, i.e. the number of decimal digits.','line_number':17881,'multiline':False]['text':' Format the buffer like printf("%.*g", prec, value)','line_number':17888,'multiline':False]['text':' Use digits10 here to increase compatibility with version 2.','line_number':17890,'multiline':False]['text':' namespace detail','line_number':17900,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':17903,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':17905,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':17907,'multiline':False]['text':' #include <nlohmann/detail/output/binary_writer.hpp>','line_number':17909,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':17911,'multiline':False]['text':' #include <nlohmann/detail/string_concat.hpp>','line_number':17913,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':17915,'multiline':False]['text':'/////////////////','line_number':17922,'multiline':False]['text':' serialization //','line_number':17923,'multiline':False]['text':'/////////////////','line_number':17924,'multiline':False]['text':'/ how to treat decoding errors','line_number':17926,'multiline':False]['text':'/< throw a type_error exception in case of invalid UTF-8','line_number':17929,'multiline':False]['text':'/< replace invalid UTF-8 sequences with U+FFFD','line_number':17930,'multiline':False]['text':'/< ignore invalid UTF-8 sequences','line_number':17931,'multiline':False]['text':'!
    @param[in] s  output stream to serialize to
    @param[in] ichar  indentation character to use
    @param[in] error_handler_  how to react on decoding errors
    ','line_number':17946,'multiline':True]['text':' delete because of pointer members','line_number':17962,'multiline':False]['text':'!
    @brief internal implementation of the serialization function

    This function is called by the public member function dump and organizes
    the serialization internally. The indentation level is propagated as
    additional parameter. In case of arrays and objects, the function is
    called recursively.

    - strings and object keys are escaped using `escape_string()`
    - integer numbers are converted implicitly via `operator<<`
    - floating-point numbers are converted to a string using `"%g"` format
    - binary values are serialized as objects containing the subtype and the
      byte array

    @param[in] val               value to serialize
    @param[in] pretty_print      whether the output shall be pretty-printed
    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
    in the output are escaped with `\uXXXX` sequences, and the result consists
    of ASCII characters only.
    @param[in] indent_step       the indent level
    @param[in] current_indent    the current indent level (only used internally)
    ','line_number':17969,'multiline':True]['text':' variable to hold indentation for recursive calls','line_number':18011,'multiline':False]['text':' first n-1 elements','line_number':18018,'multiline':False]['text':' last element','line_number':18030,'multiline':False]['text':' first n-1 elements','line_number':18047,'multiline':False]['text':' last element','line_number':18058,'multiline':False]['text':' variable to hold indentation for recursive calls','line_number':18084,'multiline':False]['text':' first n-1 elements','line_number':18091,'multiline':False]['text':' last element','line_number':18100,'multiline':False]['text':' first n-1 elements','line_number':18113,'multiline':False]['text':' last element','line_number':18121,'multiline':False]['text':' variable to hold indentation for recursive calls','line_number':18145,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18255,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':18256,'multiline':False]['text':'!
    @brief dump escaped string

    Escape a string by replacing certain special characters by a sequence of an
    escape character (backslash) and another character and other control
    characters by a sequence of "\u" followed by a four-digit hex
    representation. The escaped string is written to output stream @a o.

    @param[in] s  the string to escape
    @param[in] ensure_ascii  whether to escape non-ASCII characters with
                             \uXXXX sequences

    @complexity Linear in the length of string @a s.
    ','line_number':18261,'multiline':True]['text':' number of bytes written to string_buffer','line_number':18279,'multiline':False]['text':' number of bytes written at the point of the last valid byte','line_number':18281,'multiline':False]['text':' decode found a new code point','line_number':18291,'multiline':False]['text':' backspace','line_number':18295,'multiline':False]['text':' horizontal tab','line_number':18302,'multiline':False]['text':' newline','line_number':18309,'multiline':False]['text':' formfeed','line_number':18316,'multiline':False]['text':' carriage return','line_number':18323,'multiline':False]['text':' quotation mark','line_number':18330,'multiline':False]['text':' reverse solidus','line_number':18337,'multiline':False]['text':' escape control characters (0x00..0x1F) or, if','line_number':18346,'multiline':False]['text':' ensure_ascii parameter is used, non-ASCII characters','line_number':18347,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':18352,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':18359,'multiline':False]['text':' copy byte to buffer (all previous bytes','line_number':18368,'multiline':False]['text':' been copied have in default case above)','line_number':18369,'multiline':False]['text':' write buffer and reset index; there must be 13 bytes','line_number':18376,'multiline':False]['text':' left, as this is the maximal number of bytes to be','line_number':18377,'multiline':False]['text':' written ("\uxxxx\uxxxx\0") for one code point','line_number':18378,'multiline':False]['text':' remember the byte position of this accept','line_number':18385,'multiline':False]['text':' decode found invalid UTF-8 byte','line_number':18391,'multiline':False]['text':' in case we saw this character the first time, we','line_number':18403,'multiline':False]['text':' would like to read it again, because the byte','line_number':18404,'multiline':False]['text':' may be OK for itself, but just not OK for the','line_number':18405,'multiline':False]['text':' previous sequence','line_number':18406,'multiline':False]['text':' reset length buffer to the last accepted index;','line_number':18412,'multiline':False]['text':' thus removing/ignoring the invalid characters','line_number':18413,'multiline':False]['text':' add a replacement character','line_number':18418,'multiline':False]['text':' write buffer and reset index; there must be 13 bytes','line_number':18435,'multiline':False]['text':' left, as this is the maximal number of bytes to be','line_number':18436,'multiline':False]['text':' written ("\uxxxx\uxxxx\0") for one code point','line_number':18437,'multiline':False]['text':' continue processing the string','line_number':18449,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18454,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':18455,'multiline':False]['text':' decode found yet incomplete multi-byte code point','line_number':18460,'multiline':False]['text':' code point will not be escaped - copy byte to buffer','line_number':18464,'multiline':False]['text':' we finished processing the string','line_number':18473,'multiline':False]['text':' write buffer','line_number':18476,'multiline':False]['text':' we finish reading, but do not accept: string was incomplete','line_number':18484,'multiline':False]['text':' write all accepted bytes','line_number':18494,'multiline':False]['text':' write all accepted bytes','line_number':18501,'multiline':False]['text':' add a replacement character','line_number':18503,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18515,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':18516,'multiline':False]['text':'!
    @brief count digits

    Count the number of decimal (base 10) digits for an input unsigned integer.

    @param[in] x  unsigned integer number to count its digits
    @return    number of decimal digits
    ','line_number':18522,'multiline':True]['text':'!
     * @brief convert a byte to a uppercase hex representation
     * @param[in] byte byte to represent
     * @return representation ("00".."FF")
     ','line_number':18556,'multiline':True]['text':' templates to avoid warnings about useless casts','line_number':18570,'multiline':False]['text':'unused','line_number':18578,'multiline':True]['text':'!
    @brief dump an integer

    Dump a given integer to output stream @a o. Works internally with
    @a number_buffer.

    @param[in] x  integer number (signed or unsigned) to dump
    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
    ','line_number':18583,'multiline':True]['text':' special case for "0"','line_number':18616,'multiline':False]['text':' use a pointer to fill the buffer','line_number':18623,'multiline':False]['text':' NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':18624,'multiline':False]['text':' account one more byte for the minus sign','line_number':18635,'multiline':False]['text':' spare 1 byte for '\0'','line_number':18644,'multiline':False]['text':' jump to the end to generate the string from backward,','line_number':18647,'multiline':False]['text':' so we later avoid reversing the result','line_number':18648,'multiline':False]['text':' Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu','line_number':18651,'multiline':False]['text':' See: https://www.youtube.com/watch?v=o4-CwDo2zpg','line_number':18652,'multiline':False]['text':'!
    @brief dump a floating-point number

    Dump a given floating-point number to output stream @a o. Works internally
    with @a number_buffer.

    @param[in] x  floating-point number to dump
    ','line_number':18675,'multiline':True]['text':' NaN / inf','line_number':18685,'multiline':False]['text':' If number_float_t is an IEEE-754 single or double precision number,','line_number':18692,'multiline':False]['text':' use the Grisu2 algorithm to produce short numbers which are','line_number':18693,'multiline':False]['text':' guaranteed to round-trip, using strtof and strtod, resp.','line_number':18694,'multiline':False]['text':'','line_number':18695,'multiline':False]['text':' NB: The test below works if <long double> == <double>.','line_number':18696,'multiline':False]['text':'is_ieee_single_or_double','line_number':18704,'multiline':True]['text':'is_ieee_single_or_double','line_number':18712,'multiline':True]['text':' get number of digits for a float -> text -> float round-trip','line_number':18714,'multiline':False]['text':' the actual conversion','line_number':18717,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':18718,'multiline':False]['text':' negative value indicates an error','line_number':18721,'multiline':False]['text':' check if buffer was large enough','line_number':18723,'multiline':False]['text':' erase thousands separator','line_number':18726,'multiline':False]['text':' NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081','line_number':18729,'multiline':False]['text':' convert decimal point to '.'','line_number':18736,'multiline':False]['text':' NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::find returns an iterator, see https://github.com/nlohmann/json/issues/3081','line_number':18739,'multiline':False]['text':' determine if we need to append ".0"','line_number':18749,'multiline':False]['text':'!
    @brief check whether a string is UTF-8 encoded

    The function checks each byte of a string whether it is UTF-8 encoded. The
    result of the check is stored in the @a state parameter. The function must
    be called initially with state 0 (accept). State 1 means the string must
    be rejected, because the current byte is not allowed. If the string is
    completely processed, but the state is non-zero, the string ended
    prematurely; that is, the last byte indicated more bytes should have
    followed.

    @param[in,out] state  the state of the decoding
    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
    @param[in] byte       next byte to decode
    @return               new state

    @note The function has been edited: a std::array is used.

    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
    ','line_number':18763,'multiline':True]['text':' 00..1F','line_number':18789,'multiline':False]['text':' 20..3F','line_number':18790,'multiline':False]['text':' 40..5F','line_number':18791,'multiline':False]['text':' 60..7F','line_number':18792,'multiline':False]['text':' 80..9F','line_number':18793,'multiline':False]['text':' A0..BF','line_number':18794,'multiline':False]['text':' C0..DF','line_number':18795,'multiline':False]['text':' E0..EF','line_number':18796,'multiline':False]['text':' F0..FF','line_number':18797,'multiline':False]['text':' s0..s0','line_number':18798,'multiline':False]['text':' s1..s2','line_number':18799,'multiline':False]['text':' s3..s4','line_number':18800,'multiline':False]['text':' s5..s6','line_number':18801,'multiline':False]['text':' s7..s8','line_number':18802,'multiline':False]['text':'
     * Overload to make the compiler happy while it is instantiating
     * dump_integer for number_unsigned_t.
     * Must never be called.
     ','line_number':18819,'multiline':True]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':18826,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18827,'multiline':False]['text':'
     * Helper function for dump_integer
     *
     * This function takes a negative signed integer and returns its absolute
     * value as unsigned integer. The plus/minus shuffling is necessary as we can
     * not directly remove the sign of an arbitrary signed integer as the
     * absolute values of INT_MIN and INT_MAX are usually not the same. See
     * #1708 for details.
     ','line_number':18830,'multiline':True]['text':' NOLINT(misc-redundant-expression)','line_number':18841,'multiline':False]['text':'/ the output of the serializer','line_number':18846,'multiline':False]['text':'/ a (hopefully) large enough character buffer','line_number':18849,'multiline':False]['text':'/ the locale','line_number':18852,'multiline':False]['text':'/ the locale's thousand separator character','line_number':18854,'multiline':False]['text':'/ the locale's decimal point character','line_number':18856,'multiline':False]['text':'/ string buffer','line_number':18859,'multiline':False]['text':'/ the indentation character','line_number':18862,'multiline':False]['text':'/ the indentation string','line_number':18864,'multiline':False]['text':'/ error_handler how to react on decoding errors','line_number':18867,'multiline':False]['text':' namespace detail','line_number':18871,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':18874,'multiline':False]['text':' #include <nlohmann/json_fwd.hpp>','line_number':18876,'multiline':False]['text':' #include <nlohmann/ordered_map.hpp>','line_number':18878,'multiline':False]['text':'     __ _____ _____ _____','line_number':18879,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':18880,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':18881,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':18882,'multiline':False]['text':'','line_number':18883,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':18884,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':18885,'multiline':False]['text':' equal_to, less','line_number':18889,'multiline':False]['text':' initializer_list','line_number':18890,'multiline':False]['text':' input_iterator_tag, iterator_traits','line_number':18891,'multiline':False]['text':' allocator','line_number':18892,'multiline':False]['text':' for out_of_range','line_number':18893,'multiline':False]['text':' enable_if, is_convertible','line_number':18894,'multiline':False]['text':' pair','line_number':18895,'multiline':False]['text':' vector','line_number':18896,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':18898,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':18900,'multiline':False]['text':'/ ordered_map: a minimal map-like container that preserves insertion order','line_number':18905,'multiline':False]['text':'/ for use within nlohmann::basic_json<ordered_map>','line_number':18906,'multiline':False]['text':' Explicit constructors instead of `using Container::Container`','line_number':18924,'multiline':False]['text':' otherwise older compilers choke on it (GCC <= 5.5, xcode <= 9.4)','line_number':18925,'multiline':False]['text':' Since we cannot move const Keys, re-construct them in place','line_number':19048,'multiline':False]['text':' Destroy but keep allocation','line_number':19051,'multiline':False]['text':' Since we cannot move const Keys, re-construct them in place','line_number':19069,'multiline':False]['text':' Destroy but keep allocation','line_number':19072,'multiline':False]['text':' This is the start situation. We need to delete elements_affected','line_number':19097,'multiline':False]['text':' elements (3 in this example: e, f, g), and need to return an','line_number':19098,'multiline':False]['text':' iterator past the last deleted element (h in this example).','line_number':19099,'multiline':False]['text':' Note that offset is the distance from the start of the vector','line_number':19100,'multiline':False]['text':' to first. We will need this later.','line_number':19101,'multiline':False]['text':' [ a, b, c, d, e, f, g, h, i, j ]','line_number':19103,'multiline':False]['text':'               ^        ^','line_number':19104,'multiline':False]['text':'             first    last','line_number':19105,'multiline':False]['text':' Since we cannot move const Keys, we re-construct them in place.','line_number':19107,'multiline':False]['text':' We start at first and re-construct (viz. copy) the elements from','line_number':19108,'multiline':False]['text':' the back of the vector. Example for first iteration:','line_number':19109,'multiline':False]['text':'               ,--------.','line_number':19111,'multiline':False]['text':'               v        |   destroy e and re-construct with h','line_number':19112,'multiline':False]['text':' [ a, b, c, d, e, f, g, h, i, j ]','line_number':19113,'multiline':False]['text':'               ^        ^','line_number':19114,'multiline':False]['text':'               it       it + elements_affected','line_number':19115,'multiline':False]['text':' destroy but keep allocation','line_number':19119,'multiline':False]['text':' "move" next element to it','line_number':19120,'multiline':False]['text':' [ a, b, c, d, h, i, j, h, i, j ]','line_number':19123,'multiline':False]['text':'               ^        ^','line_number':19124,'multiline':False]['text':'             first    last','line_number':19125,'multiline':False]['text':' remove the unneeded elements at the end of the vector','line_number':19127,'multiline':False]['text':' [ a, b, c, d, h, i, j ]','line_number':19130,'multiline':False]['text':'               ^        ^','line_number':19131,'multiline':False]['text':'             first    last','line_number':19132,'multiline':False]['text':' first is now pointing past the last deleted element, but we cannot','line_number':19134,'multiline':False]['text':' use this iterator, because it may have been invalidated by the','line_number':19135,'multiline':False]['text':' resize call. Instead, we can return begin() + offset.','line_number':19136,'multiline':False]['text':'!
@brief namespace for Niels Lohmann
@see https://github.com/nlohmann
@since version 1.0.0
','line_number':19247,'multiline':True]['text':'!
@brief a class to store JSON values

@internal
@invariant The member variables @a m_value and @a m_type have the following
relationship:
- If `m_type == value_t::object`, then `m_value.object != nullptr`.
- If `m_type == value_t::array`, then `m_value.array != nullptr`.
- If `m_type == value_t::string`, then `m_value.string != nullptr`.
The invariants are checked by member function assert_invariant().

@note ObjectType trick from https://stackoverflow.com/a/9860911
@endinternal

@since version 1.0.0

@nosubgrouping
','line_number':19254,'multiline':True]['text':' NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)','line_number':19273,'multiline':False]['text':' can be restored when json_pointer backwards compatibility is removed','line_number':19280,'multiline':False]['text':' friend ::nlohmann::json_pointer<StringType>;','line_number':19281,'multiline':False]['text':'/ workaround type for MSVC','line_number':19298,'multiline':False]['text':' convenience aliases for types residing in namespace detail;','line_number':19302,'multiline':False]['text':'/ JSON Pointer, see @ref nlohmann::json_pointer','line_number':19339,'multiline':False]['text':'/ how to treat decoding errors','line_number':19343,'multiline':False]['text':'/ how to treat CBOR tags','line_number':19345,'multiline':False]['text':'/ helper type for initializer lists of basic_json values','line_number':19347,'multiline':False]['text':'/ SAX interface type, see @ref nlohmann::json_sax','line_number':19351,'multiline':False]['text':'//////////////','line_number':19354,'multiline':False]['text':' exceptions //','line_number':19355,'multiline':False]['text':'//////////////','line_number':19356,'multiline':False]['text':'/ @name exceptions','line_number':19358,'multiline':False]['text':'/ Classes to implement user-defined exceptions.','line_number':19359,'multiline':False]['text':'/ @{','line_number':19360,'multiline':False]['text':'/ @}','line_number':19369,'multiline':False]['text':'///////////////////','line_number':19372,'multiline':False]['text':' container types //','line_number':19373,'multiline':False]['text':'///////////////////','line_number':19374,'multiline':False]['text':'/ @name container types','line_number':19376,'multiline':False]['text':'/ The canonic container types to use @ref basic_json like any other STL','line_number':19377,'multiline':False]['text':'/ container.','line_number':19378,'multiline':False]['text':'/ @{','line_number':19379,'multiline':False]['text':'/ the type of elements in a basic_json container','line_number':19381,'multiline':False]['text':'/ the type of an element reference','line_number':19384,'multiline':False]['text':'/ the type of an element const reference','line_number':19386,'multiline':False]['text':'/ a type to represent differences between iterators','line_number':19389,'multiline':False]['text':'/ a type to represent container sizes','line_number':19391,'multiline':False]['text':'/ the allocator type','line_number':19394,'multiline':False]['text':'/ the type of an element pointer','line_number':19397,'multiline':False]['text':'/ the type of an element const pointer','line_number':19399,'multiline':False]['text':'/ an iterator for a basic_json container','line_number':19402,'multiline':False]['text':'/ a const iterator for a basic_json container','line_number':19404,'multiline':False]['text':'/ a reverse iterator for a basic_json container','line_number':19406,'multiline':False]['text':'/ a const reverse iterator for a basic_json container','line_number':19408,'multiline':False]['text':'/ @}','line_number':19411,'multiline':False]['text':'/ @brief returns the allocator associated with the container','line_number':19414,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_allocator/','line_number':19415,'multiline':False]['text':'/ @brief returns version information on the library','line_number':19421,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/meta/','line_number':19422,'multiline':False]['text':'/////////////////////////','line_number':19488,'multiline':False]['text':' JSON value data types //','line_number':19489,'multiline':False]['text':'/////////////////////////','line_number':19490,'multiline':False]['text':'/ @name JSON value data types','line_number':19492,'multiline':False]['text':'/ The data types to store a JSON value. These types are derived from','line_number':19493,'multiline':False]['text':'/ the template arguments passed to class @ref basic_json.','line_number':19494,'multiline':False]['text':'/ @{','line_number':19495,'multiline':False]['text':'/ @brief default object key comparator type','line_number':19497,'multiline':False]['text':'/ The actual object key comparator type (@ref object_comparator_t) may be','line_number':19498,'multiline':False]['text':'/ different.','line_number':19499,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/default_object_comparator_t/','line_number':19500,'multiline':False]['text':' use of transparent comparator avoids unnecessary repeated construction of temporaries','line_number':19502,'multiline':False]['text':' in functions involving lookup by key with types other than object_t::key_type (aka. StringType)','line_number':19503,'multiline':False]['text':'/ @brief a type for an object','line_number':19509,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/object_t/','line_number':19510,'multiline':False]['text':'/ @brief a type for an array','line_number':19517,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/array_t/','line_number':19518,'multiline':False]['text':'/ @brief a type for a string','line_number':19521,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/string_t/','line_number':19522,'multiline':False]['text':'/ @brief a type for a boolean','line_number':19525,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/boolean_t/','line_number':19526,'multiline':False]['text':'/ @brief a type for a number (integer)','line_number':19529,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/number_integer_t/','line_number':19530,'multiline':False]['text':'/ @brief a type for a number (unsigned)','line_number':19533,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/number_unsigned_t/','line_number':19534,'multiline':False]['text':'/ @brief a type for a number (floating-point)','line_number':19537,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/number_float_t/','line_number':19538,'multiline':False]['text':'/ @brief a type for a packed binary type','line_number':19541,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/binary_t/','line_number':19542,'multiline':False]['text':'/ @brief object key comparator type','line_number':19545,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/object_comparator_t/','line_number':19546,'multiline':False]['text':'/ @}','line_number':19549,'multiline':False]['text':'/ helper for exception-safe object creation','line_number':19553,'multiline':False]['text':'//////////////////////','line_number':19571,'multiline':False]['text':' JSON value storage //','line_number':19572,'multiline':False]['text':'//////////////////////','line_number':19573,'multiline':False]['text':'!
    @brief a JSON value

    The actual storage for a JSON value of the @ref basic_json class. This
    union combines the different storage types for the JSON value types
    defined in @ref value_t.

    JSON type | value_t type    | used type
    --------- | --------------- | ------------------------
    object    | object          | pointer to @ref object_t
    array     | array           | pointer to @ref array_t
    string    | string          | pointer to @ref string_t
    boolean   | boolean         | @ref boolean_t
    number    | number_integer  | @ref number_integer_t
    number    | number_unsigned | @ref number_unsigned_t
    number    | number_float    | @ref number_float_t
    binary    | binary          | pointer to @ref binary_t
    null      | null            | *no value is stored*

    @note Variable-length types (objects, arrays, and strings) are stored as
    pointers. The size of the union should not exceed 64 bits if the default
    value types are used.

    @since version 1.0.0
    ','line_number':19576,'multiline':True]['text':'/ object (stored with pointer to save storage)','line_number':19603,'multiline':False]['text':'/ array (stored with pointer to save storage)','line_number':19605,'multiline':False]['text':'/ string (stored with pointer to save storage)','line_number':19607,'multiline':False]['text':'/ binary (stored with pointer to save storage)','line_number':19609,'multiline':False]['text':'/ boolean','line_number':19611,'multiline':False]['text':'/ number (integer)','line_number':19613,'multiline':False]['text':'/ number (unsigned integer)','line_number':19615,'multiline':False]['text':'/ number (floating-point)','line_number':19617,'multiline':False]['text':'/ default constructor (for null values)','line_number':19620,'multiline':False]['text':'/ constructor for booleans','line_number':19622,'multiline':False]['text':'/ constructor for numbers (integer)','line_number':19624,'multiline':False]['text':'/ constructor for numbers (unsigned)','line_number':19626,'multiline':False]['text':'/ constructor for numbers (floating-point)','line_number':19628,'multiline':False]['text':'/ constructor for empty values of a given type','line_number':19630,'multiline':False]['text':' silence warning, see #821','line_number':19685,'multiline':False]['text':' silence warning, see #821','line_number':19692,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':19695,'multiline':False]['text':'/ constructor for strings','line_number':19702,'multiline':False]['text':'/ constructor for rvalue strings','line_number':19705,'multiline':False]['text':'/ constructor for objects','line_number':19708,'multiline':False]['text':'/ constructor for rvalue objects','line_number':19711,'multiline':False]['text':'/ constructor for arrays','line_number':19714,'multiline':False]['text':'/ constructor for rvalue arrays','line_number':19717,'multiline':False]['text':'/ constructor for binary arrays','line_number':19720,'multiline':False]['text':'/ constructor for rvalue binary arrays','line_number':19723,'multiline':False]['text':'/ constructor for binary arrays (internal type)','line_number':19726,'multiline':False]['text':'/ constructor for rvalue binary arrays (internal type)','line_number':19729,'multiline':False]['text':' flatten the current json_value to a heap-allocated stack','line_number':19736,'multiline':False]['text':' move the top-level items to stack','line_number':19739,'multiline':False]['text':' move the last item to local variable to be processed','line_number':19756,'multiline':False]['text':' if current_item is array/object, move','line_number':19760,'multiline':False]['text':' its children to the stack to be processed later','line_number':19761,'multiline':False]['text':' it's now safe that current_item get destructed','line_number':19778,'multiline':False]['text':' since it doesn't have any children','line_number':19779,'multiline':False]['text':'!
    @brief checks the class invariants

    This function asserts the class invariants. It needs to be called at the
    end of every constructor to make sure that created objects respect the
    invariant. Furthermore, it has to be called each time the type of a JSON
    value is changed, because the invariant expresses a relationship between
    @a m_type and @a m_value.

    Furthermore, the parent relation is checked for arrays and objects: If
    @a check_parents true and the value is an array or object, then the
    container's elements must have the current value as parent.

    @param[in] check_parents  whether the parent relation should be checked.
               The value is true by default and should only be set to false
               during destruction of objects when the invariant does not
               need to hold.
    ','line_number':19832,'multiline':True]['text':' cppcheck-suppress assertWithSideEffect','line_number':19860,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':19866,'multiline':False]['text':' see https://github.com/nlohmann/json/issues/2838','line_number':19926,'multiline':False]['text':' capacity has changed: update all parents','line_number':19930,'multiline':False]['text':' ordered_json uses a vector internally, so pointers could have','line_number':19936,'multiline':False]['text':' been invalidated; see https://github.com/nlohmann/json/issues/2962','line_number':19937,'multiline':False]['text':' ignore warning to replace if with if constexpr','line_number':19940,'multiline':False]['text':'////////////////////////','line_number':19960,'multiline':False]['text':' JSON parser callback //','line_number':19961,'multiline':False]['text':'////////////////////////','line_number':19962,'multiline':False]['text':'/ @brief parser event types','line_number':19964,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/parse_event_t/','line_number':19965,'multiline':False]['text':'/ @brief per-element parser callback type','line_number':19968,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/parser_callback_t/','line_number':19969,'multiline':False]['text':'////////////////','line_number':19972,'multiline':False]['text':' constructors //','line_number':19973,'multiline':False]['text':'////////////////','line_number':19974,'multiline':False]['text':'/ @name constructors and destructors','line_number':19976,'multiline':False]['text':'/ Constructors of class @ref basic_json, copy/move constructor, copy','line_number':19977,'multiline':False]['text':'/ assignment, static functions creating objects, and the destructor.','line_number':19978,'multiline':False]['text':'/ @{','line_number':19979,'multiline':False]['text':'/ @brief create an empty value with a given type','line_number':19981,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':19982,'multiline':False]['text':'/ @brief create a null object','line_number':19989,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':19990,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':19991,'multiline':False]['text':'/ @brief create a JSON value from compatible types','line_number':19997,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':19998,'multiline':False]['text':' NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)','line_number':20003,'multiline':False]['text':'/ @brief create a JSON value from an existing one','line_number':20012,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20013,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':20060,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':20061,'multiline':False]['text':'/ @brief create a container (array or object) from an initializer list','line_number':20068,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20069,'multiline':False]['text':' check if each element is an array with two elements whose first','line_number':20074,'multiline':False]['text':' element is a string','line_number':20075,'multiline':False]['text':' adjust type if type deduction is not wanted','line_number':20082,'multiline':False]['text':' if array is wanted, do not create an object though possible','line_number':20085,'multiline':False]['text':' if object is wanted but impossible, throw an exception','line_number':20091,'multiline':False]['text':' the initializer list is a list of pairs -> create object','line_number':20100,'multiline':False]['text':' the initializer list describes an array -> create array','line_number':20114,'multiline':False]['text':'/ @brief explicitly create a binary array (without subtype)','line_number':20123,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/binary/','line_number':20124,'multiline':False]['text':'/ @brief explicitly create a binary array (with subtype)','line_number':20134,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/binary/','line_number':20135,'multiline':False]['text':'/ @brief explicitly create a binary array','line_number':20145,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/binary/','line_number':20146,'multiline':False]['text':'/ @brief explicitly create a binary array (with subtype)','line_number':20156,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/binary/','line_number':20157,'multiline':False]['text':'/ @brief explicitly create an array from an initializer list','line_number':20167,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/array/','line_number':20168,'multiline':False]['text':'/ @brief explicitly create an object from an initializer list','line_number':20175,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/object/','line_number':20176,'multiline':False]['text':'/ @brief construct an array with count copies of given value','line_number':20183,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20184,'multiline':False]['text':'/ @brief construct a JSON container given an iterator range','line_number':20193,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20194,'multiline':False]['text':' make sure iterator fits the current value','line_number':20203,'multiline':False]['text':' copy type from first iterator','line_number':20209,'multiline':False]['text':' check if iterator range is complete for primitive values','line_number':20212,'multiline':False]['text':'/////////////////////////////////////','line_number':20301,'multiline':False]['text':' other constructors and destructor //','line_number':20302,'multiline':False]['text':'/////////////////////////////////////','line_number':20303,'multiline':False]['text':'/ @brief copy constructor','line_number':20310,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20311,'multiline':False]['text':' check of passed value is valid','line_number':20315,'multiline':False]['text':'/ @brief move constructor','line_number':20378,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/basic_json/','line_number':20379,'multiline':False]['text':' check that passed value is valid','line_number':20384,'multiline':False]['text':' invalidate payload','line_number':20387,'multiline':False]['text':'/ @brief copy assignment','line_number':20395,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator=/','line_number':20396,'multiline':False]['text':' check that passed value is valid','line_number':20404,'multiline':False]['text':'/ @brief destructor','line_number':20416,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/~basic_json/','line_number':20417,'multiline':False]['text':'/ @}','line_number':20424,'multiline':False]['text':'/////////////////////','line_number':20427,'multiline':False]['text':' object inspection //','line_number':20428,'multiline':False]['text':'/////////////////////','line_number':20429,'multiline':False]['text':'/ @name object inspection','line_number':20431,'multiline':False]['text':'/ Functions to inspect the type of a JSON value.','line_number':20432,'multiline':False]['text':'/ @{','line_number':20433,'multiline':False]['text':'/ @brief serialization','line_number':20435,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/dump/','line_number':20436,'multiline':False]['text':'/ @brief return the type of the JSON value (explicit)','line_number':20457,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/type/','line_number':20458,'multiline':False]['text':'/ @brief return whether type is primitive','line_number':20464,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_primitive/','line_number':20465,'multiline':False]['text':'/ @brief return whether type is structured','line_number':20471,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_structured/','line_number':20472,'multiline':False]['text':'/ @brief return whether value is null','line_number':20478,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_null/','line_number':20479,'multiline':False]['text':'/ @brief return whether value is a boolean','line_number':20485,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_boolean/','line_number':20486,'multiline':False]['text':'/ @brief return whether value is a number','line_number':20492,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_number/','line_number':20493,'multiline':False]['text':'/ @brief return whether value is an integer number','line_number':20499,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_number_integer/','line_number':20500,'multiline':False]['text':'/ @brief return whether value is an unsigned integer number','line_number':20506,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_number_unsigned/','line_number':20507,'multiline':False]['text':'/ @brief return whether value is a floating-point number','line_number':20513,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_number_float/','line_number':20514,'multiline':False]['text':'/ @brief return whether value is an object','line_number':20520,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_object/','line_number':20521,'multiline':False]['text':'/ @brief return whether value is an array','line_number':20527,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_array/','line_number':20528,'multiline':False]['text':'/ @brief return whether value is a string','line_number':20534,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_string/','line_number':20535,'multiline':False]['text':'/ @brief return whether value is a binary array','line_number':20541,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_binary/','line_number':20542,'multiline':False]['text':'/ @brief return whether value is discarded','line_number':20548,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/is_discarded/','line_number':20549,'multiline':False]['text':'/ @brief return the type of the JSON value (implicit)','line_number':20555,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_value_t/','line_number':20556,'multiline':False]['text':'/ @}','line_number':20562,'multiline':False]['text':'////////////////','line_number':20565,'multiline':False]['text':' value access //','line_number':20566,'multiline':False]['text':'////////////////','line_number':20567,'multiline':False]['text':'/ get a boolean (explicit)','line_number':20569,'multiline':False]['text':'unused','line_number':20570,'multiline':True]['text':'/ get a pointer to the value (object)','line_number':20580,'multiline':False]['text':'unused','line_number':20581,'multiline':True]['text':'/ get a pointer to the value (object)','line_number':20586,'multiline':False]['text':'unused','line_number':20587,'multiline':True]['text':'/ get a pointer to the value (array)','line_number':20592,'multiline':False]['text':'unused','line_number':20593,'multiline':True]['text':'/ get a pointer to the value (array)','line_number':20598,'multiline':False]['text':'unused','line_number':20599,'multiline':True]['text':'/ get a pointer to the value (string)','line_number':20604,'multiline':False]['text':'unused','line_number':20605,'multiline':True]['text':'/ get a pointer to the value (string)','line_number':20610,'multiline':False]['text':'unused','line_number':20611,'multiline':True]['text':'/ get a pointer to the value (boolean)','line_number':20616,'multiline':False]['text':'unused','line_number':20617,'multiline':True]['text':'/ get a pointer to the value (boolean)','line_number':20622,'multiline':False]['text':'unused','line_number':20623,'multiline':True]['text':'/ get a pointer to the value (integer number)','line_number':20628,'multiline':False]['text':'unused','line_number':20629,'multiline':True]['text':'/ get a pointer to the value (integer number)','line_number':20634,'multiline':False]['text':'unused','line_number':20635,'multiline':True]['text':'/ get a pointer to the value (unsigned number)','line_number':20640,'multiline':False]['text':'unused','line_number':20641,'multiline':True]['text':'/ get a pointer to the value (unsigned number)','line_number':20646,'multiline':False]['text':'unused','line_number':20647,'multiline':True]['text':'/ get a pointer to the value (floating-point number)','line_number':20652,'multiline':False]['text':'unused','line_number':20653,'multiline':True]['text':'/ get a pointer to the value (floating-point number)','line_number':20658,'multiline':False]['text':'unused','line_number':20659,'multiline':True]['text':'/ get a pointer to the value (binary)','line_number':20664,'multiline':False]['text':'unused','line_number':20665,'multiline':True]['text':'/ get a pointer to the value (binary)','line_number':20670,'multiline':False]['text':'unused','line_number':20671,'multiline':True]['text':'!
    @brief helper function to implement get_ref()

    This function helps to implement get_ref() without code duplication for
    const and non-const overloads

    @tparam ThisType will be deduced as `basic_json` or `const basic_json`

    @throw type_error.303 if ReferenceType does not match underlying value
    type of the current JSON
    ','line_number':20676,'multiline':True]['text':' delegate the call to get_ptr<>()','line_number':20690,'multiline':False]['text':'/ @name value access','line_number':20702,'multiline':False]['text':'/ Direct access to the stored value of a JSON value.','line_number':20703,'multiline':False]['text':'/ @{','line_number':20704,'multiline':False]['text':'/ @brief get a pointer value (implicit)','line_number':20706,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_ptr/','line_number':20707,'multiline':False]['text':' delegate the call to get_impl_ptr<>()','line_number':20712,'multiline':False]['text':'/ @brief get a pointer value (implicit)','line_number':20716,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_ptr/','line_number':20717,'multiline':False]['text':' delegate the call to get_impl_ptr<>() const','line_number':20723,'multiline':False]['text':'!
    @brief get a value (explicit)

    Explicit type conversion between the JSON value and a compatible value
    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    ValueType ret;
    JSONSerializer<ValueType>::from_json(*this, ret);
    return ret;
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json,
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `void from_json(const basic_json&, ValueType&)`, and
    - @ref json_serializer<ValueType> does not have a `from_json()` method of
      the form `ValueType from_json(const basic_json&)`

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,get__ValueType_const}

    @since version 2.1.0
    ','line_number':20728,'multiline':True]['text':'unused','line_number':20771,'multiline':True]['text':'!
    @brief get a value (explicit); special case

    Explicit type conversion between the JSON value and a compatible value
    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    return JSONSerializer<ValueType>::from_json(*this);
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json and
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `ValueType from_json(const basic_json&)`

    @note If @ref json_serializer<ValueType> has both overloads of
    `from_json()`, this one is chosen.

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @since version 2.1.0
    ','line_number':20779,'multiline':True]['text':'unused','line_number':20813,'multiline':True]['text':'!
    @brief get special-case overload

    This overloads converts the current @ref basic_json in a different
    @ref basic_json type

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this, converted into @a BasicJsonType

    @complexity Depending on the implementation of the called `from_json()`
                method.

    @since version 3.2.0
    ','line_number':20819,'multiline':True]['text':'unused','line_number':20838,'multiline':True]['text':'!
    @brief get special-case overload

    This overloads avoids a lot of template boilerplate, it can be seen as the
    identity method

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this

    @complexity Constant.

    @since version 2.1.0
    ','line_number':20843,'multiline':True]['text':'unused','line_number':20861,'multiline':True]['text':'!
    @brief get a pointer value (explicit)
    @copydoc get()
    ','line_number':20866,'multiline':True]['text':'unused','line_number':20874,'multiline':True]['text':' delegate the call to get_ptr','line_number':20877,'multiline':False]['text':'!
    @brief get a (pointer) value (explicit)

    Performs explicit type conversion between the JSON value and a compatible value if required.

    - If the requested type is a pointer to the internally stored JSON value that pointer is returned.
    No copies are made.

    - If the requested type is the current @ref basic_json, or a different @ref basic_json convertible
    from the current @ref basic_json.

    - Otherwise the value is converted by calling the @ref json_serializer<ValueType> `from_json()`
    method.

    @tparam ValueTypeCV the provided value type
    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @tparam ValueType if necessary

    @throw what @ref json_serializer<ValueType> `from_json()` method throws if conversion is required

    @since version 2.1.0
    ','line_number':20882,'multiline':True]['text':' we cannot static_assert on ValueTypeCV being non-const, because','line_number':20913,'multiline':False]['text':' there is support for get<const basic_json_t>(), which is why we','line_number':20914,'multiline':False]['text':' still need the uncvref','line_number':20915,'multiline':False]['text':'!
    @brief get a pointer value (explicit)

    Explicit pointer access to the internally stored JSON value. No copies are
    made.

    @warning The pointer becomes invalid if the underlying JSON object
    changes.

    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
    @ref number_unsigned_t, or @ref number_float_t.

    @return pointer to the internally stored JSON value if the requested
    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise

    @complexity Constant.

    @liveexample{The example below shows how pointers to internal values of a
    JSON value can be requested. Note that no type conversions are made and a
    `nullptr` is returned if the value and the requested pointer type does not
    match.,get__PointerType}

    @sa see @ref get_ptr() for explicit pointer-member access

    @since version 1.0.0
    ','line_number':20921,'multiline':True]['text':' delegate the call to get_ptr','line_number':20952,'multiline':False]['text':'/ @brief get a value (explicit)','line_number':20956,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_to/','line_number':20957,'multiline':False]['text':' specialization to allow calling get_to with a basic_json value','line_number':20970,'multiline':False]['text':' see https://github.com/nlohmann/json/issues/2175','line_number':20971,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':20984,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':20987,'multiline':False]['text':'/ @brief get a reference value (implicit)','line_number':20995,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_ref/','line_number':20996,'multiline':False]['text':' delegate call to get_ref_impl','line_number':21001,'multiline':False]['text':'/ @brief get a reference value (implicit)','line_number':21005,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_ref/','line_number':21006,'multiline':False]['text':' delegate call to get_ref_impl','line_number':21012,'multiline':False]['text':'!
    @brief get a value (implicit)

    Implicit type conversion between the JSON value and a compatible value.
    The call is realized by calling @ref get() const.

    @tparam ValueType non-pointer type compatible to the JSON value, for
    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
    `std::vector` types for JSON arrays. The character type of @ref string_t
    as well as an initializer list of this type is excluded to avoid
    ambiguities as these types implicitly convert to `std::string`.

    @return copy of the JSON value, converted to type @a ValueType

    @throw type_error.302 in case passed type @a ValueType is incompatible
    to the JSON value type (e.g., the JSON value is of type boolean, but a
    string is requested); see example below

    @complexity Linear in the size of the JSON value.

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,operator__ValueType}

    @since version 1.0.0
    ','line_number':21016,'multiline':True]['text':' delegate the call to get<>() const','line_number':21063,'multiline':False]['text':'/ @brief get a binary value','line_number':21067,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_binary/','line_number':21068,'multiline':False]['text':'/ @brief get a binary value','line_number':21079,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/get_binary/','line_number':21080,'multiline':False]['text':'/ @}','line_number':21091,'multiline':False]['text':'//////////////////','line_number':21094,'multiline':False]['text':' element access //','line_number':21095,'multiline':False]['text':'//////////////////','line_number':21096,'multiline':False]['text':'/ @name element access','line_number':21098,'multiline':False]['text':'/ Access to the JSON value.','line_number':21099,'multiline':False]['text':'/ @{','line_number':21100,'multiline':False]['text':'/ @brief access specified array element with bounds checking','line_number':21102,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21103,'multiline':False]['text':' at only works for arrays','line_number':21106,'multiline':False]['text':' create better exception explanation','line_number':21115,'multiline':False]['text':'/ @brief access specified array element with bounds checking','line_number':21125,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21126,'multiline':False]['text':' at only works for arrays','line_number':21129,'multiline':False]['text':' create better exception explanation','line_number':21138,'multiline':False]['text':'/ @brief access specified object element with bounds checking','line_number':21148,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21149,'multiline':False]['text':' at only works for objects','line_number':21152,'multiline':False]['text':'/ @brief access specified object element with bounds checking','line_number':21166,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21167,'multiline':False]['text':' at only works for objects','line_number':21172,'multiline':False]['text':'/ @brief access specified object element with bounds checking','line_number':21186,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21187,'multiline':False]['text':' at only works for objects','line_number':21190,'multiline':False]['text':'/ @brief access specified object element with bounds checking','line_number':21204,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':21205,'multiline':False]['text':' at only works for objects','line_number':21210,'multiline':False]['text':'/ @brief access specified array element','line_number':21224,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21225,'multiline':False]['text':' implicitly convert null value to an empty array','line_number':21228,'multiline':False]['text':' operator[] only works for arrays','line_number':21236,'multiline':False]['text':' fill up array with null values if given idx is outside range','line_number':21239,'multiline':False]['text':' remember array size & capacity before resizing','line_number':21243,'multiline':False]['text':' capacity has changed: update all parents','line_number':21252,'multiline':False]['text':' set parent for values added above','line_number':21257,'multiline':False]['text':'/ @brief access specified array element','line_number':21270,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21271,'multiline':False]['text':' const operator[] only works for arrays','line_number':21274,'multiline':False]['text':'/ @brief access specified object element','line_number':21283,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21284,'multiline':False]['text':' implicitly convert null value to an empty object','line_number':21287,'multiline':False]['text':' operator[] only works for objects','line_number':21295,'multiline':False]['text':'/ @brief access specified object element','line_number':21305,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21306,'multiline':False]['text':' const operator[] only works for objects','line_number':21309,'multiline':False]['text':' these two functions resolve a (const) char * ambiguity affecting Clang and MSVC','line_number':21320,'multiline':False]['text':' (they seemingly cannot be constrained to resolve the ambiguity)','line_number':21321,'multiline':False]['text':'/ @brief access specified object element','line_number':21334,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21335,'multiline':False]['text':' implicitly convert null value to an empty object','line_number':21340,'multiline':False]['text':' operator[] only works for objects','line_number':21348,'multiline':False]['text':'/ @brief access specified object element','line_number':21358,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':21359,'multiline':False]['text':' const operator[] only works for objects','line_number':21364,'multiline':False]['text':'/ @brief access specified object element with default value','line_number':21386,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21387,'multiline':False]['text':' value only works for objects','line_number':21394,'multiline':False]['text':' if key is found, return value and given default value otherwise','line_number':21397,'multiline':False]['text':'/ @brief access specified object element with default value','line_number':21410,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21411,'multiline':False]['text':' value only works for objects','line_number':21419,'multiline':False]['text':' if key is found, return value and given default value otherwise','line_number':21422,'multiline':False]['text':'/ @brief access specified object element with default value','line_number':21435,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21436,'multiline':False]['text':' value only works for objects','line_number':21445,'multiline':False]['text':' if key is found, return value and given default value otherwise','line_number':21448,'multiline':False]['text':'/ @brief access specified object element via JSON Pointer with default value','line_number':21461,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21462,'multiline':False]['text':' value only works for objects','line_number':21472,'multiline':False]['text':' if key is found, return value and given default value otherwise','line_number':21475,'multiline':False]['text':'/ @brief access specified object element via JSON Pointer with default value','line_number':21488,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21489,'multiline':False]['text':' value only works for objects','line_number':21495,'multiline':False]['text':' if pointer resolves a value, return it or use default value','line_number':21498,'multiline':False]['text':'/ @brief access specified object element via JSON Pointer with default value','line_number':21512,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/value/','line_number':21513,'multiline':False]['text':' value only works for objects','line_number':21520,'multiline':False]['text':' if pointer resolves a value, return it or use default value','line_number':21523,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':21541,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':21552,'multiline':False]['text':'/ @brief access the first element','line_number':21558,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/front/','line_number':21559,'multiline':False]['text':'/ @brief access the first element','line_number':21565,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/front/','line_number':21566,'multiline':False]['text':'/ @brief access the last element','line_number':21572,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/back/','line_number':21573,'multiline':False]['text':'/ @brief access the last element','line_number':21581,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/back/','line_number':21582,'multiline':False]['text':'/ @brief remove element given an iterator','line_number':21590,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/erase/','line_number':21591,'multiline':False]['text':' make sure iterator fits the current value','line_number':21597,'multiline':False]['text':'/ @brief remove elements given an iterator range','line_number':21660,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/erase/','line_number':21661,'multiline':False]['text':' make sure iterator fits the current value','line_number':21667,'multiline':False]['text':' this erase only works for objects','line_number':21738,'multiline':False]['text':' this erase only works for objects','line_number':21751,'multiline':False]['text':'/ @brief remove element from a JSON object given a key','line_number':21768,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/erase/','line_number':21769,'multiline':False]['text':' the indirection via erase_internal() is added to avoid making this','line_number':21772,'multiline':False]['text':' function a template and thus de-rank it during overload resolution','line_number':21773,'multiline':False]['text':'/ @brief remove element from a JSON object given a key','line_number':21777,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/erase/','line_number':21778,'multiline':False]['text':'/ @brief remove element from a JSON array given an index','line_number':21786,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/erase/','line_number':21787,'multiline':False]['text':' this erase only works for arrays','line_number':21790,'multiline':False]['text':'/ @}','line_number':21806,'multiline':False]['text':'//////////','line_number':21809,'multiline':False]['text':' lookup //','line_number':21810,'multiline':False]['text':'//////////','line_number':21811,'multiline':False]['text':'/ @name lookup','line_number':21813,'multiline':False]['text':'/ @{','line_number':21814,'multiline':False]['text':'/ @brief find an element in a JSON object','line_number':21816,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/find/','line_number':21817,'multiline':False]['text':'/ @brief find an element in a JSON object','line_number':21830,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/find/','line_number':21831,'multiline':False]['text':'/ @brief find an element in a JSON object','line_number':21844,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/find/','line_number':21845,'multiline':False]['text':'/ @brief find an element in a JSON object','line_number':21860,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/find/','line_number':21861,'multiline':False]['text':'/ @brief returns the number of occurrences of a key in a JSON object','line_number':21876,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/count/','line_number':21877,'multiline':False]['text':' return 0 for all nonobject types','line_number':21880,'multiline':False]['text':'/ @brief returns the number of occurrences of a key in a JSON object','line_number':21884,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/count/','line_number':21885,'multiline':False]['text':' return 0 for all nonobject types','line_number':21890,'multiline':False]['text':'/ @brief check the existence of an element in a JSON object','line_number':21894,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/contains/','line_number':21895,'multiline':False]['text':'/ @brief check the existence of an element in a JSON object','line_number':21901,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/contains/','line_number':21902,'multiline':False]['text':'/ @brief check the existence of an element in a JSON object given a JSON pointer','line_number':21910,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/contains/','line_number':21911,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':21918,'multiline':False]['text':'/ @}','line_number':21924,'multiline':False]['text':'/////////////','line_number':21927,'multiline':False]['text':' iterators //','line_number':21928,'multiline':False]['text':'/////////////','line_number':21929,'multiline':False]['text':'/ @name iterators','line_number':21931,'multiline':False]['text':'/ @{','line_number':21932,'multiline':False]['text':'/ @brief returns an iterator to the first element','line_number':21934,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/begin/','line_number':21935,'multiline':False]['text':'/ @brief returns an iterator to the first element','line_number':21943,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/begin/','line_number':21944,'multiline':False]['text':'/ @brief returns a const iterator to the first element','line_number':21950,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/cbegin/','line_number':21951,'multiline':False]['text':'/ @brief returns an iterator to one past the last element','line_number':21959,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/end/','line_number':21960,'multiline':False]['text':'/ @brief returns an iterator to one past the last element','line_number':21968,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/end/','line_number':21969,'multiline':False]['text':'/ @brief returns an iterator to one past the last element','line_number':21975,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/cend/','line_number':21976,'multiline':False]['text':'/ @brief returns an iterator to the reverse-beginning','line_number':21984,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/rbegin/','line_number':21985,'multiline':False]['text':'/ @brief returns an iterator to the reverse-beginning','line_number':21991,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/rbegin/','line_number':21992,'multiline':False]['text':'/ @brief returns an iterator to the reverse-end','line_number':21998,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/rend/','line_number':21999,'multiline':False]['text':'/ @brief returns an iterator to the reverse-end','line_number':22005,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/rend/','line_number':22006,'multiline':False]['text':'/ @brief returns a const reverse iterator to the last element','line_number':22012,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/crbegin/','line_number':22013,'multiline':False]['text':'/ @brief returns a const reverse iterator to one before the first','line_number':22019,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/crend/','line_number':22020,'multiline':False]['text':'/ @brief wrapper to access iterator member functions in range-based for','line_number':22027,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/items/','line_number':22028,'multiline':False]['text':'/ @deprecated This function is deprecated since 3.1.0 and will be removed in','line_number':22029,'multiline':False]['text':'/             version 4.0.0 of the library. Please use @ref items() instead;','line_number':22030,'multiline':False]['text':'/             that is, replace `json::iterator_wrapper(j)` with `j.items()`.','line_number':22031,'multiline':False]['text':'/ @brief wrapper to access iterator member functions in range-based for','line_number':22038,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/items/','line_number':22039,'multiline':False]['text':'/ @deprecated This function is deprecated since 3.1.0 and will be removed in','line_number':22040,'multiline':False]['text':'/         version 4.0.0 of the library. Please use @ref items() instead;','line_number':22041,'multiline':False]['text':'/         that is, replace `json::iterator_wrapper(j)` with `j.items()`.','line_number':22042,'multiline':False]['text':'/ @brief helper to access iterator member functions in range-based for','line_number':22049,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/items/','line_number':22050,'multiline':False]['text':'/ @brief helper to access iterator member functions in range-based for','line_number':22056,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/items/','line_number':22057,'multiline':False]['text':'/ @}','line_number':22063,'multiline':False]['text':'////////////','line_number':22066,'multiline':False]['text':' capacity //','line_number':22067,'multiline':False]['text':'////////////','line_number':22068,'multiline':False]['text':'/ @name capacity','line_number':22070,'multiline':False]['text':'/ @{','line_number':22071,'multiline':False]['text':'/ @brief checks whether the container is empty.','line_number':22073,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/empty/','line_number':22074,'multiline':False]['text':' null values are empty','line_number':22081,'multiline':False]['text':' delegate call to array_t::empty()','line_number':22087,'multiline':False]['text':' delegate call to object_t::empty()','line_number':22093,'multiline':False]['text':' all other types are nonempty','line_number':22106,'multiline':False]['text':'/ @brief returns the number of elements','line_number':22112,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/size/','line_number':22113,'multiline':False]['text':' null values are empty','line_number':22120,'multiline':False]['text':' delegate call to array_t::size()','line_number':22126,'multiline':False]['text':' delegate call to object_t::size()','line_number':22132,'multiline':False]['text':' all other types have size 1','line_number':22145,'multiline':False]['text':'/ @brief returns the maximum possible number of elements','line_number':22151,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/max_size/','line_number':22152,'multiline':False]['text':' delegate call to array_t::max_size()','line_number':22159,'multiline':False]['text':' delegate call to object_t::max_size()','line_number':22165,'multiline':False]['text':' all other types have max_size() == size()','line_number':22179,'multiline':False]['text':'/ @}','line_number':22185,'multiline':False]['text':'/////////////','line_number':22188,'multiline':False]['text':' modifiers //','line_number':22189,'multiline':False]['text':'/////////////','line_number':22190,'multiline':False]['text':'/ @name modifiers','line_number':22192,'multiline':False]['text':'/ @{','line_number':22193,'multiline':False]['text':'/ @brief clears the contents','line_number':22195,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/clear/','line_number':22196,'multiline':False]['text':'/ @brief add an object to an array','line_number':22256,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/push_back/','line_number':22257,'multiline':False]['text':' push_back only works for null objects or arrays','line_number':22260,'multiline':False]['text':' transform null object into an array','line_number':22266,'multiline':False]['text':' add element to array (move semantics)','line_number':22274,'multiline':False]['text':' if val is moved from, basic_json move constructor marks it null, so we do not call the destructor','line_number':22278,'multiline':False]['text':'/ @brief add an object to an array','line_number':22281,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator+=/','line_number':22282,'multiline':False]['text':'/ @brief add an object to an array','line_number':22289,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/push_back/','line_number':22290,'multiline':False]['text':' push_back only works for null objects or arrays','line_number':22293,'multiline':False]['text':' transform null object into an array','line_number':22299,'multiline':False]['text':' add element to array','line_number':22307,'multiline':False]['text':'/ @brief add an object to an array','line_number':22313,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator+=/','line_number':22314,'multiline':False]['text':'/ @brief add an object to an object','line_number':22321,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/push_back/','line_number':22322,'multiline':False]['text':' push_back only works for null objects or objects','line_number':22325,'multiline':False]['text':' transform null object into an object','line_number':22331,'multiline':False]['text':' add element to object','line_number':22339,'multiline':False]['text':'/ @brief add an object to an object','line_number':22344,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator+=/','line_number':22345,'multiline':False]['text':'/ @brief add an object to an object','line_number':22352,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/push_back/','line_number':22353,'multiline':False]['text':'/ @brief add an object to an object','line_number':22368,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator+=/','line_number':22369,'multiline':False]['text':'/ @brief add an object to an array','line_number':22376,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/emplace_back/','line_number':22377,'multiline':False]['text':' emplace_back only works for null objects or arrays','line_number':22381,'multiline':False]['text':' transform null object into an array','line_number':22387,'multiline':False]['text':' add element to array (perfect forwarding)','line_number':22395,'multiline':False]['text':'/ @brief add an object to an object if key does not exist','line_number':22401,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/emplace/','line_number':22402,'multiline':False]['text':' emplace only works for null objects or arrays','line_number':22406,'multiline':False]['text':' transform null object into an object','line_number':22412,'multiline':False]['text':' add element to array (perfect forwarding)','line_number':22420,'multiline':False]['text':' create result iterator and set iterator to the result of emplace','line_number':22424,'multiline':False]['text':' return pair of iterator and boolean','line_number':22428,'multiline':False]['text':'/ Helper for insertion of an iterator','line_number':22432,'multiline':False]['text':'/ @note: This uses std::distance to support GCC 4.8,','line_number':22433,'multiline':False]['text':'/        see https://github.com/nlohmann/json/pull/1257','line_number':22434,'multiline':False]['text':' This could have been written as:','line_number':22445,'multiline':False]['text':' result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);','line_number':22446,'multiline':False]['text':' but the return value of insert is missing in GCC 4.8, so it is written this way instead.','line_number':22447,'multiline':False]['text':'/ @brief inserts element into array','line_number':22453,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22454,'multiline':False]['text':' insert only works for arrays','line_number':22457,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22460,'multiline':False]['text':' insert to array and return iterator','line_number':22466,'multiline':False]['text':'/ @brief inserts element into array','line_number':22473,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22474,'multiline':False]['text':'/ @brief inserts copies of element into array','line_number':22480,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22481,'multiline':False]['text':' insert only works for arrays','line_number':22484,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22487,'multiline':False]['text':' insert to array and return iterator','line_number':22493,'multiline':False]['text':'/ @brief inserts range of elements into array','line_number':22500,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22501,'multiline':False]['text':' insert only works for arrays','line_number':22504,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22510,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':22516,'multiline':False]['text':' insert to array and return iterator','line_number':22527,'multiline':False]['text':'/ @brief inserts elements from initializer list into array','line_number':22531,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22532,'multiline':False]['text':' insert only works for arrays','line_number':22535,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22541,'multiline':False]['text':' insert to array and return iterator','line_number':22547,'multiline':False]['text':'/ @brief inserts range of elements into object','line_number':22551,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/insert/','line_number':22552,'multiline':False]['text':' insert only works for objects','line_number':22555,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':22561,'multiline':False]['text':' passed iterators must belong to objects','line_number':22567,'multiline':False]['text':'/ @brief updates a JSON object from another object, overwriting existing keys','line_number':22576,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/update/','line_number':22577,'multiline':False]['text':'/ @brief updates a JSON object from another object, overwriting existing keys','line_number':22583,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/update/','line_number':22584,'multiline':False]['text':' implicitly convert null value to an empty object','line_number':22587,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':22600,'multiline':False]['text':' passed iterators must belong to objects','line_number':22606,'multiline':False]['text':'/ @brief exchanges the values','line_number':22630,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22631,'multiline':False]['text':'/ @brief exchanges the values','line_number':22647,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22648,'multiline':False]['text':'/ @brief exchanges the values','line_number':22659,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22660,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':22661,'multiline':False]['text':' swap only works for arrays','line_number':22663,'multiline':False]['text':'/ @brief exchanges the values','line_number':22675,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22676,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':22677,'multiline':False]['text':' swap only works for objects','line_number':22679,'multiline':False]['text':'/ @brief exchanges the values','line_number':22691,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22692,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':22693,'multiline':False]['text':' swap only works for strings','line_number':22695,'multiline':False]['text':'/ @brief exchanges the values','line_number':22707,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22708,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':22709,'multiline':False]['text':' swap only works for strings','line_number':22711,'multiline':False]['text':'/ @brief exchanges the values','line_number':22723,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/swap/','line_number':22724,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':22725,'multiline':False]['text':' swap only works for strings','line_number':22727,'multiline':False]['text':'/ @}','line_number':22739,'multiline':False]['text':'////////////////////////////////////////','line_number':22741,'multiline':False]['text':' lexicographical comparison operators //','line_number':22742,'multiline':False]['text':'////////////////////////////////////////','line_number':22743,'multiline':False]['text':'/ @name lexicographical comparison operators','line_number':22745,'multiline':False]['text':'/ @{','line_number':22746,'multiline':False]['text':' note parentheses around operands are necessary; see','line_number':22748,'multiline':False]['text':' https://github.com/nlohmann/json/issues/1530','line_number':22749,'multiline':False]['text':' NOLINT(readability/braces) ','line_number':22754,'multiline':True]['text':' returns true if:','line_number':22822,'multiline':False]['text':' - any operand is NaN and the other operand is of number type','line_number':22823,'multiline':False]['text':' - any operand is discarded','line_number':22824,'multiline':False]['text':' in legacy mode, discarded values are considered ordered if','line_number':22825,'multiline':False]['text':' an operation is computed as an odd number of inverses of others','line_number':22826,'multiline':False]['text':'/ @brief comparison: equal','line_number':22850,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_eq/','line_number':22851,'multiline':False]['text':'/ @brief comparison: equal','line_number':22865,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_eq/','line_number':22866,'multiline':False]['text':'/ @brief comparison: not equal','line_number':22874,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ne/','line_number':22875,'multiline':False]['text':'/ @brief comparison: 3-way','line_number':22885,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/','line_number':22886,'multiline':False]['text':' *NOPAD*','line_number':22887,'multiline':False]['text':' default_result is used if we cannot compare values. In that case,','line_number':22890,'multiline':False]['text':' we compare types.','line_number':22891,'multiline':False]['text':' *NOPAD*','line_number':22892,'multiline':False]['text':' *NOPAD*','line_number':22895,'multiline':False]['text':'/ @brief comparison: 3-way','line_number':22898,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/','line_number':22899,'multiline':False]['text':' *NOPAD*','line_number':22902,'multiline':False]['text':' *NOPAD*','line_number':22904,'multiline':False]['text':' all operators that are computed as an odd number of inverses of others','line_number':22908,'multiline':False]['text':' need to be overloaded to emulate the legacy comparison behavior','line_number':22909,'multiline':False]['text':'/ @brief comparison: less than or equal','line_number':22911,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_le/','line_number':22912,'multiline':False]['text':'/ @brief comparison: less than or equal','line_number':22923,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_le/','line_number':22924,'multiline':False]['text':'/ @brief comparison: greater than or equal','line_number':22932,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ge/','line_number':22933,'multiline':False]['text':'/ @brief comparison: greater than or equal','line_number':22944,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ge/','line_number':22945,'multiline':False]['text':'/ @brief comparison: equal','line_number':22954,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_eq/','line_number':22955,'multiline':False]['text':'/ @brief comparison: equal','line_number':22968,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_eq/','line_number':22969,'multiline':False]['text':'/ @brief comparison: equal','line_number':22977,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_eq/','line_number':22978,'multiline':False]['text':'/ @brief comparison: not equal','line_number':22986,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ne/','line_number':22987,'multiline':False]['text':'/ @brief comparison: not equal','line_number':22997,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ne/','line_number':22998,'multiline':False]['text':'/ @brief comparison: not equal','line_number':23006,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ne/','line_number':23007,'multiline':False]['text':'/ @brief comparison: less than','line_number':23015,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_lt/','line_number':23016,'multiline':False]['text':' default_result is used if we cannot compare values. In that case,','line_number':23019,'multiline':False]['text':' we compare types. Note we have to call the operator explicitly,','line_number':23020,'multiline':False]['text':' because MSVC has problems otherwise.','line_number':23021,'multiline':False]['text':'/ @brief comparison: less than','line_number':23025,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_lt/','line_number':23026,'multiline':False]['text':'/ @brief comparison: less than','line_number':23034,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_lt/','line_number':23035,'multiline':False]['text':'/ @brief comparison: less than or equal','line_number':23043,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_le/','line_number':23044,'multiline':False]['text':'/ @brief comparison: less than or equal','line_number':23054,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_le/','line_number':23055,'multiline':False]['text':'/ @brief comparison: less than or equal','line_number':23063,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_le/','line_number':23064,'multiline':False]['text':'/ @brief comparison: greater than','line_number':23072,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_gt/','line_number':23073,'multiline':False]['text':' double inverse','line_number':23076,'multiline':False]['text':'/ @brief comparison: greater than','line_number':23084,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_gt/','line_number':23085,'multiline':False]['text':'/ @brief comparison: greater than','line_number':23093,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_gt/','line_number':23094,'multiline':False]['text':'/ @brief comparison: greater than or equal','line_number':23102,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ge/','line_number':23103,'multiline':False]['text':'/ @brief comparison: greater than or equal','line_number':23113,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ge/','line_number':23114,'multiline':False]['text':'/ @brief comparison: greater than or equal','line_number':23122,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ge/','line_number':23123,'multiline':False]['text':'/ @}','line_number':23134,'multiline':False]['text':'/////////////////','line_number':23136,'multiline':False]['text':' serialization //','line_number':23137,'multiline':False]['text':'/////////////////','line_number':23138,'multiline':False]['text':'/ @name serialization','line_number':23140,'multiline':False]['text':'/ @{','line_number':23141,'multiline':False]['text':'/ @brief serialize to stream','line_number':23143,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/','line_number':23144,'multiline':False]['text':' read width member and use it as indentation parameter if nonzero','line_number':23147,'multiline':False]['text':' reset width to 0 for subsequent calls to this stream','line_number':23151,'multiline':False]['text':' do the actual serialization','line_number':23154,'multiline':False]['text':'/ @brief serialize to stream','line_number':23160,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/','line_number':23161,'multiline':False]['text':'/ @deprecated This function is deprecated since 3.0.0 and will be removed in','line_number':23162,'multiline':False]['text':'/             version 4.0.0 of the library. Please use','line_number':23163,'multiline':False]['text':'/             operator<<(std::ostream&, const basic_json&) instead; that is,','line_number':23164,'multiline':False]['text':'/             replace calls like `j >> o;` with `o << j;`.','line_number':23165,'multiline':False]['text':' JSON_NO_IO','line_number':23171,'multiline':False]['text':'/ @}','line_number':23172,'multiline':False]['text':'///////////////////','line_number':23175,'multiline':False]['text':' deserialization //','line_number':23176,'multiline':False]['text':'///////////////////','line_number':23177,'multiline':False]['text':'/ @name deserialization','line_number':23179,'multiline':False]['text':'/ @{','line_number':23180,'multiline':False]['text':'/ @brief deserialize from a compatible input','line_number':23182,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/parse/','line_number':23183,'multiline':False]['text':'/ @brief deserialize from a pair of character iterators','line_number':23196,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/parse/','line_number':23197,'multiline':False]['text':'/ @brief check if the input is valid JSON','line_number':23223,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/accept/','line_number':23224,'multiline':False]['text':'/ @brief check if the input is valid JSON','line_number':23232,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/accept/','line_number':23233,'multiline':False]['text':'/ @brief generate SAX events','line_number':23249,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/sax_parse/','line_number':23250,'multiline':False]['text':'/ @brief generate SAX events','line_number':23264,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/sax_parse/','line_number':23265,'multiline':False]['text':'/ @brief generate SAX events','line_number':23279,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/sax_parse/','line_number':23280,'multiline':False]['text':'/ @deprecated This function is deprecated since 3.8.0 and will be removed in','line_number':23281,'multiline':False]['text':'/             version 4.0.0 of the library. Please use','line_number':23282,'multiline':False]['text':'/             sax_parse(ptr, ptr + len) instead.','line_number':23283,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23294,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23296,'multiline':False]['text':'/ @brief deserialize from stream','line_number':23300,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/','line_number':23301,'multiline':False]['text':'/ @deprecated This stream operator is deprecated since 3.0.0 and will be removed in','line_number':23302,'multiline':False]['text':'/             version 4.0.0 of the library. Please use','line_number':23303,'multiline':False]['text':'/             operator>>(std::istream&, basic_json&) instead; that is,','line_number':23304,'multiline':False]['text':'/             replace calls like `j << i;` with `i >> j;`.','line_number':23305,'multiline':False]['text':'/ @brief deserialize from stream','line_number':23312,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/','line_number':23313,'multiline':False]['text':' JSON_NO_IO','line_number':23319,'multiline':False]['text':'/ @}','line_number':23320,'multiline':False]['text':'/////////////////////////','line_number':23322,'multiline':False]['text':' convenience functions //','line_number':23323,'multiline':False]['text':'/////////////////////////','line_number':23324,'multiline':False]['text':'/ @brief return the type as string','line_number':23326,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/type_name/','line_number':23327,'multiline':False]['text':'////////////////////','line_number':23357,'multiline':False]['text':' member variables //','line_number':23358,'multiline':False]['text':'////////////////////','line_number':23359,'multiline':False]['text':'/ the type of the current element','line_number':23361,'multiline':False]['text':'/ the value of the current element','line_number':23364,'multiline':False]['text':'/ a pointer to a parent value (for debugging purposes)','line_number':23368,'multiline':False]['text':'////////////////////////////////////////','line_number':23372,'multiline':False]['text':' binary serialization/deserialization //','line_number':23373,'multiline':False]['text':'////////////////////////////////////////','line_number':23374,'multiline':False]['text':'/ @name binary serialization/deserialization support','line_number':23376,'multiline':False]['text':'/ @{','line_number':23377,'multiline':False]['text':'/ @brief create a CBOR serialization of a given JSON value','line_number':23380,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_cbor/','line_number':23381,'multiline':False]['text':'/ @brief create a CBOR serialization of a given JSON value','line_number':23389,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_cbor/','line_number':23390,'multiline':False]['text':'/ @brief create a CBOR serialization of a given JSON value','line_number':23396,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_cbor/','line_number':23397,'multiline':False]['text':'/ @brief create a MessagePack serialization of a given JSON value','line_number':23403,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_msgpack/','line_number':23404,'multiline':False]['text':'/ @brief create a MessagePack serialization of a given JSON value','line_number':23412,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_msgpack/','line_number':23413,'multiline':False]['text':'/ @brief create a MessagePack serialization of a given JSON value','line_number':23419,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_msgpack/','line_number':23420,'multiline':False]['text':'/ @brief create a UBJSON serialization of a given JSON value','line_number':23426,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_ubjson/','line_number':23427,'multiline':False]['text':'/ @brief create a UBJSON serialization of a given JSON value','line_number':23437,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_ubjson/','line_number':23438,'multiline':False]['text':'/ @brief create a UBJSON serialization of a given JSON value','line_number':23445,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_ubjson/','line_number':23446,'multiline':False]['text':'/ @brief create a BJData serialization of a given JSON value','line_number':23453,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bjdata/','line_number':23454,'multiline':False]['text':'/ @brief create a BJData serialization of a given JSON value','line_number':23464,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bjdata/','line_number':23465,'multiline':False]['text':'/ @brief create a BJData serialization of a given JSON value','line_number':23472,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bjdata/','line_number':23473,'multiline':False]['text':'/ @brief create a BSON serialization of a given JSON value','line_number':23480,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bson/','line_number':23481,'multiline':False]['text':'/ @brief create a BSON serialization of a given JSON value','line_number':23489,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bson/','line_number':23490,'multiline':False]['text':'/ @brief create a BSON serialization of a given JSON value','line_number':23496,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_bson/','line_number':23497,'multiline':False]['text':'/ @brief create a JSON value from an input in CBOR format','line_number':23503,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_cbor/','line_number':23504,'multiline':False]['text':'/ @brief create a JSON value from an input in CBOR format','line_number':23519,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_cbor/','line_number':23520,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23557,'multiline':False]['text':'/ @brief create a JSON value from an input in MessagePack format','line_number':23562,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_msgpack/','line_number':23563,'multiline':False]['text':'/ @brief create a JSON value from an input in MessagePack format','line_number':23577,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_msgpack/','line_number':23578,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23611,'multiline':False]['text':'/ @brief create a JSON value from an input in UBJSON format','line_number':23616,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_ubjson/','line_number':23617,'multiline':False]['text':'/ @brief create a JSON value from an input in UBJSON format','line_number':23631,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_ubjson/','line_number':23632,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23665,'multiline':False]['text':'/ @brief create a JSON value from an input in BJData format','line_number':23671,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_bjdata/','line_number':23672,'multiline':False]['text':'/ @brief create a JSON value from an input in BJData format','line_number':23686,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_bjdata/','line_number':23687,'multiline':False]['text':'/ @brief create a JSON value from an input in BSON format','line_number':23701,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_bson/','line_number':23702,'multiline':False]['text':'/ @brief create a JSON value from an input in BSON format','line_number':23716,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/from_bson/','line_number':23717,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':23750,'multiline':False]['text':'/ @}','line_number':23754,'multiline':False]['text':'////////////////////////','line_number':23756,'multiline':False]['text':' JSON Pointer support //','line_number':23757,'multiline':False]['text':'////////////////////////','line_number':23758,'multiline':False]['text':'/ @name JSON Pointer functions','line_number':23760,'multiline':False]['text':'/ @{','line_number':23761,'multiline':False]['text':'/ @brief access specified element via JSON Pointer','line_number':23763,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':23764,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':23771,'multiline':False]['text':'/ @brief access specified element via JSON Pointer','line_number':23777,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/','line_number':23778,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':23785,'multiline':False]['text':'/ @brief access specified element via JSON Pointer','line_number':23791,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':23792,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':23799,'multiline':False]['text':'/ @brief access specified element via JSON Pointer','line_number':23805,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/at/','line_number':23806,'multiline':False]['text':' NOLINT(readability/alt_tokens)','line_number':23813,'multiline':False]['text':'/ @brief return flattened JSON value','line_number':23819,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/flatten/','line_number':23820,'multiline':False]['text':'/ @brief unflatten a previously flattened JSON value','line_number':23828,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/unflatten/','line_number':23829,'multiline':False]['text':'/ @}','line_number':23835,'multiline':False]['text':'////////////////////////','line_number':23837,'multiline':False]['text':' JSON Patch functions //','line_number':23838,'multiline':False]['text':'////////////////////////','line_number':23839,'multiline':False]['text':'/ @name JSON Patch functions','line_number':23841,'multiline':False]['text':'/ @{','line_number':23842,'multiline':False]['text':'/ @brief applies a JSON patch in-place without copying the object','line_number':23844,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/patch/','line_number':23845,'multiline':False]['text':' the valid JSON Patch operations','line_number':23849,'multiline':False]['text':' wrapper for "add" operation; add value at ptr','line_number':23882,'multiline':False]['text':' adding to the root of the target document means replacing it','line_number':23885,'multiline':False]['text':' make sure the top element of the pointer exists','line_number':23892,'multiline':False]['text':' get reference to parent of JSON pointer ptr','line_number':23899,'multiline':False]['text':' parent must exist when performing patch add per RFC6902 specs','line_number':23902,'multiline':False]['text':' use operator[] to add value','line_number':23910,'multiline':False]['text':' special case: append to back','line_number':23919,'multiline':False]['text':' avoid undefined behavior','line_number':23927,'multiline':False]['text':' default case: insert add offset','line_number':23931,'multiline':False]['text':' if there exists a parent it cannot be primitive','line_number':23937,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23938,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23939,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23940,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23941,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23942,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23943,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23944,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':23945,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':23946,'multiline':False]['text':' wrapper for "remove" operation; remove value at ptr','line_number':23950,'multiline':False]['text':' get reference to parent of JSON pointer ptr','line_number':23953,'multiline':False]['text':' remove child','line_number':23958,'multiline':False]['text':' perform range check','line_number':23961,'multiline':False]['text':' note erase performs range check','line_number':23974,'multiline':False]['text':' type check: top level value must be an array','line_number':23979,'multiline':False]['text':' iterate and apply the operations','line_number':23985,'multiline':False]['text':' wrapper to get a value for an operation','line_number':23988,'multiline':False]['text':' find value','line_number':23993,'multiline':False]['text':' context-sensitive error message','line_number':23996,'multiline':False]['text':' check if desired value is present','line_number':23999,'multiline':False]['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':24002,'multiline':False]['text':' check if result is of type string','line_number':24006,'multiline':False]['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':24009,'multiline':False]['text':' no error: return value','line_number':24013,'multiline':False]['text':' type check: every element of the array must be an object','line_number':24017,'multiline':False]['text':' collect mandatory members','line_number':24023,'multiline':False]['text':' the "path" location must exist - use at()','line_number':24044,'multiline':False]['text':' the "from" location must exist - use at()','line_number':24054,'multiline':False]['text':' The move operation is functionally identical to a','line_number':24057,'multiline':False]['text':' "remove" operation on the "from" location, followed','line_number':24058,'multiline':False]['text':' immediately by an "add" operation at the target','line_number':24059,'multiline':False]['text':' location with the value that was just removed.','line_number':24060,'multiline':False]['text':' the "from" location must exist - use at()','line_number':24071,'multiline':False]['text':' The copy is functionally identical to an "add"','line_number':24074,'multiline':False]['text':' operation at the target location using the value','line_number':24075,'multiline':False]['text':' specified in the "from" member.','line_number':24076,'multiline':False]['text':' check if "value" matches the one at "path"','line_number':24086,'multiline':False]['text':' the "path" location must exist - use at()','line_number':24087,'multiline':False]['text':' ignore out of range errors: success remains false','line_number':24092,'multiline':False]['text':' throw an exception if test fails','line_number':24095,'multiline':False]['text':' op must be "add", "remove", "replace", "move", "copy", or','line_number':24107,'multiline':False]['text':' "test"','line_number':24108,'multiline':False]['text':'/ @brief applies a JSON patch to a copy of the current object','line_number':24115,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/patch/','line_number':24116,'multiline':False]['text':'/ @brief creates a diff as a JSON patch','line_number':24124,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/diff/','line_number':24125,'multiline':False]['text':' the patch','line_number':24130,'multiline':False]['text':' if the values are the same, return empty patch','line_number':24133,'multiline':False]['text':' different types: replace value','line_number':24141,'multiline':False]['text':' first pass: traverse common elements','line_number':24153,'multiline':False]['text':' recursive call to compare array values at index i','line_number':24157,'multiline':False]['text':' We now reached the end of at least one array','line_number':24163,'multiline':False]['text':' in a second pass, traverse the remaining elements','line_number':24164,'multiline':False]['text':' remove my remaining elements','line_number':24166,'multiline':False]['text':' add operations in reverse order to avoid invalid','line_number':24170,'multiline':False]['text':' indices','line_number':24171,'multiline':False]['text':' add other remaining elements','line_number':24180,'multiline':False]['text':' first pass: traverse this object's elements','line_number':24197,'multiline':False]['text':' escape the key name to be used in a JSON patch','line_number':24200,'multiline':False]['text':' recursive call to compare object values at key it','line_number':24205,'multiline':False]['text':' found a key that is not in o -> remove it','line_number':24211,'multiline':False]['text':' second pass: traverse other object's elements','line_number':24219,'multiline':False]['text':' found a key that is not in this -> add it','line_number':24224,'multiline':False]['text':' both primitive type: replace value','line_number':24247,'multiline':False]['text':'/ @}','line_number':24258,'multiline':False]['text':'//////////////////////////////','line_number':24260,'multiline':False]['text':' JSON Merge Patch functions //','line_number':24261,'multiline':False]['text':'//////////////////////////////','line_number':24262,'multiline':False]['text':'/ @name JSON Merge Patch functions','line_number':24264,'multiline':False]['text':'/ @{','line_number':24265,'multiline':False]['text':'/ @brief applies a JSON Merge Patch','line_number':24267,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/merge_patch/','line_number':24268,'multiline':False]['text':'/ @}','line_number':24295,'multiline':False]['text':'/ @brief user-defined to_string function for JSON values','line_number':24298,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/to_string/','line_number':24299,'multiline':False]['text':'/ @brief user-defined string literal for JSON values','line_number':24311,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_literal_json/','line_number':24312,'multiline':False]['text':'/ @brief user-defined string literal for JSON pointer','line_number':24319,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/operator_literal_json_pointer/','line_number':24320,'multiline':False]['text':' namespace json_literals','line_number':24327,'multiline':False]['text':' namespace literals','line_number':24328,'multiline':False]['text':'/////////////////////','line_number':24331,'multiline':False]['text':' nonmember support //','line_number':24332,'multiline':False]['text':'/////////////////////','line_number':24333,'multiline':False]['text':' NOLINT(cert-dcl58-cpp)','line_number':24335,'multiline':False]['text':'/ @brief hash value for JSON objects','line_number':24338,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/std_hash/','line_number':24339,'multiline':False]['text':' specialization for std::less<value_t>','line_number':24349,'multiline':False]['text':' do not remove the space after '<', see https://github.com/nlohmann/json/pull/679','line_number':24351,'multiline':False]['text':'!
    @brief compare two value_t enum values
    @since version 3.0.0
    ','line_number':24353,'multiline':True]['text':' *NOPAD*','line_number':24361,'multiline':False]['text':' C++20 prohibit function specialization in the std namespace.','line_number':24368,'multiline':False]['text':'/ @brief exchanges the values of two JSON objects','line_number':24371,'multiline':False]['text':'/ @sa https://json.nlohmann.me/api/basic_json/std_swap/','line_number':24372,'multiline':False]['text':' NOLINT(readability-inconsistent-declaration-parameter-name)','line_number':24374,'multiline':False]['text':' NOLINT(misc-redundant-expression)','line_number':24375,'multiline':False]['text':' namespace std','line_number':24383,'multiline':False]['text':' NOLINT(misc-unused-using-decls,google-global-names-in-headers)','line_number':24386,'multiline':False]['text':'NOLINT(misc-unused-using-decls,google-global-names-in-headers)','line_number':24387,'multiline':False]['text':' #include <nlohmann/detail/macro_unscope.hpp>','line_number':24390,'multiline':False]['text':'     __ _____ _____ _____','line_number':24391,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':24392,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':24393,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':24394,'multiline':False]['text':'','line_number':24395,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':24396,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':24397,'multiline':False]['text':' restore clang diagnostic settings','line_number':24401,'multiline':False]['text':' clean up','line_number':24406,'multiline':False]['text':' #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>','line_number':24434,'multiline':False]['text':'     __ _____ _____ _____','line_number':24435,'multiline':False]['text':'  __|  |   __|     |   | |  JSON for Modern C++','line_number':24436,'multiline':False]['text':' |  |  |__   |  |  | | | |  version 3.11.2','line_number':24437,'multiline':False]['text':' |_____|_____|_____|_|___|  https://github.com/nlohmann/json','line_number':24438,'multiline':False]['text':'','line_number':24439,'multiline':False]['text':' SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>','line_number':24440,'multiline':False]['text':' SPDX-License-Identifier: MIT','line_number':24441,'multiline':False]['text':' INCLUDE_NLOHMANN_JSON_HPP_','line_number':24596,'multiline':False]