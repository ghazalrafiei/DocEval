['text':' xavier','line_number':73,'multiline':False]['text':' printf("%s: example_id=%d n_batch=%d n_train_samples=%zu\n", __func__, example_id, n_batch, n_train_samples);','line_number':244,'multiline':False]['text':' printf("%s: batch %d\n", __func__, k);','line_number':246,'multiline':False]['text':' printf("%s: sample_idx=%zu sample=%zu\n", __func__, sample_idx, sample);','line_number':253,'multiline':False]['text':' insert eos token to separate samples','line_number':263,'multiline':False]['text':' insert bos token to separate samples','line_number':266,'multiline':False]['text':' sample separation is done, continue with next sample','line_number':270,'multiline':False]['text':' note: no else-if here','line_number':280,'multiline':False]['text':' sort indices by random value for each index','line_number':328,'multiline':False]['text':' stable sort for reproducibility','line_number':340,'multiline':False]['text':' create random offsets','line_number':345,'multiline':False]['text':' reorder begins and sizes by sorted indices','line_number':350,'multiline':False]['text':' to print int64_t either cast to (long long int) or use macro PRId64 from <inttypes.h>','line_number':403,'multiline':False]['text':' gguf constants','line_number':479,'multiline':False]['text':' NOTE: gguf_context must be initialized with f_ggml_ctx and no_alloc=false, otherwise tensor data can not be read','line_number':540,'multiline':False]['text':' don't call ggml_opt_init until optimizer type and optimizer specific parameters are know','line_number':554,'multiline':False]['text':' use FILE * so we don't have to re-open the file to mmap','line_number':714,'multiline':False]['text':' this really shouldn't fail','line_number':735,'multiline':False]['text':' same','line_number':745,'multiline':False]['text':' mark each byte with its utf8 unit number.','line_number':802,'multiline':False]['text':' returns the number of utf8 characters.','line_number':803,'multiline':False]['text':' e.g. when bytes == '\x61\xD0\xB0\x62',','line_number':804,'multiline':False]['text':' then utf8_units will become [0,0,1,0]','line_number':805,'multiline':False]['text':' utf8_nunits will become [1,2,2,1] and 3 is returned.','line_number':806,'multiline':False]['text':' bytes where utf8_units is zero, are the begin of an utf8 character.','line_number':807,'multiline':False]['text':' account for possible leading whitespace that will be added by tokenizer','line_number':844,'multiline':False]['text':' e.g. '\t' will be tokenized by llama spm tokenizer to [29871, 12]','line_number':845,'multiline':False]['text':' tokenize all data at once','line_number':860,'multiline':False]['text':' generate sample starts at all token positions','line_number':884,'multiline':False]['text':' split data into samples and tokenize each sample','line_number':894,'multiline':False]['text':' find all positions of pattern sample_start','line_number':900,'multiline':False]['text':' upper bound of context byte length.','line_number':933,'multiline':False]['text':' strings with this byte length should always tokenize to at least context_length tokens.','line_number':934,'multiline':False]['text':' determine sample begin and end from pattern positions','line_number':938,'multiline':False]['text':' sample end is in the middle of an utf8 character.','line_number':948,'multiline':False]['text':' advance sample_end to the begin of the next utf8 character.','line_number':949,'multiline':False]['text':' llama_tokenize expects zero terminated string,','line_number':958,'multiline':False]['text':' copy sample into buffer and zero terminate it.','line_number':959,'multiline':False]['text':' printf("sample: '%s'\n", buf_sample.data());','line_number':963,'multiline':False]['text':' tokenize the sample','line_number':965,'multiline':False]['text':' write out tokens, start and size of sample','line_number':993,'multiline':False]['text':' overwrite the string start position with the token start position','line_number':994,'multiline':False]['text':'argc','line_number':1091,'multiline':True]['text':'argv','line_number':1091,'multiline':True]['text':' fprintf(stderr, "usage: %s [options]\n", argv[0]);','line_number':1092,'multiline':False]['text':' fprintf(stderr, "\n");','line_number':1093,'multiline':False]['text':' fprintf(stderr, "options:\n");','line_number':1094,'multiline':False]['text':' fprintf(stderr, "  -h, --help                 show this help message and exit\n");','line_number':1095,'multiline':False]['text':' time measurement','line_number':1396,'multiline':False]['text':' file saving','line_number':1416,'multiline':False]['text':' exclude file saving from time measurement, by measuring last_time after saving','line_number':1430,'multiline':False]['text':' note: we may have used some samples from the current shuffling more than once','line_number':1491,'multiline':False]['text':' allow optimization iteration at last epoch to be completed before canceling','line_number':1506,'multiline':False]