['text':'','line_number':15,'multiline':False]['text':' Backend buffer','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' buffer type','line_number':19,'multiline':False]['text':' buffer','line_number':25,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' Backend','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' tensor copy between different backends','line_number':61,'multiline':False]['text':' automatic fallback to sync copy','line_number':63,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' CPU backend','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' Create a backend buffer from an existing pointer','line_number':74,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' Backend registry','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' The backend registry is a registry of all the available backends, and allows initializing backends in a generic way','line_number':83,'multiline':False]['text':' str is name[:params]','line_number':87,'multiline':False]['text':' params is backend-specific','line_number':89,'multiline':False]['text':'','line_number':93,'multiline':False]['text':' Backend scheduler','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':' The backend scheduler allows for multiple backends to be used together','line_number':97,'multiline':False]['text':' Handles compute buffer allocation, assignment of tensors to backends, and copying of tensors between backends','line_number':98,'multiline':False]['text':' The backends are selected based on:','line_number':99,'multiline':False]['text':' - the backend that supports the operation','line_number':100,'multiline':False]['text':' - the location of the pre-allocated tensors (e.g. the weights)','line_number':101,'multiline':False]['text':'
      Example usage:

        sched = ggml_backend_sched_new({backend_gpu, backend_gpu2, backend_cpu}, num_backends);
        // sched is initialized with measure allocators and cannot be used until allocated with a measure graph

        // initialize buffers from a measure graph
        measure_graph = build_graph(sched); // use the allocr to allocate inputs as needed

        // in build_graph:
        build_graph(...) {
            // allocating tensors in a specific backend (optional, recommended: pre-allocate inputs in a different buffer)
            alloc_cpu = ggml_backend_sched_get_allocr(sched, backend_cpu);
            ggml_allocr_alloc(alloc_cpu, tensor);

            // manually assigning nodes to a backend (optional, shouldn't be needed in most cases)
            struct ggml_tensor * node = ggml_mul_mat(ctx, ...);
            ggml_backend_sched_set_node_backend(sched, node, backend_gpu);
        }

        // allocate backend buffers from measure graph
        ggml_backend_sched_init_measure(sched, measure_graph);

        // the scheduler is now ready to compute graphs

        // compute
        graph = build_graph(sched);
        ggml_backend_sched_graph_compute(sched, graph);
    ','line_number':102,'multiline':True]['text':' Initialize a backend scheduler','line_number':135,'multiline':False]['text':' Initialize backend buffers from a measure graph','line_number':140,'multiline':False]['text':' Allocate a graph on the backend scheduler','line_number':148,'multiline':False]['text':'','line_number':154,'multiline':False]['text':' Utils','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' Copy a graph to a different backend','line_number':165,'multiline':False]['text':' Compare the output of two backends','line_number':171,'multiline':False]['text':' Tensor initialization','line_number':174,'multiline':False]