['text':' Detect if this jump instruction is assert and normalize the assert','line_number':252,'multiline':False]['text':' by pushing dummy error message when nothing is given.','line_number':253,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' Python 3.9 assertion is in following format:','line_number':255,'multiline':False]['text':' 18 POP_JUMP_IF_TRUE       28','line_number':256,'multiline':False]['text':' 20 LOAD_ASSERTION_ERROR','line_number':257,'multiline':False]['text':' 22 LOAD_CONST               3 ('Assert message') -> optional instruction','line_number':258,'multiline':False]['text':' 24 CALL_FUNCTION            1                    -> optional instruction','line_number':259,'multiline':False]['text':' 26 RAISE_VARARGS','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':' Python 3.8 assertion is in following format:','line_number':262,'multiline':False]['text':' 18 POP_JUMP_IF_TRUE       28','line_number':263,'multiline':False]['text':' 20 LOAD_GLOBAL              0 (Assertion type)','line_number':264,'multiline':False]['text':' 22 LOAD_CONST               3 ('Assert message') -> optional instruction','line_number':265,'multiline':False]['text':' 24 CALL_FUNCTION            1                    -> optional instruction','line_number':266,'multiline':False]['text':' 26 RAISE_VARARGS            1','line_number':267,'multiline':False]['text':' Detect LOAD_ASSERTION_ERROR or LOAD_GLOBAL 0','line_number':275,'multiline':False]['text':' Use dummy error message if its hard to extract','line_number':285,'multiline':False]['text':' DETECT RAISE_VARARGS or LOAD CONST','line_number':289,'multiline':False]['text':' if it is LOAD_CONSTANT, it must be followed by CALL_FUNCTION','line_number':295,'multiline':False]['text':' (PRECALL for Python 3.11+)','line_number':296,'multiline':False]['text':' for Python 3.11+, PRECALL should be followed by CALL, then RAISE_VARARGS','line_number':302,'multiline':False]['text':' for Python < 3.11, CALL_FUNCTION should be followed by RAISE_VARARGS','line_number':303,'multiline':False]['text':' Skip over things like `assert True`','line_number':325,'multiline':False]['text':' TODO maybe should respect DtoH sync intention of users later??','line_number':330,'multiline':False]['text':' Manually insert torch._assert_async instead of python assert and jump over','line_number':331,'multiline':False]['text':' assert related instructions as we don't need them anymore.','line_number':332,'multiline':False]['text':' if we see Tensor as assert statement, no need to call scalar_tensor','line_number':334,'multiline':False]['text':' compile a partial subgraph prefix then jump into user code','line_number':369,'multiline':False]['text':' Equivalent of "self.nn_module is not None"','line_number':396,'multiline':False]['text':' if __bool__ is missing, trying __len__ to infer a truth value.','line_number':403,'multiline':False]['text':' __bool__ or __len__ is function','line_number':407,'multiline':False]['text':' __bool__ or __len__ is non-function or not existed in the user defined object','line_number':420,'multiline':False]['text':' TODO link the torch.cond doc later','line_number':437,'multiline':False]['text':' We don't support graph break under GenericContextWrappingVariable,','line_number':474,'multiline':False]['text':' If there is, we roll back to the checkpoint and fall back.','line_number':475,'multiline':False]['text':' TODO: Also report the traceback from the parent frame','line_number':488,'multiline':False]['text':' torch._dynamo.explain() formats this a little nicer, and presents a slightly','line_number':491,'multiline':False]['text':' more actionable user code pointer','line_number':492,'multiline':False]['text':' Reconstruct the context variables in the block stack','line_number':517,'multiline':False]['text':' copy instruction, but without exception table data','line_number':541,'multiline':False]['text':' stack effect for PRECALL + CALL is split between the two instructions','line_number':550,'multiline':False]['text':' implicit use by super()','line_number':616,'multiline':False]['text':' reads = reads | {"__class__"}','line_number':617,'multiline':False]['text':' output variables?','line_number':618,'multiline':False]['text':' 3.11 no longer uses a block stack, but we still keep track of one','line_number':698,'multiline':False]['text':' so that we know which contexts are currently active.','line_number':699,'multiline':False]['text':' For our purposes, all exception table entries with the same target','line_number':700,'multiline':False]['text':' are considered to be part of the same "block".','line_number':701,'multiline':False]['text':' still in the same block','line_number':705,'multiline':False]['text':' no longer in any block','line_number':711,'multiline':False]['text':' It is possible for NOPs to be between two instructions','line_number':712,'multiline':False]['text':' in the same block, but the NOPs are not covered by an','line_number':713,'multiline':False]['text':' exception table entry. In this case, assume that we','line_number':714,'multiline':False]['text':' are still in the same block.','line_number':715,'multiline':False]['text':' If we really escape from a block and the current','line_number':717,'multiline':False]['text':' instruction is not in another block, then there','line_number':718,'multiline':False]['text':' should be no other nested blocks that we are in.','line_number':719,'multiline':False]['text':' current instruction is in the previous block','line_number':723,'multiline':False]['text':' exit the current block','line_number':727,'multiline':False]['text':' current instruction is in a new block','line_number':730,'multiline':False]['text':' push block to stack - note, BEFORE_WITH blocks won't','line_number':731,'multiline':False]['text':' be pushed here since BEFORE_WITH pushes the block, and','line_number':732,'multiline':False]['text':' the current instruction would be counted as being in that block.','line_number':733,'multiline':False]['text':' generate code from checkpoint','line_number':756,'multiline':False]['text':' NB: Don't push the top level frame summary; set_current_loc will','line_number':769,'multiline':False]['text':' take care of it.  However, DO make sure we attach real_stack to','line_number':770,'multiline':False]['text':' exceptions','line_number':771,'multiline':False]['text':' type: ignore[attr-defined]','line_number':788,'multiline':False]['text':' Cleanup the outputGraph to delete the held tensors. We perform the','line_number':792,'multiline':False]['text':' cleanup only for InstructionTranslator and not','line_number':793,'multiline':False]['text':' InliningInstructionTranslator. The InliningInstructionTranslator','line_number':794,'multiline':False]['text':' mutates the output object and is restored to original state if','line_number':795,'multiline':False]['text':' there was an exception.','line_number':796,'multiline':False]['text':' This happens in dict/list comprehensions','line_number':824,'multiline':False]['text':' Only rename at the top-level scope, this is to avoid the confusion between','line_number':846,'multiline':False]['text':' mutating a variable vs renaming it (e.g. a = b) during speculating a higher order op,','line_number':847,'multiline':False]['text':' where mutation is prohibited and it's difficult to differentiate it with renaming.','line_number':848,'multiline':False]['text':' For empty tuples, create empty TupleVariable','line_number':862,'multiline':False]['text':' sentinel object','line_number':919,'multiline':False]['text':' Are we replaying? if so, load recorded module','line_number':992,'multiline':False]['text':' For __import__, when the name variable is of the form package.module,','line_number':1011,'multiline':False]['text':' normally, the top-level package (the name up till the first dot) is','line_number':1012,'multiline':False]['text':' returned, not the module named by module_name. However, when a','line_number':1013,'multiline':False]['text':' non-empty fromlist argument is given, the module named by name is','line_number':1014,'multiline':False]['text':' returned. Therefore, we set the source correctly here.','line_number':1015,'multiline':False]['text':' only exists in python<=3.7','line_number':1059,'multiline':False]['text':' only exists in python<=3.7','line_number':1063,'multiline':False]['text':' <non-None> is None','line_number':1138,'multiline':False]['text':' constant fold','line_number':1150,'multiline':False]['text':' Hack to handle special case in some bert models.  Converts','line_number':1200,'multiline':False]['text':' x.view(*shape) into x.view(shape), which is correct for view()','line_number':1201,'multiline':False]['text':' but not generally.  See test_transpose_for_scores().','line_number':1202,'multiline':False]['text':' always follow the NULL + fn convention, since if obj','line_number':1248,'multiline':False]['text':' is actually a method, self is already bound to it, so it','line_number':1249,'multiline':False]['text':' doesn't need to be passed in as an arg.','line_number':1250,'multiline':False]['text':' We don't allow side effects during export','line_number':1278,'multiline':False]['text':' https://github.com/pytorch/torchdynamo/issues/1475','line_number':1279,'multiline':False]['text':' ensure everything is a dict','line_number':1378,'multiline':False]['text':' MAKE_FUNCTION behavior actually changed in 3.11, see','line_number':1443,'multiline':False]['text':' https://github.com/python/cpython/pull/93189/','line_number':1444,'multiline':False]['text':' x, y = a.shape','line_number':1479,'multiline':False]['text':' low byte','line_number':1492,'multiline':False]['text':' high byte','line_number':1493,'multiline':False]['text':' 3.11 opcodes','line_number':1719,'multiline':False]['text':' type: ignore[attr-defined]','line_number':1729,'multiline':False]['text':' see https://docs.python.org/3.11/library/dis.html#opcode-CALL','line_number':1752,'multiline':False]['text':' for convention','line_number':1753,'multiline':False]['text':' see create_call_resume_at for block stack details','line_number':1806,'multiline':False]['text':' perf optimization only','line_number':1862,'multiline':False]['text':' type: ignore[method-assign]','line_number':1863,'multiline':False]['text':' Mutable state checkpointed by copy_graphstate()','line_number':1930,'multiline':False]['text':' states before SETUP_WITH for checkpointing and fallback','line_number':1939,'multiline':False]['text':' Properties of the input/output code','line_number':1946,'multiline':False]['text':' needed for recording accessed locals for replay','line_number':1951,'multiline':False]['text':' Execution record for replaying errors','line_number':1957,'multiline':False]['text':' Stack of module being parsed, current nn.module is at the end of ordered dict.','line_number':1959,'multiline':False]['text':' The first field of tuple is the fully qualified name of current module','line_number':1960,'multiline':False]['text':' in original hierarchy.  The second field is the type of current nn.module','line_number':1961,'multiline':False]['text':' Flag to indicate whether tracing is used for export.','line_number':1963,'multiline':False]['text':' set below','line_number':2043,'multiline':False]['text':' A global var is inserted only after a STORE_GLOBAL happens to it','line_number':2044,'multiline':False]['text':' as soon as we create the tracing context we should keep it active, so any calls','line_number':2052,'multiline':False]['text':' into dynamo apis can rely on finding it','line_number':2053,'multiline':False]['text':' export gets confused if we never realize unused inputs','line_number':2077,'multiline':False]['text':' in export mode just eagerly realize everything','line_number':2078,'multiline':False]['text':' TODO(jansel): check the id of the cell rather than the contents','line_number':2104,'multiline':False]['text':' Python does not allow null to be an arg to a function, so','line_number':2131,'multiline':False]['text':' we remove nulls from the stack and restore them in the','line_number':2132,'multiline':False]['text':' prologue of the resume function','line_number':2133,'multiline':False]['text':' sorted list of indices of nulls on the stack','line_number':2135,'multiline':False]['text':' find indices of NullVariables','line_number':2138,'multiline':False]['text':' generate bytecode to pop the nulls','line_number':2142,'multiline':False]['text':' we popped all nulls from the stack at runtime,','line_number':2151,'multiline':False]['text':' so we should not count NullVariables','line_number':2152,'multiline':False]['text':' Add original GraphModule context to the resume function to handle','line_number':2169,'multiline':False]['text':' the case of a graph break while tracing a GraphModule','line_number':2170,'multiline':False]['text':' _origin marks this as coming from an internal dynamo known function that is safe to','line_number':2246,'multiline':False]['text':' trace through.','line_number':2247,'multiline':False]['text':' Known sound','line_number':2253,'multiline':False]['text':' Wrap the general TypeError during bind_args() to the internal ArgsMismatchError with detailed info','line_number':2281,'multiline':False]['text':' noqa: TRY200','line_number':2282,'multiline':False]['text':' TODO: mlazos, add support for enabling multiple artifact logs','line_number':2304,'multiline':False]['text':' with a single alias','line_number':2305,'multiline':False]['text':' Detect inline GraphModule calls in order to propagate node metadata,','line_number':2320,'multiline':False]['text':' by checking if the first argument (self) is a variable tracking a GraphModule.','line_number':2321,'multiline':False]['text':' The inline call might not actually be a call to `forward`,','line_number':2325,'multiline':False]['text':' but it is enough to add a context for `forward` in case it is called.','line_number':2326,'multiline':False]['text':' Merge symbolic_globals back if parent and child are in the same namespace','line_number':2358,'multiline':False]['text':' Why is the source name here unique?','line_number':2443,'multiline':False]['text':' mutated_closure_cell_contents is a per-frame','line_number':2444,'multiline':False]['text':' concept, and sources identify, e.g., particular','line_number':2445,'multiline':False]['text':' locals from the frame.  If you had two locals,','line_number':2446,'multiline':False]['text':' they'll get different source names, and therefore','line_number':2447,'multiline':False]['text':' differ here.','line_number':2448,'multiline':False]['text':' inlining functions is all-or-nothing','line_number':2483,'multiline':False]['text':' TODO(jansel): figure out why this is needed, it isn't in the docs for YIELD_VALUE','line_number':2502,'multiline':False]['text':' TODO(voz): Unclear if we need the push None in YIELD_VALUE?','line_number':2525,'multiline':False]['text':' invoke send','line_number':2543,'multiline':False]['text':' Unreachable code - if you hit this, you are implementing generator support and have','line_number':2544,'multiline':False]['text':' lifted the `unimplemented("generator")` in frame conversion. This codepath handles','line_number':2545,'multiline':False]['text':' subgenerator and lines up with this line in Python 3.11','line_number':2546,'multiline':False]['text':' https://github.com/python/cpython/blob/3.11/Python/ceval.c#L2597','line_number':2547,'multiline':False]