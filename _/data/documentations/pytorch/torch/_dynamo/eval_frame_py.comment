['text':' mypy: disable-error-code="method-assign"','line_number':1,'multiline':False]['text':' noqa: F401','line_number':56,'multiline':False]['text':' See https://github.com/python/typing/pull/240','line_number':88,'multiline':False]['text':' callback is False for RunOnlyContext. RunOnlyContext is used','line_number':123,'multiline':False]['text':' as a way to re-use the previous compiled cache.','line_number':124,'multiline':False]['text':' We therefore skip the check and re-use whatever code that's already cached.','line_number':125,'multiline':False]['text':' Note: the cache that's actually used depends on the caching policy.','line_number':126,'multiline':False]['text':' Mapping id of a CompilerFn to itself','line_number':140,'multiline':False]['text':' For tracing into fx modules','line_number':152,'multiline':False]['text':' Installs the params/buffer','line_number':186,'multiline':False]['text':' Do this stuff in constructor to lower overhead slightly','line_number':192,'multiline':False]['text':' This may be a torch.nn.* instance in skipfiles.py which','line_number':196,'multiline':False]['text':' won't trigger a frame evaluation workaround to add an extra','line_number':197,'multiline':False]['text':' frame we can capture','line_number':198,'multiline':False]['text':' Invoke hooks outside of dynamo then pickup the inner frame','line_number':201,'multiline':False]['text':' In the case of a lazy module, we want to run','line_number':225,'multiline':False]['text':' the pre-hooks which initialize it.','line_number':226,'multiline':False]['text':' Afterwards, lazy module deletes its pre-hooks','line_number':227,'multiline':False]['text':' to avoid treating it as lazy on subsequent recompile.','line_number':228,'multiline':False]['text':' we strip away the '_orig_mod' prefix for backward-compatibility with old checkpoints','line_number':244,'multiline':False]['text':' type: ignore[attr-defined]','line_number':266,'multiline':False]['text':' Assume everything is dynamic by default','line_number':294,'multiline':False]['text':' TODO: This is totally not the right way to chain contexts manually','line_number':349,'multiline':False]['text':' public api for compiler config/options','line_number':355,'multiline':False]['text':' add context containing GraphModule to any GraphModule forward functions','line_number':361,'multiline':False]['text':' Assume that the underlying node metadata of `fn`,','line_number':363,'multiline':False]['text':' a GraphModule instance, accurately represents','line_number':364,'multiline':False]['text':' all instances of type(fn).','line_number':365,'multiline':False]['text':' Optimize the forward method of torch.nn.Module object','line_number':368,'multiline':False]['text':' Save the function pointer to find the original callable while nesting','line_number':372,'multiline':False]['text':' of decorators.','line_number':373,'multiline':False]['text':' when compiling torch.nn.Module,','line_number':376,'multiline':False]['text':' provide public api OptimizedModule.get_compiler_config()','line_number':377,'multiline':False]['text':' call to a builtin without a frame for us to capture','line_number':395,'multiline':False]['text':' hooks to properly handle inlining','line_number':441,'multiline':False]['text':' type: ignore[attr-defined]','line_number':443,'multiline':False]['text':' type: ignore[attr-defined]','line_number':445,'multiline':False]['text':' Save the function pointer to find the original callable while nesting','line_number':447,'multiline':False]['text':' of decorators.','line_number':448,'multiline':False]['text':' type: ignore[attr-defined]','line_number':449,'multiline':False]['text':' when compiling user function instead of nn.Module','line_number':451,'multiline':False]['text':' provide public api _fn.get_compiler_config()','line_number':452,'multiline':False]['text':' type: ignore[attr-defined]','line_number':454,'multiline':False]['text':' If the function is called using torch._dynamo.optimize decorator, we','line_number':456,'multiline':False]['text':' should prevent any type of skipping.','line_number':457,'multiline':False]['text':' cudagraph trees relies on generation increment','line_number':526,'multiline':False]['text':' TODO: the first condition is not covered by any test','line_number':554,'multiline':False]['text':' nametuple constructor','line_number':576,'multiline':False]['text':' type: ignore[attr-defined]','line_number':599,'multiline':False]['text':' type: ignore[type-arg]','line_number':634,'multiline':False]['text':' Note: The hooks object could be global instead of passed around, *however* that would make','line_number':691,'multiline':False]['text':' for a confusing API usage and plumbing story wherein we nest multiple .optimize calls.','line_number':692,'multiline':False]['text':' There is some prior art around this, w/r/t nesting backend calls are enforced to be the same','line_number':693,'multiline':False]['text':' compiler, however, this feels onerous for callback and hooks, and it feels better to give our users an','line_number':694,'multiline':False]['text':' easier to understand UX at the cost of a little more plumbing on our end.','line_number':695,'multiline':False]['text':' Find if backend has any extra context manager','line_number':703,'multiline':False]['text':' TODO(voz): Consider making "explain" output alongside a run / part of a run','line_number':723,'multiline':False]['text':' TODO(voz): Do we want a decorator for this?','line_number':727,'multiline':False]['text':' type: ignore[attr-defined]','line_number':728,'multiline':False]['text':' TODO(voz): We may have instances of `f` that mutate inputs, we should track sideeffects and reject.','line_number':763,'multiline':False]['text':' For the explanation summary, dedupe reasons by the innermost stack frame and dedupe by it.','line_number':768,'multiline':False]['text':' __repr__ uniquely identifies a FrameSummary so we can use it for deduping','line_number':772,'multiline':False]['text':' TODO(voz): Do we want a decorator for this?','line_number':784,'multiline':False]['text':' Fill node.mata["val"] with faketensor from the input,','line_number':835,'multiline':False]['text':' if it's not found in matched_input_elements_positions','line_number':836,'multiline':False]['text':' TODO(zhxchen17) Also preserve all the user constraints here.','line_number':838,'multiline':False]['text':' NB: Do not add new fields without overriding __iter__; people are','line_number':890,'multiline':False]['text':' destructuring so it is BC-breaking','line_number':891,'multiline':False]['text':' In some cases we may not have a useful stack.  Look for a','line_number':904,'multiline':False]['text':' useful stack','line_number':905,'multiline':False]['text':' TODO: option to print ALL of the stack traces at once','line_number':920,'multiline':False]['text':' Make dynamo graph to have same input/output spec as user code','line_number':1014,'multiline':False]['text':' Get a list of Parameter objects from the Signature object','line_number':1017,'multiline':False]['text':' Separate positional arguments, keyword-only arguments and varargs/varkw','line_number':1019,'multiline':False]['text':' Get default values for positional arguments and keyword-only arguments','line_number':1036,'multiline':False]['text':' Get annotations for parameters and return value','line_number':1049,'multiline':False]['text':' Return a FullArgSpec object with the extracted attributes','line_number':1055,'multiline':False]['text':' 1. Map `args` 1-to-1 to positional arguments in original signature.','line_number':1062,'multiline':False]['text':' 2. If there are more arguments left in `args`, they map to varargs in original','line_number':1066,'multiline':False]['text':' signature. Assign names as {varargs}_0, {varargs}_1, ...','line_number':1067,'multiline':False]['text':' 3. If there are fewer arguments in `args` than `fullargspec.args`,','line_number':1074,'multiline':False]['text':' it implies these are arguments either with default values, or provided in','line_number':1075,'multiline':False]['text':' `kwargs`. The former can be safely ignored. Because Dynamo.export does not','line_number':1076,'multiline':False]['text':' export them as part of the function signature. The latter will be handled','line_number':1077,'multiline':False]['text':' in the next step.','line_number':1078,'multiline':False]['text':' 4. Keyword arguments provided in `kwargs`.','line_number':1084,'multiline':False]['text':' 5. Keyword-only arguments with default values if not provided are not exported','line_number':1087,'multiline':False]['text':' as part of the function signature.','line_number':1088,'multiline':False]['text':' Deal with "local variable referenced before assignment"','line_number':1161,'multiline':False]['text':' NB: do NOT pass inner_example_inputs here, we are detecting the','line_number':1204,'multiline':False]['text':' Dynamo allocated fake mode, which should be DISTINCT from a','line_number':1205,'multiline':False]['text':' potential outer ambient fake mode which the user provided.','line_number':1206,'multiline':False]['text':' example_inputs is always the user specified inputs, so they','line_number':1207,'multiline':False]['text':' would have the wrong fake mode attached to them','line_number':1208,'multiline':False]['text':' Note: This is needed by rewrite_signature. We need to put it before','line_number':1251,'multiline':False]['text':' optimize_assert since user program may mutate the inputs.','line_number':1252,'multiline':False]['text':' TODO(voz): We may have instances of `f` that mutate inputs, we should track sideeffects and reject.','line_number':1275,'multiline':False]['text':' Error if we have any constraints on static values','line_number':1307,'multiline':False]['text':' This check need to happened before aten_graph','line_number':1326,'multiline':False]['text':' because placeholder's _source_node attribute is not preserved by make_fx','line_number':1327,'multiline':False]['text':' NB: This is mostly hitting the cache; Dynamo already converted these','line_number':1331,'multiline':False]['text':' Running graph with interpreter is needed for propagating the stack_trace','line_number':1335,'multiline':False]['text':' Wrap the internal error to the user-facing error','line_number':1353,'multiline':False]['text':' noqa: TRY200','line_number':1354,'multiline':False]['text':' Store constraints and inputs as metadata for user passes, e.g. turn constraints to runtime check','line_number':1385,'multiline':False]['text':' Find if backend has any extra context manager','line_number':1418,'multiline':False]['text':' A better way to disable the following would be decorate the source','line_number':1436,'multiline':False]['text':' functions with @torch._disable_dynamo. However, this causes issues','line_number':1437,'multiline':False]['text':' with torch.deploy internally.','line_number':1438,'multiline':False]['text':' data-dependent control flow','line_number':1483,'multiline':False]['text':' for now, until we can speed up compilation (this affects the benchmarks)','line_number':1484,'multiline':False]['text':' Note: we don't support sparsity, data-dependent control, or tracing through backwards','line_number':1512,'multiline':False]['text':' disable any currently set hooks','line_number':1525,'multiline':False]['text':' Note: we only want to disable the profiling hook','line_number':1526,'multiline':False]['text':' which is the *last* hook applied, we want to keep the no_grad hook','line_number':1527,'multiline':False]['text':' disable future hooking','line_number':1534,'multiline':False]['text':' type: ignore[attr-defined]','line_number':1535,'multiline':False]