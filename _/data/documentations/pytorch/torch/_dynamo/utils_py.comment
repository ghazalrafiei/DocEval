['text':' type: ignore[assignment]','line_number':53,'multiline':False]['text':' noqa: F401n','line_number':58,'multiline':False]['text':' NOTE: Make sure `NP_SUPPORTED_MODULES` and `NP_TO_TNP_MODULE` are in sync.','line_number':62,'multiline':False]['text':' profiling compilation time by function','line_number':103,'multiline':False]['text':' profiling compilation time by frame phase','line_number':106,'multiline':False]['text':' Note: Called for you by dynamo - you almost never ever want to invoke this yourself.','line_number':169,'multiline':False]['text':' Note: Called for you by dynamo - you almost never ever want to invoke this yourself.','line_number':175,'multiline':False]['text':' Print a report of time spent so far','line_number':191,'multiline':False]['text':' Ex:','line_number':192,'multiline':False]['text':' TIMING:','line_number':193,'multiline':False]['text':' entire_frame_compile:8.574629999999999','line_number':194,'multiline':False]['text':' backend_compile:5.26806','line_number':195,'multiline':False]['text':' dynamo_timed API works as a function decorator','line_number':214,'multiline':False]['text':' By wrapping a function in dynamo_timed, we can store a record in compilation_time_metrics','line_number':215,'multiline':False]['text':' where the key is the functions name.','line_number':216,'multiline':False]['text':' For example:','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':'  @dynamo_timed','line_number':219,'multiline':False]['text':'  def _foo(...):','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':' Would show up as an entry in our timing dict:','line_number':222,'multiline':False]['text':' OrderedDict([('bar.<locals>._foo', [0.083690, 0.23949, 3.1425e-05])])','line_number':223,'multiline':False]['text':' This is extremely useful for granular debugging.','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' For a higher-level mode, pass a phase_name into dynamo_timed','line_number':226,'multiline':False]['text':' phase_names record an extra record into a separate compilation timing structure,','line_number':227,'multiline':False]['text':' one keyed on frame+name rather than function.','line_number':228,'multiline':False]['text':' The frame is incremented outside of this function, in def increment_frame() above.','line_number':229,'multiline':False]['text':' this is off by default','line_number':350,'multiline':False]['text':' _Final catches most of typing classes:','line_number':471,'multiline':False]['text':'   - Any','line_number':472,'multiline':False]['text':'   - Callable','line_number':473,'multiline':False]['text':'   - Union','line_number':474,'multiline':False]['text':'   ...','line_number':475,'multiline':False]['text':'','line_number':476,'multiline':False]['text':' NB: we intentionally ignore classes that inherit from Generic, since they','line_number':477,'multiline':False]['text':' can be used as both TypingVariable as well as UserDefinedClassVariable.','line_number':478,'multiline':False]['text':' type: ignore[attr-defined]','line_number':479,'multiline':False]['text':' TODO: this is questionable','line_number':641,'multiline':False]['text':' this func fails on fake tensors in __torch_dispatch__','line_number':643,'multiline':False]['text':' type: ignore[attr-defined]','line_number':653,'multiline':False]['text':' Access data_ptr() for a xla tensor will cause crash','line_number':658,'multiline':False]['text':' RuntimeError: unsupported operation: more than one element of the written-to','line_number':681,'multiline':False]['text':' tensor refers to a single memory location. Please clone() the tensor before','line_number':682,'multiline':False]['text':' performing the operation.','line_number':683,'multiline':False]['text':' type: ignore[attr-defined]','line_number':686,'multiline':False]['text':' already done?','line_number':738,'multiline':False]['text':' normal namedtuples','line_number':788,'multiline':False]['text':' frustrating ones e.g. torch.return_types.max','line_number':795,'multiline':False]['text':' This is because SymNodeVariable intentionally doesn't define','line_number':882,'multiline':False]['text':' as_python_constant to avoid shunting down some codepaths','line_number':883,'multiline':False]['text':' that expect consts.   In this case, we know we definitely','line_number':884,'multiline':False]['text':' want to specialize though.','line_number':885,'multiline':False]['text':' type: ignore[attr-defined]','line_number':925,'multiline':False]['text':' enum class can override __str__ method. Use __class__ and name attribute','line_number':948,'multiline':False]['text':' to extract the class name and key name.','line_number':949,'multiline':False]['text':' Match of Tensor means match of FakeTensor','line_number':985,'multiline':False]['text':' Object equivalence','line_number':992,'multiline':False]['text':' To workaround repr(Enum) returning invalid global reference before python 3.11','line_number':1021,'multiline':False]['text':' by calling enum_repr and removing quotes to render enum in guard code.','line_number':1022,'multiline':False]['text':' noqa: F401','line_number':1035,'multiline':False]['text':' triton stores bool as int8, so add this for more accurate checking','line_number':1143,'multiline':False]['text':' early exit that handles zero/nan better','line_number':1159,'multiline':False]['text':' cosine_similarity(zeros(10), zeros(10), dim=0) is 0','line_number':1160,'multiline':False]['text':' First try usual allclose','line_number':1170,'multiline':False]['text':' Check error from fp64 version','line_number':1174,'multiline':False]['text':' ref unable to produce this with stable numerics in this precision, ignore','line_number':1177,'multiline':False]['text':' In the case of using AMP (Automatic Mixed Precision), certain models have','line_number':1185,'multiline':False]['text':' failed the benchmark's correctness check. However, the end-to-end model's','line_number':1186,'multiline':False]['text':' accuracy when comparing AMP with FP32 is within a difference of less than 0.1%.','line_number':1187,'multiline':False]['text':' Thus, it's possible that the correctness check failures for these models are','line_number':1188,'multiline':False]['text':' false alarms. We use multiplier of 3 instead of 2 to avoid these false alarms.','line_number':1189,'multiline':False]['text':' large tol means a benchmark has been specified as REQUIRE_HIGHER_TOLERANCE','line_number':1195,'multiline':False]['text':' In the presence of noise, noise might dominate our error','line_number':1198,'multiline':False]['text':' metric for smaller tensors.','line_number':1199,'multiline':False]['text':' Similary, for 1x1 kernels, there seems to be high noise with amp.','line_number':1200,'multiline':False]['text':' import pdb; pdb.set_trace()','line_number':1211,'multiline':False]['text':' map from transformed code back to original user code','line_number':1300,'multiline':False]['text':' keep a record of code_obj -> list of guard failure reasons for logging','line_number':1303,'multiline':False]['text':' Keep a record of graph break reasons for logging','line_number':1306,'multiline':False]['text':' keep record of compiled code, if we are in "error if recompile"','line_number':1309,'multiline':False]['text':' to track code that dynamo has compiled previously','line_number':1310,'multiline':False]['text':' no-op __enter__ and __exit__ to preserve BC','line_number':1335,'multiline':False]['text':' return same dir unless user changes config between calls','line_number':1412,'multiline':False]['text':' use pid to avoid conflicts among ranks','line_number':1418,'multiline':False]['text':' FX Node should always return the same fake value','line_number':1476,'multiline':False]['text':' If the first argument is nn.Module, should copy to fake mode.','line_number':1484,'multiline':False]['text':' In the case of a lazy module, we want to run','line_number':1491,'multiline':False]['text':' the pre-hooks which initialize it.','line_number':1492,'multiline':False]['text':' Afterwards, lazy module deletes its pre-hooks','line_number':1493,'multiline':False]['text':' to avoid treating it as lazy on subsequent recompile.','line_number':1494,'multiline':False]['text':' no matter it's lazy module or not, we should copy to fake mode.','line_number':1497,'multiline':False]['text':' noqa: TRY200','line_number':1531,'multiline':False]['text':' NB: mimic how wrap_fake_exception does it','line_number':1599,'multiline':False]['text':' In the case of a lazy module, we want to run','line_number':1635,'multiline':False]['text':' the pre-hooks which initialize it','line_number':1636,'multiline':False]['text':' ignore this case of getattr','line_number':1711,'multiline':False]['text':' TODO: Check that this is installed','line_number':1780,'multiline':False]['text':' Lazy import to avoid circular dependencies','line_number':1984,'multiline':False]['text':' TODO - This is a temporary situation where we have two versions of','line_number':1994,'multiline':False]['text':' checkpointing implementation. We will converge on one and remove the other.','line_number':1995,'multiline':False]['text':' The following 3.11 source code functions are adapted from','line_number':2023,'multiline':False]['text':' https://github.com/python/cpython/blob/v3.11.4/Lib/traceback.py','line_number':2024,'multiline':False]['text':' in order to output source code corresponding to bytecode in 3.11+.','line_number':2025,'multiline':False]['text':' We need our own versions since we want to support multiline expressions.','line_number':2026,'multiline':False]['text':' inclusive','line_number':2041,'multiline':False]['text':' exclusive','line_number':2045,'multiline':False]['text':' Without brackets, `segment` is parsed as a statement.','line_number':2062,'multiline':False]['text':' We expect an expression, so wrap `segment` in','line_number':2063,'multiline':False]['text':' brackets to handle multi-line expressions.','line_number':2064,'multiline':False]['text':' get character index given byte offset','line_number':2074,'multiline':False]['text':' Gets the next valid character index in `lines`, if','line_number':2078,'multiline':False]['text':' the current location is not valid. Handles empty lines.','line_number':2079,'multiline':False]['text':' Get the next valid character index in `lines`.','line_number':2087,'multiline':False]['text':' Get the next valid character at least on the next line','line_number':2094,'multiline':False]['text':' ast gives locations for BinOp subexpressions, e.g.','line_number':2106,'multiline':False]['text':' ( left_expr ) + ( right_expr )','line_number':2107,'multiline':False]['text':'   left^^^^^       right^^^^^','line_number':2108,'multiline':False]['text':' -2 since end_lineno is 1-indexed and because we added an extra','line_number':2109,'multiline':False]['text':' bracket to `segment` when calling ast.parse','line_number':2110,'multiline':False]['text':' Heuristic to find the operator character.','line_number':2115,'multiline':False]['text':' The original CPython implementation did not look for ), \, or #,','line_number':2116,'multiline':False]['text':' leading to incorrect anchor location, e.g.','line_number':2117,'multiline':False]['text':' (x) + (y)','line_number':2118,'multiline':False]['text':' ~~^~~~~~~','line_number':2119,'multiline':False]['text':' binary op is 1 or 2 characters long, on the same line','line_number':2126,'multiline':False]['text':' right_col can be invalid since it is exclusive','line_number':2134,'multiline':False]['text':' ast gives locations for value and slice subexpressions, e.g.','line_number':2138,'multiline':False]['text':' ( value_expr ) [ slice_expr ]','line_number':2139,'multiline':False]['text':'   value^^^^^     slice^^^^^','line_number':2140,'multiline':False]['text':' subscript^^^^^^^^^^^^^^^^^^^^','line_number':2141,'multiline':False]['text':' find left bracket (first '[' after value)','line_number':2142,'multiline':False]['text':' find right bracket (final character of expression)','line_number':2148,'multiline':False]['text':' ( func_expr ) (args, kwargs)','line_number':2153,'multiline':False]['text':'   func^^^^^','line_number':2154,'multiline':False]['text':' call^^^^^^^^^^^^^^^^^^^^^^^^','line_number':2155,'multiline':False]['text':' find left bracket (first '(' after func)','line_number':2156,'multiline':False]['text':' find right bracket (final character of expression)','line_number':2162,'multiline':False]['text':' The rstrip + "\n" pattern is used throughout this function to handle','line_number':2188,'multiline':False]['text':' linecache.getline errors. Error lines are treated as empty strings "", but we want','line_number':2189,'multiline':False]['text':' to treat them as blank lines "\n".','line_number':2190,'multiline':False]['text':' character index of the start of the instruction','line_number':2197,'multiline':False]['text':' character index of the end of the instruction','line_number':2199,'multiline':False]['text':' compute later since end may be a different line','line_number':2200,'multiline':False]['text':' expression corresponding to the instruction so we can get anchors','line_number':2202,'multiline':False]['text':' underline markers to be printed - start with `~` marker and replace with `^` later','line_number':2204,'multiline':False]['text':' Compute segment and initial markers','line_number':2207,'multiline':False]['text':' don't underline leading spaces','line_number':2222,'multiline':False]['text':' replace `~` markers with `^` where necessary','line_number':2235,'multiline':False]['text':' make markers mutable','line_number':2239,'multiline':False]['text':' anchor positions do not take start_offset into account','line_number':2242,'multiline':False]['text':' Turn `~`` markers between anchors to `^`','line_number':2248,'multiline':False]['text':' make markers into strings again','line_number':2265,'multiline':False]['text':' The following two functions are not identical, so don't remove anyone!','line_number':2287,'multiline':False]['text':' type: ignore[attr-defined]','line_number':2306,'multiline':False]['text':' see note [Tensor Fakification and Symbol Caching]','line_number':2324,'multiline':False]