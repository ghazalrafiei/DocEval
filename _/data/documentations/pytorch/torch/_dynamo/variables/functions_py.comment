['text':' Source propagation is best effort since not every object we encounter has a source to begin with.','line_number':18,'multiline':False]['text':' args/kwargs','line_number':34,'multiline':False]['text':' for name in itertools.chain(code.co_cellvars, code.co_freevars):','line_number':42,'multiline':False]['text':' TypeError: __annotations__ must be set to a dict object','line_number':64,'multiline':False]['text':' This method should be treated as a constant for the purposes of compilation','line_number':98,'multiline':False]['text':' unpack @torch._dynamo.optimize()(fn) wrapped function','line_number':106,'multiline':False]['text':' unpack torch.jit.script_if_tracing','line_number':108,'multiline':False]['text':' optimization for cleaner codegen','line_number':186,'multiline':False]['text':' Cell has not yet been assigned','line_number':206,'multiline':False]['text':' Optimistically don't allocate the cell, to','line_number':213,'multiline':False]['text':' reduce the number of side effects.  This is','line_number':214,'multiline':False]['text':' important for cond, as without it, any accesses','line_number':215,'multiline':False]['text':' to closures create side effects and cond doesn't','line_number':216,'multiline':False]['text':' support side effects.  If we're wrong and this','line_number':217,'multiline':False]['text':' closure cell gets written to, we will restart','line_number':218,'multiline':False]['text':' the analysis with this cell's name in the','line_number':219,'multiline':False]['text':' mutated list here','line_number':220,'multiline':False]['text':' cells are written to with "cell_contents",','line_number':224,'multiline':False]['text':' so the source should just be the closure_cell, not its contents','line_number':225,'multiline':False]['text':' For nn.Module methods, redirecting to NNModuleVariable.call_method for optimized solution','line_number':274,'multiline':False]['text':' rather than simple inlining. E.g, putting `call_method` op in FX graph for `forward` method','line_number':275,'multiline':False]['text':' since we ensure `forward` of allowed modules can be traced by AOT safely.','line_number':276,'multiline':False]['text':' Note this is not only for allowed modules, as user customized modules can extend from','line_number':277,'multiline':False]['text':' allowed modules but using parent's `forward` method, which is also covered by this branch.','line_number':278,'multiline':False]['text':' If we are tracing the higher order op, we want Dynamo to step inside','line_number':280,'multiline':False]['text':' the module call so that Dynamo can see the underlying parameters and','line_number':281,'multiline':False]['text':' buffers and raise them as inputs to the graph. The is_root_tracer','line_number':282,'multiline':False]['text':' check bypasses the if condition for non-root tracers and directly','line_number':283,'multiline':False]['text':' calls the super().call_function at the end, which is basically','line_number':284,'multiline':False]['text':' equivalent of inlining the method.','line_number':285,'multiline':False]['text':' Either a source or a VT with .can_reconstruct() == True','line_number':388,'multiline':False]['text':' TypeError: __annotations__ must be set to a dict object','line_number':418,'multiline':False]['text':' InlinedClosureVariable's are created from LOAD_CLOSURE's from','line_number':456,'multiline':False]['text':' InliningInstructionTranslators when the variable name is not found in closure_cells.','line_number':457,'multiline':False]['text':' They should remain outside of closure_cells, so that our callee (the','line_number':458,'multiline':False]['text':' InliningInstructionTranslator that traces `func`) handles','line_number':459,'multiline':False]['text':' the cell correctly - that is, the cell's contents are treated as if they','line_number':460,'multiline':False]['text':' are local variables, like in UserFunctionVariable's bind_args for freevars.','line_number':461,'multiline':False]['text':' We can't rely on importing from distributed, since it's not always built','line_number':532,'multiline':False]['text':' call_function must check any unsupported arguments and graph-break.','line_number':596,'multiline':False]['text':' It's safe to assume args/kwargs from orig_fn map 1:1 to args/kwargs of remapped_fn,','line_number':597,'multiline':False]['text':' since that's the contract for putting a mapping in `traceable_collective_remaps`','line_number':598,'multiline':False]['text':' We only support configs and keys arguments of triton.autotune','line_number':659,'multiline':False]['text':' Make sure other arguments are defaulted','line_number':660,'multiline':False]['text':' Both for grid's meta as well as for the kernel, we need combined','line_number':687,'multiline':False]['text':' args and kwargs normalized','line_number':688,'multiline':False]['text':' If the grid is a function, then lets execute it and convert it to','line_number':698,'multiline':False]['text':' a list','line_number':699,'multiline':False]['text':' Populate the special "meta" argument to call the grid function','line_number':702,'multiline':False]['text':' Now, the grid must be a list either originally or through above','line_number':709,'multiline':False]['text':' modification','line_number':710,'multiline':False]['text':' inductor expects all grids to be 3-tuple so lets make it','line_number':719,'multiline':False]['text':' If there's only one unique grid, lets simplify','line_number':729,'multiline':False]['text':' Combine args and kwargs and pass as a dict so that if user defined triton','line_number':736,'multiline':False]['text':' kernel uses variables as 'grid' or 'kernel', it does not conflict with','line_number':737,'multiline':False]['text':' parameters of the wrapper function','line_number':738,'multiline':False]['text':' __getitem__ should only be called if we don't already have a grid','line_number':763,'multiline':False]['text':' Only grid needs to be passed','line_number':764,'multiline':False]['text':' rewrite kernel.run(*args, grid=grid) to kernel[grid](*args)','line_number':779,'multiline':False]['text':' Bail out to parent's implementation','line_number':784,'multiline':False]