['text':'!/usr/bin/env python3','line_number':1,'multiline':False]['text':' Copyright (c) Facebook, Inc. and its affiliates.','line_number':3,'multiline':False]['text':' All rights reserved.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This source code is licensed under the BSD-style license found in the','line_number':6,'multiline':False]['text':' LICENSE file in the root directory of this source tree.','line_number':7,'multiline':False]['text':' type: ignore[import]','line_number':16,'multiline':False]['text':' Retryable failure exception means the we were too late to make','line_number':39,'multiline':False]['text':' a desired state transition (e.g. because of a race condition),','line_number':40,'multiline':False]['text':' and should now restart from the beginning.','line_number':41,'multiline':False]['text':' A small delay is recommended to avoid spamming Etcd.','line_number':42,'multiline':False]['text':' Similar to retryable failure, but the new state we observed suggests we','line_number':47,'multiline':False]['text':' can re-try immediately, i.e. without a need for "safety delay".','line_number':48,'multiline':False]['text':' Default timeout for the rendezvous.','line_number':53,'multiline':False]['text':' 10 minutes','line_number':54,'multiline':False]['text':' Additional waiting time after reaching the minimum number of nodes','line_number':56,'multiline':False]['text':' in case the rendezvous is elastic (min != max).','line_number':57,'multiline':False]['text':' 30 seconds','line_number':58,'multiline':False]['text':' Various constants used internally in EtcdRendezvous','line_number':60,'multiline':False]['text':' Ephemeral node TTL for worker's keep-alive key:','line_number':65,'multiline':False]['text':' TTL for the ephemeral run_id-specific directory. All rendezvous state data','line_number':68,'multiline':False]['text':' for a specific run_id (job instance) is contained within directory.','line_number':69,'multiline':False]['text':' Its only role is to clean-up rendezvous data from old runs (for the case when','line_number':70,'multiline':False]['text':' etcd server is persistent), and has no affect on correctness, but should be','line_number':71,'multiline':False]['text':' larger than any timeouts that a worker process is expected to survive:','line_number':72,'multiline':False]['text':' 2 hours','line_number':73,'multiline':False]['text':' TODO: look into using weakref here instead.','line_number':144,'multiline':False]['text':' No rendezvous state, so it cannot be closed.','line_number':163,'multiline':False]['text':' TODO: we should probably handle a few additional errors,','line_number':190,'multiline':False]['text':' like EtcdLeaderElectionInProgress and EtcdWatcherCleared. These are','line_number':191,'multiline':False]['text':' only relevant for multi-node Etcd ensemble. A simple retry would work,','line_number':192,'multiline':False]['text':' but is verbose to add everywhere. Consider wrapping the client calls','line_number':193,'multiline':False]['text':' into auto-retry for these errors?','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':' For cleaning up TTL refresher threads (for ephemeral keys)','line_number':219,'multiline':False]['text':' Setup a permanent prefix dir, if didn't exist','line_number':226,'multiline':False]['text':' Lease a "sub-root" node specific to this job instance (run_id)','line_number':230,'multiline':False]['text':' Subdir for all rendezvous work','line_number':236,'multiline':False]['text':' Create a rendezvous version counter, if doesn't exist','line_number':239,'multiline':False]['text':' TODO: look into using weakref here instead.','line_number':248,'multiline':False]['text':' Dis-own our lease in the previous rendezvous, if exists','line_number':277,'multiline':False]['text':' The type of failure suggests we can retry without delay','line_number':284,'multiline':False]['text':' In case of retryable failure, wait a small delay','line_number':288,'multiline':False]['text':' to avoid spamming etcd','line_number':289,'multiline':False]['text':' In case of a general exception, wait a small delay','line_number':306,'multiline':False]['text':' to avoid spamming etcd','line_number':307,'multiline':False]['text':' FIXME: there are a few things that fall under this like','line_number':308,'multiline':False]['text':' etcd.EtcdKeyNotFound, etc, which could be handled more explicitly.','line_number':309,'multiline':False]['text':' Note: it is possible for above query to fail (etcd.EtcdKeyNotFound),','line_number':338,'multiline':False]['text':' but this is ok for us - just means we'll restart from beginning.','line_number':339,'multiline':False]['text':' Failure to join will propagate an exception, causing a re-entry.','line_number':360,'multiline':False]['text':' If this worker was first to reach num_min_workers requirement,','line_number':368,'multiline':False]['text':' and rendezvous is still joinable (therefore it is elastic),','line_number':369,'multiline':False]['text':' then this worker will be responsible for waiting out the "last call"','line_number':370,'multiline':False]['text':' timeout and closing (i.e. transitioning to 'frozen') the rendezvous','line_number':371,'multiline':False]['text':' afterwards.','line_number':372,'multiline':False]['text':' As a safety against a potential failure of this worker (during the','line_number':373,'multiline':False]['text':' last call timeout), the rendezvous state is made ephemeral','line_number':374,'multiline':False]['text':' when min_num_workers is reached.','line_number':375,'multiline':False]['text':' Wait for rendezvous state to be frozen, which means a fixed set of peers','line_number':383,'multiline':False]['text':' Rendezvous version number; our rank in it; world size','line_number':413,'multiline':False]['text':' If state is 'final' -> increment num_workers_waiting','line_number':422,'multiline':False]['text':' Then, observe state changes:','line_number':423,'multiline':False]['text':'   1. if it's no longer final -> bail out and re-try','line_number':424,'multiline':False]['text':'   2. if keep alives are missing, destroy it and bail out.','line_number':425,'multiline':False]['text':' Initially active_version is ephemeral - this is to handle the','line_number':442,'multiline':False]['text':' possibility that might fail to complete the setup transaction,','line_number':443,'multiline':False]['text':' i.e. the transition "setup" -> "joinable".','line_number':444,'multiline':False]['text':' Any failure below results in declaring a retryable rendezvous failure.','line_number':461,'multiline':False]['text':' The ephemeral /rdzv/active_version will expire and someone can then','line_number':462,'multiline':False]['text':' re-try the setup process.','line_number':463,'multiline':False]['text':' Create directory node for participant data','line_number':465,'multiline':False]['text':' Publish rendezvous version and signal it is ready-to-be-joined.','line_number':473,'multiline':False]['text':' If rendezvous was set closed just before this, a retry will happen,','line_number':474,'multiline':False]['text':' where the closed condition will be handled.','line_number':475,'multiline':False]['text':' Use compare-and-swap to add self to rendezvous state:','line_number':490,'multiline':False]['text':' When reaching min workers, or changing state to frozen, we'll set','line_number':513,'multiline':False]['text':' the active_version node to be ephemeral.','line_number':514,'multiline':False]['text':' Compare-and-swap.','line_number':524,'multiline':False]['text':' We succeeded joining.','line_number':531,'multiline':False]['text':' Success, all peers arrived.','line_number':542,'multiline':False]['text':' Continue waiting for any interesting events.','line_number':546,'multiline':False]['text':' No valid transition possible at this point','line_number':552,'multiline':False]['text':' Compare-and-swap loop','line_number':559,'multiline':False]['text':' Everyone confirmed (this rank is last to do so)','line_number':581,'multiline':False]['text':' Compare-and-swap. If new state is still frozen, keep it ephemeral.','line_number':589,'multiline':False]['text':' Success. This rendezvous is final, and we accept it.','line_number':610,'multiline':False]['text':' Continue waiting for any interesting events.','line_number':614,'multiline':False]['text':' No valid transition possible at this point','line_number':620,'multiline':False]['text':' Increment counter to signal an additional waiting worker.','line_number':637,'multiline':False]['text':' Check if current rendezvous state is valid, in the sense that all','line_number':666,'multiline':False]['text':' its members are alive (renewing their lease).','line_number':667,'multiline':False]['text':' If not, try destroy this rendezvous, so a new one can be created.','line_number':668,'multiline':False]['text':' This participant didn't renew their lease. We'll declare this','line_number':676,'multiline':False]['text':' rendezvous version as dead (but only if it hadn't changed)','line_number':677,'multiline':False]['text':' Compare-and-delete operation. Throws if compare failed,','line_number':685,'multiline':False]['text':' which means rendezvous was already destroyed/re-created/closed,','line_number':686,'multiline':False]['text':' and we can try to re-enter the barrier.','line_number':687,'multiline':False]['text':' We can return (and retry) immediately','line_number':698,'multiline':False]['text':' Existing rendezvous seems valid, no reason to destroy it.','line_number':701,'multiline':False]['text':' We just have to wait until something changes and re-check.','line_number':702,'multiline':False]['text':' Worker set became frozen before last-call timeout. This is possible','line_number':739,'multiline':False]['text':' when num_max_workers is reached before the timeout.','line_number':740,'multiline':False]['text':' If timeout occurred, attempt a state transition (joinable -> frozen)','line_number':748,'multiline':False]['text':' We successfully made this rendezvous frozen.','line_number':759,'multiline':False]['text':' Timeout did not occur, so we must refresh TTL, and wait for','line_number':767,'multiline':False]['text':' further changes. Note: we only want TTL to be refreshed if','line_number':768,'multiline':False]['text':' state is still joinable, hence we use CAS for that here,','line_number':769,'multiline':False]['text':' even though we don't change any of the data.','line_number':770,'multiline':False]['text':' Minimize "oversleeping":','line_number':779,'multiline':False]['text':' Oversleeping by 1s is ok.','line_number':782,'multiline':False]['text':' Already closed by someone else.','line_number':802,'multiline':False]['text':' Don't sleep past the overall deadline (at least more than by 1s)','line_number':823,'multiline':False]['text':' Unfortunately, we have to do another fetch in order to get last etcd_index.','line_number':837,'multiline':False]['text':' NOTE: For ephemeral key TTL renewal (~lease) to work correctly,','line_number':855,'multiline':False]['text':' make sure you don't call any long-blocking methods that do not','line_number':856,'multiline':False]['text':' release the Python's GIL! An example of this is calling a pybind11','line_number':857,'multiline':False]['text':' extension function that is blocking / long-running, but is not','line_number':858,'multiline':False]['text':' doing a scoped release of the GIL.','line_number':859,'multiline':False]['text':' This error usually occurs during test when the server already got terminated but the','line_number':867,'multiline':False]['text':' python garbage collector have not yet invoked the __del__ method.','line_number':868,'multiline':False]['text':' If first time we are storing anything:','line_number':887,'multiline':False]['text':' CAS loop, to make sure we don't lose concurrent stores.','line_number':895,'multiline':False]['text':' We never delete extra_data. Failure here should be fatal, no special handling.','line_number':897,'multiline':False]['text':' 'extra_data' node itself, and the directory it is located in:','line_number':915,'multiline':False]['text':' TODO: implement timeout','line_number':919,'multiline':False]['text':' https://github.com/pytorch/elastic/issues/12','line_number':920,'multiline':False]['text':' Combined wait for the node itself, and the key inside it.','line_number':922,'multiline':False]['text':' Find the extra_data node, if it exists','line_number':925,'multiline':False]['text':' Node for extra_data exists, check the desired key inside it.','line_number':929,'multiline':False]['text':' The 'extra_data' node doesn't exist, or they key isn't published yet.','line_number':935,'multiline':False]['text':' Wait for interesting events on the extra_data node and retry.','line_number':936,'multiline':False]['text':' The communication protocol','line_number':952,'multiline':False]['text':' The SSL client certificate','line_number':960,'multiline':False]['text':' The etcd client expects the certificate key as the second element','line_number':965,'multiline':False]['text':' of the `cert` tuple.','line_number':966,'multiline':False]['text':' The root certificate','line_number':969,'multiline':False]['text':' Handler for torch.distributed "static" registration','line_number':982,'multiline':False]