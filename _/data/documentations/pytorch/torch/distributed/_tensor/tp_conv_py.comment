['text':' Copyright (c) Meta Platforms, Inc. and affiliates','line_number':1,'multiline':False]['text':' implement matrix related ops for distributed tensor','line_number':2,'multiline':False]['text':' TODO: whether there requires data exchange is currently determined by padding','line_number':13,'multiline':False]['text':' dist comms and reconstruct local input tensor','line_number':39,'multiline':False]['text':' dist comms and aggregate gradients for edge pixels','line_number':67,'multiline':False]['text':' step 0 compute the overlap pixels of the input tensor','line_number':125,'multiline':False]['text':' step1 reconstruct local input tensor','line_number':133,'multiline':False]['text':' step2 feed local input tensor to op_call','line_number':138,'multiline':False]['text':' step3 remove extra ouputs from the results','line_number':144,'multiline':False]['text':' step 0 compute the overlap pixels of the input tensor','line_number':179,'multiline':False]['text':' step1 reconstruct local input tensor','line_number':187,'multiline':False]['text':' step2 reconstruct local gradient output tensor','line_number':192,'multiline':False]['text':' step3 feed local input tensor to op_call','line_number':208,'multiline':False]['text':' step4 aggregate gradients for edge pixels','line_number':215,'multiline':False]['text':' extract local tensor and sharding infos to a OpInfo','line_number':233,'multiline':False]['text':' sharding propagation','line_number':236,'multiline':False]['text':' local propagation','line_number':241,'multiline':False]['text':' Redistribute grad_output tensor to the same placement as input tensor','line_number':256,'multiline':False]['text':' extract local tensor and sharding infos to a OpInfo','line_number':262,'multiline':False]['text':' sharding propagation','line_number':265,'multiline':False]['text':' local propagation','line_number':270,'multiline':False]