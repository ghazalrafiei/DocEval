['text':' Create some useful type aliases','line_number':4,'multiline':False]['text':' Template for arguments which can be supplied as a tuple, or which can be a scalar which PyTorch will internally','line_number':6,'multiline':False]['text':' broadcast to a tuple.','line_number':7,'multiline':False]['text':' Comes in several variants: A tuple of unknown size, and a fixed-size tuple for 1d, 2d, or 3d operations.','line_number':8,'multiline':False]['text':' For arguments which represent size parameters (eg, kernel size, padding)','line_number':18,'multiline':False]['text':' For arguments which represent optional size parameters (eg, adaptive pool parameters)','line_number':27,'multiline':False]['text':' For arguments that represent a ratio to adjust each dimension of an input with (eg, upsampling parameters)','line_number':32,'multiline':False]['text':' For the return value of max pooling operations that may or may not return indices.','line_number':39,'multiline':False]['text':' With the proposed 'Literal' feature to Python typing, it might be possible to','line_number':40,'multiline':False]['text':' eventually eliminate this.','line_number':41,'multiline':False]