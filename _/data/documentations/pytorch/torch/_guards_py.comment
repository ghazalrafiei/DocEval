['text':' Import the following modules during type checking to enable code intelligence features,','line_number':38,'multiline':False]['text':' such as auto-completion in tools like pylance, even when these modules are not explicitly','line_number':39,'multiline':False]['text':' imported in user code.','line_number':40,'multiline':False]['text':' This id is per-frame, and counts how many times we've compiled this','line_number':55,'multiline':False]['text':' frame.  This could have been a global id but having this be per-frame','line_number':56,'multiline':False]['text':' gives you a better intuitive sense for how many recompiles have occurred','line_number':57,'multiline':False]['text':' so far.','line_number':58,'multiline':False]['text':' TODO: consider also tracking the recompilation count','line_number':60,'multiline':False]['text':' This starts off as 0, and every time we restart analysis it goes','line_number':68,'multiline':False]['text':' up by one','line_number':69,'multiline':False]['text':' originating_source is the source that called the make_guard method to','line_number':136,'multiline':False]['text':' construct this guard object. The property name specifies what exactly it','line_number':137,'multiline':False]['text':' is the guard is guarding on.  The meaning of the name is dependent on the','line_number':138,'multiline':False]['text':' create_fn; you must look at the use-site inside create_fn to know what','line_number':139,'multiline':False]['text':' name means.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' That being said, although you might think this is just a "name", name is','line_number':142,'multiline':False]['text':' usually an arbitrary Python expression that will be evaluated with all','line_number':143,'multiline':False]['text':' globals (and locals, if you create a LOCAL guard) to extract the Python','line_number':144,'multiline':False]['text':' object that we want to perform guard tests on.  This evaluation','line_number':145,'multiline':False]['text':' typically happens in GuardBuilder.eval.  In these cases, name is','line_number':146,'multiline':False]['text':' typically produced by originating_source.name() (not to be confused with','line_number':147,'multiline':False]['text':' GuardSource - the property source).','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Occasionally, name is not a valid Python expression; sometimes','line_number':150,'multiline':False]['text':' it is meaningless.  Example create_fns that are like this include','line_number':151,'multiline':False]['text':' GRAD_MODE and SHAPE_ENV.','line_number':152,'multiline':False]['text':' Export only. These values are written to at time of guard check_fn creation.','line_number':156,'multiline':False]['text':' Like a Set[Guard] but will record the user stack on all guards at the','line_number':466,'multiline':False]['text':' time they were installed at their destination','line_number':467,'multiline':False]['text':' Subtraction along with bool is typically used to determine the delta of','line_number':480,'multiline':False]['text':' added guards between checkpoints for higher order ops','line_number':481,'multiline':False]['text':' NB: "steals" the passed in state','line_number':512,'multiline':False]['text':' This is morally part of frame_summary_stack, but it is kept separate','line_number':596,'multiline':False]['text':' for clarity.  As we process a frame, this variable gets updated','line_number':597,'multiline':False]['text':' to keep track of what line we are in the function.  We make a','line_number':598,'multiline':False]['text':' function call, this gets cleared and the frame location is pushed','line_number':599,'multiline':False]['text':' to frame_summary_stack (prepping this variable for the inner frame's','line_number':600,'multiline':False]['text':' progress)','line_number':601,'multiline':False]['text':' this is only set after aot_autograd','line_number':603,'multiline':False]['text':' this is for extended return calling convention from backend','line_number':606,'multiline':False]['text':' compiler to aot_autograd','line_number':607,'multiline':False]['text':' Per output, what the compiler specified stride of the output is,','line_number':608,'multiline':False]['text':' or None if no stride is known.  This is always the HINT, it','line_number':609,'multiline':False]['text':' is never a SymInt (it would be better if it was a SymInt, but','line_number':610,'multiline':False]['text':' I can't conveniently get this from Inductor atm.  Also, be','line_number':611,'multiline':False]['text':' careful not to accidentally induce guards on the SymInt if','line_number':612,'multiline':False]['text':' you ever do change this in aot_autograd.py; you should check','line_number':613,'multiline':False]['text':' on permutations preferentially.)','line_number':614,'multiline':False]['text':' When this is True, whenever we encounter an int in Dynamo tracing,','line_number':616,'multiline':False]['text':' we will (1) force unspec it and (2) force it as a size-like unbacked','line_number':617,'multiline':False]['text':' integer.  This is currently used when processing certain lists of','line_number':618,'multiline':False]['text':' ints that are known to be size-like and may have 0/1 entries that we','line_number':619,'multiline':False]['text':' must not specialize on.','line_number':620,'multiline':False]['text':' See note [Tensor Fakification and Symbol Caching]','line_number':622,'multiline':False]['text':' KeyError on invalid entry','line_number':632,'multiline':False]['text':' Call this when you want to call into some code that isn't necessarily','line_number':652,'multiline':False]['text':' associated with the current frame state','line_number':653,'multiline':False]['text':' Prevent real_stack from getting attached','line_number':664,'multiline':False]['text':'','line_number':665,'multiline':False]['text':' The invariant is that if an Exception as real_stack, we've','line_number':666,'multiline':False]['text':' appropriately attached a user stack and we no longer need to','line_number':667,'multiline':False]['text':' attach anything. Because we cannot conveniently interpose','line_number':668,'multiline':False]['text':' when an exception is thrown, we instead interpose everywhere','line_number':669,'multiline':False]['text':' we set what the user stack is set (using the context','line_number':670,'multiline':False]['text':' manager). However, our compiler stack does "tail calls"','line_number':671,'multiline':False]['text':' (when it calls into user compiler), at which point the','line_number':672,'multiline':False]['text':' parent exception frames would incorrectly attach an','line_number':673,'multiline':False]['text':' incorrect frame.','line_number':674,'multiline':False]['text':'','line_number':675,'multiline':False]['text':' However, if, somehow, someone raised an exception with this','line_number':676,'multiline':False]['text':' scope that had a stack (for example, because they are','line_number':677,'multiline':False]['text':' restoring the user stack state appropriately as they process','line_number':678,'multiline':False]['text':' node by node), we should respect it. Thus, we cannot','line_number':679,'multiline':False]['text':' unconditionally set None.','line_number':680,'multiline':False]['text':' type: ignore[attr-defined]','line_number':682,'multiline':False]['text':' frame_summary can be None to solely take advantage of real_stack','line_number':688,'multiline':False]['text':' attachment to thrown exceptions','line_number':689,'multiline':False]['text':' type: ignore[attr-defined]','line_number':699,'multiline':False]['text':' type: ignore[attr-defined]','line_number':752,'multiline':False]['text':' Subclasses can be found in torch/_dynamo/source.py','line_number':764,'multiline':False]['text':' TODO(voz): Consider a toplevel torch/_source.py','line_number':765,'multiline':False]['text':' Subclasses can be found in torch/_dynamo/source.py','line_number':786,'multiline':False]