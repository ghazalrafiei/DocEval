['text':' We need to know the ROCm version so we can conditionalize some of the mappings later.','line_number':30,'multiline':False]['text':' As of ROCm 5.0, the version is found in rocm_version.h header file under /opt/rocm/include.','line_number':31,'multiline':False]['text':' Do not print warning. This is okay. This file can also be imported for non-ROCm builds.','line_number':38,'multiline':False]['text':' The file could be missing due to 1) ROCm version < 5.2, or 2) no ROCm install.','line_number':46,'multiline':False]['text':' List of math functions that should be replaced inside device code only.','line_number':64,'multiline':False]['text':' since pytorch uses "\b{pattern}\b" as the actual re pattern,','line_number':581,'multiline':False]['text':' patterns listed here have to begin and end with alnum chars','line_number':582,'multiline':False]['text':' PyTorch also has a source file named "nccl.h", so we need to "<"">" to differentiate','line_number':637,'multiline':False]['text':' ("warpSize", ("hipWarpSize", CONV_SPECIAL_FUNC, API_RUNTIME), (HIP actually uses warpSize...)),','line_number':4125,'multiline':False]['text':' The caffe2 directory does a string match; pytorch does a word-boundary match.','line_number':7845,'multiline':False]['text':' Patterns such as 'cub::' will not match for pytorch.','line_number':7846,'multiline':False]['text':' We list all current uses of cub symbols for this reason.','line_number':7847,'multiline':False]['text':' SPARSE','line_number':7890,'multiline':False]['text':' Unsupported ("cusparseMatDescr", ("hipsparseMatDescr", CONV_TYPE, API_SPECIAL)),','line_number':8041,'multiline':False]['text':' Unsupported ("cusparseDnMatDescr", ("hipsparseDnMatDescr", CONV_TYPE, API_SPECIAL)),','line_number':8042,'multiline':False]['text':' Unsupported ("cusparseDnVecDescr", ("hipsparseDnVecDescr", CONV_TYPE, API_SPECIAL)),','line_number':8043,'multiline':False]['text':' Unsupported ("cusparseSpMatDescr", ("hipsparseSpMatDescr", CONV_TYPE, API_SPECIAL)),','line_number':8044,'multiline':False]['text':' Unsupported ("cusparseSpGEMMDescr", ("hipsparseSpGEMMDescr", CONV_TYPE, API_SPECIAL)),','line_number':8045,'multiline':False]['text':' SOLVER','line_number':8133,'multiline':False]['text':' from aten/src/ATen/native/hip/linalg/HIPSolver.cpp','line_number':8176,'multiline':False]['text':' sytrf','line_number':8290,'multiline':False]['text':' gesdva strided','line_number':8300,'multiline':False]['text':' gesvdj SetXXX','line_number':8322,'multiline':False]['text':' Only get needs to be transformed this way; all the other ones can go','line_number':8363,'multiline':False]['text':' straight to the normal versions hip::HIPCachingAllocator','line_number':8364,'multiline':False]['text':' TODO: Undo this special-case; see the header for motivation behind this','line_number':8445,'multiline':False]['text':' hack.  It's VERY important this is only applied to PyTorch HIPify.','line_number':8446,'multiline':False]['text':' if the header is a native hip folder (under hip directory),','line_number':8492,'multiline':False]['text':' there is no need to add a hip path to it; the trie in hipify script','line_number':8493,'multiline':False]['text':' takes this mapping order to forbid further replacement','line_number':8494,'multiline':False]['text':' do not rename CUDA_KERNEL_ASSERT, lazyInitCUDA in caffe2 sources','line_number':8540,'multiline':False]['text':' the ordered dict guarantees this pattern will match first, before "CUDA"','line_number':8541,'multiline':False]['text':' We must tread very carefully here.  Blanket conversions like are done','line_number':8562,'multiline':False]['text':' in CAFFE2_SPECIFIC_MAPPINGS are not presently supported on PyTorch,','line_number':8563,'multiline':False]['text':' because a regex for CUDA will also match a filename like CUDAGuard.h,','line_number':8564,'multiline':False]['text':' but the HIPIFY script doesn't presently move the file and so the substitution','line_number':8565,'multiline':False]['text':' will be invalid.  Instead, we specifically list out every identifier','line_number':8566,'multiline':False]['text':' and file from c10/cuda which may be used externally, and do substitutions this','line_number':8567,'multiline':False]['text':' way.','line_number':8568,'multiline':False]['text':'','line_number':8569,'multiline':False]['text':' NB: if you want a transformation to ONLY apply to the c10/ directory,','line_number':8570,'multiline':False]['text':' put it as API_CAFFE2','line_number':8571,'multiline':False]['text':' This substitution is not permissible, because there's another copy of this','line_number':8604,'multiline':False]['text':' function in torch/cuda.h','line_number':8605,'multiline':False]['text':' ("cuda::device_count", ("hip::device_count", API_C10)),','line_number':8606,'multiline':False]['text':' NB: C10 mappings are more specific than Caffe2 mappings, so run them','line_number':8631,'multiline':False]['text':' first','line_number':8632,'multiline':False]