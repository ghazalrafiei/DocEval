['text':' Inputs should be a list of length 2.','line_number':44,'multiline':False]['text':' Inputs contains the shapes of two matrices.','line_number':45,'multiline':False]['text':' NB(chilli): Should be 2 * k - 1 technically for FLOPs.','line_number':49,'multiline':False]['text':' Inputs should be a list of length 2.','line_number':60,'multiline':False]['text':' Inputs contains the shapes of two tensor.','line_number':61,'multiline':False]['text':' NB(chilli): Should be 2 * k - 1 technically for FLOPs.','line_number':66,'multiline':False]['text':' Inputs should be a list of length 3.','line_number':73,'multiline':False]['text':' Inputs contains the shapes of three tensors.','line_number':74,'multiline':False]['text':' NB(chilli): I don't think this properly accounts for padding :think:','line_number':102,'multiline':False]['text':' NB(chilli): Should be 2 * c_in - 1 technically for FLOPs.','line_number':103,'multiline':False]['text':' q: [b, h, s_q, d_q] @ k: [b, h, d_q, s_k] -> scores: [b, h, s_q, s_k]','line_number':151,'multiline':False]['text':' scores: [b, h, s_q, s_k] @ v: [b, h, s_k, d_v] -> out: [b, h, s_q, d_v]','line_number':153,'multiline':False]['text':' NB: We aren't accounting for causal attention here','line_number':161,'multiline':False]['text':' Step 1: We recompute the scores matrix.','line_number':174,'multiline':False]['text':' q: [b, h, s_q, d_q] @ k: [b, h, d_q, s_k] -> scores: [b, h, s_q, s_k]','line_number':175,'multiline':False]['text':' Step 2: We propagate the gradients through the score @ v operation.','line_number':178,'multiline':False]['text':' gradOut: [b, h, s_q, d_v] @ v: [b, h, d_v, s_k] -> gradScores: [b, h, s_q, s_k]','line_number':179,'multiline':False]['text':' scores: [b, h, s_k, s_q] @ gradOut: [b, h, s_q, d_v] -> gradV: [b, h, s_k, d_v]','line_number':181,'multiline':False]['text':' Step 3: We propagate th gradients through the k @ v operation','line_number':184,'multiline':False]['text':' gradScores: [b, h, s_q, s_k] @ k: [b, h, s_k, d_q] -> gradQ: [b, h, s_q, d_q]','line_number':185,'multiline':False]['text':' q: [b, h, d_q, s_q] @ gradScores: [b, h, s_q, s_k] -> gradK: [b, h, d_q, s_k]','line_number':187,'multiline':False]['text':' Define the suffixes for different orders of magnitude','line_number':217,'multiline':False]['text':' Thanks BingChat!','line_number':219,'multiline':False]['text':' Find the index of the appropriate suffix based on the number of digits','line_number':221,'multiline':False]['text':' with some additional overflow.','line_number':222,'multiline':False]['text':' i.e. 1.01B should be displayed as 1001M, not 1.001B','line_number':223,'multiline':False]['text':' Divide the number by 1000^index and format it to two decimal places','line_number':229,'multiline':False]['text':' Return the value and the suffix as a string','line_number':231,'multiline':False]['text':' Keys will include the modules in `mods` and their submodules','line_number':285,'multiline':False]['text':' We do a bit of messing around here to only output the "Global" value','line_number':422,'multiline':False]['text':' if there are any FLOPs in there that aren't already fully contained by','line_number':423,'multiline':False]['text':' a module.','line_number':424,'multiline':False]['text':' type: ignore[operator]','line_number':454,'multiline':False]