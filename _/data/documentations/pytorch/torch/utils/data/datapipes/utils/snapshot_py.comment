['text':' TODO: Caveats','line_number':6,'multiline':False]['text':'   1. Caller (either the ReadingService or DataLoader) must pass in the initial RNG','line_number':7,'multiline':False]['text':'   2. `in_batch_shuffle` and `bucketbatch` are not compatible with this because they currently','line_number':8,'multiline':False]['text':'      lack the option to `set_seed`.','line_number':9,'multiline':False]['text':' For this snapshot restoration function, we want the DataPipe to be at its initial state prior to','line_number':38,'multiline':False]['text':' simple fast-forwarding. Therefore, we need to call `reset` twice, because if `SnapshotState` is `Restored`,','line_number':39,'multiline':False]['text':' the first reset will not actually reset.','line_number':40,'multiline':False]['text':' This ensures `SnapshotState` is `Iterating` by this point, even if it was `Restored`.','line_number':41,'multiline':False]['text':' This always reset the DataPipe if it hasn't already.','line_number':45,'multiline':False]['text':' While the DataPipe has `_fast_forward_iterator`, `next()` will get result from there instead of elsewhere.','line_number':54,'multiline':False]['text':' This will prevent the DataPipe from resetting in the `iter()` call','line_number':56,'multiline':False]['text':' If another DataPipe is consuming it, it won't have to start over again','line_number':57,'multiline':False]