['text':' This is the case where `IterDataPipe` has both `__iter__` and `__next__`.','line_number':72,'multiline':False]['text':' The `_valid_iterator_id` should either be never set (`None`), or set by at most one','line_number':73,'multiline':False]['text':' iterator (`0`). Otherwise, it means there are multiple iterators.','line_number':74,'multiline':False]['text':' reset() is called within this method when appropriate','line_number':94,'multiline':False]['text':' Check if `__iter__` returns `self` and `DataPipe` has `__next__`','line_number':131,'multiline':False]['text':' TODO: Add try-except to in-place reduce traceback from the Exception','line_number':146,'multiline':False]['text':' See: https://github.com/pytorch/data/issues/284','line_number':147,'multiline':False]['text':' Decided against using `contextlib.nullcontext` for performance reasons','line_number':151,'multiline':False]['text':' ``__iter__`` of IterDataPipe is a generator function','line_number':159,'multiline':False]['text':' This ID is tied to each created iterator','line_number':174,'multiline':False]['text':' Pass through here every time `__next__` is called','line_number':186,'multiline':False]['text':' Decided against using `contextlib.nullcontext` for performance reasons','line_number':191,'multiline':False]['text':' TODO: Simplify the traceback message to skip over `response = gen.send(None)`','line_number':197,'multiline':False]['text':'       Part of https://github.com/pytorch/data/issues/284','line_number':198,'multiline':False]['text':' If an exception message doesn't exist','line_number':204,'multiline':False]['text':' ``__iter__`` of IterDataPipe is NOT a generator function','line_number':211,'multiline':False]['text':' IterDataPipe is an iterator with both ``__iter__`` and ``__next__``','line_number':212,'multiline':False]['text':' And ``__iter__`` may or may not return `self`','line_number':213,'multiline':False]['text':' If `__next__` exists, put a wrapper around it','line_number':214,'multiline':False]['text':' Note that if the `__next__` and `__iter__` do something completely unrelated. It may cause issue but','line_number':230,'multiline':False]['text':' the user will be violating the iterator protocol. Potential issue:','line_number':231,'multiline':False]['text':' 1. Valid iterator ID may not update or checked properly','line_number':232,'multiline':False]['text':' 2. The number of samples yielded will be miscounted','line_number':233,'multiline':False]['text':' Regardless if `__next__` exists or not, `__iter__` needs a wrapper to track the number of valid iterators','line_number':235,'multiline':False]['text':' This ID is tied to each created iterator','line_number':245,'multiline':False]