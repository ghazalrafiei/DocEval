['text':' The sympy interpretation of operators.  It will also sometimes work with','line_number':8,'multiline':False]['text':' plain int/float, but if you do certain operations you will get out a','line_number':9,'multiline':False]['text':' sympy.Basic in the end.  If you want the Python/FX traceable interpretation,','line_number':10,'multiline':False]['text':' check PythonReferenceAnalysis.','line_number':11,'multiline':False]['text':' NB: For magic methods this needs to use normal magic methods','line_number':12,'multiline':False]['text':' so that test_magic_methods works','line_number':13,'multiline':False]['text':' Poorman's version of upcasting in Sympy','line_number':130,'multiline':False]['text':' This won't do for sympy.Expr as the casting does nothing for those','line_number':131,'multiline':False]['text':' Poorman's version of upcasting in Sympy','line_number':142,'multiline':False]['text':' This won't do for sympy.Expr as the casting does nothing for those','line_number':143,'multiline':False]['text':' Unlike ReferenceAnalysis, does NOT sympyify, instead, works with plain','line_number':161,'multiline':False]['text':' Python types and is FX traceable.  Inheritance here is purely for code','line_number':162,'multiline':False]['text':' sharing (TODO: considering splitting out a BaseReferenceAnalysis).','line_number':163,'multiline':False]