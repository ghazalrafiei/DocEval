['text':' Tries to simplify 'expr', so as to leave only 'thing' in the left-hand side.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Returns a tuple of:','line_number':29,'multiline':False]['text':'   1. The simplified expression','line_number':30,'multiline':False]['text':'   2. The expression on the right-hand side','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' Returns 'None' if it can't reach a state where the only thing in the left','line_number':33,'multiline':False]['text':' hand side is 'thing'.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' 'trials': number of times 'try_solve' will try to isolate 'thing' to the','line_number':36,'multiline':False]['text':' left-hand side.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' 'floordiv_inequality': flag to enable conversion of 'FloorDiv' into','line_number':39,'multiline':False]['text':' inequalities.','line_number':40,'multiline':False]['text':' Ignore unsupported expressions:','line_number':49,'multiline':False]['text':'   - Those that are not relational operations','line_number':50,'multiline':False]['text':'   - Those that don't have a mirror (just avoiding unexpected classes)','line_number':51,'multiline':False]['text':' Give up when 'thing' appears on both sides of the relational expression.','line_number':59,'multiline':False]['text':' That is because, as is, we assume the thing we are trying to isolate is','line_number':60,'multiline':False]['text':' only on the right-hand side.','line_number':61,'multiline':False]['text':' Try considering both LHS and RHS by mirroring the original expression:','line_number':66,'multiline':False]['text':' a < b ==> b > a','line_number':67,'multiline':False]['text':' Add each version of 'expr' if 'thing' is in its left-hand side.','line_number':70,'multiline':False]['text':' Stop if there was no change in this trial.','line_number':84,'multiline':False]['text':' type: ignore[assignment]','line_number':87,'multiline':False]['text':' Return if we were able to isolate 'thing' on the left-hand side.','line_number':89,'multiline':False]['text':' Move any constants in the left-hand side to the right-hand side.','line_number':103,'multiline':False]['text':' type: ignore[attr-defined]','line_number':109,'multiline':False]['text':' Divide both sides by the factors that don't contain thing.','line_number':111,'multiline':False]['text':' If we can't tell whether 'other' is negative or positive, we do nothing.','line_number':116,'multiline':False]['text':' That is because we don't know whether we have mirror the operation or not.','line_number':117,'multiline':False]['text':' Divide both sides by 'other'.','line_number':119,'multiline':False]['text':' If 'e' is an inequality and 'other' is negative, we have to','line_number':123,'multiline':False]['text':' mirror the expression.','line_number':124,'multiline':False]['text':' type: ignore[assignment]','line_number':126,'multiline':False]['text':'###############################################################################','line_number':131,'multiline':False]['text':' left-hand side is FloorDiv','line_number':132,'multiline':False]['text':'###############################################################################','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':' Given the expression: a // b op c','line_number':135,'multiline':False]['text':' where 'op' is a relational operation, these rules only work if:','line_number':136,'multiline':False]['text':'   - b > 0','line_number':137,'multiline':False]['text':'   - c is an integer','line_number':138,'multiline':False]['text':' a // b == expr','line_number':146,'multiline':False]['text':' => a >= (b * expr) and a < (b * (expr + 1))','line_number':147,'multiline':False]['text':' type: ignore[arg-type]','line_number':151,'multiline':False]['text':' type: ignore[arg-type]','line_number':152,'multiline':False]['text':' a // b != expr','line_number':154,'multiline':False]['text':' => a < (b * expr) or a >= (b * (expr + 1))','line_number':155,'multiline':False]['text':' type: ignore[arg-type]','line_number':159,'multiline':False]['text':' type: ignore[arg-type]','line_number':160,'multiline':False]['text':' The transformations below only work if b is positive.','line_number':162,'multiline':False]['text':' Note: we only have this information for constants.','line_number':163,'multiline':False]['text':' a // b > expr  => a >= b * (expr + 1)','line_number':164,'multiline':False]['text':' a // b >= expr => a >= b * expr','line_number':165,'multiline':False]['text':' type: ignore[arg-type]','line_number':167,'multiline':False]['text':' type: ignore[arg-type]','line_number':168,'multiline':False]['text':' a // b < expr  => a < b * expr','line_number':169,'multiline':False]['text':' a // b <= expr => a < b * (expr + 1)','line_number':170,'multiline':False]['text':' type: ignore[arg-type]','line_number':172,'multiline':False]['text':' type: ignore[arg-type]','line_number':173,'multiline':False]