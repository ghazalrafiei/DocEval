['text':' Like sympify, but supports less stuff, and also ensures that direct','line_number':22,'multiline':False]['text':' sympy expressions don't have free variables','line_number':23,'multiline':False]['text':' infinity is special; we use it to bracket integers as well','line_number':30,'multiline':False]['text':' NaNs can occur when doing things like 0 * sympy.oo, but it is better','line_number':36,'multiline':False]['text':' if the operator notices this and takes care of it, because sometimes','line_number':37,'multiline':False]['text':' the NaN is inappropriate (for example, for ints, the [-oo, oo] range','line_number':38,'multiline':False]['text':' should go to zero when multiplied with [0, 0])','line_number':39,'multiline':False]['text':' Sympy atomics only. Unlike <=, it also works on Sympy bools.','line_number':48,'multiline':False]['text':' only negative condition is True > False','line_number':54,'multiline':False]['text':' Although the type signature here suggests you can pass any','line_number':61,'multiline':False]['text':' sympy expression, in practice the analysis here only works','line_number':62,'multiline':False]['text':' with constant sympy expressions','line_number':63,'multiline':False]['text':' TODO: when the bounds have free variables, this may be','line_number':71,'multiline':False]['text':' nontrivial to actually verify','line_number':72,'multiline':False]['text':' Because this is a frozen class','line_number':75,'multiline':False]['text':' Intersection','line_number':89,'multiline':False]['text':' Union','line_number':102,'multiline':False]['text':' TODO: this doesn't work with bools but arguably it should','line_number':116,'multiline':False]['text':' NB: value is NOT a sympy expression, it's a constant!','line_number':189,'multiline':False]['text':' using nan makes subsequent computation throw, and for the purposes of optimization','line_number':193,'multiline':False]['text':' returning -math.inf - math.inf is equivalent to giving up','line_number':194,'multiline':False]['text':' We do a type check on a best-effort basis','line_number':202,'multiline':False]['text':' We don't want to force a cast to sympy.Float if the value is Rational to avoid losing precision','line_number':203,'multiline':False]['text':' dtype is intXX','line_number':209,'multiline':False]['text':' ranges disjoint','line_number':234,'multiline':False]['text':' Make unknown() * wrap(0) == wrap(0)','line_number':282,'multiline':False]['text':' Not implemented yet. It's a bit tricky','line_number':341,'multiline':False]['text':' If you want to implement it, compute the partial derivatives of a ** b','line_number':342,'multiline':False]['text':' and check the ranges where the function is increasing / decreasing','line_number':343,'multiline':False]['text':' Another non-tight way of doing this is defaulting to doing noting that for a > 0,  a ** b == exp(b * log(a))','line_number':344,'multiline':False]['text':' If this second option is implemented, by carefult about the types and possible infinities here and there.','line_number':345,'multiline':False]['text':' Here b > 0','line_number':370,'multiline':False]['text':' If the base is positive, then we're good, otherwise nothing's defined','line_number':372,'multiline':False]['text':' b > 0 integer','line_number':378,'multiline':False]['text':' x^n where n is even','line_number':380,'multiline':False]['text':' x^n where n is odd','line_number':383,'multiline':False]['text':' Performs upcasting first','line_number':423,'multiline':False]['text':' Poorman's version of upcasting in Sympy','line_number':425,'multiline':False]['text':' Inf is not a float...','line_number':426,'multiline':False]['text':' It's used in some models on symints','line_number':446,'multiline':False]['text':' expr_cond_pair is used to represent a single (expr, condition) pair in piecewise.','line_number':465,'multiline':False]['text':' We just return the value range of the expression and its corresponding condition as a tuple','line_number':466,'multiline':False]['text':' and defer the analysis to piecewise','line_number':467,'multiline':False]['text':' piecewise function can be used to convert a SymBool to SymInt:','line_number':473,'multiline':False]['text':' int_expr = Piecewise((1, bool_expr), (0, True)), it evalutes to 1 when sym_bool is True and 0 otherwise.','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':' ranges is a sequence of (expr_range, condition_range) pairs. The range pair is constructed in expr_cond_pair.','line_number':476,'multiline':False]['text':' The ValueRange of Piecewise is just the union of all expr ranges whose condition expr can be True.','line_number':477,'multiline':False]['text':' just assuming bools can have both values','line_number':504,'multiline':False]['text':' type: ignore[arg-type]','line_number':505,'multiline':False]['text':' many ops are unlikely to show up in optimizable indexing compute,','line_number':509,'multiline':False]['text':' so we dont have full coverage','line_number':510,'multiline':False]['text':' dtype is int or float','line_number':539,'multiline':False]['text':' inf cannot be cast to Integer','line_number':546,'multiline':False]['text':' int to float or float to int','line_number':556,'multiline':False]['text':' If there's a tracing context, augment available constrained ranges.','line_number':593,'multiline':False]['text':' Give some bounds to the free variables via their SymPy assumptions','line_number':600,'multiline':False]['text':' TODO A better way of doing this would be to assign them a range upon creation, as','line_number':601,'multiline':False]['text':'      size variables can come with a lower bound of 2, as we specialise on 0 and 1','line_number':602,'multiline':False]['text':' type: ignore[attr-defined]','line_number':605,'multiline':False]['text':' type: ignore[attr-defined]','line_number':606,'multiline':False]['text':' type: ignore[attr-defined]','line_number':608,'multiline':False]['text':' type: ignore[assignment]','line_number':611,'multiline':False]['text':' type: ignore[index]','line_number':612,'multiline':False]