['text':' type: ignore[attr-defined]','line_number':29,'multiline':False]['text':' type: ignore[arg-type]','line_number':121,'multiline':False]['text':' type: ignore[attr-defined]','line_number':130,'multiline':False]['text':' type: ignore[arg-type]','line_number':135,'multiline':False]['text':' type: ignore[arg-type]','line_number':146,'multiline':False]['text':' type: ignore[call-overload]','line_number':177,'multiline':False]['text':' This is a workaround for backend's tensor deserialization problem:','line_number':226,'multiline':False]['text':' unpickleTensor() always create a tensor on the device where it was originally saved','line_number':227,'multiline':False]['text':' This behavior is bad for multi-gpu training, as we wish to directly load the tensor','line_number':228,'multiline':False]['text':' on the designated device.','line_number':229,'multiline':False]['text':' For now, we simply move the tensor to cpu before saving.','line_number':230,'multiline':False]['text':' TODO: this should be fixed by deserialization instead.','line_number':231,'multiline':False]['text':' Convert simple sympy Integers into concrete int','line_number':245,'multiline':False]['text':' Convert concrete int into simple sympy Integers','line_number':258,'multiline':False]['text':' type: ignore[arg-type]','line_number':271,'multiline':False]['text':' type: ignore[arg-type]','line_number':272,'multiline':False]['text':' For singleton tensor returns','line_number':342,'multiline':False]['text':' TODO(zhxchen17) Maybe provide a function name helper in FX.','line_number':353,'multiline':False]['text':' From torch.fx.node._get_qualified_name','line_number':354,'multiline':False]['text':' TODO(zhxchen17) Don't catch all here.','line_number':357,'multiline':False]['text':' getitem has been handled in the producer node, skip it here','line_number':363,'multiline':False]['text':' TODO: create a new tensor_values here, meta might have faketensor info','line_number':390,'multiline':False]['text':' TODO(zhxchen17) This is sad, should be improved when HOO has schema arg names.','line_number':397,'multiline':False]['text':' Serialize to "key,orig_path,type_str"','line_number':443,'multiline':False]['text':' We intentionally don't serialize the missing arguments','line_number':487,'multiline':False]['text':' with default values','line_number':488,'multiline':False]['text':' Other branches are for arguments in fx node.','line_number':531,'multiline':False]['text':' This is a special branch for handling buffers (representing tensor arguments)','line_number':532,'multiline':False]['text':' for inductor's ExternalFallbackNode','line_number':533,'multiline':False]['text':' export_extern_kernel_node() is using this function to serialize arguments','line_number':534,'multiline':False]['text':' This is a special branch for handling SymInt args in inductor's','line_number':539,'multiline':False]['text':' ExternalFallbackNode.','line_number':540,'multiline':False]['text':' For regular FX graph, SymInt arg should be a fx.Node with','line_number':541,'multiline':False]['text':' self.is_sym_int_arg(arg) being true','line_number':542,'multiline':False]['text':' Must check bool first, as bool is also treated as int','line_number':555,'multiline':False]['text':' This is a special branch for handling SymInt args in inductor's','line_number':565,'multiline':False]['text':' ExternalFallbackNode.','line_number':566,'multiline':False]['text':' For regular FX graph, SymInt arg should be a fx.Node with','line_number':567,'multiline':False]['text':' self.is_sym_int_arg(arg) being true','line_number':568,'multiline':False]['text':' list of sym_ints','line_number':573,'multiline':False]['text':' list of sym_bools','line_number':582,'multiline':False]['text':' list of tensors','line_number':591,'multiline':False]['text':' list of optional tensors','line_number':599,'multiline':False]['text':' list of inductor buffers','line_number':611,'multiline':False]['text':' list of inductor buffers as optional tensors','line_number':616,'multiline':False]['text':' type: ignore[attr-defined]','line_number':639,'multiline':False]['text':' type: ignore[attr-defined]','line_number':640,'multiline':False]['text':' Custom objects through torchind are serializable with pickle,','line_number':646,'multiline':False]['text':' through implementing the .def_pickle function.  This should result','line_number':647,'multiline':False]['text':' in the object containing a __getstate__ and __setstate__','line_number':648,'multiline':False]['text':' serialize/deserialize function.','line_number':649,'multiline':False]['text':' Check single value return','line_number':820,'multiline':False]['text':' e.g "-> Tensor"','line_number':822,'multiline':False]['text':' e.g "-> SymInt"','line_number':825,'multiline':False]['text':' e.g "-> SymBool"','line_number':828,'multiline':False]['text':' e.g "-> Tensor[]"','line_number':831,'multiline':False]['text':' There are a two possibilities at this point:','line_number':843,'multiline':False]['text':' - This operator returns a tuple of Tensors, e.g. "-> (Tensor, Tensor)"','line_number':844,'multiline':False]['text':' - This operator returns a tuple of mixed of Tensor and Tensors, e.g. "-> (Tensor, Tensor[])"','line_number':845,'multiline':False]['text':'','line_number':846,'multiline':False]['text':' Either way, start by gathering a list of TensorArguments with the correct names.','line_number':847,'multiline':False]['text':' For consistent naming with FX, consult the downstream `getitem` node and','line_number':848,'multiline':False]['text':' make sure our outputs have the same name.','line_number':849,'multiline':False]['text':' for List[Tensor] return type','line_number':868,'multiline':False]['text':' FX does not emit a getitem node for any outputs that are unused.','line_number':898,'multiline':False]['text':' However, we need a name for them so that the number of outputs will','line_number':899,'multiline':False]['text':' correctly match the schema. Just assign a dummy name.','line_number':900,'multiline':False]['text':' TODO: Directly serialize exported_program.constants once','line_number':960,'multiline':False]['text':' CustomClassHolders get stored in the ExportedProgram rather than in','line_number':961,'multiline':False]['text':' the graph','line_number':962,'multiline':False]['text':' Test canonical form is well defined.','line_number':978,'multiline':False]['text':' TODO(zhxchen17) Follow up on this.','line_number':1015,'multiline':False]['text':' TODO(zhxchen17) Don't catch all here.','line_number':1021,'multiline':False]['text':' type: ignore[arg-type]','line_number':1046,'multiline':False]['text':' type: ignore[arg-type]','line_number':1047,'multiline':False]['text':' type: ignore[arg-type]','line_number':1048,'multiline':False]['text':' type: ignore[arg-type]','line_number':1049,'multiline':False]['text':' type: ignore[misc]','line_number':1089,'multiline':False]['text':' type: ignore[misc]','line_number':1090,'multiline':False]['text':' Handle the tensor metas.','line_number':1105,'multiline':False]['text':' Inputs: convert to placeholder nodes in FX.','line_number':1116,'multiline':False]['text':' Nodes: convert to call_function nodes.','line_number':1121,'multiline':False]['text':' Outputs: convert to a single `output` node.','line_number':1130,'multiline':False]['text':' type: ignore[assignment]','line_number':1137,'multiline':False]['text':' type: ignore[assignment]','line_number':1139,'multiline':False]['text':' TODO(zhxchen17) Follow up on this.','line_number':1153,'multiline':False]['text':' FX will generate a name for us.','line_number':1170,'multiline':False]['text':' For convenience: if this node returns a single tensor, name the','line_number':1181,'multiline':False]['text':' newly-created node after it. This ensures that these tensor values','line_number':1182,'multiline':False]['text':' have names that are consistent with serialized.','line_number':1183,'multiline':False]['text':' FX will generate a name for us.','line_number':1187,'multiline':False]['text':' None should converted as None, but is encoded as bool in serialized','line_number':1322,'multiline':False]['text':' Convert serialized object to torch equivalent','line_number':1323,'multiline':False]['text':' convert from serialized.python.types.List to python list','line_number':1361,'multiline':False]['text':' Simple case for single tensor return.','line_number':1392,'multiline':False]['text':' Check single value return','line_number':1396,'multiline':False]['text':' The derived `getitem` nodes should have the same stacktrace as the','line_number':1421,'multiline':False]['text':' original `fx_node`','line_number':1422,'multiline':False]['text':' Convert multiple return types to FX format.','line_number':1444,'multiline':False]['text':' In FX, each node only returns one value. So in order to represent','line_number':1445,'multiline':False]['text':' multiple return values, we have to emit a `getitem` node for each','line_number':1446,'multiline':False]['text':' return value.','line_number':1447,'multiline':False]['text':' This performs the inverse mapping of the `serialize_outputs` call in','line_number':1448,'multiline':False]['text':' serialization, see [NOTE: Multiple outputs]','line_number':1449,'multiline':False]['text':' also update the metaval for `fx_node` to be a list(meta)','line_number':1458,'multiline':False]['text':' Originally serialized to "key,orig_path,type_str"','line_number':1487,'multiline':False]['text':' Originally serializes to "fx_node_name,op_str"','line_number':1497,'multiline':False]['text':' type: ignore[arg-type]','line_number':1546,'multiline':False]['text':' noqa: G004','line_number':1548,'multiline':False]['text':' TODO: No need to do this once CustomClassHolders are lifted to the ExportedProgram','line_number':1568,'multiline':False]['text':' type: ignore[arg-type]','line_number':1595,'multiline':False]['text':' TODO(larryliu0820): Add support for upgrader & downgrader','line_number':1634,'multiline':False]['text':' type: ignore[assignment]','line_number':1690,'multiline':False]['text':' Stage 1: Reorder named items.','line_number':1781,'multiline':False]['text':' Stage 2: Rename nodes.','line_number':1888,'multiline':False]['text':' Stage 3: Remove unstable fields.','line_number':1945,'multiline':False]['text':' Stage 4: Aggregate values.','line_number':1949,'multiline':False]['text':' Stage 5: Recurse in subgraphs.','line_number':1954,'multiline':False]['text':' type: ignore[assignment]','line_number':2024,'multiline':False]['text':' type: ignore[assignment]','line_number':2027,'multiline':False]