['text':' Assume that bL.shape = (i, 1, n, n), bx.shape = (..., i, j, n),','line_number':36,'multiline':False]['text':' we are going to make bx have shape (..., 1, j,  i, 1, n) to apply batched tri.solve','line_number':37,'multiline':False]['text':' Reshape bx with the shape (..., 1, i, j, 1, n)','line_number':43,'multiline':False]['text':' Permute bx to make it have shape (..., 1, j, i, 1, n)','line_number':49,'multiline':False]['text':' shape = b x n x n','line_number':58,'multiline':False]['text':' shape = c x b x n','line_number':59,'multiline':False]['text':' shape = b x n x c','line_number':60,'multiline':False]['text':' shape = b x c','line_number':63,'multiline':False]['text':' shape = c x b','line_number':64,'multiline':False]['text':' Now we revert the above reshape and permute operators.','line_number':66,'multiline':False]['text':' shape = (..., 1, j, i, 1)','line_number':67,'multiline':False]['text':' shape = (..., 1, i, j, 1)','line_number':71,'multiline':False]['text':' Ref: https://nbviewer.jupyter.org/gist/fehiepsi/5ef8e09e61604f10607380467eb82006#Precision-to-scale_tril','line_number':76,'multiline':False]['text':' precision_matrix is not None','line_number':183,'multiline':False]