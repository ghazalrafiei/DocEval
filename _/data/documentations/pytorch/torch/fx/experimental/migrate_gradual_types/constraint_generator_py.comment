['text':' print(n.args)','line_number':111,'multiline':False]['text':' equality constraint','line_number':123,'multiline':False]['text':' define the output for expand','line_number':144,'multiline':False]['text':' since we do not have two nodes here, we will construct an argument variable','line_number':148,'multiline':False]['text':' constraint the output size','line_number':163,'multiline':False]['text':' then we have dimension variables','line_number':194,'multiline':False]['text':' then the tuple is the size','line_number':202,'multiline':False]['text':' input and output are dyn','line_number':225,'multiline':False]['text':' or input is a tensor and we actually do the replacement','line_number':228,'multiline':False]['text':' We will retrieve the type variables from the symbol table','line_number':265,'multiline':False]['text':' and confirm they are tensor variables','line_number':266,'multiline':False]['text':' will treat this as a static shape. So we will not use matching.','line_number':285,'multiline':False]['text':' we consider all tensor sizes and append embedding_dim to the end of the output dimension in all cases','line_number':318,'multiline':False]['text':' generate the new variable','line_number':345,'multiline':False]['text':' target shape','line_number':351,'multiline':False]['text':' type: ignore[assignment]','line_number':365,'multiline':False]['text':' TODO: add the extra check mentioned here:','line_number':370,'multiline':False]['text':' https://pytorch.org/docs/stable/generated/torch.Tensor.view.html#torch.Tensor.view','line_number':371,'multiline':False]['text':' type: ignore[operator]','line_number':373,'multiline':False]['text':' generate the new variable','line_number':385,'multiline':False]['text':' TODO: review this rule; should input = dyn; output = dyn be included here?','line_number':393,'multiline':False]['text':' generate the new variable','line_number':395,'multiline':False]['text':' dimension output case','line_number':472,'multiline':False]['text':' create and store the new dimension variable','line_number':474,'multiline':False]['text':' retrieve arg variables','line_number':478,'multiline':False]['text':' if the input is dynamic, we accept any index and return','line_number':483,'multiline':False]['text':' a dynamic dimension as output','line_number':484,'multiline':False]['text':' if the input is a tensor,','line_number':489,'multiline':False]['text':' generate a getItem constraint which will be expanded based on the','line_number':490,'multiline':False]['text':' tensor dimension.','line_number':491,'multiline':False]['text':' since the output is a dimension, we make sure it's a natural number','line_number':496,'multiline':False]['text':' added as a conjunction to the disjunction of c2','line_number':497,'multiline':False]['text':' tensor output case','line_number':501,'multiline':False]['text':' create and store the new tensor variable','line_number':503,'multiline':False]['text':' retrieve arg variables','line_number':507,'multiline':False]['text':' type: ignore[assignment]','line_number':513,'multiline':False]['text':' type: ignore[misc]','line_number':516,'multiline':False]['text':' TODO: we should figure out why there is a key-error here.','line_number':519,'multiline':False]['text':' We make sure this node will not be used again. We do not','line_number':533,'multiline':False]['text':' generate a constraint about that node. Only about the operands.','line_number':534,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':546,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':558,'multiline':False]['text':' then we made the wrong assumption about the argument being a tensor','line_number':566,'multiline':False]['text':' so we should fix the assumption','line_number':567,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':602,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':614,'multiline':False]['text':' implementing for size 3 and 4','line_number':640,'multiline':False]['text':' dimensions not equal','line_number':656,'multiline':False]['text':' dimensions inconsistent','line_number':662,'multiline':False]['text':' we are covering size 3 and 4 only for now','line_number':669,'multiline':False]['text':' dimensions not equal','line_number':696,'multiline':False]['text':' dimensions to inconsistent','line_number':703,'multiline':False]['text':' We make sure this node will not be used again. We do not','line_number':728,'multiline':False]['text':' generate a constraint about that node. Only about the operands.','line_number':729,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':741,'multiline':False]['text':' This is meant to be used for flow analysis only','line_number':753,'multiline':False]['text':' type: ignore[arg-type]','line_number':776,'multiline':False]['text':' TODO normalize index','line_number':780,'multiline':False]['text':' int((end - start) / step)','line_number':791,'multiline':False]['text':' either the a parameter is a number or it is Dyn','line_number':797,'multiline':False]['text':' additional vars that don't correspond to expressions','line_number':813,'multiline':False]['text':' generate constraints','line_number':817,'multiline':False]['text':' we will propagate the runtime value here since this is regular addition','line_number':859,'multiline':False]['text':' we will propagate the runtime value here since this is regular addition','line_number':875,'multiline':False]['text':' TODO generate add constraints for scalar addition','line_number':884,'multiline':False]['text':' generate the new variable','line_number':892,'multiline':False]['text':' set the default start and end dims','line_number':898,'multiline':False]['text':' type: ignore[attr-defined]','line_number':987,'multiline':False]['text':' type: ignore[attr-defined]','line_number':1009,'multiline':False]['text':' in this case we return false since there's a pattern mismatch','line_number':1052,'multiline':False]['text':' generate the new variable','line_number':1080,'multiline':False]['text':' type: ignore[union-attr]','line_number':1086,'multiline':False]['text':' type: ignore[union-attr]','line_number':1087,'multiline':False]['text':' generate the new variable','line_number':1097,'multiline':False]['text':' dim vars','line_number':1102,'multiline':False]['text':' dim vars','line_number':1124,'multiline':False]['text':' dim vars','line_number':1144,'multiline':False]['text':' c1 = Matching(input_var, TensorType([d1, d2, d3, d4]))','line_number':1147,'multiline':False]['text':' c2 = DConsistency(module_instance.in_channels, d2)','line_number':1150,'multiline':False]['text':' dim vars','line_number':1172,'multiline':False]['text':' traced or tracer.root','line_number':1187,'multiline':False]['text':' since we have a parameter, the shape must be static','line_number':1226,'multiline':False]['text':' scalar?','line_number':1272,'multiline':False]