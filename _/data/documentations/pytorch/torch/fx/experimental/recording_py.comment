['text':' [Note: Recording ShapeEnv Events]','line_number':19,'multiline':False]['text':' =================================','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' What is a ShapeEnv event?','line_number':22,'multiline':False]['text':' -------------------------','line_number':23,'multiline':False]['text':' We consider a ShapeEnv event every function call (ShapeEnv method or','line_number':24,'multiline':False]['text':' independent function) that modifies the state of the ShapeEnv instance.','line_number':25,'multiline':False]['text':' Such calls are recorded alongside their positional and keyword arguments,','line_number':26,'multiline':False]['text':' so that it may be replayed over a different ShapeEnv instance.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' See [Note: ShapeEnv State Equality] for what is considered the state','line_number':29,'multiline':False]['text':' of a ShapeEnv instance.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' What is it for?','line_number':32,'multiline':False]['text':' ---------------','line_number':33,'multiline':False]['text':' ShapeEnv events recording is used for reconstructing the ShapeEnv in an','line_number':34,'multiline':False]['text':' arbitrary state in time.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Being able to arbitrarily replay events like so is useful, mainly for','line_number':37,'multiline':False]['text':' translation validation bisection. i.e. if a ValidationException has been','line_number':38,'multiline':False]['text':' raised, find the earliest point in time where the translation validation','line_number':39,'multiline':False]['text':' fails.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' Besides that, it also allows us to inspect the given instance and,','line_number':42,'multiline':False]['text':' for example, check the guards that would actually be issued at that point.','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' What kind of arguments can be stored in an event?','line_number':45,'multiline':False]['text':' -------------------------------------------------','line_number':46,'multiline':False]['text':' There's no specific rule for what cannot be used as an argument.','line_number':47,'multiline':False]['text':' That said, pay special attention to the following cases:','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'   1. Tensor inputs: there are some tests that check whether the inputs','line_number':50,'multiline':False]['text':'      were garbage collected after execution. These will fail if there's','line_number':51,'multiline':False]['text':'      an event that is holding a reference to those inputs.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':'   2. ShapeEnv arguments: if there is an argument of ShapeEnv type, that','line_number':54,'multiline':False]['text':'      will be automatically replaced by the new given ShapeEnv instance.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':'   3. SymTypes arguments: they also hold references to ShapeEnv. So,','line_number':57,'multiline':False]['text':'      whenever we see them, we create a new instance, replacing the','line_number':58,'multiline':False]['text':'      ShapeEnv reference.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':'   4. FX nodes: specifically, FX nodes from the FX graph for symbolic','line_number':61,'multiline':False]['text':'      shapes. That argument must be replaced when replaying the event at','line_number':62,'multiline':False]['text':'      ShapeEnvEvent.run, since it has to reference a node from the given','line_number':63,'multiline':False]['text':'      instance, and not from the recorded instance.','line_number':64,'multiline':False]['text':' Event class for reconstructing ShapeEnv at arbitrary time.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Represents a method call that mutates ShapeEnv in a way that affects the','line_number':69,'multiline':False]['text':' issued guards, when ShapeEnv.produce_guards is called.','line_number':70,'multiline':False]['text':' ShapeEnv method.','line_number':73,'multiline':False]['text':' Arguments and keyword arguments called with.','line_number':76,'multiline':False]['text':' List of tracked_fakes at the time the method was called.','line_number':80,'multiline':False]['text':' Name of the captured event.','line_number':83,'multiline':False]['text':' Used for special handling of particular methods.','line_number':84,'multiline':False]['text':' Replay itself, but using shape_env as self.','line_number':87,'multiline':False]['text':' Special handling for the constructor event.','line_number':91,'multiline':False]['text':' Replace any argument of type ShapeEnv by the given one.','line_number':100,'multiline':False]['text':' Replace any argument of type SymTypes by a new instance,','line_number':105,'multiline':False]['text':' replacing its ShapeEnv reference.','line_number':106,'multiline':False]['text':' Converts FX nodes using the mapping argument.','line_number':113,'multiline':False]['text':' Don't do anything to x if it's not an FX node.','line_number':116,'multiline':False]['text':' If, at some point, we created an FX node, it means that translation validation is on.','line_number':118,'multiline':False]['text':' It also means we are building an FX graph for symbolic shapes at shape_env.graph, and','line_number':119,'multiline':False]['text':' we are tracking node names at shape_env.name_to_node.','line_number':120,'multiline':False]['text':' type: ignore[attr-defined]','line_number':122,'multiline':False]['text':' Replaces the value of an specific argument by the result of fn.','line_number':126,'multiline':False]['text':' ShapeEnv.create_fx_call_function:','line_number':134,'multiline':False]['text':' "args" parameter is a tuple of FX nodes from the FX graph of the old ShapeEnv.','line_number':135,'multiline':False]['text':' They must be replaced, since a "call_function" FX node with this tuple as argument','line_number':136,'multiline':False]['text':' will be added to the FX graph of the new shape_env.','line_number':137,'multiline':False]['text':' ShapeEnv.evaluate_expr and ShapeEnv.defer_runtime_assert:','line_number':144,'multiline':False]['text':' "fx_node" parameter is an (optional) FX node that represents the evaluate expression.','line_number':145,'multiline':False]['text':' They must be replaced, since it will be part of a "call_function" FX node for','line_number':146,'multiline':False]['text':' torch._assert, which will be added to the FX graph of the new shape_env.','line_number':147,'multiline':False]['text':' Actually call the method with the converted arguments.','line_number':150,'multiline':False]['text':' Extracts a ShapeEnv instance inside args and kwargs.','line_number':167,'multiline':False]['text':' Specifically, it looks for:','line_number':168,'multiline':False]['text':'   1. ShapeEnv arguments','line_number':169,'multiline':False]['text':'   2. SymInt, SymFloat, or SymBool arguments','line_number':170,'multiline':False]['text':' If we find more than one object of any of the above types, we','line_number':171,'multiline':False]['text':' also check that the ShapeEnv instance is the same for all of them.','line_number':172,'multiline':False]['text':' Decorator for recording the given function as a replayable event.','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' This decorator should be used at every function that mutates the state of','line_number':193,'multiline':False]['text':' ShapeEnv in some way that affects the resulting issued guards (i.e. when','line_number':194,'multiline':False]['text':' ShapeEnv.produce_guards is called).','line_number':195,'multiline':False]['text':'','line_number':196,'multiline':False]['text':' save_tracked_fakes: saves a snapshot of the TrackedFake list.','line_number':197,'multiline':False]['text':' This is used when calling ShapeEnv.produce_guards at arbitrary points in time.','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' When to save the list of TrackedFake?','line_number':200,'multiline':False]['text':' =====================================','line_number':201,'multiline':False]['text':' We should save the list of TrackedFake whenever the translation validation','line_number':202,'multiline':False]['text':' bisection may actually stop and call the produce_guards method at the moment','line_number':203,'multiline':False]['text':' right after the recorded function was played. In other words, since the','line_number':204,'multiline':False]['text':' bisection bisects through torch._assert calls, we should save in all methods','line_number':205,'multiline':False]['text':' that adds a torch._assert call to the symbolic shapes FX graph.','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' At the moment, there are 2 methods that save the list:','line_number':208,'multiline':False]['text':'   - ShapeEnv.evaluate_expr','line_number':209,'multiline':False]['text':'   - ShapeEnv.defer_runtime_assert','line_number':210,'multiline':False]['text':' type: ignore[has-type]','line_number':220,'multiline':False]['text':' If ShapeEnv is already recording an event, call the wrapped','line_number':221,'multiline':False]['text':' function directly.','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' NB: here, we skip the check of whether all ShapeEnv instances','line_number':224,'multiline':False]['text':' are equal, in favor of a faster dispatch.','line_number':225,'multiline':False]['text':' Retrieve an instance of ShapeEnv.','line_number':228,'multiline':False]['text':' Assumption: the collection of args and kwargs may not reference','line_number':229,'multiline':False]['text':' different ShapeEnv instances.','line_number':230,'multiline':False]['text':' If we are calling this function without any ShapeEnv instance','line_number':233,'multiline':False]['text':' alive in its arguments, we don't record and call the original.','line_number':234,'multiline':False]['text':' Otherwise, start recording and call the function.','line_number':238,'multiline':False]['text':' Take a snapshot of the current tracked_fakes.','line_number':240,'multiline':False]['text':' Record the event for 'fn'.','line_number':244,'multiline':False]['text':' Play the event on this ShapeEnv.','line_number':249,'multiline':False]['text':' Replays the ShapeEnvEvents list.','line_number':257,'multiline':False]['text':' It assumes the first event is the constructor call.','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' fn: transforms an old FX node into one corresponding to the newly created ShapeEnv.','line_number':260,'multiline':False]['text':' Constructs the new ShapeEnv.','line_number':267,'multiline':False]['text':' Actually replays each event.','line_number':272,'multiline':False]['text':' We need to call create_mapping_fn every time, since the node list might','line_number':273,'multiline':False]['text':' change after each event is replayed.','line_number':274,'multiline':False]['text':' FakeTensor metadata.','line_number':282,'multiline':False]['text':' This is to be used in place of FakeTensor placeholders when calling','line_number':283,'multiline':False]['text':' ShapeEnv.produce_guards.','line_number':284,'multiline':False]['text':' [Note: ShapeEnv State Equality]','line_number':311,'multiline':False]['text':' ===============================','line_number':312,'multiline':False]['text':'','line_number':313,'multiline':False]['text':' What is considered ShapeEnv state?','line_number':314,'multiline':False]['text':' ----------------------------------','line_number':315,'multiline':False]['text':' We consider to be the state of a ShapeEnv instance everything that','line_number':316,'multiline':False]['text':' is not in the inline tuple inside remove_nonstate_variables function.','line_number':317,'multiline':False]['text':' That is: the fields within ShapeEnv that modify the flow of execution','line_number':318,'multiline':False]['text':' of the program.','line_number':319,'multiline':False]['text':'','line_number':320,'multiline':False]['text':' So, for example: the replacements field might influence on how an','line_number':321,'multiline':False]['text':' expression is simplified. That, in turn, may result in a guard being','line_number':322,'multiline':False]['text':' statically known (i.e. not added).','line_number':323,'multiline':False]['text':'','line_number':324,'multiline':False]['text':' On the other hand, var_to_stack serves only changes what is printed','line_number':325,'multiline':False]['text':' in the screen, i.e. used only for debugging purposes. Therefore, we','line_number':326,'multiline':False]['text':' should not consider it when comparing states.','line_number':327,'multiline':False]['text':'','line_number':328,'multiline':False]['text':' What to do on NotEqualError?','line_number':329,'multiline':False]['text':' ----------------------------','line_number':330,'multiline':False]['text':' Here are a few possible causes for getting a NotEqualError raised:','line_number':331,'multiline':False]['text':'','line_number':332,'multiline':False]['text':'   1. New field that does not belong in the ShapeEnv state.','line_number':333,'multiline':False]['text':'      For example: log field of type ShapeEnvLoggerAdapter. Different','line_number':334,'multiline':False]['text':'      ShapeEnv instances will always have different ShapeEnvLoggerAdapter','line_number':335,'multiline':False]['text':'      instances, i.e. equality comparison would fail.','line_number':336,'multiline':False]['text':'      Solution: add it to the inlined tuple inside remove_nonstate_variables','line_number':337,'multiline':False]['text':'      function inside check_equal method.','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':'   2. New field that is not directly comparable across instances.','line_number':340,'multiline':False]['text':'      For example: guards field of type List[ShapeGuard]. More specifically,','line_number':341,'multiline':False]['text':'      the ShapeGuard type holds an expression and a stack information','line_number':342,'multiline':False]['text':'      for debugging purposes. When replaying the even on a new ShapeEnv','line_number':343,'multiline':False]['text':'      instance, the stack would be different, which would trigger this error.','line_number':344,'multiline':False]['text':'      Solution: add a special case to the map_value function inside','line_number':345,'multiline':False]['text':'      check_equal function.','line_number':346,'multiline':False]['text':'','line_number':347,'multiline':False]['text':'   3. Mutation of ShapeEnv on some not recorded function.','line_number':348,'multiline':False]['text':'      If a mutation of the state of ShapeEnv happens inside a function','line_number':349,'multiline':False]['text':'      that is not recorded (or that no caller in the stack is recorded),','line_number':350,'multiline':False]['text':'      then, the replayed ShapeEnv won't catch that.','line_number':351,'multiline':False]['text':'      Solution: decorate the function with record_shape_env_event.','line_number':352,'multiline':False]['text':' Checks whether the state of two ShapeEnv are equal w.r.t. the guards','line_number':355,'multiline':False]['text':' returned by ShapeEnv.produce_guards.','line_number':356,'multiline':False]['text':' Collect and remove variables that don't necessarily represent the state','line_number':358,'multiline':False]['text':' of a ShapeEnv. Note: we copy the dictionary so that we don't modify the','line_number':359,'multiline':False]['text':' instance itself.','line_number':360,'multiline':False]['text':' Function for transforming the mismatched values into string.','line_number':370,'multiline':False]['text':' Needed, since dict and set entries order might not be the same every time.','line_number':371,'multiline':False]['text':' Compares env1_vars with env2_vars.','line_number':383,'multiline':False]['text':' Here, we allow the value of each field to be mapped, so that we appropriately','line_number':384,'multiline':False]['text':' compare the two values.','line_number':385,'multiline':False]['text':' First, compare the set of keys in each vars dictionary.','line_number':391,'multiline':False]['text':' Then, sort the keys, and compare the mapped values of each key.','line_number':404,'multiline':False]['text':' Return a list of tuples representing the fields that did not match','line_number':413,'multiline':False]['text':' alongside their respective mapped values.','line_number':414,'multiline':False]['text':' Accumulate the mismatching fields.','line_number':421,'multiline':False]