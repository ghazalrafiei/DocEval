['text':' TODO: need to fix the way we insert observers for this pattern','line_number':23,'multiline':False]['text':' should be solved in the new fusion API','line_number':24,'multiline':False]['text':' reason that this doesn't work: the pattern is a bit complicated and we don't','line_number':25,'multiline':False]['text':' have a way to specify which input of the pattern we would like to observe','line_number':26,'multiline':False]['text':' pattern:','line_number':27,'multiline':False]['text':' bias input weight','line_number':28,'multiline':False]['text':' \     |    /','line_number':29,'multiline':False]['text':'  \    |   t','line_number':30,'multiline':False]['text':'   \   |  /','line_number':31,'multiline':False]['text':'    addmm','line_number':32,'multiline':False]['text':' we want to observe "weight" as weight, but there is not way to convey this','line_number':33,'multiline':False]['text':' information with current pattern language','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' right now:','line_number':36,'multiline':False]['text':' original:','line_number':37,'multiline':False]['text':'         weight - t \','line_number':38,'multiline':False]['text':'         input  - addmm','line_number':39,'multiline':False]['text':' observed (no hack):','line_number':40,'multiline':False]['text':'      weight - t - observer \','line_number':41,'multiline':False]['text':'       input - observer - addmm','line_number':42,'multiline':False]['text':' target:','line_number':43,'multiline':False]['text':'      weight - observer - t \','line_number':44,'multiline':False]['text':'        input - observer - addmm','line_number':45,'multiline':False]['text':' def root_node_getter(node_pattern):','line_number':47,'multiline':False]['text':'     addmm, bias, act, weight = node_pattern','line_number':48,'multiline':False]['text':'     return addmm','line_number':49,'multiline':False]['text':' linear_configs.append(','line_number':51,'multiline':False]['text':'     BackendPatternConfig((torch.ops.aten.addmm.default, MatchAllNode, MatchAllNode, torch.ops.aten.t.default))','line_number':52,'multiline':False]['text':'     .set_observation_type(observation_type)  # noqa: E131','line_number':53,'multiline':False]['text':'     .set_dtype_configs(dtype_configs)','line_number':54,'multiline':False]['text':'     ._set_root_node_getter(root_node_getter))','line_number':55,'multiline':False]['text':' noqa: E131','line_number':59,'multiline':False]['text':' linear is decomposed to `t - mm` if bias is not present','line_number':63,'multiline':False]['text':' noqa: E131','line_number':66,'multiline':False]['text':' noqa: E131','line_number':78,'multiline':False]['text':' noqa: E131','line_number':84,'multiline':False]['text':' TODO: remove when functionalization is supported in PT2 mode','line_number':88,'multiline':False]['text':' noqa: E131','line_number':91,'multiline':False]['text':' noqa: E131','line_number':109,'multiline':False]['text':' noqa: E131','line_number':122,'multiline':False]['text':' TODO: this is not used right now since we have extra check in prepare','line_number':130,'multiline':False]['text':' will need to change this to NO_OBSERVER later after we implemented','line_number':131,'multiline':False]['text':' Tensor dtype inference properly','line_number':132,'multiline':False]['text':' TODO: remove when functionalization is supported in pt2_mode','line_number':141,'multiline':False]['text':' noqa: E131','line_number':147,'multiline':False]