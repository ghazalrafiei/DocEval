['text':' Names for observer insert keys','line_number':28,'multiline':False]['text':' Mapping related code','line_number':34,'multiline':False]['text':' populate this section with all the variables we might find important','line_number':53,'multiline':False]['text':' change from none if your detector is actually using this','line_number':54,'multiline':False]['text':' equalization related options','line_number':58,'multiline':False]['text':' Apply suggestions to new qconfig','line_number':69,'multiline':False]['text':' keep track of dynamic and per_channel recommendations','line_number':72,'multiline':False]['text':' append as if a list of combinations','line_number':74,'multiline':False]['text':' only trying dynamic rec','line_number':76,'multiline':False]['text':' only trying dynamic','line_number':77,'multiline':False]['text':' now we try each of the combinations','line_number':79,'multiline':False]['text':' rec[0] -> dynamic recommended','line_number':81,'multiline':False]['text':' rec[1] -> per channel recommended','line_number':82,'multiline':False]['text':' if not a valid configuration, we move on to the next one in priority','line_number':91,'multiline':False]['text':' return the QConfig chosen','line_number':94,'multiline':False]['text':' in this case, we just return default equalization config','line_number':107,'multiline':False]['text':' we know this is valid because only valid modules would even','line_number':108,'multiline':False]['text':' have this option','line_number':109,'multiline':False]['text':' Adding base class for detectors','line_number':112,'multiline':False]['text':' if the node's target is our target, return it','line_number':178,'multiline':False]['text':' getting here means node not found','line_number':182,'multiline':False]['text':' if no "." we are already at base and failed','line_number':183,'multiline':False]['text':' recursively call it with parent fqn','line_number':188,'multiline':False]['text':' Keys for return dictionary','line_number':215,'multiline':False]['text':' Default map for representing supported per channel quantization modules for different backends','line_number':220,'multiline':False]['text':' store the backend information','line_number':231,'multiline':False]['text':' run the helper function to populate the dictionary','line_number':251,'multiline':False]['text':' we actually have a qconfig info object we are populating','line_number':254,'multiline':False]['text':' create a detector info instance','line_number':258,'multiline':False]['text':' see if per channel quantization is supported','line_number':261,'multiline':False]['text':' create dict we will return','line_number':289,'multiline':False]['text':' get the fully qualified name and check if in list of modules to include and list of modules to ignore','line_number':292,'multiline':False]['text':' check if the module per_channel is supported','line_number':297,'multiline':False]['text':' based on backend','line_number':298,'multiline':False]['text':' assert statement for MyPy','line_number':304,'multiline':False]['text':' this object should either be fake quant or observer','line_number':308,'multiline':False]['text':' will be true if found in qconfig','line_number':312,'multiline':False]['text':' then we know that per_channel quantization used','line_number':314,'multiline':False]['text':' all fake quants have channel axis so need to check is_per_channel','line_number':316,'multiline':False]['text':' should be an observer otherwise','line_number':321,'multiline':False]['text':' run the helper function to populate the dictionary','line_number':351,'multiline':False]['text':' String to let the user know of further optimizations','line_number':354,'multiline':False]['text':' return the string and the dictionary form of same information','line_number':371,'multiline':False]['text':' names for the pre and post observers that are inserted','line_number':392,'multiline':False]['text':' naming conventions for stationary vs non-stationary data','line_number':396,'multiline':False]['text':' naming for activation','line_number':400,'multiline':False]['text':' naming conventions for the keys of the return module info','line_number':404,'multiline':False]['text':' modules that are supported both dynamic and static for this report function','line_number':413,'multiline':False]['text':' modules that will be supported soon for both','line_number':416,'multiline':False]['text':' set tolerance level and initialize a set to keep track of useful fqn locations','line_number':422,'multiline':False]['text':' observer for this detector is ModelReportObserver','line_number':444,'multiline':False]['text':' return dict','line_number':447,'multiline':False]['text':' make sure module is supported','line_number':451,'multiline':False]['text':' if it's a supported type, we want to get node and add observer insert locations','line_number':453,'multiline':False]['text':' add entry for pre-observer','line_number':456,'multiline':False]['text':' add entry for post-observer','line_number':466,'multiline':False]['text':' run the helper function to populate the dictionary','line_number':491,'multiline':False]['text':' we actually have a qconfig info object we are populating','line_number':494,'multiline':False]['text':' create a detector info instance','line_number':498,'multiline':False]['text':' see if per channel quantization is supported','line_number':501,'multiline':False]['text':' check to see if module is of a supported type','line_number':517,'multiline':False]['text':' check if it will be supported','line_number':520,'multiline':False]['text':' supported','line_number':523,'multiline':False]['text':' this is check for observer insertion','line_number':526,'multiline':False]['text':' this is for report gen and we also need to check if it contains observers','line_number':530,'multiline':False]['text':' store modules dynamic vs static information','line_number':551,'multiline':False]['text':' This for loop goes through the modules, and extracts all relevant information into module_dynamic_static_info','line_number':554,'multiline':False]['text':'   This information primary includes whether the data distributions around a supported module is stationary or not','line_number':555,'multiline':False]['text':'   Based on this, it is recorded whether dynamic or static quantization is recommended','line_number':556,'multiline':False]['text':' loop through all submodules included nested ones','line_number':558,'multiline':False]['text':' if module is Linear has the ModelReportObserver attached to it','line_number':560,'multiline':False]['text':' get pre and post observers for the module','line_number':562,'multiline':False]['text':' get the statistics for each module','line_number':566,'multiline':False]['text':' record module, pre and post stat, and whether to do dynamic or static based off it','line_number':570,'multiline':False]['text':' true if post observer data distribution is non-stationary, false if it's stationary','line_number':571,'multiline':False]['text':' specify the classifications for whether data distributions considered stationary or non-stationary','line_number':574,'multiline':False]['text':' check if current support or future support','line_number':578,'multiline':False]['text':' store the set of important information for this module','line_number':581,'multiline':False]['text':' get the dictionary of the information to format the string report','line_number':627,'multiline':False]['text':' check to make sure at least 1 module added.','line_number':632,'multiline':False]['text':' This for loop goes through the information collected in module_dynamic_static_info and:','line_number':637,'multiline':False]['text':'   Populates the string based report with the information from module_dynamic_static_info','line_number':638,'multiline':False]['text':'   Compiles the complete report by appending relevant formatted strings','line_number':639,'multiline':False]['text':' there is at least 1 module for suggestion','line_number':643,'multiline':False]['text':' decide what string formatting values will be','line_number':648,'multiline':False]['text':' strings for if dynamic quantized per tensor is needed','line_number':654,'multiline':False]['text':' start composing explanation','line_number':662,'multiline':False]['text':' check if currently supported or future supported','line_number':665,'multiline':False]['text':' now set the quantization explanation string','line_number':673,'multiline':False]['text':' if we have a non-stationary input -> linear -> stationary we suggested static','line_number':681,'multiline':False]['text':' however, we want to also recommend they add a dynamic quantize per tensor right if this change is made','line_number':682,'multiline':False]['text':' format the overall suggestion string with the specific inputs','line_number':691,'multiline':False]['text':' append to overall suggestion','line_number':696,'multiline':False]['text':' return the string as well as the dictionary of information','line_number':702,'multiline':False]['text':' names for the pre and post observers that are inserted','line_number':747,'multiline':False]['text':' weight / activation prefix for each of the below info','line_number':750,'multiline':False]['text':' string names for keys of info dictionaries','line_number':754,'multiline':False]['text':' keys for return dict of recommendations','line_number':760,'multiline':False]['text':' default weight and info strings','line_number':766,'multiline':False]['text':' default for what ratio we recommend input weight','line_number':770,'multiline':False]['text':' ensure passed in inputs are valid','line_number':774,'multiline':False]['text':' initialize attributes based on args','line_number':778,'multiline':False]['text':' check to see if module is of a supported type','line_number':791,'multiline':False]['text':' this is check for observer insertion','line_number':794,'multiline':False]['text':' this is for report gen and we also need to check if it contains observers','line_number':798,'multiline':False]['text':' run the helper function to populate the dictionary','line_number':810,'multiline':False]['text':' find the range of inputs','line_number':811,'multiline':False]['text':' find the range of weights','line_number':814,'multiline':False]['text':' calculate per_channel comparison statistic s_c','line_number':817,'multiline':False]['text':' generate the return dictionary','line_number':820,'multiline':False]['text':' we actually have a qconfig info object we are populating','line_number':823,'multiline':False]['text':' create a detector info instance','line_number':827,'multiline':False]['text':' see if per channel quantization is supported','line_number':830,'multiline':False]['text':' observer for this detector is ModelReportObserver','line_number':855,'multiline':False]['text':' return dict','line_number':858,'multiline':False]['text':' check to see if module is of a supported type','line_number':862,'multiline':False]['text':' if it's a supported type, we want to get node and add observer insert locations','line_number':864,'multiline':False]['text':' add entry for pre-observer','line_number':867,'multiline':False]['text':' return dictionary mapping observer fqns to desired info','line_number':898,'multiline':False]['text':' if module is supported and it has a pre-observer','line_number':902,'multiline':False]['text':' get pre observer for the module','line_number':904,'multiline':False]['text':' return dictionary mapping observer fqns to desired info','line_number':930,'multiline':False]['text':' if module is supported and it has a pre-observer','line_number':934,'multiline':False]['text':' we don't need actual observer, just the module weights','line_number':936,'multiline':False]['text':' calculate min and max vals','line_number':937,'multiline':False]['text':' noqa: C416','line_number':944,'multiline':False]['text':' Need to match dtype of min/max because the updates to buffers','line_number':949,'multiline':False]['text':' are done in place and types need to match for comparisons','line_number':950,'multiline':False]['text':' calculate the ratios of the info','line_number':981,'multiline':False]['text':' get the prefix str','line_number':982,'multiline':False]['text':' create return dictionary for each observer','line_number':1012,'multiline':False]['text':' for each module (both passed in dicts should have same keys)','line_number':1015,'multiline':False]['text':' raise error if not in weight info','line_number':1018,'multiline':False]['text':' calculate the ratios of the weight info and input info','line_number':1022,'multiline':False]['text':' if mismatched size, because of grouping, we want to replicate weight enough times','line_number':1026,'multiline':False]['text':' we try to replicate','line_number':1030,'multiline':False]['text':' get replication factor','line_number':1032,'multiline':False]['text':' weight ratio is (n,), input ratio is (k,), we just repeat weight ratio k // n','line_number':1035,'multiline':False]['text':' calculate the s metric per channel','line_number':1038,'multiline':False]['text':' return compiled observer ratios','line_number':1042,'multiline':False]['text':' store modules input weight equalization info','line_number':1063,'multiline':False]['text':' for each module we add separate set of suggestions','line_number':1066,'multiline':False]['text':' get relevant info for this module','line_number':1069,'multiline':False]['text':' decide if each channel should have input weight equalization or not','line_number':1074,'multiline':False]['text':' decide if recommending input weight equalization','line_number':1080,'multiline':False]['text':' build the return dict input','line_number':1084,'multiline':False]['text':' also unpack input and weight dicts into it','line_number':1085,'multiline':False]['text':' return our compiled info for each module','line_number':1095,'multiline':False]['text':' find the range of inputs','line_number':1120,'multiline':False]['text':' find the range of weights','line_number':1123,'multiline':False]['text':' calculate per_channel comparison statistic s_c','line_number':1126,'multiline':False]['text':' generate the return dictionary','line_number':1129,'multiline':False]['text':' now we can generate report based on this information','line_number':1132,'multiline':False]['text':' some strings to be formatted depending on module we are adding','line_number':1135,'multiline':False]['text':' added module check','line_number':1144,'multiline':False]['text':' compile the suggestion string','line_number':1147,'multiline':False]['text':' we added at least 1 module','line_number':1149,'multiline':False]['text':' add the module level description','line_number':1151,'multiline':False]['text':' gather info on how many channels would benefit from input weight and','line_number':1156,'multiline':False]['text':' if no modules looked at, amend return string','line_number':1170,'multiline':False]['text':' return a tuple with the string explanation and the compiled dict info','line_number':1174,'multiline':False]['text':' names for the pre observers that are inserted','line_number':1228,'multiline':False]['text':' pre activation prefix','line_number':1231,'multiline':False]['text':' names for dict keys','line_number':1234,'multiline':False]['text':' initialize the variables of interest','line_number':1252,'multiline':False]['text':' make sure passed in percentile is valid','line_number':1255,'multiline':False]['text':' case for insertion of module','line_number':1276,'multiline':False]['text':' check if the module has any children and isn't observer','line_number':1277,'multiline':False]['text':' currently doesn't do anything for outlier detector','line_number':1289,'multiline':False]['text':' observer for this detector is ModelReportObserver','line_number':1321,'multiline':False]['text':' return dict','line_number':1324,'multiline':False]['text':' check to see if module is of a supported type','line_number':1328,'multiline':False]['text':' if it's a supported type, we want to get node and add observer insert locations','line_number':1330,'multiline':False]['text':' add entry for pre-observer','line_number':1333,'multiline':False]['text':' get both as flattened lists for easy mapping','line_number':1367,'multiline':False]['text':' calculate whether channels were statistically significant','line_number':1371,'multiline':False]['text':' calculate for each channel whether it's an outlier or not based on ratio','line_number':1377,'multiline':False]['text':' return the dictionary with the two lists','line_number':1381,'multiline':False]['text':' return dictionary mapping observer fqns to desired info','line_number':1403,'multiline':False]['text':' if module is supported and it has a pre-observer','line_number':1407,'multiline':False]['text':' get pre observer for the module','line_number':1409,'multiline':False]['text':' get the number of batches and calculated ratio thresholds','line_number':1412,'multiline':False]['text':' also get the max values','line_number':1418,'multiline':False]['text':' we have to specifically modify how we are recording negative ratio for pre-relu layers','line_number':1421,'multiline':False]['text':' check if we have a negative ratio','line_number':1423,'multiline':False]['text':' a ratio might be negative if we have a situation where the 100th percentile is','line_number':1424,'multiline':False]['text':' > 0 while the nth percentile is < 0, in which case this would not be detected','line_number':1425,'multiline':False]['text':' as an outlier. Since we care more about magnitude, we make it positive.','line_number':1426,'multiline':False]['text':' first make it positive','line_number':1428,'multiline':False]['text':' if it's less than 1 we have the flip it as well','line_number':1432,'multiline':False]['text':' calculate whether ratios were outliers','line_number':1437,'multiline':False]['text':' generate the information dictionary of outlier information','line_number':1474,'multiline':False]['text':' now we can generate report based on this information','line_number':1477,'multiline':False]['text':' added module check','line_number':1480,'multiline':False]['text':' some strings to be formatted depending on module we are adding','line_number':1483,'multiline':False]['text':' suggestion for constant batch check since that can make it no outliers','line_number':1491,'multiline':False]['text':' compile the suggestion string','line_number':1495,'multiline':False]['text':' get module specific info','line_number':1497,'multiline':False]['text':' check to see if we already added high level model desc','line_number':1499,'multiline':False]['text':' look at each individual channel and add a suggestion','line_number':1501,'multiline':False]['text':' we found at least 1 outlier','line_number':1504,'multiline':False]['text':' add the module level description','line_number':1506,'multiline':False]['text':' we mark that we found at least one outlier','line_number':1510,'multiline':False]['text':' also check if we found constant batch','line_number':1516,'multiline':False]['text':' make sure we add a module level highlight.','line_number':1518,'multiline':False]['text':' add the module level description','line_number':1520,'multiline':False]['text':' we also added at least one thing to description','line_number':1527,'multiline':False]['text':' if found outlier, give suggestion, else give default response','line_number':1531,'multiline':False]['text':' compose the note string','line_number':1533,'multiline':False]