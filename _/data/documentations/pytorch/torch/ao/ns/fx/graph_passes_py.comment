['text':' fqn on observers is not present, because they do not','line_number':34,'multiline':False]['text':' exist when the fqns are created during tracing. If this is','line_number':35,'multiline':False]['text':' an observer, get the fqn of the node being observed.','line_number':36,'multiline':False]['text':' type: ignore[index]','line_number':43,'multiline':False]['text':' type: ignore[return-value]','line_number':44,'multiline':False]['text':' create new name','line_number':70,'multiline':False]['text':' create the logger object','line_number':74,'multiline':False]['text':' attach the logger object to the parent module','line_number':79,'multiline':False]['text':' Ops such add and mul are special because either','line_number':118,'multiline':False]['text':' one or two of the first two arguments can be tensors,','line_number':119,'multiline':False]['text':' and if one argument is a tensor it can be first or','line_number':120,'multiline':False]['text':' second (x + 1 versus 1 + x).','line_number':121,'multiline':False]['text':' create a single input logger','line_number':126,'multiline':False]['text':' create N input loggers, one for each node','line_number':135,'multiline':False]['text':' type: ignore[var-annotated, arg-type]','line_number':136,'multiline':False]['text':' ensure env is populated with base node','line_number':147,'multiline':False]['text':' Note: runs for both inputs and outputs','line_number':148,'multiline':False]['text':' add the logger after the base node','line_number':153,'multiline':False]['text':' copy scale','line_number':175,'multiline':False]['text':' copy zero_point','line_number':182,'multiline':False]['text':' create the quantize_per_tensor call','line_number':189,'multiline':False]['text':' TODO(future PR): determine the actual dtype of node_c,','line_number':240,'multiline':False]['text':' the current code only works because dequantize works with','line_number':241,'multiline':False]['text':' multiple input dtypes.','line_number':242,'multiline':False]['text':' int8 shadows fp32, the dtype cast needs to quantize to int8','line_number':256,'multiline':False]['text':' with the right qparams.','line_number':257,'multiline':False]['text':' type: ignore[assignment]','line_number':261,'multiline':False]['text':' TODO(future PR): add handling for quantize_per_tensor','line_number':303,'multiline':False]['text':' TODO(future PR): look into using copy_node API instead','line_number':320,'multiline':False]['text':' type: ignore[arg-type]','line_number':333,'multiline':False]['text':' type: ignore[arg-type]','line_number':346,'multiline':False]['text':' to','line_number':352,'multiline':False]['text':' type: ignore[arg-type]','line_number':354,'multiline':False]['text':' populate the list of nodes we need to check','line_number':377,'multiline':False]['text':' type: ignore[assignment]','line_number':382,'multiline':False]['text':' For each node, check if we handle the copy behavior. This follows the','line_number':401,'multiline':False]['text':' logic in `_insert_copy_of_subgraph_a_after_input_node_c`.','line_number':402,'multiline':False]['text':' stitch the inputs from base graph','line_number':428,'multiline':False]['text':' create a sequential list of the subgraphs' nodes from start to end,','line_number':457,'multiline':False]['text':' because we need to add the nodes to graph C in non-reverse order','line_number':458,'multiline':False]['text':' type: ignore[assignment]','line_number':462,'multiline':False]['text':' go through nodes of a in order, and insert them into the graph of c','line_number':465,'multiline':False]['text':' sequentially','line_number':466,'multiline':False]['text':' previous added node is the input to next node','line_number':477,'multiline':False]['text':' TODO(future PR): enable multiple inputs for nodes which are not at start of subgraph','line_number':480,'multiline':False]['text':' return the last inserted node','line_number':486,'multiline':False]['text':' copy the other inputs from the other graph','line_number':558,'multiline':False]['text':' stitch the inputs from base graph','line_number':587,'multiline':False]['text':' type: ignore[assignment]','line_number':596,'multiline':False]['text':' if target is a module, we point to the module from gm_b','line_number':602,'multiline':False]['text':' fetch the corresponding module from gm_a','line_number':605,'multiline':False]['text':' graph_c is the graph created from copying the nodes of graph_b and inserting','line_number':659,'multiline':False]['text':' the shadows with the nodes copied from graph_a','line_number':660,'multiline':False]['text':' calculate the flags to determine what to do with this node','line_number':684,'multiline':False]['text':' For both start_node and end_node verify that we know how to do','line_number':710,'multiline':False]['text':' the dtype cast. If we do not, skip.','line_number':711,'multiline':False]['text':' If we are shadowing from fp32 to int8, we need to insert','line_number':734,'multiline':False]['text':' quantize_per_tensor call with qparams from the previous node.','line_number':735,'multiline':False]['text':' Only do this if we are able to infer these qparams from the graph.','line_number':736,'multiline':False]['text':' if necessary, log the input of node_c','line_number':766,'multiline':False]['text':' first, save the prev_node instances, because they','line_number':778,'multiline':False]['text':' will be overwritten in the env after the first logger','line_number':779,'multiline':False]['text':' is added','line_number':780,'multiline':False]['text':' logging of inputs which are not lists is not supported yet','line_number':792,'multiline':False]['text':' subgraph so far:','line_number':794,'multiline':False]['text':'','line_number':795,'multiline':False]['text':' (prev_node_c)+ -> (logger_c_input)?','line_number':796,'multiline':False]['text':' Note: this if statement is always True, spelling it out to clarify code','line_number':798,'multiline':False]['text':' intent.','line_number':799,'multiline':False]['text':' ensure env_c is populated with base node','line_number':801,'multiline':False]['text':' after this point,','line_number':805,'multiline':False]['text':'','line_number':806,'multiline':False]['text':' node_a is the original node from graph_a, with parent module gm_a','line_number':807,'multiline':False]['text':' node_b is the original node from graph_b, with parent module gm_b','line_number':808,'multiline':False]['text':' node_c is the copy of node_b in graph_c','line_number':809,'multiline':False]['text':'','line_number':810,'multiline':False]['text':' subgraph so far:','line_number':811,'multiline':False]['text':'','line_number':812,'multiline':False]['text':' (prev_node_c)+ -> (logger_c_input)? -> node_start_c','line_number':813,'multiline':False]['text':' cast dtype from the dtype of node_c's input to the dtype of','line_number':817,'multiline':False]['text':' node_a's input (dequant, etc)','line_number':818,'multiline':False]['text':' prev_node_c = node_c.args[0]','line_number':819,'multiline':False]['text':' skip the input logger when inserting a dtype cast','line_number':822,'multiline':False]['text':' note: not inserting to env_c because all nodes which use the dtype','line_number':831,'multiline':False]['text':'   casts are copied from graph_a','line_number':832,'multiline':False]['text':'','line_number':833,'multiline':False]['text':' subgraph so far:','line_number':834,'multiline':False]['text':'','line_number':835,'multiline':False]['text':'           (dtype_cast_node)+','line_number':836,'multiline':False]['text':'                  /','line_number':837,'multiline':False]['text':' (prev_node_c)+ -> (logger_c_input)? -> node_start_c','line_number':838,'multiline':False]['text':' if input logging is enabled, log the input to the subgraph','line_number':840,'multiline':False]['text':' TODO: explain this','line_number':842,'multiline':False]['text':' subgraph so far:','line_number':866,'multiline':False]['text':'','line_number':867,'multiline':False]['text':'       (dtype_cast_node)+ -> (logger_a_input)?','line_number':868,'multiline':False]['text':'                  /','line_number':869,'multiline':False]['text':' prev_node_c -> (logger_c_input)? -> node_start_c','line_number':870,'multiline':False]['text':' hook up the new mod_a copy to be in the graph, receiving the','line_number':872,'multiline':False]['text':' same inputs as mod_b does, with dtype cast to match a','line_number':873,'multiline':False]['text':' Some ops, such as LSTMs, have two non-param inputs. If we have','line_number':874,'multiline':False]['text':' such an op, pass the second param as well. Note: dtype casting','line_number':875,'multiline':False]['text':' for the second param is not implemented yet, it can be added','line_number':876,'multiline':False]['text':' later if there is a use case.','line_number':877,'multiline':False]['text':' node_c_second_non_param_arg = node_c.args[1]','line_number':881,'multiline':False]['text':' subgraph so far:','line_number':887,'multiline':False]['text':'','line_number':888,'multiline':False]['text':'       dtype_cast_node -> (logger_a_input)? -> subgraph_a_copy(args/kwargs not shown)','line_number':889,'multiline':False]['text':'                  /','line_number':890,'multiline':False]['text':' (prev_node_c)+ -> (logger_c_input)? -> node_start_c','line_number':891,'multiline':False]['text':' When we created the input logger, we left the ref_node_name','line_number':894,'multiline':False]['text':' as an empty string, because the subgraph copy did not exist','line_number':895,'multiline':False]['text':' yet. Now that the subgraph copy exists, we modify this name','line_number':896,'multiline':False]['text':' to its true value.','line_number':897,'multiline':False]['text':' Note: the alternative to this is to create the input logger','line_number':898,'multiline':False]['text':' after creating the subgraph, which is slightly more','line_number':899,'multiline':False]['text':' complicated. This is the lesser of two evils.','line_number':900,'multiline':False]['text':' input_logger = env_c[dtype_cast_node.name]','line_number':901,'multiline':False]['text':' Find the first node in the subgraph','line_number':902,'multiline':False]['text':' type: ignore[assignment]','line_number':905,'multiline':False]['text':' hook up a logger to the mod_a copy','line_number':915,'multiline':False]['text':' subgraph so far:','line_number':922,'multiline':False]['text':'','line_number':923,'multiline':False]['text':'       dtype_cast_node -> (logger_a_input)? -> subgraph_a_copy -> logger_a','line_number':924,'multiline':False]['text':'                  /','line_number':925,'multiline':False]['text':' (prev_node_c)+ -> (logger_c_input)? -> node_start_c','line_number':926,'multiline':False]['text':' hook up a logger to the mod_b copy','line_number':930,'multiline':False]['text':' subgraph so far:','line_number':937,'multiline':False]['text':'','line_number':938,'multiline':False]['text':'       dtype_cast_node -> (logger_a_input)? -> subgraph_a_copy -> logger_a','line_number':939,'multiline':False]['text':'                  /','line_number':940,'multiline':False]['text':' (prev_node_c+) -> (logger_c_input)? -> node_start_c -> ... -> node_end_c -> logger_c','line_number':941,'multiline':False]['text':'','line_number':942,'multiline':False]['text':' Note: node_start_c may be the same node as node_end_c, or they','line_number':943,'multiline':False]['text':' may have nodes inbetween.','line_number':944,'multiline':False]