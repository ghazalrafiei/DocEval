['text':' NOTE: [auto-functionalizing custom ops]','line_number':17,'multiline':False]['text':' Users may wish to torch.compile custom ops that mutate their inputs.','line_number':18,'multiline':False]['text':' torch.compile will automatically support this op without anyone needing','line_number':19,'multiline':False]['text':' to provide a functionalization kernel for it. Here's how.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' Let's say we have a hypothetical mylib::sin_(Tensor(a!) x) -> ()','line_number':22,'multiline':False]['text':' op. First, when FakeTensor sees this op:','line_number':23,'multiline':False]['text':' - If the schema says it returns nothing, we can generate a trivial','line_number':24,'multiline':False]['text':'   FakeTensor rule for it (that returns nothing).','line_number':25,'multiline':False]['text':' - Otherwise, the user needs to provide a FakeTensor rule (abstract impl)','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' Next, when Python FunctionalTensor sees the op, it will functionalize','line_number':28,'multiline':False]['text':' it by emitting a call to an auto_functionalize(op, ["x"], {"x": ...})','line_number':29,'multiline':False]['text':' HOP and replacing the mutated inputs with corresponding outputs of this HOP.','line_number':30,'multiline':False]['text':' This HOP effectively runs the functional version of the op when','line_number':31,'multiline':False]['text':' called: it clones inputs that will be mutated, runs the op, and','line_number':32,'multiline':False]['text':' then returns (output, Tensors with the new values)','line_number':33,'multiline':False]['text':' We control the built-ins. These may (in rare cases)','line_number':73,'multiline':False]['text':' do input metadata mutation (which we have banned on custom ops)','line_number':74,'multiline':False]['text':' Not yet supported: other Tensor types. This includes things like','line_number':93,'multiline':False]['text':' Tensor[], Tensor?[], Tensor[]?.','line_number':94,'multiline':False]['text':' The returns must not alias anything','line_number':97,'multiline':False]['text':' Not yet supported: List[Tensor] return.','line_number':101,'multiline':False]['text':' List of the name of args that get mutated (according to the schema)','line_number':175,'multiline':False]['text':' All of the (args, kwargs), but all as kwargs. The names for the','line_number':177,'multiline':False]['text':' args come from the schema. This makes it easier for us to work with them.','line_number':178,'multiline':False]['text':' NB: torch_dispatch kwargs are the args defined as kwarg-only in the schema','line_number':184,'multiline':False]['text':' type: ignore[arg-type]','line_number':190,'multiline':False]['text':' type: ignore[arg-type]','line_number':193,'multiline':False]['text':' Can be None if input was `Tensor(a!)?`','line_number':197,'multiline':False]