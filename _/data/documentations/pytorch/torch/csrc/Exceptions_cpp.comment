['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':23,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':27,'multiline':False]['text':' Set the doc string here since _add_docstr throws malloc errors if tp_doc is','line_number':31,'multiline':False]['text':' modified for an error class.','line_number':32,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':33,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':60,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':71,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':81,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':92,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-assignment-in-if-condition)','line_number':103,'multiline':False]['text':' Translate Aten types to their respective pytorch ones','line_number':120,'multiline':False]['text':' TODO: remove torch.(cuda.|)sparse.*Tensor items?','line_number':123,'multiline':False]['text':' Avoid doing any work if no types need translated','line_number':190,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':206,'multiline':False]['text':' Ensure that the string is null terminated','line_number':210,'multiline':False]['text':' Get the Python warning type for a warning','line_number':279,'multiline':False]['text':'/ See NOTE [ Conversion Cpp Python Warning ] for noexcept justification','line_number':292,'multiline':False]['text':'/ NOLINTNEXTLINE(bugprone-exception-escape)','line_number':293,'multiline':False]['text':' This (combined with PyErr_Restore below) also works when no python','line_number':303,'multiline':False]['text':' error has been set yet','line_number':304,'multiline':False]['text':' Sets the source location from the warning','line_number':315,'multiline':False]['text':' Note: PyErr_WarnExplicit will disregard Python's warning filter','line_number':316,'multiline':False]['text':' and always appear. This is in contrast to PyErr_WarnEx,','line_number':317,'multiline':False]['text':' which respects the warning filter.','line_number':318,'multiline':False]['text':'category=','line_number':320,'multiline':True]['text':'message=','line_number':321,'multiline':True]['text':'filename=','line_number':322,'multiline':True]['text':'lineno=','line_number':323,'multiline':True]['text':'module=','line_number':324,'multiline':True]['text':'registry=','line_number':325,'multiline':True]['text':' Lets Python set the source location and puts the C++ warning','line_number':327,'multiline':False]['text':' location into the message.','line_number':328,'multiline':False]['text':' PyErr_Print prints the traceback to sys.stderr and','line_number':339,'multiline':False]['text':' clears the error indicator','line_number':340,'multiline':False]['text':'/ A warning raised an error, we need to force the parent','line_number':349,'multiline':False]['text':'/ function to return an error code.','line_number':350,'multiline':False]['text':' namespace torch','line_number':359,'multiline':False]