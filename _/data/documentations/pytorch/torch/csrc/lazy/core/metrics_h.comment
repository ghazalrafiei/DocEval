['text':'*
 * This file is adapted from PyTorch/XLA
 * https://github.com/pytorch/xla/blob/master/third_party/xla_client/metrics.h
 ','line_number':1,'multiline':True]['text':' Class used to collect time-stamped numeric samples. The samples are stored in','line_number':32,'multiline':False]['text':' a circular buffer whose size can be configured at constructor time.','line_number':33,'multiline':False]['text':' Creates a new MetricData object with the internal circular buffer storing','line_number':36,'multiline':False]['text':' max_samples samples. The repr_fn argument allow to specify a function which','line_number':37,'multiline':False]['text':' pretty-prints a sample value.','line_number':38,'multiline':False]['text':' Returns the total values of all the samples being posted to this metric.','line_number':41,'multiline':False]['text':' Returns a vector with all the current samples, from the oldest to the','line_number':48,'multiline':False]['text':' newer. If accumulator is not nullptr, it will receive the current value of','line_number':49,'multiline':False]['text':' the metrics' accumulator (the sum of all posted values). If total_samples','line_number':50,'multiline':False]['text':' is not nullptr, it will receive the count of the posted values.','line_number':51,'multiline':False]['text':' Counters are a very lightweight form of metrics which do not need to track','line_number':72,'multiline':False]['text':' sample time.','line_number':73,'multiline':False]['text':' Registers a new metric in the global arena.','line_number':105,'multiline':False]['text':' Emits the value in a to_string() conversion.','line_number':137,'multiline':False]['text':' Emits the value in a humanized bytes representation.','line_number':139,'multiline':False]['text':' Emits the value in a humanized time representation. The value is expressed in','line_number':141,'multiline':False]['text':' nanoseconds EPOCH time.','line_number':142,'multiline':False]['text':' The typical use of a Metric is one in which it gets created either in a','line_number':145,'multiline':False]['text':' global scope context:','line_number':146,'multiline':False]['text':'   static Metric* metric = new Metric("RpcCount");','line_number':147,'multiline':False]['text':' Or within a function scope:','line_number':148,'multiline':False]['text':'   void MyFunction(...) {','line_number':149,'multiline':False]['text':'     static Metric* metric = new Metric("RpcCount");','line_number':150,'multiline':False]['text':'     ...','line_number':151,'multiline':False]['text':'     metric->AddSample(ts_nanos, some_value);','line_number':152,'multiline':False]['text':'   }','line_number':153,'multiline':False]['text':' A Counter is a lightweight form of metric which tracks an integer value which','line_number':185,'multiline':False]['text':' can increase or decrease.','line_number':186,'multiline':False]['text':' A typical use is as:','line_number':187,'multiline':False]['text':'   static Counter* counter = new Counter("MyCounter");','line_number':188,'multiline':False]['text':'   ...','line_number':189,'multiline':False]['text':'   counter->AddValue(+1);','line_number':190,'multiline':False]['text':' Creates a report with the current metrics statistics.','line_number':227,'multiline':False]['text':' Creates a report with the selected metrics statistics.','line_number':230,'multiline':False]['text':' Returns the currently registered metric names. Note that the list can grow','line_number':235,'multiline':False]['text':' since metrics are usually function intialized (they are static function','line_number':236,'multiline':False]['text':' variables).','line_number':237,'multiline':False]['text':' Retrieves the metric data of a given metric, or nullptr if such metric does','line_number':240,'multiline':False]['text':' not exist.','line_number':241,'multiline':False]['text':' Returns the currently registered counter names. Note that the list can grow','line_number':244,'multiline':False]['text':' since counters are usually function intialized (they are static function','line_number':245,'multiline':False]['text':' variables).','line_number':246,'multiline':False]['text':' Retrieves the counter data of a given counter, or nullptr if such counter','line_number':249,'multiline':False]['text':' does not exist.','line_number':250,'multiline':False]['text':' Retrieves the current EPOCH time in nanoseconds.','line_number':253,'multiline':False]['text':' Scope based utility class TORCH_API to measure the time the code takes within','line_number':256,'multiline':False]['text':' a given C++ scope.','line_number':257,'multiline':False]['text':' namespace lazy','line_number':285,'multiline':False]['text':' namespace torch','line_number':286,'multiline':False]