['text':' The Kind of operation a Node can be associated to.','line_number':34,'multiline':False]['text':' Retrieves an existing operation object, or creates a new one. Operations','line_number':55,'multiline':False]['text':' that are specific to lazy tensors, should live within the 'lazy_tensors::'','line_number':56,'multiline':False]['text':' namespace.','line_number':57,'multiline':False]['text':' A node in the graph. Nodes for operations which require extra data to be','line_number':74,'multiline':False]['text':' stored for lowering should inherit from this class and add an operation','line_number':75,'multiline':False]['text':' specific member there. For example, a constant might create a new','line_number':76,'multiline':False]['text':' NodeConstant class (inheriting from Node) with an extra lazy_tensors::Literal','line_number':77,'multiline':False]['text':' field, or a tensor value might create a new NodeTensor with a computation','line_number':78,'multiline':False]['text':' client data handle in it.','line_number':79,'multiline':False]['text':' Creates a new node with the given op name. The op is a unique identifier','line_number':84,'multiline':False]['text':' for the operation. The num_outputs tells how many outputs a given operation','line_number':85,'multiline':False]['text':' generates.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' None leaf node's node_hash does not contains shape information always.','line_number':88,'multiline':False]['text':' So we pass in the hash value rather than a function.','line_number':89,'multiline':False]['text':' Construct node with operands and shapes','line_number':92,'multiline':False]['text':' Construct node with operands and shape generated from a function','line_number':99,'multiline':False]['text':' Construct node with operands and no shape','line_number':106,'multiline':False]['text':' Construct node with shape and no operands','line_number':109,'multiline':False]['text':' Retrieves the full shape of the IR Node.','line_number':122,'multiline':False]['text':' Add the shape computed by the shape_fn','line_number':127,'multiline':False]['text':' Compute the shape using the provided shape_fn if not previously cached','line_number':130,'multiline':False]['text':' Gets operand at index i if index is valid, or kNullOutput otherwise.','line_number':137,'multiline':False]['text':' Returns the hash of the dag used to look up the compiled graph','line_number':140,'multiline':False]['text':' Returns the hash of the dag used to for shape caching','line_number':143,'multiline':False]['text':' The ID of the operation captured by this node.','line_number':163,'multiline':False]['text':' The IR specific metadata attached to the IR node.','line_number':167,'multiline':False]['text':' The IR framework user can attach a user defined metadata object deriving','line_number':169,'multiline':False]['text':' from UserMetaData.','line_number':170,'multiline':False]['text':' Adds node's index output number as operand.','line_number':174,'multiline':False]['text':' A node holds a real reference to its operands.','line_number':178,'multiline':False]['text':' Outputs do not hold references on the nodes, and neither do the uses, since','line_number':180,'multiline':False]['text':' otherwise we get into circular reference counting.','line_number':181,'multiline':False]['text':' Note: Keep this version of NodeCast for smooth PyTorch/XLA migration, and','line_number':190,'multiline':False]['text':' clean up once the migration is done.','line_number':191,'multiline':False]['text':' TODO: Some IR classes share the same opkind, such as Mean and MeanDim, so','line_number':209,'multiline':False]['text':' static_cast is not safe here. Unless we have opkind unique for each class,','line_number':210,'multiline':False]['text':' we have to use dynamic_cast here.','line_number':211,'multiline':False]['text':' Represents a specific output produced by a node. Since the output of a node','line_number':215,'multiline':False]['text':' can be composed by multiple outputs, the node+index coordinates fully qualify','line_number':216,'multiline':False]['text':' each single output.','line_number':217,'multiline':False]['text':' To compare the operands of to-be-constructed node and to-be-reused node','line_number':234,'multiline':False]['text':' The node providing the output.','line_number':247,'multiline':False]['text':' The index in the node's output this output refers to.','line_number':249,'multiline':False]['text':' Represents an input/operand for a Node object.','line_number':261,'multiline':False]['text':' implicit ','line_number':264,'multiline':True]['text':' implicit ','line_number':266,'multiline':True]['text':' namespace lazy','line_number':292,'multiline':False]['text':' namespace torch','line_number':293,'multiline':False]['text':' Explicit template instantiation to make ArrayRef<Value> work','line_number':296,'multiline':False]['text':' namespace c10','line_number':298,'multiline':False]