['text':' FBCODE_CAFFE2 || OVRSOURCE','line_number':19,'multiline':False]['text':' TODO(whc) backend 'device' related APIs are not very clear, this code could','line_number':26,'multiline':False]['text':' be simplified but it should probably be done together with','line_number':27,'multiline':False]['text':' designing/refactoring the overall approach to get/set of default eager/lazy','line_number':28,'multiline':False]['text':' device types','line_number':29,'multiline':False]['text':'want_all=','line_number':81,'multiline':True]['text':'want_all=','line_number':92,'multiline':True]['text':' TODO(whc) this API should probably change from vector<string> to','line_number':104,'multiline':False]['text':' vector<c10::device> but in a separate PR','line_number':105,'multiline':False]['text':' TODO: Add support of non-empty devices.','line_number':122,'multiline':False]['text':' !(defined(FBCODE_CAFFE2) || defined(OVRSOURCE))','line_number':215,'multiline':False]['text':'
   * Return tensor ids and tensors for DeviceData nodes.
   * TODO(shunting) revisit this API for XLA
   ','line_number':218,'multiline':True]['text':' dedup DeviceData by handle','line_number':247,'multiline':False]['text':'
             * If the TSData contains a tensor, then the tensor id will uniquely
             * identify the tensor. We use that tensor id to find the tensor in
             * other places: e.g. in the python forward method parameters.
             *
             * If the TSData contains a scalar, the tensor id itself is not
             * important. We reuse the scalar value in future calls.
             ','line_number':253,'multiline':True]['text':' !(defined(FBCODE_CAFFE2) || defined(OVRSOURCE))','line_number':275,'multiline':False]['text':' TODO(shunting) revisit this part for XLA','line_number':277,'multiline':False]['text':' TODO implement a fallback mechanism, or make sure those entries never get kicked out','line_number':290,'multiline':False]['text':' !(defined(FBCODE_CAFFE2) || defined(OVRSOURCE))','line_number':307,'multiline':False]['text':' !(defined(FBCODE_CAFFE2) || defined(OVRSOURCE))','line_number':323,'multiline':False]['text':' GetPythonFramesFunction() has not ever worked with torchdeploy/multipy','line_number':326,'multiline':False]['text':' possibly becuase GetPythonFrames resolves to external cpython rather','line_number':327,'multiline':False]['text':' than embedded cpython. So far this problem has only been observed','line_number':328,'multiline':False]['text':' internally, so we will just block it off there.','line_number':329,'multiline':False]['text':' When libtorch_python is loaded, we register the python frame getter','line_number':333,'multiline':False]['text':' otherwise, debug util simply omits python frames','line_number':334,'multiline':False]['text':' USE_DEPLOY','line_number':337,'multiline':False]['text':' namespace lazy','line_number':340,'multiline':False]['text':' namespace torch','line_number':341,'multiline':False]