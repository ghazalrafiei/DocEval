['text':'/ Constructs a new DataLoader from a `dataset` to sample from, `options`','line_number':32,'multiline':False]['text':'/ to configure the DataLoader with, and a `sampler` that specifies the','line_number':33,'multiline':False]['text':'/ sampling strategy.','line_number':34,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':42,'multiline':False]['text':'/ Returns an iterator into the DataLoader. The lifetime of the iterator is','line_number':47,'multiline':False]['text':'/ bound to the DataLoader. In C++ standards language, the category of the','line_number':48,'multiline':False]['text':'/ iterator is `OutputIterator`. See','line_number':49,'multiline':False]['text':'/ https://en.cppreference.com/w/cpp/named_req/OutputIterator for what this','line_number':50,'multiline':False]['text':'/ means. In short: you may increment the iterator and dereference it, but','line_number':51,'multiline':False]['text':'/ cannot go back, or step forward more than one position at a time. When the','line_number':52,'multiline':False]['text':'/ DataLoader is exhausted, it will compare equal with the special','line_number':53,'multiline':False]['text':'/ "sentinel" iterator returned by `DataLoader::end()`. Most of the time, you','line_number':54,'multiline':False]['text':'/ should only use range-for loops to loop over the DataLoader, but','line_number':55,'multiline':False]['text':'/ standard algorithms like `std::copy(dataloader.begin(), dataloader.end(),','line_number':56,'multiline':False]['text':'/ output_iterator)`  are supported too.','line_number':57,'multiline':False]['text':'/ Returns a special "sentinel" iterator that compares equal with a','line_number':68,'multiline':False]['text':'/ non-sentinel iterator once the DataLoader is exhausted.','line_number':69,'multiline':False]['text':'/ Joins the DataLoader's worker threads and drains internal queues.','line_number':74,'multiline':False]['text':'/ This function may only be invoked from the main thread (in which the','line_number':75,'multiline':False]['text':'/ DataLoader lives).','line_number':76,'multiline':False]['text':' Send one 'quit' message per worker. Since a worker dies (exits its','line_number':82,'multiline':False]['text':' thread) after receiving this message, each `QuitWorker()` message will be','line_number':83,'multiline':False]['text':' read by exactly one worker.','line_number':84,'multiline':False]['text':' Suppress unused variable warning','line_number':86,'multiline':False]['text':'/ Returns the options with which the DataLoader was configured.','line_number':95,'multiline':False]['text':'/ Simple mix-in to give something a sequence number.','line_number':101,'multiline':False]['text':'/ A `Job` is either a `BatchRequest` (new indices to fetch data at) or a','line_number':110,'multiline':False]['text':'/ `QuitWorker` object, to indicate the worker should shut down.','line_number':111,'multiline':False]['text':'/ The finished result of a job.','line_number':121,'multiline':False]['text':'/ Subclass hook for getting the next batch request. The stateless case will','line_number':132,'multiline':False]['text':'/ ask the sampler for a new batch request (e.g. a vector of indices), while','line_number':133,'multiline':False]['text':'/ the stateful one will simply return the batch size.','line_number':134,'multiline':False]['text':'/ Resets the internal state of the DataLoader, optionally pre-fetching','line_number':137,'multiline':False]['text':'/ new jobs.','line_number':138,'multiline':False]['text':'/ Schedules `requested_jobs` many new batches to be fetched. The actual','line_number':146,'multiline':False]['text':'/ number of jobs scheduled may be less if the DataLoader exhausts.','line_number':147,'multiline':False]['text':' Suppress unused variable','line_number':150,'multiline':False]['text':'/ Schedules the maximum number of jobs (based on the `max_jobs` option).','line_number':159,'multiline':False]['text':'/ Returns the next batch of data, or an empty `optional` if the DataLoader','line_number':164,'multiline':False]['text':'/ is exhausted. This operation will block until a batch is available if one','line_number':165,'multiline':False]['text':'/ is still expected.','line_number':166,'multiline':False]['text':'/ The function that worker threads run.','line_number':183,'multiline':False]['text':'/ Convenience method that calls `shuttle_.push_job()` with the next sequence','line_number':199,'multiline':False]['text':'/ number.','line_number':200,'multiline':False]['text':'/ Convenience method that gets the next result from the sequencer.','line_number':206,'multiline':False]['text':'/ Convenience method that creates a new sequencer based on the','line_number':212,'multiline':False]['text':'/ `enforce_ordering` option.','line_number':213,'multiline':False]['text':'/ The options the DataLoader was configured with.','line_number':222,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':223,'multiline':False]['text':'/ The dataset for the main thread, only has a value if the number of','line_number':226,'multiline':False]['text':'/ worker threads was configured as zero, meaning the main thread has to do','line_number':227,'multiline':False]['text':'/ all the work (synchronously). NOTE: Really want this to be on the heap','line_number':228,'multiline':False]['text':'/ when empty, therefore `unique_ptr` and not `optional`.','line_number':229,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':230,'multiline':False]['text':'/ The sequence number for the *next* batch to be retrieved from the','line_number':233,'multiline':False]['text':'/ dataset.','line_number':234,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':235,'multiline':False]['text':'/ The worker threads, running the `worker_thread()` method.','line_number':238,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':239,'multiline':False]['text':'/ The `DataShuttle` which takes care of the life cycle of a job.','line_number':242,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':243,'multiline':False]['text':'/ The `Sequencer`, which handles optional ordering of batches.','line_number':246,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':247,'multiline':False]['text':'/ True if the DataLoader has joined its worker threads.','line_number':250,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':251,'multiline':False]['text':' namespace data','line_number':254,'multiline':False]['text':' namespace torch','line_number':255,'multiline':False]