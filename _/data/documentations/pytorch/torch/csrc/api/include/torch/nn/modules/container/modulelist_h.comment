['text':'/ A list of `Module`s that registers its elements.','line_number':13,'multiline':False]['text':'/','line_number':14,'multiline':False]['text':'/ \rst','line_number':15,'multiline':False]['text':'/ .. code-block:: cpp','line_number':16,'multiline':False]['text':'/','line_number':17,'multiline':False]['text':'/   torch::nn::ModuleList mlist(','line_number':18,'multiline':False]['text':'/     torch::nn::Linear(3, 4),','line_number':19,'multiline':False]['text':'/     torch::nn::BatchNorm1d(4),','line_number':20,'multiline':False]['text':'/     torch::nn::Dropout(0.5)','line_number':21,'multiline':False]['text':'/   );','line_number':22,'multiline':False]['text':'/','line_number':23,'multiline':False]['text':'/   for (const auto &module : *mlist) {','line_number':24,'multiline':False]['text':'/     module->pretty_print(std::cout);','line_number':25,'multiline':False]['text':'/   }','line_number':26,'multiline':False]['text':'/','line_number':27,'multiline':False]['text':'/ \endrst','line_number':28,'multiline':False]['text':'/','line_number':29,'multiline':False]['text':'/ Why should you use `ModuleList` instead of a simple `std::vector`? The value','line_number':30,'multiline':False]['text':'/ a `ModuleList` provides over manually calling a sequence of modules is that','line_number':31,'multiline':False]['text':'/ it allows treating the whole container *as a single module*, such that','line_number':32,'multiline':False]['text':'/ performing a transformation on the `ModuleList` applies to each of the','line_number':33,'multiline':False]['text':'/ modules it stores (which are each a registered submodule of the','line_number':34,'multiline':False]['text':'/ `ModuleList`). For example, calling','line_number':35,'multiline':False]['text':'/ `.to(torch::kCUDA)` on a `ModuleList` will move each module in the list to','line_number':36,'multiline':False]['text':'/ CUDA memory. For example:','line_number':37,'multiline':False]['text':'/','line_number':38,'multiline':False]['text':'/ \rst','line_number':39,'multiline':False]['text':'/ .. code-block:: cpp','line_number':40,'multiline':False]['text':'/','line_number':41,'multiline':False]['text':'/   torch::nn::ModuleList mlist(','line_number':42,'multiline':False]['text':'/     torch::nn::Linear(3, 4),','line_number':43,'multiline':False]['text':'/     torch::nn::BatchNorm1d(4),','line_number':44,'multiline':False]['text':'/     torch::nn::Dropout(0.5)','line_number':45,'multiline':False]['text':'/   );','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/   // Convert all modules to CUDA.','line_number':48,'multiline':False]['text':'/   mlist->to(torch::kCUDA);','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/ \endrst','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ Finally, `ModuleList` provides a lightweight container API, such as allowing','line_number':53,'multiline':False]['text':'/ iteration over submodules, positional access, adding a new module after','line_number':54,'multiline':False]['text':'/ construction via `push_back`, as well as joining two `ModuleList`s via','line_number':55,'multiline':False]['text':'/ `extend`.','line_number':56,'multiline':False]['text':'/ Constructs the `ModuleList` from a variadic list of modules.','line_number':64,'multiline':False]['text':'/ Special cloning function for `ModuleList` because it does not use','line_number':71,'multiline':False]['text':'/ `reset()`.','line_number':72,'multiline':False]['text':'/ `reset()` is empty for `ModuleList`, since it does not have parameters of','line_number':82,'multiline':False]['text':'/ its own.','line_number':83,'multiline':False]['text':'/ Pretty prints the `ModuleList` module into the given `stream`.','line_number':86,'multiline':False]['text':'/ Adds a new `Module` to the `ModuleList` container, moving or copying','line_number':97,'multiline':False]['text':'/ it into a `shared_ptr` internally. This method allows passing value types,','line_number':98,'multiline':False]['text':'/ and letting the container deal with the boxing.','line_number':99,'multiline':False]['text':'/ Unwraps the contained module of a `ModuleHolder` and adds it to the','line_number':106,'multiline':False]['text':'/ `ModuleList`.','line_number':107,'multiline':False]['text':'/ Iterates over the container and calls `push_back()` on each value.','line_number':113,'multiline':False]['text':'/ Returns an iterator to the start of the `ModuleList`.','line_number':121,'multiline':False]['text':'/ Returns a const iterator to the start of the `ModuleList`.','line_number':126,'multiline':False]['text':'/ Returns an iterator to the end of the `ModuleList`.','line_number':131,'multiline':False]['text':'/ Returns a const iterator to the end of the `ModuleList`.','line_number':136,'multiline':False]['text':'/ Attempts to return the module at the given index as the requested type.','line_number':141,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':142,'multiline':False]['text':'/ match.','line_number':143,'multiline':False]['text':'/ Attempts to return the module at the given index as the requested type.','line_number':160,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':161,'multiline':False]['text':'/ match.','line_number':162,'multiline':False]['text':'/ Attempts to return a `std::shared_ptr` whose dynamic type is that of the','line_number':179,'multiline':False]['text':'/ underlying module at the given index. Throws an exception if the index is','line_number':180,'multiline':False]['text':'/ out of bounds.','line_number':181,'multiline':False]['text':'/ Attempts to return a `std::shared_ptr` whose type is the one provided.','line_number':187,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':188,'multiline':False]['text':'/ match.','line_number':189,'multiline':False]['text':'/ Like `ptr(index)`.','line_number':199,'multiline':False]['text':' This is the only method we can call without a type.','line_number':201,'multiline':False]['text':'/ The current size of the `ModuleList` container.','line_number':205,'multiline':False]['text':'/ True if there are no modules in the `ModuleList`.','line_number':210,'multiline':False]['text':' Suppress unused variable warning','line_number':226,'multiline':False]['text':'/ Unwraps the contained module of a `ModuleHolder` and inserts it in the','line_number':233,'multiline':False]['text':'/ `ModuleList`.','line_number':234,'multiline':False]['text':'/ inserts a new `Module` to the `ModuleList` container, moving or copying','line_number':240,'multiline':False]['text':'/ it into a `shared_ptr` internally. This method allows passing value types,','line_number':241,'multiline':False]['text':'/ and letting the container deal with the boxing.','line_number':242,'multiline':False]['text':' Recursively calls this method, until the parameter pack only thas this','line_number':253,'multiline':False]['text':' entry left. Then calls `push_back()` a final time (above).','line_number':254,'multiline':False]['text':'/ The base case, when the list of modules is empty.','line_number':258,'multiline':False]['text':' Box the AnyModules to give ModuleList reference semantics, like the rest of','line_number':261,'multiline':False]['text':' the API. Note that this is not required otherwise, this could just be a','line_number':262,'multiline':False]['text':' `vector<AnyModule>`.','line_number':263,'multiline':False]['text':'/ A `ModuleHolder` subclass for `ModuleListImpl`.','line_number':267,'multiline':False]['text':'/ See the documentation for `ModuleListImpl` class to learn what methods it','line_number':268,'multiline':False]['text':'/ provides, or the documentation for `ModuleHolder` to learn about PyTorch's','line_number':269,'multiline':False]['text':'/ module storage semantics.','line_number':270,'multiline':False]['text':' namespace nn','line_number':273,'multiline':False]['text':' namespace torch','line_number':274,'multiline':False]