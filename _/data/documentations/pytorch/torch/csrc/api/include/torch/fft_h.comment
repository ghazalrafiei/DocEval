['text':'/ Computes the 1 dimensional fast Fourier transform over a given dimension.','line_number':8,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.fft.','line_number':9,'multiline':False]['text':'/','line_number':10,'multiline':False]['text':'/ Example:','line_number':11,'multiline':False]['text':'/ ```','line_number':12,'multiline':False]['text':'/ auto t = torch::randn(128, dtype=kComplexDouble);','line_number':13,'multiline':False]['text':'/ torch::fft::fft(t);','line_number':14,'multiline':False]['text':'/ ```','line_number':15,'multiline':False]['text':'/ Computes the 1 dimensional inverse Fourier transform over a given dimension.','line_number':24,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.ifft.','line_number':25,'multiline':False]['text':'/','line_number':26,'multiline':False]['text':'/ Example:','line_number':27,'multiline':False]['text':'/ ```','line_number':28,'multiline':False]['text':'/ auto t = torch::randn(128, dtype=kComplexDouble);','line_number':29,'multiline':False]['text':'/ torch::fft::ifft(t);','line_number':30,'multiline':False]['text':'/ ```','line_number':31,'multiline':False]['text':'/ Computes the 2-dimensional fast Fourier transform over the given dimensions.','line_number':40,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.fft2.','line_number':41,'multiline':False]['text':'/','line_number':42,'multiline':False]['text':'/ Example:','line_number':43,'multiline':False]['text':'/ ```','line_number':44,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':45,'multiline':False]['text':'/ torch::fft::fft2(t);','line_number':46,'multiline':False]['text':'/ ```','line_number':47,'multiline':False]['text':'/ Computes the inverse of torch.fft.fft2','line_number':56,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.ifft2.','line_number':57,'multiline':False]['text':'/','line_number':58,'multiline':False]['text':'/ Example:','line_number':59,'multiline':False]['text':'/ ```','line_number':60,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':61,'multiline':False]['text':'/ torch::fft::ifft2(t);','line_number':62,'multiline':False]['text':'/ ```','line_number':63,'multiline':False]['text':'/ Computes the N dimensional fast Fourier transform over given dimensions.','line_number':72,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.fftn.','line_number':73,'multiline':False]['text':'/','line_number':74,'multiline':False]['text':'/ Example:','line_number':75,'multiline':False]['text':'/ ```','line_number':76,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':77,'multiline':False]['text':'/ torch::fft::fftn(t);','line_number':78,'multiline':False]['text':'/ ```','line_number':79,'multiline':False]['text':'/ Computes the N dimensional fast Fourier transform over given dimensions.','line_number':88,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.ifftn.','line_number':89,'multiline':False]['text':'/','line_number':90,'multiline':False]['text':'/ Example:','line_number':91,'multiline':False]['text':'/ ```','line_number':92,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':93,'multiline':False]['text':'/ torch::fft::ifftn(t);','line_number':94,'multiline':False]['text':'/ ```','line_number':95,'multiline':False]['text':'/ Computes the 1 dimensional FFT of real input with onesided Hermitian output.','line_number':104,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.rfft.','line_number':105,'multiline':False]['text':'/','line_number':106,'multiline':False]['text':'/ Example:','line_number':107,'multiline':False]['text':'/ ```','line_number':108,'multiline':False]['text':'/ auto t = torch::randn(128);','line_number':109,'multiline':False]['text':'/ auto T = torch::fft::rfft(t);','line_number':110,'multiline':False]['text':'/ assert(T.is_complex() && T.numel() == 128 / 2 + 1);','line_number':111,'multiline':False]['text':'/ ```','line_number':112,'multiline':False]['text':'/ Computes the inverse of torch.fft.rfft','line_number':121,'multiline':False]['text':'/','line_number':122,'multiline':False]['text':'/ The input is a onesided Hermitian Fourier domain signal, with real-valued','line_number':123,'multiline':False]['text':'/ output. See https://pytorch.org/docs/master/fft.html#torch.fft.irfft','line_number':124,'multiline':False]['text':'/','line_number':125,'multiline':False]['text':'/ Example:','line_number':126,'multiline':False]['text':'/ ```','line_number':127,'multiline':False]['text':'/ auto T = torch::randn(128 / 2 + 1, torch::kComplexDouble);','line_number':128,'multiline':False]['text':'/ auto t = torch::fft::irfft(t, /*n=*/128);','line_number':129,'multiline':False]['text':'/ assert(t.is_floating_point() && T.numel() == 128);','line_number':130,'multiline':False]['text':'/ ```','line_number':131,'multiline':False]['text':'/ Computes the 2-dimensional FFT of real input. Returns a onesided Hermitian','line_number':140,'multiline':False]['text':'/ output. See https://pytorch.org/docs/master/fft.html#torch.fft.rfft2','line_number':141,'multiline':False]['text':'/','line_number':142,'multiline':False]['text':'/ Example:','line_number':143,'multiline':False]['text':'/ ```','line_number':144,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kDouble);','line_number':145,'multiline':False]['text':'/ torch::fft::rfft2(t);','line_number':146,'multiline':False]['text':'/ ```','line_number':147,'multiline':False]['text':'/ Computes the inverse of torch.fft.rfft2.','line_number':156,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.irfft2.','line_number':157,'multiline':False]['text':'/','line_number':158,'multiline':False]['text':'/ Example:','line_number':159,'multiline':False]['text':'/ ```','line_number':160,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':161,'multiline':False]['text':'/ torch::fft::irfft2(t);','line_number':162,'multiline':False]['text':'/ ```','line_number':163,'multiline':False]['text':'/ Computes the N dimensional FFT of real input with onesided Hermitian output.','line_number':172,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.rfftn','line_number':173,'multiline':False]['text':'/','line_number':174,'multiline':False]['text':'/ Example:','line_number':175,'multiline':False]['text':'/ ```','line_number':176,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kDouble);','line_number':177,'multiline':False]['text':'/ torch::fft::rfftn(t);','line_number':178,'multiline':False]['text':'/ ```','line_number':179,'multiline':False]['text':'/ Computes the inverse of torch.fft.rfftn.','line_number':188,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.irfftn.','line_number':189,'multiline':False]['text':'/','line_number':190,'multiline':False]['text':'/ Example:','line_number':191,'multiline':False]['text':'/ ```','line_number':192,'multiline':False]['text':'/ auto t = torch::randn({128, 128}, dtype=kComplexDouble);','line_number':193,'multiline':False]['text':'/ torch::fft::irfftn(t);','line_number':194,'multiline':False]['text':'/ ```','line_number':195,'multiline':False]['text':'/ Computes the 1 dimensional FFT of a onesided Hermitian signal','line_number':204,'multiline':False]['text':'/','line_number':205,'multiline':False]['text':'/ The input represents a Hermitian symmetric time domain signal. The returned','line_number':206,'multiline':False]['text':'/ Fourier domain representation of such a signal is a real-valued. See','line_number':207,'multiline':False]['text':'/ https://pytorch.org/docs/master/fft.html#torch.fft.hfft','line_number':208,'multiline':False]['text':'/','line_number':209,'multiline':False]['text':'/ Example:','line_number':210,'multiline':False]['text':'/ ```','line_number':211,'multiline':False]['text':'/ auto t = torch::randn(128 / 2 + 1, torch::kComplexDouble);','line_number':212,'multiline':False]['text':'/ auto T = torch::fft::hfft(t, /*n=*/128);','line_number':213,'multiline':False]['text':'/ assert(T.is_floating_point() && T.numel() == 128);','line_number':214,'multiline':False]['text':'/ ```','line_number':215,'multiline':False]['text':'/ Computes the inverse FFT of a real-valued Fourier domain signal.','line_number':224,'multiline':False]['text':'/','line_number':225,'multiline':False]['text':'/ The output is a onesided representation of the Hermitian symmetric time','line_number':226,'multiline':False]['text':'/ domain signal. See https://pytorch.org/docs/master/fft.html#torch.fft.ihfft.','line_number':227,'multiline':False]['text':'/','line_number':228,'multiline':False]['text':'/ Example:','line_number':229,'multiline':False]['text':'/ ```','line_number':230,'multiline':False]['text':'/ auto T = torch::randn(128, torch::kDouble);','line_number':231,'multiline':False]['text':'/ auto t = torch::fft::ihfft(T);','line_number':232,'multiline':False]['text':'/ assert(t.is_complex() && T.numel() == 128 / 2 + 1);','line_number':233,'multiline':False]['text':'/ ```','line_number':234,'multiline':False]['text':'/ Computes the 2-dimensional FFT of a Hermitian symmetric input signal.','line_number':243,'multiline':False]['text':'/','line_number':244,'multiline':False]['text':'/ The input is a onesided representation of the Hermitian symmetric time','line_number':245,'multiline':False]['text':'/ domain signal. See https://pytorch.org/docs/master/fft.html#torch.fft.hfft2.','line_number':246,'multiline':False]['text':'/','line_number':247,'multiline':False]['text':'/ Example:','line_number':248,'multiline':False]['text':'/ ```','line_number':249,'multiline':False]['text':'/ auto t = torch::randn({128, 65}, torch::kComplexDouble);','line_number':250,'multiline':False]['text':'/ auto T = torch::fft::hfft2(t, /*s=*/{128, 128});','line_number':251,'multiline':False]['text':'/ assert(T.is_floating_point() && T.numel() == 128 * 128);','line_number':252,'multiline':False]['text':'/ ```','line_number':253,'multiline':False]['text':'/ Computes the 2-dimensional IFFT of a real input signal.','line_number':262,'multiline':False]['text':'/','line_number':263,'multiline':False]['text':'/ The output is a onesided representation of the Hermitian symmetric time','line_number':264,'multiline':False]['text':'/ domain signal. See','line_number':265,'multiline':False]['text':'/ https://pytorch.org/docs/master/fft.html#torch.fft.ihfft2.','line_number':266,'multiline':False]['text':'/','line_number':267,'multiline':False]['text':'/ Example:','line_number':268,'multiline':False]['text':'/ ```','line_number':269,'multiline':False]['text':'/ auto T = torch::randn({128, 128}, torch::kDouble);','line_number':270,'multiline':False]['text':'/ auto t = torch::fft::hfft2(T);','line_number':271,'multiline':False]['text':'/ assert(t.is_complex() && t.size(1) == 65);','line_number':272,'multiline':False]['text':'/ ```','line_number':273,'multiline':False]['text':'/ Computes the N-dimensional FFT of a Hermitian symmetric input signal.','line_number':282,'multiline':False]['text':'/','line_number':283,'multiline':False]['text':'/ The input is a onesided representation of the Hermitian symmetric time','line_number':284,'multiline':False]['text':'/ domain signal. See https://pytorch.org/docs/master/fft.html#torch.fft.hfftn.','line_number':285,'multiline':False]['text':'/','line_number':286,'multiline':False]['text':'/ Example:','line_number':287,'multiline':False]['text':'/ ```','line_number':288,'multiline':False]['text':'/ auto t = torch::randn({128, 65}, torch::kComplexDouble);','line_number':289,'multiline':False]['text':'/ auto T = torch::fft::hfftn(t, /*s=*/{128, 128});','line_number':290,'multiline':False]['text':'/ assert(T.is_floating_point() && T.numel() == 128 * 128);','line_number':291,'multiline':False]['text':'/ ```','line_number':292,'multiline':False]['text':'/ Computes the N-dimensional IFFT of a real input signal.','line_number':301,'multiline':False]['text':'/','line_number':302,'multiline':False]['text':'/ The output is a onesided representation of the Hermitian symmetric time','line_number':303,'multiline':False]['text':'/ domain signal. See','line_number':304,'multiline':False]['text':'/ https://pytorch.org/docs/master/fft.html#torch.fft.ihfftn.','line_number':305,'multiline':False]['text':'/','line_number':306,'multiline':False]['text':'/ Example:','line_number':307,'multiline':False]['text':'/ ```','line_number':308,'multiline':False]['text':'/ auto T = torch::randn({128, 128}, torch::kDouble);','line_number':309,'multiline':False]['text':'/ auto t = torch::fft::hfft2(T);','line_number':310,'multiline':False]['text':'/ assert(t.is_complex() && t.size(1) == 65);','line_number':311,'multiline':False]['text':'/ ```','line_number':312,'multiline':False]['text':'/ Computes the discrete Fourier Transform sample frequencies for a signal of','line_number':321,'multiline':False]['text':'/ size n.','line_number':322,'multiline':False]['text':'/','line_number':323,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.fftfreq','line_number':324,'multiline':False]['text':'/','line_number':325,'multiline':False]['text':'/ Example:','line_number':326,'multiline':False]['text':'/ ```','line_number':327,'multiline':False]['text':'/ auto frequencies = torch::fft::fftfreq(128, torch::kDouble);','line_number':328,'multiline':False]['text':'/ ```','line_number':329,'multiline':False]['text':'d=','line_number':335,'multiline':True]['text':'/ Computes the sample frequencies for torch.fft.rfft with a signal of size n.','line_number':338,'multiline':False]['text':'/','line_number':339,'multiline':False]['text':'/ Like torch.fft.rfft, only the positive frequencies are included.','line_number':340,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.rfftfreq','line_number':341,'multiline':False]['text':'/','line_number':342,'multiline':False]['text':'/ Example:','line_number':343,'multiline':False]['text':'/ ```','line_number':344,'multiline':False]['text':'/ auto frequencies = torch::fft::rfftfreq(128, torch::kDouble);','line_number':345,'multiline':False]['text':'/ ```','line_number':346,'multiline':False]['text':'d=','line_number':352,'multiline':True]['text':'/ Reorders n-dimensional FFT output to have negative frequency terms first, by','line_number':355,'multiline':False]['text':'/ a torch.roll operation.','line_number':356,'multiline':False]['text':'/','line_number':357,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.fftshift','line_number':358,'multiline':False]['text':'/','line_number':359,'multiline':False]['text':'/ Example:','line_number':360,'multiline':False]['text':'/ ```','line_number':361,'multiline':False]['text':'/ auto x = torch::randn({127, 4});','line_number':362,'multiline':False]['text':'/ auto centred_fft = torch::fft::fftshift(torch::fft::fftn(x));','line_number':363,'multiline':False]['text':'/ ```','line_number':364,'multiline':False]['text':'/ Inverse of torch.fft.fftshift','line_number':371,'multiline':False]['text':'/','line_number':372,'multiline':False]['text':'/ See https://pytorch.org/docs/master/fft.html#torch.fft.ifftshift','line_number':373,'multiline':False]['text':'/','line_number':374,'multiline':False]['text':'/ Example:','line_number':375,'multiline':False]['text':'/ ```','line_number':376,'multiline':False]['text':'/ auto x = torch::randn({127, 4});','line_number':377,'multiline':False]['text':'/ auto shift = torch::fft::fftshift(x)','line_number':378,'multiline':False]['text':'/ auto unshift = torch::fft::ifftshift(shift);','line_number':379,'multiline':False]['text':'/ assert(torch::allclose(x, unshift));','line_number':380,'multiline':False]['text':'/ ```','line_number':381,'multiline':False]['text':' namespace fft','line_number':388,'multiline':False]['text':' namespace torch','line_number':389,'multiline':False]