['text':' For increased safety and more separated logic, this implementation of','line_number':17,'multiline':False]['text':' `Iterator` consists of a `ValidIterator` and a `SentinelIterator`. A','line_number':18,'multiline':False]['text':' `ValidIterator` yields new batches until the `DataLoader` is exhausted. While','line_number':19,'multiline':False]['text':' the `DataLoader` is not exhausted, `ValidIterator`s compare equal if they are','line_number':20,'multiline':False]['text':' the same object. When the `ValidIterator` becomes exhausted, it compares','line_number':21,'multiline':False]['text':' equal to the `SentinelIterator`, but not before. Half the code here is to','line_number':22,'multiline':False]['text':' implement double dispatch for the comparison. Got damnit, C++.','line_number':23,'multiline':False]['text':'/ Base class for the `ValidIterator` and `SentinelIterator`','line_number':31,'multiline':False]['text':'/ Fetches the next batch.','line_number':49,'multiline':False]['text':' If we didn't get the very first batch yet, get it now.','line_number':51,'multiline':False]['text':' Increment to the next batch.','line_number':55,'multiline':False]['text':'/ Returns the current batch. The precondition for this operation to not','line_number':59,'multiline':False]['text':'/ throw an exception is that it has been compared to the `SentinelIterator`','line_number':60,'multiline':False]['text':'/ and did not compare equal.','line_number':61,'multiline':False]['text':' If we didn't get the very first batch yet, get it now.','line_number':63,'multiline':False]['text':'/ Does double dispatch.','line_number':71,'multiline':False]['text':'/ A `ValidIterator` is equal to the `SentinelIterator` iff. the','line_number':76,'multiline':False]['text':'/ `ValidIterator` has reached the end of the dataloader.','line_number':77,'multiline':False]['text':' unused ','line_number':78,'multiline':True]['text':'/ Returns true if the memory address of `other` equals that of `this`.','line_number':83,'multiline':False]['text':'/ Gets the very first batch if it has not yet been fetched.','line_number':88,'multiline':False]['text':'/ Does double dispatch.','line_number':113,'multiline':False]['text':'/ Calls the comparison operator between `ValidIterator` and','line_number':118,'multiline':False]['text':'/ `SentinelIterator`.','line_number':119,'multiline':False]['text':'/ Sentinel iterators always compare equal.','line_number':124,'multiline':False]['text':' namespace detail','line_number':129,'multiline':False]['text':' Type aliases to make the class recognized as a proper iterator.','line_number':134,'multiline':False]['text':'/ Increments the iterator.','line_number':144,'multiline':False]['text':'/ Only permitted for valid iterators (not past the end).','line_number':145,'multiline':False]['text':'/ Returns the current batch.','line_number':151,'multiline':False]['text':'/ Only permitted for valid iterators (not past the end).','line_number':152,'multiline':False]['text':'/ Returns a pointer to the current batch.','line_number':157,'multiline':False]['text':'/ Only permitted for valid iterators (not past the end).','line_number':158,'multiline':False]['text':'/ Compares two iterators for equality.','line_number':163,'multiline':False]['text':'/ Compares two iterators for inequality.','line_number':168,'multiline':False]['text':'/ Points either to a `ValidIterator` or to a `SentinelIterator`.','line_number':174,'multiline':False]['text':' namespace data','line_number':177,'multiline':False]['text':' namespace torch','line_number':178,'multiline':False]