['text':'/ Compiles script code into an executable graph.','line_number':12,'multiline':False]['text':'/','line_number':13,'multiline':False]['text':'/ Takes a string containing functions in script syntax and compiles them into','line_number':14,'multiline':False]['text':'/ a module (graph). The returned module provides a `run_method` function','line_number':15,'multiline':False]['text':'/ that may be used to invoke the compiled functions.','line_number':16,'multiline':False]['text':'/','line_number':17,'multiline':False]['text':'/ For example:','line_number':18,'multiline':False]['text':'/ \rst','line_number':19,'multiline':False]['text':'/ .. code-block:: cpp','line_number':20,'multiline':False]['text':'/','line_number':21,'multiline':False]['text':'/   auto module = torch::jit::compile(R"JIT(','line_number':22,'multiline':False]['text':'/     def relu_script(a, b):','line_number':23,'multiline':False]['text':'/       return torch.relu(a + b)','line_number':24,'multiline':False]['text':'/     def test_while(a, i):','line_number':25,'multiline':False]['text':'/       while i < 10:','line_number':26,'multiline':False]['text':'/         a += a','line_number':27,'multiline':False]['text':'/         i += 1','line_number':28,'multiline':False]['text':'/       return a','line_number':29,'multiline':False]['text':'/   )JIT");','line_number':30,'multiline':False]['text':'/   IValue output = module->run_method("relu_script", a, b);','line_number':31,'multiline':False]['text':'/ \endrst','line_number':32,'multiline':False]['text':' namespace jit','line_number':35,'multiline':False]['text':' namespace torch','line_number':36,'multiline':False]