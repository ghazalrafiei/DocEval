['text':'/ Options for the `Upsample` module.','line_number':14,'multiline':False]['text':'/','line_number':15,'multiline':False]['text':'/ Example:','line_number':16,'multiline':False]['text':'/ ```','line_number':17,'multiline':False]['text':'/ Upsample','line_number':18,'multiline':False]['text':'/ model(UpsampleOptions().scale_factor(std::vector<double>({3})).mode(torch::kLinear).align_corners(false));','line_number':19,'multiline':False]['text':'/ ```','line_number':20,'multiline':False]['text':'/ output spatial sizes.','line_number':22,'multiline':False]['text':'/ multiplier for spatial size.','line_number':25,'multiline':False]['text':'/ the upsampling algorithm: one of "nearest", "linear", "bilinear",','line_number':28,'multiline':False]['text':'/ "bicubic" and "trilinear". Default: "nearest"','line_number':29,'multiline':False]['text':'/ if "True", the corner pixels of the input and output tensors are','line_number':39,'multiline':False]['text':'/ aligned, and thus preserving the values at those pixels. This only has','line_number':40,'multiline':False]['text':'/ effect when :attr:`mode` is "linear", "bilinear", "bicubic", or','line_number':41,'multiline':False]['text':'/ "trilinear". Default: "False"','line_number':42,'multiline':False]['text':'/ Options for `torch::nn::functional::interpolate`.','line_number':48,'multiline':False]['text':'/','line_number':49,'multiline':False]['text':'/ Example:','line_number':50,'multiline':False]['text':'/ ```','line_number':51,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':52,'multiline':False]['text':'/ F::interpolate(input,','line_number':53,'multiline':False]['text':'/ F::InterpolateFuncOptions().size(std::vector<int64_t>({4})).mode(torch::kNearest));','line_number':54,'multiline':False]['text':'/ ```','line_number':55,'multiline':False]['text':'/ output spatial sizes.','line_number':67,'multiline':False]['text':'/ multiplier for spatial size.','line_number':70,'multiline':False]['text':'/ the upsampling algorithm: one of "nearest", "linear", "bilinear",','line_number':73,'multiline':False]['text':'/ "bicubic", "trilinear", "area", "nearest-exact". Default: "nearest"','line_number':74,'multiline':False]['text':'/ Geometrically, we consider the pixels of the input and output as squares','line_number':77,'multiline':False]['text':'/ rather than points. If set to "True", the input and output tensors are','line_number':78,'multiline':False]['text':'/ aligned by the center points of their corner pixels, preserving the values','line_number':79,'multiline':False]['text':'/ at the corner pixels. If set to "False", the input and output tensors','line_number':80,'multiline':False]['text':'/ are aligned by the corner points of their corner pixels, and the','line_number':81,'multiline':False]['text':'/ interpolation uses edge value padding for out-of-boundary values, making','line_number':82,'multiline':False]['text':'/ this operation *independent* of input size when :attr:`scale_factor` is','line_number':83,'multiline':False]['text':'/ kept the same. This only has an effect when :attr:`mode` is "linear",','line_number':84,'multiline':False]['text':'/ "bilinear", "bicubic" or "trilinear". Default: "False"','line_number':85,'multiline':False]['text':'/ recompute the scale_factor for use in the','line_number':88,'multiline':False]['text':'/ interpolation calculation.  When `scale_factor` is passed as a parameter,','line_number':89,'multiline':False]['text':'/ it is used to compute the `output_size`.  If `recompute_scale_factor` is','line_number':90,'multiline':False]['text':'/ `true` or not specified, a new `scale_factor` will be computed based on','line_number':91,'multiline':False]['text':'/ the output and input sizes for use in the interpolation computation (i.e.','line_number':92,'multiline':False]['text':'/ the computation will be identical to if the computed `output_size` were','line_number':93,'multiline':False]['text':'/ passed-in explicitly).  Otherwise, the passed-in `scale_factor` will be','line_number':94,'multiline':False]['text':'/ used in the interpolation computation.  Note that when `scale_factor` is','line_number':95,'multiline':False]['text':'/ floating-point, the recomputed scale_factor may differ from the one passed','line_number':96,'multiline':False]['text':'/ in due to rounding and precision issues.','line_number':97,'multiline':False]['text':'/ flag to apply anti-aliasing. Using anti-alias','line_number':100,'multiline':False]['text':'/ option together with :attr:`align_corners` equals "False", interpolation','line_number':101,'multiline':False]['text':'/ result would match Pillow result for downsampling operation. Supported','line_number':102,'multiline':False]['text':'/ modes: "bilinear". Default: "False".','line_number':103,'multiline':False]['text':' namespace functional','line_number':107,'multiline':False]['text':' namespace nn','line_number':109,'multiline':False]['text':' namespace torch','line_number':110,'multiline':False]