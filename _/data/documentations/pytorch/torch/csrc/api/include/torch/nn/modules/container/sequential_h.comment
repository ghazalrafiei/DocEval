['text':'/ A list of `Module`s that acts as a `Module` itself.','line_number':24,'multiline':False]['text':'/','line_number':25,'multiline':False]['text':'/ A `Sequential` is fundamentally a list of `Module`s, each with a `forward()`','line_number':26,'multiline':False]['text':'/ method. `Sequential` provides a `forward()` method of its own, which accepts','line_number':27,'multiline':False]['text':'/ any input and forwards it to the first module it stores. It then "chains"','line_number':28,'multiline':False]['text':'/ outputs to inputs sequentially for each subsequent module, finally returning','line_number':29,'multiline':False]['text':'/ the output of the last module. For example:','line_number':30,'multiline':False]['text':'/','line_number':31,'multiline':False]['text':'/ \rst','line_number':32,'multiline':False]['text':'/ .. code-block:: cpp','line_number':33,'multiline':False]['text':'/','line_number':34,'multiline':False]['text':'/   torch::nn::Sequential seq(','line_number':35,'multiline':False]['text':'/     torch::nn::Linear(3, 4),','line_number':36,'multiline':False]['text':'/     torch::nn::BatchNorm1d(4),','line_number':37,'multiline':False]['text':'/     torch::nn::Dropout(0.5)','line_number':38,'multiline':False]['text':'/   );','line_number':39,'multiline':False]['text':'/','line_number':40,'multiline':False]['text':'/   auto output = seq->forward(torch::ones(3));','line_number':41,'multiline':False]['text':'/','line_number':42,'multiline':False]['text':'/ \endrst','line_number':43,'multiline':False]['text':'/','line_number':44,'multiline':False]['text':'/ This can conceptually be thought of as the following loop (using Python as','line_number':45,'multiline':False]['text':'/ pseudocode):','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/ \rst','line_number':48,'multiline':False]['text':'/ .. code-block:: python','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/   def forward(sequential, input):','line_number':51,'multiline':False]['text':'/     for module in sequential:','line_number':52,'multiline':False]['text':'/       input = module(input)','line_number':53,'multiline':False]['text':'/     return input','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/ \endrst','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/ Why should you use `Sequential` instead of a simple `std::vector`? The value','line_number':58,'multiline':False]['text':'/ a `Sequential` provides over manually calling a sequence of modules is that','line_number':59,'multiline':False]['text':'/ it allows treating the whole container *as a single module*, such that','line_number':60,'multiline':False]['text':'/ performing a transformation on the `Sequential` applies to each of the','line_number':61,'multiline':False]['text':'/ modules it stores (which are each a registered submodule of the','line_number':62,'multiline':False]['text':'/ `Sequential`). For example, calling','line_number':63,'multiline':False]['text':'/ `.to(torch::kCUDA)` on a `Sequential` will move each module in the list to','line_number':64,'multiline':False]['text':'/ CUDA memory. For example:','line_number':65,'multiline':False]['text':'/','line_number':66,'multiline':False]['text':'/ \rst','line_number':67,'multiline':False]['text':'/ .. code-block:: cpp','line_number':68,'multiline':False]['text':'/','line_number':69,'multiline':False]['text':'/   torch::nn::Sequential seq(','line_number':70,'multiline':False]['text':'/     torch::nn::Linear(3, 4),','line_number':71,'multiline':False]['text':'/     torch::nn::BatchNorm1d(4),','line_number':72,'multiline':False]['text':'/     torch::nn::Dropout(0.5)','line_number':73,'multiline':False]['text':'/   );','line_number':74,'multiline':False]['text':'/','line_number':75,'multiline':False]['text':'/   // Convert all modules to CUDA.','line_number':76,'multiline':False]['text':'/   seq->to(torch::kCUDA);','line_number':77,'multiline':False]['text':'/','line_number':78,'multiline':False]['text':'/ \endrst','line_number':79,'multiline':False]['text':'/','line_number':80,'multiline':False]['text':'/ Finally, `Sequential` provides a lightweight container API, such as allowing','line_number':81,'multiline':False]['text':'/ iteration over submodules, positional access, adding a new module after','line_number':82,'multiline':False]['text':'/ construction via `push_back`, as well as joining two `Sequential`s via','line_number':83,'multiline':False]['text':'/ `extend`.','line_number':84,'multiline':False]['text':'/','line_number':85,'multiline':False]['text':'/ \rst','line_number':86,'multiline':False]['text':'/ .. attention::','line_number':87,'multiline':False]['text':'/   One current limitation of `Sequential` is that all except the first module','line_number':88,'multiline':False]['text':'/   must accept a single argument. If your modules need to take multiple','line_number':89,'multiline':False]['text':'/   arguments, you should define them to take and return tuples.','line_number':90,'multiline':False]['text':'/ \endrst','line_number':91,'multiline':False]['text':'/ Constructs the `Sequential` from a variadic list of modules.','line_number':99,'multiline':False]['text':'/ Constructs the `Sequential` from an `OrderedDict` of named `AnyModule`s.','line_number':106,'multiline':False]['text':'/ Constructs the `Sequential` from a braced-init-list of named `AnyModule`s.','line_number':115,'multiline':False]['text':'/ It enables the following use case:','line_number':116,'multiline':False]['text':'/ `Sequential sequential({{"m1", M(1)}, {"m2", M(2)}})`','line_number':117,'multiline':False]['text':'/ Special cloning function for `Sequential` because it does not use','line_number':125,'multiline':False]['text':'/ `reset()`.','line_number':126,'multiline':False]['text':'/ `reset()` is empty for `Sequential`, since it does not have parameters of','line_number':136,'multiline':False]['text':'/ its own.','line_number':137,'multiline':False]['text':'/ Pretty prints the `Sequential` module into the given `stream`.','line_number':140,'multiline':False]['text':'/ Feeds `inputs` to the first module and then chains outputs to inputs,','line_number':145,'multiline':False]['text':'/ returning the last output.','line_number':146,'multiline':False]['text':'/','line_number':147,'multiline':False]['text':'/ Conceptually the following loop in Python:','line_number':148,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'/ \rst','line_number':150,'multiline':False]['text':'/ .. code-block:: python','line_number':151,'multiline':False]['text':'/','line_number':152,'multiline':False]['text':'/   def forward(sequential, input):','line_number':153,'multiline':False]['text':'/     for module in sequential:','line_number':154,'multiline':False]['text':'/       input = module(input)','line_number':155,'multiline':False]['text':'/     return input','line_number':156,'multiline':False]['text':'/','line_number':157,'multiline':False]['text':'/ \endrst','line_number':158,'multiline':False]['text':'/','line_number':159,'multiline':False]['text':'/ The return type is taken as the first template parameter. It defaults to','line_number':160,'multiline':False]['text':'/ `Tensor`. If the last module in the `Sequential` returns another type `T`,','line_number':161,'multiline':False]['text':'/ you should call `forward<T>(inputs)` instead of just `forward(inputs)`:','line_number':162,'multiline':False]['text':'/','line_number':163,'multiline':False]['text':'/ \rst','line_number':164,'multiline':False]['text':'/ .. code-block:: cpp','line_number':165,'multiline':False]['text':'/','line_number':166,'multiline':False]['text':'/   torch::Tensor tensor = sequential1->forward(inputs);','line_number':167,'multiline':False]['text':'/   int integer = sequential2->forward<int>(inputs);','line_number':168,'multiline':False]['text':'/   float value = sequential3->forward<float>(inputs);','line_number':169,'multiline':False]['text':'/','line_number':170,'multiline':False]['text':'/ \endrst','line_number':171,'multiline':False]['text':' Check the return value and give a nice error message if the requested','line_number':183,'multiline':False]['text':' return type was incorrect.','line_number':184,'multiline':False]['text':'/ Adds a new (boxed) `Module` to the `Sequential` container.','line_number':195,'multiline':False]['text':'/ Adds a new named (boxed) `Module` to the `Sequential` container.','line_number':201,'multiline':False]['text':'/ Adds a new `Module` to the `Sequential` container, moving or copying it','line_number':207,'multiline':False]['text':'/ into a `shared_ptr` internally. This method allows passing value types,','line_number':208,'multiline':False]['text':'/ and letting the container deal with the boxing. This means you can write','line_number':209,'multiline':False]['text':'/ `Sequential(Module(3, 4))` instead of','line_number':210,'multiline':False]['text':'/ `Sequential(std::make_shared<Module>(3, 4))`.','line_number':211,'multiline':False]['text':'/ Adds a new named `Module` to the `Sequential` container, moving or copying','line_number':217,'multiline':False]['text':'/ it into a `shared_ptr` internally. This method allows passing value types,','line_number':218,'multiline':False]['text':'/ and letting the container deal with the boxing.','line_number':219,'multiline':False]['text':'/ Unwraps the contained module of a `ModuleHolder` and adds it to the','line_number':226,'multiline':False]['text':'/ `Sequential`.','line_number':227,'multiline':False]['text':'/ Unwraps the contained named module of a `ModuleHolder` and adds it to the','line_number':233,'multiline':False]['text':'/ `Sequential`.','line_number':234,'multiline':False]['text':'/ Iterates over the container and calls `push_back()` on each value.','line_number':240,'multiline':False]['text':'/ Adds a type-erased `AnyModule` to the `Sequential`.','line_number':248,'multiline':False]['text':'/ Returns an iterator to the start of the `Sequential`.','line_number':259,'multiline':False]['text':'/ Returns a const iterator to the start of the `Sequential`.','line_number':264,'multiline':False]['text':'/ Returns an iterator to the end of the `Sequential`.','line_number':269,'multiline':False]['text':'/ Returns a const iterator to the end of the `Sequential`.','line_number':274,'multiline':False]['text':'/ Attempts to return the module at the given index as the requested type.','line_number':279,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':280,'multiline':False]['text':'/ match.','line_number':281,'multiline':False]['text':'/ Attempts to return the module at the given index as the requested type.','line_number':291,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':292,'multiline':False]['text':'/ match.','line_number':293,'multiline':False]['text':'/ Attempts to return a `std::shared_ptr` whose dynamic type is that of the','line_number':303,'multiline':False]['text':'/ underlying module at the given index. Throws an exception if the index is','line_number':304,'multiline':False]['text':'/ out of bounds.','line_number':305,'multiline':False]['text':'/ Attempts to return a `std::shared_ptr` whose type is the one provided.','line_number':311,'multiline':False]['text':'/ Throws an exception if the index is out of bounds or the types do not','line_number':312,'multiline':False]['text':'/ match.','line_number':313,'multiline':False]['text':'/ Like `ptr(index)`.','line_number':323,'multiline':False]['text':' This is the only method we can call without a type.','line_number':325,'multiline':False]['text':'/ The current size of the `Sequential` container.','line_number':329,'multiline':False]['text':'/ True if there are no modules in the `Sequential`.','line_number':334,'multiline':False]['text':'/ Takes a First *and* Second parameter, to avoid ambiguity when a parameter','line_number':340,'multiline':False]['text':'/ pack has only one type, in which case the template would be preferred,','line_number':341,'multiline':False]['text':'/ even if the other `push_back` functions are better fits (e.g. `unique_ptr`','line_number':342,'multiline':False]['text':'/ -> `shared_ptr` overload).','line_number':343,'multiline':False]['text':'/ NOTE: We explicitly avoid matching this template with','line_number':344,'multiline':False]['text':'/ `push_back(std::string("name"), module)` or `push_back("name", module)`,','line_number':345,'multiline':False]['text':'/ since they should be handled by their respective `push_back` functions.','line_number':346,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':353,'multiline':False]['text':' Recursively calls this method, until the parameter pack only thas this','line_number':359,'multiline':False]['text':' entry left. Then calls `push_back()` a final time (above).','line_number':360,'multiline':False]['text':'/ The base case, when the list of modules is empty.','line_number':364,'multiline':False]['text':' Box the AnyModules to give Sequential reference semantics, like the rest of','line_number':367,'multiline':False]['text':' the API. Note that this is not required otherwise, this could just be a','line_number':368,'multiline':False]['text':' `vector<AnyModule>`.','line_number':369,'multiline':False]['text':'/ A `ModuleHolder` subclass for `SequentialImpl`.','line_number':373,'multiline':False]['text':'/ See the documentation for `SequentialImpl` class to learn what methods it','line_number':374,'multiline':False]['text':'/ provides, or the documentation for `ModuleHolder` to learn about PyTorch's','line_number':375,'multiline':False]['text':'/ module storage semantics.','line_number':376,'multiline':False]['text':'/ Constructs the `Sequential` from a braced-init-list of named `AnyModule`s.','line_number':383,'multiline':False]['text':'/ It enables the following use case:','line_number':384,'multiline':False]['text':'/ `Sequential sequential({{"m1", M(1)}, {"m2", M(2)}})`','line_number':385,'multiline':False]['text':' namespace nn','line_number':389,'multiline':False]['text':' namespace torch','line_number':390,'multiline':False]