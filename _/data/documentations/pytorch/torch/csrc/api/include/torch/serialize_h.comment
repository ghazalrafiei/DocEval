['text':'/ Serializes the given `value`.','line_number':12,'multiline':False]['text':'/ There must be an overload of `operator<<` between `serialize::OutputArchive`','line_number':13,'multiline':False]['text':'/ and `Value` for this method to be well-formed. Currently, such an overload','line_number':14,'multiline':False]['text':'/ is provided for (subclasses of):','line_number':15,'multiline':False]['text':'/','line_number':16,'multiline':False]['text':'/ - `torch::nn::Module`,','line_number':17,'multiline':False]['text':'/ - `torch::optim::Optimizer`','line_number':18,'multiline':False]['text':'/ - `torch::Tensor`','line_number':19,'multiline':False]['text':'/','line_number':20,'multiline':False]['text':'/ To perform the serialization, a `serialize::OutputArchive` is constructed,','line_number':21,'multiline':False]['text':'/ and all arguments after the `value` are forwarded to its `save_to` method.','line_number':22,'multiline':False]['text':'/ For example, you can pass a filename, or an `ostream`.','line_number':23,'multiline':False]['text':'/','line_number':24,'multiline':False]['text':'/ \rst','line_number':25,'multiline':False]['text':'/ .. code-block:: cpp','line_number':26,'multiline':False]['text':'/','line_number':27,'multiline':False]['text':'/   torch::nn::Linear model(3, 4);','line_number':28,'multiline':False]['text':'/   torch::save(model, "model.pt");','line_number':29,'multiline':False]['text':'/','line_number':30,'multiline':False]['text':'/   torch::optim::SGD sgd(/*lr=*/0.9);','line_number':31,'multiline':False]['text':'/   std::ostringstream stream;','line_number':32,'multiline':False]['text':'/   // Note that the same stream cannot be used in multiple torch::save(...)','line_number':33,'multiline':False]['text':'/   // invocations, otherwise the header will be corrupted.','line_number':34,'multiline':False]['text':'/   torch::save(sgd, stream);','line_number':35,'multiline':False]['text':'/','line_number':36,'multiline':False]['text':'/   auto tensor = torch::ones({3, 4});','line_number':37,'multiline':False]['text':'/   torch::save(tensor, "my_tensor.pt");','line_number':38,'multiline':False]['text':'/ \endrst','line_number':39,'multiline':False]['text':'/ Serializes the given `tensor_vec` of type `std::vector<torch::Tensor>`.','line_number':47,'multiline':False]['text':'/','line_number':48,'multiline':False]['text':'/ To perform the serialization, a `serialize::OutputArchive` is constructed,','line_number':49,'multiline':False]['text':'/ and all arguments after the `tensor_vec` are forwarded to its `save_to`','line_number':50,'multiline':False]['text':'/ method. For example, you can pass a filename, or an `ostream`.','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ \rst','line_number':53,'multiline':False]['text':'/ .. code-block:: cpp','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/   std::vector<torch::Tensor> tensor_vec = { torch::randn({1, 2}),','line_number':56,'multiline':False]['text':'/   torch::randn({3, 4}) }; torch::save(tensor_vec, "my_tensor_vec.pt");','line_number':57,'multiline':False]['text':'/','line_number':58,'multiline':False]['text':'/   std::vector<torch::Tensor> tensor_vec = { torch::randn({5, 6}),','line_number':59,'multiline':False]['text':'/   torch::randn({7, 8}) }; std::ostringstream stream;','line_number':60,'multiline':False]['text':'/   // Note that the same stream cannot be used in multiple torch::save(...)','line_number':61,'multiline':False]['text':'/   // invocations, otherwise the header will be corrupted.','line_number':62,'multiline':False]['text':'/   torch::save(tensor_vec, stream);','line_number':63,'multiline':False]['text':'/ \endrst','line_number':64,'multiline':False]['text':'/ Deserializes the given `value`.','line_number':78,'multiline':False]['text':'/ There must be an overload of `operator>>` between `serialize::InputArchive`','line_number':79,'multiline':False]['text':'/ and `Value` for this method to be well-formed. Currently, such an overload','line_number':80,'multiline':False]['text':'/ is provided for (subclasses of):','line_number':81,'multiline':False]['text':'/','line_number':82,'multiline':False]['text':'/ - `torch::nn::Module`,','line_number':83,'multiline':False]['text':'/ - `torch::optim::Optimizer`','line_number':84,'multiline':False]['text':'/ - `torch::Tensor`','line_number':85,'multiline':False]['text':'/','line_number':86,'multiline':False]['text':'/ To perform the serialization, a `serialize::InputArchive` is constructed,','line_number':87,'multiline':False]['text':'/ and all arguments after the `value` are forwarded to its `load_from` method.','line_number':88,'multiline':False]['text':'/ For example, you can pass a filename, or an `istream`.','line_number':89,'multiline':False]['text':'/','line_number':90,'multiline':False]['text':'/ \rst','line_number':91,'multiline':False]['text':'/ .. code-block:: cpp','line_number':92,'multiline':False]['text':'/','line_number':93,'multiline':False]['text':'/   torch::nn::Linear model(3, 4);','line_number':94,'multiline':False]['text':'/   torch::load(model, "model.pt");','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':'/   torch::optim::SGD sgd(/*lr=*/0.9);','line_number':97,'multiline':False]['text':'/   std::istringstream stream("...");','line_number':98,'multiline':False]['text':'/   torch::load(sgd, stream);','line_number':99,'multiline':False]['text':'/','line_number':100,'multiline':False]['text':'/   auto tensor = torch::ones({3, 4});','line_number':101,'multiline':False]['text':'/   torch::load(tensor, "my_tensor.pt");','line_number':102,'multiline':False]['text':'/ \endrst','line_number':103,'multiline':False]['text':'/ Deserializes the given `tensor_vec` of type `std::vector<torch::Tensor>`.','line_number':111,'multiline':False]['text':'/','line_number':112,'multiline':False]['text':'/ To perform the serialization, a `serialize::InputArchive` is constructed,','line_number':113,'multiline':False]['text':'/ and all arguments after the `value` are forwarded to its `load_from` method.','line_number':114,'multiline':False]['text':'/ For example, you can pass a filename, or an `istream`.','line_number':115,'multiline':False]['text':'/','line_number':116,'multiline':False]['text':'/ \rst','line_number':117,'multiline':False]['text':'/ .. code-block:: cpp','line_number':118,'multiline':False]['text':'/','line_number':119,'multiline':False]['text':'/   std::vector<torch::Tensor> tensor_vec;','line_number':120,'multiline':False]['text':'/   torch::load(tensor_vec, "my_tensor_vec.pt");','line_number':121,'multiline':False]['text':'/','line_number':122,'multiline':False]['text':'/   std::vector<torch::Tensor> tensor_vec;','line_number':123,'multiline':False]['text':'/   std::istringstream stream("...");','line_number':124,'multiline':False]['text':'/   torch::load(tensor_vec, stream);','line_number':125,'multiline':False]['text':'/ \endrst','line_number':126,'multiline':False]['text':' NOTE: The number of elements in the serialized `std::vector<torch::Tensor>`','line_number':132,'multiline':False]['text':' is not known ahead of time, so we need a while-loop to increment the index,','line_number':133,'multiline':False]['text':' and use `archive.try_read(...)` to check whether we have reached the end of','line_number':134,'multiline':False]['text':' the serialized `std::vector<torch::Tensor>`.','line_number':135,'multiline':False]['text':' namespace torch','line_number':144,'multiline':False]