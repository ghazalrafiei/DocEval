['text':'/ An OrderedDict of `Module`s that registers its elements by their `key`s.','line_number':11,'multiline':False]['text':'/','line_number':12,'multiline':False]['text':'/ \rst','line_number':13,'multiline':False]['text':'/ .. code-block:: cpp','line_number':14,'multiline':False]['text':'/','line_number':15,'multiline':False]['text':'/   torch::OrderedDict<std::string, std::shared_ptr<Module>> ordereddict = {','line_number':16,'multiline':False]['text':'/     {"linear", Linear(10, 3).ptr()},','line_number':17,'multiline':False]['text':'/     {"conv", Conv2d(1, 2, 3).ptr()},','line_number':18,'multiline':False]['text':'/     {"dropout", Dropout(0.5).ptr()},','line_number':19,'multiline':False]['text':'/   };','line_number':20,'multiline':False]['text':'/   torch::nn::ModuleDict dict1(ordereddict);','line_number':21,'multiline':False]['text':'/','line_number':22,'multiline':False]['text':'/   for (const auto &module : *dict1) {','line_number':23,'multiline':False]['text':'/     module->pretty_print(std::cout);','line_number':24,'multiline':False]['text':'/   }','line_number':25,'multiline':False]['text':'/','line_number':26,'multiline':False]['text':'/   std::vector<std::pair<std::string, std::shared_ptr<Module>>> list = {','line_number':27,'multiline':False]['text':'/     {"linear", Linear(10, 3).ptr()},','line_number':28,'multiline':False]['text':'/     {"conv", Conv2d(1, 2, 3).ptr()},','line_number':29,'multiline':False]['text':'/     {"dropout", Dropout(0.5).ptr()},','line_number':30,'multiline':False]['text':'/   };','line_number':31,'multiline':False]['text':'/   torch::nn::ModuleDict dict2(list);','line_number':32,'multiline':False]['text':'/','line_number':33,'multiline':False]['text':'/   for (const auto &module : *dict2) {','line_number':34,'multiline':False]['text':'/     module->pretty_print(std::cout);','line_number':35,'multiline':False]['text':'/   }','line_number':36,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ \endrst','line_number':38,'multiline':False]['text':'/','line_number':39,'multiline':False]['text':'/ Why should you use `ModuleDict` instead of a simple `map` or `OrderedDict`?','line_number':40,'multiline':False]['text':'/ The value a `ModuleDict` provides over manually calling an ordered map of','line_number':41,'multiline':False]['text':'/ modules is that it allows treating the whole container *as a single module*,','line_number':42,'multiline':False]['text':'/ such that performing a transformation on the `ModuleDict` applies to each of','line_number':43,'multiline':False]['text':'/ the modules it stores (which are each a registered submodule of the','line_number':44,'multiline':False]['text':'/ `ModuleDict`). For example, calling `.to(torch::kCUDA)` on a `ModuleDict`','line_number':45,'multiline':False]['text':'/ will move each module in the map to CUDA memory. For example:','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/ \rst','line_number':48,'multiline':False]['text':'/ .. code-block:: cpp','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/   torch::OrderedDict<std::string, std::shared_ptr<Module>> ordereddict = {','line_number':51,'multiline':False]['text':'/     {"linear", Linear(10, 3).ptr()},','line_number':52,'multiline':False]['text':'/     {"conv", Conv2d(1, 2, 3).ptr()},','line_number':53,'multiline':False]['text':'/     {"dropout", Dropout(0.5).ptr()},','line_number':54,'multiline':False]['text':'/   };','line_number':55,'multiline':False]['text':'/   torch::nn::ModuleDict dict(ordereddict);','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/   // Convert all modules to CUDA.','line_number':58,'multiline':False]['text':'/   dict->to(torch::kCUDA);','line_number':59,'multiline':False]['text':'/','line_number':60,'multiline':False]['text':'/ \endrst','line_number':61,'multiline':False]['text':'/','line_number':62,'multiline':False]['text':'/ Finally, `ModuleDict` provides a lightweight container API, such as allowing','line_number':63,'multiline':False]['text':'/ iteration over submodules, positional access, adding new modules from a','line_number':64,'multiline':False]['text':'/ vector of key-module pairs or an `OrderedDict` or another `ModuleDict` after','line_number':65,'multiline':False]['text':'/ construction via `update`.','line_number':66,'multiline':False]['text':'/ Constructs the `ModuleDict` from a list of string-Module pairs.','line_number':76,'multiline':False]['text':'/ Constructs the `ModuleDict` from an `OrderedDict`.','line_number':83,'multiline':False]['text':'/ Return the items in the `ModuleDict`.','line_number':89,'multiline':False]['text':'/ Return the keys in the `ModuleDict`.','line_number':94,'multiline':False]['text':'/ Return the values in the `ModuleDict`.','line_number':99,'multiline':False]['text':'/ Return an iterator to the start of `ModuleDict`.','line_number':104,'multiline':False]['text':'/ Return a const iterator to the start of `ModuleDict`.','line_number':109,'multiline':False]['text':'/ Return an iterator to the end of `ModuleDict`.','line_number':114,'multiline':False]['text':'/ Return a const iterator to the end of `ModuleDict`.','line_number':119,'multiline':False]['text':'/ Return the number of items currently stored in the `ModuleDict`.','line_number':124,'multiline':False]['text':'/ Return true if the `ModuleDict` is empty, otherwise return false.','line_number':129,'multiline':False]['text':'/ Check if the centain parameter with the key in the `ModuleDict`.','line_number':134,'multiline':False]['text':'/ Remove all items from the `ModuleDict`.','line_number':139,'multiline':False]['text':' Not remove the registration of modules to make it consistent with python','line_number':141,'multiline':False]['text':' version.','line_number':142,'multiline':False]['text':'/ Special cloning function for `ModuleDict` because it does not use','line_number':146,'multiline':False]['text':'/ `reset()`.','line_number':147,'multiline':False]['text':'/ `reset()` is empty for `ModuleDict`, since it does not have parameters of','line_number':157,'multiline':False]['text':'/ its own.','line_number':158,'multiline':False]['text':'/ Pretty prints the `ModuleDict` into the given `stream`.','line_number':161,'multiline':False]['text':'/ Attempts to returns the `Module` associated with the given `key`. Throws','line_number':166,'multiline':False]['text':'/ an exception if no such `key` is stored in the `ModuleDict`. Check','line_number':167,'multiline':False]['text':'/ contains(key) before for a non-throwing way of access.','line_number':168,'multiline':False]['text':'/ Attempts to return the module at the given key as the requested type.','line_number':173,'multiline':False]['text':'/ Throws an exception if no such `key` is stored in the `ModuleDict`.','line_number':174,'multiline':False]['text':'/ Check contains(key) before for a non-throwing way of access.','line_number':175,'multiline':False]['text':'/ Attempts to return the module at the given key as the requested type.','line_number':191,'multiline':False]['text':'/ Throws an exception if no such `key` is stored in the `ModuleDict`.','line_number':192,'multiline':False]['text':'/ Check contains(key) before for a non-throwing way of access.','line_number':193,'multiline':False]['text':'/ Removes and returns the `Module` associated with the given `key`.','line_number':209,'multiline':False]['text':'/ Throws an exception if no such `key` is stored in the `ModuleDict`.','line_number':210,'multiline':False]['text':'/ Check contains(key) before for a non-throwing way of access.','line_number':211,'multiline':False]['text':' Not remove the registration of the module to make it consistent with','line_number':215,'multiline':False]['text':' python version.','line_number':216,'multiline':False]['text':'/ Updated the `ModuleDict` with a vector of key-module pairs.','line_number':220,'multiline':False]['text':'/ Updated the `ModuleDict` with key-value pairs from `OrderedDict` or','line_number':229,'multiline':False]['text':'/ `ModuleDict`.','line_number':230,'multiline':False]['text':'/ Private `OrderedDict` holding the key-Module pairs.','line_number':239,'multiline':False]['text':'/ Insert a key-module pair by overwriting existing keys,','line_number':242,'multiline':False]['text':'/ and register or replace the `Module`.','line_number':243,'multiline':False]['text':'/ A `ModuleHolder` subclass for `ModuleDictImpl`.','line_number':255,'multiline':False]['text':'/ See the documentation for `ModuleDictImpl` class to learn what methods it','line_number':256,'multiline':False]['text':'/ provides, or the documentation for `ModuleHolder` to learn about PyTorch's','line_number':257,'multiline':False]['text':'/ module storage semantics.','line_number':258,'multiline':False]['text':' namespace nn','line_number':261,'multiline':False]['text':' namespace torch','line_number':262,'multiline':False]