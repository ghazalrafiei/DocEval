['text':'/ Holds the data and list of `batch_sizes` of a packed sequence.','line_number':26,'multiline':False]['text':'/','line_number':27,'multiline':False]['text':'/ All RNN modules accept packed sequences as inputs.','line_number':28,'multiline':False]['text':'/','line_number':29,'multiline':False]['text':'/ Note:','line_number':30,'multiline':False]['text':'/     Instances of this class should never be created manually. They are meant','line_number':31,'multiline':False]['text':'/     to be instantiated by functions like `pack_padded_sequence`.','line_number':32,'multiline':False]['text':'/','line_number':33,'multiline':False]['text':'/     Batch sizes represent the number elements at each sequence step in','line_number':34,'multiline':False]['text':'/     the batch, not the varying sequence lengths passed to','line_number':35,'multiline':False]['text':'/     `pack_padded_sequence`.  For instance, given data ``abc`` and ``x``','line_number':36,'multiline':False]['text':'/     the :class:`PackedSequence` would contain data ``axbc`` with','line_number':37,'multiline':False]['text':'/     ``batch_sizes=[2,1,1]``.','line_number':38,'multiline':False]['text':'/','line_number':39,'multiline':False]['text':'/ Attributes:','line_number':40,'multiline':False]['text':'/     data (Tensor): Tensor containing packed sequence','line_number':41,'multiline':False]['text':'/     batch_sizes (Tensor): Tensor of integers holding','line_number':42,'multiline':False]['text':'/         information about the batch size at each sequence step','line_number':43,'multiline':False]['text':'/     sorted_indices (Tensor, optional): Tensor of integers holding how this','line_number':44,'multiline':False]['text':'/         :class:`PackedSequence` is constructed from sequences.','line_number':45,'multiline':False]['text':'/     unsorted_indices (Tensor, optional): Tensor of integers holding how this','line_number':46,'multiline':False]['text':'/         to recover the original sequences with correct order.','line_number':47,'multiline':False]['text':'/','line_number':48,'multiline':False]['text':'/ .. note::','line_number':49,'multiline':False]['text':'/     `data` can be on arbitrary device and of arbitrary dtype.','line_number':50,'multiline':False]['text':'/     `sorted_indices` and `unsorted_indices` must be ``torch::kInt64``','line_number':51,'multiline':False]['text':'/     tensors on the same device as `data`.','line_number':52,'multiline':False]['text':'/','line_number':53,'multiline':False]['text':'/     However, `batch_sizes` should always be a CPU ``torch::kInt64`` tensor.','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/     This invariant is maintained throughout `PackedSequence` class,','line_number':56,'multiline':False]['text':'/     and all functions that construct a `PackedSequence` in libtorch','line_number':57,'multiline':False]['text':'/     (i.e., they only pass in tensors conforming to this constraint).','line_number':58,'multiline':False]['text':' NB: if unsorted_indices is provided, it should be the inverse permutation','line_number':66,'multiline':False]['text':' to sorted_indices. Don't assert it here because the PackedSequence ctor','line_number':67,'multiline':False]['text':' should only be used internally.','line_number':68,'multiline':False]['text':' Why not convert `batch_sizes`?','line_number':102,'multiline':False]['text':' See NOTE [ device and dtype of a PackedSequence ]','line_number':103,'multiline':False]['text':' Performs dtype and/or device conversion on `data_`.','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':' If the ``data_`` Tensor already has the correct `torch::Dtype`','line_number':115,'multiline':False]['text':' and `torch::Device`, then ``self`` is returned.','line_number':116,'multiline':False]['text':' Otherwise, returns a copy with the desired configuration.','line_number':117,'multiline':False]['text':' Why not convert `batch_sizes`?','line_number':119,'multiline':False]['text':' See NOTE [ device and dtype of a PackedSequence ]','line_number':120,'multiline':False]['text':' Does not forward device or dtype args, device is set from data.device()','line_number':125,'multiline':False]['text':'/ Returns true if `data_` stored on a gpu','line_number':150,'multiline':False]['text':'/ Returns true if `data_` stored on in pinned memory','line_number':155,'multiline':False]['text':'/ Packs a Tensor containing padded sequences of variable length.','line_number':167,'multiline':False]['text':'/','line_number':168,'multiline':False]['text':'/ `input` can be of size ``T x B x *`` where `T` is the length of the','line_number':169,'multiline':False]['text':'/ longest sequence (equal to ``lengths[0]``), ``B`` is the batch size, and','line_number':170,'multiline':False]['text':'/ ``*`` is any number of dimensions (including 0). If ``batch_first`` is','line_number':171,'multiline':False]['text':'/ ``true``, ``B x T x *`` `input` is expected.','line_number':172,'multiline':False]['text':'/','line_number':173,'multiline':False]['text':'/ For unsorted sequences, use `enforce_sorted = false`. If `enforce_sorted` is','line_number':174,'multiline':False]['text':'/ ``true``, the sequences should be sorted by length in a decreasing order,','line_number':175,'multiline':False]['text':'/ i.e.','line_number':176,'multiline':False]['text':'/ ``input[:,0]`` should be the longest sequence, and ``input[:,B-1]`` the','line_number':177,'multiline':False]['text':'/ shortest one.','line_number':178,'multiline':False]['text':'/','line_number':179,'multiline':False]['text':'/ Note:','line_number':180,'multiline':False]['text':'/     This function accepts any input that has at least two dimensions. You','line_number':181,'multiline':False]['text':'/     can apply it to pack the labels, and use the output of the RNN with','line_number':182,'multiline':False]['text':'/     them to compute the loss directly. A Tensor can be retrieved from','line_number':183,'multiline':False]['text':'/     a `PackedSequence` object by calling its ``.data()`` function.','line_number':184,'multiline':False]['text':'/','line_number':185,'multiline':False]['text':'/ Arguments:','line_number':186,'multiline':False]['text':'/     input (Tensor): padded batch of variable length sequences.','line_number':187,'multiline':False]['text':'/     lengths (Tensor): list of sequences lengths of each batch element.','line_number':188,'multiline':False]['text':'/     batch_first (bool, optional): if ``true``, the input is expected in ``B','line_number':189,'multiline':False]['text':'/     x T x *``','line_number':190,'multiline':False]['text':'/         format. Default: ``false``.','line_number':191,'multiline':False]['text':'/     enforce_sorted (bool, optional): if ``true``, the input is expected to','line_number':192,'multiline':False]['text':'/         contain sequences sorted by length in a decreasing order. If','line_number':193,'multiline':False]['text':'/         ``false``, this condition is not checked. Default: ``true``.','line_number':194,'multiline':False]['text':'/','line_number':195,'multiline':False]['text':'/ Returns:','line_number':196,'multiline':False]['text':'/     a `PackedSequence` object','line_number':197,'multiline':False]['text':'dim=','line_number':209,'multiline':True]['text':'descending=','line_number':209,'multiline':True]['text':'/ Pads a packed batch of variable length sequences.','line_number':222,'multiline':False]['text':'/','line_number':223,'multiline':False]['text':'/ It is an inverse operation to `pack_padded_sequence`.','line_number':224,'multiline':False]['text':'/','line_number':225,'multiline':False]['text':'/ The returned Tensor's data will be of size ``T x B x *``, where `T` is the','line_number':226,'multiline':False]['text':'/ length of the longest sequence and `B` is the batch size. If ``batch_first``','line_number':227,'multiline':False]['text':'/ is true, the data will be transposed into ``B x T x *`` format.','line_number':228,'multiline':False]['text':'/','line_number':229,'multiline':False]['text':'/ Batch elements will be ordered decreasingly by their length.','line_number':230,'multiline':False]['text':'/','line_number':231,'multiline':False]['text':'/ Arguments:','line_number':232,'multiline':False]['text':'/     sequence (PackedSequence): batch to pad','line_number':233,'multiline':False]['text':'/     batch_first (bool, optional): if ``true``, the output will be in ``B x T','line_number':234,'multiline':False]['text':'/     x *``','line_number':235,'multiline':False]['text':'/         format.','line_number':236,'multiline':False]['text':'/     padding_value (double, optional): values for padded elements.','line_number':237,'multiline':False]['text':'/     total_length (int64_t, optional): if specified, the output will be','line_number':238,'multiline':False]['text':'/     padded to','line_number':239,'multiline':False]['text':'/         have length `total_length`. This method will throw error','line_number':240,'multiline':False]['text':'/         if `total_length` is less than the max sequence length in','line_number':241,'multiline':False]['text':'/         `sequence`.','line_number':242,'multiline':False]['text':'/','line_number':243,'multiline':False]['text':'/ Returns:','line_number':244,'multiline':False]['text':'/     Tuple of Tensor containing the padded sequence, and a Tensor','line_number':245,'multiline':False]['text':'/     containing the list of lengths of each sequence in the batch.','line_number':246,'multiline':False]['text':'/ Pad a list of variable length Tensors with ``padding_value``','line_number':282,'multiline':False]['text':'/','line_number':283,'multiline':False]['text':'/ ``pad_sequence`` stacks a list of Tensors along a new dimension,','line_number':284,'multiline':False]['text':'/ and pads them to equal length. For example, if the input is list of','line_number':285,'multiline':False]['text':'/ sequences with size ``L x *`` and if batch_first is false, and ``T x B x *``','line_number':286,'multiline':False]['text':'/ otherwise.','line_number':287,'multiline':False]['text':'/','line_number':288,'multiline':False]['text':'/ `B` is batch size. It is equal to the number of elements in ``sequences``.','line_number':289,'multiline':False]['text':'/ `T` is length of the longest sequence.','line_number':290,'multiline':False]['text':'/ `L` is length of the sequence.','line_number':291,'multiline':False]['text':'/ `*` is any number of trailing dimensions, including none.','line_number':292,'multiline':False]['text':'/','line_number':293,'multiline':False]['text':'/ Note:','line_number':294,'multiline':False]['text':'/     This function returns a Tensor of size ``T x B x *`` or ``B x T x *``','line_number':295,'multiline':False]['text':'/     where `T` is the length of the longest sequence. This function assumes','line_number':296,'multiline':False]['text':'/     trailing dimensions and type of all the Tensors in sequences are same.','line_number':297,'multiline':False]['text':'/','line_number':298,'multiline':False]['text':'/ Arguments:','line_number':299,'multiline':False]['text':'/     sequences (torch::ArrayRef<Tensor>): list of variable length sequences.','line_number':300,'multiline':False]['text':'/     batch_first (bool, optional): output will be in ``B x T x *`` if true,','line_number':301,'multiline':False]['text':'/     or in','line_number':302,'multiline':False]['text':'/         ``T x B x *`` otherwise','line_number':303,'multiline':False]['text':'/     padding_value (double, optional): value for padded elements. Default: 0.','line_number':304,'multiline':False]['text':'/','line_number':305,'multiline':False]['text':'/ Returns:','line_number':306,'multiline':False]['text':'/     Tensor of size ``T x B x *`` if `batch_first` is ``false``.','line_number':307,'multiline':False]['text':'/     Tensor of size ``B x T x *`` otherwise','line_number':308,'multiline':False]['text':'/ Packs a list of variable length Tensors','line_number':316,'multiline':False]['text':'/','line_number':317,'multiline':False]['text':'/ ``sequences`` should be a list of Tensors of size ``L x *``, where `L` is','line_number':318,'multiline':False]['text':'/ the length of a sequence and `*` is any number of trailing dimensions,','line_number':319,'multiline':False]['text':'/ including zero.','line_number':320,'multiline':False]['text':'/','line_number':321,'multiline':False]['text':'/ For unsorted sequences, use `enforce_sorted = false`. If ``enforce_sorted``','line_number':322,'multiline':False]['text':'/ is ``true``, the sequences should be sorted in the order of decreasing','line_number':323,'multiline':False]['text':'/ length.','line_number':324,'multiline':False]['text':'/','line_number':325,'multiline':False]['text':'/','line_number':326,'multiline':False]['text':'/ Arguments:','line_number':327,'multiline':False]['text':'/     sequences (torch::ArrayRef<Tensor>): A list of sequences of decreasing','line_number':328,'multiline':False]['text':'/     length. enforce_sorted (bool, optional): if ``true``, checks that the','line_number':329,'multiline':False]['text':'/     input','line_number':330,'multiline':False]['text':'/         contains sequences sorted by length in a decreasing order. If','line_number':331,'multiline':False]['text':'/         ``false``, this condition is not checked. Default: ``true``.','line_number':332,'multiline':False]['text':'/','line_number':333,'multiline':False]['text':'/ Returns:','line_number':334,'multiline':False]['text':'/     a `PackedSequence` object','line_number':335,'multiline':False]['text':'batch_first=','line_number':346,'multiline':True]['text':'enforce_sorted=','line_number':347,'multiline':True]['text':' namespace rnn','line_number':350,'multiline':False]['text':' namespace utils','line_number':351,'multiline':False]['text':' namespace nn','line_number':352,'multiline':False]['text':' namespace torch','line_number':353,'multiline':False]