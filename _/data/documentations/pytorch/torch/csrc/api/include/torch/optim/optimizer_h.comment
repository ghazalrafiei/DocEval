['text':' Forward declarations confuse Doxygen','line_number':17,'multiline':False]['text':' namespace at','line_number':21,'multiline':False]['text':' namespace serialize','line_number':28,'multiline':False]['text':' namespace torch','line_number':29,'multiline':False]['text':' DOXYGEN_SHOULD_SKIP_THIS','line_number':30,'multiline':False]['text':'/ Stores parameters in the param_group and stores a pointer to the','line_number':78,'multiline':False]['text':'/ OptimizerOptions','line_number':79,'multiline':False]['text':' NOTE: In order to store `OptimizerParamGroup` in a `std::vector`, it has to','line_number':82,'multiline':False]['text':' be copy-constructible.','line_number':83,'multiline':False]['text':' The copy constructor is deleted, because the user should use the','line_number':110,'multiline':False]['text':' `state_dict` / `load_state_dict` API to copy an optimizer instead.','line_number':111,'multiline':False]['text':'/ Constructs the `Optimizer` from a vector of parameters.','line_number':124,'multiline':False]['text':'/ Adds the given param_group to the optimizer's param_group list.','line_number':132,'multiline':False]['text':'/ A loss function closure, which is expected to return the loss value.','line_number':138,'multiline':False]['text':'/ Adds the given vector of parameters to the optimizer's parameter list.','line_number':141,'multiline':False]['text':'/ Zeros out the gradients of all parameters.','line_number':144,'multiline':False]['text':'/ Provides a const reference to the parameters in the first param_group this','line_number':147,'multiline':False]['text':'/ optimizer holds.','line_number':148,'multiline':False]['text':'/ Provides a reference to the parameters in the first param_group this','line_number':151,'multiline':False]['text':'/ optimizer holds.','line_number':152,'multiline':False]['text':'/ Returns the number of parameters referenced by the optimizer.','line_number':155,'multiline':False]['text':'/ Provides a reference to the param_groups this optimizer holds.','line_number':162,'multiline':False]['text':'/ Provides a const reference to the param_groups this optimizer holds.','line_number':165,'multiline':False]['text':'/ Provides a reference to the state this optimizer holds','line_number':168,'multiline':False]['text':'/ Provides a const reference to the state this optimizer holds','line_number':172,'multiline':False]['text':'/ Serializes the optimizer state into the given `archive`.','line_number':176,'multiline':False]['text':'/ Deserializes the optimizer state from the given `archive`.','line_number':179,'multiline':False]['text':' How do we decide whether to serialize undefined tensors or
  c10::nullopt values into the output archive?
Answer: we strictly follow the behavior of Python API. To be more specific:

For optimizer options:
a) For undefined tensor: currently no tensor is used as an options argument in
Python API, so we don't need to worry about it now. b) For c10::nullopt value:
we serialize c10::nullopt values into the output archive, to follow the exact
same behavior as Python API.

For optimizer param state:
a) For undefined tensor: in param state, undefined tensor in C++ impl is
equivalent to missing key in Python impl. Since we don't serialize missing keys
in Python API, we skip undefined tensors when serializing the param state. b)
For c10::nullopt value: in param state, c10::nullopt value in C++ impl is
equivalent to missing key in Python impl. Since we don't serialize missing keys
in Python API, we skip c10::nullopt values when serializing the param state. ','line_number':188,'multiline':True]['text':'/ Serializes an `Optimizer` into an `OutputArchive`.','line_number':206,'multiline':False]['text':'/ Deserializes a `Tensor` from an `InputArchive`.','line_number':211,'multiline':False]['text':' namespace optim','line_number':216,'multiline':False]['text':' namespace torch','line_number':217,'multiline':False]