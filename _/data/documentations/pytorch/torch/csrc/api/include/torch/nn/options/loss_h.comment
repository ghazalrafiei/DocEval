['text':'/ Options for the `L1Loss` module.','line_number':11,'multiline':False]['text':'/','line_number':12,'multiline':False]['text':'/ Example:','line_number':13,'multiline':False]['text':'/ ```','line_number':14,'multiline':False]['text':'/ L1Loss model(L1LossOptions(torch::kNone));','line_number':15,'multiline':False]['text':'/ ```','line_number':16,'multiline':False]['text':'/ Specifies the reduction to apply to the output.','line_number':23,'multiline':False]['text':'/ Options for `torch::nn::functional::l1_loss`.','line_number':28,'multiline':False]['text':'/','line_number':29,'multiline':False]['text':'/ See the documentation for `torch::nn::L1LossOptions` class to learn what','line_number':30,'multiline':False]['text':'/ arguments are supported.','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ Example:','line_number':33,'multiline':False]['text':'/ ```','line_number':34,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':35,'multiline':False]['text':'/ F::l1_loss(input, target, F::L1LossFuncOptions(torch::kNone));','line_number':36,'multiline':False]['text':'/ ```','line_number':37,'multiline':False]['text':' namespace functional','line_number':39,'multiline':False]['text':' ============================================================================','line_number':41,'multiline':False]['text':'/ Options for the `KLDivLoss` module.','line_number':43,'multiline':False]['text':'/','line_number':44,'multiline':False]['text':'/ Example:','line_number':45,'multiline':False]['text':'/ ```','line_number':46,'multiline':False]['text':'/ KLDivLoss','line_number':47,'multiline':False]['text':'/ model(KLDivLossOptions().reduction(torch::kNone).log_target(false));','line_number':48,'multiline':False]['text':'/ ```','line_number':49,'multiline':False]['text':'/ Specifies the reduction to apply to the output.','line_number':66,'multiline':False]['text':'/ ``'none'`` | ``'batchmean'`` | ``'sum'`` | ``'mean'``. Default: ``'mean'``','line_number':67,'multiline':False]['text':'/ Specifies whether `target` is accepted in the log space. Default: False','line_number':70,'multiline':False]['text':'/ Options for `torch::nn::functional::kl_div`.','line_number':75,'multiline':False]['text':'/','line_number':76,'multiline':False]['text':'/ See the documentation for `torch::nn::KLDivLossOptions` class to learn what','line_number':77,'multiline':False]['text':'/ arguments are supported.','line_number':78,'multiline':False]['text':'/','line_number':79,'multiline':False]['text':'/ Example:','line_number':80,'multiline':False]['text':'/ ```','line_number':81,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':82,'multiline':False]['text':'/ F::kl_div(input, target,','line_number':83,'multiline':False]['text':'/ F::KLDivFuncOptions().reduction(torch::kNone).log_target(false));','line_number':84,'multiline':False]['text':'/ ```','line_number':85,'multiline':False]['text':' namespace functional','line_number':87,'multiline':False]['text':' ============================================================================','line_number':89,'multiline':False]['text':'/ Options for the `MSELoss` module.','line_number':91,'multiline':False]['text':'/','line_number':92,'multiline':False]['text':'/ Example:','line_number':93,'multiline':False]['text':'/ ```','line_number':94,'multiline':False]['text':'/ MSELoss model(MSELossOptions(torch::kNone));','line_number':95,'multiline':False]['text':'/ ```','line_number':96,'multiline':False]['text':'/ Specifies the reduction to apply to the output.','line_number':103,'multiline':False]['text':'/ ``'none'`` | ``'mean'`` | ``'sum'``. Default: ``'mean'``','line_number':104,'multiline':False]['text':'/ Options for `torch::nn::functional::mse_loss`.','line_number':109,'multiline':False]['text':'/','line_number':110,'multiline':False]['text':'/ See the documentation for `torch::nn::MSELossOptions` class to learn what','line_number':111,'multiline':False]['text':'/ arguments are supported.','line_number':112,'multiline':False]['text':'/','line_number':113,'multiline':False]['text':'/ Example:','line_number':114,'multiline':False]['text':'/ ```','line_number':115,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':116,'multiline':False]['text':'/ F::mse_loss(input, target, F::MSELossFuncOptions(torch::kNone));','line_number':117,'multiline':False]['text':'/ ```','line_number':118,'multiline':False]['text':' namespace functional','line_number':120,'multiline':False]['text':' ============================================================================','line_number':122,'multiline':False]['text':'/ Options for the `BCELoss` module.','line_number':124,'multiline':False]['text':'/','line_number':125,'multiline':False]['text':'/ Example:','line_number':126,'multiline':False]['text':'/ ```','line_number':127,'multiline':False]['text':'/ BCELoss model(BCELossOptions().reduction(torch::kNone).weight(weight));','line_number':128,'multiline':False]['text':'/ ```','line_number':129,'multiline':False]['text':'/ A manual rescaling weight given to the loss of each batch element.','line_number':134,'multiline':False]['text':'/ Specifies the reduction to apply to the output.','line_number':136,'multiline':False]['text':'/ ``'none'`` | ``'mean'`` | ``'sum'``. Default: ``'mean'``','line_number':137,'multiline':False]['text':'/ Options for `torch::nn::functional::binary_cross_entropy`.','line_number':142,'multiline':False]['text':'/','line_number':143,'multiline':False]['text':'/ See the documentation for `torch::nn::BCELossOptions` class to learn what','line_number':144,'multiline':False]['text':'/ arguments are supported.','line_number':145,'multiline':False]['text':'/','line_number':146,'multiline':False]['text':'/ Example:','line_number':147,'multiline':False]['text':'/ ```','line_number':148,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':149,'multiline':False]['text':'/ F::binary_cross_entropy(input, target,','line_number':150,'multiline':False]['text':'/ F::BinaryCrossEntropyFuncOptions().weight(weight));','line_number':151,'multiline':False]['text':'/ ```','line_number':152,'multiline':False]['text':' namespace functional','line_number':154,'multiline':False]['text':' ============================================================================','line_number':156,'multiline':False]['text':'/ Options for the `HingeEmbeddingLoss` module.','line_number':158,'multiline':False]['text':'/','line_number':159,'multiline':False]['text':'/ Example:','line_number':160,'multiline':False]['text':'/ ```','line_number':161,'multiline':False]['text':'/ HingeEmbeddingLoss','line_number':162,'multiline':False]['text':'/ model(HingeEmbeddingLossOptions().margin(4).reduction(torch::kNone));','line_number':163,'multiline':False]['text':'/ ```','line_number':164,'multiline':False]['text':'/ Specifies the threshold for which the distance of a negative sample must','line_number':169,'multiline':False]['text':'/ reach in order to incur zero loss. Default: 1','line_number':170,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':172,'multiline':False]['text':'/ Options for `torch::nn::functional::hinge_embedding_loss`.','line_number':177,'multiline':False]['text':'/','line_number':178,'multiline':False]['text':'/ See the documentation for `torch::nn::HingeEmbeddingLossOptions` class to','line_number':179,'multiline':False]['text':'/ learn what arguments are supported.','line_number':180,'multiline':False]['text':'/','line_number':181,'multiline':False]['text':'/ Example:','line_number':182,'multiline':False]['text':'/ ```','line_number':183,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':184,'multiline':False]['text':'/ F::hinge_embedding_loss(input, target,','line_number':185,'multiline':False]['text':'/ F::HingeEmbeddingLossFuncOptions().margin(2));','line_number':186,'multiline':False]['text':'/ ```','line_number':187,'multiline':False]['text':' namespace functional','line_number':189,'multiline':False]['text':' ============================================================================','line_number':191,'multiline':False]['text':'/ Options for the `MultiMarginLoss` module.','line_number':193,'multiline':False]['text':'/','line_number':194,'multiline':False]['text':'/ Example:','line_number':195,'multiline':False]['text':'/ ```','line_number':196,'multiline':False]['text':'/ MultiMarginLoss model(MultiMarginLossOptions().margin(2).weight(weight));','line_number':197,'multiline':False]['text':'/ ```','line_number':198,'multiline':False]['text':'/ Has a default value of :math:`1`. :math:`1` and :math:`2`','line_number':203,'multiline':False]['text':'/ are the only supported values.','line_number':204,'multiline':False]['text':'/ Has a default value of :math:`1`.','line_number':206,'multiline':False]['text':'/ A manual rescaling weight given to each','line_number':208,'multiline':False]['text':'/ class. If given, it has to be a Tensor of size `C`. Otherwise, it is','line_number':209,'multiline':False]['text':'/ treated as if having all ones.','line_number':210,'multiline':False]['text':'/ Specifies the reduction to apply to the output:','line_number':212,'multiline':False]['text':'/ ``'none'`` | ``'mean'`` | ``'sum'``. ``'none'``: no reduction will be','line_number':213,'multiline':False]['text':'/ applied,','line_number':214,'multiline':False]['text':'/ ``'mean'``: the sum of the output will be divided by the number of','line_number':215,'multiline':False]['text':'/ elements in the output, ``'sum'``: the output will be summed. Default:','line_number':216,'multiline':False]['text':'/ ``'mean'``','line_number':217,'multiline':False]['text':'/ Options for `torch::nn::functional::multi_margin_loss`.','line_number':222,'multiline':False]['text':'/','line_number':223,'multiline':False]['text':'/ See the documentation for `torch::nn::MultiMarginLossOptions` class to learn','line_number':224,'multiline':False]['text':'/ what arguments are supported.','line_number':225,'multiline':False]['text':'/','line_number':226,'multiline':False]['text':'/ Example:','line_number':227,'multiline':False]['text':'/ ```','line_number':228,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':229,'multiline':False]['text':'/ F::multi_margin_loss(input, target,','line_number':230,'multiline':False]['text':'/ F::MultiMarginLossFuncOptions().margin(2).weight(weight));','line_number':231,'multiline':False]['text':'/ ```','line_number':232,'multiline':False]['text':' namespace functional','line_number':234,'multiline':False]['text':' ============================================================================','line_number':236,'multiline':False]['text':'/ Options for the `CosineEmbeddingLoss` module.','line_number':238,'multiline':False]['text':'/','line_number':239,'multiline':False]['text':'/ Example:','line_number':240,'multiline':False]['text':'/ ```','line_number':241,'multiline':False]['text':'/ CosineEmbeddingLoss model(CosineEmbeddingLossOptions().margin(0.5));','line_number':242,'multiline':False]['text':'/ ```','line_number':243,'multiline':False]['text':'/ Specifies the threshold for which the distance of a negative sample must','line_number':248,'multiline':False]['text':'/ reach in order to incur zero loss. Should be a number from -1 to 1, 0','line_number':249,'multiline':False]['text':'/ to 0.5 is suggested. Default: 0.0','line_number':250,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':252,'multiline':False]['text':'/ Options for `torch::nn::functional::cosine_embedding_loss`.','line_number':257,'multiline':False]['text':'/','line_number':258,'multiline':False]['text':'/ See the documentation for `torch::nn::CosineEmbeddingLossOptions` class to','line_number':259,'multiline':False]['text':'/ learn what arguments are supported.','line_number':260,'multiline':False]['text':'/','line_number':261,'multiline':False]['text':'/ Example:','line_number':262,'multiline':False]['text':'/ ```','line_number':263,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':264,'multiline':False]['text':'/ F::cosine_embedding_loss(input1, input2, target,','line_number':265,'multiline':False]['text':'/ F::CosineEmbeddingLossFuncOptions().margin(0.5));','line_number':266,'multiline':False]['text':'/ ```','line_number':267,'multiline':False]['text':' namespace functional','line_number':269,'multiline':False]['text':' ============================================================================','line_number':271,'multiline':False]['text':'/ Options for the `MultiLabelMarginLoss` module.','line_number':273,'multiline':False]['text':'/','line_number':274,'multiline':False]['text':'/ Example:','line_number':275,'multiline':False]['text':'/ ```','line_number':276,'multiline':False]['text':'/ MultiLabelMarginLoss model(MultiLabelMarginLossOptions(torch::kNone));','line_number':277,'multiline':False]['text':'/ ```','line_number':278,'multiline':False]['text':'/ Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.','line_number':290,'multiline':False]['text':'/ 'none': no reduction will be applied, 'mean': the sum of the output will','line_number':291,'multiline':False]['text':'/ be divided by the number of elements in the output, 'sum': the output will','line_number':292,'multiline':False]['text':'/ be summed. Default: 'mean'','line_number':293,'multiline':False]['text':'/ Options for `torch::nn::functional::multilabel_margin_loss`.','line_number':298,'multiline':False]['text':'/','line_number':299,'multiline':False]['text':'/ See the documentation for `torch::nn::MultiLabelMarginLossOptions` class to','line_number':300,'multiline':False]['text':'/ learn what arguments are supported.','line_number':301,'multiline':False]['text':'/','line_number':302,'multiline':False]['text':'/ Example:','line_number':303,'multiline':False]['text':'/ ```','line_number':304,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':305,'multiline':False]['text':'/ F::multilabel_margin_loss(input, target,','line_number':306,'multiline':False]['text':'/ F::MultilabelMarginLossFuncOptions(torch::kNone));','line_number':307,'multiline':False]['text':'/ ```','line_number':308,'multiline':False]['text':' namespace functional','line_number':310,'multiline':False]['text':' ============================================================================','line_number':312,'multiline':False]['text':'/ Options for the `SoftMarginLoss` module.','line_number':314,'multiline':False]['text':'/','line_number':315,'multiline':False]['text':'/ Example:','line_number':316,'multiline':False]['text':'/ ```','line_number':317,'multiline':False]['text':'/ SoftMarginLoss model(SoftMarginLossOptions(torch::kNone));','line_number':318,'multiline':False]['text':'/ ```','line_number':319,'multiline':False]['text':'/ Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.','line_number':331,'multiline':False]['text':'/ 'none': no reduction will be applied, 'mean': the sum of the output will','line_number':332,'multiline':False]['text':'/ be divided by the number of elements in the output, 'sum': the output will','line_number':333,'multiline':False]['text':'/ be summed. Default: 'mean'','line_number':334,'multiline':False]['text':'/ Options for `torch::nn::functional::soft_margin_loss`.','line_number':339,'multiline':False]['text':'/','line_number':340,'multiline':False]['text':'/ See the documentation for `torch::nn::SoftMarginLossOptions` class to learn','line_number':341,'multiline':False]['text':'/ what arguments are supported.','line_number':342,'multiline':False]['text':'/','line_number':343,'multiline':False]['text':'/ Example:','line_number':344,'multiline':False]['text':'/ ```','line_number':345,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':346,'multiline':False]['text':'/ F::soft_margin_loss(input, target,','line_number':347,'multiline':False]['text':'/ F::SoftMarginLossFuncOptions(torch::kNone));','line_number':348,'multiline':False]['text':'/ ```','line_number':349,'multiline':False]['text':' namespace functional','line_number':351,'multiline':False]['text':' ============================================================================','line_number':353,'multiline':False]['text':'/ Options for the `MultiLabelSoftMarginLoss` module.','line_number':355,'multiline':False]['text':'/','line_number':356,'multiline':False]['text':'/ Example:','line_number':357,'multiline':False]['text':'/ ```','line_number':358,'multiline':False]['text':'/ MultiLabelSoftMarginLoss','line_number':359,'multiline':False]['text':'/ model(MultiLabelSoftMarginLossOptions().reduction(torch::kNone).weight(weight));','line_number':360,'multiline':False]['text':'/ ```','line_number':361,'multiline':False]['text':'/ A manual rescaling weight given to each','line_number':366,'multiline':False]['text':'/ class. If given, it has to be a Tensor of size `C`. Otherwise, it is','line_number':367,'multiline':False]['text':'/ treated as if having all ones.','line_number':368,'multiline':False]['text':'/ Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.','line_number':371,'multiline':False]['text':'/ 'none': no reduction will be applied, 'mean': the sum of the output will','line_number':372,'multiline':False]['text':'/ be divided by the number of elements in the output, 'sum': the output will','line_number':373,'multiline':False]['text':'/ be summed. Default: 'mean'','line_number':374,'multiline':False]['text':'/ Options for `torch::nn::functional::multilabel_soft_margin_loss`.','line_number':379,'multiline':False]['text':'/','line_number':380,'multiline':False]['text':'/ See the documentation for `torch::nn::MultiLabelSoftMarginLossOptions` class','line_number':381,'multiline':False]['text':'/ to learn what arguments are supported.','line_number':382,'multiline':False]['text':'/','line_number':383,'multiline':False]['text':'/ Example:','line_number':384,'multiline':False]['text':'/ ```','line_number':385,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':386,'multiline':False]['text':'/ F::multilabel_soft_margin_loss(input, target,','line_number':387,'multiline':False]['text':'/ F::MultilabelSoftMarginLossFuncOptions().reduction(torch::kNone).weight(weight));','line_number':388,'multiline':False]['text':'/ ```','line_number':389,'multiline':False]['text':' namespace functional','line_number':391,'multiline':False]['text':' ============================================================================','line_number':393,'multiline':False]['text':'/ Options for the `TripletMarginLoss` module.','line_number':395,'multiline':False]['text':'/','line_number':396,'multiline':False]['text':'/ Example:','line_number':397,'multiline':False]['text':'/ ```','line_number':398,'multiline':False]['text':'/ TripletMarginLoss','line_number':399,'multiline':False]['text':'/ model(TripletMarginLossOptions().margin(3).p(2).eps(1e-06).swap(false));','line_number':400,'multiline':False]['text':'/ ```','line_number':401,'multiline':False]['text':'/ Specifies the threshold for which the distance of a negative sample must','line_number':406,'multiline':False]['text':'/ reach in order to incur zero loss. Default: 1','line_number':407,'multiline':False]['text':'/ Specifies the norm degree for pairwise distance. Default: 2','line_number':409,'multiline':False]['text':'/ The distance swap is described in detail in the paper Learning shallow','line_number':412,'multiline':False]['text':'/ convolutional feature descriptors with triplet losses by V. Balntas,','line_number':413,'multiline':False]['text':'/ E. Riba et al. Default: False','line_number':414,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':416,'multiline':False]['text':'/ Options for `torch::nn::functional::triplet_margin_loss`.','line_number':421,'multiline':False]['text':'/','line_number':422,'multiline':False]['text':'/ See the documentation for `torch::nn::TripletMarginLossOptions` class to','line_number':423,'multiline':False]['text':'/ learn what arguments are supported.','line_number':424,'multiline':False]['text':'/','line_number':425,'multiline':False]['text':'/ Example:','line_number':426,'multiline':False]['text':'/ ```','line_number':427,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':428,'multiline':False]['text':'/ F::triplet_margin_loss(anchor, positive, negative,','line_number':429,'multiline':False]['text':'/ F::TripletMarginLossFuncOptions().margin(1.0));','line_number':430,'multiline':False]['text':'/ ```','line_number':431,'multiline':False]['text':' namespace functional','line_number':433,'multiline':False]['text':' ============================================================================','line_number':435,'multiline':False]['text':'/ Options for the `TripletMarginWithDistanceLoss` module.','line_number':437,'multiline':False]['text':'/','line_number':438,'multiline':False]['text':'/ Example:','line_number':439,'multiline':False]['text':'/ ```','line_number':440,'multiline':False]['text':'/ TripletMarginWithDistanceLoss','line_number':441,'multiline':False]['text':'/ model(TripletMarginWithDistanceLossOptions().margin(3).swap(false));','line_number':442,'multiline':False]['text':'/ ```','line_number':443,'multiline':False]['text':'/ Specifies a nonnegative, real-valued function that quantifies the','line_number':450,'multiline':False]['text':'/ closeness of two tensors. If not specified, `F::pairwise_distance` will','line_number':451,'multiline':False]['text':'/ be used. Default: nullopt','line_number':452,'multiline':False]['text':'/ Specifies a nonnegative margin representing the minimum difference','line_number':455,'multiline':False]['text':'/ between the positive and negative distances required for the loss to be 0.','line_number':456,'multiline':False]['text':'/ Larger margins penalize cases where the negative examples are not distance','line_number':457,'multiline':False]['text':'/ enough from the anchors, relative to the positives. Default: 1','line_number':458,'multiline':False]['text':'/ Whether to use the distance swap described in the paper Learning shallow','line_number':460,'multiline':False]['text':'/ convolutional feature descriptors with triplet losses by V. Balntas,','line_number':461,'multiline':False]['text':'/ E. Riba et al. If True, and if the positive example is closer to the','line_number':462,'multiline':False]['text':'/ negative example than the anchor is, swaps the positive example and the','line_number':463,'multiline':False]['text':'/ anchor in the loss computation. Default: False','line_number':464,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':466,'multiline':False]['text':'/ Options for `torch::nn::functional::triplet_margin_with_distance_loss`.','line_number':471,'multiline':False]['text':'/','line_number':472,'multiline':False]['text':'/ See the documentation for `torch::nn::TripletMarginWithDistanceLossOptions`','line_number':473,'multiline':False]['text':'/ class to learn what arguments are supported.','line_number':474,'multiline':False]['text':'/','line_number':475,'multiline':False]['text':'/ Example:','line_number':476,'multiline':False]['text':'/ ```','line_number':477,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':478,'multiline':False]['text':'/ F::triplet_margin_with_distance_loss(anchor, positive, negative,','line_number':479,'multiline':False]['text':'/ F::TripletMarginWithDistanceLossFuncOptions().margin(1.0));','line_number':480,'multiline':False]['text':'/ ```','line_number':481,'multiline':False]['text':' namespace functional','line_number':484,'multiline':False]['text':' ============================================================================','line_number':486,'multiline':False]['text':'/ Options for the `CTCLoss` module.','line_number':488,'multiline':False]['text':'/','line_number':489,'multiline':False]['text':'/ Example:','line_number':490,'multiline':False]['text':'/ ```','line_number':491,'multiline':False]['text':'/ CTCLoss','line_number':492,'multiline':False]['text':'/ model(CTCLossOptions().blank(42).zero_infinity(false).reduction(torch::kSum));','line_number':493,'multiline':False]['text':'/ ```','line_number':494,'multiline':False]['text':'/ blank label. Default `0`.','line_number':499,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':501,'multiline':False]['text':'/ Whether to zero infinite losses and the associated gradients.','line_number':503,'multiline':False]['text':'/ Default: `false`. Infinite losses mainly occur when the inputs are','line_number':504,'multiline':False]['text':'/ too short to be aligned to the targets.','line_number':505,'multiline':False]['text':'/ Options for `torch::nn::functional::ctc_loss`.','line_number':510,'multiline':False]['text':'/','line_number':511,'multiline':False]['text':'/ See the documentation for `torch::nn::CTCLossOptions` class to learn what','line_number':512,'multiline':False]['text':'/ arguments are supported.','line_number':513,'multiline':False]['text':'/','line_number':514,'multiline':False]['text':'/ Example:','line_number':515,'multiline':False]['text':'/ ```','line_number':516,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':517,'multiline':False]['text':'/ F::ctc_loss(log_probs, targets, input_lengths, target_lengths,','line_number':518,'multiline':False]['text':'/ F::CTCLossFuncOptions().reduction(torch::kNone));','line_number':519,'multiline':False]['text':'/ ```','line_number':520,'multiline':False]['text':' namespace functional','line_number':522,'multiline':False]['text':' ============================================================================','line_number':524,'multiline':False]['text':'/ Options for the `SmoothL1Loss` module.','line_number':526,'multiline':False]['text':'/','line_number':527,'multiline':False]['text':'/ Example:','line_number':528,'multiline':False]['text':'/ ```','line_number':529,'multiline':False]['text':'/ SmoothL1Loss model(SmoothL1LossOptions().reduction(torch::kNone).beta(0.5));','line_number':530,'multiline':False]['text':'/ ```','line_number':531,'multiline':False]['text':'/ Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.','line_number':543,'multiline':False]['text':'/ 'none': no reduction will be applied, 'mean': the sum of the output will','line_number':544,'multiline':False]['text':'/ be divided by the number of elements in the output, 'sum': the output will','line_number':545,'multiline':False]['text':'/ be summed. Default: 'mean'','line_number':546,'multiline':False]['text':'/ Specifies the threshold at which to change between L1 and L2 loss.','line_number':548,'multiline':False]['text':'/ If beta is not specified, a value of 1.0 will be used.','line_number':549,'multiline':False]['text':'/ Default: nullopt','line_number':550,'multiline':False]['text':'/ Options for `torch::nn::functional::smooth_l1_loss`.','line_number':555,'multiline':False]['text':'/','line_number':556,'multiline':False]['text':'/ See the documentation for `torch::nn::SmoothL1LossOptions` class to learn','line_number':557,'multiline':False]['text':'/ what arguments are supported.','line_number':558,'multiline':False]['text':'/','line_number':559,'multiline':False]['text':'/ Example:','line_number':560,'multiline':False]['text':'/ ```','line_number':561,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':562,'multiline':False]['text':'/ F::smooth_l1_loss(input, target, F::SmoothL1LossFuncOptions(torch::kNone));','line_number':563,'multiline':False]['text':'/ ```','line_number':564,'multiline':False]['text':' namespace functional','line_number':566,'multiline':False]['text':' ============================================================================','line_number':568,'multiline':False]['text':'/ Options for the `HuberLoss` module.','line_number':570,'multiline':False]['text':'/','line_number':571,'multiline':False]['text':'/ Example:','line_number':572,'multiline':False]['text':'/ ```','line_number':573,'multiline':False]['text':'/ HuberLoss model(HuberLossOptions().reduction(torch::kNone).delta(0.5));','line_number':574,'multiline':False]['text':'/ ```','line_number':575,'multiline':False]['text':'/ Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.','line_number':587,'multiline':False]['text':'/ 'none': no reduction will be applied, 'mean': the sum of the output will','line_number':588,'multiline':False]['text':'/ be divided by the number of elements in the output, 'sum': the output will','line_number':589,'multiline':False]['text':'/ be summed. Default: 'mean'','line_number':590,'multiline':False]['text':'/ Specifies the threshold at which to change between L1 and L2 loss.','line_number':592,'multiline':False]['text':'/ Default: 1.0','line_number':593,'multiline':False]['text':'/ Options for `torch::nn::functional::huber_loss`.','line_number':598,'multiline':False]['text':'/','line_number':599,'multiline':False]['text':'/ See the documentation for `torch::nn::HuberLossOptions` class to learn what','line_number':600,'multiline':False]['text':'/ arguments are supported.','line_number':601,'multiline':False]['text':'/','line_number':602,'multiline':False]['text':'/ Example:','line_number':603,'multiline':False]['text':'/ ```','line_number':604,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':605,'multiline':False]['text':'/ F::huber_loss(input, target, F::HuberLossFuncOptions(torch::kNone));','line_number':606,'multiline':False]['text':'/ ```','line_number':607,'multiline':False]['text':' namespace functional','line_number':609,'multiline':False]['text':' ============================================================================','line_number':611,'multiline':False]['text':'/ Options for the `PoissonNLLLoss` module.','line_number':613,'multiline':False]['text':'/','line_number':614,'multiline':False]['text':'/ Example:','line_number':615,'multiline':False]['text':'/ ```','line_number':616,'multiline':False]['text':'/ PoissonNLLLoss','line_number':617,'multiline':False]['text':'/ model(PoissonNLLLossOptions().log_input(false).full(true).eps(0.42).reduction(torch::kSum));','line_number':618,'multiline':False]['text':'/ ```','line_number':619,'multiline':False]['text':'/ if true the loss is computed as `exp(input) - target * input`,','line_number':624,'multiline':False]['text':'/ if false the loss is `input - target * log(input + eps)`.','line_number':625,'multiline':False]['text':'/ whether to compute full loss, i.e. to add the Stirling approximation term','line_number':627,'multiline':False]['text':'/ target * log(target) - target + 0.5 * log(2 * pi * target).','line_number':628,'multiline':False]['text':'/ Small value to avoid evaluation of `log(0)` when `log_input = false`.','line_number':630,'multiline':False]['text':'/ Default: 1e-8','line_number':631,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':633,'multiline':False]['text':'/ Options for `torch::nn::functional::poisson_nll_loss`.','line_number':638,'multiline':False]['text':'/','line_number':639,'multiline':False]['text':'/ See the documentation for `torch::nn::PoissonNLLLossOptions` class to learn','line_number':640,'multiline':False]['text':'/ what arguments are supported.','line_number':641,'multiline':False]['text':'/','line_number':642,'multiline':False]['text':'/ Example:','line_number':643,'multiline':False]['text':'/ ```','line_number':644,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':645,'multiline':False]['text':'/ F::poisson_nll_loss(input, target,','line_number':646,'multiline':False]['text':'/ F::PoissonNLLLossFuncOptions().reduction(torch::kNone));','line_number':647,'multiline':False]['text':'/ ```','line_number':648,'multiline':False]['text':' namespace functional','line_number':650,'multiline':False]['text':' ============================================================================','line_number':652,'multiline':False]['text':'/ Options for the `MarginRankingLoss` module.','line_number':654,'multiline':False]['text':'/','line_number':655,'multiline':False]['text':'/ Example:','line_number':656,'multiline':False]['text':'/ ```','line_number':657,'multiline':False]['text':'/ MarginRankingLoss','line_number':658,'multiline':False]['text':'/ model(MarginRankingLossOptions().margin(0.5).reduction(torch::kSum));','line_number':659,'multiline':False]['text':'/ ```','line_number':660,'multiline':False]['text':'/ Has a default value of `0`.','line_number':665,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':667,'multiline':False]['text':'/ Options for `torch::nn::functional::margin_ranking_loss`.','line_number':672,'multiline':False]['text':'/','line_number':673,'multiline':False]['text':'/ See the documentation for `torch::nn::MarginRankingLossOptions` class to','line_number':674,'multiline':False]['text':'/ learn what arguments are supported.','line_number':675,'multiline':False]['text':'/','line_number':676,'multiline':False]['text':'/ Example:','line_number':677,'multiline':False]['text':'/ ```','line_number':678,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':679,'multiline':False]['text':'/ F::margin_ranking_loss(input1, input2, target,','line_number':680,'multiline':False]['text':'/ F::MarginRankingLossFuncOptions().margin(0.5).reduction(torch::kSum));','line_number':681,'multiline':False]['text':'/ ```','line_number':682,'multiline':False]['text':' namespace functional','line_number':684,'multiline':False]['text':' ============================================================================','line_number':686,'multiline':False]['text':'/ Options for the `NLLLoss` module.','line_number':688,'multiline':False]['text':'/','line_number':689,'multiline':False]['text':'/ Example:','line_number':690,'multiline':False]['text':'/ ```','line_number':691,'multiline':False]['text':'/ NLLLoss model(NLLLossOptions().ignore_index(-100).reduction(torch::kMean));','line_number':692,'multiline':False]['text':'/ ```','line_number':693,'multiline':False]['text':'/ A manual rescaling weight given to each','line_number':698,'multiline':False]['text':'/ class. If given, it has to be a Tensor of size `C`. Otherwise, it is','line_number':699,'multiline':False]['text':'/ treated as if having all ones.','line_number':700,'multiline':False]['text':'/ Specifies a target value that is ignored','line_number':702,'multiline':False]['text':'/ and does not contribute to the input gradient.','line_number':703,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':705,'multiline':False]['text':'/ Options for `torch::nn::functional::nll_loss`.','line_number':710,'multiline':False]['text':'/','line_number':711,'multiline':False]['text':'/ See the documentation for `torch::nn::NLLLossOptions` class to learn what','line_number':712,'multiline':False]['text':'/ arguments are supported.','line_number':713,'multiline':False]['text':'/','line_number':714,'multiline':False]['text':'/ Example:','line_number':715,'multiline':False]['text':'/ ```','line_number':716,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':717,'multiline':False]['text':'/ F::nll_loss(input, target,','line_number':718,'multiline':False]['text':'/ F::NLLLossFuncOptions().ignore_index(-100).reduction(torch::kMean));','line_number':719,'multiline':False]['text':'/ ```','line_number':720,'multiline':False]['text':' namespace functional','line_number':722,'multiline':False]['text':' ============================================================================','line_number':724,'multiline':False]['text':'/ Options for the `CrossEntropyLoss` module.','line_number':726,'multiline':False]['text':'/','line_number':727,'multiline':False]['text':'/ Example:','line_number':728,'multiline':False]['text':'/ ```','line_number':729,'multiline':False]['text':'/ CrossEntropyLoss','line_number':730,'multiline':False]['text':'/ model(CrossEntropyLossOptions().ignore_index(-100).reduction(torch::kMean));','line_number':731,'multiline':False]['text':'/ ```','line_number':732,'multiline':False]['text':'/ A manual rescaling weight given to each class. If given, has to be a','line_number':737,'multiline':False]['text':'/ Tensor of size C','line_number':738,'multiline':False]['text':'/ Specifies a target value that is ignored','line_number':740,'multiline':False]['text':'/ and does not contribute to the input gradient.','line_number':741,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':743,'multiline':False]['text':'/ Specifies the amount of smoothing when computing the loss. Default: 0.0','line_number':745,'multiline':False]['text':'/ Options for `torch::nn::functional::cross_entropy`.','line_number':750,'multiline':False]['text':'/','line_number':751,'multiline':False]['text':'/ See the documentation for `torch::nn::CrossEntropyLossOptions` class to','line_number':752,'multiline':False]['text':'/ learn what arguments are supported.','line_number':753,'multiline':False]['text':'/','line_number':754,'multiline':False]['text':'/ Example:','line_number':755,'multiline':False]['text':'/ ```','line_number':756,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':757,'multiline':False]['text':'/ F::cross_entropy(input, target,','line_number':758,'multiline':False]['text':'/ F::CrossEntropyFuncOptions().ignore_index(-100).reduction(torch::kMean));','line_number':759,'multiline':False]['text':'/ ```','line_number':760,'multiline':False]['text':' namespace functional','line_number':762,'multiline':False]['text':' ============================================================================','line_number':764,'multiline':False]['text':'/ Options for the `BCEWithLogitsLoss` module.','line_number':766,'multiline':False]['text':'/','line_number':767,'multiline':False]['text':'/ Example:','line_number':768,'multiline':False]['text':'/ ```','line_number':769,'multiline':False]['text':'/ BCEWithLogitsLoss','line_number':770,'multiline':False]['text':'/ model(BCEWithLogitsLossOptions().reduction(torch::kNone).weight(weight));','line_number':771,'multiline':False]['text':'/ ```','line_number':772,'multiline':False]['text':'/ A manual rescaling weight given to the loss of each batch element.','line_number':776,'multiline':False]['text':'/ If given, has to be a Tensor of size `nbatch`.','line_number':777,'multiline':False]['text':'/ Specifies the reduction to apply to the output. Default: Mean','line_number':779,'multiline':False]['text':'/ A weight of positive examples.','line_number':781,'multiline':False]['text':'/ Must be a vector with length equal to the number of classes.','line_number':782,'multiline':False]['text':'/ Options for `torch::nn::functional::binary_cross_entropy_with_logits`.','line_number':787,'multiline':False]['text':'/','line_number':788,'multiline':False]['text':'/ See the documentation for `torch::nn::BCEWithLogitsLossOptions` class to','line_number':789,'multiline':False]['text':'/ learn what arguments are supported.','line_number':790,'multiline':False]['text':'/','line_number':791,'multiline':False]['text':'/ Example:','line_number':792,'multiline':False]['text':'/ ```','line_number':793,'multiline':False]['text':'/ namespace F = torch::nn::functional;','line_number':794,'multiline':False]['text':'/ F::binary_cross_entropy_with_logits(input, target,','line_number':795,'multiline':False]['text':'/ F::BinaryCrossEntropyWithLogitsFuncOptions().pos_weight(pos_weight).reduction(torch::kSum));','line_number':796,'multiline':False]['text':'/ ```','line_number':797,'multiline':False]['text':' namespace functional','line_number':799,'multiline':False]['text':' namespace nn','line_number':801,'multiline':False]['text':' namespace torch','line_number':802,'multiline':False]