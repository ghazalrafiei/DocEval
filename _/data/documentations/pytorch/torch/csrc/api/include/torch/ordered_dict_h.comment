['text':'/ An ordered dictionary implementation, akin to Python's `OrderedDict`.','line_number':11,'multiline':False]['text':'/ A (key, value) pair.','line_number':15,'multiline':False]['text':' The lifetime of an iterator is bound to the lifetime of the `OrderedDict`.','line_number':18,'multiline':False]['text':' Further, any `insert()` operation may invalidate all iterators','line_number':19,'multiline':False]['text':' pointing into the vector.','line_number':20,'multiline':False]['text':'/ Constructs the `OrderedDict` with a short description of the kinds of keys','line_number':24,'multiline':False]['text':'/ stored in the `OrderedDict`. This description is used in error messages','line_number':25,'multiline':False]['text':'/ thrown by the `OrderedDict`.','line_number':26,'multiline':False]['text':'/ Copy constructs this `OrderedDict` from `other`.','line_number':29,'multiline':False]['text':'/ Assigns items from `other` to this `OrderedDict`.','line_number':32,'multiline':False]['text':' NB: Move works by default, because you can move-construct vectors of const','line_number':35,'multiline':False]['text':' values. I tried to make this noexcept (conditional on the move constructors','line_number':36,'multiline':False]['text':' of index_ and items_ being noexcept) but the obvious spelling didn't','line_number':37,'multiline':False]['text':' compile on Windows.','line_number':38,'multiline':False]['text':'/ Constructs a new `OrderedDict` and pre-populates it with the given','line_number':44,'multiline':False]['text':'/ `Item`s.','line_number':45,'multiline':False]['text':'implicit ','line_number':46,'multiline':True]['text':'/ Returns the key description string the `OrderedDict` was constructed with.','line_number':48,'multiline':False]['text':' Element Access','line_number':51,'multiline':False]['text':'/ Returns the very first item in the `OrderedDict` and throws an exception','line_number':53,'multiline':False]['text':'/ if it is empty.','line_number':54,'multiline':False]['text':'/ Returns the very first item in the `OrderedDict` and throws an exception','line_number':57,'multiline':False]['text':'/ if it is empty.','line_number':58,'multiline':False]['text':'/ Returns the very last item in the `OrderedDict` and throws an exception','line_number':61,'multiline':False]['text':'/ if it is empty.','line_number':62,'multiline':False]['text':'/ Returns the very last item in the `OrderedDict` and throws an exception','line_number':65,'multiline':False]['text':'/ if it is empty.','line_number':66,'multiline':False]['text':'/ Returns the item at the `index`-th position in the `OrderedDict`. Throws','line_number':69,'multiline':False]['text':'/ an exception if the index is out of bounds.','line_number':70,'multiline':False]['text':'/ Returns the item at the `index`-th position in the `OrderedDict`. Throws','line_number':73,'multiline':False]['text':'/ an exception if the index is out of bounds.','line_number':74,'multiline':False]['text':'/ Returns the value associated with the given `key`. Throws an exception if','line_number':77,'multiline':False]['text':'/ no such key is stored in the `OrderedDict`. Use `find()` for a','line_number':78,'multiline':False]['text':'/ non-throwing way of accessing a value if it is present.','line_number':79,'multiline':False]['text':'/ Returns the value associated with the given `key`. Throws an exception if','line_number':82,'multiline':False]['text':'/ no such key is stored in the `OrderedDict`. Use `find()` for a','line_number':83,'multiline':False]['text':'/ non-throwing way of accessing a value if it is present.','line_number':84,'multiline':False]['text':' Lookup','line_number':87,'multiline':False]['text':'/ Returns a pointer to the value associated with the given key, or a','line_number':89,'multiline':False]['text':'/ `nullptr` if no such key is stored in the `OrderedDict`.','line_number':90,'multiline':False]['text':'/ Returns a pointer to the value associated with the given key, or a','line_number':93,'multiline':False]['text':'/ `nullptr` if no such key is stored in the `OrderedDict`.','line_number':94,'multiline':False]['text':'/ Returns true if the key is present in the `OrderedDict`.','line_number':97,'multiline':False]['text':' Iterators','line_number':100,'multiline':False]['text':'/ Returns an iterator to the first item in the `OrderedDict`. Iteration is','line_number':102,'multiline':False]['text':'/ ordered.','line_number':103,'multiline':False]['text':'/ Returns an iterator to the first item in the `OrderedDict`. Iteration is','line_number':106,'multiline':False]['text':'/ ordered.','line_number':107,'multiline':False]['text':'/ Returns an iterator one past the last item in the `OrderedDict`.','line_number':110,'multiline':False]['text':'/ Returns an iterator one past the last item in the `OrderedDict`.','line_number':113,'multiline':False]['text':' Capacity','line_number':116,'multiline':False]['text':'/ Returns the number of items currently stored in the `OrderedDict`.','line_number':118,'multiline':False]['text':'/ Returns true if the `OrderedDict` contains no elements.','line_number':121,'multiline':False]['text':'/ Resizes internal storage to fit at least `requested_capacity` items','line_number':124,'multiline':False]['text':'/ without requiring reallocation.','line_number':125,'multiline':False]['text':' Modifiers','line_number':128,'multiline':False]['text':'/ Inserts a new `(key, value)` pair into the `OrderedDict`. Throws an','line_number':130,'multiline':False]['text':'/ exception if the key is already present. If insertion is successful,','line_number':131,'multiline':False]['text':'/ immediately returns a reference to the inserted value.','line_number':132,'multiline':False]['text':'/ Inserts a new `(key, value)` pair into the `OrderedDict`. Throws an','line_number':136,'multiline':False]['text':'/ exception if the key is already present. If insertion is successful,','line_number':137,'multiline':False]['text':'/ immediately returns a reference to the inserted value.','line_number':138,'multiline':False]['text':'/ Inserts all items from `other` into this `OrderedDict`. If any key from','line_number':141,'multiline':False]['text':'/ `other` is already present in this `OrderedDict`, an exception is thrown.','line_number':142,'multiline':False]['text':'/ Inserts all items from `other` into this `OrderedDict`. If any key from','line_number':145,'multiline':False]['text':'/ `other` is already present in this `OrderedDict`, an exception is thrown.','line_number':146,'multiline':False]['text':'/ Removes the item that has `key` from this `OrderedDict` if exists and if','line_number':149,'multiline':False]['text':'/ it doesn't an exception is thrown.','line_number':150,'multiline':False]['text':'/ Removes all items from this `OrderedDict`.','line_number':153,'multiline':False]['text':' Observers','line_number':156,'multiline':False]['text':'/ Returns the items stored in the `OrderedDict`.','line_number':158,'multiline':False]['text':'/ Returns a newly allocated vector and copies all keys from this','line_number':161,'multiline':False]['text':'/ `OrderedDict` into the vector.','line_number':162,'multiline':False]['text':'/ Returns a newly allocated vector and copies all values from this','line_number':165,'multiline':False]['text':'/ `OrderedDict` into the vector.','line_number':166,'multiline':False]['text':'/ Returns a newly allocated vector and copies all keys and values from this','line_number':169,'multiline':False]['text':'/ `OrderedDict` into a vector of `std::pair<Key, Value>`.','line_number':170,'multiline':False]['text':'/ Returns true if both dicts contain the same keys and values, in the same','line_number':173,'multiline':False]['text':'/ order.','line_number':174,'multiline':False]['text':'/ A mapping from a key to an index into the `items_` vector.','line_number':181,'multiline':False]['text':'/ The items stored in the `OrderedDict`.','line_number':184,'multiline':False]['text':'/ A description of the keys stored in the `OrderedDict`.','line_number':187,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OrderedDict::Item ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':191,'multiline':False]['text':'/ Constructs a new item.','line_number':196,'multiline':False]['text':'/ Returns a reference to the value.','line_number':199,'multiline':False]['text':'/ Returns a reference to the value.','line_number':204,'multiline':False]['text':'/ Allows access to the value using the arrow operator.','line_number':209,'multiline':False]['text':'/ Allows access to the value using the arrow operator.','line_number':214,'multiline':False]['text':'/ Returns a reference to the key.','line_number':219,'multiline':False]['text':'/ Returns a reference to the value.','line_number':224,'multiline':False]['text':'/ Returns a reference to the value.','line_number':229,'multiline':False]['text':'/ Returns a `(key, value)` pair.','line_number':234,'multiline':False]['text':'/ This is stored as an std::pair because it will make Python binding a lot,','line_number':240,'multiline':False]['text':'/ lot easier.','line_number':241,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OrderedDict ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':245,'multiline':False]['text':' Copy we have to do ourselves, because items' keys are const, so we have to','line_number':254,'multiline':False]['text':' re-insert the items.','line_number':255,'multiline':False]['text':' Copy the key here and move it into the index.','line_number':279,'multiline':False]['text':' Copy `key` here and move it into the index.','line_number':368,'multiline':False]['text':' We want to call `insert()` to prevent duplicate keys.','line_number':383,'multiline':False]['text':' We want to call `insert()` to prevent duplicate keys.','line_number':392,'multiline':False]['text':' NOTE: There's no point in comparing keys for items_, as we already know','line_number':507,'multiline':False]['text':' that index is equal.','line_number':508,'multiline':False]['text':' namespace torch','line_number':516,'multiline':False]