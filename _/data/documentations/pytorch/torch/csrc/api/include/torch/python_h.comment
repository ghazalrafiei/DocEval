['text':'/ Dynamically creates a subclass of `torch.nn.cpp.ModuleWrapper` that is also','line_number':47,'multiline':False]['text':'/ a subclass of `torch.nn.Module`, and passes it the user-provided C++ module','line_number':48,'multiline':False]['text':'/ to which it delegates all calls.','line_number':49,'multiline':False]['text':' Grab the `torch.nn.cpp.ModuleWrapper` class, which we'll subclass','line_number':55,'multiline':False]['text':' with a dynamically created class below.','line_number':56,'multiline':False]['text':' Grab the `type` class which we'll use as a metaclass to create a new class','line_number':60,'multiline':False]['text':' dynamically.','line_number':61,'multiline':False]['text':' The `ModuleWrapper` constructor copies all functions to its own `__dict__`','line_number':65,'multiline':False]['text':' in its constructor, but we do need to give our dynamic class a constructor.','line_number':66,'multiline':False]['text':' Inside, we construct an instance of the original C++ module we're binding','line_number':67,'multiline':False]['text':' (the `torch::nn::Module` subclass), and then forward it to the','line_number':68,'multiline':False]['text':' `ModuleWrapper` constructor.','line_number':69,'multiline':False]['text':' `type()` always needs a `str`, but pybind11's `str()` method always creates','line_number':72,'multiline':False]['text':' a `unicode` object.','line_number':73,'multiline':False]['text':' Dynamically create the subclass of `ModuleWrapper`, which is a subclass of','line_number':76,'multiline':False]['text':' `torch.nn.Module`, and will delegate all calls to the C++ module we're','line_number':77,'multiline':False]['text':' binding.','line_number':78,'multiline':False]['text':' The constructor of the dynamic class calls `ModuleWrapper.__init__()`,','line_number':82,'multiline':False]['text':' which replaces its methods with those of the C++ module.','line_number':83,'multiline':False]['text':' Calling `my_module.my_class` now means that `my_class` is a subclass of','line_number':91,'multiline':False]['text':' `ModuleWrapper`, and whose methods call into the C++ module we're binding.','line_number':92,'multiline':False]['text':' namespace detail','line_number':95,'multiline':False]['text':'/ Adds method bindings for a pybind11 `class_` that binds an `nn::Module`','line_number':97,'multiline':False]['text':'/ subclass.','line_number':98,'multiline':False]['text':'/','line_number':99,'multiline':False]['text':'/ Say you have a pybind11 class object created with `py::class_<Net>(m,','line_number':100,'multiline':False]['text':'/ "Net")`. This function will add all the necessary `.def()` calls to bind the','line_number':101,'multiline':False]['text':'/ `nn::Module` base class' methods, such as `train()`, `eval()` etc. into','line_number':102,'multiline':False]['text':'/ Python.','line_number':103,'multiline':False]['text':'/','line_number':104,'multiline':False]['text':'/ Users should prefer to use `bind_module` if possible.','line_number':105,'multiline':False]['text':' clang-format off','line_number':109,'multiline':False]['text':'recurse=','line_number':120,'multiline':True]['text':'recurse=','line_number':131,'multiline':True]['text':' unused ','line_number':144,'multiline':True]['text':' unused ','line_number':144,'multiline':True]['text':' clang-format on','line_number':190,'multiline':False]['text':'/ Creates a pybind11 class object for an `nn::Module` subclass type and adds','line_number':193,'multiline':False]['text':'/ default bindings.','line_number':194,'multiline':False]['text':'/','line_number':195,'multiline':False]['text':'/ After adding the default bindings, the class object is returned, such that','line_number':196,'multiline':False]['text':'/ you can add more bindings.','line_number':197,'multiline':False]['text':'/','line_number':198,'multiline':False]['text':'/ Example usage:','line_number':199,'multiline':False]['text':'/ \rst','line_number':200,'multiline':False]['text':'/ .. code-block:: cpp','line_number':201,'multiline':False]['text':'/','line_number':202,'multiline':False]['text':'/   struct Net : torch::nn::Module {','line_number':203,'multiline':False]['text':'/     Net(int in, int out) { }','line_number':204,'multiline':False]['text':'/     torch::Tensor forward(torch::Tensor x) { return x; }','line_number':205,'multiline':False]['text':'/   };','line_number':206,'multiline':False]['text':'/','line_number':207,'multiline':False]['text':'/   PYBIND11_MODULE(my_module, m) {','line_number':208,'multiline':False]['text':'/     torch::python::bind_module<Net>(m, "Net")','line_number':209,'multiline':False]['text':'/       .def(py::init<int, int>())','line_number':210,'multiline':False]['text':'/       .def("forward", &Net::forward);','line_number':211,'multiline':False]['text':'/  }','line_number':212,'multiline':False]['text':'/ \endrst','line_number':213,'multiline':False]['text':'/ Creates a pybind11 class object for an `nn::Module` subclass type and adds','line_number':226,'multiline':False]['text':'/ default bindings.','line_number':227,'multiline':False]['text':'/','line_number':228,'multiline':False]['text':'/ After adding the default bindings, the class object is returned, such that','line_number':229,'multiline':False]['text':'/ you can add more bindings.','line_number':230,'multiline':False]['text':'/','line_number':231,'multiline':False]['text':'/ If the class has a `forward()` method, it is automatically exposed as','line_number':232,'multiline':False]['text':'/ `forward()` and `__call__` in Python.','line_number':233,'multiline':False]['text':'/','line_number':234,'multiline':False]['text':'/ Example usage:','line_number':235,'multiline':False]['text':'/ \rst','line_number':236,'multiline':False]['text':'/ .. code-block:: cpp','line_number':237,'multiline':False]['text':'/','line_number':238,'multiline':False]['text':'/   struct Net : torch::nn::Module {','line_number':239,'multiline':False]['text':'/     Net(int in, int out) { }','line_number':240,'multiline':False]['text':'/     torch::Tensor forward(torch::Tensor x) { return x; }','line_number':241,'multiline':False]['text':'/   };','line_number':242,'multiline':False]['text':'/','line_number':243,'multiline':False]['text':'/   PYBIND11_MODULE(my_module, m) {','line_number':244,'multiline':False]['text':'/     torch::python::bind_module<Net>(m, "Net")','line_number':245,'multiline':False]['text':'/       .def(py::init<int, int>())','line_number':246,'multiline':False]['text':'/       .def("forward", &Net::forward);','line_number':247,'multiline':False]['text':'/  }','line_number':248,'multiline':False]['text':'/ \endrst','line_number':249,'multiline':False]['text':'force_enable=','line_number':257,'multiline':True]['text':' namespace python','line_number':261,'multiline':False]['text':' namespace torch','line_number':262,'multiline':False]