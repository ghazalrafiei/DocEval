['text':' Python version only serializes state vars if explicitly defined','line_number':99,'multiline':False]['text':' view as to avoid deprecated pointwise semantics','line_number':148,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':179,'multiline':False]['text':' ported from https://github.com/torch/optim/blob/master/polyinterp.lua','line_number':198,'multiline':False]['text':' Compute bounds of interpolation area','line_number':199,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':200,'multiline':False]['text':' Code for most common case: cubic interpolation of 2 points','line_number':208,'multiline':False]['text':'   w/ function and derivative values for both','line_number':209,'multiline':False]['text':' Solution in this case (where x2 is the farthest point):','line_number':210,'multiline':False]['text':'   d1 = g1 + g2 - 3*(f1-f2)/(x1-x2);','line_number':211,'multiline':False]['text':'   d2 = sqrt(d1^2 - g1*g2);','line_number':212,'multiline':False]['text':'   min_pos = x2 - (x2 - x1)*((g2 + d2 - d1)/(g2 - g1 + 2*d2));','line_number':213,'multiline':False]['text':'   t_new = min(max(min_pos,xmin_bound),xmax_bound);','line_number':214,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':218,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':222,'multiline':False]['text':' // NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':248,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':250,'multiline':False]['text':' evaluate objective and gradient using initial step','line_number':256,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':257,'multiline':False]['text':' bracket an interval containing a point satisfying the Wolfe criteria','line_number':264,'multiline':False]['text':' check conditions','line_number':275,'multiline':False]['text':' interpolate','line_number':298,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':300,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':301,'multiline':False]['text':' next step','line_number':311,'multiline':False]['text':' reached max number of iterations?','line_number':321,'multiline':False]['text':' zoom phase: we now have a point satisfying the criteria, or','line_number':328,'multiline':False]['text':' a bracket around it. We refine the bracket until we find the','line_number':329,'multiline':False]['text':' exact point satisfying the criteria','line_number':330,'multiline':False]['text':' find high and low points in bracket','line_number':332,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':333,'multiline':False]['text':' compute new trial value','line_number':339,'multiline':False]['text':' test that we are making sufficient progress:','line_number':348,'multiline':False]['text':' in case `t` is so close to boundary, we mark that we are making','line_number':349,'multiline':False]['text':' insufficient progress, and if','line_number':350,'multiline':False]['text':'   + we have made insufficient progress in the last step, or','line_number':351,'multiline':False]['text':'   + `t` is at one of the boundary,','line_number':352,'multiline':False]['text':' we will move `t` to a position which is `0.1 * len(bracket)`','line_number':353,'multiline':False]['text':' away from the nearest boundary point.','line_number':354,'multiline':False]['text':' // NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':359,'multiline':False]['text':' interpolation close to boundary','line_number':361,'multiline':False]['text':' evaluate at 0.1 away from boundary','line_number':363,'multiline':False]['text':' Evaluate new point','line_number':375,'multiline':False]['text':' Armijo condition not satisfied or not lower than lowest point','line_number':382,'multiline':False]['text':' # Armijo condition not satisfied or not lower than lowest point','line_number':383,'multiline':False]['text':' Wolfe conditions satisfied','line_number':393,'multiline':False]['text':' old high becomes new low','line_number':396,'multiline':False]['text':' new point becomes new low','line_number':403,'multiline':False]['text':' line-search bracket is so small','line_number':410,'multiline':False]['text':' return stuff','line_number':415,'multiline':False]['text':' NOTE: LBFGS has only global state, but we register it as state for','line_number':439,'multiline':False]['text':' the first param, because this helps with casting in load_state_dict','line_number':440,'multiline':False]['text':' evaluate initial f(x) and df/dx','line_number':448,'multiline':False]['text':' optimal condition','line_number':461,'multiline':False]['text':' tensors cached in state (for tracing)','line_number':466,'multiline':False]['text':' optimize for a max of max_iter iterations','line_number':478,'multiline':False]['text':' keep track of nb of iterations','line_number':480,'multiline':False]['text':' compute gradient descent direction','line_number':484,'multiline':False]['text':' do lbfgs update (update memory)','line_number':492,'multiline':False]['text':' y*s','line_number':495,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':496,'multiline':False]['text':' updating memory','line_number':497,'multiline':False]['text':' shift history by one (limited-memory)','line_number':499,'multiline':False]['text':' store new direction/step','line_number':504,'multiline':False]['text':' update scale of initial Hessian approximation','line_number':509,'multiline':False]['text':' (y*y)','line_number':510,'multiline':False]['text':' compute the approximate (L-BFGS) inverse Hessian','line_number':513,'multiline':False]['text':' multiplied by the gradient','line_number':514,'multiline':False]['text':' iteration in L-BFGS loop collapsed to use just one buffer','line_number':522,'multiline':False]['text':' multiply by initial Hessian','line_number':529,'multiline':False]['text':' r/d is the final direction','line_number':530,'multiline':False]['text':' ############################################################','line_number':546,'multiline':False]['text':' # compute step length','line_number':547,'multiline':False]['text':' ############################################################','line_number':548,'multiline':False]['text':' reset initial guess for step size','line_number':549,'multiline':False]['text':' directional derivative','line_number':556,'multiline':False]['text':' g * d','line_number':557,'multiline':False]['text':' directional derivative is below tolerance','line_number':559,'multiline':False]['text':' optional line search: user function','line_number':563,'multiline':False]['text':' no line search, simply move with fixed-step','line_number':579,'multiline':False]['text':' re-evaluate function only if not in last iteration','line_number':582,'multiline':False]['text':' the reason we do this: in a stochastic setting,','line_number':583,'multiline':False]['text':' no use to re-evaluate that function here','line_number':584,'multiline':False]['text':' update func eval','line_number':594,'multiline':False]['text':' ############################################################','line_number':598,'multiline':False]['text':' # check conditions','line_number':599,'multiline':False]['text':' ############################################################','line_number':600,'multiline':False]['text':' optimal condition','line_number':607,'multiline':False]['text':' lack of progress','line_number':611,'multiline':False]['text':' deserializing archives saved in old format (prior to','line_number':630,'multiline':False]['text':' version 1.5.0)','line_number':631,'multiline':False]['text':'is_buffer=','line_number':639,'multiline':True]['text':'is_buffer=','line_number':640,'multiline':True]['text':'is_buffer=','line_number':641,'multiline':True]['text':'is_buffer=','line_number':642,'multiline':True]['text':'is_buffer=','line_number':643,'multiline':True]['text':' NOTE: LBFGS has only global state, but we register it as state for','line_number':647,'multiline':False]['text':' the first param, because this helps with casting in load_state_dict','line_number':648,'multiline':False]['text':' namespace optim','line_number':661,'multiline':False]['text':' namespace torch','line_number':662,'multiline':False]