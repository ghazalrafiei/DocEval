['text':'//////////////////////////////////////////////////////////////////////////////','line_number':116,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':117,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':126,'multiline':False]['text':'','line_number':146,'multiline':False]['text':' Callback for python part. Used for additional initialization of python','line_number':147,'multiline':False]['text':' classes','line_number':148,'multiline':False]['text':' Skip the first few frames:','line_number':165,'multiline':False]['text':'  #1 torch::CapturedTraceback::gather(bool, bool, bool)','line_number':166,'multiline':False]['text':'  #2 THPModule_initExtension','line_number':167,'multiline':False]['text':'  #3 THPModule_initExtension(_object*, _object*)::{lambda()#1}','line_number':168,'multiline':False]['text':' The idea behind these two functions is to make it easy to test if we are','line_number':204,'multiline':False]['text':' built with ASAN: they're designed not to crash if ASAN is not enabled, but','line_number':205,'multiline':False]['text':' to trigger ASAN if it is enabled.  This lets us run a "canary" tests which','line_number':206,'multiline':False]['text':' checks if our build environment is misconfigured.','line_number':207,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, modernize-avoid-c-arrays)','line_number':215,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.CallAndMessage)','line_number':218,'multiline':False]['text':' This code should work perfectly fine, as vtables are identical for Foo and','line_number':234,'multiline':False]['text':' Baz unless rtti and ubsan are enabled','line_number':235,'multiline':False]['text':' Ensure we have Tensors','line_number':343,'multiline':False]['text':' Swap the Tensor Impl','line_number':350,'multiline':False]['text':' adds a __doc__ string to a function, similar to numpy's arr_add_docstring','line_number':360,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-cstyle-cast)','line_number':393,'multiline':False]['text':' early out, see DLPack spec: if a consuming library sets the capsule','line_number':514,'multiline':False]['text':' name to something else, they own it and we don't need to do anything','line_number':515,'multiline':False]['text':' Causes overheads for validity checks again, but this case is rare','line_number':519,'multiline':False]['text':' since consuming libraries should rename the capsule according to spec.','line_number':520,'multiline':False]['text':' Note that this cannot set a python error (we checked validity above),','line_number':521,'multiline':False]['text':' so we don't need to handle python error state here.','line_number':522,'multiline':False]['text':' the dlMTensor has not been consumed, call deleter ourselves.','line_number':525,'multiline':False]['text':' DLPack spec mentions that deleter may be NULL, but deleter from','line_number':526,'multiline':False]['text':' `at::toDLPack` is never NULL, so no need for an additional check here.','line_number':527,'multiline':False]['text':' Used only for testing C++ to Python warning translations.','line_number':795,'multiline':False]['text':' Used only for testing C++ to Python warning translations.','line_number':803,'multiline':False]['text':'lower_case=','line_number':912,'multiline':True]['text':' unused ','line_number':916,'multiline':True]['text':' This node is guaranteed to be alive since the backward is still running','line_number':1033,'multiline':False]['text':' NOLINT','line_number':1115,'multiline':False]['text':' namespace torch::cuda','line_number':1345,'multiline':False]['text':' namespace torch::profiler','line_number':1351,'multiline':False]['text':' In Python we can't use the trick of C10_LOG_API_USAGE_ONCE','line_number':1356,'multiline':False]['text':' Guaranteed to be invoked from Python under GIL, no locking on map needed','line_number':1357,'multiline':False]['text':' Weak reference to tensor, used to test a tensor isn't leaked','line_number':1372,'multiline':False]['text':' separate decl and defn for msvc error C2491','line_number':1385,'multiline':False]['text':' NOTE: We need to be able to access OperatorExportTypes from ONNX for use in','line_number':1437,'multiline':False]['text':' the export side of JIT, so this ONNX init needs to appear before the JIT','line_number':1438,'multiline':False]['text':' init.','line_number':1439,'multiline':False]['text':' This will only initialise base classes and attach them to library namespace','line_number':1470,'multiline':False]['text':' They won't be ready for real usage until importing cuda module, that will','line_number':1471,'multiline':False]['text':' complete the process (but it defines Python classes before calling back','line_number':1472,'multiline':False]['text':' into C, so these lines have to execute first)..','line_number':1473,'multiline':False]['text':' PyModule_AddObject steals reference','line_number':1481,'multiline':False]['text':' force ATen to initialize because it handles','line_number':1508,'multiline':False]['text':' setting up TH Errors so that they throw C++ exceptions','line_number':1509,'multiline':False]['text':' Automatically translate errors thrown from pybind11 functions','line_number':1512,'multiline':False]['text':' NOLINT','line_number':1513,'multiline':False]['text':' NB: If we don't toggle collect around dump stats, callgrind_annotate','line_number':1574,'multiline':False]['text':'     won't process the results correctly. Specifically,','line_number':1575,'multiline':False]['text':'     `callgrind_annotate --inclusive=no` will be almost completely empty.','line_number':1576,'multiline':False]['text':' overload for bias_sizes_opt/backward TODO: figure out default value','line_number':1648,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':1692,'multiline':False]['text':' Scaled Dot Product Attention utilities','line_number':1693,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':1694,'multiline':False]['text':' NOLINTNEXTLINE(performance-no-int-to-ptr)','line_number':1758,'multiline':False]['text':' See note [Pybind11 ABI constants]','line_number':1804,'multiline':False]['text':' FIXME(crcrpar): Better to have `at::ScalarType` get mapped to `torch.dtype`','line_number':1872,'multiline':False]['text':' Currently I see the second item of the key is displayed as','line_number':1873,'multiline':False]['text':' e.g. `torch._C._te.ScalarType at 0x7fcf318adab0`','line_number':1874,'multiline':False]['text':' I thought adding an appropriate type_caster of `at::ScalarType` to','line_number':1875,'multiline':False]['text':' torch/csrc/pybind.h` would solve this but it caused segmentation fault in','line_number':1876,'multiline':False]['text':' my environment.','line_number':1877,'multiline':False]['text':' Custom hasher is necessary to make unordered_map compilable for Windows','line_number':1879,'multiline':False]['text':' debug targets. As `at::native::ParamsHash` only works on structs with','line_number':1880,'multiline':False]['text':' standard layout, but std::string isn't one in Visual C++ debug builds,','line_number':1881,'multiline':False]['text':' which one can easily verify by running something like:','line_number':1882,'multiline':False]['text':'   #define _DEBUG','line_number':1883,'multiline':False]['text':'   #include <type_traits>','line_number':1884,'multiline':False]['text':'   #include <string>','line_number':1885,'multiline':False]['text':'   static_assert(std::is_standard_layout_v<std::string>, "Oh noes");','line_number':1886,'multiline':False]['text':' If above condition is not met, VC++ raises a very cryptic compilation','line_number':1887,'multiline':False]['text':' error. See','line_number':1888,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/100007#discussion_r1227116292 for','line_number':1889,'multiline':False]['text':' more detail','line_number':1890,'multiline':False]['text':' This reference is meant to be given away, so no need to incref here.','line_number':1921,'multiline':False]['text':' incref= ','line_number':1925,'multiline':True]['text':' incref= ','line_number':1929,'multiline':True]['text':' incref= ','line_number':1933,'multiline':True]['text':' Checks that the _C shared library isn't initialized multiple times. This','line_number':1944,'multiline':False]['text':' can happen if the same csrc files are compiled into multiple shared','line_number':1945,'multiline':False]['text':' libraries.','line_number':1946,'multiline':False]