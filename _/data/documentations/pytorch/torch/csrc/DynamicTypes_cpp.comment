['text':' namespace','line_number':33,'multiline':False]['text':' Note [Invalid Python Storages]','line_number':60,'multiline':False]['text':' When a user creates a python tensor wrapper subclass, the subclass','line_number':61,'multiline':False]['text':' is a tensor object that has a nullptr storage.','line_number':62,'multiline':False]['text':' We still allow users to call `my_subclass.untyped_storage()`, and get back','line_number':63,'multiline':False]['text':' a valid storage object (this can be useful for detecting aliasing','line_number':64,'multiline':False]['text':' information about storages from python). However, any accesses to the','line_number':65,'multiline':False]['text':' data_ptr is not allowed, through methods like','line_number':66,'multiline':False]['text':' x.untyped_storage().data_ptr()','line_number':67,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)','line_number':86,'multiline':False]['text':' NOTE: `PyObject_GetAttrString` increments the refcounts to `dtype` and','line_number':105,'multiline':False]['text':' `_untyped_storage`, so we must decrement them. The refcounts will still','line_number':106,'multiline':False]['text':' stay nonzero since the `TypedStorage` maintains a reference.','line_number':107,'multiline':False]['text':' namespace torch','line_number':137,'multiline':False]