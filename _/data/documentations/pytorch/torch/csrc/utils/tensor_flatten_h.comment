['text':'/ Generate an ID for a combination of tensor backend + scalar type to be used','line_number':12,'multiline':False]['text':'/ when ordering tensors ('like' tensors are grouped by pulling out their','line_number':13,'multiline':False]['text':'/ backend + scalar type, so this function combines that into a single number)','line_number':14,'multiline':False]['text':' Helper function that takes a list of tensors and splits them into tensor','line_number':46,'multiline':False]['text':' groups by the size limit and outputs these tensor groups. If the input','line_number':47,'multiline':False]['text':' tensors are of different tensor types, they will be split into different','line_number':48,'multiline':False]['text':' groups as well.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' Two options of splitting provided to the user,','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' Imagine the size_limit is 256 and the list of input tensors are:','line_number':53,'multiline':False]['text':' tensor_a(fp16 - 128 bytes),','line_number':54,'multiline':False]['text':' tensor_b(fp32 - 256 bytes),','line_number':55,'multiline':False]['text':' tensor_c(fp16 - 128 bytes),','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' when fine_grained == false:','line_number':58,'multiline':False]['text':' The function will read the list of tensors sequentially and accumulate','line_number':59,'multiline':False]['text':' enough tensors for each data type until the size_limit, therefore:','line_number':60,'multiline':False]['text':' it will output: {{tensor_a, tensor_c}, {tensor_b}}','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' when fine_grained == true:','line_number':63,'multiline':False]['text':' The function will read the list of tensors sequentially and  accumulate','line_number':64,'multiline':False]['text':' enough tensors for all data types until the size_limit, and then split','line_number':65,'multiline':False]['text':' the accumulated tensors into different groups by data types, therefore:','line_number':66,'multiline':False]['text':' it will output: {{tensor_a}, {tensor_b}, {tensor_c}}','line_number':67,'multiline':False]['text':' namespace utils','line_number':85,'multiline':False]['text':' namespace torch','line_number':86,'multiline':False]