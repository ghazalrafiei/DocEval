['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':22,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':26,'multiline':False]['text':' This function returns the generated code as','line_number':63,'multiline':False]['text':' a string.','line_number':64,'multiline':False]['text':' TODO: Figure out how to unify these call interfaces.','line_number':69,'multiline':False]['text':'/ Call a function with a vector of CallArgs, which are tagged','line_number':71,'multiline':False]['text':'/ unions that properly type the arguments.','line_number':72,'multiline':False]['text':'/ Call a function faster than a regular `call` by assuming that','line_number':75,'multiline':False]['text':'/ the generated kernel already knows the type of the arguments, so','line_number':76,'multiline':False]['text':'/ they can be type-punned with `void*`s.','line_number':77,'multiline':False]['text':'/ Call a function even faster than a regular call, by assuming','line_number':80,'multiline':False]['text':'/ that the number of thread blocks can be derived from `numel` via','line_number':81,'multiline':False]['text':'/ a simple division, rather than evaluating an expression.','line_number':82,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init,cppcoreguidelines-pro-type-const-cast)','line_number':161,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':163,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':166,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':174,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':206,'multiline':False]['text':' Regarding a scalar value, CallArg uses void**=&data_ to store it. But the','line_number':212,'multiline':False]['text':' bit width of a pointer is 32bit on a 32bit platform. It cannot store the','line_number':213,'multiline':False]['text':' scalar if the bit width of the scalar is larger than 32bit, such as double','line_number':214,'multiline':False]['text':' and long. Hence, we add 8 bytes buffer dedicated to storing the scalar','line_number':215,'multiline':False]['text':' value regardless its bit width is less or greater than 32bits.','line_number':216,'multiline':False]['text':' 64bits','line_number':217,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':220,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':241,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':261,'multiline':False]['text':' namespace tensorexpr','line_number':281,'multiline':False]['text':' namespace jit','line_number':282,'multiline':False]['text':' namespace torch','line_number':283,'multiline':False]