['text':' The external functions that could be called from NNC must have the same','line_number':12,'multiline':False]['text':' signature defined by `NNCExternalFunction`.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Why this signature?','line_number':15,'multiline':False]['text':' It was picked for two reasons: 1) it should be generic enough to represent','line_number':16,'multiline':False]['text':' most of the ops we might want to call, 2) it should be possible to generate a','line_number':17,'multiline':False]['text':' code for this call in LLVM codegen.','line_number':18,'multiline':False]['text':' The first 5 parameters allow to pass any number of contiguous CPU tensors in','line_number':19,'multiline':False]['text':' case we need to run aten ops (TODO: support different devices). The first','line_number':20,'multiline':False]['text':' buffer in the array is assumed to be the output buffer. We couldn't use','line_number':21,'multiline':False]['text':' `at::Tensor` (or `c10::IValue`) type there directly as it would mean that','line_number':22,'multiline':False]['text':' we'd need to declare it in LLVM codegen in LLVM IR form, which would be very','line_number':23,'multiline':False]['text':' cumbersome and hard to maintain. Note that the dimensions of all tensors are','line_number':24,'multiline':False]['text':' concatenated into a single array buf_dims. We do not need to pass its length,','line_number':25,'multiline':False]['text':' since it can be deduced from total number of buffers and their ranks.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' The last 2 arguments allow to pass any non-tensor arguments encoded as an','line_number':28,'multiline':False]['text':' array of int64_t values. The way they are encoded is not specified and could','line_number':29,'multiline':False]['text':' be arbitrary - whatever the most convenient for the specific bridge function','line_number':30,'multiline':False]['text':' is.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' The bridge functions must not throw exceptions - properly propagating them','line_number':33,'multiline':False]['text':' from the generated code is too cumbersome, and thus all calls to functions','line_number':34,'multiline':False]['text':' that could throw must be wrapped with try-catch blocks.','line_number':35,'multiline':False]['text':' Return a global map "function-name" -> "function-pointer" for all registered','line_number':46,'multiline':False]['text':' in NNC external functions','line_number':47,'multiline':False]['text':' To register a new external function in NNC one needs to create an instance of','line_number':51,'multiline':False]['text':' this struct','line_number':52,'multiline':False]['text':' namespace tensorexpr','line_number':59,'multiline':False]['text':' namespace jit','line_number':60,'multiline':False]['text':' namespace torch','line_number':61,'multiline':False]