['text':' A simple class containing the start and end of a range in a single dimension.','line_number':15,'multiline':False]['text':' This stores whether or not the start and end of this Bound have previously','line_number':20,'multiline':False]['text':' been swapped. This occurs when the bound is in a loop with a negative','line_number':21,'multiline':False]['text':' stride.','line_number':22,'multiline':False]['text':' The comparison operators are conservative. If the compare operator returns','line_number':31,'multiline':False]['text':' true, it means that all the elements satisfy the logical expression. But','line_number':32,'multiline':False]['text':' the false does not mean the opposite comparison is satisfied. It could be','line_number':33,'multiline':False]['text':' but not always.','line_number':34,'multiline':False]['text':' The type of overlap found. Each condition is true only if none of the','line_number':54,'multiline':False]['text':' previous conditions hold.','line_number':55,'multiline':False]['text':'     ContainedOrEqual: All elements in the Bound A are in the Bound B (this','line_number':56,'multiline':False]['text':'                       includes the case where the bounds are equal).','line_number':57,'multiline':False]['text':'     Contains: All elements in the Bound B are in the Bound B.','line_number':58,'multiline':False]['text':'     PartialOverlap: Any elements in the Bound B are in the Bound A.','line_number':59,'multiline':False]['text':'     NoOverlap: No elements in the Bound A are in the bound B.','line_number':60,'multiline':False]['text':' The Bound comparison result.','line_number':68,'multiline':False]['text':'     True: Every Bound element always satisfies the given comparison operator','line_number':69,'multiline':False]['text':'     False: Every Bound element always does NOT satisfy the given comparison','line_number':70,'multiline':False]['text':'     operator','line_number':71,'multiline':False]['text':'     NotDetermined: Some elements satisfy the given comparison operator and','line_number':72,'multiline':False]['text':'     some elements not','line_number':73,'multiline':False]['text':' Returns the kind of overlap between Bound A and Bound A in a single','line_number':76,'multiline':False]['text':' dimension.','line_number':77,'multiline':False]['text':' The comparison is conservative and the compare result is deterministic.','line_number':80,'multiline':False]['text':' It means that every element of the Bound to be compared needs to satisfy','line_number':81,'multiline':False]['text':' the given comparison operator.','line_number':82,'multiline':False]['text':' A multi dimensional bound representing the bound of a set of indices.','line_number':88,'multiline':False]['text':' Returns true if two IndexBounds are equivalent.','line_number':91,'multiline':False]['text':' Flattens a multi dimensional bound to a single dimension. The IndexBounds "a"','line_number':94,'multiline':False]['text':' *must* encapsulate the entire range of the buffer.','line_number':95,'multiline':False]['text':' Determines the kind of overlap in X dimensions.','line_number':98,'multiline':False]['text':' Returns the Bound slices created by subtracing bound B from bound A.','line_number':101,'multiline':False]['text':' Multiple Bounds can be returned in the case where B slices A into two','line_number':102,'multiline':False]['text':' distinct regions with no overlap.','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':' For example:','line_number':105,'multiline':False]['text':'    subtractBound((0, 10), (2, 4)) => [(0, 1), (5, 10)]','line_number':106,'multiline':False]['text':'       bound A: (0, 10)','line_number':107,'multiline':False]['text':'       bound B: (2, 4)','line_number':108,'multiline':False]['text':'       If we remove slice (2, 4) from the slice (0, 10), we will be left','line_number':109,'multiline':False]['text':'       with 2 slices, one at the start (0, 1), and one at the end (5, 10).','line_number':110,'multiline':False]['text':'       So, the result of this subtraction is [(0, 1), (5, 10)].','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' Note: this doesn't use IndexBounds because the Bounds returned do not','line_number':113,'multiline':False]['text':' represent multiple different dimensions.','line_number':114,'multiline':False]['text':' Returns the bound slices created by subtracting the IndexBounds B from A.','line_number':117,'multiline':False]['text':' namespace analysis','line_number':125,'multiline':False]['text':' namespace tensorexpr','line_number':126,'multiline':False]['text':' namespace jit','line_number':127,'multiline':False]['text':' namespace torch','line_number':128,'multiline':False]