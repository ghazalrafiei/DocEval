['text':'*
 * Alias analysis pass.
 *
 * This pass produces an AliasDb that contains aliasing and mutation
 * information about the graph. Users can use this information to determine
 * whether mutations to the graph are safe, i.e. they don't reorder/change
 * nodes in a way that affects output.
 *
 * Every value with a mutable type (Tensors, Lists, Tuples, etc.) will be
 * associated with one or more "alias sets". If two values share an alias set,
 * that means they may alias, implying that a mutation to one value cannot be
 * reordered past a use of the other. Only reordering two reads of an alias set
 * is considered safe.
 *
 * There is a special alias set called the "wildcard set", which indicates that
 * we're not sure what this value may alias. To be conservative, we consider the
 * wildcard alias set as potentially aliasing any other wildcard value within
 * the same type class. Whenever a value becomes contained by another value,
 * such as when a Tensor is appended to a List[Tensor], the contained element
 * becomes part of the wildcard set.
 *
 * Values that contain other mutable types, such as List[Tensor], are
 * initialized as containing the Wildcard set for all contained mutable types.
 *
 * The AliasDb API references the idea of "mutable" vs "immutable"
 * types. "Mutable" means that the object's value can change, while
 * "immutable" means that the value is fixed. (For example, `List` is
 * mutable, so you can add and delete elements from it. On the other
 * hand, you can't modify a Tuple once you create it, making `Tuple` an
 * immutable container.)
 *
 * `isFrozen` - if the Module is frozen then consider attributes as freshly
 * created objects. Freezing API invokes alias analysis to check if they are
 * mutated internally.
 *
 * `descendFunctionCalls` - recursively analyze function and method calls
 * instead of conservative analysis. Generally analysis should be done after
 * inlining so the implmentation for recursive analysis is unoptimized.
 ','line_number':13,'multiline':True]['text':' There are limitations to what effects the alias analysis can track. Two','line_number':60,'multiline':False]['text':' kinds of nodes may have untracked effects:','line_number':61,'multiline':False]['text':' 1. Nodes that write to a value that may alias the graph inputs (since','line_number':62,'multiline':False]['text':'    the inputs can be used outside the graph).','line_number':63,'multiline':False]['text':' 2. Nodes that write to something in the wildcard set.','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' These nodes are considered not safe to eliminate or mutate under any','line_number':66,'multiline':False]['text':' circumstances.','line_number':67,'multiline':False]['text':' Does `n` write to an alias of one of the values in `vs`?','line_number':70,'multiline':False]['text':' if `recurseBlocks` is true, consider writes on the nodes in `n`s sub-blocks','line_number':71,'multiline':False]['text':' Does `a` and `b` potentially share a memory location or do either','line_number':74,'multiline':False]['text':' hold in memory any element that exists in the other','line_number':75,'multiline':False]['text':' Do any values in group `a` share a memory location or hold in memory','line_number':80,'multiline':False]['text':' any element that exists in group `b`','line_number':81,'multiline':False]['text':' Do `a` and `b` potentially share a memory location?','line_number':86,'multiline':False]['text':' Do any values in group `a` potentially share a memory location with any','line_number':88,'multiline':False]['text':' value in group `b`? i.e. may they overlap?','line_number':89,'multiline':False]['text':' Do any nodes write to an alias set input to `n`?','line_number':92,'multiline':False]['text':' Do any nodes write to an alias set output by `n`?','line_number':95,'multiline':False]['text':' Do any nodes write to an alias set inputed/outputed by `n`?','line_number':98,'multiline':False]['text':' Do any nodes write to `v`s memory location?','line_number':101,'multiline':False]['text':' Is the operation in-place? i.e. doesn't write anywhere but locations it','line_number':104,'multiline':False]['text':' reads from.','line_number':105,'multiline':False]['text':' Is it safe to change whether `a` and `b` alias each other ?','line_number':110,'multiline':False]['text':' Move `n` (already in the graph) after `movePoint` in the topological order.','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' Tries to preserve value dependencies, so other nodes might be moved. We','line_number':117,'multiline':False]['text':' make two guarantees about the postcondition of the node list:','line_number':118,'multiline':False]['text':'   - `n` is directly after `movePoint`.','line_number':119,'multiline':False]['text':'   - only nodes between `n` and `movePoint` have been moved.','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':' Returns `false` if it's impossible to move `n` after `MovePoint` without','line_number':122,'multiline':False]['text':' violating dependencies, otherwise executes the move and returns `true`','line_number':123,'multiline':False]['text':' For debugging: print alias db state to stdout','line_number':130,'multiline':False]['text':' Generates a DOT (www.graphviz.org) graph representation','line_number':134,'multiline':False]['text':'','line_number':135,'multiline':False]['text':' Returns `true` if the output file was successfully generated','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' WARNING: The output dot file path can't include shell specific notations,','line_number':138,'multiline':False]['text':'  for example you can't use "~/temp/aliasdb.dot"','line_number':139,'multiline':False]['text':'  (instead, use "/home/user/temp/aliasdb.dot")','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' Returns `true` if the given element is mutable or if it is a','line_number':145,'multiline':False]['text':' container type with an internal mutable element (e.g.','line_number':146,'multiline':False]['text':' `Tuple[int, Tensor]` has an internal mutable type `Tensor`, so','line_number':147,'multiline':False]['text':' it would be considered a "mutable type" in AliasDb)','line_number':148,'multiline':False]['text':'*
   * Mutation API
   *
   * These methods allow you to update AliasDb in-place if you are performing
   * graph mutation.
   *
   * WARNING: These methods should be considered INTERNAL. They do not perform
   * very many correctness checks, the user is responsible for making sure they
   * are updating AliasDb correctly. `Lint()`ing the AliasDb can help with
   * this.
   ','line_number':152,'multiline':True]['text':' Copy `existing`s aliasing info to `new_value`, and remove `existing`.','line_number':163,'multiline':False]['text':' Copy `from`s aliasing info to `to`.','line_number':165,'multiline':False]['text':' Create a new `value` that does not alias anything else.','line_number':167,'multiline':False]['text':' Enable more precise treatment of prim::TupleConstruct.','line_number':170,'multiline':False]['text':' Helper for topologically-safe node moves.','line_number':176,'multiline':False]['text':'*
   * Write and read internal API
   ','line_number':186,'multiline':True]['text':' Get all the values that `n` writes to.','line_number':189,'multiline':False]['text':' NOTE: this only returns values directly written to, not aliases thereof','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':' if `recurseBlocks` is true, gather writes on the nodes in `n`s sub-blocks','line_number':192,'multiline':False]['text':' Register the fact that `n` writes to `v`.','line_number':195,'multiline':False]['text':' Get all the values that `n` reads from.','line_number':197,'multiline':False]['text':' if `recurseBlocks` is true, gather reads on the nodes in `n`s sub-blocks','line_number':198,'multiline':False]['text':'*
   * Wildcard methods
   ','line_number':202,'multiline':True]['text':' Register `v` as a wildcard value.','line_number':205,'multiline':False]['text':' Is this a value which will not alias?','line_number':208,'multiline':False]['text':'*
   * Special analysis methods
   ','line_number':211,'multiline':True]['text':'*
   * Alias manipulation methods
   ','line_number':239,'multiline':True]['text':' If the Module is frozen then consider attributes as freshly created','line_number':259,'multiline':False]['text':' objects. Freezing API invokes alias analysis to check if they are mutated','line_number':260,'multiline':False]['text':' internally.','line_number':261,'multiline':False]['text':' The points-to graph that stores aliasing relationships','line_number':268,'multiline':False]['text':' Mapping of values to MemoryDAG elements','line_number':272,'multiline':False]['text':' All wildcard Elements (one for each unique mutable type)','line_number':274,'multiline':False]['text':' Cached mapping of type ptrs to their mutable types','line_number':290,'multiline':False]['text':'*
   * State for tracking write info.
   ','line_number':293,'multiline':True]['text':' Write registry where the analysis can record the writes as it sees them.','line_number':296,'multiline':False]['text':' This information is later denormalized into various caches to improve query','line_number':297,'multiline':False]['text':' efficiency.','line_number':298,'multiline':False]['text':' Map of nodes to the memory locations that they write to','line_number':302,'multiline':False]['text':' Collection of all memory locations that are written to.','line_number':305,'multiline':False]['text':' Helper check that invariants over AliasDb are maintained.','line_number':316,'multiline':False]['text':' Useful if you are using the AliasDb mutation API and want to check you did','line_number':317,'multiline':False]['text':' the right thing.','line_number':318,'multiline':False]['text':' namespace jit','line_number':321,'multiline':False]['text':' namespace torch','line_number':322,'multiline':False]