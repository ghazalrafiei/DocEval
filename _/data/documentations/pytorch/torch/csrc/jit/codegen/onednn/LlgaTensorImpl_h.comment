['text':' Engine represents a device and its context. From the device kind, the engine','line_number':14,'multiline':False]['text':' knows how to generate code for the target device and what kind of device','line_number':15,'multiline':False]['text':' object to be expected. The device id ensures that there is a unique engine','line_number':16,'multiline':False]['text':' being created for each device. The device handle passed from PyTorch allows','line_number':17,'multiline':False]['text':' oneDNN Graph implementation to work on the device specified by PyTorch, which','line_number':18,'multiline':False]['text':' is currently CPU, so we only have one engine.','line_number':19,'multiline':False]['text':' Ref: https://spec.oneapi.io/onednn-graph/latest/programming_model.html#engine','line_number':20,'multiline':False]['text':' CPU engine singleton','line_number':22,'multiline':False]['text':' Stream is the logical abstraction for execution units. It is created on top','line_number':28,'multiline':False]['text':' of oneDNN Graph engine. A compiled oneDNN Graph partition is submitted to a','line_number':29,'multiline':False]['text':' stream for execution.','line_number':30,'multiline':False]['text':' CPU stream singleton','line_number':32,'multiline':False]['text':' If this is an output tensor, and querying the compiled partition would','line_number':237,'multiline':False]['text':' determine that this tensor would reuse its input tensor, then','line_number':238,'multiline':False]['text':' compute_inplace would be true, and input_tensor_index would be the index of','line_number':239,'multiline':False]['text':' the corresponding input tensor in inputSpecs_ of the LlgaKernel object.','line_number':240,'multiline':False]['text':' Initially, oneDNN Graph also used to have blocked layout for tensors between','line_number':245,'multiline':False]['text':' partitions, and the LlgaTensorImpl wrapper helped us bypass guard checks.','line_number':246,'multiline':False]['text':' oneDNN Graph has switched over to using strided tensors between partitions,','line_number':247,'multiline':False]['text':' but this wrapper still helps us bypass guard checks because the strides of','line_number':248,'multiline':False]['text':' tensors between partitions would be different from the ones the guard is','line_number':249,'multiline':False]['text':' otherwise expecting.','line_number':250,'multiline':False]['text':' namespace onednn','line_number':273,'multiline':False]['text':' namespace fuser','line_number':274,'multiline':False]['text':' namespace jit','line_number':275,'multiline':False]['text':' namespace torch','line_number':276,'multiline':False]