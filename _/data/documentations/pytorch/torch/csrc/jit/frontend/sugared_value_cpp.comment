['text':' older versions of gcc/clang have a bug where enums can't be used as keys','line_number':59,'multiline':False]['text':' in a map by default','line_number':60,'multiline':False]['text':' https://stackoverflow.com/questions/18837857/cant-use-enum-class-as-unordered-map-key','line_number':61,'multiline':False]['text':' support syntax sugar for x.foo(y, z) by allowing x.foo to return a','line_number':83,'multiline':False]['text':' callable value that will resolve to foo(x, y, z) when called.','line_number':84,'multiline':False]['text':' Allow method-style casts on Tensor types. e.g. x.int()','line_number':89,'multiline':False]['text':' accessing properties of Tensor and Device that are implemented as','line_number':97,'multiline':False]['text':' prim:: or aten:: operators','line_number':98,'multiline':False]['text':' A builtin was found, add it to the graph','line_number':151,'multiline':False]['text':' accessing fields of named tuples','line_number':159,'multiline':False]['text':' This is a class, emit the proper attribute lookup','line_number':182,'multiline':False]['text':' Check and see if it's a getter attribute.','line_number':191,'multiline':False]['text':'n_binders=','line_number':195,'multiline':True]['text':' accessing methods of interfaces','line_number':198,'multiline':False]['text':' Handle access to Enum's `name` and `value` attribute.','line_number':203,'multiline':False]['text':' none of the more-specific cases worked, so see if this is a builtin method','line_number':217,'multiline':False]['text':' If field is a type, then call the aten::to op','line_number':218,'multiline':False]['text':' Handle calling tolist() on a Tensor.','line_number':231,'multiline':False]['text':' Handle calling __getitem__() directly on a Tensor, it needs special','line_number':236,'multiline':False]['text':' handling because desired method name (`__getitem__`) doesn't match `aten`','line_number':237,'multiline':False]['text':' operator name of `aten::index`.','line_number':238,'multiline':False]['text':' Handle access to Generator's `manual_seed`, `initial_seed` and `seed`','line_number':245,'multiline':False]['text':' attributes.','line_number':246,'multiline':False]['text':' Recursively check contained types. We need to do this because a user may do','line_number':305,'multiline':False]['text':' A -> B -> A.','line_number':306,'multiline':False]['text':' If we are still compiling the __init__ method for this class, then','line_number':327,'multiline':False]['text':' setting an unknown attribute adds it to the class's definition.','line_number':328,'multiline':False]['text':' We are initializing if:','line_number':330,'multiline':False]['text':' 1. The method we're currently inserting into is an init method','line_number':332,'multiline':False]['text':' TODO this can be a qualified name check','line_number':333,'multiline':False]['text':' 2. The `self` arg matches this value's type (i.e. we are in the init','line_number':335,'multiline':False]['text':' method for this class, not some other class)','line_number':336,'multiline':False]['text':' Check and see if it's a setter attribute.','line_number':361,'multiline':False]['text':'n_binders=','line_number':365,'multiline':True]['text':' Check type correctness','line_number':381,'multiline':False]['text':' allow our 'fake' closures to be called, used for fork serialization','line_number':399,'multiline':False]['text':' at the moment, but can be expanded later','line_number':400,'multiline':False]['text':' fork nodes are emitted in their own block but we do not simplify','line_number':409,'multiline':False]['text':' tuple construction across blocks. To ensure we clean up the tuple','line_number':410,'multiline':False]['text':' construct create another copy of the tuple construct in the fork block','line_number':411,'multiline':False]['text':' TODO this needs to go in `m`s compilation unit','line_number':416,'multiline':False]['text':' List, Tuple, Tensor, fill in missing information desugaring','line_number':434,'multiline':False]['text':' if it's a List/String/Dict, emit a regular __getitem__ op','line_number':456,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':457,'multiline':False]['text':' Check if this is an indexing operation enabled by a type hint.','line_number':468,'multiline':False]['text':' The ModuleDict has already been checked during IR generation to make','line_number':469,'multiline':False]['text':' sure its contents implement the module interface referred to by','line_number':470,'multiline':False]['text':' type_hint.','line_number':471,'multiline':False]['text':' Defer to the __getitem__ attr on the class.','line_number':478,'multiline':False]['text':' built-in iterable types','line_number':489,'multiline':False]['text':' dicts iterate over keys','line_number':494,'multiline':False]['text':' range() call only contains end, easier to calculate len() and getitem()','line_number':533,'multiline':False]['text':' merge child iters with the base_iters','line_number':588,'multiline':False]['text':' IterableTree leaves, either SimpleValue or RangeValue','line_number':595,'multiline':False]['text':' if it's a iterable tree, we get the base iterables that consists of','line_number':603,'multiline':False]['text':' SimpleValue or RangeValue, and then calculate the minimum length of all the','line_number':604,'multiline':False]['text':' base iterables to be max_trip_count_val','line_number':605,'multiline':False]['text':' iterables run for the minimum length of all its leaves','line_number':646,'multiline':False]['text':' note: names for args will be 'argument 0', 'argument 1', etc..','line_number':676,'multiline':False]['text':' Generate a new object of the right type, then call `__init__` on it','line_number':682,'multiline':False]['text':' Call the init function','line_number':691,'multiline':False]['text':' Allow import_source.cpp to resolve calls to a submodule's','line_number':701,'multiline':False]['text':' hooks. Edge case because normally you wouldn't allow a module to','line_number':702,'multiline':False]['text':' call functions of a submodule','line_number':703,'multiline':False]['text':' namespace torch::jit','line_number':798,'multiline':False]