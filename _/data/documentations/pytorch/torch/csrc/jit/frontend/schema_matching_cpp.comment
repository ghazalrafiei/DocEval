['text':' Look for int[N] or float[N]','line_number':32,'multiline':False]['text':'/ Returns true if `type` is a Tuple in which all the elements have the','line_number':41,'multiline':False]['text':'/ same type or if it's a subtype of `list_type_`.','line_number':42,'multiline':False]['text':' TODO: resolve VarType if necessary','line_number':56,'multiline':False]['text':' Applies implicit conversion from value trying to turn it into type','line_number':63,'multiline':False]['text':' concrete_type. It succeeds if `return_value->isSubtypeOf(concrete_type)`','line_number':64,'multiline':False]['text':' treat conversion to Optional[T] as conversions to T','line_number':71,'multiline':False]['text':' allow temporary, unannotated list literals `[]` to match to arbitrary list','line_number':80,'multiline':False]['text':' types','line_number':81,'multiline':False]['text':' Allow homogeneous tuples to be casted implicitly to lists of appropriate','line_number':91,'multiline':False]['text':' types','line_number':92,'multiline':False]['text':' inductively apply implicit conversions to tuples','line_number':100,'multiline':False]['text':' implicit conversions','line_number':119,'multiline':False]['text':' Convert tensor or number to concrete int/float types','line_number':121,'multiline':False]['text':' Convert strings to device','line_number':148,'multiline':False]['text':' Checks if `named_value` can be used as a value for `arg`. If `arg` is a','line_number':158,'multiline':False]['text':' VarType, it will be added to the type_env through `matchTypeVariables` as','line_number':159,'multiline':False]['text':' the corresponding actual type. If `allow_conversions` is true, implicit','line_number':160,'multiline':False]['text':' conversions to the `arg` type may be performed through `tryConvertToType`.','line_number':161,'multiline':False]['text':' Some functions that take lists of integers or floats for fixed size arrays','line_number':173,'multiline':False]['text':' also allow single ints/floats to be passed in their place. The single','line_number':174,'multiline':False]['text':' int/float is then repeated to the length of the list','line_number':175,'multiline':False]['text':' Resolve VarType variables','line_number':182,'multiline':False]['text':' Check if the value can be matched to the arg through any implicit','line_number':203,'multiline':False]['text':' conversions','line_number':204,'multiline':False]['text':'why_not=','line_number':208,'multiline':True]['text':' TS doesn't understand that the self argument in function','line_number':247,'multiline':False]['text':' scheams is renamed to input for the functional variant','line_number':248,'multiline':False]['text':'/ Creates a list with the provided values if each value's type can be matched','line_number':259,'multiline':False]['text':'/ to an argument with type `elem_type`. If a type in `varargs` does not match','line_number':260,'multiline':False]['text':'/ `elem_type`, nullptr is returned. This is used for creating lists from','line_number':261,'multiline':False]['text':'/ varargs so that calls like torch.zeros(1, 2, 3) will be matched to','line_number':262,'multiline':False]['text':'/ aten::zeros(int[]).','line_number':263,'multiline':False]['text':' Try to convert named_value to elem_type','line_number':276,'multiline':False]['text':'arg=','line_number':278,'multiline':True]['text':'allow_conversions=','line_number':284,'multiline':True]['text':' Check if it is possible to convert all the remaining non-kwarg arguments','line_number':295,'multiline':False]['text':' to a list. This allows zeros(IntArrayRef sizes) to work with zeros(1, 2) or','line_number':296,'multiline':False]['text':' zeros(1)','line_number':297,'multiline':False]['text':' The arg must be the last one in the arg list that is not a kwarg','line_number':302,'multiline':False]['text':' The formal must be a list','line_number':311,'multiline':False]['text':' matching varargs of typevar list nyi','line_number':314,'multiline':False]['text':' it must not be a broadcasting list like int[3],','line_number':318,'multiline':False]['text':' otherwise a single int is a valid input','line_number':319,'multiline':False]['text':' Note (@zasdfgbnm):','line_number':327,'multiline':False]['text':' This is a workaround for https://github.com/pytorch/pytorch/issues/47964','line_number':328,'multiline':False]['text':' Currently JIT does not distinguish ScalarType vs int, so there is really','line_number':329,'multiline':False]['text':' no way to distinguish x.view(1) vs x.view(torch.int8). So we have to','line_number':330,'multiline':False]['text':' hardcode the aten::view.dtype here to block this overload. This blocklist','line_number':331,'multiline':False]['text':' should be removed when JIT fully suports ScalarType as its own type.','line_number':332,'multiline':False]['text':' Note (@tugsbayasgalan)','line_number':336,'multiline':False]['text':' TorchScript doesn't suport kwargs so this op collides with aten.max.others','line_number':337,'multiline':False]['text':' since both of them have 2 Tensor inputs. Since we don't expect users to','line_number':338,'multiline':False]['text':' use this op in TS, we just skip it','line_number':339,'multiline':False]['text':' For VarTypes, maps VarType name to actual type as it's used with these','line_number':367,'multiline':False]['text':' args','line_number':368,'multiline':False]['text':' if we finish the loop will we have consumed all arguments?','line_number':380,'multiline':False]['text':' Try to convert all the remaining non-kwarg arguments (used_args) to a','line_number':389,'multiline':False]['text':' list. Allow zeros(IntArrayRef sizes) to work with zeros(1, 2) or','line_number':390,'multiline':False]['text':' zeros(1)','line_number':391,'multiline':False]['text':' The actual cannot already be a list','line_number':395,'multiline':False]['text':' Set actual_named_value to the argument and mark the arg position as','line_number':420,'multiline':False]['text':' used','line_number':421,'multiline':False]['text':' Argument has a default value and no value was provided, so use the','line_number':437,'multiline':False]['text':' default','line_number':438,'multiline':False]['text':' Make sure the actual_named_value found matches the type of arg','line_number':448,'multiline':False]['text':' check for unused self argument','line_number':463,'multiline':False]['text':' check for unused positional arguments','line_number':477,'multiline':False]['text':' check for unused kwargs','line_number':485,'multiline':False]['text':' Codegen does not support return of namedtuples with undefined field names.','line_number':507,'multiline':False]['text':' Therefore, either all or none returns has field names.','line_number':508,'multiline':False]['text':' construct the full name of the schema for easier look up','line_number':519,'multiline':False]['text':'allow_conversions=','line_number':545,'multiline':True]['text':' if there is only one schema, we do not need to try without conversions','line_number':574,'multiline':False]['text':' first. this is faster and puts less dead code in the graph.','line_number':575,'multiline':False]['text':' clear previous error messages','line_number':582,'multiline':False]['text':' we optimistically assume this call will not error, and avoid formatting the','line_number':599,'multiline':False]['text':' error strings. If we discover it did error, then we replay it, recording','line_number':600,'multiline':False]['text':' the errors.','line_number':601,'multiline':False]['text':'render_errors=','line_number':604,'multiline':True]['text':' pack outputs of a function following python rules. If there is a single value','line_number':614,'multiline':False]['text':' return a SimpleValue, otherwise pack all the values into a Tuple.','line_number':615,'multiline':False]['text':' Given a successful match between operator schema and symbol, emit a node','line_number':633,'multiline':False]['text':' with the appropriate inputs and outputs.','line_number':634,'multiline':False]['text':' assert that we did indeed create an op that has implementation','line_number':648,'multiline':False]['text':' otherwise schema and dispatch are not in sync ONLY if the op is up','line_number':649,'multiline':False]['text':' to date with the server version','line_number':650,'multiline':False]['text':' Search for operators matching the provided symbol name and input types.','line_number':668,'multiline':False]['text':' If one is found, emit a node to the graph for that operator.','line_number':669,'multiline':False]['text':' first let's set the graph's version','line_number':680,'multiline':False]['text':' we append them later to schemas because','line_number':685,'multiline':False]['text':' parseSchema returns rvalue which can not','line_number':686,'multiline':False]['text':' be casted to const pointer.','line_number':687,'multiline':False]['text':' we might have seen old historic','line_number':715,'multiline':False]['text':' ops that are deprecated','line_number':716,'multiline':False]['text':' TODO (tugsuu): make sure this is optimized later','line_number':727,'multiline':False]['text':' no operators found with the same name, print out similarly named operators','line_number':737,'multiline':False]['text':' we inline builtin calls because they are normally very small','line_number':763,'multiline':False]['text':' wrappers and are not useful for keeping around to debug','line_number':764,'multiline':False]['text':' namespace torch::jit','line_number':771,'multiline':False]