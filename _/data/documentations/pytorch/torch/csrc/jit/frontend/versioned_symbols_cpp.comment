['text':' Note [Versioned Symbols]','line_number':9,'multiline':False]['text':' When the schema or behavior of a symbol changes, serialized Torchscript','line_number':10,'multiline':False]['text':' programs using that symbol are likely to break. To prevent those breaks,','line_number':11,'multiline':False]['text':' the symbol's historic behavior can be implemented as a Torchscript builtin','line_number':12,'multiline':False]['text':' and when an older Torchscript program is loaded the program's uses of the','line_number':13,'multiline':False]['text':' symbol can be replaced with the builtin.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' For example, a function _test_serialization_subcmul(a, b, alpha) might have','line_number':16,'multiline':False]['text':' been improperly implemented as (b - alpha * a).','line_number':17,'multiline':False]['text':' Some users may have written and serialized programs using that function,','line_number':18,'multiline':False]['text':' however, and fixing it to perform (a - alpha * b) would break their programs.','line_number':19,'multiline':False]['text':' Using the "Versioned Symbol" pattern lets you replace','line_number':20,'multiline':False]['text':' _test_serialization_subcmul in older programs with a builtin','line_number':21,'multiline':False]['text':' _test_serialization_subcmul<version_range> that implements the historic','line_number':22,'multiline':False]['text':' behavior. That way old programs preserve their semantics while new programs','line_number':23,'multiline':False]['text':' can take advantage of the fix.','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' To do this:','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' 1) Identify the file version range where the symbol should be replaced,','line_number':28,'multiline':False]['text':'    e.g. versions 0 to 2, inclusive.','line_number':29,'multiline':False]['text':' 2) Create one or more builtins implementing the symbol's historic behavior.','line_number':30,'multiline':False]['text':'    These should be named <function>_<start_version>_<end_version> and','line_number':31,'multiline':False]['text':'    go into the "upgraders" namespace.','line_number':32,'multiline':False]['text':'    For example, the test-only aten::_test_serialization_subcmul has a builtin','line_number':33,'multiline':False]['text':'    for its "historic" behavior called','line_number':34,'multiline':False]['text':'    upgraders::_test_serialization_subcmul_0_2.','line_number':35,'multiline':False]['text':' 3) Add a mapping from the symbol to the corresponding SymbolRange','line_number':36,'multiline':False]['text':'    in the symbol_range_map (below).','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' To test your versioning:','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' 1) Serialize a module demonstrating the historic behavior.','line_number':41,'multiline':False]['text':' 2) Save it to test/jit/fixtures.','line_number':42,'multiline':False]['text':' 3) Implement your new behavior and bump the version counter.','line_number':43,'multiline':False]['text':' 4) Write the builtins and extend the symbol_range_map per the above','line_number':44,'multiline':False]['text':'    instructions.','line_number':45,'multiline':False]['text':' 5) Create a test in jit/test_save_load.py that loads the old module','line_number':46,'multiline':False]['text':'    and verifies it exhibits the historic behavior, then saves and','line_number':47,'multiline':False]['text':'    loads the same module and verifies it exhibits the current behavior.','line_number':48,'multiline':False]['text':'    See test_versioned_symbols for an example.','line_number':49,'multiline':False]['text':' Helper to hold the version range (inclusive on both ends) and the symbol','line_number':51,'multiline':False]['text':' to map to for that range.','line_number':52,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-magic-numbers)','line_number':82,'multiline':False]['text':' namespace torch::jit','line_number':108,'multiline':False]