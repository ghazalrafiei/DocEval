['text':' WILL states that a node/block must hit the exit, MIGHT that it may happen,','line_number':11,'multiline':False]['text':' WONT that it will not happen. THROWS states that a node/block always throws,','line_number':12,'multiline':False]['text':' and allows us to create better graphs by not conditionalizing execution','line_number':13,'multiline':False]['text':' when it is not necessary. It is an optimization; replacing it with WONT','line_number':14,'multiline':False]['text':' would preserve graph semantics.','line_number':15,'multiline':False]['text':' hasExited() indicates whether or not an exit has been hit.','line_number':21,'multiline':False]['text':' The ExitTransform pass maintains a false boolean false_val_ && a true boolean','line_number':22,'multiline':False]['text':' true_val_, and an uninitialized boolean throws_val_.','line_number':23,'multiline':False]['text':' if hasExited() == true_val_ then we have exited, if hasExited() == false_val_','line_number':24,'multiline':False]['text':' we have not, hasExited() == throws_val_ we have hit a block that throws.','line_number':25,'multiline':False]['text':' Otherwise, we might have exited.','line_number':26,'multiline':False]['text':' exitValues() are the values that we are propagating to a destination block.','line_number':27,'multiline':False]['text':' this is used for block outputs of loops and outputs of functions & closures','line_number':28,'multiline':False]['text':'*
 * This pass currently transforms the Graph so that all exit nodes targeting
 * a block location are removed from the graph and unified.
 * The exit node for breaks/continues is LoopContinuation, and the exit for
 * Graphs & Closures is ReturnStmt.
 *
 * Once we hit an Exit Node, we do not execute any further instructions
 * until the exit target has been reached.
 *
 * For blocks and control flow nodes that have an exit statement that may
 * have been hit, we conditionalize all execution on a boolean value that
 * indicates whether we have hit the exit, hasExited().
 *
 * The pass keeps tracks of blocks that always throw, so that we can construct
 * simpler graphs. For example, if in one block of an if statement we return
 * and in the other we throw, we can treat the node as always returning instead
 * of conditionalizing execution in the remainder of the block.
 ','line_number':51,'multiline':True]['text':' this value will never be used, since we will always throw before it is','line_number':74,'multiline':False]['text':' accessed','line_number':75,'multiline':False]['text':'default_to_union=','line_number':153,'multiline':True]['text':' creates a vector of uninitialized values of the same type as the','line_number':158,'multiline':False]['text':' values_to_match','line_number':159,'multiline':False]['text':' if we're not exiting to outside the loop we don't need to do any work.','line_number':173,'multiline':False]['text':' since we may not enter the loop return WONT for the THROWS case.','line_number':174,'multiline':False]['text':' if we are, we need to update the loop continue condition so that','line_number':181,'multiline':False]['text':' we exit the loop if we've hit an exit','line_number':182,'multiline':False]['text':' and we need to propagate hasExited() and exitValues() outside the loop','line_number':183,'multiline':False]['text':' example:','line_number':185,'multiline':False]['text':' while i < 5:','line_number':186,'multiline':False]['text':'    i += 1','line_number':187,'multiline':False]['text':'    if j == 4:','line_number':188,'multiline':False]['text':'      return 5','line_number':189,'multiline':False]['text':' -> becomes','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':' loop_continue = i < 5','line_number':192,'multiline':False]['text':' has_exited = false','line_number':193,'multiline':False]['text':' ret_val = uninitialized(int)','line_number':194,'multiline':False]['text':' while loop_continue:','line_number':195,'multiline':False]['text':'    i += 1','line_number':196,'multiline':False]['text':'    if j == 4:','line_number':197,'multiline':False]['text':'      ret_val = 5','line_number':198,'multiline':False]['text':'      has_exited = True','line_number':199,'multiline':False]['text':'    else:','line_number':200,'multiline':False]['text':'      ret_val = uninitialized(int)','line_number':201,'multiline':False]['text':'      has_exited = False','line_number':202,'multiline':False]['text':'    if has_exited:','line_number':203,'multiline':False]['text':'      loop_continue = False','line_number':204,'multiline':False]['text':'    else:','line_number':205,'multiline':False]['text':'      loop_continue = i < 5','line_number':206,'multiline':False]['text':' update loop continuation condition so that we exit if we hit an exit','line_number':208,'multiline':False]['text':' add hasExited() to loop outputs, we didn't exit if we didn't enter the','line_number':218,'multiline':False]['text':' loop','line_number':219,'multiline':False]['text':' add exit values','line_number':225,'multiline':False]['text':' if one branch throws, we can take the status of the other','line_number':241,'multiline':False]['text':' Recursively transforms the if node','line_number':259,'multiline':False]['text':' The exit values of the block that is not exiting will not get','line_number':278,'multiline':False]['text':' used, so we create uninitialized values of the same type as the other','line_number':279,'multiline':False]['text':' block.','line_number':280,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':292,'multiline':False]['text':' Need to maintain the invariant that if hasExited() == true_val_','line_number':295,'multiline':False]['text':' then we have exited.','line_number':296,'multiline':False]['text':' Recursively transforms the With node.','line_number':309,'multiline':False]['text':' Guards the remaining nodes in the block with an if node that takes','line_number':316,'multiline':False]['text':' the has exited value as its conditional','line_number':317,'multiline':False]['text':' Move all remaining nodes into the guard block','line_number':328,'multiline':False]['text':' after an exit, the only values that will get used','line_number':335,'multiline':False]['text':' are the hasExited() and exitValues(), so we match the existing','line_number':336,'multiline':False]['text':' block outputs with unitialized','line_number':337,'multiline':False]['text':' Set the new if to have the same outputs of the original block,','line_number':340,'multiline':False]['text':' then replace the original block outputs with new if's outputs','line_number':341,'multiline':False]['text':' these nodes my have uses,','line_number':360,'multiline':False]['text':' such as in the case:','line_number':361,'multiline':False]['text':' if i == 1:','line_number':362,'multiline':False]['text':'    break','line_number':363,'multiline':False]['text':'    j = j + 1','line_number':364,'multiline':False]['text':' where the j + 1 value will be a block output, but since they will','line_number':365,'multiline':False]['text':' never be used, it is safe to replace them with unitialized value','line_number':366,'multiline':False]['text':' need to destroy in reverse order so nodes have no uses when destroyed','line_number':381,'multiline':False]['text':' if we're entering a Loop block & transforming LoopContinuations, or if','line_number':391,'multiline':False]['text':' we're entering a Closure/Graph block and we're transforming ReturnStmts,','line_number':392,'multiline':False]['text':' then we update target_block_ to be the new block.','line_number':393,'multiline':False]['text':' otherwise, target_block_ remains the same.','line_number':394,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':397,'multiline':False]['text':' exits of closure declaration stay local to the closure','line_number':433,'multiline':False]['text':' if we have hit a node that might exit, we need to conditionally execute','line_number':441,'multiline':False]['text':' all subsequent nodes in the block. if we've hit a node that will exit','line_number':442,'multiline':False]['text':' we can remove all subsequent nodes.','line_number':443,'multiline':False]['text':' if we are targeting this block, update the output values to the','line_number':457,'multiline':False]['text':' exit values. since the exit does not extend outside this block,','line_number':458,'multiline':False]['text':' update returned exit to false. then, reset the target_block to whatever','line_number':459,'multiline':False]['text':' it was previously','line_number':460,'multiline':False]['text':' if we might have exited, use the new exit values if we did exit,','line_number':462,'multiline':False]['text':' otherwise use the existing block outputs.','line_number':463,'multiline':False]['text':' reset the exiting status. an exit should only reach its target block.','line_number':476,'multiline':False]['text':' e.g. a continue only affects most recent loop, return in closure','line_number':477,'multiline':False]['text':' does not affect enclosing graph.','line_number':478,'multiline':False]['text':' Exceptions do not propagate from Loops bc we might not enter the loop,','line_number':479,'multiline':False]['text':' and not from closures bc the Function node is a declaration and not','line_number':480,'multiline':False]['text':' an invocation.','line_number':481,'multiline':False]['text':' we create one uninitialized value per type, cache it here and reuse it','line_number':500,'multiline':False]['text':' can either be LoopContinuation/ReturnStmt','line_number':503,'multiline':False]['text':' when we see current_exit_kind_, this is the block that the values are','line_number':509,'multiline':False]['text':' exiting to. For example when we are transforming LoopContinuations','line_number':510,'multiline':False]['text':' for i in range(5):','line_number':511,'multiline':False]['text':'   while i < 3:','line_number':512,'multiline':False]['text':'     continue','line_number':513,'multiline':False]['text':'   break','line_number':514,'multiline':False]['text':' when we transform the for loop block, target_block_ will be set the for','line_number':515,'multiline':False]['text':' block. then, when we enter the while loop, target_block_ will be the while','line_number':516,'multiline':False]['text':' loop block. when we are done transforming the while it will be set back to','line_number':517,'multiline':False]['text':' the for block.','line_number':518,'multiline':False]['text':' the second if must depend on a value outputted in the first if for us to','line_number':531,'multiline':False]['text':' inline the second if','line_number':532,'multiline':False]['text':' both blocks must output a constant value for us to inline, and those values','line_number':537,'multiline':False]['text':' must be different. if the values are the same, then the subsequent if node','line_number':538,'multiline':False]['text':' will get constant prop'd away, and inlining it into the first node would','line_number':539,'multiline':False]['text':' double code size','line_number':540,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':554,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':556,'multiline':False]['text':' we need to replace values that were used in the second if that were','line_number':570,'multiline':False]['text':' outputs of the first if with the equivalent value in the scope of the','line_number':571,'multiline':False]['text':' block we're copying into','line_number':572,'multiline':False]['text':' clone from also copies block outputs from second_if_block onto','line_number':581,'multiline':False]['text':' first_if_block','line_number':582,'multiline':False]['text':' After an early return, we conditionalize all further execution','line_number':594,'multiline':False]['text':' This means code like the following:','line_number':595,'multiline':False]['text':' if x:','line_number':596,'multiline':False]['text':'     return 1','line_number':597,'multiline':False]['text':' return 2','line_number':598,'multiline':False]['text':' Gets generated as one if statement checking `if x`, and then a second if','line_number':599,'multiline':False]['text':' statement that conditionalizes execution. We can rewrite cases like these','line_number':600,'multiline':False]['text':' into one if statement, so that the above examples gets rewritten to look','line_number':601,'multiline':False]['text':' like: if x:','line_number':602,'multiline':False]['text':'   return 1','line_number':603,'multiline':False]['text':' else:','line_number':604,'multiline':False]['text':'   return 2','line_number':605,'multiline':False]['text':' if we fused two ifs, we need to check current node and new next node','line_number':613,'multiline':False]['text':' Adds prim::With nodes to a graph to help handle early exits between','line_number':620,'multiline':False]['text':' prim::Enter and prim::Exit nodes. More specifically, it transforms','line_number':621,'multiline':False]['text':' IR that looks like this:','line_number':622,'multiline':False]['text':'','line_number':623,'multiline':False]['text':'   %a = prim::Enter(%b)','line_number':624,'multiline':False]['text':'   <code>','line_number':625,'multiline':False]['text':'   %c = prim::Exit(%b)','line_number':626,'multiline':False]['text':'','line_number':627,'multiline':False]['text':' to this:','line_number':628,'multiline':False]['text':'','line_number':629,'multiline':False]['text':'   %a = prim::Enter(%b)','line_number':630,'multiline':False]['text':'   = prim::With()','line_number':631,'multiline':False]['text':'     block0():','line_number':632,'multiline':False]['text':'       <code>','line_number':633,'multiline':False]['text':'     -> ()','line_number':634,'multiline':False]['text':'     block1():','line_number':635,'multiline':False]['text':'       %c = prim::Exit(%b)','line_number':636,'multiline':False]['text':'     -> ()','line_number':637,'multiline':False]['text':'','line_number':638,'multiline':False]['text':' First, find all Enter-Exit pairs up front to avoid iterator invalidation','line_number':640,'multiline':False]['text':' issues later when moving nodes around. Do this by iterating through the','line_number':641,'multiline':False]['text':' nodes of the graph while keeping a stack of encountered Enter nodes. Each','line_number':642,'multiline':False]['text':' time an Exit node is seen, its corresponding Enter node must be at the','line_number':643,'multiline':False]['text':' top of the stack. Pop it and record the pair.','line_number':644,'multiline':False]['text':' enter_node_stack should not be empty.','line_number':655,'multiline':False]['text':' The input to this Exit node should be the same as that of the Enter','line_number':657,'multiline':False]['text':' node on the top of the enter_node_stack.','line_number':658,'multiline':False]['text':' Record the pair.','line_number':661,'multiline':False]['text':' The stack should be empty; an Exit should have been found for every Enter.','line_number':669,'multiline':False]['text':' Now, add a With block for each Enter-Exit pair. The innermost pairs were','line_number':672,'multiline':False]['text':' found first, so they will be converted first.','line_number':673,'multiline':False]['text':'num_outputs=','line_number':678,'multiline':True]['text':' Insert the With after the Enter.','line_number':682,'multiline':False]['text':' Move all of the nodes between the Enter and Exit into the body block.','line_number':686,'multiline':False]['text':' Move the Exit node into the exit block.','line_number':694,'multiline':False]['text':' Removes prim::With nodes from a graph. More specifically, it transforms','line_number':700,'multiline':False]['text':' IR that looks like this:','line_number':701,'multiline':False]['text':'','line_number':702,'multiline':False]['text':'   %a = prim::Enter(%b)','line_number':703,'multiline':False]['text':'   = prim::With()','line_number':704,'multiline':False]['text':'     block0():','line_number':705,'multiline':False]['text':'       <code>','line_number':706,'multiline':False]['text':'     -> ()','line_number':707,'multiline':False]['text':'     block1():','line_number':708,'multiline':False]['text':'       %c = prim::Exit(%b)','line_number':709,'multiline':False]['text':'      ->()','line_number':710,'multiline':False]['text':'','line_number':711,'multiline':False]['text':' to this:','line_number':712,'multiline':False]['text':'   %a = prim::Enter(%b)','line_number':713,'multiline':False]['text':'   <code>','line_number':714,'multiline':False]['text':'   %c = prim::Exit(%b)','line_number':715,'multiline':False]['text':'','line_number':716,'multiline':False]['text':' First, find all With blocks to avoid iterator invalidation issues when','line_number':718,'multiline':False]['text':' moving nodes around later.','line_number':719,'multiline':False]['text':' For each With node:','line_number':732,'multiline':False]['text':' Record all nodes that need to be appended after the Enter that precedes','line_number':739,'multiline':False]['text':' the With block to avoid iterator invalidation issues later when moving','line_number':740,'multiline':False]['text':' nodes around.','line_number':741,'multiline':False]['text':' Move all nodes inside the with block outside of it.','line_number':752,'multiline':False]['text':' This pass takes in a graph where LoopContinuation & ReturnStmts exist in the','line_number':761,'multiline':False]['text':' graph and erases them in the graph, correctly setting block outputs.','line_number':762,'multiline':False]['text':' prim::LoopContinuation(*vals) means that the values are targeting the most','line_number':763,'multiline':False]['text':' recent loop block. prim::ReturnStmt(*vals) means that the values are','line_number':764,'multiline':False]['text':' targeting the most recent Closure or Graph Block. Once we hit an exit node,','line_number':765,'multiline':False]['text':' we do not execute any further instructions until the block exit reaches its','line_number':766,'multiline':False]['text':' destination. If we encounter a node that contains nested blocks that may','line_number':767,'multiline':False]['text':' have hit an exit node, such as an if statement that exits in one block','line_number':768,'multiline':False]['text':' and does not exit in the other, we use a boolean value to indicate if the','line_number':769,'multiline':False]['text':' exit has been hit or not. Then, we conditionalize further execution.','line_number':770,'multiline':False]['text':'','line_number':771,'multiline':False]['text':' Python example:','line_number':772,'multiline':False]['text':' while i < 5:','line_number':773,'multiline':False]['text':'   if i == 3:','line_number':774,'multiline':False]['text':'     i += 1','line_number':775,'multiline':False]['text':'     continue','line_number':776,'multiline':False]['text':'   i += 2','line_number':777,'multiline':False]['text':'','line_number':778,'multiline':False]['text':' -> transforms to:','line_number':779,'multiline':False]['text':'','line_number':780,'multiline':False]['text':' continue_loop = i < 5','line_number':781,'multiline':False]['text':' while continue_loop:','line_number':782,'multiline':False]['text':'   if i == 3:','line_number':783,'multiline':False]['text':'     i = i + 1','line_number':784,'multiline':False]['text':'     continue_loop = i < 5','line_number':785,'multiline':False]['text':'     did_exit = True','line_number':786,'multiline':False]['text':'   if did_exit:','line_number':787,'multiline':False]['text':'     pass','line_number':788,'multiline':False]['text':'   else:','line_number':789,'multiline':False]['text':'     i = i + 2','line_number':790,'multiline':False]['text':'     continue_loop = i < 5','line_number':791,'multiline':False]['text':' IR as it enters pass:','line_number':792,'multiline':False]['text':' %36 : bool = aten::lt(%i.1, %3)','line_number':793,'multiline':False]['text':' %i : int = prim::Loop(%1, %36, %i.1)','line_number':794,'multiline':False]['text':'   block0(%5 : int, %i.17 : int):','line_number':795,'multiline':False]['text':'     %8 : bool = aten::eq(%i.17, %7)','line_number':796,'multiline':False]['text':'     %i.16 : int = prim::If(%8)','line_number':797,'multiline':False]['text':'       block0():','line_number':798,'multiline':False]['text':'         %i.6 : int = aten::add(%i.17, %11)','line_number':799,'multiline':False]['text':'         %33 : bool = aten::lt(%i.6, %3)','line_number':800,'multiline':False]['text':'          = prim::LoopContinuation(%33, %i.6)','line_number':801,'multiline':False]['text':'         -> (%i.6)','line_number':802,'multiline':False]['text':'       block1():','line_number':803,'multiline':False]['text':'         -> (%i.17)','line_number':804,'multiline':False]['text':'     %i.13 : int = aten::add(%i.16, %19)','line_number':805,'multiline':False]['text':'     %4 : bool = aten::lt(%i.13, %3)','line_number':806,'multiline':False]['text':'     -> (%4, %i.13)','line_number':807,'multiline':False]['text':' return (%i)','line_number':808,'multiline':False]['text':'','line_number':809,'multiline':False]['text':'   -> transforms to','line_number':810,'multiline':False]['text':'','line_number':811,'multiline':False]['text':' %false_val : bool = prim::Constant[value=0]()','line_number':812,'multiline':False]['text':' %true_val : bool = prim::Constant[value=1]()','line_number':813,'multiline':False]['text':' %40 : int = prim::Uninitialized()','line_number':814,'multiline':False]['text':' %39 : bool = prim::Uninitialized()','line_number':815,'multiline':False]['text':' %36 : bool = aten::lt(%i.1, %3)','line_number':816,'multiline':False]['text':' %i : int = prim::Loop(%1, %36, %i.1)','line_number':817,'multiline':False]['text':'   block0(%5 : int, %i.17 : int):','line_number':818,'multiline':False]['text':'     %8 : bool = aten::eq(%i.17, %7)','line_number':819,'multiline':False]['text':'     %did_exit : bool, %continue_loop : bool, %43 : int, %i.16 : int =','line_number':820,'multiline':False]['text':'     prim::If(%8)','line_number':821,'multiline':False]['text':'       block0():','line_number':822,'multiline':False]['text':'         %i.6 : int = aten::add(%i.17, %11)','line_number':823,'multiline':False]['text':'         %33 : bool = aten::lt(%i.6, %3)','line_number':824,'multiline':False]['text':'         -> (%true_val, %33, %i.6, %i.6)','line_number':825,'multiline':False]['text':'       block1():','line_number':826,'multiline':False]['text':'         -> (%false_val, %39, %40, %i.17)','line_number':827,'multiline':False]['text':'     %44 : bool, %i : int = prim::If(%did_exit)','line_number':828,'multiline':False]['text':'       block0():','line_number':829,'multiline':False]['text':'         -> (%continue_loop, %43)','line_number':830,'multiline':False]['text':'       block1():','line_number':831,'multiline':False]['text':'         %i.13 : int = aten::add(%i.16, %19)','line_number':832,'multiline':False]['text':'         %4 : bool = aten::lt(%i.13, %3)','line_number':833,'multiline':False]['text':'         -> (%4, %i.13)','line_number':834,'multiline':False]['text':'     -> (%44, %i)','line_number':835,'multiline':False]['text':' namespace torch::jit','line_number':847,'multiline':False]