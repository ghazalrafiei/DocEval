['text':' Make sure the function is not a class instantiation (e.g. `Exception()`)','line_number':41,'multiline':False]['text':' If there is a `self` parameter on the callable, skip it on the names list','line_number':58,'multiline':False]['text':' No type signature was provided on the callable, so make a default','line_number':63,'multiline':False]['text':' signature where each argument is typed as a Tensor','line_number':64,'multiline':False]['text':'name=','line_number':67,'multiline':True]['text':'type=','line_number':68,'multiline':True]['text':'N=','line_number':69,'multiline':True]['text':'default_value=','line_number':70,'multiline':True]['text':'kwarg_only=','line_number':71,'multiline':True]['text':' Use as many outputs as are requested to make the return type','line_number':74,'multiline':False]['text':' Use the provided type signature','line_number':84,'multiline':False]['text':' arg_types does not include self but param_names does, so adjust for that','line_number':90,'multiline':False]['text':' if needed','line_number':91,'multiline':False]['text':'name=','line_number':98,'multiline':True]['text':'type=','line_number':99,'multiline':True]['text':'N=','line_number':100,'multiline':True]['text':'default_value=','line_number':101,'multiline':True]['text':'kwarg_only=','line_number':102,'multiline':True]['text':' Use the qualified name if possible','line_number':109,'multiline':False]['text':' If if a function is marked as dropped,','line_number':135,'multiline':False]['text':' we throw an exception if it is invoked.','line_number':136,'multiline':False]['text':' Release the function object so we can wrap it in a PythonOp','line_number':150,'multiline':False]['text':' note: is_constant = true because we consider that global properties','line_number':216,'multiline':False]['text':' on modules like math.pi or torch.float to be constants','line_number':217,'multiline':False]['text':' even though it is possible, though rare, for someone to mutate them','line_number':218,'multiline':False]['text':'is_constant=','line_number':219,'multiline':True]['text':' List of all the cuda operators which are supported in JIT','line_number':226,'multiline':False]['text':' Both current_device and set_device API's are a part of c10::cuda','line_number':240,'multiline':False]['text':' namespace. Hence, to resolve the conflict for jit, we append _ to both','line_number':241,'multiline':False]['text':' these APIs.','line_number':242,'multiline':False]['text':' note: is_constant = true because we consider that global properties','line_number':258,'multiline':False]['text':' on modules like math.pi or torch.float to be constants','line_number':259,'multiline':False]['text':' even though it is possible, though rare, for someone to mutate them','line_number':260,'multiline':False]['text':'is_constant=','line_number':261,'multiline':True]['text':' Check that all submodules comply with the type hint.','line_number':310,'multiline':False]['text':' Emit a prim::ModuleContainerIndex operator. This is needed because','line_number':316,'multiline':False]['text':' it's difficult to construct a list in the graph representing the','line_number':317,'multiline':False]['text':' ModuleList and use aten::__getitem__ ops to index into it because','line_number':318,'multiline':False]['text':' any call to ModuleList.setitem would invalidate that emitted list.','line_number':319,'multiline':False]['text':' Check that all submodules comply with the type hint.','line_number':357,'multiline':False]['text':' Emit a prim::ModuleContainerIndex operator. This is needed because','line_number':363,'multiline':False]['text':' it's difficult to construct a dict in the graph representing the','line_number':364,'multiline':False]['text':' ModuleDict and use aten::__getitem__ ops to index into it because','line_number':365,'multiline':False]['text':' any call to ModuleDict.setAttr would invalidate that emitted dict.','line_number':366,'multiline':False]['text':' Recursive compilation does not maintain module aliasing,','line_number':552,'multiline':False]['text':' so we do not add uniqueness checks on','line_number':553,'multiline':False]['text':' "children"/"named_children"/"modules"/"named_modules"','line_number':554,'multiline':False]['text':' helper function for instantiating a SugaredValue from an IValue','line_number':596,'multiline':False]['text':' This method controls how we desugar attribute lookups on ScriptModules','line_number':615,'multiline':False]['text':' 1. Look inside Module object for the field.','line_number':620,'multiline':False]['text':' ...if it's a submodule, return it as a new ModuleValue.','line_number':630,'multiline':False]['text':' ...otherwise, methods, parameters, attributes, and buffers are all','line_number':641,'multiline':False]['text':' first class so they get returned as SimpleValues','line_number':642,'multiline':False]['text':' 2. Special case: for module dicts we manually desugar items(), keys(),','line_number':649,'multiline':False]['text':' values() calls into the appropriate method.','line_number':650,'multiline':False]['text':' 3. Check if this is the name of an overloaded method.','line_number':666,'multiline':False]['text':' This can also be a call to a non-script module, or a plain','line_number':668,'multiline':False]['text':' python method. If so return this as a python value.','line_number':669,'multiline':False]['text':' 4. Check if it's a function attribute.','line_number':674,'multiline':False]['text':'self=','line_number':678,'multiline':True]['text':' 5. Check if it's an attribute of the original Python class that this','line_number':681,'multiline':False]['text':' ScriptModule was derived from. The only class attributes we handle are','line_number':682,'multiline':False]['text':' methods.','line_number':683,'multiline':False]['text':' ConcreteType doesn't always have an originating Python class, e.g. if it','line_number':686,'multiline':False]['text':' was derived from a serialized ScriptModule. In this case, we've exhausted','line_number':687,'multiline':False]['text':' our options for attr lookup.','line_number':688,'multiline':False]['text':' Functions within the module annotated with @staticmethod do not need','line_number':699,'multiline':False]['text':' binding.','line_number':700,'multiline':False]['text':' For Python methods that we're trying to call directly, we need to bind','line_number':706,'multiline':False]['text':' the method to a self. (see the documentation for lazy_bind in Python for','line_number':707,'multiline':False]['text':' more info).','line_number':708,'multiline':False]['text':' Create a generated ScriptModule type with module_ set as cpp_module','line_number':713,'multiline':False]['text':' If we reach here, it's because this is a "normal" method that just hasn't','line_number':723,'multiline':False]['text':' been compiled yet (directly exported methods would have been returned by','line_number':724,'multiline':False]['text':' step 1). Just compile it.','line_number':725,'multiline':False]['text':' Look up the attribute again, it will be available as a compiled method.','line_number':730,'multiline':False]['text':' convert forward args into tuple for forward hooks','line_number':760,'multiline':False]['text':' (the input of eager hooks are always tuples)','line_number':761,'multiline':False]['text':' call pre_hooks','line_number':770,'multiline':False]['text':' de-tuple pre_hook output for forward','line_number':793,'multiline':False]['text':' only replace input if it existed','line_number':801,'multiline':False]['text':' call forward','line_number':806,'multiline':False]['text':' call hooks','line_number':811,'multiline':False]['text':' This method controls how we desugar attribute lookups on ScriptModules.','line_number':833,'multiline':False]['text':' Check if it's a property.','line_number':842,'multiline':False]['text':'n_binders=','line_number':847,'multiline':True]['text':' We don't define this attr. Bailout with a hint to the user.','line_number':850,'multiline':False]['text':' Resolve values from the Python object first (e.g. for static methods on','line_number':891,'multiline':False]['text':' this type, resolve them as functions)','line_number':892,'multiline':False]['text':' Forward to SimpleValue::setAttr','line_number':921,'multiline':False]['text':' Dispatch flag is in arg list','line_number':940,'multiline':False]['text':' Dispatch flag is in kwargs','line_number':945,'multiline':False]['text':' Didn't find dispatch flag, so use default value','line_number':950,'multiline':False]['text':'n_binders','line_number':973,'multiline':True]['text':' Note: we need to pass rcb to resolve ForwardRef annotations. See','line_number':1019,'multiline':False]['text':' [Note: ForwardRef annotations in NamedTuple attributes]','line_number':1020,'multiline':False]['text':'n_binders','line_number':1090,'multiline':True]['text':' Slice's constructor signature is Slice(start=None, stop, step=None)','line_number':1111,'multiline':False]['text':' Case where only `stop` is specified.','line_number':1113,'multiline':False]['text':' Case where `start` and `stop` are specified.','line_number':1118,'multiline':False]['text':' Case where `start`, `stop` and `step` are all specified.','line_number':1123,'multiline':False]['text':' directly create SimpleValues when possible, because they are first-class','line_number':1140,'multiline':False]['text':' and can be re-assigned. Otherwise, this would be invalid:','line_number':1141,'multiline':False]['text':' f = python_constant','line_number':1142,'multiline':False]['text':' while ...','line_number':1143,'multiline':False]['text':'   f = f + 1','line_number':1144,'multiline':False]['text':' RPC module is only avaialble when build flag "USE_DISTRIBUTED" is on.','line_number':1227,'multiline':False]['text':' RPC module is only avaialble  when build flag "USE_DISTRIBUTED" is on.','line_number':1240,'multiline':False]['text':' torch.LongTensor and other related functions create on cpu,','line_number':1262,'multiline':False]['text':' TODO: add support for torch.cuda.LongTensor for gpu','line_number':1263,'multiline':False]['text':' The use of fakeRcb here prevents us from correctly resolving ForwardRef','line_number':1301,'multiline':False]['text':' annotations on NamedTuple attributes for instances whose types are','line_number':1302,'multiline':False]['text':' inferred. See #95858 for more details, as well as','line_number':1303,'multiline':False]['text':' [Note: ForwardRef annotations in NamedTuple attributes]','line_number':1304,'multiline':False]['text':' If we can't get the source code for the type, it's implemented in C and','line_number':1332,'multiline':False]['text':' probably part of the standard library, so give up and leave it as a','line_number':1333,'multiline':False]['text':' call to Python','line_number':1334,'multiline':False]['text':' Register class','line_number':1339,'multiline':False]['text':' Return class','line_number':1345,'multiline':False]['text':' methods here have been explicitly annotated to not be compiled,','line_number':1378,'multiline':False]['text':' so they do not have the same overload and compile checks as for functions','line_number':1379,'multiline':False]['text':' namespace torch::jit','line_number':1392,'multiline':False]