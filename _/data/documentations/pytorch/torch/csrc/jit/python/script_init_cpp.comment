['text':' A resolver that will inspect the outer Python scope to find `name`.','line_number':86,'multiline':False]['text':'*
   * While compiling classes, the class type we're compiling will not be
   * available in Python, since we haven't fowner_ defining the class yet. So
   * in order to make the class type available to its own methods, we need to
   * explicitly resolve it.
   *
   * @param rcb Python function to resolve a name to its Python object in the
   *            enclosing scope
   * @param classname The unqualified classname of the class currently being
   *                  compiled.
   * @param classType The class's type.
   ','line_number':90,'multiline':True]['text':' TODO. same number of parameters not strictly necessary.','line_number':191,'multiline':False]['text':' BroadcastingList, allow default values T for arg types List[T]','line_number':213,'multiline':False]['text':' An overloaded function may have a default that does not subtype all overloads','line_number':223,'multiline':False]['text':' @overload','line_number':224,'multiline':False]['text':' def foo(x: str)','line_number':225,'multiline':False]['text':' def foo(x=1)','line_number':226,'multiline':False]['text':' namespace','line_number':245,'multiline':False]['text':' following PEP specification that the following should work:','line_number':321,'multiline':False]['text':' @overload','line_number':322,'multiline':False]['text':' def mouse_event(x1: int, y1: int) -> ClickEvent: ...','line_number':323,'multiline':False]['text':' ...','line_number':324,'multiline':False]['text':' def mouse_event(x1: int, y1: int, x2: Optional[int] = None, y2:','line_number':325,'multiline':False]['text':' Optional[int] = None)','line_number':326,'multiline':False]['text':'properties=','line_number':382,'multiline':True]['text':'propResolvers=','line_number':383,'multiline':True]['text':'properties=','line_number':410,'multiline':True]['text':'propResolvers=','line_number':411,'multiline':True]['text':'complete=','line_number':448,'multiline':True]['text':'complete=','line_number':461,'multiline':True]['text':' Make a graph with a fake self argument','line_number':469,'multiline':False]['text':' this is used in our test suite to check that we correctly preserved type tags','line_number':479,'multiline':False]['text':' uncomment to debug type matching errors','line_number':491,'multiline':False]['text':' std::cout << "MATCHING " << /*item.a <<*/ "(" << *item.a.type() << ") "','line_number':492,'multiline':False]['text':'          << item.a.internalToPointer() << " " << /*item.b <<*/ " ("','line_number':493,'multiline':False]['text':'          << *item.b.type() << ") " << item.b.internalToPointer() <<','line_number':494,'multiline':False]['text':'          "\n";','line_number':495,'multiline':False]['text':' Since named types are saved and loaded in the test suite, we cannot','line_number':504,'multiline':False]['text':' expect them to be equal. We should still check their slots however.','line_number':505,'multiline':False]['text':' check tags for objects that contain subobjects','line_number':510,'multiline':False]['text':' Dictionaory keys cannot contain List/Dicts that require tags','line_number':533,'multiline':False]['text':' so we do not have to check them.','line_number':534,'multiline':False]['text':' Furthermore without ordered dicts it is expensive to find the','line_number':535,'multiline':False]['text':' equivalent key','line_number':536,'multiline':False]['text':' helper used to implement ._parameters, ._buffers, ._modules dicts','line_number':551,'multiline':False]['text':' inside of script nn.Module','line_number':552,'multiline':False]['text':' py::dict is pointer-like type so it gets modified despite const&','line_number':689,'multiline':False]['text':' This function will copy bytes into a shared_ptr of chars aligned','line_number':711,'multiline':False]['text':' at kFlatbufferDataAlignmentBytes boundary (currently 16).','line_number':712,'multiline':False]['text':' This is required because tensors need to be aligned at 16 bytes boundary.','line_number':713,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':738,'multiline':False]['text':' wrap the Method into callable PyObject','line_number':796,'multiline':False]['text':' wrap the Method into callable PyObject','line_number':814,'multiline':False]['text':' Similar to Tensor's `__hash__`, which is `id()`.','line_number':858,'multiline':False]['text':' __getstate__','line_number':863,'multiline':False]['text':' Special case __str__ and __repr__ to make sure we can print Objects/Modules','line_number':928,'multiline':False]['text':' regardless of if the user defined __str__/__repr__','line_number':929,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':943,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':945,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':960,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':962,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':982,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':984,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':990,'multiline':False]['text':' Used by torch.package to save ScriptModule objects in unified format.','line_number':1020,'multiline':False]['text':' Used by torch.package to coordinate sharing of storages between eager','line_number':1033,'multiline':False]['text':' and ScriptModules.','line_number':1034,'multiline':False]['text':' torch.jit.ScriptModule is a subclass of this C++ object.','line_number':1042,'multiline':False]['text':' Methods here are prefixed with _ since they should not be','line_number':1043,'multiline':False]['text':' public.','line_number':1044,'multiline':False]['text':' prereq: Module's buffers and parameters are unique','line_number':1159,'multiline':False]['text':' this was ensured in python before calling this function','line_number':1160,'multiline':False]['text':' prereq: Module's buffers and parameters are unique','line_number':1200,'multiline':False]['text':' this was ensured in python before calling this function','line_number':1201,'multiline':False]['text':' Similar to Tensor's `__hash__`, which is `id()`.','line_number':1283,'multiline':False]['text':' TODO: call UDF if it exists','line_number':1289,'multiline':False]['text':' see: [pybind11 varargs]','line_number':1438,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':1443,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':1445,'multiline':False]['text':' [issue 27343]','line_number':1456,'multiline':False]['text':' Modules have 'training' attributes by default, but due to','line_number':1457,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/27343, functions end','line_number':1458,'multiline':False]['text':' up having a training attribute when they are loaded. This adds','line_number':1459,'multiline':False]['text':' a fake 'training' attribute that shouldn't be used, but prevents','line_number':1460,'multiline':False]['text':' jitter on saving and loading. Once that issue is fixed this can','line_number':1461,'multiline':False]['text':' be deleted.','line_number':1462,'multiline':False]['text':' see [issue 27343]','line_number':1475,'multiline':False]['text':' see: [pybind11 varargs]','line_number':1547,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':1553,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':1555,'multiline':False]['text':'self=','line_number':1665,'multiline':True]['text':'shouldMangle=','line_number':1671,'multiline':True]['text':'self=','line_number':1702,'multiline':True]['text':'shouldMangle=','line_number':1708,'multiline':True]['text':' is_module = ','line_number':1741,'multiline':True]['text':' doc_string = ','line_number':1742,'multiline':True]['text':' Gather definitions for property getters and setters as well as','line_number':1761,'multiline':False]['text':' corresponding resolution callbacks.','line_number':1762,'multiline':False]['text':' Stitch in default arguments for methods. Properties don't need to be','line_number':1774,'multiline':False]['text':' considered since there is no way to invoke setters without passing in','line_number':1775,'multiline':False]['text':' a value.','line_number':1776,'multiline':False]['text':' If the method is not in the defaults map, assume there are','line_number':1780,'multiline':False]['text':' no default arguments for it.','line_number':1781,'multiline':False]['text':'is_method=','line_number':1822,'multiline':True]['text':'load_debug_files','line_number':1861,'multiline':True]['text':'load_debug_files','line_number':1907,'multiline':True]['text':' TODO this should go in the global Python CU','line_number':2047,'multiline':False]['text':' convert to IValue first, IValue will incref via py::object','line_number':2055,'multiline':False]['text':' convert back to PyObject by borrowing the reference, which also','line_number':2057,'multiline':False]['text':' incref, after the return of this function, IValue is out of scope','line_number':2058,'multiline':False]['text':' which decref, so the return value is original refcount + 1','line_number':2059,'multiline':False]['text':' Stitch in default arguments for each Def if provided','line_number':2264,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':2338,'multiline':False]['text':' namespace torch::jit','line_number':2449,'multiline':False]