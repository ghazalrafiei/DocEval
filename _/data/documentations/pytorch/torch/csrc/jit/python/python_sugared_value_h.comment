['text':' NB: This should be the single entry-point for instantiating a SugaredValue','line_number':21,'multiline':False]['text':' from a Python object. If you are adding support for converting a new Python','line_number':22,'multiline':False]['text':' type, *add it in this function's implementation*.','line_number':23,'multiline':False]['text':' call it like a function, e.g. `outputs = this(inputs)`','line_number':46,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':79,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':81,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':83,'multiline':False]['text':' Used for desugaring uses of the torch.cuda module. All the CUDA APIs with','line_number':96,'multiline':False]['text':' torch.cuda.* are resolved using CUDAPythonModuleValue.','line_number':97,'multiline':False]['text':' Represents all the parameters of a module as a List[Tensor]','line_number':108,'multiline':False]['text':' defines how modules/methods behave inside the script subset.','line_number':154,'multiline':False]['text':' for now this does not have any interaction with python.','line_number':155,'multiline':False]['text':' in the future, we will add the ability to resolve `self.foo` to python','line_number':156,'multiline':False]['text':' {functions, modules, constants} so this SugaredValue is defined here','line_number':157,'multiline':False]['text':' anticipating we will eventually need to replace Module with a py::object','line_number':158,'multiline':False]['text':' holding the actual nn.Module class.','line_number':159,'multiline':False]['text':' select an attribute on it, e.g. `this.field`','line_number':174,'multiline':False]['text':' select an attribute on it, e.g. `this.field`','line_number':180,'multiline':False]['text':' select an attribute on it, e.g. `this.field`','line_number':186,'multiline':False]['text':' call module.forward with pre_hooks and hooks','line_number':192,'multiline':False]['text':' Check that the type of all submodules is a subtype of ty. If the function','line_number':231,'multiline':False]['text':' returns false, more information about why it returns false (e.g. which','line_number':232,'multiline':False]['text':' submodule's type is not a subtype of ty) is printed it why_not if it is not','line_number':233,'multiline':False]['text':' null.','line_number':234,'multiline':False]['text':' Used to support named_modules()','line_number':258,'multiline':False]['text':'mangle_name=','line_number':343,'multiline':True]['text':' Python Slice class.','line_number':360,'multiline':False]['text':' namespace torch::jit','line_number':376,'multiline':False]