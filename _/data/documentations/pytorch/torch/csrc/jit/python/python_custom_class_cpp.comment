['text':'numSlots=','line_number':14,'multiline':True]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':23,'multiline':False]['text':'/ Variant of StrongFunctionPtr, but for static methods of custom classes.','line_number':28,'multiline':False]['text':'/ They do not belong to compilation units (the custom class method registry','line_number':29,'multiline':False]['text':'/ serves that purpose in this case), so StrongFunctionPtr cannot be used here.','line_number':30,'multiline':False]['text':'/ While it is usually unsafe to carry a raw pointer like this, the custom','line_number':31,'multiline':False]['text':'/ class method registry that owns the pointer is never destroyed.','line_number':32,'multiline':False]['text':' Define __getattr__ so that static functions of custom classes can','line_number':58,'multiline':False]['text':' be used in regular Python.','line_number':59,'multiline':False]['text':' This function returns a ScriptClass that wraps the constructor','line_number':73,'multiline':False]['text':' of the given class, specified by the qualified name passed in.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' This is to emulate the behavior in python where instantiation','line_number':76,'multiline':False]['text':' of a class is a call to a code object for the class, where that','line_number':77,'multiline':False]['text':' code object in turn calls __init__. Rather than calling __init__','line_number':78,'multiline':False]['text':' directly, we need a wrapper that at least returns the instance','line_number':79,'multiline':False]['text':' rather than the None return value from __init__','line_number':80,'multiline':False]['text':' namespace torch::jit','line_number':100,'multiline':False]