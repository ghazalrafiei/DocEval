['text':' in memory description of all ATen Ops similar to Caffe2 schema','line_number':1,'multiline':False]['text':' once C10 exists this can be removed, or stubbed out, but we need','line_number':2,'multiline':False]['text':' it now to implement correct semantic checking for script','line_number':3,'multiline':False]['text':'
 * Note: JIT relies on Operator instances having static lifetime, because
 * it for example stores a non-owning FunctionSchema* pointer in the Node class,
 * which points to the function schema stored in the Operator instance.
 * Also, jit::Operator is meant to store more operator related information like
 * symbolic derivatives, which also requires them to have static lifetime
 * so that changes to symbolic derivatives are remembered.
 *
 * Currently, the JIT operator library contains a jit::Operator instance
 * with a wrapper for each c10 operator. The c10 operator library registers
 * those wrappers using listeners in register_c10_ops.cpp.
 * TODO Instead of doing it this way, we should only have pure-jit ops in
 * the jit library but have the JIT operator lookup look into the c10 library
 * too.
 ','line_number':42,'multiline':True]['text':' An Operator is a thin wrapper around either a pure JIT operator (e.g. prim','line_number':58,'multiline':False]['text':' ops) or a c10 operator, allowing some common operations and abstracting away','line_number':59,'multiline':False]['text':' the concrete operator nature.','line_number':60,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':63,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':72,'multiline':False]['text':' The only valid transition for schema_ is from right->left, i.e.','line_number':74,'multiline':False]['text':' when the schema gets parsed.','line_number':75,'multiline':False]['text':' Helper constructor to register `op` to run','line_number':118,'multiline':False]['text':' run for _every_ IR Node where n.kind() == name, regardless of arguments.','line_number':119,'multiline':False]['text':' This is accomplished by marking the schema varargs and having no required','line_number':120,'multiline':False]['text':' arguments.','line_number':121,'multiline':False]['text':' TODO: some sort of caching mechanism?','line_number':147,'multiline':False]['text':' we lazily parse schema initialized from strings so that','line_number':171,'multiline':False]['text':' we do less work during static operator registration','line_number':172,'multiline':False]['text':' TODO What if it gets set later?','line_number':179,'multiline':False]['text':' JitOnlyOperators don't have an c10::OperatorHandle or a way to','line_number':195,'multiline':False]['text':' specify tags. We're grandfathering them all into','line_number':196,'multiline':False]['text':' pt2_compliant_tag, but for anything else, please just stop','line_number':197,'multiline':False]['text':' using JitOnlyOperator.','line_number':198,'multiline':False]['text':'is_vararg','line_number':238,'multiline':True]['text':'is_varret','line_number':239,'multiline':True]['text':'is_vararg','line_number':255,'multiline':True]['text':'is_varret','line_number':256,'multiline':True]['text':' Returns operators in the order which OpOverloadPacket resolves them.','line_number':269,'multiline':False]['text':' given a operator with an overload name, find the specific operator related to','line_number':273,'multiline':False]['text':' it, may return nullptr if no operator exists.','line_number':274,'multiline':False]['text':' XXX: this function is meant to be used with string literals only!','line_number':283,'multiline':False]['text':' Ensure the thing that registers c10 ops is defined.','line_number':287,'multiline':False]['text':' Otherwise, our registry will not have c10 ops. You can run into this','line_number':288,'multiline':False]['text':' scenario if you're querying registered ops during static init.','line_number':289,'multiline':False]['text':'','line_number':290,'multiline':False]['text':' This fn is defined in register_c10_ops.cpp','line_number':291,'multiline':False]['text':' Used to assert that unschematized operators have an analysis method written','line_number':294,'multiline':False]['text':' A factory function to generate an optional operator. It has two','line_number':297,'multiline':False]['text':' instantiations depending on the template bool arg value. The arg can be a','line_number':298,'multiline':False]['text':' compile-time function for the selective op registration based on schema','line_number':299,'multiline':False]['text':' string.','line_number':300,'multiline':False]['text':' namespace torch::jit','line_number':346,'multiline':False]