['text':' Before we translate to interpreter instructions, we do','line_number':62,'multiline':False]['text':' some preprocessing of the graph to turn it into a form that is closer','line_number':63,'multiline':False]['text':' to what the instructions will look like.','line_number':64,'multiline':False]['text':' In particular we:','line_number':65,'multiline':False]['text':' *  Computes whether a input to a node is the last use, so we can issue MOVE','line_number':66,'multiline':False]['text':'    rather than LOAD instructions.','line_number':67,'multiline':False]['text':' *  Drop nodes are inserted for any node that is unused to create a dummy use','line_number':68,'multiline':False]['text':'    that will cause the interpreter to free the node.','line_number':69,'multiline':False]['text':'    A drop node just pops its input off the stack to  ensure the interpreter','line_number':70,'multiline':False]['text':'    releases references to nodes that are never used. Drop nodes are also','line_number':71,'multiline':False]['text':'    inserted when the last use of a node is in some conditionally run control','line_number':72,'multiline':False]['text':'    flow (e.g. one side of an If) and the interpreter must free the node only','line_number':73,'multiline':False]['text':'    after the control flow has reconverged','line_number':74,'multiline':False]['text':' Outputs are:','line_number':75,'multiline':False]['text':' * graph - the post processed copy of g','line_number':76,'multiline':False]['text':' * move_flags[n] - a list of booleans, one for each input,','line_number':77,'multiline':False]['text':'   indicating whether this is the last use of the value. The interpreter','line_number':78,'multiline':False]['text':'   should generate a move rather than a copy in this case.','line_number':79,'multiline':False]['text':' namespace','line_number':100,'multiline':False]['text':' InterpreterState state that and used to compute a Code','line_number':117,'multiline':False]['text':' Inserts idx into warned_nodes_, returns a boolean indicates whether','line_number':128,'multiline':False]['text':' insertion actually happened (idx wasn't originally in the set).','line_number':129,'multiline':False]['text':' if we need to suspend, where do we reset the stack?','line_number':142,'multiline':False]['text':' answer: to where it was when we were called, not','line_number':143,'multiline':False]['text':' including any inputs to this function','line_number':144,'multiline':False]['text':' this holds all the tensors for this interpreter run','line_number':149,'multiline':False]['text':' we don't bother minimizing the size of this vector, since the extra','line_number':150,'multiline':False]['text':' memory used by the pointers in this will be small','line_number':151,'multiline':False]['text':' instead we are very aggressive about releasing tensors when they become','line_number':152,'multiline':False]['text':' dead to make sure memory management happens efficiently. We optimize for','line_number':153,'multiline':False]['text':' the case where derivatives are run with retain_graph=False in the case','line_number':154,'multiline':False]['text':' where it is true, then the interpreter and this array get copied if this','line_number':155,'multiline':False]['text':' every becomes a bottleneck then we _should_ consider minimizing the total','line_number':156,'multiline':False]['text':' number or register','line_number':157,'multiline':False]['text':' A stack of objects that have been __enter__'d.','line_number':160,'multiline':False]['text':' relative to the end of the register list so that when we call','line_number':194,'multiline':False]['text':' functions we are referring to the registers of the currently executing','line_number':195,'multiline':False]['text':' function.','line_number':196,'multiline':False]['text':' Primitives for making interpreter internal state transitions.','line_number':212,'multiline':False]['text':' We maintain two local variables as the internal interpreter state:','line_number':213,'multiline':False]['text':' `frame` will be the current frame that the interpreter operators on.','line_number':214,'multiline':False]['text':' `inst` will the current instruction pointed to by program counter.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' Instruction blocks should be always declared through `INST` macro and','line_number':217,'multiline':False]['text':' the instruction body should always start with a `INST_GUARD` declaration.','line_number':218,'multiline':False]['text':' Also blocks should be ended properly with either `INST_NEXT` (for going','line_number':219,'multiline':False]['text':' to the next instruction), or `INST_DISPATCH` (for jumping to a computed','line_number':220,'multiline':False]['text':' position using `INST_FETCH`).','line_number':221,'multiline':False]['text':' if we have never run before, then we might have to return the','line_number':241,'multiline':False]['text':' stack when we suspend, record where it starts so we return the right','line_number':242,'multiline':False]['text':' stack','line_number':243,'multiline':False]['text':' during restarts, all of the stack is always our own, so we leave','line_number':248,'multiline':False]['text':' nothing','line_number':249,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays)','line_number':259,'multiline':False]['text':' stack: iteration_count, max_iter, cond, loop_carried_deps...','line_number':382,'multiline':False]['text':' iteration_count, max_iter, cond','line_number':396,'multiline':False]['text':' note the hash table lookup to find the function','line_number':409,'multiline':False]['text':' this can be more optimized if necessary, caching parts','line_number':410,'multiline':False]['text':' of the hashing computation or storing the offset when','line_number':411,'multiline':False]['text':' the object is turned into an interface','line_number':412,'multiline':False]['text':' consider passing','line_number':414,'multiline':False]['text':' `frames.back().function->remaining_bailout_depth_` into','line_number':415,'multiline':False]['text':' `get_executor().getPlanFor()` to propagate caller's depth','line_number':416,'multiline':False]['text':' restrictions onto children while this strategy has a potential to','line_number':417,'multiline':False]['text':' reduce the number of compilations for too dynamic callers we','line_number':418,'multiline':False]['text':' might miss opportunities where a caller is dynamic but a callee','line_number':419,'multiline':False]['text':' gets stable arguments','line_number':420,'multiline':False]['text':' destroy the last frame and call RecordFunction's end callbacks','line_number':444,'multiline':False]['text':' callback needs to be a struct rather than a lambda so that','line_number':454,'multiline':False]['text':' we can move the stack to the other thread','line_number':455,'multiline':False]['text':' unused ','line_number':466,'multiline':True]['text':' preserve the original ThreadLocalState','line_number':479,'multiline':False]['text':' we are suspending, so we need to reset the stack to where we','line_number':483,'multiline':False]['text':' started if it started empty, except for the inputs we can avoid','line_number':484,'multiline':False]['text':' a true copy by swapping, which leaves the original stack empty.','line_number':485,'multiline':False]['text':' save pc into the frame so we continue here when restored','line_number':496,'multiline':False]['text':' patch FAIL_GUARD back to GUARD','line_number':520,'multiline':False]['text':' Check every input's shape against profiled (expected) shape.','line_number':531,'multiline':False]['text':' stack.back() is an Uninitialized IValue and this is a guard','line_number':550,'multiline':False]['text':' on a block output. Uninitialized IValues are never used','line_number':551,'multiline':False]['text':' so it's safe to pass this guard check','line_number':552,'multiline':False]['text':' Move inputs to a separate stack','line_number':722,'multiline':False]['text':' Keeps track of which WARN instruction has been executed before,','line_number':778,'multiline':False]['text':' we only want to execute each WARN once to match default Python','line_number':779,'multiline':False]['text':' warning behavior.','line_number':780,'multiline':False]['text':' Sends the warning to the warning handler with the','line_number':797,'multiline':False]['text':' "verbatim" flag. This flag ensures the warning handler','line_number':798,'multiline':False]['text':' will print the exception as configured.','line_number':799,'multiline':False]['text':'verbatim=','line_number':801,'multiline':True]['text':' TODO(T98048876): Handle `_` correctly.','line_number':828,'multiline':False]['text':' Janky af.  See https://github.com/pytorch/pytorch/issues/54612','line_number':839,'multiline':False]['text':' save the original exception's message when creating a new JITException','line_number':878,'multiline':False]['text':' One way to avoid overhead of forming string would be to return','line_number':914,'multiline':False]['text':' a vector of frame.function, i.e. CodeImpl*','line_number':915,'multiline':False]['text':' This is not exactly clean as it will expose, internal details of','line_number':916,'multiline':False]['text':' interpreter. But this way we hold onto graph/node and Function and','line_number':917,'multiline':False]['text':' we can create module hierarchy string for each event in autograd','line_number':918,'multiline':False]['text':' profiler at the end, when consolidating events.','line_number':919,'multiline':False]['text':' At the moment overhead does not seem exhorbitantly large.','line_number':920,'multiline':False]['text':' Another option would be return vector of (string, InlinedCallstackPtrs)','line_number':921,'multiline':False]['text':' string would contain function name and typename of self','line_number':922,'multiline':False]['text':' Format of the returned vector of strings:','line_number':923,'multiline':False]['text':' For each frame, the corresponding module name, type and function name','line_number':924,'multiline':False]['text':' are in following format:','line_number':925,'multiline':False]['text':' <module-instance-name>(module type)::<function-name>','line_number':926,'multiline':False]['text':' Special keys for module-instance-name:','line_number':927,'multiline':False]['text':'   - TOP: for top level module','line_number':928,'multiline':False]['text':'   - SELF: When method/function of the frame is associated with','line_number':929,'multiline':False]['text':'           previous frame's module instance','line_number':930,'multiline':False]['text':'   - INSTANCE_NAME_UNKNOWN: instance name cannot be figured out','line_number':931,'multiline':False]['text':'   - CALL_FUNCTION: call to free function','line_number':932,'multiline':False]['text':' For each frame, type of the class with which the function is','line_number':939,'multiline':False]['text':' associated, is queried here. And the type name is added to','line_number':940,'multiline':False]['text':' module hierarchy.','line_number':941,'multiline':False]['text':' CALL nodes have already advanced the pc, so','line_number':959,'multiline':False]['text':' undo that to report the call node','line_number':960,'multiline':False]['text':' This is likely a call to free function, not associated with','line_number':975,'multiline':False]['text':' any class','line_number':976,'multiline':False]['text':' If this node is of type callMethod then the following frame','line_number':985,'multiline':False]['text':' will contain the op being executed.','line_number':986,'multiline':False]['text':' For such callMethod node, we add the object instance name','line_number':987,'multiline':False]['text':' associated with it, since the following frame will not have it.','line_number':988,'multiline':False]['text':' CALL nodes have already advanced the pc, so','line_number':1019,'multiline':False]['text':' undo that to report the call node','line_number':1020,'multiline':False]['text':' By the time the continuation completes the frame will be gone, so this','line_number':1052,'multiline':False]['text':' must be done before calling runImpl().','line_number':1053,'multiline':False]['text':' namespace torch::jit','line_number':1205,'multiline':False]