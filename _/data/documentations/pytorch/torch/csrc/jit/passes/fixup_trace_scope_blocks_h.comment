['text':' Directly after tracing, we have an ill-formed graph with blocks inserted.','line_number':9,'multiline':False]['text':' Example:','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' graph(%self : ClassType<Module>,','line_number':12,'multiline':False]['text':'       %input.1 : Float(3, 4)):','line_number':13,'multiline':False]['text':'   %1 : ClassType<Module> = prim::GetAttr[name="relu1"](%self)','line_number':14,'multiline':False]['text':'   %2 : ClassType<Module> = prim::GetAttr[name="relu2"](%self)','line_number':15,'multiline':False]['text':'   %3 : ClassType<Module> = prim::GetAttr[name="rrr"](%2)','line_number':16,'multiline':False]['text':'    = prim::TracedModuleForward[scope="__module.relu1"]()','line_number':17,'multiline':False]['text':'     block0():','line_number':18,'multiline':False]['text':'       %input : Float(3, 4) = aten::relu(%input.1),','line_number':19,'multiline':False]['text':'       -> ()','line_number':20,'multiline':False]['text':'    = prim::TracedModuleForward[scope="__module.relu2"](),','line_number':21,'multiline':False]['text':'     block0():','line_number':22,'multiline':False]['text':'        = prim::TracedModuleForward[scope="__module.relu2.rrr"](),','line_number':23,'multiline':False]['text':'         block0():','line_number':24,'multiline':False]['text':'           %6 : Float(3, 4) = aten::relu(%input),','line_number':25,'multiline':False]['text':'           -> ()','line_number':26,'multiline':False]['text':'       -> ()','line_number':27,'multiline':False]['text':'   return (%6)','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' In this pass, we:','line_number':30,'multiline':False]['text':'   1) Lift Value defs to as high of a scope as needed to ensure that','line_number':31,'multiline':False]['text':'      they dominate all their uses. For example, `input` in the above','line_number':32,'multiline':False]['text':'      graph needs to be lifted to the top-level block so that its use','line_number':33,'multiline':False]['text':'      in the second `relu` operator is dominated.','line_number':34,'multiline':False]['text':'   2) Lambda lift the blocks. This ensures that all values used within','line_number':35,'multiline':False]['text':'      each scope have their defs captured.','line_number':36,'multiline':False]['text':'   3) Convert the scope blocks into methods on their respective Modules,','line_number':37,'multiline':False]['text':'      and convert TracedModuleForward nodes to CallMethod nodes into those','line_number':38,'multiline':False]['text':'      methods.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'  Then, we'll have a well-formed graph with proper method calls.','line_number':41,'multiline':False]['text':' namespace jit','line_number':46,'multiline':False]['text':' namespace torch','line_number':47,'multiline':False]