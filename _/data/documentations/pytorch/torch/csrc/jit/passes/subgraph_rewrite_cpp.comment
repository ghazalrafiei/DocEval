['text':' pattern_node_map, maps nodes of the replacement graph','line_number':18,'multiline':False]['text':' to the nodes of the pattern graph.','line_number':19,'multiline':False]['text':' Now we iterate over each node of the replacement graph','line_number':20,'multiline':False]['text':' and find the corresponding pattern node in the match.','line_number':21,'multiline':False]['text':' The matched's node's source range and callstack is then','line_number':22,'multiline':False]['text':' used to update replacement node's source range and callstack','line_number':23,'multiline':False]['text':' namespace','line_number':36,'multiline':False]['text':' TODO: Add actual patterns (like Conv-Relu).','line_number':39,'multiline':False]['text':' First construct map of Node*-to-Node*','line_number':95,'multiline':False]['text':' This maps Nodes in replacement graph to nodes in pattern graph','line_number':96,'multiline':False]['text':' given the value_name_map, which maps value names from replacement','line_number':97,'multiline':False]['text':' pattern to value name in pattern','line_number':98,'multiline':False]['text':' Matches might overlap with each other, in that case some of the nodes in','line_number':122,'multiline':False]['text':' the current match might have already been used in another folded pattern.','line_number':123,'multiline':False]['text':' We need to skip such matches.','line_number':124,'multiline':False]['text':' Figure out what values we need to use as inputs and outputs for the','line_number':129,'multiline':False]['text':' replacement subgraph and where the replacement subgraph needs to be','line_number':130,'multiline':False]['text':' inserted.','line_number':131,'multiline':False]['text':' Check that the insertion point we've chosen precedes all the uses of the','line_number':143,'multiline':False]['text':' outputs - otherwise the replacement is incorrect and we have to skip it.','line_number':144,'multiline':False]['text':' Before rewriting the graph, update source range and callstack','line_number':162,'multiline':False]['text':' info of the replacement pattern graph so that the rewritten graph','line_number':163,'multiline':False]['text':' has the updated info','line_number':164,'multiline':False]['text':' Insert a clone of replacement subgraph.','line_number':167,'multiline':False]['text':' `inputs` vector holds values that we would use as incoming values to the','line_number':168,'multiline':False]['text':' new subgraph, and we will get `new_outputs` vector containing values','line_number':169,'multiline':False]['text':' produced by this new subgraph - we will then rewrite old outputs with the','line_number':170,'multiline':False]['text':' new ones.','line_number':171,'multiline':False]['text':' Record all planned rewritings','line_number':176,'multiline':False]['text':' Record all planned deletions','line_number':183,'multiline':False]['text':' Perform planned rewritings','line_number':192,'multiline':False]['text':' Perform planned deletions','line_number':197,'multiline':False]['text':' TODO: Deep-copy the module','line_number':217,'multiline':False]['text':' namespace jit','line_number':223,'multiline':False]['text':' namespace torch','line_number':224,'multiline':False]