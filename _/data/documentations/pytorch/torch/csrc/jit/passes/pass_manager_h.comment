['text':' `getCustomPrePasses()` returns a vector of passes that will be executed
 * after differentiation but before any fusion. This is the de-facto location
 * for compiler backends to insert passes.
 *
 * `getCustomPostPasses()` returns a vector of passes that will be
 * executed after differentiation and after fusion (if any). This is the
 * location for fusion cleanup passes if they are needed.
 *
 * Static registration of a pass can be done by creating a global
 * `Register{Pre,Post}Pass r(Pass)` variable in a compilation unit.
 *
 * pass_manager.h uses a Meyer's singleton to store a vector of `Pass`es, which
 * modify the IR graph in place.
 ','line_number':5,'multiline':True]['text':' A pass modifies a Graph in place.','line_number':23,'multiline':False]['text':' Since Passes are std::functions, we associate a UUID to each pass, this way','line_number':26,'multiline':False]['text':' if we want to deregister a pass, we have something to reference it by.','line_number':27,'multiline':False]['text':' Graph pass entries have a name associated with them','line_number':30,'multiline':False]['text':' Return currently registered passes. Passes are stored in a static vector','line_number':33,'multiline':False]['text':' Look up pass by name passed in, remove it from registered passes','line_number':42,'multiline':False]['text':' Remove all passes','line_number':46,'multiline':False]['text':' LEGACY CALL','line_number':50,'multiline':False]['text':'
 * PassManager is a wrapper on the register/clear PostPass functions above. It
 * will register the pass provided in "registerPass" and will hold on to its
 * associated name that way clearPass can be later called and will delete the
 * pass used to register when called.
 *
 * PassManager is templated because we want static variables based on a
 * particular GraphPass. When deriving from PassManager, you should send as the
 * template parameter your derived class as you would for the curiously
 * recurring template pattern. This template parameter isn't actually used and
 * is simply done to prevent static members from being shared across derived
 * types.
 ','line_number':57,'multiline':True]['text':' We want this class to be abstract because it's','line_number':73,'multiline':False]['text':'
   * isRegistered() will return if a pass has been registered
   * isRegistered(true) will change the value of the internal static bool
   *
   * There's an internal static bool to this function to keep track of the
   * state, this is so when functions are derived from this class, they don't
   * have to worry about initializing the static members.
   ','line_number':77,'multiline':True]['text':'
   * name() will return the name of the registered pass
   * name(pass_name, true) will set the name of the pass
   * Similarly to isRegistered we use an internal static variable to hold the
   * name.
   ','line_number':92,'multiline':True]['text':' registerPass(pass) will register the pass provided and set the','line_number':108,'multiline':False]['text':' name/isRegistered functions appropriately, it returns a bool value','line_number':109,'multiline':False]['text':' indicating whether the given pass is already registered previously.','line_number':110,'multiline':False]['text':' If we don't already have a registered pass, register pass','line_number':113,'multiline':False]['text':' hold on to its name, change isRegistered to true','line_number':114,'multiline':False]['text':' Calls ClearPostPass(passID())','line_number':122,'multiline':False]['text':' If the pass is registered, clear it and change isRegistered to false.','line_number':124,'multiline':False]['text':' clang-tidy requires virtual destructor;','line_number':131,'multiline':False]['text':' namespace jit','line_number':135,'multiline':False]['text':' namespace torch','line_number':136,'multiline':False]