['text':' here we are profile the definition instead of the use,','line_number':31,'multiline':False]['text':' because we are only optimizing in the case of a None value which is','line_number':32,'multiline':False]['text':' immutable','line_number':33,'multiline':False]['text':' frame_id is unused','line_number':48,'multiline':False]['text':' this is to deal with the fact that there could be other passes that','line_number':170,'multiline':False]['text':' would like to profile this exact same value. this helper walks','line_number':171,'multiline':False]['text':' chains of `prim::profile_ivalue` to locate the one inserted by/for','line_number':172,'multiline':False]['text':' `specializeAutogradZero`','line_number':173,'multiline':False]['text':' this removes `prim::profile_ivalue` from the original and to-specialize','line_number':193,'multiline':False]['text':' blocks N.B. the false block isn't impacted as it has been already','line_number':194,'multiline':False]['text':' encapsulated in a fallback function','line_number':195,'multiline':False]['text':' we will optimize true_block','line_number':207,'multiline':False]['text':' the original `prim::profile_value[num_present=0,...]` on `inp` is','line_number':224,'multiline':False]['text':' copied into `true_block` and `false_block`.','line_number':225,'multiline':False]['text':' TODO: check multiple uses ?','line_number':246,'multiline':False]['text':' unable to specialize any of the inputs','line_number':266,'multiline':False]['text':' the checks we inserted will be cleaned up','line_number':270,'multiline':False]['text':' by any subsequent DCE pass','line_number':271,'multiline':False]['text':' We've created:','line_number':303,'multiline':False]['text':' successful_checks = Guards(...)','line_number':304,'multiline':False]['text':' if (successful_checks)','line_number':305,'multiline':False]['text':' -> optimized graph','line_number':306,'multiline':False]['text':' else:','line_number':307,'multiline':False]['text':' -> fallback graph','line_number':308,'multiline':False]['text':' original graph','line_number':309,'multiline':False]['text':'','line_number':310,'multiline':False]['text':' Remove the dead original graph','line_number':311,'multiline':False]['text':' if one is Autograd zero, we can just drop the add','line_number':330,'multiline':False]['text':' Zero + b == b','line_number':332,'multiline':False]['text':' a + Zero == a','line_number':336,'multiline':False]['text':' when both are Nonzero, we can use a normal, optimizable add','line_number':341,'multiline':False]['text':' instruction','line_number':342,'multiline':False]['text':' otherwise we have conditionally-Nonzero things, and we need','line_number':355,'multiline':False]['text':' to actually run an AutogradAdd which will guard for Zeros','line_number':356,'multiline':False]['text':' so we leave the op as is','line_number':357,'multiline':False]['text':' this a profile node on a tensor use','line_number':365,'multiline':False]['text':' if we decided to specialize this graph','line_number':366,'multiline':False]['text':' its input may have undefinedness info','line_number':367,'multiline':False]['text':' otherwise it should be Unknown','line_number':368,'multiline':False]['text':' Lowered GradOf block','line_number':383,'multiline':False]['text':' Property 1: if all the gradInputs to the GradOf are Zero','line_number':396,'multiline':False]['text':' then the gradOutputs are also zero and will be represented as','line_number':397,'multiline':False]['text':' AutogradZero nodes','line_number':398,'multiline':False]['text':' hoist the nodes in the GradOf body to be before the linear','line_number':413,'multiline':False]['text':' block','line_number':414,'multiline':False]['text':' propagate profiled none through other profile_ivalue nodes;','line_number':450,'multiline':False]['text':' propagate autograd zero information through a gradient graph and','line_number':469,'multiline':False]['text':' remove grad_of blocks if present.','line_number':470,'multiline':False]['text':' Note: this is a very limited pass. It only propagates autograd zeros for','line_number':471,'multiline':False]['text':' operations generated by the symbolic autodiff code and cleans up','line_number':472,'multiline':False]['text':' AutogradAdds when possible. Outputs of other nodes are conservatively','line_number':473,'multiline':False]['text':' marked Unknown and not optimized.','line_number':474,'multiline':False]['text':' namespace jit','line_number':480,'multiline':False]['text':' namespace torch','line_number':481,'multiline':False]