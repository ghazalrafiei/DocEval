['text':' primitive types can be copied directly','line_number':14,'multiline':False]['text':' Tensors need special handling, since copy assignment creates an alias','line_number':19,'multiline':False]['text':' Lists of ivalues should recursively deep copy their contents','line_number':24,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':26,'multiline':False]['text':' NOLINTNEXTLINE(performance-implicit-conversion-in-loop)','line_number':30,'multiline':False]['text':' Regular lists can copy assign','line_number':37,'multiline':False]['text':' If in the future we add more reference types that are used in aten ops,','line_number':50,'multiline':False]['text':' we'll have to add them as cases here.','line_number':51,'multiline':False]['text':' No inputs should alias each other','line_number':94,'multiline':False]['text':' If two ivalues alias, they must share an alias set','line_number':108,'multiline':False]['text':' if this output aliases any input, make sure that they share an alias set','line_number':113,'multiline':False]['text':' If we didn't specify that we write to an input value, it must have not','line_number':132,'multiline':False]['text':' changed','line_number':133,'multiline':False]['text':' Check for alias-ed operator names','line_number':157,'multiline':False]['text':' Ideally, there will be only one ATen operator that has tensor outputs in','line_number':167,'multiline':False]['text':' the graph. Let's use that as the last resolve to make checkAliasAnnotation','line_number':168,'multiline':False]['text':' more robust.','line_number':169,'multiline':False]['text':' Handle a few special cases where we need to propagate constants','line_number':188,'multiline':False]['text':' manually','line_number':189,'multiline':False]['text':' TODO(suo): we should be able to move this stuff to constant prop','line_number':190,'multiline':False]['text':' One of the list elements isn't constant.','line_number':198,'multiline':False]['text':' Specialize the list based on ListConstruct's return type','line_number':203,'multiline':False]['text':' batch_norm and instance_norm have incorrect annotations, because','line_number':228,'multiline':False]['text':' (a!)? annotations aren't supported, so these checks would fail.','line_number':229,'multiline':False]['text':' Their behavior also varies depending on the `training` and','line_number':230,'multiline':False]['text':' `use_input_stats` arguments.','line_number':231,'multiline':False]['text':' There are custom implementations in alias_analysis.cpp for these ops.','line_number':232,'multiline':False]['text':' namespace','line_number':242,'multiline':False]['text':' Find the node that corresponds to our op name','line_number':248,'multiline':False]['text':' Build the stack to use as input to the op','line_number':254,'multiline':False]['text':' This value was passed as an input in python','line_number':258,'multiline':False]['text':' This a generated constant, which we need to evaluate','line_number':261,'multiline':False]['text':' Precondition: no inputs should alias each other. So if we find an alias,','line_number':276,'multiline':False]['text':' it was created by the op.','line_number':277,'multiline':False]['text':' Save a copy of the inputs so we can check whether the original inputs were','line_number':288,'multiline':False]['text':' written to.','line_number':289,'multiline':False]['text':' Run the op','line_number':292,'multiline':False]['text':' Check that if any alias was created, we annotated it properly.','line_number':303,'multiline':False]['text':' Check that if nothing was accidentally written to.','line_number':306,'multiline':False]['text':' namespace jit','line_number':310,'multiline':False]['text':' namespace torch','line_number':311,'multiline':False]