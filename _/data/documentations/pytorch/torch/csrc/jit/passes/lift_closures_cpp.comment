['text':' Closures are initially emitted as prim::Closure nodes with a single block.','line_number':11,'multiline':False]['text':' Here, we convert the block to a subgraph, adding all closed over variables','line_number':12,'multiline':False]['text':' as a context tuple input to the closure node.','line_number':13,'multiline':False]['text':' At this point the closure has already undergone conversion to SSA,','line_number':14,'multiline':False]['text':' so closed over variables will just be value * that are not set in the','line_number':15,'multiline':False]['text':' closure block.','line_number':16,'multiline':False]['text':' Within the closure subgraph, the context tuple is unpacked and the unpacked','line_number':17,'multiline':False]['text':' values are used for closed over values.','line_number':18,'multiline':False]['text':' closures/forks can be nested, so use closure owning graph','line_number':22,'multiline':False]['text':' cannot use createTupleUnpack because the type is not known yet','line_number':27,'multiline':False]['text':' namespace jit','line_number':80,'multiline':False]['text':' namespace torch','line_number':81,'multiline':False]