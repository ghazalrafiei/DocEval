['text':'* This file defines API for pattern-based subgraph rewrites.
 *
 * The API can be used for finding concrete patterns in the model and replacing
 * the corresponding subgraphs with another subgraph. A special case of such
 * rewrites is fusion, where the new subgraph consists of just a single node.
 *
 * There is a default set of the most common patterns that everyone could use.
 * Alternatively, an arbitrary pattern can be registered.
 ','line_number':1,'multiline':True]['text':' Forward declarations.','line_number':22,'multiline':False]['text':'* Run pattern-based subgraph rewrites on all methods in the module.
 *
 * This pass will go through all methods in the module and try to replace all
 * recognized patterns (see SubgraphRewriter::RegisterDefaultPatterns for the
 * list of these patterns).
 ','line_number':29,'multiline':True]['text':'* A class implementing API for pattern-based subgraph rewrites.
 *
 * To perform pattern-based subgraph rewrites on a module using this API, one
 * needs to create an object of such class, register rewrite patterns and run
 * the transformation pass (`runOnModule`).
 *
 * To use standard patterns, one could use `RegisterDefaultPatterns`.
 *
 * To enable rewrites of custom patterns, the custom patterns must be registered
 * with `RegisterRewritePattern`.
 ','line_number':37,'multiline':True]['text':' Run pattern-based subgraph rewrite pass on the module.','line_number':50,'multiline':False]['text':' Run pattern-based subgraph rewrite pass on the graph (used in testing).','line_number':53,'multiline':False]['text':' `filter` is a function that does extra filtering on the match. If it','line_number':54,'multiline':False]['text':' returns false for a given Match, we'll skip the Match. The filter','line_number':55,'multiline':False]['text':' function's arguments consist of a Match and a value map from parsing the','line_number':56,'multiline':False]['text':' pattern graph. Both the Match and the value map are necessary because we','line_number':57,'multiline':False]['text':' need to 1) do extra filtering on the matched result as well as 2) refer to','line_number':58,'multiline':False]['text':' the values in the matched result through the values in the pattern graph.','line_number':59,'multiline':False]['text':' Register standard rewrite patterns.','line_number':73,'multiline':False]['text':'* Register a custom rewrite pattern.
   *
   * The method takes two parameters specifying the pattern:
   * \p PATTERN - IR string representing the pattern subgraph.
   * \p REPLACEMENT - IR string representing the replacement subgraph.
   * \p value name map - vector of pairs mapping values in the replacement graph
   * to the values in the pattern graph. Used for preserving source range info
   * across graph rewrite.
   *
   * See examples of pattern registering in `RegisterDefaultPatterns`.
   ','line_number':76,'multiline':True]['text':'* Rewrite pattern descriptor.
 *
 * This structure is used in the implementation of `SubgraphRewriter` and
 * is not supposed to be used externally.
 ','line_number':105,'multiline':True]['text':' namespace jit','line_number':116,'multiline':False]['text':' namespace torch','line_number':117,'multiline':False]