['text':' Freezing client wants to preserve this submodule. When cleaning','line_number':64,'multiline':False]['text':' the frozen module, make sure it will be preserved entirely.','line_number':65,'multiline':False]['text':' forward is preserved by default, but','line_number':80,'multiline':False]['text':' not all modules have a forward function defined','line_number':81,'multiline':False]['text':' unroll_non_constant_loops? ','line_number':123,'multiline':True]['text':' const_prop_user_classes? ','line_number':124,'multiline':True]['text':' Record Attributes that are explicitly set in the module.','line_number':146,'multiline':False]['text':' They cannot be folded.','line_number':147,'multiline':False]['text':' Try to resolve qualified names (submodule1.submodule2.foo). If','line_number':164,'multiline':False]['text':' the qualified name exists in the root module, return the unqualified','line_number':165,'multiline':False]['text':' attribute/function name and the parent module. Else, return nullopt.','line_number':166,'multiline':False]['text':' Examples:','line_number':167,'multiline':False]['text':' submodule1.submodule2.foo -> {submodule2, "foo"}','line_number':168,'multiline':False]['text':' submodule1.non_existent_module.foo -> nullopt','line_number':169,'multiline':False]['text':' We don't want to mark these modules as mutable yet; that could','line_number':197,'multiline':False]['text':' interfere with the inlining procedure. Instead, we'll record','line_number':198,'multiline':False]['text':' the fact that the user wants to preserve them. They will be','line_number':199,'multiline':False]['text':' processed during clean-up preparation (recordReferenceAttrs)','line_number':200,'multiline':False]['text':' findConstantAttr function locates the sub Module where attributes are','line_number':253,'multiline':False]['text':' defined. The algorithm chases getAttr chains to locate the submodules.','line_number':254,'multiline':False]['text':' For example:','line_number':255,'multiline':False]['text':' module M {','line_number':256,'multiline':False]['text':'   attributes {','line_number':257,'multiline':False]['text':'     A = <SubModule at ...>','line_number':258,'multiline':False]['text':'   }','line_number':259,'multiline':False]['text':'   ...','line_number':260,'multiline':False]['text':'   %A = prim::GetAttr[name="A"](%self)','line_number':261,'multiline':False]['text':'   ...','line_number':262,'multiline':False]['text':'   %B = prim::GetAttr[name="B"](%A)','line_number':263,'multiline':False]['text':'   ...','line_number':264,'multiline':False]['text':'   %weight = prim::GetAttr[name="scale"](%B)','line_number':265,'multiline':False]['text':'   ...','line_number':266,'multiline':False]['text':'   submodules {','line_number':267,'multiline':False]['text':'     module SubModule {','line_number':268,'multiline':False]['text':'       attributes {','line_number':269,'multiline':False]['text':'          B = <SubModule2 at ...>','line_number':270,'multiline':False]['text':'       }','line_number':271,'multiline':False]['text':'       submodules {','line_number':272,'multiline':False]['text':'         module SubModule2 {','line_number':273,'multiline':False]['text':'            attributes {','line_number':274,'multiline':False]['text':'               scale = 2','line_number':275,'multiline':False]['text':'            }','line_number':276,'multiline':False]['text':'         }','line_number':277,'multiline':False]['text':'       }','line_number':278,'multiline':False]['text':'     }','line_number':279,'multiline':False]['text':'   }','line_number':280,'multiline':False]['text':'','line_number':281,'multiline':False]['text':' findConstantAttr(%B, "scale", M)  returns true because there are no','line_number':282,'multiline':False]['text':' explicit SetAttr that modifies %B. attrModule points to the module where','line_number':283,'multiline':False]['text':' attribute lives (in this example it is <SubModule2 at ...>).','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':' Note inplace mutations to attributes are checked later using alias','line_number':286,'multiline':False]['text':' analysis.','line_number':287,'multiline':False]['text':'','line_number':288,'multiline':False]['text':' We can use a more efficient algorithm to hash each constant GetAttr to its','line_number':289,'multiline':False]['text':' corresponding value. Based on initial test on resnet50 and other torch','line_number':290,'multiline':False]['text':' vision tests. GetAttrs are not too frequent so it is ok to chase GetAttr','line_number':291,'multiline':False]['text':' chain to retrieve their values.','line_number':292,'multiline':False]['text':' loads the path into this->names_','line_number':303,'multiline':False]['text':' reassigns attrModule to the module in names_','line_number':308,'multiline':False]['text':' isFrozen ','line_number':346,'multiline':True]['text':' Modules with prim::ModuleContainerIndex cannot be frozen because they','line_number':355,'multiline':False]['text':' return InterfaceTypes.','line_number':356,'multiline':False]['text':' By default if interface attributes are present then fail freezing.','line_number':362,'multiline':False]['text':' If freezingInterfaces is on then Interfaces are folded similarly','line_number':363,'multiline':False]['text':' to other attributes.','line_number':364,'multiline':False]['text':' Do not record submodules. Their attributes are tracked','line_number':379,'multiline':False]['text':' individually.','line_number':380,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-bind)','line_number':399,'multiline':False]['text':' FIXME: Current Alias analysis fails to track subvalues.','line_number':407,'multiline':False]['text':' This is not a common scenario, for freezing, detect and error out.','line_number':408,'multiline':False]['text':' This method is invoked only when 'freezeInterfaces' parameter is on.','line_number':466,'multiline':False]['text':' The module associated with Interface is retrieved and the invoked method','line_number':467,'multiline':False]['text':' is inlined.','line_number':468,'multiline':False]['text':'   [Note: Inlining interfaces strategy]','line_number':493,'multiline':False]['text':' There's two structures that are relevant to freezing:','line_number':494,'multiline':False]['text':' - the graph describing the computation in a method','line_number':495,'multiline':False]['text':' - the module describing the data structure of the module instance.','line_number':496,'multiline':False]['text':'','line_number':497,'multiline':False]['text':' First, in inlineInterfaceCalls, we inline interfaces. This is done in a','line_number':498,'multiline':False]['text':' separate step from normal inlining because CallMethod on an interface type','line_number':499,'multiline':False]['text':' requires extra steps compared to inlining a normal CallMethod.','line_number':500,'multiline':False]['text':'','line_number':501,'multiline':False]['text':' Next we need to simplify the structure of the module data structure, which','line_number':502,'multiline':False]['text':' is done for the most part by the usual steps in cleanupFrozenModule.','line_number':503,'multiline':False]['text':'','line_number':504,'multiline':False]['text':' However, there's a complication that comes from the fact that within a','line_number':505,'multiline':False]['text':' method, you can change the value of an interface to another module that','line_number':506,'multiline':False]['text':' implements that interface.','line_number':507,'multiline':False]['text':'','line_number':508,'multiline':False]['text':' For example:','line_number':509,'multiline':False]['text':'','line_number':510,'multiline':False]['text':' impl: MyInterface','line_number':511,'multiline':False]['text':' ...','line_number':512,'multiline':False]['text':' def forward(self, x):','line_number':513,'multiline':False]['text':'     if x > 0:','line_number':514,'multiline':False]['text':'         self.impl = my_interface_impl','line_number':515,'multiline':False]['text':'','line_number':516,'multiline':False]['text':' This is disallowed in freezing, because in this case we can't flatten out','line_number':517,'multiline':False]['text':' the module structure, since the type of self.impl will change.','line_number':518,'multiline':False]['text':'','line_number':519,'multiline':False]['text':' To handle this, we do the following:','line_number':520,'multiline':False]['text':'   1. inlineInterfaceCalls:','line_number':521,'multiline':False]['text':'     a. inline the graph, and in the process record all interfaces','line_number':522,'multiline':False]['text':'     b. simultaneously, check (throw error) for disallowed SetAttr calls.','line_number':523,'multiline':False]['text':'   2. call reassignInterfaceTypes, which reassigns interface types to their','line_number':524,'multiline':False]['text':'      concrete types. This is done in a separate step to avoid interfering','line_number':525,'multiline':False]['text':'      with inlineInterfaceCalls (note: this may not need to be done as a','line_number':526,'multiline':False]['text':'      separate step)','line_number':527,'multiline':False]['text':'   3. eventually cleanupFrozenModule will reorder the module data structure','line_number':528,'multiline':False]['text':'      and it will expect that all interface types have been removed.','line_number':529,'multiline':False]['text':' Reset the GetAttr to concrete module type.','line_number':557,'multiline':False]['text':' Record this so that we can reassign the type later','line_number':560,'multiline':False]['text':' in reassignInterfaceTypes()','line_number':561,'multiline':False]['text':' See [Note: Inlining interfaces strategy]','line_number':562,'multiline':False]['text':' Check to make sure we're not assigning the value of any parameters','line_number':568,'multiline':False]['text':' that are interface types.','line_number':569,'multiline':False]['text':' See [Note: Inlining interfaces strategy]','line_number':570,'multiline':False]['text':' we only care if we're setattr["thing"](%mod) if %mod','line_number':577,'multiline':False]['text':' note: this will modify attrModule until it is the parent of the','line_number':581,'multiline':False]['text':' "name" attr. In other words, attrModule is now the module that','line_number':582,'multiline':False]['text':' matches "input".','line_number':583,'multiline':False]['text':' We can't use findConstantAttr in case the base item is an object,','line_number':584,'multiline':False]['text':' instead of a module/interface.','line_number':585,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-bind)','line_number':601,'multiline':False]['text':' See [Note: Inlining interfaces strategy]','line_number':612,'multiline':False]['text':' This modifies the internal structure of module types to reassign the','line_number':613,'multiline':False]['text':' type from an interface type to its concrete type.','line_number':614,'multiline':False]['text':' advance iterator bc the current node may be destroyed','line_number':647,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-bind)','line_number':728,'multiline':False]['text':' Check if first parameter of fork is a module. This module is used','line_number':745,'multiline':False]['text':' as the base module (similar to 'self' in forward) to resolve GetAttrs.','line_number':746,'multiline':False]['text':'  Otherwise freezing is applied using module_','line_number':747,'multiline':False]['text':' Module needs to be preserved.','line_number':753,'multiline':False]['text':' If input type is not a from aten::fork call then the','line_number':783,'multiline':False]['text':' aten::wait operator can be deleted.','line_number':784,'multiline':False]['text':' For the remaining nodes, recurse.','line_number':790,'multiline':False]['text':' cleanupFrozenModule function cleans up the Frozen module. It performs the','line_number':799,'multiline':False]['text':' following:','line_number':800,'multiline':False]['text':' 1) Remove unused attributes.','line_number':801,'multiline':False]['text':' 2) Remove unreferenced submodules','line_number':802,'multiline':False]['text':' 3) Remove non public unreferenced methods.','line_number':803,'multiline':False]['text':' Preparing for clean up phase. At this point, record all subModules that','line_number':815,'multiline':False]['text':' contains mutable attributes.','line_number':816,'multiline':False]['text':' For now, use all module ivalues which are the same type','line_number':829,'multiline':False]['text':' and could be the module that this GetAttr resolves to','line_number':830,'multiline':False]['text':' TODO: we could attempt to follow the GetAttr chain and','line_number':831,'multiline':False]['text':' find the exact ivalue, we would have to be careful','line_number':832,'multiline':False]['text':' that the chain does not contain any attributes which','line_number':833,'multiline':False]['text':' get written to (setAttr calls)','line_number':834,'multiline':False]['text':' TODO: this could be insertReferencedAttr to be more clear,','line_number':841,'multiline':False]['text':' these are attributes we could not inline, which include','line_number':842,'multiline':False]['text':' other reasons besides mutation (unsupported constant,','line_number':843,'multiline':False]['text':' getAttr resolving to non-getAttr node, etc)','line_number':844,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-bind)','line_number':855,'multiline':False]['text':' We have to process the attributes that the user wants to preserve','line_number':863,'multiline':False]['text':' separately since it's possible that the user-preserved module is','line_number':864,'multiline':False]['text':' never referenced in the graph.','line_number':865,'multiline':False]['text':' This function recursively iterates over submodules to identify','line_number':875,'multiline':False]['text':' for each class type the attribute slots that need to be preserved.','line_number':876,'multiline':False]['text':'','line_number':877,'multiline':False]['text':' Note 'attrsToKeep[type].insert(type->numAttributes())' means all','line_number':878,'multiline':False]['text':' attribute slots of 'type' and its methods are preserved. A submodule is','line_number':879,'multiline':False]['text':' preserved when it escapes (meaning it is returned).','line_number':880,'multiline':False]['text':' Preserve all its attributes and methods.','line_number':885,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':897,'multiline':False]['text':' See [Note: Inlining interfaces strategy]','line_number':908,'multiline':False]['text':' Remove unused attributes and methods for each sub module of the frozen','line_number':920,'multiline':False]['text':' module. This function iterates over the Classtypes of its submodule','line_number':921,'multiline':False]['text':' attributes including its own type.','line_number':922,'multiline':False]['text':' Contains attributes that can't be folded or user directs to keep them.','line_number':962,'multiline':False]['text':' Tracked immutable types (Scalars) by their attribute names not','line_number':964,'multiline':False]['text':' IValues.','line_number':965,'multiline':False]['text':' Contains user specified methods to be preserved in frozen module.','line_number':969,'multiline':False]['text':' Contains user specified sub module to be preserve in frozen module.','line_number':972,'multiline':False]['text':' Track all used attributes ivalues that can be aliased.','line_number':975,'multiline':False]['text':' Contains the attribute slots that need to be preserved for each ClassType.','line_number':978,'multiline':False]['text':' Contains the sub modules that share the same ClassType.','line_number':981,'multiline':False]['text':' Allow to freeze modules containing interfaces.','line_number':987,'multiline':False]['text':' Preserve module parameters','line_number':990,'multiline':False]['text':' Contains the attributes names (e.g. {"self", "subModule", "a"}','line_number':993,'multiline':False]['text':' see [Constant Object Weak CompilationUnit Reference]','line_number':996,'multiline':False]['text':' Contains names of attributes that the user wants to preserve with','line_number':1002,'multiline':False]['text':' their owning modules.','line_number':1003,'multiline':False]['text':' class AttributePropagator','line_number':1007,'multiline':False]['text':' Check that module does not return itself.','line_number':1012,'multiline':False]['text':' namespace','line_number':1020,'multiline':False]['text':' namespace jit','line_number':1048,'multiline':False]['text':' namespace torch','line_number':1049,'multiline':False]