['text':' only handling constants bc of potential side effects','line_number':31,'multiline':False]['text':' in ONNX, all inputs are tensors, no support for tensor list','line_number':51,'multiline':False]['text':' so at most one input tensor list is supported','line_number':52,'multiline':False]['text':' recursive optional type is not supported','line_number':62,'multiline':False]['text':' is a constant list','line_number':138,'multiline':False]['text':' Transform PythonOps into Nodes that match ONNX semantics.','line_number':164,'multiline':False]['text':' BlockToONNX.','line_number':185,'multiline':False]['text':' is_sub_block = true means the old_block (aten graph) is in the sub block','line_number':186,'multiline':False]['text':' (e.g., if sub block), and we want to convert it into its parent block in onnx','line_number':187,'multiline':False]['text':' graph. In this case, we don't register the input/output or eliminate the dead','line_number':188,'multiline':False]['text':' code.','line_number':189,'multiline':False]['text':' Initialize context and environment','line_number':203,'multiline':False]['text':' Finally, visit all nodes in the graph','line_number':211,'multiline':False]['text':' Run dce to clean-up unused functional and inplace ops.','line_number':223,'multiline':False]['text':' Setup all the lambda helper functions.','line_number':250,'multiline':False]['text':' Returns a node that n maps to in the new graph','line_number':252,'multiline':False]['text':' Put the new outputs in our environment map, and copy the type from the','line_number':260,'multiline':False]['text':' input graph if they were not set by the symbolic. This is called only','line_number':261,'multiline':False]['text':' with results of symbolic call (not for nodes that are just cloned).','line_number':262,'multiline':False]['text':' Count all outputs, excluding Handles','line_number':267,'multiline':False]['text':' For const node, it does not need params_dict info, so set it to {}.','line_number':276,'multiline':False]['text':' Update ONNX value debug name with ATen value debug name if existed.','line_number':289,'multiline':False]['text':' Skip if ONNX value already exist in environment.','line_number':290,'multiline':False]['text':' This implies the op is a noop, and the value is owned by','line_number':291,'multiline':False]['text':' other node created elsewhere.','line_number':292,'multiline':False]['text':' setDebugName changes name of existing value with same name.','line_number':300,'multiline':False]['text':' Set again to revert the changes, but update name for new value','line_number':301,'multiline':False]['text':' with suffix.','line_number':302,'multiline':False]['text':' Allow symbolic() to skip specifying the type of the return node.','line_number':307,'multiline':False]['text':' Unfortunately, they are on the hook for all internal nodes','line_number':308,'multiline':False]['text':' (though in practice, the types are not computed.)','line_number':309,'multiline':False]['text':'','line_number':310,'multiline':False]['text':' If onnx shape inference is turned on, the new outputs will have','line_number':311,'multiline':False]['text':' types inferred, and they will be merged with the old types.','line_number':312,'multiline':False]['text':' Create a const node if the node output value is in','line_number':314,'multiline':False]['text':' ConstantValueMap.','line_number':315,'multiline':False]['text':' Copy over source location and scope information to all nodes','line_number':323,'multiline':False]['text':' created by the symbolic','line_number':324,'multiline':False]['text':' An update in ConstantValueMap is also needed here, since','line_number':330,'multiline':False]['text':' the user setType can be only accessed in this step, and it','line_number':331,'multiline':False]['text':' should be reliable.','line_number':332,'multiline':False]['text':' non ONNX node with no type given will throw out the warnings here.','line_number':335,'multiline':False]['text':'no_type_warning=','line_number':339,'multiline':True]['text':' For the node type that does not have ComputeConstant logic, it may','line_number':340,'multiline':False]['text':' have reliable shape but its shape is not in ConstantValueMap. So we','line_number':341,'multiline':False]['text':' need to update ConstantValueMap.','line_number':342,'multiline':False]['text':' Copy over source location and scope information to all nodes','line_number':345,'multiline':False]['text':' created by the symbolic','line_number':346,'multiline':False]['text':' Do not set metadata if outputs[i] is already in env.','line_number':347,'multiline':False]['text':' Null output means that the ONNX op doesn't have outputs corresponding','line_number':354,'multiline':False]['text':' to certain PyTorch outputs','line_number':355,'multiline':False]['text':' TODO: Say what actually used it','line_number':363,'multiline':False]['text':' Clone the node and add it to the new graph','line_number':370,'multiline':False]['text':' n_->outputs()[i]->setType(node->outputs()[i]->type());','line_number':375,'multiline':False]['text':' Inline the prim::PythonOp sub-block nodes and append them to the onnx graph','line_number':380,'multiline':False]['text':' Cast output of symbolic() python implementation','line_number':395,'multiline':False]['text':' Cast the outputs back to C++ and put them in the new graph','line_number':403,'multiline':False]['text':' The idea is delegate as much of the actual argument massaging to','line_number':423,'multiline':False]['text':' Python as possible','line_number':424,'multiline':False]['text':' IMPORTANT: NEVER pass raw pointer of smart pointer managed objects to','line_number':441,'multiline':False]['text':' Python. Check #87343 for details.','line_number':442,'multiline':False]['text':' Find new nodes that have been created by _run_symbolic_function and','line_number':451,'multiline':False]['text':' propagate metadata','line_number':452,'multiline':False]['text':' TODO: Assert it's an ATen identifier???','line_number':459,'multiline':False]['text':' (Sometimes it's not...)','line_number':460,'multiline':False]['text':' Test if there is a symbolic function; bail if there is not','line_number':466,'multiline':False]['text':' NOTE(justinchuby): Call the internal registry to register the symbolic','line_number':475,'multiline':False]['text':' method defined in the module.','line_number':476,'multiline':False]['text':' Inline the subgraph within the prim::PythonOp unless','line_number':484,'multiline':False]['text':' either of these conditions are satisfied','line_number':485,'multiline':False]['text':' 1. The torch.autograd.Function class of this node object has `symbolic`','line_number':486,'multiline':False]['text':' method defined.','line_number':487,'multiline':False]['text':' 2. Custom export symbolic is registered for prim::PythonOp.','line_number':488,'multiline':False]['text':' Prepare args for Python. First one is the graph, and is followed','line_number':514,'multiline':False]['text':' by regular args, with Variables replaced by corresponding nodes.','line_number':515,'multiline':False]['text':' Call the symbolic function','line_number':542,'multiline':False]['text':' Use a little trampoline function so we can give good error messages','line_number':543,'multiline':False]['text':' upon argument mismatch','line_number':544,'multiline':False]['text':' Register as a custom operator','line_number':545,'multiline':False]['text':' TODO: Find a more elegant way to do this without having to touch','line_number':546,'multiline':False]['text':' internal Python modules.','line_number':547,'multiline':False]['text':' TODO(justinchuby): Define a namespace for these Python Ops.','line_number':548,'multiline':False]['text':' custom ','line_number':554,'multiline':True]['text':' IMPORTANT: NEVER pass raw pointer of smart pointer managed objects to','line_number':556,'multiline':False]['text':' Python. Check #87343 for details.','line_number':557,'multiline':False]['text':' Call symbolic function','line_number':569,'multiline':False]['text':' IMPORTANT: NEVER pass raw pointer of smart pointer managed objects to','line_number':570,'multiline':False]['text':' Python. Check #87343 for details.','line_number':571,'multiline':False]['text':' Pass on Caffe2 operator, since we already preprocess it','line_number':586,'multiline':False]['text':' namespace jit','line_number':595,'multiline':False]['text':' namespace torch','line_number':596,'multiline':False]