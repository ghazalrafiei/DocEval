['text':' This is a horrible no good awful hack to "fill in" the TensorOptions','line_number':16,'multiline':False]['text':' arguments of zeros_like and full_like so that the defaults are filled','line_number':17,'multiline':False]['text':' in.  Ugh.  Would be better to just run the frontend to get the correct','line_number':18,'multiline':False]['text':' arity here.','line_number':19,'multiline':False]['text':' Remove all in-place ops and replace them with out-of-place equivalents.','line_number':28,'multiline':False]['text':' e.g.','line_number':29,'multiline':False]['text':'   %foo = aten::add_(%foo, %n)','line_number':30,'multiline':False]['text':' becomes','line_number':31,'multiline':False]['text':'   %foo.2 = aten::add(%foo, %n)','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' NOTE: this is NOT SAFE, since it assumes that the LHS is not aliased by','line_number':34,'multiline':False]['text':' another value. This is only to avoid breaking ONNX export; when alias','line_number':35,'multiline':False]['text':' analysis is done we can emit a warning if someone tries to export.','line_number':36,'multiline':False]['text':' create a replacement out of place op','line_number':48,'multiline':False]['text':' copy inputs','line_number':52,'multiline':False]['text':' Create a new output node and replace all uses of self with it','line_number':69,'multiline':False]['text':' namespace','line_number':78,'multiline':False]['text':' Handles special case of binary inplace ops, where the first input node','line_number':80,'multiline':False]['text':' has a lower type precedence than the second input node. When the','line_number':81,'multiline':False]['text':' inplace node is converted to a regular op, this information is lost and','line_number':82,'multiline':False]['text':' the resulting type is based on type precedence, just like regular ops.','line_number':83,'multiline':False]['text':' To avoid this loss of information, we add a cast node before the input','line_number':84,'multiline':False]['text':' node with the higher data type precedence, so that both the input types','line_number':85,'multiline':False]['text':' are the same.','line_number':86,'multiline':False]['text':' An example scenario would be:','line_number':87,'multiline':False]['text':' Before:','line_number':88,'multiline':False]['text':' graph(%0 : Float),','line_number':89,'multiline':False]['text':'        %1 : Half):','line_number':90,'multiline':False]['text':'   # Should result in a Half, but after translation to out-of-place,','line_number':91,'multiline':False]['text':'   # would become a Float b/c Half+Float -> Float.','line_number':92,'multiline':False]['text':'   %4 : Float = onnx::Cast[to=1](%1)','line_number':93,'multiline':False]['text':'   %5 : Float = onnx::Add(%4, %0)','line_number':94,'multiline':False]['text':'   ...','line_number':95,'multiline':False]['text':' After:','line_number':96,'multiline':False]['text':' graph(%0 : Float),','line_number':97,'multiline':False]['text':'        %1 : Half):','line_number':98,'multiline':False]['text':'   %4 : Half = onnx::Cast[to=10](%0)','line_number':99,'multiline':False]['text':'   %5 : Half = onnx::Add(%1, %4)','line_number':100,'multiline':False]['text':'   ...','line_number':101,'multiline':False]['text':' Check type if inplace operation is a binary node','line_number':109,'multiline':False]['text':' namespace jit','line_number':147,'multiline':False]['text':' namespace torch','line_number':148,'multiline':False]