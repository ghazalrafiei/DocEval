['text':' If we dont have kineto available then edge profiler does not','line_number':9,'multiline':False]['text':' work since it relies on Kineto','line_number':10,'multiline':False]['text':' This profiler only profiles KINETO events','line_number':14,'multiline':False]['text':' No GPU_FALLBACK or NVTX','line_number':15,'multiline':False]['text':'
   * @param m is the instance of mobile Module which is being profiled.
   *        Note that this implies that KinetoEdgeCPUProfiler can be used
   *        to profile specific Module (see usage below), unliked ProfilerKineto
   *        which can profile pytorch runtime in arbitrary scope.
   * @param fname is the name of the file to which chrome trace is written.
   * @param report_input_shapes: whether to record shapes of op's inputs.
   * @param with_stack: whether to record model's python stacktrace for the op.
   * @param with_flops: whether to report flops corresponding to the op.
   * @param with_modules: whether to report original python module
   *        hierarchy to which the op belongs.
   * @param events
   * @param adjust_vulkan_timestamps: whether to adjust vulkan timestamps from
   *        query pool to align with cpu event times
   *
   * Usage pattern for this profiler must be as follows:
   *
   * {
   *   KinetoEdgeCPUProfiler(m, filename, args);
   *   m.forward(...);
   * }
   *
   * The reason being that KinetoEdgeCPUProfiler has a dependency on Module
   * and thus it must not outlive it.
   *
   * Thus, when KinetoEdgeCPUProfiler is used as RAII to do profiling
   * within certain scope. In that scope, the captured reference to
   * Module will outlive KinetoEdgeCPUProfiler. This is gauranteed because
   * KinetoEdgeCPUProfiler must be constructed later than Module, on stack.
   *
   * An example of the anti-pattern and wrong usage is:
   *
   * std::shared_ptr<KinetoMobileCPUProfiler> profiler(m, filename, args);
   * m.forward(...);
   *
   * Since KinetoEdgeCPUProfiler object would then be constructed on heap
   * with its lifetime managed manually or via smart pointers.
   ','line_number':16,'multiline':True]['text':'
   * We store a reference to Module to make such dependency explicit, since
   * a Module reference is already stored in a functor.
   ','line_number':85,'multiline':True]['text':' namespace mobile','line_number':117,'multiline':False]['text':' namespace jit','line_number':118,'multiline':False]['text':' namespace torch','line_number':119,'multiline':False]