['text':' removed after using simple type_resolver/obj_loader','line_number':4,'multiline':False]['text':' removed after using simple type_resolver/obj_loader','line_number':8,'multiline':False]['text':' namespace c10','line_number':21,'multiline':False]['text':' TODO (T90180710): Simplify type_resolver and obj_loader when getting','line_number':38,'multiline':False]['text':' bytecode version from model','line_number':39,'multiline':False]['text':'pickle_prefix=','line_number':53,'multiline':True]['text':'tensor_prefix=','line_number':54,'multiline':True]['text':'********************* Bytecode *********************','line_number':68,'multiline':True]['text':' Forward declare','line_number':70,'multiline':False]['text':'********************* Operator Version *********************','line_number':143,'multiline':True]['text':' Forward Declare','line_number':146,'multiline':False]['text':'********************* Operators and Info *********************','line_number':173,'multiline':True]['text':' Forward declare','line_number':175,'multiline':False]['text':' A function to retrieve the root (top level) operators of a model and their
 * corresponding compatibility info. These root operators can call other
 * operators within them (traced ops), and a root op can call many different
 * traced ops depending on internal code paths in the root op. These traced ops
 * are not returned by this function. Those operators are abstracted into the
 * runtime as an implementation detail (and the traced ops themselves can also
 * call other operators) making retrieving them difficult and their value from
 * this api negligible since they will differ between which runtime version the
 * model is run on. Because of this, there is a false positive this api can't
 * prevent in a compatibility usecase. All the root ops of a model are present
 * in a target runtime, but not all the traced ops are which prevents a model
 * from being able to run.
 *','line_number':202,'multiline':True]['text':' loop over all the functions in the bytecode','line_number':227,'multiline':False]['text':' descend to the operators list','line_number':229,'multiline':False]['text':' grab name','line_number':236,'multiline':False]['text':' grab schema size','line_number':244,'multiline':False]['text':' no schema information use default','line_number':247,'multiline':False]['text':'********************* Get Type Table *********************','line_number':255,'multiline':True]['text':' Forward declare','line_number':257,'multiline':False]['text':' Get deduplicate type table given bytecode, and each string is a atomic type,','line_number':285,'multiline':False]['text':' like str, Tensor and etc. For example,','line_number':286,'multiline':False]['text':' input: "Dict[int, Tuple[Tensor, Tensor, Tensor]]"','line_number':287,'multiline':False]['text':' output: {Dict, int, Tuple, Tensor}','line_number':288,'multiline':False]['text':' To avoid parsing same type twice, declare $parsed_type_names_records and','line_number':292,'multiline':False]['text':' use type name (string, ex: "Dict[int, Tuple[Tensor, Tensor, Tensor]]") as','line_number':293,'multiline':False]['text':' the hash to record which types are parsed.','line_number':294,'multiline':False]['text':' type_table is a list of IValue, and each IValue is a string,','line_number':303,'multiline':False]['text':' for example: "Dict[int, Tuple[Tensor, Tensor, Tensor]]"','line_number':304,'multiline':False]['text':'********************* Compatibility Checker *********************','line_number':319,'multiline':True]['text':' Check that the models bytecode version is less than or equal to','line_number':354,'multiline':False]['text':' kMaxSupportedBytecodeVersion from the runtime','line_number':355,'multiline':False]['text':' Check type table','line_number':377,'multiline':False]['text':' Check operators','line_number':388,'multiline':False]['text':' Check if operator not present in runtime','line_number':395,'multiline':False]['text':' If the runtime op has no schema information its a false alarm and isn't','line_number':405,'multiline':False]['text':' actually useable','line_number':406,'multiline':False]['text':' Check if the model operator has schema information. If it doesn't','line_number':414,'multiline':False]['text':' then the model is from a bytecode version < 6 and we are done. If the','line_number':415,'multiline':False]['text':' model has more args than the runtime, then the runtime can't know','line_number':416,'multiline':False]['text':' what to do so we aren't compatible. If the runtime has more args than','line_number':417,'multiline':False]['text':' the model then we can just use default values and be fine.','line_number':418,'multiline':False]['text':' Check Operator Versions','line_number':434,'multiline':False]['text':' namespace jit','line_number':451,'multiline':False]['text':' namespace torch','line_number':452,'multiline':False]