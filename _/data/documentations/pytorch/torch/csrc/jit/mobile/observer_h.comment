['text':' TODO: Kimish','line_number':39,'multiline':False]['text':' If we launch a thread such as for at::launch, interepter continuation','line_number':40,'multiline':False]['text':' and if the caching allocator is enabled in the base thread','line_number':41,'multiline':False]['text':' then, in order to propagate this information, that is caching allocator','line_number':42,'multiline':False]['text':' is enabled, across thread boundaries we can use the mechanism provided','line_number':43,'multiline':False]['text':' by ThreadLocalDebugInfo','line_number':44,'multiline':False]['text':' Once the thread local MobileDebugInfo is accessible in the launched','line_number':45,'multiline':False]['text':' thread, it can be accessed in that thread and that thread can set','line_number':46,'multiline':False]['text':' its own thread local CachingAllocatorInfo.','line_number':47,'multiline':False]['text':' However, we cannot expect every launched thread to extract and set','line_number':48,'multiline':False]['text':' its own thread local copy of CachingAllocatorInfo.','line_number':49,'multiline':False]['text':' But this can be done in lite interpreter, where in the run method','line_number':50,'multiline':False]['text':' it can do info =','line_number':51,'multiline':False]['text':' c10::ThreadLocalDebugInfo::get(c10::DebugInfoKind::MOBILE_RUNTIME_INFO))','line_number':52,'multiline':False]['text':' .get_caching_allocator_info();','line_number':53,'multiline':False]['text':' GetThreadLocalCachingAllocatorInfo() = info;','line_number':54,'multiline':False]['text':' Other option is to have MobileDebugInfo itself be the place where thread','line_number':55,'multiline':False]['text':' local copy of CachingAllocatorInfo is stored. Then','line_number':56,'multiline':False]['text':' DefaultMobileCPUAllocator inspects this to decide if to use','line_number':57,'multiline':False]['text':' CachingAllocator. However, current lite interpreter does not support FORK,','line_number':58,'multiline':False]['text':' thus from the run method of lite interpreter we are not really gonna launch','line_number':59,'multiline':False]['text':' another instance of lite interpreter in a different thread. So for now not','line_number':60,'multiline':False]['text':' getting bothered about passing CachingAllocatorInfo across thread','line_number':61,'multiline':False]['text':' boundaries. c10::CachingAllocatorInfo caching_allocator_info;','line_number':62,'multiline':False]['text':' key: filename, value: file content','line_number':84,'multiline':False]['text':' namespace torch','line_number':110,'multiline':False]