['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':10,'multiline':False]['text':' private/unstable api. sets the initial execution mode','line_number':46,'multiline':False]['text':' will not affect executor if there is an existing executor','line_number':47,'multiline':False]['text':' created for this function','line_number':48,'multiline':False]['text':' private/unstable api. sets flag of whether or not to ignore amp.','line_number':52,'multiline':False]['text':' will not affect executor if there is an existing executor','line_number':53,'multiline':False]['text':' created for this function','line_number':54,'multiline':False]['text':' if this isn't yet defined, run its method_creator function','line_number':59,'multiline':False]['text':' This provides the number of specializations','line_number':128,'multiline':False]['text':' (Must be last entry)','line_number':129,'multiline':False]['text':' The original, non-optimized graph','line_number':137,'multiline':False]['text':' for debugging and for inlining','line_number':138,'multiline':False]['text':' allows users to specify Simple/Profiling Executor for function','line_number':140,'multiline':False]['text':' TODO: add more executors','line_number':141,'multiline':False]['text':' if invoked on a graph that has already traced through amp','line_number':144,'multiline':False]['text':' don't invoke amp pass','line_number':145,'multiline':False]['text':' Optimized graph, computed lazily. Used for inlining.','line_number':147,'multiline':False]['text':' GraphFunctions are invokable from multiple threads, so this lock needs to','line_number':151,'multiline':False]['text':' be held when we're initializing graph executor for the first time or','line_number':152,'multiline':False]['text':' computing the optimized graph. We're using reentrant mutex so that we don't','line_number':153,'multiline':False]['text':' need to worry about causing a deadlock by calling one method from another','line_number':154,'multiline':False]['text':' (e.g. optimized_graph() from get_executor()).','line_number':155,'multiline':False]['text':' executor_[0] - autocast off','line_number':158,'multiline':False]['text':' executor_[1] - autocast cpu on','line_number':159,'multiline':False]['text':' executor_[2] - autocast gpu on','line_number':160,'multiline':False]['text':' executor_[3] - autocast cpu & gpu on','line_number':161,'multiline':False]['text':' an optional function that actually creates the method when','line_number':165,'multiline':False]['text':' ensure_defined() is called. This is used by the compiler so','line_number':166,'multiline':False]['text':' that it can construct methods out of order','line_number':167,'multiline':False]['text':' if absent, then we generate a default schema based on the graph','line_number':170,'multiline':False]['text':' mutable because getSchema caches the default schema if one is requested','line_number':171,'multiline':False]['text':' before a call to setSchema','line_number':172,'multiline':False]['text':' Short hands for dynamic_cast<GraphFunction*>.','line_number':176,'multiline':False]['text':' namespace torch::jit','line_number':181,'multiline':False]