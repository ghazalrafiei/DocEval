['text':' A method in a module, e.g. f in:','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' class M(ScriptModule):','line_number':15,'multiline':False]['text':'   @script_method','line_number':16,'multiline':False]['text':'   def f(self, x):','line_number':17,'multiline':False]['text':'     ...','line_number':18,'multiline':False]['text':' Note: because Method/Module are exposed to python these','line_number':19,'multiline':False]['text':' classes use python method naming conventions','line_number':20,'multiline':False]['text':' the module that contains this method.','line_number':24,'multiline':False]['text':' Run method async. Invocation on this function would invokes a JIT','line_number':35,'multiline':False]['text':' interpreter that executes ops inline, one by one, on caller's thread. A','line_number':36,'multiline':False]['text':' model can utilize async op, i.e. `fork`, to launch an asynchronous task','line_number':37,'multiline':False]['text':' which will be launched on provided `taskLauncher`.','line_number':38,'multiline':False]['text':' Methods are uniqued onwed by a single module. This raw pointer allows','line_number':67,'multiline':False]['text':' looking up the module.','line_number':68,'multiline':False]['text':' Underlying unbound function','line_number':71,'multiline':False]['text':' We once had a `script::` namespace that was deleted. This is for backcompat','line_number':76,'multiline':False]['text':' of the public API; new code should not use this type alias.','line_number':77,'multiline':False]['text':' namespace script','line_number':79,'multiline':False]['text':' namespace torch::jit','line_number':81,'multiline':False]