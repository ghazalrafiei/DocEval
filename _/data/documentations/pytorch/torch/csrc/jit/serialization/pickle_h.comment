['text':'/ Pickle an IValue by calling a function to handle writing the data.','line_number':13,'multiline':False]['text':'/','line_number':14,'multiline':False]['text':'/ `writer` is a function that takes in a pointer to a chunk of memory and its','line_number':15,'multiline':False]['text':'/ size and consumes it.','line_number':16,'multiline':False]['text':'/','line_number':17,'multiline':False]['text':'/ See `jit::pickle` for more details.','line_number':18,'multiline':False]['text':'/ Save a `torch::IValue` in a format compatible with Python's `pickle` module','line_number':24,'multiline':False]['text':'/','line_number':25,'multiline':False]['text':'/ If present, `tensor_table` is a pointer to a table in which tensors that','line_number':26,'multiline':False]['text':'/ are contained within `ivalue` are stored, and the bytes returned by the','line_number':27,'multiline':False]['text':'/ pickler will only include references to these tensors in the table. This can','line_number':28,'multiline':False]['text':'/ be used to keep the binary blob size small.','line_number':29,'multiline':False]['text':'/ If not provided, tensors are stored in the same byte stream as the pickle','line_number':30,'multiline':False]['text':'/ data, similar to `torch.save()` in eager Python.','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ Pickled values can be loaded in Python and C++:','line_number':33,'multiline':False]['text':'/ \rst','line_number':34,'multiline':False]['text':'/ .. code-block:: cpp','line_number':35,'multiline':False]['text':'/','line_number':36,'multiline':False]['text':'/  torch::IValue float_value(2.3);','line_number':37,'multiline':False]['text':'/','line_number':38,'multiline':False]['text':'/  // TODO: when tensors are stored in the pickle, delete this','line_number':39,'multiline':False]['text':'/  std::vector<at::Tensor> tensor_table;','line_number':40,'multiline':False]['text':'/  auto data = torch::jit::pickle(float_value, &tensor_table);','line_number':41,'multiline':False]['text':'/','line_number':42,'multiline':False]['text':'/  std::vector<torch::IValue> ivalues =','line_number':43,'multiline':False]['text':'/      torch::jit::unpickle(data.data(), data.size());','line_number':44,'multiline':False]['text':'/','line_number':45,'multiline':False]['text':'/ .. code-block:: python','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/   values = torch.load('data.pkl')','line_number':48,'multiline':False]['text':'/   print(values)','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/ \endrst','line_number':51,'multiline':False]['text':'/ Save a `torch::IValue` in a format that can be loaded by both','line_number':56,'multiline':False]['text':'/ `torch::pickle_load` in C++ and `torch.load` in Python.','line_number':57,'multiline':False]['text':'/ Deserialize a `torch::IValue` from bytes produced by either','line_number':60,'multiline':False]['text':'/ `torch::pickle_save` in C++ or `torch.save` in Python','line_number':61,'multiline':False]['text':'/ `reader` is a function that takes in a size to read from some pickled','line_number':64,'multiline':False]['text':'/ binary. `reader` should remember where it last read, and return','line_number':65,'multiline':False]['text':'/ the number of bytes read.','line_number':66,'multiline':False]['text':'/ See `torch::pickle` for details.','line_number':67,'multiline':False]['text':'/ type_resolver is used to resolve any JIT type based on type str','line_number':68,'multiline':False]['text':'/ Decode a chunk of memory containing pickled data into its `torch::IValue`s.','line_number':77,'multiline':False]['text':'/','line_number':78,'multiline':False]['text':'/ If any `torch::IValue`s in the pickled data are `Object`s, then a','line_number':79,'multiline':False]['text':'/ `class_resolver` function must be provided.','line_number':80,'multiline':False]['text':'/','line_number':81,'multiline':False]['text':'/ See `torch::pickle` for details.','line_number':82,'multiline':False]['text':'/ Decode a chunk of memory containing pickled data into its `torch::IValue`s.','line_number':91,'multiline':False]['text':'/','line_number':92,'multiline':False]['text':'/ If any `torch::IValue`s in the pickled data are `Object`s, then a','line_number':93,'multiline':False]['text':'/ `class_resolver` function must be provided.','line_number':94,'multiline':False]['text':'/','line_number':95,'multiline':False]['text':'/ See `torch::pickle` for details.','line_number':96,'multiline':False]['text':' namespace jit','line_number':106,'multiline':False]['text':' namespace torch','line_number':107,'multiline':False]