['text':'
 * This is the API via which backend's preprocess function will obtain debug
 * handles corresponding to the nodes of the graph for the lowered methods of
 * the module.
 * Implementation: Given graph
 * For each node of the graph, request debug handle via debug_info_recorder.
 * debug_info_recorder returns the next debug handle and record node with
 * corresponding debug info, such as source range and inlined callstack.
 *
 * Backend code for lowering module, preprocess, calls
 * generate_debug_handles(graph)) which will return debug handles corresponding
 * to the Node* of the said graph.
 *
 * In to_backend, after lowering, stopRecording is called on
 * BackendModuleDebugInfoRecorder: It will extract debug map. This map gets
 * stored as part of the lowered module.
 * During serialization, specifically for bytecode serialization, check is made
 * to see if the model being serialized has any lowered modules. If so
 * corresponding debug map is extracted and serialized.
 ','line_number':19,'multiline':True]['text':' TODO: Look into using DepthFirstGraphNodeIterator','line_number':46,'multiline':False]['text':' At the moment it takes non-const graph but maybe we can make it','line_number':47,'multiline':False]['text':' general such that it can work with both.','line_number':48,'multiline':False]['text':' namespace','line_number':70,'multiline':False]['text':' TODO: Validate method_compile_spec.','line_number':104,'multiline':False]['text':' Clone orig_module to make sure backend transformation is','line_number':106,'multiline':False]['text':' functional.','line_number':107,'multiline':False]['text':' Generate LoweredModule.','line_number':111,'multiline':False]['text':'shouldMangle=','line_number':115,'multiline':True]['text':' Generate WrapperModule.','line_number':117,'multiline':False]['text':'shouldMangle=','line_number':121,'multiline':True]['text':' 1. Initialized debug info recorder.','line_number':123,'multiline':False]['text':' 2. Later call debug_info_recorder.stopRecording() to gather','line_number':124,'multiline':False]['text':'    recorded debug info and save it in __backend_debug_info.','line_number':125,'multiline':False]['text':' Generate attributes.','line_number':128,'multiline':False]['text':' This is the preprocessed module.','line_number':129,'multiline':False]['text':' For backwards compatibility, for backends that implement preprocessing in','line_number':130,'multiline':False]['text':' the backend interface rather than as a separate function, we just pass','line_number':131,'multiline':False]['text':' the cloned original Module.','line_number':132,'multiline':False]['text':'is_param=','line_number':143,'multiline':True]['text':' This is for the method_compile_spec passed in to to_<backend> or','line_number':145,'multiline':False]['text':' loaded from an exported model.','line_number':146,'multiline':False]['text':'is_param=','line_number':151,'multiline':True]['text':' This is a pointer to a backend instance that is used to access','line_number':153,'multiline':False]['text':' compile and execute functions.','line_number':154,'multiline':False]['text':' This is the list of opaque backend handles returned by','line_number':161,'multiline':False]['text':' backend.compile.','line_number':162,'multiline':False]['text':'is_param=','line_number':168,'multiline':True]['text':' Methods.','line_number':170,'multiline':False]['text':' This is a helper function for creating a new instance of the','line_number':172,'multiline':False]['text':' backend class.','line_number':173,'multiline':False]['text':' Helper function to expose backend.is_available() to Module generation code.','line_number':183,'multiline':False]['text':' Assumes self.__backend exists (i.e. __create_backend() has already been','line_number':184,'multiline':False]['text':' invoked).','line_number':185,'multiline':False]['text':' backend_debug_info_class is an instance of BackendDebugInfo that','line_number':193,'multiline':False]['text':' stores debug information.','line_number':194,'multiline':False]['text':' The purpose of this class is to make the debug information available','line_number':195,'multiline':False]['text':' at model saving time for serializing it outside of the lowered module,','line_number':196,'multiline':False]['text':' while still tying it to the module's lifetime (so it gets destroyed along','line_number':197,'multiline':False]['text':' with it).','line_number':198,'multiline':False]['text':' Whereas this information is not serialized as part of the lowered','line_number':199,'multiline':False]['text':' module, we still need to provide a valid instance of the','line_number':200,'multiline':False]['text':' BackendDebugInfo class when the lowered module is deserialized.','line_number':201,'multiline':False]['text':' Since the deserialized modules does not need this information,','line_number':202,'multiline':False]['text':' we create a "dummy" instance with no extra code dependencies (to avoid','line_number':203,'multiline':False]['text':' overhead) when the backend is created in __setstate__.','line_number':204,'multiline':False]['text':' getstate and setstate are for serialization/deserialization of','line_number':230,'multiline':False]['text':' the LoweredModule.','line_number':231,'multiline':False]['text':' setstate is in charge of initializing self.__backend by invoking','line_number':232,'multiline':False]['text':' __create_backend().','line_number':233,'multiline':False]['text':' This loop generates one method on the LoweredModule for every key','line_number':262,'multiline':False]['text':' in method_compile_spec.','line_number':263,'multiline':False]['text':' Generate the inputs for the function signature (def_inputs) and','line_number':289,'multiline':False]['text':' for passing to backend.execute (fwd_inputs).','line_number':290,'multiline':False]['text':' Skip self since that is only and always present in the','line_number':295,'multiline':False]['text':' signature.','line_number':296,'multiline':False]['text':' If this is a kwarg, it needs to be emitted as keyword=value','line_number':304,'multiline':False]['text':' in the definition and keyword=keyword in the call to','line_number':305,'multiline':False]['text':' backend_execute.','line_number':306,'multiline':False]['text':' Annotate type of the arg','line_number':309,'multiline':False]['text':' If this is not a kwarg, it should be emitted as is in the','line_number':317,'multiline':False]['text':' signature and the call to backend_execute.','line_number':318,'multiline':False]['text':' Annotate type of the arg','line_number':320,'multiline':False]['text':' Generate a comma-delimited list of identifiers to unpack','line_number':327,'multiline':False]['text':' outputs, as well as a list of isinstance checks to make sure','line_number':328,'multiline':False]['text':' the backend returned the types it was supposed to.','line_number':329,'multiline':False]['text':' If the output type is a single element tuple then add an extra comma','line_number':366,'multiline':False]['text':' to ensure the final output maintains this type.','line_number':367,'multiline':False]['text':' If backend is available, call __setstate__ to ensure that the returned','line_number':377,'multiline':False]['text':' Module is ready to run.','line_number':378,'multiline':False]['text':' Otherwise throw a warning indicating that the resulting Module is not','line_number':379,'multiline':False]['text':' ready for execution until is loaded to a device with the backend.','line_number':380,'multiline':False]['text':'create_backend','line_number':386,'multiline':True]['text':' stop debug info recording and get debug_info_map','line_number':396,'multiline':False]['text':' Wrap lowered module to obfuscate custom serialization logic','line_number':403,'multiline':False]['text':' namespace detail','line_number':411,'multiline':False]['text':' namespace jit','line_number':412,'multiline':False]['text':' namespace torch','line_number':413,'multiline':False]