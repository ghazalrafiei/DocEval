['text':' Use debug_handle to throw exception','line_number':7,'multiline':False]['text':' If rethrowing, can push another debug_handle','line_number':15,'multiline':False]['text':' This is useful in couple of scenarios.','line_number':16,'multiline':False]['text':' 1. A submodule is lowered and lite interperter has CallMethod','line_number':17,'multiline':False]['text':'    to lowered module's method. In this case lowered module will throw with','line_number':18,'multiline':False]['text':'    a handle, plus there will be another debug handle corresponding','line_number':19,'multiline':False]['text':'    to the CallMethod node in lite interpreter. Both together give complete','line_number':20,'multiline':False]['text':'    trace. This function allows lite interpreter to rethrow with debug','line_number':21,'multiline':False]['text':'    handle it has for CallMethod.','line_number':22,'multiline':False]['text':' 2. Another scenarios is when lite interperter can make function calls or','line_number':23,'multiline':False]['text':'    the lowered backend also has function call ability. Thus we have','line_number':24,'multiline':False]['text':'    multiple function frames. Now we need a stack of handles to symbolicate','line_number':25,'multiline':False]['text':'    entire stack trace.','line_number':26,'multiline':False]['text':' Stores stack of debug handles.','line_number':35,'multiline':False]['text':' namespace c10','line_number':39,'multiline':False]