['text':' A macro that grabs the GIL, profiling the acquisition time. The average GIL','line_number':14,'multiline':False]['text':' acquisition time will be recorded in RpcAgent's getMetrics().','line_number':15,'multiline':False]['text':' NOLINT','line_number':28,'multiline':False]['text':' PythonTypeResolver that inherits from Script::Resolver to','line_number':30,'multiline':False]['text':' support resolving types together with ScriptTypeParser.','line_number':31,'multiline':False]['text':' unused ','line_number':34,'multiline':True]['text':' unused ','line_number':35,'multiline':True]['text':' unused ','line_number':36,'multiline':True]['text':' unused ','line_number':43,'multiline':True]['text':' explicitly setting PyObject* to nullptr to prevent py::object's dtor to','line_number':63,'multiline':False]['text':' decref on the PyObject again.','line_number':64,'multiline':False]['text':' See Note [Destructing py::object] in python_ivalue.h','line_number':65,'multiline':False]['text':' namespace','line_number':69,'multiline':False]['text':' A thread could hold GIL when calling PythonRpcHandler::getInstance(),','line_number':121,'multiline':False]['text':' meantime another thread could have been doing static data','line_number':122,'multiline':False]['text':' initialization by calling `new PythonRpcHandler()`, inside of which GIL is','line_number':123,'multiline':False]['text':' also required. Static data initialization is thread-safe, so the thread','line_number':124,'multiline':False]['text':' holding the GIL will wait for the other thread to finish static data','line_number':125,'multiline':False]['text':' initializating before going forward. Because the initialization can't','line_number':126,'multiline':False]['text':' proceed without GIL, there is a deadlock. We ask the calling thread to','line_number':127,'multiline':False]['text':' release GIL to avoid this situation.','line_number':128,'multiline':False]['text':' Leaky singleton to avoid module destructor race.','line_number':130,'multiline':False]['text':' Throw a descriptive error message if pyRunFunction_ is already cleaned up.','line_number':143,'multiline':False]['text':' NB: pyDeserialize_ can return an AttributeError if the deserialize() Python','line_number':160,'multiline':False]['text':' function fails. Functions consuming the result needs to handle such error','line_number':161,'multiline':False]['text':' properly.','line_number':162,'multiline':False]['text':' namespace rpc','line_number':199,'multiline':False]['text':' namespace distributed','line_number':200,'multiline':False]['text':' namespace torch','line_number':201,'multiline':False]