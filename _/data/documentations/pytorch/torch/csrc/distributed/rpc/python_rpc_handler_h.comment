['text':' Singleton class provides interface to execute python UDF remote call','line_number':12,'multiline':False]['text':' and deserialize the returned results by running python function','line_number':13,'multiline':False]['text':' in internal_rpc_utilities.','line_number':14,'multiline':False]['text':' The singleton object is constructed at first when RPC agent is','line_number':15,'multiline':False]['text':' constructed, where the python function in','line_number':16,'multiline':False]['text':' torch/distributed/internal_rpc_utils.py are imported only once.','line_number':17,'multiline':False]['text':' Run a pickled Python UDF and return the result py::object','line_number':34,'multiline':False]['text':' Serialized a py::object into a string','line_number':37,'multiline':False]['text':' Deserialize a string into a py::object','line_number':40,'multiline':False]['text':' Check if obj is RemoteException, then throw it','line_number':43,'multiline':False]['text':' Alternative if the caller is already holding the GIL.','line_number':45,'multiline':False]['text':' Check if obj is an RemoteException instance.','line_number':47,'multiline':False]['text':' Explicitly clean up py::objects to avoid segment faults when','line_number':50,'multiline':False]['text':' py::objects with CPython are cleaned up later at program exit','line_number':51,'multiline':False]['text':' See similar issues reported https://github.com/pybind/pybind11/issues/1598','line_number':52,'multiline':False]['text':' and https://github.com/pybind/pybind11/issues/1493','line_number':53,'multiline':False]['text':' Our local tests also caught this segment faults if py::objects are cleaned','line_number':54,'multiline':False]['text':' up at program exit. The explanation is: CPython cleans up most critical','line_number':55,'multiline':False]['text':' utilities before cleaning up PythonRpcHandler singleton, so when','line_number':56,'multiline':False]['text':' PythonRpcHandler singleton cleans up py::objects and call dec_ref(), it','line_number':57,'multiline':False]['text':' will crash.','line_number':58,'multiline':False]['text':' The solution is to clean up py::objects earlier when Rpc agent join().','line_number':59,'multiline':False]['text':' Be note that py::objects can not be cleaned up when Rpc agent is destroyed','line_number':60,'multiline':False]['text':' as well, as Rpc agent is global variable and it will have same issue as','line_number':61,'multiline':False]['text':' PythonRpcHandler.','line_number':62,'multiline':False]['text':' Parse the string to recover the jit_type, this is used for RRef python','line_number':67,'multiline':False]['text':' pickling/unpickling type recovery. The type string inference rule is as','line_number':68,'multiline':False]['text':' follows:','line_number':69,'multiline':False]['text':' 1. first try to parse if this is primitive types.','line_number':70,'multiline':False]['text':'    i.e. TensorType, IntType, PyObjectType, etc.','line_number':71,'multiline':False]['text':' 2. if not primitive type, we query the python_cu to see if it is a','line_number':72,'multiline':False]['text':'    class type or interface type registered in python','line_number':73,'multiline':False]['text':' We use a ScriptTypeParser instance with custom PythonTypeResolver','line_number':74,'multiline':False]['text':' to resolve types according to the above rules.','line_number':75,'multiline':False]['text':' Return a set of Python functions for RRef helpers.','line_number':78,'multiline':False]['text':' Return a set of Python functions to retrieve the type of the object','line_number':81,'multiline':False]['text':' referenced by a given RRef.','line_number':82,'multiline':False]['text':' Ref to `torch.distributed.rpc.internal._run_function`.','line_number':95,'multiline':False]['text':' Ref to `torch.distributed.rpc.internal.serialize`.','line_number':98,'multiline':False]['text':' Ref to `torch.distributed.rpc.internal.deserialize`.','line_number':101,'multiline':False]['text':' Ref to 'torch.distributed.rpc.internal._handle_exception'','line_number':104,'multiline':False]['text':' Python functions for RRef proxy','line_number':107,'multiline':False]['text':' Ref to 'torch.distributed.rpc.api._rref_typeof_on_'','line_number':110,'multiline':False]['text':' Shared ptr to python compilation unit in jit, it is constructed in python','line_number':113,'multiline':False]['text':' side (see _python_cu = torch._C.CompilationUnit() in jit/__init__.py)','line_number':114,'multiline':False]['text':' and imported in C++ (see get_python_cu() in','line_number':115,'multiline':False]['text':' csrc/jit/python/pybind_utils.h). We import the compilation unit here only','line_number':116,'multiline':False]['text':' once for less cost and thread safety.','line_number':117,'multiline':False]['text':' jit type parser to parse type_str back to TypePtr for RRef type','line_number':120,'multiline':False]['text':' recovery when pickling and unpickling RRef','line_number':121,'multiline':False]['text':' Indicates whether or not we have properly initialized the handler.','line_number':124,'multiline':False]['text':' Lock to protect initialization.','line_number':127,'multiline':False]['text':' namespace rpc','line_number':131,'multiline':False]['text':' namespace distributed','line_number':132,'multiline':False]['text':' namespace torch','line_number':133,'multiline':False]