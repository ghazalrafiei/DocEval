['text':' Check if the profiler is enabled','line_number':36,'multiline':False]['text':' Add event list to the thread local profiler.','line_number':54,'multiline':False]['text':' namespace','line_number':58,'multiline':False]['text':' Attempt to parse for error string given by makeRPCError, otherwise return','line_number':67,'multiline':False]['text':' unknown error.','line_number':68,'multiline':False]['text':' Note that this function expects errors formatted with makeRPCError().','line_number':69,'multiline':False]['text':' Parse the RPCErrorType.','line_number':73,'multiline':False]['text':' Indicates error was not formatted correctly.','line_number':78,'multiline':False]['text':' Need to reverse the device map for the backward pass of distributed','line_number':178,'multiline':False]['text':' autograd.','line_number':179,'multiline':False]['text':' Attach 'recv' autograd function.','line_number':185,'multiline':False]['text':' Process remotely profiled events.','line_number':208,'multiline':False]['text':' Helper for wireDeserialize() below.','line_number':251,'multiline':False]['text':'','line_number':252,'multiline':False]['text':' The format we use below looks like:','line_number':253,'multiline':False]['text':'    section_name_1 size_1\n','line_number':254,'multiline':False]['text':'    section_name_2 size_2\n','line_number':255,'multiline':False]['text':'    ..','line_number':256,'multiline':False]['text':'    \n','line_number':257,'multiline':False]['text':'    [sections in order]','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' Sections themselves include:','line_number':260,'multiline':False]['text':'    - "payload" - the payload bits','line_number':261,'multiline':False]['text':'    - "meta"    - metadata for the unpickler','line_number':262,'multiline':False]['text':'    - "0" ...   - tensor sections for the unpickler','line_number':263,'multiline':False]['text':'','line_number':264,'multiline':False]['text':' Note that per the header comments, the format is subject to change,','line_number':265,'multiline':False]['text':' and is best used for rpcs, rather than persistent disk storage.','line_number':266,'multiline':False]['text':' The only "correct" exit point.','line_number':276,'multiline':False]['text':' Parse name','line_number':280,'multiline':False]['text':' past the ' '','line_number':290,'multiline':False]['text':' Parse size','line_number':292,'multiline':False]['text':' past the '\n'','line_number':302,'multiline':False]['text':' namespace','line_number':321,'multiline':False]['text':' Sanity-check: If the majority of bits don't need to go over the wire,','line_number':325,'multiline':False]['text':' force a clone(). Some Tensors are effectively small views, only using','line_number':326,'multiline':False]['text':' ~1% of the underlying Storage.','line_number':327,'multiline':False]['text':' avoid throwing below.','line_number':330,'multiline':False]['text':' Construct WritableTensorData for each tensor in the pickler tensorData','line_number':383,'multiline':False]['text':' Since tensorData is in function scope, and getWritableTensorData just','line_number':384,'multiline':False]['text':' record the tensors, the data() pointers stay valid for CPU tensors','line_number':385,'multiline':False]['text':' Note that RPC serde doesn't support CUDA tensors yet, if we should','line_number':386,'multiline':False]['text':' support CUDA tensor, we need to be careful since getWritableTensorData','line_number':387,'multiline':False]['text':' converts CUDA tensor to cpu and data() might get destructed as we go','line_number':388,'multiline':False]['text':' out of scope of this loop.','line_number':389,'multiline':False]['text':' No need to pass typeResolver here, as it always processes string and','line_number':458,'multiline':False]['text':' tensors only','line_number':459,'multiline':False]['text':' Add size of the additional payload','line_number':478,'multiline':False]['text':' Read the additional payload remove it from the payload.','line_number':492,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':493,'multiline':False]['text':' Gather all events into a vector','line_number':529,'multiline':False]['text':' find __start_profile event','line_number':535,'multiline':False]['text':' We should always find __start_profile.','line_number':545,'multiline':False]['text':' Deserialized events don't have the corresponding CUDA events, making it','line_number':550,'multiline':False]['text':' impossible to use cudaEventElapsedTime the receiving end. To avoid this,','line_number':551,'multiline':False]['text':' find all push/pop pairs of CUDA events and set the corresponding CUDA','line_number':552,'multiline':False]['text':' time to zero for the push event and to the elapsed time for the pop','line_number':553,'multiline':False]['text':' event, to be used later for the elapsed CUDA time computation.','line_number':554,'multiline':False]['text':' namespace rpc','line_number':582,'multiline':False]['text':' namespace distributed','line_number':583,'multiline':False]['text':' namespace torch','line_number':584,'multiline':False]