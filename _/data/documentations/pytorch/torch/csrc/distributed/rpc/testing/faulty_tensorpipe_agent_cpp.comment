['text':' Since we can only pass strings corresponding to the Message Types from the','line_number':38,'multiline':False]['text':' python tests, we must parse the list of strings and resolve the actual','line_number':39,'multiline':False]['text':' types. We will then check this list of types in the send function to','line_number':40,'multiline':False]['text':' determine whether we should fail or not.','line_number':41,'multiline':False]['text':' unused ','line_number':68,'multiline':True]['text':' We only fail control messages that have been specified by the test case.','line_number':69,'multiline':False]['text':' For all other messages, we just send them without any failures.','line_number':70,'multiline':False]['text':' This send function checks the failMessageCountMap_ to check whether','line_number':75,'multiline':False]['text':' we must fail the next send. If the send must be failed, we set an error','line_number':76,'multiline':False]['text':' on the returned future immediately and increment the counter in the map,','line_number':77,'multiline':False]['text':' otherwise we just call the TensorPipeAgent send.','line_number':78,'multiline':False]['text':' Sleep for the specified delay for the message.','line_number':107,'multiline':False]['text':' Return true if the input message type is in the messageTypesToFail_ list','line_number':115,'multiline':False]['text':' Lazily constructed map that returns string to message type mapping','line_number':128,'multiline':False]['text':' namespace rpc','line_number':149,'multiline':False]['text':' namespace distributed','line_number':150,'multiline':False]['text':' namespace torch','line_number':151,'multiline':False]['text':' USE_TENSORPIPE','line_number':153,'multiline':False]