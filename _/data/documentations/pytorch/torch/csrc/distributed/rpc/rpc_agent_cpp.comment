['text':' WorkerInfo needs to be registered exactly once. Since the op registration','line_number':9,'multiline':False]['text':' happens in libtorch_python we wrap the class registration in a helper to','line_number':10,'multiline':False]['text':' make sure that if there's multiple copies of Python such as used in','line_number':11,'multiline':False]['text':' torch::deploy we only ever register it once.','line_number':12,'multiline':False]['text':' Large Time Duration for waiting on the condition variable until the map is','line_number':43,'multiline':False]['text':' population. Cannot use','line_number':44,'multiline':False]['text':' std::chrono::time_point<std::chrono::steady_clock>::max() due to a known','line_number':45,'multiline':False]['text':' overflow-related bug.','line_number':46,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.PureVirtualCall)','line_number':80,'multiline':False]['text':' retryCount ','line_number':99,'multiline':True]['text':' retryCount ','line_number':104,'multiline':True]['text':' Stores the retried futures so callbacks can be added outside the lock.','line_number':115,'multiline':False]['text':' Stores futures and exception messages for non-retriable error-ed futures.','line_number':119,'multiline':False]['text':' We must continue sleeping as long as the RPC Agent is running and when','line_number':126,'multiline':False]['text':' either the Retry Map is empty, or when the Retry Map's earliest expiring','line_number':127,'multiline':False]['text':' RPC is set to be retried in the future.','line_number':128,'multiline':False]['text':' Updating these since something may have been added to the map while this','line_number':143,'multiline':False]['text':' thread was sleeping.','line_number':144,'multiline':False]['text':' We iterate through all the RPC's set to be retried at the current','line_number':148,'multiline':False]['text':' timepoint, resend those RPC's, and add the RPC's and their futures to','line_number':149,'multiline':False]['text':' a list to later attach callbacks. These callbacks either schedule','line_number':150,'multiline':False]['text':' the RPC for a future retry or marks it with success/error depending on','line_number':151,'multiline':False]['text':' the outcome of the current send. Then, we clean up the rpcRetryMap_.','line_number':152,'multiline':False]['text':' no increment ','line_number':154,'multiline':True]['text':' send() will throw an exception if an RPC is retried while the agent is','line_number':158,'multiline':False]['text':' shutdown. We must catch this exception and mark the original future','line_number':159,'multiline':False]['text':' with an error, since this RPC never succeeded and can no longer be','line_number':160,'multiline':False]['text':' retried.','line_number':161,'multiline':False]['text':' We must store the futures and exception messages here and only mark','line_number':166,'multiline':False]['text':' the futures with an error after releasing the lock.','line_number':167,'multiline':False]['text':' A callback will be attached to all futures for the retries in this','line_number':171,'multiline':False]['text':' list. Thus they will either be rescheduled for future retries or they','line_number':172,'multiline':False]['text':' will be marked as complete. We can safely delete them from the retry','line_number':173,'multiline':False]['text':' Map for the current timepoint.','line_number':174,'multiline':False]['text':' If there are no more RPC's set to be retried at the current timepoint,','line_number':178,'multiline':False]['text':' we can remove the corresponding unordered_set from the retry map.','line_number':179,'multiline':False]['text':' We attach callbacks to the futures outside of the lock to prevent','line_number':185,'multiline':False]['text':' potential deadlocks.','line_number':186,'multiline':False]['text':' For exceptions caught while retrying RPC's above, we set those futures','line_number':200,'multiline':False]['text':' with errors now that we have released the lock.','line_number':201,'multiline':False]['text':' Adding one since we want to include the original send as well and not','line_number':217,'multiline':False]['text':' just the retry count.','line_number':218,'multiline':False]['text':' If the RPC Agent has shutdown, we cannot retry messages. Thus we mark','line_number':221,'multiline':False]['text':' the future with an error since the RPC was never completed','line_number':222,'multiline':False]['text':' successfully.','line_number':223,'multiline':False]['text':' If the previous future completed with an error and we haven't','line_number':230,'multiline':False]['text':' completed maxRetries send attempts, we move the earliestRpc','line_number':231,'multiline':False]['text':' struct to a new time point in the retry map (effectively','line_number':232,'multiline':False]['text':' scheduling it for a future retry.)','line_number':233,'multiline':False]['text':' The retry thread waits for the map to be populated. Thus we notify','line_number':238,'multiline':False]['text':' once an item has been added.','line_number':239,'multiline':False]['text':' We have completed maxRetries send attempts. We're now marking','line_number':242,'multiline':False]['text':' the future with an error.','line_number':243,'multiline':False]['text':' This try succeeded, so we can make the original future as complete.','line_number':252,'multiline':False]['text':' Use compare_exchange so that we don't actually perform the exchange if','line_number':280,'multiline':False]['text':' that would trigger the assert just below. See:','line_number':281,'multiline':False]['text':' https://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange','line_number':282,'multiline':False]['text':' We can't use compare_exchange (we don't know what value to expect) but we','line_number':288,'multiline':False]['text':' don't need to, as the only case that would trigger the assert is if we','line_number':289,'multiline':False]['text':' replaced nullptr with nullptr, which we can just do as it has no effect.','line_number':290,'multiline':False]['text':' unused ','line_number':315,'multiline':True]['text':' Default implementation has no device map.','line_number':316,'multiline':False]['text':' By default the agent is CPU-only.','line_number':321,'multiline':False]['text':' This would later include more info other than metrics for eg: may include
     stack traces for the threads owned by the agent ','line_number':327,'multiline':True]['text':' Default implementation: return getMetrics().','line_number':329,'multiline':False]['text':' namespace rpc','line_number':338,'multiline':False]['text':' namespace distributed','line_number':339,'multiline':False]['text':' namespace torch','line_number':340,'multiline':False]