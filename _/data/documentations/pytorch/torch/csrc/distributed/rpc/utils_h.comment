['text':' Parse error message and return RPCErrorType based on the message.','line_number':15,'multiline':False]['text':' Create an error string given the error description and error type','line_number':17,'multiline':False]['text':' Given an RPC message received as a request over the wire, deserialize it into','line_number':22,'multiline':False]['text':' the appropriate 'RpcCommandBase' type.','line_number':23,'multiline':False]['text':' Given an RPC message received as a response over the wire, deserialize it','line_number':27,'multiline':False]['text':' into the appropriate 'RpcCommandBase' type, if the response is','line_number':28,'multiline':False]['text':' FORWARD_AUTOGRAD_RESP type, unwrap it, attach recvBackward() functions','line_number':29,'multiline':False]['text':' to received tensors and set the wrappedMsgType to its wrapped message type.','line_number':30,'multiline':False]['text':' Given an RPC message received as a response over the wire, deserialize it','line_number':35,'multiline':False]['text':' into the valid IValue if the message is for a script rpc result,','line_number':36,'multiline':False]['text':' otherwise deserialize it into dummy none ivalue that will never be used.','line_number':37,'multiline':False]['text':' In this deserialization, we also attach recv rpc backward functions if','line_number':38,'multiline':False]['text':' needed.','line_number':39,'multiline':False]['text':' Note: format is subject to change and intended for RPCs.','line_number':45,'multiline':False]['text':' For saving persistently to disk, use torch::save().','line_number':46,'multiline':False]['text':' We use vector<char> as the type of blobs because it's what rpc::Message uses','line_number':55,'multiline':False]['text':' for its payload, even though it has the disadvantage that it cannot be','line_number':56,'multiline':False]['text':' allocated with uninitialized memory: it is always zeroed out.','line_number':57,'multiline':False]['text':' Some Tensors are effectively views of larger Tensors, where only a small','line_number':59,'multiline':False]['text':' subset of the Storage data is referenced. This normally is good and avoids','line_number':60,'multiline':False]['text':' copies when kept locally, but if we naively push the whole Storage over the','line_number':61,'multiline':False]['text':' wire, we'll end up with excess network traffic. This change clones tensors if','line_number':62,'multiline':False]['text':' we'd save at least half the data, and over a minimum hurdle.','line_number':63,'multiline':False]['text':' Combines an original payload and wrapped payload into the original payload.','line_number':67,'multiline':False]['text':' Used to generate the overall payload for the wrapped RPC.','line_number':68,'multiline':False]['text':' Reads the additional, wrapped payload from a wrapped RPC off of the input','line_number':73,'multiline':False]['text':' payload. After this, payload will contain the payload of the original,','line_number':74,'multiline':False]['text':' un-wrapped RPC.','line_number':75,'multiline':False]['text':' Takes a list of events from autograd profiler and populates them into','line_number':80,'multiline':False]['text':' profiledEvents to be carried over RPC.','line_number':81,'multiline':False]['text':' namespace rpc','line_number':88,'multiline':False]['text':' namespace distributed','line_number':89,'multiline':False]['text':' namespace torch','line_number':90,'multiline':False]