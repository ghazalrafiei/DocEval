['text':'``)");','line_number':75,'multiline':False]['text':' The following C++ constants need to be cast so they can be used from','line_number':77,'multiline':False]['text':' python.','line_number':78,'multiline':False]['text':' pybind11 suggests the syntax  .def(hash(py::self)), with the','line_number':106,'multiline':False]['text':' unqualified "hash" function call. However the','line_number':107,'multiline':False]['text':' argument-dependent lookup for the function "hash" doesn't get','line_number':108,'multiline':False]['text':' triggered in this context because it conflicts with the struct','line_number':109,'multiline':False]['text':' c10::hash, so  we need to use the qualified name','line_number':110,'multiline':False]['text':' py::detail::hash, which unfortunately is in a detail namespace.','line_number':111,'multiline':False]['text':' NOLINT','line_number':112,'multiline':False]['text':' __getstate__ ','line_number':121,'multiline':True]['text':' __setstate__ ','line_number':125,'multiline':True]['text':' not releasing GIL here to avoid context switch on getters','line_number':237,'multiline':False]['text':' not releasing GIL here to avoid context switch on getters','line_number':253,'multiline':False]['text':' not releasing GIL here to avoid context switch on getters','line_number':260,'multiline':False]['text':' __getstate__ ','line_number':393,'multiline':True]['text':' unused ','line_number':394,'multiline':True]['text':' Note that this return has no meaning since we always','line_number':399,'multiline':False]['text':' throw, it's only here to satisfy Pybind API's','line_number':400,'multiline':False]['text':' requirement.','line_number':401,'multiline':False]['text':' __setstate__ ','line_number':404,'multiline':True]['text':' unused ','line_number':405,'multiline':True]['text':' NOLINT','line_number':405,'multiline':False]['text':' Note that this return has no meaning since we always','line_number':410,'multiline':False]['text':' throw, it's only here to satisfy PyBind's API','line_number':411,'multiline':False]['text':' requirement.','line_number':412,'multiline':False]['text':' Intentionally not releasing GIL, as most accesses just','line_number':428,'multiline':False]['text':' retrieve cached type py::object','line_number':429,'multiline':False]['text':' not releasing GIL to avoid context switch','line_number':529,'multiline':False]['text':' Base class: torch.distributed.rpc.RpcBackendOptions.','line_number':534,'multiline':False]['text':' USE_TENSORPIPE','line_number':649,'multiline':False]['text':' Initializing typeResolver inside RpcAgent constructor will make','line_number':659,'multiline':False]['text':' RpcAgent have python dependency. To avoid RpcAgent to have python','line_number':660,'multiline':False]['text':' dependency, setTypeResolver() here.','line_number':661,'multiline':False]['text':' NB: do not release GIL in the function. The destroyInstance() method','line_number':689,'multiline':False]['text':' returns a list of deleted OwnerRRefs that hold py::object instances.','line_number':690,'multiline':False]['text':' Clearing those OwnerRRefs are likely to trigger Python deref, which','line_number':691,'multiline':False]['text':' requires GIL.','line_number':692,'multiline':False]['text':' namespace','line_number':850,'multiline':False]['text':' NOLINT','line_number':852,'multiline':False]['text':' namespace rpc','line_number':860,'multiline':False]['text':' namespace distributed','line_number':861,'multiline':False]['text':' namespace torch','line_number':862,'multiline':False]