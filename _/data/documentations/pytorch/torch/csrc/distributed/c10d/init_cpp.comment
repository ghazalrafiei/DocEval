['text':' Wrapper to ensure GIL is released before destructing ProcessGroupGloo','line_number':54,'multiline':False]['text':' TODO: move this somewhere more generally useful','line_number':55,'multiline':False]['text':' implicit ','line_number':68,'multiline':True]['text':' This ctor is very important; see','line_number':70,'multiline':False]['text':' https://github.com/pybind/pybind11/issues/2957','line_number':71,'multiline':False]['text':' anonymous namespace','line_number':101,'multiline':False]['text':' PythonStore is a pybind11 trampoline class to allow a Python','line_number':125,'multiline':False]['text':' class to inherit from c10d.Store and implement its interface.','line_number':126,'multiline':False]['text':' Note: this function manually calls the Python-side overload','line_number':131,'multiline':False]['text':' for this function instead of using the PYBIND11_OVERLOAD_XYZ','line_number':132,'multiline':False]['text':' macros. This is done so that we can call the Python-side','line_number':133,'multiline':False]['text':' function with a std::string instead of a std::vector<uint8_t>.','line_number':134,'multiline':False]['text':' Call function with a py::bytes object for the value.','line_number':140,'multiline':False]['text':' Note: this function manually calls the Python-side overload','line_number':145,'multiline':False]['text':' for this function instead of using the PYBIND11_OVERLOAD_XYZ','line_number':146,'multiline':False]['text':' macros. This is done so that the Python-side function can','line_number':147,'multiline':False]['text':' return a py::bytes instead of a std::vector<uint8_t>.','line_number':148,'multiline':False]['text':' Cast return value from Python to py::bytes, then implicitly','line_number':154,'multiline':False]['text':' convert that to a std::string, so that we can construct a','line_number':155,'multiline':False]['text':' std::vector<uint8_t>. There is no API for directly accessing','line_number':156,'multiline':False]['text':' the contents of the py::bytes object.','line_number':157,'multiline':False]['text':' Note: this function manually calls the Python-side overload','line_number':162,'multiline':False]['text':' for this function instead of using the PYBIND11_OVERLOAD_XYZ','line_number':163,'multiline':False]['text':' macros. This is done so that the Python-side function can','line_number':164,'multiline':False]['text':' return a py::bytes instead of a std::vector<uint8_t>.','line_number':165,'multiline':False]['text':' Cast return value from Python to py::bytes, then implicitly','line_number':174,'multiline':False]['text':' convert that to a std::string, so that we can construct a','line_number':175,'multiline':False]['text':' std::vector<uint8_t>. There is no API for directly accessing','line_number':176,'multiline':False]['text':' the contents of the py::bytes object.','line_number':177,'multiline':False]['text':' Note: this function manually calls the Python-side overload','line_number':215,'multiline':False]['text':' for this function instead of using the PYBIND11_OVERLOAD_XYZ','line_number':216,'multiline':False]['text':' macros. This is done so that we can call the Python-side','line_number':217,'multiline':False]['text':' function with a std::string instead of a std::vector<uint8_t>.','line_number':218,'multiline':False]['text':' Call function with a py::bytes object for the value.','line_number':227,'multiline':False]['text':' Called from DDP's Python API to create a c10d Python comm hook object.','line_number':276,'multiline':False]['text':' The input state and callable comm_hook are Python objects. It later calls','line_number':277,'multiline':False]['text':' register_comm_hook function of the reducer input to register the hook.','line_number':278,'multiline':False]['text':' Called from DDP's Python API to create a c10d C++ comm hook.','line_number':287,'multiline':False]['text':' The input is an enum hook type. It later calls register_builtin_comm_hook','line_number':288,'multiline':False]['text':' function of the reducer input to set the hook type.','line_number':289,'multiline':False]['text':' Customize the metaclass of ::c10d::ReduceOp for the backward compatibility.','line_number':296,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/84243 changed ::c10d::ReduceOp to','line_number':297,'multiline':False]['text':' struct from enum, sacrificing some of the Python built-in function supports','line_number':298,'multiline':False]['text':' such as `isinstance` (see https://github.com/pytorch/pytorch/issues/87191)','line_number':299,'multiline':False]['text':' and `copy` (see','line_number':300,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/87303#discussion_r1002879700). Below,','line_number':301,'multiline':False]['text':' we define a custom `isinstance` in CPython/pybind11','line_number':302,'multiline':False]['text':' (`reduceopmeta___instancecheck__`) and modify the default metaclass of','line_number':303,'multiline':False]['text':' pybind11 (`GetReduceOpMetaclass`) so that','line_number':304,'multiline':False]['text':' `isinstance(torch.distributed.ReduceOp.SUM, torch.distributed.ReduceOp)`','line_number':305,'multiline':False]['text':' returns :obj:`True` as if `ReduceOp` is enum.','line_number':306,'multiline':False]['text':' Ref:','line_number':307,'multiline':False]['text':'   - https://docs.python.org/3/extending/newtypes_tutorial.html','line_number':308,'multiline':False]['text':'   - https://docs.python.org/3/c-api/typeobj.html?highlight=tp_methods','line_number':309,'multiline':False]['text':'   - https://github.com/pybind/pybind11/issues/2696','line_number':310,'multiline':False]['text':' return_zero_tensors ','line_number':516,'multiline':True]['text':' TODO(crcrpar): Hardening `ReduceOp`.','line_number':681,'multiline':False]['text':'    While keeping most op types as enum value,','line_number':682,'multiline':False]['text':'    making `PREMUL_SUM` callable, i.e., allowing for','line_number':683,'multiline':False]['text':'    `ReduceOp.PREMUL_SUM(scale)` might be better as per @wanchaol.','line_number':684,'multiline':False]['text':' https://pybind11.readthedocs.io/en/stable/classes.html#enumerations-and-internal-types','line_number':685,'multiline':False]['text':' The following are for some kind of backward compatibility.','line_number':713,'multiline':False]['text':' Since c10d::ReduceOp had been an `enum class`, users can do comparison and','line_number':714,'multiline':False]['text':' take hash of `::c10d::ReduceOp`. To avoid losing these functionality, here','line_number':715,'multiline':False]['text':' I define some member methods.','line_number':716,'multiline':False]['text':' todo(crcrpar): Support `RedOpType == ReduceOp`.','line_number':718,'multiline':False]['text':' This calls `operator==(const ReduceOp::RedOpType)`','line_number':720,'multiline':False]['text':' This calls `operator==(const ReduceOp)` for the future support of','line_number':727,'multiline':False]['text':' `PREMUL_SUM` comparison','line_number':728,'multiline':False]['text':' With the above custom `__eq__`'s, I have to manually support the','line_number':734,'multiline':False]['text':' other types.','line_number':735,'multiline':False]['text':' __getstate__','line_number':753,'multiline':False]['text':' __setstate__','line_number':768,'multiline':False]['text':' note(crcrpar): This could be removed because users will not pass','line_number':795,'multiline':False]['text':' `RedOpType` to reduce collective ops Ref: [Implicit','line_number':796,'multiline':False]['text':' conversions](https://pybind11.readthedocs.io/en/stable/advanced/classes.html#implicit-conversions)','line_number':797,'multiline':False]['text':' Let us skip the explicit construction of `c10d::ReduceOp` from','line_number':798,'multiline':False]['text':' `c10d::ReduceOp::RedOpType` in Python.','line_number':799,'multiline':False]['text':' seems safest','line_number':807,'multiline':False]['text':' seems safest','line_number':813,'multiline':False]['text':' TODO(yifu): _{register, resolve}_process_group currently only work for','line_number':816,'multiline':False]['text':' c10d_functional. Later, we'll unify the name -> group mapping across','line_number':817,'multiline':False]['text':' Python and C++, and spanning both functional and non-functional','line_number':818,'multiline':False]['text':' collectives.','line_number':819,'multiline':False]['text':' Default constructor.','line_number':916,'multiline':False]['text':' Convert from std::string to std::vector<uint8>.','line_number':918,'multiline':False]['text':' Convert from std::vector<uint8_t> to py::bytes.','line_number':981,'multiline':False]['text':' The returned value is not guaranteed to be valid UTF-8.','line_number':982,'multiline':False]['text':' using noconvert() requires this argument to be True or False','line_number':1363,'multiline':False]['text':' prevents accidental implicit conversion to bool','line_number':1364,'multiline':False]['text':' We need to wrap a py::object hook with a wrapper to hold','line_number':1745,'multiline':False]['text':' GIL before dereferencing the py::object.','line_number':1746,'multiline':False]['text':' This needs to happen here instead of in ProcessGroup','line_number':1747,'multiline':False]['text':' backend implementations and the latter cannot depend on','line_number':1748,'multiline':False]['text':' python-related libs.','line_number':1749,'multiline':False]['text':' Intentionally holding GIL as we move hook py::object. This','line_number':1757,'multiline':False]['text':' should be OK as register a hook is cheap.','line_number':1758,'multiline':False]['text':' base ProcessGroup::Options binding','line_number':1833,'multiline':False]['text':' TODO: The collection definitions handles direct instantiation of','line_number':1870,'multiline':False]['text':' ProcessGroup subclasses (e.g. dist.ProcessGroupGloo). This is not supported','line_number':1871,'multiline':False]['text':' and should be removed once all tests are transitioned','line_number':1872,'multiline':False]['text':' Use interfaces listed in "GLOO_SOCKET_IFNAME", if set.','line_number':2220,'multiline':False]['text':' If no hostname is specified, this function looks up','line_number':2228,'multiline':False]['text':' the machine's hostname and returns a device instance','line_number':2229,'multiline':False]['text':' associated with the address that the hostname resolves to.','line_number':2230,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':2236,'multiline':False]['text':' ProcessGroupWrapper is a wrapper pg that includes a helper gloo process','line_number':2256,'multiline':False]['text':' group. It can be used to validate collective calls across processes by','line_number':2257,'multiline':False]['text':' checking the op type and input tensor shapes.','line_number':2258,'multiline':False]['text':'docs.nvidia.com/deeplearning/nccl/user-guide/docs/api/types.html#ncclconfig-t','line_number':2342,'multiline':False]['text':' Note: NCCL calls free on the netName pointer','line_number':2353,'multiline':False]['text':' when destroying the communicator. So memory','line_number':2354,'multiline':False]['text':' shouldn't leak because of allocation in strdup.','line_number':2355,'multiline':False]['text':'docs.nvidia.com/deeplearning/nccl/user-guide/docs/api/types.html#ncclconfig-t','line_number':2379,'multiline':False]['text':' Define static create function instead of a constructor, because','line_number':2415,'multiline':False]['text':' this function may return null. This happens if this process is not','line_number':2416,'multiline':False]['text':' part of a sub group that is to be created.','line_number':2417,'multiline':False]['text':' Define a lambda such that the pybind11 prototype can take a std::vector','line_number':2652,'multiline':False]['text':' for the tensor list argument, but still pass it to the underlying','line_number':2653,'multiline':False]['text':' function as a c10::ArrayRef.','line_number':2654,'multiline':False]['text':' NOLINT','line_number':2656,'multiline':False]['text':' The source of truth rank to broadcast the tensors from.','line_number':2665,'multiline':False]['text':' Define a function that takes a c10d store and runs a few tests.','line_number':2671,'multiline':False]['text':' This is used by the PythonStore tests, which we cannot test from the','line_number':2672,'multiline':False]['text':' Python side of the world. Calling Python functions on a Python object','line_number':2673,'multiline':False]['text':' completely bypasses pybind11. We need to test that the overloaded','line_number':2674,'multiline':False]['text':' functions call into Python and behave like we expect.','line_number':2675,'multiline':False]['text':' namespace','line_number':2781,'multiline':False]['text':' c10d methods on torch._C','line_number':2783,'multiline':False]['text':' NOLINT','line_number':2784,'multiline':False]['text':' namespace c10d','line_number':2792,'multiline':False]['text':' namespace distributed','line_number':2793,'multiline':False]['text':' namespace torch','line_number':2794,'multiline':False]