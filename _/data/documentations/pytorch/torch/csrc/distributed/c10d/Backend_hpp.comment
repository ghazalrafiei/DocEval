['text':' Backend Options is a base struct that defines the basic options','line_number':26,'multiline':False]['text':' when constructing a Backend. Each Backend subclass should','line_number':27,'multiline':False]['text':' extend this struct and define its options if it wants to provide more','line_number':28,'multiline':False]['text':' config options (beyond basic ones defined here) to end user.','line_number':29,'multiline':False]['text':' backend name','line_number':39,'multiline':False]['text':' Returns an unique opaque ID of this backend that can be used to correlate','line_number':54,'multiline':False]['text':' with its collectives.','line_number':55,'multiline':False]['text':' Subclasses must override this method to return the backend name','line_number':80,'multiline':False]['text':' tensors ','line_number':86,'multiline':True]['text':' opts ','line_number':87,'multiline':True]['text':' tensors ','line_number':94,'multiline':True]['text':' opts ','line_number':95,'multiline':True]['text':' tensors ','line_number':102,'multiline':True]['text':' opts ','line_number':103,'multiline':True]['text':' tensors ','line_number':113,'multiline':True]['text':' opts ','line_number':114,'multiline':True]['text':' tensors ','line_number':125,'multiline':True]['text':' opts ','line_number':126,'multiline':True]['text':' outputTensors ','line_number':133,'multiline':True]['text':' inputTensors ','line_number':134,'multiline':True]['text':' opts ','line_number':135,'multiline':True]['text':' Gathers a single tensor inputBuffer into a single buffer outputBuffer that','line_number':141,'multiline':False]['text':' is interpreted as a contiguous collection of size inputBuffer * WORLD_SIZE.','line_number':142,'multiline':False]['text':' For implementers of ProcessGroup API and advanced users only.','line_number':143,'multiline':False]['text':' Note: this function will be deprecated in near future.','line_number':144,'multiline':False]['text':' outputBuffer ','line_number':146,'multiline':True]['text':' inputBuffer ','line_number':147,'multiline':True]['text':' opts ','line_number':148,'multiline':True]['text':' This function is deprecated and will be moved out of Backend to comms:','line_number':155,'multiline':False]['text':' * do not add dependencies on this function,','line_number':156,'multiline':False]['text':' * do not implement it in your Backend, implement _allgather_base','line_number':157,'multiline':False]['text':'   instead.','line_number':158,'multiline':False]['text':' outputTensorLists ','line_number':160,'multiline':True]['text':' inputTensors ','line_number':161,'multiline':True]['text':' opts ','line_number':162,'multiline':True]['text':' This function is a coalesced version of `allgather_into_tensor` (currently','line_number':171,'multiline':False]['text':' still named as `_allgather_base`). Each tensor in the vector corresponds to','line_number':172,'multiline':False]['text':' an input/output of one `allgather_into_tensor` operation.','line_number':173,'multiline':False]['text':' outputs ','line_number':175,'multiline':True]['text':' inputs ','line_number':176,'multiline':True]['text':' opts ','line_number':177,'multiline':True]['text':' outputTensors ','line_number':187,'multiline':True]['text':' inputTensors ','line_number':188,'multiline':True]['text':' opts ','line_number':189,'multiline':True]['text':' outputTensors ','line_number':196,'multiline':True]['text':' inputTensors ','line_number':197,'multiline':True]['text':' opts ','line_number':198,'multiline':True]['text':' outputTensors ','line_number':205,'multiline':True]['text':' inputTensors ','line_number':206,'multiline':True]['text':' opts ','line_number':207,'multiline':True]['text':' outputBuffer ','line_number':215,'multiline':True]['text':' inputBuffer ','line_number':216,'multiline':True]['text':' opts ','line_number':217,'multiline':True]['text':' This function is a coalesced version of `reduce_scatter_tensor` (currently','line_number':226,'multiline':False]['text':' still named as `_reduce_scatter_base`). Each tensor in the vector','line_number':227,'multiline':False]['text':' corresponds to an input/output of one `reduce_scatter_tensor` operation.','line_number':228,'multiline':False]['text':' outputs ','line_number':230,'multiline':True]['text':' inputs ','line_number':231,'multiline':True]['text':' opts ','line_number':232,'multiline':True]['text':' outputBuffer ','line_number':242,'multiline':True]['text':' inputBuffer ','line_number':243,'multiline':True]['text':' outputSplitSizes ','line_number':244,'multiline':True]['text':' inputSplitSizes ','line_number':245,'multiline':True]['text':' opts ','line_number':246,'multiline':True]['text':' outputTensors ','line_number':254,'multiline':True]['text':' inputTensors ','line_number':255,'multiline':True]['text':' unused ','line_number':263,'multiline':True]['text':' unused ','line_number':264,'multiline':True]['text':' Agrees on an initial sequence number for the whole group by having rank 0','line_number':274,'multiline':False]['text':' create it and broadcast it to other ranks using the store. Only implemented','line_number':275,'multiline':False]['text':' for GLOO and NCCL backends currently.','line_number':276,'multiline':False]['text':' Retrieves the current sequence number for the whole group, which should be','line_number':287,'multiline':False]['text':' in sync. If the returned number is not consistent across the group, it','line_number':288,'multiline':False]['text':' may indicate that there is some sort of collective desynchronization.','line_number':289,'multiline':False]['text':' tensors ','line_number':301,'multiline':True]['text':' dstRank ','line_number':302,'multiline':True]['text':' tag ','line_number':303,'multiline':True]['text':' tensors ','line_number':310,'multiline':True]['text':' srcRank ','line_number':311,'multiline':True]['text':' tag ','line_number':312,'multiline':True]['text':' tensors ','line_number':319,'multiline':True]['text':' tag ','line_number':320,'multiline':True]['text':' opts ','line_number':328,'multiline':True]['text':' Do not call this directly, use ProcessGroup::setGroupName instead.','line_number':363,'multiline':False]['text':' See similar functions in ProcessGroup.hpp for context.','line_number':372,'multiline':False]['text':' Perform an eager connect to the specified device if the backend supports','line_number':377,'multiline':False]['text':' it.','line_number':378,'multiline':False]['text':' no-op in the default case; this is an optimization some','line_number':380,'multiline':False]['text':' backends may perform','line_number':381,'multiline':False]['text':' Implementations of this interface need to call this to setup','line_number':392,'multiline':False]['text':' appropriate logging etc.','line_number':393,'multiline':False]['text':' Debug level setting. It is parsed once when ProcessGroup is constructed and','line_number':398,'multiline':False]['text':' remains the same across use of this process group.','line_number':399,'multiline':False]['text':' namespace c10d','line_number':408,'multiline':False]