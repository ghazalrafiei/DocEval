['text':' ProcessGroupGloo implements Gloo bindings for c10d.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' All functions on this class are expected to be called in the same','line_number':31,'multiline':False]['text':' order across processes in the group. This is the only way that we','line_number':32,'multiline':False]['text':' can guarantee to match up the same calls across processes. For','line_number':33,'multiline':False]['text':' multi-threaded usage of process groups, you can use consider using','line_number':34,'multiline':False]['text':' multiple process group instances.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' The Gloo algorithms that this class calls into are cached by their','line_number':37,'multiline':False]['text':' signature (see description of AlgorithmKey above). This cache works','line_number':38,'multiline':False]['text':' as follows: every function call instantiates an AlgorithmKey and','line_number':39,'multiline':False]['text':' looks in the cache for existing entries. If there is one, it is','line_number':40,'multiline':False]['text':' removed from the cache and returned to the caller. If there are','line_number':41,'multiline':False]['text':' none, a new entry is created and returned. If an entry was created','line_number':42,'multiline':False]['text':' before, but is still in use, the call will block and wait until the','line_number':43,'multiline':False]['text':' entry is returned to the cache.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' In the future, we hope to extend this to allow multiple entries per','line_number':46,'multiline':False]['text':' key, to enable parallelism for a single key. The number of entries','line_number':47,'multiline':False]['text':' per key must always be identical for all processes. This maximum','line_number':48,'multiline':False]['text':' number can be automatically tuned, but only if we let a single','line_number':49,'multiline':False]['text':' process take charge, and have it broadcast the limits.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' AsyncWork is the Gloo specific superclass for asynchronous work items.','line_number':54,'multiline':False]['text':' We can split asynchronous work into 3 phases:','line_number':55,'multiline':False]['text':' 1) Sanity checks and prepare input (e.g. memcpy)','line_number':56,'multiline':False]['text':' 2) Run operation on background thread','line_number':57,'multiline':False]['text':' 3) Synchronize with completion on foreground thread','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' There is state to be shared between these 3 phases and all of this state','line_number':60,'multiline':False]['text':' is captured in the AsyncWork class and its derivatives.','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' Note: while we are porting operations to use new style collectives, there','line_number':63,'multiline':False]['text':' is a split between operations using the existing caching approach and','line_number':64,'multiline':False]['text':' operations using the new AsyncWork base class. Over time we will port','line_number':65,'multiline':False]['text':' all operations and perform needed cleanup.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' FIXME: This probably should be called WorkGloo since the work is executed','line_number':68,'multiline':False]['text':' in sync mode by a background thread.','line_number':69,'multiline':False]['text':' Wrap c10d store as Gloo store','line_number':107,'multiline':False]['text':' For send and recv operations there is no need to pass them to the','line_number':180,'multiline':False]['text':' thread pool as they are entirely completed by the device thread.','line_number':181,'multiline':False]['text':' This work object is used to synchronize completion of the send or','line_number':182,'multiline':False]['text':' recv operation. It keeps a reference to the tensor it is','line_number':183,'multiline':False]['text':' operating on to prevent it from being deallocated while the','line_number':184,'multiline':False]['text':' operation is still in flight.','line_number':185,'multiline':False]['text':' return intrusive_ptr of the object','line_number':233,'multiline':False]['text':' Helper functions to create a new device object.','line_number':247,'multiline':False]['text':' They are static functions on this class to keep them logically','line_number':248,'multiline':False]['text':' separate from the rest of the code base (e.g. torch/csrc/distributed).','line_number':249,'multiline':False]['text':' Create new device instance for specific interface.','line_number':251,'multiline':False]['text':' Create new device instance for specific hostname or address.','line_number':255,'multiline':False]['text':' Create new device instance.','line_number':259,'multiline':False]['text':' It tries to resolve this machine's hostname and bind to that address.','line_number':260,'multiline':False]['text':' If that fails (i.e. the hostname doesn't resolve to an address), it','line_number':261,'multiline':False]['text':' falls back to binding to the loopback address.','line_number':262,'multiline':False]['text':' Create ProcessGroupGloo instance.','line_number':265,'multiline':False]['text':' Similar to barrier(), but blocks rank 0 until all other ranks have','line_number':370,'multiline':False]['text':' acknowledged that they are alive (through send/recv from rank 0). Rank 0','line_number':371,'multiline':False]['text':' is able to report all failed ranks if waitAllRanks = true, otherwise','line_number':372,'multiline':False]['text':' reports the first rank it detected as failed.','line_number':373,'multiline':False]['text':' Agrees on an initial sequence number for the whole group by having rank 0','line_number':378,'multiline':False]['text':' create it and broadcast it to other ranks using the store.','line_number':379,'multiline':False]['text':' Retrieves the current sequence number for the whole group, which should be','line_number':382,'multiline':False]['text':' in sync. If the returned number is not consistent across the group, it','line_number':383,'multiline':False]['text':' may indicate that there is some sort of collective desynchronization.','line_number':384,'multiline':False]['text':' Every Gloo context represents a set of connections to its peers.','line_number':395,'multiline':False]['text':' In order to use more than one device (or allow for parallelism on','line_number':396,'multiline':False]['text':' a single device), you need multiple contexts.','line_number':397,'multiline':False]['text':' Incremented for every collective we kick off.','line_number':402,'multiline':False]['text':' The value is used as tag for collective operations. Collectives are kicked','line_number':403,'multiline':False]['text':' off in identical order across processes. Therefore the tag can be used','line_number':404,'multiline':False]['text':' to match up operations during concurrent execution.','line_number':405,'multiline':False]['text':' Returns next collective tag to use (uses collectiveCounter_).','line_number':408,'multiline':False]['text':' Returns the context to use for the specified tag.','line_number':411,'multiline':False]['text':' With `nextTag` returning an increasing number, this should lead','line_number':412,'multiline':False]['text':' to contexts being used in a round-robin fashion.','line_number':413,'multiline':False]['text':' Entrypoint for worker threads.','line_number':416,'multiline':False]['text':' Queue work to run on worker thread.','line_number':419,'multiline':False]['text':' Keep both a queue of pending work, and a vector with in progress work.','line_number':422,'multiline':False]['text':' Both of these can only be mutated when holding the queue lock.','line_number':423,'multiline':False]['text':' We keep both around instead of just the queue, so we can grab a weak_ptr','line_number':424,'multiline':False]['text':' to all in progress and pending work when executing a barrier.','line_number':425,'multiline':False]['text':' When executing a barrier, we need to ensure that all prior work','line_number':426,'multiline':False]['text':' has completed before completing itself.','line_number':427,'multiline':False]['text':' namespace c10d','line_number':436,'multiline':False]['text':' USE_C10D_GLOO','line_number':438,'multiline':False]