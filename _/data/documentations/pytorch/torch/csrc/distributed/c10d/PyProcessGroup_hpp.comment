['text':' PyProcessGroup is a pybind11 trampoline class to allow a Python','line_number':9,'multiline':False]['text':' class to inherit from torch.distributed.ProcessGroup','line_number':10,'multiline':False]['text':' PyWork is a pybind11 trampoline class to allow a Python','line_number':13,'multiline':False]['text':' class to inherit from torch.distributed.Work','line_number':14,'multiline':False]['text':' Return type ','line_number':21,'multiline':True]['text':' Parent class ','line_number':22,'multiline':True]['text':' Name of function in C++ ','line_number':23,'multiline':True]['text':' We cannot use PYBIND11_OVERRIDE because:','line_number':28,'multiline':False]['text':' 1. We have to >MANUALLY< unwrap the PyFutureWrapper and','line_number':29,'multiline':False]['text':' 2. The python name is get_future','line_number':30,'multiline':False]['text':' Return type ','line_number':50,'multiline':True]['text':' Parent class ','line_number':51,'multiline':True]['text':' Name of function in C++ ','line_number':52,'multiline':True]['text':' Return type ','line_number':61,'multiline':True]['text':' Parent class ','line_number':62,'multiline':True]['text':' Name of function in C++ ','line_number':63,'multiline':True]['text':' Return type ','line_number':73,'multiline':True]['text':' Parent class ','line_number':74,'multiline':True]['text':' Name of function in C++ ','line_number':75,'multiline':True]['text':' Return type ','line_number':83,'multiline':True]['text':' Parent class ','line_number':84,'multiline':True]['text':' Name of function in C++ ','line_number':85,'multiline':True]['text':' Return type ','line_number':93,'multiline':True]['text':' Parent class ','line_number':94,'multiline':True]['text':' Name of function in C++ ','line_number':95,'multiline':True]['text':' Return type ','line_number':105,'multiline':True]['text':' Parent class ','line_number':106,'multiline':True]['text':' Name of function in C++ ','line_number':107,'multiline':True]['text':' Return type ','line_number':118,'multiline':True]['text':' Parent class ','line_number':119,'multiline':True]['text':' Name of function in C++ ','line_number':120,'multiline':True]['text':' Return type ','line_number':131,'multiline':True]['text':' Parent class ','line_number':132,'multiline':True]['text':' Name of function in C++ ','line_number':133,'multiline':True]['text':' Wraps a py::object hook and acquires Python GIL in dtor before','line_number':142,'multiline':False]['text':' destructing the hook object.','line_number':143,'multiline':False]['text':' Explicitly set hook_ to nullptr to prevent py::object's dtor','line_number':149,'multiline':False]['text':' to decref on the PyObject again.','line_number':150,'multiline':False]['text':' See Note [Destructing py::object] in python_ivalue.h','line_number':151,'multiline':False]['text':' py::error_already_set requires GIL to destruct, take','line_number':162,'multiline':False]['text':' special care.','line_number':163,'multiline':False]['text':' No more Python-related stuff at this point, i.e., this','line_number':171,'multiline':False]['text':' exception can be captured and handled by PG backend.','line_number':172,'multiline':False]['text':' namespace c10d','line_number':181,'multiline':False]