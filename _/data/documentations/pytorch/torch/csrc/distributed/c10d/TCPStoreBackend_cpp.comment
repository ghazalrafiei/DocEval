['text':' Background thread parent class methods','line_number':31,'multiline':False]['text':' WARNING:','line_number':36,'multiline':False]['text':' Since we rely on the subclass for the daemon thread clean-up, we cannot','line_number':37,'multiline':False]['text':' destruct our member variables in the destructor. The subclass must call','line_number':38,'multiline':False]['text':' dispose() in its own destructor.','line_number':39,'multiline':False]['text':' Stop the run','line_number':41,'multiline':False]['text':' Join the thread','line_number':43,'multiline':False]['text':' Separate thread that is only launched on master','line_number':52,'multiline':False]['text':' The master runs on a single thread so only','line_number':74,'multiline':False]['text':' one handler can be executed at a time','line_number':75,'multiline':False]['text':' Helper function to alerts waiting workers, used in setHandler, getHandler','line_number':94,'multiline':False]['text':' From key -> the list of sockets waiting on the key','line_number':99,'multiline':False]['text':' From socket -> number of keys awaited','line_number':101,'multiline':False]['text':' miscellaneous sockets','line_number':103,'multiline':False]['text':' Simply start the daemon thread','line_number':116,'multiline':False]['text':' it's now safe for us to cleanup','line_number':124,'multiline':False]['text':' Close unclosed sockets','line_number':125,'multiline':False]['text':' Now close the rest control pipe','line_number':127,'multiline':False]['text':' close the write end of the pipe','line_number':189,'multiline':False]['text':' Skipping the fds[0] and fds[1],','line_number':197,'multiline':False]['text':' fds[0] is master's listening socket','line_number':198,'multiline':False]['text':' fds[1] is control pipe's reading fd, it is not for Windows platform','line_number':199,'multiline':False]['text':' Now query the socket that has the event','line_number':205,'multiline':False]['text':' There was an error when processing query. Probably an exception','line_number':209,'multiline':False]['text':' occurred in recv/send what would indicate that socket on the other','line_number':210,'multiline':False]['text':' side has been closed. If the closing was due to normal exit, then','line_number':211,'multiline':False]['text':' the store should continue executing. Otherwise, if it was different','line_number':212,'multiline':False]['text':' exception, other connections will get an exception once they try to','line_number':213,'multiline':False]['text':' use the store. We will go ahead and close this connection whenever','line_number':214,'multiline':False]['text':' we hit an exception here.','line_number':215,'multiline':False]['text':' Remove all the tracking state of the close FD','line_number':227,'multiline':False]['text':' query communicates with the worker. The format','line_number':251,'multiline':False]['text':' of the query is as follows:','line_number':252,'multiline':False]['text':' type of query | size of arg1 | arg1 | size of arg2 | arg2 | ...','line_number':253,'multiline':False]['text':' or, in the case of wait','line_number':254,'multiline':False]['text':' type of query | number of args | size of arg1 | arg1 | ...','line_number':255,'multiline':False]['text':' real miscellaneous client: the first msg is not VALIDATE','line_number':265,'multiline':False]['text':' On "set", wake up all clients that have been waiting','line_number':322,'multiline':False]['text':' TODO: This code path is not ideal as we are "lying" to the caller in','line_number':353,'multiline':False]['text':' case the key does not exist. We should come up with a working solution.','line_number':354,'multiline':False]['text':' Now send the new value','line_number':379,'multiline':False]['text':' On "add", wake up all clients that have been waiting','line_number':381,'multiline':False]['text':' Now we have received all the keys','line_number':408,'multiline':False]['text':' Only count keys that have not already been set','line_number':429,'multiline':False]['text':' we should not have clients waiting if we're appending, so it's all fine','line_number':448,'multiline':False]['text':' Suppress unused variable warning','line_number':466,'multiline':False]['text':' Send update to TCPStoreWorkerDaemon on client','line_number':476,'multiline':False]['text':' receive the queries','line_number':510,'multiline':False]['text':' TCPStore's listening socket has an event and it should now be able to','line_number':529,'multiline':False]['text':' accept new connections.','line_number':530,'multiline':False]['text':' Although we haven't found any documentation or literature describing this,','line_number':550,'multiline':False]['text':' we've seen cases that, under certain circumstances, the read end of the','line_number':551,'multiline':False]['text':' pipe won't receive POLLHUP when the write end is closed. However, under','line_number':552,'multiline':False]['text':' the same circumstances, writing to the pipe will guarantee POLLIN to be','line_number':553,'multiline':False]['text':' received on the read end.','line_number':554,'multiline':False]['text':'','line_number':555,'multiline':False]['text':' For more reliable termination, the main thread will write a byte to the','line_number':556,'multiline':False]['text':' pipe before closing it, and the background thread will poll for both','line_number':557,'multiline':False]['text':' POLLIN and POLLHUP.','line_number':558,'multiline':False]['text':' receive the queries','line_number':561,'multiline':False]['text':' TCPStore's listening socket has an event and it should now be able to','line_number':570,'multiline':False]['text':' accept new connections.','line_number':571,'multiline':False]['text':' all clients are miscellaneous before getting its validation query','line_number':583,'multiline':False]['text':' The pipe receives an event which tells us to shutdown the daemon','line_number':587,'multiline':False]['text':' The main thread will write a byte to the pipe then close it before','line_number':589,'multiline':False]['text':' joining the background thread','line_number':590,'multiline':False]['text':' namespace detail','line_number':614,'multiline':False]['text':' namespace c10d','line_number':615,'multiline':False]