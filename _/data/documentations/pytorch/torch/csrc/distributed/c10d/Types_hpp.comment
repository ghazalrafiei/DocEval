['text':' Base class for supplementary data potentially needed by ReduceOps','line_number':16,'multiline':False]['text':' Supplementary data specific to NCCL PREMUL_SUM','line_number':21,'multiline':False]['text':' The point of use in ProcessGroupNCCL knows how to unpack it.','line_number':22,'multiline':False]['text':' Other ReduceOps that need different supplementary data can also','line_number':32,'multiline':False]['text':' derive from _SupplementBase.','line_number':33,'multiline':False]['text':' note(crcrpar): RedOpType could be defined outside of `ReduceOp`','line_number':35,'multiline':False]['text':' Bitwise AND','line_number':42,'multiline':False]['text':' Bitwise OR','line_number':43,'multiline':False]['text':' Bitwise XOR','line_number':44,'multiline':False]['text':' Multiply by a user-supplied constant before summing.','line_number':45,'multiline':False]['text':' The heap resource supplement_, if it exists, is managed by a','line_number':67,'multiline':False]['text':' c10::intrusive_ptr, so constructors and operator= can be simple','line_number':68,'multiline':False]['text':' todo(crcrpar): Handle `RedOpType::PREMUL_SUM` with its scaling factor.','line_number':91,'multiline':False]['text':' supplement_ is "type-erased" storage for optional supplementary','line_number':97,'multiline':False]['text':' data the op might need.','line_number':98,'multiline':False]['text':' The point of use will know the derived type supplement_ really is,','line_number':99,'multiline':False]['text':' and downcast its pointer to extract the data as the needed type(s).','line_number':100,'multiline':False]['text':' Right now, only PREMUL_SUM needs supplementary data, but the same','line_number':101,'multiline':False]['text':' mechanism could extend to support other nontrivial reduce ops with','line_number':102,'multiline':False]['text':' different supplementary payloads.','line_number':103,'multiline':False]['text':' namespace c10d','line_number':180,'multiline':False]