['text':' *************************************************************************','line_number':17,'multiline':False]['text':' PROCESS GROUP collective communication API IS BEING CHANGED BETWEEN','line_number':18,'multiline':False]['text':' versions 1.7 and 1.8.','line_number':19,'multiline':False]['text':' PLEASE DO NOT ADD ANY DEPENDENCIES.','line_number':20,'multiline':False]['text':' SEE RFC: https://github.com/pytorch/pytorch/issues/39662','line_number':21,'multiline':False]['text':' *************************************************************************','line_number':22,'multiline':False]['text':' ProcessGroup is a base class that captures collective and point to','line_number':29,'multiline':False]['text':' point communication in a fixed set of processes.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' The functions specified in the class below describe the API alone;','line_number':32,'multiline':False]['text':' implementations are provided in subclasses.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' Every function that performs I/O is executed asynchronously by a','line_number':35,'multiline':False]['text':' thread pool owned by the ProcessGroup (by default). They return an','line_number':36,'multiline':False]['text':' object that can be used to wait for completion or error.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' The ProcessGroup can instantiate subgroups with fewer or an equal','line_number':39,'multiline':False]['text':' number of members. Implementations must take care that multiple','line_number':40,'multiline':False]['text':' process groups can be used in parallel and synchronize accordingly.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' The ProcessGroup assumes a fixed set of processes. If the set','line_number':43,'multiline':False]['text':' changes, existing instances must be destructed and instantiation','line_number':44,'multiline':False]['text':' and initialization must start from scratch. For members of the','line_number':45,'multiline':False]['text':' process group to find each other (referred to as rendezvous from','line_number':46,'multiline':False]['text':' hereon)','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' ProcessGroup Options is a base struct that defines the basic options','line_number':51,'multiline':False]['text':' when constructing a ProcessGroup. Each ProcessGroup subclass should','line_number':52,'multiline':False]['text':' extend this struct and define its options if it wants to provide more','line_number':53,'multiline':False]['text':' config options (beyond basic ones defined here) to end user.','line_number':54,'multiline':False]['text':' backend name','line_number':64,'multiline':False]['text':' Not used, set for backwards compatibility and only used for TypeDef in','line_number':77,'multiline':False]['text':' Ops.cpp','line_number':78,'multiline':False]['text':' Returns an unique opaque ID of this process group object.','line_number':96,'multiline':False]['text':' Returns an unique opaque ID of a backend for the specific backend type','line_number':101,'multiline':False]['text':' that can correlate with this process group's collectives.','line_number':102,'multiline':False]['text':' only nccl has implemented startCoalescing so only execute for nccl','line_number':116,'multiline':False]['text':' backends','line_number':117,'multiline':False]['text':' only nccl has implemented endCoalescing so only execute for nccl','line_number':123,'multiline':False]['text':' backends','line_number':124,'multiline':False]['text':' It's awakward to unbox the opts here and box them again in the custom C++','line_number':144,'multiline':False]['text':' op. But it's also complicated to make opts as a CustomClassHolder. Leave','line_number':145,'multiline':False]['text':' it as it is now.','line_number':146,'multiline':False]['text':' Gathers a single tensor inputBuffer into a single buffer outputBuffer that','line_number':238,'multiline':False]['text':' is interpreted as a contiguous collection of size inputBuffer * WORLD_SIZE.','line_number':239,'multiline':False]['text':' For implementers of ProcessGroup API and advanced users only.','line_number':240,'multiline':False]['text':' Note: this function will be deprecated in near future.','line_number':241,'multiline':False]['text':' This function is deprecated and will be moved out of ProcessGroup to comms:','line_number':264,'multiline':False]['text':' * do not add dependencies on this function,','line_number':265,'multiline':False]['text':' * do not implement it in your ProcessGroup, implement _allgather_base','line_number':266,'multiline':False]['text':'   instead.','line_number':267,'multiline':False]['text':' This function is a coalesced version of `allgather_into_tensor` (currently','line_number':286,'multiline':False]['text':' still named as `_allgather_base`). Each tensor in the vector corresponds to','line_number':287,'multiline':False]['text':' an input/output of one `allgather_into_tensor` operation.','line_number':288,'multiline':False]['text':' This function is a coalesced version of `reduce_scatter_tensor` (currently','line_number':396,'multiline':False]['text':' still named as `_reduce_scatter_base`). Each tensor in the vector','line_number':397,'multiline':False]['text':' corresponds to an input/output of one `reduce_scatter_tensor` operation.','line_number':398,'multiline':False]['text':' Default to using cpu implementation, monitored barrier is only for GLOO','line_number':476,'multiline':False]['text':' Agrees on an initial sequence number for the whole group by having rank 0','line_number':486,'multiline':False]['text':' create it and broadcast it to other ranks using the store. Only implemented','line_number':487,'multiline':False]['text':' for GLOO and NCCL backends currently.','line_number':488,'multiline':False]['text':' TODO: HACK for backend name to get sequence number for that backend.','line_number':491,'multiline':False]['text':' Retrieves the current sequence number for the whole group, which should be','line_number':506,'multiline':False]['text':' in sync. If the returned number is not consistent across the group, it','line_number':507,'multiline':False]['text':' may indicate that there is some sort of collective desynchronization.','line_number':508,'multiline':False]['text':' TODO: HACK for backend name to get sequence number for that backend.','line_number':512,'multiline':False]['text':' TODO: if nccl was specified then use it','line_number':581,'multiline':False]['text':' set device tensor from argument','line_number':584,'multiline':False]['text':' set cuda tensor','line_number':588,'multiline':False]['text':' Default to using cpu implementation','line_number':593,'multiline':False]['text':' TODO: should we add these entries after the backend setting succeeds?','line_number':626,'multiline':False]['text':' if the backendType is already set then reuse it for this device','line_number':629,'multiline':False]['text':' check if backend has value','line_number':638,'multiline':False]['text':' Return device types supported by this ProcessGroup.','line_number':669,'multiline':False]['text':' Note: the return type is `Device` rather than `DeviceType` for the purpose','line_number':670,'multiline':False]['text':' of easy comparison at Python level. The `Device` will have default index','line_number':671,'multiline':False]['text':' (-1).','line_number':672,'multiline':False]['text':' ProcessGroups optionally can be "bound" to a specific device.','line_number':701,'multiline':False]['text':' Currently this is only for nccl and allows for some opt-in','line_number':702,'multiline':False]['text':' optimizations such as automatic use of ncclCommSplit.  The device','line_number':703,'multiline':False]['text':' is specified in `init_process_group` and eventually makes it','line_number':704,'multiline':False]['text':' here and then down into the actual backend instances.','line_number':705,'multiline':False]['text':' Implementations of this interface need to call this to setup','line_number':718,'multiline':False]['text':' appropriate logging etc.','line_number':719,'multiline':False]['text':' Debug level setting. It is parsed once when ProcessGroup is constructed and','line_number':728,'multiline':False]['text':' remains the same across use of this process group.','line_number':729,'multiline':False]['text':' Backend classes for this ProcessGroup','line_number':732,'multiline':False]['text':' namespace c10d','line_number':743,'multiline':False]