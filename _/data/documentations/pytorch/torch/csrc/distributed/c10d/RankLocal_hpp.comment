['text':' `RankLocal` maintains a unique instance of T for each non-autograd thread.','line_number':10,'multiline':False]['text':' For non-autograd threads, `RankLocal<T>::get()` functions similar to','line_number':11,'multiline':False]['text':' thread_local. For autograd threads, `RankLocal<T>::get()` returns the','line_number':12,'multiline':False]['text':' instance of T corresponding to the enqueuing non-autograd thread. The','line_number':13,'multiline':False]['text':' mechanism allows for rank-specific context shared between forward and','line_number':14,'multiline':False]['text':' backward. It works for both the one-rank-per-process and one-rank-per-thread','line_number':15,'multiline':False]['text':' scenarios.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' NOTE: RankLocal doesn't make the underlying objects thread-safe.','line_number':18,'multiline':False]['text':' Fast path: non-autograd threads can simply return','line_number':26,'multiline':False]['text':' the object reference cached in TLS.','line_number':27,'multiline':False]['text':' Optimistically aquire the read lock first, since most likely we are in','line_number':34,'multiline':False]['text':' an autograd thread and the object has already been constructed.','line_number':35,'multiline':False]['text':' Cache for non-autograd threads','line_number':40,'multiline':False]['text':' Cache for non-autograd threads','line_number':50,'multiline':False]['text':' namespace c10d','line_number':73,'multiline':False]