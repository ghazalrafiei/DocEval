['text':'/ NOTE [ Conversion Cpp Python Warning ]','line_number':27,'multiline':False]['text':'/ The warning handler cannot set python warnings immediately','line_number':28,'multiline':False]['text':'/ as it requires acquiring the GIL (potential deadlock)','line_number':29,'multiline':False]['text':'/ and would need to cleanly exit if the warning raised a','line_number':30,'multiline':False]['text':'/ python error. To solve this, we buffer the warnings and','line_number':31,'multiline':False]['text':'/ process them when we go back to python.','line_number':32,'multiline':False]['text':'/ This requires the two try/catch blocks below to handle the','line_number':33,'multiline':False]['text':'/ following cases:','line_number':34,'multiline':False]['text':'/   - If there is no Error raised in the inner try/catch, the','line_number':35,'multiline':False]['text':'/     buffered warnings are processed as python warnings.','line_number':36,'multiline':False]['text':'/     - If they don't raise an error, the function process with the','line_number':37,'multiline':False]['text':'/       original return code.','line_number':38,'multiline':False]['text':'/     - If any of them raise an error, the error is set (PyErr_*) and','line_number':39,'multiline':False]['text':'/       the destructor will raise a cpp exception python_error() that','line_number':40,'multiline':False]['text':'/       will be caught by the outer try/catch that will be able to change','line_number':41,'multiline':False]['text':'/       the return value of the function to reflect the error.','line_number':42,'multiline':False]['text':'/   - If an Error was raised in the inner try/catch, the inner try/catch','line_number':43,'multiline':False]['text':'/     must set the python error. The buffered warnings are then','line_number':44,'multiline':False]['text':'/     processed as cpp warnings as we cannot predict before hand','line_number':45,'multiline':False]['text':'/     whether a python warning will raise an error or not and we','line_number':46,'multiline':False]['text':'/     cannot handle two errors at the same time.','line_number':47,'multiline':False]['text':'/ This advanced handler will only be used in the current thread.','line_number':48,'multiline':False]['text':'/ If any other thread is used, warnings will be processed as','line_number':49,'multiline':False]['text':'/ cpp warnings.','line_number':50,'multiline':False]['text':' Only catch torch-specific exceptions','line_number':64,'multiline':False]['text':' Throwing this exception means that the python error flags have been already','line_number':145,'multiline':False]['text':' set and control should be immediately returned to the interpreter.','line_number':146,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':171,'multiline':False]['text':' Ensure we have the GIL.','line_number':186,'multiline':False]['text':' No errors should be set when we enter the function since PyErr_Fetch','line_number':189,'multiline':False]['text':' clears the error indicator.','line_number':190,'multiline':False]['text':' Default message.','line_number':193,'multiline':False]['text':' Try to retrieve the error message from the value.','line_number':196,'multiline':False]['text':' Reference count should not be zero.','line_number':198,'multiline':False]['text':' Set the message.','line_number':208,'multiline':False]['text':' Clear any errors since we don't want to propagate errors for functions','line_number':217,'multiline':False]['text':' that are trying to build a string for the error message.','line_number':218,'multiline':False]['text':'* Saves the exception so that it can be re-thrown on a different thread ','line_number':222,'multiline':True]['text':' Don't overwrite exceptions','line_number':225,'multiline':False]['text':' PyErr_Fetch overwrites the pointers','line_number':226,'multiline':False]['text':'* Sets the current Python error from this exception ','line_number':235,'multiline':True]['text':' PyErr_Restore steals references','line_number':239,'multiline':False]['text':' Message to return to the user when 'what()' is invoked.','line_number':251,'multiline':False]['text':' Set python current exception from a C++ exception','line_number':259,'multiline':False]['text':' Abstract base class for exceptions which translate to specific Python types','line_number':264,'multiline':False]['text':' Declare a printf-like function on gcc & clang','line_number':275,'multiline':False]['text':' The compiler can then warn on invalid format specifiers','line_number':276,'multiline':False]['text':' Translates to Python IndexError','line_number':284,'multiline':False]['text':' Translates to Python TypeError','line_number':293,'multiline':False]['text':' Translates to Python ValueError','line_number':302,'multiline':False]['text':' Translates to Python NotImplementedError','line_number':311,'multiline':False]['text':' Translates to Python AttributeError','line_number':320,'multiline':False]['text':' Translates to Python LinAlgError','line_number':328,'multiline':False]['text':' ATen warning handler for Python','line_number':336,'multiline':False]['text':' Move actual handler into a separate class with a noexcept','line_number':338,'multiline':False]['text':' destructor. Otherwise, we need to force all WarningHandler','line_number':339,'multiline':False]['text':' subclasses to have a noexcept(false) destructor.','line_number':340,'multiline':False]['text':'/ See NOTE [ Conversion Cpp Python Warning ] for noexcept justification','line_number':349,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':351,'multiline':False]['text':'* Call if an exception has been thrown

   *  Necessary to determine if it is safe to throw from the desctructor since
   *  std::uncaught_exception is buggy on some platforms and generally
   *  unreliable across dynamic library calls.
   ','line_number':354,'multiline':True]['text':' f=f is needed to handle function references on older compilers','line_number':382,'multiline':False]['text':' namespace detail','line_number':395,'multiline':False]['text':' Wrap a function with TH error and warning handling.','line_number':397,'multiline':False]['text':' Returns a function object suitable for registering with pybind11.','line_number':398,'multiline':False]['text':' Wrap a function with TH error, warning handling and releases the GIL.','line_number':406,'multiline':False]['text':' Returns a function object suitable for registering with pybind11.','line_number':407,'multiline':False]['text':' namespace torch','line_number':415,'multiline':False]