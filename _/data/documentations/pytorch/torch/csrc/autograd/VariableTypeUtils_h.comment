['text':' The requires_grad argument is used to know if the inplace operation needs','line_number':40,'multiline':False]['text':' gradient to be setup for it.','line_number':41,'multiline':False]['text':' In particular, we can have tensor.requires_grad() != requires_grad when','line_number':42,'multiline':False]['text':' writing a Tensor that requires gradients inplace into a Tensor that does not','line_number':43,'multiline':False]['text':' require gradients: a = torch.rand(2) b = torch.rand(2, requires_grad=True)','line_number':44,'multiline':False]['text':' a.copy_(b)','line_number':45,'multiline':False]['text':' This can throw or warn','line_number':50,'multiline':False]['text':' TODO: Blegh, bare references','line_number':110,'multiline':False]['text':' RVO','line_number':158,'multiline':False]['text':' See NOTE [ Autograd View Variables ] for details.','line_number':161,'multiline':False]['text':' Note [View of inference tensor]','line_number':170,'multiline':False]['text':' For inference tensor this code can only be hit outside InferenceMode','line_number':171,'multiline':False]['text':' since ADInplaceOrView is in the default_included_set.','line_number':172,'multiline':False]['text':' If Inplace and View were separate dispatch keys we can just put Inplace','line_number':173,'multiline':False]['text':' in the default_included_set, so that view ops on inference tensor doesn't','line_number':174,'multiline':False]['text':' have to go through as_view even outside InferenceMode.','line_number':175,'multiline':False]['text':' To speed up the most common case, we specially handle when both the forward','line_number':181,'multiline':False]['text':' and backward view infos are the same, and so a single shared ViewInfo can','line_number':182,'multiline':False]['text':' be used for both of them.','line_number':183,'multiline':False]['text':'shared_view_info','line_number':195,'multiline':True]['text':'shared_view_info','line_number':203,'multiline':True]['text':' If they cannot be shared, create the required view infos','line_number':209,'multiline':False]['text':' Check if base is a forward differentiable view','line_number':227,'multiline':False]['text':'shared_view_info','line_number':246,'multiline':True]['text':' See NOTE [ Autograd View Variables ] for details.','line_number':255,'multiline':False]['text':' See Note [View of inference tensor]','line_number':262,'multiline':False]['text':' Special case when view info can be shared for forward and backward','line_number':269,'multiline':False]['text':' differentiable views','line_number':270,'multiline':False]['text':' TODO: fix fb internal use-case so that it doesn't trigger this internal','line_number':275,'multiline':False]['text':' assert when the base is not a view. For now, we only do that same','line_number':276,'multiline':False]['text':' (wrong) thing as the old code which is to only check when the inputs is','line_number':277,'multiline':False]['text':' a backward differentiable view','line_number':278,'multiline':False]['text':' view_func ','line_number':289,'multiline':True]['text':' view_func ','line_number':291,'multiline':True]['text':'shared_view_info','line_number':300,'multiline':True]['text':' TODO: fix fb internal use-case so that it doesn't trigger this internal','line_number':315,'multiline':False]['text':' assert when the base is not a view. In this code, the assert should be','line_number':316,'multiline':False]['text':' outside of the if statement.','line_number':317,'multiline':False]['text':' It is ok to create a ViewInfo where only the base is correct in this','line_number':323,'multiline':False]['text':' case as inplace operations on such views are not allowed','line_number':324,'multiline':False]['text':' view_func ','line_number':325,'multiline':True]['text':' view_func ','line_number':327,'multiline':True]['text':' Check if base is a forward differentiable view','line_number':335,'multiline':False]['text':' It is ok to create a ViewInfo where only the base is correct in this','line_number':343,'multiline':False]['text':' case as inplace operations on such views are not allowed','line_number':344,'multiline':False]['text':' view_func ','line_number':345,'multiline':True]['text':' view_func ','line_number':347,'multiline':True]['text':' is_view() => diff_view_meta','line_number':352,'multiline':False]['text':'shared_view_info','line_number':363,'multiline':True]['text':' GradMode check is expensive, so check it only once for TensorLists','line_number':400,'multiline':False]['text':'check_grad_mode','line_number':405,'multiline':True]['text':' GradMode check is expensive, so check it only once for TensorLists','line_number':413,'multiline':False]['text':'check_grad_mode','line_number':419,'multiline':True]['text':' Assumed that saved tensor lists are never inplace outputs','line_number':424,'multiline':False]['text':' is output ','line_number':429,'multiline':True]['text':' Assumed that saved tensor lists are never inplace outputs','line_number':433,'multiline':False]['text':' is output ','line_number':441,'multiline':True]['text':' is output ','line_number':443,'multiline':True]['text':' If run_jit_decomposition were not a member function, we would be able','line_number':482,'multiline':False]['text':' to pass this as a template parameter to c10::Boxedkernel::makeFromFunction.','line_number':483,'multiline':False]['text':' However, member functions cannot be passed this way - instead we wrap our','line_number':484,'multiline':False]['text':' call in this functor so it can be passed to c10::BoxedKernel::makeFromFunctor','line_number':485,'multiline':False]['text':' namespace','line_number':499,'multiline':False]['text':' see NOTE: [Jit Decomposition Interface]','line_number':507,'multiline':False]['text':' namespace impl','line_number':529,'multiline':False]['text':' namespace autograd','line_number':531,'multiline':False]['text':' namespace torch','line_number':532,'multiline':False]