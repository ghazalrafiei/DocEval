['text':' Required for cpp_custom_type_hack to work','line_number':10,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':11,'multiline':False]['text':' namespace caffe2','line_number':13,'multiline':False]['text':' Creates a new profiling scope using RecordFunction and invokes its starting','line_number':19,'multiline':False]['text':' callbacks.','line_number':20,'multiline':False]['text':' Legacy signature using cpp_custom_type_hack','line_number':35,'multiline':False]['text':' New signature using custom_class','line_number':44,'multiline':False]['text':' Ends the profiling scope created with record_function_enter.','line_number':60,'multiline':False]['text':' Legacy signature using cpp_custom_type_hack','line_number':65,'multiline':False]['text':' We don't actually need to do anything with handle just need to persist the','line_number':67,'multiline':False]['text':' lifetime until now.','line_number':68,'multiline':False]['text':' New signature using custom_class','line_number':73,'multiline':False]['text':' Profiling callback that ends the associated record_function','line_number':83,'multiline':False]['text':' and returns the value of the passed in future.','line_number':84,'multiline':False]['text':' Note: this future is returned to the user to ensure that a call to','line_number':89,'multiline':False]['text':' wait() ensures that profiling callbacks have ran. To ensure that this','line_number':90,'multiline':False]['text':' is transparent, we must make this future propagate the value of the','line_number':91,'multiline':False]['text':' RPC future. Use value() here instead of constValue() to ensure we','line_number':92,'multiline':False]['text':' propagate errors.','line_number':93,'multiline':False]['text':' Define a future that completes after the profiling callbacks are run.','line_number':96,'multiline':False]['text':' Legacy signature using cpp_custom_type_hack','line_number':103,'multiline':False]['text':' New signature using custom_class','line_number':120,'multiline':False]['text':' Internal only, do not use directly, use Python's record_function()','line_number':128,'multiline':False]['text':' Pop inputs, which should be a future and a tensor','line_number':145,'multiline':False]['text':' return future that completes when profiling callbacks have run.','line_number':149,'multiline':False]['text':' Pop inputs, which should be a future and a PythonRecordFunction','line_number':157,'multiline':False]['text':' return future that completes when profiling callbacks have run.','line_number':162,'multiline':False]['text':' namespace profiler','line_number':168,'multiline':False]['text':' namespace autograd','line_number':169,'multiline':False]['text':' namespace torch','line_number':170,'multiline':False]