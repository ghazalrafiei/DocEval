['text':' ============================================================================','line_number':46,'multiline':False]['text':' == Miscellaneous structs and utils =========================================','line_number':47,'multiline':False]['text':' ============================================================================','line_number':48,'multiline':False]['text':' namespace','line_number':101,'multiline':False]['text':' namespace impl','line_number':102,'multiline':False]['text':' namespace profiler','line_number':103,'multiline':False]['text':' namespace torch','line_number':104,'multiline':False]['text':' ============================================================================','line_number':117,'multiline':False]['text':' == CallTypeHelper: Tools for generic programming on specializations. =======','line_number':118,'multiline':False]['text':' ============================================================================','line_number':119,'multiline':False]['text':' ============================================================================','line_number':149,'multiline':False]['text':' == Event type definitions. =================================================','line_number':150,'multiline':False]['text':' ============================================================================','line_number':151,'multiline':False]['text':' When we are tracing a Python program, the general procedure is to record','line_number':152,'multiline':False]['text':' every time we enter or exit a function and later replay these events during','line_number':153,'multiline':False]['text':' post processing. Thus, during the profiling phase we want to do the MINIMAL','line_number':154,'multiline':False]['text':' amount of work to capture all of the information that we need; otherwise we','line_number':155,'multiline':False]['text':' will distort the profile. (While we don't wish to be terribly inefficient','line_number':156,'multiline':False]['text':' during post processing, we are willing to do extra fixup work in post if it','line_number':157,'multiline':False]['text':' reduces overhead in the profiling phase.)','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':' When the tracer first enters a frame, it constructs a CallKey for that','line_number':160,'multiline':False]['text':' location. The contents of the key vary by context. For a python function','line_number':161,'multiline':False]['text':' the key is the (PyCodeObject*, int) pair that defines the bytecode of the','line_number':162,'multiline':False]['text':' function. For an `nn.Module` the key is a (non-owning) pointer to `self`.','line_number':163,'multiline':False]['text':' For a bound C function it is a (non-owning) pointer to the bound function.','line_number':164,'multiline':False]['text':' A CallKey should be small, inexpensive, and POD.','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':' We then collect a CallKey<CallType::PyCall> for the calling frame for better','line_number':167,'multiline':False]['text':' source tracking. This pair is a `Callsite`, and serves as a first level key','line_number':168,'multiline':False]['text':' during tracing. We lookup the Callsite in a thread local cache which maps','line_number':169,'multiline':False]['text':' Callsite to a unique integer `TraceKey`. On a cache hit, we simply store the','line_number':170,'multiline':False]['text':' TraceKey and return. On a cache miss, we use a global value cache to store','line_number':171,'multiline':False]['text':' whatever fields we need from the two CallKeys, generate a new TraceKey, and','line_number':172,'multiline':False]['text':' update the local cache.','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' During post processing we:','line_number':175,'multiline':False]['text':'   1) Determine the type represented by a TraceKey by checking which','line_number':176,'multiline':False]['text':'      sub-cache it appears in in the thread local cache.','line_number':177,'multiline':False]['text':'   2) Look up the pair of CallKeys from the thread local cache.','line_number':178,'multiline':False]['text':'   3) Look up the expanded values of each CallKey from the global value cache.','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' To add a new event type to the cache:','line_number':181,'multiline':False]['text':'   1) Add an entry to the `CallType` enum.','line_number':182,'multiline':False]['text':'   2) Add a specialization of Config which defined key_t, ephemeral_t and','line_number':183,'multiline':False]['text':'      cache_t.','line_number':184,'multiline':False]['text':'   3) Add a specialization of ValueCache::store and ValueCache::load.','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' -------------------------','line_number':187,'multiline':False]['text':' -- Ephemeral arguments --','line_number':188,'multiline':False]['text':' -------------------------','line_number':189,'multiline':False]['text':' The value cache mechanism assumes that `key_t` is enough to specify the','line_number':190,'multiline':False]['text':' correct value. However it may not be possible to materialize a value using','line_number':191,'multiline':False]['text':' only an instance of `key_t`. As a result, the cache also accepts "ephemeral"','line_number':192,'multiline':False]['text':' inputs which can be used to populate the value cache. Ephemeral inputs come','line_number':193,'multiline':False]['text':' with two caveats:','line_number':194,'multiline':False]['text':'  1) They are NOT safe to save, and cannot be used after `ValueCache::store`.','line_number':195,'multiline':False]['text':'  2) They should be used to access data that is not expect to change from','line_number':196,'multiline':False]['text':'     call to call, such as the name of a function.','line_number':197,'multiline':False]['text':' `nn.Module.forward` or `optim.Optimizer._optimizer_step_code`','line_number':222,'multiline':False]['text':' ============================================================================','line_number':252,'multiline':False]['text':' == Callsite & ValueCache: Storage during profiling =========================','line_number':253,'multiline':False]['text':' ============================================================================','line_number':254,'multiline':False]['text':' ============================================================================','line_number':276,'multiline':False]['text':' == Type specific store and load implementations. ===========================','line_number':277,'multiline':False]['text':' ============================================================================','line_number':278,'multiline':False]['text':'end_time_ns=','line_number':297,'multiline':True]['text':'frame_state_=','line_number':422,'multiline':True]['text':'module_info_=','line_number':423,'multiline':True]['text':'optimizer_info_=','line_number':424,'multiline':True]['text':' While `self.state` is permitted to store data in an arbitrary way,','line_number':442,'multiline':False]['text':' all generic optimizers (SGD, Adam, etc) use param as the key since','line_number':443,'multiline':False]['text':' the state in question is tied to particular parameters. We can','line_number':444,'multiline':False]['text':' relax this assumption if the need arises.','line_number':445,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':468,'multiline':False]['text':'frame_state_=','line_number':469,'multiline':True]['text':'module_info_=','line_number':470,'multiline':True]['text':'optimizer_info_=','line_number':471,'multiline':True]['text':' TODO: Use re2.','line_number':490,'multiline':False]['text':' ============================================================================','line_number':511,'multiline':False]['text':' == TraceKey cache ==========================================================','line_number':512,'multiline':False]['text':' ============================================================================','line_number':513,'multiline':False]['text':' ============================================================================','line_number':551,'multiline':False]['text':' == Core CPython data types =================================================','line_number':552,'multiline':False]['text':' ============================================================================','line_number':553,'multiline':False]['text':' PyObject that allows different threads to record events without colliding.','line_number':554,'multiline':False]['text':' It is passed as the second argument when enabling tracing via','line_number':555,'multiline':False]['text':' `PyEval_SetProfile`.','line_number':556,'multiline':False]['text':' CPython boilerplate to define `TraceContext` as a proper python object.','line_number':563,'multiline':False]['text':' tp_name ','line_number':565,'multiline':True]['text':' tp_basicsize ','line_number':566,'multiline':True]['text':' tp_itemsize ','line_number':567,'multiline':True]['text':' tp_dealloc ','line_number':568,'multiline':True]['text':' tp_vectorcall_offset ','line_number':570,'multiline':True]['text':' NOLINT: modernize-use-nullptr','line_number':570,'multiline':False]['text':' tp_getattr ','line_number':571,'multiline':True]['text':' tp_setattr ','line_number':572,'multiline':True]['text':' tp_reserved ','line_number':573,'multiline':True]['text':' tp_repr ','line_number':574,'multiline':True]['text':' tp_as_number ','line_number':575,'multiline':True]['text':' tp_as_sequence ','line_number':576,'multiline':True]['text':' tp_as_mapping ','line_number':577,'multiline':True]['text':' tp_hash  ','line_number':578,'multiline':True]['text':' tp_call ','line_number':579,'multiline':True]['text':' tp_str ','line_number':580,'multiline':True]['text':' tp_getattro ','line_number':581,'multiline':True]['text':' tp_setattro ','line_number':582,'multiline':True]['text':' tp_as_buffer ','line_number':583,'multiline':True]['text':' tp_flags ','line_number':584,'multiline':True]['text':' tp_doc ','line_number':585,'multiline':True]['text':' tp_traverse ','line_number':586,'multiline':True]['text':' tp_clear ','line_number':587,'multiline':True]['text':' tp_richcompare ','line_number':588,'multiline':True]['text':' tp_weaklistoffset ','line_number':589,'multiline':True]['text':' tp_iter ','line_number':590,'multiline':True]['text':' tp_iternext ','line_number':591,'multiline':True]['text':' tp_methods ','line_number':592,'multiline':True]['text':' tp_members ','line_number':593,'multiline':True]['text':' tp_getset ','line_number':594,'multiline':True]['text':' tp_base ','line_number':595,'multiline':True]['text':' tp_dict ','line_number':596,'multiline':True]['text':' tp_descr_get ','line_number':597,'multiline':True]['text':' tp_descr_set ','line_number':598,'multiline':True]['text':' tp_dictoffset ','line_number':599,'multiline':True]['text':' tp_init ','line_number':600,'multiline':True]['text':' tp_alloc ','line_number':601,'multiline':True]['text':' tp_new ','line_number':602,'multiline':True]['text':' tp_free ','line_number':603,'multiline':True]['text':' `gil_scoped_acquire` is a bit fragile in on-demand mode:','line_number':613,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/91684#issuecomment-1413154458','line_number':614,'multiline':False]['text':' ============================================================================','line_number':629,'multiline':False]['text':' == Thread local cache ======================================================','line_number':630,'multiline':False]['text':' ============================================================================','line_number':631,'multiline':False]['text':' ============================================================================','line_number':675,'multiline':False]['text':' == Tracing implementation ==================================================','line_number':676,'multiline':False]['text':' ============================================================================','line_number':677,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':681,'multiline':False]['text':' Register the tracer in each thread.','line_number':764,'multiline':False]['text':' When we begin profiling there are already frames on the Python','line_number':771,'multiline':False]['text':' interpreter stack. To ensure a complete trace, we must push calls','line_number':772,'multiline':False]['text':' to all the prior frames onto our event stack. (We stop at depth=128)','line_number':773,'multiline':False]['text':' Make sure we can't infinite loop.','line_number':779,'multiline':False]['text':' NB: `PyFrame_GetBack` returns a strong reference.','line_number':786,'multiline':False]['text':' We hold one reference in `current_stack`, and the interpreter holds','line_number':794,'multiline':False]['text':' another.','line_number':795,'multiline':False]['text':' Note:','line_number':799,'multiline':False]['text':'   This profile will not compose with other CPython profilers, and','line_number':800,'multiline':False]['text':'   cannot be round tripped via `sys.settrace(sys.gettrace())`','line_number':801,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':822,'multiline':False]['text':' By default, CPython stores locals in a "fast" format, with an array','line_number':838,'multiline':False]['text':' of names and an array of values. Consequently, frame->f_locals is','line_number':839,'multiline':False]['text':' NULL since the interpreter has no need to populate it.','line_number':840,'multiline':False]['text':'','line_number':841,'multiline':False]['text':' If these arrays were part of the public API then we could very','line_number':842,'multiline':False]['text':' quickly access `self`. Unfortunately they are not, and moreover are','line_number':843,'multiline':False]['text':' not stable across versions. As a result, we are forced to call','line_number':844,'multiline':False]['text':' `PyFrame_FastToLocals` which forces the interpreter to materialize','line_number':845,'multiline':False]['text':' the full dict of locals.','line_number':846,'multiline':False]['text':' NB: For C calls a new frame is not created, so we use `frame` rather than','line_number':880,'multiline':False]['text':'     `frame->f_back`.','line_number':881,'multiline':False]['text':' ============================================================================','line_number':887,'multiline':False]['text':' == Post processing =========================================================','line_number':888,'multiline':False]['text':' ============================================================================','line_number':889,'multiline':False]['text':' Allows us to detect unhandled start frames','line_number':922,'multiline':False]['text':' Handle events which were still running when profiling ended.','line_number':995,'multiline':False]['text':' Assign system TIDs to start events based on the system TID of the next','line_number':1002,'multiline':False]['text':' observed event with the same Python TID.','line_number':1003,'multiline':False]['text':' ============================================================================','line_number':1085,'multiline':False]['text':' == API =====================================================================','line_number':1086,'multiline':False]['text':' ============================================================================','line_number':1087,'multiline':False]['text':' namespace','line_number':1121,'multiline':False]['text':' namespace impl','line_number':1122,'multiline':False]['text':' namespace profiler','line_number':1123,'multiline':False]['text':' namespace torch','line_number':1124,'multiline':False]['text':' namespace python_tracer','line_number':1137,'multiline':False]['text':' namespace profiler','line_number':1138,'multiline':False]['text':' namespace autograd','line_number':1139,'multiline':False]['text':' namespace torch','line_number':1140,'multiline':False]