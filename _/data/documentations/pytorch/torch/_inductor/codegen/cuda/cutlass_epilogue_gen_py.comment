['text':' Used as a magic string to indicate an unsupported sympy expression','line_number':11,'multiline':False]['text':' became part of generated C++ code.','line_number':12,'multiline':False]['text':' If this return value containting the _MAGIC_SYMPY_ERROR_STRING','line_number':18,'multiline':False]['text':' is used as part of the final generated C++ code,','line_number':19,'multiline':False]['text':' a CUTLASSEVTOpNotImplementedError is raised to indicate that','line_number':20,'multiline':False]['text':' the op could not be converted to a valid EVT expression.','line_number':21,'multiline':False]['text':' each epilogue node results in a single "using" statement and may refer to the previous steps by name','line_number':100,'multiline':False]['text':' replace line with a new variable name','line_number':122,'multiline':False]['text':' Load an input to an operation. Might be the output of the matmul, the result','line_number':134,'multiline':False]['text':' of a previous epilogue node, a constant or (TODO) an auxiliary input.','line_number':135,'multiline':False]['text':' return f"cutlass::epilogue::fusion::Sm90SrcFetch /* :={name} */"','line_number':141,'multiline':False]['text':' Load a constant','line_number':147,'multiline':False]['text':' Perform a named operation on two inputs','line_number':156,'multiline':False]['text':' see https://github.com/NVIDIA/cutlass/blob/6407bcdf0a24097b7b016ee105937693c62f9923/include/cutlass/functional.h for ops','line_number':157,'multiline':False]['text':' noqa: B950','line_number':158,'multiline':False]['text':' Convert the final output to the dtype of the output buffer','line_number':161,'multiline':False]['text':' noqa: B950','line_number':162,'multiline':False]['text':' no-op in our case, since we convert to the output dtype at the end and convert everything to the accumulator','line_number':165,'multiline':False]['text':' dtype.','line_number':166,'multiline':False]['text':' Is is asserted ( and ascertained during can_fuse decision ) that the dtype remains compatible','line_number':167,'multiline':False]['text':' throughout the fusion chain.','line_number':168,'multiline':False]['text':' noqa: B950','line_number':169,'multiline':False]['text':' noqa: B950','line_number':197,'multiline':False]['text':' Add more ops here...','line_number':202,'multiline':False]['text':' Return final result','line_number':204,'multiline':False]['text':'','line_number':240,'multiline':False]['text':' The output buffer for codegen','line_number':241,'multiline':False]['text':' used to generate variable names, incremented for each new variable','line_number':243,'multiline':False]['text':' Aliases for subexpression functors','line_number':245,'multiline':False]['text':' each epilogue node results in a single "using" statement and may refer to the previous steps by name','line_number':265,'multiline':False]['text':' Is is asserted ( and ascertained during can_fuse decision ) that the dtype remains compatible','line_number':343,'multiline':False]['text':' throughout the fusion chain.','line_number':344,'multiline':False]