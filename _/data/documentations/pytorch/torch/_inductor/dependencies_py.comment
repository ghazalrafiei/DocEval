['text':' depends on the entire buffer','line_number':76,'multiline':False]['text':' Used for tracking mutation ordering','line_number':109,'multiline':False]['text':' if A reads a buffer and B mutates it','line_number':110,'multiline':False]['text':' B must be ordered after A','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' It is weak because if it turns out A's read is never used, we can still','line_number':113,'multiline':False]['text':' eliminate it','line_number':114,'multiline':False]['text':' Purely inserted for ordering, not an actual dep','line_number':131,'multiline':False]['text':' type: ignore[name-defined]','line_number':212,'multiline':False]['text':' Try to further simplify the indexes even if simplify_loops didn't','line_number':232,'multiline':False]['text':' convert it to the simplest form because of the interference from','line_number':233,'multiline':False]['text':' different indexing formulas.','line_number':234,'multiline':False]['text':' TODO(jansel): explore this further normalization','line_number':239,'multiline':False]['text':' if k in free_symbols','line_number':240,'multiline':False]['text':' assign new variables each dimension to deal with numbering mismatches','line_number':250,'multiline':False]['text':' d0, d1, d2 could become d0, d2 -- which won't match d0, d1','line_number':251,'multiline':False]['text':' Reduction has last (reduced) dim in its sizes, but','line_number':260,'multiline':False]['text':' downstream users won't.  Normalize this away.','line_number':261,'multiline':False]['text':' type: ignore[name-defined]','line_number':310,'multiline':False]['text':' Number of vars could differ due to normalization','line_number':364,'multiline':False]['text':' Input node has already been realized. Return its size and reduction_size.','line_number':392,'multiline':False]['text':' type: ignore[attr-defined]','line_number':400,'multiline':False]['text':' Other IRNodes do not have reduction_ranges.','line_number':401,'multiline':False]['text':' There is one issue: what if there are views / permutations between the input node and its dependent realized nodes?','line_number':404,'multiline':False]['text':' The current method still uses reduction ranges from the dependent realized node, which is not ideal.','line_number':405,'multiline':False]['text':' Is there a way to check whether there are permutations inbetween?','line_number':406,'multiline':False]