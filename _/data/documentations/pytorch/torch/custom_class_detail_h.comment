['text':'*
 * In the Facebook internal build (using BUCK), this macro is enabled by
 * passing in -c pt.enable_record_kernel_dtype=1 when building the tracer
 * binary.
 ','line_number':12,'multiline':True]['text':'*
 * Record an instance of a custom class being loaded
 * grab portion of string after final '.' from qualified name
 * as this seemingly aligns with how users name their custom classes
 * example: __torch__.torch.classes.xnnpack.Conv2dOpContext
 ','line_number':20,'multiline':True]['text':' namespace detail','line_number':32,'multiline':False]['text':'/ This struct is used to represent default values for arguments','line_number':34,'multiline':False]['text':'/ when registering methods for custom classes.','line_number':35,'multiline':False]['text':'/     static auto register_foo = torch::class_<Foo>("myclasses", "Foo")','line_number':36,'multiline':False]['text':'/       .def("myMethod", &Foo::myMethod, {torch::arg("name") = name});','line_number':37,'multiline':False]['text':' Static method for representing a default value of None. This is meant to','line_number':39,'multiline':False]['text':' be used like so:','line_number':40,'multiline':False]['text':'     torch::arg("name") = torch::arg::none','line_number':41,'multiline':False]['text':' and is identical to:','line_number':42,'multiline':False]['text':'     torch::arg("name") = IValue()','line_number':43,'multiline':False]['text':' Explicit constructor.','line_number':48,'multiline':False]['text':' Assignment operator. This enables the pybind-like syntax of','line_number':51,'multiline':False]['text':' torch::arg("name") = value.','line_number':52,'multiline':False]['text':' The name of the argument. This is copied to the schema; argument','line_number':58,'multiline':False]['text':' names cannot be extracted from the C++ declaration.','line_number':59,'multiline':False]['text':' IValue's default constructor makes it None, which is not distinguishable','line_number':61,'multiline':False]['text':' from an actual, user-provided default value that is None. This boolean','line_number':62,'multiline':False]['text':' helps distinguish between the two cases.','line_number':63,'multiline':False]['text':' Argument type utilities','line_number':69,'multiline':False]['text':' Adapter for different callable types','line_number':100,'multiline':False]['text':' when sizeof...(ivalue_arg_indices) == 0, this argument would','line_number':130,'multiline':False]['text':' be unused and we have to silence the compiler warning.','line_number':131,'multiline':False]['text':' TODO We shouldn't use c10::impl stuff directly here. We should use the','line_number':137,'multiline':False]['text':' KernelFunction API instead.','line_number':138,'multiline':False]['text':' namespace detail','line_number':216,'multiline':False]['text':' Given a qualified name (e.g. __torch__.torch.classes.Foo), return','line_number':221,'multiline':False]['text':' the ClassType pointer to the Type that describes that custom class,','line_number':222,'multiline':False]['text':' or nullptr if no class by that name was found.','line_number':223,'multiline':False]['text':' Given an IValue, return true if the object contained in that IValue','line_number':226,'multiline':False]['text':' is a custom C++ class, otherwise return false.','line_number':227,'multiline':False]['text':' This API is for testing purposes ONLY. It should not be used in','line_number':230,'multiline':False]['text':' any load-bearing code.','line_number':231,'multiline':False]['text':' namespace jit','line_number':237,'multiline':False]['text':' namespace torch','line_number':239,'multiline':False]