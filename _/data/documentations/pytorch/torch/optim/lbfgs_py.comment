['text':' ported from https://github.com/torch/optim/blob/master/polyinterp.lua','line_number':8,'multiline':False]['text':' Compute bounds of interpolation area','line_number':9,'multiline':False]['text':' Code for most common case: cubic interpolation of 2 points','line_number':15,'multiline':False]['text':'   w/ function and derivative values for both','line_number':16,'multiline':False]['text':' Solution in this case (where x2 is the farthest point):','line_number':17,'multiline':False]['text':'   d1 = g1 + g2 - 3*(f1-f2)/(x1-x2);','line_number':18,'multiline':False]['text':'   d2 = sqrt(d1^2 - g1*g2);','line_number':19,'multiline':False]['text':'   min_pos = x2 - (x2 - x1)*((g2 + d2 - d1)/(g2 - g1 + 2*d2));','line_number':20,'multiline':False]['text':'   t_new = min(max(min_pos,xmin_bound),xmax_bound);','line_number':21,'multiline':False]['text':' ported from https://github.com/torch/optim/blob/master/lswolfe.lua','line_number':46,'multiline':False]['text':' evaluate objective and gradient using initial step','line_number':49,'multiline':False]['text':' bracket an interval containing a point satisfying the Wolfe criteria','line_number':54,'multiline':False]['text':' check conditions','line_number':59,'multiline':False]['text':' interpolate','line_number':81,'multiline':False]['text':' next step','line_number':94,'multiline':False]['text':' reached max number of iterations?','line_number':104,'multiline':False]['text':' zoom phase: we now have a point satisfying the criteria, or','line_number':110,'multiline':False]['text':' a bracket around it. We refine the bracket until we find the','line_number':111,'multiline':False]['text':' exact point satisfying the criteria','line_number':112,'multiline':False]['text':' find high and low points in bracket','line_number':114,'multiline':False]['text':' line-search bracket is so small','line_number':117,'multiline':False]['text':' compute new trial value','line_number':121,'multiline':False]['text':' test that we are making sufficient progress:','line_number':125,'multiline':False]['text':' in case `t` is so close to boundary, we mark that we are making','line_number':126,'multiline':False]['text':' insufficient progress, and if','line_number':127,'multiline':False]['text':'   + we have made insufficient progress in the last step, or','line_number':128,'multiline':False]['text':'   + `t` is at one of the boundary,','line_number':129,'multiline':False]['text':' we will move `t` to a position which is `0.1 * len(bracket)`','line_number':130,'multiline':False]['text':' away from the nearest boundary point.','line_number':131,'multiline':False]['text':' interpolation close to boundary','line_number':134,'multiline':False]['text':' evaluate at 0.1 away from boundary','line_number':136,'multiline':False]['text':' Evaluate new point','line_number':147,'multiline':False]['text':' Armijo condition not satisfied or not lower than lowest point','line_number':154,'multiline':False]['text':' Wolfe conditions satisfied','line_number':162,'multiline':False]['text':' old high becomes new low','line_number':165,'multiline':False]['text':' new point becomes new low','line_number':171,'multiline':False]['text':' return stuff','line_number':177,'multiline':False]['text':' view as to avoid deprecated pointwise semantics','line_number':266,'multiline':False]['text':' Make sure the closure is always called with grad enabled','line_number':295,'multiline':False]['text':' NOTE: LBFGS has only global state, but we register it as state for','line_number':307,'multiline':False]['text':' the first param, because this helps with casting in load_state_dict','line_number':308,'multiline':False]['text':' evaluate initial f(x) and df/dx','line_number':313,'multiline':False]['text':' optimal condition','line_number':322,'multiline':False]['text':' tensors cached in state (for tracing)','line_number':326,'multiline':False]['text':' optimize for a max of max_iter iterations','line_number':337,'multiline':False]['text':' keep track of nb of iterations','line_number':339,'multiline':False]['text':'###########################################################','line_number':343,'multiline':False]['text':' compute gradient descent direction','line_number':344,'multiline':False]['text':'###########################################################','line_number':345,'multiline':False]['text':' do lbfgs update (update memory)','line_number':353,'multiline':False]['text':' y*s','line_number':356,'multiline':False]['text':' updating memory','line_number':358,'multiline':False]['text':' shift history by one (limited-memory)','line_number':360,'multiline':False]['text':' store new direction/step','line_number':365,'multiline':False]['text':' update scale of initial Hessian approximation','line_number':370,'multiline':False]['text':' (y*y)','line_number':371,'multiline':False]['text':' compute the approximate (L-BFGS) inverse Hessian','line_number':373,'multiline':False]['text':' multiplied by the gradient','line_number':374,'multiline':False]['text':' iteration in L-BFGS loop collapsed to use just one buffer','line_number':381,'multiline':False]['text':' multiply by initial Hessian','line_number':387,'multiline':False]['text':' r/d is the final direction','line_number':388,'multiline':False]['text':'###########################################################','line_number':400,'multiline':False]['text':' compute step length','line_number':401,'multiline':False]['text':'###########################################################','line_number':402,'multiline':False]['text':' reset initial guess for step size','line_number':403,'multiline':False]['text':' directional derivative','line_number':409,'multiline':False]['text':' g * d','line_number':410,'multiline':False]['text':' directional derivative is below tolerance','line_number':412,'multiline':False]['text':' optional line search: user function','line_number':416,'multiline':False]['text':' perform line search, using user function','line_number':419,'multiline':False]['text':' no line search, simply move with fixed-step','line_number':433,'multiline':False]['text':' re-evaluate function only if not in last iteration','line_number':436,'multiline':False]['text':' the reason we do this: in a stochastic setting,','line_number':437,'multiline':False]['text':' no use to re-evaluate that function here','line_number':438,'multiline':False]['text':' update func eval','line_number':445,'multiline':False]['text':'###########################################################','line_number':449,'multiline':False]['text':' check conditions','line_number':450,'multiline':False]['text':'###########################################################','line_number':451,'multiline':False]['text':' optimal condition','line_number':458,'multiline':False]['text':' lack of progress','line_number':462,'multiline':False]