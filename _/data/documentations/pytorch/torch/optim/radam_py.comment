['text':' Lazy state initialization','line_number':81,'multiline':False]['text':' Exponential moving average of gradient values','line_number':84,'multiline':False]['text':' Exponential moving average of squared gradient values','line_number':88,'multiline':False]['text':' kwonly args with defaults are not supported by functions compiled with torchscript issue #70627','line_number':220,'multiline':False]['text':' setting this as kwarg for now as functional API is compiled by torch/distributed/optim','line_number':221,'multiline':False]['text':' update step','line_number':300,'multiline':False]['text':' Decay the first and second moment running average coefficient','line_number':313,'multiline':False]['text':' correcting bias for the first moving moment','line_number':317,'multiline':False]['text':' maximum length of the approximated SMA','line_number':320,'multiline':False]['text':' compute the length of the approximated SMA','line_number':322,'multiline':False]['text':' Compute the variance rectification term and update parameters accordingly','line_number':326,'multiline':False]['text':' Update steps','line_number':374,'multiline':False]['text':' If steps are on CPU, foreach will fall back to the slow path, which is a for-loop calling t.add(1) over','line_number':375,'multiline':False]['text':' and over. 1 will then be wrapped into a Tensor over and over again, which is slower than if we just','line_number':376,'multiline':False]['text':' wrapped it once now. The alpha is required to assure we go to the right overload.','line_number':377,'multiline':False]['text':' maximum length of the approximated SMA','line_number':386,'multiline':False]['text':' compute the length of the approximated SMA','line_number':388,'multiline':False]['text':' Decay the first and second moment running average coefficient','line_number':398,'multiline':False]['text':' Delete the local intermediate since it won't be used anymore to save on peak memory','line_number':404,'multiline':False]['text':' Here, buffer = sqrt(1 - beta2^t) * rect_step_size / (sqrt(v) + eps) + unrect_step_size','line_number':433,'multiline':False]