['text':' FILES TO EXCLUDE (match is done with suffix using `endswith`)','line_number':11,'multiline':False]['text':' You wouldn't drive without a seatbelt, though, so why would you','line_number':12,'multiline':False]['text':' launch a kernel without some safety? Use this as a quick workaround','line_number':13,'multiline':False]['text':' for a problem with the checker, fix the checker, then de-exclude','line_number':14,'multiline':False]['text':' the files in question.','line_number':15,'multiline':False]['text':' Without using a C++ AST we can't 100% detect kernel launches, so we','line_number':18,'multiline':False]['text':' model them as having the pattern "<<<parameters>>>(arguments);"','line_number':19,'multiline':False]['text':' We then require that `C10_CUDA_KERNEL_LAUNCH_CHECK` be','line_number':20,'multiline':False]['text':' the next statement.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' We model the next statement as ending at the next `}` or `;`.','line_number':23,'multiline':False]['text':' If we see `}` then a clause ended (bad) if we see a semi-colon then','line_number':24,'multiline':False]['text':' we expect the launch check just before it.','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' Since the kernel launch can include lambda statements, it's important','line_number':27,'multiline':False]['text':' to find the correct end-paren of the kernel launch. Doing this with','line_number':28,'multiline':False]['text':' pure regex requires recursive regex, which aren't part of the Python','line_number':29,'multiline':False]['text':' standard library. To avoid an additional dependency, we build a prefix','line_number':30,'multiline':False]['text':' regex that finds the start of a kernel launch, use a paren-matching','line_number':31,'multiline':False]['text':' algorithm to find the end of the launch, and then another regex to','line_number':32,'multiline':False]['text':' determine if a launch check is present.','line_number':33,'multiline':False]['text':' Finds potential starts of kernel launches','line_number':35,'multiline':False]['text':' This pattern should start at the character after the final paren of the','line_number':40,'multiline':False]['text':' kernel launch. It returns a match if the launch check is not the next statement','line_number':41,'multiline':False]['text':' We break the code apart and put it back together to add','line_number':84,'multiline':False]['text':' helpful line numberings for identifying problem areas','line_number':85,'multiline':False]['text':' Split by line breaks','line_number':86,'multiline':False]['text':' Number the lines','line_number':87,'multiline':False]['text':' Put it back together','line_number':88,'multiline':False]['text':' Go up to parent torch','line_number':127,'multiline':False]['text':' Go up to parent caffe2','line_number':128,'multiline':False]['text':' `$BASE/build` and `$BASE/torch/include` are generated','line_number':133,'multiline':False]['text':' so we don't want to flag their contents','line_number':134,'multiline':False]['text':' Curtail search by modifying dirnames and filenames in place','line_number':136,'multiline':False]['text':' Yes, this is the way to do this, see `help(os.walk)`','line_number':137,'multiline':False]