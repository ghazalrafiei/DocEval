['text':' no faulty_messages defined so this fails all retryable messages - see','line_number':28,'multiline':False]['text':' faulty_rpc_agent_test_fixture.py for the list of retryable messages.','line_number':29,'multiline':False]['text':' Worker0 sends RPC to Worker1 and creates an RRef there','line_number':36,'multiline':False]['text':' Worker0 sends an RPC to Worker2 with the RRef as an arg','line_number':38,'multiline':False]['text':' check if the output is as expected','line_number':40,'multiline':False]['text':' explicitly delete all User RRefs','line_number':42,'multiline':False]['text':' Since we fail python_remote_call messages synchronously, the future','line_number':74,'multiline':False]['text':' corresponding to this remote call will be marked with an error when','line_number':75,'multiline':False]['text':' this function returns.','line_number':76,'multiline':False]['text':' Call to ensure pending callbacks are run.','line_number':78,'multiline':False]['text':' Attempt to fork the RRef should raise an error indicating the rpc.remote timeout.','line_number':80,'multiline':False]['text':' Test that using RRef as arg over RPC (which forks) results in the same','line_number':83,'multiline':False]['text':' error','line_number':84,'multiline':False]['text':' test the case where rpc.remote() message creation is completely dropped.','line_number':101,'multiline':False]['text':' Since we fail python_remote_call messages synchronously, the future','line_number':104,'multiline':False]['text':' corresponding to this remote call will be marked with an error when','line_number':105,'multiline':False]['text':' this function returns.','line_number':106,'multiline':False]['text':' Call to ensure pending callbacks are run.','line_number':108,'multiline':False]['text':' Note: during shutdown, logs will indicate "Could not find OwnerRRef..."','line_number':112,'multiline':False]['text':' on the owning nodes, this is expected because the OwnerRRef was never','line_number':113,'multiline':False]['text':' successfully created. Therefore, delAllUsers will work as expected.','line_number':114,'multiline':False]['text':' Test the case where remote message is eventually processed on the owner,','line_number':143,'multiline':False]['text':' but the future on the creator times out before the response comes back.','line_number':144,'multiline':False]['text':' 10 ms timeout','line_number':147,'multiline':False]['text':' Future corresponding to the remote creation should time out.','line_number':149,'multiline':False]['text':' Call to ensure pending callbacks are run.','line_number':154,'multiline':False]['text':' to_here() should now pick up that rpc.remote() creation has failed.','line_number':156,'multiline':False]['text':' Test the case where rpc.remote() times out, but to_here() has already','line_number':160,'multiline':False]['text':' started blocking before.','line_number':161,'multiline':False]['text':' NOTE: we only test this when not sending to self, as to_here() calls','line_number':162,'multiline':False]['text':' calls localValue(), which does not send an RPC and thus does not have','line_number':163,'multiline':False]['text':' a timeout. This can be supported by allowing future.wait() to','line_number':164,'multiline':False]['text':' take in an optional timeout (https://github.com/pytorch/pytorch/issues/39280)','line_number':165,'multiline':False]['text':' to_here() should raise timeout error, since it does not know about the','line_number':170,'multiline':False]['text':' status of rpc.remote().','line_number':171,'multiline':False]['text':' Note: If we proceed with shutdown, UserRRef will send out a RRefUserDelete','line_number':173,'multiline':False]['text':' but this can be a noop since it may not exist on the owner yet. Later,','line_number':174,'multiline':False]['text':' the owner can process the RRef creation and wait for the delete message,','line_number':175,'multiline':False]['text':' thus leading to a timeout.','line_number':176,'multiline':False]['text':' Therefore, we wait until we get notification that pending owners have','line_number':177,'multiline':False]['text':' been confirmed before sending out RRefUserDeletes.','line_number':178,'multiline':False]['text':' PYTHON_CALL message types which correspond to Python UDF over RPC','line_number':251,'multiline':False]['text':' by default get a delay (see faulty_rpc_agent_test_fixture)','line_number':252,'multiline':False]['text':' Ensure that the currently set default timeout is large enough such','line_number':267,'multiline':False]['text':' that RPCs with delays still complete.','line_number':268,'multiline':False]['text':' Ensure timeout if we set a new default and don't override','line_number':274,'multiline':False]['text':' Ensure run to completion if we specify timeout of 0','line_number':282,'multiline':False]['text':' Reset for clean shutdown','line_number':287,'multiline':False]['text':' Ensure that the currently set default timeout is large enough such','line_number':302,'multiline':False]['text':' that RPCs with delays still complete.','line_number':303,'multiline':False]['text':' Ensure timeout if we set a new default and don't override','line_number':309,'multiline':False]['text':' Ensure run to completion if we specify timeout of 0','line_number':317,'multiline':False]['text':' Reset for clean shutdown','line_number':323,'multiline':False]