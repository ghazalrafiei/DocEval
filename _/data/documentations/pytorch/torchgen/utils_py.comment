['text':' Many of these functions share logic for defining both the definition','line_number':34,'multiline':False]['text':' and declaration (for example, the function signature is the same), so','line_number':35,'multiline':False]['text':' we organize them into one function that takes a Target to say which','line_number':36,'multiline':False]['text':' code we want.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' This is an OPEN enum (we may add more cases to it in the future), so be sure','line_number':39,'multiline':False]['text':' to explicitly specify with Literal[Target.XXX] or Literal[Target.XXX, Target.YYY]','line_number':40,'multiline':False]['text':' what targets are valid for your use.','line_number':41,'multiline':False]['text':' top level namespace (not including at)','line_number':43,'multiline':False]['text':' TORCH_LIBRARY(...) { ... }','line_number':46,'multiline':False]['text':' namespace { ... }','line_number':48,'multiline':False]['text':' namespace cpu { ... }','line_number':50,'multiline':False]['text':' Matches "foo" in "foo, bar" but not "foobar". Used to search for the','line_number':55,'multiline':False]['text':' occurrence of a parameter in the derivative formula','line_number':56,'multiline':False]['text':' TODO: Use a real parser here; this will get bamboozled','line_number':60,'multiline':False]['text':' These two functions purposely return generators in analogy to map()','line_number':72,'multiline':False]['text':' so that you don't mix up when you need to list() them','line_number':73,'multiline':False]['text':' Map over function that may return None; omit Nones from output sequence','line_number':76,'multiline':False]['text':' Map over function that returns sequences and cat them all together','line_number':84,'multiline':False]['text':' Conveniently add error context to exceptions raised.  Lets us','line_number':90,'multiline':False]['text':' easily say that an error occurred while processing a specific','line_number':91,'multiline':False]['text':' context.','line_number':92,'multiline':False]['text':' TODO: this does the wrong thing with KeyError','line_number':98,'multiline':False]['text':' A little trick from https://github.com/python/mypy/issues/6366','line_number':106,'multiline':False]['text':' for getting mypy to do exhaustiveness checking','line_number':107,'multiline':False]['text':' TODO: put this somewhere else, maybe','line_number':108,'multiline':False]['text':' String hash that's stable across different executions, unlike builtin hash','line_number':118,'multiline':False]['text':' A small abstraction for writing out generated files and keeping track','line_number':124,'multiline':False]['text':' of what files have been written (so you can write out a list of output','line_number':125,'multiline':False]['text':' files)','line_number':126,'multiline':False]['text':' Create output directory if it doesn't exist','line_number':147,'multiline':False]['text':' Read from template file and replace pattern with callable (type could be dict or str).','line_number':152,'multiline':False]['text':' TODO: Update the comment reference to the correct location','line_number':159,'multiline':False]['text':' Dry runs don't write any templates, so incomplete environments are fine','line_number':231,'multiline':False]['text':' filenames is used to track compiled files, but FooEverything.cpp isn't meant to be compiled','line_number':254,'multiline':False]['text':' Helper function to generate file manager','line_number':277,'multiline':False]['text':' Helper function to create a pretty representation for dataclasses','line_number':288,'multiline':False]['text':' built-in pprint module support dataclasses from python 3.10','line_number':294,'multiline':False]['text':' update current indentation level with class name','line_number':312,'multiline':False]['text':' update the current indent level with the field name','line_number':319,'multiline':False]['text':' dict, list, set and tuple also add indent as done in pprint','line_number':320,'multiline':False]['text':' if it exceed the max width then we place one element per line','line_number':382,'multiline':False]['text':' cpp_namespace can be a colon joined string such as torch::lazy','line_number':407,'multiline':False]['text':' Only allow certain level of namespaces','line_number':446,'multiline':False]