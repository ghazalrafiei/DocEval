['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'                        Lazy Tensor Codegen','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':44,'multiline':False]['text':' Overview','line_number':45,'multiline':False]['text':' ~~~~~~~~','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' This codegen script builds on existing data models and helpers used','line_number':48,'multiline':False]['text':' by all ATen backends, and adds new functionality specific to lazy','line_number':49,'multiline':False]['text':' tensor backends.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Inputs:','line_number':52,'multiline':False]['text':' - <backend>_native_functions.yaml: controls which operators are','line_number':53,'multiline':False]['text':'   supported by the backend.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' Outputs:','line_number':56,'multiline':False]['text':' (for all backends)','line_number':57,'multiline':False]['text':' <DispatchKey>Ir.h defines Lazy IR classes to be constructed during tracing','line_number':58,'multiline':False]['text':' - opt-in: also generate 'lowering' methods for the TorchScript backend only','line_number':59,'multiline':False]['text':' <DispatchKey>NativeFunctions.cpp defines implementations of native functions which perform lazy tracing','line_number':60,'multiline':False]['text':' - opt-in: 'full_codegen' section of backend yaml; 'supported' section omits these implementations','line_number':61,'multiline':False]['text':' <DispatchKey>NativeFunctions.h declares implementations of native functions for both 'supported' and 'full_codegen'','line_number':62,'multiline':False]['text':' ops','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' Register<DispatchKey>.cpp registers all op implementations with the dispatcher','line_number':65,'multiline':False]['text':' RegisterAutograd<DispatchKey>.cpp registers all autograd implementations with the dispatcher','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' Validation Helpers:','line_number':68,'multiline':False]['text':' - Shape Inference: errs if any ops in backend yaml require shape inference not provided by meta kernels or','line_number':69,'multiline':False]['text':'   implementations in torch/csrc/lazy/core/shape_inference.*','line_number':70,'multiline':False]['text':' - native function impls: errs if any 'supported' ops do not have an implementation defined in the backend','line_number':71,'multiline':False]['text':'   (non-codegen) implementation file','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' About the Data Model','line_number':75,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' Modeled after ATen codegen, the first step is to parse yaml and build a data model for the operators','line_number':78,'multiline':False]['text':' we care about.  In this case, the <backend>_native_functions yaml defines a subset of the core operators','line_number':79,'multiline':False]['text':' (defined in more detail in the main native_functions.yaml), which will be supported by your backend.','line_number':80,'multiline':False]['text':' Backends can list ops in two categories:','line_number':81,'multiline':False]['text':'  - `supported` ops require hand-implementations but still get codegenned declarations and registrations','line_number':82,'multiline':False]['text':'  - `full_codegen` ops get implementations (and IR classes) generated too','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' Each native function is modeled as an object with a schema, and each schema has objects representing their','line_number':85,'multiline':False]['text':' arguments.  Much of the codegen is manipulation of the arguments and their types.  For example, lazy tensor','line_number':86,'multiline':False]['text':' backends need to transform 'at::Tensor' arguments into 'lazy::Value' objects, as well as replacing reference','line_number':87,'multiline':False]['text':' types (stringref) with actual string objects, and this is done by manipulating the data model objects.','line_number':88,'multiline':False]['text':' - see api/lazy.py for the lazy data model','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' Once the data model is set up, the rest of this script processes a number of templates for output CPP file','line_number':91,'multiline':False]['text':' and fills in the template values using helpers in `dest/lazy_ir.py` and `dest/lazy_ts_lowering.py`.  These','line_number':92,'multiline':False]['text':' helpers mostly iterate over functions and their arguments, outputting different c++ snippets.','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':95,'multiline':False]['text':' Parses the external backend's yaml, and adds a new BackendIndex for the backend's dispatch key.','line_number':98,'multiline':False]['text':' Returns a Tuple of (backend_key, autograd_key, cpp_namespace, updated BackendIndex mapping, full_codegen)','line_number':99,'multiline':False]['text':' TODO(whc) add a check for shape inference functions that have meta kernels implement and should be retired.','line_number':149,'multiline':False]['text':' Some helper functions for the codegen.','line_number':163,'multiline':False]['text':' Assumes that this file lives at PYTORCH_ROOT/torchgen/gen_backend_stubs.py','line_number':278,'multiline':False]['text':' build_in_tree is true for TS backend and affects include paths','line_number':320,'multiline':False]['text':' per_operator_headers changes whether ATen/Functions.h or individual operator headers are used','line_number':322,'multiline':False]['text':' it must match how ATen was built','line_number':323,'multiline':False]['text':' the following arguments are temporary customization points for xla backend migration.','line_number':328,'multiline':False]['text':' do not rely on them otherwise, they should be removed once migration is complete','line_number':329,'multiline':False]['text':' the following 3 keys are all processed differently','line_number':384,'multiline':False]['text':' for full_codegen, we generate IR, kernels, etc','line_number':385,'multiline':False]['text':' for ir_gen, we generate only IR','line_number':386,'multiline':False]['text':' non_native is used to register kernels not declared in','line_number':387,'multiline':False]['text':' native_functions.yaml','line_number':388,'multiline':False]['text':' Generate nativefunction declarations','line_number':452,'multiline':False]['text':' Note, eager registrations is set to False for the lazy TS backend as another LTC backend','line_number':453,'multiline':False]['text':' may want to register their own lazy kernels instead of registering the TS ones.','line_number':454,'multiline':False]['text':' The registration will lazily happen when init_ts_backend is called.','line_number':455,'multiline':False]['text':' Generate Dispatcher registrations which hook up the nativefunctions','line_number':467,'multiline':False]['text':' Generate native function impls that build IR nodes','line_number':486,'multiline':False]['text':' Generate IR node classes','line_number':545,'multiline':False]['text':' Generate Non Native IR Node classes','line_number':579,'multiline':False]