['text':' Helper functions for defining generators on things in the model','line_number':16,'multiline':False]['text':' By default, we associate all errors with structured native functions','line_number':44,'multiline':False]['text':' with the out variant.  In some cases, it might be better to have','line_number':45,'multiline':False]['text':' a more specific place to hang things; if so, use','line_number':46,'multiline':False]['text':' native_function_manager again on the inside','line_number':47,'multiline':False]['text':' We associate errors with the view operator','line_number':50,'multiline':False]['text':' Given a function that operates on NativeFunction, wrap it into a new function','line_number':62,'multiline':False]['text':' that sets some appropriate context managers for that native function.','line_number':63,'multiline':False]['text':' YOU MUST WRAP FUNCTIONS IN THIS for calls to api modules to be sound','line_number':64,'multiline':False]['text':' (you will get an error if we try to access the local variables without having','line_number':65,'multiline':False]['text':' set them).','line_number':66,'multiline':False]['text':' The first native_function is assumed to be the one with the appropriate context.','line_number':79,'multiline':False]['text':' Convenience decorator for functions that explicitly take in a BackendIndex,','line_number':106,'multiline':False]['text':' instead of indirectly taking one in as a closure','line_number':107,'multiline':False]['text':' Convenience decorator for functions that explicitly take in a Dict of BackendIndices','line_number':119,'multiline':False]