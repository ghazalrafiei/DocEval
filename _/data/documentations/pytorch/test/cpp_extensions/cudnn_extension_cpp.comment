['text':'
 * CuDNN ReLU extension. Simple function but contains the general structure of
 * most CuDNN extensions:
 * 1) Check arguments. torch::check* functions provide a standard way to
 * validate input and provide pretty errors. 2) Create descriptors. Most CuDNN
 * functions require creating and setting a variety of descriptors. 3) Apply the
 * CuDNN function. 4) Destroy your descriptors. 5) Return something (optional).
 ','line_number':1,'multiline':True]['text':' for CUDNN_CHECK','line_number':12,'multiline':False]['text':' for TensorDescriptor','line_number':13,'multiline':False]['text':' for getCudnnHandle','line_number':14,'multiline':False]['text':' Name of function in python module and name used for error messages by','line_number':16,'multiline':False]['text':' torch::check* functions.','line_number':17,'multiline':False]['text':' Check arguments to cudnn_relu','line_number':20,'multiline':False]['text':' Create TensorArgs. These record the names and positions of each tensor as a','line_number':24,'multiline':False]['text':' parameter.','line_number':25,'multiline':False]['text':' Check arguments. No need to return anything. These functions with throw an','line_number':28,'multiline':False]['text':' error if they fail. Messages are populated using information from','line_number':29,'multiline':False]['text':' TensorArgs.','line_number':30,'multiline':False]['text':' Most CuDNN extensions will follow a similar pattern.','line_number':42,'multiline':False]['text':' Step 1: Check inputs. This will throw an error if inputs are invalid, so no','line_number':43,'multiline':False]['text':' need to check return codes here.','line_number':44,'multiline':False]['text':' Step 2: Create descriptors','line_number':46,'multiline':False]['text':' Note: 4 is minimum dim for a TensorDescriptor. Input and output are same','line_number':48,'multiline':False]['text':' size and type and contiguous, so one descriptor is sufficient.','line_number':49,'multiline':False]['text':' Note: Always check return value of cudnn functions using CUDNN_CHECK','line_number':52,'multiline':False]['text':'mode=','line_number':56,'multiline':True]['text':'reluNanOpt=','line_number':57,'multiline':True]['text':'coef=','line_number':58,'multiline':True]['text':' Step 3: Apply CuDNN function','line_number':59,'multiline':False]['text':' output descriptor same as input','line_number':69,'multiline':False]['text':' Step 4: Destroy descriptors','line_number':71,'multiline':False]['text':' Step 5: Return something (optional)','line_number':73,'multiline':False]['text':' Create the pybind11 module','line_number':76,'multiline':False]['text':' Use the same name as the check functions so error messages make sense','line_number':78,'multiline':False]