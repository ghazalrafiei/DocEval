['text':'*
 * WARNING: EValue is a class used by Executorch, for its boxed operators. It
 * contains similar logic as `IValue` in PyTorch, by providing APIs to convert
 * boxed values to unboxed values.
 *
 * It's mirroring a fbcode internal source file
 * [`EValue.h`](https://www.internalfb.com/code/fbsource/xplat/executorch/core/values/Evalue.h).
 *
 * The reason why we are mirroring this class, is to make sure we have CI job
 * coverage on torchgen logic, given that torchgen is used for both Executorch
 * and PyTorch.
 *
 * If any of the logic here needs to be changed, please update fbcode version of
 * `Evalue.h` as well. These two versions will be merged as soon as Executorch
 * is in OSS (hopefully by Q2 2023).
 ','line_number':4,'multiline':True]['text':'
 * Helper class used to correlate EValues in the executor table, with the
 * unwrapped list of the proper type. Because values in the runtime's values
 * table can change during execution, we cannot statically allocate list of
 * objects at deserialization. Imagine the serialized list says index 0 in the
 * value table is element 2 in the list, but during execution the value in
 * element 2 changes (in the case of tensor this means the TensorImpl* stored in
 * the tensor changes). To solve this instead they must be created dynamically
 * whenever they are used.
 ','line_number':66,'multiline':True]['text':'
   * Wrapped_vals is a list of pointers into the values table of the runtime
   * whose destinations correlate with the elements of the list, unwrapped_vals
   * is a container of the same size whose serves as memory to construct the
   * unwrapped vals.
   ','line_number':80,'multiline':True]['text':'
   * Constructs and returns the list of T specified by the EValue pointers
   ','line_number':88,'multiline':True]['text':' Source of truth for the list','line_number':94,'multiline':False]['text':' Same size as wrapped_vals','line_number':96,'multiline':False]['text':' Aggregate typing system similar to IValue only slimmed down with less','line_number':100,'multiline':False]['text':' functionality, no dependencies on atomic, and fewer supported types to better','line_number':101,'multiline':False]['text':' suit embedded systems (ie no intrusive ptr)','line_number':102,'multiline':False]['text':' When in ATen mode at::Tensor is not trivially copyable, this nested union','line_number':105,'multiline':False]['text':' lets us handle tensor as a special case while leaving the rest of the','line_number':106,'multiline':False]['text':' fields in a simple state instead of requiring a switch on tag everywhere.','line_number':107,'multiline':False]['text':' Scalar supported through these 3 types','line_number':110,'multiline':False]['text':' TODO(jakeszwe): convert back to pointers to optimize size of this','line_number':114,'multiline':False]['text':' struct','line_number':115,'multiline':False]['text':' Since a Tensor just holds a TensorImpl*, there's no value to use Tensor*','line_number':124,'multiline':False]['text':' here.','line_number':125,'multiline':False]['text':' Data storage and type tag','line_number':132,'multiline':False]['text':' Basic ctors and assignments','line_number':136,'multiline':False]['text':' Define copy assignment through copy ctor and move assignment','line_number':154,'multiline':False]['text':'***** None Type *****','line_number':163,'multiline':True]['text':'***** Int Type *****','line_number':172,'multiline':True]['text':'implicit','line_number':173,'multiline':True]['text':'***** Double Type *****','line_number':186,'multiline':True]['text':'implicit','line_number':187,'multiline':True]['text':'***** Bool Type *****','line_number':200,'multiline':True]['text':'implicit','line_number':201,'multiline':True]['text':'***** Scalar Type *****','line_number':214,'multiline':True]['text':'/ Construct an EValue using the implicit value of a Scalar.','line_number':215,'multiline':False]['text':'implicit','line_number':216,'multiline':True]['text':' Convert from implicit value to Scalar using implicit constructors.','line_number':236,'multiline':False]['text':'***** Tensor Type *****','line_number':250,'multiline':True]['text':'implicit','line_number':251,'multiline':True]['text':' When built in aten mode, at::Tensor has a non trivial constructor','line_number':252,'multiline':False]['text':' destructor, so regular assignment to a union field is UB. Instead we must','line_number':253,'multiline':False]['text':' go through placement new (which causes a refcount bump).','line_number':254,'multiline':False]['text':'***** String Type *****','line_number':277,'multiline':True]['text':'implicit','line_number':278,'multiline':True]['text':'***** Int List Type *****','line_number':293,'multiline':True]['text':'implicit','line_number':294,'multiline':True]['text':'***** Bool List Type *****','line_number':307,'multiline':True]['text':'implicit','line_number':308,'multiline':True]['text':'***** Double List Type *****','line_number':321,'multiline':True]['text':'implicit','line_number':322,'multiline':True]['text':'***** Tensor List Type *****','line_number':335,'multiline':True]['text':'implicit','line_number':336,'multiline':True]['text':'***** List Optional Tensor Type *****','line_number':349,'multiline':True]['text':'implicit','line_number':350,'multiline':True]['text':'***** ScalarType Type *****','line_number':363,'multiline':True]['text':'***** MemoryFormat Type *****','line_number':369,'multiline':True]['text':'*
   * Converts the EValue to an optional object that can represent both T and
   * an uninitialized state.
   ','line_number':381,'multiline':True]['text':' Pre cond: the payload value has had its destructor called','line_number':394,'multiline':False]['text':' Shared move logic','line_number':400,'multiline':False]['text':' Destructs stored tensor if there is one','line_number':412,'multiline':False]['text':' Necessary for ATen tensor to refcount decrement the intrusive_ptr to','line_number':414,'multiline':False]['text':' tensorimpl that got a refcount increment when we placed it in the evalue,','line_number':415,'multiline':False]['text':' no-op if executorch tensor #ifdef could have a','line_number':416,'multiline':False]['text':' minor performance bump for a code maintainability hit','line_number':417,'multiline':False]['text':' namespace executor','line_number':478,'multiline':False]['text':' namespace torch','line_number':479,'multiline':False]