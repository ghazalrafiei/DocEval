['text':' Negative values are used to skip the check','line_number':31,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':45,'multiline':False]['text':' for i in 0..100:','line_number':46,'multiline':False]['text':'   b[i] = a[i]','line_number':47,'multiline':False]['text':' For this loop bounds inference should yield the following:','line_number':48,'multiline':False]['text':' {{b, kStore, 0, 99}, {a, kLoad, 0, 99}}','line_number':49,'multiline':False]['text':' We should have two entries: one for 'b' and one for 'a'.','line_number':56,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':68,'multiline':False]['text':' for i in 0..n:','line_number':69,'multiline':False]['text':'   b[i] = a[i]','line_number':70,'multiline':False]['text':' For this loop bounds inference should yield the following:','line_number':71,'multiline':False]['text':' {{b, kStore, 0, n-1}, {a, kLoad, 0, n-1}}','line_number':72,'multiline':False]['text':' We should have two entries: one for 'b' and one for 'a'.','line_number':79,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':91,'multiline':False]['text':' for i in 0..100:','line_number':92,'multiline':False]['text':'   b[i] = a[i] * a[i+10]','line_number':93,'multiline':False]['text':' For this loop bounds inference should yield the following:','line_number':94,'multiline':False]['text':' {{b, kStore, 0, 99}, {a, kLoad, 0, 109}}','line_number':95,'multiline':False]['text':' We should have two entries: one for 'b' and one for 'a'.','line_number':103,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' for y in 0..200:','line_number':117,'multiline':False]['text':'   for x in 0..320:','line_number':118,'multiline':False]['text':'     b[y,x] = x*y','line_number':119,'multiline':False]['text':' for y in 0..200:','line_number':120,'multiline':False]['text':'   for x in 0..320:','line_number':121,'multiline':False]['text':'     c[y,x] = a[y,x] * b[y,x]','line_number':122,'multiline':False]['text':' Infer bounds on the top-level loop scope','line_number':136,'multiline':False]['text':' Infer bounds on the inner loop scope','line_number':153,'multiline':False]['text':' Infer bounds on the inner loop body's scope','line_number':170,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':189,'multiline':False]['text':' for i in 0..100:','line_number':190,'multiline':False]['text':'   b[i] = a[i]','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' ==> split ==>','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' for i_outer in 0..100/16:','line_number':195,'multiline':False]['text':'   for i_inner in 0..16:','line_number':196,'multiline':False]['text':'     b[i_outer * 16 + i_inner] = a[i_outer * 16 + i_inner]','line_number':197,'multiline':False]['text':' for i_tail in 0..100%16:','line_number':198,'multiline':False]['text':'   b[i_tail + (100/16)*16] = a[i_tail + (100/16)*16];','line_number':199,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':205,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':207,'multiline':False]['text':' Verify inferred bounds for the outer loop','line_number':214,'multiline':False]['text':' Verify inferred bounds for the tail loop','line_number':227,'multiline':False]['text':' Verify that bounds inference works for the following example:','line_number':242,'multiline':False]['text':'','line_number':243,'multiline':False]['text':' for y in 0..200:','line_number':244,'multiline':False]['text':'   for x in 0..320:','line_number':245,'multiline':False]['text':'     b[y,x] = x*y','line_number':246,'multiline':False]['text':' for y in 0..20:','line_number':247,'multiline':False]['text':'   for x in 0..32:','line_number':248,'multiline':False]['text':'     c[y,x] = a[y+100,x+100] * b[y*2,x*5]','line_number':249,'multiline':False]['text':' Infer bounds on the top-level loop scope','line_number':266,'multiline':False]['text':' Infer bounds on the inner loop scope','line_number':283,'multiline':False]['text':' Infer bounds on the inner loop body's scope','line_number':300,'multiline':False]['text':' Infer bounds on the top-level loop scope','line_number':328,'multiline':False]['text':' reads from a[0:5], writes to b[0:5]','line_number':332,'multiline':False]['text':' Infer bounds on the inner loop scope','line_number':342,'multiline':False]['text':' reads from a[0+6:5+6], writes to c[0:5]','line_number':346,'multiline':False]['text':' Infer bounds on the high level program.','line_number':356,'multiline':False]['text':' Should be union of above 2 bounds, but this time the bounds of A can be','line_number':360,'multiline':False]['text':' merged.','line_number':361,'multiline':False]['text':' a only read.','line_number':389,'multiline':False]['text':' One dimension.','line_number':393,'multiline':False]['text':' Bounds:','line_number':396,'multiline':False]['text':' start: Min of the 3 load bounds = Min of loop starts + offset = 0+0 (b).','line_number':397,'multiline':False]['text':' stop: Max of the 3 load bounds = Max of loop stops + offset - 1 =','line_number':398,'multiline':False]['text':'       96 + 2 - 1 (d).','line_number':399,'multiline':False]['text':' b, c, d only written.','line_number':403,'multiline':False]['text':' Just the loop extents for b.','line_number':409,'multiline':False]['text':' Just the loop extents for c.','line_number':417,'multiline':False]['text':' Just the loop extents for d.','line_number':425,'multiline':False]['text':' Same as above but the offsets are on the Store now.','line_number':437,'multiline':False]['text':' Can't do this through ComputeAPI without transforms we don't have yet.','line_number':438,'multiline':False]['text':' a only read.','line_number':448,'multiline':False]['text':' One dimension.','line_number':452,'multiline':False]['text':' Bounds: there are no offsets, so this is just the max loop bounds.','line_number':455,'multiline':False]['text':' b, c, d only written.','line_number':459,'multiline':False]['text':' This should be equivalent to {offset, extent + offset} for the b loop.','line_number':465,'multiline':False]['text':' b loop has no offset, so just the loop extents.','line_number':466,'multiline':False]['text':' This should be equivalent to {offset, extent + offset} for the c loop.','line_number':474,'multiline':False]['text':' Offset is 10, extent is 32-1.','line_number':475,'multiline':False]['text':' This should be equivalent to {offset, extent + offset} for the d loop.','line_number':483,'multiline':False]['text':' Offset is 2, extent is 96-1.','line_number':484,'multiline':False]['text':' CacheAccesses should not change existing bounds, but add a new one for the','line_number':510,'multiline':False]['text':' cache.','line_number':511,'multiline':False]['text':' Same number of TensorAccessBoundInfos.','line_number':515,'multiline':False]['text':' Same number of dimensions.','line_number':521,'multiline':False]['text':' Bounds are equal.','line_number':524,'multiline':False]['text':' This should be the cache.','line_number':531,'multiline':False]['text':' Should have both a load and a store.','line_number':533,'multiline':False]['text':' 2 dimensions.','line_number':539,'multiline':False]['text':' bounds for load and store are equal.','line_number':543,'multiline':False]['text':' Flatten indices.','line_number':561,'multiline':False]['text':' There's only one buffer.','line_number':565,'multiline':False]['text':' Flattened bounds should have a single dimension.','line_number':569,'multiline':False]['text':' Bounds should be 0 -> (3*4*5)-1','line_number':573,'multiline':False]['text':'
     * A[0] = B[0];
     * B[0] = 3;      WAR on B
     * A[0] = B[0];   WAW on A, RAW on B
     * C[0] = 5;
     ','line_number':588,'multiline':True]['text':' Fourth store has no dependencies','line_number':616,'multiline':False]['text':' No dependencies between loops.','line_number':647,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':683,'multiline':False]['text':' Splitting with tail by something offset creates a tail which also writes to','line_number':686,'multiline':False]['text':' A.','line_number':687,'multiline':False]['text':' `outer` loop get transformed to the outer loop after splitting.','line_number':689,'multiline':False]['text':' Input IR:','line_number':702,'multiline':False]['text':'   for (const auto j : c10::irange(10, 100)) {','line_number':703,'multiline':False]['text':'     A[j] = 10 * j;','line_number':704,'multiline':False]['text':'   }','line_number':705,'multiline':False]['text':'   for (const auto k : c10::irange(10, 100)) {','line_number':706,'multiline':False]['text':'     A[k-1] = 20 * k;','line_number':707,'multiline':False]['text':'   }','line_number':708,'multiline':False]['text':' Input IR:','line_number':724,'multiline':False]['text':'   for (const auto j : c10::irange(10, 100)) {','line_number':725,'multiline':False]['text':'     A[j] = 10 * j;','line_number':726,'multiline':False]['text':'   }','line_number':727,'multiline':False]['text':'   for (const auto k : c10::irange(10, 100)) {','line_number':728,'multiline':False]['text':'     A[k] = 20 * k;','line_number':729,'multiline':False]['text':'   }','line_number':730,'multiline':False]['text':' Input IR:','line_number':745,'multiline':False]['text':'   for (const auto j : c10::irange(10, 100)) {','line_number':746,'multiline':False]['text':'     A[j] = 10 * j;','line_number':747,'multiline':False]['text':'   }','line_number':748,'multiline':False]['text':'   for (const auto k : c10::irange(10, 100)) {','line_number':749,'multiline':False]['text':'     B[k] = A[k];','line_number':750,'multiline':False]['text':'   }','line_number':751,'multiline':False]['text':' Input IR:','line_number':768,'multiline':False]['text':'   for (const auto j : c10::irange(10, 100)) {','line_number':769,'multiline':False]['text':'     A[j] = 10 * j;','line_number':770,'multiline':False]['text':'   }','line_number':771,'multiline':False]['text':'   for (const auto k : c10::irange(10, 100)) {','line_number':772,'multiline':False]['text':'     A[k+100] = 20 * k;','line_number':773,'multiline':False]['text':'   }','line_number':774,'multiline':False]['text':' Input IR:','line_number':790,'multiline':False]['text':'   for (const auto i : c10::irange(20)) {','line_number':791,'multiline':False]['text':'     for (const auto j : c10::irange(100)) {','line_number':792,'multiline':False]['text':'       A[i,j] = i * j * 500;','line_number':793,'multiline':False]['text':'     }','line_number':794,'multiline':False]['text':'   }','line_number':795,'multiline':False]['text':'   for (const auto m : c10::irange(20)) {','line_number':796,'multiline':False]['text':'     for (const auto n : c10::irange(50)) {','line_number':797,'multiline':False]['text':'       A[m+1,n] = m + n * 100;','line_number':798,'multiline':False]['text':'     }','line_number':799,'multiline':False]['text':'   }','line_number':800,'multiline':False]['text':' Input IR:','line_number':829,'multiline':False]['text':'   for (const auto i : c10::irange(20)) {','line_number':830,'multiline':False]['text':'     for (const auto j : c10::irange(100)) {','line_number':831,'multiline':False]['text':'       A[i,j] = i * j * 500;','line_number':832,'multiline':False]['text':'     }','line_number':833,'multiline':False]['text':'   }','line_number':834,'multiline':False]['text':'   for (const auto m : c10::irange(20)) {','line_number':835,'multiline':False]['text':'     for (const auto n : c10::irange(50)) {','line_number':836,'multiline':False]['text':'       A[m+20,n+100] = m + n * 100;','line_number':837,'multiline':False]['text':'     }','line_number':838,'multiline':False]['text':'   }','line_number':839,'multiline':False]['text':' Input IR:','line_number':868,'multiline':False]['text':'   for (const auto i : c10::irange(20)) {','line_number':869,'multiline':False]['text':'     for (const auto j : c10::irange(100)) {','line_number':870,'multiline':False]['text':'       A[i,j] = i * j * 500;','line_number':871,'multiline':False]['text':'     }','line_number':872,'multiline':False]['text':'   }','line_number':873,'multiline':False]['text':'   for (const auto m : c10::irange(20)) {','line_number':874,'multiline':False]['text':'     for (const auto n : c10::irange(50)) {','line_number':875,'multiline':False]['text':'       B[m,n] = m + n * 100;','line_number':876,'multiline':False]['text':'     }','line_number':877,'multiline':False]['text':'   }','line_number':878,'multiline':False]['text':' Input IR:','line_number':906,'multiline':False]['text':'   for (const auto j : c10::irange(100)) {','line_number':907,'multiline':False]['text':'     A[j] = 10 * j;','line_number':908,'multiline':False]['text':'   }','line_number':909,'multiline':False]['text':'   for (const auto k : c10::irange(100)) {','line_number':910,'multiline':False]['text':'     B[k] = 20 * A[99-k];','line_number':911,'multiline':False]['text':'   }','line_number':912,'multiline':False]['text':' Input IR:','line_number':933,'multiline':False]['text':'   for (const auto k : c10::irange(100)) {','line_number':934,'multiline':False]['text':'     B[k] = 20 * A[99-k];','line_number':935,'multiline':False]['text':'   }','line_number':936,'multiline':False]['text':'   for (const auto j : c10::irange(100)) {','line_number':937,'multiline':False]['text':'     A[j] = 10 * j;','line_number':938,'multiline':False]['text':'   }','line_number':939,'multiline':False]['text':' Input IR:','line_number':960,'multiline':False]['text':'   for (const auto k : c10::irange(10, 100)) {','line_number':961,'multiline':False]['text':'     B[k] = 20 * A[99-k];','line_number':962,'multiline':False]['text':'   }','line_number':963,'multiline':False]['text':'   for (const auto j : c10::irange(10, 100)) {','line_number':964,'multiline':False]['text':'     C[j] = 10 * A[j];','line_number':965,'multiline':False]['text':'   }','line_number':966,'multiline':False]['text':' Input IR:','line_number':992,'multiline':False]['text':'   for (const auto i : c10::irange(100)) {','line_number':993,'multiline':False]['text':'     A[i] = i * 10;               // storeA1','line_number':994,'multiline':False]['text':'     B[i] = A[99-i] * 20;         // loadA1','line_number':995,'multiline':False]['text':'     C[i] = A[i + 100] * 10;      // loadA2','line_number':996,'multiline':False]['text':'     A[i + 50] = i * 50;          // storeA2','line_number':997,'multiline':False]['text':'     A[i + 150] = i * 150;        // storeA3','line_number':998,'multiline':False]['text':'   }','line_number':999,'multiline':False]['text':' namespace jit','line_number':1021,'multiline':False]['text':' namespace torch','line_number':1022,'multiline':False]