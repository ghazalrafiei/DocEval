['text':' Typed tests, can't use gtest params here due to the way we instantiate tests.','line_number':27,'multiline':False]['text':' this is broken','line_number':188,'multiline':False]['text':'{
    at::Half k_;
    at::Half* k = &k_;
    *reinterpret_cast<int16_t*>(k) = ref16;
    auto a = HalfImm::make(k);
    auto b = BitCast::make(kShort, a);
    LLVMExprEval cg(b);
    ASSERT_EQ(cg.value<int16_t>(), ref16);
  }','line_number':189,'multiline':True]['text':' if (x < 10) x = x + 1','line_number':373,'multiline':False]['text':' if (x < 10) {','line_number':392,'multiline':False]['text':'   x = x + 1;','line_number':393,'multiline':False]['text':' } else {','line_number':394,'multiline':False]['text':'   x = x - 1;','line_number':395,'multiline':False]['text':' }','line_number':396,'multiline':False]['text':' if (x < 10) {','line_number':420,'multiline':False]['text':'   if (x > 5) {','line_number':421,'multiline':False]['text':'     x = x + 1;','line_number':422,'multiline':False]['text':'   } else {','line_number':423,'multiline':False]['text':'     x = x - 1;','line_number':424,'multiline':False]['text':'   }','line_number':425,'multiline':False]['text':' } else {','line_number':426,'multiline':False]['text':'   if (x <= 15) {','line_number':427,'multiline':False]['text':'     x = x + 2;','line_number':428,'multiline':False]['text':'   } else {','line_number':429,'multiline':False]['text':'     x = x - 2;','line_number':430,'multiline':False]['text':'   }','line_number':431,'multiline':False]['text':' }','line_number':432,'multiline':False]['text':' namespace jit','line_number':522,'multiline':False]['text':' namespace jit','line_number':560,'multiline':False]['text':' Just don't crash.','line_number':1377,'multiline':False]['text':' Reorder n and m loops','line_number':1484,'multiline':False]['text':' Vectorize initializer of rfac_buf','line_number':1492,'multiline':False]['text':' Vectorize producer of rfac_buf','line_number':1494,'multiline':False]['text':' Compute a simple operation, and try all loop-axis combination to be','line_number':1523,'multiline':False]['text':' parallel or sequential.','line_number':1524,'multiline':False]['text':' Compute a composite operation, and try all loop-axis combination to be','line_number':1573,'multiline':False]['text':' parallel or sequential.','line_number':1574,'multiline':False]['text':' mo, mi, no, ni, k ->','line_number':1659,'multiline':False]['text':' mo, no, mi, ni, k','line_number':1660,'multiline':False]['text':' mo, no, mi, ni, k ->','line_number':1667,'multiline':False]['text':' mo, no, mi, k, ni','line_number':1668,'multiline':False]['text':' mo, no, mi, k, ni ->','line_number':1675,'multiline':False]['text':' mo, no, k, mi, ni','line_number':1676,'multiline':False]['text':' Check that the kernel function name used by LLVMCodeGen','line_number':1786,'multiline':False]['text':' is not empty.','line_number':1787,'multiline':False]['text':' Check that the kernel function name used by LLVMCodeGen','line_number':1793,'multiline':False]['text':' is the one that was given above.','line_number':1794,'multiline':False]['text':' namespace jit','line_number':1799,'multiline':False]['text':' namespace torch','line_number':1800,'multiline':False]['text':' TORCH_ENABLE_LLVM','line_number':1802,'multiline':False]