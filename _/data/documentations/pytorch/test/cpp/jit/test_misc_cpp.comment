['text':' TODO: This test is a bit too close to the implementation details.','line_number':112,'multiline':False]['text':' B x C x H x W','line_number':151,'multiline':False]['text':' make inputs','line_number':157,'multiline':False]['text':' run forward eagerly','line_number':163,'multiline':False]['text':' make grad_outputs','line_number':167,'multiline':False]['text':' run backward eagerly','line_number':171,'multiline':False]['text':' make JIT graph','line_number':182,'multiline':False]['text':' differentiate JIT graph','line_number':202,'multiline':False]['text':' Tracing of some ops depends on the DCE trick','line_number':203,'multiline':False]['text':' prepare JIT inputs / gradients','line_number':208,'multiline':False]['text':' Get outputs from the interpreter','line_number':217,'multiline':False]['text':' prepare expected structs','line_number':222,'multiline':False]['text':' Compare results','line_number':229,'multiline':False]['text':' aten::native_batch_norm(Tensor input, Tensor weight, Tensor bias, Tensor','line_number':235,'multiline':False]['text':' running_mean, Tensor running_var, bool training, float momentum, float eps)','line_number':236,'multiline':False]['text':' -> (Tensor, Tensor, Tensor)','line_number':237,'multiline':False]['text':' B x C x H x W','line_number':238,'multiline':False]['text':' make inputs','line_number':243,'multiline':False]['text':' running_mean and running_var are changed in-place, so clone and send them','line_number':250,'multiline':False]['text':' run forward eagerly','line_number':256,'multiline':False]['text':' make grad_outputs','line_number':268,'multiline':False]['text':' run backward eagerly','line_number':276,'multiline':False]['text':' aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor','line_number':278,'multiline':False]['text':' weight, Tensor running_mean, Tensor running_var, Tensor save_mean, Tensor','line_number':279,'multiline':False]['text':' save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor,','line_number':280,'multiline':False]['text':' Tensor, Tensor)','line_number':281,'multiline':False]['text':' make JIT graph','line_number':294,'multiline':False]['text':' differentiate JIT graph','line_number':323,'multiline':False]['text':' Tracing of some ops depends on the DCE trick','line_number':324,'multiline':False]['text':' prepare JIT inputs / gradients','line_number':329,'multiline':False]['text':' Get outputs from the interpreter','line_number':342,'multiline':False]['text':' prepare expected structs','line_number':347,'multiline':False]['text':' Compare results','line_number':361,'multiline':False]['text':' two multiplications','line_number':396,'multiline':False]['text':' Could be done in more efficient ways, but this is only a test.','line_number':433,'multiline':False]['text':' This test fails vptr UBSAN checks','line_number':501,'multiline':False]['text':' test a few features that are not directly used in schemas yet','line_number':509,'multiline':False]['text':' nested arrays','line_number':511,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)','line_number':552,'multiline':False]['text':' named returns','line_number':554,'multiline':False]['text':' futures','line_number':563,'multiline':False]['text':' test tensor with annotated alias sets','line_number':570,'multiline':False]['text':' The list itself is annotated with `a`','line_number':610,'multiline':False]['text':' Check the contained types','line_number':618,'multiline':False]['text':' The list itself is annotated with `a`','line_number':635,'multiline':False]['text':' Check the contained types','line_number':647,'multiline':False]['text':' nodes should be in numerical order','line_number':672,'multiline':False]['text':' Built up a block structure','line_number':683,'multiline':False]['text':'  node3','line_number':684,'multiline':False]['text':'   /\        ...','line_number':685,'multiline':False]['text':'  A  B     block1','line_number':686,'multiline':False]['text':'      \      ...','line_number':687,'multiline':False]['text':'      C    block2','line_number':688,'multiline':False]['text':' Check isAfter on different block levels','line_number':698,'multiline':False]['text':' make sure things don't blow up on deletions','line_number':703,'multiline':False]['text':' Induce reindexing to test that path','line_number':712,'multiline':False]['text':' Inserting to the same place a lot will trigger reindexing','line_number':718,'multiline':False]['text':' Nodes should be in reverse order','line_number':725,'multiline':False]['text':' These cannot be function-local because that would prohibit them','line_number':834,'multiline':False]['text':' from being used as template arguments prior to C++17.','line_number':835,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':904,'multiline':False]['text':' disabling the inlining of method calls','line_number':933,'multiline':False]['text':' [(fn, [[sizes], [sizes], ...]), ...]','line_number':936,'multiline':False]['text':' disabling the inlining of method calls','line_number':995,'multiline':False]['text':' test sampled callbacks','line_number':998,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':1030,'multiline':False]['text':' test the scope of the callbacks','line_number':1038,'multiline':False]['text':' disabling the inlining of method calls','line_number':1044,'multiline':False]['text':' check record function guard','line_number':1050,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':1054,'multiline':False]['text':' disabling the inlining of method calls','line_number':1090,'multiline':False]['text':' thread local / global callbacks','line_number':1123,'multiline':False]['text':' START: thread local / global context check callbacks','line_number':1157,'multiline':False]['text':' START: global test','line_number':1163,'multiline':False]['text':' unused ','line_number':1166,'multiline':True]['text':' unused ','line_number':1173,'multiline':True]['text':' END: global test','line_number':1185,'multiline':False]['text':' START: thread local test','line_number':1186,'multiline':False]['text':' unused ','line_number':1191,'multiline':True]['text':' unused ','line_number':1198,'multiline':True]['text':' Will call both global and thread local callbacks.','line_number':1205,'multiline':False]['text':' END: thread local test','line_number':1213,'multiline':False]['text':' disabling the inlining of method calls','line_number':1219,'multiline':False]['text':' disabling the inlining of method calls','line_number':1252,'multiline':False]['text':' test propagation of TLS callbacks','line_number':1258,'multiline':False]['text':' test set ids','line_number':1278,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':1338,'multiline':False]['text':' check that thread local debug info is propagated through fork calls','line_number':1365,'multiline':False]['text':' check that thread local debug info is propagated through backward pass','line_number':1378,'multiline':False]['text':' check nested debug info','line_number':1398,'multiline':False]['text':' we will be modifying a profiled graph','line_number':1488,'multiline':False]['text':' before ProfilingGraphExecutor','line_number':1489,'multiline':False]['text':' will optimize it in the next iteration','line_number':1490,'multiline':False]['text':' this is safe to do since we are done profiling','line_number':1492,'multiline':False]['text':' TODO this test wasn't running and is broken.','line_number':1519,'multiline':False]['text':' TEST(AutogradProfilerTest, Basic) {','line_number':1520,'multiline':False]['text':'   constexpr int batch_size = 4;','line_number':1521,'multiline':False]['text':'   constexpr int input_size = 256;','line_number':1522,'multiline':False]['text':'   constexpr int seq_len = 32;','line_number':1523,'multiline':False]['text':'   int hidden_size = 2 * input_size;','line_number':1525,'multiline':False]['text':'   auto input = torch::randn({seq_len, batch_size, input_size}, at::kCPU);','line_number':1526,'multiline':False]['text':'   auto hx = torch::randn({batch_size, hidden_size}, at::kCPU);','line_number':1527,'multiline':False]['text':'   auto cx = torch::randn({batch_size, hidden_size}, at::kCPU);','line_number':1528,'multiline':False]['text':'   auto w_ih = t_def(torch::randn({4 * hidden_size, input_size}, at::kCPU));','line_number':1529,'multiline':False]['text':'   auto w_hh = t_def(torch::randn({4 * hidden_size, hidden_size}, at::kCPU));','line_number':1530,'multiline':False]['text':'   std::stringstream ss;','line_number':1532,'multiline':False]['text':'   {','line_number':1533,'multiline':False]['text':'     RecordProfile guard(ss);','line_number':1534,'multiline':False]['text':'     for (size_t i = 0; i < 100; ++i) {','line_number':1535,'multiline':False]['text':'       std::tie(hx, cx) = lstm(input[0], hx, cx, w_ih, w_hh);','line_number':1536,'multiline':False]['text':'     }','line_number':1537,'multiline':False]['text':'   }','line_number':1538,'multiline':False]['text':'   std::string result = ss.str();','line_number':1540,'multiline':False]['text':'   size_t count = 0;','line_number':1541,'multiline':False]['text':'   for (size_t pos = 0; (pos = result.find("tanh", pos)) != std::string::npos;','line_number':1542,'multiline':False]['text':'        count++, pos++) {','line_number':1543,'multiline':False]['text':'   }','line_number':1544,'multiline':False]['text':'   ASSERT_EQ((count, 200);','line_number':1545,'multiline':False]['text':' }','line_number':1546,'multiline':False]['text':' Constant propagation will run test_none and produce a None,','line_number':1567,'multiline':False]['text':' testing that its type is set appropriately and schema matching  doesn't','line_number':1568,'multiline':False]['text':' fail when running is_none','line_number':1569,'multiline':False]['text':' checking that constant propagation ran wo/failure','line_number':1579,'multiline':False]['text':' we will not run fusion in simple mode','line_number':1606,'multiline':False]['text':' do not use an induction variable explicitly','line_number':1657,'multiline':False]['text':' peeling loop once','line_number':1669,'multiline':False]['text':' test peeling more than one iteration','line_number':1683,'multiline':False]['text':' uses the induction variable','line_number':1699,'multiline':False]['text':' peeling loop once','line_number':1711,'multiline':False]['text':' test peeling more than one iteration','line_number':1725,'multiline':False]['text':' tests with explicit termination conditions','line_number':1741,'multiline':False]['text':' the peel changes the termination condition to false','line_number':1752,'multiline':False]['text':' so the original loop doesn't run','line_number':1753,'multiline':False]['text':' peeling 5 iterations should update the termination','line_number':1757,'multiline':False]['text':' condition to false','line_number':1758,'multiline':False]['text':' the termination condition remains true','line_number':1772,'multiline':False]['text':' tests simple nested loops','line_number':1787,'multiline':False]['text':' Check that the inputs of traced graph have the same type as the inputs','line_number':1881,'multiline':False]['text':' specified here.','line_number':1882,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1913,'multiline':False]['text':' introduce some profiling information','line_number':1931,'multiline':False]['text':' now eliminate as many guards as possible','line_number':1950,'multiline':False]['text':' we should be left with two guards on x and y's defs','line_number':1951,'multiline':False]['text':' introduce some profiling information','line_number':1982,'multiline':False]['text':' profiled types are stored as attributes and show up in the dump, e.g.','line_number':2031,'multiline':False]['text':' Tensor = prim::profile[profiled_type=Double(4, 256, strides=[256, 1],','line_number':2032,'multiline':False]['text':' requires_grad=0, device=cpu)','line_number':2033,'multiline':False]['text':' make sure we recorded the shape','line_number':2085,'multiline':False]['text':' make sure we recorded that "None" was seen.','line_number':2105,'multiline':False]['text':' Const 3 comes from function 'bar', which gets inlined to 'foo'.','line_number':2141,'multiline':False]['text':' The callstack for the corresponding node should contain only the','line_number':2142,'multiline':False]['text':' function 'bar'.','line_number':2143,'multiline':False]['text':' Const 7 comes from function 'ham', which gets inlined to 'baz',','line_number':2151,'multiline':False]['text':' which is then inlined to 'foo'. The callstack for the corresponding','line_number':2152,'multiline':False]['text':' node should contain these two functions.','line_number':2153,'multiline':False]['text':' Const 11 comes from function 'foo', which is not inlined anywhere','line_number':2162,'multiline':False]['text':' and thus it should not have a callstack.','line_number':2163,'multiline':False]['text':' Check that inlining doesn't corrupt callstack of the callee's nodes.','line_number':2171,'multiline':False]['text':' Const 7 comes from function 'ham', which gets inlined to 'baz'. 'baz'','line_number':2181,'multiline':False]['text':' was also inlined into 'foo', but when looking at the graph of 'baz' we','line_number':2182,'multiline':False]['text':' should only see a callstack of depth 1 (containing only 'ham').','line_number':2183,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':2221,'multiline':False]['text':' We expect to see nodes prim::Constant[value="a1"] and','line_number':2228,'multiline':False]['text':' prim::Constant[value="a2"] inlined to function 'c'. Their callstacks are','line_number':2229,'multiline':False]['text':' the same (a->b->c), so we want to make sure we're not creating different','line_number':2230,'multiline':False]['text':' callstack entries for them.','line_number':2231,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)','line_number':2293,'multiline':False]['text':' Basic set case.','line_number':2382,'multiline':False]['text':' unused ','line_number':2389,'multiline':True]['text':' unused ','line_number':2397,'multiline':True]['text':' Sparse CUDA tensor test','line_number':2402,'multiline':False]['text':' Skip test if CUDA is not available.','line_number':2404,'multiline':False]['text':' Runs storage extraction for sparse CUDA tensors','line_number':2417,'multiline':False]['text':' Basic error cases.','line_number':2424,'multiline':False]['text':' unused ','line_number':2429,'multiline':True]['text':' Supposed to throw.','line_number':2438,'multiline':False]['text':' unused ','line_number':2442,'multiline':True]['text':' Supposed to throw.','line_number':2452,'multiline':False]['text':' Original error should be logged.','line_number':2454,'multiline':False]['text':' then','line_number':2459,'multiline':False]['text':' collectAll()','line_number':2478,'multiline':False]['text':' Empty case','line_number':2484,'multiline':False]['text':' 1-element, initially not completed.','line_number':2494,'multiline':False]['text':' 1-element, already completed','line_number':2506,'multiline':False]['text':' 3 elements.','line_number':2512,'multiline':False]['text':' Handle exception in the list.','line_number':2529,'multiline':False]['text':' supposed to throw','line_number':2539,'multiline':False]['text':' collectAny()','line_number':2545,'multiline':False]['text':' Empty case','line_number':2549,'multiline':False]['text':' 1 element, not yet satisfied','line_number':2555,'multiline':False]['text':' 1 element already satisfied.','line_number':2564,'multiline':False]['text':' 2 elements','line_number':2570,'multiline':False]['text':' cb that verifies the profiler is enabled','line_number':2586,'multiline':False]['text':' unused ','line_number':2587,'multiline':True]['text':' test running callbacks with propagation of TLS state.','line_number':2590,'multiline':False]['text':' Enable the profiler in this thread','line_number':2592,'multiline':False]['text':' Since we join here, we can ensure that all callbacks corresponding to','line_number':2599,'multiline':False]['text':' markCompleted() have finished.','line_number':2600,'multiline':False]['text':' then() with TLS State','line_number':2604,'multiline':False]['text':' Enable the profiler in this thread','line_number':2606,'multiline':False]['text':' cb that verifies the profiler is enabled','line_number':2625,'multiline':False]['text':' unused ','line_number':2634,'multiline':True]['text':' Ensure the profiler is still enabled in this thread.','line_number':2635,'multiline':False]['text':' Don't cleanup TLSState, and just consolidate.','line_number':2640,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':2644,'multiline':False]['text':' Ensure that the events from this thread are still profiled and we','line_number':2646,'multiline':False]['text':' obtain the expected in events in our consolidated list when calling','line_number':2647,'multiline':False]['text':' disableProfilerLegacy().','line_number':2648,'multiline':False]['text':' Disable the profiler, but do not consolidate results in the main thread.','line_number':2668,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':2670,'multiline':False]['text':' Similar to above test, but verifies correctness in the case where','line_number':2675,'multiline':False]['text':' continuation runs on the main thread.','line_number':2676,'multiline':False]['text':' Runs callback inline','line_number':2682,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':2685,'multiline':False]['text':' Enable the profiler in this thread','line_number':2690,'multiline':False]['text':' Enable the profiler in this thread','line_number':2729,'multiline':False]['text':' Enable the profiler in this thread','line_number':2747,'multiline':False]['text':' Test unknown operator','line_number':2809,'multiline':False]['text':' Test aten::conv2d','line_number':2815,'multiline':False]['text':' Test aten::conv2d fail','line_number':2832,'multiline':False]['text':' Test aten::conv2d fail 2','line_number':2841,'multiline':False]['text':' Test aten::conv2d fail 3','line_number':2850,'multiline':False]['text':' Test aten::mm','line_number':2858,'multiline':False]['text':' Test aten::addmm','line_number':2868,'multiline':False]['text':' Test aten::bmm','line_number':2873,'multiline':False]['text':' Test aten::baddbmm','line_number':2883,'multiline':False]['text':' Test mm out of range','line_number':2888,'multiline':False]['text':' Test aten::add.Tensor','line_number':2894,'multiline':False]['text':' Test aten::mul.Tensor','line_number':2902,'multiline':False]['text':' arange does not actually support complex, leave as','line_number':3052,'multiline':False]['text':' union[int, float] for now','line_number':3053,'multiline':False]['text':' TODO: move to test_kernel when global settings are explicit','line_number':3063,'multiline':False]['text':' fusion parameters','line_number':3064,'multiline':False]['text':' wrong input sizes so we hit the fallback path','line_number':3096,'multiline':False]['text':'min_group_size','line_number':3107,'multiline':True]['text':'add_composed_op','line_number':3108,'multiline':True]['text':'fuse_to_dynamic_shapes','line_number':3109,'multiline':True]['text':' inp_1 is on the bottom of the stack, and corresponds','line_number':3128,'multiline':False]['text':' to the second output. inp_2 is on the top corresponds to first output','line_number':3129,'multiline':False]['text':' namespace jit','line_number':3159,'multiline':False]['text':' namespace torch','line_number':3160,'multiline':False]