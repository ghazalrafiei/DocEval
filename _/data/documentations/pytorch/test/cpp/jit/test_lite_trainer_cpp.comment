['text':' Tests go in torch::jit','line_number':19,'multiline':False]['text':' init: y = x + 1;','line_number':33,'multiline':False]['text':' target: y = 2 x + 1','line_number':34,'multiline':False]['text':' Reference: Full jit','line_number':38,'multiline':False]['text':'  mm.train();','line_number':42,'multiline':False]['text':' TODO Renable these tests after parameters are correctly loaded on mobile','line_number':81,'multiline':False]['text':'
TEST(MobileTest, NamedParameters) {
  Module m("m");
  m.register_parameter("foo", torch::ones({}), false);
  m.define(R"(
    def add_it(self, x):
      b = 4
      return self.foo + x + b
  )");
  Module child("m2");
  child.register_parameter("foo", 4 * torch::ones({}), false);
  child.register_parameter("bar", 4 * torch::ones({}), false);
  m.register_module("child1", child);
  m.register_module("child2", child.clone());
  std::stringstream ss;
  m._save_for_mobile(ss);
  mobile::Module bc = _load_for_mobile(ss);

  auto full_params = m.named_parameters();
  auto mobile_params = bc.named_parameters();
  AT_ASSERT(full_params.size() == mobile_params.size());
  for (const auto& e : full_params) {
    AT_ASSERT(e.value.item().toInt() ==
    mobile_params[e.name].item().toInt());
  }
}

TEST(MobileTest, SaveLoadParameters) {
  Module m("m");
  m.register_parameter("foo", torch::ones({}), false);
  m.define(R"(
    def add_it(self, x):
      b = 4
      return self.foo + x + b
  )");
  Module child("m2");
  child.register_parameter("foo", 4 * torch::ones({}), false);
  child.register_parameter("bar", 3 * torch::ones({}), false);
  m.register_module("child1", child);
  m.register_module("child2", child.clone());
  auto full_params = m.named_parameters();
  std::stringstream ss;
  std::stringstream ss_data;
  m._save_for_mobile(ss);

  // load mobile module, save mobile named parameters
  mobile::Module bc = _load_for_mobile(ss);
  _save_parameters(bc.named_parameters(), ss_data);

  // load back the named parameters, compare to full-jit Module's
  auto mobile_params = _load_parameters(ss_data);
  AT_ASSERT(full_params.size() == mobile_params.size());
  for (const auto& e : full_params) {
    AT_ASSERT(e.value.item<int>() == mobile_params[e.name].item<int>());
  }
}
','line_number':82,'multiline':True]['text':' load mobile module, save mobile named parameters','line_number':154,'multiline':False]['text':' load back the named parameters, test is empty','line_number':158,'multiline':False]['text':' Save some empty parameters.','line_number':164,'multiline':False]['text':' Verify that parameters were serialized to a ZIP container.','line_number':169,'multiline':False]['text':' Save some empty parameters using flatbuffer.','line_number':178,'multiline':False]['text':'use_flatbuffer=','line_number':181,'multiline':True]['text':' Verify that parameters were serialized to a flatbuffer. The flatbuffer','line_number':183,'multiline':False]['text':' magic bytes should be at offsets 4..7. The first four bytes contain an','line_number':184,'multiline':False]['text':' offset to the actual flatbuffer data.','line_number':185,'multiline':False]['text':' Create some simple parameters to save.','line_number':194,'multiline':False]['text':' Serialize them using flatbuffers.','line_number':199,'multiline':False]['text':'use_flatbuffer=','line_number':201,'multiline':True]['text':' The flatbuffer magic bytes should be at offsets 4..7.','line_number':203,'multiline':False]['text':' Read them back and check that they survived the trip.','line_number':209,'multiline':False]['text':' Manually create some data that doesn't look like a ZIP or Flatbuffer file.','line_number':225,'multiline':False]['text':' Make sure it's longer than 8 bytes, since getFileFormat() needs that much','line_number':226,'multiline':False]['text':' data to detect the type.','line_number':227,'multiline':False]['text':' Loading parameters from it should throw an exception.','line_number':233,'multiline':False]['text':' Loading parameters from an empty data stream should throw an exception.','line_number':238,'multiline':False]['text':' Manually create some data with Flatbuffer header.','line_number':244,'multiline':False]['text':' Loading parameters from it should throw an exception.','line_number':249,'multiline':False]['text':' init: y = x + 1;','line_number':264,'multiline':False]['text':' target: y = 2 x + 1','line_number':265,'multiline':False]['text':' Reference: Full jit and torch::optim::SGD','line_number':269,'multiline':False]['text':' Test: lite interpreter and torch::jit::mobile::SGD','line_number':290,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':317,'multiline':False]['text':' namespace','line_number':326,'multiline':False]['text':' test that sampler can be used with dataloader','line_number':329,'multiline':False]['text':' namespace jit','line_number':391,'multiline':False]['text':' namespace torch','line_number':392,'multiline':False]