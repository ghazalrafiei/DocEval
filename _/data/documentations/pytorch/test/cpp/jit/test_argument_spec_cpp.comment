['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':16,'multiline':False]['text':' namespace','line_number':49,'multiline':False]['text':' make sure we have some non-standard strides','line_number':64,'multiline':False]['text':' same list but different backing values','line_number':67,'multiline':False]['text':'with_grad=','line_number':88,'multiline':True]['text':' we use a below, so no move','line_number':92,'multiline':False]['text':' same as list, except for one stride','line_number':99,'multiline':False]['text':' TODO: this test was disabled for unknown reasons and doesn't run.','line_number':108,'multiline':False]['text':' static size_t hashCode(const TensorTypePtr& ptr) {','line_number':109,'multiline':False]['text':'   return std::hash<TensorType>()(*ptr.get());','line_number':110,'multiline':False]['text':' }','line_number':111,'multiline':False]['text':' TEST(ArgumentSpecTest, VaryingShape) {','line_number':113,'multiline':False]['text':'   c10::VaryingShape<int64_t> vs(c10::optional<size_t>{});','line_number':114,'multiline':False]['text':'   auto ptt_empty1 = TensorType::create({}, {}, vs, vs, false);','line_number':115,'multiline':False]['text':'   auto ptt_empty2 = TensorType::create({}, {}, vs, vs, false);','line_number':116,'multiline':False]['text':'   ASSERT_EQ(hashCode(ptt_empty1), hashCode(ptt_empty2));','line_number':117,'multiline':False]['text':'   c10::VaryingShape<int64_t> vs22(std::vector<int64_t>{2, 2});','line_number':119,'multiline':False]['text':'   auto ptt_vs22_vs22_1 = TensorType::create({}, {}, vs22, vs22, false);','line_number':120,'multiline':False]['text':'   auto ptt_vs22_vs22_2 = TensorType::create({}, {}, vs22, vs22, false);','line_number':121,'multiline':False]['text':'   ASSERT_EQ(hashCode(ptt_vs22_vs22_1), hashCode(ptt_vs22_vs22_2));','line_number':122,'multiline':False]['text':'   c10::VaryingShape<int64_t> vs23(std::vector<int64_t>{2, 3});','line_number':124,'multiline':False]['text':'   auto ptt_vs22_vs23_2 = TensorType::create({}, {}, vs22, vs23, false);','line_number':125,'multiline':False]['text':'   ASSERT_NE(hashCode(ptt_vs22_vs22_1), hashCode(ptt_vs22_vs23_2));','line_number':126,'multiline':False]['text':'   auto ptt_vs22_vs22_1_true = TensorType::create({}, {}, vs22, vs22, true);','line_number':128,'multiline':False]['text':'   auto ptt_vs22_vs22_2_true = TensorType::create({}, {}, vs22, vs22, true);','line_number':129,'multiline':False]['text':'   ASSERT_EQ(hashCode(ptt_vs22_vs22_1_true), hashCode(ptt_vs22_vs22_2_true));','line_number':130,'multiline':False]['text':'   auto ptt_vs22_vs22_1_false = TensorType::create({}, {}, vs22, vs22, false);','line_number':132,'multiline':False]['text':'   ASSERT_NE(hashCode(ptt_vs22_vs22_1_true), hashCode(ptt_vs22_vs22_1_false));','line_number':133,'multiline':False]['text':' }','line_number':134,'multiline':False]['text':' make sure we have some non-standard strides','line_number':158,'multiline':False]['text':' same list but different backing values','line_number':161,'multiline':False]['text':'with_grad=','line_number':182,'multiline':True]['text':' we still need a for the test below','line_number':186,'multiline':False]['text':' same as list, except for one stride, used to be','line_number':194,'multiline':False]['text':' different, now the same','line_number':195,'multiline':False]['text':' namespace jit','line_number':200,'multiline':False]['text':' namespace torch','line_number':201,'multiline':False]