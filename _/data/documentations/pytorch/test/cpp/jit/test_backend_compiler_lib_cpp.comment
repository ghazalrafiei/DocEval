['text':' Implementation of a PyTorch Backend that can process, compile and execute','line_number':14,'multiline':False]['text':' TorchScript Modules composed of 'add' and 'sub' operators. It just supports','line_number':15,'multiline':False]['text':' for modules that implement a sum or subtraction of 2 inputs (i.e. in1 + in2','line_number':16,'multiline':False]['text':' or in1 - in2). Hence the methods of the models expect exactly 2 inputs of','line_number':17,'multiline':False]['text':' type Tensor. This backend is used to demonstrate the flow of compilation and','line_number':18,'multiline':False]['text':' execution with minimum amount of work. It's not intended to a practical','line_number':19,'multiline':False]['text':' backend that can be used for actual inference.','line_number':20,'multiline':False]['text':' Implementation details:','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' Compilation','line_number':24,'multiline':False]['text':' 1. A backend with minimum compilation features, "backend_with_compiler_demo"','line_number':25,'multiline':False]['text':' is added.','line_number':26,'multiline':False]['text':' 2. The compilation happens AOT in the preprocess function registered to this','line_number':27,'multiline':False]['text':' backend.','line_number':28,'multiline':False]['text':' 3. Compiled results are stored in a string blob for each method. They are','line_number':29,'multiline':False]['text':' serialized to the lowered module with __getstate__ function.','line_number':30,'multiline':False]['text':' 4. Error message with model source code is thrown, for features not handled','line_number':31,'multiline':False]['text':' by the backend compiler.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' Runtime','line_number':34,'multiline':False]['text':' 1. The compiled blob is loaded in __setstate__ method.','line_number':35,'multiline':False]['text':' 2. The compile function of the backend: parse the preprocessed blob to the','line_number':36,'multiline':False]['text':' format (a list of tokens) that the backend can understand.','line_number':37,'multiline':False]['text':' 3. The execute function of the backend executes the specified method','line_number':38,'multiline':False]['text':' (handle).','line_number':39,'multiline':False]['text':' namespace','line_number':65,'multiline':False]['text':' Constructor.','line_number':69,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':70,'multiline':False]['text':' Since the actual compilation is done AOT for this backend, compile just','line_number':78,'multiline':False]['text':' forwards everything along. In a non toy setup this could grab information','line_number':79,'multiline':False]['text':' from that runtime that might be relevant to execute, such as build flags','line_number':80,'multiline':False]['text':' the resolution of the devices camera, or basically any runtime specific','line_number':81,'multiline':False]['text':' information that wouldnt be available server side where preprocess is','line_number':82,'multiline':False]['text':' called.','line_number':83,'multiline':False]['text':' Function that actually executes the model in the backend. Here there is','line_number':97,'multiline':False]['text':' nothing to dispatch to, so the backend is implemented locally within','line_number':98,'multiline':False]['text':' execute and it only supports add, subtract, and constant. In a non toy','line_number':99,'multiline':False]['text':' backend you can imagine how this function could be used to actually','line_number':100,'multiline':False]['text':' dispatch the inputs to the relevant backend/device.','line_number':101,'multiline':False]['text':' example: [('prim::Constant#1', 14), ('aten::add', 15)]','line_number':104,'multiline':False]['text':' 15 is the length of 'prim::Constant#' the constant val comes after','line_number':127,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':132,'multiline':False]['text':' namespace','line_number':198,'multiline':False]['text':' namespace jit','line_number':200,'multiline':False]['text':' namespace torch','line_number':201,'multiline':False]