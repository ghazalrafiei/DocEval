['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':37,'multiline':False]['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':39,'multiline':False]['text':' Clamp tanh input tensor values to [-3, 3]','line_number':115,'multiline':False]['text':' to set a minimum on gradient absolute values','line_number':116,'multiline':False]['text':' TODO: enable once we'll be able to capture lists across','line_number':135,'multiline':False]['text':' forward-backward','line_number':136,'multiline':False]['text':'{"chunk",   {{10, 12, 15}}, [](const VL& v) -> VL { return','line_number':137,'multiline':False]['text':' fmap<Variable>(v[0].chunk(4, 1)); }},','line_number':138,'multiline':False]['text':'{"chunk",   {{10, 12, 15}}, [](const VL& v) -> VL { return','line_number':139,'multiline':False]['text':' fmap<Variable>(v[0].chunk(3, 2)); }},','line_number':140,'multiline':False]['text':'{"split",   {{10, 12, 15}}, [](const VL& v) -> VL { return','line_number':141,'multiline':False]['text':' fmap<Variable>(v[0].split(4, 1)); }},','line_number':142,'multiline':False]['text':'{"split",   {{10, 12, 15}}, [](const VL& v) -> VL { return','line_number':143,'multiline':False]['text':' fmap<Variable>(v[0].split(3, 2)); }},','line_number':144,'multiline':False]['text':' Get reference values form autograd','line_number':148,'multiline':False]['text':' Trace and differentiate the op','line_number':154,'multiline':False]['text':' Tracing of some ops depends on the DCE trick','line_number':165,'multiline':False]['text':' Get outputs from the interpreter','line_number':169,'multiline':False]['text':' Compare results','line_number':176,'multiline':False]['text':' Note: can't use IRParser for this test due to issue #23989','line_number':185,'multiline':False]['text':' Builds graph a * b * a + b','line_number':196,'multiline':False]['text':'num_outputs =','line_number':201,'multiline':True]['text':'num_outputs =','line_number':205,'multiline':True]['text':'num_outputs =','line_number':210,'multiline':True]['text':' for e and %4 = (d + a)','line_number':265,'multiline':False]['text':' only a requires grad','line_number':266,'multiline':False]['text':'exactly','line_number':283,'multiline':True]['text':' initial run to profile requires_grad information','line_number':323,'multiline':False]['text':' we expect to compute grad_weight (which requires a matmul) but we don't','line_number':341,'multiline':False]['text':' expect to compute grad_input. So, we expect exactly 1 matmul.','line_number':342,'multiline':False]['text':' Note: this could change, e.g. if mm is used instead','line_number':343,'multiline':False]['text':' namespace jit','line_number':347,'multiline':False]['text':' namespace torch','line_number':348,'multiline':False]