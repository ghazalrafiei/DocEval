['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':77,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':203,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':252,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':288,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':307,'multiline':False]['text':' When you have an autograd::Variable, it should be converted to a','line_number':333,'multiline':False]['text':' torch::Tensor before being passed to the function (to avoid a type','line_number':334,'multiline':False]['text':' mismatch).','line_number':335,'multiline':False]['text':' at::Tensors that are not variables work too.','line_number':341,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-forwarding-reference-overload)','line_number':349,'multiline':False]['text':' namespace nn','line_number':360,'multiline':False]['text':' namespace torch','line_number':361,'multiline':False]['text':' const and non-const types have the same typeid(),','line_number':368,'multiline':False]['text':' but casting Holder<int> to Holder<const int> is undefined','line_number':369,'multiline':False]['text':' behavior according to UBSAN:','line_number':370,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/26964','line_number':371,'multiline':False]['text':' ASSERT_NE(value.try_get<const int>(), nullptr);','line_number':372,'multiline':False]['text':' This test does not work at all, because it looks like make_value','line_number':375,'multiline':False]['text':' decays const int into int.','line_number':376,'multiline':False]['text':' TEST_F(AnyValueTest, CorrectlyAccessesConstIntWhenCorrectType) {','line_number':377,'multiline':False]['text':'  auto value = make_value<const int>(5);','line_number':378,'multiline':False]['text':'  ASSERT_NE(value.try_get<const int>(), nullptr);','line_number':379,'multiline':False]['text':'  // ASSERT_NE(value.try_get<int>(), nullptr);','line_number':380,'multiline':False]['text':'  ASSERT_EQ(value.get<const int>(), 5);','line_number':381,'multiline':False]['text':'}','line_number':382,'multiline':False]