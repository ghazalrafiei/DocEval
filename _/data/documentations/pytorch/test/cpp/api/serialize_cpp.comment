['text':' namespace','line_number':37,'multiline':False]['text':' Models 1, 2, 3 will have the same parameters.','line_number':85,'multiline':False]['text':' Make some optimizers','line_number':98,'multiline':False]['text':' Do 2 steps of model1','line_number':116,'multiline':False]['text':' Do 2 steps of model 2 without saving the optimizer','line_number':120,'multiline':False]['text':' Do 1 step of model 3','line_number':124,'multiline':False]['text':' save the optimizer','line_number':127,'multiline':False]['text':' optim3_2 and optim1 should have param_groups and state of size 1 and','line_number':137,'multiline':False]['text':' state_size respectively','line_number':138,'multiline':False]['text':' state_size = 2 for all optimizers except LBFGS as LBFGS only maintains one','line_number':140,'multiline':False]['text':' global state','line_number':141,'multiline':False]['text':' optim3_2 and optim1 should have param_groups and state of same size','line_number':145,'multiline':False]['text':' checking correctness of serialization logic for optimizer.param_groups_ and','line_number':149,'multiline':False]['text':' optimizer.state_','line_number':150,'multiline':False]['text':' Do step2 for model 3','line_number':158,'multiline':False]['text':' Model 1 and 3 should be the same','line_number':166,'multiline':False]['text':'/ Utility function to save a value of `int64_t` type.','line_number':174,'multiline':False]['text':' Utility function to save a vector of buffers.','line_number':181,'multiline':False]['text':'is_buffer=','line_number':191,'multiline':True]['text':' Utility function to save a vector of step buffers.','line_number':195,'multiline':False]['text':' We don't support serializing `ZeroTensor` as it is not public facing yet.','line_number':293,'multiline':False]['text':' If in future, `ZeroTensor` serialization is supported, this test should','line_number':294,'multiline':False]['text':' start failing!','line_number':295,'multiline':False]['text':' create a hierarchy of models with names differing below the top level','line_number':406,'multiline':False]['text':' We want the errors to contain hierarchy information, too.','line_number':413,'multiline':False]['text':' We better be able to save and load an XOR model!','line_number':422,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':450,'multiline':False]['text':' Models 1, 2, 3 will have the same parameters.','line_number':469,'multiline':False]['text':' Make some optimizers with momentum (and thus state)','line_number':483,'multiline':False]['text':' Do 2 steps of model1','line_number':504,'multiline':False]['text':' Do 2 steps of model 2 without saving the optimizer','line_number':508,'multiline':False]['text':' Do 2 steps of model 3 while saving the optimizer','line_number':512,'multiline':False]['text':' Model 1 and 3 should be the same','line_number':525,'multiline':False]['text':' bc compatibility check','line_number':537,'multiline':False]['text':' fill up with optim1 sum_buffers','line_number':553,'multiline':False]['text':' fill up with optim1 state_buffers','line_number':555,'multiline':False]['text':' write sum_buffers and step_buffers to the file','line_number':566,'multiline':False]['text':' bc compatibility check','line_number':581,'multiline':False]['text':' added a tensor for lazy init check - when all params do not have a momentum','line_number':584,'multiline':False]['text':' buffer entry','line_number':585,'multiline':False]['text':' write momentum_buffers to the file','line_number':612,'multiline':False]['text':' bc compatibility check','line_number':630,'multiline':False]['text':' added a tensor for lazy init check - when all params do not have entry in','line_number':633,'multiline':False]['text':' buffers','line_number':634,'multiline':False]['text':' write buffers to the file','line_number':667,'multiline':False]['text':' bc compatibility check','line_number':689,'multiline':False]['text':' added a tensor for lazy init check - when all params do not have entry in','line_number':692,'multiline':False]['text':' buffers','line_number':693,'multiline':False]['text':' write buffers to the file','line_number':726,'multiline':False]['text':' bc compatibility check','line_number':747,'multiline':False]['text':' added a tensor for lazy init check - when all params do not have a momentum','line_number':751,'multiline':False]['text':' buffer entry','line_number':752,'multiline':False]['text':' write buffers to the file','line_number':784,'multiline':False]['text':' old RMSprop didn't track step value','line_number':799,'multiline':False]['text':' bc compatibility check','line_number':817,'multiline':False]['text':' added a tensor for lazy init check - when all params do not have entry in','line_number':820,'multiline':False]['text':' buffers','line_number':821,'multiline':False]['text':' write buffers to the file','line_number':851,'multiline':False]['text':'is_buffer=','line_number':854,'multiline':True]['text':'is_buffer=','line_number':855,'multiline':True]['text':'is_buffer=','line_number':856,'multiline':True]['text':'is_buffer=','line_number':857,'multiline':True]['text':'is_buffer=','line_number':858,'multiline':True]['text':' old LBFGS didn't track func_evals, n_iter, ro, al values','line_number':872,'multiline':False]['text':' We better be able to save and load a XOR model!','line_number':883,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':917,'multiline':False]['text':' NOTE: if a `Module` contains unserializable submodules (e.g.','line_number':1012,'multiline':False]['text':' `nn::Functional`), we expect those submodules to be skipped when the `Module`','line_number':1013,'multiline':False]['text':' is being serialized.','line_number':1014,'multiline':False]['text':' Submodule with name "relu" should not exist in the `InputArchive`,','line_number':1030,'multiline':False]['text':' because the "relu" submodule is an `nn::Functional` and is not','line_number':1031,'multiline':False]['text':' serializable.','line_number':1032,'multiline':False]['text':' NOTE: If a `Module` contains unserializable submodules (e.g.','line_number':1036,'multiline':False]['text':' `nn::Functional`), we don't check the existence of those submodules in the','line_number':1037,'multiline':False]['text':' `InputArchive` when deserializing.','line_number':1038,'multiline':False]['text':' Manually change the values of "b.foo", so that we can check whether the','line_number':1054,'multiline':False]['text':' buffer contains these values after deserialization.','line_number':1055,'multiline':False]['text':'is_buffer=','line_number':1067,'multiline':True]['text':' Submodule with name "relu1" should not exist in `archive_b`, because the','line_number':1069,'multiline':False]['text':' "relu1" submodule is an `nn::Functional` and is not serializable.','line_number':1070,'multiline':False]['text':' Submodule with name "relu2" should not exist in `archive`, because the','line_number':1073,'multiline':False]['text':' "relu2" submodule is an `nn::Functional` and is not serializable.','line_number':1074,'multiline':False]['text':' `torch::load(...)` works without error, even though `A` contains the','line_number':1078,'multiline':False]['text':' `nn::Functional` submodules while the serialized file doesn't, because the','line_number':1079,'multiline':False]['text':' `nn::Functional` submodules are not serializable and thus ignored when','line_number':1080,'multiline':False]['text':' deserializing.','line_number':1081,'multiline':False]['text':' Check that the "b.foo" buffer is correctly deserialized from the file.','line_number':1084,'multiline':False]['text':' `output` should equal to the sum of the values we manually assigned to','line_number':1086,'multiline':False]['text':' "b.foo" before serialization.','line_number':1087,'multiline':False]