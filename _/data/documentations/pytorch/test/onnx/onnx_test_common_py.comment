['text':' Owner(s): ["module: onnx"]','line_number':1,'multiline':False]['text':' Process graph inputs','line_number':105,'multiline':False]['text':' For IR version 3 type export.','line_number':130,'multiline':False]['text':' The exported ONNX model may have less inputs than the pytorch model because of const folding.','line_number':143,'multiline':False]['text':' This mostly happens in unit test, where we widely use torch.size or torch.shape.','line_number':144,'multiline':False]['text':' So the output is only dependent on the input shape, not value.','line_number':145,'multiline':False]['text':' remained_onnx_input_idx is used to indicate which pytorch model input idx is remained in ONNX model.','line_number':146,'multiline':False]['text':' avoid mutable data structure','line_number':251,'multiline':False]['text':' TODO: Support dynamic shapes for torch.export.ExportedProgram','line_number':279,'multiline':False]['text':'       https://github.com/pytorch/pytorch/issues/113705','line_number':280,'multiline':False]['text':' Feed args and kwargs into exporter.','line_number':285,'multiline':False]['text':' Note that exporter should flatten kwargs into positional args the exported model;','line_number':286,'multiline':False]['text':' since ONNX doesn't represent kwargs.','line_number':287,'multiline':False]['text':' This confirms the exported mode accepts different input shapes','line_number':329,'multiline':False]['text':' when dynamic shape is enabled.','line_number':330,'multiline':False]['text':' Suppress floods of warnings from ONNX Runtime','line_number':380,'multiline':False]['text':' Error','line_number':382,'multiline':False]['text':' NOTE: ONNXProgram holds a reference (not copy) to the original ref_model, including its state_dict.','line_number':437,'multiline':False]['text':' Thus, ONNXProgram() must run before ref_model() to prevent ref_model.forward() from changing the state_dict.','line_number':438,'multiline':False]['text':' Otherwise, the ref_model can change buffers on state_dict which would be used by ONNXProgram.__call__()','line_number':439,'multiline':False]['text':' NOTE: `model_with_state_dict=ref_model` is specified to cover runs with FakeTensor support','line_number':440,'multiline':False]['text':' The min onnx opset version to test for','line_number':456,'multiline':False]['text':' The max onnx opset version to test for','line_number':458,'multiline':False]['text':' TODO(titaiwang): Change this when more versions are supported','line_number':462,'multiline':False]['text':' The min onnx opset version to test for','line_number':463,'multiline':False]['text':' The max onnx opset version to test for','line_number':465,'multiline':False]['text':' torch.float64,  ORT doesn't support','line_number':487,'multiline':False]['text':' torch.complex32,  NOTE: torch.complex32 is experimental in torch','line_number':491,'multiline':False]['text':' torch.complex128,  ORT doesn't support','line_number':493,'multiline':False]['text':' Boolean','line_number':497,'multiline':False]['text':' Integers','line_number':499,'multiline':False]['text':' Floating types','line_number':501,'multiline':False]['text':' Skip does not apply to this opset','line_number':642,'multiline':False]['text':' This decorator doesn't modify fn in any way','line_number':659,'multiline':False]['text':' We need to skip as soon as possible, as SegFault might also be a case.','line_number':738,'multiline':False]['text':' We could use `except (AssertionError, RuntimeError, ...) as e:`, but it needs','line_number':744,'multiline':False]['text':' to go over all test cases to find the right exception type.','line_number':745,'multiline':False]['text':' pylint: disable=broad-exception-caught','line_number':746,'multiline':False]