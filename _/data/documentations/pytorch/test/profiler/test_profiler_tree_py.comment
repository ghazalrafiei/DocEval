['text':' Owner(s): ["oncall: profiler"]','line_number':1,'multiline':False]['text':' These functions can vary from based on platform and build (e.g. with CUDA)','line_number':18,'multiline':False]['text':' and generally distract from rather than adding to the test.','line_number':19,'multiline':False]['text':' These show up only on CUDA, prune them so the CUDA and CPU expected results can be the same','line_number':32,'multiline':False]['text':' ROCTracer is currently not producing events that profiler can extract. We','line_number':37,'multiline':False]['text':' should bring it up to parity with CUPTI Kineto / profiler integration, but in','line_number':38,'multiline':False]['text':' the mean time there is still utility in running tests but not checking that','line_number':39,'multiline':False]['text':' the values match expected value.','line_number':40,'multiline':False]['text':'  1) We will still catch runtime errors and assert failures','line_number':41,'multiline':False]['text':'  2) We can diff the output to see how far we are from parity','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' TODO: We also fail to capture events for Windows on some platforms.','line_number':44,'multiline':False]['text':' Profiler inserts a `cudaDeviceSynchronize` at the end of profiling.','line_number':133,'multiline':False]['text':' and may also insert 'Context Sync' CUDA synchronization event.','line_number':134,'multiline':False]['text':' Profiler inserts a `hipDeviceSynchronize` at the end of profiling.','line_number':141,'multiline':False]['text':' This test can appear as `test/profiler/test_profiler_tree.py`','line_number':156,'multiline':False]['text':' depending on where it is run from.','line_number':157,'multiline':False]['text':' We test against a string literal, so all paths have to look like POSIX paths.','line_number':162,'multiline':False]['text':' We don't want to have to update this test every time PyTorch changes.','line_number':165,'multiline':False]['text':' At some point we should test some line numbers, but for now it's','line_number':166,'multiline':False]['text':' too brittle.','line_number':167,'multiline':False]['text':' Nvidia kernels.','line_number':178,'multiline':False]['text':' Check that the lineage established by the profiler matches the','line_number':194,'multiline':False]['text':' caller recorded by the Python tracer.','line_number':195,'multiline':False]['text':' Warning: Here be dragons','line_number':213,'multiline':False]['text':'   Different platforms will have subtly different behavior for Python','line_number':214,'multiline':False]['text':'   tracing. Observed differences include:','line_number':215,'multiline':False]['text':'     1) Windows symbolicates names differently from posix','line_number':216,'multiline':False]['text':'     2) The profile callback for c_call does not fire for Tensor.__pow__','line_number':217,'multiline':False]['text':'        on certain platforms. This is not caused by the function tracer,','line_number':218,'multiline':False]['text':'        but by cPython itself.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' The purpose of these unit tests is to ensure that the profiler is','line_number':221,'multiline':False]['text':' doing reasonable things. When these platform dependent variations occur','line_number':222,'multiline':False]['text':' simply coerce them into a platform independent form. If you made a','line_number':223,'multiline':False]['text':' change in the codebase which changes the trace produced, simply use','line_number':224,'multiline':False]['text':' EXPECTTEST_ACCEPT=1 to update the tests to reflect the new structure.','line_number':225,'multiline':False]['text':' expecttest will not show the diff view if `len(actual) < len(expected)`','line_number':227,'multiline':False]['text':' The profiler should produce deterministic results and should return','line_number':235,'multiline':False]['text':' to a clean state after each run. As a result, only the first','line_number':236,'multiline':False]['text':' replicate is allowed to update `expected`. If subsequent runs do not','line_number':237,'multiline':False]['text':' match it is a bug in the profiler.','line_number':238,'multiline':False]['text':' Check that we correctly handle the case when a user','line_number':312,'multiline':False]['text':' annotation does not call `__exit__`.','line_number':313,'multiline':False]['text':' NB: The `aten::zeros` before the record function annotations are due to','line_number':320,'multiline':False]['text':' `at::cpp_custom_type_hack`. When we switch to `torch::CustomClassHolder`','line_number':321,'multiline':False]['text':' they will disappear.','line_number':322,'multiline':False]['text':' There's some lazy initialization in __torch_function__. If we don't','line_number':652,'multiline':False]['text':' run this the first run won't match the replicates.','line_number':653,'multiline':False]['text':' noqa: B950','line_number':809,'multiline':False]['text':' Warmup','line_number':885,'multiline':False]['text':' noqa: B950','line_number':1062,'multiline':False]