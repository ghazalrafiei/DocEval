['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]['text':' If we are going to trace through these, we should use NumPy','line_number':39,'multiline':False]['text':' If testing on eager mode, we use torch._numpy','line_number':40,'multiline':False]['text':' IS_PYPY, IS_PYSTON, HAS_REFCOUNT,','line_number':45,'multiline':False]['text':' runstring, temppath,','line_number':53,'multiline':False]['text':' break_cycles,','line_number':54,'multiline':False]['text':' IS_PYPY, IS_PYSTON, HAS_REFCOUNT,','line_number':61,'multiline':False]['text':' runstring, temppath,','line_number':69,'multiline':False]['text':' break_cycles,','line_number':70,'multiline':False]['text':' #### stubs to make pytest pass the collections stage ####','line_number':84,'multiline':False]['text':' defined in numpy/testing/_utils.py','line_number':87,'multiline':False]['text':' FIXME','line_number':114,'multiline':False]['text':' #### end stubs','line_number':118,'multiline':False]['text':' Can't do this, fall back to standard allocation (which','line_number':130,'multiline':False]['text':' should always be sufficiently aligned)','line_number':131,'multiline':False]['text':' Note: slices producing 0-size arrays do not necessarily change','line_number':149,'multiline':False]['text':' data pointer --- so we use and allocate size+1','line_number':150,'multiline':False]['text':' (reason="TODO: flags")','line_number':157,'multiline':False]['text':' Ensure that any base being writeable is sufficient to change flag;','line_number':174,'multiline':False]['text':' this is especially interesting for arrays from an array interface.','line_number':175,'multiline':False]['text':' Create subclass so base will not be collapsed, this is OK to change','line_number':181,'multiline':False]['text':' Can be set to True again.','line_number':186,'multiline':False]['text':' Must assume not writeable, since only base is not:','line_number':203,'multiline':False]['text':' gh-9440 - make sure fromstring, from buffer on readonly buffers','line_number':207,'multiline':False]['text':' set writeable False','line_number':208,'multiline':False]['text':' Small arrays will be copied without setting base.','line_number':238,'multiline':False]['text':' See condition for using PyArray_SetBaseObject in','line_number':239,'multiline':False]['text':' array_setstate.','line_number':240,'multiline':False]['text':' only warn once','line_number':254,'multiline':False]['text':' Delete _warn_on_write after deprecation and simplify','line_number':261,'multiline':False]['text':' the parameterization:','line_number':262,'multiline':False]['text':' not power of two are accessed byte-wise and thus considered aligned','line_number':296,'multiline':False]['text':' (reason="TODO: hash")','line_number':305,'multiline':False]['text':' see #3793','line_number':307,'multiline':False]['text':' (reason="TODO: hash")','line_number':343,'multiline':False]['text':' use ndarray.tensor._base to track the base tensor','line_number':370,'multiline':False]['text':' Check behavior reported in gh-2503:','line_number':400,'multiline':False]['text':' noqa: TRY200','line_number':411,'multiline':False]['text':' Check that the true extent of the array is used.','line_number':420,'multiline':False]['text':' Test relies on as_strided base not exposing a buffer.','line_number':421,'multiline':False]['text':' Test for offset calculations:','line_number':429,'multiline':False]['text':' test 0d','line_number':438,'multiline':False]['text':' Filling from a scalar','line_number':460,'multiline':False]['text':' Filling from a tuple that can be converted','line_number':464,'multiline':False]['text':' to a scalar','line_number':465,'multiline':False]['text':' gh-22922','line_number':472,'multiline':False]['text':' (reason="order='F'")','line_number':534,'multiline':False]['text':' (reason="order='F'")','line_number':551,'multiline':False]['text':' assert_(np.asfortranarray(d).flags.f_contiguous)   # XXX: f ordering','line_number':566,'multiline':False]['text':' assert_(np.asfortranarray(d).flags.f_contiguous)','line_number':569,'multiline':False]['text':' missing arguments','line_number':585,'multiline':False]['text':' too many arguments','line_number':587,'multiline':False]['text':' This should likely be made positional only, but do not change','line_number':601,'multiline':False]['text':' the name accidentally.','line_number':602,'multiline':False]['text':' Broadcasting the input to the output','line_number':613,'multiline':False]['text':' For compatibility with <= 1.5, a limited version of broadcasting','line_number':619,'multiline':False]['text':' the output to the input.','line_number':620,'multiline':False]['text':'','line_number':621,'multiline':False]['text':' This behavior is inconsistent with NumPy broadcasting','line_number':622,'multiline':False]['text':' in general, because it only uses one of the two broadcasting','line_number':623,'multiline':False]['text':' rules (adding a new "1" dimension to the left of the shape),','line_number':624,'multiline':False]['text':' applied to the output instead of an input. In NumPy 2.0, this kind','line_number':625,'multiline':False]['text':' of broadcasting assignment will likely be disallowed.','line_number':626,'multiline':False]['text':' The other type of broadcasting would require a reduction operation.','line_number':629,'multiline':False]['text':' Address issue #2276','line_number':639,'multiline':False]['text':' assert_raises((TypeError, ValueError), assign, [1])  # numpy raises, we do not','line_number':649,'multiline':False]['text':' gh-5049','line_number':653,'multiline':False]['text':' previously this would invoke __str__','line_number':668,'multiline':False]['text':' this would crash for the same reason','line_number':671,'multiline':False]['text':' gh-8902','line_number':676,'multiline':False]['text':' only relevant if longdouble is larger than float','line_number':695,'multiline':False]['text':' we're looking for loss of precision','line_number':696,'multiline':False]['text':' gh-8902','line_number':699,'multiline':False]['text':' construction','line_number':703,'multiline':False]['text':' scalar = scalar','line_number':707,'multiline':False]['text':' 0d = scalar','line_number':711,'multiline':False]['text':' 0d = 0d','line_number':715,'multiline':False]['text':' scalar = 0d','line_number':719,'multiline':False]['text':' cast to str should do "str(scalar)", not "str(scalar.item())"','line_number':728,'multiline':False]['text':' Example: In python2, str(float) is truncated, so we want to avoid','line_number':729,'multiline':False]['text':' str(np.float64(...).item()) as this would incorrectly truncate.','line_number':730,'multiline':False]['text':' (reason="TODO: zero-rank?")   # FIXME: revert skip into xfail','line_number':744,'multiline':False]['text':' `a[...] is a` in numpy <1.9.','line_number':753,'multiline':False]['text':' `b[...] is b` in numpy <1.9.','line_number':754,'multiline':False]['text':' strides and shape must be the same length','line_number':822,'multiline':False]['text':' contiguity checks are for gh-11245','line_number':833,'multiline':False]['text':' this assersion fails because 50 > NPY_MAXDIMS = 32','line_number':895,'multiline':False]['text':' assert_raises(IndexError, subscript, a, (np.newaxis,)*50)','line_number':896,'multiline':False]['text':' (reason="pytorch disallows overlapping assignments")','line_number':898,'multiline':False]['text':' With positive strides','line_number':900,'multiline':False]['text':' With positive and negative strides','line_number':909,'multiline':False]['text':' With just one element overlapping','line_number':922,'multiline':False]['text':' current default','line_number':972,'multiline':False]['text':' Same length scalars (those that go to the same void) work:','line_number':973,'multiline':False]['text':' Promoting different lengths will fail (pre 1.20 this worked)','line_number':977,'multiline':False]['text':' by going via S5 and casting to V5.','line_number':978,'multiline':False]['text':' Check the same for the casting path:','line_number':984,'multiline':False]['text':'  "idx", [pytest.param(Ellipsis, id="arr"), pytest.param((), id="scalar")]','line_number':991,'multiline':False]['text':' The following fails to promote the two dtypes, resulting in an error','line_number':1000,'multiline':False]['text':' 45341 is the smallest integer greater than sqrt(2**31 - 1).','line_number':1008,'multiline':False]['text':' 3037000500 is the smallest integer greater than sqrt(2**63 - 1).','line_number':1009,'multiline':False]['text':' We want to make sure that the square byte array with those dimensions','line_number':1010,'multiline':False]['text':' is too big on 32 or 64 bit systems respectively.','line_number':1011,'multiline':False]['text':' This test is guaranteed to fail due to a too large allocation','line_number':1026,'multiline':False]['text':' true for ieee floats','line_number':1035,'multiline':False]['text':' test big array as they might be allocated different by the system','line_number':1054,'multiline':False]['text':' This test can fail on 32-bit systems due to insufficient','line_number':1059,'multiline':False]['text':' contiguous memory. Deallocating the previous array increases the','line_number':1060,'multiline':False]['text':' chance of success.','line_number':1061,'multiline':False]['text':' test initialization from PyLong(0)','line_number':1065,'multiline':False]['text':' test zeros_like returns the same as zeros','line_number':1075,'multiline':False]['text':' explicitly check some special cases','line_number':1082,'multiline':False]['text':' don't throw decode errors on garbage memory','line_number':1109,'multiline':False]['text':' gh-5100, want object array from iterable object without len()','line_number':1153,'multiline':False]['text':' gh-7264, segfault for this example','line_number':1168,'multiline':False]['text':' segfault?','line_number':1176,'multiline':False]['text':' Special case where a bad __getitem__ makes us fall back on __iter__:','line_number':1180,'multiline':False]['text':' Segfault!','line_number':1193,'multiline':False]['text':' gh-7393','line_number':1198,'multiline':False]['text':' len(d) should give 3, but len(d[0]) will fail','line_number':1209,'multiline':False]['text':' Test that array creation succeeds for arrays addressable by intp','line_number':1214,'multiline':False]['text':' on the byte level and fails for too large arrays.','line_number':1215,'multiline':False]['text':' without dtype=object, the ragged object raises','line_number':1236,'multiline':False]['text':' Lists of mismatching depths are treated as object arrays','line_number':1243,'multiline':False]['text':' The ragged dimension of a list is turned into an object array','line_number':1257,'multiline':False]['text':' should both of these emit deprecation warnings?','line_number':1279,'multiline':False]['text':' None of these should raise, even though they are missing dtype=object','line_number':1287,'multiline':False]['text':' NumPy has support for object fields to be NULL (meaning None)','line_number':1302,'multiline':False]['text':' but generally, we should always fill with the proper None, and','line_number':1303,'multiline':False]['text':' downstream may rely on that.  (For fully initialized arrays!)','line_number':1304,'multiline':False]['text':' We expect a fill value of None, which is not NULL:','line_number':1306,'multiline':False]['text':' (reason="bools not interned")','line_number':1313,'multiline':False]['text':' assert_equal(d[::-2].sum(), d[::-2].size)','line_number':1328,'multiline':False]['text':' (reason="frombuffer")','line_number':1330,'multiline':False]['text':' check all 12 bit combinations in a length 17 array','line_number':1353,'multiline':False]['text':' covers most cases of the 16 byte unrolled code','line_number':1354,'multiline':False]['text':' check all combinations in a length 17 array','line_number':1359,'multiline':False]['text':' covers all cases of the 16 byte unrolled code','line_number':1360,'multiline':False]['text':' prevent mistakes as e.g. gh-4060','line_number':1364,'multiline':False]['text':' empty string -> false','line_number':1374,'multiline':False]['text':' anything else -> true','line_number':1383,'multiline':False]['text':' (reason="See gh-9847")','line_number':1397,'multiline':False]['text':' (reason="See gh-9847")','line_number':1401,'multiline':False]['text':' (reason="all(..., where=...)")','line_number':1410,'multiline':False]['text':' (reason="any(..., where=...)")','line_number':1430,'multiline':False]['text':' (reason="TODO: compress")','line_number':1451,'multiline':False]['text':' (reason="choose(..., mode=...) not implemented")','line_number':1492,'multiline':False]['text':' gh-6272 check overlap on out','line_number':1494,'multiline':False]['text':' (reason="reshape(..., order='F')")','line_number':1543,'multiline':False]['text':' With output array','line_number':1562,'multiline':False]['text':' Complex rounding','line_number':1572,'multiline':False]['text':'  assert_raises(ValueError, a.squeeze, axis=(1,))   # a noop in pytorch','line_number':1580,'multiline':False]['text':' test ordering for floats and complex containing nans. It is only','line_number':1591,'multiline':False]['text':' necessary to check the less-than comparison, so sorts that','line_number':1592,'multiline':False]['text':' only follow the insertion sort path are sufficient. We only','line_number':1593,'multiline':False]['text':' test doubles and complex doubles as the logic is the same.','line_number':1594,'multiline':False]['text':' check doubles','line_number':1596,'multiline':False]['text':' (reason="sort complex")','line_number':1602,'multiline':False]['text':' check complex','line_number':1604,'multiline':False]['text':' all c scalar sorts use the same code with different types','line_number':1612,'multiline':False]['text':' so it suffices to run a quick check with one type. The number','line_number':1613,'multiline':False]['text':' of sorted items must be greater than ~50 to check the actual','line_number':1614,'multiline':False]['text':' algorithm because quick and merge sort fall over to insertion','line_number':1615,'multiline':False]['text':' sort for small arrays.','line_number':1616,'multiline':False]['text':' (reason="sort complex")','line_number':1647,'multiline':False]['text':' test complex sorts. These use the same code as the scalars','line_number':1651,'multiline':False]['text':' but the compare function differs.','line_number':1652,'multiline':False]['text':' check axis handling. This should be the same for all type','line_number':1673,'multiline':False]['text':' specific sorts, so we only check it for one type and one kind','line_number':1674,'multiline':False]['text':' check axis handling for multidimensional empty arrays','line_number':1689,'multiline':False]['text':' test degraded dataset would take minutes to run with normal qsort','line_number':1700,'multiline':False]['text':' create a median of 3 killer where each median is the sorted second','line_number':1704,'multiline':False]['text':' last element of the quicksort partition','line_number':1705,'multiline':False]['text':' (reason="order='F'")','line_number':1714,'multiline':False]['text':' Test copying a Fortran array','line_number':1727,'multiline':False]['text':' Now test starting with a C array.','line_number':1733,'multiline':False]['text':' Force the entry of NULLs into array','line_number':1743,'multiline':False]['text':' Ensure no error is raised, see gh-21833','line_number':1747,'multiline':False]['text':' all c scalar argsorts use the same code with different types','line_number':1755,'multiline':False]['text':' so it suffices to run a quick check with one type. The number','line_number':1756,'multiline':False]['text':' of sorted items must be greater than ~50 to check the actual','line_number':1757,'multiline':False]['text':' algorithm because quick and merge sort fall over to insertion','line_number':1758,'multiline':False]['text':' sort for small arrays.','line_number':1759,'multiline':False]['text':' test complex argsorts. These use the same code as the scalars','line_number':1774,'multiline':False]['text':' but the compare function differs.','line_number':1775,'multiline':False]['text':' test argsort of complex arrays requiring byte-swapping, gh-5441','line_number':1789,'multiline':False]['text':' (reason="argsort axis TODO")','line_number':1796,'multiline':False]['text':' check axis handling. This should be the same for all type','line_number':1798,'multiline':False]['text':' specific argsorts, so we only check it for one type and one kind','line_number':1799,'multiline':False]['text':' check axis handling for multidimensional empty arrays','line_number':1807,'multiline':False]['text':' check that stable argsorts are stable','line_number':1818,'multiline':False]['text':' scalars','line_number':1820,'multiline':False]['text':' complex','line_number':1823,'multiline':False]['text':' string','line_number':1826,'multiline':False]['text':' unicode','line_number':1829,'multiline':False]['text':' (reason="TODO: searchsorted with nans differs in pytorch")','line_number':1833,'multiline':False]['text':' test for floats arrays containing nans. Explicitly test','line_number':1843,'multiline':False]['text':' half, single, and double precision floats to verify that','line_number':1844,'multiline':False]['text':' the NaN-handling is correct.','line_number':1845,'multiline':False]['text':' check keyword arguments','line_number':1852,'multiline':False]['text':' (','line_number':1858,'multiline':False]['text':'    reason="'searchsorted_out_cpu' not implemented for 'ComplexDouble'"','line_number':1859,'multiline':False]['text':' )','line_number':1860,'multiline':False]['text':' test for complex arrays containing nans.','line_number':1862,'multiline':False]['text':' The search sorted routines use the compare functions for the','line_number':1863,'multiline':False]['text':' array type, so this checks if that is consistent with the sort','line_number':1864,'multiline':False]['text':' order.','line_number':1865,'multiline':False]['text':' check double complex','line_number':1866,'multiline':False]['text':' Check 0 elements','line_number':1886,'multiline':False]['text':' Check 1 element','line_number':1893,'multiline':False]['text':' Check all elements equal','line_number':1898,'multiline':False]['text':' (','line_number':1905,'multiline':False]['text':'    reason="RuntimeError: self.storage_offset() must be divisible by 8"','line_number':1906,'multiline':False]['text':' )','line_number':1907,'multiline':False]['text':' Test searching unaligned array','line_number':1909,'multiline':False]['text':' Test searching unaligned array','line_number':1914,'multiline':False]['text':' Test searching for unaligned keys','line_number':1919,'multiline':False]['text':' Test smart resetting of binsearch indices','line_number':1926,'multiline':False]['text':' Test all type specific binary search functions','line_number':1934,'multiline':False]['text':' (reason="ndarray ctor")','line_number':1948,'multiline':False]['text':' Test all type specific binary search functions','line_number':1950,'multiline':False]['text':' Test empty array, use a fresh array to get warnings in','line_number':1960,'multiline':False]['text':' valgrind if access happens.','line_number':1961,'multiline':False]['text':' bounds check : XXX torch does not raise','line_number':1979,'multiline':False]['text':' assert_raises(ValueError, np.searchsorted, a, 4, sorter=[0, 1, 2, 3, 5])','line_number':1980,'multiline':False]['text':' assert_raises(ValueError, np.searchsorted, a, 0, sorter=[-1, 0, 1, 2, 3])','line_number':1981,'multiline':False]['text':' assert_raises(ValueError, np.searchsorted, a, 0, sorter=[4, 0, -1, 2, 3])','line_number':1982,'multiline':False]['text':' (reason="self.storage_offset() must be divisible by 8")','line_number':1984,'multiline':False]['text':' Test searching unaligned array','line_number':2000,'multiline':False]['text':' Test searching unaligned array','line_number':2007,'multiline':False]['text':' Test searching for unaligned keys','line_number':2013,'multiline':False]['text':' Test all type specific indirect binary search functions','line_number':2020,'multiline':False]['text':' We want the sorter array to be of a type that is different','line_number':2025,'multiline':False]['text':' from np.intp in all platforms, to check for #4698','line_number':2026,'multiline':False]['text':' We want the sorter array to be of a type that is different','line_number':2031,'multiline':False]['text':' from np.intp in all platforms, to check for #4698','line_number':2032,'multiline':False]['text':' Test empty array, use a fresh array to get warnings in','line_number':2039,'multiline':False]['text':' valgrind if access happens.','line_number':2040,'multiline':False]['text':' Test non-contiguous sorter array','line_number':2047,'multiline':False]['text':' (reason="TODO argpartition")','line_number':2059,'multiline':False]['text':' Test out of range values in kth raise an error, gh-5469','line_number':2062,'multiline':False]['text':' (reason="TODO partition")','line_number':2067,'multiline':False]['text':' Test out of range values in kth raise an error, gh-5469','line_number':2070,'multiline':False]['text':' (reason="TODO argpartition")','line_number':2075,'multiline':False]['text':' Test non-integer values in kth raise an error/','line_number':2077,'multiline':False]['text':' Test also for generic type argpartition, which uses sorting','line_number':2080,'multiline':False]['text':' and used to not bound check kth','line_number':2081,'multiline':False]['text':' (reason="TODO partition")','line_number':2085,'multiline':False]['text':' Test out of range values in kth raise an error, gh-5469','line_number':2087,'multiline':False]['text':' Test also for generic type partition, which uses sorting','line_number':2090,'multiline':False]['text':' and used to not bound check kth','line_number':2091,'multiline':False]['text':' (reason="TODO partition")','line_number':2095,'multiline':False]['text':' check axis handling for multidimensional empty arrays','line_number':2098,'multiline':False]['text':' (reason="TODO argpartition")','line_number':2108,'multiline':False]['text':' check axis handling for multidimensional empty arrays','line_number':2111,'multiline':False]['text':' (reason="TODO partition")','line_number':2127,'multiline':False]['text':' kth not modified','line_number':2145,'multiline':False]['text':' sorted','line_number':2200,'multiline':False]['text':' rsorted','line_number':2211,'multiline':False]['text':' median of 3 killer, O(n^2) on pure median 3 pivot quickselect','line_number':2230,'multiline':False]['text':' exercises the median of median of 5 code used to keep O(n)','line_number':2231,'multiline':False]['text':' max','line_number':2241,'multiline':False]['text':' equal elements','line_number':2252,'multiline':False]['text':' all before are smaller','line_number':2323,'multiline':False]['text':' all after are larger','line_number':2325,'multiline':False]['text':' array_less does not seem to work right','line_number':2331,'multiline':False]['text':' array_less does not seem to work right','line_number':2350,'multiline':False]['text':' check inplace','line_number':2367,'multiline':False]['text':' (reason="TODO partition")','line_number':2388,'multiline':False]['text':' test unsorted kth','line_number':2415,'multiline':False]['text':' equal kth','line_number':2428,'multiline':False]['text':' (reason="TODO partition")','line_number':2455,'multiline':False]['text':' a few rounds of random data testing','line_number':2457,'multiline':False]['text':' (reason="TODO partition")','line_number':2472,'multiline':False]['text':'  A test for functionality of argpartition on lists.','line_number':2475,'multiline':False]['text':' (reason="TODO order='F'")','line_number':2481,'multiline':False]['text':' gemm vs syrk optimizations','line_number':2521,'multiline':False]['text':' syrk validations','line_number':2532,'multiline':False]['text':' syrk - different shape','line_number':2540,'multiline':False]['text':' syrk - different shape, stride, and view validations','line_number':2560,'multiline':False]['text':' check vector arg for contiguous before gemv','line_number':2575,'multiline':False]['text':' gh-12156','line_number':2576,'multiline':False]['text':' check for unaligned data','line_number':2591,'multiline':False]['text':' make sure it is not aligned','line_number':2596,'multiline':False]['text':' function versus methods','line_number':2610,'multiline':False]['text':' test passing in an output array','line_number':2614,'multiline':False]['text':' test keyword args','line_number':2619,'multiline':False]['text':' (reason="_aligned_zeros")','line_number':2624,'multiline':False]['text':' Test BLAS and non-BLAS code paths, including all dtypes','line_number':2628,'multiline':False]['text':' that dot() supports','line_number':2629,'multiline':False]['text':' Valid dot() output arrays must be aligned','line_number':2634,'multiline':False]['text':' Check invalid output array','line_number':2642,'multiline':False]['text':' (reason="TODO: overlapping memor in matmul")','line_number':2646,'multiline':False]['text':' overlapping memory','line_number':2648,'multiline':False]['text':' Order of axis argument doesn't matter:','line_number':2679,'multiline':False]['text':' (reason="no readonly views")','line_number':2682,'multiline':False]['text':' Regression test for a bug that crept in at one point','line_number':2697,'multiline':False]['text':' Regression test for issue 9615','line_number':2707,'multiline':False]['text':' Exercises a special-case code path for dot products of length','line_number':2708,'multiline':False]['text':' zero in cblasfuncs (making it is specific to floating dtypes).','line_number':2709,'multiline':False]['text':' test 1-d','line_number':2744,'multiline':False]['text':' test 2-d','line_number':2749,'multiline':False]['text':' test 1-d','line_number':2757,'multiline':False]['text':' test 2-d','line_number':2762,'multiline':False]['text':' when calling np.put, make sure a','line_number':2767,'multiline':False]['text':' TypeError is raised if the object','line_number':2768,'multiline':False]['text':' isn't an ndarray','line_number':2769,'multiline':False]['text':' (reason="TODO: implement order='F'")','line_number':2773,'multiline':False]['text':' 'K' doesn't reverse the axes of negative strides','line_number':2801,'multiline':False]['text':' Test simple 1-d copy behaviour:','line_number':2805,'multiline':False]['text':' Not contiguous and 1-sized axis with non matching stride','line_number':2811,'multiline':False]['text':' contiguous and 1-sized axis with non matching stride works:','line_number':2820,'multiline':False]['text':' Test negative strides (not very interesting since non-contiguous):','line_number':2829,'multiline':False]['text':' 1-element tidy strides test:','line_number':2836,'multiline':False]['text':' If the following stride is not 8, NPY_RELAXED_STRIDES_DEBUG is','line_number':2839,'multiline':False]['text':' messing them up on purpose:','line_number':2840,'multiline':False]['text':' 0-d corner case:','line_number':2846,'multiline':False]['text':' Test that certain non-inplace ravels work right (mostly) for 'K':','line_number':2851,'multiline':False]['text':' flags["OWNDATA"]','line_number':2865,'multiline':False]['text':' check exceptions','line_number':2871,'multiline':False]['text':' check shape','line_number':2881,'multiline':False]['text':' check array contents','line_number':2886,'multiline':False]['text':' check a view is always returned, gh-5260','line_number':2894,'multiline':False]['text':' check on non-contiguous input array','line_number':2896,'multiline':False]['text':' Minimal test for the out argument being passed on correctly','line_number':2928,'multiline':False]['text':' NOTE: The ability to pass `out` is currently undocumented!','line_number':2929,'multiline':False]['text':' test refcount 1 inplace conversion','line_number':2991,'multiline':False]['text':' true divide','line_number':3010,'multiline':False]['text':' contiguous arrays','line_number':3121,'multiline':False]['text':' non-contiguous arrays','line_number':3149,'multiline':False]['text':' one dimension lesser for non-zero sized','line_number':3169,'multiline':False]['text':' array should raise an error','line_number':3170,'multiline':False]['text':' (reason="TODO: implement choose")','line_number':3184,'multiline':False]['text':' see also gh-616','line_number':3199,'multiline':False]['text':' Check some simple shape mismatches','line_number':3202,'multiline':False]['text':' these could be relaxed possibly (used to allow even the previous)','line_number':3209,'multiline':False]['text':' make sure both ndarray.argmax/argmin and','line_number':3230,'multiline':False]['text':' numpy.argmax/argmin support out/axis args','line_number':3231,'multiline':False]['text':' check positional args','line_number':3235,'multiline':False]['text':' check keyword args','line_number':3241,'multiline':False]['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':3281,'multiline':False]['text':' on variant SIMD widthes','line_number':3282,'multiline':False]['text':' RuntimeError: "max_values_cpu" not implemented for 'ComplexDouble'','line_number':3294,'multiline':False]['text':'      ([0, 1, 2, 3, complex(0, np.nan)], 4),','line_number':3295,'multiline':False]['text':'      ([0, 1, 2, 3, complex(np.nan, 0)], 4),','line_number':3296,'multiline':False]['text':'      ([0, 1, 2, complex(np.nan, 0), 3], 3),','line_number':3297,'multiline':False]['text':'      ([0, 1, 2, complex(0, np.nan), 3], 3),','line_number':3298,'multiline':False]['text':'      ([complex(0, np.nan), 0, 1, 2, 3], 0),','line_number':3299,'multiline':False]['text':'      ([complex(np.nan, np.nan), 0, 1, 2, 3], 0),','line_number':3300,'multiline':False]['text':'      ([complex(np.nan, 0), complex(np.nan, 2), complex(np.nan, 1)], 0),','line_number':3301,'multiline':False]['text':'      ([complex(np.nan, np.nan), complex(np.nan, 2), complex(np.nan, 1)], 0),','line_number':3302,'multiline':False]['text':'      ([complex(np.nan, 0), complex(np.nan, 2), complex(np.nan, np.nan)], 0),','line_number':3303,'multiline':False]['text':'      ([complex(0, 0), complex(0, 2), complex(0, 1)], 1),','line_number':3304,'multiline':False]['text':'      ([complex(1, 0), complex(0, 2), complex(0, 1)], 0),','line_number':3305,'multiline':False]['text':'      ([complex(1, 0), complex(0, 2), complex(1, 1)], 2),','line_number':3306,'multiline':False]['text':' add padding to test SIMD loops','line_number':3323,'multiline':False]['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':3390,'multiline':False]['text':' on variant SIMD widthes','line_number':3391,'multiline':False]['text':' RuntimeError: "min_values_cpu" not implemented for 'ComplexDouble'','line_number':3403,'multiline':False]['text':'    ([0, 1, 2, 3, complex(0, np.nan)], 4),','line_number':3404,'multiline':False]['text':'    ([0, 1, 2, 3, complex(np.nan, 0)], 4),','line_number':3405,'multiline':False]['text':'    ([0, 1, 2, complex(np.nan, 0), 3], 3),','line_number':3406,'multiline':False]['text':'    ([0, 1, 2, complex(0, np.nan), 3], 3),','line_number':3407,'multiline':False]['text':'    ([complex(0, np.nan), 0, 1, 2, 3], 0),','line_number':3408,'multiline':False]['text':'    ([complex(np.nan, np.nan), 0, 1, 2, 3], 0),','line_number':3409,'multiline':False]['text':'    ([complex(np.nan, 0), complex(np.nan, 2), complex(np.nan, 1)], 0),','line_number':3410,'multiline':False]['text':'    ([complex(np.nan, np.nan), complex(np.nan, 2), complex(np.nan, 1)], 0),','line_number':3411,'multiline':False]['text':'    ([complex(np.nan, 0), complex(np.nan, 2), complex(np.nan, np.nan)], 0),','line_number':3412,'multiline':False]['text':'    ([complex(0, 0), complex(0, 2), complex(0, 1)], 0),','line_number':3413,'multiline':False]['text':'    ([complex(1, 0), complex(0, 2), complex(0, 1)], 2),','line_number':3414,'multiline':False]['text':'    ([complex(1, 0), complex(0, 2), complex(1, 1)], 1),','line_number':3415,'multiline':False]['text':' add padding to test SIMD loops','line_number':3432,'multiline':False]['text':' The tests that call us pass clip_min and clip_max that','line_number':3520,'multiline':False]['text':' might not fit in the destination dtype. They were written','line_number':3521,'multiline':False]['text':' assuming the previous unsafe casting, which now must be','line_number':3522,'multiline':False]['text':' passed explicitly to avoid a warning.','line_number':3523,'multiline':False]['text':' (reason="TODO")','line_number':3563,'multiline':False]['text':' (reason="TODO")','line_number':3587,'multiline':False]['text':' Also test string of a length which uses an untypical length','line_number':3608,'multiline':False]['text':' Note mixed byteorder.','line_number':3622,'multiline':False]['text':' gh-6272 check overlap','line_number':3637,'multiline':False]['text':' (reason="XXX: take(..., mode='clip')")','line_number':3690,'multiline':False]['text':' (reason="XXX: take(..., mode='wrap')")','line_number':3697,'multiline':False]['text':' (reason="XXX: take(mode='wrap')")','line_number':3705,'multiline':False]['text':' gh-6272 check overlap on out','line_number':3707,'multiline':False]['text':' 0d arrays should not be an exception to this rule','line_number':3714,'multiline':False]['text':' (reason="TODO")','line_number':3722,'multiline':False]['text':' gh-6312','line_number':3767,'multiline':False]['text':' gh-7528','line_number':3783,'multiline':False]['text':' This fixture covers two cases:','line_number':3802,'multiline':False]['text':' one where the filename is a string and','line_number':3803,'multiline':False]['text':' another where it is a pathlib object','line_number':3804,'multiline':False]['text':' this should probably be supported as a file','line_number':3811,'multiline':False]['text':' but for now test for proper errors','line_number':3812,'multiline':False]['text':' NB. doesn't work with flush+seek, due to use of C stdio','line_number':3854,'multiline':False]['text':' NB. str imbues less precision','line_number':3883,'multiline':False]['text':' gh-6246','line_number':3895,'multiline':False]['text':' gh-6632','line_number':3907,'multiline':False]['text':' check the fallocate path on files > 16MB','line_number':3914,'multiline':False]['text':' check offset','line_number':3919,'multiline':False]['text':' check append mode (gh-8329)','line_number':3924,'multiline':False]['text':' delete file contents','line_number':3925,'multiline':False]['text':' gh-6632','line_number':3934,'multiline':False]['text':' gh-4118','line_number':3941,'multiline':False]['text':' gh-4118','line_number':3963,'multiline':False]['text':' seek between read&write required by ANSI C','line_number':3984,'multiline':False]['text':' gh-12300','line_number':3990,'multiline':False]['text':' Ensure we have a file with consistent contents','line_number':3992,'multiline':False]['text':' subsequent seeks should stack','line_number':4027,'multiline':False]['text':' takes > 1 minute on mechanical hard drive','line_number':4136,'multiline':False]['text':' before workarounds, only up to 2**32-1 worked','line_number':4146,'multiline':False]['text':' check only start and end for speed:','line_number':4157,'multiline':False]['text':' can't use _check_from because fromstring can't handle True/False','line_number':4203,'multiline':False]['text':' assert_equal(s, '1.51,2.0,3.51,4.0')','line_number':4218,'multiline':False]['text':' Dup-ed file handle should be closed or remove will fail on Windows OS','line_number':4234,'multiline':False]['text':' Also make sure that we close the Python handle','line_number':4237,'multiline':False]['text':' Test subarray dtypes which are absorbed into the shape','line_number':4242,'multiline':False]['text':' binary fromstring is deprecated','line_number':4250,'multiline':False]['text':' We currently do not support parsing subarray dtypes','line_number':4255,'multiline':False]['text':' Test that requesting more values does not cause any problems','line_number':4267,'multiline':False]['text':' in conjunction with subarray dimensions being absorbed into the','line_number':4268,'multiline':False]['text':' array dimension.','line_number':4269,'multiline':False]['text':' (reason="TODO")','line_number':4282,'multiline':False]['text':'    @xpassIfTorchDynamo','line_number':4295,'multiline':False]['text':' Objects (including NumPy arrays), which do not use the','line_number':4300,'multiline':False]['text':' `release_buffer` slot should be directly used as a base object.','line_number':4301,'multiline':False]['text':' See also gh-21612','line_number':4302,'multiline':False]['text':' @parametrize breaks with bytes objects','line_number':4304,'multiline':False]['text':' The old buffer protocol was not safe for some things that the new','line_number':4319,'multiline':False]['text':' one is.  But `frombuffer` always used the old one for a long time.','line_number':4320,'multiline':False]['text':' Checks that it is safe with the new one (using memoryviews)','line_number':4321,'multiline':False]['text':' cannot close while array uses the buffer','line_number':4328,'multiline':False]['text':' (reason="TODO")   # FIXME: skip -> xfail (a0.shape = (4, 5) raises)','line_number':4333,'multiline':False]['text':' includes regression test for reference count error gh-13165','line_number':4380,'multiline':False]['text':' Check the value of `.index` is updated correctly (see also gh-19153)','line_number':4401,'multiline':False]['text':' If the type was incorrect, this would show up on big-endian machines','line_number':4402,'multiline':False]['text':' avoid pyflakes unused variable warning.','line_number':4424,'multiline':False]['text':' to it multiple times to test it does not break alloc cache gh-9216','line_number':4443,'multiline':False]['text':' check that sizes containing a zero don't trigger a reallocate for','line_number':4480,'multiline':False]['text':' already empty arrays','line_number':4481,'multiline':False]['text':' avoid pyflakes unused variable warning.','line_number':4492,'multiline':False]['text':' integer types','line_number':4550,'multiline':False]['text':' scalar case','line_number':4557,'multiline':False]['text':' mean for float types','line_number':4561,'multiline':False]['text':' scalar case','line_number':4568,'multiline':False]['text':' var, std for float types','line_number':4572,'multiline':False]['text':' deal with complex types','line_number':4576,'multiline':False]['text':' scalar case','line_number':4580,'multiline':False]['text':' stats for integer types','line_number':4587,'multiline':False]['text':' FIXME:','line_number':4588,'multiline':False]['text':' this needs definition as there are lots places along the line','line_number':4589,'multiline':False]['text':' where type casting may take place.','line_number':4590,'multiline':False]['text':' for f in self.funcs:','line_number':4592,'multiline':False]['text':'    for c in np.typecodes['AllInteger']:','line_number':4593,'multiline':False]['text':'        tgt = np.dtype(c).type','line_number':4594,'multiline':False]['text':'        res = f(mat, axis=1, dtype=c).dtype.type','line_number':4595,'multiline':False]['text':'        assert_(res is tgt)','line_number':4596,'multiline':False]['text':'        # scalar case','line_number':4597,'multiline':False]['text':'        res = f(mat, axis=None, dtype=c).dtype.type','line_number':4598,'multiline':False]['text':'        assert_(res is tgt)','line_number':4599,'multiline':False]['text':' stats for float types','line_number':4601,'multiline':False]['text':' scalar case','line_number':4607,'multiline':False]['text':'         with warnings.catch_warnings(record=True) as w:','line_number':4629,'multiline':False]['text':'             warnings.simplefilter('always')','line_number':4630,'multiline':False]['text':'            assert_(len(w) > 0)','line_number':4633,'multiline':False]['text':'            assert_(issubclass(w[0].category, RuntimeWarning))','line_number':4634,'multiline':False]['text':'      with warnings.catch_warnings(record=True) as w:','line_number':4640,'multiline':False]['text':'          warnings.simplefilter('always')','line_number':4641,'multiline':False]['text':'          assert_(len(w) > 0)','line_number':4643,'multiline':False]['text':'          assert_(issubclass(w[0].category, RuntimeWarning))','line_number':4644,'multiline':False]['text':'      with warnings.catch_warnings(record=True) as w:','line_number':4646,'multiline':False]['text':'          warnings.simplefilter('always')','line_number':4647,'multiline':False]['text':' This fail if the sum inside mean is done in float16 instead','line_number':4662,'multiline':False]['text':' of float32.','line_number':4663,'multiline':False]['text':' Ensure that AxisError is raised instead of IndexError when axis is','line_number':4667,'multiline':False]['text':' out of bounds, see gh-15817.','line_number':4668,'multiline':False]['text':' (reason="implement mean(..., where=...)")','line_number':4672,'multiline':False]['text':' Test fast-paths for every builtin complex type','line_number':4726,'multiline':False]['text':' _var paths for complex number introduce additions on views that','line_number':4736,'multiline':False]['text':' increase dimensions. Ensure this generalizes to higher dims','line_number':4737,'multiline':False]['text':' Test that var fast-path does not cause failures for complex arrays','line_number':4748,'multiline':False]['text':' with non-native byteorder','line_number':4749,'multiline':False]['text':' Ensure that AxisError is raised instead of IndexError when axis is','line_number':4755,'multiline':False]['text':' out of bounds, see gh-15817.','line_number':4756,'multiline':False]['text':' (reason="implement var(..., where=...)")','line_number':4760,'multiline':False]['text':' (reason="implement std(..., where=...)")','line_number':4805,'multiline':False]['text':' test real','line_number':4853,'multiline':False]['text':' test complex','line_number':4861,'multiline':False]['text':' test boolean','line_number':4869,'multiline':False]['text':' (reason="implement order='F'")','line_number':4875,'multiline':False]['text':' integer arrays are exact','line_number':4881,'multiline':False]['text':' Different sizes match different branches in vdot.','line_number':4888,'multiline':False]['text':' Make a and b uncontiguous:','line_number':4893,'multiline':False]['text':' (reason="implement order='F'")','line_number':4901,'multiline':False]['text':' test order='F' separately','line_number':4903,'multiline':False]['text':' Different sizes match different branches in vdot.','line_number':4905,'multiline':False]['text':' Make a and b uncontiguous:','line_number':4910,'multiline':False]['text':' Numpy and pytorch random streams differ, so inline the','line_number':4923,'multiline':False]['text':' values from numpy 1.24.1','line_number':4924,'multiline':False]['text':' self.A = np.random.rand(4, 2)','line_number':4925,'multiline':False]['text':' self.b1 = np.random.rand(2, 1)','line_number':4935,'multiline':False]['text':' self.b2 = np.random.rand(2)','line_number':4938,'multiline':False]['text':' self.b3 = np.random.rand(1, 2)','line_number':4941,'multiline':False]['text':' self.b4 = np.random.rand(4)','line_number':4944,'multiline':False]['text':' Numpy guarantees the random stream, and we don't. So inline the','line_number':5013,'multiline':False]['text':' values from numpy 1.24.1','line_number':5014,'multiline':False]['text':' b1 = np.random.rand(1, 1)','line_number':5015,'multiline':False]['text':' b2 = np.random.rand(1, 4)','line_number':5018,'multiline':False]['text':' b1 = np.random.rand(4, 1)','line_number':5027,'multiline':False]['text':' b2 = np.random.rand(1, 1)','line_number':5030,'multiline':False]['text':' v.shape == (16,)','line_number':5076,'multiline':False]['text':' r.shape == (1024,)','line_number':5077,'multiline':False]['text':' (reason="TODO order='F'")','line_number':5113,'multiline':False]['text':' integer arrays are exact','line_number':5119,'multiline':False]['text':' this will always segfault if the bug is present','line_number':5147,'multiline':False]['text':' Calculation in double precision','line_number':5151,'multiline':False]['text':' Calculation with aligned single precision','line_number':5155,'multiline':False]['text':' Strided A rows','line_number':5159,'multiline':False]['text':' Strided A columns, strided X vector','line_number':5164,'multiline':False]['text':' Check the strides are as expected','line_number':5171,'multiline':False]['text':' Strides in A rows + cols only','line_number':5177,'multiline':False]['text':' Strides just in A cols','line_number':5180,'multiline':False]['text':' Strides in A cols and X','line_number':5185,'multiline':False]['text':' complex case needs 18GiB+','line_number':5190,'multiline':False]['text':' Large vector multiplications are chunked with 32bit BLAS','line_number':5192,'multiline':False]['text':' Test that the chunking does the right thing, see also gh-22262','line_number':5193,'multiline':False]['text':' Should work with these types. Will want to add','line_number':5202,'multiline':False]['text':' "O" at some point','line_number':5203,'multiline':False]['text':' mismatched vector vector','line_number':5208,'multiline':False]['text':' mismatched matrix vector','line_number':5215,'multiline':False]['text':' mismatched vector matrix','line_number':5216,'multiline':False]['text':' mismatched matrix matrix','line_number':5217,'multiline':False]['text':' vector scalar','line_number':5218,'multiline':False]['text':' scalar vector','line_number':5219,'multiline':False]['text':' matrix scalar','line_number':5220,'multiline':False]['text':' scalar matrix','line_number':5221,'multiline':False]['text':' cannot broadcast','line_number':5222,'multiline':False]['text':' broadcast first argument','line_number':5232,'multiline':False]['text':' broadcast second argument','line_number':5233,'multiline':False]['text':' matrix stack sizes match','line_number':5234,'multiline':False]['text':' vector vector returns scalars.','line_number':5243,'multiline':False]['text':' (reason="no scalars")','line_number':5260,'multiline':False]['text':' in numpy, vector vector returns scalars','line_number':5262,'multiline':False]['text':' we return a 0D array instead','line_number':5263,'multiline':False]['text':' boolean type','line_number':5283,'multiline':False]['text':' no broadcast, we must make v1 into a 2d ndarray','line_number':5298,'multiline':False]['text':' boolean type','line_number':5302,'multiline':False]['text':' boolean type','line_number':5322,'multiline':False]['text':' boolean type','line_number':5349,'multiline':False]['text':' matrix @ matrix','line_number':5378,'multiline':False]['text':' stacked @ matrix','line_number':5384,'multiline':False]['text':' matrix @ stacked','line_number':5388,'multiline':False]['text':' stacked @ stacked','line_number':5392,'multiline':False]['text':' boolean type','line_number':5396,'multiline':False]['text':' matrix @ matrix','line_number':5408,'multiline':False]['text':' stacked @ matrix','line_number':5414,'multiline':False]['text':' matrix @ stacked','line_number':5418,'multiline':False]['text':' stacked @ stacked','line_number':5422,'multiline':False]['text':' test as positional argument','line_number':5437,'multiline':False]['text':' test as keyword argument','line_number':5443,'multiline':False]['text':' test out with not allowed type cast (safe casting)','line_number':5449,'multiline':False]['text':' test out with type upcast to complex','line_number':5454,'multiline':False]['text':'      with suppress_warnings() as sup:','line_number':5458,'multiline':False]['text':'          sup.filter(np.ComplexWarning, '')','line_number':5459,'multiline':False]['text':' Check that the output cannot be broadcast, so that it cannot be','line_number':5464,'multiline':False]['text':' size zero when the outer dimensions (iterator size) has size zero.','line_number':5465,'multiline':False]['text':' test out non-contiguous','line_number':5480,'multiline':False]['text':' test out contiguous in only last dim','line_number':5489,'multiline':False]['text':' test transposes of out, args','line_number':5494,'multiline':False]['text':' test out non-contiguous','line_number':5504,'multiline':False]['text':' non-contiguous','line_number':5511,'multiline':False]['text':' matrix-matrix','line_number':5519,'multiline':False]['text':' matrix-matrix-transpose, contiguous and non','line_number':5524,'multiline':False]['text':' matrix-matrix non-contiguous','line_number':5531,'multiline':False]['text':' vector-matrix, matrix-vector, contiguous','line_number':5535,'multiline':False]['text':' vector-matrix, matrix-vector, vector non-contiguous','line_number':5540,'multiline':False]['text':' vector-matrix, matrix-vector, matrix non-contiguous','line_number':5545,'multiline':False]['text':' vector-matrix, matrix-vector, both non-contiguous','line_number':5550,'multiline':False]['text':' size == 0','line_number':5555,'multiline':False]['text':' test that matmul fails if `__mul__` is missing','line_number':5572,'multiline':False]['text':' test that matmul fails if `__add__` is missing','line_number':5583,'multiline':False]['text':' gh-14439','line_number':5593,'multiline':False]['text':' matmul with boolean output should always be 0, 1','line_number':5597,'multiline':False]['text':' rg = np.random.default_rng(np.random.PCG64(43))','line_number':5600,'multiline':False]['text':' d = rg.integers(2, size=4*5, dtype=np.int8)','line_number':5601,'multiline':False]['text':' d = d.reshape(4, 5) > 0','line_number':5602,'multiline':False]['text':' (reason="torch supports inplace matmul, and so do we")','line_number':5640,'multiline':False]['text':' It would be nice to support in-place matmul eventually, but for now','line_number':5642,'multiline':False]['text':' we don't have a working implementation, so better just to error out','line_number':5643,'multiline':False]['text':' and nudge people to writing "a = a @ b".','line_number':5644,'multiline':False]['text':' XXX: what's up with exec under Dynamo','line_number':5649,'multiline':False]['text':' (reason="matmul_axes")','line_number':5657,'multiline':False]['text':' Ticket 844.','line_number':5680,'multiline':False]['text':' Inner product of a vector with itself segfaults or give','line_number':5681,'multiline':False]['text':' meaningless result','line_number':5682,'multiline':False]['text':' github issue 6532','line_number':5688,'multiline':False]['text':' check an inner product involving a matrix transpose','line_number':5690,'multiline':False]['text':' check a matrix product','line_number':5699,'multiline':False]['text':' check the syrk vs. gemm paths','line_number':5702,'multiline':False]['text':' check an inner product involving an aliased and reversed view','line_number':5710,'multiline':False]['text':' XXX: revisit xfails when NEP 50 lands in numpy','line_number':5759,'multiline':False]['text':' examples from the docstring,','line_number':5775,'multiline':False]['text':' https://numpy.org/doc/1.23/reference/generated/numpy.choose.html','line_number':5776,'multiline':False]['text':' result is 2x3x5, res[0,:,:]=c1, res[1,:,:]=c2','line_number':5792,'multiline':False]['text':' TODO: test for multidimensional','line_number':5830,'multiline':False]['text':' (reason="TODO")','line_number':5834,'multiline':False]['text':' three tests below are added based on what numpy does','line_number':5852,'multiline':False]['text':' Native padding should work also for structs and sub-arrays','line_number':5889,'multiline':False]['text':' Trailing padding should be included, *and*, the item size','line_number':5894,'multiline':False]['text':' should match the alignment if in aligned mode','line_number':5895,'multiline':False]['text':' The byte order after @T{=i} should be '=', not '@'.','line_number':5941,'multiline':False]['text':' Check this by noting the absence of native alignment.','line_number':5942,'multiline':False]['text':' Natively aligned sub-arrays may require some internal padding','line_number':5946,'multiline':False]['text':' gh-9053 - previously, we relied on dictionary key order','line_number':5971,'multiline':False]['text':' true_vals = [True, np._CopyMode.ALWAYS, np.True_]','line_number':5991,'multiline':False]['text':' false_vals = [False, np._CopyMode.IF_NEEDED, np.False_]','line_number':5992,'multiline':False]['text':' Test both numpy and python scalars','line_number':5997,'multiline':False]['text':' Test never-copy raises error:','line_number':6003,'multiline':False]['text':' Casting with a dtype (to unsigned integers) can be special:','line_number':6007,'multiline':False]['text':' Some types are compatible even though they are different, no','line_number':6012,'multiline':False]['text':' copy is necessary for them. This is mostly true for some integers','line_number':6013,'multiline':False]['text':' Casting is not necessary, base check is sufficient here','line_number':6031,'multiline':False]['text':' Casting is necessary, assert copy works:','line_number':6040,'multiline':False]['text':' Buffer interface gives direct memory access (no copy)','line_number':6052,'multiline':False]['text':' Checking bases is a bit tricky since numpy creates another','line_number':6056,'multiline':False]['text':' memoryview, so use may_share_memory.','line_number':6057,'multiline':False]['text':' Array interface gives direct memory access (much like a memoryview)','line_number':6068,'multiline':False]['text':' __array__ should return a copy, numpy cannot know this','line_number':6091,'multiline':False]['text':' however.','line_number':6092,'multiline':False]['text':' An additional copy is currently forced by numpy in this case,','line_number':6100,'multiline':False]['text':' you could argue, numpy does not trust the ArrayLike. This','line_number':6101,'multiline':False]['text':' may be open for change:','line_number':6102,'multiline':False]['text':' numpy trusts the ArrayLike','line_number':6108,'multiline':False]['text':' The order is the main (python side) reason that can cause','line_number':6117,'multiline':False]['text':' a never-copy to fail.','line_number':6118,'multiline':False]['text':' Prepare C-order, F-order and non-contiguous arrays:','line_number':6119,'multiline':False]['text':' Make array non-contiguous','line_number':6126,'multiline':False]['text':' Whether a copy is necessary depends on the order of arr:','line_number':6130,'multiline':False]['text':' Keeporder and Anyorder are OK with non-contiguous output.','line_number':6136,'multiline':False]['text':' This is not consistent with the `astype` behaviour which','line_number':6137,'multiline':False]['text':' enforces contiguity for "A". It is probably historic from when','line_number':6138,'multiline':False]['text':' "K" did not exist.','line_number':6139,'multiline':False]['text':' Test it for both the array and a memoryview','line_number':6142,'multiline':False]['text':' res.base.obj refers to the memoryview','line_number':6152,'multiline':False]['text':' ticket #2046, should not seqfault, raise AttributeError','line_number':6192,'multiline':False]['text':' not supported, too brittle, too annoying','line_number':6244,'multiline':False]['text':' Test scalar coercion within the array interface','line_number':6277,'multiline':False]['text':' (reason="TODO")','line_number':6295,'multiline':False]['text':' All integer','line_number':6309,'multiline':False]['text':' Unsigned integers','line_number':6324,'multiline':False]['text':' Unsigned vs signed','line_number':6330,'multiline':False]['text':' Signed integers and floats','line_number':6345,'multiline':False]['text':' previously stack overflow','line_number':6386,'multiline':False]['text':' resolve circular reference','line_number':6387,'multiline':False]['text':' gh-9972 means that these aren't always the same','line_number':6390,'multiline':False]['text':' gh-9972','line_number':6402,'multiline':False]['text':' The delegation of int() to __trunc__ was deprecated in','line_number':6407,'multiline':False]['text':' Python 3.11.','line_number':6408,'multiline':False]['text':'  assert_equal(np.where(c[::-2], d[::-2], e[::-2]), r[::-2])','line_number':6450,'multiline':False]['text':'  assert_equal(np.where(c[::-3], d[::-3], e[::-3]), r[::-3])','line_number':6451,'multiline':False]['text':'  assert_equal(np.where(c[1::-3], d[1::-3], e[1::-3]), r[1::-3])','line_number':6452,'multiline':False]['text':' zero sized','line_number':6455,'multiline':False]['text':' object cast','line_number':6462,'multiline':False]['text':' minimal dtype result with NaN scalar (e.g required by pandas)','line_number':6527,'multiline':False]['text':' also check upcast','line_number':6535,'multiline':False]['text':' non bool mask','line_number':6585,'multiline':False]['text':' invert','line_number':6589,'multiline':False]['text':' pass empty where result through an assignment which reads the data of','line_number':6641,'multiline':False]['text':' empty arrays, error detectable with valgrind, see gh-8922','line_number':6642,'multiline':False]['text':' invalid read regression gh-9304','line_number':6648,'multiline':False]['text':' (reason="TODO")','line_number':6675,'multiline':False]['text':' until gh-5543, ensure that the behaviour matches what it used to be','line_number':6686,'multiline':False]['text':' all these tests use the WRITEBACKIFCOPY mechanism','line_number':6695,'multiline':False]['text':' (reason="XXX: place()")','line_number':6708,'multiline':False]['text':' force non-c-contiguous','line_number':6710,'multiline':False]['text':' uses arr_insert','line_number':6711,'multiline':False]['text':' hit one of the failing paths','line_number':6714,'multiline':False]['text':' force non-c-contiguous','line_number':6718,'multiline':False]['text':' sanity check','line_number':6719,'multiline':False]['text':' (reason="XXX: putmask()")','line_number':6723,'multiline':False]['text':' force non-c-contiguous','line_number':6725,'multiline':False]['text':' uses arr_putmask','line_number':6726,'multiline':False]['text':' (reason="XXX: ndarray.flat")','line_number':6743,'multiline':False]['text':' triggers the WRITEBACKIFCOPY resolution, assuming refcount semantics','line_number':6748,'multiline':False]['text':' if HAVE_CBLAS, will use WRITEBACKIFCOPY','line_number':6752,'multiline':False]['text':' "unsupported range",','line_number':6762,'multiline':False]['text':' "cannot compute length",','line_number':6767,'multiline':False]['text':' empty range','line_number':6778,'multiline':False]['text':' (reason="weird arange signature (optionals before required args)")','line_number':6787,'multiline':False]['text':' Arange makes some sense for booleans and works up to length 2.','line_number':6803,'multiline':False]['text':' But it is weird since `arange(2, 4, dtype=bool)` works.','line_number':6804,'multiline':False]['text':' Arguably, much or all of this could be deprecated/removed.','line_number':6805,'multiline':False]['text':' This case is especially weird, but drops out without special case:','line_number':6815,'multiline':False]['text':' start, stop, and step','line_number':6824,'multiline':False]['text':' should ensure float64 output','line_number':6825,'multiline':False]['text':' repeat with non-empty ranges','line_number':6828,'multiline':False]['text':' XXX: brittle, fails or passes under dynamo depending on the NumPy version','line_number':6839,'multiline':False]['text':' These are currently guaranteed to be the boolean singletons, but maybe','line_number':6841,'multiline':False]['text':' returning NumPy booleans would also be OK:','line_number':6842,'multiline':False]['text':' (reason="implement views/dtypes")','line_number':6849,'multiline':False]['text':' x is non-contiguous','line_number':6856,'multiline':False]['text':' x is non-contiguous','line_number':6864,'multiline':False]['text':' Make sure the problem is because of the dtype size','line_number':6872,'multiline':False]['text':' x is non-contiguous in the first dimension, contiguous in the last','line_number':6877,'multiline':False]['text':' x is non-contiguous in the first dimension, contiguous in the last','line_number':6885,'multiline':False]['text':' Make sure the problem is because of the dtype size','line_number':6889,'multiline':False]['text':' x is F-contiguous','line_number':6900,'multiline':False]['text':' x is contiguous in axis=-1, but not C-contiguous in other axes','line_number':6906,'multiline':False]['text':' Test various array sizes that hit different code paths in quicksort-avx512','line_number':6918,'multiline':False]['text':' Regular data with nan sprinkled','line_number':6923,'multiline':False]['text':' (2) with +INF','line_number':6929,'multiline':False]['text':' (3) with -INF','line_number':6934,'multiline':False]['text':' (4) with +/-INF','line_number':6939,'multiline':False]['text':' Random data with NPY_MAX_INT32 and NPY_MIN_INT32 sprinkled','line_number':6945,'multiline':False]['text':' rng = np.random.default_rng(42)','line_number':6946,'multiline':False]