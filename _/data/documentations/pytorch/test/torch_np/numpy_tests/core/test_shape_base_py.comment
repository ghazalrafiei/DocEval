['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]['text':' If we are going to trace through these, we should use NumPy','line_number':21,'multiline':False]['text':' If testing on eager mode, we use torch._numpy','line_number':22,'multiline':False]['text':' numpy 1.24 emits warnings but we don't','line_number':199,'multiline':False]['text':' with assert_warns(FutureWarning):','line_number':200,'multiline':False]['text':' with assert_warns(FutureWarning):','line_number':202,'multiline':False]['text':' (reason="vstack w/generators")','line_number':255,'multiline':False]['text':' numpy raises TypeError on both out=... and dtype=...','line_number':279,'multiline':False]['text':' test axis must be in bounds','line_number':292,'multiline':False]['text':' OK','line_number':295,'multiline':False]['text':' Scalars cannot be concatenated','line_number':301,'multiline':False]['text':' dimensionality must match','line_number':305,'multiline':False]['text':'        assert_raises_regex(','line_number':308,'multiline':False]['text':'            ValueError,','line_number':309,'multiline':False]['text':'            r"all the input arrays must have same number of dimensions, but "','line_number':310,'multiline':False]['text':'            r"the array at index 0 has 1 dimension\(s\) and the array at "','line_number':311,'multiline':False]['text':'            r"index 1 has 2 dimension\(s\)",','line_number':312,'multiline':False]['text':' test shapes must match except for concatenation axis','line_number':317,'multiline':False]['text':' OK','line_number':322,'multiline':False]['text':'            assert_raises_regex(','line_number':323,'multiline':False]['text':'                "all the input array dimensions except for the concatenation axis "','line_number':326,'multiline':False]['text':'                "must match exactly, but along dimension {}, the array at "','line_number':327,'multiline':False]['text':'                "index 0 has size 1 and the array at index 1 has size 2"','line_number':328,'multiline':False]['text':'                .format(i),','line_number':329,'multiline':False]['text':' No arrays to concatenate raises ValueError','line_number':341,'multiline':False]['text':' (reason="concatenate(x, axis=None) relies on x being a sequence")','line_number':362,'multiline':False]['text':' When no axis is given, concatenate uses flattened versions.','line_number':364,'multiline':False]['text':' This also had a bug with many arrays (see gh-5979).','line_number':365,'multiline':False]['text':' This should probably be deprecated:','line_number':370,'multiline':False]['text':' axis is >= MAXDIMS','line_number':371,'multiline':False]['text':' Test concatenate function','line_number':375,'multiline':False]['text':' One sequence returns unmodified (but as array)','line_number':376,'multiline':False]['text':' XXX: a single argument; relies on an ndarray being a sequence','line_number':378,'multiline':False]['text':' assert_array_equal(concatenate((r4,)), r4)','line_number':380,'multiline':False]['text':' # Any sequence','line_number':381,'multiline':False]['text':' assert_array_equal(concatenate((tuple(r4),)), r4)','line_number':382,'multiline':False]['text':' assert_array_equal(concatenate((array(r4),)), r4)','line_number':383,'multiline':False]['text':' 1D default concatenation','line_number':384,'multiline':False]['text':' Mixed sequence types','line_number':387,'multiline':False]['text':' Explicit axis specification','line_number':390,'multiline':False]['text':' Including negative','line_number':392,'multiline':False]['text':' 2D','line_number':394,'multiline':False]['text':' Arrays much match shape','line_number':402,'multiline':False]['text':' 3D','line_number':404,'multiline':False]['text':' torch does not have ">f8", "S4"','line_number':445,'multiline':False]['text':' Compare usage of `out=out` with `dtype=out.dtype`','line_number':448,'multiline':False]['text':' non-iterable input','line_number':474,'multiline':False]['text':' 0d input','line_number':477,'multiline':False]['text':' 1d input examples','line_number':484,'multiline':False]['text':' all input types','line_number':490,'multiline':False]['text':' all shapes for 1d input','line_number':493,'multiline':False]['text':' all shapes for 2d input','line_number':503,'multiline':False]['text':' empty arrays','line_number':517,'multiline':False]['text':' out','line_number':521,'multiline':False]['text':' edge cases','line_number':526,'multiline':False]['text':' generator is deprecated: numpy 1.24 emits a warning but we don't','line_number':537,'multiline':False]['text':' with assert_warns(FutureWarning):','line_number':538,'multiline':False]['text':' casting and dtype test','line_number':543,'multiline':False]['text':' casting and dtype with TypeError','line_number':550,'multiline':False]['text':' torch does not have ">f8",','line_number':556,'multiline':False]['text':' (reason="TODO: implement block(...)")','line_number':577,'multiline':False]['text':' blocking small arrays and large arrays go through different paths.','line_number':582,'multiline':False]['text':' the algorithm is triggered depending on the number of element','line_number':583,'multiline':False]['text':' copies required.','line_number':584,'multiline':False]['text':' We define a test fixture that forces most tests to go through','line_number':585,'multiline':False]['text':' both code paths.','line_number':586,'multiline':False]['text':' Ultimately, this should be removed if a single algorithm is found','line_number':587,'multiline':False]['text':' to be faster for both small and large arrays.','line_number':588,'multiline':False]['text':' # # 1-D vectors are treated as row arrays','line_number':643,'multiline':False]['text':' # # 1-D vectors are treated as row arrays','line_number':658,'multiline':False]['text':' a bit more complicated','line_number':673,'multiline':False]['text':' missing brackets','line_number':811,'multiline':False]['text':' 3D','line_number':844,'multiline':False]['text':' 2D','line_number':857,'multiline':False]