['text':'!/usr/bin/env python3','line_number':1,'multiline':False]['text':' using tools/ to optimize test run.','line_number':41,'multiline':False]['text':' Make sure to remove REPO_ROOT after import is done','line_number':65,'multiline':False]['text':' Note [ROCm parallel CI testing]','line_number':75,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/85770 added file-granularity parallel testing.','line_number':76,'multiline':False]['text':' In .ci/pytorch/test.sh, TEST_CONFIG == "default", CUDA and HIP_VISIBLE_DEVICES is set to 0.','line_number':77,'multiline':False]['text':' This results in multiple test files sharing the same GPU.','line_number':78,'multiline':False]['text':' This should be a supported use case for ROCm, but it exposed issues in the kernel driver resulting in hangs.','line_number':79,'multiline':False]['text':' See https://github.com/pytorch/pytorch/issues/90940.','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' Further, ROCm self-hosted runners have up to 4 GPUs.','line_number':82,'multiline':False]['text':' Device visibility was set to 0 to match CUDA test behavior, but this was wasting available GPU resources.','line_number':83,'multiline':False]['text':' Assigning each Pool worker their own dedicated GPU avoids the ROCm oversubscription issues.','line_number':84,'multiline':False]['text':' This should also result in better overall wall clock time since all GPUs can be utilized.','line_number':85,'multiline':False]['text':' Special handling of ROCm GHA runners for parallel (file granularity) tests.','line_number':87,'multiline':False]['text':' this is a Process from a parallel Pool, not the MainProcess','line_number':91,'multiline':False]['text':' This supports symlinks, so we can link domain library tests to PyTorch test directory','line_number':135,'multiline':False]['text':' CPP test files are located under pytorch/build/bin. Unlike Python test, C++ tests','line_number':143,'multiline':False]['text':' are just binaries and could have any name, i.e. basic or atest','line_number':144,'multiline':False]['text':' Add the cpp prefix for C++ tests so that we can tell them apart','line_number':150,'multiline':False]['text':' Invert slashes on Windows','line_number':158,'multiline':False]['text':' executed by test_fx.py','line_number':175,'multiline':False]['text':' executed by test_jit.py','line_number':176,'multiline':False]['text':' executed by test_package.py','line_number':179,'multiline':False]['text':' executed by test_quantization.py','line_number':180,'multiline':False]['text':' executed by test_autograd.py','line_number':181,'multiline':False]['text':' These are not C++ tests','line_number':206,'multiline':False]['text':' The doctests are a special case that don't correspond to a file that discover','line_number':234,'multiline':False]['text':' tests can enable.','line_number':235,'multiline':False]['text':' The tests inside these files should never be run in parallel with each other','line_number':306,'multiline':False]['text':' temporarily sets a global config','line_number':321,'multiline':False]['text':' Test files that should always be run serially with other test files,','line_number':325,'multiline':False]['text':' but it's okay if the tests inside them are run in parallel with each other.','line_number':326,'multiline':False]['text':' torch.library creation and deletion must be serialized','line_number':342,'multiline':False]['text':' Cause CUDA illegal memory access https://github.com/pytorch/pytorch/issues/88916','line_number':343,'multiline':False]['text':' Doesn't respect set_per_process_memory_fraction, results in OOM for other tests in slow gradcheck','line_number':345,'multiline':False]['text':' slow gradcheck runs a test that checks the cuda memory allocator','line_number':347,'multiline':False]['text':' slow gradcheck runs a test that checks the cuda memory allocator','line_number':348,'multiline':False]['text':' failed test due to mismatched elements','line_number':349,'multiline':False]['text':' OOM','line_number':350,'multiline':False]['text':' gets SIGKILL','line_number':351,'multiline':False]['text':' frequently hangs for ROCm','line_number':352,'multiline':False]['text':' test_serialization_2gb_file allocates a tensor of 2GB, and could cause OOM','line_number':353,'multiline':False]['text':' Cause CUDA illegal memory access https://github.com/pytorch/pytorch/issues/95749','line_number':354,'multiline':False]['text':' Cause CUDA OOM on ROCm','line_number':355,'multiline':False]['text':' OOM','line_number':356,'multiline':False]['text':' OOM','line_number':357,'multiline':False]['text':' OOM','line_number':358,'multiline':False]['text':' OOM','line_number':359,'multiline':False]['text':' OOM','line_number':360,'multiline':False]['text':' OOM','line_number':361,'multiline':False]['text':' OOM','line_number':362,'multiline':False]['text':' Testing, probably revert later','line_number':363,'multiline':False]['text':' A subset of onnx tests that cannot run in parallel due to high memory usage.','line_number':365,'multiline':False]['text':' A subset of our TEST list that validates PyTorch's ops, modules, and autograd function as expected','line_number':374,'multiline':False]['text':' if a test file takes longer than 5 min, we add it to TARGET_DET_LIST','line_number':388,'multiline':False]['text':' don't use UCP TL on CUDA as it is not well supported','line_number':417,'multiline':False]['text':' CI nodes (M60) fail if it is on','line_number':418,'multiline':False]['text':' https://stackoverflow.com/questions/2549939/get-signal-names-from-numbers-in-python','line_number':421,'multiline':False]['text':' These are just the slowest ones, this isn't an exhaustive list.','line_number':451,'multiline':False]['text':' Note that you should use skipIfSlowGradcheckEnv if you do not wish to','line_number':453,'multiline':False]['text':' skip all the tests in that file, e.g. test_mps','line_number':454,'multiline':False]['text':' TODO: C++ with coverage is not yet supported','line_number':479,'multiline':False]['text':' NB: Rerun disabled tests depends on pytest-flakefinder and it doesn't work with','line_number':505,'multiline':False]['text':' pytest-cpp atm. We also don't have support to disable C++ test yet, so it's ok','line_number':506,'multiline':False]['text':' to just return successfully here','line_number':507,'multiline':False]['text':' in case of pytest','line_number':526,'multiline':False]['text':' If using pytest, replace -f with equivalent -x','line_number':537,'multiline':False]['text':' TODO: These features are not available for C++ test yet','line_number':550,'multiline':False]['text':' use the downloaded test cases configuration, not supported in pytest','line_number':555,'multiline':False]['text':' Extra arguments are not supported with pytest','line_number':566,'multiline':False]['text':' If there is no eligible executable returning here, it means an unsupported','line_number':569,'multiline':False]['text':' case such as coverage for C++ test. So just returning ok makes sense','line_number':570,'multiline':False]['text':' C++ tests are not the regular test directory','line_number':574,'multiline':False]['text':' Can't call `python -m unittest test_*` here because it doesn't run code','line_number':591,'multiline':False]['text':' in `if __name__ == '__main__': `. So call `python test_*.py` instead.','line_number':592,'multiline':False]['text':' I think subprocess is better handled by common_utils? but it's not working atm','line_number':626,'multiline':False]['text':' Pytest return code 5 means no test is collected. This is needed','line_number':641,'multiline':False]['text':' here as we use pytest directly when running C++ tests. Return','line_number':642,'multiline':False]['text':' code 4 is ok too as this happens when the binary is not a C++','line_number':643,'multiline':False]['text':' test executable. All binary files under build/bin that are not','line_number':644,'multiline':False]['text':' C++ test at the time of this writing have been excluded, but we','line_number':645,'multiline':False]['text':' can accept code 4 too just in case a new non-test binary file','line_number':646,'multiline':False]['text':' comes up in the future.','line_number':647,'multiline':False]['text':' Run the test with -x to stop at first failure. Try again, skipping the','line_number':660,'multiline':False]['text':' previously run tests, repeating this until there is a test that fails 3','line_number':661,'multiline':False]['text':' times (same number of rVetries we typically give).  Then we skip that','line_number':662,'multiline':False]['text':' test, and keep going. Basically if the same test fails 3 times in a row,','line_number':663,'multiline':False]['text':' skip the test on the next run, but still fail in the end. I take advantage','line_number':664,'multiline':False]['text':' of the value saved in stepcurrent to keep track of the most recently run','line_number':665,'multiline':False]['text':' test (which is the one that failed if there was a failure).','line_number':666,'multiline':False]['text':' Got to the end of the test suite successfully','line_number':682,'multiline':False]['text':' Read what just failed','line_number':690,'multiline':False]['text':' Wipe the build folder, if it exists already','line_number':737,'multiline':False]['text':' Build the test cpp extensions modules','line_number':743,'multiline':False]['text':' "install" the test modules and run tests','line_number':759,'multiline':False]['text':' install directory is the one that is named site-packages','line_number':772,'multiline':False]['text':' MPI tests are broken with Python-3.9','line_number':797,'multiline':False]['text':' test mpiexec for --noprefix option','line_number':835,'multiline':False]['text':' TODO: expose these options to the user','line_number':894,'multiline':False]['text':' For now disable all feature-conditional tests','line_number':895,'multiline':False]['text':' 'lapack': 'auto',','line_number':896,'multiline':False]['text':' 'cuda': 'auto',','line_number':897,'multiline':False]['text':' 'cuda1': 'auto',','line_number':898,'multiline':False]['text':' 'qengine': 'auto',','line_number':899,'multiline':False]['text':' Resolve "auto" based on a test to determine if the feature is available.','line_number':910,'multiline':False]['text':' Is there a better check if quantization is enabled?','line_number':926,'multiline':False]['text':' NOQA: F401','line_number':927,'multiline':False]['text':' NOQA: F401','line_number':938,'multiline':False]['text':' NOQA: F401','line_number':939,'multiline':False]['text':' NOQA: F401','line_number':940,'multiline':False]['text':' Set doctest environment variables','line_number':947,'multiline':False]['text':' TODO: could try to enable some of these','line_number':973,'multiline':False]['text':' set to "auto" to test doctests in compiled modules','line_number':991,'multiline':False]['text':' If success + no retries (idk how else to check for test level retries','line_number':1020,'multiline':False]['text':' other than reparse xml), print only what tests ran, rename the log','line_number':1021,'multiline':False]['text':' file so it doesn't get printed later, and do not remove logs.','line_number':1022,'multiline':False]['text':' otherwise: print entire file and then remove it','line_number':1035,'multiline':False]['text':' Distributed tests are too slow, so running them x50 will cause the jobs to timeout after','line_number':1046,'multiline':False]['text':' 3+ hours. So, let's opt for less number of reruns. We need at least 150 instances of the','line_number':1047,'multiline':False]['text':' test every 2 weeks to satisfy the Rockset query (15 x 14 = 210). The same logic applies','line_number':1048,'multiline':False]['text':' to ASAN, which is also slow','line_number':1049,'multiline':False]['text':' When under rerun-disabled-tests mode, run the same tests multiple times to determine their','line_number':1051,'multiline':False]['text':' flakiness status. Default to 50 re-runs','line_number':1052,'multiline':False]['text':' When under the normal mode, retry a failed test 2 more times. -x means stop at the first','line_number':1055,'multiline':False]['text':' failure','line_number':1056,'multiline':False]['text':' C++ tests need to be run with pytest directly, not via python','line_number':1064,'multiline':False]['text':' Use pytext-dist to run C++ tests in parallel as running them sequentially using run_test','line_number':1069,'multiline':False]['text':' is much slower than running them directly','line_number':1070,'multiline':False]['text':' Add the option to generate XML test report here as C++ tests','line_number':1074,'multiline':False]['text':' won't go into common_utils','line_number':1075,'multiline':False]['text':' NS: Disable target determination until it can be made more reliable','line_number':1210,'multiline':False]['text':' parser.add_argument(','line_number':1211,'multiline':False]['text':'     "--determine-from",','line_number':1212,'multiline':False]['text':'     help="File of affected source filenames to determine which tests to run.",','line_number':1213,'multiline':False]['text':' )','line_number':1214,'multiline':False]['text':' filter if there's JIT only and distributed only test options','line_number':1319,'multiline':False]['text':' Filter to only run core tests when --core option is specified','line_number':1330,'multiline':False]['text':' Filter to only run functorch tests when --functorch option is specified','line_number':1336,'multiline':False]['text':' Exclude all C++ tests otherwise as they are still handled differently','line_number':1343,'multiline':False]['text':' than Python test at the moment','line_number':1344,'multiline':False]['text':' Exclude all mps tests otherwise','line_number':1350,'multiline':False]['text':' Filter to only run onnx tests when --onnx option is specified','line_number':1353,'multiline':False]['text':' Exclude all onnx tests otherwise','line_number':1358,'multiline':False]['text':' process exclusion','line_number':1361,'multiline':False]['text':' these tests failing in CUDA 11.6 temporary disabling. issue https://github.com/pytorch/pytorch/issues/75375','line_number':1368,'multiline':False]['text':' skip all distributed tests if distributed package is not available.','line_number':1388,'multiline':False]['text':' skip tests that require LAPACK when it's not available','line_number':1396,'multiline':False]['text':' Load previous test times to make sharding decisions','line_number':1420,'multiline':False]['text':' Do sharding','line_number':1483,'multiline':False]['text':' Printing the date here can help diagnose which tests are slow','line_number':1511,'multiline':False]['text':' subprocess.Popen returns the child process' exit signal as','line_number':1523,'multiline':False]['text':' return code -N, where N is the signal number.','line_number':1524,'multiline':False]['text':' parallel = in parallel with other files','line_number':1541,'multiline':False]['text':' serial = this file on it's own.  The file might still be run in parallel with itself (ex test_ops)','line_number':1542,'multiline':False]['text':' See Note [ROCm parallel CI testing]','line_number':1548,'multiline':False]['text':' NB: This is a hack to make conftest.py available on CPP_TESTS_DIR. We should','line_number':1553,'multiline':False]['text':' see if the file could be turned into a full-fledge ptest plugin instead','line_number':1554,'multiline':False]['text':' Take the conftest file from the test directory','line_number':1562,'multiline':False]['text':' Include sharding info in all metrics','line_number':1650,'multiline':False]['text':' downloading test cases configuration to local environment','line_number':1666,'multiline':False]['text':' Each batch will be run sequentially','line_number':1710,'multiline':False]['text':' Actually run the tests','line_number':1754,'multiline':False]['text':' A disabled test is expected to fail, so there is no need to report a failure here','line_number':1806,'multiline':False]