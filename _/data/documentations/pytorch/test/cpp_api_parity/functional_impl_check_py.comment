['text':' The purpose of this test is to check that we have implementation parity between','line_number':1,'multiline':False]['text':' a Python `torch.nn.functional` function and its corresponding C++ `torch::nn::functional`','line_number':2,'multiline':False]['text':' function. Concretely, this test does the following:','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' 1. Get a test params dict from common_nn.py, run forward pass on the Python functional','line_number':5,'multiline':False]['text':' created using the test params.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' 2. Serialize the Python functional's forward input arguments, deserialize them','line_number':8,'multiline':False]['text':' in C++ and use them as input for the C++ functional's forward pass.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' 3. Run the forward pass on the C++ functional, and serialize the C++ functional's','line_number':11,'multiline':False]['text':' forward output.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' 4. Compare Python/C++ functional's forward output. If they are the same, then we','line_number':14,'multiline':False]['text':' have implementation parity between Python/C++ module.','line_number':15,'multiline':False]['text':' Expected substitutions:','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' ${functional_variant_name}  (e.g. `BCELoss_no_reduce`)','line_number':33,'multiline':False]['text':' ${cpp_args_construction_stmts}','line_number':34,'multiline':False]['text':' ${cpp_function_call}','line_number':35,'multiline':False]['text':' Some functionals (such as `F.rrelu`) create random tensors in their call path.','line_number':71,'multiline':False]['text':' To make sure the random tensors created are the same in Python/C++, we need','line_number':72,'multiline':False]['text':' to set the RNG seed manually.','line_number':73,'multiline':False]['text':' Remove the temporary folder if it exists already','line_number':82,'multiline':False]['text':' Run forward on Python functional','line_number':86,'multiline':False]['text':' Save Python arguments to be used from C++ function','line_number':89,'multiline':False]['text':' Check that forward outputs are equal','line_number':102,'multiline':False]['text':' Remove temporary folder that stores C++ outputs','line_number':109,'multiline':False]['text':' Expected format for `cpp_options_args`: `F::FunctionalFuncOptions(...)`','line_number':117,'multiline':False]['text':' Example output: `binary_cross_entropy`','line_number':118,'multiline':False]['text':' Expected format for `cpp_function_call`: `F::functional_name(...)`','line_number':122,'multiline':False]['text':' Example output: `binary_cross_entropy`','line_number':123,'multiline':False]['text':' Example output: `BCELoss_no_reduce_cuda`','line_number':147,'multiline':False]['text':' Build all C++ tests together, instead of once per test.','line_number':223,'multiline':False]