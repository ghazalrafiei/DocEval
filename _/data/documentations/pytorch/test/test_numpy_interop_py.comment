['text':' Owner(s): ["module: numpy"]','line_number':1,'multiline':False]['text':' For testing handling NumPy objects and sending tensors to / accepting','line_number':15,'multiline':False]['text':'   arrays from NumPy.','line_number':16,'multiline':False]['text':' Note: the warning this tests for only appears once per program, so','line_number':18,'multiline':False]['text':' other instances of this warning should be addressed to avoid','line_number':19,'multiline':False]['text':' the tests depending on the order in which they're run.','line_number':20,'multiline':False]['text':' can't directly use min and max, because for double, max - min','line_number':46,'multiline':False]['text':' is greater than double range and sampling always gives inf.','line_number':47,'multiline':False]['text':' can't directly use min and max, because for int64_t, max - min','line_number':52,'multiline':False]['text':' is greater than int64_t range and triggers UB.','line_number':53,'multiline':False]['text':' 1D','line_number':71,'multiline':False]['text':' 1D > 0 storage offset','line_number':78,'multiline':False]['text':' empty','line_number':91,'multiline':False]['text':' contiguous 2D','line_number':96,'multiline':False]['text':' with storage offset','line_number':104,'multiline':False]['text':' non-contiguous 2D','line_number':112,'multiline':False]['text':' with storage offset','line_number':118,'multiline':False]['text':' non-contiguous 2D with holes','line_number':125,'multiline':False]['text':' check writeable','line_number':133,'multiline':False]['text':' TODO: change to tensor equality check once HalfTensor','line_number':209,'multiline':False]['text':' implements `==`','line_number':210,'multiline':False]['text':' ufunc 'remainder' not supported for complex dtypes','line_number':213,'multiline':False]['text':' This is a special test case for Windows','line_number':215,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/22615','line_number':216,'multiline':False]['text':' Test unsupported type','line_number':222,'multiline':False]['text':' check storage offset','line_number':227,'multiline':False]['text':' check noncontiguous','line_number':234,'multiline':False]['text':' check noncontiguous with holes','line_number':240,'multiline':False]['text':' check zero dimensional','line_number':247,'multiline':False]['text':' check ill-sized strides raise exception','line_number':253,'multiline':False]['text':' Invalid list of numpy array','line_number':265,'multiline':False]['text':' Invalid list of list of numpy array','line_number':269,'multiline':False]['text':' expected shape is `[1, 2, 3]`, hence we try to iterate over 0-D array','line_number':277,'multiline':False]['text':' leading to type error : not a sequence.','line_number':278,'multiline':False]['text':' list of list or numpy array.','line_number':282,'multiline':False]['text':' Only concrete class can be given where "Type[number[_64Bit]]" is expected','line_number':338,'multiline':False]['text':' type: ignore[misc]','line_number':339,'multiline':False]['text':' .type expects a XxxTensor, which have no type hints on','line_number':340,'multiline':False]['text':' purpose, so ignore during mypy type checking','line_number':341,'multiline':False]['text':' type: ignore[call-overload]','line_number':342,'multiline':False]['text':' type: ignore[call-overload]','line_number':345,'multiline':False]['text':' Test __array__ w/o dtype argument','line_number':348,'multiline':False]['text':' Test __array_wrap__, same dtype','line_number':355,'multiline':False]['text':' Test __array__ with dtype argument','line_number':362,'multiline':False]['text':' Only concrete class can be given where "Type[number[_64Bit]]" is expected','line_number':367,'multiline':False]['text':' type: ignore[misc]','line_number':368,'multiline':False]['text':' Test some math functions with float types','line_number':376,'multiline':False]['text':' type: ignore[call-overload]','line_number':380,'multiline':False]['text':' Test functions with boolean return value','line_number':390,'multiline':False]['text':' type: ignore[call-overload]','line_number':392,'multiline':False]['text':' mypy raises an error when np.floatXY(2.0) is called','line_number':404,'multiline':False]['text':' even though this is valid code','line_number':405,'multiline':False]['text':' type: ignore[abstract, arg-type]','line_number':406,'multiline':False]['text':' Only concrete class can be given where "Type[number[_64Bit]]" is expected','line_number':419,'multiline':False]['text':' type: ignore[call-overload]','line_number':421,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/29252','line_number':422,'multiline':False]['text':' np integral type can be treated as a python int in native functions with','line_number':428,'multiline':False]['text':' int parameters:','line_number':429,'multiline':False]['text':' numpy integral type parses like a python int in custom python bindings:','line_number':433,'multiline':False]['text':' type: ignore[attr-defined]','line_number':434,'multiline':False]['text':' Original reported issue, np integral type parses to the correct','line_number':440,'multiline':False]['text':' PyTorch integral type when passed for a `Scalar` parameter in','line_number':441,'multiline':False]['text':' arithmetic operations:','line_number':442,'multiline':False]['text':' TODO: Imaginary part is dropped in this case. Need fix.','line_number':479,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/43579','line_number':480,'multiline':False]['text':' Same can be achieved by running','line_number':489,'multiline':False]['text':' y = torch.empty_strided((0,), (0,), dtype=torch.float16)','line_number':490,'multiline':False]['text':' Regression test for https://github.com/pytorch/pytorch/issues/115068','line_number':492,'multiline':False]['text':' Regression test for https://github.com/pytorch/pytorch/issues/115066','line_number':494,'multiline':False]['text':' Regression test for https://github.com/pytorch/pytorch/issues/113037','line_number':496,'multiline':False]