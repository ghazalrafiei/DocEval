['text':' Owner(s): ["module: cpp-extensions"]','line_number':1,'multiline':False]['text':' define TEST_ROCM before changing TEST_CUDA','line_number':23,'multiline':False]['text':' rmtree returns permission error: [WinError 5] Access is denied','line_number':35,'multiline':False]['text':' on Windows, this is a word-around','line_number':36,'multiline':False]['text':' There's only one test that runs gracheck, run slow mode manually','line_number':42,'multiline':False]['text':' cpp extensions use relative paths. Those paths are relative to','line_number':50,'multiline':False]['text':' this file, so we'll change the working directory temporarily','line_number':51,'multiline':False]['text':' return the working directory (see setUp)','line_number':57,'multiline':False]['text':' Checking we can call a method defined not in the main C++ file.','line_number':85,'multiline':False]['text':' Checking we can use this JIT-compiled class.','line_number':89,'multiline':False]['text':' NOTE: The name of the extension must equal the name of the module.','line_number':97,'multiline':False]['text':' 2 * sigmoid(0) = 2 * 0.5 = 1','line_number':114,'multiline':False]['text':' Compile an extension with given `flags`','line_number':138,'multiline':False]['text':' Note, .extension name may include _v1, _v2, so first find exact name','line_number':142,'multiline':False]['text':' Compile and load the test CUDA arch in a different Python process to avoid','line_number':182,'multiline':False]['text':' polluting the current one and causes test_jit_cuda_extension to fail on','line_number':183,'multiline':False]['text':' Windows. There is no clear way to unload a module after it has been imported','line_number':184,'multiline':False]['text':' and torch.utils.cpp_extension.load builds and loads the module in one go.','line_number':185,'multiline':False]['text':' See https://github.com/pytorch/pytorch/issues/61655 for more details','line_number':186,'multiline':False]['text':' Expected output for --list-elf:','line_number':192,'multiline':False]['text':'   ELF file    1: cudaext_archflags.1.sm_61.cubin','line_number':193,'multiline':False]['text':'   ELF file    2: cudaext_archflags.2.sm_52.cubin','line_number':194,'multiline':False]['text':' Expected output for --list-ptx:','line_number':197,'multiline':False]['text':'   PTX file    1: cudaext_archflags.1.sm_61.ptx','line_number':198,'multiline':False]['text':' rmtree returns permission error: [WinError 5] Access is denied','line_number':202,'multiline':False]['text':' on Windows, this is a word-around','line_number':203,'multiline':False]['text':' Test a number of combinations:','line_number':216,'multiline':False]['text':'   - the default for the machine we're testing on','line_number':217,'multiline':False]['text':'   - Separators, can be ';' (most common) or ' '','line_number':218,'multiline':False]['text':'   - Architecture names','line_number':219,'multiline':False]['text':'   - With/without '+PTX'','line_number':220,'multiline':False]['text':' expected values is length-2 tuple: (list of ELF, list of PTX)','line_number':224,'multiline':False]['text':' note: there should not be more than one PTX value','line_number':225,'multiline':False]['text':' CUDA 12 drops compute capability < 5.0','line_number':234,'multiline':False]['text':' implementation of CuDNN ReLU','line_number':243,'multiline':False]['text':' y=relu(x)','line_number':258,'multiline':False]['text':' Here, the C++ source need only declare the function signature.','line_number':353,'multiline':False]['text':' Here, the C++ source need only declare the function signature.','line_number':396,'multiline':False]['text':' First make sure they have the same parameters','line_number':520,'multiline':False]['text':' Create a torch.nn.Module which uses the C++ module as a submodule.','line_number':546,'multiline':False]['text':' Further embed the torch.nn.Module into a Sequential, and also add the','line_number':561,'multiline':False]['text':' C++ module as an element of the Sequential.','line_number':562,'multiline':False]['text':' Try calling the module!','line_number':566,'multiline':False]['text':' The call operator is bound to forward too.','line_number':568,'multiline':False]['text':' Do changes on the module hierarchy.','line_number':572,'multiline':False]['text':' Make sure we can access these methods recursively.','line_number':579,'multiline':False]['text':' Test clone()','line_number':585,'multiline':False]['text':' Try differentiating through the whole module.','line_number':591,'multiline':False]['text':' Try calling zero_grad()','line_number':599,'multiline':False]['text':' Test train(), eval(), training (a property)','line_number':604,'multiline':False]['text':' Try calling the additional methods we registered.','line_number':612,'multiline':False]['text':' Try accessing parameters','line_number':623,'multiline':False]['text':' Test that the missing-semicolon error message has linebreaks in it.','line_number':730,'multiline':False]['text':' This'll fail if the message has been munged into a single line.','line_number':731,'multiline':False]['text':' It's hard to write anything more specific as every compiler has it's own','line_number':732,'multiline':False]['text':' error formatting.','line_number':733,'multiline':False]['text':' Note: the module created from this source will include the py::key_error','line_number':742,'multiline':False]['text':' symbol. But because of visibility and the fact that it lives in a','line_number':743,'multiline':False]['text':' different compilation unit than pybind, this trips up ubsan even though','line_number':744,'multiline':False]['text':' it is fine. "ubsan.supp" thus needs to contain "vptr:warn_mod.so".','line_number':745,'multiline':False]['text':' Ensure double type for hard-coded c name below','line_number':776,'multiline':False]['text':' Without error handling, the warnings cannot be catched','line_number':780,'multiline':False]['text':' Catched with no error should be detected','line_number':810,'multiline':False]['text':' Catched with cpp error should also be detected','line_number':814,'multiline':False]['text':' Catched with python error should also be detected','line_number':819,'multiline':False]['text':' Catched with pybind error should also be detected','line_number':824,'multiline':False]['text':' Note that there is no type name translation for pybind errors','line_number':825,'multiline':False]['text':' Make sure raising warnings are handled properly','line_number':830,'multiline':False]['text':' No error, the warning should raise','line_number':834,'multiline':False]['text':' Another error happened, the warning is ignored','line_number':839,'multiline':False]['text':' This used to deadlock','line_number':869,'multiline':False]['text':' Test that a custom compound op (i.e. a custom op that just calls other aten ops)','line_number':880,'multiline':False]['text':' correctly returns gradients of those other ops','line_number':881,'multiline':False]['text':' Test that a custom C++ Function raises an error under functorch transforms','line_number':907,'multiline':False]