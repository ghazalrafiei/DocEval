['text':' Owner(s): ["module: functorch"]','line_number':1,'multiline':False]['text':' todo: convert these into tests','line_number':48,'multiline':False]['text':' def group_std(x, groups: int = 32, eps: float = 1e-5, flatten: bool = False):','line_number':49,'multiline':False]['text':'     B, C, H, W = x.shape','line_number':50,'multiline':False]['text':'     x_dtype = x.dtype','line_number':51,'multiline':False]['text':'     if flatten:','line_number':52,'multiline':False]['text':'         x = x.reshape(B, groups, -1)  # FIXME simpler shape causing TPU / XLA issues','line_number':53,'multiline':False]['text':'         std = x.float().var(dim=2, unbiased=False, keepdim=True).add(eps).sqrt().to(x_dtype)','line_number':54,'multiline':False]['text':'     else:','line_number':55,'multiline':False]['text':'         x = x.reshape(B, groups, C // groups, H, W)','line_number':56,'multiline':False]['text':'         std = x.float().var(dim=(2, 3, 4), unbiased=False, keepdim=True).add(eps).sqrt().to(x_dtype)','line_number':57,'multiline':False]['text':'     return std.expand(x.shape).reshape(B, C, H, W)','line_number':58,'multiline':False]['text':' class EvoNorm2dS0(nn.Module):','line_number':60,'multiline':False]['text':'     def __init__(self, num_features, groups=32, group_size=None, apply_act=True, eps=1e-5, **_):','line_number':61,'multiline':False]['text':'         super().__init__()','line_number':62,'multiline':False]['text':'         self.apply_act = apply_act  # apply activation (non-linearity)','line_number':63,'multiline':False]['text':'         if group_size:','line_number':64,'multiline':False]['text':'             assert num_features % group_size == 0','line_number':65,'multiline':False]['text':'             self.groups = num_features // group_size','line_number':66,'multiline':False]['text':'         else:','line_number':67,'multiline':False]['text':'             self.groups = groups','line_number':68,'multiline':False]['text':'         self.eps = eps','line_number':69,'multiline':False]['text':'         self.weight = nn.Parameter(torch.ones(num_features))','line_number':70,'multiline':False]['text':'         self.bias = nn.Parameter(torch.zeros(num_features))','line_number':71,'multiline':False]['text':'         self.v = nn.Parameter(torch.ones(num_features)) if apply_act else None','line_number':72,'multiline':False]['text':'         self.reset_parameters()','line_number':73,'multiline':False]['text':'     def reset_parameters(self):','line_number':75,'multiline':False]['text':'         nn.init.ones_(self.weight)','line_number':76,'multiline':False]['text':'         nn.init.zeros_(self.bias)','line_number':77,'multiline':False]['text':'         if self.v is not None:','line_number':78,'multiline':False]['text':'             nn.init.ones_(self.v)','line_number':79,'multiline':False]['text':'     def forward(self, x):','line_number':81,'multiline':False]['text':'         x_dtype = x.dtype','line_number':82,'multiline':False]['text':'         v_shape = (1, -1, 1, 1)','line_number':83,'multiline':False]['text':'         if self.v is not None:','line_number':84,'multiline':False]['text':'             v = self.v.view(v_shape).to(dtype=x_dtype)','line_number':85,'multiline':False]['text':'             x = x * (x * v).sigmoid() / group_std(x, self.groups, self.eps)','line_number':86,'multiline':False]['text':'         return x * self.weight.view(v_shape).to(dtype=x_dtype) + self.bias.view(v_shape).to(dtype=x_dtype)','line_number':87,'multiline':False]['text':' device = "cuda"','line_number':90,'multiline':False]['text':' dtype = torch.float','line_number':91,'multiline':False]['text':' evo_norm = EvoNorm2dS0(2048)','line_number':93,'multiline':False]['text':' evo_norm_inp = [(128, 2048, 8, 8)]','line_number':94,'multiline':False]['text':' layer norm should always be calculated in float32','line_number':166,'multiline':False]['text':' convert into half-precision if necessary','line_number':170,'multiline':False]['text':' TODO - Assertion failure','line_number':182,'multiline':False]['text':' def test_hard_mish(self):','line_number':183,'multiline':False]['text':'   for compiler in compilers:','line_number':184,'multiline':False]['text':'     run_and_compare_activation(hard_mish, 1024)','line_number':185,'multiline':False]['text':' check if the CSE modified graph of f has delta less nodes, and do not reduce the number of nodes further on a second pass.','line_number':188,'multiline':False]['text':' delta is an integer >= -1. If delta = -1, only check if the new graph','line_number':189,'multiline':False]['text':'   has less or equal number of nodes','line_number':190,'multiline':False]['text':' the number of nodes decrease/ or stay the same','line_number':199,'multiline':False]['text':' a second pass should not reduce more nodes','line_number':209,'multiline':False]['text':' check correctness','line_number':215,'multiline':False]['text':' both return None','line_number':219,'multiline':False]['text':' results returned are the same','line_number':221,'multiline':False]['text':' check results are the same','line_number':223,'multiline':False]