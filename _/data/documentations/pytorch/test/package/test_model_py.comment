['text':' Owner(s): ["oncall: package/deploy"]','line_number':1,'multiline':False]['text':' Support the case where we run this file directly.','line_number':22,'multiline':False]['text':' create a package that will save it along with its code','line_number':40,'multiline':False]['text':' put the pickled resnet in the package, by default','line_number':42,'multiline':False]['text':' this will also save all the code files references by','line_number':43,'multiline':False]['text':' the objects in the pickle','line_number':44,'multiline':False]['text':' we can now load the saved model','line_number':48,'multiline':False]['text':' test that it works','line_number':52,'multiline':False]['text':' functions exist also to get at the private modules in each package','line_number':57,'multiline':False]['text':' if we are doing transfer learning we might want to re-save','line_number':61,'multiline':False]['text':' things that were loaded from a package.','line_number':62,'multiline':False]['text':' We need to tell the exporter about any modules that','line_number':63,'multiline':False]['text':' came from imported packages so that it can resolve','line_number':64,'multiline':False]['text':' class names like torchvision.models.resnet.ResNet','line_number':65,'multiline':False]['text':' to their source code.','line_number':66,'multiline':False]['text':' e.importers is a list of module importing functions','line_number':68,'multiline':False]['text':' that by default contains importlib.import_module.','line_number':69,'multiline':False]['text':' it is searched in order until the first success and','line_number':70,'multiline':False]['text':' that module is taken to be what torchvision.models.resnet','line_number':71,'multiline':False]['text':' should be in this code package. In the case of name collisions,','line_number':72,'multiline':False]['text':' such as trying to save a ResNet from two different packages,','line_number':73,'multiline':False]['text':' we take the first thing found in the path, so only ResNet objects from','line_number':74,'multiline':False]['text':' one importer will work. This avoids a bunch of name mangling in','line_number':75,'multiline':False]['text':' the source code. If you need to actually mix ResNet objects,','line_number':76,'multiline':False]['text':' we suggest reconstructing the model objects using code from a single package','line_number':77,'multiline':False]['text':' using functions like save_state_dict and load_state_dict to transfer state','line_number':78,'multiline':False]['text':' to the correct code objects.','line_number':79,'multiline':False]['text':' This example shows how you might package a model','line_number':92,'multiline':False]['text':' so that the creator of the model has flexibility about','line_number':93,'multiline':False]['text':' how they want to save it but the 'server' can always','line_number':94,'multiline':False]['text':' use the same API to load the package.','line_number':95,'multiline':False]['text':' The convension is for each model to provide a','line_number':97,'multiline':False]['text':' 'model' package with a 'load' function that actual','line_number':98,'multiline':False]['text':' reads the model out of the archive.','line_number':99,'multiline':False]['text':' How the load function is implemented is up to the','line_number':101,'multiline':False]['text':' the packager.','line_number':102,'multiline':False]['text':' get our normal torchvision resnet','line_number':104,'multiline':False]['text':' Option 1: save by pickling the whole model','line_number':108,'multiline':False]['text':' + single-line, similar to torch.jit.save','line_number':109,'multiline':False]['text':' - more difficult to edit the code after the model is created','line_number':110,'multiline':False]['text':' note that this source is the same for all models in this approach','line_number':114,'multiline':False]['text':' so it can be made part of an API that just takes the model and','line_number':115,'multiline':False]['text':' packages it with this source.','line_number':116,'multiline':False]['text':' Option 2: save with state dict','line_number':131,'multiline':False]['text':' - more code to write to save/load the model','line_number':132,'multiline':False]['text':' + but this code can be edited later to adjust adapt the model later','line_number':133,'multiline':False]['text':' regardless of how we chose to package, we can now use the model in a server in the same way','line_number':155,'multiline':False]['text':' Option 1: save by pickling the whole model','line_number':172,'multiline':False]['text':' + single-line, similar to torch.jit.save','line_number':173,'multiline':False]['text':' - more difficult to edit the code after the model is created','line_number':174,'multiline':False]['text':' Model should script successfully.','line_number':184,'multiline':False]['text':' Scripted model should save and load successfully.','line_number':187,'multiline':False]