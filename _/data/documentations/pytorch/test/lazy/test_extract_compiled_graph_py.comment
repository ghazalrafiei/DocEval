['text':' Owner(s): ["oncall: jit"]','line_number':1,'multiline':False]['text':' The default fx tracer will convert torch.randn to a constant.. We may need','line_number':37,'multiline':False]['text':' a custom tracer.','line_number':38,'multiline':False]['text':' class ModuleEagerTensor(nn.Module):','line_number':39,'multiline':False]['text':'     def __init__(self):','line_number':40,'multiline':False]['text':'         super().__init__()','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'     def forward(self, a):','line_number':43,'multiline':False]['text':'         b = torch.randn(2, 3, device="cpu") # eager device','line_number':44,'multiline':False]['text':'         return a + b','line_number':45,'multiline':False]['text':' The module was planned to cover the case that a Fx graph return an eager','line_number':47,'multiline':False]['text':' tensor on the default device. It's harder than ModuleEagerTensor because','line_number':48,'multiline':False]['text':' we can not just override the device argument to Lazy since there is no','line_number':49,'multiline':False]['text':' explicit device argument.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Unfortunately, the default fx tracer convert the return value of the forward','line_number':52,'multiline':False]['text':' method to a constant.. Comment out for now','line_number':53,'multiline':False]['text':' class ModuleReturnEagerTensorOnDefaultDevice(nn.Module):','line_number':54,'multiline':False]['text':'     def __init__(self):','line_number':55,'multiline':False]['text':'         super().__init__()','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':'     def forward(self):','line_number':58,'multiline':False]['text':'         return torch.tensor((2, 3), dtype=torch.float32)','line_number':59,'multiline':False]['text':' reraise the exception','line_number':123,'multiline':False]['text':' We are done for the test case that expects an exception','line_number':128,'multiline':False]['text':' check correctness','line_number':135,'multiline':False]['text':' make sure arguments match after calling the model forward method to handle inplace','line_number':148,'multiline':False]['text':' updates.','line_number':149,'multiline':False]['text':' Same as test_sub but force aten::sub to fallback','line_number':170,'multiline':False]['text':' We expect an exception caught because of LTC fallabck.','line_number':171,'multiline':False]