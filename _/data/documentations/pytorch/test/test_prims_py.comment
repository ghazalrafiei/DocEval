['text':' Owner(s): ["module: decompositions"]','line_number':1,'multiline':False]['text':' Same shape','line_number':49,'multiline':False]['text':' Error input: reordering dims','line_number':59,'multiline':False]['text':' Adding outermost dimensions','line_number':63,'multiline':False]['text':' Expands','line_number':71,'multiline':False]['text':' Unsqueezes','line_number':79,'multiline':False]['text':' Sets the default dtype to NumPy's default dtype of double','line_number':115,'multiline':False]['text':' Tested here, as this OP is not currently exposed or tested in ATen','line_number':117,'multiline':False]['text':' This test is to ensure that the torch.ops.aten calls are replaced with refs','line_number':159,'multiline':False]['text':' Check that all call_function nodes are prims','line_number':171,'multiline':False]['text':' tests empty','line_number':244,'multiline':False]['text':' tests clone','line_number':249,'multiline':False]['text':' tests contiguous','line_number':255,'multiline':False]['text':' offsets of 4 and 8','line_number':278,'multiline':False]['text':' Checks multiple rand calls results with multiple philox_rand calls','line_number':279,'multiline':False]['text':' Test memory format is preserved in unambiguous cases','line_number':351,'multiline':False]['text':' Ambiguous cases','line_number':362,'multiline':False]['text':' is_channels_last_ and is_contiguous_, results in channels_last output','line_number':364,'multiline':False]['text':' is_channels_last_contiguous_ but not is_channels_last_, results in','line_number':373,'multiline':False]['text':' contiguous output','line_number':374,'multiline':False]['text':' If unbind returns empty tuple, it breaks some assumptions in some backward tests in test_ops.py.','line_number':384,'multiline':False]['text':' So can't put this test into common_methods_invocations.py.','line_number':385,'multiline':False]['text':' From https://github.com/pytorch/pytorch/issues/109558','line_number':401,'multiline':False]['text':' enables prim decomps','line_number':403,'multiline':False]['text':' some ops have vararg variants for the methods. this tests it.','line_number':415,'multiline':False]['text':' we don't have tests for varargs in OpInfo, so we need to','line_number':416,'multiline':False]['text':' improvise this a bit.','line_number':417,'multiline':False]['text':' The rule for general functions (the special cases being e.g. tensor','line_number':418,'multiline':False]['text':' creation functions taking shapes) is that things can be vararg','line_number':419,'multiline':False]['text':' if the method has only one argument of sequence type.','line_number':420,'multiline':False]['text':' e.g. permute can be called on a 3d tensor t as t.permute(0, 2, 1)','line_number':421,'multiline':False]['text':'      as well as t.permute([0, 2, 1])','line_number':422,'multiline':False]['text':'      when the signature in native_functions.yaml','line_number':423,'multiline':False]['text':'      shows arguments Tensor self, IntList dims','line_number':424,'multiline':False]['text':' we might need to adjust things for the factory functions or','line_number':425,'multiline':False]['text':' have them do their own test','line_number':426,'multiline':False]['text':' filter out empty tuple as that cannot be the varargs','line_number':430,'multiline':False]['text':' just run one test, we assume there is a suitable one in the tests','line_number':434,'multiline':False]['text':' in general, the methods take varargs and not (always?) the function','line_number':438,'multiline':False]['text':' variants, the exception to this rule are the factory functions','line_number':439,'multiline':False]['text':' in case we add random factory functions','line_number':447,'multiline':False]