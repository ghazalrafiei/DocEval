['text':' Owner(s): ["module: inductor"]','line_number':1,'multiline':False]['text':' Defines all the kernels for tests','line_number':17,'multiline':False]['text':' TODO: Suboptimal! We shouldn't need to save normalization stats.','line_number':307,'multiline':False]['text':' 3 kernels:','line_number':387,'multiline':False]['text':' kernel 1: (input = X, scale, LN scale, LN bias, output = LN_pointwise(X), welford_reduction(X) * 2)','line_number':388,'multiline':False]['text':' kernel 2: (input = X, welford_reduction(X) * 2, LN scale, LN bias, output = first-level amax (split-reduction))','line_number':389,'multiline':False]['text':' kernel 3: (input = first-level amax, output = final amax)','line_number':390,'multiline':False]['text':' scale (1) + X (4*2048*hidden_size) * 3 + welford_reduction (4*2048) * 4 +','line_number':391,'multiline':False]['text':'   LN scale (hidden_size) * 2 + LN bias (hidden_size) * 2 + amax (num_splits * 2 + 1)','line_number':392,'multiline':False]['text':' num_splits depends on SM architectures.','line_number':393,'multiline':False]['text':' 2 kernels:','line_number':401,'multiline':False]['text':' kernel 1: (input = X, scale, LN scale, LN bias, output = LN_pointwise(X), first-level amax (split-reduction))','line_number':402,'multiline':False]['text':' kernel 2: (input = first-level amax, output = final amax)','line_number':403,'multiline':False]['text':' scale (1) + X (4*2048*hidden_size) * 2 + LN scale (hidden_size) + LN bias (hidden_size) + amax (4 * 2048 * 2 + 1)','line_number':404,'multiline':False]['text':' TODO: this can be optimized by having the first pointwise kernel leveraging block sizes','line_number':414,'multiline':False]['text':' of the first-level reduction kernel.','line_number':415,'multiline':False]['text':' 3 kernels:','line_number':430,'multiline':False]['text':' kernel 1: (input = X, scale, output = pointwise(X))','line_number':431,'multiline':False]['text':' kernel 2: (input = X, output = first-level amax)','line_number':432,'multiline':False]['text':' kernel 3: (input = first-level amax, output = final amax)','line_number':433,'multiline':False]['text':' scale (1) + X (4*2048*hidden_size) * 3 + amax (num_splits * 2 + 1)','line_number':434,'multiline':False]['text':' num_splits depends on SM architectures.','line_number':435,'multiline':False]['text':' Doesn't matter where we break fusion group here','line_number':463,'multiline':False]['text':' We should materialize e (it's smaller!)','line_number':475,'multiline':False]['text':' [c, e]: 210, [f]: 210, [d]: 200','line_number':476,'multiline':False]['text':' We should materialize e.','line_number':489,'multiline':False]['text':' [c, e]: 300, [f]: 300, [d]: 200','line_number':490,'multiline':False]['text':' Test cases where we don't do the right thing yet.','line_number':801,'multiline':False]['text':' TODO: We aren't fusing outer dim softmaxes','line_number':812,'multiline':False]['text':' TODO: The greedy fusion strategy results in suboptimal grouping','line_number':820,'multiline':False]['text':' TODO: We materialize the intermediate if we don't unroll the reduction','line_number':833,'multiline':False]