['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]['text':' TODO(whc) dynamo actually recompiles one more time than the cache limit','line_number':17,'multiline':False]['text':' NB: making this a weakref.ref causes the cycle to no','line_number':42,'multiline':False]['text':' longer be promptly GC'ed','line_number':43,'multiline':False]['text':' randint itself causes one graph break','line_number':58,'multiline':False]['text':' Currently, we recompile each time,','line_number':70,'multiline':False]['text':' We'd probably like to bail out quickly and warn','line_number':71,'multiline':False]['text':' TODO(whc) these checks fail on py37.  Why?','line_number':72,'multiline':False]['text':' self.assertEqual(counters["frames"]["total"], 2 + self.cache_limit)','line_number':73,'multiline':False]['text':' self.assertEqual(counters["frames"]["ok"], 1 + self.cache_limit)','line_number':74,'multiline':False]['text':' compile_counter only sees frames that were fed to the backend compiler,','line_number':76,'multiline':False]['text':' which is a subset of counters["frames"]["ok"] -- probably because','line_number':77,'multiline':False]['text':' counters["frames"]["ok"] includes frames not containing torch ops?','line_number':78,'multiline':False]['text':' we may want to model dynamo's guards sufficiently after nvfuser's ProfilingExecutor guards','line_number':107,'multiline':False]['text':' such that we ensure dynamo is in charge of all the recompilations at the top level,','line_number':108,'multiline':False]['text':' and we could thus simplify the underlying torchscript executor','line_number':109,'multiline':False]['text':' warmup','line_number':122,'multiline':False]['text':' no guard fail or recompile','line_number':125,'multiline':False]['text':' a view should not cause nvfuser recompile','line_number':128,'multiline':False]['text':' a permutation should cause recompile','line_number':131,'multiline':False]['text':' Warning: choose a function here whose meta implementation lives','line_number':143,'multiline':False]['text':' entirely in C++.  If you do a Python one, Dynamo will dive into','line_number':144,'multiline':False]['text':' torch._refs which is OK but it will muddy up the warnings','line_number':145,'multiline':False]['text':' TODO(whc) maybe its hacky to have a 'test within a test' but this seemed convenient','line_number':149,'multiline':False]['text':' warmup','line_number':153,'multiline':False]['text':' warmup','line_number':197,'multiline':False]