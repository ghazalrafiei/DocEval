['text':' Owner(s): ["oncall: jit"]','line_number':1,'multiline':False]['text':' Make the helper files in test/ importable','line_number':14,'multiline':False]['text':' TS graph IR for Union should be annotated as Union()','line_number':48,'multiline':False]['text':' Serialized code for Union should be annotated as Union[]','line_number':50,'multiline':False]['text':' this shouldn't error out','line_number':53,'multiline':False]['text':' noqa: B903','line_number':134,'multiline':False]['text':' noqa: B903','line_number':135,'multiline':False]['text':' type: () -> int | str','line_number':180,'multiline':False]['text':' Can't use `checkScript` because it will flag the fact that','line_number':376,'multiline':False]['text':' the original code has `Optional[Union[int, str]]` but the','line_number':377,'multiline':False]['text':' saved/loaded code has `Union[int, NoneType, str]` (even','line_number':378,'multiline':False]['text':' though this is exactly what we want)','line_number':379,'multiline':False]['text':' TODO: We would like to eventually support this. The issue is being','line_number':402,'multiline':False]['text':' tracked at https://github.com/pytorch/pytorch/issues/58167','line_number':403,'multiline':False]['text':' TODO: There's currently an unrelated bug in','line_number':522,'multiline':False]['text':' `torch.jit.isinstance` that makes it fail for tuple literals.','line_number':523,'multiline':False]['text':' Posted here: https://github.com/pytorch/pytorch/issues/60095','line_number':524,'multiline':False]['text':' Change `assertEqual` to `checkScript` when the bug is fixed','line_number':525,'multiline':False]['text':' Check that we don't have any branching statements','line_number':539,'multiline':False]['text':' Check that we don't have any branching statements','line_number':554,'multiline':False]['text':' We should know that `x` is an `int` here','line_number':560,'multiline':False]['text':' We should know that `x` is an `int` here','line_number':572,'multiline':False]['text':' This function will fail after being torch.jit.save'd and','line_number':690,'multiline':False]['text':' torch.jit.load'd if the type annotations aren't preserved','line_number':691,'multiline':False]['text':' for Union during serialization. We need the `Union[str, int]`','line_number':692,'multiline':False]['text':' annotation to make sure that `y` is typed as a Union instead','line_number':693,'multiline':False]['text':' of as a str in one branch and an int in the other','line_number':694,'multiline':False]['text':' noqa: B009','line_number':716,'multiline':False]['text':' TODO: Support mixed list comprehensions','line_number':775,'multiline':False]['text':' TODO(@ansley): Support mixed list comprehensions','line_number':849,'multiline':False]['text':' TODO: String frontend does not support tuple unpacking','line_number':917,'multiline':False]['text':' https://github.com/pytorch/pytorch/issues/64096','line_number':918,'multiline':False]['text':' self._assert_passes(template, "Dict[str, torch.Tensor] | Dict[str, int]",','line_number':919,'multiline':False]['text':'              lhs["dict_comprehension_of_str_tensor"])','line_number':920,'multiline':False]['text':' self._assert_passes(template, "Dict[str, torch.Tensor] | Dict[str, int]",','line_number':922,'multiline':False]['text':'              lhs["dict_comprehension_of_str_int"])','line_number':923,'multiline':False]['text':' self._assert_raises(template, "Dict[str, torch.Tensor] | Dict[str, int]",','line_number':925,'multiline':False]['text':'              lhs["dict_comprehension_of_mixed"],','line_number':926,'multiline':False]['text':'              "foobar")','line_number':927,'multiline':False]['text':' self._assert_passes(template,','line_number':929,'multiline':False]['text':'                    "Dict[str, torch.Tensor] | Dict[str, int]",','line_number':930,'multiline':False]['text':'                    lhs["dict_keyword_with_internal_aggregate_function"])','line_number':931,'multiline':False]['text':' TODO(@ansley): Follow-up project needed for full type','line_number':933,'multiline':False]['text':' inference with dict keyword (supported for dict comprehension','line_number':934,'multiline':False]['text':' and dict literal already; should not be a blocker for anyone)','line_number':935,'multiline':False]['text':' See above--string frontend does not support tuple unpacking','line_number':988,'multiline':False]['text':' self._assert_raises(template, "int | torch.Tensor",','line_number':989,'multiline':False]['text':'              lhs["dict_comprehension_of_tensor"],','line_number':990,'multiline':False]['text':'              "foobar")','line_number':991,'multiline':False]['text':' See above--string frontend does not support tuple unpacking','line_number':1046,'multiline':False]['text':' self._assert_passes(template,','line_number':1047,'multiline':False]['text':'                    "Dict[str, torch.Tensor] | int",','line_number':1048,'multiline':False]['text':'                    lhs["dict_keyword_with_internal_aggregate_function"])','line_number':1049,'multiline':False]['text':'','line_number':1050,'multiline':False]['text':' self._assert_passes(template,','line_number':1051,'multiline':False]['text':'                    "Dict[str, torch.Tensor] | int",','line_number':1052,'multiline':False]['text':'                    lhs["dict_comprehension_of_str_tensor"])','line_number':1053,'multiline':False]['text':' self._assert_raises(template,','line_number':1055,'multiline':False]['text':'                    "Dict[str, torch.Tensor] | int",','line_number':1056,'multiline':False]['text':'                    lhs["dict_comprehension_of_str_int"],','line_number':1057,'multiline':False]['text':'                    "foobar")','line_number':1058,'multiline':False]['text':' self._assert_raises(template,','line_number':1060,'multiline':False]['text':'                    "Dict[str, torch.Tensor] | int",','line_number':1061,'multiline':False]['text':'                    lhs["dict_comprehension_of_mixed"],','line_number':1062,'multiline':False]['text':'                    "foobar")','line_number':1063,'multiline':False]