['text':' This header implements various unary operations using a MKL VML style','line_number':10,'multiline':False]['text':' interface.','line_number':11,'multiline':False]['text':' It implements various functions with a simple interface','line_number':13,'multiline':False]['text':' For example it enables the user to call vsin(float* out, const float* in,','line_number':14,'multiline':False]['text':' size) This functions takes a pointer to a continuous output array of floats and','line_number':15,'multiline':False]['text':' a constant input array. It will then apply sin to each value in the input','line_number':16,'multiline':False]['text':' array and write the result into the output array. out and in may point to the','line_number':17,'multiline':False]['text':' same memory, i.e. this fully supports in-place operations. These functions','line_number':18,'multiline':False]['text':' also implement their own parallelization, so take precautions when calling','line_number':19,'multiline':False]['text':' these from threaded functions.','line_number':20,'multiline':False]['text':' When MKL is available it will call into MKL's VML library similar to NumPy','line_number':22,'multiline':False]['text':' If MKL is not available it will use SLEEF.','line_number':23,'multiline':False]['text':' This file might be compiled under AVX or AVX2 when called from e.g.','line_number':25,'multiline':False]['text':' UnaryOpsKernel.cpp','line_number':26,'multiline':False]['text':' NB: We ignore numerical errors by convention and leave them to the user','line_number':57,'multiline':False]['text':' IMPLEMENT_VML(cosh)','line_number':73,'multiline':False]['text':' IMPLEMENT_VML(sinh)','line_number':90,'multiline':False]['text':' NB: LP64 MKL is the most commonly used and thus we assume it here. That means','line_number':102,'multiline':False]['text':' we need to expect MKL_INT to be of type int, which implies int32_t in most','line_number':103,'multiline':False]['text':' cases.','line_number':104,'multiline':False]['text':' NB: abs, cosh and sinh were temporarily disabled due to issues with Apple','line_number':138,'multiline':False]['text':' NB: expm1 is disabled because on some configs it produces expm1(nan)=-1','line_number':139,'multiline':False]['text':' IMPLEMENT_VML_MKL(cosh, Cosh)','line_number':144,'multiline':False]['text':' IMPLEMENT_VML_MKL(expm1, Expm1)','line_number':149,'multiline':False]['text':' IMPLEMENT_VML_MKL(sinh, Sinh)','line_number':153,'multiline':False]['text':' Not vectorized in MKL version tested','line_number':159,'multiline':False]['text':' IMPLEMENT_VML_MKL(abs, Abs)','line_number':160,'multiline':False]['text':' IMPLEMENT_VML_MKL(log1p, Log1p)','line_number':161,'multiline':False]['text':' namespace','line_number':169,'multiline':False]['text':' namespace vml','line_number':170,'multiline':False]['text':' namespace at','line_number':171,'multiline':False]