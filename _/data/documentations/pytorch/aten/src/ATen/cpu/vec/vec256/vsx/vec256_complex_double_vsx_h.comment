['text':' See Note [CPU_CAPABILITY namespace]','line_number':10,'multiline':False]['text':' convert std::complex<V> index mask to V index mask: xy -> xxyy','line_number':102,'multiline':False]['text':' as mergee phased in , we can use vec_perm with mask','line_number':215,'multiline':False]['text':' angle = atan2(b/a)','line_number':238,'multiline':False]['text':' auto b_a = _mm256_permute_pd(values, 0x05);     // b        a','line_number':239,'multiline':False]['text':' return Sleef_atan2d4_u10(values, b_a);          // 90-angle angle','line_number':240,'multiline':False]['text':' Most trigonomic ops use the log() op to improve complex number','line_number':272,'multiline':False]['text':' performance.','line_number':273,'multiline':False]['text':' log2eB_inv','line_number':278,'multiline':False]['text':' asin(x)','line_number':292,'multiline':False]['text':' = -i*ln(iz + sqrt(1 -z^2))','line_number':293,'multiline':False]['text':' = -i*ln((ai - b) + sqrt(1 - (a + bi)*(a + bi)))','line_number':294,'multiline':False]['text':' = -i*ln((-b + ai) + sqrt(1 - (a**2 - b**2) - 2*abi))','line_number':295,'multiline':False]['text':' acos(x) = pi/2 - asin(x)','line_number':310,'multiline':False]['text':' atan(x) = i/2 * ln((i + z)/(i - z))','line_number':315,'multiline':False]['text':' ln((i + z)/(i - z))','line_number':319,'multiline':False]['text':' i/2*ln()','line_number':320,'multiline':False]['text':' re + im*i = (a + bi)  / (c + di)','line_number':372,'multiline':False]['text':' re = (ac + bd)/abs_2() = c/abs_2()','line_number':373,'multiline':False]['text':' im = (bc - ad)/abs_2() = d/abs_2()','line_number':374,'multiline':False]['text':' c       -d','line_number':375,'multiline':False]['text':' 2perm','line_number':387,'multiline':False]['text':' 2perm','line_number':388,'multiline':False]['text':' summ','line_number':389,'multiline':False]['text':' 2add','line_number':390,'multiline':False]['text':' 2 add','line_number':391,'multiline':False]['text':' now lets choose evens','line_number':392,'multiline':False]['text':' 2 mergee's','line_number':393,'multiline':False]['text':' we will simulate it differently with 6 instructions total','line_number':399,'multiline':False]['text':' lets permute second so that we can add it getting horizontal sums','line_number':400,'multiline':False]['text':' 2perm','line_number':401,'multiline':False]['text':' 2perm','line_number':402,'multiline':False]['text':' summ','line_number':403,'multiline':False]['text':' 2sub','line_number':404,'multiline':False]['text':' 2 sub','line_number':405,'multiline':False]['text':' now lets choose evens','line_number':406,'multiline':False]['text':' 2 mergee's','line_number':407,'multiline':False]['text':'(a + bi)  * (c + di) = (ac - bd) + (ad + bc)i','line_number':411,'multiline':False]['text':' this is more vsx friendly than simulating horizontal from x86','line_number':413,'multiline':False]['text':' re + im*i = (a + bi)  / (c + di)','line_number':431,'multiline':False]['text':' re = (ac + bd)/abs_2()','line_number':432,'multiline':False]['text':' im = (bc - ad)/abs_2()','line_number':433,'multiline':False]['text':' Vectorized x86 simulation','line_number':444,'multiline':False]['text':' compares real and imag individually','line_number':495,'multiline':False]['text':' If both real numbers and imag numbers are equal, then the complex numbers are equal','line_number':496,'multiline':False]['text':' compares real and imag individually','line_number':500,'multiline':False]['text':' If either real numbers or imag numbers are not equal, then the complex numbers are not equal','line_number':501,'multiline':False]['text':' elelemtwise helpers','line_number':513,'multiline':False]['text':' auto mask = _mm256_cmp_ps(abs_a, abs_b, _CMP_LT_OQ);','line_number':528,'multiline':False]['text':' auto max = _mm256_blendv_ps(a, b, mask);','line_number':529,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':534,'multiline':False]['text':' auto isnan = _mm256_cmp_ps(abs_a, abs_b, _CMP_UNORD_Q);','line_number':535,'multiline':False]['text':' return _mm256_or_ps(max, isnan);','line_number':536,'multiline':False]['text':' auto mask = _mm256_cmp_ps(abs_a, abs_b, _CMP_GT_OQ);','line_number':545,'multiline':False]['text':' auto min = _mm256_blendv_ps(a, b, mask);','line_number':546,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':550,'multiline':False]['text':' auto isnan = _mm256_cmp_ps(abs_a, abs_b, _CMP_UNORD_Q);','line_number':551,'multiline':False]['text':' return _mm256_or_ps(min, isnan);','line_number':552,'multiline':False]['text':' namespace','line_number':556,'multiline':False]['text':' namespace vec','line_number':557,'multiline':False]['text':' namespace at','line_number':558,'multiline':False]