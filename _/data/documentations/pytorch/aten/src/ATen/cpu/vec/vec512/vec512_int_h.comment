['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' dummy definition to make Vectorizedi always defined','line_number':35,'multiline':False]['text':' CPU_CAPABILITY_AVX512','line_number':37,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':101,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':102,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':103,'multiline':False]['text':' ptr need not to be aligned here. See','line_number':112,'multiline':False]['text':' https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions/intrinsics-for-load-and-store-operations-1/mm512-storeu-si512.html','line_number':113,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':253,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':254,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':255,'multiline':False]['text':' ptr need not to be aligned here. See','line_number':264,'multiline':False]['text':' https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions/intrinsics-for-load-and-store-operations-1/mm512-storeu-si512.html','line_number':265,'multiline':False]['text':' int32_t and float have same size','line_number':323,'multiline':False]['text':' int32_t has half the size of double','line_number':343,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':484,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':485,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':486,'multiline':False]['text':' ptr need not to be aligned here. See','line_number':495,'multiline':False]['text':' https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions/intrinsics-for-load-and-store-operations-1/mm512-storeu-si512.html','line_number':496,'multiline':False]['text':' Fast path if only load element number of 16.','line_number':755,'multiline':False]['text':' Note: We didn't merge it as fast path of loadu(const void* ptr, T count),','line_number':756,'multiline':False]['text':' Because loadu(const void* ptr, T count) requires zero initialization for upper 384 bits.','line_number':757,'multiline':False]['text':' However, by using _mm512_castsi128_si512, the upper 384 bits of the result are undefined.','line_number':758,'multiline':False]['text':' TODO<leslie> We can use _mm512_zextsi128_si512 in the furture,','line_number':759,'multiline':False]['text':' since gcc 9.3 doesn't support it now.','line_number':760,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':766,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':767,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':768,'multiline':False]['text':' ptr need not to be aligned here. See','line_number':777,'multiline':False]['text':' https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions/intrinsics-for-load-and-store-operations-1/mm512-storeu-si512.html','line_number':778,'multiline':False]['text':' Fast path if only store element number of 16','line_number':782,'multiline':False]['text':' Negation. Defined here so we can utilize operator-','line_number':954,'multiline':False]['text':' We don't have an instruction for multiplying int8_t','line_number':1004,'multiline':False]['text':' We don't have an instruction for multiplying uint8_t','line_number':1010,'multiline':False]['text':' No vector instruction for shifting int8_t/uint8_t, so emulating','line_number':1314,'multiline':False]['text':' it instead.','line_number':1315,'multiline':False]['text':' Control masks for shuffle operation, treating 512 bits as an','line_number':1317,'multiline':False]['text':' array of 8-bit elements, and considering pairs of neighboring','line_number':1318,'multiline':False]['text':' elements.  Specifially, a mask named "ctl_M_N" (M,N in [0,1], and','line_number':1319,'multiline':False]['text':' M!=N) is set so that shuffle will move element with index M from','line_number':1320,'multiline':False]['text':' input pair into element with index N in output pair, and element','line_number':1321,'multiline':False]['text':' with index M in output pair will be set to all 0s.','line_number':1322,'multiline':False]['text':' Masks for bitwise and operation, treating 512 bits as an array of','line_number':1340,'multiline':False]['text':' 8-bit elements, and considering them in pairs of neighboring','line_number':1341,'multiline':False]['text':' elements.  A mask named "keep_M" (M in [0,1]) is set so that','line_number':1342,'multiline':False]['text':' bitwise and will copy element with index M from input pair into','line_number':1343,'multiline':False]['text':' element with the same index in output pair, while the other','line_number':1344,'multiline':False]['text':' element in output pair will be set to all 0s.','line_number':1345,'multiline':False]['text':' Take each 8-bit element with idx%2==0 from input array to be','line_number':1349,'multiline':False]['text':' shifted and extend it to 16 bits so that 0s are added to the','line_number':1350,'multiline':False]['text':' right.  Then, perform shifting on this 16-bit number.  Upper 8','line_number':1351,'multiline':False]['text':' bits will be proper result of shifting original 8-bit number, so','line_number':1352,'multiline':False]['text':' write them to result array, into the same position from which','line_number':1353,'multiline':False]['text':' corresponding input element is taken.  Also, make sure that','line_number':1354,'multiline':False]['text':' result array elements with idx%2!=0 are set to all 0s.','line_number':1355,'multiline':False]['text':'','line_number':1356,'multiline':False]['text':' Note that number of bits to shift for is extended to 16 bits by','line_number':1357,'multiline':False]['text':' adding 0s to the left.  That means this number is not properly','line_number':1358,'multiline':False]['text':' sign-extended for negative values.  However, number of bits to','line_number':1359,'multiline':False]['text':' shift is treated as an unsigned integer by respective shift','line_number':1360,'multiline':False]['text':' intrinsics anyway so if negative then either with or without','line_number':1361,'multiline':False]['text':' proper sign extension, it will be interpreted as a number greater','line_number':1362,'multiline':False]['text':' than 32, and the shifting result will be the same.','line_number':1363,'multiline':False]['text':' Peform shifting the same way for input array elements with','line_number':1376,'multiline':False]['text':' idx%2==1.','line_number':1377,'multiline':False]['text':' Merge partial results into the final result.','line_number':1390,'multiline':False]