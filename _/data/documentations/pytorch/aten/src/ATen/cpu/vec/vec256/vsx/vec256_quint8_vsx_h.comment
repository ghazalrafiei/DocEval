['text':' This file defines Vectorized<> for the quantized types.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Currently, we simply use these classes as efficient converters between','line_number':14,'multiline':False]['text':' the quantized types and Vectorized<float>, usually in bandwidth-bound cases','line_number':15,'multiline':False]['text':' where doing the arithmetic in full-precision is acceptable (e.g.','line_number':16,'multiline':False]['text':' elementwise operators).','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' Conversions are as follows:','line_number':20,'multiline':False]['text':'  Vectorized<quint8> -> 4x Vectorized<float>','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' The size of the returned float vector is specified by the special','line_number':23,'multiline':False]['text':' constexpr function float_num_vecs. The type of the value returned','line_number':24,'multiline':False]['text':' from dequantize (and expected as an argument to quantize) is','line_number':25,'multiline':False]['text':' specified by float_vec_return_type.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' When writing kernels with these vectors, it is expected that floating-','line_number':28,'multiline':False]['text':' point operations will be carried out in a loop over Vectorized<T>::float_num_vecs','line_number':29,'multiline':False]['text':' iterations.','line_number':30,'multiline':False]['text':' Broadcast constructor','line_number':70,'multiline':False]['text':' unpacking unsigned as signed','line_number':119,'multiline':False]['text':' signed ->  unsigned','line_number':126,'multiline':False]['text':' constexpr int32_t min_val = std::numeric_limits<value_type>::min();','line_number':180,'multiline':False]['text':' constexpr int32_t max_val = std::numeric_limits<value_type>::max();','line_number':181,'multiline':False]['text':' vuint32 vmin = vec_splats(min_val);','line_number':185,'multiline':False]['text':' vuint32 vmax = vec_splats(max_val);','line_number':186,'multiline':False]['text':' namespace','line_number':405,'multiline':False]['text':' namespace vec','line_number':406,'multiline':False]['text':' namespace at','line_number':407,'multiline':False]