['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' See Note [CPU_CAPABILITY namespace]','line_number':14,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':72,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':73,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':74,'multiline':False]['text':' returns an integer mask where all zero elements are translated to 1-bit and others are translated to 0-bit','line_number':96,'multiline':False]['text':' Comparison using the _CMP_**_OQ predicate.','line_number':274,'multiline':False]['text':'   `O`: get false if an operand is NaN','line_number':275,'multiline':False]['text':'   `Q`: do not raise if an operand is NaN','line_number':276,'multiline':False]['text':' frac. Implement this here so we can use subtraction.','line_number':329,'multiline':False]['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':334,'multiline':False]['text':' either input is a NaN.','line_number':335,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':340,'multiline':False]['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':344,'multiline':False]['text':' either input is a NaN.','line_number':345,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':350,'multiline':False]['text':' namespace at::vec::CPU_CAPABILITY','line_number':435,'multiline':False]