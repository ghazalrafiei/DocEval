['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' See Note [CPU_CAPABILITY namespace]','line_number':15,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':105,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':106,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':107,'multiline':False]['text':' returns an integer mask where all zero elements are translated to 1-bit and others are translated to 0-bit','line_number':127,'multiline':False]['text':' constants','line_number':191,'multiline':False]['text':' sign(x)','line_number':200,'multiline':False]['text':' t = 1 / (p * abs(x) + 1)','line_number':203,'multiline':False]['text':' r = p5 * t ^ 4 + p4 * t ^ 3 + p3 * t ^ 2 + p2 * t + p1','line_number':206,'multiline':False]['text':' - exp(- x * x)','line_number':211,'multiline':False]['text':' auto tmp4 = exp(neg_pow_2);','line_number':214,'multiline':False]['text':' erf(x) = sign(x) * (1 - r * t * exp(- x * x))','line_number':217,'multiline':False]['text':' A faster version of exp with ULP=20','line_number':238,'multiline':False]['text':' 1/factorial(1)','line_number':240,'multiline':False]['text':' 1/factorial(2)','line_number':242,'multiline':False]['text':' 1/factorial(3)','line_number':244,'multiline':False]['text':' 1/factorial(4)','line_number':246,'multiline':False]['text':' 1/factorial(5)','line_number':248,'multiline':False]['text':' log2(e)','line_number':250,'multiline':False]['text':' ln(2)','line_number':255,'multiline':False]['text':' exp(x) =','line_number':261,'multiline':False]['text':' = exp(n * ln(2) + r) // divide x by ln(2) and get quot and rem','line_number':262,'multiline':False]['text':' = 2^n * exp(r) // simplify the exp(n*ln(2)) expression','line_number':263,'multiline':False]['text':'_CMP_LT_OS','line_number':266,'multiline':True]['text':' fx = floorf(x * log2ef + 0.5)','line_number':270,'multiline':False]['text':' x = x - fx * ln2','line_number':276,'multiline':False]['text':' compute polynomial','line_number':279,'multiline':False]['text':' compute 2^(n-1)','line_number':287,'multiline':False]['text':' y = y * 2^n','line_number':296,'multiline':False]['text':' Comparison using the _CMP_**_OQ predicate.','line_number':400,'multiline':False]['text':'   `O`: get false if an operand is NaN','line_number':401,'multiline':False]['text':'   `Q`: do not raise if an operand is NaN','line_number':402,'multiline':False]['text':' frac. Implement this here so we can use subtraction','line_number':467,'multiline':False]['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':472,'multiline':False]['text':' either input is a NaN.','line_number':473,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':481,'multiline':False]['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':485,'multiline':False]['text':' either input is a NaN.','line_number':486,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':494,'multiline':False]['text':' TODO(jgong5): rewrite with ATEN vectorized (need to add unpack and shuffle)','line_number':575,'multiline':False]['text':' Used by Inductor CPP codegen','line_number':576,'multiline':False]['text':' Code referred to FBGEMM:','line_number':577,'multiline':False]['text':' https://github.com/pytorch/FBGEMM/blob/39a423e4ad1a04b77fea81c7d09c3e6f8984fae9/src/UtilsAvx512.cc#LL19C6-L19C6','line_number':578,'multiline':False]['text':' 16 * 6 = 96 instructions','line_number':579,'multiline':False]['text':' load from src to registers','line_number':586,'multiline':False]['text':' a: a0  a1  a2  a3  a4  a5  a6  a7  a8  a9  a10 a11 a12 a13 a14 a15','line_number':587,'multiline':False]['text':' b: b0  b1  b2  b3  b4  b5  b6  b7  b8  b9  b10 b11 b12 b13 b14 b15','line_number':588,'multiline':False]['text':' c: c0  c1  c2  c3  c4  c5  c6  c7  c8  c9  c10 c11 c12 c13 c14 c15','line_number':589,'multiline':False]['text':' d: d0  d1  d2  d3  d4  d5  d6  d7  d8  d9  d10 d11 d12 d13 d14 d15','line_number':590,'multiline':False]['text':' e: e0  e1  e2  e3  e4  e5  e6  e7  e8  e9  e10 e11 e12 e13 e14 e15','line_number':591,'multiline':False]['text':' f: f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15','line_number':592,'multiline':False]['text':' g: g0  g1  g2  g3  g4  g5  g6  g7  g8  g9  g10 g11 g12 g13 g14 g15','line_number':593,'multiline':False]['text':' h: h0  h1  h2  h3  h4  h5  h6  h7  h8  h9  h10 h11 h12 h13 h14 h15','line_number':594,'multiline':False]['text':' i: i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i10 i11 i12 i13 i14 i15','line_number':595,'multiline':False]['text':' j: j0  j1  j2  j3  j4  j5  j6  j7  j8  j9  j10 j11 j12 j13 j14 j15','line_number':596,'multiline':False]['text':' k: k0  k1  k2  k3  k4  k5  k6  k7  k8  k9  k10 k11 k12 k13 k14 k15','line_number':597,'multiline':False]['text':' l: l0  l1  l2  l3  l4  l5  l6  l7  l8  l9  l10 l11 l12 l13 l14 l15','line_number':598,'multiline':False]['text':' m: m0  m1  m2  m3  m4  m5  m6  m7  m8  m9  m10 m11 m12 m13 m14 m15','line_number':599,'multiline':False]['text':' n: n0  n1  n2  n3  n4  n5  n6  n7  n8  n9  n10 n11 n12 n13 n14 n15','line_number':600,'multiline':False]['text':' o: o0  o1  o2  o3  o4  o5  o6  o7  o8  o9  o10 o11 o12 o13 o14 o15','line_number':601,'multiline':False]['text':' p: p0  p1  p2  p3  p4  p5  p6  p7  p8  p9  p10 p11 p12 p13 p14 p15','line_number':602,'multiline':False]['text':' unpacking and interleaving 32-bit elements','line_number':621,'multiline':False]['text':' a0  b0  a1  b1  a4  b4  a5  b5  a8  b8  a9  b9  a12  b12 a13 b13','line_number':622,'multiline':False]['text':' a2  b2  a3  b3  a6  b6  a7  b7  a10 b10 a11 b11 a14  b14 a15 b15','line_number':623,'multiline':False]['text':' c0  d0  c1  d1 ...','line_number':624,'multiline':False]['text':' c2  d2  c3  d3 ...','line_number':625,'multiline':False]['text':' e0  f0  e1  f1 ...','line_number':626,'multiline':False]['text':' e2  f2  e3  f3 ...','line_number':627,'multiline':False]['text':' g0  h0  g1  h1 ...','line_number':628,'multiline':False]['text':' g2  h2  g3  h3 ...','line_number':629,'multiline':False]['text':' i0  ...','line_number':630,'multiline':False]['text':' i2  ...','line_number':631,'multiline':False]['text':' k0  ...','line_number':632,'multiline':False]['text':' k2  ...','line_number':633,'multiline':False]['text':' m0  ...','line_number':634,'multiline':False]['text':' m2  ...','line_number':635,'multiline':False]['text':' o0  ...','line_number':636,'multiline':False]['text':' o1  ...','line_number':637,'multiline':False]['text':' unpacking and interleaving 64-bit elements','line_number':655,'multiline':False]['text':'  a0  b0  c0  d0  a4  b4  c4  d4  a8  b8  c8  d8  a12 b12 c12 d12','line_number':656,'multiline':False]['text':'  a1  b1  c1  d1 ...','line_number':657,'multiline':False]['text':'  a2  b2  c2  d2 ...','line_number':658,'multiline':False]['text':'  a3  b3  c3  d3 ...','line_number':659,'multiline':False]['text':'  e0  f0  g0  h0  e4  f4  g4  h4  e8  f8  g8  h8  e12 f12 g12 h12','line_number':660,'multiline':False]['text':'  e1  f1  g1  h1 ...','line_number':661,'multiline':False]['text':'  e2  f2  g2  h2 ...','line_number':662,'multiline':False]['text':'  e3  f3  g3  h3 ...','line_number':663,'multiline':False]['text':'  i0  j0  k0  l0 ...','line_number':664,'multiline':False]['text':'  i1  j1  k1  l1 ...','line_number':665,'multiline':False]['text':'  i2  j2  k2  l2 ...','line_number':666,'multiline':False]['text':'  i3  j3  k3  l3 ...','line_number':667,'multiline':False]['text':'  m0  n0  o0  p0 ...','line_number':668,'multiline':False]['text':'  m1  n1  o1  p1 ...','line_number':669,'multiline':False]['text':'  m2  n2  o2  p2 ...','line_number':670,'multiline':False]['text':'  m3  n3  o3  p3 ...','line_number':671,'multiline':False]['text':'  shuffle 128-bits (composed of 4 32-bit elements)','line_number':705,'multiline':False]['text':'  a0  b0  c0  d0  a8  b8  c8  d8  e0  f0  g0  h0  e8  f8  g8  h8','line_number':706,'multiline':False]['text':'  a1  b1  c1  d1 ...','line_number':707,'multiline':False]['text':'  a2  b2  c2  d2 ...','line_number':708,'multiline':False]['text':'  a3  b3  c3  d3 ...','line_number':709,'multiline':False]['text':'  a4  b4  c4  d4 ...','line_number':710,'multiline':False]['text':'  a5  b5  c5  d5 ...','line_number':711,'multiline':False]['text':'  a6  b6  c6  d6 ...','line_number':712,'multiline':False]['text':'  a7  b7  c7  d7 ...','line_number':713,'multiline':False]['text':'  i0  j0  k0  l0  i8  j8  k8  l8  m0  n0  o0  p0  m8  n8  o8  p8','line_number':714,'multiline':False]['text':'  i1  j1  k1  l1 ...','line_number':715,'multiline':False]['text':'  i2  j2  k2  l2 ...','line_number':716,'multiline':False]['text':'  i3  j3  k3  l3 ...','line_number':717,'multiline':False]['text':'  i4  j4  k4  l4 ...','line_number':718,'multiline':False]['text':'  i5  j5  k5  l5 ...','line_number':719,'multiline':False]['text':'  i6  j6  k6  l6 ...','line_number':720,'multiline':False]['text':'  i7  j7  k7  l7 ...','line_number':721,'multiline':False]['text':'  shuffle 128-bits (composed of 4 32-bit elements)','line_number':739,'multiline':False]['text':'  a0  b0  c0  d0  ...  o0','line_number':740,'multiline':False]['text':'  a1  b1  c1  d1  ...  o1','line_number':741,'multiline':False]['text':'  a2  b2  c2  d2  ...  o2','line_number':742,'multiline':False]['text':'  a3  b3  c3  d3  ...  o3','line_number':743,'multiline':False]['text':'  a4  ...','line_number':744,'multiline':False]['text':'  a5  ...','line_number':745,'multiline':False]['text':'  a6  ...','line_number':746,'multiline':False]['text':'  a7  ...','line_number':747,'multiline':False]['text':'  a8  ...','line_number':748,'multiline':False]['text':'  a9  ...','line_number':749,'multiline':False]['text':'  a10 ...','line_number':750,'multiline':False]['text':'  a11 ...','line_number':751,'multiline':False]['text':'  a12 ...','line_number':752,'multiline':False]['text':'  a13 ...','line_number':753,'multiline':False]['text':'  a14 ...','line_number':754,'multiline':False]['text':'  a15 b15 c15 d15 ...  o15','line_number':755,'multiline':False]['text':' store from registers to dst','line_number':773,'multiline':False]