['text':' See Note [CPU_CAPABILITY namespace]','line_number':11,'multiline':False]['text':' generated masks','line_number':107,'multiline':False]['text':' generated masks','line_number':116,'multiline':False]['text':' convert std::complex<V> index mask to V index mask: xy -> xxyy','line_number':145,'multiline':False]['text':' we will simulate it differently with 6 instructions total','line_number':244,'multiline':False]['text':' lets permute second so that we can add it getting horizontal sums','line_number':245,'multiline':False]['text':' 2perm','line_number':246,'multiline':False]['text':' 2perm','line_number':247,'multiline':False]['text':' sum','line_number':248,'multiline':False]['text':' 2add','line_number':249,'multiline':False]['text':' 2 add','line_number':250,'multiline':False]['text':' now lets choose evens','line_number':251,'multiline':False]['text':' 2 mergee's','line_number':252,'multiline':False]['text':' we will simulate it differently with 6 instructions total','line_number':258,'multiline':False]['text':' lets permute second so that we can add it getting horizontal sums','line_number':259,'multiline':False]['text':' 2perm','line_number':260,'multiline':False]['text':' 2perm','line_number':261,'multiline':False]['text':' sum','line_number':262,'multiline':False]['text':' 2sub','line_number':263,'multiline':False]['text':' 2 sub','line_number':264,'multiline':False]['text':' now lets choose evens','line_number':265,'multiline':False]['text':' 2 mergee's','line_number':266,'multiline':False]['text':' we can use swap_mask or sldwi','line_number':295,'multiline':False]['text':' Most trigonomic ops use the log() op to improve complex number','line_number':309,'multiline':False]['text':' performance.','line_number':310,'multiline':False]['text':' log2eB_inv','line_number':315,'multiline':False]['text':' as mergee phased in , we can use vec_perm with mask','line_number':335,'multiline':False]['text':' as mergeo phased in , we can use vec_perm with mask','line_number':340,'multiline':False]['text':' as mergee phased in , we can use vec_perm with mask','line_number':355,'multiline':False]['text':' angle = atan2(b/a)','line_number':362,'multiline':False]['text':' auto b_a = _mm256_permute_ps(values, 0xB1); // b        a','line_number':363,'multiline':False]['text':' return Sleef_atan2f8_u10(values, b_a); // 90-angle angle','line_number':364,'multiline':False]['text':' re + im*i = (a + bi)  / (c + di)','line_number':421,'multiline':False]['text':' re = (ac + bd)/abs_2() = c/abs_2()','line_number':422,'multiline':False]['text':' im = (bc - ad)/abs_2() = d/abs_2()','line_number':423,'multiline':False]['text':' c       -d','line_number':424,'multiline':False]['text':' atan(x) = i/2 * ln((i + z)/(i - z))','line_number':445,'multiline':False]['text':' ln((i + z)/(i - z))','line_number':449,'multiline':False]['text':' i/2*ln()','line_number':450,'multiline':False]['text':' acos(x) = pi/2 - asin(x)','line_number':457,'multiline':False]['text':'(a + bi)  * (c + di) = (ac - bd) + (ad + bc)i','line_number':462,'multiline':False]['text':' this is more vsx friendly than simulating horizontal from x86','line_number':465,'multiline':False]['text':' re + im*i = (a + bi)  / (c + di)','line_number':487,'multiline':False]['text':' re = (ac + bd)/abs_2()','line_number':488,'multiline':False]['text':' im = (bc - ad)/abs_2()','line_number':489,'multiline':False]['text':' Vectorized x86 simulation','line_number':500,'multiline':False]['text':' asin(x)','line_number':513,'multiline':False]['text':' = -i*ln(iz + sqrt(1 -z^2))','line_number':514,'multiline':False]['text':' = -i*ln((ai - b) + sqrt(1 - (a + bi)*(a + bi)))','line_number':515,'multiline':False]['text':' = -i*ln((-b + ai) + sqrt(1 - (a**2 - b**2) - 2*abi))','line_number':516,'multiline':False]['text':' compares real and imag individually','line_number':546,'multiline':False]['text':' If both real numbers and imag numbers are equal, then the complex numbers are equal','line_number':547,'multiline':False]['text':' compares real and imag individually','line_number':551,'multiline':False]['text':' If either real numbers or imag numbers are not equal, then the complex numbers are not equal','line_number':552,'multiline':False]['text':' elementwise helpers','line_number':584,'multiline':False]['text':' auto mask = _mm256_cmp_ps(abs_a, abs_b, _CMP_LT_OQ);','line_number':599,'multiline':False]['text':' auto max = _mm256_blendv_ps(a, b, mask);','line_number':600,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':605,'multiline':False]['text':' auto isnan = _mm256_cmp_ps(abs_a, abs_b, _CMP_UNORD_Q);','line_number':606,'multiline':False]['text':' return _mm256_or_ps(max, isnan);','line_number':607,'multiline':False]['text':' auto mask = _mm256_cmp_ps(abs_a, abs_b, _CMP_GT_OQ);','line_number':616,'multiline':False]['text':' auto min = _mm256_blendv_ps(a, b, mask);','line_number':617,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':621,'multiline':False]['text':' auto isnan = _mm256_cmp_ps(abs_a, abs_b, _CMP_UNORD_Q);','line_number':622,'multiline':False]['text':' return _mm256_or_ps(min, isnan);','line_number':623,'multiline':False]['text':' namespace','line_number':626,'multiline':False]['text':' namespace vec','line_number':627,'multiline':False]['text':' namespace at','line_number':628,'multiline':False]