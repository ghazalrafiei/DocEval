['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' BFloat16 specification','line_number':10,'multiline':False]['text':' This is different from at::acc_type since we only need to specialize BFloat16','line_number':15,'multiline':False]['text':' Vector conversion between float and bfloat16/half','line_number':19,'multiline':False]['text':' Note that we already have specialized member of Vectorized<scalar_t> for BFloat16','line_number':48,'multiline':False]['text':' so the following functions would run smoothly:','line_number':49,'multiline':False]['text':'   using Vec = Vectorized<BFloat16>;','line_number':50,'multiline':False]['text':'   Vec one = Vec(BFloat16(1));','line_number':51,'multiline':False]['text':'   vec::map([](Vec x) { return one / (one + x.exp()); }, y_ptr, x_ptr, N);','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' Then why we still need to specialize "functional"?','line_number':54,'multiline':False]['text':'   If we do specialization at Vectorized<> level, the above example would need 3 pairs of','line_number':55,'multiline':False]['text':'   conversion of bf16->fp32/fp32->bf16, each for ".exp()", "+" and "/".','line_number':56,'multiline':False]['text':'   If we do specialization at vec::map<>() level, we have only 1 pair of conversion','line_number':57,'multiline':False]['text':'   of bf16->fp32/fp32->bf16, for the input and output BFloat16 vector only.','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' The following BFloat16 functionality will only do data type conversion for input','line_number':60,'multiline':False]['text':' and output vector (reduce functionality will only convert the final scalar back to bf16).','line_number':61,'multiline':False]['text':' Compared to Vectorized<> specialization,','line_number':62,'multiline':False]['text':'   1. better performance since we have less data type conversion;','line_number':63,'multiline':False]['text':'   2. less rounding error since immediate results are kept in fp32;','line_number':64,'multiline':False]['text':'   3. accumulation done on data type of fp32.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':'  If you plan to extend this file, please ensure adding unit tests at','line_number':67,'multiline':False]['text':'    aten/src/ATen/test/vec_test_all_types.cpp','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' choose to align with behaviour of bVec::loadu(ptr, size),','line_number':431,'multiline':False]['text':' which leaves data_fvec1 uninitialized','line_number':432,'multiline':False]['text':' namespace at::vec','line_number':574,'multiline':False]