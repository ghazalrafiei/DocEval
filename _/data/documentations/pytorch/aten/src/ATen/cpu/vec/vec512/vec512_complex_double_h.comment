['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' See Note [CPU_CAPABILITY namespace]','line_number':16,'multiline':False]['text':' convert c10::complex<V> index mask to V index mask: xy -> xxyy','line_number':52,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-warning)','line_number':53,'multiline':False]['text':'b0000 0001 = b0000 0011','line_number':58,'multiline':False]['text':'b0000 0010 = b0000 1100','line_number':60,'multiline':False]['text':'b0000 0011 = b0000 1111','line_number':62,'multiline':False]['text':'b0000 0100 = b0011 0000','line_number':64,'multiline':False]['text':'b0000 0101 = b0011 0011','line_number':66,'multiline':False]['text':'b0000 0110 = b0011 1100','line_number':68,'multiline':False]['text':'b0000 0111 = b0011 1111','line_number':70,'multiline':False]['text':'b0000 1000 = b1100 0000','line_number':72,'multiline':False]['text':'b0000 1001 = b1100 0011','line_number':74,'multiline':False]['text':'b0000 1010 = b1100 1100','line_number':76,'multiline':False]['text':'b0000 1011 = b1100 1111','line_number':78,'multiline':False]['text':'b0000 1100 = b1111 0000','line_number':80,'multiline':False]['text':'b0000 1101 = b1111 0011','line_number':82,'multiline':False]['text':'b0000 1110 = b1111 1100','line_number':84,'multiline':False]['text':'b0000 1111 = b1111 1111','line_number':86,'multiline':False]['text':' convert c10::complex<V> index mask to V index mask: xy -> xxyy','line_number':93,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':127,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':128,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':129,'multiline':False]['text':' AVX512 doesn't have horizontal add & horizontal sub instructions.','line_number':158,'multiline':False]['text':' TODO: hadd_pd() & hsub_pd() may have scope for improvement.','line_number':159,'multiline':False]['text':' a*a     b*b','line_number':173,'multiline':False]['text':' a*a+b*b a*a+b*b','line_number':174,'multiline':False]['text':' real real','line_number':177,'multiline':False]['text':' movehdup_pd does not exist...','line_number':178,'multiline':False]['text':' imag imag','line_number':179,'multiline':False]['text':' abs  abs','line_number':180,'multiline':False]['text':' abs     0','line_number':187,'multiline':False]['text':'angle = atan2(b/a)','line_number':190,'multiline':False]['text':' b        a','line_number':191,'multiline':False]['text':' 90-angle angle','line_number':192,'multiline':False]['text':' angle    90-angle','line_number':199,'multiline':False]['text':' angle    0','line_number':200,'multiline':False]['text':'b        a','line_number':227,'multiline':False]['text':' a       -b','line_number':231,'multiline':False]['text':' Most trigonomic ops use the log() op to improve complex number performance.','line_number':237,'multiline':False]['text':' asin(x)','line_number':252,'multiline':False]['text':' = -i*ln(iz + sqrt(1 -z^2))','line_number':253,'multiline':False]['text':' = -i*ln((ai - b) + sqrt(1 - (a + bi)*(a + bi)))','line_number':254,'multiline':False]['text':' = -i*ln((-b + ai) + sqrt(1 - (a**2 - b**2) - 2*abi))','line_number':255,'multiline':False]['text':'-b        a','line_number':259,'multiline':False]['text':'-ab       -ab','line_number':260,'multiline':False]['text':'-2ab      -2ab','line_number':261,'multiline':False]['text':' a*a      b*b','line_number':263,'multiline':False]['text':' a*a-b*b  b*b-a*a','line_number':264,'multiline':False]['text':'sqrt(re + i*im)','line_number':267,'multiline':False]['text':'ln(iz + sqrt())','line_number':268,'multiline':False]['text':'-i*ln()','line_number':269,'multiline':False]['text':' acos(x) = pi/2 - asin(x)','line_number':272,'multiline':False]['text':'exp(a + bi)','line_number':282,'multiline':False]['text':' = exp(a)*(cos(b) + sin(b)i)','line_number':283,'multiline':False]['text':'exp(a)           exp(b)','line_number':284,'multiline':False]['text':'exp(a)           exp(a)','line_number':285,'multiline':False]['text':'[sin(a), cos(a)] [sin(b), cos(b)]','line_number':287,'multiline':False]['text':'cos(b)           sin(b)','line_number':289,'multiline':False]['text':' Use identity 2**x = exp(log(2) * x)','line_number':293,'multiline':False]['text':' Comparison using the _CMP_**_OQ predicate.','line_number':352,'multiline':False]['text':'   `O`: get false if an operand is NaN','line_number':353,'multiline':False]['text':'   `Q`: do not raise if an operand is NaN','line_number':354,'multiline':False]['text':'(a + bi)  * (c + di) = (ac - bd) + (ad + bc)i','line_number':394,'multiline':False]['text':'ac       bd','line_number':396,'multiline':False]['text':'d        c','line_number':398,'multiline':False]['text':'d       -c','line_number':399,'multiline':False]['text':'ad      -bc','line_number':400,'multiline':False]['text':'ac - bd  ad + bc','line_number':402,'multiline':False]['text':'re + im*i = (a + bi)  / (c + di)','line_number':408,'multiline':False]['text':' |c|    |d|','line_number':410,'multiline':False]['text':' |d|    |c|','line_number':411,'multiline':False]['text':' 1/sc     1/sc','line_number':412,'multiline':False]['text':' a/sc     b/sc','line_number':413,'multiline':False]['text':' c/sc     d/sc','line_number':414,'multiline':False]['text':' d/sc         c/sc','line_number':418,'multiline':False]['text':' -d/|c,d|        c/sc','line_number':419,'multiline':False]['text':'-ad/sc^2      bc/sc^2','line_number':420,'multiline':False]['text':'(ac+bd)/sc^2  (bc-ad)/sc^2','line_number':421,'multiline':False]['text':' get the denominator','line_number':423,'multiline':False]['text':' (c^2+d^2)/sc^2   (c^2+d^2)/sc^2','line_number':424,'multiline':False]['text':' reciprocal. Implement this here so we can use multiplication.','line_number':429,'multiline':False]['text':'re + im*i = (a + bi)  / (c + di)','line_number':431,'multiline':False]['text':'re = (ac + bd)/abs_2() = c/abs_2()','line_number':432,'multiline':False]['text':'im = (bc - ad)/abs_2() = d/abs_2()','line_number':433,'multiline':False]['text':'c       -d','line_number':435,'multiline':False]['text':' atan(x) = i/2 * ln((i + z)/(i - z))','line_number':440,'multiline':False]['text':' a        1+b','line_number':444,'multiline':False]['text':' -a       1-b','line_number':445,'multiline':False]['text':' ln((i + z)/(i - z))','line_number':446,'multiline':False]['text':' i/2*ln()','line_number':447,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':458,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':473,'multiline':False]['text':' compares real and imag individually','line_number':499,'multiline':False]['text':' If both real numbers and imag numbers are equal, then the complex numbers are equal','line_number':500,'multiline':False]['text':' compares real and imag individually','line_number':505,'multiline':False]['text':' If either real numbers or imag numbers are not equal, then the complex numbers are not equal','line_number':506,'multiline':False]