['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' See Note [CPU_CAPABILITY namespace]','line_number':15,'multiline':False]['text':' values needs to be public for compilation with clang','line_number':24,'multiline':False]['text':' as vec512.h uses it','line_number':25,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':88,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':89,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':90,'multiline':False]['text':' returns an integer mask where all zero elements are translated to 1-bit and others are translated to 0-bit','line_number':112,'multiline':False]['text':' Comparison using the _CMP_**_OQ predicate.','line_number':295,'multiline':False]['text':'   `O`: get false if an operand is NaN','line_number':296,'multiline':False]['text':'   `Q`: do not raise if an operand is NaN','line_number':297,'multiline':False]['text':' frac. Implement this here so we can use subtraction.','line_number':362,'multiline':False]['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':367,'multiline':False]['text':' either input is a NaN.','line_number':368,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':376,'multiline':False]['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':380,'multiline':False]['text':' either input is a NaN.','line_number':381,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':389,'multiline':False]