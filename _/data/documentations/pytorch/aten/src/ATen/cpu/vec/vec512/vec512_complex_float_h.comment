['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]['text':' See Note [CPU_CAPABILITY namespace]','line_number':16,'multiline':False]['text':' convert c10::complex<V> index mask to V index mask: xy -> xxyy','line_number':64,'multiline':False]['text':' The compiler would hopefully convert this switch condition','line_number':66,'multiline':False]['text':' into a jump table','line_number':67,'multiline':False]['text':' convert c10::complex<V> index mask to V index mask: xy -> xxyy','line_number':586,'multiline':False]['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':632,'multiline':False]['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':633,'multiline':False]['text':' instructions while a loop would be compiled to one instruction.','line_number':634,'multiline':False]['text':' AVX512 doesn't have horizontal add & horizontal sub instructions.','line_number':653,'multiline':False]['text':' TODO: hadd_pd() & hsub_pd() may have scope for improvement.','line_number':654,'multiline':False]['text':' a*a     b*b','line_number':678,'multiline':False]['text':' a*a+b*b a*a+b*b','line_number':679,'multiline':False]['text':' real real','line_number':683,'multiline':False]['text':' imag imag','line_number':684,'multiline':False]['text':' abs  abs','line_number':685,'multiline':False]['text':' abs     0','line_number':692,'multiline':False]['text':'angle = atan2(b/a)','line_number':695,'multiline':False]['text':' b        a','line_number':696,'multiline':False]['text':' 90-angle angle','line_number':697,'multiline':False]['text':' angle    90-angle','line_number':704,'multiline':False]['text':' angle    0','line_number':705,'multiline':False]['text':'b        a','line_number':732,'multiline':False]['text':' a       -b','line_number':737,'multiline':False]['text':' Most trigonomic ops use the log() op to improve complex number performance.','line_number':743,'multiline':False]['text':' asin(x)','line_number':758,'multiline':False]['text':' = -i*ln(iz + sqrt(1 -z^2))','line_number':759,'multiline':False]['text':' = -i*ln((ai - b) + sqrt(1 - (a + bi)*(a + bi)))','line_number':760,'multiline':False]['text':' = -i*ln((-b + ai) + sqrt(1 - (a**2 - b**2) - 2*abi))','line_number':761,'multiline':False]['text':'-b        a','line_number':765,'multiline':False]['text':'-ab       -ab','line_number':766,'multiline':False]['text':'-2ab      -2ab','line_number':767,'multiline':False]['text':' a*a      b*b','line_number':769,'multiline':False]['text':' a*a-b*b  b*b-a*a','line_number':770,'multiline':False]['text':'sqrt(re + i*im)','line_number':773,'multiline':False]['text':'ln(iz + sqrt())','line_number':774,'multiline':False]['text':'-i*ln()','line_number':775,'multiline':False]['text':'exp(a + bi)','line_number':785,'multiline':False]['text':' = exp(a)*(cos(b) + sin(b)i)','line_number':786,'multiline':False]['text':'exp(a)           exp(b)','line_number':787,'multiline':False]['text':'exp(a)           exp(a)','line_number':788,'multiline':False]['text':'[sin(a), cos(a)] [sin(b), cos(b)]','line_number':790,'multiline':False]['text':'cos(b)           sin(b)','line_number':792,'multiline':False]['text':' Use identity 2**x = exp(log(2) * x)','line_number':796,'multiline':False]['text':' Comparison using the _CMP_**_OQ predicate.','line_number':855,'multiline':False]['text':'   `O`: get false if an operand is NaN','line_number':856,'multiline':False]['text':'   `Q`: do not raise if an operand is NaN','line_number':857,'multiline':False]['text':'(a + bi)  * (c + di) = (ac - bd) + (ad + bc)i','line_number':895,'multiline':False]['text':'ac       bd','line_number':898,'multiline':False]['text':'d        c','line_number':900,'multiline':False]['text':'d       -c','line_number':901,'multiline':False]['text':'ad      -bc','line_number':902,'multiline':False]['text':'ac - bd  ad + bc','line_number':904,'multiline':False]['text':'re + im*i = (a + bi)  / (c + di)','line_number':910,'multiline':False]['text':' |c|    |d|','line_number':912,'multiline':False]['text':' |d|    |c|','line_number':913,'multiline':False]['text':' 1/sc     1/sc','line_number':914,'multiline':False]['text':' a/sc     b/sc','line_number':915,'multiline':False]['text':' c/sc     d/sc','line_number':916,'multiline':False]['text':' d/sc         c/sc','line_number':921,'multiline':False]['text':' -d/|c,d|        c/sc','line_number':922,'multiline':False]['text':'-ad/sc^2      bc/sc^2','line_number':923,'multiline':False]['text':'(ac+bd)/sc^2  (bc-ad)/sc^2','line_number':924,'multiline':False]['text':' get the denominator','line_number':926,'multiline':False]['text':' (c^2+d^2)/sc^2   (c^2+d^2)/sc^2','line_number':927,'multiline':False]['text':' reciprocal. Implement this here so we can use multiplication.','line_number':932,'multiline':False]['text':'re + im*i = (a + bi)  / (c + di)','line_number':934,'multiline':False]['text':'re = (ac + bd)/abs_2() = c/abs_2()','line_number':935,'multiline':False]['text':'im = (bc - ad)/abs_2() = d/abs_2()','line_number':936,'multiline':False]['text':'c       -d','line_number':939,'multiline':False]['text':' atan(x) = i/2 * ln((i + z)/(i - z))','line_number':944,'multiline':False]['text':' a        1+b','line_number':950,'multiline':False]['text':' -a       1-b','line_number':951,'multiline':False]['text':' ln((i + z)/(i - z))','line_number':952,'multiline':False]['text':' i/2*ln()','line_number':953,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':964,'multiline':False]['text':' Exploit the fact that all-ones is a NaN.','line_number':978,'multiline':False]['text':' compares real and imag individually','line_number':1004,'multiline':False]['text':' If both real numbers and imag numbers are equal, then the complex numbers are equal','line_number':1005,'multiline':False]['text':' compares real and imag individually','line_number':1011,'multiline':False]['text':' If either real numbers or imag numbers are not equal, then the complex numbers are not equal','line_number':1012,'multiline':False]