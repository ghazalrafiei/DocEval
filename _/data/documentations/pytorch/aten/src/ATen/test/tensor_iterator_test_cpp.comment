['text':' An operation with a CUDA tensor and CPU scalar should keep the scalar','line_number':10,'multiline':False]['text':' on the CPU (and lift it to a parameter).','line_number':11,'multiline':False]['text':' Verifies multiple zero-dim CPU inputs are not coerced to CUDA','line_number':23,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':29,'multiline':False]['text':' Mixing CPU and CUDA tensors should raise an exception (if the CPU tensor isn't zero-dim)','line_number':33,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':39,'multiline':False]['text':' The alternative way to calculate a < b is (b - a).clamp(0).toBool()','line_number':130,'multiline':False]['text':' To prevent an overflow in subtraction (b - a) for unsigned types(unit, bool)','line_number':131,'multiline':False]['text':' we will convert in to int first','line_number':132,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables,hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':150,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables,hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':152,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables,hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':154,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':216,'multiline':False]