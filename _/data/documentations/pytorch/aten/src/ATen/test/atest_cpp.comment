['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':21,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':23,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':25,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':27,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':29,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':31,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':33,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':35,'multiline':False]['text':' test dtype = kInt','line_number':40,'multiline':False]['text':' test dtype = kFloat','line_number':41,'multiline':False]['text':' test dtype = kBool','line_number':42,'multiline':False]['text':' namespace BinaryOpsKernel','line_number':43,'multiline':False]['text':'
  template function for running binary operator test
  - exp: expected output
  - func: function to be tested
  - option: 3 bits,
    - 1st bit: Test op over integer tensors
    - 2nd bit: Test op over float tensors
    - 3rd bit: Test op over boolean tensors
    For example, if function should be tested over integer/boolean but not for
    float, option will be 1 * 1 + 0 * 2 + 1 * 4 = 5. If tested over all the
    type, option should be 7.
','line_number':63,'multiline':True]['text':' Test op over integer tensors','line_number':83,'multiline':False]['text':' Test op over float tensors','line_number':88,'multiline':False]['text':' Test op over boolean tensors','line_number':93,'multiline':False]['text':' ASSERT foo is 2-dimensional and holds floats.','line_number':102,'multiline':False]['text':' only test with type Float','line_number':209,'multiline':False]['text':' TEST_CASE( "atest", "[]" ) {','line_number':222,'multiline':False]['text':' foo = foo[3];','line_number':240,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':253,'multiline':False]['text':' TODO(ezyang): maybe do a more precise exception type.','line_number':269,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':270,'multiline':False]['text':' Attempt to specify the wrong device in from_blob','line_number':299,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':301,'multiline':False]['text':' Infers the correct device','line_number':304,'multiline':False]