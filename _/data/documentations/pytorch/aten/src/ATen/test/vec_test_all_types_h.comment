['text':' start [','line_number':229,'multiline':False]['text':' end is not included. one could use  nextafter for including his end case for tests','line_number':230,'multiline':False]['text':' each argument takes domain Range','line_number':241,'multiline':False]['text':' check with error tolerance','line_number':243,'multiline':False]['text':'only allow when one is inf','line_number':303,'multiline':False]['text':'code was taken from boost','line_number':319,'multiline':False]['text':' Avoid overflow.','line_number':320,'multiline':False]['text':' Avoid underflow.','line_number':324,'multiline':False]['text':' This is to make sure fmod won't cause overflow when doing the div','line_number':424,'multiline':False]['text':' This is to setup a limit to make sure fmadd (a * b + c) won't overflow','line_number':432,'multiline':False]['text':'missing for complex','line_number':470,'multiline':False]['text':'missing for complex','line_number':476,'multiline':False]['text':' min <= (a +b) <= max;','line_number':484,'multiline':False]['text':' min - b <= a  <= max - b','line_number':485,'multiline':False]['text':' min <= (a-b) <= max;','line_number':503,'multiline':False]['text':' min + b <= a  <= max +b','line_number':504,'multiline':False]['text':'missing','line_number':520,'multiline':False]['text':'missing','line_number':526,'multiline':False]['text':'at least consdier zero division','line_number':527,'multiline':False]['text':' correct first;','line_number':541,'multiline':False]['text':' is_zero','line_number':544,'multiline':False]['text':'make it  normal +-3sigma','line_number':619,'multiline':False]['text':' in real its hard to get rounded value','line_number':623,'multiline':False]['text':' so we will force it by  uniform chance','line_number':624,'multiline':False]['text':'make rounded value ,too','line_number':632,'multiline':False]['text':'make it  normal +-3sigma','line_number':664,'multiline':False]['text':' in real its hard to get rounded value','line_number':668,'multiline':False]['text':' so we will force it by  uniform chance','line_number':669,'multiline':False]['text':'make rounded value ,too','line_number':678,'multiline':False]['text':'half coverage for byte','line_number':702,'multiline':False]['text':'2*65536','line_number':706,'multiline':False]['text':'this will be used to check nan, infs, and other special cases','line_number':726,'multiline':False]['text':' if domains is empty we will test default','line_number':741,'multiline':False]['text':' its not used for now','line_number':744,'multiline':False]['text':' test bitlevel','line_number':746,'multiline':False]['text':'map operator','line_number':956,'multiline':False]['text':' test','line_number':959,'multiline':False]['text':' trial','line_number':966,'multiline':False]['text':'inrease Seed','line_number':967,'multiline':False]['text':'map operator','line_number':1016,'multiline':False]['text':' test','line_number':1019,'multiline':False]['text':' trial','line_number':1026,'multiline':False]['text':'map operator','line_number':1082,'multiline':False]['text':' test','line_number':1085,'multiline':False]['text':' trial','line_number':1093,'multiline':False]['text':'(a + bi)  * (c + di) = (ac - bd) + (ad + bc)i','line_number':1169,'multiline':False]['text':'check multiplication considerin swap and fma','line_number':1175,'multiline':False]['text':' replicate order','line_number':1182,'multiline':False]['text':' defined(TEST_AGAINST_DEFAULT) ','line_number':1206,'multiline':True]['text':'re = (ac + bd)/abs_2()','line_number':1207,'multiline':False]['text':'im = (bc - ad)/abs_2()','line_number':1208,'multiline':False]['text':' a/sc','line_number':1219,'multiline':False]['text':' b/sc','line_number':1220,'multiline':False]['text':' c/sc','line_number':1221,'multiline':False]['text':' d/sc','line_number':1222,'multiline':False]['text':' ac/sc^2','line_number':1224,'multiline':False]['text':' bd/sc^2','line_number':1225,'multiline':False]['text':' -d/sc^2','line_number':1227,'multiline':False]['text':' -ad/sc^2','line_number':1229,'multiline':False]['text':' bc/sc^2','line_number':1230,'multiline':False]['text':' (ac+bd)/sc^2','line_number':1232,'multiline':False]['text':' (bc-ad)/sc^2','line_number':1233,'multiline':False]['text':' c^2/sc^2','line_number':1235,'multiline':False]['text':' d^2/sc^2','line_number':1236,'multiline':False]['text':' (c^2+d^2)/sc^2','line_number':1238,'multiline':False]['text':' (ac+bd)/(c^2+d^2)','line_number':1240,'multiline':False]['text':' (bc-ad)/(c^2+d^2)','line_number':1241,'multiline':False]['text':' defined(CPU_CAPABILITY_ZVECTOR) ','line_number':1244,'multiline':True]['text':'check multiplication considerin swap and fma','line_number':1246,'multiline':False]['text':'b.abs_2','line_number':1252,'multiline':False]['text':' defined(CPU_CAPABILITY_VSX) ','line_number':1253,'multiline':True]['text':' defined(CPU_CAPABILITY_VSX) ','line_number':1260,'multiline':True]['text':'b.abs_2()','line_number':1261,'multiline':False]['text':' defined(CPU_CAPABILITY_ZVECTOR) ','line_number':1268,'multiline':True]['text':' defined(TEST_AGAINST_DEFAULT) ','line_number':1269,'multiline':True]['text':'when negated scale is used as addition','line_number':1404,'multiline':False]['text':'default testing case','line_number':1430,'multiline':False]['text':'for float types lets add manual ranges','line_number':1451,'multiline':False]['text':'for float types lets add manual ranges','line_number':1479,'multiline':False]