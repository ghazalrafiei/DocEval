['text':' Converts dim to an positional index. Errors if `dim` cannot be used to','line_number':20,'multiline':False]['text':' refer to any dimension of tensor.','line_number':21,'multiline':False]['text':' Unifies two DimnameList to produce a third. This is useful for implementing','line_number':27,'multiline':False]['text':' the named inference rule for binary broadcasting operations like add.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' There are three main constraints:','line_number':30,'multiline':False]['text':' 1) Check matching: Names must match positionally from the right.','line_number':31,'multiline':False]['text':' 2) Check misaligned: If a name `n` is in `names`, then it must appear at','line_number':32,'multiline':False]['text':'    the same index from the right in other.','line_number':33,'multiline':False]['text':' 3) The output names are obtained by unifying the names individually from the','line_number':34,'multiline':False]['text':' right.','line_number':35,'multiline':False]['text':' [NOTE] Writing name inference rules','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Operators that support named tensors are either composed of operations that','line_number':52,'multiline':False]['text':' support named tensors or implement some name inference rule. An op that','line_number':53,'multiline':False]['text':' implements its own name inference rule generally looks like the following:','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' Tensor op(...) {','line_number':56,'multiline':False]['text':'   perform_shape_checks(...);','line_number':57,'multiline':False]['text':'   # (1)','line_number':58,'multiline':False]['text':'   auto maybe_outnames = compute_outnames(...);','line_number':59,'multiline':False]['text':'   auto result = [&]() {','line_number':60,'multiline':False]['text':'     NoNamesGuard guard;','line_number':61,'multiline':False]['text':'     return op_impl(...);','line_number':62,'multiline':False]['text':'   }();','line_number':63,'multiline':False]['text':'   # (2)','line_number':64,'multiline':False]['text':'   propagate_names_if_nonempty(result, maybe_outnames);','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Each op has (1) a compute outnames step and (2) a propagate names step.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' compute_outnames is responsible for checking that input names match and','line_number':69,'multiline':False]['text':' determining what the output names should be. It returns either:','line_number':70,'multiline':False]['text':' - {} (if the inputs tensors are all unnamed)','line_number':71,'multiline':False]['text':' - non-empty outnames.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' propagate_names_if_nonempty propagates the outnames if they exist to the','line_number':74,'multiline':False]['text':' result tensors.','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' The {} case is an optimization; if the user does not use named tensors they','line_number':77,'multiline':False]['text':' pay no perf cost for it.','line_number':78,'multiline':False]['text':' Propagates `names` to `result` if `names` is not empty.','line_number':86,'multiline':False]['text':' `names` can be empty; see [NOTE] Writing name inference rules','line_number':87,'multiline':False]['text':' If `names` is not empty, `names.size()` should equal `result.dim()`.','line_number':88,'multiline':False]['text':' When in doubt, use this overload instead of the others.','line_number':89,'multiline':False]['text':' Propagates `names` to `result`. Only use this if we are certain that there','line_number':95,'multiline':False]['text':' are names to propagate (that names is not empty).','line_number':96,'multiline':False]['text':' Propagates all names from src to result.','line_number':102,'multiline':False]['text':' Propagates all names except for those at the excluded_idxs.','line_number':105,'multiline':False]['text':' Used for reduction ops that have a `keepdim` arg.','line_number':111,'multiline':False]['text':' TensorImpl* overloads for Legacy TH/THC code. Use these sparingly.','line_number':157,'multiline':False]['text':'const ','line_number':169,'multiline':True]['text':' result = m1 @ m2 + bias','line_number':192,'multiline':False]['text':' namespace namedinference','line_number':213,'multiline':False]['text':' namespace at','line_number':215,'multiline':False]