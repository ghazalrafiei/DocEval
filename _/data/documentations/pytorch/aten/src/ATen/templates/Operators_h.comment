['text':' ${generated_comment}','line_number':3,'multiline':False]['text':' Extension writers: do you write wrapper functions? Are you frustrated with','line_number':31,'multiline':False]['text':' resolving overloads of operators? Are you frustrated with dealing with','line_number':32,'multiline':False]['text':' pointer-to-methods and resolving overloads of pointer-to-methods?? Look no','line_number':33,'multiline':False]['text':' further, this is the utility for you.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' Given an operator schema: aten::op.overload(...','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' Use ATEN_FN2(op, overload) to get a *function* version of the operator','line_number':38,'multiline':False]['text':' that is guaranteed to not be overloaded. This means that you can safely','line_number':39,'multiline':False]['text':' decltype(&ATEN_FN2(op, overload)) it. NB: the 2 means this macro takes 2 args.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' Given an operator schema without an overload name: aten::op(...','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' Use ATEN_FN(op) to get an unambiguous *function* version of the operator.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' There is some interesting behavior for out= operations.','line_number':46,'multiline':False]['text':' ATEN_FN2(sin, out) gives a function that is *faithful* to the schema;','line_number':47,'multiline':False]['text':' that is, the order of arguments is exactly what it looks like in the schema.','line_number':48,'multiline':False]['text':' Separately, ATEN_OP(op) and ATEN_OP2(op, overload) define a class containing compile-time','line_number':53,'multiline':False]['text':' metadata about a given aten operator.','line_number':54,'multiline':False]['text':' Notable data on the class includes:','line_number':55,'multiline':False]['text':' - ATEN_OP2(add, Tensor)::name // returns the string name: "add"','line_number':56,'multiline':False]['text':' - ATEN_OP2(add, Tensor)::overload_name // returns the string overload name: "Tensor"','line_number':57,'multiline':False]['text':' - ATEN_OP2(add, Tensor)::schema // returns the C++ schema type: at::Tensor (const at::Tensor &, const at::Tensor &, const at::Scalar &)','line_number':58,'multiline':False]['text':' - ATEN_OP2(add, Tensor)::schema_str // returns the string jit type: "add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor"','line_number':59,'multiline':False]['text':' WARNING: Please do not call any of the ops in the _ops namespace directly.','line_number':64,'multiline':False]['text':' Use the ATEN_FN macros. We do not guarantee stability of the naming','line_number':65,'multiline':False]['text':' scheme for the functions in at::_ops','line_number':66,'multiline':False]['text':' See Note [The ATen Operators API] for details of the at::_ops namespace','line_number':68,'multiline':False]['text':' namespace _ops','line_number':73,'multiline':False]['text':' namespace at','line_number':74,'multiline':False]