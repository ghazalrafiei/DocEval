['text':' Function name to record NCCL metadata','line_number':21,'multiline':False]['text':' Kind of record function scope;','line_number':24,'multiline':False]['text':' c10/ATen ops, autograd nodes','line_number':26,'multiline':False]['text':' Functions/nodes called from the autograd','line_number':28,'multiline':False]['text':' TorchScript functions, methods','line_number':30,'multiline':False]['text':' Kernel Function dtype Tag','line_number':32,'multiline':False]['text':' Torchbind custom class,','line_number':34,'multiline':False]['text':' Generic Build Feature','line_number':36,'multiline':False]['text':' Kernel Function dtype Tag','line_number':38,'multiline':False]['text':' User defined scope (e.g. with record_function())','line_number':40,'multiline':False]['text':' Scopes for static runtime, a specialized TorchScript interpreter','line_number':42,'multiline':False]['text':' must be the last in the list','line_number':45,'multiline':False]['text':' namespace at','line_number':48,'multiline':False]['text':' namespace std','line_number':57,'multiline':False]['text':' Soft limit on the number of callbacks to use;','line_number':91,'multiline':False]['text':' An abstract base class for various observer contexts that can be attached to','line_number':94,'multiline':False]['text':' the RecordFunction.','line_number':95,'multiline':False]['text':'','line_number':109,'multiline':False]['text':' PyTorch callbacks/observers API:','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':'*
 * RecordFunctionCallback represents a pair of callbacks to be used with
 * RecordFunction, members:
 *   start, end - the callbacks to run when entering and exiting the scope;
 *     optionally, the start callback may return an ObserverContext which will
 *     be passed to the end callback, use appropriate constructor accordingly.
 *   needs_inputs - whether the callbacks need the inputs passed from the
 * observed function/range; NOTE: passing the inputs incurs an additional
 * overhead; sampling_probability - if not 1.0, then the callback is
 * probabilistically sampled to run; NOTE: start and end callbacks always run as
 * a pair and are sampled together; scopes - types of scopes to execute the
 * callbacks on (see RecordScope); passing empty set means the callbacks will be
 * executed for all possible scope types should_run - optional function that
 * returns whether this callback should run; overwrites the effect of setting
 * sampling_probability
 ','line_number':113,'multiline':True]['text':' This interface supports observers that require passing an ObserverContext','line_number':135,'multiline':False]['text':' between start and end callbacks.','line_number':136,'multiline':False]['text':' Notes:','line_number':218,'multiline':False]['text':'  - two types of callbacks are provided: thread local and global','line_number':219,'multiline':False]['text':'     - thread local callbacks are added/removed only for the given thread','line_number':220,'multiline':False]['text':'       and are stored locally for each thread and separately from the list','line_number':221,'multiline':False]['text':'       of the global callbacks','line_number':222,'multiline':False]['text':'     - global callbacks are stored in a single per process list and are','line_number':223,'multiline':False]['text':'       invoked by every RecordFunction, in addition to the thread local','line_number':224,'multiline':False]['text':'       callbacks specific to the given thread','line_number':225,'multiline':False]['text':'  - we allow the added callbacks to be sampled, by specifying a sampling','line_number':226,'multiline':False]['text':'    probability for each callback pair, if the start callback is','line_number':227,'multiline':False]['text':'    not picked to run, the corresponding end callback won't be called','line_number':228,'multiline':False]['text':'  - a typical use case for the global callbacks is passive monitoring','line_number':229,'multiline':False]['text':'    in the background (e.g. fleet-wide monitoring), without focusing on','line_number':230,'multiline':False]['text':'    the specific piece of code','line_number':231,'multiline':False]['text':'  - in contrast, thread local callbacks are enabled locally, on demand,','line_number':232,'multiline':False]['text':'    for the specific piece of code (range) and are not sampled','line_number':233,'multiline':False]['text':'  - a typical use case for thread local callbacks is profiler and code','line_number':234,'multiline':False]['text':'    execution tracer','line_number':235,'multiline':False]['text':'  - note, thread local callbacks are automatically propagated with','line_number':236,'multiline':False]['text':'    ThreadLocalState across JIT continuations and async tasks (at::launch)','line_number':237,'multiline':False]['text':' It is unnecessary to use atomic operations for enabling','line_number':243,'multiline':False]['text':' thread-local function callbacks. Moreover, it prevents saving to','line_number':244,'multiline':False]['text':' ThreadLocalState because std::atomic is non-copyable.','line_number':245,'multiline':False]['text':' Holds pairs (callbacks, unique_id)','line_number':255,'multiline':False]['text':' Generated by the callback managers to determine which functions to run.','line_number':258,'multiline':False]['text':' Default constructor is used with before function called afterwards:','line_number':284,'multiline':False]['text':'  scope - record scope that this function tracks','line_number':285,'multiline':False]['text':'  pre_sampled - whether this RecordFunction was already pre-sampled with','line_number':286,'multiline':False]['text':'    kLowProb probability','line_number':287,'multiline':False]['text':' Destructor calls end callbacks','line_number':314,'multiline':False]['text':' Retrieves the thread_id that this RecordFunction ran start callbacks with.','line_number':349,'multiline':False]['text':' Useful for writing thread safe end callbacks that may be potentially','line_number':350,'multiline':False]['text':' executed in a different thread (async ops)','line_number':351,'multiline':False]['text':' For backward functions - thread id of the corresponding forward function,','line_number':356,'multiline':False]['text':' or zero otherwise;','line_number':357,'multiline':False]['text':' used alongside with sequence number to correlate backward functions with','line_number':358,'multiline':False]['text':' the forward ones','line_number':359,'multiline':False]['text':' Returns logical thread_id for the current thread','line_number':372,'multiline':False]['text':' Internal functions, do not use directly;','line_number':375,'multiline':False]['text':' used in python's context manager','line_number':376,'multiline':False]['text':' before functions initialize RecordFunction members and call','line_number':378,'multiline':False]['text':' start callbacks','line_number':379,'multiline':False]['text':' Sets node ID for distributed profiling','line_number':385,'multiline':False]['text':' Gets node ID for distributed profiling','line_number':387,'multiline':False]['text':' Calls end callbacks. After end(), accessors will no longer provide useful','line_number':390,'multiline':False]['text':' results.','line_number':391,'multiline':False]['text':' Internal-only, used only force async event for distributed events','line_number':394,'multiline':False]['text':' profiling.','line_number':395,'multiline':False]['text':' Returns whether this RecordFunction corresponds to an async event or not.','line_number':398,'multiline':False]['text':' Returns whether this RecordFunction corresponds to NCCL metadata collection','line_number':401,'multiline':False]['text':' or not.','line_number':402,'multiline':False]['text':' Internal-only, used to denote out variant used for Static Runtime execution','line_number':407,'multiline':False]['text':' This method returns a copy of the FunctionSchema and can be expensive.','line_number':417,'multiline':False]['text':' Whether this RecordFunction runs any callbacks.','line_number':424,'multiline':False]['text':' In cases when RecordFunction might be active but we chose not to','line_number':456,'multiline':False]['text':' use the observers (e.g. operator is not observed), this boolean','line_number':457,'multiline':False]['text':' flag is used to check whether the start callbacks were called','line_number':458,'multiline':False]['text':' Stores various ObserverContext objects with event metadata for callbacks.','line_number':465,'multiline':False]['text':' For backward functions - thread id of the forward function','line_number':474,'multiline':False]['text':' Unique id for this RecordFunction, used in callbacks to track start','line_number':477,'multiline':False]['text':' and end of ranges','line_number':478,'multiline':False]['text':' Whether this record_function corresponds to an async event or not. Async','line_number':481,'multiline':False]['text':' events can complete in different threads or follow a future-like pattern','line_number':482,'multiline':False]['text':' of use.','line_number':483,'multiline':False]['text':' Debug handles are used for lazy annotation of module hierarchy','line_number':486,'multiline':False]['text':' and callstack.','line_number':487,'multiline':False]['text':' This is specifically is useful for mobile runtime, where generated','line_number':488,'multiline':False]['text':' debug handles can be lazily symbolicated using debug information','line_number':489,'multiline':False]['text':' Whether this RecordFunction is used for an out variant run with','line_number':492,'multiline':False]['text':' Static Runtime','line_number':493,'multiline':False]['text':' Whether this RecordFunction is used for NCCL metadata collection','line_number':496,'multiline':False]['text':' namespace detail','line_number':566,'multiline':False]['text':' optional argument - function's seq_no','line_number':568,'multiline':False]['text':' Custom user scopes in C++; similar to Python's 'with record_function("..."):'','line_number':601,'multiline':False]['text':' RECORD_USER_SCOPE with inputs','line_number':606,'multiline':False]['text':' Helper macro to pass in debug handle that is used to','line_number':610,'multiline':False]['text':' post process events','line_number':611,'multiline':False]['text':' Helper macros to record LITE INTERPETER scope events with debug handles','line_number':620,'multiline':False]['text':' Bookend to the RECORD_FUNCTION macros.  Use this after the kernel','line_number':626,'multiline':False]['text':' launch to let the profiler bind the outputs to the op that produced','line_number':627,'multiline':False]['text':' them.  Note that guard is declared by RECORD_FUNCTION so this macro','line_number':628,'multiline':False]['text':' needs to be called from the same scope as RECORD_FUNCTION','line_number':629,'multiline':False]['text':'*
 * addThreadLocalCallback adds a thread local callback to run with
 * RecordFunction, returns handle to use with removeThreadLocalCallback
 ','line_number':636,'multiline':True]['text':'*
 * hasThreadLocalCallbacks returns whether there're callbacks registered
 * with addThreadLocalCallback
 ','line_number':642,'multiline':True]['text':'*
 * clearThreadLocalCallbacks removes all thread local callbacks
 ','line_number':648,'multiline':True]['text':'*
 * addGlobalCallback adds a global callback to run with RecordFunction:
 *
 * only during the program initialization
 ','line_number':653,'multiline':True]['text':'*
 * removeCallback removes a callback given the handle returned by
 * addThreadLocalCallback or addGlobalCallback;
 *
 * no other code can run simultaneously
 ','line_number':660,'multiline':True]['text':'*
 * Prevent the given callback from executing. If handle is invalid,
 * does nothing.
 ','line_number':668,'multiline':True]['text':'*
 * Allow the given callback, previously disabled with disableCallback, to
 * execute again. If handle is invalid, does nothing.
 ','line_number':674,'multiline':True]['text':'*
 * hasGlobalCallbacks returns whether there're global callbacks
 * registered with pushGlobalCallback
 ','line_number':680,'multiline':True]['text':'*
 * clearGlobalCallbacks removes all global callbacks
 ','line_number':686,'multiline':True]['text':' for both thread local and global callbacks','line_number':691,'multiline':False]['text':'*
 * enableRecordFunction enables RecordFunction thread locally
 ','line_number':695,'multiline':True]['text':'*
 * isRecordFunctionEnabled returns whether RecordFunction
 * is enabled thread locally
 ','line_number':700,'multiline':True]['text':' Thread local vector of callbacks, holds pairs (callbacks, unique_id);','line_number':728,'multiline':False]['text':' must be sorted in increasing handles order','line_number':729,'multiline':False]['text':' namespace at','line_number':741,'multiline':False]