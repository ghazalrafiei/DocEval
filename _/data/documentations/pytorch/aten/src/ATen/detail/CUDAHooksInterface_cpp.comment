['text':' NB: We purposely leak the CUDA hooks object.  This is because under some','line_number':10,'multiline':False]['text':' situations, we may need to reference the CUDA hooks while running destructors','line_number':11,'multiline':False]['text':' of objects which were constructed *prior* to the first invocation of','line_number':12,'multiline':False]['text':' getCUDAHooks.  The example which precipitated this change was the fused','line_number':13,'multiline':False]['text':' kernel cache in the JIT.  The kernel cache is a global variable which caches','line_number':14,'multiline':False]['text':' both CPU and CUDA kernels; CUDA kernels must interact with CUDA hooks on','line_number':15,'multiline':False]['text':' destruction.  Because the kernel cache handles CPU kernels too, it can be','line_number':16,'multiline':False]['text':' constructed before we initialize CUDA; if it contains CUDA kernels at program','line_number':17,'multiline':False]['text':' destruction time, you will destruct the CUDA kernels after CUDA hooks has','line_number':18,'multiline':False]['text':' been unloaded.  In principle, we could have also fixed the kernel cache store','line_number':19,'multiline':False]['text':' CUDA kernels in a separate global variable, but this solution is much','line_number':20,'multiline':False]['text':' simpler.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' CUDAHooks doesn't actually contain any data, so leaking it is very benign;','line_number':23,'multiline':False]['text':' you're probably losing only a word (the vptr in the allocated object.)','line_number':24,'multiline':False]['text':' NB: The once_flag here implies that if you try to call any CUDA','line_number':28,'multiline':False]['text':' functionality before libATen_cuda.so is loaded, CUDA is permanently','line_number':29,'multiline':False]['text':' disabled for that copy of ATen.  In principle, we can relax this','line_number':30,'multiline':False]['text':' restriction, but you might have to fix some code.  See getVariableHooks()','line_number':31,'multiline':False]['text':' for an example where we relax this restriction (but if you try to avoid','line_number':32,'multiline':False]['text':' needing a lock, be careful; it doesn't look like Registry.h is thread','line_number':33,'multiline':False]['text':' safe...)','line_number':34,'multiline':False]['text':' namespace detail','line_number':50,'multiline':False]['text':' namespace at','line_number':54,'multiline':False]