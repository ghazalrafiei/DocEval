['text':' Modified from https://stackoverflow.com/questions/7943525/is-it-possible-to-figure-out-the-parameter-type-and-return-type-of-a-lambda','line_number':5,'multiline':False]['text':' Fallback, anything with an operator()','line_number':7,'multiline':False]['text':' Pointers to class members that are themselves functors.','line_number':12,'multiline':False]['text':' For example, in the following code:','line_number':13,'multiline':False]['text':' template <typename func_t>','line_number':14,'multiline':False]['text':' struct S {','line_number':15,'multiline':False]['text':'     func_t f;','line_number':16,'multiline':False]['text':' };','line_number':17,'multiline':False]['text':' template <typename func_t>','line_number':18,'multiline':False]['text':' S<func_t> make_s(func_t f) {','line_number':19,'multiline':False]['text':'     return S<func_t> { .f = f };','line_number':20,'multiline':False]['text':' }','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' auto s = make_s([] (int, float) -> double { /* ... */ });','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' function_traits<decltype(&s::f)> traits;','line_number':25,'multiline':False]['text':' Const class member functions','line_number':30,'multiline':False]['text':' Reference types','line_number':35,'multiline':False]['text':' Free functions','line_number':41,'multiline':False]['text':' arity is the number of arguments.','line_number':44,'multiline':False]['text':' the i-th argument is equivalent to the i-th tuple element of a tuple','line_number':54,'multiline':False]['text':' composed of those arguments.','line_number':55,'multiline':False]['text':' Traits for calling with c10::guts::invoke, where member_functions have a first argument of ClassType','line_number':81,'multiline':False]