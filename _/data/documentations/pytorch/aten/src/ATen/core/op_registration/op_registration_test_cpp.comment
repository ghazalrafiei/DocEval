['text':'*
 * This file contains some general registration test cases.
 * More detailed test cases containing different APIs for registering kernels
 * are found in other files in this directory.
 ','line_number':1,'multiline':True]['text':' This file intentionally tests some deprecated APIs','line_number':9,'multiline':False]['text':' TODO Rewrite (since this is now allowed) and reenable','line_number':123,'multiline':False]['text':' TEST(OperatorRegistrationTest, givenOpWithCatchallKernel_whenRegisteringDispatchedKernel_thenFails) {','line_number':124,'multiline':False]['text':'   bool called = false;','line_number':125,'multiline':False]['text':'   auto registrar = c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options().catchAllKernel<MockKernel>(&called));','line_number':126,'multiline':False]['text':'   expectThrows<c10::Error>([&] {','line_number':127,'multiline':False]['text':'     c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options().kernel<MockKernel>(c10::DispatchKey::CPU, &called));','line_number':128,'multiline':False]['text':'   }, "for an operator which already has a catch-all kernel registered");','line_number':129,'multiline':False]['text':' }','line_number':130,'multiline':False]['text':' TEST(OperatorRegistrationTest, givenOpWithCatchallKernel_whenRegisteringDispatchedKernelInSameOpCall_thenFails) {','line_number':132,'multiline':False]['text':'   bool called = false;','line_number':133,'multiline':False]['text':'   expectThrows<c10::Error>([&] {','line_number':134,'multiline':False]['text':'     auto registrar = c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options()','line_number':135,'multiline':False]['text':'       .catchAllKernel<MockKernel>(&called)','line_number':136,'multiline':False]['text':'       .kernel<MockKernel>(c10::DispatchKey::CPU, &called));','line_number':137,'multiline':False]['text':'   }, "for an operator which already has a catch-all kernel registered");','line_number':138,'multiline':False]['text':' }','line_number':139,'multiline':False]['text':' TODO Rewrite (since this is now allowed) and reenable','line_number':156,'multiline':False]['text':' TEST(OperatorRegistrationTest, givenOpWithDispatchedKernel_whenRegisteringCatchallKernel_thenFails) {','line_number':157,'multiline':False]['text':'   bool called = false;','line_number':158,'multiline':False]['text':'   auto registrar = c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options().kernel<MockKernel>(c10::DispatchKey::CPU, &called));','line_number':159,'multiline':False]['text':'   expectThrows<c10::Error>([&] {','line_number':160,'multiline':False]['text':'     c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options().catchAllKernel<MockKernel>(&called));','line_number':161,'multiline':False]['text':'   }, "Tried to register a catch-all kernel for an operator which already has kernels for dispatch keys CPU. An operator can only have either a catch-all kernel or kernels with dispatch keys. The operator schema is _test::dummy");','line_number':162,'multiline':False]['text':' }','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' TEST(OperatorRegistrationTest, givenOpWithDispatchedKernel_whenRegisteringCatchallKernelInSameOpCall_thenFails) {','line_number':165,'multiline':False]['text':'   bool called = false;','line_number':166,'multiline':False]['text':'   expectThrows<c10::Error>([&] {','line_number':167,'multiline':False]['text':'     auto registrar = c10::RegisterOperators().op("_test::dummy(Tensor dummy) -> ()", c10::RegisterOperators::options()','line_number':168,'multiline':False]['text':'       .kernel<MockKernel>(c10::DispatchKey::CPU, &called)','line_number':169,'multiline':False]['text':'       .catchAllKernel<MockKernel>(&called));','line_number':170,'multiline':False]['text':'   }, "Tried to register a catch-all kernel for an operator which already has kernels for dispatch keys CPU. An operator can only have either a catch-all kernel or kernels with dispatch keys. The operator schema is _test::dummy");','line_number':171,'multiline':False]['text':' }','line_number':172,'multiline':False]['text':' assert schema is registered','line_number':193,'multiline':False]['text':' as long as we don't register non-catchall kernels, ops without tensor arguments are fine','line_number':216,'multiline':False]['text':' assert schema is registered','line_number':220,'multiline':False]['text':' assert schema is registered','line_number':247,'multiline':False]['text':' Ensure that dispatcher doesn't take the dispatch key from the tensor but from the direct argument instead.','line_number':249,'multiline':False]['text':' Ensure that disptach key from tensor is not used here.','line_number':254,'multiline':False]['text':' assert schema is registered','line_number':275,'multiline':False]['text':' Test for out of tree lazy backends- ::Lazy key is now registered to TS backend in tree','line_number':287,'multiline':False]['text':' also assert that the error message contains the available tensor type ids, but don't assert their order','line_number':294,'multiline':False]['text':' assert schema is registered','line_number':329,'multiline':False]['text':' assert schema is registered','line_number':358,'multiline':False]['text':' assert schema is registered','line_number':387,'multiline':False]['text':'requires_grad=','line_number':517,'multiline':True]['text':'requires_grad=','line_number':530,'multiline':True]['text':' catchAll now maps to CompositeImplicitAutograd which has','line_number':548,'multiline':False]['text':' higher precedence than Autograd','line_number':549,'multiline':False]['text':'requires_grad=','line_number':552,'multiline':True]['text':'requires_grad=','line_number':581,'multiline':True]['text':'requires_grad=','line_number':586,'multiline':True]['text':'requires_grad=','line_number':605,'multiline':True]['text':'requires_grad=','line_number':610,'multiline':True]['text':' no longer test ::Lazy key here','line_number':615,'multiline':False]['text':' since it is now registered to TS backend in-tree and thus behaves differently,','line_number':616,'multiline':False]['text':' does not throw the expected 'could not run..' messages','line_number':617,'multiline':False]['text':'requires_grad=','line_number':631,'multiline':True]['text':' When there's direct registration to XLA / Lazy backend, Autograd{XLA, Lazy} doesn't pick up catchAll','line_number':648,'multiline':False]['text':' kernel in precompute but just keep fallthrough kernel from backend fallback.','line_number':649,'multiline':False]['text':' Thus it falls through Autograd{XLA, Lazy} and reaches the kernel at XLA / Lazy key.','line_number':650,'multiline':False]['text':'requires_grad=','line_number':652,'multiline':True]['text':'*
 * This is used to check that a given type works correctly when passed as input
 * to or as output from a kernel.
 *
 * Call ArgTypeTestKernel<Input, Output>::test(input, inputExpectation, output, outputExpectation, schema)
 * to test that a kernel with `Input` as input type and `Output` as output types,
 * when called with `input` fulfills `inputExpectation` inside the kernel, then
 * returns `output` and the returned value fulfills `outputExpectation`.
 *
 * `inputExpectation` and `outputExpectation` should be lambdas that run
 * googletest expect macros (or use other ways to assert the expectation is met).
 *
 * Optionally, you can specify the argument list part of a function schema
 * (e.g. "(Tensor a) -> Tensor") as an additional argument to use when
 * registering the kernel. In this case, the operator registration logic will
 * check that the kernel function signature matches the one you specified.
 ','line_number':752,'multiline':True]['text':' assert schema is registered','line_number':807,'multiline':False]['text':' Test with explicitly specified schema','line_number':822,'multiline':False]['text':' Test with inferred schema','line_number':830,'multiline':False]['text':' Test taking argument and returning nothing','line_number':838,'multiline':False]['text':' Test taking argument and returning multiple outputs','line_number':843,'multiline':False]['text':' TODO Test Scalar','line_number':855,'multiline':False]['text':' primitive types','line_number':857,'multiline':False]['text':' optional types (with has_value() == true)','line_number':884,'multiline':False]['text':' optional types (with has_value() == false)','line_number':911,'multiline':False]['text':' list types (with empty list)','line_number':938,'multiline':False]['text':' list types (with non-empty list)','line_number':957,'multiline':False]['text':' ArrayRef list types (with empty list)','line_number':991,'multiline':False]['text':' list types (with non-empty list)','line_number':1006,'multiline':False]['text':' std::array list types (with empty list)','line_number':1037,'multiline':False]['text':' std::array list types (with non-empty list)','line_number':1056,'multiline':False]['text':' deprecated list types (with empty list)','line_number':1091,'multiline':False]['text':'Note: vector<bool> is not supported, use List<bool> instead.','line_number':1100,'multiline':False]['text':' deprecated list types (with non-empty list)','line_number':1107,'multiline':False]['text':'Note: vector<bool> is not supported, use List<bool> instead.','line_number':1116,'multiline':False]['text':' Test optional of list (with nullopt)','line_number':1138,'multiline':False]['text':' Test optional of list (with empty list)','line_number':1144,'multiline':False]['text':' Test optional of list (with values)','line_number':1150,'multiline':False]['text':' Test list of optional (with empty list)','line_number':1156,'multiline':False]['text':' Test list of optional (with values)','line_number':1162,'multiline':False]['text':' dict types','line_number':1168,'multiline':False]['text':' deprecated dict types','line_number':1202,'multiline':False]['text':' weird deeply nested type','line_number':1236,'multiline':False]['text':' Internal API','line_number':1275,'multiline':False]['text':' Should have a schema even if there are no impls','line_number':1281,'multiline':False]['text':' CatchAll now maps to CompositeImplicitAutograd and has higher precedence than backend fallback.','line_number':1365,'multiline':False]['text':'requires_grad=','line_number':1400,'multiline':True]['text':'requires_grad=','line_number':1412,'multiline':True]['text':'requires_grad=','line_number':1424,'multiline':True]['text':' CompositeImplicitAutograd has higher precedence than Autograd','line_number':1439,'multiline':False]['text':'requires_grad=','line_number':1442,'multiline':True]['text':' catchAll now maps to CompositeImplicitAutograd, which means we have two registrations to CompositeImplicitAutograd key.','line_number':1465,'multiline':False]['text':' The last registration is used.','line_number':1466,'multiline':False]['text':'requires_grad=','line_number':1476,'multiline':True]['text':'requires_grad=','line_number':1501,'multiline':True]['text':'requires_grad=','line_number':1515,'multiline':True]['text':' Fallthrough AutogradCPU and reaches CPU','line_number':1539,'multiline':False]['text':'requires_grad=','line_number':1541,'multiline':True]['text':'requires_grad=','line_number':1555,'multiline':True]['text':' AutogradCPU is fallthrough, calls CPU kernel','line_number':1577,'multiline':False]['text':'requires_grad=','line_number':1578,'multiline':True]['text':' Autograd{XLA, Lazy} is fallthrough, calls XLA / Lazy kernel','line_number':1590,'multiline':False]['text':'requires_grad=','line_number':1591,'multiline':True]['text':' AutogradCPU is fallthrough, calls CPU kernel','line_number':1603,'multiline':False]['text':'requires_grad=','line_number':1604,'multiline':True]['text':' AutogradCPU is fallthrough, calls CPU kernel','line_number':1628,'multiline':False]['text':'requires_grad=','line_number':1629,'multiline':True]['text':' Autograd{XLA, Lazy} is fallthrough, calls XLA / Lazy kernel','line_number':1643,'multiline':False]['text':'requires_grad=','line_number':1644,'multiline':True]['text':' AutogradOther is fallthrough, calls SparseCPU kernel','line_number':1658,'multiline':False]['text':'requires_grad=','line_number':1659,'multiline':True]['text':' AutogradCPU is fallthrough, calls CPU kernel','line_number':1684,'multiline':False]['text':'requires_grad=','line_number':1685,'multiline':True]['text':' AutogradCUDA is fallthrough, calls CUDA kernel','line_number':1699,'multiline':False]['text':'requires_grad=','line_number':1700,'multiline':True]['text':'requires_grad=','line_number':1736,'multiline':True]['text':'requires_grad=','line_number':1744,'multiline':True]['text':' AutogradCPU is fallthrough, use CPU kernel','line_number':1763,'multiline':False]['text':'requires_grad=','line_number':1766,'multiline':True]['text':'requires_grad=','line_number':1775,'multiline':True]['text':' Autograd backend kernel has higher precedence than Autograd alias.','line_number':1779,'multiline':False]['text':'requires_grad=','line_number':1785,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1791,'multiline':False]['text':'requires_grad=','line_number':1807,'multiline':True]['text':' Similar to in-tree AutogradCPU/AutogradCUDA etc, out-of-tree backends usually register','line_number':1815,'multiline':False]['text':' a fallthrough kernel for AutogradPrivateUse1.','line_number':1816,'multiline':False]['text':'requires_grad=','line_number':1844,'multiline':True]['text':'requires_grad=','line_number':1845,'multiline':True]['text':'requires_grad=','line_number':1855,'multiline':True]['text':'requires_grad=','line_number':1856,'multiline':True]['text':'requires_grad=','line_number':1868,'multiline':True]['text':'requires_grad=','line_number':1869,'multiline':True]['text':' Meta should redispatch to the AutogradOther backend,','line_number':1887,'multiline':False]['text':' which the composite kernel should be registered to.','line_number':1888,'multiline':False]['text':'requires_grad=','line_number':1889,'multiline':True]['text':' NB: Direct use of DispatchKey is discouraged; use the DeviceType','line_number':1901,'multiline':False]['text':' k-synonyms instead','line_number':1902,'multiline':False]['text':'requires_grad=','line_number':1922,'multiline':True]['text':'requires_grad=','line_number':1926,'multiline':True]['text':' Ensure it's ok after deregistering','line_number':1970,'multiline':False]['text':' Just show off the possible ways to register functions','line_number':1979,'multiline':False]['text':' C++ will implicitly convert function to function pointer','line_number':1982,'multiline':False]['text':' c.f. https://en.cppreference.com/w/cpp/language/implicit_conversion#Function_to_pointer','line_number':1983,'multiline':False]['text':' These require explicit schema','line_number':1986,'multiline':False]['text':' Some internal tests that have to be done from C++','line_number':1992,'multiline':False]['text':' autograd kernel that redispatches. Explicitly takes in and updates the DispatchKeySet','line_number':2048,'multiline':False]['text':' autograd kernel that redispatches. Does not take in a DispatchKeySet','line_number':2056,'multiline':False]['text':' tracing kernel that redispatches. Explicitly takes in and updates the DispatchKeySet','line_number':2064,'multiline':False]['text':' call Tracing -> call Autograd -> call CPU','line_number':2088,'multiline':False]['text':' call Tracing -> call Autograd -> call CPU','line_number':2111,'multiline':False]['text':' the tracing kernel takes in a DispatchKeySet, but the autograd kernel does not','line_number':2122,'multiline':False]['text':' the dispatcher should handle correctly plumbing its DispatchKeySet to tracing and not autograd.','line_number':2123,'multiline':False]['text':' call Tracing -> call Autograd -> call CPU','line_number':2136,'multiline':False]['text':' should return every registered op','line_number':2144,'multiline':False]['text':' should return every registered op with a cpu kernel','line_number':2146,'multiline':False]['text':' TODO: We should reject this on principle, but today it accidentally works','line_number':2196,'multiline':False]['text':' due to going through the boxed calling convention.','line_number':2197,'multiline':False]['text':'','line_number':2198,'multiline':False]['text':' First, we attempt to test if const SymInt& has SymInt. It does not,','line_number':2199,'multiline':False]['text':' because we only accept something as SymInt if it has exactly SymInt in','line_number':2200,'multiline':False]['text':' its signature. So we check if there is a non-symint kernel. But there is','line_number':2201,'multiline':False]['text':' no non-SymInt kernel, because we only registered a real SymInt kernel.','line_number':2202,'multiline':False]['text':' When this occurs, we fall back to the boxed calling convention.  And the','line_number':2203,'multiline':False]['text':' boxed calling convention can deal with const SymInt& fine, as during','line_number':2204,'multiline':False]['text':' boxing it will just create a SymInt to push onto the argument stack and','line_number':2205,'multiline':False]['text':' everything is fine.','line_number':2206,'multiline':False]