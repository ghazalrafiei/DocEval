['text':' For std::hash','line_number':4,'multiline':False]['text':' 'prim' symbols are synthetic operators that occur only in the IR','line_number':10,'multiline':False]['text':' and don't have corresponding implementations in ATen.','line_number':11,'multiline':False]['text':' 'onnx' symbols correspond to ONNX operators.  Their semantics','line_number':13,'multiline':False]['text':' are defined in https://github.com/onnx/onnx/blob/master/docs/Operators.md','line_number':14,'multiline':False]['text':' The particular version we are targeting is specified by '_onnx_opset_version'','line_number':15,'multiline':False]['text':' in torch.onnx.symbolic_helper','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' In general, most ONNX operators won't get an entry here, because they','line_number':18,'multiline':False]['text':' are handled from the Python end.  However, you may occasionally need','line_number':19,'multiline':False]['text':' to intern an ONNX symbol here so that you can conveniently write an','line_number':20,'multiline':False]['text':' optimization on ONNX operations.','line_number':21,'multiline':False]['text':' 'attr' symbols are attribute keys.  They are shared between both ONNX and ATen','line_number':23,'multiline':False]['text':' operators (you disambiguate their meaning by looking at the operator itself).','line_number':24,'multiline':False]['text':' In general, you only need to define attribute keys that are used by','line_number':25,'multiline':False]['text':' onnx or prim; ATen attributes are automatically generated in FORALL_ATTR_BASE_SYMBOLS.','line_number':26,'multiline':False]['text':' Note [Symbol allocation]','line_number':28,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':'  1. Symbol namespace is split up into namespaces.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'  2. The intended access pattern for built-in symbols is onnx::MatMul','line_number':33,'multiline':False]['text':'  in the c10 namespace (this is a Symbol).','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' Built-in constant definition strategy:','line_number':37,'multiline':False]['text':' - Enum is the most convenient way to generate a contiguous sequence','line_number':38,'multiline':False]['text':'   of numbers for an identifier.','line_number':39,'multiline':False]['text':' - However, an enum gives you a fresh type.  We want onnx::MatMul to','line_number':40,'multiline':False]['text':'   be type Symbol, not some random enum type!','line_number':41,'multiline':False]['text':' - Therefore, after using enums to generate the sequence of integers,','line_number':42,'multiline':False]['text':'   we then declare constexpr Symbols to get everything the actual Symbol','line_number':43,'multiline':False]['text':'   type we want.  Symbols must be constexpr to be valid to be "case"ed on.','line_number':44,'multiline':False]['text':' A Symbol is like an interned string, but with a little extra','line_number':50,'multiline':False]['text':' structure; it is namespaced via SymbolNamespace and the resulting','line_number':51,'multiline':False]['text':' intern pointers support efficient namespace testing.','line_number':52,'multiline':False]['text':' Get a Symbol for a qualified string like "attr::bar"','line_number':58,'multiline':False]['text':' Get a Symbol from a domain and an unqualified string like "org.pytorch.attr" and "bar"','line_number':61,'multiline':False]['text':' Constructors for our various namespaced strings.  This will construct','line_number':64,'multiline':False]['text':' the appropriate namespaced string, e.g., "attr::foo" for the','line_number':65,'multiline':False]['text':' argument "foo", and then attempt to intern it.  DO NOT USE THIS','line_number':66,'multiline':False]['text':' with a string literal; attr::foo should be available in that case','line_number':67,'multiline':False]['text':' (and if it's not, you should add it to the built-ins list above.)','line_number':68,'multiline':False]['text':' TODO: eliminate me','line_number':77,'multiline':False]['text':' So we can switch on this','line_number':91,'multiline':False]['text':' Give a string corresponding to the unqualified version of this name, e.g.,','line_number':98,'multiline':False]['text':' "mm". Use this in a context where the intended namespace of the string is','line_number':99,'multiline':False]['text':' obvious; this is a *lossy* conversion.','line_number':100,'multiline':False]['text':' Give a string corresponding to the qualified version of this name,','line_number':103,'multiline':False]['text':' e.g., "aten::mm".  This string format is made available to Python bindings','line_number':104,'multiline':False]['text':' (so we know how to parse it.)','line_number':105,'multiline':False]['text':' This describes a symbol in a case where humans read it.  At the moment it's','line_number':108,'multiline':False]['text':' the same as toQualString.  This has to be a const char* returned because','line_number':109,'multiline':False]['text':' a lot of printf style macros use it.','line_number':110,'multiline':False]['text':' Give a string corresponding to the domain name for the symbol,','line_number':113,'multiline':False]['text':' e.g., "org.pytorch.aten".','line_number':114,'multiline':False]['text':' namespace c10','line_number':137,'multiline':False]['text':' make symbol behave like an integer in hash tables','line_number':139,'multiline':False]