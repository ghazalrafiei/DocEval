['text':' For the record I don't think this is a correct pimpl idiom.','line_number':17,'multiline':False]['text':' Including Impl header in interface header defeats the purpose','line_number':18,'multiline':False]['text':' because you can't change Impl private members without forcing','line_number':19,'multiline':False]['text':' everything that included the interface to rebuild.','line_number':20,'multiline':False]['text':' Impl should be forward-declared in the interface header instead.','line_number':21,'multiline':False]['text':'*
 * Note [Generator]
 * ~~~~~~~~~~~~~~~~
 * A Pseudo Random Number Generator (PRNG) is an engine that uses an algorithm to
 * generate a seemingly random sequence of numbers, that may be later be used in creating
 * a random distribution. Such an engine almost always maintains a state and requires a
 * seed to start off the creation of random numbers. Often times, users have
 * found it beneficial to be able to explicitly create, retain, and destroy
 * PRNG states and also be able to have control over the seed value.
 *
 * A Generator in ATen gives users the ability to read, write and modify a PRNG engine.
 * For instance, it does so by letting users seed a PRNG engine, fork the state of the
 * engine, etc.
 *
 * By default, there is one generator per device, and a device's generator is
 * lazily created. A user can use the torch.Generator() api to create their own generator.
 ','line_number':24,'multiline':True]['text':'*
 * Note [Acquire lock when using random generators]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Generator and its derived classes are NOT thread-safe. Please note that most of the
 * places where we have inserted locking for generators are historically based, and we
 * haven't actually checked that everything is truly thread safe (and it probably isn't).
 * Please use the public mutex_ when using any methods from these classes, except for the
 * read-only methods. You can learn about the usage by looking into the unittests
 * (aten/src/ATen/cpu_generator_test.cpp) and other places where we have used lock_guard.
 *
 * TODO: Look into changing the threading semantics of Generators in ATen (e.g., making
 * them non-thread safe and instead making the generator state splittable, to accommodate
 * forks into other threads).
 ','line_number':42,'multiline':True]['text':' Sets the offset of Generator state to the desired offset. This is currently','line_number':96,'multiline':False]['text':' supported for only Philox based Generators, i.e., CUDA and MPS.','line_number':97,'multiline':False]['text':' Returns the offset of Generator state. This is currently supported for only','line_number':100,'multiline':False]['text':' Philox based Generators, i.e., CUDA and MPS.','line_number':101,'multiline':False]['text':' Implementation not inlined to prevent cycle reference between','line_number':108,'multiline':False]['text':' `ATen/core/Generator.h` and `ATen/core/Tensor.h`','line_number':109,'multiline':False]['text':'*
 * Utility function to static cast input Generator* to
 * the backend generator type (CPU/CUDAGeneratorImpl etc.)
 ','line_number':148,'multiline':True]['text':'*
 * Utility function used in tensor implementations, which
 * supplies the default generator to tensors, if an input generator
 * is not supplied. The input Generator* is also static casted to
 * the backend generator type (CPU/CUDAGeneratorImpl etc.)
 ','line_number':160,'multiline':True]['text':'*
 * Helper function for checking the validity of new random generator
 * state. Right now following conditions are checked:
 *
 * - The new state tensor must be a torch.ByteTensor
 * - Data of the new state tensor must be contiguous
 ','line_number':173,'multiline':True]['text':' namespace detail','line_number':189,'multiline':False]['text':' namespace at','line_number':191,'multiline':False]