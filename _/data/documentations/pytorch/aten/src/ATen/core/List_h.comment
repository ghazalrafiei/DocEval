['text':' In the general case, we use IValue::to().','line_number':57,'multiline':False]['text':' There is no to() overload for c10::optional<std::string>.','line_number':61,'multiline':False]['text':' assigning another ref to this assigns the underlying value','line_number':80,'multiline':False]['text':' allow moving, but only our friends (i.e. the List class) can move us','line_number':96,'multiline':False]['text':' this wraps vector::iterator to make sure user code can't rely','line_number':109,'multiline':False]['text':' on it being the type of the underlying vector.','line_number':110,'multiline':False]['text':' C++17 friendly std::iterator implementation','line_number':114,'multiline':False]['text':'*
 * An object of this class stores a list of values of type T.
 *
 * This is a pointer type. After a copy, both Lists
 * will share the same storage:
 *
 * > List<int> a;
 * > List<int> b = a;
 * > b.push_back("three");
 * > ASSERT("three" == a.get(0));
 *
 * We use this class in the PyTorch kernel API instead of
 * std::vector<T>, because that allows us to do optimizations
 * and switch out the underlying list implementation without
 * breaking backwards compatibility for the kernel API.
 ','line_number':220,'multiline':True]['text':' This is an intrusive_ptr because List is a pointer type.','line_number':239,'multiline':False]['text':' Invariant: This will never be a nullptr, there will always be a valid','line_number':240,'multiline':False]['text':' ListImpl.','line_number':241,'multiline':False]['text':'*
   * Constructs an empty list.
   ','line_number':254,'multiline':True]['text':'*
   * Constructs a list with some initial values.
   * Example:
   *   List<int> a({2, 3, 4});
   ','line_number':259,'multiline':True]['text':'*
   * Create a generic list with runtime type information.
   * This only works for c10::impl::GenericList and is not part of the public API
   * but only supposed to be used internally by PyTorch.
   ','line_number':267,'multiline':True]['text':'*
   * Create a new List pointing to a deep copy of the same data.
   * The List returned is a new list with separate storage.
   * Changes in it are not reflected in the original list or vice versa.
   ','line_number':277,'multiline':True]['text':'*
   * Returns the element at specified location pos, with bounds checking.
   * If pos is not within the range of the container, an exception of type std::out_of_range is thrown.
   ','line_number':284,'multiline':True]['text':'*
   * Moves out the element at the specified location pos and returns it, with bounds checking.
   * If pos is not within the range of the container, an exception of type std::out_of_range is thrown.
   * The list contains an invalid element at position pos afterwards. Any operations
   * on it before re-setting it are invalid.
   ','line_number':290,'multiline':True]['text':'*
   * Returns a reference to the element at specified location pos, with bounds checking.
   * If pos is not within the range of the container, an exception of type std::out_of_range is thrown.
   *
   * You cannot store the reference, but you can read it and assign new values to it:
   *
   *   List<int64_t> list = ...;
   *   list[2] = 5;
   *   int64_t v = list[1];
   ','line_number':298,'multiline':True]['text':'*
   * Assigns a new value to the element at location pos.
   ','line_number':312,'multiline':True]['text':'*
   * Assigns a new value to the element at location pos.
   ','line_number':317,'multiline':True]['text':'*
   * Returns an iterator to the first element of the container.
   * If the container is empty, the returned iterator will be equal to end().
   ','line_number':322,'multiline':True]['text':'*
   * Returns an iterator to the element following the last element of the container.
   * This element acts as a placeholder; attempting to access it results in undefined behavior.
   ','line_number':328,'multiline':True]['text':'*
   * Checks if the container has no elements.
   ','line_number':334,'multiline':True]['text':'*
   * Returns the number of elements in the container
   ','line_number':339,'multiline':True]['text':'*
   * Increase the capacity of the vector to a value that's greater or equal to new_cap.
   ','line_number':344,'multiline':True]['text':'*
   * Erases all elements from the container. After this call, size() returns zero.
   * Invalidates any references, pointers, or iterators referring to contained elements. Any past-the-end iterators are also invalidated.
   ','line_number':349,'multiline':True]['text':'*
   * Inserts value before pos.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':355,'multiline':True]['text':'*
   * Inserts value before pos.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':361,'multiline':True]['text':'*
   * Inserts a new element into the container directly before pos.
   * The new element is constructed with the given arguments.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':367,'multiline':True]['text':'*
   * Appends the given element value to the end of the container.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':375,'multiline':True]['text':'*
   * Appends the given element value to the end of the container.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':381,'multiline':True]['text':'*
   * Appends the given list to the end of the container. Uses at most one memory allocation.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':387,'multiline':True]['text':'*
   * Appends the given element value to the end of the container.
   * The new element is constructed with the given arguments.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':393,'multiline':True]['text':'*
   * Removes the element at pos.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':401,'multiline':True]['text':'*
   * Removes the elements in the range [first, last).
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':407,'multiline':True]['text':'*
   * Removes the last element of the container.
   * Calling pop_back on an empty container is undefined.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':413,'multiline':True]['text':'*
   * Resizes the container to contain count elements.
   * If the current size is less than count, additional default-inserted elements are appended.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':420,'multiline':True]['text':'*
   * Resizes the container to contain count elements.
   * If the current size is less than count, additional copies of value are appended.
   * May invalidate any references, pointers, or iterators referring to contained elements. Any past-the-end iterators may also be invalidated.
   ','line_number':427,'multiline':True]['text':'*
   * Value equality comparison. This function implements Python-like semantics for
   * equality: two lists with the same identity (e.g. same pointer) trivially
   * compare equal, otherwise each element is compared for equality.
   ','line_number':434,'multiline':True]['text':'*
   * Identity comparison. Returns true if and only if `rhs` represents the same
   * List object as `this`.
   ','line_number':445,'multiline':True]['text':'*
   * Returns the number of Lists currently pointing to this same list.
   * If this is the only instance pointing to this list, returns 1.
   ','line_number':453,'multiline':True]['text':' TODO Test use_count','line_number':457,'multiline':False]['text':' See [unsafe set type] for why this exists.','line_number':462,'multiline':False]['text':' GenericList is how IValue stores lists. It is, however, not part of the','line_number':476,'multiline':False]['text':' public API. Kernels should use Lists with concrete types instead','line_number':477,'multiline':False]['text':' (maybe except for some internal prim ops).','line_number':478,'multiline':False]['text':' IWYU pragma: keep','line_number':490,'multiline':False]