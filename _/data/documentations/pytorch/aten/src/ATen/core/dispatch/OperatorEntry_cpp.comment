['text':' Pick up any backend fallbacks that were registered prior to this','line_number':32,'multiline':False]['text':' OperatorEntry being created','line_number':33,'multiline':False]['text':' TODO: figure out if we can just directly save real schema at def time','line_number':39,'multiline':False]['text':' anonymous namespace','line_number':54,'multiline':False]['text':' NB: don't register schema until after we've checked everything!','line_number':88,'multiline':False]['text':' NB: cpp_signature doesn't get cleared even after the kernel that populated','line_number':110,'multiline':False]['text':' it is deleted.  This means you could poison the value of cpp_signature_','line_number':111,'multiline':False]['text':' with a bad signature value, and then it would permanently stay there until','line_number':112,'multiline':False]['text':' you deregister the schema.  This can't really be fixed, because we','line_number':113,'multiline':False]['text':' only do a typed() test once in the lifetime of a TypedOperatorHandle,','line_number':114,'multiline':False]['text':' which means if you could validly change the type of a cpp_signature, then','line_number':115,'multiline':False]['text':' that would also invalidate the old TypedOperatorHandles.','line_number':116,'multiline':False]['text':' Add the kernel to the kernels list,','line_number':140,'multiline':False]['text':' possibly creating the list if this is the first kernel.','line_number':141,'multiline':False]['text':' Redirect catchAll registrations to CompositeImplicitAutograd.','line_number':142,'multiline':False]['text':' Suppress the warning for Meta key as we are overriding C++ meta functions with python meta functions','line_number':150,'multiline':False]['text':' for some ops','line_number':151,'multiline':False]['text':' update the dispatch table, i.e. re-establish the invariant','line_number':172,'multiline':False]['text':' that the dispatch table points to the newest kernel','line_number':173,'multiline':False]['text':' Redirect catchAll deregistrations to CompositeImplicitAutograd.','line_number':187,'multiline':False]['text':' We are about to remove the array from the map, no need to do anything.','line_number':193,'multiline':False]['text':' the invariant says we don't want empty lists but instead remove the list from the map','line_number':198,'multiline':False]['text':' Note [No Alias Keys in DispatchKeySet]','line_number':215,'multiline':False]['text':' [Note] DispatchTable computation','line_number':262,'multiline':False]['text':' dispatchTable contains entries for runtime dispatch keys.','line_number':263,'multiline':False]['text':' For any dispatch key, it'll pick a kernel using the following order:','line_number':264,'multiline':False]['text':'  (1) Use kernel if it's directly registered to this key','line_number':265,'multiline':False]['text':'  (2) Handle runtime keys that have kernels available from alias keys','line_number':266,'multiline':False]['text':'    (2.1) Use kernel from DispatchKey::CompositeExplicitAutogradNonFunctional if available.','line_number':267,'multiline':False]['text':'          This is used to register a kernel that works for all backends in inference, except "functional" backends','line_number':268,'multiline':False]['text':'          like LazyTensor/XLA. But it requires separate registration for Autograd keys to support training.','line_number':269,'multiline':False]['text':'    (2.2) Use kernel from DispatchKey::CompositeExplicitAutograd if available.','line_number':270,'multiline':False]['text':'          This is used to register a kernel that works for all backend in inference. But it requires','line_number':271,'multiline':False]['text':'          separate registration for Autograd keys to support training.','line_number':272,'multiline':False]['text':'    (2.3) Use kernel from DispatchKey::CompositeImplicitAutograd if available.','line_number':273,'multiline':False]['text':'          For autograd keys, we only use kernel from CompositeImplicitAutograd when there's no direct registration','line_number':274,'multiline':False]['text':'          to its corresponding backend key or CompositeExplicitAutograd. See Note [CompositeExplicitAutograd and CompositeImplicitAutograd].','line_number':275,'multiline':False]['text':'          For AutogradOther, we eagerly return ambiguousAutogradOtherKernel() if there's registration to any of','line_number':276,'multiline':False]['text':'          its backends and ask backend extender to request a decicated Autograd key for the backend.','line_number':277,'multiline':False]['text':'          See Note [Ambiguity in AutogradOther kernel] for more details.','line_number':278,'multiline':False]['text':'          A CompositeExplicitAutograd kernel prevents CompositeImplicitAutograd kernel being used for Autograd keys, but it doesn't','line_number':279,'multiline':False]['text':'          cause confusion for AutogradOther. It's pretty straightforward to use Autograd (if available)','line_number':280,'multiline':False]['text':'          in this case.','line_number':281,'multiline':False]['text':'    (2.4) Use kernel from DispatchKey::Autograd if available','line_number':282,'multiline':False]['text':'    (2.5) Use kernel from DispatchKey::FuncTorchBatchedDecomposition if available','line_number':283,'multiline':False]['text':'    The implementation of (2.2) relies on the invariant that for a given backend,','line_number':284,'multiline':False]['text':'    `computeDispatchTableEntryWithDebug()` will be called for that backend's autograd key after the','line_number':285,'multiline':False]['text':'    backend key. See Note [Refresh Runtime Autograd entries in dispatchTable_]','line_number':286,'multiline':False]['text':'  (3) Use fallthrough kernel that are registered as fallback.','line_number':287,'multiline':False]['text':' Alias Key Precedence:','line_number':288,'multiline':False]['text':'   CompositExplicitAutogradNonFunctional > CompositeExplicitAutograd > CompositeImplicitAutograd > Autograd','line_number':289,'multiline':False]['text':' Note [CompositeExplicitAutograd and CompositeImplicitAutograd]','line_number':290,'multiline':False]['text':'   When there're registrations to both CompositeExplicitAutograd & CompositeImplicitAutograd & Autograd, from (2.2) we know CompositeExplicitAutograd','line_number':291,'multiline':False]['text':'   and Autograd kernels will be picked up and CompositeImplicitAutograd is overriden.','line_number':292,'multiline':False]['text':'   This is fine and in practice CompositeExplicitAutograd and CompositeImplicitAutograd shouldn't co-exist for an op.','line_number':293,'multiline':False]['text':' TODO: Update alias key precedence after we add new alias keys AutogradDispatchCPUOrCUDA .','line_number':294,'multiline':False]['text':' 1. Operator registration','line_number':296,'multiline':False]['text':' 2.1 Use CompositeExplicitAutogradNonFunctional kernel if available.','line_number':301,'multiline':False]['text':'     See Note [Undefined in dispatchTable_] for the special handling for Undefined.','line_number':302,'multiline':False]['text':' 2.2 Use CompositeExplicitAutograd kernel if available.','line_number':309,'multiline':False]['text':'     See Note [Undefined in dispatchTable_] for the special handling for Undefined.','line_number':310,'multiline':False]['text':' Note when there's direct registration to CompositeExplicitAutograd, this code path will only be hit by','line_number':317,'multiline':False]['text':' non backend keys (e.g AutogradXXX, Batched etc) due to (2.1).','line_number':318,'multiline':False]['text':' See Note [No Alias Keys in DispatchKeySet]','line_number':321,'multiline':False]['text':' 2.3. Use CompositeImplicitAutograd kernel if available. For autograd keys, we only use kernel from CompositeImplicitAutograd','line_number':324,'multiline':False]['text':'      when there's no direct registration to its corresponding backend key or CompositeExplicitAutograd.','line_number':325,'multiline':False]['text':'      For AutogradOther, we return ambiguousAutogradOtherKernel() if there's registration','line_number':326,'multiline':False]['text':'      to any of its backends.','line_number':327,'multiline':False]['text':'      See Note [Undefined in dispatchTable_] for the special handling for Undefined.','line_number':328,'multiline':False]['text':' If the dispatch key is included in CompositeImplicitAutogradNestedTensor,','line_number':330,'multiline':False]['text':' then we register it to nested-tensor kernel rather than','line_number':331,'multiline':False]['text':' regular-tensor CompositeImplicitAutograd kernel.','line_number':332,'multiline':False]['text':' We have no intention to change the behavior of Undefined,','line_number':333,'multiline':False]['text':' so this nested-tensor branch requires `dispatch_key != DispatchKey::Undefined`','line_number':334,'multiline':False]['text':' to let the original CompositeImplicitAutograd handle Undefined','line_number':335,'multiline':False]['text':' See Note: [Disjoint AliasKeyset] The order for this alias key doesn't matter','line_number':336,'multiline':False]['text':' 2.4. For autograd backend keys, use kernel from DispatchKey::Autograd if available','line_number':354,'multiline':False]['text':' 2.5. For batched backend keys, use kernel from DispatchKey::FuncTorchBatchedDecomposition if available','line_number':361,'multiline':False]['text':' See Note: [Disjoint AliasKeyset] The order for this alias key doesn't matter','line_number':362,'multiline':False]['text':' 3. Backend fallback','line_number':369,'multiline':False]['text':' 4. Default to error','line_number':378,'multiline':False]['text':' synchronizes the dispatch table entry for a given dispatch key','line_number':382,'multiline':False]['text':' with the current state of kernel registrations in the dispatcher.','line_number':383,'multiline':False]['text':' note that this is not a complete update, due to relationships between','line_number':384,'multiline':False]['text':' dispatch keys (e.g. runtime keys and their associated autograd keys,','line_number':385,'multiline':False]['text':' or alias keys and their associated keysets).','line_number':386,'multiline':False]['text':' This function should be considered a private helper for updateDispatchTable_()','line_number':387,'multiline':False]['text':' synchronizes the dispatch table entries for a given dispatch key *and its','line_number':397,'multiline':False]['text':' associated keys* with the current state of kernel registrations in the','line_number':398,'multiline':False]['text':' dispatcher.','line_number':399,'multiline':False]['text':' After a kernel has been registered to a dispatch key, a call to this','line_number':400,'multiline':False]['text':' function will synchronize the dispatcher state. See e.g. registerKernel()','line_number':401,'multiline':False]['text':' Handle Undefined separately since it isn't a runtime key but we have an entry in dispatchTable_.','line_number':403,'multiline':False]['text':' See Note [Undefined in dispatchTable_]','line_number':404,'multiline':False]['text':' Registration to CompositeExplicitAutogradNonFunctional, CompositeExplicitAutograd and CompositeImplicitAutograd should be populated to Undefined.','line_number':412,'multiline':False]['text':' We cannot do this above since Undefined cannot be represented in DispatchKeySet.','line_number':413,'multiline':False]['text':' Note [Refresh Runtime Autograd entries in dispatchTable_]','line_number':419,'multiline':False]['text':' Registering to backend key might affect computed entry at its Autograd backend key due to (2.1) & (2.3).','line_number':420,'multiline':False]['text':' In theory, we should only have to check if the given runtime key has "dense" functionality,','line_number':421,'multiline':False]['text':' e.g. DispatchKey::CPU (which is composed of DispatchKey::Dense and BackendComponent::CPUBit).','line_number':422,'multiline':False]['text':' However, there are some backends that should be included in this set that don't have the dense key set.','line_number':423,'multiline':False]['text':' E.g. DispatchKey::Meta, DispatchKey::ORT.','line_number':424,'multiline':False]['text':' does a complete update of the dispatch table, synchronizing all','line_number':431,'multiline':False]['text':' runtime dispatch keys with the current state of kernel registrations','line_number':432,'multiline':False]['text':' in the dispatcher.','line_number':433,'multiline':False]['text':' Note that we use updateDispatchTable_() to perform our per-key updating,','line_number':434,'multiline':False]['text':' even though that function is equipped to handle out-of-order updates and','line_number':435,'multiline':False]['text':' alias key updates, neither of which we send it. This is deliberate - the','line_number':436,'multiline':False]['text':' current design is more tractable with all updates funneled through a single','line_number':437,'multiline':False]['text':' per-key update mechanism, than with multiple variations that assume different','line_number':438,'multiline':False]['text':' invariants.','line_number':439,'multiline':False]['text':'','line_number':440,'multiline':False]['text':' Note [Undefined in dispatchTable_]','line_number':442,'multiline':False]['text':' DispatchKey Undefined is used in runtime:','line_number':443,'multiline':False]['text':' (1) it gives people place to specify functionality that should run when there are no dispatch keys,','line_number':444,'multiline':False]['text':'     e.g., an op without Tensor inputs or empty TensorList arguments','line_number':445,'multiline':False]['text':' (2) it would let us remove the explicit error checking code in the dispatch hotpath, and so when','line_number':446,'multiline':False]['text':'     no dispatch keys are available we just slide into the undefined handler which would then raise','line_number':447,'multiline':False]['text':'     the error message.','line_number':448,'multiline':False]['text':' In the old world of catchAll, the only way to "register" a kernel to Undefined is by registering it to','line_number':449,'multiline':False]['text':' catchAll. After catchAllKernel_ is removed, Undefined now can get a kernel from either CompositeExplicitAutograd,','line_number':450,'multiline':False]['text':' or CompositeImplicitAutograd alias key so that we don't break the support. Ideally isIncludedInAlias(Undefined, CompositeImplicitAutograd)','line_number':451,'multiline':False]['text':' should return true, it returns false because Undefined cannot be represented in a DispatchKeySet.','line_number':452,'multiline':False]['text':' remove trailing "*PrivateUse1"','line_number':518,'multiline':False]['text':' append the registered backend's name.','line_number':520,'multiline':False]['text':' AutogradPrivateUse1 -> AutogradFoo','line_number':521,'multiline':False]['text':' If there is an invariant problem, report it now.','line_number':530,'multiline':False]['text':' reportErrorCallback should have raised an error','line_number':535,'multiline':False]['text':' INSPECTING DISPATCHER STATE','line_number':557,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':558,'multiline':False]['text':' The dumper functions purposely do not check invariants, as you might be using','line_number':559,'multiline':False]['text':' them to debug situations where the invariants are violated.','line_number':560,'multiline':False]['text':' Inspect what the computed dispatch table would be (e.g., what','line_number':562,'multiline':False]['text':' updateDispatchTableFull_ would update the dispatch table to be)','line_number':563,'multiline':False]['text':' Need to handle Undefined separately, because its a runtime key that can't be represented','line_number':566,'multiline':False]['text':' in a DispatchKeySet.','line_number':567,'multiline':False]['text':' Inspect the "canonical" information in OperatorEntry.  This only prints out','line_number':586,'multiline':False]['text':' *non-derived* information including kernels registered to alias dispatch keys;','line_number':587,'multiline':False]['text':' i.e., what the source of truth says about the operator.  This dumping function','line_number':588,'multiline':False]['text':' is appropriate for expect tests.','line_number':589,'multiline':False]['text':' This WON'T report backend fallbacks.','line_number':590,'multiline':False]['text':' Iterate over DispatchKey, not the flat hash map, so we have a stable order','line_number':617,'multiline':False]