['text':' define constants like M_PI and C keywords for MSVC','line_number':3,'multiline':False]['text':' typedefs for holding vector data','line_number':23,'multiline':False]['text':' namespace detail','line_number':31,'multiline':False]['text':'*
 * Note [Philox Engine implementation]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Originally implemented in PyTorch's fusion compiler
 * Refer to: http://www.thesalmons.org/john/random123/papers/random123sc11.pdf
 * for details regarding the engine.
 *
 * Note that currently this implementation of the philox engine is not used
 * anywhere except for tests in cpu_generator_test.cpp. However, this engine
 * will replace curandStatePhilox4_32_10_t in the future.
 *
 * The philox engine takes a seed value, a subsequeunce
 * for starting the generation and an offset for the subsequence.
 * Think of this engine as an algorithm producing a huge array. We are
 * parallelizing this array by partitioning the huge array and assigning
 * a thread index to each partition. In other words, each seed value
 * (there are 2^64 possible seed values) gives a sub array of size
 * 2^128 (each element in that array is a 128 bit number). Reasoning
 * behind the array being of size 2^128 is, there are 2^64 possible
 * thread index value and there is an array of size 2^64 for each of
 * those thread index. Hence 2^64 * 2^64 = 2^128 for each seed value.
 *
 * In short, this generator can produce 2^64 (seed values) * 2^128 (number
 * of elements in an array given by a seed value) = 2^192 values.
 *
 * Arguments:
 * seed:        Seed values could be any number from 0 to 2^64-1.
 * subsequence: Subsequence is just the cuda thread indexing with:
 *              - blockIdx.x * blockDim.x + threadIdx.x
 * offset:      The offset variable in PhiloxEngine  decides how many 128-bit
 *              random numbers to skip (i.e. how many groups of 4, 32-bit numbers to skip)
 *              and hence really decides the total number of randoms that can be achieved
 *              for the given subsequence.
 ','line_number':33,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':71,'multiline':False]['text':'*
   * Set the offset field of Philox Generator to the desired offset.
   ','line_number':90,'multiline':True]['text':'*
   * Gets the current offset of the Philox Generator.
   ','line_number':98,'multiline':True]['text':'*
   * Produces a unique 32-bit pseudo random number on every invocation. Bookeeps state to avoid waste.
   ','line_number':107,'multiline':True]['text':' 10 here to preserve back-compat behavior','line_number':110,'multiline':False]['text':' TODO(min-jean-cho) change to Polar method, a more efficient version of Box-Muller method','line_number':132,'multiline':False]['text':' TODO(voz) We use std:: below, and thus need a separate impl for CUDA.','line_number':133,'multiline':False]['text':' uint32_to_uniform_float returns [0,1), we need (0,1] to avoid passing 0 to log.','line_number':134,'multiline':False]['text':'*
   * Function that Skips N 128 bit numbers in a subsequence
   ','line_number':139,'multiline':True]['text':' if overflow in x has occurred, carry over to nhi','line_number':146,'multiline':False]['text':' if overflow in nhi has occurred during carry over,','line_number':149,'multiline':False]['text':' propagate that overflow to y and exit to increment z','line_number':150,'multiline':False]['text':' otherwise return','line_number':151,'multiline':False]['text':' if overflow in y has occurred during addition,','line_number':159,'multiline':False]['text':' exit to increment z','line_number':160,'multiline':False]['text':' otherwise return','line_number':161,'multiline':False]['text':'*
   * Function that Skips one 128 bit number in a subsequence
   ','line_number':172,'multiline':True]['text':' maximum value such that `MAX_INT * scale < 1.0` (with float rounding)','line_number':218,'multiline':False]['text':' namespace at','line_number':242,'multiline':False]