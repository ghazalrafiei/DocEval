['text':' This intentionally tests a deprecated API','line_number':3,'multiline':False]['text':'*
 * This file tests the legacy lambda-based API for registering kernels:
 *
 * > auto registry = c10::RegisterOperators()
 * >    .op("myfunc(Tensor a) -> Tensor", [] (Tensor a) -> Tensor {...});
 ','line_number':14,'multiline':True]['text':' assert that schema and cpu kernel are present','line_number':36,'multiline':False]['text':' this kernel should never be called','line_number':64,'multiline':False]['text':' this kernel should never be called','line_number':75,'multiline':False]['text':' now the registrar is destructed. Assert that the schema is gone.','line_number':90,'multiline':False]['text':' note: non-fallback kernels without tensor arguments don't work because there','line_number':703,'multiline':False]['text':' is no way to get the dispatch key. For operators that only have a fallback','line_number':704,'multiline':False]['text':' kernel, this must work for backwards compatibility.','line_number':705,'multiline':False]['text':' note: non-fallback kernels without tensor arguments don't work because there','line_number':719,'multiline':False]['text':' is no way to get the dispatch key. For operators that only have a fallback','line_number':720,'multiline':False]['text':' kernel, this must work for backwards compatibility.','line_number':721,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':734,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':774,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':817,'multiline':False]['text':' assert that schema and cpu kernel are present','line_number':847,'multiline':False]['text':' assert this does not fail because it matches','line_number':874,'multiline':False]['text':' and now a set of mismatching schemas','line_number':878,'multiline':False]['text':' assert this does not fail because it matches','line_number':885,'multiline':False]['text':' and now a set of mismatching schemas','line_number':889,'multiline':False]['text':' assert this does not fail because it matches','line_number':910,'multiline':False]['text':' and now a set of mismatching schemas','line_number':914,'multiline':False]['text':' assert this does not fail because it matches','line_number':929,'multiline':False]['text':' and now a set of mismatching schemas','line_number':933,'multiline':False]['text':' assert this does not fail because it matches','line_number':946,'multiline':False]['text':' and now a set of mismatching schemas','line_number':950,'multiline':False]['text':' assert this does not fail because it matches','line_number':963,'multiline':False]['text':' and now a set of mismatching schemas','line_number':967,'multiline':False]['text':' assert this does not fail because it matches','line_number':988,'multiline':False]['text':' and now a set of mismatching schemas','line_number':992,'multiline':False]['text':' assert this does not fail because it matches','line_number':1005,'multiline':False]['text':' and now a set of mismatching schemas','line_number':1009,'multiline':False]['text':' assert this does not fail because it matches','line_number':1016,'multiline':False]['text':' and now a set of mismatching schemas','line_number':1020,'multiline':False]