['text':' Take a DispatchKeySet for a Tensor and determine what the actual dispatch','line_number':16,'multiline':False]['text':' DispatchKey should be, taking into account TLS, and skipping backends which','line_number':17,'multiline':False]['text':' fall through.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' Unlike Tensor::key_set(), the value of this on a tensor can change depending','line_number':20,'multiline':False]['text':' on TLS.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' NB: If there is no valid dispatch key, this will return Undefined','line_number':23,'multiline':False]['text':' The key mask lets us eliminate (by zero entries) keys which should not','line_number':26,'multiline':False]['text':' be considered for dispatch.  There are two cases when we use this:','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' - If an operator's dispatch table contains a fallthrough entry, we','line_number':29,'multiline':False]['text':'   should bypass it entirely when finding the key','line_number':30,'multiline':False]['text':' - If a user invokes with redispatch, the mask lets us','line_number':31,'multiline':False]['text':'   zero out the key the user asked us to stop.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' These excluded backends are NOT tracked in the TLS, but must be applied','line_number':34,'multiline':False]['text':' AFTER TLS (since the backend may have been introduced for consideration','line_number':35,'multiline':False]['text':' by the included TLS), which is why you have to pass them in to this','line_number':36,'multiline':False]['text':' function (as opposed to just applying it to the input 'ks').','line_number':37,'multiline':False]['text':' TODO: It's a bit irritating that we have to do logical ORs here, it would','line_number':41,'multiline':False]['text':' be nice to only do one.  Can always_included be folded into the TLS?  Well,','line_number':42,'multiline':False]['text':' it's a bit troublesome, because fastpath TLS access requires the type of','line_number':43,'multiline':False]['text':' the TLS in question to be zero-initialized, so you don't actually win','line_number':44,'multiline':False]['text':' anyting in that case.','line_number':45,'multiline':False]['text':' A small gadget to extract the DispatchKeySet from types which are known','line_number':52,'multiline':False]['text':' to have it.  Used to extract dispatch keys from unboxed calls.','line_number':53,'multiline':False]['text':' Tensor?[] translates to this case.','line_number':69,'multiline':False]['text':' Structured Tensor[] translates to this case','line_number':77,'multiline':False]['text':' Just checking that the handling of Tensor?[] didn't change.','line_number':84,'multiline':False]['text':' do nothing','line_number':99,'multiline':False]['text':' NB: take by const reference (Don't do universal forwarding here! You','line_number':103,'multiline':False]['text':' don't want to move into this function!)','line_number':104,'multiline':False]['text':'*
 * An instance of DispatchKeyExtractor knows how to get a dispatch key given
 * a list of arguments for an operator call.
 *
 * The instance is specific for a certain operator as:
 *  - In boxed dispatch, different operators have different ways to extract
 *    the dispatch key (e.g. different numbers of arguments), and we precompute
 *    the stack locations we should look at; and
 *  - In all dispatch, some backends should be excluded from dispatch because
 *    they have been registered as fallthrough.  The set of excluded backends
 *    varies from operator, as some operators may have overridden the
 *    fallthrough with custom behavior.
 *
 *   Note - this should maintain identical impl to the py dispatcher key extraction logic
 *   at pytorch/torch/dispatcher.py
 ','line_number':111,'multiline':True]['text':' NB: Take care not to introduce a refcount bump (there's','line_number':150,'multiline':False]['text':' no safe toTensorRef method, alas)','line_number':151,'multiline':False]['text':' Tensor?[] translates to a c10::List<IValue> so we need to peek inside','line_number':158,'multiline':False]['text':' Keys that are fallthrough should be skipped','line_number':167,'multiline':False]['text':' Keys that are fallthrough should be skipped','line_number':179,'multiline':False]['text':' this is a bitset that has ones for each argument index which has to be','line_number':222,'multiline':False]['text':' considered for dispatch. This avoids having to iterate over the stack','line_number':223,'multiline':False]['text':' to find all the tensors. The bits are stored in reverse order, i.e.','line_number':224,'multiline':False]['text':' dispatch_arg_indices_reverse_[i] == true, then the i-th argument from','line_number':225,'multiline':False]['text':' the top of the stack (i.e. the i-th last argument of the function)','line_number':226,'multiline':False]['text':' is relevant for dispatch.','line_number':227,'multiline':False]['text':' dispatch_arg_indices_reverse_ is allowed to have zero bits set; that just means you must do the','line_number':228,'multiline':False]['text':' fallthrough','line_number':229,'multiline':False]['text':' Set of functionality keys for which the operator does NOT have fallthrough kernel.','line_number':232,'multiline':False]['text':' Set of functionality keys for which the operator does NOT have fallthrough kernel, defined PER BACKEND.','line_number':234,'multiline':False]['text':' This is only needed if we know that the operator has a different set of fallthroughs defined for some backends.','line_number':235,'multiline':False]['text':' Flag to tell us if we can use the single set of nonFallthroughKeys_ (fast path),','line_number':237,'multiline':False]['text':' or if we need to fall back to the slower path and check nonFallthroughKeysPerBackend_','line_number':238,'multiline':False]