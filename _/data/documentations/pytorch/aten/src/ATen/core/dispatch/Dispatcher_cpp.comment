['text':' NB: If you add more waitFor* implementations, you also have to add','line_number':89,'multiline':False]['text':' appropriate notify_all() calls to the relevant register calls','line_number':90,'multiline':False]['text':' NB: this is slightly unsound for overrides, but overrides are','line_number':112,'multiline':False]['text':' funny business anyway','line_number':113,'multiline':False]['text':' Check if we have ANYTHING; if that's the case, that means you're','line_number':140,'multiline':False]['text':' missing schema','line_number':141,'multiline':False]['text':' Postcondition: caller is responsible for disposing of registration when they','line_number':163,'multiline':False]['text':' are done','line_number':164,'multiline':False]['text':' Adding explicit destructor definition in the cpp to over linker error in Windows builds.','line_number':181,'multiline':False]['text':' Windows build doesn't produce the destructor symbol in PyTorch libs','line_number':182,'multiline':False]['text':' causing a linker failure in downstream projects.','line_number':183,'multiline':False]['text':' x-ref https://github.com/pytorch/pytorch/issues/70032','line_number':184,'multiline':False]['text':' we need a lock to avoid concurrent writes','line_number':212,'multiline':False]['text':' we need a lock to avoid concurrent writes','line_number':217,'multiline':False]['text':' NB: do not increment the counts until AFTER error checking','line_number':229,'multiline':False]['text':' we need a lock to avoid concurrent writes','line_number':236,'multiline':False]['text':' reduce def_count and actually deregister if no references left','line_number':250,'multiline':False]['text':' note: call listeners *before* operator is removed, i.e. dispatcher is still valid for removed op','line_number':257,'multiline':False]['text':' TODO: check that listeners are not relying on prepareForDeregistration()','line_number':258,'multiline':False]['text':' invariant','line_number':259,'multiline':False]['text':' If there are duplicates, we just let it through and warn about it.','line_number':292,'multiline':False]['text':' Throwing an error during static initialization causes a crash that','line_number':293,'multiline':False]['text':' doesn't give any sign of what happened.','line_number':294,'multiline':False]['text':' Test if the operator entry is completely dead, and if so remove it completely','line_number':402,'multiline':False]['text':' NOTE: Making this call fast is the only reason OperatorHandle','line_number':405,'multiline':False]['text':' stores operatorIterator_!','line_number':406,'multiline':False]['text':' NB: inferred function schema is always nullptr for fallbacks, as fallbacks','line_number':424,'multiline':False]['text':' cannot be unboxed','line_number':425,'multiline':False]['text':' If no DispatchKey is specified, print all of the operators.','line_number':492,'multiline':False]['text':' Setting sequence number in the Autograd case to associate','line_number':503,'multiline':False]['text':' the forward range with the corresponding Autograd's node','line_number':504,'multiline':False]['text':' Setting sequence number in the Autograd case to associate','line_number':516,'multiline':False]['text':' the forward range with the corresponding Autograd's node','line_number':517,'multiline':False]