['text':' note: windows build doesn't find symbols in operator files unless','line_number':5,'multiline':False]['text':' this is a header file','line_number':6,'multiline':False]['text':' eventually this should look almost identical to python arg parser, but','line_number':11,'multiline':False]['text':' it is simpler for now to work directly on this schema','line_number':12,'multiline':False]['text':'
   * We should skip parenthesis if we return a single item and it's not varret,
   * or we return nothing but varret.
   *
   * Need special handling for schema
   *   aten::items.str(Dict(str, t) self) -> (str,t)[]
   * Even though this schema returns a single item, we need add parenthesis.
   * The is necessary so the printed schema can be parsed by the C++ SchemaParser
   * Without the extra parenthesis, the parser sees the first parenthesis in '(str,t)' and mistakenly
   * treat the return type as a tuple. An alternative is to enhance the Lexer
   * to lookahead multiple tokens to accurately decide if the return type is
   * a tuple.
   ','line_number':40,'multiline':True]['text':' enclosing the single return item with parenthesis if the return type','line_number':62,'multiline':False]['text':' starts with a left parenthesis.','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' There are 2 cases','line_number':65,'multiline':False]['text':' 1. something like 'aten::items.str(Dict(str, t) self) -> ((str, t)[])'.','line_number':66,'multiline':False]['text':' without the extra parenthesis, the c++ schem parser can not parse it.','line_number':67,'multiline':False]['text':' 2. something like '-> ((str, str))'. Need extra parenthesis so the return','line_number':68,'multiline':False]['text':' type is a single tuple rather than two strings.','line_number':69,'multiline':False]['text':' PR (https://github.com/pytorch/pytorch/pull/23204) has more context about','line_number':70,'multiline':False]['text':' this. test_serialize_and_deserialize (https://github.com/pytorch/pytorch/blob/master/test/test_function_schema.py#L15)','line_number':71,'multiline':False]['text':' also covers this case.','line_number':72,'multiline':False]['text':' find the start of out args in the schema','line_number':100,'multiline':False]['text':' we are conservative on is_vararg and is_varret,','line_number':190,'multiline':False]['text':' since they are only used by internal operators','line_number':191,'multiline':False]['text':' Backwards compatibility requires covariance on argument types','line_number':199,'multiline':False]['text':' (i.e. more generic), and contravariance on return types (i.e.','line_number':200,'multiline':False]['text':'  more specific).','line_number':201,'multiline':False]['text':' we want to test both out and default args separately','line_number':209,'multiline':False]['text':' make sure among the default args, they are backward compatible','line_number':213,'multiline':False]['text':' Validate that all new arguments provided has a default value','line_number':221,'multiline':False]['text':' now compare the out args','line_number':235,'multiline':False]['text':' we are conservative on is_vararg and is_varret,','line_number':252,'multiline':False]['text':' since they are only used by internal operators','line_number':253,'multiline':False]['text':' we want to test both out and default args separately','line_number':259,'multiline':False]['text':' make sure among the default args, they are forward compatible','line_number':272,'multiline':False]['text':' Validate that all new arguments provided has a default value','line_number':284,'multiline':False]['text':' now compare the out args','line_number':310,'multiline':False]['text':' Fast-path for the common case','line_number':333,'multiline':False]['text':' First check if any of the kwargs are unknown, i.e. don't match the name of','line_number':345,'multiline':False]['text':' any argument in the schema.','line_number':346,'multiline':False]['text':' If there are unconsumed kwargs but none of them were unknown, the first','line_number':363,'multiline':False]['text':' positional argument present in the kwargs is duplicated.','line_number':364,'multiline':False]['text':' Do we have more inputs than the schema accepts?','line_number':383,'multiline':False]['text':' covariant subtyping of list of Arguments','line_number':449,'multiline':False]['text':' functions are contravariant in arguments but covariant in returns','line_number':475,'multiline':False]['text':' namespace c10','line_number':483,'multiline':False]