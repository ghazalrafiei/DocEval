['text':' Is this questionable namespace pollution?','line_number':13,'multiline':False]['text':' Maximum size per grid dimension that we assume (compute capability >= 2.0)','line_number':21,'multiline':False]['text':' For slice sorting in Thrust; extracts a slice index from a linear','line_number':67,'multiline':False]['text':' index and uses that for comparison','line_number':68,'multiline':False]['text':' Since the slices are guaranteed to be innermost,','line_number':73,'multiline':False]['text':' the segment is just via int64_t division','line_number':74,'multiline':False]['text':' For sorting in Thurst; extracts a within-slice index from a linear index','line_number':83,'multiline':False]['text':' Returns 2^(ceil(lg(n)) from Stanford bit twiddling hacks','line_number':94,'multiline':False]['text':' WARNING: This function assumes input tensors are contiguous','line_number':111,'multiline':False]['text':' We use these structures solely to find the offset to ','line_number':124,'multiline':True]['text':' each slice we are operating on ','line_number':125,'multiline':True]['text':' Collapse all other dims ','line_number':130,'multiline':True]['text':' This is used as a template parameter to calculate indices. ','line_number':140,'multiline':True]['text':' We only specialize it if all collapsed dim sizes are the ','line_number':141,'multiline':True]['text':' same; otherwise, we use -1 which is the specialization ','line_number':142,'multiline':True]['text':' parameter for arbitrary dimensions ','line_number':143,'multiline':True]['text':' namespace native','line_number':192,'multiline':False]['text':' namespace at','line_number':193,'multiline':False]