['text':' This code computes the sum of the weights in two-steps:
  1) Each GPU warp sums `NROWS_PER_THREAD` number of row given by `indeces`
  2) Each partial-sum from 1) are summed and scatter into `grad_weight`

  Notice, `NROWS_PER_THREAD` impacts the Achieved Occupancy of the
  kernel execution. If it is high, the size of the thread blocks will be
  too small to achieve good occupancy. Similarly, a very low value will
  make the size of the thread blocks in the final sum in step 2) too small.
','line_number':28,'multiline':True]['text':' Fast ceil division (no overflow checking)','line_number':39,'multiline':False]['text':' This kernel assumes that all input tensors are contiguous.','line_number':158,'multiline':False]['text':' anon namespace','line_number':205,'multiline':False]['text':' Compute the number of segments and their start position so that we do not have to','line_number':230,'multiline':False]['text':' spawn a warp per index. In this context, a segment is a number of rows that should','line_number':231,'multiline':False]['text':' be summarized.','line_number':232,'multiline':False]['text':' Unit: index in `sorted_indices` and `orig_indices`','line_number':233,'multiline':False]['text':' We split the segments up into sizes of `NROWS_PER_THREAD`','line_number':255,'multiline':False]['text':' Compute the number partial-segments per segment (some partial-segments','line_number':256,'multiline':False]['text':' may not be the full `NROWS_PER_THREAD` number of rows)','line_number':257,'multiline':False]['text':' In order to compute `partial_segment_offset`, which is the start index','line_number':268,'multiline':False]['text':' of each partial-segment in `sorted_indices`, we need to compute the','line_number':269,'multiline':False]['text':' start position of each _segment_ in `partial_segment_offset`.','line_number':270,'multiline':False]['text':' Unit: index in `partial_segment_offset`','line_number':271,'multiline':False]['text':' The total number of partial-segments is the sum of `partials_per_segment_offset`','line_number':278,'multiline':False]['text':' Now we can compute the start position of each partial-segment','line_number':289,'multiline':False]['text':' Unit: index in `sorted_indices` and `orig_indices`','line_number':290,'multiline':False]['text':' For numerical stability, the dtype of `grad_weight_per_segment`','line_number':309,'multiline':False]['text':' should match `acc_type`','line_number':310,'multiline':False]['text':' Compute the sum of each partial-segment and handle bags','line_number':319,'multiline':False]['text':' Finally, we sum all the partial-sums and scatter them','line_number':346,'multiline':False]['text':' into `grad_weight`.','line_number':347,'multiline':False]['text':' namespace at::native','line_number':365,'multiline':False]