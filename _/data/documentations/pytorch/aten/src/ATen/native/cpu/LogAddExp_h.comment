['text':' custom min and max to be used in logcumsumexp for complex arguments','line_number':9,'multiline':False]['text':' either real is nan or imag is nan','line_number':12,'multiline':False]['text':' either real is nan or imag is nan','line_number':14,'multiline':False]['text':' Reference : https://www.tensorflow.org/api_docs/python/tf/math/cumulative_logsumexp','line_number':23,'multiline':False]['text':' std::min returns first arg if one of the args is nan','line_number':24,'multiline':False]['text':' std::max returns first arg if one of the args is nan','line_number':25,'multiline':False]['text':' nan will be propagated here','line_number':27,'multiline':False]['text':' special case to correctly handle infinite cases','line_number':30,'multiline':False]['text':' either real is nan or imag is nan','line_number':41,'multiline':False]['text':' handling the "infectious" NaNs','line_number':42,'multiline':False]['text':' handle the -inf case, the imaginary part here does not really matter as the exp(value)','line_number':46,'multiline':False]['text':' will be around 0.0 and the angle (i.e. the imaginary part) cannot be determined.','line_number':47,'multiline':False]['text':' It does not matter if we're taking the exp of this value','line_number':48,'multiline':False]['text':' handle the +inf case, we don't need the special precision for log1p for small values','line_number':51,'multiline':False]['text':' and to avoid producing nan in case of real(max) == real(min) == +inf','line_number':52,'multiline':False]['text':' end namespace','line_number':60,'multiline':False]['text':'end at::native','line_number':61,'multiline':False]