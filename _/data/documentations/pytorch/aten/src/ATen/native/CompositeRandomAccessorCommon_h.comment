['text':' operator_brackets_proxy is used in','line_number':9,'multiline':False]['text':' CompositeRandomAccessor in place of operator[].','line_number':10,'multiline':False]['text':' For some iterators, references returned by operator[]','line_number':11,'multiline':False]['text':' could become invalid, operator_brackets_proxy tries to','line_number':12,'multiline':False]['text':' resolve that by making accessor[n] to be equivalent to','line_number':13,'multiline':False]['text':' *(accessor + n).','line_number':14,'multiline':False]['text':' references_holder is used as a surrogate for the','line_number':48,'multiline':False]['text':' references type from std::iterator_traits in CompositeRandomAccessor.','line_number':49,'multiline':False]['text':' It is assumed in CompositeRandomAccessor that','line_number':50,'multiline':False]['text':' References = tuple<Types&...>,','line_number':51,'multiline':False]['text':' Values = tuple<Types...> by default,','line_number':52,'multiline':False]['text':' but they could be anything as long as References could be','line_number':53,'multiline':False]['text':' cast to Values.','line_number':54,'multiline':False]['text':' If you plan to use it with STL, for example, you will need to','line_number':55,'multiline':False]['text':' define 'swap` and `get`(aka std::get) methods.','line_number':56,'multiline':False]['text':' CompositeRandomAccessor is essentially a simplified version of','line_number':93,'multiline':False]['text':' a random access iterator over two random access iterators.','line_number':94,'multiline':False]['text':' TupleInfo should contain a variadic type `tuple`, and a method `tie`,','line_number':95,'multiline':False]['text':' which constructs a tuple of references from a variadic list of arguments.','line_number':96,'multiline':False]['text':' Note that CompositeRandomAccessor does not hold key and values','line_number':120,'multiline':False]['text':' in a specific datastrcture, which means that a pointer to a (key, value)','line_number':121,'multiline':False]['text':' is not defined. Hence we just use a pointer type of the KeyAccessor.','line_number':122,'multiline':False]['text':' Pointer-like operations {','line_number':135,'multiline':False]['text':' operator->() is supposed to return a pointer type.','line_number':141,'multiline':False]['text':' Since CompositeRandomAccessor does not hold pointers to pairs,','line_number':142,'multiline':False]['text':' we just return a pointer to a key.','line_number':143,'multiline':False]['text':' }','line_number':155,'multiline':False]['text':' Prefix/postfix increment/decrement {','line_number':157,'multiline':False]['text':' }','line_number':185,'multiline':False]['text':' Arithmetic operations {','line_number':187,'multiline':False]['text':' }','line_number':224,'multiline':False]['text':' Comparison operators {','line_number':226,'multiline':False]['text':' }','line_number':256,'multiline':False]['text':' namespace at::native','line_number':263,'multiline':False]