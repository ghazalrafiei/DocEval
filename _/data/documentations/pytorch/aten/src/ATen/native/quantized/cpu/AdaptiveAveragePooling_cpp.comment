['text':'
   * out_idx: the current index of output matrix
   * out_len: the dimension_size of output matrix
   * in_len: the dimension_size of input matrix
   * Basically, in_len / out_len gives the number of
   * elements in each average computation.
   * This function computes the start index on input matrix.
   ','line_number':37,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':45,'multiline':False]['text':'
   * Parameter definition is the same as start_index.
   * This function computes the end index on input matrix.
   ','line_number':50,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':54,'multiline':False]['text':' adaptive avg pool for 2D and 3D inputs','line_number':58,'multiline':False]['text':' Set to 1 for 2D','line_number':64,'multiline':False]['text':' Set to 1 for 2D','line_number':67,'multiline':False]['text':' Set to 1 for 2D','line_number':71,'multiline':False]['text':' loop over output ','line_number':76,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':77,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':83,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':89,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':96,'multiline':False]['text':' local pointers ','line_number':99,'multiline':True]['text':' compute local average: ','line_number':111,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':113,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-signed-char-misuse)','line_number':118,'multiline':False]['text':' set output to local average ','line_number':128,'multiline':True]['text':' TODO: add the max/min clip','line_number':129,'multiline':False]['text':' ow','line_number':132,'multiline':False]['text':' oh','line_number':133,'multiline':False]['text':' od','line_number':134,'multiline':False]['text':' Allow for empty batch.','line_number':144,'multiline':False]['text':' Channels ','line_number':164,'multiline':True]['text':' Include Batch','line_number':170,'multiline':False]['text':' sizes ','line_number':186,'multiline':True]['text':' Fast path for NDHWC','line_number':199,'multiline':False]['text':' Contract batch and channels into one dimension','line_number':237,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':269,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':271,'multiline':False]['text':' Given the constraint that input_height/width % output_height/width == 0','line_number':284,'multiline':False]['text':' stride and kernel size are same.','line_number':285,'multiline':False]['text':' namespace','line_number':312,'multiline':False]['text':' namespace native','line_number':356,'multiline':False]['text':' namespace at','line_number':357,'multiline':False]