['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]['text':' QNNPACK_BCSRMATRIX_DEBUG','line_number':24,'multiline':False]['text':' Only one of owned_vec_data_ or borrowed_tuple_data_ will be meaningfully','line_number':37,'multiline':False]['text':' populated.','line_number':38,'multiline':False]['text':' A union could potentially be used here to reduce memory usage.','line_number':39,'multiline':False]['text':' std::variant is not used here because it causes internal build errors','line_number':40,'multiline':False]['text':' due to incompatibility.','line_number':41,'multiline':False]['text':' input features block size','line_number':80,'multiline':False]['text':' output features block size','line_number':81,'multiline':False]['text':' Return void for the data ptrs because it doesn't require knowing the','line_number':84,'multiline':False]['text':' underlying TypedBCSRMatrix indices dtype and that's how it's passed','line_number':85,'multiline':False]['text':' into the qnnpack fully connected sparse op','line_number':86,'multiline':False]['text':' QNNPACK_BCSRMATRIX_DEBUG','line_number':91,'multiline':False]['text':'
   * Unpack from BCSR to Dense
   * - Each value and zero point converted to int8_t by subtracting 128
   * - num_rows and num_cols are dimensions of dense weight tensor
   * - dst should be able to hold num_rows * num_cols elements
   * - zero_points should hold num_rows zero points
   ','line_number':92,'multiline':True]['text':' QNNPACK_BCSRMATRIX_DEBUG','line_number':116,'multiline':False]['text':' K must be > 0','line_number':143,'multiline':False]['text':' QNNPACK_BCSRMATRIX_DEBUG','line_number':290,'multiline':False]['text':' iterate over each block in the row','line_number':313,'multiline':False]['text':' iterate over each value in the block','line_number':319,'multiline':False]['text':'*
 * Given a BCSRMatrix (bcsr_) and a block of code enclosed in { }
 * (dispatch_body), run the block of code with the following in scope
 * 1) The BCSRMatrix's underlying TypedBCSRMatrix, called typed_bcsr
 * 2) The TypedBCSRMatrix's indices data type, called INDICES_DTYPE
 ','line_number':341,'multiline':True]['text':' Throw exception to avoid the following errors: ','line_number':375,'multiline':True]['text':' - "non-void lambda does not return a value in all control paths" ','line_number':376,'multiline':True]['text':' - "control reaches end of non-void function" ','line_number':377,'multiline':True]['text':' Throwing exception from within invalid case alone does not fix these ','line_number':378,'multiline':True]['text':' namespace qnnpack','line_number':383,'multiline':False]