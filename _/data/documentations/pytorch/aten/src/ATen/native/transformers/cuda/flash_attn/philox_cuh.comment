['text':' Pytorch also has an implementation of Philox RNG: https://github.com/pytorch/pytorch/blob/8ca3c881db3e3510fcb7725389f6a0633c9b992c/torch/csrc/jit/tensorexpr/cuda_random.h','line_number':1,'multiline':False]['text':' Philox CUDA.','line_number':3,'multiline':False]['text':' namespace flash','line_number':53,'multiline':False]['text':'key.x = (unsigned int)seed;','line_number':66,'multiline':False]['text':'key.y = (unsigned int)(seed >> 32);','line_number':67,'multiline':False]['text':'counter = make_uint4(0, 0, 0, 0);','line_number':68,'multiline':False]['text':'counter.z = (unsigned int)(subsequence);','line_number':69,'multiline':False]['text':'counter.w = (unsigned int)(subsequence >> 32);','line_number':70,'multiline':False]['text':'STATE = 0;','line_number':71,'multiline':False]['text':'incr_n(offset / 4);','line_number':72,'multiline':False]['text':' key = reinterpret_cast<const uint2&>(seed);','line_number':74,'multiline':False]['text':' if ((threadIdx.x == 0) && (blockIdx.x == 0) && (blockIdx.y == 0)) {','line_number':78,'multiline':False]['text':'     printf("Philox counter: %d, %d, %d, %d\n", counter.x, counter.y, counter.z, counter.w);','line_number':79,'multiline':False]['text':' }','line_number':80,'multiline':False]['text':' // if (STATE == 0) {','line_number':83,'multiline':False]['text':'   uint4 counter_ = counter;','line_number':84,'multiline':False]['text':'   uint2 key_ = key;','line_number':85,'multiline':False]['text':'   // 7-round philox','line_number':86,'multiline':False]['text':'   #pragma unroll','line_number':87,'multiline':False]['text':'   for (int i = 0; i < 6; i++) {','line_number':88,'multiline':False]['text':'       counter_ = pytorch_flash::philox_single_round(counter_, key_);','line_number':89,'multiline':False]['text':'     key_.x += (kPhilox10A);','line_number':90,'multiline':False]['text':'     key_.y += (kPhilox10B);','line_number':91,'multiline':False]['text':'   }','line_number':92,'multiline':False]['text':'   // output = philox_single_round(counter_, key_);','line_number':93,'multiline':False]['text':'   uint4 output = pytorch_flash::philox_single_round(counter_, key_);','line_number':94,'multiline':False]['text':'   // if ((threadIdx.x == 0) && (blockIdx.x == 0) && (blockIdx.y == 0)) {','line_number':95,'multiline':False]['text':'   //     printf("Philox counter: %u, %u, %u, %u\n", counter.x, counter.y, counter.z, counter.w);','line_number':96,'multiline':False]['text':'   //     printf("Philox output: %u, %u, %u, %u\n", output.x, output.y, output.z, output.w);','line_number':97,'multiline':False]['text':'   // }','line_number':98,'multiline':False]['text':'   incr();','line_number':99,'multiline':False]['text':' // }','line_number':100,'multiline':False]['text':' // return a float4 directly','line_number':101,'multiline':False]['text':' // unsigned long ret;','line_number':102,'multiline':False]['text':' // switch(STATE) {','line_number':103,'multiline':False]['text':' //  case 0: ret = output.x; break;','line_number':104,'multiline':False]['text':' //  case 1: ret = output.y; break;','line_number':105,'multiline':False]['text':' //  case 2: ret = output.z; break;','line_number':106,'multiline':False]['text':' //  case 3: ret = output.w; break;','line_number':107,'multiline':False]['text':' //}','line_number':108,'multiline':False]['text':' // STATE = (STATE + 1) % 4;','line_number':109,'multiline':False]['text':' return output;','line_number':110,'multiline':False]['text':' uint4 output;','line_number':121,'multiline':False]['text':' if ((threadIdx.x == 0) && (blockIdx.x == 0) && (blockIdx.y == 0)) {','line_number':152,'multiline':False]['text':'     printf("Counter before: %u, %u, %u, %u\n", counter.x, counter.y, counter.z, counter.w);','line_number':153,'multiline':False]['text':' }','line_number':154,'multiline':False]['text':' if ((threadIdx.x == 0) && (blockIdx.x == 0) && (blockIdx.y == 0)) {','line_number':156,'multiline':False]['text':'     printf("Counter after: %u, %u, %u, %u\n", counter.x, counter.y, counter.z, counter.w);','line_number':157,'multiline':False]['text':' }','line_number':158,'multiline':False]['text':' static const unsigned long kPhiloxSA = 0xD2511F53;','line_number':163,'multiline':False]['text':' static const unsigned long kPhiloxSB = 0xCD9E8D57;','line_number':164,'multiline':False]['text':' namespace pytorch_flash','line_number':167,'multiline':False]