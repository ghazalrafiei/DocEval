['text':' Implement as functors since lambdas don't get optimized.','line_number':20,'multiline':False]['text':' suppress unused warning','line_number':25,'multiline':False]['text':' suppress unused warning','line_number':53,'multiline':False]['text':' suppress unused warning','line_number':63,'multiline':False]['text':' suppress unused warning','line_number':73,'multiline':False]['text':' The kernels are implemented on an opaque,','line_number':79,'multiline':False]['text':' self-aligned type of the correct size,','line_number':80,'multiline':False]['text':' to avoid redundant kernels for different types','line_number':81,'multiline':False]['text':' of the same size.','line_number':82,'multiline':False]['text':' essentialy rewritten related to legacy::launch_kernel parts','line_number':85,'multiline':False]['text':' Do not use `const` qualifier here as it may cause issue in cuda 11.6.x. See #75434, #75545','line_number':123,'multiline':False]['text':' struct _cuda_scatter_fill_internal_kernel','line_number':157,'multiline':False]['text':' restride self and src such that','line_number':173,'multiline':False]['text':' self.shape = src.shape = index.shape','line_number':174,'multiline':False]['text':'','line_number':175,'multiline':False]['text':' restride stride[dim] such that','line_number':176,'multiline':False]['text':' if (is_scatter_like) self.stride[dim] = 0','line_number':177,'multiline':False]['text':' else src.stride[dim] = 0','line_number':178,'multiline':False]['text':' restride self and src such that','line_number':231,'multiline':False]['text':' self.shape = src.shape = index.shape','line_number':232,'multiline':False]['text':'','line_number':233,'multiline':False]['text':' restride stride[dim] such that','line_number':234,'multiline':False]['text':' if (is_scatter_like) self.stride[dim] = 0','line_number':235,'multiline':False]['text':' else src.stride[dim] = 0','line_number':236,'multiline':False]['text':' restride self and src such that','line_number':290,'multiline':False]['text':' self.shape = src.shape = index.shape','line_number':291,'multiline':False]['text':'','line_number':292,'multiline':False]['text':' restride stride[dim] such that','line_number':293,'multiline':False]['text':' if (is_scatter_like) self.stride[dim] = 0','line_number':294,'multiline':False]['text':' else src.stride[dim] = 0','line_number':295,'multiline':False]['text':' struct cuda_scatter_gather_base_kernel','line_number':335,'multiline':False]['text':' Do not use `const` qualifier here as it may cause issue in cuda 11.6.x. See #75434, #75545','line_number':345,'multiline':False]['text':' struct _cuda_scatter_fill_internal_kernel','line_number':379,'multiline':False]['text':' restride self such that','line_number':394,'multiline':False]['text':' self.shape = index.shape and','line_number':395,'multiline':False]['text':' self.stride[dim] = 0','line_number':396,'multiline':False]['text':' restride self such that','line_number':437,'multiline':False]['text':' self.shape = index.shape and','line_number':438,'multiline':False]['text':' self.stride[dim] = 0','line_number':439,'multiline':False]['text':' struct cuda_scatter_fill_base_kernel','line_number':469,'multiline':False]['text':'is_scatter_like=','line_number':472,'multiline':True]['text':' When indices are not unique, the behavior is non-deterministic','line_number':478,'multiline':False]['text':' See Note [Writing Nondeterministic Operations]','line_number':492,'multiline':False]['text':' Nondeterministic because of atomicAdd usage','line_number':493,'multiline':False]['text':'is_scatter_like=','line_number':495,'multiline':True]['text':'cast_to_opaque=','line_number':495,'multiline':True]['text':' See Note [Writing Nondeterministic Operations]','line_number':502,'multiline':False]['text':' Nondeterministic because of atomicAdd/AtomicMul usage','line_number':503,'multiline':False]['text':' namespace at::native','line_number':573,'multiline':False]