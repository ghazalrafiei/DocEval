['text':' reduction that is contiguous over the input in dim 0','line_number':21,'multiline':False]['text':' reduction that is contiguous over the input in dim 1','line_number':28,'multiline':False]['text':' computes the reduction out = op(out, in)','line_number':79,'multiline':False]['text':'reduce=','line_number':86,'multiline':True]['text':' computes the reduction out = op(out, in)','line_number':93,'multiline':False]['text':' reduce down each column of 4 * Vec::size() elements (128 or 256 bytes)','line_number':98,'multiline':False]['text':'reduce=','line_number':105,'multiline':True]['text':' reduce down the remaining columns','line_number':108,'multiline':False]['text':' static_assert(std::is_same<res_t, typename traits::arg2_t>::value, "data types must match");','line_number':120,'multiline':False]['text':'t','line_number':135,'multiline':True]['text':'iter','line_number':135,'multiline':True]['text':'num_outputs','line_number':135,'multiline':True]['text':' data_t is the input/output data type.','line_number':161,'multiline':False]['text':' acc_t is a type that contains all the necessary data','line_number':162,'multiline':False]['text':' to continue reducing.','line_number':163,'multiline':False]['text':' index_t is a one-dimensional index','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' ops_t is such that &ops_t::reduce, &ops_t::combine, and &ops_t::project exist and satisfy','line_number':166,'multiline':False]['text':' the following.','line_number':167,'multiline':False]['text':' reduce: (acc_t, data_t, index_t) -> acc_t adds one data point to the accumulated value.','line_number':168,'multiline':False]['text':' combine: (acc_t, acc_t) -> acc_t combines two accumulated values into one.','line_number':169,'multiline':False]['text':' project: acc_t -> out_t finishes the reduction, getting the required output.','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' Additionally, acc_t must be default-constructible:','line_number':172,'multiline':False]['text':' acc_t {} is an identity for combine,','line_number':173,'multiline':False]['text':' and project(acc_t {}) is the value of the operation on zero elements.','line_number':174,'multiline':False]['text':'','line_number':175,'multiline':False]['text':' The point of `combine` is to support parallelization -','line_number':176,'multiline':False]['text':' the idea is to one sequence of `reduce` calls per thread of execution,','line_number':177,'multiline':False]['text':' and then to combine them at the end with `combine`.','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' If there is more than one output element,','line_number':180,'multiline':False]['text':' our parallelization strategy is to use one thread for each of them,','line_number':181,'multiline':False]['text':' which means that `combine` will never be called.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' If, on the other hand, there is only one, then we split the input into','line_number':184,'multiline':False]['text':' into several pieces, reduce each separately, and then combine them.','line_number':185,'multiline':False]['text':' input is contiguous in dim 0, output is reduced in dim 0','line_number':267,'multiline':False]['text':' input and output are contiguous in dim 1','line_number':272,'multiline':False]['text':' stride of input in dim 0','line_number':273,'multiline':False]['text':' when reduction is on most inner dimension (dim 0 in TensorIterator)','line_number':285,'multiline':False]['text':' and input has contiguous most inner dimension, `binary_kernel_reduce_lastdim`','line_number':286,'multiline':False]['text':' can be used.','line_number':287,'multiline':False]['text':' create sub iterator to parallel on all non-reduce-dims','line_number':299,'multiline':False]['text':' namespace at::native::<anonymous>','line_number':313,'multiline':False]