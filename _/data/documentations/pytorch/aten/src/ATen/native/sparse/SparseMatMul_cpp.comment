['text':'
    This is an implementation of the SMMP algorithm:
     "Sparse Matrix Multiplication Package (SMMP)"

      Randolph E. Bank and Craig C. Douglas
      https://doi.org/10.1007/BF02070824
','line_number':27,'multiline':True]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':35,'multiline':False]['text':'
    Expands a compressed row pointer into a row indices array
    Inputs:
      `n_row` is the number of rows in `Ap`
      `Ap` is the row pointer

    Output:
      `Bi` is the row indices
  ','line_number':37,'multiline':True]['text':'
    Compute needed buffer size for matrix `C` in `C = A@B` operation.

    The matrices should be in proper CSR structure, and their dimensions
    should be compatible.
  ','line_number':61,'multiline':True]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':98,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':100,'multiline':False]['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':102,'multiline':False]['text':'
    Compute CSR entries for matrix C = A@B.

    The matrices `A` and 'B' should be in proper CSR structure, and their dimensions
    should be compatible.

    Inputs:
      `n_row`         - number of row in A
      `n_col`         - number of columns in B
      `Ap[n_row+1]`   - row pointer
      `Aj[nnz(A)]`    - column indices
      `Ax[nnz(A)]     - nonzeros
      `Bp[?]`         - row pointer
      `Bj[nnz(B)]`    - column indices
      `Bx[nnz(B)]`    - nonzeros
    Outputs:
      `Cp[n_row+1]` - row pointer
      `Cj[nnz(C)]`  - column indices
      `Cx[nnz(C)]`  - nonzeros

    Note:
      Output arrays Cp, Cj, and Cx must be preallocated
  ','line_number':104,'multiline':True]['text':' NOTE: the linked list that encodes col indices','line_number':164,'multiline':False]['text':' is not guaranteed to be sorted.','line_number':165,'multiline':False]['text':' clear arrays','line_number':173,'multiline':False]['text':' Make sure that col indices are sorted.','line_number':177,'multiline':False]['text':' TODO: a better approach is to implement a CSR @ CSC kernel.','line_number':178,'multiline':False]['text':' NOTE: Cx arrays are expected to be contiguous!','line_number':179,'multiline':False]['text':'
    Computes  the sparse-sparse matrix multiplication between `mat1` and `mat2`, which are sparse tensors in COO format.
  ','line_number':199,'multiline':True]['text':' TODO: replace with a CSR @ CSC kernel for better performance.','line_number':246,'multiline':False]['text':' end anonymous namespace','line_number':264,'multiline':False]['text':' namespace at::native','line_number':291,'multiline':False]