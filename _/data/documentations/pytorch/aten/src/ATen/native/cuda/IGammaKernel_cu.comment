['text':' NOTE: CUDA on Windows requires that the enclosing function','line_number':9,'multiline':False]['text':' of a __device__ lambda not have internal linkage.','line_number':10,'multiline':False]['text':' TODO: review jiterating igamma and igammac if/when a persistent (across processes)','line_number':12,'multiline':False]['text':'   cache is implemented, because they take a VERY long time to compile','line_number':13,'multiline':False]['text':' TODO: it's also odd these ops use gpu_kernel_with_scalars','line_number':14,'multiline':False]['text':'
 * This implementation of the regularized incomplete gamma functions and
 * their helper functions are derived from the implementation of SciPy's
 * gammainc, Cephes's igam and igamc, and Boost's Lanczos approximations.
 * See NOTICE for the licenses.
 ','line_number':18,'multiline':True]['text':' regularized lower & upper incomplete gamma','line_number':24,'multiline':False]['text':' evaluating rational function, i.e., the ratio of two polynomials','line_number':28,'multiline':False]['text':' the coefficients for numerator are given by `num` while coeffs for','line_number':29,'multiline':False]['text':' denumerator are given by `denom`','line_number':30,'multiline':False]['text':'is_cuda=','line_number':32,'multiline':True]['text':' Evaluate as a polynomial in 1/x. ','line_number':39,'multiline':True]['text':' Evaluate the numerator ','line_number':50,'multiline':True]['text':' Evaluate the denominator ','line_number':57,'multiline':True]['text':' lanczos approximation','line_number':82,'multiline':False]['text':'is_cuda=','line_number':83,'multiline':True]['text':' compute x^a * exp(-a) / gamma(a)','line_number':123,'multiline':False]['text':' corrected from (15) and (16) in [igam2] by replacing exp(x - a) with','line_number':124,'multiline':False]['text':' exp(a - x).','line_number':125,'multiline':False]['text':'is_cuda=','line_number':127,'multiline':True]['text':' Compute igam using DLMF 8.11.4. [igam1]','line_number':158,'multiline':False]['text':'is_cuda=','line_number':160,'multiline':True]['text':' power series ','line_number':173,'multiline':True]['text':' Compute igamc using DLMF 8.7.3 [igam1]. This is related to the series in','line_number':191,'multiline':False]['text':' _igam_helper_series but extra care is taken to avoid cancellation.','line_number':192,'multiline':False]['text':'is_cuda=','line_number':194,'multiline':True]['text':' Compute igam/igamc using DLMF 8.12.3/8.12.4 [igam1]','line_number':219,'multiline':False]['text':'is_cuda=','line_number':221,'multiline':True]['text':' Compute igamc using DLMF 8.9.2. [igam1]','line_number':311,'multiline':False]['text':'is_cuda=','line_number':313,'multiline':True]['text':' continued fraction ','line_number':330,'multiline':True]['text':' the calculation of the regularized upper incomplete gamma function
   * is done differently based on the values of a and x:
   * - if x and/or a is at the boundary of defined region, then assign the
   *   result at the boundary
   * - if a is large and a ~ x, then using Uniform Asymptotic Expansions for
   *   Large Parameter (see DLMF 8.12.4 [igam1])
   * - if x > 1.1 and x < a, using the substraction from the regularized lower
   *   incomplete gamma
   * - otherwise, calculate the series from [igam2] eq (5)
   ','line_number':374,'multiline':True]['text':'is_cuda=','line_number':385,'multiline':True]['text':' out of defined-region of the function','line_number':394,'multiline':False]['text':' NOTE: this __noinline__ is important -- otherwise, observed compile times significantly','line_number':452,'multiline':False]['text':' increase.  The same kernel seems to get recompiled mulitple times via gpu_kernel_with_scalars,','line_number':453,'multiline':False]['text':' multiple dtypes, etc.','line_number':454,'multiline':False]['text':' the calculation of the regularized lower incomplete gamma function
   * is done differently based on the values of a and x:
   * - if x and/or a is at the boundary of defined region, then assign the
   *   result at the boundary
   * - if a is large and a ~ x, then using Uniform Asymptotic Expansions for
   *   Large Parameter (see DLMF 8.12.3 [igam1])
   * - if x > 1 and x > a, using the substraction from the regularized upper
   *   incomplete gamma
   * - otherwise, calculate the series from [igam2] eq (4)
   ','line_number':457,'multiline':True]['text':'is_cuda=','line_number':468,'multiline':True]['text':' boundary values following SciPy','line_number':475,'multiline':False]['text':' out of defined-region of the function','line_number':477,'multiline':False]['text':' zero integration limit','line_number':489,'multiline':False]['text':' Asymptotic regime where a ~ x. ','line_number':501,'multiline':True]['text':' end of regularized lower & upper incomplete gamma','line_number':532,'multiline':False]['text':' DO NOT ADD ANY NEW KERNELS HERE','line_number':551,'multiline':False]['text':' CUDA compilation times grow quickly.  It's perfectly acceptable to have a file per kernel.','line_number':552,'multiline':False]['text':' namespace at::native','line_number':554,'multiline':False]