['text':' normalize_by_lengths ','line_number':59,'multiline':True]['text':' prefetch ','line_number':60,'multiline':True]['text':' is_weight_positional ','line_number':61,'multiline':True]['text':' use_offsets ','line_number':62,'multiline':True]['text':' use each of the mixins to store corresponding kernel and block size','line_number':77,'multiline':False]['text':' this method is thread safe (call sites may call from different threads)','line_number':82,'multiline':False]['text':' if the cache doesn't store the kernel for the incoming block size','line_number':86,'multiline':False]['text':' (so it is different from the one stored in corresponding mixin)','line_number':87,'multiline':False]['text':' regenerate the kernel (not writing it into the cache so we avoid locks)','line_number':88,'multiline':False]['text':' else retrieve the cached kernel from the corresponding mixin','line_number':92,'multiline':False]['text':' instantiate the cache with the list of storage mixins','line_number':97,'multiline':False]['text':' for each of the 8 _EmbeddingBagKernelCache* usages in the EmbeddingBag.cpp impl file','line_number':98,'multiline':False]['text':' maybe_block_size ','line_number':110,'multiline':True]['text':' namespace at::native','line_number':139,'multiline':False]