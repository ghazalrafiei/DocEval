['text':' Keep in sync with py::enum_ in Module.cpp','line_number':90,'multiline':False]['text':' Overload for selecting the convolution backend from the full set of convolution inputs.','line_number':117,'multiline':False]['text':' This overload is exposed to python for testing, etc.','line_number':118,'multiline':False]['text':' ---------------------------------------------------------------------','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' Math','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' ---------------------------------------------------------------------','line_number':132,'multiline':False]['text':' also grad_input','line_number':134,'multiline':False]['text':' also grad_output','line_number':136,'multiline':False]['text':' Often written as 2 + max_dim (extra dims for batch size and channels)','line_number':141,'multiline':False]['text':' ---------------------------------------------------------------------','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' Checking','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' ---------------------------------------------------------------------','line_number':148,'multiline':False]['text':' Used on pad, stride and dilation','line_number':150,'multiline':False]['text':' NOTE [ Convolution checks ]','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':' NB: For many call sites, it is not strictly necessary to check all of','line_number':173,'multiline':False]['text':' these relationships (for example, for forward convolution, we compute','line_number':174,'multiline':False]['text':' the size of output ourselves, so we don't actually need to check','line_number':175,'multiline':False]['text':' output.  However, writing a single function that does everything','line_number':176,'multiline':False]['text':' means we get to reuse it for both forwards and all backwards','line_number':177,'multiline':False]['text':' variants, even when the set of "real" inputs varies.  The magic of','line_number':178,'multiline':False]['text':' relational computing!','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' (There is one downside, which is that it is slightly harder to write','line_number':181,'multiline':False]['text':' error messages which are able to distinguish between real inputs','line_number':182,'multiline':False]['text':' (which the user can change) and computed inputs (which the user can','line_number':183,'multiline':False]['text':' only indirectly affect).  It would be an interesting exercise to','line_number':184,'multiline':False]['text':' come up with a general framework to handle such situations.)','line_number':185,'multiline':False]['text':' Input','line_number':195,'multiline':False]['text':' exclusive ','line_number':196,'multiline':True]['text':' Weight','line_number':199,'multiline':False]['text':' TODO: check that output->size() matches output_sizes','line_number':202,'multiline':False]['text':' TODO: check that weight matches output->sizes()','line_number':203,'multiline':False]['text':' NB: conv_output_size and conv_input_size are not bijections,','line_number':207,'multiline':False]['text':' as conv_output_size loses information; this is why conv_input_size','line_number':208,'multiline':False]['text':' takes an extra output_padding argument to resolve the ambiguity.','line_number':209,'multiline':False]['text':' ASSERT(input_size.size() > 2)','line_number':216,'multiline':False]['text':' ASSERT(input_size.size() == weight_size.size())','line_number':217,'multiline':False]['text':' ASSERT(output_size.size() > 2)','line_number':250,'multiline':False]['text':' ASSERT(output_size.size() == weight_size.size())','line_number':251,'multiline':False]['text':' disable NHWC for float64 input.','line_number':316,'multiline':False]['text':' controls whether emptyCache will be called following cudnn conv benchmarking','line_number':346,'multiline':False]['text':' disable NHWC for float64 input.','line_number':353,'multiline':False]['text':' TODO: Remove PYTORCH_MIOPEN_SUGGEST_NHWC once ROCm officially supports NHWC in MIOpen','line_number':362,'multiline':False]['text':' See #64427','line_number':363,'multiline':False]['text':' disable NHWC for float64 input.','line_number':382,'multiline':False]['text':' disable NHWC for MkldnnCPU tensor.','line_number':388,'multiline':False]['text':' check layout only for xpu tensor.','line_number':421,'multiline':False]['text':' disable NHWC for float64 input.','line_number':426,'multiline':False]['text':' namespace at::native','line_number':446,'multiline':False]