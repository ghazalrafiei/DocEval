['text':' TODO This probably should be using at::native::make_reduction','line_number':49,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':53,'multiline':False]['text':'squash_dim=','line_number':54,'multiline':True]['text':' NOLINTNEXTLINE(bugprone-signed-char-misuse)','line_number':88,'multiline':False]['text':'init_val=','line_number':94,'multiline':True]['text':' NOLINTNEXTLINE(bugprone-signed-char-misuse)','line_number':107,'multiline':False]['text':'init_val=','line_number':113,'multiline':True]['text':'init_val=','line_number':134,'multiline':True]['text':' Workaround for the error: '*' in boolean context, suggest '&&' instead','line_number':153,'multiline':False]['text':' [-Werror=int-in-bool-context]','line_number':154,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':163,'multiline':False]['text':'identity=','line_number':164,'multiline':True]['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':173,'multiline':False]['text':'identity=','line_number':174,'multiline':True]['text':' This reduction accumulates results as the type `acc_t`. By default, when','line_number':192,'multiline':False]['text':' `scalar_t` is complex, `acc_t` is the downgraded real number type.','line_number':193,'multiline':False]['text':' Otherwise, `acc_t` and `scalar_t` are the same type.','line_number':194,'multiline':False]['text':' If we can vectorize over the last dimension and the dtype','line_number':232,'multiline':False]['text':' of the output is the same as that of the input,','line_number':233,'multiline':False]['text':' then we go through the vectorised path.','line_number':234,'multiline':False]['text':' use float as accumulate type for BFloat16','line_number':236,'multiline':False]['text':' type promotion that does cast and reduction in a single kernel','line_number':266,'multiline':False]['text':' type promotion that does cast and reduction in a single kernel','line_number':271,'multiline':False]['text':' For complex outputs, the above kernels do not touch the imaginary values,','line_number':279,'multiline':False]['text':' so we must zero them out','line_number':280,'multiline':False]['text':' Refer [all, any : uint8 compatibility]','line_number':289,'multiline':False]['text':'ident=','line_number':296,'multiline':True]['text':' Adding the implementation here instead of in vec256_base to avoid','line_number':302,'multiline':False]['text':' return value inconsistency. Other comparison operators in','line_number':303,'multiline':False]['text':' vec256_base return -1/0 (all bit 1 / all bit 0) as true/false to','line_number':304,'multiline':False]['text':' follow the AVX2 convention. This would be convenient when combined','line_number':305,'multiline':False]['text':' with other vectorized operations. For example, one can use the','line_number':306,'multiline':False]['text':' logical operation results as a mask for a bit operation to','line_number':307,'multiline':False]['text':' retrieve/reset multiple elements in a vector.','line_number':308,'multiline':False]['text':'','line_number':309,'multiline':False]['text':' In this method, users would expect, e.g., all(), to return 1/0 as','line_number':310,'multiline':False]['text':' true/false.','line_number':311,'multiline':False]['text':'ident=','line_number':319,'multiline':True]['text':' Refer [all, any : uint8 compatibility]','line_number':325,'multiline':False]['text':'ident=','line_number':332,'multiline':True]['text':'ident=','line_number':345,'multiline':True]['text':' This case is special because of Vectorized<int64_t> does not','line_number':359,'multiline':False]['text':' handle upper_bound<int64_t>().','line_number':360,'multiline':False]['text':' See: https://github.com/pytorch/pytorch/issues/43254','line_number':361,'multiline':False]['text':' anonymous namespace','line_number':436,'multiline':False]['text':' mean implementation for CPU is in aten/src/ATen/native/ReduceOps.cpp','line_number':440,'multiline':False]['text':' but mean_stub must be defined for CPU as well','line_number':441,'multiline':False]['text':' namespace at::native','line_number':455,'multiline':False]