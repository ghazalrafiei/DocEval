['text':'','line_number':22,'multiline':False]['text':' input_vk: input tensor containing the features of the input sequence','line_number':23,'multiline':False]['text':'           tensor of shape (N, L, H_in) when batch_first=True','line_number':24,'multiline':False]['text':'                           (L, N, H_in) when batch_first=False','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' hx_vk: initial hidden state for each element in the batch.','line_number':27,'multiline':False]['text':'        tensor of shape (D * num_layers, N, H_out)','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' output: tensor of shape (N, L, D * H_out) when batch_first=True','line_number':30,'multiline':False]['text':'                         (L, N, D * H_out) when batch_first=False','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' h_n: tensor of shape (D * num_layers, N, H_out)','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' where','line_number':35,'multiline':False]['text':'    L = sequence length','line_number':36,'multiline':False]['text':'    N = batch size','line_number':37,'multiline':False]['text':'    D = 2 if bidirectional=True otherwise 1','line_number':38,'multiline':False]['text':'    H_in = input_size (# of expected features in the input x)','line_number':39,'multiline':False]['text':'    H_out = hidden_size (# of features in the hidden state h)','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' input sequence (vulkan)','line_number':43,'multiline':False]['text':' initial hidden state (vulkan)','line_number':44,'multiline':False]['text':' weights/biases (cpu)','line_number':45,'multiline':False]['text':' hidden output','line_number':77,'multiline':False]['text':' reshape to 2D due to Vulkan at::mm op accepts only 2D','line_number':79,'multiline':False]['text':' extract each hidden state and squeeze into 2D dim','line_number':83,'multiline':False]['text':' next input','line_number':117,'multiline':False]['text':' 2D to 4D for cat op','line_number':119,'multiline':False]['text':' USE_VULKAN_API ','line_number':134,'multiline':True]['text':' namespace','line_number':136,'multiline':False]['text':' weights/biases (cpu)','line_number':187,'multiline':False]['text':' input sequence (vulkan)','line_number':280,'multiline':False]['text':' initial hidden state (vulkan)','line_number':281,'multiline':False]['text':' (b_ir, w_ir), (b_hr, w_hr), (b_iz, w_iz),','line_number':304,'multiline':False]['text':' (b_hz, w_hz), (b_in,cw_in), (b_hn, w_hn)','line_number':305,'multiline':False]['text':' hidden output','line_number':306,'multiline':False]['text':' reshape to 2D due to Vulkan at::mm op accepts only 2D','line_number':308,'multiline':False]['text':' extract each hidden state and squeeze into 2D dim','line_number':312,'multiline':False]['text':' cxt_ir->run(x, 1.0f, 1.0f) + cxt_hr->run(h, 1.0f, 1.0f));','line_number':337,'multiline':False]['text':' cxt_iz->run(x, 1.0f, 1.0f) + cxt_hz->run(h, 1.0f, 1.0f));','line_number':340,'multiline':False]['text':' cxt_in->run(x, 1.0f, 1.0f) + r * (cxt_hn->run(h, 1.0f, 1.0f)));','line_number':343,'multiline':False]['text':' next input','line_number':345,'multiline':False]['text':' 2D to 4D for cat op','line_number':347,'multiline':False]['text':' namespace ops','line_number':356,'multiline':False]['text':' namespace vulkan','line_number':357,'multiline':False]['text':' namespace native','line_number':358,'multiline':False]['text':' namespace at','line_number':359,'multiline':False]