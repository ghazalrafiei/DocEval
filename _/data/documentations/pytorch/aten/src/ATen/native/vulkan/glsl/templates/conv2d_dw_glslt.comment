['text':'
 * KERNEL_SIZE = ($KERNEL_SIZE_X, $KERNEL_SIZE_Y)
 * TILE_SIZE = (1, 1, 1)
 * WEIGHT_STORAGE = TEXTURE_2D
 * BIAS_STORAGE = TEXTURE_2D
 * Note that for DW kernel IC = 1 so the weight layout is really OC4, H, W, 4oc
 ','line_number':1,'multiline':True]['text':'
 * Output Image
 ','line_number':11,'multiline':True]['text':'
 * Input Textures
 ','line_number':16,'multiline':True]['text':'
 * Params Buffer
 ','line_number':23,'multiline':True]['text':' extents of the output texture','line_number':27,'multiline':False]['text':' extents of the input texture','line_number':29,'multiline':False]['text':' size of the overlay region of the kernel','line_number':31,'multiline':False]['text':' width and height of the kernel','line_number':33,'multiline':False]['text':' convolution parameters','line_number':35,'multiline':False]['text':'
 * Local Work Group
 ','line_number':43,'multiline':True]['text':'
 * Computes depthwise convolution. Each shader invocation calculates the output
 * of a single output location.
 ','line_number':48,'multiline':True]['text':' Return if this global position is outside output texture bounds','line_number':55,'multiline':False]['text':' Compute the index of the top-left element of the overlay region. Note that','line_number':60,'multiline':False]['text':' negative indices can be produced indicating that the top-left element is in','line_number':61,'multiline':False]['text':' a region added by padding.','line_number':62,'multiline':False]['text':' Compute the start and end of the input indices to load. Padding is assumed','line_number':65,'multiline':False]['text':' to be constant 0 padding, so any reads from the padding region is skipped.','line_number':66,'multiline':False]['text':' The weight kernel was rearranged so that every NxN filter was flattened','line_number':76,'multiline':False]['text':' so that it fits on one row. Each filter was then stacked on top of each','line_number':77,'multiline':False]['text':' other vertically.','line_number':78,'multiline':False]