['text':' Promote inputs to FFT functions','line_number':70,'multiline':False]['text':' * Integers are promoted to the default floating type','line_number':71,'multiline':False]['text':' * If require_complex=True, all types are promoted to complex','line_number':72,'multiline':False]['text':' * Raises an error for half-precision dtypes to allow future support','line_number':73,'multiline':False]['text':' Promote integral to default float type','line_number':78,'multiline':False]['text':' Only CUDA supports half precision, but since meta tensors don't have a','line_number':84,'multiline':False]['text':' device we err on the side of accepting it','line_number':85,'multiline':False]['text':' Promote to complex','line_number':99,'multiline':False]['text':' Promote a tensor's dtype according to promote_type_fft','line_number':108,'multiline':False]['text':' Convert NumPy compatible normalization mode string to enum values','line_number':115,'multiline':False]['text':' NOTE: NumPy's normalization modes have direction-specific meanings. For example,','line_number':116,'multiline':False]['text':' "forward" translates to `by_n` for a forward transform and `none` for backward.','line_number':117,'multiline':False]['text':' Fixes the shape of x such that x.size(dims[i]) == sizes[i],','line_number':134,'multiline':False]['text':' either by zero-padding, or by slicing x starting from 0.','line_number':135,'multiline':False]['text':' Only call pad if necessary since pad copies the entire tensor','line_number':157,'multiline':False]['text':' Support out argument if defined, otherwise call functional','line_number':176,'multiline':False]['text':' variant so autograd works properly.','line_number':177,'multiline':False]['text':' Complex to real FFT','line_number':199,'multiline':False]['text':'require_complex=','line_number':206,'multiline':True]['text':'wrap_scalar=','line_number':208,'multiline':True]['text':' FIXME: _fft does not support complex_output=false with inverse=false','line_number':216,'multiline':False]['text':' Real to complex FFT','line_number':223,'multiline':False]['text':'wrap_scalar=','line_number':234,'multiline':True]['text':' FIXME: _fft_r2c doesn't support native r2c IFFT','line_number':251,'multiline':False]['text':' Complex to complex FFT','line_number':258,'multiline':False]['text':'wrap_scalar=','line_number':266,'multiline':True]['text':' Dimensions to transform, and the signal shape in those dimensions','line_number':276,'multiline':False]['text':' Pre-process n-dimensional fft's `s` and `dim` arguments.','line_number':282,'multiline':False]['text':' Wraps dimensions and applies defaulting behavior.','line_number':283,'multiline':False]['text':' Also checks transform dims are unique and transform shape is non-empty.','line_number':284,'multiline':False]['text':'wrap_scalars=','line_number':294,'multiline':True]['text':' Check dims are unique','line_number':296,'multiline':False]['text':' Has shape, may have dim','line_number':304,'multiline':False]['text':' If shape is given, dims defaults to the last shape.size() dimensions','line_number':312,'multiline':False]['text':' Translate shape of -1 to the default length','line_number':318,'multiline':False]['text':' No shape, no dim','line_number':325,'multiline':False]['text':' No shape, has dim','line_number':331,'multiline':False]['text':' Complex to complex n-dimensional fft','line_number':346,'multiline':False]['text':' namespace (anonymous)','line_number':358,'multiline':False]['text':' torch.fft.fft, analogous to NumPy's numpy.fft.fft','line_number':360,'multiline':False]['text':'forward=','line_number':364,'multiline':True]['text':'forward=','line_number':365,'multiline':True]['text':'onesided=','line_number':365,'multiline':True]['text':'forward=','line_number':371,'multiline':True]['text':'forward=','line_number':373,'multiline':True]['text':'onesided=','line_number':373,'multiline':True]['text':'forward=','line_number':381,'multiline':True]['text':'forward=','line_number':382,'multiline':True]['text':'onesided=','line_number':382,'multiline':True]['text':'forward=','line_number':388,'multiline':True]['text':'forward=','line_number':390,'multiline':True]['text':'onesided=','line_number':390,'multiline':True]['text':'forward=','line_number':397,'multiline':True]['text':'onesided=','line_number':397,'multiline':True]['text':'forward=','line_number':402,'multiline':True]['text':'onesided=','line_number':402,'multiline':True]['text':'forward=','line_number':408,'multiline':True]['text':'forward=','line_number':413,'multiline':True]['text':'forward=','line_number':419,'multiline':True]['text':'forward=','line_number':424,'multiline':True]['text':'forward=','line_number':430,'multiline':True]['text':'onesided=','line_number':430,'multiline':True]['text':'forward=','line_number':435,'multiline':True]['text':'onesided=','line_number':435,'multiline':True]['text':' TODO: For real input, perform rfftn then mirror with conjugate symmetry','line_number':443,'multiline':False]['text':'require_complex=','line_number':444,'multiline':True]['text':'forward=','line_number':445,'multiline':True]['text':' TODO: For real input, perform rfftn then mirror with conjugate symmetry','line_number':453,'multiline':False]['text':'require_complex=','line_number':454,'multiline':True]['text':'forward=','line_number':455,'multiline':True]['text':'require_complex=','line_number':463,'multiline':True]['text':'forward=','line_number':464,'multiline':True]['text':'require_complex=','line_number':472,'multiline':True]['text':'forward=','line_number':473,'multiline':True]['text':'require_complex=','line_number':484,'multiline':True]['text':'forward=','line_number':486,'multiline':True]['text':'onesided=','line_number':488,'multiline':True]['text':' Expected output size of the hermitian-symmetric dimension','line_number':513,'multiline':False]['text':' Fixup default shape handling in the last dimension,','line_number':515,'multiline':False]['text':' Expected input size of the complex-hermitian data','line_number':524,'multiline':False]['text':'require_complex=','line_number':536,'multiline':True]['text':'forward=','line_number':538,'multiline':True]['text':'require_complex=','line_number':568,'multiline':True]['text':'forward=','line_number':571,'multiline':True]['text':'forward=','line_number':576,'multiline':True]['text':'require_complex=','line_number':612,'multiline':True]['text':'forward=','line_number':615,'multiline':True]['text':'onesided=','line_number':618,'multiline':True]['text':'forward=','line_number':625,'multiline':True]['text':' TODO: arange doesn't have complex support','line_number':712,'multiline':False]['text':' Slightly faster than div_(n*d)','line_number':716,'multiline':False]['text':' See [Note: hacky wrapper removal for TensorOptions]','line_number':724,'multiline':False]['text':' TODO: arange doesn't have complex support','line_number':735,'multiline':False]['text':' Slightly faster than div_(n*d)','line_number':737,'multiline':False]['text':' See [Note: hacky wrapper removal for TensorOptions]','line_number':745,'multiline':False]['text':' If an array dim is specified, wraps them according to self.dim().','line_number':752,'multiline':False]['text':' Otherwise returns a vector of all dims.','line_number':753,'multiline':False]['text':'wrap_scalars=','line_number':760,'multiline':True]['text':' We call the following methods via CUDA hooks because they are really only','line_number':794,'multiline':False]['text':' valid when CUDA is available. See native/cuda/CuFFTPlanCache.h for more details.','line_number':795,'multiline':False]['text':' Short-time Fourier Transform, for signal analysis.
 *
 * This is modeled after librosa but with support for complex time-domain
 * signals and complex windows.
 ','line_number':822,'multiline':True]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':831,'multiline':False]['text':' Warn if window is not provided','line_number':835,'multiline':False]['text':' default_init hop_length and win_length','line_number':863,'multiline':False]['text':' pad center','line_number':937,'multiline':False]['text':' time2col','line_number':948,'multiline':False]['text':' FFT and transpose to get (batch x fft_size x num_frames)','line_number':957,'multiline':False]['text':'forward=','line_number':965,'multiline':True]['text':'center=','line_number':989,'multiline':True]['text':'mode=','line_number':989,'multiline':True]['text':' Create complex tensor from the old style of real tensor with size=(..., 2)','line_number':993,'multiline':False]['text':' This is to support istft in the transition to requiring complex input.','line_number':994,'multiline':False]['text':' NOTE: This may return a view of the input tensor, or might clone if necessary','line_number':995,'multiline':False]['text':' Inverse Short-time Fourier Transform
 *
 * This is modeled after librosa but with support for complex time-domain
 * signals and complex windows.
 ','line_number':1009,'multiline':True]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1018,'multiline':False]['text':' Warn if window is not provided','line_number':1022,'multiline':False]['text':' default_init hop_length and win_length','line_number':1049,'multiline':False]['text':' center window by padding zeros on right and left side','line_number':1116,'multiline':False]['text':' size: (channel, n_frames, fft_size)','line_number':1126,'multiline':False]['text':'forward=','line_number':1131,'multiline':True]['text':' size: (channel, n_frames, n_fft)','line_number':1131,'multiline':False]['text':' size: (channel, n_frames, n_fft)','line_number':1138,'multiline':False]['text':' size: (channel, n_frames, n_fft)','line_number':1142,'multiline':False]['text':'input_sizes=','line_number':1146,'multiline':True]['text':'dim=','line_number':1147,'multiline':True]['text':'size=','line_number':1148,'multiline':True]['text':'step=','line_number':1149,'multiline':True]['text':' size: (1, n_frames, n_fft)','line_number':1150,'multiline':False]['text':'input_sizes=','line_number':1153,'multiline':True]['text':'dim=','line_number':1154,'multiline':True]['text':'size=','line_number':1155,'multiline':True]['text':'step=','line_number':1156,'multiline':True]['text':' size: (1, expected_output_signal_len)','line_number':1156,'multiline':False]['text':' We need to trim the front padding away if centered','line_number':1161,'multiline':False]['text':' size: (channel, expected_output_signal_len)','line_number':1182,'multiline':False]['text':' zero padding if the given lengthOpt is longer than expected','line_number':1186,'multiline':False]['text':'return_complex=','line_number':1205,'multiline':True]['text':'wrap_scalars=','line_number':1213,'multiline':True]['text':' No elements need writing','line_number':1216,'multiline':False]['text':' Small dimensions may be treated as batch dims since they don't get mirrored','line_number':1219,'multiline':False]['text':' Use TensorIterator to coalesce batch dimensions','line_number':1226,'multiline':False]['text':' NOTE: Can't use TensorIterator loops because we need negative strides','line_number':1227,'multiline':False]['text':' Take coalesced batch dimensions from TensorIterator','line_number':1239,'multiline':False]['text':' Take transformed dimensions directly from the input','line_number':1243,'multiline':False]['text':' Convert to byte strides to match TensorIterator','line_number':1246,'multiline':False]['text':' For the last dimension, use negative strides to perform the mirroring','line_number':1251,'multiline':False]['text':' Reorder dimensions by stride to maximize data locality','line_number':1261,'multiline':False]['text':' Do permuted index copy into a temporary, then copy back','line_number':1271,'multiline':False]['text':' Find dims.slice(dims.size() - 1) in the new permuted order.','line_number':1281,'multiline':False]['text':' These are the dimensions that need explicit Hermitian mirroring','line_number':1282,'multiline':False]['text':' Not a batch dimension','line_number':1286,'multiline':False]['text':' Not the last dim, which is mirrored separately with negative strides','line_number':1287,'multiline':False]['text':' Dispatch to CPU or CUDA kernel to do the actual conjugate mirroring','line_number':1293,'multiline':False]['text':' at::native','line_number':1301,'multiline':False]