['text':' In real-to-complex transform, MKL FFT only fills half of the values due to','line_number':25,'multiline':False]['text':' conjugate symmetry. See native/SpectralUtils.h for more details.','line_number':26,'multiline':False]['text':' The following structs are used to fill in the other half with symmetry in','line_number':27,'multiline':False]['text':' case of real-to-complex transform with onesided=False flag.','line_number':28,'multiline':False]['text':' See NOTE [ Fourier Transform Conjugate Symmetry ] in native/SpectralOpsUtils.h.','line_number':29,'multiline':False]['text':' UBSAN gives false positives on using negative indexes with a pointer','line_number':32,'multiline':False]['text':' We explicitly loop over one row, then use this lambda to iterate over','line_number':40,'multiline':False]['text':' n-dimensions. This advances iter_index by one row, while updating in_ptr','line_number':41,'multiline':False]['text':' and out_ptr to point to the new row of data.','line_number':42,'multiline':False]['text':' The data slice we operate on may start part-way into the data','line_number':70,'multiline':False]['text':' Update iter_index and pointers to reference the start of the slice','line_number':71,'multiline':False]['text':' Explicitly loop over a Hermitian mirrored dimension','line_number':94,'multiline':False]['text':' Explicit loop over a non-mirrored dimension, so just a simple conjugated copy','line_number':115,'multiline':False]['text':' Convert strides from bytes to elements','line_number':133,'multiline':False]['text':' Construct boolean mask for mirrored dims','line_number':144,'multiline':False]['text':' Register this one implementation for all cpu types instead of compiling multiple times','line_number':162,'multiline':False]['text':' _out variants can be shared between PocketFFT and MKL','line_number':169,'multiline':False]['text':'onesided=','line_number':172,'multiline':True]['text':' namespace at::native','line_number':202,'multiline':False]['text':' AT_MKL_ENALED() || AT_POCKETFFT_ENABLED() ','line_number':203,'multiline':True]['text':' anonymous namespace','line_number':259,'multiline':False]['text':' Constructs an mkl-fft plan descriptor representing the desired transform','line_number':342,'multiline':False]['text':' For complex types, strides are in units of 2 * element_size(dtype)','line_number':343,'multiline':False]['text':' sizes are for the full signal, including batch size and always two-sided','line_number':344,'multiline':False]['text':' precision','line_number':353,'multiline':False]['text':' signal type','line_number':361,'multiline':False]['text':' create descriptor with signal size','line_number':369,'multiline':False]['text':' out of place FFT','line_number':374,'multiline':False]['text':' batch mode','line_number':376,'multiline':False]['text':' batch dim stride, i.e., dist between each data','line_number':380,'multiline':False]['text':' signal strides','line_number':387,'multiline':False]['text':' first val is offset, set to zero (ignored)','line_number':388,'multiline':False]['text':' if conjugate domain of real is involved, set standard CCE storage type','line_number':397,'multiline':False]['text':' this will become default in MKL in future','line_number':398,'multiline':False]['text':' rescale if requested','line_number':402,'multiline':False]['text':' finalize','line_number':419,'multiline':False]['text':' Execute a general fft operation (can be c2c, onesided r2c or onesided c2r)','line_number':425,'multiline':False]['text':' Permute dimensions so batch dimensions come first, and in stride order','line_number':432,'multiline':False]['text':' This maximizes data locality when collapsing to a single batch dimension','line_number':433,'multiline':False]['text':' Collapse batch dimensions into a single dimension','line_number':449,'multiline':False]['text':' run the FFT','line_number':481,'multiline':False]['text':' Inplace reshaping to original batch shape and inverting the dimension permutation','line_number':488,'multiline':False]['text':' Sort transform dimensions by input layout, for best performance','line_number':502,'multiline':False]['text':' exclude_last is for onesided transforms where the last dimension cannot be reordered','line_number':503,'multiline':False]['text':' n-dimensional complex to real IFFT','line_number':512,'multiline':False]['text':' NOTE: Multi-dimensional C2R transforms don't agree with numpy in cases','line_number':515,'multiline':False]['text':' where the input isn't strictly Hermitian-symmetric. Instead, we use a','line_number':516,'multiline':False]['text':' multi-dim C2C transform followed by a 1D C2R transform.','line_number':517,'multiline':False]['text':'','line_number':518,'multiline':False]['text':' Such inputs are technically out of contract though, so maybe a disagreement','line_number':519,'multiline':False]['text':' is okay.','line_number':520,'multiline':False]['text':'forward=','line_number':524,'multiline':True]['text':'forward=','line_number':532,'multiline':True]['text':' n-dimensional real to complex FFT','line_number':535,'multiline':False]['text':'exclude_last=','line_number':546,'multiline':True]['text':'forward=','line_number':548,'multiline':True]['text':' n-dimensional complex to complex FFT/IFFT','line_number':556,'multiline':False]['text':' namespace at::native','line_number':564,'multiline':False]['text':' namespace at::native','line_number':598,'multiline':False]