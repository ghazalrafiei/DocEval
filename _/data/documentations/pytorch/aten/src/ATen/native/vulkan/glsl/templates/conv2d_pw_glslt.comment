['text':'
 * TILE_SIZE = ($TILE_SIZE_X, $TILE_SIZE_Y, 1)
 * WEIGHT_STORAGE = TEXTURE_2D
 * WEIGHT_STORAGE_LAYOUT = OC4,IC4,4ic,4oc
 * BIAS_STORAGE = TEXTURE_2D
 * REGISTER_FOR = $REGISTER_FOR
 ','line_number':1,'multiline':True]['text':'
 * Output Image
 ','line_number':11,'multiline':True]['text':'
 * Input Textures
 ','line_number':16,'multiline':True]['text':'
 * Params Buffer
 ','line_number':23,'multiline':True]['text':' extents of the output texture','line_number':27,'multiline':False]['text':' extents of the input texture','line_number':29,'multiline':False]['text':' size of the overlay region of the kernel','line_number':31,'multiline':False]['text':' width and height of the kernel','line_number':33,'multiline':False]['text':' convolution parameters','line_number':35,'multiline':False]['text':'
 * Local Work Group
 ','line_number':43,'multiline':True]['text':'
 * Computes a 2D pointwise convolution of a 2x2 output tile. Calculating an
 * output tile for pointwise convolution is more efficient because the kernel
 * size is only 1x1, making it much easier to re-use loaded texels from uKernel.
 ','line_number':48,'multiline':True]['text':' Output position for TILE_SIZE_X, TILE_SIZE_Y = 2, 2','line_number':56,'multiline':False]['text':' +--------+--------+','line_number':57,'multiline':False]['text':' | pos[0] | pos[1] |','line_number':58,'multiline':False]['text':' +--------+--------+','line_number':59,'multiline':False]['text':' | pos[2] | pos[3] |','line_number':60,'multiline':False]['text':' +--------+--------+','line_number':61,'multiline':False]['text':' If the top left position is out of bounds, then this invocation will have','line_number':70,'multiline':False]['text':' no work to do.','line_number':71,'multiline':False]['text':' Compute the index of the input texture that needs to be loaded for each','line_number':76,'multiline':False]['text':' output position. Note that negative indices can be produced indicating that','line_number':77,'multiline':False]['text':' the top-left element is in a region added by padding.','line_number':78,'multiline':False]['text':' Since the kernel is 1x1, we only have to loop over the depth dimension.','line_number':90,'multiline':False]['text':' During prepacking, the weight tensor has been permuted so that the','line_number':93,'multiline':False]['text':' channel (IC) dim is along the x axis, and the batch (OC) dim is along','line_number':94,'multiline':False]['text':' the z axis.','line_number':95,'multiline':False]['text':' For 2x2 tile size algorithm works as follows.','line_number':107,'multiline':False]['text':' To explain the calculations below, the contents one in_tex and the','line_number':108,'multiline':False]['text':' group of 4 texels loaded from uKernel are shown:','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':'   in_tex               uKernel','line_number':111,'multiline':False]['text':'    -x->                   ---x--->','line_number':112,'multiline':False]['text':'   +---+              +----+----+----+----+','line_number':113,'multiline':False]['text':' ^ | w |           ^  | D0 | D1 | D2 | D3 |','line_number':114,'multiline':False]['text':' | +---+           |  +----+----+----+----+','line_number':115,'multiline':False]['text':' | | z |           |  | C0 | C1 | C2 | C3 |','line_number':116,'multiline':False]['text':' z +---+           z  +----+----+----+----+','line_number':117,'multiline':False]['text':' | | y |           |  | B0 | B2 | B2 | B3 |','line_number':118,'multiline':False]['text':' | +---+           |  +----+----+----+----+','line_number':119,'multiline':False]['text':'   | x |              | A0 | A1 | A2 | A3 |','line_number':120,'multiline':False]['text':'   +---+              +----+----+----+----+','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' In the uKernel graphic, cells sharing the same letter are from','line_number':123,'multiline':False]['text':' the same batch/output channel index, and the number denotes a unique','line_number':124,'multiline':False]['text':' channel index. To calculate the output texel, the following','line_number':125,'multiline':False]['text':' calculation is performed:','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':128,'multiline':False]['text':'  | x | | D0 |   | y | | D1 |   | z | | D2 |   | w | | D3 |','line_number':129,'multiline':False]['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':130,'multiline':False]['text':'  | x | | C0 |   | y | | C1 |   | z | | C2 |   | w | | C3 |','line_number':131,'multiline':False]['text':'  +---+X+----+ + +---+X+----+ + +---+X+----+ + +---+X+----+','line_number':132,'multiline':False]['text':'  | x | | B0 |   | y | | B1 |   | z | | B2 |   | w | | B3 |','line_number':133,'multiline':False]['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':134,'multiline':False]['text':'  | x | | A0 |   | y | | A1 |   | z | | A2 |   | w | | A3 |','line_number':135,'multiline':False]['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':'  which is what is expressed in the following calculations. This is done','line_number':138,'multiline':False]['text':'  for each output position.','line_number':139,'multiline':False]