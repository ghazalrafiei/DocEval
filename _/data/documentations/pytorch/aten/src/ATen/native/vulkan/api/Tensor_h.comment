['text':' Do not allow empty vTensorStorage construction','line_number':29,'multiline':False]['text':' Context','line_number':50,'multiline':False]['text':' Resource sizings','line_number':55,'multiline':False]['text':' Image Texture','line_number':59,'multiline':False]['text':' Last Access - used to insert memory barriers','line_number':63,'multiline':False]['text':' Memory barrier insertion','line_number':67,'multiline':False]['text':' Validation','line_number':73,'multiline':False]['text':' Do not allow empty vTensor construction','line_number':84,'multiline':False]['text':' Default constructor','line_number':87,'multiline':False]['text':' Default constructor for quantized vTensor','line_number':95,'multiline':False]['text':' Allows construction of vTensor from aten Tensor params','line_number':105,'multiline':False]['text':' Allows construction of quantized vTensor from aten Tensor params','line_number':113,'multiline':False]['text':' Copy Constructor and Assignment; Ideally copying  would be disabled','line_number':123,'multiline':False]['text':' (see the reasoning for move assignment below) but it is required for','line_number':124,'multiline':False]['text':' compatibility with OpaqueTensorImpl','line_number':125,'multiline':False]['text':' Move Constructor and assignment','line_number':129,'multiline':False]['text':' Used for passing buffer sizes and strides data to shaders','line_number':133,'multiline':False]['text':' Tensor Options','line_number':142,'multiline':False]['text':' GPU specific memory layout qualifier','line_number':145,'multiline':False]['text':' Sizes and Strides','line_number':148,'multiline':False]['text':' Storage Dimensions. When stored on the GPU, one dimension will be aligned','line_number':152,'multiline':False]['text':' to the next multiple of 4 in order to take advantage of vec4 data types.','line_number':153,'multiline':False]['text':' A Vulkan uniform buffer containing sizes and strides of the GPU buffer that','line_number':157,'multiline':False]['text':' can be passed into a shader.','line_number':158,'multiline':False]['text':' Quantization params','line_number':161,'multiline':False]['text':' Even at the cost of a heap allocation plus the resulting negative impact','line_number':166,'multiline':False]['text':' on cache locality due to the subsequent pointer chasing, it is still','line_number':167,'multiline':False]['text':' critcal to share the view across vTensor implementations to minimize','line_number':168,'multiline':False]['text':' programmer errors.  Ideally this class should have been only made movable,','line_number':169,'multiline':False]['text':' and non-copyable - something we cannot do unfortunately due to the inner','line_number':170,'multiline':False]['text':' workings of at::TensorImpl requiring copy semantics in','line_number':171,'multiline':False]['text':' at::TensorImpl::release_resources() to function as expected.  Now that this','line_number':172,'multiline':False]['text':' class is made copyable though, a new door to a whole new class of bugs is','line_number':173,'multiline':False]['text':' opened, in that there now is a chance of two [shallow] copies, have their','line_number':174,'multiline':False]['text':' StorageState objects go out of sync as a result of an operation being','line_number':175,'multiline':False]['text':' performed on one shallow copy that is not reflected in the other.','line_number':176,'multiline':False]['text':' Technically, if the programmer is very careful, it is possible to avoid','line_number':177,'multiline':False]['text':' this trap and not pay the cost of indirection, but the resulting bugs of','line_number':178,'multiline':False]['text':' missing memory barriers will be so frustrating to hunt down for those','line_number':179,'multiline':False]['text':' unfamiliar with the internal mechanics of this class, that I decided to','line_number':180,'multiline':False]['text':' take the performance pentalty of this extra layer of indirection in favor','line_number':181,'multiline':False]['text':' of making this class easier to use.','line_number':182,'multiline':False]['text':'
   Texture Access
  ','line_number':186,'multiline':True]['text':'
    Metadata
  ','line_number':211,'multiline':True]['text':'
   * Extract a ScalarType from the TensorOptions member
   ','line_number':219,'multiline':True]['text':'
   * Get a c10::ScalarType that corresponds to the image format of the texture
   ','line_number':226,'multiline':True]['text':'
   * Get a uniform buffer containing sizes and strides information of the GPU
   * buffer
   ','line_number':257,'multiline':True]['text':'
   * Constructs a BufferMetdata struct based on the original sizes and strides
   * to pass into a shader.
   ','line_number':265,'multiline':True]['text':'
   * Returns numel but based on gpu_sizes_ instead of sizes_
   ','line_number':311,'multiline':True]['text':'
   * Return nbytes but bnased on gpu_sizes_ instead of sizes_
   ','line_number':318,'multiline':True]['text':' namespace vulkan','line_number':334,'multiline':False]['text':' namespace native','line_number':335,'multiline':False]['text':' namespace at','line_number':336,'multiline':False]['text':' USE_VULKAN_API ','line_number':338,'multiline':True]