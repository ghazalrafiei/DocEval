['text':'
  Computes the Cholesky decomposition of matrices stored in `input`.
  This is an in-place routine and the content of 'input' is overwritten with the result.

  Args:
  * `input` - [in] Input tensor for the Cholesky decomposition
              [out] Cholesky decomposition result
  * `info` -  [out] Tensor filled with LAPACK error codes,
                    positive values indicate that the matrix is not positive definite.
  * `upper` - controls whether the upper (true) or lower (false) triangular portion of `input` is used

  For further details, please see the LAPACK documentation for POTRF.
','line_number':22,'multiline':True]['text':' This is a type dispatching helper function for 'apply_cholesky'','line_number':59,'multiline':False]['text':'
Copies the lower (or upper) triangle of the square matrix to the other half and conjugates it.
This operation is performed in-place.
','line_number':66,'multiline':True]['text':' For small matrices OpenMP overhead is too large','line_number':90,'multiline':False]['text':'
Computes the inverse of a symmetric (Hermitian) positive-definite matrix n-by-n matrix 'input' using the Cholesky factorization
This is an in-place routine, content of 'input' is overwritten.
'infos' is an int Tensor containing error codes for each matrix in the batched input.
For more information see LAPACK's documentation for POTRI routine.
','line_number':98,'multiline':True]['text':' LAPACK writes to only upper/lower part of the matrix leaving the other side unchanged','line_number':122,'multiline':False]['text':' This is a type dispatching helper function for 'apply_cholesky_inverse'','line_number':128,'multiline':False]['text':' This function calculates the inverse matrix in-place','line_number':130,'multiline':False]['text':' result should be in column major order and contain matrices to invert','line_number':131,'multiline':False]['text':' the content of result is overwritten by 'apply_cholesky_inverse'','line_number':132,'multiline':False]['text':'
  Computes the eigenvalues and eigenvectors of n-by-n matrix 'input'.
  This is an in-place routine, content of 'input', 'values', 'vectors' is overwritten.
  'infos' is an int Tensor containing error codes for each matrix in the batched input.
  For more information see LAPACK's documentation for GEEV routine.
','line_number':139,'multiline':True]['text':' only right eigenvectors are computed','line_number':154,'multiline':False]['text':' only right eigenvectors are computed','line_number':164,'multiline':False]['text':' call lapackEig once to get the optimal size for work data','line_number':176,'multiline':False]['text':' This is a type dispatching helper function for 'apply_linalg_eig'','line_number':196,'multiline':False]['text':' This function calculates the non-symmetric eigendecomposition in-place','line_number':198,'multiline':False]['text':' tensors should be in batched column major memory format','line_number':199,'multiline':False]['text':' the content of eigenvalues, eigenvectors and infos is overwritten by 'apply_linalg_eig'','line_number':200,'multiline':False]['text':' apply_linalg_eig modifies in-place provided input matrix, therefore we need a copy','line_number':202,'multiline':False]['text':' make input_working_copy to have Fortran contiguous memory layout','line_number':204,'multiline':False]['text':'
  Computes eigenvalues and eigenvectors of the input that is stored initially in 'vectors'.
  The computation is done in-place: 'vectors' stores the input and will be overwritten,
  'values' should be an allocated empty array.
  'infos' is used to store information for possible checks for error.
  'upper' controls the portion of input matrix to consider in computations
  'compute_eigenvectors' controls whether eigenvectors should be computed.
  This function doesn't do any error checks and it's assumed that every argument is valid.
','line_number':212,'multiline':True]['text':' Using 'int' instead of int32_t or int64_t is consistent with the current LAPACK interface','line_number':245,'multiline':False]['text':' It really should be changed in the future to something like lapack_int that depends on the specific LAPACK library that is linked','line_number':246,'multiline':False]['text':' or switch to supporting only 64-bit indexing by default.','line_number':247,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':253,'multiline':False]['text':' call lapackSyevd once to get the optimal size for work data','line_number':256,'multiline':False]['text':' Now call lapackSyevd for each matrix in the batched input','line_number':276,'multiline':False]['text':' The current behaviour for Linear Algebra functions to raise an error if something goes wrong','line_number':283,'multiline':False]['text':' or input doesn't satisfy some requirement','line_number':284,'multiline':False]['text':' therefore return early since further computations will be wasted anyway','line_number':285,'multiline':False]['text':' This is a type dispatching helper function for 'apply_lapack_eigh'','line_number':293,'multiline':False]['text':' This function calculates the symmetric/hermitian eigendecomposition','line_number':295,'multiline':False]['text':' in-place tensors should be in batched column major memory format the','line_number':296,'multiline':False]['text':' content of eigenvalues, eigenvectors and infos is overwritten by','line_number':297,'multiline':False]['text':' 'apply_lapack_eigh'','line_number':298,'multiline':False]['text':'
  The geqrf function computes the QR decomposition of matrices stored in `input`.
  However, rather than producing a Q matrix directly, it produces a sequence of
  elementary reflectors which may later be composed to construct Q - for example
  with the orgqr or ormqr functions.

  Args:
  * `input` - [in] Input tensor for QR decomposition
              [out] QR decomposition result which contains:
              i)  The elements of R, on and above the diagonal.
              ii) Directions of the reflectors implicitly defining Q.
             Tensor with the directions of the elementary reflectors below the diagonal,
              it will be overwritten with the result
  * `tau` - [out] Tensor which will contain the magnitudes of the reflectors
            implicitly defining Q.

  For further details, please see the LAPACK documentation for GEQRF.
','line_number':306,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':342,'multiline':False]['text':' Run once, first to get the optimum work size.','line_number':344,'multiline':False]['text':' Since we deal with batches of matrices with the same dimensions, doing this outside','line_number':345,'multiline':False]['text':' the loop saves (batch_size - 1) workspace queries which would provide the same result','line_number':346,'multiline':False]['text':' and (batch_size - 1) calls to allocate and deallocate workspace using at::empty()','line_number':347,'multiline':False]['text':' if lwork is less than 'n' then a warning is printed:','line_number':353,'multiline':False]['text':' Intel MKL ERROR: Parameter 7 was incorrect on entry to SGEQRF.','line_number':354,'multiline':False]['text':' now compute the actual QR and tau','line_number':362,'multiline':False]['text':' info from lapackGeqrf only reports if the i-th parameter is wrong','line_number':365,'multiline':False]['text':' so we don't need to check it all the time','line_number':366,'multiline':False]['text':' This is a type dispatching helper function for 'apply_geqrf'','line_number':372,'multiline':False]['text':'
  The orgqr function allows reconstruction of an orthogonal (or unitary) matrix Q,
  from a sequence of elementary reflectors, such as produced by the geqrf function.

  Args:
  * `self` - Tensor with the directions of the elementary reflectors below the diagonal,
              it will be overwritten with the result
  * `tau` - Tensor containing the magnitudes of the elementary reflectors

  For further details, please see the LAPACK documentation for ORGQR and UNGQR.
','line_number':379,'multiline':True]['text':' Some LAPACK implementations might not work well with empty matrices:','line_number':396,'multiline':False]['text':' workspace query might return lwork as 0, which is not allowed (requirement is lwork >= 1)','line_number':397,'multiline':False]['text':' We don't need to do any calculations in this case, so let's return early','line_number':398,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':413,'multiline':False]['text':' LAPACK's requirement','line_number':416,'multiline':False]['text':' Run once, first to get the optimum work size.','line_number':420,'multiline':False]['text':' Since we deal with batches of matrices with the same dimensions, doing this outside','line_number':421,'multiline':False]['text':' the loop saves (batch_size - 1) workspace queries which would provide the same result','line_number':422,'multiline':False]['text':' and (batch_size - 1) calls to allocate and deallocate workspace using at::empty()','line_number':423,'multiline':False]['text':' now compute the actual Q','line_number':435,'multiline':False]['text':' info from lapackOrgqr only reports if the i-th parameter is wrong','line_number':438,'multiline':False]['text':' so we don't need to check it all the time','line_number':439,'multiline':False]['text':' This is a type dispatching helper function for 'apply_orgqr'','line_number':445,'multiline':False]['text':'
  Solves a least squares problem. That is minimizing ||B - A X||.

  Input args:
  * 'input' - Tensor containing batches of m-by-n matrix A.
  * 'other' - Tensor containing batches of max(m, n)-by-nrhs matrix B.
  * 'cond' - relative tolerance for determining rank of A.
  * 'driver' - the name of the LAPACK driver that is used to compute the solution.
  Output args (modified in-place):
  * 'solution' - Tensor to store the solution matrix X.
  * 'residuals' - Tensor to store values of ||B - A X||.
  * 'rank' - Tensor to store the rank of A.
  * 'singular_values' - Tensor to store the singular values of A.
  * 'infos' - Tensor to store error codes of linear algebra math library.

  For further details, please see the LAPACK documentation for GELS/GELSY/GELSS/GELSD routines.
','line_number':453,'multiline':True]['text':' only 'gels' driver does not compute the rank','line_number':502,'multiline':False]['text':' 'gelsd' and 'gelss' are SVD-based algorithms','line_number':511,'multiline':False]['text':' so we can get singular values','line_number':512,'multiline':False]['text':' 'jpvt' workspace array is used only for 'gelsy' which uses QR factorization with column pivoting','line_number':522,'multiline':False]['text':' Run once the driver, first to get the optimal workspace size','line_number':530,'multiline':False]['text':' default value to decide the opt size for workspace arrays','line_number':531,'multiline':False]['text':' 'rwork' only used for complex inputs and 'gelsy', 'gelsd' and 'gelss' drivers','line_number':551,'multiline':False]['text':' case driver_t::Gelsd:','line_number':563,'multiline':False]['text':' 'iwork' workspace array is relevant only for 'gelsd'','line_number':571,'multiline':False]['text':' we want the output `rank` Tensor to be of type int64_t,','line_number':597,'multiline':False]['text':' however LAPACK accepts int. That is why we use an integer','line_number':598,'multiline':False]['text':' variable that then gets promoted and written into `rank`.','line_number':599,'multiline':False]['text':' We use this approach over a tensor cast for better performance.','line_number':600,'multiline':False]['text':' This is a type and driver dispatching helper function for 'apply_lstsq'','line_number':609,'multiline':False]['text':'
  The ormqr function multiplies Q with another matrix from a sequence of
  elementary reflectors, such as is produced by the geqrf function.

  Args:
  * `input`     - Tensor with elementary reflectors below the diagonal,
                  encoding the matrix Q.
  * `tau`       - Tensor containing the magnitudes of the elementary
                  reflectors.
  * `other`     - [in] Tensor containing the matrix to be multiplied.
                  [out] result of the matrix multiplication with Q.
  * `left`      - bool, determining whether `other` is left- or right-multiplied with Q.
  * `transpose` - bool, determining whether to transpose (or conjugate transpose) Q before multiplying.

  For further details, please see the LAPACK documentation.
','line_number':625,'multiline':True]['text':' LAPACK's requirement','line_number':667,'multiline':False]['text':' Query for the optimal size of the workspace tensor','line_number':670,'multiline':False]['text':' now compute the actual result','line_number':683,'multiline':False]['text':' info from lapackOrmqr only reports if the i-th parameter is wrong','line_number':691,'multiline':False]['text':' so we don't need to check it all the time','line_number':692,'multiline':False]['text':' This is a type dispatching helper function for 'apply_ormqr'','line_number':698,'multiline':False]['text':'
Solves the matrix equation op(A) X = B
X and B are n-by-nrhs matrices, A is a unit, or non-unit, upper or lower triangular matrix
and op(A) is one of op(A) = A or op(A) = A^T or op(A) = A^H.
This is an in-place routine, content of 'B' is overwritten.
'upper' controls the portion of input matrix to consider in computations,
'transpose' chooses op(A)
'unitriangular' if true then the diagonal elements of A are assumed to be 1
and the actual diagonal values are not used.
','line_number':705,'multiline':True]['text':' This allows to pass rectangular A and B when left = True','line_number':733,'multiline':False]['text':'
  Computes the LU decomposition of a m×n matrix or batch of matrices in 'input' tensor.
  This is an in-place routine, content of 'input', 'pivots', and 'infos' is overwritten.

  Args:
  * `input` - [in] the input matrix for LU decomposition
              [out] the LU decomposition
  * `pivots` - [out] the pivot indices
  * `infos` - [out] error codes, positive values indicate singular matrices
  * `compute_pivots` - should always be true (can be false only for CUDA)

  For further details, please see the LAPACK documentation for GETRF.
','line_number':884,'multiline':True]['text':' avoid overflow','line_number':931,'multiline':False]['text':' A heuristic tested on a 32 core/socket ICX system','line_number':933,'multiline':False]['text':' https://github.com/pytorch/pytorch/pull/93037#discussion_r1090112948','line_number':934,'multiline':False]['text':' This is a type dispatching helper function for 'apply_lu'','line_number':942,'multiline':False]['text':'
  Solves the matrix equation A X = B
  X and B are n-by-nrhs matrices, A is represented using the LU factorization.
  This is an in-place routine, content of `b` is overwritten.

  Args:
  * `b` -  [in] the right hand side matrix B
           [out] the solution matrix X
  * `lu` - [in] the LU factorization of matrix A (see at::linalg_lu_factor)
  * `pivots` - [in] the pivot indices (see at::linalg_lu_factor)

  For further details, please see the LAPACK documentation for GETRS.
','line_number':949,'multiline':True]['text':' lu and pivots tensors can be broadcast to B','line_number':985,'multiline':False]['text':' here we construct a helper indexing tensor to linearly index into LU and pivots','line_number':986,'multiline':False]['text':' info from lapackLuSolve only reports if the i-th parameter is wrong','line_number':1001,'multiline':False]['text':' so we don't need to check it all the time','line_number':1002,'multiline':False]['text':' This is a type dispatching helper function for 'apply_lu_solve'','line_number':1008,'multiline':False]['text':' Lapack will write into unrelated memory if pivots are not in the right range so we do','line_number':1010,'multiline':False]['text':' some simple sanity checks here for the CPU version','line_number':1011,'multiline':False]['text':' rwork is just used for the complex decomposition','line_number':1057,'multiline':False]['text':' Query svd for the optimal lwork size','line_number':1064,'multiline':False]['text':' Compute S, U (optionally) and Vh (optionally)','line_number':1080,'multiline':False]['text':' Need to copy A as column major, as its contents will be destroyed in the LAPACK call.','line_number':1096,'multiline':False]['text':' FIXME It'd be more efficient, rather than cloning A, to copy it into `U` or `Vh` (depending on m > n','line_number':1097,'multiline':False]['text':' or m < n) and call jobz='O'','line_number':1098,'multiline':False]['text':' WARNING: linalg.lu_factor returns int32 pivots,','line_number':1113,'multiline':False]['text':' this behavior could change in the future.','line_number':1114,'multiline':False]['text':' anonymous namespace','line_number':1136,'multiline':False]['text':' namespace at::native','line_number':1226,'multiline':False]