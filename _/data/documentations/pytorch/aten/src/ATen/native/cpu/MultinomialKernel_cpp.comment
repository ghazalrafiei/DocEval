['text':' See Note [Acquire lock when using random generators]','line_number':30,'multiline':False]['text':' cumulative probability distribution vector ','line_number':36,'multiline':True]['text':' Get normalized cumulative distribution from prob distribution ','line_number':52,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':54,'multiline':False]['text':' NB: std::isfinite doesn't bode well with libc++ for half datatypes,','line_number':61,'multiline':False]['text':' so we manually cast it to a double and perform the check.','line_number':62,'multiline':False]['text':' normalize cumulative probability distribution so that last val is 1
    i.e. doesn't assume original self row sums to one ','line_number':81,'multiline':True]['text':' sample a probability mass from a uniform distribution ','line_number':90,'multiline':True]['text':' Do a binary search for the slot in which the prob falls
      ie cum_dist[row][slot-1] < uniform_prob < cum_distr[row][slot] ','line_number':93,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':97,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':99,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':101,'multiline':False]['text':' Make sure the last cumulative distribution bucket sums to 1 ','line_number':103,'multiline':True]['text':' store in result tensor (will be incremented for lua compat by wrapper)
       ','line_number':117,'multiline':True]['text':' See Note [Acquire lock when using random generators]','line_number':134,'multiline':False]['text':' cumulative probability distribution vector ','line_number':140,'multiline':True]['text':' Get normalized cumulative distribution from prob distribution ','line_number':156,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':158,'multiline':False]['text':' NB: std::isfinite doesn't bode well with libc++ for half datatypes,','line_number':165,'multiline':False]['text':' so we manually cast it to a double and perform the check.','line_number':166,'multiline':False]['text':' normalize cumulative probability distribution so that last val is 1
    i.e. doesn't assume original self row sums to one ','line_number':185,'multiline':True]['text':' sample a probability mass from a uniform distribution ','line_number':194,'multiline':True]['text':' Do a binary search for the slot in which the prob falls
      ie cum_dist[row][slot-1] < uniform_prob < cum_distr[row][slot] ','line_number':197,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':201,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':203,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':205,'multiline':False]['text':' Make sure the last cumulative distribution bucket sums to 1 ','line_number':207,'multiline':True]['text':' store in result tensor (will be incremented for lua compat by wrapper)
       ','line_number':221,'multiline':True]['text':' namespace','line_number':240,'multiline':False]['text':' namespace at::native','line_number':245,'multiline':False]