['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2023 NVIDIA CORPORATION & AFFILIATES. All rights
 *reserved. SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]['text':'! \file
  \brief Epilogue for threadblock scoped GEMMs using Tensor Ops.

  File copied from <cutlass/epilogue/threadblock/epilogue.h>
  then modified to:
  (1) load 2 source fragments at the same time (pipelining)
  (2) support reading from a different dtype
  (3) pass the row id to the OutputOp if it takes it
    (see MemoryEfficientAttentionNormalize)
  Note that in general the fragment passed to the OutputOp could
  span multiple rows but it does not happen with the configurations we have
','line_number':32,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':71,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':94,'multiline':False]['text':'/ Epilogue operator','line_number':96,'multiline':False]['text':'/< Shape of threadblock tile (concept: GemmShape)','line_number':98,'multiline':False]['text':'/< Warp-level MMA operator (concept:','line_number':99,'multiline':False]['text':'/< gemm::warp::MmaTensorOp)','line_number':100,'multiline':False]['text':'/< Number of partitions of the K dimension','line_number':101,'multiline':False]['text':'/< Tile iterator writing output tensors','line_number':102,'multiline':False]['text':'/< Fragment iterator selecting','line_number':103,'multiline':False]['text':'/< accumulators','line_number':104,'multiline':False]['text':'/< Warp-scoped tile iterator writing','line_number':105,'multiline':False]['text':'/< accumulators to SMEM','line_number':106,'multiline':False]['text':'/< Threadblock-scoped tile iterator loading','line_number':107,'multiline':False]['text':'/< from SMEM','line_number':108,'multiline':False]['text':'/< Output operator','line_number':109,'multiline':False]['text':'/< Padding added to SMEM allocation to avoid bank','line_number':110,'multiline':False]['text':'/< conflicts (concept: MatrixShape)','line_number':111,'multiline':False]['text':'/< Used to coarsten the epilogue granularity','line_number':113,'multiline':False]['text':'/< Used to reduce binary size when epilogue op is','line_number':114,'multiline':False]['text':'/< large','line_number':115,'multiline':False]['text':'/< Tile iterator reading tensors','line_number':118,'multiline':False]['text':'/ The complete warp-level accumulator tile','line_number':152,'multiline':False]['text':'/ Accumulator element','line_number':155,'multiline':False]['text':'/ Output element','line_number':158,'multiline':False]['text':'/ Output access size','line_number':162,'multiline':False]['text':'/ Tensor reference to destination tensor','line_number':165,'multiline':False]['text':'/ Tensor reference to sync tensor','line_number':168,'multiline':False]['text':'/ Const tensor reference to source tensor','line_number':172,'multiline':False]['text':'/ Array type used to output','line_number':175,'multiline':False]['text':'/ Array type used by output functor','line_number':183,'multiline':False]['text':'/ Number of warps','line_number':188,'multiline':False]['text':'/ Loads fragment from shared memory aligned with output tensor','line_number':220,'multiline':False]['text':'/ Constructor','line_number':224,'multiline':False]['text':'/< Shared storage object','line_number':227,'multiline':False]['text':'/< ID of a thread within the threadblock','line_number':228,'multiline':False]['text':'/< ID of warp within threadblock','line_number':229,'multiline':False]['text':'/< Id of thread within warp','line_number':230,'multiline':False]['text':'/ Streams the result to global memory','line_number':235,'multiline':False]['text':'/< Output operator','line_number':238,'multiline':False]['text':'/< Tile iterator for destination','line_number':240,'multiline':False]['text':'/< Complete warp-level accumulator tile','line_number':242,'multiline':False]['text':'/< Threadblock tile coordinate in GEMM (in units','line_number':244,'multiline':False]['text':'/< of threadblock tiles)','line_number':245,'multiline':False]['text':'/< Output operator','line_number':256,'multiline':False]['text':'/< Tile iterator for destination','line_number':258,'multiline':False]['text':'/< Complete warp-level accumulator tile','line_number':260,'multiline':False]['text':'/ Streams the result to global memory','line_number':317,'multiline':False]['text':'/< Output operator','line_number':320,'multiline':False]['text':'/< Tile iterator for destination','line_number':322,'multiline':False]['text':'/< Complete warp-level accumulator tile','line_number':324,'multiline':False]['text':'','line_number':326,'multiline':False]['text':' Iterator over warp-level accumulator fragment','line_number':327,'multiline':False]['text':'','line_number':328,'multiline':False]['text':'','line_number':332,'multiline':False]['text':' Iterate over accumulator tile','line_number':333,'multiline':False]['text':'','line_number':334,'multiline':False]['text':'','line_number':342,'multiline':False]['text':' Convert and store fragment','line_number':343,'multiline':False]['text':'','line_number':344,'multiline':False]['text':'','line_number':354,'multiline':False]['text':' Load fragments from shared memory','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' Compute the output result','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':'','line_number':394,'multiline':False]['text':' Store the final result','line_number':395,'multiline':False]['text':'','line_number':396,'multiline':False]['text':'/ Streams the result to global memory','line_number':439,'multiline':False]['text':'/< Output operator','line_number':442,'multiline':False]['text':'/< Tile iterator for destination','line_number':444,'multiline':False]['text':'/< Complete warp-level accumulator tile','line_number':446,'multiline':False]['text':'/< Threadblock tile coordinate in GEMM (in units of','line_number':448,'multiline':False]['text':'/< threadblock tiles)','line_number':449,'multiline':False]['text':'','line_number':458,'multiline':False]['text':' Iterator over warp-level accumulator fragment','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':'','line_number':464,'multiline':False]['text':' Iterate over accumulator tile','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':'','line_number':473,'multiline':False]['text':' Load the source for next iteration (pipelining)','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':'','line_number':487,'multiline':False]['text':' Load fragments from shared memory','line_number':488,'multiline':False]['text':'','line_number':489,'multiline':False]['text':' If the number of k-slices is > 1 - perform a reduction amongst the','line_number':496,'multiline':False]['text':' k-slices','line_number':497,'multiline':False]['text':'','line_number':513,'multiline':False]['text':' Compute the output result','line_number':514,'multiline':False]['text':'','line_number':515,'multiline':False]['text':'','line_number':526,'multiline':False]['text':' Store the final result','line_number':527,'multiline':False]['text':'','line_number':528,'multiline':False]['text':'/ Helper to invoke the output functor over each vector of output','line_number':535,'multiline':False]['text':'/< Output operator','line_number':540,'multiline':False]['text':' Call the output operator','line_number':557,'multiline':False]['text':'/ Helper to invoke the output functor over each vector of output','line_number':566,'multiline':False]['text':'/< Output operator','line_number':571,'multiline':False]['text':' Call the output operator','line_number':584,'multiline':False]['text':' This should be constexpr, but it's only supported on c++14','line_number':592,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':626,'multiline':False]['text':' namespace threadblock','line_number':628,'multiline':False]['text':' namespace epilogue','line_number':629,'multiline':False]['text':' namespace cutlass','line_number':630,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':632,'multiline':False]