['text':' 5d tensor B x D x T x H x W','line_number':38,'multiline':False]['text':'
 * Description:
 *    this function adaptively maxpools an input 4D tensor along dimensions 2 and 3
 *    4D input, 4D output, 4D argmax x and y
 ','line_number':40,'multiline':True]['text':' iterators on output pixels','line_number':54,'multiline':False]['text':' compute offsets based on thread/block ID','line_number':57,'multiline':False]['text':' select output plane','line_number':65,'multiline':False]['text':' output frame/time','line_number':67,'multiline':False]['text':' slice/feature','line_number':68,'multiline':False]['text':' input frame/time ramge is fixed.','line_number':70,'multiline':False]['text':' input offset by slice/feature and earliest relevant frame/time','line_number':75,'multiline':False]['text':' output offset by slice/feature and frame/time','line_number':77,'multiline':False]['text':' indices offset by slice/feature and frame/time','line_number':79,'multiline':False]['text':' For all output pixels...','line_number':82,'multiline':False]['text':' Compute the average pooling from corresponding input pixels','line_number':95,'multiline':False]['text':' -Infinity','line_number':100,'multiline':False]['text':' next input frame','line_number':113,'multiline':False]['text':' Update output and argmax','line_number':115,'multiline':False]['text':' each H*W plane is processed by blocksH thread blocks','line_number':135,'multiline':False]['text':'
 * Description:
 *    This function computes the gradInput from gradOutput.
 *
 *    gridDim.y blocks work together on a single 2D output plane specified by
 *    (blockIdx.x + offsetZ).
 *
 *    Assumes that input size can be perfectly divided by output size, i.e.
 *    each input pixel can only be argmax of one output pixel.
 ','line_number':149,'multiline':True]['text':' iterators on output pixels','line_number':167,'multiline':False]['text':' compute offsets based on thread/block ID','line_number':170,'multiline':False]['text':' select output plane','line_number':178,'multiline':False]['text':' output slice/feature','line_number':180,'multiline':False]['text':' gradInput offset by slice/feature','line_number':182,'multiline':False]['text':' gradOutput offset by slice/feature and frame/otme','line_number':184,'multiline':False]['text':' indices offset by slice/feature and frame/otme','line_number':186,'multiline':False]['text':' For all output pixels...','line_number':189,'multiline':False]['text':' Compute the gradients for the argmax input pixel','line_number':192,'multiline':False]['text':' each H*W plane is processed by blocksH thread blocks','line_number':213,'multiline':False]['text':'
 * Description:
 *    This function computes the gradInput from gradOutput.
 *
 *    gridDim.y blocks work together on a single 2D output plane specified by
 *    (blockIdx.x + offsetZ).
 *
 *    Uses atomic add.
 ','line_number':226,'multiline':True]['text':' iterators on output pixels','line_number':243,'multiline':False]['text':' compute offsets based on thread/block ID','line_number':246,'multiline':False]['text':' select output plane','line_number':254,'multiline':False]['text':' output slice/feature','line_number':256,'multiline':False]['text':' gradInput offset by slice/feature','line_number':258,'multiline':False]['text':' gradOutput offset by slice/feature and frame/otme','line_number':260,'multiline':False]['text':' indices offset by slice/feature and frame/otme','line_number':262,'multiline':False]['text':' For all output pixels...','line_number':265,'multiline':False]['text':' Compute the gradients for the argmax input pixel','line_number':268,'multiline':False]['text':' each H*W plane is processed by blocksH thread blocks','line_number':289,'multiline':False]['text':' namespace','line_number':301,'multiline':False]['text':' 5d tensor B x D x T x H x W','line_number':303,'multiline':False]['text':' namespace at::native','line_number':484,'multiline':False]