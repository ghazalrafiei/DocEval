['text':' access `crow_indices`, `col_indices` and `values` via TessorAccessor','line_number':81,'multiline':False]['text':'is_cuda=','line_number':97,'multiline':True]['text':' step 1: reinit the output row for reduce type 'amax' and 'amin'','line_number':120,'multiline':False]['text':'include_self','line_number':123,'multiline':True]['text':' step 2: reduce, do blocking on rowwise to reduce write memory bandwidth','line_number':126,'multiline':False]['text':' step 3: finalize','line_number':142,'multiline':False]['text':' update both val and arg, used for `amin` and `amax`','line_number':148,'multiline':False]['text':' it is a little troublesome to vectorize it since `scalar_t` and `index_t`','line_number':149,'multiline':False]['text':' might have different vector length, for example, each vector holds 8 floats','line_number':150,'multiline':False]['text':' and 4 int64_t.','line_number':151,'multiline':False]['text':'is_cuda=','line_number':195,'multiline':True]['text':'include_self','line_number':220,'multiline':True]['text':' backward for reduce type 'amax' or 'amin'','line_number':290,'multiline':False]['text':' collect weight at max/min indices','line_number':330,'multiline':False]['text':' scatter_add, consider to parallel this with atomic','line_number':338,'multiline':False]['text':' Note that when the row index row is listed in row_indices,','line_number':368,'multiline':False]['text':' then crow_indices[row+1] > crow_indices[row] holds','line_number':369,'multiline':False]['text':' scatter_add, consider to parallel this with atomic','line_number':418,'multiline':False]['text':' need to permute row_indices to CSC order','line_number':523,'multiline':False]['text':' for reduce type "mean", need to normalize the values','line_number':528,'multiline':False]['text':' with rowcount for each of the nonzero element.','line_number':529,'multiline':False]['text':' anonymous namespace','line_number':556,'multiline':False]['text':' at::native','line_number':565,'multiline':False]