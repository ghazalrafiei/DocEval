['text':' See note [Jiterator]','line_number':10,'multiline':False]['text':' TODO: elaborate in this comment on the structure of math.cuh','line_number':11,'multiline':False]['text':'
  * This function is derived from the implementation of the digamma function in the Cephes Math Library.
  * See note [3-Clause BSD License for the Cephes Math Library].
  *
  * Evaluates polynomial of degree N:
  *
  *                     2          N
  * y  =  C  + C x + C x  +...+ C x
  *        0    1     2          N
  *
  * Coefficients are stored in reverse order:
  *
  * coef[0] = C  , ..., coef[N] = C  .
  *            N                   0
  ','line_number':15,'multiline':True]['text':' NOTE: This `polevl` is different from other `polevl`','line_number':32,'multiline':False]['text':' implementation (in PyTorch) which expect the `len` to be','line_number':33,'multiline':False]['text':' `len(A) - 1` instead of `len(A)`.','line_number':34,'multiline':False]['text':'
  * This function is derived from the implementation of the i1e function in the Cephes Math Library.
  * See note [3-Clause BSD License for the Cephes Math Library].
  *
  * Computes the argument, x, for which the area under the Gaussian probability density function
  * (integrated from minus infinity to x) is equal to y.
  ','line_number':42,'multiline':True]['text':' Handles special cases','line_number':55,'multiline':False]['text':' Note: the constant 0.135... is equal to exp(-2)','line_number':68,'multiline':False]['text':' approximation for 0 <= |y - 0.5| <= 3/8 ','line_number':75,'multiline':True]['text':' sqrt(2pi) ','line_number':96,'multiline':True]['text':' y > exp(-32) = 1.2664165549e-14 ','line_number':111,'multiline':True]['text':' Approximation for interval z = sqrt(-2 log y ) between 2 and 8
      * i.e., y between exp(-2) = .135 and exp(-32) = 1.27e-14.
      ','line_number':113,'multiline':True]['text':' Approximation for interval z = sqrt(-2 log y ) between 8 and 64
      * i.e., y between exp(-32) = 1.27e-14 and exp(-2048) = 3.67e-890.
      ','line_number':142,'multiline':True]['text':' ndtri_string','line_number':175,'multiline':False]['text':' 1/sqrt(2)','line_number':180,'multiline':False]['text':' log_ndtr_string','line_number':188,'multiline':False]['text':' gcd_string','line_number':204,'multiline':False]['text':' lcm_string','line_number':226,'multiline':False]['text':'
 * For licensing information, please refer to the cpu implementation located in "ATen/native/Math.h".
 ','line_number':228,'multiline':True]['text':' [C++ Standard Reference: Gamma Function] https://en.cppreference.com/w/cpp/numeric/math/tgamma','line_number':231,'multiline':False]['text':' Short-circuits if x is +/- 0 and returns -/+ âˆž per the C++ standard','line_number':237,'multiline':False]['text':' Short-circuits if x is a negative integer and returns NaN','line_number':244,'multiline':False]['text':'   per the C++ standard','line_number':245,'multiline':False]['text':' Extracts the fractional part of x as r, since tan(pi * r) is more numerically','line_number':251,'multiline':False]['text':' accurate than tan(pi * x). While these operations are mathematically equivalent','line_number':252,'multiline':False]['text':' since both x and r are in radians and tan() has a periodicity of pi, in practice','line_number':253,'multiline':False]['text':' the computation of pi * x is a source of error (when |x| > 1).','line_number':254,'multiline':False]['text':' digamma_string','line_number':294,'multiline':False]['text':'
 * This function is derived from the implementation of the zeta function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 ','line_number':296,'multiline':True]['text':'1.307674368e12/691','line_number':313,'multiline':True]['text':'1.067062284288e16/3617','line_number':315,'multiline':True]['text':'5.109094217170944e18/43867','line_number':316,'multiline':True]['text':'8.028576626982912e20/174611','line_number':317,'multiline':True]['text':'1.5511210043330985984e23/854513','line_number':318,'multiline':True]['text':'1.6938241367317436694528e27/236364091','line_number':319,'multiline':True]['text':' Short-circuits x -> +infty','line_number':325,'multiline':False]['text':' Short-circuits x < 1 -> NaN','line_number':330,'multiline':False]['text':' Short-circuits negative q integers map to +infty,','line_number':335,'multiline':False]['text':'   negative q non-integers map to NaN','line_number':336,'multiline':False]['text':' zeta_string','line_number':384,'multiline':False]['text':' trigamma_string','line_number':410,'multiline':False]['text':' lgamma_string','line_number':417,'multiline':False]['text':' already blocked if n <= 1','line_number':422,'multiline':False]['text':' polygamma_string','line_number':427,'multiline':False]['text':' There is no std::exp2 overload for complex, so instead','line_number':438,'multiline':False]['text':' use the identity 2^x = e^(ln(2) * x)','line_number':439,'multiline':False]['text':' exp2_string','line_number':448,'multiline':False]['text':' erfc_string','line_number':455,'multiline':False]['text':' erfinv_string','line_number':462,'multiline':False]['text':' entr_string','line_number':481,'multiline':False]['text':' NOTE: `kaiser_window_string` depends on `i0_string`','line_number':483,'multiline':False]['text':'       for its implementation.','line_number':484,'multiline':False]['text':' Chebyshev coefficients for exp(-x) I0(x)
          *   in the interval [0,8].
          *
          * lim(x->0){ exp(-x) I0(x) } = 1.
          ','line_number':508,'multiline':True]['text':' Handles x > 8 case','line_number':534,'multiline':False]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
      * in the inverted interval [8,infinity].
      *
      * lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
      ','line_number':535,'multiline':True]['text':' i0_string','line_number':557,'multiline':False]['text':' Chebyshev coefficients for exp(-x) i1(x) in the internal [0, 8]','line_number':581,'multiline':False]['text':'   lim(x->0){ exp(-x) i1(x) / x } = 1/2','line_number':582,'multiline':False]['text':' Chebyshev coefficients for exp(-x) sqrt(x) i1(x)','line_number':604,'multiline':False]['text':'   in the inverted interval [8, infinity]','line_number':605,'multiline':False]['text':'   lim(x->inf){ exp(-x) sqrt(x) i1(x) } = 1/sqrt(2pi)','line_number':606,'multiline':False]['text':' i1_string','line_number':624,'multiline':False]['text':' See double and float instantiations below','line_number':643,'multiline':False]['text':' Double specialization (uses different coefficients than the float version)','line_number':647,'multiline':False]['text':' Chebyshev double coefficients for exp(-x) i1(x) in the interval [0,8].','line_number':652,'multiline':False]['text':' Note: lim(x->0){ exp(-x) i1(x) / x } = 1/2.','line_number':653,'multiline':False]['text':' Chebyshev coefficients for exp(-x) sqrt(x) i1(x)','line_number':675,'multiline':False]['text':'   in the inverted interval (8, infinity].','line_number':676,'multiline':False]['text':' Note: lim(x->inf){ exp(-x) sqrt(x) i1(x) } = 1/sqrt(2pi).','line_number':677,'multiline':False]['text':' TODO: what's an "inverted interval"? Open on the left','line_number':678,'multiline':False]['text':'   and closed on the right?','line_number':679,'multiline':False]['text':' Float specialization (uses different coefficients than the double version)','line_number':699,'multiline':False]['text':' Chebyshev double coefficients for exp(-x) i1(x) in the interval [0,8].','line_number':704,'multiline':False]['text':' Note: lim(x->0){ exp(-x) i1(x) / x } = 1/2.','line_number':705,'multiline':False]['text':' Chebyshev coefficients for exp(-x) sqrt(x) i1(x)','line_number':729,'multiline':False]['text':'   in the inverted interval (8, infinity].','line_number':730,'multiline':False]['text':' Note: lim(x->inf){ exp(-x) sqrt(x) i1(x) } = 1/sqrt(2pi).','line_number':731,'multiline':False]['text':' TODO: what's an "inverted interval"? Open on the left','line_number':732,'multiline':False]['text':'   and closed on the right?','line_number':733,'multiline':False]['text':' i1e_string','line_number':746,'multiline':False]['text':' kaiser_window_string','line_number':755,'multiline':False]['text':' sinc_string','line_number':768,'multiline':False]['text':' The next function is taken from http://ab-initio.mit.edu/Faddeev ','line_number':771,'multiline':True]['text':' Copyright (c) 2012 Massachusetts Institute of Technology
  *
  * Permission is hereby granted, free of charge, to any person obtaining
  * a copy of this software and associated documentation files (the
  * "Software"), to deal in the Software without restriction, including
  * without limitation the rights to use, copy, modify, merge, publish,
  * distribute, sublicense, and/or sell copies of the Software, and to
  * permit persons to whom the Software is furnished to do so, subject to
  * the following conditions:
  *
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ','line_number':773,'multiline':True]['text':' erfcx(x) = exp(x^2) erfc(x) function, for real x, written by
    Steven G. Johnson, October 2012.

    This function combines a few different ideas.

    First, for x > 50, it uses a continued-fraction expansion (same as
    for the Faddeeva function, but with algebraic simplifications for z=i*x).

    Second, for 0 <= x <= 50, it uses Chebyshev polynomial approximations,
    but with two twists:

        a) It maps x to y = 4 / (4+x) in [0,1].  This simple transformation,
          inspired by a similar transformation in the octave-forge/specfun
          erfcx by Soren Hauberg, results in much faster Chebyshev convergence
          than other simple transformations I have examined.

        b) Instead of using a single Chebyshev polynomial for the entire
          [0,1] y interval, we break the interval up into 100 equal
          subintervals, with a switch/lookup table, and use much lower
          degree Chebyshev polynomials in each subinterval. This greatly
          improves performance in my tests.

    For x < 0, we use the relationship erfcx(-x) = 2 exp(x^2) - erfc(x),
    with the usual checks for overflow etcetera.

    Performance-wise, it seems to be substantially faster than either
    the SLATEC DERFC function [or an erfcx function derived therefrom]
    or Cody's CALERF function (from netlib.org/specfun), while
    retaining near machine precision in accuracy.
  ','line_number':795,'multiline':True]['text':' Given y100 = 100 * y, where y = 4 / (4 + x) for x >= 0, compute erfc(x).

    Uses a look-up table of 100 different Chebyshev polynomials
    for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
    with the help of Maple and a little shell script.   This allows
    the Chebyshev polynomials to be of significantly lower degree (about 1/4)
    compared to fitting the whole [0,1] interval with a single polynomial.
  ','line_number':826,'multiline':True]['text':' TODO: review if this is computing in double when given a float input','line_number':835,'multiline':False]['text':' we only get here if y = 1, i.e. |x| < 4*eps, in which case','line_number':1241,'multiline':False]['text':' erfcx is within 1e-15 of 1..','line_number':1242,'multiline':False]['text':' Short-circuits on NaN (returning NaN)','line_number':1248,'multiline':False]['text':' continued-fraction expansion is faster','line_number':1254,'multiline':False]['text':' 1 / sqrt(pi)','line_number':1255,'multiline':False]['text':' 1-term expansion, important to avoid overflow','line_number':1257,'multiline':False]['text':' 5-term expansion (rely on compiler for CSE), simplified from:
                  ispi / (x+0.5/(x+1/(x+1.5/(x+2/x))))  ','line_number':1261,'multiline':True]['text':' x >= 0 x <= 50','line_number':1266,'multiline':False]['text':' x < 0','line_number':1270,'multiline':False]['text':' x < 0 and x >= -6.1','line_number':1277,'multiline':False]['text':' erfcx_string','line_number':1280,'multiline':False]['text':' T airy_ai(T x)','line_number':1460,'multiline':False]['text':' airy_ai_string','line_number':1461,'multiline':False]['text':' bessel_j0_forward(T x)','line_number':1574,'multiline':False]['text':' bessel_j0_string','line_number':1575,'multiline':False]['text':' bessel_y0_forward(T x)','line_number':1691,'multiline':False]['text':' bessel_y0_string','line_number':1692,'multiline':False]['text':' bessel_j1_forward(T x)','line_number':1801,'multiline':False]['text':' bessel_j1_string','line_number':1802,'multiline':False]['text':' bessel_y1_forward(T x)','line_number':1917,'multiline':False]['text':' bessel_y1_string','line_number':1918,'multiline':False]['text':' chebyshev_polynomial_t_forward(T x, int64_t n)','line_number':1958,'multiline':False]['text':' chebyshev_polynomial_t_forward(T x, T n)','line_number':1963,'multiline':False]['text':' chebyshev_polynomial_t_string','line_number':1964,'multiline':False]['text':' chebyshev_polynomial_u_forward(T x, int64_t n)','line_number':2008,'multiline':False]['text':' chebyshev_polynomial_u_forward(T x, T n)','line_number':2013,'multiline':False]['text':' chebyshev_polynomial_u_string','line_number':2014,'multiline':False]['text':' chebyshev_polynomial_v_forward(T x, int64_t n)','line_number':2066,'multiline':False]['text':' chebyshev_polynomial_v_forward(T x, T n)','line_number':2071,'multiline':False]['text':' chebyshev_polynomial_v_string','line_number':2072,'multiline':False]['text':' chebyshev_polynomial_w_forward(T x, int64_t n)','line_number':2128,'multiline':False]['text':' chebyshev_polynomial_w_forward(T x, T n)','line_number':2133,'multiline':False]['text':' chebyshev_polynomial_w_string','line_number':2134,'multiline':False]['text':' hermite_polynomial_h_forward(T x, int64_t n)','line_number':2162,'multiline':False]['text':' hermite_polynomial_h_forward(T x, T n)','line_number':2167,'multiline':False]['text':' hermite_polynomial_h_string','line_number':2168,'multiline':False]['text':' hermite_polynomial_he_forward(T x, int64_t n)','line_number':2196,'multiline':False]['text':' hermite_polynomial_he_forward(T x, T n)','line_number':2201,'multiline':False]['text':' hermite_polynomial_he_string','line_number':2202,'multiline':False]['text':' laguerre_polynomial_l_forward(T x, int64_t n)','line_number':2234,'multiline':False]['text':' laguerre_polynomial_l_forward(T x, T n)','line_number':2239,'multiline':False]['text':' laguerre_polynomial_l_string','line_number':2240,'multiline':False]['text':' legendre_polynomial_p_forward(T x, int64_t n)','line_number':2276,'multiline':False]['text':' legendre_polynomial_p_forward(T x, T n)','line_number':2281,'multiline':False]['text':' legendre_polynomial_p_string','line_number':2282,'multiline':False]['text':' modified_bessel_i0_forward(T x)','line_number':2372,'multiline':False]['text':' modified_bessel_i0_string','line_number':2373,'multiline':False]['text':' modified_bessel_i1_forward(T x)','line_number':2470,'multiline':False]['text':' modified_bessel_i1_string','line_number':2471,'multiline':False]['text':' modified_bessel_k0_forward(T x)','line_number':2549,'multiline':False]['text':' modified_bessel_k0_string','line_number':2550,'multiline':False]['text':' T scaled_modified_bessel_k0_forward(T x)','line_number':2628,'multiline':False]['text':' scaled_modified_bessel_k0_string','line_number':2629,'multiline':False]['text':' modified_bessel_k1_forward(T x)','line_number':2708,'multiline':False]['text':' modified_bessel_k1_string','line_number':2709,'multiline':False]['text':' T scaled_modified_bessel_k1_forward(T x)','line_number':2788,'multiline':False]['text':' scaled_modified_bessel_k1_string','line_number':2789,'multiline':False]['text':' shifted_chebyshev_polynomial_t_forward(T x, int64_t n)','line_number':2833,'multiline':False]['text':' shifted_chebyshev_polynomial_t_forward(T x, T n)','line_number':2838,'multiline':False]['text':' shifted_chebyshev_polynomial_t_string','line_number':2839,'multiline':False]['text':' shifted_chebyshev_polynomial_u_forward(T x, int64_t n)','line_number':2887,'multiline':False]['text':' shifted_chebyshev_polynomial_u_forward(T x, T n)','line_number':2892,'multiline':False]['text':' shifted_chebyshev_polynomial_u_string','line_number':2893,'multiline':False]['text':' shifted_chebyshev_polynomial_v_forward(T x, int64_t n)','line_number':2945,'multiline':False]['text':' shifted_chebyshev_polynomial_v_forward(T x, T n)','line_number':2950,'multiline':False]['text':' shifted_chebyshev_polynomial_v_string','line_number':2951,'multiline':False]['text':' shifted_chebyshev_polynomial_w_forward(T x, int64_t n)','line_number':3003,'multiline':False]['text':' shifted_chebyshev_polynomial_w_forward(T x, T n)','line_number':3008,'multiline':False]['text':' shifted_chebyshev_polynomial_w_string','line_number':3009,'multiline':False]['text':' T spherical_bessel_j0_forward(T x)','line_number':3023,'multiline':False]['text':' spherical_bessel_j0_string','line_number':3024,'multiline':False]['text':' !AT_USE_JITERATOR() -- kernels must be precompiled','line_number':3026,'multiline':False]['text':'
 * For licensing information, please refer to the cpu implementation located in "ATen/native/Math.h".
 ','line_number':3040,'multiline':True]['text':' [C++ Standard Reference: Gamma Function] https://en.cppreference.com/w/cpp/numeric/math/tgamma','line_number':3045,'multiline':False]['text':'is_cuda=','line_number':3046,'multiline':True]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':3061,'multiline':False]['text':' If the argument is Â±0, Â±âˆž is returned','line_number':3062,'multiline':False]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':3070,'multiline':False]['text':' If the argument is a negative integer, NaN is returned','line_number':3071,'multiline':False]['text':' Extracts the fractional part of x as r, since tan(pi * r) is more numerically','line_number':3074,'multiline':False]['text':' accurate than tan(pi * x). While these operations are mathematically equivalent','line_number':3075,'multiline':False]['text':' since both x and r are in radians and tan() has a periodicity of pi, in practice','line_number':3076,'multiline':False]['text':' the computation of pi * x is a source of error (when |x| > 1).','line_number':3077,'multiline':False]['text':'is_cuda=','line_number':3108,'multiline':True]['text':'
 * For licensing information and documentation, please refer to the cpu implementation located in "ATen/native/Math.h".
 ','line_number':3129,'multiline':True]['text':'
 * For licensing information and documentation, please refer to the cpu implementation located in "ATen/native/Math.h".
 ','line_number':3151,'multiline':True]['text':' Chebyshev coefficients for exp(-x) I0(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I0(x) } = 1.
   ','line_number':3156,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
   ','line_number':3183,'multiline':True]['text':' Upcast input for numerical accuracy purposes','line_number':3209,'multiline':False]['text':' Needed for accurate results if input is bfloat16 or float16','line_number':3210,'multiline':False]['text':' Chebyshev coefficients for exp(-x) I1(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
   ','line_number':3231,'multiline':True]['text':' Chebyshev coefficients for exp(-x) I1(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
   ','line_number':3260,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
   ','line_number':3290,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
   ','line_number':3317,'multiline':True]['text':' AT_USE_JITERATOR() (this closes the "else" branch of a if/else preprocessor directive)','line_number':3372,'multiline':False]['text':' namespace native','line_number':3374,'multiline':False]['text':' namespace at','line_number':3375,'multiline':False]