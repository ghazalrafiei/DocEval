['text':' istreambuf_iterator','line_number':19,'multiline':False]['text':' TODO: C++17 has the fileystem header, which may replace these','line_number':23,'multiline':False]['text':' On Windows, the POSIX implementations are considered deprecated. We simply map to the newer variant.','line_number':25,'multiline':False]['text':' mkdir','line_number':36,'multiline':False]['text':' hiprtc already includes some traits, so this removes duplicate definitions of','line_number':43,'multiline':False]['text':' integral_constant, is_same, is_integral, enable_if, is_floating_point, is_arithmetic.','line_number':44,'multiline':False]['text':' Copied from aten/src/ATen/cuda/llvm_basic.cpp, then modified as above.','line_number':45,'multiline':False]['text':' If not compiling for ROCm, return the original get_traits_string().','line_number':46,'multiline':False]['text':' __promote','line_number':104,'multiline':False]['text':' namespace std','line_number':150,'multiline':False]['text':' corresponds to aten/src/ATen/native/cuda/thread_constants.h','line_number':172,'multiline':False]['text':' corresponds to aten/src/ATen/cuda/detail/OffsetCalculator.cuh','line_number':174,'multiline':False]['text':'TODO use _assert_fail, because assert is disabled in non-debug builds','line_number':180,'multiline':False]['text':' NOTE: this MUST be "unsigned char"! "char" is equivalent to "signed char"','line_number':193,'multiline':False]['text':' TODO: make template substitution once we decide where those vars live','line_number':199,'multiline':False]['text':' NB: Order matters for this macro; it is relied upon in','line_number':205,'multiline':False]['text':' _promoteTypesLookup and the serialization format.','line_number':206,'multiline':False]['text':' Note, some types have ctype as void because we don't support them in codegen','line_number':207,'multiline':False]['text':' 0 ','line_number':209,'multiline':True]['text':' 1 ','line_number':210,'multiline':True]['text':' 2 ','line_number':211,'multiline':True]['text':' 3 ','line_number':212,'multiline':True]['text':' 4 ','line_number':213,'multiline':True]['text':' 5 ','line_number':214,'multiline':True]['text':' 6 ','line_number':215,'multiline':True]['text':' 7 ','line_number':216,'multiline':True]['text':' 8 ','line_number':217,'multiline':True]['text':' 9 ','line_number':218,'multiline':True]['text':' 10 ','line_number':219,'multiline':True]['text':' 11 ','line_number':220,'multiline':True]['text':' 12 ','line_number':221,'multiline':True]['text':' 13 ','line_number':222,'multiline':True]['text':' 14 ','line_number':223,'multiline':True]['text':' 15 ','line_number':224,'multiline':True]['text':'we need to include half, bfloat16 and complex strings to all kernels with half arguments and to all kernels with type casting','line_number':279,'multiline':False]['text':'regardless of whether they have half arguments (because fetch_and_cast and cast_and_store loop over all types)','line_number':280,'multiline':False]['text':' do we need const cast here?','line_number':299,'multiline':False]['text':'asm("{  cvt.f32.f16 %0, %1;}\n" : "=f"(val) : "h"(__HALF_TO_CUS(x)));','line_number':300,'multiline':False]['text':'do we need const cast here?','line_number':359,'multiline':False]['text':' From c10/util/Load.h','line_number':368,'multiline':False]['text':' namespace c10','line_number':396,'multiline':False]['text':' copy-pasted from c10/util/TypeCast.h and c10/core/DynamicCast.h','line_number':400,'multiline':False]['text':' Fetch a value with dynamic type src_type from ptr, and cast it to static type dest_t.','line_number':471,'multiline':False]['text':' just to avoid compiler warning','line_number':482,'multiline':False]['text':' Cast a value with static type src_t into dynamic dest_type, and store it to ptr.','line_number':485,'multiline':False]['text':'<unsigned int>','line_number':560,'multiline':False]['text':' d above.','line_number':578,'multiline':False]['text':' Magic number: m' above.','line_number':579,'multiline':False]['text':' Shift amounts.','line_number':580,'multiline':False]['text':' The offset for each argument. Wrapper around fixed-size array.','line_number':585,'multiline':False]['text':' The offsets are in # of elements, not in bytes.','line_number':586,'multiline':False]['text':'printf("offset calc thread dim size stride offset %d %d %d %d %d %d %d %d\n",','line_number':620,'multiline':False]['text':'threadIdx.x, dim, sizes_[dim].divisor, strides_[dim][0], offsets[0], linear_idx, divmod.div, divmod.mod);','line_number':621,'multiline':False]['text':' NOTE: this approach will not support nInputs == 0','line_number':628,'multiline':False]['text':' TODO: setup grid-stride loop','line_number':643,'multiline':False]['text':'[${nInputs}+${nOutputs}],','line_number':647,'multiline':False]['text':' printf(','line_number':670,'multiline':False]['text':'    "thread %d a %f offsets %d\n", threadIdx.x, arg0[j], input_offsets[0]);','line_number':671,'multiline':False]['text':'TODO maybe think about unifying offset calculators and reuse','line_number':688,'multiline':False]['text':'offsets computed in the load loop','line_number':689,'multiline':False]['text':'printf("output thread %d offset %d\n", threadIdx.x, output_offsets[0]);','line_number':692,'multiline':False]['text':' aligned vector generates vectorized load/store on CUDA','line_number':713,'multiline':False]['text':' See NOTE [Loading boolean values]','line_number':728,'multiline':False]['text':' TODO: setup grid-stride loop','line_number':739,'multiline':False]['text':'[${nInputs}+${nOutputs}],','line_number':745,'multiline':False]['text':'actual loading','line_number':783,'multiline':False]['text':' hipify replaces certain device math functions, e.g., std::max -> ::max','line_number':828,'multiline':False]['text':' See torch/utils/hipify/cuda_to_hip_mappings.py.','line_number':829,'multiline':False]['text':' Replace them back. Search for " ::<name>" to avoid duplicate replacements.','line_number':830,'multiline':False]['text':' The following is copied from fused_kernel.cpp','line_number':852,'multiline':False]['text':' TODO: refactor codegenOutputQuery into its own file','line_number':853,'multiline':False]['text':'   that can be included by both files','line_number':854,'multiline':False]['text':' See NOTE [ USE OF NVRTC AND DRIVER API ]','line_number':855,'multiline':False]['text':' query codegen output arch and target','line_number':860,'multiline':False]['text':' TODO refactor so this function is usable both from jit and from aten','line_number':861,'multiline':False]['text':' Version supported by device','line_number':879,'multiline':False]['text':' Usually any lower version works too but is less efficient','line_number':880,'multiline':False]['text':' Maximum version supported by the driver, cap dev_version to this','line_number':884,'multiline':False]['text':' 7 supports 2-5.x','line_number':886,'multiline':False]['text':' 8 supports 2-6.x','line_number':888,'multiline':False]['text':' 9 supports 3-7.2','line_number':890,'multiline':False]['text':' 10 supports 3-7.5','line_number':892,'multiline':False]['text':' 11.0 supports 3-8.0','line_number':894,'multiline':False]['text':' If the driver version is unknown (i.e. newer than this code)','line_number':899,'multiline':False]['text':' assume the driver supports this device','line_number':900,'multiline':False]['text':' if we are clamping major/minor, sass is not compatible','line_number':907,'multiline':False]['text':' compile to sass is not allowed prior to CUDA 11.1','line_number':916,'multiline':False]['text':' TODO: another copy paste from jit, refactor so it's usable from both','line_number':922,'multiline':False]['text':' TODO: try making the CUcontext thread local to see if that improves performance - why is this slow?','line_number':923,'multiline':False]['text':' lazily construct context if non-existing yet;','line_number':925,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':926,'multiline':False]['text':'FIXME - this are defined in Loops.cuh, but including Loops.cuh here would lead to circular includes Loops.cuh -> CUDALoops.cuh -> jit_utils.h -> Loops.cuh','line_number':966,'multiline':False]['text':' Generate `extra_params` for function signature','line_number':997,'multiline':False]['text':' and `extra_args` for computation call if','line_number':998,'multiline':False]['text':' extra arguments to capture runtime state are passed.','line_number':999,'multiline':False]['text':' (look at polygamma for example).','line_number':1000,'multiline':False]['text':' TODO these arrays are potentially of the different types, use function','line_number':1014,'multiline':False]['text':' traits to determine the types','line_number':1015,'multiline':False]['text':'RhsScalar','line_number':1037,'multiline':False]['text':' return one or more outputs by reference','line_number':1044,'multiline':False]['text':' return by value for single output functor','line_number':1073,'multiline':False]['text':' complex<Half> depends on complex<T> and Half dtypes.','line_number':1081,'multiline':False]['text':' the definition of complex math functions is only needed when the compute type is complex','line_number':1091,'multiline':False]['text':' but the definition of std::complex is needed for dynamic casting even if the compute type is not complex','line_number':1092,'multiline':False]['text':' complex<Half> depends on complex<T> and Half dtypes.','line_number':1096,'multiline':False]['text':' unhipify math functions, but only if std::complex is used.','line_number':1101,'multiline':False]['text':' dynamic_casting requires the definition of all types','line_number':1116,'multiline':False]['text':' include complex<at::Half>','line_number':1117,'multiline':False]['text':' Look at the definition of `StoreWithCast` and `LoadWithCast`.','line_number':1118,'multiline':False]['text':' vectorized case','line_number':1169,'multiline':False]['text':' Creates directories recursively','line_number':1236,'multiline':False]['text':' Check if current dir exists','line_number':1238,'multiline':False]['text':' Try to create current directory','line_number':1245,'multiline':False]['text':' Success','line_number':1251,'multiline':False]['text':' Find folder separator and check if we are at the top','line_number':1256,'multiline':False]['text':' Try to create parent directory','line_number':1262,'multiline':False]['text':' Try to create complete path again','line_number':1267,'multiline':False]['text':' Creates directories recursively assuming that base exists','line_number':1276,'multiline':False]['text':' remove trailing '/' or '\\'','line_number':1284,'multiline':False]['text':' reductions don't support dynamic casting, so the only way to get nonstandard types','line_number':1350,'multiline':False]['text':' is through input','line_number':1351,'multiline':False]['text':' complex<Half> depends on complex<T> and Half dtypes.','line_number':1353,'multiline':False]['text':' complex<Half> depends on complex<T> and Half dtypes.','line_number':1366,'multiline':False]['text':' unhipify math functions, but only if std::complex is used.','line_number':1372,'multiline':False]['text':' Acquires (possibly creating) the kernel cache directory','line_number':1395,'multiline':False]['text':' If the environment variable USE_TORCH_KERNEL_CACHE is set to "0" then no persistent cache is used','line_number':1397,'multiline':False]['text':' Cache path comes from PYTORCH_KERNEL_CACHE_PATH, then TEMP (Windows) or XDG_CACHE_HOME (Linux), then HOME environment variables','line_number':1405,'multiline':False]['text':' Create kernel_cache_dir if needed as we do not want to create the base directory passed by the user','line_number':1408,'multiline':False]['text':' USES XDG_CACHE_HOME if it's set','line_number':1416,'multiline':False]['text':' Falls back to HOME/.cache','line_number':1423,'multiline':False]['text':' Creates the cache directory if it does not exist','line_number':1436,'multiline':False]['text':' Checks that the cache directory is readable and writable','line_number':1449,'multiline':False]['text':' Compiles the kernel, or acquires if from the cache if caching','line_number':1469,'multiline':False]['text':' Acquires CUDA and nvrtc versions and whether we're compiling to ptx or SASS','line_number':1474,'multiline':False]['text':' Objects used whether loading from the cache or jit compiling','line_number':1481,'multiline':False]['text':' Attemps to read from the cache.','line_number':1490,'multiline':False]['text':' Cubin name is <kernel name>_arch<major>.<minor>_nvrtc<major>.<minor>_<ptx or sass>_<program length>_<string hash>','line_number':1491,'multiline':False]['text':' Note that the SHA1 hash used in the file name is NOT the SHA1 hash of the file's contents,','line_number':1492,'multiline':False]['text':'   because we hash on the CUDA code, but we save the compiled ptx or sass','line_number':1493,'multiline':False]['text':' Acquires SHA1 hash','line_number':1495,'multiline':False]['text':' Constructs file path by appending constructed cubin name to cache path','line_number':1499,'multiline':False]['text':' NOTE: this does not warn because the file might not exist','line_number':1512,'multiline':False]['text':' TODO: consider if this should explicilty check for the file's existence or not to throw','line_number':1513,'multiline':False]['text':'   an informative warning','line_number':1514,'multiline':False]['text':' TODO: try passing the "mapped" file directly to cuModuleLoadCall instead of using an intermediate buffer','line_number':1517,'multiline':False]['text':' Just-in-time compiles the program','line_number':1527,'multiline':False]['text':' Creates the NVRTC program','line_number':1529,'multiline':False]['text':' Constructs nvrtc build arguments','line_number':1537,'multiline':False]['text':' CUDA 11.1 allows going directly to SASS (sm_) instead of PTX (compute_)','line_number':1538,'multiline':False]['text':' which gives better backwards compatibility to work on older driver,','line_number':1539,'multiline':False]['text':' (since older driver doesn't necessrily recognize PTX emitted by new','line_number':1540,'multiline':False]['text':' toolkit);','line_number':1541,'multiline':False]['text':' Meanwhile, for forward compatibility (future device with','line_number':1542,'multiline':False]['text':' `unsupported_arch==True`), since SASS are not necessarily compatible,','line_number':1543,'multiline':False]['text':' we fallback to PTX instead.','line_number':1544,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1548,'multiline':False]['text':' Add line info to generated kernels','line_number':1554,'multiline':False]['text':' Avoid excessive register usage from assertion','line_number':1557,'multiline':False]['text':' Throws an error on compilation failure','line_number':1564,'multiline':False]['text':' compile_to_sass determines whether we are generating SASS or PTX, hence','line_number':1578,'multiline':False]['text':' the different API.','line_number':1579,'multiline':False]['text':' TODO: use guards to avoid leaking','line_number':1599,'multiline':False]['text':' Writes the program to the cache if caching','line_number':1603,'multiline':False]['text':' NOTE: Actually writes to a per-process temporary file to avoid multi-process contention.','line_number':1604,'multiline':False]['text':'   The temporary file is then renamed to the actual file.','line_number':1605,'multiline':False]['text':'   If the actual file already exists then the rename may fail or replace the actual file,','line_number':1606,'multiline':False]['text':'     the behavior is implementation-specific.','line_number':1607,'multiline':False]['text':'   Files replaced through this process should remain extant if they are being read because','line_number':1608,'multiline':False]['text':'     of UNIX filesystem properties, but this behavior is unverified and may require','line_number':1609,'multiline':False]['text':'     additional review in the future.','line_number':1610,'multiline':False]['text':' TODO: In C++17 we should be able to use the filesystem header.','line_number':1611,'multiline':False]['text':' Removes tmp file if the rename failed','line_number':1624,'multiline':False]['text':' TODO: may need/want to initialize CUDA context here (refactor into nvrtc call)','line_number':1634,'multiline':False]['text':' Launches kernel on current stream','line_number':1643,'multiline':False]['text':' at::cuda::jit','line_number':1659,'multiline':False]