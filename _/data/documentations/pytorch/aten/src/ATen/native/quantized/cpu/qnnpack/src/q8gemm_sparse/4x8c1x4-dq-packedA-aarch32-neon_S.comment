['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]['text':' Store nr in r11 as well for late user. ','line_number':89,'multiline':True]['text':' Load output channel index ','line_number':91,'multiline':True]['text':' Load quantization params ','line_number':93,'multiline':True]['text':' - r7 = quantization_params ','line_number':94,'multiline':True]['text':' Load input_zero_point ','line_number':96,'multiline':True]['text':' Load pointer to per channel zero points array ','line_number':99,'multiline':True]['text':' Add output_channel_index to the b_zero_point pointer ','line_number':101,'multiline':True]['text':' We enter the loop if r1 is atleast 1. ','line_number':104,'multiline':True]['text':' r1 = r1 - 1 will happen in the epilogue ','line_number':105,'multiline':True]['text':' of the loop ','line_number':106,'multiline':True]['text':' Load w_row_ptr + n ','line_number':110,'multiline':True]['text':' r7 = blocks_id_ptr ','line_number':112,'multiline':True]['text':' ip = w_row_ptr[n], lr = w_row_ptr[n+1] ','line_number':119,'multiline':True]['text':' r5 = r5 + W_INDEX_DTYPE_NUM_BYTES_ARG to point to next n ','line_number':120,'multiline':True]['text':' r6 = temp_packed_w = packed_w + w_row_ptr[n] * 4 ','line_number':123,'multiline':True]['text':' This points to the first block of nonzero value ','line_number':124,'multiline':True]['text':' for the nth row. ','line_number':125,'multiline':True]['text':' r9 = temp_w_block_ids_ptr = w_block_ids_ptr (r7) + w_row_ptr[n] ','line_number':127,'multiline':True]['text':' LSL for when elements are >1 byte ','line_number':128,'multiline':True]['text':' (4 bytes: LSL #2, 2 bytes: LSL #1, 1 byte: LSL #0) ','line_number':129,'multiline':True]['text':' This points to the block id of the first block ','line_number':130,'multiline':True]['text':' It should contain lr - ip number of block ids ','line_number':131,'multiline':True]['text':' r8 = num_blocks that needs to be processed ','line_number':133,'multiline':True]['text':' Load 2 non zero blocks of weights. Each block = 1x4. ','line_number':139,'multiline':True]['text':' ip = block_id_ptr[0] ','line_number':142,'multiline':True]['text':' lr = block_id_ptr[1] ','line_number':143,'multiline':True]['text':' Add offset to r2 ','line_number':147,'multiline':True]['text':' Shift by 4 because each packed block is a block of 4x4 ','line_number':148,'multiline':True]['text':' which 16 bytes ','line_number':149,'multiline':True]['text':' q9 = vxb ','line_number':151,'multiline':True]['text':' d2, d3 = 4x4 transposed ','line_number':154,'multiline':True]['text':' vxa0_t ','line_number':160,'multiline':True]['text':' d4, d5 = next 4x4 transposed ','line_number':162,'multiline':True]['text':' vxa1_t ','line_number':166,'multiline':True]['text':' vxa4_t ','line_number':167,'multiline':True]['text':' vxa5_t ','line_number':168,'multiline':True]['text':' q4, q5 = 4x4 block (16 values each of 16 bits) ','line_number':170,'multiline':True]['text':' q6, q7 = 4x4 block (16 values each of 16 bits) ','line_number':171,'multiline':True]['text':' Load last nonzero block ','line_number':189,'multiline':True]['text':' For this we will load 4 8 bit values as one 32 bit value ','line_number':190,'multiline':True]['text':' q9 = vxb ','line_number':192,'multiline':True]['text':' ip = block_id_ptr[0] ','line_number':195,'multiline':True]['text':' Add offset to r2 ','line_number':198,'multiline':True]['text':' Shift by 4 because each packed block is a block of 4x4 ','line_number':199,'multiline':True]['text':' which 16 bytes ','line_number':200,'multiline':True]['text':' vxa0_t ','line_number':206,'multiline':True]['text':' vxa1_t ','line_number':207,'multiline':True]['text':' Store result on stack ','line_number':216,'multiline':True]['text':' -12 because TOS - 4, TOS - 8, and TOS - 12, store mr, nr and pointer to weight zp ','line_number':218,'multiline':True]['text':' + 128 bytes of buffer when nr = 1 ','line_number':219,'multiline':True]['text':' This is needed because after processing all nrs we will ','line_number':220,'multiline':True]['text':' load 128 bytes from stack. This is for q10, q11 for max nr of 4 ','line_number':221,'multiline':True]['text':' Thus we will load accumulators back in q0, q1, q2, q3, q4, q5, q6, q7 ','line_number':222,'multiline':True]['text':' When nr < 4, extra q values will be fetched from stack which may overlap ','line_number':223,'multiline':True]['text':' with other parts of stack storing local variables. To avoid that we just ','line_number':224,'multiline':True]['text':' create a buffer of 128 bytes inbetween to make sure pointer increment ','line_number':225,'multiline':True]['text':' never produces address that is beyond the stack frame of this function. ','line_number':226,'multiline':True]['text':' Each iteration produce 4 values each of 4 bytes ','line_number':228,'multiline':True]['text':' Thus 4 x 4 = 16 bytes 2^4 ','line_number':229,'multiline':True]['text':' In this implementation, first value will be stored at ','line_number':230,'multiline':True]['text':' 1st value: sp - 12 - r1 * 16 ','line_number':231,'multiline':True]['text':' 2nd value: sp - 12 - (r1 - 1) * 16 ','line_number':232,'multiline':True]['text':' and so on. ','line_number':233,'multiline':True]['text':' Check if nr >=1 ','line_number':237,'multiline':True]['text':' First load all the accumulators from stack ','line_number':241,'multiline':True]['text':' Load nr ','line_number':242,'multiline':True]['text':' Now load q8-q15 ','line_number':245,'multiline':True]['text':' This is 8x4 block (nrxmr) ','line_number':246,'multiline':True]['text':' We will transpose this to 4x8 (mrxnr) ','line_number':247,'multiline':True]['text':' q8, q12  : x00, x10, x20, x30; x04, x14, x24, x34 ','line_number':248,'multiline':True]['text':' q9, q13  : x01, x11, x21, x31; x05, x15, x25, x35 ','line_number':249,'multiline':True]['text':' q10, q14 : x02, x12, x22, x32; x06, x16, x26, x36 ','line_number':250,'multiline':True]['text':' q11, q15 : x03, x13, x23, x33; x07, x17, x27, x37 ','line_number':251,'multiline':True]['text':'# Now transpose q8-11 ','line_number':261,'multiline':True]['text':' VTRN.32 q8, q9 ','line_number':262,'multiline':True]['text':' VTRN.32 q10, q11 ','line_number':263,'multiline':True]['text':' q8 : X00, x01, x20, x21 ','line_number':264,'multiline':True]['text':' q9 : X10, x11, x30, x31 ','line_number':265,'multiline':True]['text':' q10: X02, x03, x22, x23 ','line_number':266,'multiline':True]['text':' q11: X12, x13, x32, x33 ','line_number':267,'multiline':True]['text':' VSWP d16, d17 ','line_number':268,'multiline':True]['text':' q8 : x20, x21, x00, x01 ','line_number':269,'multiline':True]['text':' VEXT.32 q6, q8, q10, 2 ','line_number':270,'multiline':True]['text':' q6 : x00, x01, x02, x03 ','line_number':271,'multiline':True]['text':' VEXT.32 q10, q10, q8, 2 ','line_number':272,'multiline':True]['text':' q10: x22, x23, x20, x21 ','line_number':273,'multiline':True]['text':' VSWP d20, d21 ','line_number':274,'multiline':True]['text':' VMOV q8, q6 ','line_number':275,'multiline':True]['text':' q8 : X00, x01, x02, x03 ','line_number':276,'multiline':True]['text':' q10: x20, x21, x22, x23 ','line_number':277,'multiline':True]['text':' VSWP d18, d19 ','line_number':278,'multiline':True]['text':' q9 : x30, x31, x10, x11 ','line_number':279,'multiline':True]['text':' VEXT.32 q6, q9, q11, 2 ','line_number':280,'multiline':True]['text':' q6 : x10, x11, x12, x13 ','line_number':281,'multiline':True]['text':' VEXT.32 q11, q11, q9, 2 ','line_number':282,'multiline':True]['text':' q11: x32, x33, x30, x31 ','line_number':283,'multiline':True]['text':' VSWP d22, d23 ','line_number':284,'multiline':True]['text':' VMOV q9, q6 ','line_number':285,'multiline':True]['text':' q9 : x10, x11, x12, x13 ','line_number':286,'multiline':True]['text':' q11: x30, x31, x32, x33 ','line_number':287,'multiline':True]['text':' Thus we have ','line_number':288,'multiline':True]['text':' q8 : X00, x01, x02, x03 ','line_number':289,'multiline':True]['text':' q9 : X10, x11, x12, x13 ','line_number':290,'multiline':True]['text':' q10: X20, x21, x22, x23 ','line_number':291,'multiline':True]['text':' q11: X30, x31, x32, x33 ','line_number':292,'multiline':True]['text':' Now we can do the same for q4-q7 ','line_number':293,'multiline':True]['text':' q12: X04, X05, X06, X07 ','line_number':294,'multiline':True]['text':' q13: X14, X15, X16, X17 ','line_number':295,'multiline':True]['text':' q14: X24, X25, X26, X27 ','line_number':296,'multiline':True]['text':' q15: X34, X35, X36, X37 ','line_number':297,'multiline':True]['text':' Load output channel index ','line_number':325,'multiline':True]['text':' Load quantization params ','line_number':327,'multiline':True]['text':' - r7 = quantization_params ','line_number':328,'multiline':True]['text':' Load pointer to per channel requant scale ','line_number':331,'multiline':True]['text':' Now r7 has the base_addr + offset for multipliers ','line_number':333,'multiline':True]['text':' Load q6: vmultiplier_c0123 ','line_number':337,'multiline':True]['text':' Load q7: vmultiplier_c4567 ','line_number':339,'multiline':True]['text':' Load c, c_stride: ','line_number':371,'multiline':True]['text':' - r1 = c ','line_number':372,'multiline':True]['text':' - r9 = c_stride ','line_number':373,'multiline':True]['text':' r1 = c0 = c pointer ','line_number':378,'multiline':True]['text':' r2 = c1 ','line_number':381,'multiline':True]['text':' r3 = c2 ','line_number':385,'multiline':True]['text':' r4 = c3 ','line_number':390,'multiline':True]