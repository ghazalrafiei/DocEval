['text':'*****************************************************************************
 * Copyright (c) 2023, Tri Dao.
 *****************************************************************************','line_number':1,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':26,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':60,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':87,'multiline':False]['text':' This is slightly faster','line_number':96,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':100,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':107,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':120,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':131,'multiline':False]['text':' MMA_M','line_number':141,'multiline':False]['text':' MMA_N','line_number':142,'multiline':False]['text':' MMA_K','line_number':143,'multiline':False]['text':' M','line_number':145,'multiline':False]['text':' N','line_number':147,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':160,'multiline':False]['text':' MMA_M','line_number':167,'multiline':False]['text':' MMA_N','line_number':168,'multiline':False]['text':' MMA_K','line_number':169,'multiline':False]['text':' N','line_number':171,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':182,'multiline':False]['text':' Convert acc_layout from (MMA=4, MMA_M, MMA_N) to (nrow=(2, MMA_M), ncol=(2, MMA_N))','line_number':184,'multiline':False]['text':' ((2, 2), MMA_M, MMA_N)','line_number':189,'multiline':False]['text':' TD [2023-08-13]: Idk why but get<0, 1>(l) doesn't work for Cutlass 3.2, I'm getting','line_number':190,'multiline':False]['text':' "int_tuple.hpp(74): error: conversion to inaccessible base class"','line_number':191,'multiline':False]['text':' return make_layout(make_layout(get<0, 1>(l), get<1>(l)), make_layout(get<0, 0>(l), get<2>(l)));','line_number':192,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':196,'multiline':False]['text':' Convert rowcol_layout from (nrow=(2, MMA_M), ncol=(2, MMA_N)) to ((2, 2, 2), MMA_M, MMA_N / 2)','line_number':198,'multiline':False]['text':' if using m16n8k16, or to ((2, 2, 1), MMA_M, MMA_N) if using m16n8k8.','line_number':199,'multiline':False]['text':' ((2, MMA_M), (2, (2, MMA_N / 2)))','line_number':208,'multiline':False]['text':' TD [2023-08-13]: Same error as above on Cutlass 3.2','line_number':209,'multiline':False]['text':' return make_layout(make_layout(get<1, 0>(l), get<0, 0>(l), get<1, 1, 0>(l)),','line_number':210,'multiline':False]['text':'                    get<0, 1>(l),','line_number':211,'multiline':False]['text':'                    get<1, 1, 1>(l));','line_number':212,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':218,'multiline':False]['text':' HACK: this requires tensor to be "contiguous"','line_number':225,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':230,'multiline':False]['text':' HACK: this requires tensor to be "contiguous"','line_number':237,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':245,'multiline':False]['text':' On SM80 and above, we can fuse fp32 -> fp16/bf16 conversion and relu into 1 instruction','line_number':247,'multiline':False]['text':' HACK: this requires tensor to be "contiguous"','line_number':256,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':271,'multiline':False]['text':' Blocks until all but N previous cp.async.commit_group operations have committed.','line_number':273,'multiline':False]['text':' This differs from cute::cp_async_wait in that when N = 0 we don't call cp.async.wait_all','line_number':274,'multiline':False]['text':' (which is equivalent to commit_group then wait_group 0).','line_number':275,'multiline':False]['text':' Instead we just call cp.async.wait_group 0, which is slightly faster.','line_number':276,'multiline':False]['text':' https://github.com/NVIDIA/cutlass/blob/master/include/cute/arch/copy_sm80.hpp#L113','line_number':277,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':286,'multiline':False]['text':' MMA','line_number':296,'multiline':False]['text':' MMA_M','line_number':297,'multiline':False]['text':' MMA_K','line_number':298,'multiline':False]['text':' There's no case where !Clear_OOB_K && Clear_OOB_MN','line_number':299,'multiline':False]['text':' TD [2023-04-13]: Strange that the code below can cause race condition.','line_number':316,'multiline':False]['text':' I think it's because the copies are under an if statement.','line_number':317,'multiline':False]['text':' if (Is_even_K) {','line_number':318,'multiline':False]['text':'     #pragma unroll','line_number':319,'multiline':False]['text':'     for (int m = 0; m < size<1>(S); ++m) {','line_number':320,'multiline':False]['text':'         if (Is_even_MN || get<0>(identity_MN(0, m, 0)) < max_MN) {','line_number':321,'multiline':False]['text':'             copy(tiled_copy, S(_, m, _), D(_, m, _));','line_number':322,'multiline':False]['text':'         } else if (Clear_OOB_MN) {','line_number':323,'multiline':False]['text':'             clear(D(_, m, _));','line_number':324,'multiline':False]['text':'         }','line_number':325,'multiline':False]['text':'     }','line_number':326,'multiline':False]['text':' } else {  // It's slightly faster in this case if iterate over K first','line_number':327,'multiline':False]['text':'     #pragma unroll','line_number':328,'multiline':False]['text':'     for (int k = 0; k < size<2>(S); ++k) {','line_number':329,'multiline':False]['text':'         if (predicate_K(k)) {','line_number':330,'multiline':False]['text':'             #pragma unroll','line_number':331,'multiline':False]['text':'             for (int m = 0; m < size<1>(S); ++m) {','line_number':332,'multiline':False]['text':'                 if (Is_even_MN || get<0>(identity_MN(0, m, 0)) < max_MN) {','line_number':333,'multiline':False]['text':'                     copy(tiled_copy, S(_, m, k), D(_, m, k));','line_number':334,'multiline':False]['text':'                 } else if (Clear_OOB_MN) {','line_number':335,'multiline':False]['text':'                     clear(D(_, m, k));','line_number':336,'multiline':False]['text':'                 }','line_number':337,'multiline':False]['text':'             }','line_number':338,'multiline':False]['text':'         } else if (Clear_OOB_K) {  // There's no case where !Clear_OOB_K && Clear_OOB_MN','line_number':339,'multiline':False]['text':'             if (Clear_OOB_MN || Is_even_MN) {','line_number':340,'multiline':False]['text':'                 clear(D(_, _, k));','line_number':341,'multiline':False]['text':'             } else {','line_number':342,'multiline':False]['text':'                 #pragma unroll','line_number':343,'multiline':False]['text':'                 for (int m = 0; m < size<1>(S); ++m) {','line_number':344,'multiline':False]['text':'                     if (!(Is_even_MN || get<0>(identity_MN(0, m, 0)) < max_MN)) {','line_number':345,'multiline':False]['text':'                         clear(D(_, m, k));','line_number':346,'multiline':False]['text':'                     }','line_number':347,'multiline':False]['text':'                 }','line_number':348,'multiline':False]['text':'             }','line_number':349,'multiline':False]['text':'         }','line_number':350,'multiline':False]['text':'     }','line_number':351,'multiline':False]['text':' }','line_number':352,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':355,'multiline':False]['text':' MMA','line_number':366,'multiline':False]['text':' MMA_M','line_number':367,'multiline':False]['text':' MMA_K','line_number':368,'multiline':False]['text':' if (threadIdx.x == 0 && blockIdx.z == 0) { printf("blockIdx.y = %d, max_MN = %d, min_MN = %d\n", blockIdx.y, max_MN, min_MN); }','line_number':369,'multiline':False]['text':' if (threadIdx.x == 0 && blockIdx.z == 0) { printf("blockIdx.y = %d, m = %d\n", blockIdx.y, get<0>(identity_MN(0, m, 0))); }','line_number':372,'multiline':False]['text':' if (threadIdx.x == 0 && blockIdx.z == 0) { printf("Inner loop, blockIdx.y = %d, m = %d\n", blockIdx.y, get<0>(identity_MN(0, m, 0))); }','line_number':374,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':385,'multiline':False]['text':' MMA','line_number':399,'multiline':False]['text':' MMA_M','line_number':400,'multiline':False]['text':' MMA_K','line_number':401,'multiline':False]['text':' MMA_M','line_number':402,'multiline':False]['text':' MMA_K','line_number':403,'multiline':False]['text':' MMA_M','line_number':404,'multiline':False]['text':' MMA_K','line_number':405,'multiline':False]['text':' MMA_K','line_number':406,'multiline':False]['text':' Since we do fast conversion from fp16/bf16 to fp32','line_number':408,'multiline':False]['text':' Idk but I need to copy for the convert_type to work','line_number':432,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':448,'multiline':False]['text':' MMA','line_number':462,'multiline':False]['text':' MMA_M','line_number':463,'multiline':False]['text':' MMA_K','line_number':464,'multiline':False]['text':' MMA_M','line_number':465,'multiline':False]['text':' MMA_K','line_number':466,'multiline':False]['text':' MMA_M','line_number':467,'multiline':False]['text':' MMA_K','line_number':468,'multiline':False]['text':' MMA','line_number':469,'multiline':False]['text':' Since we do fast conversion from fp16/bf16 to fp32','line_number':471,'multiline':False]['text':' if (cute::thread0()) { print_tensor(rS(_, m, k)); print_tensor(rS_other); }','line_number':487,'multiline':False]['text':' if (cute::thread0()) { print_tensor(rCos(_, m, k)); print_tensor(rSin(_, m, k)); }','line_number':492,'multiline':False]['text':' Idk but I need to copy for the convert_type to work','line_number':501,'multiline':False]['text':' if (cute::thread0()) { print_tensor(rS(_, m, k)); }','line_number':507,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':518,'multiline':False]['text':' namespace pytorch_flash','line_number':520,'multiline':False]