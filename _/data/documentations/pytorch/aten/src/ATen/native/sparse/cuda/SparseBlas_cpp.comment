['text':'
  Computes `result` <- α*(A @ B) * spy(C) + β*C, where spy(C) is the sparsity pattern matrix of C.

  Args:
  * `mat1` - [in] dense Tensor A of size m × k.
  * `mat2` - [in] dense Tensor B of size k × n.
  * `self` - [in] sparse Tensor C of size m × n.
  * `result` - [out] sparse Tensor of size m × n.
','line_number':30,'multiline':True]['text':' We allow self to be a single matrix when mat1 and mat2 are batched','line_number':50,'multiline':False]['text':' there's a segfault when calling cuSPARSE on 0-sized matrices','line_number':58,'multiline':False]['text':' result = beta * self + alpha * (mat1 @ mat2)','line_number':79,'multiline':False]['text':' Same checks as in TORCH_META_FUNC(addmm) at','line_number':92,'multiline':False]['text':' aten/src/ATen/native/LinearAlgebra.cpp','line_number':93,'multiline':False]['text':' From addmm_out_cuda_impl at ATen/native/cuda/Blas.cpp','line_number':101,'multiline':False]['text':' TODO: remove code duplication and unify code','line_number':102,'multiline':False]['text':' There were undefined symbol problems,','line_number':103,'multiline':False]['text':' when using the same function for CUDA and SparseCsrCUDA dispatch keys','line_number':104,'multiline':False]['text':' Also structured kernels do not support sparse output','line_number':105,'multiline':False]['text':' Don't expand self if this is an in-place operation','line_number':107,'multiline':False]['text':' According to docs, when beta==0 values in self should be ignored.','line_number':142,'multiline':False]['text':' nans and infs should not propagate','line_number':143,'multiline':False]['text':' According to docs, when beta==0 values in self should be ignored','line_number':180,'multiline':False]['text':' nans and infs should not propagate','line_number':181,'multiline':False]['text':' Preprocessing code is copied from TORCH_IMPL_FUNC(addmv_out_cuda) at','line_number':225,'multiline':False]['text':' aten/src/ATen/native/cuda/Blas.cpp','line_number':226,'multiline':False]['text':' It would be nice to have it unified but there were undefined symbol','line_number':227,'multiline':False]['text':' problems, when using the same function for CUDA and SparseCsrCUDA dispatch','line_number':228,'multiline':False]['text':' keys and structured kernel','line_number':229,'multiline':False]['text':' shortcut for an empty matrix','line_number':241,'multiline':False]['text':' By definition, when beta==0, values in self should be ignored. nans and','line_number':242,'multiline':False]['text':' infs should not propagate','line_number':243,'multiline':False]['text':' layout ','line_number':253,'multiline':True]['text':' pin_memory ','line_number':255,'multiline':True]['text':'
  Solves a system of linear equations whose coefficients are represented in a sparse triangular matrix A:
  op(A) X = B.

  Args:
  * `B` - dense Tensor of size m × nrhs.
  * `A` - sparse Tensor of size m × m.
  * `upper` - controls whether upper or lower triangular part of A is considered in computations.
  * `transpose` - if true then op(A) = A^T.
  * `unitriangular` - if true then the diagonal elements of A are assumed to be one.
  * `X` - dense Tensor of size m × nrhs.
  * `clone_A` - cloned matrix A, required only for compatibility with strided layout interface.
','line_number':263,'multiline':True]['text':' namespace native','line_number':288,'multiline':False]['text':' namespace at','line_number':289,'multiline':False]