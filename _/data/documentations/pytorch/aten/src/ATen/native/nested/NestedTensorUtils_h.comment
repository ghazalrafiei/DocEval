['text':' The following functions are used to construct nested tensors from buffers and','line_number':32,'multiline':False]['text':' metadata.','line_number':33,'multiline':False]['text':' TODO: Figure out if we need a non-moving wrap_buffer()','line_number':47,'multiline':False]['text':'*
 * Create a new nested tensor that is a view of a base nested tensor
 *
 * create_view_tensor calls a specialized constructor that copys the
 * the keys from base onto the new view tensor being created.
 * The storage is shared between the base and the returned view tensor
 *
 * All callers of this helper must:
 * - Only return a view of the input
 * - Must be explicit and define a derivative
 *
 * @param base Base tensor to construct view from.
 * @param nested_sizes View tensors' sizes.
 * @param nested_strides View tensors' strides.
 * @param storage_offsets View tensors' offsets.
 * @return A newly constructed view tensor
 ','line_number':66,'multiline':True]['text':'  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':102,'multiline':False]['text':' Helper functions for getting information about a nested tensor's shape.','line_number':104,'multiline':False]['text':' The sizes of the underlying tensors','line_number':108,'multiline':False]['text':' nesting scalars has empty sizes','line_number':118,'multiline':False]['text':' The strides of the underlying tensors','line_number':141,'multiline':False]['text':' nesting scalars has empty strides','line_number':151,'multiline':False]['text':'  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':181,'multiline':False]['text':' Data structures and functions for generically applying a function on a nested','line_number':182,'multiline':False]['text':' tensor.','line_number':183,'multiline':False]['text':' NestedNode(NestedNode&) = delete;','line_number':193,'multiline':False]['text':' NestedNode(const NestedNode&) = delete;','line_number':194,'multiline':False]['text':' NestedNode& operator=(NestedNode) = delete;','line_number':195,'multiline':False]['text':' NOTE: We must move F to avoid copying objects if it is a lambda with','line_number':233,'multiline':False]['text':' captures.','line_number':234,'multiline':False]['text':' All NestedNodes just wrap regular objects.','line_number':252,'multiline':False]['text':' Some NestedNodes wrap regular Tensors, some NestedTensors and some other','line_number':256,'multiline':False]['text':' types.','line_number':257,'multiline':False]['text':' Broadcast regular arguments across NestedTensor constituents.','line_number':265,'multiline':False]['text':' This could be a Tensor, integer or anything else really.','line_number':266,'multiline':False]['text':' Broadcast NestedTensors with one constituent.','line_number':270,'multiline':False]['text':' TODO: Add static assert to verify lambda arguments match nested_node types','line_number':287,'multiline':False]['text':' Fast path: if all tensors are on CPU, have contiguous memory, and the same','line_number':321,'multiline':False]['text':' dtype, copying can be done much faster.','line_number':322,'multiline':False]['text':' Only try copying memory if there is more than 0 elements','line_number':365,'multiline':False]['text':' for a certain tensor','line_number':366,'multiline':False]['text':' Slow path','line_number':384,'multiline':False]['text':' namespace impl','line_number':400,'multiline':False]['text':' This function is meant to ease rapid operator coverage for','line_number':402,'multiline':False]['text':' NestedTensor kernels. It is not meant to be efficient. Use it judiciously.','line_number':403,'multiline':False]['text':' namespace native','line_number':414,'multiline':False]['text':' namespace at','line_number':415,'multiline':False]