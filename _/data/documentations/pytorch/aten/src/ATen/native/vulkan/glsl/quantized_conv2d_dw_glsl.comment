['text':'
 * TILE_SIZE = (1, 1, 1)
 * WEIGHT_STORAGE = TEXTURE_3D
 * BIAS_STORAGE = TEXTURE_3D
 * Note that for DW kernel IC = 1 so the weight layout is really OC4, H, W, 4oc
 ','line_number':5,'multiline':True]['text':' Qualifiers: layout - storage - precision - memory ','line_number':14,'multiline':True]['text':'
 * Output Image
 ','line_number':16,'multiline':True]['text':'
 * Input Textures
 ','line_number':21,'multiline':True]['text':'
 * Params Buffer
 ','line_number':28,'multiline':True]['text':' quantization scales, xyzw corresponds to output, input, kernel, bias','line_number':32,'multiline':False]['text':' quantization zero points, xyzw corresponds to output, input, kernel, bias','line_number':34,'multiline':False]['text':' extents of the output texture','line_number':36,'multiline':False]['text':' extents of the input texture','line_number':38,'multiline':False]['text':' size of the overlay region of the kernel','line_number':40,'multiline':False]['text':' width and height of the kernel','line_number':42,'multiline':False]['text':' convolution parameters','line_number':44,'multiline':False]['text':'
 * Local Work Group
 ','line_number':52,'multiline':True]['text':'
 * Dequantizes a float texel based on a scale and zero point.
 ','line_number':57,'multiline':True]['text':'
 * Quantizes a float texel based on a scale and zero point.
 ','line_number':64,'multiline':True]['text':' Return if this global position is outside output texture bounds','line_number':74,'multiline':False]['text':' Compute the index of the top-left element of the overlay region. Note that','line_number':79,'multiline':False]['text':' negative indices can be produced indicating that the top-left element is in','line_number':80,'multiline':False]['text':' a region added by padding.','line_number':81,'multiline':False]['text':' Compute the start and end of the input indices to load. Padding is assumed','line_number':84,'multiline':False]['text':' to be constant 0 padding, so any reads from the padding region is skipped.','line_number':85,'multiline':False]['text':' Compute the start of the kernel based on how far we are skipping ahead when','line_number':88,'multiline':False]['text':' reading the input','line_number':89,'multiline':False]['text':' The weight kernel was rearranged so that every NxN filter was flattened','line_number':101,'multiline':False]['text':' so that it fits on one row. Each filter was then stacked on top of each','line_number':102,'multiline':False]['text':' other vertically.','line_number':103,'multiline':False]