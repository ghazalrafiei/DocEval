['text':'
 * Input Sampler
 ','line_number':6,'multiline':True]['text':'
 * Output Buffer
 ','line_number':11,'multiline':True]['text':'
 * Params Buffer
 ','line_number':19,'multiline':True]['text':' xyz contain the extents of the input texture, w contains HxW to help','line_number':23,'multiline':False]['text':' calculate buffer offsets','line_number':24,'multiline':False]['text':' x: number of texels spanned by one batch','line_number':26,'multiline':False]['text':' y: number of channels','line_number':27,'multiline':False]['text':'
 * Local Work Group in_extents
 ','line_number':32,'multiline':True]['text':' each instance of the shader writes out a single element of the output','line_number':39,'multiline':False]['text':' the global size matches the size of the output, in other words:','line_number':40,'multiline':False]['text':' global size = {div_up(numel, 4), 1u, 1u}','line_number':41,'multiline':False]['text':' pos = {pos.x, 1, 1} where pos.x is the index of the output element','line_number':42,'multiline':False]['text':' each output element is a uint32 made up four consecutive uint8 from the','line_number':45,'multiline':False]['text':' input in nchw format. input_pos contains the positions of these four','line_number':46,'multiline':False]['text':' elements from the input in nchw format.','line_number':47,'multiline':False]['text':' we divide by CxHxW (uBlock.c_info.y * uBlock.in_extents.w), to find the','line_number':50,'multiline':False]['text':' index along the batch axis','line_number':51,'multiline':False]['text':' we compute the reminder mod CxHxW, to find the positions in the flatten','line_number':54,'multiline':False]['text':' out CxHxW plane.','line_number':55,'multiline':False]['text':' we devide pos_in_batch by HxW, to compute the channel index','line_number':58,'multiline':False]['text':' we compute the reminder mod HxW, to find the positions in the flatten','line_number':61,'multiline':False]['text':' out HxW plane.','line_number':62,'multiline':False]['text':' we divide this "flatten out position" by W, to find the positions along','line_number':66,'multiline':False]['text':' the y-axis (height) and we compute its reminder mod W, to find the','line_number':67,'multiline':False]['text':' position along the x-axis (width).','line_number':68,'multiline':False]['text':' z_pos contains the texel positions along the z-axis under the consideration','line_number':72,'multiline':False]['text':' of channel padding where (uBlock.c_info.y + 3) / 4 is equivalent as','line_number':73,'multiline':False]['text':' div_up(uBlock.c_info.y, 4), and ix the indices inside each texel.','line_number':74,'multiline':False]['text':' now we fetch each uint8 element from the input, and we write out a uint32','line_number':76,'multiline':False]['text':' whose binary representation is equal to: tex3 tex2 tex1 tex0','line_number':77,'multiline':False]