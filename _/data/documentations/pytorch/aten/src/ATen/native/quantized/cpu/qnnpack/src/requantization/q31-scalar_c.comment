['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]['text':' Compute requantization parameters ','line_number':28,'multiline':True]['text':' Multiplier is in [0x40000000, 0x7FFFFF80] range ','line_number':31,'multiline':True]['text':' Shift is in [0, 31] range ','line_number':37,'multiline':True]['text':'
     * Compute full 64-bit product of signed 32-bit factors.
     *
     * Note: multiplier can be treated as either signed or unsigned.
     ','line_number':55,'multiline':True]['text':'
     * Get the Q31 multiplication result by extracting bits 31-62 of the
     * product, with rounding up. Add rounding value (0x40000000) and then shift
     * right by 31 bits and extract the low 32-bit word. Note: casts to unsigned
     * types are needed to avoid undefined behavior. Given the multiplier range,
     * the result of Q31 multiplication is in [-2147483520, 2147483519] range.
     ','line_number':65,'multiline':True]['text':'
     * Arithmetically shift the adjusted product right with rounding.
     * Rounding is performed towards closest integer, with midpoints rounded
     * away from zero.
     *
     * Shift with correct rounding could be efficiently implemented by
     * pre-adding rounding constant, but with input in
     * [-2147483520, 2147483519] range and rounding constant up to 2**30 we
     * can't rule out overflow. This limitation leaves us with 3 options:
     * 1. Extend input to 64-bit signed integer, perform addition and shift on
     * 64-bit integers, then truncate result to 32 bits.
     * 2. Detect overflow and handle this situation separately. Note that
     * overflow is possible only when input is positive, and even when addition
     * of a rounding constant overflows 32-bit signed integer, it still doesn't
     *    overflow 32-bit unsigned integer. Thus, in case of signed overflow, we
     * can compute the result using unsigned arithmetics, specifically using
     * logical shift right instead of arithmetic shift right.
     * 3. Performs arithmetic shift as is, which will produce division result
     * rounded down. Then compute remainder of this division by a power of 2,
     * and adjust the result. Result needs adjustment (increment by 1) when
     *     - input is positive, shift is non-zero, and remainder >= 2**(shift -
     * 1), e.g. 10 >> 2 needs adjustment
     *     - input is negative, shift is non-zero, and remainder > 2**(shift -
     * 1), e.g. -10 >> 2 doesn't need adjustment These conditions can be
     * generalized as remainder + (input <= 0) > 2**(shift - 1) or equivalently
     *        remainder - (input < 0) > ((2**shift - 1) >> 1)
     *    When shift is 0, remainder is 0 as well, the last condition is always
     * false, and no adjustment is done.
     *
     * Among these options, option 3 is the most performant across the board,
     * although option 1 is promising for 64-bit instruction sets.
     ','line_number':81,'multiline':True]['text':'
     * Clamp scaled value with zero point between (qmin - zero point) and (qmax
     * - zero point).
     ','line_number':131,'multiline':True]['text':'
     * Add zero point to clamped value.
     * The result is guaranteed to be in [qmin, qmax] range.
     *
     * This addition can not be safely done before clamping, because scaled
     * values are in [-2147483520, 2147483519] range, so addition of zero point
     * (which can be up to 255) can overflow signed 32-bit integer.
     ','line_number':144,'multiline':True]