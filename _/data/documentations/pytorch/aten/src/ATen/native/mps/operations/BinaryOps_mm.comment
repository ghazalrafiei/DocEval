['text':'  Copyright Â© 2022 Apple Inc.','line_number':1,'multiline':False]['text':' alpha is always 1.0 except when this function is called from add_sub_lerp_template()','line_number':56,'multiline':False]['text':' it's possible to receive empty tensors here','line_number':83,'multiline':False]['text':' workaround for signed vs. unsigned comparison issue in MacOS 12','line_number':100,'multiline':False]['text':' this type inference is only required at the time of graph creation','line_number':124,'multiline':False]['text':' integer inputs must be cast to float, if output is float','line_number':127,'multiline':False]['text':' in boolean comparison ops with signed vs. unsigned integers, we always cast to the unsigned type','line_number':130,'multiline':False]['text':' Cast output tensor to an expected type if needed, which addresses discrepancy when int64 scalar is added to','line_number':143,'multiline':False]['text':' int32 tensor Output tensor should have been promoted but it remains an int32 tensor','line_number':144,'multiline':False]['text':'mpsShape','line_number':163,'multiline':True]['text':'gatherTensorData=','line_number':164,'multiline':True]['text':'mpsShape','line_number':174,'multiline':True]['text':'gatherTensorData=','line_number':175,'multiline':True]['text':' 'cachedGraph->alphaTensor' is not nil only if add_sub_lerp_template() was called with an alpha value != 1.0','line_number':180,'multiline':False]['text':' Rounding is a no-op for integral types, and also a reasonable workaround','line_number':226,'multiline':False]['text':' For MPSGraph bug on Apple Silicon, that throws `Function floorOp_i64 was not found in the library`','line_number':227,'multiline':False]['text':' See https://github.com/pytorch/pytorch/issues/84995','line_number':228,'multiline':False]['text':' if inplace, no-op','line_number':268,'multiline':False]['text':' if inplace, no-op','line_number':281,'multiline':False]['text':' if alpha is 1.0, then we don't bother adding another multiply to graph','line_number':297,'multiline':False]['text':' add alpha's type to the key only if multiply was added to graph','line_number':309,'multiline':False]['text':' namespace mps','line_number':318,'multiline':False]['text':' output of Boolean Ops will be cast to "MPSDataTypeBool" at the end of binaryOpTensor()','line_number':353,'multiline':False]['text':' Boolean Binary Ops','line_number':369,'multiline':False]['text':' Arithmetic Binary Ops','line_number':383,'multiline':False]['text':' Complex add with non-complex alpha is just add over views','line_number':424,'multiline':False]['text':' Complex sub with non-complex alpha is just add over views','line_number':433,'multiline':False]['text':' redispatch!','line_number':444,'multiline':False]['text':' namespace at::native','line_number':539,'multiline':False]