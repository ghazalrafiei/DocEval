['text':' offset2bag = [1 0 1 0 1]','line_number':67,'multiline':False]['text':' offset2bag = [0 0 1 0 1]','line_number':68,'multiline':False]['text':' offset2bag = [0 0 1 1 2]','line_number':69,'multiline':False]['text':' Determines if we can use a fast implementation for index_select_add, which','line_number':86,'multiline':False]['text':' is only applicable if special conditions are met','line_number':87,'multiline':False]['text':' Determines if we can use a fast implementation for index_select_scale_add,','line_number':96,'multiline':False]['text':' which is only applicable if special conditions are met','line_number':97,'multiline':False]['text':' This function combines index_select (using select_indices as the index) and','line_number':113,'multiline':False]['text':' index_add (using add_indices as the index), without creating an intermediary','line_number':114,'multiline':False]['text':' tensor to hold the selected embeddings','line_number':115,'multiline':False]['text':'offsets','line_number':123,'multiline':True]['text':'include_last_offset','line_number':124,'multiline':True]['text':' fbgemm_kernel_cache ','line_number':127,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':133,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':147,'multiline':False]['text':' the reduction','line_number':148,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':159,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':160,'multiline':False]['text':' namespace','line_number':194,'multiline':False]['text':' has_weight ','line_number':240,'multiline':True]['text':' block_size ','line_number':242,'multiline':True]['text':' has_weight ','line_number':243,'multiline':True]['text':' normalize_by_lengths ','line_number':244,'multiline':True]['text':' prefetch ','line_number':245,'multiline':True]['text':' is_weight_positional ','line_number':246,'multiline':True]['text':' use_offsets ','line_number':247,'multiline':True]['text':' is_bf16_out ','line_number':248,'multiline':True]['text':' is_bf16_in ','line_number':249,'multiline':True]['text':' output_size ','line_number':253,'multiline':True]['text':' index_size ','line_number':254,'multiline':True]['text':' data_size ','line_number':255,'multiline':True]['text':' input ','line_number':256,'multiline':True]['text':' indices ','line_number':257,'multiline':True]['text':' offsets_or_lengths ','line_number':258,'multiline':True]['text':' weights ','line_number':259,'multiline':True]['text':' output ','line_number':260,'multiline':True]['text':' Initialize the intermediate output buffer to be 0.','line_number':272,'multiline':False]['text':'block_size=','line_number':280,'multiline':True]['text':'output_size=','line_number':281,'multiline':True]['text':'index_size=','line_number':282,'multiline':True]['text':'data_size=','line_number':283,'multiline':True]['text':'input=','line_number':284,'multiline':True]['text':'indices=','line_number':285,'multiline':True]['text':'offsets=','line_number':286,'multiline':True]['text':'weights=','line_number':287,'multiline':True]['text':'scale_bias=','line_number':288,'multiline':True]['text':'normalize_by_lengths=','line_number':289,'multiline':True]['text':'out=','line_number':290,'multiline':True]['text':' Convert FP32 intermediate buffer result back to 16 bit for','line_number':292,'multiline':False]['text':' output dtype','line_number':293,'multiline':False]['text':' FP16','line_number':295,'multiline':False]['text':' BF16','line_number':301,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':322,'multiline':False]['text':' Initialize the intermediate output buffer to be 0.','line_number':337,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':343,'multiline':False]['text':' the reduction','line_number':344,'multiline':False]['text':' Copy src_data + src_stride0 * idx to src_data_fp32','line_number':351,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':365,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':366,'multiline':False]['text':' Convert FP32 intermediate buffer result back to 16 bit for output','line_number':371,'multiline':False]['text':' dtype','line_number':372,'multiline':False]['text':' has_weight ','line_number':420,'multiline':True]['text':' block_size ','line_number':422,'multiline':True]['text':' has_weight ','line_number':423,'multiline':True]['text':' normalize_by_lengths ','line_number':424,'multiline':True]['text':' prefetch ','line_number':425,'multiline':True]['text':' is_weight_positional ','line_number':426,'multiline':True]['text':' use_offsets ','line_number':427,'multiline':True]['text':' output_size ','line_number':434,'multiline':True]['text':' index_size ','line_number':435,'multiline':True]['text':' data_size ','line_number':436,'multiline':True]['text':' input ','line_number':437,'multiline':True]['text':' indices ','line_number':438,'multiline':True]['text':' offsets_or_lengths ','line_number':439,'multiline':True]['text':' weights ','line_number':440,'multiline':True]['text':' output ','line_number':441,'multiline':True]['text':'block_size=','line_number':452,'multiline':True]['text':'output_size=','line_number':453,'multiline':True]['text':'index_size=','line_number':454,'multiline':True]['text':'data_size=','line_number':455,'multiline':True]['text':'input=','line_number':456,'multiline':True]['text':'indices=','line_number':457,'multiline':True]['text':'offsets=','line_number':458,'multiline':True]['text':'weights=','line_number':459,'multiline':True]['text':'scale_bias=','line_number':460,'multiline':True]['text':'normalize_by_lengths=','line_number':461,'multiline':True]['text':'out=','line_number':462,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':469,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':481,'multiline':False]['text':' the reduction','line_number':482,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':497,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':498,'multiline':False]['text':' This function fuses the following three fns:','line_number':505,'multiline':False]['text':' index_select (using select_indices as the index)','line_number':506,'multiline':False]['text':' mul (scaling by per_sample_weights)','line_number':507,'multiline':False]['text':' index_add (using add_indices as the index)','line_number':508,'multiline':False]['text':'offsets','line_number':517,'multiline':True]['text':'include_last_offset','line_number':518,'multiline':True]['text':' fbgemm_kernel_cache ','line_number':521,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':527,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':544,'multiline':False]['text':' the reduction','line_number':545,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':559,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':560,'multiline':False]['text':' has_weight ','line_number':625,'multiline':True]['text':' block_size ','line_number':627,'multiline':True]['text':' has_weight ','line_number':628,'multiline':True]['text':' normalize_by_lengths ','line_number':629,'multiline':True]['text':' prefetch ','line_number':630,'multiline':True]['text':' is_weight_positional ','line_number':631,'multiline':True]['text':' use_offsets ','line_number':632,'multiline':True]['text':' is_bf16_out ','line_number':633,'multiline':True]['text':' is_bf16_in ','line_number':634,'multiline':True]['text':' output_size ','line_number':638,'multiline':True]['text':' index_size ','line_number':639,'multiline':True]['text':' data_size ','line_number':640,'multiline':True]['text':' input ','line_number':641,'multiline':True]['text':' indices ','line_number':642,'multiline':True]['text':' offsets_or_lengths ','line_number':643,'multiline':True]['text':' weights ','line_number':644,'multiline':True]['text':' output ','line_number':645,'multiline':True]['text':' Initialize the intermediate output buffer to be 0.','line_number':657,'multiline':False]['text':'block_size=','line_number':669,'multiline':True]['text':'output_size=','line_number':670,'multiline':True]['text':'index_size=','line_number':671,'multiline':True]['text':'data_size=','line_number':672,'multiline':True]['text':'input=','line_number':673,'multiline':True]['text':'indices=','line_number':674,'multiline':True]['text':'offsets=','line_number':675,'multiline':True]['text':'weights=','line_number':676,'multiline':True]['text':'scale_bias=','line_number':677,'multiline':True]['text':'normalize_by_lengths=','line_number':678,'multiline':True]['text':'out=','line_number':679,'multiline':True]['text':' Convert FP32 intermediate buffer result back to 16 bit for','line_number':681,'multiline':False]['text':' output dtype','line_number':682,'multiline':False]['text':' FP16','line_number':684,'multiline':False]['text':' BF16','line_number':690,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':711,'multiline':False]['text':' Initialize the intermediate output buffer to be 0.','line_number':724,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':730,'multiline':False]['text':' the reduction','line_number':731,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':746,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':747,'multiline':False]['text':' Convert FP32 intermediate buffer result back to 16 bit for output','line_number':752,'multiline':False]['text':' dtype','line_number':753,'multiline':False]['text':' has_weight ','line_number':801,'multiline':True]['text':' block_size ','line_number':803,'multiline':True]['text':' has_weight ','line_number':804,'multiline':True]['text':' normalize_by_lengths ','line_number':805,'multiline':True]['text':' prefetch ','line_number':806,'multiline':True]['text':' is_weight_positional ','line_number':807,'multiline':True]['text':' use_offsets ','line_number':808,'multiline':True]['text':' output_size ','line_number':815,'multiline':True]['text':' index_size ','line_number':816,'multiline':True]['text':' data_size ','line_number':817,'multiline':True]['text':' input ','line_number':818,'multiline':True]['text':' indices ','line_number':819,'multiline':True]['text':' offsets_or_lengths ','line_number':820,'multiline':True]['text':' weights ','line_number':821,'multiline':True]['text':' output ','line_number':822,'multiline':True]['text':'block_size=','line_number':833,'multiline':True]['text':'output_size=','line_number':834,'multiline':True]['text':'index_size=','line_number':835,'multiline':True]['text':'data_size=','line_number':836,'multiline':True]['text':'input=','line_number':837,'multiline':True]['text':'indices=','line_number':838,'multiline':True]['text':'offsets=','line_number':839,'multiline':True]['text':'weights=','line_number':840,'multiline':True]['text':'scale_bias=','line_number':841,'multiline':True]['text':'normalize_by_lengths=','line_number':842,'multiline':True]['text':'out=','line_number':843,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':850,'multiline':False]['text':' We can skip indices equal to padding_idx so they are not included in','line_number':865,'multiline':False]['text':' the reduction','line_number':866,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':880,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':881,'multiline':False]['text':' namespace','line_number':888,'multiline':False]['text':' Compute this for MODE_MEAN and MODE_MAX (latter needed for backwards)','line_number':946,'multiline':False]['text':' To save compute, if we are going to go down the fast path case for the 'sum'','line_number':991,'multiline':False]['text':' mode, we skip calculating offset2bag, since it is not going to be used.','line_number':992,'multiline':False]['text':' when include_last_offset is true, ignore the last index in offset.','line_number':1001,'multiline':False]['text':' fix segfault when include_last_offset is true and offsets[-1] != indices.size(0)','line_number':1002,'multiline':False]['text':' see https://github.com/pytorch/pytorch/issues/89677 for more details.','line_number':1003,'multiline':False]['text':' only initialize output in slow path','line_number':1010,'multiline':False]['text':' Decrement bag_size to reflect that the index is padded','line_number':1137,'multiline':False]['text':' make bag_size output deterministic','line_number':1166,'multiline':False]['text':' MODE_MAX','line_number':1172,'multiline':False]['text':' Assumes all input tensors except for `weight` are contiguous.','line_number':1192,'multiline':False]['text':' See NOTE [ embedding_bag Native Functions ] in native_functions.yaml for details','line_number':1193,'multiline':False]['text':' embedding_bag wrapper to enforce contiguity in tensors other than `weight`.','line_number':1238,'multiline':False]['text':' This is created to save extra `.contiguous()` call in backward.','line_number':1239,'multiline':False]['text':' See NOTE [ embedding_bag Native Functions ] in native_functions.yaml for details','line_number':1240,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1246,'multiline':False]['text':'level=','line_number':1261,'multiline':True]['text':' Assumes all input tensors except for `weight` are contiguous.','line_number':1282,'multiline':False]['text':' See NOTE [ embedding_bag Native Functions ] in native_functions.yaml for details','line_number':1283,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1289,'multiline':False]['text':'requires_grad=','line_number':1302,'multiline':True]['text':' Assumes all input tensors except for `weight` are contiguous.','line_number':1305,'multiline':False]['text':' See NOTE [ embedding_bag Native Functions ] in native_functions.yaml for details','line_number':1306,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1312,'multiline':False]['text':'requires_grad=','line_number':1326,'multiline':True]['text':' scale_grad_by_freq ','line_number':1337,'multiline':True]['text':' sparse ','line_number':1339,'multiline':True]['text':' Assumes all input tensors are contiguous.','line_number':1399,'multiline':False]['text':' See NOTE [ embedding_bag Native Functions ] in native_functions.yaml for details','line_number':1400,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1410,'multiline':False]['text':' offset2bag = [0 0 0 0 0]','line_number':1427,'multiline':False]['text':' For Composite Compliance, if `offset2bag_` is CCT','line_number':1430,'multiline':False]['text':' then we can't call `resize_`. Instead we call `narrow`','line_number':1431,'multiline':False]['text':' to slice the tensor.','line_number':1432,'multiline':False]['text':' counts_uniq stores the index of the NEXT unique element','line_number':1486,'multiline':False]['text':' of the (sorted) indices vector.','line_number':1487,'multiline':False]['text':'','line_number':1488,'multiline':False]['text':' For example:','line_number':1489,'multiline':False]['text':' indices: [0, 0, 0, 1, 3, 3, 4]','line_number':1490,'multiline':False]['text':' counts: [3, 1, 0, 2, 1, 0]','line_number':1491,'multiline':False]['text':' counts_uniq: [3, 4, 6, 7]','line_number':1492,'multiline':False]['text':'','line_number':1493,'multiline':False]['text':' The unique indices can be found at index 0, 3, 4, 6.','line_number':1494,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':1527,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1536,'multiline':False]['text':' explicitly capture all required variables to work around windows build','line_number':1547,'multiline':False]['text':' TODO: fix this when windows can correctly capture variables in nested lambda','line_number':1548,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1611,'multiline':False]['text':' indices_, offsets_ and offset2bag__ are assumed having correct dtypes and','line_number':1615,'multiline':False]['text':' contiguous here due to the checks in _embedding_bag_backward above.','line_number':1616,'multiline':False]['text':' Also see NOTE [ embedding_bag Native Functions ] in native_functions.yaml','line_number':1617,'multiline':False]['text':' for more details.','line_number':1618,'multiline':False]['text':' NB: embedding table, not per_sample_weights','line_number':1657,'multiline':False]['text':' offset2bag = [0 0 0 0 0]','line_number':1687,'multiline':False]['text':' explicitly capture all required variables to work around windows build','line_number':1707,'multiline':False]['text':' TODO: fix this when windows can correctly capture variables in nested lambda','line_number':1708,'multiline':False]['text':' The following are contiguous','line_number':1715,'multiline':False]['text':' XXX: 64 was arbitrarily chosen. There is probably a sweet spot for this number.','line_number':1719,'multiline':False]['text':' NB: embedding table, not per_sample_weights','line_number':1741,'multiline':False]['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':1764,'multiline':False]['text':' indices, offsets and offset2bag are assumed having correct dtypes and','line_number':1768,'multiline':False]['text':' contiguous here due to the checks in _embedding_bag_backward above.','line_number':1769,'multiline':False]['text':' Also see NOTE [ embedding_bag Native Functions ] in native_functions.yaml','line_number':1770,'multiline':False]['text':' for more details.','line_number':1771,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':1773,'multiline':False]['text':' namespace at::native','line_number':1787,'multiline':False]