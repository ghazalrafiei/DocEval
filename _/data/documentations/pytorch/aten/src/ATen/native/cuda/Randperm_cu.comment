['text':' [Algorithm of randperm]','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' randperm is implemented by sorting an arange tensor of size n with randomly','line_number':25,'multiline':False]['text':' generated keys. When random keys are different from each other, all different','line_number':26,'multiline':False]['text':' permutations have the same probability.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' However, there is a pitfall here:','line_number':29,'multiline':False]['text':' For better performance, these N random keys are generated independently,','line_number':30,'multiline':False]['text':' and there is no effort to make sure they are different at the time of generation.','line_number':31,'multiline':False]['text':' When two keys are identical, stable sorting algorithms will not permute these two keys.','line_number':32,'multiline':False]['text':' As a result, (0, 1) will appear more often than (1, 0).','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' To overcome this pitfall we first carefully choose the number of bits in these keys,','line_number':35,'multiline':False]['text':' so that the probability of having duplicate keys is under a threshold. Let q be the','line_number':36,'multiline':False]['text':' threshold probability for having non-duplicate keys, then it can be proved that[1]','line_number':37,'multiline':False]['text':' the number of bits required is: ceil(log2(n - (6 n^2 + 1) / (12 log(q))))','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' Then after sort, we lauch a separate kernel that additionally shuffles any islands','line_number':40,'multiline':False]['text':' of values whose keys matched. The algorithm of this kernel is as follows:','line_number':41,'multiline':False]['text':' Each thread reads its key and the keys of its neighbors to tell if it's part of an island.','line_number':42,'multiline':False]['text':' For each island, the first thread in the island sees a key match at index i+1 but not index i-1.','line_number':43,'multiline':False]['text':' This thread considers itself the "island leader". The island leader then reads more indices to','line_number':44,'multiline':False]['text':' the right to figure out how big the island is. Most likely, the island will be very small,','line_number':45,'multiline':False]['text':' just a few values. The island leader then rolls that many RNG, uses them to additionally','line_number':46,'multiline':False]['text':' shuffle values within the island using serial Fisher-Yates, and writes them out.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' Reference','line_number':49,'multiline':False]['text':' [1] https://osf.io/af2hy/','line_number':50,'multiline':False]['text':' The kernels are templated on an opaque, self-aligned type of the correct','line_number':52,'multiline':False]['text':' size to avoid redundant kernels for different types of the same size.','line_number':53,'multiline':False]['text':' shuffled_data points to the underlying data of the output tensor if the tensor is contiguous; otherwise it','line_number':67,'multiline':False]['text':' points to a new tensor.','line_number':68,'multiline':False]['text':' See note [Algorithm of randperm]','line_number':80,'multiline':False]['text':' For asserting device type match of the generator and result,','line_number':90,'multiline':False]['text':' we deligate that to the 'random_' function below.','line_number':91,'multiline':False]['text':' namespace at::native','line_number':133,'multiline':False]