['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]['text':'*
 * Imagine a we want to do dw conv or avgpooling with these parameters:
 * kernel_width/height=3 stride=2
 * Input is:
 *  ---------------
 *  |0|1|2|3|4|5|6|
 *  ---------------       -------
 *  | | | | | | | |   to  |0|1|2|
 *  ---------------       -------
 *  | | | | | | | |       | | | |
 *  ---------------       -------
 *  | | | | | | | |
 *  ---------------
 *  | | | | | | | |
 *  ---------------
 *
 *  Thus we are going from width=7 height=5 input to width=3 height=2
 *  Convince yourself that input 5x7 with pooling params of 3x3 kernel
 *  with 2x2 stride gets you to 2x3 output.
 *  Now for each output place (0,0), (0,1), (0,2), (1,0), (1,1), (1,2)
 *  we have 3x3 input.
 *  For just the first row of output this will look like as follows:
 *  pixel:0   pixel:1  pixel:2
 *  -------   -------  -------
 *  |0|1|2|   |2|3|4|  |4|5|6|
 *  -------   -------  -------
 *  | | | |   | | | |  | | | |
 *  -------   -------  -------
 *  | | | |   | | | |  | | | |
 *  -------   -------  -------
 *  As you can see there is some overlap in the input needed for each
 *  output pixel.
 *  What is indirection buffer:
 *  Indirection buffer just stores the pointer to the underlying data.
 *  In this case pointer for a particular input position will point to
 *  all the input channels of that position in NHWC format.
 *  So one option for the aforemnetioned storage would be:
 *  For each output position: store a 3x3 array of pointers. Thus we
 *  would have 3x3 * 3 (3 output pixel of the first row) = 27 pointers
 *  stored.
 *  Now instead we store the pointer in this format:
 *  ---------------
 *  |0|1|2|3|4|5|6|
 *  ---------------
 *  | | | | | | | |
 *  ---------------
 *  | | | | | | | |
 *  ---------------
 *  Then we have all the pointers needed as before, but with less duplication.
 *  So instead of 27 pointers now we have:
 *  (3 (# of output pixels) - 1) * (stride) * 3 (kernel height) * + 3 * 3 (kernel h*w)
 *  = 4 * 3 + 9
 *  = 21 pointers.
 *  which is the equation below.
 *  Now in order for this to work the kernel has to be adjusted.
 *  Here the kernel produced output worth of entire width. Thus as you move from one
 *  pixel to the next, the jump in the indirection buffer has to be not 3*3 = 9
 *  but kernel height (3) * stride (2) = 6.
 *  This you will see operator-run.c
 *
 * step_width: The number of yz slices of the kernel to traverse to move from
 *   the starting input index of an output pixel in the indirection buffer to
 *   that of the output pixel directly after it in the same row.
 *   i.e. if indirection_buffer[j] points to the first input pixel used to
 *   compute the i'th output pixel, then
 *   indirection_buffer[j + (kernel_depth * kernel_height * step_width)]
 *   points to the first input pixel used to compute the (i + 1)'th output
 *   pixel if in the same row
 *   When dilation is 1 (for convolution): if neighboring output pixels use
 *   overlapping regions of the input, this overlap is not included in the
 *   indirection buffer (saving some space), hence step width is set to stride
 *   width
 *
 * step_height: The number of pointers to traverse to move from an output
 *   pixel's first input's index in the indirection bufffer to that of the
 *   output pixel one ROW (one output y) after it.
 *   i.e. if indirection_buffer[j] points to the first input pixel used to
 *   compute the i'th output pixel, then
 *   indirection_buffer[j + step_height] points to the first
 *   input pixel used to compute the output pixel one row below-
 *   the (i + output_width)'th output pixel
 *
 * step_depth: Same as step height but for an xy slice rather than a row
 *
 * The input operator's step dimensions must have been set up before calling
 * this function.
 ','line_number':137,'multiline':True]['text':' Output Pixel ','line_number':255,'multiline':True]['text':' slice ','line_number':256,'multiline':True]['text':' row ','line_number':257,'multiline':True]['text':' column ','line_number':258,'multiline':True]['text':' Kernel ','line_number':259,'multiline':True]['text':' column ','line_number':260,'multiline':True]['text':' row ','line_number':261,'multiline':True]['text':' slice ','line_number':262,'multiline':True]['text':' slice','line_number':290,'multiline':False]['text':' row','line_number':291,'multiline':False]['text':' column','line_number':292,'multiline':False]