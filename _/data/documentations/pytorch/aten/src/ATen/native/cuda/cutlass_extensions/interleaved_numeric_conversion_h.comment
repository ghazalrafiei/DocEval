['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]['text':'!
    \file
    \brief Boost-like numeric conversion operator for int8 and CUTLASS int4b_t interleaved in a register
','line_number':31,'multiline':True]['text':' This converter is meant to be used with data interleaved in a 32-bit register where the even elements are in the low','line_number':45,'multiline':False]['text':' bits and the odd elemeents are in the high bits of the register. In addition, it assumes elements were originally','line_number':46,'multiline':False]['text':' signed and had a bias of 2**(b-1) added (where b is the number of bits in the type) to make all numbers unsigned.','line_number':47,'multiline':False]['text':' This converter will uninterleave the data and subtract the bias while converting to the result type.','line_number':48,'multiline':False]['text':' Lastly, we subtract 1152 from our constructed number using fp16 math to get our signed integer as fp16.','line_number':72,'multiline':False]['text':' Construct FP32s, bfloat does not have enough mantissa for IADD trick','line_number':142,'multiline':False]['text':' Subtract out fp32_base + 128 to make the unsigned integer signed.','line_number':149,'multiline':False]['text':' Truncate the fp32 representation and pack up as bfloat16s.','line_number':155,'multiline':False]['text':' Disable this on architectures older than Ampere since they lack hardware for bf16 mma. If one wishes to use','line_number':162,'multiline':False]['text':' HMMA on older hardware, they should Convert directly to FP16 using FP16 converters.','line_number':163,'multiline':False]['text':' Suppress compiler warning','line_number':164,'multiline':False]['text':' First, we extract the i4s and construct an intermediate fp16 number.','line_number':228,'multiline':False]['text':' Note that the entire sequence only requires 1 shift instruction. This is thanks to the register packing','line_number':234,'multiline':False]['text':' format and the fact that we force our integers to be unsigned, and account for this in the fp16 subtractions.','line_number':235,'multiline':False]['text':' In addition, I exploit the fact that sub and fma have the same throughput in order to convert elt_23 and','line_number':236,'multiline':False]['text':' elt_67 to fp16 without having to shift them to the bottom bits before hand.','line_number':237,'multiline':False]['text':' Shift right by 8 to now consider elt_45 and elt_67. Issue first to hide RAW dependency if we issue','line_number':239,'multiline':False]['text':' immediately before required.','line_number':240,'multiline':False]['text':' Extract elt_01 - (i4s & 0x000f000f) | 0x64006400','line_number':242,'multiline':False]['text':' Extract elt_23 (i4s & 0x00f000f0) | 0x64006400','line_number':246,'multiline':False]['text':' Extract elt_45 (top_i4s & 0x000f000f) | 0x64006400','line_number':250,'multiline':False]['text':' Extract elt_67 (top_i4s & 0x00f000f0) | 0x64006400','line_number':254,'multiline':False]['text':' I use inline PTX below because I am not sure if the compiler will emit float2half instructions if I use the','line_number':259,'multiline':False]['text':' half2 ctor. In this case, I chose performance reliability over code readability.','line_number':260,'multiline':False]['text':' This is the half2 {1032, 1032} represented as an integer.','line_number':262,'multiline':False]['text':' This is the half2 {1 / 16, 1 / 16} represented as an integer.','line_number':264,'multiline':False]['text':' This is the half2 {-72, -72} represented as an integer.','line_number':266,'multiline':False]['text':' Finally, we construct the output numbers.','line_number':269,'multiline':False]['text':' Convert elt_01','line_number':270,'multiline':False]['text':' Convert elt_23','line_number':272,'multiline':False]['text':' Convert elt_45','line_number':274,'multiline':False]['text':' Convert elt_67','line_number':276,'multiline':False]['text':' First, we extract the i4s and construct an intermediate fp16 number.','line_number':341,'multiline':False]['text':' We don't have enough mantissa to remove as much shift overhead as FP16, so we must loop.','line_number':346,'multiline':False]['text':' No shift needed for first item.','line_number':347,'multiline':False]['text':' (i4s & 0x000f000f) | 0x43004300','line_number':355,'multiline':False]['text':' This is the BF16 {-136, -136} represented as an integer.','line_number':361,'multiline':False]['text':' Finally, we construct the output numbers.','line_number':365,'multiline':False]['text':' Since this section is for Ampere+, we use bf16 fma to do the bias subtraction','line_number':368,'multiline':False]['text':' Disable this on architectures older than Ampere since they lack hardware for bf16 mma. If one wishes to use','line_number':372,'multiline':False]['text':' HMMA on older hardware, they should Convert directly to FP16 using FP16 converters.','line_number':373,'multiline':False]['text':' Suppress compiler warning.','line_number':375,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':425,'multiline':False]['text':' namespace cutlass','line_number':427,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':429,'multiline':False]