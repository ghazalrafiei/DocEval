['text':' NOTE [ Flatten Sparse Indices ]','line_number':26,'multiline':False]['text':' This helper function flattens a sparse indices tensor (a Tensor) into a 1D','line_number':27,'multiline':False]['text':' indices tensor. E.g.,','line_number':28,'multiline':False]['text':'   input = [[2, 4, 0],','line_number':29,'multiline':False]['text':'            [3, 1, 10]]','line_number':30,'multiline':False]['text':'   full_size = [2, 12]','line_number':31,'multiline':False]['text':'   output = [ 2 * 12 + 3, 4 * 12 + 1, 0 * 12 + 10 ] = [27, 49, 10]','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' In other words, assuming that each `indices[i, :]` is a valid index to a','line_number':34,'multiline':False]['text':' tensor `t` of shape `full_size`. This returns the corresponding indices to','line_number':35,'multiline':False]['text':' the flattened tensor `t.reshape( prod(full_size[:indices.size(0)]), -1 )`.','line_number':36,'multiline':False]['text':' if forceClone is true, the result will forced to be a clone of self.','line_number':37,'multiline':False]['text':' if force_clone is true, the result will forced to be a clone of self.','line_number':38,'multiline':False]['text':'= false','line_number':39,'multiline':True]['text':' Flatten sparse tensor's indices from nD to 1D, similar to NOTE [ Flatten Sparse Indices ],','line_number':55,'multiline':False]['text':' except this one allows partial flatten: only flatten on specified dims. Note that','line_number':56,'multiline':False]['text':' the flatten indices might be uncoalesced if dims_to_flatten.size() < sparse_dim.','line_number':57,'multiline':False]['text':' Also if input indices is already coalesced, the flattened indices will also be sorted.','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' args:','line_number':60,'multiline':False]['text':'    indices: sparse tensor indices','line_number':61,'multiline':False]['text':'    sizes: sparse tensor sizes','line_number':62,'multiline':False]['text':'    dims_to_flatten: a list of dim index to flatten','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' Ex1:','line_number':65,'multiline':False]['text':'   indices = [[2, 4, 0],','line_number':66,'multiline':False]['text':'             [3, 1, 3]]','line_number':67,'multiline':False]['text':'   sizes = [2, 12]','line_number':68,'multiline':False]['text':'   dims_to_flatten = [0, 1]','line_number':69,'multiline':False]['text':'   new_indices = [ 2 * 12 + 3, 4 * 12 + 1, 0 * 12 + 3 ] = [27, 49, 3]','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' Ex2:','line_number':72,'multiline':False]['text':'   dims_to_flatten = [1]','line_number':73,'multiline':False]['text':'   new_indices = [ 3, 1, 3 ]  # uncoalesced','line_number':74,'multiline':False]['text':'
    Find the CSR representation for a row `indices` from the COO format
    Inputs:
      `indices` is the row pointer from COO indices
      `dim` is the row dimensionality
      `nnz` is the number of non-zeros

    Output:
      `csr` is a compressed row array in a CSR format
  ','line_number':85,'multiline':True]['text':' TODO: eliminate this conditional when zero-size dims supported correctly','line_number':97,'multiline':False]['text':' Convert the sparse matrix to CSR format','line_number':100,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':102,'multiline':False]['text':' namespace at::sparse','line_number':130,'multiline':False]