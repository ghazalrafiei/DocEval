['text':' The next function is taken from  https://github.com/antelopeusersgroup/antelope_contrib/blob/master/lib/location/libgenloc/erfinv.c.
Below is the copyright.
Output was modified to be inf or -inf when input is 1 or -1. ','line_number':22,'multiline':True]['text':'
    Copyright (c) 2014 Indiana University
    All rights reserved.

    Written by Prof. Gary L. Pavlis, Dept. of Geol. Sci.,
            Indiana University, Bloomington, IN

    This software is licensed under the New BSD license:

    Redistribution and use in source and binary forms,
    with or without modification, are permitted provided
    that the following conditions are met:

    Redistributions of source code must retain the above
    copyright notice, this list of conditions and the
    following disclaimer.

    Redistributions in binary form must reproduce the
    above copyright notice, this list of conditions and
    the following disclaimer in the documentation and/or
    other materials provided with the distribution.

    Neither the name of Indiana University nor
    the names of its contributors may be used to endorse
    or promote products derived from this software without
    specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
    CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
    THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
    IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
','line_number':27,'multiline':True]['text':'
 * This function is derived from the implementation of the i0e function in the
 * Cephes Math Library. See note [3-Clause BSD License for the Cephes Math
 * Library].
 *
 * Computes an approximation of the exponentially scaled zeroth order modified
 * Bessel function of the first kind. The approximation is actually two
 * (sub)approximations, both using a Chebyshev polynomial expansion. One
 * approximates the function over [0, 8], and the other over (8, infinity). This
 * function takes the absolute value of all inputs to convert them into the
 * domain of the approximation.
 ','line_number':72,'multiline':True]['text':' x > 8','line_number':127,'multiline':False]['text':' i0e_string','line_number':145,'multiline':False]['text':' Function to calculate inverse error function.  Rational approximation
is used to generate an initial approximation, which is then improved to
full accuracy by two steps of Newton's method.  Code is a direct
translation of the erfinv m file in matlab version 2.0.
Author:  Gary L. Pavlis, Indiana University
Date:  February 1996
','line_number':153,'multiline':True]['text':'working variables ','line_number':160,'multiline':True]['text':' coefficients in rational expansion ','line_number':161,'multiline':True]['text':' error C2039: '_copysign': is not a member of 'std'','line_number':169,'multiline':False]['text':' error C2039: '_copysign': is not a member of 'std'','line_number':185,'multiline':False]['text':' Two steps of Newton-Raphson correction ','line_number':191,'multiline':True]['text':'
 * Note [3-Clause BSD License for the Cephes Math Library]
 * Code derived from implementations in the Cephes Math Library should mention its derivation and reference
 * this note (ex. 'This function is derived from the implementation of X in the Cephes Math Library. See note
 * [3-Clause BSD License for the Cephes Math Library]. The license is:
 * Copyright (c) 2018, Steven Moshier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * * Neither the name of the nor the
 * names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Steven Moshier BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':200,'multiline':True]['text':'
 * This function is derived from the implementation of the zeta function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 ','line_number':231,'multiline':True]['text':'1.307674368e12/691','line_number':248,'multiline':True]['text':'1.067062284288e16/3617','line_number':250,'multiline':True]['text':'5.109094217170944e18/43867','line_number':251,'multiline':True]['text':'8.028576626982912e20/174611','line_number':252,'multiline':True]['text':'1.5511210043330985984e23/854513','line_number':253,'multiline':True]['text':'1.6938241367317436694528e27/236364091','line_number':254,'multiline':True]['text':'
 * This function is derived from the implementation of the digamma function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Evaluates polynomial of degree N:
 *
 *                     2          N
 * y  =  C  + C x + C x  +...+ C x
 *        0    1     2          N
 *
 * Coefficients are stored in reverse order:
 *
 * coef[0] = C  , ..., coef[N] = C  .
 *            N                   0
 ','line_number':312,'multiline':True]['text':'
 * This function is derived from the implementation of the digamma function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 ','line_number':372,'multiline':True]['text':' [C++ Standard Reference: Gamma Function] https://en.cppreference.com/w/cpp/numeric/math/tgamma','line_number':377,'multiline':False]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':380,'multiline':False]['text':' If the argument is ±0, ±∞ is returned','line_number':381,'multiline':False]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':388,'multiline':False]['text':' If the argument is a negative integer, NaN is returned','line_number':389,'multiline':False]['text':' Extracts the fractional part of x as r, since tan(pi * r) is more numerically','line_number':392,'multiline':False]['text':' accurate than tan(pi * x). While these operations are mathematically equivalent','line_number':393,'multiline':False]['text':' since both x and r are in radians and tan() has a periodicity of pi, in practice','line_number':394,'multiline':False]['text':' the computation of pi * x is a source of error (when |x| > 1).','line_number':395,'multiline':False]['text':' Push x to be >= 10','line_number':401,'multiline':False]['text':' Compute asymptotic digamma','line_number':411,'multiline':False]['text':'
 * This function is derived from the implementation of the digamma function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 ','line_number':430,'multiline':True]['text':' See [C++ Standard Reference: Gamma Function]','line_number':435,'multiline':False]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':438,'multiline':False]['text':' If the argument is ±0, ±∞ is returned','line_number':439,'multiline':False]['text':' As per C++ standard for gamma related functions and SciPy,','line_number':446,'multiline':False]['text':' If the argument is a negative integer, NaN is returned','line_number':447,'multiline':False]['text':' Extracts the fractional part of x as r, since tan(pi * r) is more numerically','line_number':450,'multiline':False]['text':' accurate than tan(pi * x). While these operations are mathematically equivalent','line_number':451,'multiline':False]['text':' since both x and r are in radians and tan() has a periodicity of pi, in practice','line_number':452,'multiline':False]['text':' the computation of pi * x is a source of error (when |x| > 1).','line_number':453,'multiline':False]['text':' Push x to be >= 10','line_number':460,'multiline':False]['text':' Compute asymptotic digamma','line_number':470,'multiline':False]['text':' already blocked if n <= 1','line_number':499,'multiline':False]['text':' regularized lower incomplete gamma','line_number':506,'multiline':False]['text':' the regularized lower, upper incomplete gamma, as well as their','line_number':507,'multiline':False]['text':' helper functions follow SciPy's implementation','line_number':508,'multiline':False]['text':' References
 * [igam1] "The Digital Library of Mathematical Functions", dlmf.nist.gov
 * [igam2] Maddock et. al., "Incomplete Gamma Functions",
 *     https://www.boost.org/doc/libs/1_61_0/libs/math/doc/html/math_toolkit/sf_gamma/igamma.html
 ','line_number':510,'multiline':True]['text':'
 * This implementation of the regularized incomplete gamma functions and
 * their helper functions are derived from the implementation of SciPy's
 * gammainc, Cephes's igam and igamc, and Boost's Lanczos approximations.
 * See NOTICE for the licenses.
 ','line_number':516,'multiline':True]['text':' evaluating rational function, i.e., the ratio of two polynomials','line_number':525,'multiline':False]['text':' the coefficients for numerator are given by `num` while coeffs for','line_number':526,'multiline':False]['text':' denumerator are given by `denom`','line_number':527,'multiline':False]['text':' Evaluate as a polynomial in 1/x. ','line_number':535,'multiline':True]['text':' Evaluate the numerator ','line_number':546,'multiline':True]['text':' Evaluate the denominator ','line_number':553,'multiline':True]['text':' SciPy's lanczos implementation is taken from Boost','line_number':576,'multiline':False]['text':' (C) Copyright John Maddock 2006.
 * Use, modification and distribution are subject to the
 * Boost Software License, Version 1.0. See
 * https://www.boost.org/LICENSE_1_0.txt or see NOTICE.
 ','line_number':577,'multiline':True]['text':' lanczos approximation','line_number':584,'multiline':False]['text':' compute x^a * exp(-a) / gamma(a)','line_number':623,'multiline':False]['text':' corrected from (15) and (16) in [igam2] by replacing exp(x - a) with','line_number':624,'multiline':False]['text':' exp(a - x).','line_number':625,'multiline':False]['text':' Compute igam using DLMF 8.11.4. [igam1]','line_number':657,'multiline':False]['text':' power series ','line_number':670,'multiline':True]['text':' Compute igamc using DLMF 8.7.3 [igam1]. This is related to the series in','line_number':688,'multiline':False]['text':' _igam_helper_series but extra care is taken to avoid cancellation.','line_number':689,'multiline':False]['text':' Compute igam/igamc using DLMF 8.12.3/8.12.4 [igam1]','line_number':715,'multiline':False]['text':' Compute igamc using DLMF 8.9.2. [igam1]','line_number':1005,'multiline':False]['text':' continued fraction ','line_number':1022,'multiline':True]['text':' the calculation of the regularized upper incomplete gamma function
   * is done differently based on the values of a and x:
   * - if x and/or a is at the boundary of defined region, then assign the
   *   result at the boundary
   * - if a is large and a ~ x, then using Uniform Asymptotic Expansions for
   *   Large Parameter (see DLMF 8.12.4 [igam1])
   * - if x > 1.1 and x < a, using the substraction from the regularized lower
   *   incomplete gamma
   * - otherwise, calculate the series from [igam2] eq (5)
   ','line_number':1066,'multiline':True]['text':' note that in SciPy, a and x are non-negative, with exclusive 0s (i.e.,','line_number':1083,'multiline':False]['text':' at most 1 of them can be 0), where igammac(0, x) = 0.0 iff x > 0.','line_number':1084,'multiline':False]['text':' out of defined-region of the function','line_number':1086,'multiline':False]['text':' the calculation of the regularized lower incomplete gamma function
   * is done differently based on the values of a and x:
   * - if x and/or a is at the boundary of defined region, then assign the
   *   result at the boundary
   * - if a is large and a ~ x, then using Uniform Asymptotic Expansions for
   *   Large Parameter (see DLMF 8.12.3 [igam1])
   * - if x > 1 and x > a, using the substraction from the regularized upper
   *   incomplete gamma
   * - otherwise, calculate the series from [igam2] eq (4)
   ','line_number':1146,'multiline':True]['text':' boundary values following SciPy','line_number':1162,'multiline':False]['text':' note that in SciPy, a and x are non-negative, with exclusive 0s (i.e.,','line_number':1163,'multiline':False]['text':' at most 1 of them can be 0), where igamma(0, x) = 1.0 iff x > 0.','line_number':1164,'multiline':False]['text':' out of defined-region of the function','line_number':1166,'multiline':False]['text':' zero integration limit','line_number':1178,'multiline':False]['text':' Asymptotic regime where a ~ x. See [igam2] ','line_number':1190,'multiline':True]['text':' There is no std::exp2 overload for complex, so instead','line_number':1258,'multiline':False]['text':' use the identity 2^x = e^(ln(2) * x)','line_number':1259,'multiline':False]['text':'
 * This function is derived from the implementation of the chbevl function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Evaluates the series
 *
 *       len-1
 *         - '
 *  y  =   >   array[i] T (x/2)
 *         -             i
 *        i=0
 *
 * of Chebyshev polynomials Ti at argument x/2.
 *
 * Coefficients are stored in reverse order, i.e. the zero order term is last in the array.  Note len is the number of
 * coefficients, not the order.
 *
 * If coefficients are for the interval a to b, x must have been transformed to x -> 2(2x - b - a)/(b-a) before
 * entering the routine.  This maps x from (a, b) to (-1, 1), over which the Chebyshev polynomials are defined.
 *
 * If the coefficients are for the inverted interval, in which (a, b) is mapped to (1/b, 1/a), the transformation
 * required is x -> 2(2ab/x - b - a)/(b-a).  If b is infinity, this becomes x -> 4a/x - 1.
 ','line_number':1264,'multiline':True]['text':'
 * This function is derived from the implementation of the i0 function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Computes an approximation of the zeroth order modified Bessel function of the first kind.
 * The approximation is actually two (sub)approximations, both using a Chebyshev polynomial expansion.
 * One approximates the function over [0, 8], and the other over (8, infinity). This function takes the absolute value
 * of all inputs to convert them into the domain of the approximation.
 ','line_number':1304,'multiline':True]['text':' Chebyshev coefficients for exp(-x) I0(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I0(x) } = 1.
   ','line_number':1315,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
   ','line_number':1341,'multiline':True]['text':' Chebyshev coefficients for exp(-x) I1(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
   ','line_number':1367,'multiline':True]['text':' Chebyshev coefficients for exp(-x) I1(x)
   * in the interval [0,8].
   *
   * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
   ','line_number':1394,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
   ','line_number':1423,'multiline':True]['text':' Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
   * in the inverted interval [8,infinity].
   *
   * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
   ','line_number':1449,'multiline':True]['text':' Upcast bfloat16 input to float for numerical accuracy purposes','line_number':1484,'multiline':False]['text':'
 * This function is derived from the implementation of the i1 function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Computes an approximation of the first order modified Bessel function of the first kind.
 * The approximation is actually two (sub)approximations, both using a Chebyshev polynomial expansion.
 * One approximates the function over [0, 8], and the other over (8, infinity). This function takes the absolute value
 * of all inputs to convert them into the domain of the approximation.
 ','line_number':1487,'multiline':True]['text':'
 * This function is derived from the implementation of the i1e function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Computes an approximation of the exponentially scaled first order modified Bessel function of the first kind.
 * The approximation is actually two (sub)approximations, both using a Chebyshev polynomial expansion.
 * One approximates the function over [0, 8], and the other over (8, infinity). This function takes the absolute value
 * of all inputs to convert them into the domain of the approximation.
 ','line_number':1516,'multiline':True]['text':'
 * This function is derived from the implementation of the i1e function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library].
 *
 * Computes the argument, x, for which the area under the Gaussian probability density function
 * (integrated from minus infinity to x) is equal to y.
 ','line_number':1545,'multiline':True]['text':' sqrt(2pi) ','line_number':1555,'multiline':True]['text':' approximation for 0 <= |y - 0.5| <= 3/8 ','line_number':1560,'multiline':True]['text':' Approximation for interval z = sqrt(-2 log y ) between 2 and 8
  * i.e., y between exp(-2) = .135 and exp(-32) = 1.27e-14.
  ','line_number':1581,'multiline':True]['text':' Approximation for interval z = sqrt(-2 log y ) between 8 and 64
  * i.e., y between exp(-32) = 1.27e-14 and exp(-2048) = 3.67e-890.
  ','line_number':1608,'multiline':True]['text':' 0.135... = exp(-2) ','line_number':1647,'multiline':True]['text':' y > exp(-32) = 1.2664165549e-14 ','line_number':1664,'multiline':True]['text':' The next function is taken from http://ab-initio.mit.edu/Faddeev ','line_number':1677,'multiline':True]['text':' Copyright (c) 2012 Massachusetts Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1679,'multiline':True]['text':' erfcx(x) = exp(x^2) erfc(x) function, for real x, written by
   Steven G. Johnson, October 2012.

   This function combines a few different ideas.

   First, for x > 50, it uses a continued-fraction expansion (same as
   for the Faddeeva function, but with algebraic simplifications for z=i*x).

   Second, for 0 <= x <= 50, it uses Chebyshev polynomial approximations,
   but with two twists:

      a) It maps x to y = 4 / (4+x) in [0,1].  This simple transformation,
         inspired by a similar transformation in the octave-forge/specfun
         erfcx by Soren Hauberg, results in much faster Chebyshev convergence
         than other simple transformations I have examined.

      b) Instead of using a single Chebyshev polynomial for the entire
         [0,1] y interval, we break the interval up into 100 equal
         subintervals, with a switch/lookup table, and use much lower
         degree Chebyshev polynomials in each subinterval. This greatly
         improves performance in my tests.

   For x < 0, we use the relationship erfcx(-x) = 2 exp(x^2) - erfc(x),
   with the usual checks for overflow etcetera.

   Performance-wise, it seems to be substantially faster than either
   the SLATEC DERFC function [or an erfcx function derived therefrom]
   or Cody's CALERF function (from netlib.org/specfun), while
   retaining near machine precision in accuracy.  ','line_number':1701,'multiline':True]['text':' Given y100=100*y, where y = 4/(4+x) for x >= 0, compute erfc(x).

   Uses a look-up table of 100 different Chebyshev polynomials
   for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
   with the help of Maple and a little shell script.   This allows
   the Chebyshev polynomials to be of significantly lower degree (about 1/4)
   compared to fitting the whole [0,1] interval with a single polynomial. ','line_number':1731,'multiline':True]['text':' we only get here if y = 1, i.e. |x| < 4*eps, in which case','line_number':2146,'multiline':False]['text':' erfcx is within 1e-15 of 1..','line_number':2147,'multiline':False]['text':' continued-fraction expansion is faster','line_number':2160,'multiline':False]['text':' 1 / sqrt(pi)','line_number':2161,'multiline':False]['text':' 1-term expansion, important to avoid overflow','line_number':2162,'multiline':False]['text':' 5-term expansion (rely on compiler for CSE), simplified from:
                ispi / (x+0.5/(x+1/(x+1.5/(x+2/x))))  ','line_number':2165,'multiline':True]['text':'
 * Logarithm of Gaussian cumulative distribution function.

 * This implementation of log_ndtr and its helper functions
 * follow SciPy's implementation
 * See NOTICE for the licenses.
 ','line_number':2184,'multiline':True]['text':' T airy_ai(T x)','line_number':2378,'multiline':False]['text':' bessel_j0_forward(T x)','line_number':2490,'multiline':False]['text':' bessel_j1_forward(T x)','line_number':2598,'multiline':False]['text':' bessel_y0_forward(T x)','line_number':2713,'multiline':False]['text':' bessel_y1_forward(T x)','line_number':2827,'multiline':False]['text':' chebyshev_polynomial_t_forward(T x, int64_t n)','line_number':2866,'multiline':False]['text':' chebyshev_polynomial_t_forward(T x, T n)','line_number':2871,'multiline':False]['text':' chebyshev_polynomial_u_forward(T x, int64_t n)','line_number':2914,'multiline':False]['text':' chebyshev_polynomial_u_forward(T x, T n)','line_number':2919,'multiline':False]['text':' chebyshev_polynomial_v_forward(T x, int64_t n)','line_number':2970,'multiline':False]['text':' chebyshev_polynomial_v_forward(T x, T n)','line_number':2975,'multiline':False]['text':' chebyshev_polynomial_w_forward(T x, int64_t n)','line_number':3030,'multiline':False]['text':' chebyshev_polynomial_w_forward(T x, T n)','line_number':3035,'multiline':False]['text':' hermite_polynomial_h_forward(T x, int64_t n)','line_number':3062,'multiline':False]['text':' hermite_polynomial_h_forward(T x, T n)','line_number':3067,'multiline':False]['text':' hermite_polynomial_h_forward(T x, T n)','line_number':3072,'multiline':False]['text':' hermite_polynomial_he_forward(T x, int64_t n)','line_number':3099,'multiline':False]['text':' hermite_polynomial_he_forward(T x, T n)','line_number':3104,'multiline':False]['text':' laguerre_polynomial_l_forward(T x, int64_t n)','line_number':3135,'multiline':False]['text':' laguerre_polynomial_l_forward(T x, T n)','line_number':3140,'multiline':False]['text':' legendre_polynomial_p_forward(T x, int64_t n)','line_number':3175,'multiline':False]['text':' legendre_polynomial_p_forward(T x, T n)','line_number':3180,'multiline':False]['text':' modified_bessel_i0_forward(T x)','line_number':3269,'multiline':False]['text':' modified_bessel_i1_forward(T x)','line_number':3365,'multiline':False]['text':' modified_bessel_k0_forward(T x)','line_number':3442,'multiline':False]['text':' modified_bessel_k1_forward(T x)','line_number':3520,'multiline':False]['text':' T scaled_modified_bessel_k0_forward(T x)','line_number':3597,'multiline':False]['text':' T scaled_modified_bessel_k1_forward(T x)','line_number':3675,'multiline':False]['text':' shifted_chebyshev_polynomial_t_forward(T x, int64_t n)','line_number':3718,'multiline':False]['text':' shifted_chebyshev_polynomial_t_forward(T x, T n)','line_number':3723,'multiline':False]['text':' shifted_chebyshev_polynomial_u_forward(T x, int64_t n)','line_number':3770,'multiline':False]['text':' shifted_chebyshev_polynomial_u_forward(T x, T n)','line_number':3775,'multiline':False]['text':' shifted_chebyshev_polynomial_v_forward(T x, int64_t n)','line_number':3826,'multiline':False]['text':' shifted_chebyshev_polynomial_v_forward(T x, T n)','line_number':3831,'multiline':False]['text':' shifted_chebyshev_polynomial_w_forward(T x, int64_t n)','line_number':3882,'multiline':False]['text':' shifted_chebyshev_polynomial_w_forward(T x, T n)','line_number':3887,'multiline':False]['text':' T spherical_bessel_j0_forward(T x)','line_number':3900,'multiline':False]