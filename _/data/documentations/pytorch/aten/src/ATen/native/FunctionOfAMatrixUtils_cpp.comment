['text':' If `coefficients` is a [m, n] Tensor and','line_number':19,'multiline':False]['text':' `input` is a [n, ...] Tensor, then the output','line_number':20,'multiline':False]['text':' `output` is going to be a [m, ...] Tensor such that','line_number':21,'multiline':False]['text':' for i in range(m):','line_number':22,'multiline':False]['text':'    for j in range(n):','line_number':23,'multiline':False]['text':'        output[i, ...] += coefficients[i, j] * input[j, ...]','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' Note: if input.dtype == scalar_t<T>, then coefficients.dtype == T.','line_number':26,'multiline':False]['text':' This is relevant when scalar_t<T> == complex<T>.','line_number':27,'multiline':False]['text':' Note: the function is implemented using the __restrict__ memory modifier,','line_number':44,'multiline':False]['text':' which means that if `output` actually is aliased by `input`, the result','line_number':45,'multiline':False]['text':' produced is undefined.','line_number':46,'multiline':False]['text':' Recall that `coefficients` is a [m, n] Tensor,','line_number':51,'multiline':False]['text':' `input` is a [n, ...] Tensor, `output` is a [m, ...] Tensor.','line_number':52,'multiline':False]['text':' We restride Tensors to the common dim == input.dim() + 1, so that','line_number':53,'multiline':False]['text':' coefficients.sizes() = [m, 1 (instead of n), 1 repeated (input.dim() - 1) times],','line_number':54,'multiline':False]['text':' input.sizes() = [1, 1 (instead of n), ...],','line_number':55,'multiline':False]['text':' output.sizes() = [m, 1 (instead of n), ...].','line_number':56,'multiline':False]['text':' The second dimension in newly restrided Tensors is traversed inside the kernels.','line_number':57,'multiline':False]['text':' This is done to avoid synchronizations/atomic operations in the kernels','line_number':58,'multiline':False]['text':' and also guarantees determinism, required by the autograd.','line_number':59,'multiline':False]['text':' restride output','line_number':61,'multiline':False]['text':' restride input','line_number':72,'multiline':False]['text':' restride coefficients','line_number':83,'multiline':False]['text':' Output is intentionally 0 strided above','line_number':96,'multiline':False]['text':' The dimension of size n is traversed inside the kernels,','line_number':104,'multiline':False]['text':' it is the first dimension of `input` and the second of `coefficients`','line_number':105,'multiline':False]['text':' namespace at::native','line_number':118,'multiline':False]