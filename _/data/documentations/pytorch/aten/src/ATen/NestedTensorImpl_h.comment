['text':' assume contiguous, `nested_strides` and `offsets`','line_number':32,'multiline':False]['text':' can be infered from `nested_sizes`','line_number':33,'multiline':False]['text':' This constructor is used creating view tensors from nested tensors','line_number':36,'multiline':False]['text':' TODO: don't expose private implementation details like this; in','line_number':44,'multiline':False]['text':' particular, resizing this tensor will mess up our dim() and','line_number':45,'multiline':False]['text':' callers cannot fix it.','line_number':46,'multiline':False]['text':' TODO: don't expose private implementation details like this','line_number':50,'multiline':False]['text':' Returns nullopt if the ith dimension is irregular. The ith dimension','line_number':57,'multiline':False]['text':' of a NestedTensor is regular if the unbound tensors match in','line_number':58,'multiline':False]['text':' size at the (i-1)th dimension.','line_number':59,'multiline':False]['text':'*
   * Return a view of the nested tensor as a 1 dimensional contiguous tensor.
   *
   * The buffer tensor created by this function shares the same storage_impl as
   * the original nested tensor, and therefore can be seen as a view.
   *
   * @return A newly constructed view tensor
   ','line_number':71,'multiline':True]['text':'*
   * If possible use get_buffer() instead. This function returns the storage
   * as a tensor directly, which is not safe to use in general. If using this
   * function, The caller must ensure to account for nested_sizes,
   * nested_strides and storage_offsets.
   *
   * @return A newly constructed view tensor
   ','line_number':85,'multiline':True]['text':' TODO: numel_custom and is_contiguous_custom can be profitably overridden','line_number':110,'multiline':False]['text':' with real implementations','line_number':111,'multiline':False]['text':' this one is real','line_number':126,'multiline':False]['text':'src_impl=','line_number':139,'multiline':True]['text':'dest_impl=','line_number':140,'multiline':True]['text':'version_counter=','line_number':141,'multiline':True]['text':'allow_tensor_metadata_change=','line_number':142,'multiline':True]['text':' Must be called after any changes to our dim() to sync the state','line_number':146,'multiline':False]['text':' to TensorImpl.','line_number':147,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-const-or-ref-data-members)','line_number':150,'multiline':False]['text':' The starting positions of the underlying tensors in contiguous buffer','line_number':152,'multiline':False]['text':' i.e. the buffer memory offsets to get the underlying tensors','line_number':153,'multiline':False]['text':' The reason to keep this metadata is that, without strong enough constraint','line_number':154,'multiline':False]['text':' it cannot be derived from `nested_sizes_`','line_number':155,'multiline':False]['text':' and `nested_strides_`:','line_number':156,'multiline':False]['text':' 1. when buffer has blanks, e.g. [tensor1, blank, tensor2]','line_number':157,'multiline':False]['text':'    this can happen e.g. after slicing a nested tensor','line_number':158,'multiline':False]['text':' 2. when multiple tensors share a same memory','line_number':159,'multiline':False]['text':' 3. when the nesting ordering is changed, e.g. [tensor1, tensor3, tensor2]','line_number':160,'multiline':False]['text':' Some strong enough constraints are:','line_number':161,'multiline':False]['text':' 1. every underlying tensor is contiguous in memory','line_number':162,'multiline':False]['text':'    && nesting in ascending order','line_number':163,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-const-or-ref-data-members)','line_number':164,'multiline':False]['text':' NOTE: -1 here means the size is missing','line_number':166,'multiline':False]['text':' Optional to allow it to be computed lazily from nested.','line_number':167,'multiline':False]['text':' TODO: maybe we can remove this metadata since','line_number':168,'multiline':False]['text':'       we can compute it from `nested_sizes_`','line_number':169,'multiline':False]['text':'*
   * Generates a non-nested key_set from a nested tensor.
   *
   * For many nested tensor kernel implementations a buffer tensor
   * is generated and redispatched to a non-nested kernel this function
   * generates the key set used by that buffer tensor
   *
   * @return Appropriate key set for non-nested tensor
   ','line_number':177,'multiline':True]['text':' Remove nested tensor specific keys','line_number':189,'multiline':False]['text':' Add dense tensor specific keys','line_number':195,'multiline':False]['text':' nesting scalars','line_number':229,'multiline':False]['text':' each scalar must be contiguous','line_number':231,'multiline':False]['text':' if there is blank memory between underlying scalars','line_number':232,'multiline':False]['text':' nesting tensors','line_number':239,'multiline':False]['text':' if any underlying tensor is non-contiguous','line_number':241,'multiline':False]['text':' if there is blank memory between underlying tensors','line_number':258,'multiline':False]['text':' everything is fine','line_number':273,'multiline':False]['text':' namespace at::native','line_number':281,'multiline':False]