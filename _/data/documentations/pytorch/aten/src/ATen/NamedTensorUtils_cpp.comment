['text':' Returns "Tensor['N', 'C', 'H', 'W']" for a tensor with names ('N', 'C', 'H', 'W').','line_number':11,'multiline':False]['text':' TODO(zou3519): Can improve message by checking if names are alignable and suggesting workarounds','line_number':47,'multiline':False]['text':' TODO(zou3519): Can improve message by checking if names are alignable and suggesting workarounds','line_number':63,'multiline':False]['text':' Assumption: A DimnameList can have no duplicate full names with','line_number':70,'multiline':False]['text':' the exception of wildcards','line_number':71,'multiline':False]['text':' Step 1: Check that the names match','line_number':87,'multiline':False]['text':' Step 2: Check that the names are not misaligned','line_number':94,'multiline':False]['text':' Let: N = max(len(names), len(other_names))','line_number':96,'multiline':False]['text':'      K = # of special names among names and other_names.','line_number':97,'multiline':False]['text':' This search (including the outer loop) is O(N*K) but typically # of dims is small.','line_number':98,'multiline':False]['text':' fast path','line_number':185,'multiline':False]['text':' This actually means "full reduction"','line_number':209,'multiline':False]['text':' There are less than 2 feature dims in outnames so there is nothing to check','line_number':282,'multiline':False]['text':' matmul performs a batch matrix multiply between self and other, each of which','line_number':310,'multiline':False]['text':' can either be:','line_number':311,'multiline':False]['text':' - a batches of matrices (if dim > 2)','line_number':312,'multiline':False]['text':' - a matrix (if dim == 2)','line_number':313,'multiline':False]['text':' - a vector (if dim == 1)','line_number':314,'multiline':False]['text':'','line_number':315,'multiline':False]['text':' To compute output names, we unify the batch dimensions because those are','line_number':316,'multiline':False]['text':' broadcastable to get the output batch dimensions.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' After that, we append some names that are equal to the result of the matmul','line_number':319,'multiline':False]['text':' without batch dimensions. Those names are computed by removing the names','line_number':320,'multiline':False]['text':' of the dimensions that were contracted away. We always contract the','line_number':321,'multiline':False]['text':' last dim of the first tensor with the first feature dimension of the second.','line_number':322,'multiline':False]['text':' Get the output's batch dimension names','line_number':324,'multiline':False]['text':' Append the result of each individual (non-batched) matmul.','line_number':329,'multiline':False]['text':' If either of self or other have dim 1, that means they are a vector. Vectors get','line_number':330,'multiline':False]['text':' completely contracted away during matmul so we don't take any names from them.','line_number':331,'multiline':False]['text':' expand adds new None dimensions. This is consistent with name inference','line_number':378,'multiline':False]['text':' rules for binary ops that expect the named dims to line up positionally','line_number':379,'multiline':False]['text':' from the right. i.e.,','line_number':380,'multiline':False]['text':' Tensor[H, W].expand(3, 3, 3, 3) -> Tensor[None, None, H, W]','line_number':381,'multiline':False]['text':' cdist treats self and other like batches of M x D and N X D tensors, respectively.','line_number':465,'multiline':False]['text':' It computes the pairwise distance between each of the M vectors (of size D)','line_number':466,'multiline':False]['text':' in `self` and each of the N vectors in `other`, returning a batch of M x N','line_number':467,'multiline':False]['text':' distance values. We propagate the names of the dimension of size M (in self)','line_number':468,'multiline':False]['text':' and the dimension of size N (in other), both of which are second-from-last.','line_number':469,'multiline':False]['text':' namespace namedinference','line_number':508,'multiline':False]['text':' namespace at','line_number':509,'multiline':False]