['text':' A utility class to implement integer division by multiplication, given a fixed','line_number':10,'multiline':False]['text':' divisor.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' WARNING: The fast divider algorithm is only implemented for unsigned int;','line_number':13,'multiline':False]['text':'          otherwise we default to plain integer division.  For unsigned int,','line_number':14,'multiline':False]['text':'          we further assume that the dividend is at most INT32_MAX.  Thus,','line_number':15,'multiline':False]['text':'          IntDivider must NOT be used for general integer division.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':'          This reduced range is enough for our purpose, and it allows us to','line_number':18,'multiline':False]['text':'          slightly simplify the computation.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' (NOTE: Below, "2^k" denotes exponentiation, i.e., 1<<k.)','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' For any N-bit unsigned integer d (> 0), we can find a "magic number" m (2^N','line_number':23,'multiline':False]['text':' <= m < 2^(N+1)) and shift s such that:','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':'    \floor(n / d) = \floor((m * n) / 2^(N+s)).','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' Given such m and s, the integer division can be then implemented as:','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'    let m' = m - 2^N  // 0 <= m' < 2^N','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':'    fast_integer_division(n):','line_number':32,'multiline':False]['text':'      // Multiply two N-bit unsigned integers: the result is a 2N-bit unsigned','line_number':33,'multiline':False]['text':'      // integer.  Then take the higher N bits.','line_number':34,'multiline':False]['text':'      t = (m' * n) >> N','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':'      // Here we use the fact that n is less than 2^(N-1): otherwise the value','line_number':37,'multiline':False]['text':'      // of (t + n) may not fit in an N-bit integer.','line_number':38,'multiline':False]['text':'      return (t + n) >> s','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' Finding such a magic number is surprisingly easy:','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'    s  = \ceil(\log_2 d)','line_number':43,'multiline':False]['text':'    m' = \floor(2^N * (2^s - d) / d) + 1  // Need 2N-bit integer arithmetic.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' See also:','line_number':46,'multiline':False]['text':'    - Division by Invariant Integers Using Multiplication,','line_number':47,'multiline':False]['text':'      Torbj√∂rn Granlund and Peter L. Montgomery, 1994.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'    - http://www.hackersdelight.org/magic.htm','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':'    - http://ridiculousfish.com/blog/posts/labor-of-division-episode-i.html','line_number':52,'multiline':False]['text':' Result of div/mod operation stored together.','line_number':54,'multiline':False]['text':' Base case: we only have an implementation for uint32_t for now.  For','line_number':62,'multiline':False]['text':' everything else, we use plain division.','line_number':63,'multiline':False]['text':' Implement fast integer division.','line_number':78,'multiline':False]['text':' TODO: gcc/clang has __builtin_clz() but it's not portable.','line_number':88,'multiline':False]['text':' m1 must fit in 32 bits.','line_number':94,'multiline':False]['text':' 't' is the higher 32-bits of unsigned 32-bit multiplication of 'n' and','line_number':99,'multiline':False]['text':' 'm1'.','line_number':100,'multiline':False]['text':' Using uint64_t so that the addition does not overflow.','line_number':104,'multiline':False]['text':' d above.','line_number':119,'multiline':False]['text':' Magic number: m' above.','line_number':120,'multiline':False]['text':' Shift amounts.','line_number':121,'multiline':False]['text':' namespace at::cuda::detail','line_number':124,'multiline':False]