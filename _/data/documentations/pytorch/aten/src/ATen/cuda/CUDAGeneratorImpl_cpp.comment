['text':' Ensures we only call cudaGetDeviceCount only once.','line_number':14,'multiline':False]['text':' Total number of gpus in the system.','line_number':17,'multiline':False]['text':' Ensures default_gens_cuda is initialized once.','line_number':20,'multiline':False]['text':' Default, global CUDA generators, one per GPU.','line_number':23,'multiline':False]['text':'
* Populates the global variables related to CUDA generators
* Warning: this function must only be called once!
','line_number':26,'multiline':True]['text':' anonymous namespace','line_number':36,'multiline':False]['text':'*
 * PyTorch maintains a collection of default generators that get
 * initialized once. The purpose of these default generators is to
 * maintain a global running state of the pseudo random number generation,
 * when a user does not explicitly mention any generator.
 * getDefaultCUDAGenerator gets the default generator for a particular
 * cuda device.
 ','line_number':38,'multiline':True]['text':'*
 * Utility to create a CUDAGeneratorImpl. Returns a shared_ptr
 ','line_number':61,'multiline':True]['text':' namespace cuda::detail','line_number':78,'multiline':False]['text':'*
 * Note [Why enforce RNG offset % 4 == 0?]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Curand philox does allow offsets that aren't a multiple of 4.
 * But jit kernels don't use curand, they use a custom "Philox" class (see
 * torch/csrc/jit/tensorexpr/cuda_random.h or
 * torch/csrc/jit/codegen/cuda/runtime/random_numbers.cu).
 * The "Philox" constructor computes offset/4 (a uint64_t division) to locate its
 * internal start in its virtual bitstream viewed as 128-bit chunks, then, when called
 * in a thread, returns one 32-bit chunk at a time from that start in the bitstream.
 * In other words, if the incoming offset is not a multiple of 4, each thread
 * might repeat some previously-generated 32-bit values in the bitstream. See
 * https://github.com/pytorch/pytorch/pull/50169.
 ','line_number':80,'multiline':True]['text':'*
 * CUDAGeneratorImpl class implementation
 ','line_number':95,'multiline':True]['text':'*
 * Sets the seed to be used by curandStatePhilox4_32_10
 * Resets the philox_offset_per_thread_ to 0
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':105,'multiline':True]['text':'*
 * Sets the offset to be used by curandStatePhilox4_32_10
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':118,'multiline':True]['text':' the set function checks if the offset is a multiple of 4.','line_number':125,'multiline':False]['text':'*
 * Gets the current offset of CUDAGeneratorImpl.
 ','line_number':130,'multiline':True]['text':' Debatable if get_offset() should be allowed in captured regions.','line_number':134,'multiline':False]['text':' Conservatively disallow it for now.','line_number':135,'multiline':False]['text':'*
 * Gets the current seed of CUDAGeneratorImpl.
 ','line_number':146,'multiline':True]['text':' Debatable if current_seed() should be allowed in captured regions.','line_number':150,'multiline':False]['text':' Conservatively disallow it for now.','line_number':151,'multiline':False]['text':'*
 * Gets a nondeterministic random number from /dev/urandom or time,
 * seeds the CPUGeneratorImpl with it and then returns that number.
 *
 * FIXME: You can move this function to Generator.cpp if the algorithm
 * in getNonDeterministicRandom is unified for both CPU and CUDA
 ','line_number':156,'multiline':True]['text':'*
 * Gets the current internal state of CUDAGeneratorImpl. The internal
 * state is returned as a CPU byte tensor.
 ','line_number':170,'multiline':True]['text':' The RNG state comprises the seed, and an offset used for Philox.','line_number':175,'multiline':False]['text':' Note that old THCGeneratorState had offset as std::atomic<int64_t>','line_number':183,'multiline':False]['text':'*
 * Sets the internal state of CUDAGeneratorImpl. The new internal state
 * must be a strided CPU byte tensor and have appropriate size. See
 * comments of CUDAGeneratorImpl::state for information about the layout
 * and size of the internal state.
 ','line_number':190,'multiline':True]['text':'*
 * Sets the philox_offset_per_thread_ to be used by curandStatePhilox4_32_10
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':222,'multiline':True]['text':' see Note [Why enforce RNG offset % 4 == 0?]','line_number':229,'multiline':False]['text':'*
 * Gets the current philox_offset_per_thread_ of CUDAGeneratorImpl.
 ','line_number':234,'multiline':True]['text':'*
 * Called by CUDAGraph to prepare this instance for a graph capture region.
 * offset_extragraph is the initial offset at the start of the graphed region.
 * offset_intragraph tracks the offset in the graphed region.
 ','line_number':242,'multiline':True]['text':'*
 * Called by CUDAGraph to finalize a graph capture region for this instance.
 ','line_number':254,'multiline':True]['text':'*
 * Gets the seed and philox offset value to be used in
 * curandStatePhilox4_32_10, in an opaque PhiloxCudaState that's safe
 * and can be used non-divergently in callers whether CUDA graph
 * capture is underway or not.  See
 * Note [CUDA Graph-safe RNG states]
 *
 * Each kernel using philox has to sensibly increment offset
 * for future users of philox. So it gets the "old" value for
 * itself (before add), and tells subsequent users which offset
 * they should use, since only the kernel knows how many randoms
 * it intends to generate.
 *
 * Increment should be at least the number of curand() random numbers used in
 * each thread. It is the user's responsibility to make sure the increment
 * for philox is never smaller than the number of curand() calls. Increment
 * value > the number of curand() calls won't harm but anything less would mean
 * that you would be reusing random values from previous calls.
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':262,'multiline':True]['text':' rounds increment up to the nearest multiple of 4','line_number':284,'multiline':False]['text':' see Note [Why enforce RNG offset % 4 == 0?]','line_number':290,'multiline':False]['text':' see Note [Why enforce RNG offset % 4 == 0?]','line_number':303,'multiline':False]['text':'*
 * Temporarily accommodates call sites that use philox_engine_inputs.
 * Allows incremental refactor of call sites to use philox_cuda_state.
 ','line_number':311,'multiline':True]['text':' rounds increment up to the nearest multiple of 4','line_number':318,'multiline':False]['text':' see Note [Why enforce RNG offset % 4 == 0?]','line_number':320,'multiline':False]['text':'
 * Gets the DeviceType of CUDAGeneratorImpl.
 * Used for type checking during run time.
 ','line_number':327,'multiline':True]['text':'*
 * Public clone method implementation
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':335,'multiline':True]['text':'*
 * Private clone method implementation
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':344,'multiline':True]['text':' namespace at','line_number':357,'multiline':False]