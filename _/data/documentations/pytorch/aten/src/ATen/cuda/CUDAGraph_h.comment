['text':' Standalone way to get a unique mempool id usable as a pool=... argument','line_number':16,'multiline':False]['text':' to CUDAGraph::capture_begin','line_number':17,'multiline':False]['text':' internal states so reset() can do its best cleaning up','line_number':43,'multiline':False]['text':' Set to true in capture_end if cudaStreamEndCapture succeeded','line_number':44,'multiline':False]['text':' Set back to false soon after, when graph_ is consumed by cudaGraphInstantiate','line_number':45,'multiline':False]['text':' to create graph_exec_, then graph_ is deleted','line_number':46,'multiline':False]['text':' Set to true in capture_end if cudaGraphInstantiate succeeded','line_number':48,'multiline':False]['text':' uuid of this instance's current capture, retrieved from Cuda','line_number':51,'multiline':False]['text':' uuid used to request a particular private mempool from CUDACachingAllocator.','line_number':54,'multiline':False]['text':' By default, this will be set to {id_, 0}.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' If capture_begin is called with "pool=other_graph.pool()", this graph's mempool_id_','line_number':57,'multiline':False]['text':' will be set to the other graph's mempool_id_, and therefore share a mempool with the','line_number':58,'multiline':False]['text':' other graph.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' If capture_begin is called with "pool=handle" where "handle" came from graph_pool_handle(),','line_number':61,'multiline':False]['text':' it will share a mempool with any other captures that used "pool=handle".','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' Sharing a mempool across graphs saves memory, and it's safe if you','line_number':64,'multiline':False]['text':' know you'll replay those graphs in the same order you captured them.','line_number':65,'multiline':False]['text':' Stream on which capture began','line_number':68,'multiline':False]['text':' Default generator on device where capture began','line_number':71,'multiline':False]['text':' Device where capture occurred. Right now, for simplicity, we require all ops','line_number':74,'multiline':False]['text':' in a capture to run on the same device, but this is a limitation of CUDAGraph,','line_number':75,'multiline':False]['text':' not CUDA itself.  We can straightforwardly modify CUDAGraph to support multi-device','line_number':76,'multiline':False]['text':' captures if needed.','line_number':77,'multiline':False]['text':' RNG state trackers','line_number':80,'multiline':False]['text':' namespace cuda','line_number':86,'multiline':False]['text':' namespace at','line_number':87,'multiline':False]