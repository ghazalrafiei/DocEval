['text':' Note: uses integer comparison to avoid hang in case of NaN (since NaN != NaN)','line_number':71,'multiline':False]['text':' Don't instantiate gpuAtomicAdd with the macro as it seems non-standard (see int32, int64)','line_number':173,'multiline':False]['text':' from CUDA C Programmic Guide','line_number':235,'multiline':False]['text':' Note [hip-clang differences to hcc]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * The upcoming hip-clang compiler for ROCm differs from hcc in a few details.
 * It exports the __HIP__ macro, we can hence differentiate between hcc and
 * hip-clang. In the below, hcc only received support for atomicAdd with double
 * typing after work week 18312. hip-clang had support from the first version.
 * In general, the code-visible differences between hip-clang and hcc will be
 * minimal.
 ','line_number':252,'multiline':True]['text':' This needs to be defined for the host side pass','line_number':263,'multiline':False]['text':' Note [gpuAtomicAdd vs atomicAdd]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Some extensions such as torchvision call atomicAdd()
 * directly and require non-library provided data type support. Only for these, we
 * continue to provide atomicAdd overloads.
 ','line_number':282,'multiline':True]['text':' Note [explicitly non-returning atomics]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * AMD's MI100 (gfx908) provides an optimized fp32 atomicAdd, exposed via atomicAddNoRet().
 * Due to compiler limitations, callers must opt-in to guarantee the optimized instruction.
 * This non-returning atomicAddNoRet cannot be used to implement the returning atomicAdd,
 * therefore we need a new API 'gpuAtomicAddNoReturn'.
 ','line_number':316,'multiline':True]['text':' Special case fp32 atomic. ','line_number':335,'multiline':True]['text':' Atomic multiplication implementation.','line_number':342,'multiline':False]['text':' Dont use a templated function for this since the addition function defaults to the CUDA built-in.','line_number':372,'multiline':False]['text':' Note: uses integer comparison to avoid hang in case of NaN (since NaN != NaN)','line_number':384,'multiline':False]['text':' Atomic maximum implementation.','line_number':390,'multiline':False]['text':' TODO: remove this special case for HIP when issue is fixed:','line_number':395,'multiline':False]['text':'       https://github.com/ROCm-Developer-Tools/HIP/issues/2209','line_number':396,'multiline':False]['text':' Dont use a templated function for this since the addition function defaults to the CUDA built-in.','line_number':433,'multiline':False]['text':' Note: uses integer comparison to avoid hang in case of NaN (since NaN != NaN)','line_number':444,'multiline':False]['text':' Atomic minimum implementation.','line_number':450,'multiline':False]['text':' TODO: remove this special case for HIP when issue is fixed:','line_number':455,'multiline':False]['text':'       https://github.com/ROCm-Developer-Tools/HIP/issues/2209','line_number':456,'multiline':False]['text':' Dont use a templated function for this since the addition function defaults to the CUDA built-in.','line_number':493,'multiline':False]['text':' Note: uses integer comparison to avoid hang in case of NaN (since NaN != NaN)','line_number':504,'multiline':False]