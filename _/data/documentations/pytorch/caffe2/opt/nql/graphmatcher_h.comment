['text':' Each match is a struct of','line_number':13,'multiline':False]['text':' subgraph and map from the string used in the query to a NodeRef in the','line_number':14,'multiline':False]['text':' subgraph note: the maps are injective but not necessarily bijective -- if','line_number':15,'multiline':False]['text':' you use the same name in the query twice only one will be mapped.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' See `getMatches` to generate these structs.','line_number':18,'multiline':False]['text':' A subgraph that contains at least all the nodes in matchMap','line_number':20,'multiline':False]['text':' This is the canonical match -- the matchMap is only a useful utility','line_number':21,'multiline':False]['text':' Provides safer access to matchMap with nicer semantics','line_number':24,'multiline':False]['text':' Maps a variable name to a Node in a dataflow graph','line_number':27,'multiline':False]['text':'/ \brief Main graph matcher interface.','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ This class solves a problem of finding a matching subgraph, which is','line_number':33,'multiline':False]['text':'/ specified in a text form.','line_number':34,'multiline':False]['text':'/ \brief Initialize subgraph pattern from \p STR.','line_number':37,'multiline':False]['text':'/ \brief Initialize subgraph patter from IR stored in file \p fname.','line_number':41,'multiline':False]['text':'/ \brief Try to find the pattern in the given graph \p DF and return true','line_number':45,'multiline':False]['text':'/ if it was found.','line_number':46,'multiline':False]['text':'/ \brief Replace the found subgraph with another one.','line_number':50,'multiline':False]['text':'/ \brief Return the matcher graph.','line_number':54,'multiline':False]['text':' TODO: Do we need this, or can we get it from getMatcherGraph?','line_number':58,'multiline':False]['text':' \brief Return a mapping from IR variable name (std::string) to Node in the','line_number':62,'multiline':False]['text':' matched graph.','line_number':63,'multiline':False]['text':' \brief Returns a vector of matches.','line_number':69,'multiline':False]['text':' Fill the match map','line_number':90,'multiline':False]['text':' Node matches a criteria (string) if the data string is the same as the','line_number':117,'multiline':False]['text':' criteria. Special case: "*" will match any thing.','line_number':118,'multiline':False]['text':' \brief Return a short string name for the given \param node.','line_number':121,'multiline':False]['text':' The function works with both tensors and operators.','line_number':122,'multiline':False]['text':' \brief Return a string representing the given graph \param g.','line_number':125,'multiline':False]['text':' The returned string is a valid NQL query.','line_number':126,'multiline':False]['text':' namespace nql','line_number':131,'multiline':False]['text':' namespace nom','line_number':132,'multiline':False]