['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':71,'multiline':False]['text':' We only want to fuse for IDEEP operators','line_number':77,'multiline':False]['text':' Here we only check the type of ConvFusion op (for FP32 only)','line_number':83,'multiline':False]['text':' Only from FUSION_CONV_SUM to FUSION_CONV_SUM_RELU','line_number':118,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert,clang-diagnostic-sign-compare)','line_number':176,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':199,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':201,'multiline':False]['text':' convOutput is NOT referenced by sequential ops after BN.','line_number':217,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':222,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':246,'multiline':False]['text':' When no bias, borrow BN bias','line_number':253,'multiline':False]['text':' Assume M{CHW,HWC}','line_number':287,'multiline':False]['text':' Assume the order of nodes from getMutableNodes conforms to','line_number':324,'multiline':False]['text':' the original topo order of operators','line_number':325,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':327,'multiline':False]['text':' [Caution] on IDEEP device, only element-wise Add operator is','line_number':334,'multiline':False]['text':' supported yet. It totally works as element-wise sum without scalar','line_number':335,'multiline':False]['text':' broadcast.','line_number':336,'multiline':False]['text':' Find the nearest conv Op before Sum','line_number':360,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':418,'multiline':False]['text':' Conv output should not be used by other ops after Conv node (except the','line_number':427,'multiline':False]['text':' fused Sum) The other Sum input (sumInputX) should not be used by the','line_number':428,'multiline':False]['text':' other ops after Sum node due to the Sum output is inplace with','line_number':429,'multiline':False]['text':' sumInputX','line_number':430,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':431,'multiline':False]['text':' If fuse Conv with Sum, the Conv op will be pulled down between preNode','line_number':443,'multiline':False]['text':' and Sum Check Conv input tensor buffer has been re-written by other ops','line_number':444,'multiline':False]['text':' between Conv and preNode','line_number':445,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':448,'multiline':False]['text':' Conv+Relu fusion','line_number':513,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':515,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':517,'multiline':False]['text':' Check topological feasibility','line_number':521,'multiline':False]['text':' Check feasibility with application specific logic','line_number':542,'multiline':False]['text':' Ready to fuse','line_number':547,'multiline':False]['text':' Conv cannot be in-place','line_number':559,'multiline':False]['text':' We may have accidentally made the next op in-place','line_number':572,'multiline':False]['text':' In future iterations of transformations this won't be an issue,','line_number':573,'multiline':False]['text':' but current caffe2 predictor usage requires things like','line_number':574,'multiline':False]['text':' external_input and output to be unchanged.','line_number':575,'multiline':False]['text':' For fusions of Conv+Sum or Conv+Sum+ReLU, the last input and output must','line_number':600,'multiline':False]['text':' be inplaced. To enforce inplace, here to re-check whole graph and correct','line_number':601,'multiline':False]['text':' the ConvFusion Ops.','line_number':602,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':604,'multiline':False]['text':' In INT8 module, the quantize/dequantize op always appears','line_number':654,'multiline':False]['text':' along with corresponding order switch op, which aims to switch','line_number':655,'multiline':False]['text':' between INT8 computation domain and others.','line_number':656,'multiline':False]['text':' Here we assume they always obey below combination and order:','line_number':657,'multiline':False]['text':' NCHW2NHWC followed by Int8Quantize, or Int8Dequantize followed by NHWC2NCHW','line_number':658,'multiline':False]['text':' On iDEEP, there is chance to fuse the order switch op into the','line_number':659,'multiline':False]['text':' quantize/dequantize op, in order to improve the module performance.','line_number':660,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert,clang-diagnostic-sign-compare)','line_number':662,'multiline':False]['text':' 1. Int8Sum has been fallbacked to FP32 in current impl','line_number':726,'multiline':False]['text':'    It can handle inputs with diff format and data type','line_number':727,'multiline':False]['text':' 2. FC is able to convert input format and data type by itself','line_number':728,'multiline':False]['text':' 3. The fallback wrapper can handle the conversion of format and data type','line_number':729,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert,clang-diagnostic-sign-compare)','line_number':743,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert,clang-diagnostic-sign-compare)','line_number':770,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert,clang-diagnostic-sign-compare)','line_number':832,'multiline':False]['text':' Pre-convert filters format to expected one here','line_number':854,'multiline':False]['text':' in order to avoid boring conversions during computations','line_number':855,'multiline':False]['text':' convert weights for FC','line_number':951,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':961,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':967,'multiline':False]['text':' Fusers for ideep to parse the graph and apply operator fusion','line_number':985,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables,cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':987,'multiline':False]['text':' USE_MKLDNN','line_number':1015,'multiline':False]['text':' namespace opt','line_number':1017,'multiline':False]['text':' namespace caffe2','line_number':1018,'multiline':False]