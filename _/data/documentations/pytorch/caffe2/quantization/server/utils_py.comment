['text':' type: ignore[import]','line_number':9,'multiline':False]['text':' Can't fuse if more than one user unless SpatialBN is inplace','line_number':50,'multiline':False]['text':' An example of inplace SpatialBN where we want to allow multiple uses:','line_number':51,'multiline':False]['text':' x = Conv(...)','line_number':52,'multiline':False]['text':' ... // no interferring use or def of x (will be checked below)','line_number':53,'multiline':False]['text':' x = SpatialBN(x, ...)','line_number':54,'multiline':False]['text':' ...','line_number':55,'multiline':False]['text':' z = Foo(..., x, ...)','line_number':56,'multiline':False]['text':' ...','line_number':57,'multiline':False]['text':' w = Boo(..., x, ...)','line_number':58,'multiline':False]['text':' Here, we still want to fuse Conv and SpatialBN','line_number':59,'multiline':False]['text':' There shouldn't be any def of conv.output[0] and any use or def of bn.output[0] between conv and bn','line_number':62,'multiline':False]['text':' else, can fuse','line_number':75,'multiline':False]['text':' First, BN computation can be phrased as follows:','line_number':89,'multiline':False]['text':' (X - running_mean) * (1.0 / sqrt(running_var + eps)) *','line_number':90,'multiline':False]['text':' bn_scale + bias','line_number':91,'multiline':False]['text':' Thus, we can rewrite bn_scale as:','line_number':92,'multiline':False]['text':' X * bn_scale * 1.0 / (sqrt(running_var + eps)) + (bias -','line_number':93,'multiline':False]['text':' running_mean * (1.0 / sqrt(running_var + eps)) * bn_scale)','line_number':94,'multiline':False]['text':' Thus, can just have the affine transform','line_number':95,'multiline':False]['text':' X * A + B','line_number':96,'multiline':False]['text':' where','line_number':97,'multiline':False]['text':' A = bn_scale * 1.0 / (sqrt(running_var + eps))','line_number':98,'multiline':False]['text':' B =  (bias - running_mean * (1.0 / sqrt(running_var + eps))','line_number':99,'multiline':False]['text':' * bn_scale)','line_number':100,'multiline':False]['text':' This identity should hold if we have correctly fused','line_number':108,'multiline':False]['text':' np.testing.assert_array_equal(','line_number':109,'multiline':False]['text':'     params[conv.output[0]] * A + B,','line_number':110,'multiline':False]['text':'     params[bn.output[0]])','line_number':111,'multiline':False]['text':' Now, we have that the computation made is the following:','line_number':113,'multiline':False]['text':' ((X `conv` W) + b) * A + B','line_number':114,'multiline':False]['text':' Then, we can simply fuse this as follows:','line_number':115,'multiline':False]['text':' (X `conv` (W * A)) + b * A + B','line_number':116,'multiline':False]['text':' which is simply','line_number':117,'multiline':False]['text':' (X `conv` Q) + C','line_number':118,'multiline':False]['text':' where','line_number':119,'multiline':False]['text':' Q = W * A','line_number':121,'multiline':False]['text':' C = b * A + B','line_number':122,'multiline':False]['text':' For ConvTranspose, from the view of convolutions as a','line_number':124,'multiline':False]['text':' Toepeliz multiplication, we have W_ = W^T, so the weights','line_number':125,'multiline':False]['text':' are laid out as (R, S, K, K) (vs (S, R, K, K) for a Conv),','line_number':126,'multiline':False]['text':' so the weights broadcast slightly differently. Remember, our','line_number':127,'multiline':False]['text':' BN scale 'B' is of size (S,)','line_number':128,'multiline':False]['text':' Run until we hit a fixed point','line_number':171,'multiline':False]['text':' else, can fuse','line_number':203,'multiline':False]['text':' Run until we hit a fixed point','line_number':230,'multiline':False]['text':' Can't fuse if more than one user unless Relu is inplace','line_number':259,'multiline':False]['text':' There shouldn't be any def of conv.output[0] and any use or def of relu.output[0] between conv and relu','line_number':264,'multiline':False]['text':' else, can fuse','line_number':277,'multiline':False]['text':' Run until we hit a fixed point','line_number':290,'multiline':False]['text':' else, can swap','line_number':323,'multiline':False]['text':' Delete the Relu after Concat','line_number':329,'multiline':False]['text':' Insert Relu after each op that produces inputs to Concat','line_number':332,'multiline':False]['text':' Run until we hit a fixed point','line_number':353,'multiline':False]