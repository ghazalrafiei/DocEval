['text':' SINGLE_LABEL: single integer label for multi-class classification','line_number':26,'multiline':False]['text':' MULTI_LABEL_SPARSE: sparse active label indices for multi-label','line_number':27,'multiline':False]['text':' classification MULTI_LABEL_DENSE: dense label embedding vector for label','line_number':28,'multiline':False]['text':' embedding regression MULTI_LABEL_WEIGHTED_SPARSE: sparse active label','line_number':29,'multiline':False]['text':' indices with per-label weights for multi-label classification','line_number':30,'multiline':False]['text':' SINGLE_LABEL_WEIGHTED: single integer label for multi-class classification','line_number':31,'multiline':False]['text':' with weighted sampling EMBEDDING_LABEL: an array of floating numbers','line_number':32,'multiline':False]['text':' representing dense embedding.','line_number':33,'multiline':False]['text':'   It is useful for model distillation','line_number':34,'multiline':False]['text':' INCEPTION_STYLE: Random crop with size 8% - 100% image area and aspect','line_number':44,'multiline':False]['text':' ratio in [3/4, 4/3]. Reference: GoogleNet paper','line_number':45,'multiline':False]['text':' TODO(zyan3): ResNet-style random scale jitter','line_number':49,'multiline':False]['text':' Structure to store per-image information','line_number':73,'multiline':False]['text':' This can be modified by the DecodeAnd* so needs','line_number':74,'multiline':False]['text':' to be privatized per launch.','line_number':75,'multiline':False]['text':' Default parameters for images','line_number':108,'multiline':False]['text':' Minsize is similar to scale except that it will only','line_number':125,'multiline':False]['text':' force the image to scale up if it is too small. In other words,','line_number':126,'multiline':False]['text':' it ensures that both dimensions of the image are at least minsize_','line_number':127,'multiline':False]['text':' thread pool for parse + decode','line_number':141,'multiline':False]['text':' Output type for GPU transform path','line_number':148,'multiline':False]['text':' random minsize','line_number':151,'multiline':False]['text':' Working variables','line_number':155,'multiline':False]['text':' number of exceptions produced by opencv while reading image data','line_number':158,'multiline':False]['text':' opencv exceptions tolerance','line_number':160,'multiline':False]['text':' output type only supported with CUDA and use_gpu_transform for now','line_number':214,'multiline':False]['text':' hard-coded PCA eigenvectors and eigenvalues, based on RBG channel order','line_number':268,'multiline':False]['text':' We are going to extend to 3 using the first value','line_number':333,'multiline':False]['text':' randomly set min_size_ for each image','line_number':361,'multiline':False]['text':' Here, minsize_ > 0','line_number':365,'multiline':False]['text':' We actually will use the inverse of std, so inverse it here','line_number':382,'multiline':False]['text':' data type for prefetched_label_ is actually not known here..','line_number':407,'multiline':False]['text':' Inception-stype scale jittering','line_number':416,'multiline':False]['text':'','line_number':456,'multiline':False]['text':' recommend using --caffe2_use_fatal_for_enforce=1 when using ImageInputOp','line_number':457,'multiline':False]['text':' as this function runs on a worker thread and the exceptions from','line_number':458,'multiline':False]['text':' CAFFE_ENFORCE are silently dropped by the thread worker functions','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':' Use the default information for images','line_number':463,'multiline':False]['text':' The input is a caffe datum format.','line_number':466,'multiline':False]['text':' encoded image in datum.','line_number':472,'multiline':False]['text':' count the number of exceptions from opencv imdecode','line_number':473,'multiline':False]['text':' Raw image in datum.','line_number':491,'multiline':False]['text':' Datum stores things in CHW order, let's do HWC for images to make','line_number':501,'multiline':False]['text':' things more consistent with conventional image storage.','line_number':502,'multiline':False]['text':' The input is a caffe2 format.','line_number':517,'multiline':False]['text':' add handle protos','line_number':522,'multiline':False]['text':' We have bounding box information','line_number':531,'multiline':False]['text':' encoded image string.','line_number':543,'multiline':False]['text':' We use a cv::Mat to wrap the encoded str so we do not need a copy.','line_number':547,'multiline':False]['text':' count the number of exceptions from opencv imdecode','line_number':548,'multiline':False]['text':' raw image content.','line_number':566,'multiline':False]['text':' TODO: if image decoding was unsuccessful, set label to 0','line_number':582,'multiline':False]['text':'','line_number':691,'multiline':False]['text':' convert source to the color format requested from Op','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' Note(Yangqing): I believe that the mat should be created continuous.','line_number':702,'multiline':False]['text':' Sanity check now that we decoded everything','line_number':705,'multiline':False]['text':' Ensure that the bounding box is legit','line_number':707,'multiline':False]['text':' Apply the bounding box if requested','line_number':714,'multiline':False]['text':' If we reach here, we know the parameters are sane','line_number':716,'multiline':False]['text':'
    LOG(INFO) << "Did bounding with ymin:"
              << info.bounding_params.ymin << " xmin:" <<
    info.bounding_params.xmin
              << " height:" << info.bounding_params.height
              << " width:" << info.bounding_params.width << "\n";
    LOG(INFO) << "Bounded matrix: " << img;
    ','line_number':724,'multiline':True]['text':' LOG(INFO) << "No bounding\n";','line_number':733,'multiline':False]['text':' Inception-stype scale jittering is only used for training','line_number':740,'multiline':False]['text':' if a random crop is still not found, do simple random cropping later','line_number':743,'multiline':False]['text':' set the random minsize','line_number':752,'multiline':False]['text':' We rescale in all cases if we are using scale_','line_number':771,'multiline':False]['text':' but only to make the image bigger if using minsize_','line_number':772,'multiline':False]['text':'
      LOG(INFO) << "Scaling to " << scaled_width << " x " << scaled_height
                << " From " << img->cols << " x " << img->rows;
      ','line_number':773,'multiline':True]['text':' TODO(Yangqing): return false if any error happens.','line_number':788,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':792,'multiline':False]['text':' BGR to Gray scale image: R -> 0.299, G -> 0.587, B -> 0.114','line_number':801,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':815,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':834,'multiline':False]['text':' BGR to Gray scale image: R -> 0.299, G -> 0.587, B -> 0.114','line_number':845,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':866,'multiline':False]['text':' obtain a time-based seed:','line_number':877,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':895,'multiline':False]['text':' assume HWC order and color channels BGR','line_number':927,'multiline':False]['text':' mean subtraction and scaling.','line_number':928,'multiline':False]['text':' Factored out image transformation','line_number':947,'multiline':False]['text':' find the cropped region, and copy it to the destination matrix','line_number':973,'multiline':False]['text':' Copy mirrored image.','line_number':987,'multiline':False]['text':' Copy normally.','line_number':997,'multiline':False]['text':' Color normalization','line_number':1022,'multiline':False]['text':' Mean subtraction and scaling.','line_number':1023,'multiline':False]['text':' Only crop / transpose the image','line_number':1027,'multiline':False]['text':' leave in uint8_t dataType','line_number':1028,'multiline':False]['text':' find the cropped region, and copy it to the destination matrix','line_number':1044,'multiline':False]['text':' Copy mirrored image.','line_number':1057,'multiline':False]['text':' Copy normally.','line_number':1067,'multiline':False]['text':' Parse datum, decode image, perform transform','line_number':1079,'multiline':False]['text':' Intended as entry point for binding to thread pool','line_number':1080,'multiline':False]['text':' Decode the image','line_number':1094,'multiline':False]['text':' Factor out the image transformation','line_number':1098,'multiline':False]['text':' Decode the image','line_number':1133,'multiline':False]['text':' Factor out the image transformation','line_number':1138,'multiline':False]['text':' if we are not owning the reader, we will get the reader pointer from','line_number':1153,'multiline':False]['text':' input. Otherwise the constructor should have already set the reader','line_number':1154,'multiline':False]['text':' pointer.','line_number':1155,'multiline':False]['text':' Call mutable_data() once to allocate the underlying memory.','line_number':1159,'multiline':False]['text':' we'll transfer up in int8, then convert later','line_number':1161,'multiline':False]['text':' Prefetching handled with a thread pool of "decode_threads" threads.','line_number':1168,'multiline':False]['text':' read data','line_number':1174,'multiline':False]['text':' determine label type based on first item','line_number':1177,'multiline':False]['text':' launch into thread pool for processing','line_number':1220,'multiline':False]['text':' TODO: support color jitter and color lighting in gpu_transform','line_number':1221,'multiline':False]['text':' output of decode will still be int8','line_number':1223,'multiline':False]['text':' we allow to get at most max_decode_error_ratio from','line_number':1249,'multiline':False]['text':' opencv imdecode until raising a runtime exception','line_number':1250,'multiline':False]['text':' If the context is not CPUContext, we will need to do a copy in the','line_number':1258,'multiline':False]['text':' prefetch function as well.','line_number':1259,'multiline':False]['text':' do sync copies','line_number':1262,'multiline':False]['text':' Note(jiayq): The if statement below should be optimized away by the','line_number':1286,'multiline':False]['text':' compiler since std::is_same is a constexpr.','line_number':1287,'multiline':False]['text':' async ','line_number':1290,'multiline':True]['text':' async ','line_number':1292,'multiline':True]['text':' async ','line_number':1296,'multiline':True]['text':' TODO: support color jitter and color lighting in gpu_transform','line_number':1299,'multiline':False]['text':' data comes in as NHWC','line_number':1320,'multiline':False]['text':' data goes out as NCHW','line_number':1322,'multiline':False]['text':' async ','line_number':1330,'multiline':True]['text':' async ','line_number':1333,'multiline':True]['text':' async ','line_number':1340,'multiline':True]['text':' namespace caffe2','line_number':1345,'multiline':False]['text':' CAFFE2_IMAGE_IMAGE_INPUT_OP_H_','line_number':1347,'multiline':False]