['text':' See Note [hip-clang differences to hcc]','line_number':8,'multiline':False]['text':' Utility class for quickly calculating quotients and remainders for','line_number':19,'multiline':False]['text':' a known integer divisor','line_number':20,'multiline':False]['text':' Works for any positive divisor, 1 to INT_MAX. One 64-bit','line_number':24,'multiline':False]['text':' multiplication and one 64-bit shift is used to calculate the','line_number':25,'multiline':False]['text':' result.','line_number':26,'multiline':False]['text':' USE_ROCM','line_number':35,'multiline':False]['text':' USE_ROCM','line_number':50,'multiline':False]['text':'/ Calculates `q = n / d`.','line_number':52,'multiline':False]['text':' USE_ROCM','line_number':56,'multiline':False]['text':' In lieu of a mulhi instruction being available, perform the','line_number':57,'multiline':False]['text':' work in uint64','line_number':58,'multiline':False]['text':' USE_ROCM','line_number':60,'multiline':False]['text':'/ Calculates `r = n % d`.','line_number':63,'multiline':False]['text':'/ Calculates `q = n / d` and `r = n % d` together.','line_number':68,'multiline':False]['text':' Calculates magic multiplicative value and shift amount for calculating `q =','line_number':77,'multiline':False]['text':' n / d` for signed 32-bit integers.','line_number':78,'multiline':False]['text':' Implementation taken from Hacker's Delight section 10.','line_number':79,'multiline':False]['text':' Absolute value of nc.','line_number':90,'multiline':False]['text':' Init. p.','line_number':91,'multiline':False]['text':' Init. q1 = 2**p/|nc|.','line_number':92,'multiline':False]['text':' Init. r1 = rem(2**p, |nc|).','line_number':93,'multiline':False]['text':' Init. q2 = 2**p/|d|.','line_number':94,'multiline':False]['text':' Init. r2 = rem(2**p, |d|).','line_number':95,'multiline':False]['text':' Update q1 = 2**p/|nc|.','line_number':99,'multiline':False]['text':' Update r1 = rem(2**p, |nc|).','line_number':100,'multiline':False]['text':' (Must be an unsigned','line_number':101,'multiline':False]['text':' comparison here).','line_number':102,'multiline':False]['text':' Update q2 = 2**p/|d|.','line_number':105,'multiline':False]['text':' Update r2 = rem(2**p, |d|).','line_number':106,'multiline':False]['text':' (Must be an unsigned','line_number':107,'multiline':False]['text':' comparison here).','line_number':108,'multiline':False]['text':' USE_ROCM','line_number':120,'multiline':False]['text':' USE_ROCM','line_number':127,'multiline':False]['text':' namespace caffe2','line_number':130,'multiline':False]['text':' CAFFE2_UTILS_FIXED_DIVISOR_H_','line_number':132,'multiline':False]