['text':' discrete types','line_number':23,'multiline':False]['text':' UnaryFunctorWithDefaultCtor is a functor that can be used as the functor of','line_number':70,'multiline':False]['text':' an UnaryElementwiseWithArgsOp. It simply forwards the operator() call into','line_number':71,'multiline':False]['text':' another functor that doesn't accept arguments in its constructor.','line_number':72,'multiline':False]['text':' op ','line_number':75,'multiline':True]['text':' UnaryElementwiseOp is a wrapper around UnaryElementwiseWithArgsOp, with the','line_number':86,'multiline':False]['text':' difference that it takes a functor with default constructor, e.g. that does','line_number':87,'multiline':False]['text':' not need to take into consideration any arguments during operator creation.','line_number':88,'multiline':False]['text':' Get axis from an explicit axis argument.','line_number':119,'multiline':False]['text':' Get the axis index semantically.','line_number':125,'multiline':False]['text':' TODO: change the types to vector<int64_t>','line_number':185,'multiline':False]['text':' Get axis from an explicit axis argument.','line_number':235,'multiline':False]['text':' Get the axis index semantically.','line_number':241,'multiline':False]['text':' op ','line_number':331,'multiline':True]['text':' BinaryElementwiseOp is a wrapper around BinaryElementwiseWithArgsOp, with the','line_number':412,'multiline':False]['text':' difference that it takes a functor with default constructor, e.g. that does','line_number':413,'multiline':False]['text':' not need to take into consideration any arguments during operator creation.','line_number':414,'multiline':False]['text':' BinaryElementwiseGradientOp is a wrapper around','line_number':426,'multiline':False]['text':' BinaryElementwiseGradientWithArgsOp, with the difference that it takes a','line_number':427,'multiline':False]['text':' functor with default constructor, e.g. that does not need to take into','line_number':428,'multiline':False]['text':' consideration any arguments during operator creation.','line_number':429,'multiline':False]['text':' BinaryElementwiseBroadcastOp is a wrapper around BinaryElementwiseWithArgsOp,','line_number':443,'multiline':False]['text':' with the difference that it takes a functor with a constructor that accepts','line_number':444,'multiline':False]['text':' broadcast-related arguments (just a single boolean for whether broadcast','line_number':445,'multiline':False]['text':' fastpaths are allowed at the time this comment was written).','line_number':446,'multiline':False]['text':' BinaryElementwiseGradientBroadcastOp is a wrapper around','line_number':458,'multiline':False]['text':' BinaryElementwiseWithArgsGradientOp, with the difference that it takes a','line_number':459,'multiline':False]['text':' functor with a constructor that accepts broadcast-related arguments (just a','line_number':460,'multiline':False]['text':' single boolean for whether broadcast fastpaths are allowed at the time this','line_number':461,'multiline':False]['text':' comment was written).','line_number':462,'multiline':False]['text':' Forward-only Unary Functors.','line_number':476,'multiline':False]['text':' Forward-only Binary Functors.','line_number':494,'multiline':False]['text':' Compare functors.','line_number':519,'multiline':False]['text':' Logical functors.','line_number':527,'multiline':False]['text':' Bitwise functors.','line_number':532,'multiline':False]['text':' namespace SRLHelper','line_number':559,'multiline':False]['text':' Sum reduction operator that is used for computing the gradient in cases','line_number':561,'multiline':False]['text':' where the forward op is in broadcast mode.','line_number':562,'multiline':False]['text':' Get axis from an explicit axis argument.','line_number':574,'multiline':False]['text':' Get the axis index semantically.','line_number':580,'multiline':False]['text':' namespace caffe2','line_number':610,'multiline':False]['text':' CAFFE2_OPERATORS_ELEMENTWISE_OPS_H_','line_number':612,'multiline':False]