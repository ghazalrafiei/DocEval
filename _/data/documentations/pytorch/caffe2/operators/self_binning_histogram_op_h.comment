['text':' Scale the range so that the last count is always 0.','line_number':46,'multiline':False]['text':' Calculate the max and min.','line_number':57,'multiline':False]['text':' 0 initialization is arbitrary here to suppress linter warnings.','line_number':59,'multiline':False]['text':' The actual initialization check happens through the first_seen variable.','line_number':60,'multiline':False]['text':' this is set in both branches','line_number':90,'multiline':False]['text':' Let's scale the range so that the last count is 0.','line_number':92,'multiline':False]['text':' Avoid underflow by calculating advancement through multiplication.','line_number':95,'multiline':False]['text':' First, we need to sanitize the range.','line_number':101,'multiline':False]['text':' Calculate base interval using geometric sum.','line_number':111,'multiline':False]['text':' Simply: multiplier = exp((log(max) - log(min))/N)','line_number':112,'multiline':False]['text':' Avoid underflow by delaying division and exp.','line_number':113,'multiline':False]['text':' Avoid underflow by:','line_number':115,'multiline':False]['text':' - Calculating each advancement separately for each i.','line_number':116,'multiline':False]['text':' In cases of min&max being equal (or any unexpected numerical underflow) we','line_number':126,'multiline':False]['text':' may not have a final edge larger than the max.','line_number':127,'multiline':False]['text':' automatically apply abs() on the input values','line_number':164,'multiline':False]['text':' namespace caffe2','line_number':182,'multiline':False]