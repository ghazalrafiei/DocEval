['text':' legacy_plus_one ','line_number':79,'multiline':True]['text':' Sets are sorted','line_number':95,'multiline':False]['text':' sets are equal <=> sets contains the same elements','line_number':96,'multiline':False]['text':' Generating random input','line_number':185,'multiline':False]['text':' Not timing the sort for the CPU','line_number':198,'multiline':False]['text':' in the real-world use case scores already have been sorted earlier in the','line_number':199,'multiline':False]['text':' generate proposals workflow','line_number':200,'multiline':False]['text':' Running ntests runs of CPU NMS','line_number':208,'multiline':False]['text':' topN ','line_number':216,'multiline':True]['text':' legacy_plus_one ','line_number':217,'multiline':True]['text':' No timing the memcpies because data is already on the GPU in the real-world','line_number':238,'multiline':False]['text':' use case (generated by the GPU generate_proposals)','line_number':239,'multiline':False]['text':' Running ntests runs of GPU NMS','line_number':247,'multiline':False]['text':' legacy_plus_one ','line_number':254,'multiline':True]['text':' Waiting for everything to be done','line_number':262,'multiline':False]['text':' Generating random input','line_number':303,'multiline':False]['text':' Not timing the sort for the CPU','line_number':308,'multiline':False]['text':' in the real-world use case scores already have been sorted earlier in the','line_number':309,'multiline':False]['text':' generate proposals workflow','line_number':310,'multiline':False]['text':' No timing the memcpies because data is already on the GPU in the','line_number':342,'multiline':False]['text':' real-world use case (generated by the GPU generate_proposals)','line_number':343,'multiline':False]['text':' Running ntests runs of CPU NMS','line_number':351,'multiline':False]['text':' topN ','line_number':358,'multiline':True]['text':' legacy_plus_one ','line_number':359,'multiline':True]['text':' legacy_plus_one ','line_number':365,'multiline':True]['text':' Same boxes in TestNMS with (x_ctr, y_ctr, w, h, angle) format','line_number':395,'multiline':False]['text':' legacy_plus_one ','line_number':456,'multiline':True]['text':' Sets are sorted','line_number':472,'multiline':False]['text':' sets are equal <=> sets contains the same elements','line_number':473,'multiline':False]['text':' Generating random input','line_number':499,'multiline':False]['text':' Not timing the sort for the CPU','line_number':512,'multiline':False]['text':' in the real-world use case scores already have been sorted earlier in the','line_number':513,'multiline':False]['text':' generate proposals workflow','line_number':514,'multiline':False]['text':' Running ntests runs of CPU NMS','line_number':522,'multiline':False]['text':' topN ','line_number':530,'multiline':True]['text':' legacy_plus_one ','line_number':531,'multiline':True]['text':' No timing the memcpies because data is already on the GPU in the real-world','line_number':552,'multiline':False]['text':' use case (generated by the GPU generate_proposals)','line_number':553,'multiline':False]['text':' Running ntests runs of GPU NMS','line_number':561,'multiline':False]['text':' legacy_plus_one ','line_number':568,'multiline':True]['text':' Waiting for everything to be done','line_number':576,'multiline':False]['text':' Skipped. See https://github.com/pytorch/pytorch/issues/26811','line_number':598,'multiline':False]['text':' TEST(UtilsNMSTest, GPUEqualsCPURotatedCorrectnessTest) {','line_number':599,'multiline':False]['text':'   if (!HasCudaGPU())','line_number':600,'multiline':False]['text':'     return;','line_number':601,'multiline':False]['text':'   Workspace ws;','line_number':602,'multiline':False]['text':'   DeviceOption option;','line_number':603,'multiline':False]['text':'   option.set_device_type(PROTO_CUDA);','line_number':604,'multiline':False]['text':'   CUDAContext cuda_context(option);','line_number':605,'multiline':False]['text':'   const int box_dim = 5;','line_number':607,'multiline':False]['text':'   const std::vector<int> nboxes_vec = {10, 100, 1000, 2000};','line_number':608,'multiline':False]['text':'   for (int nboxes : nboxes_vec) {','line_number':609,'multiline':False]['text':'     Tensor host_boxes{CPU};','line_number':610,'multiline':False]['text':'     Tensor host_scores{CPU};','line_number':611,'multiline':False]['text':'     host_boxes.Resize(box_dim * nboxes);','line_number':612,'multiline':False]['text':'     host_scores.Resize(nboxes);','line_number':613,'multiline':False]['text':'     float* h_boxes = host_boxes.template mutable_data<float>();','line_number':615,'multiline':False]['text':'     float* h_scores = host_scores.template mutable_data<float>();','line_number':616,'multiline':False]['text':'     // Generating random input','line_number':618,'multiline':False]['text':'     generateRandomRotatedBoxes(h_boxes, h_scores, nboxes);','line_number':619,'multiline':False]['text':'     const int ntests = 1;','line_number':621,'multiline':False]['text':'     const float thresh = 0.7;','line_number':622,'multiline':False]['text':'     // Not timing the sort for the CPU','line_number':623,'multiline':False]['text':'     // in the real-world use case scores already have been sorted earlier in the','line_number':624,'multiline':False]['text':'     // generate proposals workflow','line_number':625,'multiline':False]['text':'     std::vector<int> indices(nboxes);','line_number':626,'multiline':False]['text':'     std::iota(indices.begin(), indices.end(), 0);','line_number':627,'multiline':False]['text':'     std::sort(indices.begin(), indices.end(), [h_scores](int lhs, int rhs) {','line_number':628,'multiline':False]['text':'       return h_scores[lhs] > h_scores[rhs];','line_number':629,'multiline':False]['text':'     });','line_number':630,'multiline':False]['text':'     std::vector<float> sorted_boxes(nboxes * box_dim);','line_number':632,'multiline':False]['text':'     std::vector<float> sorted_scores(nboxes);','line_number':633,'multiline':False]['text':'     Eigen::ArrayXXf eig_proposals(nboxes, box_dim);','line_number':634,'multiline':False]['text':'     Eigen::ArrayXXf eig_scores(nboxes, 1);','line_number':635,'multiline':False]['text':'     for (int i = 0; i < nboxes; ++i) {','line_number':636,'multiline':False]['text':'       for (int d = 0; d < box_dim; ++d) {','line_number':637,'multiline':False]['text':'         sorted_boxes[i * box_dim + d] = h_boxes[indices[i] * box_dim + d];','line_number':638,'multiline':False]['text':'         eig_proposals(i, d) = h_boxes[indices[i] * box_dim + d];','line_number':639,'multiline':False]['text':'       }','line_number':640,'multiline':False]['text':'       sorted_scores[i] = h_scores[indices[i]];','line_number':641,'multiline':False]['text':'       eig_scores(i) = h_scores[indices[i]];','line_number':642,'multiline':False]['text':'     }','line_number':643,'multiline':False]['text':'     std::vector<int> sorted_indices(nboxes);','line_number':644,'multiline':False]['text':'     std::iota(sorted_indices.begin(), sorted_indices.end(), 0);','line_number':645,'multiline':False]['text':'     Tensor dev_boxes{CUDA};','line_number':647,'multiline':False]['text':'     Tensor dev_delete_mask{CUDA};','line_number':648,'multiline':False]['text':'     Tensor host_delete_mask{CPU};','line_number':649,'multiline':False]['text':'     Tensor dev_list{CUDA};','line_number':650,'multiline':False]['text':'     dev_boxes.Resize(box_dim * nboxes);','line_number':652,'multiline':False]['text':'     float* d_sorted_boxes = dev_boxes.template mutable_data<float>();','line_number':653,'multiline':False]['text':'     dev_list.Resize(nboxes);','line_number':654,'multiline':False]['text':'     int* d_list = dev_list.template mutable_data<int>();','line_number':655,'multiline':False]['text':'     // No timing the memcpies because data is already on the GPU in the','line_number':657,'multiline':False]['text':'     // real-world use case (generated by the GPU generate_proposals)','line_number':658,'multiline':False]['text':'     CUDA_CHECK(cudaMemcpyAsync(','line_number':659,'multiline':False]['text':'         d_sorted_boxes,','line_number':660,'multiline':False]['text':'         &sorted_boxes[0],','line_number':661,'multiline':False]['text':'         sizeof(*d_sorted_boxes) * box_dim * nboxes,','line_number':662,'multiline':False]['text':'         cudaMemcpyHostToDevice,','line_number':663,'multiline':False]['text':'         cuda_context.cuda_stream()));','line_number':664,'multiline':False]['text':'     // Running ntests runs of CPU NMS','line_number':666,'multiline':False]['text':'     for (int itest = 0; itest < ntests; ++itest) {','line_number':667,'multiline':False]['text':'       std::vector<int> keep = utils::nms_cpu(','line_number':668,'multiline':False]['text':'           eig_proposals,','line_number':669,'multiline':False]['text':'           eig_scores,','line_number':670,'multiline':False]['text':'           sorted_indices,','line_number':671,'multiline':False]['text':'           thresh,','line_number':672,'multiline':False]['text':'           -1, /* topN */','line_number':673,'multiline':False]['text':'           true /* legacy_plus_one */);','line_number':674,'multiline':False]['text':'       int list_nitems;','line_number':675,'multiline':False]['text':'       utils::nms_gpu(','line_number':676,'multiline':False]['text':'           d_sorted_boxes,','line_number':677,'multiline':False]['text':'           nboxes,','line_number':678,'multiline':False]['text':'           thresh,','line_number':679,'multiline':False]['text':'           true, /* legacy_plus_one */','line_number':680,'multiline':False]['text':'           d_list,','line_number':681,'multiline':False]['text':'           &list_nitems,','line_number':682,'multiline':False]['text':'           dev_delete_mask,','line_number':683,'multiline':False]['text':'           host_delete_mask,','line_number':684,'multiline':False]['text':'           &cuda_context,','line_number':685,'multiline':False]['text':'           box_dim);','line_number':686,'multiline':False]['text':'       std::vector<int> gpu_keep(list_nitems);','line_number':687,'multiline':False]['text':'       CUDA_CHECK(cudaMemcpyAsync(','line_number':688,'multiline':False]['text':'           &gpu_keep[0],','line_number':689,'multiline':False]['text':'           d_list,','line_number':690,'multiline':False]['text':'           list_nitems * sizeof(int),','line_number':691,'multiline':False]['text':'           cudaMemcpyDeviceToHost,','line_number':692,'multiline':False]['text':'           cuda_context.cuda_stream()));','line_number':693,'multiline':False]['text':'       CUDA_CHECK(cudaStreamSynchronize(cuda_context.cuda_stream());','line_number':694,'multiline':False]['text':'       ASSERT_EQ(keep.size(), gpu_keep.size());','line_number':696,'multiline':False]['text':'       std::sort(keep.begin(), keep.end());','line_number':697,'multiline':False]['text':'       std::sort(gpu_keep.begin(), gpu_keep.end());','line_number':698,'multiline':False]['text':'       for (int i = 0; i < list_nitems; ++i)','line_number':700,'multiline':False]['text':'         EXPECT_EQ(keep[i], gpu_keep[i]);','line_number':701,'multiline':False]['text':'     }','line_number':702,'multiline':False]['text':'   }','line_number':703,'multiline':False]['text':' }','line_number':704,'multiline':False]['text':' namespace caffe2','line_number':706,'multiline':False]