['text':'index','line_number':23,'multiline':True]['text':' index for debug only','line_number':23,'multiline':True]['text':' deal with cases that inverse elements are out of feature map boundary','line_number':24,'multiline':False]['text':' empty','line_number':26,'multiline':False]['text':' reference in forward','line_number':60,'multiline':False]['text':' T v1 = bottom_data[y_low * width + x_low];','line_number':61,'multiline':False]['text':' T v2 = bottom_data[y_low * width + x_high];','line_number':62,'multiline':False]['text':' T v3 = bottom_data[y_high * width + x_low];','line_number':63,'multiline':False]['text':' T v4 = bottom_data[y_high * width + x_high];','line_number':64,'multiline':False]['text':' T val = (w1 * v1 + w2 * v2 + w3 * v3 + w4 * v4);','line_number':65,'multiline':False]['text':'num_rois','line_number':81,'multiline':True]['text':' (n, c, ph, pw) is an element in the pooled output','line_number':96,'multiline':False]['text':' Do not using rounding; this implementation detail is critical','line_number':109,'multiline':False]['text':' backward compatibility','line_number':122,'multiline':False]['text':' Force malformed ROIs to be 1x1','line_number':123,'multiline':False]['text':' We use roi_bin_grid to sample the grid and mimic integral','line_number':137,'multiline':False]['text':' e.g., = 2','line_number':140,'multiline':False]['text':' We do average (integral) pooling inside a bin','line_number':144,'multiline':False]['text':' e.g. = 4','line_number':145,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':149,'multiline':False]['text':' e.g., 0.5, 1.5','line_number':151,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':154,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':159,'multiline':False]['text':' atomic add is not needed for now since it is single threaded','line_number':183,'multiline':False]['text':' if','line_number':188,'multiline':False]['text':' ix','line_number':189,'multiline':False]['text':' iy','line_number':190,'multiline':False]['text':' for','line_number':191,'multiline':False]['text':' ROIAlignBackward','line_number':192,'multiline':False]['text':' namespace','line_number':194,'multiline':False]['text':' Input data to pool','line_number':198,'multiline':False]['text':' RoIs','line_number':199,'multiline':False]['text':' Gradient of net w.r.t. output of "forward" op','line_number':200,'multiline':False]['text':' (aka "gradOutput")','line_number':201,'multiline':False]['text':' if R has 5 columns, the first column is the index, otherwise 0','line_number':204,'multiline':False]['text':' Gradient of net w.r.t. input to "forward" op (aka','line_number':210,'multiline':False]['text':' "gradInput")','line_number':211,'multiline':False]['text':' Must zero-out dX before accumulating gradients','line_number':213,'multiline':False]['text':' (TODO): Kaiming - is this safe?','line_number':214,'multiline':False]['text':' Handle possibly empty gradient if there were no rois','line_number':218,'multiline':False]['text':' Input: X, rois, dY (aka "gradOutput");','line_number':240,'multiline':False]['text':' Output: dX (aka "gradInput")','line_number':241,'multiline':False]['text':' namespace','line_number':263,'multiline':False]['text':' namespace caffe2','line_number':270,'multiline':False]