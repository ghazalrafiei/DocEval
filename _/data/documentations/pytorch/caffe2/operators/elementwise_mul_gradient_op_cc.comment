['text':' A : input not to broadcast whose size is common_size x broadcast_size','line_number':77,'multiline':False]['text':' B : input to broadcast whose size is common_size','line_number':78,'multiline':False]['text':' Ensure operation can be performed in-place.','line_number':115,'multiline':False]['text':' See below comment in `MulFunctor::Backward`.','line_number':116,'multiline':False]['text':' namespace','line_number':126,'multiline':False]['text':' C ','line_number':136,'multiline':True]['text':' A, B, and dC are inputs (dC is the output of the previous gradient op','line_number':146,'multiline':False]['text':' in the dag), and dA and dB are outputs. If the op is performed','line_number':147,'multiline':False]['text':' in-place, either dA or dB could alias dC. In the dC == dA case, we need','line_number':148,'multiline':False]['text':' to make sure we don't overwrite dC when we write to dA, so swap the','line_number':149,'multiline':False]['text':' inputs to avoid clobbering dC. Semantically this is equivalent with','line_number':150,'multiline':False]['text':' writing to dB first. The other case (dC == dB) is already safe because','line_number':151,'multiline':False]['text':' we are writing to dA first.','line_number':152,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':182,'multiline':False]['text':' Flatten dims as much as possible','line_number':192,'multiline':False]['text':' We call A is broadcasted at dim d if A_broadcast_dims[d] <= 1','line_number':193,'multiline':False]['text':' Two consecutive dims d and d+1 can be flattened if','line_number':194,'multiline':False]['text':' A and B are broadcasted at dim d, or','line_number':195,'multiline':False]['text':' A and B are broadcasted at dim d + 1, or','line_number':196,'multiline':False]['text':' A is broadcasted at dim d and d + 1, or','line_number':197,'multiline':False]['text':' B is broadcasted at dim d and d + 1, or','line_number':198,'multiline':False]['text':' A and B are not broadcasted at dim d and d + 1','line_number':199,'multiline':False]['text':' fast path when we have 2 flattened dimensions and the second dimension','line_number':237,'multiline':False]['text':' is broadcasted.','line_number':238,'multiline':False]['text':' fast path when we have 1 flattened dimension','line_number':250,'multiline':False]['text':' Used in fallback ops','line_number':277,'multiline':False]['text':' C ','line_number':284,'multiline':True]['text':' C ','line_number':295,'multiline':True]['text':' C ','line_number':306,'multiline':True]['text':' C ','line_number':317,'multiline':True]['text':' namespace','line_number':343,'multiline':False]['text':' namespace caffe2','line_number':347,'multiline':False]