['text':' Greedy non-maximum suppression for proposed bounding boxes','line_number':15,'multiline':False]['text':' Reject a bounding box if its region has an intersection-overunion (IoU)','line_number':16,'multiline':False]['text':'    overlap with a higher scoring selected bounding box larger than a','line_number':17,'multiline':False]['text':'    threshold.','line_number':18,'multiline':False]['text':' Reference: facebookresearch/Detectron/detectron/utils/cython_nms.pyx','line_number':19,'multiline':False]['text':' proposals: pixel coordinates of proposed bounding boxes,','line_number':20,'multiline':False]['text':'    size: (M, 4), format: [x1; y1; x2; y2]','line_number':21,'multiline':False]['text':' scores: scores for each bounding box, size: (M, 1)','line_number':22,'multiline':False]['text':' sorted_indices: indices that sorts the scores from high to low','line_number':23,'multiline':False]['text':' return: row indices of the selected proposals','line_number':24,'multiline':False]['text':' exit if already enough proposals','line_number':51,'multiline':False]['text':' indices for sub array order[1:n]','line_number':70,'multiline':False]['text':'*
 * Soft-NMS implementation as outlined in https://arxiv.org/abs/1704.04503.
 * Reference: facebookresearch/Detectron/detectron/utils/cython_nms.pyx
 * out_scores: Output updated scores after applying Soft-NMS
 * proposals: pixel coordinates of proposed bounding boxes,
 *    size: (M, 4), format: [x1; y1; x2; y2]
 *    size: (M, 5), format: [ctr_x; ctr_y; w; h; angle (degrees)] for RRPN
 * scores: scores for each bounding box, size: (M, 1)
 * indices: Indices to consider within proposals and scores. Can be used
 *     to pre-filter proposals/scores based on some threshold.
 * sigma: Standard deviation for Gaussian
 * overlap_thresh: Similar to original NMS
 * score_thresh: If updated score falls below this thresh, discard proposal
 * method: 0 - Hard (original) NMS, 1 - Linear, 2 - Gaussian
 * return: row indices of the selected proposals
 ','line_number':78,'multiline':True]['text':' Initialize out_scores with original scores. Will be iteratively updated','line_number':120,'multiline':False]['text':' as Soft-NMS is applied.','line_number':121,'multiline':False]['text':' Exit if already enough proposals','line_number':127,'multiline':False]['text':' Find proposal with max score among remaining proposals','line_number':132,'multiline':False]['text':' Compute IoU of the remaining boxes with the identified max box','line_number':138,'multiline':False]['text':' Update scores based on computed IoU, overlap threshold and NMS method','line_number':151,'multiline':False]['text':' Linear','line_number':155,'multiline':False]['text':' Gaussian','line_number':158,'multiline':False]['text':' Original NMS','line_number':161,'multiline':False]['text':' Discard boxes with new scores below min threshold and update pending','line_number':167,'multiline':False]['text':' indices','line_number':168,'multiline':False]['text':' M_PI / 180. == 0.01745329251','line_number':191,'multiline':False]['text':' cv::RotatedRect takes angle to mean clockwise rotation, but RRPN bbox','line_number':211,'multiline':False]['text':' representation means counter-clockwise rotation.','line_number':212,'multiline':False]['text':' Eigen doesn't seem to support 2d cross product, so we make one here','line_number':219,'multiline':False]['text':' rotated_rect_intersection_pts is a replacement function for','line_number':224,'multiline':False]['text':' cv::rotatedRectangleIntersection, which has a bug due to float underflow','line_number':225,'multiline':False]['text':' For anyone interested, here're the PRs on OpenCV:','line_number':226,'multiline':False]['text':' https://github.com/opencv/opencv/issues/12221','line_number':227,'multiline':False]['text':' https://github.com/opencv/opencv/pull/12222','line_number':228,'multiline':False]['text':' Note that we do not check if the number of intersections is <= 8 in this case','line_number':229,'multiline':False]['text':' Used to test if two points are the same','line_number':235,'multiline':False]['text':' number of intersections','line_number':238,'multiline':False]['text':' Special case of rect1 == rect2','line_number':245,'multiline':False]['text':' Line vector','line_number':264,'multiline':False]['text':' A line from p1 to p2 is: p1 + (p2-p1)*t, t=[0,1]','line_number':265,'multiline':False]['text':' Line test - test all line combos for intersection','line_number':271,'multiline':False]['text':' Solve for 2x2 Ax=b','line_number':274,'multiline':False]['text':' This takes care of parallel lines','line_number':276,'multiline':False]['text':' Check for vertices from rect1 inside rect2','line_number':293,'multiline':False]['text':' assume ABCD is the rectangle, and P is the point to be judged','line_number':300,'multiline':False]['text':' P is inside ABCD iff. P's projection on AB lies within AB','line_number':301,'multiline':False]['text':' and P's projection on AD lies within AD','line_number':302,'multiline':False]['text':' Reverse the check - check for vertices from rect2 inside rect1','line_number':316,'multiline':False]['text':' Compute convex hull using Graham scan algorithm','line_number':338,'multiline':False]['text':' Step 1:','line_number':346,'multiline':False]['text':' Find point with minimum y','line_number':347,'multiline':False]['text':' if more than 1 points have the same minimum y,','line_number':348,'multiline':False]['text':' pick the one with the mimimum x.','line_number':349,'multiline':False]['text':' starting point','line_number':356,'multiline':False]['text':' Step 2:','line_number':358,'multiline':False]['text':' Subtract starting point from every points (for sorting in the next step)','line_number':359,'multiline':False]['text':' Swap the starting point to position 0','line_number':364,'multiline':False]['text':' Step 3:','line_number':367,'multiline':False]['text':' Sort point 1 ~ num_in according to their relative cross-product values','line_number':368,'multiline':False]['text':' (essentially sorting according to angles)','line_number':369,'multiline':False]['text':' explicit irreflexivity handling to sate','line_number':375,'multiline':False]['text':' https://fburl.com/strict-weak-ordering','line_number':376,'multiline':False]['text':' Step 4:','line_number':387,'multiline':False]['text':' Make sure there are at least 2 points (that don't overlap with each other)','line_number':388,'multiline':False]['text':' in the stack','line_number':389,'multiline':False]['text':' index of the non-overlapped second point','line_number':390,'multiline':False]['text':' We reach the end, which means the convex hull is just one point','line_number':396,'multiline':False]['text':' 2 elements in the stack','line_number':401,'multiline':False]['text':' Step 5:','line_number':402,'multiline':False]['text':' Finally we can start the scanning process.','line_number':403,'multiline':False]['text':' If we find a non-convex relationship between the 3 points,','line_number':404,'multiline':False]['text':' we pop the previous point from the stack until the stack only has two','line_number':405,'multiline':False]['text':' points, or the 3-point relationship is convex again','line_number':406,'multiline':False]['text':' Step 6 (Optional):','line_number':414,'multiline':False]['text':' In general sense we need the original coordinates, so we','line_number':415,'multiline':False]['text':' need to shift the points back (reverting Step 2)','line_number':416,'multiline':False]['text':' But if we're only interested in getting the area/perimeter of the shape','line_number':417,'multiline':False]['text':' We can simply return.','line_number':418,'multiline':False]['text':'*
 * Returns the intersection area of two rotated rectangles.
 ','line_number':436,'multiline':True]['text':' There are up to 4 x 4 + 4 + 4 = 24 intersections (including dups) returned','line_number':442,'multiline':False]['text':' from rotated_rect_intersection_pts','line_number':443,'multiline':False]['text':' number of intersections','line_number':445,'multiline':False]['text':' Find points of intersection','line_number':447,'multiline':False]['text':' TODO: rotated_rect_intersection_pts is a replacement function for','line_number':449,'multiline':False]['text':' cv::rotatedRectangleIntersection, which has a bug due to float underflow','line_number':450,'multiline':False]['text':' For anyone interested, here're the PRs on OpenCV:','line_number':451,'multiline':False]['text':' https://github.com/opencv/opencv/issues/12221','line_number':452,'multiline':False]['text':' https://github.com/opencv/opencv/pull/12222','line_number':453,'multiline':False]['text':' Note: it doesn't matter if #intersections is greater than 8 here','line_number':454,'multiline':False]['text':' should never happen','line_number':458,'multiline':False]['text':' If one rectangle is fully enclosed within another, return the area','line_number':477,'multiline':False]['text':' of the smaller one early.','line_number':478,'multiline':False]['text':' Convex Hull to order the intersection points in clockwise or','line_number':484,'multiline':False]['text':' counter-clockwise order and find the countour area.','line_number':485,'multiline':False]['text':' namespace','line_number':490,'multiline':False]['text':'*
 * Find the intersection area of two rotated boxes represented in format
 * [ctr_x, ctr_y, width, height, angle].
 * `angle` represents counter-clockwise rotation in degrees.
 ','line_number':492,'multiline':True]['text':'*
 * Similar to `bbox_overlaps()` in detectron/utils/cython_bbox.pyx,
 * but handles rotated boxes represented in format
 * [ctr_x, ctr_y, width, height, angle].
 * `angle` represents counter-clockwise rotation in degrees.
 ','line_number':507,'multiline':True]['text':' Similar to nms_cpu_upright, but handles rotated proposal boxes','line_number':534,'multiline':False]['text':' in the format:','line_number':535,'multiline':False]['text':'   size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)].','line_number':536,'multiline':False]['text':'','line_number':537,'multiline':False]['text':' For now, we only consider IoU as the metric for suppression. No angle info','line_number':538,'multiline':False]['text':' is used yet.','line_number':539,'multiline':False]['text':' exit if already enough proposals','line_number':566,'multiline':False]['text':' indices for sub array order[1:n].','line_number':583,'multiline':False]['text':' TODO (viswanath): Should angle info be included as well while filtering?','line_number':584,'multiline':False]['text':' Similar to soft_nms_cpu_upright, but handles rotated proposal boxes','line_number':592,'multiline':False]['text':' in the format:','line_number':593,'multiline':False]['text':'   size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)].','line_number':594,'multiline':False]['text':'','line_number':595,'multiline':False]['text':' For now, we only consider IoU as the metric for suppression. No angle info','line_number':596,'multiline':False]['text':' is used yet.','line_number':597,'multiline':False]['text':' Initialize out_scores with original scores. Will be iteratively updated','line_number':624,'multiline':False]['text':' as Soft-NMS is applied.','line_number':625,'multiline':False]['text':' Exit if already enough proposals','line_number':631,'multiline':False]['text':' Find proposal with max score among remaining proposals','line_number':636,'multiline':False]['text':' Compute IoU of the remaining boxes with the identified max box','line_number':642,'multiline':False]['text':' Update scores based on computed IoU, overlap threshold and NMS method','line_number':652,'multiline':False]['text':' TODO (viswanath): Should angle info be included as well while filtering?','line_number':653,'multiline':False]['text':' Linear','line_number':657,'multiline':False]['text':' Gaussian','line_number':660,'multiline':False]['text':' Original NMS','line_number':663,'multiline':False]['text':' Discard boxes with new scores below min threshold and update pending','line_number':669,'multiline':False]['text':' indices','line_number':670,'multiline':False]['text':' Upright boxes','line_number':689,'multiline':False]['text':' Rotated boxes with angle info','line_number':693,'multiline':False]['text':' Greedy non-maximum suppression for proposed bounding boxes','line_number':698,'multiline':False]['text':' Reject a bounding box if its region has an intersection-overunion (IoU)','line_number':699,'multiline':False]['text':'    overlap with a higher scoring selected bounding box larger than a','line_number':700,'multiline':False]['text':'    threshold.','line_number':701,'multiline':False]['text':' Reference: facebookresearch/Detectron/detectron/lib/utils/cython_nms.pyx','line_number':702,'multiline':False]['text':' proposals: pixel coordinates of proposed bounding boxes,','line_number':703,'multiline':False]['text':'    size: (M, 4), format: [x1; y1; x2; y2]','line_number':704,'multiline':False]['text':'    size: (M, 5), format: [ctr_x; ctr_y; w; h; angle (degrees)] for RRPN','line_number':705,'multiline':False]['text':' scores: scores for each bounding box, size: (M, 1)','line_number':706,'multiline':False]['text':' return: row indices of the selected proposals','line_number':707,'multiline':False]['text':' topN ','line_number':726,'multiline':True]['text':' legacy_plus_one ','line_number':727,'multiline':True]['text':' Upright boxes','line_number':744,'multiline':False]['text':' Rotated boxes with angle info','line_number':757,'multiline':False]['text':' namespace utils','line_number':797,'multiline':False]['text':' namespace caffe2','line_number':798,'multiline':False]['text':' CAFFE2_OPERATORS_UTILS_NMS_H_','line_number':800,'multiline':False]