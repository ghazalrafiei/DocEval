['text':' Compute the area of an array of boxes.','line_number':7,'multiline':False]['text':' equivalent to python code','line_number':9,'multiline':False]['text':'   w = (boxes[:, 2] - boxes[:, 0] + 1)','line_number':10,'multiline':False]['text':'   h = (boxes[:, 3] - boxes[:, 1] + 1)','line_number':11,'multiline':False]['text':'   areas = w * h','line_number':12,'multiline':False]['text':'   assert np.all(areas >= 0), 'Negative areas founds'','line_number':13,'multiline':False]['text':' NOLINTNEXTLINE(performance-no-automatic-move)','line_number':18,'multiline':False]['text':' Determine which FPN level each RoI in a set of RoIs should map to based','line_number':22,'multiline':False]['text':' on the heuristic in the FPN paper.','line_number':23,'multiline':False]['text':' Compute level ids','line_number':31,'multiline':False]['text':' s0 = cfg.FPN.ROI_CANONICAL_SCALE  # default: 224','line_number':33,'multiline':False]['text':' lvl0 = cfg.FPN.ROI_CANONICAL_LEVEL  # default: 4','line_number':34,'multiline':False]['text':' Eqn.(1) in FPN paper','line_number':36,'multiline':False]['text':' equivalent to python code','line_number':37,'multiline':False]['text':'   target_lvls = np.floor(lvl0 + np.log2(s / s0 + 1e-6))','line_number':38,'multiline':False]['text':'   target_lvls = np.clip(target_lvls, k_min, k_max)','line_number':39,'multiline':False]['text':' Sort RoIs from highest to lowest individual RoI score based on','line_number':45,'multiline':False]['text':' values from scores array and limit to n results','line_number':46,'multiline':False]['text':' Create index array with 0, 1, ... N','line_number':52,'multiline':False]['text':' Reuse a comparator based on scores and store a copy of RoIs that','line_number':55,'multiline':False]['text':' will be truncated and manipulated below','line_number':56,'multiline':False]['text':' To ensure the sort is stable','line_number':64,'multiline':False]['text':' Note that people have found nth_element + sort to be much faster','line_number':68,'multiline':False]['text':' than partial_sort so we use it here','line_number':69,'multiline':False]['text':' Update RoIs based on new order','line_number':77,'multiline':False]['text':' Updates arr to be indices that would sort the array. Implementation of','line_number':83,'multiline':False]['text':' https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html','line_number':84,'multiline':False]['text':' Create index array with 0, 1, ... N and sort based on array values','line_number':86,'multiline':False]['text':' Update array to match new order','line_number':92,'multiline':False]['text':' Update out_filtered and out_indices with rows from rois where lvl matches','line_number':98,'multiline':False]['text':' value in lvls passed in.','line_number':99,'multiline':False]['text':' Calculate how many rows we need','line_number':109,'multiline':False]['text':' Fill in the rows and indices','line_number':111,'multiline':False]['text':' namespace utils','line_number':124,'multiline':False]['text':' Collect rois and scores in Eigen','line_number':134,'multiline':False]['text':' rois are in [[batch_idx, x0, y0, x1, y2], ...] format','line_number':135,'multiline':False]['text':' Combine predictions across all levels and retain the top scoring','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' equivalent to python code','line_number':138,'multiline':False]['text':'   roi_inputs = inputs[:num_rpn_lvls]','line_number':139,'multiline':False]['text':'   score_inputs = inputs[num_rpn_lvls:]','line_number':140,'multiline':False]['text':'   rois = np.concatenate([blob.data for blob in roi_inputs])','line_number':141,'multiline':False]['text':'   scores = np.concatenate([blob.data for blob in score_inputs]).squeeze()','line_number':142,'multiline':False]['text':' No need to squeeze, since we are reshaping when converting to Eigen','line_number':161,'multiline':False]['text':' https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html','line_number':162,'multiline':False]['text':' Grab only top rpn_post_nms_topN rois','line_number':169,'multiline':False]['text':' equivalent to python code','line_number':170,'multiline':False]['text':'   inds = np.argsort(-scores)[:rpn_post_nms_topN]','line_number':171,'multiline':False]['text':'   rois = rois[inds, :]','line_number':172,'multiline':False]['text':' Distribute','line_number':175,'multiline':False]['text':' equivalent to python code','line_number':176,'multiline':False]['text':'   lvl_min = cfg.FPN.ROI_MIN_LEVEL','line_number':177,'multiline':False]['text':'   lvl_max = cfg.FPN.ROI_MAX_LEVEL','line_number':178,'multiline':False]['text':'   lvls = fpn.map_rois_to_fpn_levels(rois[:, 1:5], lvl_min, lvl_max)','line_number':179,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':186,'multiline':False]['text':' equivalent to python code','line_number':189,'multiline':False]['text':'   outputs[0].reshape(rois.shape)','line_number':190,'multiline':False]['text':'   outputs[0].data[...] = rois','line_number':191,'multiline':False]['text':' Create new roi blobs for each FPN level','line_number':198,'multiline':False]['text':' (See: modeling.FPN.add_multilevel_roi_blobs which is similar but annoying','line_number':199,'multiline':False]['text':' to generalize to support this particular case.)','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' equivalent to python code','line_number':202,'multiline':False]['text':'   rois_idx_order = np.empty((0, ))','line_number':203,'multiline':False]['text':'   for (output_idx, lvl in enumerate(range(lvl_min, lvl_max + 1)))','line_number':204,'multiline':False]['text':'       idx_lvl = np.where(lvls == lvl)[0]','line_number':205,'multiline':False]['text':'       blob_roi_level = rois[idx_lvl, :]','line_number':206,'multiline':False]['text':'       outputs[output_idx + 1].reshape(blob_roi_level.shape)','line_number':207,'multiline':False]['text':'       outputs[output_idx + 1].data[...] = blob_roi_level','line_number':208,'multiline':False]['text':'       rois_idx_order = np.concatenate((rois_idx_order, idx_lvl))','line_number':209,'multiline':False]['text':'   rois_idx_restore = np.argsort(rois_idx_order)','line_number':210,'multiline':False]['text':'   blob_utils.py_op_copy_blob(rois_idx_restore.astype(np.int32),','line_number':211,'multiline':False]['text':'   outputs[-1])','line_number':212,'multiline':False]['text':' Output blob_roi_level','line_number':219,'multiline':False]['text':' Append indices from idx_lvl to rois_idx_restore','line_number':231,'multiline':False]['text':' Collect rois and scores in Eigen','line_number':253,'multiline':False]['text':' rois are in [[batch_idx, x0, y0, x1, y2], ...] format','line_number':254,'multiline':False]['text':' Combine predictions across all levels and retain the top scoring','line_number':255,'multiline':False]['text':'','line_number':256,'multiline':False]['text':' equivalent to python code','line_number':257,'multiline':False]['text':'   roi_inputs = inputs[:num_rpn_lvls]','line_number':258,'multiline':False]['text':'   score_inputs = inputs[num_rpn_lvls:]','line_number':259,'multiline':False]['text':'   rois = np.concatenate([blob.data for blob in roi_inputs])','line_number':260,'multiline':False]['text':'   scores = np.concatenate([blob.data for blob in score_inputs]).squeeze()','line_number':261,'multiline':False]['text':' No need to squeeze, since we are reshaping when converting to Eigen','line_number':280,'multiline':False]['text':' https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html','line_number':281,'multiline':False]['text':' Grab only top rpn_post_nms_topN rois','line_number':288,'multiline':False]['text':' equivalent to python code','line_number':289,'multiline':False]['text':'   inds = np.argsort(-scores)[:rpn_post_nms_topN]','line_number':290,'multiline':False]['text':'   rois = rois[inds, :]','line_number':291,'multiline':False]['text':' equivalent to python code','line_number':294,'multiline':False]['text':'   outputs[0].reshape(rois.shape)','line_number':295,'multiline':False]['text':'   outputs[0].data[...] = rois','line_number':296,'multiline':False]['text':' Load Input(0) to rois','line_number':311,'multiline':False]['text':' Distribute','line_number':321,'multiline':False]['text':' equivalent to python code','line_number':322,'multiline':False]['text':'   lvl_min = cfg.FPN.ROI_MIN_LEVEL','line_number':323,'multiline':False]['text':'   lvl_max = cfg.FPN.ROI_MAX_LEVEL','line_number':324,'multiline':False]['text':'   lvls = fpn.map_rois_to_fpn_levels(rois[:, 1:5], lvl_min, lvl_max)','line_number':325,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':332,'multiline':False]['text':' Create new roi blobs for each FPN level','line_number':335,'multiline':False]['text':' (See: modeling.FPN.add_multilevel_roi_blobs which is similar but annoying','line_number':336,'multiline':False]['text':' to generalize to support this particular case.)','line_number':337,'multiline':False]['text':'','line_number':338,'multiline':False]['text':' equivalent to python code','line_number':339,'multiline':False]['text':'   rois_idx_order = np.empty((0, ))','line_number':340,'multiline':False]['text':'   for (output_idx, lvl in enumerate(range(lvl_min, lvl_max + 1)))','line_number':341,'multiline':False]['text':'       idx_lvl = np.where(lvls == lvl)[0]','line_number':342,'multiline':False]['text':'       blob_roi_level = rois[idx_lvl, :]','line_number':343,'multiline':False]['text':'       outputs[output_idx + 1].reshape(blob_roi_level.shape)','line_number':344,'multiline':False]['text':'       outputs[output_idx + 1].data[...] = blob_roi_level','line_number':345,'multiline':False]['text':'       rois_idx_order = np.concatenate((rois_idx_order, idx_lvl))','line_number':346,'multiline':False]['text':'   rois_idx_restore = np.argsort(rois_idx_order)','line_number':347,'multiline':False]['text':'   blob_utils.py_op_copy_blob(rois_idx_restore.astype(np.int32),','line_number':348,'multiline':False]['text':'   outputs[-1])','line_number':349,'multiline':False]['text':' Output blob_roi_level','line_number':356,'multiline':False]['text':' Append indices from idx_lvl to rois_idx_restore','line_number':368,'multiline':False]['text':' namespace','line_number':623,'multiline':False]['text':' namespace caffe2','line_number':624,'multiline':False]['text':' clang-format off','line_number':626,'multiline':False]['text':' clang-format on','line_number':678,'multiline':False]