['text':'*
 * The Transform Base Object
 *
 * A Transform is an operation which manipulates a Caffe2 NetDef.
 * You can consider it as a function: Transform.ApplyTo(NetDef) -> NetDef
 *
 * A Transform Operation does 4 things:
 *    1) Creates a Graph object from a NetDef, which stores connections.
 *    2) Pattern Matches on the Graph, to find subgraphs it wants to change.
 *    3) Replaces the subgraphs that it's matched with new operators.
 *    4) Creates a NetDef from the changed Graph, and returns it.
 *
 * The effect of a Transform is defined by its 3 protected virtual functions.
 *    1) PatternRule determines for an ordered subgraph and a node, whether to
 *        consider adding the node to the subgraph.
 *    2) ValidatorRule determines, for an ordered subgraph, whether it is a
 *        match.
 *    3) ReplaceRule mutates the graph, based on a matched subgraph.
 *
 * This is the base class for all derived classes to base off. To create your
 * own transform, write your implementations for PatternRule, ValidatorRule, and
 * ReplaceRule.
 ','line_number':11,'multiline':True]['text':'*
   * Apply a Transform onto a NetDef.
   * Returns the transformed NetDef.
   ','line_number':38,'multiline':True]['text':'*
   * Determines the type of subgraphs that PatternMatch will find.
   *
   * CONNECTED_SUBGRAPH will only match subgraphs that are connected.
   * These subgraphs satisfy that every node of the match is connected to the
   * subgraph of the nodes that come before it.
   * For example, in the graph (1) --> (2) --> (3) --> (4),
   *    This is capable of matching the subgraph [2, 3] and [4, 3]
   *    This is not capable of matching the subgraph [2, 4].
   *
   *
   * SORTED_WRT_EXECUTION_ORDER will match subgraphs that guarantee
   * sorted execution order.
   * The nodes don't have to be connected. It is faster than General.
   * For example, in the graph (1) --> (2) --> (3) --> (4),
   *    This is capable of matching the subgraph [2, 4], [3, 4].
   *    This is not capable of matching the subgraph [3, 1], [4, 3].
   *
   *
   * GENERAL can match any subgraph.
   * For example, in the graph (1) --> (2) --> (3) --> (4),
   *    This is capable of matching subgraphs [2, 4], [3, 4], [4, 2, 1].
   *    There is no ordered subgraph of G that cannot be matched by this.
   ','line_number':46,'multiline':True]['text':'*
   * Generates all matches (stored as ordered subgraphs) and returns them.
   *
   * A match is stored as vector<int>, which is a mapping to OperatorDefs
   * in Graph. The order matters.
   ','line_number':76,'multiline':True]['text':'*
   * Applies the replace rule onto each of the matches found.
   ','line_number':84,'multiline':True]['text':'*
   * The PatternRule essentially answers:
   * Given the current subgraph (ordered), should we append the new node at idx?
   ','line_number':92,'multiline':True]['text':'idx','line_number':99,'multiline':True]['text':'*
   * The ValidatorRule essentially answers:
   * Given a subgraph, can we accept it?
   ','line_number':103,'multiline':True]['text':'*
   * The ReplaceRule actually mutates the graph, and applies the transformation
   * upon the subgraph.
   ','line_number':113,'multiline':True]['text':'*
   * A helper function for PatternMatch, which keeps track of the best subgraph
   * so far.
   ','line_number':128,'multiline':True]['text':'*
   * Attempts to append each neighbor to the end of the subgraph.
   ','line_number':137,'multiline':True]['text':' Creates a Transform based on a key, which should be defined in registry.','line_number':150,'multiline':False]['text':' Create a Transform object from registry,','line_number':157,'multiline':False]['text':' and immediately apply it to a Netdef.','line_number':158,'multiline':False]['text':' Create a Transform object from registry, apply it to a NetDef.','line_number':161,'multiline':False]['text':' Will only return the transformed net if it is faster than the old net.','line_number':162,'multiline':False]['text':' This will run the init net first, will run the two nets warmup_runs times.','line_number':163,'multiline':False]['text':' Then, we will take the average time of main_runs runs, and only keep the','line_number':164,'multiline':False]['text':' transformed net if it is faster by a factor of improvement_threshold.','line_number':165,'multiline':False]['text':' namespace','line_number':174,'multiline':False]