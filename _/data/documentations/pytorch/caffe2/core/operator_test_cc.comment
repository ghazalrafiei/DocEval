['text':' Since we instantiate this on CPU and GPU (but don't want a','line_number':9,'multiline':False]['text':' CUDAContext dependency, we use OperatorBase. In general, you only','line_number':10,'multiline':False]['text':' want to inherit from Operator<Context> in your code.','line_number':11,'multiline':False]['text':' unused ','line_number':15,'multiline':True]['text':'stream_id','line_number':15,'multiline':True]['text':' unused ','line_number':29,'multiline':True]['text':'stream_id','line_number':29,'multiline':True]['text':' unused ','line_number':40,'multiline':True]['text':'stream_id','line_number':40,'multiline':True]['text':' unused ','line_number':51,'multiline':True]['text':'stream_id','line_number':51,'multiline':True]['text':' After introducing events, CUDA operator creation has to have CUDA compiled','line_number':82,'multiline':False]['text':' as it needs to instantiate an Event object with CUDAContext. Thus we will','line_number':83,'multiline':False]['text':' guard this test below.','line_number':84,'multiline':False]['text':' Note: we do not do ASSERT_THROW in order to print out','line_number':110,'multiline':False]['text':' the error message for inspection.','line_number':111,'multiline':False]['text':' This should not happen - exception should throw above.','line_number':114,'multiline':False]['text':' This should not happen - exception should throw above.','line_number':121,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':155,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':196,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':214,'multiline':False]['text':' JustTest will only accept one single input.','line_number':251,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':252,'multiline':False]['text':' JustTest will only produce one single output.','line_number':260,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':261,'multiline':False]['text':' JustTest will only produce one single output.','line_number':274,'multiline':False]['text':' Check the names, input and output.','line_number':370,'multiline':False]['text':' Checks the engine, device option and arguments.','line_number':379,'multiline':False]['text':' Checks the gradient name for input.','line_number':386,'multiline':False]['text':' clear','line_number':410,'multiline':False]['text':' Invalid operator type','line_number':413,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-avoid-goto,cppcoreguidelines-avoid-goto)','line_number':414,'multiline':False]['text':' clear','line_number':430,'multiline':False]['text':' clear','line_number':439,'multiline':False]['text':' Invalid device type','line_number':442,'multiline':False]['text':' This check is no longer necessary with the enum class','line_number':443,'multiline':False]['text':' ASSERT_THROW(SetGlobalEnginePref({{8888, {"FOO"}}}), EnforceNotMet);','line_number':444,'multiline':False]['text':' per op pref takes precedence','line_number':457,'multiline':False]['text':' clear','line_number':460,'multiline':False]['text':' operator_def takes precedence','line_number':476,'multiline':False]['text':' clear','line_number':479,'multiline':False]['text':' operator_def takes precedence','line_number':494,'multiline':False]['text':' clear','line_number':497,'multiline':False]['text':' operator_def takes precedence','line_number':512,'multiline':False]['text':' clear','line_number':515,'multiline':False]['text':' unused ','line_number':523,'multiline':True]['text':'stream_id','line_number':523,'multiline':True]['text':' unused ','line_number':563,'multiline':True]['text':'stream_id','line_number':563,'multiline':True]['text':' unused ','line_number':606,'multiline':True]['text':'stream_id','line_number':606,'multiline':True]['text':' namespace caffe2','line_number':634,'multiline':False]