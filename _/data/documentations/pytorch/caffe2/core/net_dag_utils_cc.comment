['text':' Ancestor table for tracking the visited nodes','line_number':18,'multiline':False]['text':' stack element is pair of <curr_node, previous_node>','line_number':20,'multiline':False]['text':' initialize the prev_node to be -1','line_number':22,'multiline':False]['text':' If the node has already been visited, pop curr out of','line_number':30,'multiline':False]['text':' stack and clean up the ancestor table','line_number':31,'multiline':False]['text':' Check if this has a parent that can be pruned:','line_number':39,'multiline':False]['text':'  if parent is not the previous node visited and is','line_number':40,'multiline':False]['text':'  an ancestor of the current traversar, it can be','line_number':41,'multiline':False]['text':'  pruned.','line_number':42,'multiline':False]['text':' We can prune this one','line_number':47,'multiline':False]['text':' Descend -- but only once from each node','line_number':63,'multiline':False]['text':'*
 * Prune redundant dependencies to improve chaining.
 * TODO: t15868555 This algorithm is fast but can miss dependencies.
 ','line_number':74,'multiline':True]['text':' Create a separate list of pruned operatornodes used','line_number':83,'multiline':False]['text':' for the chaining computation. Because of the unique_ptr','line_number':84,'multiline':False]['text':' in the OperatorNode, we cannot do a copy but have to','line_number':85,'multiline':False]['text':' copy just the fields we need.','line_number':86,'multiline':False]['text':' namespace','line_number':120,'multiline':False]['text':' We need to construct the node_seen_count to know how many inner edges each','line_number':131,'multiline':False]['text':' node has.','line_number':132,'multiline':False]['text':' Visit each child only once.','line_number':155,'multiline':False]['text':' Now, we compute the set of execution chains An execution chain is','line_number':162,'multiline':False]['text':' a linear set of nodes that can be executed on a single stream','line_number':163,'multiline':False]['text':' (e.g. a chain of single input, single output operators)','line_number':164,'multiline':False]['text':' A chain of operators is executed without additional','line_number':175,'multiline':False]['text':' synchronization by calling RunAsync sequentially on each','line_number':176,'multiline':False]['text':' operator and passing the same stream id on each call.','line_number':177,'multiline':False]['text':' RunAsync may schedule an async computation on device.','line_number':178,'multiline':False]['text':' In order to be scheduled on the same chain two operators','line_number':179,'multiline':False]['text':' (parent and dependent) need to satisfy:','line_number':180,'multiline':False]['text':'  1. Both ops are on the same device _and_','line_number':181,'multiline':False]['text':'  2. Parent op does not have an async part or','line_number':182,'multiline':False]['text':'     dependent op can be executed as an async dependency','line_number':183,'multiline':False]['text':' Has one child, can be candidate for chain or can be added to the','line_number':225,'multiline':False]['text':' previous chain.','line_number':226,'multiline':False]['text':' Add oneself to the current chain.','line_number':229,'multiline':False]['text':' Can't belong to the previous chain, commit previous chain and','line_number':235,'multiline':False]['text':' start a new one.','line_number':236,'multiline':False]['text':' Add current node to the current chain and commit.','line_number':245,'multiline':False]['text':' Node has more than one child.','line_number':249,'multiline':False]['text':' Add current node as an independent chain since it won't be a part','line_number':251,'multiline':False]['text':' of a bigger chain.','line_number':252,'multiline':False]['text':' This node has been seen before, we will only traverse its children.','line_number':258,'multiline':False]['text':' Commit any pending chains and continue traversing.','line_number':259,'multiline':False]['text':' End while','line_number':263,'multiline':False]['text':' Check if this if is even needed.','line_number':265,'multiline':False]['text':' Here chains are essentially groups, we used chain/group interchangeably','line_number':280,'multiline':False]['text':' Screen out the primary root nodes','line_number':295,'multiline':False]['text':' We check sync ops on the frontier first and then async ops. This gives us a','line_number':306,'multiline':False]['text':' head start to execute sync ops locally while waiting for async ops to','line_number':307,'multiline':False]['text':' finish.','line_number':308,'multiline':False]['text':' Sync ops','line_number':311,'multiline':False]['text':' add the whole group of continuous sync ops into one chain','line_number':331,'multiline':False]['text':' Async ops','line_number':336,'multiline':False]['text':' Put each individual node as a new chain','line_number':344,'multiline':False]['text':' Initialize the operators','line_number':378,'multiline':False]['text':' Check the inputs, and set up parents if necessary. This addressese the','line_number':397,'multiline':False]['text':' read after write case.','line_number':398,'multiline':False]['text':' Add the current idx to the readers of this input.','line_number':412,'multiline':False]['text':' Check the outputs.','line_number':419,'multiline':False]['text':' This addresses the write after write case - we will assume that all','line_number':422,'multiline':False]['text':' writes are inherently sequential.','line_number':423,'multiline':False]['text':' This addresses the write after read case - we will assume that writes','line_number':430,'multiline':False]['text':' should only occur after all previous reads are finished.','line_number':431,'multiline':False]['text':' Renew the creator of the output name.','line_number':438,'multiline':False]['text':' The write would create an implicit barrier that all earlier readers of','line_number':440,'multiline':False]['text':' this output is now parents of the current op, and future writes would','line_number':441,'multiline':False]['text':' not need to depend on these earlier readers. Thus, we can clear up the','line_number':442,'multiline':False]['text':' blob readers.','line_number':443,'multiline':False]['text':' Now, make sure that the parent list and the children list do not contain','line_number':448,'multiline':False]['text':' duplicated items.','line_number':449,'multiline':False]['text':' Sort, remove duplicates, and delete self dependency.','line_number':452,'multiline':False]['text':' Do the same for the children vector.','line_number':457,'multiline':False]['text':' namespace dag_utils','line_number':514,'multiline':False]['text':' namespace caffe2','line_number':515,'multiline':False]