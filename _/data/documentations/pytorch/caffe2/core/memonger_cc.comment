['text':' Memonger modifies the graph. Do an early schema check here to make sure','line_number':32,'multiline':False]['text':' the operators are valid','line_number':33,'multiline':False]['text':' NOTE: for subtleties of RNN op memonger, see memonger.py on how','line_number':39,'multiline':False]['text':' to deal with the forward/backward links etc.','line_number':40,'multiline':False]['text':' Step 1: count first and last operator for each blob','line_number':47,'multiline':False]['text':' Step 2: pass over ops and recycle','line_number':68,'multiline':False]['text':' Check if some input is used the last time, and release it','line_number':77,'multiline':False]['text':' Safety check to prevent double-memongering nets.','line_number':85,'multiline':False]['text':' Check if some output appears the first time, and see if we can replace it','line_number':99,'multiline':False]['text':' with a recycled blob.','line_number':100,'multiline':False]['text':' first use?','line_number':103,'multiline':False]['text':' Add blobs released from this op to the pool.','line_number':113,'multiline':False]['text':' Step 3: rename inputs and outputs and create new net','line_number':119,'multiline':False]['text':' Memonger modifies the graph. Do an early schema check here to make sure','line_number':159,'multiline':False]['text':' the operators are valid','line_number':160,'multiline':False]['text':' Construct the set of input blobs.','line_number':162,'multiline':False]['text':' Construct the set of output blobs we want to optimize.','line_number':165,'multiline':False]['text':' Blobs not eligible for sharing are filtered out','line_number':166,'multiline':False]['text':' Compute operators in degree (op_inputs_) and initialize how many ops are','line_number':175,'multiline':False]['text':' sharing input blobs (share_counts_).','line_number':176,'multiline':False]['text':' Note: We have to handle the cases where output blobs are shared.','line_number':177,'multiline':False]['text':' Exception for CopyGPUToCPU that has','line_number':199,'multiline':False]['text':' cuda device option but whose inputs/outputs are on CPU','line_number':200,'multiline':False]['text':' The main recursive call. Here we do start DFS in the operator graph','line_number':208,'multiline':False]['text':' from the input blobs. Note that the input ordering does not indicate','line_number':209,'multiline':False]['text':' operator graph ordering. To avoid traversing children operators first,','line_number':210,'multiline':False]['text':' traversal begins from root ops and then recursively children ops are','line_number':211,'multiline':False]['text':' visited.','line_number':212,'multiline':False]['text':' Rename mapped blobs.','line_number':231,'multiline':False]['text':' Recursively rename mapped_blobs.','line_number':248,'multiline':False]['text':' Rename optimized_net blobs.','line_number':276,'multiline':False]['text':' Special handling for RNNs, which have internal nets that','line_number':278,'multiline':False]['text':' can refer to memongered blobs','line_number':279,'multiline':False]['text':' Special handling for AsyncIf ops, where internal nets can','line_number':284,'multiline':False]['text':' refer to memongered blobs','line_number':285,'multiline':False]['text':' Recursively map stepnets in RecurrentNetworks, and','line_number':306,'multiline':False]['text':' attach a mapping table','line_number':307,'multiline':False]['text':' Store renamings','line_number':334,'multiline':False]['text':' update external inputs and outputs mappings as well','line_number':357,'multiline':False]['text':' for this internal net','line_number':358,'multiline':False]['text':' The tokens we have now is the union of current tokens operator is holding','line_number':401,'multiline':False]['text':' and tokens pushed from parents.','line_number':402,'multiline':False]['text':' The set of freed input blobs by processing current op.','line_number':411,'multiline':False]['text':' Now update blob tokens.','line_number':415,'multiline':False]['text':' Increment blob count and check if we can free input blobs.','line_number':431,'multiline':False]['text':' Check if we can recycle free blobs and use it as output blob.','line_number':446,'multiline':False]['text':' Insert new freed blobs.','line_number':462,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':480,'multiline':False]['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':526,'multiline':False]['text':' Returns true if the op that generates that blob acquires all tokens.','line_number':542,'multiline':False]['text':' Returns the name of the blob that we are going to map blob_name into.','line_number':560,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':574,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':590,'multiline':False]['text':' Heuristic to choose the largest blob to fit output thats','line_number':594,'multiline':False]['text':' slightly less than blob_size.','line_number':595,'multiline':False]['text':' blob_name -> Op edges.','line_number':623,'multiline':False]['text':' Current Op in degree.','line_number':625,'multiline':False]['text':' Op in degree.','line_number':627,'multiline':False]['text':' Current Op visit counts.','line_number':629,'multiline':False]['text':' The set of output blobs we already processed.','line_number':638,'multiline':False]['text':' memonger','line_number':662,'multiline':False]['text':' caffe2','line_number':663,'multiline':False]