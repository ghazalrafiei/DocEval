['text':' A net test dummy op that does nothing but scaffolding. Here, we','line_number':16,'multiline':False]['text':' inherit from OperatorBase because we instantiate on both CPU and','line_number':17,'multiline':False]['text':' GPU. In general, you want to only inherit from Operator<Context>.','line_number':18,'multiline':False]['text':' unused ','line_number':27,'multiline':True]['text':'stream_id','line_number':27,'multiline':True]['text':' Simulate CUDA operator behavior','line_number':35,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':45,'multiline':False]['text':' namespace','line_number':90,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':119,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':128,'multiline':False]['text':' Run 100 times','line_number':136,'multiline':False]['text':' Create all external inputs','line_number':169,'multiline':False]['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':170,'multiline':False]['text':' TEST(NetTest, ChainingForJoinWithAncestor) {','line_number':228,'multiline':False]['text':'   const auto spec = R"DOC(','line_number':229,'multiline':False]['text':'         name: "example"','line_number':230,'multiline':False]['text':'         type: "dag"','line_number':231,'multiline':False]['text':'         external_input: "in"','line_number':232,'multiline':False]['text':'         op {','line_number':233,'multiline':False]['text':'           input: "in"','line_number':234,'multiline':False]['text':'           output: "hidden"','line_number':235,'multiline':False]['text':'           type: "NetTestDummy"','line_number':236,'multiline':False]['text':'         }','line_number':237,'multiline':False]['text':'         op {','line_number':238,'multiline':False]['text':'           input: "hidden"','line_number':239,'multiline':False]['text':'           output: "out1"','line_number':240,'multiline':False]['text':'           type: "NetTestDummy"','line_number':241,'multiline':False]['text':'         }','line_number':242,'multiline':False]['text':'         op {','line_number':243,'multiline':False]['text':'           input: "hidden"','line_number':244,'multiline':False]['text':'           output: "out2"','line_number':245,'multiline':False]['text':'           type: "NetTestDummy"','line_number':246,'multiline':False]['text':'         }','line_number':247,'multiline':False]['text':'         op {','line_number':248,'multiline':False]['text':'           input: "hidden"','line_number':249,'multiline':False]['text':'           input: "out2"','line_number':250,'multiline':False]['text':'           type: "NetTestDummy"','line_number':251,'multiline':False]['text':'         }','line_number':252,'multiline':False]['text':' )DOC";','line_number':253,'multiline':False]['text':'   checkChainingAndRun(spec, {{0, {0}}, {1, {1}}, {2, {2, 3}}});','line_number':254,'multiline':False]['text':' }','line_number':255,'multiline':False]['text':' async_scheduling would throw','line_number':573,'multiline':False]['text':' unused ','line_number':591,'multiline':True]['text':'stream_id','line_number':591,'multiline':True]['text':' async_scheduling propagates exception','line_number':649,'multiline':False]['text':' never calls SetFinished','line_number':759,'multiline':False]['text':' net is not stuck and returns false','line_number':795,'multiline':False]['text':' Cancellation exception is fine since if the ops run concurrently the','line_number':798,'multiline':False]['text':' NotFinishingOp may be cancelled with an exception.','line_number':799,'multiline':False]['text':' Throw in sync part','line_number':906,'multiline':False]['text':'throw_','line_number':907,'multiline':True]['text':'fail_in_sync','line_number':907,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':909,'multiline':False]['text':' Return false in sync part','line_number':913,'multiline':False]['text':'throw_','line_number':914,'multiline':True]['text':'fail_in_sync','line_number':914,'multiline':True]['text':' SetFinishedWithException in async part','line_number':917,'multiline':False]['text':'throw_','line_number':918,'multiline':True]['text':'fail_in_sync','line_number':918,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':920,'multiline':False]['text':' SetFinished(err) in async part','line_number':924,'multiline':False]['text':'throw_','line_number':925,'multiline':True]['text':'fail_in_sync','line_number':925,'multiline':True]['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':1006,'multiline':False]['text':'throw_','line_number':1054,'multiline':True]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':1056,'multiline':False]['text':'throw_','line_number':1060,'multiline':True]['text':' with failing op - net runs return false, without - true','line_number':1102,'multiline':False]['text':' with failing op - prof_dag handles invalid runs and returns empty stats,','line_number':1108,'multiline':False]['text':' without - returns stats for each op','line_number':1109,'multiline':False]['text':'test_error=','line_number':1118,'multiline':True]['text':'test_error=','line_number':1119,'multiline':True]['text':' namespace caffe2','line_number':1122,'multiline':False]