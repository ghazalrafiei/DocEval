['text':' It's MSVC, so we just have to guess ... and allow an override','line_number':23,'multiline':False]['text':' String used to separate chunk id from the blob name when storing in DB','line_number':36,'multiline':False]['text':'*
 * Serializes the given blob, if possible. Note that this serialization uses
 * the registration mechanism and one has to implement specific serialization
 * approaches for specific classes. Acceptor should take care of writing data
 * to the actual storage.
 ','line_number':39,'multiline':True]['text':'*
 * @brief Convenience function to serialize a blob to a string.
 *
 * This is a convenience function to serialize small Blobs that produce
 * manageable serialized strings. To serialize big blobs such as
 * large sparse tensors, use the fully-functional interface in
 * blob_serializer_base.h.
 *
 * NOTE: this function doesn't do chunking and might break with big tensors.
 ','line_number':61,'multiline':True]['text':'*
 * Deserializes from a string containing either BlobProto or TensorProto. If
 * the deserialization fails, the content in the blob should no longer be
 * trusted.
 ','line_number':73,'multiline':True]['text':'
 * Get an empty Tensor from the TensorProto given the meta data in proto (data
 * type and size of the Tensor) without actually filling in the data.
 *
 * We need this function because we want to construct a fully initialized Tensor
 * in the beginning instead of keeping partially initialized Tensor around the
 * process. Consider the case when we have a Tensor that is split into multiple
 * protos during serialization, in deserialization, we have to fill the Tensor
 * in multiple calls to Deserialize, therefore we need to create a new Tensor
 * with the correct size and data type before the call to Deserialize, because
 * otherwise we will have to check whether the function call is the first call
 * to initialize the underlying Tensor, which makes the function stateful and
 * complicated.
 *
 * The legacy code get away with this problem by passing in a partially
 * initialized Tensor and use Resize and mutable_data to set the correct size,
 * data type and allocate memory for the Tensor, so the state is encoded in
 * these function calls. e.g. mutable_data will allocate memory on the first
 * call and it will return a pointer to the allocated memory on later calls.
 ','line_number':81,'multiline':True]['text':'*
 * @brief TensorSerializer is the serializer for Tensors.
 *
 * TensorSerializer takes in a blob that contains a Tensor, and serializes it
 * into a TensorProto protocol buffer.
 ','line_number':103,'multiline':True]['text':'*
   * Serializes a Blob. Note that this blob has to contain Tensor,
   * otherwise this function produces a fatal error.
   ','line_number':113,'multiline':True]['text':' A utility function to store the device context detauls.','line_number':154,'multiline':False]['text':'*
 * @brief TensorDeserializer is the deserializer for Tensors.
 *
 * The device that the deserialized Tensor will live under is determined by the
 * device_detail field. If you want to specify the device of the deserialized
 * tensor, change the TensorProto's corresponding fields before calling
 * Deserialize.
 ','line_number':160,'multiline':True]['text':' There are cases when a Tensor is split into multiple protos and
   * we have to call Deserialize multiple times to get the complete deserialized
   * Tensor, each call will fill part of the Tensor given the segment begin and
   * end information in proto, therefore we have to pass in the Tensor pointer
   * rather than create a new Tensor every time.
   *
   * Precondition: Tensor must be initialized
   ','line_number':172,'multiline':True]['text':' Deserialize the proto and return a new Tensor
   * This is a utility function that combines EmptyTensorFromProto and
   * Deserialize(const TensorProto&, Tensor*);
   ','line_number':182,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':189,'multiline':False]['text':' Implementations','line_number':190,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':191,'multiline':False]['text':' Make space for new elements to be copied to the end of the repeated field.','line_number':194,'multiline':False]['text':' The new space is not guaranteed to be initialized.','line_number':195,'multiline':False]['text':' We unfortunately do still need to support old protobuf versions in some','line_number':204,'multiline':False]['text':' build configurations.','line_number':205,'multiline':False]['text':' Make sure that we finish the copy into the protobuf.','line_number':225,'multiline':False]['text':' TODO: we are having one unnecessary copy here if the context is already','line_number':235,'multiline':False]['text':' CPUContext. Remove it if it is performance critical.','line_number':236,'multiline':False]['text':' TODO: we are having one unnecessary copy here if the context is already','line_number':268,'multiline':False]['text':' CPUContext. Remove it if it is performance critical.','line_number':269,'multiline':False]['text':' namespace detail','line_number':278,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':280,'multiline':False]['text':' Serialization Helpers','line_number':281,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':282,'multiline':False]['text':' Converts MessageLite to string while also checking that SerializeAsString','line_number':284,'multiline':False]['text':' succeeds. Pass description of class/function of the call if you'd','line_number':285,'multiline':False]['text':' like it appended to the error message.','line_number':286,'multiline':False]['text':' Convert BlobProto to string with success checks.','line_number':291,'multiline':False]['text':' namespace caffe2','line_number':305,'multiline':False]['text':' CAFFE2_CORE_BLOB_SERIALIZATION_H_','line_number':307,'multiline':False]