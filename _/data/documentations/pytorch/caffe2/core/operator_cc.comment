['text':' Suppress unused function warning on mobile.','line_number':90,'multiline':False]['text':' if the first input is a tensor list, we get input tensors by indexing','line_number':96,'multiline':False]['text':' into that list. currently, this means that only tensors from that list','line_number':97,'multiline':False]['text':' are accessible as inputs. any hypothetical input tensors that come after','line_number':98,'multiline':False]['text':' the list are not accessible.','line_number':99,'multiline':False]['text':' it's not a tensor list. Count the number of tensor inputs and return them.','line_number':102,'multiline':False]['text':' namespace','line_number':117,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':119,'multiline':False]['text':' NOLINTNEXTLINE(performance-move-const-arg)','line_number':124,'multiline':False]['text':' first, check with OpSchema if the operator is legal.','line_number':191,'multiline':False]['text':' We would like to recommend every op to register its schema, so if there','line_number':199,'multiline':False]['text':' is not one, we print a LOG_ERROR. But we will still allow the operator','line_number':200,'multiline':False]['text':' to be constructed.','line_number':201,'multiline':False]['text':' second try engines specified in the operator_def and preferred engines','line_number':207,'multiline':False]['text':' If the above fails, we will just return the normal case with the','line_number':244,'multiline':False]['text':' default implementation.','line_number':245,'multiline':False]['text':' Lastly, if the engine does not work here, try using the default engine.','line_number':260,'multiline':False]['text':' namespace','line_number':276,'multiline':False]['text':' Calling the registry function to get the actual registry pointer.','line_number':361,'multiline':False]['text':' Copy device option, engine, and arguments if needed.','line_number':426,'multiline':False]['text':' Copy engine if needed.','line_number':432,'multiline':False]['text':' Copy arguments if needed.','line_number':438,'multiline':False]['text':' VLOG for debugging purposes.','line_number':446,'multiline':False]['text':' Check if the gradient computation has returned the right size for the','line_number':450,'multiline':False]['text':' gradient vector.','line_number':451,'multiline':False]['text':' The gradient should either be (1) not set, or (2) dense, or (3) sparse,','line_number':455,'multiline':False]['text':' but cannot be both dense and sparse.','line_number':456,'multiline':False]['text':' Hack to work with auto split gradients','line_number':477,'multiline':False]['text':' Hack to ignore queues','line_number':483,'multiline':False]['text':' Special handling for Sum as it used with the autosplits, which have','line_number':510,'multiline':False]['text':' different naming convention. Assuming that all sum inputs must be of','line_number':511,'multiline':False]['text':' same size, we can infer their shapes.','line_number':512,'multiline':False]['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':515,'multiline':False]['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':525,'multiline':False]['text':' Match later with the output','line_number':531,'multiline':False]['text':' Special handling for gradient ops. We can assume gradients','line_number':562,'multiline':False]['text':' are of same size as the corresponding variables. This is bit','line_number':563,'multiline':False]['text':' ugly to base on string matching, but we don't have the connection','line_number':564,'multiline':False]['text':' between variable and its gradient specified','line_number':565,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':572,'multiline':False]['text':' Reshape stores the original input shape to its second output','line_number':586,'multiline':False]['text':' blob. We need this for gradient reshape.','line_number':587,'multiline':False]['text':' Split needs the input sizes from Concat.','line_number':590,'multiline':False]['text':' net.ops','line_number':623,'multiline':False]['text':' nets','line_number':631,'multiline':False]['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':633,'multiline':False]['text':' This is dnnlowp tensor and we cant deal with it using regular path','line_number':663,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':667,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':685,'multiline':False]['text':' Populate shapes from workplace','line_number':702,'multiline':False]['text':' Populate shapes from known blobs','line_number':716,'multiline':False]['text':' Populate shapes from known blobs','line_number':733,'multiline':False]['text':' Check from op schema if this op is used for crossing devices','line_number':760,'multiline':False]['text':' CAFFE2_NO_OPERATOR_SCHEMA','line_number':767,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':772,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':776,'multiline':False]['text':' Check that inputs have same device type as the op','line_number':787,'multiline':False]['text':' CPU operators','line_number':800,'multiline':False]['text':' CUDA operators','line_number':804,'multiline':False]['text':' HIP operators','line_number':809,'multiline':False]['text':' namespace caffe2','line_number':909,'multiline':False]