['text':'*
 * Copyright 2016 Facebook
 * @author Tudor Bosman (tudorb@fb.com)
 ','line_number':1,'multiline':True]['text':' Copied from folly/ScopeGuard.h','line_number':16,'multiline':False]['text':' If the above line attempts a copy and the copy throws, other is','line_number':68,'multiline':False]['text':' left owning the cleanup action and will execute it (or not) depending','line_number':69,'multiline':False]['text':' on the value of other.dismissed_. The following lines only execute','line_number':70,'multiline':False]['text':' if the move/copy succeeded, in which case *this assumes ownership of','line_number':71,'multiline':False]['text':' the cleanup action and dismisses other.','line_number':72,'multiline':False]['text':' namespace detail','line_number':110,'multiline':False]['text':'*
 * ScopeGuard is a general implementation of the "Initialization is
 * Resource Acquisition" idiom.  Basically, it guarantees that a function
 * is executed upon leaving the current scope unless otherwise told.
 *
 * The MakeGuard() function is used to create a new ScopeGuard object.
 * It can be instantiated with a lambda function, a std::function<void()>,
 * a functor, or a void(*)() function pointer.
 *
 *
 * Usage example: Add a friend to memory iff it is also added to the db.
 *
 * void User::addFriend(User& newFriend) {
 *   // add the friend to memory
 *   friends_.push_back(&newFriend);
 *
 *   // If the db insertion that follows fails, we should
 *   // remove it from memory.
 *   auto guard = MakeGuard([&] { friends_.pop_back(); });
 *
 *   // this will throw an exception upon error, which
 *   // makes the ScopeGuard execute UserCont::pop_back()
 *   // once the Guard's destructor is called.
 *   db_->addFriend(GetName(), newFriend.GetName());
 *
 *   // an exception was not thrown, so don't execute
 *   // the Guard.
 *   guard.dismiss();
 * }
 *
 * Examine ScopeGuardTest.cpp for some more sample usage.
 *
 * Stolen from:
 *   Andrei's and Petru Marginean's CUJ article:
 *     http://drdobbs.com/184403758
 *   and the loki library:
 *     http://loki-lib.sourceforge.net/index.php?n=Idioms.ScopeGuardPointer
 *   and triendl.kj article:
 *     http://www.codeproject.com/KB/cpp/scope_guard.aspx
 ','line_number':112,'multiline':True]['text':' namespaces','line_number':158,'multiline':False]