['text':' ExceptionWrapper holds an exception. If exception pointers are being used,','line_number':30,'multiline':False]['text':' it'll hold the original exception pointer otherwise just the message.','line_number':31,'multiline':False]['text':' ExceptionWrapperTerminate terminates the program with the specified','line_number':66,'multiline':False]['text':' exception. This preserves the exception ptr and ExceptionTracer will','line_number':67,'multiline':False]['text':' correctly grab it on exit.','line_number':68,'multiline':False]['text':' ScopeExitGuard runs the provided function when it's destructed.','line_number':82,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':86,'multiline':False]['text':' in order to keep the "override existing nets" on the top-level workflow,','line_number':97,'multiline':False]['text':' we need to mark the nets that already exist so that we can override them','line_number':98,'multiline':False]['text':' exactly once.','line_number':99,'multiline':False]['text':' Returns a function that returns `true` if we should continue','line_number':105,'multiline':False]['text':' iterating, given the current iteration count.','line_number':106,'multiline':False]['text':'ws','line_number':108,'multiline':True]['text':' control by iteration','line_number':116,'multiline':False]['text':' control by signal blob','line_number':122,'multiline':False]['text':'i','line_number':129,'multiline':True]['text':' if the blob doesn't exist or is not initialized, return false','line_number':134,'multiline':False]['text':' not exist or uninitialized','line_number':138,'multiline':False]['text':'*
 * Injects a blob named 'GLOBAL_WORKSPACE_ID' for each workspace, only if
 * another blob named 'NODE_ID' is present. 'NODE_ID' blob can be used in a
 * distributed run and in this case 'GLOBAL_WORKSPACE_ID' can be used across
 * machines for other purposes (e.g. to support model parallelism). Essentially,
 * 'GLOBAL_WORKSPACE_ID' is an identifier for a workspace that is unique across
 * all 'NODE_ID's.
 ','line_number':147,'multiline':True]['text':'*
 * Controls compilation and runtime cloning of execution steps.
 *
 * If step.create_workspace=False, this wrapper will compile the execution step
 * and its children once, and calls to ExecutionStepWrapper::compiled() will
 * always return the same compiled step.
 * If step.create_workspace=True, no compilation is done at creation time.
 * Instead, a new CompiledExecutionStep is created for every compiled() call.
 *
 * CompiledExecutionStep owns its Workspace, and the lifetime of the
 * compiled step along with its workspace will be tied to the lifetime of
 * the `CompileGuard` object returned by compiled().
 *
 * ExecuteStepRecursive will call call compiled() once before the given
 * execution step is run and keep it alive for the length of its execution.
 * This means that, for steps with create_workspace=true, a child workspace
 * will be created every time the step is executed, and destroyed right
 * afterwards.
 ','line_number':186,'multiline':True]['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':209,'multiline':False]['text':' If this execution step does not create a child workspace,','line_number':218,'multiline':False]['text':' then just eagerly-compile it. This will trigger CreateNet on the','line_number':219,'multiline':False]['text':' nets used by this execution step.','line_number':220,'multiline':False]['text':' NOLINTNEXTLINE(modernize-use-equals-default,cppcoreguidelines-pro-type-member-init,clang-analyzer-optin.cplusplus.UninitializedObject)','line_number':242,'multiline':False]['text':' NOLINTNEXTLINE(modernize-make-unique)','line_number':287,'multiline':False]['text':' needsOverride does not need synchronization because it is only','line_number':306,'multiline':False]['text':' relevant for non-dynamic executions steps. This is due to the fact','line_number':307,'multiline':False]['text':' that concurrent nets run on child workspaces, that do not needOverride.','line_number':308,'multiline':False]['text':' Cancel attempts to cancel the running nets in a best effort way. If the net','line_number':381,'multiline':False]['text':' or op type does IO and doesn't implement cancellation it may not be','line_number':382,'multiline':False]['text':' possible to cancel leading to execution getting stuck on error.','line_number':383,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':399,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':401,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':403,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':405,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':408,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':410,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':412,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':414,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':416,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':418,'multiline':False]['text':' protects first_exception_','line_number':424,'multiline':False]['text':' NOLINTNEXTLINE(modernize-make-unique)','line_number':435,'multiline':False]['text':' protects done','line_number':560,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':570,'multiline':False]['text':' In complex plans other threads might get stuck if another','line_number':583,'multiline':False]['text':' one fails. So we let exception to go out of thread which','line_number':584,'multiline':False]['text':' causes SIGABRT. In local setup one might use this flag','line_number':585,'multiline':False]['text':' in order to use Python debugger after a failure','line_number':586,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':603,'multiline':False]['text':' If we get an exception, try to wait for all threads to stop','line_number':606,'multiline':False]['text':' gracefully.','line_number':607,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-throw-keyword-missing)','line_number':618,'multiline':False]['text':' concurrent substeps should be careful about setting should_stop_blob','line_number':632,'multiline':False]['text':' If this ExecutionStep just contains nets, we can directly run it.','line_number':638,'multiline':False]['text':' namespace','line_number':657,'multiline':False]['text':' We will do nothing, but the plan is still legal so we will return true.','line_number':666,'multiline':False]['text':' namespace caffe2','line_number':703,'multiline':False]