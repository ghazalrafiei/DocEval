['text':'===- nomnigraph/Graph/Graph.h - Basic graph implementation ----*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This file defines a basic graph API for generic and flexible use with','line_number':3,'multiline':False]['text':' graph algorithms.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':6,'multiline':False]['text':' Template types:','line_number':34,'multiline':False]['text':'   T   : Data stored within a node.','line_number':35,'multiline':False]['text':'   U...: Data stored within an edge. When this type is not','line_number':36,'multiline':False]['text':'         specified, an empty StorageType is used. If it is','line_number':37,'multiline':False]['text':'         specified, only a single type should be given (as supported','line_number':38,'multiline':False]['text':'         by the underlying StorageType class).','line_number':39,'multiline':False]['text':' \brief Edge within a Graph.','line_number':41,'multiline':False]['text':' \brief Node within a Graph.','line_number':75,'multiline':False]['text':'/ \brief Create a node with data.','line_number':82,'multiline':False]['text':'/ \brief Create an empty node.','line_number':86,'multiline':False]['text':'/ \brief Adds an edge by reference to known in-edges.','line_number':92,'multiline':False]['text':'/ \p e A reference to an edge that will be added as an in-edge.','line_number':93,'multiline':False]['text':'/ \brief Adds an edge by reference to known out-edges.','line_number':98,'multiline':False]['text':'/ \p e A reference to an edge that will be added as an out-edge.','line_number':99,'multiline':False]['text':'/ \brief Removes an edge by reference to known in-edges.','line_number':104,'multiline':False]['text':'/ \p e A reference to an edge that will be removed from in-edges.','line_number':105,'multiline':False]['text':'/ \brief Removes an edge by reference to known out-edges.','line_number':110,'multiline':False]['text':'/ \p e A reference to an edge that will be removed from out-edges.','line_number':111,'multiline':False]['text':'/ \brief Effectively a constant reference to a graph.','line_number':146,'multiline':False]['text':'/','line_number':147,'multiline':False]['text':'/ \note A Subgraph could actually point to an entire Graph.','line_number':148,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'/ Subgraphs can only contain references to nodes/edges in a Graph.','line_number':150,'multiline':False]['text':'/ They are technically mutable, but this should be viewed as a construction','line_number':151,'multiline':False]['text':'/ helper rather than a fact to be exploited.  There are no deleters,','line_number':152,'multiline':False]['text':'/ for example.','line_number':153,'multiline':False]['text':'/','line_number':154,'multiline':False]['text':'/ \brief A simple graph implementation','line_number':218,'multiline':False]['text':'/','line_number':219,'multiline':False]['text':'/ Everything is owned by the graph to simplify storage concerns.','line_number':220,'multiline':False]['text':'/','line_number':221,'multiline':False]['text':'/ \brief Creates a node and retains ownership of it.','line_number':237,'multiline':False]['text':'/ \p data An rvalue of the data being held in the node.','line_number':238,'multiline':False]['text':'/ \return A reference to the node created.','line_number':239,'multiline':False]['text':' Note:','line_number':253,'multiline':False]['text':' The move functions below are unsafe.  Use them with caution','line_number':254,'multiline':False]['text':' and be sure to call isValid() after each use.','line_number':255,'multiline':False]['text':' Move a node from this graph to the destGraph','line_number':257,'multiline':False]['text':' Move an edge from this graph to the destGraph','line_number':271,'multiline':False]['text':' Move entire subgraph to destGraph.','line_number':285,'multiline':False]['text':' Be sure to delete in/out edges from this graph first.','line_number':286,'multiline':False]['text':' Copy to check that all nodes and edges are matched','line_number':290,'multiline':False]['text':' Validates the graph.  Returns true if the graph is valid','line_number':315,'multiline':False]['text':' and false if any node or edge referenced in the graph','line_number':316,'multiline':False]['text':' is not actually present in the graph.','line_number':317,'multiline':False]['text':' Check validity of nodeRefs_','line_number':332,'multiline':False]['text':' Swap two nodes.','line_number':351,'multiline':False]['text':' Any edge V -> N1 becomes V -> N2, and N1 -> V becomes N2 -> V.','line_number':352,'multiline':False]['text':' First rectify the edges','line_number':354,'multiline':False]['text':' Then simply copy the edge vectors around','line_number':367,'multiline':False]['text':'/ \brief Replace a node in the graph with another node.','line_number':379,'multiline':False]['text':'/ \note The node replaced simply has its edges cut, but it not','line_number':380,'multiline':False]['text':'/ deleted from the graph.  Call Graph::deleteNode to delete it.','line_number':381,'multiline':False]['text':'/ \p oldNode A node to be replaced in the graph.','line_number':382,'multiline':False]['text':'/ \p newNode The node that inherit the old node's in-edges and out-edges.','line_number':383,'multiline':False]['text':' All out-edges oldNode -> V will be replaced with newNode -> V','line_number':389,'multiline':False]['text':' All in-edges V -> oldNode  will be replaced with V -> newNode','line_number':400,'multiline':False]['text':'/ \brief Creates a directed edge and retains ownership of it.','line_number':411,'multiline':False]['text':'/ \p tail The node that will have this edge as an out-edge.','line_number':412,'multiline':False]['text':'/ \p head The node that will have this edge as an in-edge.','line_number':413,'multiline':False]['text':'/ \return A reference to the edge created.','line_number':414,'multiline':False]['text':'/ \brief Get a reference to the edge between two nodes if it exists. Returns','line_number':425,'multiline':False]['text':'/ nullptr if the edge does not exist.','line_number':426,'multiline':False]['text':'/ \brief Returns true if there is an edge between the given two nodes.','line_number':436,'multiline':False]['text':'/ \brief Get a reference to the edge between two nodes if it exists.','line_number':450,'multiline':False]['text':'/ note: will fail assertion if the edge does not exist.','line_number':451,'multiline':False]['text':'/ \brief Deletes a node from the graph.','line_number':458,'multiline':False]['text':'/ \param n A reference to the node.','line_number':459,'multiline':False]['text':' Delete all nodes in the set.','line_number':483,'multiline':False]['text':'/ \brief Deletes a edge from the graph.','line_number':494,'multiline':False]['text':'/ \p e A reference to the edge.','line_number':495,'multiline':False]['text':' namespace nom','line_number':559,'multiline':False]['text':' NOM_GRAPH_GRAPH_H','line_number':561,'multiline':False]