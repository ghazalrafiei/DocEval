['text':'/ \brief Topological sort using DFS.','line_number':11,'multiline':False]['text':'/','line_number':12,'multiline':False]['text':'/ This algorithm takes a Graph object and returns node references in','line_number':13,'multiline':False]['text':'/ topological order.','line_number':14,'multiline':False]['text':'/ \brief performs DFS from given node.','line_number':22,'multiline':False]['text':'  Each node and edge is visited no more than once.','line_number':23,'multiline':False]['text':'  Visited nodes are pushed into result vector after all children has been','line_number':24,'multiline':False]['text':'  processed. Return true if cycle is detected, otherwise false.','line_number':25,'multiline':False]['text':' mark as visiting','line_number':30,'multiline':False]['text':' find a node being visited, cycle detected','line_number':40,'multiline':False]['text':' ignore visited node','line_number':43,'multiline':False]['text':' mark as visited','line_number':46,'multiline':False]['text':'// \brief A function wrapper to infer the graph template parameters.','line_number':74,'multiline':False]['text':'/ TODO change this to const GraphT& g','line_number':75,'multiline':False]['text':' namespace algorithm','line_number':82,'multiline':False]['text':' namespace nom','line_number':83,'multiline':False]['text':' NOM_GRAPH_TOPO_SORT_H','line_number':84,'multiline':False]