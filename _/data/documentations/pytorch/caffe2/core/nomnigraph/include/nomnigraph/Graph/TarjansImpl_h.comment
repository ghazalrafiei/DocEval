['text':'/ \brief Tarjans algorithm implementation.','line_number':28,'multiline':False]['text':'/','line_number':29,'multiline':False]['text':'/ See details on how the algorithm works here:','line_number':30,'multiline':False]['text':'/ https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ The algorithm works by annotating nodes, but we want to be able to','line_number':33,'multiline':False]['text':'/ handle generic graphs.  Thus, we wrap the input graph with nodes that','line_number':34,'multiline':False]['text':'/ contain data composed of references to the original graph (for later','line_number':35,'multiline':False]['text':'/ recovery) and the data required for the algorithm (see NodeWrapper).','line_number':36,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ We then run the algorithm and return a reverse-topologically sorted','line_number':38,'multiline':False]['text':'/ vector of strongly connect components in the form of Subgraphs on the Graph.','line_number':39,'multiline':False]['text':'/','line_number':40,'multiline':False]['text':'/ \note Head/Tail is used in reverse in Tarjan's early papers.','line_number':41,'multiline':False]['text':'/ \bug Edges not included in returned subgraphs.','line_number':42,'multiline':False]['text':'/','line_number':43,'multiline':False]['text':'/ \brief Constructor wraps the input graph with an annotated graph','line_number':59,'multiline':False]['text':'/        set up with the datastructures needed for the algorithm.','line_number':60,'multiline':False]['text':'/ \p g The graph Tarjan's will be run on.','line_number':61,'multiline':False]['text':' Wrap Graph with node labels','line_number':63,'multiline':False]['text':'/ \brief Helper function for finding strongly connected components.','line_number':84,'multiline':False]['text':'/ \p n A reference to a node within the wrapped graph.','line_number':85,'multiline':False]['text':' Check if we've considered this node before.','line_number':96,'multiline':False]['text':' Check if newNode is in the SCC.','line_number':101,'multiline':False]['text':' If our node is a root node, pop it from the stack (we've found an SCC)','line_number':108,'multiline':False]['text':' Add all the edges into the SCC.','line_number':120,'multiline':False]['text':' TODO include edges in the SCC in a smarter way.','line_number':121,'multiline':False]['text':'/ \brief Helper function for recovering a valid subgraph output.','line_number':135,'multiline':False]['text':'/ \p wrappedS A wrapped subgraph.','line_number':136,'multiline':False]['text':'/ \return A subgraph of the original input graph.','line_number':137,'multiline':False]['text':'/','line_number':138,'multiline':False]['text':'/ \brief A function wrapper to infer the graph template parameters.','line_number':167,'multiline':False]['text':' namespace algorithm','line_number':174,'multiline':False]['text':' namespace nom','line_number':175,'multiline':False]['text':' NOM_GRAPH_TARJANSIMPL_H','line_number':177,'multiline':False]