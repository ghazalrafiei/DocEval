['text':' Convert a graph (with optional subgraphs cluster) to dot.','line_number':37,'multiline':False]['text':' Convert a subgraph to dot.','line_number':60,'multiline':False]['text':'*
   * NOTE No subgraph support
   * Converts given graph into DOT string w/operator input-order preserved
   * Assumes graph is acyclic, nodes are unique_ptr
   * (1) Get & print input nodes (nodes w/o parents)
   *     - Node: <p0>[shape=record, label="{{Data In}|{<p0>*}}"]
   * (2) Find operators w/BFS from input nodes
   * (3) Print operator records & incoming edges
   *     - Node: op_ptr[shape=record, label="{{<i0>*|<i1>*|...}|{op}|{<o0>*}"]
   *     - Edge: <parent_node_ptr>:<ref>:s -> <this_node_ptr>:<ref>:n
   ','line_number':71,'multiline':True]['text':' Get input nodes (nodes w/o parents)','line_number':86,'multiline':False]['text':' Touched nodes for BFS','line_number':88,'multiline':False]['text':' Init w/parentless nodes','line_number':89,'multiline':False]['text':' Add input node to dot string','line_number':92,'multiline':False]['text':' Track input node','line_number':100,'multiline':False]['text':' BFS to get operator nodes','line_number':106,'multiline':False]['text':' Enqueue child iff not touched yet','line_number':111,'multiline':False]['text':' "odd" ==> operator','line_number':116,'multiline':False]['text':' Finalize output','line_number':125,'multiline':False]['text':'*
   * Get DOT string record of given operator and DOT string of its input edges
   * @param  op          operator to parse
   * @param  nodePrinter node attribute extractor
   * @return             '\n' sep string of operator & input edges
   ','line_number':134,'multiline':True]['text':' Operator node record','line_number':142,'multiline':False]['text':' Input refs','line_number':145,'multiline':False]['text':' Draw edge between prev. op output to cur. op input','line_number':148,'multiline':False]['text':' Node @ top of subgraph','line_number':151,'multiline':False]['text':' Node between operators','line_number':153,'multiline':False]['text':' Add input to operator record','line_number':160,'multiline':False]['text':' Extract operator name','line_number':168,'multiline':False]['text':' Output refs','line_number':175,'multiline':False]['text':' Append record to output string','line_number':186,'multiline':False]['text':'*
   * Prints DOT string of given operator subgraph
   * @param  ops         operators in a given subgraph
   * @param  nodePrinter node attribute extractor
   * @return             DOT string that renders operators subgraph
   ','line_number':191,'multiline':True]['text':' Generate dot string for a node.','line_number':206,'multiline':False]['text':' dot doesn't like hex','line_number':211,'multiline':False]['text':' Convert a graph to dot string.','line_number':231,'multiline':False]['text':' Convert a graph to dot string and annotate subgraph clusters.','line_number':242,'multiline':False]['text':' Convert a subgraph to dot string.','line_number':254,'multiline':False]['text':' namespace converters','line_number':275,'multiline':False]['text':' namespace nom','line_number':276,'multiline':False]['text':' NOM_CONVERTERS_DOT_H','line_number':278,'multiline':False]