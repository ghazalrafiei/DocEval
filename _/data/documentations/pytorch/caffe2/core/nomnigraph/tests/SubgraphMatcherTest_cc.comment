['text':' Have just one TestMatchGraph in the tests to make it less verbose to create','line_number':20,'multiline':False]['text':' the match graphs.','line_number':21,'multiline':False]['text':' Call reset before creating a new TestMatchGraph.','line_number':23,'multiline':False]['text':' Node matches a criteria (string) if the data string is the same as the','line_number':28,'multiline':False]['text':' criteria. Special case: "*" will match any thing.','line_number':29,'multiline':False]['text':' Helper methods to make it less verbose to create match graphs.','line_number':40,'multiline':False]['text':' Attempts to create a realistic dataflow graph that shows a fuse procedure.','line_number':65,'multiline':False]['text':' Realistic data flow test graph.','line_number':77,'multiline':False]['text':'


                          +---------------+
                          |               |
                          |  +---------+  |  +---------+
    +---------------------+  | input_A |  |  | input_B |
    |                        +---------+  |  +---------+
    |                          |          |    |
    |                          |          |    |
    |                          v          v    v
  +---------++---------+     +-------------------------+     +--------+
  | input_C || input_D | --> |           opC           | --> | dataC2 |
  +---------++---------+     +-------------------------+     +--------+
                               |
                               |
                               v
                             +---------+
                             |  dataC  | -+
                             +---------+  |
                               |          |
                               |          |
                               v          |
                             +---------+  |
                             |   opB   | <+
                             +---------+
                               |
                               |
                               v
                             +---------+
                             |  dataB  |
                             +---------+
                               |
                               |
                               v
                             +---------+
                             |   opF   |
                             +---------+
                               |
                               |
                               v
                             +---------+
                             |  dataF  |
                             +---------+
                               |
                               |
                               v
             +---------+     +---------+
             |  dataI  | --> |   opG   |
             +---------+     +---------+
                               |
                               |
                               v
                             +---------+
                             | dataOut |
                             +---------+
  ','line_number':78,'multiline':True]['text':' There are 2 edges','line_number':149,'multiline':False]['text':' Use nom::converters::convertToDotString(&graph, TestGraphNodePrinter)','line_number':171,'multiline':False]['text':' to visualize the graph.','line_number':172,'multiline':False]['text':' namespace matcher','line_number':224,'multiline':False]['text':' namespace nom','line_number':226,'multiline':False]['text':' Simple test cases for node matching criteria.','line_number':230,'multiline':False]['text':' Test subtree matching with a simple tree graph.','line_number':243,'multiline':False]['text':'       N1
         /     \
      N2         N5
    /    \     /    \
  N3     N4   N6   N7
  ','line_number':260,'multiline':True]['text':' Accepts non terminal node','line_number':286,'multiline':False]['text':' Test subtree matching in which * (repeated) matching of children is allowed.','line_number':297,'multiline':False]['text':' clang-format off','line_number':327,'multiline':False]['text':' Failes because exepected 4 matches of n5 but found 3.','line_number':343,'multiline':False]['text':' Fails because there are unmatched edges.','line_number':369,'multiline':False]['text':' Fails because the count is wrong; we have 2 edges to node N4 while','line_number':379,'multiline':False]['text':' the pattern expects only 1.','line_number':380,'multiline':False]['text':' clang-format on','line_number':382,'multiline':False]['text':' clang-format off','line_number':388,'multiline':False]['text':' clang-format on','line_number':400,'multiline':False]['text':'       N1
           /     \
        N2         N3
            \   /
             N4
             |
             N5
    ','line_number':416,'multiline':True]['text':'       N1
           /    \
        N2       N3
        /          \
       N4A        N4B
          \     /
            N5
    ','line_number':444,'multiline':True]['text':' This should fail because n4A and n4B are not the same node.','line_number':453,'multiline':False]['text':' clang-format off','line_number':461,'multiline':False]['text':' clang-format on','line_number':467,'multiline':False]['text':' clang-format off','line_number':495,'multiline':False]['text':' clang-format on','line_number':507,'multiline':False]['text':'       N1
         /     \
      N2         N3
          \   /
           N4
           |
           N5
  ','line_number':508,'multiline':True]['text':' Look for the diamond pattern in a random large graph.','line_number':517,'multiline':False]['text':' Here we create a test graph and then randomly embed the above','line_number':521,'multiline':False]['text':' pattern into the graph repeatedly (numPatterns times).','line_number':522,'multiline':False]['text':' The actual number of match will be less than numPatterns because the','line_number':523,'multiline':False]['text':' embedded patterns can overlap which become unmatched subgraphs.','line_number':524,'multiline':False]['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':537,'multiline':False]['text':' Now the nodes are:','line_number':592,'multiline':False]['text':' - NumInputs input nodes','line_number':593,'multiline':False]['text':' - dataI node','line_number':594,'multiline':False]['text':' - fused node','line_number':595,'multiline':False]['text':' - output node','line_number':596,'multiline':False]['text':' - dataC2 node','line_number':597,'multiline':False]['text':' Test that the graph is transformed as expected.','line_number':600,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':602,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':604,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':606,'multiline':False]['text':' Use nom::converters::convertToDotString(&graph.graph, TestGraphNodePrinter)','line_number':626,'multiline':False]['text':' to visualize. The transformed graph looks like This','line_number':627,'multiline':False]['text':'

                +---------++---------+
                | input_A || input_D |
                +---------++---------+
                  |          |
                  |          |
                  v          v
+---------+     +--------------------+     +---------+
| input_B | --> |      opFused       | <-- | input_C |
+---------+     +--------------------+     +---------+
                  |          ^
                  |          |
                  v          |
                +---------++---------+
                | dataOut ||  dataI  |
                +---------++---------+
   ','line_number':628,'multiline':True]