['text':'*********************************************************************************
 * Copyright (c) 2008-2012 The Khronos Group Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 *
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 *********************************************************************************','line_number':1,'multiline':True]['text':' $Revision: 11803 $ on $Date: 2010-06-25 10:02:12 -0700 (Fri, 25 Jun 2010) $ ','line_number':24,'multiline':True]['text':' Contains #defines for AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER below ','line_number':30,'multiline':True]['text':' scalar types  ','line_number':122,'multiline':True]['text':' Macro names and corresponding values defined by OpenCL ','line_number':136,'multiline':True]['text':' scalar types  ','line_number':213,'multiline':True]['text':' Macro names and corresponding values defined by OpenCL ','line_number':227,'multiline':True]['text':' Mirror types to GL types. Mirror types allow us to avoid deciding which 87s to load based on whether we are using GL or GLES here. ','line_number':311,'multiline':True]['text':'
 * Vector types 
 *
 *  Note:   OpenCL requires that all types be naturally aligned. 
 *          This means that vector types must be naturally aligned.
 *          For example, a vector of four floats must be aligned to
 *          a 16 byte boundary (calculated as 4 * the natural 4-byte 
 *          alignment of the float).  The alignment qualifiers here
 *          will only function properly if your compiler supports them
 *          and if you don't actively work to defeat them.  For example,
 *          in order for a cl_float4 to be 16 byte aligned in a struct,
 *          the start of the struct must itself be 16-byte aligned. 
 *
 *          Maintaining proper alignment is the user's responsibility.
 ','line_number':316,'multiline':True]['text':' Define basic vector types ','line_number':332,'multiline':True]['text':' may be omitted depending on compiler. AltiVec spec provides no way to detect whether the header is required. ','line_number':334,'multiline':True]['text':' Define alignment keys ','line_number':454,'multiline':True]['text':' Alignment keys neutered on windows because MSVC can't swallow function arguments with alignment requirements     ','line_number':458,'multiline':True]['text':' http://msdn.microsoft.com/en-us/library/373ak2y1%28VS.71%29.aspx                                                 ','line_number':459,'multiline':True]['text':' #include <crtdefs.h>                                                                                             ','line_number':460,'multiline':True]['text':' #define CL_ALIGNED(_x)          _CRT_ALIGN(_x)                                                                   ','line_number':461,'multiline':True]['text':' Indicate whether .xyzw, .s0123 and .hi.lo are supported ','line_number':468,'multiline':True]['text':' .xyzw and .s0123...{f|F} are supported ','line_number':470,'multiline':True]['text':' .hi and .lo are supported ','line_number':472,'multiline':True]['text':' Define cl_vector types ','line_number':476,'multiline':True]['text':' ---- cl_charn ---- ','line_number':478,'multiline':True]['text':' cl_char3 is identical in size, alignment and behavior to cl_char4. See section 6.1.5. ','line_number':508,'multiline':True]['text':' ---- cl_ucharn ---- ','line_number':553,'multiline':True]['text':' cl_uchar3 is identical in size, alignment and behavior to cl_uchar4. See section 6.1.5. ','line_number':583,'multiline':True]['text':' ---- cl_shortn ---- ','line_number':628,'multiline':True]['text':' cl_short3 is identical in size, alignment and behavior to cl_short4. See section 6.1.5. ','line_number':658,'multiline':True]['text':' ---- cl_ushortn ---- ','line_number':703,'multiline':True]['text':' cl_ushort3 is identical in size, alignment and behavior to cl_ushort4. See section 6.1.5. ','line_number':733,'multiline':True]['text':' ---- cl_intn ---- ','line_number':777,'multiline':True]['text':' cl_int3 is identical in size, alignment and behavior to cl_int4. See section 6.1.5. ','line_number':807,'multiline':True]['text':' ---- cl_uintn ---- ','line_number':852,'multiline':True]['text':' cl_uint3 is identical in size, alignment and behavior to cl_uint4. See section 6.1.5. ','line_number':882,'multiline':True]['text':' ---- cl_longn ---- ','line_number':926,'multiline':True]['text':' cl_long3 is identical in size, alignment and behavior to cl_long4. See section 6.1.5. ','line_number':956,'multiline':True]['text':' ---- cl_ulongn ---- ','line_number':1001,'multiline':True]['text':' cl_ulong3 is identical in size, alignment and behavior to cl_ulong4. See section 6.1.5. ','line_number':1031,'multiline':True]['text':' --- cl_floatn ---- ','line_number':1076,'multiline':True]['text':' cl_float3 is identical in size, alignment and behavior to cl_float4. See section 6.1.5. ','line_number':1107,'multiline':True]['text':' --- cl_doublen ---- ','line_number':1151,'multiline':True]['text':' cl_double3 is identical in size, alignment and behavior to cl_double4. See section 6.1.5. ','line_number':1182,'multiline':True]['text':' Macro to facilitate debugging 
 * Usage:
 *   Place CL_PROGRAM_STRING_DEBUG_INFO on the line before the first line of your source. 
 *   The first line ends with:   CL_PROGRAM_STRING_DEBUG_INFO \"
 *   Each line thereafter of OpenCL C source must end with: \n\
 *   The last line ends in ";
 *
 *   Example:
 *
 *   const char *my_program = CL_PROGRAM_STRING_DEBUG_INFO "\
 *   kernel void foo( int a, float * b )             \n\
 *   {                                               \n\
 *      // my comment                                \n\
 *      *b[ get_global_id(0)] = a;                   \n\
 *   }                                               \n\
 *   ";
 *
 * This should correctly set up the line, (column) and file information for your source 
 * string so you can do source level debugging.
 ','line_number':1226,'multiline':True]['text':' __CL_PLATFORM_H  ','line_number':1254,'multiline':True]