['text':'******************************************************************************
 * Copyright (c) 2008-2013 The Khronos Group Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 *
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 *****************************************************************************','line_number':1,'multiline':True]['text':'! \file
 *
 *   \brief C++ bindings for OpenCL 1.0 (rev 48), OpenCL 1.1 (rev 33) and 
 *       OpenCL 1.2 (rev 15)    
 *   \author Benedict R. Gaster, Laurent Morichetti and Lee Howes
 *   
 *   Additions and fixes from:
 *       Brian Cole, March 3rd 2010 and April 2012 
 *       Matt Gruenke, April 2012.
 *       Bruce Merry, February 2013.
 *       Tom Deakin and Simon McIntosh-Smith, July 2013
 *   
 *   \version 1.2.6
 *   \date August 2013
 *
 *   Optional extension support
 *
 *         cl
 *         cl_ext_device_fission
 *				#define USE_CL_DEVICE_FISSION
 ','line_number':24,'multiline':True]['text':'! \mainpage
 * \section intro Introduction
 * For many large applications C++ is the language of choice and so it seems
 * reasonable to define C++ bindings for OpenCL.
 *
 *
 * The interface is contained with a single C++ header file \em cl.hpp and all
 * definitions are contained within the namespace \em cl. There is no additional
 * requirement to include \em cl.h and to use either the C++ or original C
 * bindings it is enough to simply include \em cl.hpp.
 *
 * The bindings themselves are lightweight and correspond closely to the
 * underlying C API. Using the C++ bindings introduces no additional execution
 * overhead.
 *
 * For detail documentation on the bindings see:
 *
 * The OpenCL C++ Wrapper API 1.2 (revision 09)
 *  http://www.khronos.org/registry/cl/specs/opencl-cplusplus-1.2.pdf
 *
 * \section example Example
 *
 * The following example shows a general use case for the C++
 * bindings, including support for the optional exception feature and
 * also the supplied vector and string classes, see following sections for
 * descriptions of these features.
 *
 * \code
 * #define __CL_ENABLE_EXCEPTIONS
 * 
 * #if defined(__APPLE__) || defined(__MACOSX)
 * #include <OpenCL/cl.hpp>
 * #else
 * #include <CL/cl.hpp>
 * #endif
 * #include <cstdio>
 * #include <cstdlib>
 * #include <iostream>
 * 
 *  const char * helloStr  = "__kernel void "
 *                           "hello(void) "
 *                           "{ "
 *                           "  "
 *                           "} ";
 * 
 *  int
 *  main(void)
 *  {
 *     cl_int err = CL_SUCCESS;
 *     try {
 *
 *       std::vector<cl::Platform> platforms;
 *       cl::Platform::get(&platforms);
 *       if (platforms.size() == 0) {
 *           std::cout << "Platform size 0\n";
 *           return -1;
 *       }
 *
 *       cl_context_properties properties[] = 
 *          { CL_CONTEXT_PLATFORM, (cl_context_properties)(platforms[0])(), 0};
 *       cl::Context context(CL_DEVICE_TYPE_CPU, properties); 
 * 
 *       std::vector<cl::Device> devices = context.getInfo<CL_CONTEXT_DEVICES>();
 * 
 *       cl::Program::Sources source(1,
 *           std::make_pair(helloStr,strlen(helloStr)));
 *       cl::Program program_ = cl::Program(context, source);
 *       program_.build(devices);
 * 
 *       cl::Kernel kernel(program_, "hello", &err);
 * 
 *       cl::Event event;
 *       cl::CommandQueue queue(context, devices[0], 0, &err);
 *       queue.enqueueNDRangeKernel(
 *           kernel, 
 *           cl::NullRange, 
 *           cl::NDRange(4,4),
 *           cl::NullRange,
 *           NULL,
 *           &event); 
 * 
 *       event.wait();
 *     }
 *     catch (cl::Error err) {
 *        std::cerr 
 *           << "ERROR: "
 *           << err.what()
 *           << "("
 *           << err.err()
 *           << ")"
 *           << std::endl;
 *     }
 * 
 *    return EXIT_SUCCESS;
 *  }
 * 
 * \endcode
 *
 ','line_number':46,'multiline':True]['text':' #if defined(__CL_ENABLE_EXCEPTIONS)','line_number':157,'multiline':False]['text':' _WIN32','line_number':165,'multiline':False]['text':' ','line_number':167,'multiline':False]['text':' !__APPLE__','line_number':182,'multiline':False]['text':' To avoid accidentally taking ownership of core OpenCL types','line_number':184,'multiline':False]['text':' such as cl_kernel constructors are made explicit','line_number':185,'multiline':False]['text':' under OpenCL 1.2','line_number':186,'multiline':False]['text':' #if defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)','line_number':189,'multiline':False]['text':' #if defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)','line_number':191,'multiline':False]['text':' Define deprecated prefixes and suffixes to ensure compilation','line_number':193,'multiline':False]['text':' in case they are not pre-defined','line_number':194,'multiline':False]['text':' #if !defined(CL_EXT_PREFIX__VERSION_1_1_DEPRECATED)','line_number':197,'multiline':False]['text':' #if !defined(CL_EXT_PREFIX__VERSION_1_1_DEPRECATED)','line_number':200,'multiline':False]['text':'CL_CALLBACK','line_number':204,'multiline':False]['text':' linux','line_number':220,'multiline':False]['text':'! \namespace cl
 *
 * \brief The OpenCL C++ bindings are defined within this namespace.
 *
 ','line_number':225,'multiline':True]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':234,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':245,'multiline':False]['text':' #if defined(CL_VERSION_1_1)','line_number':255,'multiline':False]['text':'! \brief Exception class 
 * 
 *  This may be thrown by API functions when __CL_ENABLE_EXCEPTIONS is defined.
 ','line_number':265,'multiline':True]['text':'! \brief Create a new CL error exception for a given error code
     *  and corresponding message.
     * 
     *  \param err error code value.
     *
     *  \param errStr a descriptive string that must remain in scope until
     *                handling of the exception has concluded.  If set, it
     *                will be returned by what().
     ','line_number':275,'multiline':True]['text':'! \brief Get error string associated with exception
     *
     * \return A memory pointer to the error message string.
     ','line_number':289,'multiline':True]['text':'! \brief Get error code associated with exception
     *
     *  \return The error code.
     ','line_number':303,'multiline':True]['text':' __CL_ENABLE_EXCEPTIONS','line_number':313,'multiline':False]['text':' suppress unused variable warning','line_number':331,'multiline':False]['text':' __CL_ENABLE_EXCEPTIONS','line_number':334,'multiline':False]['text':'! \cond DOXYGEN_DETAIL','line_number':339,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':354,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':374,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':389,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':394,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':420,'multiline':False]['text':'*
 * CL 1.2 version that uses device fission.
 ','line_number':432,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':439,'multiline':False]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':441,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':453,'multiline':False]['text':' __CL_USER_OVERRIDE_ERROR_STRINGS','line_number':455,'multiline':False]['text':'! \endcond','line_number':456,'multiline':False]['text':'*
 * CL 1.2 marker and barrier commands
 ','line_number':458,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':464,'multiline':False]['text':'! \class string
 * \brief Simple string class, that provides a limited subset of std::string
 * functionality but avoids many of the issues that come with that class.
 
 *  \note Deprecated. Please use std::string as default or
 *  re-define the string class to match the std::string
 *  interface by defining STRING_CLASS
 ','line_number':470,'multiline':True]['text':'! \brief Constructs an empty string, allocating no memory.','line_number':484,'multiline':False]['text':'! \brief Constructs a string populated from an arbitrary value of
     *  specified size.
     * 
     *  An extra '\0' is added, in case none was contained in str.
     *
     *  \param str the initial value of the string instance.  Note that '\0'     
     *             characters receive no special treatment.  If NULL,
     *             the string is left empty, with a size of 0.
     *
     *  \param size the number of characters to copy from str.
     ','line_number':489,'multiline':True]['text':'! \brief Constructs a string populated from a null-terminated value.
     *
     *  \param str the null-terminated initial value of the string instance.
     *             If NULL, the string is left empty, with a size of 0.
     ','line_number':516,'multiline':True]['text':'! \brief Copies the value of another string to this one.
     *
     *  \param rhs the string to copy.
     *
     *  \returns a reference to the modified instance.
     ','line_number':579,'multiline':True]['text':'! \brief Constructs a string by copying the value of another instance.
     *
     *  \param rhs the string to copy.
     ','line_number':616,'multiline':True]['text':'! \brief Destructor - frees memory used to hold the current value.','line_number':627,'multiline':False]['text':'! \brief Queries the length of the string, excluding any added '\0's.','line_number':634,'multiline':False]['text':'! \brief Queries the length of the string, excluding any added '\0's.','line_number':637,'multiline':False]['text':'! \brief Returns a pointer to the private copy held by this instance,
     *  or "" if empty/unset.
     ','line_number':640,'multiline':True]['text':' #elif !defined(__USE_DEV_STRING) ','line_number':646,'multiline':False]['text':'! \class vector
 * \brief Fixed sized vector implementation that mirroring 
 *
 *  \note Deprecated. Please use std::vector as default or
 *  re-define the vector class to match the std::vector
 *  interface by defining VECTOR_CLASS

 *  \note Not recommended for use with custom objects as
 *  current implementation will construct N elements
 *
 * std::vector functionality.
 *  \brief Fixed sized vector compatible with std::vector.
 *
 *  \note
 *  This differs from std::vector<> not just in memory allocation,
 *  but also in terms of when members are constructed, destroyed,
 *  and assigned instead of being copy constructed.
 *
 *  \param T type of element contained in the vector.
 *
 *  \param N maximum size of the vector.
 ','line_number':657,'multiline':True]['text':'! \brief Constructs an empty vector with no memory allocated.','line_number':687,'multiline':False]['text':'! \brief Deallocates the vector's memory and destroys all of its elements.','line_number':692,'multiline':False]['text':'! \brief Returns the number of elements currently contained.','line_number':698,'multiline':False]['text':'! \brief Empties the vector of all elements.
     *  \note
     *  This does not deallocate memory but will invoke destructors
     *  on contained elements.
     ','line_number':704,'multiline':True]['text':'! \brief Appends an element after the last valid element.
     * Calling this on a vector that has reached capacity will throw an 
     * exception if exceptions are enabled.
     ','line_number':716,'multiline':True]['text':'! \brief Removes the last valid element from the vector.
     * Calling this on an empty vector will throw an exception
     * if exceptions are enabled.
     ','line_number':730,'multiline':True]['text':'! \brief Constructs with a value copied from another.
     *
     *  \param vec the vector to copy.
     ','line_number':744,'multiline':True]['text':'! \brief Constructs with a specified number of initial elements.
     *
     *  \param size number of initial elements.
     *
     *  \param val value of initial elements.
     ','line_number':756,'multiline':True]['text':'! \brief Overwrites the current content with that copied from another
     *         instance.
     *
     *  \param rhs vector to copy.
     *
     *  \returns a reference to this.
     ','line_number':770,'multiline':True]['text':'! \brief Tests equality against another instance.
     *
     *  \param vec the vector against which to compare.
     ','line_number':792,'multiline':True]['text':'! \brief Conversion operator to T*.','line_number':810,'multiline':False]['text':'! \brief Conversion operator to const T*.','line_number':813,'multiline':False]['text':'! \brief Tests whether this instance has any elements.','line_number':816,'multiline':False]['text':'! \brief Returns the maximum number of elements this instance can hold.','line_number':822,'multiline':False]['text':'! \brief Returns the maximum number of elements this instance can hold.','line_number':828,'multiline':False]['text':'! \brief Returns a reference to a given element.
     *
     *  \param index which element to access.     *
     *  \note
     *  The caller is responsible for ensuring index is >= 0 and < size().
     ','line_number':834,'multiline':True]['text':'! \brief Returns a const reference to a given element.
     *
     *  \param index which element to access.
     *
     *  \note
     *  The caller is responsible for ensuring index is >= 0 and < size().
     ','line_number':845,'multiline':True]['text':'! \brief Assigns elements of the vector based on a source iterator range.
     *
     *  \param start Beginning iterator of source range
     *  \param end Enditerator of source range
     *
     *  \note
     *  Will throw an exception if exceptions are enabled and size exceeded.
     ','line_number':857,'multiline':True]['text':'! \class iterator
     * \brief Const iterator class for vectors
     ','line_number':875,'multiline':True]['text':'*
         * Internal iterator constructor to capture reference
         * to the vector it iterates over rather than taking 
         * the vector by copy.
         ','line_number':884,'multiline':True]['text':' #if !defined(__USE_DEV_VECTOR) && !defined(__NO_STD_VECTOR)','line_number':1011,'multiline':False]['text':'
     * Compare and exchange primitives are needed for handling of defaults
    ','line_number':1022,'multiline':True]['text':' !_WIN32 || defined(__APPLE__) || defined(__MACOSX)','line_number':1034,'multiline':False]['text':' !_WIN32','line_number':1039,'multiline':False]['text':' namespace detail','line_number':1043,'multiline':False]['text':'! \brief class used to interface between C++ and
 *  OpenCL C calls that require arrays of size_t values, whose
 *  size is known statically.
 ','line_number':1046,'multiline':True]['text':'! \brief Initialize size_t to all 0s','line_number':1057,'multiline':False]['text':'! \brief Conversion operator to T*.','line_number':1075,'multiline':False]['text':'! \brief Conversion operator to const T*.','line_number':1078,'multiline':False]['text':' Generic getInfoHelper. The final parameter is used to guide overload','line_number':1084,'multiline':False]['text':' resolution: the actual parameter passed is an int, which makes this','line_number':1085,'multiline':False]['text':' a worse conversion sequence than a specialization that declares the','line_number':1086,'multiline':False]['text':' parameter as an int.','line_number':1087,'multiline':False]['text':' Specialized getInfoHelper for VECTOR_CLASS params','line_number':1094,'multiline':False]['text':' Specialization for reference-counted types. This depends on the
 * existence of Wrapper<T>::cl_type, and none of the other types having the
 * cl_type member. Note that simplify specifying the parameter as Wrapper<T>
 * does not work, because when using a derived type (e.g. Context) the generic
 * template will provide a better match.
 ','line_number':1114,'multiline':True]['text':' Specialized for getInfo<CL_PROGRAM_BINARIES>','line_number':1150,'multiline':False]['text':' Specialized GetInfoHelper for STRING_CLASS params','line_number':1163,'multiline':False]['text':' Specialized GetInfoHelper for cl::size_t params','line_number':1183,'multiline':False]['text':' Specialization for reference-counted types. This depends on the
 * existence of Wrapper<T>::cl_type, and none of the other types having the
 * cl_type member. Note that simplify specifying the parameter as Wrapper<T>
 * does not work, because when using a derived type (e.g. Context) the generic
 * template will provide a better match.
 ','line_number':1208,'multiline':True]['text':' CL_VERSION_1_1','line_number':1377,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':1403,'multiline':False]['text':' USE_CL_DEVICE_FISSION','line_number':1412,'multiline':False]['text':' CL_VERSION_1_1','line_number':1429,'multiline':False]['text':' CL_VERSION_1_1','line_number':1432,'multiline':False]['text':' USE_CL_DEVICE_FISSION','line_number':1436,'multiline':False]['text':' Convenience functions','line_number':1499,'multiline':False]['text':'*
 * OpenCL 1.2 devices do have retain/release.
 ','line_number':1547,'multiline':True]['text':'*
     * Retain the device.
     * \param device A valid device created using createSubDevices
     * \return 
     *   CL_SUCCESS if the function executed successfully.
     *   CL_INVALID_DEVICE if device was not a valid subdevice
     *   CL_OUT_OF_RESOURCES
     *   CL_OUT_OF_HOST_MEMORY
     ','line_number':1553,'multiline':True]['text':'*
     * Retain the device.
     * \param device A valid device created using createSubDevices
     * \return 
     *   CL_SUCCESS if the function executed successfully.
     *   CL_INVALID_DEVICE if device was not a valid subdevice
     *   CL_OUT_OF_RESOURCES
     *   CL_OUT_OF_HOST_MEMORY
     ','line_number':1564,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':1576,'multiline':False]['text':'*
 * OpenCL 1.1 devices do not have retain/release.
 ','line_number':1577,'multiline':True]['text':' cl_device_id does not have retain().','line_number':1583,'multiline':False]['text':' cl_device_id does not have release().','line_number':1586,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':1590,'multiline':False]['text':' cl_platform_id does not have retain().','line_number':1595,'multiline':False]['text':' cl_platform_id does not have release().','line_number':1598,'multiline':False]['text':' Extracts version number with major in the upper 16 bits, minor in the lower 16','line_number':1667,'multiline':False]['text':' The platform cannot be queried directly, so we first have to grab a','line_number':1706,'multiline':False]['text':' device and obtain its context','line_number':1707,'multiline':False]['text':' #if defined(CL_VERSION_1_2) && defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)','line_number':1716,'multiline':False]['text':' namespace detail','line_number':1870,'multiline':False]['text':'! \endcond','line_number':1871,'multiline':False]['text':'! \stuct ImageFormat
 *  \brief Adds constructors and member functions for cl_image_format.
 *
 *  \see cl_image_format
 ','line_number':1873,'multiline':True]['text':'! \brief Default constructor - performs no initialization.','line_number':1880,'multiline':False]['text':'! \brief Initializing constructor.','line_number':1883,'multiline':False]['text':'! \brief Assignment operator.','line_number':1890,'multiline':False]['text':'! \brief Class interface for cl_device_id.
 *
 *  \note Copies of these objects are inexpensive, since they don't 'own'
 *        any underlying resources or data structures.
 *
 *  \see cl_device_id
 ','line_number':1901,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':1911,'multiline':False]['text':'! \brief Copy constructor.
     * 
     *  This simply copies the device ID value, which is an inexpensive operation.
     ','line_number':1914,'multiline':True]['text':'! \brief Constructor from cl_device_id.
     * 
     *  This simply copies the device ID value, which is an inexpensive operation.
     ','line_number':1920,'multiline':True]['text':'! \brief Returns the first device on the default context.
     *
     *  \see Context::getDefault()
     ','line_number':1926,'multiline':True]['text':'! \brief Assignment operator from Device.
     * 
     *  This simply copies the device ID value, which is an inexpensive operation.
     ','line_number':1932,'multiline':True]['text':'! \brief Assignment operator from cl_device_id.
     * 
     *  This simply copies the device ID value, which is an inexpensive operation.
     ','line_number':1944,'multiline':True]['text':'! \brief Wrapper for clGetDeviceInfo().','line_number':1954,'multiline':False]['text':'! \brief Wrapper for clGetDeviceInfo() that returns by value.','line_number':1963,'multiline':False]['text':'*
     * CL 1.2 version
     ','line_number':1977,'multiline':True]['text':'! \brief Wrapper for clCreateSubDevicesEXT().','line_number':1981,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':2001,'multiline':False]['text':'*
 * CL 1.1 version that uses device fission.
 ','line_number':2003,'multiline':True]['text':'in_device','line_number':2014,'multiline':True]['text':' properties ','line_number':2015,'multiline':True]['text':'num_entries','line_number':2016,'multiline':True]['text':'out_devices','line_number':2017,'multiline':True]['text':'num_devices','line_number':2018,'multiline':True]['text':' #if defined(USE_CL_DEVICE_FISSION)','line_number':2038,'multiline':False]['text':' #if defined(CL_VERSION_1_1)','line_number':2039,'multiline':False]['text':'! \brief Class interface for cl_platform_id.
 *
 *  \note Copies of these objects are inexpensive, since they don't 'own'
 *        any underlying resources or data structures.
 *
 *  \see cl_platform_id
 ','line_number':2042,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':2052,'multiline':False]['text':'! \brief Copy constructor.
     * 
     *  This simply copies the platform ID value, which is an inexpensive operation.
     ','line_number':2055,'multiline':True]['text':'! \brief Constructor from cl_platform_id.
     * 
     *  This simply copies the platform ID value, which is an inexpensive operation.
     ','line_number':2061,'multiline':True]['text':'! \brief Assignment operator from Platform.
     * 
     *  This simply copies the platform ID value, which is an inexpensive operation.
     ','line_number':2067,'multiline':True]['text':'! \brief Assignment operator from cl_platform_id.
     * 
     *  This simply copies the platform ID value, which is an inexpensive operation.
     ','line_number':2079,'multiline':True]['text':'! \brief Wrapper for clGetPlatformInfo().','line_number':2089,'multiline':False]['text':'! \brief Wrapper for clGetPlatformInfo() that returns by value.','line_number':2097,'multiline':False]['text':'! \brief Gets a list of devices for this platform.
     * 
     *  Wraps clGetDeviceIDs().
     ','line_number':2111,'multiline':True]['text':'! \brief Get the list of available D3D10 devices.
     *
     *  \param d3d_device_source.
     *
     *  \param d3d_object.
     *
     *  \param d3d_device_set.
     *
     *  \param devices returns a vector of OpenCL D3D10 devices found. The cl::Device
     *  values returned in devices can be used to identify a specific OpenCL
     *  device. If \a devices argument is NULL, this argument is ignored.
     *
     *  \return One of the following values:
     *    - CL_SUCCESS if the function is executed successfully.
     *
     *  The application can query specific capabilities of the OpenCL device(s)
     *  returned by cl::getDevices. This can be used by the application to
     *  determine which device(s) to use.
     *
     * \note In the case that exceptions are enabled and a return value
     * other than CL_SUCCESS is generated, then cl::Error exception is
     * generated.
     ','line_number':2139,'multiline':True]['text':'! \brief Gets a list of available platforms.
     * 
     *  Wraps clGetPlatformIDs().
     ','line_number':2215,'multiline':True]['text':'! \brief Gets the first available platform.
     * 
     *  Wraps clGetPlatformIDs(), returning the first result.
     ','line_number':2244,'multiline':True]['text':'! \brief Gets the first available platform, returning it by value.
     * 
     *  Wraps clGetPlatformIDs(), returning the first result.
     ','line_number':2273,'multiline':True]['text':'! \brief Wrapper for clUnloadCompiler().','line_number':2313,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':2319,'multiline':False]['text':' class Platform','line_number':2320,'multiline':False]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':2322,'multiline':True]['text':'*
 * Unload the OpenCL compiler.
 * \note Deprecated for OpenCL 1.2. Use Platform::unloadCompiler instead.
 ','line_number':2326,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':2337,'multiline':False]['text':'! \brief Class interface for cl_context.
 *
 *  \note Copies of these objects are shallow, meaning that the copy will refer
 *        to the same underlying cl_context as the original.  For details, see
 *        clRetainContext() and clReleaseContext().
 *
 *  \see cl_context
 ','line_number':2339,'multiline':True]['text':'! \brief Destructor.
     *
     *  This calls clReleaseContext() on the value held by this instance.
     ','line_number':2355,'multiline':True]['text':'! \brief Constructs a context including a list of specified devices.
     *
     *  Wraps clCreateContext().
     ','line_number':2361,'multiline':True]['text':'! \brief Constructs a context including all or a subset of devices of a specified type.
     *
     *  Wraps clCreateContextFromType().
     ','line_number':2421,'multiline':True]['text':' Get a valid platform ID as we cannot send in a blank one','line_number':2442,'multiline':False]['text':' Check the platforms we found for a device of our specified type','line_number':2453,'multiline':False]['text':' Catch if exceptions are enabled as we don't want to exit if first platform has no devices of type','line_number':2467,'multiline':False]['text':' We do error checking next anyway, and can throw there if needed','line_number':2468,'multiline':False]['text':' Only squash CL_SUCCESS and CL_DEVICE_NOT_FOUND','line_number':2471,'multiline':False]['text':'! \brief Returns a singleton context including all devices of CL_DEVICE_TYPE_DEFAULT.
     *
     *  \note All calls to this function return the same cl_context as the first.
     ','line_number':2506,'multiline':True]['text':' Assume writes will propagate eventually...','line_number':2524,'multiline':False]['text':' Assume writes will propagate eventually...','line_number':2546,'multiline':False]['text':'! \brief Default constructor - initializes to NULL.','line_number':2558,'multiline':False]['text':'! \brief Copy constructor.
     * 
     *  This calls clRetainContext() on the parameter's cl_context.
     ','line_number':2561,'multiline':True]['text':'! \brief Constructor from cl_context - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the cl_context
     *  into the new Context object.
     ','line_number':2567,'multiline':True]['text':'! \brief Assignment operator from Context.
     * 
     *  This calls clRetainContext() on the parameter and clReleaseContext() on
     *  the previous value held by this instance.
     ','line_number':2574,'multiline':True]['text':'! \brief Assignment operator from cl_context - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the rhs and calls
     *  clReleaseContext() on the value previously held by this instance.
     ','line_number':2587,'multiline':True]['text':'! \brief Wrapper for clGetContextInfo().','line_number':2598,'multiline':False]['text':'! \brief Wrapper for clGetContextInfo() that returns by value.','line_number':2607,'multiline':False]['text':'! \brief Gets a list of supported image formats.
     *  
     *  Wraps clGetSupportedImageFormats().
     ','line_number':2621,'multiline':True]['text':'! \brief Class interface for cl_event.
 *
 *  \note Copies of these objects are shallow, meaning that the copy will refer
 *        to the same underlying cl_event as the original.  For details, see
 *        clRetainEvent() and clReleaseEvent().
 *
 *  \see cl_event
 ','line_number':2694,'multiline':True]['text':'! \brief Destructor.
     *
     *  This calls clReleaseEvent() on the value held by this instance.
     ','line_number':2705,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':2711,'multiline':False]['text':'! \brief Copy constructor.
     * 
     *  This calls clRetainEvent() on the parameter's cl_event.
     ','line_number':2714,'multiline':True]['text':'! \brief Constructor from cl_event - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the cl_event
     *  into the new Event object.
     ','line_number':2720,'multiline':True]['text':'! \brief Assignment operator from cl_event - takes ownership.
     *
     *  This effectively transfers ownership of a refcount on the rhs and calls
     *  clReleaseEvent() on the value previously held by this instance.
     ','line_number':2727,'multiline':True]['text':'! \brief Assignment operator from cl_event.
     * 
     *  This calls clRetainEvent() on the parameter and clReleaseEvent() on
     *  the previous value held by this instance.
     ','line_number':2740,'multiline':True]['text':'! \brief Wrapper for clGetEventInfo().','line_number':2751,'multiline':False]['text':'! \brief Wrapper for clGetEventInfo() that returns by value.','line_number':2760,'multiline':False]['text':'! \brief Wrapper for clGetEventProfilingInfo().','line_number':2774,'multiline':False]['text':'! \brief Wrapper for clGetEventProfilingInfo() that returns by value.','line_number':2783,'multiline':False]['text':'! \brief Blocks the calling thread until this event completes.
     * 
     *  Wraps clWaitForEvents().
     ','line_number':2797,'multiline':True]['text':'! \brief Registers a user callback function for a specific command execution status.
     *
     *  Wraps clSetEventCallback().
     ','line_number':2809,'multiline':True]['text':'! \brief Blocks the calling thread until every event specified is complete.
     * 
     *  Wraps clWaitForEvents().
     ','line_number':2828,'multiline':True]['text':'! \brief Class interface for user events (a subset of cl_event's).
 * 
 *  See Event for details about copy semantics, etc.
 ','line_number':2843,'multiline':True]['text':'! \brief Constructs a user event on a given context.
     *
     *  Wraps clCreateUserEvent().
     ','line_number':2850,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':2869,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.','line_number':2872,'multiline':False]['text':'! \brief Assignment Operator - performs shallow copy.','line_number':2875,'multiline':False]['text':'! \brief Sets the execution status of a user event object.
     *
     *  Wraps clSetUserEventStatus().
     ','line_number':2884,'multiline':True]['text':'! \brief Blocks the calling thread until every event specified is complete.
 * 
 *  Wraps clWaitForEvents().
 ','line_number':2897,'multiline':True]['text':'! \brief Class interface for cl_mem.
 *
 *  \note Copies of these objects are shallow, meaning that the copy will refer
 *        to the same underlying cl_mem as the original.  For details, see
 *        clRetainMemObject() and clReleaseMemObject().
 *
 *  \see cl_mem
 ','line_number':2910,'multiline':True]['text':'! \brief Destructor.
     *
     *  This calls clReleaseMemObject() on the value held by this instance.
     ','line_number':2922,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':2928,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     * 
     *  This calls clRetainMemObject() on the parameter's cl_mem.
     ','line_number':2931,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the cl_mem
     *  into the new Memory object.
     ','line_number':2937,'multiline':True]['text':'! \brief Assignment operator from Memory.
     * 
     *  This calls clRetainMemObject() on the parameter and clReleaseMemObject()
     *  on the previous value held by this instance.
     ','line_number':2944,'multiline':True]['text':'! \brief Assignment operator from cl_mem - takes ownership.
     *
     *  This effectively transfers ownership of a refcount on the rhs and calls
     *  clReleaseMemObject() on the value previously held by this instance.
     ','line_number':2957,'multiline':True]['text':'! \brief Wrapper for clGetMemObjectInfo().','line_number':2968,'multiline':False]['text':'! \brief Wrapper for clGetMemObjectInfo() that returns by value.','line_number':2977,'multiline':False]['text':'! \brief Registers a callback function to be called when the memory object
     *         is no longer needed.
     *
     *  Wraps clSetMemObjectDestructorCallback().
     *
     *  Repeated calls to this function, for a given cl_mem value, will append
     *  to the list of functions called (in reverse order) when memory object's
     *  resources are freed and the memory object is deleted.
     *
     *  \note
     *  The registered callbacks are associated with the underlying cl_mem
     *  value - not the Memory class instance.
     ','line_number':2992,'multiline':True]['text':' Pre-declare copy functions','line_number':3020,'multiline':False]['text':'! \brief Class interface for Buffer Memory Objects.
 * 
 *  See Memory for details about copy semantics, etc.
 *
 *  \see Memory
 ','line_number':3032,'multiline':True]['text':'! \brief Constructs a Buffer in a specified context.
     *
     *  Wraps clCreateBuffer().
     *
     *  \param host_ptr Storage to be used if the CL_MEM_USE_HOST_PTR flag was
     *                  specified.  Note alignment & exclusivity requirements.
     ','line_number':3042,'multiline':True]['text':'! \brief Constructs a Buffer in the default context.
     *
     *  Wraps clCreateBuffer().
     *
     *  \param host_ptr Storage to be used if the CL_MEM_USE_HOST_PTR flag was
     *                  specified.  Note alignment & exclusivity requirements.
     *
     *  \see Context::getDefault()
     ','line_number':3065,'multiline':True]['text':'!
     * \brief Construct a Buffer from a host container via iterators.
     * IteratorType must be random access.
     * If useHostPtr is specified iterators must represent contiguous data.
     ','line_number':3092,'multiline':True]['text':'!
     * \brief Construct a Buffer from a host container via iterators using a specified context.
     * IteratorType must be random access.
     * If useHostPtr is specified iterators must represent contiguous data.
     ','line_number':3143,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3152,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3155,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3161,'multiline':True]['text':'! \brief Assignment from Buffer - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3167,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3179,'multiline':True]['text':'! \brief Creates a new buffer object from this.
     *
     *  Wraps clCreateSubBuffer().
     ','line_number':3190,'multiline':True]['text':'! \brief Class interface for creating OpenCL buffers from ID3D10Buffer's.
 *
 *  This is provided to facilitate interoperability with Direct3D.
 * 
 *  See Memory for details about copy semantics, etc.
 *
 *  \see Memory
 ','line_number':3220,'multiline':True]['text':'! \brief Constructs a BufferD3D10, in a specified context, from a
     *         given ID3D10Buffer.
     *
     *  Wraps clCreateFromD3D10BufferKHR().
     ','line_number':3235,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3275,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3278,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3284,'multiline':True]['text':'! \brief Assignment from BufferD3D10 - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3290,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3302,'multiline':True]['text':'! \brief Class interface for GL Buffer Memory Objects.
 *
 *  This is provided to facilitate interoperability with OpenGL.
 * 
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':3314,'multiline':True]['text':'! \brief Constructs a BufferGL in a specified context, from a given
     *         GL buffer.
     *
     *  Wraps clCreateFromGLBuffer().
     ','line_number':3325,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3349,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3352,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3358,'multiline':True]['text':'! \brief Assignment from BufferGL - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3364,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3376,'multiline':True]['text':'! \brief Wrapper for clGetGLObjectInfo().','line_number':3386,'multiline':False]['text':'! \brief Class interface for GL Render Buffer Memory Objects.
 *
 *  This is provided to facilitate interoperability with OpenGL.
 * 
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':3397,'multiline':True]['text':'! \brief Constructs a BufferRenderGL in a specified context, from a given
     *         GL Renderbuffer.
     *
     *  Wraps clCreateFromGLRenderbuffer().
     ','line_number':3408,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3432,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3435,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3441,'multiline':True]['text':'! \brief Assignment from BufferGL - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3447,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3459,'multiline':True]['text':'! \brief Wrapper for clGetGLObjectInfo().','line_number':3469,'multiline':False]['text':'! \brief C++ base class for Image Memory objects.
 *
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':3480,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3489,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3492,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3498,'multiline':True]['text':'! \brief Assignment from Image - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3504,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3516,'multiline':True]['text':'! \brief Wrapper for clGetImageInfo().','line_number':3527,'multiline':False]['text':'! \brief Wrapper for clGetImageInfo() that returns by value.','line_number':3536,'multiline':False]['text':'! \brief Class interface for 1D Image Memory objects.
 *
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':3552,'multiline':True]['text':'! \brief Constructs a 1D Image in a specified context.
     *
     *  Wraps clCreateImage().
     ','line_number':3561,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3594,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3597,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3603,'multiline':True]['text':'! \brief Assignment from Image1D - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3609,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3621,'multiline':True]['text':'! \class Image1DBuffer
 * \brief Image interface for 1D buffer images.
 ','line_number':3632,'multiline':True]['text':'! \class Image1DArray
 * \brief Image interface for arrays of 1D images.
 ','line_number':3689,'multiline':True]['text':' height, depth (unused)','line_number':3710,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':3749,'multiline':False]['text':'! \brief Class interface for 2D Image Memory objects.
 *
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':3752,'multiline':True]['text':'! \brief Constructs a 1D Image in a specified context.
     *
     *  Wraps clCreateImage().
     ','line_number':3761,'multiline':True]['text':' Run-time decision based on the actual platform','line_number':3779,'multiline':False]['text':' OpenCL 1.2 or above','line_number':3782,'multiline':False]['text':' depth, array size (unused)','line_number':3798,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':3815,'multiline':False]['text':' #if !defined(CL_VERSION_1_2) || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)','line_number':3827,'multiline':False]['text':'! \brief Default constructor - initializes to NULL.','line_number':3830,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3833,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3839,'multiline':True]['text':'! \brief Assignment from Image2D - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3845,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3857,'multiline':True]['text':'! \brief Class interface for GL 2D Image Memory objects.
 *
 *  This is provided to facilitate interoperability with OpenGL.
 * 
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 *  \note Deprecated for OpenCL 1.2. Please use ImageGL instead.
 ','line_number':3870,'multiline':True]['text':'! \brief Constructs an Image2DGL in a specified context, from a given
     *         GL Texture.
     *
     *  Wraps clCreateFromGLTexture2D().
     ','line_number':3882,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':3911,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3914,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':3920,'multiline':True]['text':'! \brief Assignment from Image2DGL - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3926,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':3938,'multiline':True]['text':' #if !defined(CL_VERSION_1_2)','line_number':3948,'multiline':False]['text':'! \class Image2DArray
 * \brief Image interface for arrays of 2D images.
 ','line_number':3951,'multiline':True]['text':' depth (unused)','line_number':3975,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':4015,'multiline':False]['text':'! \brief Class interface for 3D Image Memory objects.
 *
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':4017,'multiline':True]['text':'! \brief Constructs a 3D Image in a specified context.
     *
     *  Wraps clCreateImage().
     ','line_number':4026,'multiline':True]['text':' Run-time decision based on the actual platform','line_number':4046,'multiline':False]['text':' OpenCL 1.2 or above','line_number':4049,'multiline':False]['text':' array size (unused)','line_number':4066,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':4084,'multiline':False]['text':' #if !defined(CL_VERSION_1_2) || defined(CL_USE_DEPRECATED_OPENCL_1_1_APIS)','line_number':4097,'multiline':False]['text':'! \brief Default constructor - initializes to NULL.','line_number':4100,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4103,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':4109,'multiline':True]['text':'! \brief Assignment from Image3D - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4115,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4127,'multiline':True]['text':'! \brief Class interface for GL 3D Image Memory objects.
 *
 *  This is provided to facilitate interoperability with OpenGL.
 * 
 *  See Memory for details about copy semantics, etc.
 * 
 *  \see Memory
 ','line_number':4139,'multiline':True]['text':'! \brief Constructs an Image3DGL in a specified context, from a given
     *         GL Texture.
     *
     *  Wraps clCreateFromGLTexture3D().
     ','line_number':4150,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':4178,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4181,'multiline':True]['text':'! \brief Constructor from cl_mem - takes ownership.
     *
     *  See Memory for further details.
     ','line_number':4187,'multiline':True]['text':'! \brief Assignment from Image3DGL - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4193,'multiline':True]['text':'! \brief Assignment from cl_mem - performs shallow copy.
     *
     *  See Memory for further details.
     ','line_number':4205,'multiline':True]['text':' #if !defined(CL_VERSION_1_2)','line_number':4215,'multiline':False]['text':'! \class ImageGL
 * \brief general image interface for GL interop.
 * We abstract the 2D and 3D GL images into a single instance here
 * that wraps all GL sourced images on the grounds that setup information
 * was performed by OpenCL anyway.
 ','line_number':4218,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':4270,'multiline':False]['text':'! \brief Class interface for cl_sampler.
 *
 *  \note Copies of these objects are shallow, meaning that the copy will refer
 *        to the same underlying cl_sampler as the original.  For details, see
 *        clRetainSampler() and clReleaseSampler().
 *
 *  \see cl_sampler 
 ','line_number':4272,'multiline':True]['text':'! \brief Destructor.
     *
     *  This calls clReleaseSampler() on the value held by this instance.
     ','line_number':4283,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':4289,'multiline':False]['text':'! \brief Constructs a Sampler in a specified context.
     *
     *  Wraps clCreateSampler().
     ','line_number':4292,'multiline':True]['text':'! \brief Copy constructor - performs shallow copy.
     * 
     *  This calls clRetainSampler() on the parameter's cl_sampler.
     ','line_number':4317,'multiline':True]['text':'! \brief Constructor from cl_sampler - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the cl_sampler
     *  into the new Sampler object.
     ','line_number':4323,'multiline':True]['text':'! \brief Assignment operator from Sampler.
     * 
     *  This calls clRetainSampler() on the parameter and clReleaseSampler()
     *  on the previous value held by this instance.
     ','line_number':4330,'multiline':True]['text':'! \brief Assignment operator from cl_sampler - takes ownership.
     *
     *  This effectively transfers ownership of a refcount on the rhs and calls
     *  clReleaseSampler() on the value previously held by this instance.
     ','line_number':4343,'multiline':True]['text':'! \brief Wrapper for clGetSamplerInfo().','line_number':4354,'multiline':False]['text':'! \brief Wrapper for clGetSamplerInfo() that returns by value.','line_number':4363,'multiline':False]['text':'! \brief Class interface for specifying NDRange values.','line_number':4382,'multiline':False]['text':'! \brief Default constructor - resulting range has zero dimensions.','line_number':4390,'multiline':False]['text':'! \brief Constructs one-dimensional range.','line_number':4395,'multiline':False]['text':'! \brief Constructs two-dimensional range.','line_number':4402,'multiline':False]['text':'! \brief Constructs three-dimensional range.','line_number':4410,'multiline':False]['text':'! \brief Conversion operator to const ::size_t *.
     *  
     *  \returns a pointer to the size of the first dimension.
     ','line_number':4419,'multiline':True]['text':'! \brief Queries the number of dimensions in the range.','line_number':4427,'multiline':False]['text':'! \brief A zero-dimensional range.','line_number':4431,'multiline':False]['text':'! \brief Local address wrapper for use with Kernel::setArg','line_number':4434,'multiline':False]['text':'! \endcond','line_number':4457,'multiline':False]['text':'! __local
 * \brief Helper function for generating LocalSpaceArg objects.
 * Deprecated. Replaced with Local.
 ','line_number':4459,'multiline':True]['text':'! Local
 * \brief Helper function for generating LocalSpaceArg objects.
 ','line_number':4472,'multiline':True]['text':'class KernelFunctor;','line_number':4482,'multiline':False]['text':'! \brief Class interface for cl_kernel.
 *
 *  \note Copies of these objects are shallow, meaning that the copy will refer
 *        to the same underlying cl_kernel as the original.  For details, see
 *        clRetainKernel() and clReleaseKernel().
 *
 *  \see cl_kernel
 ','line_number':4484,'multiline':True]['text':'! \brief Destructor.
     *
     *  This calls clReleaseKernel() on the value held by this instance.
     ','line_number':4497,'multiline':True]['text':'! \brief Default constructor - initializes to NULL.','line_number':4503,'multiline':False]['text':'! \brief Copy constructor - performs shallow copy.
     * 
     *  This calls clRetainKernel() on the parameter's cl_kernel.
     ','line_number':4506,'multiline':True]['text':'! \brief Constructor from cl_kernel - takes ownership.
     * 
     *  This effectively transfers ownership of a refcount on the cl_kernel
     *  into the new Kernel object.
     ','line_number':4512,'multiline':True]['text':'! \brief Assignment operator from Kernel.
     * 
     *  This calls clRetainKernel() on the parameter and clReleaseKernel()
     *  on the previous value held by this instance.
     ','line_number':4519,'multiline':True]['text':'! \brief Assignment operator from cl_kernel - takes ownership.
     *
     *  This effectively transfers ownership of a refcount on the rhs and calls
     *  clReleaseKernel() on the value previously held by this instance.
     ','line_number':4532,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':4585,'multiline':False]['text':'! \class Program
 * \brief Program interface that implements cl_program.
 ','line_number':4630,'multiline':True]['text':'*
     * Construct a program object from a list of devices and a per-device list of binaries.
     * \param context A valid OpenCL context in which to construct the program.
     * \param devices A vector of OpenCL device objects for which the program will be created.
     * \param binaries A vector of pairs of a pointer to a binary object and its length.
     * \param binaryStatus An optional vector that on completion will be resized to
     *   match the size of binaries and filled with values to specify if each binary
     *   was successfully loaded.
     *   Set to CL_SUCCESS if the binary was successfully loaded.
     *   Set to CL_INVALID_VALUE if the length is 0 or the binary pointer is NULL.
     *   Set to CL_INVALID_BINARY if the binary provided is not valid for the matching device.
     * \param err if non-NULL will be set to CL_SUCCESS on successful operation or one of the following errors:
     *   CL_INVALID_CONTEXT if context is not a valid context.
     *   CL_INVALID_VALUE if the length of devices is zero; or if the length of binaries does not match the length of devices; 
     *     or if any entry in binaries is NULL or has length 0.
     *   CL_INVALID_DEVICE if OpenCL devices listed in devices are not in the list of devices associated with context.
     *   CL_INVALID_BINARY if an invalid program binary was encountered for any device. binaryStatus will return specific status for each device.
     *   CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources required by the OpenCL implementation on the host.
     ','line_number':4733,'multiline':True]['text':' Catch size mismatch early and return','line_number':4763,'multiline':False]['text':'*
     * Create program using builtin kernels.
     * \param kernelNames Semi-colon separated list of builtin kernel names
     ','line_number':4805,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':4836,'multiline':False]['text':'! \class CommandQueue
 * \brief CommandQueue interface for cl_command_queue.
 ','line_number':5087,'multiline':True]['text':'!
    * \brief Constructs a CommandQueue for an implementation defined device in the given context
    ','line_number':5123,'multiline':True]['text':' Assume writes will propagate eventually...','line_number':5185,'multiline':False]['text':' Assume writes will propagate eventually...','line_number':5220,'multiline':False]['text':'*
     * Enqueue a command to fill a buffer object with a pattern
     * of a given size. The pattern is specified a as vector.
     * \tparam PatternType The datatype of the pattern field. 
     *     The pattern type must be an accepted OpenCL data type.
     ','line_number':5464,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':5498,'multiline':False]['text':'*
     * Enqueue a command to fill an image object with a specified color.
     * \param fillColor is the color to use to fill the image.
     *     This is a four component RGBA floating-point color value if
     *     the image channel data type is not an unnormalized signed or
     *     unsigned data type.
     ','line_number':5580,'multiline':True]['text':'*
     * Enqueue a command to fill an image object with a specified color.
     * \param fillColor is the color to use to fill the image.
     *     This is a four component RGBA signed integer color value if
     *     the image channel data type is an unnormalized signed integer
     *     type.
     ','line_number':5614,'multiline':True]['text':'*
     * Enqueue a command to fill an image object with a specified color.
     * \param fillColor is the color to use to fill the image.
     *     This is a four component RGBA unsigned integer color value if
     *     the image channel data type is an unnormalized unsigned integer
     *     type.
     ','line_number':5648,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':5681,'multiline':False]['text':'*
     * Enqueues a marker command which waits for either a list of events to complete, 
     * or all previously enqueued commands to complete.
     *
     * Enqueues a marker command which waits for either a list of events to complete, 
     * or if the list is empty it waits for all commands previously enqueued in command_queue 
     * to complete before it completes. This command returns an event which can be waited on, 
     * i.e. this event can be waited on to insure that all events either in the event_wait_list 
     * or all previously enqueued commands, queued before this command to command_queue, 
     * have completed.
     ','line_number':5809,'multiline':True]['text':'*
     * A synchronization point that enqueues a barrier operation.
     *
     * Enqueues a barrier command which waits for either a list of events to complete, 
     * or if the list is empty it waits for all commands previously enqueued in command_queue 
     * to complete before it completes. This command blocks command execution, that is, any 
     * following commands enqueued after it do not execute until it completes. This command 
     * returns an event which can be waited on, i.e. this event can be waited on to insure that 
     * all events either in the event_wait_list or all previously enqueued commands, queued 
     * before this command to command_queue, have completed.
     ','line_number':5839,'multiline':True]['text':'*
     * Enqueues a command to indicate with which device a set of memory objects
     * should be associated.
     ','line_number':5869,'multiline':True]['text':' #if defined(CL_VERSION_1_2)','line_number':5904,'multiline':False]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':5988,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':6010,'multiline':False]['text':' #if defined(CL_VERSION_1_2)','line_number':6110,'multiline':False]['text':' #if defined(CL_VERSION_1_1)','line_number':6113,'multiline':False]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':6133,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':6144,'multiline':False]['text':'*
 * Blocking copy operation between iterators and a buffer.
 * Host to Device.
 * Uses default command queue.
 ','line_number':6334,'multiline':True]['text':'*
 * Blocking copy operation between iterators and a buffer.
 * Device to Host.
 * Uses default command queue.
 ','line_number':6350,'multiline':True]['text':'*
 * Blocking copy operation between iterators and a buffer.
 * Host to Device.
 * Uses specified queue.
 ','line_number':6366,'multiline':True]['text':' if exceptions enabled, enqueueMapBuffer will throw','line_number':6382,'multiline':False]['text':' if exceptions enabled, enqueueUnmapMemObject will throw','line_number':6397,'multiline':False]['text':'*
 * Blocking copy operation between iterators and a buffer.
 * Device to Host.
 * Uses specified queue.
 ','line_number':6405,'multiline':True]['text':' if exceptions enabled, enqueueMapBuffer will throw','line_number':6421,'multiline':False]['text':' if exceptions enabled, enqueueUnmapMemObject will throw','line_number':6428,'multiline':False]['text':' Kernel Functor support','line_number':6708,'multiline':False]['text':' New interface as of September 2011','line_number':6709,'multiline':False]['text':' Requires the C++11 std::tr1::function (note do not support TR1)','line_number':6710,'multiline':False]['text':' Visual Studio 2010 and GCC 4.2','line_number':6711,'multiline':False]['text':'------------------------------------------------------------------------------------------------------','line_number':7022,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':7101,'multiline':False]['text':'! \brief Return type of the functor','line_number':7107,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':7110,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':7327,'multiline':False]['text':'! \brief Return type of the functor','line_number':7333,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':7336,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':7549,'multiline':False]['text':'! \brief Return type of the functor','line_number':7555,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':7558,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':7767,'multiline':False]['text':'! \brief Return type of the functor','line_number':7773,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':7776,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':7981,'multiline':False]['text':'! \brief Return type of the functor','line_number':7987,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':7990,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':8191,'multiline':False]['text':'! \brief Return type of the functor','line_number':8197,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':8200,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':8397,'multiline':False]['text':'! \brief Return type of the functor','line_number':8403,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':8406,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':8599,'multiline':False]['text':'! \brief Return type of the functor','line_number':8605,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':8608,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':8797,'multiline':False]['text':'! \brief Return type of the functor','line_number':8803,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':8806,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':8991,'multiline':False]['text':'! \brief Return type of the functor','line_number':8997,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9000,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':9181,'multiline':False]['text':'! \brief Return type of the functor','line_number':9187,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9190,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':9367,'multiline':False]['text':'! \brief Return type of the functor','line_number':9373,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9376,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':9549,'multiline':False]['text':'! \brief Return type of the functor','line_number':9555,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9558,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':9727,'multiline':False]['text':'! \brief Return type of the functor','line_number':9733,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9736,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':9901,'multiline':False]['text':'! \brief Return type of the functor','line_number':9907,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':9910,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10071,'multiline':False]['text':'! \brief Return type of the functor','line_number':10077,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10080,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10237,'multiline':False]['text':'! \brief Return type of the functor','line_number':10243,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10246,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10399,'multiline':False]['text':'! \brief Return type of the functor','line_number':10405,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10408,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10557,'multiline':False]['text':'! \brief Return type of the functor','line_number':10563,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10566,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10711,'multiline':False]['text':'! \brief Return type of the functor','line_number':10717,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10720,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':10861,'multiline':False]['text':'! \brief Return type of the functor','line_number':10867,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':10870,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11007,'multiline':False]['text':'! \brief Return type of the functor','line_number':11013,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11016,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11149,'multiline':False]['text':'! \brief Return type of the functor','line_number':11155,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11158,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11287,'multiline':False]['text':'! \brief Return type of the functor','line_number':11293,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11296,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11421,'multiline':False]['text':'! \brief Return type of the functor','line_number':11427,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11430,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11551,'multiline':False]['text':'! \brief Return type of the functor','line_number':11557,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11560,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11677,'multiline':False]['text':'! \brief Return type of the functor','line_number':11683,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11686,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11799,'multiline':False]['text':'! \brief Return type of the functor','line_number':11805,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11808,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':11917,'multiline':False]['text':'! \brief Return type of the functor','line_number':11923,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':11926,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':12031,'multiline':False]['text':'! \brief Return type of the functor','line_number':12037,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':12040,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':12141,'multiline':False]['text':'! \brief Return type of the functor','line_number':12147,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':12150,'multiline':False]['text':' Fail variadic expansion for dev11','line_number':12247,'multiline':False]['text':'! \brief Return type of the functor','line_number':12253,'multiline':False]['text':'! \brief Function signature of kernel functor with no event dependency.','line_number':12256,'multiline':False]['text':' namespace detail','line_number':12277,'multiline':False]['text':'----------------------------------------------------------------------------------------------','line_number':12279,'multiline':False]['text':'----------------------------------------------------------------------------------------------------------------------','line_number':12357,'multiline':False]['text':'__CL_USER_OVERRIDE_ERROR_STRINGS','line_number':12426,'multiline':False]['text':' Extensions','line_number':12430,'multiline':False]['text':'*
 * Deprecated APIs for 1.2
 ','line_number':12431,'multiline':True]['text':' #if defined(CL_VERSION_1_1)','line_number':12436,'multiline':False]['text':' USE_CL_DEVICE_FISSION','line_number':12441,'multiline':False]['text':' namespace cl','line_number':12447,'multiline':False]['text':' _WIN32','line_number':12451,'multiline':False]['text':' CL_HPP_','line_number':12453,'multiline':False]