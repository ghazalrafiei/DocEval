['text':' Only compiles against Base SDK iOS 11.0 or greater','line_number':26,'multiline':False]['text':' We'll try to look at the per-output_idx read-count argument, otherwise,','line_number':109,'multiline':False]['text':' we'll use the operator-global default.','line_number':110,'multiline':False]['text':' If the parent wrapper contains a temporary image, we need to pass on the
     * command buffer because the temporary images are attached to the command
     * buffer, we will need to use the same command buffer in order to use the
     * temporary image. We don't want to synchronize the parent wrapper because
     * it is still in use. If the parent wrapper contains a static image, we
     * should create a new command buffer because we use static image so it can
     * survive synchronization(commit of the command buffer), which means if we
     * pass on the command buffer the command buffer will be committed in
     * multiple places in the graph. Also since we don't pass on parent's
     * command buffer,we need to synchronize(commit) it since it won't be used
     * in the future.
     ','line_number':146,'multiline':True]['text':' commit the command buffer if it is notEnqueued','line_number':196,'multiline':False]['text':' threadExecutionWidth ','line_number':243,'multiline':True]['text':' maxThreadsPerThreadgroup / threadExecutionWidth ','line_number':244,'multiline':True]['text':' To set the offset, we can just match the top-left pixel (in the input','line_number':267,'multiline':False]['text':' image, with negative values for padding) that we look at. For 3x3s1p1, we','line_number':268,'multiline':False]['text':' look at the (-1, -1) pixel in the original impl. For 3x3s1p0, we look at','line_number':269,'multiline':False]['text':' (0, 0) pixel. For 3x3s1p2, look at (-2, -2) MPSCNN always looks at','line_number':270,'multiline':False]['text':' (-floor(kernel_size - 1 / 2), -floor(kernel_size - 1 / 2)) Thus, we just','line_number':271,'multiline':False]['text':' need to match this up.','line_number':272,'multiline':False]['text':' For 3x3s1p1, offset should be (0, 0)','line_number':274,'multiline':False]['text':' For 3x3s1p0, offset should be (1, 1)','line_number':275,'multiline':False]['text':' For 3x3s1p2, offset should be (-1, -1)','line_number':276,'multiline':False]['text':' Compute the 1-d index of a n-dimensional contiguous row-major tensor for','line_number':282,'multiline':False]['text':'     a given n-dimensional index 'index'','line_number':283,'multiline':False]['text':' Get a sub tensor view from 'tensor' using data pointer from 'tensor'','line_number':297,'multiline':False]['text':' prime to avoid artifacts ','line_number':488,'multiline':True]['text':' Treaded as half4 in the kernel, so need half4 here.','line_number':489,'multiline':False]['text':' Initialize random noise on first use.','line_number':495,'multiline':False]['text':' Cache it to maintain temporal consistency.','line_number':496,'multiline':False]['text':' (3/4 half-floats).','line_number':516,'multiline':False]['text':' (3/4 half-floats).','line_number':609,'multiline':False]['text':' For NCHW, X.dim32(1), inputChannels','line_number':752,'multiline':False]['text':' ConvPoolOpBase<CPUContext>::SetOutputSize(X, Y, filter.dim32(0));','line_number':765,'multiline':False]['text':' Reformat weights from [M][C][kH][kW] to [M][kH][kW][C].','line_number':766,'multiline':False]['text':' refilter[m][kh][kw][c]','line_number':775,'multiline':False]['text':' filter[m][c][kh][kw]','line_number':777,'multiline':False]['text':' DepthwiseConv path','line_number':783,'multiline':False]['text':' Only inputFeatureChannels == outputFeatureChannels is supported right','line_number':786,'multiline':False]['text':' now','line_number':787,'multiline':False]['text':' Input: X, W, b','line_number':880,'multiline':False]['text':' Output: Y','line_number':881,'multiline':False]['text':' No-op init','line_number':887,'multiline':False]['text':' We can allow the input weights/bias and output to alias each other,','line_number':894,'multiline':False]['text':' for example when doing a Conv + out-of-place ReLU, then fusing.','line_number':895,'multiline':False]['text':' Not really in-place per-se, but semantically is valid and preserves','line_number':1153,'multiline':False]['text':' compatibility.','line_number':1154,'multiline':False]['text':' refilter[m][kh][kw][c]','line_number':1362,'multiline':False]['text':' filter[m][c][kh][kw]','line_number':1364,'multiline':False]['text':' Note that X.numberOfImages can change between calls, but X.height and','line_number':1384,'multiline':False]['text':' X.width are static by definition.','line_number':1385,'multiline':False]['text':' Just pass inputs through, since we assume inference-time only.','line_number':1423,'multiline':False]['text':' Never use the second output (the mask).','line_number':1432,'multiline':False]['text':' initialization','line_number':1488,'multiline':False]['text':' For iOS11+ Reformat weights from WT[IC][OC][kH][kW] to','line_number':1495,'multiline':False]['text':' W[OC][kH][kW][IC]; For previous versions, reformat weights','line_number':1496,'multiline':False]['text':' to W[kH][kW][OC][IC]','line_number':1497,'multiline':False]['text':' Also rotate the weight matrix spatially by 180 degrees','line_number':1498,'multiline':False]['text':' initialize data structures','line_number':1523,'multiline':False]['text':' kernel offset + padding offset','line_number':1546,'multiline':False]['text':' We need to zero-fill the bias here.','line_number':1558,'multiline':False]['text':' data structure initialization','line_number':1588,'multiline':False]['text':' initialization','line_number':1589,'multiline':False]['text':' run the computation','line_number':1592,'multiline':False]['text':' Input: X, W, b','line_number':1672,'multiline':False]['text':' Output: Y','line_number':1673,'multiline':False]['text':' No-op init','line_number':1680,'multiline':False]['text':' Round-up to nearest multiple of 4,','line_number':1711,'multiline':False]['text':' so accesses to X[i * 4 + 3]  in kernel is valid.','line_number':1712,'multiline':False]['text':' op computes (X - mean) / std = X * 1/std + (-mean/std)','line_number':1820,'multiline':False]['text':' Thus set scale = 1.0/std, shift = (-mean/std)','line_number':1821,'multiline':False]['text':' Allow in-place isn't *really* valid here, since nothing is in-place for Metal','line_number':1936,'multiline':False]['text':' texture arrays, but requires re-export.','line_number':1937,'multiline':False]['text':' Help compiler generate vcvt?','line_number':1976,'multiline':False]['text':' only handle batch-size of one, so the batch index must be one.','line_number':1982,'multiline':False]['text':' EArrXXf','line_number':2081,'multiline':False]['text':' EArrXf','line_number':2082,'multiline':False]['text':' round pose_nms_size up to the next power of 2','line_number':2107,'multiline':False]['text':' Transpose and reshape predicted bbox transformations to get them','line_number':2181,'multiline':False]['text':' into the same order as the anchors:','line_number':2182,'multiline':False]['text':'   - bbox deltas will be (4 * A, H, W) format from conv output','line_number':2183,'multiline':False]['text':'   - transpose to (H, W, 4 * A)','line_number':2184,'multiline':False]['text':'   - reshape to (H * W * A, 4) where rows are ordered by (H, W, A)','line_number':2185,'multiline':False]['text':'     in slowest to fastest order to match the enumerated anchors','line_number':2186,'multiline':False]['text':' equivalent to python code','line_number':2192,'multiline':False]['text':'  bbox_deltas = bbox_deltas.transpose((1, 2, 0)).reshape((-1, 4))','line_number':2193,'multiline':False]['text':' - scores are (A, H, W) format from conv output','line_number':2200,'multiline':False]['text':' - transpose to (H, W, A)','line_number':2201,'multiline':False]['text':' - reshape to (H * W * A, 1) where rows are ordered by (H, W, A)','line_number':2202,'multiline':False]['text':'   to match the order of anchors and bbox_deltas','line_number':2203,'multiline':False]['text':' equivalent to python code','line_number':2206,'multiline':False]['text':' scores = scores.transpose((1, 2, 0)).reshape((-1, 1))','line_number':2207,'multiline':False]['text':' Transform anchors into proposals via bbox transformations','line_number':2211,'multiline':False]['text':' 2. clip proposals to image (may result in proposals with zero area','line_number':2219,'multiline':False]['text':' that will be removed in the next step)','line_number':2220,'multiline':False]['text':' 3. remove predicted boxes with either height or width < min_size','line_number':2224,'multiline':False]['text':' 4. sort all (proposal, score) pairs by score from highest to lowest','line_number':2230,'multiline':False]['text':' 5. take top pre_nms_topN (e.g. 6000)','line_number':2231,'multiline':False]['text':' 6. apply loose nms (e.g. threshold = 0.7)','line_number':2240,'multiline':False]['text':' 7. take after_nms_topN (e.g. 300)','line_number':2241,'multiline':False]['text':' 8. return the top proposals (-> RoIs top)','line_number':2242,'multiline':False]['text':' Generate outputs','line_number':2247,'multiline':False]['text':' bbox_deltas: (num_images, A * 4, H, W)','line_number':2268,'multiline':False]['text':' im_info_tensor: (num_images, 3), format [height, width, scale; ...]','line_number':2272,'multiline':False]['text':' anchors: (A, 4)','line_number':2277,'multiline':False]['text':' Broadcast the anchors to all pixels','line_number':2280,'multiline':False]['text':' Use openmp for acceleration?','line_number':2294,'multiline':False]['text':' write rois','line_number':2316,'multiline':False]['text':' write rois_probs','line_number':2324,'multiline':False]['text':' spatial_scale_ must be declared before feat_stride_','line_number':2334,'multiline':False]['text':' RPN_PRE_NMS_TOP_N','line_number':2338,'multiline':False]['text':' RPN_POST_NMS_TOP_N','line_number':2340,'multiline':False]['text':' RPN_NMS_THRESH','line_number':2342,'multiline':False]['text':' RPN_MIN_SIZE','line_number':2344,'multiline':False]['text':' The infamous "+ 1" for box width and height dating back to the DPM days','line_number':2346,'multiline':False]['text':' threads per thread group, used in nms','line_number':2348,'multiline':False]['text':' We can fuse the output computation as follows:','line_number':2382,'multiline':False]['text':'   ((x - est_mean) * (inv_var) * scale + bias','line_number':2383,'multiline':False]['text':' to','line_number':2384,'multiline':False]['text':'   (x * inv_var * scale) + (bias - est_mean * inv_var * scale)','line_number':2385,'multiline':False]['text':' Only handle three inputs for now.','line_number':2443,'multiline':False]['text':' C0, C1, C2, C3, C, N','line_number':2455,'multiline':False]['text':' this does not hold for non-temp images inputs','line_number':2460,'multiline':False]['text':' Only store one output in practice (ignore the shape argument).','line_number':2506,'multiline':False]['text':' due to the way we pass these parameters, we don't support the scale to be','line_number':2518,'multiline':False]['text':' larger than 6.5','line_number':2519,'multiline':False]['text':' namespace caffe2','line_number':2624,'multiline':False]