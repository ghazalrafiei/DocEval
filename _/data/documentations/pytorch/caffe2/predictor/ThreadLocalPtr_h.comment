['text':'*
 * thread_local pointer in C++ is a per thread pointer. However, sometimes
 * we want to have a thread local state that is per thread and also per
 * instance. e.g. we have the following class:
 * class A {
 *   ThreadLocalPtr<int> x;
 * }
 * We would like to have a copy of x per thread and also per instance of class A
 * This can be applied to storing per instance thread local state of some class,
 * when we could have multiple instances of the class in the same thread.
 * We implemented a subset of functions in folly::ThreadLocalPtr that's enough
 * to support BlackBoxPredictor.
 ','line_number':10,'multiline':True]['text':'*
 * Map of object pointer to instance in each thread
 * to achieve per thread(using thread_local) per object(using the map)
 * thread local pointer
 ','line_number':27,'multiline':True]['text':'*
 * A thread safe vector of all ThreadLocalHelper, this will be used
 * to encapuslate the locking in the APIs for the changes to the global
 * AllThreadLocalHelperVector instance.
 ','line_number':39,'multiline':True]['text':' Add a new ThreadLocalHelper to the vector','line_number':48,'multiline':False]['text':' Erase a ThreadLocalHelper to the vector','line_number':51,'multiline':False]['text':' Erase object in all the helpers stored in vector','line_number':54,'multiline':False]['text':' Called during destructor of a ThreadLocalPtrImpl','line_number':55,'multiline':False]['text':'*
 * ThreadLocalHelper is per thread
 ','line_number':63,'multiline':True]['text':' When the thread dies, we want to clean up *this*','line_number':70,'multiline':False]['text':' in AllThreadLocalHelperVector','line_number':71,'multiline':False]['text':' Insert a (object, ptr) pair into the thread local map','line_number':74,'multiline':False]['text':' Get the ptr by object','line_number':76,'multiline':False]['text':' Erase the ptr associated with the object in the map','line_number':78,'multiline':False]['text':' mapping of object -> ptr in each thread','line_number':82,'multiline':False]['text':' ThreadLocalHelper','line_number':85,'multiline':False]['text':'* ThreadLocalPtrImpl is per object
 ','line_number':87,'multiline':True]['text':' Delete copy and move constructors','line_number':92,'multiline':False]['text':' In the case when object dies first, we want to','line_number':98,'multiline':False]['text':' clean up the states in all child threads','line_number':99,'multiline':False]['text':' Cleaning up the objects(T) stored in the ThreadLocalPtrImpl in the thread','line_number':111,'multiline':False]['text':' Deletion of newPtr is handled by shared_ptr','line_number':115,'multiline':False]['text':' as it implements type erasure','line_number':116,'multiline':False]['text':' ThreadLocalPtrImpl','line_number':121,'multiline':False]['text':' namespace caffe2','line_number':158,'multiline':False]