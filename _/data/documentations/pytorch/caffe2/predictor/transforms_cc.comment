['text':' Rename inputs in the subnets of If/AsyncIf op','line_number':63,'multiline':False]['text':' Rename outputs in the subnets of If/AsyncIf op','line_number':84,'multiline':False]['text':' make an temporary copy here because we're going to modify children','line_number':100,'multiline':False]['text':' make an temporary copy here because we're going to modify parents','line_number':116,'multiline':False]['text':' use actual copy because op->input/output may change','line_number':143,'multiline':False]['text':' This case can still exist when in/out is in the predict_net's outputs.','line_number':148,'multiline':False]['text':' The op is an inplace op already.','line_number':149,'multiline':False]['text':' The following is to handle the special cases of inputs being overwritten','line_number':153,'multiline':False]['text':' by ops in the net and then appear in outputs of the net','line_number':154,'multiline':False]['text':' Propagate input downwards','line_number':156,'multiline':False]['text':' Make sure that after input is propagated down, it doesn't have parents','line_number':157,'multiline':False]['text':' that comes after i but before the new child','line_number':158,'multiline':False]['text':' Propagate output upwards','line_number':180,'multiline':False]['text':' This is the case when the op is absolutely needed. It exists to serve','line_number':182,'multiline':False]['text':' one and only one purpose, to copy from in to out where in is one of','line_number':183,'multiline':False]['text':' the net's inputs or outputs and out is one of the net's outputs.','line_number':184,'multiline':False]['text':' find latest parent of in','line_number':189,'multiline':False]['text':' Make sure that after output is propagated, it doesn't have children that','line_number':200,'multiline':False]['text':' comes after its new parent, but before its previous parent','line_number':201,'multiline':False]['text':' namespace','line_number':217,'multiline':False]['text':' Conceptually it's a pretty easy process and consists of 3 steps:','line_number':219,'multiline':False]['text':' 1) SSA rewrite; 2) propagate inputs forwards; 3) propagate outputs','line_number':220,'multiline':False]['text':' backwards and then forwards again. However, because of model outputs','line_number':221,'multiline':False]['text':' which can't be overwritten during the SSA process, and the fact that','line_number':222,'multiline':False]['text':' inputs could be overwritten by ops and also appear in outputs, it adds','line_number':223,'multiline':False]['text':' a lot of extra complexity to handle these special cases. A lot of this','line_number':224,'multiline':False]['text':' extra complexity is handled in FoundOpCandidate.','line_number':225,'multiline':False]['text':' add external_outputs to net as they're necessary to correctly do ssa','line_number':243,'multiline':False]['text':' rewriting','line_number':244,'multiline':False]['text':' clear external_outputs','line_number':249,'multiline':False]['text':' construct parents/children graphs to facilitate graph traversal','line_number':254,'multiline':False]['text':' Inplace ops. Step 1: propagate inputs downward','line_number':266,'multiline':False]['text':' Rename all apperances of out to in','line_number':275,'multiline':False]['text':' Step 2: propagate outputs upward','line_number':283,'multiline':False]['text':' Rename all apperances (regardless of inputs/outputs) of in (if not','line_number':293,'multiline':False]['text':' in inputs) to out, when out is guaranteed to be produced a parent','line_number':294,'multiline':False]['text':' op. With the parents/children graph which remembers all apprerances','line_number':295,'multiline':False]['text':' of nodes (not just immediate parent/children), we don't need to','line_number':296,'multiline':False]['text':' propagate the outputs back down again because those cases are already','line_number':297,'multiline':False]['text':' handled by RenameOutputInParents and RenameInputsInChildren','line_number':298,'multiline':False]['text':' Remove inplace ops','line_number':310,'multiline':False]['text':' namespace caffe2','line_number':329,'multiline':False]