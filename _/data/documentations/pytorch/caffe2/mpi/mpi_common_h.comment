['text':' Note(Yangqing): as necessary, add more specializations.','line_number':33,'multiline':False]['text':' For all Caffe MPI calls, we will wrap it inside an MPI mutex lock guard.','line_number':36,'multiline':False]['text':'*
 * @brief Gets the global MPI communicator used by Caffe2. In default, this
 * is MPI_COMM_WORLD unless you call SetGlobalMPIComm().
 ','line_number':53,'multiline':True]['text':'*
 * @brief Sets the global MPI communicator. Caffe2 takes over the ownership
 * of the passed in communicator.
 ','line_number':59,'multiline':True]['text':'*
 * @brief A helper function to return the size of the given communicator.
 ','line_number':65,'multiline':True]['text':'*
 * @brief A helper function to return the rank of the given communicator.
 ','line_number':70,'multiline':True]['text':'*
 * @brief A simple wrapper over an MPI common world.
 ','line_number':75,'multiline':True]['text':'*
   * @brief Creates a common world wrapper.
   *
   * The new common world is created by taking the existing communicator
   * passed in as src_comm, and splitting it using the color and the rank
   * specified. In default, we will split from Caffe2's global communicator,
   * and use color 0 as well as rank implicitly given by src_comm. As a result,
   * the default constructor basically creates a comm identical to the source
   * comm world.
   ','line_number':80,'multiline':True]['text':'*
   * @brief Returns the common world held by the wrapper.
   ','line_number':113,'multiline':True]['text':'*
   * @brief Returns the size of the world.
   ','line_number':119,'multiline':True]['text':'*
   * @brief Returns the rank of this process in the world.
   ','line_number':125,'multiline':True]['text':'*
 * A function used to perform peer setup so one does not need to use
 * mpirun / mpiexec to run the binary. Note that if you use mpirun or mpiexec
 * to set up the common world, do not use this function - MPI_Init would have
 * already set that up.
 *
 * This also assumes that you have a common path (like NFS) that multiple
 * instances can read from.
 *
 * Inputs:
 *   replicas (int): the number of replicas that mpi will run with.
 *   role (string): the role of this process, "server" or "client".
 *   job_path (string): a file name that the server will write its port into
 *       and the clients will read the server's port from.
 ','line_number':138,'multiline':True]['text':' namespace caffe2','line_number':157,'multiline':False]['text':' CAFFE2_MPI_MPI_COMMON_H_','line_number':159,'multiline':False]