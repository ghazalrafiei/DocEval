['text':' The following functions inside internal namespace are inlined because they','line_number':15,'multiline':False]['text':' are performance critical.','line_number':16,'multiline':False]['text':' version with prefetching','line_number':38,'multiline':False]['text':' TODO(msmelyan)','line_number':39,'multiline':False]['text':' Crux of the computation is computing a  / (sqrt(b) + epsilon),','line_number':40,'multiline':False]['text':' where a and b are vectors and epsilon is very small (eg., 10^-5) and does not','line_number':41,'multiline':False]['text':' change. Today it's computed using two vector sqrt and vector divide simd','line_number':42,'multiline':False]['text':' instructions. It is slow. We can take advantage of existing fast vector','line_number':43,'multiline':False]['text':' VRSQRTPS instruction that computes approximate reciprocals of square roots','line_number':44,'multiline':False]['text':' of the vector. It is 6x faster than vsrt and vdiv combinations. Since the','line_number':45,'multiline':False]['text':' addition of epsilon is just done to avoid division by zero, we approximate a','line_number':46,'multiline':False]['text':' / (sqrt(b) + epsilon) by a / (sqrt(b + sqrt(epsilon)) If we do that, we can','line_number':47,'multiline':False]['text':' use VRSQRTPS instead now. VRSQRTPS is not very accurate. Specifically, for','line_number':48,'multiline':False]['text':' the test on random numbers between 0.1 and 1 the absolute error was about','line_number':49,'multiline':False]['text':' 10^-3 compared to using slower but more accurate combination of vsqrt and','line_number':50,'multiline':False]['text':' vdiv. Extend Marat's function with more NR iterations to get more accuracy','line_number':51,'multiline':False]['text':' for training','line_number':52,'multiline':False]['text':' TODO(msmelyan)','line_number':53,'multiline':False]['text':' explore streaming stores, but need to have unique indices (deduplication)','line_number':54,'multiline':False]['text':' prefetch ptr','line_number':59,'multiline':False]['text':' unused ','line_number':61,'multiline':True]['text':' prefetch ptr','line_number':68,'multiline':False]['text':' unused ','line_number':70,'multiline':True]['text':' prefetch ptr','line_number':75,'multiline':False]['text':' unused ','line_number':77,'multiline':True]['text':' prefetch ptr','line_number':82,'multiline':False]['text':' unused ','line_number':84,'multiline':True]['text':' namespace internal','line_number':132,'multiline':False]['text':' version with prefetching','line_number':134,'multiline':False]['text':' TODO(msmelyan)','line_number':135,'multiline':False]['text':' Crux of the computation is computing a  / (sqrt(b) + epsilon),','line_number':136,'multiline':False]['text':' where a and b are vectors and epsilon is very small (eg., 10^-5) and does not','line_number':137,'multiline':False]['text':' change. Today it's computed using two vector sqrt and vector divide simd','line_number':138,'multiline':False]['text':' instructions. It is slow. We can take advantage of existing fast vector','line_number':139,'multiline':False]['text':' VRSQRTPS instruction that computes approximate reciprocals of square roots','line_number':140,'multiline':False]['text':' of the vector. It is 6x faster than vsrt and vdiv combinations. Since the','line_number':141,'multiline':False]['text':' addition of epsilon is just done to avoid division by zero, we approximate a','line_number':142,'multiline':False]['text':' / (sqrt(b) + epsilon) by a / (sqrt(b + sqrt(epsilon)) If we do that, we can','line_number':143,'multiline':False]['text':' use VRSQRTPS instead now. VRSQRTPS is not very accurate. Specifically, for','line_number':144,'multiline':False]['text':' the test on random numbers between 0.1 and 1 the absolute error was about','line_number':145,'multiline':False]['text':' 10^-3 compared to using slower but more accurate combination of vsqrt and','line_number':146,'multiline':False]['text':' vdiv. Extend Marat's function with more NR iterations to get more accuracy','line_number':147,'multiline':False]['text':' for training','line_number':148,'multiline':False]['text':' TODO(msmelyan)','line_number':149,'multiline':False]['text':' explore streaming stores, but need to have inuque indices (deduplication)','line_number':150,'multiline':False]['text':' prefetch ptr','line_number':154,'multiline':False]['text':' prefetch ptr','line_number':159,'multiline':False]['text':' prefetch ptr','line_number':162,'multiline':False]['text':' prefetch ptr','line_number':165,'multiline':False]['text':' Version with prefetching for embeddings and','line_number':171,'multiline':False]['text':' momentum using fp16','line_number':172,'multiline':False]['text':' prefetch ptr','line_number':176,'multiline':False]['text':' prefetch ptr','line_number':179,'multiline':False]['text':' prefetch ptr','line_number':181,'multiline':False]['text':' prefetch ptr','line_number':183,'multiline':False]['text':' version without prefetching','line_number':188,'multiline':False]['text':' namespace caffe2','line_number':201,'multiline':False]