['text':' @package optimizer','line_number':1,'multiline':False]['text':' Module caffe2.python.regularizer','line_number':2,'multiline':False]['text':' Possible alternative grouping method via summing over absolute values','line_number':46,'multiline':False]['text':' Compute l2norm over feature weights','line_number':47,'multiline':False]['text':' pow( sum_i { pow(theda_i, 2) } ,  0.5)','line_number':48,'multiline':False]['text':' TODO: the second dim (num of input nodes) of param is after feature preproc,','line_number':120,'multiline':False]['text':' and does not correspond to the original num of dense features.','line_number':121,'multiline':False]['text':' In the future, will want to create a util to reduce the input dim of param to','line_number':122,'multiline':False]['text':' match the num of dense features.','line_number':123,'multiline':False]['text':' Compute Lpnorm:','line_number':128,'multiline':False]['text':' pow( sum_i { pow(theda_i, p) } ,  1/p)','line_number':129,'multiline':False]['text':' budget must be float for future calculations','line_number':167,'multiline':False]['text':' TODO: the second dim (num of input nodes) of param is after feature preproc,','line_number':170,'multiline':False]['text':' and does not correspond to the original num of dense features.','line_number':171,'multiline':False]['text':' In the future, will want to create a util to reduce the input dim of param to','line_number':172,'multiline':False]['text':' match the num of dense features.','line_number':173,'multiline':False]['text':' compute approximate L0 norm','line_number':178,'multiline':False]['text':' sum_i ( min ( abs (theta_i), alpha))) / alpha','line_number':179,'multiline':False]['text':' incorporate budget factor','line_number':187,'multiline':False]['text':' regularization = reg_lambda * max(0, l0_norm - budget)','line_number':188,'multiline':False]['text':' Since we are most likely to do a minimization','line_number':380,'multiline':False]['text':' TODO(xlwang): param might still be negative at the initialization time or','line_number':389,'multiline':False]['text':' slightly negative due to the distributed training. Enforce it's non-negativity','line_number':390,'multiline':False]['text':' for now (at least above machine epsilon)','line_number':391,'multiline':False]['text':' Here we combine step 5 and step 7 into one operator call to','line_number':533,'multiline':False]['text':' improve efficiency: values = np.sqrt(self.groups) * self.reg_lambda','line_number':534,'multiline':False]