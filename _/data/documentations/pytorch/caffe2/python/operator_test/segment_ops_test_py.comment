['text':' grad r.t. data','line_number':102,'multiline':False]['text':' if sparse, include indices along with data gradient','line_number':106,'multiline':False]['text':' other inputs don't have gradient','line_number':110,'multiline':False]['text':' we can produce multiple outputs for max','line_number':257,'multiline':False]['text':' gradient is the same as sum','line_number':272,'multiline':False]['text':' @given(','line_number':736,'multiline':False]['text':'     inputs=hu.lengths_tensor(','line_number':737,'multiline':False]['text':'         dtype=np.float32,','line_number':738,'multiline':False]['text':'         min_value=1,','line_number':739,'multiline':False]['text':'         max_value=5,','line_number':740,'multiline':False]['text':'         min_dim=1,','line_number':741,'multiline':False]['text':'         max_dim=1,','line_number':742,'multiline':False]['text':'         allow_empty=False,','line_number':743,'multiline':False]['text':'     ),','line_number':744,'multiline':False]['text':'     **hu.gcs','line_number':745,'multiline':False]['text':' )','line_number':746,'multiline':False]['text':' def test_lengths_max_gpu(self, inputs, gc, dc):','line_number':747,'multiline':False]['text':'     def lengths_max_ref(I, L):','line_number':748,'multiline':False]['text':'         R = np.zeros(shape=(len(L)), dtype=I.dtype)','line_number':749,'multiline':False]['text':'         line = 0','line_number':750,'multiline':False]['text':'         for g in range(len(L)):','line_number':751,'multiline':False]['text':'             for i in range(L[g]):','line_number':752,'multiline':False]['text':'                 if i == 0:','line_number':753,'multiline':False]['text':'                     R[g] = I[line]','line_number':754,'multiline':False]['text':'                 else:','line_number':755,'multiline':False]['text':'                     R[g] = max(R[g], I[line])','line_number':756,'multiline':False]['text':'                 line += 1','line_number':757,'multiline':False]['text':'         return [R]','line_number':758,'multiline':False]['text':'     X, lengths = inputs','line_number':760,'multiline':False]['text':'     op = core.CreateOperator("LengthsMax", ["X", "lengths"], "out")','line_number':761,'multiline':False]['text':'     self.assertDeviceChecks(dc, op, [X, lengths], [0])','line_number':762,'multiline':False]['text':'     self.assertReferenceChecks(','line_number':763,'multiline':False]['text':'         device_option=gc,','line_number':764,'multiline':False]['text':'         op=op,','line_number':765,'multiline':False]['text':'         inputs=[X, lengths],','line_number':766,'multiline':False]['text':'         reference=lengths_max_ref,','line_number':767,'multiline':False]['text':'         threshold=1e-4,','line_number':768,'multiline':False]['text':'         output_to_grad='out',','line_number':769,'multiline':False]['text':'     )','line_number':770,'multiline':False]