['text':' First, single source traverse through the netdef.','line_number':12,'multiline':False]['text':' This ensures all newly ordered are reachable from their prefix subset','line_number':13,'multiline':False]['text':' Outputs a permutation of the operators.','line_number':14,'multiline':False]['text':' must specify a type for pattern operators','line_number':54,'multiline':False]['text':' ensure number of inputs are the same','line_number':60,'multiline':False]['text':' ensure number of outputs are the same','line_number':65,'multiline':False]['text':' make sure engine is the same (if specified in pattern)','line_number':78,'multiline':False]['text':' If argument_match is specified, make sure those are the same.','line_number':82,'multiline':False]['text':' g.node(subgraph[i]) should match p_.node(ordered_ops_[i])','line_number':91,'multiline':False]['text':' g.node(g_idx) should match p_.node(p_idx)','line_number':92,'multiline':False]['text':' Let's say ordered_ops_ is [0, 2, 1], with 0 -> 2 being an edge','line_number':106,'multiline':False]['text':' When we try to match onto the second element, let's say our','line_number':107,'multiline':False]['text':' subgraph so far is [4], with it trying to become [4, 5].','line_number':108,'multiline':False]['text':' Then, we need to show that since 0 -> 2 is an edge is ordered_ops_,','line_number':109,'multiline':False]['text':' 4 must be a direct parent of 5 in the subgraph','line_number':110,'multiline':False]['text':' (the indices must match).','line_number':111,'multiline':False]['text':' Similarly, assume there is an edge from 1 -> 2 in p_.','line_number':112,'multiline':False]['text':' When trying to match [4, 5] to [4, 5, 7], we must verify that','line_number':113,'multiline':False]['text':' there exists an edge from 7 -> 5 in G.','line_number':114,'multiline':False]['text':' g_idx doesn't have parent in subgraph that p_[p_idx] has','line_number':117,'multiline':False]['text':' inverse_ops_ gets the index of a p_idx inside of ordered_ops_.','line_number':118,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':119,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':128,'multiline':False]['text':'g','line_number':138,'multiline':True]['text':' Due to strict PatternRule, it suffices to simply check for size','line_number':140,'multiline':False]['text':' Map of PatternNet blob name to Matched blob name.','line_number':152,'multiline':False]['text':' Figures out how to rename the pattern_net to make the replacement fit.','line_number':153,'multiline':False]['text':' Figure out blob renamings','line_number':156,'multiline':False]['text':' Append all the new operators.','line_number':185,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':187,'multiline':False]['text':' Stitch Input from external graph into replaced subgraph','line_number':194,'multiline':False]['text':' binary searches for new_blob amongst input list.','line_number':200,'multiline':False]['text':' if the input came from the graph (instead of G's external input)','line_number':204,'multiline':False]['text':' Stitch Output from replaced subgraph to external graph.','line_number':214,'multiline':False]['text':' binary searches for new_blob amongst input list.','line_number':220,'multiline':False]['text':' if the output goes to the graph (instead of G's external output)','line_number':226,'multiline':False]['text':' Connect all internal edges within replace graph','line_number':237,'multiline':False]['text':' namespace caffe2','line_number':266,'multiline':False]