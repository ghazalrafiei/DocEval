['text':'*
 * PatternNetTransform allows you to create transforms using a simple
 * interface.
 *
 * Simply provide a Pattern NetDef and a Replace NetDef,
 * and this Transform will find subgraphs which fit the pattern net,
 * and replace it with the replace net.
 ','line_number':10,'multiline':True]['text':' external input and output must match!','line_number':22,'multiline':False]['text':'*
   * We want to the final result of subgraph to match the PatternNet in the
   * order of ordered_ops, operator by operator.
   *
   * [[[ ie. g.node(subgraph[i]) should match p.node(ordered_ops[i]) ]]]
   *
   * PatternRule for PatternNetTransform does the following:
   *
   * When trying to insert node idx into subgraph[p_idx],
   * we need to see if the edges between index and the
   * subgraph match the edges between p[ordered_ops[idx]]
   * and p[ordered_ops[0]...ordered_ops[p_idx-1]].
   ','line_number':45,'multiline':True]['text':'*
   * ValidatorRule for PatternNetTransform does the following:
   *
   * Checks if the size of subgraph and p.size() are the same. That's it!
   ','line_number':62,'multiline':True]['text':'*
   * ReplaceRule for PatternNet Transform does the following:
   *
   * 1) Figure out edge renamings for edges going into/out of the subgraph.
   * That is, for each blob in the pattern graph, what is it called in the
   * matched subgraph?
   *
   * 2) Remove the matched subgraph.
   *
   * 3) Append the replace graph's operators to the graph's operators, and use
   *    the renamings to rename the blob names.
   *
   * 4) Create all the children/parent relationships within the replaced graph,
   *    and stitch together the inputs and outputs into the rest of the graph,
   *    matching the removed subgraph.
   ','line_number':70,'multiline':True]['text':'*
   * This returns a permutation of the Pattern Net's operators.
   * The permutation satisfies this property:
   *    - For any index i, order(i) is a neighbor of some node from
   *      {order(1), ..., order(i-1)}.
   *
   * Why is this important? Consider the following case:
   * PatternNet: 0 ---> 2 <--- 1
   *
   * When we have matched onto [0], and trying to add [1] to our subgraph,
   * we cannot, since PatternMatch only considers neighbors of the current
   * subgraph as a candidate next node.
   *
   * Therefore, we must present the subgraph in an order such that each node is
   * a neighbor of its prefix subgraph. One ordering for the above example is
   * [0, 2, 1].
   ','line_number':90,'multiline':True]['text':' Graph of Pattern NetDef','line_number':109,'multiline':False]['text':' The Traversal Order of the Pattern Net's Operators','line_number':112,'multiline':False]['text':' This is a permutation of the numbers from {0, ..., p.size()-1}','line_number':113,'multiline':False]['text':' The Inverse of the Traversal Order of the Pattern Net's Operators','line_number':116,'multiline':False]['text':' That is, inverse_ops[ordered_ops[i]] == i is always true.','line_number':117,'multiline':False]['text':' Graph of Replace NetDef','line_number':120,'multiline':False]['text':' This flag determines if the transform will match operator arguments.','line_number':123,'multiline':False]['text':' namespace caffe2','line_number':133,'multiline':False]