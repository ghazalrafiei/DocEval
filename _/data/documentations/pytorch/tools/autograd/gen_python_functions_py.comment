['text':' Generates Python bindings for ATen functions','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' The bindings are generated as methods on python_variable or functions on the','line_number':3,'multiline':False]['text':' torch._C._nn. torch._C._fft, torch._C._linalg, torch._C._nested, torch._C._sparse','line_number':4,'multiline':False]['text':' or torch._C._special objects.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Code tries to stick to the following rules:','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' - templates should be colocated with the functions that use them.','line_number':10,'multiline':False]['text':'   no templates are currently shared between functions, but if that','line_number':11,'multiline':False]['text':'   happens, maybe put the template with the first one','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' - don't use environment dictionaries when calling template.substitute().','line_number':14,'multiline':False]['text':'   pass named arguments directly for everything, otherwise it's much too','line_number':15,'multiline':False]['text':'   hard to track what's actually being used and by who','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' - colocate any new hacks/adjustments with existing ones of the same kind.','line_number':18,'multiline':False]['text':'   ideally in a data structure rather than code if possible. See e.g.','line_number':19,'multiline':False]['text':'   SCHEMA_DEFAULT_CONVERSION_HACKS, etc.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' - similarly, conversions from one format to another should ideally happen','line_number':22,'multiline':False]['text':'   all at once in a single place.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' - no nontrivial nested functions. couple-liners are ok but please no more.','line_number':25,'multiline':False]['text':'   especially avoid functions that read/write outer variables defined far away.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' - raise RuntimeError instead of asserting, and put as much','line_number':28,'multiline':False]['text':'   information as is available into the message. I.e. no need to','line_number':29,'multiline':False]['text':'   plumb in new params whose only purpose is to fill out an error','line_number':30,'multiline':False]['text':'   message, but use what's there','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' declarations blocklist','line_number':76,'multiline':False]['text':' We skip codegen for these functions, for various reasons.','line_number':77,'multiline':False]['text':' Future PRs will categorize this list and eliminate or hoist','line_number':78,'multiline':False]['text':' them out of eager-only codegen.','line_number':79,'multiline':False]['text':' See https://github.com/pytorch/pytorch/issues/30788','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' These functions require manual Python bindings or are not exposed to Python','line_number':83,'multiline':False]['text':' these need to be an attributes in Python, not functions','line_number':139,'multiline':False]['text':' overrideable functions for backend extension','line_number':142,'multiline':False]['text':' used for forward AD internals','line_number':154,'multiline':False]['text':' only used by the functionalization pass, doesn't need to be exposed to python','line_number':156,'multiline':False]['text':' only used by the functionalization pass','line_number':157,'multiline':False]['text':' only used by the functionalization pass','line_number':158,'multiline':False]['text':' only used by the functionalization pass','line_number':159,'multiline':False]['text':' only used by the functionalization pas','line_number':161,'multiline':False]['text':' These function signatures are not exposed to Python. Note that this signature','line_number':170,'multiline':False]['text':' list does not support regex.','line_number':171,'multiline':False]['text':' NativeFunctions that are entirely code-generated should not get python bindings','line_number':186,'multiline':False]['text':' because these codegen implementations are often inefficient. A handful of','line_number':187,'multiline':False]['text':' view_copy style ops were exposed accidentally when they were handwritten and now','line_number':188,'multiline':False]['text':' that we are moving them to codegen for bc reasons we need to keep them exposed in','line_number':189,'multiline':False]['text':' python.','line_number':190,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':246,'multiline':False]['text':'','line_number':247,'multiline':False]['text':'                            Main Function','line_number':248,'multiline':False]['text':'','line_number':249,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':250,'multiline':False]['text':' NOTE: num_shards here must be synced with gatherTorchFunctions in','line_number':279,'multiline':False]['text':'       torch/csrc/autograd/python_torch_functions_manual.cpp','line_number':280,'multiline':False]['text':' Currently, we only use `functions` to generate `return_types` bindings.','line_number':352,'multiline':False]['text':' All methods which return namedtuple have function variant at this point.','line_number':353,'multiline':False]['text':' If any method only operator with namedtuple is added in the future,','line_number':354,'multiline':False]['text':' we will have to address that.','line_number':355,'multiline':False]['text':' The deprecated.yaml doesn't have complete type information, we need','line_number':577,'multiline':False]['text':' find and leverage the original ATen signature (to which it delegates','line_number':578,'multiline':False]['text':' the call) to generate the full python signature.','line_number':579,'multiline':False]['text':' We join the deprecated and the original signatures using type-only form.','line_number':580,'multiline':False]['text':' group the original ATen signatures by name','line_number':582,'multiline':False]['text':' find matching original signatures for each deprecated signature','line_number':587,'multiline':False]['text':' HACK: these are fixed constants used to pass the aten function.','line_number':600,'multiline':False]['text':' The type must be known ahead of time','line_number':601,'multiline':False]['text':' Map deprecated signature arguments to their aten signature and test','line_number':611,'multiline':False]['text':' if the types and alias annotation match.','line_number':612,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':681,'multiline':False]['text':'','line_number':682,'multiline':False]['text':'                         Named Tuple Codegen','line_number':683,'multiline':False]['text':'','line_number':684,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':685,'multiline':False]['text':' map from unique name + field name lists to typedef name','line_number':704,'multiline':False]['text':' typedef declarations and init code','line_number':705,'multiline':False]['text':' use @with_native_function?','line_number':712,'multiline':False]['text':' map from unique name + field name lists to typedef name','line_number':736,'multiline':False]['text':' function definition to register the typedef','line_number':737,'multiline':False]['text':' register call for the typedef','line_number':738,'multiline':False]['text':' use @with_native_function?','line_number':747,'multiline':False]['text':' map from unique name + field name lists to typedef name','line_number':786,'multiline':False]['text':' function declaration to register the typedef','line_number':787,'multiline':False]['text':' use @with_native_function?','line_number':794,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':808,'multiline':False]['text':'','line_number':809,'multiline':False]['text':'                         Method Impl Codegen','line_number':810,'multiline':False]['text':'','line_number':811,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':812,'multiline':False]['text':' python binding for all overloads of a particular function/method','line_number':814,'multiline':False]['text':' handler for a single parsed signature - may be a single overload or','line_number':837,'multiline':False]['text':' a pair of overloads that whose signatures only differ in output params','line_number':838,'multiline':False]['text':' (plugged into PY_VARIABLE_METHOD_VARARGS as an item in ${dispatch})','line_number':839,'multiline':False]['text':' python binding for single-overload function/method','line_number':848,'multiline':False]['text':' python binding for a method with no args, shortcuts parsing','line_number':869,'multiline':False]['text':' handler for output/no-output overload pair','line_number':991,'multiline':False]['text':' dispatch output and no-output variants, branch on _r.isNone(<out_idx>)','line_number':1016,'multiline':False]['text':' no-output version only','line_number':1030,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1036,'multiline':False]['text':'','line_number':1037,'multiline':False]['text':'                    Forward Declarations Codegen','line_number':1038,'multiline':False]['text':'','line_number':1039,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1040,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1067,'multiline':False]['text':'','line_number':1068,'multiline':False]['text':'              Method Def (Binding Table Entry) Codegen','line_number':1069,'multiline':False]['text':'','line_number':1070,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1071,'multiline':False]['text':' PyMethodDef entry for binary op, throws not implemented error','line_number':1087,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':'                   Overload Sorting and Grouping','line_number':1104,'multiline':False]['text':'','line_number':1105,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1106,'multiline':False]['text':' first group by signature ignoring out arguments','line_number':1115,'multiline':False]['text':' This function declares a partial order on declarations, and sorts them according','line_number':1166,'multiline':False]['text':' to its linear extension. This is necessary, because there's some ambiguity in the','line_number':1167,'multiline':False]['text':' choice of overload, and we want a different order.','line_number':1168,'multiline':False]['text':'','line_number':1169,'multiline':False]['text':' See Note[Order of overloads matters]','line_number':1170,'multiline':False]['text':'','line_number':1171,'multiline':False]['text':' A few examples of ambiguous python signature pairs.','line_number':1172,'multiline':False]['text':'','line_number':1173,'multiline':False]['text':'   All parameters have the same type, except one taking Tensor the other taking','line_number':1174,'multiline':False]['text':'   Scalar. A numeric PyObject can be casted into Tensor, and a zero-dim Tensor','line_number':1175,'multiline':False]['text':'   object can be accepted as Scalar type parameter (see python_arg_parser.cpp).','line_number':1176,'multiline':False]['text':'   Therefore, same input arguments might be accepted by either python signature.','line_number':1177,'multiline':False]['text':'   We want to always parse the one taking Tensor first.','line_number':1178,'multiline':False]['text':'','line_number':1179,'multiline':False]['text':'     bitwise_and(Tensor input, Tensor other, *, Tensor out=None)','line_number':1180,'multiline':False]['text':'     bitwise_and(Tensor input, Scalar other, *, Tensor out=None)','line_number':1181,'multiline':False]['text':'','line_number':1182,'multiline':False]['text':'   If they have different number of parameters then they are not ambiguous - but','line_number':1183,'multiline':False]['text':'   the difference on output param can be ignored as it's optional.','line_number':1184,'multiline':False]['text':'','line_number':1185,'multiline':False]['text':'     multiply(Tensor input, Tensor other, *, Tensor out=None)','line_number':1186,'multiline':False]['text':'     multiply(Tensor input, Scalar other)','line_number':1187,'multiline':False]['text':'','line_number':1188,'multiline':False]['text':'   Both positional args and keyword-only args are considered together.','line_number':1189,'multiline':False]['text':'','line_number':1190,'multiline':False]['text':'     subtract(Tensor other, *, Scalar alpha=1)','line_number':1191,'multiline':False]['text':'     subtract(Scalar other, Scalar alpha=1)','line_number':1192,'multiline':False]['text':'','line_number':1193,'multiline':False]['text':' A few ambiguous cases which it does NOT handle yet.','line_number':1194,'multiline':False]['text':'','line_number':1195,'multiline':False]['text':'   If there is any difference in other parameters besides the Tensor/Scalar','line_number':1196,'multiline':False]['text':'   difference, then they are not considered ambiguous by this method anymore.','line_number':1197,'multiline':False]['text':'   However, the difference could be too trivial to disambiguate.','line_number':1198,'multiline':False]['text':'','line_number':1199,'multiline':False]['text':'     foo(Tensor input, Scalar other, Scalar bar)','line_number':1200,'multiline':False]['text':'     foo(Tensor input, Tensor other, double bar)','line_number':1201,'multiline':False]['text':'','line_number':1202,'multiline':False]['text':'   If they are taking different number of parameters then they are not considered','line_number':1203,'multiline':False]['text':'   ambiguous anymore, even if the difference is only on optional kwargs.','line_number':1204,'multiline':False]['text':'','line_number':1205,'multiline':False]['text':'     foo(Scalar other, Scalar alpha=1)','line_number':1206,'multiline':False]['text':'     foo(Tensor other, *, Scalar alpha=1, Scalar beta=1)','line_number':1207,'multiline':False]['text':'','line_number':1208,'multiline':False]['text':' NB: Smaller here means lower priority','line_number':1214,'multiline':False]['text':' In the discussion https://github.com/pytorch/pytorch/issues/54555 it has been','line_number':1225,'multiline':False]['text':' discussed why it is important to prioritize int/int? over int[]','line_number':1226,'multiline':False]['text':' TensorList currently throws an error during argument parsing, that's why it needs to be','line_number':1230,'multiline':False]['text':' last in signature ordering. See discussion: https://github.com/pytorch/pytorch/issues/58087','line_number':1231,'multiline':False]['text':' Prioritize IntArrayRef overload over SymIntArrayRef','line_number':1235,'multiline':False]['text':' Make sure both in, SymInt are sorted consistently w.r.t. Tensor since Tensor can be implicitly','line_number':1239,'multiline':False]['text':' converted to either int or SymInt.  Prioritize the Tensor overload since it otherwise gets shadowed.','line_number':1240,'multiline':False]['text':' TODO: should use some canonical form instead of 'str(arg.type)' - see comments','line_number':1250,'multiline':False]['text':' above. The old codegen used the deprecated 'dynamic_type(arg.type)', which','line_number':1251,'multiline':False]['text':' ignores the optional annotation, i.e. 'Scalar' and 'Scalar?'.','line_number':1252,'multiline':False]['text':' First sort by signature','line_number':1260,'multiline':False]['text':' Construct the relation graph','line_number':1265,'multiline':False]['text':' Use a topological sort to sort overloads according to the partial order.','line_number':1275,'multiline':False]['text':' The size of sorted_ids will grow to N eventually.','line_number':1280,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1292,'multiline':False]['text':'','line_number':1293,'multiline':False]['text':'                       Codegen API Integration','line_number':1294,'multiline':False]['text':'','line_number':1295,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #','line_number':1296,'multiline':False]['text':' header comments','line_number':1312,'multiline':False]['text':' dispatch lambda signature','line_number':1320,'multiline':False]['text':' dispatch lambda body','line_number':1327,'multiline':False]['text':' from arg parser outputs to dispatch lambda arguments','line_number':1331,'multiline':False]['text':' scatter fields','line_number':1337,'multiline':False]['text':' TODO: Checking `ps.method and ('requires_grad' in parser_outputs)` is a hacky','line_number':1338,'multiline':False]['text':'       solution for enabling the 'requires_grad' argument for tensor methods','line_number':1339,'multiline':False]['text':'       new_full, new_empty, and new_zeros. A much better but more difficult to','line_number':1340,'multiline':False]['text':'       implement solution involves refactoring according to Ed's description here:','line_number':1341,'multiline':False]['text':'       https://github.com/pytorch/pytorch/issues/36455#issuecomment-614767589','line_number':1342,'multiline':False]