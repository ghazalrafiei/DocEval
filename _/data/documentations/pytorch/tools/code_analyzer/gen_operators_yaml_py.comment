['text':'!/usr/bin/env python3','line_number':1,'multiline':False]['text':' Generate YAML file containing the operators used for a specific PyTorch model.','line_number':19,'multiline':False]['text':' ------------------------------------------------------------------------------','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' This binary is responsible for generating the model_operators.yaml file for','line_number':22,'multiline':False]['text':' each model from a pt_operator_library() BUCK macro invocation.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' Output YAML file format:','line_number':25,'multiline':False]['text':' ------------------------','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' <BEGIN FILE CONTENTS>','line_number':28,'multiline':False]['text':' include_all_non_op_selectives: False','line_number':29,'multiline':False]['text':' include_all_operators: False','line_number':30,'multiline':False]['text':' debug_info:','line_number':31,'multiline':False]['text':'   - model1@v100','line_number':32,'multiline':False]['text':'   - model2@v50','line_number':33,'multiline':False]['text':' operators:','line_number':34,'multiline':False]['text':'   aten::add:','line_number':35,'multiline':False]['text':'     is_root_operator: Yes','line_number':36,'multiline':False]['text':'     is_used_for_training: Yes','line_number':37,'multiline':False]['text':'     include_all_overloads: No','line_number':38,'multiline':False]['text':'     debug_info:','line_number':39,'multiline':False]['text':'       - model1@v100','line_number':40,'multiline':False]['text':'       - model2@v50','line_number':41,'multiline':False]['text':'   aten::add.int:','line_number':42,'multiline':False]['text':'     is_root_operator: No','line_number':43,'multiline':False]['text':'     is_used_for_training: No','line_number':44,'multiline':False]['text':'     include_all_overloads: Yes','line_number':45,'multiline':False]['text':' kernel_metadata:','line_number':46,'multiline':False]['text':'   add_kernel:','line_number':47,'multiline':False]['text':'     - Int8','line_number':48,'multiline':False]['text':'     - UInt32','line_number':49,'multiline':False]['text':'   sub_kernel:','line_number':50,'multiline':False]['text':'     - Int16','line_number':51,'multiline':False]['text':'     - Float','line_number':52,'multiline':False]['text':' <END FILE CONTENTS>','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' There are a few main inputs to this application','line_number':55,'multiline':False]['text':' -----------------------------------------------','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' 1. Inference Root Operators (--root-ops): Root operators (called directly','line_number':58,'multiline':False]['text':'    from TorchScript) used by inference use-cases.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' 2. Training Root Operators (--training-root-ops): Root operators used','line_number':61,'multiline':False]['text':'    by training use-cases. Currently, this list is the list of all operators','line_number':62,'multiline':False]['text':'    used by training, and not just the root operators. All Training ops are','line_number':63,'multiline':False]['text':'    also considered for inference, so these are merged into inference ops.','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' 3. Operator Depencency Graph (--dep-graph-yaml-path): A path to the','line_number':66,'multiline':False]['text':'    operator dependency graph used to determine which operators depend on','line_number':67,'multiline':False]['text':'    which other operators for correct functioning. This is used for','line_number':68,'multiline':False]['text':'    generating the transitive closure of all the operators used by the','line_number':69,'multiline':False]['text':'    model based on the root operators when static selective build is used.','line_number':70,'multiline':False]['text':'    For tracing based selective build, we don't need to perform this','line_number':71,'multiline':False]['text':'    transitive cloure.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' 4. Model Metadata (--model-name, --model-versions, --model-assets,','line_number':74,'multiline':False]['text':'    --model-backends): Self-descriptive. These are used to tell this','line_number':75,'multiline':False]['text':'    script which model operator lists to fetch from the Model','line_number':76,'multiline':False]['text':'    Build Metadata YAML files.','line_number':77,'multiline':False]['text':'','line_number':78,'multiline':False]['text':' 5. Model YAML files (--models-yaml-path): These yaml files contains','line_number':79,'multiline':False]['text':'    (for each model/version/asset/backend) the set of used root and traced','line_number':80,'multiline':False]['text':'    operators. This is used to extract the actual set of operators','line_number':81,'multiline':False]['text':'    needed to be included in the build.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':' TODO: Handle backend later','line_number':104,'multiline':False]['text':' Returns if a the specified rule is a new or old style pt_operator_library','line_number':110,'multiline':False]['text':' Verifies that specified model_name, and all specified versions and assets','line_number':115,'multiline':False]['text':' appear in at least one model yaml. Throws if verification is failed,','line_number':116,'multiline':False]['text':' returns None on success','line_number':117,'multiline':False]['text':' at least one is missing','line_number':144,'multiline':False]['text':' Uses the selected models configs and then combines them into one dictionary,','line_number':178,'multiline':False]['text':' formats them as a string, and places the string into output as a top level debug_info','line_number':179,'multiline':False]['text':' maps asset name -> dict of asset metadata like hashes','line_number':186,'multiline':False]['text':' Will later be used in gen_oplist to generate the model/version/asset checking','line_number':199,'multiline':False]['text':' initialize variables for static build from the pt_operator_library rule','line_number':243,'multiline':False]['text':' end if','line_number':257,'multiline':False]['text':' Go through each yaml file and retrieve operator information.','line_number':267,'multiline':False]['text':' If this YAML file doesn't specify any traced operators, then it is using','line_number':270,'multiline':False]['text':' the static analysis selective build approach of finding transitively','line_number':271,'multiline':False]['text':' used operators, and we should update root_ops with the set of root','line_number':272,'multiline':False]['text':' operators, all of whose overloads must be included. In addition, these','line_number':273,'multiline':False]['text':' root_ops will be further expanded using the transitive closure of','line_number':274,'multiline':False]['text':' operator dependencies.','line_number':275,'multiline':False]['text':' If this YAML file specifies traced operators, then it is using','line_number':278,'multiline':False]['text':' the tracing based selective build approach of finding used','line_number':279,'multiline':False]['text':' operators, and we should update root_ops_unexpand with the set of root','line_number':280,'multiline':False]['text':' operators whose overloads don't need to be included. In addition, these','line_number':281,'multiline':False]['text':' root_ops_unexpand will NOT be further expanded. If the train flag is','line_number':282,'multiline':False]['text':' set then the ops will be used for training, so we put them in a separate','line_number':283,'multiline':False]['text':' set','line_number':284,'multiline':False]['text':' This following section on transitive closure is relevant to static build only','line_number':307,'multiline':False]['text':' If no canonical_root_ops exist, don't compute the transitive closure','line_number':309,'multiline':False]['text':' otherwise, we will include __BASE__ and __ROOT__ ops and mark them as required','line_number':310,'multiline':False]['text':' for inference.','line_number':311,'multiline':False]['text':' If no canonical_training_root_ops exist, don't compute the transitive closure','line_number':318,'multiline':False]['text':' otherwise, we will include __BASE__ and __ROOT__ ops and mark them as required','line_number':319,'multiline':False]['text':' for training.','line_number':320,'multiline':False]['text':' bucketed_ops holds sets of operators that correspond to specific semantic buckets. For','line_number':328,'multiline':False]['text':' example:','line_number':329,'multiline':False]['text':'','line_number':330,'multiline':False]['text':' 1. Root Operators not used for training w/o full overload inclusion','line_number':331,'multiline':False]['text':' 2. Root Operators not used for training w/ full overload inclusion','line_number':332,'multiline':False]['text':' 3. Root Operators used for training w/o full overload inclusion','line_number':333,'multiline':False]['text':' 4. Root Operators used for training w/ full overload inclusion','line_number':334,'multiline':False]['text':' 5. Non-root Operators not used for training w/o full overload inclusion','line_number':335,'multiline':False]['text':' etc...','line_number':336,'multiline':False]['text':'','line_number':337,'multiline':False]['text':' Basically for each of the 3 boolean conditional, there are 2','line_number':338,'multiline':False]['text':' options (True/False).','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' START STATIC BUILD OPS','line_number':343,'multiline':False]['text':' END STATIC BUILD OPS','line_number':399,'multiline':False]['text':' START TRACING BASED BUILD OPS','line_number':401,'multiline':False]['text':' END TRACING BASED BUILD OPS','line_number':457,'multiline':False]['text':' Merge dictionaries together to remove op duplication','line_number':459,'multiline':False]['text':' Loop over all operators, and if any of the them specifies that','line_number':464,'multiline':False]['text':' all overloads need to be included, then set include_all_non_op_selectives','line_number':465,'multiline':False]['text':' to True, since it indicates that this operator list came from something','line_number':466,'multiline':False]['text':' other than a traced operator list.','line_number':467,'multiline':False]