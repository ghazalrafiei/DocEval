['text':' TODO: Consider defining some aliases for our Union[...] types, to make','line_number':74,'multiline':False]['text':' the stubs to read on the human eye.','line_number':75,'multiline':False]['text':' NOTE: specifying indices for Tensor.__getitem__','line_number':80,'multiline':False]['text':' We can imitate numpy's definition of ndarray.__getitem__ found in numpy/__init__.pyi:','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' key: (','line_number':83,'multiline':False]['text':'     None','line_number':84,'multiline':False]['text':'     | slice','line_number':85,'multiline':False]['text':'     | ellipsis','line_number':86,'multiline':False]['text':'     | SupportsIndex','line_number':87,'multiline':False]['text':'     | _ArrayLikeInt_co','line_number':88,'multiline':False]['text':'     | tuple[None | slice | ellipsis | _ArrayLikeInt_co | SupportsIndex, ...]','line_number':89,'multiline':False]['text':' )','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' where:','line_number':92,'multiline':False]['text':'','line_number':93,'multiline':False]['text':' _ArrayLikeInt_co = _DualArrayLike[','line_number':94,'multiline':False]['text':'     dtype[Union[bool_, integer[Any]]],','line_number':95,'multiline':False]['text':'     Union[bool, int],','line_number':96,'multiline':False]['text':' ]','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' and','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' _DualArrayLike = Union[','line_number':101,'multiline':False]['text':'     _SupportsArray[_DType],','line_number':102,'multiline':False]['text':'     _NestedSequence[_SupportsArray[_DType]],','line_number':103,'multiline':False]['text':'     _T,','line_number':104,'multiline':False]['text':'     _NestedSequence[_T],','line_number':105,'multiline':False]['text':' ]','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' Moreover, _NestedSequence is a Protocol that matches arbitrary nesting of list/tuple.','line_number':108,'multiline':False]['text':' We can substitute and simplify:','line_number':109,'multiline':False]['text':' _SupportsArray -> Tensor','line_number':110,'multiline':False]['text':' _ArrayLikeInt_co -> [bool | int | | Tensor | NestedSequence[bool | int] | NestedSequence[Tensor]]','line_number':111,'multiline':False]['text':' which leaves us with key: T | tuple[T, ...], where T is:','line_number':112,'multiline':False]['text':' T = (','line_number':113,'multiline':False]['text':'     None | bool | int | slice | ellipsis | SupportsIndex','line_number':114,'multiline':False]['text':'     | Tensor | _NestedSequence[Tensor] | _NestedSequence[bool | int]','line_number':115,'multiline':False]['text':' )','line_number':116,'multiline':False]['text':' NOTE: ellipsis is equal to type[Ellipsis] in stub files.','line_number':118,'multiline':False]['text':' not SupportsIndex!','line_number':119,'multiline':False]['text':' defined in functional','line_number':132,'multiline':False]['text':' Somehow, these are defined in both _C and in functional. Ick!','line_number':134,'multiline':False]['text':' Manually define named tensor type stubs in __init__.pyi.in','line_number':136,'multiline':False]['text':' These are handled specially by python_arg_parser.cpp','line_number':150,'multiline':False]['text':' reverse arithmetic','line_number':191,'multiline':False]['text':' logic','line_number':197,'multiline':False]['text':' inplace ops','line_number':208,'multiline':False]['text':' we have to do this by hand, because they are hand-bound in Python','line_number':224,'multiline':False]['text':' unsafe override https://github.com/python/mypy/issues/5704','line_number':234,'multiline':False]['text':' Some deprecated ops that are on the blocklist are still included in pyi','line_number':256,'multiline':False]['text':' deprecated signatures have separate entries for their functional and out variants','line_number':260,'multiline':False]['text':' (as opposed to the native ops, which fuse the two into a single signature).','line_number':261,'multiline':False]['text':' generate the functional variant here, if an out variant exists.','line_number':262,'multiline':False]['text':' PythonSignatureGroups that have both a functional + out variant get a single signature, with an optional out argument','line_number':267,'multiline':False]['text':' Generates the out variant if one exists. Otherwise, generate the functional variant','line_number':268,'multiline':False]['text':' Some operators also additionally have a vararg variant of their signature','line_number':274,'multiline':False]['text':' If return_indices is positional arg, everything before should have no default','line_number':286,'multiline':False]['text':' Otherwise force return_indices to be kwarg','line_number':295,'multiline':False]['text':' TODO the list for `torch._C._nn` is nonexhaustive','line_number':327,'multiline':False]['text':' Functions imported into `torch.nn.functional` from `torch`, perhaps being filtered','line_number':476,'multiline':False]['text':' through an `_add_docstr` call','line_number':477,'multiline':False]['text':' Functions imported into `torch.nn.functional` from `torch._C._nn`','line_number':505,'multiline':False]['text':' This is from `torch._C._nn` but renamed','line_number':521,'multiline':False]['text':' Functions generated by `torch._jit_internal.boolean_dispatch` in `nn.functional`','line_number':524,'multiline':False]['text':' There's no fractional_max_pool1d','line_number':557,'multiline':False]['text':' Some of this logic overlaps with generate_python_signature in','line_number':594,'multiline':False]['text':' tools/autograd/gen_python_functions.py; however, this','line_number':595,'multiline':False]['text':' function is all about generating mypy type signatures, whereas','line_number':596,'multiline':False]['text':' the other function generates are custom format for argument','line_number':597,'multiline':False]['text':' checking.  If you are update this, consider if your change','line_number':598,'multiline':False]['text':' also needs to update the other file.','line_number':599,'multiline':False]['text':' Dictionary for NamedTuple definitions','line_number':601,'multiline':False]['text':' Generate type signatures for top-level functions','line_number':604,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':605,'multiline':False]['text':' These functions are explicitly disabled by','line_number':690,'multiline':False]['text':' SKIP_PYTHON_BINDINGS because they are hand bound.','line_number':691,'multiline':False]['text':' Correspondingly, we must hand-write their signatures.','line_number':692,'multiline':False]['text':' deprecated namedtuples are currently not included for torch functions','line_number':955,'multiline':False]['text':' NB: Keep this in sync with enum in aten/src/ATen/core/Reduction.h','line_number':963,'multiline':False]['text':' Match both:','line_number':966,'multiline':False]['text':' ": Union[Tensor, Tuple[Tensor, ...], List[Tensor]] = None"','line_number':967,'multiline':False]['text':' ": Union[Tuple[Tensor, ...], List[Tensor]] = None"','line_number':968,'multiline':False]['text':' Generate type signatures for Tensor methods','line_number':982,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':983,'multiline':False]['text':' new and __init__ have the same signatures differ only in return type','line_number':1003,'multiline':False]['text':' Adapted from legacy_tensor_ctor and legacy_tensor_new','line_number':1004,'multiline':False]['text':' pyi tensor methods don't currently include deprecated signatures for some reason','line_number':1168,'multiline':False]['text':' TODO: we should probably add them in','line_number':1169,'multiline':False]['text':' deprecated namedtuples are currently not included for torch functions','line_number':1187,'multiline':False]['text':' TODO: Missing type hints for nn','line_number':1204,'multiline':False]['text':' Generate namedtuple definitions','line_number':1206,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':1207,'multiline':False]['text':' Generate type signatures for legacy classes','line_number':1211,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':1212,'multiline':False]['text':' Generate type signatures for dtype classes','line_number':1231,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':1232,'multiline':False]['text':' TODO: don't explicitly list dtypes here; get it from canonical','line_number':1234,'multiline':False]['text':' source','line_number':1235,'multiline':False]['text':' Generate __all__ directive','line_number':1278,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':1279,'multiline':False]['text':' Include only the functions that contain hints, to prevent undefined','line_number':1281,'multiline':False]['text':' symbols to be included in the `__all__` directive.','line_number':1282,'multiline':False]['text':' Dispatch key hints','line_number':1290,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~','line_number':1291,'multiline':False]['text':' Tags Enum type hints','line_number':1297,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':1298,'multiline':False]['text':' Write out the stub','line_number':1305,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~','line_number':1306,'multiline':False]