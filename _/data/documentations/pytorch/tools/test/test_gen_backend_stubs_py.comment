['text':' Owner(s): ["module: codegen"]','line_number':1,'multiline':False]['text':' noqa: F401','line_number':9,'multiline':False]['text':' gen_backend_stubs.py is an integration point that is called directly by external backends.','line_number':17,'multiline':False]['text':' The tests here are to confirm that badly formed inputs result in reasonable error messages.','line_number':18,'multiline':False]['text':' Scrub out the temp file name from any error messages to simplify assertions.','line_number':45,'multiline':False]['text':' External codegen on a yaml file with no operators is effectively a no-op,','line_number':80,'multiline':False]['text':' so there's no reason to parse the backend','line_number':81,'multiline':False]['text':' External codegen on a yaml file with no operators is effectively a no-op,','line_number':92,'multiline':False]['text':' so there's no reason to parse the backend','line_number':93,'multiline':False]['text':' noqa: B950','line_number':129,'multiline':False]['text':' supported is a single item (it should be a list)','line_number':152,'multiline':False]['text':' supported contains an op that isn't in native_functions.yaml','line_number':164,'multiline':False]['text':' The backend is valid, but doesn't have a valid autograd key. They can't override autograd kernels in that case.','line_number':176,'multiline':False]['text':' Only using Vulkan here because it has a valid backend key but not an autograd key- if this changes we can update the test.','line_number':177,'multiline':False]['text':' noqa: B950','line_number':189,'multiline':False]['text':' in an operator group, currently all operators must either be registered to the backend or autograd kernel.','line_number':191,'multiline':False]['text':' Here, functional and out mismatch','line_number':192,'multiline':False]['text':' noqa: B950','line_number':204,'multiline':False]['text':' in an operator group, currently all operators must either be registered to the backend or autograd kernel.','line_number':207,'multiline':False]['text':' Here, functional and inplace mismatch','line_number':208,'multiline':False]['text':' noqa: B950','line_number':220,'multiline':False]['text':' Currently, the same operator can't be listed under both 'supported' and 'autograd', which would','line_number':223,'multiline':False]['text':' involve registering the same kernel to both the XLA and AutogradXLA keys.','line_number':224,'multiline':False]['text':' If we need that functionality in the future, we'll need to augment the codegen.','line_number':225,'multiline':False]['text':' noqa: B950','line_number':237,'multiline':False]['text':' unrecognized extra yaml key','line_number':240,'multiline':False]['text':' noqa: B950','line_number':251,'multiline':False]['text':' if use_out_as_primary is provided, it must be a bool','line_number':254,'multiline':False]['text':' noqa: B950','line_number':266,'multiline':False]['text':' if device_guard is provided, it must be a bool','line_number':268,'multiline':False]['text':' noqa: B950','line_number':280,'multiline':False]['text':' Codegen will expect two kernel names (and try to parse them with regex):','line_number':290,'multiline':False]['text':' XLANativeFunctions::abs(...)','line_number':291,'multiline':False]['text':' XLANativeFunctions::add(...)','line_number':292,'multiline':False]