['text':' Ninja','line_number':28,'multiline':False]['text':' Use ninja if it is on the PATH. Previous version of PyTorch required the','line_number':29,'multiline':False]['text':' ninja python package, but we no longer use it, so we do not have to import it','line_number':30,'multiline':False]['text':' This error indicates that there was a problem with cmake, the','line_number':99,'multiline':False]['text':' Python backtrace adds no signal here so skip over it by catching','line_number':100,'multiline':False]['text':' the error and exiting manually','line_number':101,'multiline':False]['text':' Everything's in place. Do not rerun.','line_number':137,'multiline':False]['text':' Avoid conflicts in '-G' and the `CMAKE_GENERATOR`','line_number':142,'multiline':False]['text':' Store build options that are directly stored in environment variables','line_number':184,'multiline':False]['text':' Build options that do not start with "BUILD_", "USE_", or "CMAKE_" and are directly controlled by env vars.','line_number':187,'multiline':False]['text':' This is a dict that maps environment variables to the corresponding variable name in CMake.','line_number':188,'multiline':False]['text':' Key: environment variable name. Value: Corresponding variable name to be passed to CMake. If you are','line_number':190,'multiline':False]['text':' adding a new build option to this block: Consider making these two names identical and adding this option','line_number':191,'multiline':False]['text':' in the block below.','line_number':192,'multiline':False]['text':' Build options that have the same environment variable name and CMake variable name and that do not start','line_number':199,'multiline':False]['text':' with "BUILD_", "USE_", or "CMAKE_". If you are adding a new build option, also make sure you add it to','line_number':200,'multiline':False]['text':' CMakeLists.txt.','line_number':201,'multiline':False]['text':' Aliases which are lower priority than their canonical option','line_number':238,'multiline':False]['text':' We currently pass over all environment variables that start with "BUILD_", "USE_", and "CMAKE_". This is','line_number':247,'multiline':False]['text':' because we currently have no reliable way to get the list of all build options we have specified in','line_number':248,'multiline':False]['text':' CMakeLists.txt. (`cmake -L` won't print dependent options when the dependency condition is not met.) We','line_number':249,'multiline':False]['text':' will possibly change this in the future by parsing CMakeLists.txt ourselves (then additional_options would','line_number':250,'multiline':False]['text':' also not be needed to be specified here).','line_number':251,'multiline':False]['text':' The default value cannot be easily obtained in CMakeLists.txt. We set it here.','line_number':265,'multiline':False]['text':' Some options must be post-processed. Ideally, this list will be shrunk to only one or two options in the','line_number':275,'multiline':False]['text':' future, as CMake can detect many of these libraries pretty comfortably. We have them here for now before CMake','line_number':276,'multiline':False]['text':' integration is completed. They appear here not in the CMake.defines call below because they start with either','line_number':277,'multiline':False]['text':' "BUILD_" or "USE_" and must be overwritten here.','line_number':278,'multiline':False]['text':' Note: Do not add new build options to this dict if it is directly read from environment variable -- you','line_number':281,'multiline':False]['text':' only need to add one in `CMakeLists.txt`. All build options that start with "BUILD_", "USE_", or "CMAKE_"','line_number':282,'multiline':False]['text':' are automatically passed to CMake; For other options you can add to additional_options above.','line_number':283,'multiline':False]['text':' Most library detection should go to CMake script, except this one, which Python can do a much better job','line_number':286,'multiline':False]['text':' due to NumPy's inherent Pythonic nature.','line_number':287,'multiline':False]['text':' Options starting with CMAKE_','line_number':292,'multiline':False]['text':' We set some CMAKE_* options in our Python build code instead of relying on the user's direct settings. Emit an','line_number':297,'multiline':False]['text':' error if the user also attempts to set these CMAKE options directly.','line_number':298,'multiline':False]['text':' github env vars use utf-8, on windows, non-ascii code may','line_number':327,'multiline':False]['text':' cause problem, so encode first','line_number':328,'multiline':False]['text':' According to the CMake manual, we should pass the arguments first,','line_number':338,'multiline':False]['text':' and put the directory as the last element. Otherwise, these flags','line_number':339,'multiline':False]['text':' may not be passed correctly.','line_number':340,'multiline':False]['text':' Reference:','line_number':341,'multiline':False]['text':' 1. https://cmake.org/cmake/help/latest/manual/cmake.1.html#synopsis','line_number':342,'multiline':False]['text':' 2. https://stackoverflow.com/a/27169347','line_number':343,'multiline':False]['text':' Determine the parallelism according to the following','line_number':361,'multiline':False]['text':' priorities:','line_number':362,'multiline':False]['text':' 1) MAX_JOBS environment variable','line_number':363,'multiline':False]['text':' 2) If using the Ninja build system, delegate decision to it.','line_number':364,'multiline':False]['text':' 3) Otherwise, fall back to the number of processors.','line_number':365,'multiline':False]['text':' Allow the user to set parallelism explicitly. If unset,','line_number':367,'multiline':False]['text':' we'll try to figure it out.','line_number':368,'multiline':False]['text':' Ninja is capable of figuring out the parallelism on its','line_number':372,'multiline':False]['text':' own: only specify it explicitly if we are not using','line_number':373,'multiline':False]['text':' Ninja.','line_number':374,'multiline':False]['text':' This lists the number of processors available on the','line_number':376,'multiline':False]['text':' machine. This may be an overestimate of the usable','line_number':377,'multiline':False]['text':' processors if CPU scheduling affinity limits it','line_number':378,'multiline':False]['text':' further. In the future, we should check for that with','line_number':379,'multiline':False]['text':' os.sched_getaffinity(0) on platforms that support it.','line_number':380,'multiline':False]['text':' This ``if-else'' clause would be unnecessary when cmake','line_number':383,'multiline':False]['text':' 3.12 becomes minimum, which provides a '-j' option:','line_number':384,'multiline':False]['text':' build_args += ['-j', max_jobs] would be sufficient by','line_number':385,'multiline':False]['text':' then. Until then, we use "--" to pass parameters to the','line_number':386,'multiline':False]['text':' underlying build system.','line_number':387,'multiline':False]['text':' We are likely using msbuild here','line_number':390,'multiline':False]