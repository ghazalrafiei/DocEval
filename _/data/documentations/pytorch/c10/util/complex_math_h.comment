['text':' Exponential functions','line_number':8,'multiline':False]['text':' Power functions','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' namespace _detail','line_number':58,'multiline':False]['text':' Trigonometric functions','line_number':154,'multiline':False]['text':' Hyperbolic functions','line_number':224,'multiline':False]['text':' For Mac, the new implementation yielded a high relative error. Falling back','line_number':296,'multiline':False]['text':' to the old version for now.','line_number':297,'multiline':False]['text':' See https://github.com/numpy/numpy/pull/22611#issuecomment-1667945354','line_number':298,'multiline':False]['text':' For CUDA we also use this one, as thrust::log(thrust::complex) takes','line_number':299,'multiline':False]['text':' *forever* to compile','line_number':300,'multiline':False]['text':' log1p(z) = log(1 + z)','line_number':302,'multiline':False]['text':' Let's define 1 + z = r * e ^ (i * a), then we have','line_number':303,'multiline':False]['text':' log(r * e ^ (i * a)) = log(r) + i * a','line_number':304,'multiline':False]['text':' With z = x + iy, the term r can be written as','line_number':305,'multiline':False]['text':' r = ((1 + x) ^ 2 + y ^ 2) ^ 0.5','line_number':306,'multiline':False]['text':'   = (1 + x ^ 2 + 2 * x + y ^ 2) ^ 0.5','line_number':307,'multiline':False]['text':' So, log(r) is','line_number':308,'multiline':False]['text':' log(r) = 0.5 * log(1 + x ^ 2 + 2 * x + y ^ 2)','line_number':309,'multiline':False]['text':'        = 0.5 * log1p(x * (x + 2) + y ^ 2)','line_number':310,'multiline':False]['text':' we need to use the expression only on certain condition to avoid overflow','line_number':311,'multiline':False]['text':' and underflow from `(x * (x + 2) + y ^ 2)`','line_number':312,'multiline':False]['text':' handle underflow','line_number':319,'multiline':False]['text':' CPU path','line_number':328,'multiline':False]['text':' Based on https://github.com/numpy/numpy/pull/22611#issuecomment-1667945354','line_number':329,'multiline':False]['text':' expm1(z) = exp(z) - 1','line_number':345,'multiline':False]['text':' Define z = x + i * y','line_number':346,'multiline':False]['text':' f = e ^ (x + i * y) - 1','line_number':347,'multiline':False]['text':'   = e ^ x * e ^ (i * y) - 1','line_number':348,'multiline':False]['text':'   = (e ^ x * cos(y) - 1) + i * (e ^ x * sin(y))','line_number':349,'multiline':False]['text':'   = (e ^ x - 1) * cos(y) - (1 - cos(y)) + i * e ^ x * sin(y)','line_number':350,'multiline':False]['text':'   = expm1(x) * cos(y) - 2 * sin(y / 2) ^ 2 + i * e ^ x * sin(y)','line_number':351,'multiline':False]['text':' namespace c10_complex_math','line_number':360,'multiline':False]['text':' namespace std','line_number':406,'multiline':False]