['text':' Note [ Complex Square root in libc++]','line_number':6,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':7,'multiline':False]['text':' In libc++ complex square root is computed using polar form','line_number':8,'multiline':False]['text':' This is a reasonably fast algorithm, but can result in significant','line_number':9,'multiline':False]['text':' numerical errors when arg is close to 0, pi/2, pi, or 3pi/4','line_number':10,'multiline':False]['text':' In that case provide a more conservative implementation which is','line_number':11,'multiline':False]['text':' slower but less prone to those kinds of errors','line_number':12,'multiline':False]['text':' In libstdc++ complex square root yield invalid results','line_number':13,'multiline':False]['text':' for -x-0.0j unless C99 csqrt/csqrtf fallbacks are used','line_number':14,'multiline':False]['text':' Trust standard library to correctly handle infs and NaNs','line_number':24,'multiline':False]['text':' Special case for square root of pure imaginary values','line_number':31,'multiline':False]['text':' At this point, z is non-zero and finite','line_number':40,'multiline':False]['text':' Compute complex arccosine using formula from W. Kahan','line_number':51,'multiline':False]['text':' "Branch Cuts for Complex Elementary Functions" 1986 paper:','line_number':52,'multiline':False]['text':' cacos(z).re = 2*atan2(sqrt(1-z).re(), sqrt(1+z).re())','line_number':53,'multiline':False]['text':' cacos(z).im = asinh((sqrt(conj(1+z))*sqrt(1-z)).im())','line_number':54,'multiline':False]['text':' Trust standard library to correctly handle infs and NaNs','line_number':58,'multiline':False]['text':' Explicitly unroll (a*c).imag()','line_number':68,'multiline':False]['text':' anonymous namespace','line_number':72,'multiline':False]['text':' namespace _detail','line_number':92,'multiline':False]['text':' namespace c10_complex_math','line_number':93,'multiline':False]