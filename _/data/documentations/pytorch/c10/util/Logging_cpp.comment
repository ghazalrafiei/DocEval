['text':' Common code that we use regardless of whether we use glog or not.','line_number':12,'multiline':False]['text':'frames_to_skip=','line_number':25,'multiline':True]['text':' namespace','line_number':29,'multiline':False]['text':' PyTorch-style error message','line_number':75,'multiline':False]['text':' (This must be defined here for access to GetFetchStackTrace)','line_number':76,'multiline':False]['text':' any non-empty value','line_number':94,'multiline':False]['text':' use stderr to avoid messing with glog','line_number':98,'multiline':False]['text':' namespace','line_number':119,'multiline':False]['text':' static destructor race','line_number':154,'multiline':False]['text':' static destructor race','line_number':163,'multiline':False]['text':' static destructor race','line_number':170,'multiline':False]['text':' static destructor race','line_number':179,'multiline':False]['text':' namespace','line_number':187,'multiline':False]['text':' namespace detail','line_number':188,'multiline':False]['text':' namespace c10','line_number':189,'multiline':False]['text':' When GLOG depends on GFLAGS, these variables are being defined in GLOG','line_number':192,'multiline':False]['text':' directly via the GFLAGS definition, so we will use DECLARE_* to declare','line_number':193,'multiline':False]['text':' them, and use them in Caffe2.','line_number':194,'multiline':False]['text':' GLOG's minloglevel','line_number':195,'multiline':False]['text':' GLOG's verbose log value.','line_number':197,'multiline':False]['text':' GLOG's logtostderr value','line_number':199,'multiline':False]['text':' defined(C10_USE_GFLAGS) && defined(C10_USE_GLOG)','line_number':201,'multiline':False]['text':' This backward compatibility flags are in order to deal with cases where','line_number':204,'multiline':False]['text':' Caffe2 are not built with glog, but some init flags still pass in these','line_number':205,'multiline':False]['text':' flags. They may go away in the future.','line_number':206,'multiline':False]['text':' !defined(c10_USE_GLOG)','line_number':210,'multiline':False]['text':' Provide easy access to the above variables, regardless whether GLOG is','line_number':214,'multiline':False]['text':' dependent on GFLAGS or not. Note that the namespace (fLI, fLB) is actually','line_number':215,'multiline':False]['text':' consistent between GLOG and GFLAGS, so we can do the below declaration','line_number':216,'multiline':False]['text':' consistently.','line_number':217,'multiline':False]['text':' namespace c10','line_number':222,'multiline':False]['text':' Google glog's api does not have an external function that allows one to check','line_number':229,'multiline':False]['text':' if glog is initialized or not. It does have an internal function - so we are','line_number':230,'multiline':False]['text':' declaring it here. This is a hack but has been used by a bunch of others too','line_number':231,'multiline':False]['text':' (e.g. Torch).','line_number':232,'multiline':False]['text':' namespace glog_internal_namespace_','line_number':236,'multiline':False]['text':' namespace google','line_number':237,'multiline':False]['text':' This trick can only be used on UNIX platforms','line_number':244,'multiline':False]['text':' This is never defined on Windows','line_number':250,'multiline':False]['text':' namespace','line_number':256,'multiline':False]['text':' TODO(T82645998): Fix data race exposed by TSAN.','line_number':278,'multiline':False]['text':' If caffe2_log_level is set and is lower than the min log level by glog,','line_number':281,'multiline':False]['text':' we will transfer the caffe2_log_level setting to glog to override that.','line_number':282,'multiline':False]['text':' If caffe2_log_level is explicitly set, let's also turn on logtostderr.','line_number':284,'multiline':False]['text':' Also, transfer the caffe2_log_level verbose setting to glog.','line_number':288,'multiline':False]['text':' namespace c10','line_number':298,'multiline':False]['text':' !C10_USE_GLOG','line_number':300,'multiline':False]['text':' ANDROID','line_number':304,'multiline':False]['text':' When doing InitCaffeLogging, we will assume that caffe's flag parser has','line_number':318,'multiline':False]['text':' already finished.','line_number':319,'multiline':False]['text':' Nothing needs to be logged.','line_number':346,'multiline':False]['text':' !ANDROID','line_number':351,'multiline':False]['text':' ANDROID','line_number':353,'multiline':False]['text':'
  time_t rawtime;
  struct tm * timeinfo;
  time(&rawtime);
  timeinfo = localtime(&rawtime);
  std::chrono::nanoseconds ns =
      std::chrono::duration_cast<std::chrono::nanoseconds>(
          std::chrono::high_resolution_clock::now().time_since_epoch());
  ','line_number':354,'multiline':True]['text':'<< (timeinfo->tm_mon + 1) * 100 + timeinfo->tm_mday','line_number':368,'multiline':False]['text':'<< std::setfill('0')','line_number':369,'multiline':False]['text':'<< " " << std::setw(2) << timeinfo->tm_hour','line_number':370,'multiline':False]['text':'<< ":" << std::setw(2) << timeinfo->tm_min','line_number':371,'multiline':False]['text':'<< ":" << std::setw(2) << timeinfo->tm_sec','line_number':372,'multiline':False]['text':'<< "." << std::setw(9) << ns.count() % 1000000000','line_number':373,'multiline':False]['text':' Output the contents of the stream to the proper channel on destruction.','line_number':378,'multiline':False]['text':' Nothing needs to be logged.','line_number':381,'multiline':False]['text':' LOG_FATAL','line_number':387,'multiline':False]['text':' LOG_ERROR','line_number':388,'multiline':False]['text':' LOG_WARNING','line_number':389,'multiline':False]['text':' LOG_INFO','line_number':390,'multiline':False]['text':' VLOG(1)','line_number':391,'multiline':False]['text':' VLOG(2) .. VLOG(N)','line_number':392,'multiline':False]['text':' Output the log string the Android log at the appropriate level.','line_number':396,'multiline':False]['text':' Indicate termination if needed.','line_number':398,'multiline':False]['text':' !ANDROID','line_number':402,'multiline':False]['text':' If not building on Android, log all output to std::cerr.','line_number':404,'multiline':False]['text':' Simulating the glog default behavior: if the severity is above INFO,','line_number':406,'multiline':False]['text':' we flush the stream so that the output appears immediately on std::cerr.','line_number':407,'multiline':False]['text':' This is expected in some of our tests.','line_number':408,'multiline':False]['text':' ANDROID','line_number':413,'multiline':False]['text':' namespace c10','line_number':419,'multiline':False]['text':' !C10_USE_GLOG','line_number':421,'multiline':False]['text':' Not set, fallback to the default level (i.e. WARNING).','line_number':430,'multiline':False]['text':' namespace','line_number':469,'multiline':False]['text':' namespace detail','line_number':470,'multiline':False]['text':' namespace c10','line_number':471,'multiline':False]