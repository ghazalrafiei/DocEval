['text':' constructor tag used by intrusive_ptr constructors','line_number':24,'multiline':False]['text':' namespace raw','line_number':26,'multiline':False]['text':'*
 * intrusive_ptr<T> is an alternative to shared_ptr<T> that has better
 * performance because it does the refcounting intrusively
 * (i.e. in a member of the object itself).
 * Your class T needs to inherit from intrusive_ptr_target to allow it to be
 * used in an intrusive_ptr<T>. Your class's constructor should not allow
 *`this` to escape to other threads or create an intrusive_ptr from `this`.
 ','line_number':27,'multiline':True]['text':' Note [Stack allocated intrusive_ptr_target safety]','line_number':36,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':37,'multiline':False]['text':' A well known problem with std::enable_shared_from_this is that it','line_number':38,'multiline':False]['text':' allows you to create a std::shared_ptr from a stack allocated object,','line_number':39,'multiline':False]['text':' which is totally bogus because the object will die once you return','line_number':40,'multiline':False]['text':' from the stack.  In intrusive_ptr, we can detect that this has occurred,','line_number':41,'multiline':False]['text':' because we set the refcount/weakcount of objects which inherit from','line_number':42,'multiline':False]['text':' intrusive_ptr_target to zero, *unless* we can prove that the object','line_number':43,'multiline':False]['text':' was dynamically allocated (e.g., via make_intrusive).','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' Thus, whenever you transmute a T* into a intrusive_ptr<T>, we check','line_number':46,'multiline':False]['text':' and make sure that the refcount isn't zero (or, a more subtle','line_number':47,'multiline':False]['text':' test for weak_intrusive_ptr<T>, for which the refcount may validly','line_number':48,'multiline':False]['text':' be zero, but the weak refcount better not be zero), because that','line_number':49,'multiline':False]['text':' tells us if the object was allocated by us.  If it wasn't, no','line_number':50,'multiline':False]['text':' intrusive_ptr for you!','line_number':51,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-virtual-class-destructor)','line_number':53,'multiline':False]['text':' Note [Weak references for intrusive refcounting]','line_number':55,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':56,'multiline':False]['text':' Here's the scheme:','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':'  - refcount == number of strong references to the object','line_number':59,'multiline':False]['text':'    weakcount == number of weak references to the object,','line_number':60,'multiline':False]['text':'      plus one more if refcount > 0','line_number':61,'multiline':False]['text':'    An invariant: refcount > 0  =>  weakcount > 0','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'  - c10::StorageImpl stays live as long as there are any strong','line_number':64,'multiline':False]['text':'    or weak pointers to it (weakcount > 0, since strong','line_number':65,'multiline':False]['text':'    references count as a +1 to weakcount)','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':'  - finalizers are called and data_ptr is deallocated when refcount == 0','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':'  - Once refcount == 0, it can never again be > 0 (the transition','line_number':70,'multiline':False]['text':'    from > 0 to == 0 is monotonic)','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':'  - When you access c10::StorageImpl via a weak pointer, you must','line_number':73,'multiline':False]['text':'    atomically increment the use count, if it is greater than 0.','line_number':74,'multiline':False]['text':'    If it is not, you must report that the storage is dead.','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' protected destructor. We never want to destruct intrusive_ptr_target*','line_number':93,'multiline':False]['text':' directly.','line_number':94,'multiline':False]['text':' Disable -Wterminate and -Wexceptions so we're allowed to use assertions','line_number':96,'multiline':False]['text':' (i.e. throw exceptions) in a destructor.','line_number':97,'multiline':False]['text':' We also have to disable -Wunknown-warning-option and -Wpragmas, because','line_number':98,'multiline':False]['text':' some other compilers don't know about -Wterminate or -Wexceptions and','line_number':99,'multiline':False]['text':' will show a warning about unknown warning options otherwise.','line_number':100,'multiline':False]['text':' function assumed not to throw an exception but does','line_number':104,'multiline':False]['text':' Second condition is there to accommodate','line_number':113,'multiline':False]['text':' unsafe_adapt_non_heap_allocated: since we are doing our own','line_number':114,'multiline':False]['text':' deallocation in that case, it is correct for each','line_number':115,'multiline':False]['text':' expected_decref to have happened (some user code tried to','line_number':116,'multiline':False]['text':' decref and thus free the object, but it didn't happen right','line_number':117,'multiline':False]['text':' away) or not (no user code tried to free the object, and','line_number':118,'multiline':False]['text':' now it's getting destroyed through whatever mechanism the','line_number':119,'multiline':False]['text':' caller of unsafe_adapt_non_heap_allocated wanted to','line_number':120,'multiline':False]['text':' use). We choose our reference count such that the count','line_number':121,'multiline':False]['text':' will not dip below INT_MAX regardless.','line_number':122,'multiline':False]['text':' See ~intrusive_ptr for optimization that will frequently result in 1','line_number':127,'multiline':False]['text':' at destruction time.','line_number':128,'multiline':False]['text':' intrusive_ptr_target supports copy and move: but refcount and weakcount','line_number':141,'multiline':False]['text':' don't participate (since they are intrinsic properties of the memory','line_number':142,'multiline':False]['text':' location)','line_number':143,'multiline':False]['text':'other','line_number':144,'multiline':True]['text':'other','line_number':147,'multiline':True]['text':'other','line_number':151,'multiline':True]['text':'other','line_number':155,'multiline':True]['text':'*
   * This is called when refcount reaches zero.
   * You can override this to release expensive resources.
   * There might still be weak references, so your object might not get
   * destructed yet, but you can assume the object isn't used anymore,
   * i.e. no more calls to methods or accesses to members (we just can't
   * destruct it yet because we need the weakcount accessible).
   *
   * If there are no weak references (i.e. your class is about to be
   * destructed), this function WILL NOT be called.
   ','line_number':160,'multiline':True]['text':' Increment needs to be acquire-release to make use_count() and','line_number':191,'multiline':False]['text':' unique() reliable.','line_number':192,'multiline':False]['text':' weak_use_count() is only used for testing, so we don't need it to','line_number':197,'multiline':False]['text':' be reliable. Relaxed should be fine.','line_number':198,'multiline':False]['text':' Both decrements need to be acquire-release for correctness. See','line_number':203,'multiline':False]['text':' e.g. std::shared_ptr implementation.','line_number':204,'multiline':False]['text':' namespace detail','line_number':213,'multiline':False]['text':'  the following static assert would be nice to have but it requires','line_number':223,'multiline':False]['text':'  the target class T to be fully defined when intrusive_ptr<T> is instantiated','line_number':224,'multiline':False]['text':'  this is a problem for classes that contain pointers to themselves','line_number':225,'multiline':False]['text':'  static_assert(','line_number':226,'multiline':False]['text':'      std::is_base_of<intrusive_ptr_target, TTarget>::value,','line_number':227,'multiline':False]['text':'      "intrusive_ptr can only be used for classes that inherit from','line_number':228,'multiline':False]['text':'      intrusive_ptr_target.");','line_number':229,'multiline':False]['text':' This static_assert triggers on MSVC','line_number':231,'multiline':False]['text':'  error C2131: expression did not evaluate to a constant','line_number':232,'multiline':False]['text':' Make pybind11::class_ be a friend class of intrusive_ptr, so that custom','line_number':252,'multiline':False]['text':' smart holder in pybind11 could access the private constructor of','line_number':253,'multiline':False]['text':' intrusive_ptr(T*) which took the ownership of the object. This is required','line_number':254,'multiline':False]['text':' by customer holder macro PYBIND11_DECLARE_HOLDER_TYPE, where it uses','line_number':255,'multiline':False]['text':' intrusive_ptr(TTarget*) to initialize and take ownership of the object. For','line_number':256,'multiline':False]['text':' details, see','line_number':257,'multiline':False]['text':' https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#custom-smart-pointers','line_number':258,'multiline':False]['text':' See comment above about weakcount. As long as refcount>0,','line_number':275,'multiline':False]['text':' weakcount is one larger than the actual number of weak references.','line_number':276,'multiline':False]['text':' So we need to decrement it here.','line_number':277,'multiline':False]['text':' justification for const_cast: release_resources is basically a','line_number':281,'multiline':False]['text':' destructor and a destructor always mutates the object, even for const','line_number':282,'multiline':False]['text':' objects. NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':283,'multiline':False]['text':' raw pointer constructors are not public because we shouldn't make','line_number':294,'multiline':False]['text':' intrusive_ptr out of raw pointers except from inside the make_intrusive(),','line_number':295,'multiline':False]['text':' reclaim() and weak_intrusive_ptr::lock() implementations.','line_number':296,'multiline':False]['text':' This constructor will increase the ref counter for you.','line_number':298,'multiline':False]['text':' This constructor will be used by the make_intrusive(), and also pybind11,','line_number':299,'multiline':False]['text':' which wrap the intrusive_ptr holder around the raw pointer and incref','line_number':300,'multiline':False]['text':' correspondingly (pybind11 requires raw pointer constructor to incref by','line_number':301,'multiline':False]['text':' default).','line_number':302,'multiline':False]['text':' We just created result.target_, so we know no other thread has','line_number':306,'multiline':False]['text':' access to it, so we know we needn't care about memory ordering.','line_number':307,'multiline':False]['text':' (On x86_64, a store with memory_order_relaxed generates a plain old','line_number':308,'multiline':False]['text':' `mov`, whereas an atomic increment does a lock-prefixed `add`, which is','line_number':309,'multiline':False]['text':' much more expensive: https://godbolt.org/z/eKPzj8.)','line_number':310,'multiline':False]['text':' This constructor will not increase the ref counter for you.','line_number':330,'multiline':False]['text':' We use the tagged dispatch mechanism to explicitly mark this constructor','line_number':331,'multiline':False]['text':' to not increase the refcount','line_number':332,'multiline':False]['text':' implicit ','line_number':344,'multiline':True]['text':' implicit ','line_number':358,'multiline':True]['text':' We do a lot of null-pointer checks in our code, good to have this be cheap.','line_number':428,'multiline':False]['text':'*
   * Returns an owning (!) pointer to the underlying object and makes the
   * intrusive_ptr instance invalid. That means the refcount is not decreased.
   * You *must* put the returned pointer back into a intrusive_ptr using
   * intrusive_ptr::reclaim(ptr) to properly destruct it.
   * This is helpful for C APIs.
   ','line_number':451,'multiline':True]['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':459,'multiline':False]['text':'*
   * Takes an owning pointer to TTarget* and creates an intrusive_ptr that takes
   * over ownership. That means the refcount is not increased.
   * This is the counter-part to intrusive_ptr::release() and the pointer
   * passed in *must* have been created using intrusive_ptr::release().
   ','line_number':465,'multiline':True]['text':'*
   * Takes an owning pointer to TTarget* and creates an intrusive_ptr
   * representing a new reference, i.e. the raw pointer retains
   * ownership.
   ','line_number':479,'multiline':True]['text':'*
   * Allocate a heap object with args and wrap it inside a intrusive_ptr and
   * incref. This is a helper function to let make_intrusive() access private
   * intrusive_ptr constructors.
   ','line_number':490,'multiline':True]['text':'*
   * Turn a new instance of TTarget (e.g., literally allocated
   * using new TTarget(...) into an intrusive_ptr.  If possible,
   * use intrusive_ptr::make instead which statically guarantees
   * that the allocation was done properly.
   *
   * At the moment, the only reason this method exists is because
   * pybind11 holder types expect to be able to allocate in
   * this way (because pybind11 handles the new allocation itself).
   ','line_number':500,'multiline':True]['text':'*
   * Turn an instance of TTarget that should not be reference counted
   * (e.g., allocated into an arena with placement new) into an
   * intrusive_ptr. This is gratuitously unsafe and should only be
   * used if you can guarantee that the pointer will not escape and be
   * refcounted as normal.
   *
   * `expected_decrefs` is a debugging parameter: it indicates the
   * number of strong owners the intrusive_ptr_target in question is
   * expected to get. In most use cases, this will likely be 1.
   *
   * The reason this method exists is for manually sharing
   * StorageImpls across Tensors in the static runtime. It needs
   * access to private intrusive_ptr members so that the refcounts can
   * be initialized to custom values.
   ','line_number':514,'multiline':True]['text':' INT_MAX is impractically huge for a reference count, while','line_number':534,'multiline':False]['text':' being in no danger of overflowing size_t. We actually only need to','line_number':535,'multiline':False]['text':' initialize the refcount to 2 -- we are just doing an unbalanced','line_number':536,'multiline':False]['text':' incref to prevent the non-heap-allocated target from being','line_number':537,'multiline':False]['text':' freed, and we are optimizing that incref by directly','line_number':538,'multiline':False]['text':' initializing the refcounts rather than doing an expensive','line_number':539,'multiline':False]['text':' atomic increment. The reason to use INT_MAX is to accommodate','line_number':540,'multiline':False]['text':' the debug assertions in ~intrusive_ptr_target.','line_number':541,'multiline':False]['text':'*
   * Turn a **non-owning raw pointer** to an intrusive_ptr.  It is
   * the moral equivalent of enable_shared_from_this on a shared pointer.
   *
   * This method is only valid for objects that are already live.  If
   * you are looking for the moral equivalent of unique_ptr<T>(T*)
   * constructor, see steal_from_new.
   *
   * TODO: https://github.com/pytorch/pytorch/issues/56482
   ','line_number':551,'multiline':True]['text':' See Note [Stack allocated intrusive_ptr_target safety]','line_number':562,'multiline':False]['text':' doesn't increase refcount','line_number':566,'multiline':False]['text':' To allow intrusive_ptr inside std::map or std::set, we need operator<','line_number':587,'multiline':False]['text':'borrow','line_number':662,'multiline':True]['text':' This static_assert triggers on MSVC','line_number':676,'multiline':False]['text':'  error C2131: expression did not evaluate to a constant','line_number':677,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDelete)','line_number':707,'multiline':False]['text':' implicit ','line_number':728,'multiline':True]['text':' implicit ','line_number':743,'multiline':True]['text':' NB: This should ONLY be used by the std::hash implementation','line_number':807,'multiline':False]['text':' for weak_intrusive_ptr.  Another way you could do this is','line_number':808,'multiline':False]['text':' friend std::hash<weak_intrusive_ptr>, but this triggers two','line_number':809,'multiline':False]['text':' bugs:','line_number':810,'multiline':False]['text':'','line_number':811,'multiline':False]['text':'  (1) It triggers an nvcc bug, where std::hash in a friend class','line_number':812,'multiline':False]['text':'      declaration gets preprocessed into hash, which then cannot','line_number':813,'multiline':False]['text':'      actually be found.  The error in this case looks like:','line_number':814,'multiline':False]['text':'','line_number':815,'multiline':False]['text':'        error: no template named 'hash'; did you mean 'std::hash'?','line_number':816,'multiline':False]['text':'','line_number':817,'multiline':False]['text':'  (2) On OS X, std::hash is declared as a struct, not a class.','line_number':818,'multiline':False]['text':'      This twings:','line_number':819,'multiline':False]['text':'','line_number':820,'multiline':False]['text':'        error: class 'hash' was previously declared as a struct','line_number':821,'multiline':False]['text':'        [-Werror,-Wmismatched-tags]','line_number':822,'multiline':False]['text':'','line_number':823,'multiline':False]['text':' Both of these are work-aroundable, but on the whole, I decided','line_number':824,'multiline':False]['text':' it would be simpler and easier to make work if we just expose','line_number':825,'multiline':False]['text':' an unsafe getter for target_','line_number':826,'multiline':False]['text':'','line_number':827,'multiline':False]['text':' refcount, not weakcount!','line_number':837,'multiline':False]['text':' Object already destructed, no strong references left anymore.','line_number':858,'multiline':False]['text':' Return nullptr.','line_number':859,'multiline':False]['text':'*
   * Returns an owning (but still only weakly referenced) pointer to the
   * underlying object and makes the weak_intrusive_ptr instance invalid.
   * That means the weakcount is not decreased.
   * You *must* put the returned pointer back into a weak_intrusive_ptr using
   * weak_intrusive_ptr::reclaim(ptr) to properly destruct it.
   * This is helpful for C APIs.
   ','line_number':869,'multiline':True]['text':'*
   * Takes an owning (but must be weakly referenced) pointer to TTarget* and
   * creates a weak_intrusive_ptr that takes over ownership.
   * This means that the weakcount is not increased.
   * This is the counter-part to weak_intrusive_ptr::release() and the pointer
   * passed in *must* have been created using weak_intrusive_ptr::release().
   ','line_number':883,'multiline':True]['text':' See Note [Stack allocated intrusive_ptr_target safety]','line_number':891,'multiline':False]['text':' if refcount > 0, weakcount must be >1 for weak references to exist.','line_number':892,'multiline':False]['text':' see weak counting explanation at top of this file.','line_number':893,'multiline':False]['text':' if refcount == 0, weakcount only must be >0.','line_number':894,'multiline':False]['text':'*
   * Takes a pointer to TTarget* (may be weak or strong) and creates a
   * new weak_intrusive_ptr representing a new weak reference, i.e.
   * the raw pointer retains ownership.
   ','line_number':904,'multiline':True]['text':' To allow weak_intrusive_ptr inside std::map or std::set, we need operator<','line_number':932,'multiline':False]['text':' Alias for documentary purposes, to more easily distinguish','line_number':954,'multiline':False]['text':' weak raw intrusive pointers from intrusive pointers.','line_number':955,'multiline':False]['text':' This namespace provides some methods for working with','line_number':958,'multiline':False]['text':' raw pointers that subclass intrusive_ptr_target.  They are not provided','line_number':959,'multiline':False]['text':' as methods on intrusive_ptr_target, because ideally you would not need these','line_number':960,'multiline':False]['text':' methods at all (use smart pointers), but if you are dealing with legacy code','line_number':961,'multiline':False]['text':' that still needs to pass around raw pointers, you may find these quite','line_number':962,'multiline':False]['text':' useful.','line_number':963,'multiline':False]['text':'','line_number':964,'multiline':False]['text':' An important usage note: some functions are only valid if you have a','line_number':965,'multiline':False]['text':' strong raw pointer to the object, while others are only valid if you','line_number':966,'multiline':False]['text':' have a weak raw pointer to the object.  ONLY call intrusive_ptr namespace','line_number':967,'multiline':False]['text':' functions on strong pointers, and weak_intrusive_ptr namespace functions','line_number':968,'multiline':False]['text':' on weak pointers.  If you mix it up, you may get an assert failure.','line_number':969,'multiline':False]['text':' WARNING: Unlike the reclaim() API, it is NOT valid to pass','line_number':974,'multiline':False]['text':' NullType::singleton to this function','line_number':975,'multiline':False]['text':' WARNING: Unlike the reclaim() API, it is NOT valid to pass','line_number':982,'multiline':False]['text':' NullType::singleton to this function','line_number':983,'multiline':False]['text':' Let it die','line_number':985,'multiline':False]['text':' NB: Caller still has 'self' pointer, but it's now invalid.','line_number':987,'multiline':False]['text':' If you want more safety, used the actual c10::intrusive_ptr class','line_number':988,'multiline':False]['text':' NB: 'this' is a strong pointer, but we return a weak pointer','line_number':993,'multiline':False]['text':' namespace intrusive_ptr','line_number':1007,'multiline':False]['text':' Let it die','line_number':1016,'multiline':False]['text':' NB: You still "have" the 'self' pointer, but it's now invalid.','line_number':1018,'multiline':False]['text':' If you want more safety, used the actual c10::weak_intrusive_ptr class','line_number':1019,'multiline':False]['text':' This gives the STRONG refcount of a WEAK pointer','line_number':1030,'multiline':False]['text':' namespace weak_intrusive_ptr','line_number':1038,'multiline':False]['text':' namespace raw','line_number':1040,'multiline':False]['text':' namespace c10','line_number':1042,'multiline':False]['text':' To allow intrusive_ptr and weak_intrusive_ptr inside std::unordered_map or','line_number':1045,'multiline':False]['text':' std::unordered_set, we need std::hash','line_number':1046,'multiline':False]['text':' namespace std','line_number':1059,'multiline':False]