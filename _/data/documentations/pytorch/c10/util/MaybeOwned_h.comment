['text':'/ MaybeOwnedTraits<T> describes how to borrow from T.  Here is how we','line_number':12,'multiline':False]['text':'/ can implement borrowing from an arbitrary type T using a raw','line_number':13,'multiline':False]['text':'/ pointer to const:','line_number':14,'multiline':False]['text':'toDestroy','line_number':28,'multiline':True]['text':'/ It is possible to eliminate the extra layer of indirection for','line_number':43,'multiline':False]['text':'/ borrows for some types that we control. For examples, see','line_number':44,'multiline':False]['text':'/ intrusive_ptr.h and TensorBody.h.','line_number':45,'multiline':False]['text':' Explicitly enable MaybeOwned<shared_ptr<T>>, rather than allowing','line_number':50,'multiline':False]['text':' MaybeOwned to be used for any type right away.','line_number':51,'multiline':False]['text':'/ A smart pointer around either a borrowed or owned T. When','line_number':56,'multiline':False]['text':'/ constructed with borrowed(), the caller MUST ensure that the','line_number':57,'multiline':False]['text':'/ borrowed-from argument outlives this MaybeOwned<T>. Compare to','line_number':58,'multiline':False]['text':'/ Rust's std::borrow::Cow','line_number':59,'multiline':False]['text':'/ (https://doc.rust-lang.org/std/borrow/enum.Cow.html), but note','line_number':60,'multiline':False]['text':'/ that it is probably not suitable for general use because C++ has','line_number':61,'multiline':False]['text':'/ no borrow checking. Included here to support','line_number':62,'multiline':False]['text':'/ Tensor::expect_contiguous.','line_number':63,'multiline':False]['text':'/ Don't use this; use borrowed() instead.','line_number':75,'multiline':False]['text':'/ Don't use this; use owned() instead.','line_number':79,'multiline':False]['text':'/ Don't use this; use owned() instead.','line_number':84,'multiline':False]['text':' Copying a borrow yields another borrow of the original, as with a','line_number':92,'multiline':False]['text':' T*. Copying an owned T yields another owned T for safety: no','line_number':93,'multiline':False]['text':' chains of borrowing by default! (Note you could get that behavior','line_number':94,'multiline':False]['text':' with MaybeOwned<T>::borrowed(*rhs) if you wanted it.)','line_number':95,'multiline':False]['text':' This is an implementation detail!  You should know what you're doing','line_number':191,'multiline':False]['text':' if you are testing this.  If you just want to guarantee ownership move','line_number':192,'multiline':False]['text':' this into a T','line_number':193,'multiline':False]['text':' If borrowed, copy the underlying T. If owned, move from','line_number':218,'multiline':False]['text':' it. borrowed/owned state remains the same, and either we','line_number':219,'multiline':False]['text':' reference the same borrow as before or we are an owned moved-from','line_number':220,'multiline':False]['text':' T.','line_number':221,'multiline':False]['text':' namespace c10','line_number':233,'multiline':False]