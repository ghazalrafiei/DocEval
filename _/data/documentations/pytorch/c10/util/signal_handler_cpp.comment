['text':' Normal signal handler implementation.','line_number':7,'multiline':False]['text':' TODO: what if the previous handler uses sa_sigaction?','line_number':37,'multiline':False]['text':' Setup the handler','line_number':58,'multiline':False]['text':' Restart the system call, if at all possible','line_number':60,'multiline':False]['text':' Block every signal during the handler','line_number':62,'multiline':False]['text':' Intercept SIGHUP and SIGINT','line_number':64,'multiline':False]['text':' Set the signal handlers to the default.','line_number':73,'multiline':False]['text':' Setup the sighub handler','line_number':79,'multiline':False]['text':' Restart the system call, if at all possible','line_number':81,'multiline':False]['text':' Block every signal during the handler','line_number':83,'multiline':False]['text':' Intercept SIGHUP and SIGINT','line_number':85,'multiline':False]['text':' namespace','line_number':94,'multiline':False]['text':' Leaky singleton to avoid module destructor race.','line_number':101,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':115,'multiline':False]['text':' needsLock signals whether we need to lock our writing mutex.','line_number':158,'multiline':False]['text':' Our fatal signal entry point','line_number':184,'multiline':False]['text':' Check if this is a proper signal that we declared above.','line_number':186,'multiline':False]['text':' Set the flag so that our SIGUSR2 handler knows that we're aborting and','line_number':194,'multiline':False]['text':' that it should intercept any SIGUSR2 signal.','line_number':195,'multiline':False]['text':' Set state for other threads.','line_number':197,'multiline':False]['text':' Linux doesn't have a nice userland API for enumerating threads so we','line_number':200,'multiline':False]['text':' need to use the proc pseudo-filesystem.','line_number':201,'multiline':False]['text':' If we've found the current thread then we'll jump into the SIGUSR2','line_number':213,'multiline':False]['text':' handler before calling pthread_cond_wait thus deadlocking, so branch','line_number':214,'multiline':False]['text':' our directly to the backtrace handler instead of signaling it.','line_number':215,'multiline':False]['text':' Our SIGUSR2 entry point','line_number':232,'multiline':False]['text':' We don't want to actually change the signal handler as we want to','line_number':247,'multiline':False]['text':' remain the signal handler so that we may get the usr2 signal later.','line_number':248,'multiline':False]['text':' Installs SIGABRT signal handler so that we get stack traces','line_number':253,'multiline':False]['text':' from every thread on SIGABRT caused exit. Also installs SIGUSR2 handler','line_number':254,'multiline':False]['text':' so that threads can communicate with each other (be sure if you use SIGUSR2)','line_number':255,'multiline':False]['text':' to install your handler before initing caffe2 (we properly fall back to','line_number':256,'multiline':False]['text':' the previous handler if we didn't initiate the SIGUSR2).','line_number':257,'multiline':False]['text':' Since we'll be in an exiting situation it's possible there's memory','line_number':266,'multiline':False]['text':' corruption, so make our own stack just in case.','line_number':267,'multiline':False]['text':' defined(C10_SUPPORTS_FATAL_SIGNAL_HANDLERS)','line_number':306,'multiline':False]['text':' Return true iff a SIGINT has been received since the last time this','line_number':322,'multiline':False]['text':' function was called.','line_number':323,'multiline':False]['text':' Return true iff a SIGHUP has been received since the last time this','line_number':330,'multiline':False]['text':' function was called.','line_number':331,'multiline':False]['text':' defined(C10_SUPPORTS_FATAL_SIGNAL_HANDLERS)','line_number':361,'multiline':False]['text':' namespace c10','line_number':362,'multiline':False]['text':' defined(C10_SUPPORTS_SIGNAL_HANDLER)','line_number':364,'multiline':False]['text':' TODO: Currently we do not support signal handling in non-Linux yet - below is','line_number':366,'multiline':False]['text':' a minimal implementation that makes things compile.','line_number':367,'multiline':False]['text':' namespace c10','line_number':387,'multiline':False]['text':' defined(C10_SUPPORTS_SIGNAL_HANDLER)','line_number':389,'multiline':False]