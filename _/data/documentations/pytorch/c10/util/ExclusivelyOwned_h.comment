['text':' See example implementation in TensorBase.h and TensorBody.h.','line_number':7,'multiline':False]['text':' Synopsis:','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' repr_type -- type to use to store an owned T in ExclusivelyOwned.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' pointer_type -- pointer-esque type to return from','line_number':12,'multiline':False]['text':' ExclusivelyOwned's get() and operator*() methods.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' const_pointer_type -- similar to pointer_type, used for the const methods.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' static repr_type nullRepr() -- return a null instance of repr_type.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' template <class... Args>','line_number':19,'multiline':False]['text':' static repr_type createInPlace(Args&&... args) -- used by the in-place','line_number':20,'multiline':False]['text':' ExclusivelyOwned constructor.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' static repr_type moveToRepr(T&& x) -- move the given x into an','line_number':23,'multiline':False]['text':' instance of repr_type. used by the ExclusivelyOwned(T&&)','line_number':24,'multiline':False]['text':' constructor.','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' static void destroyOwned(repr_type x) -- free memory for a','line_number':27,'multiline':False]['text':' known-exclusively-owned instance of x. Replaces calling repr_type's','line_number':28,'multiline':False]['text':' destructor. Being able to implement this more efficiently than','line_number':29,'multiline':False]['text':' repr_type's destructor is the main reason to use ExclusivelyOwned','line_number':30,'multiline':False]['text':' for a type.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' static T take(repr_type&) -- move out of the given repr_type into an owned T.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' static pointer_type getImpl(const repr_type&) -- return a pointer','line_number':35,'multiline':False]['text':' to the given repr_type. May take repr_type by value if that is more','line_number':36,'multiline':False]['text':' efficient.','line_number':37,'multiline':False]['text':'/ ExclusivelyOwned is a smart-pointer-like wrapper around an','line_number':41,'multiline':False]['text':'/ exclusively-owned instance of some type T that normally has','line_number':42,'multiline':False]['text':'/ mandatory reference counting (currently just Tensor). If you have','line_number':43,'multiline':False]['text':'/ an isolated piece of code that knows that it has sole ownership of','line_number':44,'multiline':False]['text':'/ an object of one of these types (i.e., because you created it','line_number':45,'multiline':False]['text':'/ directly or using a factory function) and that object will not','line_number':46,'multiline':False]['text':'/ escape from that isolated piece of code, then moving the object','line_number':47,'multiline':False]['text':'/ into an ExclusivelyOwned will avoid an atomic reference count','line_number':48,'multiline':False]['text':'/ decrement at destruction time.','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/ If you directly create the Tensor in the first','line_number':51,'multiline':False]['text':'/ place, you can use the in_place constructor of ExclusivelyOwned to','line_number':52,'multiline':False]['text':'/ additionally avoid doing any stores to initialize the refcount &','line_number':53,'multiline':False]['text':'/ weakcount.','line_number':54,'multiline':False]['text':' Don't bother to call the destructor of repr_, since we already','line_number':96,'multiline':False]['text':' did specialized destruction for the exclusively-owned case in','line_number':97,'multiline':False]['text':' destroyOwned!','line_number':98,'multiline':False]['text':' We don't provide this because it would require us to be able to','line_number':101,'multiline':False]['text':' differentiate an owned-but-empty T from a lack of T. This is','line_number':102,'multiline':False]['text':' particularly problematic for Tensor, which wants to use an','line_number':103,'multiline':False]['text':' undefined Tensor as its null state.','line_number':104,'multiline':False]['text':' NOTE: the equivalent operation on MaybeOwned is a moving','line_number':111,'multiline':False]['text':' operator*. For ExclusivelyOwned, take() and operator*() may well','line_number':112,'multiline':False]['text':' have different return types, so they are different functions.','line_number':113,'multiline':False]['text':' namespace c10','line_number':143,'multiline':False]