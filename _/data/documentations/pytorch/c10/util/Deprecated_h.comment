['text':'*
 * This file provides portable macros for marking declarations
 * as deprecated.  You should generally use C10_DEPRECATED,
 * except when marking 'using' declarations as deprecated,
 * in which case you should use C10_DEFINE_DEPRECATED_USING
 * (due to portability concerns).
 ','line_number':3,'multiline':True]['text':' Sample usage:','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'    C10_DEPRECATED void bad_func();','line_number':13,'multiline':False]['text':'    struct C10_DEPRECATED BadStruct {','line_number':14,'multiline':False]['text':'      ...','line_number':15,'multiline':False]['text':'    };','line_number':16,'multiline':False]['text':' NB: __cplusplus doesn't work for MSVC, so for now MSVC always uses','line_number':18,'multiline':False]['text':' the "__declspec(deprecated)" implementation and not the C++14','line_number':19,'multiline':False]['text':' "[[deprecated]]" attribute. We tried enabling "[[deprecated]]" for C++14 on','line_number':20,'multiline':False]['text':' MSVC, but ran into issues with some older MSVC versions.','line_number':21,'multiline':False]['text':' TODO Is there some way to implement this?','line_number':27,'multiline':False]['text':' Sample usage:','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'    C10_DEFINE_DEPRECATED_USING(BadType, int)','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'   which is the portable version of','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':'    using BadType [[deprecated]] = int;','line_number':44,'multiline':False]['text':' technically [[deprecated]] syntax is from c++14 standard, but it works in','line_number':46,'multiline':False]['text':' many compilers.','line_number':47,'multiline':False]['text':' neither [[deprecated]] nor __declspec(deprecated) work on nvcc on Windows;','line_number':57,'multiline':False]['text':' you get the error:','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':'    error: attribute does not apply to any entity','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' So we just turn the macro off in this case.','line_number':62,'multiline':False]['text':' [[deprecated]] does work in windows without nvcc, though msc doesn't support','line_number':69,'multiline':False]['text':' `__has_cpp_attribute` when c++14 is supported, otherwise','line_number':70,'multiline':False]['text':' __declspec(deprecated) is used as the alternative.','line_number':71,'multiline':False]['text':' nvcc has a bug where it doesn't understand __attribute__((deprecated))','line_number':85,'multiline':False]['text':' declarations even when the host compiler supports it. We'll only use this gcc','line_number':86,'multiline':False]['text':' attribute when not cuda, and when using a GCC compiler that doesn't support','line_number':87,'multiline':False]['text':' the c++14 syntax we checked for above (available in __GNUC__ >= 5)','line_number':88,'multiline':False]['text':' using cuda + gcc < 5, neither deprecated syntax is available so turning off.','line_number':93,'multiline':False]