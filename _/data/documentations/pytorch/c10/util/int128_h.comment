['text':' This file is based on the uint128 implementation of protobuf at','line_number':1,'multiline':False]['text':' https://github.com/protocolbuffers/protobuf/blob/1e88936fce10cf773cb72b44c6a7f48b38c7578b/src/google/protobuf/stubs/int128.h','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Protocol Buffers - Google's data interchange format','line_number':4,'multiline':False]['text':' Copyright 2008 Google Inc.  All rights reserved.','line_number':5,'multiline':False]['text':' https://developers.google.com/protocol-buffers/','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':8,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':9,'multiline':False]['text':' met:','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':12,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':13,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':14,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':15,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':16,'multiline':False]['text':' distribution.','line_number':17,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':18,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':19,'multiline':False]['text':' this software without specific prior written permission.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':22,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':23,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':24,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':25,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':26,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':27,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':28,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':29,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':30,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':31,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':32,'multiline':False]['text':' TODO(xiaofeng): Define GOOGLE_PROTOBUF_HAS_CONSTEXPR when constexpr is','line_number':42,'multiline':False]['text':' available.','line_number':43,'multiline':False]['text':' An unsigned 128-bit integer type. Thread-compatible.','line_number':53,'multiline':False]['text':' Sets to 0, but don't trust on this behavior.','line_number':56,'multiline':False]['text':' Top 96 bits = 0','line_number':60,'multiline':False]['text':' hi_ = 0','line_number':62,'multiline':False]['text':' Trivial copy constructor, assignment operator and destructor.','line_number':65,'multiline':False]['text':' Arithmetic operators.','line_number':69,'multiline':False]['text':' Long division/modulo for uint128.','line_number':73,'multiline':False]['text':' Make msvc happy with using operator<<= from DivModImpl','line_number':78,'multiline':False]['text':' which is a static function, and linker complained about missing','line_number':79,'multiline':False]['text':' static version of this overload','line_number':80,'multiline':False]['text':' We add "std::" to avoid including all of port.h.','line_number':92,'multiline':False]['text':' Little-endian memory order optimizations can benefit from','line_number':102,'multiline':False]['text':' having lo_ first, hi_ last.','line_number':103,'multiline':False]['text':' See util/endian/endian.h and Load128/Store128 for storing a uint128.','line_number':104,'multiline':False]['text':' Not implemented, just declared for catching automatic type conversions.','line_number':108,'multiline':False]['text':' This is a POD form of uint128 which can be used for static variables which','line_number':115,'multiline':False]['text':' need to be operated on as uint128.','line_number':116,'multiline':False]['text':' Note: The ordering of fields is different than 'class uint128' but the','line_number':118,'multiline':False]['text':' same as its 2-arg constructor.  This enables more obvious initialization','line_number':119,'multiline':False]['text':' of static instances, which is the primary reason for this struct in the','line_number':120,'multiline':False]['text':' first place.  This does not seem to defeat any optimizations wrt','line_number':121,'multiline':False]['text':' operations involving this struct.','line_number':122,'multiline':False]['text':' allow uint128 to be logged','line_number':129,'multiline':False]['text':' Methods to access low and high pieces of 128-bit value.','line_number':132,'multiline':False]['text':' Defined externally from uint128 to facilitate conversion','line_number':133,'multiline':False]['text':' to native 128-bit types when compilers support them.','line_number':134,'multiline':False]['text':' TODO: perhaps it would be nice to have int128, a signed 128-bit type?','line_number':142,'multiline':False]['text':' --------------------------------------------------------------------------','line_number':144,'multiline':False]['text':'                      Implementation details follow','line_number':145,'multiline':False]['text':' --------------------------------------------------------------------------','line_number':146,'multiline':False]['text':' Comparison operators.','line_number':177,'multiline':False]['text':' Unary operators','line_number':193,'multiline':False]['text':' Logical operators.','line_number':209,'multiline':False]['text':' Shift operators.','line_number':241,'multiline':False]['text':' uint64_t shifts of >= 64 are undefined, so we will need some','line_number':244,'multiline':False]['text':' special-casing.','line_number':245,'multiline':False]['text':' uint64_t shifts of >= 64 are undefined, so we will need some','line_number':262,'multiline':False]['text':' special-casing.','line_number':263,'multiline':False]['text':' uint64_t shifts of >= 64 are undefined, so we will need some','line_number':280,'multiline':False]['text':' special-casing.','line_number':281,'multiline':False]['text':' uint64_t shifts of >= 64 are undefined, so we will need some','line_number':298,'multiline':False]['text':' special-casing.','line_number':299,'multiline':False]['text':' multiply [a96 .. a00] x [b96 .. b00]','line_number':361,'multiline':False]['text':' terms higher than c96 disappear off the high side','line_number':362,'multiline':False]['text':' terms c96 and c64 are safe to ignore carry bit','line_number':363,'multiline':False]['text':' add terms after this one at a time to capture carry','line_number':368,'multiline':False]['text':' namespace c10','line_number':397,'multiline':False]