['text':' NOTE: hash_combine and SHA1 hashing is based on implementation from Boost','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Boost Software License - Version 1.0 - August 17th, 2003','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' Permission is hereby granted, free of charge, to any person or organization','line_number':17,'multiline':False]['text':' obtaining a copy of the software and accompanying documentation covered by','line_number':18,'multiline':False]['text':' this license (the "Software") to use, reproduce, display, distribute,','line_number':19,'multiline':False]['text':' execute, and transmit the Software, and to prepare derivative works of the','line_number':20,'multiline':False]['text':' Software, and to permit third-parties to whom the Software is furnished to','line_number':21,'multiline':False]['text':' do so, all subject to the following:','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' The copyright notices in the Software and this entire statement, including','line_number':24,'multiline':False]['text':' the above license grant, this restriction and the following disclaimer,','line_number':25,'multiline':False]['text':' must be included in all copies of the Software, in whole or in part, and','line_number':26,'multiline':False]['text':' all derivative works of the Software, unless such copies or derivative','line_number':27,'multiline':False]['text':' works are solely in the form of machine-executable object code generated by','line_number':28,'multiline':False]['text':' a source language processor.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR','line_number':31,'multiline':False]['text':' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,','line_number':32,'multiline':False]['text':' FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT','line_number':33,'multiline':False]['text':' SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE','line_number':34,'multiline':False]['text':' FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,','line_number':35,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER','line_number':36,'multiline':False]['text':' DEALINGS IN THE SOFTWARE.','line_number':37,'multiline':False]['text':' Creates the SHA1 hash of a string. A 160-bit hash.','line_number':43,'multiline':False]['text':' Based on the implementation in Boost (see notice above).','line_number':44,'multiline':False]['text':' Note that SHA1 hashes are no longer considered cryptographically','line_number':45,'multiline':False]['text':'   secure, but are the standard hash for generating unique ids.','line_number':46,'multiline':False]['text':' Usage:','line_number':47,'multiline':False]['text':'   // Let 'code' be a std::string','line_number':48,'multiline':False]['text':'   c10::sha1 sha1_hash{code};','line_number':49,'multiline':False]['text':'   const auto hash_code = sha1_hash.str();','line_number':50,'multiline':False]['text':' TODO: Compare vs OpenSSL and/or CryptoPP implementations','line_number':51,'multiline':False]['text':' size_t max value = 0xFFFFFFFF','line_number':156,'multiline':False]['text':' if (bit_count_low + 8 >= 0x100000000) { // would overflow','line_number':157,'multiline':False]['text':' if (bit_count_low >= 0x100000000-8) {','line_number':158,'multiline':False]['text':' append the bit '1' to the message','line_number':186,'multiline':False]['text':' append k bits '0', where k is the minimum number >= 0','line_number':189,'multiline':False]['text':' such that the resulting message length is congruent to 56 (mod 64)','line_number':190,'multiline':False]['text':' check if there is enough space for padding and bit_count','line_number':191,'multiline':False]['text':' finish this block','line_number':193,'multiline':False]['text':' one more block','line_number':198,'multiline':False]['text':' append length of message (before pre-processing)','line_number':208,'multiline':False]['text':' as a 64-bit big-endian integer','line_number':209,'multiline':False]['text':' get final digest','line_number':221,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':236,'multiline':False]['text':' c10::hash implementation','line_number':237,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':238,'multiline':False]['text':' Use template argument deduction to shorten calls to c10::hash','line_number':242,'multiline':False]['text':' Use SFINAE to dispatch to std::hash if possible, cast enum types to int','line_number':250,'multiline':False]['text':' automatically, and fall back to T::hash otherwise. NOTE: C++14 added support','line_number':251,'multiline':False]['text':' for hashing enum types to the standard, and some compilers implement it even','line_number':252,'multiline':False]['text':' when C++14 flags aren't specified. This is why we have to disable this','line_number':253,'multiline':False]['text':' overload if T is an enum type (and use the one below in this case).','line_number':254,'multiline':False]['text':' namespace _hash_detail','line_number':273,'multiline':False]['text':' Hasher struct','line_number':275,'multiline':False]['text':' Specialization for std::tuple','line_number':283,'multiline':False]['text':' Specialization for std::vector','line_number':326,'multiline':False]['text':' namespace _hash_detail','line_number':341,'multiline':False]['text':' Use this function to actually hash multiple things in one line.','line_number':343,'multiline':False]['text':' Dispatches to c10::hash, so it can hash containers.','line_number':344,'multiline':False]['text':' Example:','line_number':345,'multiline':False]['text':'','line_number':346,'multiline':False]['text':' static size_t hash(const MyStruct& s) {','line_number':347,'multiline':False]['text':'   return get_hash(s.member1, s.member2, s.member3);','line_number':348,'multiline':False]['text':' }','line_number':349,'multiline':False]['text':' Specialization for c10::complex','line_number':355,'multiline':False]['text':' namespace c10','line_number':363,'multiline':False]