['text':'*
 * is_equality_comparable<T> is true_type iff the equality operator is defined
 * for T.
 ','line_number':8,'multiline':True]['text':'*
 * is_hashable<T> is true_type iff std::hash is defined for T
 ','line_number':22,'multiline':True]['text':'*
 * is_function_type<T> is true_type iff T is a plain function type (i.e.
 * "Result(Args...)")
 ','line_number':33,'multiline':True]['text':'*
 * is_instantiation_of<T, I> is true_type iff I is a template instantiation of T
 * (e.g. vector<int> is an instantiation of vector) Example:
 *    is_instantiation_of_t<vector, vector<int>> // true
 *    is_instantiation_of_t<pair, pair<int, string>> // true
 *    is_instantiation_of_t<vector, pair<int, string>> // false
 ','line_number':44,'multiline':True]['text':'*
 * strip_class: helper to remove the class type from pointers to `operator()`.
 ','line_number':59,'multiline':True]['text':' namespace detail','line_number':75,'multiline':False]['text':'*
 * Evaluates to true_type, iff the given class is a Functor
 * (i.e. has a call operator with some set of arguments)
 ','line_number':77,'multiline':True]['text':'*
 * lambda_is_stateless<T> is true iff the lambda type T is stateless
 * (i.e. does not have a closure).
 * Example:
 *  auto stateless_lambda = [] (int a) {return a;};
 *  lambda_is_stateless<decltype(stateless_lambda)> // true
 *  auto stateful_lambda = [&] (int a) {return a;};
 *  lambda_is_stateless<decltype(stateful_lambda)> // false
 ','line_number':91,'multiline':True]['text':' implementation idea: According to the C++ standard, stateless lambdas are','line_number':107,'multiline':False]['text':' convertible to function pointers','line_number':108,'multiline':False]['text':' case where LambdaType is not even a functor','line_number':116,'multiline':False]['text':' case where LambdaType is a functor','line_number':119,'multiline':False]['text':' namespace detail','line_number':125,'multiline':False]['text':'*
 * is_type_condition<C> is true_type iff C<...> is a type trait representing a
 * condition (i.e. has a constexpr static bool ::value member) Example:
 *   is_type_condition<std::is_reference>  // true
 ','line_number':129,'multiline':True]['text':'*
 * is_fundamental<T> is true_type iff the lambda type T is a fundamental type
 * (that is, arithmetic type, void, or nullptr_t). Example: is_fundamental<int>
 * // true We define it here to resolve a MSVC bug. See
 * https://github.com/pytorch/pytorch/issues/30932 for details.
 ','line_number':143,'multiline':True]['text':' namespace guts','line_number':151,'multiline':False]['text':' namespace c10','line_number':152,'multiline':False]