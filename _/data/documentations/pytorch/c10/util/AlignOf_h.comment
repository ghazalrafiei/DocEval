['text':'===--- AlignOf.h - Portable calculation of type alignment -----*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'                     The LLVM Compiler Infrastructure','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' This file is distributed under the University of Illinois Open Source','line_number':5,'multiline':False]['text':' License. See LICENSE.TXT for details.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' This file defines the AlignedCharArray and AlignedCharArrayUnion classes.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':12,'multiline':False]['text':' ATen: modified from llvm::AlignOf','line_number':14,'multiline':False]['text':' replaced LLVM_ALIGNAS with alignas','line_number':15,'multiline':False]['text':'/ \struct AlignedCharArray','line_number':23,'multiline':False]['text':'/ \brief Helper for building an aligned character array type.','line_number':24,'multiline':False]['text':'/','line_number':25,'multiline':False]['text':'/ This template is used to explicitly build up a collection of aligned','line_number':26,'multiline':False]['text':'/ character array types. We have to build these up using a macro and explicit','line_number':27,'multiline':False]['text':'/ specialization to cope with MSVC (at least till 2015) where only an','line_number':28,'multiline':False]['text':'/ integer literal can be used to specify an alignment constraint. Once built','line_number':29,'multiline':False]['text':'/ up here, we can then begin to indirect between these using normal C++','line_number':30,'multiline':False]['text':'/ template parameters.','line_number':31,'multiline':False]['text':' MSVC requires special handling here.','line_number':33,'multiline':False]['text':' _MSC_VER','line_number':41,'multiline':False]['text':'/ \brief Create a type with an aligned char buffer.','line_number':43,'multiline':False]['text':' We provide special variations of this template for the most common','line_number':47,'multiline':False]['text':' alignments because __declspec(align(...)) doesn't actually work when it is','line_number':48,'multiline':False]['text':' a member of a by-value function argument in MSVC, even if the alignment','line_number':49,'multiline':False]['text':' request is something reasonably like 8-byte or 16-byte. Note that we can't','line_number':50,'multiline':False]['text':' even include the declspec with the union that forces the alignment because','line_number':51,'multiline':False]['text':' MSVC warns on the existence of the declspec despite the union member forcing','line_number':52,'multiline':False]['text':' proper alignment.','line_number':53,'multiline':False]['text':' The rest of these are provided with a __declspec(align(...)) and we simply','line_number':87,'multiline':False]['text':' can't pass them by-value as function arguments on MSVC.','line_number':88,'multiline':False]['text':' _MSC_VER','line_number':103,'multiline':False]['text':' end namespace detail','line_number':149,'multiline':False]['text':'/ \brief This union template exposes a suitably aligned and sized character','line_number':151,'multiline':False]['text':'/ array member which can hold elements of any of up to ten types.','line_number':152,'multiline':False]['text':'/','line_number':153,'multiline':False]['text':'/ These types may be arrays, structs, or any other types. The goal is to','line_number':154,'multiline':False]['text':'/ expose a char array buffer member which can be used as suitable storage for','line_number':155,'multiline':False]['text':'/ a placement new of any of these types. Support for more than ten types can','line_number':156,'multiline':False]['text':'/ be added at the cost of more boilerplate.','line_number':157,'multiline':False]['text':' end namespace c10','line_number':174,'multiline':False]