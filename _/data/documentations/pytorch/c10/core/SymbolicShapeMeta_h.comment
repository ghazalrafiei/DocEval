['text':' Basic metadata from which other quantities are derived','line_number':13,'multiline':False]['text':' e.g. for sparse where there are no strides','line_number':18,'multiline':False]['text':' Non-const, don't need to hold mutables_ lock','line_number':24,'multiline':False]['text':' Non-const, don't need to hold mutables_ lock','line_number':30,'multiline':False]['text':' Accessors for derived quantities, computed lazily on first access','line_number':44,'multiline':False]['text':' Accessors to cached derived properties','line_number':68,'multiline':False]['text':' DO NOT call with mutables_ lock held','line_number':69,'multiline':False]['text':' Assumptions so we can short-circuit computation','line_number':119,'multiline':False]['text':' NOTE: Don't need to lock mutables_ since these aren't const','line_number':120,'multiline':False]['text':' These are little wrappers over the real compute_ functions that','line_number':154,'multiline':False]['text':' can make use of other contiguity fields to short circuit.','line_number':155,'multiline':False]['text':' They need to be implemented separately for SymBool, as SymBool does','line_number':156,'multiline':False]['text':' not short circuit.','line_number':157,'multiline':False]['text':' TODO: should the SymBool cases avoid the short circuit?  Need to reason','line_number':158,'multiline':False]['text':' if its correct, and reason if the simpler expressions are better for','line_number':159,'multiline':False]['text':' analysis (maybe not!)','line_number':160,'multiline':False]['text':' NOTE: These only set if !has_foo()','line_number':177,'multiline':False]['text':' Lazily initialized variables, with the corresponding available_ flag','line_number':186,'multiline':False]['text':' indicating whether the value has been initialized','line_number':187,'multiline':False]['text':' Mutex to prevent races when initializing the variable from const accessors','line_number':199,'multiline':False]['text':' namespace c10','line_number':210,'multiline':False]