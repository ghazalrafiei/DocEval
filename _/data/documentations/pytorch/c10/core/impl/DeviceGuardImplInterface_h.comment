['text':' Just for C10_ANONYMOUS_VARIABLE','line_number':8,'multiline':False]['text':' Forward declaration','line_number':15,'multiline':False]['text':'*
 * Flags defining the behavior of events.
 *
 * PYTORCH_DEFAULT and BACKEND_DEFAULT are valid for all backends. The
 * BACKEND_DEFAULT is what a particular backend would select if no
 * flags were given. PYTORCH_DEFAULT is the PyTorch's framework default
 * choice for events on that backend, which may not be the same. For example,
 * when PyTorch creates a CUDA event it sets the flag
 * CUDA_EVENT_DISABLING_TIMING by default to improve performance.
 *
 * The mapping of PYTORCH_DEFAULT and BACKEND_DEFAULT is done by each
 * backend implementation. Backend-specific flags, like CUDA_EVENT_DEFAULT,
 * should map one-to-one with actual event flags for those backends.
 ','line_number':18,'multiline':True]['text':' CUDA flags','line_number':35,'multiline':False]['text':' PyTorch-default for CUDA','line_number':37,'multiline':False]['text':' HIP flags','line_number':38,'multiline':False]['text':' PyTorch-default for HIP','line_number':40,'multiline':False]['text':' FOR TESTING ONLY','line_number':41,'multiline':False]['text':'*
 * DeviceGuardImplInterface represents the virtual interface which provides
 * functionality to provide an RAII class for device and stream switching,
 * via DeviceGuard.  Every distinct device type, e.g., CUDA and HIP, is
 * expected to implement and register an implementation of this interface.
 * All classes which inherit from DeviceGuardImplInterface should be declared
 * 'final'.
 *
 * This class exists because we provide a unified interface for performing
 * device guards via DeviceGuard, but we cannot assume that we have actually
 * compiled against the, e.g., CUDA library, which actually implements
 * this guard functionality.  In this case, a dynamic dispatch is required
 * to cross the library boundary.
 *
 * If possible, you should directly use implementations of this interface;
 * those uses will be devirtualized.
 ','line_number':47,'multiline':True]['text':'*
   * Return the type of device managed by this guard implementation.
   ','line_number':73,'multiline':True]['text':'*
   * Set the current device to Device, and return the previous Device.
   ','line_number':78,'multiline':True]['text':' NB: Implementations of exchangeDevice can be a bit boilerplatey.  You might','line_number':82,'multiline':False]['text':' consider replacing exchangeDevice with a non-virtual function with a baked','line_number':83,'multiline':False]['text':' in implementation; however, note that this will triple the number of','line_number':84,'multiline':False]['text':' virtual calls (when you implement exchangeDevice in a final subclass,','line_number':85,'multiline':False]['text':' the compiler gets to devirtualize everything; it won't do that if you don't','line_number':86,'multiline':False]['text':' define it in the subclass!)  A common way to solve this problem is to use','line_number':87,'multiline':False]['text':' some sort of CRTP; however, we can template DeviceGuardImplInterface since','line_number':88,'multiline':False]['text':' we really *do* need it to be virtual.  A little boilerplate seems easiest','line_number':89,'multiline':False]['text':' to explain.  (Another way around this problem is to provide inline','line_number':90,'multiline':False]['text':' functions that provide the default implementations, but this seems a little','line_number':91,'multiline':False]['text':' hard to explain.  In any case, we're only going to have on order of ten','line_number':92,'multiline':False]['text':' implementations of this anyway.)','line_number':93,'multiline':False]['text':'*
   * Get the current device.
   ','line_number':95,'multiline':True]['text':'*
   * Set the current device to Device.
   ','line_number':100,'multiline':True]['text':'*
   * Set the current device to Device, without checking for errors
   * (so, e.g., this can be called from a destructor).
   ','line_number':105,'multiline':True]['text':'*
   * Get the current stream for a given device.
   ','line_number':111,'multiline':True]['text':'*
   * Get the default stream for a given device.
   ','line_number':116,'multiline':True]['text':'*
   * Get a stream from the global pool for a given device.
   ','line_number':123,'multiline':True]['text':' Suppress unused variable warning','line_number':128,'multiline':False]['text':'*
   * Set a stream to be the thread local current stream for its device.
   * Return the previous stream for that device. You are NOT required
   * to set the current device to match the device of this stream.
   ','line_number':132,'multiline':True]['text':'*
   * Destroys the given event.
   ','line_number':139,'multiline':True]['text':'event','line_number':142,'multiline':True]['text':'device_index','line_number':142,'multiline':True]['text':'*
   * Increments the event's version and enqueues a job with this version
   * in the stream's work queue. When the stream process that job
   * it notifies all streams waiting on / blocked by that version of the
   * event to continue and marks that version as recorded.
   * ','line_number':145,'multiline':True]['text':'event','line_number':152,'multiline':True]['text':'stream','line_number':153,'multiline':True]['text':'device_index','line_number':154,'multiline':True]['text':'flag','line_number':155,'multiline':True]['text':'*
   * Does nothing if the event has not been scheduled to be recorded.
   * If the event was previously enqueued to be recorded, a command
   * to wait for the version of the event that exists at the time of this call
   * is inserted in the stream's work queue.
   * When the stream reaches this command it will stop processing
   * additional commands until that version of the event is marked as recorded.
   ','line_number':159,'multiline':True]['text':'event','line_number':167,'multiline':True]['text':'stream','line_number':167,'multiline':True]['text':'*
   * Returns true if (and only if)
   *  (1) the event has never been scheduled to be recorded
   *  (2) the current version is marked as recorded.
   * Returns false otherwise.
   ','line_number':171,'multiline':True]['text':'event','line_number':177,'multiline':True]['text':'*
   * Get the number of devices.  WARNING: This is REQUIRED to not raise
   * an exception.  If there is some sort of problem, e.g., driver error,
   * you should report that there are zero available devices.
   ','line_number':181,'multiline':True]['text':'*
   * Return true if all the work previously enqueued on the stream for
   * asynchronous execution has completed running on the device.
   ','line_number':188,'multiline':True]['text':'stream','line_number':192,'multiline':True]['text':'*
   * Wait (by blocking the calling thread) until all the work previously
   * enqueued on the stream has completed running on the device.
   ','line_number':196,'multiline':True]['text':'stream','line_number':200,'multiline':True]['text':'*
   * Ensure the caching allocator (if any) is aware that the given DataPtr is
   * being used on the given stream, and that it should thus avoid recycling the
   * DataPtr until all work on that stream is done.
   ','line_number':204,'multiline':True]['text':'*
   * Intended use of this class is to leak the DeviceGuardImpl at program end.
   * So you better not call the destructor, buster!
   ','line_number':212,'multiline':True]['text':' A no-op device guard impl that doesn't do anything interesting.  Useful','line_number':219,'multiline':False]['text':' for devices that don't actually have a concept of device index.  Prominent','line_number':220,'multiline':False]['text':' examples are CPU and Meta.','line_number':221,'multiline':False]['text':' no-op','line_number':229,'multiline':False]['text':' no-op','line_number':235,'multiline':False]['text':' no-op','line_number':238,'multiline':False]['text':' no-op','line_number':241,'multiline':False]['text':' NB: These do NOT set the current device','line_number':244,'multiline':False]['text':' no-op','line_number':246,'multiline':False]['text':' Event-related functions','line_number':253,'multiline':False]['text':'event','line_number':255,'multiline':True]['text':'stream','line_number':256,'multiline':True]['text':'device_index','line_number':257,'multiline':True]['text':'flag','line_number':258,'multiline':True]['text':'event','line_number':261,'multiline':True]['text':'stream','line_number':261,'multiline':True]['text':'event','line_number':264,'multiline':True]['text':'event','line_number':267,'multiline':True]['text':'device_index','line_number':267,'multiline':True]['text':' Stream-related functions','line_number':270,'multiline':False]['text':'stream','line_number':271,'multiline':True]['text':'stream','line_number':274,'multiline':True]['text':' Don't wait for anything.','line_number':275,'multiline':False]['text':' The registry is NON-owning.  Each stored pointer is std::atomic so','line_number':279,'multiline':False]['text':' that under all interleavings of registry calls the structure is','line_number':280,'multiline':False]['text':' race-free.  This doesn't cost us anything on reads in X86.  (An','line_number':281,'multiline':False]['text':' unsynchronized implementation probably is OK too, but I didn't want','line_number':282,'multiline':False]['text':' to prove that we never read from device_guard_impl_registry at the','line_number':283,'multiline':False]['text':' same time some registration is occurring.  Shiver.)','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':' I'd like this registry to be valid even at program destruction time','line_number':286,'multiline':False]['text':' (in case someone uses a DeviceGuard in a destructor to do some cleanup','line_number':287,'multiline':False]['text':' in the CUDA API.)  Since there are no direct accesses of the underlying','line_number':288,'multiline':False]['text':' owning objects which I can use to enforce initialization order (unlike','line_number':289,'multiline':False]['text':' in a Meyer singleton), it implies that you must *leak* objects when','line_number':290,'multiline':False]['text':' putting them in the registry.  This is done by deleting the destructor','line_number':291,'multiline':False]['text':' on DeviceGuardImplInterface.','line_number':292,'multiline':False]['text':' I can't conveniently use c10/util/Registry.h for the following reason:','line_number':297,'multiline':False]['text':' c10/util/Registry.h gives me a slow way of Create'ing a object of some','line_number':298,'multiline':False]['text':' interface from the registry, but no way of quickly accessing an already','line_number':299,'multiline':False]['text':' created object.  I'll be banging on getDeviceGuardImpl every time we do a','line_number':300,'multiline':False]['text':' DeviceGuard, so I really don't want to be doing an unordered_map lookup.','line_number':301,'multiline':False]['text':' Better if the registration mechanism directly drops its implementation','line_number':302,'multiline':False]['text':' into device_guard_impl_registry.','line_number':303,'multiline':False]['text':' Two adjacent int16_t fields DeviceType and DeviceIndex has field access','line_number':315,'multiline':False]['text':' miscompiled on NVCC. To workaround this issue, we apply a mask to the','line_number':316,'multiline':False]['text':' DeviceType. First check if the DeviceType is 16-bit.','line_number':317,'multiline':False]['text':' FB employees can see','line_number':318,'multiline':False]['text':'   https://fb.workplace.com/groups/llvm.gcc/permalink/4053565044692080/','line_number':319,'multiline':False]['text':' for more details','line_number':320,'multiline':False]['text':' This seems to be the first place where you make use of a device','line_number':324,'multiline':False]['text':' when you pass devices to factory functions.  Give a nicer error','line_number':325,'multiline':False]['text':' message in this case.','line_number':326,'multiline':False]['text':' namespace impl','line_number':335,'multiline':False]['text':' namespace c10','line_number':336,'multiline':False]