['text':' TODO: rename flag to C10','line_number':10,'multiline':False]['text':' QNNPACK AND XNNPACK may out-of-bound access the input and / or output','line_number':50,'multiline':False]['text':' tensors. This is by-design, and chosen to make the implementation of','line_number':51,'multiline':False]['text':' micro-kernels both simpler and faster as a result of not having to','line_number':52,'multiline':False]['text':' individually handle the corner cases where the number of processed elements','line_number':53,'multiline':False]['text':' is not a multiple of SIMD register width.  This behavior will trigger ASAN','line_number':54,'multiline':False]['text':' though, and may result in a segfault if the accessed memory location just so','line_number':55,'multiline':False]['text':' happens to fall on a page the current process has no read access to.  Here we','line_number':56,'multiline':False]['text':' define a custom allocator that allocates the extra storage required to keep','line_number':57,'multiline':False]['text':' this behavior safe.  This allocator could have been restricted to QNNPACK and','line_number':58,'multiline':False]['text':' XNNPACK only, but that would have negative performance ramifications, as','line_number':59,'multiline':False]['text':' input tensors must now be reallocated, and copied over, if the tensor is not','line_number':60,'multiline':False]['text':' allocated with this allocator to begin with.  Making this allocator the','line_number':61,'multiline':False]['text':' default on mobile builds minimizes the probability of unnecessary','line_number':62,'multiline':False]['text':' reallocations and copies, and also enables acceleration of operations where','line_number':63,'multiline':False]['text':' the output tensor is allocated outside of the function doing the','line_number':64,'multiline':False]['text':' implementation, wherein the implementation cannot simply re-allocate the','line_number':65,'multiline':False]['text':' output with the guarding allocator.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' PreGuardBytes: Number of guard bytes to allocate before the allocation.','line_number':68,'multiline':False]['text':' PostGuardBytes: Number of guard bytes to allocate after the allocation.','line_number':69,'multiline':False]['text':' TODO: enable with better TLS support on mobile','line_number':81,'multiline':False]['text':' profiledCPUMemoryReporter().Delete(pointer);','line_number':82,'multiline':False]['text':' This adds extra cost to freeing memory to the default case when','line_number':91,'multiline':False]['text':' caching allocator is not enabled.','line_number':92,'multiline':False]['text':' NOLINTNEXTLINE(clang-analyzer-unix.Malloc)','line_number':93,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':113,'multiline':False]['text':' The Mobile CPU allocator must always be present even on non-mobile builds','line_number':157,'multiline':False]['text':' because QNNPACK and XNNPACK are not mobile specific.','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':' Pre-guard: 8 bytes for QNNPACK, but set to gAlignment to ensure SIMD','line_number':160,'multiline':False]['text':'            alignment, not on the allocated memory, but memory location','line_number':161,'multiline':False]['text':'            returned to the user.','line_number':162,'multiline':False]['text':' Post-guard: 16 bytes for XNNPACK.','line_number':163,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-avoid-non-const-global-variables)','line_number':165,'multiline':False]['text':' Global default CPU Allocator','line_number':182,'multiline':False]['text':' C10_Mobile ','line_number':191,'multiline':True]['text':' C10_LOG_EVERY_MS might log every time in some builds,','line_number':232,'multiline':False]['text':' using a simple counter to avoid spammy logs','line_number':233,'multiline':False]['text':' namespace c10','line_number':301,'multiline':False]