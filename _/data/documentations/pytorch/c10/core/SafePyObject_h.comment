['text':' This is an safe owning holder for a PyObject, akin to pybind11's','line_number':9,'multiline':False]['text':' py::object, with two major differences:','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'  - It is in c10/core; i.e., you can use this type in contexts where','line_number':12,'multiline':False]['text':'    you do not have a libpython dependency','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'  - It is multi-interpreter safe (ala torchdeploy); when you fetch','line_number':15,'multiline':False]['text':'    the underlying PyObject* you are required to specify what the current','line_number':16,'multiline':False]['text':'    interpreter context is and we will check that you match it.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' It is INVALID to store a reference to a Tensor object in this way;','line_number':19,'multiline':False]['text':' you should just use TensorImpl directly in that case!','line_number':20,'multiline':False]['text':' Steals a reference to data','line_number':22,'multiline':False]['text':' In principle this could be copyable if we add an incref to PyInterpreter','line_number':29,'multiline':False]['text':' but for now it's easier to just disallow it.','line_number':30,'multiline':False]['text':'has_pyobj_slot','line_number':36,'multiline':True]['text':' stop tracking the current object, and return it','line_number':45,'multiline':False]['text':' Like SafePyObject, but non-owning.  Good for references to global PyObjects','line_number':57,'multiline':False]['text':' that will be leaked on interpreter exit.  You get a copy constructor/assign','line_number':58,'multiline':False]['text':' this way.','line_number':59,'multiline':False]['text':' namespace c10','line_number':82,'multiline':False]