['text':'/ An index representing a specific device; e.g., the 1 in GPU 1.','line_number':15,'multiline':False]['text':'/ A DeviceIndex is not independently meaningful without knowing','line_number':16,'multiline':False]['text':'/ the DeviceType it is associated; try to use Device rather than','line_number':17,'multiline':False]['text':'/ DeviceIndex directly.','line_number':18,'multiline':False]['text':'/ Represents a compute device on which a tensor is located. A device is','line_number':21,'multiline':False]['text':'/ uniquely identified by a type, which specifies the type of machine it is','line_number':22,'multiline':False]['text':'/ (e.g. CPU or CUDA GPU), and a device index or ordinal, which identifies the','line_number':23,'multiline':False]['text':'/ specific compute device when there is more than one of a certain type. The','line_number':24,'multiline':False]['text':'/ device index is optional, and in its defaulted state represents (abstractly)','line_number':25,'multiline':False]['text':'/ "the current device". Further, there are two constraints on the value of the','line_number':26,'multiline':False]['text':'/ device index, if one is explicitly stored:','line_number':27,'multiline':False]['text':'/ 1. A negative index represents the current device, a non-negative index','line_number':28,'multiline':False]['text':'/ represents a specific, concrete device,','line_number':29,'multiline':False]['text':'/ 2. When the device type is CPU, the device index must be zero.','line_number':30,'multiline':False]['text':'/ Constructs a new `Device` from a `DeviceType` and an optional device','line_number':34,'multiline':False]['text':'/ index.','line_number':35,'multiline':False]['text':' implicit ','line_number':36,'multiline':True]['text':'/ Constructs a `Device` from a string description, for convenience.','line_number':41,'multiline':False]['text':'/ The string supplied must follow the following schema:','line_number':42,'multiline':False]['text':'/ `(cpu|cuda)[:<device-index>]`','line_number':43,'multiline':False]['text':'/ where `cpu` or `cuda` specifies the device type, and','line_number':44,'multiline':False]['text':'/ `:<device-index>` optionally specifies a device index.','line_number':45,'multiline':False]['text':' implicit ','line_number':46,'multiline':True]['text':'/ Returns true if the type and index of this `Device` matches that of','line_number':48,'multiline':False]['text':'/ `other`.','line_number':49,'multiline':False]['text':'/ Returns true if the type or index of this `Device` differs from that of','line_number':54,'multiline':False]['text':'/ `other`.','line_number':55,'multiline':False]['text':'/ Sets the device index.','line_number':60,'multiline':False]['text':'/ Returns the type of device this is.','line_number':65,'multiline':False]['text':'/ Returns the optional index.','line_number':70,'multiline':False]['text':'/ Returns true if the device has a non-default index.','line_number':75,'multiline':False]['text':'/ Return true if the device is of CUDA type.','line_number':80,'multiline':False]['text':'/ Return true if the device is of PrivateUse1 type.','line_number':85,'multiline':False]['text':'/ Return true if the device is of MPS type.','line_number':90,'multiline':False]['text':'/ Return true if the device is of HIP type.','line_number':95,'multiline':False]['text':'/ Return true if the device is of VE type.','line_number':100,'multiline':False]['text':'/ Return true if the device is of XPU type.','line_number':105,'multiline':False]['text':'/ Return true if the device is of IPU type.','line_number':110,'multiline':False]['text':'/ Return true if the device is of XLA type.','line_number':115,'multiline':False]['text':'/ Return true if the device is of MTIA type.','line_number':120,'multiline':False]['text':'/ Return true if the device is of HPU type.','line_number':125,'multiline':False]['text':'/ Return true if the device is of Lazy type.','line_number':130,'multiline':False]['text':'/ Return true if the device is of Vulkan type.','line_number':135,'multiline':False]['text':'/ Return true if the device is of Metal type.','line_number':140,'multiline':False]['text':'/ Return true if the device is of ORT type.','line_number':145,'multiline':False]['text':'/ Return true if the device is of META type.','line_number':150,'multiline':False]['text':'/ Return true if the device is of CPU type.','line_number':155,'multiline':False]['text':'/ Return true if the device supports arbitrary strides.','line_number':160,'multiline':False]['text':'/ Same string as returned from operator<<.','line_number':166,'multiline':False]['text':' Removing these checks in release builds noticeably improves','line_number':173,'multiline':False]['text':' performance in micro-benchmarks.','line_number':174,'multiline':False]['text':' This is safe to do, because backends that use the DeviceIndex','line_number':175,'multiline':False]['text':' have a later check when we actually try to switch to that device.','line_number':176,'multiline':False]['text':' namespace c10','line_number':190,'multiline':False]['text':' Are you here because this static assert failed?  Make sure you ensure','line_number':196,'multiline':False]['text':' that the bitmasking code below is updated accordingly!','line_number':197,'multiline':False]['text':' Note [Hazard when concatenating signed integers]','line_number':200,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':201,'multiline':False]['text':' We must first convert to a same-sized unsigned type, before promoting to','line_number':202,'multiline':False]['text':' the result type, to prevent sign extension when any of the values is -1.','line_number':203,'multiline':False]['text':' If sign extension occurs, you'll clobber all of the values in the MSB','line_number':204,'multiline':False]['text':' half of the resulting integer.','line_number':205,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' Technically, by C/C++ integer promotion rules, we only need one of the','line_number':207,'multiline':False]['text':' uint32_t casts to the result type, but we put in both for explicitness's','line_number':208,'multiline':False]['text':' sake.','line_number':209,'multiline':False]['text':' namespace std','line_number':216,'multiline':False]