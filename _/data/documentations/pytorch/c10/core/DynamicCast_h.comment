['text':' Dynamic type casting utils:','line_number':10,'multiline':False]['text':' - fetch_and_cast','line_number':11,'multiline':False]['text':' - cast_and_store','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' fetch_and_cast fetch a value with dynamic type specified by a ScalarType','line_number':14,'multiline':False]['text':' from a void pointer and cast it to a static type.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' cast_and_store casts a static typed value into dynamic type specified','line_number':17,'multiline':False]['text':' by a ScalarType, and store it into a void pointer.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' NOTE:','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' Dynamic casting allows us to support type promotion without blowing up','line_number':22,'multiline':False]['text':' the combination space: For example, without dynamic cast, in order to','line_number':23,'multiline':False]['text':' implement `add_` with type promotion, we would need something like','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' AT_DISPATCH_ALL_TYPES(output.dtype(),','line_number':26,'multiline':False]['text':'    AT_DISPATCH_ALL_TYPES(input1.dtype(),','line_number':27,'multiline':False]['text':'       AT_DISPATCH_ALL_TYPES(input2.dtype(),','line_number':28,'multiline':False]['text':'           [](arg0_t a, arg1_t b) -> out_t { return a + b; }','line_number':29,'multiline':False]['text':'       )','line_number':30,'multiline':False]['text':'    )','line_number':31,'multiline':False]['text':' )','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' If we support N dtypes, the above code would generate the a+b kernel for','line_number':34,'multiline':False]['text':' all the N * N * N different supported types, the compilation time and','line_number':35,'multiline':False]['text':' binary size would become horrible.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' Dynamic casting might sounds like a bad idea in terms of performance.','line_number':38,'multiline':False]['text':' Especially if you ever do it in a loop, you are going to do a billion tests.','line_number':39,'multiline':False]['text':' But in practice it is not as bad as it might look:','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' - on CPU, this is a branch that always has the same outcome, therefore','line_number':42,'multiline':False]['text':'   hopefully the branch predictor could do the job pretty well','line_number':43,'multiline':False]['text':' - on GPU, these branches will not diverge, so we could still have the same','line_number':44,'multiline':False]['text':'   warp executing the same line of code','line_number':45,'multiline':False]['text':' - Most kernels, like `add`, are bandwidth bound, adding a few clock cycles to','line_number':46,'multiline':False]['text':'   check an integer does not hurt the performance much because the ALUs would','line_number':47,'multiline':False]['text':'   wait for load instructions anyway.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' For the discussion and benchmark, refer to:','line_number':50,'multiline':False]['text':' - https://github.com/pytorch/pytorch/pull/28343','line_number':51,'multiline':False]['text':' - https://github.com/pytorch/pytorch/pull/28344','line_number':52,'multiline':False]['text':' - https://github.com/pytorch/pytorch/pull/28345','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' Fetch a value with dynamic type src_type from ptr, and cast it to static type','line_number':62,'multiline':False]['text':' dest_t.','line_number':63,'multiline':False]['text':' just to avoid compiler warning','line_number':77,'multiline':False]['text':' Cast a value with static type src_t into dynamic dest_type, and store it to','line_number':80,'multiline':False]['text':' ptr.','line_number':81,'multiline':False]['text':' namespace c10','line_number':119,'multiline':False]