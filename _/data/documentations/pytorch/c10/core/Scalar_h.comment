['text':'*
 * Scalar represents a 0-dimensional tensor which contains a single element.
 * Unlike a tensor, numeric literals (in C++) are implicitly convertible to
 * Scalar (which is why, for example, we provide both add(Tensor) and
 * add(Scalar) overloads for many operations). It may also be used in
 * circumstances where you statically know a tensor is 0-dim and single size,
 * but don't know its type.
 ','line_number':20,'multiline':True]['text':' Value* is both implicitly convertible to SymbolicVariable and bool which','line_number':59,'multiline':False]['text':' causes ambiguity error. Specialized constructor for bool resolves this','line_number':60,'multiline':False]['text':' problem.','line_number':61,'multiline':False]['text':' TODO: Support ComplexHalf accessor','line_number':101,'multiline':False]['text':' also support scalar.to<int64_t>();','line_number':133,'multiline':False]['text':' Deleted for unsupported types, but specialized below for supported types','line_number':134,'multiline':False]['text':' audit uses of data_ptr','line_number':138,'multiline':False]['text':' you probably don't actually want these; they're mostly for testing','line_number':165,'multiline':False]['text':'includeBool=','line_number':214,'multiline':True]['text':' boolean scalar does not equal to a non boolean value','line_number':218,'multiline':False]['text':'includeBool=','line_number':236,'multiline':True]['text':' boolean scalar does not equal to a non boolean value','line_number':240,'multiline':False]['text':'includeBool=','line_number':262,'multiline':True]['text':' We can't set v in the initializer list using the','line_number':311,'multiline':False]['text':' syntax v{ .member = ... } because it doesn't work on MSVC','line_number':312,'multiline':False]['text':' NB: assumes that self has already been cleared','line_number':316,'multiline':False]['text':' Move out of scalar','line_number':322,'multiline':False]['text':' default constructor','line_number':335,'multiline':False]['text':' define the scalar.to<int64_t>() specializations','line_number':366,'multiline':False]['text':' namespace c10','line_number':375,'multiline':False]