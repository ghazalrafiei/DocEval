['text':' This test exists not to be comprehensive, but to more clearly show','line_number':12,'multiline':False]['text':' what the semantics of DispatchKeySet are.','line_number':13,'multiline':False]['text':' the "CPU" dispatch key is an instance of a per-backend-functionality key.','line_number':15,'multiline':False]['text':' It corresponds to "dense" functionality, "CPU" backend.','line_number':16,'multiline':False]['text':' This means that it gets a dense functionality bit, and a cpu backend bit','line_number':17,'multiline':False]['text':' set.','line_number':18,'multiline':False]['text':' You can think of "Dense/Sparse", and "CPUBit/CUDABit", as "building block"','line_number':29,'multiline':False]['text':' dispatch keys. You are allowed to directly create keysets out of them!','line_number':30,'multiline':False]['text':' Similarly, the AutogradCUDA key gets 2 bits in the keyset:','line_number':38,'multiline':False]['text':' The "Autograd" functionality bit, and the "CUDA" backend bit','line_number':39,'multiline':False]['text':' Because DispatchKeySet uses a condensed internal representation, you cannot','line_number':44,'multiline':False]['text':' use it to represent the FULL cross product of backends and functionalities','line_number':45,'multiline':False]['text':' for example:','line_number':46,'multiline':False]['text':' this keyset has all of the building block keys:','line_number':52,'multiline':False]['text':' and it also has the "runtime" keys that correspond to the full','line_number':58,'multiline':False]['text':' cross-product of functionality','line_number':59,'multiline':False]['text':' This means that there's no way to represent a keyset with, say, only','line_number':65,'multiline':False]['text':' Autograd CUDA + Dense CPU. Instead, you should think of a keyset as','line_number':66,'multiline':False]['text':' inheriting the full set of functionalities + backends of its keys. This','line_number':67,'multiline':False]['text':' means that the below keysets are all indistinguishable from each other.','line_number':68,'multiline':False]['text':' ~~~~~~~~~~ DispatchKeySet iterators ~~~~~~~~~~~','line_number':83,'multiline':False]['text':' Iterators allow you to iterate individually through the DispatchKey's in a','line_number':85,'multiline':False]['text':' DispatchKeySet','line_number':86,'multiline':False]['text':' However, only keys that correspond to actual runtime indices of kernels in','line_number':90,'multiline':False]['text':' the operator table show up when you iterate through a keyset. i.e.','line_number':91,'multiline':False]['text':' DispatchKey::Dense, and BackendComponent::CPUBit won't show up in an','line_number':92,'multiline':False]['text':' iterator.','line_number':93,'multiline':False]['text':' But other "functionality bits" that are not defined per-backend DO get','line_number':105,'multiline':False]['text':' their own slots in the operator table.','line_number':106,'multiline':False]['text':' runtime key','line_number':109,'multiline':False]['text':' runtime key','line_number':110,'multiline':False]['text':' NOT a runtime key','line_number':111,'multiline':False]['text':' This covers all keys that correspond to a single backend bit, e.g.','line_number':134,'multiline':False]['text':' BackendComponent::CPUBit. Even though these are NOT runtime keys, we still','line_number':135,'multiline':False]['text':' allow adding them directly to a keyset','line_number':136,'multiline':False]['text':' This covers all keys that correspond to a single functionality bit:','line_number':150,'multiline':False]['text':' - runtime, not-per-backend functionality keys, e.g.','line_number':151,'multiline':False]['text':' DispatchKey::FuncTorchBatched','line_number':152,'multiline':False]['text':' - runtime, "fake backend" keys, e.g. DispatchKey::FPGA','line_number':153,'multiline':False]['text':' - NOT-runtime, per-backend functionality keys, e.g. DispatchKey::Dense','line_number':154,'multiline':False]['text':'   Even though it's not a runtime key, we still allow adding it directly to a','line_number':155,'multiline':False]['text':'   keyset.','line_number':156,'multiline':False]['text':' DispatchKey::','line_number':157,'multiline':False]['text':' This covers runtime keys that are per-backend,','line_number':172,'multiline':False]['text':' and take up more than one bit in a DispatchKeySet. They take up one','line_number':173,'multiline':False]['text':' functionality bit + one backend bit. e.g. CPU, CUDA, SparseCPU, SparseCUDA,','line_number':174,'multiline':False]['text':' AutogradCPU, AutogradCUDA','line_number':175,'multiline':False]['text':' Skip these because they aren't real keys.','line_number':181,'multiline':False]['text':' These two sets should be equivalent:','line_number':198,'multiline':False]['text':' DispatchKeySet(DispatchKey::CPU)','line_number':199,'multiline':False]['text':' DispatchKeySet({DispatchKey::Dense, BackendComponent::CPUBit})','line_number':200,'multiline':False]['text':' These two sets should be equivalent:','line_number':204,'multiline':False]['text':' DispatchKeySet(DispatchKey::CPU).remove(DispatchKey::Dense)','line_number':205,'multiline':False]['text':' DispatchKeySet(BackendComponent::CPUBit)','line_number':206,'multiline':False]['text':' Skip these because they aren't real keys.','line_number':223,'multiline':False]['text':' The combined set has the backend bits','line_number':243,'multiline':False]['text':' and it has the backend bits','line_number':246,'multiline':False]['text':' and it has the original two runtime keys','line_number':249,'multiline':False]['text':' Add all of the keys in the keyset to a real set','line_number':253,'multiline':False]['text':' We have two runtime keys, with either the same backend or the same','line_number':272,'multiline':False]['text':' per-backend functionalities. E.g. {AutogradCUDA, CUDA} or','line_number':273,'multiline':False]['text':' {AutogradCPU, AutogradCUDA} There should be 2 total runtime keys in','line_number':274,'multiline':False]['text':' this set.','line_number':275,'multiline':False]['text':' since i and j are different keys, they should not have the same','line_number':278,'multiline':False]['text':' functionality and backend','line_number':279,'multiline':False]['text':' We have two runtime keys, that have different backends + per-backend','line_number':281,'multiline':False]['text':' functionalities. So we should expect the full cross product of','line_number':282,'multiline':False]['text':' runtime keys to be in the set. e.g. if i = AutogradCUDA, and j = CPU,','line_number':283,'multiline':False]['text':' then combined = {AutogradCUDA, AutogradCPU, CUDA, CPU}','line_number':284,'multiline':False]['text':' Constructor + Comparison','line_number':305,'multiline':False]['text':' Increment Ops','line_number':313,'multiline':False]['text':' AutogradCPU isn't a backend key so it is ignored','line_number':319,'multiline':False]['text':' Functionalize isn't a backend key so it is ignored','line_number':323,'multiline':False]['text':' quantizedCUDA has higher priority than CUDA','line_number':329,'multiline':False]['text':' The iterator should return all runtime keys in the set,','line_number':348,'multiline':False]['text':' including the cross product of {backends} x {functionalities}','line_number':349,'multiline':False]['text':' iterate through dense backends first.','line_number':358,'multiline':False]['text':' FPGA doesn't have a backend bit, so it isn't included in the cross product.','line_number':361,'multiline':False]['text':' iterate through the autograd keys laster.','line_number':363,'multiline':False]['text':' Total # of runtime entries includes an entry for DispatchKey::Undefined,','line_number':372,'multiline':False]['text':' which is not included when iterating through the DispatchKeySet.','line_number':373,'multiline':False]['text':' doesn't throw','line_number':380,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-goto,hicpp-avoid-goto)','line_number':382,'multiline':False]['text':' These synthetic keys never actually get used and don't need','line_number':414,'multiline':False]['text':' to be printed','line_number':415,'multiline':False]