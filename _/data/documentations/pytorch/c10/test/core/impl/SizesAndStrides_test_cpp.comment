['text':' NOLINTBEGIN(*conversion*, *multiplication*)','line_number':13,'multiline':False]['text':' Can't test size_at() out of bounds because it just asserts for now.','line_number':47,'multiline':False]['text':' Small to small growing.','line_number':61,'multiline':False]['text':' Small to small growing, again.','line_number':64,'multiline':False]['text':' Small to small, shrinking.','line_number':75,'multiline':False]['text':' Small to small with no size change.','line_number':79,'multiline':False]['text':' Small to small, growing back so that we can confirm that our "new"','line_number':83,'multiline':False]['text':' data really does get zeroed.','line_number':84,'multiline':False]['text':' Small to big.','line_number':88,'multiline':False]['text':' Big to big, growing.','line_number':98,'multiline':False]['text':' Big to big with no size change.','line_number':103,'multiline':False]['text':' Big to big, shrinking.','line_number':113,'multiline':False]['text':' Grow back to make sure "new" elements get zeroed in big mode too.','line_number':117,'multiline':False]['text':' Finally, big to small.','line_number':121,'multiline':False]['text':' Give it different data than it had when it was small to avoid','line_number':123,'multiline':False]['text':' getting it right by accident (i.e., because of leftover inline','line_number':124,'multiline':False]['text':' storage when going small to big).','line_number':125,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':230,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':240,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':248,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':255,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':266,'multiline':False]['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':274,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':303,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':330,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':357,'multiline':False]['text':' NOLINTNEXTLINE(bugprone-use-after-move,clang-analyzer-cplusplus.Move)','line_number':384,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-self-assign-overloaded)','line_number':395,'multiline':False]['text':' NOLINTNEXTLINE(clang-diagnostic-self-assign-overloaded)','line_number':399,'multiline':False]['text':' Avoid failures due to -Wall -Wself-move.','line_number':404,'multiline':False]['text':' NOLINTEND(*conversion*, *multiplication*)','line_number':422,'multiline':False]