['text':'/ Number of assertion failure messages we can store. If this is too small','line_number':14,'multiline':False]['text':'/ threads will fail silently.','line_number':15,'multiline':False]['text':'/ Holds information about any device-side assertions that fail.','line_number':22,'multiline':False]['text':'/ Held in managed memory and access by both the CPU and the GPU.','line_number':23,'multiline':False]['text':'/ Stringification of the assertion','line_number':25,'multiline':False]['text':'/ File the assertion was in','line_number':27,'multiline':False]['text':'/ Name of the function the assertion was in','line_number':29,'multiline':False]['text':'/ Line number the assertion was at','line_number':31,'multiline':False]['text':'/ Number uniquely identifying the kernel launch that triggered the assertion','line_number':33,'multiline':False]['text':'/ block_id of the thread that failed the assertion','line_number':35,'multiline':False]['text':'/ third_id of the thread that failed the assertion','line_number':37,'multiline':False]['text':'/ Used to hold assertions generated by the device','line_number':41,'multiline':False]['text':'/ Held in managed memory and access by both the CPU and the GPU.','line_number':42,'multiline':False]['text':'/ Total number of assertions found; a subset of thse will be recorded','line_number':44,'multiline':False]['text':'/ in `assertions`','line_number':45,'multiline':False]['text':'/ An array of assertions that will be written to in a race-free manner','line_number':47,'multiline':False]['text':'/ Use to hold info about kernel launches so that we can run kernels','line_number':51,'multiline':False]['text':'/ asynchronously and still associate launches with device-side','line_number':52,'multiline':False]['text':'/ assertion failures','line_number':53,'multiline':False]['text':'/ Filename of the code where the kernel was launched from','line_number':55,'multiline':False]['text':'/ Function from which the kernel was launched','line_number':57,'multiline':False]['text':'/ Line number of where the code was launched from','line_number':59,'multiline':False]['text':'/ Backtrace of where the kernel was launched from, only populated if','line_number':61,'multiline':False]['text':'/ CUDAKernelLaunchRegistry::gather_launch_stacktrace is True','line_number':62,'multiline':False]['text':'/ Kernel that was launched','line_number':64,'multiline':False]['text':'/ Device the kernel was launched on','line_number':66,'multiline':False]['text':'/ Stream the kernel was launched on','line_number':68,'multiline':False]['text':'/ A number that uniquely identifies the kernel launch','line_number':70,'multiline':False]['text':'/ Circular buffer used to hold information about kernel launches','line_number':74,'multiline':False]['text':'/ this is later used to reconstruct how a device-side kernel assertion failure','line_number':75,'multiline':False]['text':'/ occurred CUDAKernelLaunchRegistry is used as a singleton','line_number':76,'multiline':False]['text':'/ Assume that this is the max number of kernel launches that might ever be','line_number':79,'multiline':False]['text':'/ enqueued across all streams on a single device','line_number':80,'multiline':False]['text':'/ How many kernel launch infos we've inserted. Used to ensure that circular','line_number':82,'multiline':False]['text':'/ queue doesn't provide false information by always increasing, but also to','line_number':83,'multiline':False]['text':'/ mark where we are inserting into the queue','line_number':84,'multiline':False]['text':'/ Shared mutex between writer and accessor to ensure multi-threaded safety.','line_number':88,'multiline':False]['text':'/ Used to ensure prevent race conditions in GPU memory allocation','line_number':90,'multiline':False]['text':'/ Pointer to managed memory keeping track of device-side assertions. There','line_number':92,'multiline':False]['text':'/ is one entry for each possible device the process might work with. Unused','line_number':93,'multiline':False]['text':'/ entries are nullptrs. We could also use an unordered_set here, but this','line_number':94,'multiline':False]['text':'/ vector design will be faster and the wasted memory is small since we','line_number':95,'multiline':False]['text':'/ expect the number of GPUs per node will always be small','line_number':96,'multiline':False]['text':'/ A single circular buffer holds information about every kernel launch the','line_number':100,'multiline':False]['text':'/ process makes across all devices.','line_number':101,'multiline':False]['text':'/ Register a new kernel launch and obtain a generation number back to be','line_number':108,'multiline':False]['text':'/ passed to the kernel','line_number':109,'multiline':False]['text':'/ Get copies of the kernel launch registry and each device's assertion','line_number':116,'multiline':False]['text':'/ failure buffer so they can be inspected without raising race conditions','line_number':117,'multiline':False]['text':'/ Get a pointer to the current device's assertion failure buffer. If no such','line_number':121,'multiline':False]['text':'/ buffer exists then one is created. This means that the first kernel launch','line_number':122,'multiline':False]['text':'/ made on each device will be slightly slower because memory allocations are','line_number':123,'multiline':False]['text':'/ required','line_number':124,'multiline':False]['text':'/ Gets the global singleton of the registry','line_number':126,'multiline':False]['text':'/ If not all devices support DSA, we disable it','line_number':128,'multiline':False]['text':'/ Whether or not to gather stack traces when launching kernels','line_number':130,'multiline':False]['text':'/ Whether or not host-side DSA is enabled or disabled at run-time','line_number':132,'multiline':False]['text':'/ Note: Device-side code cannot be enabled/disabled at run-time','line_number':133,'multiline':False]['text':'/ Whether or not a device has indicated a failure','line_number':135,'multiline':False]['text':' namespace cuda','line_number':146,'multiline':False]['text':' namespace c10','line_number':147,'multiline':False]['text':' Each kernel launched with TORCH_DSA_KERNEL_LAUNCH','line_number':149,'multiline':False]['text':' requires the same input arguments. We introduce the following macro to','line_number':150,'multiline':False]['text':' standardize these.','line_number':151,'multiline':False]['text':' This macro can be used to pass the DSA arguments onward to another','line_number':156,'multiline':False]['text':' function','line_number':157,'multiline':False]