['text':' Global stream state and constants','line_number':19,'multiline':False]['text':' Non-default streams','line_number':29,'multiline':False]['text':' Note: the number of CUDA devices is determined at run time,','line_number':30,'multiline':False]['text':' and the low and high priority pools are lazily initialized','line_number':31,'multiline':False]['text':' when the first stream is requested for a device.','line_number':32,'multiline':False]['text':' The device flags track the initialization of each device, while','line_number':33,'multiline':False]['text':' the low and high priority counters track, for each device, the next stream','line_number':34,'multiline':False]['text':' in the pool to be returned when a stream is requested (round-robin fashion','line_number':35,'multiline':False]['text':' , see the note in CUDAStream.h).','line_number':36,'multiline':False]['text':' The streams are "leaked": they are created but never destroyed because the','line_number':37,'multiline':False]['text':' destruction of global variables could happen after the CUDA runtime has','line_number':38,'multiline':False]['text':' already been destroyed and thus invoking cudaStreamDestroy could lead to a','line_number':39,'multiline':False]['text':' crash. It's likely an issue in CUDA, but to be safe - let's just "forget"','line_number':40,'multiline':False]['text':' the destruction.','line_number':41,'multiline':False]['text':' Note [StreamId assignment]','line_number':50,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':51,'multiline':False]['text':' How do we assign stream IDs?','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' -- 54 bits --  -- 5 bits -----  -- 4 bits --     --1 bit --','line_number':54,'multiline':False]['text':' zeros          stream id index  StreamIdType     Ext/native stream','line_number':55,'multiline':False]['text':'                ignored for ext   ignored for ext','line_number':56,'multiline':False]['text':' for external stream, StreamID is a cudaStream_t pointer','line_number':57,'multiline':False]['text':' this means that last bit will always be 0','line_number':58,'multiline':False]['text':' so when constructing StreamId for a native stream we set last bit to 1','line_number':59,'multiline':False]['text':' to distinguish between native and external streams','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' We are obligated to treat the stream ID 0 as the default stream, per the','line_number':63,'multiline':False]['text':' invariant specified in c10::Stream, so this is one exception to','line_number':64,'multiline':False]['text':' "last bit = 1 for native streams". However, all other numbers are entirely','line_number':65,'multiline':False]['text':' an internal implementation detail, we reserve the right to renumber streams','line_number':66,'multiline':False]['text':' however we like.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Note that it is really important that the MSB is zero; StreamId is a','line_number':69,'multiline':False]['text':' *signed* integer, and unsigned to signed conversion outside of the','line_number':70,'multiline':False]['text':' bounds of signed integer representation is undefined behavior.  You','line_number':71,'multiline':False]['text':' could work around this with something like','line_number':72,'multiline':False]['text':' https://stackoverflow.com/questions/13150449/efficient-unsigned-to-signed-cast-avoiding-implementation-defined-behavior','line_number':73,'multiline':False]['text':' but it seems a bit overkill for this.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' Also, external managed stream pointers (cudaStream_t) can be directly stored','line_number':76,'multiline':False]['text':' in the Id field so in this case, we need to check the stream alignment.','line_number':77,'multiline':False]['text':' StreamIdType encodes whether this stream is DEFAULT, EXTernal or','line_number':80,'multiline':False]['text':' for all other native streams, the stream priority (higher value is higher','line_number':81,'multiline':False]['text':' priority)','line_number':82,'multiline':False]['text':' StreamId is 64-bit, so we can just rely on regular promotion rules.','line_number':117,'multiline':False]['text':' We rely on streamIdIndex and streamIdType being non-negative;','line_number':118,'multiline':False]['text':' see Note [Hazard when concatenating signed integers]','line_number':119,'multiline':False]['text':' Externally allocated streams have their id being the cudaStream_ptr','line_number':122,'multiline':False]['text':' so the last bit will be 0','line_number':123,'multiline':False]['text':' last bit is external/internal stream, the mask should start from second','line_number':127,'multiline':False]['text':' rightmost bit','line_number':128,'multiline':False]['text':' Thread-local current streams','line_number':148,'multiline':False]['text':' Populates global values.','line_number':151,'multiline':False]['text':' Warning: this function must only be called once!','line_number':152,'multiline':False]['text':' Check if the number of GPUs matches the expected compile-time max number','line_number':155,'multiline':False]['text':' of GPUs.','line_number':156,'multiline':False]['text':' Note [HIP stream priorities]','line_number':166,'multiline':False]['text':' HIP stream priorities are 1=low, 0=default, -1=high which differs from CUDA','line_number':167,'multiline':False]['text':' which is 0=default, -1=high, -2=higher etc.','line_number':168,'multiline':False]['text':' Clamp leastPriority to 0 for HIP.','line_number':169,'multiline':False]['text':' greatestPriority is negative','line_number':173,'multiline':False]['text':' Creates the low and high priority stream pools for the specified device','line_number':180,'multiline':False]['text':' Warning: only call once per device!','line_number':181,'multiline':False]['text':' Switches to the requested device so streams are properly associated','line_number':183,'multiline':False]['text':' with it.','line_number':184,'multiline':False]['text':' lower number is higher priority','line_number':189,'multiline':False]['text':' Init front-end to ensure initialization only occurs once','line_number':202,'multiline':False]['text':' Inits default streams (once, globally)','line_number':204,'multiline':False]['text':' Inits current streams (thread local) to default streams','line_number':211,'multiline':False]['text':' Helper to verify the GPU index is valid','line_number':218,'multiline':False]['text':' Helper to determine the index of the stream to return','line_number':223,'multiline':False]['text':' Note: Streams are returned round-robin (see note in CUDAStream.h)','line_number':224,'multiline':False]['text':' anonymous namespace','line_number':239,'multiline':False]['text':' See Note [StreamId assignment]','line_number':241,'multiline':False]['text':' Returns a stream from the requested pool','line_number':275,'multiline':False]['text':' Note: when called the first time on a device, this will create the','line_number':276,'multiline':False]['text':' stream pools for that device.','line_number':277,'multiline':False]['text':' Initializes the stream pools (once)','line_number':289,'multiline':False]['text':' pri_idx is zero-based','line_number':294,'multiline':False]['text':' The stream pointer will be the actual id','line_number':309,'multiline':False]['text':' namespace cuda','line_number':342,'multiline':False]['text':' namespace c10','line_number':343,'multiline':False]