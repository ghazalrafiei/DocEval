['text':'
 * Given a sequence of allocations in a thread, AllocationPlan records
 * 1. size of each allocation
 * 2. Lifetime of each allocation.
 * 3. allocation offsets: Memory offset for each allocation in a single blob of
 * memory
 * 4. Total size of a blob of memory required to satisfy all the allocations.
 ','line_number':9,'multiline':True]['text':' Records size of each allocation by their sequential allocation ids.','line_number':19,'multiline':False]['text':' This maps one allocation id (X) to another allocation id (Y).','line_number':21,'multiline':False]['text':' Allocation X is alive until allocation Y. From allocation Y onwards','line_number':22,'multiline':False]['text':' allocation X is not referenced.','line_number':23,'multiline':False]['text':' Thus Y is the id of the first allocation after X is freed.','line_number':24,'multiline':False]['text':' NB: When an allocation is recorded, along with recording its size,','line_number':25,'multiline':False]['text':' we also set the lifetime to be numeric_limits::max()','line_number':26,'multiline':False]['text':' This is to track allocations that are made during the scope of','line_number':27,'multiline':False]['text':' profiling but were not freed until after the scope ended.','line_number':28,'multiline':False]['text':' Such allocations are not managed by profiling allocator.','line_number':29,'multiline':False]['text':' Maps an allocation to some offset in a blob of memory.','line_number':31,'multiline':False]['text':'
 * Map of memory ptr to allocation id. This is auxiliary information only
 * used to establish lifetime of allocations.
 ','line_number':39,'multiline':True]['text':' Maps allocated ptr to its allocation id.','line_number':46,'multiline':False]['text':' This is used when freeing the memory to look up the allocation id','line_number':47,'multiline':False]['text':' in order to establish the lifetime of a particular allocation.','line_number':48,'multiline':False]['text':' NOT THREAD SAFE profiling allocator.','line_number':68,'multiline':False]['text':'
 * Usage: Profile allocations made by one run of the model.
 * AllocationPlan plan;
 * {
 *   WithProfileAllocationGuard profile_guard(&plan);
 *   module.forward(...);
 * }
 * plan now contains allocation plan.
 ','line_number':85,'multiline':True]['text':'
 * Usage: Validate allocation plan made with WithProfileAllocationGuard
 * bool plan_validation_success, success = true;
 * for (some number of representative inputs)
 * {
 *   WithValidateAllocationPlanGuard(&plan, &plan_validation_success);
 *   module.forward(...);
 *   success = success && plan_validation_success;
 * }
 * success == true means allocations are according to plan
 * else for some inputs allocation pattern changed.
 ','line_number':103,'multiline':True]['text':'
 * Usage: Allocate tensors accordingly to allocation plan
 * First make allocation plan.
 *  See WithProfileAllocationsGuard usage.
 * Second validate allocation plan.
 *  See WithValidateAllocationPlanGuard usage.
 * CPUProfilingAllocator profiling_allocator;
 * {
 *   WithProfilingAllocatorGuard allocator_guard(&profiling_allocator, &plan);
 *   module.forward(...);
 * }
 ','line_number':127,'multiline':True]['text':' namespace c10','line_number':149,'multiline':False]