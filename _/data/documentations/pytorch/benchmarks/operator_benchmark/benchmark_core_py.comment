['text':' needs to be imported after torch','line_number':12,'multiline':False]['text':' noqa: F401','line_number':13,'multiline':False]['text':' When auto_set is used, the test name needs to include input.','line_number':64,'multiline':False]['text':' tags is only used in our benchmark backend to filter tests and','line_number':88,'multiline':False]['text':' it will be removed from config which is then passed to the init function','line_number':89,'multiline':False]['text':' an example of config and atrr is:','line_number':90,'multiline':False]['text':' config: [{'M': 16}, {'N': 16}, {'K': 64}, {'tags': 'short'}]','line_number':91,'multiline':False]['text':' attr: {'tags': 'short'}','line_number':92,'multiline':False]['text':' if 'cuda' is specified in input shape but the testing machines doesn't','line_number':97,'multiline':False]['text':' support, we will skip this input','line_number':98,'multiline':False]['text':' op_name_function is a dictionary which has op_name and op_function.','line_number':115,'multiline':False]['text':' an example of op_name_function is:','line_number':116,'multiline':False]['text':' {'op_name' : 'abs', 'op_function' : torch.abs}','line_number':117,'multiline':False]['text':' op_function is concatenated with the input dict then passed to the init function','line_number':118,'multiline':False]['text':' op_name is passed to the set_module_name function','line_number':119,'multiline':False]['text':' _num_inputs_require_grads is used to track the number of tensors','line_number':138,'multiline':False]['text':' which use auto_set().','line_number':139,'multiline':False]['text':' This for loop is only used when auto_set is used.','line_number':146,'multiline':False]['text':' _pass_count counts how many times init has been called.','line_number':147,'multiline':False]['text':' _auto_set_counter is reset after init is called.','line_number':148,'multiline':False]['text':' TODO(mingzhe09088): remove this deepcopy when we encounter','line_number':153,'multiline':False]['text':' performance issue.','line_number':154,'multiline':False]['text':' Input name index will start from input1','line_number':157,'multiline':False]['text':' TODO: consider time-bound constraints as well.','line_number':178,'multiline':False]['text':' 100 is the default warmup iterations','line_number':189,'multiline':False]['text':' when a specific test is selected by a user, we don't need','line_number':195,'multiline':False]['text':' to match the tag anymore','line_number':196,'multiline':False]['text':' Output for AIBench','line_number':218,'multiline':False]['text':' Print out per iteration execution time instead of avg time','line_number':219,'multiline':False]['text':' Analyze time after each run to decide if the result is stable','line_number':303,'multiline':False]['text':' Print out the time spent in each epoch in ms','line_number':313,'multiline':False]['text':' Re-estimate the hopefully-sufficient','line_number':333,'multiline':False]['text':' iteration count, and run the benchmark again...','line_number':334,'multiline':False]['text':' TODO: consider regex matching for test filtering.','line_number':355,'multiline':False]['text':' Currently, this is a sub-string matching.','line_number':356,'multiline':False]['text':' Filter framework, operator, test_name, tag, forward_only','line_number':368,'multiline':False]['text':' Print out the test name and skip the real execution','line_number':395,'multiline':False]['text':' To reduce variance, fix a numpy randseed to the test case,','line_number':424,'multiline':False]['text':' so that the randomly generated input tensors remain the','line_number':425,'multiline':False]['text':' same for each test case.','line_number':426,'multiline':False]['text':' The random seed is limited to 32-bit because of numpy','line_number':427,'multiline':False]['text':' requirement.','line_number':428,'multiline':False]['text':' Warmup','line_number':440,'multiline':False]['text':' Actual Execution','line_number':444,'multiline':False]