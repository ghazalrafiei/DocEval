['text':' Copyright (c) Facebook, Inc. and its affiliates.','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' This source code is licensed under the BSD-style license found in the','line_number':4,'multiline':False]['text':' LICENSE file in the root directory of this source tree.','line_number':5,'multiline':False]['text':' reference python implementations for C ops','line_number':7,'multiline':False]['text':' use dict to avoid writing C++ bindings for set','line_number':20,'multiline':False]['text':' make a single dimension positional but do not permute it,','line_number':105,'multiline':False]['text':' used to do multi-tensor operators where the dim being acted on','line_number':106,'multiline':False]['text':' should not physically move if possible','line_number':107,'multiline':False]['text':' print("END", orig)','line_number':241,'multiline':False]['text':' so that dims that really only take a single argument work...','line_number':355,'multiline':False]['text':' * bail to original example if we have a single non-Dim tensor, or a non-tensor','line_number':401,'multiline':False]['text':' * locate ... or an unbound tensor list, and determine its size, bind dim list','line_number':402,'multiline':False]['text':'   (remember that None does not count to the total dim count)','line_number':403,'multiline':False]['text':' * bind simple dims and dim-packs to their sizes, count the number of uses of each dim,','line_number':404,'multiline':False]['text':'   produce the re-view if needed','line_number':405,'multiline':False]['text':' * for each single-use dim index, replace with no_slice and mark that it will be added','line_number':406,'multiline':False]['text':'   (keep track of whether we have to call super)','line_number':407,'multiline':False]['text':' * call super if needed','line_number':408,'multiline':False]['text':' * if we have dims to bind, bind them (it will help if we eliminated ... and None before)','line_number':409,'multiline':False]['text':' this handles bool indexing handling, as well as some other simple cases.','line_number':411,'multiline':False]['text':' WAR for functorch bug where zero time tensors in getitem are not handled correctly.','line_number':417,'multiline':False]['text':' can further optimize this case','line_number':427,'multiline':False]['text':' flatten the dimslists into the indexing','line_number':466,'multiline':False]['text':' currenty:','line_number':510,'multiline':False]['text':' input is flat, containing either Dim, or Tensor, or something valid for standard indexing','line_number':511,'multiline':False]['text':' self may have first-class dims as well.','line_number':512,'multiline':False]['text':' to index:','line_number':514,'multiline':False]['text':' drop the first class dims from self, they just become direct indices of their positions','line_number':515,'multiline':False]['text':' figure out the dimensions of the indexing tensors: union of all the dims in the tensors in the index.','line_number':517,'multiline':False]['text':' these dimensions will appear and need to be bound at the first place tensor occures','line_number':518,'multiline':False]['text':' indices to ptensor rather than self which has first-class dimensions','line_number':522,'multiline':False]['text':' XXX - dim is optional and can be the outer-most dimension...','line_number':577,'multiline':False]