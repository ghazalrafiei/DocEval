['text':'github.com/neovim/neovim/pull/11837','line_number':41,'multiline':False]['text':'/fake/uri";','line_number':1978,'multiline':False]['text':'.foo',
                }},
              },
            },
          },
        }, { client_id = client_id })

        vim.lsp.handlers['client/registerCapability'](nil, {
          registrations = {
            {
              id = 'range-formatting',
              method = 'textDocument/rangeFormatting',
            },
          },
        }, { client_id = client_id })

        vim.lsp.handlers['client/registerCapability'](nil, {
          registrations = {
            {
              id = 'completion',
              method = 'textDocument/completion',
            },
          },
        }, { client_id = client_id })

        local result = {}
        local function check(method, fname)
          local bufnr = fname and vim.fn.bufadd(fname) or nil
          local client = vim.lsp.get_client_by_id(client_id)
          result[#result + 1] = {method = method, fname = fname, supported = client.supports_method(method, {bufnr = bufnr})}
        end


        check("textDocument/formatting")
        check("textDocument/formatting", tmpfile)
        check("textDocument/rangeFormatting")
        check("textDocument/rangeFormatting", tmpfile)
        check("textDocument/completion")

        return result
      ]], root_dir, tmpfile)

      eq(5, #result)
      eq({method = 'textDocument/formatting', supported = false}, result[1])
      eq({method = 'textDocument/formatting', supported = true, fname = tmpfile}, result[2])
      eq({method = 'textDocument/rangeFormatting', supported = true}, result[3])
      eq({method = 'textDocument/rangeFormatting', supported = true, fname = tmpfile}, result[4])
      eq({method = 'textDocument/completion', supported = false}, result[5])
    end)
  end)

  describe('vim.lsp._watchfiles', function()
    it('sends notifications when files change', function()
      skip(is_os('bsd'), "bsd only reports rename on folders if file inside change")
      local root_dir = helpers.tmpname()
      os.remove(root_dir)
      mkdir(root_dir)

      exec_lua(create_server_definition)
      local result = exec_lua([[
        local root_dir = ...

        local server = _create_server()
        local client_id = vim.lsp.start({
          name = 'watchfiles-test',
          cmd = server.cmd,
          root_dir = root_dir,
          capabilities = {
            workspace = {
              didChangeWatchedFiles = {
                dynamicRegistration = true,
              },
            },
          },
        })

        local expected_messages = 2 -- initialize, initialized

        local watchfunc = require('vim.lsp._watchfiles')._watchfunc
        local msg_wait_timeout = watchfunc == vim._watch.poll and 2500 or 200
        local function wait_for_messages()
          assert(vim.wait(msg_wait_timeout, function() return #server.messages == expected_messages end), 'Timed out waiting for expected number of messages. Current messages seen so far: ' .. vim.inspect(server.messages))
        end

        wait_for_messages()

        vim.lsp.handlers['client/registerCapability'](nil, {
          registrations = {
            {
              id = 'watchfiles-test-0',
              method = 'workspace/didChangeWatchedFiles',
              registerOptions = {
                watchers = {
                  {
                    globPattern = '*','line_number':3976,'multiline':True]