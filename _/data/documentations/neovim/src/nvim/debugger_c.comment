['text':'/ @file debugger.c','line_number':1,'multiline':False]['text':'/','line_number':2,'multiline':False]['text':'/ Vim script debugger functions','line_number':3,'multiline':False]['text':'/ batch mode debugging: don't save and restore typeahead.','line_number':37,'multiline':False]['text':' old and newval for debug expressions','line_number':40,'multiline':False]['text':'/ The list of breakpoints: dbg_breakp.','line_number':43,'multiline':False]['text':'/ This is a grow-array of structs.','line_number':44,'multiline':False]['text':'/< breakpoint number','line_number':46,'multiline':False]['text':'/< DBG_FUNC or DBG_FILE or DBG_EXPR','line_number':47,'multiline':False]['text':'/< function, expression or file name','line_number':48,'multiline':False]['text':'/< regexp program','line_number':49,'multiline':False]['text':'/< line number in function or file','line_number':50,'multiline':False]['text':'/< ! used','line_number':51,'multiline':False]['text':'/< last result of watchexpression','line_number':52,'multiline':False]['text':'/< stored nested level for expr','line_number':53,'multiline':False]['text':'/ Debug mode. Repeatedly get Ex commands, until told to continue normal','line_number':60,'multiline':False]['text':'/ execution.','line_number':61,'multiline':False]['text':' don't redisplay the window','line_number':89,'multiline':False]['text':' don't wait for return','line_number':90,'multiline':False]['text':' don't use error from debugged stuff','line_number':91,'multiline':False]['text':' display commands','line_number':92,'multiline':False]['text':' display messages','line_number':93,'multiline':False]['text':' display error messages','line_number':94,'multiline':False]['text':' don't redirect debug commands','line_number':95,'multiline':False]['text':' Repeat getting a command and executing it.','line_number':124,'multiline':False]['text':' Save the current typeahead buffer and replace it with an empty one.','line_number':129,'multiline':False]['text':' This makes sure we get input from the user here and don't interfere','line_number':130,'multiline':False]['text':' with the commands being executed.  Reset "ex_normal_busy" to avoid','line_number':131,'multiline':False]['text':' the side effects of using ":normal". Save the stuff buffer and make','line_number':132,'multiline':False]['text':' it empty. Set ignore_script to avoid reading from script input.','line_number':133,'multiline':False]['text':' don't debug any function call, e.g. from an expression mapping','line_number':143,'multiline':False]['text':' If this is a debug command, set "last_cmd".','line_number':161,'multiline':False]['text':' If not, reset "last_cmd".','line_number':162,'multiline':False]['text':' For a blank line use previous command.','line_number':163,'multiline':False]['text':' Check that the tail matches.','line_number':221,'multiline':False]['text':' Execute debug command: decide where to break next and return.','line_number':234,'multiline':False]['text':' Do not repeat ">interrupt" cmd, continue stepping.','line_number':255,'multiline':False]['text':' Going out reset backtrace_level','line_number':278,'multiline':False]['text':' don't debug this command','line_number':283,'multiline':False]['text':' Only print the message again when typing a command before coming back here.','line_number':307,'multiline':False]['text':'/ ":debug".','line_number':391,'multiline':False]['text':'/ When debugging or a breakpoint is set on a skipped command, no debug prompt','line_number':404,'multiline':False]['text':'/ is shown by do_one_cmd().  This situation is indicated by debug_skipped, and','line_number':405,'multiline':False]['text':'/ debug_skipped_name is then set to the source name in the breakpoint case. If','line_number':406,'multiline':False]['text':'/ a skipped command decides itself that a debug prompt should be displayed, it','line_number':407,'multiline':False]['text':'/ can do so by calling dbg_check_skipped().','line_number':408,'multiline':False]['text':'/ Go to debug mode when a breakpoint was encountered or "ex_nesting_level" is','line_number':412,'multiline':False]['text':'/ at or below the break level.  But only when the line is actually','line_number':413,'multiline':False]['text':'/ executed.  Return true and set breakpoint_name for skipped commands that','line_number':414,'multiline':False]['text':'/ decide to execute something themselves.','line_number':415,'multiline':False]['text':'/ Called from do_one_cmd() before executing a command.','line_number':416,'multiline':False]['text':' replace K_SNR with "<SNR>"','line_number':423,'multiline':False]['text':'/ Go to debug mode if skipped by dbg_check_breakpoint() because eap->skip was','line_number':452,'multiline':False]['text':'/ set.','line_number':453,'multiline':False]['text':'/','line_number':454,'multiline':False]['text':'/ @return true when the debug mode is entered this time.','line_number':455,'multiline':False]['text':' Save the value of got_int and reset it.  We don't want a previous','line_number':462,'multiline':False]['text':' interruption cause flushing the input buffer.','line_number':463,'multiline':False]['text':' eap->skip is true','line_number':467,'multiline':False]['text':' nr of last defined breakpoint','line_number':478,'multiline':False]['text':' Profiling uses file and func names similar to breakpoints.','line_number':481,'multiline':False]['text':'/ Evaluate the "bp->dbg_name" expression and return the result.','line_number':487,'multiline':False]['text':'/ Disables error messages.','line_number':488,'multiline':False]['text':' Disable error messages, a bad expression would make Vim unusable.','line_number':492,'multiline':False]['text':'/ Parse the arguments of ":profile", ":breakadd" or ":breakdel" and put them','line_number':499,'multiline':False]['text':'/ in the entry just after the last one in dbg_breakp.  Note that "dbg_name"','line_number':500,'multiline':False]['text':'/ is allocated.','line_number':501,'multiline':False]['text':'/ Returns FAIL for failure.','line_number':502,'multiline':False]['text':'/','line_number':503,'multiline':False]['text':'/ @param arg','line_number':504,'multiline':False]['text':'/ @param gap  either &dbg_breakp or &prof_ga','line_number':505,'multiline':False]['text':' Find "func" or "file".','line_number':515,'multiline':False]['text':' Find optional line number.','line_number':535,'multiline':False]['text':' Find the function or file name.  Don't accept a function name with ().','line_number':545,'multiline':False]['text':' Expand the file name in the same way as do_source().  This means','line_number':561,'multiline':False]['text':' doing it twice, so that $DIR/file gets expanded when $DIR is','line_number':562,'multiline':False]['text':' "~/dir".','line_number':563,'multiline':False]['text':'/ ":breakadd".  Also used for ":profile".','line_number':587,'multiline':False]['text':' default line number is 1','line_number':611,'multiline':False]['text':' DBG_EXPR','line_number':621,'multiline':False]['text':'/ ":debuggreedy".','line_number':630,'multiline':False]['text':'/ ":breakdel" and ":profdel".','line_number':651,'multiline':False]['text':' ":breakdel {nr}"','line_number':664,'multiline':False]['text':' ":breakdel {func|file|expr} [lnum] {name}"','line_number':676,'multiline':False]['text':' If all breakpoints were removed clear the array.','line_number':721,'multiline':False]['text':'/ ":breaklist".','line_number':730,'multiline':False]['text':'/ Find a breakpoint for a function or sourced file.','line_number':755,'multiline':False]['text':'/ Returns line number at which to break; zero when no matching breakpoint.','line_number':756,'multiline':False]['text':'/','line_number':757,'multiline':False]['text':'/ @param file  true for a file, false for a function','line_number':758,'multiline':False]['text':'/ @param fname  file or function name','line_number':759,'multiline':False]['text':'/ @param after  after this line number','line_number':760,'multiline':False]['text':'/ @param file     true for a file, false for a function','line_number':766,'multiline':False]['text':'/ @param fname    file or function name','line_number':767,'multiline':False]['text':'/ @param fp[out]  forceit','line_number':768,'multiline':False]['text':'/','line_number':769,'multiline':False]['text':'/ @returns true if profiling is on for a function or sourced file.','line_number':770,'multiline':False]['text':'/ Common code for dbg_find_breakpoint() and has_profiling().','line_number':777,'multiline':False]['text':'/','line_number':778,'multiline':False]['text':'/ @param file  true for a file, false for a function','line_number':779,'multiline':False]['text':'/ @param fname  file or function name','line_number':780,'multiline':False]['text':'/ @param after  after this line number','line_number':781,'multiline':False]['text':'/ @param gap  either &dbg_breakp or &prof_ga','line_number':782,'multiline':False]['text':'/ @param fp  if not NULL: return forceit','line_number':783,'multiline':False]['text':' Return quickly when there are no breakpoints.','line_number':791,'multiline':False]['text':' Replace K_SNR in function name with "<SNR>".','line_number':796,'multiline':False]['text':' Skip entries that are not useful or are for a line that is beyond','line_number':804,'multiline':False]['text':' an already found breakpoint.','line_number':805,'multiline':False]['text':' Save the value of got_int and reset it.  We don't want a','line_number':811,'multiline':False]['text':' previous interruption cancel matching, only hitting CTRL-C','line_number':812,'multiline':False]['text':' while matching should abort it.','line_number':813,'multiline':False]['text':' Need to evaluate again, typval_compare() overwrites "tv".','line_number':838,'multiline':False]['text':'/ Called when a breakpoint was encountered.','line_number':867,'multiline':False]['text':' We need to check if this line is actually executed in do_one_cmd()','line_number':870,'multiline':False]