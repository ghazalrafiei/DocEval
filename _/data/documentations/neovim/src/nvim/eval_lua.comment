['text':'/#) and the
      name.
      There must be no extra characters after the name, although in
      a few cases this is ignored.  That may become stricter in the
      future, thus don't count on it!
      Working example: >vim
      	echo exists(":make")
      <NOT working example: >vim
      	echo exists(":make install")

      <Note that the argument must be a string, not the name of the
      variable itself.  For example: >vim
      	echo exists(bufcount)
      <This doesn't check for existence of the "bufcount" variable,
      but gets the value of "bufcount", and checks if that exists.

    ]=],
    name = 'exists',
    params = { { 'expr', 'any' } },
    returns = '0|1',
    signature = 'exists({expr})',
  },
  exp = {
    args = 1,
    base = 1,
    desc = [=[
      Return the exponential of {expr} as a |Float| in the range
      [0, inf].
      {expr} must evaluate to a |Float| or a |Number|.
      Returns 0.0 if {expr} is not a |Float| or a |Number|.
      Examples: >vim
      	echo exp(2)
      <	7.389056 >vim
      	echo exp(-1)
      <	0.367879

    ]=],
    float_func = 'exp',
    name = 'exp',
    params = { { 'expr', 'any' } },
    signature = 'exp({expr})',
  },
  expand = {
    args = { 1, 3 },
    base = 1,
    desc = [=[
      Expand wildcards and the following special keywords in
      {string}.  'wildignorecase' applies.

      If {list} is given and it is |TRUE|, a List will be returned.
      Otherwise the result is a String and when there are several
      matches, they are separated by <NL> characters.

      If the expansion fails, the result is an empty string.  A name
      for a non-existing file is not included, unless {string} does
      not start with '%', '#' or '<', see below.

      When {string} starts with '%', '#' or '<', the expansion is
      done like for the |cmdline-special| variables with their
      associated modifiers.  Here is a short overview:

      	%		current file name
      	#		alternate file name
      	#n		alternate file name n
      	<cfile>		file name under the cursor
      	<afile>		autocmd file name
      	<abuf>		autocmd buffer number (as a String!)
      	<amatch>	autocmd matched name
      	<cexpr>		C expression under the cursor
      	<sfile>		sourced script file or function name
      	<slnum>		sourced script line number or function
      			line number
      	<sflnum>	script file line number, also when in
      			a function
      	<SID>		"<SNR>123_"  where "123" is the
      			current script ID  |<SID>|
      	<script>	sourced script file, or script file
      			where the current function was defined
      	<stack>		call stack
      	<cword>		word under the cursor
      	<cWORD>		WORD under the cursor
      	<client>	the {clientid} of the last received
      			message
      Modifiers:
      	:p		expand to full path
      	:h		head (last path component removed)
      	:t		tail (last path component only)
      	:r		root (one extension removed)
      	:e		extension only

      Example: >vim
      	let &tags = expand("%:p:h") .. "/tags"
      <Note that when expanding a string that starts with '%', '#' or
      '<', any following text is ignored.  This does NOT work: >vim
      	let doesntwork = expand("%:h.bak")
      <Use this: >vim
      	let doeswork = expand("%:h") .. ".bak"
      <Also note that expanding "<cfile>" and others only returns the
      referenced file name without further expansion.  If "<cfile>"
      is "~/.cshrc", you need to do another expand() to have the
      "~/" expanded into the path of the home directory: >vim
      	echo expand(expand("<cfile>"))
      <
      There cannot be white space between the variables and the
      following modifier.  The |fnamemodify()| function can be used
      to modify normal file names.

      When using '%' or '#', and the current or alternate file name
      is not defined, an empty string is used.  Using "%:p" in a
      buffer with no name, results in the current directory, with a
      '/' added.
      When 'verbose' is set then expanding '%', '#' and <> items
      will result in an error message if the argument cannot be
      expanded.

      When {string} does not start with '%', '#' or '<', it is
      expanded like a file name is expanded on the command line.
      'suffixes' and 'wildignore' are used, unless the optional
      {nosuf} argument is given and it is |TRUE|.
      Names for non-existing files are included.  The "**" item can
      be used to search in a directory tree.  For example, to find
      all "README" files in the current directory and below: >vim
      	echo expand("*','line_number':2211,'multiline':True]['text':'" or "/*" and the text from the 'foldmarker' and','line_number':2883,'multiline':False]['text':'path" is unchanged, but','line_number':10174,'multiline':False]