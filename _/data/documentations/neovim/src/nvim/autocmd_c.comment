['text':' autocmd.c: Autocommand related functions','line_number':1,'multiline':False]['text':' Naming Conventions:','line_number':66,'multiline':False]['text':'  - general autocmd behavior start with au_','line_number':67,'multiline':False]['text':'  - AutoCmd start with aucmd_','line_number':68,'multiline':False]['text':'  - Autocmd.exec stat with aucmd_exec','line_number':69,'multiline':False]['text':'  - AutoPat start with aupat_','line_number':70,'multiline':False]['text':'  - Groups start with augroup_','line_number':71,'multiline':False]['text':'  - Events start with event_','line_number':72,'multiline':False]['text':' The autocommands are stored in a contiguous vector for each event.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' The order of AutoCmds is important, this is the order in which they','line_number':76,'multiline':False]['text':' were defined and will have to be executed.','line_number':77,'multiline':False]['text':'','line_number':78,'multiline':False]['text':' To avoid having to match the pattern too often, patterns are reference','line_number':79,'multiline':False]['text':' counted and reused for consecutive autocommands.','line_number':80,'multiline':False]['text':' Code for automatic commands.','line_number':82,'multiline':False]['text':' stack of active autocommands','line_number':83,'multiline':False]['text':' ID for associating autocmds created via nvim_create_autocmd','line_number':85,'multiline':False]['text':' Used to delete autocmds from nvim_del_autocmd','line_number':86,'multiline':False]['text':' use get_deleted_augroup() to get this','line_number':89,'multiline':False]['text':' The ID of the current group.','line_number':92,'multiline':False]['text':' Whether we need to delete marked patterns.','line_number':95,'multiline':False]['text':' While deleting autocmds, they aren't actually remover, just marked.','line_number':96,'multiline':False]['text':' block all autocmds','line_number':99,'multiline':False]['text':' Map of autocmd group names and ids.','line_number':106,'multiline':False]['text':'  name -> ID','line_number':107,'multiline':False]['text':'  ID -> name','line_number':108,'multiline':False]['text':' Return early if there are no autocmds for this event','line_number':143,'multiline':False]['text':' for "<buffer=X>"','line_number':148,'multiline':False]['text':' detect special <buffer[=X]> buffer-local patterns','line_number':153,'multiline':False]['text':' normalize pat into standard "<buffer>#N" form','line_number':155,'multiline':False]['text':' Loop through all the specified patterns.','line_number':170,'multiline':False]['text':' Skip deleted autocommands.','line_number':179,'multiline':False]['text':' Accept a pattern when:','line_number':184,'multiline':False]['text':' - a group was specified and it's that group','line_number':185,'multiline':False]['text':' - the length of the pattern matches','line_number':186,'multiline':False]['text':' - the pattern matches.','line_number':187,'multiline':False]['text':' For <buffer[=X]>, this condition works because we normalize','line_number':188,'multiline':False]['text':' all buffer-local patterns.','line_number':189,'multiline':False]['text':' Show event name and group only if one of them changed.','line_number':196,'multiline':False]['text':' When switching groups, we need to show the new group information.','line_number':210,'multiline':False]['text':' show the group name, if it's not the default group','line_number':211,'multiline':False]['text':' show the event name','line_number':220,'multiline':False]['text':' Show pattern only if it changed.','line_number':224,'multiline':False]['text':' If a pattern is provided, find next pattern. Otherwise exit after single iteration.','line_number':276,'multiline':False]['text':' Delete autocommand.','line_number':289,'multiline':False]['text':'/ Cleanup autocommands that have been deleted.','line_number':317,'multiline':False]['text':'/ This is only done when not executing autocommands.','line_number':318,'multiline':False]['text':' Loop over all events.','line_number':325,'multiline':False]['text':' Loop over all autocommands.','line_number':327,'multiline':False]['text':' Called when buffer is freed, to remove/invalidate related buffer-local autocmds.','line_number':355,'multiline':False]['text':' invalidate currently executing autocommands','line_number':358,'multiline':False]['text':' invalidate buflocals looping through events','line_number':365,'multiline':False]['text':' Add an autocmd group name or return existing group matching name.','line_number':386,'multiline':False]['text':' Return its ID.','line_number':387,'multiline':False]['text':'/ Delete the augroup that matches name.','line_number':411,'multiline':False]['text':'/ @param stupid_legacy_mode bool: This parameter determines whether to run the augroup','line_number':412,'multiline':False]['text':'/     deletion in the same fashion as `:augroup! {name}` where if there are any remaining','line_number':413,'multiline':False]['text':'/     autocmds left in the augroup, it will change the name of the augroup to `--- DELETED ---`','line_number':414,'multiline':False]['text':'/     but leave the autocmds existing. These are _separate_ augroups, so if you do this for','line_number':415,'multiline':False]['text':'/     multiple augroups, you will have a bunch of `--- DELETED ---` augroups at the same time.','line_number':416,'multiline':False]['text':'/     There is no way, as far as I could tell, how to actually delete them at this point as a user','line_number':417,'multiline':False]['text':'/','line_number':418,'multiline':False]['text':'/     I did not consider this good behavior, so now when NOT in stupid_legacy_mode, we actually','line_number':419,'multiline':False]['text':'/     delete these groups and their commands, like you would expect (and don't leave hanging','line_number':420,'multiline':False]['text':'/     `--- DELETED ---` groups around)','line_number':421,'multiline':False]['text':' the group doesn't exist','line_number':425,'multiline':False]['text':' Remove the group because it's not currently in use.','line_number':458,'multiline':False]['text':'/ Find the ID of an autocmd group name.','line_number':463,'multiline':False]['text':'/','line_number':464,'multiline':False]['text':'/ @param name augroup name','line_number':465,'multiline':False]['text':'/','line_number':466,'multiline':False]['text':'/ @return the ID or AUGROUP_ERROR (< 0) for error.','line_number':467,'multiline':False]['text':'/ Gets the name for a particular group.','line_number':483,'multiline':False]['text':' next_augroup_id is the "source of truth" about what autocmds have existed','line_number':496,'multiline':False]['text':'','line_number':497,'multiline':False]['text':' The map_size is not the source of truth because groups can be removed from','line_number':498,'multiline':False]['text':' the map. When this happens, the map size is reduced. That's why this function','line_number':499,'multiline':False]['text':' relies on next_augroup_id instead.','line_number':500,'multiline':False]['text':' "END" is always considered the last augroup ID.','line_number':502,'multiline':False]['text':' Used for expand_get_event_name and expand_get_augroup_name','line_number':503,'multiline':False]['text':' If it's larger than the largest group, then it doesn't have a name','line_number':508,'multiline':False]['text':' If it's not in the map anymore, then it must have been deleted.','line_number':518,'multiline':False]['text':'/ Return true if augroup "name" exists.','line_number':522,'multiline':False]['text':'/','line_number':523,'multiline':False]['text':'/ @param name augroup name','line_number':524,'multiline':False]['text':'/ ":augroup {name}".','line_number':531,'multiline':False]['text':' ":aug end": back to group 0','line_number':540,'multiline':False]['text':' ":aug xxx": switch to group xxx','line_number':542,'multiline':False]['text':' ":aug": list the group names','line_number':544,'multiline':False]['text':' Delete the augroup_map, including free the data','line_number':576,'multiline':False]['text':' aucmd_win[] is freed in win_free_all()','line_number':588,'multiline':False]['text':'/ Return true if "win" is an active entry in aucmd_win[].','line_number':592,'multiline':False]['text':'/ Return the event number for event name "start".','line_number':603,'multiline':False]['text':'/ Return NUM_EVENTS if the event name was not found.','line_number':604,'multiline':False]['text':'/ Return a pointer to the next event name in "end".','line_number':605,'multiline':False]['text':' the event name ends with end of line, '|', a blank or a comma','line_number':611,'multiline':False]['text':'/ Return the event number for event name "str".','line_number':629,'multiline':False]['text':'/ Return NUM_EVENTS if the event name was not found.','line_number':630,'multiline':False]['text':'/ Return the name for event','line_number':641,'multiline':False]['text':'/','line_number':642,'multiline':False]['text':'/ @param[in]  event  Event to return name for.','line_number':643,'multiline':False]['text':'/','line_number':644,'multiline':False]['text':'/ @return Event name, static string. Returns "Unknown" for unknown events.','line_number':645,'multiline':False]['text':'/ Return true if "event" is included in 'eventignore'.','line_number':657,'multiline':False]['text':'/','line_number':658,'multiline':False]['text':'/ @param event event to check','line_number':659,'multiline':False]['text':' Return OK when the contents of p_ei is valid, FAIL otherwise.','line_number':676,'multiline':False]['text':' Add "what" to 'eventignore' to skip loading syntax highlighting for every','line_number':695,'multiline':False]['text':' buffer loaded into the window.  "what" must start with a comma.','line_number':696,'multiline':False]['text':' Returns the old value of 'eventignore' in allocated memory.','line_number':697,'multiline':False]['text':' Implements :autocmd.','line_number':720,'multiline':False]['text':' Defines an autocmd (does not execute; cf. apply_autocmds_group).','line_number':721,'multiline':False]['text':'','line_number':722,'multiline':False]['text':' Can be used in the following ways:','line_number':723,'multiline':False]['text':'','line_number':724,'multiline':False]['text':' :autocmd <event> <pat> <cmd>     Add <cmd> to the list of commands that','line_number':725,'multiline':False]['text':'                                  will be automatically executed for <event>','line_number':726,'multiline':False]['text':'                                  when editing a file matching <pat>, in','line_number':727,'multiline':False]['text':'                                  the current group.','line_number':728,'multiline':False]['text':' :autocmd <event> <pat>           Show the autocommands associated with','line_number':729,'multiline':False]['text':'                                  <event> and <pat>.','line_number':730,'multiline':False]['text':' :autocmd <event>                 Show the autocommands associated with','line_number':731,'multiline':False]['text':'                                  <event>.','line_number':732,'multiline':False]['text':' :autocmd                         Show all autocommands.','line_number':733,'multiline':False]['text':' :autocmd! <event> <pat> <cmd>    Remove all autocommands associated with','line_number':734,'multiline':False]['text':'                                  <event> and <pat>, and add the command','line_number':735,'multiline':False]['text':'                                  <cmd>, for the current group.','line_number':736,'multiline':False]['text':' :autocmd! <event> <pat>          Remove all autocommands associated with','line_number':737,'multiline':False]['text':'                                  <event> and <pat> for the current group.','line_number':738,'multiline':False]['text':' :autocmd! <event>                Remove all autocommands associated with','line_number':739,'multiline':False]['text':'                                  <event> for the current group.','line_number':740,'multiline':False]['text':' :autocmd!                        Remove ALL autocommands for the current','line_number':741,'multiline':False]['text':'                                  group.','line_number':742,'multiline':False]['text':'','line_number':743,'multiline':False]['text':'  Multiple events and patterns may be given separated by commas.  Here are','line_number':744,'multiline':False]['text':'  some examples:','line_number':745,'multiline':False]['text':' :autocmd bufread,bufenter *.c,*.h    set tw=0 smartindent noic','line_number':746,'multiline':False]['text':' :autocmd bufleave         *          set tw=79 nosmartindent ic infercase','line_number':747,'multiline':False]['text':'','line_number':748,'multiline':False]['text':' :autocmd * *.c               show all autocommands for *.c files.','line_number':749,'multiline':False]['text':'','line_number':750,'multiline':False]['text':' Mostly a {group} argument can optionally appear before <event>.','line_number':751,'multiline':False]['text':' no argument, use all groups','line_number':765,'multiline':False]['text':' Check for a legal group name.  If not, use AUGROUP_ALL.','line_number':767,'multiline':False]['text':' Scan over the events.','line_number':771,'multiline':False]['text':' If we find an illegal name, return here, don't do anything.','line_number':772,'multiline':False]['text':' Scan over the pattern.  Put a NUL at the end.','line_number':784,'multiline':False]['text':' Expand environment variables in the pattern.  Set 'shellslash', we want','line_number':793,'multiline':False]['text':' forward slashes here.','line_number':794,'multiline':False]['text':' Check the deprecated "nested" flag.','line_number':821,'multiline':False]['text':' Find the start of the commands.','line_number':829,'multiline':False]['text':' Expand <sfile> in it.','line_number':830,'multiline':False]['text':' some error','line_number':833,'multiline':False]['text':' Print header when showing autocommands.','line_number':842,'multiline':False]['text':' Highlight title','line_number':844,'multiline':False]['text':' do_autocmd() for one event.','line_number':887,'multiline':False]['text':' Defines an autocmd (does not execute; cf. apply_autocmds_group).','line_number':888,'multiline':False]['text':'','line_number':889,'multiline':False]['text':' If *pat == NUL: do for all patterns.','line_number':890,'multiline':False]['text':' If *cmd == NUL: show entries.','line_number':891,'multiline':False]['text':' If forceit == true: delete entries.','line_number':892,'multiline':False]['text':' If group is not AUGROUP_ALL: only use this group.','line_number':893,'multiline':False]['text':' Cannot be used to show all patterns. See au_show_for_event or au_show_for_all_events','line_number':898,'multiline':False]['text':' for "<buffer=X>"','line_number':901,'multiline':False]['text':' Delete all aupat for an event.','line_number':906,'multiline':False]['text':' Loop through all the specified patterns.','line_number':912,'multiline':False]['text':' detect special <buffer[=X]> buffer-local patterns','line_number':915,'multiline':False]['text':' normalize pat into standard "<buffer>#N" form','line_number':920,'multiline':False]['text':' Find existing autocommands with this pattern.','line_number':930,'multiline':False]['text':' Accept a pattern when:','line_number':935,'multiline':False]['text':' - a group was specified and it's that group','line_number':936,'multiline':False]['text':' - the length of the pattern matches','line_number':937,'multiline':False]['text':' - the pattern matches.','line_number':938,'multiline':False]['text':' For <buffer[=X]>, this condition works because we normalize','line_number':939,'multiline':False]['text':' all buffer-local patterns.','line_number':940,'multiline':False]['text':' Remove existing autocommands.','line_number':943,'multiline':False]['text':' If adding any new autocmd's for this AutoPat, don't','line_number':944,'multiline':False]['text':' delete the pattern from the autopat list, append to','line_number':945,'multiline':False]['text':' this list.','line_number':946,'multiline':False]['text':' may really delete removed patterns/commands now','line_number':963,'multiline':False]['text':' 0 is not a valid group.','line_number':970,'multiline':False]['text':' detect special <buffer[=X]> buffer-local patterns','line_number':979,'multiline':False]['text':' for "<buffer=X>"','line_number':983,'multiline':False]['text':' normalize pat into standard "<buffer>#N" form','line_number':987,'multiline':False]['text':' Try to reuse pattern from the last existing autocommand.','line_number':994,'multiline':False]['text':' Skip deleted autocommands.','line_number':1000,'multiline':False]['text':' Set result back to NULL if the last pattern doesn't match.','line_number':1002,'multiline':False]['text':' No matching pattern found, allocate a new one.','line_number':1010,'multiline':False]['text':' refuse to add buffer-local ap if buffer number is invalid','line_number':1012,'multiline':False]['text':' need to initialize last_mode for the first ModeChanged autocmd','line_number':1040,'multiline':False]['text':' If the event is CursorMoved, update the last cursor position','line_number':1045,'multiline':False]['text':' position to avoid immediately triggering the autocommand','line_number':1046,'multiline':False]['text':' Initialize the fields checked by the WinScrolled and','line_number':1052,'multiline':False]['text':' WinResized trigger to prevent them from firing right after','line_number':1053,'multiline':False]['text':' the first autocmd is defined.','line_number':1054,'multiline':False]['text':' Add the autocmd at the end of the AutoCmd vector.','line_number':1072,'multiline':False]['text':' Find end of the pattern.','line_number':1097,'multiline':False]['text':' Watch out for a comma in braces, like "*.\{obj,o\}".','line_number':1098,'multiline':False]['text':' ignore single comma','line_number':1100,'multiline':False]['text':'/ Implementation of ":doautocmd [group] event [fname]".','line_number':1129,'multiline':False]['text':'/ Return OK for success, FAIL for failure;','line_number':1130,'multiline':False]['text':'/','line_number':1131,'multiline':False]['text':'/ @param do_msg  give message for no matching autocmds?','line_number':1132,'multiline':False]['text':' Check for a legal group name.  If not, use AUGROUP_ALL.','line_number':1142,'multiline':False]['text':' Scan over the events.','line_number':1150,'multiline':False]['text':' If we find an illegal name, return here, don't do anything.','line_number':1151,'multiline':False]['text':' Loop over the events.','line_number':1159,'multiline':False]['text':' ":doautoall": execute autocommands for each loaded buffer.','line_number':1177,'multiline':False]['text':' This is a bit tricky: For some commands curwin->w_buffer needs to be','line_number':1187,'multiline':False]['text':' equal to curbuf, but for some buffers there may not be a window.','line_number':1188,'multiline':False]['text':' So we change the buffer for the current window for a moment.  This','line_number':1189,'multiline':False]['text':' gives problems when the autocommands make changes to the list of','line_number':1190,'multiline':False]['text':' buffers or windows...','line_number':1191,'multiline':False]['text':' Only do loaded buffers and skip the current buffer, it's done last.','line_number':1193,'multiline':False]['text':' Find a window for this buffer and save some values.','line_number':1198,'multiline':False]['text':' execute the autocommands for this buffer','line_number':1202,'multiline':False]['text':' Execute the modeline settings, but don't set window-local','line_number':1206,'multiline':False]['text':' options if we are using the current window for another','line_number':1207,'multiline':False]['text':' buffer.','line_number':1208,'multiline':False]['text':' restore the current window','line_number':1212,'multiline':False]['text':' Stop if there is some error or buffer was deleted.','line_number':1215,'multiline':False]['text':' Execute autocommands for the current buffer last.','line_number':1222,'multiline':False]['text':'/ Check *argp for <nomodeline>.  When it is present return false, otherwise','line_number':1231,'multiline':False]['text':'/ return true and advance *argp to after it. Thus do_modelines() should be','line_number':1232,'multiline':False]['text':'/ called when true is returned.','line_number':1233,'multiline':False]['text':'/','line_number':1234,'multiline':False]['text':'/ @param[in,out] argp argument string','line_number':1235,'multiline':False]['text':'/ Prepare for executing autocommands for (hidden) buffer `buf`.','line_number':1246,'multiline':False]['text':'/ If the current buffer is not in any visible window, put it in a temporary','line_number':1247,'multiline':False]['text':'/ floating window using an entry in `aucmd_win[]`.','line_number':1248,'multiline':False]['text':'/ Set `curbuf` and `curwin` to match `buf`.','line_number':1249,'multiline':False]['text':'/','line_number':1250,'multiline':False]['text':'/ @param aco  structure to save values in','line_number':1251,'multiline':False]['text':'/ @param buf  new curbuf','line_number':1252,'multiline':False]['text':' Append `aucmd_win` to the window list.','line_number':1256,'multiline':False]['text':' Find a window that is for the new buffer','line_number':1258,'multiline':False]['text':' be quick when buf is curbuf','line_number':1259,'multiline':False]['text':' Allocate a window when needed.','line_number':1271,'multiline':False]['text':' There is a window for "buf" in the current tab page, make it the','line_number':1302,'multiline':False]['text':' curwin.  This is preferred, it has the least side effects (esp. if','line_number':1303,'multiline':False]['text':' "buf" is curbuf).','line_number':1304,'multiline':False]['text':' There is no window for "buf", use "auc_win".  To minimize the side','line_number':1308,'multiline':False]['text':' effects, insert it in the current tab page.','line_number':1309,'multiline':False]['text':' Anything related to a window (e.g., setting folds) may have','line_number':1310,'multiline':False]['text':' unexpected results.','line_number':1311,'multiline':False]['text':' set cursor and topline to safe values','line_number':1316,'multiline':False]['text':' Make sure w_localdir and globaldir are NULL to avoid a chdir() in','line_number':1318,'multiline':False]['text':' win_enter_ext().','line_number':1319,'multiline':False]['text':' We don't want BufEnter/WinEnter autocommands.','line_number':1324,'multiline':False]['text':' Prevent chdir() call in win_enter_ext(), through do_autochdir()','line_number':1330,'multiline':False]['text':' no redrawing and don't set the window title','line_number':1333,'multiline':False]['text':' disable the Visual area, the position may be invalid in another buffer','line_number':1345,'multiline':False]['text':'/ Cleanup after executing autocommands for a (hidden) buffer.','line_number':1350,'multiline':False]['text':'/ Restore the window as it was (if possible).','line_number':1351,'multiline':False]['text':'/','line_number':1352,'multiline':False]['text':'/ @param aco  structure holding saved values','line_number':1353,'multiline':False]['text':' Find "awp", it can't be closed, but it may be in another tab page.','line_number':1359,'multiline':False]['text':' Do not trigger autocommands here.','line_number':1360,'multiline':False]['text':' May need to stop Insert mode if we were in a prompt buffer.','line_number':1376,'multiline':False]['text':' Do not stop Insert mode when already in Insert mode before.','line_number':1378,'multiline':False]['text':' Remove the window.','line_number':1382,'multiline':False]['text':' The window is marked as not used, but it is not freed, it can be','line_number':1391,'multiline':False]['text':' used again.','line_number':1392,'multiline':False]['text':' no valid window in current tabpage','line_number':1396,'multiline':False]['text':' Hmm, original window disappeared.  Just use the first one.','line_number':1406,'multiline':False]['text':' May need to restore insert mode for a prompt buffer.','line_number':1410,'multiline':False]['text':' free all w: variables','line_number':1414,'multiline':False]['text':' re-use the hashtab','line_number':1415,'multiline':False]['text':' the buffer contents may have changed','line_number':1420,'multiline':False]['text':' Restore curwin.  Use the window ID, a window may have been closed','line_number':1428,'multiline':False]['text':' and the memory re-used for another one.','line_number':1429,'multiline':False]['text':' Restore the buffer which was previously edited by curwin, if it was','line_number':1432,'multiline':False]['text':' changed, we are still the same window and the buffer is valid.','line_number':1433,'multiline':False]['text':' In case the autocommand moves the cursor to a position that does not','line_number':1451,'multiline':False]['text':' exist in curbuf','line_number':1452,'multiline':False]['text':' just in case lines got deleted','line_number':1459,'multiline':False]['text':'/ Execute autocommands for "event" and file name "fname".','line_number':1465,'multiline':False]['text':'/','line_number':1466,'multiline':False]['text':'/ @param event event that occurred','line_number':1467,'multiline':False]['text':'/ @param fname filename, NULL or empty means use actual file name','line_number':1468,'multiline':False]['text':'/ @param fname_io filename to use for <afile> on cmdline','line_number':1469,'multiline':False]['text':'/ @param force When true, ignore autocmd_busy','line_number':1470,'multiline':False]['text':'/ @param buf Buffer for <abuf>','line_number':1471,'multiline':False]['text':'/','line_number':1472,'multiline':False]['text':'/ @return true if some commands were executed.','line_number':1473,'multiline':False]['text':'/ Like apply_autocmds(), but with extra "eap" argument.  This takes care of','line_number':1479,'multiline':False]['text':'/ setting v:filearg.','line_number':1480,'multiline':False]['text':'/','line_number':1481,'multiline':False]['text':'/ @param event event that occurred','line_number':1482,'multiline':False]['text':'/ @param fname NULL or empty means use actual file name','line_number':1483,'multiline':False]['text':'/ @param fname_io fname to use for <afile> on cmdline','line_number':1484,'multiline':False]['text':'/ @param force When true, ignore autocmd_busy','line_number':1485,'multiline':False]['text':'/ @param buf Buffer for <abuf>','line_number':1486,'multiline':False]['text':'/ @param exarg Ex command arguments','line_number':1487,'multiline':False]['text':'/','line_number':1488,'multiline':False]['text':'/ @return true if some commands were executed.','line_number':1489,'multiline':False]['text':'/ Like apply_autocmds(), but handles the caller's retval.  If the script','line_number':1496,'multiline':False]['text':'/ processing is being aborted or if retval is FAIL when inside a try','line_number':1497,'multiline':False]['text':'/ conditional, no autocommands are executed.  If otherwise the autocommands','line_number':1498,'multiline':False]['text':'/ cause the script to be aborted, retval is set to FAIL.','line_number':1499,'multiline':False]['text':'/','line_number':1500,'multiline':False]['text':'/ @param event event that occurred','line_number':1501,'multiline':False]['text':'/ @param fname NULL or empty means use actual file name','line_number':1502,'multiline':False]['text':'/ @param fname_io fname to use for <afile> on cmdline','line_number':1503,'multiline':False]['text':'/ @param force When true, ignore autocmd_busy','line_number':1504,'multiline':False]['text':'/ @param buf Buffer for <abuf>','line_number':1505,'multiline':False]['text':'/ @param[in,out] retval caller's retval','line_number':1506,'multiline':False]['text':'/','line_number':1507,'multiline':False]['text':'/ @return true if some autocommands were executed','line_number':1508,'multiline':False]['text':'/ Return true if "event" autocommand is defined.','line_number':1523,'multiline':False]['text':'/','line_number':1524,'multiline':False]['text':'/ @param event the autocommand to check','line_number':1525,'multiline':False]['text':'/ Return true when there is a CursorHold/CursorHoldI autocommand defined for','line_number':1531,'multiline':False]['text':'/ the current mode.','line_number':1532,'multiline':False]['text':'/ Return true if the CursorHold/CursorHoldI event can be triggered.','line_number':1538,'multiline':False]['text':'/ Execute autocommands for "event" and file name "fname".','line_number':1551,'multiline':False]['text':'/','line_number':1552,'multiline':False]['text':'/ @param event event that occurred','line_number':1553,'multiline':False]['text':'/ @param fname filename, NULL or empty means use actual file name','line_number':1554,'multiline':False]['text':'/ @param fname_io filename to use for <afile> on cmdline,','line_number':1555,'multiline':False]['text':'/                 NULL means use `fname`.','line_number':1556,'multiline':False]['text':'/ @param force When true, ignore autocmd_busy','line_number':1557,'multiline':False]['text':'/ @param group autocmd group ID or AUGROUP_ALL','line_number':1558,'multiline':False]['text':'/ @param buf Buffer for <abuf>','line_number':1559,'multiline':False]['text':'/ @param eap Ex command arguments','line_number':1560,'multiline':False]['text':'/','line_number':1561,'multiline':False]['text':'/ @return true if some commands were executed.','line_number':1562,'multiline':False]['text':' short file name','line_number':1566,'multiline':False]['text':' NOLINT','line_number':1575,'multiline':False]['text':' Quickly return if there are no autocommands for this event or','line_number':1577,'multiline':False]['text':' autocommands are blocked.','line_number':1578,'multiline':False]['text':' When autocommands are busy, new autocommands are only executed when','line_number':1583,'multiline':False]['text':' explicitly enabled with the "nested" flag.','line_number':1584,'multiline':False]['text':' Quickly return when immediately aborting on error, or when an interrupt','line_number':1589,'multiline':False]['text':' occurred or an exception was thrown but not caught.','line_number':1590,'multiline':False]['text':' FileChangedShell never nests, because it can create an endless loop.','line_number':1595,'multiline':False]['text':' Ignore events in 'eventignore'.','line_number':1601,'multiline':False]['text':' Allow nesting of autocommands, but restrict the depth, because it's','line_number':1606,'multiline':False]['text':' possible to create an endless loop.','line_number':1607,'multiline':False]['text':' Check if these autocommands are disabled.  Used when doing ":all" or','line_number':1613,'multiline':False]['text':' ":ball".','line_number':1614,'multiline':False]['text':' Save the autocmd_* variables and info about the current buffer.','line_number':1620,'multiline':False]['text':' Set the file name to be used for <afile>.','line_number':1630,'multiline':False]['text':' Make a copy to avoid that changing a buffer name or directory makes it','line_number':1631,'multiline':False]['text':' invalid.','line_number':1632,'multiline':False]['text':' Allocate MAXPATHL for when eval_vars() resolves the fullpath.','line_number':1648,'multiline':False]['text':' call FullName_save() later','line_number':1651,'multiline':False]['text':' Set the buffer number to be used for <abuf>.','line_number':1653,'multiline':False]['text':' When the file name is NULL or empty, use the file name of buffer "buf".','line_number':1656,'multiline':False]['text':' Always use the full path of the file name to match with, in case','line_number':1657,'multiline':False]['text':' "allow_dirs" is set.','line_number':1658,'multiline':False]['text':' make a copy, so we can change it','line_number':1677,'multiline':False]['text':' Don't try expanding the following events.','line_number':1680,'multiline':False]['text':' don't expand it later','line_number':1695,'multiline':False]['text':' out of memory','line_number':1700,'multiline':False]['text':' Replace all backslashes with forward slashes. This makes the','line_number':1707,'multiline':False]['text':' autocommand patterns portable between Unix and Windows.','line_number':1708,'multiline':False]['text':' Set the name to be used for <amatch>.','line_number':1715,'multiline':False]['text':' Don't redraw while doing autocommands.','line_number':1718,'multiline':False]['text':' name and lnum are filled in later','line_number':1721,'multiline':False]['text':' doesn't count for the caller itself','line_number':1727,'multiline':False]['text':' Don't use local function variables, if called from a function.','line_number':1730,'multiline':False]['text':' When starting to execute autocommands, save the search patterns.','line_number':1734,'multiline':False]['text':' Note that we are applying autocmds.  Some commands need to know.','line_number':1744,'multiline':False]['text':' see matching decrement below','line_number':1747,'multiline':False]['text':' Remember that FileType was triggered.  Used for did_filetype().','line_number':1749,'multiline':False]['text':' Find first autocommand that matches','line_number':1756,'multiline':False]['text':' aucmd_next will set lastpat back to NULL if there are no more autocommands left to run','line_number':1758,'multiline':False]['text':' current autocommand index','line_number':1760,'multiline':False]['text':' save vector size, to avoid an endless loop when more patterns','line_number':1762,'multiline':False]['text':' are added when executing autocommands','line_number':1763,'multiline':False]['text':' Found first autocommand, start executing them','line_number':1774,'multiline':False]['text':' add to active_apc_list','line_number':1776,'multiline':False]['text':' Attach data to command','line_number':1780,'multiline':False]['text':' set v:cmdarg (only when there is a matching pattern)','line_number':1783,'multiline':False]['text':' avoid gcc warning','line_number':1789,'multiline':False]['text':' Make sure cursor and topline are valid.  The first time the current','line_number':1793,'multiline':False]['text':' values are saved, restored by reset_lnums().  When nested only the','line_number':1794,'multiline':False]['text':' values are corrected when needed.','line_number':1795,'multiline':False]['text':' Execute the autocmd. The `getnextac` callback handles iteration.','line_number':1805,'multiline':False]['text':' restore cursor and topline, unless they were changed','line_number':1812,'multiline':False]['text':' delete from active_apc_list','line_number':1820,'multiline':False]['text':' just in case','line_number':1821,'multiline':False]['text':' see matching increment above','line_number':1845,'multiline':False]['text':' When stopping to execute autocommands, restore the search patterns and','line_number':1847,'multiline':False]['text':' the redo buffer. Free any buffers in the au_pending_free_buf list and','line_number':1848,'multiline':False]['text':' free any windows in the au_pending_free_win list.','line_number':1849,'multiline':False]['text':' Some events don't set or reset the Changed flag.','line_number':1870,'multiline':False]['text':' Check if still in the same buffer!','line_number':1871,'multiline':False]['text':' may really delete removed patterns/commands now','line_number':1882,'multiline':False]['text':' When wiping out a buffer make sure all its buffer-local autocommands','line_number':1885,'multiline':False]['text':' are deleted.','line_number':1886,'multiline':False]['text':' Block triggering autocommands until unblock_autocmd() is called.','line_number':1898,'multiline':False]['text':' Can be used recursively, so long as it's symmetric.','line_number':1899,'multiline':False]['text':' Remember the value of v:termresponse.','line_number':1902,'multiline':False]['text':' When v:termresponse was set while autocommands were blocked, trigger','line_number':1913,'multiline':False]['text':' the autocommands now.  Esp. useful when executing a shell command','line_number':1914,'multiline':False]['text':' during startup (nvim -d).','line_number':1915,'multiline':False]['text':'/ Find next matching autocommand.','line_number':1927,'multiline':False]['text':'/ If next autocommand was not found, sets lastpat to NULL and cmdidx to SIZE_MAX on apc.','line_number':1928,'multiline':False]['text':' Skip deleted autocommands.','line_number':1939,'multiline':False]['text':' Skip matching if pattern didn't change.','line_number':1943,'multiline':False]['text':' Skip autocommands that don't match the group.','line_number':1945,'multiline':False]['text':' Skip autocommands that don't match the pattern or buffer number.','line_number':1949,'multiline':False]['text':' Update the exestack entry for this autocmd.','line_number':1968,'multiline':False]['text':' Clear the exestack entry for this ETYPE_AUCMD entry.','line_number':1981,'multiline':False]['text':' unreachable','line_number':2007,'multiline':False]['text':' omit group in these cases','line_number':2011,'multiline':False]['text':'/ Get next autocommand command.','line_number':2037,'multiline':False]['text':'/ Called by do_cmdline() to get the next line for ":if".','line_number':2038,'multiline':False]['text':'/ @return allocated string, or NULL for end of autocommands.','line_number':2039,'multiline':False]['text':' These arguments are required for do_cmdline.','line_number':2042,'multiline':False]['text':' don't overwrite this either','line_number':2064,'multiline':False]['text':' Make sure to set autocmd_nested before executing','line_number':2069,'multiline':False]['text':' lua code, so that it works properly','line_number':2070,'multiline':False]['text':' Can potentially reallocate kvec_t data and invalidate the ac pointer','line_number':2077,'multiline':False]['text':' If an autocommand callback returns true, delete the autocommand','line_number':2079,'multiline':False]['text':' TODO(tjdevries):','line_number':2083,'multiline':False]['text':'','line_number':2084,'multiline':False]['text':' Major Hack Alert:','line_number':2085,'multiline':False]['text':'  We just return "not-null" and continue going.','line_number':2086,'multiline':False]['text':'  This would be a good candidate for a refactor. You would need to refactor:','line_number':2087,'multiline':False]['text':'      1. do_cmdline to accept something besides a string','line_number':2088,'multiline':False]['text':'      OR','line_number':2089,'multiline':False]['text':'      2. make where we call do_cmdline for autocmds not have to return anything,','line_number':2090,'multiline':False]['text':'      and instead we loop over all the matches and just execute one-by-one.','line_number':2091,'multiline':False]['text':'          However, my expectation would be that could be expensive.','line_number':2092,'multiline':False]['text':' Remove one-shot ("once") autocmd in anticipation of its execution.','line_number':2098,'multiline':False]['text':'/ Return true if there is a matching autocommand for "fname".','line_number':2112,'multiline':False]['text':'/ To account for buffer-local autocommands, function needs to know','line_number':2113,'multiline':False]['text':'/ in which buffer the file will be opened.','line_number':2114,'multiline':False]['text':'/','line_number':2115,'multiline':False]['text':'/ @param event event that occurred.','line_number':2116,'multiline':False]['text':'/ @param sfname filename the event occurred in.','line_number':2117,'multiline':False]['text':'/ @param buf buffer the file is open in','line_number':2118,'multiline':False]['text':' Replace all backslashes with forward slashes. This makes the','line_number':2131,'multiline':False]['text':' autocommand patterns portable between Unix and Windows.','line_number':2132,'multiline':False]['text':' Function given to ExpandGeneric() to obtain the list of autocommand group names.','line_number':2158,'multiline':False]['text':' Required for ExpandGeneric','line_number':2161,'multiline':False]['text':'/ @param doautocmd  true for :doauto*, false for :autocmd','line_number':2165,'multiline':False]['text':' check for a group name, skip it if present','line_number':2168,'multiline':False]['text':' If there only is a group name that's what we expand.','line_number':2173,'multiline':False]['text':' skip over event name','line_number':2179,'multiline':False]['text':' expand event name','line_number':2189,'multiline':False]['text':' skip over pattern','line_number':2194,'multiline':False]['text':' expand (next) command','line_number':2200,'multiline':False]['text':' expand file names','line_number':2204,'multiline':False]['text':' pattern is not expanded','line_number':2206,'multiline':False]['text':' Function given to ExpandGeneric() to obtain the list of event names.','line_number':2211,'multiline':False]['text':' xp is a required parameter to be used with ExpandGeneric','line_number':2214,'multiline':False]['text':' List group names','line_number':2216,'multiline':False]['text':' skip when not including groups or skip deleted entries','line_number':2219,'multiline':False]['text':' List event names','line_number':2227,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of event names. Don't','line_number':2231,'multiline':False]['text':'/ include groups.','line_number':2232,'multiline':False]['text':'/ Check whether given autocommand is supported','line_number':2238,'multiline':False]['text':'/','line_number':2239,'multiline':False]['text':'/ @param[in]  event  Event to check.','line_number':2240,'multiline':False]['text':'/','line_number':2241,'multiline':False]['text':'/ @return True if it is, false otherwise.','line_number':2242,'multiline':False]['text':'/ Return true if an autocommand is defined for a group, event and','line_number':2250,'multiline':False]['text':'/ pattern:  The group can be omitted to accept any group.','line_number':2251,'multiline':False]['text':'/ `event` and `pattern` can be omitted to accept any event and pattern.','line_number':2252,'multiline':False]['text':'/ Buffer-local patterns <buffer> or <buffer=N> are accepted.','line_number':2253,'multiline':False]['text':'/ Used for:','line_number':2254,'multiline':False]['text':'/   exists("#Group") or','line_number':2255,'multiline':False]['text':'/   exists("#Group#Event") or','line_number':2256,'multiline':False]['text':'/   exists("#Group#Event#pat") or','line_number':2257,'multiline':False]['text':'/   exists("#Event") or','line_number':2258,'multiline':False]['text':'/   exists("#Event#pat")','line_number':2259,'multiline':False]['text':'/','line_number':2260,'multiline':False]['text':'/ @param arg autocommand string','line_number':2261,'multiline':False]['text':' Make a copy so that we can change the '#' chars to a NUL.','line_number':2268,'multiline':False]['text':' First, look for an autocmd group name.','line_number':2275,'multiline':False]['text':' Didn't match a group name, assume the first argument is an event.','line_number':2279,'multiline':False]['text':' "Group": group name is present and it's recognized','line_number':2284,'multiline':False]['text':' Must be "Group#Event" or "Group#Event#pat".','line_number':2289,'multiline':False]['text':' "Group#Event#pat"','line_number':2293,'multiline':False]['text':' "pattern" is NULL when there is no pattern.','line_number':2297,'multiline':False]['text':' Find the index (enum) for the event name.','line_number':2299,'multiline':False]['text':' return false if the event name is not recognized','line_number':2302,'multiline':False]['text':' Find the first autocommand for this event.','line_number':2307,'multiline':False]['text':' If there isn't any, return false;','line_number':2308,'multiline':False]['text':' If there is one and no pattern given, return true;','line_number':2309,'multiline':False]['text':' if pattern is "<buffer>", special handling is needed which uses curbuf','line_number':2315,'multiline':False]['text':' for pattern "<buffer=N>, path_fnamecmp() will work fine','line_number':2316,'multiline':False]['text':' Check if there is an autocommand with the given pattern.','line_number':2321,'multiline':False]['text':' Only use a pattern when it has not been removed.','line_number':2324,'multiline':False]['text':' For buffer-local autocommands, path_fnamecmp() works fine.','line_number':2325,'multiline':False]['text':' Checks if a pattern is buflocal','line_number':2342,'multiline':False]['text':' "<buffer>"','line_number':2353,'multiline':False]['text':' "<buffer=abuf>"','line_number':2359,'multiline':False]['text':' "<buffer=123>"','line_number':2364,'multiline':False]['text':' normalize buffer pattern','line_number':2373,'multiline':False]['text':' normalize pat into standard "<buffer>#N" form','line_number':2382,'multiline':False]['text':'/ Deletes an autocmd by ID.','line_number':2392,'multiline':False]['text':'/ Only autocmds created via the API have IDs associated with them. There','line_number':2393,'multiline':False]['text':'/ is no way to delete a specific autocmd created via :autocmd','line_number':2394,'multiline':False]['text':' Note that since multiple AutoCmd objects can have the same ID, we need to do a full scan.','line_number':2400,'multiline':False]['text':' ===========================================================================','line_number':2414,'multiline':False]['text':'  AucmdExecutable Functions','line_number':2415,'multiline':False]['text':' ===========================================================================','line_number':2416,'multiline':False]['text':'/ Generate a string description for the command/callback of an autocmd','line_number':2418,'multiline':False]['text':' Arg Parsing Functions','line_number':2476,'multiline':False]['text':'/ Scan over the events.  "*" stands for all events.','line_number':2478,'multiline':False]['text':'/ true when group name was found','line_number':2479,'multiline':False]['text':' Find the group ID in a ":autocmd" or ":doautocmd" argument.','line_number':2506,'multiline':False]['text':' The "argp" argument is advanced to the following argument.','line_number':2507,'multiline':False]['text':'','line_number':2508,'multiline':False]['text':' Returns the group ID or AUGROUP_ALL.','line_number':2509,'multiline':False]['text':' no match, use all groups','line_number':2523,'multiline':False]['text':' match, skip over group name','line_number':2525,'multiline':False]['text':'/ Handles grabbing arguments from `:autocmd` such as ++once and ++nested','line_number':2531,'multiline':False]['text':'/ When kFalse: VimSuspend should be triggered next.','line_number':2547,'multiline':False]['text':'/ When kTrue: VimResume should be triggered next.','line_number':2548,'multiline':False]['text':'/ When kNone: Currently triggering VimSuspend or VimResume.','line_number':2549,'multiline':False]['text':'/ Trigger VimSuspend or VimResume autocommand.','line_number':2558,'multiline':False]['text':' UI Enter','line_number':2571,'multiline':False]['text':' user config hasn't been sourced yet','line_number':2582,'multiline':False]['text':' disallow recursion','line_number':2585,'multiline':False]['text':' FocusGained','line_number':2600,'multiline':False]['text':' disallow recursion','line_number':2608,'multiline':False]['text':' When activated: Check if any file was modified outside of Vim.','line_number':2613,'multiline':False]['text':' Only do this when not done within the last two seconds as:','line_number':2614,'multiline':False]['text':' 1. Some filesystems have modification time granularity in seconds. Fat32','line_number':2615,'multiline':False]['text':'    has a granularity of 2 seconds.','line_number':2616,'multiline':False]['text':' 2. We could get multiple notifications in a row.','line_number':2617,'multiline':False]['text':' disallow recursion','line_number':2631,'multiline':False]['text':' Reset the secure flag, since the value of 'filetype' has','line_number':2637,'multiline':False]['text':' been checked to be safe.','line_number':2638,'multiline':False]['text':' Only pass true for "force" when it is true or','line_number':2643,'multiline':False]['text':' used recursively, to avoid endless recurrence.','line_number':2644,'multiline':False]['text':' Just in case the old "buf" is now invalid','line_number':2648,'multiline':False]