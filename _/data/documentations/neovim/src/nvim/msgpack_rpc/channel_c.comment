['text':' Cannot define array with negative offsets, so this one is needed to be added','line_number':45,'multiline':False]['text':' to MSGPACK_UNPACK_\* values.','line_number':46,'multiline':False]['text':'/ Publishes an event to a channel.','line_number':156,'multiline':False]['text':'/','line_number':157,'multiline':False]['text':'/ @param id Channel id. 0 means "broadcast to all subscribed channels"','line_number':158,'multiline':False]['text':'/ @param name Event name (application-defined)','line_number':159,'multiline':False]['text':'/ @param args Array of event arguments','line_number':160,'multiline':False]['text':'/ @return True if the event was sent successfully, false otherwise.','line_number':161,'multiline':False]['text':'/ Sends a method call to a channel','line_number':179,'multiline':False]['text':'/','line_number':180,'multiline':False]['text':'/ @param id The channel id','line_number':181,'multiline':False]['text':'/ @param method_name The method name, an arbitrary string','line_number':182,'multiline':False]['text':'/ @param args Array with method arguments','line_number':183,'multiline':False]['text':'/ @param[out] error True if the return value is an error','line_number':184,'multiline':False]['text':'/ @return Whatever the remote method returned','line_number':185,'multiline':False]['text':' Send the msgpack-rpc request','line_number':200,'multiline':False]['text':' Push the frame','line_number':204,'multiline':False]['text':' Should be an error in the form [type, message]','line_number':221,'multiline':False]['text':' frame.result was allocated in an arena','line_number':236,'multiline':False]['text':'/ Subscribes to event broadcasts','line_number':248,'multiline':False]['text':'/','line_number':249,'multiline':False]['text':'/ @param id The channel id','line_number':250,'multiline':False]['text':'/ @param event The event type string','line_number':251,'multiline':False]['text':'/ Unsubscribes to event broadcasts','line_number':268,'multiline':False]['text':'/','line_number':269,'multiline':False]['text':'/ @param id The channel id','line_number':270,'multiline':False]['text':'/ @param event The event type string','line_number':271,'multiline':False]['text':' When exiting, ui_client_stop() has already been called, so don't handle UI events.','line_number':328,'multiline':False]['text':' TODO(bfredl): p->result should not even be decoded','line_number':355,'multiline':False]['text':' api_free_object(p->result);','line_number':356,'multiline':False]['text':'/ Handles requests and notifications received on the channel.','line_number':380,'multiline':False]['text':' Defer the event to a special queue used by os/input.c. #6247','line_number':406,'multiline':False]['text':' Invoke immediately.','line_number':409,'multiline':False]['text':'/ Handles a message, depending on the type:','line_number':425,'multiline':False]['text':'/   - Request: invokes method and writes the response (or error).','line_number':426,'multiline':False]['text':'/   - Notification: invokes method (emits `nvim_error_event` on error).','line_number':427,'multiline':False]['text':' channel was closed, abort any pending requests','line_number':435,'multiline':False]['text':' Send the response.','line_number':441,'multiline':False]['text':' e->args (and possibly result) are allocated in an arena','line_number':457,'multiline':False]['text':' If the write failed for any reason, close the channel','line_number':494,'multiline':False]['text':' This should not happen, as WBuffer is one single serialized message.','line_number':518,'multiline':False]['text':'/ Mark rpc state as closed, and release its reference to the channel.','line_number':608,'multiline':False]['text':'/ Don't call this directly, call channel_close(id, kChannelPartRpc, &error)','line_number':609,'multiline':False]['text':' Avoid hanging when there are no other UIs and a prompt is triggered on exit.','line_number':622,'multiline':False]['text':' TODO(bfredl): this is pretty much ad-hoc. maybe TUI and UI:s should be','line_number':676,'multiline':False]['text':' allowed to ask nvim to just scream directly in the users face','line_number':677,'multiline':False]['text':' instead of sending nvim_error_event, in general.','line_number':678,'multiline':False]['text':' responses only go though 1 channel','line_number':695,'multiline':False]['text':' Parse "type" on "info" and set "client_type"','line_number':711,'multiline':False]