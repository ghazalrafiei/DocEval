['text':' Handling of regular expressions: vim_regcomp(), vim_regexec(), vim_regsub()','line_number':1,'multiline':False]['text':' By default: do not create debugging logs or files related to regular','line_number':3,'multiline':False]['text':' expressions, even when compiling with -DDEBUG.','line_number':4,'multiline':False]['text':' Uncomment the second line to get the regexp debugging.','line_number':5,'multiline':False]['text':' #undef REGEXP_DEBUG','line_number':6,'multiline':False]['text':' #define REGEXP_DEBUG','line_number':7,'multiline':False]['text':' Structure used to save the current input state, when it needs to be','line_number':45,'multiline':False]['text':' restored after trying a match.  Used by reg_save() and reg_restore().','line_number':46,'multiline':False]['text':' Also stores the length of "backpos".','line_number':47,'multiline':False]['text':' rex.input pointer, for single-line regexp','line_number':50,'multiline':False]['text':' rex.input pos, for multi-line regexp','line_number':51,'multiline':False]['text':' struct to save start/end pointer/position in for \(\)','line_number':56,'multiline':False]['text':' Values for rs_state in regitem_T.','line_number':64,'multiline':False]['text':' NOPEN and NCLOSE','line_number':66,'multiline':False]['text':' MOPEN + [0-9]','line_number':67,'multiline':False]['text':' MCLOSE + [0-9]','line_number':68,'multiline':False]['text':' ZOPEN + [0-9]','line_number':69,'multiline':False]['text':' ZCLOSE + [0-9]','line_number':70,'multiline':False]['text':' BRANCH','line_number':71,'multiline':False]['text':' BRACE_COMPLEX and trying one more match','line_number':72,'multiline':False]['text':' BRACE_COMPLEX and trying longest match','line_number':73,'multiline':False]['text':' BRACE_COMPLEX and trying shortest match','line_number':74,'multiline':False]['text':' NOMATCH','line_number':75,'multiline':False]['text':' BEHIND / NOBEHIND matching rest','line_number':76,'multiline':False]['text':' BEHIND / NOBEHIND matching behind part','line_number':77,'multiline':False]['text':' STAR/PLUS/BRACE_SIMPLE longest match','line_number':78,'multiline':False]['text':' STAR/PLUS/BRACE_SIMPLE shortest match','line_number':79,'multiline':False]['text':' When there are alternatives a regstate_T is put on the regstack to remember','line_number':82,'multiline':False]['text':' what we are doing.','line_number':83,'multiline':False]['text':' Before it may be another type of item, depending on rs_state, to remember','line_number':84,'multiline':False]['text':' more things.','line_number':85,'multiline':False]['text':' what we are doing, one of RS_ above','line_number':87,'multiline':False]['text':' submatch nr or BEHIND/NOBEHIND','line_number':88,'multiline':False]['text':' current node in program','line_number':89,'multiline':False]['text':' room for saving rex.input','line_number':93,'multiline':False]['text':' used for BEHIND and NOBEHIND matching','line_number':96,'multiline':False]['text':' Since the out pointers in the list are always','line_number':105,'multiline':False]['text':' uninitialized, we use the pointers themselves','line_number':106,'multiline':False]['text':' as storage for the Ptrlists.','line_number':107,'multiline':False]['text':'/< number of subexpr with useful info','line_number':121,'multiline':False]['text':' When REG_MULTI is true list.multi is used, otherwise list.line.','line_number':123,'multiline':False]['text':' list.multi[0].start_col without \zs','line_number':136,'multiline':False]['text':' \( .. \) matches','line_number':140,'multiline':False]['text':' \z( .. \) matches','line_number':141,'multiline':False]['text':' nfa_pim_T stores a Postponed Invisible Match.','line_number':144,'multiline':False]['text':' NFA_PIM_*, see below','line_number':147,'multiline':False]['text':' the invisible match start state','line_number':148,'multiline':False]['text':' submatch info, only party used','line_number':149,'multiline':False]['text':' where the match must end','line_number':153,'multiline':False]['text':' nfa_thread_T contains execution information of a NFA state','line_number':156,'multiline':False]['text':' if pim.result != NFA_PIM_UNUSED: postponed','line_number':160,'multiline':False]['text':' invisible match','line_number':161,'multiline':False]['text':' submatch info, only party used','line_number':162,'multiline':False]['text':' nfa_list_T contains the alternative NFA execution states.','line_number':165,'multiline':False]['text':'/< allocated array of states','line_number':167,'multiline':False]['text':'/< nr of states currently in "t"','line_number':168,'multiline':False]['text':'/< max nr of states in "t"','line_number':169,'multiline':False]['text':'/< ID of the list','line_number':170,'multiline':False]['text':'/< true when any state has a PIM','line_number':171,'multiline':False]['text':' show/save debugging data when BT engine is used','line_number':175,'multiline':False]['text':' save the debugging data to a file instead of displaying it','line_number':177,'multiline':False]['text':' Magic characters have a special meaning, they don't match literally.','line_number':183,'multiline':False]['text':' Magic characters are negative.  This separates them from literal characters','line_number':184,'multiline':False]['text':' (possibly multi-byte).  Only ASCII characters can be Magic.','line_number':185,'multiline':False]['text':' The first byte of the BT regexp internal "program" is actually this magic','line_number':208,'multiline':False]['text':' number; the start node begins in the second byte.  It's used to catch the','line_number':209,'multiline':False]['text':' most severe mutilation of the program by the caller.','line_number':210,'multiline':False]['text':' Utility definitions.','line_number':213,'multiline':False]['text':' Used for an error (down from) vim_regcomp(): give the error message, set','line_number':216,'multiline':False]['text':' rc_did_emsg and return NULL','line_number':217,'multiline':False]['text':' return values for regmatch()','line_number':264,'multiline':False]['text':' something failed, abort','line_number':265,'multiline':False]['text':' continue in inner loop','line_number':266,'multiline':False]['text':' break inner loop','line_number':267,'multiline':False]['text':' successful match','line_number':268,'multiline':False]['text':' didn't match','line_number':269,'multiline':False]['text':'/ Return NOT_MULTI if c is not a "multi" operator.','line_number':271,'multiline':False]['text':'/ Return MULTI_ONE if c is a single "multi" operator.','line_number':272,'multiline':False]['text':'/ Return MULTI_MULT if c is a multi "multi" operator.','line_number':273,'multiline':False]['text':' REGEXP_INRANGE contains all characters which are always special in a []','line_number':287,'multiline':False]['text':' range after '\'.','line_number':288,'multiline':False]['text':' REGEXP_ABBR contains all characters which act as abbreviations after '\'.','line_number':289,'multiline':False]['text':' These are:','line_number':290,'multiline':False]['text':'  \n  - New line (NL).','line_number':291,'multiline':False]['text':'  \r  - Carriage Return (CR).','line_number':292,'multiline':False]['text':'  \t  - Tab (TAB).','line_number':293,'multiline':False]['text':'  \e  - Escape (ESC).','line_number':294,'multiline':False]['text':'  \b  - Backspace (Ctrl_H).','line_number':295,'multiline':False]['text':'  \d  - Character code in decimal, eg \d123','line_number':296,'multiline':False]['text':'  \o  - Character code in octal, eg \o80','line_number':297,'multiline':False]['text':'  \x  - Character code in hex, eg \x4a','line_number':298,'multiline':False]['text':'  \u  - Multibyte character code, eg \u20ac','line_number':299,'multiline':False]['text':'  \U  - Long multibyte character code, eg \U12345678','line_number':300,'multiline':False]['text':' Translate '\x' to its control character, except "\n", which is Magic.','line_number':304,'multiline':False]['text':'/ Check for a character class name "[:name:]".  "pp" points to the '['.','line_number':320,'multiline':False]['text':'/ Returns one of the CLASS_ items. CLASS_NONE means that no item was','line_number':321,'multiline':False]['text':'/ recognized.  Otherwise "pp" is advanced to after the item.','line_number':322,'multiline':False]['text':' Specific version of character class functions.','line_number':379,'multiline':False]['text':' Using a table to keep this fast.','line_number':380,'multiline':False]['text':' flags for regflags','line_number':436,'multiline':False]['text':' ignore case','line_number':437,'multiline':False]['text':' don't ignore case','line_number':438,'multiline':False]['text':' can match a NL','line_number':439,'multiline':False]['text':' ignore combining characters','line_number':440,'multiline':False]['text':' uses "\@<=" or "\@<!"','line_number':441,'multiline':False]['text':' Global work variables for vim_regcomp().','line_number':443,'multiline':False]['text':'/< Input-scan pointer.','line_number':445,'multiline':False]['text':'/< () count.','line_number':446,'multiline':False]['text':'/< regex should use NFA engine','line_number':447,'multiline':False]['text':'/< \z() count.','line_number':448,'multiline':False]['text':'/< \z item detected','line_number':449,'multiline':False]['text':'/< RF_ flags for prog','line_number':450,'multiline':False]['text':'/< true when EOL found by vim_regcomp()','line_number':451,'multiline':False]['text':'/< magicness of the pattern','line_number':453,'multiline':False]['text':' matching with a string instead of a buffer','line_number':455,'multiline':False]['text':' line','line_number':456,'multiline':False]['text':' "[abc" is illegal','line_number':457,'multiline':False]['text':' META contains all characters that may be magic, except '^' and '$'.','line_number':459,'multiline':False]['text':' uncrustify:off','line_number':461,'multiline':False]['text':' META[] is used often enough to justify turning it into a table.','line_number':463,'multiline':False]['text':'                 %  &     (  )  *  +        .','line_number':467,'multiline':False]['text':'     1  2  3  4  5  6  7  8  9        <  =  >  ?','line_number':469,'multiline':False]['text':'  @  A     C  D     F     H  I     K  L  M     O','line_number':471,'multiline':False]['text':'  P        S     U  V  W  X     Z  [           _','line_number':473,'multiline':False]['text':'     a     c  d     f     h  i     k  l  m  n  o','line_number':475,'multiline':False]['text':'  p        s     u  v  w  x     z  {  |     ~','line_number':477,'multiline':False]['text':' uncrustify:on','line_number':481,'multiline':False]['text':' currently parsed character','line_number':483,'multiline':False]['text':' Previous character.  Note: prevchr is sometimes -1 when we are not at the','line_number':484,'multiline':False]['text':' start, eg in /[ ^I]^ the pattern was never found even if it existed,','line_number':485,'multiline':False]['text':' because ^ was taken to be magic -- webb','line_number':486,'multiline':False]['text':' previous-previous character','line_number':488,'multiline':False]['text':' used for ungetchr()','line_number':489,'multiline':False]['text':' arguments for reg()','line_number':491,'multiline':False]['text':' toplevel reg()','line_number':492,'multiline':False]['text':' \(\)','line_number':493,'multiline':False]['text':' \z(\)','line_number':494,'multiline':False]['text':' \%(\)','line_number':495,'multiline':False]['text':' Return true if compiled regular expression "prog" can match a line break.','line_number':516,'multiline':False]['text':' Check for an equivalence class name "[=a=]".  "pp" points to the '['.','line_number':523,'multiline':False]['text':' Returns a character representing the class. Zero means that no item was','line_number':524,'multiline':False]['text':' recognized.  Otherwise "pp" is advanced to after the item.','line_number':525,'multiline':False]['text':' Check for a collating element "[.a.]".  "pp" points to the '['.','line_number':543,'multiline':False]['text':' Returns a character. Zero means that no item was recognized.  Otherwise','line_number':544,'multiline':False]['text':' "pp" is advanced to after the item.','line_number':545,'multiline':False]['text':' Currently only single characters are recognized!','line_number':546,'multiline':False]['text':' 'cpoptions' contains 'l' flag','line_number':564,'multiline':False]['text':'/ Skip over a "[]" range.','line_number':571,'multiline':False]['text':'/ "p" must point to the character after the '['.','line_number':572,'multiline':False]['text':'/ The returned pointer is on the matching ']', or the terminating NUL.','line_number':573,'multiline':False]['text':' Complement of range.','line_number':578,'multiline':False]['text':' It is not a class name and not NUL','line_number':602,'multiline':False]['text':'/ Skip past regular expression.','line_number':612,'multiline':False]['text':'/ Stop at end of "startp" or where "delim" is found ('/', '?', etc).','line_number':613,'multiline':False]['text':'/ Take care of characters with a backslash in front of it.','line_number':614,'multiline':False]['text':'/ Skip strings inside [ and ].','line_number':615,'multiline':False]['text':'/ Call skip_regexp() and when the delimiter does not match give an error and','line_number':621,'multiline':False]['text':'/ return NULL.','line_number':622,'multiline':False]['text':'/ skip_regexp() with extra arguments:','line_number':634,'multiline':False]['text':'/ When "newp" is not NULL and "dirc" is '?', make an allocated copy of the','line_number':635,'multiline':False]['text':'/ expression and change "\?" to "?".  If "*newp" is not NULL the expression','line_number':636,'multiline':False]['text':'/ is changed in-place.','line_number':637,'multiline':False]['text':'/ If a "\?" is changed to "?" then "dropped" is incremented, unless NULL.','line_number':638,'multiline':False]['text':'/ If "magic_val" is not NULL, returns the effective magicness of the pattern','line_number':639,'multiline':False]['text':' found end of regexp','line_number':654,'multiline':False]['text':' change "\?" to "?", make a copy first.','line_number':665,'multiline':False]['text':' skip next character','line_number':675,'multiline':False]['text':' variables used for parsing','line_number':690,'multiline':False]['text':' byte length of previous char','line_number':691,'multiline':False]['text':' True when on the first character','line_number':692,'multiline':False]['text':' True when on the second character','line_number':693,'multiline':False]['text':' Start parsing at "str".','line_number':695,'multiline':False]['text':' Save the current parse state, so that it can be restored and parsing','line_number':705,'multiline':False]['text':' starts in the same state again.','line_number':706,'multiline':False]['text':' Restore a previously saved parse state.','line_number':720,'multiline':False]['text':' Get the next character without advancing.','line_number':734,'multiline':False]['text':' magic when 'magic' is on','line_number':747,'multiline':False]['text':' future ext.','line_number':765,'multiline':False]['text':' future ext.','line_number':766,'multiline':False]['text':' future ext.','line_number':767,'multiline':False]['text':' future ext.','line_number':768,'multiline':False]['text':' future ext.','line_number':769,'multiline':False]['text':' future ext.','line_number':770,'multiline':False]['text':' future ext.','line_number':771,'multiline':False]['text':' future ext.','line_number':772,'multiline':False]['text':' Can't be used in / command','line_number':773,'multiline':False]['text':' magic only after "\v"','line_number':774,'multiline':False]['text':' * is not magic as the very first character, eg "?*ptr", when','line_number':780,'multiline':False]['text':' after '^', eg "/^*ptr" and when after "\(", "\|", "\&".  But','line_number':781,'multiline':False]['text':' "\(\*" is not magic, thus must be magic if "after_slash"','line_number':782,'multiline':False]['text':' '^' is only magic as the very first character and if it's after','line_number':794,'multiline':False]['text':' "\(", "\|", "\&' or "\n"','line_number':795,'multiline':False]['text':' '$' is only magic as the very last char and if it's in front of','line_number':811,'multiline':False]['text':' either "\|", "\)", "\&", or "\n"','line_number':812,'multiline':False]['text':' ignore \c \C \m \M \v \V and \Z after '$'','line_number':817,'multiline':False]['text':' trailing '\'','line_number':844,'multiline':False]['text':' META contains everything that may be magic sometimes,','line_number':846,'multiline':False]['text':' except ^ and $ ("\^" and "\$" are only magic after','line_number':847,'multiline':False]['text':' "\V").  We now fetch the next character and toggle its','line_number':848,'multiline':False]['text':' magicness.  Therefore, \ is so meta-magic that it is','line_number':849,'multiline':False]['text':' not in META.','line_number':850,'multiline':False]['text':' be able to say "/\*ptr"','line_number':853,'multiline':False]['text':' Handle abbreviations, like "\t" for TAB -- webb','line_number':861,'multiline':False]['text':' Next character can never be (made) magic?','line_number':866,'multiline':False]['text':' Then backslashing it won't do anything.','line_number':867,'multiline':False]['text':' Eat one lexed character.  Do this in a way that we can undo it.','line_number':880,'multiline':False]['text':' peekchr() eats a backslash, do the same here','line_number':883,'multiline':False]['text':' Exclude composing chars that utfc_ptr2len does include.','line_number':890,'multiline':False]['text':' use previously unget char, or -1','line_number':898,'multiline':False]['text':' Skip a character while keeping the value of prev_at_start for at_start.','line_number':902,'multiline':False]['text':' prevchr and prevprevchr are also kept.','line_number':903,'multiline':False]['text':' Get the next character from the pattern. We know about magic and such, so','line_number':916,'multiline':False]['text':' therefore we need a lexical analyzer.','line_number':917,'multiline':False]['text':' put character back.  Works only once!','line_number':926,'multiline':False]['text':' Backup regparse, so that it's at the same position as before the','line_number':935,'multiline':False]['text':' getchr().','line_number':936,'multiline':False]['text':' Get and return the value of the hex string at the current position.','line_number':940,'multiline':False]['text':' Return -1 if there is no valid hex number.','line_number':941,'multiline':False]['text':' The position is updated:','line_number':942,'multiline':False]['text':'     blahblah\%x20asdf','line_number':943,'multiline':False]['text':'         before-^ ^-after','line_number':944,'multiline':False]['text':' The parameter controls the maximum number of input characters. This will be','line_number':945,'multiline':False]['text':' 2 when reading a \%x20 sequence and 4 when reading a \%u20AC sequence.','line_number':946,'multiline':False]['text':' Get and return the value of the decimal string immediately after the','line_number':969,'multiline':False]['text':' current position. Return -1 for invalid.  Consumes all digits.','line_number':970,'multiline':False]['text':' no longer valid','line_number':985,'multiline':False]['text':' get and return the value of the octal string immediately after the current','line_number':994,'multiline':False]['text':' position. Return -1 for invalid, or 0-255 for valid. Smart enough to handle','line_number':995,'multiline':False]['text':' numbers > 377 correctly (for example, 400 is treated as 40) and doesn't','line_number':996,'multiline':False]['text':' treat 8 or 9 as recognised characters. Position is updated:','line_number':997,'multiline':False]['text':'     blahblah\%o210asdf','line_number':998,'multiline':False]['text':'         before-^  ^-after','line_number':999,'multiline':False]['text':' read_limits - Read two integers to be taken as a minimum and maximum.','line_number':1022,'multiline':False]['text':' If the first character is '-', then the range is reversed.','line_number':1023,'multiline':False]['text':' Should end with 'end'.  If minval is missing, zero is default, if maxval is','line_number':1024,'multiline':False]['text':' missing, a very big number is the default.','line_number':1025,'multiline':False]['text':' Starts with '-', so reverse the range later.','line_number':1033,'multiline':False]['text':' There is a comma.','line_number':1039,'multiline':False]['text':' It was \{n} or \{-n}','line_number':1046,'multiline':False]['text':' It was \{} or \{-}','line_number':1048,'multiline':False]['text':' Allow either \{...} or \{...\}','line_number':1051,'multiline':False]['text':' Reverse the range if there was a '-', or make sure it is in the right','line_number':1057,'multiline':False]['text':' order otherwise.','line_number':1058,'multiline':False]['text':' let's be friends with the lexer again','line_number':1064,'multiline':False]['text':' vim_regexec and friends','line_number':1068,'multiline':False]['text':' Global work variables for vim_regexec().','line_number':1070,'multiline':False]['text':' Sometimes need to save a copy of a line.  Since alloc()/free() is very','line_number':1072,'multiline':False]['text':' slow, we keep one allocated piece of memory and only re-allocate it when','line_number':1073,'multiline':False]['text':' it's too small.  It's freed in bt_regexec_both() when finished.','line_number':1074,'multiline':False]['text':' Structure used to store the execution state of the regex engine.','line_number':1078,'multiline':False]['text':' Which ones are set depends on whether a single-line or multi-line match is','line_number':1079,'multiline':False]['text':' done:','line_number':1080,'multiline':False]['text':'                      single-line             multi-line','line_number':1081,'multiline':False]['text':' reg_match            &regmatch_T             NULL','line_number':1082,'multiline':False]['text':' reg_mmatch           NULL                    &regmmatch_T','line_number':1083,'multiline':False]['text':' reg_startp           reg_match->startp       <invalid>','line_number':1084,'multiline':False]['text':' reg_endp             reg_match->endp         <invalid>','line_number':1085,'multiline':False]['text':' reg_startpos         <invalid>               reg_mmatch->startpos','line_number':1086,'multiline':False]['text':' reg_endpos           <invalid>               reg_mmatch->endpos','line_number':1087,'multiline':False]['text':' reg_win              NULL                    window in which to search','line_number':1088,'multiline':False]['text':' reg_buf              curbuf                  buffer in which to search','line_number':1089,'multiline':False]['text':' reg_firstlnum        <invalid>               first line in which to search','line_number':1090,'multiline':False]['text':' reg_maxline          0                       last line nr','line_number':1091,'multiline':False]['text':' reg_line_lbr         false or true           false','line_number':1092,'multiline':False]['text':' "\n" in string is line break','line_number':1106,'multiline':False]['text':' The current match-position is remembered with these variables:','line_number':1108,'multiline':False]['text':'/< line number, relative to first line','line_number':1109,'multiline':False]['text':'/< start of current line','line_number':1110,'multiline':False]['text':'/< current input, points into "line"','line_number':1111,'multiline':False]['text':'/< subexpressions still need to be cleared','line_number':1113,'multiline':False]['text':'/< extmatch subexpressions still need to be','line_number':1114,'multiline':False]['text':'/< cleared','line_number':1115,'multiline':False]['text':' Internal copy of 'ignorecase'.  It is set at each call to vim_regexec().','line_number':1117,'multiline':False]['text':' Normally it gets the value of "rm_ic" or "rmm_ic", but when the pattern','line_number':1118,'multiline':False]['text':' contains '\c' or '\C' the value is overruled.','line_number':1119,'multiline':False]['text':' Similar to "reg_ic", but only for 'combining' characters.  Set with \Z','line_number':1122,'multiline':False]['text':' flag in the regexp.  Defaults to false, always.','line_number':1123,'multiline':False]['text':' Copy of "rmm_maxcol": maximum column to search for a match.  Zero when','line_number':1128,'multiline':False]['text':' there is no maximum.','line_number':1129,'multiline':False]['text':' State for the NFA engine regexec.','line_number':1132,'multiline':False]['text':'/< NFA regexp \ze operator encountered.','line_number':1133,'multiline':False]['text':'/< NFA regexp \1 .. \9 encountered.','line_number':1134,'multiline':False]['text':'/< Number of sub expressions actually being used','line_number':1135,'multiline':False]['text':'/< during execution. 1 if only the whole match','line_number':1136,'multiline':False]['text':'/< (subexpr 0) is used.','line_number':1137,'multiline':False]['text':' listid is global, so that it increases on recursive calls to','line_number':1138,'multiline':False]['text':' nfa_regmatch(), which means we don't have to clear the lastlist field of','line_number':1139,'multiline':False]['text':' all the states.','line_number':1140,'multiline':False]['text':'/< NFA regexp has \z( ), set zsubexpr.','line_number':1144,'multiline':False]['text':' Return true if character 'c' is included in 'iskeyword' option for','line_number':1157,'multiline':False]['text':' "reg_buf" buffer.','line_number':1158,'multiline':False]['text':' Get pointer to the line "lnum", which is relative to "reg_firstlnum".','line_number':1164,'multiline':False]['text':' when looking behind for a match/no-match lnum is negative.  But we','line_number':1167,'multiline':False]['text':' can't go before line 1','line_number':1168,'multiline':False]['text':' Must have matched the "\n" in the last line.','line_number':1173,'multiline':False]['text':' Workspace to mark beginning','line_number':1179,'multiline':False]['text':'   and end of \z(...\) matches','line_number':1180,'multiline':False]['text':' idem, beginning pos','line_number':1181,'multiline':False]['text':' idem, end pos','line_number':1182,'multiline':False]['text':' true if using multi-line regexp.','line_number':1184,'multiline':False]['text':' Create a new extmatch and mark it as referenced once.','line_number':1187,'multiline':False]['text':' Add a reference to an extmatch.','line_number':1196,'multiline':False]['text':' Remove a reference to an extmatch.  If there are no references left, free','line_number':1205,'multiline':False]['text':' the info.','line_number':1206,'multiline':False]['text':' Get class of previous character.','line_number':1219,'multiline':False]['text':' Return true if the current rex.input position matches the Visual area.','line_number':1230,'multiline':False]['text':' Check if the buffer is the current buffer and not using a string.','line_number':1242,'multiline':False]['text':' getvvcol() flushes rex.line, need to get it again','line_number':1292,'multiline':False]['text':' Check the regexp program for its magic number.','line_number':1304,'multiline':False]['text':' Return true if it's wrong.','line_number':1305,'multiline':False]['text':' For NFA matcher we don't check the magic','line_number':1312,'multiline':False]['text':' Cleanup the subexpressions, if this wasn't done yet.','line_number':1323,'multiline':False]['text':' This construction is used to clear the subexpressions only when they are','line_number':1324,'multiline':False]['text':' used (to increase speed).','line_number':1325,'multiline':False]['text':' Use 0xff to set lnum to -1','line_number':1333,'multiline':False]['text':' Use 0xff to set lnum to -1','line_number':1350,'multiline':False]['text':' Advance rex.lnum, rex.line and rex.input to the next line.','line_number':1360,'multiline':False]['text':' Check whether a backreference matches.','line_number':1368,'multiline':False]['text':' Returns RA_FAIL, RA_NOMATCH or RA_MATCH.','line_number':1369,'multiline':False]['text':' If "bytelen" is not NULL, it is set to the byte length of the match in the','line_number':1370,'multiline':False]['text':' last line.','line_number':1371,'multiline':False]['text':' Since getting one line may invalidate the other, need to make copy.','line_number':1384,'multiline':False]['text':' Slow!','line_number':1385,'multiline':False]['text':' get some extra','line_number':1389,'multiline':False]['text':' Get the line to compare with.','line_number':1399,'multiline':False]['text':' doesn't match','line_number':1410,'multiline':False]['text':' match and at end!','line_number':1416,'multiline':False]['text':' text too short','line_number':1419,'multiline':False]['text':' Advance to next line.','line_number':1422,'multiline':False]['text':' found a match!  Note that rex.line may now point to a copy of the line,','line_number':1434,'multiline':False]['text':' that should not matter.','line_number':1435,'multiline':False]['text':'/ Used in a place where no * or \+ can follow.','line_number':1439,'multiline':False]['text':' 0xfb20 - 0xfb4f','line_number':1454,'multiline':False]['text':' 0xfb20       alt ayin','line_number':1456,'multiline':False]['text':' 0xfb21       alt alef','line_number':1457,'multiline':False]['text':' 0xfb22       alt dalet','line_number':1458,'multiline':False]['text':' 0xfb23       alt he','line_number':1459,'multiline':False]['text':' 0xfb24       alt kaf','line_number':1460,'multiline':False]['text':' 0xfb25       alt lamed','line_number':1461,'multiline':False]['text':' 0xfb26       alt mem-sofit','line_number':1462,'multiline':False]['text':' 0xfb27       alt resh','line_number':1463,'multiline':False]['text':' 0xfb28       alt tav','line_number':1464,'multiline':False]['text':' 0xfb29       alt plus','line_number':1465,'multiline':False]['text':' 0xfb2a       shin+shin-dot','line_number':1466,'multiline':False]['text':' 0xfb2b       shin+sin-dot','line_number':1467,'multiline':False]['text':' 0xfb2c       shin+shin-dot+dagesh','line_number':1468,'multiline':False]['text':' 0xfb2d       shin+sin-dot+dagesh','line_number':1469,'multiline':False]['text':' 0xfb2e       alef+patah','line_number':1470,'multiline':False]['text':' 0xfb2f       alef+qamats','line_number':1471,'multiline':False]['text':' 0xfb30       alef+hiriq','line_number':1472,'multiline':False]['text':' 0xfb31       bet+dagesh','line_number':1473,'multiline':False]['text':' 0xfb32       gimel+dagesh','line_number':1474,'multiline':False]['text':' 0xfb33       dalet+dagesh','line_number':1475,'multiline':False]['text':' 0xfb34       he+dagesh','line_number':1476,'multiline':False]['text':' 0xfb35       vav+dagesh','line_number':1477,'multiline':False]['text':' 0xfb36       zayin+dagesh','line_number':1478,'multiline':False]['text':' 0xfb37 -- UNUSED','line_number':1479,'multiline':False]['text':' 0xfb38       tet+dagesh','line_number':1480,'multiline':False]['text':' 0xfb39       yud+dagesh','line_number':1481,'multiline':False]['text':' 0xfb3a       kaf sofit+dagesh','line_number':1482,'multiline':False]['text':' 0xfb3b       kaf+dagesh','line_number':1483,'multiline':False]['text':' 0xfb3c       lamed+dagesh','line_number':1484,'multiline':False]['text':' 0xfb3d -- UNUSED','line_number':1485,'multiline':False]['text':' 0xfb3e       mem+dagesh','line_number':1486,'multiline':False]['text':' 0xfb3f -- UNUSED','line_number':1487,'multiline':False]['text':' 0xfb40       nun+dagesh','line_number':1488,'multiline':False]['text':' 0xfb41       samech+dagesh','line_number':1489,'multiline':False]['text':' 0xfb42 -- UNUSED','line_number':1490,'multiline':False]['text':' 0xfb43       pe sofit+dagesh','line_number':1491,'multiline':False]['text':' 0xfb44       pe+dagesh','line_number':1492,'multiline':False]['text':' 0xfb45 -- UNUSED','line_number':1493,'multiline':False]['text':' 0xfb46       tsadi+dagesh','line_number':1494,'multiline':False]['text':' 0xfb47       qof+dagesh','line_number':1495,'multiline':False]['text':' 0xfb48       resh+dagesh','line_number':1496,'multiline':False]['text':' 0xfb49       shin+dagesh','line_number':1497,'multiline':False]['text':' 0xfb4a       tav+dagesh','line_number':1498,'multiline':False]['text':' 0xfb4b       vav+holam','line_number':1499,'multiline':False]['text':' 0xfb4c       bet+rafe','line_number':1500,'multiline':False]['text':' 0xfb4d       kaf+rafe','line_number':1501,'multiline':False]['text':' 0xfb4e       pe+rafe','line_number':1502,'multiline':False]['text':' 0xfb4f       alef-lamed','line_number':1503,'multiline':False]['text':'/ Compare two strings, ignore case if rex.reg_ic set.','line_number':1521,'multiline':False]['text':'/ Return 0 if strings match, non-zero otherwise.','line_number':1522,'multiline':False]['text':'/ Correct the length "*n" when composing characters are ignored.','line_number':1523,'multiline':False]['text':' if it failed and it's utf8 and we want to combineignore:','line_number':1535,'multiline':False]['text':' we have to handle the strcmp ourselves, since it is necessary to','line_number':1541,'multiline':False]['text':' deal with the composing characters by ignoring them:','line_number':1542,'multiline':False]['text':' decompose the character if necessary, into 'base' characters','line_number':1550,'multiline':False]['text':' because I don't care about Arabic, I will hard-code the Hebrew','line_number':1551,'multiline':False]['text':' which I *do* care about!  So sue me...','line_number':1552,'multiline':False]['text':' decomposition necessary?','line_number':1554,'multiline':False]['text':'/ Wrapper around strchr which accounts for case-insensitive searches and','line_number':1573,'multiline':False]['text':'/ non-ASCII characters.','line_number':1574,'multiline':False]['text':'/','line_number':1575,'multiline':False]['text':'/ This function is used a lot for simple searches, keep it fast!','line_number':1576,'multiline':False]['text':'/','line_number':1577,'multiline':False]['text':'/ @param  s  string to search','line_number':1578,'multiline':False]['text':'/ @param  c  character to find in @a s','line_number':1579,'multiline':False]['text':'/','line_number':1580,'multiline':False]['text':'/ @return  NULL if no match, otherwise pointer to the position in @a s','line_number':1581,'multiline':False]['text':' Use folded case for UTF-8, slow! For ASCII use libc strpbrk which is','line_number':1590,'multiline':False]['text':' expected to be highly optimized.','line_number':1591,'multiline':False]['text':'//////////////////////////////////////////////////////////////','line_number':1615,'multiline':False]['text':'                    regsub stuff                            //','line_number':1616,'multiline':False]['text':'//////////////////////////////////////////////////////////////','line_number':1617,'multiline':False]['text':'/ regtilde(): Replace tildes in the pattern by the old pattern.','line_number':1629,'multiline':False]['text':'/','line_number':1630,'multiline':False]['text':'/ Short explanation of the tilde: It stands for the previous replacement','line_number':1631,'multiline':False]['text':'/ pattern.  If that previous pattern also contains a ~ we should go back a','line_number':1632,'multiline':False]['text':'/ step further...  But we insert the previous pattern into the current one','line_number':1633,'multiline':False]['text':'/ and remember that.','line_number':1634,'multiline':False]['text':'/ This still does not handle the case where "magic" changes.  So require the','line_number':1635,'multiline':False]['text':'/ user to keep his hands off of "magic".','line_number':1636,'multiline':False]['text':'/','line_number':1637,'multiline':False]['text':'/ The tildes are parsed once before the first call to vim_regsub().','line_number':1638,'multiline':False]['text':' length = len(newsub) - 1 + len(prev_sub) + 1','line_number':1646,'multiline':False]['text':' Avoid making the text longer than MAXCOL, it will cause','line_number':1647,'multiline':False]['text':' trouble at some point.','line_number':1648,'multiline':False]['text':' copy prefix','line_number':1658,'multiline':False]['text':' not including ~','line_number':1659,'multiline':False]['text':' interpret tilde','line_number':1661,'multiline':False]['text':' copy postfix','line_number':1663,'multiline':False]['text':' back off backslash','line_number':1665,'multiline':False]['text':' allocated newsub before','line_number':1669,'multiline':False]['text':' remove '~'','line_number':1675,'multiline':False]['text':' remove '\~'','line_number':1677,'multiline':False]['text':' skip escaped characters','line_number':1681,'multiline':False]['text':' Only change reg_prev_sub when not previewing.','line_number':1688,'multiline':False]['text':' Store a copy of newsub  in reg_prev_sub.  It is always allocated,','line_number':1690,'multiline':False]['text':' because recursive calls may make the returned string invalid.','line_number':1691,'multiline':False]['text':' true when submatch() can be used','line_number':1699,'multiline':False]['text':' These pointers are used for reg_submatch().  Needed for when the','line_number':1701,'multiline':False]['text':' substitution string is an expression that contains a call to substitute()','line_number':1702,'multiline':False]['text':' and submatch().','line_number':1703,'multiline':False]['text':' can only be used when can_f_submatch is true','line_number':1712,'multiline':False]['text':'/ Put the submatches in "argv[argskip]" which is a list passed into','line_number':1714,'multiline':False]['text':'/ call_func() by vim_regsub_both().','line_number':1715,'multiline':False]['text':' called function doesn't take a submatches argument','line_number':1722,'multiline':False]['text':' Relies on sl_list to be the first item in staticList10_T.','line_number':1726,'multiline':False]['text':' There are always 10 list items in staticList10_T.','line_number':1729,'multiline':False]['text':'/ vim_regsub() - perform substitutions after a vim_regexec() or','line_number':1752,'multiline':False]['text':'/ vim_regexec_multi() match.','line_number':1753,'multiline':False]['text':'/','line_number':1754,'multiline':False]['text':'/ If "flags" has REGSUB_COPY really copy into "dest[destlen]".','line_number':1755,'multiline':False]['text':'/ Otherwise nothing is copied, only compute the length of the result.','line_number':1756,'multiline':False]['text':'/','line_number':1757,'multiline':False]['text':'/ If "flags" has REGSUB_MAGIC then behave like 'magic' is set.','line_number':1758,'multiline':False]['text':'/','line_number':1759,'multiline':False]['text':'/ If "flags" has REGSUB_BACKSLASH a backslash will be removed later, need to','line_number':1760,'multiline':False]['text':'/ double them to keep them, and insert a backslash before a CR to avoid it','line_number':1761,'multiline':False]['text':'/ being replaced with a line break later.','line_number':1762,'multiline':False]['text':'/','line_number':1763,'multiline':False]['text':'/ Note: The matched text must not change between the call of','line_number':1764,'multiline':False]['text':'/ vim_regexec()/vim_regexec_multi() and vim_regsub()!  It would make the back','line_number':1765,'multiline':False]['text':'/ references invalid!','line_number':1766,'multiline':False]['text':'/','line_number':1767,'multiline':False]['text':'/ Returns the size of the replacement, including terminating NUL.','line_number':1768,'multiline':False]['text':' Being called recursively, save the state.','line_number':1775,'multiline':False]['text':' Being called recursively, save the state.','line_number':1802,'multiline':False]['text':' always works on the current buffer!','line_number':1809,'multiline':False]['text':' When nesting more than a couple levels it's probably a mistake.','line_number':1823,'multiline':False]['text':' init for GCC','line_number':1846,'multiline':False]['text':' init for GCC','line_number':1847,'multiline':False]['text':' Be paranoid...','line_number':1851,'multiline':False]['text':' When the substitute part starts with "\=" evaluate it as an expression.','line_number':1867,'multiline':False]['text':' To make sure that the length doesn't change between checking the','line_number':1869,'multiline':False]['text':' length and copying the string, and to speed up things, the','line_number':1870,'multiline':False]['text':' resulting string is saved from the call with','line_number':1871,'multiline':False]['text':' "flags & REGSUB_COPY" == 0 to the call with','line_number':1872,'multiline':False]['text':' "flags & REGSUB_COPY" != 0.','line_number':1873,'multiline':False]['text':' The expression may contain substitute(), which calls us','line_number':1887,'multiline':False]['text':' recursively.  Make sure submatch() gets the text from the first','line_number':1888,'multiline':False]['text':' level.','line_number':1889,'multiline':False]['text':' Although unlikely, it is possible that the expression invokes a','line_number':1900,'multiline':False]['text':' substitute command (it might fail, but still).  Therefore keep','line_number':1901,'multiline':False]['text':' an array of eval results.','line_number':1902,'multiline':False]['text':' fill_submatch_list() was called.','line_number':1927,'multiline':False]['text':' something failed, no need to report another error','line_number':1931,'multiline':False]['text':' Change NL to CR, so that it becomes a line break,','line_number':1950,'multiline':False]['text':' unless called from vim_regexec_nl().','line_number':1951,'multiline':False]['text':' Skip over a backslashed character.','line_number':1952,'multiline':False]['text':' Change NL to CR here too, so that this works:','line_number':1957,'multiline':False]['text':' :s/abc\\\ndef/\="aaa\\\nbbb"/  on text:','line_number':1958,'multiline':False]['text':'   abc{backslash}','line_number':1959,'multiline':False]['text':'   def','line_number':1960,'multiline':False]['text':' Not when called from vim_regexec_nl().','line_number':1961,'multiline':False]['text':' Backslashes will be consumed, need to double them.','line_number':1969,'multiline':False]['text':' Ordinary character.','line_number':2014,'multiline':False]['text':' Copy a special key as-is.','line_number':2016,'multiline':False]['text':' Check for abbreviations -- webb','line_number':2033,'multiline':False]['text':' Oh no!  \e already has meaning in subst pat :-(','line_number':2041,'multiline':False]['text':' case 'e':   c = ESC;        ++src;  break;','line_number':2042,'multiline':False]['text':' If "backslash" is true the backslash will be removed','line_number':2046,'multiline':False]['text':' later.  Used to insert a literal CR.','line_number':2047,'multiline':False]['text':' Write to buffer, if copy is set.','line_number':2065,'multiline':False]['text':' just copy','line_number':2072,'multiline':False]['text':' If the character length is shorter than "totlen", there','line_number':2089,'multiline':False]['text':' are composing characters; copy them as-is.','line_number':2090,'multiline':False]['text':' we hit NUL.','line_number':2149,'multiline':False]['text':' Insert a backslash in front of a CR, otherwise','line_number':2156,'multiline':False]['text':' it will be replaced by a line break.','line_number':2157,'multiline':False]['text':' Number of backslashes will be halved later,','line_number':2158,'multiline':False]['text':' double them here.','line_number':2159,'multiline':False]['text':' just copy','line_number':2177,'multiline':False]['text':' Copy composing characters separately, one','line_number':2185,'multiline':False]['text':' at a time.','line_number':2186,'multiline':False]['text':'/ Call reg_getline() with the line numbers from the submatch.  If a','line_number':2221,'multiline':False]['text':'/ substitute() was used the reg_maxline and other values have been','line_number':2222,'multiline':False]['text':'/ overwritten.','line_number':2223,'multiline':False]['text':'/ Used for the submatch() function: get the string from the n'th submatch in','line_number':2240,'multiline':False]['text':'/ allocated memory.','line_number':2241,'multiline':False]['text':'/','line_number':2242,'multiline':False]['text':'/ @return  NULL when not in a ":s" command and for a non-existing submatch.','line_number':2243,'multiline':False]['text':' First round: compute the length and allocate memory.','line_number':2258,'multiline':False]['text':' Second round: copy the text.','line_number':2259,'multiline':False]['text':' anti-crash check, cannot happen?','line_number':2267,'multiline':False]['text':' Within one line: take form start to end col.','line_number':2272,'multiline':False]['text':' Multiple lines: take start line from start col, middle','line_number':2279,'multiline':False]['text':' lines completely and end line up to end col.','line_number':2280,'multiline':False]['text':' NOLINT(runtime/printf)','line_number':2300,'multiline':False]['text':' Used for the submatch() function with the optional non-zero argument: get','line_number':2327,'multiline':False]['text':' the list of strings from the n'th submatch in allocated memory with NULs','line_number':2328,'multiline':False]['text':' represented in NLs.','line_number':2329,'multiline':False]['text':' Returns a list of allocated strings.  Returns NULL when not in a ":s"','line_number':2330,'multiline':False]['text':' command, for a non-existing submatch and for any error.','line_number':2331,'multiline':False]['text':'/ Initialize the values used for matching against multiple lines','line_number':2380,'multiline':False]['text':'/','line_number':2381,'multiline':False]['text':'/ @param win   window in which to search or NULL','line_number':2382,'multiline':False]['text':'/ @param buf   buffer in which to search','line_number':2383,'multiline':False]['text':'/ @param lnum  nr of line to start looking for match','line_number':2384,'multiline':False]['text':' regexp_bt.c {{{1','line_number':2400,'multiline':False]['text':' Backtracking regular expression implementation.','line_number':2402,'multiline':False]['text':'','line_number':2403,'multiline':False]['text':' NOTICE:','line_number':2404,'multiline':False]['text':'','line_number':2405,'multiline':False]['text':' This is NOT the original regular expression code as written by Henry','line_number':2406,'multiline':False]['text':' Spencer.  This code has been modified specifically for use with the VIM','line_number':2407,'multiline':False]['text':' editor, and should not be used separately from Vim.  If you want a good','line_number':2408,'multiline':False]['text':' regular expression library, get the original code.  The copyright notice','line_number':2409,'multiline':False]['text':' that follows is from the original.','line_number':2410,'multiline':False]['text':'','line_number':2411,'multiline':False]['text':' END NOTICE','line_number':2412,'multiline':False]['text':'','line_number':2413,'multiline':False]['text':'      Copyright (c) 1986 by University of Toronto.','line_number':2414,'multiline':False]['text':'      Written by Henry Spencer.  Not derived from licensed software.','line_number':2415,'multiline':False]['text':'','line_number':2416,'multiline':False]['text':'      Permission is granted to anyone to use this software for any','line_number':2417,'multiline':False]['text':'      purpose on any computer system, and to redistribute it freely,','line_number':2418,'multiline':False]['text':'      subject to the following restrictions:','line_number':2419,'multiline':False]['text':'','line_number':2420,'multiline':False]['text':'      1. The author is not responsible for the consequences of use of','line_number':2421,'multiline':False]['text':'              this software, no matter how awful, even if they arise','line_number':2422,'multiline':False]['text':'              from defects in it.','line_number':2423,'multiline':False]['text':'','line_number':2424,'multiline':False]['text':'      2. The origin of this software must not be misrepresented, either','line_number':2425,'multiline':False]['text':'              by explicit claim or by omission.','line_number':2426,'multiline':False]['text':'','line_number':2427,'multiline':False]['text':'      3. Altered versions must be plainly marked as such, and must not','line_number':2428,'multiline':False]['text':'              be misrepresented as being the original software.','line_number':2429,'multiline':False]['text':'','line_number':2430,'multiline':False]['text':' Beware that some of this code is subtly aware of the way operator','line_number':2431,'multiline':False]['text':' precedence is structured in regular expressions.  Serious changes in','line_number':2432,'multiline':False]['text':' regular-expression syntax might require a total rethink.','line_number':2433,'multiline':False]['text':'','line_number':2434,'multiline':False]['text':' Changes have been made by Tony Andrews, Olaf 'Rhialto' Seibert, Robert','line_number':2435,'multiline':False]['text':' Webb, Ciaran McCreesh and Bram Moolenaar.','line_number':2436,'multiline':False]['text':' Named character class support added by Walter Briscoe (1998 Jul 01)','line_number':2437,'multiline':False]['text':' The "internal use only" fields in regexp_defs.h are present to pass info from','line_number':2439,'multiline':False]['text':' compile to execute that permits the execute phase to run lots faster on','line_number':2440,'multiline':False]['text':' simple cases.  They are:','line_number':2441,'multiline':False]['text':'','line_number':2442,'multiline':False]['text':' regstart     char that must begin a match; NUL if none obvious; Can be a','line_number':2443,'multiline':False]['text':'              multi-byte character.','line_number':2444,'multiline':False]['text':' reganch      is the match anchored (at beginning-of-line only)?','line_number':2445,'multiline':False]['text':' regmust      string (pointer into program) that match must include, or NULL','line_number':2446,'multiline':False]['text':' regmlen      length of regmust string','line_number':2447,'multiline':False]['text':' regflags     RF_ values or'ed together','line_number':2448,'multiline':False]['text':'','line_number':2449,'multiline':False]['text':' Regstart and reganch permit very fast decisions on suitable starting points','line_number':2450,'multiline':False]['text':' for a match, cutting down the work a lot.  Regmust permits fast rejection','line_number':2451,'multiline':False]['text':' of lines that cannot possibly match.  The regmust tests are costly enough','line_number':2452,'multiline':False]['text':' that vim_regcomp() supplies a regmust only if the r.e. contains something','line_number':2453,'multiline':False]['text':' potentially expensive (at present, the only such thing detected is * or +','line_number':2454,'multiline':False]['text':' at the start of the r.e., which can involve a lot of backup).  Regmlen is','line_number':2455,'multiline':False]['text':' supplied because the test in vim_regexec() needs it and vim_regcomp() is','line_number':2456,'multiline':False]['text':' computing it anyway.','line_number':2457,'multiline':False]['text':' Structure for regexp "program".  This is essentially a linear encoding','line_number':2459,'multiline':False]['text':' of a nondeterministic finite-state machine (aka syntax charts or','line_number':2460,'multiline':False]['text':' "railroad normal form" in parsing technology).  Each node is an opcode','line_number':2461,'multiline':False]['text':' plus a "next" pointer, possibly plus an operand.  "Next" pointers of','line_number':2462,'multiline':False]['text':' all nodes except BRANCH and BRACES_COMPLEX implement concatenation; a "next"','line_number':2463,'multiline':False]['text':' pointer with a BRANCH on both ends of it is connecting two alternatives.','line_number':2464,'multiline':False]['text':' (Here we have one of the subtle syntax dependencies: an individual BRANCH','line_number':2465,'multiline':False]['text':' (as opposed to a collection of them) is never concatenated with anything','line_number':2466,'multiline':False]['text':' because of operator precedence).  The "next" pointer of a BRACES_COMPLEX','line_number':2467,'multiline':False]['text':' node points to the node after the stuff to be repeated.','line_number':2468,'multiline':False]['text':' The operand of some types of node is a literal string; for others, it is a','line_number':2469,'multiline':False]['text':' node leading into a sub-FSM.  In particular, the operand of a BRANCH node','line_number':2470,'multiline':False]['text':' is the first node of the branch.','line_number':2471,'multiline':False]['text':' (NB this is *not* a tree structure: the tail of the branch connects to the','line_number':2472,'multiline':False]['text':' thing following the set of BRANCHes.)','line_number':2473,'multiline':False]['text':'','line_number':2474,'multiline':False]['text':' pattern      is coded like:','line_number':2475,'multiline':False]['text':'','line_number':2476,'multiline':False]['text':'                        +-----------------+','line_number':2477,'multiline':False]['text':'                        |                 V','line_number':2478,'multiline':False]['text':' <aa>\|<bb>   BRANCH <aa> BRANCH <bb> --> END','line_number':2479,'multiline':False]['text':'                   |      ^    |          ^','line_number':2480,'multiline':False]['text':'                   +------+    +----------+','line_number':2481,'multiline':False]['text':'','line_number':2482,'multiline':False]['text':'','line_number':2483,'multiline':False]['text':'                     +------------------+','line_number':2484,'multiline':False]['text':'                     V                  |','line_number':2485,'multiline':False]['text':' <aa>*        BRANCH BRANCH <aa> --> BACK BRANCH --> NOTHING --> END','line_number':2486,'multiline':False]['text':'                   |      |               ^                      ^','line_number':2487,'multiline':False]['text':'                   |      +---------------+                      |','line_number':2488,'multiline':False]['text':'                   +---------------------------------------------+','line_number':2489,'multiline':False]['text':'','line_number':2490,'multiline':False]['text':'','line_number':2491,'multiline':False]['text':'                     +----------------------+','line_number':2492,'multiline':False]['text':'                     V                      |','line_number':2493,'multiline':False]['text':' <aa>\+       BRANCH <aa> --> BRANCH --> BACK  BRANCH --> NOTHING --> END','line_number':2494,'multiline':False]['text':'                   |               |           ^                      ^','line_number':2495,'multiline':False]['text':'                   |               +-----------+                      |','line_number':2496,'multiline':False]['text':'                   +--------------------------------------------------+','line_number':2497,'multiline':False]['text':'','line_number':2498,'multiline':False]['text':'','line_number':2499,'multiline':False]['text':'                                      +-------------------------+','line_number':2500,'multiline':False]['text':'                                      V                         |','line_number':2501,'multiline':False]['text':' <aa>\{}      BRANCH BRACE_LIMITS --> BRACE_COMPLEX <aa> --> BACK  END','line_number':2502,'multiline':False]['text':'                   |                              |                ^','line_number':2503,'multiline':False]['text':'                   |                              +----------------+','line_number':2504,'multiline':False]['text':'                   +-----------------------------------------------+','line_number':2505,'multiline':False]['text':'','line_number':2506,'multiline':False]['text':'','line_number':2507,'multiline':False]['text':' <aa>\@!<bb>  BRANCH NOMATCH <aa> --> END  <bb> --> END','line_number':2508,'multiline':False]['text':'                   |       |                ^       ^','line_number':2509,'multiline':False]['text':'                   |       +----------------+       |','line_number':2510,'multiline':False]['text':'                   +--------------------------------+','line_number':2511,'multiline':False]['text':'','line_number':2512,'multiline':False]['text':'                                                    +---------+','line_number':2513,'multiline':False]['text':'                                                    |         V','line_number':2514,'multiline':False]['text':' \z[abc]      BRANCH BRANCH  a  BRANCH  b  BRANCH  c  BRANCH  NOTHING --> END','line_number':2515,'multiline':False]['text':'                   |      |          |          |     ^                   ^','line_number':2516,'multiline':False]['text':'                   |      |          |          +-----+                   |','line_number':2517,'multiline':False]['text':'                   |      |          +----------------+                   |','line_number':2518,'multiline':False]['text':'                   |      +---------------------------+                   |','line_number':2519,'multiline':False]['text':'                   +------------------------------------------------------+','line_number':2520,'multiline':False]['text':'','line_number':2521,'multiline':False]['text':' They all start with a BRANCH for "\|" alternatives, even when there is only','line_number':2522,'multiline':False]['text':' one alternative.','line_number':2523,'multiline':False]['text':' The opcodes are:','line_number':2525,'multiline':False]['text':' definition   number             opnd?    meaning','line_number':2527,'multiline':False]['text':'      End of program or NOMATCH operand.','line_number':2528,'multiline':False]['text':'      Match "" at beginning of line.','line_number':2529,'multiline':False]['text':'      Match "" at end of line.','line_number':2530,'multiline':False]['text':' node Match this alternative, or the','line_number':2531,'multiline':False]['text':'      next...','line_number':2532,'multiline':False]['text':'      Match "", "next" ptr points backward.','line_number':2533,'multiline':False]['text':' str  Match this string.','line_number':2534,'multiline':False]['text':'      Match empty string.','line_number':2535,'multiline':False]['text':' node Match this (simple) thing 0 or more','line_number':2536,'multiline':False]['text':'      times.','line_number':2537,'multiline':False]['text':' node Match this (simple) thing 1 or more','line_number':2538,'multiline':False]['text':'      times.','line_number':2539,'multiline':False]['text':' node match the operand zero-width','line_number':2540,'multiline':False]['text':' node check for no match with operand','line_number':2541,'multiline':False]['text':' node look behind for a match with operand','line_number':2542,'multiline':False]['text':' node look behind for no match with operand','line_number':2543,'multiline':False]['text':' node match the operand here','line_number':2544,'multiline':False]['text':' node Match this (simple) thing between m and','line_number':2545,'multiline':False]['text':'      n times (\{m,n\}).','line_number':2546,'multiline':False]['text':'      Match "" after [^a-zA-Z0-9_]','line_number':2547,'multiline':False]['text':'      Match "" at    [^a-zA-Z0-9_]','line_number':2548,'multiline':False]['text':' nr nr  define the min & max for BRACE_SIMPLE','line_number':2549,'multiline':False]['text':'      and BRACE_COMPLEX.','line_number':2550,'multiline':False]['text':'      Match line-break','line_number':2551,'multiline':False]['text':'      End position for BEHIND or NOBEHIND','line_number':2552,'multiline':False]['text':' character classes: 20-48 normal, 50-78 include a line-break','line_number':2554,'multiline':False]['text':'      Match any one character.','line_number':2557,'multiline':False]['text':' str  Match any character in this string.','line_number':2558,'multiline':False]['text':' str  Match any character not in this','line_number':2559,'multiline':False]['text':'      string.','line_number':2560,'multiline':False]['text':'      Match identifier char','line_number':2561,'multiline':False]['text':'      Match identifier char but no digit','line_number':2562,'multiline':False]['text':'      Match keyword char','line_number':2563,'multiline':False]['text':'      Match word char but no digit','line_number':2564,'multiline':False]['text':'      Match file name char','line_number':2565,'multiline':False]['text':'      Match file name char but no digit','line_number':2566,'multiline':False]['text':'      Match printable char','line_number':2567,'multiline':False]['text':'      Match printable char but no digit','line_number':2568,'multiline':False]['text':'      Match whitespace char','line_number':2569,'multiline':False]['text':'      Match non-whitespace char','line_number':2570,'multiline':False]['text':'      Match digit char','line_number':2571,'multiline':False]['text':'      Match non-digit char','line_number':2572,'multiline':False]['text':'      Match hex char','line_number':2573,'multiline':False]['text':'      Match non-hex char','line_number':2574,'multiline':False]['text':'      Match octal char','line_number':2575,'multiline':False]['text':'      Match non-octal char','line_number':2576,'multiline':False]['text':'      Match word char','line_number':2577,'multiline':False]['text':'      Match non-word char','line_number':2578,'multiline':False]['text':'      Match head char','line_number':2579,'multiline':False]['text':'      Match non-head char','line_number':2580,'multiline':False]['text':'      Match alpha char','line_number':2581,'multiline':False]['text':'      Match non-alpha char','line_number':2582,'multiline':False]['text':'      Match lowercase char','line_number':2583,'multiline':False]['text':'      Match non-lowercase char','line_number':2584,'multiline':False]['text':'      Match uppercase char','line_number':2585,'multiline':False]['text':'      Match non-uppercase char','line_number':2586,'multiline':False]['text':' -89 Mark this point in input as start of','line_number':2590,'multiline':False]['text':'     \( … \) subexpr.  MOPEN + 0 marks start of','line_number':2591,'multiline':False]['text':'     match.','line_number':2592,'multiline':False]['text':' -99 Analogous to MOPEN.  MCLOSE + 0 marks','line_number':2593,'multiline':False]['text':'     end of match.','line_number':2594,'multiline':False]['text':' -109 node Match same string again \1-\9.','line_number':2595,'multiline':False]['text':' -119 Mark this point in input as start of','line_number':2597,'multiline':False]['text':'  \z( … \) subexpr.','line_number':2598,'multiline':False]['text':' -129 Analogous to ZOPEN.','line_number':2599,'multiline':False]['text':' -139 node Match external submatch \z1-\z9','line_number':2600,'multiline':False]['text':' -149 node Match nodes between m & n times','line_number':2602,'multiline':False]['text':' Mark this point in input as start of','line_number':2604,'multiline':False]['text':' \%( subexpr.','line_number':2605,'multiline':False]['text':' Analogous to NOPEN.','line_number':2606,'multiline':False]['text':' mbc  Match one multi-byte character','line_number':2608,'multiline':False]['text':'      Match "" at beginning of file.','line_number':2609,'multiline':False]['text':'      Match "" at end of file.','line_number':2610,'multiline':False]['text':'      Match location of cursor.','line_number':2611,'multiline':False]['text':' nr cmp  Match line number','line_number':2613,'multiline':False]['text':' nr cmp  Match column number','line_number':2614,'multiline':False]['text':' nr cmp  Match virtual column number','line_number':2615,'multiline':False]['text':' mark cmp  Match mark position','line_number':2617,'multiline':False]['text':'      Match Visual area','line_number':2618,'multiline':False]['text':' any composing characters','line_number':2619,'multiline':False]['text':' Flags to be passed up and down.','line_number':2621,'multiline':False]['text':' Known never to match null string.','line_number':2622,'multiline':False]['text':' Simple enough to be STAR/PLUS operand.','line_number':2623,'multiline':False]['text':' Starts with * or +.','line_number':2624,'multiline':False]['text':' Contains some \n.','line_number':2625,'multiline':False]['text':' Contains "\@<=" or "\@<!".','line_number':2626,'multiline':False]['text':' Worst case.','line_number':2627,'multiline':False]['text':'/< byte length of previous char','line_number':2629,'multiline':False]['text':'/< Complex \{...} count','line_number':2630,'multiline':False]['text':'/< Code-emit pointer, or JUST_CALC_SIZE','line_number':2631,'multiline':False]['text':'/< Code size.','line_number':2632,'multiline':False]['text':'/< true when offset out of range','line_number':2633,'multiline':False]['text':'/< flags, true if end of () found','line_number':2634,'multiline':False]['text':'/< Minimums for complex brace repeats','line_number':2635,'multiline':False]['text':'/< Maximums for complex brace repeats','line_number':2636,'multiline':False]['text':'/< Current counts for complex brace repeats','line_number':2637,'multiline':False]['text':'/< only do one char for EXACTLY','line_number':2638,'multiline':False]['text':' When making changes to classchars also change nfa_classcodes.','line_number':2640,'multiline':False]['text':' When regcode is set to this value, code is not emitted and size is computed','line_number':2652,'multiline':False]['text':' instead.','line_number':2653,'multiline':False]['text':' used for STAR, PLUS and BRACE_SIMPLE matching','line_number':2656,'multiline':False]['text':' next byte','line_number':2658,'multiline':False]['text':' next byte reverse case','line_number':2659,'multiline':False]['text':' used to store input position when a BACK was encountered, so that we now if','line_number':2665,'multiline':False]['text':' we made any progress since the last time.','line_number':2666,'multiline':False]['text':' "scan" where BACK was encountered','line_number':2668,'multiline':False]['text':' last input position','line_number':2669,'multiline':False]['text':' "regstack" and "backpos" are used by regmatch().  They are kept over calls','line_number':2672,'multiline':False]['text':' to avoid invoking malloc() and free() often.','line_number':2673,'multiline':False]['text':' "regstack" is a stack with regitem_T items, sometimes preceded by regstar_T','line_number':2674,'multiline':False]['text':' or regbehind_T.','line_number':2675,'multiline':False]['text':' "backpos_T" is a table with backpos_T for BACK','line_number':2676,'multiline':False]['text':' Both for regstack and backpos tables we use the following strategy of','line_number':2682,'multiline':False]['text':' allocation (to reduce malloc/free calls):','line_number':2683,'multiline':False]['text':' - Initial size is fairly small.','line_number':2684,'multiline':False]['text':' - When needed, the tables are grown bigger (8 times at first, double after','line_number':2685,'multiline':False]['text':'   that).','line_number':2686,'multiline':False]['text':' - After executing the match we free the memory only if the array has grown.','line_number':2687,'multiline':False]['text':'   Thus the memory is kept allocated when it's at the initial size.','line_number':2688,'multiline':False]['text':' This makes it fast while not keeping a lot of memory allocated.','line_number':2689,'multiline':False]['text':' A three times speed increase was observed when using many simple patterns.','line_number':2690,'multiline':False]['text':' Opcode notes:','line_number':2694,'multiline':False]['text':'','line_number':2695,'multiline':False]['text':' BRANCH       The set of branches constituting a single choice are hooked','line_number':2696,'multiline':False]['text':'              together with their "next" pointers, since precedence prevents','line_number':2697,'multiline':False]['text':'              anything being concatenated to any individual branch.  The','line_number':2698,'multiline':False]['text':'              "next" pointer of the last BRANCH in a choice points to the','line_number':2699,'multiline':False]['text':'              thing following the whole choice.  This is also where the','line_number':2700,'multiline':False]['text':'              final "next" pointer of each individual branch points; each','line_number':2701,'multiline':False]['text':'              branch starts with the operand node of a BRANCH node.','line_number':2702,'multiline':False]['text':'','line_number':2703,'multiline':False]['text':' BACK         Normal "next" pointers all implicitly point forward; BACK','line_number':2704,'multiline':False]['text':'              exists to make loop structures possible.','line_number':2705,'multiline':False]['text':'','line_number':2706,'multiline':False]['text':' STAR,PLUS    '=', and complex '*' and '+', are implemented as circular','line_number':2707,'multiline':False]['text':'              BRANCH structures using BACK.  Simple cases (one character','line_number':2708,'multiline':False]['text':'              per match) are implemented with STAR and PLUS for speed','line_number':2709,'multiline':False]['text':'              and to minimize recursive plunges.','line_number':2710,'multiline':False]['text':'','line_number':2711,'multiline':False]['text':' BRACE_LIMITS This is always followed by a BRACE_SIMPLE or BRACE_COMPLEX','line_number':2712,'multiline':False]['text':'              node, and defines the min and max limits to be used for that','line_number':2713,'multiline':False]['text':'              node.','line_number':2714,'multiline':False]['text':'','line_number':2715,'multiline':False]['text':' MOPEN,MCLOSE ...are numbered at compile time.','line_number':2716,'multiline':False]['text':' ZOPEN,ZCLOSE ...ditto','line_number':2717,'multiline':False]['text':'/','line_number':2718,'multiline':False]['text':'','line_number':2719,'multiline':False]['text':'','line_number':2720,'multiline':False]['text':' A node is one char of opcode followed by two chars of "next" pointer.','line_number':2721,'multiline':False]['text':' "Next" pointers are stored as two 8-bit bytes, high order first.  The','line_number':2722,'multiline':False]['text':' value is a positive offset from the opcode of the node containing it.','line_number':2723,'multiline':False]['text':' An operand, if any, simply follows the node.  (Note that much of the','line_number':2724,'multiline':False]['text':' code generation knows about this implicit relationship.)','line_number':2725,'multiline':False]['text':'','line_number':2726,'multiline':False]['text':' Using two bytes for the "next" pointer is vast overkill for most things,','line_number':2727,'multiline':False]['text':' but allows patterns to get big without disasters.','line_number':2728,'multiline':False]['text':' Obtain an operand that was stored as four bytes, MSB first.','line_number':2732,'multiline':False]['text':' Obtain a second operand stored as four bytes.','line_number':2735,'multiline':False]['text':' Obtain a second single-byte operand stored after a four bytes operand.','line_number':2737,'multiline':False]['text':' Setup to parse the regexp.  Used once to get the length and once to do it.','line_number':2752,'multiline':False]['text':' see vim_regcomp()','line_number':2753,'multiline':False]['text':' Return true if MULTIBYTECODE should be used instead of EXACTLY for','line_number':2776,'multiline':False]['text':' character "c".','line_number':2777,'multiline':False]['text':' Emit (if appropriate) a byte of code','line_number':2785,'multiline':False]['text':' Emit (if appropriate) a multi-byte character of code','line_number':2795,'multiline':False]['text':' Produce the bytes for equivalence class "c".','line_number':2805,'multiline':False]['text':' Currently only handles latin1, latin9 and utf-8.','line_number':2806,'multiline':False]['text':' NOTE: When changing this function, also change nfa_emit_equi_class()','line_number':2807,'multiline':False]['text':' Do not use '\300' style, it results in a negative number.','line_number':2812,'multiline':False]['text':' Emit a node.','line_number':3776,'multiline':False]['text':' Return pointer to generated code.','line_number':3777,'multiline':False]['text':' Null "next" pointer.','line_number':3787,'multiline':False]['text':' Write a four bytes number at "p" and return pointer to the next char.','line_number':3793,'multiline':False]['text':' regnext - dig the "next" pointer out of a node','line_number':3803,'multiline':False]['text':' Returns NULL when calculating size, when there is no next item and when','line_number':3804,'multiline':False]['text':' there is an error.','line_number':3805,'multiline':False]['text':' Set the next-pointer at the end of a node chain.','line_number':3827,'multiline':False]['text':' Find last node.','line_number':3836,'multiline':False]['text':' When the offset uses more than 16 bits it can no longer fit in the two','line_number':3851,'multiline':False]['text':' bytes available.  Use a global flag to avoid having to check return','line_number':3852,'multiline':False]['text':' values in too many places.','line_number':3853,'multiline':False]['text':' Like regtail, on item after a BRANCH; nop if none.','line_number':3862,'multiline':False]['text':' When op is neither BRANCH nor BRACE_COMPLEX0-9, it is "operandless"','line_number':3865,'multiline':False]['text':' Insert an operator in front of already-emitted operand','line_number':3874,'multiline':False]['text':'','line_number':3875,'multiline':False]['text':' Means relocating the operand.','line_number':3876,'multiline':False]['text':' Op node, where operand used to be.','line_number':3894,'multiline':False]['text':' Insert an operator in front of already-emitted operand.','line_number':3900,'multiline':False]['text':' Add a number to the operator.','line_number':3901,'multiline':False]['text':' Op node, where operand used to be.','line_number':3919,'multiline':False]['text':' Insert an operator in front of already-emitted operand.','line_number':3927,'multiline':False]['text':' The operator has the given limit values as operands.  Also set next pointer.','line_number':3928,'multiline':False]['text':'','line_number':3929,'multiline':False]['text':' Means relocating the operand.','line_number':3930,'multiline':False]['text':' Op node, where operand used to be.','line_number':3948,'multiline':False]['text':'/ Return true if the back reference is legal. We must have seen the close','line_number':3959,'multiline':False]['text':'/ brace.','line_number':3960,'multiline':False]['text':'/ TODO(vim): Should also check that we don't refer to something repeated','line_number':3961,'multiline':False]['text':'/ (+*=): what instance of the repetition should we match?','line_number':3962,'multiline':False]['text':' Trick: check if "@<=" or "@<!" follows, in which case','line_number':3968,'multiline':False]['text':' the \1 can appear before the referenced match.','line_number':3969,'multiline':False]['text':' Parse the lowest level.','line_number':3985,'multiline':False]['text':'','line_number':3986,'multiline':False]['text':' Optimization:  gobbles an entire sequence of ordinary characters so that','line_number':3987,'multiline':False]['text':' it can turn them into a single node, which is smaller to store and','line_number':3988,'multiline':False]['text':' faster to run.  Don't do this when one_exactly is set.','line_number':3989,'multiline':False]['text':' Tentatively.','line_number':3999,'multiline':False]['text':' "\_^" is start-of-line','line_number':4022,'multiline':False]['text':' "\_$" is end-of-line','line_number':4026,'multiline':False]['text':' "\_[" is character range plus newline','line_number':4035,'multiline':False]['text':' "\_x" is character class plus newline','line_number':4040,'multiline':False]['text':' Character classes.','line_number':4043,'multiline':False]['text':' When '.' is followed by a composing char ignore the dot, so that','line_number':4075,'multiline':False]['text':' the composing char is matched here.','line_number':4076,'multiline':False]['text':' In a string "\n" matches a newline character.','line_number':4087,'multiline':False]['text':' In buffer text "\n" matches the end of a line.','line_number':4093,'multiline':False]['text':' Supposed to be caught earlier.','line_number':4117,'multiline':False]['text':' NOTREACHED','line_number':4118,'multiline':False]['text':' NOTREACHED','line_number':4129,'multiline':False]['text':' previous substitute pattern','line_number':4131,'multiline':False]['text':' () without a back reference','line_number':4227,'multiline':False]['text':' Catch \%^ and \%$ regardless of where they appear in the','line_number':4239,'multiline':False]['text':' pattern -- regardless of whether or not it makes sense.','line_number':4240,'multiline':False]['text':' misplaced \%#=1','line_number':4251,'multiline':False]['text':' \%[abc]: Emit as a list of branches, all ending at the last','line_number':4266,'multiline':False]['text':' branch which matches nothing.','line_number':4267,'multiline':False]['text':' doesn't nest','line_number':4269,'multiline':False]['text':' connect all branches to the NOTHING','line_number':4310,'multiline':False]['text':' branch at the end','line_number':4311,'multiline':False]['text':' %d123 decimal','line_number':4328,'multiline':False]['text':' %o123 octal','line_number':4329,'multiline':False]['text':' %xab hex 2','line_number':4330,'multiline':False]['text':' %uabcd hex 4','line_number':4331,'multiline':False]['text':' %U1234abcd hex 8','line_number':4332,'multiline':False]['text':' "\%'m", "\%<'m" and "\%>'m": Mark','line_number':4391,'multiline':False]['text':' put the number and the optional','line_number':4432,'multiline':False]['text':' comparator after the opcode','line_number':4433,'multiline':False]['text':' If there is no matching ']', we assume the '[' is a normal','line_number':4451,'multiline':False]['text':' character.  This makes 'incsearch' and ":help [" work.','line_number':4452,'multiline':False]['text':' there is a matching ']'','line_number':4454,'multiline':False]['text':' > 0 when next '-' is a range','line_number':4455,'multiline':False]['text':' In a character class, different parsing rules apply.','line_number':4458,'multiline':False]['text':' Not even \ is special anymore, nothing is.','line_number':4459,'multiline':False]['text':' Complement of range.','line_number':4460,'multiline':False]['text':' At the start ']' and '-' mean the literal character.','line_number':4467,'multiline':False]['text':' The '-' is not used for a range at the end and','line_number':4476,'multiline':False]['text':' after or before a '\n'.','line_number':4477,'multiline':False]['text':' [--x] is a range','line_number':4482,'multiline':False]['text':' Also accept "a-[.z.]"','line_number':4484,'multiline':False]['text':' Handle \o40, \x20 and \u20AC style sequences','line_number':4493,'multiline':False]['text':' Limit to a range of 256 chars','line_number':4503,'multiline':False]['text':' Only "\]", "\^", "\]" and "\\" are special in Vi.  Vim','line_number':4518,'multiline':False]['text':' accepts "\t", "\e", etc., but only when the 'l' flag in','line_number':4519,'multiline':False]['text':' 'cpoptions' is not included.','line_number':4520,'multiline':False]['text':' '\n' in range: also match NL','line_number':4528,'multiline':False]['text':' Using \n inside [^] does not change what','line_number':4530,'multiline':False]['text':' matches. "[^\n]" is the same as ".".','line_number':4531,'multiline':False]['text':' else: must have had a \n already','line_number':4536,'multiline':False]['text':' Characters assumed to be 8 bits!','line_number':4561,'multiline':False]['text':' produce equivalence class','line_number':4566,'multiline':False]['text':' produce a collating element','line_number':4569,'multiline':False]['text':' literal '[', allow [[-x] as a range','line_number':4572,'multiline':False]['text':' produce a multibyte character, including any','line_number':4692,'multiline':False]['text':' following composing characters.','line_number':4693,'multiline':False]['text':' composing chars','line_number':4697,'multiline':False]['text':' last char was the ']'','line_number':4706,'multiline':False]['text':' Cannot happen?','line_number':4708,'multiline':False]['text':' let's be friends with the lexer again','line_number':4710,'multiline':False]['text':' A multi-byte character is handled as a separate atom if it's','line_number':4722,'multiline':False]['text':' before a multi and when it's a composing char.','line_number':4723,'multiline':False]['text':' Append characters as long as:','line_number':4734,'multiline':False]['text':' - there is no following multi, we then need the character in','line_number':4735,'multiline':False]['text':'   front of it as a single character operand','line_number':4736,'multiline':False]['text':' - not running into a Magic character','line_number':4737,'multiline':False]['text':' - "one_exactly" is not set','line_number':4738,'multiline':False]['text':' But always emit at least one character.  Might be a Multi,','line_number':4739,'multiline':False]['text':' e.g., a "[" without matching "]".','line_number':4740,'multiline':False]['text':' Need to get composing character too.','line_number':4751,'multiline':False]['text':' Parse something followed by possible [*+=].','line_number':4778,'multiline':False]['text':'','line_number':4779,'multiline':False]['text':' Note that the branching code sequences used for = and the general cases','line_number':4780,'multiline':False]['text':' of * and + are somewhat optimized:  they use the same NOTHING node as','line_number':4781,'multiline':False]['text':' both the endmarker for their branch list and the body of the last branch.','line_number':4782,'multiline':False]['text':' It might seem that this node could be dispensed with entirely, but the','line_number':4783,'multiline':False]['text':' endmarker role is not redundant.','line_number':4784,'multiline':False]['text':' default flags','line_number':4804,'multiline':False]['text':' Emit x* as (x&|), where & means "self".','line_number':4813,'multiline':False]['text':' Either x','line_number':4814,'multiline':False]['text':' and loop','line_number':4815,'multiline':False]['text':' back','line_number':4816,'multiline':False]['text':' or','line_number':4817,'multiline':False]['text':' null.','line_number':4818,'multiline':False]['text':' Emit x+ as x(&|), where & means "self".','line_number':4826,'multiline':False]['text':' Either','line_number':4827,'multiline':False]['text':' loop back','line_number':4829,'multiline':False]['text':' or','line_number':4830,'multiline':False]['text':' null.','line_number':4831,'multiline':False]['text':' \@=','line_number':4842,'multiline':False]['text':' \@!','line_number':4844,'multiline':False]['text':' \@>','line_number':4846,'multiline':False]['text':' \@<=','line_number':4850,'multiline':False]['text':' \@<!','line_number':4852,'multiline':False]['text':' Look behind must match with behind_pos.','line_number':4859,'multiline':False]['text':' operand ends','line_number':4864,'multiline':False]['text':' no limit is same as zero limit','line_number':4867,'multiline':False]['text':' Emit x= as (x|)','line_number':4878,'multiline':False]['text':' Either x','line_number':4879,'multiline':False]['text':' or','line_number':4880,'multiline':False]['text':' null.','line_number':4881,'multiline':False]['text':' Can't have a multi follow a multi.','line_number':4910,'multiline':False]['text':' Parse one alternative of an | or & operator.','line_number':4920,'multiline':False]['text':' Implements the concatenation operator.','line_number':4921,'multiline':False]['text':' Tentatively.','line_number':4930,'multiline':False]['text':' First piece.','line_number':4978,'multiline':False]['text':' Loop ran zero times.','line_number':4990,'multiline':False]['text':' Parse one alternative of an | operator.','line_number':4996,'multiline':False]['text':' Implements the & operator.','line_number':4997,'multiline':False]['text':' Tentatively.','line_number':5005,'multiline':False]['text':' If one of the branches has width, the whole thing has.  If one of','line_number':5013,'multiline':False]['text':' the branches anchors at start-of-line, the whole thing does.','line_number':5014,'multiline':False]['text':' If one of the branches uses look-behind, the whole thing does.','line_number':5015,'multiline':False]['text':' If one of the branches doesn't match a line-break, the whole thing','line_number':5017,'multiline':False]['text':' doesn't.','line_number':5018,'multiline':False]['text':' operand ends','line_number':5027,'multiline':False]['text':'/ Parse regular expression, i.e. main body or parenthesized thing.','line_number':5038,'multiline':False]['text':'/','line_number':5039,'multiline':False]['text':'/ Caller must absorb opening parenthesis.','line_number':5040,'multiline':False]['text':'/','line_number':5041,'multiline':False]['text':'/ Combining parenthesis handling with the base level of regular expression','line_number':5042,'multiline':False]['text':'/ is a trifle forced, but the need to tie the tails of the branches to what','line_number':5043,'multiline':False]['text':'/ follows makes it hard to avoid.','line_number':5044,'multiline':False]['text':'/','line_number':5045,'multiline':False]['text':'/ @param paren  REG_NOPAREN, REG_PAREN, REG_NPAREN or REG_ZPAREN','line_number':5046,'multiline':False]['text':' Tentatively.','line_number':5055,'multiline':False]['text':' Make a ZOPEN node.','line_number':5058,'multiline':False]['text':' Make a MOPEN node.','line_number':5066,'multiline':False]['text':' Make a NOPEN node.','line_number':5074,'multiline':False]['text':' Pick up the branches, linking them together.','line_number':5080,'multiline':False]['text':' [MZ]OPEN -> first.','line_number':5086,'multiline':False]['text':' If one of the branches can be zero-width, the whole thing can.','line_number':5090,'multiline':False]['text':' If one of the branches has * at start or matches a line-break, the','line_number':5091,'multiline':False]['text':' whole thing can.','line_number':5092,'multiline':False]['text':' BRANCH -> BRANCH.','line_number':5103,'multiline':False]['text':' Make a closing node, and hook it on the end.','line_number':5110,'multiline':False]['text':' Hook the tails of the branches to the closing node.','line_number':5116,'multiline':False]['text':' Check for proper termination.','line_number':5121,'multiline':False]['text':' "Can't happen".','line_number':5134,'multiline':False]['text':' NOTREACHED','line_number':5136,'multiline':False]['text':' Here we set the flag allowing back references to this set of','line_number':5138,'multiline':False]['text':' parentheses.','line_number':5139,'multiline':False]['text':' have seen the close paren','line_number':5141,'multiline':False]['text':' bt_regcomp() - compile a regular expression into internal code for the','line_number':5146,'multiline':False]['text':' traditional back track matcher.','line_number':5147,'multiline':False]['text':' Returns the program in allocated space.  Returns NULL for an error.','line_number':5148,'multiline':False]['text':'','line_number':5149,'multiline':False]['text':' We can't allocate space until we know how big the compiled form will be,','line_number':5150,'multiline':False]['text':' but we can't compile it (and thus know how big it is) until we've got a','line_number':5151,'multiline':False]['text':' place to put the code.  So we cheat:  we compile it twice, once with code','line_number':5152,'multiline':False]['text':' generation turned off and size counting turned on, and once "for real".','line_number':5153,'multiline':False]['text':' This also means that we don't allocate space until we are sure that the','line_number':5154,'multiline':False]['text':' thing really will compile successfully, and we never have to move the','line_number':5155,'multiline':False]['text':' code and thus invalidate pointers into it.  (Note that it has to be in','line_number':5156,'multiline':False]['text':' one piece because free() must be able to free it all.)','line_number':5157,'multiline':False]['text':'','line_number':5158,'multiline':False]['text':' Whether upper/lower case is to be ignored is decided when executing the','line_number':5159,'multiline':False]['text':' program, it does not matter here.','line_number':5160,'multiline':False]['text':'','line_number':5161,'multiline':False]['text':' Beware that the optimization-preparation code in here knows about some','line_number':5162,'multiline':False]['text':' of the structure of the compiled regexp.','line_number':5163,'multiline':False]['text':' "re_flags": RE_MAGIC and/or RE_STRING.','line_number':5164,'multiline':False]['text':' First pass: determine size, legality.','line_number':5178,'multiline':False]['text':' Allocate space.','line_number':5186,'multiline':False]['text':' Second pass: emit code.','line_number':5190,'multiline':False]['text':' Dig out information for optimizations.','line_number':5202,'multiline':False]['text':' Worst-case defaults.','line_number':5203,'multiline':False]['text':' Remember whether this pattern has any \z specials in it.','line_number':5214,'multiline':False]['text':' First BRANCH.','line_number':5216,'multiline':False]['text':' Only one top-level choice.','line_number':5217,'multiline':False]['text':' Starting-point info.','line_number':5220,'multiline':False]['text':' If there's something expensive in the r.e., find the longest','line_number':5239,'multiline':False]['text':' literal string that must appear and make it the regmust.  Resolve','line_number':5240,'multiline':False]['text':' ties in favor of later strings, since the regstart check works','line_number':5241,'multiline':False]['text':' with the beginning of the r.e. and avoiding duplication','line_number':5242,'multiline':False]['text':' strengthens checking.  Not a strong reason, but sufficient in the','line_number':5243,'multiline':False]['text':' absence of others.','line_number':5244,'multiline':False]['text':' When the r.e. starts with BOW, it is faster to look for a regmust','line_number':5246,'multiline':False]['text':' first. Used a lot for "#" and "*" commands. (Added by mool).','line_number':5247,'multiline':False]['text':' Check if during the previous call to vim_regcomp the EOL item "$" has been','line_number':5269,'multiline':False]['text':' found.  This is messy, but it works fine.','line_number':5270,'multiline':False]['text':' Get a number after a backslash that is inside [].','line_number':5276,'multiline':False]['text':' When nothing is recognized return a backslash.','line_number':5277,'multiline':False]['text':' If getting the number fails be backwards compatible: the character','line_number':5295,'multiline':False]['text':' is a backslash.','line_number':5296,'multiline':False]['text':' Free a compiled regexp program, returned by bt_regcomp().','line_number':5303,'multiline':False]['text':' The arguments from BRACE_LIMITS are stored here.  They are actually local','line_number':5311,'multiline':False]['text':' to regmatch(), but they are here to reduce the amount of stack space used','line_number':5312,'multiline':False]['text':' (it can be called recursively many times).','line_number':5313,'multiline':False]['text':' Save the input line and position in a regsave_T.','line_number':5317,'multiline':False]['text':' Restore the input line and position from a regsave_T.','line_number':5330,'multiline':False]['text':' only call reg_getline() when the line number changed to save','line_number':5336,'multiline':False]['text':' a bit of time','line_number':5337,'multiline':False]['text':' Return true if current position is equal to saved position.','line_number':5348,'multiline':False]['text':' Save the sub-expressions before attempting a match.','line_number':5359,'multiline':False]['text':' After a failed match restore the sub-expressions.','line_number':5363,'multiline':False]['text':' NOLINT(readability/braces) ','line_number':5365,'multiline':True]['text':' NOLINT ','line_number':5367,'multiline':True]['text':' Tentatively set the sub-expression start to the current position (after','line_number':5370,'multiline':False]['text':' calling regmatch() they will have changed).  Need to save the existing','line_number':5371,'multiline':False]['text':' values for when there is no match.','line_number':5372,'multiline':False]['text':' Use se_save() to use pointer (save_se_multi()) or position (save_se_one()),','line_number':5373,'multiline':False]['text':' depending on REG_MULTI.','line_number':5374,'multiline':False]['text':'/ regrepeat - repeatedly match something simple, return how many.','line_number':5388,'multiline':False]['text':'/ Advances rex.input (and rex.lnum) to just after the matched chars.','line_number':5389,'multiline':False]['text':'/','line_number':5390,'multiline':False]['text':'/ @param maxcount  maximum number of matches allowed','line_number':5391,'multiline':False]['text':' Make local copy of rex.input for speed.','line_number':5399,'multiline':False]['text':' Matching anything means we continue until end-of-line (or','line_number':5405,'multiline':False]['text':' end-of-file for ANY + ADD_NL), only limited by maxcount.','line_number':5406,'multiline':False]['text':' count the line-break','line_number':5415,'multiline':False]['text':' This doesn't do a multi-byte character, because a MULTIBYTECODE','line_number':5642,'multiline':False]['text':' would have been used for it.  It does handle single-byte','line_number':5643,'multiline':False]['text':' characters, such as latin1.','line_number':5644,'multiline':False]['text':' Safety check (just in case 'encoding' was changed since','line_number':5665,'multiline':False]['text':' compiling the program).','line_number':5666,'multiline':False]['text':' Oh dear.  Called inappropriately.','line_number':5741,'multiline':False]['text':' Push an item onto the regstack.','line_number':5754,'multiline':False]['text':' Returns pointer to new item.  Returns NULL when out of memory.','line_number':5755,'multiline':False]['text':' Pop an item from the regstack.','line_number':5774,'multiline':False]['text':' Save the current subexpr to "bp", so that they can be restored','line_number':5785,'multiline':False]['text':' later by restore_subexpr().','line_number':5786,'multiline':False]['text':' When "rex.need_clear_subexpr" is set we don't need to save the values, only','line_number':5790,'multiline':False]['text':' remember that this flag needs to be set again when restoring.','line_number':5791,'multiline':False]['text':' Restore the subexpr from "bp".','line_number':5808,'multiline':False]['text':' Only need to restore saved values when they are not to be cleared.','line_number':5812,'multiline':False]['text':'/ Main matching routine','line_number':5828,'multiline':False]['text':'/','line_number':5829,'multiline':False]['text':'/ Conceptually the strategy is simple: Check to see whether the current node','line_number':5830,'multiline':False]['text':'/ matches, push an item onto the regstack and loop to see whether the rest','line_number':5831,'multiline':False]['text':'/ matches, and then act accordingly.  In practice we make some effort to','line_number':5832,'multiline':False]['text':'/ avoid using the regstack, in particular by going through "ordinary" nodes','line_number':5833,'multiline':False]['text':'/ (that don't need to know whether the rest of the match failed) by a nested','line_number':5834,'multiline':False]['text':'/ loop.','line_number':5835,'multiline':False]['text':'/','line_number':5836,'multiline':False]['text':'/ @param scan       Current node.','line_number':5837,'multiline':False]['text':'/ @param tm         timeout limit or NULL','line_number':5838,'multiline':False]['text':'/ @param timed_out  flag set on timeout or NULL','line_number':5839,'multiline':False]['text':'/','line_number':5840,'multiline':False]['text':'/ @return - true when there is a match.  Leaves rex.input and rex.lnum','line_number':5841,'multiline':False]['text':'/         just after the last matched character.','line_number':5842,'multiline':False]['text':'/         - false when there is no match.  Leaves rex.input and rex.lnum in an','line_number':5843,'multiline':False]['text':'/         undefined state!','line_number':5844,'multiline':False]['text':' Next node.','line_number':5847,'multiline':False]['text':' one of the RA_ values:','line_number':5852,'multiline':False]['text':' Make "regstack" and "backpos" empty.  They are allocated and freed in','line_number':5855,'multiline':False]['text':' bt_regexec_both() to reduce malloc()/free() calls.','line_number':5856,'multiline':False]['text':' Repeat until "regstack" is empty.','line_number':5860,'multiline':False]['text':' Some patterns may take a long time to match, e.g., "\([a-z]\+\)\+Q".','line_number':5862,'multiline':False]['text':' Allow interrupting them with CTRL-C.','line_number':5863,'multiline':False]['text':' Repeat for items that can be matched sequentially, without using the','line_number':5873,'multiline':False]['text':' regstack.','line_number':5874,'multiline':False]['text':' Check for timeout once in a 100 times to avoid overhead.','line_number':5880,'multiline':False]['text':' Check for character class with NL added.','line_number':5914,'multiline':False]['text':' We're not at the beginning of the file when below the first','line_number':5939,'multiline':False]['text':' line where we started, not at the start of the line or we','line_number':5940,'multiline':False]['text':' didn't start at the first line of the buffer.','line_number':5941,'multiline':False]['text':' Check if the buffer is in a window and compare the','line_number':5955,'multiline':False]['text':' rex.reg_win->w_cursor position to the match position.','line_number':5956,'multiline':False]['text':' Compare the mark position to the match position.','line_number':5966,'multiline':False]['text':' Line may have been freed, get it again.','line_number':5974,'multiline':False]['text':' mark doesn't exist','line_number':5980,'multiline':False]['text':' mark isn't set in reg_buf','line_number':5981,'multiline':False]['text':' \<word; rex.input points to w','line_number':6038,'multiline':False]['text':' Can't match at end of line','line_number':6039,'multiline':False]['text':' Get class of current and previous char (if it exists).','line_number':6042,'multiline':False]['text':' Not on a word at all.','line_number':6046,'multiline':False]['text':' Previous char is in same word.','line_number':6048,'multiline':False]['text':' word\>; rex.input points after d','line_number':6053,'multiline':False]['text':' Can't match at start of line','line_number':6054,'multiline':False]['text':' Get class of current and previous char (if it exists).','line_number':6059,'multiline':False]['text':' Matched with EOW','line_number':6067,'multiline':False]['text':' ANY does not match new lines.','line_number':6070,'multiline':False]['text':' Inline the first byte, for speed.','line_number':6292,'multiline':False]['text':' match empty string always works; happens when "~" is','line_number':6297,'multiline':False]['text':' empty.','line_number':6298,'multiline':False]['text':' matched a single byte above','line_number':6301,'multiline':False]['text':' Need to match first byte again for multi-byte.','line_number':6303,'multiline':False]['text':' Check for following composing character, unless %C','line_number':6309,'multiline':False]['text':' follows (skips over all composing chars).','line_number':6310,'multiline':False]['text':' raaron: This code makes a composing character get','line_number':6315,'multiline':False]['text':' ignored, which is the correct behavior (sometimes)','line_number':6316,'multiline':False]['text':' for voweled Hebrew texts.','line_number':6317,'multiline':False]['text':' Safety check (just in case 'encoding' was changed since','line_number':6342,'multiline':False]['text':' compiling the program).','line_number':6343,'multiline':False]['text':' When only a composing char is given match at any','line_number':6350,'multiline':False]['text':' position where that composing char appears.','line_number':6351,'multiline':False]['text':' Include all following composing chars.','line_number':6361,'multiline':False]['text':' Skip composing characters.','line_number':6380,'multiline':False]['text':' When we run into BACK we need to check if we don't keep','line_number':6392,'multiline':False]['text':' looping without matching any input.  The second and later','line_number':6393,'multiline':False]['text':' times a BACK is encountered it fails if the input is still','line_number':6394,'multiline':False]['text':' at the same position as the previous time.','line_number':6395,'multiline':False]['text':' The positions are stored in "backpos" and found by the','line_number':6396,'multiline':False]['text':' current value of "scan", the position in the RE program.','line_number':6397,'multiline':False]['text':' Still at same position as last time, fail.','line_number':6408,'multiline':False]['text':' Match start: \zs','line_number':6419,'multiline':False]['text':' \(','line_number':6420,'multiline':False]['text':' We simply continue and handle the result when done.','line_number':6438,'multiline':False]['text':' \%(','line_number':6442,'multiline':False]['text':' \) after \%(','line_number':6443,'multiline':False]['text':' We simply continue and handle the result when done.','line_number':6447,'multiline':False]['text':' We simply continue and handle the result when done.','line_number':6468,'multiline':False]['text':' Match end: \ze','line_number':6472,'multiline':False]['text':' \)','line_number':6473,'multiline':False]['text':' We simply continue and handle the result when done.','line_number':6490,'multiline':False]['text':' \) after \z(','line_number':6494,'multiline':False]['text':' We simply continue and handle the result when done.','line_number':6512,'multiline':False]['text':' Single-line regexp','line_number':6529,'multiline':False]['text':' Backref was not set: Match an empty string.','line_number':6531,'multiline':False]['text':' Compare current input with back-ref in the same line.','line_number':6534,'multiline':False]['text':' Multi-line regexp','line_number':6540,'multiline':False]['text':' Backref was not set: Match an empty string.','line_number':6542,'multiline':False]['text':' Compare back-ref within the current line.','line_number':6547,'multiline':False]['text':' Messy situation: Need to compare between two lines.','line_number':6554,'multiline':False]['text':' Matched the backref, skip over it.','line_number':6567,'multiline':False]['text':' Backref was not set: Match an empty string.','line_number':6592,'multiline':False]['text':' No choice.','line_number':6597,'multiline':False]['text':' Avoid recursion.','line_number':6598,'multiline':False]['text':' rest is below','line_number':6604,'multiline':False]['text':' If not matched enough times yet, try one more','line_number':6638,'multiline':False]['text':' We continue and handle the result when done.','line_number':6648,'multiline':False]['text':' If matched enough times, may try matching some more','line_number':6653,'multiline':False]['text':' Range is the normal way around, use longest match','line_number':6655,'multiline':False]['text':' We continue and handle the result when done.','line_number':6664,'multiline':False]['text':' Range is backwards, use shortest match first','line_number':6668,'multiline':False]['text':' We continue and handle the result when done.','line_number':6675,'multiline':False]['text':' Lookahead to avoid useless match attempts when we know','line_number':6686,'multiline':False]['text':' what character comes next.','line_number':6687,'multiline':False]['text':' When maxval > minval, try matching as much as possible, up','line_number':6711,'multiline':False]['text':' to maxval.  When maxval < minval, try matching at least the','line_number':6712,'multiline':False]['text':' minimal number (since the range is backwards, that's also','line_number':6713,'multiline':False]['text':' maxval!).','line_number':6714,'multiline':False]['text':' It could match.  Prepare for trying to match what','line_number':6722,'multiline':False]['text':' follows.  The code is below.  Parameters are stored in','line_number':6723,'multiline':False]['text':' a regstar_T on the regstack.','line_number':6724,'multiline':False]['text':' skip the restore bits','line_number':6736,'multiline':False]['text':' We continue and handle the result when done.','line_number':6755,'multiline':False]['text':' Need a bit of room to store extra positions.','line_number':6761,'multiline':False]['text':' Need to save the subexpr to be able to restore them','line_number':6772,'multiline':False]['text':' when there is a match but we don't use it.','line_number':6773,'multiline':False]['text':' First try if what follows matches.  If it does then we','line_number':6778,'multiline':False]['text':' check the behind match by looping.','line_number':6779,'multiline':False]['text':' Success!','line_number':6807,'multiline':False]['text':' If we can't continue sequentially, break the inner loop.','line_number':6820,'multiline':False]['text':' Continue in inner loop, advance to next item.','line_number':6825,'multiline':False]['text':' end of inner loop','line_number':6827,'multiline':False]['text':' If there is something on the regstack execute the code for the state.','line_number':6829,'multiline':False]['text':' If the state is popped then loop and use the older state.','line_number':6830,'multiline':False]['text':' Result is passed on as-is, simply pop the state.','line_number':6835,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6840,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6849,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6858,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6867,'multiline':False]['text':' this branch matched, use it','line_number':6877,'multiline':False]['text':' After a non-matching branch: try next one.','line_number':6881,'multiline':False]['text':' no more branches, didn't find a match','line_number':6886,'multiline':False]['text':' Prepare to try a branch.','line_number':6890,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6899,'multiline':False]['text':' decrement match count','line_number':6902,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6908,'multiline':False]['text':' There was no match, but we did find enough matches.','line_number':6910,'multiline':False]['text':' continue with the items after "\{}"','line_number':6913,'multiline':False]['text':' Pop the state.  Restore pointers when there is no match.','line_number':6923,'multiline':False]['text':' There was no match, try to match one more item.','line_number':6925,'multiline':False]['text':' Pop the state.  If the operand matches for NOMATCH or','line_number':6936,'multiline':False]['text':' doesn't match for MATCH/SUBPAT, we fail.  Otherwise backup,','line_number':6937,'multiline':False]['text':' except for SUBPAT, and continue with the next item.','line_number':6938,'multiline':False]['text':' zero-width','line_number':6943,'multiline':False]['text':' The stuff after BEHIND/NOBEHIND matches.  Now try if','line_number':6958,'multiline':False]['text':' the behind part does (not) match before the current','line_number':6959,'multiline':False]['text':' position in the input.  This must be done at every','line_number':6960,'multiline':False]['text':' position in the input and checking if the match ends at','line_number':6961,'multiline':False]['text':' the current position.','line_number':6962,'multiline':False]['text':' save the position after the found match for next','line_number':6964,'multiline':False]['text':' Start looking for a match with operand at the current','line_number':6967,'multiline':False]['text':' position.  Go back one character until we find the','line_number':6968,'multiline':False]['text':' result, hitting the start of the line or the previous','line_number':6969,'multiline':False]['text':' line (for multi-line matching).','line_number':6970,'multiline':False]['text':' Set behind_pos to where the match should end, BHPOS','line_number':6971,'multiline':False]['text':' will match it.  Save the current value.','line_number':6972,'multiline':False]['text':' Looping for BEHIND / NOBEHIND match.','line_number':6984,'multiline':False]['text':' found a match that ends where "next" started','line_number':6986,'multiline':False]['text':' But we didn't want a match.  Need to restore the','line_number':6992,'multiline':False]['text':' subexpr, because what follows matched, so they have','line_number':6993,'multiline':False]['text':' been set.','line_number':6994,'multiline':False]['text':' No match or a match that doesn't end where we want it: Go','line_number':7003,'multiline':False]['text':' back one character.  May go to previous line once.','line_number':7004,'multiline':False]['text':' Advanced, prepare for finding match again.','line_number':7047,'multiline':False]['text':' We did match, so subexpr may have been changed,','line_number':7051,'multiline':False]['text':' need to restore them for the next try.','line_number':7052,'multiline':False]['text':' Can't advance.  For NOBEHIND that's a match.','line_number':7057,'multiline':False]['text':' We do want a proper match.  Need to restore the','line_number':7064,'multiline':False]['text':' subexpr if we had a match, because they may have','line_number':7065,'multiline':False]['text':' been set.','line_number':7066,'multiline':False]['text':' Tried once already, restore input pointers.','line_number':7088,'multiline':False]['text':' Repeat until we found a position where it could match.','line_number':7093,'multiline':False]['text':' Tried first position already, advance.','line_number':7096,'multiline':False]['text':' Trying for longest match, but couldn't or','line_number':7098,'multiline':False]['text':' didn't match -- back up one char.','line_number':7099,'multiline':False]['text':' backup to last char of previous line','line_number':7104,'multiline':False]['text':' Just in case regrepeat() didn't count right.','line_number':7111,'multiline':False]['text':' Range is backwards, use shortest match first.','line_number':7121,'multiline':False]['text':' Careful: maxval and minval are exchanged!','line_number':7122,'multiline':False]['text':' Couldn't or didn't match: try advancing one','line_number':7123,'multiline':False]['text':' char.','line_number':7124,'multiline':False]['text':' If it could match, try it.','line_number':7138,'multiline':False]['text':' Failed.','line_number':7148,'multiline':False]['text':' If we want to continue the inner loop or didn't pop a state','line_number':7157,'multiline':False]['text':' continue matching loop','line_number':7158,'multiline':False]['text':' May need to continue with the inner loop, starting at "scan".','line_number':7165,'multiline':False]['text':' If the regstack is empty or something failed we are done.','line_number':7170,'multiline':False]['text':' We get here only if there's trouble -- normally "case END" is','line_number':7173,'multiline':False]['text':' the terminating point.','line_number':7174,'multiline':False]['text':' End of loop until the regstack is empty.','line_number':7182,'multiline':False]['text':' NOTREACHED','line_number':7184,'multiline':False]['text':'/ Try match of "prog" with at rex.line["col"].','line_number':7187,'multiline':False]['text':'/','line_number':7188,'multiline':False]['text':'/ @param tm         timeout limit or NULL','line_number':7189,'multiline':False]['text':'/ @param timed_out  flag set on timeout or NULL','line_number':7190,'multiline':False]['text':'/','line_number':7191,'multiline':False]['text':'/ @return  0 for failure, or number of lines contained in the match.','line_number':7192,'multiline':False]['text':' Clear the external match subpointers if necessaey.','line_number':7197,'multiline':False]['text':' Use line number of "\ze".','line_number':7214,'multiline':False]['text':' Package any found \z(...\) matches for export. Default is none.','line_number':7225,'multiline':False]['text':' Only accept single line matches.','line_number':7236,'multiline':False]['text':'/ Match a regexp against a string ("line" points to the string) or multiple','line_number':7255,'multiline':False]['text':'/ lines (if "line" is NULL, use reg_getline()).','line_number':7256,'multiline':False]['text':'/','line_number':7257,'multiline':False]['text':'/ @param startcol   column to start looking for match','line_number':7258,'multiline':False]['text':'/ @param tm         timeout limit or NULL','line_number':7259,'multiline':False]['text':'/ @param timed_out  flag set on timeout or NULL','line_number':7260,'multiline':False]['text':'/','line_number':7261,'multiline':False]['text':'/ @return  0 for failure, or number of lines contained in the match.','line_number':7262,'multiline':False]['text':' Create "regstack" and "backpos" if they are not allocated yet.','line_number':7270,'multiline':False]['text':' We allocate *_INITIAL amount of bytes first and then set the grow size','line_number':7271,'multiline':False]['text':' to much bigger value to avoid many malloc calls in case of deep regular','line_number':7272,'multiline':False]['text':' expressions.','line_number':7273,'multiline':False]['text':' Use an item size of 1 byte, since we push different things','line_number':7275,'multiline':False]['text':' onto the regstack.','line_number':7276,'multiline':False]['text':' Be paranoid...','line_number':7299,'multiline':False]['text':' Check validity of program.','line_number':7305,'multiline':False]['text':' If the start column is past the maximum column: no need to try.','line_number':7310,'multiline':False]['text':' If pattern contains "\c" or "\C": overrule value of rex.reg_ic','line_number':7315,'multiline':False]['text':' If pattern contains "\Z" overrule value of rex.reg_icombine','line_number':7322,'multiline':False]['text':' If there is a "must appear" string, look for it.','line_number':7327,'multiline':False]['text':' This is used very often, esp. for ":global".  Use two versions of','line_number':7332,'multiline':False]['text':' the loop to avoid overhead of conditions.','line_number':7333,'multiline':False]['text':' Found it.','line_number':7337,'multiline':False]['text':' Found it.','line_number':7344,'multiline':False]['text':' Not present.','line_number':7349,'multiline':False]['text':' Simplest case: Anchored match need be tried only once.','line_number':7358,'multiline':False]['text':' Messy cases:  unanchored match.','line_number':7373,'multiline':False]['text':' Skip until the char we know it must start with.','line_number':7376,'multiline':False]['text':' Check for maximum column to try.','line_number':7385,'multiline':False]['text':' if not currently on the first line, get it again','line_number':7396,'multiline':False]['text':' Check for timeout once in a twenty times to avoid overhead.','line_number':7405,'multiline':False]['text':' Free "reg_tofree" when it's a bit big.','line_number':7419,'multiline':False]['text':' Free regstack and backpos if they are bigger than their initial size.','line_number':7420,'multiline':False]['text':' Make sure the end is never before the start.  Can happen when \zs','line_number':7432,'multiline':False]['text':' and \ze are used.','line_number':7433,'multiline':False]['text':' startpos[0] may be set by "\zs", also return the column where','line_number':7443,'multiline':False]['text':' the whole pattern matched.','line_number':7444,'multiline':False]['text':' startpos[0] may be set by "\zs", also return the column where','line_number':7451,'multiline':False]['text':' the whole pattern matched.','line_number':7452,'multiline':False]['text':'/ Match a regexp against a string.','line_number':7460,'multiline':False]['text':'/ "rmp->regprog" is a compiled regexp as returned by vim_regcomp().','line_number':7461,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':7462,'multiline':False]['text':'/ If "line_lbr" is true, consider a "\n" in "line" to be a line break.','line_number':7463,'multiline':False]['text':'/','line_number':7464,'multiline':False]['text':'/ @param line  string to match against','line_number':7465,'multiline':False]['text':'/ @param col   column to start looking for match','line_number':7466,'multiline':False]['text':'/','line_number':7467,'multiline':False]['text':'/ @return  0 for failure, number of lines contained in the match otherwise.','line_number':7468,'multiline':False]['text':'/ Matches a regexp against multiple lines.','line_number':7487,'multiline':False]['text':'/ "rmp->regprog" is a compiled regexp as returned by vim_regcomp().','line_number':7488,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':7489,'multiline':False]['text':'/','line_number':7490,'multiline':False]['text':'/ @param win Window in which to search or NULL','line_number':7491,'multiline':False]['text':'/ @param buf Buffer in which to search','line_number':7492,'multiline':False]['text':'/ @param lnum Number of line to start looking for match','line_number':7493,'multiline':False]['text':'/ @param col Column to start looking for match','line_number':7494,'multiline':False]['text':'/ @param tm Timeout limit or NULL','line_number':7495,'multiline':False]['text':'/','line_number':7496,'multiline':False]['text':'/ @return zero if there is no match and number of lines contained in the match','line_number':7497,'multiline':False]['text':'/         otherwise.','line_number':7498,'multiline':False]['text':' Compare a number with the operand of RE_LNUM, RE_COL or RE_VCOL.','line_number':7506,'multiline':False]['text':' regdump - dump a regexp onto stdout in vaguely comprehensible form','line_number':7522,'multiline':False]['text':' Arbitrary non-END op.','line_number':7526,'multiline':False]['text':' Loop until we find the END that isn't before a referred next (an END','line_number':7543,'multiline':False]['text':' can also appear in a NOMATCH operand).','line_number':7544,'multiline':False]['text':' Where, what.','line_number':7547,'multiline':False]['text':' Next ptr.','line_number':7549,'multiline':False]['text':' Two ints','line_number':7558,'multiline':False]['text':' one int','line_number':7563,'multiline':False]['text':' one int plus comparator','line_number':7567,'multiline':False]['text':' Literal string, where present.','line_number':7575,'multiline':False]['text':' Header fields of interest.','line_number':7586,'multiline':False]['text':' BT_REGEXP_DUMP','line_number':7604,'multiline':False]['text':' regprop - printable representation of opcode','line_number':7608,'multiline':False]['text':' REGEXP_DEBUG','line_number':7983,'multiline':False]['text':' }}}1','line_number':7985,'multiline':False]['text':' regexp_nfa.c {{{1','line_number':7987,'multiline':False]['text':' NFA regular expression implementation.','line_number':7988,'multiline':False]['text':' Logging of NFA engine.','line_number':7990,'multiline':False]['text':'','line_number':7991,'multiline':False]['text':' The NFA engine can write four log files:','line_number':7992,'multiline':False]['text':' - Error log: Contains NFA engine's fatal errors.','line_number':7993,'multiline':False]['text':' - Dump log: Contains compiled NFA state machine's information.','line_number':7994,'multiline':False]['text':' - Run log: Contains information of matching procedure.','line_number':7995,'multiline':False]['text':' - Debug log: Contains detailed information of matching procedure. Can be','line_number':7996,'multiline':False]['text':'   disabled by undefining NFA_REGEXP_DEBUG_LOG.','line_number':7997,'multiline':False]['text':' The first one can also be used without debug mode.','line_number':7998,'multiline':False]['text':' The last three are enabled when compiled as debug mode and individually','line_number':7999,'multiline':False]['text':' disabled by commenting them out.','line_number':8000,'multiline':False]['text':' The log files can get quite big!','line_number':8001,'multiline':False]['text':' To disable all of this when compiling Vim for debugging, undefine REGEXP_DEBUG in','line_number':8002,'multiline':False]['text':' regexp.c','line_number':8003,'multiline':False]['text':' Added to NFA_ANY - NFA_NUPPER_IC to include a NL.','line_number':8011,'multiline':False]['text':' matches 0-length','line_number':8017,'multiline':False]['text':' [abc] start','line_number':8019,'multiline':False]['text':' [abc] end','line_number':8020,'multiline':False]['text':' [^abc] start','line_number':8021,'multiline':False]['text':' [^abc] end (postfix only)','line_number':8022,'multiline':False]['text':' range of the two previous items','line_number':8023,'multiline':False]['text':' (postfix only)','line_number':8024,'multiline':False]['text':' low end of a range','line_number':8025,'multiline':False]['text':' high end of a range','line_number':8026,'multiline':False]['text':' concatenate two previous items (postfix','line_number':8028,'multiline':False]['text':' only)','line_number':8029,'multiline':False]['text':' \| (postfix only)','line_number':8030,'multiline':False]['text':' greedy * (postfix only)','line_number':8031,'multiline':False]['text':' non-greedy * (postfix only)','line_number':8032,'multiline':False]['text':' greedy \? (postfix only)','line_number':8033,'multiline':False]['text':' non-greedy \? (postfix only)','line_number':8034,'multiline':False]['text':' ^    Begin line','line_number':8036,'multiline':False]['text':' $    End line','line_number':8037,'multiline':False]['text':' \<   Begin word','line_number':8038,'multiline':False]['text':' \>   End word','line_number':8039,'multiline':False]['text':' \%^  Begin file','line_number':8040,'multiline':False]['text':' \%$  End file','line_number':8041,'multiline':False]['text':' Used for \zs','line_number':8043,'multiline':False]['text':' Used for \ze','line_number':8044,'multiline':False]['text':' Start of subexpression marked with \%(','line_number':8045,'multiline':False]['text':' End of subexpr. marked with \%( ... \)','line_number':8046,'multiline':False]['text':' Next nodes in NFA are part of the','line_number':8059,'multiline':False]['text':' composing multibyte char','line_number':8060,'multiline':False]['text':' End of a composing char in the NFA','line_number':8061,'multiline':False]['text':' \%C: Any composing characters.','line_number':8062,'multiline':False]['text':' \%[abc]','line_number':8063,'multiline':False]['text':' The following are used only in the postfix form, not in the NFA','line_number':8065,'multiline':False]['text':' Used for \@=','line_number':8066,'multiline':False]['text':' Used for \@!','line_number':8067,'multiline':False]['text':' Used for \@<=','line_number':8068,'multiline':False]['text':' Used for \@<!','line_number':8069,'multiline':False]['text':' Used for \@>','line_number':8070,'multiline':False]['text':' \1','line_number':8072,'multiline':False]['text':' \2','line_number':8073,'multiline':False]['text':' \3','line_number':8074,'multiline':False]['text':' \4','line_number':8075,'multiline':False]['text':' \5','line_number':8076,'multiline':False]['text':' \6','line_number':8077,'multiline':False]['text':' \7','line_number':8078,'multiline':False]['text':' \8','line_number':8079,'multiline':False]['text':' \9','line_number':8080,'multiline':False]['text':' \z1','line_number':8081,'multiline':False]['text':' \z2','line_number':8082,'multiline':False]['text':' \z3','line_number':8083,'multiline':False]['text':' \z4','line_number':8084,'multiline':False]['text':' \z5','line_number':8085,'multiline':False]['text':' \z6','line_number':8086,'multiline':False]['text':' \z7','line_number':8087,'multiline':False]['text':' \z8','line_number':8088,'multiline':False]['text':' \z9','line_number':8089,'multiline':False]['text':' Skip characters','line_number':8090,'multiline':False]['text':' NFA_FIRST_NL','line_number':8136,'multiline':False]['text':'      Match any one character.','line_number':8137,'multiline':False]['text':'      Match identifier char','line_number':8138,'multiline':False]['text':'      Match identifier char but no digit','line_number':8139,'multiline':False]['text':'      Match keyword char','line_number':8140,'multiline':False]['text':'      Match word char but no digit','line_number':8141,'multiline':False]['text':'      Match file name char','line_number':8142,'multiline':False]['text':'      Match file name char but no digit','line_number':8143,'multiline':False]['text':'      Match printable char','line_number':8144,'multiline':False]['text':'      Match printable char but no digit','line_number':8145,'multiline':False]['text':'      Match whitespace char','line_number':8146,'multiline':False]['text':'      Match non-whitespace char','line_number':8147,'multiline':False]['text':'      Match digit char','line_number':8148,'multiline':False]['text':'      Match non-digit char','line_number':8149,'multiline':False]['text':'      Match hex char','line_number':8150,'multiline':False]['text':'      Match non-hex char','line_number':8151,'multiline':False]['text':'      Match octal char','line_number':8152,'multiline':False]['text':'      Match non-octal char','line_number':8153,'multiline':False]['text':'      Match word char','line_number':8154,'multiline':False]['text':'      Match non-word char','line_number':8155,'multiline':False]['text':'      Match head char','line_number':8156,'multiline':False]['text':'      Match non-head char','line_number':8157,'multiline':False]['text':'      Match alpha char','line_number':8158,'multiline':False]['text':'      Match non-alpha char','line_number':8159,'multiline':False]['text':'      Match lowercase char','line_number':8160,'multiline':False]['text':'      Match non-lowercase char','line_number':8161,'multiline':False]['text':'      Match uppercase char','line_number':8162,'multiline':False]['text':'      Match non-uppercase char','line_number':8163,'multiline':False]['text':'      Match [a-z]','line_number':8164,'multiline':False]['text':'      Match [^a-z]','line_number':8165,'multiline':False]['text':'      Match [A-Z]','line_number':8166,'multiline':False]['text':'      Match [^A-Z]','line_number':8167,'multiline':False]['text':'      Match cursor pos','line_number':8172,'multiline':False]['text':'      Match line number','line_number':8173,'multiline':False]['text':'      Match > line number','line_number':8174,'multiline':False]['text':'      Match < line number','line_number':8175,'multiline':False]['text':'      Match cursor column','line_number':8176,'multiline':False]['text':'      Match > cursor column','line_number':8177,'multiline':False]['text':'      Match < cursor column','line_number':8178,'multiline':False]['text':'      Match cursor virtual column','line_number':8179,'multiline':False]['text':'      Match > cursor virtual column','line_number':8180,'multiline':False]['text':'      Match < cursor virtual column','line_number':8181,'multiline':False]['text':'      Match mark','line_number':8182,'multiline':False]['text':'      Match > mark','line_number':8183,'multiline':False]['text':'      Match < mark','line_number':8184,'multiline':False]['text':'      Match Visual area','line_number':8185,'multiline':False]['text':' Character classes [:alnum:] etc','line_number':8187,'multiline':False]['text':' Keep in sync with classchars.','line_number':8209,'multiline':False]['text':' Variables only used in nfa_regcomp() and descendants.','line_number':8225,'multiline':False]['text':'/< re_flags passed to nfa_regcomp().','line_number':8226,'multiline':False]['text':'/< holds the postfix form of r.e.','line_number':8227,'multiline':False]['text':' Set when the pattern should use the NFA engine.','line_number':8231,'multiline':False]['text':' E.g. [[:upper:]] only allows 8bit characters for BT engine,','line_number':8232,'multiline':False]['text':' while NFA engine handles multibyte characters correctly.','line_number':8233,'multiline':False]['text':'/< Number of states in the NFA. Also used when executing.','line_number':8236,'multiline':False]['text':'/< Index in the state vector, used in alloc_state()','line_number':8237,'multiline':False]['text':' If not NULL match must end at this position','line_number':8239,'multiline':False]['text':' 0 for first call to nfa_regmatch(), 1 for recursive call.','line_number':8242,'multiline':False]['text':' Helper functions used when doing re2post() ... regatom() parsing','line_number':8245,'multiline':False]['text':'/ Initialize internal variables before NFA compilation.','line_number':8254,'multiline':False]['text':'/','line_number':8255,'multiline':False]['text':'/ @param re_flags  @see vim_regcomp()','line_number':8256,'multiline':False]['text':' A reasonable estimation for maximum size','line_number':8264,'multiline':False]['text':' Some items blow up in size, such as [A-z].  Add more space for that.','line_number':8267,'multiline':False]['text':' When it is still not enough realloc_post_list() will be used.','line_number':8268,'multiline':False]['text':' Size for postfix representation of expr.','line_number':8271,'multiline':False]['text':' shared with BT engine','line_number':8281,'multiline':False]['text':' Figure out if the NFA state list starts with an anchor, must match at start','line_number':8285,'multiline':False]['text':' of the line.','line_number':8286,'multiline':False]['text':' yes!','line_number':8299,'multiline':False]['text':' noooo','line_number':8335,'multiline':False]['text':' Figure out if the NFA state list starts with a character which must match','line_number':8341,'multiline':False]['text':' at start of the match.','line_number':8342,'multiline':False]['text':' all kinds of zero-width matches','line_number':8353,'multiline':False]['text':' yes!','line_number':8404,'multiline':False]['text':' yes!','line_number':8411,'multiline':False]['text':' Figure out if the NFA state list contains just literal text and nothing','line_number':8419,'multiline':False]['text':' else.  If so return a string in allocated memory with what must match after','line_number':8420,'multiline':False]['text':' regstart.  Otherwise return NULL.','line_number':8421,'multiline':False]['text':' just in case','line_number':8430,'multiline':False]['text':' skip first char, it goes into regstart','line_number':8442,'multiline':False]['text':' Allocate more space for post_start.  Called when','line_number':8453,'multiline':False]['text':' running above the estimated number of states.','line_number':8454,'multiline':False]['text':' For weird patterns the number of states can be very high. Increasing by','line_number':8457,'multiline':False]['text':' 50% seems a reasonable compromise between memory use and speed.','line_number':8458,'multiline':False]['text':' Search between "start" and "end" and try to recognize a','line_number':8466,'multiline':False]['text':' character class in expanded form. For example [0-9].','line_number':8467,'multiline':False]['text':' On success, return the id the character class to be emitted.','line_number':8468,'multiline':False]['text':' On failure, return 0 (=FAIL)','line_number':8469,'multiline':False]['text':' Start points to the first char of the range, while end should point','line_number':8470,'multiline':False]['text':' to the closing brace.','line_number':8471,'multiline':False]['text':' Keep in mind that 'ignorecase' applies at execution time, thus [a-z] may','line_number':8472,'multiline':False]['text':' need to be interpreted as [a-zA-Z].','line_number':8473,'multiline':False]['text':' while (p < end)','line_number':8545,'multiline':False]['text':' Produce the bytes for equivalence class "c".','line_number':8592,'multiline':False]['text':' Currently only handles latin1, latin9 and utf-8.','line_number':8593,'multiline':False]['text':' Emits bytes in postfix notation: 'a,b,NFA_OR,c,NFA_OR' is','line_number':8594,'multiline':False]['text':' equivalent to 'a OR b OR c'','line_number':8595,'multiline':False]['text':'','line_number':8596,'multiline':False]['text':' NOTE! When changing this function, also update reg_equi_class()','line_number':8597,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8690,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8691,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8692,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8771,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8772,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8840,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8841,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8950,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8951,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':8952,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9067,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9068,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9171,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9172,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9173,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9260,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9261,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9336,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9337,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9453,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9454,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9455,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9584,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9585,'multiline':False]['text':' NOLINT(whitespace/cast)','line_number':9638,'multiline':False]['text':' default: character itself','line_number':9660,'multiline':False]['text':' Code to parse regular expression.','line_number':9668,'multiline':False]['text':'','line_number':9669,'multiline':False]['text':' We try to reuse parsing functions in regexp.c to','line_number':9670,'multiline':False]['text':' minimize surprise and keep the syntax consistent.','line_number':9671,'multiline':False]['text':' Parse the lowest level.','line_number':9673,'multiline':False]['text':'','line_number':9674,'multiline':False]['text':' An atom can be one of a long list of items.  Many atoms match one character','line_number':9675,'multiline':False]['text':' in the text.  It is often an ordinary character or a character class.','line_number':9676,'multiline':False]['text':' Braces can be used to make a pattern into an atom.  The "\z(\)" construct','line_number':9677,'multiline':False]['text':' is only for syntax highlighting.','line_number':9678,'multiline':False]['text':'','line_number':9679,'multiline':False]['text':' atom    ::=     ordinary-atom','line_number':9680,'multiline':False]['text':'     or  \( pattern \)','line_number':9681,'multiline':False]['text':'     or  \%( pattern \)','line_number':9682,'multiline':False]['text':'     or  \z( pattern \)','line_number':9683,'multiline':False]['text':' "\_^" is start-of-line','line_number':9728,'multiline':False]['text':' "\_$" is end-of-line','line_number':9732,'multiline':False]['text':' "\_[" is collection plus newline','line_number':9740,'multiline':False]['text':' "\_x" is character class plus newline','line_number':9745,'multiline':False]['text':' Character classes.','line_number':9748,'multiline':False]['text':' When '.' is followed by a composing char ignore the dot, so that','line_number':9786,'multiline':False]['text':' the composing char is matched here.','line_number':9787,'multiline':False]['text':' In a string "\n" matches a newline character.','line_number':9803,'multiline':False]['text':' In buffer text "\n" matches the end of a line.','line_number':9806,'multiline':False]['text':' cascaded error','line_number':9814,'multiline':False]['text':' these should follow an atom, not form an atom','line_number':9830,'multiline':False]['text':' Previous substitute pattern.','line_number':9837,'multiline':False]['text':' Generated as "\%(pattern\)".','line_number':9838,'multiline':False]['text':' \z1...\z9','line_number':9897,'multiline':False]['text':' No need to set rex.nfa_has_backref, the sub-matches don't','line_number':9902,'multiline':False]['text':' change when \z1 .. \z9 matches or not.','line_number':9903,'multiline':False]['text':' \z(','line_number':9907,'multiline':False]['text':' cascaded error','line_number':9912,'multiline':False]['text':' () without a back reference','line_number':9926,'multiline':False]['text':' %d123 decimal','line_number':9934,'multiline':False]['text':' %o123 octal','line_number':9935,'multiline':False]['text':' %xab hex 2','line_number':9936,'multiline':False]['text':' %uabcd hex 4','line_number':9937,'multiline':False]['text':' %U1234abcd hex 8','line_number':9938,'multiline':False]['text':' A NUL is stored in the text as NL','line_number':9961,'multiline':False]['text':' TODO(vim): what if a composing character follows?','line_number':9962,'multiline':False]['text':' Catch \%^ and \%$ regardless of where they appear in the','line_number':9967,'multiline':False]['text':' pattern -- regardless of whether or not it makes sense.','line_number':9968,'multiline':False]['text':' misplaced \%#=1','line_number':9980,'multiline':False]['text':' \%[abc]','line_number':9998,'multiline':False]['text':' recursive call!','line_number':10004,'multiline':False]['text':' get the ]','line_number':10009,'multiline':False]['text':' Emit as "\%(\%[abc]\)" to be able to handle','line_number':10016,'multiline':False]['text':' "\%[abc]*" which would cause the empty string to be','line_number':10017,'multiline':False]['text':' matched an unlimited number of times. NFA_NOPEN is','line_number':10018,'multiline':False]['text':' added only once at a position, while NFA_SPLIT is','line_number':10019,'multiline':False]['text':' added multiple times.  This is more efficient than','line_number':10020,'multiline':False]['text':' not allowing NFA_SPLIT multiple times, it is used','line_number':10021,'multiline':False]['text':' a lot.','line_number':10022,'multiline':False]['text':' overflow.','line_number':10046,'multiline':False]['text':' \%{n}l  \%{n}<l  \%{n}>l','line_number':10065,'multiline':False]['text':' \%{n}c  \%{n}<c  \%{n}>c','line_number':10076,'multiline':False]['text':' \%{n}v  \%{n}<v  \%{n}>v','line_number':10085,'multiline':False]['text':' \%'m  \%<'m  \%>'m','line_number':10097,'multiline':False]['text':' [abc]  uses NFA_START_COLL - NFA_END_COLL','line_number':10112,'multiline':False]['text':' [^abc] uses NFA_START_NEG_COLL - NFA_END_NEG_COLL','line_number':10113,'multiline':False]['text':' Each character is produced as a regular state, using','line_number':10114,'multiline':False]['text':' NFA_CONCAT to bind them together.','line_number':10115,'multiline':False]['text':' Besides normal characters there can be:','line_number':10116,'multiline':False]['text':' - character classes  NFA_CLASS_*','line_number':10117,'multiline':False]['text':' - ranges, two characters followed by NFA_RANGE.','line_number':10118,'multiline':False]['text':' Try to reverse engineer character classes. For example,','line_number':10123,'multiline':False]['text':' recognize that [0-9] stands for \d and [A-Za-z_] for \h,','line_number':10124,'multiline':False]['text':' and perform the necessary substitutions in the NFA.','line_number':10125,'multiline':False]['text':' Failed to recognize a character class. Use the simple','line_number':10139,'multiline':False]['text':' version that turns [abc] into 'a' OR 'b' OR 'c'','line_number':10140,'multiline':False]['text':' negated range','line_number':10142,'multiline':False]['text':' Emit the OR branches for each character in the []','line_number':10155,'multiline':False]['text':' Check for [: :], [= =], [. .]','line_number':10162,'multiline':False]['text':' Character class like [:alpha:]','line_number':10172,'multiline':False]['text':' Try equivalence class [=a=] and the like','line_number':10238,'multiline':False]['text':' Try collating class like [. .]','line_number':10243,'multiline':False]['text':' allow [.a.]-x as a range','line_number':10245,'multiline':False]['text':' Will emit the proper atom at the end of the','line_number':10246,'multiline':False]['text':' while loop.','line_number':10247,'multiline':False]['text':' Try a range like 'a-x' or '\t-z'. Also allows '-' as a','line_number':10250,'multiline':False]['text':' start character.','line_number':10251,'multiline':False]['text':' reading the end of the range','line_number':10256,'multiline':False]['text':' Now handle simple and escaped characters.','line_number':10259,'multiline':False]['text':' Only "\]", "\^", "\]" and "\\" are special in Vi.  Vim','line_number':10260,'multiline':False]['text':' accepts "\t", "\e", etc., but only when the 'l' flag in','line_number':10261,'multiline':False]['text':' 'cpoptions' is not included.','line_number':10262,'multiline':False]['text':' TODO(RE): This needs more testing','line_number':10279,'multiline':False]['text':' \r,\t,\e,\b','line_number':10284,'multiline':False]['text':' Normal printable char','line_number':10289,'multiline':False]['text':' Previous char was '-', so this char is end of range.','line_number':10294,'multiline':False]['text':' Emit a range instead of the sequence of','line_number':10303,'multiline':False]['text':' individual characters.','line_number':10304,'multiline':False]['text':' \x00 is translated to \x0a, start at \x01.','line_number':10306,'multiline':False]['text':' remove NFA_CONCAT','line_number':10309,'multiline':False]['text':' Emit the characters in the range.','line_number':10316,'multiline':False]['text':' "startc" was already emitted, so skip it.','line_number':10317,'multiline':False]['text':' Emit the range. "startc" was already emitted, so','line_number':10323,'multiline':False]['text':' skip it.','line_number':10324,'multiline':False]['text':' This char (startc) is not part of a range. Just','line_number':10333,'multiline':False]['text':' emit it.','line_number':10334,'multiline':False]['text':' Normally, simply emit startc. But if we get char','line_number':10335,'multiline':False]['text':' code=0 from a collating char, then replace it with','line_number':10336,'multiline':False]['text':' 0x0a.','line_number':10337,'multiline':False]['text':' This is needed to completely mimic the behaviour of','line_number':10338,'multiline':False]['text':' the backtracking engine.','line_number':10339,'multiline':False]['text':' Line break can't be matched as part of the','line_number':10341,'multiline':False]['text':' collection, add an OR below. But not for negated','line_number':10342,'multiline':False]['text':' range.','line_number':10343,'multiline':False]['text':' while (p < endp)','line_number':10358,'multiline':False]['text':' if last, '-' is just a char','line_number':10361,'multiline':False]['text':' skip the trailing ]','line_number':10366,'multiline':False]['text':' Mark end of the collection.','line_number':10370,'multiline':False]['text':' \_[] also matches \n but it's not negated','line_number':10377,'multiline':False]['text':' if exists closing ]','line_number':10384,'multiline':False]['text':' plen is length of current char with composing chars','line_number':10395,'multiline':False]['text':' A base character plus composing characters, or just one','line_number':10400,'multiline':False]['text':' or more composing characters.','line_number':10401,'multiline':False]['text':' This requires creating a separate atom as if enclosing','line_number':10402,'multiline':False]['text':' the characters in (), where NFA_COMPOSING is the ( and','line_number':10403,'multiline':False]['text':' NFA_END_COMPOSING is the ). Note that right now we are','line_number':10404,'multiline':False]['text':' building the postfix form, not the NFA itself;','line_number':10405,'multiline':False]['text':' a composing char could be: a, b, c, NFA_COMPOSING','line_number':10406,'multiline':False]['text':' where 'b' and 'c' are chars with codes > 256. */','line_number':10407,'multiline':False]['text':' Parse something followed by possible [*+=].','line_number':10431,'multiline':False]['text':'','line_number':10432,'multiline':False]['text':' A piece is an atom, possibly followed by a multi, an indication of how many','line_number':10433,'multiline':False]['text':' times the atom can be matched.  Example: "a*" matches any sequence of "a"','line_number':10434,'multiline':False]['text':' characters: "", "a", "aa", etc.','line_number':10435,'multiline':False]['text':'','line_number':10436,'multiline':False]['text':' piece   ::=      atom','line_number':10437,'multiline':False]['text':'      or  atom  multi','line_number':10438,'multiline':False]['text':' Braces are prefixed with '-' ?','line_number':10445,'multiline':False]['text':' Save the current parse state, so that we can use it if <atom>{m,n} is','line_number':10453,'multiline':False]['text':' next.','line_number':10454,'multiline':False]['text':' store current pos in the postfix form, for \{m,n} involving 0s','line_number':10457,'multiline':False]['text':' cascaded error','line_number':10462,'multiline':False]['text':' Trick: Normally, (a*)\+ would match the whole input "aaa".  The','line_number':10476,'multiline':False]['text':' first and only submatch would be "aaa". But the backtracking','line_number':10477,'multiline':False]['text':' engine interprets the plus as "try matching one more time", and','line_number':10478,'multiline':False]['text':' a* matches a second time at the end of the input, the empty','line_number':10479,'multiline':False]['text':' string.','line_number':10480,'multiline':False]['text':' The submatch will be the empty string.','line_number':10481,'multiline':False]['text':'','line_number':10482,'multiline':False]['text':' In order to be consistent with the old engine, we replace','line_number':10483,'multiline':False]['text':' <atom>+ with <atom><atom>*','line_number':10484,'multiline':False]['text':' skip the \+','line_number':10492,'multiline':False]['text':' \@=','line_number':10501,'multiline':False]['text':' \@!','line_number':10505,'multiline':False]['text':' \@<=','line_number':10511,'multiline':False]['text':' \@<!','line_number':10514,'multiline':False]['text':' \@>','line_number':10519,'multiline':False]['text':' a{2,5} will expand to 'aaa?a?a?'','line_number':10540,'multiline':False]['text':' a{-1,3} will expand to 'aa??a??', where ?? is the nongreedy','line_number':10541,'multiline':False]['text':' version of '?'','line_number':10542,'multiline':False]['text':' \v(ab){2,3} will expand to '(ab)(ab)(ab)?', where all the','line_number':10543,'multiline':False]['text':' parenthesis have the same id','line_number':10544,'multiline':False]['text':'  <atom>{0,inf}, <atom>{0,} and <atom>{}  are equivalent to','line_number':10556,'multiline':False]['text':'  <atom>*','line_number':10557,'multiline':False]['text':' \{}, \{0,}','line_number':10560,'multiline':False]['text':' \{-}, \{-0,}','line_number':10563,'multiline':False]['text':' Special case: x{0} or x{-0}','line_number':10569,'multiline':False]['text':' Ignore result of previous call to nfa_regatom()','line_number':10571,'multiline':False]['text':' NFA_EMPTY is 0-length and works everywhere','line_number':10573,'multiline':False]['text':' The engine is very inefficient (uses too many states) when the','line_number':10578,'multiline':False]['text':' maximum is much larger than the minimum and when the maximum is','line_number':10579,'multiline':False]['text':' large.  However, when maxval is MAX_LIMIT, it is okay, as this','line_number':10580,'multiline':False]['text':' will emit NFA_STAR.','line_number':10581,'multiline':False]['text':' Bail out if we can use the other engine, but only, when the','line_number':10582,'multiline':False]['text':' pattern does not need the NFA engine like (e.g. [[:upper:]]\{2,\}','line_number':10583,'multiline':False]['text':' does not work with characters > 8 bit with the BT engine)','line_number':10584,'multiline':False]['text':' Ignore previous call to nfa_regatom()','line_number':10592,'multiline':False]['text':' Save parse state after the repeated atom and the \{}','line_number':10594,'multiline':False]['text':' Goto beginning of the repeated atom','line_number':10599,'multiline':False]['text':' after "minval" times, atoms are optional','line_number':10605,'multiline':False]['text':' Go to just after the repeated atom and the \{}','line_number':10625,'multiline':False]['text':' end switch','line_number':10633,'multiline':False]['text':' Can't have a multi follow a multi.','line_number':10636,'multiline':False]['text':' Parse one or more pieces, concatenated.  It matches a match for the','line_number':10643,'multiline':False]['text':' first piece, followed by a match for the second piece, etc.  Example:','line_number':10644,'multiline':False]['text':' "f[0-9]b", first matches "f", then a digit and then "b".','line_number':10645,'multiline':False]['text':'','line_number':10646,'multiline':False]['text':' concat  ::=      piece','line_number':10647,'multiline':False]['text':'      or  piece piece','line_number':10648,'multiline':False]['text':'      or  piece piece piece','line_number':10649,'multiline':False]['text':'      etc.','line_number':10650,'multiline':False]['text':' Parse a branch, one or more concats, separated by "\&".  It matches the','line_number':10714,'multiline':False]['text':' last concat, but only if all the preceding concats also match at the same','line_number':10715,'multiline':False]['text':' position.  Examples:','line_number':10716,'multiline':False]['text':'      "foobeep\&..." matches "foo" in "foobeep".','line_number':10717,'multiline':False]['text':'      ".*Peter\&.*Bob" matches in a line containing both "Peter" and "Bob"','line_number':10718,'multiline':False]['text':'','line_number':10719,'multiline':False]['text':' branch ::=       concat','line_number':10720,'multiline':False]['text':'              or  concat \& concat','line_number':10721,'multiline':False]['text':'              or  concat \& concat \& concat','line_number':10722,'multiline':False]['text':'              etc.','line_number':10723,'multiline':False]['text':' First branch, possibly the only one','line_number':10730,'multiline':False]['text':' Try next concats','line_number':10735,'multiline':False]['text':' if concat is empty do emit a node','line_number':10738,'multiline':False]['text':' if concat is empty do emit a node','line_number':10748,'multiline':False]['text':' if a branch is empty, emit one node for it','line_number':10755,'multiline':False]['text':'/  Parse a pattern, one or more branches, separated by "\|".  It matches','line_number':10763,'multiline':False]['text':'/  anything that matches one of the branches.  Example: "foo\|beep" matches','line_number':10764,'multiline':False]['text':'/  "foo" and matches "beep".  If more than one branch matches, the first one','line_number':10765,'multiline':False]['text':'/  is used.','line_number':10766,'multiline':False]['text':'/','line_number':10767,'multiline':False]['text':'/  pattern ::=     branch','line_number':10768,'multiline':False]['text':'/      or  branch \| branch','line_number':10769,'multiline':False]['text':'/      or  branch \| branch \| branch','line_number':10770,'multiline':False]['text':'/      etc.','line_number':10771,'multiline':False]['text':'/','line_number':10772,'multiline':False]['text':'/ @param paren  REG_NOPAREN, REG_PAREN, REG_NPAREN or REG_ZPAREN','line_number':10773,'multiline':False]['text':' Too many `('','line_number':10779,'multiline':False]['text':' Make a ZOPEN node.','line_number':10784,'multiline':False]['text':' cascaded error','line_number':10792,'multiline':False]['text':' cascaded error','line_number':10797,'multiline':False]['text':' Check for proper termination.','line_number':10802,'multiline':False]['text':' Here we set the flag allowing back references to this set of','line_number':10816,'multiline':False]['text':' parentheses.','line_number':10817,'multiline':False]['text':' have seen the close paren','line_number':10819,'multiline':False]['text':' Print the postfix notation of the current regexp.','line_number':11180,'multiline':False]['text':' Print the NFA starting with a root node "state".','line_number':11210,'multiline':False]['text':' Output indent','line_number':11231,'multiline':False]['text':' NOLINT(runtime/printf)','line_number':11237,'multiline':False]['text':' NOLINT(runtime/printf)','line_number':11240,'multiline':False]['text':' grow indent for state->out','line_number':11257,'multiline':False]['text':' replace last part of indent for state->out1','line_number':11268,'multiline':False]['text':' shrink indent','line_number':11275,'multiline':False]['text':' Print the NFA state machine.','line_number':11280,'multiline':False]['text':' REGEXP_DEBUG','line_number':11304,'multiline':False]['text':' Parse r.e. @expr and convert it into postfix form.','line_number':11306,'multiline':False]['text':' Return the postfix string on success, NULL otherwise.','line_number':11307,'multiline':False]['text':' NB. Some of the code below is inspired by Russ's.','line_number':11317,'multiline':False]['text':' Represents an NFA state plus zero or one or two arrows exiting.','line_number':11319,'multiline':False]['text':' if c == MATCH, no arrows out; matching state.','line_number':11320,'multiline':False]['text':' If c == SPLIT, unlabeled arrows to out and out1 (if != NULL).','line_number':11321,'multiline':False]['text':' If c < 256, labeled arrow with character c to out.','line_number':11322,'multiline':False]['text':' points to nfa_prog->state','line_number':11324,'multiline':False]['text':' Allocate and initialize nfa_state_T.','line_number':11326,'multiline':False]['text':' A partially built NFA without the matching state filled in.','line_number':11349,'multiline':False]['text':' Frag_T.start points at the start state.','line_number':11350,'multiline':False]['text':' Frag_T.out is a list of places that need to be set to the','line_number':11351,'multiline':False]['text':' next state for this fragment.','line_number':11352,'multiline':False]['text':' Initialize a Frag_T struct and return it.','line_number':11354,'multiline':False]['text':' Create singleton list containing just outp.','line_number':11364,'multiline':False]['text':' Patch the list of states at out to point to start.','line_number':11374,'multiline':False]['text':' Join the two lists l1 and l2, returning the combination.','line_number':11385,'multiline':False]['text':' Stack used for transforming postfix form into NFA.','line_number':11398,'multiline':False]['text':' Push an item onto the stack.','line_number':11441,'multiline':False]['text':' Pop an item from the stack.','line_number':11453,'multiline':False]['text':' Estimate the maximum byte length of anything matching "state".','line_number':11466,'multiline':False]['text':' When unknown or unlimited return -1.','line_number':11467,'multiline':False]['text':' detect looping in a NFA_SPLIT','line_number':11474,'multiline':False]['text':' the end, return what we have','line_number':11483,'multiline':False]['text':' two alternatives, use the maximum','line_number':11487,'multiline':False]['text':' Matches some character, including composing chars.','line_number':11498,'multiline':False]['text':' Skip over the characters.','line_number':11501,'multiline':False]['text':' ascii','line_number':11511,'multiline':False]['text':' possibly non-ascii','line_number':11542,'multiline':False]['text':' zero-width, out1 points to the END state','line_number':11550,'multiline':False]['text':' unknown width','line_number':11574,'multiline':False]['text':' zero-width','line_number':11649,'multiline':False]['text':' don't know what this is','line_number':11654,'multiline':False]['text':' normal character','line_number':11657,'multiline':False]['text':' normal way to continue','line_number':11662,'multiline':False]['text':' unrecognized, "cannot happen"','line_number':11666,'multiline':False]['text':' Convert a postfix form into its equivalent NFA.','line_number':11670,'multiline':False]['text':' Return the NFA start state on success, NULL otherwise.','line_number':11671,'multiline':False]['text':' Allocate space for the stack. Max states on the stack: "nstate".','line_number':11701,'multiline':False]['text':' Concatenation.','line_number':11710,'multiline':False]['text':' Pay attention: this operator does not exist in the r.e. itself','line_number':11711,'multiline':False]['text':' (it is implicit, really).  It is added when r.e. is translated','line_number':11712,'multiline':False]['text':' to postfix form in re2post().','line_number':11713,'multiline':False]['text':' nstate += 0;','line_number':11715,'multiline':False]['text':' Alternation','line_number':11725,'multiline':False]['text':' Zero or more, prefer more','line_number':11740,'multiline':False]['text':' Zero or more, prefer zero','line_number':11755,'multiline':False]['text':' one or zero atoms=> greedy match','line_number':11770,'multiline':False]['text':' zero or one atoms => non-greedy match','line_number':11784,'multiline':False]['text':' On the stack is the sequence starting with NFA_START_COLL or','line_number':11799,'multiline':False]['text':' NFA_START_NEG_COLL and all possible characters. Patch it to','line_number':11800,'multiline':False]['text':' add the output to the start.','line_number':11801,'multiline':False]['text':' Before this are two characters, the low and high end of a','line_number':11817,'multiline':False]['text':' range.  Turn them into two states with MIN and MAX.','line_number':11818,'multiline':False]['text':' nstate += 0;','line_number':11820,'multiline':False]['text':' 0-length, used in a repetition with max/min count of 0','line_number':11834,'multiline':False]['text':' \%[abc] implemented as:','line_number':11849,'multiline':False]['text':'    NFA_SPLIT','line_number':11850,'multiline':False]['text':'    +-CHAR(a)','line_number':11851,'multiline':False]['text':'    | +-NFA_SPLIT','line_number':11852,'multiline':False]['text':'    |   +-CHAR(b)','line_number':11853,'multiline':False]['text':'    |   | +-NFA_SPLIT','line_number':11854,'multiline':False]['text':'    |   |   +-CHAR(c)','line_number':11855,'multiline':False]['text':'    |   |   | +-next','line_number':11856,'multiline':False]['text':'    |   |   +- next','line_number':11857,'multiline':False]['text':'    |   +- next','line_number':11858,'multiline':False]['text':'    +- next','line_number':11859,'multiline':False]['text':' get number of characters','line_number':11860,'multiline':False]['text':' avoid compiler warning','line_number':11865,'multiline':False]['text':' stores list with out1's','line_number':11866,'multiline':False]['text':' previous NFA_SPLIT to connect to','line_number':11867,'multiline':False]['text':' get character','line_number':11869,'multiline':False]['text':' NFA_PREV_ATOM_LIKE_PATTERN:','line_number':11916,'multiline':False]['text':' get the count','line_number':11923,'multiline':False]['text':' The \@= operator: match the preceding atom with zero width.','line_number':11925,'multiline':False]['text':' The \@! operator: no match for the preceding atom.','line_number':11926,'multiline':False]['text':' The \@<= operator: match for the preceding atom.','line_number':11927,'multiline':False]['text':' The \@<! operator: no match for the preceding atom.','line_number':11928,'multiline':False]['text':' Surrounds the preceding atom with START_INVISIBLE and','line_number':11929,'multiline':False]['text':' END_INVISIBLE, similarly to MOPEN.','line_number':11930,'multiline':False]['text':' NFA_ZEND -> NFA_END_PATTERN -> NFA_SKIP -> what follows.','line_number':11947,'multiline':False]['text':' See if we can guess the maximum width, it avoids a','line_number':11964,'multiline':False]['text':' lot of pointless tries.','line_number':11965,'multiline':False]['text':' store the count','line_number':11968,'multiline':False]['text':' char with composing char','line_number':11974,'multiline':False]['text':' \( \) Submatch','line_number':11977,'multiline':False]['text':' \z( \) Submatch','line_number':11987,'multiline':False]['text':' \%( \) "Invisible Submatch"','line_number':11997,'multiline':False]['text':' NFA_MOPEN, NFA_MOPEN1 .. NFA_MOPEN9','line_number':12030,'multiline':False]['text':' Allow "NFA_MOPEN" as a valid postfix representation for','line_number':12035,'multiline':False]['text':' the empty regexp "". In this case, the NFA will be','line_number':12036,'multiline':False]['text':' NFA_MOPEN -> NFA_MCLOSE. Note that this also allows','line_number':12037,'multiline':False]['text':' empty groups of parenthesis, and empty mbyte chars','line_number':12038,'multiline':False]['text':' At least one node was emitted before NFA_MOPEN, so','line_number':12053,'multiline':False]['text':' at least one node will be between NFA_MOPEN and NFA_MCLOSE','line_number':12054,'multiline':False]['text':' `('','line_number':12056,'multiline':False]['text':' `)'','line_number':12061,'multiline':False]['text':' COMPOSING->out1 = END_COMPOSING','line_number':12068,'multiline':False]['text':' lnum, col or mark name','line_number':12121,'multiline':False]['text':' Operands','line_number':12139,'multiline':False]['text':' switch(*p)','line_number':12150,'multiline':False]['text':' for(p = postfix; *p; ++p)','line_number':12151,'multiline':False]['text':' Return value when counting size is ignored anyway','line_number':12155,'multiline':False]['text':' the match state','line_number':12171,'multiline':False]['text':' After building the NFA program, inspect it to add optimization hints.','line_number':12191,'multiline':False]['text':' Do it directly when what follows is possibly the end of the','line_number':12205,'multiline':False]['text':' match.','line_number':12206,'multiline':False]['text':' Postpone when the invisible match is expensive or has a','line_number':12213,'multiline':False]['text':' lower chance of failing.','line_number':12214,'multiline':False]['text':' "before" matches are very expensive when','line_number':12217,'multiline':False]['text':' unbounded, always prefer what follows then,','line_number':12218,'multiline':False]['text':' unless what follows will always match.','line_number':12219,'multiline':False]['text':' Otherwise strongly prefer what follows.','line_number':12220,'multiline':False]['text':' normal invisible, first do the one with the','line_number':12227,'multiline':False]['text':' highest failure chance','line_number':12228,'multiline':False]['text':' switch to the _FIRST state','line_number':12233,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':12240,'multiline':False]['text':' NFA execution code.','line_number':12241,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':12242,'multiline':False]['text':' Values for done in nfa_pim_T.','line_number':12244,'multiline':False]['text':' pim not used','line_number':12245,'multiline':False]['text':' pim not done yet','line_number':12246,'multiline':False]['text':' pim executed, matches','line_number':12247,'multiline':False]['text':' pim executed, no match','line_number':12248,'multiline':False]['text':' Used during execution: whether a match has been found.','line_number':12300,'multiline':False]['text':' Copy postponed invisible match info from "from" to "to".','line_number':12306,'multiline':False]['text':' Use 0xff to set lnum to -1','line_number':12321,'multiline':False]['text':' Copy the submatches from "from" to "to".','line_number':12329,'multiline':False]['text':' Copy the match start and end positions.','line_number':12337,'multiline':False]['text':' Like copy_sub() but exclude the main match.','line_number':12348,'multiline':False]['text':' Copy the match start and end positions.','line_number':12358,'multiline':False]['text':' Like copy_sub() but only do the end of the main match if \ze is present.','line_number':12368,'multiline':False]['text':' Return true if "sub1" and "sub2" have the same start positions.','line_number':12387,'multiline':False]['text':' When using back-references also check the end position.','line_number':12388,'multiline':False]['text':'/ @param l      runtime state list','line_number':12511,'multiline':False]['text':'/ @param state  state to update','line_number':12512,'multiline':False]['text':'/ @param subs   pointers to subexpressions','line_number':12513,'multiline':False]['text':'/ @param pim    postponed match or NULL','line_number':12514,'multiline':False]['text':'/','line_number':12515,'multiline':False]['text':'/ @return  true if the same state is already in list "l" with the same','line_number':12516,'multiline':False]['text':'/          positions as "subs".','line_number':12517,'multiline':False]['text':' Return true if "one" and "two" are equal.  That includes when both are not','line_number':12534,'multiline':False]['text':' set.','line_number':12535,'multiline':False]['text':' one is unused: equal when two is also unused','line_number':12542,'multiline':False]['text':' one is used and two is not: not equal','line_number':12546,'multiline':False]['text':' compare the state id','line_number':12549,'multiline':False]['text':' compare the position','line_number':12553,'multiline':False]['text':' Return true if "state" leads to a NFA_MATCH without advancing the input.','line_number':12561,'multiline':False]['text':' avoid too much recursion','line_number':12567,'multiline':False]['text':' skip ahead to next state','line_number':12593,'multiline':False]['text':' state will advance input','line_number':12632,'multiline':False]['text':' state will advance input','line_number':12637,'multiline':False]['text':' Others: zero-width or possibly zero-width, might still find','line_number':12640,'multiline':False]['text':' a match at the same position, keep looking.','line_number':12641,'multiline':False]['text':'/ @param l      runtime state list','line_number':12649,'multiline':False]['text':'/ @param state  state to update','line_number':12650,'multiline':False]['text':'/ @param subs   pointers to subexpressions','line_number':12651,'multiline':False]['text':'/','line_number':12652,'multiline':False]['text':'/ @return  true if "state" is already in list "l".','line_number':12653,'multiline':False]['text':' Offset used for "off" by addstate_here().','line_number':12665,'multiline':False]['text':'/ Add "state" and possibly what follows to state list ".".','line_number':12668,'multiline':False]['text':'/','line_number':12669,'multiline':False]['text':'/ @param l         runtime state list','line_number':12670,'multiline':False]['text':'/ @param state     state to update','line_number':12671,'multiline':False]['text':'/ @param subs_arg  pointers to subexpressions','line_number':12672,'multiline':False]['text':'/ @param pim       postponed look-behind match','line_number':12673,'multiline':False]['text':'/ @param off_arg   byte offset, when -1 go to next line','line_number':12674,'multiline':False]['text':'/','line_number':12675,'multiline':False]['text':'/ @return  "subs_arg", possibly copied into temp_subs.','line_number':12676,'multiline':False]['text':'/          NULL when recursiveness is too deep.','line_number':12677,'multiline':False]['text':' This function is called recursively.  When the depth is too much we run','line_number':12701,'multiline':False]['text':' out of stack and crash, limit recursiveness here.','line_number':12702,'multiline':False]['text':' These nodes are not added themselves but their "out" and/or','line_number':12740,'multiline':False]['text':' "out1" may be added below.','line_number':12741,'multiline':False]['text':' "^" won't match past end-of-line, don't bother trying.','line_number':12746,'multiline':False]['text':' Except when at the end of the line, or when we are going to the','line_number':12747,'multiline':False]['text':' next line for a look-behind match.','line_number':12748,'multiline':False]['text':' These nodes need to be added so that we can bail out when it','line_number':12779,'multiline':False]['text':' was added to this list before at the same position to avoid an','line_number':12780,'multiline':False]['text':' endless loop for "\(\)*"','line_number':12781,'multiline':False]['text':' This state is already in the list, don't add it again,','line_number':12785,'multiline':False]['text':' unless it is an MOPEN that is used for a backreference or','line_number':12786,'multiline':False]['text':' when there is a PIM. For NFA_MATCH check the position,','line_number':12787,'multiline':False]['text':' lower position is preferred.','line_number':12788,'multiline':False]['text':' When called from addstate_here() do insert before','line_number':12791,'multiline':False]['text':' existing states.','line_number':12792,'multiline':False]['text':' Do not add the state again when it exists with the same','line_number':12816,'multiline':False]['text':' positions.','line_number':12817,'multiline':False]['text':' When there are backreferences or PIMs the number of states may','line_number':12823,'multiline':False]['text':' be (a lot) bigger than anticipated.','line_number':12824,'multiline':False]['text':' "subs" may point into the current array, need to make a','line_number':12835,'multiline':False]['text':' copy before it becomes invalid.','line_number':12836,'multiline':False]['text':' add the state to the list','line_number':12849,'multiline':False]['text':' order matters here','line_number':12879,'multiline':False]['text':' avoid compiler warnings','line_number':12922,'multiline':False]['text':' Set the position (with "off" added) in the subexpression.  Save','line_number':12926,'multiline':False]['text':' and restore it when it was in use.  Otherwise fill any gap.','line_number':12927,'multiline':False]['text':' "subs" may have changed, need to set "sub" again.','line_number':12968,'multiline':False]['text':' Do not overwrite the position set by \ze.','line_number':12991,'multiline':False]['text':' We don't fill in gaps here, there must have been an MOPEN that','line_number':13027,'multiline':False]['text':' has done that.','line_number':13028,'multiline':False]['text':' avoid compiler warnings','line_number':13043,'multiline':False]['text':' avoid compiler warnings','line_number':13048,'multiline':False]['text':' "subs" may have changed, need to set "sub" again.','line_number':13056,'multiline':False]['text':'/ Like addstate(), but the new state(s) are put at position "*ip".','line_number':13075,'multiline':False]['text':'/ Used for zero-width matches, next state to use is the added one.','line_number':13076,'multiline':False]['text':'/ This makes sure the order of states to be tried does not change, which','line_number':13077,'multiline':False]['text':'/ matters for alternatives.','line_number':13078,'multiline':False]['text':'/','line_number':13079,'multiline':False]['text':'/ @param l      runtime state list','line_number':13080,'multiline':False]['text':'/ @param state  state to update','line_number':13081,'multiline':False]['text':'/ @param subs   pointers to subexpressions','line_number':13082,'multiline':False]['text':'/ @param pim    postponed look-behind match','line_number':13083,'multiline':False]['text':' First add the state(s) at the end, so that we know how many there are.','line_number':13092,'multiline':False]['text':' Pass the listidx as offset (avoids adding another argument to','line_number':13093,'multiline':False]['text':' addstate()).','line_number':13094,'multiline':False]['text':' when "*ip" was at the end of the list, nothing to do','line_number':13100,'multiline':False]['text':' re-order to put the new state at the current position','line_number':13105,'multiline':False]['text':' no state got added','line_number':13108,'multiline':False]['text':' overwrite the current state','line_number':13111,'multiline':False]['text':' not enough space to move the new states, reallocate the list','line_number':13115,'multiline':False]['text':' and move the states to the right position','line_number':13116,'multiline':False]['text':' make space for new states, then move them from the','line_number':13138,'multiline':False]['text':' end to the current position','line_number':13139,'multiline':False]['text':' Check character class "class" against current character c.','line_number':13154,'multiline':False]['text':' should not be here :P','line_number':13255,'multiline':False]['text':'/ Check for a match with subexpression "subidx".','line_number':13262,'multiline':False]['text':'/','line_number':13263,'multiline':False]['text':'/ @param sub      pointers to subexpressions','line_number':13264,'multiline':False]['text':'/ @param bytelen  out: length of match in bytes','line_number':13265,'multiline':False]['text':'/','line_number':13266,'multiline':False]['text':'/ @return  true if it matches.','line_number':13267,'multiline':False]['text':' backref was not set, match an empty string','line_number':13274,'multiline':False]['text':'/ Check for a match with \z subexpression "subidx".','line_number':13316,'multiline':False]['text':'/','line_number':13317,'multiline':False]['text':'/ @param bytelen  out: length of match in bytes','line_number':13318,'multiline':False]['text':'/','line_number':13319,'multiline':False]['text':'/ @return  true if it matches.','line_number':13320,'multiline':False]['text':' backref was not set, match an empty string','line_number':13327,'multiline':False]['text':' Save list IDs for all NFA states of "prog" into "list".','line_number':13340,'multiline':False]['text':' Also reset the IDs to zero.','line_number':13341,'multiline':False]['text':' Only used for the recursive value lastlist[1].','line_number':13342,'multiline':False]['text':' Order in the list is reverse, it's a bit faster that way.','line_number':13348,'multiline':False]['text':' Restore list IDs from "list" to all NFA states.','line_number':13357,'multiline':False]['text':' Recursively call nfa_regmatch()','line_number':13381,'multiline':False]['text':' "pim" is NULL or contains info about a Postponed Invisible Match (start','line_number':13382,'multiline':False]['text':' position).','line_number':13383,'multiline':False]['text':' start at the position where the postponed match was','line_number':13398,'multiline':False]['text':' The recursive match must end at the current position. When "pim" is','line_number':13410,'multiline':False]['text':' not NULL it specifies the current position.','line_number':13411,'multiline':False]['text':' Go back the specified number of bytes, or as far as the','line_number':13428,'multiline':False]['text':' start of the previous line, to try matching "\@<=" or','line_number':13429,'multiline':False]['text':' not matching "\@<!". This is very inefficient, limit the number of','line_number':13430,'multiline':False]['text':' bytes if possible.','line_number':13431,'multiline':False]['text':' can't go before the first line','line_number':13436,'multiline':False]['text':' Not enough bytes in this line, go to end of','line_number':13443,'multiline':False]['text':' previous line.','line_number':13444,'multiline':False]['text':' can't go before the first line','line_number':13447,'multiline':False]['text':' Have to clear the lastlist field of the NFA nodes, so that','line_number':13469,'multiline':False]['text':' nfa_regmatch() and addstate() can run properly after recursion.','line_number':13470,'multiline':False]['text':' Already calling nfa_regmatch() recursively.  Save the lastlist[1]','line_number':13472,'multiline':False]['text':' values and clear them.','line_number':13473,'multiline':False]['text':' any value of rex.nfa_listid will do','line_number':13481,'multiline':False]['text':' First recursive nfa_regmatch() call, switch to the second lastlist','line_number':13483,'multiline':False]['text':' entry.  Make sure rex.nfa_listid is different from a previous','line_number':13484,'multiline':False]['text':' recursive call, because some states may still have this ID.','line_number':13485,'multiline':False]['text':' Call nfa_regmatch() to check if the current concat matches at this','line_number':13492,'multiline':False]['text':' position. The concat ends with the node NFA_END_INVISIBLE','line_number':13493,'multiline':False]['text':' restore position in input text','line_number':13504,'multiline':False]['text':' Estimate the chance of a match with "state" failing.','line_number':13523,'multiline':False]['text':' empty match: 0','line_number':13524,'multiline':False]['text':' NFA_ANY: 1','line_number':13525,'multiline':False]['text':' specific character: 99','line_number':13526,'multiline':False]['text':' detect looping','line_number':13532,'multiline':False]['text':' avoid recursive stuff','line_number':13540,'multiline':False]['text':' two alternatives, use the lowest failure chance','line_number':13543,'multiline':False]['text':' matches anything, unlikely to fail','line_number':13549,'multiline':False]['text':' empty match works always','line_number':13555,'multiline':False]['text':' recursive regmatch is expensive, use low failure chance','line_number':13567,'multiline':False]['text':' backreferences don't match in many places','line_number':13642,'multiline':False]['text':' before/after positions don't match very often','line_number':13654,'multiline':False]['text':' specific positions rarely match','line_number':13664,'multiline':False]['text':' character match fails often','line_number':13672,'multiline':False]['text':' something else, includes character classes','line_number':13677,'multiline':False]['text':' Skip until the char "c" we know a match must start with.','line_number':13681,'multiline':False]['text':' Check for a match with match_text.','line_number':13692,'multiline':False]['text':' Called after skip_to_start() has found regstart.','line_number':13693,'multiline':False]['text':' Returns zero for no match, 1 for a match.','line_number':13694,'multiline':False]['text':' skip regstart','line_number':13705,'multiline':False]['text':' check that no composing char follows','line_number':13721,'multiline':False]['text':' Try finding regstart after the current match.','line_number':13737,'multiline':False]['text':' skip regstart','line_number':13738,'multiline':False]['text':'/ Main matching routine.','line_number':13761,'multiline':False]['text':'/','line_number':13762,'multiline':False]['text':'/ Run NFA to determine whether it matches rex.input.','line_number':13763,'multiline':False]['text':'/','line_number':13764,'multiline':False]['text':'/ When "nfa_endp" is not NULL it is a required end-of-match position.','line_number':13765,'multiline':False]['text':'/','line_number':13766,'multiline':False]['text':'/ Return true if there is a match, false if there is no match,','line_number':13767,'multiline':False]['text':'/ NFA_TOO_EXPENSIVE if we end up with too many states.','line_number':13768,'multiline':False]['text':'/ When there is a match "submatch" contains the positions.','line_number':13769,'multiline':False]['text':'/','line_number':13770,'multiline':False]['text':'/ Note: Caller must ensure that: start != NULL.','line_number':13771,'multiline':False]['text':' Some patterns may take a long time to match, especially when using','line_number':13791,'multiline':False]['text':' recursive_regmatch(). Allow interrupting them with CTRL-C.','line_number':13792,'multiline':False]['text':' Allocate memory for the lists of nodes.','line_number':13811,'multiline':False]['text':' Inline optimized code for addstate(thislist, start, m, 0) if we know','line_number':13842,'multiline':False]['text':' it's the first MOPEN.','line_number':13843,'multiline':False]['text':' Run for each character.','line_number':13868,'multiline':False]['text':' swap lists','line_number':13877,'multiline':False]['text':' clear nextlist','line_number':13880,'multiline':False]['text':' Too many states, retry with old engine.','line_number':13885,'multiline':False]['text':' If the state lists are empty we can stop.','line_number':13914,'multiline':False]['text':' compute nextlist','line_number':13919,'multiline':False]['text':' If the list gets very long there probably is something wrong.','line_number':13921,'multiline':False]['text':' At least allow interrupting with CTRL-C.','line_number':13922,'multiline':False]['text':' Handle the possible codes of the current state.','line_number':13957,'multiline':False]['text':' The most important is NFA_MATCH.','line_number':13958,'multiline':False]['text':' If the match is not at the start of the line, ends before a','line_number':13964,'multiline':False]['text':' composing characters and rex.reg_icombine is not set, that','line_number':13965,'multiline':False]['text':' is not really a match.','line_number':13966,'multiline':False]['text':' Found the left-most longest match, do not look at any other','line_number':13980,'multiline':False]['text':' states at this position.  When the list of states is going','line_number':13981,'multiline':False]['text':' to be empty quit without advancing, so that "rex.input" is','line_number':13982,'multiline':False]['text':' correct.','line_number':13983,'multiline':False]['text':' This is only encountered after a NFA_START_INVISIBLE or','line_number':13992,'multiline':False]['text':' NFA_START_INVISIBLE_BEFORE node.','line_number':13993,'multiline':False]['text':' They surround a zero-width group, used with "\@=", "\&",','line_number':13994,'multiline':False]['text':' "\@!", "\@<=" and "\@<!".','line_number':13995,'multiline':False]['text':' If we got here, it means that the current "invisible" group','line_number':13996,'multiline':False]['text':' finished successfully, so return control to the parent','line_number':13997,'multiline':False]['text':' nfa_regmatch().  For a look-behind match only when it ends','line_number':13998,'multiline':False]['text':' in the position in "nfa_endp".','line_number':13999,'multiline':False]['text':' Submatches are stored in *m, and used in the parent call.','line_number':14000,'multiline':False]['text':' If "nfa_endp" is set it's only a match if it ends at','line_number':14018,'multiline':False]['text':' "nfa_endp"','line_number':14019,'multiline':False]['text':' do not set submatches for \@!','line_number':14027,'multiline':False]['text':' See comment above at "goto nextchar".','line_number':14039,'multiline':False]['text':' Do it directly if there already is a PIM or when','line_number':14058,'multiline':False]['text':' nfa_postprocess() detected it will work better.','line_number':14059,'multiline':False]['text':' Copy submatch info for the recursive call, opposite','line_number':14067,'multiline':False]['text':' of what happens on success below.','line_number':14068,'multiline':False]['text':' First try matching the invisible match, then what','line_number':14073,'multiline':False]['text':' follows.','line_number':14074,'multiline':False]['text':' for \@! and \@<! it is a match when the result is','line_number':14082,'multiline':False]['text':' false','line_number':14083,'multiline':False]['text':' Copy submatch info from the recursive call','line_number':14090,'multiline':False]['text':' If the pattern has \ze and it matched in the','line_number':14095,'multiline':False]['text':' sub pattern, use it.','line_number':14096,'multiline':False]['text':' t->state->out1 is the corresponding','line_number':14099,'multiline':False]['text':' END_INVISIBLE node; Add its out to the current','line_number':14100,'multiline':False]['text':' list (zero-width match).','line_number':14101,'multiline':False]['text':' First try matching what follows.  Only if a match','line_number':14109,'multiline':False]['text':' is found verify the invisible match matches.  Add a','line_number':14110,'multiline':False]['text':' nfa_pim_T to the following states, it contains info','line_number':14111,'multiline':False]['text':' about the invisible match.','line_number':14112,'multiline':False]['text':' t->state->out1 is the corresponding END_INVISIBLE','line_number':14123,'multiline':False]['text':' node; Add its out to the current list (zero-width','line_number':14124,'multiline':False]['text':' match).','line_number':14125,'multiline':False]['text':' There is no point in trying to match the pattern if the','line_number':14140,'multiline':False]['text':' output state is not going to be added to the list.','line_number':14141,'multiline':False]['text':' Copy submatch info to the recursive call, opposite of what','line_number':14169,'multiline':False]['text':' happens afterwards.','line_number':14170,'multiline':False]['text':' First try matching the pattern.','line_number':14176,'multiline':False]['text':' Copy submatch info from the recursive call','line_number':14190,'multiline':False]['text':' Now we need to skip over the matched text and then','line_number':14195,'multiline':False]['text':' continue with what follows.','line_number':14196,'multiline':False]['text':' TODO(RE): multi-line match','line_number':14198,'multiline':False]['text':' empty match, output of corresponding','line_number':14209,'multiline':False]['text':' NFA_END_PATTERN/NFA_SKIP to be used at current','line_number':14210,'multiline':False]['text':' position','line_number':14211,'multiline':False]['text':' match current character, output of corresponding','line_number':14215,'multiline':False]['text':' NFA_END_PATTERN to be used at next position.','line_number':14216,'multiline':False]['text':' skip over the matched characters, set character','line_number':14220,'multiline':False]['text':' count in NFA_SKIP','line_number':14221,'multiline':False]['text':' Get class of current and previous char (if it exists).','line_number':14252,'multiline':False]['text':' Get class of current and previous char (if it exists).','line_number':14273,'multiline':False]['text':' Only match composing character(s), ignore base','line_number':14314,'multiline':False]['text':' character.  Used for ".{composing}" and "{composing}"','line_number':14315,'multiline':False]['text':' (no preceding character).','line_number':14316,'multiline':False]['text':' If \Z was present, then ignore composing characters.','line_number':14320,'multiline':False]['text':' When ignoring the base character this always matches.','line_number':14321,'multiline':False]['text':' Check base character matches first, unless ignored.','line_number':14331,'multiline':False]['text':' We don't care about the order of composing characters.','line_number':14337,'multiline':False]['text':' Get them into cchars[] first.','line_number':14338,'multiline':False]['text':' Check that each composing char in the pattern matches a','line_number':14348,'multiline':False]['text':' composing char in the text.  We do not check if all','line_number':14349,'multiline':False]['text':' composing chars are matched.','line_number':14350,'multiline':False]['text':' NFA_END_COMPOSING','line_number':14368,'multiline':False]['text':' Pass -1 for the offset, which means taking the position','line_number':14377,'multiline':False]['text':' at the start of the next line.','line_number':14378,'multiline':False]['text':' match \n as if it is an ordinary character','line_number':14382,'multiline':False]['text':' What follows is a list of characters, until NFA_END_COLL.','line_number':14390,'multiline':False]['text':' One of them must match or none of them must match.','line_number':14391,'multiline':False]['text':' Never match EOL. If it's part of the collection it is added','line_number':14396,'multiline':False]['text':' as a separate state with an OR.','line_number':14397,'multiline':False]['text':' advance to NFA_RANGE_MAX','line_number':14411,'multiline':False]['text':' next state is in out of the NFA_END_COLL, out1 of','line_number':14446,'multiline':False]['text':' START points to the END state','line_number':14447,'multiline':False]['text':' Any char except '\0', (end of input) does not match.','line_number':14455,'multiline':False]['text':' On a composing character skip over it.  Otherwise do','line_number':14463,'multiline':False]['text':' nothing.  Always matches.','line_number':14464,'multiline':False]['text':' Character classes like \a for alpha, \d for digit etc.','line_number':14474,'multiline':False]['text':'  \i','line_number':14475,'multiline':False]['text':'  \I','line_number':14480,'multiline':False]['text':'  \k','line_number':14485,'multiline':False]['text':'  \K','line_number':14490,'multiline':False]['text':'  \f','line_number':14496,'multiline':False]['text':'  \F','line_number':14501,'multiline':False]['text':'  \p','line_number':14506,'multiline':False]['text':'  \P','line_number':14511,'multiline':False]['text':'  \s','line_number':14516,'multiline':False]['text':'  \S','line_number':14521,'multiline':False]['text':'  \d','line_number':14526,'multiline':False]['text':'  \D','line_number':14531,'multiline':False]['text':'  \x','line_number':14536,'multiline':False]['text':'  \X','line_number':14541,'multiline':False]['text':'  \o','line_number':14546,'multiline':False]['text':'  \O','line_number':14551,'multiline':False]['text':'  \w','line_number':14556,'multiline':False]['text':'  \W','line_number':14561,'multiline':False]['text':'  \h','line_number':14566,'multiline':False]['text':'  \H','line_number':14571,'multiline':False]['text':'  \a','line_number':14576,'multiline':False]['text':'  \A','line_number':14581,'multiline':False]['text':'  \l','line_number':14586,'multiline':False]['text':'  \L','line_number':14591,'multiline':False]['text':'  \u','line_number':14596,'multiline':False]['text':' \U','line_number':14601,'multiline':False]['text':' [a-z]','line_number':14606,'multiline':False]['text':' [^a-z]','line_number':14611,'multiline':False]['text':' [A-Z]','line_number':14617,'multiline':False]['text':' [^A-Z]','line_number':14622,'multiline':False]['text':' \1 .. \9  \z1 .. \z9','line_number':14646,'multiline':False]['text':' empty match always works, output of NFA_SKIP to be','line_number':14661,'multiline':False]['text':' used next','line_number':14662,'multiline':False]['text':' match current character, jump ahead to out of','line_number':14666,'multiline':False]['text':' NFA_SKIP','line_number':14667,'multiline':False]['text':' skip over the matched characters, set character','line_number':14671,'multiline':False]['text':' count in NFA_SKIP','line_number':14672,'multiline':False]['text':' character of previous matching \1 .. \9  or \@>','line_number':14681,'multiline':False]['text':' end of match, go to what follows','line_number':14683,'multiline':False]['text':' add state again with decremented count','line_number':14687,'multiline':False]['text':' Bail out quickly when there can't be a match, avoid the overhead of','line_number':14734,'multiline':False]['text':' win_linetabsize() on long lines.','line_number':14735,'multiline':False]['text':' Guess that a character won't use more columns than 'tabstop',','line_number':14745,'multiline':False]['text':' with a minimum of 4.','line_number':14746,'multiline':False]['text':' Line may have been freed, get it again.','line_number':14770,'multiline':False]['text':' Compare the mark position to the match position, if the mark','line_number':14776,'multiline':False]['text':' exists and mark is set in reg_buf.','line_number':14777,'multiline':False]['text':' These states are only added to be able to bail out when','line_number':14841,'multiline':False]['text':' they are added again, nothing is to be done.','line_number':14842,'multiline':False]['text':' regular character','line_number':14845,'multiline':False]['text':' If rex.reg_icombine is not set only skip over the character','line_number':14860,'multiline':False]['text':' itself.  When it is set skip over composing characters.','line_number':14861,'multiline':False]['text':' switch (t->state->c)','line_number':14869,'multiline':False]['text':' Handle the postponed invisible match if the match might end','line_number':14881,'multiline':False]['text':' without advancing and before the end of the line.','line_number':14882,'multiline':False]['text':' for \@! and \@<! it is a match when the result is','line_number':14894,'multiline':False]['text':' false','line_number':14895,'multiline':False]['text':' Copy submatch info from the recursive call','line_number':14902,'multiline':False]['text':' for \@! and \@<! it is a match when result is false','line_number':14920,'multiline':False]['text':' Copy submatch info from the recursive call','line_number':14927,'multiline':False]['text':' look-behind match failed, don't add the state','line_number':14933,'multiline':False]['text':' Postponed invisible match was handled, don't add it to','line_number':14937,'multiline':False]['text':' following states.','line_number':14938,'multiline':False]['text':' If "pim" points into l->t it will become invalid when','line_number':14942,'multiline':False]['text':' adding the state causes the list to be reallocated.  Make a','line_number':14943,'multiline':False]['text':' local copy to avoid that.','line_number':14944,'multiline':False]['text':' for (thislist = thislist; thislist->state; thislist++)','line_number':14963,'multiline':False]['text':' Look for the start of a match in the current position by adding the','line_number':14965,'multiline':False]['text':' start state to the list of states.','line_number':14966,'multiline':False]['text':' The first found match is the leftmost one, thus the order of states','line_number':14967,'multiline':False]['text':' matters!','line_number':14968,'multiline':False]['text':' Do not add the start state in recursive calls of nfa_regmatch(),','line_number':14969,'multiline':False]['text':' because recursive calls should only start in the first position.','line_number':14970,'multiline':False]['text':' Unless "nfa_endp" is not NULL, then we match the end position.','line_number':14971,'multiline':False]['text':' Also don't start a match past the first line.','line_number':14972,'multiline':False]['text':' Inline optimized code for addstate() if we know the state is','line_number':14989,'multiline':False]['text':' the first MOPEN.','line_number':14990,'multiline':False]['text':' Nextlist is empty, we can skip ahead to the','line_number':14998,'multiline':False]['text':' character that must appear at the start.','line_number':14999,'multiline':False]['text':' Checking if the required start character matches is','line_number':15009,'multiline':False]['text':' cheaper than adding a state that won't match.','line_number':15010,'multiline':False]['text':' Advance to the next character, or advance to the next line, or','line_number':15059,'multiline':False]['text':' finish.','line_number':15060,'multiline':False]['text':' Allow interrupting with CTRL-C.','line_number':15070,'multiline':False]['text':' Check for timeout once every twenty times to avoid overhead.','line_number':15075,'multiline':False]['text':' Free memory','line_number':15092,'multiline':False]['text':'/ Try match of "prog" with at rex.line["col"].','line_number':15104,'multiline':False]['text':'/','line_number':15105,'multiline':False]['text':'/ @param tm         timeout limit or NULL','line_number':15106,'multiline':False]['text':'/ @param timed_out  flag set on timeout or NULL','line_number':15107,'multiline':False]['text':'/','line_number':15108,'multiline':False]['text':'/ @return  <= 0 for failure, number of lines contained in the match otherwise.','line_number':15109,'multiline':False]['text':' pattern has a \ze but it didn't match, use current end','line_number':15172,'multiline':False]['text':' Use line number of "\ze".','line_number':15176,'multiline':False]['text':' Package any found \z(...\) matches for export. Default is none.','line_number':15193,'multiline':False]['text':' Loop over \z1, \z2, etc.  There is no \z0.','line_number':15200,'multiline':False]['text':' Only accept single line matches that are valid.','line_number':15205,'multiline':False]['text':'/ Match a regexp against a string ("line" points to the string) or multiple','line_number':15227,'multiline':False]['text':'/ lines (if "line" is NULL, use reg_getline()).','line_number':15228,'multiline':False]['text':'/','line_number':15229,'multiline':False]['text':'/ @param line String in which to search or NULL','line_number':15230,'multiline':False]['text':'/ @param startcol Column to start looking for match','line_number':15231,'multiline':False]['text':'/ @param tm Timeout limit or NULL','line_number':15232,'multiline':False]['text':'/ @param timed_out Flag set on timeout or NULL','line_number':15233,'multiline':False]['text':'/','line_number':15234,'multiline':False]['text':'/ @return <= 0 if there is no match and number of lines contained in the','line_number':15235,'multiline':False]['text':'/ match otherwise.','line_number':15236,'multiline':False]['text':' relative to the cursor','line_number':15245,'multiline':False]['text':' Be paranoid...','line_number':15254,'multiline':False]['text':' If pattern contains "\c" or "\C": overrule value of rex.reg_ic','line_number':15260,'multiline':False]['text':' If pattern contains "\Z" overrule value of rex.reg_icombine','line_number':15267,'multiline':False]['text':' relative to line','line_number':15273,'multiline':False]['text':' Clear the external match subpointers if necessary.','line_number':15289,'multiline':False]['text':' Skip ahead until a character we know the match must start with.','line_number':15299,'multiline':False]['text':' When there is none there is no match.','line_number':15300,'multiline':False]['text':' If match_text is set it contains the full text that must match.','line_number':15305,'multiline':False]['text':' Nothing else to try. Doesn't handle combining chars well.','line_number':15306,'multiline':False]['text':' If the start column is past the maximum column: no need to try.','line_number':15318,'multiline':False]['text':' Set the "nstate" used by nfa_regcomp() to zero to trigger an error when','line_number':15323,'multiline':False]['text':' it's accidentally used during execution.','line_number':15324,'multiline':False]['text':' Make sure the end is never before the start.  Can happen when \zs and','line_number':15340,'multiline':False]['text':' \ze are used.','line_number':15341,'multiline':False]['text':' startpos[0] may be set by "\zs", also return the column where','line_number':15355,'multiline':False]['text':' the whole pattern matched.','line_number':15356,'multiline':False]['text':' Compile a regular expression into internal code for the NFA matcher.','line_number':15364,'multiline':False]['text':' Returns the program in allocated space.  Returns NULL for an error.','line_number':15365,'multiline':False]['text':' Build postfix form of the regexp. Needed to build the NFA','line_number':15384,'multiline':False]['text':' (and count its size).','line_number':15385,'multiline':False]['text':' Cascaded (syntax?) error','line_number':15388,'multiline':False]['text':' In order to build the NFA, we parse the input regexp twice:','line_number':15391,'multiline':False]['text':' 1. first pass to count size (so we can allocate space)','line_number':15392,'multiline':False]['text':' 2. second to emit code','line_number':15393,'multiline':False]['text':' PASS 1','line_number':15408,'multiline':False]['text':' Count number of NFA states in "nstate". Do not build the NFA.','line_number':15409,'multiline':False]['text':' allocate the regprog with space for the compiled regexp','line_number':15412,'multiline':False]['text':' PASS 2','line_number':15418,'multiline':False]['text':' Build the NFA','line_number':15419,'multiline':False]['text':' Remember whether this pattern has any \z specials in it.','line_number':15441,'multiline':False]['text':' Free a compiled regexp program, returned by nfa_regcomp().','line_number':15463,'multiline':False]['text':'/ Match a regexp against a string.','line_number':15475,'multiline':False]['text':'/ "rmp->regprog" is a compiled regexp as returned by nfa_regcomp().','line_number':15476,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':15477,'multiline':False]['text':'/ If "line_lbr" is true, consider a "\n" in "line" to be a line break.','line_number':15478,'multiline':False]['text':'/','line_number':15479,'multiline':False]['text':'/ @param line  string to match against','line_number':15480,'multiline':False]['text':'/ @param col   column to start looking for match','line_number':15481,'multiline':False]['text':'/','line_number':15482,'multiline':False]['text':'/ @return  <= 0 for failure, number of lines contained in the match otherwise.','line_number':15483,'multiline':False]['text':'/ Matches a regexp against multiple lines.','line_number':15499,'multiline':False]['text':'/ "rmp->regprog" is a compiled regexp as returned by vim_regcomp().','line_number':15500,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':15501,'multiline':False]['text':'/','line_number':15502,'multiline':False]['text':'/ @param win Window in which to search or NULL','line_number':15503,'multiline':False]['text':'/ @param buf Buffer in which to search','line_number':15504,'multiline':False]['text':'/ @param lnum Number of line to start looking for match','line_number':15505,'multiline':False]['text':'/ @param col Column to start looking for match','line_number':15506,'multiline':False]['text':'/ @param tm Timeout limit or NULL','line_number':15507,'multiline':False]['text':'/ @param timed_out Flag set on timeout or NULL','line_number':15508,'multiline':False]['text':'/','line_number':15509,'multiline':False]['text':'/ @return <= 0 if there is no match and number of lines contained in the match','line_number':15510,'multiline':False]['text':'/ otherwise.','line_number':15511,'multiline':False]['text':'/','line_number':15512,'multiline':False]['text':'/ @note The body is the same as bt_regexec() except for nfa_regexec_both()','line_number':15513,'multiline':False]['text':'/','line_number':15514,'multiline':False]['text':'/ @warning','line_number':15515,'multiline':False]['text':'/ Match may actually be in another line. e.g.:','line_number':15516,'multiline':False]['text':'/ when r.e. is \nc, cursor is at 'a' and the text buffer looks like','line_number':15517,'multiline':False]['text':'/','line_number':15518,'multiline':False]['text':'/ @par','line_number':15519,'multiline':False]['text':'/','line_number':15520,'multiline':False]['text':'/     +-------------------------+','line_number':15521,'multiline':False]['text':'/     |a                        |','line_number':15522,'multiline':False]['text':'/     |b                        |','line_number':15523,'multiline':False]['text':'/     |c                        |','line_number':15524,'multiline':False]['text':'/     |                         |','line_number':15525,'multiline':False]['text':'/     +-------------------------+','line_number':15526,'multiline':False]['text':'/','line_number':15527,'multiline':False]['text':'/ @par','line_number':15528,'multiline':False]['text':'/ then nfa_regexec_multi() returns 3. while the original vim_regexec_multi()','line_number':15529,'multiline':False]['text':'/ returns 0 and a second call at line 2 will return 2.','line_number':15530,'multiline':False]['text':'/','line_number':15531,'multiline':False]['text':'/ @par','line_number':15532,'multiline':False]['text':'/ FIXME if this behavior is not compatible.','line_number':15533,'multiline':False]['text':' }}}1','line_number':15540,'multiline':False]['text':' Which regexp engine to use? Needed for vim_regcomp().','line_number':15556,'multiline':False]['text':' Must match with 'regexpengine'.','line_number':15557,'multiline':False]['text':' Compile a regular expression into internal code.','line_number':15568,'multiline':False]['text':' Returns the program in allocated memory.','line_number':15569,'multiline':False]['text':' Use vim_regfree() to free the memory.','line_number':15570,'multiline':False]['text':' Returns NULL for an error.','line_number':15571,'multiline':False]['text':' Check for prefix "\%#=", that sets the regexp engine','line_number':15579,'multiline':False]['text':' reg_iswordc() uses rex.reg_buf','line_number':15602,'multiline':False]['text':'','line_number':15605,'multiline':False]['text':' First try the NFA engine, unless backtracking was requested.','line_number':15606,'multiline':False]['text':'','line_number':15607,'multiline':False]['text':' Check for error compiling regexp with initial engine.','line_number':15616,'multiline':False]['text':' Debugging log for BT engine.','line_number':15619,'multiline':False]['text':' If the NFA engine failed, try the backtracking engine. The NFA engine','line_number':15631,'multiline':False]['text':' also fails for patterns that it can't handle well but are still valid','line_number':15632,'multiline':False]['text':' patterns, thus a retry should work.','line_number':15633,'multiline':False]['text':' But don't try if an error message was given.','line_number':15634,'multiline':False]['text':' Store the info needed to call regcomp() again when the engine turns out','line_number':15643,'multiline':False]['text':' to be very slow when executing it.','line_number':15644,'multiline':False]['text':' Free a compiled regexp program, returned by vim_regcomp().','line_number':15652,'multiline':False]['text':'/ Match a regexp against a string.','line_number':15681,'multiline':False]['text':'/ "rmp->regprog" must be a compiled regexp as returned by vim_regcomp().','line_number':15682,'multiline':False]['text':'/ Note: "rmp->regprog" may be freed and changed.','line_number':15683,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':15684,'multiline':False]['text':'/ When "nl" is true consider a "\n" in "line" to be a line break.','line_number':15685,'multiline':False]['text':'/','line_number':15686,'multiline':False]['text':'/ @param rmp','line_number':15687,'multiline':False]['text':'/ @param line the string to match against','line_number':15688,'multiline':False]['text':'/ @param col  the column to start looking for match','line_number':15689,'multiline':False]['text':'/ @param nl','line_number':15690,'multiline':False]['text':'/','line_number':15691,'multiline':False]['text':'/ @return true if there is a match, false if not.','line_number':15692,'multiline':False]['text':' Cannot use the same prog recursively, it contains state.','line_number':15698,'multiline':False]['text':' Being called recursively, save the state.','line_number':15706,'multiline':False]['text':' NFA engine aborted because it's very slow, use backtracking engine instead.','line_number':15719,'multiline':False]['text':' Note: "*prog" may be freed and changed.','line_number':15748,'multiline':False]['text':' Return true if there is a match, false if not.','line_number':15749,'multiline':False]['text':' Note: "rmp->regprog" may be freed and changed.','line_number':15758,'multiline':False]['text':' Return true if there is a match, false if not.','line_number':15759,'multiline':False]['text':' Like vim_regexec(), but consider a "\n" in "line" to be a line break.','line_number':15765,'multiline':False]['text':' Note: "rmp->regprog" may be freed and changed.','line_number':15766,'multiline':False]['text':' Return true if there is a match, false if not.','line_number':15767,'multiline':False]['text':'/ Match a regexp against multiple lines.','line_number':15773,'multiline':False]['text':'/ "rmp->regprog" must be a compiled regexp as returned by vim_regcomp().','line_number':15774,'multiline':False]['text':'/ Note: "rmp->regprog" may be freed and changed, even set to NULL.','line_number':15775,'multiline':False]['text':'/ Uses curbuf for line count and 'iskeyword'.','line_number':15776,'multiline':False]['text':'/','line_number':15777,'multiline':False]['text':'/ @param win        window in which to search or NULL','line_number':15778,'multiline':False]['text':'/ @param buf        buffer in which to search','line_number':15779,'multiline':False]['text':'/ @param lnum       nr of line to start looking for match','line_number':15780,'multiline':False]['text':'/ @param col        column to start looking for match','line_number':15781,'multiline':False]['text':'/ @param tm         timeout limit or NULL','line_number':15782,'multiline':False]['text':'/ @param timed_out  flag is set when timeout limit reached','line_number':15783,'multiline':False]['text':'/','line_number':15784,'multiline':False]['text':'/ @return  zero if there is no match.  Return number of lines contained in the','line_number':15785,'multiline':False]['text':'/          match otherwise.','line_number':15786,'multiline':False]['text':' Cannot use the same prog recursively, it contains state.','line_number':15794,'multiline':False]['text':' Being called recursively, save the state.','line_number':15802,'multiline':False]['text':' NFA engine aborted because it's very slow, use backtracking engine instead.','line_number':15810,'multiline':False]['text':' checking for \z misuse was already done when compiling for NFA,','line_number':15821,'multiline':False]['text':' allow all here','line_number':15822,'multiline':False]['text':' Somehow compiling the pattern failed now, put back the','line_number':15828,'multiline':False]['text':' previous one to avoid "regprog" becoming NULL.','line_number':15829,'multiline':False]