['text':' spell.c: code for spell checking','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' See spellfile.c for the Vim spell file format.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' The spell checking mechanism uses a tree (aka trie).  Each node in the tree','line_number':5,'multiline':False]['text':' has a list of bytes that can appear (siblings).  For each byte there is a','line_number':6,'multiline':False]['text':' pointer to the node with the byte that follows in the word (child).','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' A NUL byte is used where the word may end.  The bytes are sorted, so that','line_number':9,'multiline':False]['text':' binary searching can be used and the NUL bytes are at the start.  The','line_number':10,'multiline':False]['text':' number of possible bytes is stored before the list of bytes.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' The tree uses two arrays: "byts" stores the characters, "idxs" stores','line_number':13,'multiline':False]['text':' either the next index or flags.  The tree starts at index 0.  For example,','line_number':14,'multiline':False]['text':' to lookup "vi" this sequence is followed:','line_number':15,'multiline':False]['text':'      i = 0','line_number':16,'multiline':False]['text':'      len = byts[i]','line_number':17,'multiline':False]['text':'      n = where "v" appears in byts[i + 1] to byts[i + len]','line_number':18,'multiline':False]['text':'      i = idxs[n]','line_number':19,'multiline':False]['text':'      len = byts[i]','line_number':20,'multiline':False]['text':'      n = where "i" appears in byts[i + 1] to byts[i + len]','line_number':21,'multiline':False]['text':'      i = idxs[n]','line_number':22,'multiline':False]['text':'      len = byts[i]','line_number':23,'multiline':False]['text':'      find that byts[i + 1] is 0, idxs[i + 1] has flags for "vi".','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' There are two word trees: one with case-folded words and one with words in','line_number':26,'multiline':False]['text':' original case.  The second one is only used for keep-case words and is','line_number':27,'multiline':False]['text':' usually small.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' There is one additional tree for when not all prefixes are applied when','line_number':30,'multiline':False]['text':' generating the .spl file.  This tree stores all the possible prefixes, as','line_number':31,'multiline':False]['text':' if they were words.  At each word (prefix) end the prefix nr is stored, the','line_number':32,'multiline':False]['text':' following word must support this prefix nr.  And the condition nr is','line_number':33,'multiline':False]['text':' stored, used to lookup the condition that the word must match with.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' Thanks to Olaf Seibert for providing an example implementation of this tree','line_number':36,'multiline':False]['text':' and the compression mechanism.','line_number':37,'multiline':False]['text':' LZ trie ideas:','line_number':38,'multiline':False]['text':'      http://www.irb.hr/hr/home/ristov/papers/RistovLZtrieRevision1.pdf','line_number':39,'multiline':False]['text':' More papers: http://www-igm.univ-mlv.fr/~laporte/publi_en.html','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' Matching involves checking the caps type: Onecap ALLCAP KeepCap.','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' Why doesn't Vim use aspell/ispell/myspell/etc.?','line_number':44,'multiline':False]['text':' See ":help develop-spell".','line_number':45,'multiline':False]['text':' Use SPELL_PRINTTREE for debugging: dump the word tree after adding a word.','line_number':47,'multiline':False]['text':' Only use it for small word lists!','line_number':48,'multiline':False]['text':' Use SPELL_COMPRESS_ALWAYS for debugging: compress the word tree after','line_number':50,'multiline':False]['text':' adding a word.  Only use it for small word lists!','line_number':51,'multiline':False]['text':' Use DEBUG_TRIEWALK to print the changes made in suggest_trie_walk() for a','line_number':53,'multiline':False]['text':' specific word.','line_number':54,'multiline':False]['text':' Result values.  Lower number is accepted over higher one.','line_number':109,'multiline':False]['text':' First language that is loaded, start of the linked list of loaded','line_number':118,'multiline':False]['text':' languages.','line_number':119,'multiline':False]['text':' file used for "zG" and "zW"','line_number':122,'multiline':False]['text':' Structure to store info for word matching.','line_number':125,'multiline':False]['text':' info for language and region','line_number':127,'multiline':False]['text':' pointers to original text to be checked','line_number':129,'multiline':False]['text':' start of word being checked','line_number':130,'multiline':False]['text':' end of matching word so far','line_number':131,'multiline':False]['text':' next char to be added to mi_fword','line_number':132,'multiline':False]['text':' char after what was used for','line_number':133,'multiline':False]['text':' mi_capflags','line_number':134,'multiline':False]['text':' case-folded text','line_number':136,'multiline':False]['text':' mi_word case-folded','line_number':137,'multiline':False]['text':' nr of valid bytes in mi_fword','line_number':138,'multiline':False]['text':' for when checking word after a prefix','line_number':140,'multiline':False]['text':' index in sl_pidxs with list of','line_number':141,'multiline':False]['text':' affixID/condition','line_number':142,'multiline':False]['text':' number of entries at mi_prefarridx','line_number':143,'multiline':False]['text':' byte length of prefix','line_number':144,'multiline':False]['text':' byte length of prefix in original','line_number':145,'multiline':False]['text':' case','line_number':146,'multiline':False]['text':' for when checking a compound word','line_number':148,'multiline':False]['text':' start of following word offset','line_number':149,'multiline':False]['text':' flags for compound words used','line_number':150,'multiline':False]['text':' nr of compound words used','line_number':151,'multiline':False]['text':' nr of COMPOUNDROOT words','line_number':152,'multiline':False]['text':' others','line_number':154,'multiline':False]['text':' result so far: SP_BAD, SP_OK, etc.','line_number':155,'multiline':False]['text':' WF_ONECAP WF_ALLCAP WF_KEEPCAP','line_number':156,'multiline':False]['text':' buffer being checked','line_number':157,'multiline':False]['text':' for NOBREAK','line_number':159,'multiline':False]['text':' "mi_result" without following word','line_number':160,'multiline':False]['text':' "mi_end" without following word','line_number':161,'multiline':False]['text':' Structure used for the cookie argument of do_in_runtimepath().','line_number':164,'multiline':False]['text':' language name','line_number':166,'multiline':False]['text':' resulting slang_T struct','line_number':167,'multiline':False]['text':' NOBREAK language found','line_number':168,'multiline':False]['text':' the sequence of chars','line_number':173,'multiline':False]['text':'/ mode values for find_word','line_number':184,'multiline':False]['text':'/< find word case-folded','line_number':186,'multiline':False]['text':'/< find keep-case word','line_number':187,'multiline':False]['text':'/< find word after prefix','line_number':188,'multiline':False]['text':'/< find case-folded compound word','line_number':189,'multiline':False]['text':'/< find keep-case compound word','line_number':190,'multiline':False]['text':'/ type values for get_char_type','line_number':193,'multiline':False]['text':' Remember what "z?" replaced.','line_number':202,'multiline':False]['text':'/ Main spell-checking function.','line_number':206,'multiline':False]['text':'/ "ptr" points to a character that could be the start of a word.','line_number':207,'multiline':False]['text':'/ "*attrp" is set to the highlight index for a badly spelled word.  For a','line_number':208,'multiline':False]['text':'/ non-word or when it's OK it remains unchanged.','line_number':209,'multiline':False]['text':'/ This must only be called when 'spelllang' is not empty.','line_number':210,'multiline':False]['text':'/','line_number':211,'multiline':False]['text':'/ "capcol" is used to check for a Capitalised word after the end of a','line_number':212,'multiline':False]['text':'/ sentence.  If it's zero then perform the check.  Return the column where to','line_number':213,'multiline':False]['text':'/ check next, or -1 when no sentence end was found.  If it's NULL then don't','line_number':214,'multiline':False]['text':'/ worry.','line_number':215,'multiline':False]['text':'/','line_number':216,'multiline':False]['text':'/ @param wp  current window','line_number':217,'multiline':False]['text':'/ @param capcol  column to check for Capital','line_number':218,'multiline':False]['text':'/ @param docount  count good words','line_number':219,'multiline':False]['text':'/','line_number':220,'multiline':False]['text':'/ @return  the length of the word in bytes, also when it's OK, so that the','line_number':221,'multiline':False]['text':'/ caller can skip over the word.','line_number':222,'multiline':False]['text':' Most things are put in "mi" so that it can','line_number':225,'multiline':False]['text':' be passed to functions quickly.','line_number':226,'multiline':False]['text':' found a number first','line_number':227,'multiline':False]['text':' A word never starts at a space or a control character. Return quickly','line_number':233,'multiline':False]['text':' then, skipping over the character.','line_number':234,'multiline':False]['text':' Return here when loading language files failed.','line_number':239,'multiline':False]['text':' A number is always OK.  Also skip hexadecimal numbers 0xFF99 and','line_number':246,'multiline':False]['text':' 0X99FF.  But always do check spelling to find "3GPP" and "11','line_number':247,'multiline':False]['text':' julifeest".','line_number':248,'multiline':False]['text':' Find the normal end of the word (until the next non-word character).','line_number':260,'multiline':False]['text':' Check word starting with capital letter.','line_number':273,'multiline':False]['text':' We always use the characters up to the next non-word character,','line_number':284,'multiline':False]['text':' also for bad words.','line_number':285,'multiline':False]['text':' Check caps type later.','line_number':288,'multiline':False]['text':' case-fold the word with one non-word character, so that we can check','line_number':293,'multiline':False]['text':' for the word end.','line_number':294,'multiline':False]['text':' introduce a fake word end space into the folded word.','line_number':304,'multiline':False]['text':' The word is bad unless we recognize it.','line_number':308,'multiline':False]['text':' Loop over the languages specified in 'spelllang'.','line_number':312,'multiline':False]['text':' We check them all, because a word may be matched longer in another','line_number':313,'multiline':False]['text':' language.','line_number':314,'multiline':False]['text':' If reloading fails the language is still in the list but everything','line_number':318,'multiline':False]['text':' has been cleared.','line_number':319,'multiline':False]['text':' Check for a matching word in case-folded words.','line_number':324,'multiline':False]['text':' Check for a matching word in keep-case words.','line_number':327,'multiline':False]['text':' Check for matching prefixes.','line_number':330,'multiline':False]['text':' For a NOBREAK language, may want to use a word without a following','line_number':333,'multiline':False]['text':' word as a backup.','line_number':334,'multiline':False]['text':' Count the word in the first language where it's found to be OK.','line_number':341,'multiline':False]['text':' If we found a number skip over it.  Allows for "42nd".  Do flag','line_number':350,'multiline':False]['text':' rare and local words, e.g., "3GPP".','line_number':351,'multiline':False]['text':' When we are at a non-word character there is no error, just','line_number':357,'multiline':False]['text':' skip over the character (try looking for a word after it).','line_number':358,'multiline':False]['text':' Check for end of sentence.','line_number':362,'multiline':False]['text':' Always include at least one character.  Required for when there','line_number':374,'multiline':False]['text':' is a mixup in "midword".','line_number':375,'multiline':False]['text':' First language in 'spelllang' is NOBREAK.  Find first position','line_number':382,'multiline':False]['text':' at which any word would be valid.','line_number':383,'multiline':False]['text':' Report SpellCap only when the word isn't badly spelled.','line_number':415,'multiline':False]['text':'/ Determine the type of character "c".','line_number':423,'multiline':False]['text':'/ Returns a pointer to the end of the word starting at "str".','line_number':435,'multiline':False]['text':'/ Supports camelCase words.','line_number':436,'multiline':False]['text':' We need at most the types of the type of the last two chars.','line_number':449,'multiline':False]['text':' Handle the following cases:','line_number':459,'multiline':False]['text':' UpperUpperLower','line_number':460,'multiline':False]['text':' Back up by one char.','line_number':462,'multiline':False]['text':' Handle the following cases:','line_number':468,'multiline':False]['text':' LowerUpper LowerDigit UpperDigit DigitUpper DigitLower','line_number':469,'multiline':False]['text':' Check if the word at "mip->mi_word" is in the tree.','line_number':483,'multiline':False]['text':' When "mode" is FIND_FOLDWORD check in fold-case word tree.','line_number':484,'multiline':False]['text':' When "mode" is FIND_KEEPWORD check in keep-case word tree.','line_number':485,'multiline':False]['text':' When "mode" is FIND_PREFIX check for word after prefix in fold-case word','line_number':486,'multiline':False]['text':' tree.','line_number':487,'multiline':False]['text':'','line_number':488,'multiline':False]['text':' For a match mip->mi_result is updated.','line_number':489,'multiline':False]['text':' Check for word with matching case in keep-case tree.','line_number':500,'multiline':False]['text':' no case folding, always enough bytes','line_number':502,'multiline':False]['text':' Skip over the previously found word(s).','line_number':507,'multiline':False]['text':' Check for case-folded in case-folded tree.','line_number':511,'multiline':False]['text':' available case-folded bytes','line_number':513,'multiline':False]['text':' Skip over the prefix.','line_number':518,'multiline':False]['text':' Skip over the previously found word(s).','line_number':522,'multiline':False]['text':' array is empty','line_number':529,'multiline':False]['text':' length at possible word endings','line_number':532,'multiline':False]['text':' possible word endings','line_number':533,'multiline':False]['text':' Repeat advancing in the tree until:','line_number':537,'multiline':False]['text':' - there is a byte that doesn't match,','line_number':538,'multiline':False]['text':' - we reach the end of the tree,','line_number':539,'multiline':False]['text':' - or we reach the end of the line.','line_number':540,'multiline':False]['text':' If the first possible byte is a zero the word could end here.','line_number':548,'multiline':False]['text':' Remember this index, we first check for the longest word.','line_number':549,'multiline':False]['text':' Must be a corrupted spell file.','line_number':552,'multiline':False]['text':' Skip over the zeros, there can be several flag/region','line_number':560,'multiline':False]['text':' combinations.','line_number':561,'multiline':False]['text':' no children, word must end here','line_number':567,'multiline':False]['text':' Stop looking at end of the line.','line_number':571,'multiline':False]['text':' Perform a binary search in the list of accepted bytes.','line_number':576,'multiline':False]['text':' <Tab> is handled like <Space>','line_number':578,'multiline':False]['text':' Stop if there is no matching byte.','line_number':595,'multiline':False]['text':' Continue at the child (if there is one).','line_number':600,'multiline':False]['text':' One space in the good word may stand for several spaces in the','line_number':605,'multiline':False]['text':' checked word.','line_number':606,'multiline':False]['text':' Verify that one of the possible endings is valid.  Try the longest','line_number':624,'multiline':False]['text':' first.','line_number':625,'multiline':False]['text':' not at first byte of character','line_number':632,'multiline':False]['text':' next char is a word character','line_number':636,'multiline':False]['text':' The prefix flag is before compound flags.  Once a valid prefix flag','line_number':642,'multiline':False]['text':' has been found we try compound flags.','line_number':643,'multiline':False]['text':' Compute byte length in original word, length may change','line_number':647,'multiline':False]['text':' when folding case.  This can be slow, take a shortcut when the','line_number':648,'multiline':False]['text':' case-folded word is equal to the keep-case word.','line_number':649,'multiline':False]['text':' Check flags and region.  For FIND_PREFIX check the condition and','line_number':659,'multiline':False]['text':' prefix ID.','line_number':660,'multiline':False]['text':' Repeat this if there are more flags/region alternatives until there','line_number':661,'multiline':False]['text':' is a match.','line_number':662,'multiline':False]['text':' For the fold-case tree check that the case of the checked word','line_number':666,'multiline':False]['text':' matches with what the word in the tree requires.','line_number':667,'multiline':False]['text':' For keep-case tree the case is always right.  For prefixes we','line_number':668,'multiline':False]['text':' don't bother to check.','line_number':669,'multiline':False]['text':' mi_capflags was set for a different word length, need','line_number':672,'multiline':False]['text':' to do it again.','line_number':673,'multiline':False]['text':' When mode is FIND_PREFIX the word must support the prefix:','line_number':683,'multiline':False]['text':' check the prefix ID and the condition.  Do that for the list at','line_number':684,'multiline':False]['text':' mip->mi_prefarridx that find_prefix() filled.','line_number':685,'multiline':False]['text':' Use the WF_RARE flag for a rare prefix.','line_number':694,'multiline':False]['text':' NOBREAK: found a valid following word.  That's all we','line_number':704,'multiline':False]['text':' need to know, so return.','line_number':705,'multiline':False]['text':' If there is no compound flag or the word is shorter than','line_number':711,'multiline':False]['text':' COMPOUNDMIN reject it quickly.','line_number':712,'multiline':False]['text':' Makes you wonder why someone puts a compound flag on a word','line_number':713,'multiline':False]['text':' that's too short...  Myspell compatibility requires this','line_number':714,'multiline':False]['text':' anyway.','line_number':715,'multiline':False]['text':' For multi-byte chars check character length against','line_number':720,'multiline':False]['text':' COMPOUNDMIN.','line_number':721,'multiline':False]['text':' Limit the number of compound words to COMPOUNDWORDMAX if no','line_number':728,'multiline':False]['text':' maximum for syllables is specified.','line_number':729,'multiline':False]['text':' Don't allow compounding on a side where an affix was added,','line_number':736,'multiline':False]['text':' unless COMPOUNDPERMITFLAG was used.','line_number':737,'multiline':False]['text':' Quickly check if compounding is possible with this flag.','line_number':745,'multiline':False]['text':' If there is a match with a CHECKCOMPOUNDPATTERN rule','line_number':752,'multiline':False]['text':' discard the compound word.','line_number':753,'multiline':False]['text':' Need to check the caps type of the appended compound','line_number':761,'multiline':False]['text':' word.','line_number':762,'multiline':False]['text':' case folding may have changed the length','line_number':764,'multiline':False]['text':' When the character before the word is a word','line_number':779,'multiline':False]['text':' character we do not accept a Onecap word.  We do','line_number':780,'multiline':False]['text':' accept a no-caps word, even when the dictionary','line_number':781,'multiline':False]['text':' word specifies ONECAP.','line_number':782,'multiline':False]['text':' If the word ends the sequence of compound flags of the','line_number':793,'multiline':False]['text':' words must match with one of the COMPOUNDRULE items and','line_number':794,'multiline':False]['text':' the number of syllables must not be too large.','line_number':795,'multiline':False]['text':' "fword" is only needed for checking syllables.','line_number':802,'multiline':False]['text':' The compound flags collected so far do not match any','line_number':814,'multiline':False]['text':' COMPOUNDRULE, discard the compounded word.','line_number':815,'multiline':False]['text':' skip if word is only valid in a compound','line_number':819,'multiline':False]['text':' Check that a valid word follows.  If there is one and we','line_number':830,'multiline':False]['text':' are compounding, it will set "mi_result", thus we are','line_number':831,'multiline':False]['text':' always finished here.  For NOBREAK we only check that a','line_number':832,'multiline':False]['text':' valid word follows.','line_number':833,'multiline':False]['text':' Recursive!','line_number':834,'multiline':False]['text':' Find following word in case-folded tree.','line_number':839,'multiline':False]['text':' Compute byte length in case-folded word from "wlen":','line_number':842,'multiline':False]['text':' byte length in keep-case word.  Length may change when','line_number':843,'multiline':False]['text':' folding case.  This can be slow, take a shortcut when','line_number':844,'multiline':False]['text':' the case-folded word is equal to the keep-case word.','line_number':845,'multiline':False]['text':' For NOBREAK we need to try all NOBREAK languages, at least','line_number':859,'multiline':False]['text':' to find the ".add" file(s).','line_number':860,'multiline':False]['text':' When NOBREAK any word that matches is OK.  Otherwise we','line_number':872,'multiline':False]['text':' need to find the longest match, thus try with keep-case','line_number':873,'multiline':False]['text':' and prefix too.','line_number':874,'multiline':False]['text':' Find following word in keep-case tree.','line_number':876,'multiline':False]['text':' Check region.','line_number':907,'multiline':False]['text':' Always use the longest match and the best result.  For NOBREAK','line_number':919,'multiline':False]['text':' we separately keep the longest match without a following good','line_number':920,'multiline':False]['text':' word as a fall-back.','line_number':921,'multiline':False]['text':'/ Returns true if there is a match between the word ptr[wlen] and','line_number':948,'multiline':False]['text':'/ CHECKCOMPOUNDPATTERN rules, assuming that we will concatenate with another','line_number':949,'multiline':False]['text':'/ word.','line_number':950,'multiline':False]['text':'/ A match means that the first part of CHECKCOMPOUNDPATTERN matches at the','line_number':951,'multiline':False]['text':'/ end of ptr[wlen] and the second part matches after it.','line_number':952,'multiline':False]['text':'/','line_number':953,'multiline':False]['text':'/ @param gap  &sl_comppat','line_number':954,'multiline':False]['text':' Second part matches at start of following compound word, now','line_number':960,'multiline':False]['text':' check if first part matches at end of previous word.','line_number':961,'multiline':False]['text':'/ @return  true if "flags" is a valid sequence of compound flags and "word"','line_number':972,'multiline':False]['text':'/          does not have too many syllables.','line_number':973,'multiline':False]['text':' Need to convert the single byte flags to utf8 characters.','line_number':982,'multiline':False]['text':' Count the number of syllables.  This may be slow, do it last.  If there','line_number':993,'multiline':False]['text':' are too many syllables AND the number of compound words is above','line_number':994,'multiline':False]['text':' COMPOUNDWORDMAX then compounding is not allowed.','line_number':995,'multiline':False]['text':' Returns true if the compound flags in compflags[] match the start of any','line_number':1003,'multiline':False]['text':' compound rule.  This is used to stop trying a compound if the flags','line_number':1004,'multiline':False]['text':' collected so far can't possibly match any compound rule.','line_number':1005,'multiline':False]['text':' Caller must check that slang->sl_comprules is not NULL.','line_number':1006,'multiline':False]['text':' loop over all the COMPOUNDRULE entries','line_number':1009,'multiline':False]['text':' loop over the flags in the compound word we have made, match','line_number':1011,'multiline':False]['text':' them against the current rule entry','line_number':1012,'multiline':False]['text':' found a rule that matches for the flags we have so far','line_number':1016,'multiline':False]['text':' end of rule, it's too short','line_number':1020,'multiline':False]['text':' compare against all the flags in []','line_number':1025,'multiline':False]['text':' none matches','line_number':1033,'multiline':False]['text':' flag of word doesn't match flag in pattern','line_number':1036,'multiline':False]['text':' Skip to the next "/", where the next pattern starts.','line_number':1041,'multiline':False]['text':' Checked all the rules and none of them match the flags, so there','line_number':1048,'multiline':False]['text':' can't possibly be a compound starting with these flags.','line_number':1049,'multiline':False]['text':'/ Return non-zero if the prefix indicated by "arridx" matches with the prefix','line_number':1053,'multiline':False]['text':'/ ID in "flags" for the word "word".','line_number':1054,'multiline':False]['text':'/ The WF_RAREPFX flag is included in the return value for a rare prefix.','line_number':1055,'multiline':False]['text':'/','line_number':1056,'multiline':False]['text':'/ @param totprefcnt  nr of prefix IDs','line_number':1057,'multiline':False]['text':'/ @param arridx  idx in sl_pidxs[]','line_number':1058,'multiline':False]['text':'/ @param cond_req  only use prefixes with a condition','line_number':1059,'multiline':False]['text':' Check the prefix ID.','line_number':1067,'multiline':False]['text':' Check if the prefix doesn't combine and the word already has a','line_number':1072,'multiline':False]['text':' suffix.','line_number':1073,'multiline':False]['text':' Check the condition, if there is one.  The condition index is','line_number':1078,'multiline':False]['text':' stored in the two bytes above the prefix ID byte.','line_number':1079,'multiline':False]['text':' It's a match!  Return the WF_ flags.','line_number':1089,'multiline':False]['text':' Check if the word at "mip->mi_word" has a matching prefix.','line_number':1095,'multiline':False]['text':' If it does, then check the following word.','line_number':1096,'multiline':False]['text':'','line_number':1097,'multiline':False]['text':' If "mode" is "FIND_COMPOUND" then do the same after another word, find a','line_number':1098,'multiline':False]['text':' prefix in a compound word.','line_number':1099,'multiline':False]['text':'','line_number':1100,'multiline':False]['text':' For a match mip->mi_result is updated.','line_number':1101,'multiline':False]['text':' array is empty','line_number':1110,'multiline':False]['text':' We use the case-folded word here, since prefixes are always','line_number':1112,'multiline':False]['text':' case-folded.','line_number':1113,'multiline':False]['text':' available case-folded bytes','line_number':1115,'multiline':False]['text':' Skip over the previously found word(s).','line_number':1117,'multiline':False]['text':' Repeat advancing in the tree until:','line_number':1123,'multiline':False]['text':' - there is a byte that doesn't match,','line_number':1124,'multiline':False]['text':' - we reach the end of the tree,','line_number':1125,'multiline':False]['text':' - or we reach the end of the line.','line_number':1126,'multiline':False]['text':' If the first possible byte is a zero the prefix could end here.','line_number':1134,'multiline':False]['text':' Check if the following word matches and supports the prefix.','line_number':1135,'multiline':False]['text':' There can be several prefixes with different conditions.  We','line_number':1137,'multiline':False]['text':' try them all, since we don't know which one will give the','line_number':1138,'multiline':False]['text':' longest match.  The word is the same each time, pass the list','line_number':1139,'multiline':False]['text':' of possible prefixes to find_word().','line_number':1140,'multiline':False]['text':' Find the word that comes after the prefix.','line_number':1149,'multiline':False]['text':' Skip over the previously found word(s).','line_number':1152,'multiline':False]['text':' Case-folded length may differ from original length.','line_number':1156,'multiline':False]['text':' no children, word must end here','line_number':1162,'multiline':False]['text':' Stop looking at end of the line.','line_number':1166,'multiline':False]['text':' Perform a binary search in the list of accepted bytes.','line_number':1171,'multiline':False]['text':' Stop if there is no matching byte.','line_number':1187,'multiline':False]['text':' Continue at the child (if there is one).','line_number':1192,'multiline':False]['text':' Need to fold at least one more character.  Do until next non-word character','line_number':1199,'multiline':False]['text':' for efficiency.  Include the non-word character too.','line_number':1200,'multiline':False]['text':' Return the length of the folded chars in bytes.','line_number':1201,'multiline':False]['text':' Include the non-word character so that we can check for the word end.','line_number':1209,'multiline':False]['text':'/ Checks case flags for a word. Returns true, if the word has the requested','line_number':1222,'multiline':False]['text':'/ case.','line_number':1223,'multiline':False]['text':'/','line_number':1224,'multiline':False]['text':'/ @param wordflags Flags for the checked word.','line_number':1225,'multiline':False]['text':'/ @param treeflags Flags for the word in the spell tree.','line_number':1226,'multiline':False]['text':'/ Return true if spell checking is enabled for "wp".','line_number':1235,'multiline':False]['text':'/ Return true and give an error if spell checking is not enabled.','line_number':1244,'multiline':False]['text':'/ Moves to the next spell error.','line_number':1278,'multiline':False]['text':'/ "curline" is false for "[s", "]s", "[S" and "]S".','line_number':1279,'multiline':False]['text':'/ "curline" is true to find word under/after cursor in the same line.','line_number':1280,'multiline':False]['text':'/ For Insert mode completion "dir" is BACKWARD and "curline" is true: move','line_number':1281,'multiline':False]['text':'/ to after badly spelled word before the cursor.','line_number':1282,'multiline':False]['text':'/','line_number':1283,'multiline':False]['text':'/ @param dir  FORWARD or BACKWARD','line_number':1284,'multiline':False]['text':'/ @param allwords  true for "[s"/"]s", false for "[S"/"]S"','line_number':1285,'multiline':False]['text':'/ @param attrp  return: attributes of bad word or NULL (only when "dir" is FORWARD)','line_number':1286,'multiline':False]['text':'/','line_number':1287,'multiline':False]['text':'/ @return  0 if not found, length of the badly spelled word otherwise.','line_number':1288,'multiline':False]['text':' Start looking for bad word at the start of the line, because we can't','line_number':1310,'multiline':False]['text':' start halfway through a word, we don't know where it starts or ends.','line_number':1311,'multiline':False]['text':'','line_number':1312,'multiline':False]['text':' When searching backwards, we continue in the line to find the last','line_number':1313,'multiline':False]['text':' bad word (in the cursor line: before the cursor).','line_number':1314,'multiline':False]['text':'','line_number':1315,'multiline':False]['text':' We concatenate the start of the next line, so that wrapped words work','line_number':1316,'multiline':False]['text':' (e.g. "et<line-break>cetera").  Doesn't work when searching backwards','line_number':1317,'multiline':False]['text':' though...','line_number':1318,'multiline':False]['text':' Ephemeral extmarks are currently stored in the global decor_state.','line_number':1322,'multiline':False]['text':' When looking for spell errors, we need to:','line_number':1323,'multiline':False]['text':'  - temporarily reset decor_state','line_number':1324,'multiline':False]['text':'  - run the _on_spell_nav decor callback for each line we look at','line_number':1325,'multiline':False]['text':'  - detect if any spell marks are present','line_number':1326,'multiline':False]['text':'  - restore decor_state to the value saved here.','line_number':1327,'multiline':False]['text':' TODO(lewis6991): un-globalize decor_state and allow ephemeral marks to be stored into a','line_number':1328,'multiline':False]['text':' temporary DecorState.','line_number':1329,'multiline':False]['text':' In first line check first word for Capital.','line_number':1345,'multiline':False]['text':' For checking first word with a capital skip white space.','line_number':1350,'multiline':False]['text':' For spellbadword(): check if first word needs a capital.','line_number':1354,'multiline':False]['text':' Need to get the line again, may have looked at the previous','line_number':1360,'multiline':False]['text':' one.','line_number':1361,'multiline':False]['text':' Copy the line into "buf" and append the start of the next line if','line_number':1365,'multiline':False]['text':' possible.  Note: this ml_get_buf() may make "line" invalid, check','line_number':1366,'multiline':False]['text':' for empty line first.','line_number':1367,'multiline':False]['text':' When searching backward don't search after the cursor.  Unless','line_number':1378,'multiline':False]['text':' we wrapped around the end of the buffer.','line_number':1379,'multiline':False]['text':' start of word','line_number':1387,'multiline':False]['text':' We found a bad word.  Check the attribute.','line_number':1392,'multiline':False]['text':' When searching forward only accept a bad word after','line_number':1394,'multiline':False]['text':' the cursor.','line_number':1395,'multiline':False]['text':' No need to search further.','line_number':1429,'multiline':False]['text':' Insert mode completion: put cursor after','line_number':1437,'multiline':False]['text':' the bad word.','line_number':1438,'multiline':False]['text':' advance to character after the word','line_number':1450,'multiline':False]['text':' Use the last match in the line (before the cursor).','line_number':1457,'multiline':False]['text':' only check cursor line','line_number':1464,'multiline':False]['text':' If we are back at the starting line and searched it again there','line_number':1467,'multiline':False]['text':' is no match, give up.','line_number':1468,'multiline':False]['text':' Advance to next line.','line_number':1473,'multiline':False]['text':' at first line and 'nowrapscan'','line_number':1478,'multiline':False]['text':' Wrap around to the end of the buffer.  May search the','line_number':1480,'multiline':False]['text':' starting line again and accept the last match.','line_number':1481,'multiline':False]['text':' at first line and 'nowrapscan'','line_number':1493,'multiline':False]['text':' Wrap around to the start of the buffer.  May search the','line_number':1495,'multiline':False]['text':' starting line again and accept the first match.','line_number':1496,'multiline':False]['text':' If we are back at the starting line and there is no match then','line_number':1504,'multiline':False]['text':' give up.','line_number':1505,'multiline':False]['text':' Skip the characters at the start of the next line that were','line_number':1510,'multiline':False]['text':' included in a match crossing line boundaries.','line_number':1511,'multiline':False]['text':' Capcol skips over the inserted space.','line_number':1518,'multiline':False]['text':' But after empty line check first word in next line','line_number':1521,'multiline':False]['text':' For spell checking: concatenate the start of the following line "line" into','line_number':1537,'multiline':False]['text':' "buf", blanking-out special characters.  Copy less than "maxlen" bytes.','line_number':1538,'multiline':False]['text':' Keep the blanks at the start of the next line, this is used in win_line()','line_number':1539,'multiline':False]['text':' to skip those bytes if the word was OK.','line_number':1540,'multiline':False]['text':' Only worth concatenating if there is something else than spaces to','line_number':1552,'multiline':False]['text':' concatenate.','line_number':1553,'multiline':False]['text':' Load word list(s) for "lang" from Vim spell file(s).','line_number':1561,'multiline':False]['text':' "lang" must be the language without the region: e.g., "en".','line_number':1562,'multiline':False]['text':' Copy the language name to pass it to spell_load_cb() as a cookie.','line_number':1569,'multiline':False]['text':' It's truncated when an error is detected.','line_number':1570,'multiline':False]['text':' Disallow deleting the current buffer.  Autocommands can do weird things','line_number':1575,'multiline':False]['text':' and cause "lang" to be freed.','line_number':1576,'multiline':False]['text':' We may retry when no spell file is found for the language, an','line_number':1579,'multiline':False]['text':' autocommand may load it then.','line_number':1580,'multiline':False]['text':' Find the first spell file for "lang" in 'runtimepath' and load it.','line_number':1582,'multiline':False]['text':' Try loading the ASCII version.','line_number':1588,'multiline':False]['text':' Prompt the user at VimEnter if spell files are missing. #3027','line_number':1605,'multiline':False]['text':' Plugins aren't loaded yet, so spellfile.vim cannot handle this case.','line_number':1606,'multiline':False]['text':' At least one file was loaded, now load ALL the additions.','line_number':1617,'multiline':False]['text':' Return the encoding used for spell checking: Use 'encoding', except that we','line_number':1625,'multiline':False]['text':' use "latin1" for "latin9".  And limit to 60 characters (just in case).','line_number':1626,'multiline':False]['text':' Get the name of the .spl file for the internal wordlist into','line_number':1635,'multiline':False]['text':' "fname[MAXPATHL]".','line_number':1636,'multiline':False]['text':'/ Allocate a new slang_T for language "lang".  "lang" can be NULL.','line_number':1643,'multiline':False]['text':'/ Caller must fill "sl_next".','line_number':1644,'multiline':False]['text':' Free the contents of an slang_T and the structure itself.','line_number':1662,'multiline':False]['text':'/ Frees a salitem_T','line_number':1671,'multiline':False]['text':' Don't free sm_oneof and sm_rules, they point into sm_lead.','line_number':1675,'multiline':False]['text':'/ Frees a fromto_T','line_number':1682,'multiline':False]['text':' Clear an slang_T so that the file can be reloaded.','line_number':1689,'multiline':False]['text':' "ga_len" is set to 1 without adding an item for latin1','line_number':1707,'multiline':False]['text':' SAL items: free salitem_T items','line_number':1710,'multiline':False]['text':' Clear info from .sug file.','line_number':1738,'multiline':False]['text':' Clear the info from the .sug file in "lp".','line_number':1747,'multiline':False]['text':' Load one spell file and store the info into a slang_T.','line_number':1758,'multiline':False]['text':' Invoked through do_in_runtimepath().','line_number':1759,'multiline':False]['text':' When a previously loaded file has NOBREAK also use it for the','line_number':1770,'multiline':False]['text':' ".add" files.','line_number':1771,'multiline':False]['text':'/ Add a word to the hashtable of common words.','line_number':1788,'multiline':False]['text':'/ If it's already there then the counter is increased.','line_number':1789,'multiline':False]['text':'/','line_number':1790,'multiline':False]['text':'/ @param[in]  lp','line_number':1791,'multiline':False]['text':'/ @param[in]  word  added to common words hashtable','line_number':1792,'multiline':False]['text':'/ @param[in]  len  length of word or -1 for NUL terminated','line_number':1793,'multiline':False]['text':'/ @param[in]  count  1 to count once, 10 to init','line_number':1794,'multiline':False]['text':' check for overflow','line_number':1821,'multiline':False]['text':' Returns true if byte "n" appears in "str".','line_number':1827,'multiline':False]['text':' Like strchr() but independent of locale.','line_number':1828,'multiline':False]['text':' Truncate "slang->sl_syllable" at the first slash and put the following items','line_number':1839,'multiline':False]['text':' in "slang->sl_syl_items".','line_number':1840,'multiline':False]['text':' trailing slash','line_number':1847,'multiline':False]['text':' Count the number of syllables in "word".','line_number':1869,'multiline':False]['text':' When "word" contains spaces the syllables after the last space are counted.','line_number':1870,'multiline':False]['text':' Returns zero if syllables are not defines.','line_number':1871,'multiline':False]['text':' When running into a space reset counter.','line_number':1884,'multiline':False]['text':' Find longest match of syllable items.','line_number':1891,'multiline':False]['text':' found a match, count syllable','line_number':1900,'multiline':False]['text':' No recognized syllable item, at least a syllable char then?','line_number':1904,'multiline':False]['text':' No, search for next syllable','line_number':1908,'multiline':False]['text':' Yes, count it','line_number':1910,'multiline':False]['text':' don't count following syllable chars','line_number':1911,'multiline':False]['text':'/ Parse 'spelllang' and set w_s->b_langp accordingly.','line_number':1918,'multiline':False]['text':'/ @return  NULL if it's OK, an untranslated error message otherwise.','line_number':1919,'multiline':False]['text':' We don't want to do this recursively.  May happen when a language is','line_number':1945,'multiline':False]['text':' not available and the SpellFileMissing autocommand opens a new buffer','line_number':1946,'multiline':False]['text':' in which 'spell' is set.','line_number':1947,'multiline':False]['text':' Make a copy of 'spelllang', the SpellFileMissing autocommands may change','line_number':1956,'multiline':False]['text':' it under our fingers.','line_number':1957,'multiline':False]['text':' Loop over comma separated language names.','line_number':1962,'multiline':False]['text':' Get one language name.','line_number':1964,'multiline':False]['text':' If the name ends in ".spl" use it as the name of the spell file.','line_number':1978,'multiline':False]['text':' If there is a region name let "region" point to it and remove it','line_number':1979,'multiline':False]['text':' from the name.','line_number':1980,'multiline':False]['text':' Locate a region and remove it from the file name.','line_number':1984,'multiline':False]['text':' Check if we loaded this language before.','line_number':1995,'multiline':False]['text':' Check if we loaded this language before.','line_number':2011,'multiline':False]['text':' If the region differs from what was used before then don't','line_number':2020,'multiline':False]['text':' use it for 'spellfile'.','line_number':2021,'multiline':False]['text':' If not found try loading the language now.','line_number':2028,'multiline':False]['text':' SpellFileMissing autocommands may do anything, including','line_number':2034,'multiline':False]['text':' destroying the buffer we are using or closing the window.','line_number':2035,'multiline':False]['text':' Loop over the languages, there can be several files for "lang".','line_number':2043,'multiline':False]['text':' find region in sl_regions','line_number':2050,'multiline':False]['text':' This addition file is for other regions.','line_number':2055,'multiline':False]['text':' This is probably an error.  Give a warning and','line_number':2059,'multiline':False]['text':' accept the words anyway.','line_number':2060,'multiline':False]['text':' round 0: load int_wordlist, if possible.','line_number':2083,'multiline':False]['text':' round 1: load first name in 'spellfile'.','line_number':2084,'multiline':False]['text':' round 2: load second name in 'spellfile.','line_number':2085,'multiline':False]['text':' etc.','line_number':2086,'multiline':False]['text':' Internal wordlist, if there is one.','line_number':2090,'multiline':False]['text':' One entry in 'spellfile'.','line_number':2096,'multiline':False]['text':' If it was already found above then skip it.','line_number':2100,'multiline':False]['text':' Check if it was loaded already.','line_number':2113,'multiline':False]['text':' Not loaded, try loading it now.  The language name includes the','line_number':2121,'multiline':False]['text':' region name, the region is ignored otherwise.  for int_wordlist','line_number':2122,'multiline':False]['text':' use an arbitrary name.','line_number':2123,'multiline':False]['text':' truncate at ".encoding.add"','line_number':2130,'multiline':False]['text':' If one of the languages has NOBREAK we assume the addition','line_number':2135,'multiline':False]['text':' files also have this.','line_number':2136,'multiline':False]['text':' find region in sl_regions','line_number':2144,'multiline':False]['text':' This spell file is for other regions.','line_number':2149,'multiline':False]['text':' Everything is fine, store the new b_langp value.','line_number':2166,'multiline':False]['text':' For each language figure out what language to use for sound folding and','line_number':2170,'multiline':False]['text':' REP items.  If the language doesn't support it itself use another one','line_number':2171,'multiline':False]['text':' with the same name.  E.g. for "en-math" use "en".','line_number':2172,'multiline':False]['text':' sound folding','line_number':2176,'multiline':False]['text':' language does sound folding itself','line_number':2178,'multiline':False]['text':' find first similar language that does sound folding','line_number':2181,'multiline':False]['text':' REP items','line_number':2193,'multiline':False]['text':' language has REP items itself','line_number':2195,'multiline':False]['text':' find first similar language that has REP items','line_number':2198,'multiline':False]['text':' Clear the midword characters for buffer "buf".','line_number':2218,'multiline':False]['text':'/ Use the "sl_midword" field of language "lp" for buffer "buf".','line_number':2225,'multiline':False]['text':'/ They add up to any currently used midword characters.','line_number':2226,'multiline':False]['text':' there aren't any','line_number':2230,'multiline':False]['text':' First multi-byte char in "b_spell_ismw_mb".','line_number':2240,'multiline':False]['text':' Append multi-byte chars to "b_spell_ismw_mb".','line_number':2243,'multiline':False]['text':' Find the region "region[2]" in "rp" (points to "sl_regions").','line_number':2254,'multiline':False]['text':' Each region is simply stored as the two characters of its name.','line_number':2255,'multiline':False]['text':' Returns the index if found (first is 0), REGION_ALL if not found.','line_number':2256,'multiline':False]['text':'/ Return case type of word:','line_number':2272,'multiline':False]['text':'/ w word       0','line_number':2273,'multiline':False]['text':'/ Word         WF_ONECAP','line_number':2274,'multiline':False]['text':'/ W WORD       WF_ALLCAP','line_number':2275,'multiline':False]['text':'/ WoRd wOrd    WF_KEEPCAP','line_number':2276,'multiline':False]['text':'/','line_number':2277,'multiline':False]['text':'/ @param[in]  word','line_number':2278,'multiline':False]['text':'/ @param[in]  end  End of word or NULL for NUL delimited string','line_number':2279,'multiline':False]['text':'/','line_number':2280,'multiline':False]['text':'/ @returns  Case type of word','line_number':2281,'multiline':False]['text':' find first letter','line_number':2287,'multiline':False]['text':' only non-word characters, illegal word','line_number':2290,'multiline':False]['text':' past second word char','line_number':2296,'multiline':False]['text':' Need to check all letters to find a word with mixed upper/lower.','line_number':2298,'multiline':False]['text':' But a word with an upper char only at start is a ONECAP.','line_number':2299,'multiline':False]['text':' UUl -> KEEPCAP','line_number':2304,'multiline':False]['text':' UlU -> KEEPCAP','line_number':2310,'multiline':False]['text':' Delete the internal wordlist and its .spl file.','line_number':2326,'multiline':False]['text':' Free all languages.','line_number':2340,'multiline':False]['text':' Go through all buffers and handle 'spelllang'. <VN>','line_number':2343,'multiline':False]['text':' Clear all spelling tables and reload them.','line_number':2360,'multiline':False]['text':' Used after 'encoding' is set and when ":mkspell" was used.','line_number':2361,'multiline':False]['text':' Initialize the table for spell_iswordp().','line_number':2364,'multiline':False]['text':' Unload all allocated memory.','line_number':2367,'multiline':False]['text':' Go through all buffers and handle 'spelllang'.','line_number':2370,'multiline':False]['text':' Only load the wordlists when 'spelllang' is set and there is a','line_number':2372,'multiline':False]['text':' window for this buffer in which 'spell' is set.','line_number':2373,'multiline':False]['text':' Open a spell buffer.  This is a nameless buffer that is not in the buffer','line_number':2383,'multiline':False]['text':' list and only contains text lines.  Can use a swapfile to reduce memory','line_number':2384,'multiline':False]['text':' use.','line_number':2385,'multiline':False]['text':' Most other fields are invalid!  Esp. watch out for string options being','line_number':2386,'multiline':False]['text':' NULL and there is no undo info.','line_number':2387,'multiline':False]['text':' may create a swap file','line_number':2393,'multiline':False]['text':' create swap file now','line_number':2397,'multiline':False]['text':' Close the buffer used for spell info.','line_number':2402,'multiline':False]['text':' Init the chartab used for spelling for ASCII.','line_number':2413,'multiline':False]['text':' Init everything to false (zero).','line_number':2416,'multiline':False]['text':' We include digits. A word shouldn't start with a digit, but handling','line_number':2425,'multiline':False]['text':' that is done separately.','line_number':2426,'multiline':False]['text':' Init the chartab used for spelling. Called once while starting up.','line_number':2441,'multiline':False]['text':' The default is to use isalpha(), but the spell file should define the word','line_number':2442,'multiline':False]['text':' characters to make it possible that 'encoding' differs from the current','line_number':2443,'multiline':False]['text':' locale.  For utf-8 we don't use isalpha() but our own functions.','line_number':2444,'multiline':False]['text':' The folded/upper-cased value is different between latin1 and','line_number':2455,'multiline':False]['text':' utf8 for 0xb5, causing E763 for no good reason.  Use the latin1','line_number':2456,'multiline':False]['text':' value for utf-8 to avoid this.','line_number':2457,'multiline':False]['text':'/ Returns true if "p" points to a word character.','line_number':2463,'multiline':False]['text':'/ As a special case we see "midword" characters as word character when it is','line_number':2464,'multiline':False]['text':'/ followed by a word character.  This finds they'there but not 'they there'.','line_number':2465,'multiline':False]['text':'/ Thus this only works properly when past the first character of the word.','line_number':2466,'multiline':False]['text':'/','line_number':2467,'multiline':False]['text':'/ @param wp Buffer used.','line_number':2468,'multiline':False]['text':' be quick for ASCII','line_number':2475,'multiline':False]['text':' skip a mid-word character','line_number':2477,'multiline':False]['text':' Returns true if "p" points to a word character.','line_number':2496,'multiline':False]['text':' Unlike spell_iswordp() this doesn't check for "midword" characters.','line_number':2497,'multiline':False]['text':' Returns true if word class indicates a word character.','line_number':2507,'multiline':False]['text':' Only for characters above 255.','line_number':2508,'multiline':False]['text':' Unicode subscript and superscript are not considered word characters.','line_number':2509,'multiline':False]['text':' See also utf_class() in mbyte.c.','line_number':2510,'multiline':False]['text':' East Asian characters are not considered word characters.','line_number':2515,'multiline':False]['text':' Returns true if "p" points to a word character.','line_number':2521,'multiline':False]['text':' Wide version of spell_iswordp().','line_number':2522,'multiline':False]['text':' Case-fold "str[len]" into "buf[buflen]".  The result is NUL terminated.','line_number':2543,'multiline':False]['text':' Uses the character definitions from the .spl file.','line_number':2544,'multiline':False]['text':' When using a multi-byte 'encoding' the length may change!','line_number':2545,'multiline':False]['text':' Returns FAIL when something wrong.','line_number':2546,'multiline':False]['text':' result will not fit','line_number':2552,'multiline':False]['text':' Fold one character at a time.','line_number':2557,'multiline':False]['text':' Exception: greek capital sigma 0x03A3 folds to 0x03C3, except','line_number':2565,'multiline':False]['text':' when it is the last character in a word, then it folds to','line_number':2566,'multiline':False]['text':' 0x03C2.','line_number':2567,'multiline':False]['text':' Check if the word at line "lnum" column "col" is required to start with a','line_number':2585,'multiline':False]['text':' capital.  This uses 'spellcapcheck' of the buffer in window "wp".','line_number':2586,'multiline':False]['text':' At start of line, check if previous line is empty or sentence','line_number':2598,'multiline':False]['text':' ends there.','line_number':2599,'multiline':False]['text':' Append a space in place of the line break.','line_number':2607,'multiline':False]['text':' Check if sentence ends before the bad word.','line_number':2618,'multiline':False]['text':' ":spellrepall"','line_number':2643,'multiline':False]['text':' Only replace when the right word isn't there yet.  This happens','line_number':2672,'multiline':False]['text':' when changing "etc" to "etc.".','line_number':2673,'multiline':False]['text':'/ Make a copy of "word", with the first letter upper or lower cased, to','line_number':2705,'multiline':False]['text':'/ "wcopy[MAXWLEN]".  "word" must not be empty.','line_number':2706,'multiline':False]['text':'/ The result is NUL terminated.','line_number':2707,'multiline':False]['text':'/','line_number':2708,'multiline':False]['text':'/ @param[in]  word  source string to copy','line_number':2709,'multiline':False]['text':'/ @param[in,out]  wcopy  copied string, with case of first letter changed','line_number':2710,'multiline':False]['text':'/ @param[in]  upper  True to upper case, otherwise lower case','line_number':2711,'multiline':False]['text':' Make a copy of "word" with all the letters upper cased into','line_number':2725,'multiline':False]['text':' "wcopy[MAXWLEN]".  The result is NUL terminated.','line_number':2726,'multiline':False]['text':' Case-folding may change the number of bytes: Count nr of chars in','line_number':2751,'multiline':False]['text':' fword[flen] and return the byte length of that many chars in "word".','line_number':2752,'multiline':False]['text':' Copy "fword" to "cword", fixing case according to "flags".','line_number':2767,'multiline':False]['text':' Make it all upper-case','line_number':2771,'multiline':False]['text':' Make the first letter upper-case','line_number':2774,'multiline':False]['text':' Use goodword as-is.','line_number':2777,'multiline':False]['text':'/ Soundfold a string, for soundfold()','line_number':2782,'multiline':False]['text':'/','line_number':2783,'multiline':False]['text':'/ @param[in]  word  Word to soundfold.','line_number':2784,'multiline':False]['text':'/','line_number':2785,'multiline':False]['text':'/ @return [allocated] soundfolded string or NULL in case of error. May return','line_number':2786,'multiline':False]['text':'/                     copy of the input string if soundfolding is not','line_number':2787,'multiline':False]['text':'/                     supported by any of the languages in &spellang.','line_number':2788,'multiline':False]['text':' Use the sound-folding of the first language that supports it.','line_number':2793,'multiline':False]['text':' soundfold the word','line_number':2797,'multiline':False]['text':' No language with sound folding, return word as-is.','line_number':2805,'multiline':False]['text':'/ Turn "inword" into its sound-a-like equivalent in "res[MAXWLEN]".','line_number':2809,'multiline':False]['text':'/','line_number':2810,'multiline':False]['text':'/ There are many ways to turn a word into a sound-a-like representation.  The','line_number':2811,'multiline':False]['text':'/ oldest is Soundex (1918!).   A nice overview can be found in "Approximate','line_number':2812,'multiline':False]['text':'/ swedish name matching - survey and test of different algorithms" by Klas','line_number':2813,'multiline':False]['text':'/ Erikson.','line_number':2814,'multiline':False]['text':'/','line_number':2815,'multiline':False]['text':'/ We support two methods:','line_number':2816,'multiline':False]['text':'/ 1. SOFOFROM/SOFOTO do a simple character mapping.','line_number':2817,'multiline':False]['text':'/ 2. SAL items define a more advanced sound-folding (and much slower).','line_number':2818,'multiline':False]['text':'/','line_number':2819,'multiline':False]['text':'/ @param[in]  slang','line_number':2820,'multiline':False]['text':'/ @param[in]  inword  word to soundfold','line_number':2821,'multiline':False]['text':'/ @param[in]  folded  whether inword is already case-folded','line_number':2822,'multiline':False]['text':'/ @param[in,out]  res  destination for soundfolded word','line_number':2823,'multiline':False]['text':' SOFOFROM and SOFOTO used','line_number':2827,'multiline':False]['text':' SAL items used.  Requires the word to be case-folded.','line_number':2832,'multiline':False]['text':' Perform sound folding of "inword" into "res" according to SOFOFROM and','line_number':2844,'multiline':False]['text':' SOFOTO lines.','line_number':2845,'multiline':False]['text':' The sl_sal_first[] table contains the translation for chars up to','line_number':2852,'multiline':False]['text':' 255, sl_sal the rest.','line_number':2853,'multiline':False]['text':' empty list, can't match','line_number':2862,'multiline':False]['text':' find "c" in the list','line_number':2865,'multiline':False]['text':' not found','line_number':2866,'multiline':False]['text':' match!','line_number':2870,'multiline':False]['text':' Turn "inword" into its sound-a-like equivalent in "res[MAXWLEN]".','line_number':2891,'multiline':False]['text':' Multi-byte version of spell_soundfold().','line_number':2892,'multiline':False]['text':' Convert the multi-byte string to a wide-character string.','line_number':2910,'multiline':False]['text':' Remove accents, if wanted.  We actually remove all non-word characters.','line_number':2911,'multiline':False]['text':' But keep white space.','line_number':2912,'multiline':False]['text':' This algorithm comes from Aspell phonet.cpp.','line_number':2936,'multiline':False]['text':' Converted from C++ to C.  Added support for multi-byte chars.','line_number':2937,'multiline':False]['text':' Changed to keep spaces.','line_number':2938,'multiline':False]['text':' Start with the first rule that has the character in the word.','line_number':2941,'multiline':False]['text':' Check all rules for the same index byte.','line_number':2946,'multiline':False]['text':' If c is 0x300 need extra check for the end of the array, as','line_number':2947,'multiline':False]['text':' (c & 0xff) is NUL.','line_number':2948,'multiline':False]['text':' Quickly skip entries that don't match the word.  Most','line_number':2951,'multiline':False]['text':' entries are less than three chars, optimize for that.','line_number':2952,'multiline':False]['text':' Check for match with one of the chars in "sm_oneof".','line_number':2974,'multiline':False]['text':' default priority','line_number':2984,'multiline':False]['text':' determine priority','line_number':2996,'multiline':False]['text':' search for followup rules, if:','line_number':3013,'multiline':False]['text':' followup and k > 1  and  NO '-' in searchstring','line_number':3014,'multiline':False]['text':' Test follow-up rule for "word[i + k]"; loop over','line_number':3020,'multiline':False]['text':' all entries with the same index byte.','line_number':3021,'multiline':False]['text':' Quickly skip entries that don't match the word.','line_number':3024,'multiline':False]['text':' Check for match with one of the chars in','line_number':3048,'multiline':False]['text':' "sm_oneof".','line_number':3049,'multiline':False]['text':' "k0" gets NOT reduced because','line_number':3062,'multiline':False]['text':' "if (k0 == k)"','line_number':3063,'multiline':False]['text':' *s == '^' cuts','line_number':3075,'multiline':False]['text':' this is just a piece of the string','line_number':3080,'multiline':False]['text':' priority too low','line_number':3085,'multiline':False]['text':' rule fits; stop search','line_number':3088,'multiline':False]['text':' replace string','line_number':3099,'multiline':False]['text':' rule with '<' is used','line_number':3104,'multiline':False]['text':' new "actual letter"','line_number':3124,'multiline':False]['text':' no '<' rule used','line_number':3127,'multiline':False]['text':' new "actual letter"','line_number':3139,'multiline':False]['text':' condense only double letters','line_number':3166,'multiline':False]['text':' Convert wide characters in "wres" to a multi-byte string in "res".','line_number':3176,'multiline':False]['text':' ":spellinfo"','line_number':3187,'multiline':False]['text':' round 2: keep-case tree','line_number':3209,'multiline':False]['text':' include word count','line_number':3210,'multiline':False]['text':' ignore case when finding matches','line_number':3211,'multiline':False]['text':' pattern starts with capital','line_number':3212,'multiline':False]['text':' pattern is all capitals','line_number':3213,'multiline':False]['text':' ":spelldump"','line_number':3215,'multiline':False]['text':' Create a new empty buffer in a new window.','line_number':3223,'multiline':False]['text':' enable spelling locally in the new window','line_number':3226,'multiline':False]['text':' Delete the empty line that we started with.','line_number':3237,'multiline':False]['text':'/ Go through all possible words and:','line_number':3244,'multiline':False]['text':'/ 1. When "pat" is NULL: dump a list of all words in the current buffer.','line_number':3245,'multiline':False]['text':'/      "ic" and "dir" are not used.','line_number':3246,'multiline':False]['text':'/ 2. When "pat" is not NULL: add matching words to insert mode completion.','line_number':3247,'multiline':False]['text':'/','line_number':3248,'multiline':False]['text':'/ @param pat  leading part of the word','line_number':3249,'multiline':False]['text':'/ @param ic  ignore case','line_number':3250,'multiline':False]['text':'/ @param dir  direction for adding matches','line_number':3251,'multiline':False]['text':'/ @param dumpflags_arg  DUMPFLAG_*','line_number':3252,'multiline':False]['text':' region names being used','line_number':3267,'multiline':False]['text':' dump region names and numbers','line_number':3268,'multiline':False]['text':' When ignoring case or when the pattern starts with capital pass this on','line_number':3273,'multiline':False]['text':' to dump_word().','line_number':3274,'multiline':False]['text':' Find out if we can support regions: All languages must support the same','line_number':3289,'multiline':False]['text':' regions or none at all.','line_number':3290,'multiline':False]['text':' first language with regions','line_number':3295,'multiline':False]['text':' region names are different','line_number':3298,'multiline':False]['text':' Loop over all files loaded for the entries in 'spelllang'.','line_number':3311,'multiline':False]['text':' reloading failed','line_number':3315,'multiline':False]['text':' When matching with a pattern and there are no prefixes only use','line_number':3324,'multiline':False]['text':' parts of the tree that match "pat".','line_number':3325,'multiline':False]['text':' round 1: case-folded tree','line_number':3332,'multiline':False]['text':' round 2: keep-case tree','line_number':3333,'multiline':False]['text':' array is empty','line_number':3345,'multiline':False]['text':' Done all bytes at this node, go up one level.','line_number':3353,'multiline':False]['text':' Do one more byte at this node.','line_number':3358,'multiline':False]['text':' End of word or reached maximum length, deal with the','line_number':3363,'multiline':False]['text':' word.','line_number':3364,'multiline':False]['text':' Don't use keep-case words in the fold-case tree,','line_number':3365,'multiline':False]['text':' they will appear in the keep-case tree.','line_number':3366,'multiline':False]['text':' Only use the word when the region matches.','line_number':3367,'multiline':False]['text':' Dump the basic word if there is no prefix or','line_number':3380,'multiline':False]['text':' when it's the first one.','line_number':3381,'multiline':False]['text':' Apply the prefix, if there is one.','line_number':3390,'multiline':False]['text':' Normal char, go one level deeper.','line_number':3397,'multiline':False]['text':' Check if this character matches with the pattern.','line_number':3402,'multiline':False]['text':' If not skip the whole tree below it.','line_number':3403,'multiline':False]['text':' Always ignore case here, dump_word() will check','line_number':3404,'multiline':False]['text':' proper case later.  This isn't exactly right when','line_number':3405,'multiline':False]['text':' length changes for multi-byte characters with','line_number':3406,'multiline':False]['text':' ignore case...','line_number':3407,'multiline':False]['text':'/ Dumps one word: apply case modifications and append a line to the buffer.','line_number':3420,'multiline':False]['text':'/ When "lnum" is zero add insert mode completion.','line_number':3421,'multiline':False]['text':' Need to fix case according to "flags".','line_number':3439,'multiline':False]['text':' Add flags and regions after a slash.','line_number':3453,'multiline':False]['text':' Include the word count for ":spelldump!".','line_number':3481,'multiline':False]['text':' if dir was BACKWARD then honor it just once','line_number':3496,'multiline':False]['text':'/ For ":spelldump": Find matching prefixes for "word".  Prepend each to','line_number':3501,'multiline':False]['text':'/ "word" and append a line to the buffer.','line_number':3502,'multiline':False]['text':'/ When "lnum" is zero add insert mode completion.','line_number':3503,'multiline':False]['text':'/','line_number':3504,'multiline':False]['text':'/ @param word  case-folded word','line_number':3505,'multiline':False]['text':'/ @param flags  flags with prefix ID','line_number':3506,'multiline':False]['text':'/','line_number':3507,'multiline':False]['text':'/ @return  the updated line number.','line_number':3508,'multiline':False]['text':' If the word starts with a lower-case letter make the word with an','line_number':3519,'multiline':False]['text':' upper-case letter in word_up[].','line_number':3520,'multiline':False]['text':' array not is empty','line_number':3529,'multiline':False]['text':' Loop over all prefixes, building them byte-by-byte in prefix[].','line_number':3530,'multiline':False]['text':' When at the end of a prefix check that it supports "flags".','line_number':3531,'multiline':False]['text':' Done all bytes at this node, go up one level.','line_number':3539,'multiline':False]['text':' Do one more byte at this node.','line_number':3543,'multiline':False]['text':' End of prefix, find out how many IDs there are.','line_number':3548,'multiline':False]['text':' Check for prefix that matches the word when the','line_number':3567,'multiline':False]['text':' first letter is upper-case, but only if the prefix has','line_number':3568,'multiline':False]['text':' a condition.','line_number':3569,'multiline':False]['text':' Normal char, go one level deeper.','line_number':3582,'multiline':False]['text':' Move "p" to the end of word "start".','line_number':3594,'multiline':False]['text':' Uses the spell-checking word characters.','line_number':3595,'multiline':False]['text':' For Insert mode completion CTRL-X s:','line_number':3606,'multiline':False]['text':' Find start of the word in front of column "startcol".','line_number':3607,'multiline':False]['text':' We don't check if it is badly spelled, with completion we can only change','line_number':3608,'multiline':False]['text':' the word in front of the cursor.','line_number':3609,'multiline':False]['text':' Returns the column number of the word.','line_number':3610,'multiline':False]['text':' Find a word character before "startcol".','line_number':3620,'multiline':False]['text':' Go back to start of the word.','line_number':3630,'multiline':False]['text':' Need to check for 'spellcapcheck' now, the word is removed before','line_number':3643,'multiline':False]['text':' expand_spelling() is called.  Therefore the ugly global variable.','line_number':3644,'multiline':False]['text':' Get list of spelling suggestions.','line_number':3652,'multiline':False]['text':' Used for Insert mode completion CTRL-X ?.','line_number':3653,'multiline':False]['text':' Returns the number of matches.  The matches are in "matchp[]", array of','line_number':3654,'multiline':False]['text':' allocated strings.','line_number':3655,'multiline':False]['text':'/ @return  true if "val" is a valid 'spelllang' value.','line_number':3665,'multiline':False]['text':'/ @return  true if "val" is a valid 'spellfile' value.','line_number':3672,'multiline':False]['text':'/ Set curbuf->b_cap_prog to the regexp program for 'spellcapcheck'.','line_number':3709,'multiline':False]['text':'/ Return error message when failed, NULL when OK.','line_number':3710,'multiline':False]['text':' Prepend a ^ so that we only match at one column','line_number':3719,'multiline':False]['text':' restore the previous program','line_number':3724,'multiline':False]