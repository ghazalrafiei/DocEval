['text':' Initialized in nlua_init().','line_number':67,'multiline':False]['text':'/ Convert lua error into a Vim error message','line_number':115,'multiline':False]['text':'/','line_number':116,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':117,'multiline':False]['text':'/ @param[in]  msg  Message base, must contain one `%.*s`.','line_number':118,'multiline':False]['text':' call __tostring, convert the result and pop result.','line_number':127,'multiline':False]['text':' pop __tostring.','line_number':131,'multiline':False]['text':' defer to lua default conversion, this will render tables as [NULL].','line_number':136,'multiline':False]['text':'/ Like lua_pcall, but use debug.traceback as errfunc.','line_number':151,'multiline':False]['text':'/','line_number':152,'multiline':False]['text':'/ @param lstate Lua interpreter state','line_number':153,'multiline':False]['text':'/ @param[in] nargs Number of arguments expected by the function being called.','line_number':154,'multiline':False]['text':'/ @param[in] nresults Number of results the function returns.','line_number':155,'multiline':False]['text':' luv callbacks might be executed at any os_breakcheck/line_breakcheck','line_number':197,'multiline':False]['text':' call, so using the API directly here is not safe.','line_number':198,'multiline':False]['text':' consider out of memory errors unrecoverable, just like xmalloc()','line_number':205,'multiline':False]['text':' error message','line_number':212,'multiline':False]['text':' LUA_OK','line_number':214,'multiline':False]['text':' Terminate this thread, as the main thread may be able to continue','line_number':255,'multiline':False]['text':' execution.','line_number':256,'multiline':False]['text':' error message','line_number':274,'multiline':False]['text':' LUA_OK','line_number':276,'multiline':False]['text':'/ Copies args starting at `lua_arg0` to Lua `_G.arg`, and sets `_G.arg[0]` to the scriptname.','line_number':322,'multiline':False]['text':'/','line_number':323,'multiline':False]['text':'/ Example (arg[0] => "foo.lua", arg[1] => "--arg1", â€¦):','line_number':324,'multiline':False]['text':'/     nvim -l foo.lua --arg1 --arg2','line_number':325,'multiline':False]['text':'/','line_number':326,'multiline':False]['text':'/ @note Lua CLI sets args before "-e" as _negative_ `_G.arg` indices, but we currently don't.','line_number':327,'multiline':False]['text':'/','line_number':328,'multiline':False]['text':'/ @see https://www.lua.org/pil/1.4.html','line_number':329,'multiline':False]['text':'/ @see https://github.com/premake/premake-core/blob/1c1304637f4f5e50ba8c57aae8d1d80ec3b7aaf2/src/host/premake.c#L563-L594','line_number':330,'multiline':False]['text':'/','line_number':331,'multiline':False]['text':'/ @returns number of args','line_number':332,'multiline':False]['text':' _G.arg','line_number':336,'multiline':False]['text':' _G.arg[0] = "foo.lua"','line_number':340,'multiline':False]['text':' _G.arg[i+1] = "--foo"','line_number':344,'multiline':False]['text':'/ Schedule Lua callback on main loop's event queue','line_number':363,'multiline':False]['text':'/','line_number':364,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':365,'multiline':False]['text':' If main_loop is closing don't schedule tasks to run in the future,','line_number':374,'multiline':False]['text':' otherwise any refs allocated here will not be cleaned up.','line_number':375,'multiline':False]['text':' Dummy timer callback. Used by f_wait().','line_number':386,'multiline':False]['text':' Dummy timer close callback. Used by f_wait().','line_number':391,'multiline':False]['text':' break on error, but keep error on stack','line_number':402,'multiline':False]['text':' break if true','line_number':406,'multiline':False]['text':'/ "vim.wait(timeout, condition[, interval])" function','line_number':409,'multiline':False]['text':' Check if condition can be called.','line_number':424,'multiline':False]['text':' Check if condition is callable table','line_number':429,'multiline':False]['text':' Start dummy timer.','line_number':459,'multiline':False]['text':' Flush screen updates before blocking.','line_number':471,'multiline':False]['text':' Stop dummy timer','line_number':482,'multiline':False]['text':' vim.is_thread','line_number':552,'multiline':False]['text':' vim.NIL','line_number':558,'multiline':False]['text':' vim._empty_dict_mt','line_number':569,'multiline':False]['text':' vim.uv','line_number':578,'multiline':False]['text':' do nothing, use libluv like in a standalone interpreter','line_number':580,'multiline':False]['text':' deprecated','line_number':594,'multiline':False]['text':' package.loaded.luv = vim.uv','line_number':596,'multiline':False]['text':' otherwise luv will be reinitialized when require'luv'','line_number':597,'multiline':False]['text':' propagates error to caller','line_number':619,'multiline':False]['text':' put builtin packages in preload','line_number':626,'multiline':False]['text':' [package]','line_number':627,'multiline':False]['text':' [package, preload]','line_number':628,'multiline':False]['text':' [package, preload, i]','line_number':631,'multiline':False]['text':' [package, preload, cclosure]','line_number':632,'multiline':False]['text':' [package, preload]','line_number':633,'multiline':False]['text':' []','line_number':640,'multiline':False]['text':'/ "vim.ui_attach(ns_id, {ext_foo=true}, cb)" function','line_number':653,'multiline':False]['text':' [dict, key, val]','line_number':675,'multiline':False]['text':'/ "vim.ui_detach(ns_id)" function','line_number':704,'multiline':False]['text':'/ Initialize lua interpreter state','line_number':718,'multiline':False]['text':'/','line_number':719,'multiline':False]['text':'/ Called by lua interpreter itself to initialize state.','line_number':720,'multiline':False]['text':' print','line_number':723,'multiline':False]['text':' debug.debug','line_number':727,'multiline':False]['text':' os.getenv','line_number':734,'multiline':False]['text':' vim','line_number':741,'multiline':False]['text':' vim.api','line_number':744,'multiline':False]['text':' vim.types, vim.type_idx, vim.val_idx','line_number':747,'multiline':False]['text':' schedule','line_number':750,'multiline':False]['text':' in_fast_event','line_number':754,'multiline':False]['text':' call','line_number':758,'multiline':False]['text':' rpcrequest','line_number':762,'multiline':False]['text':' rpcnotify','line_number':766,'multiline':False]['text':' wait','line_number':770,'multiline':False]['text':' ui_attach','line_number':774,'multiline':False]['text':' ui_detach','line_number':778,'multiline':False]['text':' patch require() (only for --startuptime)','line_number':784,'multiline':False]['text':' Must do this after nlua_common_vim_init where nlua_global_refs is initialized.','line_number':787,'multiline':False]['text':' internal vim._treesitter... API','line_number':794,'multiline':False]['text':'/ Initializes global Lua interpreter, or exits Nvim on failure.','line_number':808,'multiline':False]['text':' If it is called from the main thread, it will attempt to rebuild the cache.','line_number':859,'multiline':False]['text':' Add in the lua standard libraries','line_number':867,'multiline':False]['text':' print','line_number':871,'multiline':False]['text':' vim','line_number':879,'multiline':False]['text':' in case there are leaked luarefs, leak the associated memory','line_number':929,'multiline':False]['text':' to get LeakSanitizer stacktraces on exit','line_number':930,'multiline':False]['text':' exclude final NUL','line_number':941,'multiline':False]['text':' TODO(bfredl): use proper multiline msg? Probably should implement','line_number':955,'multiline':False]['text':' print() in lua in terms of nvim_message(), when it is available.','line_number':956,'multiline':False]['text':' Make blank lines work properly','line_number':968,'multiline':False]['text':' Last was newline','line_number':971,'multiline':False]['text':'/ Print as a Vim message','line_number':977,'multiline':False]['text':'/','line_number':978,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':979,'multiline':False]['text':' tostring','line_number':997,'multiline':False]['text':' arg','line_number':998,'multiline':False]['text':' Do not use nlua_pcall here to avoid duplicate stack trace information','line_number':999,'multiline':False]['text':'/ require() for --startuptime','line_number':1046,'multiline':False]['text':'/','line_number':1047,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':1048,'multiline':False]['text':' [ name ]','line_number':1054,'multiline':False]['text':' try cached module from package.loaded first','line_number':1056,'multiline':False]['text':' [ name package.loaded module ]','line_number':1059,'multiline':False]['text':' [ name ]','line_number':1064,'multiline':False]['text':' push original require below the module name','line_number':1066,'multiline':False]['text':' [ require name ]','line_number':1069,'multiline':False]['text':' after log file was closed, try to restore','line_number':1072,'multiline':False]['text':' global require to the original function...','line_number':1073,'multiline':False]['text':' ...only if it's still referencing this wrapper,','line_number':1075,'multiline':False]['text':' to not overwrite it in case someone happened to','line_number':1076,'multiline':False]['text':' patch it in the meantime...','line_number':1077,'multiline':False]['text':' ...and then call require directly.','line_number':1084,'multiline':False]['text':'/ debug.debug: interaction with user while debugging.','line_number':1102,'multiline':False]['text':'/','line_number':1103,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':1104,'multiline':False]['text':' Avoid outputting on input line.','line_number':1122,'multiline':False]['text':' Not a Vimscript function','line_number':1153,'multiline':False]['text':' also used for freeing the variables','line_number':1172,'multiline':False]['text':' TODO(bfredl): this should be simplified in error handling refactor','line_number':1182,'multiline':False]['text':' call_func() retval is deceptive, ignore it.  Instead we set `msg_list`','line_number':1195,'multiline':False]['text':' (TRY_WRAP) to capture abort-causing non-exception errors.','line_number':1196,'multiline':False]['text':' TODO(bfredl): no','line_number':1260,'multiline':False]['text':'/ os.getenv: override os.getenv to maintain coherency. #9681','line_number':1286,'multiline':False]['text':'/','line_number':1287,'multiline':False]['text':'/ uv_os_setenv uses SetEnvironmentVariableW which does not update _environ.','line_number':1288,'multiline':False]['text':'/','line_number':1289,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':1290,'multiline':False]['text':'/ add the value to the registry','line_number':1298,'multiline':False]['text':'/ The current implementation does not support calls from threads.','line_number':1299,'multiline':False]['text':' dummy allocation to make LeakSanitizer track our luarefs','line_number':1308,'multiline':False]['text':' TODO(lewis6991): Currently cannot be run in __gc metamethods as they are','line_number':1316,'multiline':False]['text':' invoked in lua_close() which can be invoked after the ref_markers map is','line_number':1317,'multiline':False]['text':' destroyed in nlua_common_free_all_mem.','line_number':1318,'multiline':False]['text':'/ remove the value from the registry','line_number':1324,'multiline':False]['text':' NB: don't remove entry from map to track double-unref','line_number':1330,'multiline':False]['text':'/ push a value referenced in the registry','line_number':1349,'multiline':False]['text':'/ Gets a new reference to an object stored at original_ref','line_number':1355,'multiline':False]['text':'/','line_number':1356,'multiline':False]['text':'/ NOTE: It does not copy the value, it creates a new ref to the lua object.','line_number':1357,'multiline':False]['text':'/       Leaves the stack unchanged.','line_number':1358,'multiline':False]['text':'/ Evaluate lua string','line_number':1372,'multiline':False]['text':'/','line_number':1373,'multiline':False]['text':'/ Used for luaeval().','line_number':1374,'multiline':False]['text':'/','line_number':1375,'multiline':False]['text':'/ @param[in]  str  String to execute.','line_number':1376,'multiline':False]['text':'/ @param[in]  arg  Second argument to `luaeval()`.','line_number':1377,'multiline':False]['text':'/ @param[out]  ret_tv  Location where result will be saved.','line_number':1378,'multiline':False]['text':'/','line_number':1379,'multiline':False]['text':'/ @return Result of the execution.','line_number':1380,'multiline':False]['text':'/ Call a LuaCallable given some typvals','line_number':1503,'multiline':False]['text':'/','line_number':1504,'multiline':False]['text':'/ Used to call any Lua callable passed from Lua into Vimscript.','line_number':1505,'multiline':False]['text':'/','line_number':1506,'multiline':False]['text':'/ @param[in]  lstate Lua State','line_number':1507,'multiline':False]['text':'/ @param[in]  lua_cb Lua Callable','line_number':1508,'multiline':False]['text':'/ @param[in]  argcount Count of typval arguments','line_number':1509,'multiline':False]['text':'/ @param[in]  argvars Typval Arguments','line_number':1510,'multiline':False]['text':'/ @param[out] rettv The return value from the called function.','line_number':1511,'multiline':False]['text':'/ Execute Lua string','line_number':1530,'multiline':False]['text':'/','line_number':1531,'multiline':False]['text':'/ Used for nvim_exec_lua() and internally to execute a lua string.','line_number':1532,'multiline':False]['text':'/','line_number':1533,'multiline':False]['text':'/ @param[in]  str  String to execute.','line_number':1534,'multiline':False]['text':'/ @param[in]  args array of ... args','line_number':1535,'multiline':False]['text':'/ @param[out]  err  Location where error will be saved.','line_number':1536,'multiline':False]['text':'/','line_number':1537,'multiline':False]['text':'/ @return Return value of the execution.','line_number':1538,'multiline':False]['text':' TODO(tjdevries): This should probably check for callable tables as well.','line_number':1571,'multiline':False]['text':'                    We should put some work maybe into simplifying how all of that works','line_number':1572,'multiline':False]['text':'/ call a LuaRef as a function (or table with __call metamethod)','line_number':1579,'multiline':False]['text':'/','line_number':1580,'multiline':False]['text':'/ @param ref     the reference to call (not consumed)','line_number':1581,'multiline':False]['text':'/ @param name    if non-NULL, sent to callback as first arg','line_number':1582,'multiline':False]['text':'/                if NULL, only args are used','line_number':1583,'multiline':False]['text':'/ @param retval  if true, convert return value to Object','line_number':1584,'multiline':False]['text':'/                if false, only check if return value is truthy','line_number':1585,'multiline':False]['text':'/ @param err     Error details, if any (if NULL, errors are echoed)','line_number':1586,'multiline':False]['text':'/ @return        Return value of function, if retval was set. Otherwise','line_number':1587,'multiline':False]['text':'/ BOOLEAN_OBJ(true) or NIL.','line_number':1588,'multiline':False]['text':' if err is passed, the caller will deal with the error.','line_number':1603,'multiline':False]['text':'/ check if the current execution context is safe for calling deferred API','line_number':1629,'multiline':False]['text':'/ methods. Luv callbacks are unsafe as they are called inside the uv loop.','line_number':1630,'multiline':False]['text':'/ Run lua string','line_number':1636,'multiline':False]['text':'/','line_number':1637,'multiline':False]['text':'/ Used for :lua.','line_number':1638,'multiline':False]['text':'/','line_number':1639,'multiline':False]['text':'/ @param  eap  Vimscript command being run.','line_number':1640,'multiline':False]['text':' When =expr is used transform it to vim.print(expr)','line_number':1650,'multiline':False]['text':' code_buf needs to be 1 char larger then len for null byte in the end.','line_number':1654,'multiline':False]['text':' lua nlua_typval_exec doesn't expect null terminated string so len','line_number':1655,'multiline':False]['text':' needs to end before null byte.','line_number':1656,'multiline':False]['text':'/ Run lua string for each line in range','line_number':1668,'multiline':False]['text':'/','line_number':1669,'multiline':False]['text':'/ Used for :luado.','line_number':1670,'multiline':False]['text':'/','line_number':1671,'multiline':False]['text':'/ @param  eap  Vimscript command being run.','line_number':1672,'multiline':False]['text':' Get length of old_line here as calling Lua code may free it.','line_number':1722,'multiline':False]['text':'/ Run lua file','line_number':1749,'multiline':False]['text':'/','line_number':1750,'multiline':False]['text':'/ Used for :luafile.','line_number':1751,'multiline':False]['text':'/','line_number':1752,'multiline':False]['text':'/ @param  eap  Vimscript command being run.','line_number':1753,'multiline':False]['text':'/ Executes Lua code from a file or "-" (stdin).','line_number':1760,'multiline':False]['text':'/','line_number':1761,'multiline':False]['text':'/ Calls the Lua `loadfile` global as opposed to `luaL_loadfile` in case `loadfile` was overridden','line_number':1762,'multiline':False]['text':'/ in the user environment.','line_number':1763,'multiline':False]['text':'/','line_number':1764,'multiline':False]['text':'/ @param path Path to the file, may be "-" (stdin) during startup.','line_number':1765,'multiline':False]['text':'/','line_number':1766,'multiline':False]['text':'/ @return true on success, false on error (echoed) or user canceled (CTRL-c) while reading "-"','line_number':1767,'multiline':False]['text':'/ (stdin).','line_number':1768,'multiline':False]['text':' Read all input from stdin, unless interrupted (ctrl-c).','line_number':1781,'multiline':False]['text':' User canceled.','line_number':1783,'multiline':False]['text':' Error.','line_number':1787,'multiline':False]['text':' EOF.','line_number':1793,'multiline':False]['text':' loadstring() returns either:','line_number':1810,'multiline':False]['text':'  1. nil, error','line_number':1811,'multiline':False]['text':'  2. chunk, nil','line_number':1812,'multiline':False]['text':' 1','line_number':1815,'multiline':False]['text':' 2','line_number':1822,'multiline':False]['text':' [ vim ]','line_number':1880,'multiline':False]['text':' [ vim, vim._expand_pat ]','line_number':1883,'multiline':False]['text':' [ vim, vim._expand_pat, buf ]','line_number':1887,'multiline':False]['text':' [table]','line_number':1979,'multiline':False]['text':' [table, mt]','line_number':1984,'multiline':False]['text':' [table, mt, mt.__call]','line_number':1986,'multiline':False]['text':' [table]','line_number':1992,'multiline':False]['text':' []','line_number':1998,'multiline':False]['text':' [ vim ]','line_number':2015,'multiline':False]['text':' [ vim, vim._on_key ]','line_number':2018,'multiline':False]['text':' [ vim, vim._on_key, buf ]','line_number':2022,'multiline':False]['text':' avoid interrupts when the key typed is Ctrl-C','line_number':2026,'multiline':False]['text':' [ vim ]','line_number':2033,'multiline':False]['text':' [ ]','line_number':2037,'multiline':False]['text':' Sets the editor "script context" during Lua execution. Used by :verbose.','line_number':2042,'multiline':False]['text':' @param[out] current','line_number':2043,'multiline':False]['text':' Files where internal wrappers are defined so we can ignore them','line_number':2052,'multiline':False]['text':' like vim.o/opt etc are defined in _options.lua','line_number':2053,'multiline':False]['text':'/ @param preview Invoke the callback as a |:command-preview| handler.','line_number':2099,'multiline':False]['text':' f-args table','line_number':2119,'multiline':False]['text':' Reference for potential use on f-args','line_number':2121,'multiline':False]['text':' Split args by unescaped whitespace |<f-args>| (nargs dependent)','line_number':2124,'multiline':False]['text':' For commands where nargs is 1 or "?" and argument is passed, fargs = { args }','line_number':2127,'multiline':False]['text':' if nargs = "?" and no argument is passed, fargs = {}','line_number':2130,'multiline':False]['text':' Pop the reference of opts.args','line_number':2131,'multiline':False]['text':' For commands with more than one possible argument, split if argument list isn't available.','line_number':2134,'multiline':False]['text':' Pop the reference of opts.args','line_number':2135,'multiline':False]['text':' If argument list is available, just use it.','line_number':2152,'multiline':False]['text':' The size of this buffer is chosen empirically to be large enough to hold','line_number':2175,'multiline':False]['text':' every possible modifier (with room to spare). If the list of possible','line_number':2176,'multiline':False]['text':' modifiers grows this may need to be updated.','line_number':2177,'multiline':False]['text':' smods table','line_number':2183,'multiline':False]['text':' The modifiers that are simple flags','line_number':2235,'multiline':False]['text':'/ String representation of a Lua function reference','line_number':2272,'multiline':False]['text':'/','line_number':2273,'multiline':False]['text':'/ @return Allocated string','line_number':2274,'multiline':False]['text':'/ Execute the vim._defaults module to set up default mappings and autocommands','line_number':2303,'multiline':False]['text':'/ check lua function exist','line_number':2317,'multiline':False]