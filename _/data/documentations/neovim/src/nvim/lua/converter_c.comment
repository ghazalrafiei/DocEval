['text':'/ Determine, which keys lua table contains','line_number':28,'multiline':False]['text':'/< Maximum positive integral value found.','line_number':30,'multiline':False]['text':'/< Number of string keys.','line_number':31,'multiline':False]['text':'/< True if there is string key with NUL byte.','line_number':32,'multiline':False]['text':'/< If has_type_key is true then attached value. Otherwise','line_number':33,'multiline':False]['text':'/< either kObjectTypeNil, kObjectTypeDictionary or','line_number':34,'multiline':False]['text':'/< kObjectTypeArray, depending on other properties.','line_number':35,'multiline':False]['text':'/< If has_val_key and val_type == LUA_TNUMBER: value.','line_number':36,'multiline':False]['text':'/< True if type key is present.','line_number':37,'multiline':False]['text':' Total number of keys.','line_number':53,'multiline':False]['text':' If has_val_key: lua type of the value.','line_number':54,'multiline':False]['text':' True if val key was found,','line_number':55,'multiline':False]['text':' @see nlua_push_val_idx().','line_number':56,'multiline':False]['text':' Number of keys that are not string, integral','line_number':57,'multiline':False]['text':' or type keys.','line_number':58,'multiline':False]['text':' Determine what is the last number in a *sequence* of keys.','line_number':128,'multiline':False]['text':' This condition makes sure that Neovim will not crash when it gets table','line_number':129,'multiline':False]['text':' {[vim.type_idx]=vim.types.array, [SIZE_MAX]=1}: without it maxidx will','line_number':130,'multiline':False]['text':' be SIZE_MAX, with this condition it should be zero and [SIZE_MAX] key','line_number':131,'multiline':False]['text':' should be ignored.','line_number':132,'multiline':False]['text':'/ Helper structure for nlua_pop_typval','line_number':171,'multiline':False]['text':'/< Location where conversion result is saved.','line_number':173,'multiline':False]['text':'/< True if tv is a container.','line_number':174,'multiline':False]['text':'/< If true then tv is a _VAL part of special dictionary','line_number':175,'multiline':False]['text':'/< that represents mapping.','line_number':176,'multiline':False]['text':'/< Container index (used to detect self-referencing structures).','line_number':177,'multiline':False]['text':'/ Convert lua object to Vimscript typval_T','line_number':180,'multiline':False]['text':'/','line_number':181,'multiline':False]['text':'/ Should pop exactly one value from lua stack.','line_number':182,'multiline':False]['text':'/','line_number':183,'multiline':False]['text':'/ @param  lstate  Lua state.','line_number':184,'multiline':False]['text':'/ @param[out]  ret_tv Where to put the result.','line_number':185,'multiline':False]['text':'/','line_number':186,'multiline':False]['text':'/ @return `true` in case of success, `false` in case of failure. Error is','line_number':187,'multiline':False]['text':'/         reported automatically.','line_number':188,'multiline':False]['text':' Value: not populated yet, need to create list item to push.','line_number':228,'multiline':False]['text':' Not populated yet, need to create list item to push.','line_number':259,'multiline':False]['text':' TODO(ZyX-I): Use indexes, here list item *will* be reallocated.','line_number':264,'multiline':False]['text':' Only need to track table refs if we have a metatable associated.','line_number':310,'multiline':False]['text':' TODO(bfredl): check mt.__call and convert to function?','line_number':395,'multiline':False]['text':'/ Convert Vimscript typval_T to lua value','line_number':598,'multiline':False]['text':'/','line_number':599,'multiline':False]['text':'/ Should leave single value in lua stack. May only fail if lua failed to grow','line_number':600,'multiline':False]['text':'/ stack.','line_number':601,'multiline':False]['text':'/','line_number':602,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':603,'multiline':False]['text':'/ @param[in]  tv  typval_T to convert.','line_number':604,'multiline':False]['text':'/','line_number':605,'multiline':False]['text':'/ @return true in case of success, false otherwise.','line_number':606,'multiline':False]['text':'/ Push value which is a type index','line_number':623,'multiline':False]['text':'/','line_number':624,'multiline':False]['text':'/ Used for all “typed” tables: i.e. for all tables which represent Vimscript values.','line_number':625,'multiline':False]['text':'/ Push value which is a value index','line_number':632,'multiline':False]['text':'/','line_number':633,'multiline':False]['text':'/ Used for tables which represent scalar values, like float value.','line_number':634,'multiline':False]['text':'/ Push type','line_number':641,'multiline':False]['text':'/','line_number':642,'multiline':False]['text':'/ Type is a value in vim.types table.','line_number':643,'multiline':False]['text':'/','line_number':644,'multiline':False]['text':'/ @param[out]  lstate  Lua state.','line_number':645,'multiline':False]['text':'/ @param[in]   type    Type to push.','line_number':646,'multiline':False]['text':'/ Create Lua table which has an entry that determines its Vimscript type','line_number':653,'multiline':False]['text':'/','line_number':654,'multiline':False]['text':'/ @param[out]  lstate  Lua state.','line_number':655,'multiline':False]['text':'/ @param[in]   narr    Number of “array” entries to be populated later.','line_number':656,'multiline':False]['text':'/ @param[in]   nrec    Number of “dictionary” entries to be populated later.','line_number':657,'multiline':False]['text':'/ @param[in]   type    Type of the table.','line_number':658,'multiline':False]['text':'/ Convert given String to lua string','line_number':669,'multiline':False]['text':'/','line_number':670,'multiline':False]['text':'/ Leaves converted string on top of the stack.','line_number':671,'multiline':False]['text':'/ Convert given Integer to lua number','line_number':678,'multiline':False]['text':'/','line_number':679,'multiline':False]['text':'/ Leaves converted number on top of the stack.','line_number':680,'multiline':False]['text':'/ Convert given Float to lua table','line_number':687,'multiline':False]['text':'/','line_number':688,'multiline':False]['text':'/ Leaves converted table on top of the stack.','line_number':689,'multiline':False]['text':'/ Convert given Float to lua boolean','line_number':703,'multiline':False]['text':'/','line_number':704,'multiline':False]['text':'/ Leaves converted value on top of the stack.','line_number':705,'multiline':False]['text':'/ Convert given Dictionary to lua table','line_number':712,'multiline':False]['text':'/','line_number':713,'multiline':False]['text':'/ Leaves converted table on top of the stack.','line_number':714,'multiline':False]['text':'/ Convert given Array to lua table','line_number':734,'multiline':False]['text':'/','line_number':735,'multiline':False]['text':'/ Leaves converted table on top of the stack.','line_number':736,'multiline':False]['text':'/ Convert given Object to lua value','line_number':760,'multiline':False]['text':'/','line_number':761,'multiline':False]['text':'/ Leaves converted value on top of the stack.','line_number':762,'multiline':False]['text':'/ Convert lua value to string','line_number':802,'multiline':False]['text':'/','line_number':803,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':804,'multiline':False]['text':'/ Convert lua value to integer','line_number':823,'multiline':False]['text':'/','line_number':824,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':825,'multiline':False]['text':'/ Convert lua value to boolean','line_number':844,'multiline':False]['text':'/','line_number':845,'multiline':False]['text':'/ Despite the name of the function, this uses lua semantics for booleans.','line_number':846,'multiline':False]['text':'/ thus `err` is never set as any lua value can be co-erced into a lua bool','line_number':847,'multiline':False]['text':'/','line_number':848,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':849,'multiline':False]['text':'/ Convert lua value to boolean','line_number':858,'multiline':False]['text':'/','line_number':859,'multiline':False]['text':'/ This follows API conventions for a Boolean value, compare api_object_to_bool','line_number':860,'multiline':False]['text':'/','line_number':861,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':862,'multiline':False]['text':'/ Check whether typed table on top of the stack has given type','line_number':888,'multiline':False]['text':'/','line_number':889,'multiline':False]['text':'/ @param[in]  lstate  Lua state.','line_number':890,'multiline':False]['text':'/ @param[out]  err  Location where error will be saved. May be NULL.','line_number':891,'multiline':False]['text':'/ @param[in]  type  Type to check.','line_number':892,'multiline':False]['text':'/','line_number':893,'multiline':False]['text':'/ @return @see nlua_traverse_table().','line_number':894,'multiline':False]['text':'/ Convert lua table to float','line_number':922,'multiline':False]['text':'/','line_number':923,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':924,'multiline':False]['text':'/ Convert lua table to array without determining whether it is array','line_number':943,'multiline':False]['text':'/','line_number':944,'multiline':False]['text':'/ @param  lstate  Lua state.','line_number':945,'multiline':False]['text':'/ @param[in]  table_props  nlua_traverse_table() output.','line_number':946,'multiline':False]['text':'/ @param[out]  err  Location where error will be saved.','line_number':947,'multiline':False]['text':'/ Convert lua table to array','line_number':978,'multiline':False]['text':'/','line_number':979,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':980,'multiline':False]['text':'/ Convert lua table to dictionary','line_number':992,'multiline':False]['text':'/','line_number':993,'multiline':False]['text':'/ Always pops one value from the stack. Does not check whether whether topmost','line_number':994,'multiline':False]['text':'/ value on the stack is a table.','line_number':995,'multiline':False]['text':'/','line_number':996,'multiline':False]['text':'/ @param  lstate  Lua interpreter state.','line_number':997,'multiline':False]['text':'/ @param[in]  table_props  nlua_traverse_table() output.','line_number':998,'multiline':False]['text':'/ @param[out]  err  Location where error will be saved.','line_number':999,'multiline':False]['text':' stack: dict, key, value','line_number':1014,'multiline':False]['text':' stack: dict, key, value, key','line_number':1018,'multiline':False]['text':' stack: dict, key, value','line_number':1021,'multiline':False]['text':' stack: dict, key','line_number':1025,'multiline':False]['text':' stack: dict, key','line_number':1028,'multiline':False]['text':' stack:','line_number':1035,'multiline':False]['text':' stack: dict, key','line_number':1041,'multiline':False]['text':'/ Convert lua table to dictionary','line_number':1049,'multiline':False]['text':'/','line_number':1050,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':1051,'multiline':False]['text':'/ Helper structure for nlua_pop_Object','line_number':1065,'multiline':False]['text':'/< Location where conversion result is saved.','line_number':1067,'multiline':False]['text':'/< True if tv is a container.','line_number':1068,'multiline':False]['text':'/ Convert lua table to object','line_number':1071,'multiline':False]['text':'/','line_number':1072,'multiline':False]['text':'/ Always pops one value from the stack.','line_number':1073,'multiline':False]['text':' stack: …, dict, key','line_number':1089,'multiline':False]['text':' stack: …, dict, new key, val','line_number':1097,'multiline':False]['text':' stack: …, dict, new key','line_number':1103,'multiline':False]['text':' stack: …, dict, new key, val','line_number':1106,'multiline':False]['text':' stack: …, dict','line_number':1120,'multiline':False]['text':' stack: …','line_number':1122,'multiline':False]['text':'/ Record some auxiliary values in vim module','line_number':1265,'multiline':False]['text':'/','line_number':1266,'multiline':False]['text':'/ Assumes that module table is on top of the stack.','line_number':1267,'multiline':False]['text':'/','line_number':1268,'multiline':False]['text':'/ Recorded values:','line_number':1269,'multiline':False]['text':'/','line_number':1270,'multiline':False]['text':'/ `vim.type_idx`: @see nlua_push_type_idx()','line_number':1271,'multiline':False]['text':'/ `vim.val_idx`: @see nlua_push_val_idx()','line_number':1272,'multiline':False]['text':'/ `vim.types`: table mapping possible values of `vim.type_idx` to string','line_number':1273,'multiline':False]['text':'/              names (i.e. `array`, `float`, `dictionary`) and back.','line_number':1274,'multiline':False]['text':' lua specific variant of api_dict_to_keydict','line_number':1312,'multiline':False]['text':' [dict, nil]','line_number':1321,'multiline':False]['text':' [dict, key, value]','line_number':1323,'multiline':False]['text':' []','line_number':1329,'multiline':False]['text':' [dict]','line_number':1366,'multiline':False]['text':' []','line_number':1368,'multiline':False]