['text':' IWYU pragma: keep','line_number':7,'multiline':False]['text':' IWYU pragma: keep','line_number':9,'multiline':False]['text':' IWYU pragma: keep','line_number':15,'multiline':False]['text':' IWYU pragma: keep','line_number':16,'multiline':False]['text':' IWYU pragma: keep','line_number':17,'multiline':False]['text':' IWYU pragma: keep','line_number':18,'multiline':False]['text':' Structure returned by get_lval() and used by set_var_lval().','line_number':23,'multiline':False]['text':' For a plain name:','line_number':24,'multiline':False]['text':'      "name"      points to the variable name.','line_number':25,'multiline':False]['text':'      "exp_name"  is NULL.','line_number':26,'multiline':False]['text':'      "tv"        is NULL','line_number':27,'multiline':False]['text':' For a magic braces name:','line_number':28,'multiline':False]['text':'      "name"      points to the expanded variable name.','line_number':29,'multiline':False]['text':'      "exp_name"  is non-NULL, to be freed later.','line_number':30,'multiline':False]['text':'      "tv"        is NULL','line_number':31,'multiline':False]['text':' For an index in a list:','line_number':32,'multiline':False]['text':'      "name"      points to the (expanded) variable name.','line_number':33,'multiline':False]['text':'      "exp_name"  NULL or non-NULL, to be freed later.','line_number':34,'multiline':False]['text':'      "tv"        points to the (first) list item value','line_number':35,'multiline':False]['text':'      "li"        points to the (first) list item','line_number':36,'multiline':False]['text':'      "range", "n1", "n2" and "empty2" indicate what items are used.','line_number':37,'multiline':False]['text':' For an existing Dict item:','line_number':38,'multiline':False]['text':'      "name"      points to the (expanded) variable name.','line_number':39,'multiline':False]['text':'      "exp_name"  NULL or non-NULL, to be freed later.','line_number':40,'multiline':False]['text':'      "tv"        points to the dict item value','line_number':41,'multiline':False]['text':'      "newkey"    is NULL','line_number':42,'multiline':False]['text':' For a non-existing Dict item:','line_number':43,'multiline':False]['text':'      "name"      points to the (expanded) variable name.','line_number':44,'multiline':False]['text':'      "exp_name"  NULL or non-NULL, to be freed later.','line_number':45,'multiline':False]['text':'      "tv"        points to the Dictionary typval_T','line_number':46,'multiline':False]['text':'      "newkey"    is the key for the new item.','line_number':47,'multiline':False]['text':'/< Start of variable name (can be NULL).','line_number':49,'multiline':False]['text':'/< Length of the .ll_name.','line_number':50,'multiline':False]['text':'/< NULL or expanded name in allocated memory.','line_number':51,'multiline':False]['text':'/< Typeval of item being used.  If "newkey"','line_number':52,'multiline':False]['text':'/< isn't NULL it's the Dict to which to add the item.','line_number':53,'multiline':False]['text':'/< The list item or NULL.','line_number':54,'multiline':False]['text':'/< The list or NULL.','line_number':55,'multiline':False]['text':'/< true when a [i:j] range was used.','line_number':56,'multiline':False]['text':'/< Second index is empty: [i:].','line_number':57,'multiline':False]['text':'/< First index for list.','line_number':58,'multiline':False]['text':'/< Second index for list range.','line_number':59,'multiline':False]['text':'/< The Dictionary or NULL.','line_number':60,'multiline':False]['text':'/< The dictitem or NULL.','line_number':61,'multiline':False]['text':'/< New key for Dict in allocated memory or NULL.','line_number':62,'multiline':False]['text':'/< The Blob or NULL.','line_number':63,'multiline':False]['text':'/ enum used by var_flavour()','line_number':66,'multiline':False]['text':' doesn't start with uppercase','line_number':68,'multiline':False]['text':' starts with uppercase, some lower','line_number':69,'multiline':False]['text':' all uppercase','line_number':70,'multiline':False]['text':'/ Defines for Vim variables','line_number':73,'multiline':False]['text':' Nvim','line_number':165,'multiline':False]['text':' String with NULL value. For test purposes only.','line_number':168,'multiline':False]['text':' List with NULL value. For test purposes only.','line_number':169,'multiline':False]['text':' Dictionary with NULL value. For test purposes only.','line_number':170,'multiline':False]['text':' Blob with NULL value. For test purposes only.','line_number':171,'multiline':False]['text':'/ All recognized msgpack types','line_number':177,'multiline':False]['text':'/ Array mapping values from MessagePackType to corresponding list pointers','line_number':191,'multiline':False]['text':' Struct passed to get_v_event() and restore_v_event().','line_number':196,'multiline':False]['text':'/ trans_function_name() flags','line_number':202,'multiline':False]['text':'/< May use internal function name','line_number':204,'multiline':False]['text':'/< Do not emit error messages.','line_number':205,'multiline':False]['text':'/< Do not use script autoloading.','line_number':206,'multiline':False]['text':'/< Do not dereference a Funcref.','line_number':207,'multiline':False]['text':'/< Will not change the variable.','line_number':208,'multiline':False]['text':'/ get_lval() flags','line_number':211,'multiline':False]['text':'/< Do not emit error messages.','line_number':213,'multiline':False]['text':'/< Do not use script autoloading.','line_number':214,'multiline':False]['text':'/< Indicates that caller will not change','line_number':215,'multiline':False]['text':'/< the value (prevents error message).','line_number':216,'multiline':False]['text':'/ flags for find_name_end()','line_number':219,'multiline':False]['text':' find_name_end(): include [] in name','line_number':220,'multiline':False]['text':' find_name_end(): check name starts with','line_number':221,'multiline':False]['text':' valid character','line_number':222,'multiline':False]['text':'/< Errors in a repeating timer.','line_number':229,'multiline':False]['text':'/ types for expressions.','line_number':236,'multiline':False]['text':'/< ==','line_number':239,'multiline':False]['text':'/< !=','line_number':240,'multiline':False]['text':'/< >','line_number':241,'multiline':False]['text':'/< >=','line_number':242,'multiline':False]['text':'/< <','line_number':243,'multiline':False]['text':'/< <=','line_number':244,'multiline':False]['text':'/< =~','line_number':245,'multiline':False]['text':'/< !~','line_number':246,'multiline':False]['text':'/< is','line_number':247,'multiline':False]['text':'/< isnot','line_number':248,'multiline':False]['text':'/ Type for dict_list function','line_number':251,'multiline':False]['text':'/< List dictionary keys.','line_number':253,'multiline':False]['text':'/< List dictionary values.','line_number':254,'multiline':False]['text':'/< List dictionary contents: [keys, values].','line_number':255,'multiline':False]['text':' Used for checking if local variables or arguments used in a lambda.','line_number':260,'multiline':False]['text':'/ Struct passed through eval() functions.','line_number':263,'multiline':False]['text':'/ See EVALARG_EVALUATE for a fixed value with eval_flags set to EVAL_EVALUATE.','line_number':264,'multiline':False]['text':'/< EVAL_ flag values below','line_number':266,'multiline':False]['text':'/ copied from exarg_T when "getline" is "getsourceline". Can be NULL.','line_number':268,'multiline':False]['text':'/< argument for eval_getline()','line_number':270,'multiline':False]['text':'/ pointer to the last line obtained with getsourceline()','line_number':272,'multiline':False]['text':'/ Flag for expression evaluation.','line_number':276,'multiline':False]['text':'/< when missing don't actually evaluate','line_number':278,'multiline':False]['text':' Character used as separated in autoload function/variable names.','line_number':281,'multiline':False]['text':'/ Passed to an eval() function to enable evaluation.','line_number':284,'multiline':False]