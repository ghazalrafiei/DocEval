['text':' message.c: functions for displaying messages on the command line','line_number':1,'multiline':False]['text':' To be able to scroll back at the "more" and "hit-enter" prompts we need to','line_number':59,'multiline':False]['text':' store the displayed text and remember where screen lines start.','line_number':60,'multiline':False]['text':' true when line ends after this text','line_number':65,'multiline':False]['text':' column in which text starts','line_number':66,'multiline':False]['text':' text attributes','line_number':67,'multiline':False]['text':' text to be displayed','line_number':68,'multiline':False]['text':' Magic chars used in confirm dialog strings','line_number':71,'multiline':False]['text':' displaying confirm_msg','line_number':77,'multiline':False]['text':' ":confirm" message','line_number':81,'multiline':False]['text':' tail of confirm_msg','line_number':82,'multiline':False]['text':' keep_msg was set by msgmore()','line_number':91,'multiline':False]['text':' When writing messages to the screen, there are many different situations.','line_number':93,'multiline':False]['text':' A number of variables is used to remember the current state:','line_number':94,'multiline':False]['text':' msg_didany       true when messages were written since the last time the','line_number':95,'multiline':False]['text':'                  user reacted to a prompt.','line_number':96,'multiline':False]['text':'                  Reset: After hitting a key for the hit-return prompt,','line_number':97,'multiline':False]['text':'                  hitting <CR> for the command line or input().','line_number':98,'multiline':False]['text':'                  Set: When any message is written to the screen.','line_number':99,'multiline':False]['text':' msg_didout       true when something was written to the current line.','line_number':100,'multiline':False]['text':'                  Reset: When advancing to the next line, when the current','line_number':101,'multiline':False]['text':'                  text can be overwritten.','line_number':102,'multiline':False]['text':'                  Set: When any message is written to the screen.','line_number':103,'multiline':False]['text':' msg_nowait       No extra delay for the last drawn message.','line_number':104,'multiline':False]['text':'                  Used in normal_cmd() before the mode message is drawn.','line_number':105,'multiline':False]['text':' emsg_on_display  There was an error message recently.  Indicates that there','line_number':106,'multiline':False]['text':'                  should be a delay before redrawing.','line_number':107,'multiline':False]['text':' msg_scroll       The next message should not overwrite the current one.','line_number':108,'multiline':False]['text':' msg_scrolled     How many lines the screen has been scrolled (because of','line_number':109,'multiline':False]['text':'                  messages).  Used in update_screen() to scroll the screen','line_number':110,'multiline':False]['text':'                  back.  Incremented each time the screen scrolls a line.','line_number':111,'multiline':False]['text':' msg_scrolled_ign  true when msg_scrolled is non-zero and msg_puts_attr()','line_number':112,'multiline':False]['text':'                  writes something without scrolling should not make','line_number':113,'multiline':False]['text':'                  need_wait_return to be set.  This is a hack to make ":ts"','line_number':114,'multiline':False]['text':'                  work without an extra prompt.','line_number':115,'multiline':False]['text':' lines_left       Number of lines available for messages before the','line_number':116,'multiline':False]['text':'                  more-prompt is to be given.  -1 when not set.','line_number':117,'multiline':False]['text':' need_wait_return true when the hit-return prompt is needed.','line_number':118,'multiline':False]['text':'                  Reset: After giving the hit-return prompt, when the user','line_number':119,'multiline':False]['text':'                  has answered some other prompt.','line_number':120,'multiline':False]['text':'                  Set: When the ruler or typeahead display is overwritten,','line_number':121,'multiline':False]['text':'                  scrolling the screen for some message.','line_number':122,'multiline':False]['text':' keep_msg         Message to be displayed after redrawing the screen, in','line_number':123,'multiline':False]['text':'                  main_loop().','line_number':124,'multiline':False]['text':'                  This is an allocated string or NULL when not used.','line_number':125,'multiline':False]['text':' Extended msg state, currently used for external UIs with ext_messages','line_number':127,'multiline':False]['text':'/< will overwrite last message','line_number':134,'multiline':False]['text':'/< number of messages currently visible','line_number':135,'multiline':False]['text':'/ Shouldn't clear message after leaving cmdline','line_number':139,'multiline':False]['text':' TODO(bfredl): eventually should be set to "invalid". I e all callers','line_number':177,'multiline':False]['text':' will use the grid including clear to EOS if necessary.','line_number':178,'multiline':False]['text':' Tricky: allow resize while pager or ex mode is active','line_number':185,'multiline':False]['text':' don't throttle in 'cmdheight' area','line_number':187,'multiline':False]['text':' TODO(bfredl): this should already be the case, but fails in some','line_number':210,'multiline':False]['text':' "batched" executions where compute_cmdrow() use stale positions or','line_number':211,'multiline':False]['text':' something.','line_number':212,'multiline':False]['text':'/ Like msg() but keep it silent when 'verbosefile' is set.','line_number':217,'multiline':False]['text':'/ Displays the string 's' on the status line','line_number':227,'multiline':False]['text':'/ When terminal not initialized (yet) os_errmsg(..) is used.','line_number':228,'multiline':False]['text':'/','line_number':229,'multiline':False]['text':'/ @return  true if wait_return() not called','line_number':230,'multiline':False]['text':'/ Similar to msg_outtrans, but support newlines and tabs.','line_number':237,'multiline':False]['text':' Printing all char that are before the char found by strpbrk','line_number':250,'multiline':False]['text':' Print the rest of the message. We know there is no special','line_number':262,'multiline':False]['text':' character because strpbrk returned NULL','line_number':263,'multiline':False]['text':'/ @param keep set keep_msg if it doesn't scroll','line_number':287,'multiline':False]['text':' Not implemented. 'multiline' is only used by nvim-added messages,','line_number':295,'multiline':False]['text':' which should avoid 'keep' behavior (just show the message at','line_number':296,'multiline':False]['text':' the correct time already).','line_number':297,'multiline':False]['text':' Skip messages not match ":filter pattern".','line_number':301,'multiline':False]['text':' Don't filter when there is an error.','line_number':302,'multiline':False]['text':' It is possible that displaying a messages causes a problem (e.g.,','line_number':311,'multiline':False]['text':' when redrawing the window), which causes another message, etc..    To','line_number':312,'multiline':False]['text':' break this loop, limit the recursiveness to 3 levels.','line_number':313,'multiline':False]['text':' Add message to history (unless it's a repeated kept message or a','line_number':319,'multiline':False]['text':' truncated message)','line_number':320,'multiline':False]['text':' Truncate the message if needed.','line_number':329,'multiline':False]['text':'/ Truncate a string such that it can be printed without causing a scroll.','line_number':358,'multiline':False]['text':'/','line_number':359,'multiline':False]['text':'/ @return  an allocated string or NULL when no truncating is done.','line_number':360,'multiline':False]['text':'/','line_number':361,'multiline':False]['text':'/ @param force  always truncate','line_number':362,'multiline':False]['text':' May truncate message to avoid a hit-return prompt','line_number':367,'multiline':False]['text':' Use all the columns.','line_number':374,'multiline':False]['text':' Use up to 'showcmd' column.','line_number':377,'multiline':False]['text':' may have up to 18 bytes per cell (6 per char, up to two','line_number':381,'multiline':False]['text':' composing chars)','line_number':382,'multiline':False]['text':'/ Truncate a string "s" to "buf" with cell width "room".','line_number':391,'multiline':False]['text':'/ "s" and "buf" may be equal.','line_number':392,'multiline':False]['text':' "..." takes 3 chars','line_number':395,'multiline':False]['text':' First part: Start of the string.','line_number':413,'multiline':False]['text':' text fits without truncating!','line_number':416,'multiline':False]['text':' Last part: End of the string.','line_number':434,'multiline':False]['text':' text fits without truncating','line_number':449,'multiline':False]['text':' set the middle and copy the last part','line_number':463,'multiline':False]['text':' can't fit in the "...", just truncate it','line_number':472,'multiline':False]['text':'/ Shows a printf-style message with attributes.','line_number':477,'multiline':False]['text':'/','line_number':478,'multiline':False]['text':'/ Note: Caller must check the resulting string is shorter than IOSIZE!!!','line_number':479,'multiline':False]['text':'/','line_number':480,'multiline':False]['text':'/ @see semsg','line_number':481,'multiline':False]['text':'/ @see swmsg','line_number':482,'multiline':False]['text':'/','line_number':483,'multiline':False]['text':'/ @param s printf-style format message','line_number':484,'multiline':False]['text':' Remember the last sourcing name/lnum used in an error message, so that it','line_number':507,'multiline':False]['text':' isn't printed each time when it didn't change.','line_number':508,'multiline':False]['text':'/ Reset the last used sourcing name/lnum.  Makes sure it is displayed again','line_number':512,'multiline':False]['text':'/ for the next error message;','line_number':513,'multiline':False]['text':'/ @return  true if "SOURCING_NAME" differs from "last_sourcing_name".','line_number':520,'multiline':False]['text':'/ Get the message about the source, as used for an error message','line_number':532,'multiline':False]['text':'/','line_number':533,'multiline':False]['text':'/ @return [allocated] String with room for one more character. NULL when no','line_number':534,'multiline':False]['text':'/                     message is to be given.','line_number':535,'multiline':False]['text':'/ Get the message about the source lnum, as used for an error message.','line_number':557,'multiline':False]['text':'/','line_number':558,'multiline':False]['text':'/ @return [allocated] String with room for one more character. NULL when no','line_number':559,'multiline':False]['text':'/                     message is to be given.','line_number':560,'multiline':False]['text':' lnum is 0 when executing a command from the command line','line_number':564,'multiline':False]['text':' argument, we don't want a line number then','line_number':565,'multiline':False]['text':'/ Display name and line number for the source of an error.','line_number':578,'multiline':False]['text':'/ Remember the file name and line number, so that for the next error the info','line_number':579,'multiline':False]['text':'/ is only displayed if it changed.','line_number':580,'multiline':False]['text':' Bail out if something called here causes an error.','line_number':585,'multiline':False]['text':' this will take more than one line','line_number':594,'multiline':False]['text':' only once for each line','line_number':602,'multiline':False]['text':' remember the last sourcing name printed, also when it's empty','line_number':605,'multiline':False]['text':'/ @return  true if not giving error messages right now:','line_number':617,'multiline':False]['text':'/            If "emsg_off" is set: no error messages at the moment.','line_number':618,'multiline':False]['text':'/            If "msg" is in 'debug': do error message but without side effects.','line_number':619,'multiline':False]['text':'/            If "emsg_skip" is set: never do error messages.','line_number':620,'multiline':False]['text':' Skip this if not giving error messages at the moment.','line_number':635,'multiline':False]['text':' If "emsg_severe" is true: When an error exception is to be thrown,','line_number':642,'multiline':False]['text':' prefer this message over previous messages for the same command.','line_number':643,'multiline':False]['text':' Cause a throw of an error exception if appropriate.  Don't display','line_number':648,'multiline':False]['text':' the error message in this case.  (If no matching catch clause will','line_number':649,'multiline':False]['text':' be found, the message will be displayed later on.)  "ignore" is set','line_number':650,'multiline':False]['text':' when the message should be ignored completely (used for the','line_number':651,'multiline':False]['text':' interrupt message).','line_number':652,'multiline':False]['text':' set "v:errmsg", also when using ":silent! cmd"','line_number':667,'multiline':False]['text':' When using ":silent! cmd" ignore error messages.','line_number':670,'multiline':False]['text':' But do write it to the redirection file.','line_number':671,'multiline':False]['text':' Log (silent) errors as debug messages.','line_number':692,'multiline':False]['text':' Log editor errors as INFO.','line_number':703,'multiline':False]['text':' Reset msg_silent, an error causes messages to be switched back on.','line_number':712,'multiline':False]['text':' break :global command','line_number':716,'multiline':False]['text':' also includes flush_buffers()','line_number':721,'multiline':False]['text':' flush internal buffers','line_number':723,'multiline':False]['text':' flag for DoOneCmd()','line_number':725,'multiline':False]['text':' remember there is an error message','line_number':728,'multiline':False]['text':' set highlight mode for error messages','line_number':729,'multiline':False]['text':' needed in case emsg() is called after','line_number':731,'multiline':False]['text':' wait_return() has reset need_wait_return','line_number':732,'multiline':False]['text':' and a redraw is expected because','line_number':733,'multiline':False]['text':' msg_scrolled is non-zero','line_number':734,'multiline':False]['text':' Display name and line number for the source of the error.','line_number':739,'multiline':False]['text':' Display the error message itself.','line_number':743,'multiline':False]['text':' Wait for this msg.','line_number':744,'multiline':False]['text':'/ emsg() - display an error message','line_number':748,'multiline':False]['text':'/','line_number':749,'multiline':False]['text':'/ Rings the bell, if appropriate, and calls message() to do the real work','line_number':750,'multiline':False]['text':'/ When terminal not initialized (yet) os_errmsg(..) is used.','line_number':751,'multiline':False]['text':'/','line_number':752,'multiline':False]['text':'/ @return true if wait_return() not called','line_number':753,'multiline':False]['text':'/ Print an error message with unknown number of arguments','line_number':764,'multiline':False]['text':'/','line_number':765,'multiline':False]['text':'/ @return whether the message was displayed','line_number':766,'multiline':False]['text':'/ Print an error message with unknown number of arguments','line_number':801,'multiline':False]['text':'/ Same as emsg(...), but abort on error when ABORT_ON_INTERNAL_ERROR is','line_number':814,'multiline':False]['text':'/ defined. It is used for internal errors only, so that they can be','line_number':815,'multiline':False]['text':'/ detected when fuzzing vim.','line_number':816,'multiline':False]['text':' avoid overwriting the error message','line_number':826,'multiline':False]['text':'/ Same as semsg(...) but abort on error when ABORT_ON_INTERNAL_ERROR is','line_number':832,'multiline':False]['text':'/ defined. It is used for internal errors only, so that they can be','line_number':833,'multiline':False]['text':'/ detected when fuzzing vim.','line_number':834,'multiline':False]['text':' avoid overwriting the error message','line_number':846,'multiline':False]['text':'/ Give an "Internal error" message.','line_number':852,'multiline':False]['text':'/ Like msg(), but truncate to a single line if p_shm contains 't', or when','line_number':895,'multiline':False]['text':'/ "force" is true.  This truncates in another way as for normal messages.','line_number':896,'multiline':False]['text':'/ Careful: The string may be changed by msg_may_trunc()!','line_number':897,'multiline':False]['text':'/','line_number':898,'multiline':False]['text':'/ @return  a pointer to the printed message, if wait_return() not called.','line_number':899,'multiline':False]['text':' Add message to history before truncating.','line_number':902,'multiline':False]['text':'/ Check if message "s" should be truncated at the start (for filenames).','line_number':917,'multiline':False]['text':'/','line_number':918,'multiline':False]['text':'/ @return  a pointer to where the truncated message starts.','line_number':919,'multiline':False]['text':'/','line_number':920,'multiline':False]['text':'/ @note: May change the message by replacing a character with '<'.','line_number':921,'multiline':False]['text':' There may be room anyway when there are multibyte chars.','line_number':933,'multiline':False]['text':'/ @param[in]  len  Length of s or -1.','line_number':957,'multiline':False]['text':' Don't let the message history get too big','line_number':971,'multiline':False]['text':' allocate an entry and add the message at the end of the history','line_number':976,'multiline':False]['text':' remove leading and trailing newlines','line_number':982,'multiline':False]['text':'/ Delete the first (oldest) message from the history.','line_number':1009,'multiline':False]['text':'/','line_number':1010,'multiline':False]['text':'/ @return  FAIL if there are no messages.','line_number':1011,'multiline':False]['text':' history is becoming empty','line_number':1019,'multiline':False]['text':'/ :messages command implementation','line_number':1030,'multiline':False]['text':' Count total messages','line_number':1052,'multiline':False]['text':' Skip without number of messages specified','line_number':1059,'multiline':False]['text':' Display what was not skipped.','line_number':1063,'multiline':False]['text':'/ Call this after prompting the user.  This will avoid a hit-return message','line_number':1109,'multiline':False]['text':'/ and a delay.','line_number':1110,'multiline':False]['text':'/ Wait for the user to hit a key (normally Enter)','line_number':1122,'multiline':False]['text':'/','line_number':1123,'multiline':False]['text':'/ @param redraw  if true, redraw the entire screen UPD_NOT_VALID','line_number':1124,'multiline':False]['text':'/                if false, do a normal redraw','line_number':1125,'multiline':False]['text':'/                if -1, don't redraw at all','line_number':1126,'multiline':False]['text':' If using ":silent cmd", don't wait for a return.  Also don't set','line_number':1137,'multiline':False]['text':' need_wait_return to do it later.','line_number':1138,'multiline':False]['text':' When inside vgetc(), we can't wait for a typed character at all.','line_number':1147,'multiline':False]['text':' With the global command (and some others) we only need one return at','line_number':1148,'multiline':False]['text':' the end. Adjust cmdline_row to avoid the next message overwriting the','line_number':1149,'multiline':False]['text':' last one.','line_number':1150,'multiline':False]['text':' don't redirect this message','line_number':1162,'multiline':False]['text':' just pretend CR was hit','line_number':1165,'multiline':False]['text':' make sure the cursor is on the right line','line_number':1169,'multiline':False]['text':' no need for a return in ex mode','line_number':1170,'multiline':False]['text':' Avoid the sequence that the user types ":" at the hit-return prompt','line_number':1176,'multiline':False]['text':' to start an Ex command, but the file-changed dialog gets in the','line_number':1177,'multiline':False]['text':' way.','line_number':1178,'multiline':False]['text':' Remember "got_int", if it is set vgetc() probably returns a','line_number':1186,'multiline':False]['text':' CTRL-C, but we need to loop then.','line_number':1187,'multiline':False]['text':' Don't do mappings here, we put the character back in the','line_number':1190,'multiline':False]['text':' typeahead buffer.','line_number':1191,'multiline':False]['text':' Temporarily disable Recording. If Recording is active, the','line_number':1195,'multiline':False]['text':' character will be recorded later, since it will be added to the','line_number':1196,'multiline':False]['text':' typebuf after the loop','line_number':1197,'multiline':False]['text':' Allow scrolling back in the messages.','line_number':1211,'multiline':False]['text':' Also accept scroll-down commands when messages fill the screen,','line_number':1212,'multiline':False]['text':' to avoid that typing one 'j' too many makes the messages','line_number':1213,'multiline':False]['text':' disappear.','line_number':1214,'multiline':False]['text':' scroll back to show older messages','line_number':1219,'multiline':False]['text':' just pretend CR was hit','line_number':1227,'multiline':False]['text':' Avoid that the mouse-up event causes visual mode to start.','line_number':1250,'multiline':False]['text':' Put the character back in the typeahead buffer.  Don't use the','line_number':1255,'multiline':False]['text':' stuff buffer, because lmaps wouldn't work.','line_number':1256,'multiline':False]['text':' need a redraw even though there is','line_number':1258,'multiline':False]['text':' typeahead','line_number':1259,'multiline':False]['text':' If the user hits ':', '?' or '/' we get a command line from the next','line_number':1264,'multiline':False]['text':' line.','line_number':1265,'multiline':False]['text':' skip redraw once','line_number':1270,'multiline':False]['text':' If the screen size changed screen_resize() will redraw the screen.','line_number':1275,'multiline':False]['text':' Otherwise the screen is only redrawn if 'redraw' is set and no ':'','line_number':1276,'multiline':False]['text':' typed.','line_number':1277,'multiline':False]['text':' restore State before screen_resize()','line_number':1279,'multiline':False]['text':' can delete error message now','line_number':1284,'multiline':False]['text':' reset lines_left at next msg_start()','line_number':1285,'multiline':False]['text':' don't redisplay message, it's too long','line_number':1289,'multiline':False]['text':' got resize event while in vgetc()','line_number':1292,'multiline':False]['text':'/ Write the hit-return prompt.','line_number':1304,'multiline':False]['text':' don't want to see this message when scrolling back','line_number':1309,'multiline':False]['text':' start on a new line','line_number':1310,'multiline':False]['text':'/ Set "keep_msg" to "s".  Free the old value and check for NULL pointer.','line_number':1325,'multiline':False]['text':'/ Return true if printing messages should currently be done.','line_number':1338,'multiline':False]['text':' TODO(bfredl): with general support for "async" messages with p_ch,','line_number':1341,'multiline':False]['text':' this should be re-enabled.','line_number':1342,'multiline':False]['text':' no messages now, wait until global is finished','line_number':1350,'multiline':False]['text':' 'lazyredraw' set, don't do messages now','line_number':1351,'multiline':False]['text':' We don't want to overwrite another important message, but do overwrite','line_number':1355,'multiline':False]['text':' a previous "more lines" or "fewer lines" message, so that "5dd" and','line_number':1356,'multiline':False]['text':' then "put" reports the last action.','line_number':1357,'multiline':False]['text':' Don't change the label of an existing batch:','line_number':1390,'multiline':False]['text':' TODO(bfredl): would be nice to avoid dynamic scoping, but that would','line_number':1393,'multiline':False]['text':' need refactoring the msg_ interface to not be "please pretend nvim is','line_number':1394,'multiline':False]['text':' a terminal for a moment"','line_number':1395,'multiline':False]['text':'/ Prepare for outputting characters in the command line.','line_number':1399,'multiline':False]['text':' don't display old message now','line_number':1409,'multiline':False]['text':' Halfway an ":echo" command and getting an (error) message: clear','line_number':1414,'multiline':False]['text':' any text from the command.','line_number':1415,'multiline':False]['text':' if cmdheight=0, we need to scroll in the first line of msg_grid upon the screen','line_number':1420,'multiline':False]['text':' overwrite last message','line_number':1428,'multiline':False]['text':' start message on next line','line_number':1431,'multiline':False]['text':' no output on current line yet','line_number':1440,'multiline':False]['text':' Will overwrite last message.','line_number':1446,'multiline':False]['text':' When redirecting, may need to start a new line.','line_number':1451,'multiline':False]['text':'/ Note that the current msg position is where messages start.','line_number':1457,'multiline':False]['text':'/ Output 'len' characters in 'str' (including NULs) with translation','line_number':1509,'multiline':False]['text':'/ if 'len' is -1, output up to a NUL character.','line_number':1510,'multiline':False]['text':'/ Use attributes 'attr'.','line_number':1511,'multiline':False]['text':'/','line_number':1512,'multiline':False]['text':'/ @return  the number of characters it takes on the screen.','line_number':1513,'multiline':False]['text':'/ Output one character at "p".','line_number':1519,'multiline':False]['text':'/ Handles multi-byte characters.','line_number':1520,'multiline':False]['text':'/','line_number':1521,'multiline':False]['text':'/ @return  pointer to the next character.','line_number':1522,'multiline':False]['text':' Only quit when got_int was set in here.','line_number':1544,'multiline':False]['text':' if MSG_HIST flag set, add message to history','line_number':1547,'multiline':False]['text':' When drawing over the command line no need to clear it later or remove','line_number':1553,'multiline':False]['text':' the mode message.','line_number':1554,'multiline':False]['text':' Go over the string.  Special characters are translated and printed.','line_number':1560,'multiline':False]['text':' Normal characters are printed several at a time.','line_number':1561,'multiline':False]['text':' Don't include composing chars after the end.','line_number':1563,'multiline':False]['text':' Printable multi-byte char: count the cells.','line_number':1568,'multiline':False]['text':' Unprintable multi-byte char: print the printable chars so','line_number':1571,'multiline':False]['text':' far and the translation of the unprintable char.','line_number':1572,'multiline':False]['text':' Unprintable char: print the printable chars so far and the','line_number':1585,'multiline':False]['text':' translation of the unprintable char.','line_number':1586,'multiline':False]['text':' Print the printable chars at the end.','line_number':1601,'multiline':False]['text':'/ Output the string 'str' up to a NUL character.','line_number':1630,'multiline':False]['text':'/ Return the number of characters it takes on the screen.','line_number':1631,'multiline':False]['text':'/','line_number':1632,'multiline':False]['text':'/ If K_SPECIAL is encountered, then it is taken in conjunction with the','line_number':1633,'multiline':False]['text':'/ following character and shown as <F1>, <S-Up> etc.  Any other character','line_number':1634,'multiline':False]['text':'/ which is not printable shown in <> form.','line_number':1635,'multiline':False]['text':'/ If 'from' is true (lhs of a mapping), a space is shown as <Space>.','line_number':1636,'multiline':False]['text':'/ If a character is displayed in one of these special ways, is also','line_number':1637,'multiline':False]['text':'/ highlighted (its highlight name is '8' in the p_hl variable).','line_number':1638,'multiline':False]['text':'/ Otherwise characters are not highlighted.','line_number':1639,'multiline':False]['text':'/ This function is used to show mappings, where we want to see how to type','line_number':1640,'multiline':False]['text':'/ the character/string -- webb','line_number':1641,'multiline':False]['text':'/','line_number':1642,'multiline':False]['text':'/ @param from  true for LHS of a mapping','line_number':1643,'multiline':False]['text':'/ @param maxlen  screen columns, 0 for unlimited','line_number':1644,'multiline':False]['text':' Do nothing.','line_number':1648,'multiline':False]['text':' Leading and trailing spaces need to be displayed in <> form.','line_number':1656,'multiline':False]['text':' single-byte character or illegal byte','line_number':1664,'multiline':False]['text':' Highlight special keys','line_number':1671,'multiline':False]['text':'/ Convert string, replacing key codes with printables','line_number':1680,'multiline':False]['text':'/','line_number':1681,'multiline':False]['text':'/ Used for lhs or rhs of mappings.','line_number':1682,'multiline':False]['text':'/','line_number':1683,'multiline':False]['text':'/ @param[in]  str  String to convert.','line_number':1684,'multiline':False]['text':'/ @param[in]  replace_spaces  Convert spaces into `<Space>`, normally used for','line_number':1685,'multiline':False]['text':'/                             lhs of mapping and keytrans(), but not rhs.','line_number':1686,'multiline':False]['text':'/ @param[in]  replace_lt  Convert `<` into `<lt>`.','line_number':1687,'multiline':False]['text':'/','line_number':1688,'multiline':False]['text':'/ @return [allocated] Converted string.','line_number':1689,'multiline':False]['text':'/ Convert character, replacing key with printable representation.','line_number':1705,'multiline':False]['text':'/','line_number':1706,'multiline':False]['text':'/ @param[in,out]  sp  String to convert. Is advanced to the next key code.','line_number':1707,'multiline':False]['text':'/ @param[in]  replace_spaces  Convert spaces into `<Space>`, normally used for','line_number':1708,'multiline':False]['text':'/                             lhs of mapping and keytrans(), but not rhs.','line_number':1709,'multiline':False]['text':'/ @param[in]  replace_lt  Convert `<` into `<lt>`.','line_number':1710,'multiline':False]['text':'/','line_number':1711,'multiline':False]['text':'/ @return Converted key code, in a static buffer. Buffer is always one and the','line_number':1712,'multiline':False]['text':'/         same, so save converted string somewhere before running str2special','line_number':1713,'multiline':False]['text':'/         for the second time.','line_number':1714,'multiline':False]['text':'/         On illegal byte return a string with only that byte.','line_number':1715,'multiline':False]['text':' Try to un-escape a multi-byte character.  Return the un-escaped','line_number':1722,'multiline':False]['text':' string if it is a multi-byte character.','line_number':1723,'multiline':False]['text':' Special key.','line_number':1744,'multiline':False]['text':' Try to un-escape a multi-byte character after modifiers.','line_number':1751,'multiline':False]['text':' Since 'special' is true the multi-byte character 'c' will be','line_number':1754,'multiline':False]['text':' processed by get_special_key_name().','line_number':1755,'multiline':False]['text':' illegal byte','line_number':1758,'multiline':False]['text':' single-byte character, NUL or illegal byte','line_number':1762,'multiline':False]['text':' Make special keys and C0 control characters in <> form, also <M-Space>.','line_number':1766,'multiline':False]['text':'/ Convert string, replacing key codes with printables','line_number':1778,'multiline':False]['text':'/','line_number':1779,'multiline':False]['text':'/ @param[in]  str  String to convert.','line_number':1780,'multiline':False]['text':'/ @param[out]  buf  Buffer to save results to.','line_number':1781,'multiline':False]['text':'/ @param[in]  len  Buffer length.','line_number':1782,'multiline':False]['text':'/ print line for :print or :list command','line_number':1799,'multiline':False]['text':' init to make SASC shut up','line_number':1807,'multiline':False]['text':' find start of trailing whitespace','line_number':1821,'multiline':False]['text':' find end of leading whitespace','line_number':1828,'multiline':False]['text':' in a line full of spaces all of them are treated as trailing','line_number':1834,'multiline':False]['text':' output a space for an empty line, otherwise the line will be overwritten','line_number':1841,'multiline':False]['text':' tab amount depends on current column','line_number':1885,'multiline':False]['text':' Use special coloring to be able to distinguish <hex> from','line_number':1918,'multiline':False]['text':' the same in plain text.','line_number':1919,'multiline':False]['text':'/ Output a string to the screen at position msg_row, msg_col.','line_number':1959,'multiline':False]['text':'/ Update msg_row and msg_col for the next message.','line_number':1960,'multiline':False]['text':'/ Show a message in such a way that it always fits in the line.  Cut out a','line_number':1971,'multiline':False]['text':'/ part in the middle and replace it with "..." when necessary.','line_number':1972,'multiline':False]['text':'/ Does not handle multi-byte characters!','line_number':1973,'multiline':False]['text':'/ Basic function for writing a message with highlight attributes.','line_number':1987,'multiline':False]['text':'/ Write a message with highlight attributes','line_number':1993,'multiline':False]['text':'/','line_number':1994,'multiline':False]['text':'/ @param[in]  str  NUL-terminated message string.','line_number':1995,'multiline':False]['text':'/ @param[in]  len  Length of the string or -1.','line_number':1996,'multiline':False]['text':'/ @param[in]  attr  Highlight attribute.','line_number':1997,'multiline':False]['text':' If redirection is on, also write to the redirection file.','line_number':2002,'multiline':False]['text':' Don't print anything when using ":silent cmd".','line_number':2005,'multiline':False]['text':' if MSG_HIST flag set, add message to history','line_number':2010,'multiline':False]['text':' When writing something to the screen after it has scrolled, requires a','line_number':2016,'multiline':False]['text':' wait-return prompt later.  Needed when scrolling, resetting','line_number':2017,'multiline':False]['text':' need_wait_return after some prompt, and then outputting something','line_number':2018,'multiline':False]['text':' without scrolling','line_number':2019,'multiline':False]['text':' Not needed when only using CR to move the cursor.','line_number':2020,'multiline':False]['text':' TODO(bfredl): possible extension point, let external UI control this','line_number':2024,'multiline':False]['text':' remember that something was outputted','line_number':2035,'multiline':False]['text':' If there is no valid screen, use fprintf so we can see error messages.','line_number':2037,'multiline':False]['text':' If termcap is not active, we may be writing in an alternate console','line_number':2038,'multiline':False]['text':' window, cursor positioning may not work correctly (window size may be','line_number':2039,'multiline':False]['text':' different, e.g. for Win32 console) or we just don't know where the','line_number':2040,'multiline':False]['text':' cursor is.','line_number':2041,'multiline':False]['text':'/ Print a formatted message','line_number':2056,'multiline':False]['text':'/','line_number':2057,'multiline':False]['text':'/ Message printed is limited by #IOSIZE. Must not be used from inside','line_number':2058,'multiline':False]['text':'/ msg_puts_attr().','line_number':2059,'multiline':False]['text':'/','line_number':2060,'multiline':False]['text':'/ @param[in]  attr  Highlight attributes.','line_number':2061,'multiline':False]['text':'/ @param[in]  fmt  Format string.','line_number':2062,'multiline':False]['text':' Color was changed or a message flushed, end current chunk.','line_number':2079,'multiline':False]['text':' no chunk','line_number':2081,'multiline':False]['text':'/ The display part of msg_puts_len().','line_number':2091,'multiline':False]['text':'/ May be called recursively to display scroll-back text.','line_number':2092,'multiline':False]['text':' Concat pieces with the same highlight','line_number':2106,'multiline':False]['text':' Store text for scrolling back.','line_number':2123,'multiline':False]['text':' When no more prompt and no more room, truncate here','line_number':2138,'multiline':False]['text':' Scroll the screen up one line.','line_number':2149,'multiline':False]['text':' may need wait_return() in main()','line_number':2153,'multiline':False]['text':' If screen is completely filled and 'more' is set then wait','line_number':2159,'multiline':False]['text':' for a character.','line_number':2160,'multiline':False]['text':' TODO(bfredl): this logic is messier that it has to be. What','line_number':2182,'multiline':False]['text':' messages really want is its own private linebuf_char buffer.','line_number':2183,'multiline':False]['text':' printable char','line_number':2191,'multiline':False]['text':' avoid including composing chars after the end','line_number':2193,'multiline':False]['text':' Doesn't fit, print a highlighted '>' to fill it up.','line_number':2197,'multiline':False]['text':' remember that line is not empty','line_number':2204,'multiline':False]['text':' go to next line','line_number':2208,'multiline':False]['text':' remember that line is empty','line_number':2209,'multiline':False]['text':' Store text for scrolling back.','line_number':2213,'multiline':False]['text':' go to column 0','line_number':2216,'multiline':False]['text':' go to previous char','line_number':2218,'multiline':False]['text':' translate Tab into spaces','line_number':2222,'multiline':False]['text':' beep (from ":sh")','line_number':2231,'multiline':False]['text':'/ @return  true when ":filter pattern" was used and "msg" does not match','line_number':2267,'multiline':False]['text':'/          "pattern".','line_number':2268,'multiline':False]['text':'/ including horizontal separator','line_number':2279,'multiline':False]['text':'/ Scroll the screen up one line for displaying the next message line.','line_number':2290,'multiline':False]['text':' When displaying the first line with cmdheight=0, we need to draw over','line_number':2300,'multiline':False]['text':' the existing last line of the screen.','line_number':2301,'multiline':False]['text':'/ Send throttled message output to UI clients','line_number':2315,'multiline':False]['text':'/','line_number':2316,'multiline':False]['text':'/ The way message.c uses the grid_xx family of functions is quite inefficient','line_number':2317,'multiline':False]['text':'/ relative to the "gridline" UI protocol used by TUI and modern clients.','line_number':2318,'multiline':False]['text':'/ For instance scrolling is done one line at a time. By throttling drawing','line_number':2319,'multiline':False]['text':'/ on the message grid, we can coalesce scrolling to a single grid_scroll','line_number':2320,'multiline':False]['text':'/ per screen update.','line_number':2321,'multiline':False]['text':'/','line_number':2322,'multiline':False]['text':'/ NB: The bookkeeping is quite messy, and rests on a bunch of poorly','line_number':2323,'multiline':False]['text':'/ documented assumptions. For instance that the message area always grows','line_number':2324,'multiline':False]['text':'/ while being throttled, messages are only being output on the last line','line_number':2325,'multiline':False]['text':'/ etc.','line_number':2326,'multiline':False]['text':'/','line_number':2327,'multiline':False]['text':'/ Probably message scrollback storage should be reimplemented as a','line_number':2328,'multiline':False]['text':'/ file_buffer, and message scrolling in TUI be reimplemented as a modal','line_number':2329,'multiline':False]['text':'/ floating window. Then we get throttling "for free" using standard','line_number':2330,'multiline':False]['text':'/ redraw_later code paths.','line_number':2331,'multiline':False]['text':' TODO(bfredl): msg_grid_pos should be 0 already when starting scrolling','line_number':2347,'multiline':False]['text':' but this sometimes fails in "headless" message printing.','line_number':2348,'multiline':False]['text':' TODO(bfredl): some duplicate logic with update_screen(). Later on','line_number':2372,'multiline':False]['text':' we should properly disentangle message clear with full screen redraw.','line_number':2373,'multiline':False]['text':' TODO(bfredl): risk for extra flicker i e with','line_number':2375,'multiline':False]['text':' "nvim -o has_swap also_has_swap"','line_number':2376,'multiline':False]['text':' non-displayed part of msg_grid is considered invalid.','line_number':2380,'multiline':False]['text':'/ Increment "msg_scrolled".','line_number':2391,'multiline':False]['text':' v:scrollstart is empty, set it to the script/function name and line','line_number':2398,'multiline':False]['text':' number','line_number':2399,'multiline':False]['text':' last displayed text','line_number':2418,'multiline':False]['text':' When to clear text on next msg.','line_number':2427,'multiline':False]['text':'/ Store part of a printed message for displaying when scrolling back.','line_number':2430,'multiline':False]['text':'/','line_number':2431,'multiline':False]['text':'/ @param sb_str  start of string','line_number':2432,'multiline':False]['text':'/ @param s  just after string','line_number':2433,'multiline':False]['text':'/ @param finish  line ends','line_number':2434,'multiline':False]['text':' prevent messages from overlapping','line_number':2442,'multiline':False]['text':'/ Finished showing messages, clear the scroll-back text on the next message.','line_number':2474,'multiline':False]['text':'/ Starting to edit the command line: do not clear messages now.','line_number':2480,'multiline':False]['text':' Invoking command line recursively: the previous-level command line','line_number':2484,'multiline':False]['text':' doesn't need to be remembered as it will be redrawn when returning','line_number':2485,'multiline':False]['text':' to that level.','line_number':2486,'multiline':False]['text':'/ Redrawing the command line: clear the last unfinished line.','line_number':2494,'multiline':False]['text':' Needed when returning from nested command line.','line_number':2497,'multiline':False]['text':' No unfinished line: don't clear anything.','line_number':2501,'multiline':False]['text':'/ Ending to edit the command line: clear old lines but the last one later.','line_number':2517,'multiline':False]['text':'/ Clear any text remembered for scrolling back.','line_number':2523,'multiline':False]['text':'/ When "all" is false keep the last line.','line_number':2524,'multiline':False]['text':'/ Called when redrawing the screen.','line_number':2525,'multiline':False]['text':'/ "g<" command.','line_number':2547,'multiline':False]['text':' Only show something if there is more than one line, otherwise it looks','line_number':2552,'multiline':False]['text':' weird, typing a command without output results in one line.','line_number':2553,'multiline':False]['text':'/ Move to the start of screen line in already displayed text.','line_number':2563,'multiline':False]['text':'/ Mark the last message chunk as finishing the line.','line_number':2574,'multiline':False]['text':'/ Display a screen line from previously displayed text at row "row".','line_number':2582,'multiline':False]['text':'/','line_number':2583,'multiline':False]['text':'/ @return  a pointer to the text for the next line (can be NULL).','line_number':2584,'multiline':False]['text':'/ @return  true when messages should be printed to stdout/stderr:','line_number':2603,'multiline':False]['text':'/          - "batch mode" ("silent mode", -es/-Es)','line_number':2604,'multiline':False]['text':'/          - no UI and not embedded','line_number':2605,'multiline':False]['text':'/ Print a message when there is no valid screen.','line_number':2611,'multiline':False]['text':' NL --> CR NL translation (for Unix, not for "--version")','line_number':2632,'multiline':False]['text':' primitive way to compute the current column','line_number':2647,'multiline':False]['text':' assume that line is not empty','line_number':2655,'multiline':False]['text':'/ Show the more-prompt and handle the user response.','line_number':2658,'multiline':False]['text':'/ This takes care of scrolling back and displaying previously displayed text.','line_number':2659,'multiline':False]['text':'/ When at hit-enter prompt "typed_char" is the already typed character,','line_number':2660,'multiline':False]['text':'/ otherwise it's NUL.','line_number':2661,'multiline':False]['text':'/','line_number':2662,'multiline':False]['text':'/ @return  true when jumping ahead to "confirm_msg_tail".','line_number':2663,'multiline':False]['text':' If headless mode is enabled and no input is required, this variable','line_number':2675,'multiline':False]['text':' will be true. However If server mode is enabled, the message "--more--"','line_number':2676,'multiline':False]['text':' should be displayed.','line_number':2677,'multiline':False]['text':' We get called recursively when a timer callback outputs a message. In','line_number':2680,'multiline':False]['text':' that case don't show another prompt. Also when at the hit-Enter prompt','line_number':2681,'multiline':False]['text':' and nothing was typed.','line_number':2682,'multiline':False]['text':' "g<": Find first line on the last page.','line_number':2689,'multiline':False]['text':' Get a typed character directly from the user.','line_number':2703,'multiline':False]['text':' was typed at hit-enter prompt','line_number':2705,'multiline':False]['text':' scroll one line back','line_number':2713,'multiline':False]['text':' one extra line','line_number':2720,'multiline':False]['text':' Up half a page','line_number':2727,'multiline':False]['text':' Down half a page','line_number':2731,'multiline':False]['text':' one page back','line_number':2735,'multiline':False]['text':' one extra page','line_number':2740,'multiline':False]['text':' all the way back to the start','line_number':2747,'multiline':False]['text':' all the way to the end','line_number':2751,'multiline':False]['text':' start new command line','line_number':2756,'multiline':False]['text':' Since got_int is set all typeahead will be flushed, but we','line_number':2758,'multiline':False]['text':' want to keep this ':', remember that in a special way.','line_number':2759,'multiline':False]['text':' put ':' on this line','line_number':2761,'multiline':False]['text':' skip redraw once','line_number':2762,'multiline':False]['text':' don't wait in main()','line_number':2763,'multiline':False]['text':' quit','line_number':2766,'multiline':False]['text':' Jump to the choices of the dialog.','line_number':2770,'multiline':False]['text':' When there is some more output (wrapping line) display that','line_number':2776,'multiline':False]['text':' without another prompt.','line_number':2777,'multiline':False]['text':' only resize_events are processed here','line_number':2782,'multiline':False]['text':' Attempt to redraw the screen. sb_text doesn't support reflow','line_number':2783,'multiline':False]['text':' so this only really works for vertical resize.','line_number':2784,'multiline':False]['text':' no valid response','line_number':2789,'multiline':False]['text':' code assumes we only do one at a time','line_number':2794,'multiline':False]['text':' go to start of last line','line_number':2799,'multiline':False]['text':' go to start of line at top of the screen','line_number':2808,'multiline':False]['text':' Find line to be displayed at top','line_number':2814,'multiline':False]['text':' display line at top','line_number':2831,'multiline':False]['text':' redisplay all lines','line_number':2834,'multiline':False]['text':' TODO(bfredl): this case is not optimized (though only concerns','line_number':2835,'multiline':False]['text':' event fragmentation, not unnecessary scroll events).','line_number':2836,'multiline':False]['text':' First display any text that we scrolled back.','line_number':2848,'multiline':False]['text':' if p_ch=0 we need to allocate a line for "press enter" messages!','line_number':2849,'multiline':False]['text':' Tricky: we redraw at one line higher than usual. Therefore','line_number':2856,'multiline':False]['text':' the non-flushed area is one line larger.','line_number':2857,'multiline':False]['text':' scroll up, display line at bottom','line_number':2861,'multiline':False]['text':' displayed the requested text, more prompt again','line_number':2872,'multiline':False]['text':' display more text, return to caller','line_number':2879,'multiline':False]['text':' clear the --more-- message','line_number':2886,'multiline':False]['text':'/ Headless (no UI) error message handler.','line_number':2905,'multiline':False]['text':'/ Headless (no UI) message handler.','line_number':2931,'multiline':False]['text':' MSWIN','line_number':2936,'multiline':False]['text':'/ Repeat the message for the current mode: MODE_ASKMORE, MODE_EXTERNCMD,','line_number':2951,'multiline':False]['text':'/ MODE_CONFIRM or exmode_active.','line_number':2952,'multiline':False]['text':' display --more-- message again','line_number':2956,'multiline':False]['text':' display ":confirm" message again','line_number':2959,'multiline':False]['text':' put cursor back','line_number':2962,'multiline':False]['text':' Avoid drawing the "hit-enter" prompt below the previous one,','line_number':2965,'multiline':False]['text':' overwrite it.  Esp. useful when regaining focus and a','line_number':2966,'multiline':False]['text':' FocusGained autocmd exists but didn't draw anything.','line_number':2967,'multiline':False]['text':'/ Clear from current message position to end of screen.','line_number':2977,'multiline':False]['text':'/ Skip this when ":silent" was used, no need to clear for redirection.','line_number':2978,'multiline':False]['text':'/ Clear from current message position to end of screen.','line_number':2986,'multiline':False]['text':'/ Note: msg_col is not updated, so we remember the end of the message','line_number':2987,'multiline':False]['text':'/ for msg_check().','line_number':2988,'multiline':False]['text':' TODO(bfredl): ugly, this state should already been validated at this','line_number':2997,'multiline':False]['text':' point. But msg_clr_eos() is called in a lot of places.','line_number':2998,'multiline':False]['text':' overwritten the command line','line_number':3011,'multiline':False]['text':' command line has been cleared','line_number':3013,'multiline':False]['text':' mode cleared or overwritten','line_number':3014,'multiline':False]['text':'/ Clear the command line.','line_number':3018,'multiline':False]['text':'/ end putting a message on the screen','line_number':3026,'multiline':False]['text':'/ call wait_return() if the message does not fit in the available space','line_number':3027,'multiline':False]['text':'/','line_number':3028,'multiline':False]['text':'/ @return  true if wait_return() not called.','line_number':3029,'multiline':False]['text':' If the string is larger than the window,','line_number':3032,'multiline':False]['text':' or the ruler option is set and we run into it,','line_number':3033,'multiline':False]['text':' we have to redraw the window.','line_number':3034,'multiline':False]['text':' Do not do this if we are abandoning the file or editing the command line.','line_number':3035,'multiline':False]['text':' NOTE: ui_flush() used to be called here. This had to be removed, as it','line_number':3041,'multiline':False]['text':' inhibited substantial performance improvements. It is assumed that relevant','line_number':3042,'multiline':False]['text':' callers invoke ui_flush() before going into CPU busywork, or restricted','line_number':3043,'multiline':False]['text':' event processing after displaying a message to the user.','line_number':3044,'multiline':False]['text':' Showmode messages doesn't interrupt normal message flow, so we use','line_number':3073,'multiline':False]['text':' separate event. Still reuse the same chunking logic, for simplicity.','line_number':3074,'multiline':False]['text':' nothing to overwrite','line_number':3089,'multiline':False]['text':' Only keep once.','line_number':3096,'multiline':False]['text':' Redraw after cmdline or prompt is expected to clear messages.','line_number':3112,'multiline':False]['text':'/ If the written message runs into the shown command or ruler, we have to','line_number':3124,'multiline':False]['text':'/ wait for hit-return and redraw the window later.','line_number':3125,'multiline':False]['text':'/ May write a string to the redirection file.','line_number':3137,'multiline':False]['text':'/','line_number':3138,'multiline':False]['text':'/ @param maxlen  if -1, write the whole string, otherwise up to "maxlen" bytes.','line_number':3139,'multiline':False]['text':' Don't do anything for displaying prompts and the like.','line_number':3149,'multiline':False]['text':' If 'verbosefile' is set prepare for writing in that file.','line_number':3154,'multiline':False]['text':' If the string doesn't start with CR or NL, go to msg_col','line_number':3160,'multiline':False]['text':' Write and adjust the current column.','line_number':3191,'multiline':False]['text':' should update msg_col','line_number':3212,'multiline':False]['text':'/ Before giving verbose message.','line_number':3224,'multiline':False]['text':'/ Must always be called paired with verbose_leave()!','line_number':3225,'multiline':False]['text':'/ After giving verbose message.','line_number':3233,'multiline':False]['text':'/ Must always be called paired with verbose_enter()!','line_number':3234,'multiline':False]['text':'/ Like verbose_enter() and set msg_scroll when displaying the message.','line_number':3244,'multiline':False]['text':' always scroll up, don't overwrite','line_number':3250,'multiline':False]['text':'/ Like verbose_leave() and set cmdline_row when displaying the message.','line_number':3255,'multiline':False]['text':'/ Called when 'verbosefile' is set: stop writing to the file.','line_number':3267,'multiline':False]['text':'/ Open the file 'verbosefile'.','line_number':3277,'multiline':False]['text':'/','line_number':3278,'multiline':False]['text':'/ @return  FAIL or OK.','line_number':3279,'multiline':False]['text':' Only give the error message once.','line_number':3283,'multiline':False]['text':'/ Give a warning message (for searching).','line_number':3295,'multiline':False]['text':'/ Use 'w' highlighting and may repeat the message after redrawing','line_number':3296,'multiline':False]['text':' Don't do this for ":silent".','line_number':3300,'multiline':False]['text':' Don't want a hit-enter prompt here.','line_number':3305,'multiline':False]['text':' Overwrite this message.','line_number':3323,'multiline':False]['text':' Don't wait for this message.','line_number':3324,'multiline':False]['text':'/ Shows a warning, with optional highlighting.','line_number':3330,'multiline':False]['text':'/','line_number':3331,'multiline':False]['text':'/ @param hl enable highlighting','line_number':3332,'multiline':False]['text':'/ @param fmt printf-style format message','line_number':3333,'multiline':False]['text':'/','line_number':3334,'multiline':False]['text':'/ @see smsg','line_number':3335,'multiline':False]['text':'/ @see semsg','line_number':3336,'multiline':False]['text':'/ Advance msg cursor to column "col".','line_number':3349,'multiline':False]['text':' nothing to advance to','line_number':3352,'multiline':False]['text':' for redirection, may fill it up later','line_number':3353,'multiline':False]['text':' TODO(bfredl): use byte count as a basic proxy.','line_number':3357,'multiline':False]['text':' later on we might add proper support for formatted messages.','line_number':3358,'multiline':False]['text':' not enough room','line_number':3364,'multiline':False]['text':'/ Used for "confirm()" function, and the :confirm command prefix.','line_number':3372,'multiline':False]['text':'/ Versions which haven't got flexible dialogs yet, and console','line_number':3373,'multiline':False]['text':'/ versions, get this generic handler which uses the command line.','line_number':3374,'multiline':False]['text':'/','line_number':3375,'multiline':False]['text':'/ type  = one of:','line_number':3376,'multiline':False]['text':'/         VIM_QUESTION, VIM_INFO, VIM_WARNING, VIM_ERROR or VIM_GENERIC','line_number':3377,'multiline':False]['text':'/ title = title string (can be NULL for default)','line_number':3378,'multiline':False]['text':'/ (neither used in console dialogs at the moment)','line_number':3379,'multiline':False]['text':'/','line_number':3380,'multiline':False]['text':'/ Format of the "buttons" string:','line_number':3381,'multiline':False]['text':'/ "Button1Name\nButton2Name\nButton3Name"','line_number':3382,'multiline':False]['text':'/ The first button should normally be the default/accept','line_number':3383,'multiline':False]['text':'/ The second button should be the 'Cancel' button','line_number':3384,'multiline':False]['text':'/ Other buttons- use your imagination!','line_number':3385,'multiline':False]['text':'/ A '&' in a button name becomes a shortcut, so each '&' should be before a','line_number':3386,'multiline':False]['text':'/ different letter.','line_number':3387,'multiline':False]['text':'/','line_number':3388,'multiline':False]['text':'/ @param textfiel  IObuff for inputdialog(), NULL otherwise','line_number':3389,'multiline':False]['text':'/ @param ex_cmd  when true pressing : accepts default and starts Ex command','line_number':3390,'multiline':False]['text':'/ @returns 0 if cancelled, otherwise the nth button (1-indexed).','line_number':3391,'multiline':False]['text':' No dialogs in silent mode ("ex -s")','line_number':3399,'multiline':False]['text':' Without a UI Nvim waits for input forever.','line_number':3400,'multiline':False]['text':' return default option','line_number':3402,'multiline':False]['text':' If dialog prompts for input, user needs to see it! #8788','line_number':3408,'multiline':False]['text':' Since we wait for a keypress, don't make the','line_number':3412,'multiline':False]['text':' user press RETURN as well afterwards.','line_number':3413,'multiline':False]['text':' Get a typed character directly from the user.','line_number':3418,'multiline':False]['text':' User accepts default option','line_number':3421,'multiline':False]['text':' User aborts/cancels','line_number':3425,'multiline':False]['text':' Could be a hotkey?','line_number':3429,'multiline':False]['text':' special keys are ignored here','line_number':3430,'multiline':False]['text':' Make the character lowercase, as chars in "hotkeys" are.','line_number':3439,'multiline':False]['text':' No hotkey match, so keep waiting','line_number':3452,'multiline':False]['text':'/ Copy one character from "*from" to "*to", taking care of multi-byte','line_number':3469,'multiline':False]['text':'/ characters.  Return the length of the character in bytes.','line_number':3470,'multiline':False]['text':'/','line_number':3471,'multiline':False]['text':'/ @param lowercase  make character lower case','line_number':3472,'multiline':False]['text':'/ Allocates memory for dialog string & for storing hotkeys','line_number':3488,'multiline':False]['text':'/','line_number':3489,'multiline':False]['text':'/ Finds the size of memory required for the confirm_msg & for storing hotkeys','line_number':3490,'multiline':False]['text':'/ and then allocates the memory for them.','line_number':3491,'multiline':False]['text':'/ has_hotkey array is also filled-up.','line_number':3492,'multiline':False]['text':'/','line_number':3493,'multiline':False]['text':'/ @param message Message which will be part of the confirm_msg','line_number':3494,'multiline':False]['text':'/ @param buttons String containing button names','line_number':3495,'multiline':False]['text':'/ @param[out] has_hotkey An element in this array is set to true if','line_number':3496,'multiline':False]['text':'/                        corresponding button has a hotkey','line_number':3497,'multiline':False]['text':'/','line_number':3498,'multiline':False]['text':'/ @return Pointer to memory allocated for storing hotkeys','line_number':3499,'multiline':False]['text':' count first button','line_number':3502,'multiline':False]['text':' Compute the size of memory to allocate.','line_number':3505,'multiline':False]['text':' '\n' -> ', '; 'x' -> '(x)'','line_number':3511,'multiline':False]['text':' each button needs a hotkey','line_number':3512,'multiline':False]['text':' '&a' -> '[a]'','line_number':3518,'multiline':False]['text':' Advance to the next character','line_number':3524,'multiline':False]['text':' for the NL's','line_number':3529,'multiline':False]['text':' for the ": " and NUL','line_number':3531,'multiline':False]['text':' for the NUL','line_number':3532,'multiline':False]['text':' If no hotkey is specified, first char is used.','line_number':3534,'multiline':False]['text':' "x" -> "[x]"','line_number':3536,'multiline':False]['text':' Now allocate space for the strings','line_number':3539,'multiline':False]['text':'/ Format the dialog string, and display it at the bottom of','line_number':3547,'multiline':False]['text':'/ the screen. Return a string of hotkey chars (if defined) for','line_number':3548,'multiline':False]['text':'/ each 'button'. If a button has no hotkey defined, the first character of','line_number':3549,'multiline':False]['text':'/ the button is used.','line_number':3550,'multiline':False]['text':'/ The hotkeys can be multi-byte characters, but without combining chars.','line_number':3551,'multiline':False]['text':'/','line_number':3552,'multiline':False]['text':'/ @return  an allocated string with hotkeys.','line_number':3553,'multiline':False]['text':'/ Copies hotkeys & dialog message into the memory allocated for it','line_number':3566,'multiline':False]['text':'/','line_number':3567,'multiline':False]['text':'/ @param message Message which will be part of the confirm_msg','line_number':3568,'multiline':False]['text':'/ @param buttons String containing button names','line_number':3569,'multiline':False]['text':'/ @param default_button_idx Number of default button','line_number':3570,'multiline':False]['text':'/ @param has_hotkey An element in this array is true if corresponding button','line_number':3571,'multiline':False]['text':'/                   has a hotkey','line_number':3572,'multiline':False]['text':'/ @param[out] hotkeys_ptr Pointer to the memory location where hotkeys will be copied','line_number':3573,'multiline':False]['text':' Define first default hotkey. Keep the hotkey string NUL','line_number':3582,'multiline':False]['text':' terminated to avoid reading past the end.','line_number':3583,'multiline':False]['text':' Remember where the choices start, displaying starts here when','line_number':3586,'multiline':False]['text':' "hotkeys_ptr" typed at the more prompt.','line_number':3587,'multiline':False]['text':' Is the first char of button a hotkey','line_number':3591,'multiline':False]['text':' If no hotkey is specified, first char is used','line_number':3593,'multiline':False]['text':' '\n' -> ', '','line_number':3601,'multiline':False]['text':' Advance to next hotkey and set default hotkey','line_number':3603,'multiline':False]['text':' If no hotkey is specified, first char is used.','line_number':3611,'multiline':False]['text':' '&&a' -> '&a'','line_number':3621,'multiline':False]['text':' '&a' -> '[a]'','line_number':3624,'multiline':False]['text':' redefine hotkey','line_number':3629,'multiline':False]['text':' everything else copy literally','line_number':3633,'multiline':False]['text':' advance to the next character','line_number':3637,'multiline':False]['text':'/ Display the ":confirm" message.  Also called when screen resized.','line_number':3646,'multiline':False]['text':' Avoid that 'q' at the more prompt truncates the message here.','line_number':3649,'multiline':False]['text':'/ Check if there should be a delay to allow the user to see a message.','line_number':3702,'multiline':False]['text':'/','line_number':3703,'multiline':False]['text':'/ Used before clearing or redrawing the screen or the command line.','line_number':3704,'multiline':False]