['text':'/ OS process functions','line_number':1,'multiline':False]['text':'/','line_number':2,'multiline':False]['text':'/ psutil is a good reference for cross-platform syscall voodoo:','line_number':3,'multiline':False]['text':'/ https://github.com/giampaolo/psutil/tree/master/psutil/arch','line_number':4,'multiline':False]['text':' IWYU pragma: no_include <sys/param.h>','line_number':6,'multiline':False]['text':'/ Kills process `pid` and its descendants recursively.','line_number':82,'multiline':False]['text':'/ Kills process group where `pid` is the process group leader.','line_number':97,'multiline':False]['text':' Never kill self (pid=0).','line_number':102,'multiline':False]['text':'/ Gets the process ids of the immediate children of process `ppid`.','line_number':110,'multiline':False]['text':'/','line_number':111,'multiline':False]['text':'/ @param ppid Process to inspect.','line_number':112,'multiline':False]['text':'/ @param[out,allocated] proc_list Child process ids.','line_number':113,'multiline':False]['text':'/ @param[out] proc_count Number of child processes.','line_number':114,'multiline':False]['text':'/ @return 0 on success, 1 if process not found, 2 on other error.','line_number':115,'multiline':False]['text':' Snapshot of all processes.','line_number':130,'multiline':False]['text':' Get root process.','line_number':137,'multiline':False]['text':' Collect processes whose parent matches `ppid`.','line_number':142,'multiline':False]['text':' Get total process count.','line_number':171,'multiline':False]['text':' Get ALL processes.','line_number':178,'multiline':False]['text':' Collect processes whose parent matches `ppid`.','line_number':190,'multiline':False]['text':' Process not found.','line_number':203,'multiline':False]['text':' Collect processes whose parent matches `ppid`.','line_number':208,'multiline':False]['text':' Rationale: children are defined in thread with same ID of process.','line_number':209,'multiline':False]['text':' Process not found, or /proc/…/children not supported.','line_number':213,'multiline':False]['text':'/ Gets various properties of the process identified by `pid`.','line_number':229,'multiline':False]['text':'/','line_number':230,'multiline':False]['text':'/ @param pid Process to inspect.','line_number':231,'multiline':False]['text':'/ @return Map of process properties, empty on error.','line_number':232,'multiline':False]['text':' Snapshot of all processes.  This is used instead of:','line_number':238,'multiline':False]['text':'    OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, …)','line_number':239,'multiline':False]['text':' to avoid ERROR_PARTIAL_COPY.  https://stackoverflow.com/a/29942376','line_number':240,'multiline':False]['text':' Return empty.','line_number':243,'multiline':False]['text':' Get root process.','line_number':247,'multiline':False]['text':' Return empty.','line_number':250,'multiline':False]['text':' Find the process.','line_number':252,'multiline':False]['text':'/ Return true if process `pid` is running.','line_number':270,'multiline':False]['text':' If there is no error the process must be running.','line_number':274,'multiline':False]['text':' If the error is ESRCH then the process is not running.','line_number':278,'multiline':False]['text':' If the process is running and owned by another user we get EPERM.  With','line_number':282,'multiline':False]['text':' other errors the process might be running, assuming it is then.','line_number':283,'multiline':False]