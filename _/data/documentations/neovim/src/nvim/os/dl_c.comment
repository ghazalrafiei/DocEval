['text':'/ Functions for using external native libraries','line_number':1,'multiline':False]['text':'/ possible function prototypes that can be called by os_libcall()','line_number':13,'multiline':False]['text':'/ int -> int','line_number':14,'multiline':False]['text':'/ int -> string','line_number':15,'multiline':False]['text':'/ string -> string','line_number':16,'multiline':False]['text':'/ string -> int','line_number':17,'multiline':False]['text':'/ os_libcall - call a function in a dynamic loadable library','line_number':24,'multiline':False]['text':'/','line_number':25,'multiline':False]['text':'/ an example of calling a function that takes a string and returns an int:','line_number':26,'multiline':False]['text':'/','line_number':27,'multiline':False]['text':'/   int int_out = 0;','line_number':28,'multiline':False]['text':'/   os_libcall("mylib.so", "somefn", "string-argument", 0, NULL, &int_out);','line_number':29,'multiline':False]['text':'/','line_number':30,'multiline':False]['text':'/ @param libname the name of the library to load (e.g.: libsomething.so)','line_number':31,'multiline':False]['text':'/ @param funcname the name of the library function (e.g.: myfunc)','line_number':32,'multiline':False]['text':'/ @param argv the input string, NULL when using `argi`','line_number':33,'multiline':False]['text':'/ @param argi the input integer, not used when using `argv` != NULL','line_number':34,'multiline':False]['text':'/ @param[out] str_out an allocated output string, caller must free if','line_number':35,'multiline':False]['text':'/             not NULL. NULL when using `int_out`.','line_number':36,'multiline':False]['text':'/ @param[out] int_out the output integer param','line_number':37,'multiline':False]['text':'/ @return true on success, false on failure','line_number':38,'multiline':False]['text':' open the dynamic loadable library','line_number':48,'multiline':False]['text':' find and load the requested function in the library','line_number':55,'multiline':False]['text':' call the library and save the result','line_number':63,'multiline':False]['text':' TODO(aktau): catch signals and use jmp (if available) to handle','line_number':64,'multiline':False]['text':' exceptions. jmp's on Unix seem to interact trickily with signals as','line_number':65,'multiline':False]['text':' well. So for now we only support those libraries that are well-behaved.','line_number':66,'multiline':False]['text':' assume that ptr values of NULL, 1 or -1 are illegal','line_number':73,'multiline':False]['text':' free the library','line_number':82,'multiline':False]