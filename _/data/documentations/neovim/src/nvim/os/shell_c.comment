['text':' 1 second, in nanoseconds','line_number':48,'multiline':False]['text':' 10KB, "a few screenfuls" of data.','line_number':49,'multiline':False]['text':' Be compatible with expand_filename(): halve the number of','line_number':67,'multiline':False]['text':' backslashes.','line_number':68,'multiline':False]['text':'/ Performs wildcard pattern matching using the shell.','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':'/ @param      num_pat  is the number of input patterns.','line_number':97,'multiline':False]['text':'/ @param      pat      is an array of pointers to input patterns.','line_number':98,'multiline':False]['text':'/ @param[out] num_file is pointer to number of matched file names.','line_number':99,'multiline':False]['text':'/                      Set to the number of pointers in *file.','line_number':100,'multiline':False]['text':'/ @param[out] file     is pointer to array of pointers to matched file names.','line_number':101,'multiline':False]['text':'/                      Memory pointed to by the initial value of *file will','line_number':102,'multiline':False]['text':'/                      not be freed.','line_number':103,'multiline':False]['text':'/                      Set to NULL if FAIL is returned. Otherwise points to','line_number':104,'multiline':False]['text':'/                      allocated memory.','line_number':105,'multiline':False]['text':'/ @param      flags    is a combination of EW_* flags used in','line_number':106,'multiline':False]['text':'/                      expand_wildcards().','line_number':107,'multiline':False]['text':'/                      If matching fails but EW_NOTFOUND is set in flags or','line_number':108,'multiline':False]['text':'/                      there are no wildcards, the patterns from pat are','line_number':109,'multiline':False]['text':'/                      copied into *file.','line_number':110,'multiline':False]['text':'/','line_number':111,'multiline':False]['text':'/ @returns             OK for success or FAIL for error.','line_number':112,'multiline':False]['text':' use "echo", the default','line_number':128,'multiline':False]['text':' use "glob", for csh','line_number':129,'multiline':False]['text':' use "vimglob", for Posix sh','line_number':130,'multiline':False]['text':' use "print -N", for zsh','line_number':131,'multiline':False]['text':' `cmd` expansion, execute the pattern directly','line_number':132,'multiline':False]['text':' use extended shell glob for bash (this uses extended','line_number':133,'multiline':False]['text':' globbing functionality with globstar, needs bash > 4)','line_number':134,'multiline':False]['text':' vimglob() function to define for Posix shell','line_number':139,'multiline':False]['text':' vimglob() function with globstar setting enabled, only for bash >= 4.X','line_number':142,'multiline':False]['text':' default: no files found','line_number':153,'multiline':False]['text':' If there are no wildcards, just copy the names to allocated memory.','line_number':156,'multiline':False]['text':' Saves a lot of time, because we don't have to start a new shell.','line_number':157,'multiline':False]['text':' Don't allow any shell command in the sandbox.','line_number':163,'multiline':False]['text':' Don't allow the use of backticks in secure.','line_number':168,'multiline':False]['text':' get a name for the temp file','line_number':178,'multiline':False]['text':' Let the shell expand the patterns and write the result into the temp','line_number':184,'multiline':False]['text':' file.','line_number':185,'multiline':False]['text':' STYLE_BT:         NL separated','line_number':186,'multiline':False]['text':'       If expanding `cmd` execute it directly.','line_number':187,'multiline':False]['text':' STYLE_GLOB:       NUL separated','line_number':188,'multiline':False]['text':'       If we use *csh, "glob" will work better than "echo".','line_number':189,'multiline':False]['text':' STYLE_PRINT:      NL or NUL separated','line_number':190,'multiline':False]['text':'       If we use *zsh, "print -N" will work better than "glob".','line_number':191,'multiline':False]['text':' STYLE_VIMGLOB:    NL separated','line_number':192,'multiline':False]['text':'       If we use *sh*, we define "vimglob()".','line_number':193,'multiline':False]['text':' STYLE_GLOBSTAR:   NL separated','line_number':194,'multiline':False]['text':'       If we use *bash*, we define "vimglob() and enable globstar option".','line_number':195,'multiline':False]['text':' STYLE_ECHO:       space separated.','line_number':196,'multiline':False]['text':'       A shell we don't know, stay safe and use "echo".','line_number':197,'multiline':False]['text':' Compute the length of the command.  We need 2 extra bytes: for the','line_number':217,'multiline':False]['text':' optional '&' and for the NUL.','line_number':218,'multiline':False]['text':' Worst case: "unset nonomatch; print -N >" plus two is 29','line_number':219,'multiline':False]['text':' Count the length of the patterns in the same way as they are put in','line_number':228,'multiline':False]['text':' "command" below.','line_number':229,'multiline':False]['text':' add space','line_number':230,'multiline':False]['text':' may add a backslash','line_number':233,'multiline':False]['text':' Build the shell command:','line_number':245,'multiline':False]['text':' - Set $nonomatch depending on EW_NOTFOUND (hopefully the shell','line_number':246,'multiline':False]['text':'    recognizes this).','line_number':247,'multiline':False]['text':' - Add the shell command to print the expanded names.','line_number':248,'multiline':False]['text':' - Add the temp file name.','line_number':249,'multiline':False]['text':' - Add the file name patterns.','line_number':250,'multiline':False]['text':' change `command; command& ` to (command; command )','line_number':252,'multiline':False]['text':' exclude first backtick','line_number':258,'multiline':False]['text':' remove last backtick','line_number':264,'multiline':False]['text':' remove trailing '&'','line_number':269,'multiline':False]['text':' Assume the nonomatch option is valid only for csh like shells,','line_number':277,'multiline':False]['text':' otherwise, this may set the positional parameters for the shell,','line_number':278,'multiline':False]['text':' e.g. "$*".','line_number':279,'multiline':False]['text':' Put a backslash before special','line_number':304,'multiline':False]['text':' characters, except inside ``.','line_number':305,'multiline':False]['text':' Remove a backslash, take char literally.  But keep','line_number':314,'multiline':False]['text':' backslash inside backticks, before a special character','line_number':315,'multiline':False]['text':' and before a backtick.','line_number':316,'multiline':False]['text':' Put a backslash before a special character, but not','line_number':326,'multiline':False]['text':' when inside ``. And not for $var when EW_KEEPDOLLAR is','line_number':327,'multiline':False]['text':' set.','line_number':328,'multiline':False]['text':' Copy one character.','line_number':332,'multiline':False]['text':' put the '&' after the redirection','line_number':344,'multiline':False]['text':' Using zsh -G: If a pattern has no matches, it is just deleted from','line_number':347,'multiline':False]['text':' the argument list, otherwise zsh gives an error message and doesn't','line_number':348,'multiline':False]['text':' expand any other pattern.','line_number':349,'multiline':False]['text':' Use zsh NULL_GLOB option','line_number':351,'multiline':False]['text':' If we use -f then shell variables set in .cshrc won't get expanded.','line_number':353,'multiline':False]['text':' vi can do it, so we will too, but it is only necessary if there is a "$"','line_number':354,'multiline':False]['text':' in one of the patterns, otherwise we can still use the fast option.','line_number':355,'multiline':False]['text':' Use csh fast option','line_number':357,'multiline':False]['text':' execute the shell command','line_number':360,'multiline':False]['text':' When running in the background, give it some time to create the temp','line_number':363,'multiline':False]['text':' file, but don't wait for it to finish.','line_number':364,'multiline':False]['text':' os_call_shell() failed','line_number':371,'multiline':False]['text':' With interactive completion, the error message is not printed.','line_number':374,'multiline':False]['text':' clear bottom line quickly','line_number':376,'multiline':False]['text':' continue on last line','line_number':377,'multiline':False]['text':' don't overwrite this message','line_number':379,'multiline':False]['text':' If a `cmd` expansion failed, don't list `cmd` as a match, even when','line_number':382,'multiline':False]['text':' EW_NOTFOUND is given','line_number':383,'multiline':False]['text':' read the names from the file into memory','line_number':390,'multiline':False]['text':' Something went wrong, perhaps a file name with a special char.','line_number':393,'multiline':False]['text':' don't overwrite this message','line_number':396,'multiline':False]['text':' get size of temp file','line_number':407,'multiline':False]['text':' NOLINT(runtime/int)','line_number':414,'multiline':False]['text':' fread() doesn't terminate buffer with NUL;','line_number':419,'multiline':False]['text':' appropriate termination (not always NUL) is done below.','line_number':420,'multiline':False]['text':' unexpected read error','line_number':425,'multiline':False]['text':' file names are separated with Space','line_number':433,'multiline':False]['text':' make sure the buffer ends in NL','line_number':435,'multiline':False]['text':' count number of entries','line_number':437,'multiline':False]['text':' skip to next entry','line_number':441,'multiline':False]['text':' file names are separated with NL','line_number':443,'multiline':False]['text':' make sure the buffer ends in NUL','line_number':447,'multiline':False]['text':' count number of entries','line_number':449,'multiline':False]['text':' skip leading white space','line_number':456,'multiline':False]['text':' file names are separated with NUL','line_number':458,'multiline':False]['text':' Some versions of zsh use spaces instead of NULs to separate','line_number':460,'multiline':False]['text':' results.  Only do this when there is no NUL before the end of the','line_number':461,'multiline':False]['text':' buffer, otherwise we would never be able to use file names with','line_number':462,'multiline':False]['text':' embedded spaces when zsh does use NULs.','line_number':463,'multiline':False]['text':' When we found a NUL once, we know zsh is OK, set did_find_nul and','line_number':464,'multiline':False]['text':' don't check for spaces again.','line_number':465,'multiline':False]['text':' If there is a NUL, set did_find_nul, else set check_spaces','line_number':468,'multiline':False]['text':' Make sure the buffer ends with a NUL.  For STYLE_PRINT there','line_number':477,'multiline':False]['text':' already is one, for STYLE_GLOB it needs to be added.','line_number':478,'multiline':False]['text':' count entry','line_number':485,'multiline':False]['text':' count last entry','line_number':491,'multiline':False]['text':' Can happen when using /bin/sh and typing ":e $NO_SUCH_VAR^I".','line_number':497,'multiline':False]['text':' /bin/sh will happily expand it to nothing rather than returning an','line_number':498,'multiline':False]['text':' error; and hey, it's good to check anyway -- webb.','line_number':499,'multiline':False]['text':' Isolate the individual file names.','line_number':506,'multiline':False]['text':' Space or NL separates','line_number':510,'multiline':False]['text':' last entry','line_number':517,'multiline':False]['text':' skip to next entry','line_number':521,'multiline':False]['text':' NUL separates','line_number':523,'multiline':False]['text':' skip entry','line_number':524,'multiline':False]['text':' skip NUL','line_number':527,'multiline':False]['text':' Move the file names to allocated memory.','line_number':531,'multiline':False]['text':' Require the files to exist. Helps when using /bin/sh','line_number':533,'multiline':False]['text':' check if this entry should be included','line_number':538,'multiline':False]['text':' Skip files that are not executable if we check for that.','line_number':544,'multiline':False]['text':' add '/' to a directory name','line_number':553,'multiline':False]['text':' rejected all entries','line_number':560,'multiline':False]['text':'/ Builds the argument vector for running the user-configured 'shell' (p_sh)','line_number':575,'multiline':False]['text':'/ with an optional command prefixed by 'shellcmdflag' (p_shcf). E.g.:','line_number':576,'multiline':False]['text':'/','line_number':577,'multiline':False]['text':'/   ["shell", "-extra_args", "-shellcmdflag", "command with spaces"]','line_number':578,'multiline':False]['text':'/','line_number':579,'multiline':False]['text':'/ @param cmd Command string, or NULL to run an interactive shell.','line_number':580,'multiline':False]['text':'/ @param extra_args Extra arguments to the shell, or NULL.','line_number':581,'multiline':False]['text':'/ @return Newly allocated argument vector. Must be freed with shell_free_argv.','line_number':582,'multiline':False]['text':' Split 'shell'','line_number':589,'multiline':False]['text':' Push a copy of `extra_args`','line_number':593,'multiline':False]['text':' Split 'shellcmdflag'','line_number':597,'multiline':False]['text':' Copy (and escape) `cmd`.','line_number':598,'multiline':False]['text':'/ Releases the memory allocated by `shell_build_argv`.','line_number':608,'multiline':False]['text':'/','line_number':609,'multiline':False]['text':'/ @param argv The argument vector.','line_number':610,'multiline':False]['text':' Nothing was allocated, return','line_number':615,'multiline':False]['text':' Free each argument','line_number':619,'multiline':False]['text':'/ Joins shell arguments from `argv` into a new string.','line_number':626,'multiline':False]['text':'/ If the result is too long it is truncated with ellipsis ("...").','line_number':627,'multiline':False]['text':'/','line_number':628,'multiline':False]['text':'/ @returns[allocated] `argv` joined to a string.','line_number':629,'multiline':False]['text':' Command too long, show ellipsis: "/bin/bash 'foo' 'bar'..."','line_number':652,'multiline':False]['text':'/ Calls the user-configured 'shell' (p_sh) for running a command or wildcard','line_number':661,'multiline':False]['text':'/ expansion.','line_number':662,'multiline':False]['text':'/','line_number':663,'multiline':False]['text':'/ @param cmd The command to execute, or NULL to run an interactive shell.','line_number':664,'multiline':False]['text':'/ @param opts Options that control how the shell will work.','line_number':665,'multiline':False]['text':'/ @param extra_args Extra arguments to the shell, or NULL.','line_number':666,'multiline':False]['text':'/','line_number':667,'multiline':False]['text':'/ @return shell command exit code','line_number':668,'multiline':False]['text':' While the child is running, ignore terminating signals','line_number':676,'multiline':False]['text':' Caller has already redirected output','line_number':692,'multiline':False]['text':'/ os_call_shell() wrapper. Handles 'verbose', :profile, and v:shell_error.','line_number':720,'multiline':False]['text':'/ Invalidates cached tags.','line_number':721,'multiline':False]['text':'/','line_number':722,'multiline':False]['text':'/ @return shell command exit code','line_number':723,'multiline':False]['text':' The external command may update a tags file, clear cached tags.','line_number':744,'multiline':False]['text':'/ Get the stdout of an external command.','line_number':758,'multiline':False]['text':'/ If "ret_len" is NULL replace NUL characters with NL. When "ret_len" is not','line_number':759,'multiline':False]['text':'/ NULL store the length there.','line_number':760,'multiline':False]['text':'/','line_number':761,'multiline':False]['text':'/ @param  cmd      command to execute','line_number':762,'multiline':False]['text':'/ @param  infile   optional input file name','line_number':763,'multiline':False]['text':'/ @param  flags    can be kShellOptSilent or 0','line_number':764,'multiline':False]['text':'/ @param  ret_len  length of the stdout','line_number':765,'multiline':False]['text':'/','line_number':766,'multiline':False]['text':'/ @return an allocated string, or NULL for error.','line_number':767,'multiline':False]['text':' get a name for the temp file','line_number':776,'multiline':False]['text':' Add the redirection stuff','line_number':783,'multiline':False]['text':' Call the shell to execute the command (errors are ignored).','line_number':786,'multiline':False]['text':' Don't check timestamps here.','line_number':787,'multiline':False]['text':' read the names from the file into memory','line_number':794,'multiline':False]['text':' get size of temp file','line_number':803,'multiline':False]['text':' Change NUL into SOH, otherwise the string is truncated.','line_number':814,'multiline':False]['text':' make sure the buffer is terminated','line_number':821,'multiline':False]['text':'/ os_system - synchronously execute a command in the shell','line_number':830,'multiline':False]['text':'/','line_number':831,'multiline':False]['text':'/ example:','line_number':832,'multiline':False]['text':'/   char *output = NULL;','line_number':833,'multiline':False]['text':'/   size_t nread = 0;','line_number':834,'multiline':False]['text':'/   char *argv[] = {"ls", "-la", NULL};','line_number':835,'multiline':False]['text':'/   int exitcode = os_system(argv, NULL, 0, &output, &nread);','line_number':836,'multiline':False]['text':'/','line_number':837,'multiline':False]['text':'/ @param argv The commandline arguments to be passed to the shell. `argv`','line_number':838,'multiline':False]['text':'/             will be consumed.','line_number':839,'multiline':False]['text':'/ @param input The input to the shell (NULL for no input), passed to the','line_number':840,'multiline':False]['text':'/              stdin of the resulting process.','line_number':841,'multiline':False]['text':'/ @param len The length of the input buffer (not used if `input` == NULL)','line_number':842,'multiline':False]['text':'/ @param[out] output Pointer to a location where the output will be','line_number':843,'multiline':False]['text':'/                    allocated and stored. Will point to NULL if the shell','line_number':844,'multiline':False]['text':'/                    command did not output anything. If NULL is passed,','line_number':845,'multiline':False]['text':'/                    the shell output will be ignored.','line_number':846,'multiline':False]['text':'/ @param[out] nread the number of bytes in the returned buffer (if the','line_number':847,'multiline':False]['text':'/             returned buffer is not NULL)','line_number':848,'multiline':False]['text':'/ @return the return code of the process, -1 if the process couldn't be','line_number':849,'multiline':False]['text':'/         started properly','line_number':850,'multiline':False]['text':' Initialize throttle decider.','line_number':860,'multiline':False]['text':' Initialize output ring-buffer.','line_number':861,'multiline':False]['text':' the output buffer','line_number':864,'multiline':False]['text':' Copy the program name in case we need to report an error.','line_number':877,'multiline':False]['text':' Failed, probably 'shell' is not executable.','line_number':889,'multiline':False]['text':' Note: unlike process events, stream events are not queued, as we want to','line_number':901,'multiline':False]['text':' deal with stream events as fast a possible.  It prevents closing the','line_number':902,'multiline':False]['text':' streams while there's still data in the OS buffer (due to the process','line_number':903,'multiline':False]['text':' exiting before all data is read).','line_number':904,'multiline':False]['text':' write the input, if any','line_number':913,'multiline':False]['text':' couldn't write, stop the process and tell the user about it','line_number':918,'multiline':False]['text':' close the input stream after everything is written','line_number':922,'multiline':False]['text':' Invoke busy_start here so LOOP_PROCESS_EVENTS_UNTIL will not change the','line_number':926,'multiline':False]['text':' busy state.','line_number':927,'multiline':False]['text':' Last chunk of output was skipped; display it now.','line_number':938,'multiline':False]['text':' caller should decide if wait_return() is invoked','line_number':942,'multiline':False]['text':' prepare the out parameters if requested','line_number':951,'multiline':False]['text':' no data received from the process, return NULL','line_number':954,'multiline':False]['text':' NUL-terminate to make the output directly usable as a C string','line_number':958,'multiline':False]['text':'/  - ensures at least `desired` bytes in buffer','line_number':974,'multiline':False]['text':'/','line_number':975,'multiline':False]['text':'/ TODO(aktau): fold with kvec/garray','line_number':976,'multiline':False]['text':'/ Tracks output received for the current executing shell command, and displays','line_number':999,'multiline':False]['text':'/ a pulsing "..." when output should be skipped. Tracking depends on the','line_number':1000,'multiline':False]['text':'/ synchronous/blocking nature of ":!".','line_number':1001,'multiline':False]['text':'/','line_number':1002,'multiline':False]['text':'/ Purpose:','line_number':1003,'multiline':False]['text':'/   1. CTRL-C is more responsive. #1234 #5396','line_number':1004,'multiline':False]['text':'/   2. Improves performance of :! (UI, esp. TUI, is the bottleneck).','line_number':1005,'multiline':False]['text':'/   3. Avoids OOM during long-running, spammy :!.','line_number':1006,'multiline':False]['text':'/','line_number':1007,'multiline':False]['text':'/ Vim does not need this hack because:','line_number':1008,'multiline':False]['text':'/   1. :! in terminal-Vim runs in cooked mode, so CTRL-C is caught by the','line_number':1009,'multiline':False]['text':'/      terminal and raises SIGINT out-of-band.','line_number':1010,'multiline':False]['text':'/   2. :! in terminal-Vim uses a tty (Nvim uses pipes), so commands','line_number':1011,'multiline':False]['text':'/      (e.g. `git grep`) may page themselves.','line_number':1012,'multiline':False]['text':'/','line_number':1013,'multiline':False]['text':'/ @param size Length of data, used with internal state to decide whether','line_number':1014,'multiline':False]['text':'/             output should be skipped. size=0 resets the internal state and','line_number':1015,'multiline':False]['text':'/             returns the previous decision.','line_number':1016,'multiline':False]['text':'/','line_number':1017,'multiline':False]['text':'/ @returns true if output should be skipped and pulse was displayed.','line_number':1018,'multiline':False]['text':'/          Returns the previous decision if size=0.','line_number':1019,'multiline':False]['text':' Start time of the current throttle.','line_number':1022,'multiline':False]['text':' Bytes observed since last throttle.','line_number':1023,'multiline':False]['text':' "Pulse" count of the current throttle.','line_number':1024,'multiline':False]['text':' Display at least the first chunk of output even if it is big.','line_number':1035,'multiline':False]['text':' Pulse "..." at the bottom of the screen.','line_number':1052,'multiline':False]['text':' put cursor at start of line','line_number':1060,'multiline':False]['text':'/ Saves output in a quasi-ringbuffer. Used to ensure the last ~page of','line_number':1067,'multiline':False]['text':'/ output for a shell-command is always displayed.','line_number':1068,'multiline':False]['text':'/','line_number':1069,'multiline':False]['text':'/ Init mode: Resets the internal state.','line_number':1070,'multiline':False]['text':'/   output = NULL','line_number':1071,'multiline':False]['text':'/   size   = 0','line_number':1072,'multiline':False]['text':'/ Print mode: Displays the current saved data.','line_number':1073,'multiline':False]['text':'/   output = NULL','line_number':1074,'multiline':False]['text':'/   size   = SIZE_MAX','line_number':1075,'multiline':False]['text':'/','line_number':1076,'multiline':False]['text':'/ @param  output  Data to save, or NULL to invoke a special mode.','line_number':1077,'multiline':False]['text':'/ @param  size    Length of `output`.','line_number':1078,'multiline':False]['text':' Saved output.','line_number':1082,'multiline':False]['text':' Init mode','line_number':1087,'multiline':False]['text':' Print mode','line_number':1092,'multiline':False]['text':' This is basically a ring-buffer...','line_number':1097,'multiline':False]['text':' Save mode','line_number':1098,'multiline':False]['text':' Length of the old data that can be kept.','line_number':1103,'multiline':False]['text':' Shift the kept part of the old data to the start.','line_number':1106,'multiline':False]['text':' Copy the entire new data to the remaining space.','line_number':1110,'multiline':False]['text':'/ Continue to append data to last screen line.','line_number':1116,'multiline':False]['text':'/','line_number':1117,'multiline':False]['text':'/ @param output       Data to append to screen lines.','line_number':1118,'multiline':False]['text':'/ @param remaining    Size of data.','line_number':1119,'multiline':False]['text':'/ @param new_line     If true, next data output will be on a new line.','line_number':1120,'multiline':False]['text':' Note: this is not 100% precise:','line_number':1130,'multiline':False]['text':' 1. we don't check if received continuation bytes are already invalid','line_number':1131,'multiline':False]['text':'    and we thus do some buffering that could be avoided','line_number':1132,'multiline':False]['text':' 2. we don't compose chars over buffer boundaries, even if we see an','line_number':1133,'multiline':False]['text':'    incomplete UTF-8 sequence that could be composing with the last','line_number':1134,'multiline':False]['text':'    complete sequence.','line_number':1135,'multiline':False]['text':' This will be corrected when we switch to vterm based implementation','line_number':1136,'multiline':False]['text':' Skip output above a threshold.','line_number':1158,'multiline':False]['text':' Save the skipped output. If it is the final chunk, we display it later.','line_number':1159,'multiline':False]['text':' Move remaining data to start of buffer, so the buffer can never','line_number':1169,'multiline':False]['text':' wrap around.','line_number':1170,'multiline':False]['text':'/ Parses a command string into a sequence of words, taking quotes into','line_number':1174,'multiline':False]['text':'/ consideration.','line_number':1175,'multiline':False]['text':'/','line_number':1176,'multiline':False]['text':'/ @param str The command string to be parsed','line_number':1177,'multiline':False]['text':'/ @param argv The vector that will be filled with copies of the parsed','line_number':1178,'multiline':False]['text':'/        words. It can be NULL if the caller only needs to count words.','line_number':1179,'multiline':False]['text':'/ @return The number of words parsed.','line_number':1180,'multiline':False]['text':' Fill the slot','line_number':1191,'multiline':False]['text':'/ Calculates the length of a shell word.','line_number':1202,'multiline':False]['text':'/','line_number':1203,'multiline':False]['text':'/ @param str A pointer to the first character of the word','line_number':1204,'multiline':False]['text':'/ @return The offset from `str` at which the word ends.','line_number':1205,'multiline':False]['text':' Move `p` to the end of shell word by advancing the pointer while it's','line_number':1212,'multiline':False]['text':' inside a quote or it's a non-whitespace character','line_number':1213,'multiline':False]['text':' Found a quote character, switch the `inquote` flag','line_number':1216,'multiline':False]['text':'/ To remain compatible with the old implementation (which forked a process','line_number':1230,'multiline':False]['text':'/ for writing) the entire text is copied to a temporary buffer before the','line_number':1231,'multiline':False]['text':'/ event loop starts. If we don't (by writing in chunks returned by `ml_get`)','line_number':1232,'multiline':False]['text':'/ the buffer being modified might get modified by reading from the process','line_number':1233,'multiline':False]['text':'/ before we finish writing.','line_number':1234,'multiline':False]['text':' NL -> NUL translation','line_number':1246,'multiline':False]['text':' Finished a line, add a NL, unless this line should not have one.','line_number':1259,'multiline':False]['text':' Insert the line','line_number':1289,'multiline':False]['text':' Translate NUL to NL','line_number':1301,'multiline':False]['text':' append unfinished line','line_number':1309,'multiline':False]['text':' remember that the NL was missing','line_number':1311,'multiline':False]['text':' Can happen if system() tries to send input to a shell command that was','line_number':1327,'multiline':False]['text':' backgrounded (:call system("cat - &", "foo")). #3529 #5241','line_number':1328,'multiline':False]['text':'/ Applies 'shellxescape' (p_sxe) and 'shellxquote' (p_sxq) to a command.','line_number':1335,'multiline':False]['text':'/','line_number':1336,'multiline':False]['text':'/ @param cmd Command string','line_number':1337,'multiline':False]['text':'/ @return    Escaped/quoted command string (allocated).','line_number':1338,'multiline':False]['text':' When 'shellxquote' is ( append ).','line_number':1353,'multiline':False]['text':' When 'shellxquote' is "( append )".','line_number':1354,'multiline':False]