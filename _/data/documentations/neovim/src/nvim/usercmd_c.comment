['text':' usercmd.c: User defined command support','line_number':1,'multiline':False]['text':'/ List of names for completion for ":command" with the EXPAND_ flag.','line_number':54,'multiline':False]['text':'/ Must be alphabetical for completion.','line_number':55,'multiline':False]['text':'/ List of names of address types.  Must be alphabetical for completion.','line_number':102,'multiline':False]['text':'/ Search for a user command that matches "eap->cmd".','line_number':119,'multiline':False]['text':'/ Return cmdidx in "eap->cmdidx", flags in "eap->argt", idx in "eap->useridx".','line_number':120,'multiline':False]['text':'/ Return a pointer to just after the command.','line_number':121,'multiline':False]['text':'/ Return NULL if there is no matching command.','line_number':122,'multiline':False]['text':'/','line_number':123,'multiline':False]['text':'/ @param *p      end of the command (possibly including count)','line_number':124,'multiline':False]['text':'/ @param full    set to true for a full match','line_number':125,'multiline':False]['text':'/ @param xp      used for completion, NULL otherwise','line_number':126,'multiline':False]['text':'/ @param complp  completion flags or NULL','line_number':127,'multiline':False]['text':' Found ambiguous buffer-local command,','line_number':134,'multiline':False]['text':' only full match global is accepted.','line_number':135,'multiline':False]['text':' Look for buffer-local user commands first, then global ones.','line_number':137,'multiline':False]['text':' If finding a second match, the command is ambiguous.  But','line_number':150,'multiline':False]['text':' not if a buffer-local command wasn't a full match and a','line_number':151,'multiline':False]['text':' global command is a full match.','line_number':152,'multiline':False]['text':' If we matched up to a digit, then there could','line_number':161,'multiline':False]['text':' be another command including the digit that we','line_number':162,'multiline':False]['text':' should use instead.','line_number':163,'multiline':False]['text':' Do not search for further abbreviations','line_number':188,'multiline':False]['text':' if this is an exact match.','line_number':189,'multiline':False]['text':' Stop if we found a full match or searched all.','line_number':202,'multiline':False]['text':' Only found ambiguous matches.','line_number':209,'multiline':False]['text':' The match we found may be followed immediately by a number.  Move "p"','line_number':217,'multiline':False]['text':' back to point to it.','line_number':218,'multiline':False]['text':'/ Set completion context for :command','line_number':225,'multiline':False]['text':' Check for attributes','line_number':231,'multiline':False]['text':' Skip "-".','line_number':233,'multiline':False]['text':' Cursor is still in the attribute.','line_number':236,'multiline':False]['text':' No "=", so complete attribute names.','line_number':239,'multiline':False]['text':' For the -complete, -nargs and -addr attributes, we complete','line_number':245,'multiline':False]['text':' their arguments as well.','line_number':246,'multiline':False]['text':' After the attributes comes the new command name.','line_number':265,'multiline':False]['text':' And finally comes a normal command.','line_number':273,'multiline':False]['text':'/ Set the completion context for the argument of a user defined command.','line_number':277,'multiline':False]['text':' EX_XFILE: file names are handled above.','line_number':286,'multiline':False]['text':' Find start of last argument.','line_number':301,'multiline':False]['text':' argument starts after a space','line_number':305,'multiline':False]['text':' skip over escaped character','line_number':308,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of user command names.','line_number':323,'multiline':False]['text':' In cmdwin, the alternative buffer should be used.','line_number':327,'multiline':False]['text':' global command is overruled by buffer-local one','line_number':340,'multiline':False]['text':'/ Get the name of user command "idx".  "cmdidx" can be CMD_USER or','line_number':349,'multiline':False]['text':'/ CMD_USER_BUF.','line_number':350,'multiline':False]['text':'/','line_number':351,'multiline':False]['text':'/ @return  NULL if the command is not found.','line_number':352,'multiline':False]['text':' In cmdwin, the alternative buffer should be used.','line_number':359,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of user address type names.','line_number':369,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of user command','line_number':375,'multiline':False]['text':'/ attributes.','line_number':376,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of values for -nargs.','line_number':390,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of values for -complete.','line_number':409,'multiline':False]['text':' In cmdwin, the alternative buffer should be used.','line_number':448,'multiline':False]['text':' Skip commands which don't match the requested prefix and','line_number':456,'multiline':False]['text':' commands filtered out.','line_number':457,'multiline':False]['text':' Put out the title first time','line_number':463,'multiline':False]['text':' Special cases','line_number':474,'multiline':False]['text':' "over" is how much longer the name is than the column width for','line_number':504,'multiline':False]['text':' the name, we'll try to align what comes after.','line_number':505,'multiline':False]['text':' Arguments','line_number':509,'multiline':False]['text':' Address / Range','line_number':532,'multiline':False]['text':' -count=N','line_number':535,'multiline':False]['text':' -range=N','line_number':542,'multiline':False]['text':' Address Type','line_number':555,'multiline':False]['text':' Completion','line_number':570,'multiline':False]['text':' put the description on a new line','line_number':589,'multiline':False]['text':'/ Parse address type argument','line_number':616,'multiline':False]['text':'/ Parse a completion argument "value[vallen]".','line_number':643,'multiline':False]['text':'/ The detected completion goes in "*complp", argument type in "*argt".','line_number':644,'multiline':False]['text':'/ When there is an argument, for function and user defined completion, it's','line_number':645,'multiline':False]['text':'/ copied to allocated memory and stored in "*compl_arg".','line_number':646,'multiline':False]['text':'/','line_number':647,'multiline':False]['text':'/ @return  FAIL if something is wrong.','line_number':648,'multiline':False]['text':' Look for any argument part - which is the part after any ','','line_number':656,'multiline':False]['text':' First, try the simple attributes (no arguments)','line_number':715,'multiline':False]['text':' Look for the attribute name - which is the part before any '='','line_number':731,'multiline':False]['text':' Do nothing - this is the default;','line_number':744,'multiline':False]['text':' default for -range is using buffer lines','line_number':782,'multiline':False]['text':' default for -count is using any number','line_number':788,'multiline':False]['text':'/ Check for a valid user command name','line_number':843,'multiline':False]['text':'/','line_number':844,'multiline':False]['text':'/ If the given {name} is valid, then a pointer to the end of the valid name is returned.','line_number':845,'multiline':False]['text':'/ Otherwise, returns NULL.','line_number':846,'multiline':False]['text':'/ Create a new user command {name}, if one doesn't already exist.','line_number':861,'multiline':False]['text':'/','line_number':862,'multiline':False]['text':'/ This function takes ownership of compl_arg, compl_luaref, and luaref.','line_number':863,'multiline':False]['text':'/','line_number':864,'multiline':False]['text':'/ @return  OK if the command is created, FAIL otherwise.','line_number':865,'multiline':False]['text':' Can't replace termcodes - try using the string as is','line_number':878,'multiline':False]['text':' get address of growarray: global or in curbuf','line_number':882,'multiline':False]['text':' Search for the command in the already defined commands.','line_number':894,'multiline':False]['text':' Command can be replaced with "command!" and when sourcing the','line_number':908,'multiline':False]['text':' same script again, but only once.','line_number':909,'multiline':False]['text':' Stop as soon as we pass the name to add','line_number':926,'multiline':False]['text':' Extend the array unless we're replacing an existing command','line_number':932,'multiline':False]['text':'/ ":command ..."','line_number':970,'multiline':False]['text':' Check for attributes','line_number':984,'multiline':False]['text':' Get the name (if any) and skip to the following argument.','line_number':995,'multiline':False]['text':' If there is nothing after the name, and no attributes were specified,','line_number':1004,'multiline':False]['text':' we are listing commands','line_number':1005,'multiline':False]['text':' success','line_number':1019,'multiline':False]['text':'/ ":comclear"','line_number':1026,'multiline':False]['text':'/ Clear all user commands, global and for current buffer.','line_number':1027,'multiline':False]['text':'/ Clear all user commands for "gap".','line_number':1044,'multiline':False]['text':'/ Split a string by unescaped whitespace (space & tab), used for f-args on Lua commands callback.','line_number':1095,'multiline':False]['text':'/ Similar to uc_split_args(), but does not allocate, add quotes, add commas and is an iterator.','line_number':1096,'multiline':False]['text':'/','line_number':1097,'multiline':False]['text':'/ @param[in]  arg String to split','line_number':1098,'multiline':False]['text':'/ @param[in]  arglen Length of {arg}','line_number':1099,'multiline':False]['text':'/ @param[inout] end Index of last character of previous iteration','line_number':1100,'multiline':False]['text':'/ @param[out] buf Buffer to copy string into','line_number':1101,'multiline':False]['text':'/ @param[out] len Length of string in {buf}','line_number':1102,'multiline':False]['text':'/','line_number':1103,'multiline':False]['text':'/ @return true if iteration is complete, else false','line_number':1104,'multiline':False]['text':'/ split and quote args for <f-args>','line_number':1138,'multiline':False]['text':' Precalculate length','line_number':1142,'multiline':False]['text':' Initial and final quotes','line_number':1143,'multiline':False]['text':' ", "','line_number':1162,'multiline':False]['text':' ", "','line_number':1188,'multiline':False]['text':'/ Add modifiers from "cmod->cmod_split" to "buf".  Set "multi_mods" when one','line_number':1271,'multiline':False]['text':'/ was added.','line_number':1272,'multiline':False]['text':'/','line_number':1273,'multiline':False]['text':'/ @return the number of bytes added','line_number':1274,'multiline':False]['text':' :aboveleft and :leftabove','line_number':1279,'multiline':False]['text':' :belowright and :rightbelow','line_number':1283,'multiline':False]['text':' :botright','line_number':1287,'multiline':False]['text':' :tab','line_number':1292,'multiline':False]['text':' For compatibility, don't add a tabpage number if it is the same','line_number':1296,'multiline':False]['text':' as the default number for :tab.','line_number':1297,'multiline':False]['text':' :topleft','line_number':1306,'multiline':False]['text':' :vertical','line_number':1310,'multiline':False]['text':' :horizontal','line_number':1314,'multiline':False]['text':'/ Generate text for the "cmod" command modifiers.','line_number':1321,'multiline':False]['text':'/ If "buf" is NULL just return the length.','line_number':1322,'multiline':False]['text':' the modifiers that are simple flags','line_number':1355,'multiline':False]['text':' :silent','line_number':1362,'multiline':False]['text':' :verbose','line_number':1368,'multiline':False]['text':' flags from cmod->cmod_split','line_number':1379,'multiline':False]['text':'/ Check for a <> code in a user command.','line_number':1389,'multiline':False]['text':'/','line_number':1390,'multiline':False]['text':'/ @param code       points to the '<'.  "len" the length of the <> (inclusive).','line_number':1391,'multiline':False]['text':'/ @param buf        is where the result is to be added.','line_number':1392,'multiline':False]['text':'/ @param cmd        the user command we're expanding','line_number':1393,'multiline':False]['text':'/ @param eap        ex arguments','line_number':1394,'multiline':False]['text':'/ @param split_buf  points to a buffer used for splitting, caller should free it.','line_number':1395,'multiline':False]['text':'/ @param split_len  is the length of what "split_buf" contains.','line_number':1396,'multiline':False]['text':'/','line_number':1397,'multiline':False]['text':'/ @return           the length of the replacement, which has been added to "buf".','line_number':1398,'multiline':False]['text':'/                   Return -1 if there was no match, and only the "<" has been copied.','line_number':1399,'multiline':False]['text':' type = ct_NONE;','line_number':1428,'multiline':False]['text':' Simple case first','line_number':1451,'multiline':False]['text':' When specified there is a single argument don't split it.','line_number':1464,'multiline':False]['text':' Works for ":Cmd %" when % is "a b c".','line_number':1465,'multiline':False]['text':' No quoting, no splitting','line_number':1471,'multiline':False]['text':' Quote, but don't split','line_number':1477,'multiline':False]['text':' Quote and split (<f-args>)','line_number':1497,'multiline':False]['text':' This is hard, so only do it once, and cache the result','line_number':1498,'multiline':False]['text':' Not recognized: just copy the '<' and return -1.','line_number':1596,'multiline':False]['text':' Replace <> in the command by the arguments.','line_number':1631,'multiline':False]['text':' First round: "buf" is NULL, compute length, allocate "buf".','line_number':1632,'multiline':False]['text':' Second round: copy result into "buf".','line_number':1633,'multiline':False]['text':' source','line_number':1636,'multiline':False]['text':' destination','line_number':1637,'multiline':False]['text':' K_SPECIAL has been put in the buffer as K_SPECIAL','line_number':1651,'multiline':False]['text':' KS_SPECIAL KE_FILLER, like for mappings, but','line_number':1652,'multiline':False]['text':' do_cmdline() doesn't handle that, so convert it back.','line_number':1653,'multiline':False]['text':' break if no <item> is found','line_number':1665,'multiline':False]['text':' Include the '>'','line_number':1670,'multiline':False]['text':' Take everything up to the '<'','line_number':1673,'multiline':False]['text':' no match, continue after '<'','line_number':1684,'multiline':False]['text':' second time here, finished','line_number':1696,'multiline':False]['text':' Add on the trailing characters','line_number':1701,'multiline':False]['text':' Careful: Do not use "cmd" here, it may have become invalid if a user','line_number':1715,'multiline':False]['text':' command was added.','line_number':1716,'multiline':False]['text':'/ Gets a map of maps describing user-commands defined for buffer `buf` or','line_number':1726,'multiline':False]['text':'/ defined globally if `buf` is NULL.','line_number':1727,'multiline':False]['text':'/','line_number':1728,'multiline':False]['text':'/ @param buf  Buffer to inspect, or NULL to get global commands.','line_number':1729,'multiline':False]['text':'/','line_number':1730,'multiline':False]['text':'/ @return Map of maps describing commands','line_number':1731,'multiline':False]['text':' -count=N','line_number':1776,'multiline':False]['text':' -count','line_number':1778,'multiline':False]['text':' -range=%','line_number':1786,'multiline':False]['text':' -range=N','line_number':1789,'multiline':False]['text':' -range','line_number':1791,'multiline':False]