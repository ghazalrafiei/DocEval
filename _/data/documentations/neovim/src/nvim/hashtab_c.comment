['text':'/ @file hashtab.c','line_number':1,'multiline':False]['text':'/','line_number':2,'multiline':False]['text':'/ Handling of a hashtable with Vim-specific properties.','line_number':3,'multiline':False]['text':'/','line_number':4,'multiline':False]['text':'/ Each item in a hashtable has a NUL terminated string key. A key can appear','line_number':5,'multiline':False]['text':'/ only once in the table.','line_number':6,'multiline':False]['text':'/','line_number':7,'multiline':False]['text':'/ A hash number is computed from the key for quick lookup. When the hashes','line_number':8,'multiline':False]['text':'/ of two different keys point to the same entry an algorithm is used to','line_number':9,'multiline':False]['text':'/ iterate over other entries in the table until the right one is found.','line_number':10,'multiline':False]['text':'/ To make the iteration work removed keys are different from entries where a','line_number':11,'multiline':False]['text':'/ key was never present.','line_number':12,'multiline':False]['text':'/','line_number':13,'multiline':False]['text':'/ The mechanism has been partly based on how Python Dictionaries are','line_number':14,'multiline':False]['text':'/ implemented. The algorithm is from Knuth Vol. 3, Sec. 6.4.','line_number':15,'multiline':False]['text':'/','line_number':16,'multiline':False]['text':'/ The hashtable grows to accommodate more entries when needed. At least 1/3','line_number':17,'multiline':False]['text':'/ of the entries is empty to keep the lookup efficient (at the cost of extra','line_number':18,'multiline':False]['text':'/ memory).','line_number':19,'multiline':False]['text':' Magic value for algorithm that walks through the array.','line_number':33,'multiline':False]['text':'/ Initialize an empty hash table.','line_number':42,'multiline':False]['text':' This zeroes all "ht_" entries and all the "hi_key" in "ht_smallarray".','line_number':45,'multiline':False]['text':'/ Free the array of a hash table without freeing contained values.','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ If "ht" is not freed (after calling this) then you should call hash_init()','line_number':53,'multiline':False]['text':'/ right next!','line_number':54,'multiline':False]['text':'/ Free the array of a hash table and all contained values.','line_number':62,'multiline':False]['text':'/','line_number':63,'multiline':False]['text':'/ @param off the offset from start of value to start of key (@see hashitem_T).','line_number':64,'multiline':False]['text':'/ Find item for given "key" in hashtable "ht".','line_number':77,'multiline':False]['text':'/','line_number':78,'multiline':False]['text':'/ @param key The key of the looked-for item. Must not be NULL.','line_number':79,'multiline':False]['text':'/','line_number':80,'multiline':False]['text':'/ @return Pointer to the hash item corresponding to the given key.','line_number':81,'multiline':False]['text':'/         If not found, then return pointer to the empty item that would be','line_number':82,'multiline':False]['text':'/         used for that key.','line_number':83,'multiline':False]['text':'/         WARNING: Returned pointer becomes invalid as soon as the hash table','line_number':84,'multiline':False]['text':'/                  is changed in any way.','line_number':85,'multiline':False]['text':'/ Like hash_find, but key is not NUL-terminated','line_number':91,'multiline':False]['text':'/','line_number':92,'multiline':False]['text':'/ @param[in]  ht  Hashtab to look in.','line_number':93,'multiline':False]['text':'/ @param[in]  key  Key of the looked-for item. Must not be NULL.','line_number':94,'multiline':False]['text':'/ @param[in]  len  Key length.','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':'/ @return Pointer to the hash item corresponding to the given key.','line_number':97,'multiline':False]['text':'/         If not found, then return pointer to the empty item that would be','line_number':98,'multiline':False]['text':'/         used for that key.','line_number':99,'multiline':False]['text':'/','line_number':100,'multiline':False]['text':'/         @warning Returned pointer becomes invalid as soon as the hash table','line_number':101,'multiline':False]['text':'/                  is changed in any way.','line_number':102,'multiline':False]['text':'/ Like hash_find(), but caller computes "hash".','line_number':108,'multiline':False]['text':'/','line_number':109,'multiline':False]['text':'/ @param[in]  key  The key of the looked-for item. Must not be NULL.','line_number':110,'multiline':False]['text':'/ @param[in]  key_len  Key length.','line_number':111,'multiline':False]['text':'/ @param[in]  hash  The precomputed hash for the key.','line_number':112,'multiline':False]['text':'/','line_number':113,'multiline':False]['text':'/ @return Pointer to the hashitem corresponding to the given key.','line_number':114,'multiline':False]['text':'/         If not found, then return pointer to the empty item that would be','line_number':115,'multiline':False]['text':'/         used for that key.','line_number':116,'multiline':False]['text':'/         WARNING: Returned pointer becomes invalid as soon as the hash table','line_number':117,'multiline':False]['text':'/                  is changed in any way.','line_number':118,'multiline':False]['text':' ifdef HT_DEBUG','line_number':124,'multiline':False]['text':' Quickly handle the most common situations:','line_number':126,'multiline':False]['text':' - return if there is no item at all','line_number':127,'multiline':False]['text':' - skip over a removed item','line_number':128,'multiline':False]['text':' - return if the item matches','line_number':129,'multiline':False]['text':' Need to search through the table to find the key. The algorithm','line_number':146,'multiline':False]['text':' to step through the table starts with large steps, gradually becoming','line_number':147,'multiline':False]['text':' smaller down to (1/4 table size + 1). This means it goes through all','line_number':148,'multiline':False]['text':' table entries in the end.','line_number':149,'multiline':False]['text':' When we run into a NULL key it's clear that the key isn't there.','line_number':150,'multiline':False]['text':' Return the first available slot found (can be a slot of a removed','line_number':151,'multiline':False]['text':' item).','line_number':152,'multiline':False]['text':' count a "miss" for hashtab lookup','line_number':155,'multiline':False]['text':' ifdef HT_DEBUG','line_number':157,'multiline':False]['text':'/ Print the efficiency of hashtable lookups.','line_number':178,'multiline':False]['text':'/','line_number':179,'multiline':False]['text':'/ Useful when trying different hash algorithms.','line_number':180,'multiline':False]['text':'/ Called when exiting.','line_number':181,'multiline':False]['text':' ifdef HT_DEBUG','line_number':192,'multiline':False]['text':'/ Add (empty) item for key `key` to hashtable `ht`.','line_number':195,'multiline':False]['text':'/','line_number':196,'multiline':False]['text':'/ @param key Pointer to the key for the new item. The key has to be contained','line_number':197,'multiline':False]['text':'/            in the new item (@see hashitem_T). Must not be NULL.','line_number':198,'multiline':False]['text':'/','line_number':199,'multiline':False]['text':'/ @return OK   if success.','line_number':200,'multiline':False]['text':'/         FAIL if key already present','line_number':201,'multiline':False]['text':'/ Add item "hi" for key "key" to hashtable "ht".','line_number':214,'multiline':False]['text':'/','line_number':215,'multiline':False]['text':'/ @param hi   The hash item to be used. Must have been obtained through','line_number':216,'multiline':False]['text':'/             hash_lookup() and point to an empty item.','line_number':217,'multiline':False]['text':'/ @param key  Pointer to the key for the new item. The key has to be contained','line_number':218,'multiline':False]['text':'/             in the new item (@see hashitem_T). Must not be NULL.','line_number':219,'multiline':False]['text':'/ @param hash The precomputed hash value for the key.','line_number':220,'multiline':False]['text':' When the space gets low may resize the array.','line_number':231,'multiline':False]['text':'/ Remove item "hi" from hashtable "ht".','line_number':235,'multiline':False]['text':'/','line_number':236,'multiline':False]['text':'/ Caller must take care of freeing the item itself.','line_number':237,'multiline':False]['text':'/','line_number':238,'multiline':False]['text':'/ @param hi The hash item to be removed.','line_number':239,'multiline':False]['text':'/           It must have been obtained with hash_lookup().','line_number':240,'multiline':False]['text':'/ Lock hashtable (prevent changes in ht_array).','line_number':249,'multiline':False]['text':'/','line_number':250,'multiline':False]['text':'/ Don't use this when items are to be added!','line_number':251,'multiline':False]['text':'/ Must call hash_unlock() later.','line_number':252,'multiline':False]['text':'/ Unlock hashtable (allow changes in ht_array again).','line_number':258,'multiline':False]['text':'/','line_number':259,'multiline':False]['text':'/ Table will be resized (shrunk) when necessary.','line_number':260,'multiline':False]['text':'/ This must balance a call to hash_lock().','line_number':261,'multiline':False]['text':'/ Resize hashtable (new size can be given or automatically computed).','line_number':268,'multiline':False]['text':'/','line_number':269,'multiline':False]['text':'/ @param minitems Minimum number of items the new table should hold.','line_number':270,'multiline':False]['text':'/                 If zero, new size will depend on currently used items:','line_number':271,'multiline':False]['text':'/                 - Shrink when too much empty space.','line_number':272,'multiline':False]['text':'/                 - Grow when not enough empty space.','line_number':273,'multiline':False]['text':'/                 If non-zero, passed minitems will be used.','line_number':274,'multiline':False]['text':' Don't resize a locked table.','line_number':277,'multiline':False]['text':' ifdef HT_DEBUG','line_number':290,'multiline':False]['text':' Return quickly for small tables with at least two NULL items.','line_number':295,'multiline':False]['text':' items are required for the lookup to decide a key isn't there.','line_number':296,'multiline':False]['text':' Grow or refill the array when it's more than 2/3 full (including','line_number':302,'multiline':False]['text':' removed items, so that they get cleaned up).','line_number':303,'multiline':False]['text':' Shrink the array when it's less than 1/5 full. When growing it is','line_number':304,'multiline':False]['text':' at least 1/4 full (avoids repeated grow-shrink operations)','line_number':305,'multiline':False]['text':' it's big, don't make too much room','line_number':311,'multiline':False]['text':' make plenty of room','line_number':314,'multiline':False]['text':' Use specified size.','line_number':318,'multiline':False]['text':' just in case...','line_number':320,'multiline':False]['text':' array is up to 2/3 full','line_number':323,'multiline':False]['text':' make sure it's always a power of 2','line_number':329,'multiline':False]['text':' assert newsize didn't overflow','line_number':331,'multiline':False]['text':' The hashtab is already at the desired size, and there are not too','line_number':338,'multiline':False]['text':' many removed items, bail out.','line_number':339,'multiline':False]['text':' Make sure that oldarray and newarray do not overlap,','line_number':346,'multiline':False]['text':' so that copying is possible.','line_number':347,'multiline':False]['text':' Move all the items from the old array to the new one, placing them in','line_number':360,'multiline':False]['text':' the right spot. The new array won't have any removed items, thus this','line_number':361,'multiline':False]['text':' is also a cleanup action.','line_number':362,'multiline':False]['text':' The algorithm to find the spot to add the item is identical to','line_number':370,'multiline':False]['text':' the algorithm to find an item in hash_lookup(). But we only','line_number':371,'multiline':False]['text':' need to search for a NULL key, thus it's simpler.','line_number':372,'multiline':False]['text':'/ Get the hash number for a key.','line_number':400,'multiline':False]['text':'/','line_number':401,'multiline':False]['text':'/ If you think you know a better hash function: Compile with HT_DEBUG set and','line_number':402,'multiline':False]['text':'/ run a script that uses hashtables a lot. Vim will then print statistics','line_number':403,'multiline':False]['text':'/ when exiting. Try that with the current hash algorithm and yours. The','line_number':404,'multiline':False]['text':'/ lower the percentage the better.','line_number':405,'multiline':False]['text':' A simplistic algorithm that appears to do very well.','line_number':414,'multiline':False]['text':' Suggested by George Reilly.','line_number':415,'multiline':False]['text':'/ Get the hash number for a key that is not a NUL-terminated string','line_number':424,'multiline':False]['text':'/','line_number':425,'multiline':False]['text':'/ @warning Function does not check whether key contains NUL. But you will not','line_number':426,'multiline':False]['text':'/          be able to get hash entry in this case.','line_number':427,'multiline':False]['text':'/','line_number':428,'multiline':False]['text':'/ @param[in]  key  Key.','line_number':429,'multiline':False]['text':'/ @param[in]  len  Key length.','line_number':430,'multiline':False]['text':'/','line_number':431,'multiline':False]['text':'/ @return Key hash.','line_number':432,'multiline':False]['text':'/ Function to get HI_KEY_REMOVED value','line_number':453,'multiline':False]['text':'/','line_number':454,'multiline':False]['text':'/ Used for testing because luajit ffi does not allow getting addresses of','line_number':455,'multiline':False]['text':'/ globals.','line_number':456,'multiline':False]