['text':'/ @file runtime.c','line_number':1,'multiline':False]['text':'/','line_number':2,'multiline':False]['text':'/ Management of runtime files (including packages)','line_number':3,'multiline':False]['text':'/ Structure used to store info for each sourced file.','line_number':61,'multiline':False]['text':'/ It is shared between do_source() and getsourceline().','line_number':62,'multiline':False]['text':'/ This is required, because it needs to be handed to do_cmdline() and','line_number':63,'multiline':False]['text':'/ sourcing can be done recursively.','line_number':64,'multiline':False]['text':'/< opened file for sourcing','line_number':66,'multiline':False]['text':'/< if not NULL: line that was read ahead','line_number':67,'multiline':False]['text':'/< line number of the source file','line_number':68,'multiline':False]['text':'/< ":finish" used','line_number':69,'multiline':False]['text':'/< EOL_UNKNOWN, EOL_UNIX or EOL_DOS','line_number':71,'multiline':False]['text':'/< true if LF found after CR-LF','line_number':72,'multiline':False]['text':'/< next line with breakpoint or zero','line_number':74,'multiline':False]['text':'/< name of sourced file','line_number':75,'multiline':False]['text':'/< debug_tick when breakpoint was set','line_number':76,'multiline':False]['text':'/< top nesting level of sourced file','line_number':77,'multiline':False]['text':'/< type of conversion','line_number':78,'multiline':False]['text':'/ The names of packages that once were loaded are remembered.','line_number':97,'multiline':False]['text':'/ Initialize the execution stack.','line_number':102,'multiline':False]['text':'/ Add an item to the execution stack.','line_number':114,'multiline':False]['text':'/ @return  the new entry','line_number':115,'multiline':False]['text':'/ Add a user function to the execution stack.','line_number':128,'multiline':False]['text':'/ Take an item off of the execution stack.','line_number':139,'multiline':False]['text':'/ Get the current value for <sfile> in allocated memory.','line_number':147,'multiline':False]['text':'/ @param which  ESTACK_SFILE for <sfile>, ESTACK_STACK for <stack> or','line_number':148,'multiline':False]['text':'/               ESTACK_SCRIPT for <script>.','line_number':149,'multiline':False]['text':' If evaluated in a function or autocommand, return the path of the script','line_number':160,'multiline':False]['text':' where it is defined, at script level the current script path is returned','line_number':161,'multiline':False]['text':' instead.','line_number':162,'multiline':False]['text':' Walk the stack backwards, starting from the current frame.','line_number':164,'multiline':False]['text':' Give information about each stack entry up to the root.','line_number':180,'multiline':False]['text':' For a function we compose the call stack, as it was done in the past:','line_number':181,'multiline':False]['text':'   "function One[123]..Two[456]..Three"','line_number':182,'multiline':False]['text':' For the bottom entry of <sfile>: do not add the line number,','line_number':209,'multiline':False]['text':' it is used in <slnum>.  Also leave it out when the number is','line_number':210,'multiline':False]['text':' not set.','line_number':211,'multiline':False]['text':'/ Get DIP_ flags from the [where] argument of a :runtime command.','line_number':236,'multiline':False]['text':'/ "*argp" is advanced to after the [where] argument.','line_number':237,'multiline':False]['text':'/ ":runtime [where] {name}"','line_number':266,'multiline':False]['text':' suppress clang false positive','line_number':273,'multiline':False]['text':'/ Set the completion context for the :runtime command.','line_number':279,'multiline':False]['text':' Skip to the last argument.','line_number':285,'multiline':False]['text':' When there are multiple arguments and [where] is not specified,','line_number':288,'multiline':False]['text':' use an unrelated non-zero flag to avoid expanding [where].','line_number':289,'multiline':False]['text':'/ Source all .vim and .lua files in "fnames" with .vim files being sourced first.','line_number':298,'multiline':False]['text':'/ Source all files in "fnames" with .vim files sourced first, .lua files','line_number':326,'multiline':False]['text':'/ sourced second, and any remaining files sourced last.','line_number':327,'multiline':False]['text':'/ Find the patterns in "name" in all directories in "path" and invoke','line_number':350,'multiline':False]['text':'/ "callback(fname, cookie)".','line_number':351,'multiline':False]['text':'/ "prefix" is prepended to each pattern in "name".','line_number':352,'multiline':False]['text':'/ When "flags" has DIP_ALL: source all files, otherwise only the first one.','line_number':353,'multiline':False]['text':'/ When "flags" has DIP_DIR: find directories instead of files.','line_number':354,'multiline':False]['text':'/ When "flags" has DIP_ERR: give an error message if there is no match.','line_number':355,'multiline':False]['text':'/','line_number':356,'multiline':False]['text':'/ Return FAIL when no file could be sourced, OK otherwise.','line_number':357,'multiline':False]['text':' Make a copy of 'runtimepath'.  Invoking the callback may change the','line_number':364,'multiline':False]['text':' value.','line_number':365,'multiline':False]['text':' Loop over all entries in 'runtimepath'.','line_number':382,'multiline':False]['text':' Copy the path from 'runtimepath' to buf[].','line_number':385,'multiline':False]['text':' Skip after or non-after directories.','line_number':389,'multiline':False]['text':' Loop over all patterns in "name"','line_number':407,'multiline':False]['text':' Append the pattern from "name" to buf[].','line_number':410,'multiline':False]['text':' cached path was unreferenced. keep a ref to','line_number':453,'multiline':False]['text':' prevent runtime_search_path() to freeing it too early','line_number':454,'multiline':False]['text':'/ Find the file "name" in all directories in "path" and invoke','line_number':484,'multiline':False]['text':'/ "callback(fname, cookie)".','line_number':485,'multiline':False]['text':'/ "name" can contain wildcards.','line_number':486,'multiline':False]['text':'/ When "flags" has DIP_ALL: source all files, otherwise only the first one.','line_number':487,'multiline':False]['text':'/ When "flags" has DIP_DIR: find directories instead of files.','line_number':488,'multiline':False]['text':'/ When "flags" has DIP_ERR: give an error message if there is no match.','line_number':489,'multiline':False]['text':'/','line_number':490,'multiline':False]['text':'/ return FAIL when no file could be sourced, OK otherwise.','line_number':491,'multiline':False]['text':' Loop over all entries in cached path','line_number':510,'multiline':False]['text':' Skip after or non-after directories.','line_number':515,'multiline':False]['text':' Loop over all patterns in "name"','line_number':530,'multiline':False]['text':' Append the pattern from "name" to buf[].','line_number':534,'multiline':False]['text':' Expand wildcards, invoke the callback for each match.','line_number':548,'multiline':False]['text':' TODO(bfredl): avoid contention between multiple worker threads?','line_number':602,'multiline':False]['text':'/ Find "name" in "path".  When found, invoke the callback function for','line_number':647,'multiline':False]['text':'/ it: callback(fname, "cookie")','line_number':648,'multiline':False]['text':'/ When "flags" has DIP_ALL repeat for all matches, otherwise only the first','line_number':649,'multiline':False]['text':'/ one is used.','line_number':650,'multiline':False]['text':'/ Returns OK when at least one match found, FAIL otherwise.','line_number':651,'multiline':False]['text':'/ If "name" is NULL calls callback for each entry in "path". Cookie is','line_number':652,'multiline':False]['text':'/ passed by reference in this case, setting it to NULL indicates that callback','line_number':653,'multiline':False]['text':'/ has done its job.','line_number':654,'multiline':False]['text':' NOLINT','line_number':666,'multiline':False]['text':' NOLINT','line_number':670,'multiline':False]['text':' NOLINT','line_number':676,'multiline':False]['text':' NOLINT','line_number':679,'multiline':False]['text':' NOLINT','line_number':722,'multiline':False]['text':' NOTE: we only consider dirs exactly matching "after" to be an AFTER dir.','line_number':740,'multiline':False]['text':' vim8 considers all dirs like "foo/bar_after", "Xafter" etc, as an','line_number':741,'multiline':False]['text':' "after" dir in SOME codepaths not not in ALL codepaths.','line_number':742,'multiline':False]['text':' fact: &rtp entries can contain wild chars','line_number':778,'multiline':False]['text':' "after" packages','line_number':796,'multiline':False]['text':' "after" dirs in rtp','line_number':802,'multiline':False]['text':' strings are not owned','line_number':808,'multiline':False]['text':' Cannot rebuild search path in an async context. As a plugin will invoke','line_number':835,'multiline':False]['text':' itself asynchronously from sync code in the same plugin, the sought','line_number':836,'multiline':False]['text':' after lua/autoload module will most likely already be in the cached path.','line_number':837,'multiline':False]['text':' Thus prefer using the stale cache over erroring out in this situation.','line_number':838,'multiline':False]['text':' initially unowned','line_number':847,'multiline':False]['text':'/ Just like do_in_path_and_pp(), using 'runtimepath' for "path".','line_number':855,'multiline':False]['text':' TODO(bfredl): we could integrate disabled OPT dirs into the cached path','line_number':863,'multiline':False]['text':' which would effectivize ":packadd myoptpack" as well','line_number':864,'multiline':False]['text':'/ Source the file "name" from all directories in 'runtimepath'.','line_number':871,'multiline':False]['text':'/ "name" can contain wildcards.','line_number':872,'multiline':False]['text':'/ When "flags" has DIP_ALL: source all files, otherwise only the first one.','line_number':873,'multiline':False]['text':'/','line_number':874,'multiline':False]['text':'/ return FAIL when no file could be sourced, OK otherwise.','line_number':875,'multiline':False]['text':'/ Just like source_runtime(), but only source vim and lua files','line_number':881,'multiline':False]['text':'/ Just like source_runtime(), but:','line_number':887,'multiline':False]['text':'/ - use "path" instead of 'runtimepath'.','line_number':888,'multiline':False]['text':'/ - only source .vim and .lua files','line_number':889,'multiline':False]['text':'/ Expand wildcards in "pats" and invoke callback matches.','line_number':895,'multiline':False]['text':'/','line_number':896,'multiline':False]['text':'/ @param      num_pat  is number of input patterns.','line_number':897,'multiline':False]['text':'/ @param      patx     is an array of pointers to input patterns.','line_number':898,'multiline':False]['text':'/ @param      flags    is a combination of EW_* flags used in','line_number':899,'multiline':False]['text':'/                      expand_wildcards().','line_number':900,'multiline':False]['text':'/ @param      all      invoke callback on all matches or just one','line_number':901,'multiline':False]['text':'/ @param      callback called for each match.','line_number':902,'multiline':False]['text':'/ @param      cookie   context for callback','line_number':903,'multiline':False]['text':'/','line_number':904,'multiline':False]['text':'/ @returns             OK when some files were found, FAIL otherwise.','line_number':905,'multiline':False]['text':'/ Add the package directory to 'runtimepath'','line_number':923,'multiline':False]['text':'/','line_number':924,'multiline':False]['text':'/ @param fname the package path','line_number':925,'multiline':False]['text':'/ @param is_pack whether the added dir is a "pack/*/start/*/" style package','line_number':926,'multiline':False]['text':' now we have:','line_number':946,'multiline':False]['text':' rtp/pack/name/start/name','line_number':947,'multiline':False]['text':'    p4   p3   p2   p1','line_number':948,'multiline':False]['text':'','line_number':949,'multiline':False]['text':' find the part up to "pack" in 'runtimepath'','line_number':950,'multiline':False]['text':' append pathsep in order to expand symlink','line_number':951,'multiline':False]['text':' Find "ffname" in "p_rtp", ignoring '/' vs '\' differences','line_number':961,'multiline':False]['text':' Also stop at the first "after" directory','line_number':962,'multiline':False]['text':' Did not find "ffname" before the first "after" directory,','line_number':980,'multiline':False]['text':' insert it before this entry.','line_number':981,'multiline':False]['text':' Insert "ffname" after this entry (and comma).','line_number':997,'multiline':False]['text':' Both "fname" and "after" not found, append at the end.','line_number':1004,'multiline':False]['text':' check if rtp/pack/name/start/name/after exists','line_number':1008,'multiline':False]['text':' add one for comma','line_number':1012,'multiline':False]['text':' add one for comma','line_number':1016,'multiline':False]['text':' add one for NUL ------------------------------------------^','line_number':1018,'multiline':False]['text':' We now have 'rtp' parts: {keep}{keep_after}{rest}.','line_number':1024,'multiline':False]['text':' Create new_rtp, first: {keep},{fname}','line_number':1025,'multiline':False]['text':' add comma before','line_number':1030,'multiline':False]['text':' add comma after','line_number':1035,'multiline':False]['text':' Add to new_rtp: {keep},{fname}{keep_after},{afterdir}','line_number':1041,'multiline':False]['text':' Append rest: {keep},{fname}{keep_after},{afterdir}{rest}','line_number':1051,'multiline':False]['text':' Append afterdir when "after" was not found:','line_number':1058,'multiline':False]['text':' {keep},{fname}{rest},{afterdir}','line_number':1059,'multiline':False]['text':'/ Load scripts in "plugin" directory of the package.','line_number':1075,'multiline':False]['text':'/ For opt packages, also load scripts in "ftdetect" (start packages already','line_number':1076,'multiline':False]['text':'/ load these from filetype.lua)','line_number':1077,'multiline':False]['text':' NOLINT','line_number':1080,'multiline':False]['text':' NOLINT','line_number':1081,'multiline':False]['text':' NOLINT','line_number':1087,'multiline':False]['text':' If runtime/filetype.lua wasn't loaded yet, the scripts will be','line_number':1092,'multiline':False]['text':' found when it loads.','line_number':1093,'multiline':False]['text':' used for "cookie" of add_pack_plugin()','line_number':1107,'multiline':False]['text':' directory is not yet in 'runtimepath', add it','line_number':1130,'multiline':False]['text':'/ Add all packages in the "start" directory to 'runtimepath'.','line_number':1170,'multiline':False]['text':' NOLINT','line_number':1191,'multiline':False]['text':'/ Load plugins from all packages in the "start" directory.','line_number':1211,'multiline':False]['text':' NOLINT','line_number':1215,'multiline':False]['text':' NOLINT','line_number':1217,'multiline':False]['text':' ":packloadall"','line_number':1221,'multiline':False]['text':' Find plugins in the package directories and source them.','line_number':1222,'multiline':False]['text':' First do a round to add all directories to 'runtimepath', then load','line_number':1226,'multiline':False]['text':' the plugins. This allows for plugins to use an autoload directory','line_number':1227,'multiline':False]['text':' of another plugin.','line_number':1228,'multiline':False]['text':'/ Read all the plugin files at startup','line_number':1234,'multiline':False]['text':' NOLINT','line_number':1239,'multiline':False]['text':' Don't use source_runtime_vim_lua() yet so we can check for :packloadall below.','line_number':1246,'multiline':False]['text':' NB: after calling this "rtp_copy" may have been freed if it wasn't copied.','line_number':1247,'multiline':False]['text':' Only source "start" packages if not done already with a :packloadall','line_number':1251,'multiline':False]['text':' command.','line_number':1252,'multiline':False]['text':'/ ":packadd[!] {name}"','line_number':1264,'multiline':False]['text':' NOLINT','line_number':1267,'multiline':False]['text':' Round 1: use "start", round 2: use "opt".','line_number':1270,'multiline':False]['text':' Only look under "start" when loading packages wasn't done yet.','line_number':1272,'multiline':False]['text':' The first round don't give a "not found" error, in the second round','line_number':1280,'multiline':False]['text':' only when nothing was found in the first round.','line_number':1281,'multiline':False]['text':' TODO(bfredl): this is bullshit, expandpath should not reinvent path logic.','line_number':1294,'multiline':False]['text':' empty dir used for :runtime','line_number':1303,'multiline':False]['text':' NOLINT','line_number':1315,'multiline':False]['text':' NOLINT','line_number':1317,'multiline':False]['text':' NOLINT','line_number':1322,'multiline':False]['text':' NOLINT','line_number':1324,'multiline':False]['text':' expand dir names in another round','line_number':1329,'multiline':False]['text':' Sort and remove duplicates which can happen when specifying multiple','line_number':1373,'multiline':False]['text':' directories in dirnames.','line_number':1374,'multiline':False]['text':'/ Expand color scheme, compiler or filetype names.','line_number':1378,'multiline':False]['text':'/ Search from 'runtimepath':','line_number':1379,'multiline':False]['text':'/   'runtimepath'/{dirnames}/{pat}.{vim,lua}','line_number':1380,'multiline':False]['text':'/ When "flags" has DIP_START: search also from "start" of 'packpath':','line_number':1381,'multiline':False]['text':'/   'packpath'/pack/*/start/*/{dirnames}/{pat}.{vim,lua}','line_number':1382,'multiline':False]['text':'/ When "flags" has DIP_OPT: search also from "opt" of 'packpath':','line_number':1383,'multiline':False]['text':'/   'packpath'/pack/*/opt/*/{dirnames}/{pat}.{vim,lua}','line_number':1384,'multiline':False]['text':'/ "dirnames" is an array with one or more directory names.','line_number':1385,'multiline':False]['text':'/ Handle command line completion for :runtime command.','line_number':1405,'multiline':False]['text':' Try to complete values for [where] argument when none was found.','line_number':1418,'multiline':False]['text':'/ Expand loadplugin names:','line_number':1437,'multiline':False]['text':'/ 'packpath'/pack/*/opt/{pat}','line_number':1438,'multiline':False]['text':' NOLINT','line_number':1450,'multiline':False]['text':' NOLINT','line_number':1452,'multiline':False]['text':' Sort and remove duplicates which can happen when specifying multiple','line_number':1466,'multiline':False]['text':' directories in dirnames.','line_number':1467,'multiline':False]['text':'/ Append string with escaped commas','line_number':1475,'multiline':False]['text':'/ Compute length of a ENV_SEPCHAR-separated value, doubled and with some','line_number':1489,'multiline':False]['text':'/ suffixes','line_number':1490,'multiline':False]['text':'/','line_number':1491,'multiline':False]['text':'/ @param[in]  val  ENV_SEPCHAR-separated array value.','line_number':1492,'multiline':False]['text':'/ @param[in]  common_suf_len  Length of the common suffix which is appended to','line_number':1493,'multiline':False]['text':'/                             each item in the array, twice.','line_number':1494,'multiline':False]['text':'/ @param[in]  single_suf_len  Length of the suffix which is appended to each','line_number':1495,'multiline':False]['text':'/                             item in the array once.','line_number':1496,'multiline':False]['text':'/','line_number':1497,'multiline':False]['text':'/ @return Length of the ENV_SEPCHAR-separated string array that contains each','line_number':1498,'multiline':False]['text':'/         item in the original array twice with suffixes with given length','line_number':1499,'multiline':False]['text':'/         (common_suf is present after each new item, single_suf is present','line_number':1500,'multiline':False]['text':'/         after half of the new items) and with commas after each item, commas','line_number':1501,'multiline':False]['text':'/         inside the values are escaped.','line_number':1502,'multiline':False]['text':'/ Add directories to a ENV_SEPCHAR-separated array from a colon-separated one','line_number':1525,'multiline':False]['text':'/','line_number':1526,'multiline':False]['text':'/ Commas are escaped in process. To each item PATHSEP "nvim" is appended in','line_number':1527,'multiline':False]['text':'/ addition to suf1 and suf2.','line_number':1528,'multiline':False]['text':'/','line_number':1529,'multiline':False]['text':'/ @param[in,out]  dest  Destination comma-separated array.','line_number':1530,'multiline':False]['text':'/ @param[in]  val  Source ENV_SEPCHAR-separated array.','line_number':1531,'multiline':False]['text':'/ @param[in]  suf1  If not NULL, suffix appended to destination. Prior to it','line_number':1532,'multiline':False]['text':'/                   directory separator is appended. Suffix must not contain','line_number':1533,'multiline':False]['text':'/                   commas.','line_number':1534,'multiline':False]['text':'/ @param[in]  len1  Length of the suf1.','line_number':1535,'multiline':False]['text':'/ @param[in]  suf2  If not NULL, another suffix appended to destination. Again','line_number':1536,'multiline':False]['text':'/                   with directory separator behind. Suffix must not contain','line_number':1537,'multiline':False]['text':'/                   commas.','line_number':1538,'multiline':False]['text':'/ @param[in]  len2  Length of the suf2.','line_number':1539,'multiline':False]['text':'/ @param[in]  forward  If true, iterate over val in forward direction.','line_number':1540,'multiline':False]['text':'/                      Otherwise in reverse.','line_number':1541,'multiline':False]['text':'/','line_number':1542,'multiline':False]['text':'/ @return (dest + appended_characters_length)','line_number':1543,'multiline':False]['text':'/ Adds directory `dest` to a comma-separated list of directories.','line_number':1583,'multiline':False]['text':'/','line_number':1584,'multiline':False]['text':'/ Commas in the added directory are escaped.','line_number':1585,'multiline':False]['text':'/','line_number':1586,'multiline':False]['text':'/ Windows: Appends "nvim-data" instead of "nvim" if `type` is kXDGDataHome.','line_number':1587,'multiline':False]['text':'/','line_number':1588,'multiline':False]['text':'/ @see get_xdg_home','line_number':1589,'multiline':False]['text':'/','line_number':1590,'multiline':False]['text':'/ @param[in,out]  dest  Destination comma-separated array.','line_number':1591,'multiline':False]['text':'/ @param[in]  dir  Directory to append.','line_number':1592,'multiline':False]['text':'/ @param[in]  type  Decides whether to append "nvim" (Win: or "nvim-data").','line_number':1593,'multiline':False]['text':'/ @param[in]  suf1  If not NULL, suffix appended to destination. Prior to it','line_number':1594,'multiline':False]['text':'/                   directory separator is appended. Suffix must not contain','line_number':1595,'multiline':False]['text':'/                   commas.','line_number':1596,'multiline':False]['text':'/ @param[in]  len1  Length of the suf1.','line_number':1597,'multiline':False]['text':'/ @param[in]  suf2  If not NULL, another suffix appended to destination. Again','line_number':1598,'multiline':False]['text':'/                   with directory separator behind. Suffix must not contain','line_number':1599,'multiline':False]['text':'/                   commas.','line_number':1600,'multiline':False]['text':'/ @param[in]  len2  Length of the suf2.','line_number':1601,'multiline':False]['text':'/ @param[in]  forward  If true, iterate over val in forward direction.','line_number':1602,'multiline':False]['text':'/                      Otherwise in reverse.','line_number':1603,'multiline':False]['text':'/','line_number':1604,'multiline':False]['text':'/ @return (dest + appended_characters_length)','line_number':1605,'multiline':False]['text':' TODO(bfredl): too fragile? Ideally default_lib_dir would be made empty','line_number':1649,'multiline':False]['text':' in an appimage build','line_number':1650,'multiline':False]['text':' Find library path relative to the nvim binary: ../lib/nvim/','line_number':1656,'multiline':False]['text':'/ Determine the startup value for &runtimepath','line_number':1665,'multiline':False]['text':'/','line_number':1666,'multiline':False]['text':'/ Windows: Uses "…/nvim-data" for kXDGDataHome to avoid storing','line_number':1667,'multiline':False]['text':'/ configuration and data files in the same path. #4403','line_number':1668,'multiline':False]['text':'/','line_number':1669,'multiline':False]['text':'/ @param clean_arg  Nvim was started with --clean.','line_number':1670,'multiline':False]['text':'/ @return allocated string with the value','line_number':1671,'multiline':False]['text':' -1: NULL byte should be ignored','line_number':1697,'multiline':False]['text':' Strip trailing comma.','line_number':1756,'multiline':False]['text':' ":source!": read Normal mode commands','line_number':1777,'multiline':False]['text':' Need to execute the commands directly.  This is required at least','line_number':1778,'multiline':False]['text':' for:','line_number':1779,'multiline':False]['text':' - ":g" command busy','line_number':1780,'multiline':False]['text':' - after ":argdo", ":windo" or ":bufdo"','line_number':1781,'multiline':False]['text':' - another command follows','line_number':1782,'multiline':False]['text':' - inside a loop','line_number':1783,'multiline':False]['text':' ":source" read ex commands','line_number':1787,'multiline':False]['text':'/ ":source [{fname}]"','line_number':1793,'multiline':False]['text':'/ ":options"','line_number':1799,'multiline':False]['text':'/ ":source" and associated commands.','line_number':1812,'multiline':False]['text':'/','line_number':1813,'multiline':False]['text':'/ @return address holding the next breakpoint line for a source cookie','line_number':1814,'multiline':False]['text':'/ @return  the address holding the debug tick for a source cookie.','line_number':1820,'multiline':False]['text':'/ @return  the nesting level for a source cookie.','line_number':1826,'multiline':False]['text':'/ Special function to open a file without handle inheritance.','line_number':1833,'multiline':False]['text':'/ If possible the handle is closed on exec().','line_number':1834,'multiline':False]['text':'/ Concatenate Vimscript line if it starts with a line continuation into a growarray','line_number':1852,'multiline':False]['text':'/ (excluding the continuation chars and leading whitespace)','line_number':1853,'multiline':False]['text':'/','line_number':1854,'multiline':False]['text':'/ @note Growsize of the growarray may be changed to speed up concatenations!','line_number':1855,'multiline':False]['text':'/','line_number':1856,'multiline':False]['text':'/ @param ga  the growarray to append to','line_number':1857,'multiline':False]['text':'/ @param init_growsize  the starting growsize value of the growarray','line_number':1858,'multiline':False]['text':'/ @param p  pointer to the beginning of the line to consider','line_number':1859,'multiline':False]['text':'/ @param len  the length of this line','line_number':1860,'multiline':False]['text':'/','line_number':1861,'multiline':False]['text':'/ @return true if this line did begin with a continuation (the next line','line_number':1862,'multiline':False]['text':'/         should also be considered, if it exists); false otherwise','line_number':1863,'multiline':False]['text':' Skip lines starting with '\" ', concat lines starting with '\'','line_number':1870,'multiline':False]['text':'/ Get one full line from a sourced string (in-memory, no file).','line_number':1893,'multiline':False]['text':'/ Called by do_cmdline() when it's called from do_source_str().','line_number':1894,'multiline':False]['text':'/','line_number':1895,'multiline':False]['text':'/ @return pointer to allocated line, or NULL for end-of-file or','line_number':1896,'multiline':False]['text':'/         some error.','line_number':1897,'multiline':False]['text':'/ Create a new script item and allocate script-local vars. @see new_script_vars','line_number':1924,'multiline':False]['text':'/','line_number':1925,'multiline':False]['text':'/ @param  name  File name of the script. NULL for anonymous :source.','line_number':1926,'multiline':False]['text':'/ @param[out]  sid_out  SID of the new item.','line_number':1927,'multiline':False]['text':'/','line_number':1928,'multiline':False]['text':'/ @return  pointer to the created script item.','line_number':1929,'multiline':False]['text':' Allocate the local script variables to use for this script.','line_number':1944,'multiline':False]['text':' Copy the contents to be executed.','line_number':1994,'multiline':False]['text':' Adjust growsize to current length to speed up concatenating many lines.','line_number':1996,'multiline':False]['text':'/ Executes lines in `src` as Ex commands.','line_number':2017,'multiline':False]['text':'/','line_number':2018,'multiline':False]['text':'/ @see do_source()','line_number':2019,'multiline':False]['text':'/ When fname is a 'lua' file nlua_exec_file() is invoked to source it.','line_number':2029,'multiline':False]['text':'/ Otherwise reads the file `fname` and executes its lines as Ex commands.','line_number':2030,'multiline':False]['text':'/','line_number':2031,'multiline':False]['text':'/ This function may be called recursively!','line_number':2032,'multiline':False]['text':'/','line_number':2033,'multiline':False]['text':'/ @see do_source_str','line_number':2034,'multiline':False]['text':'/','line_number':2035,'multiline':False]['text':'/ @param fname','line_number':2036,'multiline':False]['text':'/ @param check_other  check for .vimrc and _vimrc','line_number':2037,'multiline':False]['text':'/ @param is_vimrc     DOSO_ value','line_number':2038,'multiline':False]['text':'/ @param ret_sid      if not NULL and we loaded the script before, don't load it again','line_number':2039,'multiline':False]['text':'/','line_number':2040,'multiline':False]['text':'/ @return  FAIL if file could not be opened, OK otherwise','line_number':2041,'multiline':False]['text':'/','line_number':2042,'multiline':False]['text':'/ If a scriptitem_T was found or created "*ret_sid" is set to the SID.','line_number':2043,'multiline':False]['text':' See if we loaded this script before.','line_number':2068,'multiline':False]['text':' Already loaded and no need to load again, return here.','line_number':2071,'multiline':False]['text':' Apply SourceCmd autocommands, they should get the file and source it.','line_number':2077,'multiline':False]['text':' Apply SourcePost autocommands.','line_number':2083,'multiline':False]['text':' Apply SourcePre autocommands, they may get the file.','line_number':2089,'multiline':False]['text':' Try again, replacing file name ".nvimrc" by "_nvimrc" or vice versa,','line_number':2094,'multiline':False]['text':' and ".exrc" by "_exrc" or vice versa.','line_number':2095,'multiline':False]['text':' The file exists.','line_number':2118,'multiline':False]['text':' - In verbose mode, give a message.','line_number':2119,'multiline':False]['text':' - For a vimrc file, may want to call vimrc_found().','line_number':2120,'multiline':False]['text':' If no automatic file format: Set default to CR-NL.','line_number':2135,'multiline':False]['text':' Check if this script has a breakpoint.','line_number':2148,'multiline':False]['text':' start measuring script load time if --startuptime was passed and','line_number':2155,'multiline':False]['text':' time_fd was successfully opened afterwards.','line_number':2156,'multiline':False]['text':' entering a child now','line_number':2166,'multiline':False]['text':' Don't use local function variables, if called from a function.','line_number':2169,'multiline':False]['text':' Also starts profiling timer for nested script.','line_number':2170,'multiline':False]['text':' Always use a new sequence number.','line_number':2178,'multiline':False]['text':' loading the same script again','line_number':2182,'multiline':False]['text':' It's new, generate a new SID.','line_number':2185,'multiline':False]['text':' used for autocmd','line_number':2187,'multiline':False]['text':' Keep the sourcing name/lnum, for recursive calls.','line_number':2194,'multiline':False]['text':' Check if we do profiling for this script.','line_number':2200,'multiline':False]['text':' no conversion','line_number':2212,'multiline':False]['text':' Source the file as lua','line_number':2218,'multiline':False]['text':' Read the first line so we can check for a UTF-8 BOM.','line_number':2222,'multiline':False]['text':' Found BOM; setup conversion, skip over BOM and recode the line.','line_number':2226,'multiline':False]['text':' Call do_cmdline, which will call getsourceline() to get the lines.','line_number':2235,'multiline':False]['text':' Get "si" again, "script_items" may have been reallocated.','line_number':2242,'multiline':False]['text':' After a "finish" in debug mode, need to break at first command of next','line_number':2276,'multiline':False]['text':' sourced file.','line_number':2277,'multiline':False]['text':' leaving a child now','line_number':2286,'multiline':False]['text':'/ Find an already loaded script "name".','line_number':2302,'multiline':False]['text':'/ If found returns its script ID.  If not found returns -1.','line_number':2303,'multiline':False]['text':' We used to check inode here, but that doesn't work:','line_number':2308,'multiline':False]['text':' - If a script is edited and written, it may get a different','line_number':2309,'multiline':False]['text':'   inode number, even though to the user it is the same script.','line_number':2310,'multiline':False]['text':' - If a script is deleted and another script is written, with a','line_number':2311,'multiline':False]['text':'   different name, the inode may be re-used.','line_number':2312,'multiline':False]['text':'/ ":scriptnames"','line_number':2321,'multiline':False]['text':' :script {scriptId}: edit the script','line_number':2325,'multiline':False]['text':'/ Fix slashes in the list of script names for 'shellslash'.','line_number':2354,'multiline':False]['text':'/ Get a pointer to a script name.  Used for ":verbose set".','line_number':2366,'multiline':False]['text':'/ Message appended to "Last set from "','line_number':2367,'multiline':False]['text':' the variables themselves are cleared in evalvars_clear() ','line_number':2414,'multiline':True]['text':'/ Return a List of script-local functions defined in the script with id "sid".','line_number':2438,'multiline':False]['text':' Iterate through all the functions in the global function hash table','line_number':2444,'multiline':False]['text':' looking for functions with script ID "sid".','line_number':2445,'multiline':False]['text':' Add functions with script id == "sid"','line_number':2448,'multiline':False]['text':'/ "getscriptinfo()" function','line_number':2458,'multiline':False]['text':' Vim9 autoload script (:h vim9-autoload), not applicable to Nvim.','line_number':2517,'multiline':False]['text':' When a script ID is specified, return information about only the','line_number':2520,'multiline':False]['text':' specified script, and add the script-local variables and functions.','line_number':2521,'multiline':False]['text':'/ Get one full line from a sourced file.','line_number':2533,'multiline':False]['text':'/ Called by do_cmdline() when it's called from do_source().','line_number':2534,'multiline':False]['text':'/','line_number':2535,'multiline':False]['text':'/ @return pointer to the line in allocated memory, or NULL for end-of-file or','line_number':2536,'multiline':False]['text':'/         some error.','line_number':2537,'multiline':False]['text':' If breakpoints have been added/deleted need to check for it.','line_number':2543,'multiline':False]['text':' Set the current sourcing line number.','line_number':2551,'multiline':False]['text':' Get current line.  If there is a read-ahead line, use it, otherwise get','line_number':2553,'multiline':False]['text':' one now.','line_number':2554,'multiline':False]['text':' Only concatenate lines starting with a \ when 'cpoptions' doesn't','line_number':2568,'multiline':False]['text':' contain the 'C' flag.','line_number':2569,'multiline':False]['text':' compensate for the one line read-ahead','line_number':2572,'multiline':False]['text':' Get the next line and concatenate it when it starts with a','line_number':2575,'multiline':False]['text':' backslash. We always need to read the next line, keep it in','line_number':2576,'multiline':False]['text':' sp->nextline.','line_number':2577,'multiline':False]['text':' Also check for a comment in between continuation lines: "\ .','line_number':2578,'multiline':False]['text':' Convert the encoding of the script line.','line_number':2599,'multiline':False]['text':' Did we encounter a breakpoint?','line_number':2607,'multiline':False]['text':' Find next breakpoint.','line_number':2610,'multiline':False]['text':' CR-LF found','line_number':2625,'multiline':False]['text':' use a growarray to store the sourced line','line_number':2629,'multiline':False]['text':' Loop until there is a finished line (or end-of-file).','line_number':2632,'multiline':False]['text':' make room to read at least 120 (more) characters','line_number':2635,'multiline':False]['text':' Ignore a trailing CTRL-Z, when in Dos mode. Only recognize the','line_number':2651,'multiline':False]['text':' CTRL-Z by its own, or after a NL.','line_number':2652,'multiline':False]['text':' If the line was longer than the buffer, read more.','line_number':2664,'multiline':False]['text':' remove trailing NL','line_number':2669,'multiline':False]['text':' replace trailing CR','line_number':2681,'multiline':False]['text':' lines like ":map xx yy^M" will have failed','line_number':2685,'multiline':False]['text':' The '\n' is escaped if there is an odd number of ^V's just','line_number':2695,'multiline':False]['text':' before it, first set "c" just before the 'V's and then check','line_number':2696,'multiline':False]['text':' len&c parities (is faster than ((len-c)%2 == 0)) -- Acevedo','line_number':2697,'multiline':False]['text':' escaped NL, read more','line_number':2699,'multiline':False]['text':' remove the NL','line_number':2704,'multiline':False]['text':' Check for ^C here now and then, so recursive :so can be broken.','line_number':2707,'multiline':False]['text':'/ ":scriptencoding": Set encoding conversion for a sourced script.','line_number':2720,'multiline':False]['text':'/ Without the multi-byte feature it's simply ignored.','line_number':2721,'multiline':False]['text':' Setup for conversion from the specified encoding to 'encoding'.','line_number':2738,'multiline':False]['text':'/ ":finish": Mark a sourced file as finished.','line_number':2747,'multiline':False]['text':'/ Mark a sourced file as finished.  Possibly makes the ":finish" pending.','line_number':2757,'multiline':False]['text':'/ Also called for a pending finish at the ":endtry" or after returning from','line_number':2758,'multiline':False]['text':'/ an extra do_cmdline().  "reanimate" is used in the latter case.','line_number':2759,'multiline':False]['text':' Cleanup (and deactivate) conditionals, but stop when a try conditional','line_number':2767,'multiline':False]['text':' not in its finally clause (which then is to be executed next) is found.','line_number':2768,'multiline':False]['text':' In this case, make the ":finish" pending for execution at the ":endtry".','line_number':2769,'multiline':False]['text':' Otherwise, finish normally.','line_number':2770,'multiline':False]['text':'/ @return  true when a sourced file had the ":finish" command: Don't give error','line_number':2781,'multiline':False]['text':'/          message for missing ":endif".','line_number':2782,'multiline':False]['text':'/          false when not sourcing a file.','line_number':2783,'multiline':False]['text':'/ Return the autoload script name for a function or variable name','line_number':2790,'multiline':False]['text':'/ Caller must make sure that "name" contains AUTOLOAD_CHAR.','line_number':2791,'multiline':False]['text':'/','line_number':2792,'multiline':False]['text':'/ @param[in]  name  Variable/function name.','line_number':2793,'multiline':False]['text':'/ @param[in]  name_len  Name length.','line_number':2794,'multiline':False]['text':'/','line_number':2795,'multiline':False]['text':'/ @return [allocated] autoload script name.','line_number':2796,'multiline':False]['text':' Get the script file name: replace '#' with '/', append ".vim".','line_number':2800,'multiline':False]['text':'/ If name has a package name try autoloading the script for it','line_number':2818,'multiline':False]['text':'/','line_number':2819,'multiline':False]['text':'/ @param[in]  name  Variable/function name.','line_number':2820,'multiline':False]['text':'/ @param[in]  name_len  Name length.','line_number':2821,'multiline':False]['text':'/ @param[in]  reload  If true, load script again when already loaded.','line_number':2822,'multiline':False]['text':'/','line_number':2823,'multiline':False]['text':'/ @return true if a package was loaded.','line_number':2824,'multiline':False]['text':' If there is no '#' after name[0] there is no package name.','line_number':2827,'multiline':False]['text':' Find the name in the list of previously loaded package names.  Skip','line_number':2837,'multiline':False]['text':' "autoload/", it's always the same.','line_number':2838,'multiline':False]['text':' Was loaded already.','line_number':2846,'multiline':False]['text':' Remember the name if it wasn't loaded already.','line_number':2848,'multiline':False]['text':' Try loading the package from $VIMRUNTIME/autoload/<name>.vim','line_number':2854,'multiline':False]['text':' Use "ret_sid" to avoid loading the same script again.','line_number':2855,'multiline':False]