['text':'/ mbyte.c: Code specifically for handling multi-byte characters.','line_number':1,'multiline':False]['text':'/ Multibyte extensions partly by Sung-Hoon Baek','line_number':2,'multiline':False]['text':'/','line_number':3,'multiline':False]['text':'/ Strings internal to Nvim are always encoded as UTF-8 (thus the legacy','line_number':4,'multiline':False]['text':'/ 'encoding' option is always "utf-8").','line_number':5,'multiline':False]['text':'/','line_number':6,'multiline':False]['text':'/ The cell width on the display needs to be determined from the character','line_number':7,'multiline':False]['text':'/ value. Recognizing UTF-8 bytes is easy: 0xxx.xxxx is a single-byte char,','line_number':8,'multiline':False]['text':'/ 10xx.xxxx is a trailing byte, 11xx.xxxx is a leading byte of a multi-byte','line_number':9,'multiline':False]['text':'/ character. To make things complicated, up to six composing characters','line_number':10,'multiline':False]['text':'/ are allowed. These are drawn on top of the first char. For most editing','line_number':11,'multiline':False]['text':'/ the sequence of bytes with composing characters included is considered to','line_number':12,'multiline':False]['text':'/ be one character.','line_number':13,'multiline':False]['text':'/','line_number':14,'multiline':False]['text':'/ UTF-8 is used everywhere in the core. This is in registers, text','line_number':15,'multiline':False]['text':'/ manipulation, buffers, etc. Nvim core communicates with external plugins','line_number':16,'multiline':False]['text':'/ and GUIs in this encoding.','line_number':17,'multiline':False]['text':'/','line_number':18,'multiline':False]['text':'/ The encoding of a file is specified with 'fileencoding'.  Conversion','line_number':19,'multiline':False]['text':'/ is to be done when it's different from "utf-8".','line_number':20,'multiline':False]['text':'/','line_number':21,'multiline':False]['text':'/ Vim scripts may contain an ":scriptencoding" command. This has an effect','line_number':22,'multiline':False]['text':'/ for some commands, like ":menutrans".','line_number':23,'multiline':False]['text':' uncrustify:off','line_number':81,'multiline':False]['text':' uncrustify:on','line_number':86,'multiline':False]['text':' To speed up BYTELEN(); keep a lookup table to quickly get the length in','line_number':101,'multiline':False]['text':' bytes of a UTF-8 character from the first byte of a UTF-8 string.  Bytes','line_number':102,'multiline':False]['text':' which are illegal when used as the first byte have a 1.  The NUL byte has','line_number':103,'multiline':False]['text':' length 1.','line_number':104,'multiline':False]['text':' ?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 ?A ?B ?C ?D ?E ?F','line_number':106,'multiline':False]['text':' 0?','line_number':107,'multiline':False]['text':' 1?','line_number':108,'multiline':False]['text':' 2?','line_number':109,'multiline':False]['text':' 3?','line_number':110,'multiline':False]['text':' 4?','line_number':111,'multiline':False]['text':' 5?','line_number':112,'multiline':False]['text':' 6?','line_number':113,'multiline':False]['text':' 7?','line_number':114,'multiline':False]['text':' 8?','line_number':115,'multiline':False]['text':' 9?','line_number':116,'multiline':False]['text':' A?','line_number':117,'multiline':False]['text':' B?','line_number':118,'multiline':False]['text':' C?','line_number':119,'multiline':False]['text':' D?','line_number':120,'multiline':False]['text':' E?','line_number':121,'multiline':False]['text':' F?','line_number':122,'multiline':False]['text':' Like utf8len_tab above, but using a zero for illegal lead bytes.','line_number':125,'multiline':False]['text':' ?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 ?A ?B ?C ?D ?E ?F','line_number':127,'multiline':False]['text':' 0?','line_number':128,'multiline':False]['text':' 1?','line_number':129,'multiline':False]['text':' 2?','line_number':130,'multiline':False]['text':' 3?','line_number':131,'multiline':False]['text':' 4?','line_number':132,'multiline':False]['text':' 5?','line_number':133,'multiline':False]['text':' 6?','line_number':134,'multiline':False]['text':' 7?','line_number':135,'multiline':False]['text':' 8?','line_number':136,'multiline':False]['text':' 9?','line_number':137,'multiline':False]['text':' A?','line_number':138,'multiline':False]['text':' B?','line_number':139,'multiline':False]['text':' C?','line_number':140,'multiline':False]['text':' D?','line_number':141,'multiline':False]['text':' E?','line_number':142,'multiline':False]['text':' F?','line_number':143,'multiline':False]['text':' Canonical encoding names and their properties.','line_number':146,'multiline':False]['text':' "iso-8859-n" is handled by enc_canonize() directly.','line_number':147,'multiline':False]['text':' For debugging DBCS encoding on Unix.','line_number':198,'multiline':False]['text':' MS-DOS and MS-Windows codepages are included here, so that they can be','line_number':214,'multiline':False]['text':' used on Unix too.  Most of them are similar to ISO-8859 encodings, but','line_number':215,'multiline':False]['text':' not exactly the same.','line_number':216,'multiline':False]['text':' like iso-8859-1','line_number':218,'multiline':False]['text':' like iso-8859-7','line_number':220,'multiline':False]['text':' Baltic','line_number':222,'multiline':False]['text':' like iso-8859-4','line_number':224,'multiline':False]['text':' like iso-8859-1','line_number':226,'multiline':False]['text':' like iso-8859-2','line_number':228,'multiline':False]['text':' like iso-8859-5','line_number':230,'multiline':False]['text':' like iso-8859-9','line_number':232,'multiline':False]['text':' like iso-8859-1','line_number':234,'multiline':False]['text':' like iso-8859-1','line_number':236,'multiline':False]['text':' like iso-8859-8','line_number':238,'multiline':False]['text':' like iso-8859-1','line_number':240,'multiline':False]['text':' like iso-8859-5','line_number':242,'multiline':False]['text':' like iso-8859-7','line_number':244,'multiline':False]['text':' Thai','line_number':246,'multiline':False]['text':' Czech, Polish, etc.','line_number':256,'multiline':False]['text':' Cyrillic','line_number':258,'multiline':False]['text':' cp1252 is considered to be equal to latin1','line_number':259,'multiline':False]['text':' Greek','line_number':261,'multiline':False]['text':' Turkish','line_number':263,'multiline':False]['text':' Hebrew','line_number':265,'multiline':False]['text':' Arabic','line_number':267,'multiline':False]['text':' Baltic','line_number':269,'multiline':False]['text':' Vietnamese','line_number':271,'multiline':False]['text':' Mac OS','line_number':274,'multiline':False]['text':' HP Roman8','line_number':276,'multiline':False]['text':' Aliases for encoding names.','line_number':280,'multiline':False]['text':' ?','line_number':294,'multiline':False]['text':' ?','line_number':296,'multiline':False]['text':' ?','line_number':297,'multiline':False]['text':' Sun: PCK','line_number':330,'multiline':False]['text':' Sun: KS C 5601','line_number':332,'multiline':False]['text':'/ Find encoding "name" in the list of canonical encoding names.','line_number':350,'multiline':False]['text':'/ Returns -1 if not found.','line_number':351,'multiline':False]['text':' Find canonical encoding "name" in the list and return its properties.','line_number':363,'multiline':False]['text':' Returns 0 if not found.','line_number':364,'multiline':False]['text':' Return the size of the BOM for the current buffer:','line_number':379,'multiline':False]['text':' 0 - no BOM','line_number':380,'multiline':False]['text':' 2 - UCS-2 or UTF-16 BOM','line_number':381,'multiline':False]['text':' 4 - UCS-4 BOM','line_number':382,'multiline':False]['text':' 3 - UTF-8 BOM','line_number':383,'multiline':False]['text':' Remove all BOM from "s" by moving remaining text.','line_number':403,'multiline':False]['text':' Get class of pointer:','line_number':417,'multiline':False]['text':' 0 for blank or NUL','line_number':418,'multiline':False]['text':' 1 for punctuation','line_number':419,'multiline':False]['text':' 2 for an (ASCII) word character','line_number':420,'multiline':False]['text':' >2 for other word characters','line_number':421,'multiline':False]['text':' Return true if "c" is in "table".','line_number':443,'multiline':False]['text':' first quick check for Latin1 etc. characters','line_number':447,'multiline':False]['text':' binary search in table','line_number':452,'multiline':False]['text':'/ For UTF-8 character "c" return 2 for a double-width character, 1 for others.','line_number':468,'multiline':False]['text':'/ Returns 4 or 6 for an unprintable character.','line_number':469,'multiline':False]['text':'/ Is only correct for characters >= 0x80.','line_number':470,'multiline':False]['text':'/ When p_ambw is "double", return 2 for a character with East Asian Width','line_number':471,'multiline':False]['text':'/ class 'A'(mbiguous).','line_number':472,'multiline':False]['text':'/','line_number':473,'multiline':False]['text':'/ @note Tables `doublewidth` and `ambiguous` are generated by','line_number':474,'multiline':False]['text':'/       gen_unicode_tables.lua, which must be manually invoked as needed.','line_number':475,'multiline':False]['text':' Use the value from setcellwidths() at 0x80 and higher, unless the','line_number':478,'multiline':False]['text':' character is not printable.','line_number':479,'multiline':False]['text':' unprintable, displays <xxxx>','line_number':489,'multiline':False]['text':' Characters below 0x100 are influenced by 'isprint' option.','line_number':498,'multiline':False]['text':' unprintable, displays <xx>','line_number':499,'multiline':False]['text':'/ Return the number of display cells character at "*p" occupies.','line_number':510,'multiline':False]['text':'/ This doesn't take care of unprintable characters, use ptr2cells() for that.','line_number':511,'multiline':False]['text':' Need to convert to a character number.','line_number':514,'multiline':False]['text':' An illegal byte is displayed as <xx>.','line_number':517,'multiline':False]['text':' If the char is ASCII it must be an overlong sequence.','line_number':521,'multiline':False]['text':'/ Like utf_ptr2cells(), but limit string length to "size".','line_number':530,'multiline':False]['text':'/ For an empty string or truncated character returns 1.','line_number':531,'multiline':False]['text':' Need to convert to a wide character.','line_number':534,'multiline':False]['text':' truncated','line_number':537,'multiline':False]['text':' An illegal byte is displayed as <xx>.','line_number':540,'multiline':False]['text':' If the char is ASCII it must be an overlong sequence.','line_number':544,'multiline':False]['text':'/ Calculate the number of cells occupied by string `str`.','line_number':553,'multiline':False]['text':'/','line_number':554,'multiline':False]['text':'/ @param str The source string, may not be NULL, must be a NUL-terminated','line_number':555,'multiline':False]['text':'/            string.','line_number':556,'multiline':False]['text':'/ @return The number of cells occupied by string `str`','line_number':557,'multiline':False]['text':'/ Get the number of cells occupied by string `str` with maximum length `size`','line_number':569,'multiline':False]['text':'/','line_number':570,'multiline':False]['text':'/ @param str The source string, may not be NULL, must be a NUL-terminated','line_number':571,'multiline':False]['text':'/            string.','line_number':572,'multiline':False]['text':'/ @param size maximum length of string. It will terminate on earlier NUL.','line_number':573,'multiline':False]['text':'/ @return The number of cells occupied by string `str`','line_number':574,'multiline':False]['text':'/ Convert a UTF-8 byte sequence to a character number.','line_number':588,'multiline':False]['text':'/','line_number':589,'multiline':False]['text':'/ If the sequence is illegal or truncated by a NUL then the first byte is','line_number':590,'multiline':False]['text':'/ returned.','line_number':591,'multiline':False]['text':'/ For an overlong sequence this may return zero.','line_number':592,'multiline':False]['text':'/ Does not include composing characters for obvious reasons.','line_number':593,'multiline':False]['text':'/','line_number':594,'multiline':False]['text':'/ @param[in]  p_in  String to convert.','line_number':595,'multiline':False]['text':'/','line_number':596,'multiline':False]['text':'/ @return Unicode codepoint or byte value.','line_number':597,'multiline':False]['text':' Be quick for ASCII.','line_number':602,'multiline':False]['text':' Illegal value: just return the first byte.','line_number':636,'multiline':False]['text':' Convert a UTF-8 byte sequence to a wide character.','line_number':640,'multiline':False]['text':' String is assumed to be terminated by NUL or after "n" bytes, whichever','line_number':641,'multiline':False]['text':' comes first.','line_number':642,'multiline':False]['text':' The function is safe in the sense that it never accesses memory beyond the','line_number':643,'multiline':False]['text':' first "n" bytes of "s".','line_number':644,'multiline':False]['text':'','line_number':645,'multiline':False]['text':' On success, returns decoded codepoint, advances "s" to the beginning of','line_number':646,'multiline':False]['text':' next character and decreases "n" accordingly.','line_number':647,'multiline':False]['text':'','line_number':648,'multiline':False]['text':' If end of string was reached, returns 0 and, if "n" > 0, advances "s" past','line_number':649,'multiline':False]['text':' NUL byte.','line_number':650,'multiline':False]['text':'','line_number':651,'multiline':False]['text':' If byte sequence is illegal or incomplete, returns -1 and does not advance','line_number':652,'multiline':False]['text':' "s".','line_number':653,'multiline':False]['text':' end of buffer','line_number':656,'multiline':False]['text':' ASCII character or NUL','line_number':663,'multiline':False]['text':' We have a multibyte sequence and it isn't truncated by buffer','line_number':669,'multiline':False]['text':' limits so utf_ptr2char() is safe to use. Or the first byte is','line_number':670,'multiline':False]['text':' illegal (k=0), and it's also safe to use utf_ptr2char().','line_number':671,'multiline':False]['text':' On failure, utf_ptr2char() returns the first byte, so here we','line_number':674,'multiline':False]['text':' check equality with the first byte. The only non-ASCII character','line_number':675,'multiline':False]['text':' which equals the first byte of its own UTF-8 representation is','line_number':676,'multiline':False]['text':' U+00C3 (UTF-8: 0xC3 0x83), so need to check that special case too.','line_number':677,'multiline':False]['text':' It's safe even if n=1, else we would have k=2 > n.','line_number':678,'multiline':False]['text':' byte sequence was successfully decoded','line_number':680,'multiline':False]['text':' byte sequence is incomplete or illegal','line_number':687,'multiline':False]['text':' Get character at **pp and advance *pp to the next character.','line_number':691,'multiline':False]['text':' Note: composing characters are skipped!','line_number':692,'multiline':False]['text':' Get character at **pp and advance *pp to the next character.','line_number':700,'multiline':False]['text':' Note: composing characters are returned as separate characters.','line_number':701,'multiline':False]['text':'/ Check if the character pointed to by "p2" is a composing character when it','line_number':709,'multiline':False]['text':'/ comes after "p1".  For Arabic sometimes "ab" is replaced with "c", which','line_number':710,'multiline':False]['text':'/ behaves like a composing character.','line_number':711,'multiline':False]['text':'/ Get the screen char at the beginning of a string','line_number':724,'multiline':False]['text':'/','line_number':725,'multiline':False]['text':'/ Caller is expected to check for things like unprintable chars etc','line_number':726,'multiline':False]['text':'/ If first char in string is a composing char, prepend a space to display it correctly.','line_number':727,'multiline':False]['text':'/','line_number':728,'multiline':False]['text':'/ If "p" starts with an invalid sequence, zero is returned.','line_number':729,'multiline':False]['text':'/','line_number':730,'multiline':False]['text':'/ @param[out] firstc (required) The first codepoint of the screen char,','line_number':731,'multiline':False]['text':'/                    or the first byte of an invalid sequence','line_number':732,'multiline':False]['text':'/','line_number':733,'multiline':False]['text':'/ @return the char','line_number':734,'multiline':False]['text':' NOT optional, you are gonna need it','line_number':739,'multiline':False]['text':' invalid sequence','line_number':745,'multiline':False]['text':'/ Get the screen char at the beginning of a string with length','line_number':751,'multiline':False]['text':'/','line_number':752,'multiline':False]['text':'/ Like utfc_ptr2schar but use no more than p[maxlen].','line_number':753,'multiline':False]['text':' invalid or truncated sequence','line_number':761,'multiline':False]['text':'/ Caller must ensure there is space for `first_compose`','line_number':775,'multiline':False]['text':'/ Get the length of a UTF-8 byte sequence representing a single codepoint','line_number':788,'multiline':False]['text':'/','line_number':789,'multiline':False]['text':'/ @param[in]  p  UTF-8 string.','line_number':790,'multiline':False]['text':'/','line_number':791,'multiline':False]['text':'/ @return Sequence length, 0 for empty string and 1 for non-UTF-8 byte','line_number':792,'multiline':False]['text':'/         sequence.','line_number':793,'multiline':False]['text':' Return length of UTF-8 character, obtained from the first byte.','line_number':810,'multiline':False]['text':' "b" must be between 0 and 255!','line_number':811,'multiline':False]['text':' Returns 1 for an invalid first byte value.','line_number':812,'multiline':False]['text':' Get the length of UTF-8 byte sequence "p[size]".  Does not include any','line_number':818,'multiline':False]['text':' following composing characters.','line_number':819,'multiline':False]['text':' Returns 1 for "".','line_number':820,'multiline':False]['text':' Returns 1 for an illegal byte sequence (also in incomplete byte seq.).','line_number':821,'multiline':False]['text':' Returns number > "size" for an incomplete byte sequence.','line_number':822,'multiline':False]['text':' Never returns zero.','line_number':823,'multiline':False]['text':' NUL, ascii or illegal lead byte','line_number':830,'multiline':False]['text':' incomplete byte sequence.','line_number':833,'multiline':False]['text':'/ Return the number of bytes occupied by a UTF-8 character in a string.','line_number':845,'multiline':False]['text':'/ This includes following composing characters.','line_number':846,'multiline':False]['text':'/ Returns zero for NUL.','line_number':847,'multiline':False]['text':' be quick for ASCII','line_number':856,'multiline':False]['text':' Skip over first UTF-8 char, stopping at a NUL byte.','line_number':860,'multiline':False]['text':' Check for illegal byte.','line_number':863,'multiline':False]['text':' Check for composing characters.','line_number':868,'multiline':False]['text':' Skip over composing char.','line_number':875,'multiline':False]['text':'/ Return the number of bytes the UTF-8 encoding of the character at "p[size]"','line_number':881,'multiline':False]['text':'/ takes.  This includes following composing characters.','line_number':882,'multiline':False]['text':'/ Returns 0 for an empty string.','line_number':883,'multiline':False]['text':'/ Returns 1 for an illegal char or an incomplete byte sequence.','line_number':884,'multiline':False]['text':' be quick for ASCII','line_number':890,'multiline':False]['text':' Skip over first UTF-8 char, stopping at a NUL byte.','line_number':894,'multiline':False]['text':' Check for illegal byte and incomplete byte sequence.','line_number':897,'multiline':False]['text':' Check for composing characters.  We can handle only the first six, but','line_number':902,'multiline':False]['text':' skip all of them (otherwise the cursor would get stuck).','line_number':903,'multiline':False]['text':' Next character length should not go beyond size to ensure that','line_number':910,'multiline':False]['text':' utf_composinglike(...) does not read beyond size.','line_number':911,'multiline':False]['text':' Skip over composing char','line_number':921,'multiline':False]['text':'/ Determine how many bytes certain unicode codepoint will occupy','line_number':928,'multiline':False]['text':'/ Convert Unicode character to UTF-8 string','line_number':946,'multiline':False]['text':'/','line_number':947,'multiline':False]['text':'/ @param c         character to convert to UTF-8 string in \p buf','line_number':948,'multiline':False]['text':'/ @param[out] buf  UTF-8 string generated from \p c, does not add \0','line_number':949,'multiline':False]['text':'/                  must have room for at least 6 bytes','line_number':950,'multiline':False]['text':'/ @return Number of bytes (1-6).','line_number':951,'multiline':False]['text':' 7 bits','line_number':954,'multiline':False]['text':' 11 bits','line_number':957,'multiline':False]['text':' 16 bits','line_number':961,'multiline':False]['text':' 21 bits','line_number':966,'multiline':False]['text':' 26 bits','line_number':972,'multiline':False]['text':' 31 bits','line_number':979,'multiline':False]['text':' Return true if "c" is a composing UTF-8 character.  This means it will be','line_number':990,'multiline':False]['text':' drawn on top of the preceding character.','line_number':991,'multiline':False]['text':' Based on code from Markus Kuhn.','line_number':992,'multiline':False]['text':' Return true for characters that can be displayed in a normal way.','line_number':998,'multiline':False]['text':' Only for characters of 0x100 and above!','line_number':999,'multiline':False]['text':' Sorted list of non-overlapping intervals.','line_number':1002,'multiline':False]['text':' 0xd800-0xdfff is reserved for UTF-16, actually illegal.','line_number':1003,'multiline':False]['text':' Get class of a Unicode character.','line_number':1013,'multiline':False]['text':' 0: white space','line_number':1014,'multiline':False]['text':' 1: punctuation','line_number':1015,'multiline':False]['text':' 2 or bigger: some class of word character.','line_number':1016,'multiline':False]['text':' sorted list of non-overlapping intervals','line_number':1025,'multiline':False]['text':' Greek question mark','line_number':1031,'multiline':False]['text':' Greek ano teleia','line_number':1032,'multiline':False]['text':' Armenian punctuation','line_number':1033,'multiline':False]['text':' Armenian full stop','line_number':1034,'multiline':False]['text':' Syriac punctuation','line_number':1044,'multiline':False]['text':' Myanmar punctuation','line_number':1053,'multiline':False]['text':' Georgian punctuation','line_number':1054,'multiline':False]['text':' Ethiopic punctuation','line_number':1055,'multiline':False]['text':' Canadian Syl. punctuation','line_number':1056,'multiline':False]['text':' Khmer punctuation','line_number':1061,'multiline':False]['text':' Mongolian punctuation','line_number':1062,'multiline':False]['text':' spaces','line_number':1063,'multiline':False]['text':' punctuation and symbols','line_number':1064,'multiline':False]['text':' punctuation and symbols','line_number':1066,'multiline':False]['text':' punctuation and symbols','line_number':1068,'multiline':False]['text':' punctuation and symbols','line_number':1070,'multiline':False]['text':' superscript','line_number':1071,'multiline':False]['text':' subscript','line_number':1072,'multiline':False]['text':' all kinds of symbols','line_number':1073,'multiline':False]['text':' braille','line_number':1074,'multiline':False]['text':' arrows, brackets, etc.','line_number':1075,'multiline':False]['text':' supplemental punctuation','line_number':1078,'multiline':False]['text':' ideographic space','line_number':1079,'multiline':False]['text':' ideographic punctuation','line_number':1080,'multiline':False]['text':' Hiragana','line_number':1083,'multiline':False]['text':' Katakana','line_number':1084,'multiline':False]['text':' CJK Ideographs','line_number':1085,'multiline':False]['text':' Hangul Syllables','line_number':1086,'multiline':False]['text':' CJK Ideographs','line_number':1087,'multiline':False]['text':' punctuation forms','line_number':1089,'multiline':False]['text':' half/fullwidth ASCII','line_number':1090,'multiline':False]['text':' half/fullwidth ASCII','line_number':1091,'multiline':False]['text':' half/fullwidth ASCII','line_number':1092,'multiline':False]['text':' half/fullwidth ASCII','line_number':1093,'multiline':False]['text':' Musical notation','line_number':1094,'multiline':False]['text':' Mathematical Alphanumeric Symbols','line_number':1095,'multiline':False]['text':' Game pieces; enclosed characters','line_number':1096,'multiline':False]['text':' Many symbol blocks','line_number':1097,'multiline':False]['text':' CJK Ideographs','line_number':1098,'multiline':False]['text':' CJK Ideographs','line_number':1099,'multiline':False]['text':' CJK Ideographs','line_number':1100,'multiline':False]['text':' CJK Ideographs','line_number':1101,'multiline':False]['text':' First quick check for Latin1 characters, use 'iskeyword'.','line_number':1106,'multiline':False]['text':' blank','line_number':1109,'multiline':False]['text':' word character','line_number':1112,'multiline':False]['text':' punctuation','line_number':1114,'multiline':False]['text':' emoji','line_number':1117,'multiline':False]['text':' binary search in table','line_number':1122,'multiline':False]['text':' most other characters are "word" characters','line_number':1134,'multiline':False]['text':' Generic conversion function for case operations.','line_number':1144,'multiline':False]['text':' Return the converted equivalent of "a", which is a UCS-4 character.  Use','line_number':1145,'multiline':False]['text':' the given conversion "table".  Uses binary search on "table".','line_number':1146,'multiline':False]['text':' indices into table','line_number':1149,'multiline':False]['text':' need to search further','line_number':1153,'multiline':False]['text':' Return the folded-case equivalent of "a", which is a UCS-4 character.  Uses','line_number':1170,'multiline':False]['text':' simple case folding.','line_number':1171,'multiline':False]['text':' be fast for ASCII','line_number':1175,'multiline':False]['text':' Vim's own character class functions.  These exist because many library','line_number':1181,'multiline':False]['text':' islower()/toupper() etc. do not work properly: they crash when used with','line_number':1182,'multiline':False]['text':' invalid values or can't handle latin1 when the locale is C.','line_number':1183,'multiline':False]['text':' Speed is most important here.','line_number':1184,'multiline':False]['text':'/ Return the upper-case equivalent of "a", which is a UCS-4 character.  Use','line_number':1186,'multiline':False]['text':'/ simple case folding.','line_number':1187,'multiline':False]['text':' If 'casemap' contains "keepascii" use ASCII style toupper().','line_number':1190,'multiline':False]['text':' For characters below 128 use locale sensitive toupper().','line_number':1199,'multiline':False]['text':' For any other characters use the above mapping table.','line_number':1204,'multiline':False]['text':' German sharp s is lower case but has no upper case equivalent.','line_number':1210,'multiline':False]['text':'/ Return the lower-case equivalent of "a", which is a UCS-4 character.  Use','line_number':1214,'multiline':False]['text':'/ simple case folding.','line_number':1215,'multiline':False]['text':' If 'casemap' contains "keepascii" use ASCII style tolower().','line_number':1218,'multiline':False]['text':' For characters below 128 use locale sensitive tolower().','line_number':1227,'multiline':False]['text':' For any other characters use the above mapping table.','line_number':1232,'multiline':False]['text':' some string ended or has an incomplete/illegal character sequence','line_number':1270,'multiline':False]['text':' some string ended. shorter string is smaller','line_number':1273,'multiline':False]['text':' Continue with bytewise comparison to produce some result that','line_number':1280,'multiline':False]['text':' would make comparison operations involving this function transitive.','line_number':1281,'multiline':False]['text':'','line_number':1282,'multiline':False]['text':' If only one string had an error, comparison should be made with','line_number':1283,'multiline':False]['text':' folded version of the other string. In this case it is enough','line_number':1284,'multiline':False]['text':' to fold just one character to determine the result of comparison.','line_number':1285,'multiline':False]['text':' magic number from winnls.h','line_number':1322,'multiline':False]['text':'/ Converts string from UTF-8 to UTF-16.','line_number':1325,'multiline':False]['text':'/','line_number':1326,'multiline':False]['text':'/ @param utf8  UTF-8 string.','line_number':1327,'multiline':False]['text':'/ @param utf8len  Length of `utf8`. May be -1 if `utf8` is NUL-terminated.','line_number':1328,'multiline':False]['text':'/ @param utf16[out,allocated]  NUL-terminated UTF-16 string, or NULL on error','line_number':1329,'multiline':False]['text':'/ @return 0 on success, or libuv error code','line_number':1330,'multiline':False]['text':' Compute the length needed for the converted UTF-16 string.','line_number':1334,'multiline':False]['text':' dwFlags: must be 0 for UTF-8','line_number':1336,'multiline':False]['text':' -1: process up to NUL','line_number':1337,'multiline':False]['text':' 0: get length, don't convert','line_number':1340,'multiline':False]['text':' Allocate the destination buffer adding an extra byte for the terminating','line_number':1346,'multiline':False]['text':' NULL. If `utf8len` is not -1 MultiByteToWideChar will not add it, so','line_number':1347,'multiline':False]['text':' we do it ourselves always, just in case.','line_number':1348,'multiline':False]['text':' Convert to UTF-16.','line_number':1351,'multiline':False]['text':'/ Converts string from UTF-16 to UTF-8.','line_number':1362,'multiline':False]['text':'/','line_number':1363,'multiline':False]['text':'/ @param utf16  UTF-16 string.','line_number':1364,'multiline':False]['text':'/ @param utf16len  Length of `utf16`. May be -1 if `utf16` is NUL-terminated.','line_number':1365,'multiline':False]['text':'/ @param utf8[out,allocated]  NUL-terminated UTF-8 string, or NULL on error','line_number':1366,'multiline':False]['text':'/ @return 0 on success, or libuv error code','line_number':1367,'multiline':False]['text':' Compute the space needed for the converted UTF-8 string.','line_number':1371,'multiline':False]['text':' Allocate the destination buffer adding an extra byte for the terminating','line_number':1385,'multiline':False]['text':' NULL. If `utf16len` is not -1 WideCharToMultiByte will not add it, so','line_number':1386,'multiline':False]['text':' we do it ourselves always, just in case.','line_number':1387,'multiline':False]['text':' Convert to UTF-8.','line_number':1390,'multiline':False]['text':'/ Measure the length of a string in corresponding UTF-32 and UTF-16 units.','line_number':1410,'multiline':False]['text':'/','line_number':1411,'multiline':False]['text':'/ Invalid UTF-8 bytes, or embedded surrogates, count as one code point/unit','line_number':1412,'multiline':False]['text':'/ each.','line_number':1413,'multiline':False]['text':'/','line_number':1414,'multiline':False]['text':'/ The out parameters are incremented. This is used to measure the size of','line_number':1415,'multiline':False]['text':'/ a buffer region consisting of multiple line segments.','line_number':1416,'multiline':False]['text':'/','line_number':1417,'multiline':False]['text':'/ @param s the string','line_number':1418,'multiline':False]['text':'/ @param len maximum length (an earlier NUL terminates)','line_number':1419,'multiline':False]['text':'/ @param[out] codepoints incremented with UTF-32 code point size','line_number':1420,'multiline':False]['text':'/ @param[out] codeunits incremented with UTF-16 code unit size','line_number':1421,'multiline':False]['text':' NB: gets the byte value of invalid sequence bytes.','line_number':1429,'multiline':False]['text':' we only care whether the char fits in the BMP or not','line_number':1430,'multiline':False]['text':' NB: gets the byte value of invalid sequence bytes.','line_number':1451,'multiline':False]['text':' we only care whether the char fits in the BMP or not','line_number':1452,'multiline':False]['text':'/ Version of strnicmp() that handles multi-byte characters.','line_number':1465,'multiline':False]['text':'/ Needed for Big5, Shift-JIS and UTF-8 encoding.  Other DBCS encodings can','line_number':1466,'multiline':False]['text':'/ probably use strnicmp(), because there are no ASCII characters in the','line_number':1467,'multiline':False]['text':'/ second byte.','line_number':1468,'multiline':False]['text':'/','line_number':1469,'multiline':False]['text':'/ @return  zero if s1 and s2 are equal (ignoring case), the difference between','line_number':1470,'multiline':False]['text':'/          two characters otherwise.','line_number':1471,'multiline':False]['text':'/ Compare strings case-insensitively','line_number':1477,'multiline':False]['text':'/','line_number':1478,'multiline':False]['text':'/ @note We need to call mb_stricmp() even when we aren't dealing with','line_number':1479,'multiline':False]['text':'/       a multi-byte encoding because mb_stricmp() takes care of all ASCII and','line_number':1480,'multiline':False]['text':'/       non-ascii encodings, including characters with umlauts in latin1,','line_number':1481,'multiline':False]['text':'/       etc., while STRICMP() only handles the system locale version, which','line_number':1482,'multiline':False]['text':'/       often does not handle non-ascii properly.','line_number':1483,'multiline':False]['text':'/','line_number':1484,'multiline':False]['text':'/ @param[in]  s1  First string to compare, not more then #MAXCOL characters.','line_number':1485,'multiline':False]['text':'/ @param[in]  s2  Second string to compare, not more then #MAXCOL characters.','line_number':1486,'multiline':False]['text':'/','line_number':1487,'multiline':False]['text':'/ @return 0 if strings are equal, <0 if s1 < s2, >0 if s1 > s2.','line_number':1488,'multiline':False]['text':' "g8": show bytes of the UTF-8 char under the cursor.  Doesn't matter what','line_number':1494,'multiline':False]['text':' 'encoding' has been set to.','line_number':1495,'multiline':False]['text':' Get the byte length of the char under the cursor, including composing','line_number':1498,'multiline':False]['text':' characters.','line_number':1499,'multiline':False]['text':' start of (composing) character, get its length','line_number':1511,'multiline':False]['text':' NUL is stored as NL','line_number':1520,'multiline':False]['text':'/ Return offset from "p" to the start of a character, including composing characters.','line_number':1531,'multiline':False]['text':'/ "base" must be the start of the string, which must be NUL terminated.','line_number':1532,'multiline':False]['text':'/ If "p" points to the NUL at the end of the string return 0.','line_number':1533,'multiline':False]['text':'/ Returns 0 when already at the first byte of a character.','line_number':1534,'multiline':False]['text':' be quick for ASCII','line_number':1537,'multiline':False]['text':' Skip backwards over trailing bytes: 10xx.xxxx','line_number':1544,'multiline':False]['text':' Skip backwards again if on a composing char.','line_number':1545,'multiline':False]['text':' Move s to the last byte of this char.','line_number':1548,'multiline':False]['text':' Move q to the first byte of this char.','line_number':1552,'multiline':False]['text':' Check for illegal sequence. Do allow an illegal byte after where we','line_number':1556,'multiline':False]['text':' started.','line_number':1557,'multiline':False]['text':' Advance to get a sneak-peak at the next char','line_number':1573,'multiline':False]['text':' Move j to the first byte of this char.','line_number':1576,'multiline':False]['text':' Whether space is NOT allowed before/after 'c'.','line_number':1590,'multiline':False]['text':' General punctuations','line_number':1594,'multiline':False]['text':' Supplemental punctuations','line_number':1595,'multiline':False]['text':' CJK symbols and punctuations','line_number':1596,'multiline':False]['text':' Full width ASCII punctuations','line_number':1597,'multiline':False]['text':' ..','line_number':1598,'multiline':False]['text':' ..','line_number':1599,'multiline':False]['text':' ..','line_number':1600,'multiline':False]['text':' Whether line break is allowed before "cc".','line_number':1603,'multiline':False]['text':' ’ right single quotation mark','line_number':1618,'multiline':False]['text':' ” right double quotation mark','line_number':1619,'multiline':False]['text':' † dagger','line_number':1620,'multiline':False]['text':' ‡ double dagger','line_number':1621,'multiline':False]['text':' … horizontal ellipsis','line_number':1622,'multiline':False]['text':' ‰ per mille sign','line_number':1623,'multiline':False]['text':' ‱ per the thousand sign','line_number':1624,'multiline':False]['text':' ‼ double exclamation mark','line_number':1625,'multiline':False]['text':' ⁇ double question mark','line_number':1626,'multiline':False]['text':' ⁈ question exclamation mark','line_number':1627,'multiline':False]['text':' ⁉ exclamation question mark','line_number':1628,'multiline':False]['text':' ℃ degree celsius','line_number':1629,'multiline':False]['text':' ℉ degree fahrenheit','line_number':1630,'multiline':False]['text':' 、 ideographic comma','line_number':1631,'multiline':False]['text':' 。 ideographic full stop','line_number':1632,'multiline':False]['text':' 〉 right angle bracket','line_number':1633,'multiline':False]['text':' 》 right double angle bracket','line_number':1634,'multiline':False]['text':' 」 right corner bracket','line_number':1635,'multiline':False]['text':' 』 right white corner bracket','line_number':1636,'multiline':False]['text':' 】 right black lenticular bracket','line_number':1637,'multiline':False]['text':' 〕 right tortoise shell bracket','line_number':1638,'multiline':False]['text':' 〗 right white lenticular bracket','line_number':1639,'multiline':False]['text':' 〙 right white tortoise shell bracket','line_number':1640,'multiline':False]['text':' 〛 right white square bracket','line_number':1641,'multiline':False]['text':' ！ fullwidth exclamation mark','line_number':1642,'multiline':False]['text':' ） fullwidth right parenthesis','line_number':1643,'multiline':False]['text':' ， fullwidth comma','line_number':1644,'multiline':False]['text':' ． fullwidth full stop','line_number':1645,'multiline':False]['text':' ： fullwidth colon','line_number':1646,'multiline':False]['text':' ； fullwidth semicolon','line_number':1647,'multiline':False]['text':' ？ fullwidth question mark','line_number':1648,'multiline':False]['text':' ］ fullwidth right square bracket','line_number':1649,'multiline':False]['text':' ｝ fullwidth right curly bracket','line_number':1650,'multiline':False]['text':' Whether line break is allowed after "cc".','line_number':1671,'multiline':False]['text':' 0x2014,  // — em dash','line_number':1681,'multiline':False]['text':' ‘ left single quotation mark','line_number':1682,'multiline':False]['text':' “ left double quotation mark','line_number':1683,'multiline':False]['text':' 0x2053,  // ～ swung dash','line_number':1684,'multiline':False]['text':' 〈 left angle bracket','line_number':1685,'multiline':False]['text':' 《 left double angle bracket','line_number':1686,'multiline':False]['text':' 「 left corner bracket','line_number':1687,'multiline':False]['text':' 『 left white corner bracket','line_number':1688,'multiline':False]['text':' 【 left black lenticular bracket','line_number':1689,'multiline':False]['text':' 〔 left tortoise shell bracket','line_number':1690,'multiline':False]['text':' 〖 left white lenticular bracket','line_number':1691,'multiline':False]['text':' 〘 left white tortoise shell bracket','line_number':1692,'multiline':False]['text':' 〚 left white square bracket','line_number':1693,'multiline':False]['text':' （ fullwidth left parenthesis','line_number':1694,'multiline':False]['text':' ［ fullwidth left square bracket','line_number':1695,'multiline':False]['text':' ｛ fullwidth left curly bracket','line_number':1696,'multiline':False]['text':' Whether line break is allowed between "cc" and "ncc".','line_number':1717,'multiline':False]['text':' don't break between two-letter punctuations','line_number':1721,'multiline':False]['text':' em dash','line_number':1723,'multiline':False]['text':' horizontal ellipsis','line_number':1724,'multiline':False]['text':'/ Copy a character, advancing the pointers','line_number':1730,'multiline':False]['text':'/','line_number':1731,'multiline':False]['text':'/ @param[in,out]  fp  Source of the character to copy.','line_number':1732,'multiline':False]['text':'/ @param[in,out]  tp  Destination to copy to.','line_number':1733,'multiline':False]['text':'/ Return the offset from "p_in" to the first byte of a character.  When "p_in" is','line_number':1743,'multiline':False]['text':'/ at the start of a character 0 is returned, otherwise the offset to the next','line_number':1744,'multiline':False]['text':'/ character.  Can start anywhere in a stream of bytes.','line_number':1745,'multiline':False]['text':' be quick for ASCII','line_number':1751,'multiline':False]['text':' Find the next character that isn't 10xx.xxxx','line_number':1755,'multiline':False]['text':' Check for illegal sequence.','line_number':1759,'multiline':False]['text':'/ Return the offset from `p_in` to the last byte of the codepoint it points','line_number':1772,'multiline':False]['text':'/ to.  Can start anywhere in a stream of bytes.','line_number':1773,'multiline':False]['text':'/ Note: Counts individual codepoints of composed characters separately.','line_number':1774,'multiline':False]['text':' Find the last character that is 10xx.xxxx','line_number':1785,'multiline':False]['text':' Check for illegal sequence.','line_number':1788,'multiline':False]['text':'/ Return the offset from "p" to the first byte of the codepoint it points','line_number':1801,'multiline':False]['text':'/ to. Can start anywhere in a stream of bytes.','line_number':1802,'multiline':False]['text':'/ Note: Unlike `utf_head_off`, this counts individual codepoints of composed characters','line_number':1803,'multiline':False]['text':'/ separately.','line_number':1804,'multiline':False]['text':'/','line_number':1805,'multiline':False]['text':'/ @param[in] base  Pointer to start of string','line_number':1806,'multiline':False]['text':'/ @param[in] p     Pointer to byte for which to return the offset to the previous codepoint','line_number':1807,'multiline':False]['text':'','line_number':1808,'multiline':False]['text':'/ @return 0 if invalid sequence, else number of bytes to previous codepoint','line_number':1809,'multiline':False]['text':' Find the first character that is not 10xx.xxxx','line_number':1818,'multiline':False]['text':' Find the last character that is 10xx.xxxx (condition terminates on NUL)','line_number':1825,'multiline':False]['text':' Check for illegal sequence.','line_number':1831,'multiline':False]['text':' Find the next illegal byte sequence.','line_number':1838,'multiline':False]['text':' 'encoding' is "utf-8" but we are editing a 8-bit encoded file,','line_number':1847,'multiline':False]['text':' possibly a utf-8 file with illegal bytes.  Setup for conversion','line_number':1848,'multiline':False]['text':' from utf-8 to 'fileencoding'.','line_number':1849,'multiline':False]['text':' Illegal means that there are not enough trail bytes (checked by','line_number':1866,'multiline':False]['text':' utf_ptr2len()) or too many of them (overlong sequence).','line_number':1867,'multiline':False]['text':' didn't find it: don't move and beep','line_number':1892,'multiline':False]['text':'/ @return  true if string "s" is a valid utf-8 string.','line_number':1901,'multiline':False]['text':'/ When "end" is NULL stop at the first NUL.  Otherwise stop at "end".','line_number':1902,'multiline':False]['text':' invalid lead byte','line_number':1910,'multiline':False]['text':' incomplete byte sequence','line_number':1913,'multiline':False]['text':' invalid trail byte','line_number':1918,'multiline':False]['text':' If the cursor moves on an trail byte, set the cursor on the lead byte.','line_number':1925,'multiline':False]['text':' Thus it moves left if necessary.','line_number':1926,'multiline':False]['text':'/ Checks and adjusts cursor column. Not mode-dependent.','line_number':1932,'multiline':False]['text':'/ @see check_cursor_col_win','line_number':1933,'multiline':False]['text':'/','line_number':1934,'multiline':False]['text':'/ @param  win_  Places cursor on a valid column for this window.','line_number':1935,'multiline':False]['text':' Column 0 is always valid.','line_number':1941,'multiline':False]['text':' Empty line or invalid column?','line_number':1946,'multiline':False]['text':' Cursor column too big for line?','line_number':1950,'multiline':False]['text':' Move the cursor to the head byte.','line_number':1954,'multiline':False]['text':' Reset `coladd` when the cursor would be on the right half of a','line_number':1958,'multiline':False]['text':' double-wide character.','line_number':1959,'multiline':False]['text':'/ @param line  start of the string','line_number':1968,'multiline':False]['text':'/','line_number':1969,'multiline':False]['text':'/ @return      a pointer to the character before "*p", if there is one.','line_number':1970,'multiline':False]['text':'/ Return the character length of "str".  Each multi-byte character (with','line_number':1979,'multiline':False]['text':'/ following composing characters) counts as one.','line_number':1980,'multiline':False]['text':'/ Like mb_charlen() but for a string with specified length.','line_number':2015,'multiline':False]['text':'/ Try to unescape a multibyte character','line_number':2028,'multiline':False]['text':'/','line_number':2029,'multiline':False]['text':'/ Used for the rhs and lhs of the mappings.','line_number':2030,'multiline':False]['text':'/','line_number':2031,'multiline':False]['text':'/ @param[in,out]  pp  String to unescape. Is advanced to just after the bytes','line_number':2032,'multiline':False]['text':'/                     that form a multibyte character.','line_number':2033,'multiline':False]['text':'/','line_number':2034,'multiline':False]['text':'/ @return Unescaped string if it is a multibyte character, NULL if no','line_number':2035,'multiline':False]['text':'/         multibyte character was found. Returns a static buffer, always one','line_number':2036,'multiline':False]['text':'/         and the same.','line_number':2037,'multiline':False]['text':' Must translate K_SPECIAL KS_SPECIAL KE_FILLER to K_SPECIAL.','line_number':2045,'multiline':False]['text':' Maximum length of a utf-8 character is 4 bytes.','line_number':2046,'multiline':False]['text':' A special key can't be a multibyte char.','line_number':2054,'multiline':False]['text':' Return a multi-byte character if it's found.  An illegal sequence','line_number':2060,'multiline':False]['text':' will result in a 1 here.','line_number':2061,'multiline':False]['text':' Bail out quickly for ASCII.','line_number':2067,'multiline':False]['text':'/ Skip the Vim specific head of a 'encoding' name.','line_number':2075,'multiline':False]['text':'/ Find the canonical name for encoding "enc".','line_number':2087,'multiline':False]['text':'/ When the name isn't recognized, returns "enc" itself, but with all lower','line_number':2088,'multiline':False]['text':'/ case characters and '_' replaced with '-'.','line_number':2089,'multiline':False]['text':'/','line_number':2090,'multiline':False]['text':'/ @return  an allocated string.','line_number':2091,'multiline':False]['text':' Use the default encoding as found by set_init_1().','line_number':2096,'multiline':False]['text':' copy "enc" to allocated memory, with room for two '-'','line_number':2100,'multiline':False]['text':' Make it all lower case and replace '_' with '-'.','line_number':2102,'multiline':False]['text':' Skip "2byte-" and "8bit-".','line_number':2113,'multiline':False]['text':' Change "microsoft-cp" to "cp".  Used in some spell files.','line_number':2116,'multiline':False]['text':' "iso8859" -> "iso-8859"','line_number':2121,'multiline':False]['text':' "iso-8859n" -> "iso-8859-n"','line_number':2127,'multiline':False]['text':' "latin-N" -> "latinN"','line_number':2133,'multiline':False]['text':' canonical name can be used unmodified','line_number':2140,'multiline':False]['text':' alias recognized, get canonical name','line_number':2145,'multiline':False]['text':'/ Search for an encoding alias of "name".','line_number':2152,'multiline':False]['text':'/ Returns -1 when not found.','line_number':2153,'multiline':False]['text':' Get the canonicalized encoding of the current locale.','line_number':2168,'multiline':False]['text':' Returns an allocated string when successful, NULL when not.','line_number':2169,'multiline':False]['text':' The most generic locale format is:','line_number':2193,'multiline':False]['text':' language[_territory][.codeset][@modifier][+special][,[sponsor][_revision]]','line_number':2194,'multiline':False]['text':' If there is a '.' remove the part before it.','line_number':2195,'multiline':False]['text':' if there is something after the codeset, remove it.','line_number':2196,'multiline':False]['text':' Make the name lowercase and replace '_' with '-'.','line_number':2197,'multiline':False]['text':' Exception: "ja_JP.EUC" == "euc-jp", "zh_CN.EUC" = "euc-cn",','line_number':2198,'multiline':False]['text':' "ko_KR.EUC" == "euc-kr"','line_number':2199,'multiline':False]['text':' Copy "XY.EUC" to "euc-XY" to buf[10].','line_number':2204,'multiline':False]['text':' Call iconv_open() with a check if iconv() works properly (there are broken','line_number':2230,'multiline':False]['text':' versions).','line_number':2231,'multiline':False]['text':' Returns (void *)-1 if failed.','line_number':2232,'multiline':False]['text':' (should return iconv_t, but that causes problems with prototypes).','line_number':2233,'multiline':False]['text':' detected a broken iconv() previously','line_number':2241,'multiline':False]['text':' Do a dummy iconv() call to check if it actually works.  There is a','line_number':2246,'multiline':False]['text':' version of iconv() on Linux that is broken.  We can't ignore it,','line_number':2247,'multiline':False]['text':' because it's wide-spread.  The symptoms are that after outputting','line_number':2248,'multiline':False]['text':' the initial shift state the "to" pointer is NULL and conversion','line_number':2249,'multiline':False]['text':' stops for no apparent reason after about 8160 characters.','line_number':2250,'multiline':False]['text':' Convert the string "str[slen]" with iconv().','line_number':2266,'multiline':False]['text':' If "unconvlenp" is not NULL handle the string ending in an incomplete','line_number':2267,'multiline':False]['text':' sequence and set "*unconvlenp" to the length of it.','line_number':2268,'multiline':False]['text':' Returns the converted string in allocated memory.  NULL for an error.','line_number':2269,'multiline':False]['text':' If resultlenp is not NULL, sets it to the result length in bytes.','line_number':2270,'multiline':False]['text':' Allocate enough room for most conversions.  When re-allocating','line_number':2283,'multiline':False]['text':' increase the buffer size.','line_number':2284,'multiline':False]['text':' Avoid a warning for systems with a wrong iconv() prototype by','line_number':2296,'multiline':False]['text':' casting the second argument to void *.','line_number':2297,'multiline':False]['text':' Finished, append a NUL.','line_number':2299,'multiline':False]['text':' Check both ICONV_EINVAL and EINVAL, because the dynamically loaded','line_number':2304,'multiline':False]['text':' iconv library may use one of them.','line_number':2305,'multiline':False]['text':' Handle an incomplete sequence at the end.','line_number':2308,'multiline':False]['text':' Check both ICONV_EILSEQ and EILSEQ, because the dynamically loaded','line_number':2315,'multiline':False]['text':' iconv library may use one of them.','line_number':2316,'multiline':False]['text':' Can't convert: insert a '?' and skip a character.  This assumes','line_number':2318,'multiline':False]['text':' conversion from 'encoding' to something else.  In other','line_number':2319,'multiline':False]['text':' situations we don't know what to skip anyway.','line_number':2320,'multiline':False]['text':' conversion failed','line_number':2329,'multiline':False]['text':' Not enough room or skipping illegal sequence.','line_number':2333,'multiline':False]['text':'/ iconv() function','line_number':2343,'multiline':False]['text':' If the encodings are equal, no conversion needed.','line_number':2359,'multiline':False]['text':'/ Setup "vcp" for conversion from "from" to "to".','line_number':2371,'multiline':False]['text':'/ The names must have been made canonical with enc_canonize().','line_number':2372,'multiline':False]['text':'/ vcp->vc_type must have been initialized to CONV_NONE.','line_number':2373,'multiline':False]['text':'/ Note: cannot be used for conversion from/to ucs-2 and ucs-4 (will use utf-8','line_number':2374,'multiline':False]['text':'/ instead).','line_number':2375,'multiline':False]['text':'/ Afterwards invoke with "from" and "to" equal to NULL to cleanup.','line_number':2376,'multiline':False]['text':'/','line_number':2377,'multiline':False]['text':'/ @return  FAIL when conversion is not supported, OK otherwise.','line_number':2378,'multiline':False]['text':'/ As convert_setup(), but only when from_unicode_is_utf8 is true will all','line_number':2384,'multiline':False]['text':'/ "from" unicode charsets be considered utf-8.  Same for "to".','line_number':2385,'multiline':False]['text':' Reset to no conversion.','line_number':2392,'multiline':False]['text':' No conversion when one of the names is empty or they are equal.','line_number':2398,'multiline':False]['text':' Internal latin1 -> utf-8 conversion.','line_number':2418,'multiline':False]['text':' up to twice as long','line_number':2420,'multiline':False]['text':' Internal latin9 -> utf-8 conversion.','line_number':2422,'multiline':False]['text':' up to three as long (euro sign)','line_number':2424,'multiline':False]['text':' Internal utf-8 -> latin1 conversion.','line_number':2426,'multiline':False]['text':' Internal utf-8 -> latin9 conversion.','line_number':2429,'multiline':False]['text':' Use iconv() for conversion.','line_number':2432,'multiline':False]['text':' could be longer too...','line_number':2437,'multiline':False]['text':'/ Convert text "ptr[*lenp]" according to "vcp".','line_number':2447,'multiline':False]['text':'/ Returns the result in allocated memory and sets "*lenp".','line_number':2448,'multiline':False]['text':'/ When "lenp" is NULL, use NUL terminated strings.','line_number':2449,'multiline':False]['text':'/ Illegal chars are often changed to "?", unless vcp->vc_fail is set.','line_number':2450,'multiline':False]['text':'/ When something goes wrong, NULL is returned and "*lenp" is unchanged.','line_number':2451,'multiline':False]['text':' Like string_convert(), but when "unconvlenp" is not NULL and there are is','line_number':2457,'multiline':False]['text':' an incomplete sequence at the end it is not converted and "*unconvlenp" is','line_number':2458,'multiline':False]['text':' set to the number of remaining bytes.','line_number':2459,'multiline':False]['text':' latin1 to utf-8 conversion','line_number':2477,'multiline':False]['text':' latin9 to utf-8 conversion','line_number':2495,'multiline':False]['text':' euro','line_number':2502,'multiline':False]['text':' S hat','line_number':2504,'multiline':False]['text':' S -hat','line_number':2506,'multiline':False]['text':' Z hat','line_number':2508,'multiline':False]['text':' Z -hat','line_number':2510,'multiline':False]['text':' OE','line_number':2512,'multiline':False]['text':' oe','line_number':2514,'multiline':False]['text':' Y','line_number':2516,'multiline':False]['text':' utf-8 to latin1 conversion','line_number':2526,'multiline':False]['text':' utf-8 to latin9 conversion','line_number':2527,'multiline':False]['text':' Illegal utf-8 byte cannot be converted','line_number':2538,'multiline':False]['text':' Incomplete sequence at the end.','line_number':2543,'multiline':False]['text':' euro','line_number':2553,'multiline':False]['text':' S hat','line_number':2555,'multiline':False]['text':' S -hat','line_number':2557,'multiline':False]['text':' Z hat','line_number':2559,'multiline':False]['text':' Z -hat','line_number':2561,'multiline':False]['text':' OE','line_number':2563,'multiline':False]['text':' oe','line_number':2565,'multiline':False]['text':' Y','line_number':2567,'multiline':False]['text':' not in latin9','line_number':2576,'multiline':False]['text':' skip composing chars','line_number':2579,'multiline':False]['text':' conversion with vcp->vc_fd','line_number':2601,'multiline':False]['text':'/ Table set by setcellwidths().','line_number':2609,'multiline':False]['text':'/ Return the value of the cellwidth table for the character `c`.','line_number':2619,'multiline':False]['text':'/','line_number':2620,'multiline':False]['text':'/ @param c The source character.','line_number':2621,'multiline':False]['text':'/ @return 1 or 2 when `c` is in the cellwidth table, 0 if not.','line_number':2622,'multiline':False]['text':' first quick check for Latin1 etc. characters','line_number':2629,'multiline':False]['text':' binary search in table','line_number':2634,'multiline':False]['text':'/ "setcellwidths()" function','line_number':2658,'multiline':False]['text':' Clearing the table.','line_number':2667,'multiline':False]['text':' Note: use list_T instead of listitem_T so that TV_LIST_ITEM_NEXT can be used properly below.','line_number':2674,'multiline':False]['text':' Check that all entries are a list with three numbers, the range is','line_number':2677,'multiline':False]['text':' valid and the cell width is valid.','line_number':2678,'multiline':False]['text':' Sort the list on the first number.','line_number':2726,'multiline':False]['text':' Store the items in the new table.','line_number':2731,'multiline':False]['text':' Check that the new value does not conflict with 'listchars' or','line_number':2756,'multiline':False]['text':' 'fillchars'.','line_number':2757,'multiline':False]['text':'/ "getcellwidths()" function','line_number':2771,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the possible arguments of the','line_number':2795,'multiline':False]['text':'/ encoding options.','line_number':2796,'multiline':False]