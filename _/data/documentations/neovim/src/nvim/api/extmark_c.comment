['text':'/ Creates a new namespace or gets an existing one. \*namespace\*','line_number':42,'multiline':False]['text':'/','line_number':43,'multiline':False]['text':'/ Namespaces are used for buffer highlights and virtual text, see','line_number':44,'multiline':False]['text':'/ |nvim_buf_add_highlight()| and |nvim_buf_set_extmark()|.','line_number':45,'multiline':False]['text':'/','line_number':46,'multiline':False]['text':'/ Namespaces can be named or anonymous. If `name` matches an existing','line_number':47,'multiline':False]['text':'/ namespace, the associated id is returned. If `name` is an empty string','line_number':48,'multiline':False]['text':'/ a new, anonymous namespace is created.','line_number':49,'multiline':False]['text':'/','line_number':50,'multiline':False]['text':'/ @param name Namespace name or empty string','line_number':51,'multiline':False]['text':'/ @return Namespace id','line_number':52,'multiline':False]['text':'/ Gets existing, non-anonymous |namespace|s.','line_number':68,'multiline':False]['text':'/','line_number':69,'multiline':False]['text':'/ @return dict that maps from names to namespace ids.','line_number':70,'multiline':False]['text':' Is the Namespace in use?','line_number':97,'multiline':False]['text':'/ Gets the position (0-indexed) of an |extmark|.','line_number':178,'multiline':False]['text':'/','line_number':179,'multiline':False]['text':'/ @param buffer  Buffer handle, or 0 for current buffer','line_number':180,'multiline':False]['text':'/ @param ns_id  Namespace id from |nvim_create_namespace()|','line_number':181,'multiline':False]['text':'/ @param id  Extmark id','line_number':182,'multiline':False]['text':'/ @param opts  Optional parameters. Keys:','line_number':183,'multiline':False]['text':'/          - details: Whether to include the details dict','line_number':184,'multiline':False]['text':'/          - hl_name: Whether to include highlight group name instead of id, true if omitted','line_number':185,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':186,'multiline':False]['text':'/ @return 0-indexed (row, col) tuple or empty list () if extmark id was','line_number':187,'multiline':False]['text':'/ absent','line_number':188,'multiline':False]['text':'/ Gets |extmarks| (including |signs|) in "traversal order" from a |charwise|','line_number':217,'multiline':False]['text':'/ region defined by buffer positions (inclusive, 0-indexed |api-indexing|).','line_number':218,'multiline':False]['text':'/','line_number':219,'multiline':False]['text':'/ Region can be given as (row,col) tuples, or valid extmark ids (whose','line_number':220,'multiline':False]['text':'/ positions define the bounds). 0 and -1 are understood as (0,0) and (-1,-1)','line_number':221,'multiline':False]['text':'/ respectively, thus the following are equivalent:','line_number':222,'multiline':False]['text':'/','line_number':223,'multiline':False]['text':'/ ```lua','line_number':224,'multiline':False]['text':'/ vim.api.nvim_buf_get_extmarks(0, my_ns, 0, -1, {})','line_number':225,'multiline':False]['text':'/ vim.api.nvim_buf_get_extmarks(0, my_ns, {0,0}, {-1,-1}, {})','line_number':226,'multiline':False]['text':'/ ```','line_number':227,'multiline':False]['text':'/','line_number':228,'multiline':False]['text':'/ If `end` is less than `start`, traversal works backwards. (Useful','line_number':229,'multiline':False]['text':'/ with `limit`, to get the first marks prior to a given position.)','line_number':230,'multiline':False]['text':'/','line_number':231,'multiline':False]['text':'/ Note: when using extmark ranges (marks with a end_row/end_col position)','line_number':232,'multiline':False]['text':'/ the `overlap` option might be useful. Otherwise only the start position','line_number':233,'multiline':False]['text':'/ of an extmark will be considered.','line_number':234,'multiline':False]['text':'/','line_number':235,'multiline':False]['text':'/ Example:','line_number':236,'multiline':False]['text':'/','line_number':237,'multiline':False]['text':'/ ```lua','line_number':238,'multiline':False]['text':'/ local api = vim.api','line_number':239,'multiline':False]['text':'/ local pos = api.nvim_win_get_cursor(0)','line_number':240,'multiline':False]['text':'/ local ns  = api.nvim_create_namespace('my-plugin')','line_number':241,'multiline':False]['text':'/ -- Create new extmark at line 1, column 1.','line_number':242,'multiline':False]['text':'/ local m1  = api.nvim_buf_set_extmark(0, ns, 0, 0, {})','line_number':243,'multiline':False]['text':'/ -- Create new extmark at line 3, column 1.','line_number':244,'multiline':False]['text':'/ local m2  = api.nvim_buf_set_extmark(0, ns, 2, 0, {})','line_number':245,'multiline':False]['text':'/ -- Get extmarks only from line 3.','line_number':246,'multiline':False]['text':'/ local ms  = api.nvim_buf_get_extmarks(0, ns, {2,0}, {2,0}, {})','line_number':247,'multiline':False]['text':'/ -- Get all marks in this buffer + namespace.','line_number':248,'multiline':False]['text':'/ local all = api.nvim_buf_get_extmarks(0, ns, 0, -1, {})','line_number':249,'multiline':False]['text':'/ vim.print(ms)','line_number':250,'multiline':False]['text':'/ ```','line_number':251,'multiline':False]['text':'/','line_number':252,'multiline':False]['text':'/ @param buffer  Buffer handle, or 0 for current buffer','line_number':253,'multiline':False]['text':'/ @param ns_id  Namespace id from |nvim_create_namespace()| or -1 for all namespaces','line_number':254,'multiline':False]['text':'/ @param start  Start of range: a 0-indexed (row, col) or valid extmark id','line_number':255,'multiline':False]['text':'/ (whose position defines the bound). |api-indexing|','line_number':256,'multiline':False]['text':'/ @param end  End of range (inclusive): a 0-indexed (row, col) or valid','line_number':257,'multiline':False]['text':'/ extmark id (whose position defines the bound). |api-indexing|','line_number':258,'multiline':False]['text':'/ @param opts  Optional parameters. Keys:','line_number':259,'multiline':False]['text':'/          - limit:  Maximum number of marks to return','line_number':260,'multiline':False]['text':'/          - details: Whether to include the details dict','line_number':261,'multiline':False]['text':'/          - hl_name: Whether to include highlight group name instead of id, true if omitted','line_number':262,'multiline':False]['text':'/          - overlap: Also include marks which overlap the range, even if','line_number':263,'multiline':False]['text':'/                     their start position is less than `start`','line_number':264,'multiline':False]['text':'/          - type: Filter marks by type: "highlight", "sign", "virt_text" and "virt_lines"','line_number':265,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':266,'multiline':False]['text':'/ @return List of [extmark_id, row, col] tuples in "traversal order".','line_number':267,'multiline':False]['text':' note: ns_id=-1 allowed, represented as UINT32_MAX','line_number':329,'multiline':False]['text':'/ Creates or updates an |extmark|.','line_number':341,'multiline':False]['text':'/','line_number':342,'multiline':False]['text':'/ By default a new extmark is created when no id is passed in, but it is also','line_number':343,'multiline':False]['text':'/ possible to create a new mark by passing in a previously unused id or move','line_number':344,'multiline':False]['text':'/ an existing mark by passing in its id. The caller must then keep track of','line_number':345,'multiline':False]['text':'/ existing and unused ids itself. (Useful over RPC, to avoid waiting for the','line_number':346,'multiline':False]['text':'/ return value.)','line_number':347,'multiline':False]['text':'/','line_number':348,'multiline':False]['text':'/ Using the optional arguments, it is possible to use this to highlight','line_number':349,'multiline':False]['text':'/ a range of text, and also to associate virtual text to the mark.','line_number':350,'multiline':False]['text':'/','line_number':351,'multiline':False]['text':'/ If present, the position defined by `end_col` and `end_row` should be after','line_number':352,'multiline':False]['text':'/ the start position in order for the extmark to cover a range.','line_number':353,'multiline':False]['text':'/ An earlier end position is not an error, but then it behaves like an empty','line_number':354,'multiline':False]['text':'/ range (no highlighting).','line_number':355,'multiline':False]['text':'/','line_number':356,'multiline':False]['text':'/ @param buffer  Buffer handle, or 0 for current buffer','line_number':357,'multiline':False]['text':'/ @param ns_id  Namespace id from |nvim_create_namespace()|','line_number':358,'multiline':False]['text':'/ @param line  Line where to place the mark, 0-based. |api-indexing|','line_number':359,'multiline':False]['text':'/ @param col  Column where to place the mark, 0-based. |api-indexing|','line_number':360,'multiline':False]['text':'/ @param opts  Optional parameters.','line_number':361,'multiline':False]['text':'/               - id : id of the extmark to edit.','line_number':362,'multiline':False]['text':'/               - end_row : ending line of the mark, 0-based inclusive.','line_number':363,'multiline':False]['text':'/               - end_col : ending col of the mark, 0-based exclusive.','line_number':364,'multiline':False]['text':'/               - hl_group : name of the highlight group used to highlight','line_number':365,'multiline':False]['text':'/                   this mark.','line_number':366,'multiline':False]['text':'/               - hl_eol : when true, for a multiline highlight covering the','line_number':367,'multiline':False]['text':'/                          EOL of a line, continue the highlight for the rest','line_number':368,'multiline':False]['text':'/                          of the screen line (just like for diff and','line_number':369,'multiline':False]['text':'/                          cursorline highlight).','line_number':370,'multiline':False]['text':'/               - virt_text : virtual text to link to this mark.','line_number':371,'multiline':False]['text':'/                   A list of [text, highlight] tuples, each representing a','line_number':372,'multiline':False]['text':'/                   text chunk with specified highlight. `highlight` element','line_number':373,'multiline':False]['text':'/                   can either be a single highlight group, or an array of','line_number':374,'multiline':False]['text':'/                   multiple highlight groups that will be stacked','line_number':375,'multiline':False]['text':'/                   (highest priority last). A highlight group can be supplied','line_number':376,'multiline':False]['text':'/                   either as a string or as an integer, the latter which','line_number':377,'multiline':False]['text':'/                   can be obtained using |nvim_get_hl_id_by_name()|.','line_number':378,'multiline':False]['text':'/               - virt_text_pos : position of virtual text. Possible values:','line_number':379,'multiline':False]['text':'/                 - "eol": right after eol character (default).','line_number':380,'multiline':False]['text':'/                 - "overlay": display over the specified column, without','line_number':381,'multiline':False]['text':'/                              shifting the underlying text.','line_number':382,'multiline':False]['text':'/                 - "right_align": display right aligned in the window.','line_number':383,'multiline':False]['text':'/                 - "inline": display at the specified column, and','line_number':384,'multiline':False]['text':'/                             shift the buffer text to the right as needed.','line_number':385,'multiline':False]['text':'/               - virt_text_win_col : position the virtual text at a fixed','line_number':386,'multiline':False]['text':'/                                     window column (starting from the first','line_number':387,'multiline':False]['text':'/                                     text column of the screen line) instead','line_number':388,'multiline':False]['text':'/                                     of "virt_text_pos".','line_number':389,'multiline':False]['text':'/               - virt_text_hide : hide the virtual text when the background','line_number':390,'multiline':False]['text':'/                                  text is selected or hidden because of','line_number':391,'multiline':False]['text':'/                                  scrolling with 'nowrap' or 'smoothscroll'.','line_number':392,'multiline':False]['text':'/                                  Currently only affects "overlay" virt_text.','line_number':393,'multiline':False]['text':'/               - hl_mode : control how highlights are combined with the','line_number':394,'multiline':False]['text':'/                           highlights of the text. Currently only affects','line_number':395,'multiline':False]['text':'/                           virt_text highlights, but might affect `hl_group`','line_number':396,'multiline':False]['text':'/                           in later versions.','line_number':397,'multiline':False]['text':'/                 - "replace": only show the virt_text color. This is the default.','line_number':398,'multiline':False]['text':'/                 - "combine": combine with background text color.','line_number':399,'multiline':False]['text':'/                 - "blend": blend with background text color.','line_number':400,'multiline':False]['text':'/                            Not supported for "inline" virt_text.','line_number':401,'multiline':False]['text':'/','line_number':402,'multiline':False]['text':'/               - virt_lines : virtual lines to add next to this mark','line_number':403,'multiline':False]['text':'/                   This should be an array over lines, where each line in','line_number':404,'multiline':False]['text':'/                   turn is an array over [text, highlight] tuples. In','line_number':405,'multiline':False]['text':'/                   general, buffer and window options do not affect the','line_number':406,'multiline':False]['text':'/                   display of the text. In particular 'wrap'','line_number':407,'multiline':False]['text':'/                   and 'linebreak' options do not take effect, so','line_number':408,'multiline':False]['text':'/                   the number of extra screen lines will always match','line_number':409,'multiline':False]['text':'/                   the size of the array. However the 'tabstop' buffer','line_number':410,'multiline':False]['text':'/                   option is still used for hard tabs. By default lines are','line_number':411,'multiline':False]['text':'/                   placed below the buffer line containing the mark.','line_number':412,'multiline':False]['text':'/','line_number':413,'multiline':False]['text':'/               - virt_lines_above: place virtual lines above instead.','line_number':414,'multiline':False]['text':'/               - virt_lines_leftcol: Place extmarks in the leftmost','line_number':415,'multiline':False]['text':'/                                     column of the window, bypassing','line_number':416,'multiline':False]['text':'/                                     sign and number columns.','line_number':417,'multiline':False]['text':'/','line_number':418,'multiline':False]['text':'/               - ephemeral : for use with |nvim_set_decoration_provider()|','line_number':419,'multiline':False]['text':'/                   callbacks. The mark will only be used for the current','line_number':420,'multiline':False]['text':'/                   redraw cycle, and not be permantently stored in the','line_number':421,'multiline':False]['text':'/                   buffer.','line_number':422,'multiline':False]['text':'/               - right_gravity : boolean that indicates the direction','line_number':423,'multiline':False]['text':'/                   the extmark will be shifted in when new text is inserted','line_number':424,'multiline':False]['text':'/                   (true for right, false for left). Defaults to true.','line_number':425,'multiline':False]['text':'/               - end_right_gravity : boolean that indicates the direction','line_number':426,'multiline':False]['text':'/                   the extmark end position (if it exists) will be shifted','line_number':427,'multiline':False]['text':'/                   in when new text is inserted (true for right, false','line_number':428,'multiline':False]['text':'/                   for left). Defaults to false.','line_number':429,'multiline':False]['text':'/               - undo_restore : Restore the exact position of the mark','line_number':430,'multiline':False]['text':'/                   if text around the mark was deleted and then restored by undo.','line_number':431,'multiline':False]['text':'/                   Defaults to true.','line_number':432,'multiline':False]['text':'/               - invalidate : boolean that indicates whether to hide the','line_number':433,'multiline':False]['text':'/                   extmark if the entirety of its range is deleted. If','line_number':434,'multiline':False]['text':'/                   "undo_restore" is false, the extmark is deleted instead.','line_number':435,'multiline':False]['text':'/               - priority: a priority value for the highlight group or sign','line_number':436,'multiline':False]['text':'/                   attribute. For example treesitter highlighting uses a','line_number':437,'multiline':False]['text':'/                   value of 100.','line_number':438,'multiline':False]['text':'/               - strict: boolean that indicates extmark should not be placed','line_number':439,'multiline':False]['text':'/                   if the line or column value is past the end of the','line_number':440,'multiline':False]['text':'/                   buffer or end of the line respectively. Defaults to true.','line_number':441,'multiline':False]['text':'/               - sign_text: string of length 1-2 used to display in the','line_number':442,'multiline':False]['text':'/                   sign column.','line_number':443,'multiline':False]['text':'/                   Note: ranges are unsupported and decorations are only','line_number':444,'multiline':False]['text':'/                   applied to start_row','line_number':445,'multiline':False]['text':'/               - sign_hl_group: name of the highlight group used to','line_number':446,'multiline':False]['text':'/                   highlight the sign column text.','line_number':447,'multiline':False]['text':'/                   Note: ranges are unsupported and decorations are only','line_number':448,'multiline':False]['text':'/                   applied to start_row','line_number':449,'multiline':False]['text':'/               - number_hl_group: name of the highlight group used to','line_number':450,'multiline':False]['text':'/                   highlight the number column.','line_number':451,'multiline':False]['text':'/                   Note: ranges are unsupported and decorations are only','line_number':452,'multiline':False]['text':'/                   applied to start_row','line_number':453,'multiline':False]['text':'/               - line_hl_group: name of the highlight group used to','line_number':454,'multiline':False]['text':'/                   highlight the whole line.','line_number':455,'multiline':False]['text':'/                   Note: ranges are unsupported and decorations are only','line_number':456,'multiline':False]['text':'/                   applied to start_row','line_number':457,'multiline':False]['text':'/               - cursorline_hl_group: name of the highlight group used to','line_number':458,'multiline':False]['text':'/                   highlight the line when the cursor is on the same line','line_number':459,'multiline':False]['text':'/                   as the mark and 'cursorline' is enabled.','line_number':460,'multiline':False]['text':'/                   Note: ranges are unsupported and decorations are only','line_number':461,'multiline':False]['text':'/                   applied to start_row','line_number':462,'multiline':False]['text':'/               - conceal: string which should be either empty or a single','line_number':463,'multiline':False]['text':'/                   character. Enable concealing similar to |:syn-conceal|.','line_number':464,'multiline':False]['text':'/                   When a character is supplied it is used as |:syn-cchar|.','line_number':465,'multiline':False]['text':'/                   "hl_group" is used as highlight for the cchar if provided,','line_number':466,'multiline':False]['text':'/                   otherwise it defaults to |hl-Conceal|.','line_number':467,'multiline':False]['text':'/               - spell: boolean indicating that spell checking should be','line_number':468,'multiline':False]['text':'/                   performed within this extmark','line_number':469,'multiline':False]['text':'/               - ui_watched: boolean that indicates the mark should be drawn','line_number':470,'multiline':False]['text':'/                   by a UI. When set, the UI will receive win_extmark events.','line_number':471,'multiline':False]['text':'/                   Note: the mark is positioned by virt_text attributes. Can be','line_number':472,'multiline':False]['text':'/                   used together with virt_text.','line_number':473,'multiline':False]['text':'/','line_number':474,'multiline':False]['text':'/ @param[out]  err   Error details, if any','line_number':475,'multiline':False]['text':'/ @return Id of the created/updated extmark','line_number':476,'multiline':False]['text':' TODO(bfredl): in principle signs with max one (1) hl group and max 4 bytes of text.','line_number':482,'multiline':False]['text':' should be a candidate for inlining as well.','line_number':483,'multiline':False]['text':' For backward compatibility we support "end_line" as an alias for "end_row"','line_number':510,'multiline':False]['text':' uncrustify:off','line_number':540,'multiline':False]['text':' TODO(bfredl): keyset type alias for hl_group? (nil|int|string)','line_number':542,'multiline':False]['text':' uncrustify:on','line_number':556,'multiline':False]['text':' Only error out if they try to set end_right_gravity without','line_number':678,'multiline':False]['text':' setting end_col or end_row','line_number':679,'multiline':False]['text':' TODO(bfredl): in a revised interface this should be the default.','line_number':695,'multiline':False]['text':' We are trying to add an extmark past final newline','line_number':731,'multiline':False]['text':' reuse len from before','line_number':734,'multiline':False]['text':'/ Removes an |extmark|.','line_number':831,'multiline':False]['text':'/','line_number':832,'multiline':False]['text':'/ @param buffer Buffer handle, or 0 for current buffer','line_number':833,'multiline':False]['text':'/ @param ns_id Namespace id from |nvim_create_namespace()|','line_number':834,'multiline':False]['text':'/ @param id Extmark id','line_number':835,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':836,'multiline':False]['text':'/ @return true if the extmark was found, else false','line_number':837,'multiline':False]['text':'/ Adds a highlight to buffer.','line_number':864,'multiline':False]['text':'/','line_number':865,'multiline':False]['text':'/ Useful for plugins that dynamically generate highlights to a buffer','line_number':866,'multiline':False]['text':'/ (like a semantic highlighter or linter). The function adds a single','line_number':867,'multiline':False]['text':'/ highlight to a buffer. Unlike |matchaddpos()| highlights follow changes to','line_number':868,'multiline':False]['text':'/ line numbering (as lines are inserted/removed above the highlighted line),','line_number':869,'multiline':False]['text':'/ like signs and marks do.','line_number':870,'multiline':False]['text':'/','line_number':871,'multiline':False]['text':'/ Namespaces are used for batch deletion/updating of a set of highlights. To','line_number':872,'multiline':False]['text':'/ create a namespace, use |nvim_create_namespace()| which returns a namespace','line_number':873,'multiline':False]['text':'/ id. Pass it in to this function as `ns_id` to add highlights to the','line_number':874,'multiline':False]['text':'/ namespace. All highlights in the same namespace can then be cleared with','line_number':875,'multiline':False]['text':'/ single call to |nvim_buf_clear_namespace()|. If the highlight never will be','line_number':876,'multiline':False]['text':'/ deleted by an API call, pass `ns_id = -1`.','line_number':877,'multiline':False]['text':'/','line_number':878,'multiline':False]['text':'/ As a shorthand, `ns_id = 0` can be used to create a new namespace for the','line_number':879,'multiline':False]['text':'/ highlight, the allocated id is then returned. If `hl_group` is the empty','line_number':880,'multiline':False]['text':'/ string no highlight is added, but a new `ns_id` is still returned. This is','line_number':881,'multiline':False]['text':'/ supported for backwards compatibility, new code should use','line_number':882,'multiline':False]['text':'/ |nvim_create_namespace()| to create a new empty namespace.','line_number':883,'multiline':False]['text':'/','line_number':884,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':885,'multiline':False]['text':'/ @param ns_id      namespace to use or -1 for ungrouped highlight','line_number':886,'multiline':False]['text':'/ @param hl_group   Name of the highlight group to use','line_number':887,'multiline':False]['text':'/ @param line       Line to highlight (zero-indexed)','line_number':888,'multiline':False]['text':'/ @param col_start  Start of (byte-indexed) column range to highlight','line_number':889,'multiline':False]['text':'/ @param col_end    End of (byte-indexed) column range to highlight,','line_number':890,'multiline':False]['text':'/                   or -1 to highlight to end of line','line_number':891,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':892,'multiline':False]['text':'/ @return The ns_id that was used','line_number':893,'multiline':False]['text':' safety check, we can't add marks outside the range','line_number':917,'multiline':False]['text':'/ Clears |namespace|d objects (highlights, |extmarks|, virtual text) from','line_number':942,'multiline':False]['text':'/ a region.','line_number':943,'multiline':False]['text':'/','line_number':944,'multiline':False]['text':'/ Lines are 0-indexed. |api-indexing|  To clear the namespace in the entire','line_number':945,'multiline':False]['text':'/ buffer, specify line_start=0 and line_end=-1.','line_number':946,'multiline':False]['text':'/','line_number':947,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':948,'multiline':False]['text':'/ @param ns_id      Namespace to clear, or -1 to clear all namespaces.','line_number':949,'multiline':False]['text':'/ @param line_start Start of range of lines to clear','line_number':950,'multiline':False]['text':'/ @param line_end   End of range of lines to clear (exclusive) or -1 to clear','line_number':951,'multiline':False]['text':'/                   to end of buffer.','line_number':952,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':953,'multiline':False]['text':'/ Set or change decoration provider for a |namespace|','line_number':975,'multiline':False]['text':'/','line_number':976,'multiline':False]['text':'/ This is a very general purpose interface for having Lua callbacks','line_number':977,'multiline':False]['text':'/ being triggered during the redraw code.','line_number':978,'multiline':False]['text':'/','line_number':979,'multiline':False]['text':'/ The expected usage is to set |extmarks| for the currently','line_number':980,'multiline':False]['text':'/ redrawn buffer. |nvim_buf_set_extmark()| can be called to add marks','line_number':981,'multiline':False]['text':'/ on a per-window or per-lines basis. Use the `ephemeral` key to only','line_number':982,'multiline':False]['text':'/ use the mark for the current screen redraw (the callback will be called','line_number':983,'multiline':False]['text':'/ again for the next redraw).','line_number':984,'multiline':False]['text':'/','line_number':985,'multiline':False]['text':'/ Note: this function should not be called often. Rather, the callbacks','line_number':986,'multiline':False]['text':'/ themselves can be used to throttle unneeded callbacks. the `on_start`','line_number':987,'multiline':False]['text':'/ callback can return `false` to disable the provider until the next redraw.','line_number':988,'multiline':False]['text':'/ Similarly, return `false` in `on_win` will skip the `on_lines` calls','line_number':989,'multiline':False]['text':'/ for that window (but any extmarks set in `on_win` will still be used).','line_number':990,'multiline':False]['text':'/ A plugin managing multiple sources of decoration should ideally only set','line_number':991,'multiline':False]['text':'/ one provider, and merge the sources internally. You can use multiple `ns_id`','line_number':992,'multiline':False]['text':'/ for the extmarks set/modified inside the callback anyway.','line_number':993,'multiline':False]['text':'/','line_number':994,'multiline':False]['text':'/ Note: doing anything other than setting extmarks is considered experimental.','line_number':995,'multiline':False]['text':'/ Doing things like changing options are not explicitly forbidden, but is','line_number':996,'multiline':False]['text':'/ likely to have unexpected consequences (such as 100% CPU consumption).','line_number':997,'multiline':False]['text':'/ doing `vim.rpcnotify` should be OK, but `vim.rpcrequest` is quite dubious','line_number':998,'multiline':False]['text':'/ for the moment.','line_number':999,'multiline':False]['text':'/','line_number':1000,'multiline':False]['text':'/ Note: It is not allowed to remove or update extmarks in 'on_line' callbacks.','line_number':1001,'multiline':False]['text':'/','line_number':1002,'multiline':False]['text':'/ @param ns_id  Namespace id from |nvim_create_namespace()|','line_number':1003,'multiline':False]['text':'/ @param opts  Table of callbacks:','line_number':1004,'multiline':False]['text':'/             - on_start: called first on each screen redraw','line_number':1005,'multiline':False]['text':'/                 ["start", tick]','line_number':1006,'multiline':False]['text':'/             - on_buf: called for each buffer being redrawn (before','line_number':1007,'multiline':False]['text':'/                 window callbacks)','line_number':1008,'multiline':False]['text':'/                 ["buf", bufnr, tick]','line_number':1009,'multiline':False]['text':'/             - on_win: called when starting to redraw a','line_number':1010,'multiline':False]['text':'/                 specific window. botline_guess is an approximation','line_number':1011,'multiline':False]['text':'/                 that does not exceed the last line number.','line_number':1012,'multiline':False]['text':'/                 ["win", winid, bufnr, topline, botline_guess]','line_number':1013,'multiline':False]['text':'/             - on_line: called for each buffer line being redrawn.','line_number':1014,'multiline':False]['text':'/                 (The interaction with fold lines is subject to change)','line_number':1015,'multiline':False]['text':'/                 ["win", winid, bufnr, row]','line_number':1016,'multiline':False]['text':'/             - on_end: called at the end of a redraw cycle','line_number':1017,'multiline':False]['text':'/                 ["end", tick]','line_number':1018,'multiline':False]['text':' regardless of what happens, it seems good idea to redraw','line_number':1026,'multiline':False]['text':' TODO(bfredl): too soon?','line_number':1027,'multiline':False]['text':'/ Gets the line and column of an |extmark|.','line_number':1059,'multiline':False]['text':'/','line_number':1060,'multiline':False]['text':'/ Extmarks may be queried by position, name or even special names','line_number':1061,'multiline':False]['text':'/ in the future such as "cursor".','line_number':1062,'multiline':False]['text':'/','line_number':1063,'multiline':False]['text':'/ @param[out] lnum extmark line','line_number':1064,'multiline':False]['text':'/ @param[out] colnr extmark column','line_number':1065,'multiline':False]['text':'/','line_number':1066,'multiline':False]['text':'/ @return true if the extmark was found, else false','line_number':1067,'multiline':False]['text':' Check if it is mark id','line_number':1071,'multiline':False]['text':' Check if it is a position','line_number':1097,'multiline':False]['text':' allocates','line_number':1157,'multiline':False]