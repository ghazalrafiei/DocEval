['text':' Copy string or array of strings into an empty array.','line_number':31,'multiline':False]['text':' Get the event number, unless it is an error. Then goto `goto_name`.','line_number':32,'multiline':False]['text':' ID for associating autocmds created via nvim_create_autocmd','line_number':40,'multiline':False]['text':' Used to delete autocmds from nvim_del_autocmd','line_number':41,'multiline':False]['text':'/ Get all autocommands that match the corresponding {opts}.','line_number':44,'multiline':False]['text':'/','line_number':45,'multiline':False]['text':'/ These examples will get autocommands matching ALL the given criteria:','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/ ```lua','line_number':48,'multiline':False]['text':'/ -- Matches all criteria','line_number':49,'multiline':False]['text':'/ autocommands = vim.api.nvim_get_autocmds({','line_number':50,'multiline':False]['text':'/   group = "MyGroup",','line_number':51,'multiline':False]['text':'/   event = {"BufEnter", "BufWinEnter"},','line_number':52,'multiline':False]['text':'/   pattern = {"*.c", "*.h"}','line_number':53,'multiline':False]['text':'/ })','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/ -- All commands from one group','line_number':56,'multiline':False]['text':'/ autocommands = vim.api.nvim_get_autocmds({','line_number':57,'multiline':False]['text':'/   group = "MyGroup",','line_number':58,'multiline':False]['text':'/ })','line_number':59,'multiline':False]['text':'/ ```','line_number':60,'multiline':False]['text':'/','line_number':61,'multiline':False]['text':'/ NOTE: When multiple patterns or events are provided, it will find all the autocommands that','line_number':62,'multiline':False]['text':'/ match any combination of them.','line_number':63,'multiline':False]['text':'/','line_number':64,'multiline':False]['text':'/ @param opts Dictionary with at least one of the following:','line_number':65,'multiline':False]['text':'/             - group (string|integer): the autocommand group name or id to match against.','line_number':66,'multiline':False]['text':'/             - event (string|array): event or events to match against |autocmd-events|.','line_number':67,'multiline':False]['text':'/             - pattern (string|array): pattern or patterns to match against |autocmd-pattern|.','line_number':68,'multiline':False]['text':'/             Cannot be used with {buffer}','line_number':69,'multiline':False]['text':'/             - buffer: Buffer number or list of buffer numbers for buffer local autocommands','line_number':70,'multiline':False]['text':'/             |autocmd-buflocal|. Cannot be used with {pattern}','line_number':71,'multiline':False]['text':'/ @return Array of autocommands matching the criteria, with each item','line_number':72,'multiline':False]['text':'/         containing the following fields:','line_number':73,'multiline':False]['text':'/             - id (number): the autocommand id (only when defined with the API).','line_number':74,'multiline':False]['text':'/             - group (integer): the autocommand group id.','line_number':75,'multiline':False]['text':'/             - group_name (string): the autocommand group name.','line_number':76,'multiline':False]['text':'/             - desc (string): the autocommand description.','line_number':77,'multiline':False]['text':'/             - event (string): the autocommand event.','line_number':78,'multiline':False]['text':'/             - command (string): the autocommand command. Note: this will be empty if a callback is set.','line_number':79,'multiline':False]['text':'/             - callback (function|string|nil): Lua function or name of a Vim script function','line_number':80,'multiline':False]['text':'/             which is executed when this autocommand is triggered.','line_number':81,'multiline':False]['text':'/             - once (boolean): whether the autocommand is only run once.','line_number':82,'multiline':False]['text':'/             - pattern (string): the autocommand pattern.','line_number':83,'multiline':False]['text':'/             If the autocommand is buffer local |autocmd-buffer-local|:','line_number':84,'multiline':False]['text':'/             - buflocal (boolean): true if the autocommand is buffer local.','line_number':85,'multiline':False]['text':'/             - buffer (number): the buffer number.','line_number':86,'multiline':False]['text':' TODO(tjdevries): Would be cool to add nvim_get_autocmds({ id = ... })','line_number':90,'multiline':False]['text':' Skip autocmds from invalid groups if passed.','line_number':234,'multiline':False]['text':' Skip 'pattern' from invalid patterns if passed.','line_number':239,'multiline':False]['text':' TODO(sctx): It would be good to unify script_ctx to actually work with lua','line_number':313,'multiline':False]['text':'  right now it's just super weird, and never really gives you the info that','line_number':314,'multiline':False]['text':'  you would expect from this.','line_number':315,'multiline':False]['text':'','line_number':316,'multiline':False]['text':'  I think we should be able to get the line number, filename, etc. from lua','line_number':317,'multiline':False]['text':'  when we're executing something, and it should be easy to then save that','line_number':318,'multiline':False]['text':'  info here.','line_number':319,'multiline':False]['text':'','line_number':320,'multiline':False]['text':'  I think it's a big loss not getting line numbers of where options, autocmds,','line_number':321,'multiline':False]['text':'  etc. are set (just getting "Sourced (lua)" or something is not that helpful.','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':'  Once we do that, we can put these into the autocmd_info, but I don't think it's','line_number':324,'multiline':False]['text':'  useful to do that at this time.','line_number':325,'multiline':False]['text':'','line_number':326,'multiline':False]['text':' PUT(autocmd_info, "sid", INTEGER_OBJ(ac->script_ctx.sc_sid));','line_number':327,'multiline':False]['text':' PUT(autocmd_info, "lnum", INTEGER_OBJ(ac->script_ctx.sc_lnum));','line_number':328,'multiline':False]['text':'/ Creates an |autocommand| event handler, defined by `callback` (Lua function or Vimscript','line_number':339,'multiline':False]['text':'/ function _name_ string) or `command` (Ex command string).','line_number':340,'multiline':False]['text':'/','line_number':341,'multiline':False]['text':'/ Example using Lua callback:','line_number':342,'multiline':False]['text':'/','line_number':343,'multiline':False]['text':'/ ```lua','line_number':344,'multiline':False]['text':'/ vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {','line_number':345,'multiline':False]['text':'/   pattern = {"*.c", "*.h"},','line_number':346,'multiline':False]['text':'/   callback = function(ev)','line_number':347,'multiline':False]['text':'/     print(string.format('event fired: %s', vim.inspect(ev)))','line_number':348,'multiline':False]['text':'/   end','line_number':349,'multiline':False]['text':'/ })','line_number':350,'multiline':False]['text':'/ ```','line_number':351,'multiline':False]['text':'/','line_number':352,'multiline':False]['text':'/ Example using an Ex command as the handler:','line_number':353,'multiline':False]['text':'/','line_number':354,'multiline':False]['text':'/ ```lua','line_number':355,'multiline':False]['text':'/ vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {','line_number':356,'multiline':False]['text':'/   pattern = {"*.c", "*.h"},','line_number':357,'multiline':False]['text':'/   command = "echo 'Entering a C or C++ file'",','line_number':358,'multiline':False]['text':'/ })','line_number':359,'multiline':False]['text':'/ ```','line_number':360,'multiline':False]['text':'/','line_number':361,'multiline':False]['text':'/ Note: `pattern` is NOT automatically expanded (unlike with |:autocmd|), thus names like "$HOME"','line_number':362,'multiline':False]['text':'/ and "~" must be expanded explicitly:','line_number':363,'multiline':False]['text':'/','line_number':364,'multiline':False]['text':'/ ```lua','line_number':365,'multiline':False]['text':'/ pattern = vim.fn.expand("~") .. "/some/path/*.py"','line_number':366,'multiline':False]['text':'/ ```','line_number':367,'multiline':False]['text':'/','line_number':368,'multiline':False]['text':'/ @param event (string|array) Event(s) that will trigger the handler (`callback` or `command`).','line_number':369,'multiline':False]['text':'/ @param opts Options dict:','line_number':370,'multiline':False]['text':'/             - group (string|integer) optional: autocommand group name or id to match against.','line_number':371,'multiline':False]['text':'/             - pattern (string|array) optional: pattern(s) to match literally |autocmd-pattern|.','line_number':372,'multiline':False]['text':'/             - buffer (integer) optional: buffer number for buffer-local autocommands','line_number':373,'multiline':False]['text':'/             |autocmd-buflocal|. Cannot be used with {pattern}.','line_number':374,'multiline':False]['text':'/             - desc (string) optional: description (for documentation and troubleshooting).','line_number':375,'multiline':False]['text':'/             - callback (function|string) optional: Lua function (or Vimscript function name, if','line_number':376,'multiline':False]['text':'/             string) called when the event(s) is triggered. Lua callback can return true to','line_number':377,'multiline':False]['text':'/             delete the autocommand, and receives a table argument with these keys:','line_number':378,'multiline':False]['text':'/                 - id: (number) autocommand id','line_number':379,'multiline':False]['text':'/                 - event: (string) name of the triggered event |autocmd-events|','line_number':380,'multiline':False]['text':'/                 - group: (number|nil) autocommand group id, if any','line_number':381,'multiline':False]['text':'/                 - match: (string) expanded value of |<amatch>|','line_number':382,'multiline':False]['text':'/                 - buf: (number) expanded value of |<abuf>|','line_number':383,'multiline':False]['text':'/                 - file: (string) expanded value of |<afile>|','line_number':384,'multiline':False]['text':'/                 - data: (any) arbitrary data passed from |nvim_exec_autocmds()|','line_number':385,'multiline':False]['text':'/             - command (string) optional: Vim command to execute on event. Cannot be used with','line_number':386,'multiline':False]['text':'/             {callback}','line_number':387,'multiline':False]['text':'/             - once (boolean) optional: defaults to false. Run the autocommand','line_number':388,'multiline':False]['text':'/             only once |autocmd-once|.','line_number':389,'multiline':False]['text':'/             - nested (boolean) optional: defaults to false. Run nested','line_number':390,'multiline':False]['text':'/             autocommands |autocmd-nested|.','line_number':391,'multiline':False]['text':'/','line_number':392,'multiline':False]['text':'/ @return Autocommand id (number)','line_number':393,'multiline':False]['text':'/ @see |autocommand|','line_number':394,'multiline':False]['text':'/ @see |nvim_del_autocmd()|','line_number':395,'multiline':False]['text':' NOTE: We could accept callable tables, but that isn't common in the API.','line_number':417,'multiline':False]['text':' See: TODO(sctx)','line_number':489,'multiline':False]['text':'/ Deletes an autocommand by id.','line_number':517,'multiline':False]['text':'/','line_number':518,'multiline':False]['text':'/ @param id Integer Autocommand id returned by |nvim_create_autocmd()|','line_number':519,'multiline':False]['text':'/ Clears all autocommands selected by {opts}. To delete autocmds see |nvim_del_autocmd()|.','line_number':531,'multiline':False]['text':'/','line_number':532,'multiline':False]['text':'/ @param opts Parameters','line_number':533,'multiline':False]['text':'/         - event: (string|table)','line_number':534,'multiline':False]['text':'/              Examples:','line_number':535,'multiline':False]['text':'/                 - event: "pat1"','line_number':536,'multiline':False]['text':'/                 - event: { "pat1" }','line_number':537,'multiline':False]['text':'/                 - event: { "pat1", "pat2", "pat3" }','line_number':538,'multiline':False]['text':'/         - pattern: (string|table)','line_number':539,'multiline':False]['text':'/             - pattern or patterns to match exactly.','line_number':540,'multiline':False]['text':'/                 - For example, if you have `*.py` as that pattern for the autocmd,','line_number':541,'multiline':False]['text':'/                   you must pass `*.py` exactly to clear it. `test.py` will not','line_number':542,'multiline':False]['text':'/                   match the pattern.','line_number':543,'multiline':False]['text':'/             - defaults to clearing all patterns.','line_number':544,'multiline':False]['text':'/             - NOTE: Cannot be used with {buffer}','line_number':545,'multiline':False]['text':'/         - buffer: (bufnr)','line_number':546,'multiline':False]['text':'/             - clear only |autocmd-buflocal| autocommands.','line_number':547,'multiline':False]['text':'/             - NOTE: Cannot be used with {pattern}','line_number':548,'multiline':False]['text':'/         - group: (string|int) The augroup name or id.','line_number':549,'multiline':False]['text':'/             - NOTE: If not passed, will only delete autocmds *not* in any group.','line_number':550,'multiline':False]['text':'/','line_number':551,'multiline':False]['text':' TODO(tjdevries): Future improvements:','line_number':555,'multiline':False]['text':'        - once: (boolean) - Only clear autocmds with once. See |autocmd-once|','line_number':556,'multiline':False]['text':'        - nested: (boolean) - Only clear autocmds with nested. See |autocmd-nested|','line_number':557,'multiline':False]['text':'        - group: Allow passing "*" or true or something like that to force doing all','line_number':558,'multiline':False]['text':'        autocmds, regardless of their group.','line_number':559,'multiline':False]['text':' When we create the autocmds, we want to say that they are all matched, so that's *','line_number':584,'multiline':False]['text':' but when we clear them, we want to say that we didn't pass a pattern, so that's NUL','line_number':585,'multiline':False]['text':' If we didn't pass any events, that means clear all events.','line_number':590,'multiline':False]['text':'/ Create or get an autocommand group |autocmd-groups|.','line_number':618,'multiline':False]['text':'/','line_number':619,'multiline':False]['text':'/ To get an existing group id, do:','line_number':620,'multiline':False]['text':'/','line_number':621,'multiline':False]['text':'/ ```lua','line_number':622,'multiline':False]['text':'/ local id = vim.api.nvim_create_augroup("MyGroup", {','line_number':623,'multiline':False]['text':'/     clear = false','line_number':624,'multiline':False]['text':'/ })','line_number':625,'multiline':False]['text':'/ ```','line_number':626,'multiline':False]['text':'/','line_number':627,'multiline':False]['text':'/ @param name String: The name of the group','line_number':628,'multiline':False]['text':'/ @param opts Dictionary Parameters','line_number':629,'multiline':False]['text':'/                 - clear (bool) optional: defaults to true. Clear existing','line_number':630,'multiline':False]['text':'/                 commands if the group already exists |autocmd-groups|.','line_number':631,'multiline':False]['text':'/ @return Integer id of the created group.','line_number':632,'multiline':False]['text':'/ @see |autocmd-groups|','line_number':633,'multiline':False]['text':'/ Delete an autocommand group by id.','line_number':659,'multiline':False]['text':'/','line_number':660,'multiline':False]['text':'/ To get a group id one can use |nvim_get_autocmds()|.','line_number':661,'multiline':False]['text':'/','line_number':662,'multiline':False]['text':'/ NOTE: behavior differs from |:augroup-delete|. When deleting a group, autocommands contained in','line_number':663,'multiline':False]['text':'/ this group will also be deleted and cleared. This group will no longer exist.','line_number':664,'multiline':False]['text':'/ @param id Integer The id of the group.','line_number':665,'multiline':False]['text':'/ @see |nvim_del_augroup_by_name()|','line_number':666,'multiline':False]['text':'/ @see |nvim_create_augroup()|','line_number':667,'multiline':False]['text':'/ Delete an autocommand group by name.','line_number':677,'multiline':False]['text':'/','line_number':678,'multiline':False]['text':'/ NOTE: behavior differs from |:augroup-delete|. When deleting a group, autocommands contained in','line_number':679,'multiline':False]['text':'/ this group will also be deleted and cleared. This group will no longer exist.','line_number':680,'multiline':False]['text':'/ @param name String The name of the group.','line_number':681,'multiline':False]['text':'/ @see |autocmd-groups|','line_number':682,'multiline':False]['text':'/ Execute all autocommands for {event} that match the corresponding','line_number':691,'multiline':False]['text':'/  {opts} |autocmd-execute|.','line_number':692,'multiline':False]['text':'/ @param event (String|Array) The event or events to execute','line_number':693,'multiline':False]['text':'/ @param opts Dictionary of autocommand options:','line_number':694,'multiline':False]['text':'/             - group (string|integer) optional: the autocommand group name or','line_number':695,'multiline':False]['text':'/             id to match against. |autocmd-groups|.','line_number':696,'multiline':False]['text':'/             - pattern (string|array) optional: defaults to "*" |autocmd-pattern|. Cannot be used','line_number':697,'multiline':False]['text':'/             with {buffer}.','line_number':698,'multiline':False]['text':'/             - buffer (integer) optional: buffer number |autocmd-buflocal|. Cannot be used with','line_number':699,'multiline':False]['text':'/             {pattern}.','line_number':700,'multiline':False]['text':'/             - modeline (bool) optional: defaults to true. Process the','line_number':701,'multiline':False]['text':'/             modeline after the autocommands |<nomodeline>|.','line_number':702,'multiline':False]['text':'/             - data (any): arbitrary data to send to the autocommand callback. See','line_number':703,'multiline':False]['text':'/             |nvim_create_autocmd()| for details.','line_number':704,'multiline':False]['text':'/ @see |:doautocmd|','line_number':705,'multiline':False]['text':' Returns AUGROUP_ERROR if there was a problem with {group}','line_number':811,'multiline':False]