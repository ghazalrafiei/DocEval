['text':'/ Executes Vimscript (multiline block of Ex commands), like anonymous','line_number':30,'multiline':False]['text':'/ |:source|.','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ Unlike |nvim_command()| this function supports heredocs, script-scope (s:),','line_number':33,'multiline':False]['text':'/ etc.','line_number':34,'multiline':False]['text':'/','line_number':35,'multiline':False]['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':36,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ @see |execute()|','line_number':38,'multiline':False]['text':'/ @see |nvim_command()|','line_number':39,'multiline':False]['text':'/ @see |nvim_cmd()|','line_number':40,'multiline':False]['text':'/','line_number':41,'multiline':False]['text':'/ @param src      Vimscript code','line_number':42,'multiline':False]['text':'/ @param opts  Optional parameters.','line_number':43,'multiline':False]['text':'/           - output: (boolean, default false) Whether to capture and return','line_number':44,'multiline':False]['text':'/                     all (non-error, non-shell |:!|) output.','line_number':45,'multiline':False]['text':'/ @param[out] err Error details (Vim error), if any','line_number':46,'multiline':False]['text':'/ @return Dictionary containing information about execution, with these keys:','line_number':47,'multiline':False]['text':'/       - output: (string|nil) Output if `opts.output` is true.','line_number':48,'multiline':False]['text':' prevent leading spaces','line_number':80,'multiline':False]['text':' Put msg_col back where it was, since nothing should have been written.','line_number':89,'multiline':False]['text':' redir usually (except :echon) prepends a newline.','line_number':105,'multiline':False]['text':' Caller will free the memory.','line_number':111,'multiline':False]['text':'/ Executes an Ex command.','line_number':120,'multiline':False]['text':'/','line_number':121,'multiline':False]['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':122,'multiline':False]['text':'/','line_number':123,'multiline':False]['text':'/ Prefer using |nvim_cmd()| or |nvim_exec2()| over this. To evaluate multiple lines of Vim script','line_number':124,'multiline':False]['text':'/ or an Ex command directly, use |nvim_exec2()|. To construct an Ex command using a structured','line_number':125,'multiline':False]['text':'/ format and then execute it, use |nvim_cmd()|. To modify an Ex command before evaluating it, use','line_number':126,'multiline':False]['text':'/ |nvim_parse_cmd()| in conjunction with |nvim_cmd()|.','line_number':127,'multiline':False]['text':'/','line_number':128,'multiline':False]['text':'/ @param command  Ex command string','line_number':129,'multiline':False]['text':'/ @param[out] err Error details (Vim error), if any','line_number':130,'multiline':False]['text':'/ Evaluates a Vimscript |expression|.','line_number':139,'multiline':False]['text':'/ Dictionaries and Lists are recursively expanded.','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':142,'multiline':False]['text':'/','line_number':143,'multiline':False]['text':'/ @param expr     Vimscript expression string','line_number':144,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':145,'multiline':False]['text':'/ @return         Evaluation result or expanded object','line_number':146,'multiline':False]['text':' recursion depth','line_number':150,'multiline':False]['text':' Initialize `force_abort`  and `suppress_errthrow` at the top level.','line_number':153,'multiline':False]['text':' `did_emsg` is set by emsg(), which cancels execution.','line_number':158,'multiline':False]['text':' Should never happen, try_end() (in TRY_WRAP) should get the error. #8371','line_number':174,'multiline':False]['text':'/ Calls a Vimscript function.','line_number':188,'multiline':False]['text':'/','line_number':189,'multiline':False]['text':'/ @param fn Function name','line_number':190,'multiline':False]['text':'/ @param args Function arguments','line_number':191,'multiline':False]['text':'/ @param self `self` dict, or NULL for non-dict functions','line_number':192,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':193,'multiline':False]['text':'/ @return Result of the function call','line_number':194,'multiline':False]['text':' recursion depth','line_number':197,'multiline':False]['text':' Convert the arguments in args from Object to typval_T values','line_number':206,'multiline':False]['text':' also used for freeing the variables','line_number':208,'multiline':False]['text':' Initialize `force_abort`  and `suppress_errthrow` at the top level.','line_number':213,'multiline':False]['text':' `did_emsg` is set by emsg(), which cancels execution.','line_number':218,'multiline':False]['text':' call_func() retval is deceptive, ignore it.  Instead we set `msg_list`','line_number':231,'multiline':False]['text':' (see above) to capture abort-causing non-exception errors.','line_number':232,'multiline':False]['text':'/ Calls a Vimscript function with the given arguments.','line_number':251,'multiline':False]['text':'/','line_number':252,'multiline':False]['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':253,'multiline':False]['text':'/','line_number':254,'multiline':False]['text':'/ @param fn       Function to call','line_number':255,'multiline':False]['text':'/ @param args     Function arguments packed in an Array','line_number':256,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':257,'multiline':False]['text':'/ @return Result of the function call','line_number':258,'multiline':False]['text':'/ Calls a Vimscript |Dictionary-function| with the given arguments.','line_number':265,'multiline':False]['text':'/','line_number':266,'multiline':False]['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':267,'multiline':False]['text':'/','line_number':268,'multiline':False]['text':'/ @param dict Dictionary, or String evaluating to a Vimscript |self| dict','line_number':269,'multiline':False]['text':'/ @param fn Name of the function defined on the Vimscript dict','line_number':270,'multiline':False]['text':'/ @param args Function arguments packed in an Array','line_number':271,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':272,'multiline':False]['text':'/ @return Result of the function call','line_number':273,'multiline':False]['text':' Evaluation of the string arg created a new dict or increased the','line_number':292,'multiline':False]['text':' refcount of a dict. Not necessary for a RPC dict.','line_number':293,'multiline':False]['text':'/ @cond DOXYGEN_NOT_A_FUNCTION','line_number':350,'multiline':False]['text':'/ @endcond','line_number':352,'multiline':False]['text':'/ Parse a Vimscript expression.','line_number':354,'multiline':False]['text':'/','line_number':355,'multiline':False]['text':'/ @param[in]  expr  Expression to parse. Always treated as a single line.','line_number':356,'multiline':False]['text':'/ @param[in]  flags Flags:','line_number':357,'multiline':False]['text':'/                    - "m" if multiple expressions in a row are allowed (only','line_number':358,'multiline':False]['text':'/                      the first one will be parsed),','line_number':359,'multiline':False]['text':'/                    - "E" if EOC tokens are not allowed (determines whether','line_number':360,'multiline':False]['text':'/                      they will stop parsing process or be recognized as an','line_number':361,'multiline':False]['text':'/                      operator/space, though also yielding an error).','line_number':362,'multiline':False]['text':'/                    - "l" when needing to start parsing with lvalues for','line_number':363,'multiline':False]['text':'/                      ":let" or ":for".','line_number':364,'multiline':False]['text':'/                    Common flag sets:','line_number':365,'multiline':False]['text':'/                    - "m" to parse like for ":echo".','line_number':366,'multiline':False]['text':'/                    - "E" to parse like for "<C-r>=".','line_number':367,'multiline':False]['text':'/                    - empty string for ":call".','line_number':368,'multiline':False]['text':'/                    - "lm" to parse for ":let".','line_number':369,'multiline':False]['text':'/ @param[in]  highlight  If true, return value will also include "highlight"','line_number':370,'multiline':False]['text':'/                        key containing array of 4-tuples (arrays) (Integer,','line_number':371,'multiline':False]['text':'/                        Integer, Integer, String), where first three numbers','line_number':372,'multiline':False]['text':'/                        define the highlighted region and represent line,','line_number':373,'multiline':False]['text':'/                        starting column and ending column (latter exclusive:','line_number':374,'multiline':False]['text':'/                        one should highlight region [start_col, end_col)).','line_number':375,'multiline':False]['text':'/','line_number':376,'multiline':False]['text':'/ @return','line_number':377,'multiline':False]['text':'/      - AST: top-level dictionary with these keys:','line_number':378,'multiline':False]['text':'/        - "error": Dictionary with error, present only if parser saw some','line_number':379,'multiline':False]['text':'/                 error. Contains the following keys:','line_number':380,'multiline':False]['text':'/          - "message": String, error message in printf format, translated.','line_number':381,'multiline':False]['text':'/                       Must contain exactly one "%.*s".','line_number':382,'multiline':False]['text':'/          - "arg": String, error message argument.','line_number':383,'multiline':False]['text':'/        - "len": Amount of bytes successfully parsed. With flags equal to ""','line_number':384,'multiline':False]['text':'/                 that should be equal to the length of expr string.','line_number':385,'multiline':False]['text':'/                 (“Successfully parsed” here means “participated in AST','line_number':386,'multiline':False]['text':'/                  creation”, not “till the first error”.)','line_number':387,'multiline':False]['text':'/        - "ast": AST, either nil or a dictionary with these keys:','line_number':388,'multiline':False]['text':'/          - "type": node type, one of the value names from ExprASTNodeType','line_number':389,'multiline':False]['text':'/                    stringified without "kExprNode" prefix.','line_number':390,'multiline':False]['text':'/          - "start": a pair [line, column] describing where node is "started"','line_number':391,'multiline':False]['text':'/                     where "line" is always 0 (will not be 0 if you will be','line_number':392,'multiline':False]['text':'/                     using this API on e.g. ":let", but that is not','line_number':393,'multiline':False]['text':'/                     present yet). Both elements are Integers.','line_number':394,'multiline':False]['text':'/          - "len": “length” of the node. This and "start" are there for','line_number':395,'multiline':False]['text':'/                   debugging purposes primary (debugging parser and providing','line_number':396,'multiline':False]['text':'/                   debug information).','line_number':397,'multiline':False]['text':'/          - "children": a list of nodes described in top/"ast". There always','line_number':398,'multiline':False]['text':'/                        is zero, one or two children, key will not be present','line_number':399,'multiline':False]['text':'/                        if node has no children. Maximum number of children','line_number':400,'multiline':False]['text':'/                        may be found in node_maxchildren array.','line_number':401,'multiline':False]['text':'/      - Local values (present only for certain nodes):','line_number':402,'multiline':False]['text':'/        - "scope": a single Integer, specifies scope for "Option" and','line_number':403,'multiline':False]['text':'/                   "PlainIdentifier" nodes. For "Option" it is one of','line_number':404,'multiline':False]['text':'/                   ExprOptScope values, for "PlainIdentifier" it is one of','line_number':405,'multiline':False]['text':'/                   ExprVarScope values.','line_number':406,'multiline':False]['text':'/        - "ident": identifier (without scope, if any), present for "Option",','line_number':407,'multiline':False]['text':'/                   "PlainIdentifier", "PlainKey" and "Environment" nodes.','line_number':408,'multiline':False]['text':'/        - "name": Integer, register name (one character) or -1. Only present','line_number':409,'multiline':False]['text':'/                for "Register" nodes.','line_number':410,'multiline':False]['text':'/        - "cmp_type": String, comparison type, one of the value names from','line_number':411,'multiline':False]['text':'/                      ExprComparisonType, stringified without "kExprCmp"','line_number':412,'multiline':False]['text':'/                      prefix. Only present for "Comparison" nodes.','line_number':413,'multiline':False]['text':'/        - "ccs_strategy": String, case comparison strategy, one of the','line_number':414,'multiline':False]['text':'/                          value names from ExprCaseCompareStrategy,','line_number':415,'multiline':False]['text':'/                          stringified without "kCCStrategy" prefix. Only','line_number':416,'multiline':False]['text':'/                          present for "Comparison" nodes.','line_number':417,'multiline':False]['text':'/        - "augmentation": String, augmentation type for "Assignment" nodes.','line_number':418,'multiline':False]['text':'/                          Is either an empty string, "Add", "Subtract" or','line_number':419,'multiline':False]['text':'/                          "Concat" for "=", "+=", "-=" or ".=" respectively.','line_number':420,'multiline':False]['text':'/        - "invert": Boolean, true if result of comparison needs to be','line_number':421,'multiline':False]['text':'/                    inverted. Only present for "Comparison" nodes.','line_number':422,'multiline':False]['text':'/        - "ivalue": Integer, integer value for "Integer" nodes.','line_number':423,'multiline':False]['text':'/        - "fvalue": Float, floating-point value for "Float" nodes.','line_number':424,'multiline':False]['text':'/        - "svalue": String, value for "SingleQuotedString" and','line_number':425,'multiline':False]['text':'/                    "DoubleQuotedString" nodes.','line_number':426,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':427,'multiline':False]['text':' "ast", "len"','line_number':466,'multiline':False]['text':' "error"','line_number':467,'multiline':False]['text':' "highlight"','line_number':468,'multiline':False]['text':' Walk over the AST, freeing nodes in process.','line_number':540,'multiline':False]['text':' "type", "start" and "len"  // NOLINT(bugprone-misplaced-widening-cast)','line_number':555,'multiline':False]['text':' "children"','line_number':556,'multiline':False]['text':' "scope"','line_number':558,'multiline':False]['text':' "ident"','line_number':562,'multiline':False]['text':' "name"','line_number':563,'multiline':False]['text':' "cmp_type", "ccs_strategy", "invert"','line_number':564,'multiline':False]['text':' "ivalue"','line_number':566,'multiline':False]['text':' "fvalue"','line_number':567,'multiline':False]['text':' "svalue"','line_number':569,'multiline':False]['text':' "augmentation"','line_number':570,'multiline':False]['text':' Should be a no-op actually, leaving it in case non-nodes will need to be','line_number':767,'multiline':False]['text':' freed later.','line_number':768,'multiline':False]