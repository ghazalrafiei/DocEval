['text':'/ @deprecated Use nvim_exec2() instead.','line_number':29,'multiline':False]['text':'/ @see nvim_exec2','line_number':30,'multiline':False]['text':'/ @deprecated','line_number':39,'multiline':False]['text':'/ @see nvim_exec2','line_number':40,'multiline':False]['text':'/ @deprecated Use nvim_exec_lua() instead.','line_number':49,'multiline':False]['text':'/ @see nvim_exec_lua','line_number':50,'multiline':False]['text':'/ Gets the buffer number','line_number':59,'multiline':False]['text':'/','line_number':60,'multiline':False]['text':'/ @deprecated The buffer number now is equal to the object id,','line_number':61,'multiline':False]['text':'/             so there is no need to use this function.','line_number':62,'multiline':False]['text':'/','line_number':63,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':64,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':65,'multiline':False]['text':'/ @return Buffer number','line_number':66,'multiline':False]['text':'/ Clears highlights and virtual text from namespace and range of lines','line_number':80,'multiline':False]['text':'/','line_number':81,'multiline':False]['text':'/ @deprecated use |nvim_buf_clear_namespace()|.','line_number':82,'multiline':False]['text':'/','line_number':83,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':84,'multiline':False]['text':'/ @param ns_id      Namespace to clear, or -1 to clear all.','line_number':85,'multiline':False]['text':'/ @param line_start Start of range of lines to clear','line_number':86,'multiline':False]['text':'/ @param line_end   End of range of lines to clear (exclusive) or -1 to clear','line_number':87,'multiline':False]['text':'/                   to end of file.','line_number':88,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':89,'multiline':False]['text':'/ Set the virtual text (annotation) for a buffer line.','line_number':98,'multiline':False]['text':'/','line_number':99,'multiline':False]['text':'/ @deprecated use nvim_buf_set_extmark to use full virtual text','line_number':100,'multiline':False]['text':'/             functionality.','line_number':101,'multiline':False]['text':'/','line_number':102,'multiline':False]['text':'/ The text will be placed after the buffer text. Virtual text will never','line_number':103,'multiline':False]['text':'/ cause reflow, rather virtual text will be truncated at the end of the screen','line_number':104,'multiline':False]['text':'/ line. The virtual text will begin one cell (|lcs-eol| or space) after the','line_number':105,'multiline':False]['text':'/ ordinary text.','line_number':106,'multiline':False]['text':'/','line_number':107,'multiline':False]['text':'/ Namespaces are used to support batch deletion/updating of virtual text.','line_number':108,'multiline':False]['text':'/ To create a namespace, use |nvim_create_namespace()|. Virtual text is','line_number':109,'multiline':False]['text':'/ cleared using |nvim_buf_clear_namespace()|. The same `ns_id` can be used for','line_number':110,'multiline':False]['text':'/ both virtual text and highlights added by |nvim_buf_add_highlight()|, both','line_number':111,'multiline':False]['text':'/ can then be cleared with a single call to |nvim_buf_clear_namespace()|. If','line_number':112,'multiline':False]['text':'/ the virtual text never will be cleared by an API call, pass `ns_id = -1`.','line_number':113,'multiline':False]['text':'/','line_number':114,'multiline':False]['text':'/ As a shorthand, `ns_id = 0` can be used to create a new namespace for the','line_number':115,'multiline':False]['text':'/ virtual text, the allocated id is then returned.','line_number':116,'multiline':False]['text':'/','line_number':117,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':118,'multiline':False]['text':'/ @param ns_id      Namespace to use or 0 to create a namespace,','line_number':119,'multiline':False]['text':'/                   or -1 for a ungrouped annotation','line_number':120,'multiline':False]['text':'/ @param line       Line to annotate with virtual text (zero-indexed)','line_number':121,'multiline':False]['text':'/ @param chunks     A list of [text, hl_group] arrays, each representing a','line_number':122,'multiline':False]['text':'/                   text chunk with specified highlight. `hl_group` element','line_number':123,'multiline':False]['text':'/                   can be omitted for no highlight.','line_number':124,'multiline':False]['text':'/ @param opts       Optional parameters. Currently not used.','line_number':125,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':126,'multiline':False]['text':'/ @return The ns_id that was used','line_number':127,'multiline':False]['text':'/ Gets a highlight definition by id. |hlID()|','line_number':173,'multiline':False]['text':'/','line_number':174,'multiline':False]['text':'/ @deprecated use |nvim_get_hl()| instead','line_number':175,'multiline':False]['text':'/','line_number':176,'multiline':False]['text':'/ @param hl_id Highlight id as returned by |hlID()|','line_number':177,'multiline':False]['text':'/ @param rgb Export RGB colors','line_number':178,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':179,'multiline':False]['text':'/ @return Highlight definition map','line_number':180,'multiline':False]['text':'/ @see nvim_get_hl_by_name','line_number':181,'multiline':False]['text':'/ Gets a highlight definition by name.','line_number':194,'multiline':False]['text':'/','line_number':195,'multiline':False]['text':'/ @deprecated use |nvim_get_hl()| instead','line_number':196,'multiline':False]['text':'/','line_number':197,'multiline':False]['text':'/ @param name Highlight group name','line_number':198,'multiline':False]['text':'/ @param rgb Export RGB colors','line_number':199,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':200,'multiline':False]['text':'/ @return Highlight definition map','line_number':201,'multiline':False]['text':'/ @see nvim_get_hl_by_id','line_number':202,'multiline':False]['text':'/ Inserts a sequence of lines to a buffer at a certain index','line_number':216,'multiline':False]['text':'/','line_number':217,'multiline':False]['text':'/ @deprecated use nvim_buf_set_lines(buffer, lnum, lnum, true, lines)','line_number':218,'multiline':False]['text':'/','line_number':219,'multiline':False]['text':'/ @param buffer     Buffer handle','line_number':220,'multiline':False]['text':'/ @param lnum       Insert the lines after `lnum`. If negative, appends to','line_number':221,'multiline':False]['text':'/                   the end of the buffer.','line_number':222,'multiline':False]['text':'/ @param lines      Array of lines','line_number':223,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':224,'multiline':False]['text':' "lnum" will be the index of the line after inserting,','line_number':228,'multiline':False]['text':' no matter if it is negative or not','line_number':229,'multiline':False]['text':'/ Gets a buffer line','line_number':233,'multiline':False]['text':'/','line_number':234,'multiline':False]['text':'/ @deprecated use nvim_buf_get_lines instead.','line_number':235,'multiline':False]['text':'/             for positive indices (including 0) use','line_number':236,'multiline':False]['text':'/                 "nvim_buf_get_lines(buffer, index, index+1, true)"','line_number':237,'multiline':False]['text':'/             for negative indices use','line_number':238,'multiline':False]['text':'/                 "nvim_buf_get_lines(buffer, index-1, index, true)"','line_number':239,'multiline':False]['text':'/','line_number':240,'multiline':False]['text':'/ @param buffer   Buffer handle','line_number':241,'multiline':False]['text':'/ @param index    Line index','line_number':242,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':243,'multiline':False]['text':'/ @return Line string','line_number':244,'multiline':False]['text':'/ Sets a buffer line','line_number':262,'multiline':False]['text':'/','line_number':263,'multiline':False]['text':'/ @deprecated use nvim_buf_set_lines instead.','line_number':264,'multiline':False]['text':'/             for positive indices use','line_number':265,'multiline':False]['text':'/                 "nvim_buf_set_lines(buffer, index, index+1, true, [line])"','line_number':266,'multiline':False]['text':'/             for negative indices use','line_number':267,'multiline':False]['text':'/                 "nvim_buf_set_lines(buffer, index-1, index, true, [line])"','line_number':268,'multiline':False]['text':'/','line_number':269,'multiline':False]['text':'/ @param buffer   Buffer handle','line_number':270,'multiline':False]['text':'/ @param index    Line index','line_number':271,'multiline':False]['text':'/ @param line     Contents of the new line','line_number':272,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':273,'multiline':False]['text':'/ Deletes a buffer line','line_number':283,'multiline':False]['text':'/','line_number':284,'multiline':False]['text':'/ @deprecated use nvim_buf_set_lines instead.','line_number':285,'multiline':False]['text':'/             for positive indices use','line_number':286,'multiline':False]['text':'/                 "nvim_buf_set_lines(buffer, index, index+1, true, [])"','line_number':287,'multiline':False]['text':'/             for negative indices use','line_number':288,'multiline':False]['text':'/                 "nvim_buf_set_lines(buffer, index-1, index, true, [])"','line_number':289,'multiline':False]['text':'/ @param buffer   buffer handle','line_number':290,'multiline':False]['text':'/ @param index    line index','line_number':291,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':292,'multiline':False]['text':'/ Retrieves a line range from the buffer','line_number':301,'multiline':False]['text':'/','line_number':302,'multiline':False]['text':'/ @deprecated use nvim_buf_get_lines(buffer, newstart, newend, false)','line_number':303,'multiline':False]['text':'/             where newstart = start + int(not include_start) - int(start < 0)','line_number':304,'multiline':False]['text':'/                   newend = end + int(include_end) - int(end < 0)','line_number':305,'multiline':False]['text':'/                   int(bool) = 1 if bool is true else 0','line_number':306,'multiline':False]['text':'/ @param buffer         Buffer handle','line_number':307,'multiline':False]['text':'/ @param start          First line index','line_number':308,'multiline':False]['text':'/ @param end            Last line index','line_number':309,'multiline':False]['text':'/ @param include_start  True if the slice includes the `start` parameter','line_number':310,'multiline':False]['text':'/ @param include_end    True if the slice includes the `end` parameter','line_number':311,'multiline':False]['text':'/ @param[out] err       Error details, if any','line_number':312,'multiline':False]['text':'/ @return Array of lines','line_number':313,'multiline':False]['text':'/ Replaces a line range on the buffer','line_number':327,'multiline':False]['text':'/','line_number':328,'multiline':False]['text':'/ @deprecated use nvim_buf_set_lines(buffer, newstart, newend, false, lines)','line_number':329,'multiline':False]['text':'/             where newstart = start + int(not include_start) + int(start < 0)','line_number':330,'multiline':False]['text':'/                   newend = end + int(include_end) + int(end < 0)','line_number':331,'multiline':False]['text':'/                   int(bool) = 1 if bool is true else 0','line_number':332,'multiline':False]['text':'/','line_number':333,'multiline':False]['text':'/ @param buffer         Buffer handle, or 0 for current buffer','line_number':334,'multiline':False]['text':'/ @param start          First line index','line_number':335,'multiline':False]['text':'/ @param end            Last line index','line_number':336,'multiline':False]['text':'/ @param include_start  True if the slice includes the `start` parameter','line_number':337,'multiline':False]['text':'/ @param include_end    True if the slice includes the `end` parameter','line_number':338,'multiline':False]['text':'/ @param replacement    Array of lines to use as replacement (0-length','line_number':339,'multiline':False]['text':'                        array will delete the line range)','line_number':340,'multiline':False]['text':'/ @param[out] err       Error details, if any','line_number':341,'multiline':False]['text':'/ Sets a buffer-scoped (b:) variable','line_number':351,'multiline':False]['text':'/','line_number':352,'multiline':False]['text':'/ @deprecated','line_number':353,'multiline':False]['text':'/','line_number':354,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':355,'multiline':False]['text':'/ @param name       Variable name','line_number':356,'multiline':False]['text':'/ @param value      Variable value','line_number':357,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':358,'multiline':False]['text':'/ @return Old value or nil if there was no previous value.','line_number':359,'multiline':False]['text':'/','line_number':360,'multiline':False]['text':'/         @warning It may return nil if there was no previous value','line_number':361,'multiline':False]['text':'/                  or if previous value was `v:null`.','line_number':362,'multiline':False]['text':'/ Removes a buffer-scoped (b:) variable','line_number':375,'multiline':False]['text':'/','line_number':376,'multiline':False]['text':'/ @deprecated','line_number':377,'multiline':False]['text':'/','line_number':378,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':379,'multiline':False]['text':'/ @param name       Variable name','line_number':380,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':381,'multiline':False]['text':'/ @return Old value','line_number':382,'multiline':False]['text':'/ Sets a window-scoped (w:) variable','line_number':395,'multiline':False]['text':'/','line_number':396,'multiline':False]['text':'/ @deprecated','line_number':397,'multiline':False]['text':'/','line_number':398,'multiline':False]['text':'/ @param window   Window handle, or 0 for current window','line_number':399,'multiline':False]['text':'/ @param name     Variable name','line_number':400,'multiline':False]['text':'/ @param value    Variable value','line_number':401,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':402,'multiline':False]['text':'/ @return Old value or nil if there was no previous value.','line_number':403,'multiline':False]['text':'/','line_number':404,'multiline':False]['text':'/         @warning It may return nil if there was no previous value','line_number':405,'multiline':False]['text':'/                  or if previous value was `v:null`.','line_number':406,'multiline':False]['text':'/ Removes a window-scoped (w:) variable','line_number':419,'multiline':False]['text':'/','line_number':420,'multiline':False]['text':'/ @deprecated','line_number':421,'multiline':False]['text':'/','line_number':422,'multiline':False]['text':'/ @param window   Window handle, or 0 for current window','line_number':423,'multiline':False]['text':'/ @param name     variable name','line_number':424,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':425,'multiline':False]['text':'/ @return Old value','line_number':426,'multiline':False]['text':'/ Sets a tab-scoped (t:) variable','line_number':439,'multiline':False]['text':'/','line_number':440,'multiline':False]['text':'/ @deprecated','line_number':441,'multiline':False]['text':'/','line_number':442,'multiline':False]['text':'/ @param tabpage  Tabpage handle, or 0 for current tabpage','line_number':443,'multiline':False]['text':'/ @param name     Variable name','line_number':444,'multiline':False]['text':'/ @param value    Variable value','line_number':445,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':446,'multiline':False]['text':'/ @return Old value or nil if there was no previous value.','line_number':447,'multiline':False]['text':'/','line_number':448,'multiline':False]['text':'/         @warning It may return nil if there was no previous value','line_number':449,'multiline':False]['text':'/                  or if previous value was `v:null`.','line_number':450,'multiline':False]['text':'/ Removes a tab-scoped (t:) variable','line_number':463,'multiline':False]['text':'/','line_number':464,'multiline':False]['text':'/ @deprecated','line_number':465,'multiline':False]['text':'/','line_number':466,'multiline':False]['text':'/ @param tabpage  Tabpage handle, or 0 for current tabpage','line_number':467,'multiline':False]['text':'/ @param name     Variable name','line_number':468,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':469,'multiline':False]['text':'/ @return Old value','line_number':470,'multiline':False]['text':'/ @deprecated','line_number':483,'multiline':False]['text':'/ @see nvim_set_var','line_number':484,'multiline':False]['text':'/ @warning May return nil if there was no previous value','line_number':485,'multiline':False]['text':'/          OR if previous value was `v:null`.','line_number':486,'multiline':False]['text':'/ @return Old value or nil if there was no previous value.','line_number':487,'multiline':False]['text':'/ @deprecated','line_number':494,'multiline':False]['text':'/ @see nvim_del_var','line_number':495,'multiline':False]['text':'/ Gets the option information for one option','line_number':507,'multiline':False]['text':'/','line_number':508,'multiline':False]['text':'/ @deprecated Use @ref nvim_get_option_info2 instead.','line_number':509,'multiline':False]['text':'/','line_number':510,'multiline':False]['text':'/ @param          name Option name','line_number':511,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':512,'multiline':False]['text':'/ @return         Option Information','line_number':513,'multiline':False]['text':'/ Sets the global value of an option.','line_number':521,'multiline':False]['text':'/','line_number':522,'multiline':False]['text':'/ @deprecated','line_number':523,'multiline':False]['text':'/ @param channel_id','line_number':524,'multiline':False]['text':'/ @param name     Option name','line_number':525,'multiline':False]['text':'/ @param value    New option value','line_number':526,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':527,'multiline':False]['text':'/ Gets the global value of an option.','line_number':535,'multiline':False]['text':'/','line_number':536,'multiline':False]['text':'/ @deprecated','line_number':537,'multiline':False]['text':'/ @param name     Option name','line_number':538,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':539,'multiline':False]['text':'/ @return         Option value (global)','line_number':540,'multiline':False]['text':'/ Gets a buffer option value','line_number':548,'multiline':False]['text':'/','line_number':549,'multiline':False]['text':'/ @deprecated','line_number':550,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':551,'multiline':False]['text':'/ @param name       Option name','line_number':552,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':553,'multiline':False]['text':'/ @return Option value','line_number':554,'multiline':False]['text':'/ Sets a buffer option value. Passing `nil` as value deletes the option (only','line_number':568,'multiline':False]['text':'/ works if there's a global fallback)','line_number':569,'multiline':False]['text':'/','line_number':570,'multiline':False]['text':'/ @deprecated','line_number':571,'multiline':False]['text':'/ @param channel_id','line_number':572,'multiline':False]['text':'/ @param buffer     Buffer handle, or 0 for current buffer','line_number':573,'multiline':False]['text':'/ @param name       Option name','line_number':574,'multiline':False]['text':'/ @param value      Option value','line_number':575,'multiline':False]['text':'/ @param[out] err   Error details, if any','line_number':576,'multiline':False]['text':'/ Gets a window option value','line_number':590,'multiline':False]['text':'/','line_number':591,'multiline':False]['text':'/ @deprecated','line_number':592,'multiline':False]['text':'/ @param window   Window handle, or 0 for current window','line_number':593,'multiline':False]['text':'/ @param name     Option name','line_number':594,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':595,'multiline':False]['text':'/ @return Option value','line_number':596,'multiline':False]['text':'/ Sets a window option value. Passing `nil` as value deletes the option (only','line_number':610,'multiline':False]['text':'/ works if there's a global fallback)','line_number':611,'multiline':False]['text':'/','line_number':612,'multiline':False]['text':'/ @deprecated','line_number':613,'multiline':False]['text':'/ @param channel_id','line_number':614,'multiline':False]['text':'/ @param window   Window handle, or 0 for current window','line_number':615,'multiline':False]['text':'/ @param name     Option name','line_number':616,'multiline':False]['text':'/ @param value    Option value','line_number':617,'multiline':False]['text':'/ @param[out] err Error details, if any','line_number':618,'multiline':False]['text':'/ Gets the value of a global or local (buffer, window) option.','line_number':632,'multiline':False]['text':'/','line_number':633,'multiline':False]['text':'/ @param[in]   from       Pointer to buffer or window for local option value.','line_number':634,'multiline':False]['text':'/ @param       req_scope  Requested option scope. See OptReqScope in option.h.','line_number':635,'multiline':False]['text':'/ @param       name       The option name.','line_number':636,'multiline':False]['text':'/ @param[out]  err        Details of an error that may have occurred.','line_number':637,'multiline':False]['text':'/','line_number':638,'multiline':False]['text':'/ @return  the option value.','line_number':639,'multiline':False]['text':'/ Sets the value of a global or local (buffer, window) option.','line_number':658,'multiline':False]['text':'/','line_number':659,'multiline':False]['text':'/ @param[in]   to         Pointer to buffer or window for local option value.','line_number':660,'multiline':False]['text':'/ @param       req_scope  Requested option scope. See OptReqScope in option.h.','line_number':661,'multiline':False]['text':'/ @param       name       The option name.','line_number':662,'multiline':False]['text':'/ @param       value      New option value.','line_number':663,'multiline':False]['text':'/ @param[out]  err        Details of an error that may have occurred.','line_number':664,'multiline':False]['text':' Handle invalid option value type.','line_number':680,'multiline':False]['text':' Don't use `name` in the error message here, because `name` can be any String.','line_number':681,'multiline':False]['text':' No need to check if value type actually matches the types for the option, as set_option_value()','line_number':682,'multiline':False]['text':' already handles that.','line_number':683,'multiline':False]['text':' For global-win-local options -> setlocal','line_number':689,'multiline':False]['text':' For        win-local options -> setglobal and setlocal (opt_flags == 0)','line_number':690,'multiline':False]