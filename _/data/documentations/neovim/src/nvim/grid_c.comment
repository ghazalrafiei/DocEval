['text':' Most of the routines in this file perform screen (grid) manipulations. The','line_number':1,'multiline':False]['text':' given operation is performed physically on the screen. The corresponding','line_number':2,'multiline':False]['text':' change is also made to the internal screen image. In this way, the editor','line_number':3,'multiline':False]['text':' anticipates the effect of editing changes on the appearance of the screen.','line_number':4,'multiline':False]['text':' That way, when we call update_screen() a complete redraw isn't usually','line_number':5,'multiline':False]['text':' necessary. Another advantage is that we can keep adding code to anticipate','line_number':6,'multiline':False]['text':' screen changes, and in the meantime, everything still works.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' The grid_*() functions write to the screen and handle updating grid->lines[].','line_number':9,'multiline':False]['text':' temporary buffer for rendering a single screenline, so it can be','line_number':37,'multiline':False]['text':' compared with previous contents to calculate smallest delta.','line_number':38,'multiline':False]['text':' Per-cell attributes','line_number':39,'multiline':False]['text':' Used to cache glyphs which doesn't fit an a sizeof(schar_T) length UTF-8 string.','line_number':42,'multiline':False]['text':' Then it instead stores an index into glyph_cache.keys[] which is a flat char array.','line_number':43,'multiline':False]['text':' The hash part is used by schar_from_buf() to quickly lookup glyphs which already','line_number':44,'multiline':False]['text':' has been interned. schar_get() should used to convert a schar_T value','line_number':45,'multiline':False]['text':' back to a string buffer.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' The maximum byte size of a glyph is MAX_SCHAR_SIZE (including the final NUL).','line_number':48,'multiline':False]['text':'/ Determine if dedicated window grid should be used or the default_grid','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ If UI did not request multigrid support, draw all windows on the','line_number':53,'multiline':False]['text':'/ default_grid.','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/ NB: this function can only been used with window grids in a context where','line_number':56,'multiline':False]['text':'/ win_grid_alloc already has been called!','line_number':57,'multiline':False]['text':'/','line_number':58,'multiline':False]['text':'/ If the default_grid is used, adjust window relative positions to global','line_number':59,'multiline':False]['text':'/ screen positions.','line_number':60,'multiline':False]['text':'/ @param buf need not be NUL terminated, but may not contain embedded NULs.','line_number':78,'multiline':False]['text':'/','line_number':79,'multiline':False]['text':'/ caller must ensure len < MAX_SCHAR_SIZE (not =, as NUL needs a byte)','line_number':80,'multiline':False]['text':'/ Check if cache is full, and if it is, clear it.','line_number':102,'multiline':False]['text':'/','line_number':103,'multiline':False]['text':'/ This should normally only be called in update_screen()','line_number':104,'multiline':False]['text':'/','line_number':105,'multiline':False]['text':'/ @return true if cache was clered, and all your screen buffers now are hosed','line_number':106,'multiline':False]['text':'/ and you need to use UPD_CLEAR','line_number':107,'multiline':False]['text':' note: critical max is really (1<<24)-1. This gives us some marginal','line_number':110,'multiline':False]['text':' until next time update_screen() is called','line_number':111,'multiline':False]['text':'/ gets first raw UTF-8 byte of an schar','line_number':152,'multiline':False]['text':'/ @return ascii char or NUL if not ascii','line_number':166,'multiline':False]['text':'/ Get the first two codepoints of an schar, or NUL when not available','line_number':182,'multiline':False]['text':' quickly skip over non-arabic text','line_number':202,'multiline':False]['text':' unchanged','line_number':228,'multiline':False]['text':' Too bigly, discard one code-point.','line_number':243,'multiline':False]['text':' This should be enough as c0 cannot grow more than from 2 to 4 bytes','line_number':244,'multiline':False]['text':' (base arabic to extended arabic)','line_number':245,'multiline':False]['text':'/ clear a line in the grid starting at "off" until "width" characters','line_number':258,'multiline':False]['text':'/ are cleared.','line_number':259,'multiline':False]['text':'/ Get a single character directly from grid.chars','line_number':280,'multiline':False]['text':'/','line_number':281,'multiline':False]['text':'/ @param[out] attrp  set to the character's attribute (optional)','line_number':282,'multiline':False]['text':' safety check','line_number':287,'multiline':False]['text':'/ Start a group of grid_line_puts calls that builds a single grid line.','line_number':306,'multiline':False]['text':'/','line_number':307,'multiline':False]['text':'/ Must be matched with a grid_line_flush call before moving to','line_number':308,'multiline':False]['text':'/ another line.','line_number':309,'multiline':False]['text':' Current batch must not depend on previous contents of linebuf_char.','line_number':325,'multiline':False]['text':' Set invalid values which will cause assertion failures later if they are used.','line_number':326,'multiline':False]['text':'/ Get present char from current rendered screen line','line_number':332,'multiline':False]['text':'/','line_number':333,'multiline':False]['text':'/ This indicates what already is on screen, not the pending render buffer.','line_number':334,'multiline':False]['text':'/','line_number':335,'multiline':False]['text':'/ @return char or space if out of bounds','line_number':336,'multiline':False]['text':' NUL is a very special value (right-half of double width), space is True Neutralâ„¢','line_number':347,'multiline':False]['text':' TODO(bfredl): Y U NO DOUBLEWIDTH?','line_number':363,'multiline':False]['text':'/ Put string "text" at "col" position relative to the grid line from the','line_number':368,'multiline':False]['text':'/ recent grid_line_start() call.','line_number':369,'multiline':False]['text':'/','line_number':370,'multiline':False]['text':'/ @param textlen length of string or -1 to use strlen(text)','line_number':371,'multiline':False]['text':'/ Note: only outputs within one row!','line_number':372,'multiline':False]['text':'/','line_number':373,'multiline':False]['text':'/ @return number of grid cells used','line_number':374,'multiline':False]['text':' check if this is the first byte of a multibyte','line_number':386,'multiline':False]['text':' Only 1 cell left, but character requires 2 cells:','line_number':402,'multiline':False]['text':' display a '>' in the last column to avoid wrapping. */','line_number':403,'multiline':False]['text':' When at the start of the text and overwriting the right half of a','line_number':408,'multiline':False]['text':' two-cell character in the same grid, truncate that into a '>'.','line_number':409,'multiline':False]['text':'/ move the cursor to a position in a currently rendered line.','line_number':454,'multiline':False]['text':' Mirrors are more fun than television.','line_number':474,'multiline':False]['text':' for attr and vcol: assumes doublewidth chars are self-consistent','line_number':488,'multiline':False]['text':'/ End a group of grid_line_puts calls and send the screen buffer to the UI layer.','line_number':505,'multiline':False]['text':'/ flush grid line but only if on a valid row','line_number':519,'multiline':False]['text':'/','line_number':520,'multiline':False]['text':'/ This is a stopgap until message.c has been refactored to behave','line_number':521,'multiline':False]['text':'/ Fill the grid from "start_row" to "end_row" (exclusive), from "start_col"','line_number':535,'multiline':False]['text':'/ to "end_col" (exclusive) with character "c1" in first column followed by','line_number':536,'multiline':False]['text':'/ "c2" in the other columns.  Use attributes "attr".','line_number':537,'multiline':False]['text':' safety check','line_number':548,'multiline':False]['text':' nothing to do','line_number':556,'multiline':False]['text':' When drawing over the right half of a double-wide char clear','line_number':566,'multiline':False]['text':' out the left half.  When drawing over the left half of a','line_number':567,'multiline':False]['text':' double wide-char clear out the right half.  Only needed in a','line_number':568,'multiline':False]['text':' terminal.','line_number':569,'multiline':False]['text':' Note: assumes msg_grid is the only throttled grid','line_number':602,'multiline':False]['text':'/ Check whether the given character needs redrawing:','line_number':621,'multiline':False]['text':'/ - the (first byte of the) character is different','line_number':622,'multiline':False]['text':'/ - the attributes are different','line_number':623,'multiline':False]['text':'/ - the character is multi-byte and the next byte is different','line_number':624,'multiline':False]['text':'/ - the character is two cells wide and the second cell differs.','line_number':625,'multiline':False]['text':' TODO(bfredl): what in the actual fuck','line_number':633,'multiline':False]['text':'/ Move one buffered line to the window grid, but only the characters that','line_number':637,'multiline':False]['text':'/ have actually changed.  Handle insert/delete character.','line_number':638,'multiline':False]['text':'/ "coloff" gives the first column on the grid for this line.','line_number':639,'multiline':False]['text':'/ "endcol" gives the columns where valid characters are.','line_number':640,'multiline':False]['text':'/ "clear_width" is the width of the window.  It's > 0 if the rest of the line','line_number':641,'multiline':False]['text':'/ needs to be cleared, negative otherwise.','line_number':642,'multiline':False]['text':'/ "rl" is true for rightleft text, like a window with 'rightleft' option set','line_number':643,'multiline':False]['text':'/    When true and "clear_width" > 0, clear columns 0 to "endcol"','line_number':644,'multiline':False]['text':'/    When false and "clear_width" > 0, clear columns "endcol" to "clear_width"','line_number':645,'multiline':False]['text':'/ If "wrap" is true, then hint to the UI that "row" contains a line','line_number':646,'multiline':False]['text':'/ which has wrapped into the next row.','line_number':647,'multiline':False]['text':' redraw_this for next character','line_number':651,'multiline':False]['text':' 1: normal char','line_number':653,'multiline':False]['text':' 2: occupies two display cells','line_number':654,'multiline':False]['text':' TODO(bfredl): check all callsites and eliminate','line_number':656,'multiline':False]['text':' Check for illegal col, just in case','line_number':657,'multiline':False]['text':' Safety check. Avoids clang warnings down the call stack.','line_number':662,'multiline':False]['text':' When at the start of the text and overwriting the right half of a','line_number':672,'multiline':False]['text':' two-cell character in the same grid, truncate that into a '>'.','line_number':673,'multiline':False]['text':' Clear rest first, because it's left of the text.','line_number':680,'multiline':False]['text':' Does character need redraw?','line_number':713,'multiline':False]['text':' When writing a single-width character over a double-width','line_number':724,'multiline':False]['text':' character and at the end of the redrawn text, need to clear out','line_number':725,'multiline':False]['text':' the right half of the old character.','line_number':726,'multiline':False]['text':' Also required when writing the right half of a double-width','line_number':727,'multiline':False]['text':' char over the left half of an existing one','line_number':728,'multiline':False]['text':' For simplicity set the attributes of second half of a','line_number':740,'multiline':False]['text':' double-wide character equal to the first half.','line_number':741,'multiline':False]['text':' Clear the second half of a double-wide character of which the left','line_number':756,'multiline':False]['text':' half was overwritten with a single-wide character.','line_number':757,'multiline':False]['text':' blank out the rest of the line','line_number':764,'multiline':False]['text':' TODO(bfredl): we could cache winline widths','line_number':765,'multiline':False]['text':' When drawing over the right half of a double-wide char clear out the','line_number':795,'multiline':False]['text':' left half.  Only needed in a terminal.','line_number':796,'multiline':False]['text':' TODO(bfredl): really get rid of the extra pseudo terminal in message.c','line_number':803,'multiline':False]['text':' by using a linebuf_char copy for "throttled message line"','line_number':804,'multiline':False]['text':' If the screen is not going to be cleared, copy as much as','line_number':833,'multiline':False]['text':' possible from the old screen to the new one and clear the rest','line_number':834,'multiline':False]['text':' (used when resizing the window at the "--more--" prompt or when','line_number':835,'multiline':False]['text':' executing an external command, for the GUI).','line_number':836,'multiline':False]['text':' Share a single scratch buffer for all grids, by','line_number':854,'multiline':False]['text':' ensuring it is as wide as the widest grid.','line_number':855,'multiline':False]['text':'/ Doesn't allow reinit, so must only be called by free_all_mem!','line_number':883,'multiline':False]['text':'/ (Re)allocates a window grid if size changed while in ext_multigrid mode.','line_number':897,'multiline':False]['text':'/ Updates size, offsets and handle for the grid regardless.','line_number':898,'multiline':False]['text':'/','line_number':899,'multiline':False]['text':'/ If "doclear" is true, don't try to copy from the old grid rather clear the','line_number':900,'multiline':False]['text':'/ resized grid.','line_number':901,'multiline':False]['text':' Single grid mode, all rendering will be redirected to default_grid.','line_number':933,'multiline':False]['text':' Only keep track of the size and offset of the window.','line_number':934,'multiline':False]['text':' send grid resize event if:','line_number':956,'multiline':False]['text':' - a grid was just resized','line_number':957,'multiline':False]['text':' - screen_resize was called and all grid sizes must be sent','line_number':958,'multiline':False]['text':' - the UI wants multigrid event (necessary)','line_number':959,'multiline':False]['text':'/ assign a handle to the grid. The grid need not be allocated.','line_number':967,'multiline':False]['text':' only assign a grid handle if not already','line_number':972,'multiline':False]['text':'/ insert lines on the screen and move the existing lines down','line_number':978,'multiline':False]['text':'/ 'line_count' is the number of lines to be inserted.','line_number':979,'multiline':False]['text':'/ 'end' is the line after the scrolled part. Normally it is Rows.','line_number':980,'multiline':False]['text':'/ 'col' is the column from with we start inserting.','line_number':981,'multiline':False]['text':'','line_number':982,'multiline':False]['text':'/ 'row', 'col' and 'end' are relative to the start of the region.','line_number':983,'multiline':False]['text':' Shift line_offset[] line_count down to reflect the inserted lines.','line_number':998,'multiline':False]['text':' Clear the inserted lines.','line_number':999,'multiline':False]['text':' need to copy part of a line','line_number':1002,'multiline':False]['text':'/ delete lines on the screen and move lines up.','line_number':1025,'multiline':False]['text':'/ 'end' is the line after the scrolled part. Normally it is Rows.','line_number':1026,'multiline':False]['text':'/ When scrolling region used 'off' is the offset from the top for the region.','line_number':1027,'multiline':False]['text':'/ 'row' and 'end' are relative to the start of the region.','line_number':1028,'multiline':False]['text':' Now shift line_offset[] line_count up to reflect the deleted lines.','line_number':1043,'multiline':False]['text':' Clear the inserted lines.','line_number':1044,'multiline':False]['text':' need to copy part of a line','line_number':1047,'multiline':False]['text':' whole width, moving the line pointers is faster','line_number':1055,'multiline':False]