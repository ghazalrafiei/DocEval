['text':' NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This is NOT the original regular expression code as written by Henry','line_number':3,'multiline':False]['text':' Spencer.  This code has been modified specifically for use with Vim, and','line_number':4,'multiline':False]['text':' should not be used apart from compiling Vim.  If you want a good regular','line_number':5,'multiline':False]['text':' expression library, get the original code.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE','line_number':8,'multiline':False]['text':'/ Used for "magic_overruled".','line_number':18,'multiline':False]['text':'/< p_magic not overruled','line_number':20,'multiline':False]['text':'/< magic on inside regexp','line_number':21,'multiline':False]['text':'/< magic off inside regexp','line_number':22,'multiline':False]['text':'/ Magicness of a pattern, used by regexp code.','line_number':25,'multiline':False]['text':'/ The order and values matter:','line_number':26,'multiline':False]['text':'/  magic <= MAGIC_OFF includes MAGIC_NONE','line_number':27,'multiline':False]['text':'/  magic >= MAGIC_ON  includes MAGIC_ALL','line_number':28,'multiline':False]['text':'/< "\V" very unmagic','line_number':30,'multiline':False]['text':'/< "\M" or 'magic' off','line_number':31,'multiline':False]['text':'/< "\m" or 'magic'','line_number':32,'multiline':False]['text':'/< "\v" very magic','line_number':33,'multiline':False]['text':'/ The number of sub-matches is limited to 10.','line_number':37,'multiline':False]['text':'/ The first one (index 0) is the whole match, referenced with "\0".','line_number':38,'multiline':False]['text':'/ The second one (index 1) is the first sub-match, referenced with "\1".','line_number':39,'multiline':False]['text':'/ This goes up to the tenth (index 9), referenced with "\9".','line_number':40,'multiline':False]['text':'/ In the NFA engine: how many braces are allowed.','line_number':45,'multiline':False]['text':'/ TODO(RE): Use dynamic memory allocation instead of static, like here','line_number':46,'multiline':False]['text':'/ In the NFA engine: how many states are allowed.','line_number':51,'multiline':False]['text':'/ Which regexp engine to use? Needed for vim_regcomp().','line_number':56,'multiline':False]['text':'/ Must match with 'regexpengine'.','line_number':57,'multiline':False]['text':'/ Structure to be used for multi-line matching.','line_number':68,'multiline':False]['text':'/ Sub-match "no" starts in line "startpos[no].lnum" column "startpos[no].col"','line_number':69,'multiline':False]['text':'/ and ends in line "endpos[no].lnum" just before column "endpos[no].col".','line_number':70,'multiline':False]['text':'/ The line numbers are relative to the first line, thus startpos[0].lnum is','line_number':71,'multiline':False]['text':'/ always 0.','line_number':72,'multiline':False]['text':'/ When there is no match, the line number is -1.','line_number':73,'multiline':False]['text':'/< match start without "\zs"','line_number':79,'multiline':False]['text':'/< when not zero: maximum column','line_number':81,'multiline':False]['text':'/ Structure returned by vim_regcomp() to pass on to vim_regexec().','line_number':86,'multiline':False]['text':'/ This is the general structure. For the actual matcher, two specific','line_number':87,'multiline':False]['text':'/ structures are used. See code below.','line_number':88,'multiline':False]['text':'/< Automatic, backtracking or NFA engine.','line_number':92,'multiline':False]['text':'/< Second argument for vim_regcomp().','line_number':93,'multiline':False]['text':'/< prog is being executed','line_number':94,'multiline':False]['text':'/ Structure used by the back track matcher.','line_number':97,'multiline':False]['text':'/ These fields are only to be used in regexp.c!','line_number':98,'multiline':False]['text':'/ See regexp.c for an explanation.','line_number':99,'multiline':False]['text':' These four members implement regprog_T.','line_number':101,'multiline':False]['text':'/ Structure representing a NFA state.','line_number':116,'multiline':False]['text':'/ An NFA state may have no outgoing edge, when it is a NFA_MATCH state.','line_number':117,'multiline':False]['text':'/< 0: normal, 1: recursive','line_number':124,'multiline':False]['text':'/ Structure used by the NFA matcher.','line_number':128,'multiline':False]['text':' These four members implement regprog_T.','line_number':130,'multiline':False]['text':'/< points into state[]','line_number':137,'multiline':False]['text':'/< pattern starts with ^','line_number':139,'multiline':False]['text':'/< char at start of pattern','line_number':140,'multiline':False]['text':'/< plain text to match with','line_number':141,'multiline':False]['text':'/< pattern contains \ze','line_number':143,'multiline':False]['text':'/< pattern contains \1 .. \9','line_number':144,'multiline':False]['text':'/< number of ()','line_number':147,'multiline':False]['text':'/ Structure to be used for single-line matching.','line_number':152,'multiline':False]['text':'/ Sub-match "no" starts at "startp[no]" and ends just before "endp[no]".','line_number':153,'multiline':False]['text':'/ When there is no match, the pointer is NULL.','line_number':154,'multiline':False]['text':'/< match start without "\zs"','line_number':160,'multiline':False]['text':'/ Structure used to store external references: "\z\(\)" to "\z\1".','line_number':164,'multiline':False]['text':'/ Use a reference count to avoid the need to copy this around.  When it goes','line_number':165,'multiline':False]['text':'/ from 1 to zero the matches need to be freed.','line_number':166,'multiline':False]['text':'/ bt_regcomp or nfa_regcomp','line_number':173,'multiline':False]['text':'/ bt_regfree or nfa_regfree','line_number':175,'multiline':False]['text':'/ bt_regexec_nl or nfa_regexec_nl','line_number':177,'multiline':False]['text':'/ bt_regexec_mult or nfa_regexec_mult','line_number':179,'multiline':False]['text':' uint8_t *expr;','line_number':181,'multiline':False]['text':'/ Flags used by vim_regsub() and vim_regsub_both()','line_number':184,'multiline':False]