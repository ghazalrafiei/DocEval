['text':' mapping.c: Code for mappings and abbreviations.','line_number':1,'multiline':False]['text':'/ List used for abbreviations.','line_number':52,'multiline':False]['text':' first entry in abbrlist','line_number':53,'multiline':False]['text':' Each mapping is put in one of the MAX_MAPHASH hash lists,','line_number':55,'multiline':False]['text':' to speed up finding it.','line_number':56,'multiline':False]['text':' Make a hash value for a mapping.','line_number':59,'multiline':False]['text':' "mode" is the lower 4 bits of the State for the mapping.','line_number':60,'multiline':False]['text':' "c1" is the first character of the "lhs".','line_number':61,'multiline':False]['text':' Returns a value between 0 and 255, index in maphash.','line_number':62,'multiline':False]['text':' Put Normal/Visual mode mappings mostly separately from Insert/Cmdline mode.','line_number':63,'multiline':False]['text':'/ All possible |:map-arguments| usable in a |:map| command.','line_number':69,'multiline':False]['text':'/','line_number':70,'multiline':False]['text':'/ The <special> argument has no effect on mappings and is excluded from this','line_number':71,'multiline':False]['text':'/ struct declaration. |:noremap| is included, since it behaves like a map','line_number':72,'multiline':False]['text':'/ argument when used in a mapping.','line_number':73,'multiline':False]['text':'/','line_number':74,'multiline':False]['text':'/ @see mapblock_T','line_number':75,'multiline':False]['text':'/ The {lhs} of the mapping.','line_number':86,'multiline':False]['text':'/','line_number':87,'multiline':False]['text':'/ vim limits this to MAXMAPLEN characters, allowing us to use a static','line_number':88,'multiline':False]['text':'/ buffer. Setting lhs_len to a value larger than MAXMAPLEN can signal','line_number':89,'multiline':False]['text':'/ that {lhs} was too long and truncated.','line_number':90,'multiline':False]['text':'/ Unsimplifed {lhs} of the mapping. If no simplification has been done then alt_lhs_len is 0.','line_number':94,'multiline':False]['text':'/ The {rhs} of the mapping.','line_number':98,'multiline':False]['text':'/ lua function as {rhs}','line_number':100,'multiline':False]['text':'/ True when the {rhs} should be <Nop>.','line_number':101,'multiline':False]['text':'/ The original text of the {rhs}.','line_number':103,'multiline':False]['text':'/ map description','line_number':105,'multiline':False]['text':'/ Get the start of the hashed map list for "state" and first character "c".','line_number':128,'multiline':False]['text':'/ Get the buffer-local hashed map list for "state" and first character "c".','line_number':134,'multiline':False]['text':'/ Retrieve the mapblock at the index either globally or for a certain buffer','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/ @param  index  The index in the maphash[]','line_number':142,'multiline':False]['text':'/ @param  buf  The buffer to get the maphash from. NULL for global','line_number':143,'multiline':False]['text':'/ Delete one entry from the abbrlist or maphash[].','line_number':154,'multiline':False]['text':'/ "mpp" is a pointer to the m_next field of the PREVIOUS entry!','line_number':155,'multiline':False]['text':'/ Return characters to represent the map mode in an allocated string','line_number':170,'multiline':False]['text':'/','line_number':171,'multiline':False]['text':'/ @return [allocated] NUL-terminated string with characters.','line_number':172,'multiline':False]['text':' :map!','line_number':181,'multiline':False]['text':' :imap','line_number':183,'multiline':False]['text':' :lmap','line_number':185,'multiline':False]['text':' :cmap','line_number':187,'multiline':False]['text':' :map','line_number':190,'multiline':False]['text':' :nmap','line_number':193,'multiline':False]['text':' :omap','line_number':196,'multiline':False]['text':' :tmap','line_number':199,'multiline':False]['text':' :vmap','line_number':202,'multiline':False]['text':' :xmap','line_number':205,'multiline':False]['text':' :smap','line_number':208,'multiline':False]['text':'/ @param local  true for buffer-local map','line_number':217,'multiline':False]['text':' When ext_messages is active, msg_didout is never set.','line_number':225,'multiline':False]['text':' 'q' typed at MORE prompt','line_number':228,'multiline':False]['text':' Display the LHS.  Get length of what we write.','line_number':242,'multiline':False]['text':' pad with blanks','line_number':245,'multiline':False]['text':' Use false below if we only want things like <Up> to show up as such on','line_number':263,'multiline':False]['text':' the rhs, and not M-x etc, true gets both -- webb','line_number':264,'multiline':False]['text':' Shift line to same level as rhs.','line_number':276,'multiline':False]['text':'/ Replace termcodes in the given LHS and RHS and store the results into the','line_number':285,'multiline':False]['text':'/ `lhs` and `rhs` of the given @ref MapArguments struct.','line_number':286,'multiline':False]['text':'/','line_number':287,'multiline':False]['text':'/ `rhs` and `orig_rhs` will both point to new allocated buffers. `orig_rhs`','line_number':288,'multiline':False]['text':'/ will hold a copy of the given `orig_rhs`.','line_number':289,'multiline':False]['text':'/','line_number':290,'multiline':False]['text':'/ The `*_len` variables will be set appropriately. If the length of','line_number':291,'multiline':False]['text':'/ the final `lhs` exceeds `MAXMAPLEN`, `lhs_len` will be set equal to the','line_number':292,'multiline':False]['text':'/ original larger length and `lhs` will be truncated.','line_number':293,'multiline':False]['text':'/','line_number':294,'multiline':False]['text':'/ If RHS should be <Nop>, `rhs` will be an empty string, `rhs_len` will be','line_number':295,'multiline':False]['text':'/ zero, and `rhs_is_noop` will be set to true.','line_number':296,'multiline':False]['text':'/','line_number':297,'multiline':False]['text':'/ Any memory allocated by @ref replace_termcodes is freed before this function','line_number':298,'multiline':False]['text':'/ returns.','line_number':299,'multiline':False]['text':'/','line_number':300,'multiline':False]['text':'/ @param[in] orig_lhs   Original mapping LHS, with characters to replace.','line_number':301,'multiline':False]['text':'/ @param[in] orig_lhs_len   `strlen` of orig_lhs.','line_number':302,'multiline':False]['text':'/ @param[in] orig_rhs   Original mapping RHS, with characters to replace.','line_number':303,'multiline':False]['text':'/ @param[in] rhs_lua   Lua reference for Lua mappings.','line_number':304,'multiline':False]['text':'/ @param[in] orig_rhs_len   `strlen` of orig_rhs.','line_number':305,'multiline':False]['text':'/ @param[in] cpo_flags  See param docs for @ref replace_termcodes.','line_number':306,'multiline':False]['text':'/ @param[out] mapargs   MapArguments struct holding the replaced strings.','line_number':307,'multiline':False]['text':' If mapping has been given as ^V<C_UP> say, then replace the term codes','line_number':315,'multiline':False]['text':' with the appropriate two bytes. If it is a shifted special key, unshift','line_number':316,'multiline':False]['text':' it too, giving another two bytes.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' replace_termcodes() may move the result to allocated memory, which','line_number':319,'multiline':False]['text':' needs to be freed later (*lhs_buf and *rhs_buf).','line_number':320,'multiline':False]['text':' replace_termcodes() also removes CTRL-Vs and sometimes backslashes.','line_number':321,'multiline':False]['text':' If something like <C-H> is simplified to 0x08 then mark it as simplified.','line_number':322,'multiline':False]['text':'/ @see set_maparg_lhs_rhs','line_number':350,'multiline':False]['text':' "<Nop>" means nothing','line_number':361,'multiline':False]['text':' single NUL-char','line_number':362,'multiline':False]['text':' NB: replace_termcodes may produce an empty string even if orig_rhs is non-empty','line_number':370,'multiline':False]['text':' (e.g. a single ^V, see :h map-empty-rhs)','line_number':371,'multiline':False]['text':' orig_rhs is not used for Lua mappings, but still needs to be a string.','line_number':377,'multiline':False]['text':' stores <lua>ref_no<cr> in map_str','line_number':380,'multiline':False]['text':'/ Parse a string of |:map-arguments| into a @ref MapArguments struct.','line_number':387,'multiline':False]['text':'/','line_number':388,'multiline':False]['text':'/ Termcodes, backslashes, CTRL-V's, etc. inside the extracted {lhs} and','line_number':389,'multiline':False]['text':'/ {rhs} are replaced by @ref set_maparg_lhs_rhs.','line_number':390,'multiline':False]['text':'/','line_number':391,'multiline':False]['text':'/ rhs and orig_rhs in the returned mapargs will be set to null or a pointer','line_number':392,'multiline':False]['text':'/ to allocated memory and should be freed even on error.','line_number':393,'multiline':False]['text':'/','line_number':394,'multiline':False]['text':'/ @param[in]  strargs   String of map args, e.g. "<buffer> <expr><silent>".','line_number':395,'multiline':False]['text':'/                       May contain leading or trailing whitespace.','line_number':396,'multiline':False]['text':'/ @param[in]  is_unmap  True, if strargs should be parsed like an |:unmap|','line_number':397,'multiline':False]['text':'/                       command. |:unmap| commands interpret *all* text to the','line_number':398,'multiline':False]['text':'/                       right of the last map argument as the {lhs} of the','line_number':399,'multiline':False]['text':'/                       mapping, i.e. a literal ' ' character is treated like','line_number':400,'multiline':False]['text':'/                       a "<space>", rather than separating the {lhs} from the','line_number':401,'multiline':False]['text':'/                       {rhs}.','line_number':402,'multiline':False]['text':'/ @param[out] mapargs   MapArguments struct holding all extracted argument','line_number':403,'multiline':False]['text':'/                       values.','line_number':404,'multiline':False]['text':'/ @return 0 on success, 1 if invalid arguments are detected.','line_number':405,'multiline':False]['text':' Accept <buffer>, <nowait>, <silent>, <expr>, <script>, and <unique> in','line_number':412,'multiline':False]['text':' any order.','line_number':413,'multiline':False]['text':' Ignore obsolete "<special>" modifier.','line_number':433,'multiline':False]['text':' Find the next whitespace character, call that the end of {lhs}.','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':' If a character (e.g. whitespace) is immediately preceded by a CTRL-V,','line_number':461,'multiline':False]['text':' "scan past" that character, i.e. don't "terminate" LHS with that character','line_number':462,'multiline':False]['text':' if it's whitespace.','line_number':463,'multiline':False]['text':'','line_number':464,'multiline':False]['text':' Treat backslash like CTRL-V when 'cpoptions' does not contain 'B'.','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' With :unmap, literal white space is included in the {lhs}; there is no','line_number':467,'multiline':False]['text':' separate {rhs}.','line_number':468,'multiline':False]['text':' skip CTRL-V or backslash','line_number':474,'multiline':False]['text':' {lhs_end} is a pointer to the "terminating whitespace" after {lhs}.','line_number':479,'multiline':False]['text':' Use that to initialize {rhs_start}.','line_number':480,'multiline':False]['text':' Given {lhs} might be larger than MAXMAPLEN before replace_termcodes','line_number':483,'multiline':False]['text':' (e.g. "<Space>" is longer than ' '), so first copy into a buffer.','line_number':484,'multiline':False]['text':'/ @param args  "rhs", "rhs_lua", "orig_rhs", "expr", "silent", "nowait", "replace_keycodes" and','line_number':505,'multiline':False]['text':'/              and "desc" fields are used.','line_number':506,'multiline':False]['text':'/              "rhs", "rhs_lua", "orig_rhs" fields are cleared if "simplified" is false.','line_number':507,'multiline':False]['text':'/ @param sid  0 to use current_sctx','line_number':508,'multiline':False]['text':' If CTRL-C has been mapped, don't always use it for Interrupting.','line_number':515,'multiline':False]['text':' add the new entry in front of the abbrlist or maphash[] list','line_number':554,'multiline':False]['text':'/ Sets or removes a mapping or abbreviation in buffer `buf`.','line_number':565,'multiline':False]['text':'/','line_number':566,'multiline':False]['text':'/ @param maptype    @see do_map','line_number':567,'multiline':False]['text':'/ @param args  Fully parsed and "preprocessed" arguments for the','line_number':568,'multiline':False]['text':'/              (un)map/abbrev command. Termcodes should have already been','line_number':569,'multiline':False]['text':'/              replaced; whitespace, `<` and `>` signs, etc. in {lhs} and','line_number':570,'multiline':False]['text':'/              {rhs} are assumed to be literal components of the mapping.','line_number':571,'multiline':False]['text':'/ @param mode       @see do_map','line_number':572,'multiline':False]['text':'/ @param is_abbrev  @see do_map','line_number':573,'multiline':False]['text':'/ @param buf        Target Buffer','line_number':574,'multiline':False]['text':' If <buffer> was given, we'll be searching through the buffer's','line_number':579,'multiline':False]['text':' mappings/abbreviations, not the globals.','line_number':580,'multiline':False]['text':' For ":noremap" don't remap, otherwise do remap.','line_number':584,'multiline':False]['text':' check for :unmap without argument','line_number':592,'multiline':False]['text':' The following is done twice if we have two versions of keys','line_number':601,'multiline':False]['text':' when printing always use the not-simplified map','line_number':615,'multiline':False]['text':' check arguments and translate function keys','line_number':620,'multiline':False]['text':' If an abbreviation ends in a keyword character, the','line_number':628,'multiline':False]['text':' rest must be all keyword-char or all non-keyword-char.','line_number':629,'multiline':False]['text':' Otherwise we won't be able to find the start of it in a','line_number':630,'multiline':False]['text':' vi-compatible way.','line_number':631,'multiline':False]['text':' nr of (multi-byte) chars','line_number':639,'multiline':False]['text':' type of last char','line_number':640,'multiline':False]['text':' count of same char type','line_number':642,'multiline':False]['text':' An abbreviation cannot contain white space.','line_number':650,'multiline':False]['text':' for','line_number':656,'multiline':False]['text':' if we will add an abbreviation,','line_number':660,'multiline':False]['text':' reset flag that indicates there are no abbreviations','line_number':661,'multiline':False]['text':' Check if a new local mapping wasn't already defined globally.','line_number':668,'multiline':False]['text':' need to loop over all global hash lists','line_number':671,'multiline':False]['text':' there is only one abbreviation list','line_number':675,'multiline':False]['text':' check entries with the same mode','line_number':683,'multiline':False]['text':' When listing global mappings, also list buffer-local ones here.','line_number':699,'multiline':False]['text':' need to loop over all global hash lists','line_number':701,'multiline':False]['text':' there is only one abbreviation list','line_number':705,'multiline':False]['text':' check entries with the same mode','line_number':713,'multiline':False]['text':' show all entries','line_number':715,'multiline':False]['text':' Find an entry in the maphash[] list that matches.','line_number':730,'multiline':False]['text':' For :unmap we may loop two times: once to try to unmap an entry with a','line_number':731,'multiline':False]['text':' matching 'from' part, a second time, if the first fails, to unmap an','line_number':732,'multiline':False]['text':' entry with a matching 'to' part. This was done to allow ":ab foo bar"','line_number':733,'multiline':False]['text':' to be unmapped by typing ":unab foo", where "foo" will be replaced by','line_number':734,'multiline':False]['text':' "bar" because of the abbreviation.','line_number':735,'multiline':False]['text':' just use one hash','line_number':740,'multiline':False]['text':' need to loop over all hash lists','line_number':744,'multiline':False]['text':' skip entries with wrong mode','line_number':752,'multiline':False]['text':' show all entries','line_number':756,'multiline':False]['text':' do we have a match?','line_number':761,'multiline':False]['text':' second round: Try unmap "rhs" string','line_number':764,'multiline':False]['text':' Delete entry.','line_number':773,'multiline':False]['text':' Only accept a full match.  For abbreviations','line_number':774,'multiline':False]['text':' we ignore trailing space when matching with','line_number':775,'multiline':False]['text':' the "lhs", since an abbreviation can't have','line_number':776,'multiline':False]['text':' trailing space.','line_number':777,'multiline':False]['text':' In keyround for simplified keys, don't unmap','line_number':782,'multiline':False]['text':' a mapping without m_simplified flag.','line_number':783,'multiline':False]['text':' We reset the indicated mode bits. If nothing','line_number':787,'multiline':False]['text':' is left the entry is deleted below.','line_number':788,'multiline':False]['text':' remember we did something','line_number':790,'multiline':False]['text':' show matching entry','line_number':791,'multiline':False]['text':' new entry is ambiguous','line_number':796,'multiline':False]['text':' In keyround for simplified keys, don't replace','line_number':800,'multiline':False]['text':' a mapping without m_simplified flag.','line_number':801,'multiline':False]['text':' new rhs for existing entry','line_number':813,'multiline':False]['text':' remove mode bits','line_number':814,'multiline':False]['text':' reuse entry','line_number':815,'multiline':False]['text':' entry can be deleted','line_number':846,'multiline':False]['text':' continue with *mpp','line_number':848,'multiline':False]['text':' May need to put this entry into another hash list.','line_number':851,'multiline':False]['text':' continue with *mpp','line_number':858,'multiline':False]['text':' delete entry','line_number':868,'multiline':False]['text':' no match','line_number':871,'multiline':False]['text':' If CTRL-C has been unmapped, reuse it for Interrupting.','line_number':874,'multiline':False]['text':' print entries','line_number':885,'multiline':False]['text':' listing finished','line_number':893,'multiline':False]['text':' have added the new entry already','line_number':897,'multiline':False]['text':' Get here when adding a new entry to the maphash[] list or abbrlist.','line_number':900,'multiline':False]['text':' sid','line_number':902,'multiline':False]['text':' lnum','line_number':903,'multiline':False]['text':'/ Set or remove a mapping or an abbreviation in the current buffer, OR','line_number':911,'multiline':False]['text':'/ display (matching) mappings/abbreviations.','line_number':912,'multiline':False]['text':'/','line_number':913,'multiline':False]['text':'/ ```vim','line_number':914,'multiline':False]['text':'/ map[!]                          " show all key mappings','line_number':915,'multiline':False]['text':'/ map[!] {lhs}                    " show key mapping for {lhs}','line_number':916,'multiline':False]['text':'/ map[!] {lhs} {rhs}              " set key mapping for {lhs} to {rhs}','line_number':917,'multiline':False]['text':'/ noremap[!] {lhs} {rhs}          " same, but no remapping for {rhs}','line_number':918,'multiline':False]['text':'/ unmap[!] {lhs}                  " remove key mapping for {lhs}','line_number':919,'multiline':False]['text':'/ abbr                            " show all abbreviations','line_number':920,'multiline':False]['text':'/ abbr {lhs}                      " show abbreviations for {lhs}','line_number':921,'multiline':False]['text':'/ abbr {lhs} {rhs}                " set abbreviation for {lhs} to {rhs}','line_number':922,'multiline':False]['text':'/ noreabbr {lhs} {rhs}            " same, but no remapping for {rhs}','line_number':923,'multiline':False]['text':'/ unabbr {lhs}                    " remove abbreviation for {lhs}','line_number':924,'multiline':False]['text':'/','line_number':925,'multiline':False]['text':'/ for :map   mode is MODE_NORMAL | MODE_VISUAL | MODE_SELECT | MODE_OP_PENDING','line_number':926,'multiline':False]['text':'/ for :map!  mode is MODE_INSERT | MODE_CMDLINE','line_number':927,'multiline':False]['text':'/ for :cmap  mode is MODE_CMDLINE','line_number':928,'multiline':False]['text':'/ for :imap  mode is MODE_INSERT','line_number':929,'multiline':False]['text':'/ for :lmap  mode is MODE_LANGMAP','line_number':930,'multiline':False]['text':'/ for :nmap  mode is MODE_NORMAL','line_number':931,'multiline':False]['text':'/ for :vmap  mode is MODE_VISUAL | MODE_SELECT','line_number':932,'multiline':False]['text':'/ for :xmap  mode is MODE_VISUAL','line_number':933,'multiline':False]['text':'/ for :smap  mode is MODE_SELECT','line_number':934,'multiline':False]['text':'/ for :omap  mode is MODE_OP_PENDING','line_number':935,'multiline':False]['text':'/ for :tmap  mode is MODE_TERMINAL','line_number':936,'multiline':False]['text':'/','line_number':937,'multiline':False]['text':'/ for :abbr  mode is MODE_INSERT | MODE_CMDLINE','line_number':938,'multiline':False]['text':'/ for :iabbr mode is MODE_INSERT','line_number':939,'multiline':False]['text':'/ for :cabbr mode is MODE_CMDLINE','line_number':940,'multiline':False]['text':'/ ```','line_number':941,'multiline':False]['text':'/','line_number':942,'multiline':False]['text':'/ @param maptype  MAPTYPE_MAP for |:map|','line_number':943,'multiline':False]['text':'/                 MAPTYPE_UNMAP for |:unmap|','line_number':944,'multiline':False]['text':'/                 MAPTYPE_NOREMAP for |:noremap|.','line_number':945,'multiline':False]['text':'/ @param arg      C-string containing the arguments of the map/abbrev','line_number':946,'multiline':False]['text':'/                 command, i.e. everything except the initial `:[X][nore]map`.','line_number':947,'multiline':False]['text':'/                 - Cannot be a read-only string; it will be modified.','line_number':948,'multiline':False]['text':'/ @param mode   Bitflags representing the mode in which to set the mapping.','line_number':949,'multiline':False]['text':'/               See @ref get_map_mode.','line_number':950,'multiline':False]['text':'/ @param is_abbrev  True if setting an abbreviation, false otherwise.','line_number':951,'multiline':False]['text':'/','line_number':952,'multiline':False]['text':'/ @return 0 on success. On failure, will return one of the following:','line_number':953,'multiline':False]['text':'/         - 1 for invalid arguments','line_number':954,'multiline':False]['text':'/         - 2 for no match','line_number':955,'multiline':False]['text':'/         - 4 for out of mem (deprecated, WON'T HAPPEN)','line_number':956,'multiline':False]['text':'/         - 5 for entry not unique','line_number':957,'multiline':False]['text':'/','line_number':958,'multiline':False]['text':' invalid arguments','line_number':967,'multiline':False]['text':' switch','line_number':973,'multiline':False]['text':'/ Get the mapping mode from the command name.','line_number':983,'multiline':False]['text':' :imap','line_number':991,'multiline':False]['text':' :lmap','line_number':993,'multiline':False]['text':' :cmap','line_number':995,'multiline':False]['text':' avoid :noremap','line_number':996,'multiline':False]['text':' :nmap','line_number':997,'multiline':False]['text':' :vmap','line_number':999,'multiline':False]['text':' :xmap','line_number':1001,'multiline':False]['text':' :smap','line_number':1003,'multiline':False]['text':' :omap','line_number':1005,'multiline':False]['text':' :tmap','line_number':1007,'multiline':False]['text':' :map !','line_number':1011,'multiline':False]['text':' :map','line_number':1013,'multiline':False]['text':'/ Clear all mappings (":mapclear") or abbreviations (":abclear").','line_number':1021,'multiline':False]['text':'/ "abbr" should be false for mappings, true for abbreviations.','line_number':1022,'multiline':False]['text':'/ This function used to be called map_clear().','line_number':1023,'multiline':False]['text':'/ Clear all mappings in "mode".','line_number':1036,'multiline':False]['text':'/','line_number':1037,'multiline':False]['text':'/ @param buf,  buffer for local mappings','line_number':1038,'multiline':False]['text':'/ @param mode  mode in which to delete','line_number':1039,'multiline':False]['text':'/ @param local  true for buffer-local mappings','line_number':1040,'multiline':False]['text':'/ @param abbr  true for abbreviations','line_number':1041,'multiline':False]['text':' there is only one abbrlist','line_number':1047,'multiline':False]['text':' entry can be deleted','line_number':1066,'multiline':False]['text':' May need to put this entry into another hash list.','line_number':1070,'multiline':False]['text':' continue with *mpp','line_number':1081,'multiline':False]['text':'/ Check if a map exists that has given string in the rhs','line_number':1089,'multiline':False]['text':'/','line_number':1090,'multiline':False]['text':'/ Also checks mappings local to the current buffer.','line_number':1091,'multiline':False]['text':'/','line_number':1092,'multiline':False]['text':'/ @param[in]  str  String which mapping must have in the rhs. Termcap codes','line_number':1093,'multiline':False]['text':'/                  are recognized in this argument.','line_number':1094,'multiline':False]['text':'/ @param[in]  modechars  Mode(s) in which mappings are checked.','line_number':1095,'multiline':False]['text':'/ @param[in]  abbr  true if checking abbreviations in place of mappings.','line_number':1096,'multiline':False]['text':'/','line_number':1097,'multiline':False]['text':'/ @return true if there is at least one mapping with given parameters.','line_number':1098,'multiline':False]['text':'/ Check if a map exists that has given string in the rhs','line_number':1130,'multiline':False]['text':'/','line_number':1131,'multiline':False]['text':'/ Also checks mappings local to the current buffer.','line_number':1132,'multiline':False]['text':'/','line_number':1133,'multiline':False]['text':'/ @param[in]  rhs  String which mapping must have in the rhs. Termcap codes','line_number':1134,'multiline':False]['text':'/                  are recognized in this argument.','line_number':1135,'multiline':False]['text':'/ @param[in]  mode  Mode(s) in which mappings are checked.','line_number':1136,'multiline':False]['text':'/ @param[in]  abbr  true if checking abbreviations in place of mappings.','line_number':1137,'multiline':False]['text':'/','line_number':1138,'multiline':False]['text':'/ @return true if there is at least one mapping with given parameters.','line_number':1139,'multiline':False]['text':' Do it twice: once for global maps and once for local maps.','line_number':1144,'multiline':False]['text':' There is only one abbr list.','line_number':1149,'multiline':False]['text':'/ Used below when expanding mapping/abbreviation names.','line_number':1177,'multiline':False]['text':'/ Translate an internal mapping/abbreviation representation into the','line_number':1182,'multiline':False]['text':'/ corresponding external one recognized by :map/:abbrev commands.','line_number':1183,'multiline':False]['text':'/','line_number':1184,'multiline':False]['text':'/ This function is called when expanding mappings/abbreviations on the','line_number':1185,'multiline':False]['text':'/ command-line.','line_number':1186,'multiline':False]['text':'/','line_number':1187,'multiline':False]['text':'/ It uses a growarray to build the translation string since the latter can be','line_number':1188,'multiline':False]['text':'/ wider than the original description. The caller has to free the string','line_number':1189,'multiline':False]['text':'/ afterwards.','line_number':1190,'multiline':False]['text':'/','line_number':1191,'multiline':False]['text':'/ @param cpo_flags  Value of various flags present in &cpo','line_number':1192,'multiline':False]['text':'/','line_number':1193,'multiline':False]['text':'/ @return  NULL when there is a problem.','line_number':1194,'multiline':False]['text':' display <Nul> as ^@','line_number':1216,'multiline':False]['text':' special key','line_number':1221,'multiline':False]['text':' for (str)','line_number':1223,'multiline':False]['text':'/ Work out what to complete when doing command line completion of mapping','line_number':1240,'multiline':False]['text':'/ or abbreviation names.','line_number':1241,'multiline':False]['text':'/','line_number':1242,'multiline':False]['text':'/ @param forceit  true if '!' given','line_number':1243,'multiline':False]['text':'/ @param isabbrev  true if abbreviation','line_number':1244,'multiline':False]['text':'/ @param isunmap  true if unmap/unabbrev command','line_number':1245,'multiline':False]['text':'/ Find all mapping/abbreviation names that match regexp "regmatch".','line_number':1301,'multiline':False]['text':'/ For command line expansion of ":[un]map" and ":[un]abbrev" in all modes.','line_number':1302,'multiline':False]['text':'/ @return OK if matches found, FAIL otherwise.','line_number':1303,'multiline':False]['text':' return values in case of FAIL','line_number':1308,'multiline':False]['text':' First search in map modifier arguments','line_number':1318,'multiline':False]['text':' only one abbrev list','line_number':1366,'multiline':False]['text':' for (hash)','line_number':1367,'multiline':False]['text':' for (mp)','line_number':1408,'multiline':False]['text':' for (hash)','line_number':1409,'multiline':False]['text':' Sort the matches','line_number':1425,'multiline':False]['text':' Fuzzy matching already sorts the matches','line_number':1426,'multiline':False]['text':' Remove multiple entries','line_number':1431,'multiline':False]['text':' Check for an abbreviation.','line_number':1450,'multiline':False]['text':' Cursor is at ptr[col].','line_number':1451,'multiline':False]['text':' When inserting, mincol is where insert started.','line_number':1452,'multiline':False]['text':' For the command line, mincol is what is to be skipped over.','line_number':1453,'multiline':False]['text':' "c" is the character typed before check_abbr was called.  It may have','line_number':1454,'multiline':False]['text':' ABBR_OFF added to avoid prepending a CTRL-V to it.','line_number':1455,'multiline':False]['text':'','line_number':1456,'multiline':False]['text':' Historic vi practice: The last character of an abbreviation must be an id','line_number':1457,'multiline':False]['text':' character ([a-zA-Z0-9_]). The characters in front of it must be all id','line_number':1458,'multiline':False]['text':' characters or all non-id characters. This allows for abbr. "#i" to','line_number':1459,'multiline':False]['text':' "#include".','line_number':1460,'multiline':False]['text':'','line_number':1461,'multiline':False]['text':' Vim addition: Allow for abbreviations that end in a non-keyword character.','line_number':1462,'multiline':False]['text':' Then there must be white space before the abbr.','line_number':1463,'multiline':False]['text':'','line_number':1464,'multiline':False]['text':' Return true if there is an abbreviation, false if not.','line_number':1465,'multiline':False]['text':' length in characters','line_number':1469,'multiline':False]['text':' abbrev. are not recursive','line_number':1471,'multiline':False]['text':' no remapping implies no abbreviation, except for CTRL-]','line_number':1475,'multiline':False]['text':' Check for word before the cursor: If it ends in a keyword char all','line_number':1480,'multiline':False]['text':' chars before it must be keyword chars or non-keyword chars, but not','line_number':1481,'multiline':False]['text':' white space. If it ends in a non-keyword char we accept any characters','line_number':1482,'multiline':False]['text':' before it except white space.','line_number':1483,'multiline':False]['text':' cannot be an abbr.','line_number':1484,'multiline':False]['text':' starting column of the abbr.','line_number':1488,'multiline':False]['text':' Vim added abbr.','line_number':1495,'multiline':False]['text':' vi compatible abbr.','line_number':1497,'multiline':False]['text':' there is a word in front of the cursor','line_number':1517,'multiline':False]['text':' Might have K_SPECIAL escaped mp->m_keys.','line_number':1534,'multiline':False]['text':' find entries with right mode and keys','line_number':1539,'multiline':False]['text':' Found a match:','line_number':1551,'multiline':False]['text':' Insert the rest of the abbreviation in typebuf.tb_buf[].','line_number':1552,'multiline':False]['text':' This goes from end to start.','line_number':1553,'multiline':False]['text':'','line_number':1554,'multiline':False]['text':' Characters 0x000 - 0x100: normal chars, may need CTRL-V,','line_number':1555,'multiline':False]['text':' except K_SPECIAL: Becomes K_SPECIAL KS_SPECIAL KE_FILLER','line_number':1556,'multiline':False]['text':' Characters where IS_SPECIAL() == true: key codes, need','line_number':1557,'multiline':False]['text':' K_SPECIAL. Other characters (with ABBR_OFF): don't use CTRL-V.','line_number':1558,'multiline':False]['text':'','line_number':1559,'multiline':False]['text':' Character CTRL-] is treated specially - it completes the','line_number':1560,'multiline':False]['text':' abbreviation, but is not inserted into the input stream.','line_number':1561,'multiline':False]['text':' special key code, split up','line_number':1564,'multiline':False]['text':' special char needs CTRL-V','line_number':1571,'multiline':False]['text':' if ABBR_OFF has been added, remove it here.','line_number':1573,'multiline':False]['text':' Need to escape K_SPECIAL.','line_number':1579,'multiline':False]['text':' insert the last typed char','line_number':1589,'multiline':False]['text':' copy values here, calling eval_map_expr() may make "mp" invalid!','line_number':1593,'multiline':False]['text':' insert the to string','line_number':1605,'multiline':False]['text':' no abbrev. for these chars','line_number':1607,'multiline':False]['text':' Delete characters instead of bytes','line_number':1616,'multiline':False]['text':' delete the from string','line_number':1617,'multiline':False]['text':'/ Evaluate the RHS of a mapping or abbreviations and take care of escaping','line_number':1626,'multiline':False]['text':'/ special characters.','line_number':1627,'multiline':False]['text':'/ Careful: after this "mp" will be invalid if the mapping was deleted.','line_number':1628,'multiline':False]['text':'/','line_number':1629,'multiline':False]['text':'/ @param c  NUL or typed character for abbreviation','line_number':1630,'multiline':False]['text':' Remove escaping of K_SPECIAL, because "str" is in a format to be used as','line_number':1636,'multiline':False]['text':' typeahead.','line_number':1637,'multiline':False]['text':' Forbid changing text or using ":normal" to avoid most of the bad side','line_number':1645,'multiline':False]['text':' effects.  Also restore the cursor position.','line_number':1646,'multiline':False]['text':' set v:char to the typed character','line_number':1648,'multiline':False]['text':' Escape K_SPECIAL in the result to be able to use the string as typeahead.','line_number':1682,'multiline':False]['text':'/ Write map commands for the current mappings to an .exrc file.','line_number':1690,'multiline':False]['text':'/ Return FAIL on error, OK otherwise.','line_number':1691,'multiline':False]['text':'/','line_number':1692,'multiline':False]['text':'/ @param buf  buffer for local mappings or NULL','line_number':1693,'multiline':False]['text':' Do the loop twice: Once for mappings, once for abbreviations.','line_number':1698,'multiline':False]['text':' Then loop over all map hash lists.','line_number':1699,'multiline':False]['text':' there is only one abbr list','line_number':1704,'multiline':False]['text':' skip script-local mappings','line_number':1721,'multiline':False]['text':' skip Lua mappings and mappings that contain a <SNR> (script-local thing),','line_number':1726,'multiline':False]['text':' they probably don't work when loaded again','line_number':1727,'multiline':False]['text':' It's possible to create a mapping and then ":unmap" certain','line_number':1742,'multiline':False]['text':' modes.  We recreate this here by mapping the individual','line_number':1743,'multiline':False]['text':' modes, which requires up to three of them.','line_number':1744,'multiline':False]['text':' do this twice if c2 is set, 3 times with c3 */','line_number':1827,'multiline':False]['text':' When outputting <> form, need to make sure that 'cpo'','line_number':1828,'multiline':False]['text':' is set to the Vim default.','line_number':1829,'multiline':False]['text':' Will use <Nop>.','line_number':1831,'multiline':False]['text':' write escape string to file','line_number':1895,'multiline':False]['text':' "what": 0 for :map lhs, 1 for :map rhs, 2 for :set','line_number':1896,'multiline':False]['text':'','line_number':1897,'multiline':False]['text':' return FAIL for failure, OK otherwise','line_number':1898,'multiline':False]['text':' :map xx <Nop>','line_number':1903,'multiline':False]['text':' Check for a multi-byte character, which may contain escaped','line_number':1912,'multiline':False]['text':' K_SPECIAL bytes.','line_number':1913,'multiline':False]['text':' Special key codes have to be translated to be able to make sense','line_number':1926,'multiline':False]['text':' when they are read back.','line_number':1927,'multiline':False]['text':' special key','line_number':1939,'multiline':False]['text':' A '\n' in a map command should be written as <NL>.','line_number':1947,'multiline':False]['text':' A '\n' in a set command should be written as \^V^J.','line_number':1948,'multiline':False]['text':' Some characters have to be escaped with CTRL-V to','line_number':1962,'multiline':False]['text':' prevent them from misinterpreted in DoOneCmd().','line_number':1963,'multiline':False]['text':' A space, Tab and '"' has to be escaped with a backslash to','line_number':1964,'multiline':False]['text':' prevent it to be misinterpreted in do_set().','line_number':1965,'multiline':False]['text':' A space has to be escaped with a CTRL-V when it's at the start of a','line_number':1966,'multiline':False]['text':' ":map" rhs.','line_number':1967,'multiline':False]['text':' A '<' has to be escaped with a CTRL-V to prevent it being','line_number':1968,'multiline':False]['text':' interpreted as the start of a special key name.','line_number':1969,'multiline':False]['text':' A space in the lhs of a :map needs a CTRL-V.','line_number':1970,'multiline':False]['text':'/ Check the string "keys" against the lhs of all mappings.','line_number':1990,'multiline':False]['text':'/ Return pointer to rhs of mapping (mapblock->m_str).','line_number':1991,'multiline':False]['text':'/ NULL when no mapping found.','line_number':1992,'multiline':False]['text':'/','line_number':1993,'multiline':False]['text':'/ @param exact  require exact match','line_number':1994,'multiline':False]['text':'/ @param ign_mod  ignore preceding modifier','line_number':1995,'multiline':False]['text':'/ @param abbr  do abbreviations','line_number':1996,'multiline':False]['text':'/ @param mp_ptr  return: pointer to mapblock or NULL','line_number':1997,'multiline':False]['text':'/ @param local_ptr  return: buffer-local mapping or NULL','line_number':1998,'multiline':False]['text':' loop over all hash lists','line_number':2006,'multiline':False]['text':' there is only one list.','line_number':2010,'multiline':False]['text':' skip entries with wrong mode, wrong length and not matching ones','line_number':2024,'multiline':False]['text':'/ "hasmapto()" function','line_number':2052,'multiline':False]['text':'/ Fill a Dictionary with all applicable maparg() like dictionaries','line_number':2071,'multiline':False]['text':'/','line_number':2072,'multiline':False]['text':'/ @param mp            The maphash that contains the mapping information','line_number':2073,'multiline':False]['text':'/ @param buffer_value  The "buffer" value','line_number':2074,'multiline':False]['text':'/ @param abbr          True if abbreviation','line_number':2075,'multiline':False]['text':'/ @param compatible    True for compatible with old maparg() dict','line_number':2076,'multiline':False]['text':'/','line_number':2077,'multiline':False]['text':'/ @return  A Dictionary.','line_number':2078,'multiline':False]['text':' Keep old compatible behavior','line_number':2089,'multiline':False]['text':' This is unable to determine whether a mapping is a <script> mapping','line_number':2090,'multiline':False]['text':' Distinguish between <script> mapping','line_number':2093,'multiline':False]['text':' If it's not a <script> mapping, check if it's a noremap','line_number':2094,'multiline':False]['text':' Also add the value for the simplified entry.','line_number':2111,'multiline':False]['text':' Return empty string for failure.','line_number':2135,'multiline':False]['text':' When the lhs is being simplified the not-simplified keys are','line_number':2178,'multiline':False]['text':' preferred for printing, like in do_map().','line_number':2179,'multiline':False]['text':' Return a string.','line_number':2186,'multiline':False]['text':' Return a dictionary.','line_number':2197,'multiline':False]['text':' Return an empty dictionary.','line_number':2205,'multiline':False]['text':'/ Get the mapping mode from the mode string.','line_number':2214,'multiline':False]['text':'/ It may contain multiple characters, eg "nox", or "!", or ' '','line_number':2215,'multiline':False]['text':'/ Return 0 if there is an error.','line_number':2216,'multiline':False]['text':' compatibility','line_number':2225,'multiline':False]['text':' error, unknown mode character','line_number':2255,'multiline':False]['text':' more than one bit set','line_number':2260,'multiline':False]['text':' false if multiple bits set in mode and mode is fully','line_number':2262,'multiline':False]['text':' contained in one mask','line_number':2263,'multiline':False]['text':'/ "mapset()" function','line_number':2272,'multiline':False]['text':' If first arg is a dict, then that's the only arg permitted.','line_number':2280,'multiline':False]['text':' Get the values in the same order as above in get_maparg().','line_number':2308,'multiline':False]['text':' mode from the dict is not used','line_number':2344,'multiline':False]['text':' Delete any existing mapping for this lhs and mode.','line_number':2351,'multiline':False]['text':'/ "maplist()" function','line_number':2367,'multiline':False]['text':' Do it twice: once for global maps and once for local maps.','line_number':2375,'multiline':False]['text':' there is only one abbr list','line_number':2380,'multiline':False]['text':'/ "maparg()" function','line_number':2420,'multiline':False]['text':'/ "mapcheck()" function','line_number':2426,'multiline':False]['text':'/ Add a mapping. Unlike @ref do_map this copies the string arguments, so','line_number':2432,'multiline':False]['text':'/ static or read-only strings can be used.','line_number':2433,'multiline':False]['text':'/','line_number':2434,'multiline':False]['text':'/ @param lhs  C-string containing the lhs of the mapping','line_number':2435,'multiline':False]['text':'/ @param rhs  C-string containing the rhs of the mapping','line_number':2436,'multiline':False]['text':'/ @param mode  Bitflags representing the mode in which to set the mapping.','line_number':2437,'multiline':False]['text':'/              See @ref get_map_mode.','line_number':2438,'multiline':False]['text':'/ @param buffer  If true, make a buffer-local mapping for curbuf','line_number':2439,'multiline':False]['text':'/ Any character has an equivalent 'langmap' character.  This is used for','line_number':2451,'multiline':False]['text':'/ keyboards that have a special language mode that sends characters above','line_number':2452,'multiline':False]['text':'/ 128 (although other characters can be translated too).  The "to" field is a','line_number':2453,'multiline':False]['text':'/ Vim command character.  This avoids having to switch the keyboard back to','line_number':2454,'multiline':False]['text':'/ ASCII mode when leaving Insert mode.','line_number':2455,'multiline':False]['text':'/','line_number':2456,'multiline':False]['text':'/ langmap_mapchar[] maps any of 256 chars to an ASCII char used for Vim','line_number':2457,'multiline':False]['text':'/ commands.','line_number':2458,'multiline':False]['text':'/ langmap_mapga.ga_data is a sorted table of langmap_entry_T.','line_number':2459,'multiline':False]['text':'/ This does the same as langmap_mapchar[] for characters >= 256.','line_number':2460,'multiline':False]['text':'/','line_number':2461,'multiline':False]['text':'/ With multi-byte support use growarray for 'langmap' chars >= 256','line_number':2462,'multiline':False]['text':'/ Search for an entry in "langmap_mapga" for "from".  If found set the "to"','line_number':2470,'multiline':False]['text':'/ field.  If not found insert a new entry at the appropriate location.','line_number':2471,'multiline':False]['text':' Do a binary search for an existing entry.','line_number':2479,'multiline':False]['text':' insert new entry at position "a"','line_number':2497,'multiline':False]['text':'/ Apply 'langmap' to multi-byte character "c" and return the result.','line_number':2506,'multiline':False]['text':' found matching entry','line_number':2518,'multiline':False]['text':' no entry found, return "c" unmodified','line_number':2526,'multiline':False]['text':' we init with a one-to-one map','line_number':2532,'multiline':False]['text':'/ Called when langmap option is set; the language map can be','line_number':2537,'multiline':False]['text':'/ changed at any time!','line_number':2538,'multiline':False]['text':' clear the previous map first','line_number':2541,'multiline':False]['text':' back to one-to-one map','line_number':2542,'multiline':False]['text':' abcd;ABCD form, p2 points to A','line_number':2553,'multiline':False]['text':' aAbBcCdD form, p2 is NULL','line_number':2555,'multiline':False]['text':' Advance to next pair','line_number':2597,'multiline':False]['text':'/ ":abbreviate" and friends.','line_number':2638,'multiline':False]['text':' almost the same as mapping','line_number':2641,'multiline':False]['text':'/ ":map" and friends.','line_number':2644,'multiline':False]['text':' If we are in a secure mode we print the mappings for security reasons.','line_number':2647,'multiline':False]['text':'/ ":unmap" and friends.','line_number':2656,'multiline':False]['text':'/ ":mapclear" and friends.','line_number':2662,'multiline':False]['text':'/ ":abclear" and friends.','line_number':2668,'multiline':False]['text':'/ Set, tweak, or remove a mapping in a mode. Acts as the implementation for','line_number':2674,'multiline':False]['text':'/ functions like @ref nvim_buf_set_keymap.','line_number':2675,'multiline':False]['text':'/','line_number':2676,'multiline':False]['text':'/ Arguments are handled like @ref nvim_set_keymap unless noted.','line_number':2677,'multiline':False]['text':'/ @param  buffer    Buffer handle for a specific buffer, or 0 for the current','line_number':2678,'multiline':False]['text':'/                   buffer, or -1 to signify global behavior ("all buffers")','line_number':2679,'multiline':False]['text':'/ @param  is_unmap  When true, removes the mapping that matches {lhs}.','line_number':2680,'multiline':False]['text':' integer value of the mapping mode, to be passed to do_map()','line_number':2735,'multiline':False]['text':' assume that the user wants RHS to be a <Nop>','line_number':2760,'multiline':False]['text':' should never happen','line_number':2763,'multiline':False]['text':' buf_do_map() reads noremap/unmap as its own argument.','line_number':2775,'multiline':False]['text':' switch','line_number':2799,'multiline':False]['text':'/ Get an array containing dictionaries describing mappings','line_number':2809,'multiline':False]['text':'/ based on mode and buffer id','line_number':2810,'multiline':False]['text':'/','line_number':2811,'multiline':False]['text':'/ @param  mode  The abbreviation for the mode','line_number':2812,'multiline':False]['text':'/ @param  buf  The buffer to get the mapping array. NULL for global','line_number':2813,'multiline':False]['text':'/ @returns Array of maparg()-like dictionaries describing mappings','line_number':2814,'multiline':False]['text':' Convert the string mode to the integer mode','line_number':2819,'multiline':False]['text':' that is stored within each mapblock','line_number':2820,'multiline':False]['text':' Determine the desired buffer value','line_number':2824,'multiline':False]['text':' Check for correct mode','line_number':2834,'multiline':False]