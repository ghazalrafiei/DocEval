['text':'/ Describe data to return from find_some_match()','line_number':119,'multiline':False]['text':'/< Data for match().','line_number':121,'multiline':False]['text':'/< Data for matchend().','line_number':122,'multiline':False]['text':'/< Data for matchlist().','line_number':123,'multiline':False]['text':'/< Data for matchstr().','line_number':124,'multiline':False]['text':'/< Data for matchstrpos().','line_number':125,'multiline':False]['text':' This prevents MSVC from replacing the functions with intrinsics,','line_number':132,'multiline':False]['text':' and causing errors when trying to get their addresses in funcs.generated.h','line_number':133,'multiline':False]['text':'/ Dummy va_list for passing to vim_snprintf','line_number':158,'multiline':False]['text':'/','line_number':159,'multiline':False]['text':'/ Used because:','line_number':160,'multiline':False]['text':'/ - passing a NULL pointer doesn't work when va_list isn't a pointer','line_number':161,'multiline':False]['text':'/ - locally in the function results in a "used before set" warning','line_number':162,'multiline':False]['text':'/ - using va_start() to initialize it gives "function with fixed args" error','line_number':163,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of internal','line_number':166,'multiline':False]['text':'/ or user defined function names.','line_number':167,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of internal or','line_number':202,'multiline':False]['text':'/ user defined variable or function names.','line_number':203,'multiline':False]['text':'/ Find internal function in hash functions','line_number':220,'multiline':False]['text':'/','line_number':221,'multiline':False]['text':'/ @param[in]  name  Name of the function.','line_number':222,'multiline':False]['text':'/','line_number':223,'multiline':False]['text':'/ @return  pointer to the function definition or NULL if not found.','line_number':224,'multiline':False]['text':'/ Check the argument count to use for internal function "fdef".','line_number':233,'multiline':False]['text':'/ @return  -1 for failure, 0 if no method base accepted, 1 if method base is','line_number':234,'multiline':False]['text':'/ first argument, 2 if method base is second argument, etc.','line_number':235,'multiline':False]['text':'/ Invoke a method for base->method().','line_number':275,'multiline':False]['text':'/ @return  true for a non-zero Number and a non-empty String.','line_number':306,'multiline':False]['text':'/ Apply a floating point C function on a typval with one float_T.','line_number':318,'multiline':False]['text':'/','line_number':319,'multiline':False]['text':'/ Some versions of glibc on i386 have an optimization that makes it harder to','line_number':320,'multiline':False]['text':'/ call math functions indirectly from inside an inlined function, causing','line_number':321,'multiline':False]['text':'/ compile-time errors. Avoid `inline` in that case. #3072','line_number':322,'multiline':False]['text':'/ "abs(expr)" function','line_number':370,'multiline':False]['text':'/ "add(list, item)" function','line_number':389,'multiline':False]['text':' Default: failed.','line_number':392,'multiline':False]['text':'/ "and(expr, expr)" function','line_number':417,'multiline':False]['text':'/ "api_info()" function','line_number':424,'multiline':False]['text':'/ "atan2()" function','line_number':431,'multiline':False]['text':'/ "browse(save, title, initdir, default)" function','line_number':445,'multiline':False]['text':'/ "browsedir(title, initdir)" function','line_number':452,'multiline':False]['text':'/ Get buffer by number or pattern.','line_number':458,'multiline':False]['text':' Ignore 'magic' and 'cpoptions' here to make scripts portable','line_number':477,'multiline':False]['text':' If not found, try expanding the name, like done for bufexists().','line_number':489,'multiline':False]['text':'/ Like tv_get_buf() but give an error message if the type is wrong.','line_number':497,'multiline':False]['text':'/ Get the buffer from "arg" and give an error and return NULL if it is not','line_number':509,'multiline':False]['text':'/ valid.','line_number':510,'multiline':False]['text':'/ "byte2line(byte)" function','line_number':522,'multiline':False]['text':'/ "call(func, arglist [, dict])" function','line_number':534,'multiline':False]['text':' TODO(tjdevries): UnifiedCallback','line_number':554,'multiline':False]['text':' type error, empty name or null function','line_number':562,'multiline':False]['text':'/ "changenr()" function','line_number':582,'multiline':False]['text':'/ "chanclose(id[, stream])" function','line_number':588,'multiline':False]['text':'/ "chansend(id, data)" function','line_number':627,'multiline':False]['text':' First argument is the channel id and second is the data to write','line_number':638,'multiline':False]['text':' Either the error has been handled by save_tv_as_string(),','line_number':664,'multiline':False]['text':' or there is no input to send.','line_number':665,'multiline':False]['text':'/ "char2nr(string)" function','line_number':675,'multiline':False]['text':'/ Get the current cursor column and store it in 'rettv'.','line_number':687,'multiline':False]['text':'/','line_number':688,'multiline':False]['text':'/ @return  the character index of the column if 'charcol' is true,','line_number':689,'multiline':False]['text':'/          otherwise the byte index of the column.','line_number':690,'multiline':False]['text':' use the window specified in the second argument','line_number':702,'multiline':False]['text':' '> can be MAXCOL, get the length of the line then','line_number':722,'multiline':False]['text':' col(".") when the cursor is on the NUL at the end of the line','line_number':730,'multiline':False]['text':' because of "coladd" can be seen as an extra column.','line_number':731,'multiline':False]['text':'/ "charcol()" function','line_number':752,'multiline':False]['text':'/ "chdir(dir)" function','line_number':758,'multiline':False]['text':' Returning an empty string means it failed.','line_number':765,'multiline':False]['text':' No error message, for historic reasons.','line_number':766,'multiline':False]['text':' Return the current directory','line_number':770,'multiline':False]['text':' Directory change failed','line_number':788,'multiline':False]['text':'/ "cindent(lnum)" function','line_number':793,'multiline':False]['text':'/ "col(string)" function','line_number':821,'multiline':False]['text':'/ "confirm(message, buttons[, default [, type]])" function','line_number':827,'multiline':False]['text':'/ "copy()" function','line_number':879,'multiline':False]['text':'/ Count the number of times "needle" occurs in string "haystack".','line_number':885,'multiline':False]['text':'/','line_number':886,'multiline':False]['text':'/ @param ic  ignore case','line_number':887,'multiline':False]['text':'/ Count the number of times item "needle" occurs in List "l" starting at index "idx".','line_number':919,'multiline':False]['text':'/','line_number':920,'multiline':False]['text':'/ @param ic  ignore case','line_number':921,'multiline':False]['text':'/ Count the number of times item "needle" occurs in Dict "d".','line_number':945,'multiline':False]['text':'/','line_number':946,'multiline':False]['text':'/ @param ic  ignore case','line_number':947,'multiline':False]['text':'/ "count()" function','line_number':965,'multiline':False]['text':'/ "ctxget([{index}])" function','line_number':1004,'multiline':False]['text':'/ "ctxpop()" function','line_number':1028,'multiline':False]['text':'/ "ctxpush([{types}])" function','line_number':1036,'multiline':False]['text':'/ "ctxset({context}[, {index}])" function','line_number':1067,'multiline':False]['text':'/ "ctxsize()" function','line_number':1110,'multiline':False]['text':'/ Set the cursor position.','line_number':1117,'multiline':False]['text':'/ If "charcol" is true, then use the column number as a character offset.','line_number':1118,'multiline':False]['text':'/ Otherwise use the column number as a byte offset.','line_number':1119,'multiline':False]['text':' type error; errmsg already given','line_number':1164,'multiline':False]['text':' Make sure the cursor is in a valid position.','line_number':1174,'multiline':False]['text':' Correct cursor for multi-byte character.','line_number':1176,'multiline':False]['text':'/ "cursor(lnum, col)" function, or','line_number':1183,'multiline':False]['text':'/ "cursor(list)"','line_number':1184,'multiline':False]['text':'/','line_number':1185,'multiline':False]['text':'/ Moves the cursor to the specified line and column.','line_number':1186,'multiline':False]['text':'/','line_number':1187,'multiline':False]['text':'/ @return  0 when the position could be set, -1 otherwise.','line_number':1188,'multiline':False]['text':'/ "debugbreak()" function','line_number':1194,'multiline':False]['text':'/ "deepcopy()" function','line_number':1218,'multiline':False]['text':'/ "delete()" function','line_number':1233,'multiline':False]['text':' delete a file','line_number':1256,'multiline':False]['text':' delete an empty directory','line_number':1259,'multiline':False]['text':' delete a directory recursively','line_number':1262,'multiline':False]['text':'/ dictwatcheradd(dict, key, funcref) function','line_number':1269,'multiline':False]['text':'/ dictwatcherdel(dict, key, funcref) function','line_number':1307,'multiline':False]['text':'/ "did_filetype()" function','line_number':1342,'multiline':False]['text':'/ "diff_filler()" function','line_number':1348,'multiline':False]['text':'/ "diff_hlID()" function','line_number':1354,'multiline':False]['text':' ignore type error in {lnum} arg','line_number':1365,'multiline':False]['text':' New line, buffer, change: need to get the values.','line_number':1371,'multiline':False]['text':' added line','line_number':1379,'multiline':False]['text':' changed line','line_number':1381,'multiline':False]['text':' added line','line_number':1384,'multiline':False]['text':' Ignore type error in {col}.','line_number':1395,'multiline':False]['text':' Changed text.','line_number':1397,'multiline':False]['text':' Changed line.','line_number':1399,'multiline':False]['text':'/ "empty({expr})" function','line_number':1405,'multiline':False]['text':'/ "environ()" function','line_number':1455,'multiline':False]['text':' Upper-case all the keys for Windows so we can detect duplicates','line_number':1479,'multiline':False]['text':' Since we're traversing from the end of the env block to the front, any','line_number':1488,'multiline':False]['text':' duplicate names encountered should be ignored.  This preserves the','line_number':1489,'multiline':False]['text':' semantics of env vars defined later in the env block taking precedence.','line_number':1490,'multiline':False]['text':'/ "escape({string}, {chars})" function','line_number':1500,'multiline':False]['text':'/ "getenv()" function','line_number':1510,'multiline':False]['text':'/ "eval()" function','line_number':1524,'multiline':False]['text':'/ "eventhandler()" function','line_number':1545,'multiline':False]['text':'/ "executable()" function','line_number':1551,'multiline':False]['text':' Check in $PATH and also check directly if there is a directory name','line_number':1558,'multiline':False]['text':' prevent leading spaces','line_number':1621,'multiline':False]['text':' "silent reg" or "silent echo x" leaves msg_col somewhere in the line.','line_number':1641,'multiline':False]['text':' When not working silently: put it in column zero.  A following','line_number':1643,'multiline':False]['text':' "echon" will overwrite the message, unavoidably.','line_number':1644,'multiline':False]['text':' When working silently: Put it back where it was, since nothing','line_number':1647,'multiline':False]['text':' should have been written.','line_number':1648,'multiline':False]['text':'/ "execute(command)" function','line_number':1659,'multiline':False]['text':'/ "exepath()" function','line_number':1665,'multiline':False]['text':'/ "exists()" function','line_number':1686,'multiline':False]['text':' Environment variable.','line_number':1692,'multiline':False]['text':' First try "normal" environment variables (fast).','line_number':1693,'multiline':False]['text':' Try expanding things like $VIM and ${HOME}.','line_number':1697,'multiline':False]['text':' Option.','line_number':1704,'multiline':False]['text':' Trailing garbage.','line_number':1707,'multiline':False]['text':' Internal or user defined function.','line_number':1709,'multiline':False]['text':' Internal variable.','line_number':1721,'multiline':False]['text':'/ "expand()" function','line_number':1728,'multiline':False]['text':' avoid using 'completeslash' here','line_number':1736,'multiline':False]['text':' When the optional second argument is non-zero, don't remove matches','line_number':1771,'multiline':False]['text':' for 'wildignore' and don't put matches for 'suffixes' at the end.','line_number':1772,'multiline':False]['text':'/ "menu_get(path [, modes])" function','line_number':1803,'multiline':False]['text':'/ "expandcmd()" function','line_number':1815,'multiline':False]['text':'/ Expand all the special characters in a command string.','line_number':1816,'multiline':False]['text':'/ "flatten()" and "flattennew()" functions','line_number':1854,'multiline':False]['text':'/ "flatten(list[, {maxdepth}])" function','line_number':1901,'multiline':False]['text':'/ "flattennew(list[, {maxdepth}])" function','line_number':1907,'multiline':False]['text':'/ extend() a List. Append List argvars[1] to List argvars[0] before index','line_number':1913,'multiline':False]['text':'/ argvars[3] and return the resulting list in "rettv".','line_number':1914,'multiline':False]['text':'/','line_number':1915,'multiline':False]['text':'/ @param is_new  true for extendnew()','line_number':1916,'multiline':False]['text':' Type error; errmsg already given.','line_number':1935,'multiline':False]['text':'/ extend() a Dict. Append Dict argvars[1] to Dict argvars[0] and return the','line_number':1964,'multiline':False]['text':'/ resulting Dict in "rettv".','line_number':1965,'multiline':False]['text':'/','line_number':1966,'multiline':False]['text':'/ @param is_new  true for extendnew()','line_number':1967,'multiline':False]['text':' Do nothing','line_number':1977,'multiline':False]['text':' Check the third argument.','line_number':1988,'multiline':False]['text':' Type error; error message already given.','line_number':1994,'multiline':False]['text':'/ "extend()" or "extendnew()" function.','line_number':2022,'multiline':False]['text':'/','line_number':2023,'multiline':False]['text':'/ @param is_new  true for extendnew()','line_number':2024,'multiline':False]['text':'/ "extend(list, list [, idx])" function','line_number':2036,'multiline':False]['text':'/ "extend(dict, dict [, action])" function','line_number':2037,'multiline':False]['text':'/ "extendnew(list, list [, idx])" function','line_number':2044,'multiline':False]['text':'/ "extendnew(dict, dict [, action])" function','line_number':2045,'multiline':False]['text':'/ "feedkeys()" function','line_number':2052,'multiline':False]['text':' This is not allowed in the sandbox.  If the commands would still be','line_number':2055,'multiline':False]['text':' executed in the sandbox it would be OK, but it probably happens later,','line_number':2056,'multiline':False]['text':' when "sandbox" is no longer set.','line_number':2057,'multiline':False]['text':'/ "filereadable()" function','line_number':2073,'multiline':False]['text':'/ @return  0 for not writable','line_number':2081,'multiline':False]['text':'/          1 for writable file','line_number':2082,'multiline':False]['text':'/          2 for a dir which we have rights to write into.','line_number':2083,'multiline':False]['text':'/ "finddir({fname}[, {path}[, {count}]])" function','line_number':2155,'multiline':False]['text':'/ "findfile({fname}[, {path}[, {count}]])" function','line_number':2161,'multiline':False]['text':'/ "float2nr({float})" function','line_number':2167,'multiline':False]['text':'/ "fmod()" function','line_number':2185,'multiline':False]['text':'/ "fnameescape({string})" function','line_number':2199,'multiline':False]['text':'/ "fnamemodify({fname}, {mods})" function','line_number':2206,'multiline':False]['text':'/ "foreground()" function','line_number':2234,'multiline':False]['text':'/ "garbagecollect()" function','line_number':2249,'multiline':False]['text':' This is postponed until we are back at the toplevel, because we may be','line_number':2252,'multiline':False]['text':' using Lists and Dicts internally.  E.g.: ":echo [garbagecollect()]".','line_number':2253,'multiline':False]['text':'/ "get()" function','line_number':2261,'multiline':False]['text':' use <SNR> instead of the byte code','line_number':2324,'multiline':False]['text':' When {what} == "dict" and pt->pt_dict == NULL, evaluate the','line_number':2343,'multiline':False]['text':' third argument','line_number':2344,'multiline':False]['text':'/ "getchangelist()" function','line_number':2362,'multiline':False]['text':' issue errmsg if type error','line_number':2371,'multiline':False]['text':' The current window change list index tracks only the position for the','line_number':2382,'multiline':False]['text':' current buffer. For other buffers use the stored index for the current','line_number':2383,'multiline':False]['text':' window, or, if that's not available, the change list length.','line_number':2384,'multiline':False]['text':' Do not change "curswant", as it is unexpected that a get','line_number':2456,'multiline':False]['text':' function has a side effect.','line_number':2457,'multiline':False]['text':'/ "getcharpos()" function','line_number':2467,'multiline':False]['text':'/ "getcharsearch()" function','line_number':2473,'multiline':False]['text':'/ `getcwd([{win}[, {tab}]])` function','line_number':2485,'multiline':False]['text':'/','line_number':2486,'multiline':False]['text':'/ Every scope not specified implies the currently selected scope object.','line_number':2487,'multiline':False]['text':'/','line_number':2488,'multiline':False]['text':'/ @pre  The arguments must be of type number.','line_number':2489,'multiline':False]['text':'/ @pre  There may not be more than two arguments.','line_number':2490,'multiline':False]['text':'/ @pre  An argument may not be -1 if preceding arguments are not all -1.','line_number':2491,'multiline':False]['text':'/','line_number':2492,'multiline':False]['text':'/ @post  The return value will be a string.','line_number':2493,'multiline':False]['text':' Possible scope of working directory to return.','line_number':2496,'multiline':False]['text':' Numbers of the scope objects (window, tab) we want the working directory','line_number':2499,'multiline':False]['text':' of. A `-1` means to skip this scope, a `0` means the current object.','line_number':2500,'multiline':False]['text':' Number of window to look at.','line_number':2502,'multiline':False]['text':' Number of tab to look at.','line_number':2503,'multiline':False]['text':' Current working directory to print','line_number':2506,'multiline':False]['text':' The original string to copy','line_number':2507,'multiline':False]['text':' The tabpage to look at.','line_number':2509,'multiline':False]['text':' The window to look at.','line_number':2510,'multiline':False]['text':' Pre-conditions and scope extraction together','line_number':2515,'multiline':False]['text':' If there is no argument there are no more scopes after it, break out.','line_number':2517,'multiline':False]['text':' It is an error for the scope number to be less than `-1`.','line_number':2526,'multiline':False]['text':' Use the narrowest scope the user requested','line_number':2531,'multiline':False]['text':' The scope is the current iteration step.','line_number':2533,'multiline':False]['text':' Find the tabpage by number','line_number':2540,'multiline':False]['text':' Find the window in `tp` by number, `NULL` if none.','line_number':2549,'multiline':False]['text':' `globaldir` is not always set.','line_number':2583,'multiline':False]['text':' In global directory, just need to get OS CWD.','line_number':2587,'multiline':False]['text':' If called without any arguments, get OS CWD.','line_number':2588,'multiline':False]['text':' Return empty string on failure.','line_number':2590,'multiline':False]['text':'/ "getfontname()" function','line_number':2606,'multiline':False]['text':'/ "getfperm({fname})" function','line_number':2613,'multiline':False]['text':'/ "getfsize({fname})" function','line_number':2633,'multiline':False]['text':' non-perfect check for overflow','line_number':2648,'multiline':False]['text':'/ "getftime({fname})" function','line_number':2658,'multiline':False]['text':'/ "getftype({fname})" function','line_number':2671,'multiline':False]['text':'/ "getjumplist()" function','line_number':2705,'multiline':False]['text':'/ "getmarklist()" function','line_number':2736,'multiline':False]['text':'/ "getpid()" function','line_number':2754,'multiline':False]['text':'/ "getcurpos(string)" function','line_number':2760,'multiline':False]['text':'/ "getpos(string)" function','line_number':2771,'multiline':False]['text':'/ Common between getreg(), getreginfo() and getregtype(): get the register','line_number':2777,'multiline':False]['text':'/ name from the first argument.','line_number':2778,'multiline':False]['text':'/ Returns zero on error.','line_number':2779,'multiline':False]['text':' type error; errmsg already given','line_number':2786,'multiline':False]['text':' Default to v:register','line_number':2790,'multiline':False]['text':'/ "getreg()" function','line_number':2797,'multiline':False]['text':'/ "getregtype()" function','line_number':2833,'multiline':False]['text':' on error return an empty string','line_number':2836,'multiline':False]['text':'/ "gettagstack()" function','line_number':2853,'multiline':False]['text':' default is current window','line_number':2856,'multiline':False]['text':'/ Dummy timer callback. Used by f_wait().','line_number':2870,'multiline':False]['text':'/ Dummy timer close callback. Used by f_wait().','line_number':2875,'multiline':False]['text':'/ "wait(timeout, condition[, interval])" function','line_number':2881,'multiline':False]['text':' Default.','line_number':2901,'multiline':False]['text':' Start dummy timer.','line_number':2904,'multiline':False]['text':' Flush screen updates before blocking.','line_number':2915,'multiline':False]['text':' Stop dummy timer','line_number':2933,'multiline':False]['text':'/ "glob()" function','line_number':2938,'multiline':False]['text':' When the optional second argument is non-zero, don't remove matches','line_number':2945,'multiline':False]['text':' for 'wildignore' and don't put matches for 'suffixes' at the end.','line_number':2946,'multiline':False]['text':'/ "globpath()" function','line_number':2986,'multiline':False]['text':' Flags for globpath.','line_number':2989,'multiline':False]['text':' Return a string, or a list if the optional third argument is non-zero.','line_number':2992,'multiline':False]['text':' When the optional second argument is non-zero, don't remove matches','line_number':2996,'multiline':False]['text':' for 'wildignore' and don't put matches for 'suffixes' at the end.','line_number':2997,'multiline':False]['text':'/ "glob2regpat()" function','line_number':3036,'multiline':False]['text':' NULL on type error','line_number':3039,'multiline':False]['text':'/ "gettext()" function','line_number':3045,'multiline':False]['text':'/ "has()" function','line_number':3056,'multiline':False]['text':' always present, of course!','line_number':3100,'multiline':False]['text':' was accidentally included in 5.4','line_number':3165,'multiline':False]['text':' XXX: eval_has_provider() may shell out :(','line_number':3185,'multiline':False]['text':' Expect "patch-9.9.01234".','line_number':3208,'multiline':False]['text':' Expect "nvim-x.y.z"','line_number':3218,'multiline':False]['text':'/ `haslocaldir([{win}[, {tab}]])` function','line_number':3265,'multiline':False]['text':'/','line_number':3266,'multiline':False]['text':'/ Returns `1` if the scope object has a local directory, `0` otherwise. If a','line_number':3267,'multiline':False]['text':'/ scope object is not specified the current one is implied. This function','line_number':3268,'multiline':False]['text':'/ share a lot of code with `f_getcwd`.','line_number':3269,'multiline':False]['text':'/','line_number':3270,'multiline':False]['text':'/ @pre  The arguments must be of type number.','line_number':3271,'multiline':False]['text':'/ @pre  There may not be more than two arguments.','line_number':3272,'multiline':False]['text':'/ @pre  An argument may not be -1 if preceding arguments are not all -1.','line_number':3273,'multiline':False]['text':'/','line_number':3274,'multiline':False]['text':'/ @post  The return value will be either the number `1` or `0`.','line_number':3275,'multiline':False]['text':' Possible scope of working directory to return.','line_number':3278,'multiline':False]['text':' Numbers of the scope objects (window, tab) we want the working directory','line_number':3281,'multiline':False]['text':' of. A `-1` means to skip this scope, a `0` means the current object.','line_number':3282,'multiline':False]['text':' Number of window to look at.','line_number':3284,'multiline':False]['text':' Number of tab to look at.','line_number':3285,'multiline':False]['text':' The tabpage to look at.','line_number':3288,'multiline':False]['text':' The window to look at.','line_number':3289,'multiline':False]['text':' Pre-conditions and scope extraction together','line_number':3294,'multiline':False]['text':' Use the narrowest scope the user requested','line_number':3308,'multiline':False]['text':' The scope is the current iteration step.','line_number':3310,'multiline':False]['text':' If the user didn't specify anything, default to window scope','line_number':3317,'multiline':False]['text':' Find the tabpage by number','line_number':3322,'multiline':False]['text':' Find the window in `tp` by number, `NULL` if none.','line_number':3331,'multiline':False]['text':' The global scope never has a local directory','line_number':3357,'multiline':False]['text':' We should never get here','line_number':3360,'multiline':False]['text':'/ "highlightID(name)" function','line_number':3365,'multiline':False]['text':'/ "highlight_exists()" function','line_number':3371,'multiline':False]['text':'/ "hostname()" function','line_number':3377,'multiline':False]['text':'/ "indent()" function','line_number':3387,'multiline':False]['text':'/ "index()" function','line_number':3398,'multiline':False]['text':' Start at specified item.','line_number':3449,'multiline':False]['text':'/ Evaluate "expr" with the v:key and v:val arguments and return the result.','line_number':3473,'multiline':False]['text':'/ The expression is expected to return a boolean value.  The caller should set','line_number':3474,'multiline':False]['text':'/ the VV_KEY and VV_VAL vim variables before calling this function.','line_number':3475,'multiline':False]['text':'/ Evaluate "expr" for each byte in the Blob "b" starting with the byte at','line_number':3495,'multiline':False]['text':'/ "startidx" and return the index of the byte where "expr" is TRUE.  Returns','line_number':3496,'multiline':False]['text':'/ -1 if "expr" doesn't evaluate to TRUE for any of the bytes.','line_number':3497,'multiline':False]['text':' negative index: index from the last byte','line_number':3505,'multiline':False]['text':'/ Evaluate "expr" for each item in the List "l" starting with the item at','line_number':3524,'multiline':False]['text':'/ "startidx" and return the index of the item where "expr" is TRUE.  Returns','line_number':3525,'multiline':False]['text':'/ -1 if "expr" doesn't evaluate to TRUE for any of the items.','line_number':3526,'multiline':False]['text':' Start at specified item.','line_number':3538,'multiline':False]['text':'/ "indexof()" function','line_number':3563,'multiline':False]['text':' We reset "did_emsg" to be able to detect whether an error occurred','line_number':3589,'multiline':False]['text':' during evaluation of the expression.','line_number':3590,'multiline':False]['text':'/ "input()" function','line_number':3607,'multiline':False]['text':'/     Also handles inputsecret() when inputsecret is set.','line_number':3608,'multiline':False]['text':'/ "inputdialog()" function','line_number':3614,'multiline':False]['text':'/ "inputlist()" function','line_number':3620,'multiline':False]['text':' for when 'cmdheight' > 1','line_number':3629,'multiline':False]['text':' avoid more prompt','line_number':3630,'multiline':False]['text':' Ask for choice.','line_number':3639,'multiline':False]['text':'/ "inputrestore()" function','line_number':3651,'multiline':False]['text':' default return is zero == OK','line_number':3658,'multiline':False]['text':' Failed','line_number':3661,'multiline':False]['text':'/ "inputsave()" function','line_number':3665,'multiline':False]['text':' Add an entry to the stack of typeahead storage.','line_number':3668,'multiline':False]['text':'/ "inputsecret()" function','line_number':3673,'multiline':False]['text':'/ "insert()" function','line_number':3683,'multiline':False]['text':' type error; errmsg already given','line_number':3703,'multiline':False]['text':' type error; errmsg already given','line_number':3739,'multiline':False]['text':'/ "interrupt()" function','line_number':3758,'multiline':False]['text':'/ "invert(expr)" function','line_number':3764,'multiline':False]['text':'/ "isdirectory()" function','line_number':3770,'multiline':False]['text':'/ "islocked()" function','line_number':3776,'multiline':False]['text':' Consider a variable locked when:','line_number':3794,'multiline':False]['text':' 1. the variable itself is locked','line_number':3795,'multiline':False]['text':' 2. the value of the variable is locked.','line_number':3796,'multiline':False]['text':' 3. the List or Dict value is locked.','line_number':3797,'multiline':False]['text':' List item.','line_number':3806,'multiline':False]['text':' Dictionary item.','line_number':3809,'multiline':False]['text':'/ "isinf()" function','line_number':3818,'multiline':False]['text':'/ "isnan()" function','line_number':3827,'multiline':False]['text':'/ "id()" function','line_number':3834,'multiline':False]['text':'/ "jobpid(id)" function','line_number':3844,'multiline':False]['text':'/ "jobresize(job, width, height)" function','line_number':3868,'multiline':False]['text':' job id, width, height','line_number':3880,'multiline':False]['text':'/ According to comments in src/win/process.c of libuv, Windows has a few','line_number':3913,'multiline':False]['text':'/ "essential" environment variables.','line_number':3914,'multiline':False]['text':' These environment variables generally shouldn't be propagated to the','line_number':3944,'multiline':False]['text':' child process.  We're removing them here so the user can still decide','line_number':3945,'multiline':False]['text':' they want to explicitly set them.','line_number':3946,'multiline':False]['text':' Set COLORTERM to "truecolor" if termguicolors is set','line_number':3956,'multiline':False]['text':' For a pty, we need a sane $TERM set.  We can't rely on nvim's environment,','line_number':3964,'multiline':False]['text':' because the child process is going to be communicating with nvim, not the','line_number':3965,'multiline':False]['text':' parent terminal.  Set a sane default, but let the user override it in the','line_number':3966,'multiline':False]['text':' job's environment if they want.','line_number':3967,'multiline':False]['text':' Set $NVIM (in the child process) to v:servername. #3118','line_number':3976,'multiline':False]['text':' Always use upper-case keys for Windows so we detect duplicate keys','line_number':3989,'multiline':False]['text':' Now that the custom environment is configured, we need to ensure certain','line_number':4005,'multiline':False]['text':' environment variables are present.','line_number':4006,'multiline':False]['text':'/ "jobstart()" function','line_number':4024,'multiline':False]['text':' Did error message in tv_to_argv.','line_number':4039,'multiline':False]['text':' Wrong argument types','line_number':4043,'multiline':False]['text':' Nothing to do, default value','line_number':4075,'multiline':False]['text':' The new cwd must be a directory.','line_number':4099,'multiline':False]['text':' Legacy method, before env option existed, to specify $TERM.  No longer','line_number':4126,'multiline':False]['text':' documented, but still usable to avoid breaking scripts.','line_number':4127,'multiline':False]['text':'/ "jobstop()" function','line_number':4144,'multiline':False]['text':' Only argument is the job id','line_number':4155,'multiline':False]['text':' Ignore return code, but show error later.','line_number':4167,'multiline':False]['text':'/ "jobwait(ids[, timeout])" function','line_number':4177,'multiline':False]['text':' Validate, prepare jobs for waiting.','line_number':4198,'multiline':False]['text':' Invalid job.','line_number':4205,'multiline':False]['text':' Job is stopped but not fully destroyed.','line_number':4207,'multiline':False]['text':' Ensure all callbacks on its event queue are executed. #15402','line_number':4208,'multiline':False]['text':' Invalid job.','line_number':4210,'multiline':False]['text':' Flush any events in the job's queue before temporarily replacing it.','line_number':4215,'multiline':False]['text':' Timeout.','line_number':4232,'multiline':False]['text':' Invalid job, will assign status=-3 below.','line_number':4235,'multiline':False]['text':' Interrupted (CTRL-C) or timeout, skip remaining jobs.','line_number':4240,'multiline':False]['text':' For each job:','line_number':4251,'multiline':False]['text':'  * Restore its parent queue if the job is still alive.','line_number':4252,'multiline':False]['text':'  * Append its status to the output list, or:','line_number':4253,'multiline':False]['text':'       -3 for "invalid job id"','line_number':4254,'multiline':False]['text':'       -2 for "interrupted" (user hit CTRL-C)','line_number':4255,'multiline':False]['text':'       -1 for jobs that were skipped or timed out','line_number':4256,'multiline':False]['text':'/ json_decode() function','line_number':4277,'multiline':False]['text':'/ json_encode() function','line_number':4311,'multiline':False]['text':'/ "keytrans()" function','line_number':4318,'multiline':False]['text':' Need to escape K_SPECIAL for mb_unescape().','line_number':4326,'multiline':False]['text':'/ "last_buffer_nr()" function.','line_number':4332,'multiline':False]['text':'/ "len()" function','line_number':4346,'multiline':False]['text':' The first two args (libname and funcname) must be strings','line_number':4385,'multiline':False]['text':' input variables','line_number':4395,'multiline':False]['text':' output variables','line_number':4399,'multiline':False]['text':'/ "libcall()" function','line_number':4417,'multiline':False]['text':'/ "libcallnr()" function','line_number':4423,'multiline':False]['text':'/ "line(string, [winid])" function','line_number':4429,'multiline':False]['text':' use window specified in the second argument','line_number':4437,'multiline':False]['text':' use current window','line_number':4450,'multiline':False]['text':'/ "line2byte(lnum)" function','line_number':4460,'multiline':False]['text':'/ "lispindent(lnum)" function','line_number':4474,'multiline':False]['text':'/ "localtime()" function','line_number':4488,'multiline':False]['text':'/ luaeval() function implementation','line_number':4494,'multiline':False]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':4521,'multiline':False]['text':' matchlist(): return empty list when there are no matches.','line_number':4527,'multiline':False]['text':' matchstrpos(): return ["", -1, -1, -1]','line_number':4531,'multiline':False]['text':' Do nothing: zero is default.','line_number':4545,'multiline':False]['text':' When "count" argument is there ignore matches before "start",','line_number':4586,'multiline':False]['text':' otherwise skip part of the string.  Differs when pattern is "^"','line_number':4587,'multiline':False]['text':' or "\<".','line_number':4588,'multiline':False]['text':' Advance to just after the match.','line_number':4631,'multiline':False]['text':' Return list with matched string and submatches.','line_number':4665,'multiline':False]['text':' Return matched string.','line_number':4676,'multiline':False]['text':' matchstrpos() without a list: drop the second item','line_number':4705,'multiline':False]['text':'/ "match()" function','line_number':4714,'multiline':False]['text':'/ "matchend()" function','line_number':4720,'multiline':False]['text':'/ "matchlist()" function','line_number':4726,'multiline':False]['text':'/ "matchstr()" function','line_number':4732,'multiline':False]['text':'/ "matchstrpos()" function','line_number':4738,'multiline':False]['text':'/ Get maximal/minimal number value in a list or dictionary','line_number':4744,'multiline':False]['text':'/','line_number':4745,'multiline':False]['text':'/ @param[in]  tv  List or dictionary to work with. If it contains something','line_number':4746,'multiline':False]['text':'/                 that is not an integer number (or cannot be coerced to','line_number':4747,'multiline':False]['text':'/                 it) error is given.','line_number':4748,'multiline':False]['text':'/ @param[out]  rettv  Location where result will be saved. Only assigns','line_number':4749,'multiline':False]['text':'/                     vval.v_number, type is not touched. Returns zero for','line_number':4750,'multiline':False]['text':'/                     empty lists/dictionaries.','line_number':4751,'multiline':False]['text':'/ @param[in]  domax  Determines whether maximal or minimal value is desired.','line_number':4752,'multiline':False]['text':' type error; errmsg already given','line_number':4767,'multiline':False]['text':' type error; errmsg already given','line_number':4780,'multiline':False]['text':'/ "max()" function','line_number':4794,'multiline':False]['text':'/ "min()" function','line_number':4800,'multiline':False]['text':'/ "mkdir()" function','line_number':4806,'multiline':False]['text':' Remove trailing slashes.','line_number':4823,'multiline':False]['text':' Handle "D" and "R": deferred deletion of the created directory.','line_number':4861,'multiline':False]['text':'/ "mode()" function','line_number':4878,'multiline':False]['text':' Clear out the minor mode when the argument is not a non-zero number or','line_number':4885,'multiline':False]['text':' non-empty string.','line_number':4886,'multiline':False]['text':'/ "state()" function','line_number':4902,'multiline':False]['text':'/ "msgpackdump()" function','line_number':4939,'multiline':False]['text':' Assume that translation will not take more then 4 times more space','line_number':4958,'multiline':False]['text':'/ "msgpackparse" function','line_number':5079,'multiline':False]['text':'/ "nextnonblank()" function','line_number':5095,'multiline':False]['text':'/ "nr2char()" function','line_number':5112,'multiline':False]['text':'/ "or(expr, expr)" function','line_number':5143,'multiline':False]['text':'/ "pathshorten()" function','line_number':5150,'multiline':False]['text':'/ "pow()" function','line_number':5172,'multiline':False]['text':'/ "prevnonblank()" function','line_number':5186,'multiline':False]['text':'/ "printf()" function','line_number':5200,'multiline':False]['text':' Get the required length, allocate the buffer and do it for real.','line_number':5208,'multiline':False]['text':'/ "prompt_setcallback({buffer}, {callback})" function','line_number':5222,'multiline':False]['text':'/ "prompt_setinterrupt({buffer}, {callback})" function','line_number':5245,'multiline':False]['text':'/ "prompt_getprompt({buffer})" function','line_number':5268,'multiline':False]['text':' return an empty string by default, e.g. it's not a prompt buffer','line_number':5272,'multiline':False]['text':'/ "prompt_setprompt({buffer}, {text})" function','line_number':5288,'multiline':False]['text':'/ "pum_getpos()" function','line_number':5304,'multiline':False]['text':'/ "pumvisible()" function','line_number':5311,'multiline':False]['text':'/ "py3eval()" and "pyxeval()" functions (always python3)','line_number':5319,'multiline':False]['text':' FAIL or OK once tried','line_number':5329,'multiline':False]['text':' Attempt reading /dev/urandom.','line_number':5340,'multiline':False]['text':' Reading /dev/urandom doesn't work, fall back to os_hrtime() XOR with process ID','line_number':5355,'multiline':False]['text':' uncrustify:off','line_number':5357,'multiline':False]['text':' uncrustify:on','line_number':5363,'multiline':False]['text':'/ "rand()" function','line_number':5392,'multiline':False]['text':' When no argument is given use the global seed list.','line_number':5401,'multiline':False]['text':' Initialize the global seed list.','line_number':5403,'multiline':False]['text':'/ "srand()" function','line_number':5462,'multiline':False]['text':'/ "perleval()" function','line_number':5484,'multiline':False]['text':'/ "rubyeval()" function','line_number':5490,'multiline':False]['text':'/ "range()" function','line_number':5496,'multiline':False]['text':' Type error; errmsg already given.','line_number':5515,'multiline':False]['text':'/ Evaluate "expr" (= "context") for readdir().','line_number':5532,'multiline':False]['text':'/ "readdir()" function','line_number':5569,'multiline':False]['text':'/ "readfile()" or "readblob()" function','line_number':5587,'multiline':False]['text':' rounded to avoid odd + 1','line_number':5593,'multiline':False]['text':' previously read bytes, if any','line_number':5595,'multiline':False]['text':' length of data in prev','line_number':5596,'multiline':False]['text':' size of prev buffer','line_number':5597,'multiline':False]['text':' Always open the file in binary mode, library functions have a mind of','line_number':5620,'multiline':False]['text':' their own about CR-LF conversion.','line_number':5621,'multiline':False]['text':' This for loop processes what was read, but is also entered at end','line_number':5647,'multiline':False]['text':' of file so that either:','line_number':5648,'multiline':False]['text':' - an incomplete line gets written','line_number':5649,'multiline':False]['text':' - a "binary" file gets an empty line at the end if it ends in a','line_number':5650,'multiline':False]['text':'   newline.','line_number':5651,'multiline':False]['text':' Position in buf.','line_number':5652,'multiline':False]['text':' Start of current line.','line_number':5653,'multiline':False]['text':' Finished a line.  Remove CRs before NL.','line_number':5661,'multiline':False]['text':' removal may cross back to the "prev" string','line_number':5666,'multiline':False]['text':' Change "prev" buffer to be the right size.  This way','line_number':5677,'multiline':False]['text':' the bytes are only copied once, and very long lines are','line_number':5678,'multiline':False]['text':' allocated only once.','line_number':5679,'multiline':False]['text':' the list will own the string','line_number':5683,'multiline':False]['text':' Step over newline.','line_number':5693,'multiline':False]['text':' Check for utf8 "bom"; U+FEFF is encoded as EF BB BF.  Do this','line_number':5708,'multiline':False]['text':' when finding the BF and check the previous two bytes.','line_number':5709,'multiline':False]['text':' Find the two bytes before the 0xbf.  If p is at buf, or buf + 1,','line_number':5711,'multiline':False]['text':' these may be in the "prev" string.','line_number':5712,'multiline':False]['text':' Usually a BOM is at the beginning of a file, and so at','line_number':5723,'multiline':False]['text':' the beginning of a line; then we can just step over it.','line_number':5724,'multiline':False]['text':' have to shuffle buf to close gap','line_number':5728,'multiline':False]['text':' adjust_prevlen must be 1 or 2.','line_number':5732,'multiline':False]['text':' for','line_number':5745,'multiline':False]['text':' There's part of a line in buf, store it in "prev".','line_number':5751,'multiline':False]['text':' A common use case is ordinary text files and "prev" gets a','line_number':5753,'multiline':False]['text':' fragment of a line, so the first allocation is made','line_number':5754,'multiline':False]['text':' small, to avoid repeatedly 'allocing' large and','line_number':5755,'multiline':False]['text':' 'reallocing' small.','line_number':5756,'multiline':False]['text':' Add the line part to end of "prev".','line_number':5766,'multiline':False]['text':' while','line_number':5770,'multiline':False]['text':'/ "readblob()" function','line_number':5776,'multiline':False]['text':'/ "readfile()" function','line_number':5782,'multiline':False]['text':'/ "getreginfo()" function','line_number':5788,'multiline':False]['text':'/ "reg_executing()" function','line_number':5838,'multiline':False]['text':'/ "reg_recording()" function','line_number':5844,'multiline':False]['text':'/ list2proftime - convert a List to proftime_T','line_number':5855,'multiline':False]['text':'/','line_number':5856,'multiline':False]['text':'/ @param arg The input list, must be of type VAR_LIST and have','line_number':5857,'multiline':False]['text':'/            exactly 2 items','line_number':5858,'multiline':False]['text':'/ @param[out] tm The proftime_T representation of `arg`','line_number':5859,'multiline':False]['text':'/ @return OK In case of success, FAIL in case of error','line_number':5860,'multiline':False]['text':' in f_reltime() we split up the 64-bit proftime_T into two 32-bit','line_number':5874,'multiline':False]['text':' values, now we combine them again.','line_number':5875,'multiline':False]['text':'/ f_reltime - return an item that represents a time value','line_number':5886,'multiline':False]['text':'/','line_number':5887,'multiline':False]['text':'/ @param[out] rettv Without an argument it returns the current time. With','line_number':5888,'multiline':False]['text':'/             one argument it returns the time passed since the argument.','line_number':5889,'multiline':False]['text':'/             With two arguments it returns the time passed between','line_number':5890,'multiline':False]['text':'/             the two arguments.','line_number':5891,'multiline':False]['text':' no arguments: get current time.','line_number':5898,'multiline':False]['text':' two arguments: compute the difference.','line_number':5906,'multiline':False]['text':' we have to store the 64-bit proftime_T inside of a list of int's','line_number':5914,'multiline':False]['text':' (varnumber_T is defined as int). For all our supported platforms, int's','line_number':5915,'multiline':False]['text':' are at least 32-bits wide. So we'll use two 32-bit values to store it.','line_number':5916,'multiline':False]['text':' statically assert that the union type conv will provide the correct','line_number':5922,'multiline':False]['text':' results, if varnumber_T or proftime_T change, the union cast will need','line_number':5923,'multiline':False]['text':' to be revised.','line_number':5924,'multiline':False]['text':'/ "reltimestr()" function','line_number':5933,'multiline':False]['text':'/ "remove()" function','line_number':5946,'multiline':False]['text':'/ "rename({from}, {to})" function','line_number':5962,'multiline':False]['text':'/ "repeat()" function','line_number':5974,'multiline':False]['text':' No need to copy since all bytes are already zero','line_number':6007,'multiline':False]['text':' Detect overflow.','line_number':6028,'multiline':False]['text':'/ "resolve()" function','line_number':6042,'multiline':False]['text':' The trailing slash breaks readlink().','line_number':6072,'multiline':False]['text':' Separate the first path component in "p", and keep the','line_number':6078,'multiline':False]['text':' remainder (beginning with the path separator).','line_number':6079,'multiline':False]['text':' Ensure that the result will have a trailing path separator','line_number':6104,'multiline':False]['text':' if the argument has one.','line_number':6105,'multiline':False]['text':' Separate the first path component in the link value and','line_number':6110,'multiline':False]['text':' concatenate the remainders.','line_number':6111,'multiline':False]['text':' Ignore trailing path separator.','line_number':6124,'multiline':False]['text':' Symlink is relative to directory of argument. Replace the','line_number':6129,'multiline':False]['text':' symlink with the resolved name in the same directory.','line_number':6130,'multiline':False]['text':' Append the first path component of "remain" to "p".','line_number':6145,'multiline':False]['text':' Shorten "remain".','line_number':6155,'multiline':False]['text':' If the result is a relative path name, make it explicitly relative to','line_number':6163,'multiline':False]['text':' the current directory if and only if the argument had this form.','line_number':6164,'multiline':False]['text':' Prepend "./".','line_number':6174,'multiline':False]['text':' Strip leading "./".','line_number':6179,'multiline':False]['text':' Ensure that the result will have no trailing path separator','line_number':6190,'multiline':False]['text':' if the argument had none.  But keep "/" or "//".','line_number':6191,'multiline':False]['text':'/ "reverse({list})" function','line_number':6211,'multiline':False]['text':'/ Implementation of reduce() for list "argvars[0]", using the function "expr"','line_number':6245,'multiline':False]['text':'/ starting with the optional initial value argvars[2] and return the result in','line_number':6246,'multiline':False]['text':'/ "rettv".','line_number':6247,'multiline':False]['text':' disallow the list changing here','line_number':6276,'multiline':False]['text':'/ Implementation of reduce() for String "argvars[0]" using the function "expr"','line_number':6293,'multiline':False]['text':'/ starting with the optional initial value "argvars[2]" and return the result','line_number':6294,'multiline':False]['text':'/ in "rettv".','line_number':6295,'multiline':False]['text':'/ Implementation of reduce() for Blob "argvars[0]" using the function "expr"','line_number':6340,'multiline':False]['text':'/ starting with the optional initial value "argvars[2]" and return the result','line_number':6341,'multiline':False]['text':'/ in "rettv".','line_number':6342,'multiline':False]['text':'/ "reduce(list, { accumulator, element -> value } [, initial])" function','line_number':6386,'multiline':False]['text':'/ "reduce(blob, { accumulator, element -> value } [, initial])" function','line_number':6387,'multiline':False]['text':'/ "reduce(string, { accumulator, element -> value } [, initial])" function','line_number':6388,'multiline':False]['text':'/< don't move cursor','line_number':6420,'multiline':False]['text':'/< repeat to find outer pair','line_number':6421,'multiline':False]['text':'/< return matchcount','line_number':6422,'multiline':False]['text':'/< set previous context mark','line_number':6423,'multiline':False]['text':'/< accept match at start position','line_number':6424,'multiline':False]['text':'/< return nr of matching sub-pattern','line_number':6425,'multiline':False]['text':'/< leave cursor at end of match','line_number':6426,'multiline':False]['text':'/< start at cursor column','line_number':6427,'multiline':False]['text':'/ Get flags for a search function.','line_number':6429,'multiline':False]['text':'/ Possibly sets "p_ws".','line_number':6430,'multiline':False]['text':'/','line_number':6431,'multiline':False]['text':'/ @return  BACKWARD, FORWARD or zero (for an error).','line_number':6432,'multiline':False]['text':' Type error; errmsg already given.','line_number':6444,'multiline':False]['text':'/ Shared by search() and searchpos() functions.','line_number':6492,'multiline':False]['text':' default: FAIL','line_number':6496,'multiline':False]['text':' May set p_ws.','line_number':6503,'multiline':False]['text':' Optional arguments: line number to stop searching, timeout and skip.','line_number':6518,'multiline':False]['text':' Set the time limit, if there is one.','line_number':6533,'multiline':False]['text':' This function does not accept SP_REPEAT and SP_RETCOUNT flags.','line_number':6536,'multiline':False]['text':' Check to make sure only those flags are set.','line_number':6537,'multiline':False]['text':' Also, Only the SP_NOMOVE or the SP_SETPCMARK flag can be set. Both','line_number':6538,'multiline':False]['text':' flags cannot be set. Check for that condition also.','line_number':6539,'multiline':False]['text':' Repeat until {skip} returns false.','line_number':6556,'multiline':False]['text':' finding the first match again means there is no match where {skip}','line_number':6560,'multiline':False]['text':' evaluates to zero.','line_number':6561,'multiline':False]['text':' didn't find it or no skip argument','line_number':6567,'multiline':False]['text':' If the skip expression matches, ignore this match.','line_number':6574,'multiline':False]['text':' Evaluating {skip} caused an error, break here.','line_number':6583,'multiline':False]['text':' clear the start flag to avoid getting stuck here','line_number':6592,'multiline':False]['text':' Store the match cursor position','line_number':6607,'multiline':False]['text':' "/$" will put the cursor after the end of the line, may need to','line_number':6611,'multiline':False]['text':' correct that here','line_number':6612,'multiline':False]['text':' If 'n' flag is used: restore cursor position.','line_number':6616,'multiline':False]['text':'/ "rpcnotify()" function','line_number':6628,'multiline':False]['text':'/ "rpcrequest()" function','line_number':6666,'multiline':False]['text':' If this is called from a provider function, restore the scope','line_number':6700,'multiline':False]['text':' information of the caller.','line_number':6701,'multiline':False]['text':'/ "rpcstart()" function (DEPRECATED)','line_number':6762,'multiline':False]['text':' Wrong argument types','line_number':6774,'multiline':False]['text':' Assert that all list items are strings','line_number':6784,'multiline':False]['text':' Allocate extra memory for the argument vector and the NULL pointer','line_number':6801,'multiline':False]['text':' Copy program name','line_number':6805,'multiline':False]['text':' Copy arguments to the vector','line_number':6809,'multiline':False]['text':' The last item of argv must be NULL','line_number':6816,'multiline':False]['text':'/ "rpcstop()" function','line_number':6829,'multiline':False]['text':' Wrong argument types','line_number':6840,'multiline':False]['text':' if called with a job, stop it, else closes the channel','line_number':6845,'multiline':False]['text':'/ "screenattr()" function','line_number':6859,'multiline':False]['text':'/ "screenchar()" function','line_number':6877,'multiline':False]['text':'/ "screenchars()" function','line_number':6897,'multiline':False]['text':' schar values are already processed chars which are always NUL-terminated.','line_number':6914,'multiline':False]['text':' A single [0] is expected when char is NUL.','line_number':6915,'multiline':False]['text':'/ "screencol()" function','line_number':6924,'multiline':False]['text':'/','line_number':6925,'multiline':False]['text':'/ First column is 1 to be consistent with virtcol().','line_number':6926,'multiline':False]['text':'/ "screenrow()" function','line_number':6932,'multiline':False]['text':'/ "screenstring()" function','line_number':6938,'multiline':False]['text':'/ "search()" function','line_number':6959,'multiline':False]['text':'/ "searchdecl()" function','line_number':6967,'multiline':False]['text':' default: FAIL','line_number':6974,'multiline':False]['text':'/ Used by searchpair() and searchpairpos()','line_number':6989,'multiline':False]['text':' default: FAIL','line_number':6994,'multiline':False]['text':' Get the three pattern arguments: start, middle, end. Will result in an','line_number':6998,'multiline':False]['text':' error if not a valid argument.','line_number':6999,'multiline':False]['text':' Type error.','line_number':7006,'multiline':False]['text':' Handle the optional fourth argument: flags.','line_number':7009,'multiline':False]['text':' may set p_ws.','line_number':7010,'multiline':False]['text':' Don't accept SP_END or SP_SUBPAT.','line_number':7015,'multiline':False]['text':' Only one of the SP_NOMOVE or SP_SETPCMARK flags can be set.','line_number':7016,'multiline':False]['text':' Using 'r' implies 'W', otherwise it doesn't work.','line_number':7023,'multiline':False]['text':' Optional fifth argument: skip expression.','line_number':7028,'multiline':False]['text':' Type is checked later.','line_number':7034,'multiline':False]['text':'/ "searchpair()" function','line_number':7062,'multiline':False]['text':'/ "searchpairpos()" function','line_number':7068,'multiline':False]['text':'/ Search for a start/middle/end thing.','line_number':7086,'multiline':False]['text':'/ Used by searchpair(), see its documentation for the details.','line_number':7087,'multiline':False]['text':'/','line_number':7088,'multiline':False]['text':'/ @param spat  start pattern','line_number':7089,'multiline':False]['text':'/ @param mpat  middle pattern','line_number':7090,'multiline':False]['text':'/ @param epat  end pattern','line_number':7091,'multiline':False]['text':'/ @param dir  BACKWARD or FORWARD','line_number':7092,'multiline':False]['text':'/ @param skip  skip expression','line_number':7093,'multiline':False]['text':'/ @param flags  SP_SETPCMARK and other SP_ values','line_number':7094,'multiline':False]['text':'/ @param lnum_stop  stop at this line if not zero','line_number':7095,'multiline':False]['text':'/ @param time_limit  stop after this many msec','line_number':7096,'multiline':False]['text':'/','line_number':7097,'multiline':False]['text':'/ @returns  0 or -1 for no match,','line_number':7098,'multiline':False]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':7109,'multiline':False]['text':' Set the time limit, if there is one.','line_number':7113,'multiline':False]['text':' Make two search patterns: start/end (pat2, for in nested pairs) and','line_number':7116,'multiline':False]['text':' start/middle/end (pat3, for the top pair).','line_number':7117,'multiline':False]['text':' didn't find it or found the first match again: FAIL','line_number':7153,'multiline':False]['text':' Found the same position again.  Can happen with a pattern that','line_number':7161,'multiline':False]['text':' has "\zs" at the end and searching backwards.  Advance one','line_number':7162,'multiline':False]['text':' character and try again.','line_number':7163,'multiline':False]['text':' clear the start flag to avoid getting stuck here','line_number':7172,'multiline':False]['text':' If the skip pattern matches, ignore this match.','line_number':7175,'multiline':False]['text':' Evaluating {skip} caused an error, break here.','line_number':7183,'multiline':False]['text':' Found end when searching backwards or start when searching','line_number':7194,'multiline':False]['text':' forward: nested pair.','line_number':7195,'multiline':False]['text':' nested, don't search for middle','line_number':7197,'multiline':False]['text':' Found end when searching forward or start when searching','line_number':7199,'multiline':False]['text':' backward: end of (nested) pair; or found middle in outer pair.','line_number':7200,'multiline':False]['text':' outer level, search for middle','line_number':7202,'multiline':False]['text':' Found the match: return matchcount or line number.','line_number':7207,'multiline':False]['text':' search for next unmatched','line_number':7220,'multiline':False]['text':' Store the match cursor position','line_number':7225,'multiline':False]['text':' If 'n' flag is used or search failed: restore cursor position.','line_number':7230,'multiline':False]['text':' Darn, evaluating the {skip} expression changed the value.','line_number':7240,'multiline':False]['text':' If it's still empty it was changed and restored, need to restore in','line_number':7241,'multiline':False]['text':' the complicated way.','line_number':7242,'multiline':False]['text':'/ "searchpos()" function','line_number':7252,'multiline':False]['text':'/ "serverlist()" function','line_number':7272,'multiline':False]['text':' Copy addrs into a linked list.','line_number':7278,'multiline':False]['text':'/ "serverstart()" function','line_number':7286,'multiline':False]['text':' Address of the new server','line_number':7290,'multiline':False]['text':' If the user supplied an address, use it, otherwise use a temp.','line_number':7297,'multiline':False]['text':' Since it's possible server_start adjusted the given {address} (e.g.,','line_number':7317,'multiline':False]['text':' "localhost:" will now have a port), return the final value to the user.','line_number':7318,'multiline':False]['text':'/ "serverstop()" function','line_number':7330,'multiline':False]['text':'/ Set the cursor or mark position.','line_number':7350,'multiline':False]['text':'/ If "charpos" is true, then use the column number as a character offset.','line_number':7351,'multiline':False]['text':'/ Otherwise use the column number as a byte offset.','line_number':7352,'multiline':False]['text':' set cursor; "fnum" is ignored','line_number':7373,'multiline':False]['text':' set mark','line_number':7382,'multiline':False]['text':'/ "setcharpos()" function','line_number':7391,'multiline':False]['text':'/ "setcursorcharpos" function','line_number':7425,'multiline':False]['text':'/ "setenv()" function','line_number':7431,'multiline':False]['text':' setting an environment variable may be dangerous, e.g. you could','line_number':7438,'multiline':False]['text':' setenv GCONV_PATH=/tmp and then have iconv() unexpectedly call','line_number':7439,'multiline':False]['text':' a shell command using some shared library:','line_number':7440,'multiline':False]['text':'/ "setfperm({fname}, {mode})" function','line_number':7453,'multiline':False]['text':'/ "setpos()" function','line_number':7484,'multiline':False]['text':'/ Translate a register type string to the yank type and block length','line_number':7490,'multiline':False]['text':' character-wise selection','line_number':7497,'multiline':False]['text':' line-wise selection','line_number':7501,'multiline':False]['text':' block-wise selection','line_number':7505,'multiline':False]['text':'/ "setreg()" function','line_number':7520,'multiline':False]['text':' FAIL is default.','line_number':7528,'multiline':False]['text':' Type error; errmsg already given.','line_number':7532,'multiline':False]['text':' Empty dict, clear the register (like setreg(0, []))','line_number':7545,'multiline':False]['text':' Type error.','line_number':7588,'multiline':False]['text':' append','line_number':7593,'multiline':False]['text':' unnamed register','line_number':7597,'multiline':False]['text':' If the list is NULL handle like an empty list.','line_number':7608,'multiline':False]['text':' First half: use for pointers to result lines; second half: use for','line_number':7611,'multiline':False]['text':' pointers to allocated copies.','line_number':7612,'multiline':False]['text':' Need to make a copy,','line_number':7625,'multiline':False]['text':' next tv_get_string_buf_chk() will overwrite the string.','line_number':7626,'multiline':False]['text':' Discard the result. We already handle the error case.','line_number':7656,'multiline':False]['text':'/ "settagstack()" function','line_number':7661,'multiline':False]['text':' first argument: window number or id','line_number':7669,'multiline':False]['text':' second argument: dict with items to set in the tag stack','line_number':7675,'multiline':False]['text':' third argument: action - 'a' for append and 'r' for replace.','line_number':7684,'multiline':False]['text':' default is to replace the stack.','line_number':7685,'multiline':False]['text':' action = 'r';','line_number':7687,'multiline':False]['text':'/ f_sha256 - sha256({string}) function','line_number':7710,'multiline':False]['text':' make a copy of the hash (sha256_bytes returns a static buffer)','line_number':7716,'multiline':False]['text':'/ "shellescape({string})" function','line_number':7721,'multiline':False]['text':'/ shiftwidth() function','line_number':7731,'multiline':False]['text':' type error; errmsg already given','line_number':7739,'multiline':False]['text':'/ "simplify()" function','line_number':7747,'multiline':False]['text':' Simplify in place.','line_number':7752,'multiline':False]['text':'/ "sockconnect()" function','line_number':7756,'multiline':False]['text':' Wrong argument types','line_number':7764,'multiline':False]['text':'/ "stdioopen()" function','line_number':7808,'multiline':False]['text':'/ "reltimefloat()" function','line_number':7842,'multiline':False]['text':'/ "soundfold({word})" function','line_number':7855,'multiline':False]['text':'/ "spellbadword()" function','line_number':7863,'multiline':False]['text':' Find the start and length of the badly spelled word.','line_number':7883,'multiline':False]['text':' Check the argument for spelling.','line_number':7894,'multiline':False]['text':'/ "spellsuggest()" function','line_number':7920,'multiline':False]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':7974,'multiline':False]['text':' Empty item at the end.','line_number':8010,'multiline':False]['text':' Advance to just after the match.','line_number':8029,'multiline':False]['text':' Don't get stuck at the same match.','line_number':8033,'multiline':False]['text':'/ "stdpath(type)" function','line_number':8046,'multiline':False]['text':' Type error; errmsg already given.','line_number':8054,'multiline':False]['text':'/ "str2float()" function','line_number':8078,'multiline':False]['text':'/ "strftime({format}[, {time}])" function','line_number':8094,'multiline':False]['text':' MSVC returns NULL for an invalid value of seconds.','line_number':8110,'multiline':False]['text':' Release conversion descriptors.','line_number':8139,'multiline':False]['text':'/ "strptime({format}, {timestring})" function','line_number':8144,'multiline':False]['text':'/ "submatch()" function','line_number':8176,'multiline':False]['text':'/ "substitute()" function','line_number':8207,'multiline':False]['text':'/ "swapfilelist()" function','line_number':8236,'multiline':False]['text':'/ "swapinfo(swap_filename)" function','line_number':8243,'multiline':False]['text':'/ "swapname(expr)" function','line_number':8250,'multiline':False]['text':'/ "synID(lnum, col, trans)" function','line_number':8264,'multiline':False]['text':' -1 on type error (both)','line_number':8267,'multiline':False]['text':'/ "synIDattr(id, what [, mode])" function','line_number':8283,'multiline':False]['text':' Replace invalid with current.','line_number':8294,'multiline':False]['text':' bg[#]','line_number':8305,'multiline':False]['text':' bold','line_number':8307,'multiline':False]['text':' fg[#] or font','line_number':8311,'multiline':False]['text':' inverse','line_number':8315,'multiline':False]['text':' italic','line_number':8317,'multiline':False]['text':' nocombine','line_number':8322,'multiline':False]['text':' name','line_number':8324,'multiline':False]['text':' reverse','line_number':8328,'multiline':False]['text':' sp[#]','line_number':8332,'multiline':False]['text':' strikethrough','line_number':8335,'multiline':False]['text':' standout','line_number':8337,'multiline':False]['text':' underline','line_number':8344,'multiline':False]['text':' undercurl','line_number':8347,'multiline':False]['text':' underdashed','line_number':8350,'multiline':False]['text':' underdouble','line_number':8353,'multiline':False]['text':' underdotted','line_number':8356,'multiline':False]['text':' ul','line_number':8360,'multiline':False]['text':'/ "synIDtrans(id)" function','line_number':8370,'multiline':False]['text':'/ "synconcealed(lnum, col)" function','line_number':8384,'multiline':False]['text':' -1 on type error (both)','line_number':8394,'multiline':False]['text':' get the conceal character','line_number':8405,'multiline':False]['text':' -1 to auto-determine strlen','line_number':8421,'multiline':False]['text':'/ "synstack(lnum, col)" function','line_number':8426,'multiline':False]['text':' -1 on type error (both)','line_number':8431,'multiline':False]['text':'/ f_system - the Vimscript system() function','line_number':8450,'multiline':False]['text':'/ "tabpagebuflist()" function','line_number':8461,'multiline':False]['text':'/ "tagfiles()" function','line_number':8483,'multiline':False]['text':'/ "taglist()" function','line_number':8500,'multiline':False]['text':'/ "tempname()" function','line_number':8518,'multiline':False]['text':'/ "termopen(cmd[, cwd])" function','line_number':8525,'multiline':False]['text':' Did error message in tv_to_argv.','line_number':8545,'multiline':False]['text':' Wrong argument type','line_number':8549,'multiline':False]['text':' The new cwd must be a directory.','line_number':8571,'multiline':False]['text':' "./…" => "/home/foo/…"','line_number':8611,'multiline':False]['text':' "/home/foo/…" => "~/…"','line_number':8613,'multiline':False]['text':' Trim slash.','line_number':8615,'multiline':False]['text':' Avoid ambiguity in the URI when CWD is root directory.','line_number':8621,'multiline':False]['text':' Terminal URI: "term://$CWD//$PID:$CMD"','line_number':8626,'multiline':False]['text':' at this point the buffer has no terminal instance associated yet, so unset','line_number':8629,'multiline':False]['text':' the 'swapfile' option to ensure no swap file will be created','line_number':8630,'multiline':False]['text':' Save the job id and pid in b:terminal_job_{id,pid}','line_number':8637,'multiline':False]['text':' deprecated: use 'channel' buffer option','line_number':8639,'multiline':False]['text':'/ "timer_info([timer])" function','line_number':8653,'multiline':False]['text':'/ "timer_pause(timer, paused)" function','line_number':8672,'multiline':False]['text':'/ "timer_start(timeout, callback, opts)" function','line_number':8693,'multiline':False]['text':'/ "timer_stop(timerid)" function','line_number':8724,'multiline':False]['text':'/ "type(expr)" function','line_number':8744,'multiline':False]['text':'/ "virtcol({expr}, [, {list} [, {winid}]])" function','line_number':8776,'multiline':False]['text':' use the window specified in the third argument','line_number':8785,'multiline':False]['text':' Limit the column to a valid value, getvvcol() doesn't check.','line_number':8804,'multiline':False]['text':'/ "visualmode()" function','line_number':8832,'multiline':False]['text':' A non-zero number or non-empty string argument: reset mode.','line_number':8842,'multiline':False]['text':'/ "wildmenumode()" function','line_number':8848,'multiline':False]['text':'/ "windowsversion()" function','line_number':8856,'multiline':False]['text':'/ "wordcount()" function','line_number':8863,'multiline':False]['text':'/ "writefile()" function','line_number':8870,'multiline':False]['text':' Using %s, p and not %c, *p to preserve multibyte characters','line_number':8916,'multiline':False]['text':'/ "xor(expr, expr)" function','line_number':8968,'multiline':False]