['text':' User defined function support','line_number':1,'multiline':False]['text':'/ structure used as item in "fc_defer"','line_number':54,'multiline':False]['text':'/< function name, allocated','line_number':56,'multiline':False]['text':' Used by get_func_tv()','line_number':63,'multiline':False]['text':' pointer to funccal for currently active function','line_number':66,'multiline':False]['text':' Pointer to list of previously used funccal, still around because some','line_number':69,'multiline':False]['text':' item in it is still being used.','line_number':70,'multiline':False]['text':'/ Return the function hash table','line_number':94,'multiline':False]['text':'/ Get function arguments.','line_number':100,'multiline':False]['text':' Isolate the arguments: "arg1, arg2, ...)"','line_number':121,'multiline':False]['text':' Check for duplicate argument name.','line_number':149,'multiline':False]['text':' trim trailing whitespace','line_number':172,'multiline':False]['text':' Be tolerant when skipping','line_number':191,'multiline':False]['text':' skip "endchar"','line_number':215,'multiline':False]['text':'/ Register function "fp" as using "current_funccal" as its scope.','line_number':230,'multiline':False]['text':' no change','line_number':234,'multiline':False]['text':'/ @return  a name for a lambda.  Returned in static memory.','line_number':245,'multiline':False]['text':'/ Parse a lambda expression and get a Funcref from "*arg".','line_number':266,'multiline':False]['text':'/','line_number':267,'multiline':False]['text':'/ @return OK or FAIL.  Returns NOTDONE for dict or {expr}.','line_number':268,'multiline':False]['text':' First, check if this is a lambda expression. "->" must exists.','line_number':281,'multiline':False]['text':' Parse the arguments again.','line_number':288,'multiline':False]['text':' Set up a flag for checking local variables and arguments.','line_number':300,'multiline':False]['text':' Get the start and the end of the expression.','line_number':305,'multiline':False]['text':' avoid that the expression gets freed when another line break follows','line_number':314,'multiline':False]['text':' Add "return " before the expression.','line_number':339,'multiline':False]['text':' No a: variables are used for sure.','line_number':346,'multiline':False]['text':'/ Return name of the function corresponding to `name`','line_number':402,'multiline':False]['text':'/','line_number':403,'multiline':False]['text':'/ If `name` points to variable that is either a function or partial then','line_number':404,'multiline':False]['text':'/ corresponding function name is returned. Otherwise it returns `name` itself.','line_number':405,'multiline':False]['text':'/','line_number':406,'multiline':False]['text':'/ @param[in]  name  Function name to check.','line_number':407,'multiline':False]['text':'/ @param[in,out]  lenp  Location where length of the returned name is stored.','line_number':408,'multiline':False]['text':'/                       Must be set to the length of the `name` argument.','line_number':409,'multiline':False]['text':'/ @param[out]  partialp  Location where partial will be stored if found','line_number':410,'multiline':False]['text':'/                        function appears to be a partial. May be NULL if this','line_number':411,'multiline':False]['text':'/                        is not needed.','line_number':412,'multiline':False]['text':'/ @param[in]  no_autoload  If true, do not source autoload scripts if function','line_number':413,'multiline':False]['text':'/                          was not found.','line_number':414,'multiline':False]['text':'/ @param[out]  found_var  If not NULL and a variable was found set it to true.','line_number':415,'multiline':False]['text':'/','line_number':416,'multiline':False]['text':'/ @return name of the function.','line_number':417,'multiline':False]['text':' just in case','line_number':436,'multiline':False]['text':' just in case','line_number':446,'multiline':False]['text':'/ Give an error message with a function name.  Handle <SNR> things.','line_number':461,'multiline':False]['text':'/','line_number':462,'multiline':False]['text':'/ @param errmsg must be passed without translation (use N_() instead of _()).','line_number':463,'multiline':False]['text':'/ @param name function name','line_number':464,'multiline':False]['text':'/ Get function arguments at "*arg" and advance it.','line_number':480,'multiline':False]['text':'/ Return them in "*argvars[MAX_FUNC_ARGS + 1]" and the count in "argcount".','line_number':481,'multiline':False]['text':'/ On failure FAIL is returned but the "argvars[argcount]" are still set.','line_number':482,'multiline':False]['text':' Get the arguments.','line_number':489,'multiline':False]['text':' skip the '(' or ','','line_number':491,'multiline':False]['text':'/ Call a function and put the result in "rettv".','line_number':516,'multiline':False]['text':'/','line_number':517,'multiline':False]['text':'/ @param name  name of the function','line_number':518,'multiline':False]['text':'/ @param len  length of "name" or -1 to use strlen()','line_number':519,'multiline':False]['text':'/ @param arg  argument, pointing to the '('','line_number':520,'multiline':False]['text':'/ @param funcexe  various values','line_number':521,'multiline':False]['text':'/','line_number':522,'multiline':False]['text':'/ @return  OK or FAIL.','line_number':523,'multiline':False]['text':' vars for arguments','line_number':527,'multiline':False]['text':' number of arguments found','line_number':528,'multiline':False]['text':' suppress clang false positive','line_number':538,'multiline':False]['text':' Prepare for calling test_garbagecollect_now(), need to know','line_number':543,'multiline':False]['text':' what variables are used on the call stack.','line_number':544,'multiline':False]['text':'/ Check whether function name starts with <SID> or s:','line_number':574,'multiline':False]['text':'/','line_number':575,'multiline':False]['text':'/ @warning Only works for names previously checked by eval_fname_script(), if','line_number':576,'multiline':False]['text':'/          it returned non-zero.','line_number':577,'multiline':False]['text':'/','line_number':578,'multiline':False]['text':'/ @param[in]  name  Name to check.','line_number':579,'multiline':False]['text':'/','line_number':580,'multiline':False]['text':'/ @return true if it starts with <SID> or s:, false otherwise.','line_number':581,'multiline':False]['text':'/ In a script transform script-local names into actually used names','line_number':589,'multiline':False]['text':'/','line_number':590,'multiline':False]['text':'/ Transforms "<SID>" and "s:" prefixes to `K_SNR {N}` (e.g. K_SNR "123") and','line_number':591,'multiline':False]['text':'/ "<SNR>" prefix to `K_SNR`. Uses `fname_buf` buffer that is supposed to have','line_number':592,'multiline':False]['text':'/ #FLEN_FIXED + 1 length when it fits, otherwise it allocates memory.','line_number':593,'multiline':False]['text':'/','line_number':594,'multiline':False]['text':'/ @param[in]  name  Name to transform.','line_number':595,'multiline':False]['text':'/ @param  fname_buf  Buffer to save resulting function name to, if it fits.','line_number':596,'multiline':False]['text':'/                    Must have at least #FLEN_FIXED + 1 length.','line_number':597,'multiline':False]['text':'/ @param[out]  tofree  Location where pointer to an allocated memory is saved','line_number':598,'multiline':False]['text':'/                      in case result does not fit into fname_buf.','line_number':599,'multiline':False]['text':'/ @param[out]  error  Location where error type is saved, @see','line_number':600,'multiline':False]['text':'/                     FnameTransError.','line_number':601,'multiline':False]['text':'/','line_number':602,'multiline':False]['text':'/ @return transformed name: either `fname_buf` or a pointer to an allocated','line_number':603,'multiline':False]['text':'/         memory.','line_number':604,'multiline':False]['text':' no prefix','line_number':611,'multiline':False]['text':' "<SID>" or "s:"','line_number':618,'multiline':False]['text':'/ Find a function by name, return pointer to it in ufuncs.','line_number':640,'multiline':False]['text':'/','line_number':641,'multiline':False]['text':'/ @return  NULL for unknown function.','line_number':642,'multiline':False]['text':'/ Copy the function name of "fp" to buffer "buf".','line_number':652,'multiline':False]['text':'/ "buf" must be able to hold the function name plus three bytes.','line_number':653,'multiline':False]['text':'/ Takes care of script-local function names.','line_number':654,'multiline':False]['text':' Avoid unused warning on release builds','line_number':667,'multiline':False]['text':'/ Add a number variable "name" to dict "dp" with value "nr".','line_number':671,'multiline':False]['text':'/ Free "fc"','line_number':682,'multiline':False]['text':' When garbage collecting a funccall_T may be freed before the','line_number':688,'multiline':False]['text':' function that references it, clear its uf_scoped field.','line_number':689,'multiline':False]['text':' The function may have been redefined and point to another','line_number':690,'multiline':False]['text':' funccal_T, don't clear it then.','line_number':691,'multiline':False]['text':'/ Free "fc" and what it contains.','line_number':702,'multiline':False]['text':'/ Can be called only when "fc" is kept beyond the period of it called,','line_number':703,'multiline':False]['text':'/ i.e. after cleanup_function_call(fc).','line_number':704,'multiline':False]['text':' Free all l: variables.','line_number':707,'multiline':False]['text':' Free all a: variables.','line_number':710,'multiline':False]['text':' Free the a:000 variables.','line_number':713,'multiline':False]['text':'/ Handle the last part of returning from a function: free the local hashtable.','line_number':721,'multiline':False]['text':'/ Unless it is still in use by a closure.','line_number':722,'multiline':False]['text':' Free all l: variables if not referred.','line_number':730,'multiline':False]['text':' If the a:000 list and the l: and a: dicts are not referenced and','line_number':737,'multiline':False]['text':' there is no closure using it, we can free the funccall_T and what's','line_number':738,'multiline':False]['text':' in it.','line_number':739,'multiline':False]['text':' Make a copy of the a: variables, since we didn't do that above.','line_number':745,'multiline':False]['text':' NOLINT(runtime/deprecated)','line_number':751,'multiline':False]['text':' NOLINT(runtime/deprecated)','line_number':753,'multiline':False]['text':' Make a copy of the a:000 items, since we didn't do that above.','line_number':757,'multiline':False]['text':' "fc" is still in use.  This can happen when returning "a:000",','line_number':768,'multiline':False]['text':' assigning "l:" to a global variable or defining a closure.','line_number':769,'multiline':False]['text':' Link "fc" in the list for garbage collection later.','line_number':770,'multiline':False]['text':' If garbage collector is ready, clear count.','line_number':775,'multiline':False]['text':' We have made a lot of copies, worth 4 Mbyte.  This can happen','line_number':778,'multiline':False]['text':' when repetitively calling a function that creates a reference to','line_number':779,'multiline':False]['text':' itself somehow.  Call the garbage collector soon to avoid using','line_number':780,'multiline':False]['text':' too much memory.','line_number':781,'multiline':False]['text':'/ Unreference "fc": decrement the reference count and free it when it','line_number':788,'multiline':False]['text':'/ becomes zero.  "fp" is detached from "fc".','line_number':789,'multiline':False]['text':'/','line_number':790,'multiline':False]['text':'/ @param[in]   force   When true, we are exiting.','line_number':791,'multiline':False]['text':'/ Remove the function from the function hashtable.  If the function was','line_number':815,'multiline':False]['text':'/ deleted while it still has references this was already done.','line_number':816,'multiline':False]['text':'/','line_number':817,'multiline':False]['text':'/ @return true if the entry was deleted, false if it wasn't found.','line_number':818,'multiline':False]['text':'/ Free all things that a function contains. Does not free the function','line_number':847,'multiline':False]['text':'/ itself, use func_free() for that.','line_number':848,'multiline':False]['text':'/','line_number':849,'multiline':False]['text':'/ @param[in] force  When true, we are exiting.','line_number':850,'multiline':False]['text':' clear this function','line_number':858,'multiline':False]['text':'/ Free a function and remove it from the list of functions. Does not free','line_number':863,'multiline':False]['text':'/ what a function contains, call func_clear() first.','line_number':864,'multiline':False]['text':'/','line_number':865,'multiline':False]['text':'/ @param[in] fp  The function to free.','line_number':866,'multiline':False]['text':' only remove it when not done already, otherwise we would remove a newer','line_number':869,'multiline':False]['text':' version of the function','line_number':870,'multiline':False]['text':'/ Free all things that a function contains and free the function itself.','line_number':877,'multiline':False]['text':'/','line_number':878,'multiline':False]['text':'/ @param[in] force  When true, we are exiting.','line_number':879,'multiline':False]['text':'/ Allocate a funccall_T, link it in current_funccal and fill in "fp" and "rettv".','line_number':886,'multiline':False]['text':'/ Must be followed by one call to remove_funccal() or cleanup_function_call().','line_number':887,'multiline':False]['text':'/ Restore current_funccal.','line_number':899,'multiline':False]['text':'/ Call a user function','line_number':907,'multiline':False]['text':'/','line_number':908,'multiline':False]['text':'/ @param fp  Function to call.','line_number':909,'multiline':False]['text':'/ @param[in] argcount  Number of arguments.','line_number':910,'multiline':False]['text':'/ @param argvars  Arguments.','line_number':911,'multiline':False]['text':'/ @param[out] rettv  Return value.','line_number':912,'multiline':False]['text':'/ @param[in] firstline  First line of range.','line_number':913,'multiline':False]['text':'/ @param[in] lastline  Last line of range.','line_number':914,'multiline':False]['text':'/ @param selfdict  Dictionary for "self" for dictionary functions.','line_number':915,'multiline':False]['text':' index in fc_fixvar[]','line_number':924,'multiline':False]['text':' If depth of calling is getting too high, don't execute the function','line_number':937,'multiline':False]['text':' Save search patterns and redo buffer.','line_number':945,'multiline':False]['text':' check for CTRL-C hit','line_number':952,'multiline':False]['text':' prepare the funccall_T structure','line_number':954,'multiline':False]['text':' Check if this function has a breakpoint.','line_number':957,'multiline':False]['text':' Set up fields for closure.','line_number':960,'multiline':False]['text':' Note about using fc->fc_fixvar[]: This is an array of FIXVAR_CNT variables','line_number':967,'multiline':False]['text':' with names up to VAR_SHORT_LEN long.  This avoids having to alloc/free','line_number':968,'multiline':False]['text':' each argument variable and saves a lot of time.','line_number':969,'multiline':False]['text':'','line_number':970,'multiline':False]['text':' Init l: variables.','line_number':971,'multiline':False]['text':' Set l:self to "selfdict".  Use "name" to avoid a warning from','line_number':974,'multiline':False]['text':' some compiler that checks the destination size.','line_number':975,'multiline':False]['text':' Init a: variables, unless none found (in lambda).','line_number':987,'multiline':False]['text':' Set a:0 to "argcount" less number of named arguments, if >= 0.','line_number':988,'multiline':False]['text':' Set a:000 to a list with room for the "..." arguments.','line_number':989,'multiline':False]['text':' Use "name" to avoid a warning from some compiler that checks the','line_number':998,'multiline':False]['text':' destination size.','line_number':999,'multiline':False]['text':' Set a:firstline to "firstline" and a:lastline to "lastline".','line_number':1012,'multiline':False]['text':' Set a:name to named arguments.','line_number':1013,'multiline':False]['text':' Set a:N to the "..." arguments.','line_number':1014,'multiline':False]['text':' Skipped when no a: variables used (in lambda).','line_number':1015,'multiline':False]['text':' named argument a:name','line_number':1030,'multiline':False]['text':' evaluate named argument default expression','line_number':1036,'multiline':False]['text':' Bail out if no a: arguments used (in lambda).','line_number':1052,'multiline':False]['text':' "..." argument a:1, a:2, etc.','line_number':1055,'multiline':False]['text':' Note: the values are copied directly to avoid alloc/free.','line_number':1068,'multiline':False]['text':' "argvars" must have VAR_FIXED for v_lock.','line_number':1069,'multiline':False]['text':' Need to free this later, no matter where it's stored.','line_number':1074,'multiline':False]['text':' Named arguments can be accessed without the "a:" prefix in lambda','line_number':1079,'multiline':False]['text':' expressions. Add to the l: dict.','line_number':1080,'multiline':False]['text':' Don't redraw while executing the function.','line_number':1096,'multiline':False]['text':' Do not want errors such as E724 here.','line_number':1119,'multiline':False]['text':' don't overwrite this either','line_number':1137,'multiline':False]['text':' A Lambda always has the command "return {expr}".  It is much faster','line_number':1179,'multiline':False]['text':' to evaluate {expr} directly.','line_number':1180,'multiline':False]['text':' call do_cmdline() to execute the lines','line_number':1185,'multiline':False]['text':' Invoke functions added with ":defer".','line_number':1190,'multiline':False]['text':' when the function was aborted because of an error, return -1','line_number':1195,'multiline':False]['text':' make a ":profdel func" stop profiling the function','line_number':1216,'multiline':False]['text':' when being verbose, mention the return value','line_number':1221,'multiline':False]['text':' The value may be very long.  Skip the middle part, so that we','line_number':1234,'multiline':False]['text':' have some idea how it starts and ends. smsg() would always','line_number':1235,'multiline':False]['text':' truncate it at the end. Don't want errors such as E724 here.','line_number':1236,'multiline':False]['text':' don't overwrite this either','line_number':1250,'multiline':False]['text':' don't overwrite this either','line_number':1270,'multiline':False]['text':' Function was unreferenced while being used, free it now.','line_number':1284,'multiline':False]['text':' restore search patterns and redo buffer','line_number':1287,'multiline':False]['text':'/ There are two kinds of function names:','line_number':1294,'multiline':False]['text':'/ 1. ordinary names, function defined with :function','line_number':1295,'multiline':False]['text':'/ 2. numbered functions and lambdas','line_number':1296,'multiline':False]['text':'/ For the first we only count the name stored in func_hashtab as a reference,','line_number':1297,'multiline':False]['text':'/ using function() does not count as a reference, because the function is','line_number':1298,'multiline':False]['text':'/ looked up by name.','line_number':1299,'multiline':False]['text':'/ Check the argument count for user function "fp".','line_number':1305,'multiline':False]['text':'/ @return  FCERR_UNKNOWN if OK, FCERR_TOOFEW or FCERR_TOOMANY otherwise.','line_number':1306,'multiline':False]['text':'/ Call a user function after checking the arguments.','line_number':1320,'multiline':False]['text':' Call the user function.','line_number':1339,'multiline':False]['text':'/ Save the current function call pointer, and set it to NULL.','line_number':1349,'multiline':False]['text':'/ Used when executing autocommands and for ":source".','line_number':1350,'multiline':False]['text':' Clean up the current_funccal chain and the funccal stack.','line_number':1388,'multiline':False]['text':' First clear what the functions contain. Since this may lower the','line_number':1397,'multiline':False]['text':' reference count of a function, it may also free a function and change','line_number':1398,'multiline':False]['text':' the hash table. Restart if that happens.','line_number':1399,'multiline':False]['text':' Only free functions that are not refcounted, those are','line_number':1404,'multiline':False]['text':' supposed to be freed when no longer referenced.','line_number':1405,'multiline':False]['text':' Now actually free the functions. Need to start all over every time,','line_number':1422,'multiline':False]['text':' because func_free() may change the hash table.','line_number':1423,'multiline':False]['text':' Only free functions that are not refcounted, those are','line_number':1430,'multiline':False]['text':' supposed to be freed when no longer referenced.','line_number':1431,'multiline':False]['text':'/ Checks if a builtin function with the given name exists.','line_number':1450,'multiline':False]['text':'/','line_number':1451,'multiline':False]['text':'/ @param[in]   name   name of the builtin function to check.','line_number':1452,'multiline':False]['text':'/ @param[in]   len    length of "name", or -1 for NUL terminated.','line_number':1453,'multiline':False]['text':'/','line_number':1454,'multiline':False]['text':'/ @return true if "name" looks like a builtin function name: starts with a','line_number':1455,'multiline':False]['text':'/ lower case letter and doesn't contain AUTOLOAD_CHAR or ':'.','line_number':1456,'multiline':False]['text':' Make a copy of each argument.  This is needed to be able to set','line_number':1481,'multiline':False]['text':' v_lock to VAR_FIXED in the copy without changing the original list.','line_number':1482,'multiline':False]['text':' Free the arguments.','line_number':1495,'multiline':False]['text':'/ call the 'callback' function and return the result as a number.','line_number':1503,'multiline':False]['text':'/ Returns -2 when calling the function fails.  Uses argv[0] to argv[argc - 1]','line_number':1504,'multiline':False]['text':'/ for the function arguments. argv[argc] should have type VAR_UNKNOWN.','line_number':1505,'multiline':False]['text':'/','line_number':1506,'multiline':False]['text':'/ @param argcount  number of "argvars"','line_number':1507,'multiline':False]['text':'/ @param argvars   vars for arguments, must have "argcount" PLUS ONE elements!','line_number':1508,'multiline':False]['text':'/ Give an error message for the result of a function.','line_number':1521,'multiline':False]['text':'/ Nothing if "error" is FCERR_NONE.','line_number':1522,'multiline':False]['text':'/ Used by call_func to add a method base (if any) to a function argument list','line_number':1555,'multiline':False]['text':'/ as the first argument. @see call_func','line_number':1556,'multiline':False]['text':' Method call: base->Method()','line_number':1562,'multiline':False]['text':'/ Call a function with its resolved parameters','line_number':1571,'multiline':False]['text':'/','line_number':1572,'multiline':False]['text':'/ @param funcname  name of the function','line_number':1573,'multiline':False]['text':'/ @param len  length of "name" or -1 to use strlen()','line_number':1574,'multiline':False]['text':'/ @param rettv  [out] value goes here','line_number':1575,'multiline':False]['text':'/ @param argcount_in  number of "argvars"','line_number':1576,'multiline':False]['text':'/ @param argvars_in  vars for arguments, must have "argcount" PLUS ONE elements!','line_number':1577,'multiline':False]['text':'/ @param funcexe  more arguments','line_number':1578,'multiline':False]['text':'/','line_number':1579,'multiline':False]['text':'/ @return FAIL if function cannot be called, else OK (even if an error','line_number':1580,'multiline':False]['text':'/         occurred while executing the function! Set `msg_list` to capture','line_number':1581,'multiline':False]['text':'/         the error, see do_cmdline()).','line_number':1582,'multiline':False]['text':' used when "partial" or','line_number':1597,'multiline':False]['text':' "funcexe->fe_basetv" is not NULL','line_number':1598,'multiline':False]['text':' Initialize rettv so that it is safe for caller to invoke tv_clear(rettv)','line_number':1603,'multiline':False]['text':' even when call_func() returns FAIL.','line_number':1604,'multiline':False]['text':' Make a copy of the name, if it comes from a funcref variable it could','line_number':1614,'multiline':False]['text':' be changed or deleted in the called function.','line_number':1615,'multiline':False]['text':' When the function has a partial with a dict and there is a dict','line_number':1625,'multiline':False]['text':' argument, use the dict argument. That is backwards compatible.','line_number':1626,'multiline':False]['text':' When the dict was bound explicitly use the one from the partial.','line_number':1627,'multiline':False]['text':' Ignore "g:" before a function name.','line_number':1650,'multiline':False]['text':' default rettv is number zero','line_number':1655,'multiline':False]['text':' v:lua was called directly; show its name in the emsg','line_number':1665,'multiline':False]['text':' User defined function.','line_number':1670,'multiline':False]['text':' Trigger FuncUndefined event, may load the function.','line_number':1675,'multiline':False]['text':' executed an autocommand, search for the function again','line_number':1679,'multiline':False]['text':' Try loading a package.','line_number':1682,'multiline':False]['text':' Loaded a package, search for the function again.','line_number':1684,'multiline':False]['text':' postponed filling in the arguments, do it now','line_number':1692,'multiline':False]['text':' expr->method(): Find the method name in the table, call its','line_number':1701,'multiline':False]['text':' implementation with the base as one of the arguments.','line_number':1702,'multiline':False]['text':' Find the function name in the table, call its implementation.','line_number':1706,'multiline':False]['text':' The function call (or "FuncUndefined" autocommand sequence) might','line_number':1709,'multiline':False]['text':' have been aborted by an error, an interrupt, or an explicitly thrown','line_number':1710,'multiline':False]['text':' exception that has not been caught so far.  This situation can be','line_number':1711,'multiline':False]['text':' tested for by calling aborting().  For an error in an internal','line_number':1712,'multiline':False]['text':' function or for the "E132" error in call_user_func(), however, the','line_number':1713,'multiline':False]['text':' throw point at which the "force_abort" flag (temporarily reset by','line_number':1714,'multiline':False]['text':' emsg()) is normally updated has not been reached yet. We need to','line_number':1715,'multiline':False]['text':' update that flag first to make aborting() reliable.','line_number':1716,'multiline':False]['text':' Report an error unless the argument evaluation or function call has been','line_number':1724,'multiline':False]['text':' cancelled due to an aborting error, an interrupt, or an exception.','line_number':1725,'multiline':False]['text':' clear the copies made from the partial','line_number':1730,'multiline':False]['text':'/ When "prev_ht_changed" does not equal "ht_changed" give an error and return','line_number':1746,'multiline':False]['text':'/ true.  Otherwise return false.','line_number':1747,'multiline':False]['text':'/ List the head of the function: "name(arg1, arg2)".','line_number':1757,'multiline':False]['text':'/','line_number':1758,'multiline':False]['text':'/ @param[in]  fp      Function pointer.','line_number':1759,'multiline':False]['text':'/ @param[in]  indent  Indent line.','line_number':1760,'multiline':False]['text':'/ @param[in]  force   Include bang "!" (i.e.: "function!").','line_number':1761,'multiline':False]['text':' a callback at the more prompt may have deleted the function','line_number':1768,'multiline':False]['text':'/ Get a function name, translating "<SID>" and "<SNR>".','line_number':1822,'multiline':False]['text':'/ Also handles a Funcref in a List or Dictionary.','line_number':1823,'multiline':False]['text':'/ flags:','line_number':1824,'multiline':False]['text':'/ TFN_INT:         internal function name OK','line_number':1825,'multiline':False]['text':'/ TFN_QUIET:       be quiet','line_number':1826,'multiline':False]['text':'/ TFN_NO_AUTOLOAD: do not use script autoloading','line_number':1827,'multiline':False]['text':'/ TFN_NO_DEREF:    do not dereference a Funcref','line_number':1828,'multiline':False]['text':'/ Advances "pp" to just after the function name (if no error).','line_number':1829,'multiline':False]['text':'/','line_number':1830,'multiline':False]['text':'/ @param skip  only find the end, don't evaluate','line_number':1831,'multiline':False]['text':'/ @param fdp  return: info about dictionary used','line_number':1832,'multiline':False]['text':'/ @param partial  return: partial of a FuncRef','line_number':1833,'multiline':False]['text':'/','line_number':1834,'multiline':False]['text':'/ @return the function name in allocated memory, or NULL for failure.','line_number':1835,'multiline':False]['text':' Check for hard coded <SNR>: already translated function ID (from a user','line_number':1848,'multiline':False]['text':' command).','line_number':1849,'multiline':False]['text':' A name starting with "<SID>" or "<SNR>" is local to a script.  But','line_number':1856,'multiline':False]['text':' don't skip over "s:", get_lval() needs it for "s:dict.func".','line_number':1857,'multiline':False]['text':' Note that TFN_ flags use the same values as GLV_ flags.','line_number':1863,'multiline':False]['text':' Report an invalid expression in braces, unless the expression','line_number':1873,'multiline':False]['text':' evaluation has been cancelled due to an aborting error, an','line_number':1874,'multiline':False]['text':' interrupt, or an exception.','line_number':1875,'multiline':False]['text':' Error found, but continue after the function name.','line_number':1928,'multiline':False]['text':' Check if the name is a Funcref.  If so, use the value.','line_number':1933,'multiline':False]['text':' Change "<SNR>" to the byte sequence.','line_number':1951,'multiline':False]['text':' When there was "s:" already or the name expanded to get a','line_number':1964,'multiline':False]['text':' leading "s:" then remove it.','line_number':1965,'multiline':False]['text':' Skip over "s:" and "g:".','line_number':1972,'multiline':False]['text':' Copy the function name to allocated memory.','line_number':1983,'multiline':False]['text':' Accept <SID>name() inside a script, translate into <SNR>123_name().','line_number':1984,'multiline':False]['text':' Accept <SNR>123_name() outside a script.','line_number':1985,'multiline':False]['text':' do nothing','line_number':1987,'multiline':False]['text':' It's "s:" or "<SID>".','line_number':1991,'multiline':False]['text':' If it's "<SID>"','line_number':2020,'multiline':False]['text':'/ If the "funcname" starts with "s:" or "<SID>", then expands it to the','line_number':2033,'multiline':False]['text':'/ current script ID and returns the expanded function name. The caller should','line_number':2034,'multiline':False]['text':'/ free the returned name. If not called from a script context or the function','line_number':2035,'multiline':False]['text':'/ name doesn't start with these prefixes, then returns NULL.','line_number':2036,'multiline':False]['text':'/ This doesn't check whether the script-local function exists or not.','line_number':2037,'multiline':False]['text':' The function name is not a script-local function name','line_number':2046,'multiline':False]['text':' Expand s: and <SID> prefix into <SNR>nr_<name>','line_number':2056,'multiline':False]['text':'/ Call trans_function_name(), except that a lambda is returned as-is.','line_number':2067,'multiline':False]['text':'/ Returns the name in allocated memory.','line_number':2068,'multiline':False]['text':'/ List functions.','line_number':2090,'multiline':False]['text':'/','line_number':2091,'multiline':False]['text':'/ @param regmatch  When NULL, all of them.','line_number':2092,'multiline':False]['text':'/                  Otherwise functions matching "regmatch".','line_number':2093,'multiline':False]['text':'/ ":function"','line_number':2120,'multiline':False]['text':' number for nameless function','line_number':2136,'multiline':False]['text':' ":function" without argument: list functions.','line_number':2144,'multiline':False]['text':' ":function /pat": list functions matching pattern.','line_number':2153,'multiline':False]['text':' Get the function name.  There are these situations:','line_number':2176,'multiline':False]['text':' func        function name','line_number':2177,'multiline':False]['text':'             "name" == func, "fudi.fd_dict" == NULL','line_number':2178,'multiline':False]['text':' dict.func   new dictionary entry','line_number':2179,'multiline':False]['text':'             "name" == NULL, "fudi.fd_dict" set,','line_number':2180,'multiline':False]['text':'             "fudi.fd_di" == NULL, "fudi.fd_newkey" == func','line_number':2181,'multiline':False]['text':' dict.func   existing dict entry with a Funcref','line_number':2182,'multiline':False]['text':'             "name" == func, "fudi.fd_dict" set,','line_number':2183,'multiline':False]['text':'             "fudi.fd_di" set, "fudi.fd_newkey" == NULL','line_number':2184,'multiline':False]['text':' dict.func   existing dict entry that's not a Funcref','line_number':2185,'multiline':False]['text':'             "name" == NULL, "fudi.fd_dict" set,','line_number':2186,'multiline':False]['text':'             "fudi.fd_di" set, "fudi.fd_newkey" == NULL','line_number':2187,'multiline':False]['text':' s:func      script-local function name','line_number':2188,'multiline':False]['text':' g:func      global function name, same as "func"','line_number':2189,'multiline':False]['text':' Return on an invalid expression in braces, unless the expression','line_number':2194,'multiline':False]['text':' evaluation has been cancelled due to an aborting error, an','line_number':2195,'multiline':False]['text':' interrupt, or an exception.','line_number':2196,'multiline':False]['text':' An error in a function call during evaluation of an expression in magic','line_number':2207,'multiline':False]['text':' braces should not cause the function not to be defined.','line_number':2208,'multiline':False]['text':'','line_number':2212,'multiline':False]['text':' ":function func" with only function name: list function.','line_number':2213,'multiline':False]['text':' If bang is given:','line_number':2214,'multiline':False]['text':'  - include "!" in function head','line_number':2215,'multiline':False]['text':'  - exclude line numbers from function body','line_number':2216,'multiline':False]['text':'','line_number':2217,'multiline':False]['text':' Check no function was added or removed from a callback, e.g. at','line_number':2230,'multiline':False]['text':' the more prompt.  "fp" may then be invalid.','line_number':2231,'multiline':False]['text':' show multiple lines at a time!','line_number':2253,'multiline':False]['text':' ":function name(arg1, arg2)" Define function.','line_number':2269,'multiline':False]['text':' attempt to continue by skipping some text','line_number':2276,'multiline':False]['text':' Check the name of the function.  Unless it's a dictionary function','line_number':2287,'multiline':False]['text':' (that we are overwriting).','line_number':2288,'multiline':False]['text':' Disallow using the g: dict.','line_number':2303,'multiline':False]['text':' find extra arguments "range", "dict", "abort" and "closure"','line_number':2319,'multiline':False]['text':' When there is a line break use what follows for the function body.','line_number':2344,'multiline':False]['text':' Makes 'exe "func Test()\n...\nendfunc"' work.','line_number':2345,'multiline':False]['text':' Read the body of the function, until ":endfunction" is found.','line_number':2352,'multiline':False]['text':' Check if the function already exists, don't let the user type the','line_number':2354,'multiline':False]['text':' whole function before telling him it doesn't work!  For a script we','line_number':2355,'multiline':False]['text':' need to skip the body to be able to find what follows.','line_number':2356,'multiline':False]['text':' don't overwrite the function name','line_number':2370,'multiline':False]['text':' Save the starting line number.','line_number':2375,'multiline':False]['text':' Use eap->arg, split up in parts by line breaks.','line_number':2388,'multiline':False]['text':' Detect line continuation: SOURCING_LNUM increased more than one.','line_number':2422,'multiline':False]['text':' Don't check for ":endfunc" between','line_number':2431,'multiline':False]['text':' * ":append" and "."','line_number':2432,'multiline':False]['text':' * ":python <<EOF" and "EOF"','line_number':2433,'multiline':False]['text':' * ":let {var-name} =<< [trim] {marker}" and "{marker}"','line_number':2434,'multiline':False]['text':' skip ':' and blanks','line_number':2455,'multiline':False]['text':' Check for "endfunction".','line_number':2458,'multiline':False]['text':' Another command follows. If the line came from "eap" we','line_number':2472,'multiline':False]['text':' can simply point into it, otherwise we need to change','line_number':2473,'multiline':False]['text':' "eap->cmdlinep".','line_number':2474,'multiline':False]['text':' Increase indent inside "if", "while", "for" and "try", decrease','line_number':2485,'multiline':False]['text':' at "end".','line_number':2486,'multiline':False]['text':' Check for defining a function inside this function.','line_number':2496,'multiline':False]['text':' Check for ":append", ":change", ":insert".','line_number':2513,'multiline':False]['text':' heredoc: Check for ":python <<EOF", ":lua <<EOF", etc.','line_number':2529,'multiline':False]['text':' ":python <<" continues until a dot, like ":append"','line_number':2546,'multiline':False]['text':' Ignore leading white space.','line_number':2549,'multiline':False]['text':' Check for ":let v =<< [trim] EOF"','line_number':2562,'multiline':False]['text':'       and ":let [a, b] =<< [trim] EOF"','line_number':2563,'multiline':False]['text':' Ignore leading white space.','line_number':2574,'multiline':False]['text':' Ignore leading white space.','line_number':2580,'multiline':False]['text':' Add the line to the function.','line_number':2593,'multiline':False]['text':' Copy the line to newly allocated memory.  get_one_sourceline()','line_number':2596,'multiline':False]['text':' allocates 250 bytes per line, this saves 80% on average.  The cost','line_number':2597,'multiline':False]['text':' is an extra alloc/free.','line_number':2598,'multiline':False]['text':' Add NULL lines for continuation lines, so that the line count is','line_number':2602,'multiline':False]['text':' equal to the index in the growarray.','line_number':2603,'multiline':False]['text':' Check for end of eap->arg.','line_number':2608,'multiline':False]['text':' Don't define the function when skipping commands or when an error was','line_number':2614,'multiline':False]['text':' detected.','line_number':2615,'multiline':False]['text':' If there are no errors, add the function','line_number':2620,'multiline':False]['text':' Function can be replaced with "function!" and when sourcing the','line_number':2630,'multiline':False]['text':' same script again, but only once.','line_number':2631,'multiline':False]['text':' This function is referenced somewhere, don't redefine it but','line_number':2643,'multiline':False]['text':' create a new one.','line_number':2644,'multiline':False]['text':' redefine existing function, keep the expanded name','line_number':2651,'multiline':False]['text':' Can't add a function to a locked dictionary','line_number':2670,'multiline':False]['text':' Can't change an existing function if it is locked','line_number':2674,'multiline':False]['text':' Give the function a sequential number.  Can only be used with a','line_number':2678,'multiline':False]['text':' Funcref!','line_number':2679,'multiline':False]['text':' Check that the autoload name matches the script name.','line_number':2687,'multiline':False]['text':' Add new dict entry','line_number':2710,'multiline':False]['text':' Overwrite existing dict entry.','line_number':2718,'multiline':False]['text':' behave like "dict" was used','line_number':2724,'multiline':False]['text':' insert the new function in the function list','line_number':2728,'multiline':False]['text':'/ @return  5 if "p" starts with "<SID>" or "<SNR>" (ignoring case).','line_number':2780,'multiline':False]['text':'/          2 if "p" starts with "s:".','line_number':2781,'multiline':False]['text':'/          0 otherwise.','line_number':2782,'multiline':False]['text':' Use mb_strnicmp() because in Turkish comparing the "I" may not work with','line_number':2785,'multiline':False]['text':' the standard library function.','line_number':2786,'multiline':False]['text':'/ Check whether function with the given name exists','line_number':2806,'multiline':False]['text':'/','line_number':2807,'multiline':False]['text':'/ @param[in] name  Function name.','line_number':2808,'multiline':False]['text':'/ @param[in] no_deref  Whether to dereference a Funcref.','line_number':2809,'multiline':False]['text':'/','line_number':2810,'multiline':False]['text':'/ @return  true if it exists, false otherwise.','line_number':2811,'multiline':False]['text':' Only accept "funcname", "funcname ", "funcname (..." and','line_number':2824,'multiline':False]['text':' "funcname(...", not "funcname!...".','line_number':2825,'multiline':False]['text':'/ Function given to ExpandGeneric() to obtain the list of user defined','line_number':2833,'multiline':False]['text':'/ function names.','line_number':2834,'multiline':False]['text':' don't show dict and lambda functions','line_number':2858,'multiline':False]['text':' Prevent overflow.','line_number':2862,'multiline':False]['text':'/ ":delfunction {name}"','line_number':2877,'multiline':False]['text':' check `uf_refcount > 2` because deleting a function should also reduce','line_number':2925,'multiline':False]['text':' the reference count, and 1 is the initial refcount.','line_number':2926,'multiline':False]['text':' Delete the dict item that refers to the function, it will','line_number':2934,'multiline':False]['text':' invoke func_unref() and possibly delete the function.','line_number':2935,'multiline':False]['text':' A normal function (not a numbered function or lambda) has a','line_number':2938,'multiline':False]['text':' refcount of 1 for the entry in the hashtable.  When deleting','line_number':2939,'multiline':False]['text':' it and the refcount is more than one, it should be kept.','line_number':2940,'multiline':False]['text':' A numbered function or lambda should be kept if the refcount is','line_number':2941,'multiline':False]['text':' one or more.','line_number':2942,'multiline':False]['text':' Function is still referenced somewhere. Don't free it but','line_number':2944,'multiline':False]['text':' do remove it from the hashtable.','line_number':2945,'multiline':False]['text':'/ Unreference a Function: decrement the reference count and free it when it','line_number':2957,'multiline':False]['text':'/ becomes zero.','line_number':2958,'multiline':False]['text':'/ Unreference a Function: decrement the reference count and free it when it','line_number':2980,'multiline':False]['text':'/ becomes zero.','line_number':2981,'multiline':False]['text':'/ Unreference user function, freeing it if needed','line_number':2982,'multiline':False]['text':'/','line_number':2983,'multiline':False]['text':'/ Decrements the reference count and frees when it becomes zero.','line_number':2984,'multiline':False]['text':'/','line_number':2985,'multiline':False]['text':'/ @param  fp  Function to unreference.','line_number':2986,'multiline':False]['text':' Only delete it when it's not being used. Otherwise it's done','line_number':2990,'multiline':False]['text':' when "uf_calls" becomes zero.','line_number':2991,'multiline':False]['text':'/ Count a reference to a Function.','line_number':2998,'multiline':False]['text':' Only give an error for a numbered function.','line_number':3008,'multiline':False]['text':' Fail silently, when named or lambda function isn't found.','line_number':3009,'multiline':False]['text':'/ Count a reference to a Function.','line_number':3014,'multiline':False]['text':'/ Check whether funccall is still referenced outside','line_number':3022,'multiline':False]['text':'/','line_number':3023,'multiline':False]['text':'/ It is supposed to be referenced if either it is referenced itself or if l:,','line_number':3024,'multiline':False]['text':'/ a: or a:000 are referenced as all these are statically allocated within','line_number':3025,'multiline':False]['text':'/ funccall structure.','line_number':3026,'multiline':False]['text':' NOLINT(runtime/deprecated)','line_number':3031,'multiline':False]['text':'/ @return true if items in "fc" do not have "copyID".  That means they are not','line_number':3038,'multiline':False]['text':'/ referenced from anywhere that is in use.','line_number':3039,'multiline':False]['text':'/ ":return [expr]"','line_number':3048,'multiline':False]['text':' It's safer to return also on error.','line_number':3074,'multiline':False]['text':' In return statement, cause_abort should be force_abort.','line_number':3075,'multiline':False]['text':' Return unless the expression evaluation has been cancelled due to an','line_number':3078,'multiline':False]['text':' aborting error, an interrupt, or an exception.','line_number':3079,'multiline':False]['text':' When skipping or the return gets pending, advance to the next command','line_number':3085,'multiline':False]['text':' in this line (!returning).  Otherwise, ignore the rest of the line.','line_number':3086,'multiline':False]['text':' Following lines will be ignored by get_func_line().','line_number':3087,'multiline':False]['text':' no argument','line_number':3090,'multiline':False]['text':'/ Lower level implementation of "call".  Only called when not skipping.','line_number':3100,'multiline':False]['text':' If the function deleted lines or switched to another buffer','line_number':3110,'multiline':False]['text':' the line number may become invalid.','line_number':3111,'multiline':False]['text':' tv_clear() uses this','line_number':3124,'multiline':False]['text':' Handle a function returning a Funcref, Dictionary or List.','line_number':3130,'multiline':False]['text':' Stop when immediately aborting on error, or when an interrupt','line_number':3141,'multiline':False]['text':' occurred or an exception was thrown but not caught.','line_number':3142,'multiline':False]['text':' get_func_tv() returned OK, so that the check for trailing','line_number':3143,'multiline':False]['text':' characters below is executed.','line_number':3144,'multiline':False]['text':'/ Core part of ":defer func(arg)".  "arg" points to the "(" and is advanced.','line_number':3153,'multiline':False]['text':'/','line_number':3154,'multiline':False]['text':'/ @return  FAIL or OK.','line_number':3155,'multiline':False]['text':' vars for arguments','line_number':3159,'multiline':False]['text':' number of partial arguments','line_number':3160,'multiline':False]['text':' number of arguments found','line_number':3161,'multiline':False]['text':' we tolerate an unknown function here, it might be defined later','line_number':3193,'multiline':False]['text':'/ Return true if currently inside a function call.','line_number':3214,'multiline':False]['text':'/ Give an error message and return false when not.','line_number':3215,'multiline':False]['text':'/ Add a deferred call for "name" with arguments "argvars[argcount]".','line_number':3225,'multiline':False]['text':'/ Consumes "argvars[]".','line_number':3226,'multiline':False]['text':'/ Caller must check that current_funccal is not NULL.','line_number':3227,'multiline':False]['text':'/ Invoked after a function has finished: invoke ":defer" functions.','line_number':3245,'multiline':False]['text':' already being called, can happen if function does ":qa"','line_number':3252,'multiline':False]['text':' tv_clear() uses this','line_number':3259,'multiline':False]['text':' If the deferred function is called after an exception, then only the','line_number':3264,'multiline':False]['text':' first statement in the function will be executed (because of the','line_number':3265,'multiline':False]['text':' exception).  So save and restore the try/catch/throw exception','line_number':3266,'multiline':False]['text':' state.','line_number':3267,'multiline':False]['text':'/ Called when exiting: call all defer functions.','line_number':3285,'multiline':False]['text':'/ ":1,25call func(arg1, arg2)" function call.','line_number':3299,'multiline':False]['text':'/ ":defer func(arg1, arg2)"    deferred function call.','line_number':3300,'multiline':False]['text':' trans_function_name() doesn't work well when skipping, use eval0()','line_number':3312,'multiline':False]['text':' instead to skip to any following command, e.g. for:','line_number':3313,'multiline':False]['text':'   :if 0 | call dict.foo().bar() | endif.','line_number':3314,'multiline':False]['text':' Still need to give an error message for missing key.','line_number':3326,'multiline':False]['text':' Increase refcount on dictionary, it could get deleted when evaluating','line_number':3334,'multiline':False]['text':' the arguments.','line_number':3335,'multiline':False]['text':' If it is the name of a variable of type VAR_FUNC or VAR_PARTIAL use its','line_number':3340,'multiline':False]['text':' contents. For VAR_PARTIAL get its partial, unless we already have one','line_number':3341,'multiline':False]['text':' from trans_function_name().','line_number':3342,'multiline':False]['text':' Skip white space to allow ":call func ()".  Not good, but required for','line_number':3347,'multiline':False]['text':' backward compatibility.','line_number':3348,'multiline':False]['text':' When inside :try we need to check for following "| catch" or "| endtry".','line_number':3370,'multiline':False]['text':' Not when there was an error, but do check if an exception was thrown.','line_number':3371,'multiline':False]['text':' Check for trailing illegal characters and a following command.','line_number':3373,'multiline':False]['text':'/ Return from a function.  Possibly makes the return pending.  Also called','line_number':3390,'multiline':False]['text':'/ for a pending return at the ":endtry" or after returning from an extra','line_number':3391,'multiline':False]['text':'/ do_cmdline().  "reanimate" is used in the latter case.','line_number':3392,'multiline':False]['text':'/','line_number':3393,'multiline':False]['text':'/ @param reanimate  used after returning from an extra do_cmdline().','line_number':3394,'multiline':False]['text':'/ @param is_cmd     set when called due to a ":return" command.','line_number':3395,'multiline':False]['text':'/ @param rettv      may point to a typval_T with the return rettv.','line_number':3396,'multiline':False]['text':'/','line_number':3397,'multiline':False]['text':'/ @return  true when the return can be carried out,','line_number':3398,'multiline':False]['text':'/          false when the return gets pending.','line_number':3399,'multiline':False]['text':' Undo the return.','line_number':3405,'multiline':False]['text':' Cleanup (and deactivate) conditionals, but stop when a try conditional','line_number':3409,'multiline':False]['text':' not in its finally clause (which then is to be executed next) is found.','line_number':3410,'multiline':False]['text':' In this case, make the ":return" pending for execution at the ":endtry".','line_number':3411,'multiline':False]['text':' Otherwise, return normally.','line_number':3412,'multiline':False]['text':' A pending return again gets pending.  "rettv" points to an','line_number':3418,'multiline':False]['text':' allocated variable with the rettv of the original ":return"'s','line_number':3419,'multiline':False]['text':' argument if present or is NULL else.','line_number':3420,'multiline':False]['text':' When undoing a return in order to make it pending, get the stored','line_number':3423,'multiline':False]['text':' return rettv.','line_number':3424,'multiline':False]['text':' Store the value of the pending return.','line_number':3431,'multiline':False]['text':' The pending return value could be overwritten by a ":return"','line_number':3439,'multiline':False]['text':' without argument in a finally clause; reset the default','line_number':3440,'multiline':False]['text':' return value.','line_number':3441,'multiline':False]['text':' If the return is carried out now, store the return value.  For','line_number':3450,'multiline':False]['text':' a return immediately after reanimation, the value is already','line_number':3451,'multiline':False]['text':' there.','line_number':3452,'multiline':False]['text':'/ Generate a return command for producing the value of "rettv".  The result','line_number':3465,'multiline':False]['text':'/ is an allocated string.  Used by report_pending() for verbose messages.','line_number':3466,'multiline':False]['text':'/ Get next function line.','line_number':3488,'multiline':False]['text':'/ Called by do_cmdline() to get the next line.','line_number':3489,'multiline':False]['text':'/','line_number':3490,'multiline':False]['text':'/ @return  allocated string, or NULL for end of function.','line_number':3491,'multiline':False]['text':' If breakpoints have been added/deleted need to check for it.','line_number':3498,'multiline':False]['text':' growarray with function lines','line_number':3507,'multiline':False]['text':' Skip NULL lines (continuation lines).','line_number':3512,'multiline':False]['text':' Did we encounter a breakpoint?','line_number':3528,'multiline':False]['text':' Find next breakpoint.','line_number':3531,'multiline':False]['text':'/ @return  true if the currently active function should be ended, because a','line_number':3539,'multiline':False]['text':'/          return was encountered or an error occurred.  Used inside a ":while".','line_number':3540,'multiline':False]['text':' Ignore the "abort" flag if the abortion behavior has been changed due to','line_number':3545,'multiline':False]['text':' an error inside a try conditional.','line_number':3546,'multiline':False]['text':'/ @return  true if cookie indicates a function which "abort"s on errors.','line_number':3551,'multiline':False]['text':'/ Turn "dict.Func" into a partial for "Func" bound to "dict".','line_number':3557,'multiline':False]['text':'/ Changes "rettv" in-place.','line_number':3558,'multiline':False]['text':' Translate "s:func" to the stored function name.','line_number':3572,'multiline':False]['text':' Turn "dict.Func" into a partial for "Func" with "dict".','line_number':3578,'multiline':False]['text':' Just a function: Take over the function name and use selfdict.','line_number':3586,'multiline':False]['text':' Partial: copy the function name, use selfdict and copy','line_number':3591,'multiline':False]['text':' args. Can't take over name or args, the partial might','line_number':3592,'multiline':False]['text':' be referenced elsewhere.','line_number':3593,'multiline':False]['text':'/ @return  the name of the executed function.','line_number':3616,'multiline':False]['text':'/ @return  the address holding the next breakpoint line for a funccall cookie.','line_number':3622,'multiline':False]['text':'/ @return  the address holding the debug tick for a funccall cookie.','line_number':3628,'multiline':False]['text':'/ @return  the nesting level for a funccall cookie.','line_number':3634,'multiline':False]['text':'/ @return  true when a function was ended by a ":return" command.','line_number':3640,'multiline':False]['text':' When a funccal was freed some more items might be garbage','line_number':3663,'multiline':False]['text':' collected, so run again.','line_number':3664,'multiline':False]['text':' Get function call environment based on backtrace debug level','line_number':3670,'multiline':False]['text':' backtrace level overflow. reset to max','line_number':3680,'multiline':False]['text':'/ @return  hashtable used for local variables in the current funccal or','line_number':3689,'multiline':False]['text':'/          NULL if there is no current funccal.','line_number':3690,'multiline':False]['text':'/ @return   the l: scope variable or','line_number':3699,'multiline':False]['text':'/           NULL if there is no current funccal.','line_number':3700,'multiline':False]['text':'/ @return  the hashtable used for argument in the current funccal or','line_number':3709,'multiline':False]['text':'/          NULL if there is no current funccal.','line_number':3710,'multiline':False]['text':'/ @return  the a: scope variable or','line_number':3719,'multiline':False]['text':'/          NULL if there is no current funccal.','line_number':3720,'multiline':False]['text':'/ List function variables, if there is a function.','line_number':3729,'multiline':False]['text':'/ @return  if "ht" is the hashtable for local variables in the current','line_number':3738,'multiline':False]['text':'/          funccal, return the dict that contains it. Otherwise return NULL.','line_number':3739,'multiline':False]['text':'/ Search hashitem in parent scope.','line_number':3748,'multiline':False]['text':' Search in parent scope which is possible to reference from lambda','line_number':3760,'multiline':False]['text':'/ Search variable in parent scope.','line_number':3781,'multiline':False]['text':' Search in parent scope which is possible to reference from lambda','line_number':3792,'multiline':False]['text':'/ Set "copyID + 1" in previous_funccal and callers.','line_number':3813,'multiline':False]['text':'/ Set "copyID" in all local vars and arguments in the call stack.','line_number':3842,'multiline':False]['text':' Also go through the funccal_stack.','line_number':3852,'multiline':False]['text':'/ Set "copyID" in all functions available by name.','line_number':3866,'multiline':False]['text':'/ Set "copyID" in all function arguments.','line_number':3883,'multiline':False]['text':'/ Mark all lists and dicts referenced through function "name" with "copyID".','line_number':3895,'multiline':False]['text':'/ "list_stack" is used to add lists to be marked.  Can be NULL.','line_number':3896,'multiline':False]['text':'/ "ht_stack" is used to add hashtabs to be marked.  Can be NULL.','line_number':3897,'multiline':False]['text':'/','line_number':3898,'multiline':False]['text':'/ @return  true if setting references failed somehow.','line_number':3899,'multiline':False]['text':'/ Registers a luaref as a lambda.','line_number':3924,'multiline':False]['text':' coverity[leaked_storage]','line_number':3940,'multiline':False]