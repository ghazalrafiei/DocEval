['text':'/ Helper structure for container_struct','line_number':26,'multiline':False]['text':'/< Index of current container in stack.','line_number':28,'multiline':False]['text':'/< _VAL key contents for special maps.','line_number':29,'multiline':False]['text':'/< When container is not a special dictionary it is','line_number':30,'multiline':False]['text':'/< NULL.','line_number':31,'multiline':False]['text':'/< Location where container starts.','line_number':32,'multiline':False]['text':'/< Container. Either VAR_LIST, VAR_DICT or VAR_LIST','line_number':33,'multiline':False]['text':'/< which is _VAL from special dictionary.','line_number':34,'multiline':False]['text':'/ Helper structure for values struct','line_number':37,'multiline':False]['text':'/< Indicates that current value is a special','line_number':39,'multiline':False]['text':'/< dictionary with string.','line_number':40,'multiline':False]['text':'/< True if previous token was comma.','line_number':41,'multiline':False]['text':'/< True if previous token was colon.','line_number':42,'multiline':False]['text':'/< Actual value.','line_number':43,'multiline':False]['text':'/ Vector containing values not yet saved in any container','line_number':46,'multiline':False]['text':'/ Vector containing containers, each next container is located inside previous','line_number':49,'multiline':False]['text':'/ Create special dictionary','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/ @param[out]  rettv  Location where created dictionary will be saved.','line_number':58,'multiline':False]['text':'/ @param[in]  type  Type of the dictionary.','line_number':59,'multiline':False]['text':'/ @param[in]  val  Value associated with the _VAL key.','line_number':60,'multiline':False]['text':'/ Helper function used for working with stack vectors used by JSON decoder','line_number':85,'multiline':False]['text':'/','line_number':86,'multiline':False]['text':'/ @param[in,out]  obj  New object. Will either be put into the stack (and,','line_number':87,'multiline':False]['text':'/                      probably, also inside container) or freed.','line_number':88,'multiline':False]['text':'/ @param[out]  stack  Object stack.','line_number':89,'multiline':False]['text':'/ @param[out]  container_stack  Container objects stack.','line_number':90,'multiline':False]['text':'/ @param[in,out]  pp  Position in string which is currently being parsed. Used','line_number':91,'multiline':False]['text':'/                     for error reporting and is also set when decoding is','line_number':92,'multiline':False]['text':'/                     restarted due to the necessity of converting regular','line_number':93,'multiline':False]['text':'/                     dictionary to a special map.','line_number':94,'multiline':False]['text':'/ @param[out]  next_map_special  Is set to true when dictionary needs to be','line_number':95,'multiline':False]['text':'/                                converted to a special map, otherwise not','line_number':96,'multiline':False]['text':'/                                touched. Indicates that decoding has been','line_number':97,'multiline':False]['text':'/                                restarted.','line_number':98,'multiline':False]['text':'/ @param[out]  didcomma  True if previous token was comma. Is set to recorded','line_number':99,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':100,'multiline':False]['text':'/ @param[out]  didcolon  True if previous token was colon. Is set to recorded','line_number':101,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':102,'multiline':False]['text':'/','line_number':103,'multiline':False]['text':'/ @return OK in case of success, FAIL in case of error.','line_number':104,'multiline':False]['text':' vval.v_list and vval.v_dict should have the same size and offset','line_number':118,'multiline':False]['text':' These cases should have already been handled.','line_number':143,'multiline':False]['text':' Object with key only','line_number':159,'multiline':False]['text':' Handle special dictionaries','line_number':171,'multiline':False]['text':' Restart','line_number':178,'multiline':False]['text':'/ Create a new special dictionary that ought to represent a MAP','line_number':219,'multiline':False]['text':'/','line_number':220,'multiline':False]['text':'/ @param[out]  ret_tv  Address where new special dictionary is saved.','line_number':221,'multiline':False]['text':'/ @param[in]  len  Expected number of items to be populated before list','line_number':222,'multiline':False]['text':'/                  becomes accessible from Vimscript. It is still valid to','line_number':223,'multiline':False]['text':'/                  underpopulate a list, value only controls how many elements','line_number':224,'multiline':False]['text':'/                  will be allocated in advance. @see ListLenSpecials.','line_number':225,'multiline':False]['text':'/','line_number':226,'multiline':False]['text':'/ @return [allocated] list which should contain key-value pairs. Return value','line_number':227,'multiline':False]['text':'/                     may be safely ignored.','line_number':228,'multiline':False]['text':'/ Convert char* string to typval_T','line_number':242,'multiline':False]['text':'/','line_number':243,'multiline':False]['text':'/ Depending on whether string has (no) NUL bytes, it may use a special','line_number':244,'multiline':False]['text':'/ dictionary, VAR_BLOB, or decode string to VAR_STRING.','line_number':245,'multiline':False]['text':'/','line_number':246,'multiline':False]['text':'/ @param[in]  s  String to decode.','line_number':247,'multiline':False]['text':'/ @param[in]  len  String length.','line_number':248,'multiline':False]['text':'/ @param[in]  hasnul  Whether string has NUL byte, not or it was not yet','line_number':249,'multiline':False]['text':'/                     determined.','line_number':250,'multiline':False]['text':'/ @param[in]  binary  Determines decode type if string has NUL bytes.','line_number':251,'multiline':False]['text':'/                     If true convert string to VAR_BLOB, otherwise to the','line_number':252,'multiline':False]['text':'/                     kMPString special type.','line_number':253,'multiline':False]['text':'/ @param[in]  s_allocated  If true, then `s` was allocated and can be saved in','line_number':254,'multiline':False]['text':'/                          a returned structure. If it is not saved there, it','line_number':255,'multiline':False]['text':'/                          will be freed.','line_number':256,'multiline':False]['text':'/','line_number':257,'multiline':False]['text':'/ @return Decoded string.','line_number':258,'multiline':False]['text':'/ Parse JSON double-quoted string','line_number':298,'multiline':False]['text':'/','line_number':299,'multiline':False]['text':'/ @param[in]  buf  Buffer being converted.','line_number':300,'multiline':False]['text':'/ @param[in]  buf_len  Length of the buffer.','line_number':301,'multiline':False]['text':'/ @param[in,out]  pp  Pointer to the start of the string. Must point to '"'.','line_number':302,'multiline':False]['text':'/                     Is advanced to the closing '"'. Also see','line_number':303,'multiline':False]['text':'/                     json_decoder_pop(), it may set pp to another location','line_number':304,'multiline':False]['text':'/                     and alter next_map_special, didcomma and didcolon.','line_number':305,'multiline':False]['text':'/ @param[out]  stack  Object stack.','line_number':306,'multiline':False]['text':'/ @param[out]  container_stack  Container objects stack.','line_number':307,'multiline':False]['text':'/ @param[out]  next_map_special  Is set to true when dictionary is converted','line_number':308,'multiline':False]['text':'/                                to a special map, otherwise not touched.','line_number':309,'multiline':False]['text':'/ @param[out]  didcomma  True if previous token was comma. Is set to recorded','line_number':310,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':311,'multiline':False]['text':'/ @param[out]  didcolon  True if previous token was colon. Is set to recorded','line_number':312,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':313,'multiline':False]['text':'/','line_number':314,'multiline':False]['text':'/ @return OK in case of success, FAIL in case of error.','line_number':315,'multiline':False]['text':' One UTF-8 character below U+10000 can take up to 3 bytes,','line_number':350,'multiline':False]['text':' above up to 6, but they are encoded using two \u escapes.','line_number':351,'multiline':False]['text':' unescaped = %x20-21 / %x23-5B / %x5D-10FFFF','line_number':372,'multiline':False]['text':' All characters above U+007F are encoded using two or more bytes','line_number':379,'multiline':False]['text':' and thus cannot possibly be equal to *p. But utf_ptr2char({0xFF,','line_number':380,'multiline':False]['text':' 0}) will return 0xFF, even though 0xFF cannot start any UTF-8','line_number':381,'multiline':False]['text':' code point at all.','line_number':382,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' The only exception is U+00C3 which is represented as 0xC3 0x83.','line_number':384,'multiline':False]['text':'/ Parse JSON number: both floating-point and integer','line_number':493,'multiline':False]['text':'/','line_number':494,'multiline':False]['text':'/ Number format: `-?\d+(?:.\d+)?(?:[eE][+-]?\d+)?`.','line_number':495,'multiline':False]['text':'/','line_number':496,'multiline':False]['text':'/ @param[in]  buf  Buffer being converted.','line_number':497,'multiline':False]['text':'/ @param[in]  buf_len  Length of the buffer.','line_number':498,'multiline':False]['text':'/ @param[in,out]  pp  Pointer to the start of the number. Must point to','line_number':499,'multiline':False]['text':'/                     a digit or a minus sign. Is advanced to the last','line_number':500,'multiline':False]['text':'/                     character of the number. Also see json_decoder_pop(), it','line_number':501,'multiline':False]['text':'/                     may set pp to another location and alter','line_number':502,'multiline':False]['text':'/                     next_map_special, didcomma and didcolon.','line_number':503,'multiline':False]['text':'/ @param[out]  stack  Object stack.','line_number':504,'multiline':False]['text':'/ @param[out]  container_stack  Container objects stack.','line_number':505,'multiline':False]['text':'/ @param[out]  next_map_special  Is set to true when dictionary is converted','line_number':506,'multiline':False]['text':'/                                to a special map, otherwise not touched.','line_number':507,'multiline':False]['text':'/ @param[out]  didcomma  True if previous token was comma. Is set to recorded','line_number':508,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':509,'multiline':False]['text':'/ @param[out]  didcolon  True if previous token was colon. Is set to recorded','line_number':510,'multiline':False]['text':'/                        value when decoder is restarted, otherwise unused.','line_number':511,'multiline':False]['text':'/','line_number':512,'multiline':False]['text':'/ @return OK in case of success, FAIL in case of error.','line_number':513,'multiline':False]['text':' Convert floating-point number','line_number':584,'multiline':False]['text':' Convert integer','line_number':593,'multiline':False]['text':'/ Convert JSON string into Vimscript object','line_number':634,'multiline':False]['text':'/','line_number':635,'multiline':False]['text':'/ @param[in]  buf  String to convert. UTF-8 encoding is assumed.','line_number':636,'multiline':False]['text':'/ @param[in]  buf_len  Length of the string.','line_number':637,'multiline':False]['text':'/ @param[out]  rettv  Location where to save results.','line_number':638,'multiline':False]['text':'/','line_number':639,'multiline':False]['text':'/ @return OK in case of success, FAIL otherwise.','line_number':640,'multiline':False]['text':' Error message was already given','line_number':798,'multiline':False]['text':' Error message was already given','line_number':819,'multiline':False]['text':'/ Convert msgpack object to a Vimscript one','line_number':910,'multiline':False]['text':' Not populated yet, need to create list item to push.','line_number':1006,'multiline':False]['text':' Duplicate key: fallback to generic map','line_number':1039,'multiline':False]