['text':' eval/buffer.c: Buffer related builtin functions','line_number':1,'multiline':False]['text':'/ Find a buffer by number or exact name.','line_number':40,'multiline':False]['text':' No full path name match, try a match with a URL or a "nofile"','line_number':50,'multiline':False]['text':' buffer, these don't use the full path.','line_number':51,'multiline':False]['text':'/ If there is a window for "curbuf", make it the current window.','line_number':65,'multiline':False]['text':' The b_wininfo list should have the windows that recently contained the','line_number':70,'multiline':False]['text':' buffer, going over this is faster than going over all the windows.','line_number':71,'multiline':False]['text':' Do check the buffer is still there.','line_number':72,'multiline':False]['text':'/ Used before making a change in "buf", which is not the current one: Make','line_number':81,'multiline':False]['text':'/ "buf" the current buffer and find a window for this buffer, so that side','line_number':82,'multiline':False]['text':'/ effects are done correctly (e.g., adjusting marks).','line_number':83,'multiline':False]['text':'/','line_number':84,'multiline':False]['text':'/ Information is saved in "cob" and MUST be restored by calling','line_number':85,'multiline':False]['text':'/ change_other_buffer_restore().','line_number':86,'multiline':False]['text':' Set "curbuf" to the buffer being changed.  Then make sure there is a','line_number':91,'multiline':False]['text':' window for it to handle any side effects.','line_number':92,'multiline':False]['text':' simplest: find existing window for "buf"','line_number':97,'multiline':False]['text':' No existing window for this buffer.  It is dangerous to have','line_number':100,'multiline':False]['text':' curwin->w_buffer differ from "curbuf", use the autocmd window.','line_number':101,'multiline':False]['text':'/ Set line or list of lines in buffer "buf" to "lines".','line_number':119,'multiline':False]['text':'/ Any type is allowed and converted to a string.','line_number':120,'multiline':False]['text':' When using the current buffer ml_mfp will be set if needed.  Useful when','line_number':128,'multiline':False]['text':' setline() is used on startup.  For other buffers the buffer must be','line_number':129,'multiline':False]['text':' loaded.','line_number':130,'multiline':False]['text':' FAIL','line_number':133,'multiline':False]['text':' After this don't use "return", goto "cleanup"!','line_number':137,'multiline':False]['text':' set "curbuf" to "buf" and find a window for this buffer','line_number':140,'multiline':False]['text':' appendbufline() uses the line number below which we insert','line_number':146,'multiline':False]['text':' setbufline() uses the line number above which we insert, we only','line_number':149,'multiline':False]['text':' append if it's below the last line','line_number':150,'multiline':False]['text':' not appending anything always succeeds','line_number':160,'multiline':False]['text':' Default result is zero == OK.','line_number':168,'multiline':False]['text':' List argument, get next string.','line_number':171,'multiline':False]['text':' FAIL','line_number':180,'multiline':False]['text':' When coming here from Insert mode, sync undo, so that this can be','line_number':185,'multiline':False]['text':' undone separately from what was previously inserted.','line_number':186,'multiline':False]['text':' notify that u_sync() was called','line_number':188,'multiline':False]['text':' Existing line, replace it.','line_number':193,'multiline':False]['text':' OK','line_number':201,'multiline':False]['text':' append the line.','line_number':204,'multiline':False]['text':' OK','line_number':207,'multiline':False]['text':' only one string argument','line_number':211,'multiline':False]['text':' Only adjust the cursor for buffers other than the current, unless it','line_number':221,'multiline':False]['text':' is the current window. For curbuf and other windows it has been done','line_number':222,'multiline':False]['text':' in mark_adjust_internal().','line_number':223,'multiline':False]['text':'/ "append(lnum, string/list)" function','line_number':241,'multiline':False]['text':'/ Set or append lines to a buffer.','line_number':251,'multiline':False]['text':' FAIL','line_number':257,'multiline':False]['text':'/ "appendbufline(buf, lnum, string/list)" function','line_number':266,'multiline':False]['text':'/ "bufadd(expr)" function','line_number':272,'multiline':False]['text':'/ "bufexists(expr)" function','line_number':280,'multiline':False]['text':'/ "buflisted(expr)" function','line_number':286,'multiline':False]['text':'/ "bufload(expr)" function','line_number':295,'multiline':False]['text':'/ "bufloaded(expr)" function','line_number':308,'multiline':False]['text':'/ "bufname(expr)" function','line_number':317,'multiline':False]['text':'/ "bufnr(expr)" function','line_number':333,'multiline':False]['text':' Don't use tv_get_buf_from_arg(); we continue if the buffer wasn't found','line_number':344,'multiline':False]['text':' and the second argument isn't zero, but we want to return early if the','line_number':345,'multiline':False]['text':' first argument isn't a string or number so only one error is shown.','line_number':346,'multiline':False]['text':' If the buffer isn't found and the second argument is not zero create a','line_number':355,'multiline':False]['text':' new buffer.','line_number':356,'multiline':False]['text':' no need to search if invalid arg or buffer not found','line_number':374,'multiline':False]['text':'/ "bufwinid(nr)" function','line_number':393,'multiline':False]['text':'/ "bufwinnr(nr)" function','line_number':399,'multiline':False]['text':'/ "deletebufline()" function','line_number':405,'multiline':False]['text':' FAIL by default','line_number':409,'multiline':False]['text':' After this don't use "return", goto "cleanup"!','line_number':431,'multiline':False]['text':' set "curbuf" to "buf" and find a window for this buffer','line_number':435,'multiline':False]['text':' When coming here from Insert mode, sync undo, so that this can be','line_number':444,'multiline':False]['text':' undone separately from what was previously inserted.','line_number':445,'multiline':False]['text':' notify that u_sync() was called','line_number':447,'multiline':False]['text':' OK','line_number':473,'multiline':False]['text':'/ @return  buffer options, variables and other attributes in a dictionary.','line_number':481,'multiline':False]['text':' Get a reference to buffer variables','line_number':497,'multiline':False]['text':' List of windows displaying this buffer','line_number':500,'multiline':False]['text':' List of signs placed in this buffer','line_number':510,'multiline':False]['text':'/ "getbufinfo()" function','line_number':519,'multiline':False]['text':' List of all the buffers or selected buffers','line_number':530,'multiline':False]['text':' Information about one buffer.  Argument specifies the buffer','line_number':554,'multiline':False]['text':' Return information about all the buffers or a specified buffer','line_number':561,'multiline':False]['text':'/ Get line or list of lines from buffer "buf" into "rettv".','line_number':580,'multiline':False]['text':'/','line_number':581,'multiline':False]['text':'/ @param retlist  if true, then the lines are returned as a Vim List.','line_number':582,'multiline':False]['text':'/','line_number':583,'multiline':False]['text':'/ @return  range (from start to end) of lines in rettv from the specified','line_number':584,'multiline':False]['text':'/          buffer.','line_number':585,'multiline':False]['text':'/ @param retlist  true: "getbufline()" function','line_number':616,'multiline':False]['text':'/                 false: "getbufoneline()" function','line_number':617,'multiline':False]['text':'/ "getbufline()" function','line_number':633,'multiline':False]['text':'/ "getbufoneline()" function','line_number':639,'multiline':False]['text':'/ "getline(lnum, [end])" function','line_number':645,'multiline':False]['text':'/ "setbufline()" function','line_number':663,'multiline':False]['text':'/ "setline()" function','line_number':669,'multiline':False]['text':'/ Make "buf" the current buffer.','line_number':679,'multiline':False]['text':'/','line_number':680,'multiline':False]['text':'/ restore_buffer() MUST be called to undo.','line_number':681,'multiline':False]['text':'/ No autocommands will be executed. Use aucmd_prepbuf() if there are any.','line_number':682,'multiline':False]['text':'/ Restore the current buffer after using switch_buffer().','line_number':693,'multiline':False]['text':' Check for valid buffer, just in case.','line_number':697,'multiline':False]['text':'/ Find a window for buffer "buf".','line_number':706,'multiline':False]['text':'/ If found true is returned and "wp" and "tp" are set to','line_number':707,'multiline':False]['text':'/ the window and tabpage.','line_number':708,'multiline':False]['text':'/ If not found, false is returned.','line_number':709,'multiline':False]['text':'/','line_number':710,'multiline':False]['text':'/ @param       buf  buffer to find a window for','line_number':711,'multiline':False]['text':'/ @param[out]  wp   stores the found window','line_number':712,'multiline':False]['text':'/ @param[out]  tp   stores the found tabpage','line_number':713,'multiline':False]['text':'/','line_number':714,'multiline':False]['text':'/ @return  true if a window was found for the buffer.','line_number':715,'multiline':False]