['text':' When adding an Ex command:','line_number':16,'multiline':False]['text':' 1. Add an entry to the table in src/nvim/ex_cmds.lua.  Keep it sorted on the','line_number':17,'multiline':False]['text':'    shortest version of the command name that works.  If it doesn't start with','line_number':18,'multiline':False]['text':'    a lower case letter, add it at the end.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':'    Each table entry is a table with the following keys:','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':'      Key     | Description','line_number':23,'multiline':False]['text':'      ------- | -------------------------------------------------------------','line_number':24,'multiline':False]['text':'      command | Name of the command. Required.','line_number':25,'multiline':False]['text':'      enum    | Name of the enum entry. If not set defaults to CMD_{command}.','line_number':26,'multiline':False]['text':'      flags   | A set of the flags from below list joined by bitwise or.','line_number':27,'multiline':False]['text':'      func    | Name of the function containing the implementation.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'    Referenced function should be either non-static one or defined in','line_number':30,'multiline':False]['text':'    ex_docmd.c and be coercible to ex_func_T type from below.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'    All keys not described in the above table are reserved for future use.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' 2. Add a "case: CMD_xxx" in the big switch in ex_docmd.c.','line_number':35,'multiline':False]['text':' 3. Add an entry in the index for Ex commands at ":help ex-cmd-index".','line_number':36,'multiline':False]['text':' 4. Add documentation in ../doc/xxx.txt.  Add a tag for both the short and','line_number':37,'multiline':False]['text':'    long name of the command.','line_number':38,'multiline':False]['text':' allow a linespecs','line_number':40,'multiline':False]['text':' allow a ! after the command name','line_number':41,'multiline':False]['text':' allow extra args after command name','line_number':42,'multiline':False]['text':' expand wildcards in extra part','line_number':43,'multiline':False]['text':' no spaces allowed in the extra part','line_number':44,'multiline':False]['text':' default file range is 1,$','line_number':45,'multiline':False]['text':' extend range to include whole fold also','line_number':46,'multiline':False]['text':' when less than two numbers given','line_number':47,'multiline':False]['text':' argument required','line_number':48,'multiline':False]['text':' check for trailing vertical bar','line_number':49,'multiline':False]['text':' allow "x for register designation','line_number':50,'multiline':False]['text':' allow count in argument, after command','line_number':51,'multiline':False]['text':' no trailing comment allowed','line_number':52,'multiline':False]['text':' zero line number allowed','line_number':53,'multiline':False]['text':' do not remove CTRL-V from argument','line_number':54,'multiline':False]['text':' allow "+command" argument','line_number':55,'multiline':False]['text':' accepts buffer name','line_number':56,'multiline':False]['text':' accepts unlisted buffer too','line_number':57,'multiline':False]['text':' allow "++opt=val" argument','line_number':58,'multiline':False]['text':' allowed in the sandbox','line_number':59,'multiline':False]['text':' allowed in cmdline window','line_number':60,'multiline':False]['text':' forbidden in non-'modifiable' buffer','line_number':61,'multiline':False]['text':' allow flags after count in argument','line_number':62,'multiline':False]['text':' command can be executed when textlock is','line_number':63,'multiline':False]['text':' set; when missing disallows editing another','line_number':64,'multiline':False]['text':' buffer when curbuf->b_ro_locked is set','line_number':65,'multiline':False]['text':' keep sctx of where command was invoked','line_number':66,'multiline':False]['text':' allow incremental command preview','line_number':67,'multiline':False]['text':' multiple extra files allowed','line_number':68,'multiline':False]['text':' 1 file, defaults to current file','line_number':69,'multiline':False]['text':' one extra word allowed','line_number':70,'multiline':False]['text':'/ values for cmd_addr_type','line_number':72,'multiline':False]['text':'/< buffer line numbers','line_number':74,'multiline':False]['text':'/< window number','line_number':75,'multiline':False]['text':'/< argument number','line_number':76,'multiline':False]['text':'/< buffer number of loaded buffer','line_number':77,'multiline':False]['text':'/< buffer number','line_number':78,'multiline':False]['text':'/< tab page number','line_number':79,'multiline':False]['text':'/< Tab page that only relative','line_number':80,'multiline':False]['text':'/< quickfix list valid entry number','line_number':81,'multiline':False]['text':'/< quickfix list entry number','line_number':82,'multiline':False]['text':'/< positive count or zero, defaults to 1','line_number':83,'multiline':False]['text':'/< something else, use line number for '$', '%', etc.','line_number':84,'multiline':False]['text':'/< no range used','line_number':85,'multiline':False]['text':' behavior for bad character, "++bad=" argument','line_number':90,'multiline':False]['text':' replace it with '?' (default)','line_number':91,'multiline':False]['text':' leave it','line_number':92,'multiline':False]['text':' erase it','line_number':93,'multiline':False]['text':' NOTE: These possible could be removed and changed so that','line_number':98,'multiline':False]['text':' Callback could take a "command" style string, and simply','line_number':99,'multiline':False]['text':' execute that (instead of it being a function).','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' But it's still a bit weird to do that.','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' Another option would be that we just make a callback reference to','line_number':104,'multiline':False]['text':' "execute($INPUT)" or something like that, so whatever the user','line_number':105,'multiline':False]['text':' sends in via autocmds is just executed via this.','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' However, that would probably have some performance cost (probably','line_number':108,'multiline':False]['text':' very marginal, but still some cost either way).','line_number':109,'multiline':False]['text':'/ Structure for command definition.','line_number':129,'multiline':False]['text':'/< Name of the command.','line_number':131,'multiline':False]['text':'/< Function with implementation of this command.','line_number':132,'multiline':False]['text':'/< Preview callback function of this command.','line_number':133,'multiline':False]['text':'/< Relevant flags from the declared above.','line_number':134,'multiline':False]['text':'/< Flag for address type.','line_number':135,'multiline':False]['text':'/ Arguments used for Ex commands.','line_number':138,'multiline':False]['text':'/< argument of the command','line_number':140,'multiline':False]['text':'/< starting position of command arguments','line_number':141,'multiline':False]['text':'/< length of command arguments','line_number':142,'multiline':False]['text':'/< number of command arguments','line_number':143,'multiline':False]['text':'/< next command (NULL if none)','line_number':144,'multiline':False]['text':'/< the name of the command (except for :make)','line_number':145,'multiline':False]['text':'/< pointer to pointer of allocated cmdline','line_number':146,'multiline':False]['text':'/< free later','line_number':147,'multiline':False]['text':'/< the index for the command','line_number':148,'multiline':False]['text':'/< flags for the command','line_number':149,'multiline':False]['text':'/< don't execute the command, only parse it','line_number':150,'multiline':False]['text':'/< true if ! present','line_number':151,'multiline':False]['text':'/< the number of addresses given','line_number':152,'multiline':False]['text':'/< the first line number','line_number':153,'multiline':False]['text':'/< the second line number or count','line_number':154,'multiline':False]['text':'/< type of the count/range','line_number':155,'multiline':False]['text':'/< extra flags after count: EXFLAG_','line_number':156,'multiline':False]['text':'/< +command arg to be used in edited file','line_number':157,'multiline':False]['text':'/< the line number in an edited file','line_number':158,'multiline':False]['text':'/< true with ":w >>file" command','line_number':159,'multiline':False]['text':'/< true with ":w !command" and ":r!command"','line_number':160,'multiline':False]['text':'/< number of '>' or '<' for shift command','line_number':161,'multiline':False]['text':'/< register name (NUL if none)','line_number':162,'multiline':False]['text':'/< 0, FORCE_BIN or FORCE_NOBIN','line_number':163,'multiline':False]['text':'/< ++edit argument','line_number':164,'multiline':False]['text':'/< ++p argument','line_number':165,'multiline':False]['text':'/< ++ff= argument (first char of argument)','line_number':166,'multiline':False]['text':'/< ++enc= argument (index in cmd[])','line_number':167,'multiline':False]['text':'/< BAD_KEEP, BAD_DROP or replacement byte','line_number':168,'multiline':False]['text':'/< user command index','line_number':169,'multiline':False]['text':'/< returned error message','line_number':170,'multiline':False]['text':'/< Function used to get the next line','line_number':171,'multiline':False]['text':'/< argument for getline()','line_number':172,'multiline':False]['text':'/< condition stack for ":if" etc.','line_number':173,'multiline':False]['text':' ":edit ++bin file"','line_number':176,'multiline':False]['text':' ":edit ++nobin file"','line_number':177,'multiline':False]['text':' Values for "flags"','line_number':179,'multiline':False]['text':' 'l': list','line_number':180,'multiline':False]['text':' '#': number','line_number':181,'multiline':False]['text':' 'p': print','line_number':182,'multiline':False]['text':'/< ":sandbox"','line_number':185,'multiline':False]['text':'/< ":silent"','line_number':186,'multiline':False]['text':'/< ":silent!"','line_number':187,'multiline':False]['text':'/< ":unsilent"','line_number':188,'multiline':False]['text':'/< ":noautocmd"','line_number':189,'multiline':False]['text':'/< ":hide"','line_number':190,'multiline':False]['text':'/< ":browse" - invoke file dialog','line_number':191,'multiline':False]['text':'/< ":confirm" - invoke yes/no dialog','line_number':192,'multiline':False]['text':'/< ":keepalt"','line_number':193,'multiline':False]['text':'/< ":keepmarks"','line_number':194,'multiline':False]['text':'/< ":keepjumps"','line_number':195,'multiline':False]['text':'/< ":lockmarks"','line_number':196,'multiline':False]['text':'/< ":keeppatterns"','line_number':197,'multiline':False]['text':'/< ":noswapfile"','line_number':198,'multiline':False]['text':'/ Command modifiers ":vertical", ":browse", ":confirm", ":hide", etc. set a','line_number':201,'multiline':False]['text':'/ flag.  This needs to be saved for recursive commands, put them in a','line_number':202,'multiline':False]['text':'/ structure for easy manipulation.','line_number':203,'multiline':False]['text':'/< CMOD_ flags','line_number':205,'multiline':False]['text':'/< flags for win_split()','line_number':207,'multiline':False]['text':'/< > 0 when ":tab" was used','line_number':208,'multiline':False]['text':'/< set by :filter /pat/','line_number':210,'multiline':False]['text':'/< set for :filter!','line_number':211,'multiline':False]['text':'/< 0 if not set, > 0 to set 'verbose' to cmod_verbose - 1','line_number':213,'multiline':False]['text':' values for undo_cmdmod()','line_number':215,'multiline':False]['text':'/< saved value of 'eventignore'','line_number':216,'multiline':False]['text':'/< set when "sandbox" was incremented','line_number':217,'multiline':False]['text':'/< if 'verbose' was set: value of p_verbose plus one','line_number':218,'multiline':False]['text':'/< if non-zero: saved value of msg_silent + 1','line_number':219,'multiline':False]['text':'/< for restoring msg_scroll','line_number':220,'multiline':False]['text':'/< incremented when emsg_silent is','line_number':221,'multiline':False]['text':'/ Stores command modifier info used by `nvim_parse_cmd`','line_number':224,'multiline':False]