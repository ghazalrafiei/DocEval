['text':' "timeout expired" flag','line_number':32,'multiline':False]['text':'/ Process `Loop.uv` events with a timeout.','line_number':35,'multiline':False]['text':'/','line_number':36,'multiline':False]['text':'/ @param loop','line_number':37,'multiline':False]['text':'/ @param ms  0: non-blocking poll.','line_number':38,'multiline':False]['text':'/            > 0: timeout after `ms`.','line_number':39,'multiline':False]['text':'/            < 0: wait forever.','line_number':40,'multiline':False]['text':'/ @param once  true: process at most one `Loop.uv` event.','line_number':41,'multiline':False]['text':'/              false: process until `ms` timeout (only has effect if `ms` > 0).','line_number':42,'multiline':False]['text':'/ @return  true if `ms` > 0 and was reached','line_number':43,'multiline':False]['text':' Should not re-enter uv_run','line_number':47,'multiline':False]['text':' This timer ensures UV_RUN_ONCE does not block indefinitely for I/O.','line_number':55,'multiline':False]['text':' For ms == 0, do a non-blocking event poll.','line_number':58,'multiline':False]['text':' Can re-enter uv_run now','line_number':70,'multiline':False]['text':'/ Processes one `Loop.uv` event (at most).','line_number':74,'multiline':False]['text':'/ Processes all `Loop.fast_events` events.','line_number':75,'multiline':False]['text':'/ Does NOT process `Loop.events`, that is an application-specific decision.','line_number':76,'multiline':False]['text':'/','line_number':77,'multiline':False]['text':'/ @param loop','line_number':78,'multiline':False]['text':'/ @param ms  0: non-blocking poll.','line_number':79,'multiline':False]['text':'/            > 0: timeout after `ms`.','line_number':80,'multiline':False]['text':'/            < 0: wait forever.','line_number':81,'multiline':False]['text':'/ @return  true if `ms` > 0 and was reached','line_number':82,'multiline':False]['text':'/ Schedules a fast event from another thread.','line_number':90,'multiline':False]['text':'/','line_number':91,'multiline':False]['text':'/ @note Event is queued into `fast_events`, which is processed outside of the','line_number':92,'multiline':False]['text':'/       primary `events` queue by loop_poll_events(). For `main_loop`, that','line_number':93,'multiline':False]['text':'/       means `fast_events` is NOT processed in an "editor mode"','line_number':94,'multiline':False]['text':'/       (VimState.execute), so redraw and other side effects are likely to be','line_number':95,'multiline':False]['text':'/       skipped.','line_number':96,'multiline':False]['text':'/ @see loop_schedule_deferred','line_number':97,'multiline':False]['text':'/ Schedules an event from another thread. Unlike loop_schedule_fast(), the','line_number':106,'multiline':False]['text':'/ event is forwarded to `Loop.events`, instead of being processed immediately.','line_number':107,'multiline':False]['text':'/','line_number':108,'multiline':False]['text':'/ @see loop_schedule_fast','line_number':109,'multiline':False]['text':' Sometimes libuv will run pending callbacks (timer for example) before','line_number':127,'multiline':False]['text':' blocking for a poll. If this happens and the callback pushes a event to one','line_number':128,'multiline':False]['text':' of the queues, the event would only be processed after the poll','line_number':129,'multiline':False]['text':' returns (user hits a key for example). To avoid this scenario, we call','line_number':130,'multiline':False]['text':' uv_stop when a event is enqueued.','line_number':131,'multiline':False]['text':'/ Closes `loop` and its handles, and frees its structures.','line_number':144,'multiline':False]['text':'/','line_number':145,'multiline':False]['text':'/ @param loop  Loop to destroy','line_number':146,'multiline':False]['text':'/ @param wait  Wait briefly for handles to deref','line_number':147,'multiline':False]['text':'/','line_number':148,'multiline':False]['text':'/ @returns false if the loop could not be closed gracefully','line_number':149,'multiline':False]['text':' Run the loop to tickle close-callbacks (which should then free memory).','line_number':163,'multiline':False]['text':' Use UV_RUN_NOWAIT to avoid a hang. #11820','line_number':164,'multiline':False]['text':' seconds','line_number':169,'multiline':False]['text':' Some libuv resource was not correctly deref'd. Log and bail.','line_number':171,'multiline':False]['text':' Loop wonâ€™t block for I/O after this.','line_number':181,'multiline':False]['text':' XXX: Close all (lua/luv!) handles. But loop_walk_cb() does not call','line_number':183,'multiline':False]['text':' resource-specific close-callbacks, so this leaks memory...','line_number':184,'multiline':False]['text':' Flush thread_events to fast_events for processing on main loop.','line_number':217,'multiline':False]