['text':' Multi-level queue for selective async event processing.','line_number':1,'multiline':False]['text':' Not threadsafe; access must be synchronized externally.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Multiqueue supports a parent-child relationship with these properties:','line_number':4,'multiline':False]['text':' - pushing a node to a child queue will push a corresponding link node to the','line_number':5,'multiline':False]['text':'   parent queue','line_number':6,'multiline':False]['text':' - removing a link node from a parent queue will remove the next node','line_number':7,'multiline':False]['text':'   in the linked child queue','line_number':8,'multiline':False]['text':' - removing a node from a child queue will remove the corresponding link node','line_number':9,'multiline':False]['text':'   in the parent queue','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' These properties allow Nvim to organize and process events from different','line_number':12,'multiline':False]['text':' sources with a certain degree of control. How the multiqueue is used:','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'                         +----------------+','line_number':15,'multiline':False]['text':'                         |   Main loop    |','line_number':16,'multiline':False]['text':'                         +----------------+','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':'                         +----------------+','line_number':19,'multiline':False]['text':'         +-------------->|   Event loop   |<------------+','line_number':20,'multiline':False]['text':'         |               +--+-------------+             |','line_number':21,'multiline':False]['text':'         |                  ^           ^               |','line_number':22,'multiline':False]['text':'         |                  |           |               |','line_number':23,'multiline':False]['text':'    +-----------+   +-----------+    +---------+    +---------+','line_number':24,'multiline':False]['text':'    | Channel 1 |   | Channel 2 |    |  Job 1  |    |  Job 2  |','line_number':25,'multiline':False]['text':'    +-----------+   +-----------+    +---------+    +---------+','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' The lower boxes represent event emitters, each with its own private queue','line_number':29,'multiline':False]['text':' having the event loop queue as the parent.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' When idle, the main loop spins the event loop which queues events from many','line_number':32,'multiline':False]['text':' sources (channels, jobs, user...). Each event emitter pushes events to its','line_number':33,'multiline':False]['text':' private queue which is propagated to the event loop queue. When the main loop','line_number':34,'multiline':False]['text':' consumes an event, the corresponding event is removed from the emitter's','line_number':35,'multiline':False]['text':' queue.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' The main reason for this queue hierarchy is to allow focusing on a single','line_number':38,'multiline':False]['text':' event emitter while blocking the main loop. For example, if the `jobwait`','line_number':39,'multiline':False]['text':' Vimscript function is called on job1, the main loop will temporarily stop polling','line_number':40,'multiline':False]['text':' the event loop queue and poll job1 queue instead. Same with channels, when','line_number':41,'multiline':False]['text':' calling `rpcrequest` we want to temporarily stop processing events from','line_number':42,'multiline':False]['text':' other sources and focus on a specific channel.','line_number':43,'multiline':False]['text':' true: current item is just a link to a node in a child queue','line_number':63,'multiline':False]['text':' circularly-linked','line_number':69,'multiline':False]['text':'/< Event present on multiple queues.','line_number':79,'multiline':False]['text':' parent cannot have a parent, more like a "root"','line_number':95,'multiline':False]['text':'/ Removes the next item and returns its Event.','line_number':128,'multiline':False]['text':'/ Removes all events without processing them.','line_number':154,'multiline':False]['text':'/ Gets the count of all events currently in the queue.','line_number':175,'multiline':False]['text':'/ Gets an Event from an item.','line_number':181,'multiline':False]['text':'/','line_number':182,'multiline':False]['text':'/ @param remove   Remove the node from its queue, and free it.','line_number':183,'multiline':False]['text':' get the next node in the linked queue','line_number':189,'multiline':False]['text':' remove the child node','line_number':195,'multiline':False]['text':' remove the corresponding link node in the parent queue','line_number':201,'multiline':False]['text':' Only a parent queue has link-nodes','line_number':218,'multiline':False]['text':' push link node to the parent queue','line_number':233,'multiline':False]['text':'/ Multicasts a one-shot event to multiple queues.','line_number':249,'multiline':False]['text':'/','line_number':250,'multiline':False]['text':'/ The handler will be invoked once by the _first_ queue that consumes the','line_number':251,'multiline':False]['text':'/ event. Later processing will do nothing (just memory cleanup).','line_number':252,'multiline':False]['text':'/','line_number':253,'multiline':False]['text':'/ @param ev  Event','line_number':254,'multiline':False]['text':'/ @param num  Number of queues that the event will be put on','line_number':255,'multiline':False]['text':'/ @return Event that is safe to put onto `num` queues','line_number':256,'multiline':False]