['text':'!/usr/bin/env python3','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' https://github.com/cpplint/cpplint','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2009 Google Inc. All rights reserved.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':7,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':8,'multiline':False]['text':' met:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'    * Redistributions of source code must retain the above copyright notice,','line_number':11,'multiline':False]['text':'      this list of conditions and the following disclaimer.','line_number':12,'multiline':False]['text':'    * Redistributions in binary form must reproduce the above copyright','line_number':13,'multiline':False]['text':'      notice, this list of conditions and the following disclaimer in the','line_number':14,'multiline':False]['text':'      documentation and/or other materials provided with the distribution.','line_number':15,'multiline':False]['text':'    * Neither the name of Google Inc. nor the names of its contributors may be','line_number':16,'multiline':False]['text':'      used to endorse or promote products derived from this software without','line_number':17,'multiline':False]['text':'      specific prior written permission.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':20,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':21,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':22,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':23,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':24,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':25,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':26,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':27,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':28,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':29,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':30,'multiline':False]['text':' We categorize each error message we print.  Here are the categories.','line_number':147,'multiline':False]['text':' We want an explicit list so we can list them all in cpplint --filter=.','line_number':148,'multiline':False]['text':' If you add a new error message with a new category, add it to the list','line_number':149,'multiline':False]['text':' here!  cpplint_unittest.py should tell you if you forget to do this.','line_number':150,'multiline':False]['text':' The default state of the category filter. This is overridden by the --filter=','line_number':178,'multiline':False]['text':' flag. By default all errors are on, so only add here categories that should be','line_number':179,'multiline':False]['text':' off by default (i.e., categories that must be enabled by the --filter= flags).','line_number':180,'multiline':False]['text':' All entries here should start with a '-' or '+', as in the --filter= flag.','line_number':181,'multiline':False]['text':' These constants define the current inline assembly state','line_number':184,'multiline':False]['text':' Outside of inline assembly block','line_number':185,'multiline':False]['text':' Inside inline assembly block','line_number':186,'multiline':False]['text':' Last line of inline assembly block','line_number':187,'multiline':False]['text':' The whole block is an inline assembly block','line_number':188,'multiline':False]['text':' Match start of assembly blocks','line_number':190,'multiline':False]['text':' Finds occurrences of NOLINT or NOLINT(...).','line_number':198,'multiline':False]['text':' {str, set(int)}: a map from error categories to sets of linenumbers','line_number':201,'multiline':False]['text':' on which those errors are expected and should be suppressed.','line_number':202,'multiline':False]['text':' {(str, int)}: a set of error categories and line numbers which are expected to','line_number':205,'multiline':False]['text':' be suppressed','line_number':206,'multiline':False]['text':' The allowed line length of files.','line_number':209,'multiline':False]['text':' This is set by --linelength flag.','line_number':210,'multiline':False]['text':' The allowed extensions for file names','line_number':213,'multiline':False]['text':' This is set by --extensions flag.','line_number':214,'multiline':False]['text':' FIXME(adonovan): "NOLINT(" is misparsed as NOLINT(*).','line_number':231,'multiline':False]['text':' => "suppress all"','line_number':235,'multiline':False]['text':' The regexp compilation caching is inlined in both Match and Search for','line_number':300,'multiline':False]['text':' performance reasons; factoring it out into a separate function turns out','line_number':301,'multiline':False]['text':' to be noticeably expensive.','line_number':302,'multiline':False]['text':' global setting.','line_number':320,'multiline':False]['text':' global count of reported errors','line_number':321,'multiline':False]['text':' filters to apply when emitting error messages','line_number':322,'multiline':False]['text':' In what way are we counting errors?','line_number':324,'multiline':False]['text':' string to int dict storing error counts','line_number':325,'multiline':False]['text':' output format:','line_number':328,'multiline':False]['text':' "emacs" - format that emacs can parse (default)','line_number':329,'multiline':False]['text':' "vs7" - format that Microsoft Visual Studio 7 can parse','line_number':330,'multiline':False]['text':' Default filters always have less priority than the flag ones.','line_number':367,'multiline':False]['text':' Don't know what to do; header guard warnings may be wrong...','line_number':510,'multiline':False]['text':' There are three ways we might decide not to print an error message:','line_number':516,'multiline':False]['text':' a "NOLINT(category)" comment appears in the source,','line_number':517,'multiline':False]['text':' the verbosity level isn't high enough, or the filters filter it out.','line_number':518,'multiline':False]['text':' should have been checked for in SetFilter.','line_number':535,'multiline':False]['text':' Matches standard C++ escape sequences per 2.13.2.3 of the C++ standard.','line_number':580,'multiline':False]['text':' Matches strings.  Escape codes should already be removed by ESCAPES.','line_number':583,'multiline':False]['text':' Matches characters.  Escape codes should already be removed by ESCAPES.','line_number':585,'multiline':False]['text':' Matches multi-line C++ comments.','line_number':587,'multiline':False]['text':' This RE is a little bit more complicated than one might expect, because we','line_number':588,'multiline':False]['text':' have to take care of space removals tools so we can handle comments inside','line_number':589,'multiline':False]['text':' statements better.','line_number':590,'multiline':False]['text':' The current rule is: We only clear spaces from both sides when we're at the','line_number':591,'multiline':False]['text':' end of the line. Otherwise, we try to remove spaces from the right side,','line_number':592,'multiline':False]['text':' if this doesn't work we try on left side but only if there's a non-character','line_number':593,'multiline':False]['text':' on the right.','line_number':594,'multiline':False]['text':' after this, \\" does not match to \"','line_number':615,'multiline':False]['text':' Only return this marker if the comment goes beyond this line','line_number':623,'multiline':False]['text':' Having // dummy comments makes the lines non-empty, so we will not get','line_number':641,'multiline':False]['text':' unnecessary blank line warnings later in the code.','line_number':642,'multiline':False]['text':' get rid of /* ... */','line_number':675,'multiline':False]['text':' Remove escaped characters first to make quote/single quote','line_number':728,'multiline':False]['text':' collapsing basic.  Things that look like escaped characters','line_number':729,'multiline':False]['text':' shouldn't occur outside of strings and chars.','line_number':730,'multiline':False]['text':' Ignore #ifdefs, but not if it is macros that are checked','line_number':778,'multiline':False]['text':' Check first line','line_number':847,'multiline':False]['text':' Continue scanning forward','line_number':853,'multiline':False]['text':' Did not find endchar before end of file, give up','line_number':862,'multiline':False]['text':' These should be synced with the ignored headers in the `iwyu` target in','line_number':900,'multiline':False]['text':' the Makefile.','line_number':901,'multiline':False]['text':' Only a check against extern variables for now.','line_number':986,'multiline':False]['text':' Remove all \\ (escaped backslashes) from the line. They are OK, and the','line_number':1038,'multiline':False]['text':' second (escaped) slash may trigger later \" detection erroneously.','line_number':1039,'multiline':False]['text':' hack: allow /* inside comment line. Could be extended to allow them inside','line_number':1066,'multiline':False]['text':' any // comment.','line_number':1067,'multiline':False]['text':' Comparisons made explicit for clarity -- pylint:','line_number':1120,'multiline':False]['text':' disable=g-explicit-bool-comparison','line_number':1121,'multiline':False]['text':' Comparisons made explicit for clarity -- pylint:','line_number':1155,'multiline':False]['text':' disable=g-explicit-bool-comparison','line_number':1156,'multiline':False]['text':' Comparisons made explicit for clarity -- pylint:','line_number':1186,'multiline':False]['text':' disable=g-explicit-bool-comparison','line_number':1187,'multiline':False]['text':' The entire nesting stack before #if','line_number':1210,'multiline':False]['text':' The entire nesting stack up to #else','line_number':1213,'multiline':False]['text':' Whether we have already seen #else or #elif','line_number':1216,'multiline':False]['text':' Stack for tracking all braces.  An object is pushed whenever we','line_number':1225,'multiline':False]['text':' see a "{", and popped when we see a "}".  Only 1 type of','line_number':1226,'multiline':False]['text':' object is possible:','line_number':1227,'multiline':False]['text':' - _BlockInfo: some type of block.','line_number':1228,'multiline':False]['text':' Stack of _PreprocessorInfo objects.','line_number':1231,'multiline':False]['text':' Beginning of #if block, save the nesting stack here.  The saved','line_number':1265,'multiline':False]['text':' stack will allow us to restore the parsing state in the #else','line_number':1266,'multiline':False]['text':' case.','line_number':1267,'multiline':False]['text':' Beginning of #else block','line_number':1270,'multiline':False]['text':' This is the first #else or #elif block.  Remember the','line_number':1273,'multiline':False]['text':' whole nesting stack up to this point.  This is what we','line_number':1274,'multiline':False]['text':' keep after the #endif.','line_number':1275,'multiline':False]['text':' Restore the stack to how it was before the #if','line_number':1280,'multiline':False]['text':' TODO(unknown): unexpected #else, issue warning?','line_number':1283,'multiline':False]['text':' End of #if or #else blocks.','line_number':1286,'multiline':False]['text':' If we saw an #else, we will need to restore the nesting','line_number':1288,'multiline':False]['text':' stack to its former state before the #else, otherwise we','line_number':1289,'multiline':False]['text':' will just continue from where we left off.','line_number':1290,'multiline':False]['text':' Here we can just use a shallow copy since we are the last','line_number':1292,'multiline':False]['text':' reference to it.','line_number':1293,'multiline':False]['text':' Drop the corresponding #if','line_number':1295,'multiline':False]['text':' TODO(unknown): unexpected #endif, issue warning?','line_number':1298,'multiline':False]['text':' Update pp_stack first','line_number':1310,'multiline':False]['text':' Count parentheses.  This is to avoid adding struct arguments to','line_number':1313,'multiline':False]['text':' the nesting stack.','line_number':1314,'multiline':False]['text':' Also check if we are starting or ending an inline assembly block.','line_number':1320,'multiline':False]['text':' Enter assembly block','line_number':1325,'multiline':False]['text':' Not entering assembly block.  If previous line was','line_number':1328,'multiline':False]['text':' _END_ASM, we will now shift to _NO_ASM state.','line_number':1329,'multiline':False]['text':' Exit assembly block','line_number':1333,'multiline':False]['text':' Consume braces or semicolons from what's left of the line','line_number':1336,'multiline':False]['text':' Match first brace, semicolon, or closed parenthesis.','line_number':1338,'multiline':False]['text':' If namespace or class hasn't seen an opening brace yet, mark','line_number':1345,'multiline':False]['text':' namespace/class head as complete.  Push a new block onto the','line_number':1346,'multiline':False]['text':' stack otherwise.','line_number':1347,'multiline':False]['text':' If we haven't seen an opening brace yet, but we already saw','line_number':1355,'multiline':False]['text':' a semicolon, this is probably a forward declaration.  Pop','line_number':1356,'multiline':False]['text':' the stack for these.','line_number':1357,'multiline':False]['text':'','line_number':1358,'multiline':False]['text':' Similarly, if we haven't seen an opening brace yet, but we','line_number':1359,'multiline':False]['text':' already saw a closing parenthesis, then these are probably','line_number':1360,'multiline':False]['text':' function arguments with extra "class" or "struct" keywords.','line_number':1361,'multiline':False]['text':' Also pop these stack for these.','line_number':1362,'multiline':False]['text':' token == '}'','line_number':1365,'multiline':False]['text':' Perform end of block checks and pop the stack.','line_number':1366,'multiline':False]['text':' Remove comments from the line, but leave in strings for now.','line_number':1398,'multiline':False]['text':' Remove escaped backslashes before looking for undefined escapes.','line_number':1409,'multiline':False]['text':' For the rest, work with both comments and strings removed.','line_number':1416,'multiline':False]['text':' One whitespace is correct; zero whitespace is handled elsewhere.','line_number':1465,'multiline':False]['text':' Comparisons made explicit for correctness -- pylint:','line_number':1482,'multiline':False]['text':' disable=g-explicit-bool-comparison','line_number':1483,'multiline':False]['text':' Find the next operator that can tell us whether < is used as an','line_number':1503,'multiline':False]['text':' opening bracket or as a less-than operator.  We only want to','line_number':1504,'multiline':False]['text':' warn on the latter case.','line_number':1505,'multiline':False]['text':'','line_number':1506,'multiline':False]['text':' We could also check all other operators and terminate the search','line_number':1507,'multiline':False]['text':' early, e.g. if we got something like this "a<b+c", the "<" is','line_number':1508,'multiline':False]['text':' most likely a less-than operator, but then we will get false','line_number':1509,'multiline':False]['text':' positives for default arguments and other template expressions.','line_number':1510,'multiline':False]['text':' Found an operator, update nesting stack','line_number':1513,'multiline':False]['text':' Expecting closing angle bracket','line_number':1518,'multiline':False]['text':' Found matching angle bracket','line_number':1524,'multiline':False]['text':' Got a comma after a bracket, this is most likely a','line_number':1527,'multiline':False]['text':' template argument.  We have not seen a closing angle','line_number':1528,'multiline':False]['text':' bracket yet, but it's probably a few lines later if we','line_number':1529,'multiline':False]['text':' look for it, so just return early here.','line_number':1530,'multiline':False]['text':' Got some other operator.','line_number':1533,'multiline':False]['text':' Expecting closing parenthesis or closing bracket','line_number':1537,'multiline':False]['text':' We don't bother checking for matching () or [].  If we got','line_number':1541,'multiline':False]['text':' something like (] or [), it would have been a syntax','line_number':1542,'multiline':False]['text':' error.','line_number':1543,'multiline':False]['text':' Scan the next line','line_number':1547,'multiline':False]['text':' Exhausted all remaining lines and still no matching angle bracket.','line_number':1553,'multiline':False]['text':' Most likely the input was incomplete, otherwise we should have','line_number':1554,'multiline':False]['text':' seen a semicolon and returned early.','line_number':1555,'multiline':False]['text':' Find the previous operator','line_number':1573,'multiline':False]['text':' Found an operator, update nesting stack','line_number':1576,'multiline':False]['text':' Expecting opening angle bracket','line_number':1581,'multiline':False]['text':' Found matching angle bracket','line_number':1587,'multiline':False]['text':' Got a comma before a bracket, this is most likely a','line_number':1590,'multiline':False]['text':' template argument.  The opening angle bracket is probably','line_number':1591,'multiline':False]['text':' there if we look for it, so just return early here.','line_number':1592,'multiline':False]['text':' Got some other operator.','line_number':1595,'multiline':False]['text':' Expecting opening parenthesis or opening bracket','line_number':1599,'multiline':False]['text':' Scan the previous line','line_number':1606,'multiline':False]['text':' Exhausted all earlier lines and still no matching angle bracket.','line_number':1612,'multiline':False]['text':' Don't use "elided" lines here, otherwise we can't check commented lines.','line_number':1632,'multiline':False]['text':' Don't want to use "raw" either, because we don't want to check inside','line_number':1633,'multiline':False]['text':' C++11 raw strings,','line_number':1634,'multiline':False]['text':' Before nixing comments, check if the line is blank for no good','line_number':1638,'multiline':False]['text':' reason.  This includes the first line after a block is opened, and','line_number':1639,'multiline':False]['text':' blank lines at the end of a function (ie, right before a line like '}'','line_number':1640,'multiline':False]['text':'','line_number':1641,'multiline':False]['text':' Skip all the blank line checks if we are immediately inside a','line_number':1642,'multiline':False]['text':' namespace body.  In other words, don't issue blank line warnings','line_number':1643,'multiline':False]['text':' for this block:','line_number':1644,'multiline':False]['text':'   namespace {','line_number':1645,'multiline':False]['text':'','line_number':1646,'multiline':False]['text':'   }','line_number':1647,'multiline':False]['text':'','line_number':1648,'multiline':False]['text':' A warning about missing end of namespace comments will be issued instead.','line_number':1649,'multiline':False]['text':' TODO(unknown): Don't complain if line before blank line, and line','line_number':1654,'multiline':False]['text':'                after,both start with alnums and are indented the same','line_number':1655,'multiline':False]['text':'                amount.  This ignores whitespace at the start of a','line_number':1656,'multiline':False]['text':'                namespace block because those are not usually indented.','line_number':1657,'multiline':False]['text':' OK, we have a blank line at the start of a code block.  Before we','line_number':1659,'multiline':False]['text':' complain, we check if it is an exception to the rule: The previous','line_number':1660,'multiline':False]['text':' non-empty line has the parameters of a function header that are','line_number':1661,'multiline':False]['text':' indented 4 spaces (because they did not fit in a 80 column line','line_number':1662,'multiline':False]['text':' when placed on the same line as the function name).  We also check','line_number':1663,'multiline':False]['text':' for the case where the previous line is indented 6 spaces, which','line_number':1664,'multiline':False]['text':' may happen when the initializers of a constructor do not fit into','line_number':1665,'multiline':False]['text':' a 80 column line.','line_number':1666,'multiline':False]['text':' Initializer list?','line_number':1667,'multiline':False]['text':' We are looking for the opening column of initializer list,','line_number':1668,'multiline':False]['text':' which should be indented 4 spaces to cause 6 space indentation','line_number':1669,'multiline':False]['text':' afterwards.','line_number':1670,'multiline':False]['text':' Next, we complain if there's a comment too near the text','line_number':1676,'multiline':False]['text':' Check if the // may be in quotes.  If so, ignore it','line_number':1679,'multiline':False]['text':' Comparisons made explicit for clarity -- pylint:','line_number':1680,'multiline':False]['text':' disable=g-explicit-bool-comparison','line_number':1681,'multiline':False]['text':' not in quotes','line_number':1683,'multiline':False]['text':' Allow one space for new scopes, two spaces otherwise:','line_number':1684,'multiline':False]['text':' There should always be a space between the // and the comment','line_number':1692,'multiline':False]['text':' but some lines are exceptions -- e.g. if they're big','line_number':1695,'multiline':False]['text':' comment delimiters like:','line_number':1696,'multiline':False]['text':' //----------------------------------------------------------','line_number':1697,'multiline':False]['text':' or are an empty C++ style Doxygen comment, like:','line_number':1698,'multiline':False]['text':' ///','line_number':1699,'multiline':False]['text':' or C++ style Doxygen comments placed after the variable:','line_number':1700,'multiline':False]['text':' ///<  Header comment','line_number':1701,'multiline':False]['text':' //!<  Header comment','line_number':1702,'multiline':False]['text':' or they begin with multiple slashes followed by a space:','line_number':1703,'multiline':False]['text':' //////// Header comment','line_number':1704,'multiline':False]['text':' or they are Vim {{{ fold markers','line_number':1705,'multiline':False]['text':' get rid of comments and strings','line_number':1718,'multiline':False]['text':' Don't try to do spacing checks for operator methods','line_number':1720,'multiline':False]['text':' We allow no-spaces around = within an if: "if ( (a=Foo()) == 0 )".','line_number':1723,'multiline':False]['text':' Otherwise not.  Note we only check for non-spaces on *both* sides;','line_number':1724,'multiline':False]['text':' sometimes people put non-spaces on one side when aligning ='s among','line_number':1725,'multiline':False]['text':' many lines (not that this is behavior that I approve of...)','line_number':1726,'multiline':False]['text':' It's ok not to have spaces around binary operators like + - * /, but if','line_number':1730,'multiline':False]['text':' there's too little whitespace, we get concerned.  It's hard to tell,','line_number':1731,'multiline':False]['text':' though, so we punt on this one for now.  TODO.','line_number':1732,'multiline':False]['text':' You should always have whitespace around binary operators.','line_number':1739,'multiline':False]['text':'','line_number':1740,'multiline':False]['text':' Check <= and >= first to avoid false positives with < and >, then','line_number':1741,'multiline':False]['text':' check non-include lines for spacing around < and >.','line_number':1742,'multiline':False]['text':' Boolean operators should be placed on the next line.','line_number':1747,'multiline':False]['text':' We allow no-spaces around << when used like this: 10<<20, but','line_number':1751,'multiline':False]['text':' not otherwise (particularly, not when used as streams)','line_number':1752,'multiline':False]['text':' Also ignore using ns::operator<<;','line_number':1753,'multiline':False]['text':' Avoid false positives on ->','line_number':1761,'multiline':False]['text':' Look for < that is not surrounded by spaces.  This is only','line_number':1764,'multiline':False]['text':' triggered if both sides are missing spaces, even though','line_number':1765,'multiline':False]['text':' technically should should flag if at least one side is missing a','line_number':1766,'multiline':False]['text':' space.  This is done to avoid some false positives with shifts.','line_number':1767,'multiline':False]['text':' Look for > that is not surrounded by spaces.  Similar to the','line_number':1773,'multiline':False]['text':' above, we only trigger if both sides are missing spaces to avoid','line_number':1774,'multiline':False]['text':' false positives with shifts.','line_number':1775,'multiline':False]['text':' We allow no-spaces around >> for almost anything.  This is because','line_number':1782,'multiline':False]['text':' C++11 allows ">>" to close nested templates, which accounts for','line_number':1783,'multiline':False]['text':' most cases when ">>" is not followed by a space.','line_number':1784,'multiline':False]['text':'','line_number':1785,'multiline':False]['text':' We still warn on ">>" followed by alpha character, because that is','line_number':1786,'multiline':False]['text':' likely due to ">>" being used for right shifts, e.g.:','line_number':1787,'multiline':False]['text':'   value >> alpha','line_number':1788,'multiline':False]['text':'','line_number':1789,'multiline':False]['text':' When ">>" is used to close templates, the alphanumeric letter that','line_number':1790,'multiline':False]['text':' follows would be part of an identifier, and there should still be','line_number':1791,'multiline':False]['text':' a space separating the template type and the identifier.','line_number':1792,'multiline':False]['text':'   type<type<type>> alpha','line_number':1793,'multiline':False]['text':' There shouldn't be space around unary operators','line_number':1799,'multiline':False]['text':' For if/for/while/switch, the left and right parens should be','line_number':1805,'multiline':False]['text':' consistent about how many spaces are inside the parens, and','line_number':1806,'multiline':False]['text':' there should either be zero or one spaces inside the parens.','line_number':1807,'multiline':False]['text':' We don't want: "if ( foo)" or "if ( foo   )".','line_number':1808,'multiline':False]['text':' Exception: "for ( ; foo; bar)" and "for (foo; bar; )" are allowed.','line_number':1809,'multiline':False]['text':' Check whether everything inside expressions is aligned correctly','line_number':1822,'multiline':False]['text':' Except after an opening paren, or after another opening brace (in case of','line_number':1826,'multiline':False]['text':' an initializer list, for instance), you should have spaces before your','line_number':1827,'multiline':False]['text':' braces. And since you should never have braces at the beginning of a line,','line_number':1828,'multiline':False]['text':' this is an easy test.','line_number':1829,'multiline':False]['text':' Make sure '} else {' has spaces.','line_number':1832,'multiline':False]['text':' You shouldn't have spaces before your brackets, except maybe after','line_number':1836,'multiline':False]['text':' 'delete []' or 'new char * []'.','line_number':1837,'multiline':False]['text':' if not a blank line...','line_number':1885,'multiline':False]['text':' get rid of comments and strings','line_number':1901,'multiline':False]['text':' We allow an open brace to start a line in the case where someone','line_number':1904,'multiline':False]['text':' is using braces in a block to explicitly create a new scope, which','line_number':1905,'multiline':False]['text':' is commonly used to control the lifetime of stack-allocated','line_number':1906,'multiline':False]['text':' variables.  Braces are also used for brace initializers inside','line_number':1907,'multiline':False]['text':' function calls.  We don't detect this perfectly: we just don't','line_number':1908,'multiline':False]['text':' complain if the last non-whitespace character on the previous','line_number':1909,'multiline':False]['text':' non-blank line is ',', ';', ':', '(', '{', or '}', or if the','line_number':1910,'multiline':False]['text':' previous line starts a preprocessor block.','line_number':1911,'multiline':False]['text':' Brace must appear after function signature, but on the *next* line','line_number':1917,'multiline':False]['text':' Some more style checks','line_number':1960,'multiline':False]['text':' TODO(sugawarayu): Audit cpplint.py to see what places could be profitably','line_number':1989,'multiline':False]['text':' rewritten to use _GetTextInside (and use inferior regexp matching today).','line_number':1990,'multiline':False]['text':' Give opening punctuations to get the matching close-punctuations.','line_number':1992,'multiline':False]['text':' Find the position to start extracting text.','line_number':1996,'multiline':False]['text':' start_pattern not found in text.','line_number':1998,'multiline':False]['text':' Stack of closing punctuations we expect to have in text after position.','line_number':2006,'multiline':False]['text':' A closing punctuation without matching opening punctuations.','line_number':2013,'multiline':False]['text':' Opening punctuations left without matching close-punctuations.','line_number':2019,'multiline':False]['text':' punctuations match.','line_number':2021,'multiline':False]['text':' If the line is empty or consists of entirely a comment, no need to','line_number':2037,'multiline':False]['text':' check it.','line_number':2038,'multiline':False]['text':' TODO(unknown): figure out if they're using default arguments in fn proto.','line_number':2043,'multiline':False]['text':' Check if people are using the verboten C basic types.','line_number':2045,'multiline':False]['text':' When snprintf is used, the second argument shouldn't be a literal.','line_number':2052,'multiline':False]['text':' If 2nd arg is zero, snprintf is used to calculate size.','line_number':2055,'multiline':False]['text':' Check if some verboten C functions are being used.','line_number':2060,'multiline':False]['text':' Check for suspicious usage of "if" like','line_number':2087,'multiline':False]['text':' } if (a == b) {','line_number':2088,'multiline':False]['text':' Check for potential format string bugs like printf(foo).','line_number':2092,'multiline':False]['text':' We constrain the pattern not to pick things like DocidForPrintf(foo).','line_number':2093,'multiline':False]['text':' Not perfect but it can catch printf(foo.c_str()) and printf(foo->c_str())','line_number':2094,'multiline':False]['text':' TODO(sugawarayu): Catch the following case. Need to change the calling','line_number':2095,'multiline':False]['text':' convention of the whole function to process multiple line to handle it.','line_number':2096,'multiline':False]['text':'   printf(','line_number':2097,'multiline':False]['text':'       boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);','line_number':2098,'multiline':False]['text':' Check for potential memset bugs like memset(buf, sizeof(buf), 0).','line_number':2110,'multiline':False]['text':' Detect variable-length arrays.','line_number':2117,'multiline':False]['text':' Split the size using space and arithmetic operators as delimiters.','line_number':2121,'multiline':False]['text':' If any of the resulting tokens are not compile time constants then','line_number':2122,'multiline':False]['text':' report the error.','line_number':2123,'multiline':False]['text':' A catch all for tricky sizeof cases, including','line_number':2151,'multiline':False]['text':' 'sizeof expression', 'sizeof(*type)', 'sizeof(const type)',','line_number':2152,'multiline':False]['text':' 'sizeof(struct StructName)' requires skipping the next token','line_number':2153,'multiline':False]['text':' because we split on ' ' and '*'.','line_number':2154,'multiline':False]['text':' Detect TRUE and FALSE.','line_number':2166,'multiline':False]['text':' Detect MAYBE','line_number':2173,'multiline':False]['text':' Detect preincrement/predecrement','line_number':2180,'multiline':False]['text':' Detect preincrement/predecrement in for(;; preincrement)','line_number':2186,'multiline':False]['text':' We check here rather than inside ProcessLine so that we see raw','line_number':2289,'multiline':False]['text':' lines rather than "cleaned" lines.','line_number':2290,'multiline':False]['text':' Support the Unix convention of using "-" for stdin.  Note that','line_number':2311,'multiline':False]['text':' we are not opening the file with universal newline support','line_number':2312,'multiline':False]['text':' (which codecs doesn't support anyway), so the resulting lines do','line_number':2313,'multiline':False]['text':' contain trailing '\r' characters if we are reading a file that','line_number':2314,'multiline':False]['text':' has CRLF endings.','line_number':2315,'multiline':False]['text':' If after the split a trailing '\r' is present, it is removed','line_number':2316,'multiline':False]['text':' below. If it is not expected to be present (i.e. os.linesep !=','line_number':2317,'multiline':False]['text':' '\r\n' as in Windows), a warning is issued below if this file','line_number':2318,'multiline':False]['text':' is processed.','line_number':2319,'multiline':False]['text':' Remove trailing '\r'.','line_number':2330,'multiline':False]['text':' Note, if no dot is found, this will give the entire filename as the ext.','line_number':2340,'multiline':False]['text':' When reading from stdin, the extension is unknown, so no cpplint tests','line_number':2343,'multiline':False]['text':' should rely on the extension.','line_number':2344,'multiline':False]['text':' vim: ts=4 sts=4 sw=4 foldmarker=▶,▲','line_number':2479,'multiline':False]['text':' Ignore "too complex" warnings when using pymode.','line_number':2481,'multiline':False]['text':' pylama:ignore=C901','line_number':2482,'multiline':False]