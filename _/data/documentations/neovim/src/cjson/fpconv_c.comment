['text':' fpconv - Floating point conversion routines
 *
 * Copyright (c) 2011-2012  Mark Pulford <mark@kyne.com.au>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' JSON uses a '.' decimal separator. strtod() / sprintf() under C libraries
 * with locale support will break when the decimal separator is a comma.
 *
 * fpconv_* will around these issues with a translation buffer if required.
 ','line_number':25,'multiline':True]['text':' Workaround for MSVC ','line_number':38,'multiline':True]['text':' Lua CJSON assumes the locale is the same for all threads within a
 * process and doesn't change after initialisation.
 *
 * This avoids the need for per thread storage or expensive checks
 * for call. ','line_number':44,'multiline':True]['text':' In theory multibyte decimal_points are possible, but
 * Lua CJSON only supports UTF-8 and known locales only have
 * single byte decimal points ([.,]).
 *
 * localconv() may not be thread safe (=>crash), and nl_langinfo() is
 * not supported on some platforms. Use sprintf() instead - if the
 * locale does change, at least Lua CJSON won't crash. ','line_number':51,'multiline':True]['text':' Failing this test might imply the platform has a buggy dtoa
     * implementation or wide characters ','line_number':64,'multiline':True]['text':' Check for a valid number character: [-+0-9a-yA-Y.]
 * Eg: -0.6e+5, infinity, 0xF0.F0pF0
 *
 * Used to find the probable end of a number. It doesn't matter if
 * invalid characters are counted - strtod() will find the valid
 * number if it exists.  The risk is that slightly more memory might
 * be allocated before a parse error occurs. ','line_number':74,'multiline':True]['text':' Hex digits, exponent (e), base (p), "infinity",.. ','line_number':90,'multiline':True]['text':' Calculate the size of the buffer required for a strtod locale
 * conversion. ','line_number':98,'multiline':True]['text':' Similar to strtod(), but must be passed the current locale's decimal point
 * character. Guaranteed to be called at the start of any valid number in a string ','line_number':110,'multiline':True]['text':' System strtod() is fine when decimal point is '.' ','line_number':119,'multiline':True]['text':' No valid characters found, standard strtod() return ','line_number':125,'multiline':True]['text':' Duplicate number into buffer ','line_number':130,'multiline':True]['text':' Handle unusually large numbers ','line_number':132,'multiline':True]['text':' This is the common case.. ','line_number':139,'multiline':True]['text':' Update decimal point character if found ','line_number':145,'multiline':True]['text':' "fmt" must point to a buffer of at least 6 characters ','line_number':158,'multiline':True]['text':' Create printf format (%.14g) from precision ','line_number':165,'multiline':True]['text':' Assumes there is always at least 32 characters available in the target buffer ','line_number':179,'multiline':True]['text':' Pass through when decimal point character is dot. ','line_number':189,'multiline':True]['text':' snprintf() to a buffer then translate for other decimal point characters ','line_number':193,'multiline':True]['text':' Copy into target location. Translate decimal point if required ','line_number':196,'multiline':True]['text':' vi:ai et sw=4 ts=4:
 ','line_number':210,'multiline':True]