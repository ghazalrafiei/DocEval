['text':' -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*-','line_number':1,'multiline':False]['text':' Copyright (c) 2005, Google Inc.','line_number':2,'multiline':False]['text':' All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':5,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':6,'multiline':False]['text':' met:','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':9,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':10,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':11,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':12,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':13,'multiline':False]['text':' distribution.','line_number':14,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':15,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':16,'multiline':False]['text':' this software without specific prior written permission.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':19,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':20,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':21,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':22,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':23,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':24,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':25,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':26,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':27,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':28,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':29,'multiline':False]['text':' ---','line_number':31,'multiline':False]['text':' Author: Maxim Lifantsev (with design ideas by Sanjay Ghemawat)','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' Module for detecing heap (memory) leaks.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' For full(er) information, see docs/heap_checker.html','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' This module can be linked into programs with','line_number':39,'multiline':False]['text':' no slowdown caused by this unless you activate the leak-checker:','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'    1. Set the environment variable HEAPCHEK to _type_ before','line_number':42,'multiline':False]['text':'       running the program.','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' _type_ is usually "normal" but can also be "minimal", "strict", or','line_number':45,'multiline':False]['text':' "draconian".  (See the html file for other options, like 'local'.)','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' After that, just run your binary.  If the heap-checker detects','line_number':48,'multiline':False]['text':' a memory leak at program-exit, it will print instructions on how','line_number':49,'multiline':False]['text':' to track down the leak.','line_number':50,'multiline':False]['text':' for size_t','line_number':55,'multiline':False]['text':' I can't #include config.h in this public API file, but I should','line_number':56,'multiline':False]['text':' really use configure (and make malloc_extension.h a .in file) to','line_number':57,'multiline':False]['text':' figure out if the system has stdint.h or not.  But I'm lazy, so','line_number':58,'multiline':False]['text':' for now I'm assuming it's a problem only with MSVC.','line_number':59,'multiline':False]['text':' for uintptr_t','line_number':61,'multiline':False]['text':' for va_list','line_number':63,'multiline':False]['text':' Annoying stuff for windows -- makes sure clients can import these functions','line_number':66,'multiline':False]['text':' The class is thread-safe with respect to all the provided static methods,','line_number':76,'multiline':False]['text':' as well as HeapLeakChecker objects: they can be accessed by multiple threads.','line_number':77,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':81,'multiline':False]['text':' Static functions for working with (whole-program) leak checking.','line_number':82,'multiline':False]['text':' If heap leak checking is currently active in some mode','line_number':84,'multiline':False]['text':' e.g. if leak checking was started (and is still active now)','line_number':85,'multiline':False]['text':' due to HEAPCHECK=... defined in the environment.','line_number':86,'multiline':False]['text':' The return value reflects iff HeapLeakChecker objects manually','line_number':87,'multiline':False]['text':' constructed right now will be doing leak checking or nothing.','line_number':88,'multiline':False]['text':' Note that we can go from active to inactive state during InitGoogle()','line_number':89,'multiline':False]['text':' if FLAGS_heap_check gets set to "" by some code before/during InitGoogle().','line_number':90,'multiline':False]['text':' Return pointer to the whole-program checker if it has been created','line_number':93,'multiline':False]['text':' and NULL otherwise.','line_number':94,'multiline':False]['text':' Once GlobalChecker() returns non-NULL that object will not disappear and','line_number':95,'multiline':False]['text':' will be returned by all later GlobalChecker calls.','line_number':96,'multiline':False]['text':' This is mainly to access BytesLeaked() and ObjectsLeaked() (see below)','line_number':97,'multiline':False]['text':' for the whole-program checker after one calls NoGlobalLeaks()','line_number':98,'multiline':False]['text':' or similar and gets false.','line_number':99,'multiline':False]['text':' Do whole-program leak check now (if it was activated for this binary);','line_number':102,'multiline':False]['text':' return false only if it was activated and has failed.','line_number':103,'multiline':False]['text':' The mode of the check is controlled by the command-line flags.','line_number':104,'multiline':False]['text':' This method can be called repeatedly.','line_number':105,'multiline':False]['text':' Things like GlobalChecker()->SameHeap() can also be called explicitly','line_number':106,'multiline':False]['text':' to do the desired flavor of the check.','line_number':107,'multiline':False]['text':' If whole-program checker if active,','line_number':110,'multiline':False]['text':' cancel its automatic execution after main() exits.','line_number':111,'multiline':False]['text':' This requires that some leak check (e.g. NoGlobalLeaks())','line_number':112,'multiline':False]['text':' has been called at least once on the whole-program checker.','line_number':113,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':116,'multiline':False]['text':' Non-static functions for starting and doing leak checking.','line_number':117,'multiline':False]['text':' Start checking and name the leak check performed.','line_number':119,'multiline':False]['text':' The name is used in naming dumped profiles','line_number':120,'multiline':False]['text':' and needs to be unique only within your binary.','line_number':121,'multiline':False]['text':' It must also be a string that can be a part of a file name,','line_number':122,'multiline':False]['text':' in particular not contain path expressions.','line_number':123,'multiline':False]['text':' Destructor (verifies that some *NoLeaks or *SameHeap method','line_number':126,'multiline':False]['text':' has been called at least once).','line_number':127,'multiline':False]['text':' These used to be different but are all the same now: they return','line_number':130,'multiline':False]['text':' true iff all memory allocated since this HeapLeakChecker object','line_number':131,'multiline':False]['text':' was constructor is still reachable from global state.','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' Because we fork to convert addresses to symbol-names, and forking','line_number':134,'multiline':False]['text':' is not thread-safe, and we may be called in a threaded context,','line_number':135,'multiline':False]['text':' we do not try to symbolize addresses when called manually.','line_number':136,'multiline':False]['text':' These forms are obsolete; use NoLeaks() instead.','line_number':139,'multiline':False]['text':' TODO(csilvers): mark as DEPRECATED.','line_number':140,'multiline':False]['text':' Detailed information about the number of leaked bytes and objects','line_number':147,'multiline':False]['text':' (both of these can be negative as well).','line_number':148,'multiline':False]['text':' These are available only after a *SameHeap or *NoLeaks','line_number':149,'multiline':False]['text':' method has been called.','line_number':150,'multiline':False]['text':' Note that it's possible for both of these to be zero','line_number':151,'multiline':False]['text':' while SameHeap() or NoLeaks() returned false in case','line_number':152,'multiline':False]['text':' of a heap state change that is significant','line_number':153,'multiline':False]['text':' but preserves the byte and object counts.','line_number':154,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':158,'multiline':False]['text':' Static helpers to make us ignore certain leaks.','line_number':159,'multiline':False]['text':' Scoped helper class.  Should be allocated on the stack inside a','line_number':161,'multiline':False]['text':' block of code.  Any heap allocations done in the code block','line_number':162,'multiline':False]['text':' covered by the scoped object (including in nested function calls','line_number':163,'multiline':False]['text':' done by the code block) will not be reported as leaks.  This is','line_number':164,'multiline':False]['text':' the recommended replacement for the GetDisableChecksStart() and','line_number':165,'multiline':False]['text':' DisableChecksToHereFrom() routines below.','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' Example:','line_number':168,'multiline':False]['text':'   void Foo() {','line_number':169,'multiline':False]['text':'     HeapLeakChecker::Disabler disabler;','line_number':170,'multiline':False]['text':'     ... code that allocates objects whose leaks should be ignored ...','line_number':171,'multiline':False]['text':'   }','line_number':172,'multiline':False]['text':'','line_number':173,'multiline':False]['text':' REQUIRES: Destructor runs in same thread as constructor','line_number':174,'multiline':False]['text':' disallow copy','line_number':180,'multiline':False]['text':' and assign','line_number':181,'multiline':False]['text':' Ignore an object located at 'ptr' (can go at the start or into the object)','line_number':184,'multiline':False]['text':' as well as all heap objects (transitively) referenced from it for the','line_number':185,'multiline':False]['text':' purposes of heap leak checking. Returns 'ptr' so that one can write','line_number':186,'multiline':False]['text':'   static T* obj = IgnoreObject(new T(...));','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' If 'ptr' does not point to an active allocated object at the time of this','line_number':189,'multiline':False]['text':' call, it is ignored; but if it does, the object must not get deleted from','line_number':190,'multiline':False]['text':' the heap later on.','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' See also HiddenPointer, below, if you need to prevent a pointer from','line_number':193,'multiline':False]['text':' being traversed by the heap checker but do not wish to transitively','line_number':194,'multiline':False]['text':' whitelist objects referenced through it.','line_number':195,'multiline':False]['text':' Undo what an earlier IgnoreObject() call promised and asked to do.','line_number':202,'multiline':False]['text':' At the time of this call 'ptr' must point at or inside of an active','line_number':203,'multiline':False]['text':' allocated object which was previously registered with IgnoreObject().','line_number':204,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':207,'multiline':False]['text':' Internal types defined in .cc','line_number':208,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':215,'multiline':False]['text':' Various helpers','line_number':216,'multiline':False]['text':' Create the name of the heap profile file.','line_number':218,'multiline':False]['text':' Should be deleted via Allocator::Free().','line_number':219,'multiline':False]['text':' Helper for constructors','line_number':222,'multiline':False]['text':' Helper for *NoLeaks and *SameHeap','line_number':227,'multiline':False]['text':' Helper for NoGlobalLeaks, also called by the global destructor.','line_number':230,'multiline':False]['text':' These used to be public, but they are now deprecated.','line_number':233,'multiline':False]['text':' Will remove entirely when all internal uses are fixed.','line_number':234,'multiline':False]['text':' In the meantime, use friendship so the unittest can still test them.','line_number':235,'multiline':False]['text':' Actually implements IgnoreObject().','line_number':244,'multiline':False]['text':' Disable checks based on stack trace entry at a depth <=','line_number':247,'multiline':False]['text':' max_depth.  Used to hide allocations done inside some special','line_number':248,'multiline':False]['text':' libraries.','line_number':249,'multiline':False]['text':' Helper for DoNoLeaks to ignore all objects reachable from all live data','line_number':254,'multiline':False]['text':' Callback we pass to TCMalloc_ListAllProcessThreads (see thread_lister.h)','line_number':257,'multiline':False]['text':' that is invoked when all threads of our process are found and stopped.','line_number':258,'multiline':False]['text':' The call back does the things needed to ignore live data reachable from','line_number':259,'multiline':False]['text':' thread stacks and registers for all our threads','line_number':260,'multiline':False]['text':' as well as do other global-live-data ignoring','line_number':261,'multiline':False]['text':' (via IgnoreNonThreadLiveObjectsLocked)','line_number':262,'multiline':False]['text':' during the quiet state of all threads being stopped.','line_number':263,'multiline':False]['text':' For the argument meaning see the comment by TCMalloc_ListAllProcessThreads.','line_number':264,'multiline':False]['text':' Here we only use num_threads and thread_pids, that TCMalloc_ListAllProcessThreads','line_number':265,'multiline':False]['text':' fills for us with the number and pids of all the threads of our process','line_number':266,'multiline':False]['text':' it found and attached to.','line_number':267,'multiline':False]['text':' Helper for IgnoreAllLiveObjectsLocked and IgnoreLiveThreadsLocked','line_number':273,'multiline':False]['text':' that we prefer to execute from IgnoreLiveThreadsLocked','line_number':274,'multiline':False]['text':' while all threads are stopped.','line_number':275,'multiline':False]['text':' This helper does live object discovery and ignoring','line_number':276,'multiline':False]['text':' for all objects that are reachable from everything','line_number':277,'multiline':False]['text':' not related to thread stacks and registers.','line_number':278,'multiline':False]['text':' Helper for IgnoreNonThreadLiveObjectsLocked and IgnoreLiveThreadsLocked','line_number':281,'multiline':False]['text':' to discover and ignore all heap objects','line_number':282,'multiline':False]['text':' reachable from currently considered live objects','line_number':283,'multiline':False]['text':' (live_objects static global variable in out .cc file).','line_number':284,'multiline':False]['text':' "name", "name2" are two strings that we print one after another','line_number':285,'multiline':False]['text':' in a debug message to describe what kind of live object sources','line_number':286,'multiline':False]['text':' are being used.','line_number':287,'multiline':False]['text':' Do the overall whole-program heap leak check if needed;','line_number':290,'multiline':False]['text':' returns true when did the leak check.','line_number':291,'multiline':False]['text':' Type of task for UseProcMapsLocked','line_number':294,'multiline':False]['text':' Success/Error Return codes for UseProcMapsLocked.','line_number':300,'multiline':False]['text':' Read /proc/self/maps, parse it, and do the 'proc_maps_task' for each line.','line_number':307,'multiline':False]['text':' A ProcMapsTask to disable allocations from 'library'','line_number':310,'multiline':False]['text':' that is mapped to [start_address..end_address)','line_number':311,'multiline':False]['text':' (only if library is a certain system library).','line_number':312,'multiline':False]['text':' Return true iff "*ptr" points to a heap object','line_number':317,'multiline':False]['text':' ("*ptr" can point at the start or inside of a heap object','line_number':318,'multiline':False]['text':'  so that this works e.g. for pointers to C++ arrays, C++ strings,','line_number':319,'multiline':False]['text':'  multiple-inherited objects, or pointers to members).','line_number':320,'multiline':False]['text':' We also fill *object_size for this object then','line_number':321,'multiline':False]['text':' and we move "*ptr" to point to the very start of the heap object.','line_number':322,'multiline':False]['text':' Helper to shutdown heap leak checker when it's not needed','line_number':325,'multiline':False]['text':' or can't function properly.','line_number':326,'multiline':False]['text':' Internally-used c-tor to start whole-executable checking.','line_number':329,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':332,'multiline':False]['text':' Friends and externally accessed helpers.','line_number':333,'multiline':False]['text':' Helper for VerifyHeapProfileTableStackGet in the unittest','line_number':335,'multiline':False]['text':' to get the recorded allocation caller for ptr,','line_number':336,'multiline':False]['text':' which must be a heap object.','line_number':337,'multiline':False]['text':' This gets to execute before constructors for all global objects','line_number':341,'multiline':False]['text':' This gets to execute after destructors for all global objects','line_number':345,'multiline':False]['text':' Full starting of recommended whole-program checking.','line_number':348,'multiline':False]['text':' Runs REGISTER_HEAPCHECK_CLEANUP cleanups and potentially','line_number':351,'multiline':False]['text':' calls DoMainHeapCheck','line_number':352,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':355,'multiline':False]['text':' Member data.','line_number':356,'multiline':False]['text':' to make HeapLeakChecker objects thread-safe','line_number':358,'multiline':False]['text':' our remembered name (we own it)','line_number':359,'multiline':False]['text':' NULL means this leak checker is a noop','line_number':360,'multiline':False]['text':' Snapshot taken when the checker was created.  May be NULL','line_number':362,'multiline':False]['text':' for the global heap checker object.  We use void* instead of','line_number':363,'multiline':False]['text':' HeapProfileTable::Snapshot* to avoid including heap-profile-table.h.','line_number':364,'multiline':False]['text':' if we have done the leak check, so these are ready:','line_number':367,'multiline':False]['text':' bytes-in-use increase for this checker','line_number':368,'multiline':False]['text':' allocations-in-use increase','line_number':369,'multiline':False]['text':' for this checker','line_number':370,'multiline':False]['text':' iff we should keep the heap profiles we've made','line_number':371,'multiline':False]['text':' ----------------------------------------------------------------------- //','line_number':373,'multiline':False]['text':' Disallow "evil" constructors.','line_number':375,'multiline':False]['text':' Holds a pointer that will not be traversed by the heap checker.','line_number':381,'multiline':False]['text':' Contrast with HeapLeakChecker::IgnoreObject(o), in which o and','line_number':382,'multiline':False]['text':' all objects reachable from o are ignored by the heap checker.','line_number':383,'multiline':False]['text':' Returns unhidden pointer.  Be careful where you save the result.','line_number':390,'multiline':False]['text':' Arbitrary value, but not such that xor'ing with it is likely','line_number':394,'multiline':False]['text':' to map one valid pointer to another valid pointer:','line_number':395,'multiline':False]['text':' A class that exists solely to run its destructor.  This class should not be','line_number':401,'multiline':False]['text':' used directly, but instead by the REGISTER_HEAPCHECK_CLEANUP macro below.','line_number':402,'multiline':False]['text':' A macro to declare module heap check cleanup tasks','line_number':412,'multiline':False]['text':' (they run only if we are doing heap leak checking.)','line_number':413,'multiline':False]['text':' 'body' should be the cleanup code to run.  'name' doesn't matter,','line_number':414,'multiline':False]['text':' but must be unique amongst all REGISTER_HEAPCHECK_CLEANUP calls.','line_number':415,'multiline':False]['text':' BASE_HEAP_CHECKER_H_','line_number':422,'multiline':False]