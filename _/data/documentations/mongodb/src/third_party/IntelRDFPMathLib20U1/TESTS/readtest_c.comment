['text':'
Copyright (c) 2007-2011, Intel Corp.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
','line_number':1,'multiline':True]['text':' readtest.c - read tests from stdin','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' This programs reads test of the form:','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' <TESTID> <FUNCTION> <OP1> <OP2> <OP3> <RESULT> <STATUS>','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' The testID is simply a string used to help identify which tail may be failing.','line_number':35,'multiline':False]['text':' The function name is generally one of the BID library function names.  Up to 3','line_number':36,'multiline':False]['text':' operands follow the function name, and then the expected result and expected ','line_number':37,'multiline':False]['text':' status value.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' Each test is read, the appropriate function is called, and the results are ','line_number':40,'multiline':False]['text':' compared with the expected results.  The operands, and results can appear as','line_number':41,'multiline':False]['text':' decimal numbers (e.g. 6.25), or as hexadecimal representations surrounded by','line_number':42,'multiline':False]['text':' square brackets (e.g. [31c0000000012345]).  The status value is a hexadecimal','line_number':43,'multiline':False]['text':' value (without the leading 0x).','line_number':44,'multiline':False]['text':' for printf','line_number':47,'multiline':False]['text':' Compare modes: EXACT does a bitwise compare, FUZZY does a bitwise unless NaN vs. NaN','line_number':68,'multiline':False]['text':'                EQUAL uses bid<size>_quiet_equal','line_number':69,'multiline':False]['text':' current integer difference computed_result-expected_result','line_number':92,'multiline':False]['text':' conversion buffer','line_number':481,'multiline':False]['text':' Input and result operands','line_number':484,'multiline':False]['text':' conversion strings','line_number':485,'multiline':False]['text':' char * decimal32ToString(const decimal32 *, char *);','line_number':527,'multiline':False]['text':' char * decimal64ToString(const decimal64 *, char *);','line_number':528,'multiline':False]['text':' char * decimal128ToString(const decimal128 *, char *);','line_number':529,'multiline':False]['text':' Return TRUE (1) if 'a' and 'b' are incomtible results from some BID and DPD','line_number':559,'multiline':False]['text':' functions.  Ignore the payload of NaNs','line_number':560,'multiline':False]['text':' Get rid of 0x0D and 0x0A symbols in the string s.','line_number':570,'multiline':False]['text':' Get rid of trailing spaces in the string s.','line_number':577,'multiline':False]['text':'if (bid128_isNaN(a)||bid128_isNaN(b) || bid128_isInf(a)||bid128_isInf(b)) {','line_number':698,'multiline':False]['text':'TODO HIGH part difference ','line_number':751,'multiline':False]['text':'printf("ulp %f +add %f max %f\n", ulp, ulp+ulp_add, mre_max[rnd_mode]);','line_number':754,'multiline':False]['text':'if (bid64_isNaN(a) || bid64_isNaN(b) || bid64_isInf(a) || bid64_isInf(b)) {','line_number':775,'multiline':False]['text':'printf("ulp %f +add %f max %f\n", ulp, ulp+ulp_add, mre_max[rnd_mode]);','line_number':819,'multiline':False]['text':'if (bid32_isNaN(a32)||bid32_isNaN(b32)||bid32_isInf(a32)||bid32_isInf(b32)) {','line_number':841,'multiline':False]['text':'printf("ulp %f +add %f max %f\n", ulp, ulp+ulp_add, mre_max[rnd_mode]);','line_number':887,'multiline':False]['text':' Initialize second arg for comparing - required by modf function but can give false errors if argument is not initialized','line_number':901,'multiline':False]['text':'  Skip because converted with sscanf','line_number':983,'multiline':False]['text':'  Skip because converted with sscanf','line_number':1009,'multiline':False]['text':' true second res of frexp function','line_number':1020,'multiline':False]['text':' true second res of modf function','line_number':1024,'multiline':False]['text':'initialize results so we can easy compare frexp function','line_number':1034,'multiline':False]['text':'  Skip because converted with sscanf','line_number':1063,'multiline':False]['text':' Print mismatch line','line_number':1198,'multiline':False]['text':' Print statuses','line_number':1297,'multiline':False]['text':'        sprintf(str1, "%.17le", Rquad); \','line_number':1364,'multiline':False]['text':'        sprintf(str2, "%.17le", Rtquad); \','line_number':1365,'multiline':False]['text':'printf("frexp i1 i2 %d %d \n", i1, i2);','line_number':1409,'multiline':False]['text':'printf("arg dbl %08X \n", *((int*)&Adbl+BID_HIGH_128W));','line_number':1411,'multiline':False]['text':'printf("check fo binary snan\n");','line_number':1413,'multiline':False]['text':'printf("set invalid for 64\n");','line_number':1417,'multiline':False]['text':'printf("set invalid for 32\n");','line_number':1425,'multiline':False]['text':'printf("check fo binary snan\n");','line_number':1430,'multiline':False]['text':'printf("set invalid for 80\n");','line_number':1435,'multiline':False]['text':' exit (-1);','line_number':1568,'multiline':False]['text':' int st_compare(void *a, void *b) {','line_number':1572,'multiline':False]['text':' printf("Found 1: %s\n", wp1[wp1n-1]);','line_number':1593,'multiline':False]['text':' printf("Found 1: %s\n", wp1[wp1n-1]);','line_number':1596,'multiline':False]['text':' printf("Found 2: %s\n", wp2[wp2n-1]);','line_number':1605,'multiline':False]['text':' printf("Found 2: %s\n", wp2[wp2n-1]);','line_number':1608,'multiline':False]['text':' printf("Comparing %s and %s\n", wp1[i], wp2[i]);','line_number':1624,'multiline':False]['text':' point to first command-line parameter','line_number':1726,'multiline':False]['text':' Process all options','line_number':1727,'multiline':False]['text':'printf("snan32 passed incorr %d\n", SNaN_passed_incorrectly32);','line_number':1807,'multiline':False]['text':'printf("snan64 passed incorr %d\n", SNaN_passed_incorrectly64);','line_number':1808,'multiline':False]['text':'printf("snan80 passed incorr %d\n", SNaN_passed_incorrectly80);','line_number':1809,'multiline':False]['text':'printf("den32 passed incorr %d\n", Den_passed_incorrectly32);','line_number':1810,'multiline':False]['text':'printf("den64 passed incorr %d\n", Den_passed_incorrectly64);','line_number':1811,'multiline':False]['text':'printf("den80 passed incorr %d\n", Den_passed_incorrectly80);','line_number':1812,'multiline':False]['text':' printf("Read line: %s", line);','line_number':1830,'multiline':False]['text':' Remove comment','line_number':1831,'multiline':False]['text':' Reset BID status flags','line_number':1834,'multiline':False]['text':' Extract ulp field from line, if present:','line_number':1840,'multiline':False]['text':' Determine if underflow, indicated as expected have to be set only for before rounding mode','line_number':1848,'multiline':False]['text':' Read string prefix for from string conversions','line_number':1856,'multiline':False]['text':' Extract long int size from line, if present:','line_number':1869,'multiline':False]['text':'printf();','line_number':1877,'multiline':False]['text':'printf("read8 %d\n", rnd_mode);','line_number':1887,'multiline':False]['text':'printf("read7 %d\n", rnd_mode);','line_number':1893,'multiline':False]['text':'printf("read6 %d\n", rnd_mode);','line_number':1900,'multiline':False]['text':'printf("str %s op1 %s, skip %d\n", line, op1, skip_test);','line_number':1909,'multiline':False]['text':' set ulp thresholds for transcendentals','line_number':1912,'multiline':False]['text':'clean expected underflow if it is for before rounding mode and we are checking after rounidng ','line_number':1935,'multiline':False]['text':'printf("snan arg, passed incor %d %d\n", arg64_snan, SNaN_passed_incorrectly64);','line_number':1978,'multiline':False]['text':' !!!! Workaround, do not favor non-standard denormal flag for now','line_number':1995,'multiline':False]['text':' !!!! Workaround, do not favor non-standard denormal flag for now','line_number':1997,'multiline':False]