['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' NaN (CASE1)','line_number':44,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':45,'multiline':False]['text':' rather than equal : return 0','line_number':46,'multiline':False]['text':' set exception if sNaN','line_number':49,'multiline':False]['text':' SIMPLE (CASE2)','line_number':54,'multiline':False]['text':' if all the bits are the same, these numbers are equivalent.','line_number':55,'multiline':False]['text':' INFINITY (CASE3)','line_number':60,'multiline':False]['text':' ONE INFINITY (CASE3')','line_number':65,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':70,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':84,'multiline':False]['text':' ZERO (CASE4)','line_number':98,'multiline':False]['text':' some properties:','line_number':99,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign','line_number':100,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':101,'multiline':False]['text':'    therefore ignore the exponent field','line_number':102,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':103,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':117,'multiline':False]['text':' now, if the sign bits differ => not equal : return 0','line_number':118,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':123,'multiline':False]['text':' to simplify the loop below,','line_number':124,'multiline':False]['text':' put the larger exp in y,','line_number':125,'multiline':False]['text':' and the smaller exp in x','line_number':126,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':129,'multiline':False]['text':' recalculate y's significand upwards','line_number':133,'multiline':False]['text':' NaN (CASE1)','line_number':153,'multiline':False]['text':' if either number is NAN, the comparison is unordered, rather than equal : ','line_number':154,'multiline':False]['text':' return 0','line_number':155,'multiline':False]['text':' set exception if sNaN','line_number':158,'multiline':False]['text':' SIMPLE (CASE2)','line_number':163,'multiline':False]['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':164,'multiline':False]['text':' INFINITY (CASE3)','line_number':169,'multiline':False]['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':171,'multiline':False]['text':' x is pos infinity, it is greater, unless y is positive ','line_number':176,'multiline':False]['text':' infinity => return y!=pos_infinity','line_number':177,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':183,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 1','line_number':184,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':188,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':202,'multiline':False]['text':' ZERO (CASE4)','line_number':216,'multiline':False]['text':' some properties:','line_number':217,'multiline':False]['text':'(+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':218,'multiline':False]['text':'(ZERO x 10^A == ZERO x 10^B) for any valid A, B => therefore ignore the ','line_number':219,'multiline':False]['text':' exponent field','line_number':220,'multiline':False]['text':' (Any non-canonical # is considered 0)','line_number':221,'multiline':False]['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':228,'multiline':False]['text':' is x is zero, it is greater if Y is negative','line_number':233,'multiline':False]['text':' is y is zero, X is greater if it is positive','line_number':237,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':241,'multiline':False]['text':' now, if the sign bits differ, x is greater if y is negative','line_number':242,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':247,'multiline':False]['text':' if both components are either bigger or smaller, ','line_number':248,'multiline':False]['text':' it is clear what needs to be done','line_number':249,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':258,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':259,'multiline':False]['text':' if both are negative','line_number':260,'multiline':False]['text':' if both are positive','line_number':262,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':266,'multiline':False]['text':' if both are negative','line_number':268,'multiline':False]['text':' if both are positive','line_number':270,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':274,'multiline':False]['text':' to simplify the loop below,','line_number':275,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':276,'multiline':False]['text':' if postitive, return whichever significand is larger (converse if neg.)','line_number':278,'multiline':False]['text':' adjust the y significand upwards','line_number':286,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':288,'multiline':False]['text':'     (converse if negative)','line_number':289,'multiline':False]['text':' NaN (CASE1)','line_number':307,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 1','line_number':308,'multiline':False]['text':' set exception if sNaN','line_number':311,'multiline':False]['text':' SIMPLE (CASE2)','line_number':316,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':317,'multiline':False]['text':' INFINITY (CASE3)','line_number':322,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN (res) }','line_number':324,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':326,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':330,'multiline':False]['text':' x is finite, so:','line_number':335,'multiline':False]['text':'    if y is +inf, x<y','line_number':336,'multiline':False]['text':'    if y is -inf, x>y','line_number':337,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':341,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':355,'multiline':False]['text':' ZERO (CASE4)','line_number':369,'multiline':False]['text':' some properties:','line_number':370,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':371,'multiline':False]['text':' (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':372,'multiline':False]['text':'   therefore ignore the exponent field','line_number':373,'multiline':False]['text':'  (Any non-canonical # is considered 0)','line_number':374,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':382,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':386,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':390,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':394,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':395,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':400,'multiline':False]['text':' if both components are either bigger or smaller','line_number':401,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':410,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':413,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':416,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':421,'multiline':False]['text':' to simplify the loop below,','line_number':422,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':423,'multiline':False]['text':' return 1 if values are equal','line_number':425,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':430,'multiline':False]['text':' (converse if negative)','line_number':431,'multiline':False]['text':' adjust the y significand upwards','line_number':435,'multiline':False]['text':' return 0 if values are equal','line_number':437,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':442,'multiline':False]['text':' (converse if negative)','line_number':443,'multiline':False]['text':' NaN (CASE1)','line_number':456,'multiline':False]['text':' if either number is NAN, the comparison is unordered, rather than equal : ','line_number':457,'multiline':False]['text':' return 0','line_number':458,'multiline':False]['text':' set exception if sNaN','line_number':461,'multiline':False]['text':' SIMPLE (CASE2)','line_number':466,'multiline':False]['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':467,'multiline':False]['text':' INFINITY (CASE3)','line_number':472,'multiline':False]['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':474,'multiline':False]['text':' x is pos infinity, it is greater, unless y is positive infinity => ','line_number':479,'multiline':False]['text':' return y!=pos_infinity','line_number':480,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':486,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 1','line_number':487,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':491,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':505,'multiline':False]['text':' ZERO (CASE4)','line_number':519,'multiline':False]['text':' some properties:','line_number':520,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':521,'multiline':False]['text':' (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':522,'multiline':False]['text':' therefore ignore the exponent field','line_number':523,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':524,'multiline':False]['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':531,'multiline':False]['text':' is x is zero, it is greater if Y is negative','line_number':536,'multiline':False]['text':' is y is zero, X is greater if it is positive','line_number':540,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':544,'multiline':False]['text':' now, if the sign bits differ, x is greater if y is negative','line_number':545,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':550,'multiline':False]['text':' if both components are either bigger or smaller','line_number':551,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':560,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':562,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':566,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':571,'multiline':False]['text':' to simplify the loop below,','line_number':572,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':573,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':575,'multiline':False]['text':' (converse if negative)','line_number':576,'multiline':False]['text':' adjust the y significand upwards','line_number':584,'multiline':False]['text':' if postitive, return whichever significand is larger (converse if negative)','line_number':586,'multiline':False]['text':' NaN (CASE1)','line_number':603,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 0','line_number':604,'multiline':False]['text':' set exception if sNaN','line_number':607,'multiline':False]['text':' SIMPLE (CASE2)','line_number':612,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':613,'multiline':False]['text':' INFINITY (CASE3)','line_number':618,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?0:1; BID_RETURN (res) }','line_number':620,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':622,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':627,'multiline':False]['text':' x is finite, so:','line_number':632,'multiline':False]['text':'    if y is +inf, x<y','line_number':633,'multiline':False]['text':'    if y is -inf, x>y','line_number':634,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':638,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':652,'multiline':False]['text':' ZERO (CASE4)','line_number':666,'multiline':False]['text':' some properties:','line_number':667,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':668,'multiline':False]['text':' (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':669,'multiline':False]['text':'  therefore ignore the exponent field','line_number':670,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':671,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':679,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':683,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':687,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':691,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':692,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':697,'multiline':False]['text':' if both components are either bigger or smaller, ','line_number':698,'multiline':False]['text':' it is clear what needs to be done','line_number':699,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':708,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':711,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':714,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':719,'multiline':False]['text':' to simplify the loop below,','line_number':720,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':721,'multiline':False]['text':' return 0 if values are equal','line_number':723,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':728,'multiline':False]['text':' (converse if negative)','line_number':729,'multiline':False]['text':' adjust the y significand upwards','line_number':733,'multiline':False]['text':' return 0 if values are equal','line_number':735,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':740,'multiline':False]['text':' (converse if negative)','line_number':741,'multiline':False]['text':' NaN (CASE1)','line_number':754,'multiline':False]['text':' if either number is NAN, the comparison is unordered, rather than equal : ','line_number':755,'multiline':False]['text':'     return 0','line_number':756,'multiline':False]['text':' set exception if sNaN','line_number':759,'multiline':False]['text':' SIMPLE (CASE2)','line_number':764,'multiline':False]['text':' if all the bits are the same, these numbers are equal (LESSEQUAL).','line_number':765,'multiline':False]['text':' INFINITY (CASE3)','line_number':770,'multiline':False]['text':' if x is neg infinity, it must be lessthan or equal to y return 1','line_number':773,'multiline':False]['text':' x is pos infinity, it is greater, unless y is positive infinity => ','line_number':777,'multiline':False]['text':' return y==pos_infinity','line_number':778,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 1','line_number':784,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 0','line_number':785,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':789,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':803,'multiline':False]['text':' ZERO (CASE4)','line_number':817,'multiline':False]['text':' some properties:','line_number':818,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':819,'multiline':False]['text':' (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':820,'multiline':False]['text':'     therefore ignore the exponent field','line_number':821,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':822,'multiline':False]['text':' if both numbers are zero, they are equal -> return 1','line_number':830,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':834,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':838,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':842,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':843,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':848,'multiline':False]['text':' if both components are either bigger or smaller','line_number':849,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':858,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':861,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':864,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':869,'multiline':False]['text':' to simplify the loop below,','line_number':870,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':871,'multiline':False]['text':' return 1 if values are equal','line_number':873,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':878,'multiline':False]['text':'     (converse if negative)','line_number':879,'multiline':False]['text':' adjust the y significand upwards','line_number':883,'multiline':False]['text':' return 1 if values are equal','line_number':885,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':890,'multiline':False]['text':'     (converse if negative)','line_number':891,'multiline':False]['text':' NaN (CASE1)','line_number':904,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 0','line_number':905,'multiline':False]['text':' set exception if sNaN','line_number':908,'multiline':False]['text':' SIMPLE (CASE2)','line_number':913,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':914,'multiline':False]['text':' INFINITY (CASE3)','line_number':919,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?0:1; BID_RETURN (res) }','line_number':921,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':923,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':928,'multiline':False]['text':' x is finite, so:','line_number':933,'multiline':False]['text':'    if y is +inf, x<y','line_number':934,'multiline':False]['text':'    if y is -inf, x>y','line_number':935,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':939,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':953,'multiline':False]['text':' ZERO (CASE4)','line_number':967,'multiline':False]['text':' some properties:','line_number':968,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':969,'multiline':False]['text':' (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':970,'multiline':False]['text':'     therefore ignore the exponent field','line_number':971,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':972,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':980,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':984,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':988,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':992,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':993,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':998,'multiline':False]['text':' if both components are either bigger or smaller','line_number':999,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1008,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1011,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1014,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1019,'multiline':False]['text':' to simplify the loop below,','line_number':1020,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1021,'multiline':False]['text':' return 0 if values are equal','line_number':1023,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':1028,'multiline':False]['text':'     (converse if negative)','line_number':1029,'multiline':False]['text':' adjust the y significand upwards','line_number':1033,'multiline':False]['text':' return 0 if values are equal','line_number':1035,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':1040,'multiline':False]['text':'     (converse if negative)','line_number':1041,'multiline':False]['text':' NaN (CASE1)','line_number':1053,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':1054,'multiline':False]['text':' rather than equal : return 1','line_number':1055,'multiline':False]['text':' set exception if sNaN','line_number':1058,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1063,'multiline':False]['text':' if all the bits are the same, these numbers are equivalent.','line_number':1064,'multiline':False]['text':' INFINITY (CASE3)','line_number':1069,'multiline':False]['text':' ONE INFINITY (CASE3')','line_number':1074,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1079,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1094,'multiline':False]['text':' ZERO (CASE4)','line_number':1109,'multiline':False]['text':' some properties:','line_number':1110,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign','line_number':1111,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1112,'multiline':False]['text':'        therefore ignore the exponent field','line_number':1113,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1114,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1129,'multiline':False]['text':' now, if the sign bits differ => not equal : return 1','line_number':1130,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1135,'multiline':False]['text':' to simplify the loop below,','line_number':1136,'multiline':False]['text':' put the larger exp in y,','line_number':1137,'multiline':False]['text':' and the smaller exp in x','line_number':1138,'multiline':False]['text':' difference cannot be greater than 10^16','line_number':1145,'multiline':False]['text':' recalculate y's significand upwards','line_number':1149,'multiline':False]['text':' NaN (CASE1)','line_number':1172,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':1173,'multiline':False]['text':'   rather than equal : return 0','line_number':1174,'multiline':False]['text':' set exception if sNaN','line_number':1177,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1182,'multiline':False]['text':' if all the bits are the same, these numbers are equal (LESSEQUAL).','line_number':1183,'multiline':False]['text':' INFINITY (CASE3)','line_number':1188,'multiline':False]['text':' if x is neg infinity, it must be lessthan or equal to y return 1','line_number':1190,'multiline':False]['text':' x is pos infinity, it is greater, unless y is positive ','line_number':1195,'multiline':False]['text':' infinity => return y==pos_infinity','line_number':1196,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 1','line_number':1203,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 0','line_number':1204,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1210,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1225,'multiline':False]['text':' ZERO (CASE4)','line_number':1240,'multiline':False]['text':' some properties:','line_number':1241,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither ','line_number':1242,'multiline':False]['text':'         number is greater','line_number':1243,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1244,'multiline':False]['text':'         therefore ignore the exponent field','line_number':1245,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1246,'multiline':False]['text':' if both numbers are zero, they are equal -> return 1','line_number':1253,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':1258,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':1263,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1268,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':1269,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1274,'multiline':False]['text':' if both components are either bigger or smaller','line_number':1275,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1284,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1289,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1291,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1296,'multiline':False]['text':' to simplify the loop below,','line_number':1297,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1299,'multiline':False]['text':' return 1 if values are equal','line_number':1302,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':1307,'multiline':False]['text':'     (converse if negative)','line_number':1308,'multiline':False]['text':' adjust the y significand upwards','line_number':1314,'multiline':False]['text':' return 1 if values are equal','line_number':1317,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':1322,'multiline':False]['text':'     (converse if negative)','line_number':1323,'multiline':False]['text':' NaN (CASE1)','line_number':1338,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 1','line_number':1339,'multiline':False]['text':' set exception if sNaN','line_number':1342,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1347,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':1348,'multiline':False]['text':' INFINITY (CASE3)','line_number':1353,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN (res) }','line_number':1355,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':1357,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':1363,'multiline':False]['text':' x is finite, so:','line_number':1369,'multiline':False]['text':'    if y is +inf, x<y','line_number':1370,'multiline':False]['text':'    if y is -inf, x>y','line_number':1371,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1377,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1392,'multiline':False]['text':' ZERO (CASE4)','line_number':1407,'multiline':False]['text':' some properties:','line_number':1408,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither ','line_number':1409,'multiline':False]['text':'        number is greater','line_number':1410,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1411,'multiline':False]['text':'        therefore ignore the exponent field','line_number':1412,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1413,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':1420,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':1425,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':1430,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1435,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':1436,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1441,'multiline':False]['text':' if both components are either bigger or smaller','line_number':1442,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1451,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1456,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1458,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1463,'multiline':False]['text':' to simplify the loop below,','line_number':1464,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1466,'multiline':False]['text':' return 0 if values are equal','line_number':1469,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':1474,'multiline':False]['text':'     (converse if negative)','line_number':1475,'multiline':False]['text':' adjust the y significand upwards','line_number':1481,'multiline':False]['text':' return 0 if values are equal','line_number':1484,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':1489,'multiline':False]['text':'     (converse if negative)','line_number':1490,'multiline':False]['text':' NaN (CASE1)','line_number':1501,'multiline':False]['text':' if either number is NAN, the comparison is ordered, rather than equal : return 0','line_number':1502,'multiline':False]['text':' set exception if sNaN','line_number':1505,'multiline':False]['text':' NaN (CASE1)','line_number':1519,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':1520,'multiline':False]['text':'     rather than equal : return 0','line_number':1521,'multiline':False]['text':' set exception if sNaN','line_number':1524,'multiline':False]['text':' NaN (CASE1)','line_number':1542,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':1543,'multiline':False]['text':'     rather than equal : return 0','line_number':1544,'multiline':False]['text':' set invalid exception if NaN','line_number':1546,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1550,'multiline':False]['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':1551,'multiline':False]['text':' INFINITY (CASE3)','line_number':1556,'multiline':False]['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':1558,'multiline':False]['text':' x is pos infinity, it is greater, ','line_number':1563,'multiline':False]['text':' unless y is positive infinity => return y!=pos_infinity','line_number':1564,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':1571,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 1','line_number':1572,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1578,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1593,'multiline':False]['text':' ZERO (CASE4)','line_number':1608,'multiline':False]['text':' some properties:','line_number':1609,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':1610,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1611,'multiline':False]['text':'      therefore ignore the exponent field','line_number':1612,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1613,'multiline':False]['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1620,'multiline':False]['text':' is x is zero, it is greater if Y is negative','line_number':1625,'multiline':False]['text':' is y is zero, X is greater if it is positive','line_number':1630,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1635,'multiline':False]['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1636,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1641,'multiline':False]['text':' if both components are either bigger or smaller','line_number':1643,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1652,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1657,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1659,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1664,'multiline':False]['text':' to simplify the loop below,','line_number':1665,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1667,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':1671,'multiline':False]['text':'     (converse if negative)','line_number':1672,'multiline':False]['text':' adjust the y significand upwards','line_number':1683,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':1686,'multiline':False]['text':'     (converse if negative)','line_number':1687,'multiline':False]['text':' NaN (CASE1)','line_number':1706,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 1','line_number':1707,'multiline':False]['text':' set invalid exception if NaN','line_number':1709,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1713,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':1714,'multiline':False]['text':' INFINITY (CASE3)','line_number':1719,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN (res) }','line_number':1721,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':1723,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':1729,'multiline':False]['text':' x is finite, so:','line_number':1735,'multiline':False]['text':'    if y is +inf, x<y','line_number':1736,'multiline':False]['text':'    if y is -inf, x>y','line_number':1737,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1743,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1758,'multiline':False]['text':' ZERO (CASE4)','line_number':1773,'multiline':False]['text':' some properties:','line_number':1774,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':1775,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1776,'multiline':False]['text':'      therefore ignore the exponent field','line_number':1777,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1778,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':1785,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':1790,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':1795,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1800,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':1801,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1806,'multiline':False]['text':' if both components are either bigger or smaller','line_number':1807,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1816,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1821,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1823,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1828,'multiline':False]['text':' to simplify the loop below,','line_number':1829,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1831,'multiline':False]['text':' return 1 if values are equal','line_number':1834,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':1839,'multiline':False]['text':'     (converse if negative)','line_number':1840,'multiline':False]['text':' adjust the y significand upwards','line_number':1846,'multiline':False]['text':' return 0 if values are equal','line_number':1849,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':1854,'multiline':False]['text':'     (converse if negative)','line_number':1855,'multiline':False]['text':' NaN (CASE1)','line_number':1870,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':1871,'multiline':False]['text':' rather than equal : return 0','line_number':1872,'multiline':False]['text':' set invalid exception if NaN','line_number':1874,'multiline':False]['text':' SIMPLE (CASE2)','line_number':1878,'multiline':False]['text':' if all the bits are the same, these numbers are equal (not Greater).','line_number':1879,'multiline':False]['text':' INFINITY (CASE3)','line_number':1884,'multiline':False]['text':' if x is neg infinity, there is no way it is greater than y, return 0','line_number':1886,'multiline':False]['text':' x is pos infinity, it is greater, ','line_number':1891,'multiline':False]['text':' unless y is positive infinity => return y!=pos_infinity','line_number':1892,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 0','line_number':1899,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 1','line_number':1900,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1906,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':1921,'multiline':False]['text':' ZERO (CASE4)','line_number':1936,'multiline':False]['text':' some properties:','line_number':1937,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':1938,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':1939,'multiline':False]['text':'      therefore ignore the exponent field','line_number':1940,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':1941,'multiline':False]['text':' if both numbers are zero, neither is greater => return NOTGREATERTHAN','line_number':1948,'multiline':False]['text':' is x is zero, it is greater if Y is negative','line_number':1953,'multiline':False]['text':' is y is zero, X is greater if it is positive','line_number':1958,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':1963,'multiline':False]['text':' now, if the sign bits differ, x is greater if y is negative','line_number':1964,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':1969,'multiline':False]['text':' if both components are either bigger or smaller','line_number':1971,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':1980,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':1985,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':1987,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':1992,'multiline':False]['text':' to simplify the loop below,','line_number':1993,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':1995,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':1998,'multiline':False]['text':'     (converse if negative)','line_number':1999,'multiline':False]['text':' adjust the y significand upwards','line_number':2010,'multiline':False]['text':' if postitive, return whichever significand is larger ','line_number':2013,'multiline':False]['text':'     (converse if negative)','line_number':2014,'multiline':False]['text':' NaN (CASE1)','line_number':2033,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 0','line_number':2034,'multiline':False]['text':' set invalid exception if NaN','line_number':2036,'multiline':False]['text':' SIMPLE (CASE2)','line_number':2040,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':2041,'multiline':False]['text':' INFINITY (CASE3)','line_number':2046,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?0:1; BID_RETURN (res) }','line_number':2048,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':2050,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':2056,'multiline':False]['text':' x is finite, so:','line_number':2062,'multiline':False]['text':'    if y is +inf, x<y','line_number':2063,'multiline':False]['text':'    if y is -inf, x>y','line_number':2064,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2070,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2085,'multiline':False]['text':' ZERO (CASE4)','line_number':2100,'multiline':False]['text':' some properties:','line_number':2101,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':2102,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':2103,'multiline':False]['text':'      therefore ignore the exponent field','line_number':2104,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':2105,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':2112,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':2117,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':2122,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':2127,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':2128,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2133,'multiline':False]['text':' if both components are either bigger or smaller','line_number':2134,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':2143,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':2148,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':2150,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':2155,'multiline':False]['text':' to simplify the loop below,','line_number':2156,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':2158,'multiline':False]['text':' return 0 if values are equal','line_number':2161,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':2166,'multiline':False]['text':'     (converse if negative)','line_number':2167,'multiline':False]['text':' adjust the y significand upwards','line_number':2173,'multiline':False]['text':' return 0 if values are equal','line_number':2176,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':2181,'multiline':False]['text':'     (converse if negative)','line_number':2182,'multiline':False]['text':' NaN (CASE1)','line_number':2197,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':2198,'multiline':False]['text':' rather than equal : return 0','line_number':2199,'multiline':False]['text':' set invalid exception if NaN','line_number':2201,'multiline':False]['text':' SIMPLE (CASE2)','line_number':2205,'multiline':False]['text':' if all the bits are the same, these numbers are equal (LESSEQUAL).','line_number':2206,'multiline':False]['text':' INFINITY (CASE3)','line_number':2211,'multiline':False]['text':' if x is neg infinity, it must be lessthan or equal to y return 1','line_number':2213,'multiline':False]['text':' x is pos infinity, it is greater, ','line_number':2218,'multiline':False]['text':' unless y is positive infinity => return y==pos_infinity','line_number':2219,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 1','line_number':2226,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 0','line_number':2227,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2233,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2248,'multiline':False]['text':' ZERO (CASE4)','line_number':2263,'multiline':False]['text':' some properties:','line_number':2264,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':2265,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':2266,'multiline':False]['text':'      therefore ignore the exponent field','line_number':2267,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':2268,'multiline':False]['text':' if both numbers are zero, they are equal -> return 1','line_number':2275,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':2280,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':2285,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':2290,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':2291,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2296,'multiline':False]['text':' if both components are either bigger or smaller','line_number':2297,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':2306,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':2311,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':2313,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':2318,'multiline':False]['text':' to simplify the loop below,','line_number':2319,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':2321,'multiline':False]['text':' return 1 if values are equal','line_number':2324,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':2329,'multiline':False]['text':'     (converse if negative)','line_number':2330,'multiline':False]['text':' adjust the y significand upwards','line_number':2336,'multiline':False]['text':' return 1 if values are equal','line_number':2339,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':2344,'multiline':False]['text':'     (converse if negative)','line_number':2345,'multiline':False]['text':' NaN (CASE1)','line_number':2360,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 0','line_number':2361,'multiline':False]['text':' set invalid exception if NaN','line_number':2363,'multiline':False]['text':' SIMPLE (CASE2)','line_number':2367,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':2368,'multiline':False]['text':' INFINITY (CASE3)','line_number':2373,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?0:1; BID_RETURN (res) }','line_number':2375,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':2377,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':2383,'multiline':False]['text':' x is finite, so:','line_number':2389,'multiline':False]['text':'    if y is +inf, x<y','line_number':2390,'multiline':False]['text':'    if y is -inf, x>y','line_number':2391,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2397,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2412,'multiline':False]['text':' ZERO (CASE4)','line_number':2427,'multiline':False]['text':' some properties:','line_number':2428,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':2429,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':2430,'multiline':False]['text':'      therefore ignore the exponent field','line_number':2431,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':2432,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':2439,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':2444,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':2449,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':2454,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':2455,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2460,'multiline':False]['text':' if both components are either bigger or smaller','line_number':2461,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':2470,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':2475,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':2477,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':2482,'multiline':False]['text':' to simplify the loop below,','line_number':2483,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':2485,'multiline':False]['text':' return 0 if values are equal','line_number':2488,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':2493,'multiline':False]['text':'     (converse if negative)','line_number':2494,'multiline':False]['text':' adjust the y significand upwards','line_number':2500,'multiline':False]['text':' return 0 if values are equal','line_number':2503,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':2508,'multiline':False]['text':'     (converse if negative)','line_number':2509,'multiline':False]['text':' NaN (CASE1)','line_number':2524,'multiline':False]['text':' if either number is NAN, the comparison is unordered, ','line_number':2525,'multiline':False]['text':' rather than equal : return 0','line_number':2526,'multiline':False]['text':' set invalid exception if NaN','line_number':2528,'multiline':False]['text':' SIMPLE (CASE2)','line_number':2532,'multiline':False]['text':' if all the bits are the same, these numbers are equal (LESSEQUAL).','line_number':2533,'multiline':False]['text':' INFINITY (CASE3)','line_number':2538,'multiline':False]['text':' if x is neg infinity, it must be lessthan or equal to y return 1','line_number':2540,'multiline':False]['text':' x is pos infinity, it is greater, ','line_number':2545,'multiline':False]['text':' unless y is positive infinity => return y==pos_infinity','line_number':2546,'multiline':False]['text':' x is finite, so if y is positive infinity, then x is less, return 1','line_number':2553,'multiline':False]['text':'                 if y is negative infinity, then x is greater, return 0','line_number':2554,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2560,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2575,'multiline':False]['text':' ZERO (CASE4)','line_number':2590,'multiline':False]['text':' some properties:','line_number':2591,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':2592,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':2593,'multiline':False]['text':'      therefore ignore the exponent field','line_number':2594,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':2595,'multiline':False]['text':' if both numbers are zero, they are equal -> return 1','line_number':2602,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':2607,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':2612,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':2617,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':2618,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2623,'multiline':False]['text':' if both components are either bigger or smaller','line_number':2624,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':2633,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':2638,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':2640,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':2645,'multiline':False]['text':' to simplify the loop below,','line_number':2646,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':2648,'multiline':False]['text':' return 1 if values are equal','line_number':2651,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':2656,'multiline':False]['text':'     (converse if negative)','line_number':2657,'multiline':False]['text':' adjust the y significand upwards','line_number':2663,'multiline':False]['text':' return 1 if values are equal','line_number':2666,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':2671,'multiline':False]['text':'     (converse if negative)','line_number':2672,'multiline':False]['text':' NaN (CASE1)','line_number':2687,'multiline':False]['text':' if either number is NAN, the comparison is unordered : return 1','line_number':2688,'multiline':False]['text':' set invalid exception if NaN','line_number':2690,'multiline':False]['text':' SIMPLE (CASE2)','line_number':2694,'multiline':False]['text':' if all the bits are the same, these numbers are equal.','line_number':2695,'multiline':False]['text':' INFINITY (CASE3)','line_number':2700,'multiline':False]['text':' if x==neg_inf, { res = (y == neg_inf)?1:0; BID_RETURN (res) }','line_number':2702,'multiline':False]['text':' x is -inf, so it is less than y unless y is -inf','line_number':2704,'multiline':False]['text':' x is pos_inf, no way for it to be less than y','line_number':2710,'multiline':False]['text':' x is finite, so:','line_number':2716,'multiline':False]['text':'    if y is +inf, x<y','line_number':2717,'multiline':False]['text':'    if y is -inf, x>y','line_number':2718,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2724,'multiline':False]['text':' if steering bits are 11 (condition will be 0), then exponent is G[0:w+1] =>','line_number':2739,'multiline':False]['text':' ZERO (CASE4)','line_number':2754,'multiline':False]['text':' some properties:','line_number':2755,'multiline':False]['text':' (+ZERO==-ZERO) => therefore ignore the sign, and neither number is greater','line_number':2756,'multiline':False]['text':'    (ZERO x 10^A == ZERO x 10^B) for any valid A, B => ','line_number':2757,'multiline':False]['text':'      therefore ignore the exponent field','line_number':2758,'multiline':False]['text':'    (Any non-canonical # is considered 0)','line_number':2759,'multiline':False]['text':' if both numbers are zero, they are equal','line_number':2766,'multiline':False]['text':' if x is zero, it is lessthan if Y is positive','line_number':2771,'multiline':False]['text':' if y is zero, X is less if it is negative','line_number':2776,'multiline':False]['text':' OPPOSITE SIGN (CASE5)','line_number':2781,'multiline':False]['text':' now, if the sign bits differ, x is less than if y is positive','line_number':2782,'multiline':False]['text':' REDUNDANT REPRESENTATIONS (CASE6)','line_number':2787,'multiline':False]['text':' if both components are either bigger or smaller','line_number':2788,'multiline':False]['text':' if exp_x is 6 greater than exp_y, no need for compensation','line_number':2797,'multiline':False]['text':' difference cannot be greater than 10^6','line_number':2802,'multiline':False]['text':' if exp_x is 6 less than exp_y, no need for compensation','line_number':2804,'multiline':False]['text':' if |exp_x - exp_y| < 6, it comes down to the compensated significand','line_number':2809,'multiline':False]['text':' to simplify the loop below,','line_number':2810,'multiline':False]['text':' otherwise adjust the x significand upwards','line_number':2812,'multiline':False]['text':' return 0 if values are equal','line_number':2815,'multiline':False]['text':' if postitive, return whichever significand abs is smaller ','line_number':2820,'multiline':False]['text':'     (converse if negative)','line_number':2821,'multiline':False]['text':' adjust the y significand upwards','line_number':2827,'multiline':False]['text':' return 0 if values are equal','line_number':2830,'multiline':False]['text':' if positive, return whichever significand abs is smaller ','line_number':2835,'multiline':False]['text':'     (converse if negative)','line_number':2836,'multiline':False]