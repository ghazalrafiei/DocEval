['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' the destination string (pointed to by ps) must be pre-allocated','line_number':52,'multiline':False]['text':' place holder only','line_number':66,'multiline':False]['text':' unpack arguments, check for NaN or Infinity','line_number':67,'multiline':False]['text':' x is Inf. or NaN or 0','line_number':69,'multiline':False]['text':' Inf or NaN?','line_number':71,'multiline':False]['text':' x is Inf','line_number':83,'multiline':False]['text':' 0','line_number':91,'multiline':False]['text':' get decimal digits in coefficient_x','line_number':106,'multiline':False]['text':' 2^32/10','line_number':116,'multiline':False]['text':' convert expon, coeff to ASCII','line_number':136,'multiline':False]['text':' if zero or non-canonical, set coefficient to '0'','line_number':144,'multiline':False]['text':' non-canonical','line_number':145,'multiline':False]['text':' significand is zero','line_number':146,'multiline':False]['text':' ****************************************************
       This takes a bid coefficient in C1.w[1],C1.w[0] 
       and put the converted character sequence at location 
       starting at &(str[k]). The function returns the number
       of MiDi returned. Note that the character sequence 
       does not have leading zeros EXCEPT when the input is of
       zero value. It will then output 1 character '0'
       The algorithm essentailly tries first to get a sequence of
       Millenial Digits "MiDi" and then uses table lookup to get the
       character strings of these MiDis.
       **************************************************** ','line_number':150,'multiline':True]['text':' Algorithm first decompose possibly 34 digits in hi and lo
       18 digits. (The high can have at most 16 digits). It then
       uses macro that handle 18 digit portions.
       The first step is to get hi and lo such that
       2^(64) C1.w[1] + C1.w[0] = hi * 10^18  + lo,   0 <= lo < 10^18.
       We use a table lookup method to obtain the hi and lo 18 digits.
       [C1.w[1],C1.w[0]] = c_8 2^(107) + c_7 2^(101) + ... + c_0 2^(59) + d
       where 0 <= d < 2^59 and each c_j has 6 bits. Because d fits in
       18 digits,  we set hi = 0, and lo = d to begin with.
       We then retrieve from a table, for j = 0, 1, ..., 8
       that gives us A and B where c_j 2^(59+6j) = A * 10^18 + B.
       hi += A ; lo += B; After each accumulation into lo, we normalize 
       immediately. So at the end, we have the decomposition as we need. ','line_number':161,'multiline':True]['text':' now convert the MiDi into character strings ','line_number':195,'multiline':True]['text':' get decimal digits in coefficient_x','line_number':212,'multiline':False]['text':' 2^32/10','line_number':222,'multiline':False]['text':' place holder only','line_number':271,'multiline':False]['text':' eliminate leading whitespace','line_number':272,'multiline':False]['text':' get first non-whitespace character','line_number':276,'multiline':False]['text':' detect special cases (INF or NaN)','line_number':279,'multiline':False]['text':' Infinity?','line_number':281,'multiline':False]['text':' return sNaN','line_number':291,'multiline':False]['text':' case insensitive check for snan','line_number':294,'multiline':False]['text':' return qNaN','line_number':298,'multiline':False]['text':' detect +INF or -INF','line_number':303,'multiline':False]['text':' if +sNaN, +SNaN, -sNaN, or -SNaN','line_number':317,'multiline':False]['text':' determine sign','line_number':326,'multiline':False]['text':' get next character if leading +/- sign','line_number':332,'multiline':False]['text':' if c isn't a decimal point or a decimal digit, return NaN','line_number':337,'multiline':False]['text':' return NaN','line_number':339,'multiline':False]['text':' detect zero (and eliminate/ignore leading zeros)','line_number':346,'multiline':False]['text':' if all numbers are zeros (with possibly 1 radix point, the number is zero','line_number':353,'multiline':False]['text':' should catch cases such as: 000.0','line_number':354,'multiline':False]['text':' for numbers such as 0.0000000000000000000000000000000000001001, ','line_number':357,'multiline':False]['text':' we want to count the leading zeros','line_number':358,'multiline':False]['text':' if this character is a radix point, make sure we haven't already ','line_number':362,'multiline':False]['text':' encountered one','line_number':363,'multiline':False]['text':' if this is the first radix point, and the next character is NULL, ','line_number':367,'multiline':False]['text':' we have a zero','line_number':368,'multiline':False]['text':' if 2 radix points, return NaN','line_number':377,'multiline':False]['text':'pres->w[1] = 0x3040000000000000ull | sign_x;','line_number':382,'multiline':False]['text':' return NaN','line_number':396,'multiline':False]['text':' coefficient rounding','line_number':412,'multiline':False]['text':' if coefficient is even and c is 5, prepare to round up if ','line_number':416,'multiline':False]['text':' subsequent digit is nonzero','line_number':417,'multiline':False]['text':' if str[MAXDIG+1] > 5, we MUST round up','line_number':418,'multiline':False]['text':' if str[MAXDIG+1] == 5 and coefficient is ODD, ROUND UP!','line_number':419,'multiline':False]['text':' ndigits > 17','line_number':443,'multiline':False]['text':' return NaN','line_number':472,'multiline':False]['text':' return NaN','line_number':484,'multiline':False]['text':' return NaN','line_number':499,'multiline':False]