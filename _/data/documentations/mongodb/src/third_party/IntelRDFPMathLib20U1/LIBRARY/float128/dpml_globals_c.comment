['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':'
 * For each data type required by the system, this routine generates bit
 * patterns for the indicated values in the following order:
 ','line_number':48,'multiline':True]['text':'
 *	The globals data is stored in the GLOBALS TABLE as a sequence of
 *	records.  If only IEEE values are needed, each record is 32 bytes in
 *	length; if VAX values are required in addition to the IEEE values, then
 *	each record is 64 bytes in length.  The fields in the records are
 *	arranged in the following format:
 *
 *		IEEE values only:
 *		+---+---+---+---+---+---+---+---+---+---+
 *		| s |	|   t	|	    x		|
 *	byte	+---+---+---+---+---+---+---+---+---+---+
 *	offset:	 0	 8	 16
 *
 *		Both IEEE and VAX values:
 *		+---+---+---+---+---+---+---+---+---+---+
 *		| s |	|   t	|	    x		|
 *	byte	+---+---+---+---+---+---+---+---+---+---+
 *	offset:	 0	 8	 16
 *		+---+---+---+---+---+---+---+---+---+---+
 *		| f |	|   g	|			|
 *	byte	+---+---+---+---+---+---+---+---+---+---+
 *	offset:	 32	 40
 *
 *
 *	The address of the global item with index N and data type T is given by
 *
 *	    GLOBAL_ADDR( T, N ) = ( char* )GLOBALS_TABLE +
 *				  8 * T +
 *				  BYTES_PER_TABLE_ENTRY * I
 *
 ','line_number':68,'multiline':True]['text':'
 * In addition to the actual values, this routine also sets up a table
 * of address that allows type independent accessing of the values.
 * Values are generated only for those data types actually supported by
 * the platform.  The BIT_IS_SET macro is used to determine which 
 * "bits" are set in the FLOAT_TYPES macro
 ','line_number':100,'multiline':True]['text':'
 * Along with each set of constants, a symbolic constant for an enumerated
 * type is generated.  These constants have been chosen to allow for easy access
 * to the globals table.
 *
 *		#define	_s_TYPE	0
 *		#define	_t_TYPE	1
 *		#define	_x_TYPE	2
 *		#define	_f_TYPE	4
 *		#define	_g_TYPE	5
 *		#define	_d_TYPE	5
 *
 * (Note: These _{g,t,f,s,x}_TYPE constants are only referenced by
 * nt_exception.c, and the F_TYPE_ENUM macro (see below).
 * The F_TYPE_ENUM macro, in turn, is only referenced via the GLOBAL macro
 * (see below) and via ADD_ERR_CODE_TYPE defined in dpml_exception.h.)
 *
 * These enumerated types are used to provide type independent access of all
 * DPML global values.	For example, to access a positive one, use either:
 *
 *	*((F_TYPE*)GLOBAL_ADDR(PASTE_3(_,F_CHAR,_TYPE),POS_ONE_INDEX))
 * or
 *	GLOBAL(POS_ONE_INDEX)
 * or
 *	POS_ONE
 ','line_number':110,'multiline':True]['text':'
 * These macros are used to print out the table values and ensure that
 * the values are printed out in the right order.
 *
 *	NOTE: Extending mphoc to deal with NaN's, infinities, signed
 *	zeros and ROP's would make life a lot simpler here.
 *
 *	NOTE: Although platforms that contain the VAX g and d float data type
 *	are little endian, the word containing the exponent comes first.
 ','line_number':137,'multiline':True]['text':'  We assume there are really only 2 different table formats:	{s, t, x}   ','line_number':180,'multiline':True]['text':'  and {s, t, x, f, g}, which use 32 and 64 bytes respectively.	    ','line_number':181,'multiline':True]['text':'  NOTE:  the order in which the following statements occur *MUST* match   ','line_number':230,'multiline':True]['text':'  the enumeration for the _{s,t,x,f,g,d}_TYPE constants above.	    ','line_number':231,'multiline':True]['text':' NaNs and reserved operands ','line_number':233,'multiline':True]['text':' POS ZERO ','line_number':249,'multiline':True]['text':' NEG ZERO ','line_number':265,'multiline':True]['text':' POS TINY ','line_number':281,'multiline':True]['text':' NEG TINY ','line_number':297,'multiline':True]['text':' POS HUGE ','line_number':313,'multiline':True]['text':' NEG HUGE ','line_number':329,'multiline':True]['text':' POS INFINITY ','line_number':345,'multiline':True]['text':' NEG INFINITY ','line_number':361,'multiline':True]['text':' POS ULP FACTOR ','line_number':377,'multiline':True]['text':' NEG ULP FACTOR ','line_number':393,'multiline':True]['text':' POS ONE ','line_number':409,'multiline':True]['text':' NEG ONE ','line_number':425,'multiline':True]['text':'
     * Print out defines so that other routines can access the tables
     * Specifically, for each generic value in the globals table  
     * generate a type independent symbolic constant (these are only used
     * by dpml_error_codes.c).
     ','line_number':449,'multiline':True]