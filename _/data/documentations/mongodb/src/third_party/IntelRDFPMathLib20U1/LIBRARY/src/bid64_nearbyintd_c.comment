['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':'****************************************************************************
 *  BID64_nearbyintd
 ***************************************************************************','line_number':32,'multiline':True]['text':' unbiased exponent','line_number':40,'multiline':False]['text':' Note: C1 represents the significand (BID_UINT64)','line_number':41,'multiline':False]['text':' BID_UINT64 res is C* at first - represents up to 16 decimal digits <= 54 bits','line_number':46,'multiline':False]['text':' 0 for positive, MASK_SIGN for negative','line_number':50,'multiline':False]['text':' check for NaNs and infinities','line_number':52,'multiline':False]['text':' check for NaN','line_number':53,'multiline':False]['text':' clear G6-G12 and the payload bits','line_number':55,'multiline':False]['text':' clear G6-G12','line_number':57,'multiline':False]['text':' SNaN','line_number':58,'multiline':False]['text':' set invalid flag','line_number':59,'multiline':False]['text':' return quiet (SNaN)','line_number':61,'multiline':False]['text':' QNaN','line_number':63,'multiline':False]['text':' check for Infinity','line_number':67,'multiline':False]['text':' unpack x','line_number':71,'multiline':False]['text':' if the steering bits are 11 (condition will be 0), then ','line_number':73,'multiline':False]['text':' the exponent is G[0:w+1]','line_number':74,'multiline':False]['text':' non-canonical','line_number':77,'multiline':False]['text':' if ((x & MASK_STEERING_BITS) != MASK_STEERING_BITS)','line_number':80,'multiline':False]['text':' if x is 0 or non-canonical return 0 preserving the sign bit and ','line_number':85,'multiline':False]['text':' the preferred exponent of MAX(Q(x), 0)','line_number':86,'multiline':False]['text':' x is a finite non-zero number (not 0, non-canonical, or special)','line_number':93,'multiline':False]['text':' return 0 if (exp <= -(p+1))','line_number':98,'multiline':False]['text':' return 0 if (exp <= -p)','line_number':105,'multiline':False]['text':' return 0 if (exp <= -p)','line_number':116,'multiline':False]['text':' return 0 if (exp <= -p) ','line_number':127,'multiline':False]['text':' end switch ()','line_number':133,'multiline':False]['text':' q = nr. of decimal digits in x (1 <= q <= 54)','line_number':135,'multiline':False]['text':'  determine first the nr. of bits in x','line_number':136,'multiline':False]['text':' x >= 2^53','line_number':137,'multiline':False]['text':' if x < 2^53','line_number':139,'multiline':False]['text':' exact conversion','line_number':140,'multiline':False]['text':' -exp <= 0','line_number':151,'multiline':False]['text':' the argument is an integer already','line_number':152,'multiline':False]['text':' exp < 0 and 1 <= -exp <= q','line_number':159,'multiline':False]['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':160,'multiline':False]['text':' 1 <= ind <= 16; ind is a synonym for 'x'','line_number':161,'multiline':False]['text':' chop off ind digits from the lower part of C1 ','line_number':162,'multiline':False]['text':' C1 = C1 + 1/2 * 10^x where the result C1 fits in 64 bits','line_number':163,'multiline':False]['text':' FOR ROUND_TO_NEAREST, WE ADD 1/2 ULP(y) then truncate','line_number':164,'multiline':False]['text':' calculate C* and f*','line_number':166,'multiline':False]['text':' C* is actually floor(C*) in this case','line_number':167,'multiline':False]['text':' C* and f* need shifting and masking, as shown by','line_number':168,'multiline':False]['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':169,'multiline':False]['text':' 1 <= x <= 16','line_number':170,'multiline':False]['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':171,'multiline':False]['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':172,'multiline':False]['text':' the approximation of 10^(-x) was rounded up to 64 bits','line_number':173,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':176,'multiline':False]['text':'   if floor(C*) is even then C* = floor(C*) - logical right','line_number':177,'multiline':False]['text':'       shift; C* has p decimal digits, correct by Prop. 1)','line_number':178,'multiline':False]['text':'   else if floor(C*) is odd C* = floor(C*)-1 (logical right','line_number':179,'multiline':False]['text':'       shift; C* has p decimal digits, correct by Pr. 1)','line_number':180,'multiline':False]['text':' else  ','line_number':181,'multiline':False]['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':182,'multiline':False]['text':'       correct by Property 1)','line_number':183,'multiline':False]['text':' n = C* * 10^(e+x)  ','line_number':184,'multiline':False]['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':186,'multiline':False]['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':190,'multiline':False]['text':' 3 <= shift <= 63','line_number':191,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':196,'multiline':False]['text':' since round_to_even, subtract 1 if current result is odd','line_number':197,'multiline':False]['text':' set exponent to zero as it was negative before.','line_number':202,'multiline':False]['text':' if exp < 0 and q + exp < 0','line_number':205,'multiline':False]['text':' the result is +0 or -0','line_number':206,'multiline':False]['text':' exp < 0 and 1 <= -exp <= q','line_number':212,'multiline':False]['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':213,'multiline':False]['text':' 1 <= ind <= 16; ind is a synonym for 'x'','line_number':214,'multiline':False]['text':' chop off ind digits from the lower part of C1 ','line_number':215,'multiline':False]['text':' C1 = C1 + 1/2 * 10^x where the result C1 fits in 64 bits','line_number':216,'multiline':False]['text':' FOR ROUND_TO_NEAREST, WE ADD 1/2 ULP(y) then truncate','line_number':217,'multiline':False]['text':' calculate C* and f*','line_number':219,'multiline':False]['text':' C* is actually floor(C*) in this case','line_number':220,'multiline':False]['text':' C* and f* need shifting and masking, as shown by','line_number':221,'multiline':False]['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':222,'multiline':False]['text':' 1 <= x <= 16','line_number':223,'multiline':False]['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':224,'multiline':False]['text':' C* = (C1 + 1/2 * 10^x) * 10^(-x)','line_number':225,'multiline':False]['text':' the approximation of 10^(-x) was rounded up to 64 bits','line_number':226,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is a midpoint','line_number':229,'multiline':False]['text':'   C* = floor(C*) - logical right shift; C* has p decimal digits, ','line_number':230,'multiline':False]['text':'       correct by Prop. 1)','line_number':231,'multiline':False]['text':' else','line_number':232,'multiline':False]['text':'   C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':233,'multiline':False]['text':'       correct by Property 1)','line_number':234,'multiline':False]['text':' n = C* * 10^(e+x)','line_number':235,'multiline':False]['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':237,'multiline':False]['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':239,'multiline':False]['text':' 3 <= shift <= 63','line_number':240,'multiline':False]['text':' if exp < 0 and q + exp < 0','line_number':245,'multiline':False]['text':' the result is +0 or -0','line_number':246,'multiline':False]['text':' exp < 0 and 1 <= -exp < q','line_number':252,'multiline':False]['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':253,'multiline':False]['text':' 1 <= ind <= 16; ind is a synonym for 'x'','line_number':254,'multiline':False]['text':' chop off ind digits from the lower part of C1 ','line_number':255,'multiline':False]['text':' C1 fits in 64 bits','line_number':256,'multiline':False]['text':' calculate C* and f*','line_number':257,'multiline':False]['text':' C* is actually floor(C*) in this case','line_number':258,'multiline':False]['text':' C* and f* need shifting and masking, as shown by','line_number':259,'multiline':False]['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':260,'multiline':False]['text':' 1 <= x <= 16','line_number':261,'multiline':False]['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':262,'multiline':False]['text':' C* = C1 * 10^(-x)','line_number':263,'multiline':False]['text':' the approximation of 10^(-x) was rounded up to 64 bits','line_number':264,'multiline':False]['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':267,'multiline':False]['text':'       correct by Property 1)','line_number':268,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is exact','line_number':269,'multiline':False]['text':' n = C* * 10^(e+x)  ','line_number':270,'multiline':False]['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':272,'multiline':False]['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':276,'multiline':False]['text':' 3 <= shift <= 63','line_number':277,'multiline':False]['text':' if (f* > 10^(-x)) then the result is inexact','line_number':282,'multiline':False]['text':' if negative and not exact, increment magnitude','line_number':285,'multiline':False]['text':' set exponent to zero as it was negative before.','line_number':289,'multiline':False]['text':' if exp < 0 and q + exp <= 0','line_number':292,'multiline':False]['text':' the result is +0 or -1','line_number':293,'multiline':False]['text':' exp < 0 and 1 <= -exp < q','line_number':303,'multiline':False]['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':304,'multiline':False]['text':' 1 <= ind <= 16; ind is a synonym for 'x'','line_number':305,'multiline':False]['text':' chop off ind digits from the lower part of C1 ','line_number':306,'multiline':False]['text':' C1 fits in 64 bits','line_number':307,'multiline':False]['text':' calculate C* and f*','line_number':308,'multiline':False]['text':' C* is actually floor(C*) in this case','line_number':309,'multiline':False]['text':' C* and f* need shifting and masking, as shown by','line_number':310,'multiline':False]['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':311,'multiline':False]['text':' 1 <= x <= 16','line_number':312,'multiline':False]['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':313,'multiline':False]['text':' C* = C1 * 10^(-x)','line_number':314,'multiline':False]['text':' the approximation of 10^(-x) was rounded up to 64 bits','line_number':315,'multiline':False]['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':318,'multiline':False]['text':'       correct by Property 1)','line_number':319,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is exact','line_number':320,'multiline':False]['text':' n = C* * 10^(e+x)  ','line_number':321,'multiline':False]['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':323,'multiline':False]['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':327,'multiline':False]['text':' 3 <= shift <= 63','line_number':328,'multiline':False]['text':' if (f* > 10^(-x)) then the result is inexact','line_number':333,'multiline':False]['text':' if positive and not exact, increment magnitude','line_number':336,'multiline':False]['text':' set exponent to zero as it was negative before.','line_number':340,'multiline':False]['text':' if exp < 0 and q + exp <= 0','line_number':343,'multiline':False]['text':' the result is -0 or +1','line_number':344,'multiline':False]['text':' exp < 0 and 1 <= -exp <= q','line_number':354,'multiline':False]['text':' need to shift right -exp digits from the coefficient; exp will be 0','line_number':355,'multiline':False]['text':' 1 <= ind <= 16; ind is a synonym for 'x'','line_number':356,'multiline':False]['text':' chop off ind digits from the lower part of C1 ','line_number':357,'multiline':False]['text':' C1 fits in 127 bits','line_number':358,'multiline':False]['text':' calculate C* and f*','line_number':359,'multiline':False]['text':' C* is actually floor(C*) in this case','line_number':360,'multiline':False]['text':' C* and f* need shifting and masking, as shown by','line_number':361,'multiline':False]['text':' bid_shiftright128[] and bid_maskhigh128[]','line_number':362,'multiline':False]['text':' 1 <= x <= 16','line_number':363,'multiline':False]['text':' kx = 10^(-x) = bid_ten2mk64[ind - 1]','line_number':364,'multiline':False]['text':' C* = C1 * 10^(-x)','line_number':365,'multiline':False]['text':' the approximation of 10^(-x) was rounded up to 64 bits','line_number':366,'multiline':False]['text':' C* = floor(C*) (logical right shift; C has p decimal digits,','line_number':369,'multiline':False]['text':'       correct by Property 1)','line_number':370,'multiline':False]['text':' if (0 < f* < 10^(-x)) then the result is exact','line_number':371,'multiline':False]['text':' n = C* * 10^(e+x)  ','line_number':372,'multiline':False]['text':' 0 <= ind - 1 <= 2 => shift = 0','line_number':374,'multiline':False]['text':' 3 <= ind - 1 <= 21 => 3 <= shift <= 63','line_number':376,'multiline':False]['text':' 3 <= shift <= 63','line_number':377,'multiline':False]['text':' set exponent to zero as it was negative before.','line_number':380,'multiline':False]['text':' if exp < 0 and q + exp < 0','line_number':383,'multiline':False]['text':' the result is +0 or -0','line_number':384,'multiline':False]['text':' end switch ()','line_number':389,'multiline':False]