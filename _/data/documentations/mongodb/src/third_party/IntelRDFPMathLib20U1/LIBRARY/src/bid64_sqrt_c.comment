['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':'****************************************************************************
 *    BID64 square root
 *****************************************************************************
 *
 *  Algorithm description:
 *
 *  if(exponent_x is odd)
 *     scale coefficient_x by 10, adjust exponent
 *  - get lower estimate for number of digits in coefficient_x
 *  - scale coefficient x to between 31 and 33 decimal digits
 *  - in parallel, check for exact case and return if true
 *  - get high part of result coefficient using double precision sqrt
 *  - compute remainder and refine coefficient in one iteration (which 
 *                                 modifies it by at most 1)
 *  - result exponent is easy to compute from the adjusted arg. exponent 
 *
 ***************************************************************************','line_number':30,'multiline':True]['text':' unpack arguments, check for NaN or Infinity','line_number':69,'multiline':False]['text':' x is Inf. or NaN or 0','line_number':71,'multiline':False]['text':' -Infinity','line_number':74,'multiline':False]['text':' sNaN','line_number':82,'multiline':False]['text':' x is 0','line_number':87,'multiline':False]['text':' x<0?','line_number':92,'multiline':False]['text':' (void) fegetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':101,'multiline':False]['text':'--- get number of bits in the coefficient of x ---','line_number':103,'multiline':False]['text':' add test for range','line_number':107,'multiline':False]['text':'dq=(double)A10;  dqe=sqrt(dq); ','line_number':118,'multiline':False]['text':'printf("QE=%I64d, A10=%I64d, P=%I64d, dq=%016I64x,dqe=%016I64x\n",QE,A10,QE*QE,*(BID_UINT64*)&dq,*(BID_UINT64*)&dqe);','line_number':120,'multiline':False]['text':' (void) fesetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':126,'multiline':False]['text':' if exponent is odd, scale coefficient by 10','line_number':130,'multiline':False]['text':' exp. bias is even','line_number':133,'multiline':False]['text':' 2^64','line_number':138,'multiline':False]['text':' convert CA to DP','line_number':140,'multiline':False]['text':' get sign(sqrt(CA)-Q)','line_number':149,'multiline':False]['text':' midpoint to check','line_number':166,'multiline':False]['text':' get sign(-sqrt(CA)+Midpoint)','line_number':170,'multiline':False]['text':' adjust Q if R!=R2','line_number':174,'multiline':False]['text':' (void) fesetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':191,'multiline':False]['text':' unpack arguments, check for NaN or Infinity','line_number':210,'multiline':False]['text':' NaN ?','line_number':213,'multiline':False]['text':' sNaN','line_number':216,'multiline':False]['text':' x is Infinity?','line_number':228,'multiline':False]['text':' -Inf, return NaN','line_number':231,'multiline':False]['text':' x is 0 otherwise','line_number':239,'multiline':False]['text':'res= sign_x | (((BID_UINT64)exponent_x)<<53);','line_number':248,'multiline':False]['text':' (void) fegetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':260,'multiline':False]['text':' 2^64','line_number':263,'multiline':False]['text':' fx ~ CX','line_number':266,'multiline':False]['text':' check for exact result  ','line_number':285,'multiline':False]['text':' && S2.w[0]==A10.w[0])','line_number':289,'multiline':False]['text':' (void) fesetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':296,'multiline':False]['text':' get number of digits in CX','line_number':353,'multiline':False]['text':' if exponent is odd, scale coefficient by 10','line_number':359,'multiline':False]['text':' exp. bias is even','line_number':362,'multiline':False]['text':' get coeff*(2^M[extra_digits])/10^extra_digits','line_number':379,'multiline':False]['text':' now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128','line_number':382,'multiline':False]['text':' 4*C256','line_number':406,'multiline':False]['text':' compare to midpoints','line_number':415,'multiline':False]['text':' CSM^2','line_number':419,'multiline':False]['text':' round up','line_number':424,'multiline':False]['text':' M256 - 8*CSM','line_number':436,'multiline':False]['text':' if CSM' > C256, round up','line_number':440,'multiline':False]['text':' round down','line_number':443,'multiline':False]['text':' RU?','line_number':501,'multiline':False]['text':' (void) fesetexceptflag (&binaryflags, BID_FE_ALL_FLAGS);','line_number':513,'multiline':False]