['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' log(2) and log(10) scaled by 2^160','line_number':39,'multiline':False]['text':' 1/2, 1/3, ..., 1/10 as binary fractions','line_number':47,'multiline':False]['text':' 10^28 * 2^96, used for final decimal alignment','line_number':76,'multiline':False]['text':' Taylor series coefficients -1/2, 1/3, -1/4','line_number':81,'multiline':False]['text':' Reciprocal table','line_number':92,'multiline':False]['text':' These are 1 + e for the various bitfields, scaled by 2^63','line_number':93,'multiline':False]['text':' Corresponding logs of the bitfields (1 + e)','line_number':360,'multiline':False]['text':' Scaled by 2^160 so the binary point is in the middle of the top word.','line_number':361,'multiline':False]['text':' Some internal macros.','line_number':625,'multiline':False]['text':' Case of guaranteed no overflow.','line_number':726,'multiline':False]['text':' Useful macros lifted from "bid_binarydecimal.c"','line_number':776,'multiline':False]['text':' Accurate decimal128 log function returning 2-part result.','line_number':821,'multiline':False]['text':' This is mainly required for the power function, but since it's more','line_number':822,'multiline':False]['text':' "direct" it may turn out more efficient than the "naive" one above.','line_number':823,'multiline':False]['text':' ***************************************************************************','line_number':825,'multiline':False]['text':' bid128_mul stands for bid128qq_mul','line_number':827,'multiline':False]['text':' We will always signal on signalling NaNs anyway','line_number':840,'multiline':False]['text':' We have 1^y = x^+0 = x^-0 = 1 even when x or y is a NaN','line_number':850,'multiline':False]['text':' Otherwise a NaN input leads to a NaN result.','line_number':864,'multiline':False]['text':' Just return the same NaN, quieted and canonized','line_number':865,'multiline':False]['text':' Deal with other cases where second arg is infinite:','line_number':894,'multiline':False]['text':'','line_number':895,'multiline':False]['text':'  pow(-1,+-inf) = 1','line_number':896,'multiline':False]['text':'  pow(x,+inf) = +inf when |x| > 1','line_number':897,'multiline':False]['text':'  pow(x,+inf) = +0 when |x| < 1','line_number':898,'multiline':False]['text':'  pow(x,-inf) = +0 when |x| > 1','line_number':899,'multiline':False]['text':'  pow(x,-inf) = +inf when |x| < 1','line_number':900,'multiline':False]['text':' See if the exponent is an integer, and if so, find its parity.','line_number':921,'multiline':False]['text':' We can assume that bid128_round_integral_nearest_even returns a','line_number':922,'multiline':False]['text':' result with exponent >= 0, and if it's > 0 it's trivially even.','line_number':923,'multiline':False]['text':' Now the cases where the first arg is infinite:','line_number':934,'multiline':False]['text':'','line_number':935,'multiline':False]['text':'  pow(+inf,y) = 0 for y < 0','line_number':936,'multiline':False]['text':'  pow(+inf,y) = +inf for y > 0','line_number':937,'multiline':False]['text':'  and pow(-inf,y) the same with sign swapped for odd integers','line_number':938,'multiline':False]['text':' Now cases where first argument is 0, where we return +0 or +inf,','line_number':949,'multiline':False]['text':' or -0 or -inf if the second argument is an odd integer.','line_number':950,'multiline':False]['text':' Return NaN for negative^noninteger','line_number':963,'multiline':False]['text':' Finally, we can assume all arguments are finite and nonzero.','line_number':973,'multiline':False]['text':' So launch into the naive computation. But because we can be','line_number':974,'multiline':False]['text':' more discriminating about integer status prior to conversion,','line_number':975,'multiline':False]['text':' separate out the sign and correct it later.','line_number':976,'multiline':False]['text':' Compute accurate logarithm (l_hi,l_lo)','line_number':978,'multiline':False]['text':' Get absolute value','line_number':992,'multiline':False]['text':' Unpack the number, but check canonicality or plain zero','line_number':997,'multiline':False]['text':' and return -inf in that case.','line_number':998,'multiline':False]['text':' Start out our result as e * log(10) + k * log(2)','line_number':1007,'multiline':False]['text':' Note that k is always positive, but e may have either sign','line_number':1008,'multiline':False]['text':' Pick out toplevel bitfield and find its approximate reciprocal','line_number':1020,'multiline':False]['text':' After this multiplication the result (considered as a fraction)','line_number':1021,'multiline':False]['text':' is 1/2 * (1 - e) where 0 <= e <= 2^-7','line_number':1022,'multiline':False]['text':' Now the next stage in this bipartite arrangment.','line_number':1029,'multiline':False]['text':' After this the result (considered as a fraction) is','line_number':1030,'multiline':False]['text':' 1/4 * (1 - e) where 0 <= e < 2^-12 (maybe 2^-13, I should check)','line_number':1031,'multiline':False]['text':' Complement and shift back by 2 bits to get a proper binary fraction','line_number':1038,'multiline':False]['text':' Now compute the power series','line_number':1043,'multiline':False]['text':' Should use Remez and maybe something shorter?','line_number':1044,'multiline':False]['text':' Now shift it right by 32 bits and add to rest','line_number':1086,'multiline':False]['text':' Figure out sign and negate as needed (actually complement, which','line_number':1091,'multiline':False]['text':' only makes a difference of 2^-192).','line_number':1092,'multiline':False]['text':' Now turn into decimal: the top two 64-bit words are the coefficient','line_number':1102,'multiline':False]['text':' of a number with exponent 10^-28','line_number':1103,'multiline':False]['text':' And the trailing part is for a number with exponent 10^-47','line_number':1107,'multiline':False]['text':' (which is nowhere near normalized, btw, as this is just one word).','line_number':1108,'multiline':False]['text':' We need about 127 bits of accuracy in this logarithm, and we have','line_number':1112,'multiline':False]['text':' about 158 bits of fraction (being pessimistic). So if the 31 leading','line_number':1113,'multiline':False]['text':' bits of the fraction (and the integer part) are all zero, we ought','line_number':1114,'multiline':False]['text':' to do something different, simply returning t=|x|-1 in the high part and','line_number':1115,'multiline':False]['text':' the next three terms of the Taylor series otherwise.','line_number':1116,'multiline':False]['text':' (i.e. -t^2/2 + t^3/3 - t^4/4). Again, it'd be better to use a Remez series','line_number':1117,'multiline':False]['text':' Otherwise just package up our results as decimal numbers.','line_number':1137,'multiline':False]['text':' Note that the sign "s_log" is needed in both of them.','line_number':1138,'multiline':False]['text':' Compute dominant exponential term','line_number':1153,'multiline':False]['text':' We really want exp(l + l_lo)','line_number':1154,'multiline':False]['text':' If this is zero or infinity, then stop now; do some flag settings','line_number':1158,'multiline':False]['text':' and make zero results have an exponent that communicates inexactness','line_number':1159,'multiline':False]['text':' Otherwise correct using l_lo','line_number':1174,'multiline':False]['text':' Finally, fix up the sign','line_number':1178,'multiline':False]