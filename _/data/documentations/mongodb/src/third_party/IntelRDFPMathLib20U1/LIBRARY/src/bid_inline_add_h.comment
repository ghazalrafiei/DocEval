['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors 
      may be used to endorse or promote products derived from this software 
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':'****************************************************************************
 *
 *    Helper add functions (for fma)
 *
 *    __BID_INLINE__ BID_UINT64 bid_get_add64(
 *        BID_UINT64 sign_x, int exponent_x, BID_UINT64 coefficient_x, 
 *        BID_UINT64 sign_y, int exponent_y, BID_UINT64 coefficient_y, 
 *  					 int rounding_mode)
 *
 *   __BID_INLINE__ BID_UINT64 bid_get_add128(
 *                       BID_UINT64 sign_x, int exponent_x, BID_UINT64 coefficient_x, 
 *                       BID_UINT64 sign_y, int final_exponent_y, BID_UINT128 CY, 
 *                       int extra_digits, int rounding_mode)
 *
 *****************************************************************************
 *
 *  Algorithm description:
 *
 *  bid_get_add64:  same as BID64 add, but arguments are unpacked and there 
 *                                 are no special case checks
 *
 *  bid_get_add128: add 64-bit coefficient to 128-bit product (which contains 
 *                                        16+extra_digits decimal digits), 
 *                         return BID64 result
 *              - the exponents are compared and the two coefficients are 
 *                properly aligned for addition/subtraction
 *              - multiple paths are needed
 *              - final result exponent is calculated and the lower term is
 *                      rounded first if necessary, to avoid manipulating 
 *                      coefficients longer than 128 bits 
 *
 ***************************************************************************','line_number':30,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' bid_get_add64() is essentially the same as bid_add(), except that ','line_number':76,'multiline':False]['text':'             the arguments are unpacked','line_number':77,'multiline':False]['text':'','line_number':78,'multiline':False]['text':'////////////////////////////////////////////////////////////////////','line_number':79,'multiline':False]['text':' sort arguments by exponent','line_number':94,'multiline':False]['text':' exponent difference','line_number':111,'multiline':False]['text':' get binary coefficients of x and y ','line_number':114,'multiline':True]['text':'--- get number of bits in the coefficients of x and y ---','line_number':116,'multiline':False]['text':' normalize a to a 16-digit coefficient','line_number':126,'multiline':False]['text':' get binary coefficients of x and y ','line_number':139,'multiline':True]['text':'--- get number of bits in the coefficients of x and y ---','line_number':141,'multiline':False]['text':' not BID_ROUNDING_TO_NEAREST','line_number':154,'multiline':False]['text':' RZ','line_number':181,'multiline':False]['text':' check special case here','line_number':194,'multiline':False]['text':' test whether coefficient_a*10^(exponent_a-exponent_b)  may exceed 2^62','line_number':207,'multiline':False]['text':' coefficient_a*10^(exponent_a-exponent_b)<2^63','line_number':209,'multiline':False]['text':' multiply by 10^(exponent_a-exponent_b)','line_number':211,'multiline':False]['text':' sign mask','line_number':214,'multiline':False]['text':' apply sign to coeff. of b','line_number':216,'multiline':False]['text':' apply sign to coefficient a','line_number':219,'multiline':False]['text':' get sign','line_number':224,'multiline':False]['text':' coefficient_a < 10^16 ?','line_number':229,'multiline':False]['text':' otherwise rounding is necessary','line_number':241,'multiline':False]['text':' already know coefficient_a<10^19','line_number':243,'multiline':False]['text':' coefficient_a < 10^17 ?','line_number':244,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':265,'multiline':False]['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':269,'multiline':False]['text':' coefficient_a*10^(exponent_a-exponent_b) is large','line_number':274,'multiline':False]['text':' check whether we can take faster path','line_number':289,'multiline':False]['text':' T1 = 10^(16-diff_dec_expon)','line_number':295,'multiline':False]['text':' get number of digits in coefficient_a','line_number':298,'multiline':False]['text':'P_ca = bid_power10_table_128[scale_ca].w[0];','line_number':299,'multiline':False]['text':'P_ca_m1 = bid_power10_table_128[scale_ca-1].w[0];','line_number':300,'multiline':False]['text':'P_ca_m1 = P_ca;','line_number':303,'multiline':False]['text':'P_ca = bid_power10_table_128[scale_ca].w[0];','line_number':304,'multiline':False]['text':' apply sign','line_number':309,'multiline':False]['text':'Ts = (T1 + sign_ab) ^ sign_ab;','line_number':310,'multiline':False]['text':' test range of ca','line_number':312,'multiline':False]['text':'X = coefficient_a + Ts - P_ca_m1;','line_number':313,'multiline':False]['text':' addition','line_number':315,'multiline':False]['text':' apply sign','line_number':321,'multiline':False]['text':' add 10^16 and rounding constant','line_number':323,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':328,'multiline':False]['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':332,'multiline':False]['text':' result coefficient ','line_number':336,'multiline':False]['text':' filter out difficult (corner) cases','line_number':338,'multiline':False]['text':' the following test is equivalent to ','line_number':339,'multiline':False]['text':' ( (initial_coefficient_a + Ts) < P_ca && ','line_number':340,'multiline':False]['text':'     (initial_coefficient_a + Ts) > P_ca_m1 ), ','line_number':341,'multiline':False]['text':' which ensures the number of digits in coefficient_a does not change ','line_number':342,'multiline':False]['text':' after adding (the appropriately scaled and rounded) coefficient_b','line_number':343,'multiline':False]['text':' result has more than 16 digits','line_number':347,'multiline':False]['text':' must divide coeff_a by 10','line_number':349,'multiline':False]['text':'reciprocals10_64[1]);','line_number':352,'multiline':False]['text':'90000000000000000 ','line_number':359,'multiline':True]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':372,'multiline':False]['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':376,'multiline':False]['text':' result coefficient ','line_number':380,'multiline':False]['text':' less than 16 digits in result','line_number':383,'multiline':False]['text':'extra_digits --;','line_number':387,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':393,'multiline':False]['text':' now get P/10^extra_digits: shift C64 right by M[extra_digits]-128','line_number':397,'multiline':False]['text':' result coefficient ','line_number':401,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':418,'multiline':False]['text':' check whether fractional part of initial_P/10^extra_digits ','line_number':421,'multiline':False]['text':' is exactly .5','line_number':422,'multiline':False]['text':' this is the same as fractional part of ','line_number':423,'multiline':False]['text':'      (initial_P + 0.5*10^extra_digits)/10^extra_digits is exactly zero','line_number':424,'multiline':False]['text':' get remainder','line_number':426,'multiline':False]['text':' test whether fractional part is 0','line_number':429,'multiline':False]['text':' get remainder','line_number':439,'multiline':False]['text':' test whether fractional part is 0','line_number':445,'multiline':False]['text':' round up','line_number':456,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':473,'multiline':False]['text':' round 128-bit coefficient and return result in BID64 format','line_number':474,'multiline':False]['text':' do not worry about midpoint cases','line_number':475,'multiline':False]['text':'////////////////////////////////////////////////////////////////','line_number':476,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':494,'multiline':False]['text':' now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128','line_number':498,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':513,'multiline':False]['text':' round 128-bit coefficient and return result in BID64 format','line_number':514,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':515,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':558,'multiline':False]['text':' now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128','line_number':562,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':570,'multiline':False]['text':' check whether fractional part of initial_P/10^extra_digits ','line_number':573,'multiline':False]['text':' is exactly .5','line_number':574,'multiline':False]['text':' get remainder','line_number':576,'multiline':False]['text':' get remainder','line_number':596,'multiline':False]['text':' test whether fractional part is 0','line_number':602,'multiline':False]['text':' round up','line_number':620,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////////','line_number':644,'multiline':False]['text':' round 192-bit coefficient (P, remainder_P) and return result in BID64 format','line_number':645,'multiline':False]['text':' the lowest 64 bits (remainder_P) are used for midpoint checking only','line_number':646,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':647,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':669,'multiline':False]['text':' now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128','line_number':673,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':681,'multiline':False]['text':' check whether fractional part of initial_P/10^extra_digits ','line_number':684,'multiline':False]['text':' is exactly .5','line_number':685,'multiline':False]['text':' get remainder','line_number':687,'multiline':False]['text':' get remainder','line_number':708,'multiline':False]['text':' test whether fractional part is 0','line_number':714,'multiline':False]['text':' round up','line_number':732,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':759,'multiline':False]['text':' get P/10^extra_digits','line_number':760,'multiline':False]['text':' result fits in 64 bits','line_number':761,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':762,'multiline':False]['text':' extra_digits <= 16','line_number':765,'multiline':False]['text':' get P*(2^M[extra_digits])/10^extra_digits','line_number':771,'multiline':False]['text':' now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128','line_number':775,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':785,'multiline':False]['text':' return number of decimal digits in 128-bit value X','line_number':786,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':787,'multiline':False]['text':'--- get number of bits in the coefficients of x and y ---','line_number':795,'multiline':False]['text':' get number of decimal digits in the coeff_x','line_number':798,'multiline':False]['text':' get number of decimal digits in the coeff_x','line_number':806,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':815,'multiline':False]['text':'','line_number':816,'multiline':False]['text':' add 64-bit coefficient to 128-bit coefficient, return result in BID64 format','line_number':817,'multiline':False]['text':'','line_number':818,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////','line_number':819,'multiline':False]['text':' CY has more than 16 decimal digits','line_number':831,'multiline':False]['text':' normalize x','line_number':843,'multiline':False]['text':'--- get number of bits in the coefficients of x and y ---','line_number':844,'multiline':False]['text':' get number of decimal digits in the coeff_x','line_number':847,'multiline':False]['text':' exponent_x > exponent_y','line_number':862,'multiline':False]['text':'&& (final_exponent_y>0) ','line_number':872,'multiline':True]['text':'&& (final_exponent_y>=0) ','line_number':891,'multiline':True]['text':' diff_dec2+extra_digits is the number of digits to eliminate from ','line_number':908,'multiline':False]['text':'                           argument CY','line_number':909,'multiline':False]['text':' here exponent_x <= 16+final_exponent_y','line_number':954,'multiline':False]['text':' truncate CY to 16 dec. digits','line_number':956,'multiline':False]['text':' get remainder','line_number':959,'multiline':False]['text':' align coeff_x, CYh','line_number':965,'multiline':False]['text':' Here (exponent_x <= exponent_y)','line_number':988,'multiline':False]['text':' apply sign to coeff_x','line_number':1018,'multiline':False]['text':' check whether CY (rounded to 16 digits) and CX have ','line_number':1024,'multiline':False]['text':'                     any digits in the same position','line_number':1025,'multiline':False]['text':' align CY to 10^ex','line_number':1029,'multiline':False]['text':' truncate CY to 16 dec. digits','line_number':1038,'multiline':False]['text':' get remainder','line_number':1041,'multiline':False]['text':' add rounding constant','line_number':1046,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':1052,'multiline':False]['text':' align coefficient_y,  coefficient_x','line_number':1058,'multiline':False]['text':' fraction','line_number':1062,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':1067,'multiline':False]['text':' rounding code, here RN_EVEN','line_number':1070,'multiline':False]['text':' 10^(extra_digits+diff_dec_expon)','line_number':1071,'multiline':False]['text':'BID_ROUNDING_TO_NEAREST','line_number':1082,'multiline':False]['text':' rounding code, here RN_AWAY','line_number':1085,'multiline':False]['text':' 10^(extra_digits+diff_dec_expon)','line_number':1086,'multiline':False]['text':' RN modes','line_number':1138,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////','line_number':1162,'multiline':False]['text':'','line_number':1163,'multiline':False]['text':'  If coefficient_z is less than 16 digits long, normalize to 16 digits','line_number':1164,'multiline':False]['text':'','line_number':1165,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////','line_number':1166,'multiline':False]['text':'--- get number of bits in the coefficients of x and y ---','line_number':1186,'multiline':False]['text':' get number of decimal digits in the coeff_x','line_number':1189,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////','line_number':1242,'multiline':False]['text':'','line_number':1243,'multiline':False]['text':'    0*10^ey + cz*10^ez,   ey<ez  ','line_number':1244,'multiline':False]['text':'','line_number':1245,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////','line_number':1246,'multiline':False]