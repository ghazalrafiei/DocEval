['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' Extra macros','line_number':32,'multiline':False]['text':' Values of (10^a / 2 pi) mod 1 for -17 <= a <= 369','line_number':62,'multiline':False]['text':' Each one is a 192-bit binary fraction','line_number':63,'multiline':False]['text':' 0.0','line_number':455,'multiline':False]['text':' pi/2','line_number':456,'multiline':False]['text':' pi/2','line_number':458,'multiline':False]['text':' pi','line_number':459,'multiline':False]['text':' 1.0','line_number':460,'multiline':False]['text':' 0.5','line_number':461,'multiline':False]['text':' 8000','line_number':462,'multiline':False]['text':' 1e2000','line_number':463,'multiline':False]['text':'-8000','line_number':464,'multiline':False]['text':' 1e-2000','line_number':465,'multiline':False]['text':' 12000','line_number':466,'multiline':False]['text':' -12000','line_number':467,'multiline':False]['text':' 1/ln(2)','line_number':468,'multiline':False]['text':' ln(10)','line_number':469,'multiline':False]['text':' ln(pi)','line_number':470,'multiline':False]['text':' 385.','line_number':471,'multiline':False]['text':' -398','line_number':472,'multiline':False]['text':' .9','line_number':473,'multiline':False]['text':' 0.0','line_number':474,'multiline':False]['text':' 2.0','line_number':475,'multiline':False]['text':' Local variables.','line_number':481,'multiline':False]['text':' Decompose the input and check for NaN and infinity.','line_number':493,'multiline':False]['text':' input is infinite, so return NaN','line_number':499,'multiline':False]['text':' input is NaN, so quiet/canonize it etc.','line_number':507,'multiline':False]['text':' "large coefficient" input','line_number':519,'multiline':False]['text':' "small coefficient" input','line_number':526,'multiline':False]['text':' Make sure we treat zero even with huge exponent as small','line_number':531,'multiline':False]['text':' If the input is trivially <= 1/10, just do the naive computation','line_number':535,'multiline':False]['text':' since no range reduction is needed and the function is well-conditioned','line_number':536,'multiline':False]['text':' Pick out the appropriate modulus for the exponent and multiply by coeff','line_number':545,'multiline':False]['text':' Since we discard the top word p.w[3], we could specially optimize this.','line_number':546,'multiline':False]['text':' Shift up by two bits to give an integer part k and a fraction','line_number':551,'multiline':False]['text':' modulo (pi/2). Note that we have to do this afterwards rather than','line_number':552,'multiline':False]['text':' use modulo (pi/2) reduction at the start to keep integer parities.','line_number':553,'multiline':False]['text':' If the fraction is >= 1/2, add 1 to integer and complement the fraction','line_number':558,'multiline':False]['text':' with an appropriate sign change so we have a "rounded to nearest" version','line_number':559,'multiline':False]['text':' (Complementing is slightly different from negation but it's negligible.)','line_number':560,'multiline':False]['text':' Set "sf" to the correct sign for the fraction','line_number':561,'multiline':False]['text':' Also correct k to take into account the sign','line_number':574,'multiline':False]['text':' Normalize the binary fraction with exponent ef','line_number':578,'multiline':False]['text':' This probably can't happen but I'm not quite sure','line_number':580,'multiline':False]['text':' Now package it as a double-extended number.','line_number':591,'multiline':False]['text':' Multiply by pi/2 so we can use regular binary trig functions.','line_number':598,'multiline':False]['text':' Now use the trig function depending on k:','line_number':602,'multiline':False]