['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' Alignment macros for 16-byte floating point types _Quad and _Decimal128. ','line_number':41,'multiline':True]['text':'
** Types:
**
** Define the basic data types that are used by the unpacked x_float routines
** as well as macros to access their fields and define specific values
','line_number':52,'multiline':True]['text':'****************************************************************************','line_number':153,'multiline':True]['text':'****************************************************************************','line_number':154,'multiline':True]['text':'*                                                                          *','line_number':155,'multiline':True]['text':'*                 Name Macros                                              *','line_number':156,'multiline':True]['text':'*                                                                          *','line_number':157,'multiline':True]['text':'****************************************************************************','line_number':158,'multiline':True]['text':'****************************************************************************','line_number':159,'multiline':True]['text':' 
** Following macros are defined to modify the interface of X_FLOAT routines
** for different architectures variants at compile time.  The macros are
** defined as returnType_Arg1Arg2_PROTO. For example X_X_PROTO defines a 
** function which takes X_FLOAT argument and result is X_FLOAT argument. 
**
** X_FLOAT_RES_OR_VOID defines what functions is returning. It can be void,
** X_FLOAT or X_FLOAT *. 
** 
** X_FLOAT_RET_TYPE(x) defines the return type when result is part of the 
** argument list i.e a pointer is provided in the argument list to 
** put the result. It can be Nothing or X_FLOAT *x.    
** 
** X_FLOAT_ARG_TYPE(x) defines  the argument type. It can be X_FLOAT *x, or
** X_FLOAT x. 
** 
** X_FLOAT_INT_TYPE defines the integer type in the argument list. This should
** be int in case of intel compilers. 
**  
** RETURN_X_FLOAT(x) defines the return statement of the function. It can be
** be Nothing, return *x or return x
','line_number':161,'multiline':True]['text':'#   define PASS_ARG_X_FLOAT(x)         &x','line_number':191,'multiline':False]['text':'****************************************************************************','line_number':274,'multiline':True]['text':'****************************************************************************','line_number':275,'multiline':True]['text':'*                                                                          *','line_number':276,'multiline':True]['text':'*                 Packed and Unpacked Constant Tables                      *','line_number':277,'multiline':True]['text':'*                                                                          *','line_number':278,'multiline':True]['text':'****************************************************************************','line_number':279,'multiline':True]['text':'****************************************************************************','line_number':280,'multiline':True]['text':'****************************************************************************','line_number':298,'multiline':True]['text':'****************************************************************************','line_number':299,'multiline':True]['text':'*                                                                          *','line_number':300,'multiline':True]['text':'*                      Pack and Unpacked Routines                          *','line_number':301,'multiline':True]['text':'*                                                                          *','line_number':302,'multiline':True]['text':'****************************************************************************','line_number':303,'multiline':True]['text':'****************************************************************************','line_number':304,'multiline':True]['text':'
** There's a slight complication here because the interface to these routines
** depend on the interface to the exception handler.  Specifically, if we
** need to pass the original arguments and/or the name of the function to the
** exception handler, that information must be passed to pack and unpack.
','line_number':306,'multiline':True]['text':' packed   argument 1 ','line_number':350,'multiline':True]['text':' packed   argument 2 ','line_number':351,'multiline':True]['text':' unpacked argument   ','line_number':352,'multiline':True]['text':' class-to-action map ','line_number':353,'multiline':True]['text':' packed   result ','line_number':354,'multiline':True]['text':' packed   argument 1 ','line_number':359,'multiline':True]['text':' packed   argument 2 ','line_number':360,'multiline':True]['text':' unpacked argument 1 ','line_number':361,'multiline':True]['text':' unpacked argument 2 ','line_number':362,'multiline':True]['text':' class-to-action map ','line_number':363,'multiline':True]['text':' packed   result ','line_number':364,'multiline':True]['text':' unpacked result ','line_number':370,'multiline':True]['text':' packed   result ','line_number':371,'multiline':True]['text':' underflow code  ','line_number':372,'multiline':True]['text':' overflow  code  ','line_number':373,'multiline':True]['text':'
** Include the class-to-action-mapping definitions here, since they are used
** primarily by the unpack routines.
','line_number':377,'multiline':True]['text':'****************************************************************************','line_number':409,'multiline':True]['text':'****************************************************************************','line_number':410,'multiline':True]['text':'*                                                                          *','line_number':411,'multiline':True]['text':'*                        Rational Evaluation Routine                       *','line_number':412,'multiline':True]['text':'*                                                                          *','line_number':413,'multiline':True]['text':'****************************************************************************','line_number':414,'multiline':True]['text':'****************************************************************************','line_number':415,'multiline':True]['text':' Argument				','line_number':422,'multiline':True]['text':' Coefficient array			','line_number':423,'multiline':True]['text':' Number of coefficients		','line_number':424,'multiline':True]['text':' Evaluation flags			','line_number':425,'multiline':True]['text':' Result				','line_number':426,'multiline':True]['text':'****************************************************************************','line_number':457,'multiline':True]['text':'****************************************************************************','line_number':458,'multiline':True]['text':'*                                                                          *','line_number':459,'multiline':True]['text':'*                        Rational Evaluation Routine                       *','line_number':460,'multiline':True]['text':'*                                                                          *','line_number':461,'multiline':True]['text':'****************************************************************************','line_number':462,'multiline':True]['text':'****************************************************************************','line_number':463,'multiline':True]['text':' arg1			','line_number':470,'multiline':True]['text':' arg2			','line_number':471,'multiline':True]['text':' operation flags	','line_number':472,'multiline':True]['text':' result		','line_number':473,'multiline':True]['text':'
** The logic of the add/sub routine depends on theses symbols have
** these *SPECIFIC* values.  !!! DO NOT CHANGE THEM !!!
','line_number':476,'multiline':True]['text':'****************************************************************************','line_number':489,'multiline':True]['text':'****************************************************************************','line_number':490,'multiline':True]['text':'*                                                                          *','line_number':491,'multiline':True]['text':'*                        Round to Integer Routine                          *','line_number':492,'multiline':True]['text':'*                                                                          *','line_number':493,'multiline':True]['text':'****************************************************************************','line_number':494,'multiline':True]['text':'****************************************************************************','line_number':495,'multiline':True]['text':' return val is integer part as int	','line_number':501,'multiline':True]['text':' argument				','line_number':502,'multiline':True]['text':' rounding mode bit vector		','line_number':503,'multiline':True]['text':' Integer part as float, ignored if 0	','line_number':504,'multiline':True]['text':' fraction part, ignored if 0		','line_number':505,'multiline':True]['text':' 0000 0000 0000 0000 ','line_number':507,'multiline':True]['text':' 0000 0000 1111 1010 ','line_number':508,'multiline':True]['text':' 1111 1010 0000 0000 ','line_number':509,'multiline':True]['text':' 1010 1000 1010 1000 ','line_number':510,'multiline':True]['text':' 1010 1010 1010 1010 ','line_number':511,'multiline':True]['text':'****************************************************************************','line_number':516,'multiline':True]['text':'****************************************************************************','line_number':517,'multiline':True]['text':'*                                                                          *','line_number':518,'multiline':True]['text':'*                        Normalization Routines                            *','line_number':519,'multiline':True]['text':'*                                                                          *','line_number':520,'multiline':True]['text':'****************************************************************************','line_number':521,'multiline':True]['text':'****************************************************************************','line_number':522,'multiline':True]['text':' returns shift count		','line_number':528,'multiline':True]['text':' source and destination	','line_number':529,'multiline':True]['text':' 'opcode'			','line_number':530,'multiline':True]['text':'****************************************************************************','line_number':540,'multiline':True]['text':'****************************************************************************','line_number':541,'multiline':True]['text':'*                                                                          *','line_number':542,'multiline':True]['text':'*                         Radian Trig Prototypes                           *','line_number':543,'multiline':True]['text':'*                                                                          *','line_number':544,'multiline':True]['text':'****************************************************************************','line_number':545,'multiline':True]['text':'****************************************************************************','line_number':546,'multiline':True]['text':' unpacked_argument	','line_number':553,'multiline':True]['text':' octant		','line_number':554,'multiline':True]['text':' function_code,	','line_number':555,'multiline':True]['text':' unpacked_result	','line_number':556,'multiline':True]['text':'****************************************************************************','line_number':581,'multiline':True]['text':'****************************************************************************','line_number':582,'multiline':True]['text':'*                                                                          *','line_number':583,'multiline':True]['text':'*                              Log Prototypes                              *','line_number':584,'multiline':True]['text':'*                                                                          *','line_number':585,'multiline':True]['text':'****************************************************************************','line_number':586,'multiline':True]['text':'****************************************************************************','line_number':587,'multiline':True]['text':' Argument				','line_number':594,'multiline':True]['text':' scale - LOG(x) = scale*log2(x)	','line_number':595,'multiline':True]['text':' Result				','line_number':596,'multiline':True]['text':' Argument				','line_number':606,'multiline':True]['text':' Result				','line_number':607,'multiline':True]['text':'****************************************************************************','line_number':609,'multiline':True]['text':'****************************************************************************','line_number':610,'multiline':True]['text':'*                                                                          *','line_number':611,'multiline':True]['text':'*                        Miscellaneous Prototypes                         *','line_number':612,'multiline':True]['text':'*                                                                          *','line_number':613,'multiline':True]['text':'****************************************************************************','line_number':614,'multiline':True]['text':'****************************************************************************','line_number':615,'multiline':True]['text':' argument	','line_number':622,'multiline':True]['text':' result	','line_number':623,'multiline':True]['text':' numerator - assume 1	if ptr is 0	','line_number':631,'multiline':True]['text':' denominator				','line_number':632,'multiline':True]['text':' result precision			','line_number':633,'multiline':True]['text':' result				','line_number':634,'multiline':True]['text':' arg1		','line_number':645,'multiline':True]['text':' arg1		','line_number':646,'multiline':True]['text':' result	','line_number':647,'multiline':True]['text':' arg1		','line_number':657,'multiline':True]['text':' arg1		','line_number':658,'multiline':True]['text':' hi result	','line_number':659,'multiline':True]['text':' lo result	','line_number':660,'multiline':True]['text':' Argument				','line_number':672,'multiline':True]['text':' evaluation type - sqrt or rsqrt	','line_number':673,'multiline':True]['text':' Result				','line_number':674,'multiline':True]['text':' Argument 1				','line_number':684,'multiline':True]['text':' Argument 2				','line_number':685,'multiline':True]['text':' Result				','line_number':686,'multiline':True]['text':'****************************************************************************','line_number':689,'multiline':True]['text':'****************************************************************************','line_number':690,'multiline':True]['text':'*                                                                          *','line_number':691,'multiline':True]['text':'*                        Miscellaneous Definitions                         *','line_number':692,'multiline':True]['text':'*                                                                          *','line_number':693,'multiline':True]['text':'****************************************************************************','line_number':694,'multiline':True]['text':'****************************************************************************','line_number':695,'multiline':True]['text':'****************************************************************************','line_number':714,'multiline':True]['text':'****************************************************************************','line_number':715,'multiline':True]['text':'*                                                                          *','line_number':716,'multiline':True]['text':'*             MPHOC Macros for Class-to-Action Table Definitions           *','line_number':717,'multiline':True]['text':'*                                                                          *','line_number':718,'multiline':True]['text':'****************************************************************************','line_number':719,'multiline':True]['text':'****************************************************************************','line_number':720,'multiline':True]['text':'
    ** The following routine prints out coefficients in the array
    **  'ux_rational_coefs' in fixed point format.
    ','line_number':838,'multiline':True]['text':'
    ** This routine finds the "width" and "bias" for converting MP numbers 
    ** to a special 128 bit packed format used for special polynomial
    ** evaluations. The coefficients are contained in the global array
    ** ux_rational_coef and the both the width and the bias are returned
    ** via global values.  See the description in dpml_ux_ops.c
    ','line_number':880,'multiline':True]['text':'
    ** After we know the bias and the width, we need to pack the coefficient
    ** values
    ','line_number':914,'multiline':True]['text':'
    ** After converting to pack format, we need to print them out
    ','line_number':945,'multiline':True]