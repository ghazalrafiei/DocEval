['text':'*****************************************************************************
  Copyright (c) 2007-2011, Intel Corp.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************','line_number':1,'multiline':True]['text':' Define a macro that selects the appropriate polynomial form by adding a
suffix (an '_' should already be at the end of SELECT_POLY's parameter). ','line_number':35,'multiline':True]['text':' Basic polynomial macros (eventually these should be used to build
the other forms in this file ','line_number':46,'multiline':True]['text':' Ordinary poly macros (with a constant term) ','line_number':79,'multiline':True]['text':' y = a ','line_number':82,'multiline':True]['text':' y = a(x) + b ','line_number':88,'multiline':True]['text':' y = a(x)^2 + b(x) + c ','line_number':95,'multiline':True]['text':' y = a(x)^3 + b(x)^2 + c(x) + d ','line_number':103,'multiline':True]['text':' Ordinary poly macros (without a constant term) ','line_number':699,'multiline':True]['text':' y = a(x) ','line_number':702,'multiline':True]['text':' y = a(x)^2 + b(x) ','line_number':709,'multiline':True]['text':' y = a(x)^3 + b(x)^2 + c(x) ','line_number':716,'multiline':True]['text':' Ordinary poly macros without linear or constant terms ','line_number':860,'multiline':True]['text':' the polys below need multiple issue polynomials put together for them ','line_number':872,'multiline':True]['text':' Poly macros with no linear, constant or square term ','line_number':900,'multiline':True]['text':' labeling for these macros starts at p[1] instead of p[0] ','line_number':959,'multiline':True]['text':' Poly macros with linear and constant terms, maximum parallelization ','line_number':1017,'multiline':True]['text':' Maximum parallelization, not forcing an alignment shift ','line_number':1069,'multiline':True]['text':' y = ax + b ','line_number':1071,'multiline':True]['text':' y = a*(x^2) + (bx + c)  ','line_number':1075,'multiline':True]['text':' y = x^2(ax + b) + (cx + d)    ','line_number':1080,'multiline':True]['text':' y = x^3(ax + b) + (x^2*c + (dx + e))   ','line_number':1085,'multiline':True]['text':' y = ((x^4)(ax + b) + (x^2)(cx + d)) + (ex + f) ','line_number':1091,'multiline':True]['text':' y = (x^4)(a(x^2) + bx) + (x^2(c(x^2) + dx) + (e(x^2) + fx + g)) ','line_number':1098,'multiline':True]['text':' note: this version of POLY_13_ALL is not the most parallelized, but
   it is necessary to reduce roundoff error in double precision asin/acos.
   The terms are added in pairs, smallest first, e.g.
      (ax + b) + ((((cx + d)x^2 + (ex + f)x^4) + (gx + h)x^6) + ..
 ','line_number':1155,'multiline':True]['text':'
#define POLY_13_ALL_M(x,p,y) \
        (y) = \
((( (p)[1]*(x)) + (p)[0]) + \
(((( (p)[3]*(x)) + (p)[2]) * ((x)*(x))) + ((( (p)[5]*(x)) + (p)[4]) * ( ((x)*(x))* ((x)*(x)))))) + \
((((( (p)[7]*(x)) + (p)[6]) * ( ((x)*(x))*( ((x)*(x))* ((x)*(x))))) + ((( (p)[9]*(x)) + (p)[8]) * (( ((x)*(x))* ((x)*(x))) * ( ((x)*(x))* ((x)*(x)))))) + \
(((( (p)[11]*(x)) + (p)[10]) * ( ((x)*(x))*( ((x)*(x))* ((x)*(x))) * ( ((x)*(x))* ((x)*(x))))) + \
((( (p)[13]*(x)) + (p)[12]) * (( ((x)*(x))*( ((x)*(x))* ((x)*(x)))) * ( ((x)*(x))*( ((x)*(x))* ((x)*(x))))))))
','line_number':1170,'multiline':True]['text':' The macros below should allow maximum parallelization ','line_number':1186,'multiline':True]['text':' y  =  a(x)^2  ','line_number':1189,'multiline':True]['text':' y  =  a(x)^2 + b(x)^3  =  (x)^2 * (a + b(x))  ','line_number':1195,'multiline':True]['text':' y  =  a(x)^2 + b(x)^3 + c(x)^4
          =  [ (x)^2 * (a + b(x)) ]  + c(x)^4  ','line_number':1201,'multiline':True]['text':' y  =  a(x)^2 + b(x)^3 + c(x)^4 + d(x)^5
          =  [ (x)^2 * (a + b(x)) ]  +  [ (x)^4 * (c + d(x))  ]  ','line_number':1209,'multiline':True]['text':' y  =  a(x)^2 + b(x)^3 + c(x)^4 + d(x)^5 + e(x)^6
          =  a(x)^2 + ( [ (x)^2 * (b(x) + c(x)^2) ]
		            +   [ (x)^4 * (d(x) + e(x)^2) ] )  ','line_number':1217,'multiline':True]['text':' y  =  a(x)^2 + b(x)^3 + c(x)^4 + d(x)^5 + e(x)^6 + f(x)^7
		  =  (x)^2 * (a + b(x)) +
			 [ ((x)^2 * (x)^2 * (c + d(x))) +
			   ((x)^2 * (x)^2 * (x)^2 * (e + f(x))) ]
    ','line_number':1226,'multiline':True]['text':' The macros below should enforce Horner's scheme ','line_number':1251,'multiline':True]['text':' y = a(x)^2 ','line_number':1254,'multiline':True]['text':' y = a(x)^3 + b(x)^2 ','line_number':1261,'multiline':True]['text':' Poly macros with no constant, linear or square term ','line_number':1339,'multiline':True]['text':' labeling for these macros starts at p[1] instead of p[0] ','line_number':1340,'multiline':True]['text':' Ordinary poly macros with no constant term and unity low-order coef ','line_number':1719,'multiline':True]['text':' y = 1(x) ','line_number':1722,'multiline':True]['text':' y = a(x)^2 + 1(x) ','line_number':1728,'multiline':True]['text':' y = a(x)^3 + b(x)^2 + 1(x) ','line_number':1736,'multiline':True]['text':' Odd poly macros with no constant term ','line_number':1783,'multiline':True]['text':' y = a(x) ','line_number':1786,'multiline':True]['text':' y = a(x)^3 + b(x) ','line_number':1793,'multiline':True]['text':' y = a(x)^5 + b(x)^3 + c(x) ','line_number':1801,'multiline':True]['text':' y = a(x)^7 + b(x)^5 + c(x)^3 + d(x) ','line_number':1809,'multiline':True]['text':' Odd poly macros without linear or constant terms ','line_number':1855,'multiline':True]['text':' y = a(x)^3 ','line_number':1858,'multiline':True]['text':' y = a(x)^5 + b(x)^3  ','line_number':1866,'multiline':True]['text':' y = a(x)^7 + b(x)^5 + c(x)^3 ','line_number':1874,'multiline':True]['text':' Odd poly macros with no constant term and unity low-order coef ','line_number':1944,'multiline':True]['text':' y = 1(x) ','line_number':1947,'multiline':True]['text':' y = a(x)^3 + 1(x) ','line_number':1953,'multiline':True]['text':' y = a(x)^5 + b(x)^3 + 1(x) ','line_number':1962,'multiline':True]['text':' y = a(x)^7 + b(x)^5 + c(x)^3 + 1(x) ','line_number':1971,'multiline':True]['text':' POLY_MACROS_H ','line_number':2149,'multiline':True]