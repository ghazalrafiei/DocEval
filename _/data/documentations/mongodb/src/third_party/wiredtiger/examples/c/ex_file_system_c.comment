['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * ex_file_system.c
 * 	demonstrates how to use the custom file system interface
 ','line_number':1,'multiline':True]['text':'
 * This example code uses pthread functions for portable locking, we ignore errors for simplicity.
 ','line_number':33,'multiline':True]['text':'
 * Example file system implementation, using memory buffers to represent files.
 ','line_number':60,'multiline':True]['text':'
     * WiredTiger performs schema and I/O operations in parallel, all file system and file handle
     * access must be thread-safe. This example uses a single, global file system lock for
     * simplicity; real applications might require finer granularity, for example, a single lock for
     * the file system handle list and per-handle locks serializing I/O.
     ','line_number':66,'multiline':True]['text':' Lock ','line_number':72,'multiline':True]['text':' Queue of file handles ','line_number':80,'multiline':True]['text':' Extension functions ','line_number':83,'multiline':True]['text':'
     * Add custom file handle fields after the interface.
     ','line_number':90,'multiline':True]['text':' Enclosing file system ','line_number':93,'multiline':True]['text':' Queue of handles ','line_number':95,'multiline':True]['text':' Reference count ','line_number':96,'multiline':True]['text':' In-memory contents ','line_number':98,'multiline':True]['text':' In-memory buffer size ','line_number':99,'multiline':True]['text':' Read/write data size ','line_number':101,'multiline':True]['text':'
 * Extension initialization function.
 ','line_number':104,'multiline':True]['text':'
 * Explicitly export this function so it is visible when loading extensions.
 ','line_number':108,'multiline':True]['text':'
 * Forward function declarations for file system API implementation
 ','line_number':115,'multiline':True]['text':'
 * Forward function declarations for file handle API implementation
 ','line_number':129,'multiline':True]['text':'
 * Forward function declarations for internal functions
 ','line_number':140,'multiline':True]['text':'
 * string_match --
 *     Return if a string matches a byte string of len bytes.
 ','line_number':148,'multiline':True]['text':'
 * demo_file_system_create --
 *     Initialization point for demo file system
 ','line_number':158,'multiline':True]['text':'
     * Applications may have their own configuration information to pass to the underlying
     * filesystem implementation. See the main function for the setup of those configuration
     * strings; here we parse configuration information as passed in by main, through WiredTiger.
     ','line_number':182,'multiline':True]['text':' Step through our configuration values. ','line_number':193,'multiline':True]['text':' Check for expected parser termination and close the parser. ','line_number':218,'multiline':True]['text':'! [WT_FILE_SYSTEM create] ','line_number':231,'multiline':True]['text':' Initialize the in-memory jump table. ','line_number':232,'multiline':True]['text':'! [WT_FILE_SYSTEM create] ','line_number':247,'multiline':True]['text':' An error installing the file system is fatal. ','line_number':252,'multiline':True]['text':'
 * demo_fs_open --
 *     fopen for our demo file system
 ','line_number':256,'multiline':True]['text':' Unused ','line_number':270,'multiline':True]['text':' Unused ','line_number':271,'multiline':True]['text':'
     * First search the file queue, if we find it, assert there's only a single reference, we only
     * support a single handle on any file.
     ','line_number':282,'multiline':True]['text':' The file hasn't been opened before, create a new one. ','line_number':302,'multiline':True]['text':' Initialize private information. ','line_number':308,'multiline':True]['text':' Initialize public information. ','line_number':318,'multiline':True]['text':'! [WT_FILE_HANDLE create] ','line_number':324,'multiline':True]['text':'
     * Setup the function call table for our custom file system. Set the function pointer to NULL
     * where our implementation doesn't support the functionality.
     ','line_number':325,'multiline':True]['text':'! [WT_FILE_HANDLE create] ','line_number':349,'multiline':True]['text':'
 * demo_fs_directory_list --
 *     Return a list of files in a given sub-directory.
 ','line_number':361,'multiline':True]['text':' Unused ','line_number':377,'multiline':True]['text':'
         * Increase the list size in groups of 10, it doesn't matter if the list is a bit longer
         * than necessary.
         ','line_number':396,'multiline':True]['text':'
 * demo_fs_directory_list_free --
 *     Free memory allocated by demo_fs_directory_list.
 ','line_number':431,'multiline':True]['text':'
 * demo_fs_exist --
 *     Return if the file exists.
 ','line_number':450,'multiline':True]['text':' Unused ','line_number':459,'multiline':True]['text':'
 * demo_fs_remove --
 *     POSIX remove.
 ','line_number':470,'multiline':True]['text':' Unused ','line_number':481,'multiline':True]['text':' Unused ','line_number':482,'multiline':True]['text':'
 * demo_fs_rename --
 *     POSIX rename.
 ','line_number':495,'multiline':True]['text':' Unused ','line_number':508,'multiline':True]['text':' Unused ','line_number':509,'multiline':True]['text':'
 * demo_fs_size --
 *     Get the size of a file in bytes, by file name.
 ','line_number':526,'multiline':True]['text':'
 * demo_fs_terminate --
 *     Discard any resources on termination
 ','line_number':551,'multiline':True]['text':'
 * demo_file_close --
 *     ANSI C close.
 ','line_number':580,'multiline':True]['text':' Unused ','line_number':590,'multiline':True]['text':'
 * demo_file_lock --
 *     Lock/unlock a file.
 ','line_number':603,'multiline':True]['text':' Locks are always granted. ','line_number':610,'multiline':True]['text':' Unused ','line_number':611,'multiline':True]['text':' Unused ','line_number':612,'multiline':True]['text':' Unused ','line_number':613,'multiline':True]['text':'
 * demo_file_read --
 *     POSIX pread.
 ','line_number':617,'multiline':True]['text':' EOF ','line_number':643,'multiline':True]['text':'
 * demo_file_size --
 *     Get the size of a file in bytes, by file handle.
 ','line_number':654,'multiline':True]['text':' Unused ','line_number':664,'multiline':True]['text':'
 * demo_file_sync --
 *     Ensure the content of the file is stable. This is a no-op in our memory backed file system.
 ','line_number':675,'multiline':True]['text':' Unused ','line_number':682,'multiline':True]['text':' Unused ','line_number':683,'multiline':True]['text':'
 * demo_buffer_resize --
 *     Resize the write buffer.
 ','line_number':688,'multiline':True]['text':' Grow the buffer as necessary and clear any new space in the file. ','line_number':704,'multiline':True]['text':'
 * demo_file_truncate --
 *     POSIX ftruncate.
 ','line_number':720,'multiline':True]['text':'
 * demo_file_write --
 *     POSIX pwrite.
 ','line_number':741,'multiline':True]['text':'
 * demo_handle_remove --
 *     Destroy an in-memory file handle. Should only happen on remove or shutdown.
 ','line_number':778,'multiline':True]['text':' Clean up private information. ','line_number':799,'multiline':True]['text':' Clean up public information. ','line_number':802,'multiline':True]['text':'
 * demo_handle_search --
 *     Return a matching handle, if one exists.
 ','line_number':810,'multiline':True]['text':'
     * Create a clean test directory for this run of the test program if the environment variable
     * isn't already set (as is done by make check).
     ','line_number':841,'multiline':True]['text':'! [WT_FILE_SYSTEM register] ','line_number':851,'multiline':True]['text':'
     * Setup a configuration string that will load our custom file system. Use the special local
     * extension to indicate that the entry point is in the same executable. Also enable early load
     * for this extension, since WiredTiger needs to be able to find it before doing any file
     * operations. Finally, pass in two pieces of configuration information to our initialization
     * function as the "config" value.
     ','line_number':852,'multiline':True]['text':' Open a connection to the database, creating it if necessary. ','line_number':862,'multiline':True]['text':'! [WT_FILE_SYSTEM register] ','line_number':868,'multiline':True]