['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * ex_col_store.c
 *	This is an example application that demonstrates column-store operations.
 ','line_number':1,'multiline':True]['text':'! [col-store decl] ','line_number':42,'multiline':True]['text':'! [col-store decl] ','line_number':56,'multiline':True]['text':'! [col-store temperature] ','line_number':121,'multiline':True]['text':'
         * Update the value from celsius to fahrenheit. Discarding decimals and keeping data simple
         * by type casting to uint8_t.
         ','line_number':126,'multiline':True]['text':'! [col-store temperature] ','line_number':137,'multiline':True]['text':'
     * All Australian data is being removed, to test if deletion works.
     ','line_number':151,'multiline':True]['text':' 24-hour-time 0-2400. ','line_number':200,'multiline':True]['text':' Temperature range: 0-50C.  ','line_number':202,'multiline':True]['text':' Feels like temperature range 0-50C ','line_number':204,'multiline':True]['text':' Humidity range: 0-100%. ','line_number':206,'multiline':True]['text':' Pressure range: 900-1100pa ','line_number':208,'multiline':True]['text':' Wind range: 0-200 km/hr. ','line_number':210,'multiline':True]['text':' latitude: 0-180 degrees. ','line_number':212,'multiline':True]['text':' longitude: 0-90 degrees. ','line_number':214,'multiline':True]['text':'
 * find_min_and_max_temp --
 *     The function returns 0 when a valid min/max temperature can be calculated given the time
 *     range. If no records are found it will return WT_NOTFOUND, otherwise the program will crash
 *     if an internal error is encountered.
 ','line_number':248,'multiline':True]['text':'! [col-store join] ','line_number':265,'multiline':True]['text':' Open cursors needed by the join. ','line_number':267,'multiline':True]['text':'
     * Select values WHERE (hour >= start AND hour <= end). Find the starting record closest to
     * desired start time.
     ','line_number':274,'multiline':True]['text':' Find the ending record closest to desired end time. ','line_number':290,'multiline':True]['text':' Initialize minimum temperature and maximum temperature to temperature of the first record. ','line_number':303,'multiline':True]['text':' Iterating through found records between start and end time to find the min & max temps. ','line_number':315,'multiline':True]['text':'! [col-store join] ','line_number':323,'multiline':True]['text':'
     * If WT_NOTFOUND is hit at this point, it is because we have traversed through all temperature
     * records, hence we return 0 to the calling function to signal success. Otherwise an internal
     * error was hit.
     ','line_number':325,'multiline':True]['text':'
 * average_data --
 *     Obtains the average data across all fields given a specific location.
 ','line_number':336,'multiline':True]['text':' rec_arr holds the sum of the records in order to obtain the averages. ','line_number':346,'multiline':True]['text':' Open a cursor to search for the location. ','line_number':352,'multiline':True]['text':'
     *  Error handling in the case RUS is not found. In this case as it's a hardcoded location,
     *  if there aren't any matching locations, no average data is obtained and we proceed with the
     *  test instead of aborting. If an unexpected error occurs, exit.
     ','line_number':357,'multiline':True]['text':' Populate the array with the totals of each of the columns. ','line_number':367,'multiline':True]['text':' Increment the values of the rec_arr with the temp_arr values. ','line_number':380,'multiline':True]['text':' Get the average values by dividing with the total number of records. ','line_number':393,'multiline':True]['text':' List the average records ','line_number':397,'multiline':True]['text':'! [col-store main] ','line_number':408,'multiline':True]['text':' Establishing a connection. ','line_number':422,'multiline':True]['text':' Establishing a session. ','line_number':425,'multiline':True]['text':'! [col-store create columns] ','line_number':428,'multiline':True]['text':' Create a table with columns and colgroups. ','line_number':429,'multiline':True]['text':' Create the colgroups ','line_number':438,'multiline':True]['text':'! [col-store create columns] ','line_number':441,'multiline':True]['text':' Generating random data to populate the weather table. ','line_number':450,'multiline':True]['text':' Open a cursor on the table to insert the data. ','line_number':453,'multiline':True]['text':' Close cursor. ','line_number':462,'multiline':True]['text':' Prints all the data in the database. ','line_number':465,'multiline':True]['text':' Create indexes for searching ','line_number':468,'multiline':True]['text':'
     * Start and end points for time range for finding min/max temperature, in 24 hour format.
     * Example uses 10am - 8pm but can change the values for desired start and end times.
     ','line_number':472,'multiline':True]['text':' If the min/max temperature is not found due to some error, there is no result to print. ','line_number':483,'multiline':True]['text':' Update the temperature from Celsius to Fahrenheit. ','line_number':491,'multiline':True]['text':'
     * Start and end points for time range for finding min/max temperature, in 24 hour format.
     * Example uses 10am - 8pm but can change the values for desired start and end times.
     ','line_number':494,'multiline':True]['text':' If the min/max temperature is not found due to some error, there is no result to print. ','line_number':505,'multiline':True]['text':' Close the connection. ','line_number':523,'multiline':True]['text':'! [col-store main] ','line_number':528,'multiline':True]