['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * Capture cases where a single session handle is used by multiple threads in parallel. The check
 * isn't trivial because some API calls re-enter via public API entry points and the session with ID
 * 0 is the default session in the connection handle which can be used across multiple threads.
 ','line_number':10,'multiline':True]['text':'                                                                        \
         * Only a single thread should use this session at a time. It's ok        \
         * (but unexpected) if different threads use the session consecutively,   \
         * but concurrent access is not allowed. Verify this by having the thread \
         * take a lock on first API access. Failing to take the lock implies      \
         * another thread holds it and we're attempting concurrent access of the  \
         * session.                                                               \
         *                                                                        \
         * The default session (ID == 0) is an exception where concurrent access  \
         * is allowed. We can also skip taking the lock if we're re-entrant and   \
         * already hold it.                                                       \
         ','line_number':20,'multiline':True]['text':' If this isn't an API reentry, the name should be NULL and the counter should be 0. ','line_number':59,'multiline':True]['text':' Standard entry points to the API: declares/initializes local variables. ','line_number':70,'multiline':True]['text':'                                                                  \
     * No code before this line, otherwise error handling won't be      \
     * correct.                                                         \
     ','line_number':74,'multiline':True]['text':' Reset wait time if this isn't an API reentry. ','line_number':83,'multiline':True]['text':'                                                                                 \
         * We should not leave any history store cursor open when return from an api call. \
         * However, we cannot do a stricter check before WT-7247 is resolved.              \
         ','line_number':107,'multiline':True]['text':'                                                                                 \
         * No code after this line, otherwise error handling                               \
         * won't be correct.                                                               \
         ','line_number':112,'multiline':True]['text':' An API call wrapped in a transaction if necessary. ','line_number':121,'multiline':True]['text':' An API call wrapped in a transaction if necessary. ','line_number':133,'multiline':True]['text':' End a transactional API call, optional retry on rollback. ','line_number':145,'multiline':True]['text':' !!!! This is a while(1) loop. !!!! ','line_number':174,'multiline':True]['text':'
 * In almost all cases, API_END is returning immediately, make it simple. If a session or connection
 * method is about to return WT_NOTFOUND (some underlying object was not found), map it to ENOENT,
 * only cursor methods return WT_NOTFOUND.
 ','line_number':177,'multiline':True]['text':'
 * Used in cases where transaction error should not be set, but the error is returned from the API.
 * Success is passed to the API_END macro. If the method is about to return WT_NOTFOUND map it to
 * ENOENT.
 ','line_number':209,'multiline':True]['text':'
 * API_RETRYABLE and API_RETRYABLE_END are used to wrap API calls so that they are silently
 * retried on rollback errors. Generally, these only need to be used with readonly APIs, as
 * writable APIs have their own retry code via TXN_API_CALL.  These macros may be used with
 * *API_CALL and API_END* provided they are ordered in a balanced way.
 ','line_number':284,'multiline':True]['text':' !!!! This is a while(1) loop. !!!! ','line_number':298,'multiline':True]['text':'
 * Calling certain top level APIs allows for internal repositioning of cursors to facilitate
 * eviction of hot pages. These macros facilitate tracking when that is OK.
 ','line_number':358,'multiline':True]