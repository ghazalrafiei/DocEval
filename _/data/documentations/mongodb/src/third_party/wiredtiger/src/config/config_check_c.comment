['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_config_check --
 *     Check the keys in an application-supplied config string match what is specified in an array
 *     of check strings.
 ','line_number':14,'multiline':True]['text':'
     * Callers don't check, it's a fast call without a configuration or check array.
     ','line_number':23,'multiline':True]['text':'
 * __config_check_compare --
 *     Compare function used for binary search.
 ','line_number':32,'multiline':True]['text':'
 * __config_check_search --
 *     Search a set of checks for a matching name.
 ','line_number':54,'multiline':True]['text':'
     * For standard sets of configuration information, we know how many entries and that they're
     * sorted, do a binary search. Else, do it the slow way.
     ','line_number':65,'multiline':True]['text':'
         * The jump table generated at build time has an entry for each ASCII character,
         * showing the offset in a sorted list where that character first appears as the
         * first letter. If it doesn't appear it will be the next sorted entry.
         *
         * For example, given [ "ant", "cat", "deer", "dog", "giraffe" ], the jump table
         * for the ASCII set looks like:
         *   [ 0, 0, 0, ...., 0, 1, 1, 2, 4, 4, 4, 5, 5, 5, ....]
         *
         *   For position 'a', we have 0 (offset of "ant"),
         *   position 'b' is 1 (offset of "cat"),
         *   position 'c' is 1 (offset of "cat"),
         *   position 'd' is 2 (offset of "deer"),
         *   'e' and 'f' are 4 (offset of "giraffe"),
         *   'g' is 4 (offset of "giraffe"),
         *   'h' and beyond is 5 (not found).
         *
         * To set the bounds of a binary search of the table, we'll get the offset of the
         * first character in the string, and then the offset of its successor.
         * If the first character is one less than size of the jump table, e.g. 0x7F,
         * then we'll go past the end of the table. That character is ASCII delete,
         * which we know can't match anything in our configuration tables.
         ','line_number':78,'multiline':True]['text':'
 * __config_get_choice --
 *     Walk through list of legal choices looking for an item.
 ','line_number':116,'multiline':True]['text':'
 * __config_check --
 *     Check the keys in an application-supplied config string match what is specified in an array
 *     of check strings.
 ','line_number':135,'multiline':True]['text':'
     * The config_len parameter is optional, and allows passing in strings that are not
     * nul-terminated.
     ','line_number':151,'multiline':True]['text':' Search for a matching entry. ','line_number':164,'multiline':True]['text':' Deal with categories of the form: XXX=(XXX=blah). ','line_number':174,'multiline':True]['text':' If the checks string is empty, there are no additional checks we need to make. ','line_number':199,'multiline':True]['text':' The checks string itself is not needed for checking. ','line_number':203,'multiline':True]['text':'
                 * Handle the 'verbose' case of a list containing restricted choices.
                 ','line_number':216,'multiline':True]