['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __ref_index_slot --
 *     Return the page's index and slot for a reference.
 ','line_number':11,'multiline':True]['text':'
     * If we don't find our reference, the page split and our home pointer references the wrong
     * page. When internal pages split, their WT_REF structure home values are updated; yield and
     * wait for that to happen.
     ','line_number':23,'multiline':True]['text':'
         * Copy the parent page's index value: the page can split at any time, but the index's value
         * is always valid, even if it's not up-to-date.
         ','line_number':29,'multiline':True]['text':'
         * Use the page's reference hint: it should be correct unless there was a split or delete in
         * the parent before our slot. If the hint is wrong, it can be either too big or too small,
         * but often only by a small amount. Search up and down the index starting from the hint.
         *
         * It's not an error for the reference hint to be wrong, it just means the first retrieval
         * (which sets the hint for subsequent retrievals), is slower.
         ','line_number':36,'multiline':True]['text':'
         * We failed to get the page index and slot reference, yield before retrying, and if we've
         * yielded enough times, start sleeping so we don't burn CPU to no purpose.
         ','line_number':61,'multiline':True]['text':'
 * __ref_ascend --
 *     Ascend the tree one level.
 ','line_number':75,'multiline':True]['text':'
     * Ref points to the first/last slot on an internal page from which we are ascending the tree,
     * moving to the parent page. This is tricky because the internal page we're on may be splitting
     * into its parent. Find a stable configuration where the page we start from and the page we're
     * moving to are connected. The tree eventually stabilizes into that configuration, keep trying
     * until we succeed.
     ','line_number':84,'multiline':True]['text':'
         * Find our parent slot on the next higher internal page, the slot from which we move to a
         * next/prev slot, checking that we haven't reached the root.
         ','line_number':92,'multiline':True]['text':'
         * There's a split race when a cursor moving forwards through
         * the tree ascends the tree. If we're splitting an internal
         * page into its parent, we move the WT_REF structures and
         * then update the parent's page index before updating the split
         * page's page index, and it's not an atomic update. A thread
         * can read the split page's original page index and then read
         * the parent page's replacement index.
         *
         * This can create a race for next-cursor movements.
         *
         * For example, imagine an internal page with 3 child pages,
         * with the namespaces a-f, g-h and i-j; the first child page
         * splits. The parent starts out with the following page-index:
         *
         *	| ... | a | g | i | ... |
         *
         * which changes to this:
         *
         *	| ... | a | c | e | g | i | ... |
         *
         * The split page starts out with the following page-index:
         *
         *	| a | b | c | d | e | f |
         *
         * Imagine a cursor finishing the 'f' part of the namespace that
         * starts its ascent to the parent's 'a' slot. Then the page
         * splits and the parent page's page index is replaced. If the
         * cursor then searches the parent's replacement page index for
         * the 'a' slot, it finds it and then increments to the slot
         * after the 'a' slot, the 'c' slot, and then it incorrectly
         * repeats its traversal of part of the namespace.
         *
         * This function takes a WT_REF argument which is the page from
         * which we start our ascent. If the parent's slot we find in
         * our search doesn't point to the same page as that initial
         * WT_REF, there's a race and we start over again.
         ','line_number':101,'multiline':True]['text':'
 * __split_prev_race --
 *     Check for races when descending the tree during a previous-cursor walk.
 ','line_number':146,'multiline':True]['text':'
     * Handle a cursor moving backwards through the tree or setting up at the end of the tree. We're
     * passed the child page into which we're descending, and the parent page's page-index we used
     * to find that child page.
     *
     * When splitting an internal page into its parent, we move the split pages WT_REF structures,
     * then update the parent's page index, then update the split page's page index, and nothing is
     * atomic. A thread can read the parent page's replacement page index and then the split page's
     * original index, or vice-versa, and either change can cause a cursor moving backwards through
     * the tree to skip pages.
     *
     * This isn't a problem for a cursor setting up at the start of the tree or moving forward
     * through the tree because we do right-hand splits on internal pages and the initial part of
     * the split page's namespace won't change as part of a split (in other words, a thread reading
     * the parent page's and split page's indexes will move to the same slot no matter what order of
     * indexes are read.
     *
     * Acquire the child's page index, then confirm the parent's page index hasn't changed, to check
     * for reading an old version of the parent's page index and then reading a new version of the
     * child's page index.
     ','line_number':155,'multiline':True]['text':'
     * That doesn't check if we read a new version of parent's page index
     * and then an old version of the child's page index. For example, if
     * a thread were in a newly created split page subtree, the split
     * completes into the parent before the thread reads it and descends
     * into the child (where the split hasn't yet completed).
     *
     * Imagine an internal page with 3 child pages, with the namespaces a-f,
     * g-h and i-j; the first child page splits. The parent starts out with
     * the following page-index:
     *
     *	| ... | a | g | i | ... |
     *
     * The split page starts out with the following page-index:
     *
     *	| a | b | c | d | e | f |
     *
     * The first step is to move the c-f ranges into a new subtree, so, for
     * example we might have two new internal pages 'c' and 'e', where the
     * new 'c' page references the c-d namespace and the new 'e' page
     * references the e-f namespace. The top of the subtree references the
     * parent page, but until the parent's page index is updated, threads in
     * the subtree won't be able to ascend out of the subtree. However, once
     * the parent page's page index is updated to this:
     *
     *	| ... | a | c | e | g | i | ... |
     *
     * threads in the subtree can ascend into the parent. Imagine a cursor
     * in the c-d part of the namespace that ascends to the parent's 'c'
     * slot. It would then decrement to the slot before the 'c' slot, the
     * 'a' slot.
     *
     * The previous-cursor movement selects the last slot in the 'a' page;
     * if the split page's page-index hasn't been updated yet, it selects
     * the 'f' slot, which is incorrect. Once the split page's page index is
     * updated to this:
     *
     *	| a | b |
     *
     * the previous-cursor movement will select the 'b' slot, which is
     * correct.
     *
     * If the last slot on the page no longer points to the current page as
     * its "home", the page is being split and part of its namespace moved,
     * restart. (We probably don't have to restart, I think we could spin
     * until the page-index is updated, but I'm not willing to debug that
     * one if I'm wrong.)
     ','line_number':180,'multiline':True]['text':'
 * __tree_walk_internal --
 *     Move to the next/previous page in the tree, skipping pages in the WT_REF_DELETED state and
 *     for other reasons. Those other reasons are generally controlled by the flags passed in to
 *     this function.
 ','line_number':235,'multiline':True]['text':' Ensure we have a snapshot to check visibility or we only check global visibility. ','line_number':260,'multiline':True]['text':'
     * Historically, all tree walks skipped deleted pages. There are now some exceptions to this:
     * Rollback to stable, and column store append. Rather than add the read-see-deleted flag to
     * every single tree walk call, we hide these pages unless:
     *
     * 1. We detect that rollback to stable is in progress
     * 2. Callers opt into seeing these pages with the read-see-deleted flag.
     *
     * Ideally, rollback to stable would also use the read-see-deleted flag but it uses cursor->next
     * and cursor->prev, which don't have flags.
     ','line_number':263,'multiline':True]['text':'
     * !!!
     * Fast-truncate does not currently work for FLCS trees.
     ','line_number':277,'multiline':True]['text':'
     * There are multiple reasons and approaches to walking the in-memory
     * tree:
     *
     * (1) finding pages to evict (the eviction server);
     * (2) writing just dirty leaves or internal nodes (checkpoint);
     * (3) discarding pages (close);
     * (4) truncating pages in a range (fast truncate);
     * (5) skipping pages based on outside information (compaction);
     * (6) cursor scans (applications).
     *
     * Except for cursor scans and compaction, the walk is limited to the
     * cache, no pages are read.  In all cases, hazard pointers protect the
     * walked pages from eviction.
     *
     * Walks use hazard-pointer coupling through the tree and that's OK
     * (hazard pointers can't deadlock, so there's none of the usual
     * problems found when logically locking up a btree).  If the eviction
     * thread tries to evict the active page, it fails because of our
     * hazard pointer.  If eviction tries to evict our parent, that fails
     * because the parent has a child page that can't be discarded.  We do
     * play one game: don't couple up to our parent and then back down to a
     * new leaf, couple to the next page to which we're descending, it
     * saves a hazard-pointer swap for each cursor page movement.
     *
     * The hazard pointer on the original location is held until the end of
     * the movement, in case we have to restart the movement. Take a copy
     * of any held page and clear the return value (it makes future error
     * handling easier).
     ','line_number':286,'multiline':True]['text':'
     * Tree walks are special: they look inside page structures that splits may want to free.
     * Publish the tree is active during this window.
     ','line_number':320,'multiline':True]['text':' If no page is active, begin a walk from the start/end of the tree. ','line_number':326,'multiline':True]['text':'
             * Yield before retrying, and if we've yielded enough times, start sleeping so we don't
             * burn CPU to no purpose.
             ','line_number':330,'multiline':True]['text':'
     * If the active page was the root, we've reached the walk's end; we only get here if we've
     * returned the root to our caller, so we're holding no hazard pointers.
     ','line_number':348,'multiline':True]['text':' Figure out the current slot in the WT_REF array. ','line_number':355,'multiline':True]['text':'
         * If we're at the last/first slot on the internal page, return it in post-order traversal.
         * Otherwise move to the next/prev slot and left/right-most element in that subtree.
         ','line_number':359,'multiline':True]['text':' Ascend to the parent. ','line_number':364,'multiline':True]['text':'
             * If at the root and returning internal pages, return the root page, otherwise we're
             * done.
             ','line_number':367,'multiline':True]['text':'
             * If we got all the way through an internal page and all of the child pages were
             * deleted, mark it for eviction.
             ','line_number':379,'multiline':True]['text':' Optionally return internal pages. ','line_number':388,'multiline':True]['text':'
             * Swap our previous hazard pointer for the page we'll return.
             *
             * Not-found is an expected return, as eviction might have been attempted. Restart is
             * not expected, our parent WT_REF should not have split.
             ','line_number':392,'multiline':True]['text':' Success, "couple" released. ','line_number':401,'multiline':True]['text':' ret == WT_NOTFOUND, an expected error.  Continue with "couple" unchanged. ','line_number':412,'multiline':True]['text':'
             * Get a reference, setting the reference hint if it's wrong (used when we continue the
             * walk). We don't always update the hints when splitting, it's expected for them to be
             * incorrect in some workloads.
             ','line_number':425,'multiline':True]['text':'
             * If we see any child states other than deleted, the page isn't empty.
             ','line_number':434,'multiline':True]['text':'
                 * Only look at unlocked pages in memory.
                 ','line_number':442,'multiline':True]['text':'
                 * If deleting a range, try to delete the page without instantiating it. (Note this
                 * test follows the check to skip the page entirely if it's already deleted.)
                 ','line_number':448,'multiline':True]['text':'
                 * Try to skip deleted pages visible to us.
                 ','line_number':457,'multiline':True]['text':' See if our caller wants to skip this page. ','line_number':464,'multiline':True]['text':' Success, so "couple" has been released. ','line_number':474,'multiline':True]['text':' Return leaf pages to our caller. ','line_number':480,'multiline':True]['text':' Set the new "couple" value. ','line_number':487,'multiline':True]['text':' Configure traversal of any internal page. ','line_number':490,'multiline':True]['text':'
             * Not-found is an expected return when walking only in-cache pages, or if we see a
             * deleted page.
             *
             * An expected error, so "couple" is unchanged.
             ','line_number':503,'multiline':True]['text':'
             * The page we're moving to might have split, in which case restart the movement.
             *
             * An expected error, so "couple" is unchanged.
             ','line_number':515,'multiline':True]['text':' Unexpected error, so "couple" was released. ','line_number':523,'multiline':True]['text':'
 * __wt_tree_walk --
 *     Move to the next/previous page in the tree.
 ','line_number':537,'multiline':True]['text':'
 * __wt_tree_walk_count --
 *     Move to the next/previous page in the tree, tracking how many references were visited to get
 *     there.
 ','line_number':547,'multiline':True]['text':'
 * __wt_tree_walk_custom_skip --
 *     Walk the tree calling a custom function to decide whether to skip refs.
 ','line_number':558,'multiline':True]['text':'
 * __tree_walk_skip_count_callback --
 *     Optionally skip leaf pages. When the skip-leaf-count variable is non-zero, skip some count of
 *     leaf pages, then take the next leaf page we can. The reason to do some of this work here, is
 *     because we can look at the cell and know it's a leaf page without reading it into memory. If
 *     this page is disk-based, crack the cell to figure out it's a leaf page without reading it.
 ','line_number':570,'multiline':True]['text':'
     * Skip deleted pages visible to us.
     ','line_number':586,'multiline':True]['text':'
 * __wt_tree_walk_skip --
 *     Move to the next/previous page in the tree, skipping a certain number of leaf pages before
 *     returning.
 ','line_number':599,'multiline':True]['text':'
     * Optionally skip leaf pages, the second half. The tree-walk function didn't have an on-page
     * cell it could use to figure out if the page was a leaf page or not, it had to acquire the
     * hazard pointer and look at the page. The tree-walk code never acquires a hazard pointer on a
     * leaf page without returning it, and it's not trivial to change that. So, the tree-walk code
     * returns all leaf pages here and we deal with decrementing the count.
     ','line_number':607,'multiline':True]['text':'
         * The walk skipped internal pages, any page returned must be a leaf page.
         ','line_number':618,'multiline':True]