['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __ckpt_server_config --
 *     Parse and setup the checkpoint server options.
 ','line_number':13,'multiline':True]['text':'
     * The checkpoint configuration requires a wait time and/or a log size, if neither is set, we're
     * not running at all. Checkpoints based on log size also require logging be enabled.
     ','line_number':33,'multiline':True]['text':'
         * If checkpointing based on log data, use a minimum of the log file size. The logging
         * subsystem has already been initialized.
         ','line_number':39,'multiline':True]['text':' Checkpoints are incompatible with in-memory configuration ','line_number':45,'multiline':True]['text':'
 * __ckpt_server_run_chk --
 *     Check to decide if the checkpoint server should continue running.
 ','line_number':59,'multiline':True]['text':'
 * __ckpt_server --
 *     The checkpoint server thread.
 ','line_number':69,'multiline':True]['text':'
         * Wait... NOTE: If the user only configured logsize, then usecs will be 0 and this wait
         * won't return until signalled.
         ','line_number':87,'multiline':True]['text':' Check if we're quitting or being reconfigured. ','line_number':93,'multiline':True]['text':'
         * Reset the log file size counters if the checkpoint wasn't skipped.
         ','line_number':100,'multiline':True]['text':'
             * In case we crossed the log limit during the checkpoint and the condition variable was
             * already signalled, do a tiny wait to clear it so we don't do another checkpoint
             * immediately.
             ','line_number':107,'multiline':True]['text':'
 * __ckpt_server_start --
 *     Start the checkpoint server thread.
 ','line_number':123,'multiline':True]['text':' Nothing to do if the server is already running. ','line_number':133,'multiline':True]['text':'
     * The checkpoint server gets its own session.
     *
     * Checkpoint does enough I/O it may be called upon to perform slow operations for the block
     * manager.
     ','line_number':139,'multiline':True]['text':'
     * Start the thread.
     ','line_number':152,'multiline':True]['text':'
 * __wt_checkpoint_server_create --
 *     Configure and start the checkpoint server.
 ','line_number':161,'multiline':True]['text':'
     * Stop any server that is already running. This means that each time reconfigure is called
     * we'll bounce the server even if there are no configuration changes. This makes our life
     * easier as the underlying configuration routine doesn't have to worry about freeing objects in
     * the connection structure (it's guaranteed to always start with a blank slate), and we don't
     * have to worry about races where a running server is reading configuration information that
     * we're updating, and it's not expected that reconfiguration will happen a lot.
     ','line_number':174,'multiline':True]['text':'
 * __wt_checkpoint_server_destroy --
 *     Destroy the checkpoint server thread.
 ','line_number':192,'multiline':True]['text':' Close the server thread's session. ','line_number':212,'multiline':True]['text':'
     * Ensure checkpoint settings are cleared - so that reconfigure doesn't get confused.
     ','line_number':216,'multiline':True]['text':'
 * __wt_checkpoint_signal --
 *     Signal the checkpoint thread if sufficient log has been written.
 ','line_number':227,'multiline':True]