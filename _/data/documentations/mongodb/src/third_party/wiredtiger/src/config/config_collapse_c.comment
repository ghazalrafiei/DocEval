['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_config_collapse --
 *     Collapse a set of configuration strings into newly allocated memory. This function takes a
 *     NULL-terminated list of configuration strings (where the first one contains all the defaults
 *     and the values are in order from least to most preferred, that is, the default values are
 *     least preferred), and collapses them into newly allocated memory. The algorithm is to walk
 *     the first of the configuration strings, and for each entry, search all of the configuration
 *     strings for a final value, keeping the last value found. Notes: Any key not appearing in the
 *     first configuration string is discarded from the final result, because we'll never search for
 *     it. Nested structures aren't parsed. For example, imagine a configuration string contains
 *     "key=(k2=v2,k3=v3)", and a subsequent string has "key=(k4=v4)", the result will be
 *     "key=(k4=v4)", as we search for and use the final value of "key", regardless of field overlap
 *     or missing fields in the nested value.
 ','line_number':11,'multiline':True]['text':' Include the quotes around string keys/values. ','line_number':42,'multiline':True]['text':' We loop until error, and the expected error is WT_NOTFOUND. ','line_number':50,'multiline':True]['text':'
     * If the caller passes us no valid configuration strings, we get here with no bytes to copy --
     * that's OK, the underlying string copy can handle empty strings.
     *
     * Strip any trailing comma.
     ','line_number':54,'multiline':True]['text':'
 * We need a character that can't appear in a key as a separator.
 ','line_number':69,'multiline':True]['text':' separator key, character ','line_number':72,'multiline':True]['text':'
 * Individual configuration entries, including a generation number used to make the qsort stable.
 ','line_number':77,'multiline':True]['text':' key, value ','line_number':81,'multiline':True]['text':' generation ','line_number':82,'multiline':True]['text':' remove the value ','line_number':83,'multiline':True]['text':'
 * The array of configuration entries.
 ','line_number':86,'multiline':True]['text':' allocated ','line_number':90,'multiline':True]['text':' next slot ','line_number':91,'multiline':True]['text':' array of entries ','line_number':93,'multiline':True]['text':'
 * __config_merge_scan --
 *     Walk a configuration string, inserting entries into the merged array.
 ','line_number':96,'multiline':True]['text':' Include the quotes around string keys/values. ','line_number':119,'multiline':True]['text':'
         * !!!
         * We're using a JSON quote character to separate the names we
         * create for nested structures. That's not completely safe as
         * it's possible to quote characters in JSON such that a quote
         * character appears as a literal character in a key name. In
         * a few cases, applications can create their own key namespace
         * (for example, shared library extension names), and therefore
         * it's possible for an application to confuse us. Error if we
         * we ever see a key with a magic character.
         ','line_number':125,'multiline':True]['text':' Build the key/value strings. ','line_number':141,'multiline':True]['text':'
         * If the value is a structure, recursively parse it.
         *
         * !!!
         * Don't merge unless the structure has field names. WiredTiger
         * stores checkpoint LSNs in the metadata file using nested
         * structures without field names: "checkpoint_lsn=(1,0)", not
         * "checkpoint_lsn=(file=1,offset=0)". The value type is still
         * WT_CONFIG_ITEM_STRUCT, so we check for a field name in the
         * value.
         ','line_number':146,'multiline':True]['text':' Insert the value into the array. ','line_number':162,'multiline':True]['text':'
 * __strip_comma --
 *     Strip a trailing comma.
 ','line_number':179,'multiline':True]['text':'
 * __config_merge_format_next --
 *     Walk the array, building entries.
 ','line_number':190,'multiline':True]['text':'
         * The entries are in sorted order, take the last entry for any key.
         ','line_number':206,'multiline':True]['text':' Choose the last of identical keys. ','line_number':212,'multiline':True]['text':'
             * The test is complicated by matching empty entries "foo=" against nested structures
             * "foo,bar=", where the latter is a replacement for the former.
             ','line_number':216,'multiline':True]['text':'
         * If we're skipping a prefix and this entry doesn't match it, back off one entry and pop up
         * a level.
         ','line_number':224,'multiline':True]['text':'
         * If the entry introduces a new level, recurse through that new level.
         ','line_number':233,'multiline':True]['text':' Save the start location of the new level. ','line_number':237,'multiline':True]['text':'
             * It's possible the level contained nothing, check and discard empty levels.
             ','line_number':246,'multiline':True]['text':' Discard flagged entries. ','line_number':256,'multiline':True]['text':' Append the entry to the buffer. ','line_number':260,'multiline':True]['text':'
 * __config_merge_format --
 *     Take the sorted array of entries, and format them into allocated memory.
 ','line_number':267,'multiline':True]['text':'
 * __config_merge_cmp --
 *     Qsort function: sort the config merge array.
 ','line_number':292,'multiline':True]['text':'
 * __wt_config_tiered_strip --
 *     Strip any configuration options that should not be persisted in the metadata from the
 *     configuration string.
 ','line_number':310,'multiline':True]['text':'
 * __wt_config_merge --
 *     Merge a set of configuration strings into newly allocated memory, optionally discarding
 *     configuration items. This function takes a NULL-terminated list of configuration strings
 *     (where the values are in order from least to most preferred), and merges them into newly
 *     allocated memory. The algorithm is to walk the configuration strings and build a table of
 *     each key/value pair. The pairs are sorted based on the name and the configuration string in
 *     which they were found, and a final configuration string is built from the result.
 *     Additionally, a configuration string can be specified and those configuration values are
 *     removed from the final string. Note: Nested structures are parsed and merged. For example, if
 *     configuration strings "key=(k1=v1,k2=v2)" and "key=(k1=v2)" appear, the result will be
 *     "key=(k1=v2,k2=v2)" because the nested values are merged.
 ','line_number':324,'multiline':True]['text':' Start out with a reasonable number of entries. ','line_number':345,'multiline':True]['text':'
     * Scan the configuration strings, entering them into the array. The list of configuration
     * values to be removed must be scanned last so their generation numbers are the highest.
     ','line_number':350,'multiline':True]['text':'
     * Sort the array by key and, in the case of identical keys, by generation.
     ','line_number':359,'multiline':True]['text':' Convert the array of entries into a string. ','line_number':365,'multiline':True]