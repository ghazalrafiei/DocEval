['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __rts_assert_timestamps_unchanged --
 *     Wrapper for some diagnostic assertions related to global timestamps.
 ','line_number':11,'multiline':True]['text':'
 * __rollback_to_stable_int --
 *     Rollback all modifications with timestamps more recent than the passed in timestamp.
 ','line_number':29,'multiline':True]['text':'
     * Rollback to stable should ignore tombstones in the history store since it needs to scan the
     * entire table sequentially.
     ','line_number':50,'multiline':True]['text':'
     * Update the global time window state to have consistent view from global visibility rules for
     * the rollback to stable to bring back the database into a consistent state.
     *
     * As part of the below function call, the oldest transaction id and pinned timestamps are
     * updated.
     ','line_number':58,'multiline':True]['text':'
     * Copy the stable timestamp, otherwise we'd need to lock it each time it's accessed. Even
     * though the stable timestamp isn't supposed to be updated while rolling back, accessing it
     * without a lock would violate protocol.
     ','line_number':72,'multiline':True]['text':' Rollback the global durable timestamp to the stable timestamp. ','line_number':94,'multiline':True]['text':'
     * If the configuration is not in-memory, forcibly log a checkpoint after rollback to stable to
     * ensure that both in-memory and on-disk versions are the same unless caller requested for no
     * checkpoint.
     ','line_number':101,'multiline':True]['text':'
 * __rollback_to_stable_one --
 *     Perform rollback to stable on a single object.
 ','line_number':114,'multiline':True]['text':'
     * This is confusing: the caller's boolean argument "skip" stops the schema-worker loop from
     * processing this object and any underlying objects it may have (for example, a table with
     * multiple underlying file objects). We rollback-to-stable all of the file objects an object
     * may contain, so set the caller's skip argument to true on all file objects, else set the
     * caller's skip argument to false so our caller continues down the tree of objects.
     ','line_number':130,'multiline':True]['text':' Read the stable timestamp once, when we first start up. ','line_number':147,'multiline':True]['text':'
 * __rollback_to_stable_finalize --
 *     Reset a connection's RTS structure in preparation for the next call.
 ','line_number':165,'multiline':True]['text':'
 * __rollback_to_stable --
 *     Rollback the database to the stable timestamp.
 ','line_number':175,'multiline':True]['text':'
     * Explicit null-check because internal callers (startup/shutdown) do not enter via the API, and
     * don't get default values installed in the config string.
     ','line_number':188,'multiline':True]['text':'
     * Don't use the connection's default session: we are working on data handles and (a) don't want
     * to cache all of them forever, plus (b) can't guarantee that no other method will be called
     * concurrently. Copy parent session no logging option to the internal session to make sure that
     * rollback to stable doesn't generate log records.
     ','line_number':200,'multiline':True]['text':' Time since the RTS started. ','line_number':217,'multiline':True]['text':'
 * __wt_rollback_to_stable_init --
 *     Initialize the data structures for the rollback to stable subsystem
 ','line_number':231,'multiline':True]['text':'
     * Setup the pointer so the data structure can be accessed easily while avoiding the need to do
     * explicit memory management.
     ','line_number':238,'multiline':True]['text':' Setup function pointers. ','line_number':244,'multiline':True]['text':' Setup variables. ','line_number':248,'multiline':True]