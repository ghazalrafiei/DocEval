['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * WT_DATA_HANDLE_CACHE --
 *	Per-session cache of handles to avoid synchronization when opening
 *	cursors.
 ','line_number':9,'multiline':True]['text':'
 * WT_HAZARD --
 *	A hazard pointer.
 ','line_number':21,'multiline':True]['text':' Page reference ','line_number':26,'multiline':True]['text':' Function/line hazard acquired ','line_number':28,'multiline':True]['text':'
 * WT_HAZARD_ARRAY --
 *   An array of all hazard pointers held by the session.
 *   New hazard pointers are added on a first-fit basis, and on removal their entry
 *   in the array is set to null. As such this array may contain holes.
 ','line_number':33,'multiline':True]['text':' The hazard pointer array grows as necessary, initialize with 250 slots. ','line_number':40,'multiline':True]['text':' The hazard pointer array ','line_number':43,'multiline':True]['text':' Number of array slots potentially in-use. We only need to iterate
                                 this many slots to find all active pointers ','line_number':44,'multiline':True]['text':' Number of array slots containing an active hazard pointer ','line_number':46,'multiline':True]['text':' Allocated size of the array ','line_number':47,'multiline':True]['text':'
 * WT_PREFETCH --
 *	Pre-fetch structure containing useful information for pre-fetch.
 ','line_number':50,'multiline':True]['text':' Sequential cache requests that caused a leaf read ','line_number':56,'multiline':True]['text':' Get the connection implementation for a session ','line_number':60,'multiline':True]['text':' Get the btree for a session ','line_number':63,'multiline':True]['text':' Get the file system for a session ','line_number':67,'multiline':True]['text':' Number of cursors cached to trigger cursor sweep. ','line_number':74,'multiline':True]['text':' Minimum number of buckets to visit during a regular cursor sweep. ','line_number':77,'multiline':True]['text':' Maximum number of buckets to visit during a regular cursor sweep. ','line_number':80,'multiline':True]['text':' Invalid session ID. ','line_number':83,'multiline':True]['text':' A fake session ID for when we need to refer to a session that is actually NULL. ','line_number':86,'multiline':True]['text':'
 * WT_SESSION_IMPL --
 *	Implementation of WT_SESSION.
 ','line_number':89,'multiline':True]['text':' Application's event handlers ','line_number':95,'multiline':True]['text':' Language specific private storage ','line_number':97,'multiline':True]['text':' Format test program private callback. ','line_number':99,'multiline':True]['text':' Non-zero if the session is in-use ','line_number':102,'multiline':True]['text':' Name ','line_number':104,'multiline':True]['text':' Last operation ','line_number':105,'multiline':True]['text':' UID, offset in session array ','line_number':106,'multiline':True]['text':' Wait time for cache for current operation ','line_number':108,'multiline':True]['text':' Operation start ','line_number':109,'multiline':True]['text':' Maximum operation period before rollback ','line_number':110,'multiline':True]['text':' Depth of api calls ','line_number':111,'multiline':True]['text':' Current data handle ','line_number':113,'multiline':True]['text':' Current bucket storage and file system ','line_number':114,'multiline':True]['text':'
     * Each session keeps a cache of data handles. The set of handles can grow quite large so we
     * maintain both a simple list and a hash table of lists. The hash table key is based on a hash
     * of the data handle's URI. Though all hash entries are discarded on session close, the hash
     * table list itself is kept in allocated memory that lives across session close - so it is
     * declared further down.
     ','line_number':116,'multiline':True]['text':' Session handle reference list ','line_number':123,'multiline':True]['text':' Last sweep for dead handles ','line_number':125,'multiline':True]['text':' Last epoch time returned ','line_number':126,'multiline':True]['text':' Cursors closed with the session ','line_number':128,'multiline':True]['text':' Count of active file cursors. ','line_number':129,'multiline':True]['text':' Countdown to cursor sweep ','line_number':130,'multiline':True]['text':' Position in cursor_cache for sweep ','line_number':131,'multiline':True]['text':' Last big sweep for dead cursors ','line_number':132,'multiline':True]['text':' Last regular sweep for dead cursors ','line_number':133,'multiline':True]['text':' Whether the session was without sweep for 5 min. ','line_number':134,'multiline':True]['text':' Whether the session was without sweep for 60 min. ','line_number':135,'multiline':True]['text':' Hot backup cursor ','line_number':137,'multiline':True]['text':' Compaction information ','line_number':139,'multiline':True]['text':' List of metadata entries to import from file. ','line_number':142,'multiline':True]['text':' Number of open history store cursors ','line_number':144,'multiline':True]['text':' Metadata file ','line_number':146,'multiline':True]['text':' Metadata operation tracking ','line_number':147,'multiline':True]['text':' Current position ','line_number':148,'multiline':True]['text':' Child transaction / save point ','line_number':149,'multiline':True]['text':' Currently allocated ','line_number':150,'multiline':True]['text':' Nesting level of meta transaction ','line_number':151,'multiline':True]['text':' Current rwlock for callback. ','line_number':154,'multiline':True]['text':' Temporary memory for any function ','line_number':158,'multiline':True]['text':' Currently allocated ','line_number':159,'multiline':True]['text':' Scratch bytes cached ','line_number':160,'multiline':True]['text':' Enforce the contract that a session is only used by a single thread at a time. ','line_number':163,'multiline':True]['text':'
     * It's hard to figure out from where a buffer was allocated after it's leaked, so in diagnostic
     * mode we track them; DIAGNOSTIC can't simply add additional fields to WT_ITEM structures
     * because they are visible to applications, create a parallel structure instead.
     ','line_number':170,'multiline':True]['text':' Allocating function, line ','line_number':176,'multiline':True]['text':' Record the important timestamps of each stage in an reconciliation. ','line_number':181,'multiline':True]['text':'
     * Record the important timestamps of each stage in an eviction. If an eviction takes a long
     * time and times out, we can trace the time usage of each stage from this information.
     ','line_number':192,'multiline':True]['text':' Error buffer ','line_number':204,'multiline':True]['text':' Transaction state ','line_number':207,'multiline':True]['text':' Pre-fetch structure ','line_number':209,'multiline':True]['text':' Block-manager support ','line_number':211,'multiline':True]['text':' History store checkpoint name, during checkpoint cursor ops ','line_number':214,'multiline':True]['text':' Write generation override, during checkpoint cursor ops ','line_number':215,'multiline':True]['text':' Checkpoint handles ','line_number':217,'multiline':True]['text':' Handle list ','line_number':218,'multiline':True]['text':' Next empty slot ','line_number':219,'multiline':True]['text':' Bytes allocated ','line_number':220,'multiline':True]['text':' Named checkpoint drop list, during a checkpoint ','line_number':222,'multiline':True]['text':' Checkpoint time of current checkpoint, during a checkpoint ','line_number':225,'multiline':True]['text':'
     * Operations acting on handles.
     *
     * The preferred pattern is to gather all of the required handles at the beginning of an
     * operation, then drop any other locks, perform the operation, then release the handles. This
     * cannot be easily merged with the list of checkpoint handles because some operations (such as
     * compact) do checkpoints internally.
     ','line_number':228,'multiline':True]['text':' Handle list ','line_number':236,'multiline':True]['text':' Next empty slot ','line_number':237,'multiline':True]['text':' Bytes allocated ','line_number':238,'multiline':True]['text':' Reconciliation support ','line_number':240,'multiline':True]['text':' Salvage support. ','line_number':243,'multiline':True]['text':' Sessions have an associated statistics bucket based on its ID. ','line_number':246,'multiline':True]['text':' Statistics bucket offset ','line_number':247,'multiline':True]['text':' Maximum time an operation waits for space in cache ','line_number':248,'multiline':True]['text':' Configure debugging page dump ','line_number':251,'multiline':True]['text':'
 * Unit testing assertions requires overriding abort logic and instead capturing this information to
 * be checked by the unit test.
 ','line_number':255,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':264,'multiline':True]['text':'AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':278,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':281,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':303,'multiline':True]['text':'
 * All of the following fields live at the end of the structure so it's easier to clear everything
 * but the fields that persist.
 ','line_number':306,'multiline':True]['text':'
     * The random number state persists past session close because we don't want to repeatedly use
     * the same values for skiplist depth when the application isn't caching sessions.
     ','line_number':312,'multiline':True]['text':' Random number generation state ','line_number':316,'multiline':True]['text':'
     * Hash tables are allocated lazily as sessions are used to keep the size of this structure from
     * growing too large.
     ','line_number':318,'multiline':True]['text':' Hash table of cached cursors ','line_number':322,'multiline':True]['text':' Hashed handle reference list array ','line_number':324,'multiline':True]['text':' Generations manager ','line_number':327,'multiline':True]['text':' Checkpoint generation ','line_number':328,'multiline':True]['text':' Commit generation ','line_number':329,'multiline':True]['text':' Eviction generation ','line_number':330,'multiline':True]['text':' Hazard pointer ','line_number':331,'multiline':True]['text':' Page splits ','line_number':332,'multiline':True]['text':' Total generation manager entries ','line_number':333,'multiline':True]['text':'
     * Session memory persists past session close because it's accessed by threads of control other
     * than the thread owning the session. For example, btree splits and hazard pointers can "free"
     * memory that's still in use. In order to eventually free it, it's stashed here with its
     * generation number; when no thread is reading in generation, the memory can be freed for real.
     ','line_number':336,'multiline':True]['text':' Memory, length ','line_number':344,'multiline':True]['text':' Generation ','line_number':346,'multiline':True]['text':' Array entries ','line_number':348,'multiline':True]['text':' Allocated bytes ','line_number':349,'multiline':True]['text':'
 * Hazard pointers.
 *
 * Hazard information persists past session close because it's accessed by threads of control other
 * than the thread owning the session.
 *
 * Use the non-NULL state of the hazard array to know if the session has previously been
 * initialized.
 ','line_number':352,'multiline':True]['text':'
     * Operation tracking.
     ','line_number':364,'multiline':True]['text':' Consider moving this to session_inline.h if it ever appears. ','line_number':375,'multiline':True]