['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __curindex_get_value --
 *     WT_CURSOR->get_value implementation for index cursors.
 ','line_number':11,'multiline':True]['text':'
 * __curindex_set_valuev --
 *     WT_CURSOR->set_value implementation for index cursors.
 ','line_number':32,'multiline':True]['text':'
 * __curindex_set_value --
 *     WT_CURSOR->set_value implementation for index cursors.
 ','line_number':53,'multiline':True]['text':'
 * __curindex_compare --
 *     WT_CURSOR->compare method for the index cursor type.
 ','line_number':67,'multiline':True]['text':' Check both cursors are "index:" type. ','line_number':81,'multiline':True]['text':'
 * __curindex_move --
 *     When an index cursor changes position, set the primary key in the associated column groups
 *     and update their positions to match.
 ','line_number':94,'multiline':True]['text':' Point the public cursor to the key in the child. ','line_number':109,'multiline':True]['text':'
             * Set the primary key -- note that we need the primary key columns, so we have to use
             * the full key format, not just the public columns.
             ','line_number':117,'multiline':True]['text':'
 * __curindex_next --
 *     WT_CURSOR->next method for index cursors.
 ','line_number':138,'multiline':True]['text':'
 * __curindex_prev --
 *     WT_CURSOR->prev method for index cursors.
 ','line_number':160,'multiline':True]['text':'
 * __curindex_reset --
 *     WT_CURSOR->reset method for index cursors.
 ','line_number':182,'multiline':True]['text':'
     * The bounded cursor API clears bounds on external calls to cursor->reset. We determine this by
     * guarding the call to cursor bound reset with the API_USER_ENTRY macro. Doing so prevents
     * internal API calls from resetting cursor bounds unintentionally, e.g. cursor->remove.
     ','line_number':206,'multiline':True]['text':'
 * __curindex_search --
 *     WT_CURSOR->search method for index cursors.
 ','line_number':217,'multiline':True]['text':'
     * We are searching using the application-specified key, which (usually) doesn't contain the
     * primary key, so it is just a prefix of any matching index key. Do a search_near, step to the
     * next entry if we land on one that is too small, then check that the prefix matches.
     ','line_number':235,'multiline':True]['text':'
     * We expect partial matches, and want the smallest record with a key greater than or equal to
     * the search key.
     *
     * If the key we find is shorter than the search key, it can't possibly match.
     *
     * The only way for the key to be exactly equal is if there is an index on the primary key,
     * because otherwise the primary key columns will be appended to the index key, but we don't
     * disallow that (odd) case.
     ','line_number':246,'multiline':True]['text':'
     * Custom collators expect to see complete keys, pass an item containing all the visible fields
     * so it unpacks correctly.
     ','line_number':260,'multiline':True]['text':'
 * __curindex_search_near --
 *     WT_CURSOR->search_near method for index cursors.
 ','line_number':286,'multiline':True]['text':'
     * We are searching using the application-specified key, which (usually) doesn't contain the
     * primary key, so it is just a prefix of any matching index key. That said, if there is an
     * exact match, we want to find the first matching index entry and set exact equal to zero.
     *
     * Do a search_near, and if we find an entry that is too small, step to the next one. In the
     * unlikely event of a search past the end of the tree, go back to the last key.
     ','line_number':304,'multiline':True]['text':'
     * We expect partial matches, and want the smallest record with a key greater than or equal to
     * the search key.
     *
     * If the found key starts with the search key, we indicate a match by setting exact equal to
     * zero.
     *
     * The compare function expects application-supplied keys to come first so we flip the sign of
     * the result to match what callers expect.
     ','line_number':321,'multiline':True]['text':'
         * Custom collators expect to see complete keys, pass an item containing all the visible
         * fields so it unpacks correctly.
         ','line_number':333,'multiline':True]['text':'
 * __increment_bound_array --
 *     Increment the given buffer by one bit, return true if we incremented the buffer or not. If
 *     all of the values inside the buffer are UINT8_MAX value we do not increment the buffer.
 ','line_number':357,'multiline':True]['text':'
     * First loop through all max values on the buffer from the end. This is to find the appropriate
     * position to increment add one to the byte.
     ','line_number':370,'multiline':True]['text':'
     * If all of the buffer are max values, we don't need to do increment the buffer as the key
     * format is a fixed length format. Ideally we double check that the table format has a fixed
     * length string.
     ','line_number':377,'multiline':True]['text':'
 * __curindex_bound --
 *     WT_CURSOR->bound method for the index cursor type.
 *
 ','line_number':391,'multiline':True]['text':' Save the current state of the bounds in case we fail to apply the new state. ','line_number':414,'multiline':True]['text':' When setting bounds, we need to check that the key is set. ','line_number':419,'multiline':True]['text':' Point the public cursor to the key in the child. ','line_number':423,'multiline':True]['text':' Check if we have set the lower bound or upper bound. ','line_number':429,'multiline':True]['text':'
     * Index tables internally combines the user chosen columns with the key format of the table to
     * maintain uniqueness between each key. However user's are not aware of the combining the key
     * format and cannot set bounds based on the combined index format. Therefore WiredTiger needs
     * to internally fix this by incrementing one bit to the array in two cases:
     *  1. If the set bound is lower and it is not inclusive.
     *  2. If the set bound is upper and it is inclusive.
     ','line_number':435,'multiline':True]['text':'
         * In the case that we can't increment the lower bound, it means we have reached the max
         * possible key for the lower bound. This is a very tricky case since there isn't a trivial
         * way to set the lower bound to a key exclusively not show the max possible key. This is
         * due to how index key formats are combined with the main table's key format. In this edge
         * case we expect no entries to be returned, thus we return it back to the user with an
         * error instead.
         ','line_number':444,'multiline':True]['text':'
         * In the case that we can't increment the upper bound, it means we have reached the max
         * possible key for the upper bound. In that case we can just clear upper bound.
         ','line_number':460,'multiline':True]['text':'
 * __curindex_close --
 *     WT_CURSOR->close method for index cursors.
 ','line_number':474,'multiline':True]['text':' The URI is owned by the index. ','line_number':513,'multiline':True]['text':'
 * __curindex_open_colgroups --
 *     Open cursors on the column groups required for an index cursor.
 ','line_number':520,'multiline':True]['text':' Child cursors are opened with dump disabled. ','line_number':530,'multiline':True]['text':' Work out which column groups we need. ','line_number':541,'multiline':True]['text':'
 * __wt_curindex_open --
 *     WT_SESSION->open_cursor method for index cursors.
 ','line_number':555,'multiline':True]['text':' get-key ','line_number':563,'multiline':True]['text':' get-value ','line_number':564,'multiline':True]['text':' get-raw-key-value ','line_number':565,'multiline':True]['text':' set-key ','line_number':566,'multiline':True]['text':' set-value ','line_number':567,'multiline':True]['text':' compare ','line_number':568,'multiline':True]['text':' equals ','line_number':569,'multiline':True]['text':' next ','line_number':570,'multiline':True]['text':' prev ','line_number':571,'multiline':True]['text':' reset ','line_number':572,'multiline':True]['text':' search ','line_number':573,'multiline':True]['text':' search-near ','line_number':574,'multiline':True]['text':' insert ','line_number':575,'multiline':True]['text':' modify ','line_number':576,'multiline':True]['text':' update ','line_number':577,'multiline':True]['text':' remove ','line_number':578,'multiline':True]['text':' reserve ','line_number':579,'multiline':True]['text':' reconfigure ','line_number':580,'multiline':True]['text':' largest_key ','line_number':581,'multiline':True]['text':' bound ','line_number':582,'multiline':True]['text':' cache ','line_number':583,'multiline':True]['text':' reopen ','line_number':584,'multiline':True]['text':' checkpoint ID ','line_number':585,'multiline':True]['text':' close ','line_number':586,'multiline':True]['text':'
     * XXX A very odd corner case is an index with a recno key. The only way to get here is by
     * creating an index on a column store using only the primary's recno as the index key. Disallow
     * that for now.
     ','line_number':633,'multiline':True]['text':' Handle projections. ','line_number':642,'multiline':True]['text':' Open the column groups needed for this index cursor. ','line_number':657,'multiline':True]