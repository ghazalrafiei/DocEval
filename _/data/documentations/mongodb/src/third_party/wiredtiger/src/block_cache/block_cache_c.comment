['text':'-
 * Copyright (c) 2014-2020 MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *  All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __blkcache_verbose --
 *     Block cache verbose logging.
 ','line_number':11,'multiline':True]['text':'
     * Complicate the error handling so we don't have to return a value from this function, it
     * simplifies error handling in our callers.
     ','line_number':25,'multiline':True]['text':'
 * __blkcache_alloc --
 *     Allocate a block of memory in the cache.
 ','line_number':37,'multiline':True]['text':'
 * __blkcache_free --
 *     Free a chunk of memory.
 ','line_number':62,'multiline':True]['text':'
 * __blkcache_update_ref_histogram --
 *     Update the histogram of block accesses when the block is freed or on exit.
 ','line_number':84,'multiline':True]['text':'
 * __blkcache_print_reference_hist --
 *     Print a histogram showing how a type of block given in the header is reused.
 ','line_number':108,'multiline':True]['text':'
 * __blkcache_high_overhead --
 *     Estimate the overhead of using the cache. The overhead comes from block insertions and
 *     removals, which produce writes. Writes disproportionally slow down the reads on Optane NVRAM.
 ','line_number':126,'multiline':True]['text':'
 * __blkcache_should_evict --
 *     Decide if the block should be evicted.
 ','line_number':143,'multiline':True]['text':' Blocks in use cannot be evicted. ','line_number':155,'multiline':True]['text':'
     * Keep track of the smallest number of references for blocks that have not been recently
     * accessed.
     ','line_number':159,'multiline':True]['text':' Don't evict if there is plenty of free space ','line_number':167,'multiline':True]['text':'
     * In an NVRAM cache, don't evict if there is high overhead due to blocks being
     * inserted/removed. Churn kills performance and evicting when churn is high will exacerbate the
     * overhead.
     ','line_number':171,'multiline':True]['text':'
     * Evict if the block has not been accessed for the amount of time corresponding to the evict
     * aggressive setting. Within the category of blocks that fit this criterion, choose those with
     * the lowest number of accesses first.
     ','line_number':181,'multiline':True]['text':'
 * __blkcache_eviction_thread --
 *     Periodically sweep the cache and evict unused blocks.
 ','line_number':194,'multiline':True]['text':'
         * Sweep the cache every second to ensure time-based decay of frequency/recency counters of
         * resident blocks.
         ','line_number':216,'multiline':True]['text':' Check if the cache is being destroyed ','line_number':222,'multiline':True]['text':'
         * Walk the cache, gathering statistics and evicting blocks that are within our target. We
         * sweep the cache every second, decrementing the frequency/recency counter of each block.
         * Blocks whose counter goes below the threshold will get evicted. The threshold is set
         * according to how soon we expect the blocks to become irrelevant. For example, if the
         * threshold is set to 1800 seconds (=30 minutes), blocks that were used once but then
         * weren't referenced for 30 minutes will be evicted. Blocks that were referenced a lot in
         * the past but weren't referenced in the past 30 minutes will stay in the cache a bit
         * longer, until their frequency/recency counter drops below the threshold.
         *
         * As we cycle through the blocks, we keep track of the minimum number of references
         * observed for blocks whose frequency/recency counter has gone below the threshold. We will
         * evict blocks with the smallest counter before evicting those with a larger one.
         ','line_number':226,'multiline':True]['text':'
                     * Update the number of removals because it is used to estimate the overhead,
                     * and we want the overhead contributed by eviction to be part of that
                     * calculation.
                     ','line_number':252,'multiline':True]['text':'
 * __blkcache_estimate_filesize --
 *     Estimate the size of files used by this workload.
 ','line_number':281,'multiline':True]['text':' This is a deliberate race condition ','line_number':297,'multiline':True]['text':'
 * __wt_blkcache_get --
 *     Get a block from the cache.
 ','line_number':318,'multiline':True]['text':'
     * In an NVRAM cache, we track lookups to calculate the overhead of using the cache. We race to
     * avoid using synchronization. We only care about an approximate value, so we accept inaccuracy
     * for the sake of avoiding synchronization on the critical path.
     ','line_number':337,'multiline':True]['text':'
     * An NVRAM cache is slower than retrieving the block from the OS buffer cache, a DRAM cache is
     * faster than the OS buffer cache. In the case of NVRAM, if more than the configured fraction
     * of all file objects is likely to fit in the OS buffer cache, don't use the block cache.
     ','line_number':345,'multiline':True]['text':'
 * __wt_blkcache_put --
 *     Put a block into the cache.
 ','line_number':387,'multiline':True]['text':' Are we within cache size limits? ','line_number':404,'multiline':True]['text':'
     * An NVRAM cache is slower than retrieving the block from the OS buffer cache, a DRAM cache is
     * faster than the OS buffer cache. In the case of NVRAM, if more than the configured fraction
     * of all file objects is likely to fit in the OS buffer cache, don't use the block cache.
     ','line_number':408,'multiline':True]['text':' Bypass on high overhead ','line_number':420,'multiline':True]['text':'
     * Allocate and initialize space in the cache outside of the critical section. In the unlikely
     * event that we fail an allocation, free the space. NVRAM allocations can fail if there's no
     * available memory, treat it as a cache-full failure.
     ','line_number':426,'multiline':True]['text':'
     * In the case of a read, check if the block is already in the cache: it's possible because two
     * readers can attempt to cache the same overflow block because overflow blocks aren't cached at
     * the btree level. Collisions are relatively unlikely because other page types are cached at
     * higher levels and reads of those tree pages are single-threaded so the page can be converted
     * to its in-memory form before reader access. In summary, because collisions are unlikely, the
     * allocation and copying remains outside of the bucket lock and collision check. Writing a
     * block is single-threaded at a higher level, and as there should never be a collision, only
     * check in diagnostic mode.
     ','line_number':446,'multiline':True]['text':'
     * Set the recency timestamp on newly inserted blocks to the maximum value to reduce the chance
     * of them being evicted before they are reused.
     ','line_number':472,'multiline':True]['text':'
 * __wt_blkcache_remove --
 *     Remove a block from the cache.
 ','line_number':505,'multiline':True]['text':'
             * The block might be in use by another thread, wait for it to be released before
             * freeing it.
             ','line_number':530,'multiline':True]['text':'
 * __blkcache_init --
 *     Initialize the block cache.
 ','line_number':552,'multiline':True]['text':' Block cache hash lists ','line_number':593,'multiline':True]['text':' Create the eviction thread ','line_number':597,'multiline':True]['text':' initialize to a large value ','line_number':601,'multiline':True]['text':'
 * __wt_blkcache_destroy --
 *     Destroy the block cache and free all memory.
 ','line_number':615,'multiline':True]['text':' Assert we never left a block pinned. ','line_number':645,'multiline':True]['text':'
             * Some workloads crash on freeing NVRAM arenas. If that occurs the call to free can be
             * removed and the library/OS will clean up for us once the process exits.
             ','line_number':651,'multiline':True]['text':' Print reference histograms ','line_number':664,'multiline':True]['text':'
     * Zeroing the structure has the effect of setting the block cache type to unconfigured.
     ','line_number':679,'multiline':True]['text':'
 * __blkcache_reconfig --
 *     We currently disallow reconfiguration. If and when we do, this function will destroy the
 *     block cache, making it ready for clean initialization.
 ','line_number':685,'multiline':True]['text':'
 * __wt_blkcache_setup --
 *     Set up the block cache.
 ','line_number':721,'multiline':True]['text':' When reconfiguring, check if there are any modifications that we care about. ','line_number':743,'multiline':True]