['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_modify_idempotent --
 *     Check if a modify operation is idempotent.
 ','line_number':41,'multiline':True]['text':' Get the number of modify entries. ','line_number':53,'multiline':True]['text':'
         * If the number of bytes being replaced doesn't match the number of bytes being written,
         * we're resizing and the operation isn't idempotent.
         ','line_number':59,'multiline':True]['text':'
 * __wt_modify_pack --
 *     Pack a modify structure into a buffer.
 ','line_number':71,'multiline':True]['text':'
     * Build the in-memory modify value. It's the entries count, followed by the modify structure
     * offsets written in order, followed by the data (data at the end to minimize unaligned
     * reads/writes).
     ','line_number':87,'multiline':True]['text':' nentries ','line_number':92,'multiline':True]['text':' WT_MODIFY fields ','line_number':94,'multiline':True]['text':' data ','line_number':95,'multiline':True]['text':' bytes touched ','line_number':96,'multiline':True]['text':'
     * Update statistics. This is the common path called by WT_CURSOR::modify implementations.
     ','line_number':115,'multiline':True]['text':'
 * __modify_apply_one --
 *     Apply a single modify structure change to the buffer.
 ','line_number':125,'multiline':True]['text':'
     * Grow the buffer to the maximum size we'll need. This is pessimistic because it ignores
     * replacement bytes, but it's a simpler calculation.
     *
     * Grow the buffer first. This function is often called using a cursor buffer referencing
     * on-page memory and it's easy to overwrite a page. A side-effect of growing the buffer is to
     * ensure the buffer's value is in buffer-local memory.
     *
     * Because the buffer may reference an overflow item, the data may not start at the start of the
     * buffer's memory and we have to correct for that.
     ','line_number':141,'multiline':True]['text':'
     * Fast-path the common case, where we're overwriting a set of bytes that already exist in the
     * buffer.
     ','line_number':156,'multiline':True]['text':'
     * If appending bytes past the end of the value, initialize gap bytes and copy the new bytes
     * into place.
     ','line_number':165,'multiline':True]['text':'
     * Correct the replacement size if it's nonsense, we can't replace more bytes than remain in the
     * value. (Nonsense sizes are permitted in the API because we don't want to handle the errors.)
     ','line_number':178,'multiline':True]['text':' Overwrite ','line_number':187,'multiline':True]['text':' Copy in the new data. ','line_number':188,'multiline':True]['text':'
         * The new data must overlap the buffer's end (else, we'd use the fast-path code above). Set
         * the buffer size to include the new data.
         ','line_number':191,'multiline':True]['text':' Shrink or grow ','line_number':196,'multiline':True]['text':' Move trailing data forward/backward to its new location. ','line_number':197,'multiline':True]['text':' Copy in the new data. ','line_number':208,'multiline':True]['text':'
         * Correct the size. This works because of how the C standard
         * defines unsigned arithmetic, and gcc7 complains about more
         * verbose forms:
         *
         *	if (data_size > size)
         *		value->size += (data_size - size);
         *	else
         *		value->size -= (size - data_size);
         *
         * because the branches are identical.
         ','line_number':211,'multiline':True]['text':'
 * __modify_fast_path --
 *     Process a set of modifications, applying any that can be made in place, and check if the
 *     remaining ones are sorted and non-overlapping.
 ','line_number':229,'multiline':True]['text':' [-Werror=maybe-uninitialized] ','line_number':246,'multiline':True]['text':'
     * If the modifications are sorted and don't overlap in the old or new values, we can do a fast
     * application of all the modifications in a single pass.
     *
     * The requirement for ordering is unfortunate, but modifications are performed in order, and
     * applications specify byte offsets based on that. In other words, byte offsets are cumulative,
     * modifications that shrink or grow the data affect subsequent modification's byte offsets.
     ','line_number':248,'multiline':True]['text':' Step over the bytes before the current block. ','line_number':269,'multiline':True]['text':' Check that entries are sorted and non-overlapping. ','line_number':273,'multiline':True]['text':'
         * If the source is past the end of the current value, we have to deal with padding bytes.
         * Don't try to fast-path padding bytes; it's not common and adds branches to the loop
         * applying the changes.
         ','line_number':280,'multiline':True]['text':'
         * If copying this block overlaps with the next one, we can't build the value in reverse
         * order.
         ','line_number':288,'multiline':True]['text':' Step over the current modification. ','line_number':295,'multiline':True]['text':' Step over the final unmodified block. ','line_number':303,'multiline':True]['text':'
 * __modify_apply_no_overlap --
 *     Apply a single set of WT_MODIFY changes to a buffer, where the changes are in sorted order
 *     and none of the changes overlap.
 ','line_number':312,'multiline':True]['text':' Move the current unmodified block into place if necessary. ','line_number':329,'multiline':True]['text':'
 * __wt_modify_apply_item --
 *     Apply a single set of WT_MODIFY changes to a WT_ITEM buffer. This function assumes the size
 *     of the value is larger than or equal to 0 except for the string format which must be larger
 *     than 0.
 ','line_number':348,'multiline':True]['text':'
     * Get the number of modify entries and set a second pointer to reference the replacement data.
     ','line_number':364,'multiline':True]['text':'
     * Modifies can only be applied on a single value field. Make sure we are not applying modifies
     * to schema with multiple value fields.
     ','line_number':371,'multiline':True]['text':'
     * Grow the buffer first. This function is often called using a cursor buffer referencing
     * on-page memory and it's easy to overwrite a page. A side-effect of growing the buffer is to
     * ensure the buffer's value is in buffer-local memory.
     *
     * Because the buffer may reference an overflow item, the data may not start at the start of the
     * buffer's memory and we have to correct for that.
     ','line_number':378,'multiline':True]['text':'
     * Decrement the size to discard the trailing nul (done after growing the buffer to ensure it
     * can be restored without further checking).
     ','line_number':389,'multiline':True]['text':' string size must be larger than 0 with trailing nul. ','line_number':394,'multiline':True]['text':' Grow the buffer first, correcting for the data offset. ','line_number':405,'multiline':True]['text':' Restore the trailing nul. ','line_number':418,'multiline':True]['text':'
 * __wt_modify_apply_api --
 *     Apply a single set of WT_MODIFY changes to a buffer, the cursor API interface.
 ','line_number':425,'multiline':True]['text':'
 * __wt_modify_reconstruct_from_upd_list --
 *     Takes an in-memory modify and populates an update value with the reconstructed full value.
 ','line_number':445,'multiline':True]['text':' While we have a pointer to our original modify, grab this information. ','line_number':463,'multiline':True]['text':' Construct full update ','line_number':469,'multiline':True]['text':' Find a complete update. ','line_number':471,'multiline':True]['text':'
     * If there's no full update, the base item is the on-page item. If the update is a tombstone,
     * the base item is an empty item.
     ','line_number':482,'multiline':True]['text':'
         * Callers of this function set the cursor slot to an impossible value to check we don't try
         * and return on-page values when the update list should have been sufficient (which
         * happens, for example, if an update list was truncated, deleting the standard update
         * required by a previous modify update). Assert the case.
         ','line_number':487,'multiline':True]['text':'
         * We race with checkpoint reconciliation removing the overflow items. Retry the read as the
         * value should now be appended to the update chain by checkpoint reconciliation.
         ','line_number':498,'multiline':True]['text':' We should not read overflow removed after retry. ','line_number':507,'multiline':True]['text':'
         * Applying modifies on top of a tombstone is invalid. So if we're using the onpage value,
         * the stop time point should be unset.
         ','line_number':510,'multiline':True]['text':' The base update must not be a tombstone. ','line_number':517,'multiline':True]['text':' Once we have a base item, roll forward through any visible modify updates. ','line_number':521,'multiline':True]