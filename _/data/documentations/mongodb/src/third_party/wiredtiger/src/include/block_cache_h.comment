['text':'-
 * Copyright (c) 2014-2020 MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * WiredTiger's block cache. It is used to cache blocks identical to those that live on disk in a
 * faster storage medium, such as NVRAM.
 ','line_number':9,'multiline':True]['text':' Cache types. ','line_number':18,'multiline':True]['text':' Hash bucket array size. ','line_number':23,'multiline':True]['text':' How often we compute the total size of the files open in the block manager. ','line_number':28,'multiline':True]['text':' Eviction references window ','line_number':31,'multiline':True]['text':' Not evicting for various reasons ','line_number':32,'multiline':True]['text':' Not evicting because of frequency counter ','line_number':33,'multiline':True]['text':' Block access operations. ','line_number':35,'multiline':True]['text':'
 * WT_BLKCACHE_ITEM --
 *     Block cache item. It links with other items in the same hash bucket.
 ','line_number':40,'multiline':True]['text':'
     * This counter is incremented every time a block is referenced and decremented every time the
     * eviction thread sweeps through the cache. This counter will be low for blocks that have not
     * been reused or for blocks that were reused in the past but lost their appeal. In this sense,
     * this counter is a metric combining frequency and recency, and hence its name.
     ','line_number':51,'multiline':True]['text':' References ','line_number':59,'multiline':True]['text':' File ID ','line_number':61,'multiline':True]['text':' Address cookie ','line_number':62,'multiline':True]['text':'
 * WT_BLKCACHE --
 *     Block cache metadata includes the hashtable of cached items, number of cached data blocks
 * and the total amount of space they occupy.
 ','line_number':66,'multiline':True]['text':' Locked: Block manager cache. Locks are per-bucket. ','line_number':72,'multiline':True]['text':' If destroying the cache ','line_number':77,'multiline':True]['text':' Seconds an unused block stays in the cache ','line_number':78,'multiline':True]['text':' Don't cache blocks written by checkpoints ','line_number':80,'multiline':True]['text':' Cache blocks on writes ','line_number':81,'multiline':True]['text':' NVRAM connection ','line_number':84,'multiline':True]['text':' The absolute path of the file system on NVRAM device ','line_number':86,'multiline':True]['text':' Number of bytes in the block cache that triggers eviction ','line_number':88,'multiline':True]['text':' Overhead percentage that suppresses population and eviction ','line_number':89,'multiline':True]['text':' Estimated size of all files used by the workload. ','line_number':91,'multiline':True]['text':' Counter for recalculating the aggregate file size ','line_number':92,'multiline':True]['text':'
     * This fraction tells us the ratio of total file data to the application-declared size of the
     * OS filesystem buffer cache, which makes the use of this block cache unnecessary. Suppose we
     * set that fraction to 50%. Then if half of our total file data fits into whatever value the
     * user gives us for the filesystem buffer cache, we consider this block cache unhelpful.
     *
     * E.g., if the fraction is set to 50%, our aggregate file size is 500GB, and the application
     * declares there to be 300GB of OS filesystem buffer cache, then we will not use this block
     * cache, because half of our total file size (250GB) would fit into such a buffer cache.
     ','line_number':94,'multiline':True]['text':' Number of block cache hash buckets ','line_number':106,'multiline':True]['text':' Type of block cache (NVRAM or DRAM) ','line_number':107,'multiline':True]['text':' Bytes in the block cache ','line_number':108,'multiline':True]['text':' Block cache size ','line_number':109,'multiline':True]['text':' Configured size of system RAM ','line_number':110,'multiline':True]['text':' The per-block number of references triggering eviction. ','line_number':112,'multiline':True]['text':'
     * Various metrics helping us measure the overhead and decide if to bypass the cache. We access
     * some of them without synchronization despite races. These serve as heuristics, and we don't
     * need precise values for them to be useful. If, because of races, we lose updates of these
     * values, assuming that we lose them at the same rate for all variables, the ratio should
     * remain roughly accurate. We care about the ratio.
     ','line_number':114,'multiline':True]['text':' Histograms keeping track of number of references to each block ','line_number':125,'multiline':True]