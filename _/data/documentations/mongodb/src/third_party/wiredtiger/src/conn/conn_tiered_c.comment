['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * !!!
 * GCC with -Wformat-nonliteral complains about calls to strftime in this file.
 * There's nothing wrong, this makes the warning go away.
 ','line_number':13,'multiline':True]['text':'
 * __tiered_server_run_chk --
 *     Check to decide if the tiered storage server should continue running.
 ','line_number':22,'multiline':True]['text':'
 * __tier_storage_remove_local --
 *     Perform one iteration of tiered storage local object removal.
 ','line_number':32,'multiline':True]['text':' Check if we're quitting or being reconfigured. ','line_number':47,'multiline':True]['text':'
         * If the handle is still open, it could still be in use for reading. In that case put the
         * work unit back on the work queue and keep trying.
         ','line_number':59,'multiline':True]['text':'
             * We are responsible for freeing the work unit when we're done with it.
             ','line_number':65,'multiline':True]['text':'
             * Update the time on the entry before pushing it back on the queue so that we don't get
             * into an infinite loop trying to drop an open file that may be in use a while.
             ','line_number':74,'multiline':True]['text':'
 * __tier_flush_meta --
 *     Perform one iteration of altering the metadata after a flush. This is in its own function so
 *     that we can hold the schema lock while doing the metadata tracking.
 ','line_number':91,'multiline':True]['text':' Avoid "unused variable" warnings in non-debug builds. ','line_number':118,'multiline':True]['text':'
     * Once the flush call succeeds we want to first remove the file: entry from the metadata and
     * then update the object: metadata to indicate the flush is complete. Record the flush
     * timestamp from the btree handle, which is the last timestamp when this tree was flushed.
     ','line_number':126,'multiline':True]['text':'
 * __tier_do_operation --
 *     Perform one iteration of copying newly flushed objects to shared storage or post-flush
 *     processing.
 ','line_number':159,'multiline':True]['text':'
     * It is possible that the tiered object was closed before the work unit was processed. The work
     * unit holds a reference on the dhandle but if the bucket storage is gone there is nothing to
     * do.
     ','line_number':178,'multiline':True]['text':' WT_TIERED_WORK_FLUSH ','line_number':207,'multiline':True]['text':' This call make take a while, and may fail due to network timeout. ','line_number':208,'multiline':True]['text':'
         * If a user did a flush_tier with sync off, it is possible that a drop happened before the
         * flush work unit was processed. Ignore non-existent errors from either previous call.
         ','line_number':215,'multiline':True]['text':' Cache the flushed content into chunk cache. ','line_number':222,'multiline':True]['text':'
             * After successful flushing, push a work unit to perform whatever post-processing the
             * shared storage wants to do for this object. Note that this work unit is unrelated to
             * the remove local work unit below. They do not need to be in any order and do not
             * interfere with each other.
             ','line_number':227,'multiline':True]['text':'
             * After successful flushing, push a work unit to remove the local object in the future.
             * The object will be removed locally after the local retention period expires.
             ','line_number':234,'multiline':True]['text':'
             * Continue with the error ignored if we've been told to do that.
             ','line_number':240,'multiline':True]['text':'
 * __tier_operation --
 *     Given an ID generate the URI names and call the operation code to flush or finish.
 ','line_number':254,'multiline':True]['text':'
 * __tier_storage_finish --
 *     Perform one iteration of shared storage post-flush work. This is separated from copying the
 *     objects to shared storage to allow the flush_tier call to return after only the necessary
 *     work has completed.
 ','line_number':275,'multiline':True]['text':'
     * Sleep a known period of time so that tests using the timing stress flag can have an idea when
     * to check for the cache operation to complete. Sleep one second before processing the work
     * queue of cache work units.
     ','line_number':288,'multiline':True]['text':' Check if we're quitting or being reconfigured. ','line_number':296,'multiline':True]['text':'
         * We are responsible for freeing the work unit when we're done with it.
         ','line_number':304,'multiline':True]['text':'
 * __tier_storage_copy --
 *     Perform one iteration of copying newly flushed objects to the shared storage.
 ','line_number':317,'multiline':True]['text':' There is nothing to do until the checkpoint after the flush completes. ','line_number':331,'multiline':True]['text':' Check if we're quitting or being reconfigured. ','line_number':336,'multiline':True]['text':'
         * We use the checkpoint generation to avoid processing the flush items for tables that are
         * added during an in-progress flush_tier. This thread could run due to a condition timeout
         * rather than a signal. First get the checkpoint generation, then check if it is running.
         * If the checkpoint is running we can't process items from this generation count. If the
         * checkpoint is not running, we can process the items with the read generation count. If
         * the checkpoint starts after checking, it would push flush units of a higher count.
         ','line_number':340,'multiline':True]['text':'
         * We are responsible for freeing the work unit when we're done with it.
         ','line_number':354,'multiline':True]['text':'
 * __tier_storage_remove --
 *     Perform one iteration of tiered storage local tier removal.
 ','line_number':367,'multiline':True]['text':'
     * We want to walk the metadata perhaps and for each tiered URI, call remove on its file:URI
     * version.
     ','line_number':377,'multiline':True]['text':'
 * __tiered_server --
 *     The tiered storage server thread.
 ','line_number':385,'multiline':True]['text':' Condition timeout is in microseconds. ','line_number':406,'multiline':True]['text':' Wait until the next event. ','line_number':411,'multiline':True]['text':' Check if we're quitting or being reconfigured. ','line_number':415,'multiline':True]['text':'
         * Here is where we do work. Work we expect to do:
         *  - Copy any files that need moving from a flush tier call.
         *  - Perform any shared storage processing after flushing.
         *  - Remove any cached objects that are aged out.
         ','line_number':421,'multiline':True]['text':'
 * __wt_tiered_storage_create --
 *     Start the tiered storage subsystem.
 ','line_number':447,'multiline':True]['text':' Start the internal thread. ','line_number':459,'multiline':True]['text':'
     * Check for objects that are not flushed on the first flush_tier call. We cannot do that work
     * right now because it would entail opening and getting the dhandle for every table and that
     * work is already done in the flush_tier. So do it there and keep that code together.
     ','line_number':467,'multiline':True]['text':' Start the thread. ','line_number':473,'multiline':True]['text':'
 * __wt_tiered_storage_destroy --
 *     Destroy the tiered storage server thread.
 ','line_number':485,'multiline':True]['text':'
     * Stop the internal server thread. If there is unfinished work, we will recover it on startup
     * just as if there had been a system failure.
     ','line_number':498,'multiline':True]['text':' Destroy all condition variables after threads have stopped. ','line_number':524,'multiline':True]['text':' The flush condition variable must be last because any internal thread could be using it. ','line_number':526,'multiline':True]