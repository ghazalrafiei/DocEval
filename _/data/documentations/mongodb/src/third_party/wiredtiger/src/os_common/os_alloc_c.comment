['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * On systems with poor default allocators for allocations greater than 16 KB, we provide an option
 * to use TCMalloc explicitly. This is important on Windows which does not have a builtin mechanism
 * to replace C run-time memory management functions with alternatives.
 ','line_number':11,'multiline':True]['text':'
 * Include the TCMalloc header with the "-Wundef" diagnostic flag disabled. Compiling with strict
 * (where the 'Wundef' diagnostic flag is enabled), generates compilation errors where the
 * '__cplusplus' CPP macro is not defined. This being employed by the TCMalloc header to
 * differentiate C & C++ compilation environments. We don't want to define '__cplusplus' when
 * compiling C sources.
 ','line_number':17,'multiline':True]['text':'
 * __wt_calloc --
 *     ANSI calloc function.
 ','line_number':36,'multiline':True]['text':'
     * Defensive: if our caller doesn't handle errors correctly, ensure a free won't fail.
     ','line_number':46,'multiline':True]['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     ','line_number':51,'multiline':True]['text':'
 * __wt_malloc --
 *     ANSI malloc function.
 ','line_number':68,'multiline':True]['text':'
     * Defensive: if our caller doesn't handle errors correctly, ensure a free won't fail.
     ','line_number':77,'multiline':True]['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     ','line_number':82,'multiline':True]['text':'
 * __realloc_func --
 *     ANSI realloc function.
 ','line_number':99,'multiline':True]['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     *
     * Sometimes we're allocating memory and we don't care about the
     * final length -- bytes_allocated_ret may be NULL.
     ','line_number':114,'multiline':True]['text':'
     * If realloc_malloc is enabled, force a new memory allocation by using malloc, copy to the new
     * memory, scribble over the old memory then free it.
     ','line_number':136,'multiline':True]['text':'
     * Clear the allocated memory, parts of WiredTiger depend on allocated memory being cleared.
     ','line_number':157,'multiline':True]['text':' Update caller's bytes allocated value. ','line_number':163,'multiline':True]['text':'
 * __wt_realloc --
 *     WiredTiger's realloc API.
 ','line_number':171,'multiline':True]['text':'
 * __wt_realloc_noclear --
 *     WiredTiger's realloc API, not clearing allocated memory.
 ','line_number':182,'multiline':True]['text':'
 * __wt_realloc_aligned --
 *     ANSI realloc function that aligns to buffer boundaries, configured with the
 *     "buffer_alignment" key to wiredtiger_open.
 ','line_number':193,'multiline':True]['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     ','line_number':205,'multiline':True]['text':'
         * Sometimes we're allocating memory and we don't care about the final length --
         * bytes_allocated_ret may be NULL.
         ','line_number':213,'multiline':True]['text':'
         * We are going to allocate an aligned buffer. When we do this repeatedly, the allocator is
         * expected to start on a boundary each time, account for that additional space by never
         * asking for less than a full alignment size. The primary use case for aligned buffers is
         * Linux direct I/O, which requires that the size be a multiple of the alignment anyway.
         ','line_number':225,'multiline':True]['text':' Update caller's bytes allocated value. ','line_number':244,'multiline':True]['text':'
     * If there is no posix_memalign function, or no alignment configured, fall back to realloc.
     *
     * Windows note: Visual C CRT memalign does not match POSIX behavior and would also double each
     * allocation so it is bad for memory use.
     ','line_number':252,'multiline':True]['text':'
 * __wt_memdup --
 *     Duplicate a byte string of a given length.
 ','line_number':261,'multiline':True]['text':' quiet clang scan-build ','line_number':272,'multiline':True]['text':'
 * __wt_strndup --
 *     ANSI strndup function.
 ','line_number':280,'multiline':True]['text':' Copy and nul-terminate. ','line_number':294,'multiline':True]['text':' quiet clang scan-build ','line_number':297,'multiline':True]['text':'
 * __wt_free_int --
 *     ANSI free function.
 ','line_number':306,'multiline':True]['text':' ANSI C free semantics ','line_number':317,'multiline':True]['text':'
     * If there's a serialization bug we might race with another thread. We can't avoid the race
     * (and we aren't willing to flush memory), but we minimize the window by clearing the free
     * address, hoping a racing thread will see, and won't free, a NULL pointer.
     ','line_number':320,'multiline':True]['text':'
     * !!!
     * This function MUST handle a NULL WT_SESSION_IMPL handle.
     ','line_number':327,'multiline':True]