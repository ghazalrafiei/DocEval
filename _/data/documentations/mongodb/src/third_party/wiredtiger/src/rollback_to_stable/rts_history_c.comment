['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_rts_history_delete_hs --
 *     Delete the updates for a key in the history store until the first update (including) that is
 *     larger than or equal to the specified timestamp.
 ','line_number':11,'multiline':True]['text':' Open a history store table cursor. ','line_number':32,'multiline':True]['text':'
     * Rollback-to-stable operates exclusively (i.e., it is the only active operation in the system)
     * outside the constraints of transactions. Therefore, there is no need for snapshot based
     * visibility checks.
     ','line_number':34,'multiline':True]['text':'
     * Scan the history store for the given btree and key with maximum start timestamp to let the
     * search point to the last version of the key and start traversing backwards to delete all the
     * records until the first update with the start timestamp larger than or equal to the specified
     * timestamp.
     ','line_number':43,'multiline':True]['text':' Retrieve the time window from the history cursor. ','line_number':52,'multiline':True]['text':'
         * Remove all history store versions with a stop timestamp greater than the start/stop
         * timestamp of a stable update in the data store.
         ','line_number':55,'multiline':True]['text':'
         * The globally visible start time windows are cleared during history store reconciliation.
         * Treat them also as a stable entry removal from the history store.
         ','line_number':75,'multiline':True]['text':'
 * __wt_rts_history_btree_hs_truncate --
 *     Wipe all history store updates for the btree (non-timestamped tables)
 ','line_number':92,'multiline':True]['text':' Open a history store start cursor. ','line_number':116,'multiline':True]['text':' Open a history store stop cursor. ','line_number':131,'multiline':True]['text':' If we get not found, we are at the largest btree id in the history store. ','line_number':139,'multiline':True]['text':' We can find the start point then we must be able to find the stop point. ','line_number':150,'multiline':True]['text':'
 * __wt_rts_history_final_pass --
 *     Perform rollback to stable on the history store to remove any entries newer than the stable
 *     timestamp.
 ','line_number':179,'multiline':True]['text':'
     * Find out the max durable timestamp of the history store from checkpoint. Most of the history
     * store updates have stop timestamp either greater or equal to the start timestamp except for
     * the updates written for the prepared updates on the data store. To abort the updates with no
     * stop timestamp, we must include the newest stop timestamp also into the calculation of
     * maximum timestamp of the history store.
     ','line_number':201,'multiline':True]['text':'
     * The rollback operation should be skipped if there is no stable timestamp. Otherwise, it
     * should be performed if one of the following criteria is satisfied:
     * - The history store has dirty content.
     * - The checkpoint durable start/stop timestamp is greater than the rollback timestamp.
     *
     * Note that the corresponding code for RTS btree apply also checks whether there _are_
     * timestamped updates by checking max_durable_ts; that check is redundant here for several
     * reasons, the most immediate being that max_durable_ts cannot be none (zero) because it's
     * greater than rollback_timestamp, which is itself greater than zero.
     ','line_number':224,'multiline':True]['text':'
     * Truncate history store entries from the partial backup remove list. The list holds all of the
     * btree ids that do not exist as part of the database anymore due to performing a selective
     * restore from backup.
     ','line_number':248,'multiline':True]