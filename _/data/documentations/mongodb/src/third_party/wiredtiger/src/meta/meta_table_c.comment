['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __metadata_turtle --
 *     Return if a key's value should be taken from the turtle file.
 ','line_number':11,'multiline':True]['text':'
 * __wt_metadata_turtle_rewrite --
 *     Rewrite the turtle file. We wrap this because the lower functions expect a URI key and config
 *     value pair for the metadata. This function exists to push out the other contents to the
 *     turtle file such as a change in compatibility information.
 ','line_number':37,'multiline':True]['text':'
 * __wt_metadata_cursor_open --
 *     Opens a cursor on the metadata.
 ','line_number':55,'multiline':True]['text':'
     * Retrieve the btree from the cursor, rather than the session because we don't always switch
     * the metadata handle in to the session before entering this function.
     ','line_number':70,'multiline':True]['text':'
     * Skew eviction so metadata almost always stays in cache.
     *
     * Test before setting so updates can't race in subsequent opens (the first update is safe
     * because it's single-threaded from wiredtiger_open).
     ','line_number':77,'multiline':True]['text':'
 * __wt_metadata_cursor --
 *     Returns the session's cached metadata cursor, unless it's in use, in which case it opens and
 *     returns another metadata cursor.
 ','line_number':89,'multiline':True]['text':'
     * If we don't have a cached metadata cursor, or it's already in use, we'll need to open a new
     * one.
     ','line_number':99,'multiline':True]['text':'
     * If there's no cursor return, we're done, our caller should have just been triggering the
     * creation of the session's cached cursor. There should not be an open local cursor in that
     * case, but caution doesn't cost anything.
     ','line_number':112,'multiline':True]['text':'
     * If the cached cursor is in use, return the newly opened cursor, else mark the cached cursor
     * in use and return it.
     ','line_number':120,'multiline':True]['text':'
 * __wt_metadata_cursor_close --
 *     Close a metadata cursor.
 ','line_number':133,'multiline':True]['text':'
 * __wt_metadata_cursor_release --
 *     Release a metadata cursor.
 ','line_number':148,'multiline':True]['text':'
     * If using the session's cached metadata cursor, clear the in-use flag and reset it, otherwise,
     * discard the cursor.
     ','line_number':163,'multiline':True]['text':'
 * __wt_metadata_insert --
 *     Insert a row into the metadata.
 ','line_number':176,'multiline':True]['text':'
 * __wt_metadata_update --
 *     Update a row in the metadata.
 ','line_number':206,'multiline':True]['text':' This cursor needs to have overwrite semantics. ','line_number':231,'multiline':True]['text':'
 * __wt_metadata_remove --
 *     Remove a row from the metadata.
 ','line_number':242,'multiline':True]['text':'
     * Take, release, and reacquire the metadata cursor. It's complicated, but that way the
     * underlying meta-tracking function doesn't have to open a second metadata cursor, it can use
     * the session's cached one.
     ','line_number':260,'multiline':True]['text':'
 * __wt_metadata_search --
 *     Return a copied row from the metadata. The caller is responsible for freeing the allocated
 *     memory.
 ','line_number':282,'multiline':True]['text':'
         * The returned value should only be set if ret is non-zero, but Coverity is convinced
         * otherwise. The code path is used enough that Coverity complains a lot, add an error check
         * to get some peace and quiet.
         ','line_number':302,'multiline':True]['text':'
     * All metadata reads are at read-uncommitted isolation. That's because once a schema-level
     * operation completes, subsequent operations must see the current version of checkpoint
     * metadata, or they may try to read blocks that may have been freed from a file. Metadata
     * updates use non-transactional techniques (such as the schema and metadata locks) to protect
     * access to in-flight updates.
     ','line_number':313,'multiline':True]['text':'
 * __wt_metadata_btree_id_to_uri --
 *     Given a btree id, find the matching entry in the metadata and return a copy of the uri. The
 *     caller has to free the returned uri.
 ','line_number':336,'multiline':True]['text':' Return a copy as the uri. ','line_number':357,'multiline':True]