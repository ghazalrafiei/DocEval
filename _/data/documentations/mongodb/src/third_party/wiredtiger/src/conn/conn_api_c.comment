['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * ext_collate --
 *     Call the collation function (external API version).
 ','line_number':11,'multiline':True]['text':'
 * ext_collator_config --
 *     Given a configuration, configure the collator (external API version).
 ','line_number':31,'multiline':True]['text':' The default is a standard lexicographic comparison. ','line_number':48,'multiline':True]['text':'
 * __collator_confchk --
 *     Check for a valid custom collator.
 ','line_number':62,'multiline':True]['text':'
 * __wt_collator_config --
 *     Configure a custom collator.
 ','line_number':86,'multiline':True]['text':'
 * __conn_add_collator --
 *     WT_CONNECTION->add_collator method.
 ','line_number':114,'multiline':True]['text':'
 * __wt_conn_remove_collator --
 *     Remove collator added by WT_CONNECTION->add_collator, only used internally.
 ','line_number':154,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':168,'multiline':True]['text':' Call any termination method. ','line_number':170,'multiline':True]['text':'
 * __compressor_confchk --
 *     Validate the compressor.
 ','line_number':181,'multiline':True]['text':'
 * __wt_compressor_config --
 *     Given a configuration, configure the compressor.
 ','line_number':205,'multiline':True]['text':'
 * __conn_add_compressor --
 *     WT_CONNECTION->add_compressor method.
 ','line_number':215,'multiline':True]['text':'
 * __wt_conn_remove_compressor --
 *     remove compressor added by WT_CONNECTION->add_compressor, only used internally.
 ','line_number':255,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':269,'multiline':True]['text':' Call any termination method. ','line_number':271,'multiline':True]['text':'
 * __conn_add_data_source --
 *     WT_CONNECTION->add_data_source method.
 ','line_number':282,'multiline':True]['text':' Link onto the environment's list of data sources. ','line_number':305,'multiline':True]['text':'
 * __wt_conn_remove_data_source --
 *     Remove data source added by WT_CONNECTION->add_data_source.
 ','line_number':320,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':334,'multiline':True]['text':' Call any termination method. ','line_number':336,'multiline':True]['text':'
 * __encryptor_confchk --
 *     Validate the encryptor.
 ','line_number':347,'multiline':True]['text':'
 * __wt_encryptor_config --
 *     Given a configuration, configure the encryptor.
 ','line_number':375,'multiline':True]['text':'
     * Check if encryption is set on the connection. If someone wants encryption on a table, it
     * needs to be configured on the database as well.
     ','line_number':404,'multiline':True]['text':'
 * __conn_add_encryptor --
 *     WT_CONNECTION->add_encryptor method.
 ','line_number':446,'multiline':True]['text':'
     * Verify that terminate is set if customize is set. We could relax this restriction and give an
     * error if customize returns an encryptor and terminate is not set. That seems more prone to
     * mistakes.
     ','line_number':472,'multiline':True]['text':'
 * __wt_conn_remove_encryptor --
 *     remove encryptors added by WT_CONNECTION->add_encryptor, only used internally.
 ','line_number':501,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':516,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':519,'multiline':True]['text':' Call any termination method. ','line_number':521,'multiline':True]['text':' Call any termination method. ','line_number':529,'multiline':True]['text':'
 * __conn_add_extractor --
 *     WT_CONNECTION->add_extractor method.
 ','line_number':540,'multiline':True]['text':'
 * __extractor_confchk --
 *     Check for a valid custom extractor.
 ','line_number':580,'multiline':True]['text':'
 * __wt_extractor_config --
 *     Given a configuration, configure the extractor.
 ','line_number':604,'multiline':True]['text':'
 * __wt_conn_remove_extractor --
 *     Remove extractor added by WT_CONNECTION->add_extractor, only used internally.
 ','line_number':639,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':653,'multiline':True]['text':' Call any termination method. ','line_number':655,'multiline':True]['text':'
 * __conn_add_storage_source --
 *     WT_CONNECTION->add_storage_source method.
 ','line_number':666,'multiline':True]['text':'
 * __conn_get_storage_source --
 *     WT_CONNECTION->get_storage_source method.
 ','line_number':708,'multiline':True]['text':'
 * __wt_conn_remove_storage_source --
 *     Remove storage_source added by WT_CONNECTION->add_storage_source, only used internally.
 ','line_number':739,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':755,'multiline':True]['text':' Remove from the connection's list, free memory. ','line_number':758,'multiline':True]['text':' Call any termination method. ','line_number':770,'multiline':True]['text':'
 * __conn_ext_file_system_get --
 *     WT_EXTENSION.file_system_get method. Get file system in use.
 ','line_number':784,'multiline':True]['text':'
 * __conn_get_extension_api --
 *     WT_CONNECTION.get_extension_api method.
 ','line_number':803,'multiline':True]['text':' Streaming pack/unpack API ','line_number':841,'multiline':True]['text':'
 * __conn_builtin_init --
 *     Initialize and configure a builtin extension.
 ','line_number':857,'multiline':True]['text':'
 * __conn_builtin_extensions --
 *     Load extensions that are enabled via --with-builtins
 ','line_number':901,'multiline':True]['text':' Avoid warnings if no builtin extensions are configured. ','line_number':924,'multiline':True]['text':'
 * __conn_load_extension_int --
 *     Internal extension load interface
 ','line_number':932,'multiline':True]['text':' Ensure that the load matches the phase of startup we are in. ','line_number':952,'multiline':True]['text':'
     * This assumes the underlying shared libraries are reference counted, that is, that re-opening
     * a shared library simply increments a ref count, and closing it simply decrements the ref
     * count, and the last close discards the reference entirely -- in other words, we do not check
     * to see if we've already opened this shared library.
     ','line_number':957,'multiline':True]['text':'
     * Find the load function, remember the unload function for when we close.
     ','line_number':965,'multiline':True]['text':' Call the load function last, it simplifies error handling. ','line_number':982,'multiline':True]['text':' Link onto the environment's list of open libraries. ','line_number':985,'multiline':True]['text':'
 * __conn_load_extension --
 *     WT_CONNECTION->load_extension method.
 ','line_number':1000,'multiline':True]['text':'
 * __conn_load_extensions --
 *     Load the list of application-configured extensions.
 ','line_number':1020,'multiline':True]['text':'
 * __conn_get_home --
 *     WT_CONNECTION.get_home method.
 ','line_number':1057,'multiline':True]['text':'
 * __conn_configure_method --
 *     WT_CONNECTION.configure_method method.
 ','line_number':1067,'multiline':True]['text':'
 * __conn_is_new --
 *     WT_CONNECTION->is_new method.
 ','line_number':1088,'multiline':True]['text':'
 * __conn_rollback_transaction_callback --
 *     Rollback a single transaction, callback from the session array walk.
 ','line_number':1098,'multiline':True]['text':'
 * __conn_close_session_callback --
 *     Close a single session, callback from the session array walk.
 ','line_number':1119,'multiline':True]['text':'
     * Notify the user that we are closing the session handle via the registered close callback.
     ','line_number':1133,'multiline':True]['text':'
 * __conn_close --
 *     WT_CONNECTION->close method.
 ','line_number':1143,'multiline':True]['text':'
     * Ramp the eviction dirty target down to encourage eviction threads to clear dirty content out
     * of cache.
     ','line_number':1163,'multiline':True]['text':'
     * Rollback all running transactions. We do this as a separate pass because an active
     * transaction in one session could cause trouble when closing a file, even if that session
     * never referenced that file.
     ','line_number':1176,'multiline':True]['text':' Close open, external sessions. ','line_number':1184,'multiline':True]['text':'
     * Set MINIMAL again and call the event handler so that statistics can monitor any end of
     * connection activity (like the final checkpoint).
     ','line_number':1188,'multiline':True]['text':' Wait for in-flight operations to complete. ','line_number':1197,'multiline':True]['text':' Shut down pre-fetching - it should not operate while closing the connection. ','line_number':1200,'multiline':True]['text':'
     * There should be no active transactions running now. Therefore, it's safe for operations to
     * proceed without doing snapshot visibility checks.
     ','line_number':1203,'multiline':True]['text':'
     * After the LSM threads have exited, we won't open more files for the application. However, the
     * sweep server is still running and it can close file handles at the same time the final
     * checkpoint is reviewing open data handles (forcing checkpoint to reopen handles). Shut down
     * the sweep server.
     ','line_number':1211,'multiline':True]['text':'
     * Shut down the checkpoint, compact and capacity server threads: we don't want to throttle
     * writes and we're about to do a final checkpoint separately from the checkpoint server.
     ','line_number':1219,'multiline':True]['text':' Perform a final checkpoint and shut down the global transaction state. ','line_number':1226,'multiline':True]['text':' We know WT_CONN_MINIMAL is set a few lines above no need to check again. ','line_number':1229,'multiline':True]['text':'
     * See if close should wait for tiered storage to finish any flushing after the final
     * checkpoint.
     ','line_number':1235,'multiline':True]['text':'
     * Now that the final checkpoint is complete, the shutdown process should not allocate a
     * significant amount of new memory. If a user configured leaking memory on shutdown, we will
     * avoid freeing memory at this time. This allows for faster shutdown as freeing all the content
     * of the cache can be slow.
     ','line_number':1249,'multiline':True]['text':' Time since the shutdown has started. ','line_number':1259,'multiline':True]['text':' We no longer have a session, don't try to update it. ','line_number':1269,'multiline':True]['text':'
 * __conn_debug_info --
 *     WT_CONNECTION->debug_info method.
 ','line_number':1275,'multiline':True]['text':'
 * __conn_reconfigure --
 *     WT_CONNECTION->reconfigure method.
 ','line_number':1318,'multiline':True]['text':'
 * __conn_open_session --
 *     WT_CONNECTION->open_session method.
 ','line_number':1337,'multiline':True]['text':'
 * __conn_query_timestamp --
 *     WT_CONNECTION->query_timestamp method.
 ','line_number':1369,'multiline':True]['text':'
 * __conn_set_timestamp --
 *     WT_CONNECTION->set_timestamp method.
 ','line_number':1391,'multiline':True]['text':'
 * __conn_rollback_to_stable --
 *     WT_CONNECTION->rollback_to_stable method.
 ','line_number':1413,'multiline':True]['text':'
 * __conn_config_append --
 *     Append an entry to a config stack.
 ','line_number':1433,'multiline':True]['text':'
 * __conn_config_readonly --
 *     Append an entry to a config stack that overrides some settings when read-only is configured.
 ','line_number':1446,'multiline':True]['text':'
     * Override certain settings. In general we override the options whose default conflicts. Other
     * settings at odds will return an error and will be checked when those settings are processed.
     ','line_number':1455,'multiline':True]['text':'
 * __conn_config_check_version --
 *     Check if a configuration version isn't compatible.
 ','line_number':1468,'multiline':True]['text':'
     * Version numbers aren't included in all configuration strings, but we check all of them just
     * in case. Ignore configurations without a version.
     ','line_number':1477,'multiline':True]['text':'
 * __conn_config_file --
 *     Read WiredTiger config files from the home directory.
 ','line_number':1495,'multiline':True]['text':' Configuration files are always optional. ','line_number':1512,'multiline':True]['text':' Open the configuration file. ','line_number':1517,'multiline':True]['text':'
     * Sanity test: a 100KB configuration file would be insane. (There's no practical reason to
     * limit the file size, but I can either limit the file size to something rational, or add code
     * to test if the wt_off_t size is larger than a uint32_t, which is more complicated and a waste
     * of time.)
     ','line_number':1523,'multiline':True]['text':'
     * Copy the configuration file into memory, with a little slop, I'm not interested in debugging
     * off-by-ones.
     *
     * The beginning of a file is the same as if we run into an unquoted newline character, simplify
     * the parsing loop by pretending that's what we're doing.
     ','line_number':1533,'multiline':True]['text':'
     * Collapse the file's lines into a single string: newline characters are replaced with commas
     * unless the newline is quoted or backslash escaped. Comment lines (an unescaped newline where
     * the next non- white-space character is a hash), are discarded.
     ','line_number':1545,'multiline':True]['text':'
         * Backslash pairs pass through untouched, unless immediately preceding a newline, in which
         * case both the backslash and the newline are discarded. Backslash characters escape quoted
         * characters, too, that is, a backslash followed by a quote doesn't start or end a quoted
         * string.
         ','line_number':1551,'multiline':True]['text':'
         * If we're in a quoted string, or starting a quoted string, take all characters, including
         * white-space and newlines.
         ','line_number':1567,'multiline':True]['text':' Everything else gets taken, except for newline characters. ','line_number':1579,'multiline':True]['text':'
         * Replace any newline characters with commas (and strings of commas are safe).
         *
         * After any newline, skip to a non-white-space character; if the next character is a hash
         * mark, skip to the next newline.
         ','line_number':1586,'multiline':True]['text':' Check any version. ','line_number':1608,'multiline':True]['text':' Check the configuration information. ','line_number':1611,'multiline':True]['text':' Append it to the stack. ','line_number':1617,'multiline':True]['text':'*
     * Encountering an invalid configuration string from the base configuration file suggests
     * that there is corruption present in the file.
     ','line_number':1623,'multiline':True]['text':'
 * __conn_env_var --
 *     Get an environment variable, but refuse to use it if running with additional privilege and
 *     "use_environment_priv" not configured.
 ','line_number':1635,'multiline':True]['text':' Only use environment variables if "use_environment" is configured. ','line_number':1648,'multiline':True]['text':' Get a copy of the variable, if any. ','line_number':1653,'multiline':True]['text':'
     * Security stuff:
     *
     * Don't use the environment variable if the process has additional privileges, unless
     * "use_environment_priv" is configured.
     ','line_number':1658,'multiline':True]['text':'
 * __conn_config_env --
 *     Read configuration from an environment variable, if set.
 ','line_number':1680,'multiline':True]['text':' Get the WIREDTIGER_CONFIG environment variable. ','line_number':1690,'multiline':True]['text':' Check any version. ','line_number':1695,'multiline':True]['text':' Upgrade the configuration string. ','line_number':1698,'multiline':True]['text':' Check the configuration information. ','line_number':1701,'multiline':True]['text':' Append it to the stack. ','line_number':1704,'multiline':True]['text':'
 * __conn_hash_config --
 *     Configure and allocate hash buckets in the connection.
 ','line_number':1713,'multiline':True]['text':' Don't set the values in the statistics here. They're set after the connection is set up. ','line_number':1736,'multiline':True]['text':' Hash bucket arrays. ','line_number':1738,'multiline':True]['text':'
 * __conn_home --
 *     Set the database home directory.
 ','line_number':1753,'multiline':True]['text':'
     * If the application specifies a home directory, use it. Else use the WIREDTIGER_HOME
     * environment variable. Else default to ".".
     ','line_number':1760,'multiline':True]['text':'
 * __conn_single --
 *     Confirm that no other thread of control is using this database.
 ','line_number':1775,'multiline':True]['text':'
     * We first check for other threads of control holding a lock on this database, because the
     * byte-level locking functions are based on the POSIX 1003.1 fcntl APIs, which require all
     * locks associated with a file for a given process are removed when any file descriptor for the
     * file is closed by that process. In other words, we can't open a file handle on the lock file
     * until we are certain that closing that handle won't discard the owning thread's lock.
     * Applications hopefully won't open a database in multiple threads, but we don't want to have
     * it fail the first time, but succeed the second.
     ','line_number':1803,'multiline':True]['text':'
     * !!!
     * Be careful changing this code.
     *
     * We locked the WiredTiger file before release 2.3.2; a separate lock
     * file was added after 2.3.1 because hot backup has to copy the
     * WiredTiger file and system utilities on Windows can't copy locked
     * files.
     *
     * Additionally, avoid an upgrade race: a 2.3.1 release process might
     * have the WiredTiger file locked, and we're going to create the lock
     * file and lock it instead. For this reason, first acquire a lock on
     * the lock file and then a lock on the WiredTiger file, then release
     * the latter so hot backups can proceed.  (If someone were to run a
     * current release and subsequently a historic release, we could still
     * fail because the historic release will ignore our lock file and will
     * then successfully lock the WiredTiger file, but I can't think of any
     * way to fix that.)
     *
     * Open the WiredTiger lock file, optionally creating it if it doesn't
     * exist. The "optional" part of that statement is tricky: we don't want
     * to create the lock file in random directories when users mistype the
     * database home directory path, so we only create the lock file in two
     * cases: First, applications creating databases will configure create,
     * create the lock file. Second, after a hot backup, all of the standard
     * files will have been copied into place except for the lock file (see
     * above, locked files cannot be copied on Windows). If the WiredTiger
     * file exists in the directory, create the lock file, covering the case
     * of a hot backup.
     ','line_number':1822,'multiline':True]['text':'
     * If this is a read-only connection and we cannot grab the lock file, check if it is because
     * there's no write permission or if the file does not exist. If so, then ignore the error. XXX
     * Ignoring the error does allow multiple read-only connections to exist at the same time on a
     * read-only directory.
     *
     * If we got an expected permission or non-existence error then skip the byte lock.
     ','line_number':1858,'multiline':True]['text':'*
     * The WiredTiger lock file will not be created if the WiredTiger file does not exist in the
     * directory, suggesting possible corruption if the WiredTiger file was deleted. Suggest running
     * salvage.
     ','line_number':1871,'multiline':True]['text':'
         * Lock a byte of the file: if we don't get the lock, some other process is holding it,
         * we're done. The file may be zero-length, and that's OK, the underlying call supports
         * locking past the end-of-file.
         ','line_number':1886,'multiline':True]['text':'
 * If the size of the lock file is non-zero, we created it (or won a locking race with the thread
 * that created it, it doesn't matter).
 *
 * Write something into the file, zero-length files make me nervous.
 *
 * The test against the expected length is sheer paranoia (the length should be 0 or correct), but
 * it shouldn't hurt.
 ','line_number':1895,'multiline':True]['text':'
     * We own the database home, figure out if we're creating it. There are a few files created when
     * initializing the database home and we could crash in-between any of them, so there's no
     * simple test. The last thing we do during initialization is rename a turtle file into place,
     * and there's never a database home after that point without a turtle file. If the turtle file
     * doesn't exist, it's a create.
     ','line_number':1911,'multiline':True]['text':'
     * Unless we are salvaging, if the turtle file exists then the WiredTiger file should exist as
     * well.
     ','line_number':1921,'multiline':True]['text':' We own the lock file, optionally create the WiredTiger file. ','line_number':1935,'multiline':True]['text':'
     * If we're read-only, check for handled errors. Even if able to open the WiredTiger file
     * successfully, we do not try to lock it. The lock file test above is the only one we do for
     * read-only.
     ','line_number':1939,'multiline':True]['text':'
         * Lock the WiredTiger file (for backward compatibility reasons as described above).
         * Immediately release the lock, it's just a test.
         ','line_number':1954,'multiline':True]['text':'
     * If WiredTiger file exists but is size zero when it is not supposed to be (the turtle file
     * exists and we are not salvaging), write a message but don't fail.
     ','line_number':1965,'multiline':True]['text':'
     * Populate the WiredTiger file if this is a new connection or if the WiredTiger file is empty
     * and we are salvaging.
     ','line_number':1977,'multiline':True]['text':'
         * Although exclusive and the read-only configuration settings are at odds, we do not have
         * to check against read-only here because it falls out from earlier code in this function
         * preventing creation and confirming the database already exists.
         ','line_number':1991,'multiline':True]['text':'
     * We ignore the connection's lock file handle on error, it will be closed when the connection
     * structure is destroyed.
     ','line_number':2003,'multiline':True]['text':'
 * __wt_extra_diagnostics_config --
 *     Set diagnostic assertions configuration.
 ','line_number':2013,'multiline':True]['text':'
 * __debug_mode_log_retention_config --
 *     Set the log retention fields of the debugging configuration. These fields are protected by
 *     the debug log retention lock.
 ','line_number':2061,'multiline':True]['text':'
     * Checkpoint retention has some rules to simplify usage. You can turn it on to some value. You
     * can turn it off. You can reconfigure to the same value again. You cannot change the non-zero
     * value. Once it was on in the past and then turned off, you cannot turn it back on again.
     ','line_number':2079,'multiline':True]['text':'
 * __debug_mode_background_compact_config --
 *     Set the debug configurations for the background compact server.
 ','line_number':2102,'multiline':True]['text':'
 * __wt_debug_mode_config --
 *     Set debugging configuration.
 ','line_number':2135,'multiline':True]['text':'
 * __wt_json_config --
 *     Set JSON output configuration.
 ','line_number':2223,'multiline':True]['text':'
     * When reconfiguring, check if there are any configurations we care about, otherwise leave the
     * current settings in place.
     ','line_number':2241,'multiline':True]['text':' Check if JSON-encoded message strings are enabled, per event handler category. ','line_number':2249,'multiline':True]['text':'
 * __wt_verbose_config --
 *     Set verbose configuration.
 ','line_number':2262,'multiline':True]['text':'
     * When reconfiguring, check if there are any configurations we care about, otherwise leave the
     * current settings in place.
     ','line_number':2298,'multiline':True]['text':'
     * Special handling for "all". This determines the verbosity for any categories not explicitly
     * set in the config string.
     ','line_number':2308,'multiline':True]['text':'
         * If "all" isn't specified in the configuration string use the default WT_VERBOSE_NOTICE
         * verbosity level. WT_VERBOSE_NOTICE is an always-on informational verbosity message.
         ','line_number':2316,'multiline':True]['text':' "all" is a special case we've already handled above. ','line_number':2334,'multiline':True]['text':'
             * If the given event isn't specified in configuration string, set it to the default
             * verbosity level.
             ','line_number':2339,'multiline':True]['text':'
             * If no value is associated with the event (i.e passing verbose=[checkpoint]), default
             * the event to WT_VERBOSE_LEVEL_DEFAULT. Correspondingly, all legacy uses of
             * '__wt_verbose', being messages without an explicit verbosity level, will default to
             * 'WT_VERBOSE_LEVEL_DEFAULT'.
             ','line_number':2345,'multiline':True]['text':'
             * We only support verbosity values in the form of positive numbers (representing
             * verbosity levels e.g. [checkpoint:1,rts:0]) and boolean expressions (e.g.
             * [checkpoint,rts]). Return error for all other unsupported verbosity values e.g
             * negative numbers and strings.
             ','line_number':2356,'multiline':True]['text':'
 * __verbose_dump_sessions_callback --
 *     Dump a single session, optionally dumping its cursor information. If the session is internal
 *     increment the count. Callback from the session walk.
 ','line_number':2369,'multiline':True]['text':' Dump the session, passing relevant cursor information. ','line_number':2388,'multiline':True]['text':'
 * __wt_verbose_dump_sessions --
 *     Print out debugging information about sessions. Skips internal sessions but does count them.
 ','line_number':2392,'multiline':True]['text':'
     * While the verbose dump doesn't dump internal sessions it returns a count of them so we don't
     * instruct the walk to skip them.
     ','line_number':2408,'multiline':True]['text':'
 * __wt_timing_stress_config --
 *     Set timing stress configuration. There are a places we optionally make threads sleep in order
 *     to stress the system and increase the likelihood of failure. For example, there are several
 *     places where page splits are delayed to make cursor iteration races more likely.
 ','line_number':2420,'multiline':True]['text':'
     * Each split race delay is controlled using a different flag to allow more effective race
     * condition detection, since enabling all delays at once can lead to an overall slowdown to the
     * point where race conditions aren't encountered.
     *
     * Fail points are also defined in this list and will occur randomly when enabled.
     ','line_number':2429,'multiline':True]['text':'
 * __conn_write_base_config --
 *     Save the base configuration used to create a database.
 ','line_number':2457,'multiline':True]['text':'
     * Discard any base configuration setup file left-over from previous runs. This doesn't matter
     * for correctness, it's just cleaning up random files.
     ','line_number':2474,'multiline':True]['text':'
     * The base configuration file is only written if creating the database, and even then, a base
     * configuration file is optional.
     ','line_number':2480,'multiline':True]['text':'
     * We don't test separately if we're creating the database in this run as we might have crashed
     * between creating the "WiredTiger" file and creating the base configuration file. If
     * configured, there's always a base configuration file, and we rename it into place, so it can
     * only NOT exist if we crashed before it was created; in other words, if the base configuration
     * file exists, we're done.
     ','line_number':2490,'multiline':True]['text':'
     * The base configuration file contains all changes to default settings made at create, and we
     * include the user-configuration file in that list, even though we don't expect it to change.
     * Of course, an application could leave that file as it is right now and not remove a
     * configuration we need, but applications can also guarantee all database users specify
     * consistent environment variables and wiredtiger_open configuration arguments -- if we protect
     * against those problems, might as well include the application's configuration file in that
     * protection.
     *
     * We were passed the configuration items specified by the application. That list includes
     * configuring the default settings, presumably if the application configured it explicitly,
     * that setting should survive even if the default changes.
     *
     * When writing the base configuration file, we write the version and any configuration
     * information set by the application (in other words, the stack except for cfg[0]). However,
     * some configuration values need to be stripped out from the base configuration file; do that
     * now, and merge the rest to be written.
     ','line_number':2512,'multiline':True]['text':' Fix quoting for non-trivial settings. ','line_number':2547,'multiline':True]['text':' Flush the stream and rename the file into place. ','line_number':2554,'multiline':True]['text':' Close open file handle, remove any temporary file. ','line_number':2558,'multiline':True]['text':'
 * __conn_set_file_system --
 *     Configure a custom file system implementation on database open.
 ','line_number':2569,'multiline':True]['text':'
     * You can only configure a file system once, and attempting to do it again probably means the
     * extension argument didn't have early-load set and we've already configured the default file
     * system.
     ','line_number':2584,'multiline':True]['text':'
 * __conn_session_size --
 *     Return the session count for this run.
 ','line_number':2600,'multiline':True]['text':'
 * Start with 25 internal sessions to cover threads the application can't configure (for example,
 * checkpoint or statistics log server threads).
 ','line_number':2610,'multiline':True]['text':' Then, add in the thread counts applications can configure. ','line_number':2617,'multiline':True]['text':'
 * __conn_chk_file_system --
 *     Check the configured file system.
 ','line_number':2632,'multiline':True]['text':' not required: directory_sync ','line_number':2649,'multiline':True]['text':'
     * The lower-level API for returning the first matching entry was added later and not documented
     * because it's an optimization for high-end filesystems doing logging, specifically
     * pre-allocating log files. Check for the API and fall back to the standard API if not
     * available.
     ','line_number':2658,'multiline':True]['text':'
 * wiredtiger_dummy_session_init --
 *     Initialize the connection's dummy session.
 ','line_number':2670,'multiline':True]['text':'
     * We use a fake session until we can allocate and initialize the real ones. Initialize the
     * necessary fields (unfortunately, the fields we initialize have been selected by core dumps,
     * we need to do better).
     ','line_number':2681,'multiline':True]['text':' Standard I/O and error handling first. ','line_number':2689,'multiline':True]['text':' Statistics ','line_number':2693,'multiline':True]['text':'
     * Set the default session's strerror method. If one of the extensions being loaded reports an
     * error via the WT_EXTENSION_API strerror method, but doesn't supply that method a WT_SESSION
     * handle, we'll use the WT_CONNECTION_IMPL's default session and its strerror method.
     ','line_number':2696,'multiline':True]['text':'
     * The dummy session should never be used to access data handles.
     ','line_number':2703,'multiline':True]['text':'
 * __conn_version_verify --
 *     Verify the versions before modifying the database.
 ','line_number':2709,'multiline':True]['text':' Always set the compatibility versions. ','line_number':2722,'multiline':True]['text':'
     * If we're salvaging, don't verify now.
     ','line_number':2724,'multiline':True]['text':'
     * Initialize the version variables. These aren't always populated since there are expected
     * cases where the turtle files doesn't exist (restoring from a backup, for example). All code
     * that deals with recovery versions must consider the case where they are default initialized
     * to zero.
     ','line_number':2730,'multiline':True]['text':'
 * wiredtiger_open --
 *     Main library entry point: open a new connection to a WiredTiger database.
 ','line_number':2746,'multiline':True]['text':' Leave lots of space for optional additional configuration. ','line_number':2779,'multiline':True]['text':'
     * Immediately link the structure into the connection structure list: the only thing ever looked
     * at on that list is the database name, and a NULL value is fine.
     ','line_number':2794,'multiline':True]['text':' Initialize the fake session used until we can create real sessions. ','line_number':2802,'multiline':True]['text':' Basic initialization of the connection structure. ','line_number':2806,'multiline':True]['text':' Check the application-specified configuration string. ','line_number':2809,'multiline':True]['text':'
     * Build the temporary, initial configuration stack, in the following
     * order (where later entries override earlier entries):
     *
     * 1. the base configuration for the wiredtiger_open call
     * 2. the config passed in by the application
     * 3. environment variable settings (optional)
     *
     * In other words, a configuration stack based on the application's
     * passed-in information and nothing else.
     ','line_number':2812,'multiline':True]['text':'
     * We need to know if configured for read-only or in-memory behavior before reading/writing the
     * filesystem. The only way the application can configure that before we touch the filesystem is
     * the wiredtiger config string or the WIREDTIGER_CONFIG environment variable.
     *
     * The environment isn't trusted by default, for security reasons; if the application wants us
     * to trust the environment before reading the filesystem, the wiredtiger_open config string is
     * the only way.
     ','line_number':2828,'multiline':True]['text':' Configure error messages so we get them right early. ','line_number':2844,'multiline':True]['text':' Set the database home so extensions have access to it. ','line_number':2849,'multiline':True]['text':'
     * Configure and allocate hash buckets. This must be done before the call to load extensions.
     * Some extensions like encryption or file systems may allocate hash arrays.
     ','line_number':2852,'multiline':True]['text':'
     * Load early extensions before doing further initialization (one early extension is to
     * configure a file system).
     ','line_number':2858,'multiline':True]['text':'
     * If the application didn't configure its own file system, configure one of ours. Check to
     * ensure we have a valid file system.
     ','line_number':2864,'multiline':True]['text':' Make sure no other thread of control already owns this database. ','line_number':2880,'multiline':True]['text':'
     * Capture the config_base setting file for later use. Again, if the application doesn't want us
     * to read the base configuration file, the WIREDTIGER_CONFIG environment variable or the
     * wiredtiger_open config string are the only ways.
     ','line_number':2885,'multiline':True]['text':'
     * Build the real configuration stack, in the following order (where
     * later entries override earlier entries):
     *
     * 1. all possible wiredtiger_open configurations
     * 2. the WiredTiger compilation version (expected to be overridden by
     *    any value in the base configuration file)
     * 3. base configuration file, created with the database (optional)
     * 4. the config passed in by the application
     * 5. user configuration file (optional)
     * 6. environment variable settings (optional)
     * 7. overrides for a read-only connection
     *
     * Clear the entries we added to the stack, we're going to build it in
     * order.
     ','line_number':2893,'multiline':True]['text':' Ignore the base_config file if config_base_set is false. ','line_number':2917,'multiline':True]['text':'
     * Merge the full configuration stack and save it for reconfiguration.
     ','line_number':2924,'multiline':True]['text':'
     * Read-only and in-memory settings may have been set in a configuration file (not optimal, but
     * we can handle it). Get those settings again so we can override other configuration settings
     * as they are processed.
     ','line_number':2929,'multiline':True]['text':'
         * Create a new stack with the merged configuration as the base. The read-only string will
         * use entry 1 and then we'll merge it again.
         ','line_number':2941,'multiline':True]['text':'
         * We override some configuration settings for read-only. Other settings that conflict with
         * and are an error with read-only are tested in their individual locations later.
         ','line_number':2948,'multiline':True]['text':'
     * Configuration ...
     *
     * We can't open sessions yet, so any configurations that cause sessions to be opened must be
     * handled inside __wt_connection_open.
     *
     * The error message configuration might have changed (if set in a configuration file, and not
     * in the application's configuration string), get it again. Do it first, make error messages
     * correct. Ditto verbose configuration so we dump everything the application wants to see.
     ','line_number':2959,'multiline':True]['text':'
     * If buffer alignment is not configured, use zero unless direct I/O is also configured, in
     * which case use the build-time default. The code to parse write through is also here because
     * it is nearly identical to direct I/O.
     ','line_number':2984,'multiline':True]['text':'
     * If the log extend length is not set use the default of the configured maximum log file size.
     * That size is not known until it is initialized as part of the log server initialization.
     ','line_number':3034,'multiline':True]['text':'
                 * When using "file_extend=(log=)", the val returned is 1. Unset the log extend
                 * length in that case to use the default.
                 ','line_number':3047,'multiline':True]['text':' Initialize the OS page size for mmap ','line_number':3094,'multiline':True]['text':' Now that we know if verbose is configured, output the version. ','line_number':3097,'multiline':True]['text':'
     * Open the connection, then reset the local session as the real one was allocated in
     * __wt_connection_open.
     ','line_number':3100,'multiline':True]['text':' Explicitly set the flag to indicate whether the database that was not shutdown cleanly. ','line_number':3108,'multiline':True]['text':' Set up the call log file. ','line_number':3113,'multiline':True]['text':'
     * This function expects the cache to be created so parse this after the rest of the connection
     * is set up.
     ','line_number':3117,'multiline':True]['text':'
     * Load the extensions after initialization completes; extensions expect everything else to be
     * in place, and the extensions call back into the library.
     ','line_number':3123,'multiline':True]['text':'
     * Do some early initialization for tiered storage, as this may affect our choice of file system
     * for some operations.
     ','line_number':3130,'multiline':True]['text':'
     * The metadata/log encryptor is configured after extensions, since extensions may load
     * encryptors. We have to do this before creating the metadata file.
     *
     * The encryption customize callback needs the fully realized set of encryption args, as simply
     * grabbing "encryption" doesn't work. As an example, configuration for the current call may
     * just be "encryption=(secretkey=xxx)", with encryption.name, encryption.keyid being
     * 'inherited' from the stored base configuration.
     ','line_number':3136,'multiline':True]['text':'
     * We need to parse the logging configuration here to verify the compatibility settings because
     * we may need the log path and encryption and compression settings.
     ','line_number':3155,'multiline':True]['text':'
     * Configuration completed; optionally write a base configuration file.
     ','line_number':3162,'multiline':True]['text':'
     * Check on the turtle and metadata files, creating them if necessary (which avoids application
     * threads racing to create the metadata file later). Once the metadata file exists, get a
     * reference to it in the connection's session.
     *
     * THE TURTLE FILE MUST BE THE LAST FILE CREATED WHEN INITIALIZING THE DATABASE HOME, IT'S WHAT
     * WE USE TO DECIDE IF WE'RE CREATING OR NOT.
     ','line_number':3167,'multiline':True]['text':' Verify the metadata file. ','line_number':3179,'multiline':True]['text':'
     * If the user wants to salvage, do so before opening the metadata cursor. We do this after the
     * call to wt_turtle_init because that moves metadata files around from backups and would
     * overwrite any salvage we did if done before that call.
     ','line_number':3186,'multiline':True]['text':' Initialize connection values from stored metadata. ','line_number':3197,'multiline':True]['text':'
     * Load any incremental backup information. This reads the metadata so must be done after the
     * turtle file is initialized.
     ','line_number':3201,'multiline':True]['text':' Start the worker threads and run recovery. ','line_number':3212,'multiline':True]['text':'
     * We want WiredTiger in a reasonably normal state - despite the salvage flag, this is a boring
     * metadata operation that should be done after metadata, transactions, schema, etc. are all up
     * and running.
     ','line_number':3215,'multiline':True]['text':'
     * If the user wants to verify WiredTiger metadata, verify the history store now that the
     * metadata table may have been salvaged and eviction has been started and recovery run.
     ','line_number':3223,'multiline':True]['text':'
     * The hash array sizes needed to be set up very early. Set them in the statistics here. Setting
     * them in the early configuration function makes them get zeroed out.
     ','line_number':3234,'multiline':True]['text':'
     * The default session should not open data handles after this point: since it can be shared
     * between threads, relying on session->dhandle is not safe.
     ','line_number':3241,'multiline':True]['text':' Discard the scratch buffers. ','line_number':3252,'multiline':True]['text':'
     * We may have allocated scratch memory when using the dummy session or the subsequently created
     * real session, and we don't want to tie down memory for the rest of the run in either of them.
     ','line_number':3259,'multiline':True]['text':'
     * Clean up the partial backup restore flag, backup btree id list. The backup id list was used
     * in recovery to truncate the history store entries and the flag was used to allow schema drops
     * to happen on tables to clean up the entries in the creation of the metadata file.
     ','line_number':3267,'multiline':True]['text':'
         * Set panic if we're returning the run recovery error or if recovery did not complete so
         * that we don't try to checkpoint data handles. We need an explicit flag instead of
         * checking that WT_CONN_LOG_RECOVER_DONE is not set because other errors earlier than
         * recovery will not have that flag set.
         ','line_number':3283,'multiline':True]['text':'
         * If we detected a data corruption issue, we really want to indicate the corruption instead
         * of whatever error was set. We cannot use standard return macros because we don't want to
         * generalize this. Record it here while we have the connection and set it after we destroy
         * the connection.
         ','line_number':3291,'multiline':True]['text':'
         * Depending on the error, shutting down the connection may again return WT_PANIC. So if we
         * detected the corruption above, set it here after closing.
         ','line_number':3300,'multiline':True]