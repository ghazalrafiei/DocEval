['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __tiered_name_check --
 *     Check if the given tiered table name exists in the shared storage. This is called from create
 *     to check if this name had previously existed, was dropped and we're now trying to create the
 *     same name. We cannot do that if shared objects exist for the old table.
 ','line_number':11,'multiline':True]['text':' See if this name exists in the shared storage. ','line_number':32,'multiline':True]['text':'
     * We need to distinguish this name from a superset name so check the length also matches.
     * Generate an object name so that we know the maximum length that our name should be and we can
     * check for the right form.
     ','line_number':39,'multiline':True]['text':'
     * This is the length of the name-<object number>.wtobj string. The object name for any given
     * tiered name is fixed length as the object number field is zero-filled and fixed, as is the
     * suffix. So it is sufficient to match the name prefix and length below.
     ','line_number':47,'multiline':True]['text':'
         * We know the name prefix matches from the directory list. If the length matches the full
         * object name with id number and suffix, then we have a match. We don't know what object
         * number the match may contain so we cannot do a full string comparison.
         ','line_number':55,'multiline':True]['text':'
             * While we want to return EEXIST if we find the object exists, we only want to return
             * the error, and not give a message. Otherwise cases that are commonly handled can give
             * a lot of spurious error messages.
             ','line_number':62,'multiline':True]['text':'
 * __tiered_dhandle_setup --
 *     Given a tiered index and name, set up the dhandle information.
 ','line_number':81,'multiline':True]['text':' Reference the dhandle and set it in the tier array. ','line_number':108,'multiline':True]['text':' The Btree needs to use the bucket storage to do file system operations. ','line_number':113,'multiline':True]['text':'
 * __tiered_init_tiers --
 *     Given a tiered table 'tiers' configuration set up the dhandle array.
 ','line_number':121,'multiline':True]['text':' Insert metadata for all tiered objects. ','line_number':137,'multiline':True]['text':'
             * It's OK if some of the objects are not there. They may have been dropped before
             * export.
             ','line_number':142,'multiline':True]['text':' Set up the tiers array based on the metadata. ','line_number':155,'multiline':True]['text':' Set up the name for any tier that needs it. ','line_number':170,'multiline':True]['text':' Set up the tiered name if we're not on the first object. ','line_number':177,'multiline':True]['text':'
 * __tiered_create_local --
 *     Create a new local name for a tiered table. Must be called single threaded.
 ','line_number':190,'multiline':True]['text':' If this ever can be multi-threaded, this would need to be atomic. ','line_number':207,'multiline':True]['text':' XXX Remove when we have real flags. ','line_number':209,'multiline':True]['text':'
     * Remove any checkpoint entry from the configuration. The local file we are now creating is
     * empty and does not have any checkpoints.
     ','line_number':220,'multiline':True]['text':' Preserve any quotation marks during the copy. ','line_number':228,'multiline':True]['text':' Append the entry to the new buffer. ','line_number':230,'multiline':True]['text':'
     * XXX Need to verify user doesn't create a table of the same name. What does LSM do? It
     * definitely has the same problem with chunks.
     ','line_number':239,'multiline':True]['text':' Only free name on error. ','line_number':259,'multiline':True]['text':'
 * __tiered_restart_work --
 *     Check local objects and see if various work units need to be pushed onto the work queue. This
 *     can be necessary anytime the system restarts.
 ','line_number':266,'multiline':True]['text':' If this is a new table and there are no objects there is nothing to do. ','line_number':280,'multiline':True]['text':'
     * Work our way through all earlier objects and look at each object's flush_time configuration
     * setting. If it is zero that means the object is not flushed and a work unit will be pushed
     * for that object.
     ','line_number':284,'multiline':True]['text':'
         * We only need to worry about objects that exist locally. Most earlier objects should not
         * exist. Skip over them. We're working forward through the objects. Even if we went
         * backward we cannot guarantee that the work is queued and processed and the metadata
         * flushed in order to stop at the first flushed object in the face of multiple crashes. So
         * check all objects that exist locally.
         *
         * If the object is flushed but still exists locally, restart the work to remove it after
         * the local retention period expires.
         ','line_number':296,'multiline':True]['text':'
 * __tiered_create_object --
 *     Create an object name of the given number.
 ','line_number':325,'multiline':True]['text':'
     * Create the name and metadata of the new shared object of the current local object. The data
     * structure keeps this id so that we don't have to parse and manipulate strings.
     ','line_number':338,'multiline':True]['text':' Create the new shared object. ','line_number':351,'multiline':True]['text':'
 * __tiered_create_tier_tree --
 *     Create a tier name for a tiered table.
 ','line_number':360,'multiline':True]['text':' Create tier:example for the new tiered tree. ','line_number':378,'multiline':True]['text':' Set up a tier:example metadata for the first time. ','line_number':391,'multiline':True]['text':' Only free on error. ','line_number':406,'multiline':True]['text':'
 * __tiered_cleanup_tiers --
 *     Cleanup and dereference all tiers.
 ','line_number':416,'multiline':True]['text':'
         * Do not use tier's dhandle if it's a final cleanup, it may be invalid.
         * __wt_conn_dhandle_discard is responsible for the proper destruction of all the dhandles.
         ','line_number':426,'multiline':True]['text':'
 * __tiered_update_dhandles --
 *     Update the dhandle list for a tiered structure after object switching.
 ','line_number':439,'multiline':True]['text':' Now get the dhandle and add it to the array. ','line_number':449,'multiline':True]['text':'
         * If we have a tiered dhandle we can either skip if it is the same name or we decrement the
         * old one and get a new one for the new name.
         ','line_number':451,'multiline':True]['text':' Need to undo our dhandles. Close and dereference all. ','line_number':471,'multiline':True]['text':'
 * __wt_tiered_set_metadata --
 *     Generate the tiered metadata information string into the given buffer.
 ','line_number':477,'multiline':True]['text':'
 * __tiered_update_metadata --
 *     Update the metadata for a tiered structure after object switching.
 ','line_number':511,'multiline':True]['text':'
 * __tiered_switch --
 *     Given a tiered table, make all the metadata updates underneath to switch to the next object.
 *     The switch handles going from nothing to local-only, local-only to both local and shared, and
 *     having shared-only and creating a local object. Must be single threaded.
 ','line_number':545,'multiline':True]['text':'
     * There are four possibilities to our tiers configuration. In all of them we need to create
     * a new local tier file object dhandle and add it as element index zero of the tiers array.
     * Then we may or may not do other operations depending on the state otherwise. These are
     * presented in order of increasing amount of work that needs to be done.
     *   1. tiers=() - New and empty. We only need to add in the local file object.
     *   2. tiers=("tier:...") - Existing shared tier only. Here too we only need to add
     *      in the local file object.
     *   3. tiers=("file:...", "tier:...") - Both local and shared tiers exist in the metadata.
     *       We need to create and add the next local file object (N + 1) and create a shared
     * object in the metadata for the current local file object (N).
     *   4. tiers=("file:...") - Existing local tier only. We need to do all of the parts listed
     * in the #3 above, and also create the shared tier metadata entry.
     *
     * Step 4 must be done after some order of 1-3.
     *   1. Create the "object:" entry in metadata if needed.
     *   2. Create the "tier:" entry in metadata if needed.
     *   3. Create the new "file:" local entry in metadata.
     *   4. Update the "tiered:" with new tiers and object number.
     *   5. Meta tracking off to "commit" all the metadata operations.
     *   6. Revise the dhandles in the tiered structure to reflect new state of the world.
     ','line_number':564,'multiline':True]['text':'
     * See if there are earlier objects that are not yet flushed, as we could have crashed in the
     * middle of flushing and restarted.
     ','line_number':591,'multiline':True]['text':' Create the object: entry in the metadata. ','line_number':598,'multiline':True]['text':' We always need to create a local object. ','line_number':605,'multiline':True]['text':' Update the tiered: metadata to new object number and tiered array. ','line_number':608,'multiline':True]['text':'
 * __wt_tiered_switch --
 *     Switch metadata, external version.
 ','line_number':620,'multiline':True]['text':'
     * For now just a wrapper to internal function. Maybe there's more to do externally, like wrap
     * it in a lock or with a dhandle or walk the dhandle list here rather than higher up.
     ','line_number':629,'multiline':True]['text':'
 * __wt_tiered_name_str --
 *     Given a name and object number generate the URI name of the given type.
 ','line_number':637,'multiline':True]['text':'
     * Separate object numbers from the base table name with a dash. Separate from the suffix with a
     * dot. We generate a different name style based on the type.
     ','line_number':649,'multiline':True]['text':'
 * __wt_tiered_name --
 *     Given a dhandle structure and object number generate the URI name of the given type.
 ','line_number':680,'multiline':True]['text':' Skip the prefix depending on what we're given. ','line_number':691,'multiline':True]['text':'
 * __tiered_open --
 *     Open a tiered data handle (internal version).
 ','line_number':708,'multiline':True]['text':' Set up the bstorage from the configuration first. ','line_number':735,'multiline':True]['text':' Collapse into one string for later use in switch. ','line_number':742,'multiline':True]['text':'
     * Pull in any configuration of the original table for the object and file components that may
     * have been sent in on the create. This is a saved configuration for all objects, set them to
     * readonly and indicate they are tiered objects.
     ','line_number':745,'multiline':True]['text':'
     * For now this is always one. When garbage collection gets implemented then it will be updated
     * to reflect the first object number that exists. Knowing this information will be helpful for
     * other tasks such as tiered backup.
     ','line_number':766,'multiline':True]['text':' Open tiers if we have them, otherwise initialize. ','line_number':782,'multiline':True]['text':' Switch to the next object if we are importing a table. ','line_number':785,'multiline':True]['text':'
         * The tiered table name does not exist. But now check if any shared storage objects exist
         * for this name. A user could have created a tiered table. Later dropped it, which removes
         * the metadata entries and local files, but leaves the objects in the shared storage layer
         * because others may be using those files. We do not allow a create of a duplicate name if
         * we find objects. We do this after the tiered bucket storage is set up.
         ','line_number':789,'multiline':True]['text':' Temp code to keep s_all happy. ','line_number':806,'multiline':True]['text':'
 * __wt_tiered_open --
 *     Open a tiered data handle.
 ','line_number':825,'multiline':True]['text':'
 * __tiered_cleanup --
 *     Cleanup a tiered data handle.
 ','line_number':839,'multiline':True]['text':' Cleanup and dereference all tiers.  ','line_number':846,'multiline':True]['text':' Cleanup other fields in tiered structure. ','line_number':849,'multiline':True]['text':'
 * __wt_tiered_close --
 *     Close a tiered data handle.
 ','line_number':860,'multiline':True]['text':'
     * We are only closing the handle so only clean up the tiers. We don't yet want to free the
     * entire structure. That will happen when we discard it.
     ','line_number':869,'multiline':True]['text':'
 * __wt_tiered_discard --
 *     Discard a tiered data handle.
 ','line_number':878,'multiline':True]['text':'
 * __wt_tiered_tree_open --
 *     Open a tiered tree data handle.
 ','line_number':891,'multiline':True]['text':'
     * Set dhandle->handle with tiered tree structure, initialized.
     ','line_number':904,'multiline':True]['text':'
     * Walk looking for our objects.
     ','line_number':912,'multiline':True]['text':'
         * NOTE: Here we do anything we need to do to open or access each shared object.
         ','line_number':918,'multiline':True]['text':'
 * __wt_tiered_tree_close --
 *     Close a tiered tree data handle.
 ','line_number':932,'multiline':True]