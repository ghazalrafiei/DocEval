['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *  All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_bm_read --
 *     Map or read address cookie referenced block into a buffer.
 ','line_number':11,'multiline':True]['text':' Crack the cookie. ','line_number':26,'multiline':True]['text':' Lookup the block handle ','line_number':31,'multiline':True]['text':'
     * In diagnostic mode, verify the block we're about to read isn't on the available list, or for
     * the writable objects, the discard list.
     ','line_number':35,'multiline':True]['text':' Read the block. ','line_number':43,'multiline':True]['text':' Optionally discard blocks from the system's buffer cache. ','line_number':46,'multiline':True]['text':'
 * __bm_corrupt_dump --
 *     Dump a block into the log in 1KB chunks.
 ','line_number':56,'multiline':True]['text':'
 * __wt_bm_corrupt --
 *     Report a block has been corrupted, external API.
 ','line_number':96,'multiline':True]['text':' Read the block. ','line_number':108,'multiline':True]['text':' Crack the cookie, dump the block. ','line_number':112,'multiline':True]['text':'
 * __wt_block_read_off_blind --
 *     Read the block at an offset, return the size and checksum, debugging only.
 ','line_number':123,'multiline':True]['text':'
     * Make sure the buffer is large enough for the header and read the first allocation-size block.
     ','line_number':138,'multiline':True]['text':'
 * __wt_block_read_off --
 *     Read an addr/size pair referenced block into a buffer.
 ','line_number':155,'multiline':True]['text':'
     * Grow the buffer as necessary and read the block. Buffers should be aligned for reading, but
     * there are lots of buffers (for example, file cursors have two buffers each, key and value),
     * and it's difficult to be sure we've found all of them. If the buffer isn't aligned, it's an
     * easy fix: set the flag and guarantee we reallocate it. (Most of the time on reads, the buffer
     * memory has not yet been allocated, so we're not adding any additional processing time.)
     ','line_number':178,'multiline':True]['text':'
     * Ensure we don't read information that isn't there. It shouldn't ever happen, but it's a cheap
     * test.
     ','line_number':192,'multiline':True]['text':'
                 * Check if the chunk cache has the needed data. If there is a miss in the chunk
                 * cache, it will read and cache the data. If the chunk cache has exceeded its
                 * configured capacity and is unable to evict chunks quickly enough, it will return
                 * the error code indicating that it is out of space. We do not propagate this error
                 * up to our caller; we read the needed data ourselves instead.
                 ','line_number':208,'multiline':True]['text':'
         * We incrementally read through the structure before doing a checksum, do little- to
         * big-endian handling early on, and then select from the original or swapped structure as
         * needed.
         ','line_number':225,'multiline':True]['text':'
                 * Swap the page-header as needed; this doesn't belong here, but it's the best place
                 * to catch all callers.
                 ','line_number':236,'multiline':True]['text':'
         * If chunk cache is configured we want to account for the race condition where the chunk
         * cache could have stale content, and therefore a mismatched checksum. We can also have
         * corrupted data in the chunk cache. For those scenarios, we do not want to fail
         * immediately, so we will reload the data and retry one time.
         ','line_number':247,'multiline':True]['text':' Panic if a checksum fails during an ordinary read. ','line_number':282,'multiline':True]