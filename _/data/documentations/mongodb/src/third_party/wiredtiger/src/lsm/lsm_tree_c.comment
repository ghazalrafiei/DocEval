['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __lsm_tree_discard_state --
 *     Free the metadata configuration state-related LSM tree pointers.
 ','line_number':16,'multiline':True]['text':'
 * __lsm_tree_discard --
 *     Free an LSM tree structure.
 ','line_number':56,'multiline':True]['text':' Only used in diagnostic builds ','line_number':65,'multiline':True]['text':'
     * The work unit queue should be empty, but it's worth checking since work units use a different
     * locking scheme to regular tree operations.
     ','line_number':68,'multiline':True]['text':' We may be destroying an lsm_tree before it was added. ','line_number':74,'multiline':True]['text':'
 * __lsm_tree_close --
 *     Close an LSM tree structure.
 ','line_number':96,'multiline':True]['text':'
     * Stop any new work units being added. The barrier is necessary because we rely on the state
     * change being visible before checking the tree queue state.
     ','line_number':103,'multiline':True]['text':'
     * Wait for all LSM operations to drain. If WiredTiger is shutting down also wait for the tree
     * reference count to go to zero, otherwise we know a user is holding a reference to the tree,
     * so exclusive access is not available.
     ','line_number':110,'multiline':True]['text':'
         * Remove any work units from the manager queues. Do this step
         * repeatedly in case a work unit was in the process of being
         * created when we cleared the active flag.
         *
         * !!! Drop the schema and handle list locks whilst completing
         * this step so that we don't block any operations that require
         * the schema lock to complete. This is safe because any
         * operation that is closing the tree should first have gotten
         * exclusive access to the LSM tree via __wt_lsm_tree_get, so
         * other schema level operations will return EBUSY, even though
         * we're dropping the schema lock here.
         ','line_number':116,'multiline':True]['text':'
 * __wt_lsm_tree_close_all --
 *     Close all LSM tree structures.
 ','line_number':133,'multiline':True]['text':' We are shutting down: the handle list lock isn't required. ','line_number':143,'multiline':True]['text':'
         * Tree close assumes that we have a reference to the tree so it can tell when it's safe to
         * do the close. We could get the tree here, but we short circuit instead. There is no need
         * to decrement the reference count since discard is unconditional.
         ','line_number':147,'multiline':True]['text':'
 * __lsm_tree_set_name --
 *     Set or reset the name of an LSM tree
 ','line_number':161,'multiline':True]['text':'
 * __wt_lsm_tree_bloom_name --
 *     Get the URI of the Bloom filter for a given chunk.
 ','line_number':178,'multiline':True]['text':'
 * __wt_lsm_tree_chunk_name --
 *     Get the URI of the file for a given chunk.
 ','line_number':198,'multiline':True]['text':'
 * __wt_lsm_tree_set_chunk_size --
 *     Set the size of the chunk. Should only be called for chunks that are on disk, or about to
 *     become on disk.
 ','line_number':224,'multiline':True]['text':'
         * We can only retrieve a size if the data source exposes the information.
         ','line_number':239,'multiline':True]['text':' Call the callback. ','line_number':243,'multiline':True]['text':'
 * __lsm_tree_cleanup_old --
 *     Cleanup any old LSM chunks that might conflict with one we are about to create. Sometimes
 *     failed LSM metadata operations can leave old files and bloom filters behind.
 ','line_number':258,'multiline':True]['text':'
 * __wt_lsm_tree_setup_chunk --
 *     Initialize a chunk of an LSM tree.
 ','line_number':279,'multiline':True]['text':'
     * If the underlying file exists, drop the chunk first - there may be some content hanging over
     * from an aborted merge or checkpoint.
     *
     * Don't do this for the very first chunk: we are called during WT_SESSION::create, and doing a
     * drop inside there does interesting things with handle locks and metadata tracking. It can
     * never have been the result of an interrupted merge, anyway.
     ','line_number':294,'multiline':True]['text':'
 * __wt_lsm_tree_setup_bloom --
 *     Initialize a bloom filter for an LSM tree.
 ','line_number':308,'multiline':True]['text':'
     * The Bloom URI can be populated when the chunk is created, but it isn't set yet on open or
     * merge.
     ','line_number':315,'multiline':True]['text':'
 * __wt_lsm_tree_create --
 *     Create an LSM tree structure for the given name.
 ','line_number':325,'multiline':True]['text':' If the tree can be opened, it already exists. ','line_number':340,'multiline':True]['text':' LSM doesn't yet support the 'r' format. ','line_number':348,'multiline':True]['text':'
     * Open our new tree and add it to the handle cache. Don't discard on error: the returned handle
     * is NULL on error, and the metadata tracking macros handle cleaning up on failure.
     ','line_number':357,'multiline':True]['text':'
 * __lsm_tree_find --
 *     Find an LSM tree structure for the given name. Optionally get exclusive access to the handle.
 *     Exclusive access works separately to the LSM tree lock - since operations that need exclusive
 *     access may also need to take the LSM tree lock for example outstanding work unit operations.
 ','line_number':370,'multiline':True]['text':' See if the tree is already open. ','line_number':384,'multiline':True]['text':'
                 * Make sure we win the race to switch on the exclusive flag.
                 ','line_number':388,'multiline':True]['text':'
                 * Drain the work queue before checking for open cursors - otherwise we can generate
                 * spurious busy returns.
                 ','line_number':394,'multiline':True]['text':'
                 * We got a reference, check if an exclusive lock beat us to it.
                 ','line_number':407,'multiline':True]['text':'
 * __lsm_tree_open_check --
 *     Validate the configuration of an LSM tree.
 ','line_number':426,'multiline':True]['text':'
 * __lsm_tree_open --
 *     Open an LSM tree structure.
 ','line_number':453,'multiline':True]['text':' Start the LSM manager thread if it isn't running. ','line_number':469,'multiline':True]['text':' Make sure no one beat us to it. ','line_number':472,'multiline':True]['text':' Try to open the tree. ','line_number':476,'multiline':True]['text':'
     * Sanity check the configuration. Do it now since this is the first time we have the LSM tree
     * configuration.
     ','line_number':484,'multiline':True]['text':' Set the generation number so cursors are opened on first usage. ','line_number':490,'multiline':True]['text':'
     * Setup reference counting. Use separate reference counts for tree handles and queue entries,
     * so that queue entries don't interfere with getting handles exclusive.
     ','line_number':493,'multiline':True]['text':' Set a flush timestamp as a baseline. ','line_number':501,'multiline':True]['text':' Now the tree is setup, make it visible to others. ','line_number':504,'multiline':True]['text':'
 * __wt_lsm_tree_get --
 *     Find an LSM tree handle or open a new one.
 ','line_number':519,'multiline':True]['text':'
     * Dropping and re-acquiring the lock is safe here, since the tree open call checks to see if
     * another thread beat it to opening the tree before proceeding.
     ','line_number':528,'multiline':True]['text':'
 * __wt_lsm_tree_release --
 *     Release an LSM tree structure.
 ','line_number':545,'multiline':True]['text':' We cleared the active flag when getting exclusive access. ','line_number':554,'multiline':True]['text':' How aggressively to ramp up or down throttle due to level 0 merging ','line_number':561,'multiline':True]['text':' Number of level 0 chunks that need to be present to throttle inserts ','line_number':563,'multiline':True]['text':' Minimal throttling time ','line_number':565,'multiline':True]['text':'
 * __wt_lsm_tree_throttle --
 *     Calculate whether LSM updates need to be throttled. Must be called with the LSM tree lock
 *     held.
 ','line_number':582,'multiline':True]['text':' Never throttle in small trees. ','line_number':594,'multiline':True]['text':'
     * In the steady state, we expect that the checkpoint worker thread
     * will keep up with inserts.  If not, throttle the insert rate to
     * avoid filling the cache with in-memory chunks.  Threads sleep every
     * 100 operations, so take that into account in the calculation.
     *
     * Also throttle based on whether merge threads are keeping up.  If
     * there are enough chunks that have never been merged we slow down
     * inserts so that merges have some chance of keeping up.
     *
     * Count the number of in-memory chunks, the number of unmerged chunk
     * on disk, and find the most recent on-disk chunk (if any).
     ','line_number':602,'multiline':True]['text':'
             * Assign ondisk to the last chunk that has been flushed since the tree was last opened
             * (i.e it's on disk and stable is not set).
             ','line_number':623,'multiline':True]['text':' Checkpoint throttling, based on the number of in-memory chunks. ','line_number':636,'multiline':True]['text':' Nothing to do ','line_number':640,'multiline':True]['text':'
         * No checkpoint has completed this run. Keep slowing down inserts until one does.
         ','line_number':642,'multiline':True]['text':'
         * Get more aggressive as the number of in memory chunks consumes a large proportion of the
         * cache. In memory chunks are allowed to grow up to twice as large as the configured value
         * when checkpoints aren't keeping up. That worst case is when this calculation is relevant.
         * There is nothing particularly special about the chosen multipliers.
         ','line_number':651,'multiline':True]['text':'
     * Merge throttling, based on the number of on-disk, level 0 chunks.
     *
     * Don't throttle if the tree has less than a single level's number of chunks.
     ','line_number':662,'multiline':True]['text':' Put an upper bound of 1s on both throttle calculations. ','line_number':676,'multiline':True]['text':'
     * Update our estimate of how long each in-memory chunk stays active. Filter out some noise by
     * keeping a weighted history of the calculated value. Wait until we have enough chunks that we
     * can check that the new value is sane: otherwise, after a long idle period, we can calculate a
     * crazy value.
     ','line_number':680,'multiline':True]['text':'
 * __wt_lsm_tree_switch --
 *     Switch to a new in-memory tree.
 ','line_number':698,'multiline':True]['text':'
     * Check if a switch is still needed: we may have raced while waiting for a lock.
     ','line_number':718,'multiline':True]['text':' Update the throttle time. ','line_number':726,'multiline':True]['text':'
     * Ensure the updated disk generation is visible to all other threads before updating the
     * transaction ID.
     ','line_number':747,'multiline':True]['text':'
     * Set the switch transaction in the previous chunk unless this is the first chunk in a new or
     * newly opened tree.
     ','line_number':754,'multiline':True]['text':'
     * If a maximum number of chunks are configured, drop the any chunks past the limit.
     ','line_number':762,'multiline':True]['text':' Move the last chunk onto the old chunk list. ','line_number':767,'multiline':True]['text':' Update the active chunk list. ','line_number':770,'multiline':True]['text':' Move the remaining chunks to the start of the active list ','line_number':772,'multiline':True]['text':' Clear out the chunks at the end of the tree ','line_number':775,'multiline':True]['text':' Make sure the manager knows there is work to do. ','line_number':778,'multiline':True]['text':'
     * Errors that happen during a tree switch leave the tree in a state where we can't make
     * progress. Error out of WiredTiger.
     ','line_number':784,'multiline':True]['text':'
 * __wt_lsm_tree_retire_chunks --
 *     Move a set of chunks onto the old chunks list. It's the callers responsibility to update the
 *     active chunks list. Must be called with the LSM lock held.
 ','line_number':795,'multiline':True]['text':' Setup the array of obsolete chunks. ','line_number':808,'multiline':True]['text':' Copy entries one at a time, so we can reuse gaps in the list. ','line_number':812,'multiline':True]['text':'
 * __wt_lsm_tree_drop --
 *     Drop an LSM tree.
 ','line_number':819,'multiline':True]['text':' Get the LSM tree. ','line_number':835,'multiline':True]['text':' Prevent any new opens. ','line_number':839,'multiline':True]['text':' Drop the chunks. ','line_number':843,'multiline':True]['text':' Drop any chunks on the obsolete list. ','line_number':851,'multiline':True]['text':'
 * __wt_lsm_tree_rename --
 *     Rename an LSM tree.
 ','line_number':873,'multiline':True]['text':' Get the LSM tree. ','line_number':892,'multiline':True]['text':' Prevent any new opens. ','line_number':895,'multiline':True]['text':' Set the new name. ','line_number':899,'multiline':True]['text':' Rename the chunks. ','line_number':902,'multiline':True]['text':'
     * Discard this LSM tree structure. The first operation on the renamed tree will create a new
     * one.
     ','line_number':933,'multiline':True]['text':'
 * __wt_lsm_tree_truncate --
 *     Truncate an LSM tree.
 ','line_number':942,'multiline':True]['text':' Get the LSM tree. ','line_number':963,'multiline':True]['text':' Prevent any new opens. ','line_number':966,'multiline':True]['text':' Create the new chunk. ','line_number':970,'multiline':True]['text':' Mark all chunks old. ','line_number':975,'multiline':True]['text':'
         * Discard the LSM tree structure on error. This will force the LSM tree to be re-opened the
         * next time it is accessed and the last good version of the metadata will be used,
         * resulting in a valid (not truncated) tree.
         ','line_number':992,'multiline':True]['text':'
 * __wt_lsm_tree_readlock --
 *     Acquire a shared lock on an LSM tree.
 ','line_number':1004,'multiline':True]['text':'
     * Diagnostic: avoid deadlocks with the schema lock: if we need it for an operation, we should
     * already have it.
     ','line_number':1013,'multiline':True]['text':'
 * __wt_lsm_tree_readunlock --
 *     Release a shared lock on an LSM tree.
 ','line_number':1021,'multiline':True]['text':'
 * __wt_lsm_tree_writelock --
 *     Acquire an exclusive lock on an LSM tree.
 ','line_number':1034,'multiline':True]['text':'
     * Diagnostic: avoid deadlocks with the schema lock: if we need it for an operation, we should
     * already have it.
     ','line_number':1043,'multiline':True]['text':'
 * __wt_lsm_tree_writeunlock --
 *     Release an exclusive lock on an LSM tree.
 ','line_number':1051,'multiline':True]['text':'
 * __wt_lsm_compact --
 *     Compact an LSM tree called via __wt_schema_worker.
 ','line_number':1064,'multiline':True]['text':'
     * This function is applied to all matching sources: ignore anything that is not an LSM tree.
     ','line_number':1080,'multiline':True]['text':' Tell __wt_schema_worker not to look inside the LSM tree. ','line_number':1086,'multiline':True]['text':'
     * There is no work to do if there is only a single chunk in the tree and it has a bloom filter
     * or is configured to never have a bloom filter.
     ','line_number':1094,'multiline':True]['text':'
     * Compacting has two distinct phases.
     * 1.  All in-memory chunks up to and including the current
     * current chunk must be flushed.  Normally, the flush code
     * does not flush the last, in-use chunk, so we set a force
     * flag to include that last chunk.  We monitor the state of the
     * last chunk and periodically push another forced flush work
     * unit until it is complete.
     * 2.  After all flushing is done, we move onto the merging
     * phase for compaction.  Again, we monitor the state and
     * continue to push merge work units until all merging is done.
     ','line_number':1105,'multiline':True]['text':' Lock the tree: single-thread compaction. ','line_number':1118,'multiline':True]['text':' Clear any merge throttle: compact throws out that calculation. ','line_number':1122,'multiline':True]['text':' If another thread started a compact on this tree, we're done. ','line_number':1127,'multiline':True]['text':'
     * Set the switch transaction on the current chunk, if it hasn't been set before. This prevents
     * further writes, so it can be flushed by the checkpoint worker. If this is a newly opened tree
     * the primary chunk may already be stable. Only push a flush work unit if necessary.
     ','line_number':1131,'multiline':True]['text':'
             * Make sure any cursors open on the tree see the new switch generation before updating.
             ','line_number':1141,'multiline':True]['text':'
         * If we have a chunk, we want to look for it to be on-disk. So we need to add a reference
         * to keep it available.
         ','line_number':1148,'multiline':True]['text':'
         * Make sure the in-memory chunk gets flushed do not push a switch, because we don't want to
         * create a new in-memory chunk if the tree is being used read-only now.
         ','line_number':1163,'multiline':True]['text':'
         * If there is no chunk to flush, go straight to the compacting state.
         ','line_number':1170,'multiline':True]['text':' Wait for the work unit queues to drain. ','line_number':1181,'multiline':True]['text':'
         * The flush flag is cleared when the chunk has been flushed. Continue to push forced
         * flushes until the chunk is on disk. Once it is on disk move to the compacting phase.
         ','line_number':1183,'multiline':True]['text':'
         * The compacting flag is cleared when no merges can be done. Ensure that we push through
         * some aggressive merges before stopping otherwise we might not do merges that would span
         * chunks with different generations.
         ','line_number':1206,'multiline':True]['text':'
         * Periodically check if we've timed out or eviction is stuck. Quit if eviction is stuck,
         * we're making the problem worse.
         ','line_number':1221,'multiline':True]['text':'
         * Push merge operations while they are still getting work done. If we are pushing merges,
         * make sure they are aggressive, to avoid duplicating effort.
         ','line_number':1230,'multiline':True]['text':' Ensure anything we set is cleared. ','line_number':1242,'multiline':True]['text':'
 * __wt_lsm_tree_worker --
 *     Run a schema worker operation on each level of a LSM tree.
 ','line_number':1258,'multiline':True]['text':'
     * We mark that we're busy using the tree to coordinate with merges so that merging doesn't
     * change the chunk array out from underneath us.
     ','line_number':1280,'multiline':True]['text':'
         * If the chunk is on disk, don't include underlying handles in the checkpoint. Checking the
         * "get handles" function is all we need to do, no further checkpoint calls are done if the
         * handle is not gathered.
         ','line_number':1291,'multiline':True]['text':'
     * If this was an alter operation, we need to alter the configuration for the overall tree and
     * then reread it so it isn't out of date. Reread it here so that we update the configuration of
     * the current tree's structure to any new, altered values.
     ','line_number':1303,'multiline':True]['text':'
         * We rewrote the meta-data. Discard the tree and the next access will reopen it.
         ','line_number':1317,'multiline':True]