['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __hs_verify_id --
 *     Verify the history store for a single btree. Given a cursor to the tree, walk all history
 *     store keys. This function assumes any caller has already opened a cursor to the history
 *     store.
 ','line_number':11,'multiline':True]['text':'
     * If using standard cursors, we need to skip the non-globally visible tombstones in the data
     * table to verify the corresponding entries in the history store are too present in the data
     * store. Though this is not required currently as we are directly searching btree cursors,
     * leave it here in case we switch to standard cursors.
     ','line_number':33,'multiline':True]['text':'
     * The caller is responsible for positioning the history store cursor at the first record to
     * verify. When we return after moving to a new key the caller is responsible for keeping the
     * cursor there or deciding they're done.
     ','line_number':41,'multiline':True]['text':'
         * If the btree id does not match the previous one, we're done. It is up to the caller to
         * set up for the next tree and call us, if they choose.
         ','line_number':47,'multiline':True]['text':'
         * If we have already checked against this key, keep going to the next key. We only need to
         * check the key once.
         ','line_number':55,'multiline':True]['text':' Check the key can be found in the data store.','line_number':63,'multiline':True]['text':' Note that we are reformatting the HS key here. ','line_number':76,'multiline':True]['text':'
         * Copy the key memory into our scratch buffer. The key will get invalidated on our next
         * cursor iteration.
         ','line_number':85,'multiline':True]['text':'
 * __wt_hs_verify_one --
 *     Verify the history store for a given btree. This must be called when we are known to have
 *     exclusive access to the btree.
 ','line_number':99,'multiline':True]['text':' Position the hs cursor on the requested btree id, there could be nothing in the HS yet. ','line_number':116,'multiline':True]['text':'
     * We are in verify and we are not able to open a standard cursor because the btree is flagged
     * as WT_BTREE_VERIFY. However, we have exclusive access to the btree so we can directly open
     * the btree cursor to work around it.
     ','line_number':124,'multiline':True]['text':' Note that the following call moves the hs cursor internally. ','line_number':132,'multiline':True]['text':'
 * __wt_hs_verify --
 *     Verify the history store. There can't be an entry in the history store without having the
 *     latest value for the respective key in the data store.
 ','line_number':143,'multiline':True]['text':' Position the hs cursor on the first record. ','line_number':171,'multiline':True]['text':' Go through the history store and validate each btree. ','line_number':178,'multiline':True]['text':'
         * The cursor is positioned either from above or left over from the internal call on the
         * first key of a new btree id.
         ','line_number':180,'multiline':True]['text':' Note that the following call moves the hs cursor internally. ','line_number':197,'multiline':True]['text':' We are either positioned on a different btree id or the entire HS has been parsed. ','line_number':201,'multiline':True]