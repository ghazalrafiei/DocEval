['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __compact_page_inmem_check_addrs --
 *     Return if a clean, in-memory page needs to be re-written.
 ','line_number':11,'multiline':True]['text':' Default skip. ','line_number':26,'multiline':True]['text':' If the page is currently clean, test the original addresses. ','line_number':30,'multiline':True]['text':'
     * If the page is a replacement, test the replacement addresses. Ignore empty pages, they get
     * merged into the parent.
     ','line_number':36,'multiline':True]['text':'
 * __compact_page_inmem --
 *     Return if an in-memory page needs to be re-written.
 ','line_number':57,'multiline':True]['text':' Default skip. ','line_number':64,'multiline':True]['text':'
     * Ignore dirty pages, checkpoint will likely write them. There are cases where checkpoint can
     * skip dirty pages: to avoid that, we could alter the transactional information of the page,
     * which is what checkpoint reviews to decide if a page can be skipped. Not doing that for now,
     * the repeated checkpoints that compaction requires are more than likely to pick up all dirty
     * pages at some point.
     *
     * Check clean page addresses, and mark page and tree dirty if the page needs to be rewritten.
     ','line_number':68,'multiline':True]['text':' If rewriting the page, have reconciliation write new blocks. ','line_number':88,'multiline':True]['text':'
 * __compact_page_replace_addr --
 *     Replace a page's WT_ADDR.
 ','line_number':95,'multiline':True]['text':'
     * If there's no address at all (the page has never been written), allocate a new WT_ADDR
     * structure, otherwise, the address has already been instantiated, replace the cookie.
     ','line_number':108,'multiline':True]['text':'
 * __compact_page --
 *     Compaction for a single page.
 ','line_number':155,'multiline':True]['text':' Default skip. ','line_number':168,'multiline':True]['text':' Lock the WT_REF. ','line_number':172,'multiline':True]['text':'
     * Skip deleted pages but consider them progress (the on-disk block is discarded by the next
     * checkpoint).
     ','line_number':175,'multiline':True]['text':'
     * If it's on-disk, get a copy of the address and ask the block manager to rewrite the block if
     * it's useful. This is safe because we're holding the WT_REF locked, so nobody can read the
     * page giving eviction a chance to modify the address.
     *
     * In this path, we are holding the WT_REF lock across two OS buffer cache I/Os (the read of the
     * original block and the write of the new block), plus whatever overhead that entails. It's not
     * ideal, we could release the lock, but then we'd have to deal with the block having been read
     * into memory while we were moving it.
     ','line_number':182,'multiline':True]['text':'
     * Ignore pages that aren't in-memory for some reason other than they're on-disk, for example,
     * they might have split or been deleted while we were locking the WT_REF. This includes the
     * case where we found an on-disk page and either rewrite the block successfully or failed to
     * get a copy of the address (which shouldn't ever happen, but if that goes wrong, it's not our
     * problem to solve).
     *
     * In this path, we are holding the WT_REF lock across some in-memory checks and possibly one or
     * more calls to the underlying block manager which is going to search the list of extents to
     * figure out if the block is worth rewriting. It's not ideal because we're blocking the
     * application's worker threads: we could release the lock, but then we'd have to acquire a
     * hazard pointer to ensure eviction didn't select the page.
     ','line_number':202,'multiline':True]['text':'
 * __compact_walk_internal --
 *     Walk an internal page for compaction.
 ','line_number':225,'multiline':True]['text':' [-Wconditional-uninitialized] ','line_number':238,'multiline':True]['text':'
     * We could corrupt a checkpoint if we moved a block that's part of the checkpoint, that is, if
     * we race with checkpoint's review of the tree. Get the tree's flush lock which blocks threads
     * writing pages for checkpoints, and hold it long enough to review a single internal page. Quit
     * working the file if checkpoint is holding the lock, checkpoint holds the lock for relatively
     * long periods.
     ','line_number':240,'multiline':True]['text':'
     * Walk the internal page and check any leaf pages it references; skip internal pages, we'll
     * visit them individually.
     ','line_number':249,'multiline':True]['text':'
     * If we moved a leaf page, we'll write the parent. If we didn't move a leaf page, check pages
     * other than the root to see if we want to move the internal page itself. (Skip the root as a
     * forced checkpoint will always rewrite it, and you can't just "move" a root page.)
     ','line_number':263,'multiline':True]['text':' If we found a page to compact, mark the parent and tree dirty and report success. ','line_number':274,'multiline':True]['text':' Unblock checkpoint threads. ','line_number':281,'multiline':True]['text':'
 * __compact_walk_page_skip --
 *     Skip leaf pages, all we want are internal pages.
 ','line_number':287,'multiline':True]['text':' All we want are the internal pages. ','line_number':299,'multiline':True]['text':'
 * __wt_compact --
 *     Compact a file.
 ','line_number':304,'multiline':True]['text':' Pages reviewed ','line_number':317,'multiline':True]['text':' Pages rewritten ','line_number':318,'multiline':True]['text':' How much pages we expect to rewrite ','line_number':319,'multiline':True]['text':' Pages skipped ','line_number':320,'multiline':True]['text':'
     * Check if compaction might be useful (the API layer will quit trying to compact the data
     * source if we make no progress).
     ','line_number':327,'multiline':True]['text':'
         * Print the "skipping compaction" message only if this is the first time we are working on
         * this table.
         ','line_number':336,'multiline':True]['text':' Walk the tree reviewing pages to see if they should be re-written. ','line_number':349,'multiline':True]['text':' Track progress. ','line_number':353,'multiline':True]['text':'
         * Periodically check if compaction has been interrupted or if eviction is stuck, quit if
         * this is the case.
         ','line_number':362,'multiline':True]['text':'
         * Compact pulls pages into cache during the walk without checking whether the cache is
         * full. Check now to throttle compact to match eviction speed.
         ','line_number':378,'multiline':True]['text':'
         * Pages read for compaction aren't "useful"; don't update the read generation of pages
         * already in memory, and if a page is read, set its generation to a low value so it is
         * evicted quickly.
         ','line_number':384,'multiline':True]['text':'
         * The compact walk only flags internal pages for review, but there is a rare case where an
         * WT_REF in the WT_REF_DISK state pointing to an internal page, can transition to a leaf
         * page when it is being read in. Handle that here, by re-checking the page type now that
         * the page is in memory.
         ','line_number':394,'multiline':True]