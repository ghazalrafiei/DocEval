['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * Spin locks:
 *
 * These used for cases where fast mutual exclusion is needed (where operations done while holding
 * the spin lock are expected to complete in a small number of instructions.
 ','line_number':9,'multiline':True]['text':'
 * WT_SPIN_SESSION_ID_SAFE --
 *     Get the session ID. We need this because there are a few calls to lock and unlock where the
 * session parameter is actually NULL.
 ','line_number':16,'multiline':True]['text':'
 * __spin_init_internal --
 *     Initialize the WT portion of a spinlock.
 ','line_number':23,'multiline':True]['text':' Default to spinning 1000 times before yielding. ','line_number':39,'multiline':True]['text':'
 * __wt_spin_init --
 *     Initialize a spinlock.
 ','line_number':44,'multiline':True]['text':'
 * __wt_spin_destroy --
 *     Destroy a spinlock.
 ','line_number':58,'multiline':True]['text':'
 * __wt_spin_trylock --
 *     Try to lock a spinlock or fail immediately if it is busy.
 ','line_number':70,'multiline':True]['text':'
 * __wt_spin_lock --
 *     Spin until the lock is acquired.
 ','line_number':86,'multiline':True]['text':'
 * __wt_spin_unlock --
 *     Release the spinlock.
 ','line_number':107,'multiline':True]['text':'
 * __wt_spin_init --
 *     Initialize a spinlock.
 ','line_number':122,'multiline':True]['text':'
 * __wt_spin_destroy --
 *     Destroy a spinlock.
 ','line_number':148,'multiline':True]['text':'
 * __wt_spin_trylock --
 *     Try to lock a spinlock or fail immediately if it is busy.
 ','line_number':165,'multiline':True]['text':'
 * __wt_spin_lock --
 *     Spin until the lock is acquired.
 ','line_number':181,'multiline':True]['text':'
 * __wt_spin_unlock --
 *     Release the spinlock.
 ','line_number':196,'multiline':True]['text':'
 * __wt_spin_init --
 *     Initialize a spinlock.
 ','line_number':212,'multiline':True]['text':'
 * __wt_spin_destroy --
 *     Destroy a spinlock.
 ','line_number':232,'multiline':True]['text':'
 * __wt_spin_trylock --
 *     Try to lock a spinlock or fail immediately if it is busy.
 ','line_number':247,'multiline':True]['text':'
 * __wt_spin_lock --
 *     Spin until the lock is acquired.
 ','line_number':263,'multiline':True]['text':'
 * __wt_spin_unlock --
 *     Release the spinlock.
 ','line_number':276,'multiline':True]['text':'
 * __wt_spin_locked --
 *     Check whether the spinlock is locked, irrespective of which session locked it.
 ','line_number':295,'multiline':True]['text':'
 * __wt_spin_owned --
 *     Check whether the session owns the spinlock.
 ','line_number':306,'multiline':True]['text':'
 * __wt_spin_unlock_if_owned --
 *     Unlock the spinlock only if it is acquired by the specified session.
 ','line_number':316,'multiline':True]['text':'
 * WT_ASSERT_SPINLOCK_OWNED --
 *      Assert that the session owns the spinlock.
 ','line_number':327,'multiline':True]['text':'
 * WT_SPIN_INIT_TRACKED --
 *	Spinlock initialization, with tracking.
 *
 * Implemented as a macro so we can pass in a statistics field and convert
 * it into a statistics structure array offset.
 ','line_number':333,'multiline':True]['text':'
 * __wt_spin_lock_track --
 *     Spinlock acquisition, with tracking.
 ','line_number':358,'multiline':True]['text':'
         * Not all spin locks increment session statistics. Check whether the offset is initialized
         * to determine whether they are enabled.
         ','line_number':382,'multiline':True]['text':'
 * __wt_spin_trylock_track --
 *     Try to lock a spinlock or fail immediately if it is busy. Track if successful.
 ','line_number':392,'multiline':True]