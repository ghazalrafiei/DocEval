['text':'
 * Hardware-accelerated CRC-32 variants for Linux on z Systems
 *
 * Use the z/Architecture Vector Extension Facility to accelerate the
 * computing of bit-reflected CRC-32 checksums for IEEE 802.3 Ethernet
 * and Castagnoli.
 *
 * This CRC-32 implementation algorithm is bit-reflected and processes
 * the least-significant bit first (Little-Endian).
 *
 * Copyright IBM Corp. 2015
 * Author(s): Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
 ','line_number':4,'multiline':True]['text':' Vector register range containing CRC-32 constants ','line_number':20,'multiline':True]['text':'
 * The CRC-32 constant block contains reduction constants to fold and
 * process particular chunks of the input data stream in parallel.
 *
 * For the CRC-32 variants, the constants are precomputed according to
 * these definitions:
 *
 *	R1 = [(x4*128+32 mod P'(x) << 32)]' << 1
 *	R2 = [(x4*128-32 mod P'(x) << 32)]' << 1
 *	R3 = [(x128+32 mod P'(x) << 32)]'   << 1
 *	R4 = [(x128-32 mod P'(x) << 32)]'   << 1
 *	R5 = [(x64 mod P'(x) << 32)]'	    << 1
 *	R6 = [(x32 mod P'(x) << 32)]'	    << 1
 *
 *	The bit-reflected Barret reduction constant, u', is defined as
 *	the bit reversal of floor(x**64 / P(x)).
 *
 *	where P(x) is the polynomial in the normal domain and the P'(x) is the
 *	polynomial in the reversed (bit-reflected) domain.
 *
 * CRC-32 (IEEE 802.3 Ethernet, ...) polynomials:
 *
 *	P(x)  = 0x04C11DB7
 *	P'(x) = 0xEDB88320
 *
 * CRC-32C (Castagnoli) polynomials:
 *
 *	P(x)  = 0x1EDC6F41
 *	P'(x) = 0x82F63B78
 ','line_number':31,'multiline':True]['text':'
 * The CRC-32 functions use these calling conventions:
 *
 * Parameters:
 *
 *	%r2:	Initial CRC value, typically ~0; and final CRC (return) value.
 *	%r3:	Input buffer pointer, performance might be improved if the
 *		buffer is on a doubleword boundary.
 *	%r4:	Length of the buffer, must be 64 bytes or greater.
 *
 * Register usage:
 *
 *	%r5:	CRC-32 constant pool base pointer.
 *	V0:	Initial CRC value and intermediate constants and results.
 *	V1..V4:	Data for CRC computation.
 *	V5..V8:	Next data chunks that are fetched from the input buffer.
 *	V9:	Constant for BE->LE conversion and shift operations
 *
 *	V10..V14: CRC-32 constants.
 ','line_number':81,'multiline':True]['text':' Preserve non-volatile vector registers. ','line_number':107,'multiline':True]['text':' Load CRC-32 constants into multiple vector registers. ','line_number':112,'multiline':True]['text':'
	 * Load the initial CRC value.
	 *
	 * The CRC value is loaded into the rightmost word of the
	 * vector register and is later XORed with the LSB portion
	 * of the loaded input data.
	 ','line_number':115,'multiline':True]['text':' Clear V0 ','line_number':122,'multiline':True]['text':' Load CRC into rightmost word ','line_number':123,'multiline':True]['text':' Load a 64-byte data chunk and XOR with CRC ','line_number':125,'multiline':True]['text':' 64-bytes into V1..V4 ','line_number':126,'multiline':True]['text':' Reflect the data since the CRC operates in the bit-reflected domain. ','line_number':128,'multiline':True]['text':' V1 ^= CRC ','line_number':134,'multiline':True]['text':' BUF = BUF + 64 ','line_number':135,'multiline':True]['text':' LEN = LEN - 64 ','line_number':136,'multiline':True]['text':' Check remaining buffer size and jump to proper folding method. ','line_number':138,'multiline':True]['text':' Load the next 64-byte data chunk into V5 to V8 ','line_number':143,'multiline':True]['text':'
	 * Perform a GF(2) multiplication of the doublewords in V1 with
	 * the R1 and R2 reduction constants in V10. The intermediate result
	 * is then folded (accumulated, or XOR-ed) with the next data chunk
	 * in V5 and stored in V1. Repeat this step for the register contents
	 * in V2, V3, and V4 respectively.
	 ','line_number':150,'multiline':True]['text':' Adjust buffer pointer and length for next loop. ','line_number':162,'multiline':True]['text':' BUF = BUF + 64 ','line_number':163,'multiline':True]['text':' LEN = LEN - 64 ','line_number':164,'multiline':True]['text':'
	 * Fold V1 to V4 into a single 128-bit value in V1.  Multiply V1 with R3
	 * and R4 and accumulating the next 128-bit chunk until a single 128-bit
	 * value remains.
	 ','line_number':170,'multiline':True]['text':' Check whether to continue with 64-bit folding. ','line_number':179,'multiline':True]['text':' Load next data chunk ','line_number':185,'multiline':True]['text':' Fold next data chunk ','line_number':187,'multiline':True]['text':' Adjust buffer pointer and size for folding next data chunk. ','line_number':189,'multiline':True]['text':' Process remaining data chunks. ','line_number':193,'multiline':True]['text':'
	 * Set up a vector register for byte shifts.  The shift value must
	 * be loaded in bits 1-4 in byte element 7 of a vector register.
	 * Shift by 8 bytes: 0x40
	 * Shift by 4 bytes: 0x20
	 ','line_number':198,'multiline':True]['text':'
	 * Prepare V0 for the next GF(2) multiplication: shift V0 by 8 bytes
	 * to move R4 into the rightmost doubleword and set the leftmost
	 * doubleword to 0x1.
	 ','line_number':206,'multiline':True]['text':'
	 * Compute GF(2) product of V1 and V0.	The rightmost doubleword
	 * of V1 is multiplied with R4.  The leftmost doubleword of V1 is
	 * multiplied by 0x1 and is then XORed with rightmost product.
	 * Implicitly, the intermediate leftmost product becomes padded
	 ','line_number':214,'multiline':True]['text':'
	 * Now do the final 32-bit fold by multiplying the rightmost word
	 * in V1 with R5 and XOR the result with the remaining bits in V1.
	 *
	 * To achieve this by a single VGFMAG, right shift V1 by a word
	 * and store the result in V2 which is then accumulated.  Use the
	 * vector unpack instruction to load the rightmost half of the
	 * doubleword into the rightmost doubleword element of V1; the other
	 * half is loaded in the leftmost doubleword.
	 * The vector register with CONST_R5 contains the R5 constant in the
	 * rightmost doubleword and the leftmost doubleword is zero to ignore
	 * the leftmost product of V1.
	 ','line_number':222,'multiline':True]['text':' Shift by words ','line_number':235,'multiline':True]['text':' Store remaining bits in V2 ','line_number':236,'multiline':True]['text':' Split rightmost doubleword ','line_number':237,'multiline':True]['text':' V1 = (V1 * R5) XOR V2 ','line_number':238,'multiline':True]['text':'
	 * Apply a Barret reduction to compute the final 32-bit CRC value.
	 *
	 * The input values to the Barret reduction are the degree-63 polynomial
	 * in V1 (R(x)), degree-32 generator polynomial, and the reduction
	 * constant u.	The Barret reduction result is the CRC value of R(x) mod
	 * P(x).
	 *
	 * The Barret reduction algorithm is defined as:
	 *
	 *    1. T1(x) = floor( R(x) / x^32 ) GF2MUL u
	 *    2. T2(x) = floor( T1(x) / x^32 ) GF2MUL P(x)
	 *    3. C(x)  = R(x) XOR T2(x) mod x^32
	 *
	 *  Note: The leftmost doubleword of vector register containing
	 *  CONST_RU_POLY is zero and, thus, the intermediate GF(2) product
	 *  is zero and does not contribute to the final result.
	 ','line_number':240,'multiline':True]['text':' T1(x) = floor( R(x) / x^32 ) GF2MUL u ','line_number':259,'multiline':True]['text':'
	 * Compute the GF(2) product of the CRC polynomial with T1(x) in
	 * V2 and XOR the intermediate result, T2(x), with the value in V1.
	 * The final result is stored in word element 2 of V2.
	 ','line_number':263,'multiline':True]['text':' Move the result to R2, restore preserved registers and return. ','line_number':272,'multiline':True]['text':' Make sure the stack isn't executable with GCC (regardless of platform). ','line_number':279,'multiline':True]['text':'
 * DO NOT add an #endif after this line, this section must always be output
 * and can never be #ifdef'd out as part of conditional compilation.
 ','line_number':283,'multiline':True]