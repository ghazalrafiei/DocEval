['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_prefetch_create --
 *     Start the pre-fetch server.
 *
 * FIXME-WT-11691 The pre-fetch server currently starts up when pre-fetch is enabled on the
 *     connection level but this needs to be modified when we add the session level configuration.
 *     Perhaps we could delay starting the utility threads until the first session enables
 *     pre-fetching.
 ','line_number':11,'multiline':True]['text':'
     * This might have already been parsed and set during connection configuration, but do it here
     * as well, in preparation for the functionality being runtime configurable.
     ','line_number':29,'multiline':True]['text':'
     * Pre-fetch functionality isn't runtime configurable, so don't bother starting utility threads
     * if it isn't available.
     ','line_number':36,'multiline':True]['text':'
 * __wt_prefetch_thread_chk --
 *     Check to decide if the pre-fetch thread should continue running.
 ','line_number':52,'multiline':True]['text':'
 * __wt_prefetch_thread_run --
 *     Entry function for a prefetch thread. This is called repeatedly from the thread group code so
 *     it does not need to loop itself.
 ','line_number':62,'multiline':True]['text':'
         * Wait and cycle if there aren't any pages on the queue. It would be nice if this was
         * interrupt driven, but for now just backoff and re-check.
         ','line_number':85,'multiline':True]['text':' If there is no work for the thread to do - return back to the thread pool ','line_number':97,'multiline':True]['text':'
         * It's a weird case, but if verify is utilizing prefetch and encounters a corrupted block,
         * stop using prefetch. Some of the guarantees about ref and page freeing are ignored in
         * that case, which can invalidate entries on the prefetch queue. Don't prefetch fast
         * deleted pages - they have special performance and visibility considerations associated
         * with them. Don't prefetch fast deleted pages to avoid wasted effort. We can skip reading
         * these deleted pages into the cache if the fast truncate information is visible in the
         * session transaction snapshot.
         ','line_number':108,'multiline':True]['text':'
         * It probably isn't strictly necessary to re-acquire the lock to reset the flag, but other
         * flag accesses do need to lock, so it's better to be consistent.
         ','line_number':120,'multiline':True]['text':'
 * __wt_conn_prefetch_queue_push --
 *     Push a ref onto the pre-fetch queue.
 ','line_number':139,'multiline':True]['text':'
     * Don't add refs from trees that have eviction disabled since they are probably being closed,
     * also never add the same ref twice. These checks need to be carried out while holding the
     * pre-fetch lock - which is why they are internal to the push function.
     ','line_number':158,'multiline':True]['text':'
 * __wt_conn_prefetch_clear_tree --
 *     Clear pages from the pre-fetch queue, either all pages on the queue or pages from the current
 *     btree - depending on input parameters.
 ','line_number':177,'multiline':True]['text':'
 * __wt_prefetch_destroy --
 *     Destroy the pre-fetch threads.
 ','line_number':211,'multiline':True]['text':' Ensure that the pre-fetch queue is drained. ','line_number':228,'multiline':True]