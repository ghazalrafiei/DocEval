['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __key_return --
 *     Change the cursor to reference an internal return key.
 ','line_number':11,'multiline':True]['text':' If the cursor references a WT_INSERT item, take its key. ','line_number':27,'multiline':True]['text':'
         * If there's an exact match, the row-store search function built the key we want to return
         * in the cursor's temporary buffer. Swap the cursor's search-key and temporary buffers so
         * we can return it (it's unsafe to return the temporary buffer itself because our caller
         * might do another search in this table using the key we return, and we'd corrupt the
         * search key during any subsequent search that used the temporary buffer).
         ','line_number':34,'multiline':True]['text':' Otherwise, take the key from the original page. ','line_number':51,'multiline':True]['text':'
     * WT_PAGE_COL_FIX, WT_PAGE_COL_VAR: The interface cursor's record has usually been set, but
     * that isn't universally true, specifically, cursor.search_near may call here without first
     * setting the interface cursor.
     ','line_number':56,'multiline':True]['text':'
 * __read_col_time_window --
 *     Retrieve the time window from a column store cell.
 ','line_number':65,'multiline':True]['text':'
 * __wt_read_row_time_window --
 *     Retrieve the time window from a row.
 ','line_number':78,'multiline':True]['text':'
     * Simple values are encoded at the time of reading a page into cache, in which case we set the
     * start time point as globally visible.
     ','line_number':87,'multiline':True]['text':'
 * __wt_col_fix_get_time_window --
 *     Look for a time window on a fixed-length column page.
 ','line_number':100,'multiline':True]['text':' There should always be at least one entry. ','line_number':122,'multiline':True]['text':' Loop invariant: lo < hi. ','line_number':125,'multiline':True]['text':' If hi is lo+1, set mid to lo. Otherwise, hi is at least lo+2 and mid is between. ','line_number':127,'multiline':True]['text':' Check mid. ','line_number':130,'multiline':True]['text':' If we set mid to lo, we are done. ','line_number':139,'multiline':True]['text':' This was the last possible entry and we did not find it. ','line_number':141,'multiline':True]['text':' Otherwise, we either move lo up or hi down, but they cannot meet. ','line_number':144,'multiline':True]['text':'
 * __wt_read_cell_time_window --
 *     Read the time window from the cell.
 ','line_number':155,'multiline':True]['text':' Take the value from the original page cell. ','line_number':171,'multiline':True]['text':'
 * __read_page_cell_data_ref_kv --
 *     Helper function to copy the time window and set a buffer to reference the data from an
 *     unpacked key value cell. Return WT_RESTART if the cell is an overflow removed value.
 ','line_number':189,'multiline':True]['text':'
 * __wt_value_return_buf --
 *     Change a buffer to reference an internal original-page return value. If we see an overflow
 *     removed cell, we have raced with checkpoint freeing the overflow cell. Return restart for the
 *     caller to retry the read.
 ','line_number':208,'multiline':True]['text':'
         * If a value is simple and is globally visible at the time of reading a page into cache, we
         * encode its location into the WT_ROW.
         ','line_number':237,'multiline':True]['text':' Take the value from the original page cell. ','line_number':247,'multiline':True]['text':' Take the value from the original page cell. ','line_number':252,'multiline':True]['text':' Take the value from the original page. ','line_number':258,'multiline':True]['text':' Compilers can't in general tell that other values of page->type aren't valid here. ','line_number':268,'multiline':True]['text':'
 * __wt_key_return --
 *     Change the cursor to reference an internal return key.
 ','line_number':272,'multiline':True]['text':'
     * We may already have an internal key and the cursor may not be set up to get another copy, so
     * we have to leave it alone. Consider a cursor search followed by an update: the update doesn't
     * repeat the search, it simply updates the currently referenced key's value. We will end up
     * here with the correct internal key, but we can't "return" the key again even if we wanted to
     * do the additional work, the cursor isn't set up for that because we didn't just complete a
     * search.
     ','line_number':283,'multiline':True]['text':'
 * __wt_value_return --
 *     Change the cursor to reference an update return value.
 ','line_number':299,'multiline':True]['text':'
     * We're passed a "standard" update that's visible to us. Our caller should have already checked
     * for deleted items (we're too far down the call stack to return not-found) and any modify
     * updates should have been reconstructed into a full standard update.
     *
     * We are here to return a value to the caller. Make sure we don't skip the buf.
     ','line_number':311,'multiline':True]