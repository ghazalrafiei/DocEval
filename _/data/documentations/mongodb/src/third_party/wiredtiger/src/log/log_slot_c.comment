['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __log_slot_dump --
 *     Dump the entire slot state.
 ','line_number':11,'multiline':True]['text':'
 * __wt_log_slot_activate --
 *     Initialize a slot to become active.
 ','line_number':50,'multiline':True]['text':'
     * !!! slot_release_lsn must be set outside this function because
     * this function may be called after a log file switch and the
     * slot_release_lsn must refer to the end of the previous log.
     * !!! We cannot initialize flags here because it may already be
     * set for closing the file handle on a log file switch.  The flags
     * are reset when the slot is freed.  See log_slot_free.
     ','line_number':63,'multiline':True]['text':'
     * Set the slot state last. Other threads may have a stale pointer to this slot and could try to
     * alter the state and other fields once they see the state cleared.
     ','line_number':79,'multiline':True]['text':'
 * __log_slot_close --
 *     Close out the slot the caller is using. The slot may already be closed or freed by another
 *     thread.
 ','line_number':86,'multiline':True]['text':'
     * If this close is coming from a forced close and a thread is in the middle of using the slot,
     * return EBUSY. The caller can decide if retrying is necessary or not.
     ','line_number':109,'multiline':True]['text':'
     * If someone else is switching out this slot we lost. Nothing to do but return. Return
     * WT_NOTFOUND anytime the given slot was processed by another closing thread. Only return 0
     * when we actually closed the slot.
     ','line_number':115,'multiline':True]['text':'
     * If someone completely processed this slot, we're done.
     ','line_number':124,'multiline':True]['text':'
     * Close this slot. If we lose the race retry.
     ','line_number':132,'multiline':True]['text':'
     * We own the slot now. No one else can join. Set the end LSN.
     ','line_number':137,'multiline':True]['text':'
     * A thread setting the unbuffered flag sets the unbuffered size after setting the flag. There
     * could be a delay between a thread setting the flag, a thread closing the slot, and the
     * original thread setting that value. If the state is unbuffered, wait for the unbuffered size
     * to be set.
     ','line_number':144,'multiline':True]['text':'
     * XXX Would like to change so one piece of code advances the LSN.
     ','line_number':179,'multiline':True]['text':'
 * __log_slot_dirty_max_check --
 *     If we've passed the maximum of dirty system pages, schedule an asynchronous sync that will be
 *     performed when this slot is written.
 ','line_number':187,'multiline':True]['text':' Schedule the asynchronous sync ','line_number':212,'multiline':True]['text':'
 * __log_slot_new --
 *     Find a free slot and switch it as the new active slot. Must be called holding the slot lock.
 ','line_number':218,'multiline':True]['text':'
     * Keep trying until we can find a free slot.
     ','line_number':241,'multiline':True]['text':'
         * Although this function is single threaded, multiple threads could be trying to set a new
         * active slot sequentially. If we find an active slot that is valid, return. This check is
         * inside the loop because this function may release the lock and needs to check again after
         * acquiring it again.
         ','line_number':245,'multiline':True]['text':'
         * Rotate among the slots to lessen collisions.
         ','line_number':253,'multiline':True]['text':'
                 * Acquire our starting position in the log file. Assume the full buffer size.
                 ','line_number':262,'multiline':True]['text':'
                 * We have a new, initialized slot to use. Set it as the active slot.
                 ','line_number':266,'multiline':True]['text':'
         * If we didn't find any free slots signal the worker thread. Release the lock so that any
         * threads waiting for it can acquire and possibly move things forward.
         ','line_number':275,'multiline':True]['text':' NOTREACHED ','line_number':297,'multiline':True]['text':'
 * __log_slot_switch_internal --
 *     Switch out the current slot and set up a new one.
 ','line_number':300,'multiline':True]['text':'
     * If someone else raced us to closing this specific slot, we're done here.
     ','line_number':319,'multiline':True]['text':'
     * If the current active slot is unused and this is a forced switch, we're done. If this is a
     * non-forced switch we always switch because the slot could be part of an unbuffered operation.
     ','line_number':324,'multiline':True]['text':'
     * We may come through here multiple times if we were not able to set up a new one. If we closed
     * it already, don't try to do it again but still set up the new slot.
     ','line_number':336,'multiline':True]['text':'
         * If close returns WT_NOTFOUND it means that someone else is processing the slot change.
         ','line_number':342,'multiline':True]['text':'
         * Set that we have closed this slot because we may call in here multiple times if we retry
         * creating a new slot. Similarly set retain whether this slot needs releasing so that we
         * don't lose that information if we retry.
         ','line_number':348,'multiline':True]['text':'
     * Now that the slot is closed, set up a new one so that joining threads don't have to wait on
     * writing the previous slot if we release it. Release after setting a new one.
     ','line_number':357,'multiline':True]['text':'
         * The release here must be done while holding the slot lock. The reason is that a forced
         * slot switch needs to be sure that any earlier slot switches have completed, including
         * writing out the buffer contents of earlier slots.
         ','line_number':364,'multiline':True]['text':'
 * __wt_log_slot_switch --
 *     Switch out the current slot and set up a new one.
 ','line_number':377,'multiline':True]['text':'
     * !!! Since the WT_WITH_SLOT_LOCK macro is a do-while loop, the
     * compiler does not like it combined directly with the while loop
     * here.
     *
     * The loop conditional is a bit complex.  We have to retry if we
     * closed the slot but were unable to set up a new slot.  In that
     * case the flag indicating we have closed the slot will still be set.
     * We have to retry in that case regardless of the retry setting
     * because we are responsible for setting up the new slot.
     ','line_number':390,'multiline':True]['text':'
         * If we get an unexpected error, we need to panic. If we cannot switch the slot because of
         * a real error, such as running out of space, there's nothing we can do.
         ','line_number':404,'multiline':True]['text':'
 * __wt_log_slot_init --
 *     Initialize the slot array.
 ','line_number':421,'multiline':True]['text':'
     * Allocate memory for buffers now that the arrays are setup. Separate this from the loop above
     * to make error handling simpler.
     ','line_number':439,'multiline':True]['text':'
     * !!! If the buffer size is too close to the log file size, we will
     * switch log files very aggressively.  Scale back the buffer for
     * small log file sizes.
     ','line_number':443,'multiline':True]['text':'
     * Set up the available slot from the pool the first time.
     ','line_number':458,'multiline':True]['text':'
     * We cannot initialize the release LSN in the activate function because that function can be
     * called after a log file switch. The release LSN is usually the same as the slot_start_lsn
     * except around a log file switch.
     ','line_number':462,'multiline':True]['text':'
 * __wt_log_slot_destroy --
 *     Clean up the slot array on shutdown.
 ','line_number':480,'multiline':True]['text':'
     * Write out any remaining buffers. Free the buffer.
     ','line_number':496,'multiline':True]['text':' Writes are not throttled. ','line_number':504,'multiline':True]['text':'
 * __wt_log_slot_join --
 *     Join a consolidated logging slot.
 ','line_number':513,'multiline':True]['text':'
     * There should almost always be a slot open.
     ','line_number':535,'multiline':True]['text':'
             * Try to join our size into the existing size and atomically write it back into the
             * state.
             ','line_number':556,'multiline':True]['text':'
             * Braces used due to potential empty body warning.
             ','line_number':570,'multiline':True]['text':'
             * Attempt to swap our size into the state.
             ','line_number':576,'multiline':True]['text':'
         * The slot is no longer open or we lost the race to update it. Yield and try again.
         ','line_number':591,'multiline':True]['text':'
     * We joined this slot. Fill in our information to return to the caller.
     ','line_number':601,'multiline':True]['text':'
 * __wt_log_slot_release --
 *     Each thread in a consolidated group releases its portion to signal it has completed copying
 *     its piece of the log into the memory buffer.
 ','line_number':634,'multiline':True]['text':'
     * We maintain the last starting offset within this slot. This is used to know the offset of the
     * last record that was written rather than the beginning record of the slot.
     ','line_number':648,'multiline':True]['text':'
         * Set our offset if we are larger.
         ','line_number':653,'multiline':True]['text':'
         * If we raced another thread updating this, try again.
         ','line_number':658,'multiline':True]['text':'
     * Add my size into the state and return the new size.
     ','line_number':663,'multiline':True]['text':'
 * __wt_log_slot_free --
 *     Free a slot back into the pool.
 ','line_number':673,'multiline':True]['text':'
     * Make sure flags don't get retained between uses. We have to reset them here and not in
     * log_slot_activate because some flags (such as closing the file handle) may be set before we
     * initialize the rest of the slot.
     ','line_number':680,'multiline':True]