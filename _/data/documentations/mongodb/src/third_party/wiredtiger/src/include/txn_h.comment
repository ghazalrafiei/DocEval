['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':' Beginning of time ','line_number':9,'multiline':True]['text':' First transaction to run ','line_number':10,'multiline':True]['text':' End of time ','line_number':11,'multiline':True]['text':' Update rolled back ','line_number':12,'multiline':True]['text':' Beginning of time ','line_number':14,'multiline':True]['text':' End of time ','line_number':15,'multiline':True]['text':'
 * A list of reasons for returning a rollback error from the API. These reasons can be queried via
 * the session get rollback reason API call. Users of the API could have a dependency on the format
 * of these messages so changing them must be done with care.
 ','line_number':17,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':27,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':33,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':35,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':38,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':40,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':44,'multiline':True]['text':' Not a visible update ','line_number':47,'multiline':True]['text':' Prepared update ','line_number':48,'multiline':True]['text':' A visible update ','line_number':49,'multiline':True]['text':'
 * Transaction ID comparison dealing with edge cases.
 *
 * WT_TXN_ABORTED is the largest possible ID (never visible to a running transaction), WT_TXN_NONE
 * is smaller than any possible ID (visible to all running transactions).
 ','line_number':52,'multiline':True]['text':'
 * Perform an operation at the specified isolation level.
 *
 * This is fiddly: we can't cope with operations that begin transactions (leaving an ID allocated),
 * and operations must not move our published snap_min forwards (or updates we need could be freed
 * while this operation is in progress). Check for those cases: the bugs they cause are hard to
 * debug.
 ','line_number':68,'multiline':True]['text':'
     * The first commit or durable timestamp used for this transaction. Determines its position in
     * the durable queue and prevents the all_durable timestamp moving past this point.
     ','line_number':105,'multiline':True]['text':'
     * The read timestamp used for this transaction. Determines what updates can be read and
     * prevents the oldest timestamp moving past this point.
     ','line_number':111,'multiline':True]['text':' Current transaction ID. ','line_number':122,'multiline':True]['text':' The oldest running transaction ID (may race). ','line_number':124,'multiline':True]['text':'
     * The oldest transaction ID that is not yet visible to some transaction in the system.
     ','line_number':127,'multiline':True]['text':' Protects the active transaction states. ','line_number':147,'multiline':True]['text':' Protects logging, checkpoints and transaction visibility. ','line_number':150,'multiline':True]['text':'
     * Track information about the running checkpoint. The transaction snapshot used when
     * checkpointing are special. Checkpoints can run for a long time so we keep them out of regular
     * visibility checks. Eviction and checkpoint operations know when they need to be aware of
     * checkpoint transactions.
     *
     * We rely on the fact that (a) the only table a checkpoint updates is the metadata; and (b)
     * once checkpoint has finished reading a table, it won't revisit it.
     ','line_number':153,'multiline':True]['text':' Checkpoint running ','line_number':162,'multiline':True]['text':' Checkpoint running and processing history store file ','line_number':164,'multiline':True]['text':' Checkpoint's session ID ','line_number':165,'multiline':True]['text':' Checkpoint's txn shared state ','line_number':166,'multiline':True]['text':' Checkpoint's timestamp ','line_number':167,'multiline':True]['text':' Debug mode op counter ','line_number':169,'multiline':True]['text':' Debug mode rollback ','line_number':170,'multiline':True]['text':' Oldest ID for metadata ','line_number':171,'multiline':True]['text':' Per-session shared transaction states ','line_number':173,'multiline':True]['text':'
 * WT_TXN_OP --
 *	A transactional operation.  Each transaction builds an in-memory array
 *	of these operations as it runs, then uses the array to either write log
 *	records during commit or undo the operations during rollback.
 ','line_number':200,'multiline':True]['text':' WT_TXN_OP_BASIC_ROW, WT_TXN_OP_INMEM_ROW ','line_number':210,'multiline':True]['text':' WT_TXN_OP_BASIC_COL, WT_TXN_OP_INMEM_COL ','line_number':216,'multiline':True]['text':'
 * upd is pointing to same memory in both op_row and op_col, so for simplicity just chose op_row upd
 ','line_number':221,'multiline':True]['text':' WT_TXN_OP_REF_DELETE ','line_number':227,'multiline':True]['text':' WT_TXN_OP_TRUNCATE_COL ','line_number':229,'multiline':True]['text':' WT_TXN_OP_TRUNCATE_ROW ','line_number':233,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':240,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':242,'multiline':True]['text':'
 * WT_TXN --
 *	Per-session transaction context.
 ','line_number':248,'multiline':True]['text':' Isolation is currently forced. ','line_number':257,'multiline':True]['text':'
     * Snapshot data:
     *	ids >= snap_max are invisible,
     *	ids < snap_min are visible,
     *	everything else is visible unless it is in the snapshot.
     ','line_number':259,'multiline':True]['text':' Log sync configuration ','line_number':268,'multiline':True]['text':'
     * Timestamp copied into updates created by this transaction.
     *
     * In some use cases, this can be updated while the transaction is running.
     ','line_number':270,'multiline':True]['text':'
     * Durable timestamp copied into updates created by this transaction. It is used to decide
     * whether to consider this update to be persisted or not by stable checkpoint.
     ','line_number':277,'multiline':True]['text':'
     * Set to the first commit timestamp used in the transaction and fixed while the transaction is
     * on the public list of committed timestamps.
     ','line_number':283,'multiline':True]['text':'
     * Timestamp copied into updates created by this transaction, when this transaction is prepared.
     ','line_number':289,'multiline':True]['text':'
     * Timestamps used for reading via a checkpoint cursor instead of txn_shared->read_timestamp and
     * the current oldest/pinned timestamp, respectively.
     ','line_number':294,'multiline':True]['text':' Array of modifications by this transaction. ','line_number':302,'multiline':True]['text':' Scratch buffer for in-memory log records. ','line_number':310,'multiline':True]['text':' Checkpoint status. ','line_number':313,'multiline':True]['text':' Timeout ','line_number':319,'multiline':True]['text':' If rollback, the reason ','line_number':322,'multiline':True]['text':'
 * WT_TXN_HAS_TS_COMMIT --
 *	The transaction has a set commit timestamp.
 * WT_TXN_HAS_TS_DURABLE --
 *	The transaction has an explicitly set durable timestamp (that is, it
 *	hasn't been mirrored from its commit timestamp value).
 * WT_TXN_SHARED_TS_DURABLE --
 *	The transaction has been published to the durable queue. Setting this
 *	flag lets us know that, on release, we need to mark the transaction for
 *	clearing.
 ','line_number':324,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':336,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':357,'multiline':True]['text':'
     * Zero or more bytes of value (the payload) immediately follows the WT_TXN structure. We use a
     * C99 flexible array member which has the semantics we want.
     ','line_number':360,'multiline':True]