['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __win_fs_exist --
 *     Return if the file exists.
 ','line_number':34,'multiline':True]['text':'
 * __win_fs_remove --
 *     Remove a file.
 ','line_number':58,'multiline':True]['text':'
 * __win_fs_rename --
 *     Rename a file.
 ','line_number':90,'multiline':True]['text':'
     * We want an atomic rename, but that's not guaranteed by MoveFileExW (or by any MSDN API).
     * Don't set the MOVEFILE_COPY_ALLOWED flag to prevent the system from falling back to a copy
     * and delete process. Do set the MOVEFILE_WRITE_THROUGH flag so the window is as small as
     * possible, just in case. WiredTiger renames are done in a single directory and we expect that
     * to be an atomic metadata update on any modern filesystem.
     ','line_number':111,'multiline':True]['text':'
 * __wt_win_fs_size --
 *     Get the size of a file in bytes, by file name.
 ','line_number':133,'multiline':True]['text':'
 * __win_file_close --
 *     ANSI C close.
 ','line_number':167,'multiline':True]['text':'
     * Close the primary and secondary handles.
     *
     * We don't open Windows system handles when opening directories for flushing, as it's not
     * necessary (or possible) to flush a directory on Windows. Confirm the file handle is open
     * before closing it.
     ','line_number':182,'multiline':True]['text':'
 * __win_file_lock --
 *     Lock/unlock a file.
 ','line_number':209,'multiline':True]['text':'
     * WiredTiger requires this function be able to acquire locks past
     * the end of file.
     *
     * http://msdn.microsoft.com/
     *    en-us/library/windows/desktop/aa365202%28v=vs.85%29.aspx
     *
     * You can lock bytes that are beyond the end of the current file.
     * This is useful to coordinate adding records to the end of a file.
     ','line_number':224,'multiline':True]['text':'
 * __win_file_read --
 *     Read a chunk.
 ','line_number':250,'multiline':True]['text':' Assert direct I/O is aligned and a multiple of the alignment. ','line_number':270,'multiline':True]['text':' Break reads larger than 1GB into 1GB chunks. ','line_number':276,'multiline':True]['text':'
 * __win_file_size --
 *     Get the size of a file in bytes, by file handle.
 ','line_number':295,'multiline':True]['text':'
 * __win_file_sync --
 *     MSVC fsync.
 ','line_number':323,'multiline':True]['text':'
     * We don't open Windows system handles when opening directories for flushing, as it is not
     * necessary (or possible) to flush a directory on Windows. Confirm the file handle is set
     * before attempting to sync it.
     ','line_number':338,'multiline':True]['text':'
 * __win_file_set_end --
 *     Truncate or extend a file.
 ','line_number':356,'multiline':True]['text':'
 * __win_file_write --
 *     Write a chunk.
 ','line_number':397,'multiline':True]['text':' Assert direct I/O is aligned and a multiple of the alignment. ','line_number':417,'multiline':True]['text':' Break writes larger than 1GB into 1GB chunks. ','line_number':423,'multiline':True]['text':'
 * __win_open_file --
 *     Open a file handle.
 ','line_number':442,'multiline':True]['text':' Set up error handling. ','line_number':467,'multiline':True]['text':'
     * Opening a file handle on a directory is only to support filesystems that require a directory
     * sync for durability, and Windows doesn't require that functionality: create an empty WT_FH
     * structure with invalid handles.
     ','line_number':472,'multiline':True]['text':'
     * Security: The application may spawn a new process, and we don't want another process to have
     * access to our file handles.
     *
     * TODO: Set tighter file permissions but set bInheritHandle to false to prevent inheritance
     ','line_number':484,'multiline':True]['text':' Direct I/O. ','line_number':500,'multiline':True]['text':' FILE_FLAG_WRITE_THROUGH does not require aligned buffers ','line_number':506,'multiline':True]['text':' If the user indicated a random workload, disable read-ahead. ','line_number':513,'multiline':True]['text':' If the user indicated a sequential workload, set that. ','line_number':517,'multiline':True]['text':'
     * Open a second handle to file to support file extension/truncation concurrently with reads on
     * the file. Writes would also move the file pointer.
     ','line_number':540,'multiline':True]['text':' Initialize public information. ','line_number':557,'multiline':True]['text':'
 * The underlying objects are little-endian, mapping objects isn't currently supported on big-endian
 * systems.
 ','line_number':564,'multiline':True]['text':' Extend and truncate share the same implementation. ','line_number':576,'multiline':True]['text':'
 * __win_terminate --
 *     Discard a Windows configuration.
 ','line_number':593,'multiline':True]['text':'
 * __wt_os_win --
 *     Initialize a MSVC configuration.
 ','line_number':608,'multiline':True]['text':' Initialize the Windows jump table. ','line_number':622,'multiline':True]['text':' Switch it into place. ','line_number':633,'multiline':True]