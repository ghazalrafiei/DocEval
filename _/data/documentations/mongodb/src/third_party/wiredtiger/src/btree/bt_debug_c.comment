['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * We pass around a session handle and output information, group it together.
 ','line_number':12,'multiline':True]['text':' Enclosing session ','line_number':18,'multiline':True]['text':' History store lookups ','line_number':22,'multiline':True]['text':'
     * When using the standard event handlers, the debugging output has to do its own message
     * handling because its output isn't line-oriented.
     ','line_number':25,'multiline':True]['text':' Optional file handle ','line_number':29,'multiline':True]['text':' Buffered message ','line_number':30,'multiline':True]['text':' Function to write ','line_number':32,'multiline':True]['text':' Temporary space ','line_number':38,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':40,'multiline':True]['text':' Debug leaf pages ','line_number':41,'multiline':True]['text':' Descend the tree ','line_number':42,'multiline':True]['text':' Dump application data when walking the tree ','line_number':43,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':44,'multiline':True]['text':' Output separator ','line_number':48,'multiline':True]['text':'
 * __wt_debug_set_verbose --
 *     Set verbose flags from the debugger.
 ','line_number':67,'multiline':True]['text':'
 * __debug_hex_byte --
 *     Output a single byte in hex.
 ','line_number':82,'multiline':True]['text':'
 * __debug_bytes --
 *     Dump a single set of bytes.
 ','line_number':92,'multiline':True]['text':'
 * __debug_item --
 *     Dump a single data/size item, with an optional tag.
 ','line_number':113,'multiline':True]['text':'
 * __debug_item_key --
 *     Dump a single data/size key item, with an optional tag.
 ','line_number':126,'multiline':True]['text':'
 * __debug_item_value --
 *     Dump a single data/size value item, with an optional tag.
 ','line_number':143,'multiline':True]['text':'
     * If the format is 'S', it's a string and our version of it may not yet be nul-terminated.
     ','line_number':164,'multiline':True]['text':'
 * __dmsg_event --
 *     Send a debug message to the event handler.
 ','line_number':176,'multiline':True]['text':'
     * Debug output chunks are not necessarily terminated with a newline character. It's easy if
     * we're dumping to a stream, but if we're dumping to an event handler, which is line-oriented,
     * we must buffer the output chunk, and pass it to the event handler once we see a terminating
     * newline.
     ','line_number':192,'multiline':True]['text':' Check if there was enough space. ','line_number':207,'multiline':True]['text':'
         * There's not much to do on error without checking for an error return on every single
         * printf. Anyway, it's pretty unlikely and this is debugging output, I'm not going to worry
         * about it.
         ','line_number':213,'multiline':True]['text':'
 * __dmsg_file --
 *     Send a debug message to a file.
 ','line_number':229,'multiline':True]['text':'
 * __debug_config --
 *     Configure debugging output.
 ','line_number':246,'multiline':True]['text':'
     * Set up history store support, opening a history store cursor on demand, except while running
     * in-memory configuration, or when reading a checkpoint that has no corresponding history store
     * checkpoint.
     ','line_number':266,'multiline':True]['text':'
         * For debugging dumps, we want to see everything, not just what is currently visible in
         * whatever arbitrary context we may have inherited. By default, however, suppress obsolete
         * entries (those with globally visible stop times). For checkpoint cursors, dump those as
         * well, not because they are more interesting when reading a checkpoint but because the
         * visible-all test to hide them needs a copy of the checkpoint snapshot and that's not
         * easily available. (If we are dumping pages from a checkpoint cursor, it is actually
         * accessible in the cursor; but the logic for substituting it into the session is private
         * to cur_file.c and I don't want to either change that or paste a second copy of it. Hiding
         * a few obsolete history store entries isn't worth either of those changes.
         ','line_number':276,'multiline':True]['text':'
     * If we weren't given a file, we use the default event handler, and we'll have to buffer
     * messages.
     ','line_number':292,'multiline':True]['text':'
 * __debug_wrapup --
 *     Flush any remaining output, release resources.
 ','line_number':317,'multiline':True]['text':'
     * Discard the buffer -- it shouldn't have anything in it, but might as well be cautious.
     ','line_number':340,'multiline':True]['text':' Close any file we opened. ','line_number':349,'multiline':True]['text':'
 * __wt_debug_addr_print --
 *     Print out an address.
 ','line_number':356,'multiline':True]['text':'
 * __wt_debug_addr --
 *     Read and dump a disk page in debugging mode, using an addr/size pair.
 ','line_number':374,'multiline':True]['text':'
 * __wt_debug_offset_blind --
 *     Read and dump a disk page in debugging mode, using a file offset.
 ','line_number':393,'multiline':True]['text':'
     * This routine depends on the default block manager's view of files, where an address consists
     * of a file offset, length, and checksum. This is for debugging only.
     ','line_number':404,'multiline':True]['text':'
 * __wt_debug_offset --
 *     Read and dump a disk page in debugging mode, using a file offset/size/checksum triplet.
 ','line_number':412,'multiline':True]['text':'
     * This routine depends on the default block manager's view of files, where an address consists
     * of a file ID, file offset, length, and checksum. This is only for debugging, other block
     * managers might not describe underlying objects the same way, that's why there's no block
     * manager method.
     *
     * Convert the triplet into an address structure.
     ','line_number':427,'multiline':True]['text':'
     * Read the address through the btree I/O functions (so the block is decompressed and/or
     * unencrypted as necessary).
     ','line_number':439,'multiline':True]['text':'
 * __debug_hs_cursor --
 *     Dump information pointed to by a single history store cursor.
 ','line_number':452,'multiline':True]['text':'
         * Currently, we expect only modifies or full values to be exposed by hs_cursors. This means
         * we can ignore other types for now.
         ','line_number':496,'multiline':True]['text':'
 * __debug_hs_key --
 *     Dump any HS records associated with the key.
 ','line_number':506,'multiline':True]['text':'
     * Open a history store cursor positioned at the end of the data store key (the newest record)
     * and iterate backwards until we reach a different key or btree.
     ','line_number':522,'multiline':True]['text':'
 * __debug_cell_int_data --
 *     Dump a single WT_COL_INT or WT_ROW_INT disk image cell's data in debugging mode.
 ','line_number':535,'multiline':True]['text':'
 * __debug_cell_int --
 *     Dump a single unpacked WT_COL_INT or WT_ROW_INT disk image WT_CELL.
 ','line_number':555,'multiline':True]['text':' Dump the cell's per-disk page type information. ','line_number':572,'multiline':True]['text':' Dump timestamps and addresses. ','line_number':579,'multiline':True]['text':' Dump the deleted pages transaction ID, commit timestamp, and durable timestamp. ','line_number':582,'multiline':True]['text':' FALLTHROUGH ','line_number':589,'multiline':True]['text':'
 * __debug_dsk_int --
 *     Dump a WT_COL_INT or WT_ROW_INT disk image.
 ','line_number':607,'multiline':True]['text':'
 * __debug_cell_kv --
 *     Dump a single unpacked WT_COL_VAR or WT_ROW_LEAF disk image WT_CELL.
 ','line_number':623,'multiline':True]['text':' Column-store references to deleted cells return a NULL cell reference. ','line_number':637,'multiline':True]['text':' Row-store references to empty cells return a NULL on-page reference. ','line_number':641,'multiline':True]['text':' Dump per-disk page type information. ','line_number':650,'multiline':True]['text':' Dump time window. ','line_number':667,'multiline':True]['text':' Column-store deleted cells. ','line_number':680,'multiline':True]['text':' Overflow addresses. ','line_number':687,'multiline':True]['text':' If redacting user data, we're done after dumping the header. ','line_number':699,'multiline':True]['text':' Standard key/value cells. ','line_number':703,'multiline':True]['text':'
 * __debug_dsk_kv --
 *     Dump a WT_COL_VAR or WT_ROW_LEAF disk image.
 ','line_number':723,'multiline':True]['text':'
 * __debug_dsk_col_fix --
 *     Dump a WT_PAGE_COL_FIX disk image.
 ','line_number':739,'multiline':True]['text':' Print something useful instead of crashing or failing. ','line_number':775,'multiline':True]['text':'
 * __wt_debug_disk --
 *     Dump a disk page in debugging mode.
 ','line_number':786,'multiline':True]['text':' FALLTHROUGH ','line_number':810,'multiline':True]['text':'
 * __debug_tree_shape_info --
 *     Pretty-print information about a page.
 ','line_number':856,'multiline':True]['text':'
 * __debug_tree_shape_worker --
 *     Dump information about the current page and descend.
 ','line_number':889,'multiline':True]['text':'
 * __wt_debug_tree_shape --
 *     Dump the shape of the in-memory tree.
 ','line_number':922,'multiline':True]['text':' A NULL WT_REF starts at the top of the tree -- it's a convenience. ','line_number':937,'multiline':True]['text':'
 * __wt_debug_tree_all --
 *     Dump the in-memory information for a tree, including leaf pages.
 ','line_number':947,'multiline':True]['text':'
     * Allow an explicit btree as an argument, as one may not yet be set on the session.
     ','line_number':957,'multiline':True]['text':'
 * __wt_debug_tree --
 *     Dump the in-memory information for a tree, not including leaf pages.
 ','line_number':970,'multiline':True]['text':'
     * Allow an explicit btree as an argument, as one may not yet be set on the session.
     ','line_number':980,'multiline':True]['text':'
 * __wt_debug_page --
 *     Dump the in-memory information for a page.
 ','line_number':992,'multiline':True]['text':'
     * Allow an explicit btree as an argument, as one may not yet be set on the session.
     ','line_number':1009,'multiline':True]['text':'
 * __wt_debug_cursor_page --
 *     Dump the in-memory information for a cursor-referenced page.
 ','line_number':1027,'multiline':True]['text':'
     * If the cursor is a checkpoint cursor and we don't already have a history store checkpoint
     * name in the session, substitute the one from this cursor. This allows the dump to print from
     * the history store, which otherwise will get skipped.
     ','line_number':1044,'multiline':True]['text':'
 * __wt_debug_cursor_tree_hs --
 *     Dump the history store tree given a user cursor.
 ','line_number':1063,'multiline':True]['text':'
 * __debug_tree --
 *     Dump the in-memory information for a tree.
 ','line_number':1085,'multiline':True]['text':' A NULL page starts at the top of the tree -- it's a convenience. ','line_number':1098,'multiline':True]['text':'
 * __debug_page --
 *     Dump the in-memory information for an in-memory page.
 ','line_number':1109,'multiline':True]['text':' Dump the page metadata. ','line_number':1122,'multiline':True]['text':' Dump the page. ','line_number':1126,'multiline':True]['text':'
 * __debug_page_metadata --
 *     Dump an in-memory page's metadata.
 ','line_number':1156,'multiline':True]['text':'
 * __debug_page_col_fix --
 *     Dump an in-memory WT_PAGE_COL_FIX page.
 ','line_number':1256,'multiline':True]['text':' Check for a match on the update list. ','line_number':1304,'multiline':True]['text':'
 * __debug_page_col_int --
 *     Dump an in-memory WT_PAGE_COL_INT page.
 ','line_number':1328,'multiline':True]['text':'
 * __debug_page_col_var --
 *     Dump an in-memory WT_PAGE_COL_VAR page.
 ','line_number':1358,'multiline':True]['text':'
 * __debug_page_row_int --
 *     Dump an in-memory WT_PAGE_ROW_INT page.
 ','line_number':1408,'multiline':True]['text':'
 * __debug_page_row_leaf --
 *     Dump an in-memory WT_PAGE_ROW_LEAF page.
 ','line_number':1441,'multiline':True]['text':'
     * Dump any K/V pairs inserted into the page before the first from-disk key on the page.
     ','line_number':1458,'multiline':True]['text':' Dump the page's K/V pairs. ','line_number':1464,'multiline':True]['text':'
 * __debug_col_skip --
 *     Dump a column-store skiplist.
 ','line_number':1484,'multiline':True]['text':'
 * __debug_row_skip --
 *     Dump an insert list.
 ','line_number':1515,'multiline':True]['text':'
 * __debug_modify --
 *     Dump a modify update.
 ','line_number':1539,'multiline':True]['text':'
 * __debug_update --
 *     Dump an update list.
 ','line_number':1567,'multiline':True]['text':'
 * __debug_ref_state --
 *     Return a string representing the WT_REF state.
 ','line_number':1643,'multiline':True]['text':' NOTREACHED ','line_number':1664,'multiline':True]['text':'
 * __debug_ref --
 *     Dump a WT_REF structure.
 ','line_number':1667,'multiline':True]