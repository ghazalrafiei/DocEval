['text':'
 * Calculate the checksum of data that is 16 byte aligned and a multiple of
 * 16 bytes.
 *
 * The first step is to reduce it to 1024 bits. We do this in 8 parallel
 * chunks in order to mask the latency of the vpmsum instructions. If we
 * have more than 32 kB of data to checksum we repeat this step multiple
 * times, passing in the previous 1024 bits.
 *
 * The next step is to reduce the 1024 bits to 64 bits. This step adds
 * 32 bits of 0s to the end - this matches what a CRC does. We just
 * calculate constants that land the data in this 32 bits.
 *
 * We then use fixed point Barrett reduction to compute a mod n over GF(2)
 * for n = CRC using POWER8 instructions. We use x = 32.
 *
 * http://en.wikipedia.org/wiki/Barrett_reduction
 *
 * This code uses gcc vector builtins instead using assembly directly.
 *
 * Copyright (C) 2017 Rogerio Alves <rogealve@br.ibm.com>, IBM
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of either:
 *
 *  a) the GNU General Public License as published by the Free Software
 *     Foundation; either version 2 of the License, or (at your option)
 *     any later version, or
 *  b) the Apache License, Version 2.0
 ','line_number':3,'multiline':True]['text':'
 * crc32_align --
 *     Align helper for CRC32 functions.
 ','line_number':45,'multiline':True]['text':'
 * crc32_align --
 *     Align helper for CRC32 functions.
 ','line_number':57,'multiline':True]['text':' -Werror=missing-prototypes ','line_number':73,'multiline':True]['text':'
 * crc32_vpmsum --
 *     VPM sum helper for CRC32 functions.
 ','line_number':76,'multiline':True]['text':' When we have a load-store in a single-dispatch group and address overlap
 * such that foward is not allowed (load-hit-store) the group must be flushed.
 * A group ending NOP prevents the flush.
 ','line_number':128,'multiline':True]['text':' Byte reverse permute constant LE. ','line_number':143,'multiline':True]['text':' vdata0-vdata7 will contain our data (p). ','line_number':173,'multiline':True]['text':' v0-v7 will contain our checksums ','line_number':176,'multiline':True]['text':' Vector auxiliary variables. ','line_number':186,'multiline':True]['text':' Constant table offset. ','line_number':190,'multiline':True]['text':' Counter. ','line_number':192,'multiline':True]['text':' Align by 128 bits. The last 128 bit block will be processed at end. ','line_number':198,'multiline':True]['text':' Shift into top 32 bits ','line_number':209,'multiline':True]['text':' Short version. ','line_number':214,'multiline':True]['text':' Calculate where in the constant table we need to start. ','line_number':216,'multiline':True]['text':' xor initial value','line_number':223,'multiline':True]['text':' Load initial values. ','line_number':240,'multiline':True]['text':' xor in initial value ','line_number':265,'multiline':True]['text':' Checksum in blocks of MAX_SIZE. ','line_number':271,'multiline':True]['text':'
             * Work out the offset into the constants table to start at. Each constant is 16 bytes,
             * and it is used against 128 bytes of input data - 128 / 16 = 8
             ','line_number':279,'multiline':True]['text':' We reduce our final 128 bytes in a separate step ','line_number':284,'multiline':True]['text':'
                 * main loop. We modulo schedule it such that it takes three iterations to complete
                 * - first iteration load, second iteration vpmsum, third iteration xor.
                 ','line_number':337,'multiline':True]['text':' First cool down','line_number':406,'multiline':True]['text':' else ','line_number':448,'multiline':True]['text':' Second cool down. ','line_number':450,'multiline':True]['text':'
             * vpmsumd produces a 96 bit result in the least significant bits of the register. Since
             * we are bit reflected we have to shift it left 32 bits so it occupies the least
             * significant bits in the bit reflected domain.
             ','line_number':461,'multiline':True]['text':' xor with the last 1024 bits. ','line_number':484,'multiline':True]['text':' Check if we have more blocks to process ','line_number':520,'multiline':True]['text':' zero v0-v7 ','line_number':525,'multiline':True]['text':' Calculate how many bytes we have left. ','line_number':539,'multiline':True]['text':' Calculate where in (short) constant table we need to start. ','line_number':542,'multiline':True]['text':' Now reduce the tail (0-112 bytes). ','line_number':573,'multiline':True]['text':' xor all parallel chunks together. ','line_number':583,'multiline':True]['text':' Barrett Reduction ','line_number':595,'multiline':True]['text':' shift left one bit ','line_number':604,'multiline':True]['text':'
     * Now for the actual algorithm. The idea is to calculate q, the multiple of our polynomial that
     * we need to subtract. By doing the computation 2x bits higher (ie 64 bits) and shifting the
     * result back down 2x bits, we round down to the nearest multiple.
     ','line_number':613,'multiline':True]['text':' ma ','line_number':619,'multiline':True]['text':' q = floor(ma/(2^64)) ','line_number':622,'multiline':True]['text':' qn ','line_number':625,'multiline':True]['text':' a - qn, subtraction is xor in GF(2) ','line_number':628,'multiline':True]['text':'
     * Get the result into r3. We need to shift it left 8 bytes: V0 [ 0 1 2 X ] V0 [ 0 X 2 3 ]
     ','line_number':630,'multiline':True]['text':'
     * The reflected version of Barrett reduction. Instead of bit reflecting our data (which is
     * expensive to do), we bit reflect our constants and our algorithm, which means the
     * intermediate data in our vector registers goes from 0-63 instead of 63-0. We can reflect the
     * algorithm because we don't carry in mod 2 arithmetic.
     ','line_number':636,'multiline':True]['text':' bottom 32 bits of a ','line_number':643,'multiline':True]['text':' ma ','line_number':646,'multiline':True]['text':' bottom 32bits of ma ','line_number':650,'multiline':True]['text':' qn ','line_number':652,'multiline':True]['text':' a - qn, subtraction is xor in GF(2) ','line_number':655,'multiline':True]['text':'
     * Since we are bit reflected, the result (ie the low 32 bits) is in the high 32 bits. We just
     * need to shift it left 4 bytes V0 [ 0 1 X 3 ] V0 [ 0 X 2 3 ]
     ','line_number':658,'multiline':True]['text':' shift result into top 64 bits of ','line_number':663,'multiline':True]