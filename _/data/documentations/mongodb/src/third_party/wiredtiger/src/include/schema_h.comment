['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':' Character constants for projection plans ','line_number':9,'multiline':True]['text':' Go to key in cursor <arg> ','line_number':10,'multiline':True]['text':' Process the next item (<arg> repeats) ','line_number':11,'multiline':True]['text':' Reuse the previous item (<arg> repeats) ','line_number':12,'multiline':True]['text':' Skip a column in the cursor (<arg> repeats) ','line_number':13,'multiline':True]['text':' Go to the value in cursor <arg> ','line_number':14,'multiline':True]['text':' Logical name ','line_number':17,'multiline':True]['text':' Underlying data source ','line_number':18,'multiline':True]['text':' Configuration string ','line_number':19,'multiline':True]['text':' List of columns from config ','line_number':21,'multiline':True]['text':' Logical name ','line_number':25,'multiline':True]['text':' Underlying data source ','line_number':26,'multiline':True]['text':' Configuration string ','line_number':27,'multiline':True]['text':' List of columns from config ','line_number':29,'multiline':True]['text':' Custom collator ','line_number':31,'multiline':True]['text':' Collator is owned by this index ','line_number':32,'multiline':True]['text':' Custom key extractor ','line_number':34,'multiline':True]['text':' Extractor is owned by this index ','line_number':35,'multiline':True]['text':' Key format ','line_number':37,'multiline':True]['text':' Key projection plan ','line_number':38,'multiline':True]['text':' Value projection plan ','line_number':39,'multiline':True]['text':' Index key format (hides primary) ','line_number':41,'multiline':True]['text':' Key format for custom extractors ','line_number':42,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':44,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':46,'multiline':True]['text':' Index configuration flags ','line_number':47,'multiline':True]['text':'
 * WT_TABLE --
 *	Handle for a logical table.  A table consists of one or more column
 *	groups, each of which holds some set of columns all sharing a primary
 *	key; and zero or more indices, each of which holds some set of columns
 *	in an index key that can be used to reconstruct the primary key.
 ','line_number':50,'multiline':True]['text':' Holds metadata entry name and the associated config string. ','line_number':73,'multiline':True]['text':' metadata key ','line_number':76,'multiline':True]['text':' metadata value ','line_number':77,'multiline':True]['text':' Invalid file id for import operation. It is used to sort import entries by file id. ','line_number':79,'multiline':True]['text':'
     * Actual value of file ID is uint_32. We use int64_t here to store invalid file id that is
     * defined above.
     ','line_number':82,'multiline':True]['text':' id config value ','line_number':86,'multiline':True]['text':' Array of metadata entries used when importing from a metadata file. ','line_number':89,'multiline':True]['text':' entries in the list will be related to this uri ','line_number':91,'multiline':True]['text':' suffix of the URI ','line_number':92,'multiline':True]['text':' allocated ','line_number':94,'multiline':True]['text':' next slot ','line_number':95,'multiline':True]['text':' import metadata entries ','line_number':96,'multiline':True]['text':'
 * Tables without explicit column groups have a single default column group containing all of the
 * columns except tiered shared table as it contains two column groups to represent active and
 * shared tables.
 ','line_number':99,'multiline':True]['text':' Helpers for the locked state of the handle list and table locks. ','line_number':106,'multiline':True]['text':'
 * WT_WITH_LOCK_WAIT --
 *	Wait for a lock, perform an operation, drop the lock.
 ','line_number':113,'multiline':True]['text':'
 * WT_WITH_LOCK_NOWAIT --
 *	Acquire a lock if available, perform an operation, drop the lock.
 ','line_number':130,'multiline':True]['text':'
 * WT_WITH_CHECKPOINT_LOCK, WT_WITH_CHECKPOINT_LOCK_NOWAIT --
 *	Acquire the checkpoint lock, perform an operation, drop the lock.
 ','line_number':147,'multiline':True]['text':'
 * WT_WITH_HANDLE_LIST_READ_LOCK --
 *	Acquire the data handle list lock in shared mode, perform an operation,
 *	drop the lock. The handle list lock is a read-write lock so the
 *	implementation is different to the other lock macros.
 *
 *	Note: always waits because some operations need the handle list lock to
 *	discard handles, and we only expect it to be held across short
 *	operations.
 ','line_number':157,'multiline':True]['text':'
 * WT_WITH_HANDLE_LIST_WRITE_LOCK --
 *	Acquire the data handle list lock in exclusive mode, perform an
 *	operation, drop the lock. The handle list lock is a read-write lock so
 *	the implementation is different to the other lock macros.
 ','line_number':180,'multiline':True]['text':'
 * WT_WITH_METADATA_LOCK --
 *	Acquire the metadata lock, perform an operation, drop the lock.
 ','line_number':201,'multiline':True]['text':'
 * WT_WITH_SCHEMA_LOCK, WT_WITH_SCHEMA_LOCK_NOWAIT --
 *	Acquire the schema lock, perform an operation, drop the lock.
 *	Check that we are not already holding some other lock: the schema lock
 *	must be taken first.
 ','line_number':208,'multiline':True]['text':'
 * WT_WITH_TABLE_READ_LOCK, WT_WITH_TABLE_WRITE_LOCK,
 * WT_WITH_TABLE_WRITE_LOCK_NOWAIT --
 *	Acquire the table lock, perform an operation, drop the lock.
 *	The table lock is a read-write lock so the implementation is different
 *	to most other lock macros.
 *
 *	Note: readlock always waits because some operations need the table lock
 *	to discard handles, and we only expect it to be held across short
 *	operations.
 ','line_number':234,'multiline':True]['text':'
 * WT_WITH_HOTBACKUP_READ_LOCK --
 *	Acquire the hot backup read lock and perform an operation provided that
 *	there is no hot backup in progress.  The skipp parameter can be used to
 *	check whether the operation got skipped or not.
 ','line_number':290,'multiline':True]['text':'
 * WT_WITH_HOTBACKUP_WRITE_LOCK --
 *	Acquire the hot backup write lock and perform an operation.
 ','line_number':320,'multiline':True]['text':'
 * WT_WITH_HOTBACKUP_READ_LOCK_UNCOND --
 *	Acquire the hot backup read lock and perform an operation
 *	unconditionally.  This is a specialized macro for a few isolated cases.
 *	Code that wishes to acquire the read lock should default to using
 *	WT_WITH_HOTBACKUP_READ_LOCK which checks that there is no hot backup in
 *	progress.
 ','line_number':339,'multiline':True]['text':'
 * WT_WITHOUT_LOCKS --
 *	Drop the handle, table and/or schema locks, perform an operation,
 *	re-acquire the lock(s).
 ','line_number':361,'multiline':True]