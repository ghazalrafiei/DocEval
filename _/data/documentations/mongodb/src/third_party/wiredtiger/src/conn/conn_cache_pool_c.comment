['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * Tuning constants.
 ','line_number':11,'multiline':True]['text':'
 * Threshold when a connection is allocated more cache, as a percentage of the amount of pressure
 * the busiest participant has.
 ','line_number':14,'multiline':True]['text':'
 * Threshold when a connection is allocated less cache, as a percentage of the amount of pressure
 * the busiest participant has.
 ','line_number':19,'multiline':True]['text':' Balancing passes after a bump before a connection is a candidate. ','line_number':24,'multiline':True]['text':' Balancing passes after a reduction before a connection is a candidate. ','line_number':26,'multiline':True]['text':'
 * Constants that control how much influence different metrics have on the pressure calculation.
 ','line_number':29,'multiline':True]['text':'
 * __wt_cache_pool_config --
 *     Parse and setup the cache pool options.
 ','line_number':40,'multiline':True]['text':'
             * Tell the user if they configured a cache pool size but didn't enable it by naming the
             * pool.
             ','line_number':65,'multiline':True]['text':'
         * NOTE: The allocations made when configuring and opening a cache pool don't really belong
         * to the connection that allocates them. If a memory allocator becomes connection specific
         * in the future we will need a way to allocate memory outside of the connection here.
         ','line_number':78,'multiline':True]['text':' Create a cache pool. ','line_number':89,'multiline':True]['text':' Belongs to the cache pool now. ','line_number':93,'multiline':True]['text':' Only a single cache pool is supported. ','line_number':101,'multiline':True]['text':'
     * The cache pool lock now exists for sure, and we may now lock it. Remember this so that we can
     * use __wt_spin_unlock_if_owned at the end of the function.
     ','line_number':105,'multiline':True]['text':'
     * At this point we have a cache pool to use. We need to take its lock. We need to drop the
     * process lock first to avoid deadlock and acquire in the proper order.
     ','line_number':111,'multiline':True]['text':'
     * The cache pool requires a reference count to avoid a race between configuration/open and
     * destroy.
     ','line_number':120,'multiline':True]['text':'
     * Cache pool configurations are optional when not creating. If values aren't being changed,
     * retrieve the current value so that validation of settings works.
     ','line_number':127,'multiline':True]['text':'
         * The only time shared cache configuration uses default values is when we are creating the
         * pool.
         ','line_number':145,'multiline':True]['text':'
     * Retrieve the reserve size here for validation of configuration.
     * Don't save it yet since the connections cache is not created if
     * we are opening. Cache configuration is responsible for saving the
     * setting.
     * The different conditions when reserved size are set are:
     *  - It's part of the users configuration - use that value.
     *  - We are reconfiguring - keep the previous value.
     *  - We are joining a cache pool for the first time (including
     *  creating the pool) - use the chunk size; that's the default.
     ','line_number':159,'multiline':True]['text':'
     * Validate that size and reserve values don't cause the cache pool to be over subscribed.
     ','line_number':177,'multiline':True]['text':' Ignore our old allocation if reconfiguring ','line_number':185,'multiline':True]['text':' The configuration is verified - it's safe to update the pool. ','line_number':194,'multiline':True]['text':' Wake up the cache pool server so any changes are noticed. ','line_number':203,'multiline':True]['text':'
 * __wt_conn_cache_pool_open --
 *     Add a connection to the cache pool.
 ','line_number':226,'multiline':True]['text':'
     * Create a session that can be used by the cache pool thread, do it in the main thread to avoid
     * shutdown races
     ','line_number':243,'multiline':True]['text':'
     * Add this connection into the cache pool connection queue. Figure out if a manager thread is
     * needed while holding the lock. Don't start the thread until we have released the lock.
     ','line_number':252,'multiline':True]['text':'
     * Each connection participating in the cache pool starts a manager thread. Only one manager is
     * active at a time, but having a thread in each connection saves having a complex election
     * process when the active connection shuts down.
     ','line_number':262,'multiline':True]['text':' Wake up the cache pool server to get our initial chunk. ','line_number':271,'multiline':True]['text':'
 * __wt_conn_cache_pool_destroy --
 *     Remove our resources from the shared cache pool. Remove the cache pool if we were the last
 *     connection.
 ','line_number':277,'multiline':True]['text':'
     * If there was an error during open, we may not have made it onto the queue. We did increment
     * the reference count, so proceed regardless.
     ','line_number':308,'multiline':True]['text':' Give the connection's resources back to the pool. ','line_number':316,'multiline':True]['text':'
         * Stop our manager thread - release the cache pool lock while joining the thread to allow
         * it to complete any balance operation.
         ','line_number':320,'multiline':True]['text':'
         * Grab the lock again now to stop other threads joining the pool while we are figuring out
         * whether we were the last participant.
         ','line_number':332,'multiline':True]['text':'
     * If there are no references, we are cleaning up after a failed wiredtiger_open, there is
     * nothing further to do.
     ','line_number':339,'multiline':True]['text':'
         * We have been holding the pool lock - no connections could have been added.
         ','line_number':356,'multiline':True]['text':' Now free the pool. ','line_number':364,'multiline':True]['text':' Notify other participants if we were managing ','line_number':376,'multiline':True]['text':'
 * __cache_pool_balance --
 *     Do a pass over the cache pool members and ensure the pool is being effectively used.
 ','line_number':387,'multiline':True]['text':' If the queue is empty there is nothing to do. ','line_number':405,'multiline':True]['text':'
     * Actively attempt to:
     * - Reduce the amount allocated, if we are over the budget.
     * - Increase the amount used if there is capacity and any pressure.
     * Don't keep trying indefinitely, if we aren't succeeding in reducing
     * the cache in use re-assessing the participants' states is necessary.
     * We are also holding a lock across this process, which can slow
     * participant shutdown if we spend a long time balancing.
     ','line_number':414,'multiline':True]['text':'
         * Stop if the amount of cache being used is stable, and we aren't over capacity.
         ','line_number':427,'multiline':True]['text':'
 * __cache_pool_assess --
 *     Assess the usage of the cache pool.
 ','line_number':439,'multiline':True]['text':' Avoid divide by zero ','line_number':454,'multiline':True]['text':' Generate read pressure information. ','line_number':465,'multiline':True]['text':'
         * Figure out a delta since the last time we did an assessment for each metric we are
         * tracking. Watch out for wrapping of values.
         *
         * Count pages read, assuming pages are 4KB.
         ','line_number':471,'multiline':True]['text':' Update the application eviction count information ','line_number':484,'multiline':True]['text':' Update the eviction wait information ','line_number':492,'multiline':True]['text':' Calculate the weighted pressure for this member. ','line_number':500,'multiline':True]['text':' Weight smaller caches higher. ','line_number':504,'multiline':True]['text':' Smooth over history. ','line_number':507,'multiline':True]['text':'
 * __cache_pool_adjust --
 *     Adjust the allocation of cache to each connection. If full is set ignore cache load
 *     information, and reduce the allocation for every connection allocated more than their
 *     reserved size.
 ','line_number':524,'multiline':True]['text':' Highest as a percentage, avoid 0 ','line_number':547,'multiline':True]['text':' The cache pool lock is locked using the NULL session. ','line_number':550,'multiline':True]['text':'
         * The read pressure is calculated as a percentage of how much read pressure there is on
         * this participant compared to the participant with the most activity. The closer we are to
         * the most active the more cache we should get assigned.
         ','line_number':568,'multiline':True]['text':' Allow to stabilize after changes. ','line_number':580,'multiline':True]['text':'
         * The bump threshold decreases as we try longer to balance the pool. Adjust how
         * aggressively we free space from participants depending on how long we have been trying.
         ','line_number':584,'multiline':True]['text':'
         * Any participant is a candidate if we have been trying for long enough.
         ','line_number':589,'multiline':True]['text':'
         * Participants that aren't doing application eviction and are showing a reasonable amount
         * of usage are excluded even if we have been trying for a while.
         ','line_number':594,'multiline':True]['text':'
         * Any participant that is proportionally less busy is a candidate from the first attempt.
         ','line_number':600,'multiline':True]['text':'
         * If the entry is currently allocated less than the reserved
         * size, increase its allocation. This should only happen if:
         *  - it's the first time we've seen this member, or
         *  - the reserved size has been adjusted
         ','line_number':606,'multiline':True]['text':'
             * Conditions for reducing the amount of resources for an
             * entry:
             *  - the pool is full,
             *  - this entry has more than the minimum amount of space in
             *    use,
             *  - it was determined that this slot is a good candidate
             ','line_number':615,'multiline':True]['text':'
             * Don't drop the size down too much - or it can trigger aggressive eviction in the
             * connection, which is likely to lead to lower throughput and potentially a negative
             * feedback loop in the balance algorithm.
             ','line_number':625,'multiline':True]['text':'
             * Conditions for increasing the amount of resources for an
             * entry:
             *  - there is space available in the pool
             *  - the connection isn't over quota
             *  - the connection is using enough cache to require eviction
             *  - there was some activity across the pool
             *  - this entry is using less than the entire cache pool
             *  - additional cache would benefit the connection OR
             *  - the pool is less than half distributed
             ','line_number':634,'multiline':True]['text':'
         * Bounds checking: don't go over the pool size or under the reserved size for this cache.
         *
         * Shrink by a chunk size if that doesn't drop us below the reserved size.
         *
         * Limit the reduction to half of the free space in the connection's cache. This should
         * reduce cache sizes gradually without stalling application threads.
         ','line_number':652,'multiline':True]['text':'
             * TODO: Add a loop waiting for connection to give up cache.
             ','line_number':676,'multiline':True]['text':'
 * __wt_cache_pool_server --
 *     Thread to manage cache pool among connections.
 ','line_number':683,'multiline':True]['text':'
         * Re-check pool run flag - since we want to avoid getting the lock on shutdown.
         ','line_number':706,'multiline':True]['text':' Try to become the managing thread ','line_number':713,'multiline':True]['text':'
         * Continue even if there was an error. Details of errors are reported in the balance
         * function.
         ','line_number':719,'multiline':True]