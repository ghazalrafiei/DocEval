['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __rts_check_callback --
 *     Check if a single session has an active transaction or open cursors. Callback from the
 *     session array walk.
 ','line_number':11,'multiline':True]['text':' Check if a user session has a running transaction. ','line_number':25,'multiline':True]['text':' Check if a user session has an active file cursor. ','line_number':30,'multiline':True]['text':'
 * __wt_rts_check --
 *     Check to the extent possible that the rollback request is reasonable.
 ','line_number':37,'multiline':True]['text':'
     * Help the user comply with the requirement there be no concurrent user operations. It is okay
     * to have a transaction in the prepared state.
     *
     * WT_TXN structures are allocated and freed as sessions are activated and closed. Lock the
     * session open/close to ensure we don't race. This call is a rarely used RTS-only function,
     * acquiring the lock shouldn't be an issue.
     ','line_number':53,'multiline':True]['text':'
     * A new cursor may be positioned or a transaction may start after we return from this call and
     * callers should be aware of this limitation.
     ','line_number':65,'multiline':True]['text':'
 * __wt_rts_progress_msg --
 *     Log a verbose message about the progress of the current rollback to stable.
 ','line_number':79,'multiline':True]['text':' Time since the rollback started. ','line_number':89,'multiline':True]['text':'
 * __wt_rts_btree_apply_all --
 *     Perform rollback to stable to all files listed in the metadata, apart from the metadata and
 *     history store files.
 ','line_number':108,'multiline':True]['text':' Log a progress message. ','line_number':129,'multiline':True]['text':'
         * Ignore rollback to stable failures on files that don't exist or files where corruption is
         * detected.
         ','line_number':140,'multiline':True]['text':'
     * Performing eviction in parallel to a checkpoint can lead to a situation where the history
     * store has more updates than its corresponding data store. Performing history store cleanup at
     * the end can enable the removal of any such unstable updates that are written to the history
     * store.
     *
     * Do not perform the final pass on the history store in an in-memory configuration as it
     * doesn't exist.
     ','line_number':155,'multiline':True]