['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_btree_stat_init --
 *     Initialize the Btree statistics.
 ','line_number':18,'multiline':True]['text':'
 * __stat_tree_walk --
 *     Gather btree statistics that require traversing the tree.
 ','line_number':60,'multiline':True]['text':'
     * Clear the statistics we're about to count.
     ','line_number':75,'multiline':True]['text':'
     * Pages read for statistics aren't "useful"; don't update the read generation of pages already
     * in memory, and if a page is read, set its generation to a low value so it is evicted quickly.
     * Same as with compact.
     ','line_number':90,'multiline':True]['text':'
 * __stat_page --
 *     Stat any Btree page.
 ','line_number':107,'multiline':True]['text':'
     * All internal pages and overflow pages are trivial, all we track is a count of the page type.
     ','line_number':114,'multiline':True]['text':'
 * __stat_page_col_fix --
 *     Stat a WT_PAGE_COL_FIX page.
 ','line_number':139,'multiline':True]['text':'
     * Iterate the page to count time windows. For now at least, don't try to reason about whether
     * any particular update chain will result in an on-page timestamp after the next
     * reconciliation; this is complicated at best and also subject to change as the system runs.
     * There's accordingly no need to look at the update list.
     ','line_number':153,'multiline':True]['text':' Unpack in case the time window becomes empty. ','line_number':162,'multiline':True]['text':' Visit the append list to count the full number of entries on the page. ','line_number':170,'multiline':True]['text':'
 * __stat_page_col_var --
 *     Stat a WT_PAGE_COL_VAR page.
 ','line_number':179,'multiline':True]['text':'
     * Walk the page counting regular items, adjusting if the item has been subsequently deleted or
     * not. This is a mess because 10-item RLE might have 3 of the items subsequently deleted.
     * Overflow items are harder, we can't know if an updated item will be an overflow item or not;
     * do our best, and simply count every overflow item (or RLE set of items) we see.
     ','line_number':199,'multiline':True]['text':'
         * Walk the insert list, checking for changes. For each insert we find, correct the original
         * count based on its state.
         ','line_number':219,'multiline':True]['text':' Walk any append list. ','line_number':244,'multiline':True]['text':'
 * __stat_page_row_int --
 *     Stat a WT_PAGE_ROW_INT page.
 ','line_number':264,'multiline':True]['text':'
     * Overflow keys are hard: we have to walk the disk image to count them, the in-memory
     * representation of the page doesn't necessarily contain a reference to the original cell.
     ','line_number':278,'multiline':True]['text':'
 * __stat_page_row_leaf --
 *     Stat a WT_PAGE_ROW_LEAF page.
 ','line_number':293,'multiline':True]['text':'
     * Walk any K/V pairs inserted into the page before the first from-disk key on the page.
     ','line_number':311,'multiline':True]['text':'
     * Walk the page's K/V pairs. Count overflow values, where an overflow item is any on-disk
     * overflow item that hasn't been updated.
     ','line_number':318,'multiline':True]['text':' Walk K/V pairs inserted after the on-page K/V pair. ','line_number':332,'multiline':True]['text':'
     * Overflow keys are hard: we have to walk the disk image to count them, the in-memory
     * representation of the page doesn't necessarily contain a reference to the original cell.
     *
     * Zero-length values are the same, we have to look at the disk image to know. They aren't
     * stored but we know they exist if there are two keys in a row, or a key as the last item.
     ','line_number':338,'multiline':True]['text':' FALLTHROUGH ','line_number':351,'multiline':True]