['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':' The following bytes are an object ID. ','line_number':11,'multiline':True]['text':'
 * __block_addr_unpack --
 *     Unpack an address cookie into components, UPDATING the caller's buffer reference so this
 *     function can be called repeatedly to unpack a buffer containing multiple address cookies.
 ','line_number':13,'multiline':True]['text':'
     * Address cookies are a file offset, size and checksum triplet, with optional object ID: unpack
     * the trailing object ID if there are bytes following the triple. The checkpoint cookie is more
     * complicated: it has four address blocks all having the same object ID. Rather than retrofit
     * the object ID into each of those address blocks (which would mean somehow figuring out the
     * length of each individual address block), the object ID is appended to the end of the
     * checkpoint cookie and this function skips the object ID unpack when the passed in cookie size
     * is 0. (This feature is ONLY used by the checkpoint code, all other callers assert the cookie
     * size is not 0. We could alternatively have a "checkpoint cookie" boolean, or use a NULL
     * object ID address when never returning a object ID, but a cookie size of 0 seems equivalent.)
     ','line_number':26,'multiline':True]['text':'
     * If there's an address cookie size and either there is no flag value or the flag value is the
     * object ID flag by itself, assert the cookie was entirely consumed. Future extensions will use
     * different cookie flag values (although the file-ID flag might still be set, our test is for
     * equality).
     ','line_number':50,'multiline':True]['text':'
     * To avoid storing large offsets, we minimize the value by subtracting a block for description
     * information, then storing a count of block allocation units. That implies there is no such
     * thing as an "invalid" offset though, they could all be valid (other than very large numbers),
     * which is what we didn't want to store in the first place. Use the size: writing a block of
     * size 0 makes no sense, so that's the out-of-band value. Once we're out of this function and
     * are working with a real file offset, size and checksum triplet, there can be invalid offsets,
     * that's simpler than testing sizes of 0 all over the place.
     ','line_number':60,'multiline':True]['text':'
 * __wt_block_addr_pack --
 *     Pack components into an address cookie, UPDATING the caller's buffer reference.
 ','line_number':83,'multiline':True]['text':' See the comment above about storing large offsets: this is the reverse operation. ','line_number':93,'multiline':True]['text':'
     * Don't store object IDs of zero, the function that cracks the cookie defaults IDs to 0.
     *
     * TODO: testing has-objects is not quite right. Ideally, we don't store a object ID if there's
     * only a single object. We want to be able to convert existing object to a stack, which means
     * starting with a single object with no object IDs, where all future objects in the stack know
     * a missing object ID is a reference to the base object.
     ','line_number':108,'multiline':True]['text':'
 * __wt_block_addr_unpack --
 *     Unpack an address cookie into components, NOT UPDATING the caller's buffer reference.
 ','line_number':124,'multiline':True]['text':' Checkpoint passes zero as the cookie size, nobody else should. ','line_number':132,'multiline':True]['text':'
 * __wt_block_addr_invalid --
 *     Return an error code if an address cookie is invalid.
 ','line_number':139,'multiline':True]['text':' Crack the cookie. ','line_number':152,'multiline':True]['text':'
     * In diagnostic mode, verify the address isn't on the available list, or for live systems, the
     * discard list. This only applies if the block is in this object.
     ','line_number':157,'multiline':True]['text':' Check if the address is past the end of the file. ','line_number':166,'multiline':True]['text':'
 * __wt_block_addr_string --
 *     Return a printable string representation of an address cookie.
 ','line_number':170,'multiline':True]['text':' Crack the cookie. ','line_number':181,'multiline':True]['text':' Printable representation. ','line_number':185,'multiline':True]['text':'
 * __block_ckpt_unpack --
 *     Convert a checkpoint cookie into its components.
 ','line_number':193,'multiline':True]['text':'
     * See the comment above about address cookies and sizes for an explanation.
     *
     * Passing an address cookie size of 0 so the unpack function doesn't read an object ID.
     ','line_number':212,'multiline':True]['text':' The first part of the checkpoint cookie is optionally followed by an object ID. ','line_number':231,'multiline':True]['text':'
     * If there is no flag value or the flag value is the object ID flag by itself, assert the
     * cookie was entirely consumed. Future extensions will use different cookie flag values
     * (although the file-ID flag might still be set, our test is for equality).
     ','line_number':243,'multiline':True]['text':'
 * __wt_block_ckpt_unpack --
 *     Convert a checkpoint cookie into its components, block manager version.
 ','line_number':254,'multiline':True]['text':'
 * __wt_block_ckpt_decode --
 *     Convert a checkpoint cookie into its components, external utility version.
 ','line_number':265,'multiline':True]['text':'
 * __wt_block_ckpt_pack --
 *     Convert the components into its checkpoint cookie.
 ','line_number':279,'multiline':True]['text':'
     * See the comment above about address cookies and sizes for an explanation.
     *
     * Passing an object ID of 0 so the pack function doesn't store an object ID.
     ','line_number':295,'multiline':True]['text':' Don't store object IDs of zero, the function that cracks the cookie defaults IDs to 0. ','line_number':315,'multiline':True]['text':'
 * __wt_ckpt_verbose --
 *     Display a printable string representation of a checkpoint.
 ','line_number':326,'multiline':True]['text':' Initialize the checkpoint, crack the cookie. ','line_number':345,'multiline':True]