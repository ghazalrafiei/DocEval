['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __check_leaf_key_range --
 *     Check the search key is in the leaf page's key range.
 ','line_number':11,'multiline':True]['text':'
     * There are reasons we can't do the fast checks, and we continue with the leaf page search in
     * those cases, only skipping the complete leaf page search if we know it's not going to work.
     ','line_number':21,'multiline':True]['text':'
     * Check if the search key is smaller than the parent's starting key for this page.
     ','line_number':27,'multiline':True]['text':' page keys > search key ','line_number':31,'multiline':True]['text':'
     * Check if the search key is greater than or equal to the starting key
     * for the parent's next page.
     *
     * !!!
     * Check that "indx + 1" is a valid page-index entry first, because it
     * also checks that "indx" is a valid page-index entry, and we have to
     * do that latter check before looking at the indx slot of the array
     * for a match to leaf (in other words, our page hint might be wrong).
     ','line_number':35,'multiline':True]['text':' page keys < search key ','line_number':49,'multiline':True]['text':'
 * __wt_col_search --
 *     Search a column-store tree for a specific record-based key.
 ','line_number':56,'multiline':True]['text':'
     * Assert the session and cursor have the right relationship (not search specific, but search is
     * a convenient place to check given any operation on a cursor will likely search a page).
     ','line_number':81,'multiline':True]['text':'
     * When appending a new record, the search record number will be an out-of-band value, search
     * for the largest key in the table instead.
     ','line_number':89,'multiline':True]['text':'
     * We may be searching only a single leaf page, not the full tree. In the normal case where we
     * are searching a tree, check the page's parent keys before doing the full search, it's faster
     * when the cursor is being re-positioned. Skip that check if we know the page is the right one
     * (for example, when re-instantiating a page in memory, in that case we know the target must be
     * on the current page).
     ','line_number':96,'multiline':True]['text':'
         * Discard the currently held page and restart the search from the root.
         ','line_number':119,'multiline':True]['text':' Search the internal pages of the tree. ','line_number':125,'multiline':True]['text':' Fast path appends. ','line_number':137,'multiline':True]['text':'
             * If on the last slot (the key is larger than any key on the page), check for an
             * internal page split race.
             ','line_number':139,'multiline':True]['text':' Binary search of internal pages. ','line_number':149,'multiline':True]['text':'
         * Reference the slot used for next step down the tree.
         *
         * Base is the smallest index greater than recno and may be the (last + 1) index. The slot
         * for descent is the one before base.
         ','line_number':162,'multiline':True]['text':'
             * We don't have to correct for base == 0 because the only way for base to be 0 is if
             * recno is the page's starting recno.
             ','line_number':169,'multiline':True]['text':' Encourage races. ','line_number':177,'multiline':True]['text':'
         * Swap the current page for the child page. If the page splits while we're retrieving it,
         * restart the search at the root. We cannot restart in the "current" page; for example, if
         * a thread is appending to the tree, the page it's waiting for did an insert-split into the
         * parent, then the parent split into its parent, the name space we are searching for may
         * have moved above the current page in the tree.
         *
         * On other error, simply return, the swap call ensures we're holding nothing on failure.
         ','line_number':180,'multiline':True]['text':' Track how deep the tree gets. ','line_number':201,'multiline':True]['text':'
     * Don't bother searching if the caller is appending a new record where we'll allocate the
     * record number; we're not going to find a match by definition, and we figure out the record
     * number and position when we do the work.
     ','line_number':209,'multiline':True]['text':'
     * Search the leaf page.
     *
     * Search after a page is pinned does a search of the pinned page before doing a full tree
     * search, in which case we might be searching for a record logically before the page. Return
     * failure, and there's nothing else to do, the record isn't going to be on this page.
     *
     * We don't check inside the search path for a record greater than the maximum record in the
     * tree; in that case, we get here with a record that's impossibly large for the page. We do
     * have additional setup to do in that case, the record may be appended to the page.
     ','line_number':219,'multiline':True]['text':'
     * We have a match on the page, check for an update. Check the page's update list
     * (fixed-length), or slot's update list (variable-length) for a better match. The only better
     * match we can find is an exact match, otherwise the existing match on the page is the one we
     * want. For that reason, don't set the cursor's WT_INSERT_HEAD/WT_INSERT pair until we know we
     * have a useful entry.
     ','line_number':267,'multiline':True]['text':' We don't always set these below, add a catch-all. ','line_number':282,'multiline':True]['text':'
     * A record past the end of the page's standard information. Check the append list; by
     * definition, any record on the append list is closer than the last record on the page, so it's
     * a better choice for return. This is a rarely used path: we normally find exact matches,
     * because column-store files are dense, but in this case the caller searched past the end of
     * the table.
     ','line_number':286,'multiline':True]['text':'
         * There is nothing on the append list, so search the insert list. (The append list would
         * have been closer to the search record).
         ','line_number':296,'multiline':True]['text':'
                 * Set this, otherwise the code in cursor_valid will assume there's no on-disk value
                 * underneath ins_head.
                 ','line_number':306,'multiline':True]