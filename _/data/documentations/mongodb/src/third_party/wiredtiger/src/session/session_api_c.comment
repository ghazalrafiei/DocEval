['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_session_notsup --
 *     Unsupported session method.
 ','line_number':13,'multiline':True]['text':'
 * __wt_session_reset_cursors --
 *     Reset all open cursors.
 ','line_number':23,'multiline':True]['text':' Stop when there are no positioned cursors. ','line_number':34,'multiline':True]['text':' Optionally, free the cursor buffers ','line_number':39,'multiline':True]['text':'
 * __wt_session_cursor_cache_sweep --
 *     Sweep the cursor cache.
 ','line_number':50,'multiline':True]['text':'
     * Periodically sweep for dead cursors; if we've swept recently, don't do it again.
     *
     * Each call of this sweep function visits all the cursors in some number of buckets used by the
     * cursor cache. If any of the visited cursors reference dead or dying data handles those
     * cursors are fully closed and removed from the cache. Removing a cursor from the cursor cache
     * has the important effect of freeing a reference to the associated data handle. Data handles
     * can be closed and marked dead, but cannot be freed until all referencing sessions give up
     * their references. So sweeping the cursor cache (for all sessions!) is a prerequisite for the
     * connection data handle sweep to find handles that can be freed.
     *
     * We determine the number of buckets to visit based on how this function is called. When
     * big_sweep is true and enough time has passed, walk through at least a quarter of the buckets,
     * and as long as there is progress finding enough cursors to close, continue on, up to the
     * entire set of buckets.
     *
     * When big_sweep is false, we start with a small set of buckets to look at and quit when we
     * stop making progress or when we reach the maximum configured. This way, we amortize the work
     * of the sweep over many calls in a performance path.
     ','line_number':72,'multiline':True]['text':' Turn off caching so that cursor close doesn't try to cache. ','line_number':109,'multiline':True]['text':'
             * First check to see if the cursor could be reopened and should be swept.
             ','line_number':117,'multiline':True]['text':'
         * We continue sweeping as long as we have some good average productivity, or we are under
         * the minimum.
         ','line_number':130,'multiline':True]['text':'
 * __wt_session_copy_values --
 *     Copy values into all positioned cursors, so that they don't keep transaction IDs pinned.
 ','line_number':150,'multiline':True]['text':'
             * We have to do this with a transaction ID pinned unless the cursor is reading from a
             * checkpoint.
             ','line_number':162,'multiline':True]['text':'
 * __wt_session_release_resources --
 *     Release common session resources.
 ','line_number':178,'multiline':True]['text':'
     * Called when sessions are reset and closed, and when heavy-weight session methods or functions
     * complete (for example, checkpoint and compact). If the session has no open cursors discard it
     * all; if there are cursors, discard what we can safely clean out.
     ','line_number':188,'multiline':True]['text':' Transaction cleanup ','line_number':195,'multiline':True]['text':' Block manager cleanup ','line_number':199,'multiline':True]['text':' Reconciliation cleanup ','line_number':203,'multiline':True]['text':' Stashed memory. ','line_number':207,'multiline':True]['text':' Scratch buffers and error memory. ','line_number':210,'multiline':True]['text':'
 * __session_clear --
 *     Clear a session structure.
 ','line_number':219,'multiline':True]['text':'
     * There's no serialization support around the review of the hazard array, which means threads
     * checking for hazard pointers first check the active field (which may be 0) and then use the
     * hazard pointer (which cannot be NULL).
     *
     * Additionally, the session structure can include information that persists past the session's
     * end-of-life, stored as part of page splits.
     *
     * For these reasons, be careful when clearing the session structure.
     ','line_number':226,'multiline':True]['text':'
 * __session_close_cursors --
 *     Close all cursors in a list.
 ','line_number':242,'multiline':True]['text':' Close all open cursors. ','line_number':252,'multiline':True]['text':'
             * Put the cached cursor in an open state that allows it to be closed.
             ','line_number':256,'multiline':True]['text':'
             * Notify the user that we are closing the cursor handle via the registered close
             * callback.
             ','line_number':262,'multiline':True]['text':'
 * __session_close_cached_cursors --
 *     Fully close all cached cursors.
 ','line_number':276,'multiline':True]['text':'
 * __session_close --
 *     WT_SESSION->close method.
 ','line_number':291,'multiline':True]['text':'
 * __wt_session_close_internal --
 *     Internal function of WT_SESSION->close method.
 ','line_number':313,'multiline':True]['text':'
         * The call log entry for the session_close API is generated by two functions. The reason is
         * that the first function (called below) requires session's variables and the second
         * function (called at the end) requires the ret value.
         ','line_number':331,'multiline':True]['text':' Close all open cursors while the cursor cache is disabled. ','line_number':339,'multiline':True]['text':' Rollback any active transaction. ','line_number':342,'multiline':True]['text':'
     * Also release any pinned transaction ID from a non-transactional operation.
     ','line_number':346,'multiline':True]['text':'
     * Close all open cursors. We don't need to explicitly close the session's pointer to the
     * history store cursor since it will also be included in session's cursor table.
     ','line_number':352,'multiline':True]['text':' Discard cached handles. ','line_number':361,'multiline':True]['text':' Confirm we're not holding any hazard pointers. ','line_number':364,'multiline':True]['text':' Discard metadata tracking. ','line_number':367,'multiline':True]['text':'
     * Close the file where we tracked long operations. Do this before releasing resources, as we do
     * scratch buffer management when we flush optrack buffers to disk.
     ','line_number':370,'multiline':True]['text':' Free the operation tracking buffer ','line_number':380,'multiline':True]['text':' Release common session resources. ','line_number':384,'multiline':True]['text':' The API lock protects opening and closing of sessions. ','line_number':387,'multiline':True]['text':'
     * Free transaction information: inside the lock because we're freeing the WT_TXN structure and
     * RTS looks at it.
     ','line_number':390,'multiline':True]['text':' Decrement the count of open sessions. ','line_number':396,'multiline':True]['text':'
     * Sessions are re-used, clear the structure: the clear sets the active field to 0, which will
     * exclude the hazard array from review by the eviction thread. Because some session fields are
     * accessed by other threads, the structure must be cleared carefully.
     *
     * We don't need to publish here, because regardless of the active field being non-zero, the
     * hazard pointer is always valid.
     ','line_number':403,'multiline':True]['text':'
     * Decrement the count of active sessions if that's possible: a session being closed may or may
     * not be at the end of the array, step toward the beginning of the array until we reach an
     * active session.
     ','line_number':414,'multiline':True]['text':'
 * __session_reconfigure --
 *     WT_SESSION->reconfigure method.
 ','line_number':433,'multiline':True]['text':'
     * Note that this method only checks keys that are passed in by the application: we don't want
     * to reset other session settings to their default values.
     ','line_number':452,'multiline':True]['text':'
     * FIXME-WT-12021 Replace this debug option with the corresponding failpoint once this project
     * is completed.
     ','line_number':477,'multiline':True]['text':'
     * There is a session debug configuration which can be set to evict pages as they are released
     * and no longer needed.
     ','line_number':489,'multiline':True]['text':'
     * Override any connection-level pre-fetch settings if a specific session-level setting was
     * provided.
     ','line_number':512,'multiline':True]['text':'
 * __session_reconfigure_notsup --
 *     WT_SESSION->reconfigure method; not supported version.
 ','line_number':534,'multiline':True]['text':'
 * __session_open_cursor_int --
 *     Internal version of WT_SESSION::open_cursor, with second cursor arg.
 ','line_number':553,'multiline':True]['text':'
     * Open specific cursor types we know about, or call the generic data source open function.
     *
     * Unwind a set of string comparisons into a switch statement hoping the compiler can make it
     * fast, but list the common choices first instead of sorting so if/else patterns are still
     * fast.
     ','line_number':568,'multiline':True]['text':'
     * Common cursor types.
     ','line_number':576,'multiline':True]['text':'
             * Column groups are a special case: open a cursor on the underlying data source.
             ','line_number':587,'multiline':True]['text':'
     * Less common cursor types.
     ','line_number':610,'multiline':True]['text':'
             * Open a version cursor instead of a table cursor if we are using the special debug
             * configuration.
             ','line_number':615,'multiline':True]['text':'
         * We support caching simple cursors that have no children. If this cursor is a child, we're
         * not going to cache this child or its parent.
         ','line_number':653,'multiline':True]['text':'
     * When opening simple tables, the table code calls this function on the underlying data source,
     * in which case the application's URI has been copied.
     ','line_number':661,'multiline':True]['text':'
 * __wt_open_cursor --
 *     Internal version of WT_SESSION::open_cursor.
 ','line_number':676,'multiline':True]['text':'
     * We should not open other cursors when there are open history store cursors in the session.
     * There are two exceptions to this rule:
     *  - Verifying the metadata through an internal session.
     *  - The btree is being verified.
     ','line_number':689,'multiline':True]['text':' We do not cache any subordinate tables/files cursors. ','line_number':700,'multiline':True]['text':'
 * __session_open_cursor --
 *     WT_SESSION->open_cursor method.
 ','line_number':711,'multiline':True]['text':'
     * Check for early usage of a user session to collect statistics. If the connection is not fully
     * ready but can be used, then only allow a cursor uri of "statistics:" only. The conditional is
     * complicated. Allow the cursor to open if any of these conditions are met:
     * - The connection is ready
     * - The session is an internal session
     * - The connection is minimally ready and the URI is "statistics:"
     ','line_number':731,'multiline':True]['text':'
         * Detect if we're duplicating a backup cursor specifically. That needs special handling.
         ','line_number':754,'multiline':True]['text':'
     * Opening a cursor on a non-existent data source will set ret to either of ENOENT or
     * WT_NOTFOUND at this point. However, applications may reasonably do this inside a transaction
     * to check for the existence of a table or index.
     *
     * Failure in opening a cursor should not set an error on the transaction and WT_NOTFOUND will
     * be mapped to ENOENT.
     ','line_number':789,'multiline':True]['text':'
 * __session_alter_internal --
 *     Internal implementation of the WT_SESSION.alter method.
 ','line_number':801,'multiline':True]['text':' In-memory ignores alter operations. ','line_number':812,'multiline':True]['text':' Disallow objects in the WiredTiger name space. ','line_number':816,'multiline':True]['text':'
     * We replace the default configuration listing with the current configuration. Otherwise the
     * defaults for values that can be altered would override settings used by the user in create.
     ','line_number':819,'multiline':True]['text':'
 * __session_blocking_checkpoint --
 *     Perform a checkpoint or wait if it is already running to resolve an EBUSY error.
 ','line_number':836,'multiline':True]['text':'
     * If there's a checkpoint running, wait for it to complete. If there's no checkpoint running or
     * the checkpoint generation number changes, the checkpoint blocking us has completed.
     ','line_number':852,'multiline':True]['text':'
         * This loop only checks objects that are declared volatile, therefore no barriers are
         * needed.
         ','line_number':859,'multiline':True]['text':'
 * __session_alter --
 *     Alter a table setting.
 ','line_number':870,'multiline':True]['text':'
     * Alter table can return EBUSY error when the table is modified in parallel by eviction. Retry
     * the command after performing a system wide checkpoint. Only retry once to avoid potentially
     * waiting forever.
     ','line_number':882,'multiline':True]['text':'
 * __session_alter_readonly --
 *     WT_SESSION->alter method; readonly version.
 ','line_number':897,'multiline':True]['text':'
 * __wt_session_create --
 *     Internal version of WT_SESSION::create.
 ','line_number':919,'multiline':True]['text':'
 * __session_create --
 *     WT_SESSION->create method.
 ','line_number':933,'multiline':True]['text':' Disallow objects in the WiredTiger name space. ','line_number':951,'multiline':True]['text':'
     * Type configuration only applies to tables, column groups and indexes. We don't want
     * applications to attempt to layer LSM on top of their extended data-sources, and the fact we
     * allow LSM as a valid URI is an invitation to that mistake: nip it in the bud.
     ','line_number':954,'multiline':True]['text':'
         * We can't disallow type entirely, a configuration string might innocently include it, for
         * example, a dump/load pair. If the underlying type is "file", it's OK ("file" is the
         * underlying type for every type); if the URI type prefix and the type are the same, let it
         * go.
         ','line_number':961,'multiline':True]['text':'
 * __session_create_readonly --
 *     WT_SESSION->create method; readonly version.
 ','line_number':991,'multiline':True]['text':'
 * __session_log_flush --
 *     WT_SESSION->log_flush method.
 ','line_number':1013,'multiline':True]['text':'
     * If logging is not enabled there is nothing to do.
     ','line_number':1032,'multiline':True]['text':'
 * __session_log_flush_readonly --
 *     WT_SESSION->log_flush method; readonly version.
 ','line_number':1049,'multiline':True]['text':'
 * __session_log_printf --
 *     WT_SESSION->log_printf method.
 ','line_number':1069,'multiline':True]['text':'
 * __session_log_printf_readonly --
 *     WT_SESSION->log_printf method; readonly version.
 ','line_number':1092,'multiline':True]['text':'
 * __session_rename --
 *     WT_SESSION->rename method.
 ','line_number':1113,'multiline':True]['text':' Disallow objects in the WiredTiger name space. ','line_number':1126,'multiline':True]['text':'
 * __session_rename_readonly --
 *     WT_SESSION->rename method; readonly version.
 ','line_number':1141,'multiline':True]['text':'
 * __session_reset --
 *     WT_SESSION->reset method.
 ','line_number':1165,'multiline':True]['text':'
     * Run the session sweeps. Run the cursor cache sweep with "big" option to sweep more, as we're
     * not in a performance path.
     ','line_number':1182,'multiline':True]['text':' Release common session resources. ','line_number':1190,'multiline':True]['text':' Reset the session statistics. ','line_number':1193,'multiline':True]['text':'
 * __session_reset_notsup --
 *     WT_SESSION->reset method; not supported version.
 ','line_number':1201,'multiline':True]['text':'
 * __session_drop --
 *     WT_SESSION->drop method.
 ','line_number':1218,'multiline':True]['text':' Disallow objects in the WiredTiger name space. ','line_number':1233,'multiline':True]['text':'
     * Take the checkpoint lock if there is a need to prevent the drop operation from failing with
     * EBUSY due to an ongoing checkpoint.
     ','line_number':1241,'multiline':True]['text':' Note: drop operations cannot be unrolled (yet?). ','line_number':1271,'multiline':True]['text':'
 * __session_drop_readonly --
 *     WT_SESSION->drop method; readonly version.
 ','line_number':1275,'multiline':True]['text':'
 * __session_join --
 *     WT_SESSION->join method.
 ','line_number':1297,'multiline':True]['text':' "ge" is the default ','line_number':1355,'multiline':True]['text':'
     * There's an implied ownership ordering that isn't known when the cursors are created: the join
     * cursor must be closed before any of the indices. Enforce that here by reordering.
     ','line_number':1407,'multiline':True]['text':' Disable the reference cursor for regular operations ','line_number':1415,'multiline':True]['text':'
 * __session_join_notsup --
 *     WT_SESSION->join method; not supported version.
 ','line_number':1422,'multiline':True]['text':'
 * __session_salvage_worker --
 *     Wrapper function for salvage processing.
 ','line_number':1444,'multiline':True]['text':'
 * __session_salvage --
 *     WT_SESSION->salvage method.
 ','line_number':1461,'multiline':True]['text':'
     * Run salvage and then rollback-to-stable (to bring the object into compliance with database
     * timestamps).
     *
     * Block out checkpoints to avoid spurious EBUSY errors.
     *
     * Hold the schema lock across both salvage and rollback-to-stable to avoid races where another
     * thread opens the handle before rollback-to-stable completes.
     ','line_number':1477,'multiline':True]['text':'
 * __session_salvage_readonly --
 *     WT_SESSION->salvage method; readonly version.
 ','line_number':1497,'multiline':True]['text':'
 * __wt_session_range_truncate --
 *     Session handling of a range truncate.
 ','line_number':1519,'multiline':True]['text':' Setup the truncate information structure ','line_number':1540,'multiline':True]['text':'
         * A URI file truncate becomes a range truncate where we set a start cursor at the
         * beginning. We already know the NULL stop goes to the end of the range.
         ','line_number':1549,'multiline':True]['text':'
             * If there are no elements, there is nothing to do.
             ','line_number':1557,'multiline':True]['text':'
     * Cursor truncate is only supported for some objects, check for a supporting compare method.
     ','line_number':1565,'multiline':True]['text':'
     * If both cursors are set, check they're correctly ordered with respect to each other. We have
     * to test this before any search, the search can change the initial cursor position.
     *
     * Rather happily, the compare routine will also confirm the cursors reference the same object
     * and the keys are set.
     *
     * The test for a NULL start comparison function isn't necessary (we checked it above), but it
     * quiets clang static analysis complaints.
     ','line_number':1573,'multiline':True]['text':'
     * Use temporary buffers to store the original start and stop keys. We track the original keys
     * for writing the truncate operation in the write-ahead log.
     ','line_number':1590,'multiline':True]['text':'
     * Now that the truncate is setup and ready regardless of how the API was called, populate our
     * truncate information cookie.
     ','line_number':1606,'multiline':True]['text':'
     * Truncate does not require keys actually exist so that applications can discard parts of the
     * object's name space without knowing exactly what records currently appear in the object. For
     * this reason, do a search-near, rather than a search. Additionally, we have to correct after
     * calling search-near, to position the start/stop cursors on the next record greater than/less
     * than the original key. If we fail to find a key in a search-near, there are no keys in the
     * table. If we fail to move forward or backward in a range, there are no keys in the range. In
     * either of those cases, we're done.
     *
     * No need to search the record again if it is already pointing to the btree.
     ','line_number':1624,'multiline':True]['text':'
     * We always truncate in the forward direction because the underlying data structures can move
     * through pages faster forward than backward. If we don't have a start cursor, create one and
     * position it at the first record.
     *
     * If start is NULL, stop must not be NULL, but static analyzers have a hard time with that,
     * test explicitly.
     ','line_number':1650,'multiline':True]['text':' Record new start cursor. ','line_number':1662,'multiline':True]['text':'
     * If the start/stop keys cross, we're done, the range must be empty.
     ','line_number':1666,'multiline':True]['text':'
     * In the cases where truncate doesn't have work to do, we still need to generate a log record
     * for the operation. That way we can be consistent with other competing inserts or truncates on
     * other tables in this transaction.
     ','line_number':1680,'multiline':True]['text':'
         * If we have cursors and know there is no work to do, there may not be a dhandle in the
         * session. Grab it from the start or stop cursor as needed.
         ','line_number':1686,'multiline':True]['text':' We have to have a dhandle from somewhere. ','line_number':1698,'multiline':True]['text':'
     * Close any locally-opened start cursor.
     *
     * Reset application cursors, they've possibly moved and the application cannot use them. Note
     * that we can make it here with a NULL start cursor (e.g., if the truncate range is empty).
     ','line_number':1710,'multiline':True]['text':' Clear the temporary buffer that was storing the original start key. ','line_number':1719,'multiline':True]['text':' Clear the temporary buffer that was storing the original stop key. ','line_number':1724,'multiline':True]['text':'
 * __session_truncate --
 *     WT_SESSION->truncate method.
 ','line_number':1731,'multiline':True]['text':'
     * If the URI is specified, we don't need a start/stop, if start/stop is specified, we don't
     * need a URI. One exception is the log URI which may remove log files for a backup cursor.
     *
     * If no URI is specified, and both cursors are specified, start/stop must reference the same
     * object.
     *
     * Any specified cursor must have been initialized.
     ','line_number':1746,'multiline':True]['text':' Disallow objects in the WiredTiger name space. ','line_number':1761,'multiline':True]['text':'
             * Verify the user only gave the URI prefix and not a specific target name after that.
             ','line_number':1765,'multiline':True]['text':' Wait for checkpoints to avoid EBUSY errors. ','line_number':1775,'multiline':True]['text':' Map prepare-conflict to rollback. ','line_number':1782,'multiline':True]['text':' Map WT_NOTFOUND to ENOENT if a URI was specified. ','line_number':1793,'multiline':True]['text':'
 * __session_truncate_readonly --
 *     WT_SESSION->truncate method; readonly version.
 ','line_number':1799,'multiline':True]['text':'
 * __session_upgrade --
 *     WT_SESSION->upgrade method.
 ','line_number':1824,'multiline':True]['text':' Block out checkpoints to avoid spurious EBUSY errors. ','line_number':1840,'multiline':True]['text':'
 * __session_upgrade_readonly --
 *     WT_SESSION->upgrade method; readonly version.
 ','line_number':1850,'multiline':True]['text':'
 * __session_verify --
 *     WT_SESSION->verify method.
 ','line_number':1871,'multiline':True]['text':' Block out checkpoints to avoid spurious EBUSY errors. ','line_number':1885,'multiline':True]['text':'
 * __session_verify_notsup --
 *     WT_SESSION->verify method; not supported version.
 ','line_number':1899,'multiline':True]['text':'
 * __session_begin_transaction --
 *     WT_SESSION->begin_transaction method.
 ','line_number':1919,'multiline':True]['text':'
 * __session_begin_transaction_notsup --
 *     WT_SESSION->begin_transaction method; not supported version.
 ','line_number':1945,'multiline':True]['text':'
 * __session_commit_transaction --
 *     WT_SESSION->commit_transaction method.
 ','line_number':1964,'multiline':True]['text':' Permit the commit if the transaction failed, but was read-only. ','line_number':1987,'multiline':True]['text':'
     * We might have failed because an illegal configuration was specified or because there wasn't a
     * transaction running, and we check the former as part of the api macros before we check the
     * latter. Deal with it here: if there's an error and a transaction is running, roll it back.
     ','line_number':1994,'multiline':True]['text':'
 * __session_commit_transaction_notsup --
 *     WT_SESSION->commit_transaction method; not supported version.
 ','line_number':2018,'multiline':True]['text':'
 * __session_prepare_transaction --
 *     WT_SESSION->prepare_transaction method.
 ','line_number':2037,'multiline':True]['text':'
 * __session_prepare_transaction_readonly --
 *     WT_SESSION->prepare_transaction method; readonly version.
 ','line_number':2065,'multiline':True]['text':'
 * __session_rollback_transaction --
 *     WT_SESSION->rollback_transaction method.
 ','line_number':2085,'multiline':True]['text':'
 * __session_rollback_transaction_notsup --
 *     WT_SESSION->rollback_transaction method; not supported version.
 ','line_number':2121,'multiline':True]['text':'
 * __session_timestamp_transaction --
 *     WT_SESSION->timestamp_transaction method. Also see __session_timestamp_transaction_uint if
 *     config parsing is a performance issue.
 ','line_number':2140,'multiline':True]['text':'
 * __session_timestamp_transaction_notsup --
 *     WT_SESSION->timestamp_transaction method; not supported version.
 ','line_number':2167,'multiline':True]['text':'
 * __session_timestamp_transaction_uint --
 *     WT_SESSION->timestamp_transaction_uint method.
 ','line_number':2186,'multiline':True]['text':'
 * __session_timestamp_transaction_uint_notsup --
 *     WT_SESSION->timestamp_transaction_uint_ method; not supported version.
 ','line_number':2207,'multiline':True]['text':'
 * __session_query_timestamp --
 *     WT_SESSION->query_timestamp method.
 ','line_number':2228,'multiline':True]['text':'
 * __session_query_timestamp_notsup --
 *     WT_SESSION->query_timestamp method; not supported version.
 ','line_number':2249,'multiline':True]['text':'
 * __session_reset_snapshot --
 *     WT_SESSION->reset_snapshot method.
 ','line_number':2269,'multiline':True]['text':' Return error if the isolation mode is not snapshot. ','line_number':2282,'multiline':True]['text':' Return error if the session has performed any write operations. ','line_number':2287,'multiline':True]['text':'
 * __session_reset_snapshot_notsup --
 *     WT_SESSION->reset_snapshot method; not supported version.
 ','line_number':2297,'multiline':True]['text':'
 * __session_transaction_pinned_range --
 *     WT_SESSION->transaction_pinned_range method.
 ','line_number':2314,'multiline':True]['text':' Assign pinned to the lesser of id or snap_min ','line_number':2331,'multiline':True]['text':'
 * __session_transaction_pinned_range_notsup --
 *     WT_SESSION->transaction_pinned_range method; not supported version.
 ','line_number':2346,'multiline':True]['text':'
 * __session_get_rollback_reason --
 *     WT_SESSION->get_rollback_reason method.
 ','line_number':2365,'multiline':True]['text':'
 * __session_checkpoint --
 *     WT_SESSION->checkpoint method.
 ','line_number':2379,'multiline':True]['text':'
     * Checkpoints require a snapshot to write a transactionally consistent snapshot of the data.
     *
     * We can't use an application's transaction: if it has uncommitted changes, they will be
     * written in the checkpoint and may appear after a crash.
     *
     * Use a real snapshot transaction: we don't want any chance of the snapshot being updated
     * during the checkpoint. Eviction is prevented from evicting anything newer than this because
     * we track the oldest transaction ID in the system that is not visible to all readers.
     ','line_number':2396,'multiline':True]['text':'
     * Release common session resources (for example, checkpoint may acquire significant
     * reconciliation structures/memory).
     ','line_number':2410,'multiline':True]['text':'
 * __session_checkpoint_readonly --
 *     WT_SESSION->checkpoint method; readonly version.
 ','line_number':2421,'multiline':True]['text':'
 * __wt_session_strerror --
 *     WT_SESSION->strerror method.
 ','line_number':2441,'multiline':True]['text':'
 * __wt_session_breakpoint --
 *     A place to put a breakpoint, if you need one, or call some check code.
 ','line_number':2455,'multiline':True]['text':'
 * __open_session --
 *     Allocate a session handle.
 ','line_number':2467,'multiline':True]['text':'
     * Make sure we don't try to open a new session after the application closes the connection.
     * This is particularly intended to catch cases where server threads open sessions.
     ','line_number':2520,'multiline':True]['text':' Find the first inactive session slot. ','line_number':2526,'multiline':True]['text':'
     * If the active session count is increasing, update it. We don't worry about correcting the
     * session count on error, as long as we don't mark this session as active, we'll clean it up on
     * close.
     ','line_number':2536,'multiline':True]['text':' Defend against off-by-one errors. ','line_number':2541,'multiline':True]['text':' Find the set of methods appropriate to this session. ','line_number':2544,'multiline':True]['text':'
     * Initialize the pseudo random number generator. We're not seeding it, so all of the sessions
     * initialize to the same value and proceed in lock step for the session's life. That's not a
     * problem because sessions are long-lived and will diverge into different parts of the value
     * space, and what we care about are small values, that is, the low-order bits.
     ','line_number':2563,'multiline':True]['text':'
     * If we don't have them, allocate the cursor and dhandle hash arrays. Allocate the table hash
     * array as well.
     ','line_number':2578,'multiline':True]['text':' Initialize the dhandle hash array. ','line_number':2587,'multiline':True]['text':' Initialize the cursor cache hash buckets and sweep trigger. ','line_number':2591,'multiline':True]['text':' Initialize transaction support: default to snapshot. ','line_number':2596,'multiline':True]['text':'
     * The session's hazard pointer memory isn't discarded during normal session close because
     * access to it isn't serialized. Allocate the first time we open this session.
     ','line_number':2600,'multiline':True]['text':'
     * Cache the offset of this session's statistics bucket. It's important we pass the correct
     * session to the hash define here or we'll calculate the stat bucket with the wrong session id.
     ','line_number':2612,'multiline':True]['text':' Safety check to make sure we're doing the right thing. ','line_number':2618,'multiline':True]['text':' Allocate the buffer for operation tracking ','line_number':2621,'multiline':True]['text':' Set the default value for session flags. ','line_number':2629,'multiline':True]['text':'
     * Configuration: currently, the configuration for open_session is the same as
     * session.reconfigure, so use that function.
     ','line_number':2633,'multiline':True]['text':'
     * Publish: make the entry visible to server threads. There must be a barrier for two reasons,
     * to ensure structure fields are set before any other thread will consider the session, and to
     * push the session count to ensure the eviction thread can't review too few slots.
     ','line_number':2640,'multiline':True]['text':'
 * __wt_open_session --
 *     Allocate a session handle.
 ','line_number':2659,'multiline':True]['text':' Acquire a session. ','line_number':2672,'multiline':True]['text':'
     * Acquiring the metadata handle requires the schema lock; we've seen problems in the past where
     * a session has acquired the schema lock unexpectedly, relatively late in the run, and
     * deadlocked. Be defensive, get it now. The metadata file may not exist when the connection
     * first creates its default session or the shared cache pool creates its sessions, let our
     * caller decline this work.
     ','line_number':2675,'multiline':True]['text':'
 * __wt_open_internal_session --
 *     Allocate a session for WiredTiger's use.
 ','line_number':2694,'multiline':True]['text':' Acquire a session. ','line_number':2706,'multiline':True]['text':'
     * Public sessions are automatically closed during WT_CONNECTION->close. If the session handles
     * for internal threads were to go on the public list, there would be complex ordering issues
     * during close. Set a flag to avoid this: internal sessions are not closed automatically.
     ','line_number':2710,'multiline':True]