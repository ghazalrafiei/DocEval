['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __rec_update_save --
 *     Save a WT_UPDATE list for later restoration.
 ','line_number':11,'multiline':True]['text':' For columns, ins is never null, so rip == NULL implies ins != NULL. ','line_number':27,'multiline':True]['text':'
 * __rec_delete_hs_upd_save --
 *     Save an update into a WT_DELETE_HS_UPD list to delete it from the history store later.
 ','line_number':42,'multiline':True]['text':'
 * __rec_append_orig_value --
 *     Append the key's original value to its update list. It assumes that we have an onpage value,
 *     the onpage value is not a prepared update, and we don't overwrite transaction id to
 *     WT_TXN_NONE and timestamps to WT_TS_NONE in time window for in-memory databases.
 ','line_number':63,'multiline':True]['text':' Review the current update list, checking conditions that mean no work is needed. ','line_number':87,'multiline':True]['text':' Done if the update was restored from the data store or the history store. ','line_number':96,'multiline':True]['text':'
         * Done if the on page value already appears on the update list. We can't do the same check
         * for stop time point because we may still need to append the onpage value if only the
         * tombstone is on the update chain. We only need to check it in the in memory case as in
         * other cases, the update must have been restored from the data store and we may overwrite
         * its transaction id to WT_TXN_NONE and its timestamps to WT_TS_NONE when we write the
         * update to the time window.
         ','line_number':100,'multiline':True]['text':'
         * Done if at least one self-contained update is globally visible. It's tempting to pull
         * this test out of the loop and only test the oldest self-contained update for global
         * visibility (as visibility tests are expensive). However, when running at lower isolation
         * levels, or when an application intentionally commits in out of timestamp order, it's
         * possible for an update on the chain to be globally visible and followed by an (earlier)
         * update that is not yet globally visible.
         ','line_number':112,'multiline':True]['text':' Leave reference pointing to the last item in the update list. ','line_number':125,'multiline':True]['text':'
     * We end up in this function because we have selected a newer value to write to disk. If we
     * select the newest committed update, we should see a valid update here. We can only write
     * uncommitted prepared updates in eviction and if the update chain only has uncommitted
     * prepared updates, we cannot abort them concurrently when we are still evicting the page
     * because we have to do a search for the prepared updates, which can not proceed until eviction
     * finishes.
     ','line_number':130,'multiline':True]['text':'
     * Additionally, we need to append a tombstone before the onpage value we're about to append to
     * the list, if the onpage value has a valid stop time point. Imagine a case where we insert and
     * delete a value respectively at timestamp 0 and 10, and later insert it again at 20. We need
     * the tombstone to tell us there is no value between 10 and 20.
     ','line_number':140,'multiline':True]['text':' No need to append the tombstone if it is already in the update chain. ','line_number':149,'multiline':True]['text':'
             * We still need to append the globally visible tombstone if its timestamp is WT_TS_NONE
             * as we may need it to clear the history store content of the key. We don't append a
             * timestamped globally visible tombstone because even if its timestamp is smaller than
             * the entries in the history store, we can't change the history store entries. This is
             * not correct but we hope we can get away with it.
             ','line_number':151,'multiline':True]['text':'
             * We may have overwritten its transaction id to WT_TXN_NONE and its timestamps to
             * WT_TS_NONE in the time window.
             ','line_number':168,'multiline':True]['text':' We need the original on-page value for some reader: get a copy. ','line_number':181,'multiline':True]['text':'
         * We should never see an overflow removed value because we haven't freed the overflow
         * blocks.
         ','line_number':185,'multiline':True]['text':' Append the new entry into the update list. ','line_number':204,'multiline':True]['text':'
 * __rec_find_and_save_delete_hs_upd --
 *     Find and save the update that needs to be deleted from the history store later
 ','line_number':218,'multiline':True]['text':'
 * __rec_need_save_upd --
 *     Return if we need to save the update chain
 ','line_number':256,'multiline':True]['text':' No need to save the update chain if we want to delete the key from the disk image. ','line_number':273,'multiline':True]['text':'
     * Don't save updates for any reconciliation that doesn't involve history store (in-memory
     * database, metadata, and history store reconciliation itself), except when the selected stop
     * time point or the selected start time point is not globally visible for in memory database.
     ','line_number':277,'multiline':True]['text':' When in checkpoint, no need to save update if no onpage value is selected. ','line_number':285,'multiline':True]['text':'
     * Update chains are only need to be saved when there are:
     * 1. Newer uncommitted updates or database is configured for in-memory storage.
     * 2. On-disk entry exists.
     * 3. Valid updates exist in the update chain to be written to the history store.
     ','line_number':297,'multiline':True]['text':'
 * __timestamp_no_ts_fix --
 *     If we found a tombstone with a time point earlier than the update it applies to, which can
 *     happen if the application performs operations without timestamps, make it invisible by making
 *     the start time point match the stop time point of the tombstone. We don't guarantee that
 *     older readers will be able to continue reading content that has been made invisible by
 *     updates without timestamps. Note that we carefully don't take this path when the stop time
 *     point is equal to the start time point. While unusual, it is permitted for a single
 *     transaction to insert and then remove a record. We don't want to generate a warning in that
 *     case.
 ','line_number':319,'multiline':True]['text':'
     * When supporting read-uncommitted it was possible for the stop_txn to be less than the
     * start_txn, this is no longer true so assert that we don't encounter it.
     ','line_number':335,'multiline':True]['text':'
 * __rec_validate_upd_chain --
 *     Check the update chain for conditions that would prevent its insertion into the history
 *     store. Return EBUSY if the update chain cannot be inserted into the history store at this
 *     time.
 ','line_number':354,'multiline':True]['text':'
     * There is no selected update to go to disk as such we don't need to check the updates
     * following it.
     ','line_number':366,'multiline':True]['text':'
     * No need to check updates without timestamps for any reconciliation that doesn't involve
     * history store (in-memory database, metadata, and history store reconciliation itself).
     ','line_number':373,'multiline':True]['text':'
     * If eviction reconciliation starts before checkpoint, it is fine to evict updates without
     * timestamps.
     ','line_number':380,'multiline':True]['text':' Cannot delete the update from history store when checkpoint is running. ','line_number':387,'multiline':True]['text':'
     * The selected time window may contain information that isn't visible given the selected
     * update, as such we have to check it separately. This is true when there is a tombstone ahead
     * of the selected update.
     ','line_number':393,'multiline':True]['text':'
     * Rollback to stable may restore older updates from the data store or history store. In this
     * case, the restored update has older update than the onpage value, which is expected.
     * Reconciliation may restore the onpage value to the update chain. In this case, no need to
     * check further as the value is the same as the onpage value which means we processed this
     * update chain in a previous round of reconciliation. If we have a prepared update restored
     * from the onpage value, no need to check as well because the update chain should only contain
     * prepared updates from the same transaction.
     ','line_number':405,'multiline':True]['text':' Loop forward from update after the selected on-page update. ','line_number':419,'multiline':True]['text':' Validate that the updates older than us have older timestamps. ','line_number':429,'multiline':True]['text':'
         * Rollback to stable may restore older updates from the data store or history store. In
         * this case, the restored update has older update than the onpage value, which is expected.
         * Reconciliation may restore the onpage value to the update chain. In this case, no need to
         * check further as the value is the same as the onpage value. If we have a committed
         * prepared update restored from the onpage value, no need to check further as well because
         * the update chain after it should only contain committed prepared updates from the same
         * transaction.
         ','line_number':437,'multiline':True]['text':'
     * Check that the on-page time window has a timestamp. Don't check against ondisk prepared
     * update. It is either committed or rolled back if we are here. If we haven't seen an update
     * with the flag WT_UPDATE_RESTORED_FROM_DS we check against the ondisk value.
     *
     * In the case of checkpoint reconciliation the ondisk value could be an update in the middle of
     * the update chain but checkpoint won't replace the page image as such it will be the previous
     * reconciliations ondisk value that we will be comparing against.
     ','line_number':454,'multiline':True]['text':'
 * __rec_calc_upd_memsize --
 *     Calculate the saved update size.
 ','line_number':485,'multiline':True]['text':'
     * The total update size only contains uncommitted updates. Add the size for the rest of the
     * chain.
     *
     * FIXME-WT-9182: figure out what should be included in the calculation of the size of the saved
     * update chains.
     ','line_number':494,'multiline':True]['text':'
 * __rec_upd_select --
 *     Select the update to write to disk image.
 ','line_number':509,'multiline':True]['text':' Give up if the update is from this transaction and on the metadata file.','line_number':534,'multiline':True]['text':'
         * Track the first update in the chain that is not aborted and the maximum transaction ID.
         ','line_number':538,'multiline':True]['text':'
         * Special handling for application threads evicting their own updates.
         ','line_number':544,'multiline':True]['text':'
         * Check whether the update was committed before reconciliation started. The global commit
         * point can move forward during reconciliation so we use a cached copy to avoid races when
         * a concurrent transaction commits or rolls back while we are examining its updates. This
         * check is not required for history store updates as they are implicitly committed. As
         * prepared transaction IDs are globally visible, need to check the update state as well.
         *
         * There are several cases we should select the update irrespective of visibility. See the
         * detailed scenarios in the definition of WT_UPDATE_SELECT_FOR_DS.
         *
         * These scenarios can happen if the current reconciliation has a limited visibility of
         * updates compared to one of the previous reconciliations. This is important as it is never
         * ok to undo the work of the previous reconciliations.
         ','line_number':552,'multiline':True]['text':'
             * Rare case: metadata writes at read uncommitted isolation level, eviction may see a
             * committed update followed by uncommitted updates. Give up in that case because we
             * can't discard the uncommitted updates.
             ','line_number':569,'multiline':True]['text':' Ignore prepared updates if it is checkpoint. ','line_number':585,'multiline':True]['text':'
                 * For prepared updates written to the date store in salvage, we write the same
                 * prepared value to the data store. If there is still content for that key left in
                 * the history store, rollback to stable will bring it back to the data store.
                 * Otherwise, it removes the key.
                 ','line_number':597,'multiline':True]['text':' Always select the newest committed update to write to disk ','line_number':613,'multiline':True]['text':' Track the selected update transaction id and timestamp. ','line_number':617,'multiline':True]['text':'
         * We only need to walk the whole update chain if we are evicting metadata as it is written
         * with read uncommitted isolation and we may see a committed update followed by uncommitted
         * updates
         ','line_number':624,'multiline':True]['text':'
     * Track the most recent transaction in the page. We store this in the tree at the end of
     * reconciliation in the service of checkpoints, it is used to avoid discarding trees from
     * memory when they have changes required to satisfy a snapshot read.
     ','line_number':633,'multiline':True]['text':' Update the maximum timestamp. ','line_number':641,'multiline':True]['text':'
     * We should never select an update that has been written to the history store except checkpoint
     * writes the update that is older than a prepared update or we need to first delete the update
     * from the history store.
     ','line_number':645,'multiline':True]['text':'
 * __rec_fill_tw_from_upd_select --
 *     Fill the time window information and the selected update.
 ','line_number':659,'multiline':True]['text':'
     * The start timestamp is determined by the commit timestamp when the key is first inserted (or
     * last updated). The end timestamp is set when a key/value pair becomes invalid, either because
     * of a remove or a modify/update operation on the same key.
     ','line_number':674,'multiline':True]['text':'
     * Mark the prepare flag if the selected update is an uncommitted prepare. As tombstone updates
     * are never returned to write, set this flag before we move into the previous update to write.
     ','line_number':680,'multiline':True]['text':'
     * If the newest is a tombstone then select the update before it and set the end of the
     * visibility window to its time point as appropriate to indicate that we should return "not
     * found" for reads after this point.
     *
     * Otherwise, leave the end of the visibility window at the maximum possible value to indicate
     * that the value is visible to any timestamp/transaction id ahead of it.
     ','line_number':687,'multiline':True]['text':' Find the update this tombstone applies to. ','line_number':699,'multiline':True]['text':' We should not see multiple consecutive tombstones. ','line_number':706,'multiline':True]['text':' The beginning of the validity window is the selected update's time point. ','line_number':713,'multiline':True]['text':'
         * The fixed-length column-store implicitly fills the gap with empty records of single
         * tombstones. We are done with update selection if there is no on-disk entry.
         ','line_number':719,'multiline':True]['text':' Move the pointer to the last update on the update chain. ','line_number':732,'multiline':True]['text':' Tombstone is the only non-aborted update on the update chain. ','line_number':734,'multiline':True]['text':'
         * It's possible to have a tombstone as the only update in the update list. If we reconciled
         * before with only a single update and then read the page back into cache, we'll have an
         * empty update list. And applying a delete on top of that will result in ONLY a tombstone
         * in the update list.
         *
         * In this case, we should leave the selected update unset to indicate that we want to keep
         * the same on-disk value but set the stop time point to indicate that the validity window
         * ends when this tombstone started. (Note: this may have been true at one point, but
         * currently we either append the onpage value and return that, or return the tombstone
         * itself; there is no case that returns no update but sets the time window.)
         *
         * If the tombstone is restored from the disk or the history store, the onpage value and the
         * history store value should have been restored together. Therefore, we should not end up
         * here.
         ','line_number':737,'multiline':True]['text':'
         * We may have updated the global transaction concurrently and the tombstone is now globally
         * visible. In this case, the on page value is not appended. Verify that.
         ','line_number':759,'multiline':True]['text':'
             * It's possible that onpage value is not appended if the tombstone becomes globally
             * visible because the oldest transaction id or the oldest timestamp is moved
             * concurrently.
             *
             * If the tombstone is aborted concurrently, we should still have appended the onpage
             * value.
             ','line_number':773,'multiline':True]['text':'
 * __wt_rec_upd_select --
 *     Return the update in a list that should be written (or NULL if none can be written).
 ','line_number':793,'multiline':True]['text':'
     * The "saved updates" return value is used independently of returning an update we can write,
     * both must be initialized.
     ','line_number':806,'multiline':True]['text':'
     * If called with a WT_INSERT item, use its WT_UPDATE list (which must exist), otherwise check
     * for an on-page row-store WT_UPDATE list (which may not exist). Return immediately if the item
     * has no updates.
     ','line_number':817,'multiline':True]['text':' Note: ins is never null for columns. ','line_number':825,'multiline':True]['text':' Keep track of the selected update. ','line_number':834,'multiline':True]['text':'
     * The checkpoint transaction is special. Make sure we never write metadata updates from a
     * checkpoint in a concurrent session.
     ','line_number':841,'multiline':True]['text':' If all of the updates were aborted, quit. ','line_number':851,'multiline':True]['text':'
     * We expect the page to be clean after reconciliation. If there are invisible updates, abort
     * eviction.
     ','line_number':858,'multiline':True]['text':' If an update was selected, record that we're making progress. ','line_number':868,'multiline':True]['text':' Mark the page dirty after reconciliation. ','line_number':875,'multiline':True]['text':'
     * If we have done a prepared rollback, we may have restored a history store value to the update
     * chain but the same value is left in the history store. Save it to delete it from the history
     * store later.
     ','line_number':883,'multiline':True]['text':' Check the update chain for conditions that could prevent it's eviction. ','line_number':890,'multiline':True]['text':'
     * Set the flag if the selected tombstone has no timestamp. Based on this flag, the caller
     * functions perform the history store truncation for this key.
     ','line_number':893,'multiline':True]['text':'
         * The selected update can be the tombstone itself when the tombstone is globally visible.
         * Compare the tombstone's timestamp with either the next update in the update list or the
         * on-disk cell timestamp to determine if the tombstone is discarding a timestamp.
         ','line_number':901,'multiline':True]['text':' Loop until a valid update is found. ','line_number':909,'multiline':True]['text':'
     * Fixup any missing timestamps, assert that checkpoint wasn't running when this round of
     * reconciliation started.
     *
     * Returning EBUSY here is okay as the previous call to validate the update chain wouldn't have
     * caught the situation where only a tombstone is selected.
     ','line_number':919,'multiline':True]['text':' Catch this case in diagnostic builds. ','line_number':928,'multiline':True]['text':'
     * The update doesn't have any further updates that need to be written to the history store,
     * skip saving the update as saving the update will cause reconciliation to think there is work
     * that needs to be done when there might not be.
     *
     * Additionally history store reconciliation is not set skip saving an update.
     ','line_number':934,'multiline':True]['text':'
         * We should restore the update chains to the new disk image if there are newer updates in
         * eviction, or for cases that don't support history store, such as an in-memory database.
         ','line_number':942,'multiline':True]['text':'
     * Mark the selected update (and potentially the tombstone preceding it) as being destined for
     * the data store. Subsequent reconciliations should know that they can select this update
     * regardless of visibility.
     ','line_number':955,'multiline':True]['text':'
     * Set statistics for update restore evictions. Update restore eviction debug mode forces update
     * restores to both committed or uncommitted changes.
     ','line_number':965,'multiline':True]['text':'
     * Paranoia: check that we didn't choose an update that has since been rolled back.
     ','line_number':972,'multiline':True]['text':'
     * Returning an update means the original on-page value might be lost, and that's a problem if
     * there's a reader that needs it, make a copy of the on-page value. We do that any time there
     * are saved updates (we may need the original on-page value to terminate the update chain, for
     * example, in the case of an update that modifies the original value). Additionally, make a
     * copy of the on-page value if the value is an overflow item and anything other than the
     * on-page cell is being written. This is because the value's backing overflow blocks aren't
     * part of the page, and they are physically removed by checkpoint writing this page, that is,
     * the checkpoint doesn't include the overflow blocks so they're removed and future readers of
     * this page won't be able to find them.
     *
     * We never append prepared updates back to the onpage value. If it is a prepared full update,
     * it is already on the update chain. If it is a prepared tombstone, the onpage value is already
     * appended to the update chain when the page is read into memory.
     ','line_number':978,'multiline':True]