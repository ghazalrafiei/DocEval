['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __rename_file --
 *     WT_SESSION::rename for a file.
 ','line_number':11,'multiline':True]['text':' Close any btree handles in the file. ','line_number':34,'multiline':True]['text':'
     * First, check if the file being renamed exists in the system. Doing this check first matches
     * the table rename behavior because we return WT_NOTFOUND when the renamed file doesn't exist
     * (subsequently mapped to ENOENT by the session layer).
     ','line_number':40,'multiline':True]['text':'
     * Check to see if the proposed name is already in use, in either the metadata or the
     * filesystem.
     ','line_number':47,'multiline':True]['text':' NOTREACHED ','line_number':54,'multiline':True]['text':' Rename the underlying file. ','line_number':75,'multiline':True]['text':'
 * __rename_tree --
 *     Rename an index or colgroup reference.
 ','line_number':87,'multiline':True]['text':'
     * Create the new data source URI and update the schema value.
     *
     * 'name' has the format (colgroup|index):<tablename>[:<suffix>]; we need the suffix.
     ','line_number':111,'multiline':True]['text':' An existing table should have a well formed name. ','line_number':121,'multiline':True]['text':' Skip the colon, if any. ','line_number':129,'multiline':True]['text':' Read the old schema value. ','line_number':133,'multiline':True]['text':'
     * Calculate the new data source URI. Use the existing table structure and substitute the new
     * name temporarily.
     ','line_number':136,'multiline':True]['text':' Convert not-found errors to EINVAL for the application. ','line_number':147,'multiline':True]['text':' Take a copy of the old data source. ','line_number':152,'multiline':True]['text':' Overwrite it with the new data source. ','line_number':156,'multiline':True]['text':'
     * Do the rename before updating the metadata to avoid leaving the metadata inconsistent if the
     * rename fails.
     ','line_number':161,'multiline':True]['text':'
     * Remove the old metadata entry. Insert the new metadata entry.
     ','line_number':167,'multiline':True]['text':'
 * __metadata_rename --
 *     Rename an entry in the metadata table.
 ','line_number':183,'multiline':True]['text':'
 * __rename_table --
 *     WT_SESSION::rename for a table.
 ','line_number':202,'multiline':True]['text':'
     * Open the table so we can rename its column groups and indexes.
     *
     * Ideally we would keep the table locked exclusive across the rename, but for now we rely on
     * the global table lock to prevent the table being reopened while it is being renamed. One
     * issue is that the WT_WITHOUT_LOCKS macro can drop and reacquire the global table lock,
     * avoiding deadlocks while waiting for LSM operation to quiesce.
     ','line_number':219,'multiline':True]['text':' Rename the column groups. ','line_number':229,'multiline':True]['text':' Rename the indices. ','line_number':233,'multiline':True]['text':' Make sure the table data handle is closed. ','line_number':238,'multiline':True]['text':' Rename the table. ','line_number':248,'multiline':True]['text':'
 * __rename_tiered --
 *     Rename a tiered data source.
 ','line_number':257,'multiline':True]['text':' We do not allow renaming a tiered table. ','line_number':267,'multiline':True]['text':'
 * __schema_rename --
 *     WT_SESSION::rename.
 ','line_number':271,'multiline':True]['text':' The target type must match the source type. ','line_number':282,'multiline':True]['text':'
     * We track rename operations, if we fail in the middle, we want to back it all out.
     ','line_number':288,'multiline':True]['text':' If we didn't find a metadata entry, map that error to ENOENT. ','line_number':310,'multiline':True]['text':'
 * __wt_schema_rename --
 *     WT_SESSION::rename.
 ','line_number':314,'multiline':True]['text':'
     * We should be calling this function with the checkpoint lock and the schema lock, but we
     * cannot verify that here because we can re-enter this function with the internal session. If
     * we get here using the internal session, we cannot check whether we own the locks, as they
     * would be locked by the outer session. We can thus only check whether the locks are acquired,
     * as opposed to, whether the locks are acquired by us.
     ','line_number':324,'multiline':True]