['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':' Get the session from any cursor. ','line_number':9,'multiline':True]['text':'
 * Initialize a static WT_CURSOR structure.
 ','line_number':12,'multiline':True]['text':' session ','line_number':19,'multiline':True]['text':' uri ','line_number':20,'multiline':True]['text':' key_format ','line_number':21,'multiline':True]['text':' value_format ','line_number':22,'multiline':True]['text':' uri_hash ','line_number':25,'multiline':True]['text':' TAILQ_ENTRY q ','line_number':26,'multiline':True]['text':' recno key ','line_number':27,'multiline':True]['text':' recno raw buffer ','line_number':28,'multiline':True]['text':' json_private ','line_number':29,'multiline':True]['text':' lang_private ','line_number':30,'multiline':True]['text':' WT_ITEM key ','line_number':31,'multiline':True]['text':' WT_ITEM value ','line_number':32,'multiline':True]['text':' int saved_err ','line_number':33,'multiline':True]['text':' internal_uri ','line_number':34,'multiline':True]['text':' WT_ITEM lower bound ','line_number':35,'multiline':True]['text':' WT_ITEM upper bound ','line_number':36,'multiline':True]['text':' uint32_t flags ','line_number':37,'multiline':True]['text':' Call a function without the evict reposition cursor flag, restore afterwards. ','line_number':40,'multiline':True]['text':' Cursor position ','line_number':53,'multiline':True]['text':' Backup file stream ','line_number':54,'multiline':True]['text':' Maximum log file ID seen ','line_number':57,'multiline':True]['text':' List of files to be copied. ','line_number':59,'multiline':True]['text':' File offset-based incremental backup. ','line_number':63,'multiline':True]['text':' Incremental backup source ','line_number':64,'multiline':True]['text':' File name ','line_number':65,'multiline':True]['text':' File cursor ','line_number':67,'multiline':True]['text':' List of modified blocks ','line_number':69,'multiline':True]['text':' Number of bits in bitstring ','line_number':70,'multiline':True]['text':' Zero bit offset in bitstring ','line_number':71,'multiline':True]['text':' Current offset ','line_number':72,'multiline':True]['text':' Length, transfer size ','line_number':73,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':75,'multiline':True]['text':' Object has fake checkpoint ','line_number':76,'multiline':True]['text':' Consolidate returned info on this object ','line_number':77,'multiline':True]['text':' Duplicated backup cursor ','line_number':78,'multiline':True]['text':' Special backup cursor for export operation ','line_number':79,'multiline':True]['text':' Force full file copy for this cursor ','line_number':80,'multiline':True]['text':' Force stop incremental backup ','line_number':81,'multiline':True]['text':' Object has checkpoint backup info ','line_number':82,'multiline':True]['text':' Incremental backup cursor ','line_number':83,'multiline':True]['text':' Cursor traversal initialized ','line_number':84,'multiline':True]['text':' Hot-backup started ','line_number':85,'multiline':True]['text':' Backup cursor for incremental ids ','line_number':86,'multiline':True]['text':' Object had a rename ','line_number':87,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':88,'multiline':True]['text':' Get the WT_BTREE from any WT_CURSOR/WT_CURSOR_BTREE. ','line_number':92,'multiline':True]['text':' Data handle for the btree ','line_number':101,'multiline':True]['text':'
     * The following fields are set by the search functions as a precursor to page modification: we
     * have a page, a WT_COL/WT_ROW slot on the page, an insert head, insert list and a skiplist
     * stack (the stack of skiplist entries leading to the insert point). The search functions also
     * return the relationship of the search key to the found key.
     ','line_number':103,'multiline':True]['text':' Current page ','line_number':109,'multiline':True]['text':' WT_COL/WT_ROW 0-based slot ','line_number':110,'multiline':True]['text':' Insert chain head ','line_number':112,'multiline':True]['text':' Current insert node ','line_number':113,'multiline':True]['text':' Search stack ','line_number':114,'multiline':True]['text':' Next item(s) found during search ','line_number':117,'multiline':True]['text':' Deleted items on the page ','line_number':120,'multiline':True]['text':' Record number ','line_number':122,'multiline':True]['text':'
     * Next-random cursors can optionally be configured to step through a percentage of the total
     * leaf pages to their next value. Note the configured value and the calculated number of leaf
     * pages to skip.
     ','line_number':124,'multiline':True]['text':'
     * The search function sets compare to:
     *	< 1 if the found key is less than the specified key
     *	  0 if the found key matches the specified key
     *	> 1 if the found key is larger than the specified key
     ','line_number':132,'multiline':True]['text':'
     * A key returned from a binary search or cursor movement on a row-store page; if we find an
     * exact match on a row-store leaf page in a search operation, keep a copy of key we built
     * during the search to avoid doing the additional work of getting the key again for return to
     * the application. Note, this only applies to exact matches when searching disk-image
     * structures, so it's not, for example, a key from an insert list. Additionally, this structure
     * is used to build keys when moving a cursor through a row-store leaf page.
     ','line_number':140,'multiline':True]['text':'
     * It's relatively expensive to calculate the last record on a variable- length column-store
     * page because of the repeat values. Calculate it once per page and cache it. This value
     * doesn't include the skiplist of appended entries on the last page.
     ','line_number':150,'multiline':True]['text':'
     * For row-store pages, we need a single item that tells us the part of the page we're walking
     * (otherwise switching from next to prev and vice-versa is just too complicated), so we map the
     * WT_ROW and WT_INSERT_HEAD insert array slots into a single name space: slot 1 is the
     * "smallest key insert list", slot 2 is WT_ROW[0], slot 3 is WT_INSERT_HEAD[0], and so on. This
     * means WT_INSERT lists are odd-numbered slots, and WT_ROW array slots are even-numbered slots.
     ','line_number':157,'multiline':True]['text':' Row-store iteration slot ','line_number':164,'multiline':True]['text':'
     * Variable-length column-store values are run-length encoded and may be overflow values or
     * Huffman encoded. To avoid repeatedly reading overflow values or decompressing encoded values,
     * process it once and store the result in a temporary buffer. The cip_saved field is used to
     * determine if we've switched columns since our last cursor call. Note however that this result
     * caching is not necessarily safe for all RLE cells. The flag WT_CBT_CACHEABLE_RLE_CELL
     * indicates that the value is uniform across the whole cell. If it is not set (e.g. if the cell
     * is not globally visible yet), the cached values should not be used.
     ','line_number':166,'multiline':True]['text':' Last iteration reference ','line_number':175,'multiline':True]['text':'
     * We don't instantiate prefix-compressed keys on pages because we don't want to waste memory if
     * only moving a cursor through the page, and it's faster to build keys while moving through the
     * page than to roll-forward from a previously instantiated key (we don't instantiate all of the
     * keys, just the ones at binary search points). We can't use the application's WT_CURSOR key
     * field as a copy of the last-returned key because it may have been altered by the API layer,
     * for example, dump cursors. Instead we store the last-returned key in a temporary buffer. The
     * rip_saved field is used to determine if the key in the temporary buffer has the prefix needed
     * for building the current key.
     ','line_number':177,'multiline':True]['text':' Last-returned key reference ','line_number':187,'multiline':True]['text':'
     * A temporary buffer, used in a few different ways:
     *
     * 1) For caching RLE values for column-store files (if RLE is non-zero, then we don't unpack
     * the value every time we move to the next cursor position, we re-use the unpacked value we
     * stored here the first time we hit the value).
     *
     * 2) For building on-page keys when searching row-store files.
     *
     * 3) For tracking random return values to avoid repetition.
     ','line_number':189,'multiline':True]['text':'
     * The update structure allocated by the row- and column-store modify functions, used to avoid a
     * data copy in the WT_CURSOR.update call.
     ','line_number':202,'multiline':True]['text':' An intermediate structure to hold the update value to be assigned to the cursor buffer. ','line_number':208,'multiline':True]['text':'
     * Bits used by checkpoint cursor: a private transaction, used to provide the proper read
     * snapshot; a reference to the corresponding history store checkpoint, which keeps it from
     * disappearing under us if it's unnamed and also tracks its identity for use in history store
     * accesses; a write generation, used to override the tree's base write generation in the
     * unpacking cleanup code; and a checkpoint ID, which is available to applications through an
     * undocumented interface to allow them to open cursors on multiple files and check if they got
     * the same checkpoint in all of them.
     ','line_number':211,'multiline':True]['text':'
     * Fixed-length column-store items are a single byte, and it's simpler and cheaper to allocate
     * the space for it now than keep checking to see if we need to grow the buffer.
     ','line_number':225,'multiline':True]['text':' Fixed-length return value ','line_number':229,'multiline':True]['text':' Cursor appended to the tree ','line_number':231,'multiline':True]['text':'
     * We have to restart cursor next/prev after a prepare conflict. Keep the state of the cursor
     * separately so we can restart at exactly the right point.
     ','line_number':233,'multiline':True]['text':'
     * The random number state is used for random cursor operations. The random number can be seeded
     * by the user or is randomly set based on the time and thread ID.
     ','line_number':239,'multiline':True]['text':' Random number generation state ','line_number':243,'multiline':True]['text':' Check that cursor next/prev never returns keys out-of-order. ','line_number':246,'multiline':True]['text':' Record where the last key is when we see it to help debugging out of order issues. ','line_number':250,'multiline':True]['text':' The page where the last key is ','line_number':251,'multiline':True]['text':' WT_COL/WT_ROW 0-based slot ','line_number':252,'multiline':True]['text':' The last insert list ','line_number':253,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':256,'multiline':True]['text':' Active in the tree ','line_number':257,'multiline':True]['text':' Col-store: value in RLE cell valid for its keys ','line_number':258,'multiline':True]['text':' Col-store: iterating append list ','line_number':259,'multiline':True]['text':' Next iteration configuration ','line_number':260,'multiline':True]['text':' Prev iteration configuration ','line_number':261,'multiline':True]['text':' Prepare conflict by next. ','line_number':262,'multiline':True]['text':' Prepare conflict by prev. ','line_number':263,'multiline':True]['text':' Page in with WT_READ_WONT_NEED ','line_number':264,'multiline':True]['text':' Row-store: small-key insert list ','line_number':265,'multiline':True]['text':' Var-store: on-page recno match ','line_number':266,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':267,'multiline':True]['text':' Flags associated with position ','line_number':269,'multiline':True]['text':'
     * Variable-length column store compares values during bulk load as part of RLE compression,
     * row-store compares keys during bulk load to avoid corruption.
     ','line_number':280,'multiline':True]['text':' First insert ','line_number':284,'multiline':True]['text':' Last key/value inserted ','line_number':285,'multiline':True]['text':'
     * Additional column-store bulk load support.
     ','line_number':287,'multiline':True]['text':' Record number ','line_number':290,'multiline':True]['text':' Variable-length RLE counter ','line_number':291,'multiline':True]['text':'
     * Additional fixed-length column store bitmap bulk load support: current entry in memory chunk
     * count, and the maximum number of records per chunk.
     ','line_number':293,'multiline':True]['text':' Bitmap bulk load ','line_number':297,'multiline':True]['text':' Entry count ','line_number':298,'multiline':True]['text':' Max records per chunk ','line_number':299,'multiline':True]['text':' Reconciliation support ','line_number':301,'multiline':True]['text':' The leaf page ','line_number':302,'multiline':True]['text':' Configured collator ','line_number':319,'multiline':True]['text':' Collator needs to be terminated ','line_number':320,'multiline':True]['text':' Application-owned cursor ','line_number':322,'multiline':True]['text':' Queries of regular history store data ','line_number':334,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':339,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':344,'multiline':True]['text':'
 * A join iterator structure is used to generate candidate primary keys. It is the responsibility of
 * the caller of the iterator to filter these primary key against the other conditions of the join
 * before returning them the caller of WT_CURSOR::next.
 *
 * For a conjunction join (the default), entry_count will be 1, meaning that the iterator only
 * consumes the first entry (WT_CURSOR_JOIN_ENTRY). That is, it successively returns primary keys
 * from a cursor for the first index that was joined. When the values returned by that cursor are
 * exhausted, the iterator has completed. For a disjunction join, exhausting a cursor just means
 * that the iterator advances to the next entry. If the next entry represents an index, a new cursor
 * is opened and primary keys from that index are then successively returned.
 *
 * When positioned on an entry that represents a nested join, a new child iterator is created that
 * will be bound to the nested WT_CURSOR_JOIN. That iterator is then used to generate candidate
 * primary keys. When its iteration is completed, that iterator is destroyed and the parent iterator
 * advances to the next entry. Thus, depending on how deeply joins are nested, a similarly deep
 * stack of iterators is created.
 ','line_number':360,'multiline':True]['text':' has null projection ','line_number':383,'multiline':True]['text':' primary key ','line_number':384,'multiline':True]['text':' the current entry ','line_number':386,'multiline':True]['text':' entries to walk ','line_number':387,'multiline':True]['text':' the current endpoint ','line_number':388,'multiline':True]['text':' endpoints to walk ','line_number':389,'multiline':True]['text':' when testing for inclusion ','line_number':390,'multiline':True]['text':' can we skip current end? ','line_number':391,'multiline':True]['text':'
 * A join endpoint represents a positioned cursor that is 'captured' by a WT_SESSION::join call.
 ','line_number':396,'multiline':True]['text':' holds packed recno ','line_number':401,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':404,'multiline':True]['text':' include values == cursor ','line_number':405,'multiline':True]['text':' include values >  cursor ','line_number':406,'multiline':True]['text':' include values <  cursor ','line_number':407,'multiline':True]['text':' must close cursor ','line_number':408,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':409,'multiline':True]['text':' range for this endpoint ','line_number':412,'multiline':True]['text':'
 * Each join entry typically represents an index's participation in a join. For example, if 'k' is
 * an index, then "t.k > 10 && t.k < 20" would be represented by a single entry, with two endpoints.
 * When the index and subjoin fields are NULL, the join is on the main table. When subjoin is
 * non-NULL, there is a nested join clause.
 ','line_number':417,'multiline':True]['text':' raw main table cursor ','line_number':425,'multiline':True]['text':' a nested join clause ','line_number':426,'multiline':True]['text':' Bloom filter handle ','line_number':427,'multiline':True]['text':' target format for repack ','line_number':428,'multiline':True]['text':' bits per item in bloom ','line_number':429,'multiline':True]['text':' hash functions in bloom ','line_number':430,'multiline':True]['text':' approx number of matches ','line_number':431,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':433,'multiline':True]['text':' use a bloom filter ','line_number':434,'multiline':True]['text':' endpoints are or-ed ','line_number':435,'multiline':True]['text':' don't filter false pos ','line_number':436,'multiline':True]['text':' this entry owns the bloom ','line_number':437,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':438,'multiline':True]['text':' reference endpoints ','line_number':441,'multiline':True]['text':' Join statistics ','line_number':445,'multiline':True]['text':' main table with projection ','line_number':453,'multiline':True]['text':' parent of nested group ','line_number':454,'multiline':True]['text':' chain of iterators ','line_number':455,'multiline':True]['text':' holds packed recno ','line_number':459,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':461,'multiline':True]['text':' Entries are or-ed ','line_number':462,'multiline':True]['text':' Error in initialization ','line_number':463,'multiline':True]['text':' Successful initialization ','line_number':464,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':465,'multiline':True]['text':' JSON formatted string ','line_number':470,'multiline':True]['text':' JSON formatted string ','line_number':471,'multiline':True]['text':' Names of key columns ','line_number':472,'multiline':True]['text':' Names of value columns ','line_number':473,'multiline':True]['text':' LSN of current record ','line_number':479,'multiline':True]['text':' LSN of next record ','line_number':480,'multiline':True]['text':' Copy of record for cursor ','line_number':481,'multiline':True]['text':' Op key/value copy ','line_number':482,'multiline':True]['text':' Pointer within record ','line_number':483,'multiline':True]['text':' Packed key for 'raw' interface ','line_number':484,'multiline':True]['text':' Packed value for 'raw' interface ','line_number':485,'multiline':True]['text':' Intra-record count ','line_number':486,'multiline':True]['text':' Record type ','line_number':487,'multiline':True]['text':' Record txnid ','line_number':488,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':490,'multiline':True]['text':' Remove lock held ','line_number':491,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':492,'multiline':True]['text':' Queries of regular metadata ','line_number':499,'multiline':True]['text':' Extra cursor for create option ','line_number':500,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':502,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':506,'multiline':True]['text':' Prefix appears before description ','line_number':511,'multiline':True]['text':' Position in entries ','line_number':513,'multiline':True]['text':' Cursor not initialized ','line_number':520,'multiline':True]['text':' Cursor not positioned ','line_number':521,'multiline':True]['text':' Statistics ','line_number':523,'multiline':True]['text':' Base statistics value ','line_number':524,'multiline':True]['text':' Count of statistics values ','line_number':525,'multiline':True]['text':' Statistics descriptions ','line_number':527,'multiline':True]['text':' Advance to next set ','line_number':528,'multiline':True]['text':' Copies of the statistics ','line_number':530,'multiline':True]['text':' Original cursor configuration ','line_number':537,'multiline':True]['text':' Saved description string ','line_number':538,'multiline':True]['text':' Current stats key ','line_number':540,'multiline':True]['text':' Current stats value ','line_number':541,'multiline':True]['text':' Current stats value (string) ','line_number':542,'multiline':True]['text':' Options declared in flags.py, shared by WT_CONNECTION::stat_flags ','line_number':544,'multiline':True]['text':'
 * WT_CURSOR_STATS --
 *	Return a reference to a statistic cursor's stats structures.
 ','line_number':548,'multiline':True]['text':' Saved configuration string ','line_number':560,'multiline':True]['text':'
                          * Copies of column group values, for
                          * overlapping set_value calls.
                          ','line_number':563,'multiline':True]['text':' Queries of history cursor. ','line_number':573,'multiline':True]['text':' Queries of regular file cursor. ','line_number':574,'multiline':True]['text':'
     * While we are iterating through updates on the update list, we need to remember information
     * about the previous update we have just traversed so that we can record this as part of the
     * debug metadata in the version cursor's key.
     ','line_number':577,'multiline':True]['text':' The previous traversed update's durable_ts will become the durable_stop_ts. ','line_number':583,'multiline':True]['text':' The previous traversed update's start_ts will become the stop_ts. ','line_number':585,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 0 ','line_number':592,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 8 ','line_number':596,'multiline':True]['text':'
 * This macro provides a consistent way of checking if a cursor has either its lower or upper bound
 * set.
 ','line_number':607,'multiline':True]['text':'
 * A positioned cursor must have a page, this is a requirement of the cursor logic within the
 * wiredtiger API. As such if the page on the cursor is not null we can safely assume that the
 * cursor is positioned.
 *
 * This is primarily used by cursor bound checking logic.
 ','line_number':614,'multiline':True]