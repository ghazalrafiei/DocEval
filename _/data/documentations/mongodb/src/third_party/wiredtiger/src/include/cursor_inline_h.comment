['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_curhs_get_btree --
 *     Convert a history store cursor to the underlying btree.
 ','line_number':9,'multiline':True]['text':'
 * __wt_curhs_get_cbt --
 *     Convert a history store cursor to the underlying btree cursor.
 ','line_number':22,'multiline':True]['text':'
 * __cursor_set_recno --
 *     The cursor value in the interface has to track the value in the underlying cursor, update
 *     them in parallel.
 ','line_number':35,'multiline':True]['text':'
 * __cursor_copy_release --
 *     Release memory used by the key and value in cursor copy debug mode.
 ','line_number':46,'multiline':True]['text':'
 * __cursor_novalue --
 *     Release any cached value before an operation that could update the transaction context and
 *     free data a value is pointing to.
 ','line_number':66,'multiline':True]['text':'
 * __wt_cursor_bound_reset --
 *     Clear any bounds on the cursor if they are set.
 ','line_number':77,'multiline':True]['text':' Clear bounds if they are set. ','line_number':88,'multiline':True]['text':' Clear upper bound, and free the buffer. ','line_number':91,'multiline':True]['text':' Clear lower bound, and free the buffer. ','line_number':95,'multiline':True]['text':'
 * __cursor_checkkey --
 *     Check if a key is set without making a copy.
 ','line_number':102,'multiline':True]['text':'
 * __cursor_checkvalue --
 *     Check if a value is set without making a copy.
 ','line_number':112,'multiline':True]['text':'
 * __wt_cursor_localkey --
 *     If the key points into the tree, get a local copy.
 ','line_number':122,'multiline':True]['text':'
 * __cursor_localvalue --
 *     If the value points into the tree, get a local copy.
 ','line_number':138,'multiline':True]['text':'
 * __cursor_needkey --
 *     Check if we have a key set. There's an additional semantic here: if we're pointing into the
 *     tree, get a local copy of whatever we're referencing in the tree, there's an obvious race
 *     with the cursor moving and the reference.
 ','line_number':155,'multiline':True]['text':'
 * __cursor_needvalue --
 *     Check if we have a value set. There's an additional semantic here: if we're pointing into the
 *     tree, get a local copy of whatever we're referencing in the tree, there's an obvious race
 *     with the cursor moving and the reference.
 ','line_number':168,'multiline':True]['text':'
 * __cursor_pos_clear --
 *     Reset the cursor's location.
 ','line_number':181,'multiline':True]['text':'
     * Most of the cursor's location information that needs to be set on successful return is always
     * set by a successful return, for example, we don't initialize the compare return value because
     * it's always set by the row-store search. The other stuff gets cleared here, and it's a
     * minimal set of things we need to clear. It would be a lot simpler to clear everything, but we
     * call this function a lot.
     ','line_number':188,'multiline':True]['text':'
 * __cursor_enter --
 *     Activate a cursor.
 ','line_number':204,'multiline':True]['text':'
     * If there are no other cursors positioned in the session, check whether the cache is full.
     ','line_number':211,'multiline':True]['text':'
 * __cursor_leave --
 *     Deactivate a cursor.
 ','line_number':220,'multiline':True]['text':' Decrement the count of active cursors in the session. ','line_number':227,'multiline':True]['text':'
 * __cursor_reset --
 *     Reset the cursor, it no longer holds any position.
 ','line_number':232,'multiline':True]['text':' Clear key-order checks. ','line_number':247,'multiline':True]['text':' If the cursor was active, deactivate it. ','line_number':251,'multiline':True]['text':'
     * When the count of active cursors in the session goes to zero, there are no active cursors,
     * and we can release any snapshot we're holding for read committed isolation.
     ','line_number':258,'multiline':True]['text':' If we're not holding a cursor reference, we're done. ','line_number':265,'multiline':True]['text':'
     * If we were scanning and saw a lot of deleted records on this page, try to evict the page when
     * we release it.
     *
     * A visible stop timestamp could have been treated as a tombstone and accounted in the deleted
     * count. Such a page might not have any new updates and be clean, but could benefit from
     * reconciliation getting rid of the obsolete content. Hence mark the page dirty to force it
     * through reconciliation.
     ','line_number':269,'multiline':True]['text':'
     * Release any page references we're holding. This can trigger eviction (for example, forced
     * eviction of big pages), so it must happen after releasing our snapshot above. Additionally,
     * there's a debug mode where an application can force the eviction in order to test or stress
     * the system. Clear the reference so we never try the release twice.
     ','line_number':284,'multiline':True]['text':'
 * __wt_curindex_get_valuev --
 *     Internal implementation of WT_CURSOR->get_value for index cursors
 ','line_number':299,'multiline':True]['text':'
 * __wt_curtable_get_valuev --
 *     Internal implementation of WT_CURSOR->get_value for table cursors.
 ','line_number':325,'multiline':True]['text':'
 * __wt_cursor_dhandle_incr_use --
 *     Increment the in-use counter in the cursor's data source.
 ','line_number':353,'multiline':True]['text':' If we open a handle with a time of death set, clear it. ','line_number':364,'multiline':True]['text':'
 * __wt_cursor_dhandle_decr_use --
 *     Decrement the in-use counter in the cursor's data source.
 ','line_number':369,'multiline':True]['text':'
     * If we close a handle with a time of death set, clear it. The ordering is important: after
     * decrementing the use count, there's a chance that the data handle can be freed.
     ','line_number':380,'multiline':True]['text':'
 * __cursor_kv_return --
 *     Return a page referenced key/value pair to the application.
 ','line_number':390,'multiline':True]['text':'
 * __wt_cursor_func_init --
 *     Cursor call setup.
 ','line_number':403,'multiline':True]['text':'
     * Any old insert position is now invalid. We rely on this being cleared to detect if a new
     * skiplist is installed after a search.
     ','line_number':417,'multiline':True]['text':' If the transaction is idle, check that the cache isn't full. ','line_number':423,'multiline':True]['text':' Activate the file cursor. ','line_number':426,'multiline':True]['text':'
     * If this is an ordinary transactional cursor, make sure we are set up to read.
     ','line_number':433,'multiline':True]['text':'
 * __cursor_row_slot_key_return --
 *     Return a row-store leaf page slot's key.
 ','line_number':441,'multiline':True]['text':'
     * The row-store key can change underfoot; explicitly take a copy.
     ','line_number':462,'multiline':True]['text':'
     * Check for an immediately available key from an encoded or instantiated key, and if that's not
     * available, from the unpacked cell.
     ','line_number':467,'multiline':True]['text':'
     * A prefix compressed key. As a cursor is running through the tree, we may have the fully-built
     * key immediately before the prefix-compressed key we want, so it's faster to build here.
     ','line_number':486,'multiline':True]['text':'
     * Inline building simple prefix-compressed keys from a previous key.
     *
     * Grow the buffer as necessary as well as ensure data has been copied into local buffer space,
     * then append the suffix to the prefix already in the buffer. Don't grow the buffer
     * unnecessarily or copy data we don't need, truncate the item's CURRENT data length to the
     * prefix bytes before growing the buffer.
     ','line_number':493,'multiline':True]['text':'
       * Call __wt_row_leaf_key_work() instead of __wt_row_leaf_key(): we already did the
       * __wt_row_leaf_key() fast-path checks inline.
       ','line_number':508,'multiline':True]