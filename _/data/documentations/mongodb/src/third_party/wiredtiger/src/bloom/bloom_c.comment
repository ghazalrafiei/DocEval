['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * Less Hashing, Same Performance: Building a Better Bloom Filter
 *	by Adam Kirsch, Michael Mitzenmacher
 *	Random Structures & Algorithms, Volume 33 Issue 2, September 2008
 ','line_number':8,'multiline':True]['text':'
 * __bloom_init --
 *     Allocate a WT_BLOOM handle.
 ','line_number':18,'multiline':True]['text':' Add the standard config at the end, so it overrides user settings. ','line_number':38,'multiline':True]['text':'
 * __bloom_setup --
 *     Populate the bloom structure. Setup is passed in either the count of items expected (n), or
 *     the length of the bitstring (m). Depends on whether the function is called via create or
 *     open.
 ','line_number':55,'multiline':True]['text':'
 * __wt_bloom_create --
 *     Creates and configures a WT_BLOOM handle, allocates a bitstring in memory to use while
 *     populating the bloom filter. count - is the expected number of inserted items factor - is the
 *     number of bits to use per inserted item k - is the number of hash values to set or test per
 *     item
 ','line_number':80,'multiline':True]['text':'
 * __bloom_open_cursor --
 *     Open a cursor to read from a Bloom filter.
 ','line_number':107,'multiline':True]['text':'
 * Bump the cache priority for Bloom filters: this makes eviction favor pages from other trees over
 * Bloom filters.
 ','line_number':128,'multiline':True]['text':'
 * __wt_bloom_open --
 *     Open a Bloom filter object for use by a single session. The filter must have been created and
 *     finalized.
 ','line_number':139,'multiline':True]['text':' Find the largest key, to get the size of the filter. ','line_number':157,'multiline':True]['text':'
 * __wt_bloom_insert --
 *     Adds the given key to the Bloom filter.
 ','line_number':172,'multiline':True]['text':'
 * __wt_bloom_finalize --
 *     Writes the Bloom filter to stable storage. After calling finalize, only read operations can
 *     be performed on the bloom filter.
 ','line_number':188,'multiline':True]['text':'
     * Create a bit table to store the bloom filter in. TODO: should this call __wt_schema_create
     * directly?
     ','line_number':205,'multiline':True]['text':' Add the entries from the array into the table. ','line_number':212,'multiline':True]['text':' Adjust bits to bytes for string offset ','line_number':214,'multiline':True]['text':'
         * Shave off some bytes for pure paranoia, in case WiredTiger reserves some special sizes.
         * Choose a value so that if we do multiple inserts, it will be on an byte boundary.
         ','line_number':216,'multiline':True]['text':'
 * __wt_bloom_hash --
 *     Calculate the hash values for a given key.
 ','line_number':233,'multiline':True]['text':'
 * __wt_bloom_hash_get --
 *     Tests whether the key (as given by its hash signature) is in the Bloom filter. Returns zero
 *     if found, WT_NOTFOUND if not.
 ','line_number':246,'multiline':True]['text':' Get operations are only supported by finalized bloom filters. ','line_number':261,'multiline':True]['text':' Create a cursor on the first time through. ','line_number':264,'multiline':True]['text':'
         * Add 1 to the hash because WiredTiger tables are 1 based and the original bitstring array
         * was 0 based.
         ','line_number':274,'multiline':True]['text':'
     * Error handling from this function is complex. A search in the backing bit field should never
     * return WT_NOTFOUND - so translate that into a different error code and report an error. If we
     * got a WT_ROLLBACK it may be because there is a lot of cache pressure and the transaction is
     * being killed - don't report an error message in that case.
     ','line_number':294,'multiline':True]['text':'
 * __wt_bloom_get --
 *     Tests whether the given key is in the Bloom filter. Returns zero if found, WT_NOTFOUND if
 *     not.
 ','line_number':306,'multiline':True]['text':'
 * __wt_bloom_inmem_get --
 *     Tests whether the given key is in the Bloom filter. This can be used in place of
 *     __wt_bloom_get for Bloom filters that are memory only.
 ','line_number':320,'multiline':True]['text':'
 * __wt_bloom_intersection --
 *     Modify the Bloom filter to contain the intersection of this filter with another.
 ','line_number':340,'multiline':True]['text':'
 * __wt_bloom_close --
 *     Close the Bloom filter, release any resources.
 ','line_number':362,'multiline':True]['text':'
 * __wt_bloom_drop --
 *     Drop a Bloom filter, release any resources.
 ','line_number':384,'multiline':True]