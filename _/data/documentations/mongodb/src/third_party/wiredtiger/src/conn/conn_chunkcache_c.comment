['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __chunkcache_create_metadata_file --
 *     Create the table that will persistently track what chunk cache content is on disk.
 ','line_number':11,'multiline':True]['text':'
 * __chunkcache_get_metadata_config --
 *     If present, retrieve the on-disk configuration for the chunk cache metadata file. The caller
 *     must only use *config if this returns zero. The caller is responsible for freeing the memory
 *     allocated into *config.
 ','line_number':26,'multiline':True]['text':'
 * __chunkcache_verify_metadata_config --
 *     Check that the existing chunk cache configuration is compatible with our current
 *     configuration (and ergo, whether we can reuse the chunk cache contents).
 ','line_number':53,'multiline':True]['text':'
 * __chunkcache_apply_metadata_content --
 *     Extract key/value pairs from a metadata file to allocate chunks in the chunk cache.
 ','line_number':76,'multiline':True]['text':'
 * __chunkcache_metadata_run_chk --
 *     Check to decide if the chunk cache metadata server should continue running.
 ','line_number':108,'multiline':True]['text':'
 * __chunkcache_metadata_insert --
 *     Insert the specified work queue entry into the chunk cache metadata file.
 ','line_number':118,'multiline':True]['text':'
 * __chunkcache_metadata_delete --
 *     Remove the specified entry from the chunk cache metadata file.
 ','line_number':131,'multiline':True]['text':'
 * __chunkcache_metadata_pop_work --
 *     Pop a work unit from the queue. The caller is responsible for freeing the returned work unit
 *     structure.
 ','line_number':143,'multiline':True]['text':'
 * __chunkcache_metadata_work --
 *     Pop chunk cache work items off the queue, and write out the metadata.
 ','line_number':164,'multiline':True]['text':'
 * __chunkcache_metadata_server --
 *     Dispatch chunks of work (or stop the server) when signalled.
 ','line_number':212,'multiline':True]['text':' Wait until the next event. ','line_number':230,'multiline':True]['text':'
 * __wt_chunkcache_metadata_create --
 *     Start the server component of the chunk cache metadata subsystem.
 ','line_number':249,'multiline':True]['text':' Retrieve the chunk cache metadata config, and ensure it matches our startup config. ','line_number':267,'multiline':True]['text':' Start the thread. ','line_number':291,'multiline':True]['text':'
 * __wt_chunkcache_metadata_destroy --
 *     Destroy the chunk cache metadata server thread.
 ','line_number':306,'multiline':True]