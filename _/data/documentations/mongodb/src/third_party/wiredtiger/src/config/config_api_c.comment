['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __config_parser_close --
 *     WT_CONFIG_PARSER->close method.
 ','line_number':11,'multiline':True]['text':'
 * __config_parser_get --
 *     WT_CONFIG_PARSER->search method.
 ','line_number':26,'multiline':True]['text':'
 * __config_parser_next --
 *     WT_CONFIG_PARSER->next method.
 ','line_number':40,'multiline':True]['text':'
 * wiredtiger_config_parser_open --
 *     Create a configuration parser.
 ','line_number':54,'multiline':True]['text':'
     * Setup a WT_CONFIG_ITEM to be used for get calls and a WT_CONFIG structure for iterations
     * through the configuration string.
     ','line_number':76,'multiline':True]['text':'
 * __config_validate --
 *     Validate a configuration string. Taking a function pointer to the matching function for the
 *     given configuration set.
 ','line_number':87,'multiline':True]['text':'
     * It's a logic error to specify both a session and an event handler.
     ','line_number':102,'multiline':True]['text':'
     * If we're not given a session, but we do have an event handler, build a fake
     * session/connection pair and configure the event handler.
     ','line_number':109,'multiline':True]['text':'
     * If we don't have a real connection, look for a matching name in the static list, otherwise
     * look in the configuration list (which has any configuration information the application has
     * added).
     ','line_number':130,'multiline':True]['text':'
 * wiredtiger_config_validate --
 *     Validate a configuration string.
 ','line_number':151,'multiline':True]['text':'
 * wiredtiger_test_config_validate --
 *     Validate a test configuration string.
 ','line_number':162,'multiline':True]['text':'
 * __conn_foc_add --
 *     Add a new entry into the connection's free-on-close list.
 ','line_number':173,'multiline':True]['text':'
     * Callers of this function are expected to be holding the connection's api_lock.
     *
     * All callers of this function currently ignore errors.
     ','line_number':184,'multiline':True]['text':'
 * __wt_conn_foc_discard --
 *     Discard any memory the connection accumulated.
 ','line_number':193,'multiline':True]['text':'
     * If we have a list of chunks to free, run through the list, then free the list itself.
     ','line_number':205,'multiline':True]['text':'
 * __config_add_checks --
 *     Process the list of checks so they can be performed quickly.
 ','line_number':213,'multiline':True]['text':' Setup an iterator for the check string. ','line_number':231,'multiline':True]['text':'
                     * Handle the 'verbose' case of a list containing restricted choices. This
                     * doesn't need to be fast, count the number of items first.
                     ','line_number':246,'multiline':True]['text':'
 * __wt_configure_method --
 *     WT_CONNECTION.configure_method.
 ','line_number':280,'multiline':True]['text':'
     * !!!
     * We ignore the specified uri, that is, all new configuration options
     * will be valid for all data sources. That shouldn't be too bad as
     * the worst that can happen is an application might specify some
     * configuration option and not get an error -- the option should be
     * ignored by the underlying implementation since it's unexpected, so
     * there shouldn't be any real problems.  Eventually I expect we will
     * get the whole data-source thing sorted, at which time there may be
     * configuration arrays for each data source, and that's when the uri
     * will matter.
     ','line_number':298,'multiline':True]['text':' Argument checking; we only support a limited number of types. ','line_number':317,'multiline':True]['text':' Determine the compiled type. ','line_number':327,'multiline':True]['text':'
     * Translate the method name to our configuration names, then find a match.
     ','line_number':341,'multiline':True]['text':'
     * Technically possible for threads to race, lock the connection while adding the new
     * configuration information. We're holding the lock for an extended period of time, but
     * configuration changes should be rare and only happen during startup.
     ','line_number':350,'multiline':True]['text':'
     * Allocate new configuration entry and fill it in.
     *
     * The new base value is the previous base value, a separator and the new configuration string.
     ','line_number':357,'multiline':True]['text':'
     * There may be a default value in the config argument passed in (for example,
     * (kvs_parallelism=64"). The default value isn't part of the name, build a new one.
     ','line_number':369,'multiline':True]['text':'
     * The new configuration name may replace an existing check with new information, in that case
     * skip the old version.
     ','line_number':377,'multiline':True]['text':'
     * Confirm the configuration string passes the new set of checks.
     ','line_number':402,'multiline':True]['text':'
     * The next time this configuration is updated, we don't want to figure out which of these
     * pieces of memory were allocated and will need to be free'd on close (this isn't a heavily
     * used API and it's too much work); add them all to the free-on-close list now. We don't check
     * for errors deliberately, we'd have to figure out which elements have already been added to
     * the free-on-close array and which have not in order to avoid freeing chunks of memory twice.
     * Again, this isn't a commonly used API and it shouldn't ever happen, just leak it.
     ','line_number':407,'multiline':True]['text':'
     * Instead of using locks to protect configuration information, assume we can atomically update
     * a pointer to a chunk of memory, and because a pointer is never partially written, readers
     * will correctly see the original or new versions of the memory. Readers might be using the old
     * version as it's being updated, though, which means we cannot free the old chunk of memory
     * until all possible readers have finished. Currently, that's on connection close: in other
     * words, we can use this because it's small amounts of memory, and we really, really do not
     * want to acquire locks every time we access configuration strings, since that's done on every
     * API call.
     ','line_number':422,'multiline':True]