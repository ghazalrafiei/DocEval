['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_cond_alloc --
 *     Allocate and initialize a condition variable.
 ','line_number':11,'multiline':True]['text':'
 * __wt_cond_wait_signal --
 *     Wait on a mutex, optionally timing out. If we get it before the time out period expires, let
 *     the caller know.
 ','line_number':50,'multiline':True]['text':' Fast path if already signalled. ','line_number':68,'multiline':True]['text':'
     * It's possible to race with threads waking us up. That's not a problem if there are multiple
     * wakeups because the next wakeup will get us, or if we're only pausing for a short period.
     * It's a problem if there's only a single wakeup, our waker is likely waiting for us to exit.
     * After acquiring the mutex (so we're guaranteed to be awakened by any future wakeup call),
     * optionally check if we're OK to keep running. This won't ensure our caller won't just loop
     * and call us again, but at least it's not our fault.
     *
     * Assert we're not waiting longer than a second if not checking the run status.
     ','line_number':81,'multiline':True]['text':'
 * Get the current time as the basis for calculating when the wait should end. Prefer a monotonic
 * clock source to avoid unexpectedly long sleeps when the system clock is adjusted.
 *
 * Failing that, query the time directly and don't attempt to correct for the clock moving
 * backwards, which would result in a sleep that is too long by however much the clock is updated.
 * This isn't as good as a monotonic clock source but makes the window of vulnerability smaller
 * (i.e., the calculated time is only incorrect if the system clock changes in between us querying
 * it and waiting).
 ','line_number':96,'multiline':True]['text':'
     * Check pthread_cond_wait() return for EINTR, ETIME and ETIMEDOUT, some systems return these
     * errors.
     ','line_number':119,'multiline':True]['text':'
 * __wt_cond_signal --
 *     Signal a waiting thread.
 ','line_number':146,'multiline':True]['text':'
     * Our callers often set flags to cause a thread to exit. Add a barrier to ensure exit flags are
     * seen by the sleeping threads, otherwise we can wake up a thread, it immediately goes back to
     * sleep, and we'll hang. Use a full barrier (we may not write before waiting on thread join).
     ','line_number':157,'multiline':True]['text':'
     * Fast path if we are in (or can enter), a state where the next waiter will return immediately
     * as already signaled.
     ','line_number':164,'multiline':True]['text':'
 * __wt_cond_destroy --
 *     Destroy a condition variable.
 ','line_number':181,'multiline':True]