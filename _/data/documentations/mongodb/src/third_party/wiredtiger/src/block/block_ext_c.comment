['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * WT_BLOCK_RET --
 *	Handle extension list errors that would normally panic the system but
 * which should fail gracefully when verifying.
 ','line_number':11,'multiline':True]['text':'
 * __block_off_srch_last --
 *     Return the last element in the list, along with a stack for appending.
 ','line_number':31,'multiline':True]['text':' The list may be empty ','line_number':41,'multiline':True]['text':'
     * Start at the highest skip level, then go as far as possible at each level before stepping
     * down to the next.
     ','line_number':43,'multiline':True]['text':'
 * __block_off_srch --
 *     Search a by-offset skiplist (either the primary by-offset list, or the by-offset list
 *     referenced by a size entry), for the specified offset.
 ','line_number':56,'multiline':True]['text':'
     * Start at the highest skip level, then go as far as possible at each level before stepping
     * down to the next.
     *
     * Return a stack for an exact match or the next-largest item.
     *
     * The WT_EXT structure contains two skiplists, the primary one and the per-size bucket one: if
     * the skip_off flag is set, offset the skiplist array by the depth specified in this particular
     * structure.
     ','line_number':67,'multiline':True]['text':'
 * __block_first_srch --
 *     Search the skiplist for the first available slot.
 ','line_number':84,'multiline':True]['text':'
     * Linear walk of the available chunks in offset order; take the first one that's large enough.
     ','line_number':93,'multiline':True]['text':' Build a stack for the offset we want. ','line_number':102,'multiline':True]['text':'
 * __block_size_srch --
 *     Search the by-size skiplist for the specified size.
 ','line_number':107,'multiline':True]['text':'
     * Start at the highest skip level, then go as far as possible at each level before stepping
     * down to the next.
     *
     * Return a stack for an exact match or the next-largest item.
     ','line_number':117,'multiline':True]['text':'
 * __block_off_srch_pair --
 *     Search a by-offset skiplist for before/after records of the specified offset.
 ','line_number':130,'multiline':True]['text':'
     * Start at the highest skip level, then go as far as possible at each level before stepping
     * down to the next.
     ','line_number':144,'multiline':True]['text':' Keep going at this level ','line_number':155,'multiline':True]['text':' Drop down a level ','line_number':158,'multiline':True]['text':'
 * __block_ext_insert --
 *     Insert an extent into an extent list.
 ','line_number':166,'multiline':True]['text':'
     * If we are inserting a new size onto the size skiplist, we'll need a new WT_SIZE structure for
     * that skiplist.
     ','line_number':177,'multiline':True]['text':'
         * Insert the new WT_EXT structure into the size element's offset skiplist.
         ','line_number':194,'multiline':True]['text':' Insert the new WT_EXT structure into the offset skiplist. ','line_number':209,'multiline':True]['text':' Update the cached end-of-list. ','line_number':219,'multiline':True]['text':'
 * __block_off_insert --
 *     Insert a file range into an extent list.
 ','line_number':226,'multiline':True]['text':'
 * __wt_block_off_srch_inclusive --
 *     Search a by-offset skiplist for the extent that contains the given offset, or if there is no
 *     such extent, then get the next extent.
 ','line_number':242,'multiline':True]['text':' Check if the search key is in the before extent. Otherwise return the after extent. ','line_number':253,'multiline':True]['text':'
 * __block_off_match --
 *     Return if any part of a specified range appears on a specified extent list.
 ','line_number':261,'multiline':True]['text':' Search for before and after entries for the offset. ','line_number':270,'multiline':True]['text':' If "before" or "after" overlaps, we have a winner. ','line_number':273,'multiline':True]['text':'
 * __wt_block_misplaced --
 *     Complain if a block appears on the available or discard lists.
 ','line_number':281,'multiline':True]['text':'
     * Don't check during the salvage read phase, we might be reading an already freed overflow
     * page.
     ','line_number':293,'multiline':True]['text':'
     * Verify a block the btree engine thinks it "owns" doesn't appear on the available or discard
     * lists (it might reasonably be on the alloc list, if it was allocated since the last
     * checkpoint). The engine "owns" a block if it's trying to read or free the block, and those
     * functions make this check.
     *
     * Any block being read or freed should not be "available".
     *
     * Any block being read or freed in the live system should not be on the discard list. (A
     * checkpoint handle might be reading a block which is on the live system's discard list; any
     * attempt to free a block from a checkpoint handle has already failed.)
     ','line_number':300,'multiline':True]['text':'
 * __block_off_remove --
 *     Remove a record from an extent list.
 ','line_number':326,'multiline':True]['text':' Find and remove the record from the by-offset skiplist. ','line_number':338,'multiline':True]['text':'
     * Find and remove the record from the size's offset skiplist; if that empties the by-size
     * skiplist entry, remove it as well.
     ','line_number':346,'multiline':True]['text':' Return the record if our caller wants it, otherwise free it. ','line_number':380,'multiline':True]['text':' Update the cached end-of-list. ','line_number':386,'multiline':True]['text':'
 * __wt_block_off_remove_overlap --
 *     Remove a range from an extent list, where the range may be part of an overlapping entry.
 ','line_number':397,'multiline':True]['text':' Search for before and after entries for the offset. ','line_number':410,'multiline':True]['text':' If "before" or "after" overlaps, retrieve the overlapping entry. ','line_number':413,'multiline':True]['text':' Calculate overlapping extents. ','line_number':417,'multiline':True]['text':'
         * Calculate overlapping extents. There's no initial overlap since the after extent
         * presumably cannot begin before "off".
         ','line_number':425,'multiline':True]['text':'
     * If there are overlaps, insert the item; re-use the extent structure and save the allocation
     * (we know there's no need to merge).
     ','line_number':436,'multiline':True]['text':'
 * __block_extend --
 *     Extend the file to allocate space.
 ','line_number':461,'multiline':True]['text':'
     * Callers of this function are expected to have already acquired any locks required to extend
     * the file.
     *
     * We should never be allocating from an empty file.
     ','line_number':469,'multiline':True]['text':'
     * Make sure we don't allocate past the maximum file size.  There's no
     * easy way to know the maximum wt_off_t on a system, limit growth to
     * 8B bits (we currently check an wt_off_t is 8B in verify_build.h). I
     * don't think we're likely to see anything bigger for awhile.
     ','line_number':478,'multiline':True]['text':'
 * __wt_block_alloc --
 *     Alloc a chunk of space from the underlying file.
 ','line_number':497,'multiline':True]['text':' The live lock must be locked. ','line_number':508,'multiline':True]['text':' If a sync is running, no other sessions can allocate blocks. ','line_number':511,'multiline':True]['text':' Assert we're maintaining the by-size skiplist. ','line_number':514,'multiline':True]['text':'
     * Allocation is either first-fit (lowest offset), or best-fit (best size). If it's first-fit,
     * walk the offset list linearly until we find an entry that will work.
     *
     * If it's best-fit by size, search the by-size skiplist for the size and take the first entry
     * on the by-size offset list. This means we prefer best-fit over lower offset, but within a
     * size we'll prefer an offset appearing earlier in the file.
     *
     * If we don't have anything big enough, extend the file.
     ','line_number':524,'multiline':True]['text':' Take the first record. ','line_number':550,'multiline':True]['text':' Remove the record, and set the returned offset. ','line_number':554,'multiline':True]['text':' If doing a partial allocation, adjust the record and put it back. ','line_number':558,'multiline':True]['text':' Add the newly allocated extent to the list of allocations. ','line_number':577,'multiline':True]['text':'
 * __wt_block_free --
 *     Free a cookie-referenced chunk of space to the underlying file.
 ','line_number':582,'multiline':True]['text':' Crack the cookie. ','line_number':595,'multiline':True]['text':'
     * Freeing blocks in a previous object isn't possible in the current architecture. We'd like to
     * know when a previous object is either completely rewritten (or more likely, empty enough that
     * rewriting remaining blocks is worth doing). Just knowing which blocks are no longer in use
     * isn't enough to remove them (because the internal pages have to be rewritten and we don't
     * know where they are); the simplest solution is probably to keep a count of freed bytes from
     * each object in the metadata, and when enough of the object is no longer in use, perform a
     * compaction like process to do any remaining cleanup.
     ','line_number':599,'multiline':True]['text':'
 * __wt_block_off_free --
 *     Free a file range to the underlying file.
 ','line_number':627,'multiline':True]['text':' The live lock must be locked, except for when we are running salvage. ','line_number':637,'multiline':True]['text':' If a sync is running, no other sessions can free blocks. ','line_number':641,'multiline':True]['text':' We can't reuse free space in an object. ','line_number':644,'multiline':True]['text':'
     * Callers of this function are expected to have already acquired any locks required to
     * manipulate the extent lists.
     *
     * We can reuse this extent immediately if it was allocated during this checkpoint, merge it
     * into the avail list (which slows file growth in workloads including repeated overflow record
     * modification). If this extent is referenced in a previous checkpoint, merge into the discard
     * list.
     ','line_number':648,'multiline':True]['text':'
 * __wt_block_extlist_check --
 *     Return if the extent lists overlap.
 ','line_number':666,'multiline':True]['text':' Walk the lists in parallel, looking for overlaps. ','line_number':678,'multiline':True]['text':'
         * If there's no overlap, move the lower-offset entry to the next entry in its list.
         ','line_number':680,'multiline':True]['text':'
 * __wt_block_extlist_overlap --
 *     Review a checkpoint's alloc/discard extent lists, move overlaps into the live system's
 *     checkpoint-avail list.
 ','line_number':698,'multiline':True]['text':' Walk the lists in parallel, looking for overlaps. ','line_number':713,'multiline':True]['text':'
         * If there's no overlap, move the lower-offset entry to the next entry in its list.
         ','line_number':715,'multiline':True]['text':' Reconcile the overlap. ','line_number':727,'multiline':True]['text':'
 * __block_ext_overlap --
 *     Reconcile two overlapping ranges.
 ','line_number':733,'multiline':True]['text':'
     * The ranges overlap, choose the range we're going to take from each.
     *
     * We can think of the overlap possibilities as 11 different cases:
     *
     *		AAAAAAAAAAAAAAAAAA
     * #1		BBBBBBBBBBBBBBBBBB		ranges are the same
     * #2	BBBBBBBBBBBBB				overlaps the beginning
     * #3			BBBBBBBBBBBBBBBB	overlaps the end
     * #4		BBBBB				B is a prefix of A
     * #5			BBBBBB			B is middle of A
     * #6			BBBBBBBBBB		B is a suffix of A
     *
     * and:
     *
     *		BBBBBBBBBBBBBBBBBB
     * #7	AAAAAAAAAAAAA				same as #3
     * #8			AAAAAAAAAAAAAAAA	same as #2
     * #9		AAAAA				A is a prefix of B
     * #10			AAAAAA			A is middle of B
     * #11			AAAAAAAAAA		A is a suffix of B
     *
     *
     * By swapping the arguments so "A" is always the lower range, we can
     * eliminate cases #2, #8, #10 and #11, and only handle 7 cases:
     *
     *		AAAAAAAAAAAAAAAAAA
     * #1		BBBBBBBBBBBBBBBBBB		ranges are the same
     * #3			BBBBBBBBBBBBBBBB	overlaps the end
     * #4		BBBBB				B is a prefix of A
     * #5			BBBBBB			B is middle of A
     * #6			BBBBBBBBBB		B is a suffix of A
     *
     * and:
     *
     *		BBBBBBBBBBBBBBBBBB
     * #7	AAAAAAAAAAAAA				same as #3
     * #9		AAAAA				A is a prefix of B
     ','line_number':749,'multiline':True]['text':' Swap ','line_number':790,'multiline':True]['text':' Case #1, #4, #9 ','line_number':801,'multiline':True]['text':' Case #1 ','line_number':802,'multiline':True]['text':'
                                   * Move caller's A and B to the next element Add that A and B
                                   * range to the avail list Delete A and B
                                   ','line_number':803,'multiline':True]['text':' Case #4 ','line_number':812,'multiline':True]['text':'
                                         * Remove A from its list Increment/Decrement A's
                                         * offset/size by the size of B Insert A on its list
                                         ','line_number':813,'multiline':True]['text':'
             * Move caller's B to the next element Add B's range to the avail list Delete B
             ','line_number':822,'multiline':True]['text':' Case #9 ','line_number':828,'multiline':True]['text':'
                  * Remove B from its list Increment/Decrement B's offset/size by the size of A
                  * Insert B on its list
                  ','line_number':829,'multiline':True]['text':'
             * Move caller's A to the next element Add A's range to the avail list Delete A
             ','line_number':838,'multiline':True]['text':' Case #6 ','line_number':844,'multiline':True]['text':'
         * Remove A from its list Decrement A's size by the size of B Insert A on its list
         ','line_number':846,'multiline':True]['text':'
         * Move caller's B to the next element Add B's range to the avail list Delete B
         ','line_number':853,'multiline':True]['text':' Case #3, #7 ','line_number':859,'multiline':True]['text':'
         * Add overlap to the avail list
         ','line_number':861,'multiline':True]['text':'
         * Remove A from its list Decrement A's size by the overlap Insert A on its list
         ','line_number':868,'multiline':True]['text':'
         * Remove B from its list Increment/Decrement B's offset/size by the overlap Insert B on its
         * list
         ','line_number':875,'multiline':True]['text':' Case #5 ','line_number':883,'multiline':True]['text':' Calculate the offset/size of the trailing part of A. ','line_number':884,'multiline':True]['text':'
         * Remove A from its list Decrement A's size by trailing part of A plus B's size Insert A on
         * its list
         ','line_number':888,'multiline':True]['text':' Add trailing part of A to A's list as a new element. ','line_number':896,'multiline':True]['text':'
         * Move caller's B to the next element Add B's range to the avail list Delete B
         ','line_number':899,'multiline':True]['text':'
 * __wt_block_extlist_merge --
 *     Merge one extent list into another.
 ','line_number':910,'multiline':True]['text':'
     * We should hold the live lock here when running on the live checkpoint. But there is no easy
     * way to determine if the checkpoint is live so we cannot assert the locking here.
     ','line_number':921,'multiline':True]['text':'
     * Sometimes the list we are merging is much bigger than the other: if so, swap the lists around
     * to reduce the amount of work we need to do during the merge. The size lists have to match as
     * well, so this is only possible if both lists are tracking sizes, or neither are.
     ','line_number':928,'multiline':True]['text':'
 * __block_append --
 *     Append a new entry to the allocation list.
 ','line_number':953,'multiline':True]['text':'
     * Identical to __block_merge, when we know the file is being extended, that is, the information
     * is either going to be used to extend the last object on the list, or become a new object
     * ending the list.
     *
     * The terminating element of the list is cached, check it; otherwise, get a stack for the last
     * object in the skiplist, check for a simple extension, and otherwise append a new structure.
     ','line_number':967,'multiline':True]['text':' Update the cached end-of-list ','line_number':991,'multiline':True]['text':'
 * __wt_block_insert_ext --
 *     Insert an extent into an extent list, merging if possible.
 ','line_number':999,'multiline':True]['text':'
     * There are currently two copies of this function (this code is a one- liner that calls the
     * internal version of the function, which means the compiler should compress out the function
     * call). It's that way because the interface is still fluid, I'm not convinced there won't be a
     * need for a functional split between the internal and external versions in the future.
     *
     * Callers of this function are expected to have already acquired any locks required to
     * manipulate the extent list.
     ','line_number':1007,'multiline':True]['text':'
 * __block_merge --
 *     Insert an extent into an extent list, merging if possible (internal version).
 ','line_number':1019,'multiline':True]['text':'
     * Retrieve the records preceding/following the offset. If the records are contiguous with the
     * free'd offset, combine records.
     ','line_number':1029,'multiline':True]['text':'
     * If the "before" offset range abuts, we'll use it as our new record; if the "after" offset
     * range also abuts, include its size and remove it from the system. Else, only the "after"
     * offset range abuts, use the "after" offset range as our new record. In either case, remove
     * the record we're going to use, adjust it and re-insert it.
     ','line_number':1062,'multiline':True]['text':'
 * __wt_block_extlist_read_avail --
 *     Read an avail extent list, includes minor special handling.
 ','line_number':1095,'multiline':True]['text':' If there isn't a list, we're done. ','line_number':1105,'multiline':True]['text':'
     * In diagnostic mode, reads are checked against the available and discard lists (a block being
     * read should never appear on either). Checkpoint threads may be running in the file, don't
     * race with them.
     ','line_number':1110,'multiline':True]['text':'
     * Extent blocks are allocated from the available list: if reading the avail list, the extent
     * blocks might be included, remove them.
     ','line_number':1120,'multiline':True]['text':'
 * __wt_block_extlist_read --
 *     Read an extent list.
 ','line_number':1135,'multiline':True]['text':' If there isn't a list, we're done. ','line_number':1151,'multiline':True]['text':'
     * If we're not creating both offset and size skiplists, use the simpler append API, otherwise
     * do a full merge. There are two reasons for the test: first, checkpoint "available" lists are
     * NOT sorted (checkpoints write two separate lists, both of which are sorted but they're not
     * merged). Second, the "available" list is sorted by size as well as by offset, and the
     * fast-path append code doesn't support that, it's limited to offset. The test of "track size"
     * is short-hand for "are we reading the available-blocks list".
     ','line_number':1164,'multiline':True]['text':'
         * We check the offset/size pairs represent valid file ranges, then insert them into the
         * list. We don't necessarily have to check for offsets past the end of the checkpoint, but
         * it's a cheap test to do here and we'd have to do the check as part of file verification,
         * regardless.
         ','line_number':1178,'multiline':True]['text':'
 * __wt_block_extlist_write --
 *     Write an extent list at the tail of the file.
 ','line_number':1204,'multiline':True]['text':'
     * Figure out how many entries we're writing -- if there aren't any entries, there's nothing to
     * write, unless we still have to write the extent list to include the checkpoint recovery
     * information.
     ','line_number':1222,'multiline':True]['text':'
     * Get a scratch buffer, clear the page's header and data, initialize the header.
     *
     * Allocate memory for the extent list entries plus two additional entries: the initial
     * WT_BLOCK_EXTLIST_MAGIC/0 pair and the list- terminating WT_BLOCK_INVALID_OFFSET/0 pair.
     ','line_number':1234,'multiline':True]['text':' Fill the page's data. ','line_number':1248,'multiline':True]['text':' Extent list starts ','line_number':1250,'multiline':True]['text':' Free ranges ','line_number':1252,'multiline':True]['text':' Free ranges ','line_number':1255,'multiline':True]['text':' Extent list stops ','line_number':1257,'multiline':True]['text':'
     * The extent list is written as a valid btree page because the salvage functionality might move
     * into the btree layer some day, besides, we don't need another format and this way the page
     * format can be easily verified.
     ','line_number':1265,'multiline':True]['text':' Write the extent list to disk. ','line_number':1273,'multiline':True]['text':'
     * Remove the allocated blocks from the system's allocation list, extent blocks never appear on
     * any allocation list.
     ','line_number':1278,'multiline':True]['text':'
 * __wt_block_extlist_truncate --
 *     Truncate the file based on the last available extent in the list.
 ','line_number':1293,'multiline':True]['text':'
     * Check if the last available extent is at the end of the file, and if so, truncate the file
     * and discard the extent.
     ','line_number':1303,'multiline':True]['text':'
     * Remove the extent list entry. (Save the value, we need it to reset the cached file size, and
     * that can't happen until after the extent list removal succeeds.)
     ','line_number':1313,'multiline':True]['text':' Truncate the file. ','line_number':1320,'multiline':True]['text':'
 * __wt_block_extlist_init --
 *     Initialize an extent list.
 ','line_number':1324,'multiline':True]['text':'
 * __wt_block_extlist_free --
 *     Discard an extent list.
 ','line_number':1347,'multiline':True]['text':' Extent lists are re-used, clear them. ','line_number':1368,'multiline':True]['text':'
 * __block_extlist_dump --
 *     Dump an extent list as verbose messages.
 ','line_number':1372,'multiline':True]