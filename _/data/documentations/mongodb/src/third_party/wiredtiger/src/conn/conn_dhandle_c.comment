['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __conn_dhandle_config_clear --
 *     Clear the underlying object's configuration information.
 ','line_number':11,'multiline':True]['text':'
 * __conn_dhandle_config_set --
 *     Set up a btree handle's configuration information.
 ','line_number':32,'multiline':True]['text':'
     * Read the object's entry from the metadata file, we're done if we don't find one.
     ','line_number':48,'multiline':True]['text':'
     * The defaults are included because persistent configuration information is stored in the
     * metadata file and it may be from an earlier version of WiredTiger. If defaults are included
     * in the configuration, we can add new configuration strings without upgrading the metadata
     * file or writing special code in case a configuration string isn't initialized, as long as the
     * new configuration string has an appropriate default value.
     *
     * The error handling is a little odd, but be careful: we're holding a chunk of allocated memory
     * in metaconf. If we fail before we copy a reference to it into the object's configuration
     * array, we must free it, after the copy, we don't want to free it.
     ','line_number':57,'multiline':True]['text':'
         * We are stripping out all checkpoint related information from the config string. We save
         * the rest of the metadata string, that is essentially static and unchanging and then
         * concatenate the new checkpoint related information on each checkpoint. The reason is
         * performance and avoiding a lot of calls to the config parsing functions during a
         * checkpoint for information that changes in a very well known way.
         *
         * First collapse and overwrite checkpoint information because we do not know the name of or
         * how many checkpoints may be in this metadata. Similarly, for backup information, we want
         * an empty category to strip out since we don't know any backup ids. Set them empty and
         * call collapse to overwrite anything existing.
         ','line_number':72,'multiline':True]['text':'
         * Now strip out the checkpoint related items from the configuration string and that is now
         * our base metadata string.
         ','line_number':92,'multiline':True]['text':'  Save the original metadata value for further check to avoid writing corrupted data. ','line_number':116,'multiline':True]['text':'
 * __conn_dhandle_destroy --
 *     Destroy a data handle.
 ','line_number':133,'multiline':True]['text':'
 * __wt_conn_dhandle_alloc --
 *     Allocate a new data handle and return it linked into the connection's list.
 ','line_number':168,'multiline':True]['text':'
     * Ensure no one beat us to creating the handle now that we hold the write lock.
     ','line_number':183,'multiline':True]['text':' Btree handles keep their data separate from the interface. ','line_number':207,'multiline':True]['text':'
     * We are holding the data handle list lock, which protects most threads from seeing the new
     * handle until that lock is released.
     *
     * However, the sweep server scans the list of handles without holding that lock, so we need a
     * write barrier here to ensure the sweep server doesn't see a partially filled in structure.
     ','line_number':224,'multiline':True]['text':'
     * Prepend the handle to the connection list, assuming we're likely to need new files again
     * soon, until they are cached by all sessions.
     ','line_number':233,'multiline':True]['text':'
 * __wt_conn_dhandle_find --
 *     Find a previously opened data handle.
 ','line_number':248,'multiline':True]['text':' We must be holding the handle list lock at a higher level. ','line_number':261,'multiline':True]['text':'
 * __wt_conn_dhandle_close --
 *     Sync and close the underlying btree handle.
 ','line_number':288,'multiline':True]['text':'
     * The only data handle type that uses the "handle" field is btree. For other data handle types,
     * it should be NULL.
     ','line_number':308,'multiline':True]['text':' Turn off eviction. ','line_number':316,'multiline':True]['text':' Reset the tree's eviction priority (if any). ','line_number':319,'multiline':True]['text':' Mark the advisory bit that the tree has been evicted. ','line_number':322,'multiline':True]['text':'
     * If we don't already have the schema lock, make it an error to try to acquire it. The problem
     * is that we are holding an exclusive lock on the handle, and if we attempt to acquire the
     * schema lock we might deadlock with a thread that has the schema lock and wants a handle lock.
     ','line_number':326,'multiline':True]['text':'
     * We may not be holding the schema lock, and threads may be walking the list of open handles
     * (for example, checkpoint). Acquire the handle's close lock. We don't have the sweep server
     * acquire the handle's rwlock so we have to prevent races through the close code.
     ','line_number':337,'multiline':True]['text':'
         * If the handle is already marked dead, we're just here to discard it.
         ','line_number':346,'multiline':True]['text':'
         * Mark the handle dead (letting the tree be discarded later) if it's not already marked
         * dead, and it's not a memory-mapped tree. (We can't mark memory-mapped tree handles dead
         * because we close the underlying file handle to allow the file to be removed and
         * memory-mapped trees contain pointers into memory that become invalid if the mapping is
         * closed.)
         ','line_number':352,'multiline':True]['text':'
         * Flush dirty data from any durable trees we couldn't mark dead. That involves writing a
         * checkpoint, which can fail if an update cannot be written, causing the close to fail: if
         * not the final close, return the EBUSY error to our caller for eventual retry.
         *
         * We can't discard non-durable trees yet: first we have to close the underlying btree
         * handle, then we can mark the data handle dead.
         *
         ','line_number':365,'multiline':True]['text':'
     * We close the underlying handle before discarding pages from the cache for performance
     * reasons. However, the underlying block manager "owns" information about memory mappings, and
     * memory-mapped pages contain pointers into memory that becomes invalid if the mapping is
     * closed, so discard mapped files before closing, otherwise, close first.
     ','line_number':385,'multiline':True]['text':' Close the underlying handle. ','line_number':394,'multiline':True]['text':'
     * If marking the handle dead, do so after closing the underlying btree. (Don't do it before
     * that, the block manager asserts there are never two references to a block manager object, and
     * re-opening the handle can succeed once we mark this handle dead.)
     *
     * Check discard too, code we call to clear the cache expects the data handle dead flag to be
     * set when discarding modified pages.
     ','line_number':412,'multiline':True]['text':'
     * Discard from cache any trees not marked dead in this call (that is, including trees
     * previously marked dead). Done after marking the data handle dead for a couple reasons: first,
     * we don't need to hold an exclusive handle to do it, second, code we call to clear the cache
     * expects the data handle dead flag to be set when discarding modified pages.
     ','line_number':423,'multiline':True]['text':'
     * If we marked a handle dead it will be closed by sweep, via another call to this function.
     * Otherwise, we're done with this handle.
     ','line_number':432,'multiline':True]['text':'
 * __conn_dhandle_config_parse_ts --
 *     Parse out timestamp configuration settings for the data handle.
 ','line_number':455,'multiline':True]['text':' Timestamp usage asserts. ','line_number':471,'multiline':True]['text':'
     * Timestamp usage configuration: Ignore the "always", "key_consistent" and "ordered" keywords:
     * "always" and "key_consistent" were never written into databases in the wild, and the default
     * behavior is the same as "ordered".
     ','line_number':478,'multiline':True]['text':' Reset the flags. ','line_number':489,'multiline':True]['text':'
 * __wt_conn_dhandle_open --
 *     Open the current data handle.
 ','line_number':495,'multiline':True]['text':' Turn off eviction. ','line_number':513,'multiline':True]['text':'
     * If the handle is already open, it has to be closed so it can be reopened with a new
     * configuration.
     *
     * This call can return EBUSY if there's an update in the tree that's not yet globally visible.
     * That's not a problem because it can only happen when we're switching from a normal handle to
     * a "special" one, so we're returning EBUSY to an attempt to verify or do other special
     * operations. The reverse won't happen because when the handle from a verify or other special
     * operation is closed, there won't be updates in the tree that can block the close.
     ','line_number':517,'multiline':True]['text':' Discard any previous configuration, set up the new configuration. ','line_number':530,'multiline':True]['text':' Set any special flags on the btree handle. ','line_number':537,'multiline':True]['text':'
         * Allocate data-source statistics memory. We don't allocate that memory when allocating the
         * data handle because not all data handles need statistics (for example, handles used for
         * checkpoint locking). If we are reopening the handle, then it may already have statistics
         * memory, check to avoid the leak.
         ','line_number':540,'multiline':True]['text':' Set any special flags on the btree handle. ','line_number':555,'multiline':True]['text':'
         * Allocate data-source statistics memory. We don't allocate that memory when allocating the
         * data handle because not all data handles need statistics (for example, handles used for
         * checkpoint locking). If we are reopening the handle, then it may already have statistics
         * memory, check to avoid the leak.
         ','line_number':558,'multiline':True]['text':'
     * Bulk handles require true exclusive access, otherwise, handles marked as exclusive are
     * allowed to be relocked by the same session.
     ','line_number':574,'multiline':True]['text':'
     * Checkpoint handles are read-only, so eviction calculations based on the number of btrees are
     * better to ignore them.
     ','line_number':584,'multiline':True]['text':'
         * We want to close the Btree for an object that lives in the local directory. It will
         * actually be part of the corresponding tiered Btree.
         ','line_number':600,'multiline':True]['text':'
 * __conn_btree_apply_internal --
 *     Apply a function to an open data handle.
 ','line_number':616,'multiline':True]['text':' Always apply the name function, if supplied. ','line_number':632,'multiline':True]['text':' If there is no file function, don't bother locking the handle ','line_number':637,'multiline':True]['text':'
     * We need to pull the handle into the session handle cache and make sure it's referenced to
     * stop other internal code dropping the handle (e.g in LSM when cleaning up obsolete chunks).
     ','line_number':641,'multiline':True]['text':' We need to gather this information before releasing the dhandle. ','line_number':650,'multiline':True]['text':'
 * __wt_conn_btree_apply --
 *     Apply a function to all open btree handles with the given URI.
 ','line_number':666,'multiline':True]['text':'
     * If we're given a URI, then we walk only the hash list for that name. If we don't have a URI
     * we walk the entire dhandle list.
     ','line_number':682,'multiline':True]['text':'
 * __conn_dhandle_close_one --
 *     Lock and, if necessary, close a data handle.
 ','line_number':741,'multiline':True]['text':'
     * Lock the handle exclusively. If this is part of schema-changing operation (indicated by
     * metadata tracking being enabled), hold the lock for the duration of the operation.
     ','line_number':751,'multiline':True]['text':'
     * We have an exclusive lock, which means there are no cursors open at this point. Close the
     * handle, if necessary.
     ','line_number':760,'multiline':True]['text':'
         * If the close succeeded, drop any locks it acquired. If there was a failure, this function
         * will fail and the whole transaction will be rolled back.
         ','line_number':768,'multiline':True]['text':'
 * __wt_conn_dhandle_close_all --
 *     Close all data handles with matching name (including all checkpoint handles).
 ','line_number':784,'multiline':True]['text':'
     * Lock the live handle first. This ordering is important: we rely on locking the live handle to
     * fail fast if the tree is busy (e.g., with cursors open or in a checkpoint).
     ','line_number':801,'multiline':True]['text':'
 * __conn_dhandle_remove --
 *     Remove a handle from the shared list.
 ','line_number':822,'multiline':True]['text':' Check if the handle was reacquired by a session while we waited. ','line_number':840,'multiline':True]['text':'
 * __wt_conn_dhandle_discard_single --
 *     Close/discard a single data handle.
 ','line_number':848,'multiline':True]['text':'
     * Kludge: interrupt the eviction server in case it is holding the handle list lock.
     ','line_number':871,'multiline':True]['text':' Try to remove the handle, protected by the data handle lock. ','line_number':880,'multiline':True]['text':'
     * After successfully removing the handle, clean it up.
     ','line_number':886,'multiline':True]['text':'
 * __wt_conn_dhandle_discard --
 *     Close/discard all data handles.
 ','line_number':897,'multiline':True]['text':'
     * Empty the session cache: any data handles created in a connection method may be cached here,
     * and we're about to close them.
     ','line_number':910,'multiline':True]['text':'
 * Close open data handles: first, everything apart from metadata and the history store (as closing
 * a normal file may write metadata and read history store entries). Then close whatever is left
 * open.
 ','line_number':916,'multiline':True]['text':' Shut down the history store table after all eviction is complete. ','line_number':932,'multiline':True]['text':'
     * Closing the files may have resulted in entries on our default session's list of open data
     * handles, specifically, we added the metadata file if any of the files were dirty. Clean up
     * that list before we shut down the metadata entry, for good.
     ','line_number':935,'multiline':True]['text':'
     * The connection may have an open metadata cursor handle. We cannot close it before now because
     * it's potentially used when discarding other open data handles. Close it before discarding the
     * underlying metadata handle.
     ','line_number':943,'multiline':True]['text':' Close the remaining handles. ','line_number':950,'multiline':True]['text':'
 * __wt_dhandle_update_write_gens --
 *     Update the open dhandles write generation, run write generation and base write generation
 *     number.
 ','line_number':961,'multiline':True]['text':' There can be other dhandle types such as tier: that do not have a btree. Skip those. ','line_number':980,'multiline':True]['text':'
         * Initialize the btree write generation numbers after rollback to stable so that the
         * transaction ids of the pages will be reset when loaded from disk to memory.
         ','line_number':985,'multiline':True]['text':'
         * Clear out any transaction IDs that might have been already loaded and cached, as they are
         * now outdated. Currently this is only known to happen in the page_del structure associated
         * with truncated pages.
         ','line_number':992,'multiline':True]['text':'
 * __wt_verbose_dump_handles --
 *     Dump information about all data handles.
 ','line_number':1007,'multiline':True]