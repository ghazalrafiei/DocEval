['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * Supported btree formats: the "current" version is the maximum supported major/minor versions.
 ','line_number':9,'multiline':True]['text':' Oldest version supported ','line_number':12,'multiline':True]['text':' Increase the version number for standalone build. ','line_number':14,'multiline':True]['text':' Newest version supported ','line_number':16,'multiline':True]['text':' Newest version supported ','line_number':18,'multiline':True]['text':'
 * The maximum btree leaf and internal page size is 512MB (2^29). The limit is enforced in software,
 * it could be larger, specifically, the underlying default block manager can support 4GB (2^32).
 * Currently, the maximum page size must accommodate our dependence on the maximum page size fitting
 * into a number of bits less than 32; see the row-store page key-lookup functions for the magic.
 ','line_number':23,'multiline':True]['text':'
 * The length of variable-length column-store values and row-store keys/values are stored in a 4B
 * type, so the largest theoretical key/value item is 4GB. However, in the WT_UPDATE structure we
 * use the UINT32_MAX size as a "deleted" flag, and second, the size of an overflow object is
 * constrained by what an underlying block manager can actually write. (For example, in the default
 * block manager, writing an overflow item includes the underlying block's page header and block
 * manager specific structure, aligned to an allocation-sized unit). The btree engine limits the
 * size of a single object to (4GB - 1KB); that gives us additional bytes if we ever want to store a
 * structure length plus the object size in 4B, or if we need additional flag values. Attempts to
 * store large key/value items in the tree trigger an immediate check to the block manager, to make
 * sure it can write the item. Storing 4GB objects in a btree borders on clinical insanity, anyway.
 *
 * Record numbers are stored in 64-bit unsigned integers, meaning the largest record number is
 * "really, really big".
 ','line_number':31,'multiline':True]['text':'
 * A location in a file is a variable-length cookie, but it has a maximum size so it's easy to
 * create temporary space in which to store them. (Locations can't be much larger than this anyway,
 * they must fit onto the minimum size page because a reference to an overflow page is itself a
 * location.)
 ','line_number':48,'multiline':True]['text':' Maximum address cookie ','line_number':54,'multiline':True]['text':' Evict pages if we see this many consecutive deleted records. ','line_number':56,'multiline':True]['text':'
 * Minimum size of the chunks (in percentage of the page size) a page gets split into during
 * reconciliation.
 ','line_number':59,'multiline':True]['text':' Fixed-length column store ','line_number':66,'multiline':True]['text':' Variable-length column store ','line_number':67,'multiline':True]['text':' Row-store ','line_number':68,'multiline':True]['text':' On ','line_number':78,'multiline':True]['text':' Off ','line_number':79,'multiline':True]['text':' Uncompressed blocks only ','line_number':80,'multiline':True]['text':' Unencrypted blocks only ','line_number':81,'multiline':True]['text':' Start position for eviction walk ','line_number':84,'multiline':True]['text':' An invalid btree file ID value. ID 0 is reserved for the metadata file. ','line_number':91,'multiline':True]['text':'
 * WT_BTREE --
 *	A btree handle.
 ','line_number':94,'multiline':True]['text':' Checkpoint information ','line_number':101,'multiline':True]['text':' Checkpoint information array allocation size ','line_number':102,'multiline':True]['text':' Type ','line_number':104,'multiline':True]['text':' Key format ','line_number':106,'multiline':True]['text':' Value format ','line_number':107,'multiline':True]['text':' Fixed-length field size in bits ','line_number':108,'multiline':True]['text':' Row-store comparator ','line_number':110,'multiline':True]['text':' The collator needs to be freed ','line_number':111,'multiline':True]['text':' File ID, for logging ','line_number':113,'multiline':True]['text':' Allocation size ','line_number':115,'multiline':True]['text':' Internal page max size ','line_number':116,'multiline':True]['text':' Leaf page max size ','line_number':117,'multiline':True]['text':' Leaf page max key size ','line_number':118,'multiline':True]['text':' Leaf page max value size ','line_number':119,'multiline':True]['text':' In-memory page max size ','line_number':120,'multiline':True]['text':' In-memory page image max size ','line_number':121,'multiline':True]['text':' In-memory split trigger size ','line_number':122,'multiline':True]['text':' Value huffman encoding ','line_number':124,'multiline':True]['text':' Checksum configuration ','line_number':126,'multiline':True]['text':'
     * Reconciliation...
     ','line_number':128,'multiline':True]['text':' Dictionary slots ','line_number':131,'multiline':True]['text':' Internal key truncate ','line_number':132,'multiline':True]['text':' Prefix compression ','line_number':133,'multiline':True]['text':' Prefix compression min ','line_number':134,'multiline':True]['text':' Minimum entries to deepen tree ','line_number':137,'multiline':True]['text':' Entries per child when deepened ','line_number':139,'multiline':True]['text':' Split page percent ','line_number':140,'multiline':True]['text':' Page compressor ','line_number':142,'multiline':True]['text':'
                                   * When doing compression, the pre-compression in-memory byte size
                                   * is optionally adjusted based on previous compression results.
                                   * It's an 8B value because it's updated without a lock.
                                   ','line_number':143,'multiline':True]['text':' Run-time compression adjustment ','line_number':148,'multiline':True]['text':' Leaf page pre-compression size ','line_number':149,'multiline':True]['text':' Run-time compression adjustment ','line_number':150,'multiline':True]['text':' Internal page pre-compression size ','line_number':151,'multiline':True]['text':' Tiered storage source ','line_number':153,'multiline':True]['text':' Page encryptor ','line_number':154,'multiline':True]['text':' Overflow lock ','line_number':156,'multiline':True]['text':' Maximum tree depth during search ','line_number':158,'multiline':True]['text':' Maximum blocks written for a page ','line_number':159,'multiline':True]['text':' Column-store last record number ','line_number':161,'multiline':True]['text':' Root page reference ','line_number':163,'multiline':True]['text':' If the tree ever modified ','line_number':164,'multiline':True]['text':' Newly created: bulk-load possible
                         (want a bool but needs atomic cas) ','line_number':165,'multiline':True]['text':' Has entries in the history store table ','line_number':168,'multiline':True]['text':' Handle is/was the LSM primary ','line_number':169,'multiline':True]['text':' Block manager reference ','line_number':171,'multiline':True]['text':' WT_PAGE_HEADER_BYTE_SIZE ','line_number':172,'multiline':True]['text':' Write generation ','line_number':174,'multiline':True]['text':' Write generation on startup. ','line_number':175,'multiline':True]['text':' Runtime write generation. ','line_number':176,'multiline':True]['text':' Maximum txn seen (clean trees) ','line_number':177,'multiline':True]['text':' Checkpoint generation ','line_number':180,'multiline':True]['text':' Syncing session ','line_number':181,'multiline':True]['text':' Sync status ','line_number':182,'multiline':True]['text':'
 * Helper macros: WT_BTREE_SYNCING indicates if a sync is active (either waiting to start or already
 * running), so no new operations should start that would conflict with the sync.
 * WT_SESSION_BTREE_SYNC indicates if the session is performing a sync on its current tree.
 * WT_SESSION_BTREE_SYNC_SAFE checks whether it is safe to perform an operation that would conflict
 * with a sync.
 ','line_number':184,'multiline':True]['text':' Bytes in dirty internal pages. ','line_number':196,'multiline':True]['text':' Bytes in dirty leaf pages. ','line_number':197,'multiline':True]['text':' Bytes ever dirtied in cache. ','line_number':198,'multiline':True]['text':' Cache bytes in memory. ','line_number':199,'multiline':True]['text':' Bytes in internal pages. ','line_number':200,'multiline':True]['text':' Bytes in updates. ','line_number':201,'multiline':True]['text':'
     * The maximum bytes allowed to be used for the table on disk. This is currently only used for
     * the history store table.
     ','line_number':203,'multiline':True]['text':'
 * We maintain a timer for a clean file to avoid excessive checking of checkpoint information that
 * incurs a large processing penalty. We avoid that but will periodically incur the cost to clean up
 * checkpoints that can be deleted.
 ','line_number':209,'multiline':True]['text':' Statistics don't like UINT64_MAX, use INT64_MAX. It's still forever. ','line_number':219,'multiline':True]['text':'
     * We flush pages from the tree (in order to make checkpoint faster), without a high-level lock.
     * To avoid multiple threads flushing at the same time, lock the tree.
     ','line_number':224,'multiline':True]['text':' Lock to flush the tree's pages ','line_number':228,'multiline':True]['text':' Wall clock time for the most recent flush ','line_number':229,'multiline':True]['text':' Timestamp of the most recent flush ','line_number':230,'multiline':True]['text':'
 * All of the following fields live at the end of the structure so it's easier to clear everything
 * but the fields that persist.
 ','line_number':232,'multiline':True]['text':'
     * Eviction information is maintained in the btree handle, but owned by eviction, not the btree
     * code.
     ','line_number':238,'multiline':True]['text':' Eviction thread's location ','line_number':242,'multiline':True]['text':' Relative priority of cached pages ','line_number':243,'multiline':True]['text':' Eviction walk progress ','line_number':244,'multiline':True]['text':' Eviction walk target ','line_number':245,'multiline':True]['text':' Skip this many LRU walks ','line_number':246,'multiline':True]['text':' Saved walk skips for checkpoints ','line_number':247,'multiline':True]['text':' Number of walks skipped ','line_number':248,'multiline':True]['text':' Eviction disabled count ','line_number':249,'multiline':True]['text':' Eviction disabled on open ','line_number':250,'multiline':True]['text':' Count of threads in eviction ','line_number':251,'multiline':True]['text':'
 * Flag values up to 0xfff are reserved for WT_DHANDLE_XXX. See comment with dhandle flags for an
 * explanation.
 ','line_number':254,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION START 12 ','line_number':258,'multiline':True]['text':' Handle is for alter ','line_number':259,'multiline':True]['text':' Bulk-load handle ','line_number':260,'multiline':True]['text':' Handle closed ','line_number':261,'multiline':True]['text':' Cache-resident object ','line_number':262,'multiline':True]['text':' Cache-resident object ','line_number':263,'multiline':True]['text':' Commit-level durability without timestamps ','line_number':264,'multiline':True]['text':' Disable checkpoints ','line_number':265,'multiline':True]['text':' Handle has obsolete pages ','line_number':266,'multiline':True]['text':' Handle is readonly ','line_number':267,'multiline':True]['text':' Handle is for salvage ','line_number':268,'multiline':True]['text':' Handle skipped checkpoint ','line_number':269,'multiline':True]['text':' Handle is for upgrade ','line_number':270,'multiline':True]['text':' Handle is for verify ','line_number':271,'multiline':True]['text':' AUTOMATIC FLAG VALUE GENERATION STOP 32 ','line_number':272,'multiline':True]['text':' Flags that make a btree handle special (not for normal use). ','line_number':276,'multiline':True]['text':'
 * WT_SALVAGE_COOKIE --
 *	Encapsulation of salvage information for reconciliation.
 ','line_number':280,'multiline':True]['text':' Initial items to create ','line_number':285,'multiline':True]['text':' Initial items to skip ','line_number':286,'multiline':True]['text':' Items to take ','line_number':287,'multiline':True]['text':' Ignore the rest ','line_number':289,'multiline':True]