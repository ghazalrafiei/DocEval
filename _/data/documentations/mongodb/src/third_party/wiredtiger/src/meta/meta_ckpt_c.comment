['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __ckpt_load_blk_mods --
 *     Load the block information from the config string.
 ','line_number':20,'multiline':True]['text':'
     * We could be reading in a configuration from an earlier release. If the string doesn't exist
     * then we're done.
     ','line_number':38,'multiline':True]['text':'
     * Load block lists. Ignore any that have an id string that is not known.
     *
     * Remove those not known (TODO).
     ','line_number':45,'multiline':True]['text':'
         * See if this is a valid backup string.
         ','line_number':52,'multiline':True]['text':'
             * This is the place to note that we want to remove an unknown id.
             ','line_number':61,'multiline':True]['text':'
         * We have a valid entry. Load the block information.
         ','line_number':66,'multiline':True]['text':'
         * The rename configuration string component was added later. So don't error if we don't
         * find it in the string. If we don't have it, we're not doing a rename.
         ','line_number':77,'multiline':True]['text':'
 * __wt_meta_checkpoint --
 *     Return a file's checkpoint information.
 ','line_number':97,'multiline':True]['text':' Clear the returned information. ','line_number':110,'multiline':True]['text':' Retrieve the metadata entry for the file. ','line_number':113,'multiline':True]['text':'
 * Check for the version mismatch in wiredtiger standalone build when compatibility has not been
 * configured.
 ','line_number':116,'multiline':True]['text':' Check the major/minor version numbers. ','line_number':122,'multiline':True]['text':' Check the major/minor version numbers. ','line_number':125,'multiline':True]['text':'
     * Retrieve the named checkpoint or the last checkpoint.
     *
     * If we don't find a named checkpoint, we're done, they're read-only. If we don't find a
     * default checkpoint, it's creation, return "no data" and let our caller handle it.
     ','line_number':129,'multiline':True]['text':'
 * __wt_meta_checkpoint_last_name --
 *     Return the last unnamed checkpoint's name. Return the order number and wall-clock time if
 *     requested so the caller can check for races with a currently running checkpoint.
 ','line_number':149,'multiline':True]['text':' Retrieve the metadata entry for the file. ','line_number':163,'multiline':True]['text':' Check the major/minor version numbers. ','line_number':166,'multiline':True]['text':' Retrieve the name of the last unnamed checkpoint. ','line_number':169,'multiline':True]['text':'
 * __ckpt_parse_time --
 *     Parse clock time from checkpoint metadata config. This requires special handling because
 *     times are unsigned values and config parsing treats numeric values as signed.
 ','line_number':177,'multiline':True]['text':' NOLINTNEXTLINE(cert-err34-c) ','line_number':194,'multiline':True]['text':'
 * __wt_meta_checkpoint_by_name --
 *     Look up the requested named checkpoint in the metadata and return its order and time
 *     information.
 ','line_number':201,'multiline':True]['text':' Retrieve the metadata entry. ','line_number':221,'multiline':True]['text':' Check the major/minor version numbers. ','line_number':224,'multiline':True]['text':'
     * Take the first match: there should never be more than a single checkpoint of any name.
     ','line_number':230,'multiline':True]['text':'
 * __wt_meta_checkpoint_clear --
 *     Clear a file's checkpoint.
 ','line_number':252,'multiline':True]['text':'
     * If we are unrolling a failed create, we may have already removed the metadata entry. If no
     * entry is found to update and we're trying to clear the checkpoint, just ignore it.
     ','line_number':259,'multiline':True]['text':'
 * __ckpt_set --
 *     Set a file's checkpoint.
 ','line_number':268,'multiline':True]['text':'
     * If the caller knows we're on a path like checkpoints where we have a valid checkpoint and
     * checkpoint LSN and should use the base, then use that faster path. Some paths don't have a
     * dhandle or want to have the older value retained from the existing metadata. In those cases,
     * use the slower path through configuration parsing functions.
     ','line_number':283,'multiline':True]['text':' Check the metadata is not corrupted. ','line_number':296,'multiline':True]['text':'
             * Only if the hash matches, update the time structure to know when we last had a
             * matching hash. If there is a problem with the metadata string then we have bounded
             * the time from what is in the dhandle to the local time structure we have.
             ','line_number':306,'multiline':True]['text':' Concatenate the metadata base string with the checkpoint string. ','line_number':313,'multiline':True]['text':' Retrieve the metadata for this file. ','line_number':317,'multiline':True]['text':' Replace the checkpoint entry. ','line_number':319,'multiline':True]['text':'
 * __ckpt_named --
 *     Return the information associated with a file's named checkpoint.
 ','line_number':334,'multiline':True]['text':'
     * Take the first match: there should never be more than a single checkpoint of any name.
     ','line_number':347,'multiline':True]['text':'
 * __ckpt_last --
 *     Return the information associated with the file's last checkpoint.
 ','line_number':357,'multiline':True]['text':' Ignore checkpoints before the ones we've already seen. ','line_number':371,'multiline':True]['text':'
 * __ckpt_last_name --
 *     Return the name associated with the file's last unnamed checkpoint. Except: in keeping with
 *     global snapshot/timestamp metadata being about the most recent checkpoint (named or unnamed),
 *     we return the most recent checkpoint (named or unnamed), since all callers need a checkpoint
 *     that matches the snapshot info they're using.
 ','line_number':385,'multiline':True]['text':' Ignore checkpoints before (by the order numbering) the ones we've already seen. ','line_number':409,'multiline':True]['text':' Extract the wall-clock time for matching purposes. ','line_number':415,'multiline':True]['text':'
 * __wt_meta_block_metadata --
 *     Build a version of the file's metadata for the block manager to store.
 ','line_number':438,'multiline':True]['text':' Fill out the configuration array for normal retrieval. ','line_number':456,'multiline':True]['text':'
     * Find out if this file is encrypted. If encrypting, encrypt and encode. The metadata has to be
     * encrypted because it contains private data (for example, column names). We pass the block
     * manager text that describes the metadata (the encryption information), and the possibly
     * encrypted metadata encoded as a hexadecimal string.
     ','line_number':459,'multiline':True]['text':'
     * Get a copy of the encryption information and flag if we're doing encryption. The latter isn't
     * necessary, but it makes it easier to diagnose issues during the load.
     ','line_number':481,'multiline':True]['text':'
 * __ckpt_compare_order --
 *     Qsort comparison routine for the checkpoint list.
 ','line_number':497,'multiline':True]['text':'
 * __ckpt_valid_blk_mods --
 *     Make sure that this set of block mods reflects the current valid backup identifiers. If so,
 *     there is nothing to do. If not, free up old information and set it up for the current
 *     information.
 ','line_number':512,'multiline':True]['text':'
         * Check the state of our block list array compared to the global one. There are
         * several possibilities:
         * - There is no global information for this index, nothing to do but free our resources.
         * - We don't have any backup information locally. Set up our entry.
         * - Our entry's id string matches the current global information. We just want to add our
         *   information to the existing list.
         * - Our entry's id string does not match the current one. It is outdated. Free old
         * resources and then set up our entry.
         ','line_number':531,'multiline':True]['text':' Check if the global entry is valid at our index. ','line_number':542,'multiline':True]['text':' We match, keep our entry and don't set up. ','line_number':548,'multiline':True]['text':' We don't match, free any old information. ','line_number':552,'multiline':True]['text':' If we are keeping or setting up an entry on a rename, set the flag. ','line_number':557,'multiline':True]['text':' Free any old information if we need to do so. ','line_number':561,'multiline':True]['text':' Set up the block list to point to the current information. ','line_number':571,'multiline':True]['text':'
 * __ckpt_copy_blk_mods --
 *     Copy the block mods from a source checkpoint to the destination checkpoint.
 ','line_number':584,'multiline':True]['text':'
 * __meta_blk_mods_load --
 *     Load the block mods for a given checkpoint and set up all the information to store. Load from
 *     either the metadata or from a base checkpoint.
 ','line_number':607,'multiline':True]['text':'
     * Load most recent checkpoint backup blocks to this checkpoint, either from metadata or from a
     * previous checkpoint.
     ','line_number':616,'multiline':True]['text':' Load from metadata. ','line_number':621,'multiline':True]['text':' Load from an existing base checkpoint. ','line_number':625,'multiline':True]['text':'
     * Set the add-a-checkpoint flag, and if we're doing incremental backups, request a list of the
     * checkpoint's modified blocks from the block manager.
     ','line_number':632,'multiline':True]['text':'
 * __meta_ckptlist_allocate_new_ckpt --
 *     Provided a checkpoint list, allocate a new checkpoint. Either use the last checkpoint in the
 *     list or the file metadata to initialize this new checkpoint.
 ','line_number':644,'multiline':True]['text':'
     * Either we have a configuration or an existing checkpoint to initialize with. Also, If we are
     * using an existing checkpoint, we must have the associated metadata.
     ','line_number':663,'multiline':True]['text':'
     * This isn't clean, but there's necessary cooperation between the schema layer (that maintains
     * the list of checkpoints), the btree layer (that knows when the root page is written, creating
     * a new checkpoint), and the block manager (which actually creates the checkpoint). All of that
     * cooperation is handled in the array of checkpoint structures referenced from the WT_BTREE
     * structure.
     *
     * Allocate a slot for a new value, plus a slot to mark the end.
     ','line_number':669,'multiline':True]['text':'
     * If we're adding a checkpoint, in general it should be newer than the previous one according
     * to the time field. However, we don't try to crosscheck that here because it's not quite
     * always true, and ultimately it doesn't matter.
     *
     * First, if the previous checkpoint is from an earlier database run its time might be off,
     * either because of issues with the system clock or because the checkpoint clock got run
     * forward (see notes in txn_ckpt.c) and we crashed and restarted and are still behind it. This
     * could be ruled out by checking the write generation.
     *
     * Second, a single-tree checkpoint can occur while a global checkpoint is in progress. In that
     * case the global checkpoint will have an earlier time, but might get to the tree in question
     * later. With WT-8695 this should only be possible with the metadata, so we could rule it out
     * by only checking non-metadata files.
     *
     * Third, it appears to be possible for a close checkpoint to occur while a global checkpoint is
     * in progress, with the same consequences. There doesn't seem to be any obvious way to detect
     * and rule out this case.
     ','line_number':687,'multiline':True]['text':' Either load block mods from the config, or from the previous checkpoint. ','line_number':707,'multiline':True]['text':'
 * __assert_ckpt_matches --
 *     Assert that given two checkpoints match.
 ','line_number':715,'multiline':True]['text':'
     * We are not checking checkpoint time, because there could be a minute difference depending
     * upon when the checkpoint information was generated. This is acceptable.
     ','line_number':722,'multiline':True]['text':'
     * The two WT_CKPT structures are created through different paths, specifically in one path the
     * WT_CKPT.addr and WT_CKPT.raw fields are taken from a configuration file as strings including
     * a training nul byte. Use the minimum size of the data to ignore that nul byte. Passing nul
     * pointers to memcmp is undefined, so handle that separately.
     ','line_number':747,'multiline':True]['text':'
 * __assert_checkpoint_list_matches --
 *     Assert that two given checkpoint lists match.
 ','line_number':771,'multiline':True]['text':'
 * __wt_meta_ckptlist_get --
 *     Load all available checkpoint information for a file. Either use a cached copy of the
 *     checkpoints or rebuild from the metadata.
 ','line_number':791,'multiline':True]['text':'
     * Get the list of checkpoints for this file. We try to cache the ckptlist between each rebuild
     * from the metadata, but there might not be one, as there are operations that can invalidate a
     * ckptlist. So, use a cached ckptlist if there is one. Otherwise re-generate the ckptlist by
     * reading the metadata. Finally, we avoid using a cached ckptlist for the metadata itself, and
     * there may not be a tree available in all cases, specifically when called from the wt utility
     * list command.
     ','line_number':811,'multiline':True]['text':'
             * Sanity check: Let's compare to a list generated from metadata. There should be no
             * differences.
             ','line_number':828,'multiline':True]['text':'
 * __wt_meta_ckptlist_get_from_config --
 *     Provided a metadata config, load all available checkpoint information for a file.
 ','line_number':849,'multiline':True]['text':' Load any existing checkpoints into the array. ','line_number':870,'multiline':True]['text':'
             * Allocate a slot for a new value, plus a slot to mark the end.
             ','line_number':874,'multiline':True]['text':'
             * Load any incremental information from the configuration string into the existing base
             * checkpoints.
             ','line_number':881,'multiline':True]['text':' Sort in creation-order. ','line_number':893,'multiline':True]['text':' The caller might be asking for a new checkpoint to be allocated. ','line_number':896,'multiline':True]['text':' Return the array to our caller. ','line_number':900,'multiline':True]['text':'
 * __ckpt_load --
 *     Load a single checkpoint's information into a WT_CKPT structure.
 ','line_number':913,'multiline':True]['text':'
     * Copy the name, address (raw and hex), order and time into the slot. If there's no address,
     * it's a fake.
     ','line_number':923,'multiline':True]['text':' Default to durability. ','line_number':949,'multiline':True]['text':'
         * Backward compatibility changes, as the parameter name is different in older versions of
         * WT, make sure that we read older format in case if we didn't find the newer format name.
         ','line_number':967,'multiline':True]['text':'
         * Backward compatibility changes, as the parameter name is different in older versions of
         * WT, make sure that we read older format in case if we didn't find the newer format name.
         ','line_number':992,'multiline':True]['text':'
     * If runtime write generation isn't supplied, this means that we're doing an upgrade and that
     * we're opening the tree for the first time. We should just leave it as 0 so it is recognized
     * as part of a previous run.
     ','line_number':1014,'multiline':True]['text':'
 * __wt_metadata_update_connection --
 *     Update the connection's base write generation and most recent checkpoint time from the config
 *     string.
 ','line_number':1027,'multiline':True]['text':'
 * __wt_metadata_load_prior_state --
 *     Initialize the connection's base write generation and most recent checkpoint time.
 ','line_number':1052,'multiline':True]['text':' Initialize the base write gen to 1 ','line_number':1065,'multiline':True]['text':' Initialize most recent checkpoint time with current clock ','line_number':1067,'multiline':True]['text':' Retrieve the metadata entry for the metadata file. ','line_number':1069,'multiline':True]['text':' Update base write gen and most recent checkpoint time from the metadata. ','line_number':1071,'multiline':True]['text':'
 * __wt_metadata_correct_base_write_gen --
 *     Update the connection's base write generation from all files in metadata at the end of the
 *     recovery checkpoint.
 ','line_number':1079,'multiline':True]['text':' Update base write gen and most recent checkpoint time. ','line_number':1101,'multiline':True]['text':'
 * __wt_meta_ckptlist_to_meta --
 *     Convert a checkpoint list into its metadata representation.
 ','line_number':1113,'multiline':True]['text':' Skip deleted checkpoints. ','line_number':1126,'multiline':True]['text':'
             * We fake checkpoints for handles in the middle of a bulk load. If there is a
             * checkpoint, convert the raw cookie to a hex string.
             ','line_number':1131,'multiline':True]['text':' Use PRId64 formats: WiredTiger's configuration code handles signed 8B values. ','line_number':1149,'multiline':True]['text':'
 * __wt_ckpt_blkmod_to_meta --
 *     Add in any modification block string needed, including an empty one.
 ','line_number':1167,'multiline':True]['text':'
     * If the existing block modifications are not valid, there is nothing to do.
     ','line_number':1185,'multiline':True]['text':'
     * We have at least one valid modified block list.
     ','line_number':1193,'multiline':True]['text':'
         * Occasionally skip including the rename string at all when it's not necessary for
         * correctness, that lets us simulate what is generated in the config string by earlier
         * versions of WiredTiger
         ','line_number':1201,'multiline':True]['text':' The hex string length should match the appropriate number of bits. ','line_number':1219,'multiline':True]['text':'
 * __wt_meta_ckptlist_update_config --
 *     Provided a metadata config and list of checkpoints, set a file's checkpoint value.
 ','line_number':1227,'multiline':True]['text':' Add backup block modifications for any added checkpoint. ','line_number':1245,'multiline':True]['text':' Replace the checkpoint entry. ','line_number':1250,'multiline':True]['text':'
 * __wt_meta_ckptlist_set --
 *     Set a file's checkpoint value from the WT_CKPT list.
 ','line_number':1265,'multiline':True]['text':' Add backup block modifications for any added checkpoint. ','line_number':1282,'multiline':True]['text':'
 * __wt_meta_ckptlist_free --
 *     Discard the checkpoint array.
 ','line_number':1301,'multiline':True]['text':'
     * Sometimes the checkpoint list has a checkpoint which has not been named yet, but carries an
     * order number.
     ','line_number':1313,'multiline':True]['text':'
 * __wt_meta_saved_ckptlist_free --
 *     Discard the saved checkpoint list.
 ','line_number':1322,'multiline':True]['text':'
 * __wt_meta_checkpoint_free --
 *     Clean up a single checkpoint structure.
 ','line_number':1337,'multiline':True]['text':' Clear to prepare for re-use. ','line_number':1363,'multiline':True]['text':'
 * __meta_print_snapshot --
 *     Generate the text form of the checkpoint's snapshot for recording in the metadata.
 ','line_number':1366,'multiline':True]['text':'
 * __meta_sysinfo_update --
 *     Helper to update the most recent and/or named checkpoint snapshot metadata entry.
 ','line_number':1399,'multiline':True]['text':'
 * __meta_sysinfo_remove --
 *     Helper to remove the most recent and/or named checkpoint snapshot metadata entry.
 ','line_number':1416,'multiline':True]['text':'
 * __wt_meta_sysinfo_set --
 *     Set the system information in the metadata.
 ','line_number':1433,'multiline':True]['text':'
     * Write the checkpoint timestamp and snapshot information to the metadata. For any full
     * checkpoint, including most named checkpoints, write the most recent checkpoint's entries. For
     * all named checkpoints, whether or not full, write it to that checkpoint's entries by name.
     * This writes out two copies for most named checkpoints, but that's ok.
     *
     * The most recent checkpoint's entries are
     *    system:checkpoint (contains checkpoint_timestamp=TS)
     *    system:oldest (contains oldest_timestamp=TS)
     *    system:checkpoint_snapshot (contains snapshot_{min,max}=TXN, snapshot_count=N,
     *       snapshots=[TXN,TXN,...])
     * and a named checkpoint's entries are
     *    system:checkpoint.NAME
     *    system:oldest.NAME
     *    system:checkpoint_snapshot.NAME
     * with the same contents.
     *
     * All three entries also include time=SEC and write_gen=WRITE-GEN, where the time is the wall
     * clock time (not timestamp) from the checkpoint and the write generation is the base write
     * generation as of when the checkpoint was taken. This information relates the metadata info to
     * specific tree-level checkpoints.
     *
     * We also write the base write generation to system:system:checkpoint_base_write_gen for full
     * checkpoints. This information doesn't appear needed for named checkpoints and isn't written.
     *
     * The checkpoint timestamp written is set by higher-level code, either in checkpoint or in
     * recovery.
     *
     * We also need to record the oldest timestamp in the metadata so we can set it on startup. The
     * checkpoint's oldest timestamp is the minimum of the current oldest timestamp and the
     * checkpoint timestamp.
     *
     * For both timestamps, don't store zero entries in the metadata: remove the entry instead. This
     * avoids downgrade issues if the metadata is opened with an older version of WiredTiger that
     * doesn't understand the new entry.
     ','line_number':1450,'multiline':True]['text':' Handle the checkpoint timestamp. ','line_number':1495,'multiline':True]['text':'
     * Handle the oldest timestamp.
     *
     * Cache the oldest timestamp and use a read barrier to prevent us from reading two different
     * values of the oldest timestamp.
     ','line_number':1509,'multiline':True]['text':' Handle the snapshot information. ','line_number':1532,'multiline':True]['text':' Print what we did. ','line_number':1538,'multiline':True]['text':'
     * Record the base write gen in metadata as part of full checkpoints.
     *
     * Note that "full" here means what it does in __txn_checkpoint: the user didn't give an
     * explicit list of trees to checkpoint. It is allowed (though currently not sensible) for the
     * user to do that with a named checkpoint, in which case we don't want to make this change.
     ','line_number':1550,'multiline':True]['text':'
 * __wt_meta_sysinfo_clear --
 *     Clear the system information (for a named checkpoint) from the metadata.
 ','line_number':1570,'multiline':True]['text':'
 * __wt_meta_read_checkpoint_snapshot --
 *     Fetch the snapshot data for a checkpoint from the metadata file. Reads the selected named
 *     checkpoint's snapshot, or if the checkpoint name passed is null, the most recent checkpoint's
 *     snapshot. The snapshot list returned is allocated and must be freed by the caller. Can be
 *     called with NULL return parameters to avoid (in particular) bothering to allocate the
 *     snapshot data if it's not needed. Note that if you retrieve the snapshot data you must also
 *     retrieve the snapshot count.
 ','line_number':1592,'multiline':True]['text':'
     * There's an issue with checkpoints produced by some old versions having bad snapshot data.
     * (See WT-8395.) We should ignore those snapshots when we can identify them. This only applies
     * to reading the last checkpoint during recovery, however, so it is done in our caller. (In
     * other cases, for WiredTigerCheckpoint the checkpoint taken after recovery will have replaced
     * any old and broken snapshot; and for named checkpoints, the broken versions didn't write out
     * snapshot information at all anyway.)
     ','line_number':1619,'multiline':True]['text':' Initialize to an empty snapshot. ','line_number':1628,'multiline':True]['text':' Fetch the metadata string. ','line_number':1642,'multiline':True]['text':' Extract the components of the metadata string. ','line_number':1652,'multiline':True]['text':' If the write generation isn't there, use 0; that'll use the btree's write generation. ','line_number':1680,'multiline':True]['text':' Extract the checkpoint time. ','line_number':1690,'multiline':True]['text':'
         * Make sure that the snapshot is self-consistent. The snapshot array should contain only
         * transaction IDs between min and max.
         ','line_number':1697,'multiline':True]['text':'
 * __meta_retrieve_timestamp --
 *     Retrieve a timestamp from the metadata. Not present explicitly means WT_TS_NONE.
 ','line_number':1714,'multiline':True]['text':' Search the metadata for the system information. ','line_number':1731,'multiline':True]['text':' Extract the checkpoint time. ','line_number':1743,'multiline':True]['text':'
 * __meta_retrieve_a_checkpoint_timestamp --
 *     Fetch a timestamp associated with the checkpoint from the metadata. If the checkpoint name
 *     passed is null, returns the timestamp from the most recent checkpoint. Also returns the
 *     checkpoint wall-clock time the timestamp came from (which is a time, but not a timestamp...)
 *
 * Here "checkpoint timestamp" means "a timestamp in a checkpoint". This variance in terminology is
 *     confusing, but at this point not readily avoided.
 ','line_number':1755,'multiline':True]['text':'
 * __wt_meta_read_checkpoint_timestamp --
 *     Fetch a checkpoint's checkpoint timestamp, aka stable timestamp, from the metadata. If the
 *     checkpoint name passed is null, returns the timestamp from the most recent checkpoint.
 *
 * Here "checkpoint timestamp" means "the stable timestamp saved with a checkpoint". This variance
 *     in terminology is confusing, but at this point not readily avoided.
 ','line_number':1782,'multiline':True]['text':'
 * __wt_meta_read_checkpoint_oldest --
 *     Fetch a checkpoint's oldest timestamp from the metadata. If the checkpoint name passed is
 *     null, returns the timestamp from the most recent checkpoint.
 ','line_number':1798,'multiline':True]['text':'
 * __ckpt_version_chk --
 *     Check the version major/minor numbers.
 ','line_number':1811,'multiline':True]['text':'
 * __wt_reset_blkmod --
 *     Reset the incremental backup information, and recreate incremental backup information to
 *     indicate copying the entire file.
 ','line_number':1840,'multiline':True]['text':'
     * Replace the old file entries with new file entries. We need to recreate the incremental
     * backup information to indicate copying the entire file in its bitmap.
     ','line_number':1852,'multiline':True]['text':' First load any existing backup information into a temp checkpoint structure. ','line_number':1856,'multiline':True]['text':' Take the checkpoint structure and generate the metadata string. ','line_number':1859,'multiline':True]