['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __wt_page_alloc --
 *     Create or read a page into the cache.
 ','line_number':18,'multiline':True]['text':'
         * Variable-length column-store leaf page: allocate memory to describe the page's contents
         * with the initial allocation.
         ','line_number':46,'multiline':True]['text':'
         * Row-store leaf page: allocate memory to describe the page's contents with the initial
         * allocation.
         ','line_number':53,'multiline':True]['text':'
         * Internal pages have an array of references to objects so they can split. Allocate the
         * array of references and optionally, the objects to which they point.
         ','line_number':75,'multiline':True]['text':' Increment the cache statistics. ','line_number':114,'multiline':True]['text':'
 * __page_inmem_prepare_update --
 *     Create the actual update for a prepared value.
 ','line_number':123,'multiline':True]['text':'
     * Instantiate both update and tombstone if the prepared update is a tombstone. This is required
     * to ensure that written prepared delete operation must be removed from the data store, when
     * the prepared transaction gets rollback.
     ','line_number':148,'multiline':True]['text':'
         * Mark the update also as in-progress if the update and tombstone are from same transaction
         * by comparing both the transaction and timestamps as the transaction information gets lost
         * after restart.
         ','line_number':162,'multiline':True]['text':'
 * __page_inmem_prepare_update_col --
 *     Shared code for calling __page_inmem_prepare_update on columns.
 ','line_number':192,'multiline':True]['text':' Search the page and apply the modification. ','line_number':202,'multiline':True]['text':'
 * __wt_page_inmem_prepare --
 *     Instantiate prepared updates.
 ','line_number':208,'multiline':True]['text':' We don't handle in-memory prepare resolution here. ','line_number':236,'multiline':True]['text':' Search for prepare records. ','line_number':246,'multiline':True]['text':' Get the value. ','line_number':255,'multiline':True]['text':' For each record, create an update to resolve the prepare. ','line_number':260,'multiline':True]['text':' Create an update to resolve the prepare. ','line_number':262,'multiline':True]['text':' Search for prepare records. ','line_number':271,'multiline':True]['text':' Get the value. The update will copy it, so we don't need to allocate here. ','line_number':280,'multiline':True]['text':' Create an update to resolve the prepare. ','line_number':285,'multiline':True]['text':' Search for prepare records. ','line_number':295,'multiline':True]['text':' Get the key/value pair and create an update to resolve the prepare. ','line_number':300,'multiline':True]['text':' Search the page and apply the modification. ','line_number':308,'multiline':True]['text':'
 * __wt_page_inmem --
 *     Build in-memory page information.
 ','line_number':327,'multiline':True]['text':'
     * Figure out how many underlying objects the page references so we can allocate them along with
     * the page.
     ','line_number':350,'multiline':True]['text':'
         * Column-store leaf page entries map one-to-one to the number of physical entries on the
         * page (each physical entry is a value item). Note this value isn't necessarily correct, we
         * may skip values when reading the disk image.
         ','line_number':357,'multiline':True]['text':'
         * Column-store internal page entries map one-to-one to the number of physical entries on
         * the page (each entry is a location cookie), but in some cases we need to allocate one
         * extra slot. This arises if there's a gap between the page's own start recno and the first
         * child's start recno; we need to insert a blank (deleted) page to cover that chunk of the
         * namespace. Examine the first cell on the page to decide.
         ','line_number':365,'multiline':True]['text':'
         * Row-store internal page entries map one-to-two to the number of physical entries on the
         * page (each entry is a key and location cookie pair).
         ','line_number':381,'multiline':True]['text':'
         * If the "no empty values" flag is set, row-store leaf page entries map one-to-one to the
         * number of physical entries on the page (each physical entry is a key or value item). If
         * that flag is not set, there are more keys than values, we have to walk the page to figure
         * it out. Note this value isn't necessarily correct, we may skip values when reading the
         * disk image.
         ','line_number':388,'multiline':True]['text':' Allocate and initialize a new WT_PAGE. ','line_number':406,'multiline':True]['text':'
     * Track the memory allocated to build this page so we can update the cache statistics in a
     * single call. If the disk image is in allocated memory, start with that.
     *
     * Accounting is based on the page-header's in-memory disk size instead of the buffer memory
     * used to instantiate the page image even though the values might not match exactly, because
     * that's the only value we have when discarding the page image and accounting needs to match.
     ','line_number':411,'multiline':True]['text':' Update the page's cache statistics. ','line_number':441,'multiline':True]['text':' Link the new internal page to the parent. ','line_number':447,'multiline':True]['text':'
 * __wt_col_fix_read_auxheader --
 *     Read the auxiliary header following the bitmap data, if any. This code is used by verify and
 *     needs to be accordingly careful. It is also used by mainline reads so it must also not crash
 *     or print on behalf of verify, and it should not waste time on checks that inmem doesn't need.
 *     Currently this means it does do bounds checks on the header itself (they are embedded in the
 *     integer unpacking) but not on the returned offset, and we don't check the version number.
 *     Careful callers (verify, perhaps debug) should check this. Fast callers (inmem) probably
 *     needn't bother. Salvage is protected by verify and doesn't need to check any of it.
 ','line_number':466,'multiline':True]['text':'
     * Figure where the auxiliary header is. It is always immediately after the bitmap data,
     * regardless of whether the page is full.
     ','line_number':487,'multiline':True]['text':'
     * If the auxiliary header is past the in-memory page size, there's no auxiliary data. If
     * there's at least one byte past the bitmap data, check whether it's zero. If that's zero,
     * there's no auxiliary data. (We are guaranteed that any allocation slop that we might be
     * looking at is all zeros.) Set everything to zero and return.
     ','line_number':494,'multiline':True]['text':' Remember the end of the page for easy computation of maximum lengths. ','line_number':508,'multiline':True]['text':'
     * The on-disk header is a 1-byte version, a packed integer with the number of entries, and a
     * second packed integer that gives the offset from the header start to the data.
     ','line_number':511,'multiline':True]['text':' The returned offsets are from the start of the page. ','line_number':520,'multiline':True]['text':'
 * __inmem_col_fix --
 *     Build in-memory index for fixed-length column-store leaf pages.
 ','line_number':528,'multiline':True]['text':' There is no time window data. ','line_number':558,'multiline':True]['text':' The page should be VERSION_NIL if there are no timestamp entries. ','line_number':562,'multiline':True]['text':' Walk the entries to build the index. ','line_number':568,'multiline':True]['text':' The array is attached to the page, so we don't need to free it on error here. ','line_number':573,'multiline':True]['text':' For now at least, check that the entries are in ascending order. ','line_number':575,'multiline':True]['text':' Only index entries that are not already obsolete. ','line_number':580,'multiline':True]['text':'
         * Set the number of time windows. If there weren't any, the variable doesn't exist. Also,
         * while we could now reallocate the array to the exact count, assume it's not worthwhile.
         ','line_number':599,'multiline':True]['text':'
         * If we skipped "quite a few" entries (threshold is arbitrary), and the tree is already
         * dirty and so will be written, mark the page dirty so it gets rewritten without them.
         ','line_number':606,'multiline':True]['text':' Report back whether we found a prepared value. ','line_number':619,'multiline':True]['text':'
 * __inmem_col_int_init_ref --
 *     Initialize one ref in a column-store internal page.
 ','line_number':626,'multiline':True]['text':'
         * If a page was deleted without being read (fast truncate), and the delete committed, but
         * older transactions in the system required the previous version of the page to remain
         * available or the delete can still be rolled back by RTS, a deleted-address type cell is
         * type written. We'll see that cell on a page if we read from a checkpoint including a
         * deleted cell or if we crash/recover and start off from such a checkpoint. Recreate the
         * fast-delete state for the page.
         ','line_number':644,'multiline':True]['text':'
         * If the tree is already dirty and so will be written, mark the page dirty. (We want to
         * free the deleted pages, but if the handle is read-only or if the application never
         * modifies the tree, we're not able to do so.)
         ','line_number':658,'multiline':True]['text':'
 * __inmem_col_int --
 *     Build in-memory index for column-store internal pages.
 ','line_number':672,'multiline':True]['text':'
     * Walk the page, building references: the page contains value items. The value items are
     * on-page items (WT_CELL_VALUE).
     ','line_number':687,'multiline':True]['text':'
             * There's a gap in the namespace. Create a deleted leaf page (with no address) to cover
             * that gap. We allocated an extra slot in the array in __wt_page_alloc to make room for
             * this case. (Note that this doesn't result in all gaps being covered, just ones on the
             * left side of the tree where we need to be able to search to them. Other gaps end up
             * covered by the insert list of the preceding leaf page.)
             ','line_number':698,'multiline':True]['text':' Assert that we allocated enough space for the extra ref. ','line_number':706,'multiline':True]['text':' Fill it in. ','line_number':709,'multiline':True]['text':' Get the next ref. ','line_number':713,'multiline':True]['text':'
 * __inmem_col_var_repeats --
 *     Count the number of repeat entries on the page.
 ','line_number':726,'multiline':True]['text':' Walk the page, counting entries for the repeats array. ','line_number':737,'multiline':True]['text':'
 * __inmem_col_var --
 *     Build in-memory index for variable-length, data-only leaf pages in column-store trees.
 ','line_number':745,'multiline':True]['text':'
     * Walk the page, building references: the page contains unsorted value items. The value items
     * are on-page (WT_CELL_VALUE), overflow items (WT_CELL_VALUE_OVFL) or deleted items
     * (WT_CELL_DEL).
     ','line_number':766,'multiline':True]['text':'
         * Add records with repeat counts greater than 1 to an array we use for fast lookups. The
         * first entry we find needing the repeats array triggers a re-walk from the start of the
         * page to determine the size of the array.
         ','line_number':777,'multiline':True]['text':' If we find a prepare, we'll have to instantiate it in the update chain later. ','line_number':799,'multiline':True]['text':'
 * __inmem_row_int --
 *     Build in-memory index for row-store internal pages.
 ','line_number':814,'multiline':True]['text':'
     * Walk the page, instantiating keys: the page contains sorted key and location cookie pairs.
     * Keys are on-page/overflow items and location cookies are WT_CELL_ADDR_XXX items.
     ','line_number':834,'multiline':True]['text':'
             * Note: we don't Huffman encode internal page keys, there's no decoding work to do.
             ','line_number':860,'multiline':True]['text':'
             * Instantiate any overflow keys; WiredTiger depends on this, assuming any overflow key
             * is instantiated, and any keys that aren't instantiated cannot be overflow items.
             ','line_number':866,'multiline':True]['text':'
             * If a page was deleted without being read (fast truncate), and the delete committed,
             * but older transactions in the system required the previous version of the page to
             * remain available or the delete can still be rolled back by RTS, a deleted-address
             * type cell is written. We'll see that cell on a page if we read from a checkpoint
             * including a deleted cell or if we crash/recover and start off from such a checkpoint.
             * Recreate the fast-delete state for the page.
             ','line_number':879,'multiline':True]['text':'
             * If the tree is already dirty and so will be written, mark the page dirty. (We want to
             * free the deleted pages, but if the handle is read-only or if the application never
             * modifies the tree, we're not able to do so.)
             ','line_number':893,'multiline':True]['text':'
     * We track if an internal page has backing overflow keys, as overflow keys limit the eviction
     * we can do during a checkpoint. (This is only for historical tables, reconciliation no longer
     * writes overflow cookies on internal pages, no matter the size of the key.)
     ','line_number':918,'multiline':True]['text':'
 * __inmem_row_leaf_entries --
 *     Return the number of entries for row-store leaf pages.
 ','line_number':931,'multiline':True]['text':'
     * Leaf row-store page entries map to a maximum of one-to-one to the number of physical entries
     * on the page (each physical entry might be a key without a subsequent data item). To avoid
     * over-allocation in workloads without empty data items, first walk the page counting the
     * number of keys, then allocate the indices.
     *
     * The page contains key/data pairs. Keys are on-page (WT_CELL_KEY) or overflow
     * (WT_CELL_KEY_OVFL) items, data are either non-existent or a single on-page (WT_CELL_VALUE) or
     * overflow (WT_CELL_VALUE_OVFL) item.
     ','line_number':941,'multiline':True]['text':'
 * __inmem_row_leaf --
 *     Build in-memory index for row-store leaf pages.
 ','line_number':971,'multiline':True]['text':' The code depends on the prefix count variables, other initialization shouldn't matter. ','line_number':991,'multiline':True]['text':' [-Wconditional-uninitialized] ','line_number':993,'multiline':True]['text':' [-Wconditional-uninitialized] ','line_number':994,'multiline':True]['text':' [-Wconditional-uninitialized] ','line_number':995,'multiline':True]['text':' Walk the page, building indices. ','line_number':997,'multiline':True]['text':'
             * Simple keys and prefix-compressed keys can be directly referenced on the page to
             * avoid repeatedly unpacking their cells.
             *
             * Review groups of prefix-compressed keys, and track the biggest group as the page's
             * prefix. What we're finding is the biggest group of prefix-compressed keys we can
             * immediately build using a previous key plus their suffix bytes, without rolling
             * forward through intermediate keys. We save that information on the page and then
             * never physically instantiate those keys, avoiding memory amplification for pages with
             * a page-wide prefix. On the first of a group of prefix-compressed keys, track the slot
             * of the fully-instantiated key from which it's derived and the current key's prefix
             * length. On subsequent keys, if the key can be built from the original key plus the
             * current key's suffix bytes, update the maximum slot to which the prefix applies and
             * the smallest prefix length.
             *
             * Groups of prefix-compressed keys end when a key is not prefix-compressed (ignoring
             * overflow keys), or the key's prefix length increases. A prefix length decreasing is
             * OK, it only means fewer bytes taken from the original key. A prefix length increasing
             * doesn't necessarily end a group of prefix-compressed keys as we might be able to
             * build a subsequent key using the original key and the key's suffix bytes, that is the
             * prefix length could increase and then decrease to the same prefix length as before
             * and those latter keys could be built without rolling forward through intermediate
             * keys.
             *
             * However, that gets tricky: once a key prefix grows, we can never include a prefix
             * smaller than the smallest prefix found so far, in the group, as a subsequent key
             * prefix larger than the smallest prefix found so far might include bytes not present
             * in the original instantiated key. Growing and shrinking is complicated to track, so
             * rather than code up that complexity, we close out a group whenever the prefix grows.
             * Plus, growing has additional issues. Any key with a larger prefix cannot be
             * instantiated without rolling forward through intermediate keys, and so while such a
             * key isn't required to close out the prefix group in all cases, it's not a useful
             * entry for finding the best group of prefix-compressed keys, either, it's only
             * possible keys after the prefix shrinks again that are potentially worth including in
             * a group.
             ','line_number':1002,'multiline':True]['text':' If the last prefix group was the best, track it. ','line_number':1040,'multiline':True]['text':' Check for starting or continuing a prefix group. ','line_number':1049,'multiline':True]['text':'
             * Prefix compression skips overflow items, ignore this slot. The last slot value is
             * only used inside a group of prefix-compressed keys, so blindly increment it, it's not
             * used unless the count of prefix-compressed keys is non-zero.
             ','line_number':1061,'multiline':True]['text':'
             * Simple values without compression can be directly referenced on the page to avoid
             * repeatedly unpacking their cells.
             *
             * The visibility information is not referenced on the page so we need to ensure that
             * the value is globally visible at the point in time where we read the page into cache.
             * Pages from checkpoint-related files that have been pushed onto the pre-fetch queue
             * will be comprised of data that is globally visible, and so the reader thread which
             * attempts to read the page into cache can skip the visible all check.
             ','line_number':1072,'multiline':True]['text':' If we find a prepare, we'll have to instantiate it in the update chain later. ','line_number':1095,'multiline':True]['text':' If the last prefix group was the best, track it. Save the best prefix group for the page. ','line_number':1101,'multiline':True]['text':'
     * Backward cursor traversal can be too slow if we're forced to process long stretches of
     * prefix-compressed keys to create every key as we walk backwards through the page, and we
     * handle that by instantiating periodic keys when backward cursor traversal enters a new page.
     * Mark the page as not needing that work if there aren't stretches of prefix-compressed keys.
     ','line_number':1109,'multiline':True]