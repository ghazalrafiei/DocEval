['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __rec_key_state_update --
 *     Update prefix and suffix compression based on the last key.
 ','line_number':11,'multiline':True]['text':'
     * If writing an overflow key onto the page, don't update the "last key" value, and leave the
     * state of prefix compression alone. (If we are currently doing prefix compression, we have a
     * key state which will continue to work, we're just skipping the key just created because it's
     * an overflow key and doesn't participate in prefix compression. If we are not currently doing
     * prefix compression, we can't start, an overflow key doesn't give us any state.)
     *
     * Additionally, if we wrote an overflow key onto the page, turn off the suffix compression of
     * row-store internal node keys. (When we split, "last key" is the largest key on the previous
     * page, and "cur key" is the first key on the next page, which is being promoted. In some cases
     * we can discard bytes from the "cur key" that are not needed to distinguish between the "last
     * key" and "cur key", compressing the size of keys on internal nodes. If we just built an
     * overflow key, we're not going to update the "last key", making suffix compression impossible
     * for the next key. Alternatively, we could remember where the last key was on the page, detect
     * it's an overflow key, read it from disk and do suffix compression, but that's too much work
     * for an unlikely event.)
     *
     * If we're not writing an overflow key on the page, update the last-key value and turn on both
     * prefix and suffix compression.
     ','line_number':20,'multiline':True]['text':'
 * __rec_cell_build_int_key --
 *     Process a key and return a WT_CELL structure and byte string to be stored on a row-store
 *     internal page.
 ','line_number':52,'multiline':True]['text':' Copy the bytes into the "current" and key buffers. ','line_number':64,'multiline':True]['text':'
 * __rec_cell_build_leaf_key --
 *     Process a key and return a WT_CELL structure and byte string to be stored on a row-store leaf
 *     page.
 ','line_number':74,'multiline':True]['text':'
         * When data is NULL, our caller has a prefix compressed key they can't use (probably
         * because they just crossed a split point). Use the full key saved when last called,
         * instead.
         ','line_number':96,'multiline':True]['text':'
         * Save a copy of the key for later reference: we use the full key for prefix-compression
         * comparisons, and if we are, for any reason, unable to use the compressed key we generate.
         ','line_number':103,'multiline':True]['text':'
         * Do prefix compression on the key. We know by definition the previous key sorts before the
         * current key, which means the keys must differ and we just need to compare up to the
         * shorter of the two keys.
         ','line_number':109,'multiline':True]['text':'
             * We can't compress out more than 256 bytes, limit the comparison to that.
             ','line_number':115,'multiline':True]['text':'
             * Prefix compression costs CPU and memory when the page is re-loaded, skip unless
             * there's a reasonable gain. Also, if the previous key was prefix compressed, don't
             * increase the prefix compression if we aren't getting a reasonable gain. (Groups of
             * keys with the same prefix can be quickly built without needing to roll forward
             * through intermediate keys or allocating memory so they can be built faster in the
             * future, for that reason try and create big groups of keys with the same prefix.)
             ','line_number':127,'multiline':True]['text':' Copy the non-prefix bytes into the key buffer. ','line_number':145,'multiline':True]['text':' Create an overflow object if the data won't fit. ','line_number':150,'multiline':True]['text':'
         * Overflow objects aren't prefix compressed -- rebuild any object that was prefix
         * compressed.
         ','line_number':152,'multiline':True]['text':'
 * __wt_bulk_insert_row --
 *     Row-store bulk insert.
 ','line_number':171,'multiline':True]['text':' Build key cell ','line_number':192,'multiline':True]['text':' Build value cell ','line_number':197,'multiline':True]['text':' Boundary: split or write the page. ','line_number':200,'multiline':True]['text':'
         * Turn off prefix compression until a full key written to the new page, and (unless already
         * working with an overflow key), rebuild the key without compression.
         ','line_number':202,'multiline':True]['text':' Copy the key/value pair onto the page. ','line_number':215,'multiline':True]['text':' Update compression state. ','line_number':227,'multiline':True]['text':'
 * __rec_row_merge --
 *     Merge in a split page.
 ','line_number':233,'multiline':True]['text':' For each entry in the split array... ','line_number':251,'multiline':True]['text':' Build the key and value cells. ','line_number':253,'multiline':True]['text':' Boundary: split or write the page. ','line_number':261,'multiline':True]['text':' Copy the key and value onto the page. ','line_number':265,'multiline':True]['text':' Update compression state. ','line_number':270,'multiline':True]['text':'
 * __wt_rec_row_int --
 *     Reconcile a row-store internal page.
 ','line_number':276,'multiline':True]['text':' -Wuninitialized ','line_number':304,'multiline':True]['text':' -Wuninitialized ','line_number':307,'multiline':True]['text':' -Wuninitialized ','line_number':309,'multiline':True]['text':'
     * Ideally, we'd never store the 0th key on row-store internal pages because it's never used
     * during tree search and there's no reason to waste the space. The problem is how we do splits:
     * when we split, we've potentially picked out several "split points" in the buffer which is
     * overflowing the maximum page size, and when the overflow happens, we go back and physically
     * split the buffer, at those split points, into new pages. It would be both difficult and
     * expensive to re-process the 0th key at each split point to be an empty key, so we don't do
     * that. However, we are reconciling an internal page for whatever reason, and the 0th key is
     * known to be useless. We truncate the key to a single byte, instead of removing it entirely,
     * it simplifies various things in other parts of the code (we don't have to special case
     * transforming the page from its disk image to its in-memory version, for example).
     ','line_number':314,'multiline':True]['text':' For each entry in the in-memory page... ','line_number':328,'multiline':True]['text':'
         * There are different paths if the key is an overflow item vs. a straight-forward on-page
         * value. If an overflow item, we would have instantiated it, and we can use that fact to
         * set things up.
         *
         * Note the cell reference and unpacked key cell are available only in the case of an
         * instantiated, off-page key, we don't bother setting them if that's not possible.
         ','line_number':330,'multiline':True]['text':'
             * Historically, we stored overflow cookies on internal pages, discard any underlying
             * blocks. We have a copy to build the key (the key was instantiated when we read the
             * page into memory), they won't be needed in the future as we're rewriting the page.
             ','line_number':344,'multiline':True]['text':'
             * Ignored child.
             ','line_number':359,'multiline':True]['text':'
             * Modified child. Empty pages are merged into the parent and discarded.
             ','line_number':366,'multiline':True]['text':'
                 * If the page is replaced, the page's modify structure has the page's address.
                 ','line_number':378,'multiline':True]['text':' Original child. ','line_number':388,'multiline':True]['text':' Fast-delete child where we write a proxy cell. ','line_number':391,'multiline':True]['text':'
         * Build the value cell, the child page's address. Addr points to an on-page cell or an
         * off-page WT_ADDR structure.
         ','line_number':395,'multiline':True]['text':' Proxy cells require additional information in the address cell. ','line_number':405,'multiline':True]['text':'
             * The transaction ids are cleared after restart. Repack the cell with new validity
             * information to flush cleared transaction ids.
             ','line_number':411,'multiline':True]['text':' The proxy cells of fast truncate pages must be handled in the above flows. ','line_number':419,'multiline':True]['text':'
         * Track the time window. The fast-truncate is a stop time window and has to be considered
         * in the internal page's aggregate information for RTS to find it.
         ','line_number':434,'multiline':True]['text':' Build key cell. Truncate any 0th key, internal pages don't need 0th keys. ','line_number':443,'multiline':True]['text':' Boundary: split or write the page. ','line_number':450,'multiline':True]['text':' Copy the key and value onto the page. ','line_number':454,'multiline':True]['text':' Update compression state. ','line_number':461,'multiline':True]['text':' Write the remnant page. ','line_number':466,'multiline':True]['text':'
 * __rec_row_zero_len --
 *     Return if a zero-length item can be written.
 ','line_number':474,'multiline':True]['text':'
     * The item must be globally visible because we're not writing anything on the page. Don't be
     * tempted to check the time window against the default here - the check is subtly different due
     * to the grouping.
     ','line_number':481,'multiline':True]['text':'
 * __rec_row_leaf_insert --
 *     Walk an insert chain, writing K/V pairs.
 ','line_number':491,'multiline':True]['text':' Temporary buffer in which to instantiate any uninstantiated keys or value items we need. ','line_number':518,'multiline':True]['text':'
             * In cases where a page has grown so large we are trying to force evict it (there is
             * content, but none of the content can be evicted), we set up fake split points, to
             * allow the page to use update restore eviction and be split into multiple reasonably
             * sized pages. Check if we are in this situation. The call to split with zero
             * additional size is odd, but split takes into account saved updates in a special way
             * for this case already.
             ','line_number':524,'multiline':True]['text':'
             * Turn off prefix and suffix compression until a full key is written into the new page.
             ','line_number':538,'multiline':True]['text':'
         * If we've selected an update, it should be flagged as being destined for the data store.
         *
         * If not, it's either because we're not doing a history store reconciliation or because the
         * update is globally visible (in which case, subsequent updates become irrelevant for
         * reconciliation).
         ','line_number':546,'multiline':True]['text':'
             * Impossible slot, there's no backing on-page item.
             ','line_number':561,'multiline':True]['text':' Take the value from the update. ','line_number':574,'multiline':True]['text':'
         * When a tombstone without a timestamp is written to disk, remove any historical versions
         * that are greater in the history store for this key.
         ','line_number':583,'multiline':True]['text':' Build key cell. ','line_number':597,'multiline':True]['text':' Boundary: split or write the page. ','line_number':601,'multiline':True]['text':'
             * Turn off prefix compression until a full key written to the new page, and (unless
             * already working with an overflow key), rebuild the key without compression.
             ','line_number':603,'multiline':True]['text':' Copy the key/value pair onto the page. ','line_number':617,'multiline':True]['text':' Update compression state. ','line_number':629,'multiline':True]['text':'
 * __rec_cell_repack --
 *     Repack a cell.
 ','line_number':638,'multiline':True]['text':' If the item is Huffman encoded, decode it. ','line_number':653,'multiline':True]['text':'
 * __wt_rec_row_leaf --
 *     Reconcile a row-store leaf page.
 ','line_number':670,'multiline':True]['text':'
     * Write any K/V pairs inserted into the page before the first from-disk key on the page.
     ','line_number':717,'multiline':True]['text':'
     * When we walk the page, we store each key we're building for the disk image in the last-key
     * buffer. There's trickiness because it's significantly faster to use a previously built key
     * plus the next key's prefix count to build the next key (rather than to call some underlying
     * function to do it from scratch). In other words, we put each key into the last-key buffer,
     * then use it to create the next key, again storing the result into the last-key buffer. If we
     * don't build a key for any reason (imagine we skip a key because the value was deleted), clear
     * the last-key buffer size so it's not used to fast-path building the next key.
     ','line_number':723,'multiline':True]['text':' Temporary buffer in which to instantiate any uninstantiated keys or value items we need. ','line_number':734,'multiline':True]['text':' For each entry in the page... ','line_number':737,'multiline':True]['text':'
         * The salvage code, on some rare occasions, wants to reconcile a page but skip some leading
         * records on the page. Because the row-store leaf reconciliation function copies keys from
         * the original disk page, this is non-trivial -- just changing the in-memory pointers isn't
         * sufficient, we have to change the WT_CELL structures on the disk page, too. It's ugly,
         * but we pass in a value that tells us how many records to skip in this case.
         ','line_number':739,'multiline':True]['text':'
         * Figure out if the key is an overflow key, and in that case unpack the cell, we'll need it
         * later.
         ','line_number':752,'multiline':True]['text':' Unpack the on-page value cell. ','line_number':764,'multiline':True]['text':' Look for an update. ','line_number':767,'multiline':True]['text':' Take the timestamp from the update or the cell. ','line_number':771,'multiline':True]['text':'
         * If we reconcile an on disk key with a globally visible stop time point and there are no
         * new updates for that key, skip writing that key.
         ','line_number':777,'multiline':True]['text':' Build value cell. ','line_number':784,'multiline':True]['text':' Clear the on-disk cell time window if it is obsolete. ','line_number':786,'multiline':True]['text':'
             * When the page was read into memory, there may not have been a value item.
             *
             * If there was a value item, check if it's a dictionary cell (a copy of another item on
             * the page). If it's a copy, we have to create a new value item as the old item might
             * have been discarded from the page.
             *
             * Repack the cell if we clear the transaction ids in the cell.
             ','line_number':789,'multiline':True]['text':'
                 * The transaction ids are cleared after restart. Repack the cell to flush the
                 * cleared transaction ids.
                 ','line_number':803,'multiline':True]['text':' Rebuild the cell. ','line_number':813,'multiline':True]['text':' Track if page has overflow items. ','line_number':827,'multiline':True]['text':'
             * If we've selected an update, it should be flagged as being destined for the data
             * store.
             *
             * If not, it's either because we're not doing a history store reconciliation or because
             * the update is globally visible (in which case, subsequent updates become irrelevant
             * for reconciliation).
             ','line_number':832,'multiline':True]['text':' The first time we find an overflow record, discard the underlying blocks. ','line_number':844,'multiline':True]['text':' Take the value from the update. ','line_number':858,'multiline':True]['text':'
                 * If this key/value pair was deleted, we're done.
                 *
                 * Overflow keys referencing discarded values are no longer useful, discard the
                 * backing blocks. Don't worry about reuse, reusing keys from a row-store page
                 * reconciliation seems unlikely enough to ignore.
                 ','line_number':863,'multiline':True]['text':'
                     * Keys are part of the name-space, we can't remove them. If an overflow key was
                     * deleted without ever having been instantiated, instantiate it now so future
                     * searches aren't surprised when it's marked as cleared in the on-disk image.
                     ','line_number':872,'multiline':True]['text':' Not creating a key so we can't use last-key as a prefix for a subsequent key. ','line_number':883,'multiline':True]['text':'
             * When a tombstone without a timestamp is written to disk, remove any historical
             * versions that are greater in the history store for this key.
             ','line_number':890,'multiline':True]['text':' Proceed with appended key/value pairs. ','line_number':900,'multiline':True]['text':'
         * Build key cell.
         *
         * If the key is an overflow key that hasn't been removed, use the original backing blocks.
         ','line_number':905,'multiline':True]['text':' Not creating a key so we can't use last-key as a prefix for a subsequent key. ','line_number':919,'multiline':True]['text':' Track if page has overflow items. ','line_number':922,'multiline':True]['text':'
             * Get the key from the page or an instantiated key, or inline building the key from a
             * previous key (it's a fast path for simple, prefix-compressed keys), or by building
             * the key from scratch.
             ','line_number':925,'multiline':True]['text':'
             * If the key has no prefix count, no prefix compression work is needed; else check for
             * a previously built key big enough cover this key's prefix count, else build from
             * scratch.
             ','line_number':941,'multiline':True]['text':'
                 * Grow the buffer as necessary as well as ensure data has been copied into local
                 * buffer space, then append the suffix to the prefix already in the buffer. Don't
                 * grow the buffer unnecessarily or copy data we don't need, truncate the item's
                 * CURRENT data length to the prefix bytes before growing the buffer.
                 ','line_number':950,'multiline':True]['text':' Boundary: split or write the page. ','line_number':968,'multiline':True]['text':'
             * If we copied address blocks from the page rather than building the actual key, we
             * have to build the key now because we are about to promote it.
             ','line_number':970,'multiline':True]['text':'
             * Turn off prefix compression until a full key written to the new page, and (unless
             * already working with an overflow key), rebuild the key without compression.
             ','line_number':979,'multiline':True]['text':' Copy the key/value pair onto the page. ','line_number':993,'multiline':True]['text':' Update compression state. ','line_number':1005,'multiline':True]['text':' Write any K/V pairs inserted into the page after this key. ','line_number':1009,'multiline':True]['text':' Write the remnant page. ','line_number':1014,'multiline':True]