['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * __tiered_flush_state --
 *     Account for flush work units so threads can know when shared storage flushing is complete.
 ','line_number':11,'multiline':True]['text':'
 * __wt_tiered_work_free --
 *     Free a work unit and account for it in the flush state.
 ','line_number':29,'multiline':True]['text':' If all work is done signal any waiting thread waiting for sync. ','line_number':41,'multiline':True]['text':'
 * __wt_tiered_remove_work --
 *     Remove all work on the queue that applies to the given tiered handle.
 ','line_number':47,'multiline':True]['text':' Remove and free any entry for this tiered handle. ','line_number':62,'multiline':True]['text':'
 * __tiered_push_work_internal --
 *     Push a work unit to the queue. Assumes it is passed an already filled out structure.
 ','line_number':74,'multiline':True]['text':'
 * __wt_tiered_requeue_work --
 *     Push an existing work unit to the queue. Assumes it was previously returned from one of the
 *     get functions, and it is being re-queued.
 ','line_number':94,'multiline':True]['text':' The dhandle was marked in use when the entry was first made, don't do that here. ','line_number':102,'multiline':True]['text':'
 * __tiered_push_new_work --
 *     Push a newly created work unit to the queue. Assumes it is passed an already filled out
 *     structure.
 ','line_number':107,'multiline':True]['text':'
     * Bump the in use count lock on the dhandle, this is kept until the work unit is freed. This
     * prevents an otherwise idle dhandle from being swept and freed. We do not need to hold the
     * dhandle list lock here because our session currently holds a reference to the tiered entry
     * when pushing this work and the handle cannot be swept out from under us.
     ','line_number':115,'multiline':True]['text':'
 * __wt_tiered_pop_work --
 *     Pop a work unit of the given type from the queue. If a maximum value is given, only return a
 *     work unit that is less than the maximum value. The caller is responsible for freeing the
 *     returned work unit structure.
 ','line_number':126,'multiline':True]['text':'
 * __wt_tiered_flush_work_wait --
 *     Wait for all flush work units in the work queue to be processed.
 ','line_number':160,'multiline':True]['text':' We are done if we don't find any work units or exceed the timeout. ','line_number':192,'multiline':True]['text':'
 * __wt_tiered_get_flush_finish --
 *     Get the first flush_finish work unit from the queue. The id information cannot change between
 *     our caller and here. The caller is responsible for freeing the work unit.
 ','line_number':197,'multiline':True]['text':'
 * __wt_tiered_get_flush --
 *     Get the first flush work unit from the queue. If a non zero generation value is given, only
 *     return work units less than that value. The id information cannot change between our caller
 *     and here. The caller is responsible for freeing the work unit.
 ','line_number':209,'multiline':True]['text':'
 * __wt_tiered_get_remove_local --
 *     Get a remove local work unit if it is less than the time given. The caller is responsible for
 *     freeing the work unit.
 ','line_number':222,'multiline':True]['text':'
 * __wt_tiered_get_remove_shared --
 *     Get a remove shared work unit. The caller is responsible for freeing the work unit.
 ','line_number':234,'multiline':True]['text':'
 * __wt_tiered_put_flush_finish --
 *     Add a flush_finish work unit to the queue.
 ','line_number':245,'multiline':True]['text':'
 * __wt_tiered_put_remove_local --
 *     Add a remove local work unit for the given ID to the queue.
 ','line_number':262,'multiline':True]['text':' Put a work unit in the queue with the time this object expires. ','line_number':277,'multiline':True]['text':'
 * __wt_tiered_put_remove_shared --
 *     Add a remove shared work unit for the given ID to the queue.
 ','line_number':284,'multiline':True]['text':'
 * __wt_tiered_put_flush --
 *     Add a flush work unit to the queue. We're single threaded so the tiered structure's id
 *     information cannot change between our caller and here.
 ','line_number':301,'multiline':True]