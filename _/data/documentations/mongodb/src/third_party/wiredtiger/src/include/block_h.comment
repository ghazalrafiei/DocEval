['text':'-
 * Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 ','line_number':1,'multiline':True]['text':'
 * WiredTiger's block manager interface.
 ','line_number':9,'multiline':True]['text':'
 * The file's description is written into the first block of the file, which means we can use an
 * offset of 0 as an invalid offset.
 ','line_number':13,'multiline':True]['text':'
 * The block manager maintains three per-checkpoint extent lists:
 *	alloc:	 the extents allocated in this checkpoint
 *	avail:	 the extents available for allocation
 *	discard: the extents freed in this checkpoint
 *
 * An extent list is based on two skiplists: first, a by-offset list linking
 * WT_EXT elements and sorted by file offset (low-to-high), second, a by-size
 * list linking WT_SIZE elements and sorted by chunk size (low-to-high).
 *
 * Additionally, each WT_SIZE element on the by-size has a skiplist of its own,
 * linking WT_EXT elements and sorted by file offset (low-to-high).  This list
 * has an entry for extents of a particular size.
 *
 * The trickiness is each individual WT_EXT element appears on two skiplists.
 * In order to minimize allocation calls, we allocate a single array of WT_EXT
 * pointers at the end of the WT_EXT structure, for both skiplists, and store
 * the depth of the skiplist in the WT_EXT structure.  The skiplist entries for
 * the offset skiplist start at WT_EXT.next[0] and the entries for the size
 * skiplist start at WT_EXT.next[WT_EXT.depth].
 *
 * One final complication: we only maintain the per-size skiplist for the avail
 * list, the alloc and discard extent lists are not searched based on size.
 ','line_number':19,'multiline':True]['text':'
 * WT_EXTLIST --
 *	An extent list.
 ','line_number':44,'multiline':True]['text':' Name ','line_number':49,'multiline':True]['text':' Byte count ','line_number':51,'multiline':True]['text':' Entry count ','line_number':52,'multiline':True]['text':' Written object ID ','line_number':54,'multiline':True]['text':' Written extent offset ','line_number':55,'multiline':True]['text':' Written extent checksum ','line_number':56,'multiline':True]['text':' Written extent size ','line_number':57,'multiline':True]['text':' Maintain per-size skiplist ','line_number':59,'multiline':True]['text':' Cached last element ','line_number':61,'multiline':True]['text':' Size/offset skiplists ','line_number':63,'multiline':True]['text':'
 * WT_EXT --
 *	Encapsulation of an extent, either allocated or freed within the
 * checkpoint.
 ','line_number':67,'multiline':True]['text':' Extent's file offset ','line_number':73,'multiline':True]['text':' Extent's Size ','line_number':74,'multiline':True]['text':' Skip list depth ','line_number':76,'multiline':True]['text':'
     * Variable-length array, sized by the number of skiplist elements. The first depth array
     * entries are the address skiplist elements, the second depth array entries are the size
     * skiplist.
     ','line_number':78,'multiline':True]['text':' Offset, size skiplists ','line_number':83,'multiline':True]['text':'
 * WT_SIZE --
 *	Encapsulation of a block size skiplist entry.
 ','line_number':86,'multiline':True]['text':' Size ','line_number':91,'multiline':True]['text':' Skip list depth ','line_number':93,'multiline':True]['text':' Per-size offset skiplist ','line_number':95,'multiline':True]['text':'
     * We don't use a variable-length array for the size skiplist, we want to be able to use any
     * cached WT_SIZE structure as the head of a list, and we don't know the related WT_EXT
     * structure's depth.
     ','line_number':97,'multiline':True]['text':' Size skiplist ','line_number':102,'multiline':True]['text':'
 * WT_EXT_FOREACH --
 *	Walk a block manager skiplist.
 * WT_EXT_FOREACH_OFF --
 *	Walk a block manager skiplist where the WT_EXT.next entries are offset
 * by the depth.
 ','line_number':105,'multiline':True]['text':'
 * WT_EXT_FOREACH_FROM_OFFSET_INCL --
 *	Walk a by-offset skiplist from the given offset, starting with the extent that contains the
 * given offset if available.
 ','line_number':117,'multiline':True]['text':'
 * Checkpoint cookie: carries a version number as I don't want to rev the schema
 * file version should the default block manager checkpoint format change.
 *
 * Version #1 checkpoint cookie format:
 *	[1] [root addr] [alloc addr] [avail addr] [discard addr]
 *	    [file size] [checkpoint size] [write generation]
 ','line_number':126,'multiline':True]['text':' Checkpoint format version ','line_number':134,'multiline':True]['text':' Identify a list ','line_number':135,'multiline':True]['text':'
 * There are two versions of the extent list blocks: the original, and a second version where
 * current checkpoint information is appended to the avail extent list.
 ','line_number':137,'multiline':True]['text':' Original version ','line_number':141,'multiline':True]['text':' Checkpoint in avail output ','line_number':142,'multiline':True]['text':'
 * Maximum buffer required to store a checkpoint: 1 version byte followed by
 * 14 packed 8B values.
 ','line_number':144,'multiline':True]['text':' Version ','line_number':151,'multiline':True]['text':' The root ','line_number':154,'multiline':True]['text':' Extents allocated ','line_number':157,'multiline':True]['text':' Extents available ','line_number':158,'multiline':True]['text':' Extents discarded ','line_number':159,'multiline':True]['text':' Checkpoint file size ','line_number':161,'multiline':True]['text':' Checkpoint byte count ','line_number':162,'multiline':True]['text':' Checkpoint free'd extents ','line_number':164,'multiline':True]['text':'
     * Checkpoint archive: the block manager may potentially free a lot of memory from the
     * allocation and discard extent lists when checkpoint completes. Put it off until the
     * checkpoint resolves, that lets the upper btree layer continue eviction sooner.
     ','line_number':166,'multiline':True]['text':' Checkpoint archive ','line_number':171,'multiline':True]['text':' Checkpoint archive ','line_number':172,'multiline':True]['text':'
 * WT_BM --
 *	Block manager handle, references a single checkpoint in a btree.
 ','line_number':175,'multiline':True]['text':' Methods ','line_number':180,'multiline':True]['text':' Underlying file. For a multi-handle tree this will be the writable file. ','line_number':217,'multiline':True]['text':' If doing a tier switch, this is going to be the new file. ','line_number':218,'multiline':True]['text':' If a tier switch was done, this was the old file. ','line_number':219,'multiline':True]['text':' Mapped region ','line_number':221,'multiline':True]['text':'
     * For trees, such as tiered tables, that are allowed to have more than one backing file or
     * object, we maintain an array of the block handles used by the tree. We use a reader-writer
     * mutex to protect the array. We lock it for reading when looking for a handle in the array and
     * lock it for writing when adding or removing handles in the array.
     ','line_number':225,'multiline':True]['text':' Array of block handles ','line_number':232,'multiline':True]['text':' Size of handle array ','line_number':233,'multiline':True]['text':' Lock for block handle array ','line_number':234,'multiline':True]['text':' Next open slot ','line_number':235,'multiline':True]['text':'
     * There's only a single block manager handle that can be written, all others are checkpoints.
     ','line_number':237,'multiline':True]['text':' The live system ','line_number':240,'multiline':True]['text':'
 * WT_BLOCK --
 *	Block manager handle, references a single file.
 ','line_number':243,'multiline':True]['text':' Name ','line_number':248,'multiline':True]['text':' Object id ','line_number':249,'multiline':True]['text':' References ','line_number':250,'multiline':True]['text':' Linked list of handles ','line_number':252,'multiline':True]['text':' Hashed list of handles ','line_number':253,'multiline':True]['text':' Backing file handle ','line_number':255,'multiline':True]['text':' File size ','line_number':256,'multiline':True]['text':' File extended size ','line_number':257,'multiline':True]['text':' File extend chunk size ','line_number':258,'multiline':True]['text':' Created during incremental backup ','line_number':260,'multiline':True]['text':' fsync the handle after the next checkpoint ','line_number':261,'multiline':True]['text':' Underlying file was opened only for reading ','line_number':262,'multiline':True]['text':' Configuration information, set when the file is opened. ','line_number':264,'multiline':True]['text':' Allocation is first-fit ','line_number':265,'multiline':True]['text':' Allocation size ','line_number':266,'multiline':True]['text':' System buffer cache flush max ','line_number':267,'multiline':True]['text':' Header length ','line_number':271,'multiline':True]['text':'
     * There is only a single checkpoint in a file that can be written; stored here, only accessed
     * by one WT_BM handle.
     ','line_number':273,'multiline':True]['text':' Live checkpoint lock ','line_number':277,'multiline':True]['text':' Live checkpoint ','line_number':278,'multiline':True]['text':' Live system is open ','line_number':279,'multiline':True]['text':' Live checkpoint status ','line_number':280,'multiline':True]['text':' Final live checkpoint write ','line_number':287,'multiline':True]['text':' Compaction support ','line_number':289,'multiline':True]['text':' Percent to compact ','line_number':290,'multiline':True]['text':' Bytes reviewed ','line_number':291,'multiline':True]['text':' Bytes rewritten ','line_number':292,'multiline':True]['text':' Internal pages reviewed ','line_number':293,'multiline':True]['text':' Pages reviewed ','line_number':294,'multiline':True]['text':' Pages rewritten ','line_number':295,'multiline':True]['text':' The expected number of pages to rewrite ','line_number':296,'multiline':True]['text':' Pages skipped ','line_number':297,'multiline':True]['text':' Session compacting ','line_number':298,'multiline':True]['text':' Salvage support ','line_number':300,'multiline':True]['text':' Salvage file offset ','line_number':301,'multiline':True]['text':' Verification support ','line_number':303,'multiline':True]['text':' If performing verification ','line_number':304,'multiline':True]['text':' Print out file layout information ','line_number':305,'multiline':True]['text':' Fail hard on any error ','line_number':306,'multiline':True]['text':' Checkpoint's file size ','line_number':307,'multiline':True]['text':' Verification allocation list ','line_number':308,'multiline':True]['text':' Maximum frags in the file ','line_number':309,'multiline':True]['text':' Per-file frag tracking list ','line_number':310,'multiline':True]['text':' Per-checkpoint frag tracking list ','line_number':311,'multiline':True]['text':' Multi-file support ','line_number':313,'multiline':True]['text':' Count of active read requests using this block handle ','line_number':314,'multiline':True]['text':'
 * WT_BLOCK_DESC --
 *	The file's description.
 ','line_number':317,'multiline':True]['text':' 00-03: Magic number ','line_number':323,'multiline':True]['text':' 04-05: Major version ','line_number':325,'multiline':True]['text':' 06-07: Minor version ','line_number':327,'multiline':True]['text':' 08-11: Description block checksum ','line_number':329,'multiline':True]['text':' 12-15: Padding ','line_number':331,'multiline':True]['text':'
 * WT_BLOCK_DESC_SIZE is the expected structure size -- we verify the build to ensure the compiler
 * hasn't inserted padding (padding won't cause failure, we reserve the first allocation-size block
 * of the file for this information, but it would be worth investigation, regardless).
 ','line_number':333,'multiline':True]['text':'
 * __wt_block_desc_byteswap --
 *     Handle big- and little-endian transformation of a description block.
 ','line_number':340,'multiline':True]['text':'
 * WT_BLOCK_HEADER --
 *	Blocks have a common header, a WT_PAGE_HEADER structure followed by a
 * block-manager specific structure: WT_BLOCK_HEADER is WiredTiger's default.
 ','line_number':357,'multiline':True]['text':'
     * We write the page size in the on-disk page header because it makes salvage easier. (If we
     * don't know the expected page length, we'd have to read increasingly larger chunks from the
     * file until we find one that checksums, and that's going to be harsh given WiredTiger's
     * potentially large page sizes.)
     ','line_number':363,'multiline':True]['text':' 00-03: on-disk page size ','line_number':369,'multiline':True]['text':'
     * Page checksums are stored in two places. First, the page checksum is written within the
     * internal page that references it as part of the address cookie. This is done to improve the
     * chances of detecting not only disk corruption but other bugs (for example, overwriting a page
     * with another valid page image). Second, a page's checksum is stored in the disk header. This
     * is for salvage, so salvage knows it has found a page that may be useful.
     ','line_number':371,'multiline':True]['text':' 04-07: checksum ','line_number':378,'multiline':True]['text':'
 * No automatic generation: flag values cannot change, they're written to disk.
 ','line_number':380,'multiline':True]['text':' Block data is part of the checksum ','line_number':383,'multiline':True]['text':' 08: flags ','line_number':384,'multiline':True]['text':'
     * End the structure with 3 bytes of padding: it wastes space, but it leaves the structure
     * 32-bit aligned and having a few bytes to play with in the future can't hurt.
     ','line_number':386,'multiline':True]['text':' 09-11: unused padding ','line_number':390,'multiline':True]['text':'
 * WT_BLOCK_HEADER_SIZE is the number of bytes we allocate for the structure: if the compiler
 * inserts padding it will break the world.
 ','line_number':392,'multiline':True]['text':'
 * __wt_block_header_byteswap_copy --
 *     Handle big- and little-endian transformation of a header block, copying from a source to a
 *     target.
 ','line_number':398,'multiline':True]['text':'
 * __wt_block_header_byteswap --
 *     Handle big- and little-endian transformation of a header block.
 ','line_number':413,'multiline':True]['text':'
 * WT_BLOCK_HEADER_BYTE
 * WT_BLOCK_HEADER_BYTE_SIZE --
 *	The first usable data byte on the block (past the combined headers).
 ','line_number':427,'multiline':True]['text':'
 * We don't compress or encrypt the block's WT_PAGE_HEADER or WT_BLOCK_HEADER structures because we
 * need both available with decompression or decryption. We use the WT_BLOCK_HEADER checksum and
 * on-disk size during salvage to figure out where the blocks are, and we use the WT_PAGE_HEADER
 * in-memory size during decompression and decryption to know how large a target buffer to allocate.
 * We can only skip the header information when doing encryption, but we skip the first 64B when
 * doing compression; a 64B boundary may offer better alignment for the underlying compression
 * engine, and skipping 64B shouldn't make any difference in terms of compression efficiency.
 ','line_number':435,'multiline':True]['text':'
 * __wt_block_header --
 *     Return the size of the block-specific header.
 ','line_number':447,'multiline':True]