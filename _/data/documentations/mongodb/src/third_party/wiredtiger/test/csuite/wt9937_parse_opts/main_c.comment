['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * This is a unit test for the testutil_parse_opts and testutil_parse_single_opt functions.
 *
 * In one part of the test, we do a straightforward test of the testutil_parse_opts function. This
 * function is used by test programs to parse a fixed set of commonly used options, for example
 * ".... -h home_dir -T 3 -v" sets the home directory as indicated, the thread count to 3 and turns
 * on verbose. Options are parsed and a TEST_OPTS structure is modified accordingly. To test this,
 * we have a set of simulated command lines and our expected contents of the TEST_OPTS structure.
 * These command lines and expected TEST_OPTS appear as the first entries in the driver array below.
 *
 * In the second part of the test, we want to parse additional options. Many test programs need some
 * options from the fixed set provided by the testutil_parse_opts function, but perhaps need
 * additional options. We have in mind a fictional test program that wants to use the standard
 * testutil parsing for options 'b', 'P', 'T', and 'v', and has added its own options: 'c', 'd',
 * 'e', and 'f', which it stores in a struct below called FICTIONAL_OPTS. Note that its 'd' option
 * overrides the standard 'd' option. To do this sort of "extended" parsing, we need to use a
 * particular idiom that uses testutil_parse_begin_opt, getopt, testutil_parse_single_opt, and
 * testutil_parse_end_opt, as seen in the check function.
 ','line_number':30,'multiline':True]['text':' option argument ','line_number':50,'multiline':True]['text':' argv position, needed to reset __wt_getopt parser ','line_number':51,'multiline':True]['text':' needed to reset the parser internal state ','line_number':52,'multiline':True]['text':'
 * This structure aids in testing testutil_parse_single_opt. The options here only have meaning to
 * our fictional test program.
 ','line_number':54,'multiline':True]['text':' -c option, takes a string argument ','line_number':59,'multiline':True]['text':' -d option ','line_number':60,'multiline':True]['text':' -e option, it's fictional! ','line_number':61,'multiline':True]['text':' -f option, takes an int argument ','line_number':62,'multiline':True]['text':'
 * The values in this structure map directly to the values in TEST_OPTS that we expect to be
 * modified by this program.
 ','line_number':65,'multiline':True]['text':' Build directory path ','line_number':70,'multiline':True]['text':' Tiered storage source ','line_number':71,'multiline':True]['text':' Random seed for data ops ','line_number':72,'multiline':True]['text':' Random seed for read ops ','line_number':73,'multiline':True]['text':' Configure tiered storage ','line_number':74,'multiline':True]['text':' Run in verbose mode ','line_number':75,'multiline':True]['text':' Number of threads ','line_number':76,'multiline':True]['text':'
 * This is an indicator that we will expect any value other than zero.
 ','line_number':79,'multiline':True]['text':'
 * This drives the testing. For each given command_line, there is a matching expected TEST_OPTS
 * structure. When argv[0] is "parse_opts", we are driving testutil_parse_opts. If argv[0] is
 * "parse_single_opt", then we are parsing some of our "own" options, put into an FICTIONAL_OPTS
 * struct, and using testutil_parse_single_opt to parse any we don't recognize, those are put into
 * TEST_OPTS.
 ','line_number':84,'multiline':True]['text':'
 * We've chosen tests to cover:
 *  - string options both appearing as "-b option" and "-boption"
 *  - int options also appearing both as "-T 21" and "-T21"
 *  - tiered storage multiple character options starting with "-P", like "-PT" and "-Po name".
 *  - flag options like "-v".
 *  - our set of "fictional" arguments.
 *
 ','line_number':97,'multiline':True]['text':'
   * If -PT is used, the tiered_storage source is set to dir_store, even if -Po is not used. Also
   * when -PT is used, random seeds are initialized to some non-zero value.
   ','line_number':114,'multiline':True]['text':' Setting random seeds can be done together or separately. ','line_number':127,'multiline':True]['text':'
   * From here on, we are using some "extended" options, see previous comment. We set the argv[0] to
   * "parse_single_opt" to indicate to use the extended parsing idiom.
   ','line_number':137,'multiline':True]['text':'
 * report --
 *     Show any changed fields in the options.
 ','line_number':157,'multiline':True]['text':'
 * check --
 *     Call testutil_parse_opts or use extended parsing with testutil_parse_single_opt and return
 *     options.
 ','line_number':198,'multiline':True]['text':' This may be called multiple times, so reset the __wt_getopt parser. ','line_number':213,'multiline':True]['text':' Regular test of testutil_parse_opts, using only the options that it provides. ','line_number':222,'multiline':True]['text':'
         * Test of extended parsing, in which we'll parse some options that we know about and rely
         * on testutil_parse_single_opt to cover the options it knows about.
         ','line_number':226,'multiline':True]['text':'
         * For this part of the testing, we're parsing options for a fictional test program. This
         * test program wants to have the standard testutil parsing for options 'b', 'P', 'T', and
         * 'v', and has added its own options: 'c', 'd', 'e', and 'f'. We use the following idiom to
         * accomplish this.
         ','line_number':232,'multiline':True]['text':' "b:P:T:v" are the only options we want testutil to handle. ','line_number':239,'multiline':True]['text':' We list the entire set of options we want to support when we call getopt. ','line_number':242,'multiline':True]['text':' The option is either one that we're asking testutil to support, or illegal. ','line_number':258,'multiline':True]['text':'
         * We are finished parsing, so ask testutil to finish any extra processing of the options.
         ','line_number':265,'multiline':True]['text':'
 * verify_expect --
 *     Verify the returned options against the expected options.
 ','line_number':272,'multiline':True]['text':'
 * Random seeds are treated specially. If we've marked the expected value to be NONZERO, that's all
 * we need to confirm.
 ','line_number':293,'multiline':True]['text':'
     * opts->home is always set, even without -h on the command line, so don't check it here. If
     * tiered_storage is set then build_dir is deduced from the test program.
     ','line_number':305,'multiline':True]['text':'
 * cleanup --
 *     Clean up allocated resources.
 ','line_number':332,'multiline':True]['text':' Nothing to clean up here. ','line_number':339,'multiline':True]['text':'
 * main --
 *     Unit test for test utility functions.
 ','line_number':344,'multiline':True]['text':'
         * The first arg must be --parse_opt or --parse_single_opt, we'll make argv[0] point to
         * "parse_opts" or "parse_single_opt" so our "check" parser knows what kind of parsing to be
         * done. This path is not used by test scripts, but can be useful for manual testing.
         ','line_number':359,'multiline':True]['text':' skip past -- ','line_number':373,'multiline':True]['text':'
         * For normal testing, we run the whole test, parsing each command line from the driver
         * array.
         ','line_number':379,'multiline':True]['text':'
             * Fill our expected test utility options array with only the subset of values we are
             * expecting to be modified. We expect all the other values to be zeroed or NULL.
             ','line_number':388,'multiline':True]