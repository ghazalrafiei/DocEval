['text':' Copyright (c) 2008-2012 testtools developers. See LICENSE for details.','line_number':1,'multiline':False]['text':' A result is considered successful before any tests are run.','line_number':138,'multiline':False]['text':' addError fails the test run.','line_number':143,'multiline':False]['text':' addFailure fails the test run.','line_number':151,'multiline':False]['text':' addSuccess does not fail the test run.','line_number':159,'multiline':False]['text':' Calling addExpectedFailure(test, exc_info) completes ok.','line_number':175,'multiline':False]['text':' addExpectedFailure does not fail the test run.','line_number':181,'multiline':False]['text':' Calling addSkip(test, reason) completes ok.','line_number':189,'multiline':False]['text':' addSkip does not fail the test run.','line_number':195,'multiline':False]['text':' Calling addUnexpectedSuccess(test) completes ok.','line_number':203,'multiline':False]['text':' addUnexpectedSuccess does not fail the test run in Python 2.7.','line_number':209,'multiline':False]['text':' Calling startTestRun completes ok.','line_number':217,'multiline':False]['text':' Results initially have no tags.','line_number':241,'multiline':False]['text':' Tags are added using 'tags' and thus become visible in','line_number':247,'multiline':False]['text':' 'current_tags'.','line_number':248,'multiline':False]['text':' Tags are removed using 'tags'.','line_number':255,'multiline':False]['text':' startTestRun makes a new test run, and thus clears all the tags.','line_number':263,'multiline':False]['text':' Tags can be added after a test has run.','line_number':271,'multiline':False]['text':' Tags added during a test run are then reverted once that test has','line_number':280,'multiline':False]['text':' finished.','line_number':281,'multiline':False]['text':' Tags can be removed during tests.','line_number':292,'multiline':False]['text':' Tags removed during tests are restored once that test has finished.','line_number':301,'multiline':False]['text':' Calling addExpectedFailure(test, details=xxx) completes ok.','line_number':316,'multiline':False]['text':' Calling addError(test, details=xxx) completes ok.','line_number':322,'multiline':False]['text':' Calling addFailure(test, details=xxx) completes ok.','line_number':328,'multiline':False]['text':' Calling addSkip(test, reason) completes ok.','line_number':334,'multiline':False]['text':' Calling addUnexpectedSuccess(test) completes ok.','line_number':340,'multiline':False]['text':' Calling addSuccess(test) completes ok.','line_number':346,'multiline':False]['text':' addUnexpectedSuccess fails test run in testtools.','line_number':359,'multiline':False]['text':' DetailsContract because ExtendedToStreamDecorator follows Python for','line_number':477,'multiline':False]['text':' uxsuccess handling.','line_number':478,'multiline':False]['text':' Test parameter combinations when files are being emitted.','line_number':497,'multiline':False]['text':' Tests non-file attachment parameter combinations.','line_number':515,'multiline':False]['text':' Testtools was making bad mime types, this tests that the specific','line_number':771,'multiline':False]['text':' corruption is catered for.','line_number':772,'multiline':False]['text':' wasSuccessful returns False if any of','line_number':920,'multiline':False]['text':' failures/errors is non-empty.','line_number':921,'multiline':False]['text':' terminal successful codes.','line_number':942,'multiline':False]['text':' Existence is terminal but doesn't count as 'running' a test.','line_number':950,'multiline':False]['text':' Tests inprogress at stopTestRun trigger a failure.','line_number':954,'multiline':False]['text':' interim state detection handles route codes - while duplicate ids in','line_number':963,'multiline':False]['text':' one run is undesirable, it may happen (e.g. with repeated tests).','line_number':964,'multiline':False]['text':' when skip is seen, a synthetic test is reported with reason captured','line_number':973,'multiline':False]['text':' from the 'reason' file attachment if any.','line_number':974,'multiline':False]['text':' when fail is seen, a synthetic test is reported with all files','line_number':1011,'multiline':False]['text':' attached shown as the message.','line_number':1012,'multiline':False]['text':' when xfail is seen, a synthetic test is reported with all files','line_number':1022,'multiline':False]['text':' attached shown as the message.','line_number':1023,'multiline':False]['text':' when uxsuccess is seen, a synthetic test is reported.','line_number':1033,'multiline':False]['text':' Calling addSkip on a TestResult records the test that was skipped in','line_number':1062,'multiline':False]['text':' its skip_reasons dict.','line_number':1063,'multiline':False]['text':' Calling _now() looks up the time.','line_number':1089,'multiline':False]['text':' Set an explicit datetime, which gets returned from then on.','line_number':1092,'multiline':False]['text':' go back to looking it up.','line_number':1096,'multiline':False]['text':' During the testtools test run, we show our levels of the stack,','line_number':1107,'multiline':False]['text':' because we want to be able to use our test suite to debug our own','line_number':1108,'multiline':False]['text':' code.','line_number':1109,'multiline':False]['text':' subunit upcalls to TestResult._exc_info_to_unicode, so we need to','line_number':1153,'multiline':False]['text':' make sure that it's there.','line_number':1154,'multiline':False]['text':'','line_number':1155,'multiline':False]['text':' See <https://bugs.launchpad.net/testtools/+bug/929063>.','line_number':1156,'multiline':False]['text':' Initializing a `MultiTestResult` doesn't do anything to its','line_number':1187,'multiline':False]['text':' `TestResult`s.','line_number':1188,'multiline':False]['text':' Reading reads from the first one - arbitrary choice.','line_number':1192,'multiline':False]['text':' Writing writes to all.','line_number':1198,'multiline':False]['text':' NB: result1 is not stopped: MultiTestResult has to combine the','line_number':1206,'multiline':False]['text':' values.','line_number':1207,'multiline':False]['text':' Calling `startTest` on a `MultiTestResult` calls `startTest` on all','line_number':1211,'multiline':False]['text':' its `TestResult`s.','line_number':1212,'multiline':False]['text':' Calling `stopTest` on a `MultiTestResult` calls `stopTest` on all','line_number':1222,'multiline':False]['text':' its `TestResult`s.','line_number':1223,'multiline':False]['text':' Calling `addSkip` on a `MultiTestResult` calls addSkip on its','line_number':1228,'multiline':False]['text':' results.','line_number':1229,'multiline':False]['text':' Calling `addSuccess` on a `MultiTestResult` calls `addSuccess` on','line_number':1235,'multiline':False]['text':' all its `TestResult`s.','line_number':1236,'multiline':False]['text':' Calling `done` on a `MultiTestResult` calls `done` on all its','line_number':1241,'multiline':False]['text':' `TestResult`s.','line_number':1242,'multiline':False]['text':' Calling `addFailure` on a `MultiTestResult` calls `addFailure` on','line_number':1247,'multiline':False]['text':' all its `TestResult`s.','line_number':1248,'multiline':False]['text':' Calling `addError` on a `MultiTestResult` calls `addError` on all','line_number':1254,'multiline':False]['text':' its `TestResult`s.','line_number':1255,'multiline':False]['text':' Calling `startTestRun` on a `MultiTestResult` forwards to all its','line_number':1261,'multiline':False]['text':' `TestResult`s.','line_number':1262,'multiline':False]['text':' Calling `stopTestRun` on a `MultiTestResult` forwards to all its','line_number':1267,'multiline':False]['text':' `TestResult`s.','line_number':1268,'multiline':False]['text':' `MultiTestResult.stopTestRun` returns a tuple of all of the return','line_number':1273,'multiline':False]['text':' values the `stopTestRun`s that it forwards to.','line_number':1274,'multiline':False]['text':' Calling `tags` on a `MultiTestResult` calls `tags` on all its','line_number':1284,'multiline':False]['text':' `TestResult`s.','line_number':1285,'multiline':False]['text':' the time call is dispatched, not eaten by the base class','line_number':1292,'multiline':False]['text':' startTest and stopTest are not forwarded because they need to be','line_number':1434,'multiline':False]['text':' batched.','line_number':1435,'multiline':False]['text':' Tags need to be batched for each test, so they aren't forwarded','line_number':1442,'multiline':False]['text':' until a test runs.','line_number':1443,'multiline':False]['text':' Tags specified outside of a test result are global. When a test's','line_number':1449,'multiline':False]['text':' results are finally forwarded, we send through these global tags','line_number':1450,'multiline':False]['text':' *as* test specific tags, because as a multiplexer there should be no','line_number':1451,'multiline':False]['text':' way for a global tag on an input stream to affect tests from other','line_number':1452,'multiline':False]['text':' streams - we can just always issue test local tags.','line_number':1453,'multiline':False]['text':' Multiple calls to tags() in a global context are buffered until the','line_number':1470,'multiline':False]['text':' next test completes and are issued as part of of the test context,','line_number':1471,'multiline':False]['text':' because they cannot be issued until the output result is locked.','line_number':1472,'multiline':False]['text':' The sample data shows them being merged together, this is, strictly','line_number':1473,'multiline':False]['text':' speaking incidental - they could be issued separately (in-order) and','line_number':1474,'multiline':False]['text':' still be legitimate.','line_number':1475,'multiline':False]['text':' Any tags set within a test context are forwarded in that test','line_number':1493,'multiline':False]['text':' context when the result is finally forwarded.  This means that the','line_number':1494,'multiline':False]['text':' tags for the test are part of the atomic message communicating','line_number':1495,'multiline':False]['text':' everything about that test.','line_number':1496,'multiline':False]['text':' A tag set during a test is local to that test and is not set during','line_number':1514,'multiline':False]['text':' the tests that follow.','line_number':1515,'multiline':False]['text':' Calls to startTestRun are not batched, because we are only','line_number':1544,'multiline':False]['text':' interested in sending tests atomically, not the whole run.','line_number':1545,'multiline':False]['text':' Calls to stopTestRun are not batched, because we are only','line_number':1552,'multiline':False]['text':' interested in sending tests atomically, not the whole run.','line_number':1553,'multiline':False]['text':' Once we receive an addError event, we forward all of the events for','line_number':1560,'multiline':False]['text':' that test, as we now know that test is complete.','line_number':1561,'multiline':False]['text':' Once we receive an addFailure event, we forward all of the events','line_number':1579,'multiline':False]['text':' for that test, as we now know that test is complete.','line_number':1580,'multiline':False]['text':' Once we receive an addSkip event, we forward all of the events for','line_number':1598,'multiline':False]['text':' that test, as we now know that test is complete.','line_number':1599,'multiline':False]['text':' Once we receive an addSuccess event, we forward all of the events','line_number':1617,'multiline':False]['text':' for that test, as we now know that test is complete.','line_number':1618,'multiline':False]['text':' Even if there are multiple ThreadsafeForwardingResults forwarding to','line_number':1635,'multiline':False]['text':' the same target result, the target result only receives the complete','line_number':1636,'multiline':False]['text':' events for one test at a time.','line_number':1637,'multiline':False]['text':' test2 finishes first, and so is flushed first.','line_number':1653,'multiline':False]['text':' test1 finishes next, and thus follows.','line_number':1659,'multiline':False]['text':' If an incoming "gone" tag isn't currently tagged one way or the','line_number':1671,'multiline':False]['text':' other, add it to the "gone" tags.','line_number':1672,'multiline':False]['text':' If one of the incoming "gone" tags is one of the existing "new"','line_number':1680,'multiline':False]['text':' tags, then it overrides the "new" tag, leaving it marked as "gone".','line_number':1681,'multiline':False]['text':' If one of the incoming "new" tags is currently marked as "gone",','line_number':1696,'multiline':False]['text':' then it overrides the "gone" tag, leaving it marked as "new".','line_number':1697,'multiline':False]['text':' -> None','line_number':1791,'multiline':False]['text':' -> 1','line_number':1792,'multiline':False]['text':' -> fallback as-is.','line_number':1793,'multiline':False]['text':' This dict is /not/ convertible - thats deliberate, as it should','line_number':1911,'multiline':False]['text':' not hit the conversion code path.','line_number':1912,'multiline':False]['text':' The conversion is a done using RemoteError and the string contents','line_number':1941,'multiline':False]['text':' of the text types in the details dict.','line_number':1942,'multiline':False]['text':' calling some outcome with the legacy exc_info style api (no keyword','line_number':1974,'multiline':False]['text':' parameters) gets passed through.','line_number':1975,'multiline':False]['text':' calling some outcome with the legacy exc_info style api (no keyword','line_number':1984,'multiline':False]['text':' parameters) gets passed through.','line_number':1985,'multiline':False]['text':' setting it should write it to the backing result','line_number':2022,'multiline':False]['text':' Unicode encodings only','line_number':2319,'multiline':False]['text':' In ISO 2022 encodings','line_number':2320,'multiline':False]['text':' In ISO 8859 encodings','line_number':2321,'multiline':False]['text':' Everything but Jython shows syntax errors on the current character','line_number':2325,'multiline':False]['text':' Need to pre-check that the coding is valid or codecs.open drops','line_number':2340,'multiline':False]['text':' the file without closing it which breaks non-refcounted pythons','line_number':2341,'multiline':False]['text':' Older Python 2 versions don't see a coding declaration in a','line_number':2364,'multiline':False]['text':' docstring so it has to be in a comment, but then we can't','line_number':2365,'multiline':False]['text':' workaround bug: <http://ironpython.codeplex.com/workitem/26940>','line_number':2366,'multiline':False]['text':' A __unicode__ method does nothing on py3k but the default works','line_number':2469,'multiline':False]['text':' Avoid bug in Python 3 by giving a unicode source encoding rather','line_number':2507,'multiline':False]['text':' than just ascii which raises a SyntaxError with no other details','line_number':2508,'multiline':False]['text':' Python 2.4 assumes the file is latin-1 and tells you off','line_number':2533,'multiline':False]['text':''bad.py", line 2\n'','line_number':2554,'multiline':False]['text':''bad.py", line 2\n'','line_number':2568,'multiline':False]['text':' pypy uses cpython's multibyte codecs so has their behavior here','line_number':2582,'multiline':False]['text':''bad.py", line 2\n'','line_number':2586,'multiline':False]