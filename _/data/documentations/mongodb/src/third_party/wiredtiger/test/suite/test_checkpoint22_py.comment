['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_checkpoint22.py','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Test that skipping trees in checkpoints doesn't cause us to use the wrong','line_number':37,'multiline':False]['text':' write generation.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' If an item contains txnids, they're hidden during unpack based on the write','line_number':40,'multiline':False]['text':' generation. The checkpoint cursor code contains logic to use the proper write','line_number':41,'multiline':False]['text':' generation for the checkpoint (which might not be the same as the current','line_number':42,'multiline':False]['text':' write generation) but there are opportunities for this to be wrong if the tree','line_number':43,'multiline':False]['text':' is not modified for a while and thus skipped during checkpointing.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' In this test we take an initial checkpoint while holding a read transaction','line_number':46,'multiline':False]['text':' open (to ensure txnids are written out), then without making more changes to','line_number':47,'multiline':False]['text':' the tree, shut down and restart and take another checkpoint. If we have messed','line_number':48,'multiline':False]['text':' up, reading the second checkpoint will use the write generation from before','line_number':49,'multiline':False]['text':' the restart and values we should see will disappear.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' To make this work we need to make sure the txnids after the restart are','line_number':52,'multiline':False]['text':' substantially smaller than the ones we need to see from before, so do 10000','line_number':53,'multiline':False]['text':' extra transactions up front before doing anything else.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' A more advanced variant of this test might try reading from _both_ checkpoints','line_number':56,'multiline':False]['text':' after restarting to make sure anything that should not be visible in the first','line_number':57,'multiline':False]['text':' checkpoint (because it wasn't done committing) is visible in the first','line_number':58,'multiline':False]['text':' checkpoint and not the second. However, to make that go we need to not just','line_number':59,'multiline':False]['text':' generate a torn transaction (which is enough of a nuisance already) but one','line_number':60,'multiline':False]['text':' where the entire transaction, or at least the entire transaction that applies','line_number':61,'multiline':False]['text':' to the tree we care about, gets written out in the checkpoint but that','line_number':62,'multiline':False]['text':' transaction's txnid is still not in the checkpoint's snapshot. Doing this','line_number':63,'multiline':False]['text':' reliably seems beyond the facilities we have available in Python -- writing a','line_number':64,'multiline':False]['text':' large amount of data to a second table and making the changes in the main table','line_number':65,'multiline':False]['text':' small might help but seems unlikely to be particularly reliable under load.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' If we gain a better way to generate torn transactions on purpose, it might be','line_number':68,'multiline':False]['text':' worth seeing if this more advanced variant can be set up. Note that for this','line_number':69,'multiline':False]['text':' case the first checkpoint must be named so it remains addressable.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' This test doesn't use timestamps; it is about transaction-level visibility.','line_number':72,'multiline':False]['text':' There doesn't seem any immediate reason to think timestamps would add anything.','line_number':73,'multiline':False]['text':'self.session.begin_transaction()','line_number':106,'multiline':False]['text':'self.session.rollback_transaction()','line_number':111,'multiline':False]['text':' Create a table.','line_number':120,'multiline':False]['text':' Create a second table so the second checkpoint can avoid being entirely vacuous.','line_number':126,'multiline':False]['text':' Write some initial data, and then write more, to crank up the txnid counter.','line_number':141,'multiline':False]['text':' Put some material in the second table too to keep things from being degenerate.','line_number':149,'multiline':False]['text':' Create a reader transaction that will not be able to see what happens next, so its','line_number':157,'multiline':False]['text':' txnids will end up on disk. We don't need to do anything with this; it just needs','line_number':158,'multiline':False]['text':' to exist.','line_number':159,'multiline':False]['text':' Now write some more data that we'll expect to see below.','line_number':163,'multiline':False]['text':' Checkpoint.','line_number':169,'multiline':False]['text':' Tidy up.','line_number':172,'multiline':False]['text':' Shut down and restart.','line_number':177,'multiline':False]['text':' Write some stuff in the second table.','line_number':180,'multiline':False]['text':' Checkpoint.','line_number':188,'multiline':False]['text':' Now read the first table in the second checkpoint. We should see value_b.','line_number':191,'multiline':False]