['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' [TEST_TAGS]','line_number':29,'multiline':False]['text':' recovery:log_files','line_number':30,'multiline':False]['text':' [END_TAGS]','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' test_txn19.py','line_number':33,'multiline':False]['text':'   Transactions: test recovery with corrupted log files','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' This test uses an artificially small log file limit, and creates','line_number':42,'multiline':False]['text':' large records so two fit into a log file. This allows us to test','line_number':43,'multiline':False]['text':' both the case when corruption happens at the beginning of a log file','line_number':44,'multiline':False]['text':' (an even number of records have been created), and when corruption','line_number':45,'multiline':False]['text':' happens in the middle of a log file (with an odd number of records).','line_number':46,'multiline':False]['text':' Negative offset means seek to the end','line_number':51,'multiline':False]['text':' The list comprehension below expands each entry in the integer tuple','line_number':85,'multiline':False]['text':' list to a scenario.  For example, (3, 4, 2) expands to:','line_number':86,'multiline':False]['text':' ('corrupt=[3,4],checkpoint=2', dict(corruptpos=3, corruptpos2=4, chkpt=2))','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' Each number corresponds to a log file, so for this example, we have','line_number':89,'multiline':False]['text':' corruption in log file 3 (using the style of corruption from','line_number':90,'multiline':False]['text':' corruption_type), there is a second corruption in log file 4,','line_number':91,'multiline':False]['text':' and there is a checkpoint in log file 2.  A value of 0 means no','line_number':92,'multiline':False]['text':' corruption or checkpoint.','line_number':93,'multiline':False]['text':' This function prunes out unnecessary or problematic test cases','line_number':107,'multiline':False]['text':' from the list of scenarios.','line_number':108,'multiline':False]['text':' corruptpos == 0 indicates there is no corruption.','line_number':114,'multiline':False]['text':' (i.e. corrupt log file 0, which doesn't exist)','line_number':115,'multiline':False]['text':' We do want to test the case of no corruption, but we don't','line_number':116,'multiline':False]['text':' need to try it against every type of corruption, only one.','line_number':117,'multiline':False]['text':' All the other cases are valid','line_number':121,'multiline':False]['text':' Return the log file number that contains the given record','line_number':130,'multiline':False]['text':' number.  In this test, two records fit into each log file, and','line_number':131,'multiline':False]['text':' after each even record is written, a new log file is created','line_number':132,'multiline':False]['text':' (having no records initially).  The last log file is this','line_number':133,'multiline':False]['text':' (nrecords/2 + 1), given that we start with log 1.','line_number':134,'multiline':False]['text':' Returns the first record number in a log file.','line_number':138,'multiline':False]['text':' Return true if the log file is corrupted.','line_number':142,'multiline':False]['text':' If not corrupted, the log file will produce no errors,','line_number':143,'multiline':False]['text':' and all the records originally written should be recovered.','line_number':144,'multiline':False]['text':' Corruptpos == 0 means to do no corruption in any log file','line_number':146,'multiline':False]['text':' Adding zeroes to the end of a log file is indistinguishable','line_number':150,'multiline':False]['text':' from having a log file that is preallocated that has not been','line_number':151,'multiline':False]['text':' totally filled. One might argue that if this does not occur','line_number':152,'multiline':False]['text':' in the final log file, it could/should have been truncated.','line_number':153,'multiline':False]['text':' At any rate, we consider this particular corruption to be benign.','line_number':154,'multiline':False]['text':' Generate a value that is a bit over half the size of the log file.','line_number':170,'multiline':False]['text':' ~60K','line_number':172,'multiline':False]['text':' Insert a list of keys','line_number':174,'multiline':False]['text':' assuming 1 digit','line_number':193,'multiline':False]['text':' Mark this test has having corrupted files','line_number':199,'multiline':False]['text':' Corrupt a second log file if needed','line_number':203,'multiline':False]['text':' Corruption past the last written record in a log file can sometimes','line_number':210,'multiline':False]['text':' be detected. In our test case, the last log file has zero or one large','line_number':211,'multiline':False]['text':' 60K record written into it, but it is presized to 100K.  Corruption','line_number':212,'multiline':False]['text':' at the end of this file creates a hole, and the corruption starts','line_number':213,'multiline':False]['text':' a new log record, where it can be detected as phony.  Similarly,','line_number':214,'multiline':False]['text':' corruption in the "middle" of the last file (actually the 25K point)','line_number':215,'multiline':False]['text':' can be detected if there aren't any of the insert records in the file.','line_number':216,'multiline':False]['text':' Return true iff the log has been damaged in a way that is not detected','line_number':222,'multiline':False]['text':' as a corruption.  WiredTiger must be lenient about damage in any log','line_number':223,'multiline':False]['text':' file, because a partial log record written just before a crash is in','line_number':224,'multiline':False]['text':' most cases indistinguishable from a corruption.  If the beginning of','line_number':225,'multiline':False]['text':' the file is mangled, that is always an unexpected corruption. Situations','line_number':226,'multiline':False]['text':' where we cannot reliably detect corruption include:','line_number':227,'multiline':False]['text':'  - removal of the last log','line_number':228,'multiline':False]['text':'  - certain corruptions at the beginning of a log record (adding garbage','line_number':229,'multiline':False]['text':'      at the end of a log file can trigger this).','line_number':230,'multiline':False]['text':' In certain cases, we detect log corruption, but just issue warnings.','line_number':240,'multiline':False]['text':' For this test, at least, salvage identifies and fixes all','line_number':248,'multiline':False]['text':' recovery failures.','line_number':249,'multiline':False]['text':' All records in the corrupt file will be found.','line_number':262,'multiline':False]['text':' This test creates some data, then simulates a crash with corruption.','line_number':271,'multiline':False]['text':' Then does a restart with recovery, then starts again with salvage,','line_number':272,'multiline':False]['text':' and finally starts again with recovery (adding new records).','line_number':273,'multiline':False]['text':'self.show_logs(newdir, 'before corruption')','line_number':281,'multiline':False]['text':'self.show_logs(newdir, 'after corruption')','line_number':283,'multiline':False]['text':' If we are salvaging, expect an informational message','line_number':306,'multiline':False]['text':' Possible messages:','line_number':309,'multiline':False]['text':'   salvage: log files x-y truncated at beginning','line_number':310,'multiline':False]['text':'   salvage: log file x truncated at beginning','line_number':311,'multiline':False]['text':'   salvage: log file x truncated','line_number':312,'multiline':False]['text':'   salvage: log file x removed','line_number':313,'multiline':False]['text':'','line_number':314,'multiline':False]['text':' The removal case may not give an informational error because','line_number':315,'multiline':False]['text':' the log file is already missing, so salvage itself is not','line_number':316,'multiline':False]['text':' removing or truncating any files. It is simply recovering as','line_number':317,'multiline':False]['text':' much as it can.','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' Insert a couple more and simulate another crash.','line_number':333,'multiline':False]['text':' The type of corruption to be applied','line_number':350,'multiline':False]['text':' File to be corrupted','line_number':371,'multiline':False]['text':' Configure the database type.','line_number':379,'multiline':False]['text':' In many cases, wiredtiger_open without any salvage options will','line_number':385,'multiline':False]['text':' just work.  We list those cases here.','line_number':386,'multiline':False]['text':' The cases for which salvage will not work, represented in the','line_number':416,'multiline':False]['text':' form (self.kind + ':' + self.filename)','line_number':417,'multiline':False]['text':' records per table.','line_number':434,'multiline':False]['text':' [ '0', '1', ... ]','line_number':435,'multiline':False]['text':' Insert a list of keys','line_number':440,'multiline':False]['text':' Mark this test has having corrupted files','line_number':459,'multiline':False]['text':' On non-windows platforms, we capture the renaming of WiredTiger.wt file.','line_number':491,'multiline':False]['text':' Simulate a crash by copying the contents of the directory','line_number':515,'multiline':False]['text':' before closing.  After we corrupt the copy, make another','line_number':516,'multiline':False]['text':' copy of the corrupted directory.','line_number':517,'multiline':False]['text':'','line_number':518,'multiline':False]['text':' The first corrupted copy will be used to run:','line_number':519,'multiline':False]['text':'    wiredtiger_open without salvage flag, followed by:','line_number':520,'multiline':False]['text':'    wiredtiger_open with salvage flag.','line_number':521,'multiline':False]['text':' The second directory will be used to run:','line_number':522,'multiline':False]['text':'    wiredtiger_open with salvage flag first.','line_number':523,'multiline':False]['text':' FIXME-WT-11995','line_number':533,'multiline':False]['text':' Removing the 'WiredTiger.turtle' file has weird behavior:','line_number':534,'multiline':False]['text':'  Immediately doing wiredtiger_open (without salvage) succeeds.','line_number':535,'multiline':False]['text':'  Following that, wiredtiger_open w/ salvage also succeeds.','line_number':536,'multiline':False]['text':'','line_number':537,'multiline':False]['text':'  But, immediately after the corruption, if we run','line_number':538,'multiline':False]['text':'  wiredtiger_open with salvage, it will fail.','line_number':539,'multiline':False]['text':' This anomaly should be fixed or explained.','line_number':540,'multiline':False]['text':' Certain cases are not currently salvageable, they result in','line_number':548,'multiline':False]['text':' an error during the wiredtiger_open.  But the nature of the','line_number':549,'multiline':False]['text':' messages produced during the error is variable by which case','line_number':550,'multiline':False]['text':' it is, and even variable from system to system.','line_number':551,'multiline':False]