['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' test_timestamp22.py','line_number':29,'multiline':False]['text':' Misuse the timestamp API, making sure we don't crash.','line_number':30,'multiline':False]['text':' Keep the number of rows low, as each additional row does','line_number':39,'multiline':False]['text':' not test any new code paths.','line_number':40,'multiline':False]['text':' Control execution of an operation, looking for exceptions and error messages.','line_number':58,'multiline':False]['text':' Usage:','line_number':59,'multiline':False]['text':'  with self.expect(self.FAILURE, 'some operation'):','line_number':60,'multiline':False]['text':'     some_operation()  # In this case, we expect it will fail','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' "expected" argument can be self.SUCCESS, self.FAILURE, True, False, for convenience.','line_number':63,'multiline':False]['text':' If there are stray error messages from a previous operation,','line_number':73,'multiline':False]['text':' let's find out now.  It can be confusing if we do something illegal','line_number':74,'multiline':False]['text':' here and we have multiple messages to sort out.','line_number':75,'multiline':False]['text':' 'yield' runs the subordinate operation, we'll catch any resulting exceptions.','line_number':78,'multiline':False]['text':' Soak up any error messages that happen as a result of the failure.','line_number':81,'multiline':False]['text':' If we're about to assert, show some extra info','line_number':93,'multiline':False]['text':' Create a predictable value based on the iteration number and timestamp.','line_number':100,'multiline':False]['text':' Given a number representing an "approximate timestamp", generate a timestamp','line_number':106,'multiline':False]['text':' that is near that number, either plus or minus.','line_number':107,'multiline':False]['text':' a number between -10 and 10:','line_number':109,'multiline':False]['text':' Asks whether we should do an illegal operation now. Return yes 5%.','line_number':116,'multiline':False]['text':' Insert a set of rows, each insert in its own transaction, with the','line_number':123,'multiline':False]['text':' given timestamps.','line_number':124,'multiline':False]['text':' Generate a configuration for a timestamp_transaction() call.','line_number':127,'multiline':False]['text':' Returns: 1) whether it expects success, 2) config 3) new running commit timestamp','line_number':128,'multiline':False]['text':' setting durable timestamp must be after prepare call','line_number':134,'multiline':False]['text':' We don't do the next part if we set an illegal durable timestamp.  It turns out','line_number':138,'multiline':False]['text':' if we do set the durable timestamp illegally, with a valid commit timestamp,','line_number':139,'multiline':False]['text':' the timestamp_transaction() call will fail, but may set the commit timestamp.','line_number':140,'multiline':False]['text':' It makes testing more complex, so we just don't do it.','line_number':141,'multiline':False]['text':' It's possible this will succeed, we'll check below.','line_number':148,'multiline':False]['text':' OOO is not allowed. Hence, the commit ts should be greater than','line_number':151,'multiline':False]['text':' the last commit and last durable.','line_number':152,'multiline':False]['text':' Occasionally put a durable timestamp on a commit without a prepare,','line_number':186,'multiline':False]['text':' that will be an error.','line_number':187,'multiline':False]['text':' OOO is not allowed. Hence, the prepare ts should be greater than','line_number':193,'multiline':False]['text':' the last commit and last durable.','line_number':194,'multiline':False]['text':' We might do timestamp_transaction calls either before/after inserting','line_number':203,'multiline':False]['text':' values, or both.','line_number':204,'multiline':False]['text':' Keep track of the commit timestamp that we'll set through the transaction.','line_number':208,'multiline':False]['text':' If it decreases, it will trigger an error.  At the final commit_transaction','line_number':209,'multiline':False]['text':' operation, we'll use the commit_ts.','line_number':210,'multiline':False]['text':' If a call to set a timestamp fails, a subsequent prepare may assert in diagnostic mode.','line_number':226,'multiline':False]['text':' We consider that acceptable, but we don't test it as it will crash the test suite.','line_number':227,'multiline':False]['text':' AVOID ASSERT','line_number':229,'multiline':False]['text':' Cannot set prepare timestamp after commit timestamp is successfully set.','line_number':234,'multiline':False]['text':' If the final commit is too old, we'll fail.','line_number':243,'multiline':False]['text':' ODDITY: We don't have to move the commit_ts ahead, but it has to be','line_number':247,'multiline':False]['text':' at least the value of the first commit timestamp set.','line_number':248,'multiline':False]['text':' If a prepare fails, the commit fails as well.','line_number':252,'multiline':False]['text':' Illegal outside of transaction','line_number':262,'multiline':False]['text':' Doing anything else after the prepare, like a timestamp_transaction(), will fail','line_number':288,'multiline':False]['text':' with a WT panic.  Don't do that, or else we can't do anything more in this test.','line_number':289,'multiline':False]['text':' If we did a successful prepare and are set up (by virtue of bad timestamps)','line_number':291,'multiline':False]['text':' to do a bad commit, WT will panic, and the test cannot continue.','line_number':292,'multiline':False]['text':' Only proceed with the commit if we have don't have that particular case.','line_number':293,'multiline':False]['text':' Rollback this one transaction, and continue the loop','line_number':304,'multiline':False]['text':' We don't expect any exceptions, they should be caught as part of self.expect','line_number':309,'multiline':False]['text':' statements.','line_number':310,'multiline':False]['text':' Get list of 'oldest_timestamp=value' etc. that have non-negative values.','line_number':318,'multiline':False]['text':' Determine whether we expect the set_timestamp to succeed.','line_number':325,'multiline':False]['text':' Update the current expected value.  ts is the timestamp being set.','line_number':328,'multiline':False]['text':' If "ts" is negative, ignore it, it's not being set in this call.','line_number':329,'multiline':False]['text':' It is unexpected if "ts" is before the "before" timestamp.','line_number':330,'multiline':False]['text':' The "before" timestamp could be updated during this call','line_number':331,'multiline':False]['text':' with value "before_arg", if not, use the global value for "before".','line_number':332,'multiline':False]['text':' It is a no-op to provide oldest or stable behind the global values. If provided ahead, we','line_number':345,'multiline':False]['text':' will treat the values as if not provided at all.','line_number':346,'multiline':False]['text':' Predict what we expect to happen to the timestamps.','line_number':365,'multiline':False]['text':' If that passes, then independently, oldest and stable can advance, but if they','line_number':367,'multiline':False]['text':' are less than the current value, that is silently ignored.','line_number':368,'multiline':False]['text':' Make sure the state of global timestamps is what we think.','line_number':376,'multiline':False]['text':' Local function to generate a random timestamp, or return -1','line_number':391,'multiline':False]['text':' Create tables with no entries','line_number':408,'multiline':False]['text':' We do a bunch of iterations, doing transactions, prepare, and global timestamp calls','line_number':412,'multiline':False]['text':' with timestamps that are sometimes valid, sometimes not. We use the iteration number','line_number':413,'multiline':False]['text':' as an "approximate timestamp", and generate timestamps for our calls that are near','line_number':414,'multiline':False]['text':' that number (within 10).  Thus, as the test runs, the timestamps generally get larger.','line_number':415,'multiline':False]['text':' We always know the state of global timestamps, so we can predict the success/failure','line_number':416,'multiline':False]['text':' on each call.','line_number':417,'multiline':False]['text':' no read_timestamp used in txn','line_number':429,'multiline':False]['text':' OOO is not allowed. Hence, the commit ts should be greater than','line_number':431,'multiline':False]['text':' the last commit and last durable.','line_number':432,'multiline':False]['text':' If we doing a prepare, we must abide by some additional rules.','line_number':440,'multiline':False]['text':' If we don't we'll immediately panic','line_number':441,'multiline':False]['text':' Set some combination of the global timestamps','line_number':452,'multiline':False]['text':' Make sure the resulting rows are what we expect.','line_number':460,'multiline':False]['text':' Although it's theoretically possible to never successfully update a single row,','line_number':469,'multiline':False]['text':' with a large number of iterations that should never happen.  I'd rather catch','line_number':470,'multiline':False]['text':' a test code error where we mistakenly don't update any rows.','line_number':471,'multiline':False]