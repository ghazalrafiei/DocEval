['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' test_timestamp07.py','line_number':29,'multiline':False]['text':'   Timestamps: checkpoints.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' Binary values.','line_number':66,'multiline':False]['text':' Check that a cursor (optionally started in a new transaction), sees the expected value for a','line_number':77,'multiline':False]['text':' key.','line_number':78,'multiline':False]['text':' In FLCS the table extends under uncommitted writes and we expect to','line_number':80,'multiline':False]['text':' see zero rather than NOTFOUND.','line_number':81,'multiline':False]['text':' Check reads of all tables at a timestamp','line_number':96,'multiline':False]['text':' In FLCS the values are bytes, which are numbers, but the tests below are via string','line_number':103,'multiline':False]['text':' inclusion rather than just equality of values.','line_number':104,'multiline':False]['text':' Take a backup of the database and verify that the value we want to check exists in the tables','line_number':123,'multiline':False]['text':' the expected number of times.','line_number':124,'multiline':False]['text':' In FLCS the values are bytes, which are numbers, but the tests below are via string','line_number':134,'multiline':False]['text':' inclusion rather than just equality of values.','line_number':135,'multiline':False]['text':' Count how many times the second value is present','line_number':139,'multiline':False]['text':' print "check_value found in key " + str(k)','line_number':143,'multiline':False]['text':' Count how many times the second value is present in the non-timestamp table.','line_number':147,'multiline':False]['text':' print "check_value found in key " + str(k)','line_number':151,'multiline':False]['text':' print "CHECK BACKUP: Count " +\','line_number':155,'multiline':False]['text':'     str(count) + " Count2 " + str(count2) + " Count3 " + str(count3)','line_number':156,'multiline':False]['text':' print "CHECK BACKUP: Expect value2 count " + str(valcnt)','line_number':157,'multiline':False]['text':' print "CHECK BACKUP: 2nd table Expect value2 count " + str(valcnt2)','line_number':158,'multiline':False]['text':' print "CHECK BACKUP: 3rd table Expect value2 count " + str(valcnt3)','line_number':159,'multiline':False]['text':' Check that a cursor sees the expected values after a checkpoint.','line_number':163,'multiline':False]['text':' Take a checkpoint.  Make a copy of the database.  Open the copy and verify whether or not','line_number':166,'multiline':False]['text':' the expected data is in there.','line_number':167,'multiline':False]['text':' Open two tables:','line_number':180,'multiline':False]['text':' 1. Table is not logged and uses timestamps.','line_number':181,'multiline':False]['text':' 2. Table is logged and so timestamps are ignored.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' print "tables created"','line_number':191,'multiline':False]['text':' Insert keys 1..nkeys each with timestamp=key, in some order.','line_number':193,'multiline':False]['text':' print "value inserted in all tables, reading..."','line_number':204,'multiline':False]['text':' Now check that we see the expected state when reading at each timestamp.','line_number':206,'multiline':False]['text':' print "all values read, updating timestamps"','line_number':213,'multiline':False]['text':' Bump the oldest timestamp, we're not going back...','line_number':215,'multiline':False]['text':' print "Oldest " + self.oldts','line_number':220,'multiline':False]['text':' print "inserting value2 in all tables"','line_number':222,'multiline':False]['text':' Update them and retry.','line_number':224,'multiline':False]['text':' Make sure a timestamp cursor is the last one to update.  This','line_number':228,'multiline':False]['text':' tests the scenario for a bug we found where recovery replayed','line_number':229,'multiline':False]['text':' the last record written into the log.','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':' print "Key " + str(k) + " to value2"','line_number':232,'multiline':False]['text':' print "Commit key " + str(k) + " ts " + ts','line_number':238,'multiline':False]['text':' print "Updated " + str(count) + " keys to value2"','line_number':241,'multiline':False]['text':' Take a checkpoint using the given configuration.  Then verify the value doesn't appear','line_number':243,'multiline':False]['text':' in that copy of that data.','line_number':244,'multiline':False]['text':' print "check_stable 1"','line_number':245,'multiline':False]['text':' Update the stable timestamp to the latest, but not the oldest','line_number':248,'multiline':False]['text':' timestamp and make sure we can see the data.  Once the stable','line_number':249,'multiline':False]['text':' timestamp is moved we should see all keys with value2.','line_number':250,'multiline':False]['text':' print "check_stable 2"','line_number':253,'multiline':False]['text':' Update the key and retry.  This time take a backup and recover.','line_number':256,'multiline':False]['text':' Make sure a timestamp cursor is the last one to update.  This','line_number':260,'multiline':False]['text':' tests the scenario for a bug we found where recovery replayed','line_number':261,'multiline':False]['text':' the last record written into the log.','line_number':262,'multiline':False]['text':'','line_number':263,'multiline':False]['text':' print "Key " + str(k) + " to value3"','line_number':264,'multiline':False]['text':' print "Commit key " + str(k) + " ts " + ts','line_number':270,'multiline':False]['text':' print "Updated " + str(count) + " keys to value3"','line_number':273,'multiline':False]['text':' Flush the log but don't checkpoint','line_number':275,'multiline':False]['text':' Take a backup and then verify whether value3 appears in a copy','line_number':278,'multiline':False]['text':' of that data or not.  Both tables that are logged should see','line_number':279,'multiline':False]['text':' all the data regardless of timestamps.  The table that is not','line_number':280,'multiline':False]['text':' logged should not see any of it.','line_number':281,'multiline':False]['text':' print "check_stable 3"','line_number':282,'multiline':False]