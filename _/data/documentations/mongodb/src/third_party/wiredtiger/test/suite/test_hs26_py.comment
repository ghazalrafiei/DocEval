['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_hs26.py','line_number':33,'multiline':False]['text':' Test that changes overlapping variable-length column store RLE groups don't lose or corrupt data.','line_number':34,'multiline':False]['text':' (The concern doesn't exist for row stores, so while this test could be run for row stores there's','line_number':35,'multiline':False]['text':' little benefit to doing so; thus, no row-store scenarios are generated.)','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' This works by writing batches of duplicate values, then overwriting them with new batches,','line_number':38,'multiline':False]['text':' all with relatively prime counts so the ranges overlap. It also tests the cases where not','line_number':39,'multiline':False]['text':' all the old or new value batches exist.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' It checks that the immediately written values can be read back, but the interesting part is','line_number':42,'multiline':False]['text':' whether they read back correctly after forcing eviction, which will RLE-encode the duplicates','line_number':43,'multiline':False]['text':' and read them back. There are many opportunities for the interaction betwee RLE groups and','line_number':44,'multiline':False]['text':' history store accesses to go off the rails.','line_number':45,'multiline':False]['text':' We control the duplication of values by appending a number computed from the key.','line_number':49,'multiline':False]['text':' Because the keys are 1..N (not 0..N-1), to get aligned RLE groups the suffix is','line_number':50,'multiline':False]['text':' computed as (key - 1) // value_modulus. This way, if value_modulus is e.g. 7, we','line_number':51,'multiline':False]['text':' get the first 7 keys (1-7) using the same suffix.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' It would not be _wrong_ to use key // value modulus, but it makes it much more','line_number':54,'multiline':False]['text':' difficult to reason about which RLE groups are overlapping where if the first RLE','line_number':55,'multiline':False]['text':' group is shorter than the others by 1. So we don't do that.','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' The cases where the RLE group is mismatched by exactly 1 are particularly likely to','line_number':58,'multiline':False]['text':' have issues, so we want to be sure to exercise those cases. Any pair of relatively','line_number':59,'multiline':False]['text':' prime integers will generate these cases as long as there are enough keys (e.g. 7','line_number':60,'multiline':False]['text':' and 13 generate one at 14 and the other at 78) but we also want to encounter these','line_number':61,'multiline':False]['text':' cases relative to the number of keys written, both the shorter and longer numbers.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' Consequently I've picked 103 for one key count (between multiples of 17 and 13) and','line_number':64,'multiline':False]['text':' 209 for the other (between multiples of 13 and 7). The ratio of the two key counts','line_number':65,'multiline':False]['text':' doesn't signify much but it's close to 2x on general principles.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' Other cases of overlapping the key count are still interesting so we still generate','line_number':68,'multiline':False]['text':' the full product of the scenarios.','line_number':69,'multiline':False]['text':' Generate the value for a key.','line_number':100,'multiline':False]['text':' Write nrows records, using value as the base value string.','line_number':104,'multiline':False]['text':' Figure the expected value for a key, based on the read time.','line_number':114,'multiline':False]['text':' - If the read time is timestamp_1, we should see value_1.','line_number':115,'multiline':False]['text':' - If the read time is timestamp_2, we should see value_2, except if nrows_2 < nrows_1,','line_number':116,'multiline':False]['text':' in which case we should see value_1 for keys past nrows_1.','line_number':117,'multiline':False]['text':' Return the number of keys we expect, based on the read time.','line_number':131,'multiline':False]['text':' - If the read time is timestamp_1, we should see nrows_1.','line_number':132,'multiline':False]['text':' - If the read time is timestamp_2, we should see max(nrows_1, nrows_2).','line_number':133,'multiline':False]['text':' Check that we got the values we expected. In particular, also make sure that','line_number':144,'multiline':False]['text':' we get the expected number of values back. Expect the values that should be','line_number':145,'multiline':False]['text':' there at readtime; if explicit_read_ts is set, open a transaction at that','line_number':146,'multiline':False]['text':' timestamp.','line_number':147,'multiline':False]['text':' Count is key - 1, so pass count + 1 as key.','line_number':154,'multiline':False]['text':' Create a file that contains active history (content newer than the oldest timestamp).','line_number':164,'multiline':False]['text':' Pin oldest and stable to timestamp 1.','line_number':171,'multiline':False]['text':' Write the first set of values at timestamp_1.','line_number':175,'multiline':False]['text':' Optionally make the first set of values globally visible (and stable).','line_number':178,'multiline':False]['text':' Create a long running read transaction in a separate session.','line_number':183,'multiline':False]['text':' Check that the initial writes (at timestamp_1) are seen.','line_number':187,'multiline':False]['text':' Write different values at a later timestamp.','line_number':190,'multiline':False]['text':' Check that the new updates are only seen after the update timestamp.','line_number':193,'multiline':False]['text':' Now forcibly evict, so that all the pages are RLE-encoded and then read back in.','line_number':197,'multiline':False]['text':' There doesn't seem to be any way to just forcibly evict an entire table, so what','line_number':198,'multiline':False]['text':' I'm going to do is assume that each page can hold at least 41 values, and evict','line_number':199,'multiline':False]['text':' every 41st key. If this evicts pages repeatedly it won't really hurt anything,','line_number':200,'multiline':False]['text':' just waste some time.','line_number':201,'multiline':False]['text':' Search the key to evict it.','line_number':206,'multiline':False]['text':' Using the long running read transaction, check that the correct data can still be read.','line_number':213,'multiline':False]['text':' It should see all the updates at timestamp_1.','line_number':214,'multiline':False]['text':' Also check that the most recent transaction has the later data.','line_number':218,'multiline':False]