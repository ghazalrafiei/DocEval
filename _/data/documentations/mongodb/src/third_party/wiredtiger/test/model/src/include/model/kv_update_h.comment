['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * kv_update --
 *     The data value stored in a KV table, together with the relevant update information, such as
 *     the timestamp.
 ','line_number':41,'multiline':True]['text':'
     * kv_update::timestamp_comparator --
     *     The comparator that uses timestamps only.
     ','line_number':49,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare two updates.
         ','line_number':55,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare the update to the given timestamp.
         ','line_number':65,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare the update to the given timestamp.
         ','line_number':75,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare two updates.
         ','line_number':85,'multiline':True]['text':' handle nullptr ','line_number':92,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare the update to the given timestamp.
         ','line_number':97,'multiline':True]['text':' handle nullptr ','line_number':104,'multiline':True]['text':'
         * kv_update::timestamp_comparator::operator() --
         *     Compare the update to the given timestamp.
         ','line_number':109,'multiline':True]['text':' handle nullptr ','line_number':116,'multiline':True]['text':'
     * kv_update::kv_update --
     *     Create a new instance.
     ','line_number':122,'multiline':True]['text':'
     * kv_update::kv_update --
     *     Create a new instance.
     ','line_number':132,'multiline':True]['text':'
     * kv_update::operator== --
     *     Compare to another instance.
     ','line_number':144,'multiline':True]['text':'
     * kv_update::operator!= --
     *     Compare to another instance.
     ','line_number':156,'multiline':True]['text':'
     * kv_update::operator< --
     *     Compare to another instance.
     ','line_number':166,'multiline':True]['text':'
     * kv_update::operator<= --
     *     Compare to another instance.
     ','line_number':184,'multiline':True]['text':'
     * kv_update::operator> --
     *     Compare to another instance.
     ','line_number':194,'multiline':True]['text':'
     * kv_update::operator>= --
     *     Compare to another instance.
     ','line_number':204,'multiline':True]['text':'
     * kv_update::value --
     *     Get the value. Note that this returns a copy of the object.
     ','line_number':214,'multiline':True]['text':'
     * kv_update::global --
     *     Check if this is a globally-visible, non-timestamped update.
     ','line_number':224,'multiline':True]['text':'
     * kv_update::commit_timestamp --
     *     Get the commit timestamp.
     ','line_number':234,'multiline':True]['text':'
     * kv_update::durable_timestamp --
     *     Get the durable timestamp.
     ','line_number':244,'multiline':True]['text':'
     * kv_update::committed --
     *     Check whether the transaction is committed.
     ','line_number':254,'multiline':True]['text':'
     * kv_update::prepared --
     *     Check whether the transaction is prepared.
     ','line_number':266,'multiline':True]['text':'
     * kv_update::txn --
     *     Get the transaction pointer, if available.
     ','line_number':278,'multiline':True]['text':'
     * kv_update::txn_id --
     *     Get the transaction ID.
     ','line_number':288,'multiline':True]['text':'
     * kv_update::txn_state --
     *     Get the update's transaction state.
     ','line_number':298,'multiline':True]['text':'
     * kv_update::set_timestamps --
     *     Set the commit and durable timestamps. This can be called only when this object is not
     *     inserted in a sorted list.
     ','line_number':310,'multiline':True]['text':'
     * kv_update::remove_txn --
     *     Remove the transaction information. This can be only done if the transaction is already
     *     committed to save memory.
     ','line_number':322,'multiline':True]['text':'
     * kv_update::set_wt_metadata --
     *     If this update was imported from WiredTiger, remember the corresponding transaction
     *     metadata.
     ','line_number':333,'multiline':True]['text':'
     * kv_update::wt_txn_id --
     *     Get the WiredTiger transaction ID, if available.
     ','line_number':345,'multiline':True]['text':'
     * kv_update::wt_base_write_gen --
     *     Get the WiredTiger base write generation number, if available.
     ','line_number':355,'multiline':True]['text':'
     * The transaction information: the transaction ID, and the pointer to the transaction object.
     * The pointer can be a nullptr if the transaction has already committed so that we don't
     * unnecessarily keep many transaction objects around. After the transaction has committed, we
     * still remember the transaction ID so that we can determine whether the update should be
     * included in a transaction snapshot.
     ','line_number':370,'multiline':True]['text':' Transaction information for updates imported from WiredTiger's debug log. ','line_number':380,'multiline':True]['text':' namespace model ','line_number':385,'multiline':True]