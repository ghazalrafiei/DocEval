['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * kv_table_item --
 *     The value part of a key-value pair, together with its metadata and previous versions.
 ','line_number':42,'multiline':True]['text':'
     * kv_table_item::kv_table_item --
     *     Create a new instance.
     ','line_number':49,'multiline':True]['text':'
     * kv_table_item::add_update --
     *     Add an update. Throw exception on error.
     ','line_number':55,'multiline':True]['text':'
     * kv_table_item::add_update --
     *     Add an update. Throw exception on error.
     ','line_number':61,'multiline':True]['text':'
     * kv_table_item::contains_any --
     *     Check whether the table contains the given value. If there are multiple values associated
     *     with the given timestamp, return true if any of them match.
     ','line_number':67,'multiline':True]['text':'
     * kv_table_item::contains_any --
     *     Check whether the table contains the given value. If there are multiple values associated
     *     with the given timestamp, return true if any of them match.
     ','line_number':78,'multiline':True]['text':'
     * kv_table_item::exists --
     *     Check whether the latest value exists.
     ','line_number':94,'multiline':True]['text':'
     * kv_table_item::exists --
     *     Check whether the latest value exists in the given checkpoint.
     ','line_number':100,'multiline':True]['text':'
     * kv_table_item::exists_opt --
     *     Check whether the latest value exists, using the checkpoint if provided.
     ','line_number':106,'multiline':True]['text':'
     * kv_table_item::get --
     *     Get the corresponding value. Return NONE if not found. Throw an exception on error.
     ','line_number':116,'multiline':True]['text':'
     * kv_table_item::get --
     *     Get the corresponding value. Return NONE if not found. Throw an exception on error.
     ','line_number':126,'multiline':True]['text':' Get the stable (checkpoint) timestamp, if not overridden by the caller. ','line_number':136,'multiline':True]['text':'
         * When using checkpoint cursors, we need to compare the stable timestamp against the
         * durable timestamp, not the commit timestamp.
         ','line_number':141,'multiline':True]['text':'
     * kv_table_item::get --
     *     Get the corresponding value. Return NONE if not found. Throw an exception on error.
     ','line_number':148,'multiline':True]['text':'
     * kv_table_item::get_latest --
     *     Get the corresponding value, but ignore the transaction's read timestamp. Return NONE if
     *     not found. Throw an exception on error.
     ','line_number':160,'multiline':True]['text':'
     * kv_table_item::fix_timestamps --
     *     Fix the commit and durable timestamps for the corresponding update. We need to do this,
     *     because WiredTiger transaction API specifies the commit timestamp after performing the
     *     operations, not before.
     ','line_number':173,'multiline':True]['text':'
     * kv_table_item::has_prepared --
     *     Check whether the item has any prepared updates for the given timestamp.
     ','line_number':182,'multiline':True]['text':'
     * kv_table_item::rollback_to_stable --
     *     Roll back the table item to the latest stable timestamp and transaction snapshot.
     ','line_number':188,'multiline':True]['text':'
     * kv_table_item::rollback_updates --
     *     Roll back updates of an aborted transaction.
     ','line_number':194,'multiline':True]['text':'
     * kv_table_item::add_update_nolock --
     *     Add an update but without taking a lock (this assumes the caller has it). Throw an
     *     exception on error.
     ','line_number':201,'multiline':True]['text':'
     * kv_table_item::fail_with_rollback --
     *     Fail the given update and throw an exception indicating rollback.
     ','line_number':208,'multiline':True]['text':'
     * kv_table_item::contains_any --
     *     Check whether the table contains the given value. If there are multiple values associated
     *     with the given timestamp, return true if any of them match.
     ','line_number':214,'multiline':True]['text':'
     * kv_table_item::get --
     *     Get the corresponding value. Return NONE if not found. Throw an exception on error.
     ','line_number':222,'multiline':True]['text':'
     * kv_table_item::has_prepared_nolock --
     *     Check whether the item has any prepared updates for the given timestamp, but without
     *     taking a lock.
     ','line_number':229,'multiline':True]['text':' sorted list of updates ','line_number':238,'multiline':True]['text':' namespace model ','line_number':241,'multiline':True]