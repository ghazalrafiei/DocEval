['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * timestamp_maximum_committed --
 *     Return the largest timestamp that's no longer in use.
 ','line_number':31,'multiline':True]['text':' A barrier additionally prevents using cache values here. ','line_number':44,'multiline':True]['text':'
             * We can't calculate a useful minimum in-use timestamp if a thread hasn't yet set its
             * last-used commit timestamp, that thread might be about to use a commit timestamp in
             * the range we'd return.
             ','line_number':49,'multiline':True]['text':' Return one less than the minimum in-use timestamp. ','line_number':60,'multiline':True]['text':'
 * timestamp_query --
 *     Query a timestamp.
 ','line_number':64,'multiline':True]['text':'
 * timestamp_init --
 *     Set the timestamp on open to the database's recovery timestamp, or some non-zero value.
 ','line_number':80,'multiline':True]['text':'
 * timestamp_once --
 *     Update the timestamp once.
 ','line_number':92,'multiline':True]['text':' Get the maximum not-in-use timestamp, noting that it may not be set. ','line_number':107,'multiline':True]['text':'
         * For predictable replay, our end state is to have the stable timestamp represent a precise
         * number of operations.
         ','line_number':113,'multiline':True]['text':'
         * For predictable replay, we need the oldest timestamp to lag when the process exits. That
         * allows two runs that finish with stable timestamps in the same ballpark to be compared.
         ','line_number':121,'multiline':True]['text':'
         * If lag is permitted, update the oldest timestamp halfway to the largest timestamp that's
         * no longer in use, otherwise update the oldest timestamp to that timestamp. Update stable
         * to the largest timestamp that's no longer in use.
         ','line_number':130,'multiline':True]['text':'
 * timestamp --
 *     Periodically update the oldest timestamp.
 ','line_number':156,'multiline':True]['text':' Unused argument ','line_number':167,'multiline':True]['text':' Locks need session ','line_number':171,'multiline':True]['text':'
     * Update the oldest and stable timestamps at least once every 15 seconds. For predictable
     * replay, update at a much faster pace. We can't afford to get behind because that means more
     * rollback errors, and we don't have the luxury of giving up on an operation that has rolled
     * back.
     ','line_number':175,'multiline':True]['text':'
 * timestamp_teardown --
 *     Wrap up timestamp operations.
 ','line_number':197,'multiline':True]['text':'
     * Do a final bump of the oldest and stable timestamps, otherwise recent operations can prevent
     * verify from running.
     ','line_number':204,'multiline':True]['text':'
 * timestamp_set_oldest --
 *     Query the oldest timestamp from wiredtiger and set it as our global oldest timestamp. This
 *     should only be called on runs for pre existing databases.
 ','line_number':211,'multiline':True]['text':'
         * Its possible there may not be an oldest timestamp as such we could get not found. This
         * should be okay assuming timestamps are not configured if they are, it's still okay as we
         * could have configured timestamps after not running with timestamps. As such only error if
         * we get a non not found error. If we were supposed to fail with not found we'll see an
         * error later on anyway.
         ','line_number':233,'multiline':True]