['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * kv_database::create_table --
 *     Create and return a new table. Throw an exception if the name is not unique.
 ','line_number':41,'multiline':True]['text':'
 * kv_database::create_checkpoint --
 *     Create a checkpoint. Throw an exception if the name is not unique.
 ','line_number':60,'multiline':True]['text':'
 * kv_database::create_checkpoint --
 *     Create a checkpoint from custom metadata. Throw an exception if the name is not unique.
 ','line_number':70,'multiline':True]['text':' Use the default checkpoint name, if it is not specified. ','line_number':80,'multiline':True]['text':' We can overwrite the default checkpoint, but not the others without deleting them first. ','line_number':85,'multiline':True]['text':' Create the checkpoint. ','line_number':92,'multiline':True]['text':' Remember it. ','line_number':95,'multiline':True]['text':'
 * kv_database::checkpoint --
 *     Get the checkpoint. Throw an exception if it does not exist.
 ','line_number':100,'multiline':True]['text':'
 * kv_database::begin_transaction --
 *     Start a new transaction.
 ','line_number':111,'multiline':True]['text':'
 * kv_database::remove_inactive_transaction --
 *     Remove a transaction from the list of active transactions. This should be only called from
 *     within the transaction's commit and rollback functions.
 ','line_number':128,'multiline':True]['text':'
 * kv_database::txn_snapshot --
 *     Create a transaction snapshot.
 ','line_number':146,'multiline':True]['text':'
 * kv_database::txn_snapshot --
 *     Create a transaction snapshot. Do not lock, because the caller already has a lock.
 ','line_number':157,'multiline':True]['text':'
 * kv_database::clear_nolock --
 *     Clear the contents of the database, assuming the relevant locks are already held.
 ','line_number':176,'multiline':True]['text':' Requires: tables lock, transactions lock. ','line_number':183,'multiline':True]['text':'
     * Roll back all active transactions. We cannot just clear the table of active transactions, as
     * that would result in a memory leak due to circular dependencies between updates and
     * transactions.
     ','line_number':185,'multiline':True]['text':' Clear the tables. ','line_number':192,'multiline':True]['text':'
 * kv_database::rollback_all_nolock --
 *     Rollback all transactions, assuming the relevant locks are already held.
 ','line_number':197,'multiline':True]['text':'
     * Fail all active transactions. We have to do this in two steps, as the map of active
     * transactions will be modified during the calls to rollback.
     ','line_number':204,'multiline':True]['text':'
 * kv_database::restart --
 *     Simulate restarting the database - either a clean restart or crash and recovery.
 ','line_number':216,'multiline':True]['text':' Fail all active transactions. ','line_number':226,'multiline':True]['text':' If we are not crashing, create a checkpoint. ','line_number':229,'multiline':True]['text':' Start WiredTiger. ','line_number':233,'multiline':True]['text':'
 * kv_database::rollback_to_stable --
 *     Roll back the database to the latest stable timestamp and transaction snapshot.
 ','line_number':238,'multiline':True]['text':'
 * kv_database::rollback_to_stable_nolock --
 *     Roll back the database to the latest stable timestamp and transaction snapshot, but without
 *     locking.
 ','line_number':251,'multiline':True]['text':'
 * kv_database::start_nolock --
 *     Simulate starting WiredTiger, assuming the locks are held.
 ','line_number':266,'multiline':True]['text':' If there is no nameless checkpoint, we have an empty table. ','line_number':273,'multiline':True]['text':' Otherwise recover using rollback to stable using the checkpoint. ','line_number':280,'multiline':True]['text':' If the checkpoint does not have a stable timestamp, do not use it during RTS. ','line_number':283,'multiline':True]['text':' namespace model ','line_number':291,'multiline':True]