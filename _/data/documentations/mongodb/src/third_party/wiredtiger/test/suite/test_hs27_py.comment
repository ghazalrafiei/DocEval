['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_hs27.py','line_number':33,'multiline':False]['text':' Test that variable-length column store doesn't RLE-compact adjacent data with heterogeneous','line_number':34,'multiline':False]['text':' timestamps.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' (The concern doesn't exist for row stores, so while this test could be run for row stores there's','line_number':37,'multiline':False]['text':' little benefit to doing so; thus, no row-store scenarios are generated.)','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' This works by writing the same value to adjacent keys at different times, evicting them, and','line_number':40,'multiline':False]['text':' making sure they read back correctly. (The eviction is necessary to go through the RLE code.)','line_number':41,'multiline':False]['text':' Configure the number of different timestamps to write at.','line_number':49,'multiline':False]['text':' Configure the number of keys to write at each timestamp.','line_number':56,'multiline':False]['text':' Configure whether the keys should be initialized first.','line_number':63,'multiline':False]['text':' Configure whether the timestamp groups of keys are written forwards or backwards.','line_number':69,'multiline':False]['text':' Configure whether the keys within a timestamp group are written forwards or backwards.','line_number':75,'multiline':False]['text':' Get the m'th writer timestamp.','line_number':84,'multiline':False]['text':' Get the m'th reader timestamp.','line_number':88,'multiline':False]['text':' Get the k'th key for the m'th timestamp.','line_number':92,'multiline':False]['text':' Return the key number k and timestamp number m for a key (inverse of get_key).','line_number':104,'multiline':False]['text':' Return the timestamp number k for a timestamp (inverse of get_read/writetime).','line_number':119,'multiline':False]['text':' Return -1 or self.ntimes for other timestamps as appropriate, for comparison.','line_number':120,'multiline':False]['text':' Figure if we should see value_2 for a given key and read time.','line_number':130,'multiline':False]['text':' Get the key number and timestamp number for the key.','line_number':132,'multiline':False]['text':' Get the timestamp number associated with readtime.','line_number':138,'multiline':False]['text':' We should see value_2 if we are at or after the time it was written.','line_number':141,'multiline':False]['text':' Check each value explicitly to make sure it's what we meant to see.','line_number':144,'multiline':False]['text':' Don't bother checking the background values.','line_number':145,'multiline':False]['text':' Scan through the whole table and make sure it's what we expect.','line_number':163,'multiline':False]['text':' The table was initialized; should always see all rows.','line_number':174,'multiline':False]['text':' The table was not initialized; should see only what we wrote by this time.','line_number':177,'multiline':False]['text':' (If m is 0 we should see one batch of keys.)','line_number':178,'multiline':False]['text':' Scan through the whole table backward too, since cursor_prev isn't adequately tested.','line_number':185,'multiline':False]['text':' The table was initialized; should always see all rows.','line_number':198,'multiline':False]['text':' The table was not initialized; should see only what we wrote by this time.','line_number':201,'multiline':False]['text':' (If m is 0 we should see one batch of keys.)','line_number':202,'multiline':False]['text':' Do all three checks.','line_number':209,'multiline':False]['text':' Scan through the whole table at each relevant timestamp and make sure it's what we expect.','line_number':215,'multiline':False]['text':' Write self.nrows records at timestamp 1, using self.value_1 as the value.','line_number':222,'multiline':False]['text':' Do the m'th update.','line_number':232,'multiline':False]['text':' Do all the updates.','line_number':250,'multiline':False]['text':' Create a file that contains active history (content newer than the oldest timestamp).','line_number':261,'multiline':False]['text':' Write the initial values, if requested.','line_number':268,'multiline':False]['text':' Pin oldest and stable to timestamp 1.','line_number':272,'multiline':False]['text':' Create a long running read transaction in a separate session.','line_number':276,'multiline':False]['text':' Check that the initial writes (at timestamp 1) are seen (at timestamp 2).','line_number':280,'multiline':False]['text':' Write more values at assorted timestamps.','line_number':283,'multiline':False]['text':' Check that the new updates are appropriately visible.','line_number':286,'multiline':False]['text':' Now forcibly evict, so that all the pages are RLE-encoded and then read back in.','line_number':289,'multiline':False]['text':' There doesn't seem to be any way to just forcibly evict an entire table, so what','line_number':290,'multiline':False]['text':' I'm going to do is assume that what we care about is evicting the updates (the','line_number':291,'multiline':False]['text':' initial values are not so interesting) and they are on a maximum of two pages,','line_number':292,'multiline':False]['text':' so we can evict the first and last key. If this evicts the same page twice, it','line_number':293,'multiline':False]['text':' won't really hurt anything. (This also avoids having to worry about whether we','line_number':294,'multiline':False]['text':' wrote initial values or not.)','line_number':295,'multiline':False]['text':' Search the key to evict it.','line_number':302,'multiline':False]['text':' Check that the long-running read transaction still reads the correct data.','line_number':308,'multiline':False]['text':' Check that our main session reads the correct data.','line_number':311,'multiline':False]['text':' Drop the long running read transaction.','line_number':314,'multiline':False]['text':' Check that our main session can still read the latest data.','line_number':317,'multiline':False]