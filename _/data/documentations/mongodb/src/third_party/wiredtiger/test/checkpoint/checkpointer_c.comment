['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * set_stable --
 *     Set the given timestamp as the stable timestamp.
 ','line_number':37,'multiline':True]['text':'
 * start_threads --
 *     Responsible for creating the service threads.
 ','line_number':54,'multiline':True]['text':' Let's start with 1 as the stable as 0 is not a valid timestamp. ','line_number':61,'multiline':True]['text':'
     * If there are N worker threads (0 - N-1), the checkpoint thread has an ID of N and the clock
     * thread an ID of N + 1.
     ','line_number':62,'multiline':True]['text':'
 * end_threads --
 *     Responsible for cleanly shutting down the service threads.
 ','line_number':74,'multiline':True]['text':' Shutdown checkpoint after flush thread completes because flush depends on checkpoint. ','line_number':81,'multiline':True]['text':'
         * The clock lock is also used by the checkpoint thread. Now that it has exited it is safe
         * to destroy that lock.
         ','line_number':85,'multiline':True]['text':'
 * get_all_committed_ts --
 *     Returns the least of commit timestamps across all the threads. Returns UINT64_MAX if one of
 *     the threads has not yet started.
 ','line_number':94,'multiline':True]['text':'
 * clock_thread --
 *     Clock thread: ticks up timestamps.
 ','line_number':116,'multiline':True]['text':'
                 * If we are doing a predictable rerun, don't go past the provided stop timestamp.
                 ','line_number':143,'multiline':True]['text':'
                 * Leave a gap between timestamps so prepared insert followed by remove don't
                 * overlap with stable timestamp.
                 ','line_number':160,'multiline':True]['text':'
                 * Random value between 6 and 10 seconds.
                 ','line_number':169,'multiline':True]['text':'
         * Random value between 5000 and 10000.
         ','line_number':177,'multiline':True]['text':'
 * checkpointer --
 *     Checkpoint thread start function.
 ','line_number':189,'multiline':True]['text':'
 * set_flush_tier_delay --
 *     Set up a random delay for the next flush_tier.
 ','line_number':206,'multiline':True]['text':'
     * When we are in sweep stress mode, we checkpoint between 4 and 8 seconds, so we'll flush
     * between 5 and 15 seconds (that is, 5 million and 15 million microseconds). When we aren't in
     * sweep stress mode, we are checkpointing constantly, and we'll do a flush tier with a random
     * delay between 0 - 10000 microseconds.
     ','line_number':213,'multiline':True]['text':'
 * real_checkpointer --
 *     Do the work of creating checkpoints and then verifying them. Also responsible for finishing
 *     in a timely fashion.
 ','line_number':225,'multiline':True]['text':' Use the extra random generator as the tier delay doesn't affect the actual data content. ','line_number':266,'multiline':True]['text':'
         * Check for consistency of online data, here we don't expect to see the version at the
         * checkpoint just a consistent view across all tables.
         ','line_number':270,'multiline':True]['text':' Use the extra random generator as the data is not getting modified. ','line_number':284,'multiline':True]['text':' Update the oldest timestamp, but do not go past the provided stop timestamp. ','line_number':288,'multiline':True]['text':' Execute a checkpoint ','line_number':305,'multiline':True]['text':'
             * FIXME: when we change the API to notify that a flush_tier has completed, we'll need
             * to set up a general event handler and catch that notification, so we can pass the
             * flush_tier "cookie" to the test utility function.
             ','line_number':312,'multiline':True]['text':'
             * Use the extra random generator as the tier delay doesn't affect the actual data
             * content.
             ','line_number':321,'multiline':True]['text':' Verify the checkpoint we just wrote. ','line_number':331,'multiline':True]['text':' Verify the content of the database at the verify timestamp. ','line_number':335,'multiline':True]['text':' Advance the oldest timestamp to the most recently set stable timestamp. ','line_number':339,'multiline':True]['text':'
             * Random value between 4 and 8 seconds. Use the extra random generator as the tier
             * sleep delay doesn't affect the actual data content.
             ','line_number':347,'multiline':True]['text':' Just find out if we should flush_tier. ','line_number':353,'multiline':True]['text':' To be able to replay, print the stable timestamp the test stopped at. ','line_number':359,'multiline':True]['text':'
 * do_cursor_next --
 *     Wrapper around cursor->next to handle retry cases.
 ','line_number':371,'multiline':True]['text':'
             * In FLCS deleted values read back as 0; skip over them. We've arranged to avoid
             * writing out any of our own zero values so this check won't generate false positives.
             ','line_number':383,'multiline':True]['text':'
 * do_cursor_prev --
 *     Wrapper around cursor->prev to handle retry cases.
 ','line_number':405,'multiline':True]['text':'
             * In FLCS deleted values read back as 0; skip over them. We've arranged to avoid
             * writing out any of our own zero values so this check won't generate false positives.
             ','line_number':417,'multiline':True]['text':'
 * verify_consistency --
 *     Open a cursor on each table at the last checkpoint and walk through the tables in parallel.
 *     The key/values should match across all tables.
 ','line_number':439,'multiline':True]['text':'
         * TODO: LSM doesn't currently support reading from checkpoints.
         ','line_number':473,'multiline':True]['text':' Pick a reference table: the first table that's not FLCS and not LSM, if possible; else 0. ','line_number':487,'multiline':True]['text':' There's no way to verify LSM-only runs. ','line_number':495,'multiline':True]['text':' Advance the reference table's cursor. ','line_number':503,'multiline':True]['text':'
         * Check to see that all remaining cursors have the same key/value pair.
         ','line_number':511,'multiline':True]['text':'
             * TODO: LSM doesn't currently support reading from checkpoints.
             ','line_number':518,'multiline':True]['text':'
 * compare_cursors --
 *     Compare the key/value pairs from two cursors, which might be different table types.
 ','line_number':561,'multiline':True]['text':'
     * Get the values. For all table types set both the string value (so we can print) and the FLCS
     * value.
     ','line_number':578,'multiline':True]['text':'
     * The FLCS value encoding loses information, so if an FLCS table tells us FLCS_UNKNOWN we have
     * to treat it as matching any value from another table type.
     ','line_number':614,'multiline':True]['text':' If either table is FLCS, compare the 8-bit values; otherwise the strings. ','line_number':623,'multiline':True]['text':'
 * diagnose_key_error --
 *     Dig a bit deeper on failure. Continue after some failures here to extract as much information
 *     as we can.
 ','line_number':645,'multiline':True]['text':' Hack to avoid passing session as parameter. ','line_number':660,'multiline':True]['text':' Save the failed keys. ','line_number':666,'multiline':True]['text':'
     * Note: for now the code below hasn't been adapted for FLCS (where it would need to skip zero
     * values when searching forward and backward) because that's a fairly large nuisance and it's
     * not, at least for the moment, all that helpful. FUTURE.
     ','line_number':675,'multiline':True]['text':' See if previous values are still valid. ','line_number':681,'multiline':True]['text':'
     * Now try opening new cursors on the checkpoints and see if we get the same missing key via
     * searching.
     ','line_number':703,'multiline':True]['text':'
     * Now try opening cursors on the live checkpoint to see if we get the same missing key via
     * searching.
     ','line_number':732,'multiline':True]