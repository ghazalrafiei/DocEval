['text':' Copyright (c) 2008-2012 testtools developers. See LICENSE for details.','line_number':1,'multiline':False]['text':' The id() of a PlaceHolder is whatever you pass into the constructor.','line_number':70,'multiline':False]['text':' The shortDescription() of a PlaceHolder is the id, by default.','line_number':75,'multiline':False]['text':' If a shortDescription is provided to the constructor, then','line_number':80,'multiline':False]['text':' shortDescription() returns that instead.','line_number':81,'multiline':False]['text':' repr(placeholder) shows you how the object was constructed.','line_number':86,'multiline':False]['text':' repr(placeholder) shows you how the object was constructed.','line_number':93,'multiline':False]['text':' A placeholder test counts as one test.','line_number':106,'multiline':False]['text':' str(placeholder) is always the id(). We are not barbarians.','line_number':111,'multiline':False]['text':' When run, a PlaceHolder test records a success.','line_number':116,'multiline':False]['text':' A PlaceHolder can be called, in which case it behaves like run.','line_number':155,'multiline':False]['text':' A PlaceHolder can be run without a result, in which case there's no','line_number':164,'multiline':False]['text':' way to actually get at the result.','line_number':165,'multiline':False]['text':' A PlaceHolder can be debugged.','line_number':169,'multiline':False]['text':' Note that these tests exist because ErrorHolder exists - it could be','line_number':187,'multiline':False]['text':' deprecated and dropped at this point.','line_number':188,'multiline':False]['text':' The id() of a PlaceHolder is whatever you pass into the constructor.','line_number':205,'multiline':False]['text':' The shortDescription() of a PlaceHolder is the id, by default.','line_number':210,'multiline':False]['text':' If a shortDescription is provided to the constructor, then','line_number':215,'multiline':False]['text':' shortDescription() returns that instead.','line_number':216,'multiline':False]['text':' A placeholder test counts as one test.','line_number':221,'multiline':False]['text':' str(placeholder) is always the id(). We are not barbarians.','line_number':226,'multiline':False]['text':' When run, an ErrorHolder test records an error.','line_number':231,'multiline':False]['text':' A PlaceHolder can be called, in which case it behaves like run.','line_number':245,'multiline':False]['text':' A PlaceHolder can be run without a result, in which case there's no','line_number':254,'multiline':False]['text':' way to actually get at the result.','line_number':255,'multiline':False]['text':' A PlaceHolder can be debugged.','line_number':259,'multiline':False]['text':' TestCase's are equal if they are identical.','line_number':269,'multiline':False]['text':' TestCase's are not equal if they are not identical.','line_number':273,'multiline':False]['text':' Given a single class, _formatTypes returns the name.','line_number':287,'multiline':False]['text':' Given multiple types, _formatTypes returns the names joined by','line_number':293,'multiline':False]['text':' commas.','line_number':294,'multiline':False]['text':' assertRaises asserts that a callable raises a particular exception.','line_number':302,'multiline':False]['text':' assertRaises works when called for exceptions with custom metaclasses','line_number':306,'multiline':False]['text':' assertRaises raises self.failureException when it's passed a','line_number':319,'multiline':False]['text':' callable that raises no error.','line_number':320,'multiline':False]['text':' assertRaises re-raises an exception that it didn't expect.','line_number':327,'multiline':False]['text':' assertRaises returns the exception object that was raised. This is','line_number':333,'multiline':False]['text':' useful for testing that exceptions have the right message.','line_number':334,'multiline':False]['text':' This contraption stores the raised exception, so we can compare it','line_number':336,'multiline':False]['text':' to the return value of assertRaises.','line_number':337,'multiline':False]['text':' assertRaises((ExceptionOne, ExceptionTwo), function) asserts that','line_number':353,'multiline':False]['text':' function raises one of ExceptionTwo or ExceptionOne.','line_number':354,'multiline':False]['text':' If assertRaises is called expecting one of a group of exceptions and','line_number':362,'multiline':False]['text':' a callable that doesn't raise an exception, then fail with an','line_number':363,'multiline':False]['text':' appropriate error message.','line_number':364,'multiline':False]['text':' When assertRaises fails, it includes the repr of the invoked','line_number':373,'multiline':False]['text':' function in the error message, so it's easy to locate the problem.','line_number':374,'multiline':False]['text':' assertIn(needle, haystack) asserts that 'needle' is in 'haystack'.','line_number':390,'multiline':False]['text':' assertIn(needle, haystack) fails the test when 'needle' is not in','line_number':396,'multiline':False]['text':' 'haystack'.','line_number':397,'multiline':False]['text':' assertNotIn(needle, haystack) asserts that 'needle' is not in','line_number':404,'multiline':False]['text':' 'haystack'.','line_number':405,'multiline':False]['text':' assertNotIn(needle, haystack) fails the test when 'needle' is in','line_number':410,'multiline':False]['text':' 'haystack'.','line_number':411,'multiline':False]['text':' assertIsInstance asserts that an object is an instance of a class.','line_number':419,'multiline':False]['text':' assertIsInstance asserts that an object is an instance of one of a','line_number':428,'multiline':False]['text':' group of classes.','line_number':429,'multiline':False]['text':' assertIsInstance(obj, klass) fails the test when obj is not an','line_number':442,'multiline':False]['text':' instance of klass.','line_number':443,'multiline':False]['text':' assertIsInstance(obj, (klass1, klass2)) fails the test when obj is','line_number':453,'multiline':False]['text':' not an instance of klass1 or klass2.','line_number':454,'multiline':False]['text':' assertIsInstance(obj, klass, msg) permits a custom message.','line_number':467,'multiline':False]['text':' assertIs asserts that an object is identical to another object.','line_number':472,'multiline':False]['text':' assertIs raises assertion errors if one object is not identical to','line_number':480,'multiline':False]['text':' another.','line_number':481,'multiline':False]['text':' assertIs raises assertion errors if one object is not identical to','line_number':486,'multiline':False]['text':' another, and includes a user-supplied message, if it's provided.','line_number':487,'multiline':False]['text':' assertIsNot asserts that an object is not identical to another','line_number':492,'multiline':False]['text':' object.','line_number':493,'multiline':False]['text':' assertIsNot raises assertion errors if one object is identical to','line_number':499,'multiline':False]['text':' another.','line_number':500,'multiline':False]['text':' assertIsNot raises assertion errors if one object is identical to','line_number':507,'multiline':False]['text':' another, and includes a user-supplied message if it's provided.','line_number':508,'multiline':False]['text':' We aren't at all interested in the traceback.','line_number':595,'multiline':False]['text':' We aren't interested in how the exception type is formatted.','line_number':602,'multiline':False]['text':' When assertThat is given matchees or matchers that contain non-ASCII','line_number':607,'multiline':False]['text':' unicode strings, we can still provide a meaningful error.','line_number':608,'multiline':False]['text':' A tearDown that deliberately fails.','line_number':703,'multiline':False]['text':' A normal run of self.test logs 'setUp', 'runTest' and 'tearDown'.','line_number':742,'multiline':False]['text':' This test doesn't test addCleanup itself, it just sanity checks the','line_number':743,'multiline':False]['text':' fixture.','line_number':744,'multiline':False]['text':' Cleanup functions added with 'addCleanup' are called before tearDown','line_number':749,'multiline':False]['text':' runs.','line_number':750,'multiline':False]['text':' Cleanup functions added with 'addCleanup' are called even if setUp','line_number':756,'multiline':False]['text':' fails. Note that tearDown has a different behavior: it is only','line_number':757,'multiline':False]['text':' called when setUp succeeds.','line_number':758,'multiline':False]['text':' Cleanup functions added with 'addCleanup' are called in reverse','line_number':765,'multiline':False]['text':' order.','line_number':766,'multiline':False]['text':'','line_number':767,'multiline':False]['text':' One of the main uses of addCleanup is to dynamically create','line_number':768,'multiline':False]['text':' resources that need some sort of explicit tearDown. Often one','line_number':769,'multiline':False]['text':' resource will be created in terms of another, e.g.,','line_number':770,'multiline':False]['text':'     self.first = self.makeFirst()','line_number':771,'multiline':False]['text':'     self.second = self.makeSecond(self.first)','line_number':772,'multiline':False]['text':'','line_number':773,'multiline':False]['text':' When this happens, we generally want to clean up the second resource','line_number':774,'multiline':False]['text':' before the first one, since the second depends on the first.','line_number':775,'multiline':False]['text':' tearDown runs even if a cleanup function fails.','line_number':783,'multiline':False]['text':' All cleanups are always run, even if one or two of them fail.','line_number':789,'multiline':False]['text':' If a cleanup raises an error, we want to record it and fail the the','line_number':798,'multiline':False]['text':' test, even though we go on to run other cleanups.','line_number':799,'multiline':False]['text':' If a cleanup raises KeyboardInterrupt, it gets reraised.','line_number':805,'multiline':False]['text':' When a MultipleExceptions exception is caught, all the errors are','line_number':813,'multiline':False]['text':' reported.','line_number':814,'multiline':False]['text':' Errors from all failing cleanups are reported as separate backtraces.','line_number':834,'multiline':False]['text':' Errors from all failing cleanups are reported, with stopTest,','line_number':845,'multiline':False]['text':' startTest inserted.','line_number':846,'multiline':False]['text':' Checking the TB is right is rather tricky. doctest line matching','line_number':880,'multiline':False]['text':' would help, but 'meh'.','line_number':881,'multiline':False]['text':' getUniqueInteger returns an integer that increments each time you','line_number':962,'multiline':False]['text':' call it.','line_number':963,'multiline':False]['text':' getUniqueString returns the current test id followed by a unique','line_number':970,'multiline':False]['text':' integer.','line_number':971,'multiline':False]['text':' If getUniqueString is given an argument, it uses that argument as','line_number':978,'multiline':False]['text':' the prefix of the unique string, rather than the test id.','line_number':979,'multiline':False]['text':' TestCase.patch masks obj.attribute with the new value.','line_number':1312,'multiline':False]['text':' TestCase.patch masks obj.attribute with the new value, but restores','line_number':1319,'multiline':False]['text':' the original value after the test is finished.','line_number':1320,'multiline':False]['text':' TestCase.patch can be called multiple times per test. Each time you','line_number':1328,'multiline':False]['text':' call it, it overrides the original value.','line_number':1329,'multiline':False]['text':' TestCase.patch restores the original value, no matter how many times','line_number':1337,'multiline':False]['text':' it was called.','line_number':1338,'multiline':False]['text':' TestCase.patch can be used to patch a non-existent attribute.','line_number':1347,'multiline':False]['text':' TestCase.patch can be used to patch a non-existent attribute, after','line_number':1353,'multiline':False]['text':' the test run, the attribute is then removed from the object.','line_number':1354,'multiline':False]['text':' The repr() of nullary is the same as the repr() of the wrapped','line_number':1399,'multiline':False]['text':' function.','line_number':1400,'multiline':False]['text':' The function is called with the arguments given to Nullary's','line_number':1407,'multiline':False]['text':' constructor.','line_number':1408,'multiline':False]['text':' Calling Nullary returns whatever the function returns.','line_number':1417,'multiline':False]['text':' If the function raises, so does Nullary when called.','line_number':1423,'multiline':False]['text':' Adding an attr to a test changes its id().','line_number':1431,'multiline':False]['text':' Not sorted here, forward or backwards.','line_number':1442,'multiline':False]['text':' Not sorted here, forward or backwards.','line_number':1453,'multiline':False]