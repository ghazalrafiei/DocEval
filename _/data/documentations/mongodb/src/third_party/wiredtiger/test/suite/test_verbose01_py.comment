['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Shared base class used by verbose tests.','line_number':35,'multiline':False]['text':' The maximum number of lines we will read from stdout in any given context.','line_number':37,'multiline':False]['text':' The JSON schema we expect all messages to follow. Captures all possible fields, detailing','line_number':40,'multiline':False]['text':' each field's name, associated type and whether we always expect for that field to be','line_number':41,'multiline':False]['text':' present.','line_number':42,'multiline':False]['text':' Validates the JSON schema of a given event handler message, ensuring the schema is consistent and expected.','line_number':59,'multiline':False]['text':' Assert the JSON field is valid and expected.','line_number':64,'multiline':False]['text':' Assert the type of the JSON field is expected.','line_number':67,'multiline':False]['text':' Go through the remaining fields in the schema and ensure we've seen all the fields that are always expected be present','line_number':74,'multiline':False]['text':' in the JSON message','line_number':75,'multiline':False]['text':' Validates the verbose category (and ID) in a JSON message is expected.','line_number':80,'multiline':False]['text':' Assert the category field is in the JSON message.','line_number':82,'multiline':False]['text':' Assert the category field values in the JSON message are expected.','line_number':85,'multiline':False]['text':' Clean the stdout resource before yielding the context to the execution block. We only want to','line_number':97,'multiline':False]['text':' capture the verbose output of the using context (ignoring any previous output up to this point).','line_number':98,'multiline':False]['text':' Create a new connection with the given verbose categories.','line_number':100,'multiline':False]['text':' Enable JSON output if required.','line_number':102,'multiline':False]['text':' Yield the connection resource to the execution context, allowing it to perform any necessary','line_number':106,'multiline':False]['text':' operations on the connection (for generating the expected verbose output).','line_number':107,'multiline':False]['text':' Read the contents of stdout to extract our verbose messages.','line_number':109,'multiline':False]['text':' Split the output into their individual messages. We want validate the contents of each message','line_number':111,'multiline':False]['text':' to ensure we've only generated verbose messages for the expected categories.','line_number':112,'multiline':False]['text':' If we've read the maximum number of characters, its likely that the last line is truncated ('...'). In this','line_number':121,'multiline':False]['text':' case, trim the last message as we can't parse it.','line_number':122,'multiline':False]['text':' Test the contents of each verbose message, ensuring it satisfies the expected pattern.','line_number':125,'multiline':False]['text':' To avoid truncated messages, slice out the last message string in the','line_number':127,'multiline':False]['text':' Check JSON validity','line_number':129,'multiline':False]['text':' Close the connection resource and clean up the contents of the stdout file, flushing out the','line_number':139,'multiline':False]['text':' verbose output that occurred during the execution of this context.','line_number':140,'multiline':False]['text':' test_verbose01.py','line_number':144,'multiline':False]['text':' Verify basic uses of the verbose configuration API work as intended i.e. passing','line_number':145,'multiline':False]['text':' single & multiple valid and invalid verbose categories. These tests are mainly focused on uses','line_number':146,'multiline':False]['text':' of the interface prior to the introduction of verbosity levels, ensuring 'legacy'-style','line_number':147,'multiline':False]['text':' uses of the interface are still supported.','line_number':148,'multiline':False]['text':' Test use cases passing single verbose categories, ensuring we only produce verbose output for the single category.','line_number':159,'multiline':False]['text':' Close the initial connection. We will be opening new connections with different verbosity settings throughout','line_number':162,'multiline':False]['text':' this test.','line_number':163,'multiline':False]['text':' Test passing a single verbose category, 'api'. Ensuring the only verbose output generated is related to','line_number':166,'multiline':False]['text':' the 'api' category.','line_number':167,'multiline':False]['text':' Perform a set of simple API operations (table creations and cursor operations) to generate verbose API','line_number':169,'multiline':False]['text':' messages.','line_number':170,'multiline':False]['text':' Test passing another single verbose category, 'compact'. Ensuring the only verbose output generated is related to','line_number':179,'multiline':False]['text':' the 'compact' category.','line_number':180,'multiline':False]['text':' Create a simple table to invoke compaction on. We aren't doing anything interesting with the table','line_number':182,'multiline':False]['text':' such that the data source will be compacted. Rather we want to simply invoke a compaction pass to','line_number':183,'multiline':False]['text':' generate verbose messages.','line_number':184,'multiline':False]['text':' Test use cases passing multiple verbose categories, ensuring we only produce verbose output for specified categories.','line_number':191,'multiline':False]['text':' Test passing multiple verbose categories, being 'api' & 'version'. Ensuring the only verbose output generated','line_number':194,'multiline':False]['text':' is related to those two categories.','line_number':195,'multiline':False]['text':' Perform a set of simple API operations (table creations and cursor operations) to generate verbose API','line_number':197,'multiline':False]['text':' messages. Beyond opening the connection resource, we shouldn't need to do anything special for the version','line_number':198,'multiline':False]['text':' category.','line_number':199,'multiline':False]['text':' Test use cases passing no verbose categories, ensuring we don't produce unexpected verbose output.','line_number':207,'multiline':False]['text':' Testing passing an empty set of categories. Ensuring no verbose output is generated.','line_number':210,'multiline':False]['text':' Perform a set of simple API operations (table creations and cursor operations). Ensuring no verbose messages','line_number':212,'multiline':False]['text':' are generated.','line_number':213,'multiline':False]['text':' Test use cases passing invalid verbose categories, ensuring the appropriate error message is','line_number':221,'multiline':False]['text':' raised.','line_number':222,'multiline':False]