['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * In this test, we want to verify search_near with bounds enabled when performing unique index
 * insertions. For the test duration:
 *  - N thread will perform unique index insertions on existing keys in the table. These insertions
 * are expected to fail.
 *  - M threads will traverse the collections and ensure that the number of records in the
 * collections don't change.
 ','line_number':37,'multiline':True]['text':' A 2D array consisted of a mapping between each collection and their inserted prefixes. ','line_number':46,'multiline':True]['text':'
     * Here's how we insert an entry into a unique index:
     * 1. Insert the prefix.
     * 2. Remove the prefix.
     * 3. Search near for the prefix. In the case we find a record, we stop here as a value with the
     * prefix already exists in the table. Otherwise if the record is not found, we can proceed to
     * insert the full value.
     * 4. Insert the full value (prefix, id).
     * All of these operations are wrapped in the same transaction.
     ','line_number':56,'multiline':True]['text':' Insert the prefix. ','line_number':74,'multiline':True]['text':' Remove the prefix. ','line_number':80,'multiline':True]['text':'
         * Bounded search near for the prefix. We expect that the prefix is not visible to us and a
         * WT_NOTFOUND error code is returned. If the prefix is present it means the (prefix, id)
         * has been inserted already. Double check that the prefix potion matches.
         ','line_number':84,'multiline':True]['text':' Now insert the key with prefix and id. Use thread id to guarantee uniqueness. ','line_number':102,'multiline':True]['text':'
         * Each populate thread perform unique index insertions on each collection, with a randomly
         * generated prefix and thread id.
         ','line_number':116,'multiline':True]['text':'
             * Generate the prefix key, and append a random generated key string based on the key
             * size configuration.
             ','line_number':124,'multiline':True]['text':' Validate our config. ','line_number':158,'multiline':True]['text':' Create n collections as per the configuration. ','line_number':171,'multiline':True]['text':'
             * The database model will call into the API and create the collection, with its own
             * session.
             ','line_number':173,'multiline':True]['text':' Spawn a populate thread for each collection in the database. ','line_number':179,'multiline':True]['text':' Wait for our populate threads to finish and then join them. ','line_number':187,'multiline':True]['text':' Cleanup our workers. ','line_number':191,'multiline':True]['text':'
         * Construct a mapping of all the inserted prefixes to their respective collections. We
         * traverse through each collection using a cursor to collect the prefix and push it into a
         * 2D vector.
         ','line_number':197,'multiline':True]['text':'
         * Each insert operation will attempt to perform unique index insertions with an existing
         * prefix on a collection.
         ','line_number':231,'multiline':True]['text':' Get a collection and find a cached cursor. ','line_number':239,'multiline':True]['text':' Do a second lookup now that we know it exists. ','line_number':244,'multiline':True]['text':'
             * Grab a random existing prefix and perform unique index insertion. We expect it to
             * fail to insert, because it should already exist.
             ','line_number':247,'multiline':True]['text':'
         * Each read thread will count the number of keys in each collection, and will double check
         * if the size of the table hasn't changed.
         ','line_number':272,'multiline':True]