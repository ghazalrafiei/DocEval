['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Program working dir ','line_number':34,'multiline':True]['text':'
 * Spin up a child process to do operations and checkpoint. For each set of operations on a key,
 * insert key X at timestamp X, move the stable timestamp to X, and delete the key at timestamp X+1.
 * If the amount of data is larger than MAX_DATA, move the oldest timestamp to make half of the data
 * obsolete.
 *
 * In verification, kill the child process and reopen the database to run recovery. Query the
 * database to get the stable and oldest timestamp. For keys from oldest to stable timestamp, make
 * sure each key X is visible at timestamp X.
 *
 * The test is only for non-logged tables. For logged tables, the current implementation only
 * guarantees the user to see a consistent snapshot view of data at the last successful commit after
 * recovery by reading without a timestamp. Whether it is possible to read historical versions based
 * on timestamps from a logged table after recovery is not defined and implemented yet.
 ','line_number':37,'multiline':True]['text':' Maximum interval between checkpoints ','line_number':54,'multiline':True]['text':'
 * usage --
 *     TODO: Add a comment describing this function.
 ','line_number':74,'multiline':True]['text':'
 * thread_ckpt_run --
 *     Runner function for the checkpoint thread.
 ','line_number':85,'multiline':True]['text':' Keep a separate file with the records we wrote for checking. ','line_number':104,'multiline':True]['text':' Run checkpoint with timestamps. ','line_number':111,'multiline':True]['text':'
         * Create the checkpoint file so that the parent process knows at least one checkpoint has
         * finished with the oldest timestamp set so it can start its timer.
         ','line_number':117,'multiline':True]['text':' NOTREACHED ','line_number':126,'multiline':True]['text':'
 * thread_run --
 *     Runner function for the worker thread.
 ','line_number':129,'multiline':True]['text':' Insert and then delete the keys until we're killed. ','line_number':149,'multiline':True]['text':' Insert the same value for key and value. ','line_number':154,'multiline':True]['text':' Update stable timestamp to the current timestamp. ','line_number':167,'multiline':True]['text':' Remove the key using a higher timestamp. ','line_number':171,'multiline':True]['text':' Set the oldest timestamp to make half of the data obsolete. ','line_number':178,'multiline':True]['text':' NOTREACHED ','line_number':185,'multiline':True]['text':'
 * run_workload --
 *     Child process creates the database and table, and then creates the worker thread to add data
 *     until it is killed by the parent.
 ','line_number':190,'multiline':True]['text':' Create the table. ','line_number':214,'multiline':True]['text':' The checkpoint thread is added at the end. ','line_number':220,'multiline':True]['text':' The threads never exit, so the child will just wait here until it is killed. ','line_number':226,'multiline':True]['text':' NOTREACHED ','line_number':231,'multiline':True]['text':'
 * handler --
 *     Signal handler to catch if the child died unexpectedly.
 ','line_number':236,'multiline':True]['text':' The core file will indicate why the child exited. Choose EINVAL here. ','line_number':247,'multiline':True]['text':'
 * main --
 *     TODO: Add a comment describing this function.
 ','line_number':254,'multiline':True]['text':' Variable-length columns only (for now) ','line_number':286,'multiline':True]['text':'
     * Fork a child to insert and delete as many items. We will then randomly kill the child, run
     * recovery and make sure all items from the oldest to stable timestamps of the checkpoint exist
     * after recovery runs.
     ','line_number':317,'multiline':True]['text':' child ','line_number':327,'multiline':True]['text':' NOTREACHED ','line_number':329,'multiline':True]['text':' parent ','line_number':332,'multiline':True]['text':'
     * Sleep for the configured amount of time before killing the child. Start the timeout from the
     * time we notice that the file has been created. That allows the test to run correctly on
     * really slow machines.
     ','line_number':333,'multiline':True]['text':'
     * !!! If we wanted to take a copy of the directory before recovery,
     * this is the place to do it. Don't do it all the time because
     * it can use a lot of disk space, which can cause test machine
     * issues.
     ','line_number':348,'multiline':True]['text':' Copy the data to a separate folder for debugging purpose. ','line_number':357,'multiline':True]['text':' Open the connection which forces recovery to be run. ','line_number':362,'multiline':True]['text':' Get the stable timestamp from the stable timestamp of the last successful checkpoint. ','line_number':366,'multiline':True]['text':' Get the oldest timestamp from the oldest timestamp of the last successful checkpoint. ','line_number':370,'multiline':True]['text':' Open a cursor on the table. ','line_number':377,'multiline':True]['text':' At this point $PATH is inside `home`, which we intend to delete. cd to the parent dir. ','line_number':403,'multiline':True]