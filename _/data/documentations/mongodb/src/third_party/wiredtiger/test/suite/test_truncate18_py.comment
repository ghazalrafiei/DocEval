['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_truncate18.py','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' The optimization that replaces deleted pages full of obsolete values with physically','line_number':36,'multiline':False]['text':' empty pages can cause problems, because for some purposes the empty page is not','line_number':37,'multiline':False]['text':' equivalent.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' In particular, the key order checks in row-store verify depend on the keys being','line_number':40,'multiline':False]['text':' physically present, and loading an empty page defeats that. This is more or less','line_number':41,'multiline':False]['text':' harmless except in the case of the leftmost leaf page, whose keys are used to','line_number':42,'multiline':False]['text':' initialize the check.','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' It is not entirely trivial to reach the failure state, because the page under the start','line_number':45,'multiline':False]['text':' point of a truncate is never fast-truncated and that in turn means the leftmost page of','line_number':46,'multiline':False]['text':' the tree is never fast-truncated. Consequently, to get a deleted leftmost leaf we must','line_number':47,'multiline':False]['text':' truncate a range the beginning of the tree and then cause at least the first page of the','line_number':48,'multiline':False]['text':' range to be discarded while keeping some of the rest of it.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' The only way I've thought of to do this is to truncate a range that spans more than one','line_number':51,'multiline':False]['text':' internal page. Then the first internal page of the range can be reconciled (required to','line_number':52,'multiline':False]['text':' discard the non-deleted leftmost page) without discarding the whole truncated range.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' Consequently we crank down internal_page_max to avoid needing an excessively large test.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' Then we set things up so that the truncation becomes globally visible and run verify.','line_number':57,'multiline':False]['text':' That currently asserts. The fix for this is likely to disable the optimization when in','line_number':58,'multiline':False]['text':' verify, so the only real purpose of this test is to prevent the behavior from regressing.','line_number':59,'multiline':False]['text':' It is therefore not full of scenarios but specific to this one problem.','line_number':60,'multiline':False]['text':' Hook to run using remove instead of truncate for reference. This should not alter the','line_number':66,'multiline':False]['text':' behavior... but may if things are broken. Disable the reference version by default as it's','line_number':67,'multiline':False]['text':' only useful when investigating behavior changes. This list is first in the make_scenarios','line_number':68,'multiline':False]['text':' call so the additional cases don't change the scenario numbering.','line_number':69,'multiline':False]['text':'('remove', dict(trunc_with_remove=True)),','line_number':72,'multiline':False]['text':' Truncate, from keynum1 to keynum2, inclusive.','line_number':84,'multiline':False]['text':' With the small internal pages, 10000 rows is enough. 5000 rows is not.','line_number':120,'multiline':False]['text':' Create a table.','line_number':123,'multiline':False]['text':' Pin oldest and stable timestamps to 1.','line_number':137,'multiline':False]['text':' Write some baseline data at time 10.','line_number':141,'multiline':False]['text':' Mark it stable.','line_number':152,'multiline':False]['text':' Reopen the connection again so nothing is in memory and we can fast-truncate.','line_number':155,'multiline':False]['text':' Truncate most of the tree at time 20. Including either the start or end of the tree.','line_number':158,'multiline':False]['text':' Make sure we did at least one fast-delete. (Unless we specifically didn't want to,','line_number':168,'multiline':False]['text':' or running on FLCS where it isn't supported.)','line_number':169,'multiline':False]['text':' There's no way the test can guess whether fast delete is possible when','line_number':173,'multiline':False]['text':' flush_tier calls are "randomly" inserted.','line_number':174,'multiline':False]['text':' Mark all this stable.','line_number':182,'multiline':False]['text':' Reopen the connection again so everything is purely on disk.','line_number':185,'multiline':False]['text':' Age out the baseline data, so the pages we truncated contain entirely obsolete data.','line_number':188,'multiline':False]['text':' Since we didn't fast-truncate the first page (one can't) we need to get it','line_number':191,'multiline':False]['text':' discarded by forcing it to reconcile empty. This will also discard all the','line_number':192,'multiline':False]['text':' fast-truncated pages that are children of the first internal page. For the','line_number':193,'multiline':False]['text':' test to work we need to have more fast-truncated pages beyond that, but there','line_number':194,'multiline':False]['text':' is no good way to crosscheck if we do.','line_number':195,'multiline':False]['text':' Mark this change stable (and age out the scratch value we wrote) and checkpoint it.','line_number':206,'multiline':False]['text':' This will reconcile the first leaf page and the first internal page, and internal','line_number':207,'multiline':False]['text':' pages above that, but leave the second internal page alone since we did nothing to','line_number':208,'multiline':False]['text':' bring it into memory.','line_number':209,'multiline':False]['text':' Reopen the connection yet again.','line_number':214,'multiline':False]['text':' Now verify the tree. In the problem scenario described above, this will assert.','line_number':217,'multiline':False]