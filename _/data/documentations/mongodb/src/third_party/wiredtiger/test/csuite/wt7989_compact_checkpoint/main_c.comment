['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * This test executes two test cases:
 * - One with WT_TIMING_STRESS_CHECKPOINT_SLOW flag. It adds 10 seconds sleep before each
 * checkpoint.
 * - Another test case synchronizes compact and checkpoint threads by forcing them to wait
 * until both threads have started.
 * The reason we have two tests here is that they give different output when configured
 * with "verbose=[compact,compact_progress]". There's a chance these two cases are different.
 ','line_number':30,'multiline':True]['text':' Constants and variables declaration. ','line_number':45,'multiline':True]['text':'
 * You may want to add "verbose=[compact,compact_progress]" to the connection config string to get
 * better view on what is happening.
 ','line_number':46,'multiline':True]['text':' Structures definition. ','line_number':60,'multiline':True]['text':' Forward declarations. ','line_number':67,'multiline':True]['text':'
 * main --
 *     Methods implementation.
 ','line_number':81,'multiline':True]['text':'
     * First, run test with WT_TIMING_STRESS_CHECKPOINT_SLOW. Row store case.
     ','line_number':94,'multiline':True]['text':'
     * Now, run test where compact and checkpoint threads are synchronized using global thread
     * counter. Row store case.
     ','line_number':99,'multiline':True]['text':'
     * Next, run test with WT_TIMING_STRESS_CHECKPOINT_SLOW. Column store case.
     ','line_number':105,'multiline':True]['text':'
     * Finally, run test where compact and checkpoint threads are synchronized using global thread
     * counter. Column store case.
     ','line_number':110,'multiline':True]['text':'
 * run_test_clean --
 *     TODO: Add a comment describing this function.
 ','line_number':121,'multiline':True]['text':' Cleanup ','line_number':140,'multiline':True]['text':'
 * run_test --
 *     TODO: Add a comment describing this function.
 ','line_number':145,'multiline':True]['text':'
         * Set WT_TIMING_STRESS_CHECKPOINT_SLOW flag for stress test. It adds 10 seconds sleep
         * before each checkpoint.
         ','line_number':163,'multiline':True]['text':' Create and populate table. Checkpoint the data after that. ','line_number':172,'multiline':True]['text':'
     * Remove 1/3 of data from the middle of the key range to let compact relocate blocks from the
     * end of the file.
     ','line_number':179,'multiline':True]['text':' Spawn checkpoint and compact threads. Order is important! ','line_number':189,'multiline':True]['text':' Wait for the threads to finish the work. ','line_number':193,'multiline':True]['text':' Collect compact progress stats. ','line_number':197,'multiline':True]['text':'
     * Check if there's more than 10% available space in the file. Checking result here to allow
     * connection to close properly.
     ','line_number':212,'multiline':True]['text':'
 * thread_func_compact --
 *     TODO: Add a comment describing this function.
 ','line_number':219,'multiline':True]['text':' Wait until both checkpoint and compact threads are ready to go. ','line_number':234,'multiline':True]['text':' Perform compact operation. ','line_number':240,'multiline':True]['text':'
 * thread_func_checkpoint --
 *     TODO: Add a comment describing this function.
 ','line_number':249,'multiline':True]['text':' Wait until both checkpoint and compact threads are ready to go. ','line_number':269,'multiline':True]['text':'
     * Run several checkpoints. First one without any delay. Others will have a random delay before
     * start.
     ','line_number':275,'multiline':True]['text':'
 * thread_wait --
 *     Loop to constantly yield the calling thread until all threads are ready.
 ','line_number':295,'multiline':True]['text':'
 * populate --
 *     TODO: Add a comment describing this function.
 ','line_number':313,'multiline':True]['text':'
 * remove_records --
 *     TODO: Add a comment describing this function.
 ','line_number':344,'multiline':True]['text':' Remove 1/3 of the records from the middle of the key range. ','line_number':356,'multiline':True]['text':'
 * get_file_stats --
 *     TODO: Add a comment describing this function.
 ','line_number':366,'multiline':True]['text':' Get file size. ','line_number':379,'multiline':True]['text':' Get bytes available for reuse. ','line_number':384,'multiline':True]['text':'
 * set_timing_stress_checkpoint --
 *     TODO: Add a comment describing this function.
 ','line_number':393,'multiline':True]['text':'
 * get_compact_progress --
 *     TODO: Add a comment describing this function.
 ','line_number':406,'multiline':True]['text':'
 * check_db_size --
 *     TODO: Add a comment describing this function.
 ','line_number':435,'multiline':True]['text':'
     * Compaction is a best-effort algorithm. It moves blocks from the end to the beginning of the
     * file but there is no guarantee that all empty space at the beginning will be filled. The
     * logic in the algorithm checks if at least 20% of the file is available in the first 80% of
     * the file, we'll try compaction on the last 20% of the file. Else if at least 10% of the total
     * file is available in the first 90% of the file, we'll try compaction on the last 10% of the
     * file. It may well happen that 9.9% of the space is available for reuse in the first 90% of
     * the file. And 9.9% available in the last 10% of the file. In this case, the algorithm would
     * give up. But total available space in the file would be 19.8%. So we need to check that there
     * is a maximum of 20% space available for reuse after compaction.
     ','line_number':451,'multiline':True]