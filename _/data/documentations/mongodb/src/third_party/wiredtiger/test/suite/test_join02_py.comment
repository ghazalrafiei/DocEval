['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_join02.py','line_number':32,'multiline':False]['text':'    Join operations','line_number':33,'multiline':False]['text':' Join several indices together, trying all comparison combinations','line_number':34,'multiline':False]['text':' Start our range from 1, since WT record numbers start at 1,','line_number':53,'multiline':False]['text':' it makes things work out nicer.','line_number':54,'multiline':False]['text':' zero pad so it sorts expectedly','line_number':60,'multiline':False]['text':' When we're running the bloom scenario, make it so the','line_number':78,'multiline':False]['text':' bloom filters are often shared. Make the number of','line_number':79,'multiline':False]['text':' hashes and number of bits per item so they don't always','line_number':80,'multiline':False]['text':' match up; WT should allow it.','line_number':81,'multiline':False]['text':' The first join cannot use a bloom filter','line_number':97,'multiline':False]['text':'self.tty('join(jc, ' + curleft.name + ' ' + c0 +','line_number':104,'multiline':False]['text':'         ' ' + str(curleft.low) + ')')','line_number':105,'multiline':False]['text':'self.tty('join(jc, ' + curright.name + ' ' + c1 +','line_number':119,'multiline':False]['text':'         ' ' + str(curright.high) + ')')','line_number':120,'multiline':False]['text':'self.tty('iteration expects ' + str(len(mbr)) +','line_number':133,'multiline':False]['text':'         ' entries: ' + str(mbr))','line_number':134,'multiline':False]['text':'self.tty('  iteration got key: ' + str(k0) + ',' + str(k1))','line_number':147,'multiline':False]['text':'self.tty('  iteration got values: ' + str([v0,v1,v2,v3,v4]))','line_number':148,'multiline':False]['text':'self.tty('  iteration expects values: ' + str(self.gen_values(i)))','line_number':149,'multiline':False]['text':' Use the primary table in one of the joins.','line_number':181,'multiline':False]['text':' Use various projections, which should not matter for ref cursors','line_number':182,'multiline':False]['text':' Attach extra properties to each cursor.  For cursors that','line_number':193,'multiline':False]['text':' may appear on the 'left' side of a range CA < x < CB,','line_number':194,'multiline':False]['text':' we give a low value of the range, and calculate the members','line_number':195,'multiline':False]['text':' of the set we expect to see for a 'gt' comparison, as well','line_number':196,'multiline':False]['text':' as the 'eq' comparison.  For cursors that appear on the','line_number':197,'multiline':False]['text':' 'right side of the range, we give a high value of the range,','line_number':198,'multiline':False]['text':' and calculate membership sets for 'lt' and 'eq'.','line_number':199,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' We've defined the low/high values so that there's a lot of','line_number':201,'multiline':False]['text':' overlap between the values when we're doing ranges.','line_number':202,'multiline':False]['text':'self.tty('Begin test: ' +','line_number':264,'multiline':False]['text':'         ','.join([str(i0),str(i1),str(i2),','line_number':265,'multiline':False]['text':'                   str(i3),str(i4)]))','line_number':266,'multiline':False]['text':' It shouldn't matter the order of the joins','line_number':272,'multiline':False]