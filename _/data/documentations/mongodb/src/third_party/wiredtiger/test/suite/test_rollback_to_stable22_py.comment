['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_rollback_to_stable22','line_number':32,'multiline':False]['text':' Test history store operations conflicting with rollback to stable. We're trying to trigger a','line_number':33,'multiline':False]['text':' history store eviction concurrently to a rollback to stable call. We'll do this by limiting','line_number':34,'multiline':False]['text':' the cache size to 100MB and performing 100MB worth of inserts while periodically calling rollback','line_number':35,'multiline':False]['text':' to stable.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' The machinery this tests is all underneath the access-method-specific parts of RTS (and the','line_number':38,'multiline':False]['text':' history store itself is always row-store) so it doesn't seem necessary or worthwhile to run','line_number':39,'multiline':False]['text':' this explicitly on VLCS or FLCS.','line_number':40,'multiline':False]['text':' Create a few tables and populate them with some initial data.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' Our way of preventing history store operations from interfering with rollback to stable's','line_number':51,'multiline':False]['text':' transaction check is by draining active evictions from each open dhandle.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' It's important that we have a few different tables to work with so that it's','line_number':54,'multiline':False]['text':' representative of a real situation. But also don't make the number too high relative to','line_number':55,'multiline':False]['text':' the number of updates or we may not have history for any of the tables.','line_number':56,'multiline':False]['text':' 100 bytes of data are being inserted into 1000 rows.','line_number':65,'multiline':False]['text':' This happens 1000 iterations.','line_number':66,'multiline':False]['text':' Overall, that's 100MB of data which is guaranteed to kick start eviction.','line_number':67,'multiline':False]['text':' Generate a value, timestamp and table based off the index.','line_number':69,'multiline':False]['text':' Perform updates.','line_number':74,'multiline':False]['text':' Every hundred updates, let's run rollback to stable. This is likely to happen during','line_number':77,'multiline':False]['text':' a history store eviction at least once.','line_number':78,'multiline':False]['text':' Put the timestamp backwards so we can rollback the updates we just did.','line_number':80,'multiline':False]