['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * kv_table_item::add_update --
 *     Add an update. Throw exception on error.
 ','line_number':41,'multiline':True]['text':'
 * kv_table_item::add_update --
 *     Add an update. Throw exception on error.
 ','line_number':52,'multiline':True]['text':'
 * kv_table_item::add_update_nolock --
 *     Add an update but without taking a lock (this assumes the caller has it). Throw an exception
 *     on error.
 ','line_number':63,'multiline':True]['text':' If this is a non-timestamped update, there cannot be existing timestamped updates. ','line_number':74,'multiline':True]['text':' Check for transaction conflicts. ','line_number':79,'multiline':True]['text':'
         * Check whether the update chain has an update that is not included in this transaction's
         * snapshot, or if it has an uncommitted update (regardless of whether it is included in its
         * transaction snapshot.
         ','line_number':82,'multiline':True]['text':' Can't conflict with self. ','line_number':90,'multiline':True]['text':'
                     * Cannot update a key with a more recent timestamp. If we do this, WiredTiger
                     * would abort during commit.
                     ','line_number':92,'multiline':True]['text':' Position the update. ','line_number':114,'multiline':True]['text':' If need be, fail if the key does not exist. ','line_number':117,'multiline':True]['text':' If need be, fail if the key exists. ','line_number':127,'multiline':True]['text':' Insert. ','line_number':134,'multiline':True]['text':'
 * kv_table_item::fail_with_rollback --
 *     Fail the given update and throw an exception indicating rollback.
 ','line_number':138,'multiline':True]['text':'
 * kv_table_item::contains_any --
 *     Check whether the table contains the given value. If there are multiple value associated with
 *     the given timestamp, return true if any of them match.
 ','line_number':151,'multiline':True]['text':' Position the cursor on the update that is right after the provided timestamp. ','line_number':163,'multiline':True]['text':'
     * If we are positioned at the beginning of the list, there are no visible updates given the
     * provided timestamp (i.e., with timestamp that is smaller than or equal to the provided
     * timestamp).
     ','line_number':166,'multiline':True]['text':'
     * Position the iterator to the latest visible update, if we consider only on the read
     * timestamp.
     ','line_number':174,'multiline':True]['text':' Skip any updates that are not visible due to the stable timestamp or the snapshot. ','line_number':180,'multiline':True]['text':' Check the update's visibility. ','line_number':188,'multiline':True]['text':' Otherwise go to the previous update (unless we are already at the beginning). ','line_number':192,'multiline':True]['text':' No more updates - we are done. ','line_number':194,'multiline':True]['text':' Now check all updates with the same commit timestamp. ','line_number':198,'multiline':True]['text':' Found one! ','line_number':203,'multiline':True]['text':' Otherwise go to the previous update (unless we are already at the beginning). ','line_number':207,'multiline':True]['text':'
 * kv_table_item::exists --
 *     Check whether the latest value exists.
 ','line_number':216,'multiline':True]['text':'
 * kv_table_item::exists --
 *     Check whether the latest value exists in the given checkpoint.
 ','line_number':226,'multiline':True]['text':'
 * kv_table_item::get --
 *     Get the corresponding value. Return NONE if not found. Throw an exception on error.
 ','line_number':236,'multiline':True]['text':'
     * See if the transaction wrote something - we read our own writes, irrespective of the read
     * timestamp.
     ','line_number':253,'multiline':True]['text':' Otherwise do a regular read using the transaction's read timestamp and snapshot. ','line_number':262,'multiline':True]['text':' Return the most recent visible value. ','line_number':265,'multiline':True]['text':'
             * The transaction snapshot includes only committed transactions, so no need to check
             * whether the update is actually committed.
             ','line_number':276,'multiline':True]['text':'
 * kv_table_item::fix_timestamps --
 *     Fix the commit and durable timestamps for the corresponding update. We need to do this,
 *     because WiredTiger transaction API specifies the commit timestamp after performing the
 *     operations, not before.
 ','line_number':289,'multiline':True]['text':'
     * Remove matching elements from the collection of updates. Note that we cannot use
     * std::equal_range here, because we are deleting from the collection, which has the side effect
     * of invalidating the "second" pointer returned from equal_range.
     ','line_number':302,'multiline':True]['text':'
 * kv_table_item::has_prepared --
 *     Check whether the item has any prepared updates for the given timestamp.
 ','line_number':329,'multiline':True]['text':'
 * kv_table_item::has_prepared_nolock --
 *     Check whether the item has any prepared updates without taking a lock.
 ','line_number':340,'multiline':True]['text':'
     * Check only updates with the initial commit timestamp. An update in a prepared transaction is
     * guaranteed to have that timestamp at this point.
     ','line_number':349,'multiline':True]['text':'
 * kv_table_item::rollback_to_stable --
 *     Roll back the table item to the latest stable timestamp and transaction snapshot.
 ','line_number':363,'multiline':True]['text':'
         * Remove an update if one or more of the following conditions are satisfied:
         *   1. It is not in the transaction snapshot (if provided).
         *   2. It is a prepared transaction.
         *   3. Its durable timestamp is after the stable timestamp.
         ','line_number':377,'multiline':True]['text':' Need to remove the transaction object, so that we don't leak memory. ','line_number':385,'multiline':True]['text':'
 * kv_table_item::rollback_updates --
 *     Roll back updates of an aborted transaction.
 ','line_number':393,'multiline':True]['text':' Need to remove the transaction object, so that we don't leak memory. ','line_number':403,'multiline':True]['text':' namespace model ','line_number':410,'multiline':True]