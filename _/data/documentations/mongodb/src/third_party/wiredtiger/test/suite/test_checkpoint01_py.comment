['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_checkpoint01.py','line_number':33,'multiline':False]['text':'    Checkpoint tests','line_number':34,'multiline':False]['text':' General checkpoint test: create an object containing sets of data associated','line_number':35,'multiline':False]['text':' with a set of checkpoints, then confirm the checkpoint's values are correct,','line_number':36,'multiline':False]['text':' including after other checkpoints are dropped.','line_number':37,'multiline':False]['text':' Each checkpoint has a key range and a "is dropped" flag.','line_number':45,'multiline':False]['text':' Add a set of records for a checkpoint.','line_number':58,'multiline':False]['text':' For each checkpoint entry, add/overwrite the specified records, then','line_number':67,'multiline':False]['text':' checkpoint the object, and verify it (which verifies all underlying','line_number':68,'multiline':False]['text':' checkpoints individually).','line_number':69,'multiline':False]['text':' Create a dictionary of sorted records a checkpoint should include.','line_number':75,'multiline':False]['text':' Create a dictionary of sorted records a checkpoint does include.','line_number':87,'multiline':False]['text':' For each existing checkpoint entry, verify it contains the records it','line_number':96,'multiline':False]['text':' should, and no other checkpoints exist.','line_number':97,'multiline':False]['text':' Physically verify the file, including the individual checkpoints.','line_number':99,'multiline':False]['text':' Main checkpoint test driver.','line_number':112,'multiline':False]['text':' Build a file with a set of checkpoints, and confirm they all have','line_number':114,'multiline':False]['text':' the correct key/value pairs.','line_number':115,'multiline':False]['text':' Drop a set of checkpoints sequentially, and each time confirm the','line_number':122,'multiline':False]['text':' contents of remaining checkpoints, and that dropped checkpoints','line_number':123,'multiline':False]['text':' don't appear.','line_number':124,'multiline':False]['text':' Drop remaining checkpoints, all subsequent checkpoint opens should','line_number':132,'multiline':False]['text':' fail.','line_number':133,'multiline':False]['text':' Check some specific cursor checkpoint combinations.','line_number':140,'multiline':False]['text':' Check that you cannot open a checkpoint that doesn't exist.','line_number':147,'multiline':False]['text':' Check that you can open checkpoints more than once.','line_number':157,'multiline':False]['text':' Check that you cannot drop a checkpoint if it's in use.','line_number':174,'multiline':False]['text':' Check creating an identically named checkpoint fails. */','line_number':184,'multiline':False]['text':' Check dropping the specific checkpoint fails.','line_number':187,'multiline':False]['text':' Check dropping all checkpoints fails.','line_number':190,'multiline':False]['text':' Check dropping other checkpoints succeeds (which also tests that you','line_number':194,'multiline':False]['text':' can create new checkpoints while other checkpoints are in-use).','line_number':195,'multiline':False]['text':' Close the cursor and repeat the failing commands, they should now','line_number':198,'multiline':False]['text':' succeed.','line_number':199,'multiline':False]['text':' Check that you can checkpoint targets.','line_number':205,'multiline':False]['text':' FIXME-WT-10836','line_number':222,'multiline':False]['text':' Create 3 objects, change one record to an easily recognizable string.','line_number':225,'multiline':False]['text':' Checkpoint all three objects.','line_number':241,'multiline':False]['text':' Update all 3 objects, then checkpoint two of the objects with the','line_number':244,'multiline':False]['text':' same checkpoint name.','line_number':245,'multiline':False]['text':' Confirm the checkpoint has the old value in objects that weren't','line_number':252,'multiline':False]['text':' checkpointed, and the new value in objects that were checkpointed.','line_number':253,'multiline':False]['text':' Check that you can't write checkpoint cursors.','line_number':258,'multiline':False]['text':' Check that WiredTigerCheckpoint works as a checkpoint specifier.','line_number':283,'multiline':False]['text':' Create an object, change one record to an easily recognizable string,','line_number':291,'multiline':False]['text':' then checkpoint it and open a cursor, confirming we see the correct','line_number':292,'multiline':False]['text':' value.   Repeat this action, we want to be sure the engine gets the','line_number':293,'multiline':False]['text':' latest checkpoint information each time.','line_number':294,'multiline':False]['text':' Update the object.','line_number':300,'multiline':False]['text':' Checkpoint the object.','line_number':305,'multiline':False]['text':' Verify the "last" checkpoint sees the correct value.','line_number':308,'multiline':False]['text':' Don't close the checkpoint cursor, we want it to remain open until','line_number':312,'multiline':False]['text':' the test completes.','line_number':313,'multiline':False]['text':' Check we can't use the reserved name as an application checkpoint name or open a checkpoint cursor','line_number':315,'multiline':False]['text':' with it.','line_number':316,'multiline':False]['text':' Check we can't name checkpoints that include LSM tables.','line_number':350,'multiline':False]['text':' Create an empty file, do one of 4 cases of checkpoint, then verify the','line_number':365,'multiline':False]['text':' checkpoints exist.   The reason for the 4 cases is we must create all','line_number':366,'multiline':False]['text':' checkpoints an application can explicitly reference using a cursor, and','line_number':367,'multiline':False]['text':' I want to test when other types of checkpoints are created before the','line_number':368,'multiline':False]['text':' checkpoint we really need.','line_number':369,'multiline':False]['text':' Case 1: a named checkpoint','line_number':370,'multiline':False]['text':' Case 2: an internal checkpoint','line_number':376,'multiline':False]['text':' Case 3: a named checkpoint, then an internal checkpoint','line_number':383,'multiline':False]['text':' Case 4: an internal checkpoint, then a named checkpoint','line_number':392,'multiline':False]['text':' Check that we can create an empty checkpoint, change the underlying','line_number':401,'multiline':False]['text':' object, checkpoint again, and still see the original empty tree, for','line_number':402,'multiline':False]['text':' both named and unnamed checkpoints.','line_number':403,'multiline':False]['text':' Check that if we create an unnamed and then a named checkpoint, opening','line_number':418,'multiline':False]['text':' WiredTigerCheckpoint opens the most recent (the named) checkpoint.','line_number':419,'multiline':False]['text':' Check that if we create a named and then an unnamed checkpoint, opening','line_number':436,'multiline':False]['text':' WiredTigerCheckpoint opens the most recent (the named) checkpoint.','line_number':437,'multiline':False]