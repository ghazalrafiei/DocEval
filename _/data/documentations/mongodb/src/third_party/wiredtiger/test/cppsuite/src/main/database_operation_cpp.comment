['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Static methods. ','line_number':39,'multiline':True]['text':'
         * WiredTiger lets you open a cursor on a collection using the same pointer. When a session
         * is closed, WiredTiger APIs close the cursors too.
         ','line_number':47,'multiline':True]['text':' Validate our config. ','line_number':78,'multiline':True]['text':' Keys must be unique. ','line_number':87,'multiline':True]['text':' Create n collections as per the configuration. ','line_number':93,'multiline':True]['text':'
         * The database model will call into the API and create the collection, with its own
         * session.
         ','line_number':95,'multiline':True]['text':'
     * Spawn thread_count threads to populate the database, theoretically we should be IO bound
     * here.
     ','line_number':104,'multiline':True]['text':' Wait for our populate threads to finish and then join them. ','line_number':115,'multiline':True]['text':' Cleanup our workers. ','line_number':119,'multiline':True]['text':' This needs to be executed only once in the workload. ','line_number':133,'multiline':True]['text':'
         * This may seem like noise but it can prevent the test being killed by the evergreen
         * timeout.
         ','line_number':147,'multiline':True]['text':' Helper struct which stores a pointer to a collection and a cursor associated with it. ','line_number':170,'multiline':True]['text':' Collection cursor vector. ','line_number':180,'multiline':True]['text':' Must have unique collections for each thread. ','line_number':185,'multiline':True]['text':' Collection cursor. ','line_number':200,'multiline':True]['text':' Insert a key value pair, rolling back the transaction if required. ','line_number':203,'multiline':True]['text':'
                         * We need to inform the database model that we've added these keys as some
                         * other thread may rely on the key_count data. Only do so if we
                         * successfully committed.
                         ','line_number':213,'multiline':True]['text':' Sleep the duration defined by the op_rate. ','line_number':225,'multiline':True]['text':' Reset our cursor to avoid pinning content. ','line_number':228,'multiline':True]['text':' Make sure the last transaction is rolled back now the work is finished. ','line_number':235,'multiline':True]['text':' Get a collection and find a cached cursor. ','line_number':247,'multiline':True]['text':' Do a second lookup now that we know it exists. ','line_number':253,'multiline':True]['text':' Reset our cursor to avoid pinning content. ','line_number':274,'multiline':True]['text':' Make sure the last transaction is rolled back now the work is finished. ','line_number':277,'multiline':True]['text':'
     * We need two types of cursors. One cursor is a random cursor to randomly select a key and the
     * other one is a standard cursor to remove the random key. This is required as the random
     * cursor does not support the remove operation.
     ','line_number':287,'multiline':True]['text':' Loop while the test is running. ','line_number':294,'multiline':True]['text':'
         * Sleep the period defined by the op_rate in the configuration. Do this at the start of the
         * loop as it could be skipped by a subsequent continue call.
         ','line_number':296,'multiline':True]['text':' Choose a random collection to update. ','line_number':302,'multiline':True]['text':' Look for existing cursors in our cursor cache. ','line_number':305,'multiline':True]['text':' Open the two cursors for the chosen collection. ','line_number':310,'multiline':True]['text':' Start a transaction if possible. ','line_number':318,'multiline':True]['text':' Get the cursor associated with the collection. ','line_number':321,'multiline':True]['text':' Choose a random key to delete. ','line_number':325,'multiline':True]['text':'
             * It is possible not to find anything if the collection is empty. In that case, finish
             * the current transaction as we might be able to see new records after starting a new
             * one.
             ','line_number':329,'multiline':True]['text':' Reset our cursors to avoid pinning content. ','line_number':351,'multiline':True]['text':' Commit the current transaction if we're able to. ','line_number':355,'multiline':True]['text':' Make sure the last operation is rolled back now the work is finished. ','line_number':360,'multiline':True]['text':' Cursor map. ','line_number':369,'multiline':True]['text':'
     * Loop while the test is running.
     ','line_number':372,'multiline':True]['text':'
         * Sleep the period defined by the op_rate in the configuration. Do this at the start of the
         * loop as it could be skipped by a subsequent continue call.
         ','line_number':376,'multiline':True]['text':' Choose a random collection to update. ','line_number':382,'multiline':True]['text':' Look for existing cursors in our cursor cache. ','line_number':385,'multiline':True]['text':' Open a cursor for the chosen collection. ','line_number':390,'multiline':True]['text':' Start a transaction if possible. ','line_number':395,'multiline':True]['text':' Get the cursor associated with the collection. ','line_number':398,'multiline':True]['text':' Choose a random key to update. ','line_number':401,'multiline':True]['text':' Reset our cursor to avoid pinning content. ','line_number':411,'multiline':True]['text':' Commit the current transaction if we're able to. ','line_number':414,'multiline':True]['text':' Make sure the last operation is rolled back now the work is finished. ','line_number':419,'multiline':True]['text':' The default implementation requires the tracking component to be enabled.','line_number':427,'multiline':False]['text':' namespace test_harness','line_number':433,'multiline':False]