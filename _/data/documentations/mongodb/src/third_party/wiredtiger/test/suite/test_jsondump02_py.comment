['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_jsondump.py','line_number':32,'multiline':False]['text':' Test dump output from json cursors.','line_number':33,'multiline':False]['text':' Populate table_uri4 with squares and cubes of row numbers','line_number':59,'multiline':False]['text':' Check the result of using a JSON cursor on the URI.','line_number':69,'multiline':False]['text':' Check the result of using a JSON cursor on the URI.','line_number':80,'multiline':False]['text':' FIXME-WT-9986: Re-enable this test after fixing the JSON cursor bug','line_number':91,'multiline':False]['text':' triggered by allocator changes.','line_number':92,'multiline':False]['text':' \u03c0 is pi in Unicode, converted by Python to UTF-8: 0xcf 0x80.','line_number':122,'multiline':False]['text':' Here's how UTF-8 might be used.','line_number':123,'multiline':False]['text':' bad tokens','line_number':153,'multiline':False]['text':' bad tokens','line_number':159,'multiline':False]['text':' bad tokens','line_number':165,'multiline':False]['text':' bad syntax','line_number':171,'multiline':False]['text':' bad types','line_number':177,'multiline':False]['text':' bad types','line_number':183,'multiline':False]['text':' extra stuff','line_number':189,'multiline':False]['text':' fields out of order currently not supported','line_number':196,'multiline':False]['text':' various invalid unicode','line_number':202,'multiline':False]['text':' this one should work','line_number':212,'multiline':False]['text':' extraneous/missing space is okay','line_number':216,'multiline':False]['text':' This projection has 3 value fields reversed with a key at the end.','line_number':240,'multiline':False]['text':' bad projection URI','line_number':250,'multiline':False]['text':' This projection should work.','line_number':255,'multiline':False]['text':' The dump config currently is not supported for the index type.','line_number':258,'multiline':False]['text':' Dump all the tables into a single file, and also each','line_number':287,'multiline':False]['text':' table into its own file.','line_number':288,'multiline':False]['text':' Generate two byte keys that cover some range of byte values.','line_number':318,'multiline':False]['text':' For simplicity, the keys are monotonically increasing.','line_number':319,'multiline':False]['text':' A null byte is disallowed in a string key, so we don't use it.','line_number':320,'multiline':False]['text':' Generate three byte values:','line_number':325,'multiline':False]['text':'    i==0  :  v:[0x00, 0x01, 0x02]','line_number':326,'multiline':False]['text':'    i==1  :  v:[0x01, 0x02, 0x03]','line_number':327,'multiline':False]['text':' etc.','line_number':328,'multiline':False]['text':' A null byte or any byte >= 0x7f is disallowed in a string value,','line_number':329,'multiline':False]['text':' it is replaced by 'X'','line_number':330,'multiline':False]['text':' As of Python3, we cannot simply shove random bytes with values >= 0x80','line_number':338,'multiline':False]['text':' into a string, as strings are unicode aware, so we test only up to 0x80.','line_number':339,'multiline':False]['text':' Real Unicode strings are tested elsewhere.','line_number':340,'multiline':False]['text':' FIXME-WT-9986: Re-enable this test after fixing the JSON cursor bug','line_number':349,'multiline':False]['text':' triggered by allocator changes.','line_number':350,'multiline':False]['text':' A 'u' format requires a bytes type with Python3','line_number':367,'multiline':False]['text':' no embedded nuls','line_number':369,'multiline':False]['text':' Build table5_json, we want it to look like this:','line_number':376,'multiline':False]['text':'    ('"key0" : "\u0001\u0001"', '"value0" : "\u0000\u0001\u0002"'),','line_number':377,'multiline':False]['text':'    ('"key0" : "\u0001\u0002"', '"value0" : "\u0001\u0002\u0003"'))','line_number':378,'multiline':False]['text':'    ('"key0" : "\u0001\u0003"', '"value0" : "\u0003\u0003\u0004"'))','line_number':379,'multiline':False]['text':'    ...','line_number':380,'multiline':False]['text':' table6_json is similar, except that printable values like '\u0041'','line_number':381,'multiline':False]['text':' would appear as 'A'.  The string type cannot have embedded nulls,','line_number':382,'multiline':False]['text':' so '\u0000' in table6_json appears instead as an 'X'.','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':' Start by creating two tables of individual Unicode values.','line_number':385,'multiline':False]['text':' bin_unicode[] contains only the \u escape sequences.','line_number':386,'multiline':False]['text':' mix_unicode[] contains printable characters or \t \n etc. escapes','line_number':387,'multiline':False]['text':' e.g. "\u00ab")','line_number':391,'multiline':False]