['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * thread_append --
 *     A thread dedicated to appending records into a table. Works with fixed length column stores
 *     and variable length column stores. One thread (the first thread created by an application)
 *     checks for a terminating condition after each insert.
 ','line_number':31,'multiline':True]['text':'
 * Below are a series of functions originally designed for test/fops. These threads perform a series
 * of simple API access calls, such as opening and closing sessions and cursors. These functions
 * require use of the TEST_PER_THREAD_OPTS structure in test_util.h. Additionally there are two
 * event handler functions that should be used to suppress "expected" errors that these functions
 * generate. An example of the use of these functions and structures is in the csuite test
 * wt3363_checkpoint_op_races.
 ','line_number':73,'multiline':True]['text':'
 * handle_op_error --
 *     Handle errors that generated by series of functions below that we can safely ignore.
 ','line_number':82,'multiline':True]['text':'
     * Ignore complaints about missing files. It's unlikely but possible that checkpoints and cursor
     * open operations can return this due to the sequencing of the various ops.
     ','line_number':92,'multiline':True]['text':' Ignore complaints about failure to open bulk cursors. ','line_number':99,'multiline':True]['text':'
 * handle_op_message --
 *     Handle messages generated by the functions below that we can safely ignore.
 ','line_number':106,'multiline':True]['text':' Ignore messages about failing to create forced checkpoints. ','line_number':116,'multiline':True]['text':'
 * op_bulk --
 *     Create a table and open a bulk cursor on it.
 ','line_number':123,'multiline':True]['text':'
 * op_bulk_unique --
 *     Create a guaranteed unique table and open and close a bulk cursor on it.
 ','line_number':158,'multiline':True]['text':' Generate a unique object name. ','line_number':179,'multiline':True]['text':'
     * Opening a bulk cursor may have raced with a forced checkpoint which created a checkpoint of
     * the empty file, and triggers an EINVAL.
     ','line_number':186,'multiline':True]['text':'
             * The EBUSY is expected when we run with checkpoint_wait set to false, so we increment
             * the counter while in this loop to avoid false positives.
             ','line_number':202,'multiline':True]['text':'
 * op_cursor --
 *     Open and close cursor on a table.
 ','line_number':212,'multiline':True]['text':' Put some data in if asked to. ','line_number':234,'multiline':True]['text':'
 * op_create --
 *     Create a table.
 ','line_number':249,'multiline':True]['text':'
 * op_create_unique --
 *     Create and drop a unique guaranteed table.
 ','line_number':274,'multiline':True]['text':' Generate a unique object name. ','line_number':294,'multiline':True]['text':'
             * The EBUSY is expected when we run with checkpoint_wait set to false, so we increment
             * the counter while in this loop to avoid false positives.
             ','line_number':306,'multiline':True]['text':'
 * op_drop --
 *     Drop a table.
 ','line_number':316,'multiline':True]