['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * modify_repl_init --
 *     Initialize the replacement information.
 ','line_number':53,'multiline':True]['text':'
 * modify_build --
 *     Generate a set of modify vectors.
 ','line_number':66,'multiline':True]['text':' Randomly select a number of byte changes, offsets and lengths. ','line_number':75,'multiline':True]['text':'
         * Start at least 11 bytes into the buffer so we skip leading key information.
         ','line_number':81,'multiline':True]['text':'
 * random_failure --
 *     Fail the process.
 ','line_number':91,'multiline':True]['text':'
     * Let our caller know. Note, format.sh checks for this message, so be cautious in changing the
     * format.
     ','line_number':100,'multiline':True]['text':' Turn off core dumps. ','line_number':107,'multiline':True]['text':' Fail at a random moment. ','line_number':110,'multiline':True]['text':'
 * tinfo_init --
 *     Initialize the worker thread structures.
 ','line_number':116,'multiline':True]['text':' Allocate the thread structures separately to minimize false sharing. ','line_number':126,'multiline':True]['text':' Set up the default key and value buffers. ','line_number':138,'multiline':True]['text':' Cleanup for each new run. ','line_number':152,'multiline':True]['text':'
 * lanes_init --
 *     Initialize the lanes structures.
 ','line_number':179,'multiline':True]['text':' Cleanup for each new run. ','line_number':188,'multiline':True]['text':'
 * tinfo_teardown --
 *     Tear down the worker thread structures.
 ','line_number':195,'multiline':True]['text':'
 * rollback_to_stable --
 *     Do a rollback to stable and verify operations.
 ','line_number':226,'multiline':True]['text':' Rollback-to-stable only makes sense for timestamps. ','line_number':233,'multiline':True]['text':' Rollback the system. ','line_number':237,'multiline':True]['text':'
     * Get the stable timestamp, and update ours. They should be the same, but there's no point in
     * debugging the race.
     ','line_number':240,'multiline':True]['text':' Check the saved snap operations for consistency. ','line_number':247,'multiline':True]['text':'
     * For a predictable run, the final stable timestamp is known and fixed, but individual threads
     * may have gone beyond that. Now that we've rolled back, set the current timestamp to the
     * stable so that next run starts from a known value.
     ','line_number':250,'multiline':True]['text':'
 * operations --
 *     Perform a number of operations in a set of threads.
 ','line_number':259,'multiline':True]['text':' Make the modify pad character printable to simplify debugging and logging. ','line_number':280,'multiline':True]['text':' -Wconditional-uninitialized ','line_number':283,'multiline':True]['text':'
     * There are two mechanisms to specify the length of the run, a number of operations and a
     * timer, when either expire the run terminates.
     *
     * If we have a number of operations with predictable replay, we set a stop timestamp. Without
     * predictable replay, each thread does an equal share of the total operations (and make sure
     * that it's not 0).
     *
     * With a timer, calculate how many fourth-of-a-second sleeps until the timer expires. If the
     * timer expires and threads don't return in 15 minutes, assume there is something hung, and
     * force the quit.
     ','line_number':296,'multiline':True]['text':'
             * If running with an operation count for predictable replay, ignore other ways of
             * stopping.
             ','line_number':315,'multiline':True]['text':' Get a session. ','line_number':332,'multiline':True]['text':' Initialize and start the worker threads. ','line_number':336,'multiline':True]['text':' Start optional special-purpose threads. ','line_number':348,'multiline':True]['text':' Spin on the threads, calculating the totals. ','line_number':369,'multiline':True]['text':' Clear out the totals each pass. ','line_number':371,'multiline':True]['text':'
             * If the timer has expired or this thread has completed its operations, notify the
             * thread it should quit.
             ','line_number':398,'multiline':True]['text':'
                 * On the last execution, optionally drop core for recovery testing.
                 ','line_number':403,'multiline':True]['text':'
                 * Predictable replay cannot independently tag every thread to stop, we would end up
                 * with a mix of commits at the end of the run. Rather, later in this loop, when we
                 * see we are finishing, we give all threads stop timestamp that they must run to,
                 * but not exceed.
                 ','line_number':409,'multiline':True]['text':' 1/4th of a second ','line_number':422,'multiline':True]['text':'
             * If the library is deadlocked, we might just join the mess, set a two-minute timer to
             * limit our exposure.
             ','line_number':433,'multiline':True]['text':' Wait for the special-purpose threads. ','line_number':446,'multiline':True]['text':' Sanity check the truncation gate. ','line_number':470,'multiline':True]['text':'
     * The system should be quiescent at this point, call rollback to stable. Generally, we expect
     * applications to do rollback-to-stable as part of the database open, but calling it outside of
     * the open path is expected in the case of applications that are "restarting" but skipping the
     * close/re-open pair. Note we are not advancing the oldest timestamp, otherwise we wouldn't be
     * able to replay operations from after rollback-to-stable completes.
     ','line_number':473,'multiline':True]['text':'
 * begin_transaction_ts --
 *     Begin a timestamped transaction.
 ','line_number':492,'multiline':True]['text':' Pick a read timestamp. ','line_number':505,'multiline':True]['text':'
         * Transaction timestamp reads are repeatable, but read timestamps must be before any
         * possible commit timestamp. Without a read timestamp, reads are based on the transaction
         * snapshot, which will include the latest values as of when the snapshot is taken. Test in
         * both modes: 75% of the time, pick a read timestamp before any commit timestamp still in
         * use, 25% of the time don't set a timestamp at all.
         ','line_number':509,'multiline':True]['text':'
         * If the timestamp has aged out of the system, we'll get EINVAL when we try and set it.
         * That kills the transaction, we have to restart.
         ','line_number':520,'multiline':True]['text':'
 * begin_transaction --
 *     Begin a non-timestamp transaction.
 ','line_number':541,'multiline':True]['text':'
 * commit_transaction --
 *     Commit a transaction.
 ','line_number':558,'multiline':True]['text':' -Wconditional-uninitialized ','line_number':572,'multiline':True]['text':'
     * Remember our oldest commit timestamp. Updating the thread's commit timestamp allows read,
     * oldest and stable timestamps to advance, ensure we don't race.
     ','line_number':594,'multiline':True]['text':'
 * rollback_transaction --
 *     Rollback a transaction.
 ','line_number':604,'multiline':True]['text':'
 * prepare_transaction --
 *     Prepare a transaction if timestamps are in use.
 ','line_number':623,'multiline':True]['text':'
         * Prepare timestamps must be less than or equal to the eventual commit timestamp. Set the
         * prepare timestamp to whatever the global value is now. The subsequent commit will
         * increment it, ensuring correctness.
         ','line_number':641,'multiline':True]['text':'
 * OP_FAILED --
 *	Error handling.
 ','line_number':655,'multiline':True]['text':' Isolation configuration. ','line_number':669,'multiline':True]['text':' When in an explicit snapshot isolation transaction, track operations for later repetition. ','line_number':677,'multiline':True]['text':'
 * table_op --
 *     Per-thread table operation.
 ','line_number':684,'multiline':True]['text':' Acquire a cursor. ','line_number':699,'multiline':True]['text':'
     * Predictable replay has some restrictions. Someday we may be able to resolve some of these
     * restrictions, this may require adding complexity.
     *
     * We disallow inserts into column stores, as column stores do inserts by expanding the number
     * of keys in the table. This has an interplay with other threads that are trying to predictably
     * generate key numbers since the key space is growing at a random time. Thus column stores are
     * restricted to accessing keys that were inserted via bulk load.
     ','line_number':702,'multiline':True]['text':'
     * Truncate has the key set to before/after rows in the table, skip pre-fetch and reserve for
     * simplicity.
     *
     * When the cursor is positioned in a row-store, inserts update existing records rather than
     * inserting new records. Inserted records are ignored during mirror checks (and updates to
     * those inserted records are ignored as well). The problem is if a row-store table updates an
     * original record and a different row-store or column-store table inserts a new record instead.
     * For this reason, always insert new records (or update previously inserted new records), when
     * inserting into a mirror group. For the same reason, don't reserve a row, that will position
     * the cursor and lead us into an update.
     ','line_number':716,'multiline':True]['text':'
         * Inserts, removes and updates can be done following a cursor set-key, or based on a cursor
         * position taken from a previous search. If not already doing a read, position the cursor
         * at an existing point in the tree 20% of the time.
         ','line_number':730,'multiline':True]['text':'
         * If we're in a snapshot-isolation transaction, optionally reserve a row (it's an update so
         * can't be done at lower isolation levels). Reserving a row in an implicit transaction will
         * work, but doesn't make sense. Reserving a row before a read won't be useful but it's not
         * unexpected.
         ','line_number':745,'multiline':True]['text':' Encourage races ','line_number':763,'multiline':True]['text':' Perform the operation. ','line_number':769,'multiline':True]['text':' Insert never leaves the cursor positioned. ','line_number':782,'multiline':True]['text':' FLCS does an update instead of a modify. ','line_number':791,'multiline':True]['text':'
             * FIXME-WT-9883: It is possible that the underlying cursor is still positioned even
             * though the positioned variable is false. Reset the position through reset for now.
             ','line_number':814,'multiline':True]['text':'
             * Don't set positioned: it's unchanged from the previous state, but not necessarily
             * set.
             ','line_number':845,'multiline':True]['text':' Truncate never leaves the cursor positioned. ','line_number':864,'multiline':True]['text':' Track the return, our caller needs it for modify cleanup. ','line_number':889,'multiline':True]['text':'
     * If the cursor is positioned, do a small number of next/prev cursor operations in a random
     * direction.
     ','line_number':892,'multiline':True]['text':'
     * Reset the cursor: there is no reason to keep pages pinned, periodically forcibly evict the
     * underlying page.
     ','line_number':908,'multiline':True]['text':' Failure already returned if in a transaction (meaning failure requires action). ','line_number':919,'multiline':True]['text':'
 * ops_session_open --
 *     Create a new session for the thread.
 ','line_number':923,'multiline':True]['text':' Close any open session (which closes all open cursors as well). ','line_number':935,'multiline':True]['text':'
 * ops --
 *     Per-thread operations.
 ','line_number':945,'multiline':True]['text':'
     * Characterize the per-thread random number generator. Normally we want independent behavior so
     * threads start in different parts of the RNG space, but we've found bugs by having the threads
     * pound on the same key/value pairs, that is, by making them traverse the same RNG space. 75%
     * of the time we run in independent RNG space.
     ','line_number':967,'multiline':True]['text':' -Wconditional-uninitialized ','line_number':981,'multiline':True]['text':'
     * Calculate max delay so that per-table ops/sec is as set. We use 2* here as our random
     * operation uses a flat distribution and the average delay will come out to
     * OPS_THROTTLE_SLEEP_US.
     ','line_number':985,'multiline':True]['text':' Set the first operation where we'll create a new session and cursors. ','line_number':993,'multiline':True]['text':' Set the first operation where we'll reset the session. ','line_number':998,'multiline':True]['text':' Set the first operation where we'll truncate a range. ','line_number':1000,'multiline':True]['text':' Sleep first to avoid burst when all threads start. ','line_number':1005,'multiline':True]['text':'
             * Number of failures so far for the current operation and key. In predictable replay,
             * unless we have a read operation, we cannot give up on any operation and maintain the
             * integrity of the replay.
             ','line_number':1017,'multiline':True]['text':' Number of tries only gets incremented during predictable replay. ','line_number':1024,'multiline':True]['text':'
         * In predictable replay, put each operation in its own transaction. It's possible we could
         * make multiple operations work predictably in the future.
         ','line_number':1027,'multiline':True]['text':' Periodically open up a new session and cursors. ','line_number':1040,'multiline':True]['text':' Resolve any running transaction. ','line_number':1042,'multiline':True]['text':' Pick the next session/cursor close/open. ','line_number':1051,'multiline':True]['text':' If not in a transaction, reset the session periodically so that operation is tested. ','line_number':1055,'multiline':True]['text':' Pick the next reset operation. ','line_number':1059,'multiline':True]['text':'
         * If not in a transaction and in a timestamp world, occasionally repeat timestamped
         * operations.
         ','line_number':1063,'multiline':True]['text':' Select a table. ','line_number':1072,'multiline':True]['text':'
         * If not in a transaction and in a timestamp world, start a transaction (which is always at
         * snapshot-isolation).
         *
         * If not in a transaction and not in a timestamp world, start a transaction some percentage
         * of the time, otherwise it's an implicit transaction. (Mirror operations require explicit
         * transactions.)
         ','line_number':1075,'multiline':True]['text':' Occasionally do reads at an isolation level lower than snapshot. ','line_number':1096,'multiline':True]['text':' 5% ','line_number':1099,'multiline':True]['text':' 5% ','line_number':1103,'multiline':True]['text':'
         * Select an operation: updates cannot happen at lower isolation levels and modify must be
         * in an explicit transaction.
         ','line_number':1113,'multiline':True]['text':' Limit test runs to a maximum of 4 truncation operations at a time. ','line_number':1123,'multiline':True]['text':' Pick the next truncate operation. ','line_number':1129,'multiline':True]['text':' Keep the op in the thread info for debugging ','line_number':1140,'multiline':True]['text':' Make sure this is an operation that is permitted for this kind of run. ','line_number':1142,'multiline':True]['text':'
         * Get the number of rows. Column-store extends the object, use that extended count if this
         * isn't a mirrored operation. (Ignore insert column-store insert operations in this check,
         * column-store will allocate a key after the end of the current table inside WiredTiger.)
         ','line_number':1145,'multiline':True]['text':'
         * If the operation is a truncate, select a range.
         *
         * Truncate up to 2% of the table (keep truncate ranges relatively short so they complete
         * without colliding with other operations, but still cross page boundaries. If the range
         * overlaps the beginning/end of the table, set the key to 0 (the truncate function then
         * sets a cursor to NULL so that code is tested).
         *
         * This gets tricky: there are 2 directions (truncating from lower keys to the current
         * position or from the current position to higher keys), and collation order (truncating
         * from lower keys to higher keys or vice-versa).
         ','line_number':1161,'multiline':True]['text':'
                     * Edge case: There is a case where we cannot detect a proper mirror mismatch.
                     * Say we truncated the tail end key range of all the mirrors from N to
                     * max_rows. This truncate happened before any thread added another non-mirrored
                     * append/insert to a column store table and the data in that truncated key
                     * range was sufficient to delete the pages at the end of the column store
                     * table. Then when a column store non-mirrored insert happened, it appended the
                     * new item at key N instead of at max_rows + 1. Then the next mirror check will
                     * detect a mismatch from the row-store table because the appended value does
                     * not match the truncated value.
                     *
                     * We want to test truncate at the end of the range as much as possible, so
                     * adjust the end range to max_rows - 1 only in the case where we are mirroring
                     * and have a column store table.
                     ','line_number':1187,'multiline':True]['text':'
                         * It is possible that the key number was set to max rows so make sure we
                         * don't send in poorly set truncate cursor keys.
                         ','line_number':1205,'multiline':True]['text':'
         * If an insert or update, create a value.
         *
         * If the first table we're updating is FLCS and a mirrored table, use the base table (which
         * must be ROW or VLCS), to create a value usable for any table. Because every FLCS table
         * tracks a different number of bits, we can't figure out the specific bits we're going to
         * use until the insert or update call that's going to do the modify.
         *
         * If the first table we're updating is FLCS and not a mirrored table, we use the table
         * we're modifying and acquire the bits for the table immediately.
         *
         * See the column-store update/insert calls for the matching work, if the table is mirrored,
         * we derive the bits based on the ROW/VLCS value, otherwise, there's nothing to do, we have
         * the bits we need.
         *
         * If the first table we're updating isn't FLCS, generate the new value for the table, no
         * special work is done here and the column-store insert/update calls will create derive the
         * necessary bits if/when a mirrored FLCS table is updated in this operation.
         ','line_number':1227,'multiline':True]['text':'
         * If modify, build a modify change vector. FLCS operations do updates instead of modifies,
         * if we're not in a mirrored group, generate a bit value for the FLCS table. If we are in a
         * mirrored group or not modifying an FLCS table, we'll need a change vector and we will
         * have to modify a ROW/VLCS table first to get a new value from which we can derive the
         * FLCS value.
         ','line_number':1254,'multiline':True]['text':'
         * For modify we haven't created the new value when we queue up the operation; we have to
         * modify a RS or VLCS table first so we have a value from which we can set any FLCS values
         * we need. In that case, do the modify on the base mirror table first. Then, do the
         * operation on the selected table, then any remaining tables.
         ','line_number':1268,'multiline':True]['text':'
             * We make blind modifies and the record may not exist. If the base modify returns DNE,
             * skip the operation. This isn't to avoid wasted work: any FLCS table in the mirrored
             * will do an update as FLCS doesn't support modify, and we'll fail when we compare the
             * remove to the FLCS value.
             *
             * For predictable replay if the record doesn't exist (that's predictable), and we must
             * force a rollback, we always finish a loop iteration in a committed or rolled back
             * state.
             ','line_number':1281,'multiline':True]['text':' Release the truncate operation counter. ','line_number':1324,'multiline':True]['text':' Drain any pending column-store inserts. ','line_number':1328,'multiline':True]['text':' On failure, rollback any running transaction. ','line_number':1332,'multiline':True]['text':'
         * If not in a transaction, we're done with this operation. If in a transaction, add more
         * operations to the transaction half the time. For predictable replay runs, always complete
         * the transaction.
         ','line_number':1336,'multiline':True]['text':'
             * Note that a random value of 5 would result in a rollback per the switch below. For
             * predictable replay, only do that once per timestamp. If we didn't have this check, a
             * retry would start again with the same timestamp and RNG state, and get the same dice
             * roll. This would happen every time and the thread will be get stuck doing continuous
             * rollbacks.
             ','line_number':1344,'multiline':True]['text':' Choose to do a commit this time. ','line_number':1352,'multiline':True]['text':'
         * Ending a transaction. If configured for snapshot isolation, redo the reads and confirm
         * the values are unchanged.
         ','line_number':1356,'multiline':True]['text':' Encourage races ','line_number':1361,'multiline':True]['text':'
         * If prepare configured, prepare the transaction 10% of the time. Note prepare requires a
         * timestamped world, which means we're in a snapshot-isolation transaction by definition.
         ','line_number':1370,'multiline':True]['text':'
         * If we're in a transaction, commit 40% of the time and rollback 10% of the time (we
         * already continued to add operations to the transaction the remaining half of the time).
         ','line_number':1383,'multiline':True]['text':' 40% ','line_number':1391,'multiline':True]['text':' Encourage races ','line_number':1392,'multiline':True]['text':' 10% ','line_number':1396,'multiline':True]['text':' Force a rollback ','line_number':1401,'multiline':True]['text':' Encourage races ','line_number':1410,'multiline':True]['text':'
 * read_row_worker --
 *     Read and verify a single element in a row- or column-store file.
 ','line_number':1432,'multiline':True]['text':' -Wconditional-uninitialized ','line_number':1442,'multiline':True]['text':' Retrieve the key/value pair by key. ','line_number':1449,'multiline':True]['text':'
     * We don't use search near for predictable replay runs, as the return key can be variable
     * depending on the structure of the Btree.
     ','line_number':1461,'multiline':True]['text':'
         * Zero values at the end of the key space in fixed length stores are returned as not-found.
         * The WiredTiger cursor has lost its position though, so we return not-found, the cursor
         * movement can't continue.
         ','line_number':1479,'multiline':True]['text':' Log the operation ','line_number':1491,'multiline':True]['text':'
 * apply_bounds --
 *     Apply lower and upper bounds on the cursor. The lower and upper bound is randomly generated.
 ','line_number':1522,'multiline':True]['text':' FLCS is not supported with bounds. ','line_number':1532,'multiline':True]['text':' Set up the default key buffer. ','line_number':1536,'multiline':True]['text':'
     * Generate a random lower key and apply to the lower bound or upper bound depending on the
     * reverse collator.
     ','line_number':1540,'multiline':True]['text':' Retrieve the key/value pair by key. ','line_number':1545,'multiline':True]['text':'
     * Generate a random upper key and apply to the upper bound or lower bound depending on the
     * reverse collator.
     ','line_number':1561,'multiline':True]['text':' Retrieve the key/value pair by key. ','line_number':1567,'multiline':True]['text':'
 * clear_bounds --
 *     Clear both the lower and upper bounds on the cursor.
 ','line_number':1586,'multiline':True]['text':' FLCS is not supported with bounds. ','line_number':1593,'multiline':True]['text':'
 * wts_read_scan --
 *     Read and verify a subset of the elements in a file.
 ','line_number':1600,'multiline':True]['text':'
     * We're not configuring transactions or read timestamps: if there's a diagnostic check that all
     * operations are timestamped transactions, skip the scan.
     ','line_number':1622,'multiline':True]['text':' Set up the default key/value buffers. ','line_number':1629,'multiline':True]['text':' Open a session and cursor pair. ','line_number':1633,'multiline':True]['text':' Scan the first 50 rows for tiny, debugging runs, then scan a random subset of records. ','line_number':1638,'multiline':True]['text':' Reset the position of the cursor, so that we can apply bounds on the cursor. ','line_number':1647,'multiline':True]['text':'
 * read_row --
 *     Read and verify a single element in a row- or column-store file.
 ','line_number':1671,'multiline':True]['text':' 25% of the time we call search-near. ','line_number':1678,'multiline':True]['text':'
 * nextprev --
 *     Read and verify the next/prev element in a row- or column-store file.
 ','line_number':1683,'multiline':True]['text':' -Wconditional-uninitialized ','line_number':1701,'multiline':True]['text':'
 * row_reserve --
 *     Reserve a row in a row-store file.
 ','line_number':1740,'multiline':True]['text':'
 * col_reserve --
 *     Reserve a row in a column-store file.
 ','line_number':1766,'multiline':True]['text':'
 * modify --
 *     Cursor modify worker function.
 ','line_number':1789,'multiline':True]['text':' Periodically verify the WT_CURSOR.modify return. ','line_number':1798,'multiline':True]['text':'
 * row_modify --
 *     Modify a row in a row-store file.
 ','line_number':1820,'multiline':True]['text':'
 * col_modify --
 *     Modify a row in a column-store file.
 ','line_number':1844,'multiline':True]['text':'
 * row_truncate --
 *     Truncate rows in a row-store file.
 ','line_number':1866,'multiline':True]['text':' The code assumes we're never truncating the entire object, assert that fact. ','line_number':1880,'multiline':True]['text':'
 * col_truncate --
 *     Truncate rows in a column-store file.
 ','line_number':1911,'multiline':True]['text':' The code assumes we're never truncating the entire object, assert that fact. ','line_number':1925,'multiline':True]['text':'
 * row_update --
 *     Update a row in a row-store file.
 ','line_number':1950,'multiline':True]['text':'
 * col_update --
 *     Update a row in a column-store file.
 ','line_number':1977,'multiline':True]['text':' Mirrors will not have set the FLCS value. ','line_number':1994,'multiline':True]['text':'
 * row_insert --
 *     Insert a row in a row-store file.
 ','line_number':2013,'multiline':True]['text':'
     * If we positioned the cursor already, it's a test of an update using the insert method.
     * Otherwise, generate a unique key and insert (or update an already inserted record).
     ','line_number':2025,'multiline':True]['text':' Log the operation ','line_number':2038,'multiline':True]['text':'
 * col_insert_resolve --
 *     Resolve newly inserted records.
 ','line_number':2045,'multiline':True]['text':'
     * We don't want to ignore column-store records we insert, which requires we update the "last
     * row" so other threads consider them. Threads allocating record numbers can race with other
     * threads, so the thread allocating record N may return after the thread allocating N + 1. We
     * can't update a record before it's been inserted, and so we can't leave gaps when the count of
     * records in the table is incremented.
     *
     * The solution is a per-table array which contains an unsorted list of inserted records. If
     * there are pending inserts, review the table and try to update the total rows. This is
     * wasteful, but we want to give other threads immediate access to the row, ideally they'll
     * collide with our insert before we resolve.
     *
     * Process the existing records and advance the last row count until we can't go further.
     ','line_number':2064,'multiline':True]['text':'
             * A thread may have allocated a record number that is now less than or equal to the
             * current maximum number of rows. In this case, simply reset the insert list.
             * Otherwise, update the maximum number of rows with the newly inserted record.
             ','line_number':2081,'multiline':True]['text':'
 * col_insert_add --
 *     Add newly inserted records.
 ','line_number':2099,'multiline':True]['text':' Add the inserted record to the insert array. ','line_number':2109,'multiline':True]['text':'
 * col_insert --
 *     Insert an element in a column-store file.
 ','line_number':2120,'multiline':True]['text':'
     * We can only append so many new records, check for the limit, and if we reach it, skip the
     * operation until some records drain.
     ','line_number':2135,'multiline':True]['text':' Mirrors will not have set the FLCS value. ','line_number':2144,'multiline':True]['text':' Create a record, then add the key to our list of new records for later resolution. ','line_number':2151,'multiline':True]['text':' Extend the object. ','line_number':2157,'multiline':True]['text':'
 * row_remove --
 *     Remove an row from a row-store file.
 ','line_number':2168,'multiline':True]['text':' We use the cursor in overwrite mode, check for existence. ','line_number':2185,'multiline':True]['text':'
 * col_remove --
 *     Remove a row from a column-store file.
 ','line_number':2198,'multiline':True]['text':' We use the cursor in overwrite mode, check for existence. ','line_number':2213,'multiline':True]