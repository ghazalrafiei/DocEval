['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_inmem01.py','line_number':34,'multiline':False]['text':'    Test in-memory configuration.','line_number':35,'multiline':False]['text':' Smoke-test in-memory configurations, add a small amount of data and','line_number':48,'multiline':False]['text':' ensure it's visible.','line_number':49,'multiline':False]['text':' Add more data than fits into the configured cache and verify it fails.','line_number':56,'multiline':False]['text':' Figure out the last key we successfully inserted, and check all','line_number':64,'multiline':False]['text':' previous inserts are still there.','line_number':65,'multiline':False]['text':' Fill the cache with data, remove some data, ensure more data can be','line_number':73,'multiline':False]['text':' inserted (after a reasonable amount of time for space to be reclaimed).','line_number':74,'multiline':False]['text':' Now that the database contains as much data as will fit into','line_number':82,'multiline':False]['text':' the configured cache, verify removes succeed.','line_number':83,'multiline':False]['text':' Run queries after adding, removing and re-inserting data.','line_number':89,'multiline':False]['text':' Try out keeping a cursor open while adding new data.','line_number':90,'multiline':False]['text':' This test fails on FLCS when the machine is under heavy load: it gets WT_CACHE_FULL','line_number':104,'multiline':False]['text':' forever in the bottom loop and eventually fails there. This is at least partly because','line_number':105,'multiline':False]['text':' in FLCS removing values does not recover space (deleted values are stored as 0).','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' I think what happens is that under sufficient load the initial fill doesn't fail until','line_number':108,'multiline':False]['text':' all the pages in it have already been reconciled. Then since removing some of the rows','line_number':109,'multiline':False]['text':' in the second step doesn't free any space up, there's no space for more updates and','line_number':110,'multiline':False]['text':' the bottom loop eventually fails. When not under load, at least one page in the','line_number':111,'multiline':False]['text':' initial fill isn't reconciled until after the initial fill stops; it gets reconciled','line_number':112,'multiline':False]['text':' afterwards and that frees up enough space to do the rest of the writes. (Because','line_number':113,'multiline':False]['text':' update structures are much larger than FLCS values, which are one byte, reconciling a','line_number':114,'multiline':False]['text':' page with pending updates recovers a lot of space.)','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' There does not seem to currently be any way to keep this from happening. (If we get a','line_number':117,'multiline':False]['text':' mechanism to prevent reconciling pages, using that on the first page of the initialn','line_number':118,'multiline':False]['text':' fill should solve the problem.)','line_number':119,'multiline':False]['text':'','line_number':120,'multiline':False]['text':' However, because the cache size is fixed, the number of rows that the initial fill','line_number':121,'multiline':False]['text':' generates can be used as an indicator: more rows mean that more updates were already','line_number':122,'multiline':False]['text':' reconciled and there's less space to work with later. So, if we see enough rows that','line_number':123,'multiline':False]['text':' there's not going to be any space for the later updates, skip the test on the grounds','line_number':124,'multiline':False]['text':' that it's probably going to break. (Skip rather than fail because it's not wrong that','line_number':125,'multiline':False]['text':' this happens; skip conditionally rather than disable the test because it does work an','line_number':126,'multiline':False]['text':' appreciable fraction of the time and it's better to run it when possible.)','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' I've picked an threshold based on some initial experiments. 141676 rows succeeds,','line_number':129,'multiline':False]['text':' 143403 fails, so I picked 141677. Hopefully this will not need to be conditionalized','line_number':130,'multiline':False]['text':' on the OS or machine type.','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' Note that with 141676 rows there are several retries in the bottom loop, so things are','line_number':133,'multiline':False]['text':' working as designed and the desired scenario is being tested.','line_number':134,'multiline':False]['text':' While I'm pretty sure the above analysis is sound, the threshold is not as portable as','line_number':136,'multiline':False]['text':' I'd hoped, so just skip the test entirely until someone has the patience to track down','line_number':137,'multiline':False]['text':' a suitable threshold value for the test environment.','line_number':138,'multiline':False]['text':'if self.valuefmt == '8t' and last_key >= 141677:','line_number':139,'multiline':False]['text':'    self.skipTest('Load too high; test will get stuck')','line_number':140,'multiline':False]['text':' Now that the database contains as much data as will fit into','line_number':144,'multiline':False]['text':' the configured cache, verify removes succeed.','line_number':145,'multiline':False]['text':' Spin inserting to give eviction a chance to reclaim space','line_number':152,'multiline':False]['text':' Custom "keep filling" helper','line_number':168,'multiline':False]['text':' Keep adding data to the cache until it becomes really full, make sure','line_number':173,'multiline':False]['text':' that reads aren't blocked.','line_number':174,'multiline':False]['text':' Try to really wedge the cache full','line_number':177,'multiline':False]['text':' Figure out the last key we successfully inserted, and check all','line_number':193,'multiline':False]['text':' previous inserts are still there.','line_number':194,'multiline':False]['text':' This test is *much* slower for fixed-length column stores: we fit','line_number':204,'multiline':False]['text':' many more records into the cache, so don't do as many passes through','line_number':205,'multiline':False]['text':' the data.','line_number':206,'multiline':False]