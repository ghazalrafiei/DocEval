['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' test_salvage01.py','line_number':34,'multiline':False]['text':'    Utilities: wt salvage','line_number':35,'multiline':False]['text':' Note that this class is reused by test_encrypt07 test_salvage02; be sure','line_number':37,'multiline':False]['text':' to test any changes with that version as well.','line_number':38,'multiline':False]['text':' VLCS requires smaller pages or the workload fits on one page, which then gets','line_number':66,'multiline':False]['text':' zapped by the damage operation and the table comes out empty, which isn't what','line_number':67,'multiline':False]['text':' we want.','line_number':68,'multiline':False]['text':' For FLCS, we write out a sequence of known bytes in adjacent rows and search for','line_number':73,'multiline':False]['text':' that sequence when we want to corrupt the table. This eliminates the problem','line_number':74,'multiline':False]['text':' earlier versions of this test had where it was looking for a single row value,','line_number':75,'multiline':False]['text':' namely a single byte, and would sometimes find it in unintended places, such as','line_number':76,'multiline':False]['text':' the root page, resulting in unsalvageable corruption and test failure. However,','line_number':77,'multiline':False]['text':' it's still possible for the test to fail arbitrarily if the target sequence ends','line_number':78,'multiline':False]['text':' up spanning a page boundary. Make it only 8 bytes long to reduce the chance of','line_number':79,'multiline':False]['text':' this while still making false matches unlikely. If the test starts failing for','line_number':80,'multiline':False]['text':' no obvious reason, try changing uniquepos by offsets of 8; if that fixes it, the','line_number':81,'multiline':False]['text':' problem is almost certainly this (accidentally spanning a page boundary) and not','line_number':82,'multiline':False]['text':' a real bug.','line_number':83,'multiline':False]['text':' This spells '<taRGet>', and in hex is: 3c 74 61 52 47 65 74 3e.','line_number':85,'multiline':False]['text':' Note that it should not be changed to contain values >= 127 or the Python trip','line_number':86,'multiline':False]['text':' through UTF-8 will break things.','line_number':87,'multiline':False]['text':' For VLCS and row-store, write out a single known value in one row as the target','line_number':93,'multiline':False]['text':' for intentional corruption. Don't set self.uniquelen; nothing should refer to it.','line_number':94,'multiline':False]['text':' (But if something needs to in the future, the correct value is 1.)','line_number':95,'multiline':False]['text':' Use key + i to create gaps. This makes the actual number of rows larger, but','line_number':108,'multiline':False]['text':' since the rows are small that doesn't make the table excessively large. Don't','line_number':109,'multiline':False]['text':' insert gaps between the bytes in the match string, though, since that makes it','line_number':110,'multiline':False]['text':' excessively likely that the match string spans pages and then we won't be able','line_number':111,'multiline':False]['text':' to find it.','line_number':112,'multiline':False]['text':' Use key + i to create gaps.','line_number':118,'multiline':False]['text':' Note that this is a list.','line_number':125,'multiline':False]['text':' Get the proper byte from the corruption target string.','line_number':141,'multiline':False]['text':' Get the corruption target string.','line_number':148,'multiline':False]['text':' In FLCS the values between the keys we wrote will read as zero. Count them.','line_number':176,'multiline':False]['text':' We should have visited every key, so the total row count should match the last key.','line_number':190,'multiline':False]['text':' Note that if a chunk in the middle of the table got lost,','line_number':208,'multiline':False]['text':' this will never sync up again.','line_number':209,'multiline':False]['text':' we close the connection to guarantee everything is','line_number':242,'multiline':False]['text':' flushed and closed from the WT point of view.','line_number':243,'multiline':False]['text':' We're already positioned, so alter it','line_number':256,'multiline':False]['text':' Make sure we found the embedded string','line_number':264,'multiline':False]['text':' damage() closed the session/connection, reopen them now.','line_number':319,'multiline':False]['text':' expect no output','line_number':338,'multiline':False]