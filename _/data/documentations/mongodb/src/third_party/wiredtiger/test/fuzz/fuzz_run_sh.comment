['text':'!/bin/bash','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' fuzz_run.sh - run a fuzz test.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' This script will emit all data in the current working directory including: fuzzing logs, home','line_number':5,'multiline':False]['text':' directories and profiling data (if we've compiled with Clang coverage).','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Running fuzzers compiled with ASan (-fsanitize=address) is recommended. If you want to also run','line_number':8,'multiline':False]['text':' calculate coverage, you should also add "-fprofile-instr-generate" and "-fcoverage-mapping" to','line_number':9,'multiline':False]['text':' your CFLAGS and LINKFLAGS when configuring.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Usage','line_number':12,'multiline':False]['text':' fuzz_run.sh <fuzz-test-binary> [fuzz-test-args]','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' If the fuzzer you're running has an existing corpus directory, you may want to run with the corpus','line_number':15,'multiline':False]['text':' supplied:','line_number':16,'multiline':False]['text':' e.g. fuzz_run.sh ../../build/test/fuzz/fuzz_config corpus/','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Output','line_number':19,'multiline':False]['text':' crash-<input-hash> --','line_number':20,'multiline':False]['text':'	If an error occurs, a file will be produced containing the input that crashed the target.','line_number':21,'multiline':False]['text':' fuzz-N.log --','line_number':22,'multiline':False]['text':'	The LibFuzzer log for worker N. This is just an ID that LibFuzzer assigns to each worker','line_number':23,'multiline':False]['text':'	ranging from 0 => the number of workers - 1.','line_number':24,'multiline':False]['text':' WT_TEST_<pid> --','line_number':25,'multiline':False]['text':'	The home directory for a given worker process.','line_number':26,'multiline':False]['text':' WT_TEST_<pid>.profraw --','line_number':27,'multiline':False]['text':'	If a fuzzer is running with Clang coverage, files containing profiling data for a given','line_number':28,'multiline':False]['text':'	worker will be produced. These will be used by fuzz_coverage.','line_number':29,'multiline':False]['text':' Take the binary name and shift.','line_number':36,'multiline':False]['text':' We don't want to forward this as an argument.','line_number':37,'multiline':False]['text':' Remove anything from previous runs.','line_number':41,'multiline':False]['text':' If we've compiled to emit coverage information, each worker process should write their own','line_number':45,'multiline':False]['text':' performance data.','line_number':46,'multiline':False]['text':' The rationale for each flag is below:','line_number':49,'multiline':False]['text':' - jobs=8','line_number':50,'multiline':False]['text':'	Choosing 8 workers is a reasonable starting point. Depending on their machine, they can bump','line_number':51,'multiline':False]['text':'	this number up but most machines will be able to handle this and it finishes jobs much faster','line_number':52,'multiline':False]['text':'	than without this flag (equivalent to jobs=1).','line_number':53,'multiline':False]['text':' - runs=100000000','line_number':54,'multiline':False]['text':'	Do 100 million runs to make sure that we're stressing the system and hitting lots of','line_number':55,'multiline':False]['text':'	branches. Ideally, we'd just let the fuzzer run until the process is killed by the user but','line_number':56,'multiline':False]['text':'	unfortunately, coverage data won't get written out in that case.','line_number':57,'multiline':False]['text':' - close_fd_mask=3','line_number':58,'multiline':False]['text':'	Suppress stdout and stderr. This isn't ideal but any fuzzing target that prints an error','line_number':59,'multiline':False]['text':'	will quickly fill up your disk. Better to just replay the input without this flag if you','line_number':60,'multiline':False]['text':'	uncover a bug.','line_number':61,'multiline':False]