['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Needed to get UINT64_MAX in C++. ','line_number':29,'multiline':True]['text':' Needed to get PRIuXX macros in C++. ','line_number':34,'multiline':True]['text':' Include some specific WT files, as some files included by wt_internal.h','line_number':50,'multiline':False]['text':' have some C-ism's that don't work in C++.','line_number':51,'multiline':False]['text':' times we will retry an operation on a table','line_number':65,'multiline':False]['text':' times per sec we will throttle','line_number':66,'multiline':False]['text':' Get the value of a STL container, even if it is not present','line_number':74,'multiline':False]['text':'
 * The number of contexts. Normally there is one context created, but it will be possible to use
 * several eventually. More than one is not yet implemented, but we must at least guard against the
 * caller creating more than one.
 ','line_number':120,'multiline':True]['text':'
 * The signal handler allows us to gracefully terminate workgen and the user to close the connection
 * in the runner script, thus ensuring a clean shutdown of wiredtiger. The exact signals handled are
 * registered in the WorkloadRunner::run_all function.
 ','line_number':210,'multiline':True]['text':' Create a table. ','line_number':261,'multiline':True]['text':' Open and close cursor. ','line_number':278,'multiline':True]['text':'
         * Drop the table. Keep retrying on EBUSY failure - it is an expected return when
         * checkpoints are happening.
         ','line_number':295,'multiline':True]['text':'
 * Get the cumulative size of all the files under the given directory.
 ','line_number':316,'multiline':True]['text':'
             * A file might be dropped between listing the directory contents and getting the file
             * sizes. Ignore such errors.
             ','line_number':327,'multiline':True]['text':' 5 random characters + Null terminator','line_number':338,'multiline':False]['text':'
 * This function generates a random table name which is alphanumeric and 5 chars long.
 ','line_number':340,'multiline':True]['text':'
 * Create a dynamic table with the specified name and config. If mirroring tables, add the mirror
 * table uri to the table runtime. Return an error status if the uri already exists or the create
 * fails.
 ','line_number':359,'multiline':True]['text':' Return if a table with the same name already exists. If mirror is enabled, make sure it does','line_number':370,'multiline':False]['text':' not exist either.','line_number':371,'multiline':False]['text':' Use a shared lock to read the dynamic table structure.','line_number':374,'multiline':False]['text':'
     * When mirror is enabled, create the mirror first and then the base. If we create the base
     * first, threads may start working on the base while the mirror is not fully created.
     *
     * The config has to be updated with the following information:
     *  - The name of the table's mirror if mirroring is enabled.
     *  - If this table is a base table or a mirror.
     *
     * See below an example when creating the table 'a' with mirror enabled:
     *  - Configuration expected for the mirror:
     * app_metadata="workgen_dynamic_table=true,workgen_table_mirror=table:a,workgen_base_table=false"
     *  - Configuration expected for the base:
     * app_metadata="workgen_dynamic_table=true,workgen_table_mirror=table:a_mirror,workgen_base_table=true"
     *
     * Without mirror enabled:
     * app_metadata="workgen_dynamic_table=true,workgen_base_table=true"
     *
     ','line_number':383,'multiline':True]['text':' This will be used when creating the base table.','line_number':410,'multiline':False]['text':' If mirror is enabled, we don't want to fail when creating the base. Getting spurious EBUSY','line_number':414,'multiline':False]['text':' errors is ok though, retry in that case.','line_number':415,'multiline':False]['text':' Fail if we have failed at creating the base of a mirror.','line_number':427,'multiline':False]['text':' All the required tables have been created, update the data structures for the dynamic tables','line_number':433,'multiline':False]['text':' which are protected by a mutex.','line_number':434,'multiline':False]['text':'
 * Update the structures dedicated to tables that can be created or removed during the workload. The
 * caller should hold the mutex that protects those structures.
 ','line_number':445,'multiline':True]['text':' This should be safe as we are supposed to be under a lock.','line_number':455,'multiline':False]['text':'
 * This function creates one or more tables at regular intervals, where the interval length and
 * number of tables are specified in the workload options. It also monitors the database size and
 * stops creating tables once the size crosses a target value. It restarts table creation if the
 * database size drops below a trigger value.
 ','line_number':463,'multiline':True]['text':' Initially we start creating tables if the database size is less than the create target.','line_number':486,'multiline':False]['text':'
         * When managing the database size: If we are creating tables, continue until we reach the
         * create target size. If we are not creating tables, begin to do so if the database size
         * falls below the create trigger.
         ','line_number':491,'multiline':True]['text':' Add app_metadata to the config to indicate the table was created dynamically which means','line_number':521,'multiline':False]['text':' it can be selected for random deletion. We want this information to persist over restart.','line_number':522,'multiline':False]['text':' Generate a table name from the user specified prefix and a random alphanumeric','line_number':529,'multiline':False]['text':' sequence.','line_number':530,'multiline':False]['text':' Create the table and its mirror if enabled.','line_number':535,'multiline':False]['text':' Randomly select a dynamic table to drop and schedule it for deletion. The function','line_number':549,'multiline':False]['text':' returns an EEXIST error status if the selected table is already scheduled for deletion.','line_number':550,'multiline':False]['text':' Select a random table to drop. Skip tables already flagged for deletion.','line_number':554,'multiline':False]['text':' If the table has a mirror, schedule the mirror table for deletion too.','line_number':563,'multiline':False]['text':'
 * The table specified by the dynamic table iterator is flagged for deletion and added to the
 * pending delete list. If the table has a mirror, the mirror is also flagged for deletion and added
 * to the pending delete list.
 ','line_number':572,'multiline':True]['text':'
 * This function drops one or more tables at regular intervals, where the interval length and number
 * of tables are specified in the workload options. It also monitors the database size and stops
 * dropping tables once the size reduces to a target value. It restarts table drops if the database
 * size exceeds a trigger value.
 ','line_number':591,'multiline':True]['text':' Track tables that are pending deletion.','line_number':607,'multiline':False]['text':' Initially we start dropping tables if the database size is greater than the drop trigger.','line_number':614,'multiline':False]['text':'
         * When managing the database size: If we are dropping tables, continue until we reach the
         * drop target size. If we are not dropping tables, begin to do so if the database size
         * crosses the drop trigger.
         ','line_number':618,'multiline':True]['text':' Files ready to be dropped.','line_number':648,'multiline':False]['text':' The data structures for the dynamic table set are protected by a mutex.','line_number':649,'multiline':False]['text':'
             * When dropping, consider how many dynamic tables we have left and how many are already
             * marked for deletion.
             ','line_number':653,'multiline':True]['text':'
             * Now process any pending deletes. The actual table drop will be done later without
             * holding the lock.
             ','line_number':668,'multiline':True]['text':' The table might still be in use.','line_number':673,'multiline':False]['text':' Delete all local data related to the table.','line_number':682,'multiline':False]['text':'
         * We will drop the WiredTiger tables without holding the lock. These tables have been
         * removed from the shared data structures, and we know no thread is operating on them.
         ','line_number':692,'multiline':True]['text':' Spin on EBUSY. We do not expect to get stuck.','line_number':698,'multiline':False]['text':'
 * This function will sleep for "timestamp_advance" seconds, increment and set oldest_timestamp,
 * stable_timestamp with the specified lag until stopping is set to true
 ','line_number':717,'multiline':True]['text':'
 * Exponentiate (like the pow function), except that it returns an exact integral 64 bit value, and
 * if it overflows, returns the maximum possible value for the return type.
 ','line_number':759,'multiline':True]['text':' No spaces? ','line_number':830,'multiline':True]['text':' The array references are 1-based, we'll waste one entry.','line_number':908,'multiline':False]['text':'
     * Populate the structure for the dynamic tables. We are single threaded here, so no need to
     * lock. We walk the WiredTiger metadata and filter out tables based on app_metadata. The
     * dynamic set of tables are marked separately during creation.
     ','line_number':912,'multiline':True]['text':' If there is no metadata (yet), this will return ENOENT. ','line_number':926,'multiline':True]['text':' Walk the entries in the metadata and extract the dynamic set. ','line_number':932,'multiline':True]['text':' Add the table into the list of dynamic set. We are single threaded here and hence','line_number':950,'multiline':False]['text':' do not yet need to protect the dynamic table structures with a lock.','line_number':951,'multiline':False]['text':' If the table has a mirror, add the mirror name to the runtime data.','line_number':958,'multiline':False]['text':' Is this a base table or a mirror?','line_number':970,'multiline':False]['text':' Make sure each base has its mirror and vice-versa. ','line_number':988,'multiline':True]['text':' Delete the leftover. ','line_number':998,'multiline':True]['text':' Format header of the table in _out stream.','line_number':1036,'multiline':False]['text':' The whole and fractional part of sample_interval are separated,','line_number':1043,'multiline':False]['text':' we don't want to sleep longer than a second.','line_number':1044,'multiline':False]['text':' Format JSON prefix.','line_number':1048,'multiline':False]['text':' Format entry into _out stream.','line_number':1086,'multiline':False]['text':' Format entry into _json stream.','line_number':1090,'multiline':False]['text':' Check latency threshold. Write warning into std::cerr in case read, insert or update','line_number':1094,'multiline':False]['text':' exceeds latency_max.','line_number':1095,'multiline':False]['text':' Format JSON suffix.','line_number':1104,'multiline':False]['text':' Note: we could allow this to be configurable.','line_number':1178,'multiline':False]['text':' Determine which tables have cross usage','line_number':1346,'multiline':False]['text':' Note: to support multiple contexts we'd need a generation','line_number':1423,'multiline':False]['text':' count whenever we execute.','line_number':1424,'multiline':False]['text':' We are single threaded in this function, so do not have','line_number':1434,'multiline':False]['text':' to worry about locking.','line_number':1435,'multiline':False]['text':' TODO: don't use atomic add, it's overkill.','line_number':1437,'multiline':False]['text':' Set size of vector storing thread-to-table mappings for the operation.','line_number':1453,'multiline':False]['text':'
 * Return a value within the interval [ 0, recno_max ) that is weighted toward lower numbers with
 * pareto_param at 0 (the minimum), and more evenly distributed with pareto_param at 100 (the
 * maximum).
 ','line_number':1466,'multiline':True]['text':' The file has no entries, returning 0 forces a WT_NOTFOUND return.','line_number':1501,'multiline':False]['text':' recnos are one-based.','line_number':1506,'multiline':False]['text':' This runner's thread completed the operation and is no longer using the assigned','line_number':1509,'multiline':False]['text':' dynamic table. Remove the (thread,table) map entry for the operation.','line_number':1510,'multiline':False]['text':' Get the uri and tint for the table assigned to the specified operation for this','line_number':1517,'multiline':False]['text':' runner's thread.','line_number':1518,'multiline':False]['text':'
 * Check if the specified operation has an assigned table. For static tables, this information is
 * saved in the Operation structure. For dynamic tables, the operation maintains a table assignment
 * for each thread running the operation.
 ','line_number':1535,'multiline':True]['text':' Set the table uri for the thread running this operation. Used for dynamic table operations.','line_number':1550,'multiline':False]['text':' Generate and set a key and value for the operation managed by this thread.','line_number':1559,'multiline':False]['text':'
     * A potential race: thread1 is inserting, and increments Context->_recno[] for fileX.wt.
     * thread2 is doing one of remove/search/update and grabs the new value of Context->_recno[] for
     * fileX.wt. thread2 randomly chooses the highest recno (which has not yet been inserted by
     * thread1), and when it accesses the record will get WT_NOTFOUND. It should be somewhat rare
     * (and most likely when the threads are first beginning). Any WT_NOTFOUND returns are allowed
     * and get their own statistic bumped.
     ','line_number':1567,'multiline':True]['text':' Generate the key and value for the operation.','line_number':1596,'multiline':False]['text':'
             * Calling throttle causes a sleep until the next time division, and we are given a new
             * batch of operations to do before calling throttle again. If the number of operations
             * in the batch is zero, we'll need to go around and throttle again.
             ','line_number':1614,'multiline':True]['text':' If this is not a table operation, we have nothing more to do here.','line_number':1629,'multiline':False]['text':' If the operation already has a table, it's ready to run.','line_number':1634,'multiline':False]['text':' If this is not a dynamic table operation, we need to generate keys and values.','line_number':1636,'multiline':False]['text':' Find a random table to operate on.','line_number':1644,'multiline':False]['text':' Select a random base table that is not flagged for deletion.','line_number':1651,'multiline':False]['text':' Try again next time.','line_number':1665,'multiline':False]['text':' Get the table name.','line_number':1669,'multiline':False]['text':' Get the tint.','line_number':1670,'multiline':False]['text':' Set the key and value for the operation.','line_number':1671,'multiline':False]['text':' Use atomic here as we can race with another thread that acquires the shared lock.','line_number':1673,'multiline':False]['text':' Do we need to mirror operations? If not, we are done here.','line_number':1676,'multiline':False]['text':' Copy this operation to two new operations on the base table and the mirror.','line_number':1682,'multiline':False]['text':' Create a new operation with the base and mirror table ops. Group them in a transaction','line_number':1694,'multiline':False]['text':' unless we are already in a transaction.','line_number':1695,'multiline':False]['text':' Don't skip measuring the first checkpoint or RTS.','line_number':1763,'multiline':False]['text':' Whether or not we are measuring latency, we track how many operations','line_number':1773,'multiline':False]['text':' are in progress, or that complete.','line_number':1774,'multiline':False]['text':' Set the cursor for the key and value first, outside the transaction which may','line_number':1778,'multiline':False]['text':' be retried. The key and value are generated in op_run_setup.','line_number':1779,'multiline':False]['text':' We may retry on rollback errors.','line_number':1807,'multiline':False]['text':' Assume success and no retry unless ROLLBACK.','line_number':1853,'multiline':False]['text':'
                 * We don't retry on a WT_ROLLBACK error when:
                 * - it is a mirrored operation as Workgen will create a new transaction and
                 * - the mirror table is the one that faced the WT_ROLLBACK error as the operation
                 * on the base table will be lost.
                 ','line_number':1860,'multiline':True]['text':' Never retry on an internal op.','line_number':1879,'multiline':False]['text':' Wait for transactions to complete before stopping.','line_number':1904,'multiline':False]['text':' Set prepare, commit and durable timestamp if prepare is set.','line_number':1924,'multiline':False]['text':' For operations on random tables, if a table has been selected, decrement the','line_number':1946,'multiline':False]['text':' reference counter.','line_number':1947,'multiline':False]['text':' Use atomic here as we can race with another thread that acquires the shared lock.','line_number':1949,'multiline':False]['text':' Generate a random 32-bit value then return a float value equally distributed','line_number':1971,'multiline':False]['text':' between -1.0 and 1.0.','line_number':1972,'multiline':False]['text':'
     * Our throttling is done by dividing each second into THROTTLE_PER_SEC parts (we call the parts
     * divisions). In each division, we perform a certain number of operations. This number is
     * approximately throttle/THROTTLE_PER_SEC, except that throttle is not necessarily a multiple
     * of THROTTLE_PER_SEC, nor is it even necessarily an integer. (That way we can have 1000
     * threads each inserting 0.5 a second).
     ','line_number':1987,'multiline':True]['text':' must evenly divide','line_number':1995,'multiline':False]['text':'
 * Each time throttle is called, we sleep and return a number of operations to perform next. To
 * implement this we keep a time calculation in _next_div set initially to the current time +
 * 1/THROTTLE_PER_SEC. Each call to throttle advances _next_div by 1/THROTTLE_PER_SEC, and if
 * _next_div is in the future, we sleep for the difference between the _next_div and the
 * current_time. We we return (Thread.options.throttle / THROTTLE_PER_SEC) as the number of
 * operations, if it does not divide evenly, we'll make sure to not exceed the number of operations
 * requested per second.
 *
 * The only variation is that the amount of individual sleeps is modified by a random amount (which
 * varies more widely as Thread.options.throttle_burst is greater). This has the effect of
 * randomizing how much clumping happens, and ensures that multiple threads aren't executing in lock
 * step.
 ','line_number':2000,'multiline':True]['text':' Sleep until the next division, but potentially with some randomness.','line_number':2028,'multiline':False]['text':' Enforce that we haven't exceeded the number of operations this second.','line_number':2054,'multiline':False]['text':' Note that _ops_left_this_second may be fractional.','line_number':2055,'multiline':False]['text':' Advance the division, and if we pass into a new second, allocate','line_number':2063,'multiline':False]['text':' more operations into the count of operations left this second.','line_number':2064,'multiline':False]['text':' Creation and destruction of _group and transaction is managed','line_number':2174,'multiline':False]['text':' by Python.','line_number':2175,'multiline':False]['text':' Creation and destruction of _group, transaction is managed by Python.','line_number':2188,'multiline':False]['text':' Setup the buffer, defaulting to zero filled. ','line_number':2423,'multiline':True]['text':'
     * Compressibility is a percentage, 100 is all zeroes, it applies to the proportion of the value
     * that can't be used for the identifier.
     ','line_number':2426,'multiline':True]['text':'
         * The random length is the proportion of the string that should not
         * be compressible. As an example a compressibility of 25 in a value
         * of length 100 should be:
         * 100 - ((100 * 25) / 100) = 75
         * That means that 75% of the string will be random numbers, and 25
         * will be easily compressible zero-fill.
         ','line_number':2435,'multiline':True]['text':' Never overwrite the record number identifier ','line_number':2445,'multiline':True]['text':'
             * TODO: It'd be nice to use workgen_rand here, but this class is without the context of
             * a runner thread, so it's not easy to get access to a state.
             ','line_number':2450,'multiline':True]['text':' not used ','line_number':2486,'multiline':True]['text':' not used ','line_number':2493,'multiline':True]['text':' not used ','line_number':2501,'multiline':True]['text':' not used ','line_number':2520,'multiline':True]['text':' not used ','line_number':2521,'multiline':True]['text':' Sleep for up to a second at a time, so we'll break out if','line_number':2534,'multiline':False]['text':' we should stop.','line_number':2535,'multiline':False]['text':' one second','line_number':2538,'multiline':False]['text':' Update a latency bucket.','line_number':2713,'multiline':False]['text':' First buckets: usecs from 100us to 1000us at 100us each.','line_number':2714,'multiline':False]['text':' Second buckets: milliseconds from 1ms to 1000ms, at 1ms each.','line_number':2718,'multiline':False]['text':' Third buckets are seconds from 1s to 100s, at 1s each.','line_number':2722,'multiline':False]['text':' >100 seconds, accumulate in the biggest bucket. */','line_number':2726,'multiline':False]['text':'
 * Return the latency for which the given percent is lower than it. E.g. for percent == 95, returns
 * the latency for which 95% of latencies are faster (lower), and 5% are slower (higher).
 ','line_number':2731,'multiline':True]['text':'
     * Get the total number of operations in the latency buckets. We can't reliably use latency_ops,
     * because this struct was added up from Track structures that were being copied while being
     * updated.
     ','line_number':2738,'multiline':True]['text':' optimized for percent values over 50, we start counting from above.','line_number':2753,'multiline':False]['text':' We should have accounted for all the buckets.','line_number':2773,'multiline':False]['text':' There's no sensible thing to be done for min/max_latency.','line_number':2786,'multiline':False]['text':' Create a randomizer for the workload before we do anything else. ','line_number':3193,'multiline':True]['text':' Initiate everything else, and start the workload. ','line_number':3198,'multiline':True]['text':' TODO: (void)close_all();','line_number':3204,'multiline':False]['text':' TODO: recover from partial failure here','line_number':3249,'multiline':False]['text':' Register signal handlers for SIGINT (Ctrl-C) and SIGTERM.','line_number':3306,'multiline':False]['text':' Start all threads','line_number':3321,'multiline':False]['text':' Start Timestamp increment thread','line_number':3361,'multiline':False]['text':' Start Idle table cycle thread','line_number':3377,'multiline':False]['text':' Start a thread to create tables','line_number':3393,'multiline':False]['text':' Start a thread to drop tables','line_number':3426,'multiline':False]['text':' Start the background compaction thread.','line_number':3456,'multiline':False]['text':' Don't run the test if any of the above pthread_create fails. ','line_number':3477,'multiline':True]['text':' Treat warmup separately from report interval so that if we have a','line_number':3479,'multiline':False]['text':' warmup period we clear and ignore stats after it ends.','line_number':3480,'multiline':False]['text':' Clear stats after any warmup period completes.','line_number':3484,'multiline':False]['text':' Let the test run, reporting as needed. Exit when we exceed the run time or','line_number':3494,'multiline':False]['text':' when a registered signal is received.','line_number':3495,'multiline':False]['text':' signal all threads to stop.','line_number':3521,'multiline':False]['text':' Signal timestamp and idle table cycle thread to stop.','line_number':3528,'multiline':False]['text':' wait for all threads','line_number':3531,'multiline':False]['text':' Wait for the time increment thread','line_number':3543,'multiline':False]['text':' Wait for the idle table cycle thread.','line_number':3549,'multiline':False]['text':' Wait for the table create table thread.','line_number':3555,'multiline':False]['text':' Wait for the table drop table thread.','line_number':3561,'multiline':False]['text':' Issue the final report.','line_number':3580,'multiline':False]['text':' namespace workgen','line_number':3595,'multiline':False]