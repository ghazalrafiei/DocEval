['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Option descriptions ','line_number':32,'multiline':True]['text':' Option defaults ','line_number':39,'multiline':True]['text':' config_head ','line_number':44,'multiline':True]['text':'
 * STRING_MATCH --
 *  Return if a string matches a bytestring of a specified length.
 ','line_number':47,'multiline':True]['text':'
 * config_opt_init --
 *     Initialize the global configuration options.
 ','line_number':54,'multiline':True]['text':'
     * Option strings come-and-go as we configure them, so allocate copies of the default strings
     * now so that we can always free the string as we allocate new versions.
     ','line_number':72,'multiline':True]['text':'
 * config_opt_cleanup --
 *     Clean up the global configuration options.
 ','line_number':86,'multiline':True]['text':'
 * config_unescape --
 *     Modify a string in place, replacing any backslash escape sequences. The modified string is
 *     always shorter.
 ','line_number':115,'multiline':True]['text':' Backslash needed for spell check. ','line_number':146,'multiline':True]['text':' Note: Unicode (\u) not implemented. ','line_number':150,'multiline':True]['text':'
 * config_threads --
 *     Parse the thread configuration.
 ','line_number':161,'multiline':True]['text':'
         * This call overrides an earlier call. Free and reset everything.
         ','line_number':175,'multiline':True]['text':' Allocate the workload array. ','line_number':183,'multiline':True]['text':'
     * The thread configuration may be in multiple groups, that is, we have
     * to handle configurations like:
     *  threads=((count=2,reads=1),(count=8,inserts=2,updates=1))
     *
     * Start a scan on the original string, then do scans on each string
     * returned from the original string.
     ','line_number':187,'multiline':True]['text':' Move to the next workload slot. ','line_number':201,'multiline':True]['text':' Special random value ','line_number':230,'multiline':True]['text':' There can only be one Truncate thread. ','line_number':287,'multiline':True]['text':' Special random value ','line_number':314,'multiline':True]['text':' Why run with truncate if we don't want any truncation. ','line_number':339,'multiline':True]['text':' Truncate should have its own exclusive thread. ','line_number':344,'multiline':True]['text':'
 * config_opt --
 *     Check a single key=value returned by the config parser against our table of valid keys, along
 *     with the expected type. If everything is okay, set the value.
 ','line_number':370,'multiline':True]['text':'
         * Configuration parsing uses string/ID to distinguish between quoted and unquoted values.
         ','line_number':438,'multiline':True]['text':' Free the old value now we've copied it. ','line_number':453,'multiline':True]['text':'
         * Thread configuration is the one case where the type isn't a "string", it's a "struct".
         ','line_number':464,'multiline':True]['text':'
         * We duplicate the string to len rather than len+1 as we want to truncate the trailing
         * quotation mark.
         ','line_number':477,'multiline':True]['text':'
 * config_opt_file --
 *     Parse a configuration file. We recognize comments '#' and continuation via lines ending in
 *     '\'.
 ','line_number':488,'multiline':True]['text':' Skip leading space. ','line_number':515,'multiline':True]['text':'
         * Find the end of the line; if there's no trailing newline, the line is too long for the
         * buffer or the file was corrupted (there's no terminating newline in the file).
         ','line_number':519,'multiline':True]['text':' Skip trailing space. ','line_number':531,'multiline':True]['text':'
         * If the last non-space character in the line is an escape, the line will be continued.
         * Checked early because the line might otherwise be empty.
         ','line_number':535,'multiline':True]['text':'
         * Discard anything after the first hash character. Check after the escape character, the
         * escape can appear after a comment.
         ','line_number':543,'multiline':True]['text':' Skip trailing space again. ','line_number':550,'multiline':True]['text':'
         * Check for empty lines: note that the right-hand boundary can cross over the left-hand
         * boundary, less-than or equal to is the correct test.
         ','line_number':554,'multiline':True]['text':'
             * If we're continuing from this line, or we haven't started building an option, ignore
             * this line.
             ','line_number':559,'multiline':True]['text':'
             * An empty line terminating an option we're building; clean things up so we can
             * proceed.
             ','line_number':566,'multiline':True]['text':'
 * config_opt_str --
 *     Parse a single line of config options. Continued lines have already been joined.
 ','line_number':608,'multiline':True]['text':' Any parse error has already been reported. ','line_number':634,'multiline':True]['text':'
         * Append the key-value pair to our copy of the config. The config is stored in the order it
         * is processed, so added options will be after any parsed from the original config.
         ','line_number':641,'multiline':True]['text':'
         * If key or value is a string, consider extra space for the quotes. Add 2 to the required
         * space for '=' and the ending null character in "key=value".
         ','line_number':646,'multiline':True]['text':'
 * config_opt_name_value --
 *     Set a name/value configuration pair.
 ','line_number':688,'multiline':True]['text':' name="value" ','line_number':698,'multiline':True]['text':'
 * config_sanity --
 *     Configuration sanity checks.
 ','line_number':707,'multiline':True]['text':'
     * When backup functionalities are enabled, wtperf needs to use copy functions to write backup
     * files. Direct I/O is not compatible with programs interacting with OS system-level copy
     * functions, thus direct I/O and read only cannot be enabled along with backup.
     ','line_number':720,'multiline':True]['text':'
     * When tiered functionalities are enabled, wtperf expects to write to a bucket store. Direct
     * I/O is not compatible with programs interacting with OS system-level copy functions.
     ','line_number':731,'multiline':True]['text':' Various intervals should be less than the run-time. ','line_number':741,'multiline':True]['text':' The maximum is here to keep file name construction simple. ','line_number':750,'multiline':True]['text':' If we have separate tables for scanning, we need a separate count. ','line_number':770,'multiline':True]['text':'
 * config_consolidate --
 *     Consolidate repeated configuration settings so that it only appears once in the configuration
 *     output file.
 ','line_number':834,'multiline':True]['text':'
     * This loop iterates over the config queue and for each entry checks if a later queue entry has
     * the same key. If there's a match, and key is "conn_config" or "table_config", the later queue
     * entry is replaced with a concatenated entry of the two queue entries, the current queue entry
     * is removed. For any other key, if there is a match, the current queue entry is removed.
     ','line_number':845,'multiline':True]['text':'
             * The + 1 here forces the '=' sign to be matched ensuring we don't match keys that have
             * a common prefix such as "table_count" and "table_count_idle" as being the same key.
             ','line_number':856,'multiline':True]['text':'
                     * To concatenate the two config strings, copy the first string to a new one,
                     * replace the ending '"' with a ',' and then concatenate the second string's
                     * value after its starting '"'
                     ','line_number':868,'multiline':True]['text':'
 * config_opt_log --
 *     Write the final config used in this execution to a file.
 ','line_number':893,'multiline':True]['text':'
 * config_opt_print --
 *     Print out the configuration in verbose mode.
 ','line_number':915,'multiline':True]['text':'
 * pretty_print --
 *     Print out lines of text for a 80 character window.
 ','line_number':1004,'multiline':True]['text':' No spaces? ','line_number':1018,'multiline':True]['text':'
 * config_opt_usage --
 *     Configuration usage error message.
 ','line_number':1026,'multiline':True]['text':'
 * config_reopen --
 *     Set the config string for reopen from the given options structure.
 ','line_number':1069,'multiline':True]