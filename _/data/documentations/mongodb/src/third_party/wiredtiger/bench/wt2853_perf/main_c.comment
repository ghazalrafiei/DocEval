['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * JIRA ticket reference: WT-2853
 *
 * Test case description: create two threads: one is populating/updating records in a table with a
 * few indices, the other is reading from table and indices. The test is adapted from one that uses
 * cursor joins, this test does not, but simulates some of the access patterns.
 *
 * Failure mode: after a second or two of progress by both threads, they both appear to slow
 * dramatically, almost locking up. After some time (I've observed from a half minute to a few
 * minutes), the lock up ends and both threads seem to be inserting and reading at a normal fast
 * pace. That continues until the test ends (~30 seconds).
 ','line_number':30,'multiline':True]['text':' Threshold for seconds of gap to be displayed ','line_number':48,'multiline':True]['text':'
 * main --
 *     Setup the creation of tables and indices. Run the insert and read operation threads and check
 *     for any performance discrepancies.
 ','line_number':74,'multiline':True]['text':'
     * Note: id is repeated as id2. This makes it easier to identify the primary key in dumps of the
     * index files.
     ','line_number':117,'multiline':True]['text':'
     * Insert a single record with all items we need to call search() on, this makes our join logic
     * easier.
     ','line_number':137,'multiline':True]['text':'
     * Do not constant-fold this assignment: in gcc 10.3, if you pass the constant directly to
     * set_key, -Wduplicated-branches fails to notice the type difference between the two cases and
     * gives a spurious warning, and diagnostic builds fail.
     ','line_number':142,'multiline':True]['text':'
     * Wait for insert threads to finish. When they are done, signal get threads to complete.
     ','line_number':175,'multiline':True]['text':'
     * Note that slow machines can be skipped for this test. See the bypass code earlier.
     ','line_number':196,'multiline':True]['text':'
 * thread_insert --
 *     Insert records to stress the WiredTiger's indices.
 ','line_number':211,'multiline':True]['text':' 1 second resolution enough ','line_number':225,'multiline':True]['text':'
         * Insert threads may stomp on each other's records; that's okay.
         ','line_number':242,'multiline':True]['text':'
 * thread_get --
 *     Continuously perform reads and loop through the indices with same key. Record the time taken
 *     to finish the read on table and the indices.
 ','line_number':295,'multiline':True]['text':' 1 second resolution enough ','line_number':308,'multiline':True]['text':'
         * Reset the cursors, potentially allowing the insert threads to proceed.
         ','line_number':343,'multiline':True]['text':'
 * create_perf_json --
 *     Construct the performance json which is used to generate the performance charts.
 ','line_number':370,'multiline':True]