['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' For convenience: A type exposed to Python that cannot be negative.','line_number':33,'multiline':False]['text':'
 * These classes are all exposed to Python via SWIG. While they may contain
 * data that is private to C++, such data must not prevent the objects from
 * being shared. Tables, Keys, Values, Operations and Threads can be shared: a
 * single Key object might appear in many operations; Operations may appear
 * multiple times in a Thread or in different Threads; the same Thread may
 * appear multiple times in a Workload list, etc.
 *
 * Certain kinds of state are allowed: A Table contains a unique pointer that
 * is used within the internal part of the Context.  Stats contain lots
 * of state, but is made available after a Workload.run().
 *
 * Python controls the lifetime of (nearly) all objects of these classes.
 * The exception is Stat/Track objects, which are also created/used
 * internally to calculate and show statistics during a run.
 ','line_number':69,'multiline':True]['text':' Threads maintain the total thread operation and total latency they've','line_number':86,'multiline':False]['text':' experienced.','line_number':87,'multiline':False]['text':' Total operations not completed','line_number':89,'multiline':False]['text':' Total operations completed','line_number':90,'multiline':False]['text':' Total operations rolled back','line_number':91,'multiline':False]['text':' Total ops sampled for latency','line_number':92,'multiline':False]['text':' Total latency','line_number':93,'multiline':False]['text':' Computed for percentile_latency','line_number':94,'multiline':False]['text':' Minimum/maximum latency, shared with the monitor thread, that is, the','line_number':96,'multiline':False]['text':' monitor thread clears it so it's recalculated again for each period.','line_number':97,'multiline':False]['text':' Minimum latency (uS)','line_number':99,'multiline':False]['text':' Maximum latency (uS)','line_number':100,'multiline':False]['text':' Latency buckets. From python, accessed via methods us(), ms(), sec()','line_number':123,'multiline':False]['text':' < 1us ... 1000us','line_number':124,'multiline':False]['text':' < 1ms ... 1000ms','line_number':125,'multiline':False]['text':' < 1s 2s ... 100s','line_number':126,'multiline':False]['text':' use explicit assign method','line_number':128,'multiline':False]['text':' use explicit assign method','line_number':158,'multiline':False]['text':' A Context tracks the current record number for each uri, used','line_number':161,'multiline':False]['text':' for key generation.','line_number':162,'multiline':False]['text':' To prevent silent errors, this class is set up in Python so that new','line_number':178,'multiline':False]['text':' properties are prevented, only existing properties can be set.','line_number':179,'multiline':False]['text':' XXX select table from range ','line_number':213,'multiline':True]['text':' XXX specify more about key distribution ','line_number':260,'multiline':True]['text':' XXX specify how value is calculated ','line_number':281,'multiline':True]['text':' Indicates whether a table is selected randomly to be worked on.','line_number':305,'multiline':False]['text':' Maintain the random table being used by each thread running the operation.','line_number':307,'multiline':False]['text':' Operation working on random tables.','line_number':314,'multiline':False]['text':' Constructor with string applies to NOOP, SLEEP, CHECKPOINT','line_number':316,'multiline':False]['text':' Check if adding (via Python '+') another operation to this one is','line_number':321,'multiline':False]['text':' as easy as appending the new operation to the _group.','line_number':322,'multiline':False]['text':' To prevent silent errors, this class is set up in Python so that new','line_number':340,'multiline':False]['text':' properties are prevented, only existing properties can be set.','line_number':341,'multiline':False]['text':'
 * This is a list of threads, which may be used in the Workload constructor.
 * It participates with ThreadList defined on the SWIG/Python side and
 * some Python operators added to Thread to allow Threads to be easily
 * composed using '+' and multiplied (by integer counts) using '*'.
 * Users of the workgen API in Python don't ever need to use
 * ThreadListWrapper or ThreadList.
 ','line_number':370,'multiline':True]['text':' To prevent silent errors, this class is set up in Python so that new','line_number':437,'multiline':False]['text':' properties are prevented, only existing properties can be set.','line_number':438,'multiline':False]['text':' Dynamic create/drop options ','line_number':454,'multiline':True]