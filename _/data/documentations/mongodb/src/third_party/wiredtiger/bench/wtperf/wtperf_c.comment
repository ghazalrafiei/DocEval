['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Default values. ','line_number':31,'multiline':True]['text':' Retrieve an ID for the next insert operation. ','line_number':58,'multiline':True]['text':'
 * Each time this function is called we will overwrite the first and one other element in the value
 * buffer. The delta can be zero for insert operations and may have a value for update or modify
 * workloads.
 ','line_number':65,'multiline':True]['text':'
     * Limit how much of the buffer we validate for length, this means that only threads that do
     * growing updates/modifies will ever make changes to values outside of the initial value size,
     * but that's a fair trade off for avoiding figuring out how long the value is more accurately
     * in this performance sensitive function.
     ','line_number':79,'multiline':True]['text':'
     * Generate a single random value and re-use it. We generally only have small ranges in this
     * function, so avoiding a bunch of calls is worthwhile.
     ','line_number':92,'multiline':True]['text':'
     * Ensure we don't write past the end of a value when configured for randomly sized values.
     ','line_number':99,'multiline':True]['text':'
     * If i happened to be 0, we'll be re-writing the same value twice, but that doesn't matter.
     ','line_number':107,'multiline':True]['text':'
 * Partition data by key ranges.
 ','line_number':113,'multiline':True]['text':'
     * The first part of the key range is reserved for dedicated scan tables, if any. The scan
     * tables do not grow, but the rest of the key space may.
     ','line_number':119,'multiline':True]['text':' Take care to return a result in [0..table_count-1]. ','line_number':127,'multiline':True]['text':'
 * Figure out and extend the size of the value string, used for growing updates/modifies. Delta is
 * the value to be updated according to the thread operation.
 ','line_number':136,'multiline':True]['text':' Ensure we aren't changing across boundaries ','line_number':156,'multiline':True]['text':' Bail if there isn't anything to do ','line_number':162,'multiline':True]['text':' Extend the value by the configured amount. ','line_number':169,'multiline':True]['text':'
 * track_operation --
 *     Update an operation's tracking structure with new latency information.
 ','line_number':175,'multiline':True]['text':' average microseconds per call ','line_number':184,'multiline':True]['text':' track total latency ','line_number':187,'multiline':True]['text':' track max/min latency ','line_number':189,'multiline':True]['text':'
     * Update a latency bucket. First buckets: usecs from 100us to 1000us at 100us each.
     ','line_number':194,'multiline':True]['text':'
     * Second buckets: milliseconds from 1ms to 1000ms, at 1ms each.
     ','line_number':200,'multiline':True]['text':'
     * Third buckets are seconds from 1s to 100s, at 1s each.
     ','line_number':206,'multiline':True]['text':' >100 seconds, accumulate in the biggest bucket. ','line_number':212,'multiline':True]['text':' NOTREACHED ','line_number':236,'multiline':True]['text':'
 * do_range_reads --
 *     If configured to execute a sequence of next operations after each search do them. Ensuring
 *     the keys we see are always in order.
 ','line_number':239,'multiline':True]['text':' Save where the first key is for comparisons. ','line_number':263,'multiline':True]['text':'
     * If an option tells us to randomly select the number of values to read in a range, we use the
     * value of read_range as the upper bound on the number of values to read. YCSB-E stipulates
     * that we use a uniform random distribution for the number of values, so we do not use the
     * wtperf random routine, which may take us to Pareto.
     ','line_number':267,'multiline':True]['text':' We are done if we reach the end. ','line_number':281,'multiline':True]['text':' Retrieve and decode the key ','line_number':285,'multiline':True]['text':' pre_load_data --
 *  Pull everything into cache before starting the workload phase.
 ','line_number':297,'multiline':True]['text':' -Wconditional-initialized ','line_number':353,'multiline':True]['text':' Setup the timer for throttling. ','line_number':405,'multiline':True]['text':' Setup for truncate ','line_number':409,'multiline':True]['text':'
         * Generate the next key and setup operation specific statistics tracking objects.
         ','line_number':428,'multiline':True]['text':' FALLTHROUGH ','line_number':442,'multiline':True]['text':' FALLTHROUGH ','line_number':446,'multiline':True]['text':'
             * If the workload is started without a populate phase we rely on at least one insert to
             * get a valid item id.
             ','line_number':453,'multiline':True]['text':' Required but not used. ','line_number':461,'multiline':True]['text':' can't happen ','line_number':465,'multiline':True]['text':'
             * Spread the data out around the multiple databases.
             ','line_number':471,'multiline':True]['text':'
         * Skip the first time we do an operation, when trk->ops is 0, to avoid first time latency
         * spikes.
         ','line_number':476,'multiline':True]['text':'
             * Reads can fail with WT_NOTFOUND: we may be searching in a random range, or an insert
             * thread might have updated the last record in the table but not yet finished the
             * actual insert. Count failed search in a random range as a "read".
             ','line_number':487,'multiline':True]['text':'
                 * If we want to read a range, then call next for several operations, confirming
                 * that the next key is in the correct order.
                 ','line_number':498,'multiline':True]['text':' The error return reset the cursor's key. ','line_number':512,'multiline':True]['text':' FALLTHROUGH ','line_number':515,'multiline':True]['text':' Pause between truncate attempts ','line_number':529,'multiline':True]['text':'
                 * Copy as much of the previous value as is safe, and be sure to NUL-terminate.
                 ','line_number':541,'multiline':True]['text':'
                 * Distribute the modifications across the whole document. We randomly choose up to
                 * the maximum number of modifications and modify up to the maximum percent of the
                 * record size.
                 ','line_number':557,'multiline':True]['text':'
                     * The maximum that will be modified is a fixed percentage of the total record
                     * size.
                     ','line_number':563,'multiline':True]['text':'
                     * Randomize the maximum modification size and offset per modify.
                     ','line_number':569,'multiline':True]['text':'
                         * Offset location difference between modifications
                         ','line_number':579,'multiline':True]['text':'
                     * Make sure the offset is more than size, otherwise modifications don't spread
                     * properly.
                     ','line_number':591,'multiline':True]['text':'
                 * Pass the old and new data to find out the modify vectors, according to the passed
                 * input. This function may fail when the modifications count reaches the maximum
                 * number of modifications that are allowed for the modify operation.
                 ','line_number':633,'multiline':True]['text':'
             * Reads can fail with WT_NOTFOUND: we may be searching in a random range, or an insert
             * thread might have updated the last record in the table but not yet finished the
             * actual insert. Count a failed search in a random range as a "read".
             ','line_number':651,'multiline':True]['text':'
                 * If we are running with explicit transactions configured and we hit a WT_ROLLBACK,
                 * then we should rollback the current transaction and attempt to continue. This
                 * does break the guarantee of insertion order in cases of ordered inserts, as we
                 * aren't retrying here.
                 ','line_number':661,'multiline':True]['text':' can't happen ','line_number':683,'multiline':True]['text':' Update the log-like table. ','line_number':686,'multiline':True]['text':' Release the cursor, if we have multiple tables. ','line_number':708,'multiline':True]['text':' Gather statistics ','line_number':716,'multiline':True]['text':' Increment operation count ','line_number':724,'multiline':True]['text':'
         * Commit the transaction if grouping operations together or tracking changes in our log
         * table.
         ','line_number':728,'multiline':True]['text':' Schedule the next operation ','line_number':744,'multiline':True]['text':'
         * Decrement throttle ops and check if we should sleep and then get more work to perform.
         ','line_number':748,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':760,'multiline':True]['text':'
 * run_mix_schedule_op --
 *     Replace read operations with another operation, in the configured percentage.
 ','line_number':770,'multiline':True]['text':' Jump around the array to roughly spread out the operations. ','line_number':780,'multiline':True]['text':'
     * Find a read operation and replace it with another operation. This is roughly n-squared, but
     * it's an N of 100, leave it.
     ','line_number':783,'multiline':True]['text':'
                 * Passed a percentage of total operations and should always be a read operation to
                 * replace, but don't allow infinite loops.
                 ','line_number':792,'multiline':True]['text':'
 * run_mix_schedule --
 *     Schedule the mixed-run operations.
 ','line_number':809,'multiline':True]['text':' Confirm inserts, modifies, reads and updates cannot all be zero. ','line_number':832,'multiline':True]['text':'
     * Check for a simple case where the thread is only doing insert or modify or update operations
     * (because the default operation for a job-mix is read, the subsequent code works fine if only
     * reads are specified).
     ','line_number':838,'multiline':True]['text':'
     * The worker thread configuration is done as ratios of operations.  If
     * the caller gives us something insane like "reads=77,updates=23" (do
     * 77 reads for every 23 updates), we don't want to do 77 reads followed
     * by 23 updates, we want to uniformly distribute the read and update
     * operations across the space.  Convert to percentages and then lay out
     * the operations across an array.
     *
     * Percentage conversion is lossy, the application can do stupid stuff
     * here, for example, imagine a configured ratio of "reads=1,inserts=2,
     * updates=999999".  First, if the percentages are skewed enough, some
     * operations might never be done.  Second, we set the base operation to
     * read, which means any fractional results from percentage conversion
     * will be reads, implying read operations in some cases where reads
     * weren't configured.  We should be fine if the application configures
     * something approaching a rational set of ratios.
     ','line_number':857,'multiline':True]['text':' Do bulk loads if populate is single-threaded. ','line_number':924,'multiline':True]['text':' Create the cursors. ','line_number':929,'multiline':True]['text':' Populate the databases. ','line_number':939,'multiline':True]['text':'
         * Figure out which table this op belongs to.
         ','line_number':952,'multiline':True]['text':'
         * Gather statistics. We measure the latency of inserting a single key. If there are
         * multiple tables, it is the time for insertion into all of them.
         ','line_number':977,'multiline':True]['text':' Same as trk->ops ','line_number':987,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1018,'multiline':True]['text':' Open the logging file. ','line_number':1063,'multiline':True]['text':' Set line buffering for monitor file. ','line_number':1076,'multiline':True]['text':' If the workers are done, don't bother with a final call. ','line_number':1108,'multiline':True]['text':'
         * For now the only item we need to worry about changing is inserts when we transition from
         * the populate phase to workload phase.
         ','line_number':1127,'multiline':True]['text':' Note does not have initial comma before "insert" ','line_number':1159,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1221,'multiline':True]['text':' Break the sleep up, so we notice interrupts faster. ','line_number':1261,'multiline':True]['text':' If the workers are done, don't bother with a final call. ','line_number':1267,'multiline':True]['text':'
         * open_cursor can return EBUSY if concurrent with a metadata operation, retry in that case.
         ','line_number':1273,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1302,'multiline':True]['text':' Break the sleep up, so we notice interrupts faster. ','line_number':1336,'multiline':True]['text':' If tiered storage is disabled we are done. Otherwise, we want a final checkpoint. ','line_number':1343,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1363,'multiline':True]['text':' Break the sleep up, so we notice interrupts faster. ','line_number':1397,'multiline':True]['text':'
             * We need to make a final call to flush_tier after the stop signal arrives. We
             * therefore save the global stop signal into a local variable, so we are sure to
             * complete another iteration of this loop and the final flush_tier before we exit.
             ','line_number':1400,'multiline':True]['text':' If workers are done, do a final call to flush that last data. ','line_number':1409,'multiline':True]['text':'
         * In order to get all the data into the object when the work is done, we need to call
         * checkpoint with flush_tier enabled.
         ','line_number':1412,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1431,'multiline':True]['text':'
     * Figure out how many items we should scan. We base the percentage on the icount.
     ','line_number':1463,'multiline':True]['text':'
     * When we scan the tables, we will increment the key by an amount that causes us to visit each
     * table in order, and jump ahead in the key space when returning to a table. By doing this, we
     * don't repeat keys until we visit them all, but we don't visit keys in sequential order. This
     * might better emulate the access pattern to a main table when an index is scanned, or a more
     * complex query is performed.
     ','line_number':1469,'multiline':True]['text':' Break the sleep up, so we notice interrupts faster. ','line_number':1502,'multiline':True]['text':' If the workers are done, don't bother with a final call. ','line_number':1508,'multiline':True]['text':'
                 * Continue with the next slice of the key space.
                 ','line_number':1526,'multiline':True]['text':' Notify our caller we failed and shut the system down. ','line_number':1543,'multiline':True]['text':'
     * If this is going to be a tiered workload, start the checkpoint threads and the flush threads
     * during the populate phase so that the tiers are created as we populate the database.
     ','line_number':1566,'multiline':True]['text':' Start the checkpoint thread. ','line_number':1571,'multiline':True]['text':' Start cycling idle tables if configured. ','line_number':1592,'multiline':True]['text':'
         * Sleep for 100th of a second, report_interval is in second granularity, each 100th
         * increment of elapsed is a single increment of interval.
         ','line_number':1602,'multiline':True]['text':'
     * Move popthreads aside to narrow possible race with the monitor thread. The latency tracking
     * code also requires that popthreads be NULL when the populate phase is finished, to know that
     * the workload phase has started.
     ','line_number':1624,'multiline':True]['text':' Report if any worker threads didn't finish. ','line_number':1634,'multiline':True]['text':'
     * This is needed as the divisions will fail if the insert takes no time which will only be the
     * case when there is no data to insert.
     ','line_number':1643,'multiline':True]['text':' Stop cycling idle tables. ','line_number':1659,'multiline':True]['text':'
     * Stop the flush and checkpoint threads if we used them during populate. We must stop the flush
     * thread before stopping the checkpoint thread as the flush thread depends on a later
     * checkpoint running.
     ','line_number':1661,'multiline':True]['text':'
     * Reopen the connection. We do this so that the workload phase always starts with the on-disk
     * files, and so that read-only workloads can be identified. This is particularly important for
     * LSM, where the merge algorithm is more aggressive for read-only trees.
     ','line_number':1702,'multiline':True]['text':' wtperf->conn is released no matter the return value from close(). ','line_number':1707,'multiline':True]['text':' Start cycling idle tables. ','line_number':1750,'multiline':True]['text':' Allocate memory for the worker threads. ','line_number':1756,'multiline':True]['text':' Start each workload. ','line_number':1768,'multiline':True]['text':' Figure out the workload's schedule. ','line_number':1777,'multiline':True]['text':' Start the workload's threads. ','line_number':1781,'multiline':True]['text':'
         * Sleep for one second at a time. If we are tracking run time, check to see if we're done,
         * and if we're only tracking run time, go back to sleep.
         ','line_number':1795,'multiline':True]['text':' Sum the operations we've done. ','line_number':1808,'multiline':True]['text':' If we're checking total operations, see if we're done. ','line_number':1818,'multiline':True]['text':' If writing out throughput information, see if it's time. ','line_number':1824,'multiline':True]['text':' Notify the worker threads they are done. ','line_number':1851,'multiline':True]['text':' Stop cycling idle tables. ','line_number':1854,'multiline':True]['text':' Drop tables if configured to and this isn't an error path ','line_number':1859,'multiline':True]['text':' Report if any worker threads didn't finish. ','line_number':1864,'multiline':True]['text':'
 * Ensure that icount matches the number of records in the existing table.
 ','line_number':1873,'multiline':True]['text':'
 * Populate the uri array.
 ','line_number':1928,'multiline':True]['text':' If there is only one table, just use the base name. ','line_number':1944,'multiline':True]['text':' Create the log-like-table URI. ','line_number':1952,'multiline':True]['text':'
 * wtperf_copy --
 *     Create a new WTPERF structure as a duplicate of a previous one.
 ','line_number':2016,'multiline':True]['text':'
     * Don't copy the home and monitor directories, they are filled in by our caller, explicitly.
     ','line_number':2033,'multiline':True]['text':'
 * wtperf_free --
 *     Free any storage allocated in the WTPERF structure.
 ','line_number':2069,'multiline':True]['text':'
 * config_compress --
 *     Parse the compression configuration.
 ','line_number':2105,'multiline':True]['text':'
 * config_tiered --
 *     Parse the tiered extension configuration
 ','line_number':2150,'multiline':True]['text':'
 * create_tiered_bucket --
 *     Create the bucket directory required for tiered storage to work.
 ','line_number':2193,'multiline':True]['text':' Check that we can fit the paths, separator, and null byte. ','line_number':2208,'multiline':True]['text':' Allocate an array to hold our WTPERF copies. ','line_number':2240,'multiline':True]['text':' Allocate an array to hold our thread IDs. ','line_number':2243,'multiline':True]['text':'
         * Set up unique home/monitor directories for each database. Re-create the directories if
         * creating the databases.
         ','line_number':2250,'multiline':True]['text':' Wait for threads to finish. ','line_number':2269,'multiline':True]['text':' Run an instance of wtperf for a given configuration. ','line_number':2283,'multiline':True]['text':' [-Wconditional-uninitialized] ','line_number':2306,'multiline':True]['text':' Open the real connection. ','line_number':2312,'multiline':True]['text':' If creating, create the tables. ','line_number':2320,'multiline':True]['text':' Start the monitor thread. ','line_number':2324,'multiline':True]['text':' If creating, populate the table. ','line_number':2330,'multiline':True]['text':' Optional workload. ','line_number':2334,'multiline':True]['text':'
         * If we have a workload, close and reopen the connection so that LSM can detect read-only
         * workloads.
         ','line_number':2336,'multiline':True]['text':' Didn't create, set insert count. ','line_number':2343,'multiline':True]['text':' Start the backup thread. ','line_number':2346,'multiline':True]['text':' Start the checkpoint thread. ','line_number':2352,'multiline':True]['text':' Start the flush_tier thread. ','line_number':2360,'multiline':True]['text':' Start the scan thread. ','line_number':2366,'multiline':True]['text':' Execute the workload. ','line_number':2375,'multiline':True]['text':' One final summation of the operations we've completed. ','line_number':2379,'multiline':True]['text':' Notify the worker threads they are done. ','line_number':2425,'multiline':True]['text':' We must stop the flush thread before the checkpoint thread. ','line_number':2429,'multiline':True]['text':'
 * usage --
 *     wtperf usage print, no error.
 ','line_number':2466,'multiline':True]['text':' The first WTPERF structure (from which all others are derived). ','line_number':2497,'multiline':True]['text':' Do a basic validation of options, and home is needed before open. ','line_number':2511,'multiline':True]['text':'
     * If the user did not specify a monitor directory then set the monitor directory to the home
     * dir.
     ','line_number':2551,'multiline':True]['text':' Parse configuration settings from configuration file. ','line_number':2560,'multiline':True]['text':' Parse options that override values set via a configuration file. ','line_number':2564,'multiline':True]['text':' Allow -o key=value ','line_number':2569,'multiline':True]['text':' You can't have truncate on a random collection. ','line_number':2586,'multiline':True]['text':' We can't run truncate with more than one table. ','line_number':2592,'multiline':True]['text':' Make stdout line buffered, so verbose output appears quickly. ','line_number':2598,'multiline':True]['text':' Concatenate non-default configuration strings. ','line_number':2601,'multiline':True]['text':' Generate config for the close/reopen after populating. ','line_number':2684,'multiline':True]['text':' Sanity-check the configuration. ','line_number':2687,'multiline':True]['text':' If creating, remove and re-create the home and tiered bucket directories. ','line_number':2691,'multiline':True]['text':' Write a copy of the config. ','line_number':2697,'multiline':True]['text':' Display the configuration. ','line_number':2704,'multiline':True]['text':' Initialize the threads. ','line_number':2739,'multiline':True]['text':'
         * We don't want the threads executing in lock-step, seed each one differently.
         ','line_number':2744,'multiline':True]['text':'
         * Every thread gets a key/data buffer because we don't bother to distinguish between
         * threads needing them and threads that don't, it's not enough memory to bother. These
         * buffers hold strings: trailing NUL is included in the size.
         ','line_number':2749,'multiline':True]['text':'
         * Initialize and then toss in a bit of random values if needed.
         ','line_number':2757,'multiline':True]['text':'
         * Every thread gets tracking information and is initialized for latency measurements, for
         * the same reason.
         ','line_number':2764,'multiline':True]['text':' Start the threads. ','line_number':2776,'multiline':True]['text':'
     * We don't free the thread structures or any memory referenced, or NULL the reference when we
     * stop the threads; the thread structure is still being read by the monitor thread (among
     * others). As a standalone program, leaking memory isn't a concern, and it's simpler that way.
     ','line_number':2798,'multiline':True]['text':' Drop any tables. ','line_number':2818,'multiline':True]['text':'
     * It is legal to configure a zero size populate phase, hide that from other code by pretending
     * the range is 1 in that case.
     ','line_number':2852,'multiline':True]['text':'
     * If we have a random cursor set up then use it.
     ','line_number':2880,'multiline':True]['text':' 0 is outside the expected range. ','line_number':2886,'multiline':True]['text':'
         * Resetting the cursor is not fatal. We still return the value we retrieved above. We do it
         * so that we don't leave a cursor positioned.
         ','line_number':2893,'multiline':True]['text':'
     * Use WiredTiger's random number routine: it's lock-free and fairly good.
     ','line_number':2903,'multiline':True]['text':' Use Pareto distribution to give 80/20 hot/cold values. ','line_number':2907,'multiline':True]['text':'
     * A distribution that selects the record with a higher key with higher probability. This was
     * added to support the YCSB-D workload, which calls for "read latest" selection for records
     * that are read.
     ','line_number':2911,'multiline':True]['text':'
         * If we have 128-bit integers, we can use a fancy method described below. If not, we use a
         * simple one.
         ','line_number':2917,'multiline':True]['text':'
         * We generate a random number that is in the range between 0 and largest * largest, where
         *     largest is the last inserted key. Then we take a square root of that random number --
         *     this is our target selection. With this formula, larger keys are more likely to get
         *     selected than smaller keys, and the probability of selection is proportional to the
         *     value of the key, which is what we want.
         *
         * First we need a 128-bit random number, and the WiredTiger random number function gives us
         *     only a 32-bit random value. With only a 32-bit value, the range of the random number
         *     will always be smaller than the square of the largest insert key for workloads with a
         *     large number of keys. So we need a longer random number for that.
         *
         * We get a 128-bit random number by concatenating four 32-bit numbers. We get less entropy
         *     this way than via a true 128-bit generator, but we are not defending against crypto
         *     attacks here, so this is good enough.
         ','line_number':2922,'multiline':True]['text':'
         * Now we limit the random value to be within the range of square of the latest insert key
         * and take a square root of that value.
         ','line_number':2944,'multiline':True]['text':' If we don't have 128-bit integers, we simply select a number from a fixed sized group of
         * recently inserted records.
         ','line_number':2953,'multiline':True]['text':'
     * Wrap the key to within the expected range and avoid zero: we never insert that key.
     ','line_number':2963,'multiline':True]