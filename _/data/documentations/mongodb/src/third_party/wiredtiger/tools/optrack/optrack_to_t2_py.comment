['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':'!/usr/bin/env python','line_number':28,'multiline':False]['text':' The time units used in the input files is nanoseconds. Presently the','line_number':39,'multiline':False]['text':' operation tracking code does not produce data using any other time','line_number':40,'multiline':False]['text':' units.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' We aggregate data for intervals with the duration specified by','line_number':45,'multiline':False]['text':' the following variable.','line_number':46,'multiline':False]['text':' Each file has a timestamp indicating when the logging began','line_number':49,'multiline':False]['text':' Codes for various colors for printing of informational and error messages.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Go over all operation records in the dataframe and assign stack depths.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Pop all items off stack whose end time is earlier than my','line_number':80,'multiline':False]['text':' end time. They are not the callers on my stack, so I don't want to','line_number':81,'multiline':False]['text':' count them.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':'','line_number':99,'multiline':False]['text':' An intervalEnd is a tuple of three items.','line_number':100,'multiline':False]['text':' item #0 is the timestamp,','line_number':101,'multiline':False]['text':' item #1 is the event type,','line_number':102,'multiline':False]['text':' item #2 is the function name.','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':' Let's open the log file.','line_number':164,'multiline':False]['text':'','line_number':243,'multiline':False]['text':' Find the session ID in the file name. The format of the input file name is','line_number':244,'multiline':False]['text':' optrack.<PID>.<session-id>-<internal/external>.txt','line_number':245,'multiline':False]['text':'','line_number':246,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' The input is the dataframe, where each record has a function name, its','line_number':273,'multiline':False]['text':' begin timestamp, its end timestamp and its stackdepth. This funciton will','line_number':274,'multiline':False]['text':' aggregate this data to determine the percentage of time we spent in each','line_number':275,'multiline':False]['text':' function in each interval.','line_number':276,'multiline':False]['text':'','line_number':277,'multiline':False]['text':' The output dataframe has a time column and then a column for','line_number':283,'multiline':False]['text':' each unique function in this file. Then there is one row','line_number':284,'multiline':False]['text':' per interval.','line_number':285,'multiline':False]['text':'','line_number':286,'multiline':False]['text':' Get a list of all functions that we have in the input data frame.','line_number':293,'multiline':False]['text':' Each function will be a column in the output dataframe.','line_number':294,'multiline':False]['text':' We have two time formats. The data in the file is using fine-granular','line_number':300,'multiline':False]['text':' time units, mostly likely from the CPU's cycle counter. The output','line_number':301,'multiline':False]['text':' format will use coarse-granular time intervals in seconds. So we need','line_number':302,'multiline':False]['text':' to convert the units of the input data to seconds.','line_number':303,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' For each function in the current interval compute the aggregate','line_number':324,'multiline':False]['text':' duration that it executed in the current interval.','line_number':325,'multiline':False]['text':' Select all functions, whose begin and end time fall within the','line_number':335,'multiline':False]['text':' current interval.','line_number':336,'multiline':False]['text':' Entire function duration gets added for functions that begin and','line_number':337,'multiline':False]['text':' end during this interval.','line_number':338,'multiline':False]['text':' Select all functions, whose begin timestamp is within this','line_number':353,'multiline':False]['text':' interval, but the end timestamp is outside of it.','line_number':354,'multiline':False]['text':' Only the duration up to the end of the interval gets added','line_number':355,'multiline':False]['text':' for functions that begin during this interval, but end','line_number':356,'multiline':False]['text':' outside of it.','line_number':357,'multiline':False]['text':' Select all functions, whose end timestamp is within this','line_number':371,'multiline':False]['text':' interval, but the begin timestamp is in an earlier interval.','line_number':372,'multiline':False]['text':' For functions that end in the interval, but begin outside it','line_number':373,'multiline':False]['text':' we add the portion of the duration from the beginning of the','line_number':374,'multiline':False]['text':' interval and until the function end time.','line_number':375,'multiline':False]['text':' Select all functions, whose begin timestamp is in an earlier','line_number':389,'multiline':False]['text':' interval and end timestamp is in a later interval.','line_number':390,'multiline':False]['text':' For functions that last during the entire interval the duration','line_number':391,'multiline':False]['text':' equivalent to the interval's length gets added.','line_number':392,'multiline':False]['text':' Convert the durations to percentages and record them','line_number':405,'multiline':False]['text':' in the output dictionary','line_number':406,'multiline':False]['text':' In the output dictionary find all functions that did not','line_number':413,'multiline':False]['text':' execute during this interval and append zero.','line_number':414,'multiline':False]['text':' The list at each function's key should be as long as the list','line_number':415,'multiline':False]['text':' at key 'time'.','line_number':416,'multiline':False]['text':' Make the dataframe from the dictionary. Arrange the columns','line_number':425,'multiline':False]['text':' such that 'time' is first.','line_number':426,'multiline':False]['text':'','line_number':427,'multiline':False]['text':' Write the data to file','line_number':436,'multiline':False]['text':' If we have not found a terminated process, sleep for a while','line_number':472,'multiline':False]['text':' Set up the argument parser','line_number':481,'multiline':False]['text':'','line_number':482,'multiline':False]['text':' Determine the target job parallelism','line_number':497,'multiline':False]['text':' Process all files in parallel','line_number':503,'multiline':False]['text':' Find at least one terminated process','line_number':517,'multiline':False]['text':' Wait for all processes to terminate','line_number':520,'multiline':False]