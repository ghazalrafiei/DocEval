['text':'!/usr/bin/env python3','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' Dump/decode a WiredTiger .wt file.','line_number':29,'multiline':False]['text':' This is not a complete dump program and should not be depended upon for correctness --','line_number':31,'multiline':False]['text':' see "wt dump" for that.  But this is standalone (doesn't require linkage with any WT','line_number':32,'multiline':False]['text':' libraries), and may be useful as 1) a learning tool 2) quick way to hack/extend dumping.','line_number':33,'multiline':False]['text':' Optional dependency: crc32c','line_number':37,'multiline':False]['text':' Optional dependency: python-snappy','line_number':45,'multiline':False]['text':' A container for fields in the WT_PAGE_HEADER','line_number':55,'multiline':False]['text':' A container for fields in the WT_BLOCK_HEADER','line_number':59,'multiline':False]['text':'###############################################################','line_number':63,'multiline':False]['text':' Borrowed from intpacking.py, with small adjustments.','line_number':64,'multiline':False]['text':' Variable-length integer packing','line_number':65,'multiline':False]['text':' need: up to 64 bits, both signed and unsigned','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' Try hard for small values (up to ~2 bytes), after that, just encode the','line_number':68,'multiline':False]['text':' length in the first byte.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':'  First byte | Next |                        |','line_number':71,'multiline':False]['text':'  byte       | bytes| Min Value              | Max Value','line_number':72,'multiline':False]['text':' ------------+------+------------------------+--------------------------------','line_number':73,'multiline':False]['text':' [00 00xxxx] | free | N/A                    | N/A','line_number':74,'multiline':False]['text':' [00 01llll] | 8-l  | -2^64                  | -2^13 - 2^6','line_number':75,'multiline':False]['text':' [00 1xxxxx] | 1    | -2^13 - 2^6            | -2^6 - 1 ','line_number':76,'multiline':False]['text':' [01 xxxxxx] | 0    | -2^6                   | -1','line_number':77,'multiline':False]['text':' [10 xxxxxx] | 0    | 0                      | 2^6 - 1 ','line_number':78,'multiline':False]['text':' [11 0xxxxx] | 1    | 2^6                    | 2^13 + 2^6 - 1','line_number':79,'multiline':False]['text':' [11 10llll] | l    | 2^13 + 2^6             | 2^64 - 1','line_number':80,'multiline':False]['text':' [11 11xxxx] | free | N/A                    | N/A','line_number':81,'multiline':False]['text':'###############################################################','line_number':150,'multiline':False]['text':' page types from btmem.h:','line_number':152,'multiline':False]['text':'###############################################################','line_number':182,'multiline':False]['text':'print('POSITION ' + str(self.pos))','line_number':190,'multiline':False]['text':' We only handle limited slices, like this: x[n:]','line_number':192,'multiline':False]['text':'print('SLICE start ' + str(key.start))','line_number':195,'multiline':False]['text':'import pdb','line_number':196,'multiline':False]['text':'pdb.set_trace()','line_number':197,'multiline':False]['text':'print('RETURN ' + str(ret) + ' pos=' + str(self.pos))','line_number':208,'multiline':False]['text':' An encapsulation around a file object that saves bytes read','line_number':213,'multiline':False]['text':' in increments so raw bytes can be shown.','line_number':214,'multiline':False]['text':' Throw away previous saved when we seek','line_number':228,'multiline':False]['text':' Return bytes read since last call to this function','line_number':235,'multiline':False]['text':' Manages printing to output.','line_number':241,'multiline':False]['text':' We keep track of cells, the first line printed for a new cell','line_number':242,'multiline':False]['text':' shows the cell number, subsequent lines are indented a little.','line_number':243,'multiline':False]['text':' If the split option is on, we show any bytes that were used','line_number':244,'multiline':False]['text':' in decoding before the regular decoding output appears.','line_number':245,'multiline':False]['text':' Those 'input bytes' are shown shifted to the right.','line_number':246,'multiline':False]['text':' reset the saved position','line_number':257,'multiline':False]['text':' This is the 'print' function, used as p.rint()','line_number':262,'multiline':False]['text':' For the split view, we want to have the bytes related to','line_number':266,'multiline':False]['text':' stuff to be normally printed to appear indented by 40 spaces,','line_number':267,'multiline':False]['text':' with 10 more spaces to show a possibly abbreviated file position.','line_number':268,'multiline':False]['text':' If we are beginning a cell, we want that to appear left justified,','line_number':269,'multiline':False]['text':' within the 40 spaces of indentation.','line_number':270,'multiline':False]['text':' create the 10 character file position','line_number':272,'multiline':False]['text':' the current file position has actually advanced by','line_number':273,'multiline':False]['text':' some number of bytes, so subtract that now.','line_number':274,'multiline':False]['text':' 'b' as an argument below indicates a binary file or io.BytesIO type','line_number':298,'multiline':False]['text':' Print the bytes, which may be keys or values.','line_number':322,'multiline':False]['text':' Not bytes, it's already a string.','line_number':325,'multiline':False]['text':' If the high bit of the first byte is on, it's likely we have','line_number':328,'multiline':False]['text':' a packed integer.  If the high bit is off, it's possible we have','line_number':329,'multiline':False]['text':' a packed integer (it would be negative) but it's harder to guess,','line_number':330,'multiline':False]['text':' we'll presume a string.  But if the byte is 0x7f, that's ASCII DEL,','line_number':331,'multiline':False]['text':' very unlikely to be the beginning of a string, but it decodes as -1,','line_number':332,'multiline':False]['text':' so seems more likely to be an int.  If the UTF-8 decoding of the','line_number':333,'multiline':False]['text':' string fails, we probably just have binary data.','line_number':334,'multiline':False]['text':' Try decoding as one or more packed ints','line_number':336,'multiline':False]['text':' See if the rest of the bytes can be decoded as a string','line_number':347,'multiline':False]['text':' The earlier steps failed, so it must be binary data','line_number':355,'multiline':False]['text':' Return a length as used in a cell that isn't a "short" cell.  Lengths that are','line_number':358,'multiline':False]['text':' less or equal to 64 (WT_CELL_SIZE_ADJUST) are packed in a short cell, so if a','line_number':359,'multiline':False]['text':' non-short cell is used, the length numbering starts at 64.','line_number':360,'multiline':False]['text':' Show an integer as decimal and hex','line_number':367,'multiline':False]['text':' Convert binary data to a multi-line string with hex and printable characters','line_number':371,'multiline':False]['text':' block.h','line_number':409,'multiline':False]['text':'blockdesc = b.read(16)','line_number':410,'multiline':False]['text':' from cell.h','line_number':435,'multiline':False]['text':' from cell.h','line_number':464,'multiline':False]['text':' Switch the printer and the binary stream to work on the page data as opposed to working on','line_number':497,'multiline':False]['text':' the file itself. We need to do this to support compressed blocks. As a consequence, offsets','line_number':498,'multiline':False]['text':' printed in the split mode are relative to a (potentially uncompressed) page, rather than','line_number':499,'multiline':False]['text':' the file.','line_number':500,'multiline':False]['text':' WT_PAGE_HEADER in btmem.h (28 bytes)','line_number':506,'multiline':False]['text':' WT_BLOCK_HEADER in block.h (12 bytes)','line_number':533,'multiline':False]['text':' This is probably not a valid block','line_number':542,'multiline':False]['text':' The disk size is too small','line_number':546,'multiline':False]['text':' Verify the checksum','line_number':554,'multiline':False]['text':' Zero-out the checksum field','line_number':564,'multiline':False]['text':' Skip the rest if we don't want to display the data','line_number':574,'multiline':False]['text':' Read the block contents','line_number':579,'multiline':False]['text':' The first few bytes are uncompressed','line_number':588,'multiline':False]['text':' Read the length of the remaining data','line_number':590,'multiline':False]['text':' Read the compressed data, seek to the end of the block, and uncompress','line_number':592,'multiline':False]['text':' Add the payload to the page data & reinitialize the stream and the printer','line_number':605,'multiline':False]['text':' Parse the block contents','line_number':611,'multiline':False]['text':' a blank page: TODO maybe should check that it's all zeros?','line_number':613,'multiline':False]['text':' Use b_page.read() so that we can also print the raw bytes in the split mode','line_number':623,'multiline':False]['text':' cell.h','line_number':630,'multiline':False]['text':' Maximum of 71 bytes:','line_number':631,'multiline':False]['text':'  1: cell descriptor byte','line_number':632,'multiline':False]['text':'  1: prefix compression count','line_number':633,'multiline':False]['text':'  1: secondary descriptor byte','line_number':634,'multiline':False]['text':' 36: 4 timestamps (uint64_t encoding, max 9 bytes)','line_number':635,'multiline':False]['text':' 18: 2 transaction IDs (uint64_t encoding, max 9 bytes)','line_number':636,'multiline':False]['text':'  9: associated 64-bit value (uint64_t encoding, max 9 bytes)','line_number':637,'multiline':False]['text':'  5: data length (uint32_t encoding, max 5 bytes)','line_number':638,'multiline':False]['text':' Bit 4 marks a value with an additional descriptor byte. If this flag is set,','line_number':659,'multiline':False]['text':' the next byte after the initial cell byte is an additional description byte.','line_number':660,'multiline':False]['text':' The bottom bit in this additional byte indicates that the cell is part of a','line_number':661,'multiline':False]['text':' prepared, and not yet committed transaction. The next 6 bits describe a validity','line_number':662,'multiline':False]['text':' and durability window of timestamp/transaction IDs.  The top bit is currently unused.','line_number':663,'multiline':False]['text':' Bit 3 marks an 8B packed, uint64_t value following the cell description byte.','line_number':670,'multiline':False]['text':' (A run-length counter or a record number for variable-length column store.)','line_number':671,'multiline':False]['text':' Bits 5-8 are cell "types".','line_number':676,'multiline':False]['text':'print('DECODING: celltype = {} {}'.format(celltype_int, celltype))','line_number':679,'multiline':False]['text':' If there is an extra descriptor byte, the length is a regular encoded int.','line_number':683,'multiline':False]['text':' 64 is WT_CELL_SIZE_ADJUST.  If the size was less than that,','line_number':690,'multiline':False]['text':' we would have used the "short" packing.','line_number':691,'multiline':False]['text':'TODO: not right...','line_number':700,'multiline':False]['text':'TODO: support RLE','line_number':706,'multiline':False]['text':'TODO: decode the address cookie','line_number':707,'multiline':False]['text':'TODO: support SECOND DESC and RLE','line_number':712,'multiline':False]['text':'TODO: decode the address cookie','line_number':713,'multiline':False]['text':' short is 1 or 3','line_number':725,'multiline':False]['text':'b = bytearray.fromhex(line).decode()','line_number':782,'multiline':False]['text':' unknown length','line_number':797,'multiline':False]