['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Public Domain 2014-present MongoDB, Inc.','line_number':3,'multiline':False]['text':' Public Domain 2008-2014 WiredTiger, Inc.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This is free and unencumbered software released into the public domain.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Anyone is free to copy, modify, publish, use, compile, sell, or','line_number':8,'multiline':False]['text':' distribute this software, either in source code form or as a compiled','line_number':9,'multiline':False]['text':' binary, for any purpose, commercial or non-commercial, and by any','line_number':10,'multiline':False]['text':' means.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' In jurisdictions that recognize copyright laws, the author or authors','line_number':13,'multiline':False]['text':' of this software dedicate any and all copyright interest in the','line_number':14,'multiline':False]['text':' software to the public domain. We make this dedication for the benefit','line_number':15,'multiline':False]['text':' of the public at large and to the detriment of our heirs and','line_number':16,'multiline':False]['text':' successors. We intend this dedication to be an overt act of','line_number':17,'multiline':False]['text':' relinquishment in perpetuity of all present and future rights to this','line_number':18,'multiline':False]['text':' software under copyright law.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,','line_number':21,'multiline':False]['text':' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF','line_number':22,'multiline':False]['text':' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.','line_number':23,'multiline':False]['text':' IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR','line_number':24,'multiline':False]['text':' OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,','line_number':25,'multiline':False]['text':' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR','line_number':26,'multiline':False]['text':' OTHER DEALINGS IN THE SOFTWARE.','line_number':27,'multiline':False]['text':' A directory where we store cross-file plots for each bucket of the outlier','line_number':47,'multiline':False]['text':' histogram.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' A static list of available CSS colors','line_number':52,'multiline':False]['text':' Codes for various colors for printing of informational and error messages.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' A function name mapped to its corresponding color.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' The smallest and the largest timestamps seen across all files.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' A dictionary that holds function-specific threshold values telling','line_number':79,'multiline':False]['text':' us when the function is to be considered an outlier. These values','line_number':80,'multiline':False]['text':' would be read from a config file, if supplied by the user.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' A dictionary that holds a reference to the raw dataframe for each file.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' A dictionary that holds the intervals data per function.','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' Data frames and largest stack depth for each file.','line_number':94,'multiline':False]['text':' Each file has a timestamp indicating when the logging began','line_number':98,'multiline':False]['text':' How many work units for perform in parallel.','line_number':106,'multiline':False]['text':' The name of the time units that were used when recording timestamps.','line_number':109,'multiline':False]['text':' We assume that it's nanoseconds by default. Alternative units can be','line_number':110,'multiline':False]['text':' set in the configuration file.','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' The percentile threshold. A function duration above that percentile','line_number':115,'multiline':False]['text':' is deemed an outlier.','line_number':116,'multiline':False]['text':'','line_number':117,'multiline':False]['text':' two digit hex string','line_number':122,'multiline':False]['text':' Create a palette of 100 colors that are spaced around the RGB','line_number':127,'multiline':False]['text':' color wheel.  We advance R,G,B independently at different rates.','line_number':128,'multiline':False]['text':' If the color is too close to red or white/grey/black, or','line_number':134,'multiline':False]['text':' too light, we'll choose a different color.  We reserve red','line_number':135,'multiline':False]['text':' to highlight occurrences of functions that exceeded the','line_number':136,'multiline':False]['text':' user-defined latency threshold. And white/grey/black and','line_number':137,'multiline':False]['text':' light colors do not stand out enough.','line_number':138,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' Each unique function name gets a unique color.','line_number':146,'multiline':False]['text':' If we run out of colors, we repeat them from the','line_number':147,'multiline':False]['text':' beginning of the list.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':'','line_number':162,'multiline':False]['text':' An intervalEnd is a tuple of three items.','line_number':163,'multiline':False]['text':' item #0 is the timestamp,','line_number':164,'multiline':False]['text':' item #1 is the event type,','line_number':165,'multiline':False]['text':' item #2 is the function name.','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' Add an annotation to the chart','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' From all timestamps subtract the smallest observed timestamp, so that','line_number':282,'multiline':False]['text':' our execution timeline begins at zero.','line_number':283,'multiline':False]['text':' Cleanup the data to remove incomplete records and fix their effects.','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':'','line_number':305,'multiline':False]['text':' Go over all operation records in the dataframe and assign stack depths.','line_number':306,'multiline':False]['text':'','line_number':307,'multiline':False]['text':' Pop all items off stack whose end time is earlier than my','line_number':319,'multiline':False]['text':' end time. They are not the callers on my stack, so I don't want to','line_number':320,'multiline':False]['text':' count them.','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':' Let's open the log file.','line_number':347,'multiline':False]['text':' row[0] is the timestamp, row[1] is the event type,','line_number':354,'multiline':False]['text':' row[2] is the function name.','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':' For each function we only show the legend once. In this dictionary we','line_number':409,'multiline':False]['text':' keep track of colors already used.','line_number':410,'multiline':False]['text':'','line_number':411,'multiline':False]['text':' Get a sorted list of functions and their','line_number':429,'multiline':False]['text':' corresponding colors.','line_number':430,'multiline':False]['text':'','line_number':431,'multiline':False]['text':' Figure out the coordinates of functions on the plot','line_number':436,'multiline':False]['text':'','line_number':437,'multiline':False]['text':' No minor ticks or labels on the y-axis','line_number':536,'multiline':False]['text':' If this function is not present in this dataframe,','line_number':552,'multiline':False]['text':' we don't care about it.','line_number':553,'multiline':False]['text':'','line_number':554,'multiline':False]['text':' If we already added a color to any legend, we don't','line_number':560,'multiline':False]['text':' add it again to avoid redundancy in the charts and','line_number':561,'multiline':False]['text':' in order not to waste space.','line_number':562,'multiline':False]['text':'','line_number':563,'multiline':False]['text':' Plot height is the function of the maximum call stack and the number of','line_number':571,'multiline':False]['text':' legends','line_number':572,'multiline':False]['text':'','line_number':590,'multiline':False]['text':' Here we generate plots that span all the input files. Each plot shows','line_number':591,'multiline':False]['text':' the timelines for all files, stacked vertically. The timeline shows','line_number':592,'multiline':False]['text':' the function callstacks over time from this file.','line_number':593,'multiline':False]['text':'','line_number':594,'multiline':False]['text':' Since a single timeline is too large to fit on a single screen, we generate','line_number':595,'multiline':False]['text':' a separate HTML file with plots for bucket "i". A bucket is a vertical slice','line_number':596,'multiline':False]['text':' across the timelines for all files. We call it a bucket, because it','line_number':597,'multiline':False]['text':' corresponds to a bucket in the outlier histogram.','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':' Generate a navigator chart, which shows where we are in the','line_number':616,'multiline':False]['text':' trace and allows moving around the trace.','line_number':617,'multiline':False]['text':'','line_number':618,'multiline':False]['text':' Select from the dataframe for this file the records whose 'start'','line_number':622,'multiline':False]['text':' and 'end' timestamps fall within the lower and upper bound.','line_number':623,'multiline':False]['text':'','line_number':624,'multiline':False]['text':' Select operations whose start timestamp falls within','line_number':629,'multiline':False]['text':' the current interval, delimited by lowerBound and upperBound.','line_number':630,'multiline':False]['text':'','line_number':631,'multiline':False]['text':' Select operations whose end timestamp falls within','line_number':635,'multiline':False]['text':' the current interval, delimited by lowerBound and upperBound.','line_number':636,'multiline':False]['text':'','line_number':637,'multiline':False]['text':' Select operations that begin before this interval and end after','line_number':641,'multiline':False]['text':' this interval, but continue throughout this interval. The interval','line_number':642,'multiline':False]['text':' is delimited by lowerBound and upperBound.','line_number':643,'multiline':False]['text':'','line_number':644,'multiline':False]['text':' If the end of the function is outside the interval, let's pretend','line_number':654,'multiline':False]['text':' that it is within the interval, otherwise we won't see any data about','line_number':655,'multiline':False]['text':' it when we hover. This won't have the effect of showing wrong','line_number':656,'multiline':False]['text':' data to the user.','line_number':657,'multiline':False]['text':'','line_number':658,'multiline':False]['text':' Same adjustment as above if the start of the operation falls outside','line_number':662,'multiline':False]['text':' the interval's lower bound.','line_number':663,'multiline':False]['text':'','line_number':664,'multiline':False]['text':' Create the legend for this file and insert it after the navigator figure','line_number':677,'multiline':False]['text':' Generate a plot that shows a view of the entire timeline in a form of','line_number':688,'multiline':False]['text':' intervals. By clicking on an interval we can navigate to that interval.','line_number':689,'multiline':False]['text':'','line_number':690,'multiline':False]['text':' Generate the colors, such that the current interval is shown in a','line_number':697,'multiline':False]['text':' different color than the rest.','line_number':698,'multiline':False]['text':'','line_number':699,'multiline':False]['text':' No minor ticks or labels on the y-axis','line_number':723,'multiline':False]['text':' Create a dataframe describing all time intervals, which will later be used','line_number':751,'multiline':False]['text':' to generate a plot allowing us to navigate along the execution by clicking','line_number':752,'multiline':False]['text':' on different intervals.','line_number':753,'multiline':False]['text':'','line_number':754,'multiline':False]['text':' Use a copy since we will be deleting entries from the original','line_number':789,'multiline':False]['text':' If we have not found a terminated process, sleep for a while','line_number':795,'multiline':False]['text':' Update the UI message showing what percentage of work done by','line_number':799,'multiline':False]['text':' parallel processes has completed.','line_number':800,'multiline':False]['text':'','line_number':801,'multiline':False]['text':' Generate plots of time series slices across all files for each bucket','line_number':811,'multiline':False]['text':' in the outlier histogram. Save each cross-file slice to an HTML file.','line_number':812,'multiline':False]['text':'','line_number':813,'multiline':False]['text':' Find at least one terminated process','line_number':855,'multiline':False]['text':' Wait for all processes to terminate','line_number':860,'multiline':False]['text':'','line_number':872,'multiline':False]['text':' After we have cleaned up the data by getting rid of incomplete function','line_number':873,'multiline':False]['text':' call records (e.g., a function begin record is presend but a function end','line_number':874,'multiline':False]['text':' is not or vice versa), we optionally dump this clean data into a file, so','line_number':875,'multiline':False]['text':' it can be re-processed by other visualization tools. The output format is','line_number':876,'multiline':False]['text':'','line_number':877,'multiline':False]['text':' <0/1> <funcname> <timestamp>','line_number':878,'multiline':False]['text':'','line_number':879,'multiline':False]['text':' We use '0' if it's a function entry, '1' if it's a function exit.','line_number':880,'multiline':False]['text':'','line_number':881,'multiline':False]['text':' Append the function enter record:','line_number':893,'multiline':False]['text':' Append the function exit record:','line_number':898,'multiline':False]['text':'','line_number':968,'multiline':False]['text':' For each function, split the timeline into buckets. In each bucket','line_number':969,'multiline':False]['text':' show how many times this function took an unusually long time to','line_number':970,'multiline':False]['text':' execute.','line_number':971,'multiline':False]['text':'','line_number':972,'multiline':False]['text':'','line_number':988,'multiline':False]['text':' funcDF is a list of functions along with their start and end','line_number':989,'multiline':False]['text':' interval and durations. We need to create a new dataframe where','line_number':990,'multiline':False]['text':' we separate the entire timeline into a fixed number of periods','line_number':991,'multiline':False]['text':' and for each period compute how many outlier durations were','line_number':992,'multiline':False]['text':' observed. Then we create a histogram from this data.','line_number':993,'multiline':False]['text':' Subtract the smallest timestamp from all the interval data.','line_number':995,'multiline':False]['text':' There are two things that we want to capture on the','line_number':1004,'multiline':False]['text':' outlier charts: statistical outliers and functions exceeding the','line_number':1005,'multiline':False]['text':' user-defined latency threshold. An outlier is a function','line_number':1006,'multiline':False]['text':' whose duration is in the 99.9th percentile. For each','line_number':1007,'multiline':False]['text':' time period we will show a bar whose height corresponds','line_number':1008,'multiline':False]['text':' to the number of outliers observed during this exection','line_number':1009,'multiline':False]['text':' period.','line_number':1010,'multiline':False]['text':'','line_number':1011,'multiline':False]['text':' Not all outliers are indicative of performance problems.','line_number':1012,'multiline':False]['text':' To highlight real performance problems (as defined by the user)','line_number':1013,'multiline':False]['text':' we will highlight those bars that contain operations whose','line_number':1014,'multiline':False]['text':' duration exceeded the user-defined threshold.','line_number':1015,'multiline':False]['text':'','line_number':1016,'multiline':False]['text':' Find out how many statistical outliers we have in the','line_number':1046,'multiline':False]['text':' current period.','line_number':1047,'multiline':False]['text':' The number of statistical outliers is the height of the bar','line_number':1053,'multiline':False]['text':' Find out whether we have any functions whose duration exceeded','line_number':1058,'multiline':False]['text':' the user-defined threshold.','line_number':1059,'multiline':False]['text':' If there is at least one element in this dataframe, then the','line_number':1066,'multiline':False]['text':' operations that exceeded the user defined latency threshold are','line_number':1067,'multiline':False]['text':' present in this period. Highlight this bucket with a bright color.','line_number':1068,'multiline':False]['text':'','line_number':1100,'multiline':False]['text':' Return the string naming the time units used to measure time stamps,','line_number':1101,'multiline':False]['text':' depending on how many time units there are in a second.','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':'','line_number':1115,'multiline':False]['text':' The configuration file tells us which functions should be considered','line_number':1116,'multiline':False]['text':' outliers. All comment lines must begin with '#'.','line_number':1117,'multiline':False]['text':'','line_number':1118,'multiline':False]['text':' The first non-comment line of the file must tell us how to interpret','line_number':1119,'multiline':False]['text':' the measurement units in the trace file. It must have a single number','line_number':1120,'multiline':False]['text':' telling us how many time units are contained in a second. This should','line_number':1121,'multiline':False]['text':' be the same time units used in the trace file. For example, if the trace','line_number':1122,'multiline':False]['text':' file contains timestamps measured in milliseconds, the number would be 1000,','line_number':1123,'multiline':False]['text':' it the timestamp is in nanoseconds, the number would be 1000000000.','line_number':1124,'multiline':False]['text':' If timestamps were measured in clock cycles, the number','line_number':1125,'multiline':False]['text':' must tell us how many times the CPU clock ticks per second on the processor','line_number':1126,'multiline':False]['text':' where the trace was gathered.','line_number':1127,'multiline':False]['text':'','line_number':1128,'multiline':False]['text':' The remaining lines must have the format:','line_number':1129,'multiline':False]['text':'       <func_name> <outlier_threshold> [units]','line_number':1130,'multiline':False]['text':'','line_number':1131,'multiline':False]['text':' For example, if you would like to flag as outliers all instances of','line_number':1132,'multiline':False]['text':' __cursor_row_search that took longer than 200ms, you would specify this as:','line_number':1133,'multiline':False]['text':'','line_number':1134,'multiline':False]['text':'        __cursor_row_search 200 ms','line_number':1135,'multiline':False]['text':'','line_number':1136,'multiline':False]['text':' You can use * as the wildcard for all function. No other wildcard options are','line_number':1137,'multiline':False]['text':' supported at the moment.','line_number':1138,'multiline':False]['text':'','line_number':1139,'multiline':False]['text':' Acceptable units are:','line_number':1140,'multiline':False]['text':'','line_number':1141,'multiline':False]['text':' s -- for seconds','line_number':1142,'multiline':False]['text':' ms -- for milliseconds','line_number':1143,'multiline':False]['text':' us -- for microseconds','line_number':1144,'multiline':False]['text':' ns -- for nanoseconds','line_number':1145,'multiline':False]['text':' stdev -- for standard deviations.','line_number':1146,'multiline':False]['text':'','line_number':1147,'multiline':False]['text':' If no units are supplied, the same unit as the one used for the timestamp','line_number':1148,'multiline':False]['text':' in the trace files is assumed.','line_number':1149,'multiline':False]['text':'','line_number':1150,'multiline':False]['text':' If there is a valid configuration file, but the function does not appear in','line_number':1151,'multiline':False]['text':' it, we will not generate an outlier histogram for this function. Use the','line_number':1152,'multiline':False]['text':' wildcard symbol to include all functions.','line_number':1153,'multiline':False]['text':'','line_number':1154,'multiline':False]['text':' Now convert the number to the baseline units and record in the','line_number':1213,'multiline':False]['text':' dictionary.','line_number':1214,'multiline':False]['text':'','line_number':1215,'multiline':False]['text':' We record it as negative, so that we know','line_number':1226,'multiline':False]['text':' this is a standard deviation. We will compute','line_number':1227,'multiline':False]['text':' the actual value once we know the average.','line_number':1228,'multiline':False]['text':' We were given an empty config file','line_number':1239,'multiline':False]['text':' With Python3 this script fails if the number of open files','line_number':1245,'multiline':False]['text':' is limited to 256, because the multiprocessing package does','line_number':1246,'multiline':False]['text':' not appear to properly clean up processes that exited.','line_number':1247,'multiline':False]['text':'','line_number':1248,'multiline':False]['text':' Set up the argument parser','line_number':1273,'multiline':False]['text':'','line_number':1274,'multiline':False]['text':' Determine the target job parallelism','line_number':1297,'multiline':False]['text':' Get names of standard CSS colors that we will use for the legend','line_number':1303,'multiline':False]['text':' Read the configuration file, if supplied.','line_number':1306,'multiline':False]['text':' Create a directory for the files that display the data summarized','line_number':1320,'multiline':False]['text':' in each bucket of the outlier histogram. We call these "bucket files".','line_number':1321,'multiline':False]['text':'','line_number':1322,'multiline':False]['text':' Parallelize this later, so we are working on files in parallel.','line_number':1326,'multiline':False]['text':' Normalize all intervals by subtracting the first timestamp.','line_number':1330,'multiline':False]['text':' Generate plots of time series slices across all files for each bucket','line_number':1333,'multiline':False]['text':' in the outlier histogram. Save each cross-file slice to an HTML file.','line_number':1334,'multiline':False]['text':'','line_number':1335,'multiline':False]['text':' Generate a histogram of outlier durations','line_number':1340,'multiline':False]