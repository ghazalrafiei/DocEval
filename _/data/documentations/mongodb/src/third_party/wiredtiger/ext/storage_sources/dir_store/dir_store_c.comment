['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * This storage source implementation is used for demonstration and testing. All objects are stored
 * as local files in a designated directory.
 ','line_number':48,'multiline':True]['text':'
 * !!!
 * GCC with -Wformat-truncation complains about calls to snprintf in this file.
 * There's nothing wrong, this makes the warning go away.
 ','line_number':55,'multiline':True]['text':' Directory storage source structure. ','line_number':64,'multiline':True]['text':' Must come first ','line_number':66,'multiline':True]['text':' Extension API ','line_number':68,'multiline':True]['text':' We use random for artificial delays ','line_number':70,'multiline':True]['text':'
     * Locks are used to protect the file handle queue and flush queue.
     ','line_number':73,'multiline':True]['text':'
     * Keep the number of references to this storage source.
     ','line_number':78,'multiline':True]['text':'
     * Configuration values are set at startup.
     ','line_number':83,'multiline':True]['text':' This flag determines whether or not we cache the file locally. ','line_number':86,'multiline':True]['text':' Average length of delay when simulated ','line_number':87,'multiline':True]['text':' Average length of sleep when simulated ','line_number':88,'multiline':True]['text':' Force a simulated network delay every N operations ','line_number':89,'multiline':True]['text':' Force a simulated network error every N operations ','line_number':90,'multiline':True]['text':' Verbose level ','line_number':91,'multiline':True]['text':'
     * Statistics are collected but not yet exposed.
     ','line_number':93,'multiline':True]['text':' Non-read/write operations in file handles ','line_number':96,'multiline':True]['text':' (What would be) writes to the cloud ','line_number':97,'multiline':True]['text':' (What would be) reads to the cloud ','line_number':98,'multiline':True]['text':' Number of operations done on dir_store ','line_number':99,'multiline':True]['text':' Queue of file handles ','line_number':103,'multiline':True]['text':' Must come first - this is the interface for the file system we are implementing. ','line_number':109,'multiline':True]['text':' This is WiredTiger's file system, it is used in implementing the dir_store file system. ','line_number':113,'multiline':True]['text':' Identifier for key management system ','line_number':116,'multiline':True]['text':' Directory that stands in for cloud storage bucket ','line_number':117,'multiline':True]['text':' Directory for cached objects ','line_number':118,'multiline':True]['text':' Owned by the connection ','line_number':119,'multiline':True]['text':' Must come first ','line_number':123,'multiline':True]['text':' Enclosing storage source ','line_number':125,'multiline':True]['text':' File handle ','line_number':126,'multiline':True]['text':' Queue of handles ','line_number':128,'multiline':True]['text':'
 * Forward function declarations for internal functions
 ','line_number':131,'multiline':True]['text':'
 * Forward function declarations for storage source API implementation
 ','line_number':148,'multiline':True]['text':'
 * Forward function declarations for file system API implementation
 ','line_number':160,'multiline':True]['text':'
 * Forward function declarations for file handle API implementation
 ','line_number':180,'multiline':True]['text':'
 * dir_store_configure
 *     Parse the configuration for the keys we care about.
 ','line_number':199,'multiline':True]['text':'
 * dir_store_configure_int
 *     Look for a particular configuration key, and return its integer value.
 ','line_number':226,'multiline':True]['text':'
 * sleep_us --
 *     Sleep for the specified microseconds.
 ','line_number':253,'multiline':True]['text':' Cast needed for some compilers that suspect the calculation can overflow (it can't). ','line_number':262,'multiline':True]['text':'
 * dir_store_compute_delay_us --
 *     Compute a random delay around a given average. Use a uniform random distribution from 0.5 of
 *     the given delay to 1.5 of the given delay.
 ','line_number':268,'multiline':True]['text':'
     * Note: this is WiredTiger's RNG algorithm. Since this module is packaged independent of
     * WiredTiger's internals, it's not feasible to call directly into its implementation.
     ','line_number':280,'multiline':True]['text':'
 * dir_store_delay --
 *     Add any artificial delay or simulated network error during an object transfer.
 ','line_number':297,'multiline':True]['text':'
 * dir_store_err --
 *     Print errors from the interface. Returns "ret", the third argument.
 ','line_number':331,'multiline':True]['text':'
 * dir_store_get_directory --
 *     Return a copy of a directory name after verifying that it is a directory.
 ','line_number':353,'multiline':True]['text':' For relative pathnames, the path is considered to be relative to the home directory. ','line_number':370,'multiline':True]['text':' Room for null ','line_number':372,'multiline':True]['text':' Room for slash, null ','line_number':374,'multiline':True]['text':'
 * dir_store_bucket_path --
 *     Construct the bucket pathname from the file system and dir_store name.
 ','line_number':401,'multiline':True]['text':'
 * dir_store_cache_path --
 *     Construct the cache pathname from the file system and dir_store name.
 ','line_number':412,'multiline':True]['text':'
 * dir_store_home_path --
 *     Construct the source pathname from the file system and dir_store name.
 ','line_number':423,'multiline':True]['text':'
 * dir_store_path --
 *     Construct a pathname from the file system and dir_store name.
 ','line_number':434,'multiline':True]['text':' Skip over "./" and variations (".//", ".///./././//") at the beginning of the name. ','line_number':447,'multiline':True]['text':'
 * dir_store_stat --
 *     Perform the stat system call for a name in the file system.
 ','line_number':466,'multiline':True]['text':'
     * We check to see if the file exists in the cache first, and if not the bucket directory. This
     * maps what a real cloud implementation would do. This will allow us to instrument this code to
     * try out and measure caching implementations.
     ','line_number':479,'multiline':True]['text':' It's not in the cache, try the bucket directory. ','line_number':489,'multiline':True]['text':'
         * If the file must exist, report the error no matter what.
         ','line_number':497,'multiline':True]['text':'
 * dir_store_add_reference --
 *     Add a reference to the storage source so we can reference count to know when to really
 *     terminate.
 ','line_number':510,'multiline':True]['text':'
     * Missing reference or overflow?
     ','line_number':522,'multiline':True]['text':'
 * dir_store_customize_file_system --
 *     Return a customized file system to access the dir_store storage source objects.
 ','line_number':531,'multiline':True]['text':' Parse configuration string. ','line_number':553,'multiline':True]['text':'
     * The home directory owned by the connection will not change, and will be valid memory, for as
     * long as the connection is open. That is longer than this file system will be open, so we can
     * use the string without copying.
     ','line_number':582,'multiline':True]['text':'
     * Get the bucket directory and the cache directory.
     ','line_number':589,'multiline':True]['text':'
     * The default cache directory is named "cache-<name>", where name is the last component of the
     * bucket name's path. We'll create it if it doesn't exist.
     ','line_number':598,'multiline':True]['text':'
 * dir_store_exist --
 *     Return if the file exists.
 ','line_number':643,'multiline':True]['text':'
 * dir_store_file_copy --
 *     Copy a file.
 ','line_number':666,'multiline':True]['text':'
         * It is normal and possible that the source file was dropped. Don't print out an error
         * message in that case, but still return the ENOENT error value.
         ','line_number':701,'multiline':True]['text':'
     * We want to be sure that we cannot overwrite an object that was previously written. POSIX does
     * not have an rename operation that is exclusive (although Linux has one that works only on
     * certain file systems). In any case, we are covered, because 1) all users of dir_store use the
     * function we're in to create an object 2) we used an exclusive open for the temporary file
     * above and 3) we make a check for the existence of the target file at this point. That should
     * eliminate any races. Once the existence check is passed, we know no other thread can sneak
     * in, they'd need to successfully open that temporary file, and we are holding exclusive access
     * to it.
     ','line_number':733,'multiline':True]['text':'
 * dir_store_flush --
 *     Return when the file has been flushed.
 ','line_number':772,'multiline':True]['text':' unused ','line_number':784,'multiline':True]['text':'
 * dir_store_flush_finish --
 *     Cache a file in the new file system.
 ','line_number':813,'multiline':True]['text':' unused ','line_number':825,'multiline':True]['text':'
     * Link the object with the original dir_store object. The could be replaced by a file copy if
     * portability is an issue.
     ','line_number':844,'multiline':True]['text':' Set the file to readonly in the cache. ','line_number':853,'multiline':True]['text':'
 * dir_store_directory_list --
 *     Return a list of object names for the given location.
 ','line_number':863,'multiline':True]['text':'
 * dir_store_directory_list_single --
 *     Return a single file name for the given location.
 ','line_number':876,'multiline':True]['text':'
 * dir_store_location_list_free --
 *     Free memory allocated by dir_store_location_list.
 ','line_number':889,'multiline':True]['text':'
 * dir_store_directory_list_add --
 *     Add an entry to the directory list, growing as needed.
 ','line_number':908,'multiline':True]['text':'
 * dir_store_location_list_internal --
 *     Return a list of object names for the given location.
 ','line_number':934,'multiline':True]['text':'
     * The items in the bucket directory represent the definitive list.
     ','line_number':963,'multiline':True]['text':' Skip . and .. ','line_number':975,'multiline':True]['text':' Match only the indicated directory files. ','line_number':980,'multiline':True]['text':' The list of files is optionally filtered by a prefix. ','line_number':985,'multiline':True]['text':'
 * dir_store_fs_terminate --
 *     Discard any resources on termination of the file system
 ','line_number':1016,'multiline':True]['text':' unused ','line_number':1025,'multiline':True]['text':'
 * dir_store_open --
 *     fopen for our dir_store storage source
 ','line_number':1037,'multiline':True]['text':'
     * We expect that the dir_store file system will be used narrowly, like when creating or opening
     * a data file or turtle file. It would be unexpected to try to open a non-data file (like a log
     * file) in that narrow part of code, so we make it an error here.
     *
     * Relaxing this constraint to allow opening of, say, log files, would be straightforward - we
     * would not translate the path or do any tracking for flushing. But there's a catch. Other
     * parts of the API, like remove and rename, have no flag indicating that they are operating on
     * a log file, so we wouldn't know whether to do path translation. Of course, we could peek at
     * the name, but that would be bad form.
     ','line_number':1066,'multiline':True]['text':' Create a new handle. ','line_number':1081,'multiline':True]['text':'
             * The file doesn't exist locally, make a copy of it from the cloud.
             ','line_number':1097,'multiline':True]['text':'
             * If the file actually exists now, it could be a racing thread that created it.
             ','line_number':1106,'multiline':True]['text':' Initialize public information. ','line_number':1137,'multiline':True]['text':'
     * Setup the function call table for our custom storage source. Set the function pointer to NULL
     * where our implementation doesn't support the functionality.
     ','line_number':1140,'multiline':True]['text':'
 * dir_store_rename --
 *     POSIX rename, not supported for cloud objects.
 ','line_number':1190,'multiline':True]['text':' unused ','line_number':1198,'multiline':True]['text':' unused ','line_number':1199,'multiline':True]['text':'
 * dir_store_remove --
 *     Calls the corresponding remove method of the file system behind our dir_store storage source.
 ','line_number':1205,'multiline':True]['text':' Check to see if the file exists in the cache directory before attempting to remove it. ','line_number':1221,'multiline':True]['text':' Check to see if the file exists in the bucket directory before attempting to remove it. ','line_number':1228,'multiline':True]['text':'
 * dir_store_remove_if_exists --
 *     Checks to see if the specified file exists in the directory before attempting to remove it.
 ','line_number':1241,'multiline':True]['text':'
 * dir_store_size --
 *     Get the size of a file in bytes, by file name.
 ','line_number':1277,'multiline':True]['text':'
 * dir_store_terminate --
 *     Discard any resources on termination
 ','line_number':1300,'multiline':True]['text':'
     * We should be single threaded at this point, so it is safe to destroy the lock and access the
     * file handle list without locking it.
     ','line_number':1319,'multiline':True]['text':'
 * dir_store_file_close --
 *     ANSI C close.
 ','line_number':1333,'multiline':True]['text':' There really isn't anything more we can do. It will get cleaned up on terminate. ','line_number':1350,'multiline':True]['text':'
 * dir_store_file_close_internal --
 *     Internal file handle close.
 ','line_number':1366,'multiline':True]['text':'
 * dir_store_file_lock --
 *     Lock/unlock a file.
 ','line_number':1388,'multiline':True]['text':' Locks are always granted. ','line_number':1395,'multiline':True]['text':' Unused ','line_number':1397,'multiline':True]['text':' Unused ','line_number':1398,'multiline':True]['text':'
 * dir_store_file_read --
 *     POSIX pread.
 ','line_number':1404,'multiline':True]['text':'
 * dir_store_file_size --
 *     Get the size of a file in bytes, by file handle.
 ','line_number':1422,'multiline':True]['text':'
 * dir_store_file_sync --
 *     Ensure the content of the dir_store file is stable.
 ','line_number':1439,'multiline':True]['text':' This is a no-op.  We could also disallow it. ','line_number':1446,'multiline':True]['text':'
 * dir_store_file_write --
 *     POSIX pwrite.
 ','line_number':1452,'multiline':True]['text':'
 * wiredtiger_extension_init --
 *     A simple shared library encryption example.
 ','line_number':1471,'multiline':True]['text':'
     * Allocate a dir_store storage structure, with a WT_STORAGE structure as the first field,
     * allowing us to treat references to either type of structure as a reference to the other type.
     ','line_number':1490,'multiline':True]['text':'
     * The first reference is implied by the call to add_storage_source.
     ','line_number':1500,'multiline':True]['text':' Cache files locally by default ','line_number':1505,'multiline':True]['text':' Load the storage ','line_number':1513,'multiline':True]