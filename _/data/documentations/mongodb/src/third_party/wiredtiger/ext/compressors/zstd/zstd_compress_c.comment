['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * We need to include the configuration file to detect whether this extension is being built into
 * the WiredTiger library; application-loaded compression functions won't need it.
 ','line_number':34,'multiline':True]['text':' Default context pool size. ','line_number':47,'multiline':True]['text':' Either a compression context or a decompression context. ','line_number':53,'multiline':True]['text':' Pool size ','line_number':60,'multiline':True]['text':' Spinlock ','line_number':61,'multiline':True]['text':' Local compressor structure. ','line_number':67,'multiline':True]['text':' Must come first ','line_number':69,'multiline':True]['text':' Extension API ','line_number':71,'multiline':True]['text':' compression level ','line_number':73,'multiline':True]['text':' Compression context pool. ','line_number':75,'multiline':True]['text':' Decompression context pool. ','line_number':76,'multiline':True]['text':'
 * Zstd decompression requires an exact compressed byte count. WiredTiger doesn't track that value,
 * store it in the destination buffer.
 ','line_number':79,'multiline':True]['text':'
 * zstd_bswap64 --
 *     64-bit unsigned little-endian to/from big-endian value.
 ','line_number':86,'multiline':True]['text':'
 * zstd_error --
 *     Output an error message, and return a standard error code.
 ','line_number':100,'multiline':True]['text':'
 * zstd_get_context --
 *     WiredTiger Zstd get a context from context pool.
 ','line_number':115,'multiline':True]['text':' Based on the type, decide the context pool from which the context to be allocated. ','line_number':128,'multiline':True]['text':'
 * zstd_release_context --
 *     WiredTiger Zstd release a context back to context pool.
 ','line_number':152,'multiline':True]['text':' Based on the type, decide the context pool to which the context to be released back. ','line_number':168,'multiline':True]['text':'
 *  zstd_compress --
 *	WiredTiger Zstd compression.
 ','line_number':182,'multiline':True]['text':' Compress, starting past the prefix bytes. ','line_number':199,'multiline':True]['text':'
     * If compression succeeded and the compressed length is smaller than the original size, return
     * success.
     ','line_number':209,'multiline':True]['text':'
         * On decompression, Zstd requires an exact compressed byte count (the current value of
         * zstd_ret). WiredTiger does not preserve that value, so save zstd_ret at the beginning of
         * the destination buffer.
         *
         * Store the value in little-endian format.
         ','line_number':217,'multiline':True]['text':'
 * zstd_decompress --
 *     WiredTiger Zstd decompression.
 ','line_number':237,'multiline':True]['text':'
     * Retrieve the saved length, handling little- to big-endian conversion as necessary.
     ','line_number':254,'multiline':True]['text':'
     * This type of context management is useful to avoid repeated context allocation overhead. This
     * is typically for block compression, for streaming compression, context could be reused over
     * and over again for performance gains.
     ','line_number':267,'multiline':True]['text':'
 * zstd_pre_size --
 *     WiredTiger Zstd destination buffer sizing for compression.
 ','line_number':288,'multiline':True]['text':' Unused parameters ','line_number':296,'multiline':True]['text':'
     * Zstd compression runs faster if the destination buffer is sized at the upper-bound of the
     * buffer size needed by the compression. Use the library calculation of that overhead (plus our
     * overhead).
     ','line_number':300,'multiline':True]['text':'
 *  zstd_init_context_pool --
 *	Initialize a given type of context pool.
 ','line_number':309,'multiline':True]['text':' Allocate and initialize both the context pools. ','line_number':324,'multiline':True]['text':'
 *  zstd_terminate_context_pool --
 *	Terminate the given context pool.
 ','line_number':364,'multiline':True]['text':'
 * zstd_terminate --
 *     WiredTiger Zstd compression termination.
 ','line_number':398,'multiline':True]['text':' Unused parameters. ','line_number':409,'multiline':True]['text':'
 * zstd_init_config --
 *     Handle zstd configuration.
 ','line_number':417,'multiline':True]['text':' If configured as a built-in, there's no configuration argument. ','line_number':428,'multiline':True]['text':'
     * Zstd compression engine allows applications to specify a compression level; review the
     * configuration.
     ','line_number':431,'multiline':True]['text':'
 * zstd_extension_init --
 *     WiredTiger Zstd compression extension - called directly when Zstd support is built in, or via
 *     wiredtiger_extension_init when Zstd support is included via extension loading.
 ','line_number':449,'multiline':True]['text':'
     * Zstd's sweet-spot is better compression than zlib at significantly
     * faster compression/decompression speeds. LZ4 and snappy are faster
     * than zstd, but have worse compression ratios. Applications wanting
     * faster compression/decompression with worse compression will select
     * LZ4 or snappy, so we configure zstd for better compression.
     *
     * From the zstd github site, default measurements of the compression
     * engines we support, listing compression ratios with compression and
     * decompression speeds:
     *
     *	Name	Ratio	C.speed	D.speed
     *			MB/s	MB/s
     *	zstd	2.877	330	940
     *	zlib	2.730	95	360
     *	LZ4	2.101	620	3100
     *	snappy	2.091	480	1600
     *
     * Set the zstd compression level to 3: according to the zstd web site,
     * that reduces zstd's compression speed to around 200 MB/s, increasing
     * the compression ratio to 3.100 (close to zlib's best compression
     * ratio). In other words, position zstd as a zlib replacement, having
     * similar compression at much higher compression/decompression speeds.
     ','line_number':460,'multiline':True]['text':' Load the compressor ','line_number':505,'multiline':True]['text':'
 * We have to remove this symbol when building as a builtin extension otherwise it will conflict
 * with other builtin libraries.
 ','line_number':514,'multiline':True]['text':'
 * wiredtiger_extension_init --
 *     WiredTiger Zstd compression extension.
 ','line_number':519,'multiline':True]