['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
 * Encryption extension using libsodium for cryptography.
 *
 * Note: we recommend that all applications relying on encryption for security audit their
 * application and storage toolchain code, including this implementation and the underlying
 * cryptographic libraries.
 *
 * The only threat model this extension is intended to protect against is: your database was on your
 * laptop, and your laptop was stolen while the database was at rest (shut down).
 *
 * Because the key is necessarily kept in memory while the database is running, it is important to
 * make sure it does not get written to disk by OS mechanisms; for example, core dumps and kernel
 * crash dumps should be disabled, and swapping should be either disabled or set up to be encrypted.
 * Also note that a still-running database on a laptop that is suspended is not at rest.
 *
 * This code does not, for the moment, support any form of external key server or key management
 * service. Keys must be configured with "secretkey=" at database open time, and not with "keyid=".
 * This is workable, but less than optimal. To add support for your favorite key service, copy this
 * file, edit where indicated below, and install as your own custom extension. (See the other
 * encryption examples for further information about how to do this.)
 *
 * The secretkey= configured at database open time is expected to be a 256-bit chacha20 key, printed
 * as hex (with no leading 0x), thus 64 characters long. If you want to use a passphrase instead,
 * use the recommended tools in libsodium to generate a key from a passphrase and pass the results
 * as the secretkey= configuration.
 ','line_number':29,'multiline':True]['text':'
 * Lengths of the pieces involved: the secret key, the non-secret but unique nonce, and the
 * cryptographic checksum added as part of the encryption.
 ','line_number':63,'multiline':True]['text':'
 * We write a header on each block that records the expected format version and the cryptographic
 * construction used. This is incorporated into the block's cryptographic checksum and thus
 * protected from interference. The header is 4 bytes long to keep the following data aligned, but
 * we only use two of them. Currently we only support the one construction, but that could
 * conceivably change and in any event it's a good idea to make persistent formats extensible.
 ','line_number':71,'multiline':True]['text':' Constants for the on-disk (output) format. ','line_number':84,'multiline':True]['text':'
 * Each output block contains, in order:
 *    - the header
 *    - the nonce
 *    - the cryptographic output (ciphertext and checksum)
 * The header and nonce are not secret but are covered by the checksum.
 ','line_number':88,'multiline':True]['text':'
 * Data for this extension. Note that the secret key has to be kept in memory for use.
 ','line_number':99,'multiline':True]['text':' Must come first ','line_number':103,'multiline':True]['text':' Extension API ','line_number':104,'multiline':True]['text':' Secret key. (bytes) ','line_number':106,'multiline':True]['text':'
 * sodium_error --
 *     Display an error from this module in a standard way.
 ','line_number':109,'multiline':True]['text':'
 * create_nonce --
 *     Generate a random nonce.
 ','line_number':124,'multiline':True]['text':'
     * It would be tidier to use incrementing nonces, but currently doing so would require sharing
     * the current nonce between all threads and then doing global locking to use it, which is
     * probably not going to work out that well. There isn't a convenient way to store per-thread
     * extension state.
     ','line_number':131,'multiline':True]['text':'
 * sodium_encrypt --
 *     Encrypt using libsodium.
 *
 * Note that the encryption does not require that the input be padded to any particular alignment.
 ','line_number':140,'multiline':True]['text':' Unused ','line_number':154,'multiline':True]['text':' Make sure it is big enough. ','line_number':156,'multiline':True]['text':' Write the header. ','line_number':160,'multiline':True]['text':' Make a nonce. ','line_number':166,'multiline':True]['text':' Encrypt and checksum into the ciphertext part of the output. ','line_number':169,'multiline':True]['text':'
 * sodium_decrypt --
 *     Decrypt using libsodium.
 ','line_number':180,'multiline':True]['text':' Make sure it is big enough. ','line_number':193,'multiline':True]['text':' This is the length of just the ciphertext/checksum part. ','line_number':197,'multiline':True]['text':' Decrypt and verify the checksum. ','line_number':200,'multiline':True]['text':'
 * sodium_sizing --
 *     Report how much extra space we need in the output buffer.
 ','line_number':211,'multiline':True]['text':'
     * Note that the interface assumes the expansion is always a constant; for the construction
     * we're using that's true, but for one based on a block cipher it might need to be rounded up
     * to allow for the ciphertext part of the output always being an integer multiple of the cipher
     * block size.
     ','line_number':218,'multiline':True]['text':' Unused parameters ','line_number':224,'multiline':True]['text':' Unused parameters ','line_number':225,'multiline':True]['text':' Expand by the header, the nonce, and the checksum. ','line_number':227,'multiline':True]['text':'
 * sodium_customize --
 *     The customize function creates a customized encryptor.
 ','line_number':232,'multiline':True]['text':'
     * This is how keys are set: the extension is first loaded, and then for every distinct key used
     * a copy is made by calling the customize method. The original uncustomized WT_ENCRYPTOR is
     * never used to encrypt or decrypt anything.
     ','line_number':240,'multiline':True]['text':' Allocate and initialize the new encryptor. ','line_number':255,'multiline':True]['text':' Get the keyid, if any. ','line_number':261,'multiline':True]['text':' Get the explicit secret key, if any. ','line_number':266,'multiline':True]['text':' Providing both a keyid and a secretkey is an error. ','line_number':271,'multiline':True]['text':' Providing neither is also an error. ','line_number':278,'multiline':True]['text':' Use sodium_malloc, which takes assorted precautions for working with secrets. ','line_number':285,'multiline':True]['text':'
     * We don't support any key lookup services. Yet. To add support for your own, change the code
     * here to fetch the key associated with the configured keyid string, and put it in ->secretkey.
     * If the keyid is invalid, print an error and goto err. Note that there's no need to remember
     * the keyid once the key is installed.
     ','line_number':292,'multiline':True]['text':'
     * Load the key specified with secretkey=. This should be passed as a 64-character hex string
     * (with no leading 0x). It is not a passphrase; passphrases should be converted to keys using
     * appropriate tools (e.g. those provided by libsodium).
     ','line_number':303,'multiline':True]['text':' Explicit keys are passed as hex strings of the proper length. ','line_number':309,'multiline':True]['text':'
 * sodium_terminate --
 *     Shut down the extension and avoid leaking memory.
 ','line_number':331,'multiline':True]['text':' Unused parameters ','line_number':340,'multiline':True]['text':' Close the internal reference in libsodium to /dev/random so it doesn't leak. ','line_number':342,'multiline':True]['text':' Free the allocated memory. ','line_number':345,'multiline':True]['text':'
 * sodium_configure --
 *     Configure the extension.
 *
 * This is for static config, not where keys are loaded, so nothing happens.
 ','line_number':351,'multiline':True]['text':' Extension API ','line_number':360,'multiline':True]['text':'
 * wiredtiger_extension_init --
 *     Called to load and initialize the extension.
 ','line_number':370,'multiline':True]['text':'
     * Allocate a local encryptor structure, with a WT_ENCRYPTOR structure as the first field,
     * allowing us to treat references to either type of structure as a reference to the other type.
     *
     * Heap memory (not static), because it can support multiple databases.
     ','line_number':383,'multiline':True]['text':' Initialize the crypto library. ','line_number':396,'multiline':True]['text':' Configure the extension. ','line_number':400,'multiline':True]['text':' Attach the extension. ','line_number':406,'multiline':True]