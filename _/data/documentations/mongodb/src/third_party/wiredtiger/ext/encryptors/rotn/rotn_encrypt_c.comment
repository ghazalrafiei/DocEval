['text':'-
 * Public Domain 2014-present MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'! [WT_ENCRYPTOR initialization structure] ','line_number':36,'multiline':True]['text':'
 * This encryptor is used for testing and demonstration only.
 *
 * IT IS TRIVIAL TO BREAK AND DOES NOT OFFER ANY SECURITY!
 *
 * There are two configuration parameters that control it: the keyid and the
 * secretkey (which may be thought of as a password).  The keyid is expected
 * to be a digits giving a number between 0 and 25.  The secretkey, when
 * present, must be composed of alphabetic characters.
 *
 * When there is no secretkey, the encryptor acts as a ROT(N) encryptor (a
 * "Caesar cipher"), where N is the value of keyid.  Thus, with keyid=13,
 * text "Hello" maps to "Uryyb", as we preserve case.  Only the alphabetic
 * characters in the input text are changed.
 *
 * When there is a secretkey we are implementing a Vigenere cipher.
 * Each byte is rotated the distance from 'A' for each letter in the
 * (repeating) secretkey.  The distance is increased by the value of
 * the keyid.  Thus, with secretkey "ABC" and keyid "2", we show how
 * we map the input "MySecret".
 *    secretkey          = ABC
 *    distances from 'A' = 012
 *    add keyid (2)      = 234
 *    repeated           = 23423423
 *    input              = MySecret
 *    output             = ObWgfvgw
 * In this case, we transform all bytes in the input.
 ','line_number':38,'multiline':True]['text':' Local encryptor structure. ','line_number':67,'multiline':True]['text':' Must come first ','line_number':69,'multiline':True]['text':' Extension API ','line_number':71,'multiline':True]['text':' rotN value ','line_number':73,'multiline':True]['text':' Saved keyid ','line_number':74,'multiline':True]['text':' Saved secretkey ','line_number':75,'multiline':True]['text':' Encrypt shift data from secretkey ','line_number':76,'multiline':True]['text':' Decrypt shift data from secretkey ','line_number':77,'multiline':True]['text':' Length of shift* byte arrays ','line_number':78,'multiline':True]['text':' Force a decrypt error for testing ','line_number':79,'multiline':True]['text':'! [WT_ENCRYPTOR initialization structure] ','line_number':82,'multiline':True]['text':'
 * rotn_error --
 *     Display an error from this module in a standard way.
 ','line_number':87,'multiline':True]['text':'
 * make_checksum --
 *     This is where one would call a checksum function on the encrypted buffer. Here we just put a
 *     constant value in it.
 ','line_number':102,'multiline':True]['text':'
     * Assume array is big enough for the checksum.
     ','line_number':111,'multiline':True]['text':'
 * make_iv --
 *     This is where one would generate the initialization vector. Here we just put a constant value
 *     in it.
 ','line_number':118,'multiline':True]['text':'
     * Assume array is big enough for the initialization vector.
     ','line_number':127,'multiline':True]['text':'
 * Rotate encryption functions.
 ','line_number':134,'multiline':True]['text':'
 * do_rotate --
 *     Perform rot-N on the buffer given.
 ','line_number':137,'multiline':True]['text':'
     * Now rotate.
     *
     * Avoid ctype functions because they behave in unexpected ways, particularly when the locale is
     * not "C".
     ','line_number':145,'multiline':True]['text':'
 * do_shift --
 *     Perform a Vigenere cipher
 ','line_number':159,'multiline':True]['text':'
     * Now shift.
     ','line_number':167,'multiline':True]['text':'! [WT_ENCRYPTOR encrypt] ','line_number':174,'multiline':True]['text':'
 * rotn_encrypt --
 *     A simple encryption example that passes data through unchanged.
 ','line_number':175,'multiline':True]['text':' Unused ','line_number':186,'multiline':True]['text':'
     * !!! Most implementations would verify any needed
     * checksum and initialize the IV here.
     ','line_number':191,'multiline':True]['text':'
     * Depending on whether we have a secret key or not, call the common rotate or shift function on
     * the text portion of the destination buffer. Send in src_len as the length of the text.
     ','line_number':197,'multiline':True]['text':'
     * Checksum the encrypted buffer and add the IV.
     ','line_number':205,'multiline':True]['text':'! [WT_ENCRYPTOR encrypt] ','line_number':215,'multiline':True]['text':'! [WT_ENCRYPTOR decrypt] ','line_number':217,'multiline':True]['text':'
 * rotn_decrypt --
 *     A simple decryption example that passes data through unchanged.
 ','line_number':218,'multiline':True]['text':' Unused ','line_number':230,'multiline':True]['text':'
     * For certain tests, force an error we can recognize.
     ','line_number':232,'multiline':True]['text':'
     * Make sure it is big enough.
     ','line_number':238,'multiline':True]['text':'
     * !!! Most implementations would verify the checksum here.
     ','line_number':245,'multiline':True]['text':'
     * Copy the encrypted data to the destination buffer and then decrypt the destination buffer.
     ','line_number':248,'multiline':True]['text':'
     * Depending on whether we have a secret key or not, call the common rotate or shift function on
     * the text portion of the destination buffer. Send in dst_len as the length of the text.
     ','line_number':253,'multiline':True]['text':'
     * !!! Most implementations would need the IV too.
     ','line_number':257,'multiline':True]['text':'! [WT_ENCRYPTOR decrypt] ','line_number':267,'multiline':True]['text':'! [WT_ENCRYPTOR postsize] ','line_number':269,'multiline':True]['text':'
 * rotn_sizing --
 *     A sizing example that returns the header size needed.
 ','line_number':270,'multiline':True]['text':' Unused parameters ','line_number':277,'multiline':True]['text':' Unused parameters ','line_number':278,'multiline':True]['text':'! [WT_ENCRYPTOR postsize] ','line_number':283,'multiline':True]['text':'! [WT_ENCRYPTOR customize] ','line_number':285,'multiline':True]['text':'
 * rotn_customize --
 *     The customize function creates a customized encryptor
 ','line_number':286,'multiline':True]['text':'
     * Stash the keyid from the configuration string.
     ','line_number':313,'multiline':True]['text':'
         * In this demonstration, we expect keyid to be a number.
         ','line_number':318,'multiline':True]['text':'
     * In this demonstration, the secret key must be alphabetic characters. We stash the secret key
     * from the configuration string and build some shift bytes to make encryption/decryption easy.
     *
     * We allow specifying both a keyid and an explicit secret key (which overrides the keyid) for
     * testing purposes. Under ordinary circumstances being asked to use two keys at once would be
     * an error.
     ','line_number':333,'multiline':True]['text':'
     * In a real encryptor, we could use some sophisticated key management here to map the keyid
     * onto a secret key.
     ','line_number':368,'multiline':True]['text':'! [WT_ENCRYPTOR presize] ','line_number':385,'multiline':True]['text':'! [WT_ENCRYPTOR terminate] ','line_number':387,'multiline':True]['text':'
 * rotn_terminate --
 *     WiredTiger no-op encryption termination.
 ','line_number':388,'multiline':True]['text':' Unused parameters ','line_number':397,'multiline':True]['text':' Free the allocated memory. ','line_number':399,'multiline':True]['text':'! [WT_ENCRYPTOR terminate] ','line_number':407,'multiline':True]['text':'
 * rotn_configure --
 *     WiredTiger no-op encryption configuration.
 ','line_number':409,'multiline':True]['text':' Extension API ','line_number':417,'multiline':True]['text':' Get the configuration string. ','line_number':422,'multiline':True]['text':'! [WT_ENCRYPTOR initialization function] ','line_number':431,'multiline':True]['text':'
 * wiredtiger_extension_init --
 *     A simple shared library encryption example.
 ','line_number':432,'multiline':True]['text':'
     * Allocate a local encryptor structure, with a WT_ENCRYPTOR structure as the first field,
     * allowing us to treat references to either type of structure as a reference to the other type.
     *
     * Heap memory (not static), because it can support multiple databases.
     ','line_number':445,'multiline':True]['text':' Load the encryptor ','line_number':462,'multiline':True]['text':'! [WT_ENCRYPTOR initialization function] ','line_number':470,'multiline':True]