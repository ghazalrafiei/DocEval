['text':'  
**********************************************************************
*   Copyright (C) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   file name:  ucnv_u8.c
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002jul01
*   created by: Markus W. Scherer
*
*   UTF-8 converter implementation. Used to be in ucnv_utf.c.
*
*   Also, CESU-8 implementation, see UTR 26.
*   The CESU-8 converter uses all the same functions as the
*   UTF-8 converter, with a branch for converting supplementary code points.
','line_number':1,'multiline':True]['text':' Prototypes --------------------------------------------------------------- ','line_number':33,'multiline':True]['text':' Keep these here to make finicky compilers happy ','line_number':35,'multiline':True]['text':' UTF-8 -------------------------------------------------------------------- ','line_number':43,'multiline':True]['text':' UTF-8 Conversion DATA
 *   for more information see Unicode Standard 2.0, Transformation Formats Appendix A-9
 ','line_number':45,'multiline':True]['text':'static const uint32_t REPLACEMENT_CHARACTER = 0x0000FFFD;','line_number':48,'multiline':True]['text':' -SURROGATE_LOW_START + HALF_BASE ','line_number':60,'multiline':True]['text':' END OF UTF-8 Conversion DATA ','line_number':68,'multiline':True]['text':'
 * Starting with Unicode 3.0.1:
 * UTF-8 byte sequences of length N _must_ encode code points of or above utf8_minChar32[N];
 * byte sequences with more than 4 bytes are illegal in UTF-8,
 * which is tested with impossible values for them
 ','line_number':81,'multiline':True]['text':' Restore size of current sequence ','line_number':112,'multiline':True]['text':' restore # of bytes to consume ','line_number':115,'multiline':True]['text':' restore # of bytes consumed ','line_number':116,'multiline':True]['text':'Stores the previously calculated ch from a previous call','line_number':119,'multiline':True]['text':' Simple case ','line_number':128,'multiline':True]['text':' store the first char ','line_number':134,'multiline':True]['text':' lookup current sequence length ','line_number':136,'multiline':True]['text':' i < inBytes ','line_number':147,'multiline':True]['text':' stores a partially calculated target','line_number':155,'multiline':True]['text':' Remove the accumulated high bits ','line_number':163,'multiline':True]['text':'
             * Legal UTF-8 byte sequences in Unicode 3.0.1 and up:
             * - use only trail bytes after a lead byte (checked above)
             * - use the right number of trail bytes for a given lead byte
             * - encode a code point <= U+10ffff
             * - use the fewest possible number of bytes for their code points
             * - use at most 4 bytes (for i>=5 it is 0x10ffff<utf8_minChar32[])
             *
             * Starting with Unicode 3.2, surrogate code points must not be encoded in UTF-8.
             * There are no irregular sequences any more.
             * In CESU-8, only surrogates, not supplementary code points, are encoded directly.
             ','line_number':166,'multiline':True]['text':' Normal valid byte when the loop has not prematurely terminated (i < inBytes) ','line_number':181,'multiline':True]['text':' fits in 16 bits ','line_number':184,'multiline':True]['text':' write out the surrogates ','line_number':189,'multiline':True]['text':' Put in overflow buffer (not handled here) ','line_number':199,'multiline':True]['text':' End of target buffer ','line_number':219,'multiline':True]['text':' Restore size of current sequence ','line_number':242,'multiline':True]['text':' restore # of bytes to consume ','line_number':245,'multiline':True]['text':' restore # of bytes consumed ','line_number':246,'multiline':True]['text':'Stores the previously calculated ch from a previous call','line_number':249,'multiline':True]['text':' Simple case ','line_number':257,'multiline':True]['text':' i < inBytes ','line_number':276,'multiline':True]['text':' Remove the accumulated high bits ','line_number':291,'multiline':True]['text':'
             * Legal UTF-8 byte sequences in Unicode 3.0.1 and up:
             * - use only trail bytes after a lead byte (checked above)
             * - use the right number of trail bytes for a given lead byte
             * - encode a code point <= U+10ffff
             * - use the fewest possible number of bytes for their code points
             * - use at most 4 bytes (for i>=5 it is 0x10ffff<utf8_minChar32[])
             *
             * Starting with Unicode 3.2, surrogate code points must not be encoded in UTF-8.
             * There are no irregular sequences any more.
             * In CESU-8, only surrogates, not supplementary code points, are encoded directly.
             ','line_number':294,'multiline':True]['text':' Normal valid byte when the loop has not prematurely terminated (i < inBytes) ','line_number':309,'multiline':True]['text':' fits in 16 bits ','line_number':312,'multiline':True]['text':' write out the surrogates ','line_number':318,'multiline':True]['text':' End of target buffer ','line_number':348,'multiline':True]['text':' Single byte ','line_number':382,'multiline':True]['text':' Double byte ','line_number':386,'multiline':True]['text':' Check for surrogates ','line_number':401,'multiline':True]['text':' test both code units ','line_number':405,'multiline':True]['text':' convert and consume this supplementary code point ','line_number':407,'multiline':True]['text':' exit this condition tree ','line_number':410,'multiline':True]['text':' this is an unpaired trail or lead code unit ','line_number':413,'multiline':True]['text':' callback(illegal) ','line_number':414,'multiline':True]['text':' no more input ','line_number':421,'multiline':True]['text':' Do we write the buffer directly for speed,
            or do we have to be careful about target buffer space? ','line_number':427,'multiline':True]['text':' There was enough space to write the codepoint directly. ','line_number':444,'multiline':True]['text':' We might run out of room soon. Write it slowly. ','line_number':448,'multiline':True]['text':' Single byte ','line_number':502,'multiline':True]['text':' Double byte ','line_number':507,'multiline':True]['text':' Check for surrogates ','line_number':524,'multiline':True]['text':' test both code units ','line_number':531,'multiline':True]['text':' convert and consume this supplementary code point ','line_number':533,'multiline':True]['text':' exit this condition tree ','line_number':537,'multiline':True]['text':' this is an unpaired trail or lead code unit ','line_number':540,'multiline':True]['text':' callback(illegal) ','line_number':541,'multiline':True]['text':' no more input ','line_number':548,'multiline':True]['text':' Do we write the buffer directly for speed,
            or do we have to be careful about target buffer space? ','line_number':554,'multiline':True]['text':' There was enough space to write the codepoint directly. ','line_number':571,'multiline':True]['text':' We might run out of room soon. Write it slowly. ','line_number':582,'multiline':True]['text':' UTF-8 only here, the framework handles CESU-8 to combine surrogate pairs ','line_number':620,'multiline':True]['text':' no input ','line_number':626,'multiline':True]['text':'The byte sequence is longer than the buffer area passed','line_number':647,'multiline':True]['text':' check if all of the remaining bytes are trail bytes ','line_number':650,'multiline':True]['text':' error even before we run out of input ','line_number':659,'multiline':True]['text':' note: code falls through cases! (sic)','line_number':673,'multiline':True]['text':'
     * Legal UTF-8 byte sequences in Unicode 3.0.1 and up:
     * - use only trail bytes after a lead byte (checked above)
     * - use the right number of trail bytes for a given lead byte
     * - encode a code point <= U+10ffff
     * - use the fewest possible number of bytes for their code points
     * - use at most 4 bytes (for i>=5 it is 0x10ffff<utf8_minChar32[])
     *
     * Starting with Unicode 3.2, surrogate code points must not be encoded in UTF-8.
     * There are no irregular sequences any more.
     ','line_number':726,'multiline':True]['text':' return the code point ','line_number':742,'multiline':True]['text':' UTF-8-from-UTF-8 conversion functions ------------------------------------ ','line_number':753,'multiline':True]['text':' minimum code point values for n-byte UTF-8 sequences, n=0..4 ','line_number':755,'multiline':True]['text':' offsets for n-byte UTF-8 sequences that were calculated with ((lead<<6)+trail)<<6+trail... ','line_number':759,'multiline':True]['text':' "Convert" UTF-8 to UTF-8: Validate and copy. Modified from ucnv_DBCSFromUTF8(). ','line_number':763,'multiline':True]['text':' set up the local pointers ','line_number':779,'multiline':True]['text':' get the converter state from the UTF-8 UConverter ','line_number':786,'multiline':True]['text':'
         * Not enough input to complete the partial character.
         * Jump to moreBytes below - it will not output to target.
         ','line_number':797,'multiline':True]['text':'
         * Not enough target capacity to output the partial character.
         * Let the standard converter handle this.
         ','line_number':802,'multiline':True]['text':'
         * Use a single counter for source and target, counting the minimum of
         * the source length and the target capacity.
         * As a result, the source length is checked only once per multi-byte
         * character instead of twice.
         *
         * Make sure that the last byte sequence is complete, or else
         * stop just before it.
         * (The longest legal byte sequence has 3 trail bytes.)
         * Count oldToULength (number of source bytes from a previous buffer)
         * into the source length but reduce the source index by toULimit
         * while going back over trail bytes in order to not go back into
         * the bytes that will be read for finishing a partial
         * sequence from the previous buffer.
         * Let the standard converter handle edge cases.
         ','line_number':809,'multiline':True]['text':' stop converting before the lead byte if there are not enough trail bytes for it ','line_number':838,'multiline':True]['text':' See note in ucnv_SBCSFromUTF8() about this goto. ','line_number':850,'multiline':True]['text':' conversion loop ','line_number':853,'multiline':True]['text':' convert ASCII ','line_number':857,'multiline':True]['text':' handle U+1000..U+D7FF inline ','line_number':863,'multiline':True]['text':' handle U+0080..U+07FF inline ','line_number':876,'multiline':True]['text':' handle U+0800..U+0FFF inline ','line_number':887,'multiline':True]['text':' handle "complicated" and error cases, and continuing partial characters ','line_number':900,'multiline':True]['text':' sequence too short, stop with toULength<toULimit ','line_number':914,'multiline':True]['text':' store the partial UTF-8 character, compatible with the regular UTF-8 converter ','line_number':917,'multiline':True]['text':' consumed all trail bytes ','line_number':931,'multiline':True]['text':' BMP ','line_number':932,'multiline':True]['text':' not a surrogate ','line_number':934,'multiline':True]['text':' legal byte sequence for BMP code point ','line_number':936,'multiline':True]['text':' legal byte sequence for supplementary code point ','line_number':941,'multiline':True]['text':' error handling: illegal UTF-8 byte sequence ','line_number':943,'multiline':True]['text':' copy the legal byte sequence to the target ','line_number':955,'multiline':True]['text':' collect a truncated byte sequence ','line_number':978,'multiline':True]['text':' partial byte sequence at end of source ','line_number':984,'multiline':True]['text':' lead byte in trail byte position ','line_number':990,'multiline':True]['text':' partial-sequence target overflow: fall back to the pivoting implementation ','line_number':998,'multiline':True]['text':' write back the updated pointers ','line_number':1004,'multiline':True]['text':' UTF-8 converter data ----------------------------------------------------- ','line_number':1009,'multiline':True]['text':' The 1208 CCSID refers to any version of Unicode of UTF-8 ','line_number':1037,'multiline':True]['text':' max 3 bytes per UChar from UTF-8 (4 bytes from surrogate _pair_) ','line_number':1042,'multiline':True]['text':' reserved ','line_number':1046,'multiline':True]['text':' CESU-8 converter data ---------------------------------------------------- ','line_number':1053,'multiline':True]['text':' CCSID for CESU-8 ','line_number':1081,'multiline':True]['text':' reserved ','line_number':1086,'multiline':True]