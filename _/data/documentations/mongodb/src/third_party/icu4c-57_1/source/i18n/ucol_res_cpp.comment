['text':'
*******************************************************************************
*   Copyright (C) 1996-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  ucol_res.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
* Description:
* This file contains dependencies that the collation run-time doesn't normally
* need. This mainly contains resource bundle usage and collation meta information
*
* Modification history
* Date        Name      Comments
* 1996-1999   various members of ICU team maintained C API for collation framework
* 02/16/2001  synwee    Added internal method getPrevSpecialCE
* 03/01/2001  synwee    Added maxexpansion functionality.
* 03/16/2001  weiv      Collation framework is rewritten in C and made UCA compliant
* 12/08/2004  grhoten   Split part of ucol.cpp into ucol_res.cpp
* 2012-2014   markus    Rewritten in C++ again.
','line_number':1,'multiline':True]['text':' namespace','line_number':63,'multiline':False]['text':' Copy the type for lowercasing.','line_number':107,'multiline':False]['text':' No string pointer aliasing so that we need not hold onto the resource bundle.','line_number':126,'multiline':False]['text':' Have to add a ref.','line_number':150,'multiline':False]['text':' Clear warning codes before loading where they get cached.','line_number':155,'multiline':False]['text':' getCacheEntry adds a ref for us.','line_number':159,'multiline':False]['text':' Canonicalize the locale ID: Ignore all irrelevant keywords.','line_number':173,'multiline':False]['text':' Fetch the collation type from the locale ID.','line_number':178,'multiline':False]['text':' in case of U_NOT_TERMINATED_WARNING','line_number':185,'multiline':False]['text':' No collation type.','line_number':187,'multiline':False]['text':' Ignore "default" (case-insensitive).','line_number':189,'multiline':False]['text':' Copy the collation type.','line_number':192,'multiline':False]['text':' This is a linear lookup and fallback flow turned into a state machine.','line_number':207,'multiline':False]['text':' Most local variables have been turned into instance fields.','line_number':208,'multiline':False]['text':' In a cache miss, cache.get() calls CacheKey::createObject(),','line_number':209,'multiline':False]['text':' which means that we progress via recursion.','line_number':210,'multiline':False]['text':' loadFromCollations() will recurse to itself as well for collation type fallback.','line_number':211,'multiline':False]['text':' Have to add that ref that we promise.','line_number':231,'multiline':False]['text':' no type until loadFromCollations()','line_number':238,'multiline':False]['text':' There are zero or more tailorings in the collations table.','line_number':253,'multiline':False]['text':' Return the root tailoring with the validLocale, without collation type.','line_number':257,'multiline':False]['text':' Fetch the default type from the data.','line_number':262,'multiline':False]['text':' Record which collation types we have looked for already,','line_number':276,'multiline':False]['text':' so that we do not deadlock in the cache.','line_number':277,'multiline':False]['text':'','line_number':278,'multiline':False]['text':' If there is no explicit type, then we look in the cache','line_number':279,'multiline':False]['text':' for the entry with the default type.','line_number':280,'multiline':False]['text':' If the explicit type is the default type, then we do not look in the cache','line_number':281,'multiline':False]['text':' for the entry with an empty type.','line_number':282,'multiline':False]['text':' Otherwise, two concurrent requests with opposite fallbacks would deadlock each other.','line_number':283,'multiline':False]['text':' Also, it is easier to always enter the next method with a non-empty type.','line_number':284,'multiline':False]['text':' Load the collations/type tailoring, with type fallback.','line_number':314,'multiline':False]['text':' fall back from something like "searchjl" to "search"','line_number':323,'multiline':False]['text':' fall back to the default type','line_number':327,'multiline':False]['text':' fall back to the "standard" type','line_number':331,'multiline':False]['text':' Return the root tailoring with the validLocale, without collation type.','line_number':335,'multiline':False]['text':' Set the collation types on the informational locales,','line_number':349,'multiline':False]['text':' except when they match the default types (for brevity and backwards compatibility).','line_number':350,'multiline':False]['text':' For the valid locale, suppress the default type.','line_number':351,'multiline':False]['text':' Is this the same as the root collator? If so, then use that instead.','line_number':357,'multiline':False]['text':' deserialize','line_number':385,'multiline':False]['text':' Note: U_MISSING_RESOURCE_ERROR --> The old code built from rules if available','line_number':387,'multiline':False]['text':' but that created undesirable dependencies.','line_number':388,'multiline':False]['text':' Note: U_COLLATOR_VERSION_MISMATCH --> The old code built from rules if available','line_number':392,'multiline':False]['text':' but that created undesirable dependencies.','line_number':393,'multiline':False]['text':' Try to fetch the optional rules string.','line_number':396,'multiline':False]['text':' without type','line_number':407,'multiline':False]['text':' For the actual locale, suppress the default type *according to the actual locale*.','line_number':411,'multiline':False]['text':' For example, zh has default=pinyin and contains all of the Chinese tailorings.','line_number':412,'multiline':False]['text':' zh_Hant has default=stroke but has no other data.','line_number':413,'multiline':False]['text':' For the valid locale "zh_Hant" we need to suppress stroke.','line_number':414,'multiline':False]['text':' For the actual locale "zh" we need to suppress pinyin instead.','line_number':415,'multiline':False]['text':' Opening a bundle for the actual locale should always succeed.','line_number':417,'multiline':False]['text':' Remove the collation keyword if it was set.','line_number':437,'multiline':False]['text':' Have to add that reference that we promise.','line_number':453,'multiline':False]['text':'loc','line_number':468,'multiline':True]['text':' NULL destination for pure preflighting: empty dummy string','line_number':531,'multiline':False]['text':' otherwise, alias the destination buffer','line_number':532,'multiline':False]['text':' This is a wrapper over Collator::getAvailableLocales()','line_number':563,'multiline':False]['text':' Note: KEYWORDS[0] != RESOURCE_NAME - alan','line_number':576,'multiline':False]['text':' hard-coded to accept exactly one collation keyword','line_number':598,'multiline':False]['text':' modify if additional collation keyword is added later','line_number':599,'multiline':False]['text':'key','line_number':621,'multiline':True]['text':'commonlyUsed','line_number':622,'multiline':True]['text':' Get the locale base name. ','line_number':623,'multiline':True]['text':' Create the 2 lists
     * -values is the temp location for the keyword values
     * -results hold the actual list used by the UEnumeration object
     ','line_number':627,'multiline':True]['text':' Open the resource bundle for collation with the given locale. ','line_number':648,'multiline':True]['text':' If the key is default, get the string and store it in results list only
             * if results list is empty.
             ','line_number':663,'multiline':True]['text':' optimize - use the utf-8 string ','line_number':673,'multiline':True]['text':' If the locale is "" this is root so exit. ','line_number':695,'multiline':True]['text':' Get the parent locale and open a new resource bundle. ','line_number':699,'multiline':True]['text':' N.B.: Resource name is "collations" but keyword is "collation"','line_number':739,'multiline':False]['text':' #if !UCONFIG_NO_COLLATION ','line_number':745,'multiline':True]