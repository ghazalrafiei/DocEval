['text':'
**********************************************************************
*   Copyright (c) 2001-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   11/19/2001  aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]['text':' Define UChar constants using hex for EBCDIC compatibility','line_number':16,'multiline':False]['text':'\','line_number':18,'multiline':True]['text':'U','line_number':19,'multiline':True]['text':'u','line_number':20,'multiline':True]['text':' '\''','line_number':21,'multiline':False]['text':' ' '','line_number':22,'multiline':False]['text':' "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"','line_number':24,'multiline':False]['text':' Bogus radix','line_number':37,'multiline':False]['text':'?','line_number':38,'multiline':True]['text':' Handle negatives','line_number':40,'multiline':False]['text':'-','line_number':43,'multiline':True]['text':' First determine the number of digits','line_number':45,'multiline':False]['text':' Now generate the digits','line_number':53,'multiline':False]['text':'*
 * Return true if the character is NOT printable ASCII.
 ','line_number':66,'multiline':True]['text':'*
 * Escape unprintable characters using \uxxxx notation for U+0000 to
 * U+FFFF and \Uxxxxxxxx for U+10000 and above.  If the character is
 * printable ASCII, then do nothing and return FALSE.  Otherwise,
 * append the escaped notation and return TRUE.
 ','line_number':73,'multiline':True]['text':'*
 * Returns the index of a character, ignoring quoted text.
 * For example, in the string "abc'hide'h", the 'h' in "hide" will not be
 * found by a search for 'h'.
 ','line_number':100,'multiline':True]['text':' FOR FUTURE USE.  DISABLE FOR NOW for coverage reasons.','line_number':105,'multiline':False]['text':'
int32_t ICU_Utility::quotedIndexOf(const UnicodeString& text,
                               int32_t start, int32_t limit,
                               UChar charToFind) {
    for (int32_t i=start; i<limit; ++i) {
        UChar c = text.charAt(i);
        if (c == BACKSLASH) {
            ++i;
        } else if (c == APOSTROPHE) {
            while (++i < limit
                   && text.charAt(i) != APOSTROPHE) {}
        } else if (c == charToFind) {
            return i;
        }
    }
    return -1;
}
','line_number':106,'multiline':True]['text':'*
 * Skip over a sequence of zero or more white space characters at pos.
 * @param advance if true, advance pos to the first non-white-space
 * character at or after pos, or str.length(), if there is none.
 * Otherwise leave pos unchanged.
 * @return the index of the first non-white-space character at or
 * after pos, or str.length(), if there is none.
 ','line_number':125,'multiline':True]['text':'*
 * Skip over Pattern_White_Space in a Replaceable.
 * Skipping may be done in the forward or
 * reverse direction.  In either case, the leftmost index will be
 * inclusive, and the rightmost index will be exclusive.  That is,
 * given a range defined as [start, limit), the call
 * skipWhitespace(text, start, limit) will advance start past leading
 * whitespace, whereas the call skipWhitespace(text, limit, start),
 * will back up limit past trailing whitespace.
 * @param text the text to be analyzed
 * @param pos either the start or limit of a range of 'text', to skip
 * leading or trailing whitespace, respectively
 * @param stop either the limit or start of a range of 'text', to skip
 * leading or trailing whitespace, respectively
 * @return the new start or limit, depending on what was passed in to
 * 'pos'
 ','line_number':144,'multiline':True]['text':'?FOR FUTURE USE.  DISABLE FOR NOW for coverage reasons.','line_number':161,'multiline':False]['text':'?int32_t ICU_Utility::skipWhitespace(const Replaceable& text,','line_number':162,'multiline':False]['text':'?                                    int32_t pos, int32_t stop) {','line_number':163,'multiline':False]['text':'?    UChar32 c;','line_number':164,'multiline':False]['text':'?    UBool isForward = (stop >= pos);','line_number':165,'multiline':False]['text':'?','line_number':166,'multiline':False]['text':'?    if (!isForward) {','line_number':167,'multiline':False]['text':'?        --pos; // pos is a limit, so back up by one','line_number':168,'multiline':False]['text':'?    }','line_number':169,'multiline':False]['text':'?    ','line_number':170,'multiline':False]['text':'?    while (pos != stop &&','line_number':171,'multiline':False]['text':'?           PatternProps::isWhiteSpace(c = text.char32At(pos))) {','line_number':172,'multiline':False]['text':'?        if (isForward) {','line_number':173,'multiline':False]['text':'?            pos += U16_LENGTH(c);','line_number':174,'multiline':False]['text':'?        } else {','line_number':175,'multiline':False]['text':'?            pos -= U16_LENGTH(c);','line_number':176,'multiline':False]['text':'?        }','line_number':177,'multiline':False]['text':'?    }','line_number':178,'multiline':False]['text':'?','line_number':179,'multiline':False]['text':'?    if (!isForward) {','line_number':180,'multiline':False]['text':'?        ++pos; // make pos back into a limit','line_number':181,'multiline':False]['text':'?    }','line_number':182,'multiline':False]['text':'?','line_number':183,'multiline':False]['text':'?    return pos;','line_number':184,'multiline':False]['text':'?}','line_number':185,'multiline':False]['text':'*
 * Parse a single non-whitespace character 'ch', optionally
 * preceded by whitespace.
 * @param id the string to be parsed
 * @param pos INPUT-OUTPUT parameter.  On input, pos[0] is the
 * offset of the first character to be parsed.  On output, pos[0]
 * is the index after the last parsed character.  If the parse
 * fails, pos[0] will be unchanged.
 * @param ch the non-whitespace character to be parsed.
 * @return true if 'ch' is seen preceded by zero or more
 * whitespace characters.
 ','line_number':187,'multiline':True]['text':'*
 * Parse a pattern string within the given Replaceable and a parsing
 * pattern.  Characters are matched literally and case-sensitively
 * except for the following special characters:
 *
 * ~  zero or more Pattern_White_Space chars
 *
 * If end of pattern is reached with all matches along the way,
 * pos is advanced to the first unparsed index and returned.
 * Otherwise -1 is returned.
 * @param pat pattern that controls parsing
 * @param text text to be parsed, starting at index
 * @param index offset to first character to parse
 * @param limit offset after last character to parse
 * @return index after last parsed character, or -1 on parse failure.
 ','line_number':211,'multiline':True]['text':' empty pattern matches immediately','line_number':233,'multiline':False]['text':' parse \s*','line_number':243,'multiline':False]['text':'~','line_number':244,'multiline':True]['text':' success; c unparsed','line_number':250,'multiline':False]['text':' fall thru; process c again with next cpat','line_number':252,'multiline':False]['text':' parse literal','line_number':256,'multiline':False]['text':' success; c parsed','line_number':261,'multiline':False]['text':' fall thru; get next cpat','line_number':263,'multiline':False]['text':' match failure of literal','line_number':266,'multiline':False]['text':' text ended before end of pat','line_number':274,'multiline':False]['text':'*
 * Append a character to a rule that is being built up.  To flush
 * the quoteBuf to rule, make one final call with isLiteral == TRUE.
 * If there is no final character, pass in (UChar32)-1 as c.
 * @param rule the string to append the character to
 * @param c the character to append, or (UChar32)-1 if none.
 * @param isLiteral if true, then the given character should not be
 * quoted or escaped.  Usually this means it is a syntactic element
 * such as > or $
 * @param escapeUnprintable if true, then unprintable characters
 * should be escaped using \uxxxx or \Uxxxxxxxx.  These escapes will
 * appear outside of quotes.
 * @param quoteBuf a buffer which is used to build up quoted
 * substrings.  The caller should initially supply an empty buffer,
 * and thereafter should not modify the buffer.  The buffer should be
 * cleared out by, at the end, calling this method with a literal
 * character.
 ','line_number':277,'multiline':True]['text':' If we are escaping unprintables, then escape them outside','line_number':300,'multiline':False]['text':' quotes.  \u and \U are not recognized within quotes.  The same','line_number':301,'multiline':False]['text':' logic applies to literals, but literals are never escaped.','line_number':302,'multiline':False]['text':' We prefer backslash APOSTROPHE to double APOSTROPHE','line_number':306,'multiline':False]['text':' (more readable, less similar to ") so if there are','line_number':307,'multiline':False]['text':' double APOSTROPHEs at the ends, we pull them outside','line_number':308,'multiline':False]['text':' of the quote.','line_number':309,'multiline':False]['text':' If the first thing in the quoteBuf is APOSTROPHE','line_number':311,'multiline':False]['text':' (doubled) then pull it out.','line_number':312,'multiline':False]['text':' If the last thing in the quoteBuf is APOSTROPHE','line_number':319,'multiline':False]['text':' (doubled) then remove and count it and add it after.','line_number':320,'multiline':False]['text':' Since spaces are ignored during parsing, they are
             * emitted only for readability.  We emit one here
             * only if there isn't already one at the end of the
             * rule.
             ','line_number':339,'multiline':True]['text':' Escape ' and '\' and don't begin a quote just for them','line_number':355,'multiline':False]['text':' Specials (printable ascii that isn't [0-9a-zA-Z]) and','line_number':362,'multiline':False]['text':' whitespace need quoting.  Also append stuff to quotes if we are','line_number':363,'multiline':False]['text':' building up a quoted substring already.','line_number':364,'multiline':False]['text':''0'','line_number':367,'multiline':True]['text':''9'','line_number':367,'multiline':True]['text':''A'','line_number':368,'multiline':True]['text':''Z'','line_number':368,'multiline':True]['text':''a'','line_number':369,'multiline':True]['text':''z'','line_number':369,'multiline':True]['text':' Double ' within a quote','line_number':372,'multiline':False]['text':' Otherwise just append','line_number':378,'multiline':False]['text':'*
 * Given a matcher reference, which may be null, append its
 * pattern as a literal to the given rule.
 ','line_number':394,'multiline':True]