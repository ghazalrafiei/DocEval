['text':'
**********************************************************************
* Copyright (c) 2004-2016, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
* Author: Alan Liu
* Created: April 20, 2004
* Since: ICU 3.0
**********************************************************************
','line_number':1,'multiline':True]['text':' for 'typeid' to work','line_number':11,'multiline':False]['text':' Used to format durations like 5:47 or 21:35:42.','line_number':49,'multiline':False]['text':' Formats like H:mm','line_number':52,'multiline':False]['text':' formats like M:ss','line_number':55,'multiline':False]['text':' formats like H:mm:ss','line_number':58,'multiline':False]['text':' Constructor that takes the actual patterns for hour-minute,','line_number':61,'multiline':False]['text':' minute-second, and hour-minute-second respectively.','line_number':62,'multiline':False]['text':'*
 * Instances contain all MeasureFormat specific data for a particular locale.
 * This data is cached. It is never copied, but is shared via shared pointers.
 *
 * Note: We might change the cache data to have an array[WIDTH_INDEX_COUNT] of
 * complete sets of unit & per patterns,
 * to correspond to the resource data and its aliases.
 *
 * TODO: Maybe store more sparsely in general, with pointers rather than potentially-empty objects.
 ','line_number':88,'multiline':True]['text':'*
     * Redirection data from root-bundle, top-level sideways aliases.
     * - UMEASFMT_WIDTH_COUNT: initial value, just fall back to root
     * - UMEASFMT_WIDTH_WIDE/SHORT/NARROW: sideways alias for missing data
     ','line_number':103,'multiline':True]['text':'* Measure unit -> format width -> array of patterns ("{0} meters") (plurals + PER_UNIT_INDEX) ','line_number':109,'multiline':True]['text':' TODO: Create a more obvious way to test if the per-formatter has been set?','line_number':117,'multiline':False]['text':' Use pointers, check for NULL? Or add an isValid() method?','line_number':118,'multiline':False]['text':'*
 * Sink for enumerating all of the measurement unit display names.
 * Contains inner sink classes, each one corresponding to a type of resource table.
 * The outer sink handles the top-level units, unitsNarrow, and unitsShort tables.
 *
 * More specific bundles (en_GB) are enumerated before their parents (en_001, en, root):
 * Only store a value if it is still missing, that is, it has not been overridden.
 *
 * C++: Each inner sink class has a reference to the main outer sink.
 * Java: Use non-static inner classes instead.
 ','line_number':205,'multiline':True]['text':'*
     * Sink for a table of display patterns. For example,
     * unitsShort/duration/hour contains other{"{0} hrs"}.
     ','line_number':217,'multiline':True]['text':' Skip the unit display name for now.','line_number':241,'multiline':False]['text':' For example, "{0}/h".','line_number':243,'multiline':False]['text':' The key must be one of the plural form strings. For example:','line_number':246,'multiline':False]['text':' one{"{0} hr"}','line_number':247,'multiline':False]['text':' other{"{0} hrs"}','line_number':248,'multiline':False]['text':'*
     * Sink for a table of per-unit tables. For example,
     * unitsShort/duration contains tables for duration-unit subtypes day & hour.
     ','line_number':256,'multiline':True]['text':' initialSize ','line_number':264,'multiline':True]['text':'*
     * Sink for compound x-per-y display pattern. For example,
     * unitsShort/compound/per may be "{0}/{1}".
     ','line_number':275,'multiline':True]['text':'*
     * Sink for a table of unit type tables. For example,
     * unitsShort contains tables for area & duration.
     * It also contains a table for the compound/per pattern.
     ','line_number':291,'multiline':True]['text':' initialSize ','line_number':300,'multiline':True]['text':' Skip.','line_number':303,'multiline':False]['text':' Handle aliases like','line_number':323,'multiline':False]['text':' units:alias{"/LOCALE/unitsShort"}','line_number':324,'multiline':False]['text':' which should only occur in the root bundle.','line_number':325,'multiline':False]['text':' Alias from something we don't care about.','line_number':329,'multiline':False]['text':' We do not recognize what to fall back to.','line_number':334,'multiline':False]['text':' Check that we do not fall back to another fallback.','line_number':338,'multiline':False]['text':' initialSize ','line_number':346,'multiline':True]['text':' For example: "/LOCALE/unitsShort"','line_number':370,'multiline':False]['text':' Output data.','line_number':385,'multiline':False]['text':' Path to current data.','line_number':388,'multiline':False]['text':' Virtual destructors must be defined out of line.','line_number':394,'multiline':False]['text':' namespace','line_number':401,'multiline':False]['text':' Replace 'h' with 'H'','line_number':433,'multiline':False]['text':' 'h'','line_number':437,'multiline':False]['text':' 'H'','line_number':438,'multiline':False]['text':'unused','line_number':465,'multiline':True]['text':' Converts a composite measure into hours-minutes-seconds and stores at hms','line_number':513,'multiline':False]['text':' array. [0] is hours; [1] is minutes; [2] is seconds. Returns a bit map of','line_number':514,'multiline':False]['text':' units found: 1=hours, 2=minutes, 4=seconds. For example, if measures','line_number':515,'multiline':False]['text':' contains hours-minutes, this function would return 3.','line_number':516,'multiline':False]['text':'','line_number':517,'multiline':False]['text':' If measures cannot be converted into hours, minutes, seconds or if amounts','line_number':518,'multiline':False]['text':' are negative, or if hours, minutes, seconds are out of order, returns 0.','line_number':519,'multiline':False]['text':' We use copy constructor to ensure that both sides of equality operator','line_number':532,'multiline':False]['text':' are instances of MeasureUnit base class and not a subclass. Otherwise,','line_number':533,'multiline':False]['text':' operator== will immediately return false.','line_number':534,'multiline':False]['text':' hour must come first','line_number':537,'multiline':False]['text':' minute must come after hour','line_number':547,'multiline':False]['text':' second must come after hour and minute','line_number':557,'multiline':False]['text':' Same object, equal','line_number':652,'multiline':False]['text':' Note: Since the ListFormatter depends only on Locale and width, we','line_number':660,'multiline':False]['text':' don't have to check it here.','line_number':661,'multiline':False]['text':' differing widths aren't equivalent','line_number':663,'multiline':False]['text':' Width the same check locales.','line_number':667,'multiline':False]['text':' We don't need to check locales if both objects have same cache.','line_number':668,'multiline':False]['text':' On failure, assume not equal','line_number':674,'multiline':False]['text':' Locales same, check NumberFormat if shared data differs.','line_number':681,'multiline':False]['text':'source','line_number':710,'multiline':True]['text':'result','line_number':711,'multiline':True]['text':'pos','line_number':712,'multiline':True]['text':' Formats hours-minutes-seconds as 5:37:23 or similar.','line_number':911,'multiline':False]['text':' always length 3','line_number':913,'multiline':False]['text':' 1=hourset, 2=minuteset, 4=secondset','line_number':914,'multiline':False]['text':' hs','line_number':925,'multiline':False]['text':' hms','line_number':926,'multiline':False]['text':' ms','line_number':935,'multiline':False]['text':' hm','line_number':944,'multiline':False]['text':' Formats time like 5:37:23','line_number':976,'multiline':False]['text':' Time since epoch 1:30:00 would be 5400000','line_number':978,'multiline':False]['text':' h:mm, m:ss, or h:mm:ss','line_number':979,'multiline':False]['text':' seconds in 5:37:23.5','line_number':980,'multiline':False]['text':' 23.5 for 5:37:23.5','line_number':981,'multiline':False]['text':' Format the smallest amount with this object's NumberFormat','line_number':987,'multiline':False]['text':' We keep track of the integer part of smallest amount so that','line_number':990,'multiline':False]['text':' we can replace it later so that we get '0:00:09.3' instead of','line_number':991,'multiline':False]['text':' '0:00:9.3'','line_number':992,'multiline':False]['text':' Format time. draft becomes something like '5:30:45'','line_number':1003,'multiline':False]['text':' If we find field for smallest amount replace it with the formatted','line_number':1008,'multiline':False]['text':' smallest amount from above taking care to replace the integer part','line_number':1009,'multiline':False]['text':' with what is in original time. For example, If smallest amount','line_number':1010,'multiline':False]['text':' is 9.35s and the formatted time is 0:00:09 then 9.35 becomes 09.35','line_number':1011,'multiline':False]['text':' and replacing yields 0:00:09.35','line_number':1012,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1217,'multiline':True]