['text':'
*******************************************************************************
* Copyright (C) 1997-2015, International Business Machines Corporation
* and others. All Rights Reserved.
*******************************************************************************
','line_number':1,'multiline':True]['text':' for 'typeid' to work','line_number':9,'multiline':False]['text':' debugging','line_number':35,'multiline':False]['text':' #define RBNF_DEBUG','line_number':36,'multiline':False]['text':' "%%" ','line_number':47,'multiline':True]['text':' All urbnf objects are created through openRules, so we init all of the','line_number':49,'multiline':False]['text':' Unicode string constants required by rbnf, nfrs, or nfr here.','line_number':50,'multiline':False]['text':' "%%lenient-parse:" ','line_number':54,'multiline':True]['text':' ";%" ','line_number':59,'multiline':True]['text':'
This is a utility class. It does not use ICU's RTTI.
If ICU's RTTI is needed again, you can uncomment the RTTI code and derive from UObject.
Please make sure that intltest passes on Windows in Release mode,
since the string pooling per compilation unit will mess up how RTTI works.
The RTTI code was also removed due to lack of code coverage.
','line_number':69,'multiline':True]['text':'    virtual UClassID getDynamicClassID() const = 0;','line_number':108,'multiline':False]['text':'    static UClassID getStaticClassID(void);','line_number':109,'multiline':False]['text':'UOBJECT_DEFINE_ABSTRACT_RTTI_IMPLEMENTATION(LocalizationInfo)','line_number':114,'multiline':False]['text':' if both strings are NULL, this returns TRUE','line_number':116,'multiline':False]['text':' if no locale, ix is -1, getLocaleName returns null, so streq returns false','line_number':147,'multiline':False]['text':' if we couldn't realloc, we leak the memory we've already allocated, but we're in deep trouble anyway','line_number':228,'multiline':False]['text':' fill with nulls, just because','line_number':234,'multiline':False]['text':'    virtual UClassID getDynamicClassID() const;','line_number':274,'multiline':False]['text':'    static UClassID getStaticClassID(void);','line_number':275,'multiline':False]['text':' '<' ','line_number':283,'multiline':True]['text':' '>' ','line_number':284,'multiline':True]['text':'*
 * Utility for parsing a localization string and returning a StringLocalizationInfo*.
 ','line_number':291,'multiline':True]['text':'
    * On a successful parse, return a StringLocalizationInfo*, otherwise delete locData, set perror and status,
    * and return NULL.  The StringLocalizationInfo will adopt locData if it is created.
    ','line_number':307,'multiline':True]['text':' subtract first, NULL','line_number':430,'multiline':False]['text':' subtract first, NULL','line_number':433,'multiline':False]['text':' terminate by writing to data','line_number':515,'multiline':False]['text':' just point into data','line_number':516,'multiline':False]['text':' ok for there to be no next string','line_number':530,'multiline':False]['text':' SOLIDUS/SLASH ','line_number':565,'multiline':True]['text':'UOBJECT_DEFINE_RTTI_IMPLEMENTATION(StringLocalizationInfo)','line_number':590,'multiline':False]['text':' no error;','line_number':600,'multiline':False]['text':' clear warning about non-termination','line_number':610,'multiline':False]['text':' remaining data is simply pointer into our unicode string data.','line_number':619,'multiline':False]['text':' ----------','line_number':652,'multiline':False]['text':' TODO: read localization info from resource','line_number':804,'multiline':False]['text':' --------','line_number':859,'multiline':False]['text':' test for capitalization info equality is adequately handled','line_number':908,'multiline':False]['text':' by the NumberFormat test for fCapitalizationContext equality;','line_number':909,'multiline':False]['text':' the info here is just derived from that.','line_number':910,'multiline':False]['text':' trim trailing portion, skipping over ommitted sections','line_number':1040,'multiline':False]['text':' underscore','line_number':1041,'multiline':False]['text':' pos ','line_number':1082,'multiline':True]['text':' pos ','line_number':1097,'multiline':True]['text':' pos ','line_number':1112,'multiline':True]['text':' pos ','line_number':1127,'multiline':True]['text':' return format((int64_t)number, ruleSetName, toAppendTo, pos, status);','line_number':1130,'multiline':False]['text':' throw new IllegalArgumentException("Can't use internal rule set");','line_number':1133,'multiline':False]['text':' pos ','line_number':1152,'multiline':True]['text':' throw new IllegalArgumentException("Can't use internal rule set");','line_number':1157,'multiline':False]['text':' pos ','line_number':1176,'multiline':True]['text':' throw new IllegalArgumentException("Can't use internal rule set");','line_number':1181,'multiline':False]['text':' capitalize currentResult according to context','line_number':1201,'multiline':False]['text':' titlecase first word of currentResult, here use sentence iterator unlike current implementations','line_number':1209,'multiline':False]['text':' in LocaleDisplayNamesImpl::adjustForUsageAndContext and RelativeDateFormat::format','line_number':1210,'multiline':False]['text':' Note: casting a double to an int when the double is too large or small','line_number':1265,'multiline':False]['text':'       to fit the destination is undefined behavior. The explicit range checks,','line_number':1266,'multiline':False]['text':'       above, are required. Just casting and checking the result value is undefined.','line_number':1267,'multiline':False]['text':' TODO: implement UParseError','line_number':1357,'multiline':False]['text':' Note: this can leave ruleSets == NULL, so remaining code should check','line_number':1359,'multiline':False]['text':' start by stripping the trailing whitespace from all the rules','line_number':1379,'multiline':False]['text':' (this is all the whitespace follwing each semicolon in the','line_number':1380,'multiline':False]['text':' description).  This allows us to look for rule-set boundaries','line_number':1381,'multiline':False]['text':' by searching for ";%" without having to worry about whitespace','line_number':1382,'multiline':False]['text':' between the ; and the %','line_number':1383,'multiline':False]['text':' check to see if there's a set of lenient-parse rules.  If there','line_number':1386,'multiline':False]['text':' is, pull them out into our temporary holding place for them,','line_number':1387,'multiline':False]['text':' and delete them from the description before the real desciption-','line_number':1388,'multiline':False]['text':' parsing code sees them','line_number':1389,'multiline':False]['text':' we've got to make sure we're not in the middle of a rule','line_number':1392,'multiline':False]['text':' (where "%%lenient-parse" would actually get treated as','line_number':1393,'multiline':False]['text':' rule text)','line_number':1394,'multiline':False]['text':' locate the beginning and end of the actual collation','line_number':1396,'multiline':False]['text':' rules (there may be whitespace between the name and','line_number':1397,'multiline':False]['text':' the first token in the description)','line_number':1398,'multiline':False]['text':' copy out the lenient-parse rules and delete them','line_number':1409,'multiline':False]['text':' from the description','line_number':1410,'multiline':False]['text':' test for NULL ','line_number':1412,'multiline':True]['text':' pre-flight parsing the description and count the number of','line_number':1423,'multiline':False]['text':' rule sets (";%" marks the end of one rule set and the beginning','line_number':1424,'multiline':False]['text':' of the next)','line_number':1425,'multiline':False]['text':' our rule list is an array of the appropriate size','line_number':1433,'multiline':False]['text':' test for NULL ','line_number':1435,'multiline':True]['text':' divide up the descriptions into individual rule-set descriptions','line_number':1445,'multiline':False]['text':' and store them in a temporary array.  At each step, we also','line_number':1446,'multiline':False]['text':' new up a rule set, but all this does is initialize its name','line_number':1447,'multiline':False]['text':' and remove it from its description.  We can't actually parse','line_number':1448,'multiline':False]['text':' the rest of the descriptions and finish initializing everything','line_number':1449,'multiline':False]['text':' because we have to know the names and locations of all the rule','line_number':1450,'multiline':False]['text':' sets before we can actually set everything up','line_number':1451,'multiline':False]['text':' now we can take note of the formatter's default rule set, which','line_number':1484,'multiline':False]['text':' is the last public rule set in the description (it's the last','line_number':1485,'multiline':False]['text':' rather than the first so that a user can create a new formatter','line_number':1486,'multiline':False]['text':' from an existing formatter and change its default behavior just','line_number':1487,'multiline':False]['text':' by appending more rule sets to the end)','line_number':1488,'multiline':False]['text':' {dlf} Initialization of a fraction rule set requires the default rule','line_number':1490,'multiline':False]['text':' set to be known.  For purposes of initialization, this is always the ','line_number':1491,'multiline':False]['text':' last public rule set, no matter what the localization data says.','line_number':1492,'multiline':False]['text':' finally, we can go back through the temporary descriptions','line_number':1495,'multiline':False]['text':' list and finish seting up the substructure (and we throw','line_number':1496,'multiline':False]['text':' away the temporary descriptions as we go)','line_number':1497,'multiline':False]['text':' Now that the rules are initialized, the 'real' default rule','line_number':1504,'multiline':False]['text':' set can be adjusted by the localization data.','line_number':1505,'multiline':False]['text':' The C code keeps the localization array as is, rather than building','line_number':1507,'multiline':False]['text':' a separate array of the public rule set names, so we have less work','line_number':1508,'multiline':False]['text':' to do here-- but we still need to check the names.','line_number':1509,'multiline':False]['text':' confirm the names, if any aren't in the rules, that's an error','line_number':1512,'multiline':False]['text':' it is ok if the rules contain public rule sets that are not in this list','line_number':1513,'multiline':False]['text':' error','line_number':1518,'multiline':False]['text':' override the NumberFormat implementation in order to','line_number':1530,'multiline':False]['text':' lazily initialize relevant items','line_number':1531,'multiline':False]['text':' iterate through the characters...','line_number':1581,'multiline':False]['text':' seek to the first non-whitespace character...','line_number':1586,'multiline':False]['text':' locate the next semicolon in the text and copy the text from','line_number':1592,'multiline':False]['text':' our current position up to that semicolon into the result','line_number':1593,'multiline':False]['text':' or if we don't find a semicolon, just copy the rest of','line_number':1596,'multiline':False]['text':' the string into the result','line_number':1597,'multiline':False]['text':' when we get here, we've seeked off the end of the sring, and','line_number':1606,'multiline':False]['text':' we terminate the loop (we continue until *start* is -1 rather','line_number':1607,'multiline':False]['text':' than until *p* is -1, because otherwise we'd miss the last','line_number':1608,'multiline':False]['text':' rule in the description)','line_number':1609,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1663,'multiline':False]['text':' package-internal API','line_number':1664,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1665,'multiline':False]['text':'*
 * Returns the collator to use for lenient parsing.  The collator is lazily created:
 * this function creates it the first time it's called.
 * @return The collator to use for lenient parsing, or null if lenient parsing
 * is turned off.
','line_number':1667,'multiline':True]['text':' lazy-evaluate the collator','line_number':1681,'multiline':False]['text':' create a default collator based on the formatter's locale,','line_number':1683,'multiline':False]['text':' then pull out that collator's rules, append any additional','line_number':1684,'multiline':False]['text':' rules specified in the description, and create a _new_','line_number':1685,'multiline':False]['text':' collator based on the combinaiton of those rules','line_number':1686,'multiline':False]['text':' Exit if newCollator could not be created.','line_number':1698,'multiline':False]['text':' cast away const','line_number':1707,'multiline':False]['text':' if lenient-parse mode is off, this will be null','line_number':1717,'multiline':False]['text':' (see setLenientParseMode())','line_number':1718,'multiline':False]['text':' lazy-evaluate the DecimalFormatSymbols object.  This object','line_number':1726,'multiline':False]['text':' is shared by all DecimalFormat instances belonging to this','line_number':1727,'multiline':False]['text':' formatter','line_number':1728,'multiline':False]['text':'*
 * Returns the DecimalFormatSymbols object that should be used by all DecimalFormat
 * instances owned by this formatter.
','line_number':1741,'multiline':True]['text':' De-owning the current localized symbols and adopt the new symbols.','line_number':1803,'multiline':False]['text':' do not allow caller to set decimalFormatSymbols to NULL','line_number':1808,'multiline':False]['text':' Apply the new decimalFormatSymbols by reparsing the rulesets','line_number':1818,'multiline':False]['text':' Reset with the new DecimalFormatSymbols','line_number':1823,'multiline':False]['text':' Reset with the new DecimalFormatSymbols','line_number':1827,'multiline':False]['text':' Setting the symbols is equlivalent to adopting a newly created localized symbols.','line_number':1837,'multiline':False]['text':' U_HAVE_RBNF ','line_number':1854,'multiline':True]