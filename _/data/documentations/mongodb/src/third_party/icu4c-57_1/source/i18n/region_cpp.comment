['text':'
*******************************************************************************
* Copyright (C) 2014-2015, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
*
* File REGION.CPP
*
* Modification History:*
*   Date        Name        Description
* 01/15/13      Emmons      Original Port from ICU4J
********************************************************************************
','line_number':1,'multiline':True]['text':'*
 * \file
 * \brief C++ API: Region classes (territory containment)
 ','line_number':16,'multiline':True]['text':'*
 * Cleanup callback func
 ','line_number':45,'multiline':True]['text':' "ZZ" ','line_number':67,'multiline':True]['text':' "QO" ','line_number':68,'multiline':True]['text':' "001" ','line_number':69,'multiline':True]['text':' "~" ','line_number':70,'multiline':True]['text':'
 * Initializes the region data from the ICU resource bundles.  The region data
 * contains the basic relationships such as which regions are known, what the numeric
 * codes are, any known aliases, and the territory containment data.
 *
 * If the region data has already loaded, then this method simply returns without doing
 * anything meaningful.
 ','line_number':75,'multiline':True]['text':' Construct service objs first','line_number':85,'multiline':False]['text':' now, initialize','line_number':116,'multiline':False]['text':' regionIDMap owns objs','line_number':118,'multiline':False]['text':' regionAliases owns the string keys','line_number':119,'multiline':False]['text':' Only temporary - figure out the real type later once the aliases are known.','line_number':184,'multiline':False]['text':' Convert string to number','line_number':190,'multiline':False]['text':' about to orphan 'r'. Save this off.','line_number':196,'multiline':False]['text':' regionIDMap takes ownership','line_number':197,'multiline':False]['text':' Process the territory aliases','line_number':200,'multiline':False]['text':' This is just an alias from some string to a region','line_number':211,'multiline':False]['text':' Deprecated region code not in the master codes list - so need to create a deprecated region for it.','line_number':214,'multiline':False]['text':' error out','line_number':219,'multiline':False]['text':' Convert string to number','line_number':228,'multiline':False]['text':'currentRegion.remove();   TODO: was already 0 length?','line_number':246,'multiline':False]['text':' may add null if err','line_number':255,'multiline':False]['text':' Process the code mappings - This will allow us to assign numeric codes to most of the territories.','line_number':263,'multiline':False]['text':' Convert string to number','line_number':277,'multiline':False]['text':' Now fill in the special cases for WORLD, UNKNOWN, CONTINENTS, and GROUPINGS','line_number':287,'multiline':False]['text':' Special case: The region code "QO" (Outlying Oceania) is a subcontinent code added by CLDR','line_number':315,'multiline':False]['text':' even though it looks like a territory code.  Need to handle it here.','line_number':316,'multiline':False]['text':' Load territory containment info from the supplemental data.','line_number':324,'multiline':False]['text':' error out','line_number':328,'multiline':False]['text':' handle new pseudo-parent types added in ICU data per cldrbug 7808; for now just skip.','line_number':332,'multiline':False]['text':' #11232 is to do something useful with these.','line_number':333,'multiline':False]['text':' Add the child region to the set of regions contained by the parent','line_number':343,'multiline':False]['text':' error out','line_number':350,'multiline':False]['text':' Set the parent region to be the containing region of the child.','line_number':355,'multiline':False]['text':' Regions of type GROUPING can't be set as the parent, since another region','line_number':356,'multiline':False]['text':' such as a SUBCONTINENT, CONTINENT, or WORLD must always be the parent.','line_number':357,'multiline':False]['text':' Create the availableRegions lists','line_number':365,'multiline':False]['text':' error out','line_number':375,'multiline':False]['text':' copy hashtables','line_number':381,'multiline':False]['text':' Don't need the temporary list anymore.','line_number':406,'multiline':False]['text':'*
 * Returns true if the two regions are equal.
 * Per PMC, just use pointer compare, since we have at most one instance of each Region.
 ','line_number':434,'multiline':True]['text':'*
 * Returns true if the two regions are NOT equal; that is, if operator ==() returns false.
 * Per PMC, just use pointer compare, since we have at most one instance of each Region.
 ','line_number':443,'multiline':True]['text':'*
 * Returns a pointer to a Region using the given region code.  The region code can be either 2-letter ISO code,
 * 3-letter ISO code,  UNM.49 numeric code, or other valid Unicode Region Code as defined by the LDML specification.
 * The identifier will be canonicalized internally using the supplemental metadata as defined in the CLDR.
 * If the region code is NULL or not recognized, the appropriate error code will be set ( U_ILLEGAL_ARGUMENT_ERROR )
 ','line_number':452,'multiline':True]['text':' Unknown region code','line_number':478,'multiline':False]['text':'*
 * Returns a pointer to a Region using the given numeric region code. If the numeric region code is not recognized,
 * the appropriate error code will be set ( U_ILLEGAL_ARGUMENT_ERROR ).
 ','line_number':495,'multiline':True]['text':' Just in case there's an alias that's numeric, try to find it.','line_number':509,'multiline':False]['text':'*
 * Returns an enumeration over the IDs of all known regions that match the given type.
 ','line_number':543,'multiline':True]['text':' returns immediately if U_FAILURE(status)','line_number':548,'multiline':False]['text':'*
 * Returns a pointer to the region that contains this region.  Returns NULL if this region is code "001" (World)
 * or "ZZ" (Unknown region). For example, calling this method with region "IT" (Italy) returns the
 * region "039" (Southern Europe).
 ','line_number':555,'multiline':True]['text':'*
 * Return a pointer to the region that geographically contains this region and matches the given type,
 * moving multiple steps up the containment chain if necessary.  Returns NULL if no containing region can be found
 * that matches the given type. Note: The URegionTypes = "URGN_GROUPING", "URGN_DEPRECATED", or "URGN_UNKNOWN"
 * are not appropriate for use in this API. NULL will be returned in this case. For example, calling this method
 * with region "IT" (Italy) for type "URGN_CONTINENT" returns the region "150" ( Europe ).
 ','line_number':567,'multiline':True]['text':'*
 * Return an enumeration over the IDs of all the regions that are immediate children of this region in the
 * region hierarchy. These returned regions could be either macro regions, territories, or a mixture of the two,
 * depending on the containment data as defined in CLDR.  This API may return NULL if this region doesn't have
 * any sub-regions. For example, calling this method with region "150" (Europe) returns an enumeration containing
 * the various sub regions of Europe - "039" (Southern Europe) - "151" (Eastern Europe) - "154" (Northern Europe)
 * and "155" (Western Europe).
 ','line_number':585,'multiline':True]['text':' returns immediately if U_FAILURE(status)','line_number':595,'multiline':False]['text':'*
 * Returns an enumeration over the IDs of all the regions that are children of this region anywhere in the region
 * hierarchy and match the given type.  This API may return an empty enumeration if this region doesn't have any
 * sub-regions that match the given type. For example, calling this method with region "150" (Europe) and type
 * "URGN_TERRITORY" returns a set containing all the territories in Europe ( "FR" (France) - "IT" (Italy) - "DE" (Germany) etc. )
 ','line_number':602,'multiline':True]['text':' returns immediately if U_FAILURE(status)','line_number':610,'multiline':False]['text':'*
 * Returns true if this region contains the supplied other region anywhere in the region hierarchy.
 ','line_number':640,'multiline':True]['text':'*
 * For deprecated regions, return an enumeration over the IDs of the regions that are the preferred replacement
 * regions for this region.  Returns NULL for a non-deprecated region.  For example, calling this method with region
 * "SU" (Soviet Union) would return a list of the regions containing "RU" (Russia), "AM" (Armenia), "AZ" (Azerbaijan), etc...
 ','line_number':666,'multiline':True]['text':' returns immediately if U_FAILURE(status)','line_number':673,'multiline':False]['text':'*
 * Return this region's canonical region code.
 ','line_number':681,'multiline':True]['text':'*
 * Returns the region type of this region.
 ','line_number':694,'multiline':True]['text':'status','line_number':730,'multiline':True]['text':'status','line_number':735,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':745,'multiline':True]['text':'eof','line_number':747,'multiline':False]