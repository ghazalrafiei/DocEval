['text':'
**********************************************************************
*   Copyright (c) 2001-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   11/19/2001  aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]['text':'*
 * Parse an integer at pos, either of the form \d+ or of the form
 * 0x[0-9A-Fa-f]+ or 0[0-7]+, that is, in standard decimal, hex,
 * or octal format.
 * @param pos INPUT-OUTPUT parameter.  On input, the first
 * character to parse.  On output, the character after the last
 * parsed character.
 ','line_number':18,'multiline':True]['text':'0','line_number':32,'multiline':True]['text':'x','line_number':33,'multiline':True]['text':'X','line_number':33,'multiline':True]['text':' If there are too many input digits, at some point','line_number':53,'multiline':False]['text':' the value will go negative, e.g., if we have seen','line_number':54,'multiline':False]['text':' "0x8000000" already and there is another '0', when','line_number':55,'multiline':False]['text':' we parse the next 0 the value will go negative.','line_number':56,'multiline':False]['text':'*
 * Parse a pattern string starting at offset pos.  Keywords are
 * matched case-insensitively.  Spaces may be skipped and may be
 * optional or required.  Integer values may be parsed, and if
 * they are, they will be returned in the given array.  If
 * successful, the offset of the next non-space character is
 * returned.  On failure, -1 is returned.
 * @param pattern must only contain lowercase characters, which
 * will match their uppercase equivalents as well.  A space
 * character matches one or more required spaces.  A '~' character
 * matches zero or more optional spaces.  A '#' character matches
 * an integer and stores it in parsedInts, which the caller must
 * ensure has enough capacity.
 * @param parsedInts array to receive parsed integers.  Caller
 * must ensure that parsedInts.length is >= the number of '#'
 * signs in 'pattern'.
 * @return the position after the last character parsed, or -1 if
 * the parse failed
 ','line_number':67,'multiline':True]['text':' TODO Update this to handle surrogates','line_number':88,'multiline':False]['text':' number of integers parsed','line_number':90,'multiline':False]['text':'' '','line_number':95,'multiline':True]['text':' FALL THROUGH to skipWhitespace','line_number':103,'multiline':False]['text':''~'','line_number':105,'multiline':True]['text':''#'','line_number':108,'multiline':True]['text':' Syntax error; failed to parse integer','line_number':112,'multiline':False]['text':'*
 * Parse a Unicode identifier from the given string at the given
 * position.  Return the identifier, or an empty string if there
 * is no identifier.
 * @param str the string to parse
 * @param pos INPUT-OUPUT parameter.  On INPUT, pos is the
 * first character to examine.  It must be less than str.length(),
 * and it must not point to a whitespace character.  That is, must
 * have pos < str.length().  On
 * OUTPUT, the position after the last parsed character.
 * @return the Unicode identifier, or an empty string if there is
 * no valid identifier at pos.
 ','line_number':131,'multiline':True]['text':' assert(pos < str.length());','line_number':145,'multiline':False]['text':'*
 * Parse an unsigned 31-bit integer at the given offset.  Use
 * UCharacter.digit() to parse individual characters into digits.
 * @param text the text to be parsed
 * @param pos INPUT-OUTPUT parameter.  On entry, pos[0] is the
 * offset within text at which to start parsing; it should point
 * to a valid digit.  On exit, pos[0] is the offset after the last
 * parsed character.  If the parse failed, it will be unchanged on
 * exit.  Must be >= 0 on entry.
 * @param radix the radix in which to parse; must be >= 2 and <=
 * 36.
 * @return a non-negative parsed number, or -1 upon parse failure.
 * Parse fails if there are no digits, that is, if pos[0] does not
 * point to a valid digit on entry, or if the number to be parsed
 * does not fit into a 31-bit unsigned integer.
 ','line_number':170,'multiline':True]['text':' assert(pos[0] >= 0);','line_number':188,'multiline':False]['text':' assert(radix >= 2);','line_number':189,'multiline':False]['text':' assert(radix <= 36);','line_number':190,'multiline':False]['text':' ASSUME that when a 32-bit integer overflows it becomes','line_number':200,'multiline':False]['text':' negative.  E.g., 214748364 * 10 + 8 => negative value.','line_number':201,'multiline':False]