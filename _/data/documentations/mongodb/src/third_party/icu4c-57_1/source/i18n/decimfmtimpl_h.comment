['text':'
********************************************************************************
*   Copyright (C) 2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File decimfmtimpl.h
********************************************************************************
','line_number':1,'multiline':True]['text':'*
 * DecimalFormatImpl is the glue code between the legacy DecimalFormat class
 * and the new decimal formatting classes. DecimalFormat still handles
 * parsing directly. However, DecimalFormat uses attributes of this class
 * for parsing when possible.
 *
 * The public API of this class closely mirrors the legacy API of the
 * legacy DecimalFormat deviating only when the legacy API does not make
 * sense. For example, although DecimalFormat has a
 * getPadCharacterString() method, DecimalFormatImpl has a getPadCharacter()
 * method because formatting uses only a single pad character for padding.
 *
 * Each legacy DecimalFormat instance heap allocates its own instance of
 * this class. Most DecimalFormat methods that deal with formatting simply
 * delegate to the DecimalFormat's DecimalFormatImpl method.
 *
 * Because DecimalFormat extends NumberFormat, Each instance of this class
 * "borrows" a pointer to the NumberFormat part of its enclosing DecimalFormat
 * instance. This way each DecimalFormatImpl instance can read or even modify
 * the NumberFormat portion of its enclosing DecimalFormat instance.
 *
 * Directed acyclic graph (DAG):
 *
 * This class can be represented as a directed acyclic graph (DAG) where each
 * vertex is an attribute, and each directed edge indicates that the value
 * of the destination attribute is calculated from the value of the source
 * attribute. Attributes with setter methods reside at the bottom of the
 * DAG. That is, no edges point to them. We call these independent attributes
 * because their values can be set independently of one another. The rest of
 * the attributes are derived attributes because their values depend on the
 * independent attributes. DecimalFormatImpl often uses the derived
 * attributes, not the independent attributes, when formatting numbers.
 *
 * The independent attributes at the bottom of the DAG correspond to the legacy
 * attributes of DecimalFormat while the attributes at the top of the DAG
 * correspond to the attributes of the new code. The edges of the DAG
 * correspond to the code that handles the complex interaction among all the
 * legacy attributes of the DecimalFormat API.
 *
 * We use a DAG for three reasons.
 *
 * First, the DAG preserves backward compatibility. Clients of the legacy
 * DecimalFormat expect existing getters and setters of each attribute to be
 * consistent. That means if a client sets a particular attribute to a new
 * value, the attribute should retain that value until the client sets it to
 * a new value. The DAG allows these attributes to remain consistent even
 * though the new code may not use them when formatting.
 *
 * Second, the DAG obviates the need to recalculate derived attributes with
 * each format. Instead, the DAG "remembers" the values of all derived
 * attributes. Only setting an independent attribute requires a recalculation.
 * Moreover, setting an independent attribute recalculates only the affected
 * dependent attributes rather than all dependent attributes.
 *
 * Third, the DAG abstracts away the complex interaction among the legacy
 * attributes of the DecimalFormat API.
 *
 * Only the independent attributes of the DAG have setters and getters.
 * Derived attributes have no setters (and often no getters either).
 *
 * Copy and assign:
 *
 * For copy and assign, DecimalFormatImpl copies and assigns every attribute
 * regardless of whether or not it is independent. We do this for simplicity.
 *
 * Implementation of the DAG:
 *
 * The DAG consists of three smaller DAGs:
 * 1. Grouping attributes
 * 2. Precision attributes
 * 3. Formatting attributes.
 *
 * The first two DAGs are simple in that setting any independent attribute
 * in the DAG recalculates all the dependent attributes in that DAG.
 * The updateGrouping() and updatePrecision() perform the respective
 * recalculations. 
 *
 * Because some of the derived formatting attributes are expensive to
 * calculate, the formatting attributes DAG is more complex. The
 * updateFormatting() method is composed of many updateFormattingXXX()
 * methods, each of which recalculates a single derived attribute. The
 * updateFormatting() method accepts a bitfield of recently changed
 * attributes and passes this bitfield by reference to each of the
 * updateFormattingXXX() methods. Each updateFormattingXXX() method checks
 * the bitfield to see if any of the attributes it uses to compute the XXX
 * attribute changed. If none of them changed, it exists immediately. However,
 * if at least one of them changed, it recalculates the XXX attribute and
 * sets the corresponding bit in the bitfield. In this way, each
 * updateFormattingXXX() method encodes the directed edges in the formatting
 * DAG that point to the attribute its calculating.
 *
 * Maintenance of the updateFormatting() method.
 *
 * Use care when changing the updateFormatting() method.
 * The updateFormatting() method must call each updateFormattingXXX() in the
 * same partial order that the formatting DAG prescribes. That is, the
 * attributes near the bottom of the DAG must be calculated before attributes
 * further up. As we mentioned in the prvious paragraph, the directed edges of
 * the formatting DAG are encoded within each updateFormattingXXX() method.
 * Finally, adding new attributes may involve adding to the bitmap that the
 * updateFormatting() method uses. The top most attributes in the DAG,
 * those that do not point to any attributes but only have attributes
 * pointing to it, need not have a slot in the bitmap.
 *
 * Keep in mind that most of the code that makes the legacy DecimalFormat API
 * work the way it always has before can be found in these various updateXXX()
 * methods. For example the updatePrecisionForScientific() method
 * handles the complex interactions amoung the various precision attributes
 * when formatting in scientific notation. Changing the way attributes
 * interract, often means changing one of these updateXXX() methods.
 *
 * Conclusion:
 *
 * The DecimFmtImpl class is the glue code between the legacy and new
 * number formatting code. It uses a direct acyclic graph (DAG) to
 * maintain backward compatibility, to make the code efficient, and to
 * abstract away the complex interraction among legacy attributs.
 ','line_number':34,'multiline':True]['text':' Disallow copy and assign','line_number':348,'multiline':False]['text':' These fields include what the user can see and set.','line_number':357,'multiline':False]['text':' When the user updates these fields, it triggers automatic updates of','line_number':358,'multiline':False]['text':' other fields that may be invisible to user','line_number':359,'multiline':False]['text':' Updating any of the following fields triggers an update to','line_number':361,'multiline':False]['text':' fEffPrecision.fMantissa.fMin,','line_number':362,'multiline':False]['text':' fEffPrecision.fMantissa.fMax,','line_number':363,'multiline':False]['text':' fEffPrecision.fMantissa.fSignificant fields','line_number':364,'multiline':False]['text':' We have this two phase update because of backward compatibility. ','line_number':365,'multiline':False]['text':' DecimalFormat has to remember all settings even if those settings are','line_number':366,'multiline':False]['text':' invalid or disabled.','line_number':367,'multiline':False]['text':' In addition to these listed above, changes to min/max int digits and','line_number':372,'multiline':False]['text':' min/max frac digits from fSuper also trigger an update.','line_number':373,'multiline':False]['text':' Updating any of the following fields triggers an update to','line_number':375,'multiline':False]['text':' fEffGrouping field Again we do it this way because original','line_number':376,'multiline':False]['text':' grouping settings have to be retained if grouping is turned off.','line_number':377,'multiline':False]['text':' In addition to these listed above, changes to isGroupingUsed in','line_number':379,'multiline':False]['text':' fSuper also triggers an update to fEffGrouping.','line_number':380,'multiline':False]['text':' Updating any of the following fields triggers updates on the following:','line_number':382,'multiline':False]['text':' fMonetary, fRules, fAffixParser, fCurrencyAffixInfo,','line_number':383,'multiline':False]['text':' fFormatter, fAffixes.fPositivePrefiix, fAffixes.fPositiveSuffix,','line_number':384,'multiline':False]['text':' fAffixes.fNegativePrefiix, fAffixes.fNegativeSuffix','line_number':385,'multiline':False]['text':' We do this two phase update because localizing the affix patterns','line_number':386,'multiline':False]['text':' and formatters can be expensive. Better to do it once with the setters','line_number':387,'multiline':False]['text':' than each time within format.','line_number':388,'multiline':False]['text':' In addition to these listed above, changes to getCurrency() in','line_number':395,'multiline':False]['text':' fSuper also triggers an update.','line_number':396,'multiline':False]['text':' Optional may be NULL','line_number':398,'multiline':False]['text':' These fields are totally hidden from user and are used to derive the affixes','line_number':401,'multiline':False]['text':' in fAffixes below from the four affix patterns above.','line_number':402,'multiline':False]['text':' The actual precision used when formatting','line_number':407,'multiline':False]['text':' The actual grouping used when formatting','line_number':410,'multiline':False]['text':' Encapsulates fixed precision options','line_number':412,'multiline':False]['text':' Scales for precent or permille symbols','line_number':434,'multiline':False]['text':' Does not scale for precent or permille symbols','line_number':441,'multiline':False]['text':' Updates everything','line_number':485,'multiline':False]['text':' Updates from formatting pattern changes','line_number':492,'multiline':False]['text':' Updates from changes to third group of attributes','line_number':496,'multiline':False]['text':' Helper functions for updatePrecision','line_number':503,'multiline':False]['text':' Helper functions for updateFormatting','line_number':509,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':545,'multiline':True]['text':' DECIMFMTIMPL_H','line_number':546,'multiline':False]['text':'eof','line_number':547,'multiline':False]