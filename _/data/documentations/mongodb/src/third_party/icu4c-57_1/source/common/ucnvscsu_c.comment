['text':'
******************************************************************************
*
*   Copyright (C) 2000-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  ucnvscsu.c
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2000nov18
*   created by: Markus W. Scherer
*
*   This is an implementation of the Standard Compression Scheme for Unicode
*   as defined in http://www.unicode.org/unicode/reports/tr6/ .
*   Reserved commands and window settings are treated as illegal sequences and
*   will result in callback calls.
','line_number':1,'multiline':True]['text':' SCSU definitions --------------------------------------------------------- ','line_number':33,'multiline':True]['text':' SCSU command byte values ','line_number':35,'multiline':True]['text':' Quote from window pair 0 ','line_number':37,'multiline':True]['text':' Quote from window pair 7 ','line_number':38,'multiline':True]['text':' Define a window as extended ','line_number':39,'multiline':True]['text':' reserved ','line_number':40,'multiline':True]['text':' Quote a single Unicode character ','line_number':41,'multiline':True]['text':' Change to Unicode mode ','line_number':42,'multiline':True]['text':' Select window 0 ','line_number':43,'multiline':True]['text':' Select window 7 ','line_number':44,'multiline':True]['text':' Define and select window 0 ','line_number':45,'multiline':True]['text':' Define and select window 7 ','line_number':46,'multiline':True]['text':' Select window 0 ','line_number':48,'multiline':True]['text':' Select window 7 ','line_number':49,'multiline':True]['text':' Define and select window 0 ','line_number':50,'multiline':True]['text':' Define and select window 7 ','line_number':51,'multiline':True]['text':' Quote a single Unicode character ','line_number':52,'multiline':True]['text':' Define a Window as extended ','line_number':53,'multiline':True]['text':' reserved ','line_number':54,'multiline':True]['text':'
     * Unicode code points from 3400 to E000 are not adressible by
     * dynamic window, since in these areas no short run alphabets are
     * found. Therefore add gapOffset to all values from gapThreshold.
     ','line_number':58,'multiline':True]['text':' values between reservedStart and fixedThreshold are reserved ','line_number':66,'multiline':True]['text':' use table of predefined fixed offsets for values from fixedThreshold ','line_number':69,'multiline':True]['text':' constant offsets for the 8 static windows ','line_number':73,'multiline':True]['text':' ASCII for quoted tags ','line_number':75,'multiline':True]['text':' Latin - 1 Supplement (for access to punctuation) ','line_number':76,'multiline':True]['text':' Latin Extended-A ','line_number':77,'multiline':True]['text':' Combining Diacritical Marks ','line_number':78,'multiline':True]['text':' General Punctuation ','line_number':79,'multiline':True]['text':' Currency Symbols ','line_number':80,'multiline':True]['text':' Letterlike Symbols and Number Forms ','line_number':81,'multiline':True]['text':' CJK Symbols and punctuation ','line_number':82,'multiline':True]['text':' initial offsets for the 8 dynamic (sliding) windows ','line_number':85,'multiline':True]['text':' Latin-1 ','line_number':87,'multiline':True]['text':' Latin Extended A ','line_number':88,'multiline':True]['text':' Cyrillic ','line_number':89,'multiline':True]['text':' Arabic ','line_number':90,'multiline':True]['text':' Devanagari ','line_number':91,'multiline':True]['text':' Hiragana ','line_number':92,'multiline':True]['text':' Katakana ','line_number':93,'multiline':True]['text':' Fullwidth ASCII ','line_number':94,'multiline':True]['text':' Table of fixed predefined Offsets ','line_number':97,'multiline':True]['text':' 0xF9 ','line_number':99,'multiline':True]['text':' Latin-1 Letters + half of Latin Extended A ','line_number':99,'multiline':True]['text':' 0xFA ','line_number':100,'multiline':True]['text':' IPA extensions ','line_number':100,'multiline':True]['text':' 0xFB ','line_number':101,'multiline':True]['text':' Greek ','line_number':101,'multiline':True]['text':' 0xFC ','line_number':102,'multiline':True]['text':' Armenian ','line_number':102,'multiline':True]['text':' 0xFD ','line_number':103,'multiline':True]['text':' Hiragana ','line_number':103,'multiline':True]['text':' 0xFE ','line_number':104,'multiline':True]['text':' Katakana ','line_number':104,'multiline':True]['text':' 0xFF ','line_number':105,'multiline':True]['text':' Halfwidth Katakana ','line_number':105,'multiline':True]['text':' state values ','line_number':108,'multiline':True]['text':' dynamic window offsets, intitialize to default values from initialDynamicOffsets ','line_number':120,'multiline':True]['text':' state machine state - toUnicode ','line_number':124,'multiline':True]['text':' state machine state - fromUnicode ','line_number':131,'multiline':True]['text':'
     * windowUse[] keeps track of the use of the dynamic windows:
     * At nextWindowUseIndex there is the least recently used window,
     * and the following windows (in a wrapping manner) are more and more
     * recently used.
     * At nextWindowUseIndex-1 there is the most recently used window.
     ','line_number':135,'multiline':True]['text':' SCSU setup functions ----------------------------------------------------- ','line_number':154,'multiline':True]['text':' reset toUnicode ','line_number':161,'multiline':True]['text':' reset fromUnicode ','line_number':172,'multiline':True]['text':' Set the substitution character U+fffd as a Unicode string. ','line_number':212,'multiline':True]['text':' SCSU-to-Unicode conversion functions ------------------------------------- ','line_number':227,'multiline':True]['text':' set up the local pointers ','line_number':246,'multiline':True]['text':' get the state machine state ','line_number':256,'multiline':True]['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':263,'multiline':True]['text':'
     * conversion "loop"
     *
     * For performance, this is not a normal C loop.
     * Instead, there are two code blocks for the two SCSU modes.
     * The function branches to either one, and a change of the mode is done with a goto to
     * the other branch.
     *
     * Each branch has two conventional loops:
     * - a fast-path loop for the most common codes in the mode
     * - a loop for all other codes in the mode
     * When the fast-path runs into a code that it cannot handle, its loop ends and it
     * runs into the following loop to handle the other codes.
     * The end of the input or output buffer is also handled by the slower loop.
     * The slow loop jumps (goto) to the fast-path loop again as soon as possible.
     *
     * The callback handling is done by returning with an error code.
     * The conversion framework actually calls the callback function.
     ','line_number':267,'multiline':True]['text':' fast path for single-byte mode ','line_number':287,'multiline':True]['text':' write US-ASCII graphic character or DEL ','line_number':294,'multiline':True]['text':' write from dynamic window ','line_number':300,'multiline':True]['text':' output surrogate pair ','line_number':308,'multiline':True]['text':' target overflow ','line_number':317,'multiline':True]['text':' normal state machine for single-byte mode, minus handling for what fastSingle covers ','line_number':332,'multiline':True]['text':' target is full ','line_number':336,'multiline':True]['text':' redundant conditions are commented out ','line_number':344,'multiline':True]['text':' here: b<0x20 because otherwise we would be in fastSingle ','line_number':345,'multiline':True]['text':' binary 0010 0110 0000 0001, check for b==0xd || b==0xa || b==9 || b==0 ','line_number':346,'multiline':True]['text':' CR/LF/TAB/NUL ','line_number':347,'multiline':True]['text':' if(SD0<=b && b<=SD7) ','line_number':359,'multiline':True]['text':' SQ0<=b && ','line_number':363,'multiline':True]['text':' Srs ','line_number':374,'multiline':True]['text':' callback(illegal) ','line_number':375,'multiline':True]['text':' store the first byte of a multibyte sequence in toUBytes[] ','line_number':382,'multiline':True]['text':' all static offsets are in the BMP ','line_number':402,'multiline':True]['text':' write from dynamic window ','line_number':408,'multiline':True]['text':' output surrogate pair ','line_number':416,'multiline':True]['text':' target overflow ','line_number':425,'multiline':True]['text':' callback(illegal): Reserved window offset value 0 ','line_number':453,'multiline':True]['text':' callback(illegal): Reserved window offset value 0xa8..0xf8 ','line_number':464,'multiline':True]['text':' fast path for Unicode mode ','line_number':475,'multiline':True]['text':' normal state machine for Unicode mode ','line_number':489,'multiline':True]['text':' unicodeByteMode: ','line_number':490,'multiline':True]['text':' target is full ','line_number':493,'multiline':True]['text':' UC0<=b && ','line_number':506,'multiline':True]['text':' UD0<=b && ','line_number':511,'multiline':True]['text':' Urs ','line_number':528,'multiline':True]['text':' callback(illegal) ','line_number':529,'multiline':True]['text':' set the converter state back into UConverter ','line_number':555,'multiline':True]['text':' reset to deal with the next character ','line_number':557,'multiline':True]['text':' not in a multi-byte sequence, reset toULength ','line_number':560,'multiline':True]['text':' write back the updated pointers ','line_number':569,'multiline':True]['text':'
 * Identical to _SCSUToUnicodeWithOffsets but without offset handling.
 * If a change is made in the original function, then either
 * change this function the same way or
 * re-copy the original function and remove the variables
 * offsets, sourceIndex, and nextSourceIndex.
 ','line_number':576,'multiline':True]['text':' set up the local pointers ','line_number':597,'multiline':True]['text':' get the state machine state ','line_number':606,'multiline':True]['text':'
     * conversion "loop"
     *
     * For performance, this is not a normal C loop.
     * Instead, there are two code blocks for the two SCSU modes.
     * The function branches to either one, and a change of the mode is done with a goto to
     * the other branch.
     *
     * Each branch has two conventional loops:
     * - a fast-path loop for the most common codes in the mode
     * - a loop for all other codes in the mode
     * When the fast-path runs into a code that it cannot handle, its loop ends and it
     * runs into the following loop to handle the other codes.
     * The end of the input or output buffer is also handled by the slower loop.
     * The slow loop jumps (goto) to the fast-path loop again as soon as possible.
     *
     * The callback handling is done by returning with an error code.
     * The conversion framework actually calls the callback function.
     ','line_number':613,'multiline':True]['text':' fast path for single-byte mode ','line_number':633,'multiline':True]['text':' write US-ASCII graphic character or DEL ','line_number':639,'multiline':True]['text':' write from dynamic window ','line_number':642,'multiline':True]['text':' output surrogate pair ','line_number':647,'multiline':True]['text':' target overflow ','line_number':652,'multiline':True]['text':' normal state machine for single-byte mode, minus handling for what fastSingle covers ','line_number':663,'multiline':True]['text':' target is full ','line_number':667,'multiline':True]['text':' redundant conditions are commented out ','line_number':674,'multiline':True]['text':' here: b<0x20 because otherwise we would be in fastSingle ','line_number':675,'multiline':True]['text':' binary 0010 0110 0000 0001, check for b==0xd || b==0xa || b==9 || b==0 ','line_number':676,'multiline':True]['text':' CR/LF/TAB/NUL ','line_number':677,'multiline':True]['text':' if(SD0<=b && b<=SD7) ','line_number':684,'multiline':True]['text':' SQ0<=b && ','line_number':688,'multiline':True]['text':' Srs ','line_number':698,'multiline':True]['text':' callback(illegal) ','line_number':699,'multiline':True]['text':' store the first byte of a multibyte sequence in toUBytes[] ','line_number':706,'multiline':True]['text':' all static offsets are in the BMP ','line_number':722,'multiline':True]['text':' write from dynamic window ','line_number':725,'multiline':True]['text':' output surrogate pair ','line_number':730,'multiline':True]['text':' target overflow ','line_number':735,'multiline':True]['text':' callback(illegal): Reserved window offset value 0 ','line_number':758,'multiline':True]['text':' callback(illegal): Reserved window offset value 0xa8..0xf8 ','line_number':769,'multiline':True]['text':' fast path for Unicode mode ','line_number':779,'multiline':True]['text':' normal state machine for Unicode mode ','line_number':788,'multiline':True]['text':' unicodeByteMode: ','line_number':789,'multiline':True]['text':' target is full ','line_number':792,'multiline':True]['text':' UC0<=b && ','line_number':804,'multiline':True]['text':' UD0<=b && ','line_number':808,'multiline':True]['text':' Urs ','line_number':825,'multiline':True]['text':' callback(illegal) ','line_number':826,'multiline':True]['text':' set the converter state back into UConverter ','line_number':848,'multiline':True]['text':' reset to deal with the next character ','line_number':850,'multiline':True]['text':' not in a multi-byte sequence, reset toULength ','line_number':853,'multiline':True]['text':' write back the updated pointers ','line_number':862,'multiline':True]['text':' SCSU-from-Unicode conversion functions ----------------------------------- ','line_number':868,'multiline':True]['text':'
 * This SCSU Encoder is fairly simple but uses all SCSU commands to achieve
 * reasonable results. The lookahead is minimal.
 * Many cases are simple:
 * A character fits directly into the current mode, a dynamic or static window,
 * or is not compressible. These cases are tested first.
 * Real compression heuristics are applied to the rest, in code branches for
 * single/Unicode mode and BMP/supplementary code points.
 * The heuristics used here are extremely simple.
 ','line_number':870,'multiline':True]['text':' get the number of the window that this character is in, or -1 ','line_number':881,'multiline':True]['text':' is the character in the dynamic window starting at the offset, or in the direct-encoded range? ','line_number':893,'multiline':True]['text':' binary 0010 0110 0000 0001,
                                   check for b==0xd || b==0xa || b==9 || b==0 ','line_number':899,'multiline':True]['text':'
 * getNextDynamicWindow returns the next dynamic window to be redefined
 ','line_number':903,'multiline':True]['text':'
 * useDynamicWindow() adjusts
 * windowUse[] and nextWindowUseIndex for the algorithm to choose
 * the next dynamic window to be defined;
 * a subclass may override it and provide its own algorithm.
 ','line_number':915,'multiline':True]['text':'
     * move the existing window, which just became the most recently used one,
     * up in windowUse[] to nextWindowUseIndex-1
     ','line_number':923,'multiline':True]['text':' first, find the index of the window - backwards to favor the more recently used windows ','line_number':928,'multiline':True]['text':' now copy each windowUse[i+1] to [i] ','line_number':938,'multiline':True]['text':' finally, set the window into the most recently used index ','line_number':949,'multiline':True]['text':'
 * calculate the offset and the code for a dynamic window that contains the character
 * takes fixed offsets into account
 * the offset of the window is stored in the offset variable,
 * the code is returned
 *
 * return offset code: -1 none  <=0xff code for SDn/UDn  else code for SDX/UDX, subtract 0x200 to get the true code
 ','line_number':953,'multiline':True]['text':' No dynamic window for US-ASCII. ','line_number':973,'multiline':True]['text':' This character is in a code range for a "small", i.e., reasonably windowable, script. ','line_number':979,'multiline':True]['text':' For these characters we need to take the gapOffset into account. ','line_number':983,'multiline':True]['text':'
 * Idea for compression:
 *  - save SCSUData and other state before really starting work
 *  - at endloop, see if compression could be better with just unicode mode
 *  - don't do this if a callback has been called
 *  - if unicode mode would be smaller, then override the results with it - may need SCU at the beginning
 *  - different buffer handling!
 *
 * Drawback or need for corrective handling:
 * it is desirable to encode U+feff as SQU fe ff for the SCSU signature, and
 * it is desirable to start a document in US-ASCII/Latin-1 for as long as possible
 * not only for compression but also for HTML/XML documents with following charset/encoding announcers.
 *
 * How to achieve both?
 *  - Only replace the result after an SDX or SCU?
 ','line_number':991,'multiline':True]['text':' variables for compression heuristics ','line_number':1028,'multiline':True]['text':' set up the local pointers ','line_number':1034,'multiline':True]['text':' set up the local pointers ','line_number':1038,'multiline':True]['text':' get the state machine state ','line_number':1045,'multiline':True]['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':1052,'multiline':True]['text':' similar conversion "loop" as in toUnicode ','line_number':1056,'multiline':True]['text':' state machine for single-byte mode ','line_number':1063,'multiline':True]['text':' singleByteMode: ','line_number':1064,'multiline':True]['text':' target is full ','line_number':1067,'multiline':True]['text':' pass US-ASCII graphic character through ','line_number':1075,'multiline':True]['text':' binary 0010 0110 0000 0001, check for b==0xd || b==0xa || b==9 || b==0 ','line_number':1082,'multiline':True]['text':' CR/LF/TAB/NUL ','line_number':1083,'multiline':True]['text':' quote C0 control character ','line_number':1090,'multiline':True]['text':' use the current dynamic window ','line_number':1096,'multiline':True]['text':' test the following code unit ','line_number':1107,'multiline':True]['text':' convert this surrogate code point ','line_number':1113,'multiline':True]['text':' exit this condition tree ','line_number':1114,'multiline':True]['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':1116,'multiline':True]['text':' callback(illegal) ','line_number':1117,'multiline':True]['text':' no more input ','line_number':1122,'multiline':True]['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':1126,'multiline':True]['text':' callback(illegal) ','line_number':1127,'multiline':True]['text':' compress supplementary character U+10000..U+10ffff ','line_number':1132,'multiline':True]['text':' use the current dynamic window ','line_number':1134,'multiline':True]['text':' there is a dynamic window that contains this character, change to it ','line_number':1141,'multiline':True]['text':' might check if there are more characters in this window to come ','line_number':1149,'multiline':True]['text':' define an extended window with this character ','line_number':1150,'multiline':True]['text':' change to Unicode mode and output this (lead, trail) pair ','line_number':1159,'multiline':True]['text':' quote C1 control character ','line_number':1171,'multiline':True]['text':' SQ0+1==SQ1 ','line_number':1172,'multiline':True]['text':' quote signature character=byte order mark and specials ','line_number':1176,'multiline':True]['text':' compress all other BMP characters ','line_number':1181,'multiline':True]['text':' there is a window defined that contains this character - switch to it or quote from it? ','line_number':1183,'multiline':True]['text':' change to dynamic window ','line_number':1185,'multiline':True]['text':' quote from dynamic window ','line_number':1193,'multiline':True]['text':' quote from static window ','line_number':1199,'multiline':True]['text':' define a dynamic window with this character ','line_number':1204,'multiline':True]['text':'
                     * this character is not compressible (a BMP ideograph or similar);
                     * switch to Unicode mode if this is the last character in the block
                     * or there is at least one more ideograph following immediately
                     ','line_number':1214,'multiline':True]['text':' quote Unicode ','line_number':1224,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1231,'multiline':True]['text':' state machine for Unicode mode ','line_number':1240,'multiline':True]['text':' unicodeByteMode: ','line_number':1241,'multiline':True]['text':' target is full ','line_number':1244,'multiline':True]['text':' not compressible, write character directly ','line_number':1252,'multiline':True]['text':' c<0x3400 || c>=0xf300 ','line_number':1265,'multiline':True]['text':' compress BMP character if the following one is not an uncompressible ideograph ','line_number':1266,'multiline':True]['text':' ASCII digit or letter ','line_number':1269,'multiline':True]['text':' there is a dynamic window that contains this character, change to it ','line_number':1275,'multiline':True]['text':' define a dynamic window with this character ','line_number':1284,'multiline':True]['text':' don't know how to compress this character, just write it directly ','line_number':1295,'multiline':True]['text':' c is a surrogate ','line_number':1299,'multiline':True]['text':' test the following code unit ','line_number':1304,'multiline':True]['text':' convert this surrogate code point ','line_number':1310,'multiline':True]['text':' exit this condition tree ','line_number':1311,'multiline':True]['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':1313,'multiline':True]['text':' callback(illegal) ','line_number':1314,'multiline':True]['text':' no more input ','line_number':1319,'multiline':True]['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':1323,'multiline':True]['text':' callback(illegal) ','line_number':1324,'multiline':True]['text':' compress supplementary character ','line_number':1329,'multiline':True]['text':'
                     * there is a dynamic window that contains this character and
                     * the following character is not uncompressible,
                     * change to the window
                     ','line_number':1333,'multiline':True]['text':' too lazy to check trail in same window as source[1] ','line_number':1345,'multiline':True]['text':' two supplementary characters in (probably) the same window - define an extended one ','line_number':1348,'multiline':True]['text':' don't know how to compress this character, just write it directly ','line_number':1358,'multiline':True]['text':' 0xe000<=c<0xf300 ','line_number':1363,'multiline':True]['text':' quote to avoid SCSU tags ','line_number':1364,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1370,'multiline':True]['text':' set the converter state back into UConverter ','line_number':1377,'multiline':True]['text':' write back the updated pointers ','line_number':1383,'multiline':True]['text':' write the output character bytes from c and length [code copied from ucnvmbcs.c] ','line_number':1390,'multiline':True]['text':' from the first if in the loop we know that targetCapacity>0 ','line_number':1391,'multiline':True]['text':' each branch falls through to the next one ','line_number':1395,'multiline':True]['text':' will never occur ','line_number':1409,'multiline':True]['text':' each branch falls through to the next one ','line_number':1414,'multiline':True]['text':' will never occur ','line_number':1432,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1438,'multiline':True]['text':'
         * We actually do this backwards here:
         * In order to save an intermediate variable, we output
         * first to the overflow buffer what does not fit into the
         * regular target.
         ','line_number':1445,'multiline':True]['text':' we know that 0<=targetCapacity<length<=4 ','line_number':1451,'multiline':True]['text':' targetCapacity==0 when SCU+supplementary where SCU used up targetCapacity==1 ','line_number':1452,'multiline':True]['text':' each branch falls through to the next one ','line_number':1456,'multiline':True]['text':' will never occur ','line_number':1470,'multiline':True]['text':' now output what fits into the regular target ','line_number':1475,'multiline':True]['text':' length was reduced by targetCapacity ','line_number':1476,'multiline':True]['text':' each branch falls through to the next one ','line_number':1478,'multiline':True]['text':' target overflow ','line_number':1501,'multiline':True]['text':'
 * Identical to _SCSUFromUnicodeWithOffsets but without offset handling.
 * If a change is made in the original function, then either
 * change this function the same way or
 * re-copy the original function and remove the variables
 * offsets, sourceIndex, and nextSourceIndex.
 ','line_number':1509,'multiline':True]['text':' variables for compression heuristics ','line_number':1533,'multiline':True]['text':' set up the local pointers ','line_number':1539,'multiline':True]['text':' set up the local pointers ','line_number':1543,'multiline':True]['text':' get the state machine state ','line_number':1549,'multiline':True]['text':' similar conversion "loop" as in toUnicode ','line_number':1556,'multiline':True]['text':' state machine for single-byte mode ','line_number':1563,'multiline':True]['text':' singleByteMode: ','line_number':1564,'multiline':True]['text':' target is full ','line_number':1567,'multiline':True]['text':' pass US-ASCII graphic character through ','line_number':1574,'multiline':True]['text':' binary 0010 0110 0000 0001, check for b==0xd || b==0xa || b==9 || b==0 ','line_number':1578,'multiline':True]['text':' CR/LF/TAB/NUL ','line_number':1579,'multiline':True]['text':' quote C0 control character ','line_number':1583,'multiline':True]['text':' use the current dynamic window ','line_number':1589,'multiline':True]['text':' test the following code unit ','line_number':1597,'multiline':True]['text':' convert this surrogate code point ','line_number':1602,'multiline':True]['text':' exit this condition tree ','line_number':1603,'multiline':True]['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':1605,'multiline':True]['text':' callback(illegal) ','line_number':1606,'multiline':True]['text':' no more input ','line_number':1611,'multiline':True]['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':1615,'multiline':True]['text':' callback(illegal) ','line_number':1616,'multiline':True]['text':' compress supplementary character U+10000..U+10ffff ','line_number':1621,'multiline':True]['text':' use the current dynamic window ','line_number':1623,'multiline':True]['text':' there is a dynamic window that contains this character, change to it ','line_number':1627,'multiline':True]['text':' might check if there are more characters in this window to come ','line_number':1635,'multiline':True]['text':' define an extended window with this character ','line_number':1636,'multiline':True]['text':' change to Unicode mode and output this (lead, trail) pair ','line_number':1645,'multiline':True]['text':' quote C1 control character ','line_number':1654,'multiline':True]['text':' SQ0+1==SQ1 ','line_number':1655,'multiline':True]['text':' quote signature character=byte order mark and specials ','line_number':1659,'multiline':True]['text':' compress all other BMP characters ','line_number':1664,'multiline':True]['text':' there is a window defined that contains this character - switch to it or quote from it? ','line_number':1666,'multiline':True]['text':' change to dynamic window ','line_number':1668,'multiline':True]['text':' quote from dynamic window ','line_number':1676,'multiline':True]['text':' quote from static window ','line_number':1682,'multiline':True]['text':' define a dynamic window with this character ','line_number':1687,'multiline':True]['text':'
                     * this character is not compressible (a BMP ideograph or similar);
                     * switch to Unicode mode if this is the last character in the block
                     * or there is at least one more ideograph following immediately
                     ','line_number':1697,'multiline':True]['text':' quote Unicode ','line_number':1707,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1714,'multiline':True]['text':' state machine for Unicode mode ','line_number':1722,'multiline':True]['text':' unicodeByteMode: ','line_number':1723,'multiline':True]['text':' target is full ','line_number':1726,'multiline':True]['text':' not compressible, write character directly ','line_number':1733,'multiline':True]['text':' c<0x3400 || c>=0xf300 ','line_number':1742,'multiline':True]['text':' compress BMP character if the following one is not an uncompressible ideograph ','line_number':1743,'multiline':True]['text':' ASCII digit or letter ','line_number':1746,'multiline':True]['text':' there is a dynamic window that contains this character, change to it ','line_number':1752,'multiline':True]['text':' define a dynamic window with this character ','line_number':1761,'multiline':True]['text':' don't know how to compress this character, just write it directly ','line_number':1772,'multiline':True]['text':' c is a surrogate ','line_number':1776,'multiline':True]['text':' test the following code unit ','line_number':1781,'multiline':True]['text':' convert this surrogate code point ','line_number':1786,'multiline':True]['text':' exit this condition tree ','line_number':1787,'multiline':True]['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':1789,'multiline':True]['text':' callback(illegal) ','line_number':1790,'multiline':True]['text':' no more input ','line_number':1795,'multiline':True]['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':1799,'multiline':True]['text':' callback(illegal) ','line_number':1800,'multiline':True]['text':' compress supplementary character ','line_number':1805,'multiline':True]['text':'
                     * there is a dynamic window that contains this character and
                     * the following character is not uncompressible,
                     * change to the window
                     ','line_number':1809,'multiline':True]['text':' too lazy to check trail in same window as source[1] ','line_number':1821,'multiline':True]['text':' two supplementary characters in (probably) the same window - define an extended one ','line_number':1824,'multiline':True]['text':' don't know how to compress this character, just write it directly ','line_number':1834,'multiline':True]['text':' 0xe000<=c<0xf300 ','line_number':1839,'multiline':True]['text':' quote to avoid SCSU tags ','line_number':1840,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1846,'multiline':True]['text':' set the converter state back into UConverter ','line_number':1852,'multiline':True]['text':' write back the updated pointers ','line_number':1858,'multiline':True]['text':' write the output character bytes from c and length [code copied from ucnvmbcs.c] ','line_number':1864,'multiline':True]['text':' from the first if in the loop we know that targetCapacity>0 ','line_number':1865,'multiline':True]['text':' each branch falls through to the next one ','line_number':1868,'multiline':True]['text':' will never occur ','line_number':1882,'multiline':True]['text':' normal end of conversion: prepare for a new character ','line_number':1887,'multiline':True]['text':'
         * We actually do this backwards here:
         * In order to save an intermediate variable, we output
         * first to the overflow buffer what does not fit into the
         * regular target.
         ','line_number':1893,'multiline':True]['text':' we know that 0<=targetCapacity<length<=4 ','line_number':1899,'multiline':True]['text':' targetCapacity==0 when SCU+supplementary where SCU used up targetCapacity==1 ','line_number':1900,'multiline':True]['text':' each branch falls through to the next one ','line_number':1904,'multiline':True]['text':' will never occur ','line_number':1918,'multiline':True]['text':' now output what fits into the regular target ','line_number':1923,'multiline':True]['text':' length was reduced by targetCapacity ','line_number':1924,'multiline':True]['text':' each branch falls through to the next one ','line_number':1926,'multiline':True]['text':' target overflow ','line_number':1940,'multiline':True]['text':' miscellaneous ------------------------------------------------------------ ','line_number':1948,'multiline':True]['text':' structure for SafeClone calculations ','line_number':1962,'multiline':True]['text':' 'preflighting' request - set needed size into *pBufferSize ','line_number':1982,'multiline':True]['text':' ucnv.c/ucnv_safeClone() copied the main UConverter already ','line_number':1988,'multiline':True]['text':' CCSID for SCSU ','line_number':2024,'multiline':True]['text':' one UChar generates at least 1 byte and at most 3 bytes ','line_number':2026,'multiline':True]['text':'
     * The subchar here is ignored because _SCSUOpen() sets U+fffd as a Unicode
     * substitution string.
     ','line_number':2027,'multiline':True]['text':' reserved ','line_number':2035,'multiline':True]