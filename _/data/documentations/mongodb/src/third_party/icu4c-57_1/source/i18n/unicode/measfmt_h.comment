['text':'
**********************************************************************
* Copyright (c) 2004-2016, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
* Author: Alan Liu
* Created: April 20, 2004
* Since: ICU 3.0
**********************************************************************
','line_number':1,'multiline':True]['text':'*
 * \file 
 * \brief C++ API: Formatter for measure objects.
 ','line_number':21,'multiline':True]['text':'*
 * Constants for various widths.
 * There are 4 widths: Wide, Short, Narrow, Numeric.
 * For example, for English, when formatting "3 hours"
 * Wide is "3 hours"; short is "3 hrs"; narrow is "3h";
 * formatting "3 hours 17 minutes" as numeric give "3:17"
 * @stable ICU 53
 ','line_number':26,'multiline':True]['text':' Wide, short, and narrow must be first and in this order.','line_number':36,'multiline':False]['text':'*
     * Spell out measure units.
     * @stable ICU 53 
     ','line_number':37,'multiline':True]['text':'*
     * Abbreviate measure units.
     * @stable ICU 53
     ','line_number':43,'multiline':True]['text':'*
     * Use symbols for measure units when possible.
     * @stable ICU 53
     ','line_number':49,'multiline':True]['text':'*
     * Completely omit measure units when possible. For example, format
     * '5 hours, 37 minutes' as '5:37'
     * @stable ICU 53
     ','line_number':55,'multiline':True]['text':'*
     * Count of values in this enum.
     * @stable ICU 53
     ','line_number':62,'multiline':True]['text':'* @stable ICU 53 ','line_number':68,'multiline':True]['text':'*
 * 
 * A formatter for measure objects.
 *
 * @see Format
 * @author Alan Liu
 * @stable ICU 3.0
 ','line_number':85,'multiline':True]['text':'*
     * Constructor.
     * @stable ICU 53
     ','line_number':98,'multiline':True]['text':'*
     * Constructor.
     * @stable ICU 53
     ','line_number':105,'multiline':True]['text':'*
     * Copy constructor.
     * @stable ICU 3.0
     ','line_number':115,'multiline':True]['text':'*
     * Assignment operator.
     * @stable ICU 3.0
     ','line_number':121,'multiline':True]['text':'*
     * Destructor.
     * @stable ICU 3.0
     ','line_number':127,'multiline':True]['text':'*
     * Return true if given Format objects are semantically equal.
     * @stable ICU 53
     ','line_number':133,'multiline':True]['text':'*
     * Clones this object polymorphically.
     * @stable ICU 53
     ','line_number':139,'multiline':True]['text':'*
     * Formats object to produce a string.
     * @stable ICU 53
     ','line_number':145,'multiline':True]['text':'*
     * Parse a string to produce an object. This implementation sets
     * status to U_UNSUPPORTED_ERROR.
     *
     * @draft ICU 53
     ','line_number':155,'multiline':True]['text':'*
     * Formats measure objects to produce a string. An example of such a
     * formatted string is 3 meters, 3.5 centimeters. Measure objects appear
     * in the formatted string in the same order they appear in the "measures"
     * array. The NumberFormat of this object is used only to format the amount
     * of the very last measure. The other amounts are formatted with zero
     * decimal places while rounding toward zero.
     * @param measures array of measure objects.
     * @param measureCount the number of measure objects.
     * @param appendTo formatted string appended here.
     * @param pos the field position.
     * @param status the error.
     * @return appendTo reference
     *
     * @stable ICU 53
     ','line_number':166,'multiline':True]['text':'*
     * Formats a single measure per unit. An example of such a
     * formatted string is 3.5 meters per second.
     * @param measure The measure object. In above example, 3.5 meters.
     * @param perUnit The per unit. In above example, it is
     *        *MeasureUnit::createSecond(status).
     * @param appendTo formatted string appended here.
     * @param pos the field position.
     * @param status the error.
     * @return appendTo reference
     *
     * @stable ICU 55
     ','line_number':189,'multiline':True]['text':'*
     * Return a formatter for CurrencyAmount objects in the given
     * locale.
     * @param locale desired locale
     * @param ec input-output error code
     * @return a formatter object, or NULL upon error
     * @stable ICU 3.0
     ','line_number':210,'multiline':True]['text':'*
     * Return a formatter for CurrencyAmount objects in the default
     * locale.
     * @param ec input-output error code
     * @return a formatter object, or NULL upon error
     * @stable ICU 3.0
     ','line_number':221,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to
     * a return value from getDynamicClassID(). For example:
     * <pre>
     * .   Base* polymorphic_pointer = createPolymorphicObject();
     * .   if (polymorphic_pointer->getDynamicClassID() ==
     * .       erived::getStaticClassID()) ...
     * </pre>
     * @return          The class ID for all objects of this class.
     * @stable ICU 53
     ','line_number':230,'multiline':True]['text':'*
     * Returns a unique class ID POLYMORPHICALLY. Pure virtual override. This
     * method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone()
     * methods call this method.
     *
     * @return          The class ID for this object. All objects of a
     *                  given class have the same class ID.  Objects of
     *                  other classes have different class IDs.
     * @stable ICU 53
     ','line_number':243,'multiline':True]['text':'*
     * Default constructor.
     * @stable ICU 3.0
     ','line_number':257,'multiline':True]['text':'*
     * ICU use only.
     * Initialize or change MeasureFormat class from subclass.
     * @internal.
     ','line_number':265,'multiline':True]['text':'*
     * ICU use only.
     * Allows subclass to change locale. Note that this method also changes
     * the NumberFormat object. Returns TRUE if locale changed; FALSE if no
     * change was made.
     * @internal.
     ','line_number':275,'multiline':True]['text':'*
     * ICU use only.
     * Let subclass change NumberFormat.
     * @internal.
     ','line_number':284,'multiline':True]['text':'*
     * ICU use only.
     * @internal.
     ','line_number':291,'multiline':True]['text':'*
     * ICU use only.
     * @internal.
     ','line_number':297,'multiline':True]['text':'*
     * ICU use only.
     * @internal.
     ','line_number':303,'multiline':True]['text':'*
     * ICU use only.
     * @internal.
     ','line_number':309,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':315,'multiline':True]['text':' Declared outside of MeasureFormatSharedData because ListFormatter','line_number':323,'multiline':False]['text':' objects are relatively cheap to copy; therefore, they don't need to be','line_number':324,'multiline':False]['text':' shared across instances.','line_number':325,'multiline':False]['text':' always length 3: [0] is hour; [1] is','line_number':364,'multiline':False]['text':' minute; [2] is second.','line_number':365,'multiline':False]['text':' 1=hour set, 2=minute set, 4=second set','line_number':366,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING','line_number':381,'multiline':False]['text':' #ifndef MEASUREFORMAT_H','line_number':382,'multiline':False]