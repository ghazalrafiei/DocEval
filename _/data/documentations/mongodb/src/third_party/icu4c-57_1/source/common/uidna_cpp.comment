['text':'
 *******************************************************************************
 *
 *   Copyright (C) 2003-2014, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *
 *******************************************************************************
 *   file name:  uidna.cpp
 *   encoding:   US-ASCII
 *   tab size:   8 (not used)
 *   indentation:4
 *
 *   created on: 2003feb1
 *   created by: Ram Viswanadha
 ','line_number':1,'multiline':True]['text':' it is official IDNA ACE Prefix is "xn--" ','line_number':30,'multiline':True]['text':' The Max length of the labels should not be more than MAX_LABEL_LENGTH ','line_number':35,'multiline':True]['text':' The Max length of the domain names should not be more than MAX_DOMAIN_NAME_LENGTH ','line_number':39,'multiline':True]['text':' are we comparing different lengths?','line_number':80,'multiline':False]['text':' ok the lengths are equal','line_number':90,'multiline':False]['text':' no condition ','line_number':98,'multiline':True]['text':' If we reach the ends of both strings then they match ','line_number':100,'multiline':True]['text':' Case-insensitive comparison ','line_number':108,'multiline':True]['text':'*
 * Ascertain if the given code point is a label separator as 
 * defined by the IDNA RFC
 * 
 * @param ch The code point to be ascertained
 * @return true if the char is a label separator
 * @stable ICU 2.8
 ','line_number':121,'multiline':True]['text':' returns the length of the label excluding the separator','line_number':141,'multiline':False]['text':' if *limit == separator then the length returned does not include ','line_number':142,'multiline':False]['text':' the separtor.','line_number':143,'multiline':False]['text':' point to null','line_number':151,'multiline':False]['text':' go past the delimiter','line_number':156,'multiline':False]['text':' go past the delimiter','line_number':165,'multiline':False]['text':' we have not found the delimiter','line_number':169,'multiline':False]['text':' if(i==srcLength)','line_number':170,'multiline':False]['text':' high runner case','line_number':178,'multiline':False]['text':'[\\u002D \\u0030-\\u0039 \\u0041-\\u005A \\u0061-\\u007A]','line_number':182,'multiline':False]['text':' TODO Revisit buffer handling. The label should not be over 63 ASCII characters. ICU4J may need to be updated too.','line_number':202,'multiline':False]['text':'initialize pointers to stack buffers','line_number':204,'multiline':False]['text':' the source contains all ascii codepoints','line_number':214,'multiline':False]['text':' assume the source contains all LDH codepoints','line_number':216,'multiline':False]['text':'get the options','line_number':221,'multiline':False]['text':' step 1 ','line_number':239,'multiline':False]['text':' step 2 is performed only if the source contains non ASCII','line_number':247,'multiline':False]['text':' step 2    ','line_number':250,'multiline':False]['text':' redo processing of string','line_number':254,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':255,'multiline':False]['text':' reset error','line_number':265,'multiline':False]['text':' error bail out','line_number':270,'multiline':False]['text':' for step 3 & 4','line_number':279,'multiline':False]['text':' check if output of usprep_prepare is all ASCII ','line_number':282,'multiline':False]['text':' if the char is in ASCII range verify that it is an LDH character','line_number':285,'multiline':False]['text':' verify 3a and 3b','line_number':291,'multiline':False]['text':' 3(a) Verify the absence of non-LDH ASCII code points; that is, the','line_number':292,'multiline':False]['text':'  absence of 0..2C, 2E..2F, 3A..40, 5B..60, and 7B..7F.','line_number':293,'multiline':False]['text':' 3(b) Verify the absence of leading and trailing hyphen-minus; that','line_number':294,'multiline':False]['text':'  is, the absence of U+002D at the beginning and end of the','line_number':295,'multiline':False]['text':'  sequence.','line_number':296,'multiline':False]['text':' source at this point should not contain anyLDH characters ','line_number':297,'multiline':True]['text':' populate the parseError struct ','line_number':301,'multiline':True]['text':' failPos is always set the index of failure','line_number':303,'multiline':False]['text':' fail position is 0 ','line_number':306,'multiline':False]['text':' the last index in the source is always length-1','line_number':309,'multiline':False]['text':' Step 4: if the source is ASCII then proceed to step 8','line_number':316,'multiline':False]['text':' step 5 : verify the sequence does not begin with ACE prefix','line_number':326,'multiline':False]['text':'step 6: encode the sequence with punycode','line_number':329,'multiline':False]['text':' do not preserve the case flags for now!','line_number':331,'multiline':False]['text':' TODO: Preserve the case while implementing the RFE','line_number':332,'multiline':False]['text':' caseFlags = (UBool*) uprv_malloc(b1Len * sizeof(UBool));','line_number':333,'multiline':False]['text':' uprv_memset(caseFlags,TRUE,b1Len);','line_number':334,'multiline':False]['text':' redo processing of string','line_number':339,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':340,'multiline':True]['text':' reset error','line_number':347,'multiline':False]['text':'error bail out','line_number':351,'multiline':False]['text':' TODO : Reconsider while implementing the case preserve RFE','line_number':355,'multiline':False]['text':' convert all codepoints to lower case ASCII','line_number':356,'multiline':False]['text':' toASCIILower(b2,b2Len);','line_number':357,'multiline':False]['text':'Step 7: prepend the ACE prefix','line_number':364,'multiline':False]['text':'Step 6: copy the contents in b2 into dest','line_number':366,'multiline':False]['text':'position of failure is 0','line_number':371,'multiline':False]['text':' step 8: verify the length of label','line_number':376,'multiline':False]['text':'get the options','line_number':402,'multiline':False]['text':'UBool useSTD3ASCIIRules = (UBool)((options & UIDNA_USE_STD3_RULES) != 0);','line_number':403,'multiline':False]['text':' TODO Revisit buffer handling. The label should not be over 63 ASCII characters. ICU4J may need to be updated too.','line_number':406,'multiline':False]['text':'initialize pointers to stack buffers','line_number':409,'multiline':False]['text':'UBool srcIsLDH = TRUE;
    int32_t failPos =0;','line_number':420,'multiline':True]['text':' step 1: find out if all the codepoints in src are ASCII  ','line_number':423,'multiline':False]['text':'else if(isLDHChar(src[srcLength])==FALSE){
                // here we do not assemble surrogates
                // since we know that LDH code points
                // are in the ASCII range only
                srcIsLDH = FALSE;
                failPos = srcLength;
            }','line_number':429,'multiline':True]['text':'else if(isLDHChar(src[j])==FALSE){
                // here we do not assemble surrogates
                // since we know that LDH code points
                // are in the ASCII range only
                srcIsLDH = FALSE;
                failPos = j;
            }','line_number':442,'multiline':True]['text':' step 2: process the string','line_number':455,'multiline':False]['text':' redo processing of string','line_number':458,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':459,'multiline':True]['text':' reset error','line_number':466,'multiline':False]['text':'bail out on error','line_number':470,'multiline':False]['text':'just point src to b1','line_number':476,'multiline':False]['text':' The RFC states that ','line_number':481,'multiline':False]['text':' <quote>','line_number':482,'multiline':False]['text':' ToUnicode never fails. If any step fails, then the original input','line_number':483,'multiline':False]['text':' is returned immediately in that step.','line_number':484,'multiline':False]['text':' </quote>','line_number':485,'multiline':False]['text':'step 3: verify ACE Prefix','line_number':487,'multiline':False]['text':'step 4: Remove the ACE Prefix','line_number':490,'multiline':False]['text':'step 5: Decode using punycode','line_number':494,'multiline':False]['text':' redo processing of string','line_number':498,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':499,'multiline':True]['text':' reset error','line_number':506,'multiline':False]['text':'step 6:Apply toASCII','line_number':512,'multiline':False]['text':' redo processing of string','line_number':516,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':517,'multiline':True]['text':' reset error','line_number':524,'multiline':False]['text':'bail out on error','line_number':529,'multiline':False]['text':'step 7: verify','line_number':534,'multiline':False]['text':' Cause the original to be returned.','line_number':536,'multiline':False]['text':'step 8: return output of step 5','line_number':541,'multiline':False]['text':' See the start of this if statement for why this is commented out.','line_number':548,'multiline':False]['text':' verify that STD3 ASCII rules are satisfied','line_number':549,'multiline':False]['text':'if(useSTD3ASCIIRules == TRUE){
            if( srcIsLDH == FALSE // source contains some non-LDH characters
                || src[0] ==  HYPHEN || src[srcLength-1] == HYPHEN){
                *status = U_IDNA_STD3_ASCII_RULES_ERROR;

                // populate the parseError struct
                if(srcIsLDH==FALSE){
                    // failPos is always set the index of failure
                    uprv_syntaxError(src,failPos, srcLength,parseError);
                }else if(src[0] == HYPHEN){
                    // fail position is 0 
                    uprv_syntaxError(src,0,srcLength,parseError);
                }else{
                    // the last index in the source is always length-1
                    uprv_syntaxError(src, (srcLength>0) ? srcLength-1 : srcLength, srcLength,parseError);
                }

                goto CLEANUP;
            }
        }','line_number':550,'multiline':True]['text':' just return the source','line_number':570,'multiline':False]['text':'copy the source to destination','line_number':571,'multiline':False]['text':' The RFC states that ','line_number':589,'multiline':False]['text':' <quote>','line_number':590,'multiline':False]['text':' ToUnicode never fails. If any step fails, then the original input','line_number':591,'multiline':False]['text':' is returned immediately in that step.','line_number':592,'multiline':False]['text':' </quote>','line_number':593,'multiline':False]['text':' So if any step fails lets copy source to destination','line_number':594,'multiline':False]['text':'copy the source to destination','line_number':596,'multiline':False]['text':' srcLength should have already been set earlier.','line_number':598,'multiline':False]['text':' close the profile','line_number':632,'multiline':True]['text':'initialize pointers ','line_number':690,'multiline':False]['text':' make sure this is not a root label separator.','line_number':704,'multiline':False]['text':' reset error','line_number':713,'multiline':False]['text':' adjust the destination pointer','line_number':724,'multiline':False]['text':' should never occur','line_number':729,'multiline':False]['text':' add the label separator','line_number':737,'multiline':False]['text':'initialize pointers','line_number':783,'multiline':False]['text':' The RFC states that ','line_number':796,'multiline':False]['text':' <quote>','line_number':797,'multiline':False]['text':' ToUnicode never fails. If any step fails, then the original input','line_number':798,'multiline':False]['text':' is returned immediately in that step.','line_number':799,'multiline':False]['text':' </quote>','line_number':800,'multiline':False]['text':' _internal_toUnicode will copy the label.','line_number':801,'multiline':False]['text':'if(labelLen==0 && done==FALSE){ 
            *status = U_IDNA_ZERO_LENGTH_LABEL_ERROR;
            break;
        }','line_number':802,'multiline':True]['text':' reset error','line_number':813,'multiline':False]['text':' adjust the destination pointer','line_number':822,'multiline':False]['text':' should never occur','line_number':827,'multiline':False]['text':' add the label separator','line_number':835,'multiline':False]['text':' Unlike the ToASCII operation we don't normalize the label separators','line_number':836,'multiline':False]['text':' redo processing of string','line_number':878,'multiline':False]['text':' reset error','line_number':885,'multiline':False]['text':' redo processing of string','line_number':893,'multiline':False]['text':' reset error','line_number':900,'multiline':False]['text':' when toASCII is applied all label separators are replaced with FULL_STOP','line_number':905,'multiline':False]['text':' #if !UCONFIG_NO_IDNA ','line_number':920,'multiline':True]