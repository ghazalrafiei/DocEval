['text':'
*******************************************************************************
*
*   Copyright (C) 2008-2011, International Business Machines
*   Corporation, Google and others.  All Rights Reserved.
*
*******************************************************************************
','line_number':1,'multiline':True]['text':' Author : eldawy@google.com (Mohamed Eldawy)','line_number':9,'multiline':False]['text':' ucnvsel.cpp','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Purpose: To generate a list of encodings capable of handling','line_number':12,'multiline':False]['text':' a given Unicode text','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Started 09-April-2008','line_number':15,'multiline':False]['text':'*
 * \file
 *
 * This is an implementation of an encoding selector.
 * The goal is, given a unicode string, find the encodings
 * this string can be mapped to. To make processing faster
 * a trie is built when you call ucnvsel_open() that
 * stores all encodings a codepoint can map to
 ','line_number':17,'multiline':True]['text':' 16 bit trie containing offsets into pv','line_number':49,'multiline':False]['text':' table of bits!','line_number':50,'multiline':False]['text':' which encodings did user ask to use?','line_number':52,'multiline':False]['text':' set errorValue to all-ones','line_number':70,'multiline':False]['text':' empty set','line_number':86,'multiline':False]['text':' now iterate over intervals on set i!','line_number':97,'multiline':False]['text':' this will be reached for the converters that fill the set with','line_number':107,'multiline':False]['text':' strings. Those should be ignored by our system','line_number':108,'multiline':False]['text':' handle excluded encodings! Simply set their values to all 1's in the upvec','line_number':121,'multiline':False]['text':' alright. Now, let's put things in the same exact form you'd get when you','line_number':137,'multiline':False]['text':' unserialize things.','line_number':138,'multiline':False]['text':' number of uint32_t = rows * columns','line_number':141,'multiline':False]['text':' open a selector. If converterListSize is 0, build for all converters.
   If excludedCodePoints is NULL, don't exclude any codepoints ','line_number':145,'multiline':True]['text':' check if already failed','line_number':151,'multiline':False]['text':' ensure args make sense!','line_number':155,'multiline':False]['text':' allocate a new converter','line_number':161,'multiline':False]['text':' now we can call ucnvsel_close()','line_number':180,'multiline':False]['text':' make a backup copy of the list of converters','line_number':182,'multiline':False]['text':' 4-align the totalSize to 4-align the size of the serialized form','line_number':189,'multiline':False]['text':' close opened selector ','line_number':225,'multiline':True]['text':' dataFormat="CSel" ','line_number':252,'multiline':True]['text':' formatVersion ','line_number':253,'multiline':True]['text':' dataVersion ','line_number':254,'multiline':True]['text':' trie size in bytes','line_number':258,'multiline':False]['text':' number of uint32_t in the bit vectors','line_number':259,'multiline':False]['text':' number of encoding names','line_number':260,'multiline':False]['text':' number of encoding name bytes including padding','line_number':261,'multiline':False]['text':' bytes following the DataHeader','line_number':262,'multiline':False]['text':'
 * Serialized form of a UConverterSelector, formatVersion 1:
 *
 * The serialized form begins with a standard ICU DataHeader with a UDataInfo
 * as the template above.
 * This is followed by:
 *   int32_t indexes[UCNVSEL_INDEX_COUNT];          // see index entry constants above
 *   serialized UTrie2;                             // indexes[UCNVSEL_INDEX_TRIE_SIZE] bytes
 *   uint32_t pv[indexes[UCNVSEL_INDEX_PV_COUNT]];  // bit vectors
 *   char* encodingNames[indexes[UCNVSEL_INDEX_NAMES_LENGTH]];  // NUL-terminated strings + padding
 ','line_number':266,'multiline':True]['text':' serialize a selector ','line_number':278,'multiline':True]['text':' check if already failed','line_number':282,'multiline':False]['text':' ensure args make sense!','line_number':286,'multiline':False]['text':' add up the size of the serialized form','line_number':294,'multiline':False]['text':' ok, save!','line_number':326,'multiline':False]['text':'*
 * swap a selector into the desired Endianness and Asciiness of
 * the system. Just as FYI, selectors are always saved in the format
 * of the system that created them. They are only converted if used
 * on another system. In other words, selectors created on different
 * system can be different even if the params are identical (endianness
 * and Asciiness differences only)
 *
 * @param ds pointer to data swapper containing swapping info
 * @param inData pointer to incoming data
 * @param length length of inData in bytes
 * @param outData pointer to output data. Capacity should
 *                be at least equal to capacity of inData
 * @param status an in/out ICU UErrorCode
 * @return 0 on failure, number of bytes swapped on success
 *         number of bytes swapped can be smaller than length
 ','line_number':349,'multiline':True]['text':' udata_swapDataHeader checks the arguments ','line_number':370,'multiline':True]['text':' check data format and format version ','line_number':376,'multiline':True]['text':' dataFormat="CSel" ','line_number':379,'multiline':True]['text':' read the indexes ','line_number':410,'multiline':True]['text':' get the total length of the data ','line_number':418,'multiline':True]['text':' copy the data for inaccessible bytes ','line_number':428,'multiline':True]['text':' swap the int32_t indexes[] ','line_number':435,'multiline':True]['text':' swap the UTrie2 ','line_number':440,'multiline':True]['text':' swap the uint32_t pv[] ','line_number':445,'multiline':True]['text':' swap the encoding names ','line_number':450,'multiline':True]['text':' unserialize a selector ','line_number':461,'multiline':True]['text':' check if already failed','line_number':464,'multiline':False]['text':' ensure args make sense!','line_number':468,'multiline':False]['text':' header','line_number':476,'multiline':False]['text':' not even enough space for a minimal header','line_number':478,'multiline':False]['text':' header not valid or dataFormat not recognized ','line_number':491,'multiline':True]['text':' swap the data','line_number':503,'multiline':False]['text':' not even enough space for the header and the indexes','line_number':532,'multiline':False]['text':' indexes','line_number':539,'multiline':False]['text':' create and populate the selector object','line_number':547,'multiline':False]['text':' trie','line_number':565,'multiline':False]['text':' bit vectors','line_number':574,'multiline':False]['text':' encoding names','line_number':577,'multiline':False]['text':' a bunch of functions for the enumeration thingie! Nothing fancy here. Just','line_number':588,'multiline':False]['text':' iterate over the selected encodings','line_number':589,'multiline':False]['text':' check if already failed','line_number':609,'multiline':False]['text':' check if already failed','line_number':620,'multiline':False]['text':' check if already failed','line_number':642,'multiline':False]['text':' internal fn to intersect two sets of masks','line_number':663,'multiline':False]['text':' returns whether the mask has reduced to all zeros','line_number':664,'multiline':False]['text':' internal fn to count how many 1's are there in a mask','line_number':674,'multiline':False]['text':' algorithm taken from  http://graphics.stanford.edu/~seander/bithacks.html','line_number':675,'multiline':False]['text':' clear the least significant bit set','line_number':682,'multiline':False]['text':' internal function! ','line_number':689,'multiline':True]['text':' this is the context we will use. Store a table of indices to which','line_number':692,'multiline':False]['text':' encodings are legit.','line_number':693,'multiline':False]['text':' this will be allocated later!','line_number':700,'multiline':False]['text':' TODO(markus): Combine Enumerator and UEnumeration into one struct.','line_number':706,'multiline':False]['text':' now, we know the exact space we need for index','line_number':717,'multiline':False]['text':'otherwise, index will remain NULL (and will never be touched by','line_number':732,'multiline':False]['text':'the enumerator code anyway)','line_number':733,'multiline':False]['text':' check a string against the selector - UTF16 version ','line_number':738,'multiline':True]['text':' check if already failed','line_number':742,'multiline':False]['text':' ensure args make sense!','line_number':746,'multiline':False]['text':' check a string against the selector - UTF8 version ','line_number':780,'multiline':True]['text':' check if already failed','line_number':784,'multiline':False]['text':' ensure args make sense!','line_number':788,'multiline':False]['text':' !UCONFIG_NO_CONVERSION','line_number':820,'multiline':False]