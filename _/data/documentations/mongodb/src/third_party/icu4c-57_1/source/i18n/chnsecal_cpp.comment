['text':'
 ******************************************************************************
 * Copyright (C) 2007-2014, International Business Machines Corporation
 * and others. All Rights Reserved.
 ******************************************************************************
 *
 * File CHNSECAL.CPP
 *
 * Modification History:
 *
 *   Date        Name        Description
 *   9/18/2007  ajmacher         ported from java ChineseCalendar
 *****************************************************************************
 ','line_number':1,'multiline':True]['text':' Math','line_number':22,'multiline':False]['text':' CalendarAstronomer','line_number':23,'multiline':False]['text':' Debugging','line_number':28,'multiline':False]['text':' must use double parens, i.e.:  U_DEBUG_CHNSECAL_MSG(("four is: %d",4));','line_number':44,'multiline':False]['text':' --- The cache --','line_number':51,'multiline':False]['text':' Protects access to gChineseCalendarAstro.','line_number':52,'multiline':False]['text':' Lazy Creation & Access synchronized by class CalendarCache with a mutex.','line_number':55,'multiline':False]['text':'*
 * The start year of the Chinese calendar, the 61st year of the reign
 * of Huang Di.  Some sources use the first year of his reign,
 * resulting in EXTENDED_YEAR values 60 years greater and ERA (cycle)
 * values one greater.
 ','line_number':62,'multiline':True]['text':' Gregorian year','line_number':68,'multiline':False]['text':'*
 * The offset from GMT in milliseconds at which we perform astronomical
 * computations.  Some sources use a different historically accurate
 * offset of GMT+7:45:40 for years before 1929; we do not do this.
 ','line_number':70,'multiline':True]['text':'*
 * Value to be added or subtracted from the local days of a new moon to
 * get close to the next or prior new moon, but not cross it.  Must be
 * >= 1 and < CalendarAstronomer.SYNODIC_MONTH.
 ','line_number':77,'multiline':True]['text':' Implementation of the ChineseCalendar class','line_number':111,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':114,'multiline':False]['text':' Constructors...','line_number':115,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':116,'multiline':False]['text':' Call this again now that the vtable is set up properly.','line_number':129,'multiline':False]['text':' Call this again now that the vtable is set up properly.','line_number':139,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':166,'multiline':False]['text':' Minimum / Maximum access functions','line_number':167,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':168,'multiline':False]['text':' Minimum  Greatest     Least    Maximum','line_number':172,'multiline':False]['text':'           Minimum   Maximum','line_number':173,'multiline':False]['text':' ERA','line_number':174,'multiline':False]['text':' YEAR','line_number':175,'multiline':False]['text':' MONTH','line_number':176,'multiline':False]['text':' WEEK_OF_YEAR','line_number':177,'multiline':False]['text':'N/A','line_number':178,'multiline':True]['text':'N/A','line_number':178,'multiline':True]['text':'N/A','line_number':178,'multiline':True]['text':'N/A','line_number':178,'multiline':True]['text':' WEEK_OF_MONTH','line_number':178,'multiline':False]['text':' DAY_OF_MONTH','line_number':179,'multiline':False]['text':' DAY_OF_YEAR','line_number':180,'multiline':False]['text':'N/A','line_number':181,'multiline':True]['text':'N/A','line_number':181,'multiline':True]['text':'N/A','line_number':181,'multiline':True]['text':'N/A','line_number':181,'multiline':True]['text':' DAY_OF_WEEK','line_number':181,'multiline':False]['text':' DAY_OF_WEEK_IN_MONTH','line_number':182,'multiline':False]['text':'N/A','line_number':183,'multiline':True]['text':'N/A','line_number':183,'multiline':True]['text':'N/A','line_number':183,'multiline':True]['text':'N/A','line_number':183,'multiline':True]['text':' AM_PM','line_number':183,'multiline':False]['text':'N/A','line_number':184,'multiline':True]['text':'N/A','line_number':184,'multiline':True]['text':'N/A','line_number':184,'multiline':True]['text':'N/A','line_number':184,'multiline':True]['text':' HOUR','line_number':184,'multiline':False]['text':'N/A','line_number':185,'multiline':True]['text':'N/A','line_number':185,'multiline':True]['text':'N/A','line_number':185,'multiline':True]['text':'N/A','line_number':185,'multiline':True]['text':' HOUR_OF_DAY','line_number':185,'multiline':False]['text':'N/A','line_number':186,'multiline':True]['text':'N/A','line_number':186,'multiline':True]['text':'N/A','line_number':186,'multiline':True]['text':'N/A','line_number':186,'multiline':True]['text':' MINUTE','line_number':186,'multiline':False]['text':'N/A','line_number':187,'multiline':True]['text':'N/A','line_number':187,'multiline':True]['text':'N/A','line_number':187,'multiline':True]['text':'N/A','line_number':187,'multiline':True]['text':' SECOND','line_number':187,'multiline':False]['text':'N/A','line_number':188,'multiline':True]['text':'N/A','line_number':188,'multiline':True]['text':'N/A','line_number':188,'multiline':True]['text':'N/A','line_number':188,'multiline':True]['text':' MILLISECOND','line_number':188,'multiline':False]['text':'N/A','line_number':189,'multiline':True]['text':'N/A','line_number':189,'multiline':True]['text':'N/A','line_number':189,'multiline':True]['text':'N/A','line_number':189,'multiline':True]['text':' ZONE_OFFSET','line_number':189,'multiline':False]['text':'N/A','line_number':190,'multiline':True]['text':'N/A','line_number':190,'multiline':True]['text':'N/A','line_number':190,'multiline':True]['text':'N/A','line_number':190,'multiline':True]['text':' DST_OFFSET','line_number':190,'multiline':False]['text':' YEAR_WOY','line_number':191,'multiline':False]['text':'N/A','line_number':192,'multiline':True]['text':'N/A','line_number':192,'multiline':True]['text':'N/A','line_number':192,'multiline':True]['text':'N/A','line_number':192,'multiline':True]['text':' DOW_LOCAL','line_number':192,'multiline':False]['text':' EXTENDED_YEAR','line_number':193,'multiline':False]['text':'N/A','line_number':194,'multiline':True]['text':'N/A','line_number':194,'multiline':True]['text':'N/A','line_number':194,'multiline':True]['text':'N/A','line_number':194,'multiline':True]['text':' JULIAN_DAY','line_number':194,'multiline':False]['text':'N/A','line_number':195,'multiline':True]['text':'N/A','line_number':195,'multiline':True]['text':'N/A','line_number':195,'multiline':True]['text':'N/A','line_number':195,'multiline':True]['text':' MILLISECONDS_IN_DAY','line_number':195,'multiline':False]['text':' IS_LEAP_MONTH','line_number':196,'multiline':False]['text':'*
* @draft ICU 2.4
','line_number':200,'multiline':True]['text':'----------------------------------------------------------------------','line_number':208,'multiline':False]['text':' Calendar framework','line_number':209,'multiline':False]['text':'----------------------------------------------------------------------','line_number':210,'multiline':False]['text':'*
 * Implement abstract Calendar method to return the extended year
 * defined by the current fields.  This will use either the ERA and
 * YEAR field as the cycle and year-of-cycle, or the EXTENDED_YEAR
 * field as the continuous year count, depending on which is newer.
 * @stable ICU 2.8
 ','line_number':212,'multiline':True]['text':' Default to year 1','line_number':222,'multiline':False]['text':' 0-based cycle','line_number':224,'multiline':False]['text':' adjust to the instance specific epoch','line_number':225,'multiline':False]['text':'*
 * Override Calendar method to return the number of days in the given
 * extended year and month.
 *
 * <p>Note: This method also reads the IS_LEAP_MONTH field to determine
 * whether or not the given month is a leap month.
 * @stable ICU 2.8
 ','line_number':231,'multiline':True]['text':' Julian day -> local days','line_number':241,'multiline':False]['text':'*
 * Override Calendar to compute several fields specific to the Chinese
 * calendar system.  These are:
 *
 * <ul><li>ERA
 * <li>YEAR
 * <li>MONTH
 * <li>DAY_OF_MONTH
 * <li>DAY_OF_YEAR
 * <li>EXTENDED_YEAR</ul>
 * 
 * The DAY_OF_WEEK and DOW_LOCAL fields are already set when this
 * method is called.  The getGregorianXxx() methods return Gregorian
 * calendar equivalents for the given Julian day.
 *
 * <p>Compute the ChineseCalendar-specific field IS_LEAP_MONTH.
 * @stable ICU 2.8
 ','line_number':246,'multiline':True]['text':'status','line_number':264,'multiline':True]['text':' local days','line_number':266,'multiline':False]['text':' set all fields','line_number':268,'multiline':False]['text':'*
 * Field resolution table that incorporates IS_LEAP_MONTH.
 ','line_number':271,'multiline':True]['text':'*
 * Override Calendar to add IS_LEAP_MONTH to the field resolution
 * table.
 * @stable ICU 2.8
 ','line_number':299,'multiline':True]['text':'*
 * Return the Julian day number of day before the first day of the
 * given month in the given extended year.
 * 
 * <p>Note: This method reads the IS_LEAP_MONTH field to determine
 * whether the given month is a leap month.
 * @param eyear the extended year
 * @param month the zero-based month.  The month is also determined
 * by reading the IS_LEAP_MONTH field.
 * @return the Julian day number of the day before the first
 * day of the given month and year
 * @stable ICU 2.8
 ','line_number':308,'multiline':True]['text':' cast away const','line_number':323,'multiline':False]['text':' If the month is out of range, adjust it into range, and','line_number':325,'multiline':False]['text':' modify the extended year value accordingly.','line_number':326,'multiline':False]['text':' Gregorian year','line_number':333,'multiline':False]['text':' Save fields for later restoration','line_number':339,'multiline':False]['text':' Ignore IS_LEAP_MONTH field if useMonth is false','line_number':343,'multiline':False]['text':' This will modify the MONTH and IS_LEAP_MONTH fields (only)','line_number':351,'multiline':False]['text':'*
 * Override Calendar to handle leap months properly.
 * @stable ICU 2.8
 ','line_number':368,'multiline':True]['text':' Get local day','line_number':378,'multiline':False]['text':' New moon ','line_number':380,'multiline':False]['text':'*
 * Override Calendar to handle leap months properly.
 * @stable ICU 2.8
 ','line_number':390,'multiline':True]['text':'*
 * Override Calendar to handle leap months properly.
 * @stable ICU 2.8
 ','line_number':398,'multiline':True]['text':' Get local day','line_number':408,'multiline':False]['text':' New moon (start of this month)','line_number':410,'multiline':False]['text':' Note throughout the following:  Months 12 and 1 are never','line_number':412,'multiline':False]['text':' followed by a leap month (D&R p. 185).','line_number':413,'multiline':False]['text':' Compute the adjusted month number m.  This is zero-based','line_number':415,'multiline':False]['text':' value from 0..11 in a non-leap year, and from 0..12 in a','line_number':416,'multiline':False]['text':' leap year.','line_number':417,'multiline':False]['text':' 0-based month','line_number':418,'multiline':False]['text':' (member variable)','line_number':420,'multiline':False]['text':' Check for a prior leap month.  (In the','line_number':424,'multiline':False]['text':' following, month 0 is the first month of the','line_number':425,'multiline':False]['text':' year.)  Month 0 is never followed by a leap','line_number':426,'multiline':False]['text':' month, and we know month m is not a leap month.','line_number':427,'multiline':False]['text':' moon1 will be the start of month 0 if there is','line_number':428,'multiline':False]['text':' no leap month between month 0 and month m;','line_number':429,'multiline':False]['text':' otherwise it will be the start of month 1.','line_number':430,'multiline':False]['text':' Now do the standard roll computation on m, with the','line_number':441,'multiline':False]['text':' allowed range of 0..n-1, where n is 12 or 13.','line_number':442,'multiline':False]['text':' Months in this year','line_number':443,'multiline':False]['text':'------------------------------------------------------------------','line_number':465,'multiline':False]['text':' Support methods and constants','line_number':466,'multiline':False]['text':'------------------------------------------------------------------','line_number':467,'multiline':False]['text':'*
 * Convert local days to UTC epoch milliseconds.
 * This is not an accurate conversion in that getTimezoneOffset 
 * takes the milliseconds in GMT (not local time). In theory, more 
 * accurate algorithm can be implemented but practically we do not need 
 * to go through that complication as long as the historical timezone 
 * changes did not happen around the 'tricky' new moon (new moon around 
 * midnight). 
 *  
 * @param days days after January 1, 1970 0:00 in the astronomical base zone
 * @return milliseconds after January 1, 1970 0:00 GMT
 ','line_number':469,'multiline':True]['text':'*
 * Convert UTC epoch milliseconds to local days.
 * @param millis milliseconds after January 1, 1970 0:00 GMT
 * @return days after January 1, 1970 0:00 in the astronomical base zone
 ','line_number':494,'multiline':True]['text':'------------------------------------------------------------------','line_number':511,'multiline':False]['text':' Astronomical computations','line_number':512,'multiline':False]['text':'------------------------------------------------------------------','line_number':513,'multiline':False]['text':'*
 * Return the major solar term on or after December 15 of the given
 * Gregorian year, that is, the winter solstice of the given year.
 * Computations are relative to Asia/Shanghai time zone.
 * @param gyear a Gregorian year
 * @return days after January 1, 1970 0:00 Asia/Shanghai of the
 * winter solstice of the given year
 ','line_number':516,'multiline':True]['text':' In books December 15 is used, but it fails for some years','line_number':530,'multiline':False]['text':' using our algorithms, e.g.: 1298 1391 1492 1553 1560.  That','line_number':531,'multiline':False]['text':' is, winterSolstice(1298) starts search at Dec 14 08:00:00','line_number':532,'multiline':False]['text':' PST 1298 with a final result of Dec 14 10:31:59 PST 1299.','line_number':533,'multiline':False]['text':' Winter solstice is 270 degrees solar longitude aka Dongzhi','line_number':545,'multiline':False]['text':'*
 * Return the closest new moon to the given date, searching either
 * forward or backward in time.
 * @param days days after January 1, 1970 0:00 Asia/Shanghai
 * @param after if true, search for a new moon on or after the given
 * date; otherwise, search for a new moon before it
 * @return days after January 1, 1970 0:00 Asia/Shanghai of the nearest
 * new moon after or before <code>days</code>
 ','line_number':555,'multiline':True]['text':'*
 * Return the nearest integer number of synodic months between
 * two dates.
 * @param day1 days after January 1, 1970 0:00 Asia/Shanghai
 * @param day2 days after January 1, 1970 0:00 Asia/Shanghai
 * @return the nearest integer number of months between day1 and day2
 ','line_number':578,'multiline':True]['text':'*
 * Return the major solar term on or before a given date.  This
 * will be an integer from 1..12, with 1 corresponding to 330 degrees,
 * 2 to 0 degrees, 3 to 30 degrees,..., and 12 to 300 degrees.
 * @param days days after January 1, 1970 0:00 Asia/Shanghai
 ','line_number':590,'multiline':True]['text':' Compute (floor(solarLongitude / (pi/6)) + 2) % 12','line_number':607,'multiline':False]['text':'*
 * Return true if the given month lacks a major solar term.
 * @param newMoon days after January 1, 1970 0:00 Asia/Shanghai of a new
 * moon
 ','line_number':615,'multiline':True]['text':'------------------------------------------------------------------','line_number':626,'multiline':False]['text':' Time to fields','line_number':627,'multiline':False]['text':'------------------------------------------------------------------','line_number':628,'multiline':False]['text':'*
 * Return true if there is a leap month on or after month newMoon1 and
 * at or before month newMoon2.
 * @param newMoon1 days after January 1, 1970 0:00 astronomical base zone
 * of a new moon
 * @param newMoon2 days after January 1, 1970 0:00 astronomical base zone
 * of a new moon
 ','line_number':630,'multiline':True]['text':' This is only needed to debug the timeOfAngle divergence bug.','line_number':641,'multiline':False]['text':' Remove this later. Liu 11/9/00','line_number':642,'multiline':False]['text':'*
 * Compute fields for the Chinese calendar system.  This method can
 * either set all relevant fields, as required by
 * <code>handleComputeFields()</code>, or it can just set the MONTH and
 * IS_LEAP_MONTH fields, as required by
 * <code>handleComputeMonthStart()</code>.
 *
 * <p>As a side effect, this method sets {@link #isLeapYear}.
 * @param days days after January 1, 1970 0:00 astronomical base zone
 * of the date to compute fields for
 * @param gyear the Gregorian year of the given date
 * @param gmonth the Gregorian month of the given date
 * @param setAllFields if true, set the EXTENDED_YEAR, ERA, YEAR,
 * DAY_OF_MONTH, and DAY_OF_YEAR fields.  In either case set the MONTH
 * and IS_LEAP_MONTH fields.
 ','line_number':655,'multiline':True]['text':' Find the winter solstices before and after the target date.','line_number':674,'multiline':False]['text':' These define the boundaries of this Chinese year, specifically,','line_number':675,'multiline':False]['text':' the position of month 11, which always contains the solstice.','line_number':676,'multiline':False]['text':' We want solsticeBefore <= date < solsticeAfter.','line_number':677,'multiline':False]['text':' Find the start of the month after month 11.  This will be either','line_number':687,'multiline':False]['text':' the prior month 12 or leap month 11 (very rare).  Also find the','line_number':688,'multiline':False]['text':' start of the following month 11.','line_number':689,'multiline':False]['text':' Start of this month','line_number':692,'multiline':False]['text':' Note: isLeapYear is a member variable','line_number':693,'multiline':False]['text':' Convert from 1-based to 0-based','line_number':708,'multiline':False]['text':' Extended year and cycle year is based on the epoch year','line_number':713,'multiline':False]['text':' 0->0,60  1->1,1  60->1,60  61->2,1  etc.','line_number':726,'multiline':False]['text':' Days will be before the first new year we compute if this','line_number':734,'multiline':False]['text':' date is in month 11, leap 11, 12.  There is never a leap 12.','line_number':735,'multiline':False]['text':' New year computations are cached so this should be cheap in','line_number':736,'multiline':False]['text':' the long run.','line_number':737,'multiline':False]['text':'------------------------------------------------------------------','line_number':747,'multiline':False]['text':' Fields to time','line_number':748,'multiline':False]['text':'------------------------------------------------------------------','line_number':749,'multiline':False]['text':'*
 * Return the Chinese new year of the given Gregorian year.
 * @param gyear a Gregorian year
 * @return days after January 1, 1970 0:00 astronomical base zone of the
 * Chinese new year of the given year (this will be a new moon)
 ','line_number':751,'multiline':True]['text':'*
 * Adjust this calendar to be delta months before or after a given
 * start position, pinning the day of month if necessary.  The start
 * position is given as a local days number for the start of the month
 * and a day-of-month.  Used by add() and roll().
 * @param newMoon the local days of the first day of the month of the
 * start position (days after January 1, 1970 0:00 Asia/Shanghai)
 * @param dom the 1-based day-of-month of the start position
 * @param delta the number of months to move forward or backward from
 * the start position
 ','line_number':784,'multiline':True]['text':' Move to the middle of the month before our target month.','line_number':798,'multiline':False]['text':' Search forward to the target month's new moon','line_number':801,'multiline':False]['text':' Find the target dom','line_number':804,'multiline':False]['text':' Pin the dom.  In this calendar all months are 29 or 30 days','line_number':807,'multiline':False]['text':' so pinning just means handling dom 30.','line_number':808,'multiline':False]['text':' TODO Fix this.  We really shouldn't ever have to','line_number':811,'multiline':False]['text':' explicitly call complete().  This is either a bug in','line_number':812,'multiline':False]['text':' this method, in ChineseCalendar, or in','line_number':813,'multiline':False]['text':' Calendar.getActualMaximum().  I suspect the last.','line_number':814,'multiline':False]['text':' copied from GregorianCalendar','line_number':830,'multiline':False]['text':' Force an update of the state of the Calendar.','line_number':834,'multiline':False]['text':' cast away const','line_number':835,'multiline':False]['text':' default century','line_number':840,'multiline':False]['text':' initialize systemDefaultCentury and systemDefaultCenturyYear based','line_number':864,'multiline':False]['text':' on the current time.  They'll be set to 80 years before','line_number':865,'multiline':False]['text':' the current time.','line_number':866,'multiline':False]['text':' We have no recourse upon failure unless we want to propagate the failure','line_number':875,'multiline':False]['text':' out.','line_number':876,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStart','line_number':882,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStartYear','line_number':890,'multiline':False]