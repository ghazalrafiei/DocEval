['text':'
**********************************************************************
*   Copyright (C) 2009-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':1,'multiline':True]['text':' struct holding a single variant ','line_number':20,'multiline':True]['text':' struct holding a single attribute value ','line_number':26,'multiline':True]['text':' struct holding a single extension ','line_number':32,'multiline':True]['text':' holding parsed subtags ','line_number':41,'multiline':True]['text':'  grandfathered   preferred ','line_number':78,'multiline':True]['text':'  deprecated  new ','line_number':109,'multiline':True]['text':'
* -------------------------------------------------
*
* These ultag_ functions may be exposed as APIs later
*
* -------------------------------------------------
','line_number':115,'multiline':True]['text':'
* -------------------------------------------------
*
* Language subtag syntax validation functions
*
* -------------------------------------------------
','line_number':172,'multiline':True]['text':'
     * language      = 2*3ALPHA            ; shortest ISO 639 code
     *                 ["-" extlang]       ; sometimes followed by
     *                                     ;   extended language subtags
     *               / 4ALPHA              ; or reserved for future use
     *               / 5*8ALPHA            ; or registered language subtag
     ','line_number':215,'multiline':True]['text':'
     * extlang       = 3ALPHA              ; selected ISO 639 codes
     *                 *2("-" 3ALPHA)      ; permanently reserved
     ','line_number':233,'multiline':True]['text':'
     * script        = 4ALPHA              ; ISO 15924 code
     ','line_number':248,'multiline':True]['text':'
     * region        = 2ALPHA              ; ISO 3166-1 code
     *               / 3DIGIT              ; UN M.49 code
     ','line_number':262,'multiline':True]['text':'
     * variant       = 5*8alphanum         ; registered variants
     *               / (DIGIT 3alphanum)
     ','line_number':280,'multiline':True]['text':'
     * variant       = 1*8alphanum         ; registered variants
     *               / (DIGIT 3alphanum)
     ','line_number':298,'multiline':True]['text':'
     * extension     = singleton 1*("-" (2*8alphanum))
     ','line_number':313,'multiline':True]['text':'
     * extension     = singleton 1*("-" (2*8alphanum))
     ','line_number':327,'multiline':True]['text':'
     * privateuse    = "x" 1*("-" (1*8alphanum))
     ','line_number':370,'multiline':True]['text':'
* -------------------------------------------------
*
* Helper functions
*
* -------------------------------------------------
','line_number':449,'multiline':True]['text':' variants order should be preserved ','line_number':468,'multiline':True]['text':' Checking for duplicate variant ','line_number':478,'multiline':True]['text':' duplicated variant ','line_number':481,'multiline':True]['text':' reorder variants in alphabetical order ','line_number':504,'multiline':True]['text':' duplicated variant ','line_number':524,'multiline':True]['text':' reorder variants in alphabetical order ','line_number':548,'multiline':True]['text':' special handling for locale to bcp conversion ','line_number':558,'multiline':True]['text':' duplicated extension key ','line_number':594,'multiline':True]['text':' Note: returned language code is in lower case letters ','line_number':647,'multiline':True]['text':' invalid language code ','line_number':655,'multiline':True]['text':' resolve deprecated ','line_number':665,'multiline':True]['text':' invalid script code ','line_number':703,'multiline':True]['text':' invalid region code ','line_number':745,'multiline':True]['text':' terminate ','line_number':798,'multiline':True]['text':' ignore empty variant ','line_number':805,'multiline':True]['text':' ICU uses upper case letters for variants, but
                       the canonical format is lowercase in BCP47 ','line_number':807,'multiline':True]['text':' validate ','line_number':813,'multiline':True]['text':' emit the variant to the list ','line_number':816,'multiline':True]['text':' duplicated variant ','line_number':824,'multiline':True]['text':' Special handling for POSIX variant, need to remember that we had it and then ','line_number':832,'multiline':True]['text':' treat it like an extension later. ','line_number':833,'multiline':True]['text':' Handle private use subtags separately ','line_number':840,'multiline':True]['text':' reset variant starting position ','line_number':844,'multiline':True]['text':' write out validated/normalized variants to the target ','line_number':856,'multiline':True]['text':' clean up ','line_number':873,'multiline':True]['text':' reorder extensions ','line_number':905,'multiline':True]['text':' buf must be null-terminated ','line_number':928,'multiline':True]['text':' ignore this keyword ','line_number':934,'multiline':True]['text':' special keyword used for representing Unicode locale attributes ','line_number':942,'multiline':True]['text':' create AttributeListEntry ','line_number':964,'multiline':True]['text':' we've checked buf is null-terminated above ','line_number':998,'multiline':True]['text':' 
                    When uloc_toUnicodeLocaleType(key, buf) returns the
                    input value as is, the value is well-formed, but has
                    no known mapping. This implementation normalizes the
                    the value to lower case
                    ','line_number':1008,'multiline':True]['text':' create ExtensionListEntry ','line_number':1067,'multiline':True]['text':' Special handling for POSIX variant - add the keywords for POSIX ','line_number':1086,'multiline':True]['text':' create ExtensionListEntry for POSIX ','line_number':1088,'multiline':True]['text':' write LDML singleton extension ','line_number':1109,'multiline':True]['text':' write out the sorted BCP47 attributes, extensions and private use ','line_number':1122,'multiline':True]['text':' write the value for the attributes ','line_number':1145,'multiline':True]['text':' clean up ','line_number':1161,'multiline':True]['text':'*
 * Append keywords parsed from LDML extension value
 * e.g. "u-ca-gregory-co-trad" -> {calendar = gregorian} {collation = traditional}
 * Note: char* buf is used for storing keywords
 ','line_number':1188,'multiline':True]['text':' beginning of current subtag ','line_number':1195,'multiline':True]['text':' beginning of key-type pairs ','line_number':1196,'multiline':True]['text':' first LDML keyword ','line_number':1199,'multiline':True]['text':' first attribute ','line_number':1202,'multiline':True]['text':' Reset the posixVariant value ','line_number':1211,'multiline':True]['text':' Iterate through u extension attributes ','line_number':1217,'multiline':True]['text':' locate next separator char ','line_number':1219,'multiline':True]['text':' add this attribute to the list ','line_number':1227,'multiline':True]['text':' next tag ','line_number':1250,'multiline':True]['text':' next to the separator ','line_number':1253,'multiline':True]['text':' emit attributes as an LDML keyword, e.g. attribute=attr1-attr2 ','line_number':1259,'multiline':True]['text':' attrBufIdx == <total length of attribute subtag> + 1 ','line_number':1262,'multiline':True]['text':' attribute subtags sorted in alphabetical order as type ','line_number':1276,'multiline':True]['text':' buffer size check is done above ','line_number':1281,'multiline':True]['text':' once keyword entry is created, delete the attribute list ','line_number':1302,'multiline':True]['text':' u extenstion key subtag ','line_number':1313,'multiline':True]['text':' beginning of u extension type subtag(s) ','line_number':1314,'multiline':True]['text':' BCP47 representation of LDML key/type pairs ','line_number':1320,'multiline':True]['text':' locate next separator char ','line_number':1327,'multiline':True]['text':' within LDML type subtags ','line_number':1341,'multiline':True]['text':' next tag ','line_number':1350,'multiline':True]['text':' next to the separator ','line_number':1353,'multiline':True]['text':' processing last one ','line_number':1357,'multiline':True]['text':' LDML key ','line_number':1363,'multiline':True]['text':' LDML type ','line_number':1364,'multiline':True]['text':' BCP key length is always 2 for now ','line_number':1366,'multiline':True]['text':' the BCP key is invalid ','line_number':1371,'multiline':True]['text':' u extension key to LDML key ','line_number':1379,'multiline':True]['text':'
                    The key returned by toLegacyKey points to the input buffer.
                    We normalize the result key to lower case.
                    ','line_number':1386,'multiline':True]['text':' practically long enough even considering multiple subtag type ','line_number':1404,'multiline':True]['text':' the BCP type is too long ','line_number':1406,'multiline':True]['text':' BCP type to locale type ','line_number':1414,'multiline':True]['text':'
                        The type returned by toLegacyType points to the input buffer.
                        We normalize the result type to lower case.
                        ','line_number':1421,'multiline':True]['text':' normalize to lower case ','line_number':1425,'multiline':True]['text':' typeless - default type value is "yes" ','line_number':1439,'multiline':True]['text':' Special handling for u-va-posix, since we want to treat this as a variant, 
                   not as a keyword ','line_number':1443,'multiline':True]['text':' create an ExtensionListEntry for this keyword ','line_number':1448,'multiline':True]['text':' Determine if variants already exists ','line_number':1521,'multiline':True]['text':' resolve locale keywords and reordering keys ','line_number':1528,'multiline':True]['text':' add private use as a keyword ','line_number':1556,'multiline':True]['text':' If a POSIX variant was in the extensions, write it out before writing the keywords. ','line_number':1571,'multiline':True]['text':' write out the sorted keywords ','line_number':1582,'multiline':True]['text':' '@' ','line_number':1588,'multiline':True]['text':' ';' ','line_number':1592,'multiline':True]['text':' key ','line_number':1598,'multiline':True]['text':' '=' ','line_number':1605,'multiline':True]['text':' type ','line_number':1611,'multiline':True]['text':' clean up ','line_number':1622,'multiline':True]['text':' terminate ','line_number':1673,'multiline':True]['text':' Private use in the canonical format is lowercase in BCP47 ','line_number':1676,'multiline':True]['text':' validate ','line_number':1681,'multiline':True]['text':' reset private use starting position ','line_number':1731,'multiline':True]['text':'
* -------------------------------------------------
*
* ultag_ functions
*
* -------------------------------------------------
','line_number':1756,'multiline':True]['text':' Bit flags used by the parser ','line_number':1764,'multiline':True]['text':'*
 * MONGODB MODIFICATION Fix for SERVER-38840.
 *
 * Ticket #12705 - Visual Studio 2015 Update 3 contains a new code optimizer which has problems
 * optimizing this function. (See
 * https://blogs.msdn.microsoft.com/vcblog/2016/05/04/new-code-optimizer/ )
 * As a workaround, we will turn off optimization just for this function on VS2015 Update 3 and
 * above.
 ','line_number':1774,'multiline':True]['text':' copy the entire string ','line_number':1814,'multiline':True]['text':' create a ULanguageTag ','line_number':1823,'multiline':True]['text':' the input tag is too short - return empty ULanguageTag ','line_number':1834,'multiline':True]['text':' check if the tag is grandfathered ','line_number':1838,'multiline':True]['text':' back up for output parsedLen ','line_number':1843,'multiline':True]['text':'
     * langtag      =   language
     *                  ["-" script]
     *                  ["-" region]
     *                  *("-" variant)
     *                  *("-" extension)
     *                  ["-" privateuse]
     ','line_number':1861,'multiline':True]['text':' locate next separator char ','line_number':1882,'multiline':True]['text':' last subtag ','line_number':1891,'multiline':True]['text':' terminate ','line_number':1900,'multiline':True]['text':' to title case ','line_number':1928,'multiline':True]['text':' duplicated variant entry ','line_number':1967,'multiline':True]['text':' the previous extension is incomplete ','line_number':1980,'multiline':True]['text':' terminate the previous extension value ','line_number':1986,'multiline':True]['text':' insert the extension to the list ','line_number':1990,'multiline':True]['text':' stop parsing here ','line_number':1994,'multiline':True]['text':' create a new extension ','line_number':2001,'multiline':True]['text':' will be set later ','line_number':2009,'multiline':True]['text':'
                 * reset the start and the end location of extension value
                 * subtags for this extension
                 ','line_number':2011,'multiline':True]['text':' if the start postion of this extension's value is not yet,
                        this one is the first value subtag ','line_number':2025,'multiline':True]['text':' Mark the end of this subtag ','line_number':2030,'multiline':True]['text':' Process the last extension ','line_number':2042,'multiline':True]['text':' the previous extension is incomplete ','line_number':2044,'multiline':True]['text':' terminate the previous extension value ','line_number':2049,'multiline':True]['text':' insert the extension to the list ','line_number':2053,'multiline':True]['text':' stop parsing here ','line_number':2058,'multiline':True]['text':' The rest of part will be private use value subtags ','line_number':2066,'multiline':True]['text':' empty private use subtag ','line_number':2068,'multiline':True]['text':' back up the private use value start position ','line_number':2071,'multiline':True]['text':' validate private use value subtags ','line_number':2074,'multiline':True]['text':' last subtag ','line_number':2085,'multiline':True]['text':' No more subtags, exiting the parse loop ','line_number':2112,'multiline':True]['text':' If we fell through here, it means this subtag is illegal - quit parsing ','line_number':2118,'multiline':True]['text':' Process the last extension ','line_number':2123,'multiline':True]['text':' the previous extension is incomplete ','line_number':2125,'multiline':True]['text':' terminate the previous extension value ','line_number':2128,'multiline':True]['text':' insert the extension to the list ','line_number':2131,'multiline':True]['text':'*
* MONGODB MODIFICATION Fix for SERVER-38840.
*
* Ticket #12705 - Turn optimization back on.
','line_number':2151,'multiline':True]['text':'
* -------------------------------------------------
*
* Locale/BCP47 conversion APIs, exposed as uloc_*
*
* -------------------------------------------------
','line_number':2328,'multiline':True]['text':' char canonical[ULOC_FULLNAME_CAPACITY]; ','line_number':2341,'multiline':True]['text':' See #6822 ','line_number':2341,'multiline':True]['text':' Note: uloc_canonicalize returns "en_US_POSIX" for input locale ID "".  See #6835 ','line_number':2348,'multiline':True]['text':' For handling special case - private use only tag ','line_number':2358,'multiline':True]['text':' return private use only tag ','line_number':2380,'multiline':True]['text':' if not strict mode, then "und" will be returned ','line_number':2389,'multiline':True]['text':' language ','line_number':2432,'multiline':True]['text':' script ','line_number':2444,'multiline':True]['text':' write out the script in title case ','line_number':2453,'multiline':True]['text':' region ','line_number':2468,'multiline':True]['text':' write out the retion in upper case ','line_number':2476,'multiline':True]['text':' variants ','line_number':2488,'multiline':True]['text':' write out the variant in upper case ','line_number':2504,'multiline':True]['text':' keywords ','line_number':2516,'multiline':True]['text':' need a language ','line_number':2521,'multiline':True]