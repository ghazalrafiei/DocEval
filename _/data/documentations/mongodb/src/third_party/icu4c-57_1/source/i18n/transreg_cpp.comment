['text':'
**********************************************************************
*   Copyright (c) 2001-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   08/10/2001  aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]['text':' Enable the following symbol to add debugging code that tracks the','line_number':30,'multiline':False]['text':' allocation, deletion, and use of Entry objects.  BoundsChecker has','line_number':31,'multiline':False]['text':' reported dangling pointer errors with these objects, but I have','line_number':32,'multiline':False]['text':' been unable to confirm them.  I suspect BoundsChecker is getting','line_number':33,'multiline':False]['text':' confused with pointers going into and coming out of a UHashtable,','line_number':34,'multiline':False]['text':' despite the hinting code that is designed to help it.','line_number':35,'multiline':False]['text':' #define DEBUG_MEM','line_number':36,'multiline':False]['text':' UChar constants','line_number':41,'multiline':False]['text':' '_'','line_number':42,'multiline':False]['text':'static const UChar ID_SEP      = 0x002D; /*-*/','line_number':43,'multiline':False]['text':'static const UChar VARIANT_SEP = 0x002F; // '/'','line_number':44,'multiline':False]['text':' String constants','line_number':46,'multiline':False]['text':' Any','line_number':47,'multiline':False]['text':' empty string','line_number':49,'multiline':False]['text':'*
 * Resource bundle key for the RuleBasedTransliterator rule.
 ','line_number':52,'multiline':True]['text':'static const char RB_RULE[] = "Rule";','line_number':55,'multiline':False]['text':'------------------------------------------------------------------','line_number':59,'multiline':False]['text':' Alias','line_number':60,'multiline':False]['text':'------------------------------------------------------------------','line_number':61,'multiline':False]['text':' the total number of transliterators in the compound is the total number of anonymous transliterators','line_number':118,'multiline':False]['text':' plus the total number of ID blocks-- we start by assuming the list begins and ends with an ID','line_number':119,'multiline':False]['text':' block and that each pair anonymous transliterators has an ID block between them.  Then we go back','line_number':120,'multiline':False]['text':' to see whether there really are ID blocks at the beginning and end (by looking for U+FFFF, which','line_number':121,'multiline':False]['text':' marks the position where an anonymous transliterator goes) and adjust accordingly','line_number':122,'multiline':False]['text':' don't call create() if isRuleBased() returns TRUE!','line_number':169,'multiline':False]['text':'----------------------------------------------------------------------','line_number':189,'multiline':False]['text':' class TransliteratorSpec','line_number':190,'multiline':False]['text':'----------------------------------------------------------------------','line_number':191,'multiline':False]['text':'*
 * A TransliteratorSpec is a string specifying either a source or a target.  In more
 * general terms, it may also specify a variant, but we only use the
 * Spec class for sources and targets.
 *
 * A Spec may be a locale or a script.  If it is a locale, it has a
 * fallback chain that goes xx_YY_ZZZ -> xx_YY -> xx -> ssss, where
 * ssss is the script mapping of xx_YY_ZZZ.  The Spec API methods
 * hasFallback(), next(), and reset() iterate over this fallback
 * sequence.
 *
 * The Spec class canonicalizes itself, so the locale is put into
 * canonical form, or the script is transformed from an abbreviation
 * to a full name.
 ','line_number':193,'multiline':True]['text':' TRUE if spec is a locale','line_number':231,'multiline':False]['text':' TRUE if nextSpec is a locale','line_number':232,'multiline':False]['text':' forbid copying of this class','line_number':235,'multiline':False]['text':' forbid copying of this class','line_number':236,'multiline':False]['text':' test for NULL ','line_number':248,'multiline':True]['text':' Canonicalize script name -or- do locale->script mapping','line_number':258,'multiline':False]['text':' Canonicalize top','line_number':268,'multiline':False]['text':' Canonicalize locale name','line_number':270,'multiline':False]['text':' We are a script; use canonical name','line_number':277,'multiline':False]['text':' assert(spec != top);','line_number':281,'multiline':False]['text':' If i == 0 then we have _FOO, so we fall through','line_number':306,'multiline':False]['text':' to the scriptName.','line_number':307,'multiline':False]['text':' scriptName may be empty','line_number':312,'multiline':False]['text':' spec is a script, so we are at the end','line_number':315,'multiline':False]['text':' Protocol:','line_number':320,'multiline':False]['text':' for(const UnicodeString& s(spec.get());','line_number':321,'multiline':False]['text':'     spec.hasFallback(); s(spec.next())) { ...','line_number':322,'multiline':False]['text':'----------------------------------------------------------------------','line_number':343,'multiline':False]['text':' Vector of Entry pointers currently in use','line_number':347,'multiline':False]['text':' Caller must call DEBUG_setup first.  Return index of given Entry,','line_number':357,'multiline':False]['text':' if it is in use (not deleted yet), or -1 if not found.','line_number':358,'multiline':False]['text':' Track object creation','line_number':368,'multiline':False]['text':' This should really never happen unless the heap is broken','line_number':372,'multiline':False]['text':' Track object deletion','line_number':380,'multiline':False]['text':' Track object usage','line_number':391,'multiline':False]['text':' If we're not debugging then make these macros into NOPs','line_number':402,'multiline':False]['text':'----------------------------------------------------------------------','line_number':408,'multiline':False]['text':' class Entry','line_number':409,'multiline':False]['text':'----------------------------------------------------------------------','line_number':410,'multiline':False]['text':'*
 * The Entry object stores objects of different types and
 * singleton objects as placeholders for rule-based transliterators to
 * be built as needed.  Instances of this struct can be placeholders,
 * can represent prototype transliterators to be cloned, or can
 * represent TransliteratorData objects.  We don't support storing
 * classes in the registry because we don't have the rtti infrastructure
 * for it.  We could easily add this if there is a need for it in the
 * future.
 ','line_number':412,'multiline':True]['text':' Only used for uninitialized entries','line_number':433,'multiline':False]['text':' NOTE: stringArg cannot go inside the union because','line_number':435,'multiline':False]['text':' it has a copy constructor','line_number':436,'multiline':False]['text':' For RULES_*, ALIAS, COMPOUND_RBT','line_number':437,'multiline':False]['text':' For COMPOUND_RBT, LOCALE_RULES','line_number':438,'multiline':False]['text':' For COMPOUND_RBT','line_number':439,'multiline':False]['text':' For PROTOTYPE','line_number':441,'multiline':False]['text':' For RBT_DATA','line_number':442,'multiline':False]['text':' For COMPOUND_RBT','line_number':443,'multiline':False]['text':' For FACTORY','line_number':447,'multiline':False]['text':' forbid copying of this class','line_number':457,'multiline':False]['text':' forbid copying of this class','line_number':458,'multiline':False]['text':' The data object is shared between instances of RBT.  The','line_number':473,'multiline':False]['text':' entry object owns it.  It should only be deleted when the','line_number':474,'multiline':False]['text':' transliterator component is being cleaned up.  Doing so','line_number':475,'multiline':False]['text':' invalidates any RBTs that the user has instantiated.','line_number':476,'multiline':False]['text':' UObjectDeleter for Hashtable::setValueDeleter','line_number':504,'multiline':False]['text':'----------------------------------------------------------------------','line_number':512,'multiline':False]['text':' class TransliteratorRegistry: Basic public API','line_number':513,'multiline':False]['text':'----------------------------------------------------------------------','line_number':514,'multiline':False]['text':' Through the magic of C++, everything cleans itself up','line_number':528,'multiline':False]['text':' We get to this point if there are two threads, one of which','line_number':548,'multiline':False]['text':' is instantiating an ID, and another of which is removing','line_number':549,'multiline':False]['text':' the same ID from the registry, and the timing is just right.','line_number':550,'multiline':False]['text':' The usage model for the caller is that they will first call','line_number':554,'multiline':False]['text':' reg->get() inside the mutex, they'll get back an alias, they call','line_number':555,'multiline':False]['text':' alias->isRuleBased(), and if they get TRUE, they call alias->parse()','line_number':556,'multiline':False]['text':' outside the mutex, then reg->reget() inside the mutex again.  A real','line_number':557,'multiline':False]['text':' mess, but it gets things working for ICU 3.0. [alan].','line_number':558,'multiline':False]['text':' Note: It's possible that in between the caller calling','line_number':560,'multiline':False]['text':' alias->parse() and reg->reget(), that another thread will have','line_number':561,'multiline':False]['text':' called reg->reget(), and the entry will already have been fixed up.','line_number':562,'multiline':False]['text':' We have to detect this so we don't stomp over existing entry','line_number':563,'multiline':False]['text':' data members and potentially leak memory (u.data and compoundFilter).','line_number':564,'multiline':False]['text':' use U+FFFF to mark position of RBTs in ID block','line_number':603,'multiline':False]['text':'ec','line_number':667,'multiline':True]['text':' Null pointer check','line_number':669,'multiline':False]['text':' Only need to do this if ID.indexOf('-') < 0','line_number':686,'multiline':False]['text':'----------------------------------------------------------------------','line_number':694,'multiline':False]['text':' class TransliteratorRegistry: Public ID and spec management','line_number':695,'multiline':False]['text':'----------------------------------------------------------------------','line_number':696,'multiline':False]['text':'*
 * == OBSOLETE - remove in ICU 3.4 ==
 * Return the number of IDs currently registered with the system.
 * To retrieve the actual IDs, call getAvailableID(i) with
 * i from 0 to countAvailableIDs() - 1.
 ','line_number':698,'multiline':True]['text':'*
 * == OBSOLETE - remove in ICU 3.4 ==
 * Return the index-th available ID.  index must be between 0
 * and countAvailableIDs() - 1, inclusive.  If index is out of
 * range, the result of getAvailableID(0) is returned.
 ','line_number':708,'multiline':True]['text':' invalid source','line_number':757,'multiline':False]['text':' invalid index','line_number':769,'multiline':False]['text':' variants may be 0 if the source/target are invalid','line_number':783,'multiline':False]['text':' invalid source','line_number':793,'multiline':False]['text':' invalid target','line_number':798,'multiline':False]['text':' invalid index','line_number':803,'multiline':False]['text':'----------------------------------------------------------------------','line_number':810,'multiline':False]['text':' class TransliteratorRegistry::Enumeration','line_number':811,'multiline':False]['text':'----------------------------------------------------------------------','line_number':812,'multiline':False]['text':'status','line_number':821,'multiline':True]['text':' This is sloppy but safe -- if we get out of sync with the underlying','line_number':826,'multiline':False]['text':' registry, we will still return legal strings, but they might not','line_number':827,'multiline':False]['text':' correspond to the snapshot at construction time.  So there could be','line_number':828,'multiline':False]['text':' duplicate IDs or omitted IDs if insertions or deletions occur in one','line_number':829,'multiline':False]['text':' thread while another is iterating.  To be more rigorous, add a timestamp,','line_number':830,'multiline':False]['text':' which is incremented with any modification, and validate this iterator','line_number':831,'multiline':False]['text':' against the timestamp at construction time.  This probably isn't worth','line_number':832,'multiline':False]['text':' doing as long as there is some possibility of removing this code in favor','line_number':833,'multiline':False]['text':' of some new code based on Doug's service framework.','line_number':834,'multiline':False]['text':' index == n is okay -- this means we've reached the end','line_number':842,'multiline':False]['text':' Copy the string! This avoids lifetime problems.','line_number':844,'multiline':False]['text':'status','line_number':852,'multiline':True]['text':'----------------------------------------------------------------------','line_number':858,'multiline':False]['text':' class TransliteratorRegistry: internal','line_number':859,'multiline':False]['text':'----------------------------------------------------------------------','line_number':860,'multiline':False]['text':'*
 * Convenience method.  Calls 6-arg registerEntry().
 ','line_number':862,'multiline':True]['text':'*
 * Convenience method.  Calls 6-arg registerEntry().
 ','line_number':879,'multiline':True]['text':' Only need to do this if ID.indexOf('-') < 0','line_number':888,'multiline':False]['text':'*
 * Register an entry object (adopted) with the given ID, source,
 * target, and variant strings.
 ','line_number':894,'multiline':True]['text':' Check to make sure newID was created.','line_number':910,'multiline':False]['text':' NUL-terminate the ID string','line_number':912,'multiline':False]['text':'*
 * Register a source-target/variant in the specDAG.  Variant may be
 * empty, but source and target must not be.  If variant is empty then
 * the special variant NO_VARIANT is stored in slot zero of the
 * UVector of variants.
 ','line_number':923,'multiline':True]['text':' assert(source.length() > 0);','line_number':932,'multiline':False]['text':' assert(target.length() > 0);','line_number':933,'multiline':False]['text':' assert(NO_VARIANT == "");','line_number':953,'multiline':False]['text':' We add the variant string.  If it is the special "no variant"','line_number':954,'multiline':False]['text':' string, that is, the empty string, we add it at position zero.','line_number':955,'multiline':False]['text':' Used for null pointer check.','line_number':957,'multiline':False]['text':' = NO_VARIANT','line_number':964,'multiline':False]['text':'*
 * Remove a source-target/variant from the specDAG.
 ','line_number':972,'multiline':True]['text':' assert(source.length() > 0);','line_number':978,'multiline':False]['text':' assert(target.length() > 0);','line_number':979,'multiline':False]['text':'    UErrorCode status = U_ZERO_ERROR;','line_number':980,'multiline':False]['text':' should never happen for valid s-t/v','line_number':983,'multiline':False]['text':' should never happen for valid s-t/v','line_number':987,'multiline':False]['text':' should delete variants','line_number':991,'multiline':False]['text':' should delete targets','line_number':993,'multiline':False]['text':'*
 * Attempt to find a source-target/variant in the dynamic registry
 * store.  Return 0 on failure.
 *
 * Caller does NOT own returned object.
 ','line_number':998,'multiline':True]['text':'*
 * Attempt to find a source-target/variant in the static locale
 * resource store.  Do not perform fallback.  Return 0 on failure.
 *
 * On success, create a new entry object, register it in the dynamic
 * store, and return a pointer to it, but do not make it public --
 * just because someone requested something, we do not expand the
 * available ID list (or spec DAG).
 *
 * Caller does NOT own returned object.
 ','line_number':1014,'multiline':True]['text':' If we found an entry, store it in the Hashtable for next','line_number':1035,'multiline':False]['text':' time.','line_number':1036,'multiline':False]['text':' As of 2.0, resource bundle keys cannot contain '_'','line_number':1044,'multiline':False]['text':' "TransliterateTo"','line_number':1045,'multiline':False]['text':' "TransliterateFrom"','line_number':1047,'multiline':False]['text':' "Transliterate"','line_number':1049,'multiline':False]['text':'*
 * Attempt to find an entry in a single resource bundle.  This is
 * a one-sided lookup.  findInStaticStore() performs up to two such
 * lookups, one for the source, and one for the target.
 *
 * Do not perform fallback.  Return 0 on failure.
 *
 * On success, create a new Entry object, populate it, and return it.
 * The caller owns the returned object.
 ','line_number':1051,'multiline':True]['text':' First try either TransliteratorTo_xxx or','line_number':1072,'multiline':False]['text':' TransliterateFrom_xxx, then try the bidirectional','line_number':1073,'multiline':False]['text':' Transliterate_xxx.  This precedence order is arbitrary','line_number':1074,'multiline':False]['text':' but must be consistent and documented.','line_number':1075,'multiline':False]['text':' Exit loop successfully','line_number':1101,'multiline':False]['text':' Variant is empty, which means match the first variant listed.','line_number':1105,'multiline':False]['text':' Exit loop successfully','line_number':1109,'multiline':False]['text':' Failed','line_number':1116,'multiline':False]['text':' We have succeeded in loading a string from the locale','line_number':1120,'multiline':False]['text':' resources.  Create a new registry entry to hold it and return it.','line_number':1121,'multiline':False]['text':' The direction is always forward for the','line_number':1124,'multiline':False]['text':' TransliterateTo_xxx and TransliterateFrom_xxx','line_number':1125,'multiline':False]['text':' items; those are unidirectional forward rules.','line_number':1126,'multiline':False]['text':' For the bidirectional Transliterate_xxx items,','line_number':1127,'multiline':False]['text':' the direction is the value passed in to this','line_number':1128,'multiline':False]['text':' function.','line_number':1129,'multiline':False]['text':'*
 * Convenience method.  Calls 3-arg find().
 ','line_number':1139,'multiline':True]['text':'*
 * Top-level find method.  Attempt to find a source-target/variant in
 * either the dynamic or the static (locale resource) store.  Perform
 * fallback.
 * 
 * Lookup sequence for ss_SS_SSS-tt_TT_TTT/v:
 *
 *   ss_SS_SSS-tt_TT_TTT/v -- in hashtable
 *   ss_SS_SSS-tt_TT_TTT/v -- in ss_SS_SSS (no fallback)
 * 
 *     repeat with t = tt_TT_TTT, tt_TT, tt, and tscript
 *
 *     ss_SS_SSS-t/ *
 *     ss_SS-t/ *
 *     ss-t/ *
 *     sscript-t/ *
 *
 * Here * matches the first variant listed.
 *
 * Caller does NOT own returned object.  Return 0 on failure.
 ','line_number':1149,'multiline':True]['text':' Seek exact match in hashtable.  Temporary fix for ICU 4.6.','line_number':1178,'multiline':False]['text':' TODO: The general logic for finding a matching transliterator needs to be reviewed.','line_number':1179,'multiline':False]['text':' ICU ticket #8089','line_number':1180,'multiline':False]['text':' std::string ss;','line_number':1185,'multiline':False]['text':' std::cout << ID.toUTF8String(ss) << std::endl;','line_number':1186,'multiline':False]['text':' Seek exact match in hashtable','line_number':1192,'multiline':False]['text':' Seek exact match in locale resources','line_number':1198,'multiline':False]['text':' Seek match in hashtable','line_number':1208,'multiline':False]['text':' Seek match in locale resources','line_number':1214,'multiline':False]['text':'*
 * Given an Entry object, instantiate it.  Caller owns result.  Return
 * 0 on failure.
 *
 * Return a non-empty aliasReturn value if the ID points to an alias.
 * We cannot instantiate it ourselves because the alias may contain
 * filters or compounds, which we do not understand.  Caller should
 * make aliasReturn empty before calling.
 *
 * The entry object is assumed to reside in the dynamic store.  It may be
 * modified.
 ','line_number':1233,'multiline':True]['text':' Check for null pointer','line_number':1280,'multiline':False]['text':' TODO: Should passNumber be turned into a decimal-string representation (1 -> "1")?','line_number':1287,'multiline':False]['text':' Process the rule data into a TransliteratorRuleData object,','line_number':1314,'multiline':False]['text':' and possibly also into an ::id header and/or footer.  Then','line_number':1315,'multiline':False]['text':' we modify the registry with the parsed data and retry.','line_number':1316,'multiline':False]['text':' We use the file name, taken from another resource bundle','line_number':1320,'multiline':False]['text':' 2-d array at static init time, as a locale language.  We're','line_number':1321,'multiline':False]['text':' just using the locale mechanism to map through to a file','line_number':1322,'multiline':False]['text':' name; this in no way represents an actual locale.','line_number':1323,'multiline':False]['text':'CharString ch(entry->stringArg);','line_number':1324,'multiline':False]['text':'UResourceBundle *bundle = ures_openDirect(0, ch, &status);','line_number':1325,'multiline':False]['text':'ures_close(bundle);','line_number':1327,'multiline':False]['text':'if (U_FAILURE(status)) {','line_number':1329,'multiline':False]['text':' We have a failure of some kind.  Remove the ID from the','line_number':1330,'multiline':False]['text':' registry so we don't keep trying.  NOTE: This will throw off','line_number':1331,'multiline':False]['text':' anyone who is, at the moment, trying to iterate over the','line_number':1332,'multiline':False]['text':' available IDs.  That's acceptable since we should never','line_number':1333,'multiline':False]['text':' really get here except under installation, configuration,','line_number':1334,'multiline':False]['text':' or unrecoverable run time memory failures.','line_number':1335,'multiline':False]['text':'    remove(ID);','line_number':1336,'multiline':False]['text':'} else {','line_number':1337,'multiline':False]['text':' If the status indicates a failure, then we don't have any','line_number':1339,'multiline':False]['text':' rules -- there is probably an installation error.  The list','line_number':1340,'multiline':False]['text':' in the root locale should correspond to all the installed','line_number':1341,'multiline':False]['text':' transliterators; if it lists something that's not','line_number':1342,'multiline':False]['text':' installed, we'll get an error from ResourceBundle.','line_number':1343,'multiline':False]['text':'}','line_number':1350,'multiline':False]['text':' can't get here','line_number':1354,'multiline':False]['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':1360,'multiline':True]['text':'eof','line_number':1362,'multiline':False]