['text':'
**********************************************************************
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*
* File ULOC.CPP
*
* Modification History:
*
*   Date        Name        Description
*   04/01/97    aliu        Creation.
*   08/21/98    stephen     JDK 1.2 sync
*   12/08/98    rtg         New Locale implementation and C API
*   03/15/99    damiba      overhaul.
*   04/06/99    stephen     changed setDefault() to realloc and copy
*   06/14/99    stephen     Changed calls to ures_open for new params
*   07/21/99    stephen     Modified setDefault() to propagate to C++
*   05/14/04    alan        7 years later: refactored, cleaned up, fixed bugs,
*                           brought canonicalization code into line with spec
****************************************************************************','line_number':1,'multiline':True]['text':'
   POSIX's locale format, from putil.c: [no spaces]

     ll [ _CC ] [ . MM ] [ @ VV]

     l = lang, C = ctry, M = charmap, V = variant
','line_number':23,'multiline':True]['text':' for sprintf ','line_number':46,'multiline':True]['text':' ### Declarations *************************************************','line_number':48,'multiline':True]['text':' Locale stuff from locid.cpp ','line_number':50,'multiline':True]['text':' ### Data tables *************************************************','line_number':61,'multiline':True]['text':'*
 * Table of language codes, both 2- and 3-letter, with preference
 * given to 2-letter codes where possible.  Includes 3-letter codes
 * that lack a 2-letter equivalent.
 *
 * This list must be in sorted order.  This list is returned directly
 * to the user by some API.
 *
 * This list must be kept in sync with LANGUAGES_3, with corresponding
 * entries matched.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The first list is visible to
 * user code when this array is returned by API.  The second list
 * contains codes we support, but do not expose through user API.
 *
 * Notes
 *
 * Tables updated per http://lcweb.loc.gov/standards/iso639-2/ to
 * include the revisions up to 2001/7/27 *CWB*
 *
 * The 3 character codes are the terminology codes like RFC 3066.  This
 * is compatible with prior ICU codes
 *
 * "in" "iw" "ji" "jw" & "sh" have been withdrawn but are still in the
 * table but now at the end of the table because 3 character codes are
 * duplicates.  This avoids bad searches going from 3 to 2 character
 * codes.
 *
 * The range qaa-qtz is reserved for local use
 ','line_number':63,'multiline':True]['text':' Generated using org.unicode.cldr.icu.GenerateISO639LanguageTables ','line_number':94,'multiline':True]['text':' ISO639 table version is 20150505 ','line_number':95,'multiline':True]['text':' obsolete language codes ','line_number':182,'multiline':True]['text':'*
 * Table of 3-letter language codes.
 *
 * This is a lookup table used to convert 3-letter language codes to
 * their 2-letter equivalent, where possible.  It must be kept in sync
 * with LANGUAGES.  For all valid i, LANGUAGES[i] must refer to the
 * same language as LANGUAGES_3[i].  The commented-out lines are
 * copied from LANGUAGES to make eyeballing this baby easier.
 *
 * Where a 3-letter language code has no 2-letter equivalent, the
 * 3-letter code occupies both LANGUAGES[i] and LANGUAGES_3[i].
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The two lists correspond to
 * the two lists in LANGUAGES.
 ','line_number':193,'multiline':True]['text':' Generated using org.unicode.cldr.icu.GenerateISO639LanguageTables ','line_number':209,'multiline':True]['text':' ISO639 table version is 20150505 ','line_number':210,'multiline':True]['text':'  "in",  "iw",  "ji",  "jw",  "sh",                          ','line_number':297,'multiline':True]['text':'*
 * Table of 2-letter country codes.
 *
 * This list must be in sorted order.  This list is returned directly
 * to the user by some API.
 *
 * This list must be kept in sync with COUNTRIES_3, with corresponding
 * entries matched.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The first list is visible to
 * user code when this array is returned by API.  The second list
 * contains codes we support, but do not expose through user API.
 *
 * Notes:
 *
 * ZR(ZAR) is now CD(COD) and FX(FXX) is PS(PSE) as per
 * http://www.evertype.com/standards/iso3166/iso3166-1-en.html added
 * new codes keeping the old ones for compatibility updated to include
 * 1999/12/03 revisions *CWB*
 *
 * RO(ROM) is now RO(ROU) according to
 * http://www.iso.org/iso/en/prods-services/iso3166ma/03updates-on-iso-3166/nlv3e-rou.html
 ','line_number':302,'multiline':True]['text':' obsolete country codes ','line_number':358,'multiline':True]['text':' deprecated country list ','line_number':363,'multiline':True]['text':'  "AN", "BU", "CS", "DD", "DY", "FX", "HV", "NH", "RH", "SU", "TP", "UK", "VD", "YD", "YU", "ZR" ','line_number':366,'multiline':True]['text':' replacement country codes ','line_number':367,'multiline':True]['text':'*
 * Table of 3-letter country codes.
 *
 * This is a lookup table used to convert 3-letter country codes to
 * their 2-letter equivalent.  It must be kept in sync with COUNTRIES.
 * For all valid i, COUNTRIES[i] must refer to the same country as
 * COUNTRIES_3[i].  The commented-out lines are copied from COUNTRIES
 * to make eyeballing this baby easier.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The two lists correspond to
 * the two lists in COUNTRIES.
 ','line_number':370,'multiline':True]['text':'  "AD",  "AE",  "AF",  "AG",  "AI",  "AL",  "AM",      ','line_number':384,'multiline':True]['text':'  "AO",  "AQ",  "AR",  "AS",  "AT",  "AU",  "AW",  "AX",  "AZ",     ','line_number':386,'multiline':True]['text':'  "BA",  "BB",  "BD",  "BE",  "BF",  "BG",  "BH",  "BI",     ','line_number':388,'multiline':True]['text':'  "BJ",  "BL",  "BM",  "BN",  "BO",  "BQ",  "BR",  "BS",  "BT",  "BV",     ','line_number':390,'multiline':True]['text':'  "BW",  "BY",  "BZ",  "CA",  "CC",  "CD",  "CF",  "CG",     ','line_number':392,'multiline':True]['text':'  "CH",  "CI",  "CK",  "CL",  "CM",  "CN",  "CO",  "CR",     ','line_number':394,'multiline':True]['text':'  "CU",  "CV",  "CW",  "CX",  "CY",  "CZ",  "DE",  "DJ",  "DK",     ','line_number':396,'multiline':True]['text':'  "DM",  "DO",  "DZ",  "EC",  "EE",  "EG",  "EH",  "ER",     ','line_number':398,'multiline':True]['text':'  "ES",  "ET",  "FI",  "FJ",  "FK",  "FM",  "FO",  "FR",     ','line_number':400,'multiline':True]['text':'  "GA",  "GB",  "GD",  "GE",  "GF",  "GG",  "GH",  "GI",  "GL",     ','line_number':402,'multiline':True]['text':'  "GM",  "GN",  "GP",  "GQ",  "GR",  "GS",  "GT",  "GU",     ','line_number':404,'multiline':True]['text':'  "GW",  "GY",  "HK",  "HM",  "HN",  "HR",  "HT",  "HU",     ','line_number':406,'multiline':True]['text':'  "ID",  "IE",  "IL",  "IM",  "IN",  "IO",  "IQ",  "IR",  "IS" ','line_number':408,'multiline':True]['text':'  "IT",  "JE",  "JM",  "JO",  "JP",  "KE",  "KG",  "KH",  "KI",     ','line_number':410,'multiline':True]['text':'  "KM",  "KN",  "KP",  "KR",  "KW",  "KY",  "KZ",  "LA",     ','line_number':412,'multiline':True]['text':'  "LB",  "LC",  "LI",  "LK",  "LR",  "LS",  "LT",  "LU",     ','line_number':414,'multiline':True]['text':'  "LV",  "LY",  "MA",  "MC",  "MD",  "ME",  "MF",  "MG",  "MH",  "MK",     ','line_number':416,'multiline':True]['text':'  "ML",  "MM",  "MN",  "MO",  "MP",  "MQ",  "MR",  "MS",     ','line_number':418,'multiline':True]['text':'  "MT",  "MU",  "MV",  "MW",  "MX",  "MY",  "MZ",  "NA",     ','line_number':420,'multiline':True]['text':'  "NC",  "NE",  "NF",  "NG",  "NI",  "NL",  "NO",  "NP",     ','line_number':422,'multiline':True]['text':'  "NR",  "NU",  "NZ",  "OM",  "PA",  "PE",  "PF",  "PG",     ','line_number':424,'multiline':True]['text':'  "PH",  "PK",  "PL",  "PM",  "PN",  "PR",  "PS",  "PT",     ','line_number':426,'multiline':True]['text':'  "PW",  "PY",  "QA",  "RE",  "RO",  "RS",  "RU",  "RW",  "SA",     ','line_number':428,'multiline':True]['text':'  "SB",  "SC",  "SD",  "SE",  "SG",  "SH",  "SI",  "SJ",     ','line_number':430,'multiline':True]['text':'  "SK",  "SL",  "SM",  "SN",  "SO",  "SR",  "SS",  "ST",  "SV",     ','line_number':432,'multiline':True]['text':'  "SX",  "SY",  "SZ",  "TC",  "TD",  "TF",  "TG",  "TH",  "TJ",     ','line_number':434,'multiline':True]['text':'  "TK",  "TL",  "TM",  "TN",  "TO",  "TR",  "TT",  "TV",     ','line_number':436,'multiline':True]['text':'  "TW",  "TZ",  "UA",  "UG",  "UM",  "US",  "UY",  "UZ",     ','line_number':438,'multiline':True]['text':'  "VA",  "VC",  "VE",  "VG",  "VI",  "VN",  "VU",  "WF",     ','line_number':440,'multiline':True]['text':'  "WS",  "YE",  "YT",  "ZA",  "ZM",  "ZW",          ','line_number':442,'multiline':True]['text':'  "AN",  "BU",  "CS",  "FX",  "RO", "SU",  "TP",  "YD",  "YU",  "ZR" ','line_number':445,'multiline':True]['text':' input ID ','line_number':451,'multiline':True]['text':' canonicalized output ID ','line_number':452,'multiline':True]['text':' keyword, or NULL if none ','line_number':453,'multiline':True]['text':' keyword value, or NULL if kw==NULL ','line_number':454,'multiline':True]['text':'*
 * A map to canonicalize locale IDs.  This handles a variety of
 * different semantic kinds of transformations.
 ','line_number':457,'multiline':True]['text':' .NET name ','line_number':462,'multiline':True]['text':' POSIX name ','line_number':463,'multiline':True]['text':' POSIX name (alias of C) ','line_number':464,'multiline':True]['text':' registered name ','line_number':465,'multiline':True]['text':' .NET name ','line_number':466,'multiline':True]['text':' .NET name ','line_number':467,'multiline':True]['text':' Old ICU name ','line_number':469,'multiline':True]['text':' Old ICU name ','line_number':476,'multiline':True]['text':' Old ICU name ','line_number':485,'multiline':True]['text':' Old ICU name ','line_number':487,'multiline':True]['text':' "markus said this was ok" :-) ','line_number':488,'multiline':True]['text':' .NET name ','line_number':492,'multiline':True]['text':' .NET name ','line_number':493,'multiline':True]['text':' Linux name ','line_number':494,'multiline':True]['text':' Old ICU name ','line_number':495,'multiline':True]['text':' Linux name ','line_number':496,'multiline':True]['text':' .NET name ','line_number':497,'multiline':True]['text':' .NET name ','line_number':498,'multiline':True]['text':' .NET name ','line_number':499,'multiline':True]['text':' .NET name ','line_number':500,'multiline':True]['text':' registered name ','line_number':501,'multiline':True]['text':' registered name ','line_number':502,'multiline':True]['text':' registered name ','line_number':503,'multiline':True]['text':' registered name ','line_number':504,'multiline':True]['text':' registered name ','line_number':505,'multiline':True]['text':' registered name ','line_number':506,'multiline':True]['text':' registered name ','line_number':507,'multiline':True]['text':' input ID ','line_number':511,'multiline':True]['text':' keyword, or NULL if none ','line_number':512,'multiline':True]['text':' keyword value, or NULL if kw==NULL ','line_number':513,'multiline':True]['text':' Solaris variant ','line_number':518,'multiline':True]['text':' Solaris variant ','line_number':519,'multiline':True]['text':' ### BCP47 Conversion ******************************************','line_number':522,'multiline':True]['text':' Test if the locale id has BCP47 u extension and does not have '@' ','line_number':523,'multiline':True]['text':' Converts the BCP47 id to Unicode id. Does nothing to id if conversion fails ','line_number':525,'multiline':True]['text':' Gets the size of the shortest subtag in the given localeID. ','line_number':532,'multiline':True]['text':' ### Keywords *************************************************','line_number':558,'multiline':True]['text':' We do this because the @ sign is variant, and the @ sign used on one
        EBCDIC machine won't be compiled the same way on other EBCDIC based
        machines. ','line_number':571,'multiline':True]['text':'*
 * @param buf buffer of size [ULOC_KEYWORD_BUFFER_LEN]
 * @param keywordName incoming name to be canonicalized
 * @param status return status (keyword too long)
 * @return length of the keyword name
 ','line_number':587,'multiline':True]['text':' keyword name too long for internal buffer ','line_number':599,'multiline':True]['text':' normalize the keyword name ','line_number':604,'multiline':True]['text':'context','line_number':621,'multiline':True]['text':'*
 * Both addKeyword and addValue must already be in canonical form.
 * Either both addKeyword and addValue are NULL, or neither is NULL.
 * If they are not NULL they must be zero terminated.
 * If addKeyword is not NULL is must have length small enough to fit in KeywordStruct.keyword.
 ','line_number':627,'multiline':True]['text':' start of keyword definition ','line_number':654,'multiline':True]['text':' we will grab pairs, trim spaces, lowercase keywords, sort and return ','line_number':655,'multiline':True]['text':' skip leading spaces ','line_number':658,'multiline':True]['text':' handle trailing "; " ','line_number':662,'multiline':True]['text':' lack of '=' [foo@currency] is illegal ','line_number':671,'multiline':True]['text':' ';' before '=' [foo@currency;collation=pinyin] is illegal ','line_number':672,'multiline':True]['text':' need to normalize both keyword and keyword name ','line_number':677,'multiline':True]['text':' keyword name too long for internal buffer ','line_number':679,'multiline':True]['text':' zero-length keyword is an error. ','line_number':689,'multiline':True]['text':' now grab the value part. First we skip the '=' ','line_number':697,'multiline':True]['text':' then we leading spaces ','line_number':699,'multiline':True]['text':' Premature end or zero-length value ','line_number':704,'multiline':True]['text':' If this is a duplicate keyword, then ignore it ','line_number':727,'multiline':True]['text':' Handle addKeyword/addValue. ','line_number':739,'multiline':True]['text':' Search for duplicate; if found, do nothing. Explicit keyword
               overrides addKeyword. ','line_number':743,'multiline':True]['text':' now we have a list of keywords ','line_number':766,'multiline':True]['text':' we need to sort it ','line_number':767,'multiline':True]['text':' Now construct the keyword part ','line_number':770,'multiline':True]['text':' TODO: REVISIT: shouldn't this be locale_getKeywordsStart ? ','line_number':849,'multiline':True]['text':' no keywords, return at once ','line_number':851,'multiline':True]['text':' find the first keyword ','line_number':860,'multiline':True]['text':' skip leading spaces (allowed?) ','line_number':863,'multiline':True]['text':' need to normalize both keyword and keyword name ','line_number':868,'multiline':True]['text':' keyword name too long for internal buffer ','line_number':873,'multiline':True]['text':' trim trailing spaces ','line_number':880,'multiline':True]['text':' we actually found the keyword. Copy the value ','line_number':894,'multiline':True]['text':' last item in string ','line_number':901,'multiline':True]['text':' give a bigger buffer, please ','line_number':909,'multiline':True]['text':' TODO: sorting. removal. ','line_number':930,'multiline':True]['text':' is the keyword at the end of the string? ','line_number':936,'multiline':True]['text':' The capacity is less than the length?! Is this NULL terminated? ','line_number':956,'multiline':True]['text':' no keywords = nothing to remove ','line_number':974,'multiline':True]['text':' had a single @ ','line_number':979,'multiline':True]['text':' already had the @ ','line_number':980,'multiline':True]['text':' startSearchHere points at the @ ','line_number':981,'multiline':True]['text':' no change ','line_number':987,'multiline':True]['text':' end shortcut - no @ ','line_number':998,'multiline':True]['text':' search for keyword ','line_number':1001,'multiline':True]['text':' skip leading spaces (allowed?) ','line_number':1004,'multiline':True]['text':' need to normalize both keyword and keyword name ','line_number':1009,'multiline':True]['text':' keyword name too long for internal buffer ','line_number':1014,'multiline':True]['text':' trim trailing spaces ','line_number':1021,'multiline':True]['text':' we actually found the keyword. Change the value ','line_number':1035,'multiline':True]['text':' adding a value - not removing ','line_number':1043,'multiline':True]['text':' no change in size ','line_number':1046,'multiline':True]['text':' RH side ','line_number':1049,'multiline':True]['text':' FVL < KVL ','line_number':1056,'multiline':True]['text':' RH side ','line_number':1062,'multiline':True]['text':' removing a keyword ','line_number':1070,'multiline':True]['text':' zero out the ';' or '@' just before startSearchhere ','line_number':1072,'multiline':True]['text':' (string length without keyword) minus separator ','line_number':1074,'multiline':True]['text':' end match keyword ','line_number':1081,'multiline':True]['text':' could insert at this location. ','line_number':1082,'multiline':True]['text':' end loop searching ','line_number':1086,'multiline':True]['text':' removal of non-extant keyword - no change ','line_number':1089,'multiline':True]['text':' we know there is at least one keyword. ','line_number':1092,'multiline':True]['text':' no change ','line_number':1096,'multiline':True]['text':' terminates. ','line_number':1111,'multiline':True]['text':' ### ID parsing implementation *************************************************','line_number':1121,'multiline':True]['text':'returns TRUE if one of the special prefixes is here (s=string)
  'x-' or 'i-' ','line_number':1125,'multiline':True]['text':' Dot terminates it because of POSIX form  where dot precedes the codepage
 * except for variant
 ','line_number':1129,'multiline':True]['text':'*
 * Lookup 'key' in the array 'list'.  The array 'list' should contain
 * a NULL entry, followed by more entries, and a second NULL entry.
 *
 * The 'list' param should be LANGUAGES, LANGUAGES_3, COUNTRIES, or
 * COUNTRIES_3.
 ','line_number':1148,'multiline':True]['text':' Make two passes through two NULL-terminated arrays at 'list' ','line_number':1160,'multiline':True]['text':' skip final NULL *CWB','line_number':1168,'multiline':True]['text':' count the length of src while copying it to dest; return strlen(src) ','line_number':1173,'multiline':True]['text':'
 * the internal functions _getLanguage(), _getCountry(), _getVariant()
 * avoid duplicating code to handle the earlier locale ID pieces
 * in the functions for the later ones by
 * setting the *pEnd pointer to where they stopped parsing
 *
 * TODO try to use this in Locale
 ','line_number':1209,'multiline':True]['text':' temporary buffer to hold language code for searching ','line_number':1223,'multiline':True]['text':' if it starts with i- or x- then copy that prefix ','line_number':1225,'multiline':True]['text':' copy the language as far as possible and count its length ','line_number':1237,'multiline':True]['text':' convert 3 character code to 2 character code if possible *CWB','line_number':1251,'multiline':True]['text':' copy the second item as far as possible and count its length ','line_number':1275,'multiline':True]['text':' If it's exactly 4 characters long, then it's a script and not a country. ','line_number':1281,'multiline':True]['text':' copy the country as far as possible and count its length ','line_number':1312,'multiline':True]['text':'CWB','line_number':1314,'multiline':True]['text':' the country should be either length 2 or 3 ','line_number':1320,'multiline':True]['text':' convert 3 character code to 2 character code if possible *CWB','line_number':1323,'multiline':True]['text':'*
 * @param needSeparator if true, then add leading '_' if any variants
 * are added to 'variant'
 ','line_number':1351,'multiline':True]['text':' get one or more variant tags and separate them with '_' ','line_number':1362,'multiline':True]['text':' get a variant string after a '-' or '_' ','line_number':1364,'multiline':True]['text':' if there is no variant tag after a '-' or '_' then look for '@' ','line_number':1384,'multiline':True]['text':' keep localeID ','line_number':1387,'multiline':True]['text':' point after the '@' ','line_number':1389,'multiline':True]['text':'*
 * Delete ALL instances of a variant from the given list of one or
 * more variants.  Example: "FOO_EURO_BAR_EURO" => "FOO_BAR".
 * @param variants the source string of one or more variants,
 * separated by '_'.  This will be MODIFIED IN PLACE.  Not zero
 * terminated; if it is, trailing zero will NOT be maintained.
 * @param variantsLen length of variants
 * @param toDelete variant to delete, without separators, e.g.  "EURO"
 * or "PREEURO"; not zero terminated
 * @param toDeleteLen length of toDelete
 * @return number of characters deleted from variants
 ','line_number':1422,'multiline':True]['text':' number of chars deleted ','line_number':1438,'multiline':True]['text':' Keyword enumeration ','line_number':1466,'multiline':True]['text':'status','line_number':1481,'multiline':True]['text':'status','line_number':1494,'multiline':True]['text':'status','line_number':1511,'multiline':True]['text':' Null pointer test ','line_number':1535,'multiline':True]['text':' Skip the language ','line_number':1578,'multiline':True]['text':' Skip the script if available ','line_number':1582,'multiline':True]['text':' Found optional script ','line_number':1585,'multiline':True]['text':' Skip the Country ','line_number':1588,'multiline':True]['text':' keywords are located after '@' ','line_number':1597,'multiline':True]['text':' bit-flags for 'options' parameter of _canonicalize ','line_number':1610,'multiline':True]['text':'*
 * Canonicalize the given localeID, to level 1 or to level 2,
 * depending on the options.  To specify level 1, pass in options=0.
 * To specify level 2, pass in options=_ULOC_CANONICALIZE.
 *
 * This is the code underlying uloc_getName and uloc_canonicalize.
 ','line_number':1619,'multiline':True]['text':' pointer into name, or NULL ','line_number':1642,'multiline':True]['text':' if we are doing a full canonicalization, then put results in
       localeBuffer, if necessary; otherwise send them to result. ','line_number':1659,'multiline':True]['text':'OPTION_SET(options, _ULOC_CANONICALIZE) &&','line_number':1661,'multiline':True]['text':' get all pieces, one after another, and separate with '_' ','line_number':1670,'multiline':True]['text':' Found optional script ','line_number':1693,'multiline':True]['text':' If there is something else, then we add the _ ','line_number':1698,'multiline':True]['text':' Found optional country ','line_number':1711,'multiline':True]['text':' If there is something else, then we add the _  if we found country before. ','line_number':1716,'multiline':True]['text':' skip '_' and variant ','line_number':1730,'multiline':True]['text':' Copy POSIX-style charset specifier, if any [mr.utf8] ','line_number':1736,'multiline':True]['text':' Scan ahead to next '@' and determine if it is followed by '=' and/or ';'
       After this, tmpLocaleID either points to '@' or is NULL ','line_number':1757,'multiline':True]['text':' Copy POSIX-style variant, if any [mr@FOO] ','line_number':1764,'multiline':True]['text':' Handle @FOO variant if @ is present and not followed by = ','line_number':1781,'multiline':True]['text':' Add missing '_' if needed ','line_number':1784,'multiline':True]['text':' Handle generic variants first ','line_number':1805,'multiline':True]['text':' delete trailing '_' ','line_number':1813,'multiline':True]['text':' delete trailing '_' ','line_number':1821,'multiline':True]['text':' Look up the ID in the canonicalization map ','line_number':1826,'multiline':True]['text':' Don't remap "" if keywords present ','line_number':1832,'multiline':True]['text':' inelegant but works -- later make _getKeywords do this? ','line_number':1856,'multiline':True]['text':' ### ID parsing API *************************************************','line_number':1871,'multiline':True]['text':' uloc_getLanguage will return a 2 character iso-639 code if one exists. *CWB','line_number':1907,'multiline':True]['text':' skip the language ','line_number':1938,'multiline':True]['text':' Skip the language ','line_number':1962,'multiline':True]['text':' Skip the script if available ','line_number':1966,'multiline':True]['text':' Found optional script ','line_number':1969,'multiline':True]['text':' Skip the language ','line_number':2002,'multiline':True]['text':' Skip the script if available ','line_number':2006,'multiline':True]['text':' Found optional script ','line_number':2009,'multiline':True]['text':' Skip the Country ','line_number':2012,'multiline':True]['text':' Found optional country ','line_number':2017,'multiline':True]['text':' If there was no country ID, skip a possible extra IDSeparator ','line_number':2021,'multiline':True]['text':' removed by weiv. We don't want to handle POSIX variants anymore. Use canonicalization function ','line_number':2030,'multiline':True]['text':' if we do not have a variant tag yet then try a POSIX variant after '@' ','line_number':2031,'multiline':True]['text':'
    if(!haveVariant && (localeID=uprv_strrchr(localeID, '@'))!=NULL) {
        i=_getVariant(localeID+1, '@', variant, variantCapacity);
    }
','line_number':2032,'multiline':True]['text':' uprv_convertToLCID does not support keywords other than collation.','line_number':2120,'multiline':False]['text':' Remove all keywords except collation.','line_number':2121,'multiline':False]['text':' fall through - all keywords are simply ignored','line_number':2148,'multiline':False]['text':' ### Default locale *************************************************','line_number':2162,'multiline':True]['text':' the error code isn't currently used for anything by this function','line_number':2176,'multiline':True]['text':' propagate change to C++ ','line_number':2178,'multiline':True]['text':'*
 * Returns a list of all 2-letter language codes defined in ISO 639.  This is a pointer
 * to an array of pointers to arrays of char.  All of these pointers are owned
 * by ICU-- do not delete them, and do not write through them.  The array is
 * terminated with a null pointer.
 ','line_number':2182,'multiline':True]['text':'*
 * Returns a list of all 2-letter country codes defined in ISO 639.  This is a
 * pointer to an array of pointers to arrays of char.  All of these pointers are
 * owned by ICU-- do not delete them, and do not write through them.  The array is
 * terminated with a null pointer.
 ','line_number':2194,'multiline':True]['text':' this function to be moved into cstring.c later ','line_number':2207,'multiline':True]['text':' U_CAPI ','line_number':2210,'multiline':True]['text':' U_EXPORT2 ','line_number':2212,'multiline':True]['text':' For machines that decide to change the decimal on you,
        and try to be too smart with localization.
        This normally should be just a '.'. ','line_number':2220,'multiline':True]['text':' fall through to OS ','line_number':2228,'multiline':True]['text':' no decimal point ','line_number':2236,'multiline':True]['text':' cast away const (to follow uprv_strtod API.) ','line_number':2240,'multiline':True]['text':' to avoid uninitialized memory copy from qsort ','line_number':2248,'multiline':True]['text':'context','line_number':2253,'multiline':True]['text':' A > B ','line_number':2260,'multiline':True]['text':' A < B ','line_number':2262,'multiline':True]['text':' A = B ','line_number':2264,'multiline':True]['text':'  fprintf(stderr, "a:[%s:%g], b:[%s:%g] -> %d\n", 
    aa->locale, aa->q, 
    bb->locale, bb->q,
    rc);','line_number':2272,'multiline':True]['text':' 
mt-mt, ja;q=0.76, en-us;q=0.95, en;q=0.92, en-gb;q=0.89, fr;q=0.87, iu-ca;q=0.84, iu;q=0.82, ja-jp;q=0.79, mt;q=0.97, de-de;q=0.74, de;q=0.71, es;q=0.68, it-it;q=0.66, it;q=0.63, vi-vn;q=0.61, vi;q=0.58, nl-nl;q=0.55, nl;q=0.53
','line_number':2281,'multiline':True]['text':' Use for null pointer check ','line_number':2304,'multiline':True]['text':' eat space at the beginning ','line_number':2313,'multiline':True]['text':' end of string ','line_number':2318,'multiline':True]['text':' semicolon (;) is closer than end (,) ','line_number':2321,'multiline':True]['text':' no semicolon - it's 1.0 ','line_number':2337,'multiline':True]['text':' eat spaces prior to semi ','line_number':2342,'multiline':True]['text':' Check for null pointer from uprv_strndup ','line_number':2345,'multiline':True]['text':'fprintf(stderr,"%d: s <%s> q <%g>\n", n, j[n].locale, j[n].q);','line_number':2358,'multiline':True]['text':' eat duplicate commas ','line_number':2362,'multiline':True]['text':' overflowed the small buffer. ','line_number':2366,'multiline':True]['text':' Check for null pointer ','line_number':2398,'multiline':True]['text':' Free to avoid memory leak ','line_number':2400,'multiline':True]['text':'fprintf(stderr,"%d: s <%s> q <%g>\n", i, j[i].locale, j[i].q);','line_number':2406,'multiline':True]['text':' save off parent info ','line_number':2477,'multiline':True]['text':' unknown keyword, but syntax is fine..','line_number':2540,'multiline':False]['text':' unknown keyword, but syntax is fine..','line_number':2551,'multiline':False]['text':' Checks if the specified locale key is well-formed with the legacy locale syntax.','line_number':2599,'multiline':False]['text':'','line_number':2600,'multiline':False]['text':' Note:','line_number':2601,'multiline':False]['text':'  Neither ICU nor LDML/CLDR provides the definition of keyword syntax.','line_number':2602,'multiline':False]['text':'  However, a key should not contain '=' obviously. For now, all existing','line_number':2603,'multiline':False]['text':'  keys are using ASCII alphabetic letters only. We won't add any new key','line_number':2604,'multiline':False]['text':'  that is not compatible with the BCP 47 syntax. Therefore, we assume','line_number':2605,'multiline':False]['text':'  a valid key consist from [0-9a-zA-Z], no symbols.','line_number':2606,'multiline':False]['text':' Checks if the specified locale type is well-formed with the legacy locale syntax.','line_number':2619,'multiline':False]['text':'','line_number':2620,'multiline':False]['text':' Note:','line_number':2621,'multiline':False]['text':'  Neither ICU nor LDML/CLDR provides the definition of keyword syntax.','line_number':2622,'multiline':False]['text':'  However, a type should not contain '=' obviously. For now, all existing','line_number':2623,'multiline':False]['text':'  types are using ASCII alphabetic letters with a few symbol letters. We won't','line_number':2624,'multiline':False]['text':'  add any new type that is not compatible with the BCP 47 syntax except timezone','line_number':2625,'multiline':False]['text':'  IDs. For now, we assume a valid type start with [0-9a-zA-Z], but may contain','line_number':2626,'multiline':False]['text':'  '-' '_' '/' in the middle.','line_number':2627,'multiline':False]['text':'eof','line_number':2635,'multiline':True]