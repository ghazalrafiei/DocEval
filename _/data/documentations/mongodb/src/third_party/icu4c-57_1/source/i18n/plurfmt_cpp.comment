['text':'
*******************************************************************************
* Copyright (C) 2009-2015, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File PLURFMT.CPP
*******************************************************************************
','line_number':1,'multiline':True]['text':' "other"','line_number':30,'multiline':False]['text':' Get the appropriate sub-message.','line_number':259,'multiline':False]['text':' Select it based on the formatted number-offset.','line_number':260,'multiline':False]['text':' could be BigDecimal etc.','line_number':281,'multiline':False]['text':' Replace syntactic # signs in the top level of this sub-message','line_number':299,'multiline':False]['text':' (not in nested arguments) with the formatted number-offset.','line_number':300,'multiline':False]['text':' implies same offset','line_number':395,'multiline':False]['text':'source','line_number':409,'multiline':True]['text':'result','line_number':410,'multiline':True]['text':' Parsing not supported.','line_number':413,'multiline':False]['text':' The keyword is empty until we need to match against a non-explicit, not-"other" value.','line_number':432,'multiline':False]['text':' Then we get the keyword from the selector.','line_number':433,'multiline':False]['text':' (In other words, we never call the selector if we match against an explicit value,','line_number':434,'multiline':False]['text':' or if the only non-explicit keyword is "other".)','line_number':435,'multiline':False]['text':' When we find a match, we set msgStart>0 and also set this boolean to true','line_number':438,'multiline':False]['text':' to avoid matching the keyword again (duplicates are allowed)','line_number':439,'multiline':False]['text':' while we continue to look for an explicit-value match.','line_number':440,'multiline':False]['text':' msgStart is 0 until we find any appropriate sub-message.','line_number':442,'multiline':False]['text':' We remember the first "other" sub-message if we have not seen any','line_number':443,'multiline':False]['text':' appropriate sub-message before.','line_number':444,'multiline':False]['text':' We remember the first matching-keyword sub-message if we have not seen','line_number':445,'multiline':False]['text':' one of those before.','line_number':446,'multiline':False]['text':' (The parser allows [does not check for] duplicate keywords.','line_number':447,'multiline':False]['text':' We just have to make sure to take the first one.)','line_number':448,'multiline':False]['text':' We avoid matching the keyword twice by also setting haveKeywordMatch=true','line_number':449,'multiline':False]['text':' at the first keyword match.','line_number':450,'multiline':False]['text':' We keep going until we find an explicit-value match or reach the end of the plural style.','line_number':451,'multiline':False]['text':' Iterate over (ARG_SELECTOR [ARG_INT|ARG_DOUBLE] message) tuples','line_number':453,'multiline':False]['text':' until ARG_LIMIT or end of plural-only pattern.','line_number':454,'multiline':False]['text':' part is an ARG_SELECTOR followed by an optional explicit value, and then a message','line_number':462,'multiline':False]['text':' explicit value like "=2"','line_number':464,'multiline':False]['text':' matches explicit value','line_number':467,'multiline':False]['text':' plural keyword like "few" or "other"','line_number':471,'multiline':False]['text':' Compare "other" first and call the selector if this is not "other".','line_number':472,'multiline':False]['text':' This is the first "other" sub-message,','line_number':477,'multiline':False]['text':' and the selected keyword is also "other".','line_number':478,'multiline':False]['text':' Do not match "other" again.','line_number':479,'multiline':False]['text':' We have already seen an "other" sub-message.','line_number':487,'multiline':False]['text':' Do not match "other" again.','line_number':488,'multiline':False]['text':' Skip keyword matching but do getLimitPartIndex().','line_number':490,'multiline':False]['text':' keyword matches','line_number':494,'multiline':False]['text':' Do not match this keyword again.','line_number':496,'multiline':False]['text':' If no pattern was applied, return null.','line_number':507,'multiline':False]['text':' The keyword is null until we need to match against a non-explicit, not-"other" value.','line_number':521,'multiline':False]['text':' Then we get the keyword from the selector.','line_number':522,'multiline':False]['text':' (In other words, we never call the selector if we match against an explicit value,','line_number':523,'multiline':False]['text':' or if the only non-explicit keyword is "other".)','line_number':524,'multiline':False]['text':' Iterate over (ARG_SELECTOR ARG_START message ARG_LIMIT) tuples','line_number':529,'multiline':False]['text':' until the end of the plural-only pattern.','line_number':530,'multiline':False]['text':' Bad format','line_number':534,'multiline':False]['text':' Bad format','line_number':540,'multiline':False]['text':' Bad format','line_number':546,'multiline':False]['text':' If lenient parsing is turned ON, we've got some time consuming parsing ahead of us.','line_number':552,'multiline':False]['text':' Not found!','line_number':572,'multiline':False]['text':'ec','line_number':584,'multiline':True]['text':' unused except in the assertion','line_number':585,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':599,'multiline':True]['text':'eof','line_number':601,'multiline':False]