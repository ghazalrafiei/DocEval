['text':'
******************************************************************************
* Copyright (C) 2015, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*
* File UNIFIEDCACHE.H - The ICU Unified cache.
******************************************************************************
','line_number':1,'multiline':True]['text':' for 'typeid' to work','line_number':14,'multiline':False]['text':'*
 * A base class for all cache keys.
 ','line_number':30,'multiline':True]['text':'*
    * Copy constructor. Needed to support cloning.
    ','line_number':37,'multiline':True]['text':'*
    * Returns the hash code for this object.
    ','line_number':44,'multiline':True]['text':'*
    * Clones this object polymorphically. Caller owns returned value.
    ','line_number':49,'multiline':True]['text':'*
    * Equality operator.
    ','line_number':54,'multiline':True]['text':'*
    * Create a new object for this key. Called by cache on cache miss.
    * createObject must add a reference to the object it returns. Note
    * that getting an object from the cache and returning it without calling
    * removeRef on it satisfies this requirement. It can also return NULL
    * and set status to an error.
    *
    * @param creationContext the context in which the object is being
    *                        created. May be NULL.
    * @param status          Implementations can return a failure here.
    *                        In addition, implementations may return a
    *                        non NULL object and set a warning status.
    ','line_number':59,'multiline':True]['text':'*
    * Writes a description of this key to buffer and returns buffer. Written
    * description is NULL terminated.
    ','line_number':75,'multiline':True]['text':'*
    * Inequality operator.
    ','line_number':81,'multiline':True]['text':'*
 * Templated version of CacheKeyBase. 
 * A key of type LocaleCacheKey<T> maps to a value of type T.
 ','line_number':95,'multiline':True]['text':'*
    * The template parameter, T, determines the hash code returned.
    ','line_number':103,'multiline':True]['text':'*
    * Use the value type, T,  as the description.
    ','line_number':111,'multiline':True]['text':'*
    * Two objects are equal if they are of the same type.
    ','line_number':121,'multiline':True]['text':'*
 * Cache key based on locale.
 * A key of type LocaleCacheKey<T> maps to a value of type T.
 ','line_number':129,'multiline':True]['text':' reflexive','line_number':146,'multiline':False]['text':' We know this and other are of same class because operator== on','line_number':153,'multiline':False]['text':' CacheKey returned true.','line_number':154,'multiline':False]['text':'*
    * Use the locale id as the description.
    ','line_number':164,'multiline':True]['text':'*
 * The unified cache. A singleton type.
 * Design doc here:
 * https://docs.google.com/document/d/1RwGQJs4N4tawNbf809iYDRCvXoMKqDJihxzYt1ysmd8/edit?usp=sharing
 ','line_number':176,'multiline':True]['text':'*
    * @internal
    * Do not call directly. Instead use UnifiedCache::getInstance() as
    * there should be only one UnifiedCache in an application.
    ','line_number':183,'multiline':True]['text':'*
    * Returns the cache instance.
    ','line_number':190,'multiline':True]['text':'*
    * Fetches a value from the cache by key. Equivalent to
    * get(key, NULL, ptr, status);
    ','line_number':195,'multiline':True]['text':'*
    * Fetches value from the cache by key.
    *
    * @param key             the cache key.
    * @param creationContext passed verbatim to createObject method of key
    * @param ptr             On entry, ptr must be NULL or be included if
    *                        the reference count of the object it points
    *                        to. On exit, ptr points to the fetched object
    *                        from the cache or is left unchanged on
    *                        failure. Caller must call removeRef on ptr
    *                        if set to a non NULL value.
    * @param status          Any error returned here. May be set to a
    *                        warning value even if ptr is set.
    ','line_number':207,'multiline':True]['text':' Take care not to overwrite a warning status passed in with','line_number':238,'multiline':False]['text':' another warning or U_ZERO_ERROR.','line_number':239,'multiline':False]['text':'*
    * Dumps the contents of this cache to standard error. Used for testing of
    * cache only.
    ','line_number':246,'multiline':True]['text':'*
    * Convenience method to get a value of type T from cache for a
    * particular locale with creationContext == NULL.
    * @param loc    the locale
    * @param ptr    On entry, must be NULL or included in the ref count
    *               of the object to which it points.
    *               On exit, fetched value stored here or is left
    *               unchanged on failure. Caller must call removeRef on
    *               ptr if set to a non NULL value.
    * @param status Any error returned here. May be set to a
    *               warning value even if ptr is set.
    ','line_number':253,'multiline':True]['text':'*
    * Dumps the cache contents to stderr. For testing only.
    ','line_number':276,'multiline':True]['text':'*
    * Returns the number of keys in this cache. For testing only.
    ','line_number':282,'multiline':True]['text':'*
    * Removes any values from cache that are not referenced outside
    * the cache.
    ','line_number':287,'multiline':True]['text':'*
    * Configures at what point evcition of unused entries will begin.
    * Eviction is triggered whenever the number of unused entries exeeds
    * BOTH count AND (number of in-use items) * (percentageOfInUseItems / 100).
    * Once the number of unused entries drops below one of these,
    * eviction ceases. Because eviction happens incrementally,
    * the actual unused entry count may exceed both these numbers
    * from time to time.
    *
    * A cache entry is defined as unused if it is not essential to guarantee
    * that for a given key X, the cache returns the same reference to the
    * same value as long as the client already holds a reference to that
    * value.
    *
    * If this method is never called, the default settings are 1000 and 100%.
    *
    * Although this method is thread-safe, it is designed to be called at
    * application startup. If it is called in the middle of execution, it
    * will have no immediate effect on the cache. However over time, the
    * cache will perform eviction slices in an attempt to honor the new
    * settings.
    *
    * If a client already holds references to many different unique values
    * in the cache such that the number of those unique values far exeeds
    * "count" then the cache may not be able to maintain this maximum.
    * However, if this happens, the cache still guarantees that the number of
    * unused entries will remain only a small percentage of the total cache
    * size.
    *
    * If the parameters passed are negative, setEvctionPolicy sets status to
    * U_ILLEGAL_ARGUMENT_ERROR.
    ','line_number':293,'multiline':True]['text':'*
    * Returns how many entries have been auto evicted during the lifetime
    * of this cache. This only includes auto evicted entries, not
    * entries evicted because of a call to flush().
    ','line_number':329,'multiline':True]['text':'*
    * Returns the unused entry count in this cache. For testing only,
    * Regular clients will not need this.
    ','line_number':336,'multiline':True]