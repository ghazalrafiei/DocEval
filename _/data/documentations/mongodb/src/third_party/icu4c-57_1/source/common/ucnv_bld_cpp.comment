['text':'
 ********************************************************************
 * COPYRIGHT:
 * Copyright (c) 1996-2016, International Business Machines Corporation and
 * others. All Rights Reserved.
 ********************************************************************
 *
 *  ucnv_bld.cpp:
 *
 *  Defines functions that are used in the creation/initialization/deletion
 *  of converters and related structures.
 *  uses uconv_io.h routines to access disk information
 *  is used by ucnv.h to implement public API create/delete/flushCache routines
 * Modification History:
 *
 *   Date        Name        Description
 *
 *   06/20/2000  helena      OS/400 port changes; mostly typecast.
 *   06/29/2000  helena      Major rewrite of the callback interface.
','line_number':1,'multiline':True]['text':' Please keep this in binary sorted order for getAlgorithmicTypeFromName.
   Also the name should be in lower case and all spaces, dashes and underscores
   removed
','line_number':118,'multiline':True]['text':'initializes some global variables ','line_number':193,'multiline':True]['text':' Mutex for synchronizing cnv cache access. ','line_number':195,'multiline':True]['text':'  Note:  the global mutex is used for      ','line_number':196,'multiline':True]['text':'         reference count updates.          ','line_number':197,'multiline':True]['text':' This contains the resolved converter name. So no further alias lookup is needed again. ','line_number':205,'multiline':True]['text':' +1 for NULL ','line_number':206,'multiline':True]['text':'
If the default converter is an algorithmic converter, this is the cached value.
We don't cache a full UConverter and clone it because ucnv_clone doesn't have
less overhead than an algorithmic open. We don't cache non-algorithmic converters
because ucnv_flushCache must be able to unload the default converter and its table.
','line_number':209,'multiline':True]['text':' Does gDefaultConverterName have a converter option and require extra parsing? ','line_number':217,'multiline':True]['text':' !U_CHARSET_IS_UTF8 ','line_number':220,'multiline':True]['text':' ucnv_flushAvailableConverterCache. This is only called from ucnv_cleanup().
 *                       If it is ever to be called from elsewhere, synchronization 
 *                       will need to be considered.
 ','line_number':224,'multiline':True]['text':' ucnv_cleanup - delete all storage held by the converter cache, except any  ','line_number':238,'multiline':True]['text':'                in use by open converters.                                  ','line_number':239,'multiline':True]['text':'                Not thread safe.                                            ','line_number':240,'multiline':True]['text':'                Not supported API.                                          ','line_number':241,'multiline':True]['text':' Isn't called from flushCache because other threads may have preexisting references to the table. ','line_number':249,'multiline':True]['text':'context','line_number':263,'multiline':True]['text':'type','line_number':264,'multiline':True]['text':'name','line_number':264,'multiline':True]['text':' dataFormat="cnvt" ','line_number':271,'multiline':True]['text':' Everything will be version 6 ','line_number':275,'multiline':True]['text':'*
 * Un flatten shared data from a UDATA..
 ','line_number':278,'multiline':True]['text':' UDataInfo info; -- necessary only if some converters have different formatVersion ','line_number':284,'multiline':True]['text':' copy initial values from the static structure for this type ','line_number':309,'multiline':True]['text':' fill in fields from the loaded data ','line_number':316,'multiline':True]['text':' for future use ','line_number':317,'multiline':True]['text':'Takes an alias name gets an actual converter file name
 *goes to disk and opens it.
 *allocates the memory and returns a new UConverter object
 ','line_number':329,'multiline':True]['text':'
     * TODO Store pkg in a field in the shared data so that delta-only converters
     * can load base converters from the same package.
     * If the pkg name is longer than the field, then either do not load the converter
     * in the first place, or just set the pkg field to "".
     ','line_number':362,'multiline':True]['text':'returns a converter type from a string
 ','line_number':373,'multiline':True]['text':' Lower case and remove ignoreable characters. ','line_number':383,'multiline':True]['text':' do a binary search for the alias ','line_number':386,'multiline':True]['text':' Have we moved? ','line_number':394,'multiline':True]['text':' We haven't moved, and it wasn't found. ','line_number':395,'multiline':True]['text':'
* Based on the number of known converters, this determines how many times larger
* the shared data hash table should be. When on small platforms, or just a couple
* of converters are used, this number should be 2. When memory is plentiful, or
* when ucnv_countAvailable is ever used with a lot of available converters,
* this should be 4.
* Larger numbers reduce the number of hash collisions, but use more memory.
','line_number':412,'multiline':True]['text':' Puts the shared data in the static hashtable SHARED_DATA_HASHTABLE ','line_number':422,'multiline':True]['text':'   Will always be called with the cnvCacheMutex alrady being held   ','line_number':423,'multiline':True]['text':'     by the calling function.                                       ','line_number':424,'multiline':True]['text':' Stores the shared data in the SHARED_DATA_HASHTABLE
 * @param data The shared data
 ','line_number':425,'multiline':True]['text':'Lazy evaluates the Hashtable itself ','line_number':432,'multiline':True]['text':'void *sanity = NULL;','line_number':433,'multiline':True]['text':' ### check to see if the element is not already there! ','line_number':446,'multiline':True]['text':'
    sanity =   ucnv_getSharedConverterData (data->staticData->name);
    if(sanity != NULL)
    {
    UCNV_DEBUG_LOG("put:overwrite!",data->staticData->name,sanity);
    }
    UCNV_DEBUG_LOG("put:chk",data->staticData->name,sanity);
    ','line_number':448,'multiline':True]['text':' Mark it shared ','line_number':457,'multiline':True]['text':' Okay to cast away const as long as
            keyDeleter == NULL ','line_number':461,'multiline':True]['text':'  Look up a converter name in the shared data cache.                    ','line_number':469,'multiline':True]['text':'    cnvCacheMutex must be held by the caller to protect the hash table. ','line_number':470,'multiline':True]['text':' gets the shared data from the SHARED_DATA_HASHTABLE (might return NULL if it isn't there)
 * @param name The name of the shared data
 * @return the shared data from the SHARED_DATA_HASHTABLE
 ','line_number':471,'multiline':True]['text':'special case when no Table has yet been created we return NULL ','line_number':478,'multiline':True]['text':'frees the string of memory blocks associates with a sharedConverter
 *if and only if the referenceCounter == 0
 ','line_number':493,'multiline':True]['text':' Deletes (frees) the Shared data it's passed. first it checks the referenceCounter to
 * see if anyone is using it, if not it frees all the memory stemming from sharedConverterData and
 * returns TRUE,
 * otherwise returns FALSE
 * @param sharedConverterData The shared data
 * @return if not it frees all the memory stemming from sharedConverterData and
 * returns TRUE, otherwise returns FALSE
 ','line_number':496,'multiline':True]['text':'*
 * Load a non-algorithmic converter.
 * If pkg==NULL, then this function must be called inside umtx_lock(&cnvCacheMutex).
 ','line_number':531,'multiline':True]['text':' application-provided converters are not currently cached ','line_number':544,'multiline':True]['text':'Not cached, we need to stream it in from file ','line_number':551,'multiline':True]['text':' share it with other library clients ','line_number':559,'multiline':True]['text':' The data for this converter was already in the cache.            ','line_number':565,'multiline':True]['text':' Update the reference counter on the shared data: one more client ','line_number':566,'multiline':True]['text':'*
 * Unload a non-algorithmic converter.
 * It must be sharedData->isReferenceCounted
 * and this function must be called inside umtx_lock(&cnvCacheMutex).
 ','line_number':573,'multiline':True]['text':'
 * *pPieces must be initialized.
 * The name without options will be copied to pPieces->cnvName.
 * The locale and options will be copied to pPieces only if present in inName,
 * otherwise the existing values in pPieces remain.
 * *pArgs will be set to the pPieces values.
 ','line_number':611,'multiline':True]['text':' copy the converter name itself to cnvName ','line_number':632,'multiline':True]['text':' bad name ','line_number':635,'multiline':True]['text':' parse options. No more name copying should occur. ','line_number':645,'multiline':True]['text':' inName is behind an option separator ','line_number':651,'multiline':True]['text':' do not modify locale itself in case we have multiple locale options ','line_number':653,'multiline':True]['text':' copy the locale option value ','line_number':656,'multiline':True]['text':' bad name ','line_number':663,'multiline':True]['text':' copy the version option value into bits 3..0 of pPieces->options ','line_number':672,'multiline':True]['text':' add processing for new options here with another } else if(uprv_strncmp(inName, "option-name=", XX)==0) { ','line_number':685,'multiline':True]['text':' ignore any other options until we define some ','line_number':687,'multiline':True]['text':'Logic determines if the converter is Algorithmic AND/OR cached
 *depending on that:
 * -we either go to get data from disk and cache it (Data=TRUE, Cached=False)
 * -Get it from a Hashtable (Data=X, Cached=TRUE)
 * -Call dataConverter initializer (Data=TRUE, Cached=TRUE)
 * -Call AlgorithmicConverter initializer (Data=FALSE, Cached=TRUE)
 ','line_number':697,'multiline':True]['text':'
             * Bad: We may set pArgs pointers to stackPieces fields
             * which will be invalid after this function returns.
             ','line_number':722,'multiline':True]['text':' In case "name" is NULL we want to open the default converter. ','line_number':745,'multiline':True]['text':' Call ucnv_getDefaultName first to query the name from the OS. ','line_number':751,'multiline':True]['text':' the default converter name is already canonical ','line_number':760,'multiline':True]['text':' fastpath for UTF-8 ','line_number':764,'multiline':True]['text':' separate the converter name from the options ','line_number':769,'multiline':True]['text':' Very bad name used. ','line_number':772,'multiline':True]['text':' get the canonical converter name ','line_number':776,'multiline':True]['text':'
            * set the input name in case the converter was added
            * without updating the alias table, or when there is no alias table
            ','line_number':779,'multiline':True]['text':' separate the converter name from the options ','line_number':789,'multiline':True]['text':' get the shared data for an algorithmic converter, if it is one ','line_number':794,'multiline':True]['text':' it is a data-based converter, get its shared data.               ','line_number':800,'multiline':True]['text':' Hold the cnvCacheMutex through the whole process of checking the ','line_number':801,'multiline':True]['text':'   converter data cache, and adding new entries to the cache      ','line_number':802,'multiline':True]['text':'   to prevent other threads from modifying the cache during the   ','line_number':803,'multiline':True]['text':'   process.                                                       ','line_number':804,'multiline':True]['text':' exit with error ','line_number':845,'multiline':True]['text':' not a valid type, or not an algorithmic converter ','line_number':895,'multiline':True]['text':' first, get the options out of the converterName string ','line_number':929,'multiline':True]['text':' Very bad name used. ','line_number':935,'multiline':True]['text':' open the data, unflatten the shared structure ','line_number':942,'multiline':True]['text':' create the actual converter ','line_number':950,'multiline':True]['text':' initialize the converter ','line_number':990,'multiline':True]['text':'myUConverter->isExtraLocal = FALSE;','line_number':993,'multiline':True]['text':' Set by the memset call ','line_number':993,'multiline':True]['text':' default reason to invoke (*fromCharErrorBehaviour) ','line_number':1006,'multiline':True]['text':' don't ucnv_close() if onlyTestIsLoadable because not fully initialized ','line_number':1012,'multiline':True]['text':'Frees all shared immutable objects that aren't referred to (reference count = 0)
 ','line_number':1021,'multiline':True]['text':'UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;','line_number':1030,'multiline':True]['text':' Close the default converter without creating a new one so that everything will be flushed. ','line_number':1035,'multiline':True]['text':'if shared data hasn't even been lazy evaluated yet
    * return 0
    ','line_number':1038,'multiline':True]['text':'creates an enumeration to iterate through every element in the
    * table
    *
    * Synchronization:  holding cnvCacheMutex will prevent any other thread from
    *                   accessing or modifying the hash table during the iteration.
    *                   The reference count of an entry may be decremented by
    *                   ucnv_close while the iteration is in process, but this is
    *                   benign.  It can't be incremented (in ucnv_createConverter())
    *                   because the sequence of looking up in the cache + incrementing
    *                   is protected by cnvCacheMutex.
    ','line_number':1046,'multiline':True]['text':'
     * double loop: A delta/extension-only converter has a pointer to its base table's
     * shared data; the first iteration of the outer loop may see the delta converter
     * before the base converter, and unloading the delta converter may get the base
     * converter's reference counter down to 0.
     ','line_number':1058,'multiline':True]['text':'deletes only if reference counter == 0 ','line_number':1071,'multiline':True]['text':' available converters list --------------------------------------------------- ','line_number':1094,'multiline':True]['text':' We can't have more than "*converterTable" converters to open ','line_number':1107,'multiline':True]['text':' Open the default converter to make sure that it has first dibs in the hash table. ','line_number':1114,'multiline':True]['text':' default converter name --------------------------------------------------- ','line_number':1157,'multiline':True]['text':'
Copy the canonical converter name.
ucnv_getDefaultName must be thread safe, which can call this function.

ucnv_setDefaultName calls this function and it doesn't have to be
thread safe because there is no reliable/safe way to reset the
converter in use in all threads. If you did reset the converter, you
would not be sure that retrieving a default converter for one string
would be the same type of default converter for a successive string.
Since the name is a returned via ucnv_getDefaultName without copying,
you shouldn't be modifying or deleting the string from a separate thread.
','line_number':1160,'multiline':True]['text':' gDefaultConverterName MUST be the last global var set by this function.  ','line_number':1199,'multiline':True]['text':'    It is the variable checked in ucnv_getDefaultName() to see if initialization is required. ','line_number':1200,'multiline':True]['text':'    But there is nothing here preventing that from being reordered, either by the compiler','line_number':1201,'multiline':False]['text':'             or hardware. I'm adding the mutex to ucnv_getDefaultName for now. UMTX_CHECK is not enough.','line_number':1202,'multiline':False]['text':'             -- Andy','line_number':1203,'multiline':False]['text':'
 * In order to be really thread-safe, the get function would have to take
 * a buffer parameter and copy the current string inside a mutex block.
 * This implementation only tries to be really thread-safe while
 * setting the name.
 * It assumes that setting a pointer is atomic.
 ','line_number':1212,'multiline':True]['text':' local variable to be thread-safe ','line_number':1225,'multiline':True]['text':'
    Concurrent calls to ucnv_getDefaultName must be thread safe,
    but ucnv_setDefaultName is not thread safe.
    ','line_number':1228,'multiline':True]['text':' if the name is there, test it out and get the canonical name with options ','line_number':1242,'multiline':True]['text':' Panic time, let's use a fallback. ','line_number':1254,'multiline':True]['text':' there is no 'algorithmic' converter for EBCDIC ','line_number':1257,'multiline':True]['text':' The close may make the current name go away. ','line_number':1267,'multiline':True]['text':'
This function is not thread safe, and it can't be thread safe.
See internalSetName or the API reference for details.
','line_number':1278,'multiline':True]['text':' reset to the default codepage ','line_number':1285,'multiline':True]['text':' if the name is there, test it out and get the canonical name with options ','line_number':1292,'multiline':True]['text':' else this converter is bad to use. Don't change it to a bad value. ','line_number':1301,'multiline':True]['text':' The close may make the current name go away. ','line_number':1303,'multiline':True]['text':' reset the converter cache ','line_number':1306,'multiline':True]['text':' data swapping ------------------------------------------------------------ ','line_number':1312,'multiline':True]['text':' most of this might belong more properly into ucnvmbcs.c, but that is so large ','line_number':1314,'multiline':True]['text':' udata_swapDataHeader checks the arguments ','line_number':1347,'multiline':True]['text':' check data format and format version ','line_number':1353,'multiline':True]['text':' dataFormat="cnvt" ','line_number':1356,'multiline':True]['text':' read the initial UConverterStaticData structure after the UDataInfo header ','line_number':1374,'multiline':True]['text':' swap the static data ','line_number':1393,'multiline':True]['text':' check for supported conversionType values ','line_number':1417,'multiline':True]['text':' swap MBCS data ','line_number':1419,'multiline':True]['text':' mbcsHeader.options have been read above ','line_number':1452,'multiline':True]['text':' make sure that the output type is known ','line_number':1462,'multiline':True]['text':' OK ','line_number':1472,'multiline':True]['text':' calculate the length of the MBCS data ','line_number':1481,'multiline':True]['text':'
         * utf8Friendly MBCS files (mbcsHeader.version 4.3)
         * contain an additional mbcsIndex table:
         *   uint16_t[(maxFastUChar+1)>>6];
         * where maxFastUChar=((mbcsHeader.version[2]<<8)|0xff).
         ','line_number':1483,'multiline':True]['text':' number of bytes ','line_number':1495,'multiline':True]['text':' avoid compiler warnings - not otherwise necessary, and the value does not matter ','line_number':1504,'multiline':True]['text':' there is extension data after the base data, see ucnv_ext.h ','line_number':1507,'multiline':True]['text':' copy the data for inaccessible bytes ','line_number':1527,'multiline':True]['text':' swap the MBCSHeader, except for the version field ','line_number':1532,'multiline':True]['text':'
                 * extension-only file,
                 * contains a base name instead of normal base table data
                 ','line_number':1538,'multiline':True]['text':' swap the base name, between the header and the extension data ','line_number':1543,'multiline':True]['text':' normal file with base table data ','line_number':1549,'multiline':True]['text':' swap the state table, 1kB per state ','line_number':1551,'multiline':True]['text':' swap the toUFallbacks[] ','line_number':1557,'multiline':True]['text':' swap the unicodeCodeUnits[] ','line_number':1563,'multiline':True]['text':' offset to the stage 1 table, independent of the outputType ','line_number':1569,'multiline':True]['text':' SBCS: swap the fromU tables, all 16 bits wide ','line_number':1573,'multiline':True]['text':' otherwise: swap the stage tables separately ','line_number':1578,'multiline':True]['text':' stage 1 table: uint16_t[0x440 or 0x40] ','line_number':1580,'multiline':True]['text':' for all of Unicode ','line_number':1582,'multiline':True]['text':' only BMP ','line_number':1584,'multiline':True]['text':' stage 2 table: uint32_t[] ','line_number':1589,'multiline':True]['text':' stage 3/result bytes: sometimes uint16_t[] or uint32_t[] ','line_number':1595,'multiline':True]['text':' just uint8_t[], nothing to swap ','line_number':1610,'multiline':True]['text':' swap the extension data ','line_number':1624,'multiline':True]['text':' swap toUTable[] ','line_number':1628,'multiline':True]['text':' swap toUUChars[] ','line_number':1633,'multiline':True]['text':' swap fromUTableUChars[] ','line_number':1638,'multiline':True]['text':' swap fromUTableValues[] ','line_number':1643,'multiline':True]['text':' same length as for fromUTableUChars[] ','line_number':1645,'multiline':True]['text':' no need to swap fromUBytes[] ','line_number':1648,'multiline':True]['text':' swap fromUStage12[] ','line_number':1650,'multiline':True]['text':' swap fromUStage3[] ','line_number':1655,'multiline':True]['text':' swap fromUStage3b[] ','line_number':1660,'multiline':True]['text':' swap indexes[] ','line_number':1665,'multiline':True]['text':' #if !UCONFIG_NO_LEGACY_CONVERSION ','line_number':1680,'multiline':True]