['text':'
 *******************************************************************************
 *
 *   Copyright (C) 2003-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *
 *******************************************************************************
 *   file name:  usprep.cpp
 *   encoding:   US-ASCII
 *   tab size:   8 (not used)
 *   indentation:4
 *
 *   created on: 2003jul2
 *   created by: Ram Viswanadha
 ','line_number':1,'multiline':True]['text':'
Static cache for already opened StringPrep profiles
','line_number':42,'multiline':True]['text':' format version of spp file ','line_number':50,'multiline':True]['text':'static uint8_t formatVersion[4]={ 0, 0, 0, 0 };','line_number':51,'multiline':False]['text':' the Unicode version of the sprep data ','line_number':53,'multiline':True]['text':' Profile names must be aligned to UStringPrepProfileType ','line_number':56,'multiline':True]['text':' USPREP_RFC3491_NAMEPREP ','line_number':58,'multiline':True]['text':' USPREP_RFC3530_NFS4_CS_PREP ','line_number':59,'multiline':True]['text':' USPREP_RFC3530_NFS4_CS_PREP_CI ','line_number':60,'multiline':True]['text':' USPREP_RFC3530_NSF4_CIS_PREP ','line_number':61,'multiline':True]['text':' USPREP_RFC3530_NSF4_MIXED_PREP_PREFIX ','line_number':62,'multiline':True]['text':' USPREP_RFC3530_NSF4_MIXED_PREP_SUFFIX ','line_number':63,'multiline':True]['text':' USPREP_RFC3722_ISCSI ','line_number':64,'multiline':True]['text':' USPREP_RFC3920_NODEPREP ','line_number':65,'multiline':True]['text':' USPREP_RFC3920_RESOURCEPREP ','line_number':66,'multiline':True]['text':' USPREP_RFC4011_MIB ','line_number':67,'multiline':True]['text':' USPREP_RFC4013_SASLPREP ','line_number':68,'multiline':True]['text':' USPREP_RFC4505_TRACE ','line_number':69,'multiline':True]['text':' USPREP_RFC4518_LDAP ','line_number':70,'multiline':True]['text':' USPREP_RFC4518_LDAP_CI ','line_number':71,'multiline':True]['text':' context ','line_number':75,'multiline':True]['text':' type ','line_number':76,'multiline':True]['text':' name ','line_number':77,'multiline':True]['text':' dataFormat="SPRP" ','line_number':83,'multiline':True]['text':'uprv_memcpy(formatVersion, pInfo->formatVersion, 4);','line_number':91,'multiline':False]['text':' hashes an entry  ','line_number':106,'multiline':True]['text':' compares two entries ','line_number':116,'multiline':True]['text':'
     * if shared data hasn't even been lazy evaluated yet
     * return 0
     ','line_number':143,'multiline':True]['text':'creates an enumeration to iterate through every element in the table ','line_number':153,'multiline':True]['text':' unload the data ','line_number':164,'multiline':True]['text':' Works just like ucnv_flushCache() 
static int32_t 
usprep_flushCache(){
    return usprep_internal_flushCache(FALSE);
}
','line_number':185,'multiline':True]['text':'* Initializes the cache for resources ','line_number':206,'multiline':True]['text':' load Unicode SPREP data from file ','line_number':227,'multiline':True]['text':' open the data outside the mutex block ','line_number':239,'multiline':True]['text':'TODO: change the path','line_number':240,'multiline':False]['text':' in the mutex block, set the data for this process ','line_number':257,'multiline':True]['text':' initialize some variables ','line_number':268,'multiline':True]['text':' the Unicode version of SPREP file must be less than the Unicode Vesion of the normalization data ','line_number':282,'multiline':True]['text':' the Unicode version of the NormalizationCorrections.txt file should be less than the Unicode Vesion of the normalization data ','line_number':283,'multiline':True]['text':' normalization turned on','line_number':284,'multiline':True]['text':' if a different thread set it first, then close the extra data ','line_number':292,'multiline':True]['text':' NULL if it was set correctly ','line_number':294,'multiline':True]['text':' 
     * const is cast way to save malloc, strcpy and free calls 
     * we use the passed in pointers for fetching the data from the 
     * hash table which is safe
     ','line_number':315,'multiline':True]['text':' fetch the data from the cache ','line_number':323,'multiline':True]['text':' else load the data and put the data in the cache ','line_number':332,'multiline':True]['text':' load the data ','line_number':339,'multiline':True]['text':' get the options ','line_number':344,'multiline':True]['text':' If another thread already inserted the same key/value, refcount and cleanup our thread data','line_number':366,'multiline':False]['text':' initialize the key members ','line_number':373,'multiline':True]['text':' add the data object to the cache ','line_number':382,'multiline':True]['text':' initialize the profile struct members ','line_number':401,'multiline':True]['text':' decrement the ref count','line_number':426,'multiline':True]['text':' we are not using line numbers ','line_number':443,'multiline':False]['text':' for pre-context','line_number':445,'multiline':False]['text':'null terminate the buffer','line_number':450,'multiline':False]['text':' for post-context; include error rules[pos]','line_number':453,'multiline':False]['text':'null terminate the buffer','line_number':462,'multiline':False]['text':' 
         * Initial value stored in the mapping table 
         * just return USPREP_TYPE_LIMIT .. so that
         * the source codepoint is copied to the destination
         ','line_number':472,'multiline':True]['text':' get the type ','line_number':485,'multiline':True]['text':' ascertain if the value is index or delta ','line_number':487,'multiline':True]['text':'mask off the lower 2 bits and shift','line_number':490,'multiline':False]['text':' TODO: change to writing to UnicodeString not UChar *','line_number':506,'multiline':False]['text':' no error checking the caller check for error and arguments','line_number':524,'multiline':False]['text':' no string length check the caller finds out the string length','line_number':525,'multiline':False]['text':' check if the source codepoint is unassigned','line_number':538,'multiline':False]['text':' copy mapping to destination ','line_number':565,'multiline':True]['text':' for pre-flighting ','line_number':570,'multiline':True]['text':' subtract the delta to arrive at the code point','line_number':574,'multiline':False]['text':' just consume the codepoint and contine','line_number':579,'multiline':False]['text':'copy the code point into destination','line_number':582,'multiline':False]['text':'
   1) Map -- For each character in the input, check if it has a mapping
      and, if so, replace it with its mapping.  

   2) Normalize -- Possibly normalize the result of step 1 using Unicode
      normalization. 

   3) Prohibit -- Check for any characters that are not allowed in the
      output.  If any are found, return an error.  

   4) Check bidi -- Possibly check for right-to-left characters, and if
      any are found, make sure that the whole string satisfies the
      requirements for bidirectional strings.  If the string does not
      satisfy the requirements for bidirectional strings, return an
      error.  
      [Unicode3.2] defines several bidirectional categories; each character
       has one bidirectional category assigned to it.  For the purposes of
       the requirements below, an "RandALCat character" is a character that
       has Unicode bidirectional categories "R" or "AL"; an "LCat character"
       is a character that has Unicode bidirectional category "L".  Note


       that there are many characters which fall in neither of the above
       definitions; Latin digits (<U+0030> through <U+0039>) are examples of
       this because they have bidirectional category "EN".

       In any profile that specifies bidirectional character handling, all
       three of the following requirements MUST be met:

       1) The characters in section 5.8 MUST be prohibited.

       2) If a string contains any RandALCat character, the string MUST NOT
          contain any LCat character.

       3) If a string contains any RandALCat character, a RandALCat
          character MUST be the first character of the string, and a
          RandALCat character MUST be the last character of the string.
','line_number':601,'multiline':True]['text':' check error status','line_number':647,'multiline':False]['text':'check arguments','line_number':652,'multiline':False]['text':'get the string length','line_number':660,'multiline':False]['text':' map','line_number':664,'multiline':False]['text':' redo processing of string','line_number':676,'multiline':False]['text':' we do not have enough room so grow the buffer','line_number':677,'multiline':True]['text':' reset error','line_number':684,'multiline':False]['text':' normalize','line_number':693,'multiline':False]['text':' Prohibit and checkBiDi in one pass','line_number':709,'multiline':False]['text':' first bit says it the code point is prohibited','line_number':728,'multiline':True]['text':' satisfy 2','line_number':751,'multiline':False]['text':'satisfy 3','line_number':758,'multiline':False]['text':' data swapping ------------------------------------------------------------ ','line_number':772,'multiline':True]['text':' udata_swapDataHeader checks the arguments ','line_number':789,'multiline':True]['text':' check data format and format version ','line_number':795,'multiline':True]['text':' dataFormat="SPRP" ','line_number':798,'multiline':True]['text':' read the first 16 indexes (ICU 2.8/format version 3: _SPREP_INDEX_TOP==16, might grow) ','line_number':827,'multiline':True]['text':' calculate the total length of the data ','line_number':832,'multiline':True]['text':' size of indexes[] ','line_number':834,'multiline':True]['text':' copy the data for inaccessible bytes ','line_number':846,'multiline':True]['text':' swap the int32_t indexes[] ','line_number':853,'multiline':True]['text':' swap the UTrie ','line_number':858,'multiline':True]['text':' swap the uint16_t mappingTable[] ','line_number':863,'multiline':True]['text':'offset+=count;','line_number':866,'multiline':False]['text':' #if !UCONFIG_NO_IDNA ','line_number':872,'multiline':True]