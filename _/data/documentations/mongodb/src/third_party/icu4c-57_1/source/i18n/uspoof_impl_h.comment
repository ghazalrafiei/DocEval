['text':'
***************************************************************************
* Copyright (C) 2008-2013, International Business Machines Corporation
* and others. All Rights Reserved.
***************************************************************************
*
*  uspoof_impl.h
*
*    Implemenation header for spoof detection
*
','line_number':1,'multiline':True]['text':' The maximium length (in UTF-16 UChars) of the skeleton replacement string resulting from','line_number':29,'multiline':False]['text':'   a single input code point.  This is function of the unicode.org data.','line_number':30,'multiline':False]['text':' The default stack buffer size for copies or conversions or normalizations','line_number':33,'multiline':False]['text':' of input strings being checked.  (Used in multiple places.)','line_number':34,'multiline':False]['text':' Magic number for sanity checking spoof data.','line_number':37,'multiline':False]['text':'*
  *  Class SpoofImpl corresponds directly to the plain C API opaque type
  *  USpoofChecker.  One can be cast to the other.
  ','line_number':46,'multiline':True]['text':'* Copy constructor, used by the user level uspoof_clone() function.
     ','line_number':56,'multiline':True]['text':'* Get the confusable skeleton transform for a single code point.
     *  The result is a string with a length between 1 and 18.
     *  @param    tableMask  bit flag specifying which confusable table to use.
     *                       One of USPOOF_SL_TABLE_FLAG, USPOOF_MA_TABLE_FLAG, etc.
     *  @return   The length in UTF-16 code units of the substition string.
     ','line_number':63,'multiline':True]['text':'* Set and Get AllowedLocales, implementations of the corresponding API ','line_number':71,'multiline':True]['text':' Add (union) to the UnicodeSet all of the characters for the scripts used for','line_number':75,'multiline':False]['text':' the specified locale.  Part of the implementation of setAllowedLocales.','line_number':76,'multiline':False]['text':'* parse a hex number.  Untility used by the builders.   ','line_number':80,'multiline':True]['text':' Implementation for Whole Script tests.','line_number':83,'multiline':False]['text':' Return the test bit flag to be ORed into the eventual user return value','line_number':84,'multiline':False]['text':'    if a Spoof opportunity is detected.','line_number':85,'multiline':False]['text':' IdentifierInfo Cache. IdentifierInfo objects are somewhat expensive to create.','line_number':92,'multiline':False]['text':'                       Maintain a one-element cache, which is sufficient to avoid repeatedly','line_number':93,'multiline':False]['text':'                       creating new ones unless we get multi-thread concurrency in spoof','line_number':94,'multiline':False]['text':'                       check operations, which should be statistically uncommon.','line_number':95,'multiline':False]['text':'','line_number':99,'multiline':False]['text':' Data Members','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Internal sanity check.','line_number':103,'multiline':False]['text':' Bit vector of checks to perform.','line_number':104,'multiline':False]['text':' The UnicodeSet of allowed characters.','line_number':108,'multiline':False]['text':'   for this Spoof Checker.  Defaults to all chars. ','line_number':109,'multiline':False]['text':' The list of allowed locales.','line_number':111,'multiline':False]['text':' The maximum restriction level for an acceptable identifier.','line_number':112,'multiline':False]['text':' Do not use directly. See getIdentifierInfo().:w','line_number':114,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'  Confusable Mappings Data Structures','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'    For the confusable data, we are essentially implementing a map,','line_number':122,'multiline':False]['text':'       key:    a code point','line_number':123,'multiline':False]['text':'       value:  a string.  Most commonly one char in length, but can be more.','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':'    The keys are stored as a sorted array of 32 bit ints.','line_number':126,'multiline':False]['text':'             bits 0-23    a code point value','line_number':127,'multiline':False]['text':'             bits 24-31   flags','line_number':128,'multiline':False]['text':'                24:  1 if entry applies to SL table','line_number':129,'multiline':False]['text':'                25:  1 if entry applies to SA table','line_number':130,'multiline':False]['text':'                26:  1 if entry applies to ML table','line_number':131,'multiline':False]['text':'                27:  1 if entry applies to MA table','line_number':132,'multiline':False]['text':'                28:  1 if there are multiple entries for this code point.','line_number':133,'multiline':False]['text':'                29-30:  length of value string, in UChars.','line_number':134,'multiline':False]['text':'                         values are (1, 2, 3, other)','line_number':135,'multiline':False]['text':'        The key table is sorted in ascending code point order.  (not on the','line_number':136,'multiline':False]['text':'        32 bit int value, the flag bits do not participate in the sorting.)','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':'        Lookup is done by means of a binary search in the key table.','line_number':139,'multiline':False]['text':'','line_number':140,'multiline':False]['text':'    The corresponding values are kept in a parallel array of 16 bit ints.','line_number':141,'multiline':False]['text':'        If the value string is of length 1, it is literally in the value array.','line_number':142,'multiline':False]['text':'        For longer strings, the value array contains an index into the strings table.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':'    String Table:','line_number':145,'multiline':False]['text':'       The strings table contains all of the value strings (those of length two or greater)','line_number':146,'multiline':False]['text':'       concatentated together into one long UChar (UTF-16) array.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':'       The array is arranged by length of the strings - all strings of the same length','line_number':149,'multiline':False]['text':'       are stored together.  The sections are ordered by length of the strings -','line_number':150,'multiline':False]['text':'       all two char strings first, followed by all of the three Char strings, etc.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':'       There is no nul character or other mark between adjacent strings.','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':'    String Lengths table','line_number':155,'multiline':False]['text':'       The length of strings from 1 to 3 is flagged in the key table.','line_number':156,'multiline':False]['text':'       For strings of length 4 or longer, the string length table provides a','line_number':157,'multiline':False]['text':'       mapping between an index into the string table and the corresponding length.','line_number':158,'multiline':False]['text':'       Strings of these lengths are rare, so lookup time is not an issue.','line_number':159,'multiline':False]['text':'       Each entry consists of','line_number':160,'multiline':False]['text':'            uint16_t      index of the _last_ string with this length','line_number':161,'multiline':False]['text':'            uint16_t      the length','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':' Flag bits in the Key entries','line_number':165,'multiline':False]['text':' index in string table of last string with this length','line_number':176,'multiline':False]['text':' Length of strings','line_number':177,'multiline':False]['text':'-------------------------------------------------------------------------------------','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':'  SpoofData','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':'    A small class that wraps the raw (usually memory mapped) spoof data.','line_number':186,'multiline':False]['text':'    Serves two primary functions:','line_number':187,'multiline':False]['text':'      1.  Convenience.  Contains real pointers to the data, to avoid dealing with','line_number':188,'multiline':False]['text':'          the offsets in the raw data.','line_number':189,'multiline':False]['text':'      2.  Reference counting.  When a spoof checker is cloned, the raw data is shared','line_number':190,'multiline':False]['text':'          and must be retained until all checkers using the data are closed.','line_number':191,'multiline':False]['text':'    Nothing in this struct includes state that is specific to any particular','line_number':192,'multiline':False]['text':'    USpoofDetector object.','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':'---------------------------------------------------------------------------------------','line_number':195,'multiline':False]['text':' Load standard ICU spoof data.','line_number':198,'multiline':False]['text':' Create new spoof data wrapper.','line_number':199,'multiline':False]['text':' Only used when building new data from rules.','line_number':200,'multiline':False]['text':' Constructor for use when creating from prebuilt default data.','line_number':202,'multiline':False]['text':'   A UDataMemory is what the ICU internal data loading functions provide.','line_number':203,'multiline':False]['text':'   The udm is adopted by the SpoofData.','line_number':204,'multiline':False]['text':' Constructor for use when creating from serialized data.','line_number':207,'multiline':False]['text':'','line_number':208,'multiline':False]['text':'  Check raw Spoof Data Version compatibility.','line_number':211,'multiline':False]['text':'  Return TRUE it looks good.','line_number':212,'multiline':False]['text':' Destructor not normally used.','line_number':214,'multiline':False]['text':' Use removeReference() instead.','line_number':215,'multiline':False]['text':' Reference Counting functions.','line_number':216,'multiline':False]['text':'    Clone of a user-level spoof detector increments the ref count on the data.','line_number':217,'multiline':False]['text':'    Close of a user-level spoof detector decrements the ref count.','line_number':218,'multiline':False]['text':'    If the data is owned by us, it will be deleted when count goes to zero.','line_number':219,'multiline':False]['text':' Reserve space in the raw data.  For use by builder when putting together a','line_number':223,'multiline':False]['text':'   new set of data.  Init the new storage to zero, to prevent inconsistent','line_number':224,'multiline':False]['text':'   results if it is not all otherwise set by the requester.','line_number':225,'multiline':False]['text':'  Return:','line_number':226,'multiline':False]['text':'    pointer to the new space that was added by this function.','line_number':227,'multiline':False]['text':' initialize the pointers from this object to the raw data.','line_number':230,'multiline':False]['text':' Reset all fields to an initial state.','line_number':233,'multiline':False]['text':' Called from the top of all constructors.','line_number':234,'multiline':False]['text':' Ptr to the raw memory-mapped data','line_number':237,'multiline':False]['text':' True if the raw data is owned, and needs','line_number':238,'multiline':False]['text':'  to be deleted when refcount goes to zero.','line_number':239,'multiline':False]['text':' If not NULL, our data came from a','line_number':240,'multiline':False]['text':'   UDataMemory, which we must close when','line_number':241,'multiline':False]['text':'   we are done.','line_number':242,'multiline':False]['text':' Limit of available raw data space','line_number':244,'multiline':False]['text':' Confusable data','line_number':247,'multiline':False]['text':' Whole Script Confusable Data','line_number':253,'multiline':False]['text':'---------------------------------------------------------------------------------------','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':'  Raw Binary Data Formats, as loaded from the ICU data file,','line_number':262,'multiline':False]['text':'    or as built by the builder.','line_number':263,'multiline':False]['text':'','line_number':264,'multiline':False]['text':'---------------------------------------------------------------------------------------','line_number':265,'multiline':False]['text':' (0x3845fdef)','line_number':267,'multiline':False]['text':' Data Format. Same as the value in struct UDataInfo','line_number':268,'multiline':False]['text':'   if there is one associated with this data.','line_number':269,'multiline':False]['text':' Total lenght in bytes of this spoof data,','line_number':270,'multiline':False]['text':'   including all sections, not just the header.','line_number':271,'multiline':False]['text':' The following four sections refer to data representing the confusable data','line_number':273,'multiline':False]['text':'   from the Unicode.org data from "confusables.txt"','line_number':274,'multiline':False]['text':' byte offset to Keys table (from SpoofDataHeader *)','line_number':276,'multiline':False]['text':' number of entries in keys table  (32 bits each)','line_number':277,'multiline':False]['text':' TODO: change name to fCFUValues, for consistency.','line_number':279,'multiline':False]['text':' byte offset to String Indexes table','line_number':280,'multiline':False]['text':' number of entries in String Indexes table (16 bits each)','line_number':281,'multiline':False]['text':'     (number of entries must be same as in Keys table','line_number':282,'multiline':False]['text':' byte offset of String table','line_number':284,'multiline':False]['text':' length of string table (in 16 bit UChars)','line_number':285,'multiline':False]['text':' byte offset to String Lengths table','line_number':287,'multiline':False]['text':' number of entries in lengths table. (2 x 16 bits each)','line_number':288,'multiline':False]['text':' The following sections are for data from confusablesWholeScript.txt','line_number':291,'multiline':False]['text':' byte offset to the serialized Any Case Trie','line_number':293,'multiline':False]['text':' Length (bytes) of the serialized Any Case Trie','line_number':294,'multiline':False]['text':' byte offset to the serialized Lower Case Trie','line_number':296,'multiline':False]['text':' Length (bytes) of the serialized Lower Case Trie','line_number':297,'multiline':False]['text':' byte offset to array of ScriptSets','line_number':299,'multiline':False]['text':' Number of ScriptSets (24 bytes each)','line_number':300,'multiline':False]['text':' The following sections are for data from xidmodifications.txt','line_number':303,'multiline':False]['text':' Padding, Room for Expansion','line_number':306,'multiline':False]['text':'','line_number':313,'multiline':False]['text':'  Structure for the Whole Script Confusable Data','line_number':314,'multiline':False]['text':'    See Unicode UAX-39, Unicode Security Mechanisms, for a description of the','line_number':315,'multiline':False]['text':'    Whole Script confusable data','line_number':316,'multiline':False]['text':'','line_number':317,'multiline':False]['text':'  The data provides mappings from code points to a set of scripts','line_number':318,'multiline':False]['text':'    that contain characters that might be confused with the code point.','line_number':319,'multiline':False]['text':'  There are two mappings, one for lower case only, and one for characters','line_number':320,'multiline':False]['text':'    of any case.','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':'  The actual data consists of a utrie2 to map from a code point to an offset,','line_number':323,'multiline':False]['text':'  and an array of UScriptSets (essentially bit maps) that is indexed','line_number':324,'multiline':False]['text':'  by the offsets obtained from the Trie.','line_number':325,'multiline':False]['text':'','line_number':326,'multiline':False]['text':'','line_number':327,'multiline':False]['text':' __cplusplus ','line_number':331,'multiline':True]['text':'*
  * Endianness swap function for binary spoof data.
  * @internal
  ','line_number':333,'multiline':True]['text':' USPOOFIM_H ','line_number':344,'multiline':True]