['text':'
 **********************************************************************
 *   Copyright (C) 1999-2011, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   11/17/99    aliu        Creation.
 **********************************************************************
 ','line_number':1,'multiline':True]['text':'----------------------------------------------------------------------','line_number':29,'multiline':False]['text':' BEGIN Debugging support','line_number':30,'multiline':False]['text':'----------------------------------------------------------------------','line_number':31,'multiline':False]['text':' #define DEBUG_RBT','line_number':33,'multiline':False]['text':'*
 * @param appendTo result is appended to this param.
 * @param input the string being transliterated
 * @param pos the index struct
 ','line_number':39,'multiline':True]['text':' Output a string of the form aaa{bbb|ccc|ddd}eee, where','line_number':47,'multiline':False]['text':' the {} indicate the context start and limit, and the ||','line_number':48,'multiline':False]['text':' indicate the start and limit.','line_number':49,'multiline':False]['text':'{','line_number':62,'multiline':True]['text':'|','line_number':63,'multiline':True]['text':'|','line_number':63,'multiline':True]['text':'}','line_number':64,'multiline':True]['text':'appendTo.append((UnicodeString)"INVALID UTransPosition {cs=" +','line_number':67,'multiline':False]['text':'                pos.contextStart + ", s=" + pos.start + ", l=" +','line_number':68,'multiline':False]['text':'                pos.limit + ", cl=" + pos.contextLimit + "} on " +','line_number':69,'multiline':False]['text':'                input);','line_number':70,'multiline':False]['text':' Append a hex string to the target','line_number':75,'multiline':False]['text':' Replace nonprintable characters with unicode escapes','line_number':89,'multiline':False]['text':'----------------------------------------------------------------------','line_number':131,'multiline':False]['text':' END Debugging support','line_number':132,'multiline':False]['text':'----------------------------------------------------------------------','line_number':133,'multiline':False]['text':' Fill the precontext and postcontext with the patterns of the rules','line_number':135,'multiline':False]['text':' that are masking one another.','line_number':136,'multiline':False]['text':' for pre-context','line_number':145,'multiline':False]['text':'for post-context','line_number':151,'multiline':False]['text':'*
 * Construct a new empty rule set.
 ','line_number':161,'multiline':True]['text':'*
 * Copy constructor.
 ','line_number':176,'multiline':True]['text':' Null pointer test','line_number':193,'multiline':False]['text':'*
 * Destructor.
 ','line_number':210,'multiline':True]['text':' This deletes the contained rules','line_number':214,'multiline':False]['text':'*
     * We assume that the ruleset has already been frozen.
     ','line_number':219,'multiline':True]['text':' see freeze()','line_number':222,'multiline':False]['text':'*
 * Return the maximum context length.
 * @return the length of the longest preceding context.
 ','line_number':228,'multiline':True]['text':'*
 * Add a rule to this set.  Rules are added in order, and order is
 * significant.  The last call to this method must be followed by
 * a call to <code>freeze()</code> before the rule set is used.
 *
 * <p>If freeze() has already been called, calling addRule()
 * unfreezes the rules, and freeze() must be called again.
 *
 * @param adoptedRule the rule to add
 ','line_number':236,'multiline':True]['text':'*
 * Check this for masked rules and index it to optimize performance.
 * The sequence of operations is: (1) add rules to a set using
 * <code>addRule()</code>; (2) freeze the set using
 * <code>freeze()</code>; (3) use the rule set.  If
 * <code>addRule()</code> is called after calling this method, it
 * invalidates this object, and this method must be called again.
 * That is, <code>freeze()</code> may be called multiple times,
 * although for optimal performance it shouldn't be.
 ','line_number':263,'multiline':True]['text':' Construct the rule array and index table.  We reorder the
     * rules by sorting them into 256 bins.  Each bin contains all
     * rules matching the index value for that bin.  A rule
     * matches an index value if string whose first key character
     * has a low byte equal to the index value can match the rule.
     *
     * Each bin contains zero or more rules, in the same order
     * they were found originally.  However, the total rules in
     * the bins may exceed the number in the original vector,
     * since rules that have a variable as their first key
     * character will generally fall into more than one bin.
     *
     * That is, each bin contains all rules that either have that
     * first index value as their first key character, or have
     * a set containing the index value as their first character.
     ','line_number':274,'multiline':True]['text':' heuristic; adjust as needed','line_number':293,'multiline':False]['text':' Precompute the index values.  This saves a LOT of time.
     * Be careful not to call malloc(0).
     ','line_number':299,'multiline':True]['text':' test for NULL ','line_number':303,'multiline':True]['text':' If the indexValue is < 0, then the first key character is','line_number':320,'multiline':False]['text':' a set, and we must use the more time-consuming','line_number':321,'multiline':False]['text':' matchesIndexValue check.  In practice this happens','line_number':322,'multiline':False]['text':' rarely, so we seldom tread this code path.','line_number':323,'multiline':False]['text':' Freeze things into an array.
     ','line_number':334,'multiline':True]['text':' Contains alias pointers','line_number':336,'multiline':False]['text':' You can't do malloc(0)! ','line_number':338,'multiline':True]['text':' test for NULL ','line_number':344,'multiline':True]['text':' TODO Add error reporting that indicates the rules that','line_number':353,'multiline':False]['text':'      are being masked.','line_number':354,'multiline':False]['text':'UnicodeString errors;','line_number':355,'multiline':False]['text':' Check for masking.  This is MUCH faster than our old check,
     * which was each rule against each following rule, since we
     * only have to check for masking within each bin now.  It's
     * 256*O(n2^2) instead of O(n1^2), where n1 is the total rule
     * count, and n2 is the per-bin rule count.  But n2<<n1, so
     * it's a big win.
     ','line_number':357,'multiline':True]['text':'|                 if (errors == null) {','line_number':370,'multiline':False]['text':'|                     errors = new StringBuffer();','line_number':371,'multiline':False]['text':'|                 } else {','line_number':372,'multiline':False]['text':'|                     errors.append("\n");','line_number':373,'multiline':False]['text':'|                 }','line_number':374,'multiline':False]['text':'|                 errors.append("Rule " + r1 + " masks " + r2);','line_number':375,'multiline':False]['text':'if (errors != null) {','line_number':384,'multiline':False]['text':'    throw new IllegalArgumentException(errors.toString());','line_number':385,'multiline':False]['text':'}','line_number':386,'multiline':False]['text':'*
 * Transliterate the given text with the given UTransPosition
 * indices.  Return TRUE if the transliteration should continue
 * or FALSE if it should halt (because of a U_PARTIAL_MATCH match).
 * Note that FALSE is only ever returned if isIncremental is TRUE.
 * @param text the text to be transliterated
 * @param pos the position indices, which will be updated
 * @param incremental if TRUE, assume new text may be inserted
 * at index.limit, and return FALSE if thre is a partial match.
 * @return TRUE unless a U_PARTIAL_MATCH has been obtained,
 * indicating that transliteration should stop until more text
 * arrives.
 ','line_number':389,'multiline':True]['text':' Ram: added default to make GCC happy ','line_number':415,'multiline':True]['text':' No match or partial match from any rule','line_number':419,'multiline':False]['text':'*
 * Create rule strings that represents this rule set.
 ','line_number':425,'multiline':True]['text':'\n','line_number':435,'multiline':True]['text':'*
 * Return the set of all characters that may be modified
 * (getTarget=false) or emitted (getTarget=true) by this set.
 ','line_number':444,'multiline':True]['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':467,'multiline':True]