['text':'
******************************************************************************
*
*   Copyright (C) 1999-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utf_impl.c
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999sep13
*   created by: Markus W. Scherer
*
*   This file provides implementation functions for macros in the utfXX.h
*   that would otherwise be too long as macros.
','line_number':1,'multiline':True]['text':' set import/export definitions ','line_number':20,'multiline':True]['text':'
 * This table could be replaced on many machines by
 * a few lines of assembler code using an
 * "index of first 0-bit from msb" instruction and
 * one or two more integer instructions.
 *
 * For example, on an i386, do something like
 * - MOV AL, leadByte
 * - NOT AL         (8-bit, leave b15..b8==0..0, reverse only b7..b0)
 * - MOV AH, 0
 * - BSR BX, AX     (16-bit)
 * - MOV AX, 6      (result)
 * - JZ finish      (ZF==1 if leadByte==0xff)
 * - SUB AX, BX (result)
 * -finish:
 * (BSR: Bit Scan Reverse, scans for a 1-bit, starting from the MSB)
 *
 * In Unicode, all UTF-8 byte sequences with more than 4 bytes are illegal;
 * lead bytes above 0xf4 are illegal.
 * We keep them in this table for skipping long ISO 10646-UTF-8 sequences.
 ','line_number':31,'multiline':True]['text':' illegal in Unicode ','line_number':74,'multiline':True]['text':' illegal in Unicode ','line_number':75,'multiline':True]['text':' illegal in Unicode ','line_number':76,'multiline':True]['text':' illegal bytes 0xfe and 0xff ','line_number':77,'multiline':True]['text':'
 * Handle the non-inline part of the U8_NEXT() and U8_NEXT_FFFD() macros
 * and their obsolete sibling UTF8_NEXT_CHAR_SAFE().
 *
 * U8_NEXT() supports NUL-terminated strings indicated via length<0.
 *
 * The "strict" parameter controls the error behavior:
 * <0  "Safe" behavior of U8_NEXT():
 *     -1: All illegal byte sequences yield U_SENTINEL=-1.
 *     -2: Same as -1, except for lenient treatment of surrogate code points as legal.
 *         Some implementations use this for roundtripping of
 *         Unicode 16-bit strings that are not well-formed UTF-16, that is, they
 *         contain unpaired surrogates.
 *     -3: All illegal byte sequences yield U+FFFD.
 *  0  Obsolete "safe" behavior of UTF8_NEXT_CHAR_SAFE(..., FALSE):
 *     All illegal byte sequences yield a positive code point such that this
 *     result code point would be encoded with the same number of bytes as
 *     the illegal sequence.
 * >0  Obsolete "strict" behavior of UTF8_NEXT_CHAR_SAFE(..., TRUE):
 *     Same as the obsolete "safe" behavior, but non-characters are also treated
 *     like illegal sequences.
 *
 * Note that a UBool is the same as an int8_t.
 ','line_number':100,'multiline':True]['text':' U8_COUNT_TRAIL_BYTES returns value 0...5 ','line_number':128,'multiline':True]['text':' support NUL-terminated strings: do not read beyond the first non-trail byte ','line_number':133,'multiline':True]['text':' each branch falls through to the next one ','line_number':135,'multiline':True]['text':' count==0 for illegally leading trail bytes and the illegal bytes 0xfe and 0xff ','line_number':137,'multiline':True]['text':' count>=4 is always illegal: no more than 3 trail bytes in Unicode's UTF-8 ','line_number':140,'multiline':True]['text':' c>=0x110 would result in code point>0x10ffff, outside Unicode ','line_number':145,'multiline':True]['text':'
             * test for a surrogate d800..dfff unless we are lenient:
             * before the last (c<<6), a surrogate is c=360..37f
             ','line_number':150,'multiline':True]['text':' correct sequence - all trail bytes have (b7..b6)==(10) ','line_number':159,'multiline':True]['text':' strict: forbid non-characters like U+fffe ','line_number':161,'multiline':True]['text':' no default branch to optimize switch()  - all values are covered ','line_number':166,'multiline':True]['text':' too few bytes left ','line_number':169,'multiline':True]['text':' error handling ','line_number':173,'multiline':True]['text':' Starting with Unicode 3.2, surrogate code points must not be encoded in UTF-8. ','line_number':193,'multiline':True]['text':' c>0x10ffff or not enough space, write an error value ','line_number':209,'multiline':True]['text':' extract value bits from the last trail byte ','line_number':236,'multiline':True]['text':' no lead byte at all ','line_number':241,'multiline':True]['text':' read another previous byte ','line_number':245,'multiline':True]['text':' 0x80<=b<0xfe ','line_number':247,'multiline':True]['text':' lead byte, this will always end the loop ','line_number':249,'multiline':True]['text':' set the new position ','line_number':253,'multiline':True]['text':' illegal sequence or (strict and non-character) ','line_number':258,'multiline':True]['text':' exit with correct c ','line_number':264,'multiline':True]['text':' the lead byte does not match the number of trail bytes ','line_number':267,'multiline':True]['text':' only set the position to the lead byte if it would
                       include the trail byte that we started with ','line_number':268,'multiline':True]['text':' trail byte ','line_number':279,'multiline':True]['text':' more than 5 trail bytes is illegal ','line_number':284,'multiline':True]['text':' single-byte character precedes trailing bytes ','line_number':289,'multiline':True]['text':' i had been decremented once before the function call ','line_number':299,'multiline':True]['text':' read at most the 6 bytes s[Z] to s[i], inclusively ','line_number':303,'multiline':True]['text':' return I if the sequence starting there is long enough to include i ','line_number':310,'multiline':True]['text':' not 0x80<=b<0xfe ','line_number':313,'multiline':True]['text':' return i itself to be consistent with the FWD_1 macro ','line_number':324,'multiline':True]