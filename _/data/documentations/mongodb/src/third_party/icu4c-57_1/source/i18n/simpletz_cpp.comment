['text':'
 *******************************************************************************
 * Copyright (C) 1997-2013, International Business Machines Corporation and
 * others. All Rights Reserved.
 *******************************************************************************
 *
 * File SIMPLETZ.H
 *
 * Modification History:
 *
 *   Date        Name        Description
 *   12/05/96    clhuang     Creation.
 *   04/21/97    aliu        Fixed miscellaneous bugs found by inspection and
 *                           testing.
 *   07/29/97    aliu        Ported source bodies back from Java version with
 *                           numerous feature enhancements and bug fixes.
 *   08/10/98    stephen     JDK 1.2 sync.
 *   09/17/98    stephen     Fixed getOffset() for last hour of year and DST
 *   12/02/99    aliu        Added TimeMode and constructor and setStart/EndRule
 *                           methods that take TimeMode. Whitespace cleanup.
 ********************************************************************************
 ','line_number':1,'multiline':True]['text':' for 'typeid' to work','line_number':24,'multiline':False]['text':' Use only for decodeStartRule() and decodeEndRule() where the year is not','line_number':41,'multiline':False]['text':' available. Set February to 29 days to accomodate rules with that date','line_number':42,'multiline':False]['text':' and day-of-week-on-or-before-that-date mode (DOW_LE_DOM_MODE).','line_number':43,'multiline':False]['text':' The compareToRule() method adjusts to February 28 in non-leap years.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' For actual getOffset() calculations, use Grego::monthLength() and','line_number':46,'multiline':False]['text':' Grego::previousMonthLength() which take leap years into account.','line_number':47,'multiline':False]['text':' We handle leap years assuming always','line_number':48,'multiline':False]['text':' Gregorian, since we know they didn't have daylight time when','line_number':49,'multiline':False]['text':' Gregorian calendar started.','line_number':50,'multiline':False]['text':' "(DST)"','line_number':53,'multiline':False]['text':' "(STD)"','line_number':54,'multiline':False]['text':' *****************************************************************************','line_number':57,'multiline':False]['text':' class SimpleTimeZone','line_number':58,'multiline':False]['text':' *****************************************************************************','line_number':59,'multiline':False]['text':' -------------------------------------','line_number':84,'multiline':False]['text':' -------------------------------------','line_number':103,'multiline':False]['text':' -------------------------------------','line_number':122,'multiline':False]['text':'*
 * Internal construction method.
 ','line_number':143,'multiline':True]['text':' -------------------------------------','line_number':183,'multiline':False]['text':' -------------------------------------','line_number':190,'multiline':False]['text':' Called by TimeZone::createDefault(), then clone() inside a Mutex - be careful.','line_number':192,'multiline':False]['text':' -------------------------------------','line_number':199,'multiline':False]['text':' Called by TimeZone::createDefault(), then clone() inside a Mutex - be careful.','line_number':201,'multiline':False]['text':' -------------------------------------','line_number':229,'multiline':False]['text':' -------------------------------------','line_number':240,'multiline':False]['text':' Called by TimeZone::createDefault() inside a Mutex - be careful.','line_number':242,'multiline':False]['text':' -------------------------------------','line_number':249,'multiline':False]['text':'*
 * Sets the daylight savings starting year, that is, the year this time zone began
 * observing its specified daylight savings time rules.  The time zone is considered
 * not to observe daylight savings time prior to that year; SimpleTimeZone doesn't
 * support historical daylight-savings-time rules.
 * @param year the daylight savings starting year.
 ','line_number':251,'multiline':True]['text':' -------------------------------------','line_number':265,'multiline':False]['text':'*
 * Sets the daylight savings starting rule. For example, in the U.S., Daylight Savings
 * Time starts at the first Sunday in April, at 2 AM in standard time.
 * Therefore, you can set the start rule by calling:
 * setStartRule(TimeFields.APRIL, 1, TimeFields.SUNDAY, 2*60*60*1000);
 * The dayOfWeekInMonth and dayOfWeek parameters together specify how to calculate
 * the exact starting date.  Their exact meaning depend on their respective signs,
 * allowing various types of rules to be constructed, as follows:<ul>
 *   <li>If both dayOfWeekInMonth and dayOfWeek are positive, they specify the
 *       day of week in the month (e.g., (2, WEDNESDAY) is the second Wednesday
 *       of the month).
 *   <li>If dayOfWeek is positive and dayOfWeekInMonth is negative, they specify
 *       the day of week in the month counting backward from the end of the month.
 *       (e.g., (-1, MONDAY) is the last Monday in the month)
 *   <li>If dayOfWeek is zero and dayOfWeekInMonth is positive, dayOfWeekInMonth
 *       specifies the day of the month, regardless of what day of the week it is.
 *       (e.g., (10, 0) is the tenth day of the month)
 *   <li>If dayOfWeek is zero and dayOfWeekInMonth is negative, dayOfWeekInMonth
 *       specifies the day of the month counting backward from the end of the
 *       month, regardless of what day of the week it is (e.g., (-2, 0) is the
 *       next-to-last day of the month).
 *   <li>If dayOfWeek is negative and dayOfWeekInMonth is positive, they specify the
 *       first specified day of the week on or after the specfied day of the month.
 *       (e.g., (15, -SUNDAY) is the first Sunday after the 15th of the month
 *       [or the 15th itself if the 15th is a Sunday].)
 *   <li>If dayOfWeek and DayOfWeekInMonth are both negative, they specify the
 *       last specified day of the week on or before the specified day of the month.
 *       (e.g., (-20, -TUESDAY) is the last Tuesday before the 20th of the month
 *       [or the 20th itself if the 20th is a Tuesday].)</ul>
 * @param month the daylight savings starting month. Month is 0-based.
 * eg, 0 for January.
 * @param dayOfWeekInMonth the daylight savings starting
 * day-of-week-in-month. Please see the member description for an example.
 * @param dayOfWeek the daylight savings starting day-of-week. Please see
 * the member description for an example.
 * @param time the daylight savings starting time. Please see the member
 * description for an example.
 ','line_number':267,'multiline':True]['text':' -------------------------------------','line_number':319,'multiline':False]['text':' -------------------------------------','line_number':328,'multiline':False]['text':' -------------------------------------','line_number':338,'multiline':False]['text':'*
 * Sets the daylight savings ending rule. For example, in the U.S., Daylight
 * Savings Time ends at the last (-1) Sunday in October, at 2 AM in standard time.
 * Therefore, you can set the end rule by calling:
 * setEndRule(TimeFields.OCTOBER, -1, TimeFields.SUNDAY, 2*60*60*1000);
 * Various other types of rules can be specified by manipulating the dayOfWeek
 * and dayOfWeekInMonth parameters.  For complete details, see the documentation
 * for setStartRule().
 * @param month the daylight savings ending month. Month is 0-based.
 * eg, 0 for January.
 * @param dayOfWeekInMonth the daylight savings ending
 * day-of-week-in-month. See setStartRule() for a complete explanation.
 * @param dayOfWeek the daylight savings ending day-of-week. See setStartRule()
 * for a complete explanation.
 * @param time the daylight savings ending time. Please see the member
 * description for an example.
 ','line_number':340,'multiline':True]['text':' -------------------------------------','line_number':371,'multiline':False]['text':' -------------------------------------','line_number':380,'multiline':False]['text':' -------------------------------------','line_number':390,'multiline':False]['text':' Check the month before calling Grego::monthLength(). This','line_number':396,'multiline':False]['text':' duplicates the test that occurs in the 7-argument getOffset(),','line_number':397,'multiline':False]['text':' however, this is unavoidable. We don't mind because this method, in','line_number':398,'multiline':False]['text':' fact, should not be called; internal code should always call the','line_number':399,'multiline':False]['text':' 7-argument getOffset(), and outside code should use Calendar.get(int','line_number':400,'multiline':False]['text':' field) with fields ZONE_OFFSET and DST_OFFSET. We can't get rid of','line_number':401,'multiline':False]['text':' this method because it's public API. - liu 8/10/98','line_number':402,'multiline':False]['text':'monthLength','line_number':414,'multiline':True]['text':' Check the month before calling Grego::monthLength(). This','line_number':416,'multiline':False]['text':' duplicates a test that occurs in the 9-argument getOffset(),','line_number':417,'multiline':False]['text':' however, this is unavoidable. We don't mind because this method, in','line_number':418,'multiline':False]['text':' fact, should not be called; internal code should always call the','line_number':419,'multiline':False]['text':' 9-argument getOffset(), and outside code should use Calendar.get(int','line_number':420,'multiline':False]['text':' field) with fields ZONE_OFFSET and DST_OFFSET. We can't get rid of','line_number':421,'multiline':False]['text':' this method because it's public API. - liu 8/10/98','line_number':422,'multiline':False]['text':' We ignore monthLength because it can be derived from year and month.','line_number':429,'multiline':False]['text':' This is so that February in leap years is calculated correctly.','line_number':430,'multiline':False]['text':' We keep this argument in this function for backwards compatibility.','line_number':431,'multiline':False]['text':' Bail out if we are before the onset of daylight savings time','line_number':465,'multiline':False]['text':' Check for southern hemisphere.  We assume that the start and end','line_number':469,'multiline':False]['text':' month are different.','line_number':470,'multiline':False]['text':' Compare the date to the starting and ending rules.+1 = date>rule, -1','line_number':473,'multiline':False]['text':' = date<rule, 0 = date==rule.','line_number':474,'multiline':False]['text':' We don't always have to compute endCompare.  For many instances,
     * startCompare is enough to determine if we are in DST or not.  In the
     * northern hemisphere, if we are before the start rule, we can't have
     * DST.  In the southern hemisphere, if we are after the start rule, we
     * must have DST.  This is reflected in the way the next if statement
     * (not the one immediately following) short circuits. ','line_number':482,'multiline':True]['text':' Check for both the northern and southern hemisphere cases.  We','line_number':497,'multiline':False]['text':' assume that in the northern hemisphere, the start rule is before the','line_number':498,'multiline':False]['text':' end rule within the calendar year, and vice versa for the southern','line_number':499,'multiline':False]['text':' hemisphere.','line_number':500,'multiline':False]['text':' Now we need some adjustment','line_number':532,'multiline':False]['text':' -------------------------------------','line_number':557,'multiline':False]['text':'*
 * Compare a given date in the year to a rule. Return 1, 0, or -1, depending
 * on whether the date is after, equal to, or before the rule date. The
 * millis are compared directly against the ruleMillis, so any
 * standard-daylight adjustments must be handled by the caller.
 *
 * @return  1 if the date is after the rule date, -1 if the date is before
 *          the rule date, or 0 if the date is equal to the rule date.
 ','line_number':559,'multiline':True]['text':' Make adjustments for startTimeMode and endTimeMode','line_number':575,'multiline':False]['text':' dayOfWeek is one-based','line_number':580,'multiline':False]['text':' When incrementing the month, it is desirible to overflow
             * from DECEMBER to DECEMBER+1, since we use the result to
             * compare against a real month. Wraparound of the value
             * leads to bug 4173604. ','line_number':583,'multiline':True]['text':' dayOfWeek is one-based','line_number':593,'multiline':False]['text':' first compare months.  If they're different, we don't have to worry about days','line_number':600,'multiline':False]['text':' and times','line_number':601,'multiline':False]['text':' calculate the actual day of month for the rule','line_number':605,'multiline':False]['text':' Adjust the ruleDay to the monthLen, for non-leap year February 29 rule days.','line_number':608,'multiline':False]['text':' if the mode is day-of-month, the day of month is given','line_number':615,'multiline':False]['text':' if the mode is day-of-week-in-month, calculate the day-of-month from it','line_number':620,'multiline':False]['text':' In this case ruleDay is the day-of-week-in-month (this code is using','line_number':622,'multiline':False]['text':' the dayOfWeek and dayOfMonth parameters to figure out the day-of-week','line_number':623,'multiline':False]['text':' of the first day of the month, so it's trusting that they're really','line_number':624,'multiline':False]['text':' consistent with each other)','line_number':625,'multiline':False]['text':' if ruleDay is negative (we assume it's not zero here), we have to do','line_number':630,'multiline':False]['text':' the same calculation figuring backward from the last day of the month.','line_number':631,'multiline':False]['text':' (again, this code is trusting that dayOfWeek and dayOfMonth are','line_number':634,'multiline':False]['text':' consistent with each other here, since we're using them to figure','line_number':635,'multiline':False]['text':' the day of week of the first of the month)','line_number':636,'multiline':False]['text':' Note at this point ruleDayOfMonth may be <1, although it will','line_number':650,'multiline':False]['text':' be >=1 for well-formed rules.','line_number':651,'multiline':False]['text':' now that we have a real day-in-month for the rule, we can compare days...','line_number':655,'multiline':False]['text':' ...and if they're equal, we compare times','line_number':659,'multiline':False]['text':' -------------------------------------','line_number':665,'multiline':False]['text':' -------------------------------------','line_number':673,'multiline':False]['text':' -------------------------------------','line_number':682,'multiline':False]['text':' -------------------------------------','line_number':696,'multiline':False]['text':' -------------------------------------','line_number':704,'multiline':False]['text':' -------------------------------------','line_number':712,'multiline':False]['text':'*
 * Overrides TimeZone
 * Queries if the given date is in Daylight Savings Time.
 ','line_number':714,'multiline':True]['text':' This method is wasteful since it creates a new GregorianCalendar and','line_number':720,'multiline':False]['text':' deletes it each time it is called.  However, this is a deprecated method','line_number':721,'multiline':False]['text':' and provided only for Java compatibility as of 8/6/97 [LIU].','line_number':722,'multiline':False]['text':' test for NULL ','line_number':725,'multiline':True]['text':' -------------------------------------','line_number':736,'multiline':False]['text':'*
 * Return true if this zone has the same rules and offset as another zone.
 * @param other the TimeZone object to be compared with
 * @return true if the given zone has the same rules and offset as this one
 ','line_number':738,'multiline':True]['text':' Only check rules if using DST','line_number':752,'multiline':False]['text':' -------------------------------------','line_number':769,'multiline':False]['text':'----------------------------------------------------------------------','line_number':771,'multiline':False]['text':' Rule representation','line_number':772,'multiline':False]['text':'','line_number':773,'multiline':False]['text':' We represent the following flavors of rules:','line_number':774,'multiline':False]['text':'       5        the fifth of the month','line_number':775,'multiline':False]['text':'       lastSun  the last Sunday in the month','line_number':776,'multiline':False]['text':'       lastMon  the last Monday in the month','line_number':777,'multiline':False]['text':'       Sun>=8   first Sunday on or after the eighth','line_number':778,'multiline':False]['text':'       Sun<=25  last Sunday on or before the 25th','line_number':779,'multiline':False]['text':' This is further complicated by the fact that we need to remain','line_number':780,'multiline':False]['text':' backward compatible with the 1.1 FCS.  Finally, we need to minimize','line_number':781,'multiline':False]['text':' API changes.  In order to satisfy these requirements, we support','line_number':782,'multiline':False]['text':' three representation systems, and we translate between them.','line_number':783,'multiline':False]['text':'','line_number':784,'multiline':False]['text':' INTERNAL REPRESENTATION','line_number':785,'multiline':False]['text':' This is the format SimpleTimeZone objects take after construction or','line_number':786,'multiline':False]['text':' streaming in is complete.  Rules are represented directly, using an','line_number':787,'multiline':False]['text':' unencoded format.  We will discuss the start rule only below; the end','line_number':788,'multiline':False]['text':' rule is analogous.','line_number':789,'multiline':False]['text':'   startMode      Takes on enumerated values DAY_OF_MONTH,','line_number':790,'multiline':False]['text':'                  DOW_IN_MONTH, DOW_AFTER_DOM, or DOW_BEFORE_DOM.','line_number':791,'multiline':False]['text':'   startDay       The day of the month, or for DOW_IN_MONTH mode, a','line_number':792,'multiline':False]['text':'                  value indicating which DOW, such as +1 for first,','line_number':793,'multiline':False]['text':'                  +2 for second, -1 for last, etc.','line_number':794,'multiline':False]['text':'   startDayOfWeek The day of the week.  Ignored for DAY_OF_MONTH.','line_number':795,'multiline':False]['text':'','line_number':796,'multiline':False]['text':' ENCODED REPRESENTATION','line_number':797,'multiline':False]['text':' This is the format accepted by the constructor and by setStartRule()','line_number':798,'multiline':False]['text':' and setEndRule().  It uses various combinations of positive, negative,','line_number':799,'multiline':False]['text':' and zero values to encode the different rules.  This representation','line_number':800,'multiline':False]['text':' allows us to specify all the different rule flavors without altering','line_number':801,'multiline':False]['text':' the API.','line_number':802,'multiline':False]['text':'   MODE              startMonth    startDay    startDayOfWeek','line_number':803,'multiline':False]['text':'   DOW_IN_MONTH_MODE >=0           !=0         >0','line_number':804,'multiline':False]['text':'   DOM_MODE          >=0           >0          ==0','line_number':805,'multiline':False]['text':'   DOW_GE_DOM_MODE   >=0           >0          <0','line_number':806,'multiline':False]['text':'   DOW_LE_DOM_MODE   >=0           <0          <0','line_number':807,'multiline':False]['text':'   (no DST)          don't care    ==0         don't care','line_number':808,'multiline':False]['text':'','line_number':809,'multiline':False]['text':' STREAMED REPRESENTATION','line_number':810,'multiline':False]['text':' We must retain binary compatibility with the 1.1 FCS.  The 1.1 code only','line_number':811,'multiline':False]['text':' handles DOW_IN_MONTH_MODE and non-DST mode, the latter indicated by the','line_number':812,'multiline':False]['text':' flag useDaylight.  When we stream an object out, we translate into an','line_number':813,'multiline':False]['text':' approximate DOW_IN_MONTH_MODE representation so the object can be parsed','line_number':814,'multiline':False]['text':' and used by 1.1 code.  Following that, we write out the full','line_number':815,'multiline':False]['text':' representation separately so that contemporary code can recognize and','line_number':816,'multiline':False]['text':' parse it.  The full representation is written in a "packed" format,','line_number':817,'multiline':False]['text':' consisting of a version number, a length, and an array of bytes.  Future','line_number':818,'multiline':False]['text':' versions of this class may specify different versions.  If they wish to','line_number':819,'multiline':False]['text':' include additional data, they should do so by storing them after the','line_number':820,'multiline':False]['text':' packed representation below.','line_number':821,'multiline':False]['text':'----------------------------------------------------------------------','line_number':822,'multiline':False]['text':'*
 * Given a set of encoded rules in startDay and startDayOfMonth, decode
 * them and set the startMode appropriately.  Do the same for endDay and
 * endDayOfMonth.  Upon entry, the day of week variables may be zero or
 * negative, in order to indicate special modes.  The day of month
 * variables may also be negative.  Upon exit, the mode variables will be
 * set, and the day of week and day of month variables will be positive.
 * This method also recognizes a startDay or endDay of zero as indicating
 * no DST.
 ','line_number':824,'multiline':True]['text':'*
 * Decode the start rule and validate the parameters.  The parameters are
 * expected to be in encoded form, which represents the various rule modes
 * by negating or zeroing certain values.  Representation formats are:
 * <p>
 * <pre>
 *            DOW_IN_MONTH  DOM    DOW>=DOM  DOW<=DOM  no DST
 *            ------------  -----  --------  --------  ----------
 * month       0..11        same    same      same     don't care
 * day        -5..5         1..31   1..31    -1..-31   0
 * dayOfWeek   1..7         0      -1..-7    -1..-7    don't care
 * time        0..ONEDAY    same    same      same     don't care
 * </pre>
 * The range for month does not include UNDECIMBER since this class is
 * really specific to GregorianCalendar, which does not use that month.
 * The range for time includes ONEDAY (vs. ending at ONEDAY-1) because the
 * end rule is an exclusive limit point.  That is, the range of times that
 * are in DST include those >= the start and < the end.  For this reason,
 * it should be possible to specify an end of ONEDAY in order to include the
 * entire day.  Although this is equivalent to time 0 of the following day,
 * it's not always possible to specify that, for example, on December 31.
 * While arguably the start range should still be 0..ONEDAY-1, we keep
 * the start and end ranges the same for consistency.
 ','line_number':841,'multiline':True]['text':'*
 * Decode the end rule and validate the parameters.  This method is exactly
 * analogous to decodeStartRule().
 * @see decodeStartRule
 ','line_number':915,'multiline':True]['text':'
 * Lazy transition rules initializer
 *
 *    Note On the removal of UMTX_CHECK from checkTransitionRules():
 *
 *         It would be faster to have a UInitOnce as part of a SimpleTimeZone object,
 *         which would avoid needing to lock a mutex to check the initialization state.
 *         But we can't easily because simpletz.h is a public header, and including
 *         a UInitOnce as a member of SimpleTimeZone would publicly expose internal ICU headers.
 *
 *         Alternatively we could have a pointer to a UInitOnce in the SimpleTimeZone object,
 *         allocate it in the constructors. This would be a more intrusive change, but doable
 *         if performance turns out to be an issue.
 ','line_number':1064,'multiline':True]['text':' Create a TimeZoneRule for daylight saving time','line_number':1110,'multiline':False]['text':' Check for Null pointer','line_number':1130,'multiline':False]['text':' For now, use ID + "(DST)" as the name','line_number':1135,'multiline':False]['text':' Check for Null pointer','line_number':1139,'multiline':False]['text':' Calculate the first DST start time','line_number':1146,'multiline':False]['text':' Create a TimeZoneRule for standard time','line_number':1149,'multiline':False]['text':' Check for Null pointer','line_number':1167,'multiline':False]['text':' For now, use ID + "(STD)" as the name','line_number':1173,'multiline':False]['text':'Check for Null pointer','line_number':1177,'multiline':False]['text':' Calculate the first STD start time','line_number':1184,'multiline':False]['text':' Create a TimeZoneRule for initial time','line_number':1187,'multiline':False]['text':' Check for null pointers.','line_number':1195,'multiline':False]['text':' Create a TimeZoneRule for initial time','line_number':1203,'multiline':False]['text':' Check for null pointer.','line_number':1205,'multiline':False]['text':'status','line_number':1217,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1249,'multiline':True]['text':'eof','line_number':1251,'multiline':False]