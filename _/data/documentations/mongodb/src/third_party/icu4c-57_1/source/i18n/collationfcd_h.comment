['text':'
*******************************************************************************
* Copyright (C) 2012-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationfcd.h
*
* created on: 2012aug18
* created by: Markus W. Scherer
','line_number':1,'multiline':True]['text':'*
 * Data and functions for the FCD check fast path.
 *
 * The fast path looks at a pair of 16-bit code units and checks
 * whether there is an FCD boundary between them;
 * there is if the first unit has a trailing ccc=0 (!hasTccc(first))
 * or the second unit has a leading ccc=0 (!hasLccc(second)),
 * or both.
 * When the fast path finds a possible non-boundary,
 * then the FCD check slow path looks at the actual sequence of FCD values.
 *
 * This is a pure optimization.
 * The fast path must at least find all possible non-boundaries.
 * If the fast path is too pessimistic, it costs performance.
 *
 * For a pair of BMP characters, the fast path tests are precise (1 bit per character).
 *
 * For a supplementary code point, the two units are its lead and trail surrogates.
 * We set hasTccc(lead)=true if any of its 1024 associated supplementary code points
 * has lccc!=0 or tccc!=0.
 * We set hasLccc(trail)=true for all trail surrogates.
 * As a result, we leave the fast path if the lead surrogate might start a
 * supplementary code point that is not FCD-inert.
 * (So the fast path need not detect that there is a surrogate pair,
 * nor look ahead to the next full code point.)
 *
 * hasLccc(lead)=true if any of its 1024 associated supplementary code points
 * has lccc!=0, for fast boundary checking between BMP & supplementary.
 *
 * hasTccc(trail)=false:
 * It should only be tested for unpaired trail surrogates which are FCD-inert.
 ','line_number':23,'multiline':True]['text':' assert c <= 0xffff','line_number':58,'multiline':False]['text':' c can be negative, e.g., U_SENTINEL from UCharIterator;','line_number':59,'multiline':False]['text':' that is handled in the first test.','line_number':60,'multiline':False]['text':' U+0300 is the first character with lccc!=0.','line_number':63,'multiline':False]['text':' assert c <= 0xffff','line_number':70,'multiline':False]['text':' c can be negative, e.g., U_SENTINEL from UCharIterator;','line_number':71,'multiline':False]['text':' that is handled in the first test.','line_number':72,'multiline':False]['text':' U+00C0 is the first character with tccc!=0.','line_number':75,'multiline':False]['text':' Handles all of Unicode 0..10FFFF.','line_number':82,'multiline':False]['text':' c can be negative, e.g., U_SENTINEL.','line_number':83,'multiline':False]['text':' U+0300 is the first character with lccc!=0.','line_number':84,'multiline':False]['text':'*
     * Tibetan composite vowel signs (U+0F73, U+0F75, U+0F81)
     * must be decomposed before reaching the core collation code,
     * or else some sequences including them, even ones passing the FCD check,
     * do not yield canonically equivalent results.
     *
     * This is a fast and imprecise test.
     *
     * @param c a code point
     * @return TRUE if c is U+0F73, U+0F75 or U+0F81 or one of several other Tibetan characters
     ','line_number':93,'multiline':True]['text':'*
     * Tibetan composite vowel signs (U+0F73, U+0F75, U+0F81)
     * must be decomposed before reaching the core collation code,
     * or else some sequences including them, even ones passing the FCD check,
     * do not yield canonically equivalent results.
     *
     * They have distinct lccc/tccc combinations: 129/130 or 129/132.
     *
     * @param fcd16 the FCD value (lccc/tccc combination) of a code point
     * @return TRUE if fcd16 is from U+0F73, U+0F75 or U+0F81
     ','line_number':108,'multiline':True]['text':' No instantiation.','line_number':124,'multiline':False]['text':' !UCONFIG_NO_COLLATION','line_number':134,'multiline':False]['text':' __COLLATIONFCD_H__','line_number':135,'multiline':False]