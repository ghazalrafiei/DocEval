['text':'
******************************************************************************
* Copyright (C) 2015-2016, International Business Machines
* Corporation and others.  All Rights Reserved.
******************************************************************************
* sharedobject.h
','line_number':1,'multiline':True]['text':'*
 * Base class for unified cache exposing enough methods to SharedObject
 * instances to allow their addRef() and removeRef() methods to
 * update cache metrics. No other part of ICU, except for SharedObject,
 * should directly call the methods of this base class.
 ','line_number':18,'multiline':True]['text':'*
     * Called by addRefWhileHoldingCacheLock() when the hard reference count
     * of its instance goes from 0 to 1.
     ','line_number':28,'multiline':True]['text':'*
     * Called by removeRef() when the hard reference count of its instance
     * drops from 1 to 0.
     ','line_number':34,'multiline':True]['text':'*
     * Called by removeRefWhileHoldingCacheLock() when the hard reference
     * count of its instance drops from 1 to 0.
     ','line_number':40,'multiline':True]['text':'*
 * Base class for shared, reference-counted, auto-deleted objects.
 * Subclasses can be immutable.
 * If they are mutable, then they must implement their copy constructor
 * so that copyOnWrite() works.
 *
 * Either stack-allocate, use LocalPointer, or use addRef()/removeRef().
 * Sharing requires reference-counting.
 ','line_number':51,'multiline':True]['text':'* Initializes totalRefCount, softRefCount to 0. ','line_number':62,'multiline':True]['text':'* Initializes totalRefCount, softRefCount to 0. ','line_number':69,'multiline':True]['text':'*
     * Increments the number of references to this object. Thread-safe.
     ','line_number':79,'multiline':True]['text':'*
     * Increments the number of references to this object.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':84,'multiline':True]['text':'*
     * Increments the number of soft references to this object.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':91,'multiline':True]['text':'*
     * Decrements the number of references to this object. Thread-safe.
     ','line_number':98,'multiline':True]['text':'*
     * Decrements the number of references to this object.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':103,'multiline':True]['text':'*
     * Decrements the number of soft references to this object.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':110,'multiline':True]['text':'*
     * Returns the reference counter including soft references.
     * Uses a memory barrier.
     ','line_number':117,'multiline':True]['text':'*
     * Returns the count of soft references only.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':123,'multiline':True]['text':'*
     * Returns the count of hard references only. Uses a memory barrier.
     * Used for testing the cache. Regular clients won't need this.
     ','line_number':130,'multiline':True]['text':'*
     * If noHardReferences() == TRUE then this object has no hard references.
     * Must be called only from within the internals of UnifiedCache.
     ','line_number':136,'multiline':True]['text':'*
     * If hasHardReferences() == TRUE then this object has hard references.
     * Must be called only from within the internals of UnifiedCache.
     ','line_number':142,'multiline':True]['text':'*
     * If noSoftReferences() == TRUE then this object has no soft references.
     * Must be called only from within the internals of UnifiedCache and
     * only while the cache global mutex is held.
     ','line_number':148,'multiline':True]['text':'*
     * Deletes this object if it has no references or soft references.
     ','line_number':155,'multiline':True]['text':'*
     * @internal For UnifedCache use only to register this object with itself.
     *   Must be called before this object is exposed to multiple threads.
     ','line_number':160,'multiline':True]['text':'*
     * Returns a writable version of ptr.
     * If there is exactly one owner, then ptr itself is returned as a
     *  non-const pointer.
     * If there are multiple owners, then ptr is replaced with a 
     * copy-constructed clone,
     * and that is returned.
     * Returns NULL if cloning failed.
     *
     * T must be a subclass of SharedObject.
     ','line_number':168,'multiline':True]['text':'*
     * Makes dest an owner of the object pointed to by src while adjusting
     * reference counts and deleting the previous object dest pointed to
     * if necessary. Before this call is made, dest must either be NULL or
     * be included in the reference count of the object it points to. 
     *
     * T must be a subclass of SharedObject.
     ','line_number':191,'multiline':True]['text':'*
     * Equivalent to copyPtr(NULL, dest).
     ','line_number':208,'multiline':True]['text':' Any thread modifying softRefCount must hold the global cache mutex','line_number':222,'multiline':False]