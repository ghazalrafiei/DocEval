['text':'
******************************************************************************
*
*   Copyright (C) 2007-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  bmpset.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2007jan29
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]['text':'
     * Set the list indexes for binary searches for
     * U+0800, U+1000, U+2000, .., U+F000, U+10000.
     * U+0800 is the first 3-byte-UTF-8 code point. Lower code points are
     * looked up in the bit tables.
     * The last pair of indexes is for finding supplementary code points.
     ','line_number':33,'multiline':True]['text':'
 * Set bits in a bit rectangle in "vertical" bit organization.
 * start<limit<=0x800
 ','line_number':62,'multiline':True]['text':' Named for UTF-8 2-byte lead byte with upper 5 bits.','line_number':70,'multiline':False]['text':' Named for UTF-8 2-byte trail byte with lower 6 bits.','line_number':71,'multiline':False]['text':' Set one bit indicating an all-one block.','line_number':73,'multiline':False]['text':' Single-character shortcut.','line_number':75,'multiline':False]['text':' Partial vertical bit column.','line_number':84,'multiline':False]['text':' Partial vertical bit column,','line_number':89,'multiline':False]['text':' followed by a bit rectangle,','line_number':90,'multiline':False]['text':' followed by another partial vertical bit column.','line_number':91,'multiline':False]['text':' limit<=0x800. If limit==0x800 then limitLead=32 and limitTrail=0.','line_number':107,'multiline':False]['text':' In that case, bits=1<<limitLead is undefined but the bits value','line_number':108,'multiline':False]['text':' is not used because trail<limitTrail is already false.','line_number':109,'multiline':False]['text':' Set asciiBytes[].','line_number':121,'multiline':False]['text':' Set table7FF[].','line_number':137,'multiline':False]['text':' Set bmpBlockBits[].','line_number':153,'multiline':False]['text':' Else: Another range entirely in a known mixed-value block.','line_number':163,'multiline':False]['text':' Mixed-value block of 64 code points.','line_number':165,'multiline':False]['text':' Round up to the next block boundary.','line_number':168,'multiline':False]['text':' Ignore further ranges in this block.','line_number':169,'multiline':False]['text':' Multiple all-ones blocks of 64 code points each.','line_number':173,'multiline':False]['text':' Mixed-value block of 64 code points.','line_number':178,'multiline':False]['text':' Round up to the next block boundary.','line_number':181,'multiline':False]['text':' Ignore further ranges in this block.','line_number':182,'multiline':False]['text':'
 * Override some bits and bytes to the result of contains(FFFD)
 * for faster validity checking at runtime.
 * No need to set 0 values where they were reset to 0 in the constructor
 * and not modified by initBits().
 * (asciiBytes[] trail bytes, table7FF[] 0..7F, bmpBlockBits[] 0..7FF)
 * Need to set 0 values for surrogates D800..DFFF.
 ','line_number':200,'multiline':True]['text':' contains(FFFD)==TRUE','line_number':213,'multiline':False]['text':' Lead bytes 0xC0 and 0xC1.','line_number':218,'multiline':False]['text':' Lead byte 0xE0.','line_number':223,'multiline':False]['text':' First half of 4k block.','line_number':224,'multiline':False]['text':' Lead byte 0xED.','line_number':228,'multiline':False]['text':' Second half of 4k block.','line_number':230,'multiline':False]['text':' contains(FFFD)==FALSE','line_number':234,'multiline':False]['text':' Lead byte 0xED.','line_number':235,'multiline':False]['text':' Second half of 4k block.','line_number':236,'multiline':False]['text':' Examples:
                                       findCodePoint(c)
       set              list[]         c=0 1 3 4 7 8
       ===              ==============   ===========
       []               [110000]         0 0 0 0 0 0
       [\u0000-\u0003]  [0, 4, 110000]   1 1 1 2 2 2
       [\u0004-\u0007]  [4, 8, 110000]   0 0 0 1 1 2
       [:Any:]          [0, 110000]      1 1 1 1 1 1
     ','line_number':243,'multiline':True]['text':' Return the smallest i such that c < list[i].  Assume','line_number':253,'multiline':False]['text':' list[len - 1] == HIGH and that c is legal (0..HIGH-1).','line_number':254,'multiline':False]['text':' High runner test.  c is often after the last range, so an','line_number':257,'multiline':False]['text':' initial check for this condition pays off.','line_number':258,'multiline':False]['text':' invariant: c >= list[lo]','line_number':261,'multiline':False]['text':' invariant: c < list[hi]','line_number':262,'multiline':False]['text':' Found!','line_number':266,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':286,'multiline':False]['text':' are either in the set or not.','line_number':287,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':290,'multiline':False]['text':' surrogate or supplementary code point','line_number':294,'multiline':False]['text':' Out-of-range code points get FALSE, consistent with long-standing','line_number':297,'multiline':False]['text':' behavior of UnicodeSet::contains(c).','line_number':298,'multiline':False]['text':'
 * Check for sufficient length for trail unit for each surrogate pair.
 * Handle single surrogates as surrogate code points as usual in ICU.
 ','line_number':303,'multiline':True]['text':' span','line_number':312,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':327,'multiline':False]['text':' are either in the set or not.','line_number':328,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':333,'multiline':False]['text':' surrogate code point','line_number':339,'multiline':False]['text':' surrogate pair','line_number':344,'multiline':False]['text':' span not','line_number':352,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':367,'multiline':False]['text':' are either in the set or not.','line_number':368,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':373,'multiline':False]['text':' surrogate code point','line_number':379,'multiline':False]['text':' surrogate pair','line_number':384,'multiline':False]['text':' Symmetrical with span(). ','line_number':395,'multiline':True]['text':' span','line_number':401,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':416,'multiline':False]['text':' are either in the set or not.','line_number':417,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':422,'multiline':False]['text':' surrogate code point','line_number':428,'multiline':False]['text':' surrogate pair','line_number':433,'multiline':False]['text':' span not','line_number':444,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':459,'multiline':False]['text':' are either in the set or not.','line_number':460,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':465,'multiline':False]['text':' surrogate code point','line_number':471,'multiline':False]['text':' surrogate pair','line_number':476,'multiline':False]['text':'
 * Precheck for sufficient trail bytes at end of string only once per span.
 * Check validity.
 ','line_number':490,'multiline':True]['text':' Initial all-ASCII span.','line_number':499,'multiline':False]['text':' Pin to 0/1 values.','line_number':519,'multiline':False]['text':'
     * Make sure that the last 1/2/3/4-byte sequence before limit is complete
     * or runs into a lead byte.
     * In the span loop compare s with limit only once
     * per multi-byte character.
     *
     * Give a trailing illegal sequence the same value as the result of contains(FFFD),
     * including it if that is part of the span, otherwise set limit0 to before
     * the truncated sequence.
     ','line_number':524,'multiline':True]['text':' b>=0x80: lead or trail byte','line_number':536,'multiline':False]['text':' single trail byte, check for preceding 3- or 4-byte lead byte','line_number':538,'multiline':False]['text':' 4-byte lead byte with only two trail bytes','line_number':545,'multiline':False]['text':' lead byte with no trail bytes','line_number':552,'multiline':False]['text':' ASCII; or trail bytes with the result of contains(FFFD).','line_number':565,'multiline':False]['text':' Advance past the lead byte.','line_number':586,'multiline':False]['text':' handle U+0000..U+FFFF inline ','line_number':589,'multiline':True]['text':' All 64 code points with this lead byte and middle trail byte','line_number':596,'multiline':False]['text':' are either in the set or not.','line_number':597,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':602,'multiline':False]['text':' handle U+10000..U+10FFFF inline ','line_number':611,'multiline':True]['text':' Give an illegal sequence the same value as the result of contains(FFFD).','line_number':616,'multiline':False]['text':' 0xc0<=b<0xe0 ','line_number':628,'multiline':True]['text':' handle U+0000..U+07FF inline ','line_number':629,'multiline':True]['text':' Give an illegal sequence the same value as the result of contains(FFFD).','line_number':640,'multiline':False]['text':' Handle each byte of an illegal sequence separately to simplify the code;','line_number':641,'multiline':False]['text':' no need to optimize error handling.','line_number':642,'multiline':False]['text':'
 * While going backwards through UTF-8 optimize only for ASCII.
 * Unlike UTF-16, UTF-8 is not forward-backward symmetrical, that is, it is not
 * possible to tell from the last byte in a multi-byte sequence how many
 * preceding bytes there should be. Therefore, going backwards through UTF-8
 * is much harder than going forward.
 ','line_number':651,'multiline':True]['text':' Pin to 0/1 values.','line_number':661,'multiline':False]['text':' ASCII sub-span','line_number':669,'multiline':False]['text':' trail byte: collect a multi-byte character','line_number':693,'multiline':False]['text':' (or  lead byte in last-trail position)','line_number':694,'multiline':False]['text':' c is a valid code point, not ASCII, not a surrogate','line_number':696,'multiline':False]['text':' All 64 code points with the same bits 15..6','line_number':705,'multiline':False]['text':' are either in the set or not.','line_number':706,'multiline':False]['text':' Look up the code point in its 4k block of code points.','line_number':711,'multiline':False]