['text':'
*******************************************************************************
* Copyright (C) 2010-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationiterator.h
*
* created on: 2010oct27
* created by: Markus W. Scherer
','line_number':1,'multiline':True]['text':'*
 * Collation element iterator and abstract character iterator.
 *
 * When a method returns a code point value, it must be in 0..10FFFF,
 * except it can be negative as a sentinel value.
 ','line_number':29,'multiline':True]['text':'* Large enough for CEs of most short strings. ','line_number':39,'multiline':True]['text':' Use INITIAL_CAPACITY for a very simple fastpath.','line_number':58,'multiline':False]['text':' (Rather than buffer.getCapacity().)','line_number':59,'multiline':False]['text':'*
     * Resets the iterator state and sets the position to the specified offset.
     * Subclasses must implement, and must call the parent class method,
     * or CollationIterator::reset().
     ','line_number':100,'multiline':True]['text':'*
     * Returns the next collation element.
     ','line_number':109,'multiline':True]['text':' Return the next buffered CE.','line_number':114,'multiline':False]['text':' assert cesIndex == ceBuffer.length;','line_number':117,'multiline':False]['text':' Forced-inline of isSpecialCE32(ce32).','line_number':124,'multiline':False]['text':' Normal CE from the main data.','line_number':125,'multiline':False]['text':' Forced-inline of ceFromSimpleCE32(ce32).','line_number':126,'multiline':False]['text':' The compiler should be able to optimize the previous and the following','line_number':131,'multiline':False]['text':' comparisons of t with the same constant.','line_number':132,'multiline':False]['text':' Normal CE from the base data.','line_number':141,'multiline':False]['text':' Forced-inline of ceFromLongPrimaryCE32(ce32).','line_number':149,'multiline':False]['text':'*
     * Fetches all CEs.
     * @return getCEsLength()
     ','line_number':156,'multiline':True]['text':'*
     * Overwrites the current CE (the last one returned by nextCE()).
     ','line_number':162,'multiline':True]['text':' assert cesIndex > 0;','line_number':166,'multiline':False]['text':'*
     * Returns the previous collation element.
     ','line_number':170,'multiline':True]['text':'*
     * Returns the next code point (with post-increment).
     * Public for identical-level comparison and for testing.
     ','line_number':195,'multiline':True]['text':'*
     * Returns the previous code point (with pre-decrement).
     * Public for identical-level comparison and for testing.
     ','line_number':201,'multiline':True]['text':'*
     * Returns the next code point and its local CE32 value.
     * Returns Collation::FALLBACK_CE32 at the end of the text (c<0)
     * or when c's CE32 value is to be looked up in the base data (fallback).
     *
     * The code point is used for fallbacks, context and implicit weights.
     * It is ignored when the returned CE32 is not special (e.g., FFFD_CE32).
     ','line_number':212,'multiline':True]['text':'*
     * Called when handleNextCE32() returns a LEAD_SURROGATE_TAG for a lead surrogate code unit.
     * Returns the trail surrogate in that case and advances past it,
     * if a trail surrogate follows the lead surrogate.
     * Otherwise returns any other code unit and does not advance.
     ','line_number':222,'multiline':True]['text':'*
     * Called when handleNextCE32() returns with c==0, to see whether it is a NUL terminator.
     * (Not needed in Java.)
     ','line_number':230,'multiline':True]['text':'*
     * @return FALSE if surrogate code points U+D800..U+DFFF
     *         map to their own implicit primary weights (for UTF-16),
     *         or TRUE if they map to CE(U+FFFD) (for UTF-8)
     ','line_number':236,'multiline':True]['text':'*
     * Returns the CE32 from the data trie.
     * Normally the same as data->getCE32(), but overridden in the builder.
     * Call this only when the faster data->getCE32() cannot be used.
     ','line_number':247,'multiline':True]['text':' Main lookup trie of the data object.','line_number':259,'multiline':False]['text':'*
     * Returns the previous CE when data->isUnsafeBackward(c, isNumeric).
     ','line_number':284,'multiline':True]['text':'*
     * Turns a string of digits (bytes 0..9)
     * into a sequence of CEs that will sort in numeric order.
     *
     * Starts from this ce32's digit value and consumes the following/preceding digits.
     * The digits string must not be empty and must not have leading zeros.
     ','line_number':289,'multiline':True]['text':'*
     * Turns 1..254 digits into a sequence of CEs.
     * Called by appendNumericCEs() for each segment of at most 254 digits.
     ','line_number':298,'multiline':True]['text':' Number of code points to read forward, or -1.','line_number':309,'multiline':False]['text':' Used as a forward iteration limit in previousCEUnsafe().','line_number':310,'multiline':False]['text':' Numeric collation (CollationSettings::NUMERIC).','line_number':312,'multiline':False]['text':' !UCONFIG_NO_COLLATION','line_number':318,'multiline':False]['text':' __COLLATIONITERATOR_H__','line_number':319,'multiline':False]