['text':'
**********************************************************************
*   Copyright (C) 2001-2015 IBM and others. All rights reserved.
**********************************************************************
*   Date        Name        Description
*  08/13/2001   synwee      Creation.
**********************************************************************
','line_number':1,'multiline':True]['text':' mask off anything but primary order ','line_number':21,'multiline':True]['text':' mask off anything but secondary order ','line_number':23,'multiline':True]['text':' mask off anything but tertiary order ','line_number':25,'multiline':True]['text':' primary order shift ','line_number':27,'multiline':True]['text':' secondary order shift ','line_number':29,'multiline':True]['text':' get weights from a CE ','line_number':34,'multiline':True]['text':'*
 * This indicates an error has occured during processing or there are no more CEs 
 * to be returned.
 ','line_number':43,'multiline':True]['text':'*
     * Get the processed ordering priority of the next collation element in the text.
     * A single character may contain more than one collation element.
     *
     * @param ixLow a pointer to an int32_t to receive the iterator index before fetching the CE.
     * @param ixHigh a pointer to an int32_t to receive the iterator index after fetching the CE.
     * @param status A pointer to an UErrorCode to receive any errors.
     * @return The next collation elements ordering, otherwise returns UCOL_PROCESSED_NULLORDER 
     *         if an error has occured or if the end of string has been reached
     ','line_number':94,'multiline':True]['text':'*
     * Get the processed ordering priority of the previous collation element in the text.
     * A single character may contain more than one collation element.
     *
     * @param ixLow A pointer to an int32_t to receive the iterator index after fetching the CE
     * @param ixHigh A pointer to an int32_t to receiver the iterator index before fetching the CE
     * @param status A pointer to an UErrorCode to receive any errors. Noteably 
     *               a U_BUFFER_OVERFLOW_ERROR is returned if the internal stack
     *               buffer has been exhausted.
     * @return The previous collation elements ordering, otherwise returns 
     *         UCOL_PROCESSED_NULLORDER if an error has occured or if the start of
     *         string has been reached.
     ','line_number':105,'multiline':True]['text':' required since collation element iterator does not have a getText API','line_number':131,'multiline':False]['text':' exact length','line_number':133,'multiline':False]['text':'internal character breakiterator','line_number':137,'multiline':False]['text':' value USEARCH_DONE is the default value','line_number':139,'multiline':False]['text':' if we are not at the start of the text or the end of the text, ','line_number':140,'multiline':False]['text':' depending on the iteration direction and matchedIndex is USEARCH_DONE ','line_number':141,'multiline':False]['text':' it means that we can't find any more matches in that particular direction','line_number':142,'multiline':False]['text':' exact length','line_number':151,'multiline':False]['text':' length required for backwards ce comparison','line_number':152,'multiline':False]['text':' positions within the collation element iterator is used to determine','line_number':171,'multiline':False]['text':' if we are at the start of the text.','line_number':172,'multiline':False]['text':' utility collation element, used throughout program for temporary ','line_number':175,'multiline':False]['text':' iteration.','line_number':176,'multiline':False]['text':'*
* Exact matches without checking for the ends for extra accents.
* The match after the position within the collation element iterator is to be
* found. 
* After a match is found the offset in the collation element iterator will be
* shifted to the start of the match.
* Implementation note: 
* For tertiary we can't use the collator->tertiaryMask, that is a 
* preprocessed mask that takes into account case options. since we are only 
* concerned with exact matches, we don't need that.
* Alternate handling - since only the 16 most significant digits is only used, 
* we can safely do a compare without masking if the ce is a variable, we mask 
* and get only the primary values no shifting to quartenary is required since 
* all primary values less than variabletop will need to be masked off anyway.
* If the end character is composite and the pattern ce does not match the text 
* ce, we skip it until we find a match in the end composite character or when 
* it has passed the character. This is so that we can match pattern "a" with
* the text "\u00e6" 
* @param strsrch string search data
* @param status error status if any
* @return TRUE if an exact match is found, FALSE otherwise
','line_number':187,'multiline':True]['text':'*
* Canonical matches.
* According to the definition, matches found here will include the whole span 
* of beginning and ending accents if it overlaps that region.
* @param strsrch string search data
* @param status error status if any
* @return TRUE if a canonical match is found, FALSE otherwise
','line_number':212,'multiline':True]['text':'*
* Gets the previous match.
* Comments follows from handleNextExact
* @param strsrch string search data
* @param status error status if any
* @return True if a exact math is found, FALSE otherwise.
','line_number':223,'multiline':True]['text':'*
* Canonical matches.
* According to the definition, matches found here will include the whole span 
* of beginning and ending accents if it overlaps that region.
* @param strsrch string search data
* @param status error status if any
* @return TRUE if a canonical match is found, FALSE otherwise
','line_number':233,'multiline':True]['text':' #if !UCONFIG_NO_COLLATION ','line_number':245,'multiline':True]