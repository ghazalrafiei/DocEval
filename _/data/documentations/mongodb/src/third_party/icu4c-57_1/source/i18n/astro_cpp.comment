['text':'***********************************************************************
 * Copyright (C) 1996-2012, International Business Machines Corporation
 * and others. All Rights Reserved.
 ************************************************************************
 *  2003-nov-07   srl       Port from Java
 ','line_number':1,'multiline':True]['text':' for toString()','line_number':20,'multiline':False]['text':' for debugging','line_number':27,'multiline':False]['text':' must use double parens, i.e.:  U_DEBUG_ASTRO_MSG(("four is: %d",4));','line_number':56,'multiline':False]['text':'*
 * The number of standard hours in one sidereal day.
 * Approximately 24.93.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':76,'multiline':True]['text':'*
 * The number of sidereal hours in one mean solar day.
 * Approximately 24.07.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':84,'multiline':True]['text':'*
 * The average number of solar days from one new moon to the next.  This is the time
 * it takes for the moon to return the same ecliptic longitude as the sun.
 * It is longer than the sidereal month because the sun's longitude increases
 * during the year due to the revolution of the earth around the sun.
 * Approximately 29.53.
 *
 * @see #SIDEREAL_MONTH
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':92,'multiline':True]['text':'*
 * The average number of days it takes
 * for the moon to return to the same ecliptic longitude relative to the
 * stellar background.  This is referred to as the sidereal month.
 * It is shorter than the synodic month due to
 * the revolution of the earth around the sun.
 * Approximately 27.32.
 *
 * @see #SYNODIC_MONTH
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':105,'multiline':True]['text':'*
 * The average number number of days between successive vernal equinoxes.
 * Due to the precession of the earth's
 * axis, this is not precisely the same as the sidereal year.
 * Approximately 365.24
 *
 * @see #SIDEREAL_YEAR
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':119,'multiline':True]['text':'*
 * The average number of days it takes
 * for the sun to return to the same position against the fixed stellar
 * background.  This is the duration of one orbit of the earth about the sun
 * as it would appear to an outside observer.
 * Due to the precession of the earth's
 * axis, this is not precisely the same as the tropical year.
 * Approximately 365.25.
 *
 * @see #TROPICAL_YEAR
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':131,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':146,'multiline':False]['text':' Time-related constants','line_number':147,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':148,'multiline':False]['text':'*
 * The number of milliseconds in one second.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':150,'multiline':True]['text':'*
 * The number of milliseconds in one minute.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':157,'multiline':True]['text':'*
 * The number of milliseconds in one hour.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':164,'multiline':True]['text':'*
 * The number of milliseconds in one day.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':171,'multiline':True]['text':'*
 * The start of the julian day numbering scheme used by astronomers, which
 * is 1/1/4713 BC (Julian), 12:00 GMT.  This is given as the number of milliseconds
 * since 1/1/1970 AD (Gregorian), a negative number.
 * Note that julian day numbers and
 * the Julian calendar are <em>not</em> the same thing.  Also note that
 * julian days start at <em>noon</em>, not midnight.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':178,'multiline':True]['text':'*
 * Milliseconds value for 0.0 January 2000 AD.
 ','line_number':191,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':196,'multiline':False]['text':' Assorted private data used for conversions','line_number':197,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':198,'multiline':False]['text':' My own copies of these so compilers are more likely to optimize them away','line_number':200,'multiline':False]['text':' radians -> hours','line_number':204,'multiline':False]['text':' degrees -> radians','line_number':205,'multiline':False]['text':' radians -> degrees','line_number':206,'multiline':False]['text':'**
 * Given 'value', add or subtract 'range' until 0 <= 'value' < range.
 * The modulus operator.
 ','line_number':208,'multiline':True]['text':'*
 * Normalize an angle so that it's in the range 0 - 2pi.
 * For positive angles this is just (angle % 2pi), but the Java
 * mod operator doesn't work that way for negative numbers....
 ','line_number':216,'multiline':True]['text':'*
 * Normalize an angle into the range -PI - PI
 ','line_number':225,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':232,'multiline':False]['text':' Constructors','line_number':233,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':234,'multiline':False]['text':'*
 * Construct a new <code>CalendarAstronomer</code> object that is initialized to
 * the current date and time.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':236,'multiline':True]['text':'*
 * Construct a new <code>CalendarAstronomer</code> object that is initialized to
 * the specified date and time.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':247,'multiline':True]['text':'*
 * Construct a new <code>CalendarAstronomer</code> object with the given
 * latitude and longitude.  The object's time is set to the current
 * date and time.
 * <p>
 * @param longitude The desired longitude, in <em>degrees</em> east of
 *                  the Greenwich meridian.
 *
 * @param latitude  The desired latitude, in <em>degrees</em>.  Positive
 *                  values signify North, negative South.
 *
 * @see java.util.Date#getTime()
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':257,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':284,'multiline':False]['text':' Time and date getters and setters','line_number':285,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':286,'multiline':False]['text':'*
 * Set the current date and time of this <code>CalendarAstronomer</code> object.  All
 * astronomical calculations are performed based on this time setting.
 *
 * @param aTime the date and time, expressed as the number of milliseconds since
 *              1/1/1970 0:00 GMT (Gregorian).
 *
 * @see #setDate
 * @see #getTime
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':288,'multiline':True]['text':'*
 * Set the current date and time of this <code>CalendarAstronomer</code> object.  All
 * astronomical calculations are performed based on this time setting.
 *
 * @param jdn   the desired time, expressed as a "julian day number",
 *              which is the number of elapsed days since
 *              1/1/4713 BC (Julian), 12:00 GMT.  Note that julian day
 *              numbers start at <em>noon</em>.  To get the jdn for
 *              the corresponding midnight, subtract 0.5.
 *
 * @see #getJulianDay
 * @see #JULIAN_EPOCH_MS
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':306,'multiline':True]['text':'*
 * Get the current time of this <code>CalendarAstronomer</code> object,
 * represented as the number of milliseconds since
 * 1/1/1970 AD 0:00 GMT (Gregorian).
 *
 * @see #setTime
 * @see #getDate
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':327,'multiline':True]['text':'*
 * Get the current time of this <code>CalendarAstronomer</code> object,
 * expressed as a "julian day number", which is the number of elapsed
 * days since 1/1/4713 BC (Julian), 12:00 GMT.
 *
 * @see #setJulianDay
 * @see #JULIAN_EPOCH_MS
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':341,'multiline':True]['text':'*
 * Return this object's time expressed in julian centuries:
 * the number of centuries after 1/1/1900 AD, 12:00 GMT
 *
 * @see #getJulianDay
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':358,'multiline':True]['text':'*
 * Returns the current Greenwich sidereal time, measured in hours
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':373,'multiline':True]['text':' See page 86 of "Practial Astronomy with your Calculator",','line_number':380,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':381,'multiline':False]['text':'*
 * Returns the current local sidereal time, measured in hours
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':400,'multiline':True]['text':'*
 * Converts local sidereal time to Universal Time.
 *
 * @param lst   The Local Sidereal Time, in hours since sidereal midnight
 *              on this object's current date.
 *
 * @return      The corresponding Universal Time, in milliseconds since
 *              1 Jan 1970, GMT.
 ','line_number':409,'multiline':True]['text':' Convert to local mean time','line_number':419,'multiline':False]['text':' Then find local midnight on this day','line_number':422,'multiline':False]['text':'out("    lt  =" + lt + " hours");','line_number':425,'multiline':False]['text':'out("    base=" + new Date(base));','line_number':426,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':432,'multiline':False]['text':' Coordinate transformations, all based on the current time of this object','line_number':433,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':434,'multiline':False]['text':'*
 * Convert from ecliptic to equatorial coordinates.
 *
 * @param ecliptic  A point in the sky in ecliptic coordinates.
 * @return          The corresponding point in equatorial coordinates.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':436,'multiline':True]['text':'*
 * Convert from ecliptic to equatorial coordinates.
 *
 * @param eclipLong     The ecliptic longitude
 * @param eclipLat      The ecliptic latitude
 *
 * @return              The corresponding point in equatorial coordinates.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':449,'multiline':True]['text':' See page 42 of "Practial Astronomy with your Calculator",','line_number':461,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':462,'multiline':False]['text':'*
 * Convert from ecliptic longitude to equatorial coordinates.
 *
 * @param eclipLong     The ecliptic longitude
 *
 * @return              The corresponding point in equatorial coordinates.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':480,'multiline':True]['text':' TODO: optimize','line_number':491,'multiline':False]['text':'*
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':494,'multiline':True]['text':' Hour-angle','line_number':503,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':520,'multiline':False]['text':' The Sun','line_number':521,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':522,'multiline':False]['text':'','line_number':524,'multiline':False]['text':' Parameters of the Sun's orbit as of the epoch Jan 0.0 1990','line_number':525,'multiline':False]['text':' Angles are in radians (after multiplying by CalendarAstronomer::PI/180)','line_number':526,'multiline':False]['text':'','line_number':527,'multiline':False]['text':' Julian day of epoch','line_number':528,'multiline':False]['text':' Ecliptic longitude at epoch','line_number':530,'multiline':False]['text':' Ecliptic longitude of perigee','line_number':531,'multiline':False]['text':' Eccentricity of orbit','line_number':532,'multiline':False]['text':'double sunR0        1.495585e8        // Semi-major axis in KM','line_number':533,'multiline':False]['text':'double sunTheta0    (0.533128 * CalendarAstronomer::PI/180) // Angular diameter at R0','line_number':534,'multiline':False]['text':' The following three methods, which compute the sun parameters','line_number':536,'multiline':False]['text':' given above for an arbitrary epoch (whatever time the object is','line_number':537,'multiline':False]['text':' set to), make only a small difference as compared to using the','line_number':538,'multiline':False]['text':' above constants.  E.g., Sunset times might differ by ~12','line_number':539,'multiline':False]['text':' seconds.  Furthermore, the eta-g computation is befuddled by','line_number':540,'multiline':False]['text':' Duffet-Smith's incorrect coefficients (p.86).  I've corrected','line_number':541,'multiline':False]['text':' the first-order coefficient but the others may be off too - no','line_number':542,'multiline':False]['text':' way of knowing without consulting another source.','line_number':543,'multiline':False]['text':'  /**','line_number':545,'multiline':False]['text':'   * Return the sun's ecliptic longitude at perigee for the current time.','line_number':546,'multiline':False]['text':'   * See Duffett-Smith, p. 86.','line_number':547,'multiline':False]['text':'   * @return radians','line_number':548,'multiline':False]['text':'   */','line_number':549,'multiline':False]['text':'  private double getSunOmegaG() {','line_number':550,'multiline':False]['text':'      double T = getJulianCentury();','line_number':551,'multiline':False]['text':'      return (281.2208444 + (1.719175 + 0.000452778*T)*T) * DEG_RAD;','line_number':552,'multiline':False]['text':'  }','line_number':553,'multiline':False]['text':'  /**','line_number':555,'multiline':False]['text':'   * Return the sun's ecliptic longitude for the current time.','line_number':556,'multiline':False]['text':'   * See Duffett-Smith, p. 86.','line_number':557,'multiline':False]['text':'   * @return radians','line_number':558,'multiline':False]['text':'   */','line_number':559,'multiline':False]['text':'  private double getSunEtaG() {','line_number':560,'multiline':False]['text':'      double T = getJulianCentury();','line_number':561,'multiline':False]['text':'      //return (279.6966778 + (36000.76892 + 0.0003025*T)*T) * DEG_RAD;','line_number':562,'multiline':False]['text':'      //','line_number':563,'multiline':False]['text':'      // The above line is from Duffett-Smith, and yields manifestly wrong','line_number':564,'multiline':False]['text':'      // results.  The below constant is derived empirically to match the','line_number':565,'multiline':False]['text':'      // constant he gives for the 1990 EPOCH.','line_number':566,'multiline':False]['text':'      //','line_number':567,'multiline':False]['text':'      return (279.6966778 + (-0.3262541582718024 + 0.0003025*T)*T) * DEG_RAD;','line_number':568,'multiline':False]['text':'  }','line_number':569,'multiline':False]['text':'  /**','line_number':571,'multiline':False]['text':'   * Return the sun's eccentricity of orbit for the current time.','line_number':572,'multiline':False]['text':'   * See Duffett-Smith, p. 86.','line_number':573,'multiline':False]['text':'   * @return double','line_number':574,'multiline':False]['text':'   */','line_number':575,'multiline':False]['text':'  private double getSunE() {','line_number':576,'multiline':False]['text':'      double T = getJulianCentury();','line_number':577,'multiline':False]['text':'      return 0.01675104 - (0.0000418 + 0.000000126*T)*T;','line_number':578,'multiline':False]['text':'  }','line_number':579,'multiline':False]['text':'*
 * Find the "true anomaly" (longitude) of an object from
 * its mean anomaly and the eccentricity of its orbit.  This uses
 * an iterative solution to Kepler's equation.
 *
 * @param meanAnomaly   The object's longitude calculated as if it were in
 *                      a regular, circular orbit, measured in radians
 *                      from the point of perigee.
 *
 * @param eccentricity  The eccentricity of the orbit
 *
 * @return The true anomaly (longitude) measured in radians
 ','line_number':581,'multiline':True]['text':' First, solve Kepler's equation iteratively','line_number':596,'multiline':False]['text':' Duffett-Smith, p.90','line_number':597,'multiline':False]['text':' epsilon = 1e-5 rad','line_number':604,'multiline':False]['text':'*
 * The longitude of the sun at the time specified by this object.
 * The longitude is measured in radians along the ecliptic
 * from the "first point of Aries," the point at which the ecliptic
 * crosses the earth's equatorial plane at the vernal equinox.
 * <p>
 * Currently, this method uses an approximation of the two-body Kepler's
 * equation for the earth and the sun.  It does not take into account the
 * perturbations caused by the other planets, the moon, etc.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':610,'multiline':True]['text':' See page 86 of "Practial Astronomy with your Calculator",','line_number':624,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':625,'multiline':False]['text':'*
 * TODO Make this public when the entire class is package-private.
 ','line_number':633,'multiline':True]['text':'public','line_number':636,'multiline':True]['text':' See page 86 of "Practial Astronomy with your Calculator",','line_number':638,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':639,'multiline':False]['text':' Days since epoch','line_number':641,'multiline':False]['text':' Find the angular distance the sun in a fictitious','line_number':643,'multiline':False]['text':' circular orbit has travelled since the epoch.','line_number':644,'multiline':False]['text':' The epoch wasn't at the sun's perigee; find the angular distance','line_number':647,'multiline':False]['text':' since perigee, which is called the "mean anomaly"','line_number':648,'multiline':False]['text':' Now find the "true anomaly", e.g. the real solar longitude','line_number':651,'multiline':False]['text':' by solving Kepler's equation for an elliptical orbit','line_number':652,'multiline':False]['text':' NOTE: The 3rd ed. of the book lists omega_g and eta_g in different','line_number':653,'multiline':False]['text':' equations; omega_g is to be correct.','line_number':654,'multiline':False]['text':'*
 * The position of the sun at this object's current date and time,
 * in equatorial coordinates.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':658,'multiline':True]['text':'*
 * Constant representing the vernal equinox.
 * For use with {@link #getSunTime getSunTime}.
 * Note: In this case, "vernal" refers to the northern hemisphere's seasons.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':669,'multiline':True]['text':'double CalendarAstronomer::VERNAL_EQUINOX() {
  return 0;
}','line_number':676,'multiline':True]['text':'*
 * Constant representing the summer solstice.
 * For use with {@link #getSunTime getSunTime}.
 * Note: In this case, "summer" refers to the northern hemisphere's seasons.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':680,'multiline':True]['text':'*
 * Constant representing the autumnal equinox.
 * For use with {@link #getSunTime getSunTime}.
 * Note: In this case, "autumn" refers to the northern hemisphere's seasons.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':691,'multiline':True]['text':'double CalendarAstronomer::AUTUMN_EQUINOX() {
  return  (CalendarAstronomer::PI);
}','line_number':698,'multiline':True]['text':'*
 * Constant representing the winter solstice.
 * For use with {@link #getSunTime getSunTime}.
 * Note: In this case, "winter" refers to the northern hemisphere's seasons.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':702,'multiline':True]['text':'*
 * Find the next time at which the sun's ecliptic longitude will have
 * the desired value.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':715,'multiline':True]['text':' Make a rough guess: 6am or 6pm local time on the current day','line_number':753,'multiline':False]['text':' Angular Diameter','line_number':763,'multiline':False]['text':' Refraction correction','line_number':764,'multiline':False]['text':' Desired accuracy','line_number':765,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':771,'multiline':False]['text':'    //-------------------------------------------------------------------------','line_number':772,'multiline':False]['text':'    // Alternate Sun Rise/Set','line_number':773,'multiline':False]['text':'    // See Duffett-Smith p.93','line_number':774,'multiline':False]['text':'    //-------------------------------------------------------------------------','line_number':775,'multiline':False]['text':'','line_number':776,'multiline':False]['text':'    // This yields worse results (as compared to USNO data) than getSunRiseSet().','line_number':777,'multiline':False]['text':'    /**','line_number':778,'multiline':False]['text':'     * TODO Make this when the entire class is package-private.','line_number':779,'multiline':False]['text':'     */','line_number':780,'multiline':False]['text':'    /*public*/ long getSunRiseSet2(boolean rise) {','line_number':781,'multiline':False]['text':'        // 1. Calculate coordinates of the sun's center for midnight','line_number':782,'multiline':False]['text':'        double jd = uprv_floor(getJulianDay() - 0.5) + 0.5;','line_number':783,'multiline':False]['text':'        double[] sl = getSunLongitude(jd);//        double lambda1 = sl[0];','line_number':784,'multiline':False]['text':'        Equatorial pos1 = eclipticToEquatorial(lambda1, 0);','line_number':785,'multiline':False]['text':'','line_number':786,'multiline':False]['text':'        // 2. Add ... to lambda to get position 24 hours later','line_number':787,'multiline':False]['text':'        double lambda2 = lambda1 + 0.985647*DEG_RAD;','line_number':788,'multiline':False]['text':'        Equatorial pos2 = eclipticToEquatorial(lambda2, 0);','line_number':789,'multiline':False]['text':'','line_number':790,'multiline':False]['text':'        // 3. Calculate LSTs of rising and setting for these two positions','line_number':791,'multiline':False]['text':'        double tanL = ::tan(fLatitude);','line_number':792,'multiline':False]['text':'        double H = ::acos(-tanL * ::tan(pos1.declination));','line_number':793,'multiline':False]['text':'        double lst1r = (CalendarAstronomer_PI2 + pos1.ascension - H) * 24 / CalendarAstronomer_PI2;','line_number':794,'multiline':False]['text':'        double lst1s = (pos1.ascension + H) * 24 / CalendarAstronomer_PI2;','line_number':795,'multiline':False]['text':'               H = ::acos(-tanL * ::tan(pos2.declination));','line_number':796,'multiline':False]['text':'        double lst2r = (CalendarAstronomer_PI2-H + pos2.ascension ) * 24 / CalendarAstronomer_PI2;','line_number':797,'multiline':False]['text':'        double lst2s = (H + pos2.ascension ) * 24 / CalendarAstronomer_PI2;','line_number':798,'multiline':False]['text':'        if (lst1r > 24) lst1r -= 24;','line_number':799,'multiline':False]['text':'        if (lst1s > 24) lst1s -= 24;','line_number':800,'multiline':False]['text':'        if (lst2r > 24) lst2r -= 24;','line_number':801,'multiline':False]['text':'        if (lst2s > 24) lst2s -= 24;','line_number':802,'multiline':False]['text':'','line_number':803,'multiline':False]['text':'        // 4. Convert LSTs to GSTs.  If GST1 > GST2, add 24 to GST2.','line_number':804,'multiline':False]['text':'        double gst1r = lstToGst(lst1r);','line_number':805,'multiline':False]['text':'        double gst1s = lstToGst(lst1s);','line_number':806,'multiline':False]['text':'        double gst2r = lstToGst(lst2r);','line_number':807,'multiline':False]['text':'        double gst2s = lstToGst(lst2s);','line_number':808,'multiline':False]['text':'        if (gst1r > gst2r) gst2r += 24;','line_number':809,'multiline':False]['text':'        if (gst1s > gst2s) gst2s += 24;','line_number':810,'multiline':False]['text':'','line_number':811,'multiline':False]['text':'        // 5. Calculate GST at 0h UT of this date','line_number':812,'multiline':False]['text':'        double t00 = utToGst(0);','line_number':813,'multiline':False]['text':'','line_number':814,'multiline':False]['text':'        // 6. Calculate GST at 0h on the observer's longitude','line_number':815,'multiline':False]['text':'        double offset = ::round(fLongitude*12/PI); // p.95 step 6; he _rounds_ to nearest 15 deg.','line_number':816,'multiline':False]['text':'        double t00p = t00 - offset*1.002737909;','line_number':817,'multiline':False]['text':'        if (t00p < 0) t00p += 24; // do NOT normalize','line_number':818,'multiline':False]['text':'','line_number':819,'multiline':False]['text':'        // 7. Adjust','line_number':820,'multiline':False]['text':'        if (gst1r < t00p) {','line_number':821,'multiline':False]['text':'            gst1r += 24;','line_number':822,'multiline':False]['text':'            gst2r += 24;','line_number':823,'multiline':False]['text':'        }','line_number':824,'multiline':False]['text':'        if (gst1s < t00p) {','line_number':825,'multiline':False]['text':'            gst1s += 24;','line_number':826,'multiline':False]['text':'            gst2s += 24;','line_number':827,'multiline':False]['text':'        }','line_number':828,'multiline':False]['text':'','line_number':829,'multiline':False]['text':'        // 8.','line_number':830,'multiline':False]['text':'        double gstr = (24.07*gst1r-t00*(gst2r-gst1r))/(24.07+gst1r-gst2r);','line_number':831,'multiline':False]['text':'        double gsts = (24.07*gst1s-t00*(gst2s-gst1s))/(24.07+gst1s-gst2s);','line_number':832,'multiline':False]['text':'','line_number':833,'multiline':False]['text':'        // 9. Correct for parallax, refraction, and sun's diameter','line_number':834,'multiline':False]['text':'        double dec = (pos1.declination + pos2.declination) / 2;','line_number':835,'multiline':False]['text':'        double psi = ::acos(sin(fLatitude) / cos(dec));','line_number':836,'multiline':False]['text':'        double x = 0.830725 * DEG_RAD; // parallax+refraction+diameter','line_number':837,'multiline':False]['text':'        double y = ::asin(sin(x) / ::sin(psi)) * RAD_DEG;','line_number':838,'multiline':False]['text':'        double delta_t = 240 * y / cos(dec) / 3600; // hours','line_number':839,'multiline':False]['text':'','line_number':840,'multiline':False]['text':'        // 10. Add correction to GSTs, subtract from GSTr','line_number':841,'multiline':False]['text':'        gstr -= delta_t;','line_number':842,'multiline':False]['text':'        gsts += delta_t;','line_number':843,'multiline':False]['text':'','line_number':844,'multiline':False]['text':'        // 11. Convert GST to UT and then to local civil time','line_number':845,'multiline':False]['text':'        double ut = gstToUt(rise ? gstr : gsts);','line_number':846,'multiline':False]['text':'        //System.out.println((rise?"rise=":"set=") + ut + ", delta_t=" + delta_t);','line_number':847,'multiline':False]['text':'        long midnight = DAY_MS * (time / DAY_MS); // Find UT midnight on this day','line_number':848,'multiline':False]['text':'        return midnight + (long) (ut * 3600000);','line_number':849,'multiline':False]['text':'    }','line_number':850,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':852,'multiline':False]['text':'    /**','line_number':853,'multiline':False]['text':'     * Convert local sidereal time to Greenwich sidereal time.','line_number':854,'multiline':False]['text':'     * Section 15.  Duffett-Smith p.21','line_number':855,'multiline':False]['text':'     * @param lst in hours (0..24)','line_number':856,'multiline':False]['text':'     * @return GST in hours (0..24)','line_number':857,'multiline':False]['text':'     */','line_number':858,'multiline':False]['text':'    double lstToGst(double lst) {','line_number':859,'multiline':False]['text':'        double delta = fLongitude * 24 / CalendarAstronomer_PI2;','line_number':860,'multiline':False]['text':'        return normalize(lst - delta, 24);','line_number':861,'multiline':False]['text':'    }','line_number':862,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':864,'multiline':False]['text':'    /**','line_number':865,'multiline':False]['text':'     * Convert UT to GST on this date.','line_number':866,'multiline':False]['text':'     * Section 12.  Duffett-Smith p.17','line_number':867,'multiline':False]['text':'     * @param ut in hours','line_number':868,'multiline':False]['text':'     * @return GST in hours','line_number':869,'multiline':False]['text':'     */','line_number':870,'multiline':False]['text':'    double utToGst(double ut) {','line_number':871,'multiline':False]['text':'        return normalize(getT0() + ut*1.002737909, 24);','line_number':872,'multiline':False]['text':'    }','line_number':873,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':875,'multiline':False]['text':'    /**','line_number':876,'multiline':False]['text':'     * Convert GST to UT on this date.','line_number':877,'multiline':False]['text':'     * Section 13.  Duffett-Smith p.18','line_number':878,'multiline':False]['text':'     * @param gst in hours','line_number':879,'multiline':False]['text':'     * @return UT in hours','line_number':880,'multiline':False]['text':'     */','line_number':881,'multiline':False]['text':'    double gstToUt(double gst) {','line_number':882,'multiline':False]['text':'        return normalize(gst - getT0(), 24) * 0.9972695663;','line_number':883,'multiline':False]['text':'    }','line_number':884,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':886,'multiline':False]['text':'    double getT0() {','line_number':887,'multiline':False]['text':'        // Common computation for UT <=> GST','line_number':888,'multiline':False]['text':'','line_number':889,'multiline':False]['text':'        // Find JD for 0h UT','line_number':890,'multiline':False]['text':'        double jd = uprv_floor(getJulianDay() - 0.5) + 0.5;','line_number':891,'multiline':False]['text':'','line_number':892,'multiline':False]['text':'        double s = jd - 2451545.0;','line_number':893,'multiline':False]['text':'        double t = s / 36525.0;','line_number':894,'multiline':False]['text':'        double t0 = 6.697374558 + (2400.051336 + 0.000025862*t)*t;','line_number':895,'multiline':False]['text':'        return t0;','line_number':896,'multiline':False]['text':'    }','line_number':897,'multiline':False]['text':' Commented out - currently unused. ICU 2.6, Alan','line_number':899,'multiline':False]['text':'    //-------------------------------------------------------------------------','line_number':900,'multiline':False]['text':'    // Alternate Sun Rise/Set','line_number':901,'multiline':False]['text':'    // See sci.astro FAQ','line_number':902,'multiline':False]['text':'    // http://www.faqs.org/faqs/astronomy/faq/part3/section-5.html','line_number':903,'multiline':False]['text':'    //-------------------------------------------------------------------------','line_number':904,'multiline':False]['text':'','line_number':905,'multiline':False]['text':'    // Note: This method appears to produce inferior accuracy as','line_number':906,'multiline':False]['text':'    // compared to getSunRiseSet().','line_number':907,'multiline':False]['text':'','line_number':908,'multiline':False]['text':'    /**','line_number':909,'multiline':False]['text':'     * TODO Make this when the entire class is package-private.','line_number':910,'multiline':False]['text':'     */','line_number':911,'multiline':False]['text':'    /*public*/ long getSunRiseSet3(boolean rise) {','line_number':912,'multiline':False]['text':'','line_number':913,'multiline':False]['text':'        // Compute day number for 0.0 Jan 2000 epoch','line_number':914,'multiline':False]['text':'        double d = (double)(time - EPOCH_2000_MS) / DAY_MS;','line_number':915,'multiline':False]['text':'','line_number':916,'multiline':False]['text':'        // Now compute the Local Sidereal Time, LST:','line_number':917,'multiline':False]['text':'        //','line_number':918,'multiline':False]['text':'        double LST  =  98.9818  +  0.985647352 * d  +  /*UT*15  +  long*/','line_number':919,'multiline':False]['text':'            fLongitude*RAD_DEG;','line_number':920,'multiline':False]['text':'        //','line_number':921,'multiline':False]['text':'        // (east long. positive).  Note that LST is here expressed in degrees,','line_number':922,'multiline':False]['text':'        // where 15 degrees corresponds to one hour.  Since LST really is an angle,','line_number':923,'multiline':False]['text':'        // it's convenient to use one unit---degrees---throughout.','line_number':924,'multiline':False]['text':'','line_number':925,'multiline':False]['text':'        //    COMPUTING THE SUN'S POSITION','line_number':926,'multiline':False]['text':'        //    ----------------------------','line_number':927,'multiline':False]['text':'        //','line_number':928,'multiline':False]['text':'        // To be able to compute the Sun's rise/set times, you need to be able to','line_number':929,'multiline':False]['text':'        // compute the Sun's position at any time.  First compute the "day','line_number':930,'multiline':False]['text':'        // number" d as outlined above, for the desired moment.  Next compute:','line_number':931,'multiline':False]['text':'        //','line_number':932,'multiline':False]['text':'        double oblecl = 23.4393 - 3.563E-7 * d;','line_number':933,'multiline':False]['text':'        //','line_number':934,'multiline':False]['text':'        double w  =  282.9404  +  4.70935E-5   * d;','line_number':935,'multiline':False]['text':'        double M  =  356.0470  +  0.9856002585 * d;','line_number':936,'multiline':False]['text':'        double e  =  0.016709  -  1.151E-9     * d;','line_number':937,'multiline':False]['text':'        //','line_number':938,'multiline':False]['text':'        // This is the obliquity of the ecliptic, plus some of the elements of','line_number':939,'multiline':False]['text':'        // the Sun's apparent orbit (i.e., really the Earth's orbit): w =','line_number':940,'multiline':False]['text':'        // argument of perihelion, M = mean anomaly, e = eccentricity.','line_number':941,'multiline':False]['text':'        // Semi-major axis is here assumed to be exactly 1.0 (while not strictly','line_number':942,'multiline':False]['text':'        // true, this is still an accurate approximation).  Next compute E, the','line_number':943,'multiline':False]['text':'        // eccentric anomaly:','line_number':944,'multiline':False]['text':'        //','line_number':945,'multiline':False]['text':'        double E = M + e*(180/PI) * ::sin(M*DEG_RAD) * ( 1.0 + e*cos(M*DEG_RAD) );','line_number':946,'multiline':False]['text':'        //','line_number':947,'multiline':False]['text':'        // where E and M are in degrees.  This is it---no further iterations are','line_number':948,'multiline':False]['text':'        // needed because we know e has a sufficiently small value.  Next compute','line_number':949,'multiline':False]['text':'        // the true anomaly, v, and the distance, r:','line_number':950,'multiline':False]['text':'        //','line_number':951,'multiline':False]['text':'        /*      r * cos(v)  =  */ double A  =  cos(E*DEG_RAD) - e;','line_number':952,'multiline':False]['text':'        /*      r * ::sin(v)  =  */ double B  =  ::sqrt(1 - e*e) * ::sin(E*DEG_RAD);','line_number':953,'multiline':False]['text':'        //','line_number':954,'multiline':False]['text':'        // and','line_number':955,'multiline':False]['text':'        //','line_number':956,'multiline':False]['text':'        //      r  =  sqrt( A*A + B*B )','line_number':957,'multiline':False]['text':'        double v  =  ::atan2( B, A )*RAD_DEG;','line_number':958,'multiline':False]['text':'        //','line_number':959,'multiline':False]['text':'        // The Sun's true longitude, slon, can now be computed:','line_number':960,'multiline':False]['text':'        //','line_number':961,'multiline':False]['text':'        double slon  =  v + w;','line_number':962,'multiline':False]['text':'        //','line_number':963,'multiline':False]['text':'        // Since the Sun is always at the ecliptic (or at least very very close to','line_number':964,'multiline':False]['text':'        // it), we can use simplified formulae to convert slon (the Sun's ecliptic','line_number':965,'multiline':False]['text':'        // longitude) to sRA and sDec (the Sun's RA and Dec):','line_number':966,'multiline':False]['text':'        //','line_number':967,'multiline':False]['text':'        //                   ::sin(slon) * cos(oblecl)','line_number':968,'multiline':False]['text':'        //     tan(sRA)  =  -------------------------','line_number':969,'multiline':False]['text':'        //            cos(slon)','line_number':970,'multiline':False]['text':'        //','line_number':971,'multiline':False]['text':'        //     ::sin(sDec) =  ::sin(oblecl) * ::sin(slon)','line_number':972,'multiline':False]['text':'        //','line_number':973,'multiline':False]['text':'        // As was the case when computing az, the Azimuth, if possible use an','line_number':974,'multiline':False]['text':'        // atan2() function to compute sRA.','line_number':975,'multiline':False]['text':'','line_number':976,'multiline':False]['text':'        double sRA = ::atan2(sin(slon*DEG_RAD) * cos(oblecl*DEG_RAD), cos(slon*DEG_RAD))*RAD_DEG;','line_number':977,'multiline':False]['text':'','line_number':978,'multiline':False]['text':'        double sin_sDec = ::sin(oblecl*DEG_RAD) * ::sin(slon*DEG_RAD);','line_number':979,'multiline':False]['text':'        double sDec = ::asin(sin_sDec)*RAD_DEG;','line_number':980,'multiline':False]['text':'','line_number':981,'multiline':False]['text':'        //    COMPUTING RISE AND SET TIMES','line_number':982,'multiline':False]['text':'        //    ----------------------------','line_number':983,'multiline':False]['text':'        //','line_number':984,'multiline':False]['text':'        // To compute when an object rises or sets, you must compute when it','line_number':985,'multiline':False]['text':'        // passes the meridian and the HA of rise/set.  Then the rise time is','line_number':986,'multiline':False]['text':'        // the meridian time minus HA for rise/set, and the set time is the','line_number':987,'multiline':False]['text':'        // meridian time plus the HA for rise/set.','line_number':988,'multiline':False]['text':'        //','line_number':989,'multiline':False]['text':'        // To find the meridian time, compute the Local Sidereal Time at 0h local','line_number':990,'multiline':False]['text':'        // time (or 0h UT if you prefer to work in UT) as outlined above---name','line_number':991,'multiline':False]['text':'        // that quantity LST0.  The Meridian Time, MT, will now be:','line_number':992,'multiline':False]['text':'        //','line_number':993,'multiline':False]['text':'        //     MT  =  RA - LST0','line_number':994,'multiline':False]['text':'        double MT = normalize(sRA - LST, 360);','line_number':995,'multiline':False]['text':'        //','line_number':996,'multiline':False]['text':'        // where "RA" is the object's Right Ascension (in degrees!).  If negative,','line_number':997,'multiline':False]['text':'        // add 360 deg to MT.  If the object is the Sun, leave the time as it is,','line_number':998,'multiline':False]['text':'        // but if it's stellar, multiply MT by 365.2422/366.2422, to convert from','line_number':999,'multiline':False]['text':'        // sidereal to solar time.  Now, compute HA for rise/set, name that','line_number':1000,'multiline':False]['text':'        // quantity HA0:','line_number':1001,'multiline':False]['text':'        //','line_number':1002,'multiline':False]['text':'        //                 ::sin(h0)  -  ::sin(lat) * ::sin(Dec)','line_number':1003,'multiline':False]['text':'        // cos(HA0)  =  ---------------------------------','line_number':1004,'multiline':False]['text':'        //                      cos(lat) * cos(Dec)','line_number':1005,'multiline':False]['text':'        //','line_number':1006,'multiline':False]['text':'        // where h0 is the altitude selected to represent rise/set.  For a purely','line_number':1007,'multiline':False]['text':'        // mathematical horizon, set h0 = 0 and simplify to:','line_number':1008,'multiline':False]['text':'        //','line_number':1009,'multiline':False]['text':'        //    cos(HA0)  =  - tan(lat) * tan(Dec)','line_number':1010,'multiline':False]['text':'        //','line_number':1011,'multiline':False]['text':'        // If you want to account for refraction on the atmosphere, set h0 = -35/60','line_number':1012,'multiline':False]['text':'        // degrees (-35 arc minutes), and if you want to compute the rise/set times','line_number':1013,'multiline':False]['text':'        // for the Sun's upper limb, set h0 = -50/60 (-50 arc minutes).','line_number':1014,'multiline':False]['text':'        //','line_number':1015,'multiline':False]['text':'        double h0 = -50/60 * DEG_RAD;','line_number':1016,'multiline':False]['text':'','line_number':1017,'multiline':False]['text':'        double HA0 = ::acos(','line_number':1018,'multiline':False]['text':'          (sin(h0) - ::sin(fLatitude) * sin_sDec) /','line_number':1019,'multiline':False]['text':'          (cos(fLatitude) * cos(sDec*DEG_RAD)))*RAD_DEG;','line_number':1020,'multiline':False]['text':'','line_number':1021,'multiline':False]['text':'        // When HA0 has been computed, leave it as it is for the Sun but multiply','line_number':1022,'multiline':False]['text':'        // by 365.2422/366.2422 for stellar objects, to convert from sidereal to','line_number':1023,'multiline':False]['text':'        // solar time.  Finally compute:','line_number':1024,'multiline':False]['text':'        //','line_number':1025,'multiline':False]['text':'        //    Rise time  =  MT - HA0','line_number':1026,'multiline':False]['text':'        //    Set  time  =  MT + HA0','line_number':1027,'multiline':False]['text':'        //','line_number':1028,'multiline':False]['text':'        // convert the times from degrees to hours by dividing by 15.','line_number':1029,'multiline':False]['text':'        //','line_number':1030,'multiline':False]['text':'        // If you'd like to check that your calculations are accurate or just','line_number':1031,'multiline':False]['text':'        // need a quick result, check the USNO's Sun or Moon Rise/Set Table,','line_number':1032,'multiline':False]['text':'        // <URL:http://aa.usno.navy.mil/AA/data/docs/RS_OneYear.html>.','line_number':1033,'multiline':False]['text':'','line_number':1034,'multiline':False]['text':'        double result = MT + (rise ? -HA0 : HA0); // in degrees','line_number':1035,'multiline':False]['text':'','line_number':1036,'multiline':False]['text':'        // Find UT midnight on this day','line_number':1037,'multiline':False]['text':'        long midnight = DAY_MS * (time / DAY_MS);','line_number':1038,'multiline':False]['text':'','line_number':1039,'multiline':False]['text':'        return midnight + (long) (result * 3600000 / 15);','line_number':1040,'multiline':False]['text':'    }','line_number':1041,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1043,'multiline':False]['text':' The Moon','line_number':1044,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1045,'multiline':False]['text':' Mean long. at epoch','line_number':1047,'multiline':False]['text':' Mean long. of perigee','line_number':1048,'multiline':False]['text':' Mean long. of node','line_number':1049,'multiline':False]['text':' Inclination of orbit','line_number':1050,'multiline':False]['text':' Eccentricity of orbit','line_number':1051,'multiline':False]['text':' These aren't used right now','line_number':1053,'multiline':False]['text':' semi-major axis (km)','line_number':1054,'multiline':False]['text':' Angular size at distance A','line_number':1055,'multiline':False]['text':' Parallax at distance A','line_number':1056,'multiline':False]['text':'*
 * The position of the moon at the time set on this
 * object, in equatorial coordinates.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1058,'multiline':True]['text':'','line_number':1066,'multiline':False]['text':' See page 142 of "Practial Astronomy with your Calculator",','line_number':1067,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':1068,'multiline':False]['text':'','line_number':1069,'multiline':False]['text':' Calculate the solar longitude.  Has the side effect of','line_number':1071,'multiline':False]['text':' filling in "meanAnomalySun" as well.','line_number':1072,'multiline':False]['text':'','line_number':1075,'multiline':False]['text':' Find the # of days since the epoch of our orbital parameters.','line_number':1076,'multiline':False]['text':' TODO: Convert the time of day portion into ephemeris time','line_number':1077,'multiline':False]['text':'','line_number':1078,'multiline':False]['text':' Days since epoch','line_number':1079,'multiline':False]['text':' Calculate the mean longitude and anomaly of the moon, based on','line_number':1081,'multiline':False]['text':' a circular orbit.  Similar to the corresponding solar calculation.','line_number':1082,'multiline':False]['text':'','line_number':1086,'multiline':False]['text':' Calculate the following corrections:','line_number':1087,'multiline':False]['text':'  Evection:   the sun's gravity affects the moon's eccentricity','line_number':1088,'multiline':False]['text':'  Annual Eqn: variation in the effect due to earth-sun distance','line_number':1089,'multiline':False]['text':'  A3:         correction factor (for ???)','line_number':1090,'multiline':False]['text':'','line_number':1091,'multiline':False]['text':'','line_number':1099,'multiline':False]['text':' More correction factors:','line_number':1100,'multiline':False]['text':'  center  equation of the center correction','line_number':1101,'multiline':False]['text':'  a4      yet another error correction (???)','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':' TODO: Skip the equation of the center correction and solve Kepler's eqn?','line_number':1104,'multiline':False]['text':'','line_number':1105,'multiline':False]['text':' Now find the moon's corrected longitude','line_number':1109,'multiline':False]['text':'','line_number':1112,'multiline':False]['text':' And finally, find the variation, caused by the fact that the sun's','line_number':1113,'multiline':False]['text':' gravitational pull on the moon varies depending on which side of','line_number':1114,'multiline':False]['text':' the earth the moon is on','line_number':1115,'multiline':False]['text':'','line_number':1116,'multiline':False]['text':'','line_number':1121,'multiline':False]['text':' What we've calculated so far is the moon's longitude in the plane','line_number':1122,'multiline':False]['text':' of its own orbit.  Now map to the ecliptic to get the latitude','line_number':1123,'multiline':False]['text':' and longitude.  First we need to find the longitude of the ascending','line_number':1124,'multiline':False]['text':' node, the position on the ecliptic where it is crossed by the moon's','line_number':1125,'multiline':False]['text':' orbit as it crosses from the southern to the northern hemisphere.','line_number':1126,'multiline':False]['text':'','line_number':1127,'multiline':False]['text':'*
 * The "age" of the moon at the time specified in this object.
 * This is really the angle between the
 * current ecliptic longitudes of the sun and the moon,
 * measured in radians.
 *
 * @see #getMoonPhase
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1144,'multiline':True]['text':' See page 147 of "Practial Astronomy with your Calculator",','line_number':1155,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':1156,'multiline':False]['text':'','line_number':1157,'multiline':False]['text':' Force the moon's position to be calculated.  We're going to use','line_number':1158,'multiline':False]['text':' some the intermediate results cached during that calculation.','line_number':1159,'multiline':False]['text':'','line_number':1160,'multiline':False]['text':'*
 * Calculate the phase of the moon at the time set in this object.
 * The returned phase is a <code>double</code> in the range
 * <code>0 <= phase < 1</code>, interpreted as follows:
 * <ul>
 * <li>0.00: New moon
 * <li>0.25: First quarter
 * <li>0.50: Full moon
 * <li>0.75: Last quarter
 * </ul>
 *
 * @see #getMoonAge
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1166,'multiline':True]['text':' See page 147 of "Practial Astronomy with your Calculator",','line_number':1182,'multiline':False]['text':' by Peter Duffet-Smith, for details on the algorithm.','line_number':1183,'multiline':False]['text':'*
 * Constant representing a new moon.
 * For use with {@link #getMoonTime getMoonTime}
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1187,'multiline':True]['text':'*
 * Constant representing the moon's first quarter.
 * For use with {@link #getMoonTime getMoonTime}
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1197,'multiline':True]['text':'const CalendarAstronomer::MoonAge CalendarAstronomer::FIRST_QUARTER() {
  return   CalendarAstronomer::MoonAge(CalendarAstronomer::PI/2);
}','line_number':1203,'multiline':True]['text':'*
 * Constant representing a full moon.
 * For use with {@link #getMoonTime getMoonTime}
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1207,'multiline':True]['text':'*
 * Constant representing the moon's last quarter.
 * For use with {@link #getMoonTime getMoonTime}
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1216,'multiline':True]['text':'const CalendarAstronomer::MoonAge CalendarAstronomer::LAST_QUARTER() {
  return  CalendarAstronomer::MoonAge((CalendarAstronomer::PI*3)/2);
}','line_number':1231,'multiline':True]['text':'*
 * Find the next or previous time at which the Moon's ecliptic
 * longitude will have the desired value.
 * <p>
 * @param desired   The desired longitude.
 * @param next      <tt>true</tt> if the next occurrance of the phase
 *                  is desired, <tt>false</tt> for the previous occurrance.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1235,'multiline':True]['text':'*
 * Find the next or previous time at which the moon will be in the
 * desired phase.
 * <p>
 * @param desired   The desired phase of the moon.
 * @param next      <tt>true</tt> if the next occurrance of the phase
 *                  is desired, <tt>false</tt> for the previous occurrance.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1255,'multiline':True]['text':'*
 * Returns the time (GMT) of sunrise or sunset on the local date to which
 * this calendar is currently set.
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1277,'multiline':True]['text':' Angular Diameter','line_number':1288,'multiline':False]['text':' Refraction correction','line_number':1289,'multiline':False]['text':' Desired accuracy','line_number':1290,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1293,'multiline':False]['text':' Interpolation methods for finding the time at which a given event occurs','line_number':1294,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1295,'multiline':False]['text':' Find the value of the function at the current time','line_number':1300,'multiline':False]['text':' Find out how far we are from the desired angle','line_number':1303,'multiline':False]['text':' Using the average period, estimate the next (or previous) time at','line_number':1306,'multiline':False]['text':' which the desired angle occurs.','line_number':1307,'multiline':False]['text':' Liu','line_number':1310,'multiline':False]['text':' Liu','line_number':1311,'multiline':False]['text':' Now iterate until we get the error below epsilon.  Throughout','line_number':1315,'multiline':False]['text':' this loop we use normPI to get values in the range -Pi to Pi,','line_number':1316,'multiline':False]['text':' since we're using them as correction factors rather than absolute angles.','line_number':1317,'multiline':False]['text':' Evaluate the function at the time we've estimated','line_number':1319,'multiline':False]['text':' Find the # of milliseconds per radian at this point on the curve','line_number':1322,'multiline':False]['text':' Correct the time estimate based on how far off the angle is','line_number':1325,'multiline':False]['text':' HACK:','line_number':1328,'multiline':False]['text':'','line_number':1329,'multiline':False]['text':' If abs(deltaT) begins to diverge we need to quit this loop.','line_number':1330,'multiline':False]['text':' This only appears to happen when attempting to locate, for','line_number':1331,'multiline':False]['text':' example, a new moon on the day of the new moon.  E.g.:','line_number':1332,'multiline':False]['text':'','line_number':1333,'multiline':False]['text':' This result is correct:','line_number':1334,'multiline':False]['text':' newMoon(7508(Mon Jul 23 00:00:00 CST 1990,false))=','line_number':1335,'multiline':False]['text':'   Sun Jul 22 10:57:41 CST 1990','line_number':1336,'multiline':False]['text':'','line_number':1337,'multiline':False]['text':' But attempting to make the same call a day earlier causes deltaT','line_number':1338,'multiline':False]['text':' to diverge:','line_number':1339,'multiline':False]['text':' CalendarAstronomer.timeOfAngle() diverging: 1.348508727575625E9 ->','line_number':1340,'multiline':False]['text':'   1.3649828540224032E9','line_number':1341,'multiline':False]['text':' newMoon(7507(Sun Jul 22 00:00:00 CST 1990,false))=','line_number':1342,'multiline':False]['text':'   Sun Jul 08 13:56:15 CST 1990','line_number':1343,'multiline':False]['text':'','line_number':1344,'multiline':False]['text':' As a temporary solution, we catch this specific condition and','line_number':1345,'multiline':False]['text':' adjust our start time by one eighth period days (either forward','line_number':1346,'multiline':False]['text':' or backward) and try again.','line_number':1347,'multiline':False]['text':' Liu 11/9/00','line_number':1348,'multiline':False]['text':'','line_number':1374,'multiline':False]['text':' Calculate the object's position at the current time, then use that','line_number':1375,'multiline':False]['text':' position to calculate the time of rising or setting.  The position','line_number':1376,'multiline':False]['text':' will be different at that time, so iterate until the error is allowable.','line_number':1377,'multiline':False]['text':'','line_number':1378,'multiline':False]['text':' See "Practical Astronomy With Your Calculator, section 33.','line_number':1382,'multiline':False]['text':' Convert from LST to Universal Time.','line_number':1387,'multiline':False]['text':' Calculate the correction due to refraction and the object's angular diameter','line_number':1397,'multiline':False]['text':'*
 * Return the obliquity of the ecliptic (the angle between the ecliptic
 * and the earth's equator) at the current time.  This varies due to
 * the precession of the earth's axis.
 *
 * @return  the obliquity of the ecliptic relative to the equator,
 *          measured in radians.
 ','line_number':1406,'multiline':True]['text':' 2000 AD, January 1.5','line_number':1416,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1431,'multiline':False]['text':' Private data','line_number':1432,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1433,'multiline':False]['text':'private static void out(String s) {','line_number':1450,'multiline':False]['text':'    System.out.println(s);','line_number':1451,'multiline':False]['text':'}','line_number':1452,'multiline':False]['text':'private static String deg(double rad) {','line_number':1454,'multiline':False]['text':'    return Double.toString(rad * RAD_DEG);','line_number':1455,'multiline':False]['text':'}','line_number':1456,'multiline':False]['text':'private static String hours(long ms) {','line_number':1458,'multiline':False]['text':'    return Double.toString((double)ms / HOUR_MS) + " hours";','line_number':1459,'multiline':False]['text':'}','line_number':1460,'multiline':False]['text':'*
 * @internal
 * @deprecated ICU 2.4. This class may be removed or modified.
 ','line_number':1462,'multiline':True]['text':'UDate CalendarAstronomer::local(UDate localMillis) {
  // TODO - srl ?
  TimeZone *tz = TimeZone::createDefault();
  int32_t rawOffset;
  int32_t dstOffset;
  UErrorCode status = U_ZERO_ERROR;
  tz->getOffset(localMillis, TRUE, rawOffset, dstOffset, status);
  delete tz;
  return localMillis - rawOffset;
}','line_number':1466,'multiline':True]['text':' Debugging functions','line_number':1477,'multiline':False]['text':'  static private String radToHms(double angle) {','line_number':1513,'multiline':False]['text':'    int hrs = (int) (angle*RAD_HOUR);','line_number':1514,'multiline':False]['text':'    int min = (int)((angle*RAD_HOUR - hrs) * 60);','line_number':1515,'multiline':False]['text':'    int sec = (int)((angle*RAD_HOUR - hrs - min/60.0) * 3600);','line_number':1516,'multiline':False]['text':'    return Integer.toString(hrs) + "h" + min + "m" + sec + "s";','line_number':1518,'multiline':False]['text':'  }','line_number':1519,'multiline':False]['text':'  static private String radToDms(double angle) {','line_number':1521,'multiline':False]['text':'    int deg = (int) (angle*RAD_DEG);','line_number':1522,'multiline':False]['text':'    int min = (int)((angle*RAD_DEG - deg) * 60);','line_number':1523,'multiline':False]['text':'    int sec = (int)((angle*RAD_DEG - deg - min/60.0) * 3600);','line_number':1524,'multiline':False]['text':'    return Integer.toString(deg) + "\u00b0" + min + "'" + sec + "\"";','line_number':1526,'multiline':False]['text':'  }','line_number':1527,'multiline':False]['text':' =============== Calendar Cache ================','line_number':1529,'multiline':False]['text':'  !UCONFIG_NO_FORMATTING','line_number':1601,'multiline':False]