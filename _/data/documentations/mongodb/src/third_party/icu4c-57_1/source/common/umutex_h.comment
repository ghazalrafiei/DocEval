['text':'
**********************************************************************
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*
* File UMUTEX.H
*
* Modification History:
*
*   Date        Name        Description
*   04/02/97  aliu        Creation.
*   04/07/99  srl         rewrite - C interface, multiple mutices
*   05/13/99  stephen     Changed to umutex (from cmutex)
******************************************************************************
','line_number':1,'multiline':True]['text':' Forward Declarations. UMutex is not in the ICU namespace (yet) because','line_number':27,'multiline':False]['text':'                       there are some remaining references from plain C.','line_number':28,'multiline':False]['text':' Stringify macros, to allow #include of user supplied atomic & mutex files.','line_number':36,'multiline':False]['text':'***************************************************************************
 *
 *   Low Level Atomic Operations.
 *      Compiler dependent. Not operating system dependent.
 *
 ***************************************************************************','line_number':40,'multiline':True]['text':'  C++11 atomics are available.','line_number':51,'multiline':False]['text':' MSVC compiler. Reads and writes of volatile variables have','line_number':79,'multiline':False]['text':'                acquire and release memory semantics, respectively.','line_number':80,'multiline':False]['text':'                This is a Microsoft extension, not standard C++ behavior.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'   Update:      can't use this because of MinGW, built with gcc.','line_number':83,'multiline':False]['text':'                Original plan was to use gcc atomics for MinGW, but they','line_number':84,'multiline':False]['text':'                aren't supported, so we fold MinGW into this path.','line_number':85,'multiline':False]['text':'
 *  Clang __c11 atomic built-ins
 ','line_number':122,'multiline':True]['text':'
 * gcc atomic ops. These are available on several other compilers as well.
 ','line_number':149,'multiline':True]['text':'
 * Unknown Platform. Use out-of-line functions, which in turn use mutexes.
 *                   Slow but correct.
 ','line_number':179,'multiline':True]['text':' Low Level Atomic Ops Platfrom Chain ','line_number':204,'multiline':True]['text':'************************************************************************************************
 *
 *  UInitOnce Definitions.
 *     These are platform neutral.
 *
 ************************************************************************************************','line_number':208,'multiline':True]['text':' Note: isReset() is used by service registration code.','line_number':222,'multiline':False]['text':'                 Thread safety of this usage needs review.','line_number':223,'multiline':False]['text':' umtx_initOnce variant for plain functions, or static class functions.','line_number':243,'multiline':False]['text':'               No context parameter.','line_number':244,'multiline':False]['text':' umtx_initOnce variant for plain functions, or static class functions.','line_number':255,'multiline':False]['text':'               With ErrorCode, No context parameter.','line_number':256,'multiline':False]['text':' We run the initialization.','line_number':262,'multiline':False]['text':' Someone else already ran the initialization.','line_number':267,'multiline':False]['text':' umtx_initOnce variant for plain functions, or static class functions,','line_number':274,'multiline':False]['text':'               with a context parameter.','line_number':275,'multiline':False]['text':' umtx_initOnce variant for plain functions, or static class functions,','line_number':286,'multiline':False]['text':'               with a context parameter and an error code.','line_number':287,'multiline':False]['text':' We run the initialization.','line_number':293,'multiline':False]['text':' Someone else already ran the initialization.','line_number':298,'multiline':False]['text':'************************************************************************************************
 *
 *  Mutex Definitions. Platform Dependent, #if platform chain follows.
 *         TODO:  Add a C++11 version.
 *                Need to convert all mutex using files to C++ first.
 *
 ************************************************************************************************','line_number':309,'multiline':True]['text':' #inlcude "U_USER_MUTEX_H"','line_number':318,'multiline':False]['text':' Windows Definitions.
 *    Windows comes first in the platform chain.
 *    Cygwin (and possibly others) have both WIN32 and POSIX APIs. Prefer Win32 in this case.
 ','line_number':323,'multiline':True]['text':' For CRITICAL_SECTION ','line_number':329,'multiline':True]['text':'
 *   Note: there is an earlier include of windows.h in this file, but it is in
 *         different conditionals.
 *         This one is needed if we are using C++11 for atomic ops, but
 *         win32 APIs for Critical Sections.
 ','line_number':331,'multiline':True]['text':' Initializer for a static UMUTEX. Deliberately contains no value for the
 *  CRITICAL_SECTION.
 ','line_number':355,'multiline':True]['text':'
 *  POSIX platform
 ','line_number':372,'multiline':True]['text':'
 *  Unknow platform type.
 *      This is an error condition. ICU requires mutexes.
 ','line_number':391,'multiline':True]['text':'*************************************************************************************
 *
 *  Mutex Implementation function declaratations.
 *     Declarations are platform neutral.
 *     Implementations, in umutex.cpp, are platform specific.
 *
 ***********************************************************************************','line_number':402,'multiline':True]['text':' Lock a mutex.
 * @param mutex The given mutex to be locked.  Pass NULL to specify
 *              the global ICU mutex.  Recursive locks are an error
 *              and may cause a deadlock on some platforms.
 ','line_number':410,'multiline':True]['text':' Unlock a mutex.
 * @param mutex The given mutex to be unlocked.  Pass NULL to specify
 *              the global ICU mutex.
 ','line_number':417,'multiline':True]['text':'
 * Wait on a condition variable.
 * The calling thread will unlock the mutex and wait on the condition variable.
 * The mutex must be locked by the calling thread when invoking this function.
 *
 * @param cond the condition variable to wait on.
 * @param mutex the associated mutex.
 ','line_number':423,'multiline':True]['text':'
 * Broadcast wakeup of all threads waiting on a Condition.
 * The associated mutex must be locked by the calling thread when calling
 * this function; this is a temporary ICU restriction.
 * 
 * @param cond the condition variable.
 ','line_number':435,'multiline':True]['text':'
 * Signal a condition variable, waking up one waiting thread.
 * CAUTION: Do not use. Place holder only. Not implemented for Windows.
 ','line_number':444,'multiline':True]['text':' UMUTEX_H ','line_number':450,'multiline':True]['text':'eof','line_number':451,'multiline':True]