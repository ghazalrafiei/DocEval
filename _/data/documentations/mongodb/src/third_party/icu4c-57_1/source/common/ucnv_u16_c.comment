['text':'  
**********************************************************************
*   Copyright (C) 2002-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   file name:  ucnv_u16.c
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002jul01
*   created by: Markus W. Scherer
*
*   UTF-16 converter implementation. Used to be in ucnv_utf.c.
','line_number':1,'multiline':True]['text':'
 * The UTF-16 toUnicode implementation is also used for the Java-specific
 * "with BOM" variants of UTF-16BE and UTF-16LE.
 ','line_number':30,'multiline':True]['text':' UTF-16BE ----------------------------------------------------------------- ','line_number':38,'multiline':True]['text':' no input, nothing to do ','line_number':62,'multiline':True]['text':' write the BOM if necessary ','line_number':68,'multiline':True]['text':' c!=0 indicates in several places outside the main loops that a surrogate was found ','line_number':89,'multiline':True]['text':' the last buffer ended with a lead surrogate, output the surrogate pair ','line_number':92,'multiline':True]['text':' copy an even number of bytes for complete UChars ','line_number':112,'multiline':True]['text':' count is even ','line_number':117,'multiline':True]['text':' done with the loop for complete UChars ','line_number':172,'multiline':True]['text':'
                 * there is more input and some target capacity -
                 * it must be targetCapacity==1 because otherwise
                 * the above would have copied more;
                 * prepare for overflow output
                 ','line_number':174,'multiline':True]['text':' 2 bytes to output ','line_number':183,'multiline':True]['text':' } else { keep c for surrogate handling, length will be set there ','line_number':185,'multiline':True]['text':' keep c for surrogate handling, length will be set there ','line_number':192,'multiline':True]['text':' from here on, length counts the bytes in overflow[] ','line_number':196,'multiline':True]['text':'
         * c is a surrogate, and
         * - source or target too short
         * - or the surrogate is unmatched
         ','line_number':200,'multiline':True]['text':' output the surrogate pair, will overflow (see conditions comment above) ','line_number':209,'multiline':True]['text':' 4 bytes to output ','line_number':215,'multiline':True]['text':' unmatched lead surrogate ','line_number':218,'multiline':True]['text':' see if the trail surrogate is in the next buffer ','line_number':222,'multiline':True]['text':' unmatched trail surrogate ','line_number':225,'multiline':True]['text':' output length bytes with overflow (length>targetCapacity>0) ','line_number':232,'multiline':True]['text':' write back the updated pointers ','line_number':245,'multiline':True]['text':' no input, nothing to do ','line_number':271,'multiline':True]['text':' complete a partial UChar or pair from the last call ','line_number':286,'multiline':True]['text':'
         * special case: single byte from a previous buffer,
         * where the byte turned out not to belong to a trail surrogate
         * and the preceding, unmatched lead surrogate was put into toUBytes[]
         * for error handling
         ','line_number':288,'multiline':True]['text':' output the BMP code point ','line_number':307,'multiline':True]['text':' continue collecting bytes for the trail surrogate ','line_number':317,'multiline':True]['text':' avoid unnecessary surrogate handling below ','line_number':318,'multiline':True]['text':' fall through to error handling for an unmatched trail surrogate ','line_number':320,'multiline':True]['text':' output the surrogate pair ','line_number':327,'multiline':True]['text':' targetCapacity==1 ','line_number':336,'multiline':True]['text':' unmatched lead surrogate, handle here for consistent toUBytes[] ','line_number':346,'multiline':True]['text':' back out reading the code unit after it ','line_number':349,'multiline':True]['text':'
                         * if the trail unit's first byte was in a previous buffer, then
                         * we need to put it into a special place because toUBytes[] will be
                         * used for the lead unit's bytes
                         ','line_number':353,'multiline':True]['text':' write back the updated pointers ','line_number':363,'multiline':True]['text':' copy an even number of bytes for complete UChars ','line_number':374,'multiline':True]['text':' done with the loop for complete UChars ','line_number':425,'multiline':True]['text':' keep c for surrogate handling, trail will be set there ','line_number':428,'multiline':True]['text':' one more byte pair was consumed than count decremented ','line_number':429,'multiline':True]['text':'
         * c is a surrogate, and
         * - source or target too short
         * - or the surrogate is unmatched
         ','line_number':435,'multiline':True]['text':' output the surrogate pair, will overflow (see conditions comment above) ','line_number':447,'multiline':True]['text':' unmatched lead surrogate ','line_number':459,'multiline':True]['text':' see if the trail surrogate is in the next buffer ','line_number':463,'multiline':True]['text':' unmatched trail surrogate ','line_number':466,'multiline':True]['text':' check for a remaining source byte ','line_number':472,'multiline':True]['text':' it must be length==1 because otherwise the above would have copied more ','line_number':477,'multiline':True]['text':' write back the updated pointers ','line_number':483,'multiline':True]['text':' no input ','line_number':502,'multiline':True]['text':' only one byte: truncated UChar ','line_number':508,'multiline':True]['text':' get one UChar ','line_number':516,'multiline':True]['text':' check for a surrogate pair ','line_number':520,'multiline':True]['text':' get a second UChar and see if it is a trail surrogate ','line_number':526,'multiline':True]['text':' unmatched lead surrogate ','line_number':532,'multiline':True]['text':' too few (2 or 3) bytes for a surrogate pair: truncated code point ','line_number':536,'multiline':True]['text':' unmatched trail surrogate ','line_number':548,'multiline':True]['text':' write the unmatched surrogate ','line_number':553,'multiline':True]['text':' reset toUnicode state ','line_number':571,'multiline':True]['text':' no BOM handling ','line_number':573,'multiline':True]['text':' Java-specific "UnicodeBig" requires BE BOM or no BOM ','line_number':575,'multiline':True]['text':' reset fromUnicode for "UnicodeBig": prepare to output the UTF-16BE BOM ','line_number':579,'multiline':True]['text':' reserved ','line_number':634,'multiline':True]['text':' UTF-16LE ----------------------------------------------------------------- ','line_number':641,'multiline':True]['text':' no input, nothing to do ','line_number':658,'multiline':True]['text':' write the BOM if necessary ','line_number':664,'multiline':True]['text':' c!=0 indicates in several places outside the main loops that a surrogate was found ','line_number':685,'multiline':True]['text':' the last buffer ended with a lead surrogate, output the surrogate pair ','line_number':688,'multiline':True]['text':' copy an even number of bytes for complete UChars ','line_number':708,'multiline':True]['text':' count is even ','line_number':713,'multiline':True]['text':' done with the loop for complete UChars ','line_number':768,'multiline':True]['text':'
                 * there is more input and some target capacity -
                 * it must be targetCapacity==1 because otherwise
                 * the above would have copied more;
                 * prepare for overflow output
                 ','line_number':770,'multiline':True]['text':' 2 bytes to output ','line_number':779,'multiline':True]['text':' } else { keep c for surrogate handling, length will be set there ','line_number':781,'multiline':True]['text':' keep c for surrogate handling, length will be set there ','line_number':788,'multiline':True]['text':' from here on, length counts the bytes in overflow[] ','line_number':792,'multiline':True]['text':'
         * c is a surrogate, and
         * - source or target too short
         * - or the surrogate is unmatched
         ','line_number':796,'multiline':True]['text':' output the surrogate pair, will overflow (see conditions comment above) ','line_number':805,'multiline':True]['text':' 4 bytes to output ','line_number':811,'multiline':True]['text':' unmatched lead surrogate ','line_number':814,'multiline':True]['text':' see if the trail surrogate is in the next buffer ','line_number':818,'multiline':True]['text':' unmatched trail surrogate ','line_number':821,'multiline':True]['text':' output length bytes with overflow (length>targetCapacity>0) ','line_number':828,'multiline':True]['text':' write back the updated pointers ','line_number':841,'multiline':True]['text':' no input, nothing to do ','line_number':867,'multiline':True]['text':' complete a partial UChar or pair from the last call ','line_number':882,'multiline':True]['text':'
         * special case: single byte from a previous buffer,
         * where the byte turned out not to belong to a trail surrogate
         * and the preceding, unmatched lead surrogate was put into toUBytes[]
         * for error handling
         ','line_number':884,'multiline':True]['text':' output the BMP code point ','line_number':903,'multiline':True]['text':' continue collecting bytes for the trail surrogate ','line_number':913,'multiline':True]['text':' avoid unnecessary surrogate handling below ','line_number':914,'multiline':True]['text':' fall through to error handling for an unmatched trail surrogate ','line_number':916,'multiline':True]['text':' output the surrogate pair ','line_number':923,'multiline':True]['text':' targetCapacity==1 ','line_number':932,'multiline':True]['text':' unmatched lead surrogate, handle here for consistent toUBytes[] ','line_number':942,'multiline':True]['text':' back out reading the code unit after it ','line_number':945,'multiline':True]['text':'
                         * if the trail unit's first byte was in a previous buffer, then
                         * we need to put it into a special place because toUBytes[] will be
                         * used for the lead unit's bytes
                         ','line_number':949,'multiline':True]['text':' write back the updated pointers ','line_number':959,'multiline':True]['text':' copy an even number of bytes for complete UChars ','line_number':970,'multiline':True]['text':' done with the loop for complete UChars ','line_number':1021,'multiline':True]['text':' keep c for surrogate handling, trail will be set there ','line_number':1024,'multiline':True]['text':' one more byte pair was consumed than count decremented ','line_number':1025,'multiline':True]['text':'
         * c is a surrogate, and
         * - source or target too short
         * - or the surrogate is unmatched
         ','line_number':1031,'multiline':True]['text':' output the surrogate pair, will overflow (see conditions comment above) ','line_number':1043,'multiline':True]['text':' unmatched lead surrogate ','line_number':1055,'multiline':True]['text':' see if the trail surrogate is in the next buffer ','line_number':1059,'multiline':True]['text':' unmatched trail surrogate ','line_number':1062,'multiline':True]['text':' check for a remaining source byte ','line_number':1068,'multiline':True]['text':' it must be length==1 because otherwise the above would have copied more ','line_number':1073,'multiline':True]['text':' write back the updated pointers ','line_number':1079,'multiline':True]['text':' no input ','line_number':1098,'multiline':True]['text':' only one byte: truncated UChar ','line_number':1104,'multiline':True]['text':' get one UChar ','line_number':1112,'multiline':True]['text':' check for a surrogate pair ','line_number':1116,'multiline':True]['text':' get a second UChar and see if it is a trail surrogate ','line_number':1122,'multiline':True]['text':' unmatched lead surrogate ','line_number':1128,'multiline':True]['text':' too few (2 or 3) bytes for a surrogate pair: truncated code point ','line_number':1132,'multiline':True]['text':' unmatched trail surrogate ','line_number':1144,'multiline':True]['text':' write the unmatched surrogate ','line_number':1149,'multiline':True]['text':' reset toUnicode state ','line_number':1167,'multiline':True]['text':' no BOM handling ','line_number':1169,'multiline':True]['text':' Java-specific "UnicodeLittle" requires LE BOM or no BOM ','line_number':1171,'multiline':True]['text':' reset fromUnicode for "UnicodeLittle": prepare to output the UTF-16LE BOM ','line_number':1175,'multiline':True]['text':' reserved ','line_number':1231,'multiline':True]['text':' UTF-16 (Detect BOM) ------------------------------------------------------ ','line_number':1238,'multiline':True]['text':'
 * Detect a BOM at the beginning of the stream and select UTF-16BE or UTF-16LE
 * accordingly.
 * This is a simpler version of the UTF-32 converter, with
 * fewer states for shorter BOMs.
 *
 * State values:
 * 0    initial state
 * 1    saw first byte
 * 2..5 -
 * 6..7 see _UTF16ToUnicodeWithOffsets() comments in state 1
 * 8    UTF-16BE mode
 * 9    UTF-16LE mode
 *
 * During detection: state==number of initial bytes seen so far.
 *
 * On output, emit U+FEFF as the first code point.
 *
 * Variants:
 * - UTF-16,version=1 (Java "Unicode" encoding) treats a missing BOM as an error.
 * - UTF-16BE,version=1 (Java "UnicodeBig" encoding) and
 *   UTF-16LE,version=1 (Java "UnicodeLittle" encoding) treat a reverse BOM as an error.
 ','line_number':1240,'multiline':True]['text':' reset toUnicode: state=0 ','line_number':1267,'multiline':True]['text':' reset fromUnicode: prepare to output the UTF-16PE BOM ','line_number':1271,'multiline':True]['text':'
             * Switch implementation, and switch the staticData that's different
             * and was copied into the UConverter.
             * (See ucnv_createConverterFromSharedData() in ucnv_bld.c.)
             * UTF-16,version=2 fromUnicode() always writes a big-endian byte stream.
             ','line_number':1284,'multiline':True]['text':'
     * If we detect a BOM in this buffer, then we must add the BOM size to the
     * offsets because the actual converter function will not see and count the BOM.
     * offsetDelta will have the number of the BOM bytes that are in the current buffer.
     ','line_number':1329,'multiline':True]['text':'
             * Only inside this switch case can the state variable
             * temporarily take two additional values:
             * 6: BOM error, continue with BE
             * 7: BOM error, continue with LE
             ','line_number':1344,'multiline':True]['text':' illegal reverse BOM for Java "UnicodeLittle" ','line_number':1353,'multiline':True]['text':' detect UTF-16BE ','line_number':1355,'multiline':True]['text':' illegal reverse BOM for Java "UnicodeBig" ','line_number':1359,'multiline':True]['text':' detect UTF-16LE ','line_number':1361,'multiline':True]['text':' illegal missing BOM for Java "Unicode" ','line_number':1364,'multiline':True]['text':' BOM detected, consume it ','line_number':1367,'multiline':True]['text':' ok: no BOM, and not a reverse BOM ','line_number':1372,'multiline':True]['text':' reset the source for a correct first offset ','line_number':1374,'multiline':True]['text':' Make Java "UnicodeLittle" default to LE. ','line_number':1379,'multiline':True]['text':' Make standard UTF-16 and Java "UnicodeBig" default to BE. ','line_number':1382,'multiline':True]['text':'
                 * error: missing BOM, or reverse BOM
                 * UTF-16,version=1: Java-specific "Unicode" requires a BOM.
                 * UTF-16BE,version=1: Java-specific "UnicodeBig" requires a BE BOM or no BOM.
                 * UTF-16LE,version=1: Java-specific "UnicodeLittle" requires an LE BOM or no BOM.
                 ','line_number':1386,'multiline':True]['text':' report the non-BOM or reverse BOM as an illegal sequence ','line_number':1392,'multiline':True]['text':' continue with conversion if the callback resets the error ','line_number':1396,'multiline':True]['text':'
                 * Make Java "Unicode" default to BE like standard UTF-16.
                 * Make Java "UnicodeBig" and "UnicodeLittle" default
                 * to their normal endiannesses.
                 ','line_number':1397,'multiline':True]['text':' convert the rest of the stream ','line_number':1406,'multiline':True]['text':' call UTF-16BE ','line_number':1410,'multiline':True]['text':' call UTF-16LE ','line_number':1416,'multiline':True]['text':' does not occur ','line_number':1422,'multiline':True]['text':' add BOM size to offsets - see comment at offsetDelta declaration ','line_number':1426,'multiline':True]['text':' handle truncated input ','line_number':1437,'multiline':True]['text':' no input at all, nothing to do ','line_number':1440,'multiline':True]['text':' 0<state<8: framework will report truncation, nothing to do here ','line_number':1448,'multiline':True]['text':' ### TODO implement getStarters for all Unicode encodings?! ','line_number':1485,'multiline':True]['text':' CCSID for BOM sensitive UTF-16 ','line_number':1495,'multiline':True]['text':' reserved ','line_number':1505,'multiline':True]['text':' ### TODO implement getStarters for all Unicode encodings?! ','line_number':1527,'multiline':True]['text':' CCSID for BOM sensitive UTF-16 ','line_number':1537,'multiline':True]['text':' reserved ','line_number':1543,'multiline':True]