['text':'
 *****************************************************************************
 * Copyright (C) 1996-2015, International Business Machines Corporation and
 * others. All Rights Reserved.
 *****************************************************************************
 ','line_number':1,'multiline':True]['text':'*
 * This class allows one to iterate through all the strings that are canonically equivalent to a given
 * string. For example, here are some sample results:
Results for: {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
1: \u0041\u030A\u0064\u0307\u0327
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
2: \u0041\u030A\u0064\u0327\u0307
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
3: \u0041\u030A\u1E0B\u0327
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
4: \u0041\u030A\u1E11\u0307
 = {LATIN CAPITAL LETTER A}{COMBINING RING ABOVE}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
5: \u00C5\u0064\u0307\u0327
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
6: \u00C5\u0064\u0327\u0307
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
7: \u00C5\u1E0B\u0327
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
8: \u00C5\u1E11\u0307
 = {LATIN CAPITAL LETTER A WITH RING ABOVE}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
9: \u212B\u0064\u0307\u0327
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D}{COMBINING DOT ABOVE}{COMBINING CEDILLA}
10: \u212B\u0064\u0327\u0307
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D}{COMBINING CEDILLA}{COMBINING DOT ABOVE}
11: \u212B\u1E0B\u0327
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D WITH DOT ABOVE}{COMBINING CEDILLA}
12: \u212B\u1E11\u0307
 = {ANGSTROM SIGN}{LATIN SMALL LETTER D WITH CEDILLA}{COMBINING DOT ABOVE}
 *<br>Note: the code is intended for use with small strings, and is not suitable for larger ones,
 * since it has not been optimized for that situation.
 *@author M. Davis
 *@draft
 ','line_number':23,'multiline':True]['text':' public','line_number':57,'multiline':False]['text':' TODO: add boilerplate methods.','line_number':61,'multiline':False]['text':'*
 *@param source string to get results for
 ','line_number':65,'multiline':True]['text':'*
 *@return gets the source: NOTE: it is the NFD form of source
 ','line_number':109,'multiline':True]['text':'*
 * Resets the iterator so that one can start again from the beginning.
 ','line_number':116,'multiline':True]['text':'*
 *@return the next string that is canonically equivalent. The value null is returned when
 * the iteration is done.
 ','line_number':126,'multiline':True]['text':' delete old contents','line_number':138,'multiline':False]['text':' construct return value','line_number':141,'multiline':False]['text':'String result = buffer.toString(); // not needed','line_number':146,'multiline':False]['text':' find next value for next time','line_number':148,'multiline':False]['text':' got sequence','line_number':156,'multiline':False]['text':'*
 *@param set the source string to iterate against. This allows the same iterator to be used
 * while changing the source string, saving object creation.
 ','line_number':162,'multiline':True]['text':' catch degenerate case','line_number':181,'multiline':False]['text':' i should initialy be the number of code units at the ','line_number':209,'multiline':False]['text':' start of the string','line_number':210,'multiline':False]['text':'int32_t i = 1;','line_number':212,'multiline':False]['text':' find the segments','line_number':213,'multiline':False]['text':' This code iterates through the source string and ','line_number':214,'multiline':False]['text':' extracts segments that end up on a codepoint that','line_number':215,'multiline':False]['text':' doesn't start any decompositions. (Analysis is done','line_number':216,'multiline':False]['text':' on the NFD form - see above).','line_number':217,'multiline':False]['text':' add up to i','line_number':221,'multiline':False]['text':' add last one','line_number':225,'multiline':False]['text':' allocate the arrays, and find the strings that are CE to each segment','line_number':228,'multiline':False]['text':' for each segment, get all the combinations that can produce ','line_number':242,'multiline':False]['text':' it after NFD normalization','line_number':243,'multiline':False]['text':'if (PROGRESS) printf("SEGMENT\n");','line_number':245,'multiline':False]['text':' Common section to cleanup all local variables and reset object variables.','line_number':251,'multiline':False]['text':'*
 * Dumb recursive implementation of permutation.
 * TODO: optimize
 * @param source the string to find permutations for
 * @return the results in a set.
 ','line_number':259,'multiline':True]['text':'if (PROGRESS) printf("Permute: %s\n", UToS(Tr(source)));','line_number':269,'multiline':False]['text':' optimization:','line_number':272,'multiline':False]['text':' if zero or one character, just return a set with it','line_number':273,'multiline':False]['text':' we check for length < 2 to keep from counting code points all the time','line_number':274,'multiline':False]['text':' test for NULL ','line_number':277,'multiline':True]['text':' otherwise iterate through the string, and recursively permute all the other characters','line_number':286,'multiline':False]['text':' optimization:','line_number':300,'multiline':False]['text':' if the character is canonical combining class zero,','line_number':301,'multiline':False]['text':' don't permute it','line_number':302,'multiline':False]['text':'System.out.println("Skipping " + Utility.hex(UTF16.valueOf(source, i)));','line_number':304,'multiline':False]['text':' see what the permutations of the characters before and after this one are','line_number':310,'multiline':False]['text':'Hashtable *subpermute = permute(source.substring(0,i) + source.substring(i + UTF16.getCharCount(cp)));','line_number':311,'multiline':False]['text':' Test for buffer overflows ','line_number':313,'multiline':True]['text':' The upper replace is destructive. The question is do we have to make a copy, or we don't care about the contents ','line_number':317,'multiline':False]['text':' of source at this point.','line_number':318,'multiline':False]['text':' prefix this character to all of them','line_number':320,'multiline':False]['text':'test for  NULL','line_number':325,'multiline':False]['text':'*((UnicodeString *)(ne->value.pointer));','line_number':330,'multiline':False]['text':'if (PROGRESS) printf("  Piece: %s\n", UToS(*chStr));','line_number':331,'multiline':False]['text':'return result;','line_number':336,'multiline':False]['text':' privates','line_number':339,'multiline':False]['text':' we have a segment, in NFD. Find all the strings that are canonically equivalent to it.','line_number':341,'multiline':False]['text':' now get all the permutations','line_number':357,'multiline':False]['text':' add only the ones that are canonically equivalent','line_number':358,'multiline':False]['text':' TODO: optimize by not permuting any class zero.','line_number':359,'multiline':False]['text':'Iterator it = basic.iterator();','line_number':363,'multiline':False]['text':'while (it.hasNext())','line_number':365,'multiline':False]['text':'String item = (String) it.next();','line_number':367,'multiline':False]['text':'Iterator it2 = permutations.iterator();','line_number':374,'multiline':False]['text':'while (it2.hasNext())','line_number':376,'multiline':False]['text':'String possible = (String) it2.next();','line_number':378,'multiline':False]['text':'UnicodeString *possible = new UnicodeString(*((UnicodeString *)(ne2->value.pointer)));','line_number':379,'multiline':False]['text':' TODO: check if operator == is semanticaly the same as attempt.equals(segment)','line_number':384,'multiline':False]['text':'if (PROGRESS) printf("Adding Permutation: %s\n", UToS(Tr(*possible)));','line_number':386,'multiline':False]['text':' TODO: use the hashtable just to catch duplicates - store strings directly (somehow).','line_number':387,'multiline':False]['text':'add(possible);','line_number':388,'multiline':False]['text':'if (PROGRESS) printf("-Skipping Permutation: %s\n", UToS(Tr(*possible)));','line_number':390,'multiline':False]['text':' Test for buffer overflows ','line_number':398,'multiline':True]['text':' convert into a String[] to clean up storage','line_number':402,'multiline':False]['text':'String[] finalResult = new String[result.size()];','line_number':403,'multiline':False]['text':'result.toArray(finalResult);','line_number':417,'multiline':False]['text':'if (PROGRESS) printf("Adding: %s\n", UToS(Tr(segment)));','line_number':436,'multiline':False]['text':' cycle through all the characters','line_number':444,'multiline':False]['text':' see if any character is at the start of some decomposition','line_number':447,'multiline':False]['text':' if so, see which decompositions match','line_number':452,'multiline':False]['text':' there were some matches, so add all the possibilities to the set.','line_number':462,'multiline':False]['text':' test for NULL ','line_number':471,'multiline':True]['text':'if (PROGRESS) printf("Adding: %s\n", UToS(Tr(*toAdd)));','line_number':479,'multiline':False]['text':' Test for buffer overflows ','line_number':486,'multiline':True]['text':'*
 * See if the decomposition of cp2 is at segment starting at segmentPos 
 * (with canonical rearrangment!)
 * If so, take the remainder, and return the equivalents 
 ','line_number':493,'multiline':True]['text':'Hashtable *CanonicalIterator::extract(UChar32 comp, const UnicodeString &segment, int32_t segLen, int32_t segmentPos, UErrorCode &status) {','line_number':499,'multiline':False]['text':'if (PROGRESS) printf(" extract: %s, ", UToS(Tr(UnicodeString(comp))));','line_number':500,'multiline':False]['text':'if (PROGRESS) printf("%s, %i\n", UToS(Tr(segment)), segmentPos);','line_number':501,'multiline':False]['text':' See if it matches the start of segment (at segmentPos)','line_number':521,'multiline':False]['text':' if equal, eat another cp from decomp','line_number':532,'multiline':False]['text':'if (PROGRESS) printf("  matches: %s\n", UToS(Tr(UnicodeString(cp))));','line_number':534,'multiline':False]['text':' done, have all decomp characters!','line_number':536,'multiline':False]['text':'if (PROGRESS) printf("  buffer: %s\n", UToS(Tr(UnicodeString(cp))));','line_number':543,'multiline':False]['text':' brute force approach','line_number':545,'multiline':False]['text':' TODO: optimize
            // since we know that the classes are monotonically increasing, after zero
            // e.g. 0 5 7 9 0 3
            // we can do an optimization
            // there are only a few cases that work: zero, less, same, greater
            // if both classes are the same, we fail
            // if the decomp class < the segment class, we fail

            segClass = getClass(cp);
            if (decompClass <= segClass) return null;
            ','line_number':548,'multiline':True]['text':' we failed, characters left over','line_number':562,'multiline':False]['text':'if (PROGRESS) printf("Matches\n");','line_number':564,'multiline':False]['text':' succeed, but no remainder','line_number':568,'multiline':False]['text':' brute force approach','line_number':571,'multiline':False]['text':' check to make sure result is canonically equivalent','line_number':572,'multiline':False]['text':' #if !UCONFIG_NO_NORMALIZATION ','line_number':584,'multiline':True]