['text':'
******************************************************************************
*
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
*  FILE NAME : platform.h
*
*   Date        Name        Description
*   05/13/98    nos         Creation (content moved here from ptypes.h).
*   03/02/99    stephen     Added AS400 support.
*   03/30/99    stephen     Added Linux support.
*   04/13/99    stephen     Reworked for autoconf.
******************************************************************************
','line_number':1,'multiline':True]['text':'*
 * \file
 * \brief Basic types for the platform.
 *
 * This file used to be generated by autoconf/configure.
 * Starting with ICU 49, platform.h is a normal source file,
 * to simplify cross-compiling and working with non-autoconf/make build systems.
 *
 * When a value in this file does not work on a platform, then please
 * try to derive it from the U_PLATFORM value
 * (for which we might need a new value constant in rare cases)
 * and/or from other macros that are predefined by the compiler
 * or defined in standard (POSIX or platform or compiler) headers.
 *
 * As a temporary workaround, you can add an explicit <code>#define</code> for some macros
 * before it is first tested, or add an equivalent -D macro definition
 * to the compiler's command line.
 *
 * Note: Some compilers provide ways to show the predefined macros.
 * For example, with gcc you can compile an empty .c file and have the compiler
 * print the predefined macros with
 * \code
 * gcc -E -dM -x c /dev/null | sort
 * \endcode
 * (You can provide an actual empty .c file rather than /dev/null.
 * <code>-x c++</code> is for C++.)
 ','line_number':25,'multiline':True]['text':'*
 * Define some things so that they can be documented.
 * @internal
 ','line_number':53,'multiline':True]['text':'
 * Problem: "platform.h:335: warning: documentation for unknown define U_HAVE_STD_STRING found." means that U_HAVE_STD_STRING is not documented.
 * Solution: #define any defines for non @internal API here, so that they are visible in the docs.  If you just set PREDEFINED in Doxyfile.in,  they won't be documented.
 ','line_number':58,'multiline':True]['text':' None for now. ','line_number':63,'multiline':True]['text':'*
 * \def U_PLATFORM
 * The U_PLATFORM macro defines the platform we're on.
 *
 * We used to define one different, value-less macro per platform.
 * That made it hard to know the set of relevant platforms and macros,
 * and hard to deal with variants of platforms.
 *
 * Starting with ICU 49, we define platforms as numeric macros,
 * with ranges of values for related platforms and their variants.
 * The U_PLATFORM macro is set to one of these values.
 *
 * Historical note from the Solaris Wikipedia article:
 * AT&T and Sun collaborated on a project to merge the most popular Unix variants
 * on the market at that time: BSD, System V, and Xenix.
 * This became Unix System V Release 4 (SVR4).
 *
 * @internal
 ','line_number':66,'multiline':True]['text':'* Unknown platform. @internal ','line_number':86,'multiline':True]['text':'* Windows @internal ','line_number':88,'multiline':True]['text':'* MinGW. Windows, calls to Win32 API, but using GNU gcc and binutils. @internal ','line_number':90,'multiline':True]['text':'*
 * Cygwin. Windows, calls to cygwin1.dll for Posix functions,
 * using MSVC or GNU gcc and binutils.
 * @internal
 ','line_number':92,'multiline':True]['text':' Reserve 2000 for U_PF_UNIX? ','line_number':98,'multiline':True]['text':'* HP-UX is based on UNIX System V. @internal ','line_number':99,'multiline':True]['text':'* Solaris is a Unix operating system based on SVR4. @internal ','line_number':101,'multiline':True]['text':'* BSD is a UNIX operating system derivative. @internal ','line_number':103,'multiline':True]['text':'* AIX is based on UNIX System V Releases and 4.3 BSD. @internal ','line_number':105,'multiline':True]['text':'* IRIX is based on UNIX System V with BSD extensions. @internal ','line_number':107,'multiline':True]['text':'*
 * Darwin is a POSIX-compliant operating system, composed of code developed by Apple,
 * as well as code derived from NeXTSTEP, BSD, and other projects,
 * built around the Mach kernel.
 * Darwin forms the core set of components upon which Mac OS X, Apple TV, and iOS are based.
 * (Original description modified from WikiPedia.)
 * @internal
 ','line_number':109,'multiline':True]['text':'* iPhone OS (iOS) is a derivative of Mac OS X. @internal ','line_number':118,'multiline':True]['text':'* QNX is a commercial Unix-like real-time operating system related to BSD. @internal ','line_number':120,'multiline':True]['text':'* Linux is a Unix-like operating system. @internal ','line_number':122,'multiline':True]['text':'*
 * Native Client is pretty close to Linux.
 * See https://developer.chrome.com/native-client and
 *  http://www.chromium.org/nativeclient
 *  @internal
 ','line_number':124,'multiline':True]['text':'* Android is based on Linux. @internal ','line_number':131,'multiline':True]['text':' Maximum value for Linux-based platform is 4499 ','line_number':133,'multiline':True]['text':'* z/OS is the successor to OS/390 which was the successor to MVS. @internal ','line_number':134,'multiline':True]['text':'* "IBM i" is the current name of what used to be i5/OS and earlier OS/400. @internal ','line_number':136,'multiline':True]['text':' Use the predefined value. ','line_number':140,'multiline':True]['text':' Android wchar_t support depends on the API level. ','line_number':149,'multiline':True]['text':' variant of TARGET_OS_MAC ','line_number':157,'multiline':True]['text':' Check defined(__SVR4) || defined(__svr4__) to distinguish Solaris from SunOS? ','line_number':168,'multiline':True]['text':' Solaris/GCC needs this header file to get the proper endianness. Normally, this
         * header file is included with stddef.h but on Solairs/GCC, the GCC version of stddef.h
         *  is included which does not include this header file.
         ','line_number':171,'multiline':True]['text':'*
 * \def CYGWINMSVC
 * Defined if this is Windows with Cygwin, but using MSVC rather than gcc.
 * Otherwise undefined.
 * @internal
 ','line_number':193,'multiline':True]['text':' Commented out because this is already set in mh-cygwin-msvc
#if U_PLATFORM == U_PF_CYGWIN && defined(_MSC_VER)
#   define CYGWINMSVC
#endif
','line_number':199,'multiline':True]['text':'*
 * \def U_PLATFORM_USES_ONLY_WIN32_API
 * Defines whether the platform uses only the Win32 API.
 * Set to 1 for Windows/MSVC and MinGW but not Cygwin.
 * @internal
 ','line_number':205,'multiline':True]['text':' Use the predefined value. ','line_number':212,'multiline':True]['text':' Cygwin implements POSIX. ','line_number':216,'multiline':True]['text':'*
 * \def U_PLATFORM_HAS_WIN32_API
 * Defines whether the Win32 API is available on the platform.
 * Set to 1 for Windows/MSVC, MinGW and Cygwin.
 * @internal
 ','line_number':220,'multiline':True]['text':' Use the predefined value. ','line_number':227,'multiline':True]['text':'*
 * \def U_PLATFORM_IMPLEMENTS_POSIX
 * Defines whether the platform implements (most of) the POSIX API.
 * Set to 1 for Cygwin and most other platforms.
 * @internal
 ','line_number':234,'multiline':True]['text':' Use the predefined value. ','line_number':241,'multiline':True]['text':'*
 * \def U_PLATFORM_IS_LINUX_BASED
 * Defines whether the platform is Linux or one of its derivatives.
 * @internal
 ','line_number':248,'multiline':True]['text':' Use the predefined value. ','line_number':254,'multiline':True]['text':'*
 * \def U_PLATFORM_IS_DARWIN_BASED
 * Defines whether the platform is Darwin or one of its derivatives.
 * @internal
 ','line_number':261,'multiline':True]['text':' Use the predefined value. ','line_number':267,'multiline':True]['text':'*
 * \def U_HAVE_STDINT_H
 * Defines whether stdint.h is available. It is a C99 standard header.
 * We used to include inttypes.h which includes stdint.h but we usually do not need
 * the additional definitions from inttypes.h.
 * @internal
 ','line_number':274,'multiline':True]['text':' Use the predefined value. ','line_number':282,'multiline':True]['text':' Windows Visual Studio 9 and below do not have stdint.h & inttypes.h, but VS 2010 adds them. ','line_number':285,'multiline':True]['text':' Solaris has inttypes.h but not stdint.h. ','line_number':291,'multiline':True]['text':' PPC AIX <= 4.3 has inttypes.h but not stdint.h. ','line_number':294,'multiline':True]['text':'*
 * \def U_HAVE_INTTYPES_H
 * Defines whether inttypes.h is available. It is a C99 standard header.
 * We include inttypes.h where it is available but stdint.h is not.
 * @internal
 ','line_number':300,'multiline':True]['text':' Use the predefined value. ','line_number':307,'multiline':True]['text':' Solaris has inttypes.h but not stdint.h. ','line_number':309,'multiline':True]['text':' PPC AIX <= 4.3 has inttypes.h but not stdint.h. ','line_number':312,'multiline':True]['text':' Most platforms have both inttypes.h and stdint.h, or neither. ','line_number':315,'multiline':True]['text':'*
 * \def U_IOSTREAM_SOURCE
 * Defines what support for C++ streams is available.
 *
 * If U_IOSTREAM_SOURCE is set to 199711, then &lt;iostream&gt; is available
 * (the ISO/IEC C++ FDIS was published in November 1997), and then
 * one should qualify streams using the std namespace in ICU header
 * files.
 * Starting with ICU 49, this is the only supported version.
 *
 * If U_IOSTREAM_SOURCE is set to 198506, then &lt;iostream.h&gt; is
 * available instead (in June 1985 Stroustrup published
 * "An Extensible I/O Facility for C++" at the summer USENIX conference).
 * Starting with ICU 49, this version is not supported any more.
 *
 * If U_IOSTREAM_SOURCE is 0 (or any value less than 199711),
 * then C++ streams are not available and
 * support for them will be silently suppressed in ICU.
 *
 * @internal
 ','line_number':319,'multiline':True]['text':'*
 * \def U_HAVE_STD_STRING
 * Defines whether the standard C++ (STL) &lt;string&gt; header is available.
 * @internal
 ','line_number':344,'multiline':True]['text':' Use the predefined value. ','line_number':350,'multiline':True]['text':'===========================================================================','line_number':355,'multiline':True]['text':'* @{ Compiler and environment features                                     ','line_number':356,'multiline':True]['text':'===========================================================================','line_number':357,'multiline':True]['text':'*
 * \def U_GCC_MAJOR_MINOR
 * Indicates whether the compiler is gcc (test for != 0),
 * and if so, contains its major (times 100) and minor version numbers.
 * If the compiler is not gcc, then U_GCC_MAJOR_MINOR == 0.
 *
 * For example, for testing for whether we have gcc, and whether it's 4.6 or higher,
 * use "#if U_GCC_MAJOR_MINOR >= 406".
 * @internal
 ','line_number':359,'multiline':True]['text':'*
 * \def U_IS_BIG_ENDIAN
 * Determines the endianness of the platform.
 * @internal
 ','line_number':375,'multiline':True]['text':' Use the predefined value. ','line_number':381,'multiline':True]['text':' gcc ','line_number':385,'multiline':True]['text':' These platforms do not appear to predefine any endianness macros. ','line_number':392,'multiline':True]['text':' HPPA do not appear to predefine any endianness macros. ','line_number':395,'multiline':True]['text':' Some sparc based systems (e.g. Linux) do not predefine any endianness macros. ','line_number':398,'multiline':True]['text':'*
 * \def U_HAVE_PLACEMENT_NEW
 * Determines whether to override placement new and delete for STL.
 * @stable ICU 2.6
 ','line_number':404,'multiline':True]['text':' Use the predefined value. ','line_number':410,'multiline':True]['text':'*
 * \def U_HAVE_DEBUG_LOCATION_NEW 
 * Define this to define the MFC debug version of the operator new.
 *
 * @stable ICU 3.4
 ','line_number':417,'multiline':True]['text':' Use the predefined value. ','line_number':424,'multiline':True]['text':' Compatibility with non clang compilers: http://clang.llvm.org/docs/LanguageExtensions.html ','line_number':431,'multiline':True]['text':'*
 * \def U_MALLOC_ATTR
 * Attribute to mark functions as malloc-like
 * @internal
 ','line_number':451,'multiline':True]['text':'*
 * \def U_ALLOC_SIZE_ATTR
 * Attribute to specify the size of the allocated buffer for malloc-like functions
 * @internal
 ','line_number':462,'multiline':True]['text':'*
 * \def U_CPLUSPLUS_VERSION
 * 0 if no C++; 1, 11, 14, ... if C++.
 * Support for specific features cannot always be determined by the C++ version alone.
 * @internal
 ','line_number':475,'multiline':True]['text':' Otherwise use the predefined value. ','line_number':486,'multiline':True]['text':' C++98 or C++03','line_number':494,'multiline':False]['text':'*
 * \def U_HAVE_RVALUE_REFERENCES
 * Set to 1 if the compiler supports rvalue references.
 * C++11 feature, necessary for move constructor & move assignment.
 * @internal
 ','line_number':498,'multiline':True]['text':' Use the predefined value. ','line_number':505,'multiline':True]['text':' Visual Studio 2010 ','line_number':508,'multiline':True]['text':'*
 * \def U_NOEXCEPT
 * "noexcept" if supported, otherwise empty.
 * Some code, especially STL containers, uses move semantics of objects only
 * if the move constructor and the move operator are declared as not throwing exceptions.
 * @internal
 ','line_number':514,'multiline':True]['text':' Use the predefined value. ','line_number':522,'multiline':True]['text':' Visual Studio ','line_number':523,'multiline':True]['text':' Visual Studio 2015 ','line_number':526,'multiline':True]['text':'*
 * \def U_FALLTHROUGH
 * Annotate intentional fall-through between switch labels.
 * http://clang.llvm.org/docs/AttributeReference.html#fallthrough-clang-fallthrough
 * @internal
 ','line_number':532,'multiline':True]['text':'* @} ','line_number':550,'multiline':True]['text':'===========================================================================','line_number':552,'multiline':True]['text':'* @{ Character data types                                                  ','line_number':553,'multiline':True]['text':'===========================================================================','line_number':554,'multiline':True]['text':'*
 * U_CHARSET_FAMILY is equal to this value when the platform is an ASCII based platform.
 * @stable ICU 2.0
 ','line_number':556,'multiline':True]['text':'*
 * U_CHARSET_FAMILY is equal to this value when the platform is an EBCDIC based platform.
 * @stable ICU 2.0
 ','line_number':562,'multiline':True]['text':'*
 * \def U_CHARSET_FAMILY
 *
 * <p>These definitions allow to specify the encoding of text
 * in the char data type as defined by the platform and the compiler.
 * It is enough to determine the code point values of "invariant characters",
 * which are the ones shared by all encodings that are in use
 * on a given platform.</p>
 *
 * <p>Those "invariant characters" should be all the uppercase and lowercase
 * latin letters, the digits, the space, and "basic punctuation".
 * Also, '\\n', '\\r', '\\t' should be available.</p>
 *
 * <p>The list of "invariant characters" is:<br>
 * \code
 *    A-Z  a-z  0-9  SPACE  "  %  &amp;  '  (  )  *  +  ,  -  .  /  :  ;  <  =  >  ?  _
 * \endcode
 * <br>
 * (52 letters + 10 numbers + 20 punc/sym/space = 82 total)</p>
 *
 * <p>This matches the IBM Syntactic Character Set (CS 640).</p>
 *
 * <p>In other words, all the graphic characters in 7-bit ASCII should
 * be safely accessible except the following:</p>
 *
 * \code
 *    '\' <backslash>
 *    '[' <left bracket>
 *    ']' <right bracket>
 *    '{' <left brace>
 *    '}' <right brace>
 *    '^' <circumflex>
 *    '~' <tilde>
 *    '!' <exclamation mark>
 *    '#' <number sign>
 *    '|' <vertical line>
 *    '$' <dollar sign>
 *    '@' <commercial at>
 *    '`' <grave accent>
 * \endcode
 * @stable ICU 2.0
 ','line_number':568,'multiline':True]['text':' Use the predefined value. ','line_number':611,'multiline':True]['text':'*
 * \def U_CHARSET_IS_UTF8
 *
 * Hardcode the default charset to UTF-8.
 *
 * If this is set to 1, then
 * - ICU will assume that all non-invariant char*, StringPiece, std::string etc.
 *   contain UTF-8 text, regardless of what the system API uses
 * - some ICU code will use fast functions like u_strFromUTF8()
 *   rather than the more general and more heavy-weight conversion API (ucnv.h)
 * - ucnv_getDefaultName() always returns "UTF-8"
 * - ucnv_setDefaultName() is disabled and will not change the default charset
 * - static builds of ICU are smaller
 * - more functionality is available with the UCONFIG_NO_CONVERSION build-time
 *   configuration option (see unicode/uconfig.h)
 * - the UCONFIG_NO_CONVERSION build option in uconfig.h is more usable
 *
 * @stable ICU 4.2
 * @see UCONFIG_NO_CONVERSION
 ','line_number':620,'multiline':True]['text':' Use the predefined value. ','line_number':641,'multiline':True]['text':'* @} ','line_number':648,'multiline':True]['text':'===========================================================================','line_number':650,'multiline':True]['text':'* @{ Information about wchar support                                       ','line_number':651,'multiline':True]['text':'===========================================================================','line_number':652,'multiline':True]['text':'*
 * \def U_HAVE_WCHAR_H
 * Indicates whether <wchar.h> is available (1) or not (0). Set to 1 by default.
 *
 * @stable ICU 2.0
 ','line_number':654,'multiline':True]['text':' Use the predefined value. ','line_number':661,'multiline':True]['text':'
     * Android before Gingerbread (Android 2.3, API level 9) did not support wchar_t.
     * The type and header existed, but the library functions did not work as expected.
     * The size of wchar_t was 1 but L"xyz" string literals had 32-bit units anyway.
     ','line_number':663,'multiline':True]['text':'*
 * \def U_SIZEOF_WCHAR_T
 * U_SIZEOF_WCHAR_T==sizeof(wchar_t)
 *
 * @stable ICU 2.0
 ','line_number':673,'multiline':True]['text':' Use the predefined value. ','line_number':680,'multiline':True]['text':'
     * Classic Mac OS and Mac OS X before 10.3 (Panther) did not support wchar_t or wstring.
     * Newer Mac OS X has size 4.
     ','line_number':682,'multiline':True]['text':'
     * AIX 6.1 information, section "Wide character data representation":
     * "... the wchar_t datatype is 32-bit in the 64-bit environment and
     * 16-bit in the 32-bit environment."
     * and
     * "All locales use Unicode for their wide character code values (process code),
     * except the IBM-eucTW codeset."
     ','line_number':690,'multiline':True]['text':'
     * z/OS V1R11 information center, section "LP64 | ILP32":
     * "In 31-bit mode, the size of long and pointers is 4 bytes and the size of wchar_t is 2 bytes.
     * Under LP64, the size of long and pointer is 8 bytes and the size of wchar_t is 4 bytes."
     ','line_number':704,'multiline':True]['text':'
         * LOCALETYPE(*LOCALEUTF) is specified.
         * Wide-character strings are in UTF-32,
         * narrow-character strings are in UTF-8.
         ','line_number':716,'multiline':True]['text':'
         * LOCALETYPE(*LOCALEUCS2) is specified.
         * Wide-character strings are in UCS-2,
         * narrow-character strings are in EBCDIC.
         ','line_number':723,'multiline':True]['text':'
         * LOCALETYPE(*CLD) or LOCALETYPE(*LOCALE) is specified.
         * Wide-character strings are in 16-bit EBCDIC,
         * narrow-character strings are in EBCDIC.
         ','line_number':730,'multiline':True]['text':'* @} ','line_number':745,'multiline':True]['text':'*
 * \def U_HAVE_CHAR16_T
 * Defines whether the char16_t type is available for UTF-16
 * and u"abc" UTF-16 string literals are supported.
 * This is a new standard type and standard string literal syntax in C++0x
 * but has been available in some compilers before.
 * @internal
 ','line_number':747,'multiline':True]['text':' Use the predefined value. ','line_number':756,'multiline':True]['text':'
     * Notes:
     * Visual Studio 10 (_MSC_VER>=1600) defines char16_t but
     * does not support u"abc" string literals.
     * gcc 4.4 defines the __CHAR16_TYPE__ macro to a usable type but
     * does not support u"abc" string literals.
     * C++11 and C11 require support for UTF-16 literals
     ','line_number':758,'multiline':True]['text':'*
 * @{
 * \def U_DECLARE_UTF16
 * Do not use this macro because it is not defined on all platforms.
 * Use the UNICODE_STRING or U_STRING_DECL macros instead.
 * @internal
 ','line_number':773,'multiline':True]['text':' Use the predefined value. ','line_number':781,'multiline':True]['text':' Leave U_DECLARE_UTF16 undefined. See unistr.h. ','line_number':791,'multiline':True]['text':'* @} ','line_number':794,'multiline':True]['text':'===========================================================================','line_number':796,'multiline':True]['text':'* @{ Symbol import-export control                                          ','line_number':797,'multiline':True]['text':'===========================================================================','line_number':798,'multiline':True]['text':' Use the predefined value. ','line_number':801,'multiline':True]['text':'#elif defined(__HP_aCC) || defined(__HP_cc)
#   define U_EXPORT __declspec(dllexport)','line_number':809,'multiline':True]['text':' U_CALLCONV is releated to U_EXPORT2 ','line_number':817,'multiline':True]['text':' Use the predefined value. ','line_number':819,'multiline':True]['text':' Use the predefined value. ','line_number':827,'multiline':True]['text':' Windows needs to export/import data. ','line_number':829,'multiline':True]['text':'*
 * \def U_CALLCONV
 * Similar to U_CDECL_BEGIN/U_CDECL_END, this qualifier is necessary
 * in callback function typedefs to make sure that the calling convention
 * is compatible.
 *
 * This is only used for non-ICU-API functions.
 * When a function is a public ICU API,
 * you must use the U_CAPI and U_EXPORT2 qualifiers.
 * @stable ICU 2.0
 ','line_number':835,'multiline':True]['text':' @} ','line_number':852,'multiline':True]