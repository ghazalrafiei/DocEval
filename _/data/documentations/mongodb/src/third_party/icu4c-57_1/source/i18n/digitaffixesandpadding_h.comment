['text':'
*******************************************************************************
* Copyright (C) 2015, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* digitaffixesandpadding.h
*
* created on: 2015jan06
* created by: Travis Keep
','line_number':1,'multiline':True]['text':'*
 * A formatter of numbers. This class can format any numerical value
 * except for not a number (NaN), positive infinity, and negative infinity.
 * This class manages prefixes, suffixes, and padding but delegates the
 * formatting of actual positive values to a ValueFormatter.
 ','line_number':31,'multiline':True]['text':'*
 * Equivalent to DecimalFormat EPadPosition, but redeclared here to prevent
 * depending on DecimalFormat which would cause a circular dependency.
 ','line_number':40,'multiline':True]['text':'*
 * The positive prefix
 ','line_number':51,'multiline':True]['text':'*
 * The positive suffix
 ','line_number':56,'multiline':True]['text':'*
 * The negative suffix
 ','line_number':61,'multiline':True]['text':'*
 * The negative suffix
 ','line_number':66,'multiline':True]['text':'*
 * The padding position
 ','line_number':71,'multiline':True]['text':'*
 * The padding character.
 ','line_number':76,'multiline':True]['text':'*
 * The field width in code points. The format method inserts instances of
 * the padding character as needed in the desired padding position so that
 * the entire formatted string contains this many code points. If the
 * formatted string already exceeds this many code points, the format method
 * inserts no padding.
 ','line_number':81,'multiline':True]['text':'*
 * Pad position is before prefix; padding character is '*' field width is 0.
 * The affixes are all the empty string with no annotated fields with just
 * the 'other' plural variation.
 ','line_number':90,'multiline':True]['text':'*
 * Returns TRUE if this object is equal to rhs.
 ','line_number':98,'multiline':True]['text':'*
 * Returns TRUE if a plural rules instance is needed to complete the
 * formatting by detecting if any of the affixes have multiple plural
 * variations.
 ','line_number':111,'multiline':True]['text':'*
 * Formats value and appends to appendTo.
 *
 * @param value the value to format. May be NaN or ininite.
 * @param formatter handles the details of formatting the actual value.
 * @param handler records field positions
 * @param optPluralRules the plural rules, but may be NULL if
 *   needsPluralRules returns FALSE. 
 * @appendTo formatted string appended here.
 * @status any error returned here.
 ','line_number':118,'multiline':True]['text':'*
 * For testing only.
 ','line_number':137,'multiline':True]['text':'*
 * Formats a 32-bit integer and appends to appendTo. When formatting an
 * integer, this method is preferred to plain format as it can run
 * several times faster under certain conditions.
 *
 * @param value the value to format.
 * @param formatter handles the details of formatting the actual value.
 * @param handler records field positions
 * @param optPluralRules the plural rules, but may be NULL if
 *   needsPluralRules returns FALSE. 
 * @appendTo formatted string appended here.
 * @status any error returned here.
 ','line_number':148,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':176,'multiline':True]['text':' __DIGITAFFIXANDPADDING_H__','line_number':177,'multiline':False]