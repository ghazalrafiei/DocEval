['text':'
*******************************************************************************
*   Copyright (C) 2010-2012,2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  stringtriebuilder.h
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010dec24
*   created by: Markus W. Scherer
','line_number':1,'multiline':True]['text':'*
 * \file
 * \brief C++ API: Builder API for trie builders
 ','line_number':21,'multiline':True]['text':' Forward declaration.','line_number':26,'multiline':False]['text':'*
 * Build options for BytesTrieBuilder and CharsTrieBuilder.
 * @stable ICU 4.8
 ','line_number':30,'multiline':True]['text':'*
     * Builds a trie quickly.
     * @stable ICU 4.8
     ','line_number':35,'multiline':True]['text':'*
     * Builds a trie more slowly, attempting to generate
     * a shorter but equivalent serialization.
     * This build option also uses more memory.
     *
     * This option can be effective when many integer values are the same
     * and string/byte sequence suffixes can be shared.
     * Runtime speed is not expected to improve.
     * @stable ICU 4.8
     ','line_number':40,'multiline':True]['text':'*
 * Base class for string trie builder classes.
 *
 * This class is not intended for public subclassing.
 * @stable ICU 4.8
 ','line_number':55,'multiline':True]['text':'* @internal ','line_number':64,'multiline':True]['text':'* @internal ','line_number':66,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':68,'multiline':True]['text':' Do not enclose the protected default constructor with #ifndef U_HIDE_INTERNAL_API','line_number':71,'multiline':False]['text':' or else the compiler will create a public default constructor.','line_number':72,'multiline':False]['text':'* @internal ','line_number':73,'multiline':True]['text':'* @internal ','line_number':75,'multiline':True]['text':'* @internal ','line_number':79,'multiline':True]['text':'* @internal ','line_number':81,'multiline':True]['text':'* @internal ','line_number':84,'multiline':True]['text':'* @internal ','line_number':87,'multiline':True]['text':'* @internal ','line_number':89,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':91,'multiline':True]['text':'* @internal ','line_number':96,'multiline':True]['text':'* @internal ','line_number':98,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':101,'multiline':True]['text':'* @internal ','line_number':103,'multiline':True]['text':'* @internal ','line_number':105,'multiline':True]['text':'* @internal ','line_number':107,'multiline':True]['text':' Finds the first unit index after this one where','line_number':110,'multiline':False]['text':' the first and last element have different units again.','line_number':111,'multiline':False]['text':'* @internal ','line_number':112,'multiline':True]['text':' Number of different units at unitIndex.','line_number':115,'multiline':False]['text':'* @internal ','line_number':116,'multiline':True]['text':'* @internal ','line_number':118,'multiline':True]['text':'* @internal ','line_number':120,'multiline':True]['text':'* @internal ','line_number':123,'multiline':True]['text':'* @internal ','line_number':126,'multiline':True]['text':'* @internal ','line_number':128,'multiline':True]['text':'* @internal ','line_number':130,'multiline':True]['text':' max(BytesTrie::kMaxBranchLinearSubNodeLength, UCharsTrie::kMaxBranchLinearSubNodeLength).','line_number':134,'multiline':False]['text':'* @internal ','line_number':135,'multiline':True]['text':' Maximum number of nested split-branch levels for a branch on all 2^16 possible UChar units.','line_number':138,'multiline':False]['text':' log2(2^16/kMaxBranchLinearSubNodeLength) rounded up.','line_number':139,'multiline':False]['text':'* @internal ','line_number':140,'multiline':True]['text':'*
     * Makes sure that there is only one unique node registered that is
     * equivalent to newNode.
     * @param newNode Input node. The builder takes ownership.
     * @param errorCode ICU in/out UErrorCode.
                        Set to U_MEMORY_ALLOCATION_ERROR if it was success but newNode==NULL.
     * @return newNode if it is the first of its kind, or
     *         an equivalent node if newNode is a duplicate.
     * @internal
     ','line_number':143,'multiline':True]['text':'*
     * Makes sure that there is only one unique FinalValueNode registered
     * with this value.
     * Avoids creating a node if the value is a duplicate.
     * @param value A final value.
     * @param errorCode ICU in/out UErrorCode.
                        Set to U_MEMORY_ALLOCATION_ERROR if it was success but newNode==NULL.
     * @return A FinalValueNode with the given value.
     * @internal
     ','line_number':154,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':165,'multiline':True]['text':'
     * C++ note:
     * registerNode() and registerFinalValue() take ownership of their input nodes,
     * and only return owned nodes.
     * If they see a failure UErrorCode, they will delete the input node.
     * If they get a NULL pointer, they will record a U_MEMORY_ALLOCATION_ERROR.
     * If there is a failure, they return NULL.
     *
     * NULL Node pointers can be safely passed into other Nodes because
     * they call the static Node::hashCode() which checks for a NULL pointer first.
     *
     * Therefore, as long as builder functions register a new node,
     * they need to check for failures only before explicitly dereferencing
     * a Node pointer, or before setting a new UErrorCode.
     ','line_number':167,'multiline':True]['text':' Hash set of nodes, maps from nodes to integer 1.','line_number':183,'multiline':False]['text':'* @internal ','line_number':184,'multiline':True]['text':'* @internal ','line_number':188,'multiline':True]['text':' Handles node==NULL.','line_number':193,'multiline':False]['text':' Base class operator==() compares the actual class types.','line_number':195,'multiline':False]['text':'*
         * Traverses the Node graph and numbers branch edges, with rightmost edges first.
         * This is to avoid writing a duplicate node twice.
         *
         * Branch nodes in this trie data structure are not symmetric.
         * Most branch edges "jump" to other nodes but the rightmost branch edges
         * just continue without a jump.
         * Therefore, write() must write the rightmost branch edge last
         * (trie units are written backwards), and must write it at that point even if
         * it is a duplicate of a node previously written elsewhere.
         *
         * This function visits and marks right branch edges first.
         * Edges are numbered with increasingly negative values because we share the
         * offset field which gets positive values when nodes are written.
         * A branch edge also remembers the first number for any of its edges.
         *
         * When a further-left branch edge has a number in the range of the rightmost
         * edge's numbers, then it will be written as part of the required right edge
         * and we can avoid writing it first.
         *
         * After root.markRightEdgesFirst(-1) the offsets of all nodes are negative
         * edge numbers.
         *
         * @param edgeNumber The first edge number for this node and its sub-nodes.
         * @return An edge number that is at least the maximum-negative
         *         of the input edge number and the numbers of this node and all of its sub-nodes.
         ','line_number':198,'multiline':True]['text':' write() must set the offset to a positive value.','line_number':226,'multiline':False]['text':' See markRightEdgesFirst.','line_number':228,'multiline':False]['text':' Note: Edge numbers are negative, lastRight<=firstRight.','line_number':231,'multiline':False]['text':' If offset>0 then this node and its sub-nodes have been written already','line_number':232,'multiline':False]['text':' and we need not write them again.','line_number':233,'multiline':False]['text':' If this node is part of the unwritten right branch edge,','line_number':234,'multiline':False]['text':' then we wait until that is written.','line_number':235,'multiline':False]['text':' This class should not be overridden because','line_number':246,'multiline':False]['text':' registerFinalValue() compares a stack-allocated FinalValueNode','line_number':247,'multiline':False]['text':' (stack-allocated so that we don't unnecessarily create lots of duplicate nodes)','line_number':248,'multiline':False]['text':' with the input node, and the','line_number':249,'multiline':False]['text':' !Node::operator==(other) used inside FinalValueNode::operator==(other)','line_number':250,'multiline':False]['text':' will be false if the typeid's are different.','line_number':251,'multiline':False]['text':'* @internal ','line_number':252,'multiline':True]['text':'*
     * @internal 
     ','line_number':262,'multiline':True]['text':'* 
     * @internal 
     ','line_number':279,'multiline':True]['text':'*
     * @internal 
     ','line_number':293,'multiline':True]['text':'*
     * @internal 
     ','line_number':308,'multiline':True]['text':'*
     * @internal 
     ','line_number':318,'multiline':True]['text':' Adds a unit with a final value.','line_number':327,'multiline':False]['text':' Adds a unit which leads to another match node.','line_number':335,'multiline':False]['text':' NULL means "has final value".','line_number':344,'multiline':False]['text':'*
     * @internal 
     ','line_number':350,'multiline':True]['text':' Branch head node, for writing the actual node lead unit.','line_number':368,'multiline':False]['text':'* @internal ','line_number':369,'multiline':True]['text':' A branch sub-node.','line_number':380,'multiline':False]['text':' U_HIDE_INTERNAL_API ','line_number':382,'multiline':True]['text':'* @internal ','line_number':384,'multiline':True]['text':'* @internal ','line_number':388,'multiline':True]['text':'* @internal ','line_number':390,'multiline':True]['text':'* @internal ','line_number':392,'multiline':True]['text':'* @internal ','line_number':394,'multiline':True]['text':'* @internal ','line_number':396,'multiline':True]['text':' __STRINGTRIEBUILDER_H__','line_number':402,'multiline':False]