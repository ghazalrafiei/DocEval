['text':'
*******************************************************************************
*   Copyright (C) 1996-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  ucol.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
* Modification history
* Date        Name      Comments
* 1996-1999   various members of ICU team maintained C API for collation framework
* 02/16/2001  synwee    Added internal method getPrevSpecialCE
* 03/01/2001  synwee    Added maxexpansion functionality.
* 03/16/2001  weiv      Collation framework is rewritten in C and made UCA compliant
* 2012-2014   markus    Rewritten in C++ again.
','line_number':1,'multiline':True]['text':'stackBuffer','line_number':77,'multiline':True]['text':' preflighting for deprecated functionality','line_number':90,'multiline':False]['text':' check arguments ','line_number':117,'multiline':True]['text':' error, attempt to write a zero byte and return 0 ','line_number':122,'multiline':True]['text':' check lengths and capacity ','line_number':129,'multiline':True]['text':' the merged sort key does not fit into the destination ','line_number':139,'multiline':True]['text':' merge the sort keys with the same number of levels ','line_number':143,'multiline':True]['text':' copy level from src1 not including 00 or 01 ','line_number':146,'multiline':True]['text':' add a 02 merge separator ','line_number':153,'multiline':True]['text':' copy level from src2 not including 00 or 01 ','line_number':156,'multiline':True]['text':' if both sort keys have another level, then add a 01 level separator and continue ','line_number':162,'multiline':True]['text':'
     * here, at least one sort key is finished now, but the other one
     * might have some contents left from containing more levels;
     * that contents is just appended to the result
     ','line_number':172,'multiline':True]['text':' src1 is not finished, therefore *src2==0, and src1 is appended ','line_number':178,'multiline':True]['text':' append src2, "the other, unfinished sort key" ','line_number':181,'multiline':True]['text':' the actual length might be less than destLength if either sort key contained illegally embedded zero bytes ','line_number':184,'multiline':True]['text':' error checking ','line_number':216,'multiline':True]['text':' Return number of meaningful sortkey bytes.','line_number':227,'multiline':False]['text':'*
 * Produce a bound for a given sortkey and a number of levels.
 ','line_number':234,'multiline':True]['text':' consistency checks','line_number':246,'multiline':False]['text':' Scan the string until we skip enough of the key OR reach the end of the key','line_number':256,'multiline':False]['text':' READ ME: this code assumes that the values for boundType','line_number':271,'multiline':False]['text':' enum will not changes. They are set so that the enum value','line_number':272,'multiline':False]['text':' corresponds to the number of extra bytes each bound type','line_number':273,'multiline':False]['text':' needs.','line_number':274,'multiline':False]['text':' Lower bound just gets terminated. No extra bytes','line_number':278,'multiline':False]['text':' = 0','line_number':279,'multiline':False]['text':' Upper bound needs one extra byte','line_number':281,'multiline':False]['text':' = 1','line_number':282,'multiline':False]['text':' Upper long bound needs two extra bytes','line_number':285,'multiline':False]['text':' = 2','line_number':286,'multiline':False]['text':'                                                                      ','line_number':434,'multiline':True]['text':' ucol_strcoll     Main public API string comparison function          ','line_number':435,'multiline':True]['text':'                                                                      ','line_number':436,'multiline':True]['text':' do nothing ','line_number':475,'multiline':True]['text':' convenience function for comparing strings ','line_number':487,'multiline':True]['text':' convenience function for comparing strings ','line_number':499,'multiline':True]['text':' convenience function for comparing strings ','line_number':511,'multiline':True]['text':' Note: This is tied to how the current implementation encodes the UCA version','line_number':529,'multiline':False]['text':' in the overall getVersion().','line_number':530,'multiline':False]['text':' Alternatively, we could load the root collator and get at lower-level data from there.','line_number':531,'multiline':False]['text':' Either way, it will reflect the input collator's UCA version only','line_number':532,'multiline':False]['text':' if it is a known implementation.','line_number':533,'multiline':False]['text':' It would be cleaner to make this a virtual Collator method.','line_number':534,'multiline':False]['text':' OK to crash if coll==NULL: We do not want to check "this" pointers.','line_number':545,'multiline':False]['text':' #if !UCONFIG_NO_COLLATION ','line_number':618,'multiline':True]