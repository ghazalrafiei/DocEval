['text':'
*******************************************************************************
*
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  locdispnames.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010feb25
*   created by: Markus W. Scherer
*
*   Code for locale display names, separated out from other .cpp files
*   that then do not depend on resource bundle code and display name data.
','line_number':1,'multiline':True]['text':' C++ API ----------------------------------------------------------------- ***','line_number':34,'multiline':False]['text':'We cannot make any assumptions on the size of the output display strings
* Yet, since we are calling through to a C API, we need to set limits on
* buffer size. For all the following getDisplay functions we first attempt
* to fill up a stack allocated buffer. If it is to small we heap allocated
* the exact buffer we need copy it to the UnicodeString and delete it','line_number':44,'multiline':True]['text':' -------------------------------------','line_number':246,'multiline':False]['text':' Gets the objectLocale display name in the default locale language.','line_number':247,'multiline':False]['text':' -------------------------------------','line_number':255,'multiline':False]['text':' Gets the objectLocale display name in the displayLocale language.','line_number':256,'multiline':False]['text':' C API ------------------------------------------------------------------- ***','line_number':270,'multiline':False]['text':' ### Constants *************************************************','line_number':274,'multiline':True]['text':' These strings describe the resources we attempt to load from
 the locale ResourceBundle data file.','line_number':276,'multiline':True]['text':'static const char _kRootName[]        = "root";','line_number':285,'multiline':False]['text':' ### Display name *************************************************','line_number':292,'multiline':True]['text':' top-level item: normal resource bundle access ','line_number':306,'multiline':True]['text':' see comment about closing rb near "return item;" in _res_getTableStringWithFallback() ','line_number':313,'multiline':True]['text':' Language code should not be a number. If it is, set the error code. ','line_number':317,'multiline':True]['text':' second-level item, use special fallback ','line_number':321,'multiline':True]['text':' no string from a resource bundle: convert the substitute ','line_number':337,'multiline':True]['text':' argument checking ','line_number':360,'multiline':True]['text':'
 * TODO separate variant1_variant2_variant3...
 * by getting each tag's display string and concatenating them with ", "
 * in between - similar to uloc_getDisplayName()
 ','line_number':436,'multiline':True]['text':' Instead of having a separate pass for 'special' patterns, reintegrate the two
 * so we don't get bitten by preflight bugs again.  We can be reasonably efficient
 * without two separate code paths, this code isn't that performance-critical.
 *
 * This code is general enough to deal with patterns that have a prefix or swap the
 * language and remainder components, since we gave developers enough rope to do such
 * things if they futz with the pattern data.  But since we don't give them a way to
 * specify a pattern for arbitrary combinations of components, there's not much use in
 * that.  I don't think our data includes such patterns, the only variable I know if is
 * whether there is a space before the open paren, or not.  Oh, and zh uses different
 * chars than the standard open/close paren (which ja and ko use, btw).
 ','line_number':450,'multiline':True]['text':' "{0}, {1}" ','line_number':468,'multiline':True]['text':' {0} ','line_number':469,'multiline':True]['text':' {1} ','line_number':470,'multiline':True]['text':' {0} ({1}) ','line_number':474,'multiline':True]['text':' of formatted result ','line_number':479,'multiline':True]['text':' (','line_number':487,'multiline':False]['text':' [','line_number':488,'multiline':False]['text':' )','line_number':489,'multiline':False]['text':' ]','line_number':490,'multiline':False]['text':' assume true, set false if we find we don't have
                              a lang component in the locale ','line_number':492,'multiline':True]['text':' assume true, set false if we find we don't have
                              any other component in the locale ','line_number':494,'multiline':True]['text':' set true if we need to retry, see below ','line_number':496,'multiline':True]['text':' index of the language substitution (0 or 1), virtually always 0 ','line_number':498,'multiline':True]['text':' If we couldn't find any data, then use the defaults ','line_number':522,'multiline':True]['text':' #10244: Even though separator is now a pattern, it is awkward to handle it as such
     * here since we are trying to build the display string in place in the dest buffer,
     * and to handle it as a pattern would entail having separate storage for the
     * substrings that need to be combined (the first of which may be the result of
     * previous such combinations). So for now we continue to treat the portion between
     * {0} and {1} as a string to be appended when joining substrings, ignoring anything
     * that is before {0} or after {1} (no existing separator pattern has any such thing).
     * This is similar to how pattern is handled below.
     ','line_number':526,'multiline':True]['text':' use default formatOpenParen etc. set above','line_number':551,'multiline':False]['text':' non-default pattern ','line_number':552,'multiline':True]['text':' a very odd pattern ','line_number':561,'multiline':True]['text':' fullwidth (','line_number':566,'multiline':False]['text':' fullwidth [','line_number':567,'multiline':False]['text':' fullwidth )','line_number':568,'multiline':False]['text':' fullwidth ]','line_number':569,'multiline':False]['text':' We loop here because there is one case in which after the first pass we could need to
     * reextract the data.  If there's initial padding before the first element, we put in
     * the padding and then write that element.  If it turns out there's no second element,
     * we didn't need the padding.  If we do need the data (no preflight), and the first element
     * would have fit but for the padding, we need to reextract.  In this case (only) we
     * adjust the parameters so padding is not added, and repeat.
     ','line_number':573,'multiline':True]['text':' position in the pattern, used for non-substitution portions ','line_number':582,'multiline':True]['text':' length of language substitution ','line_number':583,'multiline':True]['text':' position in output of language substitution ','line_number':584,'multiline':True]['text':' length of 'everything else' substitution ','line_number':585,'multiline':True]['text':' position in output of 'everything else' substitution ','line_number':586,'multiline':True]['text':' keyword enumeration ','line_number':587,'multiline':True]['text':' prefix of pattern, extremely likely to be empty ','line_number':589,'multiline':True]['text':' iterate through patterns 0 and 1','line_number':603,'multiline':True]['text':' set true when ready to move to next substitution ','line_number':604,'multiline':True]['text':' prep p and cap for calls to get display components, pin cap to 0 since
               they complain if cap is negative ','line_number':606,'multiline':True]['text':' {0}','line_number':615,'multiline':True]['text':' {1} ','line_number':623,'multiline':True]['text':' length of component (plus other stuff) we just fetched ','line_number':627,'multiline':True]['text':' mark that we didn't add a component ','line_number':646,'multiline':True]['text':' incorporating this behavior into the loop made it even more complex,
                                   so just special case it here ','line_number':649,'multiline':True]['text':' '=', assume we'll need it ','line_number':654,'multiline':True]['text':' adjust for call to get keyword ','line_number':658,'multiline':True]['text':' reset for call below ','line_number':666,'multiline':True]['text':' remove unneeded '=' ','line_number':674,'multiline':True]['text':' restore cap and p to what they were at start ','line_number':676,'multiline':True]['text':' total we added for key + '=' + value ','line_number':684,'multiline':True]['text':' end switch ','line_number':687,'multiline':True]['text':' we addeed a component, so add separator and write it if there's room. ','line_number':690,'multiline':True]['text':' remove separator if we added it ','line_number':706,'multiline':True]['text':' append internal portion of pattern, the first time,
                       or last portion of pattern the second time ','line_number':722,'multiline':True]['text':' don't have first component, reset for second component ','line_number':737,'multiline':True]['text':' true length is the length of just the component we got. ','line_number':741,'multiline':True]['text':' first component not at start of result,
                               but we have full component in buffer. ','line_number':745,'multiline':True]['text':' would have fit, but didn't because of pattern prefix. ','line_number':749,'multiline':True]['text':' stops initial padding (and a second retry,
                                          so we won't end up here again) ','line_number':750,'multiline':True]['text':' move on to next substitution ','line_number':757,'multiline':True]['text':' argument checking ','line_number':772,'multiline':True]['text':' pass itemKey=NULL to look for a top-level item ','line_number':783,'multiline':True]['text':' argument checking ','line_number':809,'multiline':True]['text':' get the keyword value ','line_number':819,'multiline':True]['text':' 
     * if the keyword is equal to currency .. then to get the display name 
     * we need to do the fallback ourselves
     ','line_number':823,'multiline':True]['text':'close the bundles ','line_number':838,'multiline':True]['text':' we just want to write the value over if nothing is available ','line_number':845,'multiline':True]['text':' now copy the dispName over if not NULL ','line_number':852,'multiline':True]['text':' we have not found the display name for the value .. just copy over ','line_number':862,'multiline':True]