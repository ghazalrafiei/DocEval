['text':'
**********************************************************************
* Copyright (C) 1999-2011, International Business Machines Corporation
* and others. All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   11/17/99    aliu        Creation.
**********************************************************************
','line_number':1,'multiline':True]['text':'*
     * A Vector of TransliterationRuleData objects, one for each discrete group
     * of rules in the rule set
     ','line_number':38,'multiline':True]['text':'*
     * PUBLIC data member.
     * A Vector of UnicodeStrings containing all of the ID blocks in the rule set
     ','line_number':44,'multiline':True]['text':'*
     * PUBLIC data member containing the parsed compound filter, if any.
     ','line_number':50,'multiline':True]['text':'*
     * The current data object for which we are parsing rules
     ','line_number':57,'multiline':True]['text':'*
     * Parse error information.
     ','line_number':64,'multiline':True]['text':'*
     * Temporary symbol table used during parsing.
     ','line_number':69,'multiline':True]['text':'*
     * Temporary vector of matcher variables.  When parsing is complete, this
     * is copied into the array data.variables.  As with data.variables,
     * element 0 corresponds to character data.variablesBase.
     ','line_number':74,'multiline':True]['text':'*
     * Temporary table of variable names.  When parsing is complete, this is
     * copied into data.variableNames.
     ','line_number':81,'multiline':True]['text':'*
     * String of standins for segments.  Used during the parsing of a single
     * rule.  segmentStandins.charAt(0) is the standin for "$1" and corresponds
     * to StringMatcher object segmentObjects.elementAt(0), etc.
     ','line_number':87,'multiline':True]['text':'*
     * Vector of StringMatcher objects for segments.  Used during the
     * parsing of a single rule.  
     * segmentStandins.charAt(0) is the standin for "$1" and corresponds
     * to StringMatcher object segmentObjects.elementAt(0), etc.
     ','line_number':94,'multiline':True]['text':'*
     * The next available stand-in for variables.  This starts at some point in
     * the private use area (discovered dynamically) and increments up toward
     * <code>variableLimit</code>.  At any point during parsing, available
     * variables are <code>variableNext..variableLimit-1</code>.
     ','line_number':102,'multiline':True]['text':'*
     * The last available stand-in for variables.  This is discovered
     * dynamically.  At any point during parsing, available variables are
     * <code>variableNext..variableLimit-1</code>.
     ','line_number':110,'multiline':True]['text':'*
     * When we encounter an undefined variable, we do not immediately signal
     * an error, in case we are defining this variable, e.g., "$a = [a-z];".
     * Instead, we save the name of the undefined variable, and substitute
     * in the placeholder char variableLimit - 1, and decrement
     * variableLimit.
     ','line_number':117,'multiline':True]['text':'*
     * The stand-in character for the 'dot' set, represented by '.' in
     * patterns.  This is allocated the first time it is needed, and
     * reused thereafter.
     ','line_number':126,'multiline':True]['text':'*
     * Constructor.
     ','line_number':135,'multiline':True]['text':'*
     * Destructor.
     ','line_number':140,'multiline':True]['text':'*
     * Parse the given string as a sequence of rules, separated by newline
     * characters ('\n'), and cause this object to implement those rules.  Any
     * previous rules are discarded.  Typically this method is called exactly
     * once after construction.
     *
     * Parse the given rules, in the given direction.  After this call
     * returns, query the public data members for results.  The caller
     * owns the 'data' and 'compoundFilter' data members after this
     * call returns.
     * @param rules      rules, separated by ';'
     * @param direction  either FORWARD or REVERSE.
     * @param pe         Struct to recieve information on position 
     *                   of error if an error is encountered
     * @param ec         Output param set to success/failure code.
     ','line_number':145,'multiline':True]['text':'*
     * Return the compound filter parsed by parse().  Caller owns result.
     * @return the compound filter parsed by parse().
     ','line_number':166,'multiline':True]['text':'*
     * Return a representation of this transliterator as source rules.
     * @param rules      Output param to receive the rules.
     * @param direction  either FORWARD or REVERSE.
     ','line_number':174,'multiline':True]['text':'*
     * MAIN PARSER.  Parse the next rule in the given rule string, starting
     * at pos.  Return the index after the last character parsed.  Do not
     * parse characters at or after limit.
     *
     * Important:  The character at pos must be a non-whitespace character
     * that is not the comment character.
     *
     * This method handles quoting, escaping, and whitespace removal.  It
     * parses the end-of-rule character.  It recognizes context and cursor
     * indicators.  Once it does a lexical breakdown of the rule at pos, it
     * creates a rule object and adds it to our rule list.
     * @param rules      Output param to receive the rules.
     * @param pos        the starting position.
     * @param limit      pointer past the last character of the rule.
     * @return           the index after the last character parsed.
     ','line_number':183,'multiline':True]['text':'*
     * Set the variable range to [start, end] (inclusive).
     * @param start    the start value of the range.
     * @param end      the end value of the range.
     ','line_number':202,'multiline':True]['text':'*
     * Assert that the given character is NOT within the variable range.
     * If it is, return FALSE.  This is neccesary to ensure that the
     * variable range does not overlap characters used in a rule.
     * @param ch     the given character.
     * @return       True, if the given character is NOT within the variable range.
     ','line_number':209,'multiline':True]['text':'*
     * Set the maximum backup to 'backup', in response to a pragma
     * statement.
     * @param backup    the new value to be set.
     ','line_number':218,'multiline':True]['text':'*
     * Begin normalizing all rules using the given mode, in response
     * to a pragma statement.
     * @param mode    the given mode.
     ','line_number':225,'multiline':True]['text':'*
     * Return true if the given rule looks like a pragma.
     * @param pos offset to the first non-whitespace character
     * of the rule.
     * @param limit pointer past the last character of the rule.
     * @return true if the given rule looks like a pragma.
     ','line_number':232,'multiline':True]['text':'*
     * Parse a pragma.  This method assumes resemblesPragma() has
     * already returned true.
     * @param pos offset to the first non-whitespace character
     * of the rule.
     * @param limit pointer past the last character of the rule.
     * @return the position index after the final ';' of the pragma,
     * or -1 on failure.
     ','line_number':241,'multiline':True]['text':'*
     * Called by main parser upon syntax error.  Search the rule string
     * for the probable end of the rule.  Of course, if the error is that
     * the end of rule marker is missing, then the rule end will not be found.
     * In any case the rule start will be correctly reported.
     * @param parseErrorCode error code.
     * @param msg error description.
     * @param start position of first character of current rule.
     * @return start position of first character of current rule.
     ','line_number':252,'multiline':True]['text':'*
     * Parse a UnicodeSet out, store it, and return the stand-in character
     * used to represent it.
     *
     * @param rule    the rule for UnicodeSet.
     * @param pos     the position in pattern at which to start parsing.
     * @return        the stand-in character used to represent it.
     ','line_number':265,'multiline':True]['text':'*
     * Generate and return a stand-in for a new UnicodeFunctor.  Store
     * the matcher (adopt it).
     * @param adopted the UnicodeFunctor to be adopted.
     * @return        a stand-in for a new UnicodeFunctor.
     ','line_number':277,'multiline':True]['text':'*
     * Return the standin for segment seg (1-based).
     * @param seg    the given segment.
     * @return       the standIn character for the given segment.
     ','line_number':285,'multiline':True]['text':'*
     * Set the object for segment seg (1-based).
     * @param seg      the given segment.
     * @param adopted  the StringMatcher to be adopted.
     ','line_number':292,'multiline':True]['text':'*
     * Return the stand-in for the dot set.  It is allocated the first
     * time and reused thereafter.
     * @return    the stand-in for the dot set.
     ','line_number':299,'multiline':True]['text':'*
     * Append the value of the given variable name to the given
     * UnicodeString.
     * @param name    the variable name to be appended.
     * @param buf     the given UnicodeString to append to.
     ','line_number':306,'multiline':True]['text':'*
     * Glue method to get around access restrictions in C++.
     ','line_number':316,'multiline':True]['text':'static Transliterator* createBasicInstance(const UnicodeString& id,
                                               const UnicodeString* canonID);','line_number':319,'multiline':True]['text':' Disallowed methods; no impl.','line_number':324,'multiline':False]['text':'*
     * Copy constructor
     ','line_number':325,'multiline':True]['text':'*
     * Assignment operator
     ','line_number':330,'multiline':True]['text':' #ifdef __cplusplus ','line_number':338,'multiline':True]['text':'*
 * Strip/convert the following from the transliterator rules:
 * comments
 * newlines
 * white space at the beginning and end of a line
 * unescape \u notation
 *
 * The target must be equal in size as the source.
 * @internal
 ','line_number':340,'multiline':True]['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':353,'multiline':True]