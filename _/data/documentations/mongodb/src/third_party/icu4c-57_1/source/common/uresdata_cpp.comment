['text':'
*******************************************************************************
* Copyright (C) 1999-2016, International Business Machines Corporation
*               and others. All Rights Reserved.
*******************************************************************************
*   file name:  uresdata.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999dec08
*   created by: Markus W. Scherer
* Modification History:
*
*   Date        Name        Description
*   06/20/2000  helena      OS/400 port changes; mostly typecast.
*   06/24/02    weiv        Added support for resource sharing
','line_number':1,'multiline':True]['text':'
 * Resource access helpers
 ','line_number':35,'multiline':True]['text':' get a const char* pointer to the key with the keyOffset byte offset from pRoot ','line_number':39,'multiline':True]['text':' empty resources, returned when the resource offset is 0 ','line_number':52,'multiline':True]['text':'
 * All the type-access functions assume that
 * the resource is of the expected type.
 ','line_number':66,'multiline':True]['text':' do a binary search for the key ','line_number':78,'multiline':True]['text':' We found it! ','line_number':94,'multiline':True]['text':' not found or table is empty. ','line_number':99,'multiline':True]['text':' do a binary search for the key ','line_number':109,'multiline':True]['text':' We found it! ','line_number':125,'multiline':True]['text':' not found or table is empty. ','line_number':130,'multiline':True]['text':' helper for res_load() ---------------------------------------------------- ','line_number':133,'multiline':True]['text':'type','line_number':137,'multiline':True]['text':'name','line_number':137,'multiline':True]['text':' dataFormat="ResB" ','line_number':145,'multiline':True]['text':' semi-public functions ---------------------------------------------------- ','line_number':152,'multiline':True]['text':' get the root resource ','line_number':160,'multiline':True]['text':' formatVersion 1.1 must have a root item and at least 5 indexes ','line_number':165,'multiline':True]['text':' currently, we accept only resources that have a Table as their roots ','line_number':172,'multiline':True]['text':' greater than any 16-bit key string offset ','line_number':181,'multiline':True]['text':' bundles with formatVersion 1.1 and later contain an indexes[] array ','line_number':183,'multiline':True]['text':' In formatVersion 1, the indexLength took up this whole int.','line_number':203,'multiline':False]['text':' In version 2, bits 31..8 were reserved and always 0.','line_number':204,'multiline':False]['text':' In version 3, they contain bits 23..0 of the poolStringIndexLimit.','line_number':205,'multiline':False]['text':' Bits 27..24 are in indexes[URES_INDEX_ATTRIBUTES] bits 15..12.','line_number':206,'multiline':False]['text':' bits 15..12 -> 27..24','line_number':214,'multiline':False]['text':'
         * formatVersion 1: compare key strings in native-charset order
         * formatVersion 2 and up: compare key strings in ASCII order
         ','line_number':230,'multiline':True]['text':' load the ResourceBundle file ','line_number':262,'multiline':True]['text':' get its memory and initialize *pResData ','line_number':268,'multiline':True]['text':' URES_TABLE32 ','line_number':286,'multiline':True]['text':' URES_TABLE16 ','line_number':287,'multiline':True]['text':' URES_STRING_V2 ','line_number':288,'multiline':True]['text':' URES_ARRAY16 ','line_number':292,'multiline':True]['text':' RES_GET_TYPE(res)==URES_STRING ','line_number':332,'multiline':True]['text':'*
 * CLDR string value (three empty-set symbols)=={2205, 2205, 2205}
 * prevents fallback to the parent bundle.
 * TODO: combine with other code that handles this marker, use EMPTY_SET constant.
 * TODO: maybe move to uresbund.cpp?
 ','line_number':348,'multiline':True]['text':' empty string','line_number':357,'multiline':False]['text':' implicit length','line_number':371,'multiline':False]['text':' explicit length 3 (should not occur)','line_number':373,'multiline':False]['text':' Assume that the string has not been stored with more length units than necessary.','line_number':376,'multiline':False]['text':' namespace','line_number':383,'multiline':False]['text':' namespace','line_number':500,'multiline':False]['text':' Pool string, nothing to do.','line_number':579,'multiline':False]['text':' Local string, adjust the 16-bit offset to a regular one,','line_number':581,'multiline':False]['text':' with a larger pool string index limit.','line_number':582,'multiline':False]['text':' empty if offset==0 ','line_number':599,'multiline':True]['text':' empty if offset==0 ','line_number':620,'multiline':True]['text':' to ensure the index is not negative ','line_number':641,'multiline':True]['text':' empty if offset==0 ','line_number':644,'multiline':True]['text':' empty if offset==0 ','line_number':669,'multiline':True]['text':' TODO: Ported from Java, but enumerating at this low level may prevent us','line_number':694,'multiline':False]['text':' from doing necessary things, like resolving aliases,','line_number':695,'multiline':False]['text':' which need access to higher-level UResourceBundle code.','line_number':696,'multiline':False]['text':' Consider porting the low-level Container/Array/Table classes from Java,','line_number':697,'multiline':False]['text':' with getters for keys and values,','line_number':698,'multiline':False]['text':' and doing the enumeration in the higher-level code on top of those accessors.','line_number':699,'multiline':False]['text':' empty if offset==0 ','line_number':713,'multiline':True]['text':' empty if offset==0 ','line_number':727,'multiline':True]['text':' TODO: settle on how to deal with aliases, port to Java
        } else if (type == URES_ALIAS) {
            // aliases not handled in resource enumeration
            errorCode = U_UNSUPPORTED_ERROR;
            return; ','line_number':765,'multiline':True]['text':' to ensure the index is not negative ','line_number':784,'multiline':True]['text':' empty if offset==0 ','line_number':787,'multiline':True]['text':' empty if offset==0 ','line_number':819,'multiline':True]['text':' TODO: settle on how to deal with aliases, port to Java
        } else if (type == URES_ALIAS) {
            // aliases not handled in resource enumeration
            errorCode = U_UNSUPPORTED_ERROR;
            return; ','line_number':855,'multiline':True]['text':' if you come in with an empty path, you'll be getting back the same resource ','line_number':878,'multiline':True]['text':' one needs to have an aggregate resource in order to search in it ','line_number':883,'multiline':True]['text':' Iteration stops if: the path has been consumed, we found a non-existing
     * resource (t1 == RES_BOGUS) or we found a scalar resource (including alias)
     ','line_number':889,'multiline':True]['text':' if there are more separators, terminate string 
     * and set path to the remaining part of the string
     ','line_number':893,'multiline':True]['text':' Empty key string.','line_number':898,'multiline':False]['text':' overwrite the separator with a NUL to terminate the key ','line_number':901,'multiline':True]['text':' if the resource is a table ','line_number':907,'multiline':True]['text':' try the key based access ','line_number':908,'multiline':True]['text':' if we fail to get the resource by key, maybe we got an index ','line_number':913,'multiline':True]['text':' if we indeed have an index, try to get the item by index ','line_number':916,'multiline':True]['text':' have an array, but don't have a valid index ','line_number':925,'multiline':True]['text':' can't do much here, except setting t2 to bogus ','line_number':928,'multiline':True]['text':' position pathP to next resource key/index ','line_number':933,'multiline':True]['text':' resource bundle swapping ------------------------------------------------- ','line_number':940,'multiline':True]['text':'
 * Need to always enumerate the entire item tree,
 * track the lowest address of any item to use as the limit for char keys[],
 * track the highest address of any item to return the size of the data.
 *
 * We should have thought of storing those in the data...
 * It is possible to extend the data structure by putting additional values
 * in places that are inaccessible by ordinary enumeration of the item tree.
 * For example, additional integers could be stored at the beginning or
 * end of the key strings; this could be indicated by a minor version number,
 * and the data swapping would have to know about these values.
 *
 * The data structure does not forbid keys to be shared, so we must swap
 * all keys once instead of each key when it is referenced.
 *
 * These swapping functions assume that a resource bundle always has a length
 * that is a multiple of 4 bytes.
 * Currently, this is trivially true because genrb writes bundle tree leaves
 * physically first, before their branches, so that the root table with its
 * array of resource items (uint32_t values) is always last.
 ','line_number':942,'multiline':True]['text':' definitions for table sorting ------------------------ ','line_number':964,'multiline':True]['text':'
 * row of a temporary array
 *
 * gets platform-endian key string indexes and sorting indexes;
 * after sorting this array by keys, the actual key/value arrays are permutated
 * according to the sorting indexes
 ','line_number':966,'multiline':True]['text':' The table item key string is not locally available. ','line_number':997,'multiline':True]['text':' resource table key for collation binaries: "%%CollationBin" ','line_number':1000,'multiline':True]['text':'
 * swap one resource item
 ','line_number':1008,'multiline':True]['text':' caller swaps res itself ','line_number':1014,'multiline':True]['text':' integer, or points to 16-bit units, nothing to do here ','line_number':1027,'multiline':True]['text':' all other types use an offset to point to their data ','line_number':1033,'multiline':True]['text':' special offset indicating an empty item ','line_number':1036,'multiline':True]['text':' we already swapped this resource item ','line_number':1040,'multiline':True]['text':' mark it as swapped now ','line_number':1043,'multiline':True]['text':' physically same value layout as string, fall through ','line_number':1052,'multiline':True]['text':' swap length ','line_number':1056,'multiline':True]['text':' swap each UChar (the terminating NUL would not change) ','line_number':1058,'multiline':True]['text':' swap length ','line_number':1063,'multiline':True]['text':' no need to swap or copy bytes - ures_swap() copied them all ','line_number':1065,'multiline':True]['text':' swap known formats ','line_number':1067,'multiline':True]['text':' the binary is in a table ','line_number':1069,'multiline':True]['text':' its table key string is "%%CollationBin" ','line_number':1071,'multiline':True]['text':' its table key string is unknown but it looks like a collation binary ','line_number':1074,'multiline':True]['text':' get table item count ','line_number':1094,'multiline':True]['text':' swap count ','line_number':1101,'multiline':True]['text':' get table item count ','line_number':1106,'multiline':True]['text':' swap count ','line_number':1113,'multiline':True]['text':' pointer to table resources ','line_number':1123,'multiline':True]['text':' recurse ','line_number':1126,'multiline':True]['text':' no need to sort, just swap the offset/value arrays ','line_number':1150,'multiline':True]['text':' swap key offsets and items as one array ','line_number':1155,'multiline':True]['text':'
             * We need to sort tables by outCharset key strings because they
             * sort differently for different charset families.
             * ures_swap() already set pTempTable->keyChars appropriately.
             * First we set up a temporary table with the key indexes and
             * sorting indexes and sort that.
             * Then we permutate and copy/swap the actual values.
             ','line_number':1161,'multiline':True]['text':'
             * copy/swap/permutate items
             *
             * If we swap in-place, then the permutation must use another
             * temporary array (pTempTable->resort)
             * before the results are copied to the outBundle.
             ','line_number':1189,'multiline':True]['text':' keys ','line_number':1196,'multiline':True]['text':' resources ','line_number':1229,'multiline':True]['text':' swap length ','line_number':1255,'multiline':True]['text':' recurse ','line_number':1258,'multiline':True]['text':' swap items ','line_number':1269,'multiline':True]['text':' swap length and each integer ','line_number':1275,'multiline':True]['text':' also catches RES_BOGUS ','line_number':1279,'multiline':True]['text':' the following integers count Resource item offsets (4 bytes each), not bytes ','line_number':1300,'multiline':True]['text':' udata_swapDataHeader checks the arguments ','line_number':1303,'multiline':True]['text':' check data format and format version ','line_number':1309,'multiline':True]['text':' dataFormat="ResB" ','line_number':1312,'multiline':True]['text':' formatVersion 1.1+ or 2.x or 3.x ','line_number':1316,'multiline':True]['text':' a resource bundle must contain at least one resource item ','line_number':1329,'multiline':True]['text':' formatVersion 1.1 must have a root item and at least 5 indexes ','line_number':1335,'multiline':True]['text':' formatVersion 1.1 adds the indexes[] array ','line_number':1347,'multiline':True]['text':' track which resources we have already swapped ','line_number':1381,'multiline':True]['text':'
         * We need one bit per 4 resource bundle bytes so that we can track
         * every possible Resource for whether we have swapped it already.
         * Multiple Resource words can refer to the same bundle offsets
         * for sharing identical values.
         * We could optimize this by allocating only for locations above
         * where Resource values are stored (above keys & strings).
         ','line_number':1385,'multiline':True]['text':' number of bytes needed ','line_number':1393,'multiline':True]['text':' multiple of 4 bytes for uint32_t ','line_number':1394,'multiline':True]['text':' copy the bundle for binary and inaccessible data ','line_number':1407,'multiline':True]['text':' swap the key strings, but not the padding bytes (0xaa) after the last string and its NUL ','line_number':1412,'multiline':True]['text':' swap the 16-bit units (strings, table16, array16) ','line_number':1420,'multiline':True]['text':' allocate the temporary table for sorting resource tables ','line_number':1429,'multiline':True]['text':' sort by outCharset ','line_number':1430,'multiline':True]['text':' swap the resources ','line_number':1448,'multiline':True]['text':' swap the root resource and indexes ','line_number':1462,'multiline':True]