['text':'
******************************************************************************
*
*   Copyright (C) 1997-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
','line_number':1,'multiline':True]['text':'----------------------------------------------------------------------------','line_number':9,'multiline':False]['text':' File:     mutex.h','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Lightweight C++ wrapper for umtx_ C mutex functions','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Author:   Alan Liu  1/31/97','line_number':14,'multiline':False]['text':' History:','line_number':15,'multiline':False]['text':' 06/04/97   helena         Updated setImplementation as per feedback from 5/21 drop.','line_number':16,'multiline':False]['text':' 04/07/1999  srl               refocused as a thin wrapper','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':19,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':29,'multiline':False]['text':' Code within that accesses shared static or global data should','line_number':30,'multiline':False]['text':' should instantiate a Mutex object while doing so. You should make your own ','line_number':31,'multiline':False]['text':' private mutex where possible.','line_number':32,'multiline':False]['text':' For example:','line_number':34,'multiline':False]['text':' ','line_number':35,'multiline':False]['text':' UMutex myMutex;','line_number':36,'multiline':False]['text':' ','line_number':37,'multiline':False]['text':' void Function(int arg1, int arg2)','line_number':38,'multiline':False]['text':' {','line_number':39,'multiline':False]['text':'    static Object* foo;     // Shared read-write object','line_number':40,'multiline':False]['text':'    Mutex mutex(&myMutex);  // or no args for the global lock','line_number':41,'multiline':False]['text':'    foo->Method();','line_number':42,'multiline':False]['text':'    // When 'mutex' goes out of scope and gets destroyed here, the lock is released','line_number':43,'multiline':False]['text':' }','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' Note:  Do NOT use the form 'Mutex mutex();' as that merely forward-declares a function','line_number':46,'multiline':False]['text':'        returning a Mutex. This is a common mistake which silently slips through the','line_number':47,'multiline':False]['text':'        compiler!!','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' forbid copying of this class','line_number':59,'multiline':False]['text':' forbid copying of this class','line_number':60,'multiline':False]['text':'_MUTEX_','line_number':76,'multiline':False]['text':'eof','line_number':77,'multiline':False]