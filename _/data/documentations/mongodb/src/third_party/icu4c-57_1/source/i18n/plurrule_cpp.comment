['text':'
*******************************************************************************
* Copyright (C) 2007-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File plurrule.cpp
','line_number':1,'multiline':True]['text':'status','line_number':62,'multiline':True]['text':'****************************************************************************','line_number':141,'multiline':True]['text':' Create PluralRules cache ','line_number':142,'multiline':True]['text':'unused','line_number':146,'multiline':True]['text':' end plural rules cache ','line_number':163,'multiline':True]['text':'****************************************************************************','line_number':164,'multiline':True]['text':' TODO: which errors, if any, should be returned?','line_number':219,'multiline':False]['text':' Locales with no specific rules (all numbers have the "other" category','line_number':221,'multiline':False]['text':'   will return a U_MISSING_RESOURCE_ERROR at this point. This is not','line_number':222,'multiline':False]['text':'   an error.','line_number':223,'multiline':False]['text':'  TODO: should rule parse errors be returned, or','line_number':229,'multiline':False]['text':'        should we silently use default rules?','line_number':230,'multiline':False]['text':'        Original impl used default rules.','line_number':231,'multiline':False]['text':'        Ask the question to ICU Core.','line_number':232,'multiline':False]['text':' keyword ','line_number':280,'multiline':True]['text':' Not Implemented.','line_number':281,'multiline':False]['text':' keyword ','line_number':286,'multiline':True]['text':' dest ','line_number':286,'multiline':True]['text':' destCapacity ','line_number':287,'multiline':True]['text':'std::string ss;  // TODO: debugging.','line_number':309,'multiline':False]['text':' std::cout << "PluralRules::getSamples(), samples = \"" << samples.toUTF8String(ss) << "\"\n";','line_number':310,'multiline':False]['text':' ss.erase();','line_number':317,'multiline':False]['text':' std::cout << "PluralRules::getSamples(), samplesRange = \"" << sampleRange.toUTF8String(ss) << "\"\n";','line_number':318,'multiline':False]['text':' For ranges of samples with fraction decimal digits, scale the number up so that we','line_number':340,'multiline':False]['text':'   are adding one in the units place. Avoids roundoffs from repetitive adds of tenths.','line_number':341,'multiline':False]['text':' Hack Alert: don't return any decimal samples with integer values that','line_number':351,'multiline':False]['text':'    originated from a format with trailing decimals.','line_number':352,'multiline':False]['text':'    This API is returning doubles, which can't distinguish having displayed','line_number':353,'multiline':False]['text':'    zeros to the right of the decimal.','line_number':354,'multiline':False]['text':'    This results in test failures with values mapping back to a different keyword.','line_number':355,'multiline':False]['text':' Parsers are good for a single use only!','line_number':453,'multiline':False]['text':' range Low','line_number':501,'multiline':False]['text':' range Hi','line_number':502,'multiline':False]['text':' this is for an 'is' rule','line_number':516,'multiline':False]['text':' this is for an 'in' or 'within' rule','line_number':519,'multiline':False]['text':' Range Lower bound > Range Upper bound.','line_number':528,'multiline':False]['text':' U_UNEXPECTED_TOKEN seems a little funny, but it is consistently','line_number':529,'multiline':False]['text':' used for all plural rule parse errors.','line_number':530,'multiline':False]['text':' TODO: rule syntax checking is inadequate, can happen with badly formed rules.','line_number':539,'multiline':False]['text':'       Catch cases like "n mod 10, is 1" here instead.','line_number':540,'multiline':False]['text':' range Low','line_number':547,'multiline':False]['text':' range Hi','line_number':549,'multiline':False]['text':' The new rule chain goes at the end of the linked list of rule chains,','line_number':574,'multiline':False]['text':'   unless there is an "other" keyword & chain. "other" must remain last.','line_number':575,'multiline':False]['text':' Must not occur: The caller should have checked for valid types.','line_number':649,'multiline':False]['text':' Check parent locales.','line_number':662,'multiline':False]['text':' printf("\n PluralRule: %s\n", setKey);','line_number':685,'multiline':False]['text':' Keys are zero, one, few, ...','line_number':699,'multiline':False]['text':' An empty AndConstraint, created by a rule with a keyword but no following expression.','line_number':766,'multiline':False]['text':' pulls n | i | v | f value for the number.','line_number':769,'multiline':False]['text':' Will always be positive.','line_number':770,'multiline':False]['text':' May be non-integer (n option only)','line_number':771,'multiline':False]['text':' empty rule','line_number':782,'multiline':False]['text':'  'is' rule','line_number':783,'multiline':False]['text':' 'in' or 'within' rule','line_number':786,'multiline':False]['text':' Empty Rules.','line_number':937,'multiline':False]['text':' Switch token type from tKeyword if we scanned a reserved word,','line_number':1075,'multiline':False]['text':'   and we are not at the start of a rule, where a','line_number':1076,'multiline':False]['text':'   keyword is expected.','line_number':1077,'multiline':False]['text':' TODO: a comma following a number that is not part of a range will be allowed.','line_number':1155,'multiline':False]['text':'       It's not the only case of this sort of thing. Parser needs a re-write.','line_number':1156,'multiline':False]['text':'
 *  Scan the next token from the input rules.
 *     rules and returned token type are in the parser state variables.
 ','line_number':1170,'multiline':True]['text':' scanned '~'','line_number':1201,'multiline':False]['text':' scanned '@'','line_number':1202,'multiline':False]['text':' scanned '='','line_number':1203,'multiline':False]['text':' scanned '%'','line_number':1204,'multiline':False]['text':' Single character tokens.','line_number':1205,'multiline':False]['text':' scanned '!'','line_number':1209,'multiline':False]['text':' We could be looking at either ".." in a range, or "..." at the end of a sample.','line_number':1235,'multiline':False]['text':' Single dot','line_number':1238,'multiline':False]['text':' double dot','line_number':1243,'multiline':False]['text':' triple dot','line_number':1247,'multiline':False]['text':'  Set token type for reserved words in the Plural Rule syntax.','line_number':1298,'multiline':False]['text':'status','line_number':1373,'multiline':True]['text':'status','line_number':1378,'multiline':True]['text':' check values. TODO make into unit test.','line_number':1396,'multiline':False]['text':'            ','line_number':1397,'multiline':False]['text':'            long visiblePower = (int) Math.pow(10, v);','line_number':1398,'multiline':False]['text':'            if (decimalDigits > visiblePower) {','line_number':1399,'multiline':False]['text':'                throw new IllegalArgumentException();','line_number':1400,'multiline':False]['text':'            }','line_number':1401,'multiline':False]['text':'            double fraction = intValue + (decimalDigits / (double) visiblePower);','line_number':1402,'multiline':False]['text':'            if (fraction != source) {','line_number':1403,'multiline':False]['text':'                double diff = Math.abs(fraction - source)/(Math.abs(fraction) + Math.abs(source));','line_number':1404,'multiline':False]['text':'                if (diff > 0.00000001d) {','line_number':1405,'multiline':False]['text':'                    throw new IllegalArgumentException();','line_number':1406,'multiline':False]['text':'                }','line_number':1407,'multiline':False]['text':'            }','line_number':1408,'multiline':False]['text':' Ugly, but for samples we don't care.','line_number':1412,'multiline':False]['text':' Create a FixedDecimal from a UnicodeString containing a number.','line_number':1425,'multiline':False]['text':'    Inefficient, but only used for samples, so simplicity trumps efficiency.','line_number':1426,'multiline':False]['text':'  Fast path only exact initialization. Return true if successful.','line_number':1494,'multiline':False]['text':'     Note: Do not multiply by 10 each time through loop, rounding cruft can build','line_number':1495,'multiline':False]['text':'           up that makes the check for an integer result fail.','line_number':1496,'multiline':False]['text':'           A single multiply of the original number works more reliably.','line_number':1497,'multiline':False]['text':' Count the number of decimal digits in the fraction part of the number, excluding trailing zeros.','line_number':1519,'multiline':False]['text':' fastpath the common cases, integers or fractions with 3 or fewer digits','line_number':1520,'multiline':False]['text':' Slow path, convert with sprintf, parse converted output.','line_number':1529,'multiline':False]['text':' formatted number looks like this: 1.234567890123457e-01','line_number':1532,'multiline':False]['text':' Fraction part of fixed point representation.','line_number':1541,'multiline':False]['text':' Get the fraction digits of a double, represented as an integer.','line_number':1546,'multiline':False]['text':'    v is the number of visible fraction digits in the displayed form of the number.','line_number':1547,'multiline':False]['text':'       Example: n = 1001.234, v = 6, result = 234000','line_number':1548,'multiline':False]['text':'    TODO: need to think through how this is used in the plural rule context.','line_number':1549,'multiline':False]['text':'          This function can easily encounter integer overflow, ','line_number':1550,'multiline':False]['text':'          and can easily return noise digits when the precision of a double is exceeded.','line_number':1551,'multiline':False]['text':' Do not let the decimalDigits value overflow if there are many trailing zeros.','line_number':1578,'multiline':False]['text':' Limit the value to 18 digits, the most that a 64 bit int can fully represent.','line_number':1579,'multiline':False]['text':' unexpected.','line_number':1598,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1676,'multiline':True]['text':'eof','line_number':1678,'multiline':False]