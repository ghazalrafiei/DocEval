['text':'
*******************************************************************************
*
*   Copyright (C) 2001-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  ustrcase.cpp
*   encoding:   US-ASCII
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002feb20
*   created by: Markus W. Scherer
*
*   Implementation file for string casing C API functions.
*   Uses functions from uchar.c for basic functionality that requires access
*   to the Unicode Character Database (uprops.dat).
','line_number':1,'multiline':True]['text':' string casing ------------------------------------------------------------ ','line_number':35,'multiline':True]['text':' Appends a full case mapping result, see UCASE_MAX_STRING_LENGTH. ','line_number':37,'multiline':True]['text':' decode the result ','line_number':44,'multiline':True]['text':' (not) original code point ','line_number':46,'multiline':True]['text':' append the result ','line_number':58,'multiline':True]['text':' code point ','line_number':60,'multiline':True]['text':' overflow, nothing written ','line_number':64,'multiline':True]['text':' string ','line_number':68,'multiline':True]['text':' overflow ','line_number':75,'multiline':True]['text':' preflight ','line_number':80,'multiline':True]['text':' reset for backward iteration ','line_number':96,'multiline':True]['text':' reset for forward iteration ','line_number':100,'multiline':True]['text':' continue current iteration direction ','line_number':104,'multiline':True]['text':'
 * Case-maps [srcStart..srcLimit[ but takes
 * context [0..srcLength[ into account.
 ','line_number':122,'multiline':True]['text':' case mapping loop ','line_number':139,'multiline':True]['text':' fast path version of appendResult() for BMP results ','line_number':148,'multiline':True]['text':' Use the C++ abstract base class to minimize dependencies.','line_number':177,'multiline':False]['text':' TODO: Change UCaseMap.iter to store a BreakIterator directly.','line_number':178,'multiline':False]['text':' set up local variables ','line_number':181,'multiline':True]['text':' titlecasing loop ','line_number':190,'multiline':True]['text':' find next index where to titlecase ','line_number':192,'multiline':True]['text':'
         * Unicode 4 & 5 section 3.13 Default Case Operations:
         *
         * R3  toTitlecase(X): Find the word boundaries based on Unicode Standard Annex
         * #29, "Text Boundaries." Between each pair of word boundaries, find the first
         * cased character F. If F exists, map F to default_title(F); then map each
         * subsequent character C to default_lower(C).
         *
         * In this implementation, segment [prev..index[ into 3 parts:
         * a) uncased characters (copy as-is) [prev..titleStart[
         * b) first case letter (titlecase)         [titleStart..titleLimit[
         * c) subsequent characters (lowercase)                 [titleLimit..index[
         ','line_number':203,'multiline':True]['text':' find and copy uncased characters [prev..titleStart[ ','line_number':217,'multiline':True]['text':' Adjust the titlecasing index (titleStart) to the next cased character. ','line_number':221,'multiline':True]['text':'
                         * only uncased characters in [prev..index[
                         * stop with titleStart==titleLimit==index
                         ','line_number':225,'multiline':True]['text':' cased letter at [titleStart..titleLimit[ ','line_number':233,'multiline':True]['text':' titlecase c which is from [titleStart..titleLimit[ ','line_number':246,'multiline':True]['text':' Special case Dutch IJ titlecasing ','line_number':252,'multiline':True]['text':' lowercase [titleLimit..index[ ','line_number':262,'multiline':True]['text':' Normal operation: Lowercase the rest of the word. ','line_number':265,'multiline':True]['text':' Optionally just copy the rest of the word unchanged. ','line_number':274,'multiline':True]['text':' !UCONFIG_NO_BREAK_ITERATION','line_number':294,'multiline':False]['text':' functions available in the common library (for unistr_case.cpp) ','line_number':296,'multiline':True]['text':' case mapping loop ','line_number':339,'multiline':True]['text':' fast path version of appendResult() for BMP results ','line_number':345,'multiline':True]['text':' check argument values ','line_number':377,'multiline':True]['text':' get the string length ','line_number':390,'multiline':True]['text':' check for overlapping source and destination ','line_number':395,'multiline':True]['text':' overlap: provide a temporary destination buffer and later copy the result ','line_number':400,'multiline':True]['text':' the stack buffer is large enough ','line_number':402,'multiline':True]['text':' allocate a buffer ','line_number':405,'multiline':True]['text':' copy the result string to the destination buffer ','line_number':418,'multiline':True]['text':' public API functions ','line_number':433,'multiline':True]['text':' case-insensitive string comparisons -------------------------------------- ','line_number':450,'multiline':True]['text':'
 * This function is a copy of unorm_cmpEquivFold() minus the parts for
 * canonical equivalence.
 * Keep the functions in sync, and see there for how this works.
 * The duplication is for modularization:
 * It makes caseless (but not canonical caseless) matches independent of
 * the normalization code.
 ','line_number':452,'multiline':True]['text':' stack element for previous-level source/decomposition pointers ','line_number':461,'multiline':True]['text':'*
 * Internal implementation code comparing string with case fold.
 * This function is called from u_strcmpFold() and u_caseInsensitivePrefixMatch().
 *
 * @param s1            input string 1
 * @param length1       length of string 1, or -1 (NULL terminated)
 * @param s2            input string 2
 * @param length2       length of string 2, or -1 (NULL terminated)
 * @param options       compare options
 * @param matchLen1     (output) length of partial prefix match in s1
 * @param matchLen2     (output) length of partial prefix match in s2
 * @param pErrorCode    receives error status
 * @return The result of comparison
 ','line_number':467,'multiline':True]['text':' current-level start/limit - s1/s2 as current ','line_number':491,'multiline':True]['text':' points to the original start address ','line_number':494,'multiline':True]['text':' points to the end of match + 1 ','line_number':497,'multiline':True]['text':' case folding variables ','line_number':500,'multiline':True]['text':' stacks of previous-level start/current/limit ','line_number':504,'multiline':True]['text':' case folding buffers, only use current-level start/limit ','line_number':507,'multiline':True]['text':' track which is the current level per string ','line_number':510,'multiline':True]['text':' current code units, and code points for lookups ','line_number':513,'multiline':True]['text':' no argument error checking because this itself is not an API ','line_number':516,'multiline':True]['text':'
     * assume that at least the option U_COMPARE_IGNORE_CASE is set
     * otherwise this function would have to behave exactly as uprv_strCompare()
     ','line_number':518,'multiline':True]['text':' initialize ','line_number':527,'multiline':True]['text':' comparison loop ','line_number':551,'multiline':True]['text':'
         * here a code unit value of -1 means "get another code unit"
         * below it will mean "this source is finished"
         ','line_number':553,'multiline':True]['text':' get next code unit from string 1, post-increment ','line_number':559,'multiline':True]['text':' reached end of level buffer, pop one level ','line_number':571,'multiline':True]['text':'Not uninitialized','line_number':574,'multiline':True]['text':'Not uninitialized','line_number':576,'multiline':True]['text':'Not uninitialized','line_number':577,'multiline':True]['text':' get next code unit from string 2, post-increment ','line_number':582,'multiline':True]['text':' reached end of level buffer, pop one level ','line_number':594,'multiline':True]['text':'Not uninitialized','line_number':597,'multiline':True]['text':'Not uninitialized','line_number':599,'multiline':True]['text':'Not uninitialized','line_number':600,'multiline':True]['text':'
         * compare c1 and c2
         * either variable c1, c2 is -1 only if the corresponding string is finished
         ','line_number':604,'multiline':True]['text':' c1==c2==-1 indicating end of strings ','line_number':612,'multiline':True]['text':'
             * Note: Move the match positions in both strings at the same time
             *      only when corresponding code point(s) in the original strings
             *      are fully consumed. For example, when comparing s1="Fust" and
             *      s2="Fu\u00dfball", s2[2] is folded into "ss", and s1[2] matches
             *      the first code point in the case-folded data. But the second "s"
             *      has no matching code point in s1, so this implementation returns
             *      2 as the prefix match length ("Fu").
             ','line_number':616,'multiline':True]['text':' Note: This implementation only use a single level of stack.
                 *      If this code needs to be changed to use multiple levels
                 *      of stacks, the code above should check if the current
                 *      code is at the end of all stacks.
                 ','line_number':629,'multiline':True]['text':' is s1 at the end of the current stack? ','line_number':636,'multiline':True]['text':' is s2 at the end of the current stack? ','line_number':646,'multiline':True]['text':' make us fetch new code units ','line_number':654,'multiline':True]['text':' string 1 ends before string 2 ','line_number':657,'multiline':True]['text':' string 2 ends before string 1 ','line_number':660,'multiline':True]['text':' c1!=c2 && c1>=0 && c2>=0 ','line_number':663,'multiline':True]['text':' get complete code points for c1, c2 for lookups if either is a surrogate ','line_number':665,'multiline':True]['text':' advance ++s1; only below if cp1 decomposes/case-folds ','line_number':672,'multiline':True]['text':' isTrail(c1) ','line_number':675,'multiline':True]['text':' advance ++s2; only below if cp2 decomposes/case-folds ','line_number':688,'multiline':True]['text':' isTrail(c2) ','line_number':691,'multiline':True]['text':'
         * go down one level for each string
         * continue with the main loop as soon as there is a real change
         ','line_number':698,'multiline':True]['text':' cp1 case-folds to the code point "length" or to p[length] ','line_number':706,'multiline':True]['text':' advance beyond source surrogate pair if it case-folds ','line_number':709,'multiline':True]['text':' isTrail(c1) ','line_number':711,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':712,'multiline':True]['text':' push current level pointers ','line_number':725,'multiline':True]['text':' copy the folding result to fold1[] ','line_number':731,'multiline':True]['text':' set next level pointers to case folding ','line_number':740,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':744,'multiline':True]['text':' cp2 case-folds to the code point "length" or to p[length] ','line_number':752,'multiline':True]['text':' advance beyond source surrogate pair if it case-folds ','line_number':755,'multiline':True]['text':' isTrail(c2) ','line_number':757,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':758,'multiline':True]['text':' push current level pointers ','line_number':771,'multiline':True]['text':' copy the folding result to fold2[] ','line_number':777,'multiline':True]['text':' set next level pointers to case folding ','line_number':786,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':790,'multiline':True]['text':'
         * no decomposition/case folding, max level for both sides:
         * return difference result
         *
         * code point order comparison must not just return cp1-cp2
         * because when single surrogates are present then the surrogate pairs
         * that formed cp1 and cp2 may be from different string indexes
         *
         * example: { d800 d800 dc01 } vs. { d800 dc00 }, compare at second code units
         * c1=d800 cp1=10001 c2=dc00 cp2=10000
         * cp1-cp2>0 but c1-c2<0 and in fact in UTF-32 it is { d800 10001 } < { 10000 }
         *
         * therefore, use same fix-up as in ustring.c/uprv_strCompare()
         * except: uprv_strCompare() fetches c=*s while this functions fetches c=*s++
         * so we have slightly different pointer/start/limit comparisons here
         ','line_number':795,'multiline':True]['text':' subtract 0x2800 from BMP code points to make them smaller than supplementary ones ','line_number':813,'multiline':True]['text':' part of a surrogate pair, leave >=d800 ','line_number':818,'multiline':True]['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':820,'multiline':True]['text':' part of a surrogate pair, leave >=d800 ','line_number':828,'multiline':True]['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':830,'multiline':True]['text':' internal function ','line_number':846,'multiline':True]['text':' public API functions ','line_number':855,'multiline':True]['text':' argument checking ','line_number':862,'multiline':True]['text':' internal API - detect length of shared prefix ','line_number':899,'multiline':True]