['text':'
******************************************************************************
*
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File DIGITLST.H
*
* Modification History:
*
*   Date        Name        Description
*   02/25/97    aliu        Converted from java.
*   03/21/97    clhuang     Updated per C++ implementation.
*   04/15/97    aliu        Changed MAX_COUNT to DBL_DIG.  Changed Digit to char.
*   09/09/97    aliu        Adapted for exponential notation support.
*   08/02/98    stephen     Added nearest/even rounding
*   06/29/99    stephen     Made LONG_DIGITS a macro to satisfy SUN compiler
*   07/09/99    stephen     Removed kMaxCount (unused, for HP compiler)
******************************************************************************
','line_number':1,'multiline':True]['text':' Decimal digits in a 64-bit int','line_number':36,'multiline':False]['text':' Initial storage size, will grow as needed.','line_number':45,'multiline':False]['text':' "+." + fDigits + "e" + fDecimalAt','line_number':47,'multiline':False]['text':' Export an explicit template instantiation of the MaybeStackHeaderAndArray that','line_number':56,'multiline':False]['text':'    is used as a data member of DigitList.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':'    MSVC requires this, even though it should not be necessary. ','line_number':59,'multiline':False]['text':'    No direct access to the MaybeStackHeaderAndArray leaks out of the i18n library.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'    Macintosh produces duplicate definition linker errors with the explicit template','line_number':62,'multiline':False]['text':'    instantiation.','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':'*
 * Digit List is actually a Decimal Floating Point number.
 * The original implementation has been replaced by a thin wrapper onto a 
 * decimal number from the decNumber library.
 *
 * The original DigitList API has been retained, to minimize the impact of
 * the change on the rest of the ICU formatting code.
 *
 * The change to decNumber enables support for big decimal numbers, and
 * allows rounding computations to be done directly in decimal, avoiding
 * extra, and inaccurate, conversions to and from doubles.
 *
 * Original DigitList comments:
 *
 * Digit List utility class. Private to DecimalFormat.  Handles the transcoding
 * between numeric values and strings of characters.  Only handles
 * non-negative numbers.  The division of labor between DigitList and
 * DecimalFormat is that DigitList handles the radix 10 representation
 * issues; DecimalFormat handles the locale-specific issues such as
 * positive/negative, grouping, decimal point, currency, and so on.
 * <P>
 * A DigitList is really a representation of a floating point value.
 * It may be an integer value; we assume that a double has sufficient
 * precision to represent all digits of a long.
 * <P>
 * The DigitList representation consists of a string of characters,
 * which are the digits radix 10, from '0' to '9'.  It also has a radix
 * 10 exponent associated with it.  The value represented by a DigitList
 * object can be computed by mulitplying the fraction f, where 0 <= f < 1,
 * derived by placing all the digits of the list to the right of the
 * decimal point, by 10^exponent.
 *
 * --------
 *
 * DigitList vs. decimalNumber:
 *
 *    DigitList stores digits with the most significant first.
 *    decNumber stores digits with the least significant first.
 *
 *    DigitList, decimal point is before the most significant.
 *    decNumber, decimal point is after the least signficant digit.
 *
 *       digitList:    0.ddddd * 10 ^ exp
 *       decNumber:    ddddd. * 10 ^ exp
 *
 *       digitList exponent = decNumber exponent + digit count
 *
 *    digitList, digits are platform invariant chars, '0' - '9'
 *    decNumber, digits are binary, one per byte, 0 - 9.
 *
 *       (decNumber library is configurable in how digits are stored, ICU has configured
 *        it this way for convenience in replacing the old DigitList implementation.)
 ','line_number':74,'multiline':True]['text':' Declare external to make compiler happy','line_number':127,'multiline':False]['text':' copy constructor
     * @param DigitList The object to be copied.
     * @return the newly created object. 
     ','line_number':133,'multiline':True]['text':' copy constructor','line_number':137,'multiline':False]['text':' assignment operator
     * @param DigitList The object to be copied.
     * @return the newly created object.
     ','line_number':139,'multiline':True]['text':' assignment operator','line_number':143,'multiline':False]['text':'*
     * Return true if another object is semantically equal to this one.
     * @param other The DigitList to be compared for equality
     * @return true if another object is semantically equal to this one.
     * return false otherwise.
     ','line_number':145,'multiline':True]['text':'*
     * Clears out the digits.
     * Use before appending them.
     * Typically, you set a series of digits with append, then at the point
     * you hit the decimal point, you set myDigitList.fDecimalAt = myDigitList.fCount;
     * then go on appending digits.
     ','line_number':158,'multiline':True]['text':'*
     *  Remove, by rounding, any fractional part of the decimal number,
     *  leaving an integer value.
     ','line_number':167,'multiline':True]['text':'*
     * Appends digits to the list. 
     *    CAUTION:  this function is not recommended for new code.
     *              In the original DigitList implementation, decimal numbers were
     *              parsed by appending them to a digit list as they were encountered.
     *              With the revamped DigitList based on decNumber, append is very
     *              inefficient, and the interaction with the exponent value is confusing.
     *              Best avoided.
     *              TODO:  remove this function once all use has been replaced.
     *              TODO:  describe alternative to append()
     * @param digit The digit to be appended.
     ','line_number':173,'multiline':True]['text':'*
     * Utility routine to get the value of the digit list
     * Returns 0.0 if zero length.
     * @return the value of the digit list.
     ','line_number':187,'multiline':True]['text':'*
     * Utility routine to get the value of the digit list
     * Make sure that fitsIntoLong() is called before calling this function.
     * Returns 0 if zero length.
     * @return the value of the digit list, return 0 if it is zero length
     ','line_number':194,'multiline':True]['text':'const','line_number':200,'multiline':True]['text':'*
     * Utility routine to get the value of the digit list
     * Make sure that fitsIntoInt64() is called before calling this function.
     * Returns 0 if zero length.
     * @return the value of the digit list, return 0 if it is zero length
     ','line_number':202,'multiline':True]['text':'const','line_number':208,'multiline':True]['text':'*
     *  Utility routine to get the value of the digit list as a decimal string.
     ','line_number':210,'multiline':True]['text':'*
     * Return true if the number represented by this object can fit into
     * a long.
     * @param ignoreNegativeZero True if negative zero is ignored.
     * @return true if the number represented by this object can fit into
     * a long, return false otherwise.
     ','line_number':215,'multiline':True]['text':'const','line_number':222,'multiline':True]['text':'*
     * Return true if the number represented by this object can fit into
     * an int64_t.
     * @param ignoreNegativeZero True if negative zero is ignored.
     * @return true if the number represented by this object can fit into
     * a long, return false otherwise.
     ','line_number':224,'multiline':True]['text':'const','line_number':231,'multiline':True]['text':'*
     * Utility routine to set the value of the digit list from a double.
     * @param source The value to be set
     ','line_number':233,'multiline':True]['text':'*
     * Utility routine to set the value of the digit list from a long.
     * If a non-zero maximumDigits is specified, no more than that number of
     * significant digits will be produced.
     * @param source The value to be set
     ','line_number':239,'multiline':True]['text':'*
     * Utility routine to set the value of the digit list from an int64.
     * If a non-zero maximumDigits is specified, no more than that number of
     * significant digits will be produced.
     * @param source The value to be set
     ','line_number':247,'multiline':True]['text':'*
     * Utility routine to set the value of the digit list from an int64.
     * Does not set the decnumber unless requested later
     * If a non-zero maximumDigits is specified, no more than that number of
     * significant digits will be produced.
     * @param source The value to be set
     ','line_number':255,'multiline':True]['text':'*
     * Utility routine to set the value of the digit list from a decimal number
     * string.
     * @param source The value to be set.  The string must be nul-terminated.
     * @param fastpathBits special flags for fast parsing
     ','line_number':264,'multiline':True]['text':'*
     * Multiply    this = this * arg
     *    This digitlist will be expanded if necessary to accomodate the result.
     *  @param arg  the number to multiply by.
     ','line_number':272,'multiline':True]['text':'*
     *   Divide    this = this / arg
     ','line_number':279,'multiline':True]['text':'  The following functions replace direct access to the original DigitList implmentation','line_number':284,'multiline':False]['text':'  data structures.','line_number':285,'multiline':False]['text':'* Test a number for zero.
     * @return  TRUE if the number is zero
     ','line_number':289,'multiline':True]['text':'* Test for a Nan
     * @return  TRUE if the number is a NaN
     ','line_number':294,'multiline':True]['text':'*  Reduce, or normalize.  Removes trailing zeroes, adjusts exponent appropriately. ','line_number':301,'multiline':True]['text':'*  Remove trailing fraction zeros, adjust exponent accordingly. ','line_number':304,'multiline':True]['text':'* Set to zero ','line_number':307,'multiline':True]['text':'* get the number of digits in the decimal number ','line_number':310,'multiline':True]['text':'*
     * Round the number to the given number of digits.
     * @param maximumDigits The maximum number of digits to be shown.
     * Upon return, count will be less than or equal to maximumDigits.
     * result is guaranteed to be trimmed. 
     ','line_number':313,'multiline':True]['text':'* Ensure capacity for digits.  Grow the storage if it is currently less than
     *      the requested size.   Capacity is not reduced if it is already greater
     *      than requested.
     ','line_number':323,'multiline':True]['text':'*
     * Set the digit in platform (invariant) format, from '0'..'9'
     * @param i index of digit
     * @param v digit value, from '0' to '9' in platform invariant format
     ','line_number':338,'multiline':True]['text':'*
     * Get the digit in platform (invariant) format, from '0'..'9' inclusive
     * @param i index of digit
     * @return invariant format of the digit
     ','line_number':345,'multiline':True]['text':'*
     * Get the digit's value, as an integer from 0..9 inclusive.
     * Note that internally this value is a decNumberUnit, but ICU configures it to be a uint8_t.
     * @param i index of digit
     * @return value of that digit
     ','line_number':353,'multiline':True]['text':'*
     * Gets the upper bound exponent for this value. For 987, returns 3
     * because 10^3 is the smallest power of 10 that is just greater than
     * 987.
     ','line_number':361,'multiline':True]['text':'*
     * Gets the lower bound exponent for this value. For 98.7, returns -1
     * because the right most digit, is the 10^-1 place.
     ','line_number':368,'multiline':True]['text':'*
     * Sets result to the smallest DigitInterval needed to display this
     * DigitList in fixed point form and returns result.
     ','line_number':374,'multiline':True]['text':'*
     * Like getDigitValue, but the digit is identified by exponent.
     * For example, getDigitByExponent(7) returns the 10^7 place of this
     * DigitList. Unlike getDigitValue, there are no upper or lower bounds
     * for passed parameter. Instead, getDigitByExponent returns 0 if
     * the exponent falls outside the interval for this DigitList.
     ','line_number':380,'multiline':True]['text':'*
     * Appends the digits in this object to a CharString.
     * 3 is appended as (char) 3, not '3'
     ','line_number':389,'multiline':True]['text':'*
     * Equivalent to roundFixedPoint(-digitExponent) except unlike
     * roundFixedPoint, this works for any digitExponent value.
     * If maxSigDigits is set then this instance is rounded to have no more
     * than maxSigDigits. The end result is guaranteed to be trimmed.
     ','line_number':395,'multiline':True]['text':'*
     * Quantizes according to some amount and rounds according to the
     * context of this instance. Quantizing 3.233 with 0.05 gives 3.25.
     ','line_number':403,'multiline':True]['text':'*
     * Like toScientific but only returns the exponent
     * leaving this instance unchanged.
     ','line_number':409,'multiline':True]['text':'*
     * Converts this instance to scientific notation. This instance
     * becomes the mantissa and the exponent is returned.
     * @param minIntDigitCount minimum integer digits in mantissa
     *   Exponent is set so that the actual number of integer digits
     *   in mantissa is as close to the minimum as possible.
     * @param exponentMultiplier The exponent is always a multiple of
     *  This number. Usually 1, but set to 3 for engineering notation.
     * @return exponent
     ','line_number':416,'multiline':True]['text':'*
     * Shifts decimal to the right.
     ','line_number':429,'multiline':True]['text':'
     * These data members are intentionally public and can be set directly.
     *<P>
     * The value represented is given by placing the decimal point before
     * fDigits[fDecimalAt].  If fDecimalAt is < 0, then leading zeros between
     * the decimal point and the first nonzero digit are implied.  If fDecimalAt
     * is > fCount, then trailing zeros between the fDigits[fCount-1] and the
     * decimal point are implied.
     * <P>
     * Equivalently, the represented value is given by f * 10^fDecimalAt.  Here
     * f is a value 0.1 <= f < 1 arrived at by placing the digits in fDigits to
     * the right of the decimal.
     * <P>
     * DigitList is normalized, so if it is non-zero, fDigits[0] is non-zero.  We
     * don't allow denormalized numbers because our exponent is effectively of
     * unlimited magnitude.  The fCount value contains the number of significant
     * digits present in fDigits[].
     * <P>
     * Zero is represented by any DigitList with fCount == 0 or with each fDigits[i]
     * for all i <= fCount == '0'.
     *
     * int32_t                         fDecimalAt;
     * int32_t                         fCount;
     * UBool                           fIsPositive;
     * char                            *fDigits;
     * DecimalFormat::ERoundingMode    fRoundingMode;
     ','line_number':435,'multiline':True]['text':' public access to status flags.  ','line_number':464,'multiline':False]['text':' Cached double value corresponding to this decimal number.
     * This is an optimization for the formatting implementation, which may
     * ask for the double value multiple times.
     ','line_number':470,'multiline':True]['text':'*
     * Placement new for stack usage
     * @internal
     ','line_number':498,'multiline':True]['text':'size','line_number':502,'multiline':True]['text':'mode','line_number':502,'multiline':True]['text':'*
     * Placement delete for stack usage
     * @internal
     ','line_number':504,'multiline':True]['text':'ptr','line_number':508,'multiline':True]['text':'onStack','line_number':508,'multiline':True]['text':'mode','line_number':508,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING','line_number':523,'multiline':False]['text':' _DIGITLST','line_number':524,'multiline':False]['text':'eof','line_number':526,'multiline':False]