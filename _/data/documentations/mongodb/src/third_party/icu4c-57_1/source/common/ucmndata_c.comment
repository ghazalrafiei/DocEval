['text':'
******************************************************************************
*
*   Copyright (C) 1999-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*****************************************************************************','line_number':1,'multiline':True]['text':'------------------------------------------------------------------------------
 *
 *   UCommonData   An abstract interface for dealing with ICU Common Data Files.
 *                 ICU Common Data Files are a grouping of a number of individual
 *                 data items (resources, converters, tables, anything) into a
 *                 single file or dll.  The combined format includes a table of
 *                 contents for locating the individual items by name.
 *
 *                 Two formats for the table of contents are supported, which is
 *                 why there is an abstract inteface involved.
 *
 ','line_number':10,'multiline':True]['text':' same endianness ','line_number':38,'multiline':True]['text':' opposite endianness ','line_number':41,'multiline':True]['text':' same endianness ','line_number':52,'multiline':True]['text':' opposite endianness ','line_number':55,'multiline':True]['text':'-----------------------------------------------------------------------------*
 *                                                                             *
 *  Pointer TOCs.   TODO: This form of table-of-contents should be removed     *
 *                  because DLLs must be relocated on loading to correct the   *
 *                  pointer values and this operation makes shared memory      *
 *                  mapping of the data much less likely to work.              *
 *                                                                             *
 *-----------------------------------------------------------------------------','line_number':61,'multiline':True]['text':' Actual size is from count. ','line_number':78,'multiline':True]['text':' definition of OffsetTOC struct types moved to ucmndata.h ','line_number':82,'multiline':True]['text':'-----------------------------------------------------------------------------*
 *                                                                             *
 *    entry point lookup implementations                                       *
 *                                                                             *
 *-----------------------------------------------------------------------------','line_number':84,'multiline':True]['text':'*
 * Compare strings where we know the shared prefix length,
 * and advance the prefix length as we find that the strings share even more characters.
 ','line_number':94,'multiline':True]['text':' different or done ','line_number':108,'multiline':True]['text':' increment shared same-prefix length ','line_number':111,'multiline':True]['text':'
     * Remember the shared prefix between s, start and limit,
     * and don't compare that shared prefix again.
     * The shared prefix should get longer as we narrow the [start, limit[ range.
     ','line_number':122,'multiline':True]['text':'
     * Prime the prefix lengths so that we don't keep prefixLength at 0 until
     * both the start and limit indexes have moved.
     * At the same time, we find if s is one of the start and (limit-1) names,
     * and if not, exclude them from the actual binary search.
     ','line_number':132,'multiline':True]['text':'
     * Remember the shared prefix between s, start and limit,
     * and don't compare that shared prefix again.
     * The shared prefix should get longer as we narrow the [start, limit[ range.
     ','line_number':167,'multiline':True]['text':'
     * Prime the prefix lengths so that we don't keep prefixLength at 0 until
     * both the start and limit indexes have moved.
     * At the same time, we find if s is one of the start and (limit-1) names,
     * and if not, exclude them from the actual binary search.
     ','line_number':177,'multiline':True]['text':' perform a binary search for the data in the common data's table of contents ','line_number':227,'multiline':True]['text':' list the contents of the TOC each time .. not recommended ','line_number':229,'multiline':True]['text':' found it ','line_number':236,'multiline':True]['text':' list the contents of the TOC each time .. not recommended ','line_number':278,'multiline':True]['text':' found it ','line_number':285,'multiline':True]['text':'----------------------------------------------------------------------*
 *                                                                      *
 *  checkCommonData   Validate the format of a common data file.        *
 *                    Fill in the virtual function ptr based on TOC type *
 *                    If the data is invalid, close the UDataMemory     *
 *                    and set the appropriate error code.               *
 *                                                                      *
 *----------------------------------------------------------------------','line_number':307,'multiline':True]['text':' header not valid ','line_number':327,'multiline':True]['text':' dataFormat="CmnD" ','line_number':336,'multiline':True]['text':' dataFormat="ToCP" ','line_number':346,'multiline':True]['text':' dataFormat not recognized ','line_number':351,'multiline':True]['text':' If the data is no good and we memory-mapped it ourselves,
         *  close the memory mapping so it doesn't leak.  Note that this has
         *  no effect on non-memory mapped data, other than clearing fields in udm.
         ','line_number':356,'multiline':True]['text':'
 * TODO: Add a udata_swapPackageHeader() function that swaps an ICU .dat package
 * header but not its sub-items.
 * This function will be needed for automatic runtime swapping.
 * Sub-items should not be swapped to limit the swapping to the parts of the
 * package that are actually used.
 *
 * Since lengths of items are implicit in the order and offsets of their
 * ToC entries, and since offsets are relative to the start of the ToC,
 * a swapped version may need to generate a different data structure
 * with pointers to the original data items and with their lengths
 * (-1 for the last one if it is not known), and maybe even pointers to the
 * swapped versions of the items.
 * These pointers to swapped versions would establish a cache;
 * instead, each open data item could simply own the storage for its swapped
 * data. This fits better with the current design.
 *
 * markus 2003sep18 Jitterbug 2235
 ','line_number':364,'multiline':True]