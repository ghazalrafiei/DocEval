['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' An S2LatLngRect represents a closed latitude-longitude rectangle.  It is','line_number':20,'multiline':False]['text':' capable of representing the empty and full rectangles as well as','line_number':21,'multiline':False]['text':' single points.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' This class is intended to be copied by value as desired.  It uses','line_number':24,'multiline':False]['text':' the default copy constructor and assignment operator, however it is','line_number':25,'multiline':False]['text':' not a "plain old datatype" (POD) because it has virtual functions.','line_number':26,'multiline':False]['text':' Construct a rectangle from minimum and maximum latitudes and longitudes.','line_number':29,'multiline':False]['text':' If lo.lng() > hi.lng(), the rectangle spans the 180 degree longitude','line_number':30,'multiline':False]['text':' line. Both points must be normalized, with lo.lat() <= hi.lat().','line_number':31,'multiline':False]['text':' The rectangle contains all the points p such that 'lo' <= p <= 'hi',','line_number':32,'multiline':False]['text':' where '<=' is defined in the obvious way.','line_number':33,'multiline':False]['text':' Construct a rectangle from latitude and longitude intervals.  The two','line_number':36,'multiline':False]['text':' intervals must either be both empty or both non-empty, and the latitude','line_number':37,'multiline':False]['text':' interval must not extend outside [-90, +90] degrees.','line_number':38,'multiline':False]['text':' Note that both intervals (and hence the rectangle) are closed.','line_number':39,'multiline':False]['text':' The default constructor creates an empty S2LatLngRect.','line_number':42,'multiline':False]['text':' Construct a rectangle of the given size centered around the given point.','line_number':45,'multiline':False]['text':' "center" needs to be normalized, but "size" does not.  The latitude','line_number':46,'multiline':False]['text':' interval of the result is clamped to [-90,90] degrees, and the longitude','line_number':47,'multiline':False]['text':' interval of the result is Full() if and only if the longitude size is','line_number':48,'multiline':False]['text':' 360 degrees or more.  Examples of clamping (in degrees):','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':'   center=(80,170),  size=(40,60)   -> lat=[60,90],   lng=[140,-160]','line_number':51,'multiline':False]['text':'   center=(10,40),   size=(210,400) -> lat=[-90,90],  lng=[-180,180]','line_number':52,'multiline':False]['text':'   center=(-90,180), size=(20,50)   -> lat=[-90,-80], lng=[155,-155]','line_number':53,'multiline':False]['text':' Construct a rectangle containing a single (normalized) point.','line_number':57,'multiline':False]['text':' Construct the minimal bounding rectangle containing the two given','line_number':60,'multiline':False]['text':' normalized points.  This is equivalent to starting with an empty','line_number':61,'multiline':False]['text':' rectangle and calling AddPoint() twice.  Note that it is different than','line_number':62,'multiline':False]['text':' the S2LatLngRect(lo, hi) constructor, where the first point is always','line_number':63,'multiline':False]['text':' used as the lower-left corner of the resulting rectangle.','line_number':64,'multiline':False]['text':' Accessor methods.','line_number':67,'multiline':False]['text':' The canonical empty and full rectangles.','line_number':79,'multiline':False]['text':' The full allowable range of latitudes and longitudes.','line_number':83,'multiline':False]['text':' Return true if the rectangle is valid, which essentially just means','line_number':87,'multiline':False]['text':' that the latitude bounds do not exceed Pi/2 in absolute value and','line_number':88,'multiline':False]['text':' the longitude bounds do not exceed Pi in absolute value.  Also, if','line_number':89,'multiline':False]['text':' either the latitude or longitude bound is empty then both must be.','line_number':90,'multiline':False]['text':' Return true if the rectangle is empty, i.e. it contains no points at all.','line_number':93,'multiline':False]['text':' Return true if the rectangle is full, i.e. it contains all points.','line_number':96,'multiline':False]['text':' Return true if the rectangle is a point, i.e. lo() == hi()','line_number':99,'multiline':False]['text':' Return true if lng_.lo() > lng_.hi(), i.e. the rectangle crosses','line_number':102,'multiline':False]['text':' the 180 degree longitude line.','line_number':103,'multiline':False]['text':' Return the k-th vertex of the rectangle (k = 0,1,2,3) in CCW order.','line_number':106,'multiline':False]['text':' Return the center of the rectangle in latitude-longitude space','line_number':109,'multiline':False]['text':' (in general this is not the center of the region on the sphere).','line_number':110,'multiline':False]['text':' Return the width and height of this rectangle in latitude-longitude','line_number':113,'multiline':False]['text':' space.  Empty rectangles have a negative width and height.','line_number':114,'multiline':False]['text':' Returns the surface area of this rectangle on the unit sphere.','line_number':117,'multiline':False]['text':' More efficient version of Contains() that accepts a S2LatLng rather than','line_number':120,'multiline':False]['text':' an S2Point.  The argument must be normalized.','line_number':121,'multiline':False]['text':' Return true if and only if the given point is contained in the interior','line_number':124,'multiline':False]['text':' of the region (i.e. the region excluding its boundary).  The point 'p'','line_number':125,'multiline':False]['text':' does not need to be normalized.','line_number':126,'multiline':False]['text':' More efficient version of InteriorContains() that accepts a S2LatLng','line_number':129,'multiline':False]['text':' rather than an S2Point.  The argument must be normalized.','line_number':130,'multiline':False]['text':' Return true if and only if the rectangle contains the given other','line_number':133,'multiline':False]['text':' rectangle.','line_number':134,'multiline':False]['text':' Return true if and only if the interior of this rectangle contains all','line_number':137,'multiline':False]['text':' points of the given other rectangle (including its boundary).','line_number':138,'multiline':False]['text':' Return true if this rectangle and the given other rectangle have any','line_number':141,'multiline':False]['text':' points in common.','line_number':142,'multiline':False]['text':' Returns true if this rectangle intersects the given cell.  (This is an','line_number':145,'multiline':False]['text':' exact test and may be fairly expensive, see also MayIntersect below.)','line_number':146,'multiline':False]['text':' Return true if and only if the interior of this rectangle intersects','line_number':149,'multiline':False]['text':' any point (including the boundary) of the given other rectangle.','line_number':150,'multiline':False]['text':' Increase the size of the bounding rectangle to include the given point.','line_number':153,'multiline':False]['text':' The rectangle is expanded by the minimum amount possible.  The S2LatLng','line_number':154,'multiline':False]['text':' argument must be normalized.','line_number':155,'multiline':False]['text':' Return a rectangle that contains all points whose latitude distance from','line_number':159,'multiline':False]['text':' this rectangle is at most margin.lat(), and whose longitude distance','line_number':160,'multiline':False]['text':' from this rectangle is at most margin.lng().  In particular, latitudes','line_number':161,'multiline':False]['text':' are clamped while longitudes are wrapped.  Note that any expansion of an','line_number':162,'multiline':False]['text':' empty interval remains empty, and both components of the given margin','line_number':163,'multiline':False]['text':' must be non-negative.  "margin" does not need to be normalized.','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' NOTE: If you are trying to grow a rectangle by a certain *distance* on','line_number':166,'multiline':False]['text':' the sphere (e.g. 5km), use the ConvolveWithCap() method instead.','line_number':167,'multiline':False]['text':' Return the smallest rectangle containing the union of this rectangle and','line_number':170,'multiline':False]['text':' the given rectangle.','line_number':171,'multiline':False]['text':' Return the smallest rectangle containing the intersection of this','line_number':174,'multiline':False]['text':' rectangle and the given rectangle.  Note that the region of intersection','line_number':175,'multiline':False]['text':' may consist of two disjoint rectangles, in which case a single rectangle','line_number':176,'multiline':False]['text':' spanning both of them is returned.','line_number':177,'multiline':False]['text':' Return a rectangle that contains the convolution of this rectangle with a','line_number':180,'multiline':False]['text':' cap of the given angle.  This expands the rectangle by a fixed distance','line_number':181,'multiline':False]['text':' (as opposed to growing the rectangle in latitude-longitude space).  The','line_number':182,'multiline':False]['text':' returned rectangle includes all points whose minimum distance to the','line_number':183,'multiline':False]['text':' original rectangle is at most the given angle.','line_number':184,'multiline':False]['text':' Returns the minimum distance (measured along the surface of the sphere) to','line_number':187,'multiline':False]['text':' the given S2LatLngRect. Both S2LatLngRects must be non-empty.','line_number':188,'multiline':False]['text':' Returns the minimum distance (measured along the surface of the sphere)','line_number':191,'multiline':False]['text':' from a given point to the rectangle (both its boundary and its interior).','line_number':192,'multiline':False]['text':' The latlng must be valid.','line_number':193,'multiline':False]['text':' Returns the (directed or undirected) Hausdorff distance (measured along the','line_number':196,'multiline':False]['text':' surface of the sphere) to the given S2LatLngRect. The directed Hausdorff','line_number':197,'multiline':False]['text':' distance from rectangle A to rectangle B is given by','line_number':198,'multiline':False]['text':'     h(A, B) = max_{p in A} min_{q in B} d(p, q).','line_number':199,'multiline':False]['text':' The Hausdorff distance between rectangle A and rectangle B is given by','line_number':200,'multiline':False]['text':'     H(A, B) = max{h(A, B), h(B, A)}.','line_number':201,'multiline':False]['text':' Return true if two rectangles contains the same set of points.','line_number':205,'multiline':False]['text':' Return the opposite of what operator == returns.','line_number':208,'multiline':False]['text':' Return true if the latitude and longitude intervals of the two rectangles','line_number':211,'multiline':False]['text':' are the same up to the given tolerance (see r1interval.h and s1interval.h','line_number':212,'multiline':False]['text':' for details).','line_number':213,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////','line_number':216,'multiline':False]['text':' S2Region interface (see s2region.h for details):','line_number':217,'multiline':False]['text':' The same as Contains() below, just virtual.','line_number':224,'multiline':False]['text':' This test is cheap but is NOT exact.  Use Intersects() if you want a more','line_number':227,'multiline':False]['text':' accurate and more expensive test.  Note that when this method is used by','line_number':228,'multiline':False]['text':' an S2RegionCoverer, the accuracy isn't all that important since if a cell','line_number':229,'multiline':False]['text':' may intersect the region then it is subdivided, and the accuracy of this','line_number':230,'multiline':False]['text':' method goes up as the cells get smaller.','line_number':231,'multiline':False]['text':' The point 'p' does not need to be normalized.','line_number':234,'multiline':False]['text':' Return true if the edge AB intersects the given edge of constant','line_number':241,'multiline':False]['text':' longitude.','line_number':242,'multiline':False]['text':' Return true if the edge AB intersects the given edge of constant','line_number':246,'multiline':False]['text':' latitude.','line_number':247,'multiline':False]['text':' Helper function. See .cc for description.','line_number':251,'multiline':False]['text':' Helper function. See .cc for description.','line_number':256,'multiline':False]['text':' Helper function. See .cc for description.','line_number':260,'multiline':False]['text':' The lat/lng ranges must either be both empty or both non-empty.','line_number':291,'multiline':False]['text':' UTIL_GEOMETRY_S2LATLNGRECT_H_','line_number':320,'multiline':False]