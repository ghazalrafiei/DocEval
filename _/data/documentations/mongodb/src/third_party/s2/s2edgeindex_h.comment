['text':' Copyright 2009 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Defines the class S2EdgeIndex, a fast lookup structure for edges in S2.','line_number':3,'multiline':False]['text':' This class structures a set S of data edges, so that one can quickly','line_number':27,'multiline':False]['text':' find which edges of S may potentially intersect or touch a query edge.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' The set S is assumed to be indexable by a consecutive sequence of','line_number':30,'multiline':False]['text':' integers in the range [0..num_edges()-1].  You subclass this class by','line_number':31,'multiline':False]['text':' defining the three virtual functions num_edges(), edge_from(),','line_number':32,'multiline':False]['text':' edge_to().  Then you use it as follows for a query edge (a,b):','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':'   MyS2EdgeIndex edge_index;','line_number':35,'multiline':False]['text':'   MyS2EdgeIndex::Iterator it(&edge_index);','line_number':36,'multiline':False]['text':'   S2Point const* from;','line_number':37,'multiline':False]['text':'   S2Point const* to;','line_number':38,'multiline':False]['text':'   for (it.GetCandidates(a, b); !it.Done(); it.Next()) {','line_number':39,'multiline':False]['text':'     edge_index.GetEdge(it.Index(), &from, &to);','line_number':40,'multiline':False]['text':'     ... RobustCrossing(a,b, from,to) ...','line_number':41,'multiline':False]['text':'   }','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' What is this GetEdge()?  You don't want to use edge_from() and','line_number':44,'multiline':False]['text':' edge_to() in your own code: these are virtual functions that will','line_number':45,'multiline':False]['text':' add a lot of overhead.  The most efficient way is as above: you','line_number':46,'multiline':False]['text':' define GetEdge() in your S2EdgeIndex subclass that access the edge','line_number':47,'multiline':False]['text':' points as efficiently as possible.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' The function GetCandidates initializes the iterator to return a set','line_number':50,'multiline':False]['text':' of candidate edges from S, such that we are sure that any data edge','line_number':51,'multiline':False]['text':' that touches or crosses (a,b) is a candidate.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' This class returns all edges until it finds that it is worth it to compute','line_number':54,'multiline':False]['text':' a quad tree on the data set.  Chance my have it that you compute the quad','line_number':55,'multiline':False]['text':' tree exactly when it's too late and all the work is done, If this happens,','line_number':56,'multiline':False]['text':' we only double the total running time.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' You can help the class by declaring in advance that you will make a','line_number':59,'multiline':False]['text':' certain number of calls to GetCandidates():','line_number':60,'multiline':False]['text':'   MyS2EdgeIndex::Iterator it(&edge_index)','line_number':61,'multiline':False]['text':'   edge_index.PredictAdditionalCalls(n);','line_number':62,'multiline':False]['text':'   for (int i = 0; i < n; ++i) {','line_number':63,'multiline':False]['text':'     for (it.GetCandidates(v(i), v(i+1)); !it.Done(); it.Next()) {','line_number':64,'multiline':False]['text':'        ... RobustCrossing(v(i), v(i+1), it.From(), it.To()) ...','line_number':65,'multiline':False]['text':'     }','line_number':66,'multiline':False]['text':'   }','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Here, we say that we will call GetCandidates() n times.  If we have','line_number':69,'multiline':False]['text':' 1000 data edges and n=1000, then we will compute the quad tree','line_number':70,'multiline':False]['text':' immediately instead of waiting till we've wasted enough time to','line_number':71,'multiline':False]['text':' justify the cost.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' The tradeoff between brute force and quad tree depends on many','line_number':74,'multiline':False]['text':' things, we use a very approximate trade-off.','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' See examples in S2Loop.cc and S2Polygon.cc, in particular, look at','line_number':77,'multiline':False]['text':' the optimization that allows one to use the EdgeCrosser.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' TODO(user): Get a better API without the clumsy GetCandidates().','line_number':80,'multiline':False]['text':'   Maybe edge_index.GetIterator()?','line_number':81,'multiline':False]['text':' An iterator on data edges that may cross a query edge (a,b).','line_number':88,'multiline':False]['text':' Create the iterator, call GetCandidates(), then Done()/Next()','line_number':89,'multiline':False]['text':' repeatedly.','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' The current edge in the iteration has index Index(), goes between','line_number':92,'multiline':False]['text':' From() and To().','line_number':93,'multiline':False]['text':' Initializes the iterator to iterate over a set of candidates that may','line_number':98,'multiline':False]['text':' cross the edge (a,b).','line_number':99,'multiline':False]['text':' Index of the current edge in the iteration.','line_number':102,'multiline':False]['text':' True if there is no more candidate.','line_number':105,'multiline':False]['text':' Iterate to the next available candidate.','line_number':108,'multiline':False]['text':' The structure containing the data edges.','line_number':112,'multiline':False]['text':' Tells whether GetCandidates() obtained the candidates through brute','line_number':115,'multiline':False]['text':' force iteration or using the quad tree structure.','line_number':116,'multiline':False]['text':' Index of the current edge and of the edge before the last Next() call.','line_number':119,'multiline':False]['text':' Cache of edge_index_->num_edges() so that Done() doesn't call a virtual','line_number':122,'multiline':False]['text':' All the candidates obtained by GetCandidates() when we are','line_number':125,'multiline':False]['text':' using a quad-tree (i.e. is_brute_force = false).','line_number':126,'multiline':False]['text':' Index within array above.','line_number':129,'multiline':False]['text':' We have: current_index_ = candidates_[current_index_in_candidates_].','line_number':130,'multiline':False]['text':' Empties the index in case it already contained something.','line_number':136,'multiline':False]['text':' Computes the index if not yet done and tells if the index has','line_number':139,'multiline':False]['text':' been computed.','line_number':140,'multiline':False]['text':' If the index hasn't been computed yet, looks at how much work has','line_number':144,'multiline':False]['text':' gone into iterating using the brute force method, and how much','line_number':145,'multiline':False]['text':' more work is planned as defined by 'cost'.  If it were to have been','line_number':146,'multiline':False]['text':' cheaper to use a quad tree from the beginning, then compute it','line_number':147,'multiline':False]['text':' now.  This guarantees that we will never use more than twice the','line_number':148,'multiline':False]['text':' time we would have used had we known in advance exactly how many','line_number':149,'multiline':False]['text':' edges we would have wanted to test.  It is the theoretical best.','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' The value 'n' is the number of iterators we expect to request from','line_number':152,'multiline':False]['text':' this edge index.','line_number':153,'multiline':False]['text':' Overwrite these functions to give access to the underlying data.','line_number':156,'multiline':False]['text':' The function num_edges() returns the number of edges in the','line_number':157,'multiline':False]['text':' index, while edge_from(index) and edge_to(index) return the','line_number':158,'multiline':False]['text':' "from" and "to" endpoints of the edge at the given index.','line_number':159,'multiline':False]['text':' Appends to result all edge references in the map that cross the','line_number':165,'multiline':False]['text':' query edge, and possibly some more.','line_number':166,'multiline':False]['text':' Tell the index that we just received a new request for candidates.','line_number':170,'multiline':False]['text':' Useful to compute when to switch to quad tree.','line_number':171,'multiline':False]['text':' Inserts the given directed edge into the quad tree.','line_number':177,'multiline':False]['text':' Computes a cell covering of an edge.  Returns the level of the s2 cells','line_number':180,'multiline':False]['text':' used in the covering (only one level is ever used for each call).','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' If thicken_edge is true, the edge is thickened and extended','line_number':183,'multiline':False]['text':' by 1% of its length.','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':' It is guaranteed that no child of a covering cell will fully contain','line_number':186,'multiline':False]['text':' the covered edge.','line_number':187,'multiline':False]['text':' Adds to candidate_crossings all the edges present in any ancestor of any','line_number':192,'multiline':False]['text':' cell of cover, down to minimum_s2_level_used.  The cell->edge map','line_number':193,'multiline':False]['text':' is in the variable mapping.','line_number':194,'multiline':False]['text':' Returns true if the edge and the cell (including boundary) intersect.','line_number':201,'multiline':False]['text':' Appends to candidate_crossings the edges that are fully contained in an','line_number':206,'multiline':False]['text':' S2 covering of edge.  The covering of edge used is initially cover, but','line_number':207,'multiline':False]['text':' is refined to eliminate quickly subcells that contain many edges but do','line_number':208,'multiline':False]['text':' not intersect with edge.','line_number':209,'multiline':False]['text':' Maps cell ids to covered edges; has the property that the set of all cell','line_number':216,'multiline':False]['text':' ids mapping to a particular edge forms a covering of that edge.','line_number':217,'multiline':False]['text':' No cell strictly below this level appears in mapping_.  Initially leaf','line_number':220,'multiline':False]['text':' level, that's the minimum level at which we will ever look for test edges.','line_number':221,'multiline':False]['text':' Has the index been computed already?','line_number':224,'multiline':False]['text':' Number of queries so far','line_number':227,'multiline':False]['text':' UTIL_GEOMETRY_S2EDGEINDEX_H_','line_number':258,'multiline':False]