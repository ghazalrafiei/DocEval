['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Reverse the output order of Lat/Lng to Lng/Lat','line_number':40,'multiline':False]['text':' mongodb: void* casts to silence a -Wclass-memaccess warning.','line_number':94,'multiline':False]['text':' InitOrigin() must be called before InitBound() because the latter','line_number':101,'multiline':False]['text':' function expects Contains() to work properly.','line_number':102,'multiline':False]['text':' Loops must have at least 3 vertices.','line_number':108,'multiline':False]['text':' All vertices must be unit length.','line_number':114,'multiline':False]['text':' Loops are not allowed to have any duplicate vertices.','line_number':122,'multiline':False]['text':' Non-adjacent edges are not allowed to intersect.','line_number':132,'multiline':False]['text':' There is no need to test the same thing twice.  Moreover, two edges','line_number':141,'multiline':False]['text':' that abut at ai+1 will have been tested for equality above.','line_number':142,'multiline':False]['text':' Beware, this may return the loop is valid if there is a','line_number':145,'multiline':False]['text':' "vertex crossing".','line_number':146,'multiline':False]['text':' TODO(user): Fix that.','line_number':147,'multiline':False]['text':' additional debugging information, reverse Lat/Lng order.','line_number':152,'multiline':False]['text':' The bounding box does not need to be correct before calling this','line_number':185,'multiline':False]['text':' function, but it must at least contain vertex(1) since we need to','line_number':186,'multiline':False]['text':' do a Contains() test on this point below.','line_number':187,'multiline':False]['text':' To ensure that every point is contained in exactly one face of a','line_number':190,'multiline':False]['text':' subdivision of the sphere, all containment tests are done by counting the','line_number':191,'multiline':False]['text':' edge crossings starting at a fixed point on the sphere (S2::Origin()).','line_number':192,'multiline':False]['text':' We need to know whether this point is inside or outside of the loop.','line_number':193,'multiline':False]['text':' We do this by first guessing that it is outside, and then seeing whether','line_number':194,'multiline':False]['text':' we get the correct containment result for vertex 1.  If the result is','line_number':195,'multiline':False]['text':' incorrect, the origin must be inside the loop.','line_number':196,'multiline':False]['text':'','line_number':197,'multiline':False]['text':' A loop with consecutive vertices A,B,C contains vertex B if and only if','line_number':198,'multiline':False]['text':' the fixed vector R = S2::Ortho(B) is on the left side of the wedge ABC.','line_number':199,'multiline':False]['text':' The test below is written so that B is inside if C=R but not if A=R.','line_number':200,'multiline':False]['text':' Initialize before calling Contains().','line_number':202,'multiline':False]['text':' The bounding rectangle of a loop is not necessarily the same as the','line_number':210,'multiline':False]['text':' bounding rectangle of its vertices.  First, the loop may wrap entirely','line_number':211,'multiline':False]['text':' around the sphere (e.g. a loop that defines two revolutions of a','line_number':212,'multiline':False]['text':' candy-cane stripe).  Second, the loop may include one or both poles.','line_number':213,'multiline':False]['text':' Note that a small clockwise loop near the equator contains both poles.','line_number':214,'multiline':False]['text':' Note that we need to initialize bound_ with a temporary value since','line_number':221,'multiline':False]['text':' Contains() does a bounding rectangle check before doing anything else.','line_number':222,'multiline':False]['text':' If a loop contains the south pole, then either it wraps entirely','line_number':227,'multiline':False]['text':' around the sphere (full longitude range), or it also contains the','line_number':228,'multiline':False]['text':' north pole in which case b.lng().is_full() due to the test above.','line_number':229,'multiline':False]['text':' Either way, we only need to do the south pole containment test if','line_number':230,'multiline':False]['text':' b.lng().is_full().','line_number':231,'multiline':False]['text':' mongodb: void* casts to silence a -Wclass-memaccess warning.','line_number':268,'multiline':False]['text':' Exhaustive search','line_number':280,'multiline':False]['text':' We haven't computed it yet.','line_number':287,'multiline':False]['text':' Optimization: if the longitude span is less than 180 degrees, then the','line_number':301,'multiline':False]['text':' loop covers less than half the sphere and is therefore normalized.','line_number':302,'multiline':False]['text':' We allow some error so that hemispheres are always considered normalized.','line_number':305,'multiline':False]['text':' TODO(user): This might not be necessary once S2Polygon is enhanced so','line_number':306,'multiline':False]['text':' that it does not require its input loops to be normalized.','line_number':307,'multiline':False]['text':' The complement of this loop contains both poles.','line_number':324,'multiline':False]['text':' The signed area should be between approximately -4*Pi and 4*Pi.','line_number':333,'multiline':False]['text':' We have computed the negative of the area of the loop exterior.','line_number':336,'multiline':False]['text':' GetSurfaceIntegral() returns either the integral of position over loop','line_number':343,'multiline':False]['text':' interior, or the negative of the integral of position over the loop','line_number':344,'multiline':False]['text':' exterior.  But these two values are the same (!), because the integral of','line_number':345,'multiline':False]['text':' position over the entire sphere is (0, 0, 0).','line_number':346,'multiline':False]['text':' Return (first, dir) such that first..first+n*dir are valid indices.','line_number':350,'multiline':False]['text':' 0 <= first <= n-1, so (first+n*dir) <= 2*n-1.','line_number':359,'multiline':False]['text':' n <= first <= 2*n-1, so (first+n*dir) >= 0.','line_number':363,'multiline':False]['text':' Don't crash even if the loop is not well-defined.','line_number':369,'multiline':False]['text':' To ensure that we get the same result when the loop vertex order is','line_number':372,'multiline':False]['text':' rotated, and that we get the same result with the opposite sign when the','line_number':373,'multiline':False]['text':' vertices are reversed, we need to be careful to add up the individual','line_number':374,'multiline':False]['text':' turn angles in a consistent order.  In general, adding up a set of','line_number':375,'multiline':False]['text':' numbers in a different order can change the sum due to rounding errors.','line_number':376,'multiline':False]['text':' A future optimization could also take advantage of the fact than an S2Cell','line_number':393,'multiline':False]['text':' is convex.','line_number':394,'multiline':False]['text':' It's not necessarily true that bound_.Contains(cell.GetRectBound())','line_number':396,'multiline':False]['text':' because S2Cell bounds are slightly conservative.','line_number':397,'multiline':False]['text':' It is faster to construct a bounding rectangle for an S2Cell than for','line_number':404,'multiline':False]['text':' a general polygon.  A future optimization could also take advantage of','line_number':405,'multiline':False]['text':' the fact than an S2Cell is convex.','line_number':406,'multiline':False]['text':' The s2edgeindex library is not optimized yet for long edges,','line_number':419,'multiline':False]['text':' so the tradeoff to using it comes later.','line_number':420,'multiline':False]['text':' sufficient','line_number':440,'multiline':False]['text':' This is a helper class for the AreBoundariesCrossing function.','line_number':486,'multiline':False]['text':' Each time there is a point in common between the two loops passed','line_number':487,'multiline':False]['text':' as parameters, the two associated wedges centered at this point are','line_number':488,'multiline':False]['text':' passed to the ProcessWedge function of this processor. The function','line_number':489,'multiline':False]['text':' updates an internal state based on the wedges, and returns true to','line_number':490,'multiline':False]['text':' signal that no further processing is needed.','line_number':491,'multiline':False]['text':'','line_number':492,'multiline':False]['text':' To use AreBoundariesCrossing, subclass this class and keep an','line_number':493,'multiline':False]['text':' internal state that you update each time ProcessWedge is called,','line_number':494,'multiline':False]['text':' then query this internal state in the function that called','line_number':495,'multiline':False]['text':' AreBoundariesCrossing.','line_number':496,'multiline':False]['text':' See the header file for a description of what this method does.','line_number':508,'multiline':False]['text':' We only need to check each shared vertex once, so we only','line_number':523,'multiline':False]['text':' consider the case where vertex(i+1) == b->vertex(j+1).','line_number':524,'multiline':False]['text':' WedgeProcessor to be used to check if loop A contains loop B.','line_number':535,'multiline':False]['text':' DoesntContain() then returns true if there is a wedge of B not','line_number':536,'multiline':False]['text':' contained in the associated wedge of A (and hence loop B is not','line_number':537,'multiline':False]['text':' contained in loop A).','line_number':538,'multiline':False]['text':' For this loop A to contains the given loop B, all of the following must','line_number':557,'multiline':False]['text':' be true:','line_number':558,'multiline':False]['text':'','line_number':559,'multiline':False]['text':'  (1) There are no edge crossings between A and B except at vertices.','line_number':560,'multiline':False]['text':'','line_number':561,'multiline':False]['text':'  (2) At every vertex that is shared between A and B, the local edge','line_number':562,'multiline':False]['text':'      ordering implies that A contains B.','line_number':563,'multiline':False]['text':'','line_number':564,'multiline':False]['text':'  (3) If there are no shared vertices, then A must contain a vertex of B','line_number':565,'multiline':False]['text':'      and B must not contain a vertex of A.  (An arbitrary vertex may be','line_number':566,'multiline':False]['text':'      chosen in each case.)','line_number':567,'multiline':False]['text':'','line_number':568,'multiline':False]['text':' The second part of (3) is necessary to detect the case of two loops whose','line_number':569,'multiline':False]['text':' union is the entire sphere, i.e. two loops that contains each other's','line_number':570,'multiline':False]['text':' boundaries but not each other's interiors.','line_number':571,'multiline':False]['text':' Unless there are shared vertices, we need to check whether A contains a','line_number':575,'multiline':False]['text':' vertex of B.  Since shared vertices are rare, it is more efficient to do','line_number':576,'multiline':False]['text':' this test up front as a quick rejection test.','line_number':577,'multiline':False]['text':' Now check whether there are any edge crossings, and also check the loop','line_number':581,'multiline':False]['text':' relationship at any shared vertices.','line_number':582,'multiline':False]['text':' At this point we know that the boundaries of A and B do not intersect,','line_number':588,'multiline':False]['text':' and that A contains a vertex of B.  However we still need to check for','line_number':589,'multiline':False]['text':' the case mentioned above, where (A union B) is the entire sphere.','line_number':590,'multiline':False]['text':' Normally this check is very cheap due to the bounding box precondition.','line_number':591,'multiline':False]['text':' WedgeProcessor to be used to check if loop A intersects loop B.','line_number':598,'multiline':False]['text':' Intersects() then returns true when A and B have at least one pair','line_number':599,'multiline':False]['text':' of associated wedges that intersect.','line_number':600,'multiline':False]['text':' a->Intersects(b) if and only if !a->Complement()->Contains(b).','line_number':619,'multiline':False]['text':' This code is similar to Contains(), but is optimized for the case','line_number':620,'multiline':False]['text':' where both loops enclose less than half of the sphere.','line_number':621,'multiline':False]['text':' The largest of the two loops should be edgeindex'd.','line_number':623,'multiline':False]['text':' Unless there are shared vertices, we need to check whether A contains a','line_number':628,'multiline':False]['text':' vertex of B.  Since shared vertices are rare, it is more efficient to do','line_number':629,'multiline':False]['text':' this test up front as a quick acceptance test.','line_number':630,'multiline':False]['text':' Now check whether there are any edge crossings, and also check the loop','line_number':634,'multiline':False]['text':' relationship at any shared vertices.','line_number':635,'multiline':False]['text':' We know that A does not contain a vertex of B, and that there are no edge','line_number':641,'multiline':False]['text':' crossings.  Therefore the only way that A can intersect B is if B','line_number':642,'multiline':False]['text':' entirely contains A.  We can check this by testing whether B contains an','line_number':643,'multiline':False]['text':' arbitrary non-shared vertex of A.  Note that this check is usually cheap','line_number':644,'multiline':False]['text':' because of the bounding box precondition.','line_number':645,'multiline':False]['text':' WedgeProcessor to be used to check if the interior of loop A','line_number':652,'multiline':False]['text':' contains the interior of loop B, or their boundaries cross each','line_number':653,'multiline':False]['text':' other (therefore they have a proper intersection).','line_number':654,'multiline':False]['text':' CrossesOrMayContain() then returns -1 if A crossed B, 0 if it is','line_number':655,'multiline':False]['text':' not possible for A to contain B, and 1 otherwise.','line_number':656,'multiline':False]['text':' True if any crossing on the boundary is discovered.','line_number':695,'multiline':False]['text':' True if A (B) has a strictly superwedge on a pair of wedges that','line_number':697,'multiline':False]['text':' share a common center point.','line_number':698,'multiline':False]['text':' True if there is a pair of disjoint wedges with common center','line_number':701,'multiline':False]['text':' point.','line_number':702,'multiline':False]['text':' There can be containment or crossing only if the bounds intersect.','line_number':707,'multiline':False]['text':' Now check whether there are any edge crossings, and also check the loop','line_number':710,'multiline':False]['text':' relationship at any shared vertices.  Note that unlike Contains() or','line_number':711,'multiline':False]['text':' Intersects(), we can't do a point containment test as a shortcut because','line_number':712,'multiline':False]['text':' we need to detect whether there are any edge crossings.','line_number':713,'multiline':False]['text':' At this point we know that the boundaries do not intersect, and we are','line_number':721,'multiline':False]['text':' given that (A union B) is a proper subset of the sphere.  Furthermore','line_number':722,'multiline':False]['text':' either A contains B, or there are no shared vertices (due to the check','line_number':723,'multiline':False]['text':' above).  So now we just need to distinguish the case where A contains B','line_number':724,'multiline':False]['text':' from the case where B contains A or the two loops are disjoint.','line_number':725,'multiline':False]['text':' We are given that A and B do not share any edges, and that either one','line_number':734,'multiline':False]['text':' loop contains the other or they do not intersect.','line_number':735,'multiline':False]['text':' Since b->vertex(1) is not shared, we can check whether A contains it.','line_number':738,'multiline':False]['text':' Check whether the edge order around b->vertex(1) is compatible with','line_number':741,'multiline':False]['text':' A containing B.','line_number':742,'multiline':False]['text':' There is at most one starting offset since loop vertices are unique.','line_number':751,'multiline':False]['text':' Otherwise continue looping.  There may be more than one candidate','line_number':773,'multiline':False]['text':' starting offset since vertices are only matched approximately.','line_number':774,'multiline':False]['text':' The state consists of a pair (i,j).  A state transition consists of','line_number':782,'multiline':False]['text':' incrementing either "i" or "j".  "i" can be incremented only if','line_number':783,'multiline':False]['text':' a(i+1+a_offset) is near the edge from b(j) to b(j+1), and a similar rule','line_number':784,'multiline':False]['text':' applies to "j".  The function returns true iff we can proceed all the way','line_number':785,'multiline':False]['text':' around both loops in this way.','line_number':786,'multiline':False]['text':'','line_number':787,'multiline':False]['text':' Note that when "i" and "j" can both be incremented, sometimes only one','line_number':788,'multiline':False]['text':' choice leads to a solution.  We handle this using a stack and','line_number':789,'multiline':False]['text':' backtracking.  We also keep track of which states have already been','line_number':790,'multiline':False]['text':' explored to avoid duplicating work.','line_number':791,'multiline':False]['text':' If (i == na && offset == na-1) where na == a->num_vertices(), then','line_number':805,'multiline':False]['text':' then (i+1+offset) overflows the [0, 2*na-1] range allowed by vertex().','line_number':806,'multiline':False]['text':' So we reduce the range if necessary.','line_number':807,'multiline':False]