['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Multiply a positive number by this constant to ensure that the result','line_number':12,'multiline':False]['text':' of a floating point operation is at least as large as the true','line_number':13,'multiline':False]['text':' infinite-precision result.','line_number':14,'multiline':False]['text':' Return the cap height corresponding to the given non-negative cap angle in','line_number':17,'multiline':False]['text':' radians.  Cap angles of Pi radians or larger yield a full cap.','line_number':18,'multiline':False]['text':' Caps of Pi radians or more are full.','line_number':22,'multiline':False]['text':' The height of the cap can be computed as 1 - cos(radians), but this isn't','line_number':25,'multiline':False]['text':' very accurate for angles close to zero (where cos(radians) is almost 1).','line_number':26,'multiline':False]['text':' Computing it as 2 * (sin(radians / 2) ** 2) gives much better precision.','line_number':27,'multiline':False]['text':' namespace','line_number':32,'multiline':False]['text':' This could also be computed as acos(1 - height_), but the following','line_number':41,'multiline':False]['text':' formula is much more accurate when the cap height is small.  It','line_number':42,'multiline':False]['text':' follows from the relationship h = 1 - cos(theta) = 2 sin^2(theta/2).','line_number':43,'multiline':False]['text':' The complement of a full cap is an empty cap, not a singleton.','line_number':49,'multiline':False]['text':' Also make sure that the complement of an empty cap has height 2.','line_number':50,'multiline':False]['text':' Make sure this cap has an interior and the other cap is non-empty.','line_number':69,'multiline':False]['text':' Compute the squared chord length, then convert it into a height.','line_number':77,'multiline':False]['text':' To make sure that the resulting cap actually includes this point,','line_number':83,'multiline':False]['text':' we need to round up the distance calculation.  That is, after','line_number':84,'multiline':False]['text':' calling cap.AddPoint(p), cap.Contains(p) should be true.','line_number':85,'multiline':False]['text':' See comments for AddPoint().  This could be optimized by doing the','line_number':95,'multiline':False]['text':' calculation in terms of cap heights rather than cap opening angles.','line_number':96,'multiline':False]['text':' Convert the axis to a (lat,lng) pair, and compute the cap angle.','line_number':119,'multiline':False]['text':' Check whether cap includes the south pole.','line_number':128,'multiline':False]['text':' Check whether cap includes the north pole.','line_number':134,'multiline':False]['text':' Compute the range of longitudes covered by the cap.  We use the law','line_number':141,'multiline':False]['text':' of sines for spherical triangles.  Consider the triangle ABC where','line_number':142,'multiline':False]['text':' A is the north pole, B is the center of the cap, and C is the point','line_number':143,'multiline':False]['text':' of tangency between the cap boundary and a line of longitude.  Then','line_number':144,'multiline':False]['text':' C is a right angle, and letting a,b,c denote the sides opposite A,B,C,','line_number':145,'multiline':False]['text':' we have sin(a)/sin(A) = sin(c)/sin(C), or sin(A) = sin(a)/sin(c).','line_number':146,'multiline':False]['text':' Here "a" is the cap angle, and "c" is the colatitude (90 degrees','line_number':147,'multiline':False]['text':' minus the latitude).  This formula also works for negative latitudes.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' The formula for sin(a) follows from the relationship h = 1 - cos(a).','line_number':150,'multiline':False]['text':' Return true if this cap intersects any point of 'cell' excluding its','line_number':165,'multiline':False]['text':' vertices (which are assumed to already have been checked).','line_number':166,'multiline':False]['text':' If the cap is a hemisphere or larger, the cell and the complement of the','line_number':168,'multiline':False]['text':' cap are both convex.  Therefore since no vertex of the cell is contained,','line_number':169,'multiline':False]['text':' no other interior point of the cell is contained either.','line_number':170,'multiline':False]['text':' We need to check for empty caps due to the axis check just below.','line_number':173,'multiline':False]['text':' Optimization: return true if the cell contains the cap axis.  (This','line_number':176,'multiline':False]['text':' allows half of the edge checks below to be skipped.)','line_number':177,'multiline':False]['text':' At this point we know that the cell does not contain the cap axis,','line_number':180,'multiline':False]['text':' and the cap does not contain any cell vertex.  The only way that they','line_number':181,'multiline':False]['text':' can intersect is if the cap intersects the interior of some edge.','line_number':182,'multiline':False]['text':' sin^2(cap_angle)','line_number':184,'multiline':False]['text':' The axis is in the interior half-space defined by the edge.  We don't','line_number':189,'multiline':False]['text':' need to consider these edges, since if the cap intersects this edge','line_number':190,'multiline':False]['text':' then it also intersects the edge on the opposite side of the cell','line_number':191,'multiline':False]['text':' (because we know the axis is not contained with the cell).','line_number':192,'multiline':False]['text':' The Norm2() factor is necessary because "edge" is not normalized.','line_number':195,'multiline':False]['text':' Entire cap is on the exterior side of this edge.','line_number':197,'multiline':False]['text':' Otherwise, the great circle containing this edge intersects','line_number':199,'multiline':False]['text':' the interior of the cap.  We just need to check whether the point','line_number':200,'multiline':False]['text':' of closest approach occurs between the two edge endpoints.','line_number':201,'multiline':False]['text':' If the cap does not contain all cell vertices, return false.','line_number':210,'multiline':False]['text':' We check the vertices before taking the Complement() because we can't','line_number':211,'multiline':False]['text':' accurately represent the complement of a very small cap (a height','line_number':212,'multiline':False]['text':' of 2-epsilon is rounded off to 2).','line_number':213,'multiline':False]['text':' Otherwise, return true if the complement of the cap does not intersect','line_number':219,'multiline':False]['text':' the cell.  (This test is slightly conservative, because technically we','line_number':220,'multiline':False]['text':' want Complement().InteriorIntersects() here.)','line_number':221,'multiline':False]['text':' If the cap contains any cell vertex, return true.','line_number':226,'multiline':False]