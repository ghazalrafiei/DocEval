['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Twiddle bits to return the points in CCW order (SW, SE, NE, NW).','line_number':46,'multiline':False]['text':' This is the size difference of the two spherical caps, multiplied by','line_number':60,'multiline':False]['text':' the longitude ratio.','line_number':61,'multiline':False]['text':' The lat/lng ranges must either be both empty or both non-empty.','line_number':127,'multiline':False]['text':' The most straightforward approach is to build a cap centered on each','line_number':134,'multiline':False]['text':' vertex and take the union of all the bounding rectangles (including the','line_number':135,'multiline':False]['text':' original rectangle; this is necessary for very large rectangles).','line_number':136,'multiline':False]['text':' Optimization: convert the angle to a height exactly once.','line_number':138,'multiline':False]['text':' We consider two possible bounding caps, one whose axis passes','line_number':151,'multiline':False]['text':' through the center of the lat-long rectangle and one whose axis','line_number':152,'multiline':False]['text':' is the north or south pole.  We return the smaller of the two caps.','line_number':153,'multiline':False]['text':' South pole axis yields smaller cap.','line_number':159,'multiline':False]['text':' For bounding rectangles that span 180 degrees or less in longitude, the','line_number':169,'multiline':False]['text':' maximum cap size is achieved at one of the rectangle vertices.  For','line_number':170,'multiline':False]['text':' rectangles that are larger than 180 degrees, we punt and always return a','line_number':171,'multiline':False]['text':' bounding cap centered at one of the two poles.','line_number':172,'multiline':False]['text':' A latitude-longitude rectangle contains a cell if and only if it contains','line_number':193,'multiline':False]['text':' the cell's bounding rectangle.  This test is exact from a mathematical','line_number':194,'multiline':False]['text':' point of view, assuming that the bounds returned by S2Cell::GetRectBound()','line_number':195,'multiline':False]['text':' are tight.  However, note that there can be a loss of precision when','line_number':196,'multiline':False]['text':' converting between representations -- for example, if an S2Cell is','line_number':197,'multiline':False]['text':' converted to a polygon, the polygon's bounding rectangle may not contain','line_number':198,'multiline':False]['text':' the cell's bounding rectangle.  This has some slightly unexpected side','line_number':199,'multiline':False]['text':' effects; for instance, if one creates an S2Polygon from an S2Cell, the','line_number':200,'multiline':False]['text':' polygon will contain the cell, but the polygon's bounding box will not.','line_number':201,'multiline':False]['text':' This test is cheap but is NOT exact (see s2latlngrect.h).','line_number':206,'multiline':False]['text':' sufficient','line_number':211,'multiline':False]['text':' Return true if the segment AB intersects the given edge of constant','line_number':240,'multiline':False]['text':' longitude.  The nice thing about edges of constant longitude is that','line_number':241,'multiline':False]['text':' they are straight lines on the sphere (geodesics).','line_number':242,'multiline':False]['text':' Return true if the segment AB intersects the given edge of constant','line_number':251,'multiline':False]['text':' latitude.  Unfortunately, lines of constant latitude are curves on','line_number':252,'multiline':False]['text':' the sphere.  They can intersect a straight edge in 0, 1, or 2 points.','line_number':253,'multiline':False]['text':' First, compute the normal to the plane AB that points vaguely north.','line_number':257,'multiline':False]['text':' Extend this to an orthonormal frame (x,y,z) where x is the direction','line_number':261,'multiline':False]['text':' where the great circle through AB achieves its maximium latitude.','line_number':262,'multiline':False]['text':' Compute the angle "theta" from the x-axis (in the x-y plane defined','line_number':268,'multiline':False]['text':' above) where the great circle intersects the given line of latitude.','line_number':269,'multiline':False]['text':' The great circle does not reach the given latitude.','line_number':272,'multiline':False]['text':' The candidate intersection points are located +/- theta in the x-y','line_number':279,'multiline':False]['text':' plane.  For an intersection to be valid, we need to check that the','line_number':280,'multiline':False]['text':' intersection point is contained in the interior of the edge AB and','line_number':281,'multiline':False]['text':' also that it is contained within the given longitude interval "lng".','line_number':282,'multiline':False]['text':' Compute the range of theta values spanned by the edge AB.','line_number':284,'multiline':False]['text':' Check if the intersection point is also in the given "lng" interval.','line_number':290,'multiline':False]['text':' Check if the intersection point is also in the given "lng" interval.','line_number':295,'multiline':False]['text':' First we eliminate the cases where one region completely contains the','line_number':303,'multiline':False]['text':' other.  Once these are disposed of, then the regions will intersect','line_number':304,'multiline':False]['text':' if and only if their boundaries intersect.','line_number':305,'multiline':False]['text':' Quick rejection test (not required for correctness).','line_number':311,'multiline':False]['text':' Precompute the cell vertices as points and latitude-longitudes.  We also','line_number':314,'multiline':False]['text':' check whether the S2Cell contains any corner of the rectangle, or','line_number':315,'multiline':False]['text':' vice-versa, since the edge-crossing tests only check the edge interiors.','line_number':316,'multiline':False]['text':' Must be normalized.','line_number':321,'multiline':False]['text':' Now check whether the boundaries intersect.  Unfortunately, a','line_number':327,'multiline':False]['text':' latitude-longitude rectangle does not have straight edges -- two edges','line_number':328,'multiline':False]['text':' are curved, and at least one of them is concave.','line_number':329,'multiline':False]['text':' First, handle the trivial cases where the longitude intervals overlap.','line_number':356,'multiline':False]['text':' Intersection between a and b.','line_number':359,'multiline':False]['text':' We found an overlap in the longitude interval, but not in the latitude','line_number':361,'multiline':False]['text':' interval. This means the shortest path travels along some line of','line_number':362,'multiline':False]['text':' longitude connecting the high-latitude of the lower rect with the','line_number':363,'multiline':False]['text':' low-latitude of the higher rect.','line_number':364,'multiline':False]['text':' The longitude intervals don't overlap. In this case, the closest points','line_number':376,'multiline':False]['text':' occur somewhere on the pair of longitudinal edges which are nearest in','line_number':377,'multiline':False]['text':' longitude-space.','line_number':378,'multiline':False]['text':' The shortest distance between the two longitudinal segments will include at','line_number':390,'multiline':False]['text':' least one segment endpoint. We could probably narrow this down further to a','line_number':391,'multiline':False]['text':' single point-edge distance by comparing the relative latitudes of the','line_number':392,'multiline':False]['text':' endpoints, but for the sake of clarity, we'll do all four point-edge','line_number':393,'multiline':False]['text':' distance tests.','line_number':394,'multiline':False]['text':' The algorithm here is the same as in GetDistance(S2LagLngRect), only','line_number':410,'multiline':False]['text':' with simplified calculations.','line_number':411,'multiline':False]['text':' maximum possible distance on S2','line_number':446,'multiline':False]['text':' Return the directed Hausdorff distance from one longitudinal edge spanning','line_number':454,'multiline':False]['text':' latitude range 'a_lat' to the other longitudinal edge spanning latitude','line_number':455,'multiline':False]['text':' range 'b_lat', with their longitudinal difference given by 'lng_diff'.','line_number':456,'multiline':False]['text':' By symmetry, we can assume a's longtitude is 0 and b's longtitude is','line_number':459,'multiline':False]['text':' lng_diff. Call b's two endpoints b_lo and b_hi. Let H be the hemisphere','line_number':460,'multiline':False]['text':' containing a and delimited by the longitude line of b. The Voronoi diagram','line_number':461,'multiline':False]['text':' of b on H has three edges (portions of great circles) all orthogonal to b','line_number':462,'multiline':False]['text':' and meeting at b_lo_cross_b_hi.','line_number':463,'multiline':False]['text':' E1: (b_lo, b_lo_cross_b_hi)','line_number':464,'multiline':False]['text':' E2: (b_hi, b_lo_cross_b_hi)','line_number':465,'multiline':False]['text':' E3: (-b_mid, b_lo_cross_b_hi), where b_mid is the midpoint of b','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' They subdivide H into three Voronoi regions. Depending on how longitude 0','line_number':468,'multiline':False]['text':' (which contains edge a) intersects these regions, we distinguish two cases:','line_number':469,'multiline':False]['text':' Case 1: it intersects three regions. This occurs when lng_diff <= M_PI_2.','line_number':470,'multiline':False]['text':' Case 2: it intersects only two regions. This occurs when lng_diff > M_PI_2.','line_number':471,'multiline':False]['text':'','line_number':472,'multiline':False]['text':' In the first case, the directed Hausdorff distance to edge b can only be','line_number':473,'multiline':False]['text':' realized by the following points on a:','line_number':474,'multiline':False]['text':' A1: two endpoints of a.','line_number':475,'multiline':False]['text':' A2: intersection of a with the equator, if b also intersects the equator.','line_number':476,'multiline':False]['text':'','line_number':477,'multiline':False]['text':' In the second case, the directed Hausdorff distance to edge b can only be','line_number':478,'multiline':False]['text':' realized by the following points on a:','line_number':479,'multiline':False]['text':' B1: two endpoints of a.','line_number':480,'multiline':False]['text':' B2: intersection of a with E3','line_number':481,'multiline':False]['text':' B3: farthest point from b_lo to the interior of D, and farthest point from','line_number':482,'multiline':False]['text':'     b_hi to the interior of U, if any, where D (resp. U) is the portion','line_number':483,'multiline':False]['text':'     of edge a below (resp. above) the intersection point from B2.','line_number':484,'multiline':False]['text':' Assumed longtitude of b.','line_number':493,'multiline':False]['text':' Two endpoints of b.','line_number':495,'multiline':False]['text':' Cross product of b_lo and b_hi.','line_number':498,'multiline':False]['text':' Handling of each case outlined at the top of the function starts here.','line_number':502,'multiline':False]['text':' This is initialized a few lines below.','line_number':503,'multiline':False]['text':' Cases A1 and B1.','line_number':506,'multiline':False]['text':' Case A2.','line_number':514,'multiline':False]['text':' Case B2.','line_number':519,'multiline':False]['text':' Case B3.','line_number':526,'multiline':False]['text':' Return the intersection of longitude 0 with the bisector of an edge','line_number':540,'multiline':False]['text':' on longitude 'lng' and spanning latitude range 'lat'.','line_number':541,'multiline':False]['text':' A vector orthogonal to the bisector of the given longitudinal edge.','line_number':546,'multiline':False]['text':' A vector orthogonal to longitude 0.','line_number':553,'multiline':False]['text':' Return max distance from a point b to the segment spanning latitude range','line_number':558,'multiline':False]['text':' a_lat on longitude 0, if the max occurs in the interior of a_lat. Otherwise','line_number':559,'multiline':False]['text':' return -1.','line_number':560,'multiline':False]['text':' Longitude 0 is in the y=0 plane. b.x() >= 0 implies that the maximum','line_number':563,'multiline':False]['text':' does not occur in the interior of a_lat.','line_number':564,'multiline':False]['text':' Project b to the y=0 plane. The antipodal of the normalized projection is','line_number':567,'multiline':False]['text':' the point at which the maxium distance from b occurs, if it is contained','line_number':568,'multiline':False]['text':' in a_lat.','line_number':569,'multiline':False]