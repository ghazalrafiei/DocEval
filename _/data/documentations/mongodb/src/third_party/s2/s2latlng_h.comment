['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' This class represents a point on the unit sphere as a pair','line_number':15,'multiline':False]['text':' of latitude-longitude coordinates.  Like the rest of the "geometry"','line_number':16,'multiline':False]['text':' package, the intent is to represent spherical geometry as a mathematical','line_number':17,'multiline':False]['text':' abstraction, so functions that are specifically related to the Earth's','line_number':18,'multiline':False]['text':' geometry (e.g. easting/northing conversions) should be put elsewhere.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' This class is intended to be copied by value as desired.  It uses','line_number':21,'multiline':False]['text':' the default copy constructor and assignment operator.','line_number':22,'multiline':False]['text':' Constructor.  The latitude and longitude are allowed to be outside','line_number':25,'multiline':False]['text':' the is_valid() range.  However, note that most methods that accept','line_number':26,'multiline':False]['text':' S2LatLngs expect them to be normalized (see Normalized() below).','line_number':27,'multiline':False]['text':' The default constructor sets the latitude and longitude to zero.  This is','line_number':30,'multiline':False]['text':' mainly useful when declaring arrays, STL containers, etc.','line_number':31,'multiline':False]['text':' Convert a direction vector (not necessarily unit length) to an S2LatLng.','line_number':34,'multiline':False]['text':' Returns an S2LatLng for which is_valid() will return false.','line_number':37,'multiline':False]['text':' Convenience functions -- shorter than calling S1Angle::Radians(), etc.','line_number':40,'multiline':False]['text':' Convenience functions -- to use when args have been fixed32s in protos.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' The arguments are static_cast into int32, so very large unsigned values','line_number':49,'multiline':False]['text':' are treated as negative numbers.','line_number':50,'multiline':False]['text':' Methods to compute the latitude and longitude of a point separately.','line_number':54,'multiline':False]['text':' Accessor methods.','line_number':58,'multiline':False]['text':' Return true if the latitude is between -90 and 90 degrees inclusive','line_number':63,'multiline':False]['text':' and the longitude is between -180 and 180 degrees inclusive.','line_number':64,'multiline':False]['text':' Clamps the latitude to the range [-90, 90] degrees, and adds or subtracts','line_number':67,'multiline':False]['text':' a multiple of 360 degrees to the longitude if necessary to reduce it to','line_number':68,'multiline':False]['text':' the range [-180, 180].','line_number':69,'multiline':False]['text':' Convert a normalized S2LatLng to the equivalent unit-length vector.','line_number':72,'multiline':False]['text':' Return the distance (measured along the surface of the sphere) to the','line_number':75,'multiline':False]['text':' given S2LatLng.  This is mathematically equivalent to:','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':'   S1Angle::Radians(ToPoint().Angle(o.ToPoint()))','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' but this implementation is slightly more efficient.  Both S2LatLngs','line_number':80,'multiline':False]['text':' must be normalized.','line_number':81,'multiline':False]['text':' Simple arithmetic operations for manipulating latitude-longitude pairs.','line_number':84,'multiline':False]['text':' The results are not normalized (see Normalized()).','line_number':85,'multiline':False]['text':' Export the latitude and longitude in degrees, separated by a comma.','line_number':102,'multiline':False]['text':' e.g. "94.518000,150.300000"','line_number':103,'multiline':False]['text':' Internal constructor.','line_number':109,'multiline':False]['text':' This is internal to avoid ambiguity about which units are expected.','line_number':112,'multiline':False]['text':' These coordinates are outside the bounds allowed by is_valid().','line_number':154,'multiline':False]['text':' We use atan2 rather than asin because the input vector is not necessarily','line_number':159,'multiline':False]['text':' unit length, and atan2 is much more accurate than asin near the poles.','line_number':160,'multiline':False]['text':' Note that atan2(0, 0) is defined to be zero.','line_number':165,'multiline':False]['text':' UTIL_GEOMETRY_S2LATLNG_H__','line_number':191,'multiline':False]