['text':' Copyright 2003 Google, Inc.','line_number':1,'multiline':False]['text':' All Rights Reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' A simple class to handle vectors in 2D','line_number':5,'multiline':False]['text':' See the vector2-inl.h file for more details','line_number':6,'multiline':False]['text':' NOLINT(readability/streams)','line_number':16,'multiline':False]['text':' TODO(user): Look into creating conversion operators to remove the','line_number':21,'multiline':False]['text':' need to forward-declare Vector3 and Vector4.','line_number':22,'multiline':False]['text':' Template class for 2D vectors.','line_number':26,'multiline':False]['text':' All definitions for these functions are in vector2-inl.h.  That header will','line_number':27,'multiline':False]['text':' need to be included in order to actually use this class.  This class can be','line_number':28,'multiline':False]['text':' regarded to only forward-declare Vector2.','line_number':29,'multiline':False]['text':' FloatType is the type returned by Norm() and Angle().  These methods are','line_number':35,'multiline':False]['text':' special because they return floating-point values even when VType is an','line_number':36,'multiline':False]['text':' integer.','line_number':37,'multiline':False]['text':' Create a new vector (0,0)','line_number':44,'multiline':False]['text':' Create a new vector (x,y)','line_number':46,'multiline':False]['text':' Create a new copy of the vector vb','line_number':48,'multiline':False]['text':' NOLINT(runtime/explicit)','line_number':49,'multiline':False]['text':' Keep only the two first coordinates of the vector vb','line_number':50,'multiline':False]['text':' Keep only the two first coordinates of the vector vb','line_number':52,'multiline':False]['text':' Convert from another vector type','line_number':54,'multiline':False]['text':' Return the size of the vector','line_number':57,'multiline':False]['text':' Modify the coordinates of the current vector','line_number':59,'multiline':False]['text':' Add two vectors, component by component','line_number':62,'multiline':False]['text':' Subtract two vectors, component by component','line_number':64,'multiline':False]['text':' Multiply a vector by a scalar','line_number':66,'multiline':False]['text':' Divide a vector by a scalar','line_number':68,'multiline':False]['text':' Multiply two vectors component by component','line_number':70,'multiline':False]['text':' Divide two vectors component by component','line_number':72,'multiline':False]['text':' Add two vectors, component by component','line_number':74,'multiline':False]['text':' Subtract two vectors, component by component','line_number':76,'multiline':False]['text':' Change the sign of the components of a vector','line_number':78,'multiline':False]['text':' Dot product.  Be aware that if VType is an integer type, the high bits of','line_number':80,'multiline':False]['text':' the result are silently discarded.','line_number':81,'multiline':False]['text':' Multiplication by a scalar','line_number':83,'multiline':False]['text':' Division by a scalar','line_number':85,'multiline':False]['text':' Cross product.  Be aware that if VType is an integer type, the high bits','line_number':87,'multiline':False]['text':' of the result are silently discarded.','line_number':88,'multiline':False]['text':' Access component #b for read/write operations','line_number':90,'multiline':False]['text':' Access component #b for read only operations','line_number':92,'multiline':False]['text':' Labeled Accessor methods.','line_number':94,'multiline':False]['text':' return a pointer to the data array for interface with other libraries','line_number':100,'multiline':False]['text':' like opencv','line_number':101,'multiline':False]['text':' Return the squared Euclidean norm of the vector.  Be aware that if VType','line_number':104,'multiline':False]['text':' is an integer type, the high bits of the result are silently discarded.','line_number':105,'multiline':False]['text':' Return the Euclidean norm of the vector.  Note that if VType is an','line_number':107,'multiline':False]['text':' integer type, the return value is correct only if the *squared* norm does','line_number':108,'multiline':False]['text':' not overflow VType.','line_number':109,'multiline':False]['text':' return the angle between "this" and v in radians','line_number':111,'multiline':False]['text':' Return a normalized version of the vector if the norm of the','line_number':113,'multiline':False]['text':' vector is not 0.  Not to be used with integer types.','line_number':114,'multiline':False]['text':' Compare two vectors, return true if all their components are equal','line_number':116,'multiline':False]['text':' this operator is mostly useful for  integer types','line_number':117,'multiline':False]['text':' for floating point types prefer "aequal"','line_number':118,'multiline':False]['text':' Compare two vectors, return true if all their components are within','line_number':121,'multiline':False]['text':' a difference of margin.','line_number':122,'multiline':False]['text':' Compare two vectors, these comparisons are mostly for interaction','line_number':125,'multiline':False]['text':' with STL.','line_number':126,'multiline':False]['text':' return a vector orthogonal to the current one','line_number':132,'multiline':False]['text':' with the same norm and counterclockwise to it','line_number':133,'multiline':False]['text':' take the sqrt of each component and return a vector containing those values','line_number':135,'multiline':False]['text':' Take the fabs of each component and return a vector containing','line_number':137,'multiline':False]['text':' those values.','line_number':138,'multiline':False]['text':' Take the absolute value of each component and return a vector containing','line_number':140,'multiline':False]['text':' those values.  This method should only be used when VType is a signed','line_number':141,'multiline':False]['text':' integer type that is not wider than "int".','line_number':142,'multiline':False]['text':' take the floor of each component and return a vector containing','line_number':144,'multiline':False]['text':' those values','line_number':145,'multiline':False]['text':' Take the ceil of each component and return a vector containing','line_number':147,'multiline':False]['text':' those values.','line_number':148,'multiline':False]['text':' take the round of each component and return a vector containing those','line_number':150,'multiline':False]['text':' values','line_number':151,'multiline':False]['text':' take the round of each component and return an integer vector containing','line_number':153,'multiline':False]['text':' those values','line_number':154,'multiline':False]['text':' Reset all the coordinates of the vector to 0','line_number':156,'multiline':False]['text':' return true if one of the components is not a number','line_number':159,'multiline':False]['text':' return an invalid floating point vector','line_number':162,'multiline':False]['text':' Multiply by a scalar.','line_number':166,'multiline':False]['text':' perform k /','line_number':169,'multiline':False]['text':' return a vector containing the max of v1 and v2 component by component','line_number':172,'multiline':False]['text':' return a vector containing the min of v1 and v2 component by component','line_number':175,'multiline':False]['text':' debug printing','line_number':178,'multiline':False]['text':' NOLINT','line_number':180,'multiline':False]['text':' TODO(user): Declare extern templates for these types.','line_number':183,'multiline':False]['text':' UTIL_MATH_VECTOR2_H__','line_number':189,'multiline':False]