['text':' Copyright 2005 Google Inc.','line_number':1,'multiline':False]['text':' All Rights Reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Useful integer and floating point limits and type traits.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This partially replaces/duplictes numeric_limits<> from <limits>.','line_number':7,'multiline':False]['text':' We get a Google-style class that we have a greater control over','line_number':8,'multiline':False]['text':' and thus can add new features to it or fix whatever happens to be broken in','line_number':9,'multiline':False]['text':' numeric_limits for the compilers we use.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' ========================================================================= //','line_number':21,'multiline':False]['text':' Useful integer and floating point limits and type traits.','line_number':23,'multiline':False]['text':' This is just for the documentation;','line_number':24,'multiline':False]['text':' real members are defined in our specializations below.','line_number':25,'multiline':False]['text':' Type name.','line_number':27,'multiline':False]['text':' Unsigned version of the Type with the same byte size.','line_number':29,'multiline':False]['text':' Same as Type for floating point and unsigned types.','line_number':30,'multiline':False]['text':' If the type supports negative values.','line_number':32,'multiline':False]['text':' If the type supports only integer values.','line_number':34,'multiline':False]['text':' Magnitude-wise smallest representable positive value.','line_number':36,'multiline':False]['text':' Magnitude-wise largest representable positive value.','line_number':38,'multiline':False]['text':' Smallest representable value.','line_number':40,'multiline':False]['text':' Largest representable value.','line_number':42,'multiline':False]['text':' Magnitude-wise smallest representable negative value.','line_number':44,'multiline':False]['text':' Present only if kIsSigned.','line_number':45,'multiline':False]['text':' Magnitude-wise largest representable negative value.','line_number':47,'multiline':False]['text':' Present only if kIsSigned.','line_number':48,'multiline':False]['text':' Smallest integer x such that 10^x is representable.','line_number':50,'multiline':False]['text':' Largest integer x such that 10^x is representable.','line_number':52,'multiline':False]['text':' Smallest positive value such that Type(1) + kEpsilon != Type(1)','line_number':54,'multiline':False]['text':' Typical rounding error that is enough to cover','line_number':56,'multiline':False]['text':' a few simple floating-point operations.','line_number':57,'multiline':False]['text':' Slightly larger than kEpsilon to account for a few rounding errors.','line_number':58,'multiline':False]['text':' Is zero if kIsInteger.','line_number':59,'multiline':False]['text':' Number of decimal digits of mantissa precision.','line_number':61,'multiline':False]['text':' Present only if !kIsInteger.','line_number':62,'multiline':False]['text':' Not a number, i.e. result of 0/0.','line_number':64,'multiline':False]['text':' Present only if !kIsInteger.','line_number':65,'multiline':False]['text':' Positive infinity, i.e. result of 1/0.','line_number':67,'multiline':False]['text':' Present only if !kIsInteger.','line_number':68,'multiline':False]['text':' Negative infinity, i.e. result of -1/0.','line_number':70,'multiline':False]['text':' Present only if !kIsInteger.','line_number':71,'multiline':False]['text':' NOTE: Special floating point values behave','line_number':74,'multiline':False]['text':' in a special (but mathematically-logical) way','line_number':75,'multiline':False]['text':' in terms of (in)equalty comparison and mathematical operations','line_number':76,'multiline':False]['text':' -- see out unittest for examples.','line_number':77,'multiline':False]['text':' Special floating point value testers.','line_number':79,'multiline':False]['text':' Present in integer types for convenience.','line_number':80,'multiline':False]['text':' ========================================================================= //','line_number':88,'multiline':False]['text':' All #define-s below are simply to refactor the declarations of','line_number':90,'multiline':False]['text':' MathLimits template specializations.','line_number':91,'multiline':False]['text':' They are all #undef-ined below.','line_number':92,'multiline':False]['text':' The hoop-jumping in *_INT_(MAX|MIN) below is so that the compiler does not','line_number':94,'multiline':False]['text':' get an overflow while computing the constants.','line_number':95,'multiline':False]['text':' Compile-time selected log10-related constants for integer types.','line_number':106,'multiline':False]['text':' ========================================================================= //','line_number':184,'multiline':False]['text':' Lacks built-in isnan() and isinf()','line_number':185,'multiline':False]['text':' We can't put floating-point constant values in the header here because','line_number':201,'multiline':False]['text':' such constants are not considered to be primitive-type constants by gcc.','line_number':202,'multiline':False]['text':' CAVEAT: Hence, they are going to be initialized only during','line_number':203,'multiline':False]['text':' the global objects construction time.','line_number':204,'multiline':False]['text':' ========================================================================= //','line_number':236,'multiline':False]['text':' UTIL_MATH_MATHLIMITS_H__','line_number':238,'multiline':False]