['text':' Copyright 2006 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' This is a simple class for assembling polygons out of edges.  It requires','line_number':30,'multiline':False]['text':' that no two edges cross.  It can handle both directed and undirected edges,','line_number':31,'multiline':False]['text':' and optionally it can also remove duplicate edge pairs (consisting of two','line_number':32,'multiline':False]['text':' identical edges or an edge and its reverse edge).  This is useful for','line_number':33,'multiline':False]['text':' computing seamless unions of polygons that have been cut into pieces.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' Here are some of the situations this class was designed to handle:','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' 1. Computing the union of disjoint polygons that may share part of their','line_number':38,'multiline':False]['text':'    boundaries.  For example, reassembling a lake that has been split into','line_number':39,'multiline':False]['text':'    two loops by a state boundary.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' 2. Constructing polygons from input data that does not follow S2','line_number':42,'multiline':False]['text':'    conventions, i.e. where loops may have repeated vertices, or distinct','line_number':43,'multiline':False]['text':'    loops may share edges, or shells and holes have opposite or unspecified','line_number':44,'multiline':False]['text':'    orientations.','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' 3. Computing the symmetric difference of a set of polygons whose edges','line_number':47,'multiline':False]['text':'    intersect only at vertices.  This can be used to implement a limited','line_number':48,'multiline':False]['text':'    form of polygon intersection or subtraction as well as unions.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' 4. As a tool for implementing other polygon operations by generating a','line_number':51,'multiline':False]['text':'    collection of directed edges and then assembling them into loops.','line_number':52,'multiline':False]['text':' These are the options that should be used for assembling well-behaved','line_number':60,'multiline':False]['text':' input data into polygons.  All edges should be directed such that','line_number':61,'multiline':False]['text':' "shells" and "holes" have opposite orientations (typically CCW shells and','line_number':62,'multiline':False]['text':' clockwise holes), unless it is known that shells and holes do not share','line_number':63,'multiline':False]['text':' any edges.','line_number':64,'multiline':False]['text':' These are the options that should be used for assembling polygons that do','line_number':67,'multiline':False]['text':' not follow the conventions above, e.g. where edge directions may vary','line_number':68,'multiline':False]['text':' within a single loop, or shells and holes are not oppositely oriented and','line_number':69,'multiline':False]['text':' may share edges.','line_number':70,'multiline':False]['text':' These are the options that should be used for assembling edges where the','line_number':73,'multiline':False]['text':' desired output is a collection of loops rather than a polygon, and edges','line_number':74,'multiline':False]['text':' may occur more than once.  Edges are treated as undirected and are not','line_number':75,'multiline':False]['text':' XORed together.','line_number':76,'multiline':False]['text':' Default value: false.','line_number':79,'multiline':False]['text':'','line_number':80,'multiline':False]['text':' If "undirected_edges" is false, then the input is assumed to consist of','line_number':81,'multiline':False]['text':' edges that can be assembled into oriented loops without reversing any of','line_number':82,'multiline':False]['text':' the edges.  Otherwise, "undirected_edges" should be set to true.','line_number':83,'multiline':False]['text':' Default value: true.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' If "xor_edges" is true, then any duplicate edge pairs are removed.  This','line_number':89,'multiline':False]['text':' is useful for computing the union of a collection of polygons whose','line_number':90,'multiline':False]['text':' interiors are disjoint but whose boundaries may share some common edges','line_number':91,'multiline':False]['text':' (e.g. computing the union of South Africa, Lesotho, and Swaziland).','line_number':92,'multiline':False]['text':'','line_number':93,'multiline':False]['text':' Note that for directed edges, a "duplicate edge pair" consists of an edge','line_number':94,'multiline':False]['text':' and its corresponding reverse edge.  This means that either (a) "shells"','line_number':95,'multiline':False]['text':' and "holes" must have opposite orientations, or (b) shells and holes do','line_number':96,'multiline':False]['text':' not share edges.  Otherwise undirected_edges() should be specified.','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' There are only two reasons to turn off xor_edges():','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':'  (1) AssemblePolygon() will be called, and you want to assert that there','line_number':101,'multiline':False]['text':'      are no duplicate edge pairs in the input.','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'  (2) AssembleLoops() will be called, and you want to keep abutting loops','line_number':104,'multiline':False]['text':'      separate in the output rather than merging their regions together','line_number':105,'multiline':False]['text':'      (e.g. assembling loops for Kansas City, KS and Kansas City, MO','line_number':106,'multiline':False]['text':'      simultaneously).','line_number':107,'multiline':False]['text':' Default value: false.','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' If true, IsValid() is called on all loops and polygons before','line_number':113,'multiline':False]['text':' constructing them.  If any loop is invalid (e.g. self-intersecting), it','line_number':114,'multiline':False]['text':' is rejected and returned as a set of "unused edges".  Any remaining valid','line_number':115,'multiline':False]['text':' loops are kept.  If the entire polygon is invalid (e.g. two loops','line_number':116,'multiline':False]['text':' intersect), then all loops are rejected and returned as unused edges.','line_number':117,'multiline':False]['text':' Default value: 0.','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' If set to a positive value, all vertex pairs that are separated by less','line_number':123,'multiline':False]['text':' than this distance will be merged together.  Note that vertices can move','line_number':124,'multiline':False]['text':' arbitrarily far if there is a long chain of vertices separated by less','line_number':125,'multiline':False]['text':' than this distance.','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':' This method is useful for assembling polygons out of input data where','line_number':128,'multiline':False]['text':' vertices and/or edges may not be perfectly aligned.','line_number':129,'multiline':False]['text':' Default value: 0.866 (approximately sqrt(3)/2).','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':' The edge splice radius is automatically set to this fraction of the vertex','line_number':135,'multiline':False]['text':' merge radius.  If the edge splice radius is positive, then all vertices','line_number':136,'multiline':False]['text':' that are closer than this distance to an edge are spliced into that edge.','line_number':137,'multiline':False]['text':' Note that edges can move arbitrarily far if there is a long chain of','line_number':138,'multiline':False]['text':' vertices in just the right places.','line_number':139,'multiline':False]['text':'','line_number':140,'multiline':False]['text':' You can turn off edge splicing by setting this value to zero.  This will','line_number':141,'multiline':False]['text':' save some time if you don't need this feature, or you don't want vertices','line_number':142,'multiline':False]['text':' to be spliced into nearby edges for some reason.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' Note that the edge splice fraction must be less than sqrt(3)/2 in order to','line_number':145,'multiline':False]['text':' avoid infinite loops in the merge algorithm.  The default value is very','line_number':146,'multiline':False]['text':' close to this maximum and therefore results in the maximum amount of edge','line_number':147,'multiline':False]['text':' splicing for a given vertex merge radius.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' The only reason to reduce the edge splice fraction is if you want to limit','line_number':150,'multiline':False]['text':' changes in edge direction due to splicing.  The direction of an edge can','line_number':151,'multiline':False]['text':' change by up to asin(edge_splice_fraction) due to each splice.  Thus by','line_number':152,'multiline':False]['text':' default, edges are allowed to change direction by up to 60 degrees per','line_number':153,'multiline':False]['text':' splice.  However, note that most direction changes are much smaller than','line_number':154,'multiline':False]['text':' this: the worst case occurs only if the vertex being spliced is just','line_number':155,'multiline':False]['text':' outside the vertex merge radius from one of the edge endpoints.','line_number':156,'multiline':False]['text':' Add the given edge to the polygon builder.  This method should be used','line_number':175,'multiline':False]['text':' for input data that may not follow S2 polygon conventions.  Note that','line_number':176,'multiline':False]['text':' edges are not allowed to cross each other.  Also note that as a','line_number':177,'multiline':False]['text':' convenience, edges where v0 == v1 are ignored.','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' Returns true if an edge was added, and false if an edge was erased','line_number':180,'multiline':False]['text':' (due to XORing) or not added (if both endpoints were the same).','line_number':181,'multiline':False]['text':' Add all edges in the given loop.  If the sign() of the loop is negative','line_number':184,'multiline':False]['text':' (i.e. this loop represents a hole), the reverse edges are added instead.','line_number':185,'multiline':False]['text':' This implies that "shells" are CCW and "holes" are CW, as required for','line_number':186,'multiline':False]['text':' the directed edges convention described above.','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' This method does not take ownership of the loop.','line_number':189,'multiline':False]['text':' Add all loops in the given polygon.  Shells and holes are added with','line_number':192,'multiline':False]['text':' opposite orientations as described for AddLoop().','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' This method does not take ownership of the polygon.','line_number':195,'multiline':False]['text':' This type is used to return any edges that could not be assembled.','line_number':198,'multiline':False]['text':' Assembles the given edges into as many non-crossing loops as possible.','line_number':201,'multiline':False]['text':' When there is a choice about how to assemble the loops, then CCW loops','line_number':202,'multiline':False]['text':' are preferred.  Returns true if all edges were assembled.  If','line_number':203,'multiline':False]['text':' "unused_edges" is not NULL, it is initialized to the set of edges that','line_number':204,'multiline':False]['text':' could not be assembled into loops.','line_number':205,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' Note that if xor_edges() is false and duplicate edge pairs may be','line_number':207,'multiline':False]['text':' present, then undirected_edges() should be specified unless all loops can','line_number':208,'multiline':False]['text':' be assembled in a counter-clockwise direction.  Otherwise this method may','line_number':209,'multiline':False]['text':' not be able to assemble all loops due to its preference for CCW loops.','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' This method resets the S2PolygonBuilder state so that it can be reused.','line_number':212,'multiline':False]['text':' Like AssembleLoops, but normalizes all the loops so that they enclose','line_number':215,'multiline':False]['text':' less than half the sphere, and then assembles the loops into a polygon.','line_number':216,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' For this method to succeed, there should be no duplicate edges in the','line_number':218,'multiline':False]['text':' input.  If this is not known to be true, then the "xor_edges" option','line_number':219,'multiline':False]['text':' should be set (which is true by default).','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':' Note that S2Polygons cannot represent arbitrary regions on the sphere,','line_number':222,'multiline':False]['text':' because of the limitation that no loop encloses more than half of the','line_number':223,'multiline':False]['text':' sphere.  For example, an S2Polygon cannot represent a 100km wide band','line_number':224,'multiline':False]['text':' around the equator.  In such cases, this method will return the','line_number':225,'multiline':False]['text':' *complement* of the expected region.  So for example if all the world's','line_number':226,'multiline':False]['text':' coastlines were assembled, the output S2Polygon would represent the land','line_number':227,'multiline':False]['text':' area (irrespective of the input edge or loop orientations).','line_number':228,'multiline':False]['text':' This function is only for debugging.  If it is called, then points will','line_number':231,'multiline':False]['text':' be transformed by the inverse of the given matrix before being printed as','line_number':232,'multiline':False]['text':' lat-lng coordinates in degrees.  "m" should be orthonormal.','line_number':233,'multiline':False]['text':' These functions print either a single vertex, all edges from a single','line_number':237,'multiline':False]['text':' vertex, or all edges in the builder.','line_number':238,'multiline':False]['text':' Return true if the given edge exists.','line_number':245,'multiline':False]['text':' Erase an edge or an entire loop.  The edge/loop must exist.','line_number':248,'multiline':False]['text':' Assembles and returns a single loop starting with the given edge.','line_number':252,'multiline':False]['text':' If a loop cannot be assembled starting from this edge, returns NULL','line_number':253,'multiline':False]['text':' and updates "unused_edges".','line_number':254,'multiline':False]['text':' Adds all the given edges to "unused_edges".','line_number':258,'multiline':False]['text':' Builds a map indicating which vertices need to be moved from their','line_number':261,'multiline':False]['text':' current position to a new position, and also returns a spatial index','line_number':262,'multiline':False]['text':' containing all of the vertices that do not need to be moved.','line_number':263,'multiline':False]['text':' Moves a set of vertices from old to new positions.','line_number':268,'multiline':False]['text':' Modifies each edge by splicing in any vertices whose distance to the edge','line_number':271,'multiline':False]['text':' is at most (edge_splice_fraction() * vertex_merge_radius()).','line_number':272,'multiline':False]['text':' This is only used for debugging purposes.','line_number':277,'multiline':False]['text':' The current set of edges, grouped by origin.  The set of destination','line_number':280,'multiline':False]['text':' vertices is a multiset so that the same edge can be present more than','line_number':281,'multiline':False]['text':' once.  We could have also used a multiset<pair<S2Point, S2Point> >,','line_number':282,'multiline':False]['text':' but this representation is a bit more convenient.','line_number':283,'multiline':False]['text':' Unique collection of the starting (first) vertex of all edges,','line_number':288,'multiline':False]['text':' in the order they are added to edges_.','line_number':289,'multiline':False]['text':' UTIL_GEOMETRY_S2POLYGONBUILDER_H__','line_number':310,'multiline':False]