['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Defined in the cc file. A helper class for AreBoundariesCrossing.','line_number':22,'multiline':False]['text':' Indexing structure to efficiently compute intersections.','line_number':25,'multiline':False]['text':' There is no need to overwrite Reset(), as the only data that's','line_number':31,'multiline':False]['text':' used to implement this class is all contained in the loop data.','line_number':32,'multiline':False]['text':' void Reset();','line_number':33,'multiline':False]['text':' An S2Loop represents a simple spherical polygon.  It consists of a single','line_number':43,'multiline':False]['text':' chain of vertices where the first vertex is implicitly connected to the','line_number':44,'multiline':False]['text':' last.  All loops are defined to have a CCW orientation, i.e. the interior','line_number':45,'multiline':False]['text':' of the polygon is on the left side of the edges.  This implies that a','line_number':46,'multiline':False]['text':' clockwise loop enclosing a small area is interpreted to be a CCW loop','line_number':47,'multiline':False]['text':' enclosing a very large area.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' Loops are not allowed to have any duplicate vertices (whether adjacent or','line_number':50,'multiline':False]['text':' not), and non-adjacent edges are not allowed to intersect.  Loops must have','line_number':51,'multiline':False]['text':' at least 3 vertices.  Although these restrictions are not enforced in','line_number':52,'multiline':False]['text':' optimized code, you may get unexpected results if they are violated.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' Point containment is defined such that if the sphere is subdivided into','line_number':55,'multiline':False]['text':' faces (loops), every point is contained by exactly one face.  This implies','line_number':56,'multiline':False]['text':' that loops do not necessarily contain all (or any) of their vertices.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' TODO(user): When doing operations on two loops, always create the','line_number':59,'multiline':False]['text':' edgeindex for the bigger of the two.  Same for polygons.','line_number':60,'multiline':False]['text':' Create an empty S2Loop that should be initialized by calling Init() or','line_number':63,'multiline':False]['text':' Decode().','line_number':64,'multiline':False]['text':' Convenience constructor that calls Init() with the given vertices.','line_number':67,'multiline':False]['text':' Initialize a loop connecting the given vertices.  The last vertex is','line_number':70,'multiline':False]['text':' implicitly connected to the first.  All points should be unit length.','line_number':71,'multiline':False]['text':' Loops must have at least 3 vertices.','line_number':72,'multiline':False]['text':' This parameter should be removed as soon as people stop using the','line_number':75,'multiline':False]['text':' deprecated version of IsValid.','line_number':76,'multiline':False]['text':' Check whether this loop is valid.  Note that in debug mode, validity','line_number':79,'multiline':False]['text':' is checked at loop creation time, so IsValid()','line_number':80,'multiline':False]['text':' should always return true.','line_number':81,'multiline':False]['text':' If err is not NULL, output errors into it.','line_number':82,'multiline':False]['text':' These two versions are deprecated and ignore max_adjacent.','line_number':86,'multiline':False]['text':' DEPRECATED.','line_number':87,'multiline':False]['text':' DEPRECATED.','line_number':89,'multiline':False]['text':' Initialize a loop corresponding to the given cell.','line_number':92,'multiline':False]['text':' The depth of a loop is defined as its nesting level within its containing','line_number':97,'multiline':False]['text':' polygon.  "Outer shell" loops have depth 0, holes within those loops have','line_number':98,'multiline':False]['text':' depth 1, shells within those holes have depth 2, etc.  This field is only','line_number':99,'multiline':False]['text':' used by the S2Polygon implementation.','line_number':100,'multiline':False]['text':' Return true if this loop represents a hole in its containing polygon.','line_number':104,'multiline':False]['text':' The sign of a loop is -1 if the loop represents a hole in its containing','line_number':107,'multiline':False]['text':' polygon, and +1 otherwise.','line_number':108,'multiline':False]['text':' For convenience, we make two entire copies of the vertex list available:','line_number':113,'multiline':False]['text':' vertex(n..2*n-1) is mapped to vertex(0..n-1), where n == num_vertices().','line_number':114,'multiline':False]['text':' Return true if the loop area is at most 2*Pi.  Degenerate loops are','line_number':122,'multiline':False]['text':' handled consistently with S2::RobustCCW(), i.e., if a loop can be','line_number':123,'multiline':False]['text':' expressed as the union of degenerate or nearly-degenerate CCW triangles,','line_number':124,'multiline':False]['text':' then it will always be considered normalized.','line_number':125,'multiline':False]['text':' Invert the loop if necessary so that the area enclosed by the loop is at','line_number':128,'multiline':False]['text':' most 2*Pi.','line_number':129,'multiline':False]['text':' Reverse the order of the loop vertices, effectively complementing','line_number':132,'multiline':False]['text':' the region represented by the loop.','line_number':133,'multiline':False]['text':' Return the area of the loop interior, i.e. the region on the left side of','line_number':136,'multiline':False]['text':' the loop.  The return value is between 0 and 4*Pi.  (Note that the return','line_number':137,'multiline':False]['text':' value is not affected by whether this loop is a "hole" or a "shell".)','line_number':138,'multiline':False]['text':' Return the true centroid of the loop multiplied by the area of the loop','line_number':141,'multiline':False]['text':' (see s2.h for details on centroids).  The result is not unit length, so','line_number':142,'multiline':False]['text':' you may want to normalize it.  Also note that in general, the centroid','line_number':143,'multiline':False]['text':' may not be contained by the loop.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' We prescale by the loop area for two reasons: (1) it is cheaper to','line_number':146,'multiline':False]['text':' compute this way, and (2) it makes it easier to compute the centroid of','line_number':147,'multiline':False]['text':' more complicated shapes (by splitting them into disjoint regions and','line_number':148,'multiline':False]['text':' adding their centroids).','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' Note that the return value is not affected by whether this loop is a','line_number':151,'multiline':False]['text':' "hole" or a "shell".','line_number':152,'multiline':False]['text':' Return the sum of the turning angles at each vertex.  The return value is','line_number':155,'multiline':False]['text':' positive if the loop is counter-clockwise, negative if the loop is','line_number':156,'multiline':False]['text':' clockwise, and zero if the loop is a great circle.  Degenerate and','line_number':157,'multiline':False]['text':' nearly-degenerate loops are handled consistently with S2::RobustCCW().','line_number':158,'multiline':False]['text':' So for example, if a loop has zero area (i.e., it is a very small CCW','line_number':159,'multiline':False]['text':' loop) then the turning angle will always be negative.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' This quantity is also called the "geodesic curvature" of the loop.','line_number':162,'multiline':False]['text':' Return true if the region contained by this loop is a superset of the','line_number':165,'multiline':False]['text':' region contained by the given other loop.','line_number':166,'multiline':False]['text':' Return true if the region contained by this loop intersects the region','line_number':169,'multiline':False]['text':' contained by the given other loop.','line_number':170,'multiline':False]['text':' Given two loops of a polygon (see s2polygon.h for requirements), return','line_number':173,'multiline':False]['text':' true if A contains B.  This version of Contains() is much cheaper since','line_number':174,'multiline':False]['text':' it does not need to check whether the boundaries of the two loops cross.','line_number':175,'multiline':False]['text':' Return +1 if A contains B (i.e. the interior of B is a subset of the','line_number':178,'multiline':False]['text':' interior of A), -1 if the boundaries of A and B cross, and 0 otherwise.','line_number':179,'multiline':False]['text':' Requires that A does not properly contain the complement of B, i.e.','line_number':180,'multiline':False]['text':' A and B do not contain each other's boundaries.  This method is used','line_number':181,'multiline':False]['text':' for testing whether multi-loop polygons contain each other.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' WARNING: there is a bug in this function - it does not detect loop','line_number':184,'multiline':False]['text':' crossings in certain situations involving shared edges.  CL 2926852 works','line_number':185,'multiline':False]['text':' around this bug for polygon intersection, but it probably effects other','line_number':186,'multiline':False]['text':' tests.  TODO: fix ContainsOrCrosses() and revert CL 2926852.','line_number':187,'multiline':False]['text':' Return true if two loops have the same boundary.  This is true if and','line_number':190,'multiline':False]['text':' only if the loops have the same vertices in the same cyclic order.','line_number':191,'multiline':False]['text':' (For testing purposes.)','line_number':192,'multiline':False]['text':' Return true if two loops have the same boundary except for vertex','line_number':195,'multiline':False]['text':' perturbations.  More precisely, the vertices in the two loops must be in','line_number':196,'multiline':False]['text':' the same cyclic order, and corresponding vertex pairs must be separated','line_number':197,'multiline':False]['text':' by no more than "max_error".  (For testing purposes.)','line_number':198,'multiline':False]['text':' Return true if the two loop boundaries are within "max_error" of each','line_number':201,'multiline':False]['text':' other along their entire lengths.  The two loops may have different','line_number':202,'multiline':False]['text':' numbers of vertices.  More precisely, this method returns true if the two','line_number':203,'multiline':False]['text':' loops have parameterizations a:[0,1] -> S^2, b:[0,1] -> S^2 such that','line_number':204,'multiline':False]['text':' distance(a(t), b(t)) <= max_error for all t.  You can think of this as','line_number':205,'multiline':False]['text':' testing whether it is possible to drive two cars all the way around the','line_number':206,'multiline':False]['text':' two loops such that no car ever goes backward and the cars are always','line_number':207,'multiline':False]['text':' within "max_error" of each other.  (For testing purposes.)','line_number':208,'multiline':False]['text':' This method computes the oriented surface integral of some quantity f(x)','line_number':211,'multiline':False]['text':' over the loop interior, given a function f_tri(A,B,C) that returns the','line_number':212,'multiline':False]['text':' corresponding integral over the spherical triangle ABC.  Here "oriented','line_number':213,'multiline':False]['text':' surface integral" means:','line_number':214,'multiline':False]['text':'','line_number':215,'multiline':False]['text':' (1) f_tri(A,B,C) must be the integral of f if ABC is counterclockwise,','line_number':216,'multiline':False]['text':'     and the integral of -f if ABC is clockwise.','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' (2) The result of this function is *either* the integral of f over the','line_number':219,'multiline':False]['text':'     loop interior, or the integral of (-f) over the loop exterior.','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':' Note that there are at least two common situations where it easy to work','line_number':222,'multiline':False]['text':' around property (2) above:','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':'  - If the integral of f over the entire sphere is zero, then it doesn't','line_number':225,'multiline':False]['text':'    matter which case is returned because they are always equal.','line_number':226,'multiline':False]['text':'','line_number':227,'multiline':False]['text':'  - If f is non-negative, then it is easy to detect when the integral over','line_number':228,'multiline':False]['text':'    the loop exterior has been returned, and the integral over the loop','line_number':229,'multiline':False]['text':'    interior can be obtained by adding the integral of f over the entire','line_number':230,'multiline':False]['text':'    unit sphere (a constant) to the result.','line_number':231,'multiline':False]['text':'','line_number':232,'multiline':False]['text':' Also requires that the default constructor for T must initialize the','line_number':233,'multiline':False]['text':' value to zero.  (This is true for built-in types such as "double".)','line_number':234,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////','line_number':239,'multiline':False]['text':' S2Region interface (see s2region.h for details):','line_number':240,'multiline':False]['text':' GetRectBound() is guaranteed to return exact results, while GetCapBound()','line_number':242,'multiline':False]['text':' is conservative.','line_number':243,'multiline':False]['text':' The same as Contains() below, just virtual.','line_number':251,'multiline':False]['text':' The point 'p' does not need to be normalized.','line_number':254,'multiline':False]['text':' Internal constructor used only by Clone() that makes a deep copy of','line_number':262,'multiline':False]['text':' its argument.','line_number':263,'multiline':False]['text':' Internal implementation of the Decode and DecodeWithinScope methods above.','line_number':269,'multiline':False]['text':' If within_scope is true, memory is allocated for vertices_ and data','line_number':270,'multiline':False]['text':' is copied from the decoder using memcpy. If it is false, vertices_','line_number':271,'multiline':False]['text':' will point to the memory area inside the decoder, and the field','line_number':272,'multiline':False]['text':' owns_vertices_ is set to false.','line_number':273,'multiline':False]['text':' Internal implementation of the Intersects() method above.','line_number':277,'multiline':False]['text':' Return an index "first" and a direction "dir" (either +1 or -1) such that','line_number':280,'multiline':False]['text':' the vertex sequence (first, first+dir, ..., first+(n-1)*dir) does not','line_number':281,'multiline':False]['text':' change when the loop vertex order is rotated or inverted.  This allows','line_number':282,'multiline':False]['text':' the loop vertices to be traversed in a canonical order.  The return','line_number':283,'multiline':False]['text':' values are chosen such that (first, ..., first+n*dir) are in the range','line_number':284,'multiline':False]['text':' [0, 2*n-1] as expected by the vertex() method.','line_number':285,'multiline':False]['text':' Return the index of a vertex at point "p", or -1 if not found.','line_number':288,'multiline':False]['text':' The return value is in the range 1..num_vertices_ if found.','line_number':289,'multiline':False]['text':' This method checks all edges of this loop (A) for intersection','line_number':292,'multiline':False]['text':' against all edges of B.  If there is any shared vertex , the','line_number':293,'multiline':False]['text':' wedges centered at this vertex are sent to wedge_processor.','line_number':294,'multiline':False]['text':'','line_number':295,'multiline':False]['text':' Returns true only when the edges intersect in the sense of','line_number':296,'multiline':False]['text':' S2EdgeUtil::RobustCrossing, returns false immediately when the','line_number':297,'multiline':False]['text':' wedge_processor returns true: this means the wedge processor','line_number':298,'multiline':False]['text':' knows the value of the property that the caller wants to compute,','line_number':299,'multiline':False]['text':' and no further inspection is needed.  For instance, if the','line_number':300,'multiline':False]['text':' property is "loops intersect", then a wedge intersection is all','line_number':301,'multiline':False]['text':' it takes to return true.','line_number':302,'multiline':False]['text':'','line_number':303,'multiline':False]['text':' See Contains(), Intersects() and ContainsOrCrosses() for the','line_number':304,'multiline':False]['text':' three uses of this function.','line_number':305,'multiline':False]['text':' When the loop is modified (the only cae being Invert() at this time),','line_number':309,'multiline':False]['text':' the indexing structures need to be deleted as they become invalid.','line_number':310,'multiline':False]['text':' We store the vertices in an array rather than a vector because we don't','line_number':313,'multiline':False]['text':' need any STL methods, and computing the number of vertices using size()','line_number':314,'multiline':False]['text':' would be relatively expensive (due to division by sizeof(S2Point) == 24).','line_number':315,'multiline':False]['text':' When DecodeWithinScope is used to initialize the loop, we do not','line_number':316,'multiline':False]['text':' take ownership of the memory for vertices_, and the owns_vertices_ field','line_number':317,'multiline':False]['text':' is used to prevent deallocation and overwriting.','line_number':318,'multiline':False]['text':' Quadtree index structure of this loop's edges.','line_number':327,'multiline':False]['text':' Map for speeding up FindVertex: We will compute a map from vertex to','line_number':330,'multiline':False]['text':' index in the vertex array as soon as there has been enough calls.','line_number':331,'multiline':False]['text':'////////////////// Implementation Details Follow ////////////////////////','line_number':338,'multiline':False]['text':' Since this method is templatized and public, the implementation needs to be','line_number':340,'multiline':False]['text':' in the .h file.','line_number':341,'multiline':False]['text':' We sum "f_tri" over a collection T of oriented triangles, possibly','line_number':346,'multiline':False]['text':' overlapping.  Let the sign of a triangle be +1 if it is CCW and -1','line_number':347,'multiline':False]['text':' otherwise, and let the sign of a point "x" be the sum of the signs of the','line_number':348,'multiline':False]['text':' triangles containing "x".  Then the collection of triangles T is chosen','line_number':349,'multiline':False]['text':' such that either:','line_number':350,'multiline':False]['text':'','line_number':351,'multiline':False]['text':'  (1) Each point in the loop interior has sign +1, and sign 0 otherwise; or','line_number':352,'multiline':False]['text':'  (2) Each point in the loop exterior has sign -1, and sign 0 otherwise.','line_number':353,'multiline':False]['text':'','line_number':354,'multiline':False]['text':' The triangles basically consist of a "fan" from vertex 0 to every loop','line_number':355,'multiline':False]['text':' edge that does not include vertex 0.  These triangles will always satisfy','line_number':356,'multiline':False]['text':' either (1) or (2).  However, what makes this a bit tricky is that','line_number':357,'multiline':False]['text':' spherical edges become numerically unstable as their length approaches','line_number':358,'multiline':False]['text':' 180 degrees.  Of course there is not much we can do if the loop itself','line_number':359,'multiline':False]['text':' contains such edges, but we would like to make sure that all the triangle','line_number':360,'multiline':False]['text':' edges under our control (i.e., the non-loop edges) are stable.  For','line_number':361,'multiline':False]['text':' example, consider a loop around the equator consisting of four equally','line_number':362,'multiline':False]['text':' spaced points.  This is a well-defined loop, but we cannot just split it','line_number':363,'multiline':False]['text':' into two triangles by connecting vertex 0 to vertex 2.','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':' We handle this type of situation by moving the origin of the triangle fan','line_number':366,'multiline':False]['text':' whenever we are about to create an unstable edge.  We choose a new','line_number':367,'multiline':False]['text':' location for the origin such that all relevant edges are stable.  We also','line_number':368,'multiline':False]['text':' create extra triangles with the appropriate orientation so that the sum','line_number':369,'multiline':False]['text':' of the triangle signs is still correct at every point.','line_number':370,'multiline':False]['text':' The maximum length of an edge for it to be considered numerically stable.','line_number':372,'multiline':False]['text':' The exact value is fairly arbitrary since it depends on the stability of','line_number':373,'multiline':False]['text':' the "f_tri" function.  The value below is quite conservative but could be','line_number':374,'multiline':False]['text':' reduced further if desired.','line_number':375,'multiline':False]['text':' The default constructor for T must initialize the value to zero.','line_number':378,'multiline':False]['text':' (This is true for built-in types such as "double".)','line_number':379,'multiline':False]['text':' Let V_i be vertex(i), let O be the current origin, and let length(A,B)','line_number':383,'multiline':False]['text':' be the length of edge (A,B).  At the start of each loop iteration, the','line_number':384,'multiline':False]['text':' "leading edge" of the triangle fan is (O,V_i), and we want to extend','line_number':385,'multiline':False]['text':' the triangle fan so that the leading edge is (O,V_i+1).','line_number':386,'multiline':False]['text':'','line_number':387,'multiline':False]['text':' Invariants:','line_number':388,'multiline':False]['text':'  1. length(O,V_i) < kMaxLength for all (i > 1).','line_number':389,'multiline':False]['text':'  2. Either O == V_0, or O is approximately perpendicular to V_0.','line_number':390,'multiline':False]['text':'  3. "sum" is the oriented integral of f over the area defined by','line_number':391,'multiline':False]['text':'     (O, V_0, V_1, ..., V_i).','line_number':392,'multiline':False]['text':' We are about to create an unstable edge, so choose a new origin O'','line_number':397,'multiline':False]['text':' for the triangle fan.','line_number':398,'multiline':False]['text':' The following point is well-separated from V_i and V_0 (and','line_number':401,'multiline':False]['text':' therefore V_i+1 as well).','line_number':402,'multiline':False]['text':' All edges of the triangle (O, V_0, V_i) are stable, so we can','line_number':405,'multiline':False]['text':' revert to using V_0 as the origin.','line_number':406,'multiline':False]['text':' (O, V_i+1) and (V_0, V_i) are antipodal pairs, and O and V_0 are','line_number':409,'multiline':False]['text':' perpendicular.  Therefore V_0.CrossProd(O) is approximately','line_number':410,'multiline':False]['text':' perpendicular to all of {O, V_0, V_i, V_i+1}, and we can choose','line_number':411,'multiline':False]['text':' this point O' as the new origin.','line_number':412,'multiline':False]['text':' Advance the edge (V_0,O) to (V_0,O').','line_number':415,'multiline':False]['text':' Advance the edge (O,V_i) to (O',V_i).','line_number':418,'multiline':False]['text':' Advance the edge (O,V_i) to (O,V_i+1).','line_number':421,'multiline':False]['text':' If the origin is not V_0, we need to sum one more triangle.','line_number':424,'multiline':False]['text':' Advance the edge (O,V_n-1) to (O,V_0).','line_number':426,'multiline':False]['text':' UTIL_GEOMETRY_S2LOOP_H__','line_number':432,'multiline':False]