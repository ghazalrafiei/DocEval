['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' Define storage for header file constants (the values are not needed','line_number':10,'multiline':False]['text':' here for integral constants).','line_number':11,'multiline':False]['text':' 14 * (2**-54)','line_number':16,'multiline':False]['text':' Enable debugging checks in s2 code?','line_number':17,'multiline':False]['text':' The hash function due to Bob Jenkins (see','line_number':27,'multiline':False]['text':' http://burtleburtle.net/bob/hash/index.html).','line_number':28,'multiline':False]['text':' 32bit version','line_number':29,'multiline':False]['text':' IEEE 754 has two representations for zero, positive zero and negative','line_number':42,'multiline':False]['text':' zero.  These two values compare as equal, and therefore we need them to','line_number':43,'multiline':False]['text':' hash to the same value.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' We handle this by simply clearing the top bit of every 32-bit value,','line_number':46,'multiline':False]['text':' which clears the sign bit on both big-endian and little-endian','line_number':47,'multiline':False]['text':' architectures.  This creates some additional hash collisions between','line_number':48,'multiline':False]['text':' points that differ only in the sign of their components, but this is','line_number':49,'multiline':False]['text':' rarely a problem with real data.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' The obvious alternative is to explicitly map all occurrences of positive','line_number':52,'multiline':False]['text':' zero to negative zero (or vice versa), but this is more expensive and','line_number':53,'multiline':False]['text':' makes the average case slower.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' We also mask off the low-bit because we've seen differences in','line_number':56,'multiline':False]['text':' some floating point operations (specifically 'fcos' on i386)','line_number':57,'multiline':False]['text':' between different implementations of the same architecure','line_number':58,'multiline':False]['text':' (e.g. 'Xeon 5345' vs. 'Opteron 270').  It's unknown how many bits','line_number':59,'multiline':False]['text':' of mask are sufficient to cover real world cases, but the intent','line_number':60,'multiline':False]['text':' is to be as conservative as possible in discarding bits.','line_number':61,'multiline':False]['text':' This function is significantly faster than calling HashTo32().','line_number':67,'multiline':False]['text':' We call CollapseZero() on every 32-bit chunk to avoid having endian','line_number':71,'multiline':False]['text':' dependencies.','line_number':72,'multiline':False]['text':' An arbitrary number','line_number':75,'multiline':False]['text':' Vector3::Ortho() always returns a point on the X-Y, Y-Z, or X-Z planes.','line_number':96,'multiline':False]['text':' This leads to many more degenerate cases in polygon operations.','line_number':97,'multiline':False]['text':' Already unit-length.','line_number':112,'multiline':False]['text':' The inverse of an orthonormal matrix is its transpose.','line_number':116,'multiline':False]['text':' The direction of a.CrossProd(b) becomes unstable as (a + b) or (a - b)','line_number':129,'multiline':False]['text':' approaches zero.  This leads to situations where a.CrossProd(b) is not','line_number':130,'multiline':False]['text':' very orthogonal to "a" and/or "b".  We could fix this using Gram-Schmidt,','line_number':131,'multiline':False]['text':' but we also want b.RobustCrossProd(a) == -a.RobustCrossProd(b).','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' The easiest fix is to just compute the cross product of (b+a) and (b-a).','line_number':134,'multiline':False]['text':' Mathematically, this cross product is exactly twice the cross product of','line_number':135,'multiline':False]['text':' "a" and "b", but it has the numerical advantage that (b+a) and (b-a)','line_number':136,'multiline':False]['text':' are always perpendicular (since "a" and "b" are unit length).  This','line_number':137,'multiline':False]['text':' yields a result that is nearly orthogonal to both "a" and "b" even if','line_number':138,'multiline':False]['text':' these two values differ only in the lowest bit of one component.','line_number':139,'multiline':False]['text':' The only result that makes sense mathematically is to return zero, but','line_number':146,'multiline':False]['text':' we find it more convenient to return an arbitrary orthogonal vector.','line_number':147,'multiline':False]['text':' We compute the signed volume of the parallelepiped ABC.  The usual','line_number':152,'multiline':False]['text':' formula for this is (AxB).C, but we compute it here using (CxA).B','line_number':153,'multiline':False]['text':' in order to ensure that ABC and CBA are not both CCW.  This follows','line_number':154,'multiline':False]['text':' from the following identities (which are true numerically, not just','line_number':155,'multiline':False]['text':' mathematically):','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':'     (1) x.CrossProd(y) == -(y.CrossProd(x))','line_number':158,'multiline':False]['text':'     (2) (-x).DotProd(y) == -(x.DotProd(y))','line_number':159,'multiline':False]['text':' We don't need RobustCrossProd() here because RobustCCW() does its own','line_number':165,'multiline':False]['text':' error estimation and calls ExpensiveCCW() if there is any uncertainty','line_number':166,'multiline':False]['text':' about the result.','line_number':167,'multiline':False]['text':' Below we define two versions of ExpensiveCCW().  The first version uses','line_number':171,'multiline':False]['text':' arbitrary-precision arithmetic (MPFloat) and the "simulation of simplicity"','line_number':172,'multiline':False]['text':' technique.  It is completely robust (i.e., it returns consistent results','line_number':173,'multiline':False]['text':' for all possible inputs).  The second version uses normal double-precision','line_number':174,'multiline':False]['text':' arithmetic.  It is numerically stable and handles many degeneracies well,','line_number':175,'multiline':False]['text':' but it is not perfectly robust.  It exists mainly for testing purposes, so','line_number':176,'multiline':False]['text':' that we can verify that certain tests actually require the more advanced','line_number':177,'multiline':False]['text':' techniques implemented by the first version.','line_number':178,'multiline':False]['text':' Below we define a floating-point type with enough precision so that it can','line_number':183,'multiline':False]['text':' represent the exact determinant of any 3x3 matrix of floating-point','line_number':184,'multiline':False]['text':' numbers.  We support two options: MPFloat (which is based on MPFR and is','line_number':185,'multiline':False]['text':' therefore subject to an LGPL license) and ExactFloat (which is based on the','line_number':186,'multiline':False]['text':' OpenSSL Bignum library and therefore has a permissive BSD-style license).','line_number':187,'multiline':False]['text':' ExactFloat only supports exact calculations with floating-point numbers.','line_number':191,'multiline':False]['text':' S2_USE_EXACTFLOAT','line_number':194,'multiline':False]['text':' MPFloat requires a "maximum precision" to be specified.','line_number':196,'multiline':False]['text':'','line_number':197,'multiline':False]['text':' To figure out how much precision we need, first observe that any double','line_number':198,'multiline':False]['text':' precision number can be represented as an integer by multiplying it by','line_number':199,'multiline':False]['text':' 2**1074.  This is because the minimum exponent is -1022, and denormalized','line_number':200,'multiline':False]['text':' numbers have 52 bits after the leading "0".  On the other hand, the largest','line_number':201,'multiline':False]['text':' double precision value has the form 1.x * (2**1023), which is a 1024-bit','line_number':202,'multiline':False]['text':' integer.  Therefore any double precision value can be represented as a','line_number':203,'multiline':False]['text':' (1074 + 1024) = 2098 bit integer.','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':' A 3x3 determinant is computed by adding together 6 values, each of which is','line_number':206,'multiline':False]['text':' the product of 3 of the input values.  When an m-bit integer is multiplied','line_number':207,'multiline':False]['text':' by an n-bit integer, the result has at most (m+n) bits.  When "k" m-bit','line_number':208,'multiline':False]['text':' integers are added together, the result has at most m + ceil(log2(k)) bits.','line_number':209,'multiline':False]['text':' Therefore the determinant of any 3x3 matrix can be represented exactly','line_number':210,'multiline':False]['text':' using no more than (3*2098)+3 = 6297 bits.','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':' Note that MPFloat only uses as much precision as required to compute the','line_number':213,'multiline':False]['text':' exact result, and that typically far fewer bits of precision are used.  The','line_number':214,'multiline':False]['text':' worst-case estimate above is only achieved for a matrix where every row','line_number':215,'multiline':False]['text':' contains both the maximum and minimum possible double precision values','line_number':216,'multiline':False]['text':' (i.e. approximately 1e308 and 1e-323).  For randomly chosen unit-length','line_number':217,'multiline':False]['text':' vectors, the average case uses only about 200 bits of precision.','line_number':218,'multiline':False]['text':' The maximum precision must be at least (6297 + 1) so that we can assert','line_number':220,'multiline':False]['text':' that the result of the determinant calculation is exact (by checking that','line_number':221,'multiline':False]['text':' the actual precision of the result is less than the maximum precision','line_number':222,'multiline':False]['text':' specified).','line_number':223,'multiline':False]['text':' S2_USE_EXACTFLOAT','line_number':228,'multiline':False]['text':' The following function returns the sign of the determinant of three points','line_number':232,'multiline':False]['text':' A, B, C under a model where every possible S2Point is slightly perturbed by','line_number':233,'multiline':False]['text':' a unique infinitesmal amount such that no three perturbed points are','line_number':234,'multiline':False]['text':' collinear and no four points are coplanar.  The perturbations are so small','line_number':235,'multiline':False]['text':' that they do not change the sign of any determinant that was non-zero','line_number':236,'multiline':False]['text':' before the perturbations, and therefore can be safely ignored unless the','line_number':237,'multiline':False]['text':' determinant of three points is exactly zero (using multiple-precision','line_number':238,'multiline':False]['text':' arithmetic).','line_number':239,'multiline':False]['text':'','line_number':240,'multiline':False]['text':' Since the symbolic perturbation of a given point is fixed (i.e., the','line_number':241,'multiline':False]['text':' perturbation is the same for all calls to this method and does not depend','line_number':242,'multiline':False]['text':' on the other two arguments), the results of this method are always','line_number':243,'multiline':False]['text':' self-consistent.  It will never return results that would correspond to an','line_number':244,'multiline':False]['text':' "impossible" configuration of non-degenerate points.','line_number':245,'multiline':False]['text':'','line_number':246,'multiline':False]['text':' Requirements:','line_number':247,'multiline':False]['text':'   The 3x3 determinant of A, B, C must be exactly zero.','line_number':248,'multiline':False]['text':'   The points must be distinct, with A < B < C in lexicographic order.','line_number':249,'multiline':False]['text':'','line_number':250,'multiline':False]['text':' Returns:','line_number':251,'multiline':False]['text':'   +1 or -1 according to the sign of the determinant after the symbolic','line_number':252,'multiline':False]['text':' perturbations are taken into account.','line_number':253,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' Reference:','line_number':255,'multiline':False]['text':'   "Simulation of Simplicity" (Edelsbrunner and Muecke, ACM Transactions on','line_number':256,'multiline':False]['text':'   Graphics, 1990).','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':' This method requires that the points are sorted in lexicographically','line_number':262,'multiline':False]['text':' increasing order.  This is because every possible S2Point has its own','line_number':263,'multiline':False]['text':' symbolic perturbation such that if A < B then the symbolic perturbation','line_number':264,'multiline':False]['text':' for A is much larger than the perturbation for B.','line_number':265,'multiline':False]['text':'','line_number':266,'multiline':False]['text':' Alternatively, we could sort the points in this method and keep track of','line_number':267,'multiline':False]['text':' the sign of the permutation, but it is more efficient to do this before','line_number':268,'multiline':False]['text':' converting the inputs to the multi-precision representation, and this','line_number':269,'multiline':False]['text':' also lets us re-use the result of the cross product B x C.','line_number':270,'multiline':False]['text':' Every input coordinate x[i] is assigned a symbolic perturbation dx[i].','line_number':273,'multiline':False]['text':' We then compute the sign of the determinant of the perturbed points,','line_number':274,'multiline':False]['text':' i.e.','line_number':275,'multiline':False]['text':'               | a[0]+da[0]  a[1]+da[1]  a[2]+da[2] |','line_number':276,'multiline':False]['text':'               | b[0]+db[0]  b[1]+db[1]  b[2]+db[2] |','line_number':277,'multiline':False]['text':'               | c[0]+dc[0]  c[1]+dc[1]  c[2]+dc[2] |','line_number':278,'multiline':False]['text':'','line_number':279,'multiline':False]['text':' The perturbations are chosen such that','line_number':280,'multiline':False]['text':'','line_number':281,'multiline':False]['text':'   da[2] > da[1] > da[0] > db[2] > db[1] > db[0] > dc[2] > dc[1] > dc[0]','line_number':282,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' where each perturbation is so much smaller than the previous one that we','line_number':284,'multiline':False]['text':' don't even need to consider it unless the coefficients of all previous','line_number':285,'multiline':False]['text':' perturbations are zero.  In fact, it is so small that we don't need to','line_number':286,'multiline':False]['text':' consider it unless the coefficient of all products of the previous','line_number':287,'multiline':False]['text':' perturbations are zero.  For example, we don't need to consider the','line_number':288,'multiline':False]['text':' coefficient of db[1] unless the coefficient of db[2]*da[0] is zero.','line_number':289,'multiline':False]['text':'','line_number':290,'multiline':False]['text':' The follow code simply enumerates the coefficients of the perturbations','line_number':291,'multiline':False]['text':' (and products of perturbations) that appear in the determinant above, in','line_number':292,'multiline':False]['text':' order of decreasing perturbation magnitude.  The first non-zero','line_number':293,'multiline':False]['text':' coefficient determines the sign of the result.  The easiest way to','line_number':294,'multiline':False]['text':' enumerate the coefficients in the correct order is to pretend that each','line_number':295,'multiline':False]['text':' perturbation is some tiny value "eps" raised to a power of two:','line_number':296,'multiline':False]['text':'','line_number':297,'multiline':False]['text':' eps**    1      2      4      8     16     32     64     128    256','line_number':298,'multiline':False]['text':'        da[2]  da[1]  da[0]  db[2]  db[1]  db[0]  dc[2]  dc[1]  dc[0]','line_number':299,'multiline':False]['text':'','line_number':300,'multiline':False]['text':' Essentially we can then just count in binary and test the corresponding','line_number':301,'multiline':False]['text':' subset of perturbations at each step.  So for example, we must test the','line_number':302,'multiline':False]['text':' coefficient of db[2]*da[0] before db[1] because eps**12 > eps**16.','line_number':303,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' Of course, not all products of these perturbations appear in the','line_number':305,'multiline':False]['text':' determinant above, since the determinant only contains the products of','line_number':306,'multiline':False]['text':' elements in distinct rows and columns.  Thus we don't need to consider','line_number':307,'multiline':False]['text':' da[2]*da[1], db[1]*da[1], etc.  Furthermore, sometimes different pairs of','line_number':308,'multiline':False]['text':' perturbations have the same coefficient in the determinant; for example,','line_number':309,'multiline':False]['text':' da[1]*db[0] and db[1]*da[0] have the same coefficient (c[2]).  Therefore','line_number':310,'multiline':False]['text':' we only need to test this coefficient the first time we encounter it in','line_number':311,'multiline':False]['text':' the binary order above (which will be db[1]*da[0]).','line_number':312,'multiline':False]['text':'','line_number':313,'multiline':False]['text':' The sequence of tests below also appears in Table 4-ii of the paper','line_number':314,'multiline':False]['text':' referenced above, if you just want to look it up, with the following','line_number':315,'multiline':False]['text':' translations: [a,b,c] -> [i,j,k] and [0,1,2] -> [1,2,3].  Also note that','line_number':316,'multiline':False]['text':' some of the signs are different because the opposite cross product is','line_number':317,'multiline':False]['text':' used (e.g., B x C rather than C x B).','line_number':318,'multiline':False]['text':' da[2]','line_number':320,'multiline':False]['text':' da[1]','line_number':322,'multiline':False]['text':' da[0]','line_number':324,'multiline':False]['text':' db[2]','line_number':327,'multiline':False]['text':' db[2] * da[1]','line_number':329,'multiline':False]['text':' db[2] * da[0]','line_number':331,'multiline':False]['text':' db[1]','line_number':333,'multiline':False]['text':' db[1] * da[0]','line_number':335,'multiline':False]['text':' The following test is listed in the paper, but it is redundant because','line_number':337,'multiline':False]['text':' the previous tests guarantee that C == (0, 0, 0).','line_number':338,'multiline':False]['text':' db[0]','line_number':339,'multiline':False]['text':' dc[2]','line_number':341,'multiline':False]['text':' dc[2] * da[1]','line_number':343,'multiline':False]['text':' dc[2] * da[0]','line_number':345,'multiline':False]['text':' dc[2] * db[1]','line_number':347,'multiline':False]['text':' dc[2] * db[1] * da[0]','line_number':349,'multiline':False]['text':' Return zero if and only if two points are the same.  This ensures (1).','line_number':353,'multiline':False]['text':' Sort the three points in lexicographic order, keeping track of the sign','line_number':356,'multiline':False]['text':' of the permutation.  (Each exchange inverts the sign of the determinant.)','line_number':357,'multiline':False]['text':' Construct multiple-precision versions of the sorted points and compute','line_number':365,'multiline':False]['text':' their exact 3x3 determinant.','line_number':366,'multiline':False]['text':' The precision of ExactFloat is high enough that the result should always','line_number':373,'multiline':False]['text':' be exact (no rounding was performed).','line_number':374,'multiline':False]['text':' If the exact determinant is non-zero, we're done.','line_number':378,'multiline':False]['text':' Otherwise, we need to resort to symbolic perturbations to resolve the','line_number':381,'multiline':False]['text':' sign of the determinant.','line_number':382,'multiline':False]['text':' SIMULATION_OF_SIMPLICITY','line_number':389,'multiline':False]['text':' Return +1 if the edge AB is CCW around the origin, etc.','line_number':392,'multiline':False]['text':' Return zero if and only if two points are the same.  This ensures (1).','line_number':420,'multiline':False]['text':' Now compute the determinant in a stable way.  Since all three points are','line_number':423,'multiline':False]['text':' unit length and we know that the determinant is very close to zero, this','line_number':424,'multiline':False]['text':' means that points are very nearly collinear.  Furthermore, the most common','line_number':425,'multiline':False]['text':' situation is where two points are nearly identical or nearly antipodal.','line_number':426,'multiline':False]['text':' To get the best accuracy in this situation, it is important to','line_number':427,'multiline':False]['text':' immediately reduce the magnitude of the arguments by computing either','line_number':428,'multiline':False]['text':' A+B or A-B for each pair of points.  Note that even if A and B differ','line_number':429,'multiline':False]['text':' only in their low bits, A-B can be computed very accurately.  On the','line_number':430,'multiline':False]['text':' other hand we can't accurately represent an arbitrary linear combination','line_number':431,'multiline':False]['text':' of two vectors as would be required for Gaussian elimination.  The code','line_number':432,'multiline':False]['text':' below chooses the vertex opposite the longest edge as the "origin" for','line_number':433,'multiline':False]['text':' the calculation, and computes the different vectors to the other two','line_number':434,'multiline':False]['text':' vertices.  This minimizes the sum of the lengths of these vectors.','line_number':435,'multiline':False]['text':'','line_number':436,'multiline':False]['text':' This implementation is very stable numerically, but it still does not','line_number':437,'multiline':False]['text':' return consistent results in all cases.  For example, if three points are','line_number':438,'multiline':False]['text':' spaced far apart from each other along a great circle, the sign of the','line_number':439,'multiline':False]['text':' result will basically be random (although it will still satisfy the','line_number':440,'multiline':False]['text':' conditions documented in the header file).  The only way to return','line_number':441,'multiline':False]['text':' consistent results in all cases is to compute the result using','line_number':442,'multiline':False]['text':' multiple-precision arithmetic.  I considered using the Gnu MP library,','line_number':443,'multiline':False]['text':' but this would be very expensive (up to 2000 bits of precision may be','line_number':444,'multiline':False]['text':' needed to store the intermediate results) and seems like overkill for','line_number':445,'multiline':False]['text':' this problem.  The MP library is apparently also quite particular about','line_number':446,'multiline':False]['text':' compilers and compilation options and would be a pain to maintain.','line_number':447,'multiline':False]['text':' We want to handle the case of nearby points and nearly antipodal points','line_number':449,'multiline':False]['text':' accurately, so determine whether A+B or A-B is smaller in each case.','line_number':450,'multiline':False]['text':' Sort the difference vectors to find the longest edge, and use the','line_number':461,'multiline':False]['text':' opposite vertex as the origin.  If two difference vectors are the same','line_number':462,'multiline':False]['text':' length, we break ties deterministically to ensure that the symmetry','line_number':463,'multiline':False]['text':' properties guaranteed in the header file will be true.','line_number':464,'multiline':False]['text':' The "sab" factor converts A +/- B into B +/- A.','line_number':468,'multiline':False]['text':' BC is longest edge','line_number':469,'multiline':False]['text':' AB is longest edge','line_number':471,'multiline':False]['text':' CA is longest edge','line_number':475,'multiline':False]['text':' AB is longest edge','line_number':477,'multiline':False]['text':' The points A, B, and C are numerically indistinguishable from coplanar.','line_number':483,'multiline':False]['text':' This may be due to roundoff error, or the points may in fact be exactly','line_number':484,'multiline':False]['text':' coplanar.  We handle this situation by perturbing all of the points by a','line_number':485,'multiline':False]['text':' vector (eps, eps**2, eps**3) where "eps" is an infinitesmally small','line_number':486,'multiline':False]['text':' positive number (e.g. 1 divided by a googolplex).  The perturbation is','line_number':487,'multiline':False]['text':' done symbolically, i.e. we compute what would happen if the points were','line_number':488,'multiline':False]['text':' perturbed by this amount.  It turns out that this is equivalent to','line_number':489,'multiline':False]['text':' checking whether the points are ordered CCW around the origin first in','line_number':490,'multiline':False]['text':' the Y-Z plane, then in the Z-X plane, and then in the X-Y plane.','line_number':491,'multiline':False]['text':' There are a few cases where "ccw" may still be zero despite our best','line_number':501,'multiline':False]['text':' efforts.  For example, two input points may be exactly proportional','line_number':502,'multiline':False]['text':' to each other (where both still satisfy IsNormalized()).','line_number':503,'multiline':False]['text':' SIMULATION_OF_SIMPLICITY','line_number':509,'multiline':False]['text':' This is a bit less efficient because we compute all 3 cross products, but','line_number':516,'multiline':False]['text':' it ensures that TurnAngle(a,b,c) == -TurnAngle(c,b,a) for all a,b,c.','line_number':517,'multiline':False]['text':' This method is based on l'Huilier's theorem,','line_number':526,'multiline':False]['text':'','line_number':527,'multiline':False]['text':'   tan(E/4) = sqrt(tan(s/2) tan((s-a)/2) tan((s-b)/2) tan((s-c)/2))','line_number':528,'multiline':False]['text':'','line_number':529,'multiline':False]['text':' where E is the spherical excess of the triangle (i.e. its area),','line_number':530,'multiline':False]['text':'       a, b, c, are the side lengths, and','line_number':531,'multiline':False]['text':'       s is the semiperimeter (a + b + c) / 2 .','line_number':532,'multiline':False]['text':'','line_number':533,'multiline':False]['text':' The only significant source of error using l'Huilier's method is the','line_number':534,'multiline':False]['text':' cancellation error of the terms (s-a), (s-b), (s-c).  This leads to a','line_number':535,'multiline':False]['text':' *relative* error of about 1e-16 * s / min(s-a, s-b, s-c).  This compares','line_number':536,'multiline':False]['text':' to a relative error of about 1e-15 / E using Girard's formula, where E is','line_number':537,'multiline':False]['text':' the true area of the triangle.  Girard's formula can be even worse than','line_number':538,'multiline':False]['text':' this for very small triangles, e.g. a triangle with a true area of 1e-30','line_number':539,'multiline':False]['text':' might evaluate to 1e-5.','line_number':540,'multiline':False]['text':'','line_number':541,'multiline':False]['text':' So, we prefer l'Huilier's formula unless dmin < s * (0.1 * E), where','line_number':542,'multiline':False]['text':' dmin = min(s-a, s-b, s-c).  This basically includes all triangles','line_number':543,'multiline':False]['text':' except for extremely long and skinny ones.','line_number':544,'multiline':False]['text':'','line_number':545,'multiline':False]['text':' Since we don't know E, we would like a conservative upper bound on','line_number':546,'multiline':False]['text':' the triangle area in terms of s and dmin.  It's possible to show that','line_number':547,'multiline':False]['text':' E <= k1 * s * sqrt(s * dmin), where k1 = 2*sqrt(3)/Pi (about 1).','line_number':548,'multiline':False]['text':' Using this, it's easy to show that we should always use l'Huilier's','line_number':549,'multiline':False]['text':' method if dmin >= k2 * s^5, where k2 is about 1e-2.  Furthermore,','line_number':550,'multiline':False]['text':' if dmin < k2 * s^5, the triangle area is at most k3 * s^4, where','line_number':551,'multiline':False]['text':' k3 is about 0.1.  Since the best case error using Girard's formula','line_number':552,'multiline':False]['text':' is about 1e-15, this means that we shouldn't even consider it unless','line_number':553,'multiline':False]['text':' s >= 3e-4 or so.','line_number':554,'multiline':False]['text':' We use volatile doubles to force the compiler to truncate all of these','line_number':556,'multiline':False]['text':' quantities to 64 bits.  Otherwise it may compute a value of dmin > 0','line_number':557,'multiline':False]['text':' simply because it chose to spill one of the intermediate values to','line_number':558,'multiline':False]['text':' memory but not one of the others.','line_number':559,'multiline':False]['text':' Consider whether Girard's formula might be more accurate.','line_number':565,'multiline':False]['text':' This triangle is skinny enough to consider Girard's formula.','line_number':569,'multiline':False]['text':' Use l'Huilier's formula.','line_number':574,'multiline':False]['text':' This is equivalent to the usual Girard's formula but is slightly','line_number':580,'multiline':False]['text':' more accurate, faster to compute, and handles a == b == c without','line_number':581,'multiline':False]['text':' a special case.  The use of RobustCrossProd() makes it much more','line_number':582,'multiline':False]['text':' accurate when two vertices are nearly identical or antipodal.','line_number':583,'multiline':False]['text':' I couldn't find any references for computing the true centroid of a','line_number':606,'multiline':False]['text':' spherical triangle...  I have a truly marvellous demonstration of this','line_number':607,'multiline':False]['text':' formula which this margin is too narrow to contain :)','line_number':608,'multiline':False]['text':' Use Angle() in order to get accurate results for small triangles.','line_number':610,'multiline':False]['text':' Now compute a point M such that:','line_number':618,'multiline':False]['text':'','line_number':619,'multiline':False]['text':'  [Ax Ay Az] [Mx]                       [ra]','line_number':620,'multiline':False]['text':'  [Bx By Bz] [My]  = 0.5 * det(A,B,C) * [rb]','line_number':621,'multiline':False]['text':'  [Cx Cy Cz] [Mz]                       [rc]','line_number':622,'multiline':False]['text':'','line_number':623,'multiline':False]['text':' To improve the numerical stability we subtract the first row (A) from the','line_number':624,'multiline':False]['text':' other two rows; this reduces the cancellation error when A, B, and C are','line_number':625,'multiline':False]['text':' very close together.  Then we solve it using Cramer's rule.','line_number':626,'multiline':False]['text':'','line_number':627,'multiline':False]['text':' TODO(user): This code still isn't as numerically stable as it could be.','line_number':628,'multiline':False]['text':' The biggest potential improvement is to compute B-A and C-A more','line_number':629,'multiline':False]['text':' accurately so that (B-A)x(C-A) is always inside triangle ABC.','line_number':630,'multiline':False]['text':' The last inequality below is ">" rather than ">=" so that we return true','line_number':642,'multiline':False]['text':' if A == B or B == C, and otherwise false if A == C.  Recall that','line_number':643,'multiline':False]['text':' RobustCCW(x,y,z) == -RobustCCW(z,y,x) for all x,y,z.','line_number':644,'multiline':False]['text':' kIJtoPos[orientation][ij] -> pos','line_number':653,'multiline':False]['text':' (0,0) (0,1) (1,0) (1,1)','line_number':655,'multiline':False]['text':' canonical order','line_number':656,'multiline':False]['text':' axes swapped','line_number':657,'multiline':False]['text':' bits inverted','line_number':658,'multiline':False]['text':' swapped & inverted','line_number':659,'multiline':False]['text':' kPosToIJ[orientation][pos] -> ij','line_number':662,'multiline':False]['text':' 0  1  2  3','line_number':664,'multiline':False]['text':' canonical order:    (0,0), (0,1), (1,1), (1,0)','line_number':665,'multiline':False]['text':' axes swapped:       (0,0), (1,0), (1,1), (0,1)','line_number':666,'multiline':False]['text':' bits inverted:      (1,1), (1,0), (0,0), (0,1)','line_number':667,'multiline':False]['text':' swapped & inverted: (1,1), (0,1), (0,0), (1,0)','line_number':668,'multiline':False]['text':' kPosToOrientation[pos] -> orientation_modifier','line_number':671,'multiline':False]['text':' All of the values below were obtained by a combination of hand analysis and','line_number':679,'multiline':False]['text':' Mathematica.  In general, S2_TAN_PROJECTION produces the most uniform','line_number':680,'multiline':False]['text':' shapes and sizes of cells, S2_LINEAR_PROJECTION is considerably worse, and','line_number':681,'multiline':False]['text':' S2_QUADRATIC_PROJECTION is somewhere in between (but generally closer to','line_number':682,'multiline':False]['text':' the tangent projection than the linear one).','line_number':683,'multiline':False]['text':' 1.000','line_number':686,'multiline':False]['text':' 1.571','line_number':687,'multiline':False]['text':' 1.333','line_number':688,'multiline':False]['text':' 2.000','line_number':692,'multiline':False]['text':' 1.571','line_number':693,'multiline':False]['text':' 1.705','line_number':694,'multiline':False]['text':' 1.571','line_number':697,'multiline':False]['text':' This is true for all projections.','line_number':698,'multiline':False]['text':' 0.816','line_number':701,'multiline':False]['text':' 1.111','line_number':702,'multiline':False]['text':' 0.943','line_number':703,'multiline':False]['text':' This is true for all projections.','line_number':707,'multiline':False]['text':' 1.411','line_number':710,'multiline':False]['text':' 1.437','line_number':711,'multiline':False]['text':' 1.435','line_number':712,'multiline':False]['text':' 0.943','line_number':716,'multiline':False]['text':' 1.111','line_number':717,'multiline':False]['text':' 0.943','line_number':718,'multiline':False]['text':' This is true for all projections.','line_number':722,'multiline':False]['text':' 1.440','line_number':725,'multiline':False]['text':' 1.462','line_number':726,'multiline':False]['text':' 1.459','line_number':727,'multiline':False]['text':' 0.943','line_number':731,'multiline':False]['text':' 1.481','line_number':732,'multiline':False]['text':' 1.257','line_number':733,'multiline':False]['text':' 2.828','line_number':737,'multiline':False]['text':' 2.565','line_number':738,'multiline':False]['text':' 2.439','line_number':739,'multiline':False]['text':' 2.032','line_number':743,'multiline':False]['text':' 2.064','line_number':744,'multiline':False]['text':' 2.060','line_number':745,'multiline':False]['text':' 0.770','line_number':749,'multiline':False]['text':' 1.745','line_number':750,'multiline':False]['text':' 1.257','line_number':751,'multiline':False]['text':' 4.000','line_number':755,'multiline':False]['text':' 2.467','line_number':756,'multiline':False]['text':' 2.636','line_number':757,'multiline':False]['text':' 2.094','line_number':760,'multiline':False]['text':' This is true for all projections.','line_number':761,'multiline':False]['text':' 1.414','line_number':764,'multiline':False]['text':' 1.414','line_number':765,'multiline':False]['text':' 1.443','line_number':766,'multiline':False]['text':' 1.732','line_number':769,'multiline':False]['text':' This is true for all projections.','line_number':770,'multiline':False]