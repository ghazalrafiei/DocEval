['text':' Copyright 2005 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':' HACK ALERT: RobustCrossing() is allowed to return 0 or -1 if either edge','line_number':33,'multiline':False]['text':' is degenerate.  We use the value kDegen to represent this possibility.','line_number':34,'multiline':False]['text':' The real tests of edge crossings are in s2{loop,polygon}_unittest,','line_number':74,'multiline':False]['text':' but we do a few simple tests here.','line_number':75,'multiline':False]['text':' Two regular edges that cross.','line_number':77,'multiline':False]['text':' Two regular edges that cross antipodal points.','line_number':81,'multiline':False]['text':' Two edges on the same great circle.','line_number':85,'multiline':False]['text':' Two edges that cross where one vertex is S2::Origin().','line_number':89,'multiline':False]['text':' Two edges that cross antipodal points where one vertex is S2::Origin().','line_number':93,'multiline':False]['text':' Two edges that share an endpoint.  The Ortho() direction is (-4,0,2),','line_number':97,'multiline':False]['text':' and edge CD is further CCW around (2,3,4) than AB.','line_number':98,'multiline':False]['text':' Two edges that barely cross each other near the middle of one edge.  The','line_number':102,'multiline':False]['text':' edge AB is approximately in the x=y plane, while CD is approximately','line_number':103,'multiline':False]['text':' perpendicular to it and ends exactly at the x=y plane.','line_number':104,'multiline':False]['text':' In this version, the edges are separated by a distance of about 1e-15.','line_number':108,'multiline':False]['text':' Two edges that barely cross each other near the end of both edges.  This','line_number':112,'multiline':False]['text':' example cannot be handled using regular double-precision arithmetic due','line_number':113,'multiline':False]['text':' to floating-point underflow.','line_number':114,'multiline':False]['text':' In this version, the edges are separated by a distance of about 1e-640.','line_number':118,'multiline':False]['text':' Two edges that barely cross each other near the middle of one edge.','line_number':122,'multiline':False]['text':' Computing the exact determinant of some of the triangles in this test','line_number':123,'multiline':False]['text':' requires more than 2000 bits of precision.','line_number':124,'multiline':False]['text':' In this version, the edges are separated by a distance of about 1e-640.','line_number':129,'multiline':False]['text':' We want to avoid cache effects, so kNumPoints should be small enough so','line_number':139,'multiline':False]['text':' that the points can be in L1 cache.  sizeof(S2Point) == 24, so 400 will','line_number':140,'multiline':False]['text':' only take ~9KiB of 64KiB L1 cache.','line_number':141,'multiline':False]['text':' Check cases where min/max latitude is not at a vertex.','line_number':187,'multiline':False]['text':' Max, CW','line_number':189,'multiline':False]['text':' Max, CCW','line_number':191,'multiline':False]['text':' Min, CW','line_number':193,'multiline':False]['text':' Min, CCW','line_number':195,'multiline':False]['text':' Check cases where the edge passes through one of the poles.','line_number':197,'multiline':False]['text':' Check cases where the min/max latitude is attained at a vertex.','line_number':201,'multiline':False]['text':' 35.26 degrees','line_number':202,'multiline':False]['text':' For simplicity, all of these tests use an origin of (0, 0, 1).','line_number':242,'multiline':False]['text':' This shouldn't matter as long as the lower-level primitives are','line_number':243,'multiline':False]['text':' implemented correctly.','line_number':244,'multiline':False]['text':' Intersection in one wedge.','line_number':246,'multiline':False]['text':' Intersection in two wedges.','line_number':250,'multiline':False]['text':' Normal containment.','line_number':255,'multiline':False]['text':' Containment with equality on one side.','line_number':259,'multiline':False]['text':' Containment with equality on the other side.','line_number':263,'multiline':False]['text':' Containment with equality on both sides.','line_number':268,'multiline':False]['text':' Disjoint with equality on one side.','line_number':273,'multiline':False]['text':' Disjoint with equality on the other side.','line_number':277,'multiline':False]['text':' Disjoint with equality on both sides.','line_number':281,'multiline':False]['text':' B contains A with equality on one side.','line_number':286,'multiline':False]['text':' B contains A with equality on the other side.','line_number':290,'multiline':False]['text':' Given a point X and an edge AB, check that the distance from X to AB is','line_number':296,'multiline':False]['text':' "distance_radians" and the closest point on AB is "expected_closest".','line_number':297,'multiline':False]['text':' This special value says that the result should be A or B.','line_number':308,'multiline':False]['text':' We allow a bit more than the usual 1e-15 error tolerance because','line_number':358,'multiline':False]['text':' Interpolate() uses trig functions.','line_number':359,'multiline':False]['text':' A zero-length edge.','line_number':365,'multiline':False]['text':' Start, end, and middle of a medium-length edge.','line_number':369,'multiline':False]['text':' Test that interpolation is done using distances on the sphere rather than','line_number':374,'multiline':False]['text':' linear distances.','line_number':375,'multiline':False]['text':' Test that interpolation is accurate on a long edge (but not so long that','line_number':381,'multiline':False]['text':' the definition of the edge itself becomes too unstable).','line_number':382,'multiline':False]['text':' Initial vectors at 90 degrees.','line_number':399,'multiline':False]['text':' Negative values of t.','line_number':407,'multiline':False]['text':' Initial vectors at 45 degrees.','line_number':413,'multiline':False]['text':' Initial vectors at 135 degrees.','line_number':418,'multiline':False]['text':' Take a small fraction along the curve.','line_number':421,'multiline':False]['text':' We should get back where we started.','line_number':423,'multiline':False]['text':' Check that points do not drift away from unit length when repeated','line_number':430,'multiline':False]['text':' interpolations are done.','line_number':431,'multiline':False]['text':' We repeatedly construct two edges that cross near a random point "p",','line_number':443,'multiline':False]['text':' and measure the distance from the actual intersection point "x" to the','line_number':444,'multiline':False]['text':' the expected intersection point "p" and also to the edges that cross','line_number':445,'multiline':False]['text':' near "p".','line_number':446,'multiline':False]['text':'','line_number':447,'multiline':False]['text':' Note that GetIntersection() does not guarantee that "x" and "p" will be','line_number':448,'multiline':False]['text':' close together (since the intersection point is numerically unstable','line_number':449,'multiline':False]['text':' when the edges cross at a very small angle), but it does guarantee that','line_number':450,'multiline':False]['text':' "x" will be close to both of the edges that cross.','line_number':451,'multiline':False]['text':' We construct two edges AB and CD that intersect near "p".  The angle','line_number':456,'multiline':False]['text':' between AB and CD (expressed as a slope) is chosen randomly between','line_number':457,'multiline':False]['text':' 1e-15 and 1.0 such that its logarithm is uniformly distributed.  This','line_number':458,'multiline':False]['text':' implies that small values are much more likely to be chosen.','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':' Once the slope is chosen, the four points ABCD must be offset from P','line_number':461,'multiline':False]['text':' by at least (1e-15 / slope) so that the points are guaranteed to have','line_number':462,'multiline':False]['text':' the correct circular ordering around P.  This is the distance from P','line_number':463,'multiline':False]['text':' at which the two edges are separated by about 1e-15, which is','line_number':464,'multiline':False]['text':' approximately the minimum distance at which we can expect computed','line_number':465,'multiline':False]['text':' points on the two lines to be distinct and have the correct ordering.','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' The actual offset distance from P is chosen randomly in the range','line_number':468,'multiline':False]['text':' [1e-15 / slope, 1.0], again uniformly distributing the logarithm.','line_number':469,'multiline':False]['text':' This ensures that we test both long and very short segments that','line_number':470,'multiline':False]['text':' intersect at both large and very small angles.','line_number':471,'multiline':False]['text':' Edge is near itself.','line_number':507,'multiline':False]['text':' Edge is near its reverse','line_number':510,'multiline':False]['text':' Short edge is near long edge.','line_number':513,'multiline':False]['text':' Long edges cannot be near shorter edges.','line_number':516,'multiline':False]['text':' Orthogonal crossing edges are not near each other...','line_number':519,'multiline':False]['text':' ... unless all points on B are within tolerance of A.','line_number':522,'multiline':False]['text':' Very long edges whose endpoints are close may have interior points that are','line_number':525,'multiline':False]['text':' far apart.  An implementation that only considers the vertices of polylines','line_number':526,'multiline':False]['text':' will incorrectly consider such edges as "close" when they are not.','line_number':527,'multiline':False]['text':' Consider, for example, two consecutive lines of longitude.  As they','line_number':528,'multiline':False]['text':' approach the poles, they become arbitrarily close together, but along the','line_number':529,'multiline':False]['text':' equator they bow apart.','line_number':530,'multiline':False]['text':' The two arcs here are nearly as long as S2 edges can be (just shy of 180','line_number':534,'multiline':False]['text':' degrees), and their endpoints are less than 1 degree apart.  Their','line_number':535,'multiline':False]['text':' midpoints, however, are at opposite ends of the sphere along its equator.','line_number':536,'multiline':False]['text':' At the equator, the second arc here is 9.75 degrees from the first, and','line_number':540,'multiline':False]['text':' closer at all other points.  However, the southern point of the second arc','line_number':541,'multiline':False]['text':' (-1, 9.75) is too far from the first arc for the short-circuiting logic in','line_number':542,'multiline':False]['text':' IsEdgeBNearEdgeA to apply.','line_number':543,'multiline':False]['text':' Same as above, but B's orientation is reversed, causing the angle between','line_number':546,'multiline':False]['text':' the normal vectors of circ(B) and circ(A) to be (180-9.75) = 170.5 degrees,','line_number':547,'multiline':False]['text':' not 9.75 degrees.  The greatest separation between the planes is still 9.75','line_number':548,'multiline':False]['text':' degrees.','line_number':549,'multiline':False]['text':' A and B are on the same great circle, A and B partially overlap, but the','line_number':552,'multiline':False]['text':' only part of B that does not overlap A is shorter than tolerance.','line_number':553,'multiline':False]['text':' A and B are on the same great circle, all points on B are close to A at its','line_number':556,'multiline':False]['text':' second endpoint, (1,0).','line_number':557,'multiline':False]['text':' Same as above, but B's orientation is reversed.  This case is special','line_number':560,'multiline':False]['text':' because the projection of the normal defining A onto the plane containing B','line_number':561,'multiline':False]['text':' is the null vector, and must be handled by a special case.','line_number':562,'multiline':False]['text':' Since normalization is not perfect, and vertices are not always perfectly','line_number':584,'multiline':False]['text':' normalized anyway for various reasons, it is important that the edge','line_number':585,'multiline':False]['text':' primitives can handle vertices that exactly coincident when projected','line_number':586,'multiline':False]['text':' onto the unit sphere but that are not identical.','line_number':587,'multiline':False]['text':'','line_number':588,'multiline':False]['text':' This test checks pairs of edges AB and CD where A,B,C,D are exactly','line_number':589,'multiline':False]['text':' coincident on the sphere and the norms of A,B,C,D are monotonically','line_number':590,'multiline':False]['text':' increasing.  Such edge pairs should never intersect.  (This is not','line_number':591,'multiline':False]['text':' obvious, since it depends on the particular symbolic perturbations used','line_number':592,'multiline':False]['text':' by S2::RobustCCW().  It would be better to replace this with a test that','line_number':593,'multiline':False]['text':' says that the CCW results must be consistent with each other.)','line_number':594,'multiline':False]['text':' Construct a point P where every component is zero or a power of 2.','line_number':597,'multiline':False]['text':' If all components were zero, try again.  Note that normalization may','line_number':603,'multiline':False]['text':' convert a non-zero point into a zero one due to underflow (!)','line_number':604,'multiline':False]['text':' Now every non-zero component should have exactly the same mantissa.','line_number':608,'multiline':False]['text':' This implies that if we scale the point by an arbitrary factor, every','line_number':609,'multiline':False]['text':' non-zero component will still have the same mantissa.  Scale the points','line_number':610,'multiline':False]['text':' so that they are all distinct and yet still satisfy S2::IsNormalized().','line_number':611,'multiline':False]['text':' Verify that the expected edges do not cross.','line_number':617,'multiline':False]['text':' Copied from BenchmarkCrossing() above.','line_number':627,'multiline':False]['text':' 1/4th of the points will cross ab.','line_number':632,'multiline':False]['text':' namespace','line_number':651,'multiline':False]