['text':'************************************************
*      Perl-Compatible Regular Expressions       *
************************************************','line_number':1,'multiline':True]['text':' PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]['text':' Generated pattern fragments ','line_number':58,'multiline':True]['text':' States for range and POSIX processing ','line_number':68,'multiline':True]['text':' Macro to add a character string to the output buffer, checking for overflow. ','line_number':74,'multiline':True]['text':' Literals that must be escaped: \ ? * + | . ^ $ { } [ ] ( ) ','line_number':85,'multiline':True]['text':' Recognized escaped metacharacters in POSIX basic patterns. ','line_number':94,'multiline':True]['text':'************************************************
*           Convert a POSIX pattern              *
************************************************','line_number':103,'multiline':True]['text':' This function handles both basic and extended POSIX patterns.

Arguments:
  pattype        the pattern type
  pattern        the pattern
  plength        length in code units
  utf            TRUE if UTF
  use_buffer     where to put the output
  use_length     length of use_buffer
  bufflenptr     where to put the used length
  dummyrun       TRUE if a dummy run
  ccontext       the convert context

Returns:         0 => success
                !0 => error code
','line_number':107,'multiline':True]['text':' Allow for trailing zero ','line_number':133,'multiline':True]['text':' Not used when Unicode not supported ','line_number':142,'multiline':True]['text':' Not currently used ','line_number':143,'multiline':True]['text':' Initialize default for error offset as end of input. ','line_number':145,'multiline':True]['text':' Now scan the input. ','line_number':150,'multiline':True]['text':' Add in the length of the last item, then, if in the dummy run, pull the
  pointer back to the start of the (temporary) buffer and then remember the
  start of the next item. ','line_number':157,'multiline':True]['text':' Pick up the next character ','line_number':165,'multiline':True]['text':' Handle a character within a class. ','line_number':178,'multiline':True]['text':' Not the end of the class ','line_number':188,'multiline':True]['text':' Remain in started state ','line_number':195,'multiline':True]['text':' With next character after :] ','line_number':203,'multiline':True]['text':' Fall through ','line_number':205,'multiline':True]['text':' Handle a character not within a class. ','line_number':224,'multiline':True]['text':' We could handle special cases [[:<:]] and [[:>:]] (which PCRE does
    support) but they are not part of POSIX 1003.1. ','line_number':232,'multiline':True]['text':' With next character ','line_number':250,'multiline':True]['text':' Handle start of "normal" character classes ','line_number':255,'multiline':True]['text':' Handle ^ and ] as first characters ','line_number':259,'multiline':True]['text':' Fall through ','line_number':300,'multiline':True]['text':' Fall through ','line_number':308,'multiline':True]['text':' Ignore second and subsequent asterisks ','line_number':327,'multiline':True]['text':' Fall through ','line_number':337,'multiline':True]['text':' Indicates nothing special ','line_number':345,'multiline':True]['text':' Final segment ','line_number':356,'multiline':True]['text':'************************************************
*           Convert a glob pattern               *
************************************************','line_number':363,'multiline':True]['text':' Context for writing the output into a buffer. ','line_number':367,'multiline':True]['text':' current output position ','line_number':370,'multiline':True]['text':' output end ','line_number':371,'multiline':True]['text':' size of the output ','line_number':372,'multiline':True]['text':' string copied to the output ','line_number':373,'multiline':True]['text':' Write a character into the output.

Arguments:
  out            output context
  chr            the next character
','line_number':377,'multiline':True]['text':' Write a string into the output.

Arguments:
  out            output context
  length         length of out->out_str
','line_number':394,'multiline':True]['text':' Prints the separator into the output.

Arguments:
  out            output context
  separator      glob separator
  with_escape    backslash is needed before separator
','line_number':423,'multiline':True]['text':' Prints a wildcard into the output.

Arguments:
  out            output context
  separator      glob separator
  with_escape    backslash is needed before separator
','line_number':442,'multiline':True]['text':' Parse a posix class.

Arguments:
  from           starting point of scanning the range
  pattern_end    end of pattern
  out            output context

Returns:  >0 => class index
          0  => malformed class
','line_number':464,'multiline':True]['text':' Checks whether the character is in the class.

Arguments:
  class_index    class index
  c              character

Returns:   !0 => character is found in the class
            0 => otherwise
','line_number':531,'multiline':True]['text':' Parse a range of characters.

Arguments:
  from           starting point of scanning the range
  pattern_end    end of pattern
  out            output context
  separator      glob separator
  with_escape    backslash is needed before separator

Returns:         0 => success
                !0 => error code
','line_number':563,'multiline':True]['text':' Avoid compiler warning. ','line_number':589,'multiline':True]['text':' Prints a (*COMMIT) into the output.

Arguments:
  out            output context
','line_number':747,'multiline':True]['text':' Bash glob converter.

Arguments:
  pattype        the pattern type
  pattern        the pattern
  plength        length in code units
  utf            TRUE if UTF
  use_buffer     where to put the output
  use_length     length of use_buffer
  bufflenptr     where to put the used length
  dummyrun       TRUE if a dummy run
  ccontext       the convert context

Returns:         0 => success
                !0 => error code
','line_number':769,'multiline':True]['text':' Avoid compiler warning. ','line_number':805,'multiline':True]['text':' Currently only ASCII characters are supported. ','line_number':810,'multiline':True]['text':' Initialize default for error offset as end of input. ','line_number':818,'multiline':True]['text':' Start check must be after the end check. ','line_number':944,'multiline':True]['text':'************************************************
*                Convert pattern                 *
************************************************','line_number':1037,'multiline':True]['text':' This is the external-facing function for converting other forms of pattern
into PCRE2 regular expression patterns. On error, the bufflenptr argument is
used to return an offset in the original pattern.

Arguments:
  pattern     the input pattern
  plength     length of input, or PCRE2_ZERO_TERMINATED
  options     options bits
  buffptr     pointer to pointer to output buffer
  bufflenptr  pointer to length of output buffer
  ccontext    convert context or NULL

Returns:      0 for success, else an error code (+ve or -ve)
','line_number':1041,'multiline':True]['text':' Undefined bit set ','line_number':1070,'multiline':True]['text':' More than one type set ','line_number':1071,'multiline':True]['text':' No type set ','line_number':1072,'multiline':True]['text':' Error offset ','line_number':1074,'multiline':True]['text':' Check UTF if required. ','line_number':1082,'multiline':True]['text':' Error offset ','line_number':1087,'multiline':True]['text':' If buffptr is not NULL, and what it points to is not NULL, we are being
provided with a buffer and a length, so set them as the buffer to use. ','line_number':1103,'multiline':True]['text':' Call an individual converter, either just once (if a buffer was provided or
just the length is needed), or twice (if a memory allocation is required). ','line_number':1112,'multiline':True]['text':' Error offset ','line_number':1134,'multiline':True]['text':' Error ','line_number':1138,'multiline':True]['text':' Just the length is required ','line_number':1139,'multiline':True]['text':' Buffer was provided or allocated ','line_number':1140,'multiline':True]['text':' Allocate memory for the buffer, with hidden space for an allocator at
  the start. The next time round the loop runs the conversion for real. ','line_number':1143,'multiline':True]['text':' Control should never get here. ','line_number':1155,'multiline':True]['text':'************************************************
*            Free converted pattern              *
************************************************','line_number':1161,'multiline':True]['text':' This frees a converted pattern that was put in newly-allocated memory.

Argument:   the converted pattern
Returns:    nothing
','line_number':1165,'multiline':True]['text':' End of pcre2_convert.c ','line_number':1182,'multiline':True]