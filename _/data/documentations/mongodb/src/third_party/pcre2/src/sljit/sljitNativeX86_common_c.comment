['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]['text':'
   32b register indexes:
     0 - EAX
     1 - ECX
     2 - EDX
     3 - EBX
     4 - ESP
     5 - EBP
     6 - ESI
     7 - EDI
','line_number':36,'multiline':True]['text':'
   64b register indexes:
     0 - RAX
     1 - RCX
     2 - RDX
     3 - RBX
     4 - RSP
     5 - RBP
     6 - RSI
     7 - RDI
     8 - R8   - From now on REX prefix is required
     9 - R9
    10 - R10
    11 - R11
    12 - R12
    13 - R13
    14 - R14
    15 - R15
','line_number':48,'multiline':True]['text':' Last register + 1. ','line_number':72,'multiline':True]['text':' SLJIT_CONFIG_X86_32 ','line_number':89,'multiline':True]['text':' Last register + 1. ','line_number':91,'multiline':True]['text':' Note: r12 & 0x7 == 0b100, which decoded as SIB byte present
   Note: avoid to use r12 and r13 for memory addessing
   therefore r12 is better to be a higher saved register. ','line_number':95,'multiline':True]['text':' Args: rdi(=7), rsi(=6), rdx(=2), rcx(=1), r8, r9. Scratches: rax(=0), r10, r11 ','line_number':99,'multiline':True]['text':' low-map. reg_map & 0x7. ','line_number':103,'multiline':True]['text':' Args: rcx(=1), rdx(=2), r8, r9. Scratches: rax(=0), r10, r11 ','line_number':108,'multiline':True]['text':' low-map. reg_map & 0x7. ','line_number':112,'multiline':True]['text':' Args: xmm0-xmm3 ','line_number':118,'multiline':True]['text':' low-map. freg_map & 0x7. ','line_number':122,'multiline':True]['text':' SLJIT_CONFIG_X86_32 ','line_number':146,'multiline':True]['text':' Size flags for emit_x86_instruction: ','line_number':151,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':165,'multiline':True]['text':'  Instrucion forms                                                     ','line_number':166,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':167,'multiline':True]['text':' BINARY ','line_number':169,'multiline':True]['text':' BINARY ','line_number':174,'multiline':True]['text':' BINARY ','line_number':178,'multiline':True]['text':' GROUP_0F ','line_number':183,'multiline':True]['text':' GROUP_FF ','line_number':185,'multiline':True]['text':' GROUP_0F ','line_number':187,'multiline':True]['text':' BINARY ','line_number':188,'multiline':True]['text':' GROUP_F7 ','line_number':195,'multiline':True]['text':' GROUP_F7 ','line_number':200,'multiline':True]['text':' GROUP_F7 ','line_number':201,'multiline':True]['text':' GROUP_0F ','line_number':202,'multiline':True]['text':' GROUP_FF ','line_number':209,'multiline':True]['text':' GROUP_0F ','line_number':223,'multiline':True]['text':' GROUP_0F ','line_number':224,'multiline':True]['text':' GROUP_0F ','line_number':225,'multiline':True]['text':' GROUP_0F ','line_number':226,'multiline':True]['text':' GROUP_F7 ','line_number':227,'multiline':True]['text':' GROUP_F7 ','line_number':229,'multiline':True]['text':' GROUP_F7 ','line_number':231,'multiline':True]['text':' BINARY ','line_number':232,'multiline':True]['text':' GROUP_FF ','line_number':243,'multiline':True]['text':' BINARY ','line_number':247,'multiline':True]['text':' SHIFT ','line_number':251,'multiline':True]['text':' SHIFT ','line_number':252,'multiline':True]['text':' SHIFT ','line_number':253,'multiline':True]['text':' BINARY ','line_number':254,'multiline':True]['text':' BINARY ','line_number':265,'multiline':True]['text':' Multithreading does not affect these static variables, since they store
   built-in CPU features. Therefore they can be overwritten by different threads
   if they detect the CPU features in the same time. ','line_number':290,'multiline':True]['text':'****************************************************','line_number':304,'multiline':True]['text':'    Unaligned-store functions                       ','line_number':305,'multiline':True]['text':'****************************************************','line_number':306,'multiline':True]['text':'****************************************************','line_number':323,'multiline':True]['text':'    Utility functions                               ','line_number':324,'multiline':True]['text':'****************************************************','line_number':325,'multiline':True]['text':' AT&T syntax. ','line_number':339,'multiline':True]['text':' On x86-32, there is no red zone, so this
		   should work (no need for a local variable). ','line_number':343,'multiline':True]['text':' _MSC_VER && _MSC_VER >= 1400 ','line_number':361,'multiline':True]['text':' Intel syntax. ','line_number':363,'multiline':True]['text':' _MSC_VER && _MSC_VER >= 1400 ','line_number':370,'multiline':True]['text':' je ','line_number':383,'multiline':True]['text':' jne ','line_number':387,'multiline':True]['text':' jc ','line_number':392,'multiline':True]['text':' jae ','line_number':397,'multiline':True]['text':' jnbe ','line_number':401,'multiline':True]['text':' jbe ','line_number':405,'multiline':True]['text':' jl ','line_number':408,'multiline':True]['text':' jnl ','line_number':411,'multiline':True]['text':' jnle ','line_number':414,'multiline':True]['text':' jle ','line_number':417,'multiline':True]['text':' jo ','line_number':420,'multiline':True]['text':' jno ','line_number':423,'multiline':True]['text':' jp ','line_number':426,'multiline':True]['text':' jpo ','line_number':429,'multiline':True]['text':' Second code generation pass. ','line_number':512,'multiline':True]['text':' The code is already generated. ','line_number':530,'multiline':True]['text':' SLJIT_DETECT_SSE2 ','line_number':653,'multiline':True]['text':' SLJIT_DETECT_SSE2 ','line_number':655,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':685,'multiline':True]['text':'  Operators                                                            ','line_number':686,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':687,'multiline':True]['text':' !SLJIT_CONFIG_X86_64 ','line_number':716,'multiline':True]['text':' SLJIT_CONFIG_X86_64 ','line_number':724,'multiline':True]['text':' Emit endbr32/endbr64 when CET is enabled.  ','line_number':746,'multiline':True]['text':' !SLJIT_CONFIG_X86_CET ','line_number':759,'multiline':True]['text':' SLJIT_CONFIG_X86_CET ','line_number':761,'multiline':True]['text':' SLJIT_CONFIG_X86_CET && __SHSTK__ ','line_number':815,'multiline':True]['text':' !SLJIT_CONFIG_X86_CET || !__SHSTK__ ','line_number':821,'multiline':True]['text':' SLJIT_CONFIG_X86_CET && __SHSTK__ ','line_number':823,'multiline':True]['text':' Generate "RDSSP TMP_REG1". ','line_number':835,'multiline':True]['text':' Load return address on shadow stack into TMP_REG1. ','line_number':838,'multiline':True]['text':' Hand code unsupported "mov 0x0(%ebp),%ebp". ','line_number':842,'multiline':True]['text':' !SLJIT_CONFIG_X86_32 ','line_number':849,'multiline':True]['text':' SLJIT_CONFIG_X86_32 ','line_number':851,'multiline':True]['text':' Compare return address against TMP_REG1. ','line_number':853,'multiline':True]['text':' Generate JZ to skip shadow stack ajdustment when shadow
	   stack matches normal stack. ','line_number':856,'multiline':True]['text':' REX_W is not necessary. ','line_number':866,'multiline':True]['text':' Load 1 into TMP_REG1. ','line_number':869,'multiline':True]['text':' Generate "INCSSP TMP_REG1". ','line_number':872,'multiline':True]['text':' Jump back to "RDSSP TMP_REG1" to check shadow stack again. ','line_number':875,'multiline':True]['text':' !SLJIT_CONFIG_X86_CET || !__SHSTK__ ','line_number':883,'multiline':True]['text':' SLJIT_CONFIG_X86_CET && __SHSTK__ ','line_number':887,'multiline':True]['text':' Immediate to memory move. Only SLJIT_MOV operation copies
			   an immediate directly into memory so TMP_REG1 can be used. ','line_number':924,'multiline':True]['text':' Memory to memory move. Only SLJIT_MOV operation copies
	   data from memory to memory so TMP_REG1 can be used. ','line_number':945,'multiline':True]['text':' src, dst are registers. ','line_number':1155,'multiline':True]['text':' shl reg, 24 ','line_number':1169,'multiline':True]['text':' sar reg, 24 ','line_number':1173,'multiline':True]['text':' src can be memory addr or reg_map[src] < 4 on x86_32 architectures. ','line_number':1188,'multiline':True]['text':' Find a non-used register, whose reg_map[src] < 4. ','line_number':1198,'multiline':True]['text':' Same input and output ','line_number':1330,'multiline':True]['text':' Special exception for sljit_emit_op_flags. ','line_number':1618,'multiline':True]['text':' Only for cumulative operations. ','line_number':1632,'multiline':True]['text':' General version. ','line_number':1665,'multiline':True]['text':' This version requires less memory writing. ','line_number':1678,'multiline':True]['text':' General version. ','line_number':1738,'multiline':True]['text':' This version requires less memory writing. ','line_number':1751,'multiline':True]['text':' Register destination. ','line_number':1775,'multiline':True]['text':' Note: src1 is NOT immediate. ','line_number':1836,'multiline':True]['text':' Neither argument is immediate. ','line_number':1879,'multiline':True]['text':' These cases better be left to handled by normal way. ','line_number':1903,'multiline':True]['text':' This case is complex since ecx itself may be used for
		   addressing, and this case must be supported as well. ','line_number':2171,'multiline':True]['text':' The CPU does not set flags if the shift count is 0. ','line_number':2202,'multiline':True]['text':' OR dst, src, 0 ','line_number':2213,'multiline':True]['text':' Don't adjust shadow stack if it isn't enabled.  ','line_number':2350,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2399,'multiline':True]['text':'  Floating point operators                                             ','line_number':2400,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2401,'multiline':True]['text':' Alignment(3) + 4 * 16 bytes. ','line_number':2403,'multiline':True]['text':' Align to 16 bytes. ','line_number':2409,'multiline':True]['text':' Single precision constants (each constant is 16 byte long). ','line_number':2412,'multiline':True]['text':' Double precision constants (each constant is 16 byte long). ','line_number':2415,'multiline':True]['text':' We overwrite the high bits of source. From SLJIT point of view,
			   this is not an issue.
			   Note: In SSE3, we could also use MOVDDUP and MOVSLDUP. ','line_number':2552,'multiline':True]['text':' Do nothing here. ','line_number':2613,'multiline':True]['text':' Swap arguments. ','line_number':2615,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2654,'multiline':True]['text':'  Conditional instructions                                             ','line_number':2655,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2656,'multiline':True]['text':' Worst case size. ','line_number':2695,'multiline':True]['text':' Worst case size. ','line_number':2727,'multiline':True]['text':' REX_W is not necessary (src is not immediate). ','line_number':2742,'multiline':True]['text':' ADJUST_LOCAL_OFFSET and CHECK_EXTRA_REGS might overwrite these values. ','line_number':2762,'multiline':True]['text':' setcc = jcc + 0x10. ','line_number':2773,'multiline':True]['text':' Set low register to conditional flag. ','line_number':2781,'multiline':True]['text':' Set low register to conditional flag. ','line_number':2797,'multiline':True]['text':' The movzx instruction does not affect flags. ','line_number':2803,'multiline':True]['text':' The SLJIT_CONFIG_X86_32 code path starts here. ','line_number':2823,'multiline':True]['text':' Low byte is accessible. ','line_number':2826,'multiline':True]['text':' Set low byte to conditional flag. ','line_number':2830,'multiline':True]['text':' Low byte is not accessible. ','line_number':2841,'multiline':True]['text':' a xor reg, reg operation would overwrite the flags. ','line_number':2847,'multiline':True]['text':' cmovcc = setcc - 0x50. ','line_number':2855,'multiline':True]['text':' Set al to conditional flag. ','line_number':2865,'multiline':True]['text':' eax ','line_number':2868,'multiline':True]['text':' eax ','line_number':2872,'multiline':True]['text':' Set low register to conditional flag. ','line_number':2884,'multiline':True]['text':' eax ','line_number':2888,'multiline':True]['text':' eax ','line_number':2890,'multiline':True]['text':' Set low register to conditional flag. ','line_number':2897,'multiline':True]['text':' ecx ','line_number':2899,'multiline':True]['text':' ecx ','line_number':2902,'multiline':True]['text':' ecx ','line_number':2904,'multiline':True]['text':' eax ','line_number':2904,'multiline':True]['text':' ecx ','line_number':2906,'multiline':True]['text':' Set TMP_REG1 to the bit. ','line_number':2911,'multiline':True]['text':' Set al to conditional flag. ','line_number':2916,'multiline':True]['text':' eax ','line_number':2919,'multiline':True]['text':' eax ','line_number':2923,'multiline':True]['text':' eax ','line_number':2923,'multiline':True]['text':' SLJIT_CONFIG_X86_64 ','line_number':2935,'multiline':True]['text':' ADJUST_LOCAL_OFFSET is not needed. ','line_number':2957,'multiline':True]