['text':'************************************************
*      Perl-Compatible Regular Expressions       *
************************************************','line_number':1,'multiline':True]['text':' PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2022 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]['text':' This module contains a PCRE private debugging function for printing out the
internal form of a compiled regular expression, along with some supporting
local functions. This source file is #included in pcre2test.c at each supported
code unit width, with PCRE2_SUFFIX set appropriately, just like the functions
that comprise the library. It can also optionally be included in
pcre2_compile.c for detailed debugging in error situations. ','line_number':42,'multiline':True]['text':' Tables of operator names. The same 8-bit table is used for all code unit
widths, so it must be defined only once. The list itself is defined in
pcre2_internal.h, which is #included by pcre2test before this file. ','line_number':50,'multiline':True]['text':' The functions and tables herein must all have mode-dependent names. ','line_number':59,'multiline':True]['text':' Table of sizes for the fixed-length opcodes. It's defined in a macro so that
the definition is next to the definition of the opcodes in pcre2_internal.h.
The contents of the table are, however, mode-dependent. ','line_number':69,'multiline':True]['text':'************************************************
*       Print one character from a string        *
************************************************','line_number':77,'multiline':True]['text':' In UTF mode the character may occupy more than one code unit.

Arguments:
  f           file to write to
  ptr         pointer to first code unit of the character
  utf         TRUE if string is UTF (will be FALSE if UTF is not supported)

Returns:      number of additional code units used
','line_number':81,'multiline':True]['text':' If UTF is supported and requested, check for a valid single code unit. ','line_number':97,'multiline':True]['text':' CODE_UNIT_WIDTH ','line_number':108,'multiline':True]['text':' SUPPORT_UNICODE ','line_number':110,'multiline':True]['text':' Handle a valid one-code-unit character at any width. ','line_number':112,'multiline':True]['text':' Code for invalid UTF code units and multi-unit UTF characters is different
for each width. If UTF is not supported, control should never get here, but we
need a return statement to keep the compiler happy. ','line_number':122,'multiline':True]['text':' Malformed UTF-8 should occur only if the sanity check has been turned off.
Rather than swallow random bytes, just stop if we hit a bad one. Print it with
\X instead of \x as an indication. ','line_number':130,'multiline':True]['text':' Invalid starting byte ','line_number':137,'multiline':True]['text':' Number of additional bytes ','line_number':143,'multiline':True]['text':' Invalid secondary byte ','line_number':150,'multiline':True]['text':' PCRE2_CODE_UNIT_WIDTH == 8 ','line_number':159,'multiline':True]['text':' UTF-16: rather than swallow a low surrogate, just stop if we hit a bad one.
Print it with \X instead of \x as an indication. ','line_number':161,'multiline':True]['text':' PCRE2_CODE_UNIT_WIDTH == 16 ','line_number':173,'multiline':True]['text':' For UTF-32 we get here only for a malformed code unit, which should only
occur if the sanity check has been turned off. Print it with \X instead of \x
as an indication. ','line_number':175,'multiline':True]['text':' PCRE2_CODE_UNIT_WIDTH == 32 ','line_number':182,'multiline':True]['text':' SUPPORT_UNICODE ','line_number':183,'multiline':True]['text':'************************************************
*     Print string as a list of code units       *
************************************************','line_number':188,'multiline':True]['text':' These take no account of UTF as they always print each individual code unit.
The string is zero-terminated for print_custring(); the length is given for
print_custring_bylen().

Arguments:
  f          file to write to
  ptr        point to the string
  len        length for print_custring_bylen()

Returns:     nothing
','line_number':192,'multiline':True]['text':'************************************************
*          Find Unicode property name            *
************************************************','line_number':226,'multiline':True]['text':' When there is no UTF/UCP support, the table of names does not exist. This
function should not be called in such configurations, because a pattern that
tries to use Unicode properties won't compile. Rather than put lots of #ifdefs
into the main code, however, we just put one into this function.

Now that the table contains both full names and their abbreviations, we do some
fiddling to try to get the full name, which is either the longer of two found
names, or a 3-character script name. ','line_number':230,'multiline':True]['text':' No UTF support ','line_number':275,'multiline':True]['text':' SUPPORT_UNICODE ','line_number':279,'multiline':True]['text':'************************************************
*       Print Unicode property value             *
************************************************','line_number':284,'multiline':True]['text':' "Normal" properties can be printed from tables. The PT_CLIST property is a
pseudo-property that contains a pointer to a list of case-equivalent
characters.

Arguments:
  f            file to write to
  code         pointer in the compiled code
  before       text to print before
  after        text to print after

Returns:       nothing
','line_number':288,'multiline':True]['text':'************************************************
*            Print compiled pattern              *
************************************************','line_number':322,'multiline':True]['text':' The print_lengths flag controls whether offsets and lengths of items are
printed. Lenths can be turned off from pcre2test so that automatic tests on
bytecode can be written that do not depend on the value of LINK_SIZE.

Arguments:
  re              a compiled pattern
  f               the file to write to
  print_lengths   show various lengths

Returns:          nothing
','line_number':326,'multiline':True]['text':' ========================================================================== ','line_number':363,'multiline':True]['text':' These cases are never obeyed. This is a fudge that causes a compile-
      time error if the vectors OP_names or OP_lengths, which are indexed
      by opcode, are not the correct length. It seems to be the only way to do
      such a check at compile time, as the sizeof() operator does not work in
      the C preprocessor. ','line_number':364,'multiline':True]['text':' ========================================================================== ','line_number':375,'multiline':True]['text':' Fall through ','line_number':490,'multiline':True]['text':' Fall through ','line_number':529,'multiline':True]['text':' Fall through ','line_number':562,'multiline':True]['text':' Fall through ','line_number':579,'multiline':True]['text':' Fall through ','line_number':600,'multiline':True]['text':' Fall through ','line_number':624,'multiline':True]['text':' Fall through ','line_number':632,'multiline':True]['text':' OP_XCLASS cannot occur in 8-bit, non-UTF mode. However, there's no harm
    in having this code always here, and it makes it less messy without all
    those #ifdefs. ','line_number':668,'multiline':True]['text':' Print a bit map ','line_number':702,'multiline':True]['text':' Using 255 ^ instead of ~ avoids clang sanitize warning. ','line_number':709,'multiline':True]['text':' For an XCLASS there is always some additional data ','line_number':737,'multiline':True]['text':' Fall through ','line_number':752,'multiline':True]['text':' Indicate a non-UTF class which was created by negation ','line_number':794,'multiline':True]['text':' Handle repeats after a class or a back reference ','line_number':798,'multiline':True]['text':' Do nothing if it's not a repeat; this code stops picky compilers
        warning about the lack of a default code path. ','line_number':828,'multiline':True]['text':' Fall through ','line_number':854,'multiline':True]['text':' Anything else is just an item with no data, but possibly a flag. ','line_number':856,'multiline':True]['text':' End of pcre2_printint.c ','line_number':868,'multiline':True]