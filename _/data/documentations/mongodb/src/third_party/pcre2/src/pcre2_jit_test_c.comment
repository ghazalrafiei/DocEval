['text':'************************************************
*      Perl-Compatible Regular Expressions       *
************************************************','line_number':1,'multiline':True]['text':' PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
         New API code Copyright (c) 2016 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]['text':'
 Letter characters:
   \xe6\x92\xad = 0x64ad = 25773 (kanji)
 Non-letter characters:
   \xc2\xa1 = 0xa1 =  (Inverted Exclamation Mark)
   \xf3\xa9\xb7\x80 = 0xe9dc0 = 957888
   \xed\xa0\x80 = 55296 = 0xd800 (Invalid UTF character)
   \xed\xb0\x80 = 56320 = 0xdc00 (Invalid UTF character)
 Newlines:
   \xc2\x85 = 0x85 = 133 (NExt Line = NEL)
   \xe2\x80\xa8 = 0x2028 = 8232 (Line Separator)
 Othercase pairs:
   \xc3\xa9 = 0xe9 = 233 (e')
      \xc3\x89 = 0xc9 = 201 (E')
   \xc3\xa1 = 0xe1 = 225 (a')
      \xc3\x81 = 0xc1 = 193 (A')
   \x53 = 0x53 = S
     \x73 = 0x73 = s
     \xc5\xbf = 0x17f = 383 (long S)
   \xc8\xba = 0x23a = 570
      \xe2\xb1\xa5 = 0x2c65 = 11365
   \xe1\xbd\xb8 = 0x1f78 = 8056
      \xe1\xbf\xb8 = 0x1ff8 = 8184
   \xf0\x90\x90\x80 = 0x10400 = 66560
      \xf0\x90\x90\xa8 = 0x10428 = 66600
   \xc7\x84 = 0x1c4 = 452
     \xc7\x85 = 0x1c5 = 453
     \xc7\x86 = 0x1c6 = 454
 Caseless sets:
   ucp_Armenian - \x{531}-\x{556} -> \x{561}-\x{586}
   ucp_Coptic - \x{2c80}-\x{2ce3} -> caseless: XOR 0x1
   ucp_Latin - \x{ff21}-\x{ff3a} -> \x{ff41]-\x{ff5a}

 Mark property:
   \xcc\x8d = 0x30d = 781
 Special:
   \xc2\x80 = 0x80 = 128 (lowest 2 byte character)
   \xdf\xbf = 0x7ff = 2047 (highest 2 byte character)
   \xe0\xa0\x80 = 0x800 = 2048 (lowest 2 byte character)
   \xef\xbf\xbf = 0xffff = 65535 (highest 3 byte character)
   \xf0\x90\x80\x80 = 0x10000 = 65536 (lowest 4 byte character)
   \xf4\x8f\xbf\xbf = 0x10ffff = 1114111 (highest allowed utf character)
','line_number':51,'multiline':True]['text':' --------------------------------------------------------------------------------------- ','line_number':120,'multiline':True]['text':' Constant strings. ','line_number':160,'multiline':True]['text':' !NEVER_BACKSLASH_C ','line_number':193,'multiline':True]['text':' Assertions. ','line_number':202,'multiline':True]['text':' Brackets and alternatives. ','line_number':260,'multiline':True]['text':' Greedy and non-greedy ? operators. ','line_number':277,'multiline':True]['text':' ?? is the prefix of trygraphs in GCC. ','line_number':280,'multiline':True]['text':' Greedy and non-greedy + operators ','line_number':286,'multiline':True]['text':' Greedy and non-greedy * operators ','line_number':296,'multiline':True]['text':' Combining ? + * operators ','line_number':306,'multiline':True]['text':' Single character iterators. ','line_number':313,'multiline':True]['text':' Bracket repeats with limit. ','line_number':358,'multiline':True]['text':' Basic character sets. ','line_number':369,'multiline':True]['text':' Unicode properties. ','line_number':394,'multiline':True]['text':' Possible empty brackets. ','line_number':420,'multiline':True]['text':' Start offset. ','line_number':432,'multiline':True]['text':' Newline. ','line_number':438,'multiline':True]['text':' Any character except newline or any newline. ','line_number':447,'multiline':True]['text':' Atomic groups (no fallback from "next" direction). ','line_number':475,'multiline':True]['text':' Possessive quantifiers. ','line_number':515,'multiline':True]['text':' Back references. ','line_number':552,'multiline':True]['text':' Assertions. ','line_number':593,'multiline':True]['text':' Not empty, ACCEPT, FAIL ','line_number':629,'multiline':True]['text':' Conditional blocks. ','line_number':651,'multiline':True]['text':' Set start of match. ','line_number':691,'multiline':True]['text':' First line. ','line_number':698,'multiline':True]['text':' Recurse. ','line_number':722,'multiline':True]['text':' 16 bit specific tests. ','line_number':756,'multiline':True]['text':' Partial matching. ','line_number':789,'multiline':True]['text':' (*MARK) verb. ','line_number':799,'multiline':True]['text':' (*COMMIT) verb. ','line_number':816,'multiline':True]['text':' (*PRUNE) verb. ','line_number':824,'multiline':True]['text':' (*SKIP) verb. ','line_number':856,'multiline':True]['text':' (*THEN) verb. ','line_number':862,'multiline':True]['text':' Recurse and control verbs. ','line_number':875,'multiline':True]['text':' Script runs and iterations. ','line_number':886,'multiline':True]['text':' Deep recursion. ','line_number':897,'multiline':True]['text':' Deep recursion: Stack limit reached. ','line_number':902,'multiline':True]['text':' SUPPORT_PCRE2_8 ','line_number':954,'multiline':True]['text':' SUPPORT_PCRE2_16 ','line_number':977,'multiline':True]['text':' SUPPORT_PCRE2_32 ','line_number':1000,'multiline':True]['text':' SUPPORT_PCRE2_16 ','line_number':1072,'multiline':True]['text':' SUPPORT_PCRE2_32 ','line_number':1132,'multiline':True]['text':' This test compares the behaviour of interpreter and JIT. Although disabling
	utf or ucp may make tests fail, if the pcre2_match result is the SAME, it is
	still considered successful from pcre2_jit_test point of view. ','line_number':1206,'multiline':True]['text':' printf("\nPattern: %s :\n", current->pattern); ','line_number':1245,'multiline':True]['text':' printf("[%d-%d-%d|%d-%d|%d-%d|%d-%d]%s",
			return_value8[0], return_value16[0], return_value32[0],
			(int)ovector8_1[0], (int)ovector8_1[1],
			(int)ovector16_1[0], (int)ovector16_1[1],
			(int)ovector32_1[0], (int)ovector32_1[1],
			(current->compile_options & PCRE2_CASELESS) ? "C" : ""); ','line_number':1478,'multiline':True]['text':' If F_DIFF is set, just run the test, but do not compare the results.
		Segfaults can still be captured. ','line_number':1485,'multiline':True]['text':' All results must be the same. ','line_number':1493,'multiline':True]['text':' Transform back the results. ','line_number':1554,'multiline':True]['text':' more than one of SUPPORT_PCRE2_8, SUPPORT_PCRE2_16 and SUPPORT_PCRE2_32 ','line_number':1602,'multiline':True]['text':' SUPPORT_UNICODE ','line_number':1823,'multiline':True]['text':' These two are not invalid UTF tests, but this infrastructure fits better for them. ','line_number':1984,'multiline':True]['text':' printf("\nPattern: %s :\n", current->pattern); ','line_number':2063,'multiline':True]['text':' !SUPPORT_UNICODE || !SUPPORT_PCRE2_8 ','line_number':2104,'multiline':True]['text':' SUPPORT_UNICODE && SUPPORT_PCRE2_8 ','line_number':2111,'multiline':True]['text':' printf("\nPattern: %s :\n", current->pattern); ','line_number':2279,'multiline':True]['text':' !SUPPORT_UNICODE || !SUPPORT_PCRE2_16 ','line_number':2312,'multiline':True]['text':' SUPPORT_UNICODE && SUPPORT_PCRE2_16 ','line_number':2319,'multiline':True]['text':' printf("\nPattern: %s :\n", current->pattern); ','line_number':2466,'multiline':True]['text':' !SUPPORT_UNICODE || !SUPPORT_PCRE2_32 ','line_number':2499,'multiline':True]['text':' SUPPORT_UNICODE && SUPPORT_PCRE2_32 ','line_number':2506,'multiline':True]['text':' End of pcre2_jit_test.c ','line_number':2508,'multiline':True]