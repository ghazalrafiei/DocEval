['text':'************************************************
*      Perl-Compatible Regular Expressions       *
************************************************','line_number':1,'multiline':True]['text':' PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2021 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]['text':' This module is a wrapper that provides a POSIX API to the underlying PCRE2
functions. The operative functions are called pcre2_regcomp(), etc., with
wrappers that use the plain POSIX names. In addition, pcre2posix.h defines the
POSIX names as macros for the pcre2_xxx functions, so any program that includes
it and uses the POSIX names will call the base functions directly. This makes
it easier for an application to be sure it gets the PCRE2 versions in the
presence of other POSIX regex libraries. ','line_number':42,'multiline':True]['text':' Ensure that the PCRE2POSIX_EXP_xxx macros are set appropriately for
compiling these functions. This must come before including pcre2posix.h, where
they are set for an application (using these functions) if they have not
previously been set. ','line_number':56,'multiline':True]['text':' Older versions of MSVC lack snprintf(). This define allows for
warning/error-free compilation and testing with MSVC compilers back to at least
MSVC 10/2010. Except for VC6 (which is missing some fundamentals and fails). ','line_number':66,'multiline':True]['text':' Compile-time error numbers start at this value. It should probably never be
changed. This #define is a copy of the one in pcre2_internal.h. ','line_number':75,'multiline':True]['text':' Standard C headers ','line_number':81,'multiline':True]['text':' PCRE2 headers ','line_number':90,'multiline':True]['text':' When compiling with the MSVC compiler, it is sometimes necessary to include
a "calling convention" before exported function names. (This is secondhand
information; I know nothing about MSVC myself). For example, something like

  void __cdecl function(....)

might be needed. In order to make this easy, all the exported functions have
PCRE2_CALL_CONVENTION just before their names. It is rarely needed; if not
set, we ensure here that it has no effect. ','line_number':95,'multiline':True]['text':' Table to translate PCRE2 compile time error codes into POSIX error codes.
Only a few PCRE2 errors with a value greater than 23 turn into special POSIX
codes: most go to REG_BADPAT. The second table lists, in pairs, those that
don't. ','line_number':109,'multiline':True]['text':' No error ','line_number':115,'multiline':True]['text':' \ at end of pattern ','line_number':116,'multiline':True]['text':' \c at end of pattern ','line_number':117,'multiline':True]['text':' unrecognized character follows \ ','line_number':118,'multiline':True]['text':' numbers out of order in {} quantifier ','line_number':119,'multiline':True]['text':' 5 ','line_number':120,'multiline':True]['text':' number too big in {} quantifier ','line_number':121,'multiline':True]['text':' missing terminating ] for character class ','line_number':122,'multiline':True]['text':' invalid escape sequence in character class ','line_number':123,'multiline':True]['text':' range out of order in character class ','line_number':124,'multiline':True]['text':' nothing to repeat ','line_number':125,'multiline':True]['text':' 10 ','line_number':126,'multiline':True]['text':' internal error: unexpected repeat ','line_number':127,'multiline':True]['text':' unrecognized character after (? or (?- ','line_number':128,'multiline':True]['text':' POSIX named classes are supported only within a class ','line_number':129,'multiline':True]['text':' POSIX collating elements are not supported ','line_number':130,'multiline':True]['text':' missing ) ','line_number':131,'multiline':True]['text':' 15 ','line_number':132,'multiline':True]['text':' reference to non-existent subpattern ','line_number':133,'multiline':True]['text':' pattern passed as NULL ','line_number':134,'multiline':True]['text':' unknown compile-time option bit(s) ','line_number':135,'multiline':True]['text':' missing ) after (?# comment ','line_number':136,'multiline':True]['text':' parentheses nested too deeply ','line_number':137,'multiline':True]['text':' 20 ','line_number':138,'multiline':True]['text':' regular expression too large ','line_number':139,'multiline':True]['text':' failed to get memory ','line_number':140,'multiline':True]['text':' unmatched closing parenthesis ','line_number':141,'multiline':True]['text':' internal error: code overflow ','line_number':142,'multiline':True]['text':' unknown POSIX class name ','line_number':146,'multiline':True]['text':' this version of PCRE2 does not have Unicode support ','line_number':147,'multiline':True]['text':' PCRE2 does not support \L, \l, \N{name}, \U, or \u ','line_number':148,'multiline':True]['text':' internal error: unknown newline setting ','line_number':149,'multiline':True]['text':' invalid option bits with PCRE2_LITERAL ','line_number':150,'multiline':True]['text':' \K in lookaround ','line_number':151,'multiline':True]['text':' Table of texts corresponding to POSIX error codes ','line_number':154,'multiline':True]['text':' Dummy for value 0 ','line_number':157,'multiline':True]['text':' REG_ASSERT ','line_number':158,'multiline':True]['text':' BADBR      ','line_number':159,'multiline':True]['text':' BADPAT     ','line_number':160,'multiline':True]['text':' BADRPT     ','line_number':161,'multiline':True]['text':' EBRACE     ','line_number':162,'multiline':True]['text':' EBRACK     ','line_number':163,'multiline':True]['text':' ECOLLATE   ','line_number':164,'multiline':True]['text':' ECTYPE     ','line_number':165,'multiline':True]['text':' EESCAPE    ','line_number':166,'multiline':True]['text':' EMPTY      ','line_number':167,'multiline':True]['text':' EPAREN     ','line_number':168,'multiline':True]['text':' ERANGE     ','line_number':169,'multiline':True]['text':' ESIZE      ','line_number':170,'multiline':True]['text':' ESPACE     ','line_number':171,'multiline':True]['text':' ESUBREG    ','line_number':172,'multiline':True]['text':' INVARG     ','line_number':173,'multiline':True]['text':' NOMATCH    ','line_number':174,'multiline':True]['text':' REMOVE THIS CODE ','line_number':179,'multiline':True]['text':'************************************************
*      Wrappers with traditional POSIX names     *
************************************************','line_number':193,'multiline':True]['text':' Keep defining them to preseve the ABI for applications linked to the pcre2
POSIX library before these names were changed into macros in pcre2posix.h.
This also ensures that the POSIX names are callable from languages that do not
include pcre2posix.h. It is vital to #undef the macro definitions from
pcre2posix.h! ','line_number':197,'multiline':True]['text':'************************************************
*          Translate error code to string        *
************************************************','line_number':239,'multiline':True]['text':'************************************************
*           Free store held by a regex           *
************************************************','line_number':268,'multiline':True]['text':'************************************************
*            Compile a regular expression        *
************************************************','line_number':281,'multiline':True]['text':'
Arguments:
  preg        points to a structure for recording the compiled expression
  pattern     the pattern to compile
  cflags      compilation flags

Returns:      0 on success
              various non-zero codes on failure
','line_number':285,'multiline':True]['text':' A negative value is a UTF error; otherwise all error codes are greater
  than COMPILE_ERROR_BASE, but check, just in case. ','line_number':324,'multiline':True]['text':' No meaning after successful compile ','line_number':341,'multiline':True]['text':'************************************************
*              Match a regular expression        *
************************************************','line_number':354,'multiline':True]['text':' A suitable match_data block, large enough to hold all possible captures, was
obtained when the pattern was compiled, to save having to allocate and free it
for each match. If REG_NOSUB was specified at compile time, the nmatch and
pmatch arguments are ignored, and the only result is yes/no/error. ','line_number':358,'multiline':True]['text':' When REG_NOSUB was specified, or if no vector has been passed in which to
put captured strings, ensure that nmatch is zero. This will stop any attempt to
write to pmatch. ','line_number':377,'multiline':True]['text':' REG_STARTEND is a BSD extension, to allow for non-NUL-terminated strings.
The man page from OS X says "REG_STARTEND affects only the location of the
string, not how it is matched". That is why the "so" value is used to bump the
start location rather than being passed as a PCRE2 "starting offset". ','line_number':383,'multiline':True]['text':' Successful match ','line_number':403,'multiline':True]['text':' Unsuccessful match ','line_number':421,'multiline':True]['text':' End of pcre2posix.c ','line_number':440,'multiline':True]