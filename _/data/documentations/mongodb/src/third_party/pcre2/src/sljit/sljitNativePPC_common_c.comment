['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]['text':' Length of an instruction word.
   Both for ppc-32 and ppc-64. ','line_number':32,'multiline':True]['text':' Cache flush for POWER architecture. ','line_number':57,'multiline':True]['text':' Cache flush for PowerPC architecture. ','line_number':70,'multiline':True]['text':' _AIX ','line_number':89,'multiline':True]['text':' (defined SLJIT_CACHE_FLUSH_OWN_IMPL && SLJIT_CACHE_FLUSH_OWN_IMPL) ','line_number':92,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':115,'multiline':True]['text':'  Instrucion forms                                                     ','line_number':116,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':117,'multiline':True]['text':' Instruction bit sections.
   OE and Rc flag (see ALT_SET_FLAGS). ','line_number':131,'multiline':True]['text':' Rc flag (see ALT_SET_FLAGS). ','line_number':134,'multiline':True]['text':' These structures are ordered by their address. ','line_number':437,'multiline':True]['text':' Just recording the address. ','line_number':439,'multiline':True]['text':' rldicr rX,rX,32,31 -> rX,rX,16,47 ','line_number':464,'multiline':True]['text':' oris -> ori ','line_number':467,'multiline':True]['text':' Set the fields of immediate loads. ','line_number':556,'multiline':True]['text':' Available by default. ','line_number':637,'multiline':True]['text':' A saved register is set to a zero value. ','line_number':641,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':652,'multiline':True]['text':'  Entry, exit                                                          ','line_number':653,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':654,'multiline':True]['text':' inp_flags: ','line_number':656,'multiline':True]['text':' Creates an index in data_transfer_insts array. ','line_number':658,'multiline':True]['text':' Separates integer and floating point registers ','line_number':667,'multiline':True]['text':' Other inp_flags. ','line_number':673,'multiline':True]['text':' Integer opertion and set flags -> requires exts on 64 bit systems. ','line_number':675,'multiline':True]['text':' This flag affects the RC() and OERC() macros. ','line_number':677,'multiline':True]['text':' Source and destination is register. ','line_number':685,'multiline':True]['text':'
ALT_SIGN_EXT		0x000100
ALT_SET_FLAGS		0x000200
ALT_FORM1		0x001000
...
ALT_FORM5		0x010000 ','line_number':689,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':905,'multiline':True]['text':'  Operators                                                            ','line_number':906,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':907,'multiline':True]['text':' s/l - store/load (1 bit)
   i/x - immediate/indexed form
   u/s - signed/unsigned (1 bit)
   w/b/h/i - word/byte/half/int allowed (2 bit)

   Some opcodes are repeated (e.g. store signed / unsigned byte is the same instruction). ','line_number':909,'multiline':True]['text':' 64 bit only: [reg+imm] must be aligned to 4 bytes. ','line_number':916,'multiline':True]['text':' -------- Integer -------- ','line_number':933,'multiline':True]['text':' Word. ','line_number':935,'multiline':True]['text':' w u i s ','line_number':937,'multiline':True]['text':' stw ','line_number':937,'multiline':True]['text':' std ','line_number':937,'multiline':True]['text':' w u i l ','line_number':938,'multiline':True]['text':' lwz ','line_number':938,'multiline':True]['text':' ld ','line_number':938,'multiline':True]['text':' w u x s ','line_number':939,'multiline':True]['text':' stwx ','line_number':939,'multiline':True]['text':' stdx ','line_number':939,'multiline':True]['text':' w u x l ','line_number':940,'multiline':True]['text':' lwzx ','line_number':940,'multiline':True]['text':' ldx ','line_number':940,'multiline':True]['text':' w s i s ','line_number':942,'multiline':True]['text':' stw ','line_number':942,'multiline':True]['text':' std ','line_number':942,'multiline':True]['text':' w s i l ','line_number':943,'multiline':True]['text':' lwz ','line_number':943,'multiline':True]['text':' ld ','line_number':943,'multiline':True]['text':' w s x s ','line_number':944,'multiline':True]['text':' stwx ','line_number':944,'multiline':True]['text':' stdx ','line_number':944,'multiline':True]['text':' w s x l ','line_number':945,'multiline':True]['text':' lwzx ','line_number':945,'multiline':True]['text':' ldx ','line_number':945,'multiline':True]['text':' Byte. ','line_number':947,'multiline':True]['text':' b u i s ','line_number':949,'multiline':True]['text':' stb ','line_number':949,'multiline':True]['text':' b u i l ','line_number':950,'multiline':True]['text':' lbz ','line_number':950,'multiline':True]['text':' b u x s ','line_number':951,'multiline':True]['text':' stbx ','line_number':951,'multiline':True]['text':' b u x l ','line_number':952,'multiline':True]['text':' lbzx ','line_number':952,'multiline':True]['text':' b s i s ','line_number':954,'multiline':True]['text':' stb ','line_number':954,'multiline':True]['text':' b s i l ','line_number':955,'multiline':True]['text':' lbz ','line_number':955,'multiline':True]['text':' EXTS_REQ ','line_number':955,'multiline':True]['text':' b s x s ','line_number':956,'multiline':True]['text':' stbx ','line_number':956,'multiline':True]['text':' b s x l ','line_number':957,'multiline':True]['text':' lbzx ','line_number':957,'multiline':True]['text':' EXTS_REQ ','line_number':957,'multiline':True]['text':' Half. ','line_number':959,'multiline':True]['text':' h u i s ','line_number':961,'multiline':True]['text':' sth ','line_number':961,'multiline':True]['text':' h u i l ','line_number':962,'multiline':True]['text':' lhz ','line_number':962,'multiline':True]['text':' h u x s ','line_number':963,'multiline':True]['text':' sthx ','line_number':963,'multiline':True]['text':' h u x l ','line_number':964,'multiline':True]['text':' lhzx ','line_number':964,'multiline':True]['text':' h s i s ','line_number':966,'multiline':True]['text':' sth ','line_number':966,'multiline':True]['text':' h s i l ','line_number':967,'multiline':True]['text':' lha ','line_number':967,'multiline':True]['text':' h s x s ','line_number':968,'multiline':True]['text':' sthx ','line_number':968,'multiline':True]['text':' h s x l ','line_number':969,'multiline':True]['text':' lhax ','line_number':969,'multiline':True]['text':' Int. ','line_number':971,'multiline':True]['text':' i u i s ','line_number':973,'multiline':True]['text':' stw ','line_number':973,'multiline':True]['text':' i u i l ','line_number':974,'multiline':True]['text':' lwz ','line_number':974,'multiline':True]['text':' i u x s ','line_number':975,'multiline':True]['text':' stwx ','line_number':975,'multiline':True]['text':' i u x l ','line_number':976,'multiline':True]['text':' lwzx ','line_number':976,'multiline':True]['text':' i s i s ','line_number':978,'multiline':True]['text':' stw ','line_number':978,'multiline':True]['text':' i s i l ','line_number':979,'multiline':True]['text':' lwz ','line_number':979,'multiline':True]['text':' lwa ','line_number':979,'multiline':True]['text':' i s x s ','line_number':980,'multiline':True]['text':' stwx ','line_number':980,'multiline':True]['text':' i s x l ','line_number':981,'multiline':True]['text':' lwzx ','line_number':981,'multiline':True]['text':' lwax ','line_number':981,'multiline':True]['text':' -------- Floating point -------- ','line_number':983,'multiline':True]['text':' d   i s ','line_number':985,'multiline':True]['text':' stfd ','line_number':985,'multiline':True]['text':' d   i l ','line_number':986,'multiline':True]['text':' lfd ','line_number':986,'multiline':True]['text':' d   x s ','line_number':987,'multiline':True]['text':' stfdx ','line_number':987,'multiline':True]['text':' d   x l ','line_number':988,'multiline':True]['text':' lfdx ','line_number':988,'multiline':True]['text':' s   i s ','line_number':990,'multiline':True]['text':' stfs ','line_number':990,'multiline':True]['text':' s   i l ','line_number':991,'multiline':True]['text':' lfs ','line_number':991,'multiline':True]['text':' s   x s ','line_number':992,'multiline':True]['text':' stfsx ','line_number':992,'multiline':True]['text':' s   x l ','line_number':993,'multiline':True]['text':' lfsx ','line_number':993,'multiline':True]['text':' -------- Integer -------- ','line_number':998,'multiline':True]['text':' Word. ','line_number':1000,'multiline':True]['text':' w u i s ','line_number':1002,'multiline':True]['text':' stwu ','line_number':1002,'multiline':True]['text':' stdu ','line_number':1002,'multiline':True]['text':' w u i l ','line_number':1003,'multiline':True]['text':' lwzu ','line_number':1003,'multiline':True]['text':' ldu ','line_number':1003,'multiline':True]['text':' w u x s ','line_number':1004,'multiline':True]['text':' stwux ','line_number':1004,'multiline':True]['text':' stdux ','line_number':1004,'multiline':True]['text':' w u x l ','line_number':1005,'multiline':True]['text':' lwzux ','line_number':1005,'multiline':True]['text':' ldux ','line_number':1005,'multiline':True]['text':' w s i s ','line_number':1007,'multiline':True]['text':' stwu ','line_number':1007,'multiline':True]['text':' stdu ','line_number':1007,'multiline':True]['text':' w s i l ','line_number':1008,'multiline':True]['text':' lwzu ','line_number':1008,'multiline':True]['text':' ldu ','line_number':1008,'multiline':True]['text':' w s x s ','line_number':1009,'multiline':True]['text':' stwux ','line_number':1009,'multiline':True]['text':' stdux ','line_number':1009,'multiline':True]['text':' w s x l ','line_number':1010,'multiline':True]['text':' lwzux ','line_number':1010,'multiline':True]['text':' ldux ','line_number':1010,'multiline':True]['text':' Byte. ','line_number':1012,'multiline':True]['text':' b u i s ','line_number':1014,'multiline':True]['text':' stbu ','line_number':1014,'multiline':True]['text':' b u i l ','line_number':1015,'multiline':True]['text':' lbzu ','line_number':1015,'multiline':True]['text':' b u x s ','line_number':1016,'multiline':True]['text':' stbux ','line_number':1016,'multiline':True]['text':' b u x l ','line_number':1017,'multiline':True]['text':' lbzux ','line_number':1017,'multiline':True]['text':' b s i s ','line_number':1019,'multiline':True]['text':' stbu ','line_number':1019,'multiline':True]['text':' b s i l ','line_number':1020,'multiline':True]['text':' no such instruction ','line_number':1020,'multiline':True]['text':' b s x s ','line_number':1021,'multiline':True]['text':' stbux ','line_number':1021,'multiline':True]['text':' b s x l ','line_number':1022,'multiline':True]['text':' no such instruction ','line_number':1022,'multiline':True]['text':' Half. ','line_number':1024,'multiline':True]['text':' h u i s ','line_number':1026,'multiline':True]['text':' sthu ','line_number':1026,'multiline':True]['text':' h u i l ','line_number':1027,'multiline':True]['text':' lhzu ','line_number':1027,'multiline':True]['text':' h u x s ','line_number':1028,'multiline':True]['text':' sthux ','line_number':1028,'multiline':True]['text':' h u x l ','line_number':1029,'multiline':True]['text':' lhzux ','line_number':1029,'multiline':True]['text':' h s i s ','line_number':1031,'multiline':True]['text':' sthu ','line_number':1031,'multiline':True]['text':' h s i l ','line_number':1032,'multiline':True]['text':' lhau ','line_number':1032,'multiline':True]['text':' h s x s ','line_number':1033,'multiline':True]['text':' sthux ','line_number':1033,'multiline':True]['text':' h s x l ','line_number':1034,'multiline':True]['text':' lhaux ','line_number':1034,'multiline':True]['text':' Int. ','line_number':1036,'multiline':True]['text':' i u i s ','line_number':1038,'multiline':True]['text':' stwu ','line_number':1038,'multiline':True]['text':' i u i l ','line_number':1039,'multiline':True]['text':' lwzu ','line_number':1039,'multiline':True]['text':' i u x s ','line_number':1040,'multiline':True]['text':' stwux ','line_number':1040,'multiline':True]['text':' i u x l ','line_number':1041,'multiline':True]['text':' lwzux ','line_number':1041,'multiline':True]['text':' i s i s ','line_number':1043,'multiline':True]['text':' stwu ','line_number':1043,'multiline':True]['text':' i s i l ','line_number':1044,'multiline':True]['text':' lwzu ','line_number':1044,'multiline':True]['text':' no such instruction ','line_number':1044,'multiline':True]['text':' i s x s ','line_number':1045,'multiline':True]['text':' stwux ','line_number':1045,'multiline':True]['text':' i s x l ','line_number':1046,'multiline':True]['text':' lwzux ','line_number':1046,'multiline':True]['text':' lwaux ','line_number':1046,'multiline':True]['text':' -------- Floating point -------- ','line_number':1048,'multiline':True]['text':' d   i s ','line_number':1050,'multiline':True]['text':' stfdu ','line_number':1050,'multiline':True]['text':' d   i l ','line_number':1051,'multiline':True]['text':' lfdu ','line_number':1051,'multiline':True]['text':' d   x s ','line_number':1052,'multiline':True]['text':' stfdux ','line_number':1052,'multiline':True]['text':' d   x l ','line_number':1053,'multiline':True]['text':' lfdux ','line_number':1053,'multiline':True]['text':' s   i s ','line_number':1055,'multiline':True]['text':' stfsu ','line_number':1055,'multiline':True]['text':' s   i l ','line_number':1056,'multiline':True]['text':' lfsu ','line_number':1056,'multiline':True]['text':' s   x s ','line_number':1057,'multiline':True]['text':' stfsux ','line_number':1057,'multiline':True]['text':' s   x l ','line_number':1058,'multiline':True]['text':' lfsux ','line_number':1058,'multiline':True]['text':' Simple cases, (no caching is required). ','line_number':1063,'multiline':True]['text':' Should work when (arg & REG_MASK) == 0. ','line_number':1071,'multiline':True]['text':' The rest is PPC-64 only. ','line_number':1130,'multiline':True]['text':' arg1 goes to TMP_REG1 or src reg
	   arg2 goes to TMP_REG2, imm or src reg
	   result goes to TMP_REG2, so put result can use TMP_REG1. ','line_number':1144,'multiline':True]['text':' Destination check. ','line_number':1153,'multiline':True]['text':' The REG_DEST is only used by SLJIT_MOV operations, although
		 * it is set for op2 operations with unset destination. ','line_number':1156,'multiline':True]['text':' Source 1. ','line_number':1164,'multiline':True]['text':' Source 2. ','line_number':1181,'multiline':True]['text':' Works with SLJIT_MEM0() case as well. ','line_number':1267,'multiline':True]['text':' Most operations expect sign extended arguments. ','line_number':1322,'multiline':True]['text':' Most operations expect sign extended arguments. ','line_number':1444,'multiline':True]['text':' Range between -1 and -32768 is covered above. ','line_number':1481,'multiline':True]['text':' Range between -1 and -32768 is covered above. ','line_number':1574,'multiline':True]['text':' We know ALT_SIGN_EXT is set if it is an SLJIT_32 on 64 bit systems. ','line_number':1581,'multiline':True]['text':' Commutative unsigned operations. ','line_number':1610,'multiline':True]['text':' Unlike or and xor, the and resets unwanted bits as well. ','line_number':1630,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':1727,'multiline':True]['text':'  Floating point operators                                             ','line_number':1728,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':1729,'multiline':True]['text':' SLJIT_CONFIG_PPC_64 ','line_number':1747,'multiline':True]['text':' We can ignore the temporary data store on the stack from caching point of view. ','line_number':1754,'multiline':True]['text':' This works regardless we have SLJIT_MEM1 or SLJIT_MEM0. ','line_number':1801,'multiline':True]['text':' First, a special double floating point value is constructed: (2^53 + (input xor (2^31)))
	   The double precision format has exactly 53 bit precision, so the lower 32 bit represents
	   the lower 32 bit of such value. The result of xor 2^31 is the same as adding 0x80000000
	   to the input, which shifts it into the 0 - 0xffffffff range. To get the converted floating
	   point value, we need to substract 2^53 + 2^31 from the constructed value. ','line_number':1862,'multiline':True]['text':' Fall through. ','line_number':1933,'multiline':True]['text':' FMUL use FC as src2 ','line_number':1990,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2006,'multiline':True]['text':'  Other instructions                                                   ','line_number':2007,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2008,'multiline':True]['text':' Memory. ','line_number':2019,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2024,'multiline':True]['text':'  Conditional instructions                                             ','line_number':2025,'multiline':True]['text':' --------------------------------------------------------------------- ','line_number':2026,'multiline':True]['text':' fallthrough ','line_number':2050,'multiline':True]['text':' fallthrough ','line_number':2058,'multiline':True]['text':' In PPC, we don't need to touch the arguments. ','line_number':2135,'multiline':True]['text':' SLJIT_PASS_ENTRY_ADDR_TO_CALL ','line_number':2190,'multiline':True]['text':' SLJIT_PASS_ENTRY_ADDR_TO_CALL ','line_number':2192,'multiline':True]['text':' These jumps are converted to jump/call instructions when possible. ','line_number':2194,'multiline':True]['text':' SLJIT_PASS_ENTRY_ADDR_TO_CALL ','line_number':2203,'multiline':True]