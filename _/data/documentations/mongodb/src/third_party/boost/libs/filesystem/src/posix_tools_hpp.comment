['text':'  posix_tools.hpp  -------------------------------------------------------------------//','line_number':1,'multiline':False]['text':'  Copyright 2021 Andrey Semashev','line_number':3,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':6,'multiline':False]['text':'  See library home page at http://www.boost.org/libs/filesystem','line_number':8,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':10,'multiline':False]['text':'!
 * Closes a file descriptor and returns the result, similar to close(2). Unlike close(2), guarantees that the file descriptor is closed even if EINTR error happens.
 *
 * Some systems don't close the file descriptor in case if the thread is interrupted by a signal and close(2) returns EINTR.
 * Other (most) systems do close the file descriptor even when when close(2) returns EINTR, and attempting to close it
 * again could close a different file descriptor that was opened by a different thread. This function hides this difference in behavior.
 *
 * Future POSIX standards will likely fix this by introducing posix_close (see https://www.austingroupbugs.net/view.php?id=529)
 * and prohibiting returning EINTR from close(2), but we still have to support older systems where this new behavior is not available and close(2)
 * behaves differently between systems.
 ','line_number':26,'multiline':True]['text':' namespace detail','line_number':60,'multiline':False]['text':' namespace filesystem','line_number':61,'multiline':False]['text':' namespace boost','line_number':62,'multiline':False]['text':' BOOST_FILESYSTEM_SRC_POSIX_TOOLS_HPP_','line_number':64,'multiline':False]