['text':'
 *          Copyright Andrey Semashev 2007 - 2018.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   timestamp.cpp
 * \author Andrey Semashev
 * \date   31.07.2011
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]['text':' for config macros','line_number':30,'multiline':False]['text':' Directly use API from Vista and later','line_number':54,'multiline':False]['text':' BOOST_USE_WINAPI_VERSION >= BOOST_WINAPI_VERSION_WIN6','line_number':57,'multiline':False]['text':' Zero-initialized initially','line_number':76,'multiline':False]['text':'! Artifical implementation of GetTickCount64','line_number':79,'multiline':False]['text':' Note: Even in single-threaded builds we have to implement get_tick_count64 in a thread-safe way because','line_number':82,'multiline':False]['text':'       it can be called in the system thread pool during refreshes concurrently with user's calls.','line_number':83,'multiline':False]['text':'! The function is called periodically in the system thread pool to make sure g_state.ticks is timely updated','line_number':96,'multiline':False]['text':'! Cleanup function to stop get_tick_count64 refreshes','line_number':102,'multiline':False]['text':' Use native API','line_number':126,'multiline':False]['text':' No native API available. Use emulation with periodic refreshes to make sure the GetTickCount wrap arounds are properly counted.','line_number':132,'multiline':False]['text':' namespace','line_number':158,'multiline':False]['text':' BOOST_USE_WINAPI_VERSION >= BOOST_WINAPI_VERSION_WIN6','line_number':162,'multiline':False]['text':' POSIX timers supported ','line_number':164,'multiline':True]['text':' GNU Hurd, OpenBSD and Nuxi CloudABI don't support POSIX timers fully but do provide clock_gettime() ','line_number':165,'multiline':True]['text':' Timestamps are always in nanoseconds','line_number':169,'multiline':False]['text':'!
 * \c get_timestamp implementation based on POSIX realtime clock.
 * Note that this implementation is only used as a last resort since
 * this timer can be manually set and may jump due to DST change.
 ','line_number':175,'multiline':True]['text':'! \c get_timestamp implementation based on POSIX monotonic clock','line_number':194,'multiline':False]['text':' The current platform does not support monotonic timer.','line_number':203,'multiline':False]['text':' Fall back to realtime clock, which is not exactly what we need','line_number':204,'multiline':False]['text':' but is better than nothing.','line_number':205,'multiline':False]['text':' if defined(_POSIX_MONOTONIC_CLOCK)','line_number':217,'multiline':False]['text':' if defined(_POSIX_MONOTONIC_CLOCK)','line_number':219,'multiline':False]['text':' namespace','line_number':221,'multiline':False]['text':' Use POSIX API','line_number':223,'multiline':False]['text':' Often the timebase rational equals 1, we can optimize for this case','line_number':242,'multiline':False]['text':' Timestamps are in nanoseconds','line_number':245,'multiline':False]['text':'! \c get_timestamp implementation based on MacOS X absolute time','line_number':256,'multiline':False]['text':' namespace','line_number':262,'multiline':False]['text':' Use MacOS X API','line_number':264,'multiline':False]['text':' namespace aux','line_number':273,'multiline':False]['text':' namespace log','line_number':275,'multiline':False]['text':' namespace boost','line_number':277,'multiline':False]