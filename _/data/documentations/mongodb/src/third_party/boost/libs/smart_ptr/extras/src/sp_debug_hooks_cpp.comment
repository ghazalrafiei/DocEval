['text':'','line_number':1,'multiline':False]['text':'  sp_debug_hooks.cpp','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  Copyright (c) 2002, 2003 Peter Dimov','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':6,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' m * sizeof(int) must be aligned appropriately','line_number':17,'multiline':False]['text':' magic values to mark heap blocks with','line_number':19,'multiline':False]['text':' for compilers where things aren't in std','line_number':27,'multiline':False]['text':' operator new','line_number':29,'multiline':False]['text':' debug hooks','line_number':107,'multiline':False]['text':' second smart pointer to the same address','line_number':119,'multiline':False]['text':' allocated with new[]','line_number':120,'multiline':False]['text':' not allocated with new','line_number':121,'multiline':False]['text':' attempt to destroy nonmanaged block','line_number':138,'multiline':False]['text':' It is not possible to handle the array hooks in a portable manner.','line_number':148,'multiline':False]['text':' The implementation typically reserves a bit of storage for the number','line_number':149,'multiline':False]['text':' of objects in the array, and the argument of the array hook isn't','line_number':150,'multiline':False]['text':' equal to the return value of operator new[].','line_number':151,'multiline':False]['text':' p ','line_number':153,'multiline':True]['text':'
    if(p == 0) return;

    // adjust p depending on the implementation

    int * pm = static_cast<int*>(p);
    pm -= m;

    BOOST_ASSERT(*pm != adopted_array);     // second smart array pointer to the same address
    BOOST_ASSERT(*pm != allocated_scalar);  // allocated with new
    BOOST_ASSERT(*pm == allocated_array);   // not allocated with new[]

    *pm = adopted_array;
','line_number':155,'multiline':True]['text':' p ','line_number':171,'multiline':True]['text':'
    if(p == 0) return;

    // adjust p depending on the implementation

    int * pm = static_cast<int*>(p);
    pm -= m;

    BOOST_ASSERT(*pm == adopted_array); // attempt to destroy nonmanaged block

    *pm = allocated_array;
','line_number':173,'multiline':True]['text':' namespace boost','line_number':187,'multiline':False]['text':' operator delete','line_number':189,'multiline':False]['text':' double delete','line_number':198,'multiline':False]['text':' delete p.get();','line_number':199,'multiline':False]['text':' allocated with new[]','line_number':200,'multiline':False]['text':' not allocated with new','line_number':201,'multiline':False]['text':' double delete','line_number':224,'multiline':False]['text':' delete p.get();','line_number':225,'multiline':False]['text':' allocated with new','line_number':226,'multiline':False]['text':' not allocated with new[]','line_number':227,'multiline':False]['text':' defined(BOOST_SP_ENABLE_DEBUG_HOOKS)','line_number':243,'multiline':False]