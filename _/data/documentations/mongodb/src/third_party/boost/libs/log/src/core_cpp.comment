['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   core.cpp
 * \author Andrey Semashev
 * \date   19.04.2007
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]['text':'! Sequence shuffling algorithm. Very similar to std::random_shuffle, used for forward portability with compilers that removed it from the standard library (C++17).','line_number':62,'multiline':False]['text':' namespace','line_number':77,'multiline':False]['text':' namespace aux','line_number':79,'multiline':False]['text':'! Private record data information, with core-specific structures','line_number':81,'multiline':False]['text':'! Underlying memory allocator','line_number':85,'multiline':False]['text':'! Sink pointer type','line_number':87,'multiline':False]['text':'! Iterator range with pointers to the accepting sinks','line_number':89,'multiline':False]['text':'! Number of sinks accepting the record','line_number':93,'multiline':False]['text':'! Maximum number of sinks accepting the record','line_number':95,'multiline':False]['text':'! The flag indicates that the record has to be detached from the current thread','line_number':97,'multiline':False]['text':'! Initializing constructor','line_number':101,'multiline':False]['text':'! Creates the object with the specified capacity','line_number':111,'multiline':False]['text':'! Destroys the object and frees the underlying storage','line_number':124,'multiline':False]['text':'! Returns iterator range with the pointers to the accepting sinks','line_number':145,'multiline':False]['text':'! Adds an accepting sink','line_number':152,'multiline':False]['text':'! Returns the number of accepting sinks','line_number':162,'multiline':False]['text':'! Returns the flag indicating whether it is needed to detach the record from the current thread','line_number':165,'multiline':False]['text':'! Returns a pointer to the first accepting sink','line_number':172,'multiline':False]['text':'! Destructor','line_number':184,'multiline':False]['text':'! The function ensures that the log record does not depend on any thread-specific data.','line_number':190,'multiline':False]['text':' Yep, a bit hackish. I'll need a better backdoor to do it gracefully.','line_number':203,'multiline':False]['text':' Move the implementation to the view','line_number':208,'multiline':False]['text':'! Logging system implementation','line_number':213,'multiline':False]['text':'! Base type of singleton holder','line_number':221,'multiline':False]['text':'! Read lock type','line_number':228,'multiline':False]['text':'! Write lock type','line_number':230,'multiline':False]['text':'! Sinks container type','line_number':234,'multiline':False]['text':'! Thread-specific data','line_number':237,'multiline':False]['text':'! Thread-specific attribute set','line_number':241,'multiline':False]['text':'! Random number generator for shuffling','line_number':244,'multiline':False]['text':'! Creates a seed for RNG','line_number':252,'multiline':False]['text':'! Synchronization mutex','line_number':265,'multiline':False]['text':'! List of sinks involved into output','line_number':269,'multiline':False]['text':'! Default sink','line_number':271,'multiline':False]['text':'! Global attribute set','line_number':274,'multiline':False]['text':'! Thread-specific data','line_number':277,'multiline':False]['text':'! Cached pointer to the thread-specific data','line_number':281,'multiline':False]['text':'! Thread-specific data','line_number':286,'multiline':False]['text':'! The global state of logging','line_number':290,'multiline':False]['text':'! Global filter','line_number':296,'multiline':False]['text':'! Exception handler','line_number':299,'multiline':False]['text':'! Constructor','line_number':303,'multiline':False]['text':'! Opens a record','line_number':310,'multiline':False]['text':' Try a quick win first','line_number':317,'multiline':False]['text':' Lock the core to be safe against any attribute or sink set modifications','line_number':330,'multiline':False]['text':' Compose a view of attribute values (unfrozen, yet)','line_number':336,'multiline':False]['text':' The global filter passed, trying the sinks','line_number':344,'multiline':False]['text':' apply_sink_filter will invoke the exception handler if it has to','line_number':347,'multiline':False]['text':' Use the default sink','line_number':361,'multiline':False]['text':' No sinks accepted the record','line_number':369,'multiline':False]['text':' Some sinks have accepted the record','line_number':375,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':387,'multiline':False]['text':' Lock the core to be safe against any attribute or sink set modifications','line_number':398,'multiline':False]['text':'! The method returns the current thread-specific data','line_number':413,'multiline':False]['text':'! The function initializes the logging system','line_number':433,'multiline':False]['text':'! The method initializes thread-specific data','line_number':440,'multiline':False]['text':'! Invokes sink-specific filter and adds the sink to the record if the filter passes the log record','line_number':456,'multiline':False]['text':' If at least one sink accepts the record, it's time to create it','line_number':463,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':479,'multiline':False]['text':'! Cached pointer to the thread-specific data','line_number':490,'multiline':False]['text':' defined(BOOST_LOG_USE_COMPILER_TLS)','line_number':492,'multiline':False]['text':'! Logging system constructor','line_number':494,'multiline':False]['text':'! Logging system destructor','line_number':500,'multiline':False]['text':'! The method returns a pointer to the logging system instance','line_number':507,'multiline':False]['text':'! The method enables or disables logging and returns the previous state of logging flag','line_number':513,'multiline':False]['text':'! The method allows to detect if logging is enabled','line_number':525,'multiline':False]['text':'! The method adds a new sink','line_number':535,'multiline':False]['text':'! The method removes the sink from the output','line_number':545,'multiline':False]['text':'! The method removes all registered sinks from the output','line_number':555,'multiline':False]['text':'! The method adds an attribute to the global attribute set','line_number':563,'multiline':False]['text':'! The method removes an attribute from the global attribute set','line_number':571,'multiline':False]['text':'! The method returns the complete set of currently registered global attributes','line_number':578,'multiline':False]['text':'! The method replaces the complete set of currently registered global attributes with the provided set','line_number':585,'multiline':False]['text':'! The method adds an attribute to the thread-specific attribute set','line_number':593,'multiline':False]['text':'! The method removes an attribute from the thread-specific attribute set','line_number':601,'multiline':False]['text':'! The method returns the complete set of currently registered thread-specific attributes','line_number':608,'multiline':False]['text':'! The method replaces the complete set of currently registered thread-specific attributes with the provided set','line_number':614,'multiline':False]['text':'! An internal method to set the global filter','line_number':622,'multiline':False]['text':'! The method removes the global logging filter','line_number':629,'multiline':False]['text':'! The method sets exception handler function','line_number':636,'multiline':False]['text':'! The method performs flush on all registered sinks.','line_number':643,'multiline':False]['text':' Acquire exclusive lock to prevent any logging attempts while flushing','line_number':646,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':662,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':682,'multiline':False]['text':'! The method attempts to open a new record to be written','line_number':692,'multiline':False]['text':'! The method attempts to open a new record to be written','line_number':698,'multiline':False]['text':'! The method attempts to open a new record to be written.','line_number':704,'multiline':False]['text':'! The method pushes the record','line_number':710,'multiline':False]['text':' Lock sinks that are willing to consume the record','line_number':723,'multiline':False]['text':' First try to distribute load between different sinks','line_number':740,'multiline':False]['text':' If all sinks are busy then block on any','line_number':759,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':780,'multiline':False]['text':' Lock the core to be safe against any attribute or sink set modifications','line_number':783,'multiline':False]['text':' Skip the sink that failed to consume the record','line_number':790,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':800,'multiline':False]['text':' Lock the core to be safe against any attribute or sink set modifications','line_number':803,'multiline':False]['text':' namespace log','line_number':812,'multiline':False]['text':' namespace boost','line_number':814,'multiline':False]