['text':'  filesystem path.cpp  -------------------------------------------------------------  //','line_number':1,'multiline':False]['text':'  Copyright Beman Dawes 2008','line_number':3,'multiline':False]['text':'  Copyright Andrey Semashev 2021','line_number':4,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':7,'multiline':False]['text':'  Library home page: http://www.boost.org/libs/filesystem','line_number':9,'multiline':False]['text':' codecvt_error_category()','line_number':15,'multiline':False]['text':' for BOOST_SYSTEM_HAS_CONSTEXPR','line_number':17,'multiline':False]['text':' std::atexit','line_number':25,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':47,'multiline':False]['text':'                                                                                      //','line_number':48,'multiline':False]['text':'                                class path helpers                                    //','line_number':49,'multiline':False]['text':'                                                                                      //','line_number':50,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':51,'multiline':False]['text':'------------------------------------------------------------------------------------//','line_number':54,'multiline':False]['text':'                        miscellaneous class path helpers                            //','line_number':55,'multiline':False]['text':'------------------------------------------------------------------------------------//','line_number':56,'multiline':False]['text':' https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html','line_number':78,'multiline':False]['text':' Device names are:','line_number':79,'multiline':False]['text':'','line_number':80,'multiline':False]['text':' - PRN','line_number':81,'multiline':False]['text':' - AUX','line_number':82,'multiline':False]['text':' - NUL','line_number':83,'multiline':False]['text':' - CON','line_number':84,'multiline':False]['text':' - LPT[1-9]','line_number':85,'multiline':False]['text':' - COM[1-9]','line_number':86,'multiline':False]['text':' - CONIN$','line_number':87,'multiline':False]['text':' - CONOUT$','line_number':88,'multiline':False]['text':'! Returns position of the first directory separator in the \a size initial characters of \a p, or \a size if not found','line_number':92,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':105,'multiline':False]['text':'! Returns position of the first directory separator in the \a size initial characters of \a p, or \a size if not found','line_number':111,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':121,'multiline':False]['text':' pos is position of the separator','line_number':123,'multiline':False]['text':' Returns: Size of the filename element that ends at end_pos (which is past-the-end position). 0 if no filename found.','line_number':126,'multiline':False]['text':' Returns: starting position of root directory or size if not found. Sets root_name_size to length','line_number':129,'multiline':False]['text':' of the root name if the characters before the returned position (if any) are considered a root name.','line_number':130,'multiline':False]['text':' Finds position and size of the first element of the path','line_number':133,'multiline':False]['text':' Finds position and size of the first element of the path','line_number':136,'multiline':False]['text':' unnamed namespace','line_number':142,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':144,'multiline':False]['text':'                                                                                      //','line_number':145,'multiline':False]['text':'                            class path implementation                                 //','line_number':146,'multiline':False]['text':'                                                                                      //','line_number':147,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':148,'multiline':False]['text':' self-append','line_number':165,'multiline':False]['text':' overlapping source','line_number':184,'multiline':False]['text':' if (p.is_absolute())','line_number':201,'multiline':False]['text':' Remove root directory (if any) and relative path to replace with those from p','line_number':229,'multiline':False]['text':' self-append','line_number':240,'multiline':False]['text':' if (p.is_absolute())','line_number':261,'multiline':False]['text':' Remove root directory (if any) and relative path to replace with those from p','line_number':289,'multiline':False]['text':' overlapping source','line_number':300,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':320,'multiline':False]['text':'  append_separator_if_needed  ----------------------------------------------------//','line_number':332,'multiline':False]['text':'  erase_redundant_separator  -----------------------------------------------------//','line_number':349,'multiline':False]['text':' a separator was added','line_number':353,'multiline':False]['text':' and something was appended','line_number':354,'multiline':False]['text':' and it was also separator','line_number':355,'multiline':False]['text':' or preferred_separator','line_number':357,'multiline':False]['text':' erase the added separator','line_number':361,'multiline':False]['text':'  modifiers  -----------------------------------------------------------------------//','line_number':365,'multiline':False]['text':' erase existing extension, including the dot, if any','line_number':391,'multiline':False]['text':' append new_extension, adding the dot if necessary','line_number':397,'multiline':False]['text':' erase existing extension, including the dot, if any','line_number':406,'multiline':False]['text':' append new_extension, adding the dot if necessary','line_number':412,'multiline':False]['text':'  decomposition  -------------------------------------------------------------------//','line_number':419,'multiline':False]['text':' Skip root name, root directory and any duplicate separators','line_number':454,'multiline':False]['text':' Keep the root name as the parent path if there was a filename','line_number':486,'multiline':False]['text':' Keep the trailing root directory if there was a filename','line_number':502,'multiline':False]['text':' Return root directory','line_number':519,'multiline':False]['text':' Return root name','line_number':525,'multiline':False]['text':' Check for "." and ".." filenames','line_number':592,'multiline':False]['text':'  lexical operations  --------------------------------------------------------------//','line_number':612,'multiline':False]['text':' C++14 provides a mismatch algorithm with four iterator arguments(), but earlier','line_number':615,'multiline':False]['text':' standard libraries didn't, so provide this needed functionality.','line_number':616,'multiline':False]['text':' namespace detail','line_number':626,'multiline':False]['text':'  normal  --------------------------------------------------------------------------//','line_number':659,'multiline':False]['text':' Skip redundant directory separators after the root directory','line_number':686,'multiline':False]['text':' Find next separator','line_number':698,'multiline':False]['text':' Skip dot elements','line_number':703,'multiline':False]['text':' Process dot dot elements','line_number':712,'multiline':False]['text':' Don't remove previous dot dot elements','line_number':715,'multiline':False]['text':' Append the element','line_number':728,'multiline':False]['text':' Skip directory separators, including duplicates','line_number':737,'multiline':False]['text':' If a path ends with a separator, add a trailing dot element','line_number':743,'multiline':False]['text':' Skip redundant directory separators after the root directory','line_number':784,'multiline':False]['text':' Find next separator','line_number':796,'multiline':False]['text':' Skip dot elements','line_number':801,'multiline':False]['text':' Process dot dot elements','line_number':808,'multiline':False]['text':' Don't remove previous dot dot elements','line_number':811,'multiline':False]['text':' Append the element','line_number':824,'multiline':False]['text':' If a path ends with a trailing dot after a directory element, add a trailing separator','line_number':832,'multiline':False]['text':' Skip directory separators, including duplicates','line_number':839,'multiline':False]['text':' If a path ends with a separator, add a trailing separator','line_number':845,'multiline':False]['text':' If the original path was not empty and normalized ended up being empty, make it a dot','line_number':852,'multiline':False]['text':' namespace filesystem','line_number':860,'multiline':False]['text':' namespace boost','line_number':861,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':863,'multiline':False]['text':'                                                                                      //','line_number':864,'multiline':False]['text':'                         class path helpers implementation                            //','line_number':865,'multiline':False]['text':'                                                                                      //','line_number':866,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':867,'multiline':False]['text':'  is_root_separator  ---------------------------------------------------------------//','line_number':871,'multiline':False]['text':' pos is position of the separator','line_number':873,'multiline':False]['text':' root_dir_pos points at the leftmost separator, we need to skip any duplicate separators right of root dir','line_number':878,'multiline':False]['text':'  find_filename_size  --------------------------------------------------------------//','line_number':885,'multiline':False]['text':' Returns: Size of the filename element that ends at end_pos (which is past-the-end position). 0 if no filename found.','line_number':887,'multiline':False]['text':' filename starts past the separator','line_number':897,'multiline':False]['text':'  find_root_directory_start  -------------------------------------------------------//','line_number':905,'multiline':False]['text':' Returns: starting position of root directory or size if not found','line_number':907,'multiline':False]['text':' case "//", possibly followed by more characters','line_number':917,'multiline':False]['text':' The whole path is just a pair of separators','line_number':924,'multiline':False]['text':' https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file','line_number':929,'multiline':False]['text':' cases "\\?\" and "\\.\"','line_number':930,'multiline':False]['text':' The path starts with three directory separators, which is interpreted as a root directory followed by redundant separators','line_number':939,'multiline':False]['text':' case "//net {/}"','line_number':944,'multiline':False]['text':' https://stackoverflow.com/questions/23041983/path-prefixes-and','line_number':951,'multiline':False]['text':' case "\??\" (NT path prefix)','line_number':952,'multiline':False]['text':' The path starts with a separator, possibly followed by a non-separator character','line_number':961,'multiline':False]['text':' case "c:" or "prn:"','line_number':967,'multiline':False]['text':' Note: There is ambiguity in a "c:x" path interpretation. It could either mean a file "x" located at the current directory for drive C:,','line_number':968,'multiline':False]['text':'       or an alternative stream "x" of a file "c". Windows API resolve this as the former, and so do we.','line_number':969,'multiline':False]['text':'  first_element --------------------------------------------------------------------//','line_number':1002,'multiline':False]['text':'   sets pos and len of first element, excluding extra separators','line_number':1004,'multiline':False]['text':'   if src.empty(), sets pos,len, to 0,0.','line_number':1005,'multiline':False]['text':' First element is the root name, if there is one','line_number':1016,'multiline':False]['text':' Otherwise, the root directory','line_number':1023,'multiline':False]['text':' Otherwise, the first filename or directory name in a relative path','line_number':1031,'multiline':False]['text':' unnamed namespace','line_number':1038,'multiline':False]['text':' namespace detail','line_number':1080,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1082,'multiline':False]['text':'                                                                                      //','line_number':1083,'multiline':False]['text':'                        class path::iterator implementation                           //','line_number':1084,'multiline':False]['text':'                                                                                      //','line_number':1085,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1086,'multiline':False]['text':' increment to position past current element; if current element is implicit dot,','line_number':1121,'multiline':False]['text':' this will cause m_pos to represent the end iterator','line_number':1122,'multiline':False]['text':' if the end is reached, we are done','line_number':1125,'multiline':False]['text':' aids debugging','line_number':1129,'multiline':False]['text':' process separator (Windows drive spec is only case not a separator)','line_number':1133,'multiline':False]['text':' detect root directory and set iterator value to the separator if it is','line_number':1139,'multiline':False]['text':' generic format; see docs','line_number':1142,'multiline':False]['text':' skip separators until m_pos points to the start of the next element','line_number':1146,'multiline':False]['text':' detect trailing separator, and treat it as ".", per POSIX spec','line_number':1152,'multiline':False]['text':' get m_element','line_number':1162,'multiline':False]['text':' The iterator was pointing to the last empty element of the path; set to end.','line_number':1177,'multiline':False]['text':' increment to position past current element; if current element is implicit dot,','line_number':1182,'multiline':False]['text':' this will cause m_pos to represent the end iterator','line_number':1183,'multiline':False]['text':' if the end is reached, we are done','line_number':1186,'multiline':False]['text':' aids debugging','line_number':1190,'multiline':False]['text':' process separator (Windows drive spec is only case not a separator)','line_number':1194,'multiline':False]['text':' detect root directory and set iterator value to the separator if it is','line_number':1200,'multiline':False]['text':' generic format; see docs','line_number':1203,'multiline':False]['text':' skip separators until m_pos points to the start of the next element','line_number':1207,'multiline':False]['text':' detect trailing separator','line_number':1213,'multiline':False]['text':' get m_element','line_number':1223,'multiline':False]['text':' Was pointing at root directory, decrement to root name','line_number':1242,'multiline':False]['text':' if at end and there was a trailing non-root '/', return "."','line_number':1250,'multiline':False]['text':' skip separators unless root directory','line_number':1261,'multiline':False]['text':' Decremented to the root directory','line_number':1269,'multiline':False]['text':' generic format; see docs','line_number':1271,'multiline':False]['text':' Was pointing at root directory, decrement to root name','line_number':1302,'multiline':False]['text':' if at end and there was a trailing '/', return ""','line_number':1310,'multiline':False]['text':' skip separators unless root directory','line_number':1321,'multiline':False]['text':' Decremented to the root directory','line_number':1329,'multiline':False]['text':' generic format; see docs','line_number':1331,'multiline':False]['text':' namespace filesystem','line_number':1351,'multiline':False]['text':' namespace boost','line_number':1352,'multiline':False]['text':'------------------------------------------------------------------------------------//','line_number':1356,'multiline':False]['text':'                                locale helpers                                      //','line_number':1357,'multiline':False]['text':'------------------------------------------------------------------------------------//','line_number':1358,'multiline':False]['text':'  Prior versions of these locale and codecvt implementations tried to take advantage','line_number':1360,'multiline':False]['text':'  of static initialization where possible, kept a local copy of the current codecvt','line_number':1361,'multiline':False]['text':'  facet (to avoid codecvt() having to call use_facet()), and was not multi-threading','line_number':1362,'multiline':False]['text':'  safe (again for efficiency).','line_number':1363,'multiline':False]['text':'','line_number':1364,'multiline':False]['text':'  This was error prone, and required different implementation techniques depending','line_number':1365,'multiline':False]['text':'  on the compiler and also whether static or dynamic linking was used. Furthermore,','line_number':1366,'multiline':False]['text':'  users could not easily provide their multi-threading safe wrappers because the','line_number':1367,'multiline':False]['text':'  path interface requires the implementation itself to call codecvt() to obtain the','line_number':1368,'multiline':False]['text':'  default facet, and the initialization of the static within path_locale() could race.','line_number':1369,'multiline':False]['text':'','line_number':1370,'multiline':False]['text':'  The code below is portable to all platforms, is much simpler, and hopefully will be','line_number':1371,'multiline':False]['text':'  much more robust. Timing tests (on Windows, using a Visual C++ release build)','line_number':1372,'multiline':False]['text':'  indicated the current code is roughly 9% slower than the previous code, and that','line_number':1373,'multiline':False]['text':'  seems a small price to pay for better code that is easier to use.','line_number':1374,'multiline':False]['text':' "All BSD system functions expect their string parameters to be in UTF-8 encoding','line_number':1382,'multiline':False]['text':' and nothing else." See','line_number':1383,'multiline':False]['text':' http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPInternational/Articles/FileEncodings.html','line_number':1384,'multiline':False]['text':'','line_number':1385,'multiline':False]['text':' "The kernel will reject any filename that is not a valid UTF-8 string, and it will','line_number':1386,'multiline':False]['text':' even be normalized (to Unicode NFD) before stored on disk, at least when using HFS.','line_number':1387,'multiline':False]['text':' The right way to deal with it would be to always convert the filename to UTF-8','line_number':1388,'multiline':False]['text':' before trying to open/create a file." See','line_number':1389,'multiline':False]['text':' http://lists.apple.com/archives/unix-porting/2007/Sep/msg00023.html','line_number':1390,'multiline':False]['text':'','line_number':1391,'multiline':False]['text':' "How a file name looks at the API level depends on the API. Current Carbon APIs','line_number':1392,'multiline':False]['text':' handle file names as an array of UTF-16 characters; POSIX ones handle them as an','line_number':1393,'multiline':False]['text':' array of UTF-8, which is why UTF-8 works well in Terminal. How it's stored on disk','line_number':1394,'multiline':False]['text':' depends on the disk format; HFS+ uses UTF-16, but that's not important in most','line_number':1395,'multiline':False]['text':' cases." See','line_number':1396,'multiline':False]['text':' http://lists.apple.com/archives/applescript-users/2002/Sep/msg00319.html','line_number':1397,'multiline':False]['text':'','line_number':1398,'multiline':False]['text':' Many thanks to Peter Dimov for digging out the above references!','line_number':1399,'multiline':False]['text':' Other POSIX','line_number':1403,'multiline':False]['text':' ISO C calls std::locale("") "the locale-specific native environment", and this','line_number':1404,'multiline':False]['text':' locale is the default for many POSIX-based operating systems such as Linux.','line_number':1405,'multiline':False]['text':' std::locale("") construction, needed on non-Apple POSIX systems, can throw','line_number':1414,'multiline':False]['text':' (if environmental variables LC_MESSAGES or LANG are wrong, for example), so','line_number':1415,'multiline':False]['text':' get_path_locale() provides lazy initialization to ensure that any','line_number':1416,'multiline':False]['text':' exceptions occur after main() starts and so can be caught. Furthermore,','line_number':1417,'multiline':False]['text':' g_path_locale is only initialized if path::codecvt() or path::imbue() are themselves','line_number':1418,'multiline':False]['text':' actually called, ensuring that an exception will only be thrown if std::locale("")','line_number':1419,'multiline':False]['text':' is really needed.','line_number':1420,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1440,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1448,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1488,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1493,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1510,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_SINGLE_THREADED)','line_number':1515,'multiline':False]['text':' codecvt_error_category needs to be called early to dynamic-initialize the error category instance','line_number':1531,'multiline':False]['text':' _MSC_VER >= 1400','line_number':1544,'multiline':False]['text':' 1300 == VC++ 7.0','line_number':1546,'multiline':False]['text':' 1300 == VC++ 7.0','line_number':1553,'multiline':False]['text':' _MSC_VER >= 1400','line_number':1557,'multiline':False]['text':'! Makes sure the global initializer pointers are referenced and not removed by linker','line_number':1560,'multiline':False]['text':' defined(BOOST_FILESYSTEM_NO_ATTRIBUTE_RETAIN)','line_number':1569,'multiline':False]['text':' defined(_MSC_VER)','line_number':1571,'multiline':False]['text':' defined(BOOST_FILESYSTEM_HAS_INIT_PRIORITY)','line_number':1605,'multiline':False]['text':' defined(BOOST_FILESYSTEM_HAS_INIT_PRIORITY)','line_number':1624,'multiline':False]['text':' defined(_MSC_VER)','line_number':1626,'multiline':False]['text':' unnamed namespace','line_number':1628,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1630,'multiline':False]['text':'              path::codecvt() and path::imbue() implementation                        //','line_number':1631,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1632,'multiline':False]['text':' Note: copying/moving std::locale does not throw','line_number':1653,'multiline':False]['text':' namespace detail','line_number':1678,'multiline':False]['text':' namespace filesystem','line_number':1679,'multiline':False]['text':' namespace boost','line_number':1680,'multiline':False]