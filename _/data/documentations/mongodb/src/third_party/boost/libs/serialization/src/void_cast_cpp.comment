['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':1,'multiline':False]['text':' void_cast.cpp: implementation of run-time casting of void pointers','line_number':2,'multiline':False]['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com . ','line_number':4,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':5,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':' <gennadiy.rozental@tfn.com>','line_number':8,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':10,'multiline':False]['text':' too long name, harmless warning','line_number':13,'multiline':False]['text':' STL','line_number':16,'multiline':False]['text':' NULL','line_number':20,'multiline':False]['text':' BOOST','line_number':25,'multiline':False]['text':' it marks our code with proper attributes as being exported when','line_number':31,'multiline':False]['text':' we're compiling it while marking it import when just the headers','line_number':32,'multiline':False]['text':' is being included.','line_number':33,'multiline':False]['text':' note that void_casters are keyed on value of','line_number':42,'multiline':False]['text':' member extended type info records - NOT their','line_number':43,'multiline':False]['text':' addresses.  This is necessary in order for the','line_number':44,'multiline':False]['text':' void cast operations to work across dll and exe','line_number':45,'multiline':False]['text':' module boundaries.','line_number':46,'multiline':False]['text':' include short cut to save time and eliminate','line_number':48,'multiline':False]['text':' problems when when base class aren't virtual','line_number':49,'multiline':False]['text':' m_derived == rhs.m_derived','line_number':56,'multiline':False]['text':' implementation of shortcut void caster','line_number':77,'multiline':False]['text':' try to find a chain that gives us what we want','line_number':134,'multiline':False]['text':' if the current candidate casts to the desired target type','line_number':139,'multiline':False]['text':' and if it's not us','line_number':141,'multiline':False]['text':' try to cast from the candidate base to our base','line_number':143,'multiline':False]['text':' if we were successful','line_number':146,'multiline':False]['text':' recast to our derived','line_number':148,'multiline':False]['text':' try to find a chain that gives us what we want','line_number':162,'multiline':False]['text':' if the current candidate casts from the desired base type','line_number':167,'multiline':False]['text':' and if it's not us','line_number':169,'multiline':False]['text':' try to cast from the candidate derived to our our derived','line_number':171,'multiline':False]['text':' just used as a search key','line_number':187,'multiline':False]['text':'t','line_number':191,'multiline':True]['text':'t','line_number':196,'multiline':True]['text':' implementation of void caster base class','line_number':218,'multiline':False]['text':' comment this out for now.  ','line_number':233,'multiline':False]['text':'assert(result.second);','line_number':235,'multiline':False]['text':' generate all implied void_casts.','line_number':237,'multiline':False]['text':' note: it's been discovered that at least one platform is not guaranteed','line_number':279,'multiline':False]['text':' to destroy singletons reverse order of construction.  So we can't','line_number':280,'multiline':False]['text':' use a runtime assert here.  Leave this in a reminder not to do this!','line_number':281,'multiline':False]['text':' BOOST_ASSERT(! void_caster_registry::is_destroyed());','line_number':282,'multiline':False]['text':' delete all shortcuts which use this primitive','line_number':297,'multiline':False]['text':' namespace void_cast_detail','line_number':315,'multiline':False]['text':' Given a void *, assume that it really points to an instance of one type','line_number':324,'multiline':False]['text':' and alter it so that it would point to an instance of a related type.','line_number':325,'multiline':False]['text':' Return the altered pointer. If there exists no sequence of casts that','line_number':326,'multiline':False]['text':' can transform from_type to to_type, return a NULL.  ','line_number':327,'multiline':False]['text':' same types - trivial case','line_number':334,'multiline':False]['text':' check to see if base/derived pair is found in the registry','line_number':338,'multiline':False]['text':' same types - trivial case','line_number':364,'multiline':False]['text':' check to see if base/derived pair is found in the registry','line_number':368,'multiline':False]['text':' namespace serialization','line_number':381,'multiline':False]['text':' namespace boost','line_number':382,'multiline':False]