['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   find_address_sse2.cpp
 *
 * This file contains SSE2 implementation of the \c find_address algorithm
 ','line_number':8,'multiline':True]['text':' As of 2020, gcc, clang and icc prefer to generate andps instead of pand if the surrounding','line_number':40,'multiline':False]['text':' instructions pertain to FP domain, even if we use the _mm_and_si128 intrinsic. In our','line_number':41,'multiline':False]['text':' algorithm implementation, the FP instruction happen to be shufps, which is not actually','line_number':42,'multiline':False]['text':' restricted to FP domain (it is actually implemented in a separate MMX EU in Pentium 4 or','line_number':43,'multiline':False]['text':' a shuffle EU in INT domain in Core 2; on AMD K8/K10 all SSE instructions are implemented in','line_number':44,'multiline':False]['text':' FADD, FMUL and FMISC EUs regardless of INT/FP data types, and shufps is implemented in FADD/FMUL).','line_number':45,'multiline':False]['text':' In other words, there should be no domain bypass penalty between shufps and pand.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' This would usually not pose a problem since andps and pand have the same latency and throughput','line_number':48,'multiline':False]['text':' on most architectures of that age (before SSE4.1). However, it is possible that a newer architecture','line_number':49,'multiline':False]['text':' runs the SSE2 code path (e.g. because some weird compiler doesn't support SSE4.1 or because','line_number':50,'multiline':False]['text':' a hypervisor blocks SSE4.1 detection), and there pand may have a better throughput. For example,','line_number':51,'multiline':False]['text':' Sandy Bridge can execute 3 pand instructions per cycle, but only one andps. For this reason','line_number':52,'multiline':False]['text':' we prefer to generate pand and not andps.','line_number':53,'multiline':False]['text':' namespace','line_number':62,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_SIZEOF_POINTER == 8','line_number':63,'multiline':False]['text':'! SSE2 implementation of the \c find_address algorithm','line_number':65,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_SIZEOF_POINTER == 8','line_number':203,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_SIZEOF_POINTER == 8','line_number':275,'multiline':False]['text':' namespace detail','line_number':278,'multiline':False]['text':' namespace atomics','line_number':279,'multiline':False]['text':' namespace boost','line_number':280,'multiline':False]['text':' BOOST_ARCH_X86 && defined(BOOST_ATOMIC_DETAIL_SIZEOF_POINTER) && (BOOST_ATOMIC_DETAIL_SIZEOF_POINTER == 8 || BOOST_ATOMIC_DETAIL_SIZEOF_POINTER == 4)','line_number':284,'multiline':False]