['text':'  operations.cpp  --------------------------------------------------------------------//','line_number':1,'multiline':False]['text':'  Copyright 2002-2009, 2014 Beman Dawes','line_number':3,'multiline':False]['text':'  Copyright 2001 Dietmar Kuehl','line_number':4,'multiline':False]['text':'  Copyright 2018-2022 Andrey Semashev','line_number':5,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':7,'multiline':False]['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':8,'multiline':False]['text':'  See library home page at http://www.boost.org/libs/filesystem','line_number':10,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':12,'multiline':False]['text':' std::bad_alloc, std::nothrow','line_number':29,'multiline':False]['text':' for malloc, free','line_number':33,'multiline':False]['text':' for remove, rename','line_number':35,'multiline':False]['text':' see ticket #5355','line_number':36,'multiline':False]['text':' WASI does not have statfs or statvfs.','line_number':47,'multiline':False]['text':' BOOST_STATVFS definition','line_number':66,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_DISABLE_SENDFILE)','line_number':84,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_DISABLE_COPY_FILE_RANGE) && defined(__NR_copy_file_range)','line_number':87,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_DISABLE_STATX) && (defined(BOOST_FILESYSTEM_HAS_STATX) || defined(BOOST_FILESYSTEM_HAS_STATX_SYSCALL))','line_number':93,'multiline':False]['text':' This header was introduced in Linux kernel 2.6.19','line_number':97,'multiline':False]['text':' Some filesystem type magic constants are not defined in older kernel headers','line_number':102,'multiline':False]['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':116,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':143,'multiline':False]['text':' get_proc_address, GetModuleHandleW','line_number':145,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':161,'multiline':False]['text':' At least Mac OS X 10.6 and older doesn't support O_CLOEXEC','line_number':176,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':185,'multiline':False]['text':' Fallback for MinGW/Cygwin','line_number':199,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':208,'multiline':False]['text':'  POSIX/Windows macros  ----------------------------------------------------//','line_number':210,'multiline':False]['text':'  Portions of the POSIX and Windows API's are very similar, except for name,','line_number':212,'multiline':False]['text':'  order of arguments, and meaning of zero/non-zero returns. The macros below','line_number':213,'multiline':False]['text':'  abstract away those differences. They follow Windows naming and order of','line_number':214,'multiline':False]['text':'  arguments, and return true to indicate no error occurred. [POSIX naming,','line_number':215,'multiline':False]['text':'  order of arguments, and meaning of return were followed initially, but','line_number':216,'multiline':False]['text':'  found to be less clear and cause more coding errors.]','line_number':217,'multiline':False]['text':' BOOST_WINDOWS_API','line_number':225,'multiline':False]['text':'! Initializes fill_random implementation pointer. Implemented in unique_path.cpp.','line_number':238,'multiline':False]['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':240,'multiline':False]['text':'! Initializes directory iterator implementation. Implemented in directory.cpp.','line_number':243,'multiline':False]['text':' defined(BOOST_WINDOWS_API) && !defined(UNDER_CE)','line_number':245,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':247,'multiline':False]['text':'                                                                                      //','line_number':248,'multiline':False]['text':'                        helpers (all operating systems)                               //','line_number':249,'multiline':False]['text':'                                                                                      //','line_number':250,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':251,'multiline':False]['text':' The number of retries remove_all should make if it detects that the directory it is about to enter has been replaced with a symlink or a regular file','line_number':255,'multiline':False]['text':' Size of a small buffer for a path that can be placed on stack, in character code units','line_number':260,'multiline':False]['text':' Absolute maximum path length, in character code units, that we're willing to accept from various system calls.','line_number':263,'multiline':False]['text':' This value is arbitrary, it is supposed to be a hard limit to avoid memory exhaustion','line_number':264,'multiline':False]['text':' in some of the algorithms below in case of some corrupted or maliciously broken filesystem.','line_number':265,'multiline':False]['text':' A few examples of path size limits:','line_number':266,'multiline':False]['text':' - Windows: 32767 UTF-16 code units or 260 bytes for legacy multibyte APIs.','line_number':267,'multiline':False]['text':' - Linux: 4096 bytes','line_number':268,'multiline':False]['text':' - IRIX, HP-UX, Mac OS, QNX, FreeBSD, OpenBSD: 1024 bytes','line_number':269,'multiline':False]['text':' - GNU/Hurd: no hard limit','line_number':270,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':273,'multiline':False]['text':' Maximum number of resolved symlinks before we register a loop','line_number':275,'multiline':False]['text':'  general helpers  -----------------------------------------------------------------//','line_number':284,'multiline':False]['text':' forward declaration','line_number':293,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':297,'multiline':False]['text':'                                                                                      //','line_number':298,'multiline':False]['text':'                            POSIX-specific helpers                                    //','line_number':299,'multiline':False]['text':'                                                                                      //','line_number':300,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':301,'multiline':False]['text':'! A wrapper for statx libc function. Disable MSAN since at least on clang 10 it doesn't','line_number':325,'multiline':False]['text':'! know which fields of struct statx are initialized by the syscall and misdetects errors.','line_number':326,'multiline':False]['text':'! statx emulation through fstatat','line_number':335,'multiline':False]['text':'! Pointer to the actual implementation of the statx implementation','line_number':370,'multiline':False]['text':'! A wrapper for the statx syscall. Disable MSAN since at least on clang 10 it doesn't','line_number':378,'multiline':False]['text':'! know which fields of struct statx are initialized by the syscall and misdetects errors.','line_number':379,'multiline':False]['text':' defined(BOOST_FILESYSTEM_HAS_STATX)','line_number':397,'multiline':False]['text':'! Initializes statx implementation pointer','line_number':401,'multiline':False]['text':' !defined(BOOST_FILESYSTEM_HAS_STATX) && defined(BOOST_FILESYSTEM_HAS_STATX_SYSCALL)','line_number':410,'multiline':False]['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':413,'multiline':False]['text':'! Returns \c true if the two \c statx structures refer to the same file','line_number':417,'multiline':False]['text':'! Returns file type/access mode from \c statx structure','line_number':423,'multiline':False]['text':'! Returns file size from \c statx structure','line_number':429,'multiline':False]['text':'! Returns optimal block size from \c statx structure','line_number':435,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_STATX)','line_number':441,'multiline':False]['text':'! Returns \c true if the two \c stat structures refer to the same file','line_number':443,'multiline':False]['text':' According to the POSIX stat specs, "The st_ino and st_dev fields','line_number':446,'multiline':False]['text':' taken together uniquely identify the file within the system."','line_number':447,'multiline':False]['text':'! Returns file type/access mode from \c stat structure','line_number':451,'multiline':False]['text':'! Returns file size from \c stat structure','line_number':457,'multiline':False]['text':'! Returns optimal block size from \c stat structure','line_number':463,'multiline':False]['text':' a suitable default used on most modern SSDs/HDDs','line_number':469,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_STATX)','line_number':473,'multiline':False]['text':'! Flushes buffered data and attributes written to the file to permanent storage','line_number':475,'multiline':False]['text':' Mac OS does not flush data to physical storage with fsync()','line_number':481,'multiline':False]['text':' POSIX says fsync can return EINTR (https://pubs.opengroup.org/onlinepubs/9699919799/functions/fsync.html).','line_number':489,'multiline':False]['text':' fcntl(F_FULLFSYNC) isn't documented to return EINTR, but it doesn't hurt to check.','line_number':490,'multiline':False]['text':'! Flushes buffered data written to the file to permanent storage','line_number':503,'multiline':False]['text':' POSIX says fsync can return EINTR (https://pubs.opengroup.org/onlinepubs/9699919799/functions/fsync.html).','line_number':513,'multiline':False]['text':' It doesn't say so for fdatasync, but it is reasonable to expect it as well.','line_number':514,'multiline':False]['text':' Min and max buffer sizes are selected to minimize the overhead from system calls.','line_number':530,'multiline':False]['text':' The values are picked based on coreutils cp(1) benchmarking data described here:','line_number':531,'multiline':False]['text':' https://github.com/coreutils/coreutils/blob/d1b0257077c0b0f0ee25087efd46270345d1dd1f/src/ioblksize.h#L23-L72','line_number':532,'multiline':False]['text':'! copy_file read/write loop implementation','line_number':536,'multiline':False]['text':' Don't use file size to limit the amount of data to copy since some filesystems, like procfs or sysfs,','line_number':543,'multiline':False]['text':' provide files with generated content and indicate that their size is zero or 4096. Just copy as much data','line_number':544,'multiline':False]['text':' as we can read from the input file.','line_number':545,'multiline':False]['text':' Allow for partial writes - see Advanced Unix Programming (2nd Ed.),','line_number':559,'multiline':False]['text':' Marc Rochkind, Addison-Wesley, 2004, page 94','line_number':560,'multiline':False]['text':'! copy_file implementation that uses read/write loop (fallback using a stack buffer)','line_number':579,'multiline':False]['text':'! copy_file implementation that uses read/write loop','line_number':586,'multiline':False]['text':' Prefer the buffer to be larger than the file size so that we don't have','line_number':591,'multiline':False]['text':' to perform an extra read if the file fits in the buffer exactly.','line_number':592,'multiline':False]['text':'! Pointer to the actual implementation of the copy_file_data implementation','line_number':611,'multiline':False]['text':'! copy_file implementation that uses sendfile loop. Requires sendfile to support file descriptors.','line_number':616,'multiline':False]['text':' sendfile will not send more than this amount of data in one call','line_number':619,'multiline':False]['text':' sendfile may fail with EINVAL if the underlying filesystem does not support it','line_number':637,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_SENDFILE)','line_number':660,'multiline':False]['text':'! copy_file implementation that uses copy_file_range loop. Requires copy_file_range to support cross-filesystem copying.','line_number':664,'multiline':False]['text':' Although copy_file_range does not document any particular upper limit of one transfer, still use some upper bound to guarantee','line_number':667,'multiline':False]['text':' that size_t is not overflown in case if off_t is larger and the file size does not fit in size_t.','line_number':668,'multiline':False]['text':' Note: Use syscall directly to avoid depending on libc version. copy_file_range is added in glibc 2.27.','line_number':677,'multiline':False]['text':' uClibc-ng does not have copy_file_range as of the time of this writing (the latest uClibc-ng release is 1.0.33).','line_number':678,'multiline':False]['text':' copy_file_range may fail with EINVAL if the underlying filesystem does not support it.','line_number':688,'multiline':False]['text':' In some RHEL/CentOS 7.7-7.8 kernel versions, copy_file_range on NFSv4 is also known to return EOPNOTSUPP','line_number':689,'multiline':False]['text':' if the remote server does not support COPY, despite that it is not a documented error code.','line_number':690,'multiline':False]['text':' See https://patchwork.kernel.org/project/linux-nfs/patch/20190411183418.4510-1-olga.kornievskaia@gmail.com/','line_number':691,'multiline':False]['text':' and https://bugzilla.redhat.com/show_bug.cgi?id=1783554.','line_number':692,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_COPY_FILE_RANGE)','line_number':732,'multiline':False]['text':'! copy_file_data wrapper that tests if a read/write loop must be used for a given filesystem','line_number':736,'multiline':False]['text':' Some filesystems have regular files with generated content. Such files have arbitrary size, including zero,','line_number':741,'multiline':False]['text':' but have actual content. Linux system calls sendfile or copy_file_range will not copy contents of such files,','line_number':742,'multiline':False]['text':' so we must use a read/write loop to handle them.','line_number':743,'multiline':False]['text':' https://lore.kernel.org/linux-fsdevel/20210212044405.4120619-1-drinkcat@chromium.org/T/','line_number':744,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_SENDFILE) || defined(BOOST_FILESYSTEM_USE_COPY_FILE_RANGE)','line_number':774,'multiline':False]['text':'! Initializes copy_file_data implementation pointer','line_number':778,'multiline':False]['text':' sendfile started accepting file descriptors as the target in Linux 2.6.33','line_number':785,'multiline':False]['text':' Although copy_file_range appeared in Linux 4.5, it did not support cross-filesystem copying until 5.3.','line_number':791,'multiline':False]['text':' copy_file_data_copy_file_range will fallback to copy_file_data_sendfile if copy_file_range returns EXDEV.','line_number':792,'multiline':False]['text':' defined(BOOST_FILESYSTEM_USE_SENDFILE) || defined(BOOST_FILESYSTEM_USE_COPY_FILE_RANGE)','line_number':798,'multiline':False]['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':801,'multiline':False]['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':827,'multiline':False]['text':'! remove() implementation','line_number':829,'multiline':False]['text':'! remove() implementation','line_number':853,'multiline':False]['text':' Since POSIX remove() is specified to work with either files or directories, in a','line_number':856,'multiline':False]['text':' perfect world it could just be called. But some important real-world operating','line_number':857,'multiline':False]['text':' systems (Windows, Mac OS, for example) don't implement the POSIX spec. So','line_number':858,'multiline':False]['text':' we have to distinguish between files and directories and call corresponding APIs','line_number':859,'multiline':False]['text':' to remove them.','line_number':860,'multiline':False]['text':'! remove_all() implementation','line_number':876,'multiline':False]['text':' but not a directory symlink','line_number':901,'multiline':False]['text':' If open(2) with O_NOFOLLOW fails with ELOOP, this means that either the path contains a loop','line_number':911,'multiline':False]['text':' of symbolic links, or the last element of the path is a symbolic link. Given that lstat(2) above','line_number':912,'multiline':False]['text':' did not fail, most likely it is the latter case. I.e. between the lstat above and this open call','line_number':913,'multiline':False]['text':' the filesystem was modified so that the path no longer refers to a directory file (as opposed to a symlink).','line_number':914,'multiline':False]['text':' defined(BOOST_FILESYSTEM_HAS_FDOPENDIR_NOFOLLOW)','line_number':917,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':953,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':955,'multiline':False]['text':'                                                                                      //','line_number':956,'multiline':False]['text':'                            Windows-specific helpers                                  //','line_number':957,'multiline':False]['text':'                                                                                      //','line_number':958,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':959,'multiline':False]['text':'! FILE_BASIC_INFO definition from Windows SDK','line_number':961,'multiline':False]['text':'! FILE_DISPOSITION_INFO definition from Windows SDK','line_number':971,'multiline':False]['text':'! FILE_DISPOSITION_INFO_EX definition from Windows SDK','line_number':977,'multiline':False]['text':' Available since Windows 10 1709','line_number':986,'multiline':False]['text':' Available since Windows 10 1809','line_number':990,'multiline':False]['text':'  REPARSE_DATA_BUFFER related definitions are found in ntifs.h, which is part of the','line_number':995,'multiline':False]['text':'  Windows Device Driver Kit. Since that's inconvenient, the definitions are provided','line_number':996,'multiline':False]['text':'  here. See http://msdn.microsoft.com/en-us/library/ms791514.aspx','line_number':997,'multiline':False]['text':'
         * In SymbolicLink and MountPoint reparse points, there are two names.
         * SubstituteName is the effective replacement path for the reparse point.
         * This is what should be used for path traversal.
         * PrintName is intended for presentation to the user and may omit some
         * elements of the path or be absent entirely.
         *
         * Examples of substitute and print names:
         * mklink /D ldrive c:\
         * SubstituteName: "\??\c:\"
         * PrintName: "c:\"
         *
         * mklink /J ldrive c:\
         * SubstituteName: "\??\C:\"
         * PrintName: "c:\"
         *
         * junction ldrive c:\
         * SubstituteName: "\??\C:\"
         * PrintName: ""
         *
         * box.com mounted cloud storage
         * SubstituteName: "\??\Volume{<UUID>}\"
         * PrintName: ""
         ','line_number':1005,'multiline':True]['text':' Our convenience type for allocating REPARSE_DATA_BUFFER along with sufficient space after it','line_number':1053,'multiline':False]['text':'  Windows kernel32.dll functions that may or may not be present','line_number':1060,'multiline':False]['text':'  must be accessed through pointers','line_number':1061,'multiline':False]['text':'__in','line_number':1064,'multiline':True]['text':'__in','line_number':1065,'multiline':True]['text':'__reserved','line_number':1066,'multiline':True]['text':'__in','line_number':1071,'multiline':True]['text':'__in','line_number':1072,'multiline':True]['text':'__in','line_number':1073,'multiline':True]['text':'! SetFileInformationByHandle signature. Available since Windows Vista.','line_number':1077,'multiline':False]['text':'_In_','line_number':1079,'multiline':True]['text':'_In_','line_number':1080,'multiline':True]['text':' the actual type is FILE_INFO_BY_HANDLE_CLASS enum','line_number':1080,'multiline':False]['text':'_In_reads_bytes_(dwBufferSize)','line_number':1081,'multiline':True]['text':'_In_','line_number':1082,'multiline':True]['text':' unnamed namespace','line_number':1086,'multiline':False]['text':' !defined(UNDER_CE)','line_number':1092,'multiline':False]['text':'! remove() implementation type','line_number':1096,'multiline':False]['text':'!< Use Windows XP API','line_number':1099,'multiline':False]['text':'!< Use FILE_DISPOSITION_INFO (Windows Vista and later)','line_number':1100,'multiline':False]['text':'!< Use FILE_DISPOSITION_INFO_EX with FILE_DISPOSITION_FLAG_POSIX_SEMANTICS','line_number':1101,'multiline':False]['text':'!< Use FILE_DISPOSITION_INFO_EX with FILE_DISPOSITION_FLAG_POSIX_SEMANTICS | FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE','line_number':1102,'multiline':False]['text':'! Initializes WinAPI function pointers','line_number':1107,'multiline':False]['text':' Enable the most advanced implementation based on GetFileInformationByHandleEx/SetFileInformationByHandle.','line_number':1122,'multiline':False]['text':' If certain flags are not supported by the OS, the remove() implementation will downgrade accordingly.','line_number':1123,'multiline':False]['text':' !defined(UNDER_CE)','line_number':1136,'multiline':False]['text':' _MSC_VER >= 1400','line_number':1149,'multiline':False]['text':' 1300 == VC++ 7.0','line_number':1151,'multiline':False]['text':' 1300 == VC++ 7.0','line_number':1158,'multiline':False]['text':' _MSC_VER >= 1400','line_number':1162,'multiline':False]['text':'! Makes sure the global initializer pointers are referenced and not removed by linker','line_number':1165,'multiline':False]['text':' defined(BOOST_FILESYSTEM_NO_ATTRIBUTE_RETAIN)','line_number':1174,'multiline':False]['text':' defined(_MSC_VER)','line_number':1176,'multiline':False]['text':'! Invokes WinAPI function pointers initialization','line_number':1178,'multiline':False]['text':' defined(_MSC_VER)','line_number':1187,'multiline':False]['text':' Windows CE has no environment variables','line_number':1190,'multiline':False]['text':' use a separate buffer since C++03 basic_string is not required to be contiguous','line_number':1194,'multiline':False]['text':' !defined(UNDER_CE)','line_number':1205,'multiline':False]['text':' "tools/jam/src/:sys:stat.h", "//foo"','line_number':1209,'multiline':False]['text':' USB card reader with no card inserted','line_number':1210,'multiline':False]['text':' CD/DVD drive with no disc inserted','line_number':1211,'multiline':False]['text':' ":sys:stat.h"','line_number':1212,'multiline':False]['text':' "//no-host" on Win64','line_number':1213,'multiline':False]['text':' "//no-host" on Win32','line_number':1214,'multiline':False]['text':' "//no-host/no-share" on Win10 x64','line_number':1215,'multiline':False]['text':' these constants come from inspecting some Microsoft sample code','line_number':1218,'multiline':False]['text':' unnamed namespace','line_number':1236,'multiline':False]['text':' Query the reparse data','line_number':1242,'multiline':False]['text':' always report errval, even though some','line_number':1284,'multiline':False]['text':' errval values are not status_errors','line_number':1285,'multiline':False]['text':'! remove() implementation for Windows XP and older','line_number':1302,'multiline':False]['text':' RemoveDirectoryW and DeleteFileW do not allow to remove a read-only file, so we have to drop the attribute','line_number':1309,'multiline':False]['text':' DeleteFileW works for file symlinks by removing the symlink, not the target.','line_number':1325,'multiline':False]['text':' RemoveDirectoryW works for symlinks and junctions by removing the symlink, not the target,','line_number':1330,'multiline':False]['text':' even if the target directory is not empty.','line_number':1331,'multiline':False]['text':' Note that unlike opening the directory with FILE_FLAG_DELETE_ON_CLOSE flag, RemoveDirectoryW','line_number':1332,'multiline':False]['text':' will fail if the directory is not empty.','line_number':1333,'multiline':False]['text':' Try to restore the read-only attribute','line_number':1344,'multiline':False]['text':'! remove() implementation for Windows Vista and newer','line_number':1357,'multiline':False]['text':' Downgrade to the older implementation','line_number':1389,'multiline':False]['text':' Check if the file is read-only and reset the attribute','line_number':1411,'multiline':False]['text':' return ERROR_ACCESS_DENIED','line_number':1415,'multiline':False]['text':' Try to set the flag again','line_number':1426,'multiline':False]['text':' Try to restore the read-only flag','line_number':1433,'multiline':False]['text':' Downgrade to the older implementation','line_number':1441,'multiline':False]['text':' Check if the file is read-only and reset the attribute','line_number':1463,'multiline':False]['text':' return ERROR_ACCESS_DENIED','line_number':1467,'multiline':False]['text':' Try to set the flag again','line_number':1478,'multiline':False]['text':' Try to restore the read-only flag','line_number':1485,'multiline':False]['text':'! remove() implementation','line_number':1497,'multiline':False]['text':'! remove_all() implementation','line_number':1521,'multiline':False]['text':' Recurse into directories, but not into junctions or directory symlinks','line_number':1539,'multiline':False]['text':'! Converts NT path to a Win32 path','line_number':1601,'multiline':False]['text':' https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html','line_number':1604,'multiline':False]['text':' https://stackoverflow.com/questions/23041983/path-prefixes-and','line_number':1605,'multiline':False]['text':'','line_number':1606,'multiline':False]['text':' NT paths can be used to identify practically any named objects, devices, files, local and remote shares, etc.','line_number':1607,'multiline':False]['text':' The path starts with a leading backslash and consists of one or more path elements separated with backslashes.','line_number':1608,'multiline':False]['text':' The set of characters allowed in NT path elements is significantly larger than that of Win32 paths - basically,','line_number':1609,'multiline':False]['text':' any character except the backslash is allowed. Path elements are case-insensitive.','line_number':1610,'multiline':False]['text':'','line_number':1611,'multiline':False]['text':' NT paths that start with the "\??\" prefix are used to indicate the current user's session namespace. The prefix','line_number':1612,'multiline':False]['text':' indicates to the NT object manager to lookup the object relative to "\Sessions\0\DosDevices\[Logon Authentication ID]".','line_number':1613,'multiline':False]['text':'','line_number':1614,'multiline':False]['text':' There is also a special "\Global??\" prefix that refers to the system logon. User's session directory shadows','line_number':1615,'multiline':False]['text':' the system logon directory, so that when the referenced object is not found in the user's namespace,','line_number':1616,'multiline':False]['text':' system logon is looked up instead.','line_number':1617,'multiline':False]['text':'','line_number':1618,'multiline':False]['text':' There is a symlink "Global" in the user's session namespace that refers to the global namespace, so "\??\Global"','line_number':1619,'multiline':False]['text':' effectively resolves to "\Global??". This allows Win32 applications to directly refer to the system objects,','line_number':1620,'multiline':False]['text':' even if shadowed by the current user's logon object.','line_number':1621,'multiline':False]['text':'','line_number':1622,'multiline':False]['text':' NT paths can be used to reference not only local filesystems, but also devices and remote shares identifiable via','line_number':1623,'multiline':False]['text':' UNC paths. For this, there is a special "UNC" device (which is a symlink to "\Device\Mup") in the system logon','line_number':1624,'multiline':False]['text':' namespace, so "\??\UNC\host\share" (or "\??\Global\UNC\host\share", or "\Global??\UNC\host\share") is equivalent','line_number':1625,'multiline':False]['text':' to "\\host\share".','line_number':1626,'multiline':False]['text':'','line_number':1627,'multiline':False]['text':' NT paths are not universally accepted by Win32 applications and APIs. For example, Far supports paths starting','line_number':1628,'multiline':False]['text':' with "\??\" and "\??\Global\" but not with "\Global??\". As of Win10 21H1, File Explorer, cmd.exe and PowerShell','line_number':1629,'multiline':False]['text':' don't support any of these. Given this, and that NT paths have a different set of allowed characters from Win32 paths,','line_number':1630,'multiline':False]['text':' we should normally avoid exposing NT paths to users that expect Win32 paths.','line_number':1631,'multiline':False]['text':'','line_number':1632,'multiline':False]['text':' In Boost.Filesystem we only deal with NT paths that come from reparse points, such as symlinks and mount points,','line_number':1633,'multiline':False]['text':' including directory junctions. It was observed that reparse points created by junction.exe and mklink use the "\??\"','line_number':1634,'multiline':False]['text':' prefix for directory junctions and absolute symlink and unqualified relative path for relative symlinks.','line_number':1635,'multiline':False]['text':' Absolute paths are using drive letters for mounted drives (e.g. "\??\C:\directory"), although it is possible','line_number':1636,'multiline':False]['text':' to create a junction to an directory using a different way of identifying the filesystem (e.g.','line_number':1637,'multiline':False]['text':' "\??\Volume{00000000-0000-0000-0000-000000000000}\directory").','line_number':1638,'multiline':False]['text':' mklink does not support creating junctions pointing to a UNC path. junction.exe does create a junction that','line_number':1639,'multiline':False]['text':' uses a seemingly invalid syntax like "\??\\\host\share", i.e. it basically does not expect an UNC path. It is not known','line_number':1640,'multiline':False]['text':' if reparse points that refer to a UNC path are considered valid.','line_number':1641,'multiline':False]['text':' There are reparse points created as mount points for local and remote filsystems (for example, a cloud storage mounted','line_number':1642,'multiline':False]['text':' in the local filesystem). Such mount points have the form of "\??\Volume{00000000-0000-0000-0000-000000000000}\",','line_number':1643,'multiline':False]['text':' "\??\Harddisk0Partition1\" or "\??\HarddiskVolume1\".','line_number':1644,'multiline':False]['text':' Reparse points that refer directly to a global namespace (through "\??\Global\" or "\Global??\" prefixes) or','line_number':1645,'multiline':False]['text':' devices (e.g. "\Device\HarddiskVolume1") have not been observed so far.','line_number':1646,'multiline':False]['text':' Check for the "\??\" prefix','line_number':1652,'multiline':False]['text':' Check "Global"','line_number':1661,'multiline':False]['text':' Check for the "\Global??\" prefix','line_number':1682,'multiline':False]['text':' Check if the following is a drive letter','line_number':1703,'multiline':False]['text':' Check for an "incorrect" syntax for UNC path junction points','line_number':1708,'multiline':False]['text':' Strip the NT path prefix','line_number':1715,'multiline':False]['text':' Check for a UNC path','line_number':1721,'multiline':False]['text':' This is some other NT path, possibly a volume mount point. Replace the NT prefix with a Win32 filesystem prefix "\\?\".','line_number':1733,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':1747,'multiline':False]['text':' unnamed namespace','line_number':1749,'multiline':False]['text':' namespace detail','line_number':1750,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1752,'multiline':False]['text':'                                                                                      //','line_number':1753,'multiline':False]['text':'                operations functions declared in operations.hpp                       //','line_number':1754,'multiline':False]['text':'                                                                                      //','line_number':1755,'multiline':False]['text':'--------------------------------------------------------------------------------------//','line_number':1756,'multiline':False]['text':'  recursively calling absolute is sub-optimal, but is sure and simple','line_number':1779,'multiline':False]['text':' Convert generic separator returned by the iterator for the root directory to','line_number':1876,'multiline':False]['text':' the preferred separator. This is important on Windows, as in some cases,','line_number':1877,'multiline':False]['text':' like paths for network shares and cloud storage mount points GetFileAttributesW','line_number':1878,'multiline':False]['text':' will return "file not found" if the path contains forward slashes.','line_number':1879,'multiline':False]['text':' We don't need to check for a symlink after adding a separator.','line_number':1881,'multiline':False]['text':' If we don't have an absolute path yet then don't check symlink status.','line_number':1887,'multiline':False]['text':' This avoids checking "C:" which is "the current directory on drive C"','line_number':1888,'multiline':False]['text':' and hence not what we want to check/resolve here.','line_number':1889,'multiline':False]['text':' link is relative','line_number':1922,'multiline':False]['text':' symlink causes scan to be restarted','line_number':1938,'multiline':False]['text':' Try to generate a relative path from the target location to the original file','line_number':2009,'multiline':False]['text':' Note: local_ec may be set by (symlink_)status() even in some non-fatal situations, e.g. when the file does not exist.','line_number':2054,'multiline':False]['text':'       OTOH, when it returns status_error, then a real error have happened and it must have set local_ec.','line_number':2055,'multiline':False]['text':' Note: ec may be set by (symlink_)status() even in some non-fatal situations, e.g. when the file does not exist.','line_number':2092,'multiline':False]['text':'       OTOH, when it returns status_error, then a real error have happened and it must have set local_ec.','line_number':2093,'multiline':False]['text':' Set _detail_recursing flag so that we don't recurse more than for one level deeper into the directory if options are copy_options::none','line_number':2120,'multiline':False]['text':' Note: Declare fd_wrappers here so that errno is not clobbered by close() that may be called in fd_wrapper destructors','line_number':2152,'multiline':False]['text':' Enable writing for the newly created files. Having write permission set is important e.g. for NFS,','line_number':2209,'multiline':False]['text':' which checks the file permission on the server, even if the client's file descriptor supports writing.','line_number':2210,'multiline':False]['text':' Try opening the existing file without truncation to test the modification time later','line_number':2217,'multiline':False]['text':' O_TRUNC is not set if copy_options::update_existing is set and an existing file was opened.','line_number':2270,'multiline':False]['text':' O_TRUNC is not set if copy_options::update_existing is set and an existing file was opened.','line_number':2304,'multiline':False]['text':' We need to check the last write times.','line_number':2305,'multiline':False]['text':' Modify time is available with nanosecond precision.','line_number':2310,'multiline':False]['text':' Note: Use block size of the target file since it is most important for writing performance.','line_number':2322,'multiline':False]['text':' err already contains the error code','line_number':2325,'multiline':False]['text':' If we created a new file with an explicitly added S_IWUSR permission,','line_number':2328,'multiline':False]['text':' we may need to update its mode bits to match the source file.','line_number':2329,'multiline':False]['text':' We have to explicitly close the output file descriptor in order to handle a possible error returned from it. The error may indicate','line_number':2348,'multiline':False]['text':' a failure of a prior write operation.','line_number':2349,'multiline':False]['text':' EINPROGRESS is an allowed error code in future POSIX revisions, according to https://www.austingroupbugs.net/view.php?id=529#c1200.','line_number':2355,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2362,'multiline':False]['text':' Create handle_wrappers here so that CloseHandle calls don't clobber error code returned by GetLastError','line_number':2373,'multiline':False]['text':'! Callback that is called to report progress of \c CopyFileExW','line_number':2414,'multiline':False]['text':' For each stream, CopyFileExW will open a separate pair of file handles, so we need to flush each stream separately.','line_number':2426,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2474,'multiline':False]['text':' Find the initial part of the path that exists','line_number':2510,'multiline':False]['text':' Create missing directories','line_number':2534,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2602,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2613,'multiline':False]['text':'  attempt to create directory failed','line_number':2615,'multiline':False]['text':' save reason for failure','line_number':2616,'multiline':False]['text':'  attempt to create directory failed && it doesn't already exist','line_number':2622,'multiline':False]['text':' Deprecated, to be removed in a future release','line_number':2627,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2666,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2671,'multiline':False]['text':' see if actually supported by Windows runtime dll','line_number':2688,'multiline':False]['text':' see if actually supported by Windows runtime dll','line_number':2716,'multiline':False]['text':' see if actually supported by Windows runtime dll','line_number':2745,'multiline':False]['text':' Windows CE has no current directory, so everything's relative to the root of the directory tree.','line_number':2764,'multiline':False]['text':' WASI also does not support current path.','line_number':2765,'multiline':False]['text':' bug in some versions of the Metrowerks C lib on the Mac: wrong errno set','line_number':2776,'multiline':False]['text':' loop 'til buffer large enough','line_number':2795,'multiline':False]['text':' p2 is done first, so any error reported is for p1','line_number':2845,'multiline':False]['text':' if one is invalid and the other isn't then they aren't equivalent,','line_number':2875,'multiline':False]['text':' but if both are invalid then it is an error','line_number':2876,'multiline':False]['text':' Windows','line_number':2884,'multiline':False]['text':' Thanks to Jeremy Maitin-Shepard for much help and for permission to','line_number':2886,'multiline':False]['text':' base the equivalent() implementation on portions of his','line_number':2887,'multiline':False]['text':' file-equivalence-win32.cpp experimental code.','line_number':2888,'multiline':False]['text':' Note well: Physical location on external media is part of the','line_number':2890,'multiline':False]['text':' equivalence criteria. If there are no open handles, physical location','line_number':2891,'multiline':False]['text':' can change due to defragmentation or other relocations. Thus handles','line_number':2892,'multiline':False]['text':' must be held open until location information for both paths has','line_number':2893,'multiline':False]['text':' been retrieved.','line_number':2894,'multiline':False]['text':' p2 is done first, so any error reported is for p1','line_number':2896,'multiline':False]['text':' if one is invalid and the other isn't, then they aren't equivalent,','line_number':2917,'multiline':False]['text':' but if both are invalid then it is an error','line_number':2918,'multiline':False]['text':' at this point, both handles are known to be valid','line_number':2924,'multiline':False]['text':' In theory, volume serial numbers are sufficient to distinguish between','line_number':2934,'multiline':False]['text':' devices, but in practice VSN's are sometimes duplicated, so last write','line_number':2935,'multiline':False]['text':' time and file size are also checked.','line_number':2936,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':2986,'multiline':False]['text':' assume uintmax_t is 64-bits on all Windows compilers','line_number':2988,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3008,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3045,'multiline':False]['text':' Link count info is only available through GetFileInformationByHandle','line_number':3057,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3064,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3119,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3130,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3167,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3186,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3220,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3239,'multiline':False]['text':' Keep the last access time unchanged','line_number':3254,'multiline':False]['text':' _POSIX_C_SOURCE >= 200809L','line_number':3265,'multiline':False]['text':' utime()updates access time too:-(','line_number':3275,'multiline':False]['text':' _POSIX_C_SOURCE >= 200809L','line_number':3280,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3282,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3300,'multiline':False]['text':' precondition failed','line_number':3316,'multiline':False]['text':' OS X <10.10, iOS <8.0 and some other platforms don't support fchmodat().','line_number':3338,'multiline':False]['text':' Solaris (SunPro and gcc) only support fchmodat() on Solaris 11 and higher,','line_number':3339,'multiline':False]['text':' and a runtime check is too much trouble.','line_number':3340,'multiline':False]['text':' Linux does not support permissions on symbolic links and has no plans to','line_number':3341,'multiline':False]['text':' support them in the future.  The chmod() code is thus more practical,','line_number':3342,'multiline':False]['text':' rather than always hitting ENOTSUP when sending in AT_SYMLINK_NO_FOLLOW.','line_number':3343,'multiline':False]['text':'  - See the 3rd paragraph of','line_number':3344,'multiline':False]['text':' "Symbolic link ownership, permissions, and timestamps" at:','line_number':3345,'multiline':False]['text':'   "http://man7.org/linux/man-pages/man7/symlink.7.html"','line_number':3346,'multiline':False]['text':'  - See the fchmodat() Linux man page:','line_number':3347,'multiline':False]['text':'   "http://man7.org/linux/man-pages/man2/fchmodat.2.html"','line_number':3348,'multiline':False]['text':' fallback if fchmodat() not supported','line_number':3356,'multiline':False]['text':' Windows','line_number':3370,'multiline':False]['text':' if not going to alter FILE_ATTRIBUTE_READONLY, just return','line_number':3372,'multiline':False]['text':' loop 'til buffer large enough','line_number':3421,'multiline':False]['text':' Note: iff info.rdb.SymbolicLinkReparseBuffer.Flags & SYMLINK_FLAG_RELATIVE','line_number':3483,'multiline':False]['text':'       -> resulting path is relative to the source','line_number':3484,'multiline':False]['text':' Initialize members to -1, as required by C++20 [fs.op.space]/1 in case of error','line_number':3570,'multiline':False]['text':' GetDiskFreeSpaceExW requires a directory path, which is unlike statvfs, which accepts any file.','line_number':3594,'multiline':False]['text':' To work around this, test if the path refers to a directory and use the parent directory if not.','line_number':3595,'multiline':False]['text':' We need to resolve the symlink so that we report the space for the symlink target','line_number':3619,'multiline':False]['text':' The original path was just a filename, which is a relative path wrt. current directory','line_number':3628,'multiline':False]['text':' For UNC names, the path must also include a trailing slash.','line_number':3633,'multiline':False]['text':' always report errno, even though some','line_number':3670,'multiline':False]['text':' errno values are not status_errors','line_number':3671,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3705,'multiline':False]['text':' We should first test if the file is a symlink or a reparse point. Resolving some reparse','line_number':3707,'multiline':False]['text':' points by opening the file may fail, and status() should return file_status(reparse_file) in this case.','line_number':3708,'multiline':False]['text':' Which is what symlink_status() returns.','line_number':3709,'multiline':False]['text':' Resolve the symlink','line_number':3713,'multiline':False]['text':' dwDesiredAccess; attributes only','line_number':3717,'multiline':False]['text':' lpSecurityAttributes','line_number':3719,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3756,'multiline':False]['text':' always report errno, even though some','line_number':3778,'multiline':False]['text':' errno values are not status_errors','line_number':3779,'multiline':False]['text':' these are not errors','line_number':3781,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3815,'multiline':False]['text':' dwDesiredAccess; attributes only','line_number':3820,'multiline':False]['text':' lpSecurityAttributes','line_number':3822,'multiline':False]['text':' defined(BOOST_POSIX_API)','line_number':3864,'multiline':False]['text':' contributed by Jeff Flinn','line_number':3867,'multiline':False]['text':' Windows','line_number':3904,'multiline':False]['text':' use a separate buffer since in C++03 a string is not required to be contiguous','line_number':3931,'multiline':False]['text':' do not depend on initial buf size, see ticket #10388','line_number':3945,'multiline':False]['text':' Windows CE','line_number':3951,'multiline':False]['text':' Windows CE has no environment variables, so the same code as used for','line_number':3953,'multiline':False]['text':' regular Windows, above, doesn't work.','line_number':3954,'multiline':False]['text':' !defined(UNDER_CE)','line_number':3983,'multiline':False]['text':' len does not include null termination character','line_number':4010,'multiline':False]['text':' On Windows, filesystem APIs such as GetFileAttributesW perform lexical path normalization internally.','line_number':4049,'multiline':False]['text':' As a result, a path like "c:\a\.." can be reported as present even if "c:\a" is not. This would break','line_number':4050,'multiline':False]['text':' canonical, as symlink_status that it calls internally would report an error that the file at the intermediate','line_number':4051,'multiline':False]['text':' path does not exist. To avoid this, scan the initial path in the forward direction.','line_number':4052,'multiline':False]['text':' Also, operate on paths with preferred separators. This can be important on Windows since GetFileAttributesW,','line_number':4053,'multiline':False]['text':' which is called in status() may return "file not found" for paths to network shares and mounted cloud','line_number':4054,'multiline':False]['text':' storages that have forward slashes as separators.','line_number':4055,'multiline':False]['text':' Convert generic separator returned by the iterator for the root directory to','line_number':4063,'multiline':False]['text':' the preferred separator.','line_number':4064,'multiline':False]['text':' Convert generic separator returned by the iterator for the root directory to','line_number':4101,'multiline':False]['text':' the preferred separator.','line_number':4102,'multiline':False]['text':' for a later optimization, track if any dot or dot-dot elements are present','line_number':4108,'multiline':False]['text':' optimization: only normalize if tail had dot or dot-dot element','line_number':4130,'multiline':False]['text':' namespace detail','line_number':4138,'multiline':False]['text':' namespace filesystem','line_number':4139,'multiline':False]['text':' namespace boost','line_number':4140,'multiline':False]