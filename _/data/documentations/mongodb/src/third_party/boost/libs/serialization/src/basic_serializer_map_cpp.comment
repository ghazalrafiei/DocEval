['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':1,'multiline':False]['text':' serializer_map.cpp:','line_number':2,'multiline':False]['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com . ','line_number':4,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':5,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':' too long name, harmless warning','line_number':12,'multiline':False]['text':' include this to prevent linker errors when the','line_number':19,'multiline':False]['text':' same modules are marked export and import.','line_number':20,'multiline':False]['text':' attempt to insert serializer into it's map','line_number':45,'multiline':False]['text':' the following is commented out - rather than being just','line_number':46,'multiline':False]['text':' deleted as a reminder not to try this.','line_number':47,'multiline':False]['text':' const std::pair<map_type::iterator, bool> result =','line_number':49,'multiline':False]['text':' At first it seemed like a good idea.  It enforced the','line_number':52,'multiline':False]['text':' idea that a type be exported from at most one code module','line_number':53,'multiline':False]['text':' (DLL or mainline).  This would enforce a "one definition rule" ','line_number':54,'multiline':False]['text':' across code modules. This seems a good idea to me.  ','line_number':55,'multiline':False]['text':' But it seems that it's just too hard for many users to implement.','line_number':56,'multiline':False]['text':' Ideally, I would like to make this exception a warning -','line_number':58,'multiline':False]['text':' but there isn't anyway to do that.','line_number':59,'multiline':False]['text':' if this fails, it's because it's been instantiated','line_number':61,'multiline':False]['text':' in multiple modules - DLLS - a recipe for problems.','line_number':62,'multiline':False]['text':' So trap this here','line_number':63,'multiline':False]['text':' if(!result.second){','line_number':64,'multiline':False]['text':'     boost::serialization::throw_exception(','line_number':65,'multiline':False]['text':'         archive_exception(','line_number':66,'multiline':False]['text':'             archive_exception::multiple_code_instantiation,','line_number':67,'multiline':False]['text':'             bs->get_debug_info()','line_number':68,'multiline':False]['text':'         )','line_number':69,'multiline':False]['text':'     );','line_number':70,'multiline':False]['text':' }','line_number':71,'multiline':False]['text':' note item 9 from Effective STL !!! it++','line_number':81,'multiline':False]['text':' note: we can't do this since some of the eti records','line_number':87,'multiline':False]['text':' we're pointing to might be expired and the comparison','line_number':88,'multiline':False]['text':' won't work.  Leave this as a reminder not to "optimize" this.','line_number':89,'multiline':False]['text':'it = m_map.find(bs);','line_number':90,'multiline':False]['text':'assert(it != m_map.end());','line_number':91,'multiline':False]['text':'if(*it == bs)','line_number':92,'multiline':False]['text':'    m_map.erase(it);','line_number':93,'multiline':False]['text':' namespace detail','line_number':109,'multiline':False]['text':' namespace archive','line_number':110,'multiline':False]['text':' namespace boost','line_number':111,'multiline':False]