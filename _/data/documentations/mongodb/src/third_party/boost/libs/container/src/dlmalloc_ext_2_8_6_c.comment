['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2007-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'dlmalloc bug EINVAL is used in posix_memalign without checking LACKS_ERRNO_H','line_number':13,'multiline':False]['text':'CHAR_BIT','line_number':14,'multiline':False]['text':'disable sbrk as it's deprecated in some systems and weakens ASLR','line_number':22,'multiline':False]['text':'empty controlled statement found; is this the intent?','line_number':45,'multiline':True]['text':'dll warnings','line_number':46,'multiline':True]['text':'differs in indirection to slightly different base types from','line_number':47,'multiline':True]['text':'unreachable code','line_number':48,'multiline':True]['text':'conditional expression is constant','line_number':49,'multiline':True]['text':'/////////////////////////////////////////////////////////////','line_number':58,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':59,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'         SLIGHTLY MODIFIED DLMALLOC FUNCTIONS','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':64,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':65,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':66,'multiline':False]['text':'This function is equal to mspace_free','line_number':68,'multiline':False]['text':'replacing PREACTION with 0 and POSTACTION with nothing','line_number':69,'multiline':False]['text':' placate people compiling -Wunused ','line_number':76,'multiline':True]['text':' FOOTERS ','line_number':77,'multiline':True]['text':' FOOTERS ','line_number':79,'multiline':True]['text':'PREACTION(fm)) {','line_number':84,'multiline':False]['text':' consolidate backward ','line_number':101,'multiline':True]['text':' consolidate forward ','line_number':117,'multiline':True]['text':'POSTACTION(fm);','line_number':167,'multiline':False]['text':'This function is equal to mspace_malloc','line_number':172,'multiline':False]['text':'replacing PREACTION with 0 and POSTACTION with nothing','line_number':173,'multiline':False]['text':'PREACTION(ms)) {','line_number':181,'multiline':False]['text':' Remainderless fit to a smallbin. ','line_number':191,'multiline':True]['text':' Uses next bin if idx empty ','line_number':193,'multiline':True]['text':' Use chunk in next nonempty smallbin ','line_number':205,'multiline':True]['text':' Fit here cannot be remainderless if 4byte sizes ','line_number':217,'multiline':True]['text':' Too big to allocate. Force failure (in sys alloc) ','line_number':238,'multiline':True]['text':' split dv ','line_number':250,'multiline':True]['text':' exhaust dv ','line_number':256,'multiline':True]['text':' Split top ','line_number':267,'multiline':True]['text':'POSTACTION(ms);','line_number':282,'multiline':False]['text':'This function is equal to try_realloc_chunk but handling','line_number':289,'multiline':False]['text':'minimum and desired bytes','line_number':290,'multiline':False]['text':'mmap does not return how many bytes we could reallocate, so go the minimum','line_number':300,'multiline':False]['text':' already big enough ','line_number':303,'multiline':True]['text':' split off remainder ','line_number':306,'multiline':True]['text':' extend into top ','line_number':314,'multiline':True]['text':' extend into dv ','line_number':327,'multiline':True]['text':' exhaust dv ','line_number':341,'multiline':True]['text':' extend into next free chunk ','line_number':350,'multiline':True]['text':'/////////////////////////////////////////////////////////////','line_number':376,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':377,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':378,'multiline':False]['text':'','line_number':379,'multiline':False]['text':'         NEW FUNCTIONS BASED ON DLMALLOC INTERNALS','line_number':380,'multiline':False]['text':'','line_number':381,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':382,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':383,'multiline':False]['text':'/////////////////////////////////////////////////////////////','line_number':384,'multiline':False]['text':' Greatest common divisor and least common multiple
   gcd is an algorithm that calculates the greatest common divisor of two
   integers, using Euclid's algorithm.

   Pre: A > 0 && B > 0
   Recommended: A > B','line_number':391,'multiline':True]['text':' lcm is an algorithm that calculates the least common multiple of two
   integers.

   Pre: A > 0 && B > 0
   Recommended: A > B','line_number':411,'multiline':True]['text':' Now calculate lcm ','line_number':426,'multiline':True]['text':'Swap if necessary','line_number':433,'multiline':True]['text':'Check if it's power of two','line_number':439,'multiline':True]['text':'If we want to use minbytes data to get a buffer between maxbytes
      and minbytes if maxbytes can't be achieved, calculate the
      biggest of all possibilities','line_number':447,'multiline':True]['text':'Check if it's multiple of alignment','line_number':458,'multiline':True]['text':'No need to round needs_backwards because backwards_multiple == lcm','line_number':462,'multiline':False]['text':'Check if it's multiple of the half of the alignmment','line_number':469,'multiline':True]['text':'while(0 != (needs_backwards_lcmed & (MALLOC_ALIGNMENT-1)))','line_number':475,'multiline':False]['text':'Check if it's multiple of the quarter of the alignmment','line_number':482,'multiline':True]['text':'while(0 != (needs_backwards_lcmed & (MALLOC_ALIGNMENT-1)))','line_number':488,'multiline':False]['text':'needs_backwards_lcmed += backwards_multiple;','line_number':489,'multiline':False]['text':'If we want to use minbytes data to get a buffer between maxbytes
      and minbytes if maxbytes can't be achieved, calculate the
      biggest of all possibilities','line_number':505,'multiline':True]['text':'
      Should we check this?
      if(backwards_multiple &&
         (0 != (minbytes % backwards_multiple) &&
          0 != (maxbytes % backwards_multiple)) ){
         USAGE_ERROR_ACTION(m, oldp);
         return 0;
      }
','line_number':548,'multiline':True]['text':' We reach here only if forward expansion fails ','line_number':557,'multiline':True]['text':'Return failure the previous chunk was mmapped.
              mremap does not allow expanding to a fixed address (MREMAP_MAYMOVE) without
              copying (MREMAP_MAYMOVE must be also set).','line_number':564,'multiline':True]['text':' Let's calculate the number of extra bytes of data before the current
            block's begin. The value is a multiple of backwards_multiple
            and the alignment','line_number':575,'multiline':True]['text':' Check if previous block has enough size ','line_number':586,'multiline':True]['text':' preferred size? ','line_number':588,'multiline':True]['text':' Now take all next space. This must succeed, as we've previously calculated the correct size ','line_number':591,'multiline':True]['text':' We need a minimum size to split the previous one ','line_number':602,'multiline':True]['text':' if ((next->head & INUSE_BITS) == INUSE_BITS) { ','line_number':614,'multiline':True]['text':' Check if there is no place to create a new block and
               the whole new block is multiple of the backwards expansion multiple ','line_number':627,'multiline':True]['text':' Just merge the whole previous block ','line_number':630,'multiline':True]['text':' prevsize is multiple of lcm (and backwards_multiple)','line_number':631,'multiline':True]['text':' Previous block was big enough but there is no room
                  to create an empty block and taking the whole block does
                  not fulfill alignment requirements ','line_number':647,'multiline':True]['text':' This is similar to mmap_resize but:
   * Only to shrink
   * It takes min and max sizes
   * Takes additional 'do_commit' argument to obtain the final
     size before doing the real shrink operation.
','line_number':662,'multiline':True]['text':' Can't shrink mmap regions below small size ','line_number':673,'multiline':True]['text':' Keep old chunk if big enough but not too big ','line_number':677,'multiline':True]['text':' Now calculate new sizes ','line_number':681,'multiline':True]['text':' placate people compiling -Wunused ','line_number':688,'multiline':True]['text':'This must always succeed ','line_number':691,'multiline':True]['text':'#if HAVE_MREMAP','line_number':714,'multiline':False]['text':'#if HAVE_MREMAP','line_number':722,'multiline':False]['text':' Try to either shrink or extend into top. Else malloc-copy-free','line_number':745,'multiline':True]['text':' Return error if old size is too small ','line_number':752,'multiline':True]['text':' nbmin <= oldsize /* already big enough*/','line_number':757,'multiline':False]['text':' malloced aggregate space ','line_number':787,'multiline':True]['text':' corresponding chunk ','line_number':788,'multiline':True]['text':' remaining bytes while splitting ','line_number':789,'multiline':True]['text':' to disable mmap ','line_number':790,'multiline':True]['text':'Error if wrong element_size parameter ','line_number':795,'multiline':True]['text':'OR Error if n_elements less than contiguous_elements ','line_number':797,'multiline':True]['text':' OR Error if integer overflow ','line_number':799,'multiline':True]['text':' Default contiguous, just check that we can store at least one element ','line_number':807,'multiline':True]['text':' All elements should be allocated in a single call ','line_number':813,'multiline':True]['text':' Allocate in chunks of "contiguous_elements" ','line_number':817,'multiline':True]['text':'
		   Allocate the aggregate chunk.  First disable direct-mmapping so
		   malloc won't use it, since we would not be able to later
		   free/realloc space internal to a segregated mmap region.
		','line_number':824,'multiline':True]['text':' split out elements ','line_number':857,'multiline':True]['text':'void *mem_orig = mem;','line_number':858,'multiline':False]['text':'boost_cont_memchain_it last_it = BOOST_CONTAINER_MEMCHAIN_LAST_IT(pchain);','line_number':859,'multiline':False]['text':'void **mem_prev = ((void**)mem);','line_number':866,'multiline':False]['text':'*mem_prev = mem;','line_number':871,'multiline':False]['text':'BOOST_CONTAINER_MEMCHAIN_INCORPORATE_AFTER(pchain, last_it, mem_orig, mem, num_elements);','line_number':875,'multiline':False]['text':'This function is based on internal_bulk_free','line_number':890,'multiline':False]['text':'replacing iteration over array[] with boost_cont_memchain.','line_number':891,'multiline':False]['text':'Instead of returning the unallocated nodes, returns a chain of non-deallocated nodes.','line_number':892,'multiline':False]['text':'After forward merging, backwards merging is also tried','line_number':893,'multiline':False]['text':' Iterate though all memory holded by the chain ','line_number':902,'multiline':True]['text':' Internal loop to speed up forward and backward merging (avoids some redundant checks) ','line_number':915,'multiline':True]['text':' b chunk is contiguous and next so b's size can be added to a ','line_number':921,'multiline':True]['text':' b chunk is contiguous and previous so a's size can be added to b ','line_number':928,'multiline':True]['text':' Normal deallocation starts again in the outer loop ','line_number':939,'multiline':True]['text':'BOOST_CONTAINER_DLMALLOC_SIMPLE_MULTIDEALLOC','line_number':970,'multiline':False]['text':'This function is based on internal_bulk_free','line_number':972,'multiline':False]['text':'replacing iteration over array[] with boost_cont_memchain.','line_number':973,'multiline':False]['text':'Instead of returning the unallocated nodes, returns a chain of non-deallocated nodes.','line_number':974,'multiline':False]['text':'After forward merging, backwards merging is also tried','line_number':975,'multiline':False]['text':' Iterate though all memory holded by the chain ','line_number':980,'multiline':True]['text':'BOOST_CONTAINER_DLMALLOC_SIMPLE_MULTIDEALLOC','line_number':990,'multiline':False]['text':' malloced aggregate space ','line_number':994,'multiline':True]['text':' corresponding chunk ','line_number':995,'multiline':True]['text':' remaining bytes while splitting ','line_number':996,'multiline':True]['text':' to disable mmap ','line_number':997,'multiline':True]['text':' Check overflow ','line_number':1002,'multiline':True]['text':' Different sizes','line_number':1007,'multiline':True]['text':' Use default contiguous mem ','line_number':1010,'multiline':True]['text':' The suggested buffer is just the the element count by the size ','line_number':1021,'multiline':True]['text':'
         Allocate the aggregate chunk.  First disable direct-mmapping so
         malloc won't use it, since we would not be able to later
         free/realloc space internal to a segregated mmap region.
      ','line_number':1029,'multiline':True]['text':' split out elements ','line_number':1078,'multiline':True]['text':'Doug Lea malloc extensions','line_number':1119,'multiline':True]['text':' top always free ','line_number':1225,'multiline':True]['text':'ensure_initialization provided by boost_cont_allocation_command','line_number':1330,'multiline':False]['text':'Expand in place','line_number':1384,'multiline':True]['text':'Now try to expand both sides with min size','line_number':1420,'multiline':False]['text':'#ifdef DL_DEBUG_DEFINED','line_number':1482,'multiline':False]['text':'   #undef DEBUG','line_number':1483,'multiline':False]['text':'#endif','line_number':1484,'multiline':False]