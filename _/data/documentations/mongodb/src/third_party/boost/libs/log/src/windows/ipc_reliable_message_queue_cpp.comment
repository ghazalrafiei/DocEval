['text':'
 *                Copyright Lingxi Li 2015.
 *             Copyright Andrey Semashev 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   ipc_reliable_message_queue_win.hpp
 * \author Lingxi Li
 * \author Andrey Semashev
 * \date   28.10.2015
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 *
 * This file provides an interprocess message queue implementation on POSIX platforms.
 ','line_number':8,'multiline':True]['text':' SwitchToThread','line_number':41,'multiline':False]['text':'! A suffix used in names of interprocess objects created by the queue.','line_number':50,'multiline':False]['text':'! Used as a protection against clashing with user-supplied names of interprocess queues and also to resolve conflicts between queues of different types.','line_number':51,'multiline':False]['text':'! Message queue implementation data','line_number':60,'multiline':False]['text':'! Header of an allocation block within the message queue. Placed at the beginning of the block within the shared memory segment.','line_number':64,'multiline':False]['text':' Element data alignment, in bytes','line_number':67,'multiline':False]['text':'! Size of the element data, in bytes','line_number':70,'multiline':False]['text':'! Returns the block header overhead, in bytes','line_number':73,'multiline':False]['text':'! Returns a pointer to the element data','line_number':79,'multiline':False]['text':'! Header of the message queue. Placed at the beginning of the shared memory segment.','line_number':86,'multiline':False]['text':' Increment this constant whenever you change the binary layout of the queue (apart from this header structure)','line_number':89,'multiline':False]['text':' !!! Whenever you add/remove members in this structure, also modify get_abi_tag() function accordingly !!!','line_number':92,'multiline':False]['text':'! A tag value to ensure the correct binary layout of the message queue data structures. Must be placed first and always have a fixed size and alignment.','line_number':94,'multiline':False]['text':'! Padding to protect against alignment changes in Boost.Atomic. Don't use BOOST_ALIGNMENT to ensure portability.','line_number':96,'multiline':False]['text':'! A flag indicating that the queue is constructed (i.e. the queue is constructed when the value is not 0).','line_number':98,'multiline':False]['text':'! Number of allocation blocks in the queue.','line_number':100,'multiline':False]['text':'! Size of an allocation block, in bytes.','line_number':102,'multiline':False]['text':'! Shared state of the mutex for protecting queue data structures.','line_number':104,'multiline':False]['text':'! Shared state of the condition variable used to block writers when the queue is full.','line_number':106,'multiline':False]['text':'! The current number of allocated blocks in the queue.','line_number':108,'multiline':False]['text':'! The current writing position (allocation block index).','line_number':110,'multiline':False]['text':'! The current reading position (allocation block index).','line_number':112,'multiline':False]['text':' Must be initialized last. m_initialized is zero-initialized initially.','line_number':123,'multiline':False]['text':'! Returns the header structure ABI tag','line_number':127,'multiline':False]['text':' This FOURCC identifies the queue type','line_number':130,'multiline':False]['text':' This FOURCC identifies the queue implementation','line_number':133,'multiline':False]['text':' We will use these constants to align pointers','line_number':137,'multiline':False]['text':' The members in the sequence below must be enumerated in the same order as they are declared in the header structure.','line_number':141,'multiline':False]['text':' The ABI tag is supposed change whenever a member changes size or offset from the beginning of the header.','line_number':142,'multiline':False]['text':'! Returns an element header at the specified index','line_number':164,'multiline':False]['text':'! Shared memory object and mapping','line_number':178,'multiline':False]['text':'! Queue overflow handling policy','line_number':180,'multiline':False]['text':'! The mask for selecting bits that constitute size values from 0 to (block_size - 1)','line_number':182,'multiline':False]['text':'! The number of the bit set in block_size (i.e. log base 2 of block_size)','line_number':184,'multiline':False]['text':'! Mutex for protecting queue data structures.','line_number':187,'multiline':False]['text':'! Event used to block readers when the queue is empty.','line_number':189,'multiline':False]['text':'! Condition variable used to block writers when the queue is full.','line_number':191,'multiline':False]['text':'! The event indicates that stop has been requested','line_number':193,'multiline':False]['text':'! The queue name, as specified by the user','line_number':196,'multiline':False]['text':'! The constructor creates a new shared memory segment','line_number':200,'multiline':False]['text':'! The constructor creates a new shared memory segment or opens the existing one','line_number':224,'multiline':False]['text':'! The constructor opens the existing shared memory segment','line_number':251,'multiline':False]['text':' permissions','line_number':419,'multiline':False]['text':' name','line_number':420,'multiline':False]['text':' permissions','line_number':427,'multiline':False]['text':' manual reset','line_number':428,'multiline':False]['text':' initial state','line_number':429,'multiline':False]['text':' name','line_number':430,'multiline':False]['text':' Initialize synchronization primitives before initializing the header as the openers will wait for it to be initialized','line_number':444,'multiline':False]['text':' Wait until the mapped region becomes initialized','line_number':461,'multiline':False]['text':' Check that the queue layout matches the current process ABI','line_number':488,'multiline':False]['text':'! Returns the number of allocation blocks that are required to store user's payload of the specified size','line_number':549,'multiline':False]['text':' ceil((size + get_header_overhead()) / block_size)','line_number':552,'multiline':False]['text':'! Puts the message to the back of the queue','line_number':556,'multiline':False]['text':' Write the rest of the message at the beginning of the queue','line_number':575,'multiline':False]['text':'! Retrieves the next message and invokes the handler to store the message contents','line_number':591,'multiline':False]['text':' Read the tail of the message','line_number':613,'multiline':False]['text':'! Fixed buffer receive handler','line_number':795,'multiline':False]['text':' System objects are reference counted on Windows, nothing to do here','line_number':809,'multiline':False]['text':' namespace ipc','line_number':812,'multiline':False]['text':' namespace log','line_number':814,'multiline':False]['text':' namespace boost','line_number':816,'multiline':False]