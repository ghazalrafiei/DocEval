['text':' Copyright (C) 2001-2003','line_number':1,'multiline':False]['text':' William E. Kempf','line_number':2,'multiline':False]['text':' Copyright (C) 2007-8 Anthony Williams','line_number':3,'multiline':False]['text':' (C) Copyright 2011-2012 Vicente J. Botet Escriba','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':6,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':' memcmp.','line_number':44,'multiline':False]['text':'#ifndef BOOST_NO_EXCEPTIONS','line_number':58,'multiline':False]['text':'#endif','line_number':64,'multiline':False]['text':'boost::detail::thread_data_base* thread_info=static_cast<boost::detail::thread_data_base*>(data);','line_number':91,'multiline':False]['text':'boost::detail::thread_data_ptr thread_info = static_cast<boost::detail::thread_data_base*>(param)->self;','line_number':171,'multiline':False]['text':' Removed as it stops the debugger identifying the cause of the exception','line_number':186,'multiline':False]['text':' Unhandled exceptions still cause the application to terminate','line_number':187,'multiline':False]['text':'                 BOOST_CATCH(...)','line_number':188,'multiline':False]['text':'                 {','line_number':189,'multiline':False]['text':'                   throw;','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':'                     std::terminate();','line_number':192,'multiline':False]['text':'                 }','line_number':193,'multiline':False]['text':'#ifndef BOOST_NO_EXCEPTIONS','line_number':220,'multiline':False]['text':'#endif','line_number':223,'multiline':False]['text':'lock_guard<mutex> lock(local_thread_info->data_mutex);','line_number':296,'multiline':False]['text':'BOOST_VERIFY(!pthread_detach(local_thread_info->thread_handle));','line_number':299,'multiline':False]['text':' timeout occurred','line_number':374,'multiline':False]['text':' Use pthread_delay_np or nanosleep whenever possible here in the no_interruption_point','line_number':450,'multiline':False]['text':' namespace because they do not provide an interruption point.','line_number':451,'multiline':False]['text':' This should never be reached due to BOOST_THREAD_SLEEP_FOR_IS_STEADY','line_number':461,'multiline':False]['text':'#   elif defined BOOST_THREAD_USES_DATETIME','line_number':474,'multiline':False]['text':'            ::boost::xtime xt;','line_number':475,'multiline':False]['text':'            xtime_get(&xt, TIME_UTC_);','line_number':476,'multiline':False]['text':'            sleep(xt);','line_number':477,'multiline':False]['text':'            sleep_for(chrono::milliseconds(0));','line_number':478,'multiline':False]['text':' [physical ID, core id]','line_number':527,'multiline':False]['text':' Fall back to hardware_concurrency() in case','line_number':560,'multiline':False]['text':' /proc/cpuinfo is formatted differently than we expect.','line_number':561,'multiline':False]['text':'#ifndef BOOST_NO_EXCEPTIONS','line_number':786,'multiline':False]['text':'#endif','line_number':798,'multiline':False]