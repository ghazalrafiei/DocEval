['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   basic_logger.hpp
 * \author Andrey Semashev
 * \date   08.03.2007
 *
 * The header contains implementation of a base class for loggers. Convenience macros
 * for defining custom loggers are also provided.
 ','line_number':7,'multiline':True]['text':'!
 * \brief Basic logger class
 *
 * The \c basic_logger class template serves as a base class for all loggers
 * provided by the library. It can also be used as a base for user-defined
 * loggers. The template parameters are:
 *
 * \li \c CharT - logging character type
 * \li \c FinalT - final type of the logger that eventually derives from
 *     the \c basic_logger. There may be other classes in the hierarchy
 *     between the final class and \c basic_logger.
 * \li \c ThreadingModelT - threading model policy. Must provide methods
 *     of the Boost.Thread locking concept used in \c basic_logger class
 *     and all its derivatives in the hierarchy up to the \c FinalT class.
 *     The \c basic_logger class itself requires methods of the
 *     SharedLockable concept. The threading model policy must also be
 *     default and copy-constructible and support member function \c swap.
 *     There are currently two policies provided: \c single_thread_model
 *     and \c multi_thread_model.
 *
 * The logger implements fundamental facilities of loggers, such as storing
 * source-specific attribute set and formatting log record messages. The basic
 * logger interacts with the logging core in order to apply filtering and
 * pass records to sinks.
 ','line_number':52,'multiline':True]['text':'! Character type','line_number':85,'multiline':False]['text':'! Final logger type','line_number':87,'multiline':False]['text':'! Threading model type','line_number':89,'multiline':False]['text':'! Lock requirement for the swap_unlocked method','line_number':93,'multiline':False]['text':'! Lock requirement for the add_attribute_unlocked method','line_number':95,'multiline':False]['text':'! Lock requirement for the remove_attribute_unlocked method','line_number':97,'multiline':False]['text':'! Lock requirement for the remove_all_attributes_unlocked method','line_number':99,'multiline':False]['text':'! Lock requirement for the get_attributes method','line_number':101,'multiline':False]['text':'! Lock requirement for the open_record_unlocked method','line_number':103,'multiline':False]['text':'! Lock requirement for the set_attributes method','line_number':105,'multiline':False]['text':'! Lock requirement for the push_record_unlocked method','line_number':117,'multiline':False]['text':'! A pointer to the logging system','line_number':121,'multiline':False]['text':'! Logger-specific attribute set','line_number':124,'multiline':False]['text':'!
     * Constructor. Initializes internal data structures of the basic logger class,
     * acquires reference to the logging core.
     ','line_number':128,'multiline':True]['text':'!
     * Copy constructor. Copies all attributes from the source logger.
     *
     * \note Not thread-safe. The source logger must be locked in the final class before copying.
     *
     * \param that Source logger
     ','line_number':137,'multiline':True]['text':'!
     * Move constructor. Moves all attributes from the source logger.
     *
     * \note Not thread-safe. The source logger must be locked in the final class before copying.
     *
     * \param that Source logger
     ','line_number':150,'multiline':True]['text':'!
     * Constructor with named arguments. The constructor ignores all arguments. The result of
     * construction is equivalent to default construction.
     ','line_number':165,'multiline':True]['text':'!
     * An accessor to the logging system pointer
     ','line_number':177,'multiline':True]['text':'!
     * An accessor to the logger attributes
     ','line_number':181,'multiline':True]['text':'!
     * An accessor to the logger attributes
     ','line_number':185,'multiline':True]['text':'!
     * An accessor to the threading model base
     ','line_number':189,'multiline':True]['text':'!
     * An accessor to the threading model base
     ','line_number':193,'multiline':True]['text':'!
     * An accessor to the final logger
     ','line_number':197,'multiline':True]['text':'!
     * An accessor to the final logger
     ','line_number':205,'multiline':True]['text':'!
     * Unlocked \c swap
     ','line_number':214,'multiline':True]['text':'!
     * Unlocked \c add_attribute
     ','line_number':223,'multiline':True]['text':'!
     * Unlocked \c remove_attribute
     ','line_number':231,'multiline':True]['text':'!
     * Unlocked \c remove_all_attributes
     ','line_number':239,'multiline':True]['text':'!
     * Unlocked \c open_record
     ','line_number':247,'multiline':True]['text':'!
     * Unlocked \c open_record
     ','line_number':254,'multiline':True]['text':'!
     * Unlocked \c push_record
     ','line_number':263,'multiline':True]['text':'!
     * Unlocked \c get_attributes
     ','line_number':271,'multiline':True]['text':'!
     * Unlocked \c set_attributes
     ','line_number':279,'multiline':True]['text':'! Assignment is closed (should be implemented through copy and swap in the final class)','line_number':287,'multiline':False]['text':'!
 * Free-standing swap for all loggers
 ','line_number':291,'multiline':True]['text':'!
 * \brief A composite logger that inherits a number of features
 *
 * The composite logger is a helper class that simplifies feature composition into the final logger.
 * The user's logger class is expected to derive from the composite logger class, instantiated with
 * the character type, the user's logger class, the threading model and the list of the required features.
 * The former three parameters are passed to the \c basic_logger class template. The feature list
 * must be an MPL type sequence, where each element is a unary MPL metafunction class, that upon
 * applying on its argument results in a logging feature class that derives from the argument.
 * Every logger feature provided by the library can participate in the feature list.
 ','line_number':302,'multiline':True]['text':'! Base type (the hierarchy of features)','line_number':321,'multiline':False]['text':'! The composite logger type (for use in the user's logger class)','line_number':328,'multiline':False]['text':'! Threading model being used','line_number':333,'multiline':False]['text':'! Lock requirement for the swap_unlocked method','line_number':336,'multiline':False]['text':'!
     * Default constructor (default-constructs all features)
     ','line_number':342,'multiline':True]['text':'!
     * Copy constructor
     ','line_number':346,'multiline':True]['text':'!
     * Move constructor
     ','line_number':357,'multiline':True]['text':'!
     * Constructor with named parameters
     ','line_number':364,'multiline':True]['text':'!
     * The method adds an attribute to the source-specific attribute set. The attribute will be implicitly added to
     * every log record made with the current logger.
     *
     * \param name The attribute name.
     * \param attr The attribute factory.
     * \return A pair of values. If the second member is \c true, then the attribute is added and the first member points to the
     *         attribute. Otherwise the attribute was not added and the first member points to the attribute that prevents
     *         addition.
     ','line_number':372,'multiline':True]['text':'!
     * The method removes an attribute from the source-specific attribute set.
     *
     * \pre The attribute was added with the add_attribute call for this instance of the logger.
     * \post The attribute is no longer registered as a source-specific attribute for this logger. The iterator is invalidated after removal.
     *
     * \param it Iterator to the previously added attribute.
     ','line_number':387,'multiline':True]['text':'!
     * The method removes all attributes from the logger. All iterators and references to the removed attributes are invalidated.
     ','line_number':401,'multiline':True]['text':'!
     * The method retrieves a copy of a set with all attributes from the logger.
     *
     * \return The copy of the attribute set. Attributes are shallow-copied.
     ','line_number':410,'multiline':True]['text':'!
     * The method installs the whole attribute set into the logger. All iterators and references to elements of
     * the previous set are invalidated. Iterators to the \a attrs set are not valid to be used with the logger (that is,
     * the logger owns a copy of \a attrs after completion).
     *
     * \param attrs The set of attributes to install into the logger. Attributes are shallow-copied.
     ','line_number':421,'multiline':True]['text':'!
     * The method opens a new log record in the logging core.
     *
     * \return A valid record handle if the logging record is opened successfully, an invalid handle otherwise.
     ','line_number':434,'multiline':True]['text':' Perform a quick check first','line_number':441,'multiline':False]['text':'!
     * The method opens a new log record in the logging core.
     *
     * \param args A set of additional named arguments. The parameter is ignored.
     * \return A valid record handle if the logging record is opened successfully, an invalid handle otherwise.
     ','line_number':450,'multiline':True]['text':' Perform a quick check first','line_number':459,'multiline':False]['text':'!
     * The method pushes the constructed message to the logging core
     *
     * \param rec The log record with the formatted message
     ','line_number':468,'multiline':True]['text':'!
     * Thread-safe implementation of swap
     ','line_number':478,'multiline':True]['text':'!
     * Assignment for the final class. Threadsafe, provides strong exception guarantee.
     ','line_number':488,'multiline':True]['text':' We'll have to explicitly create the copy in order to make sure it's unlocked when we attempt to lock *this','line_number':496,'multiline':False]['text':'! An optimized composite logger version with no multithreading support','line_number':505,'multiline':False]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':526,'multiline':False]['text':' Perform a quick check first','line_number':565,'multiline':False]['text':' Perform a quick check first','line_number':574,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':609,'multiline':False]['text':' namespace sources','line_number':653,'multiline':False]['text':' namespace log','line_number':655,'multiline':False]['text':' namespace boost','line_number':657,'multiline':False]['text':'!
 *  \brief The macro declares a logger class that inherits a number of base classes
 *
 *  \param type_name The name of the logger class to declare
 *  \param char_type The character type of the logger. Either char or wchar_t expected.
 *  \param base_seq A Boost.Preprocessor sequence of type identifiers of the base classes templates
 *  \param threading A threading model class
 ','line_number':659,'multiline':True]['text':'!
 *  \brief The macro declares a narrow-char logger class that inherits a number of base classes
 *
 *  Equivalent to BOOST_LOG_DECLARE_LOGGER_TYPE(type_name, char, base_seq, single_thread_model)
 *
 *  \param type_name The name of the logger class to declare
 *  \param base_seq A Boost.Preprocessor sequence of type identifiers of the base classes templates
 ','line_number':683,'multiline':True]['text':'!
 *  \brief The macro declares a narrow-char thread-safe logger class that inherits a number of base classes
 *
 *  Equivalent to <tt>BOOST_LOG_DECLARE_LOGGER_TYPE(type_name, char, base_seq, multi_thread_model< shared_mutex >)</tt>
 *
 *  \param type_name The name of the logger class to declare
 *  \param base_seq A Boost.Preprocessor sequence of type identifiers of the base classes templates
 ','line_number':696,'multiline':True]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':708,'multiline':False]['text':' BOOST_LOG_USE_CHAR','line_number':709,'multiline':False]['text':'!
 *  \brief The macro declares a wide-char logger class that inherits a number of base classes
 *
 *  Equivalent to BOOST_LOG_DECLARE_LOGGER_TYPE(type_name, wchar_t, base_seq, single_thread_model)
 *
 *  \param type_name The name of the logger class to declare
 *  \param base_seq A Boost.Preprocessor sequence of type identifiers of the base classes templates
 ','line_number':713,'multiline':True]['text':'!
 *  \brief The macro declares a wide-char thread-safe logger class that inherits a number of base classes
 *
 *  Equivalent to <tt>BOOST_LOG_DECLARE_LOGGER_TYPE(type_name, wchar_t, base_seq, multi_thread_model< shared_mutex >)</tt>
 *
 *  \param type_name The name of the logger class to declare
 *  \param base_seq A Boost.Preprocessor sequence of type identifiers of the base classes templates
 ','line_number':726,'multiline':True]['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':738,'multiline':False]['text':' BOOST_LOG_USE_WCHAR_T','line_number':739,'multiline':False]['text':' BOOST_LOG_SOURCES_BASIC_LOGGER_HPP_INCLUDED_','line_number':743,'multiline':False]