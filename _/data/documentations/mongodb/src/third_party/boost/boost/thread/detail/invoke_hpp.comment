['text':' Copyright (C) 2012-2013 Vicente J. Botet Escriba','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' 2013/04 Vicente J. Botet Escriba','line_number':6,'multiline':False]['text':'    Provide implementation up to 9 parameters when BOOST_NO_CXX11_VARIADIC_TEMPLATES is defined.','line_number':7,'multiline':False]['text':'    Make use of Boost.Move','line_number':8,'multiline':False]['text':'    Make use of Boost.Tuple (movable)','line_number':9,'multiline':False]['text':' 2012 Vicente J. Botet Escriba','line_number':10,'multiline':False]['text':'    Provide implementation _RET using bind when BOOST_NO_CXX11_HDR_FUNCTIONAL and BOOST_NO_SFINAE_EXPR are not defined','line_number':11,'multiline':False]['text':' 2012 Vicente J. Botet Escriba','line_number':12,'multiline':False]['text':'    Adapt to boost libc++ implementation','line_number':13,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':'                     The LLVM Compiler Infrastructure','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' This file is dual licensed under the MIT and the University of Illinois Open','line_number':19,'multiline':False]['text':' Source Licenses. See LICENSE.TXT for details.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' The invoke code is based on the one from libcxx.','line_number':22,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':23,'multiline':False]['text':' bullets 1 and 2','line_number':54,'multiline':False]['text':' bullets 3 and 4','line_number':86,'multiline':False]['text':' bullet 5','line_number':121,'multiline':False]['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':136,'multiline':False]['text':' bullets 1 and 2','line_number':138,'multiline':False]['text':' bullets 3 and 4','line_number':238,'multiline':False]['text':' bullet 5','line_number':274,'multiline':False]['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':334,'multiline':False]['text':'!!!!!  WARNING !!!!! THIS DOESN'T WORKS YET','line_number':368,'multiline':False]['text':' bullet 1','line_number':373,'multiline':False]['text':' (t1.*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is an object of','line_number':374,'multiline':False]['text':' type T or a reference to an object of type T or a reference to an object of a type derived from T','line_number':375,'multiline':False]['text':' bullet 2','line_number':424,'multiline':False]['text':' ((*t1).*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is not one of','line_number':425,'multiline':False]['text':' the types described in the previous item;','line_number':426,'multiline':False]['text':' bullet 3','line_number':475,'multiline':False]['text':' t1.*f when N == 1 and f is a pointer to member data of a class T and t1 is an object of type T or a','line_number':476,'multiline':False]['text':' reference to an object of type T or a reference to an object of a type derived from T;','line_number':477,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':478,'multiline':False]['text':'    inline','line_number':479,'multiline':False]['text':'    typename enable_if_c','line_number':480,'multiline':False]['text':'    <','line_number':481,'multiline':False]['text':'        is_base_of<A, typename remove_reference<A0>::type>::value,','line_number':482,'multiline':False]['text':'        typename detail::apply_cv<A0, A>::type&','line_number':483,'multiline':False]['text':'    >::type','line_number':484,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':485,'multiline':False]['text':'    {','line_number':486,'multiline':False]['text':'        return boost::forward<A0>(a0).*f;','line_number':487,'multiline':False]['text':'    }','line_number':488,'multiline':False]['text':' bullet 4','line_number':490,'multiline':False]['text':' (*t1).*f when N == 1 and f is a pointer to member data of a class T and t1 is not one of the types','line_number':491,'multiline':False]['text':'described in the previous item;','line_number':492,'multiline':False]['text':'    template <class A0, class Ret, bool>','line_number':494,'multiline':False]['text':'    struct d4th_helper','line_number':495,'multiline':False]['text':'    {','line_number':496,'multiline':False]['text':'    };','line_number':497,'multiline':False]['text':'','line_number':498,'multiline':False]['text':'    template <class A0, class Ret>','line_number':499,'multiline':False]['text':'    struct d4th_helper<A0, Ret, true>','line_number':500,'multiline':False]['text':'    {','line_number':501,'multiline':False]['text':'        typedef typename apply_cv<decltype(*declval<A0>()), Ret>::type type;','line_number':502,'multiline':False]['text':'    };','line_number':503,'multiline':False]['text':'','line_number':504,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':505,'multiline':False]['text':'    inline','line_number':506,'multiline':False]['text':'    typename detail::4th_helper<A, Ret,','line_number':507,'multiline':False]['text':'                          !is_base_of<A,','line_number':508,'multiline':False]['text':'                                      typename remove_reference<A0>::type','line_number':509,'multiline':False]['text':'                                     >::value','line_number':510,'multiline':False]['text':'                         >::type&','line_number':511,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':512,'multiline':False]['text':'    {','line_number':513,'multiline':False]['text':'        return (*boost::forward<A0>(a0)).*f;','line_number':514,'multiline':False]['text':'    }','line_number':515,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':517,'multiline':False]['text':'    inline','line_number':518,'multiline':False]['text':'    typename enable_if_c','line_number':519,'multiline':False]['text':'    <','line_number':520,'multiline':False]['text':'        !is_base_of<A, typename remove_reference<A0>::type>::value,','line_number':521,'multiline':False]['text':'        typename detail::ref_return1<Ret A::*, A0>::type','line_number':522,'multiline':False]['text':'    >::type','line_number':523,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':524,'multiline':False]['text':'    {','line_number':525,'multiline':False]['text':'        return (*boost::forward<A0>(a0)).*f;','line_number':526,'multiline':False]['text':'    }','line_number':527,'multiline':False]['text':' bullet 5','line_number':529,'multiline':False]['text':' f(t1, t2, ..., tN) in all other cases.','line_number':530,'multiline':False]['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':555,'multiline':False]['text':' bullet 1','line_number':556,'multiline':False]['text':' (t1.*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is an object of','line_number':557,'multiline':False]['text':' type T or a reference to an object of type T or a reference to an object of a type derived from T','line_number':558,'multiline':False]['text':'/','line_number':678,'multiline':False]['text':'/','line_number':784,'multiline':False]['text':'/','line_number':865,'multiline':False]['text':' bullet 2','line_number':952,'multiline':False]['text':' ((*t1).*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is not one of','line_number':953,'multiline':False]['text':' the types described in the previous item;','line_number':954,'multiline':False]['text':'/','line_number':1036,'multiline':False]['text':'/','line_number':1129,'multiline':False]['text':'/','line_number':1210,'multiline':False]['text':' bullet 3','line_number':1304,'multiline':False]['text':' t1.*f when N == 1 and f is a pointer to member data of a class T and t1 is an object of type T or a','line_number':1305,'multiline':False]['text':' reference to an object of type T or a reference to an object of a type derived from T;','line_number':1306,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':1307,'multiline':False]['text':'    inline','line_number':1308,'multiline':False]['text':'    typename enable_if_c','line_number':1309,'multiline':False]['text':'    <','line_number':1310,'multiline':False]['text':'        is_base_of<A, typename remove_reference<A0>::type>::value,','line_number':1311,'multiline':False]['text':'        typename detail::apply_cv<A0, A>::type&','line_number':1312,'multiline':False]['text':'    >::type','line_number':1313,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':1314,'multiline':False]['text':'    {','line_number':1315,'multiline':False]['text':'        return boost::forward<A0>(a0).*f;','line_number':1316,'multiline':False]['text':'    }','line_number':1317,'multiline':False]['text':' bullet 4','line_number':1319,'multiline':False]['text':' (*t1).*f when N == 1 and f is a pointer to member data of a class T and t1 is not one of the types','line_number':1320,'multiline':False]['text':'described in the previous item;','line_number':1321,'multiline':False]['text':'    template <class A0, class Ret, bool>','line_number':1323,'multiline':False]['text':'    struct d4th_helper','line_number':1324,'multiline':False]['text':'    {','line_number':1325,'multiline':False]['text':'    };','line_number':1326,'multiline':False]['text':'','line_number':1327,'multiline':False]['text':'    template <class A0, class Ret>','line_number':1328,'multiline':False]['text':'    struct d4th_helper<A0, Ret, true>','line_number':1329,'multiline':False]['text':'    {','line_number':1330,'multiline':False]['text':'        typedef typename apply_cv<decltype(*declval<A0>()), Ret>::type type;','line_number':1331,'multiline':False]['text':'    };','line_number':1332,'multiline':False]['text':'','line_number':1333,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':1334,'multiline':False]['text':'    inline','line_number':1335,'multiline':False]['text':'    typename detail::4th_helper<A, Ret,','line_number':1336,'multiline':False]['text':'                          !is_base_of<A,','line_number':1337,'multiline':False]['text':'                                      typename remove_reference<A0>::type','line_number':1338,'multiline':False]['text':'                                     >::value','line_number':1339,'multiline':False]['text':'                         >::type&','line_number':1340,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':1341,'multiline':False]['text':'    {','line_number':1342,'multiline':False]['text':'        return (*boost::forward<A0>(a0)).*f;','line_number':1343,'multiline':False]['text':'    }','line_number':1344,'multiline':False]['text':'    template <class Ret, class A, class A0>','line_number':1346,'multiline':False]['text':'    inline','line_number':1347,'multiline':False]['text':'    typename enable_if_c','line_number':1348,'multiline':False]['text':'    <','line_number':1349,'multiline':False]['text':'        !is_base_of<A, typename remove_reference<A0>::type>::value,','line_number':1350,'multiline':False]['text':'        typename detail::ref_return1<Ret A::*, A0>::type','line_number':1351,'multiline':False]['text':'    >::type','line_number':1352,'multiline':False]['text':'    invoke(Ret A::* f, BOOST_THREAD_RV_REF(A0) a0)','line_number':1353,'multiline':False]['text':'    {','line_number':1354,'multiline':False]['text':'        return (*boost::forward<A0>(a0)).*f;','line_number':1355,'multiline':False]['text':'    }','line_number':1356,'multiline':False]['text':' bullet 5','line_number':1358,'multiline':False]['text':' f(t1, t2, ..., tN) in all other cases.','line_number':1359,'multiline':False]['text':'/','line_number':1517,'multiline':False]['text':'/','line_number':1595,'multiline':False]['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':1597,'multiline':False]['text':' all','line_number':1599,'multiline':False]['text':' header','line_number':1603,'multiline':False]