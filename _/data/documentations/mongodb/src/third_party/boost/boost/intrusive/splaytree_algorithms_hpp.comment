['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2007-2014','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':' The implementation of splay trees is based on the article and code published','line_number':12,'multiline':False]['text':' in C++ Users Journal "Implementing Splay Trees in C++" (September 1, 2005).','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' The splay code has been modified and (supposedly) improved by Ion Gaztanaga.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' Here is the copyright notice of the original file containing the splay code:','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':'  splay_tree.h -- implementation of a STL compatible splay tree.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':'  Copyright (c) 2004 Ralf Mattethat','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':'  Permission to copy, use, modify, sell and distribute this software','line_number':23,'multiline':False]['text':'  is granted provided this copyright notice appears in all copies.','line_number':24,'multiline':False]['text':'  This software is provided "as is" without express or implied','line_number':25,'multiline':False]['text':'  warranty, and with no claim as to its suitability for any purpose.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]['text':'/ @cond','line_number':49,'multiline':False]['text':'Now recover the original header except for the','line_number':70,'multiline':False]['text':'splayed root node.','line_number':71,'multiline':False]['text':'"t_" is the current root and "null_node_" is the header node','line_number':72,'multiline':False]['text':'Recover leftmost/rightmost pointers','line_number':75,'multiline':False]['text':'procedure assemble;','line_number':84,'multiline':False]['text':'    left(r), right(l) := right(t), left(t);','line_number':85,'multiline':False]['text':'    left(t), right(t) := right(null), left(null);','line_number':86,'multiline':False]['text':'end assemble;','line_number':87,'multiline':False]['text':'    left(r), right(l) := right(t), left(t);','line_number':88,'multiline':False]['text':'    left(t), right(t) := right(null), left(null);','line_number':101,'multiline':False]['text':'namespace detail {','line_number':119,'multiline':False]['text':'/ @endcond','line_number':120,'multiline':False]['text':'!   A splay tree is an implementation of a binary search tree. The tree is','line_number':122,'multiline':False]['text':'!   self balancing using the splay algorithm as described in','line_number':123,'multiline':False]['text':'!','line_number':124,'multiline':False]['text':'!      "Self-Adjusting Binary Search Trees','line_number':125,'multiline':False]['text':'!      by Daniel Dominic Sleator and Robert Endre Tarjan','line_number':126,'multiline':False]['text':'!      AT&T Bell Laboratories, Murray Hill, NJ','line_number':127,'multiline':False]['text':'!      Journal of the ACM, Vol 32, no 3, July 1985, pp 652-686','line_number':128,'multiline':False]['text':'!','line_number':129,'multiline':False]['text':'! splaytree_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':130,'multiline':False]['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':131,'multiline':False]['text':'! following interface:','line_number':132,'multiline':False]['text':'!','line_number':133,'multiline':False]['text':'! <b>Typedefs</b>:','line_number':134,'multiline':False]['text':'!','line_number':135,'multiline':False]['text':'! <tt>node</tt>: The type of the node that forms the binary search tree','line_number':136,'multiline':False]['text':'!','line_number':137,'multiline':False]['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':138,'multiline':False]['text':'!','line_number':139,'multiline':False]['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':140,'multiline':False]['text':'!','line_number':141,'multiline':False]['text':'! <b>Static functions</b>:','line_number':142,'multiline':False]['text':'!','line_number':143,'multiline':False]['text':'! <tt>static node_ptr get_parent(const_node_ptr n);</tt>','line_number':144,'multiline':False]['text':'!','line_number':145,'multiline':False]['text':'! <tt>static void set_parent(node_ptr n, node_ptr parent);</tt>','line_number':146,'multiline':False]['text':'!','line_number':147,'multiline':False]['text':'! <tt>static node_ptr get_left(const_node_ptr n);</tt>','line_number':148,'multiline':False]['text':'!','line_number':149,'multiline':False]['text':'! <tt>static void set_left(node_ptr n, node_ptr left);</tt>','line_number':150,'multiline':False]['text':'!','line_number':151,'multiline':False]['text':'! <tt>static node_ptr get_right(const_node_ptr n);</tt>','line_number':152,'multiline':False]['text':'!','line_number':153,'multiline':False]['text':'! <tt>static void set_right(node_ptr n, node_ptr right);</tt>','line_number':154,'multiline':False]['text':'/ @cond','line_number':161,'multiline':False]['text':'/ @endcond','line_number':164,'multiline':False]['text':'! This type is the information that will be','line_number':172,'multiline':False]['text':'! filled by insert_unique_check','line_number':173,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::get_header(const_node_ptr)','line_number':178,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::begin_node','line_number':181,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::end_node','line_number':184,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_tree','line_number':187,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr)','line_number':190,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr,node_ptr,node_ptr)','line_number':193,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr)','line_number':196,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr,node_ptr)','line_number':199,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink(node_ptr)','line_number':202,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink_leftmost_without_rebalance','line_number':205,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unique(const_node_ptr)','line_number':208,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::size(const_node_ptr)','line_number':211,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::next_node(node_ptr)','line_number':214,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::prev_node(node_ptr)','line_number':217,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init(node_ptr)','line_number':220,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init_header(node_ptr)','line_number':223,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':226,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::erase(node_ptr,node_ptr)','line_number':228,'multiline':False]['text':'! Additional notes: the previous node of z is splayed to speed up range deletions.','line_number':229,'multiline':False]['text':'posibility 1','line_number':232,'multiline':False]['text':'possibility 2','line_number':237,'multiline':False]['text':'if(NodeTraits::get_left(z)){','line_number':238,'multiline':False]['text':'   node_ptr l = NodeTraits::get_left(z);','line_number':239,'multiline':False]['text':'   splay_up(l, header);','line_number':240,'multiline':False]['text':'}','line_number':241,'multiline':False]['text':'if(NodeTraits::get_left(z)){','line_number':243,'multiline':False]['text':'   node_ptr l = bstree_algo::prev_node(z);','line_number':244,'multiline':False]['text':'   splay_up_impl(l, z);','line_number':245,'multiline':False]['text':'}','line_number':246,'multiline':False]['text':'possibility 4','line_number':248,'multiline':False]['text':'splay_up(z, header);','line_number':249,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_unique','line_number':254,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_equal','line_number':269,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clone(const_node_ptr,node_ptr,Cloner,Disposer)','line_number':282,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clear_and_dispose(node_ptr,Disposer)','line_number':287,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':291,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':292,'multiline':False]['text':'! Additional notes: an element with key `key` is splayed.','line_number':293,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':307,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':308,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':314,'multiline':False]['text':'! Additional notes: the first node of the range is splayed.','line_number':315,'multiline':False]['text':'splay_up(y, detail::uncast(header));','line_number':322,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':326,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':327,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':333,'multiline':False]['text':'! Additional notes: the first node of the range is splayed.','line_number':334,'multiline':False]['text':'splay_up(y, detail::uncast(header));','line_number':341,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':345,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':346,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr, const KeyType&,KeyNodePtrCompare)','line_number':352,'multiline':False]['text':'! Additional notes: the found node of the lower bound is splayed.','line_number':353,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr, const KeyType&,KeyNodePtrCompare)','line_number':362,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':363,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':369,'multiline':False]['text':'! Additional notes: the first node of the range is splayed.','line_number':370,'multiline':False]['text':'splay_up(ret.first, detail::uncast(header));','line_number':377,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':381,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':382,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':388,'multiline':False]['text':'! Additional notes: the first node of the range is splayed.','line_number':389,'multiline':False]['text':'splay_up(ret.first, detail::uncast(header));','line_number':396,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':400,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':401,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':407,'multiline':False]['text':'! Additional notes: the first node of the range is splayed.','line_number':408,'multiline':False]['text':'splay_up(ret.first, detail::uncast(header));','line_number':417,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':421,'multiline':False]['text':'! Additional note: no splaying is performed','line_number':422,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_upper_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':429,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':430,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_lower_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':439,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':440,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal(node_ptr,node_ptr,node_ptr,NodePtrCompare)','line_number':449,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':450,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_before(node_ptr,node_ptr,node_ptr)','line_number':459,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':460,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_back(node_ptr,node_ptr)','line_number':469,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':470,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_front(node_ptr,node_ptr)','line_number':477,'multiline':False]['text':'! Additional note: the inserted node is splayed','line_number':478,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':485,'multiline':False]['text':'! Additional note: nodes with the given key are splayed','line_number':486,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':496,'multiline':False]['text':'! Additional note: nodes with the given key are splayed','line_number':497,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_commit(node_ptr,node_ptr,const insert_commit_data&)','line_number':508,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':512,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::rebalance','line_number':515,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::rebalance_subtree','line_number':518,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':521,'multiline':False]['text':' bottom-up splay, use data_ as parent for n    | complexity : logarithmic    | exception : nothrow','line_number':523,'multiline':False]['text':' top-down splay | complexity : logarithmic    | exception : strong, note A','line_number':527,'multiline':False]['text':'/ @cond','line_number':534,'multiline':False]['text':' bottom-up splay, use data_ as parent for n    | complexity : logarithmic    | exception : nothrow','line_number':536,'multiline':False]['text':' If (node == header) do a splay for the right most node instead','line_number':540,'multiline':False]['text':' this is to boost performance of equal_range/count on equivalent containers in the case','line_number':541,'multiline':False]['text':' where there are many equal elements at the end','line_number':542,'multiline':False]['text':' zig','line_number':555,'multiline':False]['text':' zig-zig','line_number':560,'multiline':False]['text':' zig-zag','line_number':565,'multiline':False]['text':'Most splay tree implementations use a dummy/null node to implement.','line_number':577,'multiline':False]['text':'this function. This has some problems for a generic library like Intrusive:','line_number':578,'multiline':False]['text':'','line_number':579,'multiline':False]['text':' * The node might not have a default constructor.','line_number':580,'multiline':False]['text':' * The default constructor could throw.','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'We already have a header node. Leftmost and rightmost nodes of the tree','line_number':583,'multiline':False]['text':'are not changed when splaying (because the invariants of the tree don't','line_number':584,'multiline':False]['text':'change) We can back up them, use the header as the null node and','line_number':585,'multiline':False]['text':'reassign old values after the function has been completed.','line_number':586,'multiline':False]['text':'Empty or unique node','line_number':590,'multiline':False]['text':'Initialize "null node" (the header in our case)','line_number':597,'multiline':False]['text':'Class that will backup leftmost/rightmost from header, commit the assemble(),','line_number':600,'multiline':False]['text':'and will restore leftmost/rightmost to header even if "comp" throws','line_number':601,'multiline':False]['text':'commit.~splaydown_assemble_and_fix_header<NodeTraits>() will first','line_number':653,'multiline':False]['text':'"assemble()" + link the new root & recover header's leftmost & rightmost','line_number':654,'multiline':False]['text':' break link to left child node and attach it to left tree pointed to by l   | complexity : constant | exception : nothrow','line_number':662,'multiline':False]['text':'procedure link_left;','line_number':665,'multiline':False]['text':'    t, l, right(l) := right(t), t, t','line_number':666,'multiline':False]['text':'end link_left','line_number':667,'multiline':False]['text':' break link to right child node and attach it to right tree pointed to by r | complexity : constant | exception : nothrow','line_number':674,'multiline':False]['text':'procedure link_right;','line_number':677,'multiline':False]['text':'    t, r, left(r) := left(t), t, t','line_number':678,'multiline':False]['text':'end link_right;','line_number':679,'multiline':False]['text':' rotate n with its parent                     | complexity : constant    | exception : nothrow','line_number':686,'multiline':False]['text':'procedure rotate_left;','line_number':689,'multiline':False]['text':'    t, right(t), left(right(t)) := right(t), left(right(t)), t','line_number':690,'multiline':False]['text':'end rotate_left;','line_number':691,'multiline':False]['text':'Test if g is header before breaking tree','line_number':694,'multiline':False]['text':'invariants that would make is_header invalid','line_number':695,'multiline':False]['text':' must be ( p->right == n )','line_number':704,'multiline':False]['text':'must be ( g->right == p )','line_number':717,'multiline':False]['text':'must be ( g->right == p )','line_number':725,'multiline':False]['text':'/ @endcond','line_number':730,'multiline':False]['text':'/ @cond','line_number':733,'multiline':False]['text':'/ @endcond','line_number':747,'multiline':False]['text':'namespace intrusive','line_number':749,'multiline':False]['text':'namespace boost','line_number':750,'multiline':False]['text':'BOOST_INTRUSIVE_SPLAYTREE_ALGORITHMS_HPP','line_number':754,'multiline':False]