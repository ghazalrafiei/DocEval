['text':' Copyright 2003-2022 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]['text':' This class implements a serialization rearranger for random access
 * indices. In order to achieve O(n) performance, the following strategy
 * is followed: the nodes of the index are handled as if in a bidirectional
 * list, where the next pointers are stored in the original
 * random_access_index_ptr_array and the prev pointers are stored in
 * an auxiliary array. Rearranging of nodes in such a bidirectional list
 * is constant time. Once all the arrangements are performed (on destruction
 * time) the list is traversed in reverse order and
 * pointers are swapped and set accordingly so that they recover its
 * original semantics ( *(node->up())==node ) while retaining the
 * new order.
 ','line_number':29,'multiline':True]['text':' only incur this penalty if rearrange() is ever called ','line_number':86,'multiline':True]['text':' get space for the auxiliary prev array ','line_number':102,'multiline':True]['text':' prev_spc elements point to the prev nodes ','line_number':106,'multiline':True]['text':' ptrs elements point to the next nodes ','line_number':110,'multiline':True]['text':' namespace multi_index::detail ','line_number':169,'multiline':True]['text':' namespace multi_index ','line_number':171,'multiline':True]['text':' namespace boost ','line_number':173,'multiline':True]