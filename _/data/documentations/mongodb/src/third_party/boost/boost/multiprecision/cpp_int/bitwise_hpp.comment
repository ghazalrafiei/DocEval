['text':'/////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'  Copyright 2012 John Maddock. Distributed under the Boost','line_number':2,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Comparison operators for cpp_int_backend:','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' There are 4 cases:','line_number':62,'multiline':False]['text':' * Both positive.','line_number':63,'multiline':False]['text':' * result negative, o positive.','line_number':64,'multiline':False]['text':' * o negative, result positive.','line_number':65,'multiline':False]['text':' * Both negative.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' When one arg is negative we convert to 2's complement form "on the fly",','line_number':68,'multiline':False]['text':' and then convert back to signed-magnitude form at the end.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' Note however, that if the type is checked, then bitwise ops on negative values','line_number':71,'multiline':False]['text':' are not permitted and an exception will result.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' First figure out how big the result needs to be and set up some data:','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' "o" is negative:','line_number':101,'multiline':False]['text':' Set the overflow into the "extra" limb:','line_number':115,'multiline':False]['text':' "result" is negative:','line_number':124,'multiline':False]['text':' Set the overflow into the "extra" limb:','line_number':138,'multiline':False]['text':' both are negative:','line_number':144,'multiline':False]['text':' Set the overflow into the "extra" limb:','line_number':163,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' See if the result is negative or not:','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' Both arguments are unsigned types, very simple case handled as a special case.','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':' First figure out how big the result needs to be and set up some data:','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':'','line_number':266,'multiline':False]['text':' Again for operands which are single limbs:','line_number':267,'multiline':False]['text':'','line_number':268,'multiline':False]['text':' Increment and negate:','line_number':304,'multiline':False]['text':' shifting zero yields zero.','line_number':332,'multiline':False]['text':' Most significant limb will overflow when shifted','line_number':335,'multiline':False]['text':' shifting zero yields zero.','line_number':364,'multiline':False]['text':' Most significant limb will overflow when shifted','line_number':367,'multiline':False]['text':' The result is shifted past the end of the result:','line_number':375,'multiline':False]['text':' shifting zero yields zero.','line_number':404,'multiline':False]['text':' Most significant limb will overflow when shifted','line_number':407,'multiline':False]['text':' The result is shifted past the end of the result:','line_number':416,'multiline':False]['text':' This code only works when shift is non-zero, otherwise we invoke undefined behaviour!','line_number':422,'multiline':False]['text':'','line_number':514,'multiline':False]['text':' We may have shifted off the end and have leading zeros:','line_number':515,'multiline':False]['text':'','line_number':516,'multiline':False]['text':' This code only works for non-zero shift, otherwise we invoke undefined behaviour!','line_number':591,'multiline':False]['text':'','line_number':695,'multiline':False]['text':' Over again for trivial cpp_int's:','line_number':696,'multiline':False]['text':'','line_number':697,'multiline':False]['text':' Nothing to check here... just make sure we don't invoke undefined behavior:','line_number':711,'multiline':False]['text':'','line_number':726,'multiline':False]['text':' If we're not checked then emulate 2's complement behavior:','line_number':727,'multiline':False]['text':'','line_number':728,'multiline':False]['text':' namespace boost::multiprecision::backends','line_number':883,'multiline':False]