['text':'  Copyright Beman Dawes 2006, 2007','line_number':4,'multiline':False]['text':'  Copyright Christoper Kohlhoff 2007','line_number':5,'multiline':False]['text':'  Copyright Peter Dimov 2017, 2018','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'  See library home page at http://www.boost.org/libs/system','line_number':11,'multiline':False]['text':' namespace system','line_number':21,'multiline':False]['text':' boost::throws()','line_number':23,'multiline':False]['text':'  Misuse of the error_code object is turned into a noisy failure by','line_number':28,'multiline':False]['text':'  poisoning the reference. This particular implementation doesn't','line_number':29,'multiline':False]['text':'  produce warnings or errors from popular compilers, is very efficient','line_number':30,'multiline':False]['text':'  (as determined by inspecting generated code), and does not suffer','line_number':31,'multiline':False]['text':'  from order of initialization problems. In practice, it also seems','line_number':32,'multiline':False]['text':'  cause user function error handling implementation errors to be detected','line_number':33,'multiline':False]['text':'  very early in the development cycle.','line_number':34,'multiline':False]['text':' See github.com/boostorg/system/pull/12 by visigoth for why the return','line_number':38,'multiline':False]['text':' is poisoned with nonzero rather than (0). A test, test_throws_usage(),','line_number':39,'multiline':False]['text':' has been added to error_code_test.cpp, and as visigoth mentioned it','line_number':40,'multiline':False]['text':' fails on clang for release builds with a return of 0 but works fine','line_number':41,'multiline':False]['text':' with (1).','line_number':42,'multiline':False]['text':' Since the undefined behavior sanitizer (-fsanitize=undefined) does not','line_number':43,'multiline':False]['text':' allow a reference to be formed to the unaligned address of (1), we use','line_number':44,'multiline':False]['text':' (8) instead.','line_number':45,'multiline':False]['text':' namespace detail','line_number':50,'multiline':False]['text':' namespace boost','line_number':57,'multiline':False]['text':' #ifndef BOOST_SYSTEM_DETAIL_THROWS_HPP_INCLUDED','line_number':59,'multiline':False]