['text':' Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! @file microsec_time_clock.hpp
  This file contains a high resolution time clock implementation.
','line_number':13,'multiline':True]['text':'! A clock providing microsecond level resolution','line_number':32,'multiline':False]['text':'! A high precision clock that measures the local time
   *  at a resolution up to microseconds and adjusts to the
   *  resolution of the time system.  For example, for the
   *  a library configuration with nano second resolution,
   *  the last 3 places of the fractional seconds will always
   *  be 000 since there are 1000 nano-seconds in a micro second.
   ','line_number':33,'multiline':True]['text':'! Type for the function used to convert time_t to tm','line_number':44,'multiline':False]['text':'! return a local time object for the given zone, based on computer clock','line_number':52,'multiline':False]['text':'JKG -- looks like we could rewrite this against universal_time','line_number':53,'multiline':False]['text':' we'll need to know the utc_offset this machine has','line_number':59,'multiline':False]['text':' in order to get a utc_time_type set to utc','line_number':60,'multiline':False]['text':' use micro clock to get a local time with sub seconds','line_number':63,'multiline':False]['text':' and adjust it to get a true utc time reading with sub seconds','line_number':64,'multiline':False]['text':'! Returns the local time based on computer clock settings','line_number':69,'multiline':False]['text':'! Returns the UTC time based on computer settings','line_number':75,'multiline':False]['text':'gettimeofday does not support TZ adjust on Linux.','line_number':86,'multiline':False]['text':' Some runtime library implementations expect local times as the norm for ctime functions.','line_number':93,'multiline':False]['text':' it will not wrap, since ft is the current time','line_number':101,'multiline':False]['text':' and cannot be before 1970-Jan-01','line_number':102,'multiline':False]['text':' seconds since epoch','line_number':103,'multiline':False]['text':' microseconds -- static casts suppress warnings','line_number':104,'multiline':False]['text':'The following line will adjust the fractional second tick in terms','line_number':116,'multiline':False]['text':'of the current time system.  For example, if the time system','line_number':117,'multiline':False]['text':'doesn't support fractional seconds then res_adjust returns 0','line_number':118,'multiline':False]['text':'and all the fractional seconds return 0.','line_number':119,'multiline':False]['text':'!
     * The function converts file_time into number of microseconds elapsed since 1970-Jan-01
     *
     * \note Only dates after 1970-Jan-01 are supported. Dates before will be wrapped.
     ','line_number':131,'multiline':True]['text':' shift is difference between 1970-Jan-01 & 1601-Jan-01','line_number':138,'multiline':False]['text':' in 100-nanosecond units','line_number':139,'multiline':False]['text':' (27111902 << 32) + 3577643008','line_number':140,'multiline':False]['text':' 100-nanos since 1601-Jan-01','line_number':142,'multiline':False]['text':' filetime is now 100-nanos since 1970-Jan-01','line_number':145,'multiline':False]['text':' truncate to microseconds','line_number':146,'multiline':False]['text':'namespace date_time','line_number':152,'multiline':False]['text':'BOOST_DATE_TIME_HAS_HIGH_PRECISION_CLOCK','line_number':154,'multiline':False]