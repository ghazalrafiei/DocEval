['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   text_file_backend.hpp
 * \author Andrey Semashev
 * \date   09.06.2009
 *
 * The header contains implementation of a text file sink backend.
 ','line_number':7,'multiline':True]['text':'! The enumeration of the stored files scan methods','line_number':62,'multiline':False]['text':'!< Don't scan for stored files','line_number':65,'multiline':False]['text':'!< Scan for files with names matching the specified mask','line_number':66,'multiline':False]['text':'!< Scan for all files in the directory','line_number':67,'multiline':False]['text':'! The structure contains filesystem scanning results','line_number':70,'multiline':False]['text':'! The number of found files','line_number':73,'multiline':False]['text':'! If populated, the largest file counter that was used in the found file names','line_number':75,'multiline':False]['text':'!
 * \brief Base class for file collectors
 *
 * All file collectors, supported by file sink backends, should inherit this class.
 ','line_number':84,'multiline':True]['text':'!
     * Default constructor
     ','line_number':91,'multiline':True]['text':'!
     * Virtual destructor
     ','line_number':96,'multiline':True]['text':'!
     * The function stores the specified file in the storage. May lead to an older file
     * deletion and a long file moving.
     *
     * \param src_path The name of the file to be stored
     ','line_number':105,'multiline':True]['text':'!
     * The function checks if the specified path refers to an existing file in the storage.
     *
     * \param src_path The path to be checked
     ','line_number':113,'multiline':True]['text':'!
     * Scans the target directory for the files that have already been stored. The found
     * files are added to the collector in order to be tracked and erased, if needed.
     *
     * The function may scan the directory in two ways: it will either consider every
     * file in the directory a log file, or will only consider files with names that
     * match the specified pattern. The pattern may contain the following placeholders:
     *
     * \li %y, %Y, %m, %d - date components, in Boost.DateTime meaning.
     * \li %H, %M, %S, %f - time components, in Boost.DateTime meaning.
     * \li %N - numeric file counter. May also contain width specification
     *     in printf-compatible form (e.g. %5N). The resulting number will always be zero-filled.
     * \li %% - a percent sign
     *
     * All other placeholders are not supported.
     *
     * \param method The method of scanning. If \c no_scan is specified, the call has no effect.
     * \param pattern The file name pattern if \a method is \c scan_matching. Otherwise the parameter
     *                is not used.
     * \return The result of filesystem scanning. The last file counter is only populated if
     *         \a method is \c scan_matching, the \a pattern contains %N placeholder, and at least
     *         one file matching the pattern is found.
     *
     * \note In case if \a method is \c scan_matching the effect of this function is highly dependent
     *       on the \a pattern definition. It is recommended to choose patterns with easily
     *       distinguished placeholders (i.e. having delimiters between them). Otherwise
     *       either some files can be mistakenly found or not found, which in turn may lead
     *       to deletion of an unintended file.
     ','line_number':120,'multiline':True]['text':'! Creates and returns a file collector with the specified parameters','line_number':157,'multiline':False]['text':' namespace aux','line_number':174,'multiline':False]['text':'!
 * The function creates a file collector for the specified target directory.
 * Each target directory is managed by a single file collector, so if
 * this function is called several times for the same directory,
 * it will return a reference to the same file collector. It is safe
 * to use the same collector in different sinks, even in a multithreaded
 * application.
 *
 * One can specify certain restrictions for the stored files, such as
 * maximum total size or minimum free space left in the target directory.
 * If any of the specified restrictions is not met, the oldest stored file
 * is deleted. If the same collector is requested more than once with
 * different restrictions, the collector will act according to the most strict
 * combination of all specified restrictions.
 *
 * The following named parameters are supported:
 *
 * \li \c target - Specifies the target directory for the files being stored in. This parameter
 *                 is mandatory.
 * \li \c max_size - Specifies the maximum total size, in bytes, of stored files that the collector
 *                   will try not to exceed. If the size exceeds this threshold the oldest file(s) is
 *                   deleted to free space. Note that the threshold may be exceeded if the size of
 *                   individual files exceed the \c max_size value. The threshold is not maintained,
 *                   if not specified.
 * \li \c min_free_space - Specifies the minimum free space, in bytes, in the target directory that
 *                         the collector tries to maintain. If the threshold is exceeded, the oldest
 *                         file(s) is deleted to free space. The threshold is not maintained, if not
 *                         specified.
 * \li \c max_files - Specifies the maximum number of log files stored.  If the number of files exceeds
 *                    this threshold, the oldest file(s) is deleted to free space.  The threshhold is
 *                    not maintained if not specified.
 *
 * \return The file collector.
 ','line_number':201,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':238,'multiline':False]['text':'!
 * The class represents the time point of log file rotation. One can specify one of three
 * types of time point based rotation:
 *
 * \li rotation takes place every day, at the specified time
 * \li rotation takes place on the specified day of every week, at the specified time
 * \li rotation takes place on the specified day of every month, at the specified time
 *
 * The time points are considered to be local time.
 ','line_number':240,'multiline':True]['text':' contains day_kind values','line_number':264,'multiline':False]['text':'!
     * Creates a rotation time point of every day at the specified time
     *
     * \param hour The rotation hour, should be within 0 and 23
     * \param minute The rotation minute, should be within 0 and 59
     * \param second The rotation second, should be within 0 and 59
     ','line_number':270,'multiline':True]['text':'!
     * Creates a rotation time point of each specified weekday at the specified time
     *
     * \param wday The weekday of the rotation
     * \param hour The rotation hour, should be within 0 and 23
     * \param minute The rotation minute, should be within 0 and 59
     * \param second The rotation second, should be within 0 and 59
     ','line_number':279,'multiline':True]['text':'!
     * Creates a rotation time point of each specified day of month at the specified time
     *
     * \param mday The monthday of the rotation, should be within 1 and 31
     * \param hour The rotation hour, should be within 0 and 23
     * \param minute The rotation minute, should be within 0 and 59
     * \param second The rotation second, should be within 0 and 59
     ','line_number':293,'multiline':True]['text':'!
     * Checks if it's time to rotate the file
     ','line_number':307,'multiline':True]['text':'!
 * The class represents the time interval of log file rotation. The log file will be rotated
 * after the specified time interval has passed.
 ','line_number':313,'multiline':True]['text':'!
     * Creates a rotation time interval of the specified duration
     *
     * \param interval The interval of the rotation, should be no less than 1 second
     ','line_number':327,'multiline':True]['text':'!
     * Checks if it's time to rotate the file
     ','line_number':339,'multiline':True]['text':' namespace file','line_number':345,'multiline':False]['text':'!
 * \brief An implementation of a text file logging sink backend
 *
 * The sink backend puts formatted log records to a text file.
 * The sink supports file rotation and advanced file control, such as
 * size and file count restriction.
 ','line_number':348,'multiline':True]['text':'! Base type','line_number':361,'multiline':False]['text':'! Character type','line_number':368,'multiline':False]['text':'! String type to be used as a message text holder','line_number':370,'multiline':False]['text':'! Stream type','line_number':372,'multiline':False]['text':'! File open handler','line_number':375,'multiline':False]['text':'! File close handler','line_number':377,'multiline':False]['text':'! Predicate that defines the time-based condition for file rotation','line_number':380,'multiline':False]['text':'! \cond','line_number':384,'multiline':False]['text':'! \endcond','line_number':389,'multiline':False]['text':'!
     * Default constructor. The constructed sink backend uses default values of all the parameters.
     ','line_number':392,'multiline':True]['text':'!
     * Constructor. Creates a sink backend with the specified named parameters.
     * The following named parameters are supported:
     *
     * \li \c file_name - Specifies the active file name pattern where logs are actually written to. The pattern may
     *                    contain directory and file name portions, but only the file name may contain
     *                    placeholders. The backend supports Boost.DateTime placeholders for injecting
     *                    current time and date into the file name. Also, an additional %N placeholder is
     *                    supported, it will be replaced with an integral increasing file counter. The placeholder
     *                    may also contain width specification in the printf-compatible form (e.g. %5N). The
     *                    printed file counter will always be zero-filled. If \c file_name is not specified,
     *                    pattern "%5N.log" will be used.
     * \li \c target_file_name - Specifies the target file name pattern to use to rename the log file on rotation,
     *                           before passing it to the file collector. The pattern may contain the same
     *                           placeholders as the \c file_name parameter. By default, no renaming is done,
     *                           i.e. the written log file keeps its name according to \c file_name.
     * \li \c open_mode - File open mode. The mode should be presented in form of mask compatible to
     *                    <tt>std::ios_base::openmode</tt>. If not specified, <tt>trunc | out</tt> will be used.
     * \li \c rotation_size - Specifies the approximate size, in characters written, of the temporary file
     *                        upon which the file is passed to the file collector. Note the size does
     *                        not count any possible character conversions that may take place during
     *                        writing to the file. If not specified, the file won't be rotated upon reaching
     *                        any size.
     * \li \c time_based_rotation - Specifies the predicate for time-based file rotation.
     *                              No time-based file rotations will be performed, if not specified.
     * \li \c enable_final_rotation - Specifies a flag, whether or not perform log file rotation on
     *                                sink backend destruction. By default, is \c true.
     * \li \c auto_flush - Specifies a flag, whether or not to automatically flush the file after each
     *                     written log record. By default, is \c false.
     * \li \c auto_newline_mode - Specifies automatic trailing newline insertion mode. Must be a value of
     *                            the \c auto_newline_mode enum. By default, is <tt>auto_newline_mode::insert_if_missing</tt>.
     *
     * \note Read the caution note regarding file name pattern in the <tt>sinks::file::collector::scan_for_files</tt>
     *       documentation.
     ','line_number':397,'multiline':True]['text':'!
     * Destructor
     ','line_number':439,'multiline':True]['text':'!
     * The method sets the active file name wildcard for the files being written. The wildcard supports
     * date and time injection into the file name.
     *
     * \param pattern The name pattern for the file being written.
     ','line_number':444,'multiline':True]['text':'!
     * The method sets the target file name wildcard for the files being rotated. The wildcard supports
     * date and time injection into the file name.
     *
     * This pattern will be used when the log file is being rotated, to rename the just written
     * log file (which has the name according to the pattern in the \c file_name constructor parameter or
     * set by a call to \c set_file_name_pattern), just before passing the file to the file collector.
     *
     * \param pattern The name pattern for the file being rotated.
     ','line_number':456,'multiline':True]['text':'!
     * The method sets the file open mode
     *
     * \param mode File open mode
     ','line_number':472,'multiline':True]['text':'!
     * The method sets the log file collector function. The function is called
     * on file rotation and is being passed the written file name.
     *
     * \param collector The file collector function object
     ','line_number':479,'multiline':True]['text':'!
     * The method sets file opening handler. The handler will be called every time
     * the backend opens a new temporary file. The handler may write a header to the
     * opened file in order to maintain file validity.
     *
     * \param handler The file open handler function object
     ','line_number':487,'multiline':True]['text':'!
     * The method sets file closing handler. The handler will be called every time
     * the backend closes a temporary file. The handler may write a footer to the
     * opened file in order to maintain file validity.
     *
     * \param handler The file close handler function object
     ','line_number':496,'multiline':True]['text':'!
     * The method sets maximum file size. When the size is reached, file rotation is performed.
     *
     * \note The size does not count any possible character translations that may happen in
     *       the underlying API. This may result in greater actual sizes of the written files.
     *
     * \param size The maximum file size, in characters.
     ','line_number':505,'multiline':True]['text':'!
     * The method sets the predicate that defines the time-based condition for file rotation.
     *
     * \note The rotation always occurs on writing a log record, so the rotation is
     *       not strictly bound to the specified condition.
     *
     * \param predicate The predicate that defines the time-based condition for file rotation.
     *                  If empty, no time-based rotation will take place.
     ','line_number':515,'multiline':True]['text':'!
     * The method allows to enable or disable log file rotation on sink destruction.
     *
     * By default the sink backend will rotate the log file, if it's been written to, on
     * destruction.
     *
     * \param enable The flag indicates whether the final rotation should be performed.
     ','line_number':526,'multiline':True]['text':'!
     * Sets the flag to automatically flush write buffers of the file being written after each log record.
     *
     * \param enable The flag indicates whether the automatic buffer flush should be performed.
     ','line_number':536,'multiline':True]['text':'!
     * Selects whether a trailing newline should be automatically inserted after every log record. See
     * \c auto_newline_mode description for the possible modes of operation.
     *
     * \param mode The trailing newline insertion mode.
     ','line_number':543,'multiline':True]['text':'!
     * \return The name of the currently open log file. If no file is open, returns an empty path.
     ','line_number':551,'multiline':True]['text':'!
     * Performs scanning of the target directory for log files that may have been left from
     * previous runs of the application. The found files are considered by the file collector
     * as if they were rotated.
     *
     * The file scan can be performed in two ways: either all files in the target directory will
     * be considered as log files, or only those files that satisfy the target file name pattern.
     * See documentation on <tt>sinks::file::collector::scan_for_files</tt> for more information.
     *
     * \pre File collector and the proper file name pattern have already been set.
     *
     * \param method File scanning method
     * \param update_counter If \c true and \a method is \c scan_matching, the method attempts
     *        to update the internal file counter according to the found files. The counter
     *        is unaffected otherwise.
     * \return The number of files found.
     *
     * \note The method essentially delegates to the same-named function of the file collector.
     ','line_number':556,'multiline':True]['text':'!
     * The method writes the message to the sink
     ','line_number':578,'multiline':True]['text':'!
     * The method flushes the currently open log file
     ','line_number':583,'multiline':True]['text':'!
     * The method rotates the file
     ','line_number':588,'multiline':True]['text':'! Constructor implementation','line_number':595,'multiline':False]['text':'! Constructor implementation','line_number':609,'multiline':False]['text':'! The method sets file name pattern','line_number':620,'multiline':False]['text':'! The method sets target file name pattern','line_number':622,'multiline':False]['text':'! Closes the currently open file','line_number':625,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':627,'multiline':False]['text':' namespace sinks','line_number':630,'multiline':False]['text':' namespace log','line_number':632,'multiline':False]['text':' namespace boost','line_number':634,'multiline':False]['text':' BOOST_LOG_SINKS_TEXT_FILE_BACKEND_HPP_INCLUDED_','line_number':638,'multiline':False]