['text':'  (C) Copyright John Maddock 2001.','line_number':1,'multiline':False]['text':'  (C) Copyright Jens Maurer 2001.','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'  See http://www.boost.org for most recent version.','line_number':7,'multiline':False]['text':'  config for libstdc++ v3','line_number':9,'multiline':False]['text':'  not much to go in here:','line_number':10,'multiline':False]['text':' GCC 3 on Tru64 forces the definition of _REENTRANT when any std lib header','line_number':29,'multiline':False]['text':' file is included, therefore for consistency we define it here as well.','line_number':30,'multiline':False]['text':' gcc 3.4 and greater:','line_number':34,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' If the std lib has thread support turned on, then turn it on in Boost','line_number':42,'multiline':False]['text':' as well.  We do this because some gcc-3.4 std lib headers define _REENTANT','line_number':43,'multiline':False]['text':' while others do not...','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' disable thread support if the std lib was built single threaded:','line_number':53,'multiline':False]['text':' linux on arm apparently doesn't define _REENTRANT','line_number':58,'multiline':False]['text':' so just turn on threading support whenever the std lib is thread safe:','line_number':59,'multiline':False]['text':' May have been set by compiler/*.hpp, but "long long" without library','line_number':66,'multiline':False]['text':' support is useless.','line_number':67,'multiline':False]['text':' Apple doesn't seem to reliably defined a *unix* macro','line_number':71,'multiline':False]['text':' VxWorks uses Dinkum, not GNU STL with GCC ','line_number':81,'multiline':False]['text':' GCC >= 3.1.0','line_number':82,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' Decide whether we have C++11 support turned on:','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':'','line_number':118,'multiline':False]['text':'  Decide which version of libstdc++ we have, normally','line_number':119,'multiline':False]['text':'  libstdc++ C++0x support is detected via __GNUC__, __GNUC_MINOR__, and possibly','line_number':120,'multiline':False]['text':'  __GNUC_PATCHLEVEL__ at the suggestion of Jonathan Wakely, one of the libstdc++','line_number':121,'multiline':False]['text':'  developers. He also commented:','line_number':122,'multiline':False]['text':'','line_number':123,'multiline':False]['text':'       "I'm not sure how useful __GLIBCXX__ is for your purposes, for instance in','line_number':124,'multiline':False]['text':'       GCC 4.2.4 it is set to 20080519 but in GCC 4.3.0 it is set to 20080305.','line_number':125,'multiline':False]['text':'       Although 4.3.0 was released earlier than 4.2.4, it has better C++0x support','line_number':126,'multiline':False]['text':'       than any release in the 4.2 series."','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':'  Another resource for understanding libstdc++ features is:','line_number':129,'multiline':False]['text':'  http://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#manual.intro.status.standard.200x','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':'  However, using the GCC version number fails when the compiler is clang since this','line_number':132,'multiline':False]['text':'  only ever claims to emulate GCC-4.2, see https://svn.boost.org/trac/boost/ticket/7473','line_number':133,'multiline':False]['text':'  for a long discussion on this issue.  What we can do though is use clang's __has_include','line_number':134,'multiline':False]['text':'  to detect the presence of a C++11 header that was introduced with a specific GCC release.','line_number':135,'multiline':False]['text':'  We still have to be careful though as many such headers were buggy and/or incomplete when','line_number':136,'multiline':False]['text':'  first introduced, so we only check for headers that were fully featured from day 1, and then','line_number':137,'multiline':False]['text':'  use that to infer the underlying GCC version:','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' If BOOST_HAS_FLOAT128 is set, now that we know the std lib is libstdc++3, check to see if the std lib is','line_number':170,'multiline':False]['text':' configured to support this type.  If not disable it:','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' hash_set/hash_map deprecated and have terminal bugs:','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' hash_set/hash_map deprecated and have terminal bugs:','line_number':189,'multiline':False]['text':'','line_number':190,'multiline':False]['text':' libstdc++ does not define this function as it's deprecated in C++11, but clang still looks for it,','line_number':198,'multiline':False]['text':' defining it here is a terrible cludge, but should get things working:','line_number':199,'multiline':False]['text':'','line_number':202,'multiline':False]['text':' clang is unable to parse some GCC headers, add those workarounds here:','line_number':203,'multiline':False]['text':'','line_number':204,'multiline':False]['text':'','line_number':208,'multiline':False]['text':' GCC 4.7.x has no __cxa_thread_atexit which','line_number':209,'multiline':False]['text':' thread_local objects require for cleanup:','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':'','line_number':215,'multiline':False]['text':' Early clang versions can handle <chrono>, not exactly sure which versions','line_number':216,'multiline':False]['text':' but certainly up to clang-3.8 and gcc-4.6:','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':'','line_number':228,'multiline':False]['text':'  GCC 4.8 and 9 add working versions of <atomic> and <regex> respectively.','line_number':229,'multiline':False]['text':'  However, we have no test for these as the headers were present but broken','line_number':230,'multiline':False]['text':'  in early GCC versions.','line_number':231,'multiline':False]['text':'','line_number':232,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' Oracle Solaris compiler uses it's own verison of libstdc++ but doesn't ','line_number':237,'multiline':False]['text':' set __GNUC__','line_number':238,'multiline':False]['text':'','line_number':239,'multiline':False]['text':' std::auto_ptr isn't provided with _GLIBCXX_DEPRECATED=0 (GCC 4.5 and earlier)','line_number':251,'multiline':False]['text':' or _GLIBCXX_USE_DEPRECATED=0 (GCC 4.6 and later).','line_number':252,'multiline':False]['text':'  C++0x headers in GCC 4.3.0 and later','line_number':264,'multiline':False]['text':'','line_number':265,'multiline':False]['text':'  C++0x headers in GCC 4.4.0 and later','line_number':274,'multiline':False]['text':'','line_number':275,'multiline':False]['text':'  C++0x features in GCC 4.5.0 and later','line_number':290,'multiline':False]['text':'','line_number':291,'multiline':False]['text':'  C++0x features in GCC 4.6.0 and later','line_number':298,'multiline':False]['text':'','line_number':299,'multiline':False]['text':'  C++0x features in GCC 4.7.0 and later','line_number':306,'multiline':False]['text':'','line_number':307,'multiline':False]['text':' Note that although <chrono> existed prior to 4.7, "steady_clock" is spelled "monotonic_clock"','line_number':309,'multiline':False]['text':' so 4.7.0 is the first truly conforming one.','line_number':310,'multiline':False]['text':'  C++0x features in GCC 4.8.0 and later','line_number':315,'multiline':False]['text':'','line_number':316,'multiline':False]['text':' Note that although <atomic> existed prior to gcc 4.8 it was largely unimplemented for many types:','line_number':318,'multiline':False]['text':'  C++0x features in GCC 4.9.0 and later','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':' Although <regex> is present and compilable against, the actual implementation is not functional','line_number':325,'multiline':False]['text':' even for the simplest patterns such as "\d" or "[0-9]". This is the case at least in gcc up to 4.8, inclusively.','line_number':326,'multiline':False]['text':'','line_number':333,'multiline':False]['text':'  C++0x features in GCC 5.1 and later','line_number':334,'multiline':False]['text':'','line_number':335,'multiline':False]['text':'','line_number':343,'multiline':False]['text':'  C++17 features in GCC 7.1 and later','line_number':344,'multiline':False]['text':'','line_number':345,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' <execution> has a dependency to Intel's thread building blocks:','line_number':361,'multiline':False]['text':' unless these are installed seperately, including <execution> leads','line_number':362,'multiline':False]['text':' to inscrutable errors inside libstdc++'s own headers.','line_number':363,'multiline':False]['text':'','line_number':364,'multiline':False]['text':'','line_number':375,'multiline':False]['text':' The header may be present but is incomplete:','line_number':376,'multiline':False]['text':'','line_number':377,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' Header <bit> may be present but lacks std::bit_cast:','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':'','line_number':392,'multiline':False]['text':' These next defines are mostly for older clang versions with a newer libstdc++ :','line_number':393,'multiline':False]['text':'','line_number':394,'multiline':False]['text':'','line_number':410,'multiline':False]['text':' Headers not present on Solaris with the Oracle compiler:','line_number':411,'multiline':False]['text':' shared_ptr is present, but is not convertible to bool','line_number':416,'multiline':False]['text':' which causes all kinds of problems especially in Boost.Thread','line_number':417,'multiline':False]['text':' but probably elsewhere as well.','line_number':418,'multiline':False]['text':' Headers not always available:','line_number':423,'multiline':False]['text':' Timed mutexes are not always available:','line_number':439,'multiline':False]['text':'  --- end ---','line_number':443,'multiline':False]