['text':'
 *          Copyright Andrey Semashev 2007 - 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   attachable_sstream_buf.hpp
 * \author Andrey Semashev
 * \date   29.07.2007
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]['text':'! A streambuf that puts the formatted data to an external string','line_number':40,'multiline':False]['text':'! Self type','line_number':49,'multiline':False]['text':'! Base type','line_number':51,'multiline':False]['text':'! Buffer size','line_number':54,'multiline':False]['text':'! Character type','line_number':58,'multiline':False]['text':'! Traits type','line_number':60,'multiline':False]['text':'! String type','line_number':62,'multiline':False]['text':'! Size type','line_number':64,'multiline':False]['text':'! Int type','line_number':66,'multiline':False]['text':'! A reference to the string that will be filled','line_number':71,'multiline':False]['text':'! Max size of the storage, in characters','line_number':73,'multiline':False]['text':'! Indicates that storage overflow happened','line_number':75,'multiline':False]['text':'! Buffer storage state','line_number':84,'multiline':False]['text':'! A buffer used to temporarily store output','line_number':86,'multiline':False]['text':'! Constructor','line_number':90,'multiline':False]['text':'! Constructor','line_number':95,'multiline':False]['text':'! Detaches the buffer from the string','line_number':105,'multiline':False]['text':'! Attaches the buffer to another string','line_number':117,'multiline':False]['text':'! Attaches the buffer to another string','line_number':123,'multiline':False]['text':'! Returns a pointer to the attached string','line_number':131,'multiline':False]['text':'! Returns the maximum size of the storage','line_number':134,'multiline':False]['text':'! Sets the maximum size of the storage','line_number':136,'multiline':False]['text':'! Makes sure the storage does not exceed the max size limit. Should be called after the storage is modified externally.','line_number':148,'multiline':False]['text':'! Returns true if the max size limit has been exceeded','line_number':159,'multiline':False]['text':'! Sets the overflow flag','line_number':161,'multiline':False]['text':'! Returns the size left in the storage','line_number':164,'multiline':False]['text':'! Appends a string to the storage and returns the number of written characters','line_number':173,'multiline':False]['text':' We have to find out where the last character that fits before the limit ends','line_number':189,'multiline':False]['text':'! Appends the specified number of characters to the storage and returns the number of written characters','line_number':199,'multiline':False]['text':'! Appends a character to the storage and returns the number of written characters','line_number':223,'multiline':False]['text':'! Puts all buffered data to the string','line_number':246,'multiline':False]['text':'! Puts an unbuffered character to the string','line_number':258,'multiline':False]['text':'! Puts a character sequence to the string','line_number':270,'multiline':False]['text':'! Finds the string length so that it includes only complete characters, and does not exceed \a max_size','line_number':277,'multiline':False]['text':'! Finds the string length so that it includes only complete characters, and does not exceed \a max_size','line_number':285,'multiline':False]['text':'! Finds the string length so that it includes only complete characters, and does not exceed \a max_size','line_number':294,'multiline':False]['text':' Note: Although it's not required to be true for wchar_t, here we assume that the string has Unicode encoding (UTF-16 or UCS-2).','line_number':297,'multiline':False]['text':' Compilers use some version of Unicode for wchar_t on all tested platforms, and std::locale doesn't offer a way','line_number':298,'multiline':False]['text':' to find the character boundary for character types other than char anyway.','line_number':299,'multiline':False]['text':' Check if this is a leading surrogate','line_number':305,'multiline':False]['text':'! Finds the string length so that it includes only complete characters, and does not exceed \a max_size','line_number':313,'multiline':False]['text':' In UTF-32 and UCS-4 one code point is encoded as one code unit','line_number':316,'multiline':False]['text':'! Copy constructor (closed)','line_number':320,'multiline':False]['text':'! Assignment (closed)','line_number':322,'multiline':False]['text':' namespace aux','line_number':326,'multiline':False]['text':' namespace log','line_number':328,'multiline':False]['text':' namespace boost','line_number':330,'multiline':False]['text':' BOOST_LOG_ATTACHABLE_SSTREAM_BUF_HPP_INCLUDED_','line_number':334,'multiline':False]