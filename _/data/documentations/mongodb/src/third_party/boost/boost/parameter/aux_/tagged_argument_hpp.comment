['text':' Copyright Daniel Wallin, David Abrahams 2005.','line_number':1,'multiline':False]['text':' Copyright Cromwell D. Enage 2017.','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':3,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':' namespace boost::parameter::aux','line_number':15,'multiline':False]['text':' !defined(BOOST_PARAMETER_CAN_USE_MP11)','line_number':57,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':69,'multiline':False]['text':' namespace boost::parameter::aux','line_number':70,'multiline':False]['text':' Holds an lvalue reference to an argument of type Arg associated with','line_number':99,'multiline':False]['text':' keyword Keyword','line_number':100,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':125,'multiline':False]['text':' Wrap plain (non-UDT) function objects in either','line_number':130,'multiline':False]['text':' a boost::function or a std::function. -- Cromwell D. Enage','line_number':131,'multiline':False]['text':' !defined(BOOST_PARAMETER_CAN_USE_MP11)','line_number':138,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':148,'multiline':False]['text':' If Arg is void_, then this type will evaluate to void_&.  If the','line_number':150,'multiline':False]['text':' supplied argument is a plain function, then this type will evaluate','line_number':151,'multiline':False]['text':' to a reference-to-const function wrapper type.  If the supplied','line_number':152,'multiline':False]['text':' argument is an lvalue, then Arg will be deduced to the lvalue','line_number':153,'multiline':False]['text':' reference. -- Cromwell D. Enage','line_number':154,'multiline':False]['text':' Store plain functions by value, everything else by reference.','line_number':170,'multiline':False]['text':' -- Cromwell D. Enage','line_number':171,'multiline':False]['text':' A metafunction class that, given a keyword and a default type,','line_number':197,'multiline':False]['text':' returns the appropriate result type for a keyword lookup given','line_number':198,'multiline':False]['text':' that default.','line_number':199,'multiline':False]['text':' Comma operator to compose argument list without using parameters<>.','line_number':223,'multiline':False]['text':' Useful for argument lists with undetermined length.','line_number':224,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':275,'multiline':False]['text':' Accessor interface.','line_number':277,'multiline':False]['text':' MPL sequence support','line_number':359,'multiline':False]['text':' Convenience for users','line_number':360,'multiline':False]['text':' For the benefit of iterators','line_number':362,'multiline':False]['text':' For dispatching to sequence intrinsics','line_number':364,'multiline':False]['text':' Holds an rvalue reference to an argument of type Arg associated with','line_number':380,'multiline':False]['text':' keyword Keyword','line_number':381,'multiline':False]['text':' A metafunction class that, given a keyword and a default type,','line_number':417,'multiline':False]['text':' returns the appropriate result type for a keyword lookup given','line_number':418,'multiline':False]['text':' that default.','line_number':419,'multiline':False]['text':' Comma operator to compose argument list without using parameters<>.','line_number':443,'multiline':False]['text':' Useful for argument lists with undetermined length.','line_number':444,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':498,'multiline':False]['text':' Accessor interface.','line_number':500,'multiline':False]['text':' MPL sequence support','line_number':582,'multiline':False]['text':' Convenience for users','line_number':583,'multiline':False]['text':' For the benefit of iterators','line_number':586,'multiline':False]['text':' For dispatching to sequence intrinsics','line_number':588,'multiline':False]['text':' namespace boost::parameter::aux','line_number':591,'multiline':False]['text':' !defined(BOOST_PARAMETER_HAS_PERFECT_FORWARDING)','line_number':593,'multiline':False]['text':' Holds an lvalue reference to an argument of type Arg associated with','line_number':597,'multiline':False]['text':' keyword Keyword','line_number':598,'multiline':False]['text':' Wrap plain (non-UDT) function objects in either','line_number':608,'multiline':False]['text':' a boost::function or a std::function. -- Cromwell D. Enage','line_number':609,'multiline':False]['text':' If Arg is void_, then this type will evaluate to void_&.  If the','line_number':620,'multiline':False]['text':' supplied argument is a plain function, then this type will evaluate','line_number':621,'multiline':False]['text':' to a reference-to-const function wrapper type.  If the supplied','line_number':622,'multiline':False]['text':' argument is an lvalue, then Arg will be deduced to the lvalue','line_number':623,'multiline':False]['text':' reference. -- Cromwell D. Enage','line_number':624,'multiline':False]['text':' Store plain functions by value, everything else by reference.','line_number':632,'multiline':False]['text':' -- Cromwell D. Enage','line_number':633,'multiline':False]['text':' A metafunction class that, given a keyword and a default type,','line_number':651,'multiline':False]['text':' returns the appropriate result type for a keyword lookup given','line_number':652,'multiline':False]['text':' that default.','line_number':653,'multiline':False]['text':' Comma operator to compose argument list without using parameters<>.','line_number':667,'multiline':False]['text':' Useful for argument lists with undetermined length.','line_number':668,'multiline':False]['text':' Accessor interface.','line_number':694,'multiline':False]['text':' No function template ordering or Borland workarounds needed.','line_number':776,'multiline':False]['text':' Function template ordering, Borland workarounds needed.','line_number':828,'multiline':False]['text':' MPL sequence support','line_number':830,'multiline':False]['text':' Convenience for users','line_number':831,'multiline':False]['text':' For the benefit of iterators','line_number':833,'multiline':False]['text':' For dispatching to sequence intrinsics','line_number':835,'multiline':False]['text':' warning suppression','line_number':839,'multiline':False]['text':' namespace boost::parameter::aux','line_number':844,'multiline':False]['text':' BOOST_PARAMETER_HAS_PERFECT_FORWARDING','line_number':846,'multiline':False]['text':' namespace boost::parameter::aux','line_number':899,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':901,'multiline':False]['text':' include guard','line_number':902,'multiline':False]