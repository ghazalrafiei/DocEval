['text':' (C) Copyright David Abrahams 2001, Howard Hinnant 2001.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':3,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Template class numeric_traits<Number> --','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    Supplies:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'      typedef difference_type -- a type used to represent the difference','line_number':11,'multiline':False]['text':'      between any two values of Number.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':'    Support:','line_number':14,'multiline':False]['text':'      1. Not all specializations are supplied','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':'      2. Use of specializations that are not supplied will cause a','line_number':17,'multiline':False]['text':'      compile-time error','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':'      3. Users are free to specialize numeric_traits for any type.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':'      4. Right now, specializations are only supplied for integer types.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':'      5. On implementations which do not supply compile-time constants in','line_number':24,'multiline':False]['text':'      std::numeric_limits<>, only specializations for built-in integer types','line_number':25,'multiline':False]['text':'      are supplied.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'      6. Handling of numbers whose range of representation is at least as','line_number':28,'multiline':False]['text':'      great as boost::intmax_t can cause some differences to be','line_number':29,'multiline':False]['text':'      unrepresentable in difference_type:','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':'        Number    difference_type','line_number':32,'multiline':False]['text':'        ------    ---------------','line_number':33,'multiline':False]['text':'        signed    Number','line_number':34,'multiline':False]['text':'        unsigned  intmax_t','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' template <class Number> typename numeric_traits<Number>::difference_type','line_number':37,'multiline':False]['text':' numeric_distance(Number x, Number y)','line_number':38,'multiline':False]['text':'    computes (y - x), attempting to avoid overflows.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' See http://www.boost.org for most recent version including documentation.','line_number':42,'multiline':False]['text':' Revision History','line_number':44,'multiline':False]['text':' 11 Feb 2001 - Use BOOST_STATIC_CONSTANT (David Abrahams)','line_number':45,'multiline':False]['text':' 11 Feb 2001 - Rolled back ineffective Borland-specific code','line_number':46,'multiline':False]['text':'               (David Abrahams)','line_number':47,'multiline':False]['text':' 10 Feb 2001 - Rolled in supposed Borland fixes from John Maddock, but','line_number':48,'multiline':False]['text':'               not seeing any improvement yet (David Abrahams)','line_number':49,'multiline':False]['text':' 06 Feb 2001 - Factored if_true out into boost/detail/select_type.hpp','line_number':50,'multiline':False]['text':'               (David Abrahams)','line_number':51,'multiline':False]['text':' 23 Jan 2001 - Fixed logic of difference_type selection, which was','line_number':52,'multiline':False]['text':'               completely wack. In the process, added digit_traits<>','line_number':53,'multiline':False]['text':'               to compute the number of digits in intmax_t even when','line_number':54,'multiline':False]['text':'               not supplied by numeric_limits<>. (David Abrahams)','line_number':55,'multiline':False]['text':' 21 Jan 2001 - Created (David Abrahams)','line_number':56,'multiline':False]['text':' digit_traits - compute the number of digits in a built-in integer','line_number':75,'multiline':False]['text':' type. Needed for implementations on which numeric_limits is not specialized','line_number':76,'multiline':False]['text':' for some integer types, like __int128 in libstdc++ (gcc).','line_number':77,'multiline':False]['text':' numeric_limits is not specialized; compute digits from sizeof(T)','line_number':84,'multiline':False]['text':' Template class integer_traits<Integer> -- traits of various integer types','line_number':95,'multiline':False]['text':' This should probably be rolled into boost::integer_traits one day, but I','line_number':96,'multiline':False]['text':' need it to work without <limits>','line_number':97,'multiline':False]['text':' digits is the number of no-sign bits','line_number':109,'multiline':False]['text':' Right now, only supports integers, but should be expanded.','line_number':145,'multiline':False]['text':' BOOST_NUMERIC_TRAITS_HPP_DWA20001901','line_number':160,'multiline':False]