['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2007-2014','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'#ifndef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':45,'multiline':False]['text':'!This option setter specifies if the intrusive','line_number':47,'multiline':False]['text':'!container stores its size as a member to','line_number':48,'multiline':False]['text':'!obtain constant-time size() member.','line_number':49,'multiline':False]['text':'!This option setter specifies a container header holder type','line_number':52,'multiline':False]['text':'!This option setter specifies the type that','line_number':55,'multiline':False]['text':'!the container will use to store its size.','line_number':56,'multiline':False]['text':'!This option setter specifies the strict weak ordering','line_number':59,'multiline':False]['text':'!comparison functor for the value type','line_number':60,'multiline':False]['text':'!This option setter specifies a function object','line_number':63,'multiline':False]['text':'!that specifies the type of the key of an associative','line_number':64,'multiline':False]['text':'!container and an operator to obtain it from a value type.','line_number':65,'multiline':False]['text':'!','line_number':66,'multiline':False]['text':'!This function object must the define a `type` member typedef and','line_number':67,'multiline':False]['text':'!a member with signature `type [const&] operator()(const value_type &) const`','line_number':68,'multiline':False]['text':'!that will return the key from a value_type of an associative container','line_number':69,'multiline':False]['text':'!This option setter specifies a function object','line_number':72,'multiline':False]['text':'!that specifies the type of the priority of a treap','line_number':73,'multiline':False]['text':'!container and an operator to obtain it from a value type.','line_number':74,'multiline':False]['text':'!','line_number':75,'multiline':False]['text':'!This function object must the define a `type` member typedef and','line_number':76,'multiline':False]['text':'!a member with signature `type [const&] operator()(const value_type &) const`','line_number':77,'multiline':False]['text':'!that will return the priority from a value_type of a treap container','line_number':78,'multiline':False]['text':'!This option setter for scapegoat containers specifies if','line_number':81,'multiline':False]['text':'!the intrusive scapegoat container should use a non-variable','line_number':82,'multiline':False]['text':'!alpha value that does not need floating-point operations.','line_number':83,'multiline':False]['text':'!','line_number':84,'multiline':False]['text':'!If activated, the fixed alpha value is 1/sqrt(2). This','line_number':85,'multiline':False]['text':'!option also saves some space in the container since','line_number':86,'multiline':False]['text':'!the alpha value and some additional data does not need','line_number':87,'multiline':False]['text':'!to be stored in the container.','line_number':88,'multiline':False]['text':'!','line_number':89,'multiline':False]['text':'!If the user only needs an alpha value near 1/sqrt(2), this','line_number':90,'multiline':False]['text':'!option also improves performance since avoids logarithm','line_number':91,'multiline':False]['text':'!and division operations when rebalancing the tree.','line_number':92,'multiline':False]['text':'!This option setter specifies the equality','line_number':95,'multiline':False]['text':'!functor for the value type','line_number':96,'multiline':False]['text':'!This option setter specifies the priority comparison','line_number':99,'multiline':False]['text':'!functor for the value type','line_number':100,'multiline':False]['text':'!This option setter specifies the hash','line_number':103,'multiline':False]['text':'!functor for the value type','line_number':104,'multiline':False]['text':'!This option setter specifies the relationship between the type','line_number':107,'multiline':False]['text':'!to be managed by the container (the value type) and the node to be','line_number':108,'multiline':False]['text':'!used in the node algorithms. It also specifies the linking policy.','line_number':109,'multiline':False]['text':'#define BOOST_INTRUSIVE_COMMA ,','line_number':112,'multiline':False]['text':'#define BOOST_INTRUSIVE_LESS <','line_number':113,'multiline':False]['text':'#define BOOST_INTRUSIVE_MORE >','line_number':114,'multiline':False]['text':'BOOST_INTRUSIVE_OPTION_TYPE (member_hook, Parent BOOST_INTRUSIVE_COMMA class MemberHook BOOST_INTRUSIVE_COMMA MemberHook Parent::* PtrToMember , mhtraits BOOST_INTRUSIVE_LESS Parent BOOST_INTRUSIVE_COMMA MemberHook BOOST_INTRUSIVE_COMMA PtrToMember BOOST_INTRUSIVE_MORE , proto_value_traits)','line_number':115,'multiline':False]['text':'template< class Parent , class MemberHook , MemberHook Parent::* PtrToMember>','line_number':116,'multiline':False]['text':'struct member_hook {','line_number':117,'multiline':False]['text':'   template<class Base> struct pack : Base {','line_number':118,'multiline':False]['text':'      typedef mhtraits < Parent , MemberHook , PtrToMember > proto_value_traits;','line_number':119,'multiline':False]['text':'   };','line_number':120,'multiline':False]['text':'};','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':'#undef BOOST_INTRUSIVE_COMMA','line_number':123,'multiline':False]['text':'#undef BOOST_INTRUSIVE_LESS','line_number':124,'multiline':False]['text':'#undef BOOST_INTRUSIVE_MORE','line_number':125,'multiline':False]['text':'!This option setter specifies the member hook the','line_number':127,'multiline':False]['text':'!container must use.','line_number':128,'multiline':False]['text':' @cond','line_number':134,'multiline':False]['text':'   typedef typename MemberHook::hooktags::node_traits node_traits;','line_number':135,'multiline':False]['text':'   typedef typename node_traits::node node_type;','line_number':136,'multiline':False]['text':'   typedef node_type Parent::* Ptr2MemNode;','line_number':137,'multiline':False]['text':'   typedef mhtraits','line_number':138,'multiline':False]['text':'      < Parent','line_number':139,'multiline':False]['text':'      , node_traits','line_number':140,'multiline':False]['text':'      //This cast is really ugly but necessary to reduce template bloat.','line_number':141,'multiline':False]['text':'      //Since we control the layout between the hook and the node, and there is','line_number':142,'multiline':False]['text':'      //always single inheritance, the offset of the node is exactly the offset of','line_number':143,'multiline':False]['text':'      //the hook. Since the node type is shared between all member hooks, this saves','line_number':144,'multiline':False]['text':'      //quite a lot of symbol stuff.','line_number':145,'multiline':False]['text':'      , (Ptr2MemNode)PtrToMember','line_number':146,'multiline':False]['text':'      , MemberHook::hooktags::link_mode> member_value_traits;','line_number':147,'multiline':False]['text':'/ @endcond','line_number':154,'multiline':False]['text':'!This option setter specifies the function object that will','line_number':157,'multiline':False]['text':'!be used to convert between values to be inserted in a container','line_number':158,'multiline':False]['text':'!and the hook to be used for that purpose.','line_number':159,'multiline':False]['text':'!This option setter specifies that the container','line_number':162,'multiline':False]['text':'!must use the specified base hook','line_number':163,'multiline':False]['text':'!This option setter specifies the type of','line_number':166,'multiline':False]['text':'!a void pointer. This will instruct the hook','line_number':167,'multiline':False]['text':'!to use this type of pointer instead of the','line_number':168,'multiline':False]['text':'!default one','line_number':169,'multiline':False]['text':'!This option setter specifies the type of','line_number':172,'multiline':False]['text':'!the tag of a base hook. A type cannot have two','line_number':173,'multiline':False]['text':'!base hooks of the same type, so a tag can be used','line_number':174,'multiline':False]['text':'!to differentiate two base hooks with otherwise same type','line_number':175,'multiline':False]['text':'!This option setter specifies the link mode','line_number':178,'multiline':False]['text':'!(normal_link, safe_link or auto_unlink)','line_number':179,'multiline':False]['text':'!This option setter specifies if the hook','line_number':182,'multiline':False]['text':'!should be optimized for size instead of for speed.','line_number':183,'multiline':False]['text':'!This option setter specifies if the slist container should','line_number':186,'multiline':False]['text':'!use a linear implementation instead of a circular one.','line_number':187,'multiline':False]['text':'!If true, slist also stores a pointer to the last element of the singly linked list.','line_number':190,'multiline':False]['text':'!This allows O(1) swap and splice_after(iterator, slist &) for circular slists and makes','line_number':191,'multiline':False]['text':'!possible new functions like push_back(reference) and back().','line_number':192,'multiline':False]['text':'!This option setter specifies the bucket traits','line_number':195,'multiline':False]['text':'!class for unordered associative containers. When this option is specified,','line_number':196,'multiline':False]['text':'!instead of using the default bucket traits, a user defined holder will be defined','line_number':197,'multiline':False]['text':'!This option setter specifies if the unordered hook','line_number':200,'multiline':False]['text':'!should offer room to store the hash value.','line_number':201,'multiline':False]['text':'!Storing the hash in the hook will speed up rehashing','line_number':202,'multiline':False]['text':'!processes in applications where rehashing is frequent,','line_number':203,'multiline':False]['text':'!rehashing might throw or the value is heavy to hash.','line_number':204,'multiline':False]['text':'!This option setter specifies if the unordered hook','line_number':207,'multiline':False]['text':'!should offer room to store another link to another node','line_number':208,'multiline':False]['text':'!with the same key.','line_number':209,'multiline':False]['text':'!Storing this link will speed up lookups and insertions on','line_number':210,'multiline':False]['text':'!unordered_multiset containers with a great number of elements','line_number':211,'multiline':False]['text':'!with the same key.','line_number':212,'multiline':False]['text':'!This option setter specifies if the bucket array will be always power of two.','line_number':215,'multiline':False]['text':'!This allows using masks instead of the default modulo operation to determine','line_number':216,'multiline':False]['text':'!the bucket number from the hash value, leading to better performance.','line_number':217,'multiline':False]['text':'!In debug mode, if power of two buckets mode is activated, the bucket length','line_number':218,'multiline':False]['text':'!will be checked with assertions.','line_number':219,'multiline':False]['text':'!This option setter specifies if the container will cache a pointer to the first','line_number':222,'multiline':False]['text':'!non-empty bucket so that begin() is always constant-time.','line_number':223,'multiline':False]['text':'!This is specially helpful when we can have containers with a few elements','line_number':224,'multiline':False]['text':'!but with big bucket arrays (that is, hashtables with low load factors).','line_number':225,'multiline':False]['text':'!This option setter specifies if the container will compare the hash value','line_number':228,'multiline':False]['text':'!before comparing objects. This option can't be specified if store_hash<>','line_number':229,'multiline':False]['text':'!is not true.','line_number':230,'multiline':False]['text':'!This is specially helpful when we have containers with a high load factor.','line_number':231,'multiline':False]['text':'!and the comparison function is much more expensive that comparing already','line_number':232,'multiline':False]['text':'!stored hash values.','line_number':233,'multiline':False]['text':'!This option setter specifies if the hash container will use incremental','line_number':236,'multiline':False]['text':'!hashing. With incremental hashing the cost of hash table expansion is spread','line_number':237,'multiline':False]['text':'!out across each hash table insertion operation, as opposed to be incurred all at once.','line_number':238,'multiline':False]['text':'!Therefore linear hashing is well suited for interactive applications or real-time','line_number':239,'multiline':False]['text':'!appplications where the worst-case insertion time of non-incremental hash containers','line_number':240,'multiline':False]['text':'!(rehashing the whole bucket array) is not admisible.','line_number':241,'multiline':False]['text':'/ @cond','line_number':244,'multiline':False]['text':'/ @endcond','line_number':257,'multiline':False]['text':'namespace intrusive {','line_number':259,'multiline':False]['text':'namespace boost {','line_number':260,'multiline':False]['text':'#ifndef BOOST_INTRUSIVE_OPTIONS_HPP','line_number':264,'multiline':False]