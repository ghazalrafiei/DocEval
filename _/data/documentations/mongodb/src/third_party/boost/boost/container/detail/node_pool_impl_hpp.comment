['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'Non-copyable','line_number':47,'multiline':False]['text':'A node object will hold node_t when it's not allocated','line_number':52,'multiline':False]['text':'!Segment manager typedef','line_number':72,'multiline':False]['text':'!Constructor from a segment manager. Never throws','line_number':75,'multiline':False]['text':'General purpose allocator','line_number':79,'multiline':False]['text':'Debug node count','line_number':83,'multiline':False]['text':'!Destructor. Deallocates all allocated blocks. Never throws','line_number':87,'multiline':False]['text':'!Returns the segment manager. Never throws','line_number':94,'multiline':False]['text':'!Deallocates an array pointed by ptr. Never throws','line_number':101,'multiline':False]['text':'!Allocates a singly linked list of n nodes ending in null pointer.','line_number':105,'multiline':False]['text':'Preallocate all needed blocks to fulfill the request','line_number':108,'multiline':False]['text':'We just iterate the needed nodes to get the last we'll erase','line_number':114,'multiline':False]['text':'Cache the first node of the allocated range before erasing','line_number':121,'multiline':False]['text':'Erase the range. Since we already have the distance, this is O(1)','line_number':125,'multiline':False]['text':'Now take the last erased node and just splice it in the end','line_number':130,'multiline':False]['text':'of the intrusive list that will be traversed by the multialloc iterator.','line_number':131,'multiline':False]['text':'!Deallocates all the free blocks of memory. Never throws','line_number':147,'multiline':False]['text':'Execute the algorithm and get an iterator to the last value','line_number':157,'multiline':False]['text':'Collect all the nodes from the block pointed by it','line_number':162,'multiline':False]['text':'and push them in the list','line_number':163,'multiline':False]['text':'If the number of nodes is equal to m_nodes_per_block','line_number':171,'multiline':False]['text':'this means that the block can be deallocated','line_number':172,'multiline':False]['text':'Unlink the nodes','line_number':174,'multiline':False]['text':'Otherwise, insert them in the backup list, since the','line_number':179,'multiline':False]['text':'next "remove_if" does not need to check them again.','line_number':180,'multiline':False]['text':'Assign the iterator to the last value if necessary','line_number':182,'multiline':False]['text':'Transfer nodes. This is constant time.','line_number':186,'multiline':False]['text':'We should have removed all the nodes from the free list','line_number':197,'multiline':False]['text':'Now pass all the node to the free list again','line_number':200,'multiline':False]['text':'!Deallocates all used memory. Precondition: all nodes allocated from this pool should','line_number':212,'multiline':False]['text':'!already be deallocated. Otherwise, undefined behaviour. Never throws','line_number':213,'multiline':False]['text':'check for memory leaks','line_number':216,'multiline':False]['text':'We iterate though the NodeBlock list to free the memory','line_number':221,'multiline':False]['text':'Just clear free node list','line_number':227,'multiline':False]['text':'Cache last element','line_number':252,'multiline':False]['text':'!Allocates one node, using single segregated storage algorithm.','line_number':281,'multiline':False]['text':'!Never throws','line_number':282,'multiline':False]['text':'If there are no free nodes we allocate a new block','line_number':285,'multiline':False]['text':'We take the first free node','line_number':288,'multiline':False]['text':'!Deallocates one node, using single segregated storage algorithm.','line_number':295,'multiline':False]['text':'!Never throws','line_number':296,'multiline':False]['text':'We put the node at the beginning of the free node list','line_number':299,'multiline':False]['text':'!Allocates several blocks of nodes. Can throw','line_number':306,'multiline':False]['text':'We allocate a new NodeBlock and put it as first','line_number':315,'multiline':False]['text':'element in the free Node list','line_number':316,'multiline':False]['text':'We initialize all Nodes in Node Block to insert','line_number':322,'multiline':False]['text':'them in the free Node list','line_number':323,'multiline':False]['text':'to-do: if possible, an efficient way to deallocate allocated blocks','line_number':330,'multiline':False]['text':'!Deprecated, use deallocate_free_blocks','line_number':336,'multiline':False]['text':'!Deprecated, use purge_blocks','line_number':340,'multiline':False]['text':'!Returns a reference to the block hook placed in the end of the block','line_number':345,'multiline':False]['text':'!Returns the starting address of the block reference to the block hook placed in the end of the block','line_number':351,'multiline':False]['text':'Segment manager','line_number':363,'multiline':False]['text':'Intrusive container of blocks','line_number':364,'multiline':False]['text':'Intrusive container of free nods','line_number':365,'multiline':False]['text':'Used nodes for debugging','line_number':366,'multiline':False]['text':'namespace dtl {','line_number':370,'multiline':False]['text':'namespace container {','line_number':371,'multiline':False]['text':'namespace boost {','line_number':372,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DETAIL_ADAPTIVE_NODE_POOL_IMPL_HPP','line_number':376,'multiline':False]