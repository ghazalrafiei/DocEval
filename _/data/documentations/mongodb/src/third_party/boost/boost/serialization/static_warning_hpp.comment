['text':'  (C) Copyright Robert Ramey 2003. Jonathan Turkanis 2004.','line_number':4,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':5,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':7,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':12,'multiline':False]['text':'  See http://www.boost.org/libs/static_assert for documentation.','line_number':14,'multiline':False]['text':'
 Revision history:
   15 June  2003 - Initial version.
   31 March 2004 - improved diagnostic messages and portability
                   (Jonathan Turkanis)
   03 April 2004 - works on VC6 at class and namespace scope
                 - ported to DigitalMars
                 - static warnings disabled by default; when enabled,
                   uses pragmas to enable required compiler warnings
                   on MSVC, Intel, Metrowerks and Borland 5.x.
                   (Jonathan Turkanis)
   30 May 2004   - tweaked for msvc 7.1 and gcc 3.3
                 - static warnings ENabled by default; when enabled,
                   (Robert Ramey)
','line_number':16,'multiline':True]['text':'','line_number':34,'multiline':False]['text':' Implementation','line_number':35,'multiline':False]['text':' Makes use of the following warnings:','line_number':36,'multiline':False]['text':'  1. GCC prior to 3.3: division by zero.','line_number':37,'multiline':False]['text':'  2. BCC 6.0 preview: unreferenced local variable.','line_number':38,'multiline':False]['text':'  3. DigitalMars: returning address of local automatic variable.','line_number':39,'multiline':False]['text':'  4. VC6: class previously seen as struct (as in 'boost/mpl/print.hpp')','line_number':40,'multiline':False]['text':'  5. All others: deletion of pointer to incomplete type.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' The trick is to find code which produces warnings containing the name of','line_number':43,'multiline':False]['text':' a structure or variable. Details, with same numbering as above:','line_number':44,'multiline':False]['text':' 1. static_warning_impl<B>::value is zero iff B is false, so diving an int','line_number':45,'multiline':False]['text':'    by this value generates a warning iff B is false.','line_number':46,'multiline':False]['text':' 2. static_warning_impl<B>::type has a constructor iff B is true, so an','line_number':47,'multiline':False]['text':'    unreferenced variable of this type generates a warning iff B is false.','line_number':48,'multiline':False]['text':' 3. static_warning_impl<B>::type overloads operator& to return a dynamically','line_number':49,'multiline':False]['text':'    allocated int pointer only is B is true, so  returning the address of an','line_number':50,'multiline':False]['text':'    automatic variable of this type generates a warning iff B is fasle.','line_number':51,'multiline':False]['text':' 4. static_warning_impl<B>::STATIC_WARNING is decalred as a struct iff B is','line_number':52,'multiline':False]['text':'    false.','line_number':53,'multiline':False]['text':' 5. static_warning_impl<B>::type is incomplete iff B is false, so deleting a','line_number':54,'multiline':False]['text':'    pointer to this type generates a warning iff B is false.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':'------------------Enable selected warnings----------------------------------//','line_number':58,'multiline':False]['text':' Enable the warnings relied on by BOOST_STATIC_WARNING, where possible.','line_number':60,'multiline':False]['text':' 6. replaced implementation with one which depends solely on','line_number':62,'multiline':False]['text':'    mpl::print<>.  The previous one was found to fail for functions','line_number':63,'multiline':False]['text':'    under recent versions of gcc and intel compilers - Robert Ramey','line_number':64,'multiline':False]['text':' serialization','line_number':94,'multiline':False]['text':' boost','line_number':95,'multiline':False]['text':' BOOST_SERIALIZATION_STATIC_WARNING_HPP','line_number':103,'multiline':False]