['text':'  Copyright John Maddock 2005-2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' LDBL_MANT_DIG','line_number':20,'multiline':False]['text':' If T is not specialized, the functions digits, max_value and min_value,','line_number':26,'multiline':False]['text':' all get synthesised automatically from std::numeric_limits.','line_number':27,'multiline':False]['text':' However, if numeric_limits is not specialised for type RealType,','line_number':28,'multiline':False]['text':' for example with NTL::RR type, then you will get a compiler error','line_number':29,'multiline':False]['text':' when code tries to use these functions, unless you explicitly specialise them.','line_number':30,'multiline':False]['text':' For example if the precision of RealType varies at runtime,','line_number':32,'multiline':False]['text':' then numeric_limits support may not be appropriate,','line_number':33,'multiline':False]['text':' see boost/math/tools/ntl.hpp  for examples like','line_number':34,'multiline':False]['text':' template <> NTL::RR max_value<NTL::RR> ...','line_number':35,'multiline':False]['text':' See  Conceptual Requirements for Real Number Types.','line_number':36,'multiline':False]['text':' Also used as a finite 'infinite' value for - and +infinity, for example:','line_number':54,'multiline':False]['text':' -max_value<double> = -1.79769e+308, max_value<double> = 1.79769e+308.','line_number':55,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Logarithmic limits come next, note that although','line_number':67,'multiline':False]['text':' we can compute these from the log of the max value','line_number':68,'multiline':False]['text':' that is not in general thread safe (if we cache the value)','line_number':69,'multiline':False]['text':' so it's better to specialise these:','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' For type float first:','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Now double:','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':'','line_number':99,'multiline':False]['text':' 80 and 128-bit long doubles:','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' numeric_limits on Darwin (and elsewhere) tells lies here:','line_number':150,'multiline':False]['text':' the issue is that long double on a few platforms is','line_number':151,'multiline':False]['text':' really a "double double" which has a non-contiguous','line_number':152,'multiline':False]['text':' mantissa: 53 bits followed by an unspecified number of','line_number':153,'multiline':False]['text':' zero bits, followed by 53 more bits.  Thus the apparent','line_number':154,'multiline':False]['text':' precision of the type varies depending where it's been.','line_number':155,'multiline':False]['text':' Set epsilon to the value that a 106 bit fixed mantissa','line_number':156,'multiline':False]['text':' type would have, as that will give us sensible behaviour everywhere.','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':' This static assert fails for some unknown reason, so','line_number':159,'multiline':False]['text':' disabled for now...','line_number':160,'multiline':False]['text':' static_assert(std::numeric_limits<long double>::digits == 106);','line_number':161,'multiline':False]['text':' Note: don't cache result as precision may vary at runtime:','line_number':169,'multiline':False]['text':' for ADL of std names','line_number':170,'multiline':False]['text':' namespace detail','line_number':195,'multiline':False]['text':' namespace tools','line_number':390,'multiline':False]['text':' namespace math','line_number':391,'multiline':False]['text':' namespace boost','line_number':392,'multiline':False]['text':' BOOST_MATH_TOOLS_PRECISION_INCLUDED','line_number':394,'multiline':False]