['text':'
 *
 * Copyright (c) 2004
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         w32_regex_traits.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares regular expression traits class w32_regex_traits.
  ','line_number':12,'multiline':True]['text':'','line_number':45,'multiline':False]['text':' windows.h not included, so lets forward declare what we need:','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' This must be in the global namespace:','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' forward declaration is needed by some compilers:','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' start by typedeffing the types we'll need:','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' placeholder for LCID.','line_number':82,'multiline':False]['text':' placeholder for dll HANDLE.','line_number':83,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' then add wrappers around the actual Win32 API's (ie implementation hiding):','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':'','line_number':120,'multiline':False]['text':' Forward declarations of the small number of windows types and API's we use:','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' upper case','line_number':133,'multiline':False]['text':' lower case','line_number':134,'multiline':False]['text':' decimal digits','line_number':135,'multiline':False]['text':' spacing characters','line_number':136,'multiline':False]['text':' punctuation characters','line_number':137,'multiline':False]['text':' control characters','line_number':138,'multiline':False]['text':' blank characters','line_number':139,'multiline':False]['text':' other digits','line_number':140,'multiline':False]['text':' any linguistic character','line_number':141,'multiline':False]['text':' defined character','line_number':142,'multiline':False]['text':' WC sort key (normalize)','line_number':146,'multiline':False]['text':' Note this doesn't match the desktop definition','line_number':152,'multiline':False]['text':' On architectures other than 32-bit x86 __stdcall is ignored. Clang also issues a warning.','line_number':161,'multiline':False]['text':'','line_number':195,'multiline':False]['text':' We have windows.h already included:','line_number':196,'multiline':False]['text':'','line_number':197,'multiline':False]['text':' upper case','line_number':203,'multiline':False]['text':' lower case','line_number':204,'multiline':False]['text':' decimal digits','line_number':205,'multiline':False]['text':' spacing characters','line_number':206,'multiline':False]['text':' punctuation characters','line_number':207,'multiline':False]['text':' control characters','line_number':208,'multiline':False]['text':' blank characters','line_number':209,'multiline':False]['text':' other digits','line_number':210,'multiline':False]['text':' any linguistic character','line_number':211,'multiline':False]['text':' defined character','line_number':212,'multiline':False]['text':' WC sort key (normalize)','line_number':216,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' class w32_regex_traits_base:','line_number':238,'multiline':False]['text':' acts as a container for locale and the facets we are using.','line_number':239,'multiline':False]['text':'','line_number':240,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' class w32_regex_traits_char_layer:','line_number':260,'multiline':False]['text':' implements methods that require specialisation for narrow characters:','line_number':261,'multiline':False]['text':'','line_number':262,'multiline':False]['text':' TODO: use a hash table when available!','line_number':299,'multiline':False]['text':' we need to start by initialising our syntax map so we know which','line_number':307,'multiline':False]['text':' character is used for which purpose:','line_number':308,'multiline':False]['text':'','line_number':321,'multiline':False]['text':' if we have a valid catalog then load our messages:','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' specialised version for narrow characters:','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':'','line_number':402,'multiline':False]['text':' class w32_regex_traits_implementation:','line_number':403,'multiline':False]['text':' provides pimpl implementation for w32_regex_traits.','line_number':404,'multiline':False]['text':'','line_number':405,'multiline':False]['text':' must be C1_DEFINED << 1','line_number':411,'multiline':False]['text':' must be C1_DEFINED << 2','line_number':412,'multiline':False]['text':' must be C1_DEFINED << 3','line_number':413,'multiline':False]['text':' must be C1_DEFINED << 4','line_number':414,'multiline':False]['text':' all the masks used by the CT_CTYPE1 group','line_number':415,'multiline':False]['text':' error messages indexed by numberic ID','line_number':449,'multiline':False]['text':' character class names','line_number':450,'multiline':False]['text':' collating element names','line_number':451,'multiline':False]['text':' the form of the collation string','line_number':452,'multiline':False]['text':' the collation group delimiter','line_number':453,'multiline':False]['text':'','line_number':454,'multiline':False]['text':' helpers:','line_number':455,'multiline':False]['text':'','line_number':456,'multiline':False]['text':'','line_number':465,'multiline':False]['text':' What we do here depends upon the format of the sort key returned by','line_number':466,'multiline':False]['text':' sort key returned by this->transform:','line_number':467,'multiline':False]['text':'','line_number':468,'multiline':False]['text':' the best we can do is translate to lower case, then get a regular sort key:','line_number':473,'multiline':False]['text':' get a regular sort key, and then truncate it:','line_number':484,'multiline':False]['text':' get a regular sort key, and then truncate everything after the delim:','line_number':490,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' if we have a valid catalog then load our messages:','line_number':543,'multiline':False]['text':'','line_number':544,'multiline':False]['text':'','line_number':547,'multiline':False]['text':' Error messages:','line_number':548,'multiline':False]['text':'','line_number':549,'multiline':False]['text':'','line_number':569,'multiline':False]['text':' Custom class names:','line_number':570,'multiline':False]['text':'','line_number':571,'multiline':False]['text':' C1_ALPHA | C1_DIGIT','line_number':574,'multiline':False]['text':' C1_ALPHA','line_number':575,'multiline':False]['text':' C1_CNTRL','line_number':576,'multiline':False]['text':' C1_DIGIT','line_number':577,'multiline':False]['text':' not C1_CNTRL or C1_SPACE','line_number':578,'multiline':False]['text':' C1_LOWER','line_number':579,'multiline':False]['text':' not C1_CNTRL','line_number':580,'multiline':False]['text':' C1_PUNCT','line_number':581,'multiline':False]['text':' C1_SPACE','line_number':582,'multiline':False]['text':' C1_UPPER','line_number':583,'multiline':False]['text':' C1_XDIGIT','line_number':584,'multiline':False]['text':' C1_BLANK','line_number':585,'multiline':False]['text':'','line_number':597,'multiline':False]['text':' get the collation format used by m_pcollate:','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':' C1_ALPHA | C1_DIGIT','line_number':610,'multiline':False]['text':' C1_ALPHA','line_number':611,'multiline':False]['text':' C1_BLANK','line_number':612,'multiline':False]['text':' C1_CNTRL','line_number':613,'multiline':False]['text':' C1_DIGIT','line_number':614,'multiline':False]['text':' C1_DIGIT','line_number':615,'multiline':False]['text':' not C1_CNTRL or C1_SPACE or C1_BLANK','line_number':616,'multiline':False]['text':' C1_LOWER','line_number':618,'multiline':False]['text':' C1_LOWER','line_number':619,'multiline':False]['text':' not C1_CNTRL','line_number':620,'multiline':False]['text':' C1_PUNCT','line_number':621,'multiline':False]['text':' C1_SPACE','line_number':622,'multiline':False]['text':' C1_SPACE','line_number':623,'multiline':False]['text':' C1_UPPER','line_number':624,'multiline':False]['text':' C1_UPPER','line_number':626,'multiline':False]['text':' C1_XDIGIT','line_number':630,'multiline':False]['text':' TODO: create a cache for previously constructed objects.','line_number':649,'multiline':False]['text':' BOOST_REGEX_DETAIL_NS','line_number':653,'multiline':False]['text':'','line_number':759,'multiline':False]['text':' extension:','line_number':760,'multiline':False]['text':' set the name of the message catalog in use (defaults to "boost_regex").','line_number':761,'multiline':False]['text':'','line_number':762,'multiline':False]['text':'','line_number':768,'multiline':False]['text':' catalog name handler:','line_number':769,'multiline':False]['text':'','line_number':770,'multiline':False]['text':' we need to start by initialising our syntax map so we know which','line_number':831,'multiline':False]['text':' character is used for which purpose:','line_number':832,'multiline':False]['text':'','line_number':846,'multiline':False]['text':' if we have a valid catalog then load our messages:','line_number':847,'multiline':False]['text':'','line_number':848,'multiline':False]['text':'','line_number':872,'multiline':False]['text':' finish off by calculating our escape types:','line_number':873,'multiline':False]['text':'','line_number':874,'multiline':False]['text':'','line_number':887,'multiline':False]['text':' fill in lower case map:','line_number':888,'multiline':False]['text':'','line_number':889,'multiline':False]['text':' if we have multibyte characters then not all may have been given','line_number':913,'multiline':False]['text':' a lower case mapping:','line_number':914,'multiline':False]['text':' failed conversion.','line_number':1042,'multiline':False]['text':' locale identifier','line_number':1062,'multiline':False]['text':' mapping transformation type','line_number':1063,'multiline':False]['text':' source string','line_number':1064,'multiline':False]['text':' number of characters in source string','line_number':1065,'multiline':False]['text':' destination buffer','line_number':1066,'multiline':False]['text':' size of destination buffer','line_number':1067,'multiline':False]['text':' locale identifier','line_number':1073,'multiline':False]['text':' mapping transformation type','line_number':1074,'multiline':False]['text':' source string','line_number':1075,'multiline':False]['text':' number of characters in source string','line_number':1076,'multiline':False]['text':' destination buffer','line_number':1077,'multiline':False]['text':' size of destination buffer','line_number':1078,'multiline':False]['text':' locale identifier','line_number':1091,'multiline':False]['text':' mapping transformation type','line_number':1092,'multiline':False]['text':' source string','line_number':1093,'multiline':False]['text':' number of characters in source string','line_number':1094,'multiline':False]['text':' destination buffer','line_number':1095,'multiline':False]['text':' size of destination buffer','line_number':1096,'multiline':False]['text':' locale identifier','line_number':1102,'multiline':False]['text':' mapping transformation type','line_number':1103,'multiline':False]['text':' source string','line_number':1104,'multiline':False]['text':' number of characters in source string','line_number':1105,'multiline':False]['text':' destination buffer','line_number':1106,'multiline':False]['text':' size of destination buffer','line_number':1107,'multiline':False]['text':' locale identifier','line_number':1123,'multiline':False]['text':' mapping transformation type','line_number':1124,'multiline':False]['text':' source string','line_number':1125,'multiline':False]['text':' number of characters in source string','line_number':1126,'multiline':False]['text':' destination buffer','line_number':1127,'multiline':False]['text':' size of destination buffer','line_number':1128,'multiline':False]['text':' locale identifier','line_number':1134,'multiline':False]['text':' mapping transformation type','line_number':1135,'multiline':False]['text':' source string','line_number':1136,'multiline':False]['text':' number of characters in source string','line_number':1137,'multiline':False]['text':' destination buffer *of bytes*','line_number':1138,'multiline':False]['text':' size of destination buffer','line_number':1139,'multiline':False]['text':' locale identifier','line_number':1158,'multiline':False]['text':' mapping transformation type','line_number':1159,'multiline':False]['text':' source string','line_number':1160,'multiline':False]['text':' number of characters in source string','line_number':1161,'multiline':False]['text':' destination buffer','line_number':1162,'multiline':False]['text':' size of destination buffer','line_number':1163,'multiline':False]['text':' locale identifier','line_number':1177,'multiline':False]['text':' mapping transformation type','line_number':1178,'multiline':False]['text':' source string','line_number':1179,'multiline':False]['text':' number of characters in source string','line_number':1180,'multiline':False]['text':' destination buffer','line_number':1181,'multiline':False]['text':' size of destination buffer','line_number':1182,'multiline':False]['text':' No single byte lower case equivalent available','line_number':1187,'multiline':False]['text':' locale identifier','line_number':1197,'multiline':False]['text':' mapping transformation type','line_number':1198,'multiline':False]['text':' source string','line_number':1199,'multiline':False]['text':' number of characters in source string','line_number':1200,'multiline':False]['text':' destination buffer','line_number':1201,'multiline':False]['text':' size of destination buffer','line_number':1202,'multiline':False]['text':' locale identifier','line_number':1213,'multiline':False]['text':' mapping transformation type','line_number':1214,'multiline':False]['text':' source string','line_number':1215,'multiline':False]['text':' number of characters in source string','line_number':1216,'multiline':False]['text':' destination buffer','line_number':1217,'multiline':False]['text':' size of destination buffer','line_number':1218,'multiline':False]['text':' locale identifier','line_number':1232,'multiline':False]['text':' mapping transformation type','line_number':1233,'multiline':False]['text':' source string','line_number':1234,'multiline':False]['text':' number of characters in source string','line_number':1235,'multiline':False]['text':' destination buffer','line_number':1236,'multiline':False]['text':' size of destination buffer','line_number':1237,'multiline':False]['text':' No single byte upper case equivalent available.','line_number':1242,'multiline':False]['text':' locale identifier','line_number':1252,'multiline':False]['text':' mapping transformation type','line_number':1253,'multiline':False]['text':' source string','line_number':1254,'multiline':False]['text':' number of characters in source string','line_number':1255,'multiline':False]['text':' destination buffer','line_number':1256,'multiline':False]['text':' size of destination buffer','line_number':1257,'multiline':False]['text':' BOOST_REGEX_DETAIL_NS','line_number':1300,'multiline':False]['text':' boost','line_number':1303,'multiline':False]['text':' BOOST_REGEX_NO_WIN32_LOCALE','line_number':1309,'multiline':False]