['text':' (C) Copyright David Abrahams 2002.','line_number':1,'multiline':False]['text':' (C) Copyright Jeremy Siek    2002.','line_number':2,'multiline':False]['text':' (C) Copyright Thomas Witt    2002.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':' this goes last','line_number':41,'multiline':False]['text':' This forward declaration is required for the friend declaration','line_number':46,'multiline':False]['text':' in iterator_core_access','line_number':47,'multiline':False]['text':' A binary metafunction class that always returns bool.  VC6','line_number':52,'multiline':False]['text':' ICEs on mpl::always<bool>, probably because of the default','line_number':53,'multiline':False]['text':' parameters.','line_number':54,'multiline':False]['text':' The type trait checks if the category or traversal is at least as advanced as the specified required traversal','line_number':64,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' enable if for use in operator implementation.','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' enable if for use in implementation of operators specific for random access traversal.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':'','line_number':104,'multiline':False]['text':' Generates associated types for an iterator_facade with the','line_number':105,'multiline':False]['text':' given parameters.','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' Not the real associated pointer type','line_number':122,'multiline':False]['text':' To interoperate with some broken library/compiler','line_number':135,'multiline':False]['text':' combinations, user-defined iterators must be derived from','line_number':136,'multiline':False]['text':' std::iterator.  It is possible to implement a standard','line_number':137,'multiline':False]['text':' library for broken compilers without this limitation.','line_number':138,'multiline':False]['text':' iterators whose dereference operators reference the same value','line_number':147,'multiline':False]['text':' for all iterators into the same sequence (like many input','line_number':148,'multiline':False]['text':' iterators) need help with their postfix ++: the referenced','line_number':149,'multiline':False]['text':' value must be read and stored away before the increment occurs','line_number':150,'multiline':False]['text':' so that *a++ yields the originally referenced element and not','line_number':151,'multiline':False]['text':' the next one.','line_number':152,'multiline':False]['text':' Returning a mutable reference allows nonsense like','line_number':162,'multiline':False]['text':' (*r++).mutate(), but it imposes fewer assumptions about the','line_number':163,'multiline':False]['text':' behavior of the value_type.  In particular, recall that','line_number':164,'multiline':False]['text':' (*r).mutate() is legal if operator* returns by value.','line_number':165,'multiline':False]['text':'','line_number':175,'multiline':False]['text':' In general, we can't determine that such an iterator isn't','line_number':176,'multiline':False]['text':' writable -- we also need to store a copy of the old iterator so','line_number':177,'multiline':False]['text':' that it can be written into.','line_number':178,'multiline':False]['text':' Dereferencing must return a proxy so that both *r++ = o and','line_number':189,'multiline':False]['text':' value_type(*r++) can work.  In this case, *r is the same as','line_number':190,'multiline':False]['text':' *r++, and the conversion operator below is used to ensure','line_number':191,'multiline':False]['text':' readability.','line_number':192,'multiline':False]['text':' Provides readability of *r++','line_number':199,'multiline':False]['text':' Provides writability of *r++','line_number':205,'multiline':False]['text':' This overload just in case only non-const objects are writable','line_number':213,'multiline':False]['text':' Provides X(r++)','line_number':221,'multiline':False]['text':' A metafunction to choose the result type of postfix ++','line_number':269,'multiline':False]['text':'','line_number':270,'multiline':False]['text':' Because the C++98 input iterator requirements say that *r++ has','line_number':271,'multiline':False]['text':' type T (value_type), implementations of some standard','line_number':272,'multiline':False]['text':' algorithms like lexicographical_compare may use constructions','line_number':273,'multiline':False]['text':' like:','line_number':274,'multiline':False]['text':'','line_number':275,'multiline':False]['text':'          *r++ < *s++','line_number':276,'multiline':False]['text':'','line_number':277,'multiline':False]['text':' If *r++ returns a proxy (as required if r is writable but not','line_number':278,'multiline':False]['text':' multipass), this sort of expression will fail unless the proxy','line_number':279,'multiline':False]['text':' supports the operator<.  Since there are any number of such','line_number':280,'multiline':False]['text':' operations, we're not going to try to support them.  Therefore,','line_number':281,'multiline':False]['text':' even if r++ returns a proxy, *r++ will only return a proxy if','line_number':282,'multiline':False]['text':' *r also returns a proxy.','line_number':283,'multiline':False]['text':' A proxy is only needed for readable iterators','line_number':288,'multiline':False]['text':' Use add_lvalue_reference to form `reference to Value` due to','line_number':291,'multiline':False]['text':' some (strict) C++03 compilers (e.g. `gcc -std=c++03`) reject','line_number':292,'multiline':False]['text':' 'reference-to-reference' in the template which described in CWG','line_number':293,'multiline':False]['text':' DR106.','line_number':294,'multiline':False]['text':' http://www.open-std.org/Jtc1/sc22/wg21/docs/cwg_defects.html#106','line_number':295,'multiline':False]['text':' No multipass iterator can have values that disappear','line_number':299,'multiline':False]['text':' before positions can be re-visited','line_number':300,'multiline':False]['text':' operator->() needs special support for input iterators to strictly meet the','line_number':317,'multiline':False]['text':' standard's requirements. If *i is not a reference type, we must still','line_number':318,'multiline':False]['text':' produce an lvalue to which a pointer can be formed.  We do that by','line_number':319,'multiline':False]['text':' returning a proxy object containing an instance of the reference object.','line_number':320,'multiline':False]['text':' proxy references','line_number':322,'multiline':False]['text':' This function is needed for MWCW and BCC, which won't call','line_number':328,'multiline':False]['text':' operator-> again automatically per 13.3.1.2 para 8','line_number':329,'multiline':False]['text':' "real" references','line_number':341,'multiline':False]['text':' A proxy return type for operator[], needed to deal with','line_number':350,'multiline':False]['text':' iterators that may invalidate referents upon destruction.','line_number':351,'multiline':False]['text':' Consider the temporary iterator in *(a + n)','line_number':352,'multiline':False]['text':' Iterator is actually an iterator_facade, so we do not have to','line_number':356,'multiline':False]['text':' go through iterator_traits to access the traits.','line_number':357,'multiline':False]['text':' A metafunction that determines whether operator[] must return a','line_number':381,'multiline':False]['text':' proxy, or whether it can simply return a copy of the value_type.','line_number':382,'multiline':False]['text':' Really we want an is_copy_constructible trait here,','line_number':387,'multiline':False]['text':' but is_POD will have to suffice in the meantime.','line_number':388,'multiline':False]['text':' namespace detail','line_number':446,'multiline':False]['text':' Macros which describe the declarations of binary operators','line_number':449,'multiline':False]['text':'','line_number':488,'multiline':False]['text':' Helper class for granting access to the iterator core interface.','line_number':489,'multiline':False]['text':'','line_number':490,'multiline':False]['text':' The simple core interface is used by iterator_facade. The core','line_number':491,'multiline':False]['text':' interface of a user/library defined iterator type should not be made public','line_number':492,'multiline':False]['text':' so that it does not clutter the public interface. Instead iterator_core_access','line_number':493,'multiline':False]['text':' should be made friend so that iterator_facade can access the core','line_number':494,'multiline':False]['text':' interface through iterator_core_access.','line_number':495,'multiline':False]['text':'','line_number':496,'multiline':False]['text':' Tasteless as this may seem, making all members public allows member templates','line_number':500,'multiline':False]['text':' to work in the absence of member template friends.','line_number':501,'multiline':False]['text':'','line_number':597,'multiline':False]['text':' Curiously Recurring Template interface.','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':' objects of this class are useless','line_number':612,'multiline':False]['text':' Implementation for forward traversal iterators','line_number':618,'multiline':False]['text':'','line_number':671,'multiline':False]['text':' Curiously Recurring Template interface.','line_number':672,'multiline':False]['text':'','line_number':673,'multiline':False]['text':' Implementation for bidirectional traversal iterators','line_number':685,'multiline':False]['text':' Implementation for random access traversal iterators','line_number':711,'multiline':False]['text':' namespace detail','line_number':760,'multiline':False]['text':'','line_number':762,'multiline':False]['text':' iterator_facade - use as a public base class for defining new','line_number':763,'multiline':False]['text':' standard-conforming iterators.','line_number':764,'multiline':False]['text':'','line_number':765,'multiline':False]['text':' The derived iterator type being constructed','line_number':767,'multiline':False]['text':' For use by derived classes','line_number':785,'multiline':False]['text':'','line_number':805,'multiline':False]['text':' Comparison operator implementation. The library supplied operators','line_number':806,'multiline':False]['text':' enables the user to provide fully interoperable constant/mutable','line_number':807,'multiline':False]['text':' iterator types. I.e. the library provides all operators','line_number':808,'multiline':False]['text':' for all mutable/constant iterator combinations.','line_number':809,'multiline':False]['text':'','line_number':810,'multiline':False]['text':' Note though that this kind of interoperability for constant/mutable','line_number':811,'multiline':False]['text':' iterators is not required by the standard for container iterators.','line_number':812,'multiline':False]['text':' All the standard asks for is a conversion mutable -> constant.','line_number':813,'multiline':False]['text':' Most standard library implementations nowadays provide fully interoperable','line_number':814,'multiline':False]['text':' iterator implementations, but there are still heavily used implementations','line_number':815,'multiline':False]['text':' that do not provide them. (Actually it's even worse, they do not provide','line_number':816,'multiline':False]['text':' them for only a few iterators.)','line_number':817,'multiline':False]['text':'','line_number':818,'multiline':False]['text':' ?? Maybe a BOOST_ITERATOR_NO_FULL_INTEROPERABILITY macro should','line_number':819,'multiline':False]['text':'    enable the user to turn off mixed type operators','line_number':820,'multiline':False]['text':'','line_number':821,'multiline':False]['text':' The library takes care to provide only the right operator overloads.','line_number':822,'multiline':False]['text':' I.e.','line_number':823,'multiline':False]['text':'','line_number':824,'multiline':False]['text':' bool operator==(Iterator,      Iterator);','line_number':825,'multiline':False]['text':' bool operator==(ConstIterator, Iterator);','line_number':826,'multiline':False]['text':' bool operator==(Iterator,      ConstIterator);','line_number':827,'multiline':False]['text':' bool operator==(ConstIterator, ConstIterator);','line_number':828,'multiline':False]['text':'','line_number':829,'multiline':False]['text':'   ...','line_number':830,'multiline':False]['text':'','line_number':831,'multiline':False]['text':' In order to do so it uses c++ idioms that are not yet widely supported','line_number':832,'multiline':False]['text':' by current compiler releases. The library is designed to degrade gracefully','line_number':833,'multiline':False]['text':' in the face of compiler deficiencies. In general compiler','line_number':834,'multiline':False]['text':' deficiencies result in less strict error checking and more obscure','line_number':835,'multiline':False]['text':' error messages, functionality is not affected.','line_number':836,'multiline':False]['text':'','line_number':837,'multiline':False]['text':' For full operation compiler support for "Substitution Failure Is Not An Error"','line_number':838,'multiline':False]['text':' (aka. enable_if) and boost::is_convertible is required.','line_number':839,'multiline':False]['text':'','line_number':840,'multiline':False]['text':' The following problems occur if support is lacking.','line_number':841,'multiline':False]['text':'','line_number':842,'multiline':False]['text':' Pseudo code','line_number':843,'multiline':False]['text':'','line_number':844,'multiline':False]['text':' ---------------','line_number':845,'multiline':False]['text':' AdaptorA<Iterator1> a1;','line_number':846,'multiline':False]['text':' AdaptorA<Iterator2> a2;','line_number':847,'multiline':False]['text':'','line_number':848,'multiline':False]['text':' // This will result in a no such overload error in full operation','line_number':849,'multiline':False]['text':' // If enable_if or is_convertible is not supported','line_number':850,'multiline':False]['text':' // The instantiation will fail with an error hopefully indicating that','line_number':851,'multiline':False]['text':' // there is no operator== for Iterator1, Iterator2','line_number':852,'multiline':False]['text':' // The same will happen if no enable_if is used to remove','line_number':853,'multiline':False]['text':' // false overloads from the templated conversion constructor','line_number':854,'multiline':False]['text':' // of AdaptorA.','line_number':855,'multiline':False]['text':'','line_number':856,'multiline':False]['text':' a1 == a2;','line_number':857,'multiline':False]['text':' ----------------','line_number':858,'multiline':False]['text':'','line_number':859,'multiline':False]['text':' AdaptorA<Iterator> a;','line_number':860,'multiline':False]['text':' AdaptorB<Iterator> b;','line_number':861,'multiline':False]['text':'','line_number':862,'multiline':False]['text':' // This will result in a no such overload error in full operation','line_number':863,'multiline':False]['text':' // If enable_if is not supported the static assert used','line_number':864,'multiline':False]['text':' // in the operator implementation will fail.','line_number':865,'multiline':False]['text':' // This will accidently work if is_convertible is not supported.','line_number':866,'multiline':False]['text':'','line_number':867,'multiline':False]['text':' a == b;','line_number':868,'multiline':False]['text':' ----------------','line_number':869,'multiline':False]['text':'','line_number':870,'multiline':False]['text':' For those compilers that do not support enable_if ','line_number':881,'multiline':True]['text':' For those compilers that do not support enable_if ','line_number':909,'multiline':True]['text':' operator- requires an additional part in the static assertion','line_number':937,'multiline':False]['text':' namespace iterators','line_number':972,'multiline':False]['text':' namespace boost','line_number':977,'multiline':False]['text':' BOOST_ITERATOR_FACADE_23022003THW_HPP','line_number':981,'multiline':False]