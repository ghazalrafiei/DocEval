['text':'  Copyright John Maddock 2006, 2010.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' Temporary until lexical cast fixed.','line_number':18,'multiline':False]['text':' factorial<unsigned int>(n) is not implemented','line_number':34,'multiline':False]['text':' because it would overflow integral type T for too small n','line_number':35,'multiline':False]['text':' to be useful. Use instead a floating-point type,','line_number':36,'multiline':False]['text':' and convert to an unsigned type if essential, for example:','line_number':37,'multiline':False]['text':' unsigned int nfac = static_cast<unsigned int>(factorial<double>(n));','line_number':38,'multiline':False]['text':' See factorial documentation for more detail.','line_number':39,'multiline':False]['text':' Aid ADL for floor.','line_number':41,'multiline':False]['text':' Overflowed value! (But tgamma will have signalled the error already).','line_number':47,'multiline':False]['text':'
// Can't have these in a policy enabled world?
template<>
inline float factorial<float>(unsigned i)
{
   if(i <= max_factorial<float>::value)
      return unchecked_factorial<float>(i);
   return tools::overflow_error<float>(BOOST_CURRENT_FUNCTION);
}

template<>
inline double factorial<double>(unsigned i)
{
   if(i <= max_factorial<double>::value)
      return unchecked_factorial<double>(i);
   return tools::overflow_error<double>(BOOST_CURRENT_FUNCTION);
}
','line_number':56,'multiline':True]['text':' ADL lookup of std names','line_number':78,'multiline':False]['text':' odd i:','line_number':81,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' Fallthrough: i is too large to use table lookup, try the','line_number':88,'multiline':False]['text':' gamma function instead.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' even i:','line_number':97,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' If we fall through to here then the result is infinite:','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':'','line_number':123,'multiline':False]['text':' For x less than zero, we really have a falling','line_number':124,'multiline':False]['text':' factorial, modulo a possible change of sign.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' Note that the falling factorial isn't defined','line_number':127,'multiline':False]['text':' for negative n, so we'll get rid of that case','line_number':128,'multiline':False]['text':' first:','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' We don't optimise this for small n, because','line_number':158,'multiline':False]['text':' tgamma_delta_ratio is already optimised for that','line_number':159,'multiline':False]['text':' use case:','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' ADL of std names','line_number':169,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' For x < 0 we really have a rising factorial','line_number':175,'multiline':False]['text':' modulo a possible change of sign:','line_number':176,'multiline':False]['text':'','line_number':177,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' 1 + x below will throw away digits, so split up calculation:','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' If the two end of the range are far apart we have a ratio of two very large','line_number':189,'multiline':False]['text':' numbers, split the calculation up into two blocks:','line_number':190,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' x+1-n will be negative and tgamma_delta_ratio won't','line_number':202,'multiline':False]['text':' handle it, split the product up into three parts:','line_number':203,'multiline':False]['text':'','line_number':204,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' Simple case: just the ratio of two','line_number':218,'multiline':False]['text':' (positive argument) gamma functions.','line_number':219,'multiline':False]['text':' Note that we don't optimise this for small n,','line_number':220,'multiline':False]['text':' because tgamma_delta_ratio is already optimised','line_number':221,'multiline':False]['text':' for that use case:','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' namespace detail','line_number':227,'multiline':False]['text':' namespace math','line_number':265,'multiline':False]['text':' namespace boost','line_number':266,'multiline':False]['text':' BOOST_MATH_SP_FACTORIALS_HPP','line_number':268,'multiline':False]