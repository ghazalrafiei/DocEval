['text':' (C) Copyright David Abrahams 2002.','line_number':1,'multiline':False]['text':' (C) Copyright Jeremy Siek    2002.','line_number':2,'multiline':False]['text':' (C) Copyright Thomas Witt    2002.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':' no include guard multiple inclusion intended','line_number':8,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' This is a temporary workaround until the bulk of this is','line_number':11,'multiline':False]['text':' available in boost config.','line_number':12,'multiline':False]['text':' 23/02/03 thw','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' for prior','line_number':16,'multiline':False]['text':' We enable this always now.  Otherwise, the simple case in','line_number':25,'multiline':False]['text':' libs/iterator/test/constant_iterator_arrow.cpp fails to compile','line_number':26,'multiline':False]['text':' because the operator-> return is improperly deduced as a non-const','line_number':27,'multiline':False]['text':' pointer.','line_number':28,'multiline':False]['text':' Recall that in general, compilers without partial specialization','line_number':32,'multiline':False]['text':' can't strip constness.  Consider counting_iterator, which normally','line_number':33,'multiline':False]['text':' passes a const Value to iterator_facade.  As a result, any code','line_number':34,'multiline':False]['text':' which makes a std::vector of the iterator's value_type will fail','line_number':35,'multiline':False]['text':' when its allocator declares functions overloaded on reference and','line_number':36,'multiline':False]['text':' const_reference (the same type).','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' Furthermore, Borland 5.5.1 drops constness in enough ways that we','line_number':39,'multiline':False]['text':' end up using a proxy for operator[] when we otherwise shouldn't.','line_number':40,'multiline':False]['text':' Using reference constness gives it an extra hint that it can','line_number':41,'multiline':False]['text':' return the value_type from operator[] directly, but is not','line_number':42,'multiline':False]['text':' strictly necessary.  Not sure how best to resolve this one.','line_number':43,'multiline':False]['text':' test code','line_number':56,'multiline':False]['text':' "is_convertible doesn't work for simple types"','line_number':87,'multiline':False]['text':' The following program fails to compile:','line_number':92,'multiline':False]['text':' test code','line_number':94,'multiline':False]['text':' GCC-2.95 (obsolete) eagerly instantiates templated constructors and conversion','line_number':119,'multiline':False]['text':' operators in convertibility checks, causing premature errors.','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':' Borland's problems are harder to diagnose due to lack of an','line_number':122,'multiline':False]['text':' instantiation stack backtrace.  They may be due in part to the fact','line_number':123,'multiline':False]['text':' that it drops cv-qualification willy-nilly in templates.','line_number':124,'multiline':False]['text':' no include guard; multiple inclusion intended','line_number':128,'multiline':False]