['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   mutable_constant.hpp
 * \author Andrey Semashev
 * \date   06.11.2007
 *
 * The header contains implementation of a mutable constant attribute.
 ','line_number':7,'multiline':True]['text':'!
 * \brief A class of an attribute that holds a single constant value with ability to change it
 *
 * The mutable_constant attribute stores a single value of type, specified as the first template argument.
 * This value is returned on each attribute value acquisition.
 *
 * The attribute also allows to modify the stored value, even if the attribute is registered in an attribute set.
 * In order to ensure thread safety of such modifications the \c mutable_constant class is also parametrized
 * with three additional template arguments: mutex type, scoped write and scoped read lock types. If not specified,
 * the lock types are automatically deduced based on the mutex type.
 *
 * The implementation may avoid using these types to actually create and use the mutex, if a more efficient synchronization method is
 * available (such as atomic operations on the value type). By default no synchronization is done.
 ','line_number':41,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':57,'multiline':False]['text':' BOOST_LOG_NO_THREADS','line_number':70,'multiline':False]['text':' BOOST_LOG_NO_THREADS','line_number':80,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':81,'multiline':False]['text':'! The attribute value type','line_number':87,'multiline':False]['text':'! Factory implementation','line_number':91,'multiline':False]['text':'! Mutex type','line_number':96,'multiline':False]['text':'! Shared lock type','line_number':98,'multiline':False]['text':'! Exclusive lock type','line_number':100,'multiline':False]['text':'! Attribute value wrapper','line_number':103,'multiline':False]['text':'! Thread protection mutex','line_number':107,'multiline':False]['text':'! Pointer to the actual attribute value','line_number':109,'multiline':False]['text':'!
         * Initializing constructor
         ','line_number':113,'multiline':True]['text':'!
         * Initializing constructor
         ','line_number':119,'multiline':True]['text':'!
     * Constructor with the stored value initialization
     ','line_number':154,'multiline':True]['text':'!
     * Constructor with the stored value initialization
     ','line_number':160,'multiline':True]['text':'!
     * Constructor for casting support
     ','line_number':166,'multiline':True]['text':'!
     * The method sets a new attribute value. The implementation exclusively locks the mutex in order
     * to protect the value assignment.
     ','line_number':173,'multiline':True]['text':'!
     * The method sets a new attribute value.
     ','line_number':182,'multiline':True]['text':'!
     * The method acquires the current attribute value. The implementation non-exclusively locks the mutex in order
     * to protect the value acquisition.
     ','line_number':190,'multiline':True]['text':'!
     * \returns Pointer to the factory implementation
     ','line_number':200,'multiline':True]['text':'!
 * \brief Specialization for unlocked case
 *
 * This version of attribute does not perform thread synchronization to access the stored value.
 ','line_number':210,'multiline':True]['text':'! The attribute value type','line_number':220,'multiline':False]['text':'! Factory implementation','line_number':224,'multiline':False]['text':'! Attribute value wrapper','line_number':229,'multiline':False]['text':'! The actual value','line_number':233,'multiline':False]['text':'!
         * Initializing constructor
         ','line_number':237,'multiline':True]['text':'!
         * Initializing constructor
         ','line_number':243,'multiline':True]['text':'!
     * Constructor with the stored value initialization
     ','line_number':271,'multiline':True]['text':'!
     * Constructor with the stored value initialization
     ','line_number':277,'multiline':True]['text':'!
     * Constructor for casting support
     ','line_number':283,'multiline':True]['text':'!
     * The method sets a new attribute value.
     ','line_number':290,'multiline':True]['text':'!
     * The method sets a new attribute value.
     ','line_number':298,'multiline':True]['text':'!
     * The method acquires the current attribute value.
     ','line_number':306,'multiline':True]['text':'!
     * \returns Pointer to the factory implementation
     ','line_number':315,'multiline':True]['text':' namespace attributes','line_number':324,'multiline':False]['text':' namespace log','line_number':326,'multiline':False]['text':' namespace boost','line_number':328,'multiline':False]['text':' BOOST_LOG_ATTRIBUTES_MUTABLE_CONSTANT_HPP_INCLUDED_','line_number':332,'multiline':False]