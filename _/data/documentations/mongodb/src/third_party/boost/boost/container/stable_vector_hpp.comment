['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2008-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' Stable vector.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Copyright 2008 Joaquin M Lopez Munoz.','line_number':12,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':13,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':17,'multiline':False]['text':' container','line_number':33,'multiline':False]['text':'new_allocator','line_number':36,'multiline':False]['text':' container/detail','line_number':38,'multiline':False]['text':'algo_equal(), algo_lexicographical_compare','line_number':40,'multiline':False]['text':' intrusive','line_number':49,'multiline':False]['text':' intrusive/detail','line_number':51,'multiline':False]['text':'pair','line_number':52,'multiline':False]['text':' move','line_number':53,'multiline':False]['text':' move/detail','line_number':58,'multiline':False]['text':' other','line_number':60,'multiline':False]['text':' std','line_number':63,'multiline':False]['text':'#define STABLE_VECTOR_ENABLE_INVARIANT_CHECKING','line_number':70,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':71,'multiline':False]['text':'Stable vector stores metadata at the end of the index (node_base_ptr vector) with additional 3 pointers:','line_number':218,'multiline':False]['text':'    back() is this->index.back() - ExtraPointers;','line_number':219,'multiline':False]['text':'    end node index is    *(this->index.end() - 3)','line_number':220,'multiline':False]['text':'    Node cache first is  *(this->index.end() - 2);','line_number':221,'multiline':False]['text':'    Node cache last is   this->index.back();','line_number':222,'multiline':False]['text':'STABLE_VECTOR_ENABLE_INVARIANT_CHECKING','line_number':280,'multiline':False]['text':'namespace stable_vector_detail','line_number':283,'multiline':False]['text':'Value initialization to achieve "null iterators" (N3644)','line_number':335,'multiline':False]['text':'Pointer like operators','line_number':354,'multiline':False]['text':'Increment / Decrement','line_number':363,'multiline':False]['text':'Arithmetic','line_number':388,'multiline':False]['text':'Difference','line_number':422,'multiline':False]['text':'Comparison operators','line_number':427,'multiline':False]['text':'STABLE_VECTOR_ENABLE_INVARIANT_CHECKING','line_number':459,'multiline':False]['text':'#if defined(STABLE_VECTOR_ENABLE_INVARIANT_CHECKING)','line_number':463,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':465,'multiline':False]['text':'! Originally developed by Joaquin M. Lopez Munoz, stable_vector is a std::vector','line_number':467,'multiline':False]['text':'! drop-in replacement implemented as a node container, offering iterator and reference','line_number':468,'multiline':False]['text':'! stability.','line_number':469,'multiline':False]['text':'!','line_number':470,'multiline':False]['text':'! Here are the details taken from the author's blog','line_number':471,'multiline':False]['text':'! (<a href="http://bannalia.blogspot.com/2008/09/introducing-stablevector.html" >','line_number':472,'multiline':False]['text':'! Introducing stable_vector</a>):','line_number':473,'multiline':False]['text':'!','line_number':474,'multiline':False]['text':'! We present stable_vector, a fully STL-compliant stable container that provides','line_number':475,'multiline':False]['text':'! most of the features of std::vector except element contiguity.','line_number':476,'multiline':False]['text':'!','line_number':477,'multiline':False]['text':'! General properties: stable_vector satisfies all the requirements of a container,','line_number':478,'multiline':False]['text':'! a reversible container and a sequence and provides all the optional operations','line_number':479,'multiline':False]['text':'! present in std::vector. Like std::vector, iterators are random access.','line_number':480,'multiline':False]['text':'! stable_vector does not provide element contiguity; in exchange for this absence,','line_number':481,'multiline':False]['text':'! the container is stable, i.e. references and iterators to an element of a stable_vector','line_number':482,'multiline':False]['text':'! remain valid as long as the element is not erased, and an iterator that has been','line_number':483,'multiline':False]['text':'! assigned the return value of end() always remain valid until the destruction of','line_number':484,'multiline':False]['text':'! the associated  stable_vector.','line_number':485,'multiline':False]['text':'!','line_number':486,'multiline':False]['text':'! Operation complexity: The big-O complexities of stable_vector operations match','line_number':487,'multiline':False]['text':'! exactly those of std::vector. In general, insertion/deletion is constant time at','line_number':488,'multiline':False]['text':'! the end of the sequence and linear elsewhere. Unlike std::vector, stable_vector','line_number':489,'multiline':False]['text':'! does not internally perform any value_type destruction, copy or assignment','line_number':490,'multiline':False]['text':'! operations other than those exactly corresponding to the insertion of new','line_number':491,'multiline':False]['text':'! elements or deletion of stored elements, which can sometimes compensate in terms','line_number':492,'multiline':False]['text':'! of performance for the extra burden of doing more pointer manipulation and an','line_number':493,'multiline':False]['text':'! additional allocation per element.','line_number':494,'multiline':False]['text':'!','line_number':495,'multiline':False]['text':'! Exception safety: As stable_vector does not internally copy elements around, some','line_number':496,'multiline':False]['text':'! operations provide stronger exception safety guarantees than in std::vector.','line_number':497,'multiline':False]['text':'!','line_number':498,'multiline':False]['text':'! \tparam T The type of object that is stored in the stable_vector','line_number':499,'multiline':False]['text':'! \tparam Allocator The allocator used for all internal memory management','line_number':500,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':576,'multiline':False]['text':'////////////////////////////////////////////','line_number':579,'multiline':False]['text':'','line_number':580,'multiline':False]['text':'                    types','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'////////////////////////////////////////////','line_number':583,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':608,'multiline':False]['text':'////////////////////////////////////////////','line_number':611,'multiline':False]['text':'','line_number':612,'multiline':False]['text':'          construct/copy/destroy','line_number':613,'multiline':False]['text':'','line_number':614,'multiline':False]['text':'////////////////////////////////////////////','line_number':615,'multiline':False]['text':'! <b>Effects</b>: Default constructs a stable_vector.','line_number':617,'multiline':False]['text':'!','line_number':618,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor throws.','line_number':619,'multiline':False]['text':'!','line_number':620,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':621,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector taking the allocator as parameter.','line_number':628,'multiline':False]['text':'!','line_number':629,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':630,'multiline':False]['text':'!','line_number':631,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':632,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector','line_number':639,'multiline':False]['text':'!   and inserts n value initialized values.','line_number':640,'multiline':False]['text':'!','line_number':641,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':642,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':643,'multiline':False]['text':'!','line_number':644,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':645,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector','line_number':655,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':656,'multiline':False]['text':'!','line_number':657,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':658,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':659,'multiline':False]['text':'!','line_number':660,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':661,'multiline':False]['text':'!','line_number':662,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':663,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector that will use a copy of allocator a','line_number':673,'multiline':False]['text':'!   and inserts n value initialized values.','line_number':674,'multiline':False]['text':'!','line_number':675,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':676,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':677,'multiline':False]['text':'!','line_number':678,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':679,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector that will use a copy of allocator a','line_number':689,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':690,'multiline':False]['text':'!','line_number':691,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':692,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':693,'multiline':False]['text':'!','line_number':694,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':695,'multiline':False]['text':'!','line_number':696,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':697,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector that will use a copy of allocator a','line_number':707,'multiline':False]['text':'!   and inserts n copies of value.','line_number':708,'multiline':False]['text':'!','line_number':709,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':710,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':711,'multiline':False]['text':'!','line_number':712,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':713,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector that will use a copy of allocator a','line_number':723,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the stable_vector.','line_number':724,'multiline':False]['text':'!','line_number':725,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':726,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':727,'multiline':False]['text':'!','line_number':728,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':729,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a stable_vector.','line_number':740,'multiline':False]['text':'!','line_number':741,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':742,'multiline':False]['text':'!','line_number':743,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':744,'multiline':False]['text':'! <b>Effects</b>: Constructs a stable_vector that will use a copy of allocator a','line_number':758,'multiline':False]['text':'!  and inserts a copy of the range [il.begin(), il.last()) in the stable_vector','line_number':759,'multiline':False]['text':'!','line_number':760,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':761,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced initializer_list iterator throws.','line_number':762,'multiline':False]['text':'!','line_number':763,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':764,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':775,'multiline':False]['text':'!','line_number':776,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':777,'multiline':False]['text':'!','line_number':778,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':779,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a stable_vector using the specified allocator.','line_number':786,'multiline':False]['text':'!','line_number':787,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':788,'multiline':False]['text':'!','line_number':789,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':790,'multiline':False]['text':'! <b>Effects</b>: Move constructor using the specified allocator.','line_number':800,'multiline':False]['text':'!                 Moves x's resources to *this.','line_number':801,'multiline':False]['text':'!','line_number':802,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':803,'multiline':False]['text':'!','line_number':804,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise','line_number':805,'multiline':False]['text':'! <b>Effects</b>: Destroys the stable_vector. All stored values are destroyed','line_number':821,'multiline':False]['text':'!   and used memory is deallocated.','line_number':822,'multiline':False]['text':'!','line_number':823,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':824,'multiline':False]['text':'!','line_number':825,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements.','line_number':826,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':833,'multiline':False]['text':'!','line_number':834,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':835,'multiline':False]['text':'! of each of x's elements.','line_number':836,'multiline':False]['text':'!','line_number':837,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':838,'multiline':False]['text':'!','line_number':839,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':840,'multiline':False]['text':'! <b>Effects</b>: Move assignment. All x's values are transferred to *this.','line_number':860,'multiline':False]['text':'!','line_number':861,'multiline':False]['text':'! <b>Postcondition</b>: x.empty(). *this contains a the elements x had','line_number':862,'multiline':False]['text':'!   before the function.','line_number':863,'multiline':False]['text':'!','line_number':864,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':865,'multiline':False]['text':'!   is false and (allocation throws or T's move constructor throws)','line_number':866,'multiline':False]['text':'!','line_number':867,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':868,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':869,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':870,'multiline':False]['text':'for move constructor, no aliasing (&x != this) is assumed.','line_number':875,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':883,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':884,'multiline':False]['text':'Destroy objects but retain memory in case x reuses it in the future','line_number':887,'multiline':False]['text':'Move allocator if needed','line_number':889,'multiline':False]['text':'Take resources','line_number':891,'multiline':False]['text':'Else do a one by one move','line_number':895,'multiline':False]['text':'! <b>Effects</b>: Make *this container contains elements from il.','line_number':905,'multiline':False]['text':'!','line_number':906,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':907,'multiline':False]['text':'! <b>Effects</b>: Assigns the n copies of val to *this.','line_number':916,'multiline':False]['text':'!','line_number':917,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':918,'multiline':False]['text':'!','line_number':919,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':920,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [first, last) to *this.','line_number':927,'multiline':False]['text':'!','line_number':928,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':929,'multiline':False]['text':'!   T's constructor from dereferencing InpIt throws.','line_number':930,'multiline':False]['text':'!','line_number':931,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':932,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [il.begin(), il.end()) to *this.','line_number':955,'multiline':False]['text':'!','line_number':956,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':957,'multiline':False]['text':'!   T's constructor from dereferencing initializer_list iterator throws.','line_number':958,'multiline':False]['text':'!','line_number':959,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':967,'multiline':False]['text':'!','line_number':968,'multiline':False]['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':969,'multiline':False]['text':'!','line_number':970,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':971,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':976,'multiline':False]['text':'!','line_number':977,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':978,'multiline':False]['text':'!','line_number':979,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':980,'multiline':False]['text':'!','line_number':981,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':982,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':987,'multiline':False]['text':'!','line_number':988,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':991,'multiline':False]['text':'!','line_number':992,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':993,'multiline':False]['text':'////////////////////////////////////////////','line_number':998,'multiline':False]['text':'','line_number':999,'multiline':False]['text':'                iterators','line_number':1000,'multiline':False]['text':'','line_number':1001,'multiline':False]['text':'////////////////////////////////////////////','line_number':1002,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the stable_vector.','line_number':1004,'multiline':False]['text':'!','line_number':1005,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1006,'multiline':False]['text':'!','line_number':1007,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1008,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the stable_vector.','line_number':1013,'multiline':False]['text':'!','line_number':1014,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1015,'multiline':False]['text':'!','line_number':1016,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1017,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the stable_vector.','line_number':1022,'multiline':False]['text':'!','line_number':1023,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1024,'multiline':False]['text':'!','line_number':1025,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1026,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the stable_vector.','line_number':1031,'multiline':False]['text':'!','line_number':1032,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1033,'multiline':False]['text':'!','line_number':1034,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1035,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':1040,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1041,'multiline':False]['text':'!','line_number':1042,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1043,'multiline':False]['text':'!','line_number':1044,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1045,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1050,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1051,'multiline':False]['text':'!','line_number':1052,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1053,'multiline':False]['text':'!','line_number':1054,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1055,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':1060,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1061,'multiline':False]['text':'!','line_number':1062,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1063,'multiline':False]['text':'!','line_number':1064,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1065,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1070,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1071,'multiline':False]['text':'!','line_number':1072,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1073,'multiline':False]['text':'!','line_number':1074,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1075,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the stable_vector.','line_number':1080,'multiline':False]['text':'!','line_number':1081,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1082,'multiline':False]['text':'!','line_number':1083,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1084,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the stable_vector.','line_number':1089,'multiline':False]['text':'!','line_number':1090,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1091,'multiline':False]['text':'!','line_number':1092,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1093,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1098,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1099,'multiline':False]['text':'!','line_number':1100,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1101,'multiline':False]['text':'!','line_number':1102,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1103,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1108,'multiline':False]['text':'! of the reversed stable_vector.','line_number':1109,'multiline':False]['text':'!','line_number':1110,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1111,'multiline':False]['text':'!','line_number':1112,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1113,'multiline':False]['text':'////////////////////////////////////////////','line_number':1118,'multiline':False]['text':'','line_number':1119,'multiline':False]['text':'                capacity','line_number':1120,'multiline':False]['text':'','line_number':1121,'multiline':False]['text':'////////////////////////////////////////////','line_number':1122,'multiline':False]['text':'! <b>Effects</b>: Returns true if the stable_vector contains no elements.','line_number':1124,'multiline':False]['text':'!','line_number':1125,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1126,'multiline':False]['text':'!','line_number':1127,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1128,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the stable_vector.','line_number':1133,'multiline':False]['text':'!','line_number':1134,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1135,'multiline':False]['text':'!','line_number':1136,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1137,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the stable_vector.','line_number':1145,'multiline':False]['text':'!','line_number':1146,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1147,'multiline':False]['text':'!','line_number':1148,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1149,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1154,'multiline':False]['text':'!   the size becomes n. New elements are value initialized.','line_number':1155,'multiline':False]['text':'!','line_number':1156,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's value initialization throws.','line_number':1157,'multiline':False]['text':'!','line_number':1158,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1159,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1171,'multiline':False]['text':'!   the size becomes n. New elements are default initialized.','line_number':1172,'multiline':False]['text':'!','line_number':1173,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's default initialization throws.','line_number':1174,'multiline':False]['text':'!','line_number':1175,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1176,'multiline':False]['text':'!','line_number':1177,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1178,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1189,'multiline':False]['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':1190,'multiline':False]['text':'!','line_number':1191,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':1192,'multiline':False]['text':'!','line_number':1193,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1194,'multiline':False]['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':1204,'multiline':False]['text':'!   capacity() is always greater than or equal to size().','line_number':1205,'multiline':False]['text':'!','line_number':1206,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1207,'multiline':False]['text':'!','line_number':1208,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1209,'multiline':False]['text':'Pool count must be less than index capacity, as index is a vector','line_number':1216,'multiline':False]['text':'! <b>Effects</b>: If n is less than or equal to capacity(), this call has no','line_number':1223,'multiline':False]['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':1224,'multiline':False]['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':1225,'multiline':False]['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':1226,'multiline':False]['text':'!','line_number':1227,'multiline':False]['text':'! <b>Throws</b>: If memory allocation allocation throws.','line_number':1228,'multiline':False]['text':'Fix the pointers for the newly allocated buffer','line_number':1243,'multiline':False]['text':'Now fill pool if data is not enough','line_number':1247,'multiline':False]['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':1254,'multiline':False]['text':'!   with previous allocations. The size of the stable_vector is unchanged','line_number':1255,'multiline':False]['text':'!','line_number':1256,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1257,'multiline':False]['text':'!','line_number':1258,'multiline':False]['text':'! <b>Complexity</b>: Linear to size().','line_number':1259,'multiline':False]['text':'First empty allocated node pool','line_number':1263,'multiline':False]['text':'If empty completely destroy the index, let's recover default-constructed state','line_number':1265,'multiline':False]['text':'Otherwise, try to shrink-to-fit the index and readjust pointers if necessary','line_number':1271,'multiline':False]['text':'Fix the pointers for the newly allocated buffer','line_number':1276,'multiline':False]['text':'////////////////////////////////////////////','line_number':1284,'multiline':False]['text':'','line_number':1285,'multiline':False]['text':'               element access','line_number':1286,'multiline':False]['text':'','line_number':1287,'multiline':False]['text':'////////////////////////////////////////////','line_number':1288,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1290,'multiline':False]['text':'!','line_number':1291,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first','line_number':1292,'multiline':False]['text':'!   element of the container.','line_number':1293,'multiline':False]['text':'!','line_number':1294,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1295,'multiline':False]['text':'!','line_number':1296,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1297,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1305,'multiline':False]['text':'!','line_number':1306,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first','line_number':1307,'multiline':False]['text':'!   element of the container.','line_number':1308,'multiline':False]['text':'!','line_number':1309,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1310,'multiline':False]['text':'!','line_number':1311,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1312,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1320,'multiline':False]['text':'!','line_number':1321,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the last','line_number':1322,'multiline':False]['text':'!   element of the container.','line_number':1323,'multiline':False]['text':'!','line_number':1324,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1325,'multiline':False]['text':'!','line_number':1326,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1327,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1335,'multiline':False]['text':'!','line_number':1336,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the last','line_number':1337,'multiline':False]['text':'!   element of the container.','line_number':1338,'multiline':False]['text':'!','line_number':1339,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1340,'multiline':False]['text':'!','line_number':1341,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1342,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1350,'multiline':False]['text':'!','line_number':1351,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1352,'multiline':False]['text':'!   from the beginning of the container.','line_number':1353,'multiline':False]['text':'!','line_number':1354,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1355,'multiline':False]['text':'!','line_number':1356,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1357,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1365,'multiline':False]['text':'!','line_number':1366,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1367,'multiline':False]['text':'!   from the beginning of the container.','line_number':1368,'multiline':False]['text':'!','line_number':1369,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1370,'multiline':False]['text':'!','line_number':1371,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1372,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1380,'multiline':False]['text':'!','line_number':1381,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the nth element','line_number':1382,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1383,'multiline':False]['text':'!   if n == size().','line_number':1384,'multiline':False]['text':'!','line_number':1385,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1386,'multiline':False]['text':'!','line_number':1387,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1388,'multiline':False]['text':'!','line_number':1389,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1390,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1398,'multiline':False]['text':'!','line_number':1399,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the nth element','line_number':1400,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1401,'multiline':False]['text':'!   if n == size().','line_number':1402,'multiline':False]['text':'!','line_number':1403,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1404,'multiline':False]['text':'!','line_number':1405,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1406,'multiline':False]['text':'!','line_number':1407,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1408,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1416,'multiline':False]['text':'!','line_number':1417,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1418,'multiline':False]['text':'!   and size() if p == end().','line_number':1419,'multiline':False]['text':'!','line_number':1420,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1421,'multiline':False]['text':'!','line_number':1422,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1423,'multiline':False]['text':'!','line_number':1424,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1425,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1430,'multiline':False]['text':'!','line_number':1431,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1432,'multiline':False]['text':'!   and size() if p == end().','line_number':1433,'multiline':False]['text':'!','line_number':1434,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1435,'multiline':False]['text':'!','line_number':1436,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1437,'multiline':False]['text':'!','line_number':1438,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1439,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1444,'multiline':False]['text':'!','line_number':1445,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1446,'multiline':False]['text':'!   from the beginning of the container.','line_number':1447,'multiline':False]['text':'!','line_number':1448,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1449,'multiline':False]['text':'!','line_number':1450,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1451,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1461,'multiline':False]['text':'!','line_number':1462,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1463,'multiline':False]['text':'!   from the beginning of the container.','line_number':1464,'multiline':False]['text':'!','line_number':1465,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1466,'multiline':False]['text':'!','line_number':1467,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1468,'multiline':False]['text':'////////////////////////////////////////////','line_number':1478,'multiline':False]['text':'','line_number':1479,'multiline':False]['text':'                modifiers','line_number':1480,'multiline':False]['text':'','line_number':1481,'multiline':False]['text':'////////////////////////////////////////////','line_number':1482,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1486,'multiline':False]['text':'!   std::forward<Args>(args)... in the end of the stable_vector.','line_number':1487,'multiline':False]['text':'!','line_number':1488,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':1489,'multiline':False]['text':'!','line_number':1490,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws.','line_number':1491,'multiline':False]['text':'!','line_number':1492,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1493,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1503,'multiline':False]['text':'!','line_number':1504,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1505,'multiline':False]['text':'!   std::forward<Args>(args)... before p','line_number':1506,'multiline':False]['text':'!','line_number':1507,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws.','line_number':1508,'multiline':False]['text':'!','line_number':1509,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1510,'multiline':False]['text':'!   Linear time otherwise.','line_number':1511,'multiline':False]['text':'','line_number':1549,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1553,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the end of the stable_vector.','line_number':1556,'multiline':False]['text':'!','line_number':1557,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1558,'multiline':False]['text':'!   T's copy constructor throws.','line_number':1559,'multiline':False]['text':'!','line_number':1560,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1561,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the end of the stable_vector','line_number':1564,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':1565,'multiline':False]['text':'!','line_number':1566,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1567,'multiline':False]['text':'!','line_number':1568,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1569,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1576,'multiline':False]['text':'!','line_number':1577,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of x before p.','line_number':1578,'multiline':False]['text':'!','line_number':1579,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted element.','line_number':1580,'multiline':False]['text':'!','line_number':1581,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or x's copy constructor throws.','line_number':1582,'multiline':False]['text':'!','line_number':1583,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1584,'multiline':False]['text':'!   Linear time otherwise.','line_number':1585,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1588,'multiline':False]['text':'!','line_number':1589,'multiline':False]['text':'! <b>Effects</b>: Insert a new element before p with x's resources.','line_number':1590,'multiline':False]['text':'!','line_number':1591,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':1592,'multiline':False]['text':'!','line_number':1593,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1594,'multiline':False]['text':'!','line_number':1595,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1596,'multiline':False]['text':'!   Linear time otherwise.','line_number':1597,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1603,'multiline':False]['text':'!','line_number':1604,'multiline':False]['text':'! <b>Effects</b>: Insert n copies of x before p.','line_number':1605,'multiline':False]['text':'!','line_number':1606,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if n is 0.','line_number':1607,'multiline':False]['text':'!','line_number':1608,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':1609,'multiline':False]['text':'!','line_number':1610,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1611,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1620,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1622,'multiline':False]['text':'!','line_number':1623,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [il.begin(), il.end()) range before p.','line_number':1624,'multiline':False]['text':'!','line_number':1625,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if first == last.','line_number':1626,'multiline':False]['text':'!','line_number':1627,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [il.begin(), il.end()).','line_number':1628,'multiline':False]['text':'Position checks done by insert()','line_number':1631,'multiline':False]['text':'! <b>Requires</b>: pos must be a valid iterator of *this.','line_number':1637,'multiline':False]['text':'!','line_number':1638,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before p.','line_number':1639,'multiline':False]['text':'!','line_number':1640,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if first == last.','line_number':1641,'multiline':False]['text':'!','line_number':1642,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1643,'multiline':False]['text':'!   dereferenced InpIt throws or T's copy constructor throws.','line_number':1644,'multiline':False]['text':'!','line_number':1645,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [first, last).','line_number':1646,'multiline':False]['text':'Put this as argument instead of the return type as old GCC's like 3.4','line_number':1650,'multiline':False]['text':'detect this and the next disable_if_or as overloads','line_number':1651,'multiline':False]['text':'Fills the node pool and inserts num_new null pointers in idx.','line_number':1682,'multiline':False]['text':'If a new buffer was needed fixes up pointers up to idx so','line_number':1683,'multiline':False]['text':'past-new nodes are not aligned until the end of this function','line_number':1684,'multiline':False]['text':'or in a rollback in case of exception','line_number':1685,'multiline':False]['text':'Prepare rollback','line_number':1689,'multiline':False]['text':'Put it in the index so rollback can return it in pool if construct_in_place throws','line_number':1694,'multiline':False]['text':'Constructs and fixes up pointers This can throw','line_number':1696,'multiline':False]['text':'rollback.~insert_rollback() called in case of exception','line_number':1701,'multiline':False]['text':'Fix up pointers for past-new nodes (new nodes were fixed during construction) and','line_number':1703,'multiline':False]['text':'nodes before insertion p in priv_insert_forward_non_templated(...)','line_number':1704,'multiline':False]['text':'! <b>Effects</b>: Removes the last element from the stable_vector.','line_number':1711,'multiline':False]['text':'!','line_number':1712,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1713,'multiline':False]['text':'!','line_number':1714,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1715,'multiline':False]['text':'! <b>Effects</b>: Erases the element at p.','line_number':1722,'multiline':False]['text':'!','line_number':1723,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1724,'multiline':False]['text':'!','line_number':1725,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements between p and the','line_number':1726,'multiline':False]['text':'!   last element. Constant if p is the last element.','line_number':1727,'multiline':False]['text':'! <b>Effects</b>: Erases the elements pointed by [first, last).','line_number':1740,'multiline':False]['text':'!','line_number':1741,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1742,'multiline':False]['text':'!','line_number':1743,'multiline':False]['text':'! <b>Complexity</b>: Linear to the distance between first and last','line_number':1744,'multiline':False]['text':'!   plus linear to the elements between p and the last element.','line_number':1745,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':1775,'multiline':False]['text':'!','line_number':1776,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1777,'multiline':False]['text':'!','line_number':1778,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1779,'multiline':False]['text':'vector's allocator is swapped here','line_number':1790,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the stable_vector.','line_number':1795,'multiline':False]['text':'!','line_number':1796,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1797,'multiline':False]['text':'!','line_number':1798,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the stable_vector.','line_number':1799,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1803,'multiline':False]['text':'!','line_number':1804,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1805,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1810,'multiline':False]['text':'!','line_number':1811,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1812,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1817,'multiline':False]['text':'!','line_number':1818,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1819,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1824,'multiline':False]['text':'!','line_number':1825,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1826,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1831,'multiline':False]['text':'!','line_number':1832,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1833,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1838,'multiline':False]['text':'!','line_number':1839,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1840,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1845,'multiline':False]['text':'!','line_number':1846,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1847,'multiline':False]['text':'Check range','line_number':1867,'multiline':False]['text':'Now try to fill the pool with new data','line_number':1922,'multiline':False]['text':'Now try to make room in the vector','line_number':1927,'multiline':False]['text':'Fix the pointers for the newly allocated buffer','line_number':1932,'multiline':False]['text':'Enough memory in the pool and in the index','line_number':1950,'multiline':False]['text':'This might throw','line_number':1955,'multiline':False]['text':'This can't throw as there is room for a new elements in the index','line_number':1959,'multiline':False]['text':'Just call more general insert(p, size, value) and return iterator','line_number':1980,'multiline':False]['text':'Precondition: index is not empty','line_number':2051,'multiline':False]['text':'This can throw','line_number':2094,'multiline':False]['text':'This can throw','line_number':2113,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2218,'multiline':False]['text':'namespace container {','line_number':2237,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':2239,'multiline':False]['text':'!specialization for optimizations','line_number':2240,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2252,'multiline':False]['text':'namespace boost{  namespace container {','line_number':2254,'multiline':False]['text':'BOOST_CONTAINER_STABLE_VECTOR_HPP','line_number':2258,'multiline':False]