['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   formatting_ostream.hpp
 * \author Andrey Semashev
 * \date   11.07.2012
 *
 * The header contains implementation of a string stream used for log record formatting.
 ','line_number':7,'multiline':True]['text':' namespace aux','line_number':97,'multiline':False]['text':'!
 * \brief Stream wrapper for log records formatting.
 *
 * This stream wrapper is used by the library for log record formatting. It implements the standard string stream interface
 * with a few differences:
 *
 * \li It does not derive from standard types <tt>std::basic_ostream</tt>, <tt>std::basic_ios</tt> and <tt>std::ios_base</tt>,
 *     although it tries to implement their interfaces closely. There are a few small differences, mostly regarding <tt>rdbuf</tt>
 *     and <tt>str</tt> signatures, as well as the supported insertion operator overloads. The actual wrapped stream can be accessed
 *     through the <tt>stream</tt> methods.
 * \li By default, \c bool values are formatted using alphabetical representation rather than numeric.
 * \li The stream supports writing strings of character types different from the stream character type. The stream will perform
 *     character code conversion as needed using the imbued locale.
 * \li The stream operates on an external string object rather than on the embedded one. The string can be attached or detached
 *     from the stream dynamically.
 *
 * Although <tt>basic_formatting_ostream</tt> does not derive from <tt>std::basic_ostream</tt>, users are not required to add
 * special overloads of \c operator<< for it since the stream will by default reuse the operators for <tt>std::basic_ostream</tt>.
 * However, one can define special overloads of \c operator<< for <tt>basic_formatting_ostream</tt> if a certain type needs
 * special formatting when output to log.
 ','line_number':99,'multiline':True]['text':'! Character type','line_number':124,'multiline':False]['text':'! Character traits','line_number':126,'multiline':False]['text':'! Memory allocator','line_number':128,'multiline':False]['text':'! Stream buffer type','line_number':130,'multiline':False]['text':'! Target string type','line_number':132,'multiline':False]['text':'! Stream type','line_number':135,'multiline':False]['text':'! Stream position type','line_number':137,'multiline':False]['text':'! Stream offset type','line_number':139,'multiline':False]['text':'! Integer type for characters','line_number':141,'multiline':False]['text':' A workaround for Solaris Studio 12.4 compiler, see: https://svn.boost.org/trac/boost/ticket/11545','line_number':164,'multiline':False]['text':'  Function types','line_number':173,'multiline':False]['text':'!
     * Default constructor. Creates an empty record that is equivalent to the invalid record handle.
     * The stream capability is not available after construction.
     *
     * \post <tt>!*this == true</tt>
     ','line_number':222,'multiline':True]['text':'!
     * Initializing constructor. Attaches the string to the constructed stream.
     * The string will be used to store the formatted characters.
     *
     * \post <tt>!*this == false</tt>
     * \param str The string buffer to attach.
     ','line_number':233,'multiline':True]['text':'!
     * Destructor. Destroys the record, releases any sinks and attribute values that were involved in processing this record.
     ','line_number':247,'multiline':True]['text':'!
     * Attaches the stream to the string. The string will be used to store the formatted characters.
     *
     * \param str The string buffer to attach.
     ','line_number':256,'multiline':True]['text':'!
     * Detaches the stream from the string. Any buffered data is flushed to the string.
     ','line_number':266,'multiline':True]['text':'!
     * \returns Reference to the attached string. The string must be attached before calling this method.
     ','line_number':275,'multiline':True]['text':'!
     * \returns Reference to the wrapped stream
     ','line_number':288,'multiline':True]['text':'!
     * \returns Reference to the wrapped stream
     ','line_number':293,'multiline':True]['text':' std::ios_base method forwarders','line_number':298,'multiline':False]['text':' std::basic_ios method forwarders','line_number':322,'multiline':False]['text':' std::basic_ostream method forwarders','line_number':359,'multiline':False]['text':' When no native character type is supported, the following overloads are disabled as they have ambiguous meaning.','line_number':443,'multiline':False]['text':' Use basic_string_view or basic_string to explicitly indicate that the data is a string.','line_number':444,'multiline':False]['text':' Deprecated overload','line_number':588,'multiline':False]['text':' Deprecated overload','line_number':626,'multiline':False]['text':' Deprecated overload','line_number':665,'multiline':False]['text':' Deprecated overload','line_number':703,'multiline':False]['text':' !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':710,'multiline':False]['text':' this differs from the default stream flags but makes logs look better','line_number':721,'multiline':False]['text':'! Copy constructor (closed)','line_number':777,'multiline':False]['text':'! Assignment (closed)','line_number':779,'multiline':False]['text':' Implementation note: these operators below should be the least attractive for the compiler','line_number':900,'multiline':False]['text':' so that user's overloads are chosen, when present. We use function template partial ordering for this purpose.','line_number':901,'multiline':False]['text':' We also don't use perfect forwarding for the right hand argument because in this case the generic overload','line_number':902,'multiline':False]['text':' would be more preferred than the typical one written by users:','line_number':903,'multiline':False]['text':'','line_number':904,'multiline':False]['text':' formatting_ostream& operator<< (formatting_ostream& strm, my_type const& arg);','line_number':905,'multiline':False]['text':'','line_number':906,'multiline':False]['text':' This is because my_type rvalues require adding const to the type, which counts as a conversion that is not required','line_number':907,'multiline':False]['text':' if there is a perfect forwarding overload.','line_number':908,'multiline':False]['text':' !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':959,'multiline':False]['text':' namespace log','line_number':961,'multiline':False]['text':' namespace boost','line_number':963,'multiline':False]['text':' BOOST_LOG_UTILITY_FORMATTING_OSTREAM_HPP_INCLUDED_','line_number':967,'multiline':False]