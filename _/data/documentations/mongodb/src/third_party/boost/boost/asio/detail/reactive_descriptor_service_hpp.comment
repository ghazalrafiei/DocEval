['text':'','line_number':1,'multiline':False]['text':' detail/reactive_descriptor_service.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' The native type of a descriptor.','line_number':52,'multiline':False]['text':' The implementation type of the descriptor.','line_number':55,'multiline':False]['text':' Default constructor.','line_number':60,'multiline':False]['text':' Only this service will have access to the internal values.','line_number':68,'multiline':False]['text':' The native descriptor representation.','line_number':71,'multiline':False]['text':' The current state of the descriptor.','line_number':74,'multiline':False]['text':' Per-descriptor data used by the reactor.','line_number':77,'multiline':False]['text':' Constructor.','line_number':81,'multiline':False]['text':' Destroy all user-defined handler objects owned by the service.','line_number':84,'multiline':False]['text':' Construct a new descriptor implementation.','line_number':87,'multiline':False]['text':' Move-construct a new descriptor implementation.','line_number':90,'multiline':False]['text':' Move-assign from another descriptor implementation.','line_number':94,'multiline':False]['text':' Destroy a descriptor implementation.','line_number':99,'multiline':False]['text':' Assign a native descriptor to a descriptor implementation.','line_number':102,'multiline':False]['text':' Determine whether the descriptor is open.','line_number':107,'multiline':False]['text':' Destroy a descriptor implementation.','line_number':113,'multiline':False]['text':' Get the native descriptor representation.','line_number':117,'multiline':False]['text':' Release ownership of the native descriptor representation.','line_number':123,'multiline':False]['text':' Cancel all operations associated with the descriptor.','line_number':126,'multiline':False]['text':' Perform an IO control command on the descriptor.','line_number':130,'multiline':False]['text':' Gets the non-blocking mode of the descriptor.','line_number':140,'multiline':False]['text':' Sets the non-blocking mode of the descriptor.','line_number':146,'multiline':False]['text':' Gets the non-blocking mode of the native descriptor implementation.','line_number':155,'multiline':False]['text':' Sets the non-blocking mode of the native descriptor implementation.','line_number':161,'multiline':False]['text':' Wait for the descriptor to become ready to read, ready to write, or to have','line_number':170,'multiline':False]['text':' pending error conditions.','line_number':171,'multiline':False]['text':' Asynchronously wait for the descriptor to become ready to read, ready to','line_number':194,'multiline':False]['text':' write, or to have pending error conditions.','line_number':195,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':207,'multiline':False]['text':' Optionally register for per-operation cancellation.','line_number':235,'multiline':False]['text':' Write some data to the descriptor.','line_number':247,'multiline':False]['text':' Wait until data can be written without blocking.','line_number':270,'multiline':False]['text':' Wait for descriptor to become ready.','line_number':274,'multiline':False]['text':' Start an asynchronous write. The data being sent must be valid for the','line_number':280,'multiline':False]['text':' lifetime of the asynchronous operation.','line_number':281,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':293,'multiline':False]['text':' Optionally register for per-operation cancellation.','line_number':299,'multiline':False]['text':' Start an asynchronous wait until data can be written without blocking.','line_number':317,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':328,'multiline':False]['text':' Optionally register for per-operation cancellation.','line_number':334,'multiline':False]['text':' Read some data from the stream. Returns the number of bytes read.','line_number':350,'multiline':False]['text':' Wait until data can be read without blocking.','line_number':373,'multiline':False]['text':' Wait for descriptor to become ready.','line_number':377,'multiline':False]['text':' Start an asynchronous read. The buffer for the data being read must be','line_number':383,'multiline':False]['text':' valid for the lifetime of the asynchronous operation.','line_number':384,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':397,'multiline':False]['text':' Optionally register for per-operation cancellation.','line_number':403,'multiline':False]['text':' Wait until data can be read without blocking.','line_number':421,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':432,'multiline':False]['text':' Optionally register for per-operation cancellation.','line_number':438,'multiline':False]['text':' Start the asynchronous operation.','line_number':455,'multiline':False]['text':' Helper class used to implement per-operation cancellation','line_number':459,'multiline':False]['text':' The selector that performs event demultiplexing for the service.','line_number':491,'multiline':False]['text':' Cached success value to avoid accessing category singleton.','line_number':494,'multiline':False]['text':' namespace detail','line_number':498,'multiline':False]['text':' namespace asio','line_number':499,'multiline':False]['text':' namespace boost','line_number':500,'multiline':False]['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':506,'multiline':False]['text':' !defined(BOOST_ASIO_WINDOWS)','line_number':508,'multiline':False]['text':'   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)','line_number':509,'multiline':False]['text':'   && !defined(__CYGWIN__)','line_number':510,'multiline':False]['text':'   && !defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':511,'multiline':False]['text':' BOOST_ASIO_DETAIL_REACTIVE_DESCRIPTOR_SERVICE_HPP','line_number':513,'multiline':False]