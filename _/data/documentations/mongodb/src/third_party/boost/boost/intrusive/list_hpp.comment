['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2006-2014','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]['text':'std::size_t, etc.','line_number':43,'multiline':False]['text':'/ @cond','line_number':52,'multiline':False]['text':'/ @endcond','line_number':69,'multiline':False]['text':'! The class template list is an intrusive container that mimics most of the','line_number':71,'multiline':False]['text':'! interface of std::list as described in the C++ standard.','line_number':72,'multiline':False]['text':'!','line_number':73,'multiline':False]['text':'! The template parameter \c T is the type to be managed by the container.','line_number':74,'multiline':False]['text':'! The user can specify additional options and if no options are provided','line_number':75,'multiline':False]['text':'! default options are used.','line_number':76,'multiline':False]['text':'!','line_number':77,'multiline':False]['text':'! The container supports the following options:','line_number':78,'multiline':False]['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':79,'multiline':False]['text':'! \c constant_time_size<> and \c size_type<>.','line_number':80,'multiline':False]['text':'Public typedefs','line_number':88,'multiline':False]['text':'/ @cond','line_number':115,'multiline':False]['text':'noncopyable','line_number':120,'multiline':False]['text':'Constant-time size is incompatible with auto-unlink hooks!','line_number':125,'multiline':False]['text':'/ @endcond','line_number':169,'multiline':False]['text':'! <b>Effects</b>: constructs an empty list.','line_number':173,'multiline':False]['text':'!','line_number':174,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':175,'multiline':False]['text':'!','line_number':176,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':177,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':178,'multiline':False]['text':'! <b>Effects</b>: constructs an empty list.','line_number':186,'multiline':False]['text':'!','line_number':187,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':188,'multiline':False]['text':'!','line_number':189,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':190,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':191,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue of type value_type.','line_number':199,'multiline':False]['text':'!','line_number':200,'multiline':False]['text':'! <b>Effects</b>: Constructs a list equal to the range [first,last).','line_number':201,'multiline':False]['text':'!','line_number':202,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(b, e). No copy constructors are called.','line_number':203,'multiline':False]['text':'!','line_number':204,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':205,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':206,'multiline':False]['text':'nothrow, no need to rollback to release elements on exception','line_number':211,'multiline':False]['text':'nothrow, no need to rollback to release elements on exception','line_number':214,'multiline':False]['text':'! <b>Effects</b>: Constructs a container moving resources from another container.','line_number':218,'multiline':False]['text':'!   Internal value traits are move constructed and','line_number':219,'multiline':False]['text':'!   nodes belonging to x (except the node representing the "end") are linked to *this.','line_number':220,'multiline':False]['text':'!','line_number':221,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':222,'multiline':False]['text':'!','line_number':223,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node's','line_number':224,'multiline':False]['text':'!   move constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':225,'multiline':False]['text':'!   or the move constructor of value traits throws.','line_number':226,'multiline':False]['text':'nothrow, no need to rollback to release elements on exception','line_number':232,'multiline':False]['text':'! <b>Effects</b>: Equivalent to swap','line_number':236,'multiline':False]['text':'!','line_number':237,'multiline':False]['text':'! <b>Effects</b>: If it's not a safe-mode or an auto-unlink value_type','line_number':241,'multiline':False]['text':'!   the destructor does nothing','line_number':242,'multiline':False]['text':'!   (ie. no code is generated). Otherwise it detaches all elements from this.','line_number':243,'multiline':False]['text':'!   In this case the objects in the list are not deleted (i.e. no destructors','line_number':244,'multiline':False]['text':'!   are called), but the hooks according to the ValueTraits template parameter','line_number':245,'multiline':False]['text':'!   are set to their default value.','line_number':246,'multiline':False]['text':'!','line_number':247,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':248,'multiline':False]['text':'! ','line_number':249,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the list, if','line_number':250,'multiline':False]['text':'!   it's a safe-mode or auto-unlink value . Otherwise constant.','line_number':251,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue.','line_number':260,'multiline':False]['text':'!','line_number':261,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the back of the list.','line_number':262,'multiline':False]['text':'!   No copy constructors are called.','line_number':263,'multiline':False]['text':'!','line_number':264,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':265,'multiline':False]['text':'!','line_number':266,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':267,'multiline':False]['text':'!','line_number':268,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':269,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue.','line_number':278,'multiline':False]['text':'!','line_number':279,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the front of the list.','line_number':280,'multiline':False]['text':'!   No copy constructors are called.','line_number':281,'multiline':False]['text':'!','line_number':282,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':283,'multiline':False]['text':'!','line_number':284,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':285,'multiline':False]['text':'!','line_number':286,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':287,'multiline':False]['text':'! <b>Effects</b>: Erases the last element of the list.','line_number':296,'multiline':False]['text':'!   No destructors are called.','line_number':297,'multiline':False]['text':'!','line_number':298,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':299,'multiline':False]['text':'!','line_number':300,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':301,'multiline':False]['text':'!','line_number':302,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the erased element.','line_number':303,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':307,'multiline':False]['text':'!','line_number':308,'multiline':False]['text':'! <b>Effects</b>: Erases the last element of the list.','line_number':309,'multiline':False]['text':'!   No destructors are called.','line_number':310,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':311,'multiline':False]['text':'!','line_number':312,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':313,'multiline':False]['text':'!','line_number':314,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':315,'multiline':False]['text':'!','line_number':316,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':317,'multiline':False]['text':'! <b>Effects</b>: Erases the first element of the list.','line_number':329,'multiline':False]['text':'!   No destructors are called.','line_number':330,'multiline':False]['text':'!','line_number':331,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':332,'multiline':False]['text':'!','line_number':333,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':334,'multiline':False]['text':'!','line_number':335,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the erased element.','line_number':336,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':340,'multiline':False]['text':'!','line_number':341,'multiline':False]['text':'! <b>Effects</b>: Erases the first element of the list.','line_number':342,'multiline':False]['text':'!   No destructors are called.','line_number':343,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':344,'multiline':False]['text':'!','line_number':345,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':346,'multiline':False]['text':'!','line_number':347,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':348,'multiline':False]['text':'!','line_number':349,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':350,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first element of the list.','line_number':362,'multiline':False]['text':'!','line_number':363,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':364,'multiline':False]['text':'!','line_number':365,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':366,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reference to the first element of the list.','line_number':370,'multiline':False]['text':'!','line_number':371,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':372,'multiline':False]['text':'!','line_number':373,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':374,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the last element of the list.','line_number':378,'multiline':False]['text':'!','line_number':379,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':380,'multiline':False]['text':'!','line_number':381,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':382,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reference to the last element of the list.','line_number':386,'multiline':False]['text':'!','line_number':387,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':388,'multiline':False]['text':'!','line_number':389,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':390,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the list.','line_number':394,'multiline':False]['text':'!','line_number':395,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':396,'multiline':False]['text':'!','line_number':397,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':398,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':402,'multiline':False]['text':'!','line_number':403,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':404,'multiline':False]['text':'!','line_number':405,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':406,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':410,'multiline':False]['text':'!','line_number':411,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':412,'multiline':False]['text':'!','line_number':413,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':414,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the list.','line_number':418,'multiline':False]['text':'!','line_number':419,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':420,'multiline':False]['text':'!','line_number':421,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':422,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':426,'multiline':False]['text':'!','line_number':427,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':428,'multiline':False]['text':'!','line_number':429,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':430,'multiline':False]['text':'! <b>Effects</b>: Returns a constant iterator to the end of the list.','line_number':434,'multiline':False]['text':'!','line_number':435,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':436,'multiline':False]['text':'!','line_number':437,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':438,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':442,'multiline':False]['text':'! of the reversed list.','line_number':443,'multiline':False]['text':'!','line_number':444,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':445,'multiline':False]['text':'!','line_number':446,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':447,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':451,'multiline':False]['text':'! of the reversed list.','line_number':452,'multiline':False]['text':'!','line_number':453,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':454,'multiline':False]['text':'!','line_number':455,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':456,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':460,'multiline':False]['text':'! of the reversed list.','line_number':461,'multiline':False]['text':'!','line_number':462,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':463,'multiline':False]['text':'!','line_number':464,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':465,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':469,'multiline':False]['text':'! of the reversed list.','line_number':470,'multiline':False]['text':'!','line_number':471,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':472,'multiline':False]['text':'!','line_number':473,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':474,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':478,'multiline':False]['text':'! of the reversed list.','line_number':479,'multiline':False]['text':'!','line_number':480,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':481,'multiline':False]['text':'!','line_number':482,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':483,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':487,'multiline':False]['text':'! of the reversed list.','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':490,'multiline':False]['text':'!','line_number':491,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':492,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end iterator','line_number':496,'multiline':False]['text':'!   of list.','line_number':497,'multiline':False]['text':'!','line_number':498,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the list associated to the end iterator','line_number':499,'multiline':False]['text':'!','line_number':500,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':501,'multiline':False]['text':'!','line_number':502,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':503,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end const_iterator','line_number':507,'multiline':False]['text':'!   of list.','line_number':508,'multiline':False]['text':'!','line_number':509,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the list associated to the end iterator','line_number':510,'multiline':False]['text':'!','line_number':511,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':512,'multiline':False]['text':'!','line_number':513,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':514,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the list.','line_number':518,'multiline':False]['text':'!','line_number':519,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':520,'multiline':False]['text':'!','line_number':521,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements contained in the list.','line_number':522,'multiline':False]['text':'!   if constant-time size option is disabled. Constant time otherwise.','line_number':523,'multiline':False]['text':'!','line_number':524,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':525,'multiline':False]['text':'! <b>Effects</b>: Returns true if the list contains no elements.','line_number':534,'multiline':False]['text':'!','line_number':535,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':536,'multiline':False]['text':'!','line_number':537,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':538,'multiline':False]['text':'!','line_number':539,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':540,'multiline':False]['text':'! <b>Effects</b>: Swaps the elements of x and *this.','line_number':544,'multiline':False]['text':'!','line_number':545,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':546,'multiline':False]['text':'!','line_number':547,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':548,'multiline':False]['text':'!','line_number':549,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':550,'multiline':False]['text':'! <b>Effects</b>: Moves backwards all the elements, so that the first','line_number':557,'multiline':False]['text':'!   element becomes the second, the second becomes the third...','line_number':558,'multiline':False]['text':'!   the last element becomes the first one.','line_number':559,'multiline':False]['text':'!','line_number':560,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':561,'multiline':False]['text':'!','line_number':562,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of shifts.','line_number':563,'multiline':False]['text':'!','line_number':564,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':565,'multiline':False]['text':'! <b>Effects</b>: Moves forward all the elements, so that the second','line_number':569,'multiline':False]['text':'!   element becomes the first, the third becomes the second...','line_number':570,'multiline':False]['text':'!   the first element becomes the last one.','line_number':571,'multiline':False]['text':'!','line_number':572,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':573,'multiline':False]['text':'!','line_number':574,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of shifts.','line_number':575,'multiline':False]['text':'!','line_number':576,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':577,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed by i of the list.','line_number':581,'multiline':False]['text':'!   No destructors are called.','line_number':582,'multiline':False]['text':'!','line_number':583,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed element,','line_number':584,'multiline':False]['text':'!   or end() if no such element exists.','line_number':585,'multiline':False]['text':'!','line_number':586,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':587,'multiline':False]['text':'!','line_number':588,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':589,'multiline':False]['text':'!','line_number':590,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':591,'multiline':False]['text':'!   erased element.','line_number':592,'multiline':False]['text':'! <b>Requires</b>: b and e must be valid iterators to elements in *this.','line_number':596,'multiline':False]['text':'!','line_number':597,'multiline':False]['text':'! <b>Effects</b>: Erases the element range pointed by b and e','line_number':598,'multiline':False]['text':'! No destructors are called.','line_number':599,'multiline':False]['text':'!','line_number':600,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':601,'multiline':False]['text':'!   or end() if no such element exists.','line_number':602,'multiline':False]['text':'!','line_number':603,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':604,'multiline':False]['text':'!','line_number':605,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of erased elements if it's a safe-mode','line_number':606,'multiline':False]['text':'!   or auto-unlink value, or constant-time size is enabled. Constant-time otherwise.','line_number':607,'multiline':False]['text':'!','line_number':608,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':609,'multiline':False]['text':'!   erased elements.','line_number':610,'multiline':False]['text':'! <b>Requires</b>: b and e must be valid iterators to elements in *this.','line_number':622,'multiline':False]['text':'!   n must be distance(b, e).','line_number':623,'multiline':False]['text':'!','line_number':624,'multiline':False]['text':'! <b>Effects</b>: Erases the element range pointed by b and e','line_number':625,'multiline':False]['text':'! No destructors are called.','line_number':626,'multiline':False]['text':'!','line_number':627,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':628,'multiline':False]['text':'!   or end() if no such element exists.','line_number':629,'multiline':False]['text':'!','line_number':630,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':631,'multiline':False]['text':'!','line_number':632,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of erased elements if it's a safe-mode','line_number':633,'multiline':False]['text':'!   or auto-unlink value is enabled. Constant-time otherwise.','line_number':634,'multiline':False]['text':'!','line_number':635,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':636,'multiline':False]['text':'!   erased elements.','line_number':637,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':654,'multiline':False]['text':'!','line_number':655,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed by i of the list.','line_number':656,'multiline':False]['text':'!   No destructors are called.','line_number':657,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':658,'multiline':False]['text':'!','line_number':659,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed element,','line_number':660,'multiline':False]['text':'!   or end() if no such element exists.','line_number':661,'multiline':False]['text':'!','line_number':662,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':663,'multiline':False]['text':'!','line_number':664,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':665,'multiline':False]['text':'!','line_number':666,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':667,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':687,'multiline':False]['text':'!','line_number':688,'multiline':False]['text':'! <b>Effects</b>: Erases the element range pointed by b and e','line_number':689,'multiline':False]['text':'!   No destructors are called.','line_number':690,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':691,'multiline':False]['text':'!','line_number':692,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':693,'multiline':False]['text':'!   or end() if no such element exists.','line_number':694,'multiline':False]['text':'!','line_number':695,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':696,'multiline':False]['text':'!','line_number':697,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements erased.','line_number':698,'multiline':False]['text':'!','line_number':699,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased elements.','line_number':700,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the container.','line_number':717,'multiline':False]['text':'!   No destructors are called.','line_number':718,'multiline':False]['text':'!','line_number':719,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':720,'multiline':False]['text':'!','line_number':721,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements of the list.','line_number':722,'multiline':False]['text':'!   if it's a safe-mode or auto-unlink value_type. Constant time otherwise.','line_number':723,'multiline':False]['text':'!','line_number':724,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the erased elements.','line_number':725,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':737,'multiline':False]['text':'!','line_number':738,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the container.','line_number':739,'multiline':False]['text':'!   No destructors are called.','line_number':740,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':741,'multiline':False]['text':'!','line_number':742,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':743,'multiline':False]['text':'!','line_number':744,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements of the list.','line_number':745,'multiline':False]['text':'!','line_number':746,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased elements.','line_number':747,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':763,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':764,'multiline':False]['text':'!','line_number':765,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':766,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':767,'multiline':False]['text':'!   elements from src calling Cloner::operator()(const_reference )','line_number':768,'multiline':False]['text':'!   and inserts them on *this.','line_number':769,'multiline':False]['text':'!','line_number':770,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':771,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':772,'multiline':False]['text':'!','line_number':773,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':774,'multiline':False]['text':'!','line_number':775,'multiline':False]['text':'! <b>Throws</b>: If cloner throws. Basic guarantee.','line_number':776,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':790,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':791,'multiline':False]['text':'!','line_number':792,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':793,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':794,'multiline':False]['text':'!   elements from src calling Cloner::operator()(reference)','line_number':795,'multiline':False]['text':'!   and inserts them on *this.','line_number':796,'multiline':False]['text':'!','line_number':797,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':798,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':799,'multiline':False]['text':'!','line_number':800,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':801,'multiline':False]['text':'!','line_number':802,'multiline':False]['text':'! <b>Throws</b>: If cloner throws. Basic guarantee.','line_number':803,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and p must be a valid iterator of *this.','line_number':817,'multiline':False]['text':'!','line_number':818,'multiline':False]['text':'! <b>Effects</b>: Inserts the value before the position pointed by p.','line_number':819,'multiline':False]['text':'!','line_number':820,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted element.','line_number':821,'multiline':False]['text':'!','line_number':822,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':823,'multiline':False]['text':'!','line_number':824,'multiline':False]['text':'! <b>Complexity</b>: Constant time. No copy constructors are called.','line_number':825,'multiline':False]['text':'!','line_number':826,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':827,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':837,'multiline':False]['text':'!   an lvalue of type value_type and p must be a valid iterator of *this.','line_number':838,'multiline':False]['text':'!','line_number':839,'multiline':False]['text':'! <b>Effects</b>: Inserts the range pointed by b and e before the position p.','line_number':840,'multiline':False]['text':'!   No copy constructors are called.','line_number':841,'multiline':False]['text':'!','line_number':842,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':843,'multiline':False]['text':'!','line_number':844,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted.','line_number':845,'multiline':False]['text':'!','line_number':846,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':847,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':855,'multiline':False]['text':'!   an lvalue of type value_type.','line_number':856,'multiline':False]['text':'!','line_number':857,'multiline':False]['text':'! <b>Effects</b>: Clears the list and inserts the range pointed by b and e.','line_number':858,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':859,'multiline':False]['text':'!','line_number':860,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':861,'multiline':False]['text':'!','line_number':862,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted plus','line_number':863,'multiline':False]['text':'!   linear to the elements contained in the list if it's a safe-mode','line_number':864,'multiline':False]['text':'!   or auto-unlink value.','line_number':865,'multiline':False]['text':'!   Linear to the number of elements inserted in the list otherwise.','line_number':866,'multiline':False]['text':'!','line_number':867,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':868,'multiline':False]['text':'!   to the erased elements.','line_number':869,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':877,'multiline':False]['text':'!','line_number':878,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':879,'multiline':False]['text':'!   an lvalue of type value_type.','line_number':880,'multiline':False]['text':'!','line_number':881,'multiline':False]['text':'! <b>Effects</b>: Clears the list and inserts the range pointed by b and e.','line_number':882,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':883,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':884,'multiline':False]['text':'!','line_number':885,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':886,'multiline':False]['text':'!','line_number':887,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted plus','line_number':888,'multiline':False]['text':'!   linear to the elements contained in the list.','line_number':889,'multiline':False]['text':'!','line_number':890,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':891,'multiline':False]['text':'!   to the erased elements.','line_number':892,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':900,'multiline':False]['text':'!','line_number':901,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':902,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':903,'multiline':False]['text':'!','line_number':904,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':905,'multiline':False]['text':'!','line_number':906,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':907,'multiline':False]['text':'!','line_number':908,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':909,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':910,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':923,'multiline':False]['text':'!   new_ele must point to an element contained in list x.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by new_ele, from list x to this list,','line_number':926,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':927,'multiline':False]['text':'!   If p == new_ele or p == ++new_ele, this function is a null operation.','line_number':928,'multiline':False]['text':'!','line_number':929,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':930,'multiline':False]['text':'!','line_number':931,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':932,'multiline':False]['text':'!','line_number':933,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':934,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':935,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':943,'multiline':False]['text':'!   f and e must point to elements contained in list x.','line_number':944,'multiline':False]['text':'!','line_number':945,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by f and e from list x to this list,','line_number':946,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':947,'multiline':False]['text':'!','line_number':948,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':949,'multiline':False]['text':'!','line_number':950,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred','line_number':951,'multiline':False]['text':'!   if constant-time size option is enabled. Constant-time otherwise.','line_number':952,'multiline':False]['text':'!','line_number':953,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':954,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':955,'multiline':False]['text':'intrusive::iterator_distance is a dummy value','line_number':961,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':964,'multiline':False]['text':'!   f and e must point to elements contained in list x.','line_number':965,'multiline':False]['text':'!   n == distance(f, e)','line_number':966,'multiline':False]['text':'!','line_number':967,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by f and e from list x to this list,','line_number':968,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':969,'multiline':False]['text':'!','line_number':970,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':971,'multiline':False]['text':'!','line_number':972,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':973,'multiline':False]['text':'!','line_number':974,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':975,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':976,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to operator <.','line_number':994,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':995,'multiline':False]['text':'!','line_number':996,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':997,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':998,'multiline':False]['text':'!   or operator < throws. Basic guarantee.','line_number':999,'multiline':False]['text':'!','line_number':1000,'multiline':False]['text':'! <b>Notes</b>: Iterators and references are not invalidated.','line_number':1001,'multiline':False]['text':'!','line_number':1002,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1003,'multiline':False]['text':'!   is the list's size.','line_number':1004,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak ordering','line_number':1008,'multiline':False]['text':'!','line_number':1009,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to p. The sort is','line_number':1010,'multiline':False]['text':'!   stable, that is, the relative order of equivalent elements is preserved.','line_number':1011,'multiline':False]['text':'!','line_number':1012,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':1013,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1014,'multiline':False]['text':'!   or the predicate throws. Basic guarantee.','line_number':1015,'multiline':False]['text':'!','line_number':1016,'multiline':False]['text':'! <b>Notes</b>: This won't throw if list_base_hook<> or','line_number':1017,'multiline':False]['text':'!   list_member_hook are used.','line_number':1018,'multiline':False]['text':'!   Iterators and references are not invalidated.','line_number':1019,'multiline':False]['text':'!','line_number':1020,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1021,'multiline':False]['text':'!   is the list's size.','line_number':1022,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1048,'multiline':False]['text':'!   in order into *this according to operator <. The merge is stable;','line_number':1049,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1050,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1051,'multiline':False]['text':'!','line_number':1052,'multiline':False]['text':'! <b>Throws</b>: If operator < throws. Basic guarantee.','line_number':1053,'multiline':False]['text':'!','line_number':1054,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1055,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1056,'multiline':False]['text':'!','line_number':1057,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1058,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1062,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1063,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1064,'multiline':False]['text':'!','line_number':1065,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1066,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1067,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1068,'multiline':False]['text':'!','line_number':1069,'multiline':False]['text':'! <b>Throws</b>: If the predicate throws. Basic guarantee.','line_number':1070,'multiline':False]['text':'!','line_number':1071,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1072,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1073,'multiline':False]['text':'!','line_number':1074,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1075,'multiline':False]['text':'Now transfer the rest to the end of the container','line_number':1087,'multiline':False]['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':1101,'multiline':False]['text':'!','line_number':1102,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1103,'multiline':False]['text':'!','line_number':1104,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time.','line_number':1105,'multiline':False]['text':'!','line_number':1106,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1107,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1111,'multiline':False]['text':'!   No destructors are called.','line_number':1112,'multiline':False]['text':'!','line_number':1113,'multiline':False]['text':'! <b>Throws</b>: If operator == throws. Basic guarantee.','line_number':1114,'multiline':False]['text':'!','line_number':1115,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1116,'multiline':False]['text':'!','line_number':1117,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1118,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1119,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1123,'multiline':False]['text':'!','line_number':1124,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1125,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1126,'multiline':False]['text':'!','line_number':1127,'multiline':False]['text':'! <b>Throws</b>: If operator == throws. Basic guarantee.','line_number':1128,'multiline':False]['text':'!','line_number':1129,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1130,'multiline':False]['text':'!','line_number':1131,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1132,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1133,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1138,'multiline':False]['text':'!   predicate is satisfied. No destructors are called.','line_number':1139,'multiline':False]['text':'!','line_number':1140,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1141,'multiline':False]['text':'!','line_number':1142,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() calls to the predicate.','line_number':1143,'multiline':False]['text':'!','line_number':1144,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1145,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1146,'multiline':False]['text':'Invariants preserved by stable_partition so erase can be safely called','line_number':1154,'multiline':False]['text':'The first element might have changed so calculate it again','line_number':1155,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1161,'multiline':False]['text':'!','line_number':1162,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1163,'multiline':False]['text':'!   predicate is satisfied.','line_number':1164,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1165,'multiline':False]['text':'!','line_number':1166,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1167,'multiline':False]['text':'!','line_number':1168,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1169,'multiline':False]['text':'!','line_number':1170,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1171,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1172,'multiline':False]['text':'Invariants preserved by stable_partition so erase can be safely called','line_number':1180,'multiline':False]['text':'The first element might have changed so calculate it again','line_number':1181,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1187,'multiline':False]['text':'!   elements that are equal from the list. No destructors are called.','line_number':1188,'multiline':False]['text':'!','line_number':1189,'multiline':False]['text':'! <b>Throws</b>: If std::equal_to<value_type throws. Basic guarantee.','line_number':1190,'multiline':False]['text':'!','line_number':1191,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons calls to pred()).','line_number':1192,'multiline':False]['text':'!','line_number':1193,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1194,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1195,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1199,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1200,'multiline':False]['text':'!   No destructors are called.','line_number':1201,'multiline':False]['text':'!','line_number':1202,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1203,'multiline':False]['text':'!','line_number':1204,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons equality comparisons).','line_number':1205,'multiline':False]['text':'!','line_number':1206,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1207,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1208,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1213,'multiline':False]['text':'!','line_number':1214,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1215,'multiline':False]['text':'!   elements that are equal from the list.','line_number':1216,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1217,'multiline':False]['text':'!','line_number':1218,'multiline':False]['text':'! <b>Throws</b>: If std::equal_to<value_type throws. Basic guarantee.','line_number':1219,'multiline':False]['text':'!','line_number':1220,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons equality comparisons.','line_number':1221,'multiline':False]['text':'!','line_number':1222,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1223,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1224,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1229,'multiline':False]['text':'!','line_number':1230,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1231,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1232,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1233,'multiline':False]['text':'!','line_number':1234,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1235,'multiline':False]['text':'!','line_number':1236,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons equality comparisons.','line_number':1237,'multiline':False]['text':'!','line_number':1238,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1239,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1240,'multiline':False]['text':'! <b>Requires</b>: value must be a reference to a value inserted in a list.','line_number':1262,'multiline':False]['text':'!','line_number':1263,'multiline':False]['text':'! <b>Effects</b>: This function returns a const_iterator pointing to the element','line_number':1264,'multiline':False]['text':'!','line_number':1265,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1266,'multiline':False]['text':'!','line_number':1267,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1268,'multiline':False]['text':'!','line_number':1269,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1270,'multiline':False]['text':'!   This static function is available only if the <i>value traits</i>','line_number':1271,'multiline':False]['text':'!   is stateless.','line_number':1272,'multiline':False]['text':'! <b>Requires</b>: value must be a const reference to a value inserted in a list.','line_number':1280,'multiline':False]['text':'!','line_number':1281,'multiline':False]['text':'! <b>Effects</b>: This function returns an iterator pointing to the element.','line_number':1282,'multiline':False]['text':'!','line_number':1283,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1284,'multiline':False]['text':'!','line_number':1285,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1286,'multiline':False]['text':'!','line_number':1287,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1288,'multiline':False]['text':'!   This static function is available only if the <i>value traits</i>','line_number':1289,'multiline':False]['text':'!   is stateless.','line_number':1290,'multiline':False]['text':'! <b>Requires</b>: value must be a reference to a value inserted in a list.','line_number':1299,'multiline':False]['text':'!','line_number':1300,'multiline':False]['text':'! <b>Effects</b>: This function returns a const_iterator pointing to the element','line_number':1301,'multiline':False]['text':'!','line_number':1302,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1303,'multiline':False]['text':'!','line_number':1304,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1305,'multiline':False]['text':'!','line_number':1306,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1307,'multiline':False]['text':'! <b>Requires</b>: value must be a const reference to a value inserted in a list.','line_number':1314,'multiline':False]['text':'!','line_number':1315,'multiline':False]['text':'! <b>Effects</b>: This function returns an iterator pointing to the element.','line_number':1316,'multiline':False]['text':'!','line_number':1317,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1318,'multiline':False]['text':'!','line_number':1319,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1320,'multiline':False]['text':'!','line_number':1321,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1322,'multiline':False]['text':'! <b>Effects</b>: Asserts the integrity of the container.','line_number':1330,'multiline':False]['text':'!','line_number':1331,'multiline':False]['text':'! <b>Complexity</b>: Linear time.','line_number':1332,'multiline':False]['text':'!','line_number':1333,'multiline':False]['text':'! <b>Note</b>: The method has no effect when asserts are turned off (e.g., with NDEBUG).','line_number':1334,'multiline':False]['text':'!   Experimental function, interface might change in future versions.','line_number':1335,'multiline':False]['text':' header's next and prev are never null','line_number':1339,'multiline':False]['text':' header's next and prev either both point to header (empty list) or neither does','line_number':1342,'multiline':False]['text':'/ @cond','line_number':1392,'multiline':False]['text':'/ @endcond','line_number':1407,'multiline':False]['text':'! Helper metafunction to define a \c list that yields to the same type when the','line_number':1411,'multiline':False]['text':'! same options (either explicitly or implicitly) are used.','line_number':1412,'multiline':False]['text':'/ @cond','line_number':1420,'multiline':False]['text':'/ @endcond','line_number':1439,'multiline':False]['text':'Assert if passed value traits are compatible with the type','line_number':1468,'multiline':False]['text':'namespace intrusive','line_number':1514,'multiline':False]['text':'namespace boost','line_number':1515,'multiline':False]['text':'BOOST_INTRUSIVE_LIST_HPP','line_number':1519,'multiline':False]