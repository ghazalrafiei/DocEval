['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file c_regex_traits.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of the c_regex_traits\<\> template, which is a','line_number':3,'multiline':False]['text':'/ wrapper for the C locale functions that can be used to customize the','line_number':4,'multiline':False]['text':'/ behavior of static and dynamic regexes.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':14,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]['text':' empty_locale','line_number':30,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':35,'multiline':False]['text':' c_regex_traits_base','line_number':36,'multiline':False]['text':' namespace detail','line_number':105,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':107,'multiline':False]['text':' regex_traits_version_1_tag','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':112,'multiline':False]['text':' c_regex_traits','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':'/ \brief Encapsaulates the standard C locale functions for use by the','line_number':115,'multiline':False]['text':'/ \c basic_regex\<\> class template.','line_number':116,'multiline':False]['text':'/ Initialize a c_regex_traits object to use the global C locale.','line_number':128,'multiline':False]['text':'/','line_number':129,'multiline':False]['text':'/ Checks two c_regex_traits objects for equality','line_number':136,'multiline':False]['text':'/','line_number':137,'multiline':False]['text':'/ \return true.','line_number':138,'multiline':False]['text':'/ Checks two c_regex_traits objects for inequality','line_number':144,'multiline':False]['text':'/','line_number':145,'multiline':False]['text':'/ \return false.','line_number':146,'multiline':False]['text':'/ Convert a char to a Char','line_number':152,'multiline':False]['text':'/','line_number':153,'multiline':False]['text':'/ \param ch The source character.','line_number':154,'multiline':False]['text':'/ \return ch if Char is char, std::btowc(ch) if Char is wchar_t.','line_number':155,'multiline':False]['text':'/ Returns a hash value for a Char in the range [0, UCHAR_MAX]','line_number':158,'multiline':False]['text':'/','line_number':159,'multiline':False]['text':'/ \param ch The source character.','line_number':160,'multiline':False]['text':'/ \return a value between 0 and UCHAR_MAX, inclusive.','line_number':161,'multiline':False]['text':'/ No-op','line_number':167,'multiline':False]['text':'/','line_number':168,'multiline':False]['text':'/ \param ch The source character.','line_number':169,'multiline':False]['text':'/ \return ch','line_number':170,'multiline':False]['text':'/ Converts a character to lower-case using the current global C locale.','line_number':176,'multiline':False]['text':'/','line_number':177,'multiline':False]['text':'/ \param ch The source character.','line_number':178,'multiline':False]['text':'/ \return std::tolower(ch) if Char is char, std::towlower(ch) if Char is wchar_t.','line_number':179,'multiline':False]['text':'/ Converts a character to lower-case using the current global C locale.','line_number':185,'multiline':False]['text':'/','line_number':186,'multiline':False]['text':'/ \param ch The source character.','line_number':187,'multiline':False]['text':'/ \return std::tolower(ch) if Char is char, std::towlower(ch) if Char is wchar_t.','line_number':188,'multiline':False]['text':'/ Converts a character to upper-case using the current global C locale.','line_number':194,'multiline':False]['text':'/','line_number':195,'multiline':False]['text':'/ \param ch The source character.','line_number':196,'multiline':False]['text':'/ \return std::toupper(ch) if Char is char, std::towupper(ch) if Char is wchar_t.','line_number':197,'multiline':False]['text':'/ Returns a \c string_type containing all the characters that compare equal','line_number':203,'multiline':False]['text':'/ disregrarding case to the one passed in. This function can only be called','line_number':204,'multiline':False]['text':'/ if <tt>has_fold_case\<c_regex_traits\<Char\> \>::value</tt> is \c true.','line_number':205,'multiline':False]['text':'/','line_number':206,'multiline':False]['text':'/ \param ch The source character.','line_number':207,'multiline':False]['text':'/ \return \c string_type containing all chars which are equal to \c ch when disregarding','line_number':208,'multiline':False]['text':'/     case','line_number':209,'multiline':False]['text':'typedef array<char_type, 2> fold_case_type;','line_number':210,'multiline':False]['text':'/ Checks to see if a character is within a character range.','line_number':224,'multiline':False]['text':'/','line_number':225,'multiline':False]['text':'/ \param first The bottom of the range, inclusive.','line_number':226,'multiline':False]['text':'/ \param last The top of the range, inclusive.','line_number':227,'multiline':False]['text':'/ \param ch The source character.','line_number':228,'multiline':False]['text':'/ \return first <= ch && ch <= last.','line_number':229,'multiline':False]['text':'/ Checks to see if a character is within a character range, irregardless of case.','line_number':235,'multiline':False]['text':'/','line_number':236,'multiline':False]['text':'/ \param first The bottom of the range, inclusive.','line_number':237,'multiline':False]['text':'/ \param last The top of the range, inclusive.','line_number':238,'multiline':False]['text':'/ \param ch The source character.','line_number':239,'multiline':False]['text':'/ \return in_range(first, last, ch) || in_range(first, last, tolower(ch)) || in_range(first,','line_number':240,'multiline':False]['text':'/     last, toupper(ch))','line_number':241,'multiline':False]['text':'/ \attention The default implementation doesn't do proper Unicode','line_number':242,'multiline':False]['text':'/     case folding, but this is the best we can do with the standard','line_number':243,'multiline':False]['text':'/     C locale functions.','line_number':244,'multiline':False]['text':'/ Returns a sort key for the character sequence designated by the iterator range [F1, F2)','line_number':252,'multiline':False]['text':'/ such that if the character sequence [G1, G2) sorts before the character sequence [H1, H2)','line_number':253,'multiline':False]['text':'/ then v.transform(G1, G2) < v.transform(H1, H2).','line_number':254,'multiline':False]['text':'/','line_number':255,'multiline':False]['text':'/ \attention Not currently used','line_number':256,'multiline':False]['text':' BUGBUG implement me','line_number':260,'multiline':False]['text':'/ Returns a sort key for the character sequence designated by the iterator range [F1, F2)','line_number':263,'multiline':False]['text':'/ such that if the character sequence [G1, G2) sorts before the character sequence [H1, H2)','line_number':264,'multiline':False]['text':'/ when character case is not considered then','line_number':265,'multiline':False]['text':'/ v.transform_primary(G1, G2) < v.transform_primary(H1, H2).','line_number':266,'multiline':False]['text':'/','line_number':267,'multiline':False]['text':'/ \attention Not currently used','line_number':268,'multiline':False]['text':' BUGBUG implement me','line_number':272,'multiline':False]['text':'/ Returns a sequence of characters that represents the collating element','line_number':275,'multiline':False]['text':'/ consisting of the character sequence designated by the iterator range [F1, F2).','line_number':276,'multiline':False]['text':'/ Returns an empty string if the character sequence is not a valid collating element.','line_number':277,'multiline':False]['text':'/','line_number':278,'multiline':False]['text':'/ \attention Not currently used','line_number':279,'multiline':False]['text':' BUGBUG implement me','line_number':283,'multiline':False]['text':'/ For the character class name represented by the specified character sequence,','line_number':286,'multiline':False]['text':'/ return the corresponding bitmask representation.','line_number':287,'multiline':False]['text':'/','line_number':288,'multiline':False]['text':'/ \param begin A forward iterator to the start of the character sequence representing','line_number':289,'multiline':False]['text':'/     the name of the character class.','line_number':290,'multiline':False]['text':'/ \param end The end of the character sequence.','line_number':291,'multiline':False]['text':'/ \param icase Specifies whether the returned bitmask should represent the case-insensitive','line_number':292,'multiline':False]['text':'/     version of the character class.','line_number':293,'multiline':False]['text':'/ \return A bitmask representing the character class.','line_number':294,'multiline':False]['text':'/ Tests a character against a character class bitmask.','line_number':301,'multiline':False]['text':'/','line_number':302,'multiline':False]['text':'/ \param ch The character to test.','line_number':303,'multiline':False]['text':'/ \param mask The character class bitmask against which to test.','line_number':304,'multiline':False]['text':'/ \pre mask is a bitmask returned by lookup_classname, or is several such masks bit-or'ed','line_number':305,'multiline':False]['text':'/     together.','line_number':306,'multiline':False]['text':'/ \return true if the character is a member of any of the specified character classes, false','line_number':307,'multiline':False]['text':'/     otherwise.','line_number':308,'multiline':False]['text':'/ Convert a digit character into the integer it represents.','line_number':314,'multiline':False]['text':'/','line_number':315,'multiline':False]['text':'/ \param ch The digit character.','line_number':316,'multiline':False]['text':'/ \param radix The radix to use for the conversion.','line_number':317,'multiline':False]['text':'/ \pre radix is one of 8, 10, or 16.','line_number':318,'multiline':False]['text':'/ \return -1 if ch is not a digit character, the integer value of the character otherwise. If','line_number':319,'multiline':False]['text':'/     char_type is char, std::strtol is used for the conversion. If char_type is wchar_t,','line_number':320,'multiline':False]['text':'/     std::wcstol is used.','line_number':321,'multiline':False]['text':'/ No-op','line_number':324,'multiline':False]['text':'/','line_number':325,'multiline':False]['text':'/ No-op','line_number':332,'multiline':False]['text':'/','line_number':333,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':341,'multiline':False]['text':' c_regex_traits<>::widen specializations','line_number':342,'multiline':False]['text':'/ INTERNAL ONLY','line_number':343,'multiline':False]['text':'/ INTERNAL ONLY','line_number':351,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':360,'multiline':False]['text':' c_regex_traits<>::hash specializations','line_number':361,'multiline':False]['text':'/ INTERNAL ONLY','line_number':362,'multiline':False]['text':'/ INTERNAL ONLY','line_number':370,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':378,'multiline':False]['text':' c_regex_traits<>::value specializations','line_number':379,'multiline':False]['text':'/ INTERNAL ONLY','line_number':380,'multiline':False]['text':'/ INTERNAL ONLY','line_number':392,'multiline':False]['text':' Narrow C traits has fold_case() member function.','line_number':404,'multiline':False]