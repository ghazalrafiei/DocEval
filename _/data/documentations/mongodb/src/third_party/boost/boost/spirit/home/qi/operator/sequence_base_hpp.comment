['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':' this class is shared by sequence and expect','line_number':33,'multiline':False]['text':' Put all the element attributes in a tuple','line_number':42,'multiline':False]['text':' Now, build a fusion vector over the attributes. Note','line_number':48,'multiline':False]['text':' that build_fusion_vector 1) removes all unused attributes','line_number':49,'multiline':False]['text':' and 2) may return unused_type if all elements have','line_number':50,'multiline':False]['text':' unused_type(s).','line_number':51,'multiline':False]['text':' Finally, strip single element vectors into its','line_number':56,'multiline':False]['text':' naked form: vector1<T> --> T','line_number':57,'multiline':False]['text':' standard case. Attribute is a fusion tuple','line_number':66,'multiline':False]['text':' wrap the attribute in a tuple if it is not a tuple or if the ','line_number':76,'multiline':False]['text':' attribute of this sequence is a single element tuple','line_number':77,'multiline':False]['text':' return false if *any* of the parsers fail','line_number':86,'multiline':False]['text':' Special case when Attribute is an stl container','line_number':94,'multiline':False]['text':' ensure the attribute is actually a container type','line_number':101,'multiline':False]['text':' return false if *any* of the parsers fail','line_number':105,'multiline':False]['text':' main parse function. Dispatches to parse_impl depending','line_number':115,'multiline':False]['text':' on the Attribute type.','line_number':116,'multiline':False]