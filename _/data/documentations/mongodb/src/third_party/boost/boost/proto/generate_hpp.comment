['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file generate.hpp','line_number':2,'multiline':False]['text':'/ Contains definition of generate\<\> class template, which end users can','line_number':3,'multiline':False]['text':'/ specialize for generating domain-specific expression wrappers.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':6,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':7,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' function 'xxx' marked as __forceinline not inlined','line_number':29,'multiline':False]['text':' Include the other specializations of by_value_generator_','line_number':78,'multiline':False]['text':'/ \brief Annotate a generator to indicate that it would','line_number':82,'multiline':False]['text':'/ prefer to be passed instances of \c proto::basic_expr\<\> rather','line_number':83,'multiline':False]['text':'/ than \c proto::expr\<\>. <tt>use_basic_expr\<Generator\></tt> is','line_number':84,'multiline':False]['text':'/ itself a generator.','line_number':85,'multiline':False]['text':'/','line_number':86,'multiline':False]['text':'/ \brief A simple generator that passes an expression','line_number':94,'multiline':False]['text':'/ through unchanged.','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':97,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':98,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':99,'multiline':False]['text':'/ The \c default_generator makes no modifications to the expressions','line_number':100,'multiline':False]['text':'/ passed to it.','line_number':101,'multiline':False]['text':'/ \param expr A Proto expression','line_number':115,'multiline':False]['text':'/ \return expr','line_number':116,'multiline':False]['text':'/ \brief A simple generator that passes an expression','line_number':126,'multiline':False]['text':'/ through unchanged and specifies a preference for','line_number':127,'multiline':False]['text':'/ \c proto::basic_expr\<\> over \c proto::expr\<\>.','line_number':128,'multiline':False]['text':'/','line_number':129,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':130,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':131,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':132,'multiline':False]['text':'/ The \c default_generator makes no modifications to the expressions','line_number':133,'multiline':False]['text':'/ passed to it.','line_number':134,'multiline':False]['text':'/ \brief A generator that wraps expressions passed','line_number':139,'multiline':False]['text':'/ to it in the specified extension wrapper.','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':142,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':143,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':144,'multiline':False]['text':'/ \c generator\<\> wraps each expression passed to it in','line_number':145,'multiline':False]['text':'/ the \c Extends\<\> wrapper.','line_number':146,'multiline':False]['text':'/ \param expr A Proto expression','line_number':174,'multiline':False]['text':'/ \return Extends<Expr>(expr)','line_number':175,'multiline':False]['text':'/ \brief A generator that wraps expressions passed','line_number':184,'multiline':False]['text':'/ to it in the specified extension wrapper and uses','line_number':185,'multiline':False]['text':'/ aggregate initialization for the wrapper.','line_number':186,'multiline':False]['text':'/','line_number':187,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':188,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':189,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':190,'multiline':False]['text':'/ \c pod_generator\<\> wraps each expression passed to it in','line_number':191,'multiline':False]['text':'/ the \c Extends\<\> wrapper, and uses aggregate initialzation','line_number':192,'multiline':False]['text':'/ for the wrapped object.','line_number':193,'multiline':False]['text':'/ \param expr The expression to wrap','line_number':221,'multiline':False]['text':'/ \return <tt>Extends\<Expr\> that = {expr}; return that;</tt>','line_number':222,'multiline':False]['text':' Work-around for:','line_number':231,'multiline':False]['text':' https://connect.microsoft.com/VisualStudio/feedback/details/765449/codegen-stack-corruption-using-runtime-checks-when-aggregate-initializing-struct','line_number':232,'multiline':False]['text':'/ \brief A generator that replaces child nodes held by','line_number':254,'multiline':False]['text':'/ reference with ones held by value. Use with','line_number':255,'multiline':False]['text':'/ \c compose_generators to forward that result to another','line_number':256,'multiline':False]['text':'/ generator.','line_number':257,'multiline':False]['text':'/','line_number':258,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':259,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':260,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':261,'multiline':False]['text':'/ \c by_value_generator ensures all child nodes are','line_number':262,'multiline':False]['text':'/ held by value. This generator is typically composed with a','line_number':263,'multiline':False]['text':'/ second generator for further processing, as','line_number':264,'multiline':False]['text':'/ <tt>compose_generators\<by_value_generator, MyGenerator\></tt>.','line_number':265,'multiline':False]['text':'/ \param expr The expression to modify.','line_number':297,'multiline':False]['text':'/ \return <tt>deep_copy(expr)</tt>','line_number':298,'multiline':False]['text':'/ \brief A composite generator that first applies one','line_number':307,'multiline':False]['text':'/ transform to an expression and then forwards the result','line_number':308,'multiline':False]['text':'/ on to another generator for further transformation.','line_number':309,'multiline':False]['text':'/','line_number':310,'multiline':False]['text':'/ Generators are intended for use as the first template parameter','line_number':311,'multiline':False]['text':'/ to the \c domain\<\> class template and control if and how','line_number':312,'multiline':False]['text':'/ expressions within that domain are to be customized.','line_number':313,'multiline':False]['text':'/ \c compose_generators\<\> is a composite generator that first','line_number':314,'multiline':False]['text':'/ applies one transform to an expression and then forwards the','line_number':315,'multiline':False]['text':'/ result on to another generator for further transformation.','line_number':316,'multiline':False]['text':'/ \param expr The expression to modify.','line_number':355,'multiline':False]['text':'/ \return Second()(First()(expr))','line_number':356,'multiline':False]['text':'/ \brief Tests a generator to see whether it would prefer','line_number':365,'multiline':False]['text':'/ to be passed instances of \c proto::basic_expr\<\> rather than','line_number':366,'multiline':False]['text':'/ \c proto::expr\<\>.','line_number':367,'multiline':False]['text':'/','line_number':368,'multiline':False]['text':'/ INTERNAL ONLY','line_number':379,'multiline':False]['text':'/ INTERNAL ONLY','line_number':385,'multiline':False]['text':'/ INTERNAL ONLY','line_number':391,'multiline':False]['text':'/ INTERNAL ONLY','line_number':397,'multiline':False]['text':'/ INTERNAL ONLY','line_number':403,'multiline':False]['text':' Specializations of boost::result_of and boost::tr1_result_of to eliminate','line_number':411,'multiline':False]['text':' some unnecessary template instantiations','line_number':412,'multiline':False]['text':' BOOST_PROTO_GENERATE_HPP_EAN_02_13_2007','line_number':470,'multiline':False]