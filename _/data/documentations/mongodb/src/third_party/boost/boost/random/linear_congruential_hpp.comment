['text':' boost random/linear_congruential.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]['text':'*
 * Instantiations of class template linear_congruential_engine model a
 * \pseudo_random_number_generator. Linear congruential pseudo-random
 * number generators are described in:
 *
 *  @blockquote
 *  "Mathematical methods in large-scale computing units", D. H. Lehmer,
 *  Proc. 2nd Symposium on Large-Scale Digital Calculating Machines,
 *  Harvard University Press, 1951, pp. 141-146
 *  @endblockquote
 *
 * Let x(n) denote the sequence of numbers returned by some pseudo-random
 * number generator. Then for the linear congruential generator,
 * x(n+1) := (a * x(n) + c) mod m. Parameters for the generator are
 * x(0), a, c, m. The template parameter IntType shall denote an integral
 * type. It must be large enough to hold values a, c, and m. The template
 * parameters a and c must be smaller than m.
 *
 * Note: The quality of the generator crucially depends on the choice of
 * the parameters. User code should use one of the sensibly parameterized
 * generators such as minstd_rand instead.
 ','line_number':38,'multiline':True]['text':' Required for old Boost.Random concept','line_number':66,'multiline':False]['text':'*
     * Constructs a @c linear_congruential_engine, using the default seed
     ','line_number':78,'multiline':True]['text':'*
     * Constructs a @c linear_congruential_engine, seeding it with @c x0.
     ','line_number':83,'multiline':True]['text':'*
     * Constructs a @c linear_congruential_engine, seeding it with values
     * produced by a call to @c seq.generate().
     ','line_number':90,'multiline':True]['text':'*
     * Constructs a @c linear_congruential_engine  and seeds it
     * with values taken from the itrator range [first, last)
     * and adjusts first to point to the element after the last one
     * used.  If there are not enough elements, throws @c std::invalid_argument.
     *
     * first and last must be input iterators.
     ','line_number':98,'multiline':True]['text':' compiler-generated copy constructor and assignment operator are fine','line_number':112,'multiline':False]['text':'*
     * Calls seed(default_seed)
     ','line_number':114,'multiline':True]['text':'*
     * If c mod m is zero and x0 mod m is zero, changes the current value of
     * the generator to 1. Otherwise, changes it to x0 mod m. If c is zero,
     * distinct seeds in the range [1,m) will leave the generator in distinct
     * states. If c is not zero, the range is [0,m).
     ','line_number':119,'multiline':True]['text':' Work around a msvc 12/14 optimizer bug, which causes','line_number':127,'multiline':False]['text':' the line _x = 1 to run unconditionally sometimes.','line_number':128,'multiline':False]['text':' Creating a local copy seems to make it work.','line_number':129,'multiline':False]['text':' wrap _x if it doesn't fit in the destination','line_number':131,'multiline':False]['text':' handle negative seeds','line_number':137,'multiline':False]['text':' adjust to the correct range','line_number':141,'multiline':False]['text':'*
     * Seeds a @c linear_congruential_engine using values from a SeedSeq.
     ','line_number':149,'multiline':True]['text':'*
     * seeds a @c linear_congruential_engine with values taken
     * from the itrator range [first, last) and adjusts @c first to
     * point to the element after the last one used.  If there are
     * not enough elements, throws @c std::invalid_argument.
     *
     * @c first and @c last must be input iterators.
     ','line_number':155,'multiline':True]['text':'*
     * Returns the smallest value that the @c linear_congruential_engine
     * can produce.
     ','line_number':167,'multiline':True]['text':'*
     * Returns the largest value that the @c linear_congruential_engine
     * can produce.
     ','line_number':173,'multiline':True]['text':'* Returns the next value of the @c linear_congruential_engine. ','line_number':180,'multiline':True]['text':'* Fills a range with random values ','line_number':187,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':192,'multiline':True]['text':' compute (a^z - 1)*c % (b_gcd * m) / (b / b_gcd) * inv(b / b_gcd)','line_number':203,'multiline':False]['text':' we're storing the intermediate result / b_gcd','line_number':204,'multiline':False]['text':'* Writes a @c linear_congruential_engine to a @c std::ostream. ','line_number':238,'multiline':True]['text':'* Reads a @c linear_congruential_engine from a @c std::istream. ','line_number':247,'multiline':True]['text':'/ \cond show_private','line_number':260,'multiline':False]['text':'/ \endcond','line_number':274,'multiline':False]['text':'  A definition is required even for integral static constants','line_number':280,'multiline':False]['text':'/ \cond show_deprecated','line_number':293,'multiline':False]['text':' provided for backwards compatibility','line_number':295,'multiline':False]['text':'/ \endcond','line_number':306,'multiline':False]['text':'*
 * The specialization \minstd_rand0 was originally suggested in
 *
 *  @blockquote
 *  A pseudo-random number generator for the System/360, P.A. Lewis,
 *  A.S. Goodman, J.M. Miller, IBM Systems Journal, Vol. 8, No. 2,
 *  1969, pp. 136-146
 *  @endblockquote
 *
 * It is examined more closely together with \minstd_rand in
 *
 *  @blockquote
 *  "Random Number Generators: Good ones are hard to find",
 *  Stephen K. Park and Keith W. Miller, Communications of
 *  the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201 
 *  @endblockquote
 ','line_number':308,'multiline':True]['text':'* The specialization \minstd_rand was suggested in
 *
 *  @blockquote
 *  "Random Number Generators: Good ones are hard to find",
 *  Stephen K. Park and Keith W. Miller, Communications of
 *  the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201
 *  @endblockquote
 ','line_number':327,'multiline':True]['text':'*
 * Class @c rand48 models a \pseudo_random_number_generator. It uses
 * the linear congruential algorithm with the parameters a = 0x5DEECE66D,
 * c = 0xB, m = 2**48. It delivers identical results to the @c lrand48()
 * function available on some systems (assuming lcong48 has not been called).
 *
 * It is only available on systems where @c uint64_t is provided as an
 * integral type, so that for example static in-class constants and/or
 * enum definitions with large @c uint64_t numbers work.
 ','line_number':339,'multiline':True]['text':'*
     * Returns the smallest value that the generator can produce
     ','line_number':355,'multiline':True]['text':'*
     * Returns the largest value that the generator can produce
     ','line_number':359,'multiline':True]['text':'* Seeds the generator with the default seed. ','line_number':365,'multiline':True]['text':'*
     * Constructs a \rand48 generator with x(0) := (x0 << 16) | 0x330e.
     ','line_number':367,'multiline':True]['text':'*
     * Seeds the generator with values produced by @c seq.generate().
     ','line_number':372,'multiline':True]['text':'*
     * Seeds the generator using values from an iterator range,
     * and updates first to point one past the last value consumed.
     ','line_number':377,'multiline':True]['text':' compiler-generated copy ctor and assignment operator are fine','line_number':383,'multiline':False]['text':'* Seeds the generator with the default seed. ','line_number':385,'multiline':True]['text':'*
     * Changes the current value x(n) of the generator to (x0 << 16) | 0x330e.
     ','line_number':387,'multiline':True]['text':'*
     * Seeds the generator using values from an iterator range,
     * and updates first to point one past the last value consumed.
     ','line_number':392,'multiline':True]['text':'*
     * Seeds the generator with values produced by @c seq.generate().
     ','line_number':397,'multiline':True]['text':'*  Returns the next value of the generator. ','line_number':403,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':406,'multiline':True]['text':'* Fills a range with random values ','line_number':409,'multiline':True]['text':'*  Writes a @c rand48 to a @c std::ostream. ','line_number':419,'multiline':True]['text':'* Reads a @c rand48 from a @c std::istream. ','line_number':425,'multiline':True]['text':'*
     * Returns true if the two generators will produce identical
     * sequences of values.
     ','line_number':432,'multiline':True]['text':'*
     * Returns true if the two generators will produce different
     * sequences of values.
     ','line_number':438,'multiline':True]['text':'/ \cond show_private','line_number':445,'multiline':False]['text':' xxxxULL is not portable','line_number':447,'multiline':False]['text':'/ \endcond','line_number':454,'multiline':False]['text':' !BOOST_NO_INT64_T && !BOOST_NO_INTEGRAL_INT64_T ','line_number':456,'multiline':True]['text':' namespace random','line_number':458,'multiline':False]['text':' namespace boost','line_number':464,'multiline':False]['text':' BOOST_RANDOM_LINEAR_CONGRUENTIAL_HPP','line_number':468,'multiline':False]