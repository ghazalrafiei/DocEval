['text':'
   Copyright (c) Marshall Clow 2011-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
','line_number':1,'multiline':True]['text':'/ \file  is_permutation.hpp','line_number':8,'multiline':False]['text':'/ \brief Is a sequence a permutation of another sequence','line_number':9,'multiline':False]['text':'/ \author Marshall Clow','line_number':10,'multiline':False]['text':' for std::find_if, count_if, mismatch','line_number':15,'multiline':False]['text':' for std::pair','line_number':16,'multiline':False]['text':' for std::equal_to','line_number':17,'multiline':False]['text':'/ \cond DOXYGEN_HIDE','line_number':28,'multiline':False]['text':'  Preconditions:','line_number':41,'multiline':False]['text':'  1. The sequences are the same length','line_number':42,'multiline':False]['text':'  2. Any common elements on the front have been removed (not necessary for correctness, just for performance)','line_number':43,'multiline':False]['text':'  for each unique value in the sequence [first1,last1), count how many times','line_number':48,'multiline':False]['text':'  it occurs, and make sure it occurs the same number of times in [first2, last2)','line_number':49,'multiline':False]['text':'  For each value we haven't seen yet... ','line_number':53,'multiline':True]['text':'  Skip the common prefix (if any)','line_number':70,'multiline':False]['text':'  Cheap check','line_number':86,'multiline':False]['text':'  Skip the common prefix (if any)','line_number':89,'multiline':False]['text':'/ \endcond','line_number':101,'multiline':False]['text':'/ \fn is_permutation ( ForwardIterator1 first, ForwardIterator1 last, ForwardIterator2 first2, BinaryPredicate p )','line_number':103,'multiline':False]['text':'/ \brief Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2','line_number':104,'multiline':False]['text':'/','line_number':105,'multiline':False]['text':'/ \param first1   The start of the input sequence','line_number':106,'multiline':False]['text':'/ \param last1    One past the end of the input sequence','line_number':107,'multiline':False]['text':'/ \param first2   The start of the second sequence','line_number':108,'multiline':False]['text':'/ \param p        The predicate to compare elements with','line_number':109,'multiline':False]['text':'/','line_number':110,'multiline':False]['text':'/ \note           This function is part of the C++2011 standard library.','line_number':111,'multiline':False]['text':'  Skip the common prefix (if any)','line_number':116,'multiline':False]['text':'  Create last2','line_number':121,'multiline':False]['text':'/ \fn is_permutation ( ForwardIterator1 first, ForwardIterator1 last, ForwardIterator2 first2 )','line_number':130,'multiline':False]['text':'/ \brief Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2','line_number':131,'multiline':False]['text':'/','line_number':132,'multiline':False]['text':'/ \param first1   The start of the input sequence','line_number':133,'multiline':False]['text':'/ \param last2    One past the end of the input sequence','line_number':134,'multiline':False]['text':'/ \param first2   The start of the second sequence','line_number':135,'multiline':False]['text':'/ \note           This function is part of the C++2011 standard library.','line_number':136,'multiline':False]['text':'  How should I deal with the idea that ForwardIterator1::value_type','line_number':140,'multiline':False]['text':'  and ForwardIterator2::value_type could be different? Define my own comparison predicate?','line_number':141,'multiline':False]['text':'  Skip the common prefix (if any)','line_number':142,'multiline':False]['text':'  Create last2','line_number':147,'multiline':False]['text':'/ \fn is_permutation ( const Range &r, ForwardIterator first2 )','line_number':157,'multiline':False]['text':'/ \brief Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2','line_number':158,'multiline':False]['text':'/','line_number':159,'multiline':False]['text':'/ \param r        The input range','line_number':160,'multiline':False]['text':'/ \param first2   The start of the second sequence','line_number':161,'multiline':False]['text':'/ \fn is_permutation ( const Range &r, ForwardIterator first2, BinaryPredicate pred )','line_number':168,'multiline':False]['text':'/ \brief Tests to see if the sequence [first,last) is a permutation of the sequence starting at first2','line_number':169,'multiline':False]['text':'/','line_number':170,'multiline':False]['text':'/ \param r        The input range','line_number':171,'multiline':False]['text':'/ \param first2   The start of the second sequence','line_number':172,'multiline':False]['text':'/ \param pred     The predicate to compare elements with','line_number':173,'multiline':False]['text':'/','line_number':174,'multiline':False]['text':'  Disable this template when the first two parameters are the same type','line_number':175,'multiline':False]['text':'  That way the non-range version will be chosen.','line_number':176,'multiline':False]['text':' BOOST_ALGORITHM_IS_PERMUTATION11_HPP','line_number':186,'multiline':False]