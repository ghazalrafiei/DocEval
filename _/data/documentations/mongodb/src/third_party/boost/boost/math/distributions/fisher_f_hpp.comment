['text':' Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':' Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':' Boost Software License, Version 1.0.','line_number':4,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt','line_number':5,'multiline':False]['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':' for incomplete beta.','line_number':12,'multiline':False]['text':' complements','line_number':13,'multiline':False]['text':' error checks','line_number':14,'multiline':False]['text':' fisher_f_distribution','line_number':36,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' Data members:','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' degrees of freedom are a real number.','line_number':51,'multiline':False]['text':' degrees of freedom are a real number.','line_number':52,'multiline':False]['text':'dist','line_number':63,'multiline':True]['text':' Range of permissible values for random variable x.','line_number':64,'multiline':False]['text':'dist','line_number':70,'multiline':True]['text':' Range of supported values for random variable x.','line_number':71,'multiline':False]['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':72,'multiline':False]['text':' for ADL of std functions','line_number':80,'multiline':False]['text':' Error check:','line_number':83,'multiline':False]['text':' special cases:','line_number':100,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' You reach this formula by direct differentiation of the','line_number':111,'multiline':False]['text':' cdf expressed in terms of the incomplete beta.','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' There are two versions so we don't pass a value of z','line_number':114,'multiline':False]['text':' that is very close to 1 to ibeta_derivative: for some values','line_number':115,'multiline':False]['text':' of df1 and df2, all the change takes place in this area.','line_number':116,'multiline':False]['text':'','line_number':117,'multiline':False]['text':' pdf','line_number':132,'multiline':False]['text':' Error check:','line_number':140,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' There are two equivalent formulas used here, the aim is','line_number':156,'multiline':False]['text':' to prevent the final argument to the incomplete beta','line_number':157,'multiline':False]['text':' from being too close to 1: for some values of df1 and df2','line_number':158,'multiline':False]['text':' the rate of change can be arbitrarily large in this area,','line_number':159,'multiline':False]['text':' whilst the value we're passing will have lost information','line_number':160,'multiline':False]['text':' content as a result of being 0.999999something.  Better','line_number':161,'multiline':False]['text':' to switch things around so we're passing 1-z instead.','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':' cdf','line_number':167,'multiline':False]['text':' Error check:','line_number':175,'multiline':False]['text':' With optimizations turned on, gcc wrongly warns about y being used','line_number':185,'multiline':False]['text':' uninitialized unless we initialize it to something:','line_number':186,'multiline':False]['text':' quantile','line_number':192,'multiline':False]['text':' Error check:','line_number':201,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' There are two equivalent formulas used here, the aim is','line_number':217,'multiline':False]['text':' to prevent the final argument to the incomplete beta','line_number':218,'multiline':False]['text':' from being too close to 1: for some values of df1 and df2','line_number':219,'multiline':False]['text':' the rate of change can be arbitrarily large in this area,','line_number':220,'multiline':False]['text':' whilst the value we're passing will have lost information','line_number':221,'multiline':False]['text':' content as a result of being 0.999999something.  Better','line_number':222,'multiline':False]['text':' to switch things around so we're passing 1-z instead.','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' Error check:','line_number':237,'multiline':False]['text':' Mean of F distribution = v.','line_number':256,'multiline':False]['text':' Error check:','line_number':260,'multiline':False]['text':' mean','line_number':273,'multiline':False]['text':' Variance of F distribution.','line_number':277,'multiline':False]['text':' Error check:','line_number':281,'multiline':False]['text':' variance','line_number':294,'multiline':False]['text':' Error check:','line_number':302,'multiline':False]['text':'template <class RealType, class Policy>','line_number':317,'multiline':False]['text':'inline RealType median(const fisher_f_distribution<RealType, Policy>& dist)','line_number':318,'multiline':False]['text':'{ // Median of Fisher F distribution is not defined.','line_number':319,'multiline':False]['text':'  return tools::domain_error<RealType>(BOOST_CURRENT_FUNCTION, "Median is not implemented, result is %1%!", std::numeric_limits<RealType>::quiet_NaN());','line_number':320,'multiline':False]['text':'  } // median','line_number':321,'multiline':False]['text':' Now implemented via quantile(half) in derived accessors.','line_number':323,'multiline':False]['text':' ADL of std names','line_number':329,'multiline':False]['text':' See http://mathworld.wolfram.com/F-Distribution.html','line_number':330,'multiline':False]['text':' Error check:','line_number':333,'multiline':False]['text':' See http://mathworld.wolfram.com/F-Distribution.html','line_number':361,'multiline':False]['text':' Error check:','line_number':364,'multiline':False]['text':' namespace math','line_number':384,'multiline':False]['text':' namespace boost','line_number':385,'multiline':False]['text':' This include must be at the end, *after* the accessors','line_number':387,'multiline':False]['text':' for this distribution have been defined, in order to','line_number':388,'multiline':False]['text':' keep compilers that support two-phase lookup happy.','line_number':389,'multiline':False]['text':' BOOST_MATH_DISTRIBUTIONS_FISHER_F_HPP','line_number':392,'multiline':False]