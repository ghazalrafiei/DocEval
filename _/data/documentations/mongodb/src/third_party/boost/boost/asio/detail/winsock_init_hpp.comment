['text':'','line_number':1,'multiline':False]['text':' detail/winsock_init.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' Structure to track result of initialisation and number of uses. POD is used','line_number':31,'multiline':False]['text':' to ensure that the values are zero-initialised prior to any code being run.','line_number':32,'multiline':False]['text':' This class may be used to indicate that user code will manage Winsock','line_number':73,'multiline':False]['text':' initialisation and cleanup. This may be required in the case of a DLL, for','line_number':74,'multiline':False]['text':' example, where it is not safe to initialise Winsock from global object','line_number':75,'multiline':False]['text':' constructors.','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' To prevent asio from initialising Winsock, the object must be constructed','line_number':78,'multiline':False]['text':' before any Asio's own global objects. With MSVC, this may be accomplished','line_number':79,'multiline':False]['text':' by adding the following code to the DLL:','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':'   #pragma warning(push)','line_number':82,'multiline':False]['text':'   #pragma warning(disable:4073)','line_number':83,'multiline':False]['text':'   #pragma init_seg(lib)','line_number':84,'multiline':False]['text':'   boost::asio::detail::winsock_init<>::manual manual_winsock_init;','line_number':85,'multiline':False]['text':'   #pragma warning(pop)','line_number':86,'multiline':False]['text':' Static variable to ensure that winsock is initialised before main, and','line_number':114,'multiline':False]['text':' therefore before any other threads can get started.','line_number':115,'multiline':False]['text':' namespace detail','line_number':118,'multiline':False]['text':' namespace asio','line_number':119,'multiline':False]['text':' namespace boost','line_number':120,'multiline':False]['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':126,'multiline':False]['text':' defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)','line_number':128,'multiline':False]['text':' BOOST_ASIO_DETAIL_WINSOCK_INIT_HPP','line_number':130,'multiline':False]