['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file regex_compiler.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of regex_compiler, a factory for building regex objects','line_number':3,'multiline':False]['text':'/ from strings.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':6,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':7,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':13,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':41,'multiline':False]['text':' regex_compiler','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':'/ \brief Class template regex_compiler is a factory for building basic_regex objects from a string.','line_number':44,'multiline':False]['text':'/','line_number':45,'multiline':False]['text':'/ Class template regex_compiler is used to construct a basic_regex object from a string. The string','line_number':46,'multiline':False]['text':'/ should contain a valid regular expression. You can imbue a regex_compiler object with a locale,','line_number':47,'multiline':False]['text':'/ after which all basic_regex objects created with that regex_compiler object will use that locale.','line_number':48,'multiline':False]['text':'/ After creating a regex_compiler object, and optionally imbueing it with a locale, you can call the','line_number':49,'multiline':False]['text':'/ compile() method to construct a basic_regex object, passing it the string representing the regular','line_number':50,'multiline':False]['text':'/ expression. You can call compile() multiple times on the same regex_compiler object. Two basic_regex','line_number':51,'multiline':False]['text':'/ objects compiled from the same string will have different regex_id's.','line_number':52,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':75,'multiline':False]['text':' imbue','line_number':76,'multiline':False]['text':'/ Specify the locale to be used by a regex_compiler.','line_number':77,'multiline':False]['text':'/','line_number':78,'multiline':False]['text':'/ \param loc The locale that this regex_compiler should use.','line_number':79,'multiline':False]['text':'/ \return The previous locale.','line_number':80,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':88,'multiline':False]['text':' getloc','line_number':89,'multiline':False]['text':'/ Get the locale used by a regex_compiler.','line_number':90,'multiline':False]['text':'/','line_number':91,'multiline':False]['text':'/ \return The locale used by this regex_compiler.','line_number':92,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':98,'multiline':False]['text':' compile','line_number':99,'multiline':False]['text':'/ Builds a basic_regex object from a range of characters.','line_number':100,'multiline':False]['text':'/','line_number':101,'multiline':False]['text':'/ \param  begin The beginning of a range of characters representing the','line_number':102,'multiline':False]['text':'/         regular expression to compile.','line_number':103,'multiline':False]['text':'/ \param  end The end of a range of characters representing the','line_number':104,'multiline':False]['text':'/         regular expression to compile.','line_number':105,'multiline':False]['text':'/ \param  flags Optional bitmask that determines how the pat string is','line_number':106,'multiline':False]['text':'/         interpreted. (See syntax_option_type.)','line_number':107,'multiline':False]['text':'/ \return A basic_regex object corresponding to the regular expression','line_number':108,'multiline':False]['text':'/         represented by the character range.','line_number':109,'multiline':False]['text':'/ \pre    InputIter is a model of the InputIterator concept.','line_number':110,'multiline':False]['text':'/ \pre    [begin,end) is a valid range.','line_number':111,'multiline':False]['text':'/ \pre    The range of characters specified by [begin,end) contains a','line_number':112,'multiline':False]['text':'/         valid string-based representation of a regular expression.','line_number':113,'multiline':False]['text':'/ \throw  regex_error when the range of characters has invalid regular','line_number':114,'multiline':False]['text':'/         expression syntax.','line_number':115,'multiline':False]['text':'/ \overload','line_number':124,'multiline':False]['text':'/','line_number':125,'multiline':False]['text':'/ \overload','line_number':133,'multiline':False]['text':'/','line_number':134,'multiline':False]['text':'/ \overload','line_number':143,'multiline':False]['text':'/','line_number':144,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':152,'multiline':False]['text':' operator[]','line_number':153,'multiline':False]['text':'/ Return a reference to the named regular expression. If no such named','line_number':154,'multiline':False]['text':'/ regular expression exists, create a new regular expression and return','line_number':155,'multiline':False]['text':'/ a reference to it.','line_number':156,'multiline':False]['text':'/','line_number':157,'multiline':False]['text':'/ \param  name A std::string containing the name of the regular expression.','line_number':158,'multiline':False]['text':'/ \pre    The string is not empty.','line_number':159,'multiline':False]['text':'/ \throw  bad_alloc on allocation failure.','line_number':160,'multiline':False]['text':'/ \overload','line_number':167,'multiline':False]['text':'/','line_number':168,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':180,'multiline':False]['text':' compile_','line_number':181,'multiline':False]['text':'/ INTERNAL ONLY','line_number':182,'multiline':False]['text':' Check if this regex is a named rule:','line_number':194,'multiline':False]['text':' at the top level, a regex is a sequence of alternates','line_number':212,'multiline':False]['text':' terminate the sequence','line_number':216,'multiline':False]['text':' bundle the regex information into a regex_impl object','line_number':219,'multiline':False]['text':' References changed, update dependencies.','line_number':226,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':232,'multiline':False]['text':' compile_','line_number':233,'multiline':False]['text':'/ INTERNAL ONLY','line_number':234,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':242,'multiline':False]['text':' reset','line_number':243,'multiline':False]['text':'/ INTERNAL ONLY','line_number':244,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':252,'multiline':False]['text':' regex_traits','line_number':253,'multiline':False]['text':'/ INTERNAL ONLY','line_number':254,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':260,'multiline':False]['text':' regex_traits','line_number':261,'multiline':False]['text':'/ INTERNAL ONLY','line_number':262,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':268,'multiline':False]['text':' parse_alternates','line_number':269,'multiline':False]['text':'/ INTERNAL ONLY','line_number':270,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':295,'multiline':False]['text':' parse_group','line_number':296,'multiline':False]['text':'/ INTERNAL ONLY','line_number':297,'multiline':False]['text':' Don't process empty groups like (?:) or (?i)','line_number':317,'multiline':False]['text':' BUGBUG this doesn't handle the degenerate (?:)+ correctly','line_number':318,'multiline':False]['text':' alternates','line_number':431,'multiline':False]['text':' independent sub-expression','line_number':454,'multiline':False]['text':' restore the modifiers','line_number':461,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':466,'multiline':False]['text':' parse_charset','line_number':467,'multiline':False]['text':'/ INTERNAL ONLY','line_number':468,'multiline':False]['text':' call out to a helper to actually parse the character set','line_number':474,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':485,'multiline':False]['text':' parse_atom','line_number':486,'multiline':False]['text':'/ INTERNAL ONLY','line_number':487,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':590,'multiline':False]['text':' parse_quant','line_number':591,'multiline':False]['text':'/ INTERNAL ONLY','line_number':592,'multiline':False]['text':' BUGBUG this doesn't handle the degenerate (?:)+ correctly','line_number':600,'multiline':False]['text':' quant {0,0} is degenerate -- matches nothing.','line_number':607,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':621,'multiline':False]['text':' parse_sequence','line_number':622,'multiline':False]['text':'/ INTERNAL ONLY','line_number':623,'multiline':False]['text':' did we find a quantified atom?','line_number':633,'multiline':False]['text':' chain it to the end of the xpression sequence','line_number':637,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':644,'multiline':False]['text':' parse_literal','line_number':645,'multiline':False]['text':'  scan ahead looking for char literals to be globbed together into a string literal','line_number':646,'multiline':False]['text':'/ INTERNAL ONLY','line_number':647,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':687,'multiline':False]['text':' parse_quote_meta','line_number':688,'multiline':False]['text':'  scan ahead looking for char literals to be globbed together into a string literal','line_number':689,'multiline':False]['text':'/ INTERNAL ONLY','line_number':690,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':716,'multiline':False]['text':' parse_escape','line_number':717,'multiline':False]['text':'/ INTERNAL ONLY','line_number':718,'multiline':False]['text':' first, check to see if this can be a backreference','line_number':724,'multiline':False]['text':' Parse at most 3 decimal digits.','line_number':727,'multiline':False]['text':' If the resulting number could conceivably be a backref, then it is.','line_number':731,'multiline':False]['text':' Not a backreference, defer to the parse_escape helper','line_number':740,'multiline':False]['text':' namespace boost::xpressive','line_number':757,'multiline':False]