['text':' boost random/mersenne_twister.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2010
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2013-10-14  fixed some warnings with Wshadow (mgaunard)
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]['text':'*
 * Instantiations of class template mersenne_twister_engine model a
 * \pseudo_random_number_generator. It uses the algorithm described in
 *
 *  @blockquote
 *  "Mersenne Twister: A 623-dimensionally equidistributed uniform
 *  pseudo-random number generator", Makoto Matsumoto and Takuji Nishimura,
 *  ACM Transactions on Modeling and Computer Simulation: Special Issue on
 *  Uniform Random Number Generation, Vol. 8, No. 1, January 1998, pp. 3-30.
 *  @endblockquote
 *
 * @xmlnote
 * The boost variant has been implemented from scratch and does not
 * derive from or use mt19937.c provided on the above WWW site. However, it
 * was verified that both produce identical output.
 * @endxmlnote
 *
 * The seeding from an integer was changed in April 2005 to address a
 * <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html">weakness</a>.
 *
 * The quality of the generator crucially depends on the choice of the
 * parameters.  User code should employ one of the sensibly parameterized
 * generators such as \mt19937 instead.
 *
 * The generator requires considerable amounts of memory for the storage of
 * its state array. For example, \mt11213b requires about 1408 bytes and
 * \mt19937 requires about 2496 bytes.
 ','line_number':39,'multiline':True]['text':' backwards compatibility','line_number':91,'multiline':False]['text':' old Boost.Random concept requirements','line_number':100,'multiline':False]['text':'*
     * Constructs a @c mersenne_twister_engine and calls @c seed().
     ','line_number':104,'multiline':True]['text':'*
     * Constructs a @c mersenne_twister_engine and calls @c seed(value).
     ','line_number':109,'multiline':True]['text':'*
     * Constructs a mersenne_twister_engine and calls @c seed(gen).
     *
     * @xmlnote
     * The copy constructor will always be preferred over
     * the templated constructor.
     * @endxmlnote
     ','line_number':118,'multiline':True]['text':' compiler-generated copy ctor and assignment operator are fine','line_number':130,'multiline':False]['text':'* Calls @c seed(default_seed). ','line_number':132,'multiline':True]['text':'*
     * Sets the state x(0) to v mod 2w. Then, iteratively,
     * sets x(i) to
     * (i + f * (x(i-1) xor (x(i-1) rshift w-2))) mod 2<sup>w</sup>
     * for i = 1 .. n-1. x(n) is the first value to be returned by operator().
     ','line_number':135,'multiline':True]['text':' New seeding algorithm from','line_number':143,'multiline':False]['text':' http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html','line_number':144,'multiline':False]['text':' In the previous versions, MSBs of the seed affected only MSBs of the','line_number':145,'multiline':False]['text':' state x[].','line_number':146,'multiline':False]['text':' See Knuth "The Art of Computer Programming"','line_number':150,'multiline':False]['text':' Vol. 2, 3rd ed., page 106','line_number':151,'multiline':False]['text':'*
     * Seeds a mersenne_twister_engine using values produced by seq.generate().
     ','line_number':158,'multiline':True]['text':'* Sets the state of the generator using values from an iterator range. ','line_number':169,'multiline':True]['text':'* Returns the smallest value that the generator can produce. ','line_number':179,'multiline':True]['text':'* Returns the largest value that the generator can produce. ','line_number':182,'multiline':True]['text':'* Produces the next value of the generator. ','line_number':186,'multiline':True]['text':'* Fills a range with random values ','line_number':189,'multiline':True]['text':'*
     * Advances the state of the generator by @c z steps.  Equivalent to
     *
     * @code
     * for(unsigned long long i = 0; i < z; ++i) {
     *     gen();
     * }
     * @endcode
     ','line_number':194,'multiline':True]['text':'* Writes a mersenne_twister_engine to a @c std::ostream ','line_number':218,'multiline':True]['text':'* Reads a mersenne_twister_engine from a @c std::istream ','line_number':228,'multiline':True]['text':' MSVC (up to 7.1) and Borland (up to 5.64) don't handle the template','line_number':236,'multiline':False]['text':' value parameter "n" available from the class template scope, so use','line_number':237,'multiline':False]['text':' the static constant with the same value','line_number':238,'multiline':False]['text':'*
     * Returns true if the two generators are in the same state,
     * and will thus produce identical sequences.
     ','line_number':244,'multiline':True]['text':'*
     * Returns true if the two generators are in different states.
     ','line_number':255,'multiline':True]['text':'/ \cond show_private','line_number':263,'multiline':False]['text':'*
     * Does the work of operator==.  This is in a member function
     * for portability.  Some compilers, such as msvc 7.1 and
     * Sun CC 5.10 can't access template parameters or static
     * members of the class from inline friend functions.
     *
     * requires i <= other.i
     ','line_number':267,'multiline':True]['text':'*
     * Does the work of operator<<.  This is in a member function
     * for portability.
     ','line_number':289,'multiline':True]['text':'*
     * Copies z elements of the state preceding x[0] into
     * the array whose last element is last.
     ','line_number':309,'multiline':True]['text':'*
     * Converts an arbitrary array into a valid generator state.
     * First we normalize x[0], so that it contains the same
     * value we would get by running the generator forwards
     * and then in reverse.  (The low order r bits are redundant).
     * Then, if the state consists of all zeros, we set the
     * high order bit of x[0] to 1.  This function only needs to
     * be called by seed, since the state transform preserves
     * this relationship.
     ','line_number':336,'multiline':True]['text':' fix up the state if it's all zeroes.','line_number':358,'multiline':False]['text':'*
     * Given a pointer to the last element of the rewind array,
     * and the current size of the rewind array, finds an element
     * relative to the next available slot in the rewind array.
     ','line_number':365,'multiline':True]['text':'*
     * Optimized algorithm for large jumps.
     *
     * Hiroshi Haramoto, Makoto Matsumoto, and Pierre L'Ecuyer. 2008.
     * A Fast Jump Ahead Algorithm for Linear Recurrences in a Polynomial
     * Space. In Proceedings of the 5th international conference on
     * Sequences and Their Applications (SETA '08).
     * DOI=10.1007/978-3-540-85912-3_26
     ','line_number':381,'multiline':True]['text':' Compute the minimal polynomial, phi(t)','line_number':392,'multiline':False]['text':' This depends only on the transition function,','line_number':393,'multiline':False]['text':' which is constant.  The characteristic','line_number':394,'multiline':False]['text':' polynomial is the same as the minimal','line_number':395,'multiline':False]['text':' polynomial for a maximum period generator','line_number':396,'multiline':False]['text':' (which should be all specializations of','line_number':397,'multiline':False]['text':' mersenne_twister.)  Even if it weren't,','line_number':398,'multiline':False]['text':' the characteristic polynomial is guaranteed','line_number':399,'multiline':False]['text':' to be a multiple of the minimal polynomial,','line_number':400,'multiline':False]['text':' which is good enough.','line_number':401,'multiline':False]['text':' calculate g(t) = t^z % phi(t)','line_number':404,'multiline':False]['text':' h(s_0, t) = \sum_{i=0}^{2k-1}o(s_i)t^{2k-i-1}','line_number':407,'multiline':False]['text':' Yes, we're advancing the generator state','line_number':411,'multiline':False]['text':' here, but it doesn't matter because','line_number':412,'multiline':False]['text':' we're going to overwrite it completely','line_number':413,'multiline':False]['text':' in reconstruct_state.','line_number':414,'multiline':False]['text':' g(t)h(s_0, t)','line_number':418,'multiline':False]['text':' Skip the first num_bits elements, since we','line_number':433,'multiline':False]['text':' already know what they are.','line_number':434,'multiline':False]['text':'/ \endcond','line_number':486,'multiline':False]['text':' state representation: next output is o(x(i))','line_number':488,'multiline':False]['text':'   x[0]  ... x[k] x[k+1] ... x[n-1]   represents','line_number':489,'multiline':False]['text':'  x(i-k) ... x(i) x(i+1) ... x(i-k+n-1)','line_number':490,'multiline':False]['text':'/ \cond show_private','line_number':496,'multiline':False]['text':'  A definition is required even for integral static constants','line_number':499,'multiline':False]['text':' split loop to avoid costly modulo operations','line_number':545,'multiline':False]['text':' extra scope for MSVC brokenness w.r.t. for scope','line_number':546,'multiline':False]['text':' last iteration','line_number':570,'multiline':False]['text':'/ \endcond','line_number':575,'multiline':False]['text':' Step 4','line_number':588,'multiline':False]['text':'*
 * The specializations \mt11213b and \mt19937 are from
 *
 *  @blockquote
 *  "Mersenne Twister: A 623-dimensionally equidistributed
 *  uniform pseudo-random number generator", Makoto Matsumoto
 *  and Takuji Nishimura, ACM Transactions on Modeling and
 *  Computer Simulation: Special Issue on Uniform Random Number
 *  Generation, Vol. 8, No. 1, January 1998, pp. 3-30.
 *  @endblockquote
 ','line_number':598,'multiline':True]['text':'*
 * The specializations \mt11213b and \mt19937 are from
 *
 *  @blockquote
 *  "Mersenne Twister: A 623-dimensionally equidistributed
 *  uniform pseudo-random number generator", Makoto Matsumoto
 *  and Takuji Nishimura, ACM Transactions on Modeling and
 *  Computer Simulation: Special Issue on Uniform Random Number
 *  Generation, Vol. 8, No. 1, January 1998, pp. 3-30.
 *  @endblockquote
 ','line_number':612,'multiline':True]['text':'/ \cond show_deprecated','line_number':633,'multiline':False]['text':'/ \endcond','line_number':666,'multiline':False]['text':' namespace random','line_number':668,'multiline':False]['text':' namespace boost','line_number':674,'multiline':False]['text':' BOOST_RANDOM_MERSENNE_TWISTER_HPP','line_number':682,'multiline':False]