['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file fold_tree.hpp','line_number':2,'multiline':False]['text':'/ Contains definition of the fold_tree<> and reverse_fold_tree<> transforms.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'/ \brief A PrimitiveTransform that recursively applies the','line_number':56,'multiline':False]['text':'/ <tt>fold\<\></tt> transform to sub-trees that all share a common','line_number':57,'multiline':False]['text':'/ tag type.','line_number':58,'multiline':False]['text':'/','line_number':59,'multiline':False]['text':'/ <tt>fold_tree\<\></tt> is useful for flattening trees into lists;','line_number':60,'multiline':False]['text':'/ for example, you might use <tt>fold_tree\<\></tt> to flatten an','line_number':61,'multiline':False]['text':'/ expression tree like <tt>a | b | c</tt> into a Fusion list like','line_number':62,'multiline':False]['text':'/ <tt>cons(c, cons(b, cons(a)))</tt>.','line_number':63,'multiline':False]['text':'/','line_number':64,'multiline':False]['text':'/ <tt>fold_tree\<\></tt> is easily understood in terms of a','line_number':65,'multiline':False]['text':'/ <tt>recurse_if_\<\></tt> helper, defined as follows:','line_number':66,'multiline':False]['text':'/','line_number':67,'multiline':False]['text':'/ \code','line_number':68,'multiline':False]['text':'/ template<typename Tag, typename Fun>','line_number':69,'multiline':False]['text':'/ struct recurse_if_','line_number':70,'multiline':False]['text':'/   : if_<','line_number':71,'multiline':False]['text':'/         // If the current node has type "Tag" ...','line_number':72,'multiline':False]['text':'/         is_same<tag_of<_>, Tag>()','line_number':73,'multiline':False]['text':'/         // ... recurse, otherwise ...','line_number':74,'multiline':False]['text':'/       , fold<_, _state, recurse_if_<Tag, Fun> >','line_number':75,'multiline':False]['text':'/         // ... apply the Fun transform.','line_number':76,'multiline':False]['text':'/       , Fun','line_number':77,'multiline':False]['text':'/     >','line_number':78,'multiline':False]['text':'/ {};','line_number':79,'multiline':False]['text':'/ \endcode','line_number':80,'multiline':False]['text':'/','line_number':81,'multiline':False]['text':'/ With <tt>recurse_if_\<\></tt> as defined above,','line_number':82,'multiline':False]['text':'/ <tt>fold_tree\<Sequence, State0, Fun\>()(e, s, d)</tt> is','line_number':83,'multiline':False]['text':'/ equivalent to','line_number':84,'multiline':False]['text':'/ <tt>fold<Sequence, State0, recurse_if_<Expr::proto_tag, Fun> >()(e, s, d).</tt>','line_number':85,'multiline':False]['text':'/ It has the effect of folding a tree front-to-back, recursing into','line_number':86,'multiline':False]['text':'/ child nodes that share a tag type with the parent node.','line_number':87,'multiline':False]['text':'/ \brief A PrimitiveTransform that recursively applies the','line_number':111,'multiline':False]['text':'/ <tt>reverse_fold\<\></tt> transform to sub-trees that all share','line_number':112,'multiline':False]['text':'/ a common tag type.','line_number':113,'multiline':False]['text':'/','line_number':114,'multiline':False]['text':'/ <tt>reverse_fold_tree\<\></tt> is useful for flattening trees into','line_number':115,'multiline':False]['text':'/ lists; for example, you might use <tt>reverse_fold_tree\<\></tt> to','line_number':116,'multiline':False]['text':'/ flatten an expression tree like <tt>a | b | c</tt> into a Fusion list','line_number':117,'multiline':False]['text':'/ like <tt>cons(a, cons(b, cons(c)))</tt>.','line_number':118,'multiline':False]['text':'/','line_number':119,'multiline':False]['text':'/ <tt>reverse_fold_tree\<\></tt> is easily understood in terms of a','line_number':120,'multiline':False]['text':'/ <tt>recurse_if_\<\></tt> helper, defined as follows:','line_number':121,'multiline':False]['text':'/','line_number':122,'multiline':False]['text':'/ \code','line_number':123,'multiline':False]['text':'/ template<typename Tag, typename Fun>','line_number':124,'multiline':False]['text':'/ struct recurse_if_','line_number':125,'multiline':False]['text':'/   : if_<','line_number':126,'multiline':False]['text':'/         // If the current node has type "Tag" ...','line_number':127,'multiline':False]['text':'/         is_same<tag_of<_>, Tag>()','line_number':128,'multiline':False]['text':'/         // ... recurse, otherwise ...','line_number':129,'multiline':False]['text':'/       , reverse_fold<_, _state, recurse_if_<Tag, Fun> >','line_number':130,'multiline':False]['text':'/         // ... apply the Fun transform.','line_number':131,'multiline':False]['text':'/       , Fun','line_number':132,'multiline':False]['text':'/     >','line_number':133,'multiline':False]['text':'/ {};','line_number':134,'multiline':False]['text':'/ \endcode','line_number':135,'multiline':False]['text':'/','line_number':136,'multiline':False]['text':'/ With <tt>recurse_if_\<\></tt> as defined above,','line_number':137,'multiline':False]['text':'/ <tt>reverse_fold_tree\<Sequence, State0, Fun\>()(e, s, d)</tt> is','line_number':138,'multiline':False]['text':'/ equivalent to','line_number':139,'multiline':False]['text':'/ <tt>reverse_fold<Sequence, State0, recurse_if_<Expr::proto_tag, Fun> >()(e, s, d).</tt>','line_number':140,'multiline':False]['text':'/ It has the effect of folding a tree back-to-front, recursing into','line_number':141,'multiline':False]['text':'/ child nodes that share a tag type with the parent node.','line_number':142,'multiline':False]['text':'/ INTERNAL ONLY','line_number':166,'multiline':False]['text':'/','line_number':167,'multiline':False]['text':'/ INTERNAL ONLY','line_number':173,'multiline':False]['text':'/','line_number':174,'multiline':False]