['text':'  (C) Copyright Howard Hinnant','line_number':1,'multiline':False]['text':'  (C) Copyright 2010-2011 Vicente J. Botet Escriba','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]['text':'===-------------------------- locale ------------------------------------===//','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'                     The LLVM Compiler Infrastructure','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' This file is dual licensed under the MIT and the University of Illinois Open','line_number':11,'multiline':False]['text':' Source Licenses. See LICENSE.TXT for details.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':14,'multiline':False]['text':' This code was adapted by Vicente from Howard Hinnant's experimental work','line_number':16,'multiline':False]['text':' on chrono i/o to Boost and some functions from libc++/locale to emulate the missing time_get::get()','line_number':17,'multiline':False]['text':' Precondition:  n >= 1','line_number':83,'multiline':False]['text':' get first digit','line_number':89,'multiline':False]['text':' get next digit','line_number':99,'multiline':False]['text':'tm->tm_wday = tm2.tm_wday;','line_number':288,'multiline':False]['text':'tm->tm_mon = tm2.tm_mon;','line_number':298,'multiline':False]['text':'            case 'c':','line_number':301,'multiline':False]['text':'              {','line_number':302,'multiline':False]['text':'                const string_type& fm = c();','line_number':303,'multiline':False]['text':'                b = get(b, e, iob, err, tm, fm.data(), fm.data() + fm.size());','line_number':304,'multiline':False]['text':'              }','line_number':305,'multiline':False]['text':'              break;','line_number':306,'multiline':False]['text':'            case 'p':','line_number':342,'multiline':False]['text':'              get_am_pm(tm->tm_hour, b, e, err, ct);','line_number':343,'multiline':False]['text':'              break;','line_number':344,'multiline':False]['text':'            case 'X':','line_number':373,'multiline':False]['text':'              return that_.get_time(b, e, iob, err, tm);','line_number':374,'multiline':False]['text':'              {','line_number':375,'multiline':False]['text':'                const string_type& fm = X();','line_number':376,'multiline':False]['text':'                b = that_.get(b, e, iob, err, tm, fm.data(), fm.data() + fm.size());','line_number':377,'multiline':False]['text':'              }','line_number':378,'multiline':False]['text':'              break;','line_number':379,'multiline':False]['text':'            case 'y':','line_number':380,'multiline':False]['text':'              get_year(tm->tm_year, b, e, err, ct);','line_number':381,'multiline':False]['text':' todo move semantics','line_number':464,'multiline':False]['text':'*
         * Change the timezone and time format ios state;
         ','line_number':470,'multiline':True]['text':' todo move semantics','line_number':486,'multiline':False]['text':'*
         * Change the timezone and time format ios state;
         ','line_number':492,'multiline':True]['text':'set_time_fmt<typename out_stream::char_type>(ios, "");','line_number':497,'multiline':False]['text':' todo move semantics','line_number':513,'multiline':False]['text':'*
     * time_fmt_io_saver i/o saver.
     *
     * See Boost.IO i/o state savers for a motivating compression.
     ','line_number':522,'multiline':True]['text':'! the type of the state to restore','line_number':531,'multiline':False]['text':'typedef std::basic_ostream<CharT, Traits> state_type;','line_number':532,'multiline':False]['text':'! the type of aspect to save','line_number':535,'multiline':False]['text':'*
       * Explicit construction from an i/o stream.
       *
       * Store a reference to the i/o stream and the value of the associated @c time format .
       ','line_number':538,'multiline':True]['text':'*
       * Construction from an i/o stream and a @c time format  to restore.
       *
       * Stores a reference to the i/o stream and the value @c new_value to restore given as parameter.
       ','line_number':548,'multiline':True]['text':'*
       * Destructor.
       *
       * Restores the i/o stream with the format to be restored.
       ','line_number':559,'multiline':True]['text':'*
       * Restores the i/o stream with the time format to be restored.
       ','line_number':569,'multiline':True]['text':'*
     * timezone_io_saver i/o saver.
     *
     * See Boost.IO i/o state savers for a motivating compression.
     ','line_number':581,'multiline':True]['text':'! the type of the state to restore','line_number':589,'multiline':False]['text':'! the type of aspect to save','line_number':591,'multiline':False]['text':'*
       * Explicit construction from an i/o stream.
       *
       * Store a reference to the i/o stream and the value of the associated @c timezone.
       ','line_number':594,'multiline':True]['text':'*
       * Construction from an i/o stream and a @c timezone to restore.
       *
       * Stores a reference to the i/o stream and the value @c new_value to restore given as parameter.
       ','line_number':604,'multiline':True]['text':'*
       * Destructor.
       *
       * Restores the i/o stream with the format to be restored.
       ','line_number':615,'multiline':True]['text':'*
       * Restores the i/o stream with the timezone to be restored.
       ','line_number':625,'multiline':True]['text':'*
     *
     * @param os
     * @param tp
     * @Effects Behaves as a formatted output function. After constructing a @c sentry object, if the @ sentry
     * converts to true, calls to @c facet.put(os,os,os.fill(),tp) where @c facet is the @c time_point_put<CharT>
     * facet associated to @c os or a new created instance of the default @c time_point_put<CharT> facet.
     * @return @c os.
     ','line_number':639,'multiline':True]['text':'#if defined BOOST_CHRONO_INTERNAL_TIMEGM','line_number':751,'multiline':False]['text':'#endif','line_number':809,'multiline':False]['text':'*
    * from_ymd could be made more efficient by using a table
    * day_count_table indexed by the y%400.
    * This table could contain the day_count
    * by*365 + by/4 - by/100 + by/400
    *
    * from_ymd = (by/400)*days_by_400_years+day_count_table[by%400] +
    * days_in_year_before[is_leap_table[by%400]][m-1] + d;
    ','line_number':811,'multiline':True]['text':' Returns year/month/day triple in civil calendar','line_number':825,'multiline':False]['text':' Preconditions:  z is number of days since 1970-01-01 and is in the range:','line_number':826,'multiline':False]['text':'                   [numeric_limits<Int>::min(), numeric_limits<Int>::max()-719468].','line_number':827,'multiline':False]['text':'constexpr','line_number':829,'multiline':False]['text':' [0, 146096]','line_number':839,'multiline':False]['text':' [0, 399]','line_number':840,'multiline':False]['text':' [0, 365]','line_number':842,'multiline':False]['text':' [0, 11]','line_number':843,'multiline':False]['text':' [1, 31]','line_number':844,'multiline':False]['text':' [1, 12]','line_number':845,'multiline':False]['text':' arithmetic rshift - not portable - but nearly universal','line_number':887,'multiline':False]['text':'y -= 32767 + 2;','line_number':891,'multiline':False]['text':' detail','line_number':914,'multiline':False]['text':'nullptr;','line_number':929,'multiline':False]['text':' localtime_s doesn't exist in vc7.1','line_number':943,'multiline':False]['text':'if (! os.good()) {','line_number':989,'multiline':False]['text':'  throw "exception";','line_number':990,'multiline':False]['text':'}','line_number':991,'multiline':False]['text':'if (! os.good()) {','line_number':994,'multiline':False]['text':'throw "exception";','line_number':995,'multiline':False]['text':'}','line_number':996,'multiline':False]['text':'if (! os.good()) {','line_number':999,'multiline':False]['text':'throw "exception";','line_number':1000,'multiline':False]['text':'}','line_number':1001,'multiline':False]['text':' detail','line_number':1099,'multiline':False]['text':'nullptr;','line_number':1113,'multiline':False]['text':' {0}','line_number':1123,'multiline':False]['text':'UTC','line_number':1244,'multiline':False]['text':' chrono','line_number':1245,'multiline':False]['text':' header','line_number':1249,'multiline':False]