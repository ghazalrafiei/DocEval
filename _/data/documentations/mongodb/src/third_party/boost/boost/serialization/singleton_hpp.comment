['text':'///////1/////////2///////// 3/////////4/////////5/////////6/////////7/////////8','line_number':4,'multiline':False]['text':'  singleton.hpp','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Copyright David Abrahams 2006. Original version','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Copyright Robert Ramey 2007.  Changes made to permit','line_number':9,'multiline':False]['text':' application throughout the serialization library.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Copyright Alexander Grund 2018. Corrections to singleton lifetime','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Distributed under the Boost','line_number':14,'multiline':False]['text':' Software License, Version 1.0. (See accompanying','line_number':15,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' The intention here is to define a template which will convert','line_number':18,'multiline':False]['text':' any class into a singleton with the following features:','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' a) initialized before first use.','line_number':21,'multiline':False]['text':' b) thread-safe for const access to the class','line_number':22,'multiline':False]['text':' c) non-locking','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' In order to do this,','line_number':25,'multiline':False]['text':' a) Initialize dynamically when used.','line_number':26,'multiline':False]['text':' b) Require that all singletons be initialized before main','line_number':27,'multiline':False]['text':' is called or any entry point into the shared library is invoked.','line_number':28,'multiline':False]['text':' This guarentees no race condition for initialization.','line_number':29,'multiline':False]['text':' In debug mode, we assert that no non-const functions are called','line_number':30,'multiline':False]['text':' after main is invoked.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':34,'multiline':False]['text':' must be the last header','line_number':46,'multiline':False]['text':'////////////////////////////////////////////////////////////////////','line_number':56,'multiline':False]['text':' Provides a dynamically-initialized (singleton) instance of T in a','line_number':57,'multiline':False]['text':' way that avoids LNK1179 on vc6.  See http://tinyurl.com/ljdp8 or','line_number':58,'multiline':False]['text':' http://lists.boost.org/Archives/boost/2006/05/105286.php for','line_number':59,'multiline':False]['text':' details.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' Singletons created by this code are guaranteed to be unique','line_number':63,'multiline':False]['text':' within the executable or shared library which creates them.','line_number':64,'multiline':False]['text':' This is sufficient and in fact ideal for the serialization library.','line_number':65,'multiline':False]['text':' The singleton is created when the module is loaded and destroyed','line_number':66,'multiline':False]['text':' when the module is unloaded.','line_number':67,'multiline':False]['text':' This base class has two functions.','line_number':69,'multiline':False]['text':' First it provides a module handle for each singleton indicating','line_number':71,'multiline':False]['text':' the executable or shared library in which it was created. This','line_number':72,'multiline':False]['text':' turns out to be necessary and sufficient to implement the tables','line_number':73,'multiline':False]['text':' used by serialization library.','line_number':74,'multiline':False]['text':' Second, it provides a mechanism to detect when a non-const function','line_number':76,'multiline':False]['text':' is called after initialization.','line_number':77,'multiline':False]['text':' Make a singleton to lock/unlock all singletons for alteration.','line_number':79,'multiline':False]['text':' The intent is that all singletons created/used by this code','line_number':80,'multiline':False]['text':' are to be initialized before main is called. A test program','line_number':81,'multiline':False]['text':' can lock all the singletons when main is entered.  Thus any','line_number':82,'multiline':False]['text':' attempt to retrieve a mutable instance while locked will','line_number':83,'multiline':False]['text':' generate an assertion if compiled for debug.','line_number':84,'multiline':False]['text':' The singleton template can be used in 2 ways:','line_number':86,'multiline':False]['text':' 1 (Recommended): Publicly inherit your type T from singleton<T>,','line_number':87,'multiline':False]['text':' make its ctor protected and access it via T::get_const_instance()','line_number':88,'multiline':False]['text':' 2: Simply access singleton<T> without changing T. Note that this only','line_number':89,'multiline':False]['text':' provides a global instance accesible by singleton<T>::get_const_instance()','line_number':90,'multiline':False]['text':' or singleton<T>::get_mutable_instance() to prevent using multiple instances','line_number':91,'multiline':False]['text':' of T make its ctor protected','line_number':92,'multiline':False]['text':' Note on usage of BOOST_DLLEXPORT: These functions are in danger of','line_number':94,'multiline':False]['text':' being eliminated by the optimizer when building an application in','line_number':95,'multiline':False]['text':' release mode. Usage of the macro is meant to signal the compiler/linker','line_number':96,'multiline':False]['text':' to avoid dropping these functions which seem to be unreferenced.','line_number':97,'multiline':False]['text':' This usage is not related to autolinking.','line_number':98,'multiline':False]['text':' This is the class actually instantiated and hence the real singleton.','line_number':128,'multiline':False]['text':' So there will only be one instance of this class. This does not hold','line_number':129,'multiline':False]['text':' for singleton<T> as a class derived from singleton<T> could be','line_number':130,'multiline':False]['text':' instantiated multiple times.','line_number':131,'multiline':False]['text':' It also provides a flag `is_destroyed` which returns true, when the','line_number':132,'multiline':False]['text':' class was destructed. It is static and hence accesible even after','line_number':133,'multiline':False]['text':' destruction. This can be used to check, if the singleton is still','line_number':134,'multiline':False]['text':' accesible e.g. in destructors of other singletons.','line_number':135,'multiline':False]['text':' Prefer a static function member to avoid LNK1179.','line_number':140,'multiline':False]['text':' Note: As this is for a singleton (1 instance only) it must be set','line_number':141,'multiline':False]['text':' never be reset (to false)!','line_number':142,'multiline':False]['text':' detail','line_number':158,'multiline':False]['text':' include this to provoke instantiation at pre-execution time','line_number':164,'multiline':False]['text':' use a wrapper so that types T with protected constructors can be used','line_number':169,'multiline':False]['text':' Using a static function member avoids LNK1179','line_number':170,'multiline':False]['text':' note that the following is absolutely essential.','line_number':173,'multiline':False]['text':' commenting out this statement will cause compilers to fail to','line_number':174,'multiline':False]['text':' construct the instance at pre-execution time.  This would prevent','line_number':175,'multiline':False]['text':' our usage/implementation of "locking" and introduce uncertainty into','line_number':176,'multiline':False]['text':' the sequence of object initialization.','line_number':177,'multiline':False]['text':' Unfortunately, this triggers detectors of undefine behavior','line_number':178,'multiline':False]['text':' and reports an error.  But I've been unable to find a different','line_number':179,'multiline':False]['text':' of guarenteeing that the the singleton is created at pre-main time.','line_number':180,'multiline':False]['text':' Do not allow instantiation of a singleton<T>. But we want to allow','line_number':186,'multiline':False]['text':' `class T: public singleton<T>` so we can't delete this ctor','line_number':187,'multiline':False]['text':' Assigning the instance reference to a static member forces initialization','line_number':203,'multiline':False]['text':' at startup time as described in','line_number':204,'multiline':False]['text':' https://groups.google.com/forum/#!topic/microsoft.public.vc.language/kDVNLnIsfZk','line_number':205,'multiline':False]['text':' namespace serialization','line_number':209,'multiline':False]['text':' namespace boost','line_number':210,'multiline':False]['text':' pops abi_suffix.hpp pragmas','line_number':212,'multiline':False]['text':' BOOST_SERIALIZATION_SINGLETON_HPP','line_number':218,'multiline':False]