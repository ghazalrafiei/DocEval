['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':24,'multiline':False]['text':' container/detail','line_number':30,'multiline':False]['text':'algo_equal(), algo_lexicographical_compare','line_number':31,'multiline':False]['text':' intrusive','line_number':39,'multiline':False]['text':' intrusive/detail','line_number':45,'multiline':False]['text':'pair','line_number':46,'multiline':False]['text':'tree_value_compare','line_number':47,'multiline':False]['text':' move','line_number':48,'multiline':False]['text':' move/detail','line_number':50,'multiline':False]['text':' other','line_number':56,'multiline':False]['text':'This trait is used to type-pun std::pair because in C++03','line_number':110,'multiline':False]['text':'compilers std::pair is useless for C++11 features','line_number':111,'multiline':False]['text':'namespace dtl {','line_number':158,'multiline':False]['text':'Deducing the hook type from node_t (e.g. node_t::hook_type) would','line_number':233,'multiline':False]['text':'provoke an early instantiation of node_t that could ruin recursive','line_number':234,'multiline':False]['text':'tree definitions, so retype the complete type to avoid any problem.','line_number':235,'multiline':False]['text':'Trait to detect manually rebalanceable tree types','line_number':246,'multiline':False]['text':'Proxy traits to implement different operations depending on the','line_number':257,'multiline':False]['text':'is_manually_balanceable<>::value','line_number':258,'multiline':False]['text':'namespace dtl {','line_number':275,'multiline':False]['text':'This functor will be used with Intrusive clone functions to obtain','line_number':279,'multiline':False]['text':'already allocated nodes from a intrusive container instead of','line_number':280,'multiline':False]['text':'allocating new ones. When the intrusive container runs out of nodes','line_number':281,'multiline':False]['text':'the node holder is used instead.','line_number':282,'multiline':False]['text':'First recycle a node (this can't throw)','line_number':305,'multiline':False]['text':'This can throw','line_number':307,'multiline':False]['text':'If there is an exception destroy the whole source','line_number':312,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':525,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':533,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':541,'multiline':False]['text':'construct with ordered range','line_number':544,'multiline':False]['text':'Use cend() as hint to achieve linear time for','line_number':572,'multiline':False]['text':'ordered ranges as required by the standard','line_number':573,'multiline':False]['text':'for the constructor','line_number':574,'multiline':False]['text':'Use cend() as hint to achieve linear time for','line_number':597,'multiline':False]['text':'ordered ranges as required by the standard','line_number':598,'multiline':False]['text':'for the constructor','line_number':599,'multiline':False]['text':'Optimized allocation and construction','line_number':617,'multiline':False]['text':'Optimized allocation and construction','line_number':634,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':638,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':676,'multiline':False]['text':'AllocHolder clears in case of exception','line_number':689,'multiline':False]['text':'AllocHolder clears the tree','line_number':693,'multiline':False]['text':'Transfer all the nodes to a temporary tree','line_number':706,'multiline':False]['text':'If anything goes wrong, all the nodes will be destroyed','line_number':707,'multiline':False]['text':'automatically','line_number':708,'multiline':False]['text':'Now recreate the source tree reusing nodes stored by other_tree','line_number':711,'multiline':False]['text':'If there are remaining nodes, destroy them','line_number':717,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':737,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':738,'multiline':False]['text':'Destroy','line_number':740,'multiline':False]['text':'Move allocator if needed','line_number':742,'multiline':False]['text':'Obtain resources','line_number':744,'multiline':False]['text':'Else do a one by one move','line_number':747,'multiline':False]['text':'Transfer all the nodes to a temporary tree','line_number':749,'multiline':False]['text':'If anything goes wrong, all the nodes will be destroyed','line_number':750,'multiline':False]['text':'automatically','line_number':751,'multiline':False]['text':'Now recreate the source tree reusing nodes stored by other_tree','line_number':754,'multiline':False]['text':'If there are remaining nodes, destroy them','line_number':760,'multiline':False]['text':' accessors:','line_number':771,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':825,'multiline':False]['text':'!','line_number':826,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':827,'multiline':False]['text':'!','line_number':828,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':829,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':834,'multiline':False]['text':'!','line_number':835,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':836,'multiline':False]['text':'!','line_number':837,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':838,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':843,'multiline':False]['text':'! of the reversed container.','line_number':844,'multiline':False]['text':'!','line_number':845,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':846,'multiline':False]['text':'!','line_number':847,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':848,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':853,'multiline':False]['text':'! of the reversed container.','line_number':854,'multiline':False]['text':'!','line_number':855,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':856,'multiline':False]['text':'!','line_number':857,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':858,'multiline':False]['text':' insert/erase','line_number':884,'multiline':False]['text':'push_back has no-throw guarantee so avoid any deallocator/destroyer','line_number':964,'multiline':False]['text':'No throw insertion part, release rollback','line_number':978,'multiline':False]['text':'Destroy unneeded node','line_number':993,'multiline':False]['text':'Support emulated rvalue references','line_number':1038,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1049,'multiline':False]['text':'','line_number':1096,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1100,'multiline':False]['text':'BOOST_MOVE_CONVERSION_AWARE_CATCH_1ARG(insert_unique, value_type, iterator, this->insert_unique_hint_convertible, const_iterator, const_iterator)','line_number':1102,'multiline':False]['text':'Support emulated rvalue references','line_number':1146,'multiline':False]['text':'inserted == false, node.empty()','line_number':1208,'multiline':False]['text':' search operations. Const and non-const overloads even if no iterator is returned','line_number':1261,'multiline':False]['text':' so splay implementations can to their rebalancing when searching in non-const versions','line_number':1262,'multiline':False]['text':'namespace dtl {','line_number':1452,'multiline':False]['text':'namespace container {','line_number':1453,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1458,'multiline':False]['text':'!specialization for optimizations','line_number':1459,'multiline':False]['text':'namespace boost  {','line_number':1474,'multiline':False]['text':'BOOST_CONTAINER_TREE_HPP','line_number':1478,'multiline':False]