['text':'','line_number':1,'multiline':False]['text':' posix/basic_descriptor.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':35,'multiline':False]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':37,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':41,'multiline':False]['text':'/ Provides POSIX descriptor functionality.','line_number':49,'multiline':False]['text':'*
 * The posix::basic_descriptor class template provides the ability to wrap a
 * POSIX descriptor.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':50,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':63,'multiline':False]['text':'/ Rebinds the descriptor type to another executor.','line_number':66,'multiline':False]['text':'/ The descriptor type when rebound to the specified executor.','line_number':70,'multiline':False]['text':'/ The native representation of a descriptor.','line_number':74,'multiline':False]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':80,'multiline':False]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':83,'multiline':False]['text':'/ A descriptor is always the lowest layer.','line_number':85,'multiline':False]['text':'/ Construct a descriptor without opening it.','line_number':88,'multiline':False]['text':'*
   * This constructor creates a descriptor without opening it.
   *
   * @param ex The I/O executor that the descriptor will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the
   * descriptor.
   ','line_number':89,'multiline':True]['text':'/ Construct a descriptor without opening it.','line_number':101,'multiline':False]['text':'*
   * This constructor creates a descriptor without opening it.
   *
   * @param context An execution context which provides the I/O executor that
   * the descriptor will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the descriptor.
   ','line_number':102,'multiline':True]['text':'/ Construct a descriptor on an existing native descriptor.','line_number':119,'multiline':False]['text':'*
   * This constructor creates a descriptor object to hold an existing native
   * descriptor.
   *
   * @param ex The I/O executor that the descriptor will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the
   * descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':120,'multiline':True]['text':'/ Construct a descriptor on an existing native descriptor.','line_number':142,'multiline':False]['text':'*
   * This constructor creates a descriptor object to hold an existing native
   * descriptor.
   *
   * @param context An execution context which provides the I/O executor that
   * the descriptor will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':143,'multiline':True]['text':'/ Move-construct a descriptor from another.','line_number':170,'multiline':False]['text':'*
   * This constructor moves a descriptor from one object to another.
   *
   * @param other The other descriptor object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_descriptor(const executor_type&)
   * constructor.
   ','line_number':171,'multiline':True]['text':'/ Move-assign a descriptor from another.','line_number':186,'multiline':False]['text':'*
   * This assignment operator moves a descriptor from one object to another.
   *
   * @param other The other descriptor object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_descriptor(const executor_type&)
   * constructor.
   ','line_number':187,'multiline':True]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':202,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':204,'multiline':False]['text':'/ Get a reference to the lowest layer.','line_number':210,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since a descriptor cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':211,'multiline':True]['text':'/ Get a const reference to the lowest layer.','line_number':224,'multiline':False]['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since a descriptor cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':225,'multiline':True]['text':'/ Assign an existing native descriptor to the descriptor.','line_number':238,'multiline':False]['text':'
   * This function opens the descriptor to hold an existing native descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':239,'multiline':True]['text':'/ Assign an existing native descriptor to the descriptor.','line_number':254,'multiline':False]['text':'
   * This function opens the descriptor to hold an existing native descriptor.
   *
   * @param native_descriptor A native descriptor.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':255,'multiline':True]['text':'/ Determine whether the descriptor is open.','line_number':270,'multiline':False]['text':'/ Close the descriptor.','line_number':276,'multiline':False]['text':'*
   * This function is used to close the descriptor. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   ','line_number':277,'multiline':True]['text':'/ Close the descriptor.','line_number':292,'multiline':False]['text':'*
   * This function is used to close the descriptor. Any asynchronous read or
   * write operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   ','line_number':293,'multiline':True]['text':'/ Get the native descriptor representation.','line_number':307,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * descriptor. This is intended to allow access to native descriptor
   * functionality that is not otherwise provided.
   ','line_number':308,'multiline':True]['text':'/ Release ownership of the native descriptor implementation.','line_number':318,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * descriptor. After calling this function, @c is_open() returns false. The
   * caller is responsible for closing the descriptor.
   *
   * All outstanding asynchronous read or write operations will finish
   * immediately, and the handlers for cancelled operations will be passed the
   * boost::asio::error::operation_aborted error.
   ','line_number':319,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the descriptor.','line_number':333,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':334,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the descriptor.','line_number':348,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':349,'multiline':True]['text':'/ Perform an IO control command on the descriptor.','line_number':362,'multiline':False]['text':'*
   * This function is used to execute an IO control command on the descriptor.
   *
   * @param command The IO control command to be performed on the descriptor.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @sa IoControlCommand @n
   * boost::asio::posix::descriptor_base::bytes_readable @n
   * boost::asio::posix::descriptor_base::non_blocking_io
   *
   * @par Example
   * Getting the number of bytes ready to read:
   * @code
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * boost::asio::posix::stream_descriptor::bytes_readable command;
   * descriptor.io_control(command);
   * std::size_t bytes_readable = command.get();
   * @endcode
   ','line_number':363,'multiline':True]['text':'/ Perform an IO control command on the descriptor.','line_number':392,'multiline':False]['text':'*
   * This function is used to execute an IO control command on the descriptor.
   *
   * @param command The IO control command to be performed on the descriptor.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @sa IoControlCommand @n
   * boost::asio::posix::descriptor_base::bytes_readable @n
   * boost::asio::posix::descriptor_base::non_blocking_io
   *
   * @par Example
   * Getting the number of bytes ready to read:
   * @code
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * boost::asio::posix::stream_descriptor::bytes_readable command;
   * boost::system::error_code ec;
   * descriptor.io_control(command, ec);
   * if (ec)
   * {
   *   // An error occurred.
   * }
   * std::size_t bytes_readable = command.get();
   * @endcode
   ','line_number':393,'multiline':True]['text':'/ Gets the non-blocking mode of the descriptor.','line_number':427,'multiline':False]['text':'*
   * @returns @c true if the descriptor's synchronous operations will fail with
   * boost::asio::error::would_block if they are unable to perform the requested
   * operation immediately. If @c false, synchronous operations will block
   * until complete.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * boost::asio::error::would_block.
   ','line_number':428,'multiline':True]['text':'/ Sets the non-blocking mode of the descriptor.','line_number':443,'multiline':False]['text':'*
   * @param mode If @c true, the descriptor's synchronous operations will fail
   * with boost::asio::error::would_block if they are unable to perform the
   * requested operation immediately. If @c false, synchronous operations will
   * block until complete.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * boost::asio::error::would_block.
   ','line_number':444,'multiline':True]['text':'/ Sets the non-blocking mode of the descriptor.','line_number':463,'multiline':False]['text':'*
   * @param mode If @c true, the descriptor's synchronous operations will fail
   * with boost::asio::error::would_block if they are unable to perform the
   * requested operation immediately. If @c false, synchronous operations will
   * block until complete.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note The non-blocking mode has no effect on the behaviour of asynchronous
   * operations. Asynchronous operations will never fail with the error
   * boost::asio::error::would_block.
   ','line_number':464,'multiline':True]['text':'/ Gets the non-blocking mode of the native descriptor implementation.','line_number':483,'multiline':False]['text':'*
   * This function is used to retrieve the non-blocking mode of the underlying
   * native descriptor. This mode has no effect on the behaviour of the
   * descriptor object's synchronous operations.
   *
   * @returns @c true if the underlying descriptor is in non-blocking mode and
   * direct system calls may fail with boost::asio::error::would_block (or the
   * equivalent system error).
   *
   * @note The current non-blocking mode is cached by the descriptor object.
   * Consequently, the return value may be incorrect if the non-blocking mode
   * was set directly on the native descriptor.
   ','line_number':484,'multiline':True]['text':'/ Sets the non-blocking mode of the native descriptor implementation.','line_number':503,'multiline':False]['text':'*
   * This function is used to modify the non-blocking mode of the underlying
   * native descriptor. It has no effect on the behaviour of the descriptor
   * object's synchronous operations.
   *
   * @param mode If @c true, the underlying descriptor is put into non-blocking
   * mode and direct system calls may fail with boost::asio::error::would_block
   * (or the equivalent system error).
   *
   * @throws boost::system::system_error Thrown on failure. If the @c mode is
   * @c false, but the current value of @c non_blocking() is @c true, this
   * function fails with boost::asio::error::invalid_argument, as the
   * combination does not make sense.
   ','line_number':504,'multiline':True]['text':'/ Sets the non-blocking mode of the native descriptor implementation.','line_number':526,'multiline':False]['text':'*
   * This function is used to modify the non-blocking mode of the underlying
   * native descriptor. It has no effect on the behaviour of the descriptor
   * object's synchronous operations.
   *
   * @param mode If @c true, the underlying descriptor is put into non-blocking
   * mode and direct system calls may fail with boost::asio::error::would_block
   * (or the equivalent system error).
   *
   * @param ec Set to indicate what error occurred, if any. If the @c mode is
   * @c false, but the current value of @c non_blocking() is @c true, this
   * function fails with boost::asio::error::invalid_argument, as the
   * combination does not make sense.
   ','line_number':527,'multiline':True]['text':'/ Wait for the descriptor to become ready to read, ready to write, or to','line_number':549,'multiline':False]['text':'/ have pending error conditions.','line_number':550,'multiline':False]['text':'*
   * This function is used to perform a blocking wait for a descriptor to enter
   * a ready to read, write or error condition state.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @par Example
   * Waiting for a descriptor to become readable.
   * @code
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * descriptor.wait(boost::asio::posix::stream_descriptor::wait_read);
   * @endcode
   ','line_number':551,'multiline':True]['text':'/ Wait for the descriptor to become ready to read, ready to write, or to','line_number':572,'multiline':False]['text':'/ have pending error conditions.','line_number':573,'multiline':False]['text':'*
   * This function is used to perform a blocking wait for a descriptor to enter
   * a ready to read, write or error condition state.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @par Example
   * Waiting for a descriptor to become readable.
   * @code
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * boost::system::error_code ec;
   * descriptor.wait(boost::asio::posix::stream_descriptor::wait_read, ec);
   * @endcode
   ','line_number':574,'multiline':True]['text':'/ Asynchronously wait for the descriptor to become ready to read, ready to','line_number':597,'multiline':False]['text':'/ write, or to have pending error conditions.','line_number':598,'multiline':False]['text':'*
   * This function is used to perform an asynchronous wait for a descriptor to
   * enter a ready to read, write or error condition state. It is an initiating
   * function for an @ref asynchronous_operation, and always returns
   * immediately.
   *
   * @param w Specifies the desired descriptor state.
   *
   * @param token The @ref completion_token that will be used to produce a
   * completion handler, which will be called when the wait completes.
   * Potential completion tokens include @ref use_future, @ref use_awaitable,
   * @ref yield_context, or a function object with the correct completion
   * signature. The function signature of the completion handler must be:
   * @code void handler(
   *   const boost::system::error_code& error // Result of operation.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the completion handler will not be invoked from within this function.
   * On immediate completion, invocation of the handler will be performed in a
   * manner equivalent to using boost::asio::post().
   *
   * @par Completion Signature
   * @code void(boost::system::error_code) @endcode
   *
   * @par Example
   * @code
   * void wait_handler(const boost::system::error_code& error)
   * {
   *   if (!error)
   *   {
   *     // Wait succeeded.
   *   }
   * }
   *
   * ...
   *
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * descriptor.async_wait(
   *     boost::asio::posix::stream_descriptor::wait_read,
   *     wait_handler);
   * @endcode
   *
   * @par Per-Operation Cancellation
   * This asynchronous operation supports cancellation for the following
   * boost::asio::cancellation_type values:
   *
   * @li @c cancellation_type::terminal
   *
   * @li @c cancellation_type::partial
   *
   * @li @c cancellation_type::total
   ','line_number':599,'multiline':True]['text':'/ Protected destructor to prevent deletion through this type.','line_number':666,'multiline':False]['text':'*
   * This function destroys the descriptor, cancelling any outstanding
   * asynchronous wait operations associated with the descriptor as if by
   * calling @c cancel.
   ','line_number':667,'multiline':True]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':678,'multiline':False]['text':' defined(BOOST_ASIO_HAS_IO_URING_AS_DEFAULT)','line_number':680,'multiline':False]['text':' Disallow copying and assignment.','line_number':683,'multiline':False]['text':' If you get an error on the following line it means that your handler','line_number':705,'multiline':False]['text':' does not meet the documented type requirements for a WaitHandler.','line_number':706,'multiline':False]['text':' namespace posix','line_number':720,'multiline':False]['text':' namespace asio','line_number':721,'multiline':False]['text':' namespace boost','line_number':722,'multiline':False]['text':' defined(BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR)','line_number':726,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':727,'multiline':False]['text':' BOOST_ASIO_POSIX_BASIC_DESCRIPTOR_HPP','line_number':729,'multiline':False]