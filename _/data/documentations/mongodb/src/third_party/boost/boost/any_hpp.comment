['text':' See http://www.boost.org/libs/any for Documentation.','line_number':1,'multiline':False]['text':' what:  variant type boost::any','line_number':11,'multiline':False]['text':' who:   contributed by Kevlin Henney,','line_number':12,'multiline':False]['text':'        with features contributed and bugs found by','line_number':13,'multiline':False]['text':'        Antony Polukhin, Ed Brey, Mark Rodgers,','line_number':14,'multiline':False]['text':'        Peter Dimov, and James Curran','line_number':15,'multiline':False]['text':' when:  July 2001, April 2013 - 2020','line_number':16,'multiline':False]['text':' structors','line_number':38,'multiline':False]['text':' Move constructor','line_number':63,'multiline':False]['text':' Perfect forwarding of ValueType','line_number':70,'multiline':False]['text':' disable if value has type `any&`','line_number':73,'multiline':False]['text':' disable if value has type `const ValueType&&`','line_number':74,'multiline':False]['text':' modifiers','line_number':89,'multiline':False]['text':' move assignment','line_number':125,'multiline':False]['text':' Perfect forwarding of ValueType','line_number':133,'multiline':False]['text':' queries','line_number':146,'multiline':False]['text':' types','line_number':164,'multiline':False]['text':' types (public so any_cast can be non-friend)','line_number':166,'multiline':False]['text':' structors','line_number':171,'multiline':False]['text':' queries','line_number':177,'multiline':False]['text':' structors','line_number':192,'multiline':False]['text':' queries','line_number':205,'multiline':False]['text':' representation','line_number':217,'multiline':False]['text':' intentionally left unimplemented','line_number':221,'multiline':False]['text':' representation','line_number':227,'multiline':False]['text':' representation (public so any_cast can be non-friend)','line_number':237,'multiline':False]['text':' Attempt to avoid construction of a temporary object in cases when','line_number':276,'multiline':False]['text':' `ValueType` is not a reference. Example:','line_number':277,'multiline':False]['text':' `static_cast<std::string>(*result);`','line_number':278,'multiline':False]['text':' which is equal to `std::string(*result);`','line_number':279,'multiline':False]['text':' "returning address of local variable or temporary" but *result is not local!','line_number':288,'multiline':False]['text':'true if ValueType is rvalue or just a value','line_number':308,'multiline':True]['text':' Note: The "unsafe" versions of any_cast are not part of the','line_number':317,'multiline':False]['text':' public interface and may be removed at any time. They are','line_number':318,'multiline':False]['text':' required where we know what type is stored in the any and can't','line_number':319,'multiline':False]['text':' use typeid() comparison, e.g., when our types may travel across','line_number':320,'multiline':False]['text':' different shared libraries.','line_number':321,'multiline':False]['text':' Copyright Kevlin Henney, 2000, 2001, 2002. All rights reserved.','line_number':337,'multiline':False]['text':' Copyright Antony Polukhin, 2013-2022.','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':340,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':341,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':342,'multiline':False]