['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]['text':' boost/smart_ptr/detail/yield_k.hpp','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Copyright 2008, 2020 Peter Dimov','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' inline void boost::detail::yield( unsigned k );','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':'   Typical use:','line_number':16,'multiline':False]['text':'   for( unsigned k = 0; !try_lock(); ++k ) yield( k );','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':19,'multiline':False]['text':' https://www.boost.org/LICENSE_1_0.txt','line_number':20,'multiline':False]['text':' Experiments on Windows and Fedora 32 show that a single pause,','line_number':34,'multiline':False]['text':' followed by an immediate sp_thread_sleep(), is best.','line_number':35,'multiline':False]['text':' namespace detail','line_number':47,'multiline':False]['text':' namespace boost','line_number':49,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_DETAIL_YIELD_K_HPP_INCLUDED','line_number':51,'multiline':False]