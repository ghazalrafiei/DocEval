['text':'','line_number':1,'multiline':False]['text':' io_object_executor.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2019 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' Wrap the (potentially polymorphic) executor so that we can bypass it when','line_number':29,'multiline':False]['text':' dispatching on a target executor that has a native I/O implementation.','line_number':30,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':62,'multiline':False]['text':' When using a native implementation, work is already counted by the','line_number':84,'multiline':False]['text':' execution context.','line_number':85,'multiline':False]['text':' When using a native implementation, work is already counted by the','line_number':98,'multiline':False]['text':' execution context.','line_number':99,'multiline':False]['text':' When using a native implementation, I/O completion handlers are','line_number':113,'multiline':False]['text':' already dispatched according to the execution context's executor's','line_number':114,'multiline':False]['text':' rules. We can call the function directly.','line_number':115,'multiline':False]['text':' namespace detail','line_number':156,'multiline':False]['text':' namespace asio','line_number':157,'multiline':False]['text':' namespace boost','line_number':158,'multiline':False]['text':' BOOST_ASIO_DETAIL_IO_OBJECT_EXECUTOR_HPP','line_number':162,'multiline':False]