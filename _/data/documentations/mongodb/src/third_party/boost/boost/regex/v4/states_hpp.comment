['text':'
 *
 * Copyright (c) 1998-2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         states.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares internal state machine structures.
  ','line_number':12,'multiline':True]['text':'** mask_type *******************************************************
Whenever we have a choice of two alternatives, we use an array of bytes
to indicate which of the two alternatives it is possible to take for any
given input character.  If mask_take is set, then we can take the next 
state, and if mask_skip is set then we can take the alternative.
**********************************************************************','line_number':36,'multiline':True]['text':'** helpers **********************************************************
These helpers let us use function overload resolution to detect whether
we have narrow or wide character strings:
**********************************************************************','line_number':51,'multiline':True]['text':'** enum syntax_element_type ******************************************
Every record in the state machine falls into one of the following types:
**********************************************************************','line_number':63,'multiline':True]['text':' start of a marked sub-expression, or perl-style (?...) extension','line_number':68,'multiline':False]['text':' end of a marked sub-expression, or perl-style (?...) extension','line_number':70,'multiline':False]['text':' any sequence of literal characters','line_number':72,'multiline':False]['text':' start of line assertion: ^','line_number':74,'multiline':False]['text':' end of line assertion $','line_number':76,'multiline':False]['text':' match any character: .','line_number':78,'multiline':False]['text':' end of expression: we have a match when we get here','line_number':80,'multiline':False]['text':' perl style word boundary: \b','line_number':82,'multiline':False]['text':' perl style within word boundary: \B','line_number':84,'multiline':False]['text':' start of word assertion: \<','line_number':86,'multiline':False]['text':' end of word assertion: \>','line_number':88,'multiline':False]['text':' start of buffer assertion: \`','line_number':90,'multiline':False]['text':' end of buffer assertion: \'','line_number':92,'multiline':False]['text':' backreference to previously matched sub-expression','line_number':94,'multiline':False]['text':' either a wide character set [..] or one with multicharacter collating elements:','line_number':96,'multiline':False]['text':' narrow character set: [...]','line_number':98,'multiline':False]['text':' jump to a new state in the machine:','line_number':100,'multiline':False]['text':' choose between two production states:','line_number':102,'multiline':False]['text':' a repeat','line_number':104,'multiline':False]['text':' match a combining character sequence','line_number':106,'multiline':False]['text':' perl style soft buffer end: \z','line_number':108,'multiline':False]['text':' perl style continuation: \G','line_number':110,'multiline':False]['text':' single character repeats:','line_number':112,'multiline':False]['text':' a backstep for lookbehind repeats:','line_number':117,'multiline':False]['text':' an assertion that a mark was matched:','line_number':119,'multiline':False]['text':' a recursive expression:','line_number':122,'multiline':False]['text':' Verbs:','line_number':124,'multiline':False]['text':' dwa 09/26/00 - This is needed to suppress warnings about an ambiguous conversion','line_number':132,'multiline':False]['text':'** union offset_type ************************************************
Points to another state in the machine.  During machine construction
we use integral offsets, but these are converted to pointers before
execution of the machine.
**********************************************************************','line_number':138,'multiline':True]['text':'** struct re_syntax_base ********************************************
Base class for all states in the machine.
**********************************************************************','line_number':149,'multiline':True]['text':' what kind of state this is','line_number':154,'multiline':False]['text':' next state in the machine','line_number':155,'multiline':False]['text':'** struct re_brace **************************************************
A marked parenthesis.
**********************************************************************','line_number':158,'multiline':True]['text':' The index to match, can be zero (don't mark the sub-expression)','line_number':163,'multiline':False]['text':' or negative (for perl style (?...) extensions):','line_number':164,'multiline':False]['text':'** struct re_dot **************************************************
Match anything.
**********************************************************************','line_number':169,'multiline':True]['text':'** struct re_literal ************************************************
A string of literals, following this structure will be an 
array of characters: charT[length]
**********************************************************************','line_number':186,'multiline':True]['text':'** struct re_case ************************************************
Indicates whether we are moving to a case insensive block or not
**********************************************************************','line_number':195,'multiline':True]['text':'** struct re_set_long ***********************************************
A wide character set of characters, following this structure will be
an array of type charT:
First csingles null-terminated strings
Then 2 * cranges NULL terminated strings
Then cequivalents NULL terminated strings
**********************************************************************','line_number':203,'multiline':True]['text':'** struct re_set ****************************************************
A set of narrow-characters, matches any of _map which is none-zero
**********************************************************************','line_number':220,'multiline':True]['text':'** struct re_jump ***************************************************
Jump to a new location in the machine (not next).
**********************************************************************','line_number':228,'multiline':True]['text':' location to jump to','line_number':233,'multiline':False]['text':'** struct re_alt ***************************************************
Jump to a new location in the machine (possibly next).
**********************************************************************','line_number':236,'multiline':True]['text':' which characters can take the jump','line_number':241,'multiline':False]['text':' true if we match a NULL string','line_number':242,'multiline':False]['text':'** struct re_repeat *************************************************
Repeat a section of the machine
**********************************************************************','line_number':245,'multiline':True]['text':' min and max allowable repeats','line_number':250,'multiline':False]['text':' Unique identifier for this repeat','line_number':251,'multiline':False]['text':' True if this repeat is at the start of the machine (lets us optimize some searches)','line_number':252,'multiline':False]['text':' True if this is a greedy repeat','line_number':253,'multiline':False]['text':'** struct re_recurse ************************************************
Recurse to a particular subexpression.
*********************************************************************','line_number':256,'multiline':True]['text':' identifier of first nested repeat within the recursion.','line_number':261,'multiline':False]['text':'** struct re_commit *************************************************
Used for the PRUNE, SKIP and COMMIT verbs which basically differ only in what happens
if no match is found and we start searching forward.
*********************************************************************','line_number':264,'multiline':True]['text':'** enum re_jump_size_type *******************************************
Provides compiled size of re_jump structure (allowing for trailing alignment).
We provide this so we know how manybytes to insert when constructing the machine
(The value of padding_mask is defined in regex_raw_buffer.hpp).
**********************************************************************','line_number':279,'multiline':True]['text':'** proc re_is_set_member *********************************************
Forward declaration: we'll need this one later...
**********************************************************************','line_number':291,'multiline':True]['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':304,'multiline':False]['text':' namespace boost','line_number':306,'multiline':False]