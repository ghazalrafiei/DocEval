['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'!\file','line_number':39,'multiline':False]['text':'!Describes a named mutex class for inter-process synchronization','line_number':40,'multiline':False]['text':'!A mutex with a global name, so it can be found from different','line_number':47,'multiline':False]['text':'!processes. This mutex can't be placed in shared memory, and','line_number':48,'multiline':False]['text':'!each process should have it's own named_mutex.','line_number':49,'multiline':False]['text':'Non-copyable','line_number':54,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':59,'multiline':False]['text':'!Creates a global mutex with a name.','line_number':62,'multiline':False]['text':'!Throws interprocess_exception on error.','line_number':63,'multiline':False]['text':'!Opens or creates a global mutex with a name.','line_number':66,'multiline':False]['text':'!If the mutex is created, this call is equivalent to','line_number':67,'multiline':False]['text':'!named_mutex(create_only_t, ... )','line_number':68,'multiline':False]['text':'!If the mutex is already created, this call is equivalent','line_number':69,'multiline':False]['text':'!named_mutex(open_only_t, ... )','line_number':70,'multiline':False]['text':'!Does not throw','line_number':71,'multiline':False]['text':'!Opens a global mutex with a name if that mutex is previously','line_number':74,'multiline':False]['text':'!created. If it is not previously created this function throws','line_number':75,'multiline':False]['text':'!interprocess_exception.','line_number':76,'multiline':False]['text':'!Creates a global mutex with a name.','line_number':81,'multiline':False]['text':'!Throws interprocess_exception on error.','line_number':82,'multiline':False]['text':'! ','line_number':83,'multiline':False]['text':'!Note: This function is only available on operating systems with','line_number':84,'multiline':False]['text':'!      native wchar_t APIs (e.g. Windows).','line_number':85,'multiline':False]['text':'!Opens or creates a global mutex with a name.','line_number':88,'multiline':False]['text':'!If the mutex is created, this call is equivalent to','line_number':89,'multiline':False]['text':'!named_mutex(create_only_t, ... )','line_number':90,'multiline':False]['text':'!If the mutex is already created, this call is equivalent','line_number':91,'multiline':False]['text':'!named_mutex(open_only_t, ... )','line_number':92,'multiline':False]['text':'!Does not throw','line_number':93,'multiline':False]['text':'! ','line_number':94,'multiline':False]['text':'!Note: This function is only available on operating systems with','line_number':95,'multiline':False]['text':'!      native wchar_t APIs (e.g. Windows).','line_number':96,'multiline':False]['text':'!Opens a global mutex with a name if that mutex is previously','line_number':99,'multiline':False]['text':'!created. If it is not previously created this function throws','line_number':100,'multiline':False]['text':'!interprocess_exception.','line_number':101,'multiline':False]['text':'! ','line_number':102,'multiline':False]['text':'!Note: This function is only available on operating systems with','line_number':103,'multiline':False]['text':'!      native wchar_t APIs (e.g. Windows).','line_number':104,'multiline':False]['text':'defined(BOOST_INTERPROCESS_WCHAR_NAMED_RESOURCES) || defined(BOOST_INTERPROCESS_DOXYGEN_INVOKED)','line_number':107,'multiline':False]['text':'!Destroys *this and indicates that the calling process is finished using','line_number':109,'multiline':False]['text':'!the resource. The destructor function will deallocate','line_number':110,'multiline':False]['text':'!any system resources allocated by the system for use by this process for','line_number':111,'multiline':False]['text':'!this resource. The resource can still be opened again calling','line_number':112,'multiline':False]['text':'!the open constructor overload. To erase the resource from the system','line_number':113,'multiline':False]['text':'!use remove().','line_number':114,'multiline':False]['text':'!Unlocks a previously locked','line_number':117,'multiline':False]['text':'!mutex.','line_number':118,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':121,'multiline':False]['text':'!','line_number':122,'multiline':False]['text':'!Locks the mutex, sleeps when the mutex is already locked.','line_number':123,'multiline':False]['text':'!Throws interprocess_exception if a severe error is found','line_number':124,'multiline':False]['text':'!','line_number':125,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':126,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':127,'multiline':False]['text':'!   an exception could be thrown.','line_number':128,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':131,'multiline':False]['text':'!','line_number':132,'multiline':False]['text':'!Tries to lock the mutex, returns false when the mutex','line_number':133,'multiline':False]['text':'!is already locked, returns true when success.','line_number':134,'multiline':False]['text':'!Throws interprocess_exception if a severe error is found','line_number':135,'multiline':False]['text':'!','line_number':136,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':137,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':138,'multiline':False]['text':'!   an exception could be thrown.','line_number':139,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':142,'multiline':False]['text':'!','line_number':143,'multiline':False]['text':'!Tries to lock the the mutex until time abs_time,','line_number':144,'multiline':False]['text':'!Returns false when timeout expires, returns true when locks.','line_number':145,'multiline':False]['text':'!Throws interprocess_exception if a severe error is found','line_number':146,'multiline':False]['text':'!','line_number':147,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':148,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':149,'multiline':False]['text':'!   an exception could be thrown.','line_number':150,'multiline':False]['text':'!Same as `timed_lock`, but this function is modeled after the','line_number':154,'multiline':False]['text':'!standard library interface.','line_number':155,'multiline':False]['text':'!Same as `timed_lock`, but this function is modeled after the','line_number':159,'multiline':False]['text':'!standard library interface.','line_number':160,'multiline':False]['text':'!Erases a named mutex from the system.','line_number':164,'multiline':False]['text':'!Returns false on error. Never throws.','line_number':165,'multiline':False]['text':'!Erases a named mutex from the system.','line_number':170,'multiline':False]['text':'!Returns false on error. Never throws.','line_number':171,'multiline':False]['text':'! ','line_number':172,'multiline':False]['text':'!Note: This function is only available on operating systems with','line_number':173,'multiline':False]['text':'!      native wchar_t APIs (e.g. Windows).','line_number':174,'multiline':False]['text':'defined(BOOST_INTERPROCESS_WCHAR_NAMED_RESOURCES) || defined(BOOST_INTERPROCESS_DOXYGEN_INVOKED)','line_number':177,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':197,'multiline':False]['text':'defined(BOOST_INTERPROCESS_WCHAR_NAMED_RESOURCES) || defined(BOOST_INTERPROCESS_DOXYGEN_INVOKED)','line_number':228,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':259,'multiline':False]['text':'namespace interprocess {','line_number':261,'multiline':False]['text':'namespace boost {','line_number':262,'multiline':False]['text':'BOOST_INTERPROCESS_NAMED_MUTEX_HPP','line_number':266,'multiline':False]