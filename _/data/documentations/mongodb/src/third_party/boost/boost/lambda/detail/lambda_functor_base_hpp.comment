['text':' Boost Lambda Library  lambda_functor_base.hpp -----------------------------','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' For more information, see www.boost.org','line_number':9,'multiline':False]['text':' ------------------------------------------------------------','line_number':11,'multiline':False]['text':'assignment operator could not be generated','line_number':27,'multiline':False]['text':' for return type deductions we wrap bound argument to this class,','line_number':30,'multiline':False]['text':' which fulfils the base class contract for lambda_functors','line_number':31,'multiline':False]['text':' take all parameters as const references. Note that non-const references','line_number':40,'multiline':False]['text':' stay as they are.','line_number':41,'multiline':False]['text':' for lambda functors, var is an identity operator. It was forbidden','line_number':62,'multiline':False]['text':' at some point, but we might want to var something that can be a ','line_number':63,'multiline':False]['text':' non-lambda functor or a lambda functor.','line_number':64,'multiline':False]['text':' as_lambda_functor turns any types to lambda functors ','line_number':105,'multiline':False]['text':' non-lambda_functors will be bound argument types','line_number':106,'multiline':False]['text':' turns arbitrary objects into lambda functors','line_number':120,'multiline':False]['text':' In a call constify_rvals<T>::go(x)','line_number':138,'multiline':False]['text':' x should be of type T. If T is a non-reference type, do','line_number':139,'multiline':False]['text':' returns x as const reference. ','line_number':140,'multiline':False]['text':' Otherwise the type doesn't change.','line_number':141,'multiline':False]['text':' The purpose of this class is to avoid ','line_number':142,'multiline':False]['text':' 'cannot bind temporaries to non-const references' errors.','line_number':143,'multiline':False]['text':' check whether one of the elements of a tuple (cons list) is of type','line_number':154,'multiline':False]['text':' null_type. Needed, because the compiler goes ahead and instantiates','line_number':155,'multiline':False]['text':' sig template for nullary case even if the nullary operator() is not','line_number':156,'multiline':False]['text':' called','line_number':157,'multiline':False]['text':' helpers -------------------','line_number':172,'multiline':False]['text':'  // note that tuples cannot have plain function types as elements.','line_number':194,'multiline':False]['text':'  // Hence, all other types will be non-const, except references to ','line_number':195,'multiline':False]['text':'  // functions.','line_number':196,'multiline':False]['text':'  template <class T> struct remove_reference_except_from_functions {','line_number':197,'multiline':False]['text':'    typedef typename boost::remove_reference<T>::type t;','line_number':198,'multiline':False]['text':'    typedef typename detail::IF<boost::is_function<t>::value, T, t>::RET type;','line_number':199,'multiline':False]['text':'  };','line_number':200,'multiline':False]['text':'      typename detail::remove_reference_except_from_functions<el_t>::type, ','line_number':209,'multiline':False]['text':' -------------','line_number':221,'multiline':False]['text':' take stored Args and Open Args, and return a const list with ','line_number':223,'multiline':False]['text':' deduced elements (real return types)','line_number':224,'multiline':False]['text':' take stored Args and Open Args, and return a const list with ','line_number':234,'multiline':False]['text':' deduced elements (references are stripped from the element types)','line_number':235,'multiline':False]['text':'            typename tuple_element_as_reference<N, Args>::type ','line_number':251,'multiline':False]['text':' end detail','line_number':268,'multiline':False]['text':' -- lambda_functor base ---------------------','line_number':270,'multiline':False]['text':' the explicit_return_type_action case -----------------------------------','line_number':272,'multiline':False]['text':' the protect_action case -----------------------------------','line_number':293,'multiline':False]['text':'    typedef typename detail::tuple_element_as_reference<0, SigArgs>::type type;','line_number':312,'multiline':False]['text':' Do nothing --------------------------------------------------------','line_number':317,'multiline':False]['text':'  Args args;','line_number':322,'multiline':False]['text':'  explicit lambda_functor_base(const Args& a) {}','line_number':324,'multiline':False]['text':'  These specializations provide a shorter notation to define actions.','line_number':336,'multiline':False]['text':'  These lambda_functor_base instances take care of the recursive evaluation','line_number':337,'multiline':False]['text':'  of the arguments and pass the evaluated arguments to the apply function','line_number':338,'multiline':False]['text':'  of an action class. To make action X work with these classes, one must','line_number':339,'multiline':False]['text':'  instantiate the lambda_functor_base as:','line_number':340,'multiline':False]['text':'  lambda_functor_base<action<ARITY, X>, Args>','line_number':341,'multiline':False]['text':'  Where ARITY is the arity of the apply function in X','line_number':342,'multiline':False]['text':'  The return type is queried as:','line_number':344,'multiline':False]['text':'  return_type_N<X, EvaluatedArgumentTypes>::type','line_number':345,'multiline':False]['text':'  for which there must be a specialization.','line_number':346,'multiline':False]['text':'  Function actions, casts, throws,... all go via these classes.','line_number':348,'multiline':False]['text':'  Args args; not needed','line_number':355,'multiline':False]['text':'a','line_number':356,'multiline':True]['text':' namespace lambda','line_number':612,'multiline':False]['text':' namespace boost','line_number':613,'multiline':False]