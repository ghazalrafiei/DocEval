['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/caps_gcc_atomic.hpp
 *
 * This header defines feature capabilities macros
 ','line_number':8,'multiline':True]['text':' Translate type-based lock-free macros to size-based ones','line_number':28,'multiline':False]['text':' On x86-64, clang 3.4 does not implement 128-bit __atomic* intrinsics even though it defines __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16:','line_number':79,'multiline':False]['text':' https://bugs.llvm.org/show_bug.cgi?id=19149','line_number':80,'multiline':False]['text':' Another problem exists with gcc 7 and later, as it requires to link with libatomic to use 16-byte intrinsics:','line_number':81,'multiline':False]['text':' https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80878','line_number':82,'multiline':False]['text':' Both clang and gcc do generate cmpxchg16b for __sync_val_compare_and_swap though.','line_number':83,'multiline':False]['text':' On 32-bit x86, there is a clang bug for 64-bit atomics: https://bugs.llvm.org/show_bug.cgi?id=19355. The compiler defines','line_number':93,'multiline':False]['text':' __GCC_ATOMIC_LLONG_LOCK_FREE to 1 when the target architecture supports 64-bit atomic instructions (i.e. the value should be 2).','line_number':94,'multiline':False]['text':' Additionally, any clang version requires to link with libatomic for 64-bit __atomic* intrinsics on x86. It does generate','line_number':95,'multiline':False]['text':' cmpxchg8b for __sync_val_compare_and_swap though.','line_number':96,'multiline':False]['text':' Override arch-specific macros if atomic intrinsics provide better guarantees','line_number':102,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_','line_number':158,'multiline':False]