['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2006-2014','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]['text':'std::size_t','line_number':45,'multiline':False]['text':'/ @cond','line_number':54,'multiline':False]['text':'/ @endcond','line_number':94,'multiline':False]['text':'! The class template slist is an intrusive container, that encapsulates','line_number':96,'multiline':False]['text':'! a singly-linked list. You can use such a list to squeeze the last bit','line_number':97,'multiline':False]['text':'! of performance from your application. Unfortunately, the little gains','line_number':98,'multiline':False]['text':'! come with some huge drawbacks. A lot of member functions can't be','line_number':99,'multiline':False]['text':'! implemented as efficiently as for standard containers. To overcome','line_number':100,'multiline':False]['text':'! this limitation some other member functions with rather unusual semantics','line_number':101,'multiline':False]['text':'! have to be introduced.','line_number':102,'multiline':False]['text':'!','line_number':103,'multiline':False]['text':'! The template parameter \c T is the type to be managed by the container.','line_number':104,'multiline':False]['text':'! The user can specify additional options and if no options are provided','line_number':105,'multiline':False]['text':'! default options are used.','line_number':106,'multiline':False]['text':'!','line_number':107,'multiline':False]['text':'! The container supports the following options:','line_number':108,'multiline':False]['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':109,'multiline':False]['text':'! \c constant_time_size<>, \c size_type<>,','line_number':110,'multiline':False]['text':'! \c linear<> and \c cache_last<>.','line_number':111,'multiline':False]['text':'!','line_number':112,'multiline':False]['text':'! The iterators of slist are forward iterators. slist provides a static','line_number':113,'multiline':False]['text':'! function called "previous" to compute the previous iterator of a given iterator.','line_number':114,'multiline':False]['text':'! This function has linear complexity. To improve the usability esp. with','line_number':115,'multiline':False]['text':'! the '*_after' functions, ++end() == begin() and previous(begin()) == end()','line_number':116,'multiline':False]['text':'! are defined. An new special function "before_begin()" is defined, which returns','line_number':117,'multiline':False]['text':'! an iterator that points one less the beginning of the list: ++before_begin() == begin()','line_number':118,'multiline':False]['text':'Public typedefs','line_number':126,'multiline':False]['text':'/ @cond','line_number':158,'multiline':False]['text':'noncopyable','line_number':162,'multiline':False]['text':'Constant-time size is incompatible with auto-unlink hooks!','line_number':167,'multiline':False]['text':'Linear singly linked lists are incompatible with auto-unlink hooks!','line_number':169,'multiline':False]['text':'A list with cached last node is incompatible with auto-unlink hooks!','line_number':171,'multiline':False]['text':'This function shall not be used if cache_last is not true','line_number':199,'multiline':False]['text':'This function shall not be used if cache_last is not true','line_number':206,'multiline':False]['text':'/ @endcond','line_number':263,'multiline':False]['text':'/@cond','line_number':267,'multiline':False]['text':'! <b>Requires</b>: f and before_l belong to another slist.','line_number':269,'multiline':False]['text':'!','line_number':270,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [f, before_l] to this','line_number':271,'multiline':False]['text':'!   list, after the element pointed by prev_pos.','line_number':272,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':273,'multiline':False]['text':'!','line_number':274,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':275,'multiline':False]['text':'!','line_number':276,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred','line_number':277,'multiline':False]['text':'!   if constant_time_size is true. Constant-time otherwise.','line_number':278,'multiline':False]['text':'!','line_number':279,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':280,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':281,'multiline':False]['text':'!','line_number':282,'multiline':False]['text':'! <b>Warning</b>: Experimental function, don't use it!','line_number':283,'multiline':False]['text':'/@endcond','line_number':301,'multiline':False]['text':'! <b>Effects</b>: constructs an empty list.','line_number':303,'multiline':False]['text':'!','line_number':304,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':305,'multiline':False]['text':'!','line_number':306,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':307,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':308,'multiline':False]['text':'! <b>Effects</b>: constructs an empty list.','line_number':313,'multiline':False]['text':'!','line_number':314,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':315,'multiline':False]['text':'!','line_number':316,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':317,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':318,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue of type value_type.','line_number':323,'multiline':False]['text':'!','line_number':324,'multiline':False]['text':'! <b>Effects</b>: Constructs a list equal to [b ,e).','line_number':325,'multiline':False]['text':'!','line_number':326,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(b, e). No copy constructors are called.','line_number':327,'multiline':False]['text':'!','line_number':328,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':329,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks).','line_number':330,'multiline':False]['text':'nothrow, no need to rollback to release elements on exception','line_number':336,'multiline':False]['text':'! <b>Effects</b>: Constructs a container moving resources from another container.','line_number':340,'multiline':False]['text':'!   Internal value traits are move constructed and','line_number':341,'multiline':False]['text':'!   nodes belonging to x (except the node representing the "end") are linked to *this.','line_number':342,'multiline':False]['text':'!','line_number':343,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':344,'multiline':False]['text':'!','line_number':345,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node's','line_number':346,'multiline':False]['text':'!   move constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':347,'multiline':False]['text':'!   or the move constructor of value traits throws.','line_number':348,'multiline':False]['text':'nothrow, no need to rollback to release elements on exception','line_number':353,'multiline':False]['text':'! <b>Effects</b>: Equivalent to swap','line_number':357,'multiline':False]['text':'!','line_number':358,'multiline':False]['text':'! <b>Effects</b>: If it's a safe-mode','line_number':362,'multiline':False]['text':'!   or auto-unlink value, the destructor does nothing','line_number':363,'multiline':False]['text':'!   (ie. no code is generated). Otherwise it detaches all elements from this.','line_number':364,'multiline':False]['text':'!   In this case the objects in the list are not deleted (i.e. no destructors','line_number':365,'multiline':False]['text':'!   are called), but the hooks according to the value_traits template parameter','line_number':366,'multiline':False]['text':'!   are set to their default value.','line_number':367,'multiline':False]['text':'!','line_number':368,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the list, if','line_number':369,'multiline':False]['text':'!   it's a safe-mode or auto-unlink value. Otherwise constant.','line_number':370,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the container.','line_number':379,'multiline':False]['text':'!','line_number':380,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':381,'multiline':False]['text':'!','line_number':382,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements of the list.','line_number':383,'multiline':False]['text':'!   if it's a safe-mode or auto-unlink value_type. Constant time otherwise.','line_number':384,'multiline':False]['text':'!','line_number':385,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the erased elements.','line_number':386,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':397,'multiline':False]['text':'!','line_number':398,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the container','line_number':399,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':400,'multiline':False]['text':'!','line_number':401,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':402,'multiline':False]['text':'!','line_number':403,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements of the list.','line_number':404,'multiline':False]['text':'!','line_number':405,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased elements.','line_number':406,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue.','line_number':421,'multiline':False]['text':'!','line_number':422,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the front of the list.','line_number':423,'multiline':False]['text':'!   No copy constructors are called.','line_number':424,'multiline':False]['text':'!','line_number':425,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':426,'multiline':False]['text':'!','line_number':427,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':428,'multiline':False]['text':'!','line_number':429,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':430,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue.','line_number':444,'multiline':False]['text':'!','line_number':445,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the back of the list.','line_number':446,'multiline':False]['text':'!   No copy constructors are called.','line_number':447,'multiline':False]['text':'!','line_number':448,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':449,'multiline':False]['text':'!','line_number':450,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':451,'multiline':False]['text':'!','line_number':452,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':453,'multiline':False]['text':'!   This function is only available is cache_last<> is true.','line_number':454,'multiline':False]['text':'! <b>Effects</b>: Erases the first element of the list.','line_number':467,'multiline':False]['text':'!   No destructors are called.','line_number':468,'multiline':False]['text':'!','line_number':469,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':470,'multiline':False]['text':'!','line_number':471,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':472,'multiline':False]['text':'!','line_number':473,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the erased element.','line_number':474,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':478,'multiline':False]['text':'!','line_number':479,'multiline':False]['text':'! <b>Effects</b>: Erases the first element of the list.','line_number':480,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':481,'multiline':False]['text':'!','line_number':482,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':483,'multiline':False]['text':'!','line_number':484,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':485,'multiline':False]['text':'!','line_number':486,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':487,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first element of the list.','line_number':504,'multiline':False]['text':'!','line_number':505,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':506,'multiline':False]['text':'!','line_number':507,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':508,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reference to the first element of the list.','line_number':512,'multiline':False]['text':'!','line_number':513,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':514,'multiline':False]['text':'!','line_number':515,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':516,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the last element of the list.','line_number':520,'multiline':False]['text':'!','line_number':521,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':522,'multiline':False]['text':'!','line_number':523,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':524,'multiline':False]['text':'!','line_number':525,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':526,'multiline':False]['text':'!   This function is only available is cache_last<> is true.','line_number':527,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reference to the last element of the list.','line_number':534,'multiline':False]['text':'!','line_number':535,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':536,'multiline':False]['text':'!','line_number':537,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':538,'multiline':False]['text':'!','line_number':539,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':540,'multiline':False]['text':'!   This function is only available is cache_last<> is true.','line_number':541,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the list.','line_number':548,'multiline':False]['text':'!','line_number':549,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':550,'multiline':False]['text':'!','line_number':551,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':552,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':556,'multiline':False]['text':'!','line_number':557,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':558,'multiline':False]['text':'!','line_number':559,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':560,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':564,'multiline':False]['text':'!','line_number':565,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':566,'multiline':False]['text':'!','line_number':567,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':568,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the list.','line_number':572,'multiline':False]['text':'!','line_number':573,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':574,'multiline':False]['text':'!','line_number':575,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':576,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':580,'multiline':False]['text':'!','line_number':581,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':582,'multiline':False]['text':'!','line_number':583,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':584,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':588,'multiline':False]['text':'!','line_number':589,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':590,'multiline':False]['text':'!','line_number':591,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':592,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator that points to a position','line_number':596,'multiline':False]['text':'!   before the first element. Equivalent to "end()"','line_number':597,'multiline':False]['text':'!','line_number':598,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':599,'multiline':False]['text':'!','line_number':600,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':601,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator that points to a position','line_number':605,'multiline':False]['text':'!   before the first element. Equivalent to "end()"','line_number':606,'multiline':False]['text':'!','line_number':607,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':608,'multiline':False]['text':'!','line_number':609,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':610,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator that points to a position','line_number':614,'multiline':False]['text':'!   before the first element. Equivalent to "end()"','line_number':615,'multiline':False]['text':'!','line_number':616,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':617,'multiline':False]['text':'!','line_number':618,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':619,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the last element contained in the list.','line_number':623,'multiline':False]['text':'!','line_number':624,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':625,'multiline':False]['text':'!','line_number':626,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':627,'multiline':False]['text':'!','line_number':628,'multiline':False]['text':'! <b>Note</b>: This function is present only if cached_last<> option is true.','line_number':629,'multiline':False]['text':'This function shall not be used if cache_last is not true','line_number':632,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the last element contained in the list.','line_number':637,'multiline':False]['text':'!','line_number':638,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':639,'multiline':False]['text':'!','line_number':640,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':641,'multiline':False]['text':'!','line_number':642,'multiline':False]['text':'! <b>Note</b>: This function is present only if cached_last<> option is true.','line_number':643,'multiline':False]['text':'This function shall not be used if cache_last is not true','line_number':646,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the last element contained in the list.','line_number':651,'multiline':False]['text':'!','line_number':652,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':653,'multiline':False]['text':'!','line_number':654,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':655,'multiline':False]['text':'!','line_number':656,'multiline':False]['text':'! <b>Note</b>: This function is present only if cached_last<> option is true.','line_number':657,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end iterator','line_number':661,'multiline':False]['text':'!   of slist.','line_number':662,'multiline':False]['text':'!','line_number':663,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the slist associated to the end iterator','line_number':664,'multiline':False]['text':'!','line_number':665,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':666,'multiline':False]['text':'!','line_number':667,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':668,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end const_iterator','line_number':672,'multiline':False]['text':'!   of slist.','line_number':673,'multiline':False]['text':'!','line_number':674,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the slist associated to the end iterator','line_number':675,'multiline':False]['text':'!','line_number':676,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':677,'multiline':False]['text':'!','line_number':678,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':679,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the list.','line_number':683,'multiline':False]['text':'!','line_number':684,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':685,'multiline':False]['text':'!','line_number':686,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements contained in the list.','line_number':687,'multiline':False]['text':'!   if constant_time_size is false. Constant time otherwise.','line_number':688,'multiline':False]['text':'!','line_number':689,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':690,'multiline':False]['text':'! <b>Effects</b>: Returns true if the list contains no elements.','line_number':699,'multiline':False]['text':'!','line_number':700,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':701,'multiline':False]['text':'!','line_number':702,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':703,'multiline':False]['text':'!','line_number':704,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':705,'multiline':False]['text':'! <b>Effects</b>: Swaps the elements of x and *this.','line_number':709,'multiline':False]['text':'!','line_number':710,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':711,'multiline':False]['text':'!','line_number':712,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements of both lists.','line_number':713,'multiline':False]['text':'!  Constant-time if linear<> and/or cache_last<> options are used.','line_number':714,'multiline':False]['text':'!','line_number':715,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':716,'multiline':False]['text':'! <b>Effects</b>: Moves backwards all the elements, so that the first','line_number':728,'multiline':False]['text':'!   element becomes the second, the second becomes the third...','line_number':729,'multiline':False]['text':'!   the last element becomes the first one.','line_number':730,'multiline':False]['text':'!','line_number':731,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':732,'multiline':False]['text':'!','line_number':733,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements plus the number shifts.','line_number':734,'multiline':False]['text':'!','line_number':735,'multiline':False]['text':'! <b>Note</b>: Iterators Does not affect the validity of iterators and references.','line_number':736,'multiline':False]['text':'! <b>Effects</b>: Moves forward all the elements, so that the second','line_number':740,'multiline':False]['text':'!   element becomes the first, the third becomes the second...','line_number':741,'multiline':False]['text':'!   the first element becomes the last one.','line_number':742,'multiline':False]['text':'!','line_number':743,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':744,'multiline':False]['text':'!','line_number':745,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements plus the number shifts.','line_number':746,'multiline':False]['text':'!','line_number':747,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':748,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':752,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':753,'multiline':False]['text':'!','line_number':754,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':755,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':756,'multiline':False]['text':'!   elements from src calling Cloner::operator()(const_reference )','line_number':757,'multiline':False]['text':'!   and inserts them on *this.','line_number':758,'multiline':False]['text':'!','line_number':759,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':760,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':761,'multiline':False]['text':'!','line_number':762,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':763,'multiline':False]['text':'!','line_number':764,'multiline':False]['text':'! <b>Throws</b>: If cloner throws.','line_number':765,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':780,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':781,'multiline':False]['text':'!','line_number':782,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':783,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':784,'multiline':False]['text':'!   elements from src calling Cloner::operator()(reference)','line_number':785,'multiline':False]['text':'!   and inserts them on *this.','line_number':786,'multiline':False]['text':'!','line_number':787,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':788,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':789,'multiline':False]['text':'!','line_number':790,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':791,'multiline':False]['text':'!','line_number':792,'multiline':False]['text':'! <b>Throws</b>: If cloner throws.','line_number':793,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and prev_p must point to an element','line_number':808,'multiline':False]['text':'!   contained by the list or to end().','line_number':809,'multiline':False]['text':'!','line_number':810,'multiline':False]['text':'! <b>Effects</b>: Inserts the value after the position pointed by prev_p.','line_number':811,'multiline':False]['text':'!    No copy constructor is called.','line_number':812,'multiline':False]['text':'!','line_number':813,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted element.','line_number':814,'multiline':False]['text':'!','line_number':815,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':816,'multiline':False]['text':'!','line_number':817,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':818,'multiline':False]['text':'!','line_number':819,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':820,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':834,'multiline':False]['text':'!   an lvalue of type value_type and prev_p must point to an element','line_number':835,'multiline':False]['text':'!   contained by the list or to the end node.','line_number':836,'multiline':False]['text':'!','line_number':837,'multiline':False]['text':'! <b>Effects</b>: Inserts the [f, l)','line_number':838,'multiline':False]['text':'!   after the position prev_p.','line_number':839,'multiline':False]['text':'!','line_number':840,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':841,'multiline':False]['text':'!','line_number':842,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted.','line_number':843,'multiline':False]['text':'!','line_number':844,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':845,'multiline':False]['text':'Insert first nodes avoiding cache and size checks','line_number':849,'multiline':False]['text':'Now fix special cases if needed','line_number':858,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and p must point to an element','line_number':867,'multiline':False]['text':'!   contained by the list or to end().','line_number':868,'multiline':False]['text':'!','line_number':869,'multiline':False]['text':'! <b>Effects</b>: Inserts the value before the position pointed by p.','line_number':870,'multiline':False]['text':'!   No copy constructor is called.','line_number':871,'multiline':False]['text':'!','line_number':872,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':873,'multiline':False]['text':'!','line_number':874,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before p.','line_number':875,'multiline':False]['text':'!  Constant-time if cache_last<> is true and p == end().','line_number':876,'multiline':False]['text':'!','line_number':877,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':878,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':882,'multiline':False]['text':'!   an lvalue of type value_type and p must point to an element','line_number':883,'multiline':False]['text':'!   contained by the list or to the end node.','line_number':884,'multiline':False]['text':'!','line_number':885,'multiline':False]['text':'! <b>Effects</b>: Inserts the pointed by b and e','line_number':886,'multiline':False]['text':'!   before the position p. No copy constructors are called.','line_number':887,'multiline':False]['text':'!','line_number':888,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':889,'multiline':False]['text':'!','line_number':890,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted plus linear','line_number':891,'multiline':False]['text':'!   to the elements before b.','line_number':892,'multiline':False]['text':'!   Linear to the number of elements to insert if cache_last<> option is true and p == end().','line_number':893,'multiline':False]['text':'!','line_number':894,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':895,'multiline':False]['text':'! <b>Effects</b>: Erases the element after the element pointed by prev of','line_number':900,'multiline':False]['text':'!   the list. No destructors are called.','line_number':901,'multiline':False]['text':'!','line_number':902,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':903,'multiline':False]['text':'!   or end() if no such element exists.','line_number':904,'multiline':False]['text':'!','line_number':905,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':906,'multiline':False]['text':'!','line_number':907,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':908,'multiline':False]['text':'!','line_number':909,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':910,'multiline':False]['text':'!   erased element.','line_number':911,'multiline':False]['text':'! <b>Effects</b>: Erases the range (before_f, l) from','line_number':915,'multiline':False]['text':'!   the list. No destructors are called.','line_number':916,'multiline':False]['text':'!','line_number':917,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':918,'multiline':False]['text':'!   or end() if no such element exists.','line_number':919,'multiline':False]['text':'!','line_number':920,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':921,'multiline':False]['text':'!','line_number':922,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of erased elements if it's a safe-mode','line_number':923,'multiline':False]['text':'!   , auto-unlink value or constant-time size is activated. Constant time otherwise.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':926,'multiline':False]['text':'!   erased element.','line_number':927,'multiline':False]['text':'! <b>Effects</b>: Erases the range (before_f, l) from','line_number':946,'multiline':False]['text':'!   the list. n must be distance(before_f, l) - 1.','line_number':947,'multiline':False]['text':'!   No destructors are called.','line_number':948,'multiline':False]['text':'!','line_number':949,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':950,'multiline':False]['text':'!   or end() if no such element exists.','line_number':951,'multiline':False]['text':'!','line_number':952,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':953,'multiline':False]['text':'!','line_number':954,'multiline':False]['text':'! <b>Complexity</b>: constant-time if link_mode is normal_link.','line_number':955,'multiline':False]['text':'!   Linear to the elements (l - before_f) otherwise.','line_number':956,'multiline':False]['text':'!','line_number':957,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':958,'multiline':False]['text':'!   erased element.','line_number':959,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed by i of the list.','line_number':983,'multiline':False]['text':'!   No destructors are called.','line_number':984,'multiline':False]['text':'!','line_number':985,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed element,','line_number':986,'multiline':False]['text':'!   or end() if no such element exists.','line_number':987,'multiline':False]['text':'!','line_number':988,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before i.','line_number':991,'multiline':False]['text':'!','line_number':992,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':993,'multiline':False]['text':'!   erased element.','line_number':994,'multiline':False]['text':'! <b>Requires</b>: f and l must be valid iterator to elements in *this.','line_number':998,'multiline':False]['text':'!','line_number':999,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed by b and e.','line_number':1000,'multiline':False]['text':'!   No destructors are called.','line_number':1001,'multiline':False]['text':'!','line_number':1002,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':1003,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1004,'multiline':False]['text':'!','line_number':1005,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1006,'multiline':False]['text':'!','line_number':1007,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before l.','line_number':1008,'multiline':False]['text':'!','line_number':1009,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':1010,'multiline':False]['text':'!   erased elements.','line_number':1011,'multiline':False]['text':'! <b>Effects</b>: Erases the range [f, l) from','line_number':1015,'multiline':False]['text':'!   the list. n must be distance(f, l).','line_number':1016,'multiline':False]['text':'!   No destructors are called.','line_number':1017,'multiline':False]['text':'!','line_number':1018,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':1019,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1020,'multiline':False]['text':'!','line_number':1021,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1022,'multiline':False]['text':'!','line_number':1023,'multiline':False]['text':'! <b>Complexity</b>: linear to the elements before f if link_mode is normal_link','line_number':1024,'multiline':False]['text':'!   and constant_time_size is activated. Linear to the elements before l otherwise.','line_number':1025,'multiline':False]['text':'!','line_number':1026,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':1027,'multiline':False]['text':'!   erased element.','line_number':1028,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1032,'multiline':False]['text':'!','line_number':1033,'multiline':False]['text':'! <b>Effects</b>: Erases the element after the element pointed by prev of','line_number':1034,'multiline':False]['text':'!   the list.','line_number':1035,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':1036,'multiline':False]['text':'!','line_number':1037,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':1038,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1039,'multiline':False]['text':'!','line_number':1040,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1041,'multiline':False]['text':'!','line_number':1042,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1043,'multiline':False]['text':'!','line_number':1044,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':1045,'multiline':False]['text':'/ @cond','line_number':1065,'multiline':False]['text':'/ @endcond','line_number':1112,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1114,'multiline':False]['text':'!','line_number':1115,'multiline':False]['text':'! <b>Effects</b>: Erases the range (before_f, l) from','line_number':1116,'multiline':False]['text':'!   the list.','line_number':1117,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1118,'multiline':False]['text':'!','line_number':1119,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':1120,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1121,'multiline':False]['text':'!','line_number':1122,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1123,'multiline':False]['text':'!','line_number':1124,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements (l - before_f + 1).','line_number':1125,'multiline':False]['text':'!','line_number':1126,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators to the erased element.','line_number':1127,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1148,'multiline':False]['text':'!','line_number':1149,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed by i of the list.','line_number':1150,'multiline':False]['text':'!   No destructors are called.','line_number':1151,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':1152,'multiline':False]['text':'!','line_number':1153,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed element,','line_number':1154,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1155,'multiline':False]['text':'!','line_number':1156,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1157,'multiline':False]['text':'!','line_number':1158,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before i.','line_number':1159,'multiline':False]['text':'!','line_number':1160,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':1161,'multiline':False]['text':'!   erased element.','line_number':1162,'multiline':False]['text':'! <b>Requires</b>: f and l must be valid iterator to elements in *this.','line_number':1173,'multiline':False]['text':'!                  Disposer::operator()(pointer) shouldn't throw.','line_number':1174,'multiline':False]['text':'!','line_number':1175,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed by b and e.','line_number':1176,'multiline':False]['text':'!   No destructors are called.','line_number':1177,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1178,'multiline':False]['text':'!','line_number':1179,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':1180,'multiline':False]['text':'!   or end() if no such element exists.','line_number':1181,'multiline':False]['text':'!','line_number':1182,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1183,'multiline':False]['text':'!','line_number':1184,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of erased elements plus linear','line_number':1185,'multiline':False]['text':'!   to the elements before f.','line_number':1186,'multiline':False]['text':'!','line_number':1187,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references) to the','line_number':1188,'multiline':False]['text':'!   erased elements.','line_number':1189,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':1194,'multiline':False]['text':'!   an lvalue of type value_type.','line_number':1195,'multiline':False]['text':'!','line_number':1196,'multiline':False]['text':'! <b>Effects</b>: Clears the list and inserts the range pointed by b and e.','line_number':1197,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1198,'multiline':False]['text':'!','line_number':1199,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1200,'multiline':False]['text':'!','line_number':1201,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted plus','line_number':1202,'multiline':False]['text':'!   linear to the elements contained in the list if it's a safe-mode','line_number':1203,'multiline':False]['text':'!   or auto-unlink value.','line_number':1204,'multiline':False]['text':'!   Linear to the number of elements inserted in the list otherwise.','line_number':1205,'multiline':False]['text':'!','line_number':1206,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1207,'multiline':False]['text':'!   to the erased elements.','line_number':1208,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1216,'multiline':False]['text':'!','line_number':1217,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield','line_number':1218,'multiline':False]['text':'!   an lvalue of type value_type.','line_number':1219,'multiline':False]['text':'!','line_number':1220,'multiline':False]['text':'! <b>Effects</b>: Clears the list and inserts the range pointed by b and e.','line_number':1221,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1222,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1223,'multiline':False]['text':'!','line_number':1224,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1225,'multiline':False]['text':'!','line_number':1226,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted plus','line_number':1227,'multiline':False]['text':'!   linear to the elements contained in the list.','line_number':1228,'multiline':False]['text':'!','line_number':1229,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1230,'multiline':False]['text':'!   to the erased elements.','line_number':1231,'multiline':False]['text':'! <b>Requires</b>: prev must point to an element contained by this list or','line_number':1239,'multiline':False]['text':'!   to the before_begin() element','line_number':1240,'multiline':False]['text':'!','line_number':1241,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, after the','line_number':1242,'multiline':False]['text':'! the element pointed by prev. No destructors or copy constructors are called.','line_number':1243,'multiline':False]['text':'!','line_number':1244,'multiline':False]['text':'! <b>Returns</b>: Nothing.','line_number':1245,'multiline':False]['text':'!','line_number':1246,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1247,'multiline':False]['text':'!','line_number':1248,'multiline':False]['text':'! <b>Complexity</b>: In general, linear to the elements contained in x.','line_number':1249,'multiline':False]['text':'!   Constant-time if cache_last<> option is true and also constant-time if','line_number':1250,'multiline':False]['text':'!   linear<> option is true "this" is empty and "l" is not used.','line_number':1251,'multiline':False]['text':'!','line_number':1252,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1253,'multiline':False]['text':'! list. Iterators of this list and all the references are not invalidated.','line_number':1254,'multiline':False]['text':'!','line_number':1255,'multiline':False]['text':'! <b>Additional note</b>: If the optional parameter "l" is provided, it will be','line_number':1256,'multiline':False]['text':'!   assigned to the last spliced element or prev if x is empty.','line_number':1257,'multiline':False]['text':'!   This iterator can be used as new "prev" iterator for a new splice_after call.','line_number':1258,'multiline':False]['text':'!   that will splice new values after the previously spliced values.','line_number':1259,'multiline':False]['text':'constant time if cache_last is active','line_number':1270,'multiline':False]['text':'! <b>Requires</b>: prev must point to an element contained by this list or','line_number':1286,'multiline':False]['text':'!   to the before_begin() element. prev_ele must point to an element contained in list','line_number':1287,'multiline':False]['text':'!   x or must be x.before_begin().','line_number':1288,'multiline':False]['text':'!','line_number':1289,'multiline':False]['text':'! <b>Effects</b>: Transfers the element after prev_ele, from list x to this list,','line_number':1290,'multiline':False]['text':'!   after the element pointed by prev. No destructors or copy constructors are called.','line_number':1291,'multiline':False]['text':'!','line_number':1292,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1293,'multiline':False]['text':'!','line_number':1294,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1295,'multiline':False]['text':'!','line_number':1296,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1297,'multiline':False]['text':'! list. Iterators of this list and all the references are not invalidated.','line_number':1298,'multiline':False]['text':'! <b>Requires</b>: prev_pos must be a dereferenceable iterator in *this or be','line_number':1305,'multiline':False]['text':'!   before_begin(), and before_f and before_l belong to x and','line_number':1306,'multiline':False]['text':'!   ++before_f != x.end() && before_l != x.end().','line_number':1307,'multiline':False]['text':'!','line_number':1308,'multiline':False]['text':'! <b>Effects</b>: Transfers the range (before_f, before_l] from list x to this','line_number':1309,'multiline':False]['text':'!   list, after the element pointed by prev_pos.','line_number':1310,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1311,'multiline':False]['text':'!','line_number':1312,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1313,'multiline':False]['text':'!','line_number':1314,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred','line_number':1315,'multiline':False]['text':'!   if constant_time_size is true. Constant-time otherwise.','line_number':1316,'multiline':False]['text':'!','line_number':1317,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1318,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1319,'multiline':False]['text':'! <b>Requires</b>: prev_pos must be a dereferenceable iterator in *this or be','line_number':1329,'multiline':False]['text':'!   before_begin(), and before_f and before_l belong to x and','line_number':1330,'multiline':False]['text':'!   ++before_f != x.end() && before_l != x.end() and','line_number':1331,'multiline':False]['text':'!   n == distance(before_f, before_l).','line_number':1332,'multiline':False]['text':'!','line_number':1333,'multiline':False]['text':'! <b>Effects</b>: Transfers the range (before_f, before_l] from list x to this','line_number':1334,'multiline':False]['text':'!   list, after the element pointed by p. No destructors or copy constructors are called.','line_number':1335,'multiline':False]['text':'!','line_number':1336,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1337,'multiline':False]['text':'!','line_number':1338,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1339,'multiline':False]['text':'!','line_number':1340,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1341,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1342,'multiline':False]['text':'! <b>Requires</b>: it is an iterator to an element in *this.','line_number':1355,'multiline':False]['text':'!','line_number':1356,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':1357,'multiline':False]['text':'! the element pointed by it. No destructors or copy constructors are called.','line_number':1358,'multiline':False]['text':'!','line_number':1359,'multiline':False]['text':'! <b>Returns</b>: Nothing.','line_number':1360,'multiline':False]['text':'!','line_number':1361,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1362,'multiline':False]['text':'!','line_number':1363,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements contained in x plus linear to','line_number':1364,'multiline':False]['text':'!   the elements before it.','line_number':1365,'multiline':False]['text':'!   Linear to the elements before it if cache_last<> option is true.','line_number':1366,'multiline':False]['text':'!   Constant-time if cache_last<> option is true and it == end().','line_number':1367,'multiline':False]['text':'!','line_number':1368,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1369,'multiline':False]['text':'! list. Iterators of this list and all the references are not invalidated.','line_number':1370,'multiline':False]['text':'!','line_number':1371,'multiline':False]['text':'! <b>Additional note</b>: If the optional parameter "l" is provided, it will be','line_number':1372,'multiline':False]['text':'!   assigned to the last spliced element or prev if x is empty.','line_number':1373,'multiline':False]['text':'!   This iterator can be used as new "prev" iterator for a new splice_after call.','line_number':1374,'multiline':False]['text':'!   that will splice new values after the previously spliced values.','line_number':1375,'multiline':False]['text':'! <b>Requires</b>: it p must be a valid iterator of *this.','line_number':1379,'multiline':False]['text':'!   elem must point to an element contained in list','line_number':1380,'multiline':False]['text':'!   x.','line_number':1381,'multiline':False]['text':'!','line_number':1382,'multiline':False]['text':'! <b>Effects</b>: Transfers the element elem, from list x to this list,','line_number':1383,'multiline':False]['text':'!   before the element pointed by pos. No destructors or copy constructors are called.','line_number':1384,'multiline':False]['text':'!','line_number':1385,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1386,'multiline':False]['text':'!','line_number':1387,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before pos and before elem.','line_number':1388,'multiline':False]['text':'!   Linear to the elements before elem if cache_last<> option is true and pos == end().','line_number':1389,'multiline':False]['text':'!','line_number':1390,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1391,'multiline':False]['text':'! list. Iterators of this list and all the references are not invalidated.','line_number':1392,'multiline':False]['text':'! <b>Requires</b>: pos must be a dereferenceable iterator in *this','line_number':1396,'multiline':False]['text':'!   and f and f belong to x and f and f a valid range on x.','line_number':1397,'multiline':False]['text':'!','line_number':1398,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [f, l) from list x to this','line_number':1399,'multiline':False]['text':'!   list, before the element pointed by pos.','line_number':1400,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1401,'multiline':False]['text':'!','line_number':1402,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1403,'multiline':False]['text':'!','line_number':1404,'multiline':False]['text':'! <b>Complexity</b>: Linear to the sum of elements before pos, f, and l','line_number':1405,'multiline':False]['text':'!   plus linear to the number of elements transferred if constant_time_size is true.','line_number':1406,'multiline':False]['text':'!   Linear to the sum of elements before f, and l','line_number':1407,'multiline':False]['text':'!   plus linear to the number of elements transferred if constant_time_size is true','line_number':1408,'multiline':False]['text':'!   if cache_last<> is true and pos == end()','line_number':1409,'multiline':False]['text':'!','line_number':1410,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1411,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1412,'multiline':False]['text':'! <b>Requires</b>: pos must be a dereferenceable iterator in *this','line_number':1416,'multiline':False]['text':'!   and f and l belong to x and f and l a valid range on x.','line_number':1417,'multiline':False]['text':'!   n == distance(f, l).','line_number':1418,'multiline':False]['text':'!','line_number':1419,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [f, l) from list x to this','line_number':1420,'multiline':False]['text':'!   list, before the element pointed by pos.','line_number':1421,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1422,'multiline':False]['text':'!','line_number':1423,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1424,'multiline':False]['text':'!','line_number':1425,'multiline':False]['text':'! <b>Complexity</b>: Linear to the sum of elements before pos, f, and l.','line_number':1426,'multiline':False]['text':'!   Linear to the sum of elements before f and l','line_number':1427,'multiline':False]['text':'!   if cache_last<> is true and pos == end().','line_number':1428,'multiline':False]['text':'!','line_number':1429,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1430,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1431,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to operator<.','line_number':1435,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':1436,'multiline':False]['text':'!','line_number':1437,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':1438,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1439,'multiline':False]['text':'!   or the predicate throws. Basic guarantee.','line_number':1440,'multiline':False]['text':'!','line_number':1441,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1442,'multiline':False]['text':'!   is the list's size.','line_number':1443,'multiline':False]['text':'!','line_number':1444,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1445,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1495,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1496,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1497,'multiline':False]['text':'!','line_number':1498,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1499,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1500,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1501,'multiline':False]['text':'!','line_number':1502,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':1503,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1504,'multiline':False]['text':'!   or operator< throws. Basic guarantee.','line_number':1505,'multiline':False]['text':'!','line_number':1506,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1507,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1508,'multiline':False]['text':'!','line_number':1509,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1510,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1514,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1515,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1516,'multiline':False]['text':'!','line_number':1517,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1518,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1519,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1520,'multiline':False]['text':'!','line_number':1521,'multiline':False]['text':'! <b>Returns</b>: Nothing.','line_number':1522,'multiline':False]['text':'!','line_number':1523,'multiline':False]['text':'! <b>Throws</b>: If the predicate throws. Basic guarantee.','line_number':1524,'multiline':False]['text':'!','line_number':1525,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1526,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1527,'multiline':False]['text':'!','line_number':1528,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1529,'multiline':False]['text':'!','line_number':1530,'multiline':False]['text':'! <b>Additional note</b>: If optional "l" argument is passed, it is assigned','line_number':1531,'multiline':False]['text':'! to an iterator to the last transferred value or end() is x is empty.','line_number':1532,'multiline':False]['text':'Now transfer the rest to the end of the container','line_number':1545,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1560,'multiline':False]['text':'!   in order into *this according to operator<. The merge is stable;','line_number':1561,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1562,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1563,'multiline':False]['text':'!','line_number':1564,'multiline':False]['text':'! <b>Throws</b>: if operator< throws. Basic guarantee.','line_number':1565,'multiline':False]['text':'!','line_number':1566,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1567,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1568,'multiline':False]['text':'!','line_number':1569,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1570,'multiline':False]['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':1574,'multiline':False]['text':'!','line_number':1575,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1576,'multiline':False]['text':'!','line_number':1577,'multiline':False]['text':'! <b>Complexity</b>: This function is linear to the contained elements.','line_number':1578,'multiline':False]['text':'!','line_number':1579,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1580,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1589,'multiline':False]['text':'!   No destructors are called.','line_number':1590,'multiline':False]['text':'!','line_number':1591,'multiline':False]['text':'! <b>Throws</b>: If operator== throws. Basic guarantee.','line_number':1592,'multiline':False]['text':'!','line_number':1593,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1594,'multiline':False]['text':'!','line_number':1595,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1596,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid. This function is','line_number':1597,'multiline':False]['text':'!   linear time: it performs exactly size() comparisons for equality.','line_number':1598,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1602,'multiline':False]['text':'!','line_number':1603,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1604,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1605,'multiline':False]['text':'!','line_number':1606,'multiline':False]['text':'! <b>Throws</b>: If operator== throws. Basic guarantee.','line_number':1607,'multiline':False]['text':'!','line_number':1608,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1609,'multiline':False]['text':'!','line_number':1610,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1611,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1612,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1617,'multiline':False]['text':'!   predicate is satisfied. No destructors are called.','line_number':1618,'multiline':False]['text':'!','line_number':1619,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1620,'multiline':False]['text':'!','line_number':1621,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() calls to the predicate.','line_number':1622,'multiline':False]['text':'!','line_number':1623,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1624,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1625,'multiline':False]['text':'After cache last is set, slist invariants are preserved...','line_number':1633,'multiline':False]['text':'...so erase can be safely called','line_number':1637,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1643,'multiline':False]['text':'!','line_number':1644,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1645,'multiline':False]['text':'!   predicate is satisfied.','line_number':1646,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1647,'multiline':False]['text':'!','line_number':1648,'multiline':False]['text':'! <b>Throws</b>: If pred throws. Basic guarantee.','line_number':1649,'multiline':False]['text':'!','line_number':1650,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1651,'multiline':False]['text':'!','line_number':1652,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1653,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1654,'multiline':False]['text':'After cache last is set, slist invariants are preserved...','line_number':1662,'multiline':False]['text':'...so erase can be safely called','line_number':1666,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1672,'multiline':False]['text':'!   elements that are equal from the list. No destructors are called.','line_number':1673,'multiline':False]['text':'!','line_number':1674,'multiline':False]['text':'! <b>Throws</b>: If operator== throws. Basic guarantee.','line_number':1675,'multiline':False]['text':'!','line_number':1676,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons calls to pred()).','line_number':1677,'multiline':False]['text':'!','line_number':1678,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1679,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1680,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1684,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1685,'multiline':False]['text':'!   No destructors are called.','line_number':1686,'multiline':False]['text':'!','line_number':1687,'multiline':False]['text':'! <b>Throws</b>: If the predicate throws. Basic guarantee.','line_number':1688,'multiline':False]['text':'!','line_number':1689,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons equality comparisons.','line_number':1690,'multiline':False]['text':'!','line_number':1691,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1692,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1693,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1698,'multiline':False]['text':'!','line_number':1699,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1700,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1701,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1702,'multiline':False]['text':'!','line_number':1703,'multiline':False]['text':'! <b>Throws</b>: If operator== throws. Basic guarantee.','line_number':1704,'multiline':False]['text':'!','line_number':1705,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons equality comparisons.','line_number':1706,'multiline':False]['text':'!','line_number':1707,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1708,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1709,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1714,'multiline':False]['text':'!','line_number':1715,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1716,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1717,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for every removed element.','line_number':1718,'multiline':False]['text':'!','line_number':1719,'multiline':False]['text':'! <b>Throws</b>: If the predicate throws. Basic guarantee.','line_number':1720,'multiline':False]['text':'!','line_number':1721,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1) comparisons equality comparisons.','line_number':1722,'multiline':False]['text':'!','line_number':1723,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1724,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1725,'multiline':False]['text':'! <b>Requires</b>: value must be a reference to a value inserted in a list.','line_number':1749,'multiline':False]['text':'!','line_number':1750,'multiline':False]['text':'! <b>Effects</b>: This function returns a const_iterator pointing to the element','line_number':1751,'multiline':False]['text':'!','line_number':1752,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1753,'multiline':False]['text':'!','line_number':1754,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1755,'multiline':False]['text':'!','line_number':1756,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1757,'multiline':False]['text':'!   This static function is available only if the <i>value traits</i>','line_number':1758,'multiline':False]['text':'!   is stateless.','line_number':1759,'multiline':False]['text':'! <b>Requires</b>: value must be a const reference to a value inserted in a list.','line_number':1766,'multiline':False]['text':'!','line_number':1767,'multiline':False]['text':'! <b>Effects</b>: This function returns an iterator pointing to the element.','line_number':1768,'multiline':False]['text':'!','line_number':1769,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1770,'multiline':False]['text':'!','line_number':1771,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1772,'multiline':False]['text':'!','line_number':1773,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1774,'multiline':False]['text':'!   This static function is available only if the <i>value traits</i>','line_number':1775,'multiline':False]['text':'!   is stateless.','line_number':1776,'multiline':False]['text':'! <b>Requires</b>: value must be a reference to a value inserted in a list.','line_number':1784,'multiline':False]['text':'!','line_number':1785,'multiline':False]['text':'! <b>Effects</b>: This function returns a const_iterator pointing to the element','line_number':1786,'multiline':False]['text':'!','line_number':1787,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1788,'multiline':False]['text':'!','line_number':1789,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1790,'multiline':False]['text':'!','line_number':1791,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1792,'multiline':False]['text':'! <b>Requires</b>: value must be a const reference to a value inserted in a list.','line_number':1799,'multiline':False]['text':'!','line_number':1800,'multiline':False]['text':'! <b>Effects</b>: This function returns an iterator pointing to the element.','line_number':1801,'multiline':False]['text':'!','line_number':1802,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1803,'multiline':False]['text':'!','line_number':1804,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1805,'multiline':False]['text':'!','line_number':1806,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated.','line_number':1807,'multiline':False]['text':'! <b>Returns</b>: The iterator to the element before i in the list.','line_number':1815,'multiline':False]['text':'!   Returns the end-iterator, if either i is the begin-iterator or the','line_number':1816,'multiline':False]['text':'!   list is empty.','line_number':1817,'multiline':False]['text':'!','line_number':1818,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1819,'multiline':False]['text':'!','line_number':1820,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':1821,'multiline':False]['text':'!   Constant if cache_last<> is true and i == end().','line_number':1822,'multiline':False]['text':'! <b>Returns</b>: The const_iterator to the element before i in the list.','line_number':1826,'multiline':False]['text':'!   Returns the end-const_iterator, if either i is the begin-const_iterator or','line_number':1827,'multiline':False]['text':'!   the list is empty.','line_number':1828,'multiline':False]['text':'!','line_number':1829,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1830,'multiline':False]['text':'!','line_number':1831,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':1832,'multiline':False]['text':'!   Constant if cache_last<> is true and i == end().','line_number':1833,'multiline':False]['text':'! <b>Returns</b>: The iterator to the element before i in the list,','line_number':1837,'multiline':False]['text':'!   starting the search on element after prev_from.','line_number':1838,'multiline':False]['text':'!   Returns the end-iterator, if either i is the begin-iterator or the','line_number':1839,'multiline':False]['text':'!   list is empty.','line_number':1840,'multiline':False]['text':'!','line_number':1841,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1842,'multiline':False]['text':'!','line_number':1843,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':1844,'multiline':False]['text':'!   Constant if cache_last<> is true and i == end().','line_number':1845,'multiline':False]['text':'! <b>Returns</b>: The const_iterator to the element before i in the list,','line_number':1849,'multiline':False]['text':'!   starting the search on element after prev_from.','line_number':1850,'multiline':False]['text':'!   Returns the end-const_iterator, if either i is the begin-const_iterator or','line_number':1851,'multiline':False]['text':'!   the list is empty.','line_number':1852,'multiline':False]['text':'!','line_number':1853,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1854,'multiline':False]['text':'!','line_number':1855,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':1856,'multiline':False]['text':'!   Constant if cache_last<> is true and i == end().','line_number':1857,'multiline':False]['text':'/@cond','line_number':1868,'multiline':False]['text':'! <b>Requires</b>: prev_pos must be a dereferenceable iterator in *this or be','line_number':1870,'multiline':False]['text':'!   before_begin(), and f and before_l belong to another slist.','line_number':1871,'multiline':False]['text':'!','line_number':1872,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [f, before_l] to this','line_number':1873,'multiline':False]['text':'!   list, after the element pointed by prev_pos.','line_number':1874,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1875,'multiline':False]['text':'!','line_number':1876,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1877,'multiline':False]['text':'!','line_number':1878,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred','line_number':1879,'multiline':False]['text':'!   if constant_time_size is true. Constant-time otherwise.','line_number':1880,'multiline':False]['text':'!','line_number':1881,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from the list that owned f and before_l now','line_number':1882,'multiline':False]['text':'!   point to elements of this list. Iterators of this list and all the references are not invalidated.','line_number':1883,'multiline':False]['text':'!','line_number':1884,'multiline':False]['text':'! <b>Warning</b>: Experimental function, don't use it!','line_number':1885,'multiline':False]['text':'! <b>Requires</b>: prev_pos must be a dereferenceable iterator in *this or be','line_number':1894,'multiline':False]['text':'!   before_begin(), and f and before_l belong to another slist.','line_number':1895,'multiline':False]['text':'!   n == distance(f, before_l) + 1.','line_number':1896,'multiline':False]['text':'!','line_number':1897,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [f, before_l] to this','line_number':1898,'multiline':False]['text':'!   list, after the element pointed by prev_pos.','line_number':1899,'multiline':False]['text':'!   No destructors or copy constructors are called.','line_number':1900,'multiline':False]['text':'!','line_number':1901,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1902,'multiline':False]['text':'!','line_number':1903,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1904,'multiline':False]['text':'!','line_number':1905,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from the list that owned f and before_l now','line_number':1906,'multiline':False]['text':'!   point to elements of this list. Iterators of this list and all the references are not invalidated.','line_number':1907,'multiline':False]['text':'!','line_number':1908,'multiline':False]['text':'! <b>Warning</b>: Experimental function, don't use it!','line_number':1909,'multiline':False]['text':'/@endcond','line_number':1926,'multiline':False]['text':'! <b>Effects</b>: Asserts the integrity of the container.','line_number':1928,'multiline':False]['text':'!','line_number':1929,'multiline':False]['text':'! <b>Complexity</b>: Linear time.','line_number':1930,'multiline':False]['text':'!','line_number':1931,'multiline':False]['text':'! <b>Note</b>: The method has no effect when asserts are turned off (e.g., with NDEBUG).','line_number':1932,'multiline':False]['text':'!   Experimental function, interface might change in future versions.','line_number':1933,'multiline':False]['text':' header's next is never null','line_number':1937,'multiline':False]['text':'Check if both are empty or','line_number':2075,'multiline':False]['text':'If this is empty swap pointers','line_number':2078,'multiline':False]['text':'Precondition: this is not empty','line_number':2088,'multiline':False]['text':'Move all nodes from this to other's beginning','line_number':2094,'multiline':False]['text':'Move trailing nodes from other to this','line_number':2102,'multiline':False]['text':'circular version','line_number':2108,'multiline':False]['text':'linear version','line_number':2112,'multiline':False]['text':'Obtaining the container from the end iterator is not possible with linear','line_number':2118,'multiline':False]['text':'singly linked lists (because "end" is represented by the null pointer)','line_number':2119,'multiline':False]['text':'! Helper metafunction to define a \c slist that yields to the same type when the','line_number':2134,'multiline':False]['text':'! same options (either explicitly or implicitly) are used.','line_number':2135,'multiline':False]['text':'/ @cond','line_number':2143,'multiline':False]['text':'/ @endcond','line_number':2163,'multiline':False]['text':'Assert if passed value traits are compatible with the type','line_number':2192,'multiline':False]['text':'namespace intrusive','line_number':2247,'multiline':False]['text':'namespace boost','line_number':2248,'multiline':False]['text':'BOOST_INTRUSIVE_SLIST_HPP','line_number':2252,'multiline':False]