['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/core_operations_emulated.hpp
 *
 * This header contains lock pool-based implementation of the core atomic operations.
 ','line_number':8,'multiline':True]['text':'! Emulated implementation of core atomic operations','line_number':46,'multiline':False]['text':' Define storage_type to have alignment not greater than Alignment. This will allow operations to work with value_types','line_number':53,'multiline':False]['text':' that possibly have weaker alignment requirements than storage_traits< Size >::type would. This is important for atomic_ref<>.','line_number':54,'multiline':False]['text':' atomic<> will allow higher alignment requirement than its value_type.','line_number':55,'multiline':False]['text':' Note that storage_type should be an integral type, if possible, so that arithmetic and bitwise operations are possible.','line_number':56,'multiline':False]['text':' Note: This function is the exact copy of compare_exchange_strong. The reason we're not just forwarding the call','line_number':132,'multiline':False]['text':' is that MSVC-12 ICEs in this case.','line_number':133,'multiline':False]['text':' namespace detail','line_number':189,'multiline':False]['text':' namespace atomics','line_number':190,'multiline':False]['text':' namespace boost','line_number':191,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_CORE_OPERATIONS_EMULATED_HPP_INCLUDED_','line_number':195,'multiline':False]