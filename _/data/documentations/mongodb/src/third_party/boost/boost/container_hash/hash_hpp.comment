['text':' Copyright 2005-2014 Daniel James.','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'  Based on Peter Dimov's proposal','line_number':6,'multiline':False]['text':'  http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1756.pdf','line_number':7,'multiline':False]['text':'  issue 6.18.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'  This also contains public domain code from MurmurHash. From the','line_number':10,'multiline':False]['text':'  MurmurHash header:','line_number':11,'multiline':False]['text':' MurmurHash3 was written by Austin Appleby, and is placed in the public','line_number':13,'multiline':False]['text':' domain. The author hereby disclaims copyright to this source code.','line_number':14,'multiline':False]['text':' Ill-defined for-loop : 'unsigned int' values','line_number':47,'multiline':False]['text':' are always of range '0' to '4294967295'.','line_number':48,'multiline':False]['text':' Loop executes infinitely.','line_number':49,'multiline':False]['text':' Detect whether standard library has C++17 headers','line_number':67,'multiline':False]['text':' long_numbers is defined like this to allow for separate','line_number':178,'multiline':False]['text':' specialization for long_long and int128_type, in case','line_number':179,'multiline':False]['text':' they conflict.','line_number':180,'multiline':False]['text':' Implementation','line_number':266,'multiline':False]['text':' ceiling(std::numeric_limits<T>::digits / size_t_bits) - 1','line_number':274,'multiline':False]['text':' Hopefully, this loop can be unrolled.','line_number':281,'multiline':False]['text':' ceiling(std::numeric_limits<T>::digits / size_t_bits) - 1','line_number':295,'multiline':False]['text':' Hopefully, this loop can be unrolled.','line_number':301,'multiline':False]['text':' Completely arbitrary number, to prevent 0's','line_number':354,'multiline':False]['text':' from hashing to 0.','line_number':355,'multiline':False]['text':' Implementation by Alberto Barbati and Dave Harris.','line_number':388,'multiline':False]['text':' for some reason ptrdiff_t on OpenVMS compiler with','line_number':396,'multiline':False]['text':' 64 bit is not 64 bit !!!','line_number':397,'multiline':False]['text':' 'argument' : conversion from 'size_t' to','line_number':410,'multiline':False]['text':' 'unsigned int', possible loss of data','line_number':411,'multiline':False]['text':' A misguided attempt to detect 64-bit','line_number':412,'multiline':False]['text':' incompatability.','line_number':413,'multiline':False]['text':' Arbitray value for empty optional.','line_number':516,'multiline':False]['text':'','line_number':563,'multiline':False]['text':' boost::hash','line_number':564,'multiline':False]['text':'','line_number':565,'multiline':False]['text':' Define the specializations required by the standard. The general purpose','line_number':567,'multiline':False]['text':' boost::hash is defined later in extensions.hpp if','line_number':568,'multiline':False]['text':' BOOST_HASH_NO_EXTENSIONS is not defined.','line_number':569,'multiline':False]['text':' BOOST_HASH_SPECIALIZE - define a specialization for a type which is','line_number':571,'multiline':False]['text':' passed by copy.','line_number':572,'multiline':False]['text':'','line_number':573,'multiline':False]['text':' BOOST_HASH_SPECIALIZE_REF - define a specialization for a type which is','line_number':574,'multiline':False]['text':' passed by const reference.','line_number':575,'multiline':False]['text':'','line_number':576,'multiline':False]['text':' These are undefined later.','line_number':577,'multiline':False]['text':' Specializing boost::hash for pointers.','line_number':686,'multiline':False]['text':' For compilers without partial specialization, we define a','line_number':709,'multiline':False]['text':' boost::hash for all remaining types. But hash_impl is only defined','line_number':710,'multiline':False]['text':' for pointers in 'extensions.hpp' - so when BOOST_HASH_NO_EXTENSIONS','line_number':711,'multiline':False]['text':' is defined there will still be a compile error for types not supported','line_number':712,'multiline':False]['text':' in the standard.','line_number':713,'multiline':False]['text':' BOOST_FUNCTIONAL_HASH_HASH_HPP','line_number':758,'multiline':False]['text':' Include this outside of the include guards in case the file is included','line_number':760,'multiline':False]['text':' twice - once with BOOST_HASH_NO_EXTENSIONS defined, and then with it','line_number':761,'multiline':False]['text':' undefined.','line_number':762,'multiline':False]