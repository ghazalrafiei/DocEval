['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2012-2016.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]['text':'! \file','line_number':12,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'                               move','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':42,'multiline':False]['text':'! <b>Effects</b>: Moves elements in the range [first,last) into the range [result,result + (last -','line_number':46,'multiline':False]['text':'!   first)) starting from first and proceeding to last. For each non-negative integer n < (last-first),','line_number':47,'multiline':False]['text':'!   performs *(result + n) = ::boost::move (*(first + n)).','line_number':48,'multiline':False]['text':'!','line_number':49,'multiline':False]['text':'! <b>Effects</b>: result + (last - first).','line_number':50,'multiline':False]['text':'!','line_number':51,'multiline':False]['text':'! <b>Requires</b>: result shall not be in the range [first,last).','line_number':52,'multiline':False]['text':'!','line_number':53,'multiline':False]['text':'! <b>Complexity</b>: Exactly last - first move assignments.','line_number':54,'multiline':False]['text':' I models InputIterator','line_number':55,'multiline':False]['text':' O models OutputIterator','line_number':56,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':'                               move_backward','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':70,'multiline':False]['text':'! <b>Effects</b>: Moves elements in the range [first,last) into the range','line_number':72,'multiline':False]['text':'!   [result - (last-first),result) starting from last - 1 and proceeding to','line_number':73,'multiline':False]['text':'!   first. For each positive integer n <= (last - first),','line_number':74,'multiline':False]['text':'!   performs *(result - n) = ::boost::move(*(last - n)).','line_number':75,'multiline':False]['text':'!','line_number':76,'multiline':False]['text':'! <b>Requires</b>: result shall not be in the range [first,last).','line_number':77,'multiline':False]['text':'!','line_number':78,'multiline':False]['text':'! <b>Returns</b>: result - (last - first).','line_number':79,'multiline':False]['text':'!','line_number':80,'multiline':False]['text':'! <b>Complexity</b>: Exactly last - first assignments.','line_number':81,'multiline':False]['text':' I models BidirectionalIterator','line_number':82,'multiline':False]['text':' O models BidirectionalIterator','line_number':83,'multiline':False]['text':'!defined(BOOST_MOVE_USE_STANDARD_LIBRARY_MOVE)','line_number':97,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':'                               uninitialized_move','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':103,'multiline':False]['text':'! <b>Effects</b>:','line_number':105,'multiline':False]['text':'!   \code','line_number':106,'multiline':False]['text':'!   for (; first != last; ++result, ++first)','line_number':107,'multiline':False]['text':'!      new (static_cast<void*>(&*result))','line_number':108,'multiline':False]['text':'!         typename iterator_traits<ForwardIterator>::value_type(boost::move(*first));','line_number':109,'multiline':False]['text':'!   \endcode','line_number':110,'multiline':False]['text':'!','line_number':111,'multiline':False]['text':'! <b>Returns</b>: result','line_number':112,'multiline':False]['text':' I models InputIterator','line_number':114,'multiline':False]['text':' F models ForwardIterator','line_number':115,'multiline':False]['text':'/ @cond','line_number':117,'multiline':False]['text':'   ,typename ::boost::move_detail::enable_if<has_move_emulation_enabled<typename boost::movelib::iterator_traits<I>::value_type> >::type* = 0','line_number':118,'multiline':False]['text':'/ @endcond','line_number':119,'multiline':False]['text':'/ @cond','line_number':142,'multiline':False]['text':'
template
   <typename I,   // I models InputIterator
    typename F>   // F models ForwardIterator
F uninitialized_move(I f, I l, F r,
   typename ::boost::move_detail::disable_if<has_move_emulation_enabled<typename boost::movelib::iterator_traits<I>::value_type> >::type* = 0)
{
   return std::uninitialized_copy(f, l, r);
}
','line_number':143,'multiline':True]['text':'/ @endcond','line_number':154,'multiline':False]['text':'namespace boost {','line_number':156,'multiline':False]['text':'#ifndef BOOST_MOVE_ALGO_MOVE_HPP','line_number':160,'multiline':False]