['text':'
 *             Copyright Andrey Semashev 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   formatters/max_size_decorator.hpp
 * \author Andrey Semashev
 * \date   06.07.2016
 *
 * The header contains implementation of a string length limiting decorator.
 ','line_number':7,'multiline':True]['text':'! String size limiting decorator stream output terminal','line_number':51,'multiline':False]['text':'! Self type','line_number':56,'multiline':False]['text':'! Internal typedef for type categorization','line_number':61,'multiline':False]['text':'! Character type','line_number':65,'multiline':False]['text':'! String type','line_number':67,'multiline':False]['text':'! String size type','line_number':69,'multiline':False]['text':'! Adopted actor type','line_number':71,'multiline':False]['text':'! Result type definition','line_number':74,'multiline':False]['text':'! Left argument actor','line_number':90,'multiline':False]['text':'! Adopted formatter actor','line_number':92,'multiline':False]['text':'! Max size of the formatted string produced by the adopted formatter','line_number':94,'multiline':False]['text':'! Overflow marker','line_number':96,'multiline':False]['text':'!
     * Initializing constructor. Creates decorator of the \a fmt formatter with the specified \a decorations.
     ','line_number':100,'multiline':True]['text':'!
     * Copy constructor
     ','line_number':108,'multiline':True]['text':'!
     * Invokation operator
     ','line_number':116,'multiline':True]['text':' Flush the stream and keep the current write position in the target string','line_number':122,'multiline':False]['text':' Invoke the adopted formatter','line_number':135,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':138,'multiline':False]['text':' Free up space for the overflow marker','line_number':145,'multiline':False]['text':' Append the marker','line_number':148,'multiline':False]['text':' Restore the original size limit','line_number':159,'multiline':False]['text':'!
     * Invokation operator
     ','line_number':173,'multiline':True]['text':' Flush the stream and keep the current write position in the target string','line_number':179,'multiline':False]['text':' Invoke the adopted formatter','line_number':192,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':195,'multiline':False]['text':' Free up space for the overflow marker','line_number':202,'multiline':False]['text':' Append the marker','line_number':205,'multiline':False]['text':' Restore the original size limit','line_number':216,'multiline':False]['text':' namespace aux','line_number':233,'multiline':False]['text':'!
 * String size limiting decorator terminal class. This formatter allows to limit the maximum total length
 * of the strings generated by other formatters.
 *
 * The \c max_size_decorator_terminal class aggregates the formatter being decorated, the maximum string length
 * it can produce and an optional truncation marker string, which will be put at the end of the output if the limit is exceeded. Note that
 * the marker length is included in the limit and as such must not exceed it.
 * The \c max_size_decorator_terminal class is a formatter itself, so it can be used to construct
 * more complex formatters, including nesting decorators.
 ','line_number':235,'multiline':True]['text':'! Self type','line_number':249,'multiline':False]['text':'! Internal typedef for type categorization','line_number':254,'multiline':False]['text':'! Character type','line_number':258,'multiline':False]['text':'! String type','line_number':260,'multiline':False]['text':'! String size type','line_number':262,'multiline':False]['text':'! Stream type','line_number':264,'multiline':False]['text':'! Adopted actor type','line_number':266,'multiline':False]['text':'! Result type definition','line_number':269,'multiline':False]['text':'! Adopted formatter actor','line_number':273,'multiline':False]['text':'! Max size of the formatted string produced by the adopted formatter','line_number':275,'multiline':False]['text':'! Overflow marker','line_number':277,'multiline':False]['text':'!
     * Initializing constructor.
     ','line_number':281,'multiline':True]['text':'!
     * Copy constructor
     ','line_number':289,'multiline':True]['text':'!
     * \returns Adopted subactor
     ','line_number':297,'multiline':True]['text':'!
     * \returns Max string size limit
     ','line_number':305,'multiline':True]['text':'!
     * \returns Max string size limit
     ','line_number':313,'multiline':True]['text':'!
     * Invokation operator
     ','line_number':321,'multiline':True]['text':' Invoke the adopted formatter','line_number':331,'multiline':False]['text':' Flush the buffered characters and see of overflow happened','line_number':347,'multiline':False]['text':'!
     * Invokation operator
     ','line_number':362,'multiline':True]['text':' Invoke the adopted formatter','line_number':372,'multiline':False]['text':' Flush the buffered characters and see of overflow happened','line_number':388,'multiline':False]['text':'!
 * Character decorator actor
 ','line_number':406,'multiline':True]['text':'! Base terminal type','line_number':414,'multiline':False]['text':'! Character type','line_number':416,'multiline':False]['text':'! Base actor type','line_number':419,'multiline':False]['text':'! Initializing constructor','line_number':423,'multiline':False]['text':'! Returns reference to the terminal','line_number':428,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':451,'multiline':False]['text':' namespace aux','line_number':484,'multiline':False]['text':'!
 * The function returns a decorator generator object. The generator provides <tt>operator[]</tt> that can be used
 * to construct the actual decorator.
 *
 * \param max_size The maximum number of characters (i.e. string element objects) that the decorated formatter can produce.
 ','line_number':486,'multiline':True]['text':'!
 * The function returns a decorator generator object. The generator provides <tt>operator[]</tt> that can be used
 * to construct the actual decorator.
 *
 * \param max_size The maximum number of characters (i.e. string element objects) that the decorated formatter can produce.
 * \param overflow_marker The marker string which is appended to the output if the \a max_size limit is exceeded. Must be
 *                        a non-null pointer to a zero-terminated string.
 *
 * \pre The \a overflow_marker length must not exceed the \a max_size limit.
 ','line_number':498,'multiline':True]['text':'!
 * The function returns a decorator generator object. The generator provides <tt>operator[]</tt> that can be used
 * to construct the actual decorator.
 *
 * \param max_size The maximum number of characters (i.e. string element objects) that the decorated formatter can produce.
 * \param overflow_marker The marker string which is appended to the output if the \a max_size limit is exceeded.
 *
 * \pre The \a overflow_marker length must not exceed the \a max_size limit.
 ','line_number':514,'multiline':True]['text':' namespace expressions','line_number':529,'multiline':False]['text':' namespace log','line_number':531,'multiline':False]['text':' namespace result_of','line_number':551,'multiline':False]['text':' namespace phoenix','line_number':553,'multiline':False]['text':' namespace boost','line_number':557,'multiline':False]['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_MAX_SIZE_DECORATOR_HPP_INCLUDED_','line_number':561,'multiline':False]