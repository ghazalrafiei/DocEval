['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/core_arch_ops_gcc_aarch64.hpp
 *
 * This header contains implementation of the \c core_arch_operations template.
 ','line_number':8,'multiline':True]['text':' Due to bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63359 we have to explicitly specify size of the registers','line_number':41,'multiline':False]['text':' to use in the asm blocks below. Use %w prefix for the 32-bit registers and %x for 64-bit ones.','line_number':42,'multiline':False]['text':' A note about compare_exchange implementations. Since failure_order must never include release semantics and','line_number':44,'multiline':False]['text':' must not be stronger than success_order, we can always use success_order to select instructions. Thus, when','line_number':45,'multiline':False]['text':' CAS fails, only the acquire semantics of success_order is applied, which may be stronger than failure_order.','line_number':46,'multiline':False]['text':' For 128-bit atomic operations we always have to use ldxp+stxp (optionally, with acquire/release semantics), even in load and store operations.','line_number':1588,'multiline':False]['text':' ARM Architecture Reference Manual Armv8, for Armv8-A architecture profile, Section B2.2.1 "Requirements for single-copy atomicity"','line_number':1589,'multiline':False]['text':' specifies that ldxp does not guarantee an atomic load, and we have to perform ldxp+stxp loop to ensure that the loaded value','line_number':1590,'multiline':False]['text':' is consistent with a previous atomic store.','line_number':1591,'multiline':False]['text':'','line_number':1592,'multiline':False]['text':' The ldxp and stxp instructions operate on pairs of registers, meaning that each load loads two integers from memory in','line_number':1593,'multiline':False]['text':' successive address order, to the first and second registers in the pair, respectively, and store similarly stores two integers.','line_number':1594,'multiline':False]['text':' The order of these integers does not depend on the active endianness mode (although the byte order in the integers themselves','line_number':1595,'multiline':False]['text':' obviously does depend on endianness). This means we need to account for the current endianness mode ourselves, where it matters.','line_number':1596,'multiline':False]['text':'','line_number':1597,'multiline':False]['text':' Unlike AArch32/A32 or ARMv7, ldxp/stxp do not require adjacent even+odd registers in the pair and accept any two different','line_number':1598,'multiline':False]['text':' registers. Still, it may be more preferable to select the adjacent registers as 128-bit objects are represented by two adjacent','line_number':1599,'multiline':False]['text':' registers in the ABI. Unfortunately, clang 10 and probably older doesn't seem to support allocating register pairs in the asm blocks,','line_number':1600,'multiline':False]['text':' like in ARMv7. For now we use a union to convert between a pair of 64-bit elements and 128-bit storage.','line_number':1601,'multiline':False]['text':' Union to convert between two 64-bit registers and a 128-bit storage','line_number':1614,'multiline':False]['text':' namespace detail','line_number':1903,'multiline':False]['text':' namespace atomics','line_number':1904,'multiline':False]['text':' namespace boost','line_number':1905,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_CORE_ARCH_OPS_GCC_AARCH64_HPP_INCLUDED_','line_number':1909,'multiline':False]