['text':'  (C) Copyright John Maddock 2001 - 2003.','line_number':1,'multiline':False]['text':'  (C) Copyright David Abrahams 2002 - 2003.','line_number':2,'multiline':False]['text':'  (C) Copyright Aleksey Gurtovoy 2002.','line_number':3,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':4,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'  See http://www.boost.org for most recent version.','line_number':8,'multiline':False]['text':'  Borland C++ compiler setup:','line_number':10,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' versions check:','line_number':13,'multiline':False]['text':' we don't support Borland prior to version 5.4:','line_number':14,'multiline':False]['text':' last known compiler version:','line_number':19,'multiline':False]['text':'#  if defined(BOOST_ASSERT_CONFIG)','line_number':21,'multiline':False]['text':'#  else','line_number':23,'multiline':False]['text':'#     pragma message( "boost: Unknown compiler version - please run the configure tests and report the results")','line_number':24,'multiline':False]['text':'#  endif','line_number':25,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' Support macros to help with standard library detection','line_number':31,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' Version 5.0 and below:','line_number':41,'multiline':False]['text':' Borland C++Builder 4 and 5:','line_number':43,'multiline':False]['text':' Borland C++Builder 5, command-line compiler 5.5:','line_number':46,'multiline':False]['text':' Variadic macros do not exist for C++ Builder versions 5 and below','line_number':49,'multiline':False]['text':' Version 5.51 and below:','line_number':53,'multiline':False]['text':' workaround for missing WCHAR_MAX/WCHAR_MIN:','line_number':58,'multiline':False]['text':' __cplusplus','line_number':65,'multiline':False]['text':' Borland C++ Builder 6 and below:','line_number':74,'multiline':False]['text':' fix broken <cstring> so that Boost.test works:','line_number':78,'multiline':False]['text':' fix broken errno declaration:','line_number':82,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' new bug in 5.61:','line_number':91,'multiline':False]['text':' this seems to be needed by the command line compiler, but not the IDE:','line_number':93,'multiline':False]['text':' Borland C++ Builder 2006 Update 2 and below:','line_number':97,'multiline':False]['text':' we should really be able to do without this','line_number':108,'multiline':False]['text':' but the wcs* functions aren't imported into std::','line_number':109,'multiline':False]['text':' _CPPUNWIND doesn't get automatically set for some reason:','line_number':111,'multiline':False]['text':' Beman has asked Alisdair for more info','line_number':116,'multiline':False]['text':' we shouldn't really need this - but too many things choke','line_number':117,'multiline':False]['text':' without it, this needs more investigation:','line_number':118,'multiline':False]['text':' Temporary workaround','line_number':125,'multiline':False]['text':' Borland C++ Builder 2008 and below:','line_number':129,'multiline':False]['text':'','line_number':142,'multiline':False]['text':'  Positive Feature detection','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' Borland C++ Builder 2008 and below:','line_number':145,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' C++0x Macros:','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' UTF-8 still not supported','line_number':191,'multiline':False]['text':' C++ 14:','line_number':205,'multiline':False]['text':' There's no SD6 check for this....','line_number':218,'multiline':False]['text':' C++17','line_number':234,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' Post 0x561 we have long long and stdint.h:','line_number':255,'multiline':False]['text':' On non-Win32 platforms let the platform config figure this out:','line_number':262,'multiline':False]['text':' Borland C++Builder 6 defaults to using STLPort.  If _USE_OLD_RW_STL is','line_number':268,'multiline':False]['text':' defined, then we have 0x560 or greater with the Rogue Wave implementation','line_number':269,'multiline':False]['text':' which presumably has the std::DBL_MAX bug.','line_number':270,'multiline':False]['text':' <climits> is partly broken, some macros define symbols that are really in','line_number':272,'multiline':False]['text':' namespace std, so you end up having to use illegal constructs like','line_number':273,'multiline':False]['text':' std::DBL_MAX, as a fix we'll just include float.h and have done with:','line_number':274,'multiline':False]['text':'','line_number':277,'multiline':False]['text':' __int64:','line_number':278,'multiline':False]['text':'','line_number':279,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' check for exception handling support:','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':'','line_number':289,'multiline':False]['text':' all versions have a <dirent.h>:','line_number':290,'multiline':False]['text':'','line_number':291,'multiline':False]['text':'','line_number':295,'multiline':False]['text':' all versions support __declspec:','line_number':296,'multiline':False]['text':'','line_number':297,'multiline':False]['text':' config/platform/win32.hpp will define BOOST_SYMBOL_EXPORT, etc., unless already defined','line_number':299,'multiline':False]['text':'','line_number':302,'multiline':False]['text':' ABI fixing headers:','line_number':303,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' not implemented for version 6 compiler yet','line_number':305,'multiline':False]['text':'','line_number':313,'multiline':False]['text':' Disable Win32 support in ANSI mode:','line_number':314,'multiline':False]['text':'','line_number':315,'multiline':False]['text':'','line_number':321,'multiline':False]['text':' MSVC compatibility mode does some nasty things:','line_number':322,'multiline':False]['text':' TODO: look up if this doesn't apply to the whole 12xx range','line_number':323,'multiline':False]['text':'','line_number':324,'multiline':False]['text':' Borland did not implement value-initialization completely, as I reported','line_number':330,'multiline':False]['text':' in 2007, Borland Report 51854, "Value-initialization: POD struct should be','line_number':331,'multiline':False]['text':' zero-initialized", http://qc.embarcadero.com/wc/qcmain.aspx?d=51854','line_number':332,'multiline':False]['text':' See also: http://www.boost.org/libs/utility/value_init.htm#compiler_issues','line_number':333,'multiline':False]['text':' (Niels Dekker, LKEB, April 2010)','line_number':334,'multiline':False]