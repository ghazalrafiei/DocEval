['text':' Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! A wrapping integer used to support time durations (WARNING: only instantiate with a signed type)','line_number':17,'multiline':False]['text':'! In composite date and time types this type is used to
 *  wrap at the day boundary.
 *  Ex:
 *  A wrapping_int<short, 10> will roll over after nine, and
 *  roll under below zero. This gives a range of [0,9]
 *
 * NOTE: it is strongly recommended that wrapping_int2 be used
 * instead of wrapping_int as wrapping_int is to be depricated
 * at some point soon.
 *
 * Also Note that warnings will occur if instantiated with an
 * unsigned type. Only a signed type should be used!
 ','line_number':18,'multiline':True]['text':'typedef overflow_type_ overflow_type;','line_number':35,'multiline':False]['text':'!Add, return true if wrapped','line_number':37,'multiline':False]['text':'! Explicit converion method','line_number':39,'multiline':False]['text':'!Add, return number of wraps performed','line_number':42,'multiline':False]['text':'! The sign of the returned value will indicate which direction the
   * wraps went. Ex: add a negative number and wrapping under could occur,
   * this would be indicated by a negative return value. If wrapping over
   * took place, a positive value would be returned ','line_number':43,'multiline':True]['text':'! Subtract will return '+d' if wrapping under took place ('d' is the number of wraps)','line_number':55,'multiline':False]['text':'! The sign of the returned value will indicate which direction the
   * wraps went (positive indicates wrap under, negative indicates wrap over).
   * Ex: subtract a negative number and wrapping over could
   * occur, this would be indicated by a negative return value. If
   * wrapping under took place, a positive value would be returned. ','line_number':56,'multiline':True]['text':'! A wrapping integer used to wrap around at the top (WARNING: only instantiate with a signed type)','line_number':91,'multiline':False]['text':'! Bad name, quick impl to fix a bug -- fix later!!
 *  This allows the wrap to restart at a value other than 0.
 ','line_number':92,'multiline':True]['text':'! If initializing value is out of range of [wrap_min, wrap_max],
   * value will be initialized to closest of min or max ','line_number':101,'multiline':True]['text':'! Explicit converion method','line_number':113,'multiline':False]['text':'!Add, return number of wraps performed','line_number':116,'multiline':False]['text':'! The sign of the returned value will indicate which direction the
   * wraps went. Ex: add a negative number and wrapping under could occur,
   * this would be indicated by a negative return value. If wrapping over
   * took place, a positive value would be returned ','line_number':117,'multiline':True]['text':'! Subtract will return '-d' if wrapping under took place ('d' is the number of wraps)','line_number':129,'multiline':False]['text':'! The sign of the returned value will indicate which direction the
   * wraps went. Ex: subtract a negative number and wrapping over could
   * occur, this would be indicated by a positive return value. If
   * wrapping under took place, a negative value would be returned ','line_number':130,'multiline':True]['text':'namespace date_time','line_number':165,'multiline':False]