['text':'  (C) Copyright Edward Diener 2011-2015','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]['text':'

  The succeeding comments in this file are in doxygen format.

','line_number':14,'multiline':True]['text':'* \file
','line_number':20,'multiline':True]['text':'* \def BOOST_VMD_ASSERT_IS_TUPLE(sequence)

    \brief Asserts that the sequence is a Boost PP tuple.

    The macro checks that the sequence is a Boost PP tuple.
    If it is not a Boost PP tuple, it forces a compiler error.
    
    The macro normally checks for a Boost PP tuple only in 
    debug mode. However an end-user can force the macro 
    to check or not check by defining the macro 
    BOOST_VMD_ASSERT_DATA to 1 or 0 respectively.

    sequence = a possible Boost PP tuple.

  @code
  
    returns  = Normally the macro returns nothing. 
    
               If the sequence is a Boost PP tuple, nothing is 
               output.
              
               For VC++, because there is no sure way of forcing  
               a compiler error from within a macro without producing
               output, if the sequence is not a Boost PP tuple the 
               macro forces a compiler error by outputting invalid C++. 
              
               For all other compilers a compiler error is forced 
               without producing output if the sequence is not a 
               Boost PP tuple.
              
  @endcode
  
','line_number':23,'multiline':True]['text':'','line_number':72,'multiline':True]['text':' BOOST_VMD_ASSERT_DATA ','line_number':74,'multiline':True]['text':' BOOST_PP_VARIADICS ','line_number':76,'multiline':True]['text':' BOOST_VMD_ASSERT_IS_TUPLE_HPP ','line_number':77,'multiline':True]