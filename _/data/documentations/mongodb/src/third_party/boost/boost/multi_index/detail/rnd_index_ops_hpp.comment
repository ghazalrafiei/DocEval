['text':' Copyright 2003-2015 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]['text':' Common code for random_access_index memfuns having templatized and
 * non-templatized versions.
 ','line_number':26,'multiline':True]['text':' sorting ','line_number':120,'multiline':True]['text':' auxiliary stuff ','line_number':122,'multiline':True]['text':' The implementation is extremely simple: an auxiliary
   * array of pointers is sorted using stdlib facilities and
   * then used to rearrange the index. This is suboptimal
   * in space and time, but has some advantages over other
   * possible approaches:
   *   - Use std::stable_sort() directly on ptrs using some
   *     special iterator in charge of maintaining pointers
   *     and up() pointers in sync: we cannot guarantee
   *     preservation of the container invariants in the face of
   *     exceptions, if, for instance, std::stable_sort throws
   *     when ptrs transitorily contains duplicate elements.
   *   - Rewrite the internal algorithms of std::stable_sort
   *     adapted for this case: besides being a fair amount of
   *     work, making a stable sort compatible with Boost.MultiIndex
   *     invariants (basically, no duplicates or missing elements
   *     even if an exception is thrown) is complicated, error-prone
   *     and possibly won't perform much better than the
   *     solution adopted.
   ','line_number':153,'multiline':True]['text':' namespace multi_index::detail ','line_number':197,'multiline':True]['text':' namespace multi_index ','line_number':199,'multiline':True]['text':' namespace boost ','line_number':201,'multiline':True]