['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' Unreachable code (release mode only warning)','line_number':12,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' This is the only way we can avoid','line_number':25,'multiline':False]['text':' warning: non-standard suffix on floating constant [-Wpedantic]','line_number':26,'multiline':False]['text':' when building with -Wall -pedantic.  Neither __extension__','line_number':27,'multiline':False]['text':' nor #pragma diagnostic ignored work :(','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Begin by defining the smallest value for which it is safe to','line_number':37,'multiline':False]['text':' use the asymptotic expansion for digamma:','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' Implementations of the asymptotic expansion come next,','line_number':47,'multiline':False]['text':' the coefficients of the series have been evaluated','line_number':48,'multiline':False]['text':' in advance at high precision, and the series truncated','line_number':49,'multiline':False]['text':' at the first term that's too small to effect the result.','line_number':50,'multiline':False]['text':' Note that the series becomes divergent after a while','line_number':51,'multiline':False]['text':' so truncation is very important.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' This first one gives 34-digit precision for x >= 20:','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' ADL of std functions.','line_number':59,'multiline':False]['text':'','line_number':86,'multiline':False]['text':' 19-digit precision for x >= 10:','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' ADL of std functions.','line_number':92,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' 17-digit precision for x >= 10:','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' ADL of std functions.','line_number':119,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' 9-digit precision for x >= 10:','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' ADL of std functions.','line_number':143,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' Fully generic asymptotic expansion in terms of Bernoulli numbers, see:','line_number':157,'multiline':False]['text':' http://functions.wolfram.com/06.14.06.0012.01','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':'','line_number':191,'multiline':False]['text':' Now follow rational approximations over the range [1,2].','line_number':192,'multiline':False]['text':'','line_number':193,'multiline':False]['text':' 35-digit precision:','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' Now the approximation, we use the form:','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' digamma(x) = (x - root) * (Y + R(x-1))','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':' Where root is the location of the positive root of digamma,','line_number':204,'multiline':False]['text':' Y is a constant, and R is optimised for low absolute error','line_number':205,'multiline':False]['text':' compared to Y.','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' Max error found at 128-bit long double precision:  5.541e-35','line_number':208,'multiline':False]['text':' Maximum Deviation Found (approximation error):     1.965e-35','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':'','line_number':255,'multiline':False]['text':' 19-digit precision:','line_number':256,'multiline':False]['text':'','line_number':257,'multiline':False]['text':'','line_number':261,'multiline':False]['text':' Now the approximation, we use the form:','line_number':262,'multiline':False]['text':'','line_number':263,'multiline':False]['text':' digamma(x) = (x - root) * (Y + R(x-1))','line_number':264,'multiline':False]['text':'','line_number':265,'multiline':False]['text':' Where root is the location of the positive root of digamma,','line_number':266,'multiline':False]['text':' Y is a constant, and R is optimised for low absolute error','line_number':267,'multiline':False]['text':' compared to Y.','line_number':268,'multiline':False]['text':'','line_number':269,'multiline':False]['text':' Max error found at 80-bit long double precision:   5.016e-20','line_number':270,'multiline':False]['text':' Maximum Deviation Found (approximation error):     3.575e-20','line_number':271,'multiline':False]['text':'','line_number':272,'multiline':False]['text':'','line_number':305,'multiline':False]['text':' 18-digit precision:','line_number':306,'multiline':False]['text':'','line_number':307,'multiline':False]['text':'','line_number':311,'multiline':False]['text':' Now the approximation, we use the form:','line_number':312,'multiline':False]['text':'','line_number':313,'multiline':False]['text':' digamma(x) = (x - root) * (Y + R(x-1))','line_number':314,'multiline':False]['text':'','line_number':315,'multiline':False]['text':' Where root is the location of the positive root of digamma,','line_number':316,'multiline':False]['text':' Y is a constant, and R is optimised for low absolute error','line_number':317,'multiline':False]['text':' compared to Y.','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' Maximum Deviation Found:               1.466e-18','line_number':320,'multiline':False]['text':' At double precision, max error found:  2.452e-17','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':'','line_number':354,'multiline':False]['text':' 9-digit precision:','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' Now the approximation, we use the form:','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':' digamma(x) = (x - root) * (Y + R(x-1))','line_number':363,'multiline':False]['text':'','line_number':364,'multiline':False]['text':' Where root is the location of the positive root of digamma,','line_number':365,'multiline':False]['text':' Y is a constant, and R is optimised for low absolute error','line_number':366,'multiline':False]['text':' compared to Y.','line_number':367,'multiline':False]['text':'','line_number':368,'multiline':False]['text':' Maximum Deviation Found:              3.388e-010','line_number':369,'multiline':False]['text':' At float precision, max error found:  2.008725e-008','line_number':370,'multiline':False]['text':'','line_number':371,'multiline':False]['text':'','line_number':398,'multiline':False]['text':' This handles reflection of negative arguments, and all our','line_number':399,'multiline':False]['text':' error handling, then forwards to the T-specific approximation.','line_number':400,'multiline':False]['text':'','line_number':401,'multiline':False]['text':' ADL of std functions.','line_number':402,'multiline':False]['text':'','line_number':405,'multiline':False]['text':' Check for negative arguments and use reflection:','line_number':406,'multiline':False]['text':'','line_number':407,'multiline':False]['text':' Reflect:','line_number':410,'multiline':False]['text':' Argument reduction for tan:','line_number':412,'multiline':False]['text':' Shift to negative if > 0.5:','line_number':414,'multiline':False]['text':'','line_number':419,'multiline':False]['text':' check for evaluation at a negative pole:','line_number':420,'multiline':False]['text':'','line_number':421,'multiline':False]['text':'','line_number':430,'multiline':False]['text':' If we're above the lower-limit for the','line_number':431,'multiline':False]['text':' asymptotic expansion then use it:','line_number':432,'multiline':False]['text':'','line_number':433,'multiline':False]['text':'','line_number':440,'multiline':False]['text':' If x > 2 reduce to the interval [1,2]:','line_number':441,'multiline':False]['text':'','line_number':442,'multiline':False]['text':'','line_number':448,'multiline':False]['text':' If x < 1 use recurrence to shift to > 1:','line_number':449,'multiline':False]['text':'','line_number':450,'multiline':False]['text':'','line_number':464,'multiline':False]['text':' This handles reflection of negative arguments, and all our','line_number':465,'multiline':False]['text':' error handling, then forwards to the T-specific approximation.','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' ADL of std functions.','line_number':468,'multiline':False]['text':'','line_number':471,'multiline':False]['text':' Check for negative arguments and use reflection:','line_number':472,'multiline':False]['text':'','line_number':473,'multiline':False]['text':' Reflect:','line_number':476,'multiline':False]['text':' Argument reduction for tan:','line_number':478,'multiline':False]['text':' Shift to negative if > 0.5:','line_number':480,'multiline':False]['text':'','line_number':485,'multiline':False]['text':' check for evaluation at a negative pole:','line_number':486,'multiline':False]['text':'','line_number':487,'multiline':False]['text':'','line_number':496,'multiline':False]['text':' If we're above the lower-limit for the','line_number':497,'multiline':False]['text':' asymptotic expansion then use it, the','line_number':498,'multiline':False]['text':' limit is a linear interpolation with','line_number':499,'multiline':False]['text':' limit = 10 at 50 bit precision and','line_number':500,'multiline':False]['text':' limit = 250 at 1000 bit precision.','line_number':501,'multiline':False]['text':'','line_number':502,'multiline':False]['text':'','line_number':511,'multiline':False]['text':' Special case for integer arguments, see','line_number':512,'multiline':False]['text':' http://functions.wolfram.com/06.14.03.0001.01','line_number':513,'multiline':False]['text':'','line_number':514,'multiline':False]['text':'','line_number':525,'multiline':False]['text':' Special case for half integer arguments, see:','line_number':526,'multiline':False]['text':' http://functions.wolfram.com/06.14.03.0007.01','line_number':527,'multiline':False]['text':'','line_number':528,'multiline':False]['text':'','line_number':541,'multiline':False]['text':' Rescale so we can use the asymptotic expansion:','line_number':542,'multiline':False]['text':'','line_number':543,'multiline':False]['text':'','line_number':553,'multiline':False]['text':' Initializer: ensure all our constants are initialized prior to the first call of main:','line_number':554,'multiline':False]['text':'','line_number':555,'multiline':False]['text':' namespace detail','line_number':584,'multiline':False]['text':' Force initialization of constants:','line_number':606,'multiline':False]['text':' namespace math','line_number':621,'multiline':False]['text':' namespace boost','line_number':622,'multiline':False]