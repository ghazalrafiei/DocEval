['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'/ @file','line_number':8,'multiline':False]['text':'/ Addition to STL algorithms','line_number':9,'multiline':False]['text':' ***************************************************************************','line_number':10,'multiline':False]['text':' STL','line_number':17,'multiline':False]['text':' std::find','line_number':19,'multiline':False]['text':' std::bind1st or std::bind','line_number':20,'multiline':False]['text':'____________________________________________________________________________//','line_number':30,'multiline':False]['text':'/ @brief this algorithm search through two collections for first mismatch position that get returned as a pair','line_number':36,'multiline':False]['text':'/ of iterators, first pointing to the mismatch position in first collection, second iterator in second one','line_number':37,'multiline':False]['text':'/','line_number':38,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':39,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':40,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':41,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':42,'multiline':False]['text':'____________________________________________________________________________//','line_number':56,'multiline':False]['text':'/ @brief this algorithm search through two collections for first mismatch position that get returned as a pair','line_number':58,'multiline':False]['text':'/ of iterators, first pointing to the mismatch position in first collection, second iterator in second one. This algorithms','line_number':59,'multiline':False]['text':'/ uses supplied predicate for collection elements comparison','line_number':60,'multiline':False]['text':'/','line_number':61,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':62,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':63,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':64,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':65,'multiline':False]['text':'/ @param pred - predicate to be used for search','line_number':66,'multiline':False]['text':'____________________________________________________________________________//','line_number':81,'multiline':False]['text':'/ @brief this algorithm search through first collection for first element that does not belong a second one','line_number':83,'multiline':False]['text':'/','line_number':84,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':85,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':86,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':87,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':88,'multiline':False]['text':'____________________________________________________________________________//','line_number':103,'multiline':False]['text':'/ @brief this algorithm search through first collection for first element that does not satisfy binary','line_number':105,'multiline':False]['text':'/ predicate in conjunction will any element in second collection','line_number':106,'multiline':False]['text':'/','line_number':107,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':108,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':109,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':110,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':111,'multiline':False]['text':'/ @param pred - predicate to be used for search','line_number':112,'multiline':False]['text':'____________________________________________________________________________//','line_number':128,'multiline':False]['text':'/ @brief this algorithm search through first collection for last element that belongs to a second one','line_number':130,'multiline':False]['text':'/','line_number':131,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':132,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':133,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':134,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':135,'multiline':False]['text':'____________________________________________________________________________//','line_number':150,'multiline':False]['text':'/ @brief this algorithm search through first collection for last element that satisfy binary','line_number':152,'multiline':False]['text':'/ predicate in conjunction will at least one element in second collection','line_number':153,'multiline':False]['text':'/','line_number':154,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':155,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':156,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':157,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':158,'multiline':False]['text':'/ @param pred - predicate to be used for search','line_number':159,'multiline':False]['text':'____________________________________________________________________________//','line_number':175,'multiline':False]['text':'/ @brief this algorithm search through first collection for last element that does not belong to a second one','line_number':177,'multiline':False]['text':'/','line_number':178,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':179,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':180,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':181,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':182,'multiline':False]['text':'____________________________________________________________________________//','line_number':197,'multiline':False]['text':'/ @brief this algorithm search through first collection for last element that does not satisfy binary','line_number':199,'multiline':False]['text':'/ predicate in conjunction will any element in second collection','line_number':200,'multiline':False]['text':'/','line_number':201,'multiline':False]['text':'/ @param first1 - first collection begin iterator','line_number':202,'multiline':False]['text':'/ @param last1 - first collection end iterator','line_number':203,'multiline':False]['text':'/ @param first2 - second collection begin iterator','line_number':204,'multiline':False]['text':'/ @param last2 - second collection end iterator','line_number':205,'multiline':False]['text':'/ @param pred - predicate to be used for search','line_number':206,'multiline':False]['text':'____________________________________________________________________________//','line_number':222,'multiline':False]['text':'/ @brief This algorithm replaces all occurrences of a set of substrings by another substrings','line_number':225,'multiline':False]['text':'/','line_number':226,'multiline':False]['text':'/ @param str - string of operation','line_number':227,'multiline':False]['text':'/ @param first1 - iterator to the beginning of the substrings to replace','line_number':228,'multiline':False]['text':'/ @param last1 - iterator to the end of the substrings to replace','line_number':229,'multiline':False]['text':'/ @param first2 - iterator to the beginning of the substrings to replace with','line_number':230,'multiline':False]['text':'/ @param last2 - iterator to the end of the substrings to replace with','line_number':231,'multiline':False]['text':'/ @brief This algorithm replaces all occurrences of a string with basic wildcards','line_number':249,'multiline':False]['text':'/ with another (optionally containing wildcards as well).','line_number':250,'multiline':False]['text':'/','line_number':251,'multiline':False]['text':'/ @param str - string to transform','line_number':252,'multiline':False]['text':'/ @param it_string_to_find - iterator to the beginning of the substrings to replace','line_number':253,'multiline':False]['text':'/ @param it_string_to_find_end - iterator to the end of the substrings to replace','line_number':254,'multiline':False]['text':'/ @param it_string_to_replace - iterator to the beginning of the substrings to replace with','line_number':255,'multiline':False]['text':'/ @param it_string_to_replace_end - iterator to the end of the substrings to replace with','line_number':256,'multiline':False]['text':'/','line_number':257,'multiline':False]['text':'/ The wildcard is the symbol '*'. Only a unique wildcard per string is supported. The replacement','line_number':258,'multiline':False]['text':'/ string may also contain a wildcard, in which case it is considered as a placeholder to the content','line_number':259,'multiline':False]['text':'/ of the wildcard in the source string.','line_number':260,'multiline':False]['text':'/ Example:','line_number':261,'multiline':False]['text':'/ - In order to replace the occurrences of @c 'time=\"some-variable-value\"' to a constant string,','line_number':262,'multiline':False]['text':'/   one may use @c 'time=\"*\"' as the string to search for, and 'time=\"0.0\"' as the replacement string.','line_number':263,'multiline':False]['text':'/ - In order to replace the occurrences of 'file.cpp(XX)' per 'file.cpp:XX', where XX is a variable to keep,','line_number':264,'multiline':False]['text':'/   on may use @c 'file.cpp(*)' as the string to search for, and 'file.cpp:*' as the replacement string.','line_number':265,'multiline':False]['text':' to simplify','line_number':291,'multiline':False]['text':' may adapt the restart to the replacement and be more efficient','line_number':314,'multiline':False]['text':' namespace utils','line_number':322,'multiline':False]['text':' namespace unit_test','line_number':323,'multiline':False]['text':' namespace boost','line_number':324,'multiline':False]['text':' BOOST_TEST_UTILS_ALGORITHM_HPP','line_number':328,'multiline':False]