['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':'/ @file search.hpp','line_number':2,'multiline':False]['text':'/ @brief','line_number':3,'multiline':False]['text':'/ @author Copyright (c) 2017 Francisco Jos√© Tapia (fjtapia@gmail.com )\n','line_number':4,'multiline':False]['text':'/         Distributed under the Boost Software License, Version 1.0.\n','line_number':5,'multiline':False]['text':'/         ( See copy at http://www.boost.org/LICENSE_1_0.txt  )','line_number':6,'multiline':False]['text':'/ @remarks','line_number':7,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':8,'multiline':False]['text':'','line_number':34,'multiline':False]['text':'###########################################################################','line_number':35,'multiline':False]['text':'                                                                         ##','line_number':36,'multiline':False]['text':'    ################################################################     ##','line_number':37,'multiline':False]['text':'    #                                                              #     ##','line_number':38,'multiline':False]['text':'    #           I N T E R N A L      F U N C T I O N S             #     ##','line_number':39,'multiline':False]['text':'    #                                                              #     ##','line_number':40,'multiline':False]['text':'    ################################################################     ##','line_number':41,'multiline':False]['text':'                                                                         ##','line_number':42,'multiline':False]['text':'                       I M P O R T A N T                                 ##','line_number':43,'multiline':False]['text':'                                                                         ##','line_number':44,'multiline':False]['text':' These functions are not directly callable by the user, are for internal ##','line_number':45,'multiline':False]['text':' use only.                                                               ##','line_number':46,'multiline':False]['text':' These functions don't check the parameters                              ##','line_number':47,'multiline':False]['text':'                                                                         ##','line_number':48,'multiline':False]['text':'###########################################################################','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':51,'multiline':False]['text':'  function : internal_find_first','line_number':52,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last).','line_number':53,'multiline':False]['text':'/        Always return as valid iterator in the range [first, last-1]','line_number':54,'multiline':False]['text':'/        If exist return the iterator to the first occurrence. If don't exist','line_number':55,'multiline':False]['text':'/        return the first greater than val.','line_number':56,'multiline':False]['text':'/        If val is greater than the *(last-1), return (last-1)','line_number':57,'multiline':False]['text':'/        If val is lower than  (*first), return  first','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':60,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':61,'multiline':False]['text':'/ @param [in] val : value to find','line_number':62,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':63,'multiline':False]['text':'/ @return iterator to the element found,','line_number':64,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':65,'multiline':False]['text':'','line_number':83,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':84,'multiline':False]['text':'  function : internal_find_last','line_number':85,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last).','line_number':86,'multiline':False]['text':'/        Always return as valid iterator in the range [first, last-1]','line_number':87,'multiline':False]['text':'/        If exist return the iterator to the last occurrence.','line_number':88,'multiline':False]['text':'/        If don't exist return the first lower than val.','line_number':89,'multiline':False]['text':'/        If val is greater than *(last-1) return (last-1).','line_number':90,'multiline':False]['text':'/        If is lower than the first, return first','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':93,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':94,'multiline':False]['text':'/ @param [in] val : value to find','line_number':95,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':96,'multiline':False]['text':'/ @return iterator to the element found, if not found return last','line_number':97,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':99,'multiline':False]['text':'','line_number':117,'multiline':False]['text':'###########################################################################','line_number':118,'multiline':False]['text':'                                                                         ##','line_number':119,'multiline':False]['text':'    ################################################################     ##','line_number':120,'multiline':False]['text':'    #                                                              #     ##','line_number':121,'multiline':False]['text':'    #              P U B L I C       F U N C T I O N S             #     ##','line_number':122,'multiline':False]['text':'    #                                                              #     ##','line_number':123,'multiline':False]['text':'    ################################################################     ##','line_number':124,'multiline':False]['text':'                                                                         ##','line_number':125,'multiline':False]['text':'###########################################################################','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':128,'multiline':False]['text':'  function : find_first','line_number':129,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last). If exist return the','line_number':130,'multiline':False]['text':'/        iterator to the first occurrence. If don't exist return last','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':133,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':134,'multiline':False]['text':'/ @param [in] val : value to find','line_number':135,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':136,'multiline':False]['text':'/ @return iterator to the element found, and if not last','line_number':137,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':138,'multiline':False]['text':'','line_number':151,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':152,'multiline':False]['text':'  function : find_last','line_number':153,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last). If exist return the','line_number':154,'multiline':False]['text':'/        iterator to the last occurrence. If don't exist return last','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':157,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':158,'multiline':False]['text':'/ @param [in] val : value to find','line_number':159,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':160,'multiline':False]['text':'/ @return iterator to the element found, if not found return last','line_number':161,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':163,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':177,'multiline':False]['text':'  function : lower_bound','line_number':178,'multiline':False]['text':'/ @brief Returns an iterator pointing to the first element in the range','line_number':179,'multiline':False]['text':'/        [first, last) that is not less than (i.e. greater or equal to) val.','line_number':180,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':181,'multiline':False]['text':'/ @param [in] val : value to find','line_number':182,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':183,'multiline':False]['text':'/ @return iterator to the element found','line_number':184,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':185,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':198,'multiline':False]['text':'  function :upper_bound','line_number':199,'multiline':False]['text':'/ @brief return the first element greather than val.If don't exist','line_number':200,'multiline':False]['text':'/        return last','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':203,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':204,'multiline':False]['text':'/ @param [in] val : value to find','line_number':205,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':206,'multiline':False]['text':'/ @return iterator to the element found','line_number':207,'multiline':False]['text':'/ @remarks','line_number':208,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':209,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':223,'multiline':False]['text':'  function :equal_range','line_number':224,'multiline':False]['text':'/ @brief return a pair of lower_bound and upper_bound with the value val.If','line_number':225,'multiline':False]['text':'/        don't exist return last in the two elements of the pair','line_number':226,'multiline':False]['text':'','line_number':227,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':228,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':229,'multiline':False]['text':'/ @param [in] val : value to find','line_number':230,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':231,'multiline':False]['text':'/ @return pair of iterators','line_number':232,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':233,'multiline':False]['text':'','line_number':244,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':245,'multiline':False]['text':'  function : insert_first','line_number':246,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last). If exist return the','line_number':247,'multiline':False]['text':'/        iterator to the first occurrence. If don't exist return last','line_number':248,'multiline':False]['text':'','line_number':249,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':250,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':251,'multiline':False]['text':'/ @param [in] val : value to find','line_number':252,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':253,'multiline':False]['text':'/ @return iterator to the element found, and if not last','line_number':254,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':255,'multiline':False]['text':'','line_number':265,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':266,'multiline':False]['text':'  function : insert_last','line_number':267,'multiline':False]['text':'/ @brief find if a value exist in the range [first, last). If exist return the','line_number':268,'multiline':False]['text':'/        iterator to the last occurrence. If don't exist return last','line_number':269,'multiline':False]['text':'','line_number':270,'multiline':False]['text':'/ @param [in] first : iterator to the first element of the range','line_number':271,'multiline':False]['text':'/ @param [in] last : iterator to the last element of the range','line_number':272,'multiline':False]['text':'/ @param [in] val : value to find','line_number':273,'multiline':False]['text':'/ @param [in] comp : object for to compare two value_t objects','line_number':274,'multiline':False]['text':'/ @return iterator to the element found, if not found return last','line_number':275,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':277,'multiline':False]['text':'

 //
 //###########################################################################
 //                                                                         ##
 //    ################################################################     ##
 //    #                                                              #     ##
 //    #           I N T E R N A L      F U N C T I O N S             #     ##
 //    #                                                              #     ##
 //    ################################################################     ##
 //                                                                         ##
 //                       I M P O R T A N T                                 ##
 //                                                                         ##
 // These functions are not directly callable by the user, are for internal ##
 // use only.                                                               ##
 // These functions don't check the parameters                              ##
 //                                                                         ##
 //###########################################################################
 //
 //-----------------------------------------------------------------------------
 //  function : internal_find_first
 /// @brief find if a value exist in the range [first, last).
 ///        Always return as valid iterator in the range [first, last-1]
 ///        If exist return the iterator to the first occurrence. If don't exist
 ///        return the first greater than val.
 ///        If val is greater than the *(last-1), return (last-1)
 ///        If val is lower than  (*first), return  first
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found,
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t>  >
 inline Iter_t internal_find_first ( Iter_t first, Iter_t last,
 const value_iter<Iter_t> &val,
 const Compare & comp= Compare()  )
 {
 Iter_t LI = first , LS = last - 1, it_out = first;
 while ( LI != LS)
 {   it_out = LI + ( (LS - LI) >> 1);
 if ( comp ( *it_out, val)) LI = it_out + 1 ; else LS = it_out ;
 };
 return LS ;
 };
 //
 //-----------------------------------------------------------------------------
 //  function : internal_find_last
 /// @brief find if a value exist in the range [first, last).
 ///        Always return as valid iterator in the range [first, last-1]
 ///        If exist return the iterator to the last occurrence.
 ///        If don't exist return the first lower than val.
 ///        If val is greater than *(last-1) return (last-1).
 ///        If is lower than the first, return first
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found, if not found return last

 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t internal_find_last ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 const Compare &comp= Compare() )
 {
 Iter_t LI = first , LS = last - 1, it_out = first ;
 while ( LI != LS)
 {   it_out = LI + ( (LS - LI + 1) >> 1);
 if ( comp (val, *it_out)) LS = it_out - 1 ; else LI = it_out ;
 };
 return LS ;
 };

 //
 //###########################################################################
 //                                                                         ##
 //    ################################################################     ##
 //    #                                                              #     ##
 //    #              P U B L I C       F U N C T I O N S             #     ##
 //    #                                                              #     ##
 //    ################################################################     ##
 //                                                                         ##
 //###########################################################################
 //
 //-----------------------------------------------------------------------------
 //  function : find_first
 /// @brief find if a value exist in the range [first, last). If exist return the
 ///        iterator to the first occurrence. If don't exist return last
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found, and if not last
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t find_first ( Iter_t first, Iter_t last,
 const value_iter<Iter_t> &val,
 Compare comp = Compare() )
 {
 assert ( (last - first) >= 0 );
 if ( first == last) return last ;
 Iter_t LS = internal_find_first ( first, last, val, comp);
 return (comp (*LS, val) or comp (val, *LS))?last:LS;
 };
 //
 //-----------------------------------------------------------------------------
 //  function : find_last
 /// @brief find if a value exist in the range [first, last). If exist return the
 ///        iterator to the last occurrence. If don't exist return last
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found, if not found return last

 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t find_last ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 Compare comp = Compare())
 {
 assert ( (last - first ) >= 0 );
 if ( last == first ) return last ;
 Iter_t LS = internal_find_last (first, last, val, comp);
 return (comp (*LS, val) or comp (val, *LS))?last:LS ;
 };

 //----------------------------------------------------------------------------
 //  function : lower_bound
 /// @brief Returns an iterator pointing to the first element in the range
 ///        [first, last) that is not less than (i.e. greater or equal to) val.
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t lower_bound ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 Compare &comp = Compare() )
 {
 assert ( (last - first ) >= 0 );
 if ( last == first ) return last ;
 Iter_t  itaux = internal_find_first( first, last, val,comp);
 return (itaux == (last - 1) and comp (*itaux, val))?last: itaux;
 };
 //----------------------------------------------------------------------------
 //  function :upper_bound
 /// @brief return the first element greather than val.If don't exist
 ///        return last
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found
 /// @remarks
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t upper_bound ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 Compare &comp = Compare() )
 {
 assert ( (last - first ) >= 0 );
 if ( last == first ) return last ;
 Iter_t itaux = internal_find_last( first, last, val,comp);
 return ( itaux == first and comp (val,*itaux))? itaux: itaux + 1;
 };
 //----------------------------------------------------------------------------
 //  function :equal_range
 /// @brief return a pair of lower_bound and upper_bound with the value val.If
 ///        don't exist return last in the two elements of the pair
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return pair of iterators
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline std::pair<Iter_t, Iter_t> equal_range ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 Compare &comp = Compare() )
 {
 return std::make_pair(lower_bound(first, last, val,comp),
 upper_bound(first, last, val,comp));
 };
 //
 //-----------------------------------------------------------------------------
 //  function : insert_first
 /// @brief find if a value exist in the range [first, last). If exist return the
 ///        iterator to the first occurrence. If don't exist return last
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found, and if not last
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t insert_first ( Iter_t first, Iter_t last,
 const value_iter<Iter_t> &val,
 Compare comp = Compare() )
 {
 return lower_bound (first, last, val, comp);
 };
 //
 //-----------------------------------------------------------------------------
 //  function : insert_last
 /// @brief find if a value exist in the range [first, last). If exist return the
 ///        iterator to the last occurrence. If don't exist return last
 //
 /// @param [in] first : iterator to the first element of the range
 /// @param [in] last : iterator to the last element of the range
 /// @param [in] val : value to find
 /// @param [in] comp : object for to compare two value_t objects
 /// @return iterator to the element found, if not found return last

 //-----------------------------------------------------------------------------
 template < class Iter_t, class Compare = compare_iter<Iter_t> >
 inline Iter_t insert_last ( Iter_t first, Iter_t last ,
 const value_iter<Iter_t> &val,
 Compare comp = Compare())
 {
 return upper_bound (first, last, val, comp);
 };

 ','line_number':288,'multiline':True]['text':'','line_number':521,'multiline':False]['text':'****************************************************************************','line_number':522,'multiline':False]['text':'    End namespace util','line_number':523,'multiline':False]['text':'    End namespace common','line_number':524,'multiline':False]['text':'    End namespace sort','line_number':525,'multiline':False]['text':'    End namespace boost','line_number':526,'multiline':False]['text':'****************************************************************************','line_number':527,'multiline':False]['text':'','line_number':528,'multiline':False]