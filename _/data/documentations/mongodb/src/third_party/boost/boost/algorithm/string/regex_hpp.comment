['text':'  Boost string_algo library regex.hpp header file  ---------------------------//','line_number':1,'multiline':False]['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':'! \file
    Defines regex variants of the algorithms. 
','line_number':28,'multiline':True]['text':'  find_regex  -----------------------------------------------//','line_number':35,'multiline':False]['text':'! Find regex algorithm','line_number':37,'multiline':False]['text':'!
            Search for a substring matching the given regex in the input.
            
            \param Input A container which will be searched.
            \param Rx A regular expression
            \param Flags Regex options
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c RangeT::iterator or 
                \c RangeT::const_iterator, depending on the constness of 
                the input parameter.

              \note This function provides the strong exception-safety guarantee
        ','line_number':38,'multiline':True]['text':'  replace_regex --------------------------------------------------------------------//','line_number':69,'multiline':False]['text':'! Replace regex algorithm','line_number':71,'multiline':False]['text':'!
            Search for a substring matching given regex and format it with 
            the specified format.             
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Rx A regular expression
            \param Format Regex format definition
            \param Flags Regex options
            \return An output iterator pointing just after the last inserted character or
                    a modified copy of the input   

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':72,'multiline':True]['text':'! Replace regex algorithm','line_number':108,'multiline':False]['text':'!
            \overload
        ','line_number':109,'multiline':True]['text':'! Replace regex algorithm','line_number':129,'multiline':False]['text':'!
            Search for a substring matching given regex and format it with 
            the specified format. The input string is modified in-place.

            \param Input An input string
            \param Rx A regular expression
            \param Format Regex format definition
            \param Flags Regex options
        ','line_number':130,'multiline':True]['text':'  replace_all_regex --------------------------------------------------------------------//','line_number':156,'multiline':False]['text':'! Replace all regex algorithm','line_number':158,'multiline':False]['text':'!
            Format all substrings, matching given regex, with the specified format. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Rx A regular expression
            \param Format Regex format definition
            \param Flags Regex options
            \return An output iterator pointing just after the last inserted character or
                    a modified copy of the input     

              \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':159,'multiline':True]['text':'! Replace all regex algorithm','line_number':194,'multiline':False]['text':'!
            \overload
        ','line_number':195,'multiline':True]['text':'! Replace all regex algorithm','line_number':215,'multiline':False]['text':'!
            Format all substrings, matching given regex, with the specified format. 
            The input string is modified in-place.

            \param Input An input string
            \param Rx A regular expression
            \param Format Regex format definition
            \param Flags Regex options            
        ','line_number':216,'multiline':True]['text':'  erase_regex --------------------------------------------------------------------//','line_number':242,'multiline':False]['text':'! Erase regex algorithm','line_number':244,'multiline':False]['text':'!
            Remove a substring matching given regex from the input.
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.                        

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Rx A regular expression
            \param Flags Regex options
            \return An output iterator pointing just after the last inserted character or
                       a modified copy of the input    

             \note The second variant of this function provides the strong exception-safety guarantee
       ','line_number':245,'multiline':True]['text':'! Erase regex algorithm','line_number':277,'multiline':False]['text':'!
            \overload
        ','line_number':278,'multiline':True]['text':'! Erase regex algorithm','line_number':296,'multiline':False]['text':'!
            Remove a substring matching given regex from the input.
            The input string is modified in-place.

            \param Input An input string
            \param Rx A regular expression
            \param Flags Regex options
        ','line_number':297,'multiline':True]['text':'  erase_all_regex --------------------------------------------------------------------//','line_number':320,'multiline':False]['text':'! Erase all regex algorithm','line_number':322,'multiline':False]['text':'!
            Erase all substrings, matching given regex, from the input.
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.
            

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Rx A regular expression
            \param Flags Regex options
            \return An output iterator pointing just after the last inserted character or
                    a modified copy of the input                        

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':323,'multiline':True]['text':'! Erase all regex algorithm','line_number':356,'multiline':False]['text':'!
            \overload
        ','line_number':357,'multiline':True]['text':'! Erase all regex algorithm','line_number':375,'multiline':False]['text':'!
            Erase all substrings, matching given regex, from the input.
            The input string is modified in-place.

            \param Input An input string
            \param Rx A regular expression
            \param Flags Regex options
        ','line_number':376,'multiline':True]['text':'  find_all_regex ------------------------------------------------------------------//','line_number':399,'multiline':False]['text':'! Find all regex algorithm','line_number':401,'multiline':False]['text':'!
            This algorithm finds all substrings matching the give regex
            in the input.             
            
            Each part is copied and added as a new element to the output container.
            Thus the result container must be able to hold copies
            of the matches (in a compatible structure like std::string) or
            a reference to it (e.g. using the iterator range class).
            Examples of such a container are \c std::vector<std::string>
            or \c std::list<boost::iterator_range<std::string::iterator>>

            \param Result A container that can hold copies of references to the substrings.
            \param Input A container which will be searched.
            \param Rx A regular expression
            \param Flags Regex options
            \return A reference to the result

            \note Prior content of the result will be overwritten.

             \note This function provides the strong exception-safety guarantee
        ','line_number':402,'multiline':True]['text':'  split_regex ------------------------------------------------------------------//','line_number':440,'multiline':False]['text':'! Split regex algorithm','line_number':442,'multiline':False]['text':'! 
            Tokenize expression. This function is equivalent to C strtok. Input
            sequence is split into tokens, separated  by separators. Separator
            is an every match of the given regex.
            Each part is copied and added as a new element to the output container.
            Thus the result container must be able to hold copies
            of the matches (in a compatible structure like std::string) or
            a reference to it (e.g. using the iterator range class).
            Examples of such a container are \c std::vector<std::string>
            or \c std::list<boost::iterator_range<std::string::iterator>>
    
            \param Result A container that can hold copies of references to the substrings.          
            \param Input A container which will be searched.
            \param Rx A regular expression
            \param Flags Regex options
            \return A reference to the result

            \note Prior content of the result will be overwritten.

               \note This function provides the strong exception-safety guarantee
        ','line_number':443,'multiline':True]['text':'  join_if ------------------------------------------------------------------//','line_number':481,'multiline':False]['text':'! Conditional join algorithm','line_number':485,'multiline':False]['text':'!
            This algorithm joins all strings in a 'list' into one long string.
            Segments are concatenated by given separator. Only segments that
            match the given regular expression will be added to the result

            This is a specialization of join_if algorithm.

            \param Input A container that holds the input strings. It must be a container-of-containers.
            \param Separator A string that will separate the joined segments.
            \param Rx A regular expression
            \param Flags Regex options
            \return Concatenated string.

            \note This function provides the strong exception-safety guarantee
        ','line_number':486,'multiline':True]['text':' Define working types','line_number':513,'multiline':False]['text':' Parse input','line_number':517,'multiline':False]['text':' Construct container to hold the result','line_number':521,'multiline':False]['text':' Roll to the first element that will be added','line_number':525,'multiline':False]['text':' Add this element','line_number':530,'multiline':False]['text':' Add separator','line_number':541,'multiline':False]['text':' Add element','line_number':543,'multiline':False]['text':' BOOST_NO_FUNCTION_TEMPLATE_ORDERING','line_number':551,'multiline':False]['text':'! Conditional join algorithm','line_number':553,'multiline':False]['text':'!
            This algorithm joins all strings in a 'list' into one long string.
            Segments are concatenated by given separator. Only segments that
            match the given regular expression will be added to the result

            This is a specialization of join_if algorithm.

            \param Input A container that holds the input strings. It must be a container-of-containers.
            \param Separator A string that will separate the joined segments.
            \param Rx A regular expression
            \param Flags Regex options
            \return Concatenated string.

            \note This function provides the strong exception-safety guarantee
        ','line_number':554,'multiline':True]['text':' Define working types','line_number':581,'multiline':False]['text':' Parse input','line_number':585,'multiline':False]['text':' Construct container to hold the result','line_number':589,'multiline':False]['text':' Roll to the first element that will be added','line_number':593,'multiline':False]['text':' Add this element','line_number':598,'multiline':False]['text':' Add separator','line_number':609,'multiline':False]['text':' Add element','line_number':611,'multiline':False]['text':' BOOST_NO_FUNCTION_TEMPLATE_ORDERING','line_number':620,'multiline':False]['text':' namespace algorithm','line_number':622,'multiline':False]['text':' pull names into the boost namespace','line_number':624,'multiline':False]['text':' BOOST_NO_FUNCTION_TEMPLATE_ORDERING','line_number':639,'multiline':False]['text':' BOOST_NO_FUNCTION_TEMPLATE_ORDERING','line_number':641,'multiline':False]['text':' namespace boost','line_number':643,'multiline':False]['text':' BOOST_STRING_REGEX_HPP','line_number':646,'multiline':False]