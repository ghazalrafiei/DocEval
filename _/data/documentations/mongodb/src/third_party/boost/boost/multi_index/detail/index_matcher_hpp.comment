['text':' Copyright 2003-2022 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]['text':' index_matcher compares a sequence of elements against a
 * base sequence, identifying those elements that belong to the
 * longest subsequence which is ordered with respect to the base.
 * For instance, if the base sequence is:
 *
 *   0 1 2 3 4 5 6 7 8 9
 *
 * and the compared sequence (not necesarilly the same length):
 *
 *   1 4 2 3 0 7 8 9
 *
 * the elements of the longest ordered subsequence are:
 *
 *   1 2 3 7 8 9
 * 
 * The algorithm for obtaining such a subsequence is called
 * Patience Sorting, described in ch. 1 of:
 *   Aldous, D., Diaconis, P.: "Longest increasing subsequences: from
 *   patience sorting to the Baik-Deift-Johansson Theorem", Bulletin
 *   of the American Mathematical Society, vol. 36, no 4, pp. 413-432,
 *   July 1999.
 *   http://www.ams.org/bull/1999-36-04/S0273-0979-99-00796-X/
 *   S0273-0979-99-00796-X.pdf
 *
 * This implementation is not fully generic since it assumes that
 * the sequences given are pointed to by index iterators (having a
 * get_node() memfun.)
 ','line_number':30,'multiline':True]['text':' The algorithm stores the nodes of the base sequence and a number
 * of "piles" that are dynamically updated during the calculation
 * stage. From a logical point of view, nodes form an independent
 * sequence from piles. They are stored together so as to minimize
 * allocated memory.
 ','line_number':61,'multiline':True]['text':' node stuff ','line_number':72,'multiline':True]['text':' pile stuff ','line_number':88,'multiline':True]['text':' common code operating on void *'s ','line_number':103,'multiline':True]['text':' localize entry ','line_number':134,'multiline':True]['text':' get its position ','line_number':136,'multiline':True]['text':' find the first available pile ','line_number':141,'multiline':True]['text':' to stack the entry            ','line_number':142,'multiline':True]['text':' stack the entry ','line_number':146,'multiline':True]['text':' if not the first pile, link entry to top of the preceding pile ','line_number':149,'multiline':True]['text':' new pile? ','line_number':154,'multiline':True]['text':' Mark those elements which are in their correct position, i.e. those
       * belonging to the longest increasing subsequence. These are those
       * elements linked from the top of the last pile.
       ','line_number':162,'multiline':True]['text':' The algorithm has three phases:
 *   - Initialization, during which the nodes of the base sequence are added.
 *   - Execution.
 *   - Results querying, through the is_ordered memfun.
 ','line_number':192,'multiline':True]['text':' namespace multi_index::detail::index_matcher ','line_number':241,'multiline':True]['text':' namespace multi_index::detail ','line_number':243,'multiline':True]['text':' namespace multi_index ','line_number':245,'multiline':True]['text':' namespace boost ','line_number':247,'multiline':True]