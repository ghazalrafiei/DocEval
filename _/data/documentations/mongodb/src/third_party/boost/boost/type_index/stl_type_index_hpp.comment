['text':'','line_number':1,'multiline':False]['text':' Copyright 2013-2022 Antony Polukhin.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':5,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'/ \file stl_type_index.hpp','line_number':12,'multiline':False]['text':'/ \brief Contains boost::typeindex::stl_type_index class.','line_number':13,'multiline':False]['text':'/','line_number':14,'multiline':False]['text':'/ boost::typeindex::stl_type_index class can be used as a drop-in replacement ','line_number':15,'multiline':False]['text':'/ for std::type_index.','line_number':16,'multiline':False]['text':'/','line_number':17,'multiline':False]['text':'/ It is used in situations when RTTI is enabled or typeid() method is available.','line_number':18,'multiline':False]['text':'/ When typeid() is disabled or BOOST_TYPE_INDEX_FORCE_NO_RTTI_COMPATIBILITY macro','line_number':19,'multiline':False]['text':'/ is defined boost::typeindex::ctti is usually used instead of boost::typeindex::stl_type_index.','line_number':20,'multiline':False]['text':' MSVC is capable of calling typeid(T) even when RTTI is off','line_number':24,'multiline':False]['text':' std::strcmp, std::strlen, std::strstr','line_number':30,'multiline':False]['text':'/ \class stl_type_index','line_number':63,'multiline':False]['text':'/ This class is a wrapper around std::type_info, that workarounds issues and provides','line_number':64,'multiline':False]['text':'/ much more rich interface. \b For \b description \b of \b functions \b see type_index_facade.','line_number':65,'multiline':False]['text':'/','line_number':66,'multiline':False]['text':'/ This class requires typeid() to work. For cases when RTTI is disabled see ctti_type_index.','line_number':67,'multiline':False]['text':' In case of MSVC demangle() is a no-op, and name() already returns demangled name.','line_number':138,'multiline':False]['text':' In case of GCC and Clang (on non-Windows systems) name() returns mangled name and demangle() undecorates it.','line_number':139,'multiline':False]['text':' Trim leading spaces','line_number':155,'multiline':False]['text':' the string is zero terminated, we won't exceed the buffer size','line_number':156,'multiline':False]['text':' Skip the closing angle bracket','line_number':160,'multiline':False]['text':' Trim trailing spaces','line_number':166,'multiline':False]['text':' Parsing seems to have succeeded, the type name is not empty','line_number':172,'multiline':False]['text':'/ @cond','line_number':192,'multiline':False]['text':' for this compiler at least, cross-shared-library type_info','line_number':194,'multiline':False]['text':' comparisons don't work, so we are using typeid(x).name() instead.','line_number':195,'multiline':False]['text':'/ @endcond','line_number':204,'multiline':False]['text':' Old EDG-based compilers seem to mistakenly distinguish 'integral' from 'signed integral'','line_number':233,'multiline':False]['text':' in typeid() expressions. Full template specialization for 'integral' fixes that issue:','line_number':234,'multiline':False]['text':' namespace boost::typeindex','line_number':274,'multiline':False]['text':' BOOST_TYPE_INDEX_STL_TYPE_INDEX_HPP','line_number':278,'multiline':False]