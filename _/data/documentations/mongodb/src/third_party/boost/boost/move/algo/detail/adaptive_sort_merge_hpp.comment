['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2016.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Stable sorting that works in O(N*log(N)) worst time','line_number':12,'multiline':False]['text':' and uses O(1) extra memory','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' The main idea of the adaptive_sort algorithm was developed by Andrey Astrelin','line_number':17,'multiline':False]['text':' and explained in the article from the russian collaborative blog','line_number':18,'multiline':False]['text':' Habrahabr (http://habrahabr.ru/post/205290/). The algorithm is based on','line_number':19,'multiline':False]['text':' ideas from B-C. Huang and M. A. Langston explained in their article','line_number':20,'multiline':False]['text':' "Fast Stable Merging and Sorting in Constant Extra Space (1989-1992)"','line_number':21,'multiline':False]['text':' (http://comjnl.oxfordjournals.org/content/35/6/643.full.pdf).','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' This implementation by Ion Gaztanaga uses previous ideas with additional changes:','line_number':24,'multiline':False]['text':' ','line_number':25,'multiline':False]['text':' - Use of GCD-based rotation.','line_number':26,'multiline':False]['text':' - Non power of two buffer-sizes.','line_number':27,'multiline':False]['text':' - Tries to find sqrt(len)*2 unique keys, so that the merge sort','line_number':28,'multiline':False]['text':'   phase can form up to sqrt(len)*4 segments if enough keys are found.','line_number':29,'multiline':False]['text':' - The merge-sort phase can take advantage of external memory to','line_number':30,'multiline':False]['text':'   save some additional combination steps.','line_number':31,'multiline':False]['text':' - Combination phase: Blocks are selection sorted and merged in parallel.','line_number':32,'multiline':False]['text':' - The combination phase is performed alternating merge to left and merge','line_number':33,'multiline':False]['text':'   to right phases minimizing swaps due to internal buffer repositioning.','line_number':34,'multiline':False]['text':' - When merging blocks special optimizations are made to avoid moving some','line_number':35,'multiline':False]['text':'   elements twice.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' The adaptive_merge algorithm was developed by Ion Gaztanaga reusing some parts','line_number':38,'multiline':False]['text':' from the sorting algorithm and implementing an additional block merge algorithm','line_number':39,'multiline':False]['text':' without moving elements to left or right.','line_number':40,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':41,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'','line_number':78,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'BOOST_MOVE_ADAPTIVE_SORT_INVARIANTS','line_number':115,'multiline':False]['text':'static const std::size_t AdaptiveSortInsertionSortThreshold = 4;','line_number':120,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':231,'multiline':False]['text':'','line_number':232,'multiline':False]['text':'                         MERGE BUFFERLESS','line_number':233,'multiline':False]['text':'','line_number':234,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':235,'multiline':False]['text':' [first1, last1) merge [last1,last2) -> [first1,last2)','line_number':237,'multiline':False]['text':'old_last1 == last1 supported','line_number':250,'multiline':False]['text':' [first1, last1) merge [last1,last2) -> [first1,last2)','line_number':263,'multiline':False]['text':'BOOST_ASSERT(n_block_a || n_block_b);','line_number':325,'multiline':False]['text':'Selection sort blocks','line_number':335,'multiline':False]['text':'Check if irregular b block should go here.','line_number':348,'multiline':False]['text':'If so, break to the special code handling the irregular block','line_number':349,'multiline':False]['text':'Update context','line_number':359,'multiline':False]['text':' Complexity: 2*distance(first, last)+max_collected^2/2','line_number':385,'multiline':False]['text':'','line_number':386,'multiline':False]['text':' Tries to collect at most n_keys unique elements from [first, last),','line_number':387,'multiline':False]['text':' in the begining of the range, and ordered according to comp','line_number':388,'multiline':False]['text':' ','line_number':389,'multiline':False]['text':' Returns the number of collected keys','line_number':390,'multiline':False]['text':' first key is always here','line_number':402,'multiline':False]['text':'If key not found add it to [h, h+h0)','line_number':411,'multiline':False]['text':'If key not found add it to [h, h+h0)','line_number':428,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':519,'multiline':False]['text':'','line_number':520,'multiline':False]['text':'                            MERGE BLOCKS','line_number':521,'multiline':False]['text':'','line_number':522,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':523,'multiline':False]['text':'#define ADAPTIVE_SORT_MERGE_SLOW_STABLE_SORT_IS_NLOGN','line_number':525,'multiline':False]['text':'ADAPTIVE_SORT_MERGE_SLOW_STABLE_SORT_IS_NLOGN','line_number':535,'multiline':False]['text':'Use insertion sort to merge first elements','line_number':544,'multiline':False]['text':'ADAPTIVE_SORT_MERGE_SLOW_STABLE_SORT_IS_NLOGN','line_number':570,'multiline':False]['text':'Returns new l_block and updates use_buf','line_number':572,'multiline':False]['text':'We need to guarantee lblock >= l_merged/(n_keys/2) keys for the combination.','line_number':579,'multiline':False]['text':'We have at least 4 keys guaranteed (which are the minimum to merge 2 ranges)','line_number':580,'multiline':False]['text':'If l_block != 0, then n_keys is already enough to merge all blocks in all','line_number':581,'multiline':False]['text':'phases as we've found all needed keys for that buffer and length before.','line_number':582,'multiline':False]['text':'If l_block == 0 then see if half keys can be used as buffer and the rest','line_number':583,'multiline':False]['text':'as keys guaranteeing that n_keys >= (2*l_merged)/lblock = ','line_number':584,'multiline':False]['text':'If l_block == 0 then n_keys is power of two','line_number':586,'multiline':False]['text':'(guaranteed by build_params(...))','line_number':587,'multiline':False]['text':'BOOST_ASSERT(0 == (n_keys &(n_keys-1)));','line_number':589,'multiline':False]['text':'See if half keys are at least 4 and if half keys fulfill','line_number':591,'multiline':False]['text':'merge_bufferless(first, middle, last, comp);','line_number':647,'multiline':False]['text':'Output','line_number':700,'multiline':False]['text':'Options','line_number':705,'multiline':False]['text':'Initial parameters for selection sort blocks','line_number':710,'multiline':False]['text':'Key initialization','line_number':719,'multiline':False]['text':'////////////////////////////////','line_number':727,'multiline':False]['text':'','line_number':728,'multiline':False]['text':'          partial_merge','line_number':729,'multiline':False]['text':'','line_number':730,'multiline':False]['text':'////////////////////////////////','line_number':731,'multiline':False]['text':'////////////////////////////////','line_number':766,'multiline':False]['text':'////////////////////////////////','line_number':767,'multiline':False]['text':'////////////////////////////////','line_number':768,'multiline':False]['text':'','line_number':769,'multiline':False]['text':'    op_partial_merge_and_save','line_number':770,'multiline':False]['text':'','line_number':771,'multiline':False]['text':'////////////////////////////////','line_number':772,'multiline':False]['text':'////////////////////////////////','line_number':773,'multiline':False]['text':'////////////////////////////////','line_number':774,'multiline':False]['text':'Move to buffer while merging','line_number':820,'multiline':False]['text':'Three way moves need less moves when op is swap_op so use it','line_number':821,'multiline':False]['text':'when merging elements from range2 to the destination occupied by range1','line_number':822,'multiline':False]['text':'Move to buffer while merging','line_number':858,'multiline':False]['text':'Three way moves need less moves when op is swap_op so use it','line_number':859,'multiline':False]['text':'when merging elements from range2 to the destination occupied by range1','line_number':860,'multiline':False]['text':'Skip any element that does not need to be moved','line_number':899,'multiline':False]['text':'Now merge from buffer','line_number':911,'multiline':False]['text':'////////////////////////////////','line_number':937,'multiline':False]['text':'////////////////////////////////','line_number':938,'multiline':False]['text':'////////////////////////////////','line_number':939,'multiline':False]['text':'','line_number':940,'multiline':False]['text':'    op_merge_blocks_with_irreg','line_number':941,'multiline':False]['text':'','line_number':942,'multiline':False]['text':'////////////////////////////////','line_number':943,'multiline':False]['text':'////////////////////////////////','line_number':944,'multiline':False]['text':'////////////////////////////////','line_number':945,'multiline':False]['text':'////////////////////////////////','line_number':1003,'multiline':False]['text':'////////////////////////////////','line_number':1004,'multiline':False]['text':'////////////////////////////////','line_number':1005,'multiline':False]['text':'','line_number':1006,'multiline':False]['text':'    op_merge_blocks_left/right','line_number':1007,'multiline':False]['text':'','line_number':1008,'multiline':False]['text':'////////////////////////////////','line_number':1009,'multiline':False]['text':'////////////////////////////////','line_number':1010,'multiline':False]['text':'////////////////////////////////','line_number':1011,'multiline':False]['text':'   BOOST_ASSERT(n_block_a || n_block_b);','line_number':1030,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1048,'multiline':False]['text':'Process all regular blocks before the irregular B block','line_number':1049,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1050,'multiline':False]['text':'Check if irregular b block should go here.','line_number':1066,'multiline':False]['text':'If so, break to the special code handling the irregular block','line_number':1067,'multiline':False]['text':'range2 exhausted: is_buffer_middle for the next iteration','line_number':1111,'multiline':False]['text':'range1 exhausted: !is_buffer_middle for the next iteration','line_number':1117,'multiline':False]['text':'Update context','line_number':1127,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1136,'multiline':False]['text':'Process remaining range 1 left before the irregular B block','line_number':1137,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1138,'multiline':False]['text':'Even if we copy backward, no overlapping occurs so use forward copy','line_number':1145,'multiline':False]['text':'that can be faster specially with trivial types','line_number':1146,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1161,'multiline':False]['text':'Process irregular B block and remaining A blocks','line_number':1162,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1163,'multiline':False]['text':' first - first element to merge.','line_number':1172,'multiline':False]['text':' first[-l_block, 0) - buffer (if use_buf == true)','line_number':1173,'multiline':False]['text':' l_block - length of regular blocks. First nblocks are stable sorted by 1st elements and key-coded','line_number':1174,'multiline':False]['text':' keys - sequence of keys, in same order as blocks. key<midkey means stream A','line_number':1175,'multiline':False]['text':' n_bef_irreg2/n_aft_irreg2 are regular blocks','line_number':1176,'multiline':False]['text':' l_irreg2 is a irregular block, that is to be combined after n_bef_irreg2 blocks and before n_aft_irreg2 blocks','line_number':1177,'multiline':False]['text':' If l_irreg2==0 then n_aft_irreg2==0 (no irregular blocks).','line_number':1178,'multiline':False]['text':' first - first element to merge.','line_number':1203,'multiline':False]['text':' [first+l_block*(n_bef_irreg2+n_aft_irreg2)+l_irreg2, first+l_block*(n_bef_irreg2+n_aft_irreg2+1)+l_irreg2) - buffer','line_number':1204,'multiline':False]['text':' l_block - length of regular blocks. First nblocks are stable sorted by 1st elements and key-coded','line_number':1205,'multiline':False]['text':' keys - sequence of keys, in same order as blocks. key<midkey means stream A','line_number':1206,'multiline':False]['text':' n_bef_irreg2/n_aft_irreg2 are regular blocks','line_number':1207,'multiline':False]['text':' l_irreg2 is a irregular block, that is to be combined after n_bef_irreg2 blocks and before n_aft_irreg2 blocks','line_number':1208,'multiline':False]['text':' If l_irreg2==0 then n_aft_irreg2==0 (no irregular blocks).','line_number':1209,'multiline':False]['text':'////////////////////////////////','line_number':1235,'multiline':False]['text':'////////////////////////////////','line_number':1236,'multiline':False]['text':'////////////////////////////////','line_number':1237,'multiline':False]['text':'','line_number':1238,'multiline':False]['text':'    op_merge_blocks_with_buf','line_number':1239,'multiline':False]['text':'','line_number':1240,'multiline':False]['text':'////////////////////////////////','line_number':1241,'multiline':False]['text':'////////////////////////////////','line_number':1242,'multiline':False]['text':'////////////////////////////////','line_number':1243,'multiline':False]['text':'BOOST_ASSERT(n_block_a || n_block_b);','line_number':1261,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1282,'multiline':False]['text':'Process all regular blocks before the irregular B block','line_number':1283,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1284,'multiline':False]['text':'Check if irregular b block should go here.','line_number':1301,'multiline':False]['text':'If so, break to the special code handling the irregular block','line_number':1302,'multiline':False]['text':'If buffered, put those elements in place','line_number':1313,'multiline':False]['text':'swap_and_update_key(key_next, key_range2, key_mid, first2, last2, first_min);','line_number':1319,'multiline':False]['text':'swap_and_update_key(key_next, key_range2, key_mid, first2, last2, first_min);','line_number':1335,'multiline':False]['text':'swap_and_update_key(key_next, key_range2, key_mid, first2, last2, first_min);','line_number':1340,'multiline':False]['text':'Update context','line_number':1354,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1364,'multiline':False]['text':'Process irregular B block and remaining A blocks','line_number':1365,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1366,'multiline':False]['text':'////////////////////////////////','line_number':1389,'multiline':False]['text':'////////////////////////////////','line_number':1390,'multiline':False]['text':'////////////////////////////////','line_number':1391,'multiline':False]['text':'','line_number':1392,'multiline':False]['text':'  op_insertion_sort_step_left/right','line_number':1393,'multiline':False]['text':'','line_number':1394,'multiline':False]['text':'////////////////////////////////','line_number':1395,'multiline':False]['text':'////////////////////////////////','line_number':1396,'multiline':False]['text':'////////////////////////////////','line_number':1397,'multiline':False]['text':'////////////////////////////////','line_number':1448,'multiline':False]['text':'////////////////////////////////','line_number':1449,'multiline':False]['text':'////////////////////////////////','line_number':1450,'multiline':False]['text':'','line_number':1451,'multiline':False]['text':'    insertion_sort_step','line_number':1452,'multiline':False]['text':'','line_number':1453,'multiline':False]['text':'////////////////////////////////','line_number':1454,'multiline':False]['text':'////////////////////////////////','line_number':1455,'multiline':False]['text':'////////////////////////////////','line_number':1456,'multiline':False]['text':'////////////////////////////////','line_number':1477,'multiline':False]['text':'////////////////////////////////','line_number':1478,'multiline':False]['text':'////////////////////////////////','line_number':1479,'multiline':False]['text':'','line_number':1480,'multiline':False]['text':'    op_merge_left_step_multiple','line_number':1481,'multiline':False]['text':'','line_number':1482,'multiline':False]['text':'////////////////////////////////','line_number':1483,'multiline':False]['text':'////////////////////////////////','line_number':1484,'multiline':False]['text':'////////////////////////////////','line_number':1485,'multiline':False]['text':'namespace detail_adaptive {','line_number':1526,'multiline':False]['text':'namespace movelib {','line_number':1527,'multiline':False]['text':'namespace boost {','line_number':1528,'multiline':False]['text':'#define BOOST_MOVE_ADAPTIVE_SORT_MERGE_HPP','line_number':1536,'multiline':False]