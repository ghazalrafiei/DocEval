['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'! \file','line_number':17,'multiline':False]['text':'!   This header forward declares boost::container::constructible_with_allocator_prefix,','line_number':18,'multiline':False]['text':'!   boost::container::constructible_with_allocator_suffix and','line_number':19,'multiline':False]['text':'!   boost::container::uses_allocator. Also defines the following types:','line_number':20,'multiline':False]['text':'Silence null-reference compiler warnings','line_number':33,'multiline':False]['text':'! The allocator_arg_t struct is an empty structure type used as a unique type to','line_number':40,'multiline':False]['text':'! disambiguate constructor and function overloading. Specifically, several types','line_number':41,'multiline':False]['text':'! have constructors with allocator_arg_t as the first argument, immediately followed','line_number':42,'multiline':False]['text':'! by an argument of a type that satisfies Allocator requirements','line_number':43,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':46,'multiline':False]['text':'! The `erased_type` struct is an empty struct that serves as a placeholder for a type','line_number':48,'multiline':False]['text':'! T in situations where the actual type T is determined at runtime. For example,','line_number':49,'multiline':False]['text':'! the nested type, `allocator_type`, is an alias for `erased_type` in classes that','line_number':50,'multiline':False]['text':'! use type-erased allocators.','line_number':51,'multiline':False]['text':'! A instance of type','line_number':54,'multiline':False]['text':'! allocator_arg_t','line_number':55,'multiline':False]['text':' @cond','line_number':58,'multiline':False]['text':' @endcond','line_number':69,'multiline':False]['text':' namespace boost { namespace container {','line_number':71,'multiline':False]['text':'BOOST_CONTAINER_USES_ALLOCATOR_HPP','line_number':73,'multiline':False]