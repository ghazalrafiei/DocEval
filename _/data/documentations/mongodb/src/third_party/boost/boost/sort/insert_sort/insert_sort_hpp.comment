['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':'/ @file insert_sort.hpp','line_number':2,'multiline':False]['text':'/ @brief Insertion Sort algorithm','line_number':3,'multiline':False]['text':'/','line_number':4,'multiline':False]['text':'/ @author Copyright (c) 2016 Francisco Jose Tapia (fjtapia@gmail.com )\n','line_number':5,'multiline':False]['text':'/         Distributed under the Boost Software License, Version 1.0.\n','line_number':6,'multiline':False]['text':'/         ( See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'/           http://www.boost.org/LICENSE_1_0.txt  )','line_number':8,'multiline':False]['text':'/ @version 0.1','line_number':9,'multiline':False]['text':'/','line_number':10,'multiline':False]['text':'/ @remarks','line_number':11,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':12,'multiline':False]['text':' std::swap','line_number':19,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':30,'multiline':False]['text':'  function : insert_sort','line_number':31,'multiline':False]['text':'/ @brief : Insertion sort algorithm','line_number':32,'multiline':False]['text':'/ @param first: iterator to the first element of the range','line_number':33,'multiline':False]['text':'/ @param last : iterator to the next element of the last in the range','line_number':34,'multiline':False]['text':'/ @param comp : object for to do the comparison between the elements','line_number':35,'multiline':False]['text':'/ @remarks This algorithm is O(N^2)','line_number':36,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':37,'multiline':False]['text':'--------------------------------------------------------------------','line_number':42,'multiline':False]['text':'                   DEFINITIONS','line_number':43,'multiline':False]['text':'--------------------------------------------------------------------','line_number':44,'multiline':False]['text':'
//
//-----------------------------------------------------------------------------
//  function : insert_partial_sort
/// @brief : Insertion sort of elements sorted
/// @param first: iterator to the first element of the range
/// @param mid : last pointer of the sorted data, and first pointer to the
///               elements to insert
/// @param last : iterator to the next element of the last in the range
/// @param comp : object for to do the comparison between the elements
/// @remarks This algorithm is O(N^2)
//-----------------------------------------------------------------------------
template < class Iter_t, typename Compare = compare_iter < Iter_t > >
void insert_partial_sort (Iter_t first, Iter_t mid, Iter_t last,
                          Compare comp = Compare())
{
    //--------------------------------------------------------------------
    //                   DEFINITIONS
    //--------------------------------------------------------------------
    typedef value_iter< Iter_t > value_t;

    if ( mid == last ) return ;
    insert_sort ( mid, last, comp);
    if (first == mid) return ;

    // creation of the vector of elements to insert and their position in the
    // sorted part
    std::vector<Iter_t> viter ;
    std::vector<value_t> vdata ;

    for ( Iter_t alpha = mid ; alpha != last ; ++alpha)
        vdata.push_back ( std::move ( *alpha));

    Iter_t linf = first , lsup = mid ;
    for ( uint32_t i= 0 ; i < vdata.size() ; ++i)
    {   Iter_t it1 = std::upper_bound ( linf, lsup , vdata[i], comp);
        viter.push_back ( it1 );
        linf = it1 ;
    };

    // moving the elements
    viter.push_back ( mid) ;
    for ( uint32_t i = viter.size() -1 ; i!= 0 ; --i)
    {   Iter_t src = viter[i], limit = viter[i-1];
        Iter_t dest = src + ( i);
        while ( src != limit) * (--dest) = std::move ( *(--src));
        *(viter[i-1] + (i -1)) = std::move (vdata[i-1]);
    };
}
','line_number':63,'multiline':True]['text':'','line_number':113,'multiline':False]['text':'****************************************************************************','line_number':114,'multiline':False]['text':'    End namespace sort','line_number':115,'multiline':False]['text':'    End namespace boost','line_number':116,'multiline':False]['text':'****************************************************************************','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]