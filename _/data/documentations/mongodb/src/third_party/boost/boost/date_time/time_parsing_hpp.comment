['text':' Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! computes exponential math like 2^8 => 256, only works with positive integers','line_number':22,'multiline':False]['text':'Not general purpose, but needed b/c std::pow is not available ','line_number':23,'multiline':False]['text':'everywhere. Hasn't been tested with negatives and zeros','line_number':24,'multiline':False]['text':'! Creates a time_duration object from a delimited string','line_number':36,'multiline':False]['text':'! Expected format for string is "[-]h[h][:mm][:ss][.fff]".
   * If the number of fractional digits provided is greater than the 
   * precision of the time duration type then the extra digits are 
   * truncated.
   *
   * A negative duration will be created if the first character in
   * string is a '-', all other '-' will be treated as delimiters.
   * Accepted delimiters are "-:,.". 
   ','line_number':37,'multiline':True]['text':'Works around a bug in MSVC 6 library that does not support','line_number':85,'multiline':False]['text':'operator>> thus meaning lexical_cast will fail to compile.','line_number':86,'multiline':False]['text':' msvc wouldn't compile 'time_duration::num_fractional_digits()' ','line_number':88,'multiline':False]['text':' (required template argument list) as a workaround a temp ','line_number':89,'multiline':False]['text':' time_duration object was used','line_number':90,'multiline':False]['text':' _atoi64 is an MS specific function','line_number':93,'multiline':False]['text':' drop excess digits','line_number':95,'multiline':False]['text':' drop excess digits','line_number':104,'multiline':False]['text':' trailing zeros get dropped from the string, ','line_number':112,'multiline':False]['text':' "1:01:01.1" would yield .000001 instead of .100000','line_number':113,'multiline':False]['text':' the power() compensates for the missing decimal places','line_number':114,'multiline':False]['text':'switch','line_number':121,'multiline':False]['text':'! Creates a time_duration object from a delimited string','line_number':132,'multiline':False]['text':'! Expected format for string is "[-]h[h][:mm][:ss][.fff]".
   * If the number of fractional digits provided is greater than the 
   * precision of the time duration type then the extra digits are 
   * truncated.
   *
   * A negative duration will be created if the first character in
   * string is a '-', all other '-' will be treated as delimiters.
   * Accepted delimiters are "-:,.". 
   ','line_number':133,'multiline':True]['text':'! Utility function to split appart string','line_number':150,'multiline':False]['text':'split date/time on a unique delimiter char such as ' ' or 'T'','line_number':174,'multiline':False]['text':'call parse_date with first string','line_number':177,'multiline':False]['text':'call parse_time_duration with remaining string','line_number':179,'multiline':False]['text':'construct a time','line_number':181,'multiline':False]['text':'! Parse time duration part of an iso time of form: [-]hhmmss[.fff...] (eg: 120259.123 is 12 hours, 2 min, 59 seconds, 123000 microseconds)','line_number':186,'multiline':False]['text':' msvc wouldn't compile 'time_duration::num_fractional_digits()' ','line_number':194,'multiline':False]['text':' (required template argument list) as a workaround, a temp ','line_number':195,'multiline':False]['text':' time_duration object was used','line_number':196,'multiline':False]['text':' 'precision+1' is so we grab all digits, plus the decimal','line_number':200,'multiline':False]['text':' increment one position if the string was "signed"','line_number':206,'multiline':False]['text':' stlport choked when passing s.substr() to tokenizer','line_number':211,'multiline':False]['text':' using a new string fixed the error','line_number':212,'multiline':False]['text':' We do not want the offset_separator to wrap the offsets, we 
     * will never want to  process more than: 
     * 2 char, 2 char, 2 char, frac_sec length.
     * We *do* want the offset_separator to give us a partial for the
     * last characters if there were not enough provided in the input string. ','line_number':214,'multiline':True]['text':' digits w/no decimal','line_number':248,'multiline':False]['text':'Works around a bug in MSVC 6 library that does not support','line_number':251,'multiline':False]['text':'operator>> thus meaning lexical_cast will fail to compile.','line_number':252,'multiline':False]['text':' 1200 == VC++ 6.0','line_number':253,'multiline':False]['text':' _atoi64 is an MS specific function','line_number':254,'multiline':False]['text':' drop excess digits','line_number':256,'multiline':False]['text':' just in case _atoi64 doesn't like an empty string','line_number':260,'multiline':False]['text':' drop excess digits','line_number':267,'multiline':False]['text':' lexical_cast doesn't like empty strings','line_number':271,'multiline':False]['text':' trailing zeros get dropped from the string, ','line_number':278,'multiline':False]['text':' "1:01:01.1" would yield .000001 instead of .100000','line_number':279,'multiline':False]['text':' the power() compensates for the missing decimal places','line_number':280,'multiline':False]['text':'! Parse time string of form YYYYMMDDThhmmss where T is delimeter between date and time','line_number':298,'multiline':False]['text':' given to_iso_string can produce a special value string','line_number':308,'multiline':False]['text':' then from_iso_string should be able to read a special value string','line_number':309,'multiline':False]['text':' the special_values_parser is expensive to set up and not thread-safe','line_number':310,'multiline':False]['text':' so it cannot be static, so we need to be careful about when we use it','line_number':311,'multiline':False]['text':' expensive','line_number':316,'multiline':False]['text':'split date/time on a unique delimiter char such as ' ' or 'T'','line_number':326,'multiline':False]['text':'call parse_date with first string','line_number':329,'multiline':False]['text':'call parse_time_duration with remaining string','line_number':331,'multiline':False]['text':'construct a time','line_number':333,'multiline':False]['text':'namespace date_time','line_number':337,'multiline':False]