['text':' Boost Lambda Library -  lambda_functors.hpp -------------------------------','line_number':1,'multiline':False]['text':' Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' For more information, see http://www.boost.org','line_number':9,'multiline':False]['text':' ------------------------------------------------','line_number':11,'multiline':False]['text':' -- lambda_functor --------------------------------------------','line_number':44,'multiline':False]['text':' --------------------------------------------------------------','line_number':45,'multiline':False]['text':'inline const null_type const_null_type() { return null_type(); }','line_number':47,'multiline':False]['text':' unnamed','line_number':54,'multiline':False]['text':' detail','line_number':55,'multiline':False]['text':' -- free variables types -------------------------------------------------- ','line_number':61,'multiline':False]['text':' helper to work around the case where the nullary return type deduction ','line_number':63,'multiline':False]['text':' is always performed, even though the functor is not nullary  ','line_number':64,'multiline':False]['text':' does nothing, prevents warnings for unused args','line_number':86,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':126,'multiline':False]['text':' free variables are lambda_functors. This is to allow uniform handling with ','line_number':129,'multiline':False]['text':' other lambda_functors.','line_number':130,'multiline':False]['text':' -------------------------------------------------------------------','line_number':131,'multiline':False]['text':'assignment operator could not be generated','line_number':135,'multiline':False]['text':' -- lambda_functor NONE ------------------------------------------------','line_number':138,'multiline':False]['text':' Note that this return type deduction template is instantiated, even ','line_number':158,'multiline':False]['text':' if the nullary ','line_number':159,'multiline':False]['text':' operator() is not called at all. One must make sure that it does not fail.','line_number':160,'multiline':False]['text':' Support for boost::result_of.','line_number':165,'multiline':False]['text':' for internal calls with env','line_number':256,'multiline':False]['text':' namespace lambda','line_number':298,'multiline':False]['text':' namespace boost','line_number':299,'multiline':False]['text':' is_placeholder','line_number':333,'multiline':False]['text':' namespace boost','line_number':355,'multiline':False]