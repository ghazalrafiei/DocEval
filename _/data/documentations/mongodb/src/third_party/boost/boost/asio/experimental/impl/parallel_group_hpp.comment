['text':'','line_number':1,'multiline':False]['text':' experimental/impl/parallel_group.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' Stores the result from an individual asynchronous operation.','line_number':35,'multiline':False]['text':' Proxy completion handler for the group of parallel operatations. Unpacks and','line_number':81,'multiline':False]['text':' concatenates the individual operations' results, and invokes the user's','line_number':82,'multiline':False]['text':' completion handler.','line_number':83,'multiline':False]['text':' Shared state for the parallel group.','line_number':143,'multiline':False]['text':' The number of operations that have completed so far. Used to determine the','line_number':153,'multiline':False]['text':' order of completion.','line_number':154,'multiline':False]['text':' The non-none cancellation type that resulted from a cancellation condition.','line_number':157,'multiline':False]['text':' Stored here for use by the group's initiating function.','line_number':158,'multiline':False]['text':' The number of cancellations that have been requested, either on completion','line_number':161,'multiline':False]['text':' of the operations within the group, or via the cancellation slot for the','line_number':162,'multiline':False]['text':' group operation. Initially set to the number of operations to prevent','line_number':163,'multiline':False]['text':' cancellation signals from being emitted until after all of the group's','line_number':164,'multiline':False]['text':' operations' initiating functions have completed.','line_number':165,'multiline':False]['text':' The number of operations that are yet to complete. Used to determine when','line_number':168,'multiline':False]['text':' it is safe to invoke the user's completion handler.','line_number':169,'multiline':False]['text':' The cancellation signals for each operation in the group.','line_number':172,'multiline':False]['text':' The cancellation condition is used to determine whether the results from an','line_number':175,'multiline':False]['text':' individual operation warrant a cancellation request for the whole group.','line_number':176,'multiline':False]['text':' The proxy handler to be invoked once all operations in the group complete.','line_number':179,'multiline':False]['text':' Handler for an individual operation within the parallel group.','line_number':183,'multiline':False]['text':' Capture this operation into the completion order.','line_number':203,'multiline':False]['text':' Determine whether the results of this operation require cancellation of','line_number':206,'multiline':False]['text':' the whole group.','line_number':207,'multiline':False]['text':' Capture the result of the operation into the proxy completion handler.','line_number':210,'multiline':False]['text':' Save the type for potential use by the group's initiating function.','line_number':215,'multiline':False]['text':' If we are the first operation to request cancellation, emit a signal','line_number':218,'multiline':False]['text':' for each operation in the group.','line_number':219,'multiline':False]['text':' If this is the last outstanding operation, invoke the user's handler.','line_number':226,'multiline':False]['text':' Handler for an individual operation within the parallel group that has an','line_number':234,'multiline':False]['text':' explicitly specified executor.','line_number':235,'multiline':False]['text':' Proxy handler that forwards the emitted signal to the correct executor.','line_number':265,'multiline':False]['text':' Helper to launch an operation using the correct executor, if any.','line_number':295,'multiline':False]['text':' Specialised launcher for operations that specify no executor.','line_number':312,'multiline':False]['text':' If we are the first place to request cancellation, i.e. no operation has','line_number':344,'multiline':False]['text':' yet completed and requested cancellation, emit a signal for each','line_number':345,'multiline':False]['text':' operation in the group.','line_number':346,'multiline':False]['text':' Get the user's completion handler's cancellation slot, so that we can allow','line_number':362,'multiline':False]['text':' cancellation of the entire group.','line_number':363,'multiline':False]['text':' Create the shared state for the operation.','line_number':367,'multiline':False]['text':' Initiate each individual operation in the group.','line_number':374,'multiline':False]['text':' Check if any of the operations has already requested cancellation, and if','line_number':381,'multiline':False]['text':' so, emit a signal for each operation in the group.','line_number':382,'multiline':False]['text':' Register a handler with the user's completion handler's cancellation slot.','line_number':387,'multiline':False]['text':' namespace detail','line_number':394,'multiline':False]['text':' namespace experimental','line_number':395,'multiline':False]['text':' namespace asio','line_number':430,'multiline':False]['text':' namespace boost','line_number':431,'multiline':False]['text':' BOOST_ASIO_IMPL_EXPERIMENTAL_PARALLEL_GROUP_HPP','line_number':435,'multiline':False]