['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':42,'multiline':False]['text':'! <b>Requires</b>: `upstream` is the address of a valid memory resource.','line_number':64,'multiline':False]['text':'!','line_number':65,'multiline':False]['text':'! <b>Effects</b>: Constructs a pool resource object that will obtain memory','line_number':66,'multiline':False]['text':'!   from upstream whenever the pool resource is unable to satisfy a memory','line_number':67,'multiline':False]['text':'!   request from its own internal data structures. The resulting object will hold','line_number':68,'multiline':False]['text':'!   a copy of upstream, but will not own the resource to which upstream points.','line_number':69,'multiline':False]['text':'!   [ Note: The intention is that calls to upstream->allocate() will be','line_number':70,'multiline':False]['text':'!   substantially fewer than calls to this->allocate() in most cases. - end note ','line_number':71,'multiline':False]['text':'!   The behavior of the pooling mechanism is tuned according to the value of','line_number':72,'multiline':False]['text':'!   the opts argument.','line_number':73,'multiline':False]['text':'!','line_number':74,'multiline':False]['text':'! <b>Throws</b>: Nothing unless upstream->allocate() throws. It is unspecified if','line_number':75,'multiline':False]['text':'!   or under what conditions this constructor calls upstream->allocate().','line_number':76,'multiline':False]['text':'! <b>Effects</b>: Same as','line_number':79,'multiline':False]['text':'!   `pool_resource(pool_options(), get_default_resource())`.','line_number':80,'multiline':False]['text':'! <b>Effects</b>: Same as','line_number':83,'multiline':False]['text':'!   `pool_resource(pool_options(), upstream)`.','line_number':84,'multiline':False]['text':'! <b>Effects</b>: Same as','line_number':87,'multiline':False]['text':'!   `pool_resource(opts, get_default_resource())`.','line_number':88,'multiline':False]['text':'! <b>Effects</b>: Calls','line_number':101,'multiline':False]['text':'!   `this->release()`.','line_number':102,'multiline':False]['text':'! <b>Effects</b>: Calls Calls `upstream_resource()->deallocate()` as necessary','line_number':105,'multiline':False]['text':'!   to release all allocated memory. [ Note: memory is released back to','line_number':106,'multiline':False]['text':'!   `upstream_resource()` even if deallocate has not been called for some','line_number':107,'multiline':False]['text':'!   of the allocated blocks. - end note ]','line_number':108,'multiline':False]['text':'! <b>Returns</b>: The value of the upstream argument provided to the','line_number':111,'multiline':False]['text':'!   constructor of this object.','line_number':112,'multiline':False]['text':'! <b>Returns</b>: The options that control the pooling behavior of this resource.','line_number':115,'multiline':False]['text':'!   The values in the returned struct may differ from those supplied to the pool','line_number':116,'multiline':False]['text':'!   resource constructor in that values of zero will be replaced with','line_number':117,'multiline':False]['text':'!   implementation-defined defaults and sizes may be rounded to unspecified granularity.','line_number':118,'multiline':False]['text':'public so that [un]synchronized_pool_resource can use them','line_number':121,'multiline':False]['text':'! <b>Returns</b>: A pointer to allocated storage with a size of at least `bytes`.','line_number':123,'multiline':False]['text':'!   The size and alignment of the allocated memory shall meet the requirements for','line_number':124,'multiline':False]['text':'!   a class derived from `memory_resource`.','line_number':125,'multiline':False]['text':'!','line_number':126,'multiline':False]['text':'! <b>Effects</b>: If the pool selected for a block of size bytes is unable to','line_number':127,'multiline':False]['text':'!   satisfy the memory request from its own internal data structures, it will call','line_number':128,'multiline':False]['text':'!   `upstream_resource()->allocate()` to obtain more memory. If `bytes` is larger','line_number':129,'multiline':False]['text':'!   than that which the largest pool can handle, then memory will be allocated','line_number':130,'multiline':False]['text':'!   using `upstream_resource()->allocate()`.','line_number':131,'multiline':False]['text':'!','line_number':132,'multiline':False]['text':'! <b>Throws</b>: Nothing unless `upstream_resource()->allocate()` throws.','line_number':133,'multiline':False]['text':'! <b>Effects</b>: Return the memory at p to the pool. It is unspecified if or under','line_number':136,'multiline':False]['text':'!   what circumstances this operation will result in a call to','line_number':137,'multiline':False]['text':'!   `upstream_resource()->deallocate()`.','line_number':138,'multiline':False]['text':'!','line_number':139,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':140,'multiline':False]['text':'Non-standard observers','line_number':143,'multiline':False]['text':'! <b>Returns</b>: The number of pools that will be used in the pool resource.','line_number':145,'multiline':False]['text':'!','line_number':146,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':147,'multiline':False]['text':'! <b>Returns</b>: The index of the pool that will be used to serve the allocation of `bytes`.','line_number':150,'multiline':False]['text':'!   from the pool specified by `pool_index`. Returns `pool_count()` if `bytes` is bigger','line_number':151,'multiline':False]['text':'!   than `options().largest_required_pool_block` (no pool will be used to serve this).','line_number':152,'multiline':False]['text':'!','line_number':153,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':154,'multiline':False]['text':'! <b>Requires</b>: `pool_idx < pool_index()`','line_number':157,'multiline':False]['text':'!','line_number':158,'multiline':False]['text':'! <b>Returns</b>: The number blocks that will be allocated in the next chunk','line_number':159,'multiline':False]['text':'!   from the pool specified by `pool_idx`.','line_number':160,'multiline':False]['text':'!','line_number':161,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':162,'multiline':False]['text':'! <b>Requires</b>: `pool_idx < pool_index()`','line_number':165,'multiline':False]['text':'!','line_number':166,'multiline':False]['text':'! <b>Returns</b>: The number of bytes of the block that the specified `pool_idx` pool manages.','line_number':167,'multiline':False]['text':'!','line_number':168,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':169,'multiline':False]['text':'! <b>Requires</b>: `pool_idx < pool_index()`','line_number':172,'multiline':False]['text':'!','line_number':173,'multiline':False]['text':'! <b>Returns</b>: The number of blocks that the specified `pool_idx` pool has cached','line_number':174,'multiline':False]['text':'!   and will be served without calling the upstream_allocator.','line_number':175,'multiline':False]['text':'!','line_number':176,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':177,'multiline':False]['text':'namespace pmr {','line_number':181,'multiline':False]['text':'namespace container {','line_number':182,'multiline':False]['text':'namespace boost {','line_number':183,'multiline':False]['text':'BOOST_CONTAINER_POOL_RESOURCE_HPP','line_number':187,'multiline':False]