['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]['text':'  Use, modification, and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'!@file','line_number':8,'multiline':False]['text':'!@brief CLA parser','line_number':9,'multiline':False]['text':' ***************************************************************************','line_number':10,'multiline':False]['text':' Boost.Test Runtime parameters','line_number':15,'multiline':False]['text':' Boost.Test','line_number':22,'multiline':False]['text':' !! ?? unnecessary after cxx11','line_number':28,'multiline':False]['text':' STL','line_number':30,'multiline':False]['text':' !! ?? #include <unordered_set>','line_number':31,'multiline':False]['text':' ************************************************************************** //','line_number':41,'multiline':False]['text':' **************         runtime::cla::parameter_trie         ************** //','line_number':42,'multiline':False]['text':' ************************************************************************** //','line_number':43,'multiline':False]['text':'/ If subtrie corresponding to the char c exists returns it otherwise creates new','line_number':55,'multiline':False]['text':'/ Creates series of sub-tries per characters in a string','line_number':66,'multiline':False]['text':'/ Registers candidate parameter for this subtrie. If final, it needs to be unique','line_number':77,'multiline':False]['text':'/ Gets subtrie for specified char if present or nullptr otherwise','line_number':93,'multiline':False]['text':' Data members','line_number':101,'multiline':False]['text':' ************************************************************************** //','line_number':108,'multiline':False]['text':' **************      runtime::cla::report_foreing_token      ************** //','line_number':109,'multiline':False]['text':' ************************************************************************** //','line_number':110,'multiline':False]['text':' namespace rt_cla_detail','line_number':120,'multiline':False]['text':' ************************************************************************** //','line_number':122,'multiline':False]['text':' **************             runtime::cla::parser             ************** //','line_number':123,'multiline':False]['text':' ************************************************************************** //','line_number':124,'multiline':False]['text':'/ Initializes a parser and builds internal trie representation used for','line_number':128,'multiline':False]['text':'/ parsing based on the supplied parameters','line_number':129,'multiline':False]['text':' input processing method','line_number':154,'multiline':False]['text':' save program name for help message','line_number':158,'multiline':False]['text':' Set up the traverser','line_number':167,'multiline':False]['text':' Loop till we reach end of input','line_number':170,'multiline':False]['text':' Perform format validations and split the argument into prefix, name and separator','line_number':179,'multiline':False]['text':' False return value indicates end of params indicator is met','line_number':180,'multiline':False]['text':' get rid of "end of params" token','line_number':182,'multiline':False]['text':' Locate trie corresponding to found prefix and skip it in the input','line_number':187,'multiline':False]['text':'  format_error() << "Unrecognized parameter prefix in the argument " << tr.current_token()','line_number':191,'multiline':False]['text':' Locate parameter based on a name and skip it in the input','line_number':199,'multiline':False]['text':' Skip validations if parameter has optional value and we are at the end of token','line_number':218,'multiline':False]['text':' we are given a separator or there is no optional value','line_number':221,'multiline':False]['text':' Validate and skip value separator in the input','line_number':223,'multiline':False]['text':' Deduce value source','line_number':232,'multiline':False]['text':' Deduce value source','line_number':246,'multiline':False]['text':' tokenization broke the value, we check the next one','line_number':249,'multiline':False]['text':' there is no separator and there is no optional value','line_number':252,'multiline':False]['text':' we look for the value on the next token','line_number':253,'multiline':False]['text':' example "-t XXXX" (no default)','line_number':254,'multiline':False]['text':' and we commit this value as being the passed value','line_number':255,'multiline':False]['text':' there is no separator and the value is optional','line_number':259,'multiline':False]['text':' we check the next token','line_number':260,'multiline':False]['text':' example "-c" (defaults to true)','line_number':261,'multiline':False]['text':' and commit this as the value if this is not a token','line_number':262,'multiline':False]['text':' this is a token, we consume what we have','line_number':269,'multiline':False]['text':' this is a value, we commit it','line_number':273,'multiline':False]['text':' Validate against argument duplication','line_number':280,'multiline':False]['text':' Produce argument value','line_number':287,'multiline':False]['text':' generate the remainder and return it's size','line_number':295,'multiline':False]['text':' help/usage/version','line_number':299,'multiline':False]['text':' we do not want to refer to the master test suite there','line_number':306,'multiline':False]['text':' Iterate over all parameters','line_number':454,'multiline':False]['text':' Register all parameter's ids in trie.','line_number':458,'multiline':False]['text':' This is the trie corresponding to the prefix.','line_number':460,'multiline':False]['text':' Build the trie, by following name's characters','line_number':465,'multiline':False]['text':' and register this parameter as candidate on each level','line_number':466,'multiline':False]['text':' Match prefix','line_number':479,'multiline':False]['text':' Match name','line_number':489,'multiline':False]['text':' Match value separator','line_number':502,'multiline':False]['text':' Match negation prefix','line_number':508,'multiline':False]['text':' C++03: cannot have references as types','line_number':516,'multiline':False]['text':' locate next subtrie corresponding to the char','line_number':528,'multiline':False]['text':' Initiate search for typo candicates. We will account for 'wrong char' typo','line_number':534,'multiline':False]['text':' 'missing char' typo and 'extra char' typo','line_number':535,'multiline':False]['text':' 'wrong char' typo','line_number':537,'multiline':False]['text':' 'missing char' typo','line_number':540,'multiline':False]['text':' 'extra char' typo','line_number':545,'multiline':False]['text':' go over existing typo candidates and see if they are still viable','line_number':552,'multiline':False]['text':' !! ?? unordered_set','line_number':567,'multiline':False]['text':' !! ??            unique_typo_candidate.reserve( typo_candidates.size() );','line_number':569,'multiline':False]['text':' avoid ambiguos candidate trie','line_number':572,'multiline':False]['text':' Data members','line_number':612,'multiline':False]['text':' namespace cla','line_number':619,'multiline':False]['text':' namespace runtime','line_number':620,'multiline':False]['text':' namespace boost','line_number':621,'multiline':False]['text':' BOOST_TEST_UTILS_RUNTIME_CLA_PARSER_HPP','line_number':625,'multiline':False]