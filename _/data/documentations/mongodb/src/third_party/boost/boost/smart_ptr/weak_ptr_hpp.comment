['text':'','line_number':4,'multiline':False]['text':'  weak_ptr.hpp','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Copyright (c) 2001, 2002, 2003 Peter Dimov','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Borland 5.5.1 specific workarounds','line_number':29,'multiline':False]['text':'  generated copy constructor, assignment, destructor are fine...','line_number':40,'multiline':False]['text':' ... except in C++0x, move disables the implicit copy','line_number':44,'multiline':False]['text':'','line_number':59,'multiline':False]['text':'  The "obvious" converting constructor implementation:','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'  template<class Y>','line_number':62,'multiline':False]['text':'  weak_ptr(weak_ptr<Y> const & r): px(r.px), pn(r.pn)','line_number':63,'multiline':False]['text':'  {','line_number':64,'multiline':False]['text':'  }','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':'  has a serious problem.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':'  r.px may already have been invalidated. The px(r.px)','line_number':69,'multiline':False]['text':'  conversion may require access to *r.px (virtual inheritance).','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':'  It is not possible to avoid spurious access violations since','line_number':72,'multiline':False]['text':'  in multithreaded programs r.px may be invalidated at any point.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' for better efficiency in the T == Y case','line_number':109,'multiline':False]['text':' for better efficiency in the T == Y case','line_number':116,'multiline':False]['text':' aliasing','line_number':141,'multiline':False]['text':' extension, not in std::weak_ptr','line_number':210,'multiline':False]['text':' extension, not in std::weak_ptr','line_number':215,'multiline':False]['text':' Tasteless as this may seem, making all members public allows member templates','line_number':256,'multiline':False]['text':' to work in the absence of member template friends. (Matthew Langston)','line_number':257,'multiline':False]['text':' contained pointer','line_number':268,'multiline':False]['text':' reference counter','line_number':269,'multiline':False]['text':' weak_ptr','line_number':271,'multiline':False]['text':' hash_value','line_number':289,'multiline':False]['text':' namespace boost','line_number':296,'multiline':False]['text':' std::hash, std::equal_to','line_number':298,'multiline':False]['text':' #if !defined(BOOST_NO_CXX11_HDR_FUNCTIONAL)','line_number':313,'multiline':False]['text':' namespace std','line_number':323,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_WEAK_PTR_HPP_INCLUDED','line_number':325,'multiline':False]