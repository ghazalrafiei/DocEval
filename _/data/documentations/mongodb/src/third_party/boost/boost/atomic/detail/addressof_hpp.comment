['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2018 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/addressof.hpp
 *
 * This header defines \c addressof helper function. It is similar to \c boost::addressof but it is more
 * lightweight and also contains a workaround for some compiler warnings.
 ','line_number':8,'multiline':True]['text':' Detection logic is based on boost/core/addressof.hpp','line_number':25,'multiline':False]['text':' Note: The point of using a local struct as the intermediate type instead of char is to avoid gcc warnings','line_number':50,'multiline':False]['text':' if T is a const volatile char*:','line_number':51,'multiline':False]['text':' warning: casting 'const volatile char* const' to 'const volatile char&' does not dereference pointer','line_number':52,'multiline':False]['text':' The local struct makes sure T is not related to the cast target type.','line_number':53,'multiline':False]['text':' namespace detail','line_number':59,'multiline':False]['text':' namespace atomics','line_number':60,'multiline':False]['text':' namespace boost','line_number':61,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_ADDRESSOF_HPP_INCLUDED_','line_number':65,'multiline':False]