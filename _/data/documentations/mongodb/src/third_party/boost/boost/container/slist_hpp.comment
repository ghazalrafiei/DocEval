['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2004-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':25,'multiline':False]['text':'new_allocator','line_number':27,'multiline':False]['text':' container/detail','line_number':29,'multiline':False]['text':'algo_equal(), algo_lexicographical_compare','line_number':30,'multiline':False]['text':' intrusive','line_number':38,'multiline':False]['text':' move','line_number':41,'multiline':False]['text':' move/detail','line_number':45,'multiline':False]['text':' other','line_number':51,'multiline':False]['text':' std','line_number':53,'multiline':False]['text':'namespace dtl {','line_number':102,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':104,'multiline':False]['text':'! An slist is a singly linked list: a list where each element is linked to the next','line_number':106,'multiline':False]['text':'! element, but not to the previous element. That is, it is a Sequence that','line_number':107,'multiline':False]['text':'! supports forward but not backward traversal, and (amortized) constant time','line_number':108,'multiline':False]['text':'! insertion and removal of elements. Slists, like lists, have the important','line_number':109,'multiline':False]['text':'! property that insertion and splicing do not invalidate iterators to list elements,','line_number':110,'multiline':False]['text':'! and that even removal invalidates only the iterators that point to the elements','line_number':111,'multiline':False]['text':'! that are removed. The ordering of iterators may be changed (that is,','line_number':112,'multiline':False]['text':'! slist<T>::iterator might have a different predecessor or successor after a list','line_number':113,'multiline':False]['text':'! operation than it did before), but the iterators themselves will not be invalidated','line_number':114,'multiline':False]['text':'! or made to point to different elements unless that invalidation or mutation is explicit.','line_number':115,'multiline':False]['text':'!','line_number':116,'multiline':False]['text':'! The main difference between slist and list is that list's iterators are bidirectional','line_number':117,'multiline':False]['text':'! iterators, while slist's iterators are forward iterators. This means that slist is','line_number':118,'multiline':False]['text':'! less versatile than list; frequently, however, bidirectional iterators are','line_number':119,'multiline':False]['text':'! unnecessary. You should usually use slist unless you actually need the extra','line_number':120,'multiline':False]['text':'! functionality of list, because singly linked lists are smaller and faster than double','line_number':121,'multiline':False]['text':'! linked lists.','line_number':122,'multiline':False]['text':'!','line_number':123,'multiline':False]['text':'! Important performance note: like every other Sequence, slist defines the member','line_number':124,'multiline':False]['text':'! functions insert and erase. Using these member functions carelessly, however, can','line_number':125,'multiline':False]['text':'! result in disastrously slow programs. The problem is that insert's first argument is','line_number':126,'multiline':False]['text':'! an iterator p, and that it inserts the new element(s) before p. This means that','line_number':127,'multiline':False]['text':'! insert must find the iterator just before p; this is a constant-time operation','line_number':128,'multiline':False]['text':'! for list, since list has bidirectional iterators, but for slist it must find that','line_number':129,'multiline':False]['text':'! iterator by traversing the list from the beginning up to p. In other words:','line_number':130,'multiline':False]['text':'! insert and erase are slow operations anywhere but near the beginning of the slist.','line_number':131,'multiline':False]['text':'!','line_number':132,'multiline':False]['text':'! Slist provides the member functions insert_after and erase_after, which are constant','line_number':133,'multiline':False]['text':'! time operations: you should always use insert_after and erase_after whenever','line_number':134,'multiline':False]['text':'! possible. If you find that insert_after and erase_after aren't adequate for your','line_number':135,'multiline':False]['text':'! needs, and that you often need to use insert and erase in the middle of the list,','line_number':136,'multiline':False]['text':'! then you should probably use list instead of slist.','line_number':137,'multiline':False]['text':'!','line_number':138,'multiline':False]['text':'! \tparam T The type of object that is stored in the list','line_number':139,'multiline':False]['text':'! \tparam Allocator The allocator used for all internal memory management, use void','line_number':140,'multiline':False]['text':'!   for the default allocator','line_number':141,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':171,'multiline':False]['text':'////////////////////////////////////////////','line_number':174,'multiline':False]['text':'','line_number':175,'multiline':False]['text':'                    types','line_number':176,'multiline':False]['text':'','line_number':177,'multiline':False]['text':'////////////////////////////////////////////','line_number':178,'multiline':False]['text':'////////////////////////////////////////////','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':'          constructFr/copy/destroy','line_number':196,'multiline':False]['text':'','line_number':197,'multiline':False]['text':'////////////////////////////////////////////','line_number':198,'multiline':False]['text':'! <b>Effects</b>: Constructs a list taking the allocator as parameter.','line_number':200,'multiline':False]['text':'!','line_number':201,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':202,'multiline':False]['text':'!','line_number':203,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':204,'multiline':False]['text':'! <b>Effects</b>: Constructs a list taking the allocator as parameter.','line_number':209,'multiline':False]['text':'!','line_number':210,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':211,'multiline':False]['text':'!','line_number':212,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':213,'multiline':False]['text':'! <b>Effects</b>: Constructs a list','line_number':218,'multiline':False]['text':'!   and inserts n value-initialized value_types.','line_number':219,'multiline':False]['text':'!','line_number':220,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':221,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':222,'multiline':False]['text':'!','line_number':223,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':224,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':229,'multiline':False]['text':'!   and inserts n copies of value.','line_number':230,'multiline':False]['text':'!','line_number':231,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':232,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':233,'multiline':False]['text':'!','line_number':234,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':235,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':240,'multiline':False]['text':'!   and inserts n copies of value.','line_number':241,'multiline':False]['text':'!','line_number':242,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':243,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':244,'multiline':False]['text':'!','line_number':245,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':246,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':251,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the list.','line_number':252,'multiline':False]['text':'!','line_number':253,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':254,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':255,'multiline':False]['text':'!','line_number':256,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':257,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':264,'multiline':False]['text':'!   and inserts a copy of the range [il.begin(), il.end()) in the list.','line_number':265,'multiline':False]['text':'!','line_number':266,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':267,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced std::initializer_list iterator throws.','line_number':268,'multiline':False]['text':'!','line_number':269,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':270,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a list.','line_number':276,'multiline':False]['text':'!','line_number':277,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':278,'multiline':False]['text':'!','line_number':279,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':280,'multiline':False]['text':'!','line_number':281,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':282,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':287,'multiline':False]['text':'!','line_number':288,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':289,'multiline':False]['text':'!','line_number':290,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':291,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a list using the specified allocator.','line_number':296,'multiline':False]['text':'!','line_number':297,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':298,'multiline':False]['text':'!','line_number':299,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':300,'multiline':False]['text':'!','line_number':301,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':302,'multiline':False]['text':'! <b>Effects</b>: Move constructor using the specified allocator.','line_number':307,'multiline':False]['text':'!                 Moves x's resources to *this.','line_number':308,'multiline':False]['text':'!','line_number':309,'multiline':False]['text':'! <b>Throws</b>: If allocation or value_type's copy constructor throws.','line_number':310,'multiline':False]['text':'!','line_number':311,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':312,'multiline':False]['text':'! <b>Effects</b>: Destroys the list. All stored values are destroyed','line_number':325,'multiline':False]['text':'!   and used memory is deallocated.','line_number':326,'multiline':False]['text':'!','line_number':327,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':328,'multiline':False]['text':'!','line_number':329,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements.','line_number':330,'multiline':False]['text':'AllocHolder clears the slist','line_number':332,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':334,'multiline':False]['text':'!','line_number':335,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':336,'multiline':False]['text':'! of each of x's elements.','line_number':337,'multiline':False]['text':'!','line_number':338,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':339,'multiline':False]['text':'!','line_number':340,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':341,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':358,'multiline':False]['text':'!','line_number':359,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':360,'multiline':False]['text':'! of each of x's elements.','line_number':361,'multiline':False]['text':'!','line_number':362,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':363,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':364,'multiline':False]['text':'!','line_number':365,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':366,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':367,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':368,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':380,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':381,'multiline':False]['text':'Destroy','line_number':383,'multiline':False]['text':'Move allocator if needed','line_number':385,'multiline':False]['text':'Obtain resources','line_number':387,'multiline':False]['text':'Else do a one by one move','line_number':390,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as in il.','line_number':400,'multiline':False]['text':'!','line_number':401,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == il.size(). *this contains a copy','line_number':402,'multiline':False]['text':'! of each of il's elements.','line_number':403,'multiline':False]['text':'!','line_number':404,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':405,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':406,'multiline':False]['text':'! <b>Effects</b>: Assigns the n copies of val to *this.','line_number':414,'multiline':False]['text':'!','line_number':415,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':416,'multiline':False]['text':'!','line_number':417,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':418,'multiline':False]['text':'! <b>Effects</b>: Assigns the range [first, last) to *this.','line_number':425,'multiline':False]['text':'!','line_number':426,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':427,'multiline':False]['text':'!   T's constructor from dereferencing InpIt throws.','line_number':428,'multiline':False]['text':'!','line_number':429,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':430,'multiline':False]['text':'! <b>Effects</b>: Assigns the range [il.begin(), il.end()) to *this.','line_number':454,'multiline':False]['text':'!','line_number':455,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':456,'multiline':False]['text':'!   T's constructor from dereferencing std::initializer_list iterator throws.','line_number':457,'multiline':False]['text':'!','line_number':458,'multiline':False]['text':'! <b>Complexity</b>: Linear to range [il.begin(), il.end()).','line_number':459,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':466,'multiline':False]['text':'!','line_number':467,'multiline':False]['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':468,'multiline':False]['text':'!','line_number':469,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':470,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':475,'multiline':False]['text':'!','line_number':476,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':477,'multiline':False]['text':'!','line_number':478,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':479,'multiline':False]['text':'!','line_number':480,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':481,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':486,'multiline':False]['text':'!','line_number':487,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':490,'multiline':False]['text':'!','line_number':491,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':492,'multiline':False]['text':'////////////////////////////////////////////','line_number':497,'multiline':False]['text':'','line_number':498,'multiline':False]['text':'                iterators','line_number':499,'multiline':False]['text':'','line_number':500,'multiline':False]['text':'////////////////////////////////////////////','line_number':501,'multiline':False]['text':'! <b>Effects</b>: Returns a non-dereferenceable iterator that,','line_number':503,'multiline':False]['text':'! when incremented, yields begin().  This iterator may be used','line_number':504,'multiline':False]['text':'! as the argument to insert_after, erase_after, etc.','line_number':505,'multiline':False]['text':'!','line_number':506,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':507,'multiline':False]['text':'!','line_number':508,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':509,'multiline':False]['text':'! <b>Effects</b>: Returns a non-dereferenceable const_iterator','line_number':514,'multiline':False]['text':'! that, when incremented, yields begin().  This iterator may be used','line_number':515,'multiline':False]['text':'! as the argument to insert_after, erase_after, etc.','line_number':516,'multiline':False]['text':'!','line_number':517,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':518,'multiline':False]['text':'!','line_number':519,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':520,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the list.','line_number':525,'multiline':False]['text':'!','line_number':526,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':527,'multiline':False]['text':'!','line_number':528,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':529,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':534,'multiline':False]['text':'!','line_number':535,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':536,'multiline':False]['text':'!','line_number':537,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':538,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the list.','line_number':543,'multiline':False]['text':'!','line_number':544,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':545,'multiline':False]['text':'!','line_number':546,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':547,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':552,'multiline':False]['text':'!','line_number':553,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':554,'multiline':False]['text':'!','line_number':555,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':556,'multiline':False]['text':'! <b>Effects</b>: Returns a non-dereferenceable const_iterator','line_number':561,'multiline':False]['text':'! that, when incremented, yields begin().  This iterator may be used','line_number':562,'multiline':False]['text':'! as the argument to insert_after, erase_after, etc.','line_number':563,'multiline':False]['text':'!','line_number':564,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':565,'multiline':False]['text':'!','line_number':566,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':567,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':572,'multiline':False]['text':'!','line_number':573,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':574,'multiline':False]['text':'!','line_number':575,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':576,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':581,'multiline':False]['text':'!','line_number':582,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':583,'multiline':False]['text':'!','line_number':584,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':585,'multiline':False]['text':'! <b>Returns</b>: The iterator to the element before i in the sequence.','line_number':590,'multiline':False]['text':'!   Returns the end-iterator, if either i is the begin-iterator or the','line_number':591,'multiline':False]['text':'!   sequence is empty.','line_number':592,'multiline':False]['text':'!','line_number':593,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':594,'multiline':False]['text':'!','line_number':595,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':596,'multiline':False]['text':'!','line_number':597,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':598,'multiline':False]['text':'! <b>Returns</b>: The const_iterator to the element before i in the sequence.','line_number':603,'multiline':False]['text':'!   Returns the end-const_iterator, if either i is the begin-const_iterator or','line_number':604,'multiline':False]['text':'!   the sequence is empty.','line_number':605,'multiline':False]['text':'!','line_number':606,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':607,'multiline':False]['text':'!','line_number':608,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before i.','line_number':609,'multiline':False]['text':'!','line_number':610,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':611,'multiline':False]['text':'////////////////////////////////////////////','line_number':616,'multiline':False]['text':'','line_number':617,'multiline':False]['text':'                capacity','line_number':618,'multiline':False]['text':'','line_number':619,'multiline':False]['text':'////////////////////////////////////////////','line_number':620,'multiline':False]['text':'! <b>Effects</b>: Returns true if the list contains no elements.','line_number':622,'multiline':False]['text':'!','line_number':623,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':624,'multiline':False]['text':'!','line_number':625,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':626,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the list.','line_number':631,'multiline':False]['text':'!','line_number':632,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':633,'multiline':False]['text':'!','line_number':634,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':635,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the list.','line_number':640,'multiline':False]['text':'!','line_number':641,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':642,'multiline':False]['text':'!','line_number':643,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':644,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':649,'multiline':False]['text':'!   the size becomes n. New elements are value initialized.','line_number':650,'multiline':False]['text':'!','line_number':651,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':652,'multiline':False]['text':'!','line_number':653,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':654,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':664,'multiline':False]['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':665,'multiline':False]['text':'!','line_number':666,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':667,'multiline':False]['text':'!','line_number':668,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':669,'multiline':False]['text':'////////////////////////////////////////////','line_number':678,'multiline':False]['text':'','line_number':679,'multiline':False]['text':'               element access','line_number':680,'multiline':False]['text':'','line_number':681,'multiline':False]['text':'////////////////////////////////////////////','line_number':682,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':684,'multiline':False]['text':'!','line_number':685,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first element','line_number':686,'multiline':False]['text':'!   from the beginning of the container.','line_number':687,'multiline':False]['text':'!','line_number':688,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':689,'multiline':False]['text':'!','line_number':690,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':691,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':699,'multiline':False]['text':'!','line_number':700,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first element','line_number':701,'multiline':False]['text':'!   from the beginning of the container.','line_number':702,'multiline':False]['text':'!','line_number':703,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':704,'multiline':False]['text':'!','line_number':705,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':706,'multiline':False]['text':'////////////////////////////////////////////','line_number':714,'multiline':False]['text':'','line_number':715,'multiline':False]['text':'                modifiers','line_number':716,'multiline':False]['text':'','line_number':717,'multiline':False]['text':'////////////////////////////////////////////','line_number':718,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':722,'multiline':False]['text':'!   std::forward<Args>(args)... in the front of the list','line_number':723,'multiline':False]['text':'!','line_number':724,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':725,'multiline':False]['text':'!','line_number':726,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':727,'multiline':False]['text':'!   T's copy constructor throws.','line_number':728,'multiline':False]['text':'!','line_number':729,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':730,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':735,'multiline':False]['text':'!   std::forward<Args>(args)... after prev','line_number':736,'multiline':False]['text':'!','line_number':737,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':738,'multiline':False]['text':'!   T's in-place constructor throws.','line_number':739,'multiline':False]['text':'!','line_number':740,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':741,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':749,'multiline':False]['text':'','line_number':762,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':766,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the beginning of the list.','line_number':769,'multiline':False]['text':'!','line_number':770,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':771,'multiline':False]['text':'!   T's copy constructor throws.','line_number':772,'multiline':False]['text':'!','line_number':773,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':774,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the beginning of the list','line_number':777,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':778,'multiline':False]['text':'!','line_number':779,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':780,'multiline':False]['text':'!','line_number':781,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':782,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':790,'multiline':False]['text':'!','line_number':791,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of the value after prev_p.','line_number':792,'multiline':False]['text':'!','line_number':793,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted element.','line_number':794,'multiline':False]['text':'!','line_number':795,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':796,'multiline':False]['text':'!','line_number':797,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':798,'multiline':False]['text':'!','line_number':799,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references of','line_number':800,'multiline':False]['text':'!   previous values.','line_number':801,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of *this.','line_number':804,'multiline':False]['text':'!','line_number':805,'multiline':False]['text':'! <b>Effects</b>: Inserts a move constructed copy object from the value after the','line_number':806,'multiline':False]['text':'!    element pointed by prev_p.','line_number':807,'multiline':False]['text':'!','line_number':808,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted element.','line_number':809,'multiline':False]['text':'!','line_number':810,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':811,'multiline':False]['text':'!','line_number':812,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':813,'multiline':False]['text':'!','line_number':814,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references of','line_number':815,'multiline':False]['text':'!   previous values.','line_number':816,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of *this.','line_number':822,'multiline':False]['text':'!','line_number':823,'multiline':False]['text':'! <b>Effects</b>: Inserts n copies of x after prev_p.','line_number':824,'multiline':False]['text':'!','line_number':825,'multiline':False]['text':'! <b>Returns</b>: an iterator to the last inserted element or prev_p if n is 0.','line_number':826,'multiline':False]['text':'!','line_number':827,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':828,'multiline':False]['text':'!','line_number':829,'multiline':False]['text':'!','line_number':830,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':831,'multiline':False]['text':'!','line_number':832,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references of','line_number':833,'multiline':False]['text':'!   previous values.','line_number':834,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of *this.','line_number':841,'multiline':False]['text':'!','line_number':842,'multiline':False]['text':'! <b>Effects</b>: Inserts the range pointed by [first, last) after prev_p.','line_number':843,'multiline':False]['text':'!','line_number':844,'multiline':False]['text':'! <b>Returns</b>: an iterator to the last inserted element or prev_p if first == last.','line_number':845,'multiline':False]['text':'!','line_number':846,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':847,'multiline':False]['text':'!   dereferenced InpIt throws.','line_number':848,'multiline':False]['text':'!','line_number':849,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted.','line_number':850,'multiline':False]['text':'!','line_number':851,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references of','line_number':852,'multiline':False]['text':'!   previous values.','line_number':853,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of *this.','line_number':874,'multiline':False]['text':'!','line_number':875,'multiline':False]['text':'! <b>Effects</b>: Inserts the range pointed by [il.begin(), il.end()) after prev_p.','line_number':876,'multiline':False]['text':'!','line_number':877,'multiline':False]['text':'! <b>Returns</b>: an iterator to the last inserted element or prev_p if il.begin() == il.end().','line_number':878,'multiline':False]['text':'!','line_number':879,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':880,'multiline':False]['text':'!   dereferenced std::initializer_list iterator throws.','line_number':881,'multiline':False]['text':'!','line_number':882,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements inserted.','line_number':883,'multiline':False]['text':'!','line_number':884,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references of','line_number':885,'multiline':False]['text':'!   previous values.','line_number':886,'multiline':False]['text':'Optimized allocation and construction','line_number':903,'multiline':False]['text':'! <b>Effects</b>: Removes the first element from the list.','line_number':910,'multiline':False]['text':'!','line_number':911,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':912,'multiline':False]['text':'!','line_number':913,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':914,'multiline':False]['text':'! <b>Effects</b>: Erases the element after the element pointed by prev_p','line_number':921,'multiline':False]['text':'!    of the list.','line_number':922,'multiline':False]['text':'!','line_number':923,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':924,'multiline':False]['text':'!   or end() if no such element exists.','line_number':925,'multiline':False]['text':'!','line_number':926,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':927,'multiline':False]['text':'!','line_number':928,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':929,'multiline':False]['text':'!','line_number':930,'multiline':False]['text':'! <b>Note</b>: Does not invalidate iterators or references to non erased elements.','line_number':931,'multiline':False]['text':'! <b>Effects</b>: Erases the range (before_first, last) from','line_number':937,'multiline':False]['text':'!   the list.','line_number':938,'multiline':False]['text':'!','line_number':939,'multiline':False]['text':'! <b>Returns</b>: the first element remaining beyond the removed elements,','line_number':940,'multiline':False]['text':'!   or end() if no such element exists.','line_number':941,'multiline':False]['text':'!','line_number':942,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':943,'multiline':False]['text':'!','line_number':944,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of erased elements.','line_number':945,'multiline':False]['text':'!','line_number':946,'multiline':False]['text':'! <b>Note</b>: Does not invalidate iterators or references to non erased elements.','line_number':947,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':953,'multiline':False]['text':'!','line_number':954,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':955,'multiline':False]['text':'!','line_number':956,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements on *this and x.','line_number':957,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the list.','line_number':968,'multiline':False]['text':'!','line_number':969,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':970,'multiline':False]['text':'!','line_number':971,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the list.','line_number':972,'multiline':False]['text':'////////////////////////////////////////////','line_number':976,'multiline':False]['text':'','line_number':977,'multiline':False]['text':'              slist operations','line_number':978,'multiline':False]['text':'','line_number':979,'multiline':False]['text':'////////////////////////////////////////////','line_number':980,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':982,'multiline':False]['text':'!   by the list. x != *this','line_number':983,'multiline':False]['text':'!','line_number':984,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, after the','line_number':985,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':986,'multiline':False]['text':'!','line_number':987,'multiline':False]['text':'! <b>Throws</b>: runtime_error if this' allocator and x's allocator','line_number':988,'multiline':False]['text':'!   are not equal.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements in x.','line_number':991,'multiline':False]['text':'!','line_number':992,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':993,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':994,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1002,'multiline':False]['text':'!   by the list. x != *this','line_number':1003,'multiline':False]['text':'!','line_number':1004,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, after the','line_number':1005,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':1006,'multiline':False]['text':'!','line_number':1007,'multiline':False]['text':'! <b>Throws</b>: runtime_error if this' allocator and x's allocator','line_number':1008,'multiline':False]['text':'!   are not equal.','line_number':1009,'multiline':False]['text':'!','line_number':1010,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements in x.','line_number':1011,'multiline':False]['text':'!','line_number':1012,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':1013,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':1014,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1018,'multiline':False]['text':'!   i must point to an element contained in list x.','line_number':1019,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1020,'multiline':False]['text':'!','line_number':1021,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1022,'multiline':False]['text':'!   after the element pointed by prev_p.','line_number':1023,'multiline':False]['text':'!   If prev_p == prev or prev_p == ++prev, this function is a null operation.','line_number':1024,'multiline':False]['text':'!','line_number':1025,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1026,'multiline':False]['text':'!','line_number':1027,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1028,'multiline':False]['text':'!','line_number':1029,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1030,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1031,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1038,'multiline':False]['text':'!   i must point to an element contained in list x.','line_number':1039,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1040,'multiline':False]['text':'!','line_number':1041,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1042,'multiline':False]['text':'!   after the element pointed by prev_p.','line_number':1043,'multiline':False]['text':'!   If prev_p == prev or prev_p == ++prev, this function is a null operation.','line_number':1044,'multiline':False]['text':'!','line_number':1045,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1046,'multiline':False]['text':'!','line_number':1047,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1048,'multiline':False]['text':'!','line_number':1049,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1050,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1051,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1055,'multiline':False]['text':'!   before_first and before_last must be valid iterators of x.','line_number':1056,'multiline':False]['text':'!   prev_p must not be contained in [before_first, before_last) range.','line_number':1057,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1058,'multiline':False]['text':'!','line_number':1059,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [before_first + 1, before_last + 1)','line_number':1060,'multiline':False]['text':'!   from list x to this list, after the element pointed by prev_p.','line_number':1061,'multiline':False]['text':'!','line_number':1062,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1063,'multiline':False]['text':'!','line_number':1064,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of transferred elements.','line_number':1065,'multiline':False]['text':'!','line_number':1066,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1067,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1068,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1077,'multiline':False]['text':'!   before_first and before_last must be valid iterators of x.','line_number':1078,'multiline':False]['text':'!   prev_p must not be contained in [before_first, before_last) range.','line_number':1079,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1080,'multiline':False]['text':'!','line_number':1081,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [before_first + 1, before_last + 1)','line_number':1082,'multiline':False]['text':'!   from list x to this list, after the element pointed by prev_p.','line_number':1083,'multiline':False]['text':'!','line_number':1084,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1085,'multiline':False]['text':'!','line_number':1086,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of transferred elements.','line_number':1087,'multiline':False]['text':'!','line_number':1088,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1089,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1090,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1095,'multiline':False]['text':'!   before_first and before_last must be valid iterators of x.','line_number':1096,'multiline':False]['text':'!   prev_p must not be contained in [before_first, before_last) range.','line_number':1097,'multiline':False]['text':'!   n == distance(before_first, before_last).','line_number':1098,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1099,'multiline':False]['text':'!','line_number':1100,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [before_first + 1, before_last + 1)','line_number':1101,'multiline':False]['text':'!   from list x to this list, after the element pointed by prev_p.','line_number':1102,'multiline':False]['text':'!','line_number':1103,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1104,'multiline':False]['text':'!','line_number':1105,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1106,'multiline':False]['text':'!','line_number':1107,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1108,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1109,'multiline':False]['text':'! <b>Requires</b>: prev_p must be a valid iterator of this.','line_number':1119,'multiline':False]['text':'!   before_first and before_last must be valid iterators of x.','line_number':1120,'multiline':False]['text':'!   prev_p must not be contained in [before_first, before_last) range.','line_number':1121,'multiline':False]['text':'!   n == distance(before_first, before_last).','line_number':1122,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1123,'multiline':False]['text':'!','line_number':1124,'multiline':False]['text':'! <b>Effects</b>: Transfers the range [before_first + 1, before_last + 1)','line_number':1125,'multiline':False]['text':'!   from list x to this list, after the element pointed by prev_p.','line_number':1126,'multiline':False]['text':'!','line_number':1127,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1128,'multiline':False]['text':'!','line_number':1129,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1130,'multiline':False]['text':'!','line_number':1131,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1132,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1133,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1139,'multiline':False]['text':'!','line_number':1140,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1141,'multiline':False]['text':'!','line_number':1142,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1143,'multiline':False]['text':'!','line_number':1144,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1145,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1146,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1150,'multiline':False]['text':'!   predicate is satisfied.','line_number':1151,'multiline':False]['text':'!','line_number':1152,'multiline':False]['text':'! <b>Throws</b>: If pred throws.','line_number':1153,'multiline':False]['text':'!','line_number':1154,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() calls to the predicate.','line_number':1155,'multiline':False]['text':'!','line_number':1156,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1157,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1158,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1166,'multiline':False]['text':'!   elements that are equal from the list.','line_number':1167,'multiline':False]['text':'!','line_number':1168,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1169,'multiline':False]['text':'!','line_number':1170,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons equality comparisons).','line_number':1171,'multiline':False]['text':'!','line_number':1172,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1173,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1174,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1178,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1179,'multiline':False]['text':'!','line_number':1180,'multiline':False]['text':'! <b>Throws</b>: If pred throws.','line_number':1181,'multiline':False]['text':'!','line_number':1182,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons calls to pred()).','line_number':1183,'multiline':False]['text':'!','line_number':1184,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1185,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1186,'multiline':False]['text':'! <b>Requires</b>: The lists x and *this must be distinct.','line_number':1194,'multiline':False]['text':'!','line_number':1195,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1196,'multiline':False]['text':'!   in order into *this according to std::less<value_type>. The merge is stable;','line_number':1197,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1198,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1199,'multiline':False]['text':'!','line_number':1200,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1201,'multiline':False]['text':'!','line_number':1202,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1203,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1204,'multiline':False]['text':'! <b>Requires</b>: The lists x and *this must be distinct.','line_number':1208,'multiline':False]['text':'!','line_number':1209,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1210,'multiline':False]['text':'!   in order into *this according to std::less<value_type>. The merge is stable;','line_number':1211,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1212,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1213,'multiline':False]['text':'!','line_number':1214,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1215,'multiline':False]['text':'!','line_number':1216,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1217,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1218,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1222,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1223,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1224,'multiline':False]['text':'!','line_number':1225,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1226,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1227,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1228,'multiline':False]['text':'!','line_number':1229,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1230,'multiline':False]['text':'!','line_number':1231,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1232,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1233,'multiline':False]['text':'!','line_number':1234,'multiline':False]['text':'! <b>Note</b>: Iterators and references to *this are not invalidated.','line_number':1235,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1244,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1245,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1246,'multiline':False]['text':'!','line_number':1247,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1248,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1249,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1250,'multiline':False]['text':'!','line_number':1251,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1252,'multiline':False]['text':'!','line_number':1253,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1254,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1255,'multiline':False]['text':'!','line_number':1256,'multiline':False]['text':'! <b>Note</b>: Iterators and references to *this are not invalidated.','line_number':1257,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to std::less<value_type>.','line_number':1262,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':1263,'multiline':False]['text':'!','line_number':1264,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1265,'multiline':False]['text':'!','line_number':1266,'multiline':False]['text':'! <b>Notes</b>: Iterators and references are not invalidated.','line_number':1267,'multiline':False]['text':'!','line_number':1268,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1269,'multiline':False]['text':'!   is the list's size.','line_number':1270,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to std::less<value_type>.','line_number':1274,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':1275,'multiline':False]['text':'!','line_number':1276,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1277,'multiline':False]['text':'!','line_number':1278,'multiline':False]['text':'! <b>Notes</b>: Iterators and references are not invalidated.','line_number':1279,'multiline':False]['text':'!','line_number':1280,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1281,'multiline':False]['text':'!   is the list's size.','line_number':1282,'multiline':False]['text':' nothing if the slist has length 0 or 1.','line_number':1287,'multiline':False]['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':1293,'multiline':False]['text':'!','line_number':1294,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1295,'multiline':False]['text':'!','line_number':1296,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time.','line_number':1297,'multiline':False]['text':'!','line_number':1298,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1299,'multiline':False]['text':'////////////////////////////////////////////','line_number':1303,'multiline':False]['text':'','line_number':1304,'multiline':False]['text':'       list compatibility interface','line_number':1305,'multiline':False]['text':'','line_number':1306,'multiline':False]['text':'////////////////////////////////////////////','line_number':1307,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1311,'multiline':False]['text':'!   std::forward<Args>(args)... before p','line_number':1312,'multiline':False]['text':'!','line_number':1313,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1314,'multiline':False]['text':'!   T's in-place constructor throws.','line_number':1315,'multiline':False]['text':'!','line_number':1316,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before p','line_number':1317,'multiline':False]['text':'','line_number':1330,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1334,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1337,'multiline':False]['text':'!','line_number':1338,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of x before p.','line_number':1339,'multiline':False]['text':'!','line_number':1340,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':1341,'multiline':False]['text':'!','line_number':1342,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or x's copy constructor throws.','line_number':1343,'multiline':False]['text':'!','line_number':1344,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before p.','line_number':1345,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1348,'multiline':False]['text':'!','line_number':1349,'multiline':False]['text':'! <b>Effects</b>: Insert a new element before p with x's resources.','line_number':1350,'multiline':False]['text':'!','line_number':1351,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':1352,'multiline':False]['text':'!','line_number':1353,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1354,'multiline':False]['text':'!','line_number':1355,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements before p.','line_number':1356,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1362,'multiline':False]['text':'!','line_number':1363,'multiline':False]['text':'! <b>Effects</b>: Inserts n copies of x before p.','line_number':1364,'multiline':False]['text':'!','line_number':1365,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if n == 0.','line_number':1366,'multiline':False]['text':'!','line_number':1367,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':1368,'multiline':False]['text':'!','line_number':1369,'multiline':False]['text':'! <b>Complexity</b>: Linear to n plus linear to the elements before p.','line_number':1370,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1378,'multiline':False]['text':'!','line_number':1379,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before p.','line_number':1380,'multiline':False]['text':'!','line_number':1381,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if first == last.','line_number':1382,'multiline':False]['text':'!','line_number':1383,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1384,'multiline':False]['text':'!   dereferenced InpIt throws.','line_number':1385,'multiline':False]['text':'!','line_number':1386,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [first, last) plus','line_number':1387,'multiline':False]['text':'!    linear to the elements before p.','line_number':1388,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1398,'multiline':False]['text':'!','line_number':1399,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [il.begin(), il.end()) range before p.','line_number':1400,'multiline':False]['text':'!','line_number':1401,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if il.begin() == il.end().','line_number':1402,'multiline':False]['text':'!','line_number':1403,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1404,'multiline':False]['text':'!   dereferenced std::initializer_list iterator throws.','line_number':1405,'multiline':False]['text':'!','line_number':1406,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()) plus','line_number':1407,'multiline':False]['text':'!    linear to the elements before p.','line_number':1408,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1415,'multiline':False]['text':'!','line_number':1416,'multiline':False]['text':'! <b>Effects</b>: Erases the element at p.','line_number':1417,'multiline':False]['text':'!','line_number':1418,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1419,'multiline':False]['text':'!','line_number':1420,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements before p.','line_number':1421,'multiline':False]['text':'! <b>Requires</b>: first and last must be valid iterator to elements in *this.','line_number':1425,'multiline':False]['text':'!','line_number':1426,'multiline':False]['text':'! <b>Effects</b>: Erases the elements pointed by [first, last).','line_number':1427,'multiline':False]['text':'!','line_number':1428,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1429,'multiline':False]['text':'!','line_number':1430,'multiline':False]['text':'! <b>Complexity</b>: Linear to the distance between first and last plus','line_number':1431,'multiline':False]['text':'!   linear to the elements before first.','line_number':1432,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1436,'multiline':False]['text':'!   by the list. x != *this. this' allocator and x's allocator shall compare equal','line_number':1437,'multiline':False]['text':'!','line_number':1438,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':1439,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':1440,'multiline':False]['text':'!','line_number':1441,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1442,'multiline':False]['text':'!','line_number':1443,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), and linear in x.size().','line_number':1444,'multiline':False]['text':'!','line_number':1445,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':1446,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':1447,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1451,'multiline':False]['text':'!   by the list. x != *this. this' allocator and x's allocator shall compare equal','line_number':1452,'multiline':False]['text':'!','line_number':1453,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':1454,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':1455,'multiline':False]['text':'!','line_number':1456,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1457,'multiline':False]['text':'!','line_number':1458,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), and linear in x.size().','line_number':1459,'multiline':False]['text':'!','line_number':1460,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':1461,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':1462,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1466,'multiline':False]['text':'!   by this list. i must point to an element contained in list x.','line_number':1467,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal','line_number':1468,'multiline':False]['text':'!','line_number':1469,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1470,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1471,'multiline':False]['text':'!   If p == i or p == ++i, this function is a null operation.','line_number':1472,'multiline':False]['text':'!','line_number':1473,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1474,'multiline':False]['text':'!','line_number':1475,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), and in distance(x.begin(), i).','line_number':1476,'multiline':False]['text':'!','line_number':1477,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1478,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1479,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1483,'multiline':False]['text':'!   by this list. i must point to an element contained in list x.','line_number':1484,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1485,'multiline':False]['text':'!','line_number':1486,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1487,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1488,'multiline':False]['text':'!   If p == i or p == ++i, this function is a null operation.','line_number':1489,'multiline':False]['text':'!','line_number':1490,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1491,'multiline':False]['text':'!','line_number':1492,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), and in distance(x.begin(), i).','line_number':1493,'multiline':False]['text':'!','line_number':1494,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1495,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1496,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1500,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1501,'multiline':False]['text':'!','line_number':1502,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1503,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1504,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1505,'multiline':False]['text':'!','line_number':1506,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1507,'multiline':False]['text':'!','line_number':1508,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), in distance(x.begin(), first),','line_number':1509,'multiline':False]['text':'!   and in distance(first, last).','line_number':1510,'multiline':False]['text':'!','line_number':1511,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1512,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1513,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1517,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1518,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal','line_number':1519,'multiline':False]['text':'!','line_number':1520,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1521,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1522,'multiline':False]['text':'!','line_number':1523,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1524,'multiline':False]['text':'!','line_number':1525,'multiline':False]['text':'! <b>Complexity</b>: Linear in distance(begin(), p), in distance(x.begin(), first),','line_number':1526,'multiline':False]['text':'!   and in distance(first, last).','line_number':1527,'multiline':False]['text':'!','line_number':1528,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1529,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1530,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1534,'multiline':False]['text':'!','line_number':1535,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1536,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1540,'multiline':False]['text':'!','line_number':1541,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1542,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1547,'multiline':False]['text':'!','line_number':1548,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1549,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1554,'multiline':False]['text':'!','line_number':1555,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1556,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1561,'multiline':False]['text':'!','line_number':1562,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1563,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1568,'multiline':False]['text':'!','line_number':1569,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1570,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1575,'multiline':False]['text':'!','line_number':1576,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1577,'multiline':False]['text':'Functors for member algorithm defaults','line_number':1639,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1643,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1664,'multiline':False]['text':'!specialization for optimizations','line_number':1665,'multiline':False]['text':'namespace boost{  namespace container {','line_number':1677,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1679,'multiline':False]['text':' Specialization of insert_iterator so that insertions will be constant','line_number':1681,'multiline':False]['text':' time rather than linear time.','line_number':1682,'multiline':False]['text':'! A specialization of insert_iterator','line_number':1687,'multiline':False]['text':'! that works with slist','line_number':1688,'multiline':False]['text':' BOOST_CONTAINER_SLIST_HPP','line_number':1726,'multiline':False]