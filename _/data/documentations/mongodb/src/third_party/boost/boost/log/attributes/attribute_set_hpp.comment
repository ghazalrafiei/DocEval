['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   attribute_set.hpp
 * \author Andrey Semashev
 * \date   08.03.2007
 *
 * This header contains definition of the attribute set container.
 ','line_number':7,'multiline':True]['text':'! Reference proxy object to implement \c operator[]','line_number':43,'multiline':False]['text':'! Key type','line_number':47,'multiline':False]['text':'! Mapped attribute type','line_number':49,'multiline':False]['text':'! Constructor','line_number':57,'multiline':False]['text':'! Conversion operator (would be invoked in case of reading from the container)','line_number':64,'multiline':False]['text':'! Assignment operator (would be invoked in case of writing to the container)','line_number':69,'multiline':False]['text':'! Reads the referenced mapped value from the container','line_number':73,'multiline':False]['text':' namespace aux','line_number':77,'multiline':False]['text':'!
 * \brief An attribute set class.
 *
 * An attribute set is an associative container with attribute name as a key and
 * pointer to the attribute as a mapped value. The container allows storing only one element for each distinct
 * key value. In most regards attribute set container provides interface similar to \c std::unordered_map.
 * However, there are differences in \c operator[] semantics and a number of optimizations with regard to iteration.
 * Besides, attribute names are stored as a read-only <tt>attribute_name</tt>'s instead of \c std::string,
 * which saves memory and CPU time.
 ','line_number':79,'multiline':True]['text':'! Key type','line_number':97,'multiline':False]['text':'! Mapped attribute type','line_number':99,'multiline':False]['text':'! Value type','line_number':102,'multiline':False]['text':'! Reference type','line_number':104,'multiline':False]['text':'! Const reference type','line_number':106,'multiline':False]['text':'! Pointer type','line_number':108,'multiline':False]['text':'! Const pointer type','line_number':110,'multiline':False]['text':'! Size type','line_number':112,'multiline':False]['text':'! Difference type','line_number':114,'multiline':False]['text':'! \cond','line_number':118,'multiline':False]['text':'! Implementation','line_number':120,'multiline':False]['text':'! A base class for the container nodes','line_number':124,'multiline':False]['text':'! Container elements','line_number':136,'multiline':False]['text':'! Iterator class','line_number':147,'multiline':False]['text':'  Standard typedefs','line_number':159,'multiline':False]['text':'  Constructors','line_number':175,'multiline':False]['text':'! Assignment','line_number':189,'multiline':False]['text':'  Comparison','line_number':197,'multiline':False]['text':'  Modification','line_number':203,'multiline':False]['text':'  Dereferencing','line_number':227,'multiline':False]['text':'! \endcond','line_number':237,'multiline':False]['text':'! Iterator type','line_number':241,'multiline':False]['text':'! Const iterator type','line_number':243,'multiline':False]['text':'!
     * Iterator type. The iterator complies to the bidirectional iterator requirements.
     ','line_number':246,'multiline':True]['text':'!
     * Constant iterator type. The iterator complies to the bidirectional iterator requirements with read-only capabilities.
     ','line_number':250,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':254,'multiline':False]['text':'! Pointer to implementation','line_number':257,'multiline':False]['text':'!
     * Default constructor.
     *
     * \post <tt>empty() == true</tt>
     ','line_number':261,'multiline':True]['text':'!
     * Copy constructor.
     *
     * \post <tt>size() == that.size() && std::equal(begin(), end(), that.begin()) == true</tt>
     ','line_number':268,'multiline':True]['text':'!
     * Move constructor
     ','line_number':275,'multiline':True]['text':'!
     * Destructor. All stored references to attributes are released.
     ','line_number':283,'multiline':True]['text':'!
     * Copy assignment operator.
     *
     * \post <tt>size() == that.size() && std::equal(begin(), end(), that.begin()) == true</tt>
     ','line_number':288,'multiline':True]['text':'!
     * Swaps two instances of the container.
     *
     * \b Throws: Nothing.
     ','line_number':299,'multiline':True]['text':'!
     * \return Iterator to the first element of the container.
     ','line_number':311,'multiline':True]['text':'!
     * \return Iterator to the after-the-last element of the container.
     ','line_number':315,'multiline':True]['text':'!
     * \return Constant iterator to the first element of the container.
     ','line_number':319,'multiline':True]['text':'!
     * \return Constant iterator to the after-the-last element of the container.
     ','line_number':323,'multiline':True]['text':'!
     * \return Number of elements in the container.
     ','line_number':328,'multiline':True]['text':'!
     * \return true if there are no elements in the container, false otherwise.
     ','line_number':332,'multiline':True]['text':'!
     * The method finds the attribute by name.
     *
     * \param key Attribute name.
     * \return Iterator to the found element or end() if the attribute with such name is not found.
     ','line_number':337,'multiline':True]['text':'!
     * The method finds the attribute by name.
     *
     * \param key Attribute name.
     * \return Iterator to the found element or \c end() if the attribute with such name is not found.
     ','line_number':344,'multiline':True]['text':'!
     * The method counts the number of the attribute occurrences in the container. Since there can be only one
     * attribute with a particular key, the method always return 0 or 1.
     *
     * \param key Attribute name.
     * \return The number of times the attribute is found in the container.
     ','line_number':354,'multiline':True]['text':'!
     * Combined lookup/insertion operator. The operator semantics depends on the further usage of the returned reference.
     * \li If the reference is used as an assignment target, the assignment expression is equivalent to element insertion,
     *     where the element is composed of the second argument of the \c operator[] as a key and the second argument of assignment
     *     as a mapped value.
     * \li If the returned reference is used in context where a conversion to the mapped type is required,
     *     the result of the conversion is equivalent to the mapped value found with the second argument of the \c operator[] as a key,
     *     if such an element exists in the container, or a default-constructed mapped value, if an element does not exist in the
     *     container.
     *
     * \param key Attribute name.
     * \return A smart reference object of unspecified type.
     ','line_number':363,'multiline':True]['text':'!
     * Lookup operator
     *
     * \param key Attribute name.
     * \return If an element with the corresponding attribute name is found in the container, its mapped value
     *         is returned. Otherwise a default-constructed mapped value is returned.
     ','line_number':380,'multiline':True]['text':'!
     * Insertion method
     *
     * \param key Attribute name.
     * \param data Pointer to the attribute. Must not be NULL.
     * \returns A pair of values. If second is true, the insertion succeeded and the first component points to the
     *          inserted element. Otherwise the first component points to the element that prevents insertion.
     ','line_number':396,'multiline':True]['text':'!
     * Insertion method
     *
     * \param value An element to be inserted.
     * \returns A pair of values. If second is true, the insertion succeeded and the first component points to the
     *          inserted element. Otherwise the first component points to the element that prevents insertion.
     ','line_number':406,'multiline':True]['text':'!
     * Mass insertion method.
     *
     * \param begin A forward iterator that points to the first element to be inserted.
     * \param end A forward iterator that points to the after-the-last element to be inserted.
     ','line_number':418,'multiline':True]['text':'!
     * Mass insertion method with ability to acquire iterators to the inserted elements.
     *
     * \param begin A forward iterator that points to the first element to be inserted.
     * \param end A forward iterator that points to the after-the-last element to be inserted.
     * \param out An output iterator that receives results of insertion of the elements
     ','line_number':431,'multiline':True]['text':'!
     * The method erases all attributes with the specified name
     *
     * \post All iterators to the erased elements become invalid.
     * \param key Attribute name.
     * \return Tne number of erased elements
     ','line_number':445,'multiline':True]['text':'!
     * The method erases the specified attribute
     *
     * \post All iterators to the erased element become invalid.
     * \param it A valid iterator to the element to be erased.
     * \return Tne number of erased elements
     ','line_number':453,'multiline':True]['text':'!
     * The method erases all attributes within the specified range
     *
     * \pre \a end is reachable from \a begin with a finite number of increments.
     * \post All iterators to the erased elements become invalid.
     * \param begin An iterator that points to the first element to be erased.
     * \param end An iterator that points to the after-the-last element to be erased.
     ','line_number':461,'multiline':True]['text':'!
     * The method removes all elements from the container
     *
     * \post <tt>empty() == true</tt>
     ','line_number':471,'multiline':True]['text':'!
 * Free swap overload
 ','line_number':479,'multiline':True]['text':'! Reads the referenced mapped value from the container','line_number':489,'multiline':False]['text':'! Assignment operator (would be invoked in case of writing to the container)','line_number':499,'multiline':False]['text':' namespace aux','line_number':508,'multiline':False]['text':' namespace log','line_number':519,'multiline':False]['text':' namespace boost','line_number':521,'multiline':False]['text':' BOOST_LOG_ATTRIBUTE_SET_HPP_INCLUDED_','line_number':525,'multiline':False]