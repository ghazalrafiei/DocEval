['text':' boost random/nierderreiter_base2.hpp header file
 *
 * Copyright Justinas Vygintas Daugmaudis 2010-2018
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'* @cond ','line_number':20,'multiline':True]['text':' Return the base 2 logarithm for a given bitset v','line_number':24,'multiline':False]['text':' Multiply polynomials over Z_2.','line_number':39,'multiline':False]['text':' pt == 0','line_number':43,'multiline':False]['text':' Calculate the values of the constants V(J,R) as','line_number':50,'multiline':False]['text':' described in BFN section 3.3.','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' pb = polynomial defined in section 2.3 of BFN.','line_number':53,'multiline':False]['text':' Now choose values of V in accordance with','line_number':62,'multiline':False]['text':' the conditions in section 3.3.','line_number':63,'multiline':False]['text':' Quoting from BFN: "Our program currently sets each K_q','line_number':68,'multiline':False]['text':' equal to eq. This has the effect of setting all unrestricted','line_number':69,'multiline':False]['text':' values of v to 1."','line_number':70,'multiline':False]['text':' Calculate the remaining V's using the recursion of section 2.3,','line_number':74,'multiline':False]['text':' remembering that the B's have the opposite sign.','line_number':75,'multiline':False]['text':' namespace nb2','line_number':87,'multiline':False]['text':' Initialize the bit array','line_number':112,'multiline':False]['text':' Reserve temporary space for lattice computation','line_number':115,'multiline':False]['text':' Compute Niedderreiter base 2 lattice','line_number':118,'multiline':False]['text':' integer log2(poly)','line_number':126,'multiline':False]['text':' ~ degree + bit_count','line_number':127,'multiline':False]['text':' For each dimension, we need to calculate powers of an','line_number':131,'multiline':False]['text':' appropriate irreducible polynomial, see Niederreiter','line_number':132,'multiline':False]['text':' page 65, just below equation (19).','line_number':133,'multiline':False]['text':' Copy the appropriate irreducible polynomial into PX,','line_number':134,'multiline':False]['text':' and its degree into E. Set polynomial B = PX ** 0 = 1.','line_number':135,'multiline':False]['text':' M is the degree of B. Subsequently B will hold higher','line_number':136,'multiline':False]['text':' powers of PX.','line_number':137,'multiline':False]['text':' pb == 0','line_number':141,'multiline':False]['text':' set the proper bit for the pb_degree','line_number':142,'multiline':False]['text':' Now choose a value of Kj as defined in section 3.3.','line_number':147,'multiline':False]['text':' We must have 0 <= Kj < E*J = M.','line_number':148,'multiline':False]['text':' The limit condition on Kj does not seem to be very relevant','line_number':149,'multiline':False]['text':' in this program.','line_number':150,'multiline':False]['text':' Now multiply B by PX so B becomes PX**J.','line_number':153,'multiline':False]['text':' In section 2.3, the values of Bi are defined with a minus sign :','line_number':154,'multiline':False]['text':' don't forget this if you use them later!','line_number':155,'multiline':False]['text':' Note that it is quite possible for kj to become bigger than','line_number':159,'multiline':False]['text':' the new computed value of pb_degree.','line_number':160,'multiline':False]['text':' If U = 0, we need to set B to the next power of PX','line_number':164,'multiline':False]['text':' and recalculate V.','line_number':165,'multiline':False]['text':' Niederreiter (page 56, after equation (7), defines two','line_number':168,'multiline':False]['text':' variables Q and U.  We do not need Q explicitly, but we','line_number':169,'multiline':False]['text':' do need U.','line_number':170,'multiline':False]['text':' Advance Niederreiter's state variables.','line_number':172,'multiline':False]['text':' Now C is obtained from V. Niederreiter','line_number':175,'multiline':False]['text':' obtains A from V (page 65, near the bottom), and then gets','line_number':176,'multiline':False]['text':' C from A (page 56, equation (7)).  However this can be done','line_number':177,'multiline':False]['text':' in one step.  Here CI(J,R) corresponds to','line_number':178,'multiline':False]['text':' Niederreiter's C(I,J,R), whose values we pack into array','line_number':179,'multiline':False]['text':' CJ so that CJ(I,R) holds all the values of C(I,J,R) for J from 1 to NBITS.','line_number':180,'multiline':False]['text':' set the jth bit in num','line_number':183,'multiline':False]['text':' namespace qrng_detail','line_number':203,'multiline':False]['text':'* @endcond ','line_number':207,'multiline':True]['text':'!Instantiations of class template niederreiter_base2_engine model a \quasi_random_number_generator.','line_number':209,'multiline':False]['text':'!The niederreiter_base2_engine uses the algorithm described in','line_number':210,'multiline':False]['text':'! \blockquote','line_number':211,'multiline':False]['text':'!Bratley, Fox, Niederreiter, ACM Trans. Model. Comp. Sim. 2, 195 (1992).','line_number':212,'multiline':False]['text':'! \endblockquote','line_number':213,'multiline':False]['text':'!','line_number':214,'multiline':False]['text':'!\attention niederreiter_base2_engine skips trivial zeroes at the start of the sequence. For example,','line_number':215,'multiline':False]['text':'!the beginning of the 2-dimensional Niederreiter base 2 sequence in @c uniform_01 distribution will look','line_number':216,'multiline':False]['text':'!like this:','line_number':217,'multiline':False]['text':'!\code{.cpp}','line_number':218,'multiline':False]['text':'!0.5, 0.5,','line_number':219,'multiline':False]['text':'!0.75, 0.25,','line_number':220,'multiline':False]['text':'!0.25, 0.75,','line_number':221,'multiline':False]['text':'!0.375, 0.375,','line_number':222,'multiline':False]['text':'!0.875, 0.875,','line_number':223,'multiline':False]['text':'!...','line_number':224,'multiline':False]['text':'!\endcode','line_number':225,'multiline':False]['text':'!','line_number':226,'multiline':False]['text':'!In the following documentation @c X denotes the concrete class of the template','line_number':227,'multiline':False]['text':'!niederreiter_base2_engine returning objects of type @c UIntType, u and v are the values of @c X.','line_number':228,'multiline':False]['text':'!','line_number':229,'multiline':False]['text':'!Some member functions may throw exceptions of type std::range_error. This','line_number':230,'multiline':False]['text':'!happens when the quasi-random domain is exhausted and the generator cannot produce','line_number':231,'multiline':False]['text':'!any more values. The length of the low discrepancy sequence is given by','line_number':232,'multiline':False]['text':'! \f$L=Dimension \times (2^{w} - 1)\f$.','line_number':233,'multiline':False]['text':'!Effects: Constructs the default `s`-dimensional Niederreiter base 2 quasi-random number generator.','line_number':244,'multiline':False]['text':'!','line_number':245,'multiline':False]['text':'!Throws: bad_alloc, invalid_argument, range_error.','line_number':246,'multiline':False]['text':' initialize lattice here','line_number':248,'multiline':False]['text':'=========================Doxygen needs this!==============================','line_number':252,'multiline':False]['text':'!Returns: Tight lower bound on the set of values returned by operator().','line_number':255,'multiline':False]['text':'!','line_number':256,'multiline':False]['text':'!Throws: nothing.','line_number':257,'multiline':False]['text':'!Returns: Tight upper bound on the set of values returned by operator().','line_number':261,'multiline':False]['text':'!','line_number':262,'multiline':False]['text':'!Throws: nothing.','line_number':263,'multiline':False]['text':'!Returns: The dimension of of the quasi-random domain.','line_number':267,'multiline':False]['text':'!','line_number':268,'multiline':False]['text':'!Throws: nothing.','line_number':269,'multiline':False]['text':'!Effects: Resets the quasi-random number generator state to','line_number':272,'multiline':False]['text':'!the one given by the default construction. Equivalent to u.seed(0).','line_number':273,'multiline':False]['text':'!','line_number':274,'multiline':False]['text':'!\brief Throws: nothing.','line_number':275,'multiline':False]['text':'!Effects: Effectively sets the quasi-random number generator state to the `init`-th','line_number':281,'multiline':False]['text':'!vector in the `s`-dimensional quasi-random domain, where `s` == X::dimension().','line_number':282,'multiline':False]['text':'!\code','line_number':283,'multiline':False]['text':'!X u, v;','line_number':284,'multiline':False]['text':'!for(int i = 0; i < N; ++i)','line_number':285,'multiline':False]['text':'!    for( std::size_t j = 0; j < u.dimension(); ++j )','line_number':286,'multiline':False]['text':'!        u();','line_number':287,'multiline':False]['text':'!v.seed(N);','line_number':288,'multiline':False]['text':'!assert(u() == v());','line_number':289,'multiline':False]['text':'!\endcode','line_number':290,'multiline':False]['text':'!','line_number':291,'multiline':False]['text':'!\brief Throws: range_error.','line_number':292,'multiline':False]['text':'!Returns: Returns a successive element of an `s`-dimensional','line_number':298,'multiline':False]['text':'!(s = X::dimension()) vector at each invocation. When all elements are','line_number':299,'multiline':False]['text':'!exhausted, X::operator() begins anew with the starting element of a','line_number':300,'multiline':False]['text':'!subsequent `s`-dimensional vector.','line_number':301,'multiline':False]['text':'!','line_number':302,'multiline':False]['text':'!Throws: range_error.','line_number':303,'multiline':False]['text':'!Effects: Advances *this state as if `z` consecutive','line_number':309,'multiline':False]['text':'!X::operator() invocations were executed.','line_number':310,'multiline':False]['text':'!\code','line_number':311,'multiline':False]['text':'!X u = v;','line_number':312,'multiline':False]['text':'!for(int i = 0; i < N; ++i)','line_number':313,'multiline':False]['text':'!    u();','line_number':314,'multiline':False]['text':'!v.discard(N);','line_number':315,'multiline':False]['text':'!assert(u() == v());','line_number':316,'multiline':False]['text':'!\endcode','line_number':317,'multiline':False]['text':'!','line_number':318,'multiline':False]['text':'!Throws: range_error.','line_number':319,'multiline':False]['text':'!Returns true if the two generators will produce identical sequences of outputs.','line_number':325,'multiline':False]['text':'!Returns true if the two generators will produce different sequences of outputs.','line_number':329,'multiline':False]['text':'!Writes the textual representation of the generator to a @c std::ostream.','line_number':332,'multiline':False]['text':'!Reads the textual representation of the generator from a @c std::istream.','line_number':336,'multiline':False]['text':' BOOST_RANDOM_DOXYGEN','line_number':340,'multiline':False]['text':'*
 * @attention This specialization of \niederreiter_base2_engine supports up to 4720 dimensions.
 *
 * Binary irreducible polynomials (primes in the ring `GF(2)[X]`, evaluated at `X=2`) were generated
 * while condition `max(prime)` < 2<sup>16</sup> was satisfied.
 *
 * There are exactly 4720 such primes, which yields a Niederreiter base 2 table for 4720 dimensions.
 *
 * However, it is possible to provide your own table to \niederreiter_base2_engine should the default one be insufficient.
 ','line_number':344,'multiline':True]['text':' namespace random','line_number':356,'multiline':False]['text':' namespace boost','line_number':358,'multiline':False]['text':' BOOST_RANDOM_NIEDERREITER_BASE2_HPP','line_number':360,'multiline':False]