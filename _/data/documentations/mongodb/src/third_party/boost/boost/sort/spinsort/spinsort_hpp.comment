['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':'/ @file spinsort.hpp','line_number':2,'multiline':False]['text':'/ @brief Spin Sort algorithm','line_number':3,'multiline':False]['text':'/','line_number':4,'multiline':False]['text':'/ @author Copyright (c) 2016 Francisco Jos√© Tapia (fjtapia@gmail.com )\n','line_number':5,'multiline':False]['text':'/         Distributed under the Boost Software License, Version 1.0.\n','line_number':6,'multiline':False]['text':'/         ( See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'/           http://www.boost.org/LICENSE_1_0.txt  )','line_number':8,'multiline':False]['text':'/ @version 0.1','line_number':9,'multiline':False]['text':'/','line_number':10,'multiline':False]['text':'/ @remarks','line_number':11,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':12,'multiline':False]['text':'#include <boost/sort/spinsort/util/indirect.hpp>','line_number':16,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':37,'multiline':False]['text':'                USING SENTENCES','line_number':38,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':39,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'############################################################################','line_number':48,'multiline':False]['text':'                                                                          ##','line_number':49,'multiline':False]['text':'          D E F I N I T I O N S    O F    F U N C T I O N S               ##','line_number':50,'multiline':False]['text':'                                                                          ##','line_number':51,'multiline':False]['text':'############################################################################','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':'','line_number':72,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':73,'multiline':False]['text':'  function : insert_partial_sort','line_number':74,'multiline':False]['text':'/ @brief : Insertion sort of elements sorted','line_number':75,'multiline':False]['text':'/ @param first: iterator to the first element of the range','line_number':76,'multiline':False]['text':'/ @param mid : last pointer of the sorted data, and first pointer to the','line_number':77,'multiline':False]['text':'/               elements to insert','line_number':78,'multiline':False]['text':'/ @param last : iterator to the next element of the last in the range','line_number':79,'multiline':False]['text':'/ @param comp :','line_number':80,'multiline':False]['text':'/ @comments : the two ranges are sorted','line_number':81,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':82,'multiline':False]['text':'------------------------------------------------------------------------','line_number':87,'multiline':False]['text':'                 metaprogram','line_number':88,'multiline':False]['text':'------------------------------------------------------------------------','line_number':89,'multiline':False]['text':'--------------------------------------------------------------------','line_number':95,'multiline':False]['text':'                   program','line_number':96,'multiline':False]['text':'--------------------------------------------------------------------','line_number':97,'multiline':False]['text':'insertionsort ( mid, last, comp);','line_number':101,'multiline':False]['text':'------------------------------------------------------------------------','line_number':104,'multiline':False]['text':' creation of the vector of elements to insert and their position in the','line_number':105,'multiline':False]['text':' sorted part','line_number':106,'multiline':False]['text':' the data are inserted in rng_aux','line_number':107,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':108,'multiline':False]['text':' moving the elements','line_number':125,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':136,'multiline':False]['text':'  function : check_stable_sort','line_number':137,'multiline':False]['text':'/ @brief check if the elements between first and last are osted or reverse','line_number':138,'multiline':False]['text':'/        sorted. If the number of elements not sorted is small, insert in','line_number':139,'multiline':False]['text':'/        the sorted part','line_number':140,'multiline':False]['text':'/ @param range_input : range with the elements to sort','line_number':141,'multiline':False]['text':'/ @param range_buffer : range with the elements sorted','line_number':142,'multiline':False]['text':'/ @param comp : object for to compare two elements','line_number':143,'multiline':False]['text':'/ @param level : when is 1, sort with the insertionsort algorithm','line_number':144,'multiline':False]['text':'/                if not make a recursive call splitting the ranges','line_number':145,'multiline':False]['text':'','line_number':146,'multiline':False]['text':'/ @comments : if the number of levels is odd, the data are in the first','line_number':147,'multiline':False]['text':'/ parameter of range_sort, and the results appear in the second parameter','line_number':148,'multiline':False]['text':'/ If the number of levels is even, the data are in the second','line_number':149,'multiline':False]['text':'/ parameter of range_sort, and the results are in the same parameter','line_number':150,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':151,'multiline':False]['text':'------------------------------------------------------------------------','line_number':156,'multiline':False]['text':'              metaprogramming','line_number':157,'multiline':False]['text':'------------------------------------------------------------------------','line_number':158,'multiline':False]['text':'------------------------------------------------------------------------','line_number':164,'multiline':False]['text':'                    program','line_number':165,'multiline':False]['text':'------------------------------------------------------------------------','line_number':166,'multiline':False]['text':' the maximun number of elements not ordered, for to be inserted in the','line_number':167,'multiline':False]['text':' sorted part','line_number':168,'multiline':False]['text':'const ptrdiff_t  min_insert_partial_sort = 32 ;','line_number':169,'multiline':False]['text':' check if sorted','line_number':180,'multiline':False]['text':' insert the elements between it1 and last','line_number':189,'multiline':False]['text':' check if reverse sorted','line_number':197,'multiline':False]['text':' reverse the elements between first and it1','line_number':206,'multiline':False]['text':' insert the elements between it1 and last','line_number':213,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':222,'multiline':False]['text':'  function : range_sort','line_number':223,'multiline':False]['text':'/ @brief this function divide r_input in two parts, sort it,and merge moving','line_number':224,'multiline':False]['text':'/        the elements to range_buf','line_number':225,'multiline':False]['text':'/ @param range_input : range with the elements to sort','line_number':226,'multiline':False]['text':'/ @param range_buffer : range with the elements sorted','line_number':227,'multiline':False]['text':'/ @param comp : object for to compare two elements','line_number':228,'multiline':False]['text':'/ @param level : when is 1, sort with the insertionsort algorithm','line_number':229,'multiline':False]['text':'/                if not make a recursive call splitting the ranges','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':'/ @comments : if the number of levels is odd, the data are in the first','line_number':232,'multiline':False]['text':'/ parameter of range_sort, and the results appear in the second parameter','line_number':233,'multiline':False]['text':'/ If the number of levels is even, the data are in the second','line_number':234,'multiline':False]['text':'/ parameter of range_sort, and the results are in the same parameter','line_number':235,'multiline':False]['text':'/ The two ranges must have the same size','line_number':236,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':237,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':243,'multiline':False]['text':'                  metaprogram','line_number':244,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':245,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':251,'multiline':False]['text':'                  program','line_number':252,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':253,'multiline':False]['text':'------------------- check if sort --------------------------------------','line_number':258,'multiline':False]['text':'------------------- normal process -----------------------------------','line_number':275,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':297,'multiline':False]['text':'  function : sort_range_sort','line_number':298,'multiline':False]['text':'/ @brief this sort elements using the range_sort function and receiving a','line_number':299,'multiline':False]['text':'/        buffer of initialized memory','line_number':300,'multiline':False]['text':'/ @param rng_data : range with the elements to sort','line_number':301,'multiline':False]['text':'/ @param rng_aux : range of at least the same memory than rng_data used as','line_number':302,'multiline':False]['text':'/                  auxiliary memory in the sorting','line_number':303,'multiline':False]['text':'/ @param comp : object for to compare two elements','line_number':304,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':305,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':310,'multiline':False]['text':'                  metaprogram','line_number':311,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':312,'multiline':False]['text':'------------------------------------------------------------------------','line_number':318,'multiline':False]['text':'                    program','line_number':319,'multiline':False]['text':'------------------------------------------------------------------------','line_number':320,'multiline':False]['text':' minimal number of element before to jump to insertionsort','line_number':321,'multiline':False]['text':'assert (nlevel != 0);','line_number':336,'multiline':False]['text':'','line_number':349,'multiline':False]['text':'############################################################################','line_number':350,'multiline':False]['text':'                                                                          ##','line_number':351,'multiline':False]['text':'                              S T R U C T                                 ##','line_number':352,'multiline':False]['text':'                                                                          ##','line_number':353,'multiline':False]['text':'                           S P I N _ S O R T                              ##','line_number':354,'multiline':False]['text':'                                                                          ##','line_number':355,'multiline':False]['text':'############################################################################','line_number':356,'multiline':False]['text':'---------------------------------------------------------------------------','line_number':357,'multiline':False]['text':'/ @struct spin_sort','line_number':358,'multiline':False]['text':'/ @brief  This class implement s stable sort algorithm with 1 thread, with','line_number':359,'multiline':False]['text':'/         an auxiliary memory of N/2 elements','line_number':360,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':361,'multiline':False]['text':'------------------------------------------------------------------------','line_number':365,'multiline':False]['text':'               DEFINITIONS AND CONSTANTS','line_number':366,'multiline':False]['text':'------------------------------------------------------------------------','line_number':367,'multiline':False]['text':' When the number of elements to sort is smaller than Sort_min, are sorted','line_number':371,'multiline':False]['text':' by the insertion sort algorithm','line_number':372,'multiline':False]['text':'------------------------------------------------------------------------','line_number':375,'multiline':False]['text':'                      VARIABLES','line_number':376,'multiline':False]['text':'------------------------------------------------------------------------','line_number':377,'multiline':False]['text':' Pointer to the auxiliary memory','line_number':378,'multiline':False]['text':' Number of elements in the auxiliary memory','line_number':381,'multiline':False]['text':' construct indicate if the auxiliary memory in initialized, and owner','line_number':384,'multiline':False]['text':' indicate if the auxiliary memory had been created inside the object or','line_number':385,'multiline':False]['text':' had','line_number':386,'multiline':False]['text':' been received as a parameter','line_number':387,'multiline':False]['text':'------------------------------------------------------------------------','line_number':390,'multiline':False]['text':'                   PRIVATE FUNCTIONS','line_number':391,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':392,'multiline':False]['text':'------------------------------------------------------------------------','line_number':397,'multiline':False]['text':'                   PUBLIC FUNCTIONS','line_number':398,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':399,'multiline':False]['text':'','line_number':405,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':406,'multiline':False]['text':'  function :~spinsort','line_number':407,'multiline':False]['text':'/ @brief destructor of the struct. Destroy the elements if construct is','line_number':408,'multiline':False]['text':'/ true,','line_number':409,'multiline':False]['text':'/        and return the memory if owner is true','line_number':410,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':411,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':422,'multiline':False]['text':'        End of class spinsort','line_number':423,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':424,'multiline':False]['text':'','line_number':425,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':426,'multiline':False]['text':'  function : spinsort','line_number':427,'multiline':False]['text':'/ @brief constructor of the struct','line_number':428,'multiline':False]['text':'','line_number':429,'multiline':False]['text':'/ @param first : iterator to the first element of the range to sort','line_number':430,'multiline':False]['text':'/ @param last : iterator after the last element to the range to sort','line_number':431,'multiline':False]['text':'/ @param comp : object for to compare two elements pointed by Iter_t','line_number':432,'multiline':False]['text':'/               iterators','line_number':433,'multiline':False]['text':'/ @param paux : pointer to the auxiliary memory provided. If nullptr, the','line_number':434,'multiline':False]['text':'/               memory is created inside the class','line_number':435,'multiline':False]['text':'/ @param naux : number of elements pointed by paux','line_number':436,'multiline':False]['text':'------------------------------------------------------------------------','line_number':437,'multiline':False]['text':'------------------- check if sort ---------------------------------','line_number':459,'multiline':False]['text':'------------------- check if reverse sort -------------------------','line_number':465,'multiline':False]['text':'---------------------------------------------------------------------','line_number':486,'multiline':False]['text':'                  Process','line_number':487,'multiline':False]['text':'---------------------------------------------------------------------','line_number':488,'multiline':False]['text':'----------------------------------------------------------------','line_number':494,'multiline':False]['text':' if the number of levels is odd, the data are in the first','line_number':495,'multiline':False]['text':' parameter of range_sort, and the results appear in the second','line_number':496,'multiline':False]['text':' parameter','line_number':497,'multiline':False]['text':'----------------------------------------------------------------','line_number':498,'multiline':False]['text':'----------------------------------------------------------------','line_number':512,'multiline':False]['text':' If the number of levels is even, the data are in the second','line_number':513,'multiline':False]['text':' parameter of range_sort, and the results are in the same','line_number':514,'multiline':False]['text':'  parameter','line_number':515,'multiline':False]['text':'----------------------------------------------------------------','line_number':516,'multiline':False]['text':'****************************************************************************','line_number':530,'multiline':False]['text':'    End namepspace spin_detail','line_number':531,'multiline':False]['text':'****************************************************************************','line_number':532,'multiline':False]['text':'','line_number':533,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':535,'multiline':False]['text':'  function : spinsort','line_number':536,'multiline':False]['text':'/ @brief this function implement a single thread stable sort','line_number':537,'multiline':False]['text':'/','line_number':538,'multiline':False]['text':'/ @param first : iterator to the first element of the range to sort','line_number':539,'multiline':False]['text':'/ @param last : iterator after the last element to the range to sort','line_number':540,'multiline':False]['text':'/ @param comp : object for to compare two elements pointed by Iter_t','line_number':541,'multiline':False]['text':'/               iterators','line_number':542,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':543,'multiline':False]['text':'****************************************************************************','line_number':559,'multiline':False]['text':'    End namespace sort','line_number':560,'multiline':False]['text':'    End namepspace boost','line_number':561,'multiline':False]['text':'****************************************************************************','line_number':562,'multiline':False]['text':'','line_number':563,'multiline':False]