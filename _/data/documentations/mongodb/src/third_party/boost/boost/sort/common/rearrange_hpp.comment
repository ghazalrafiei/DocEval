['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':'/ @file rearrange.hpp','line_number':2,'multiline':False]['text':'/ @brief Indirect algorithm','line_number':3,'multiline':False]['text':'/','line_number':4,'multiline':False]['text':'/ @author Copyright (c) 2016 Francisco Jose Tapia (fjtapia@gmail.com )\n','line_number':5,'multiline':False]['text':'/         Distributed under the Boost Software License, Version 1.0.\n','line_number':6,'multiline':False]['text':'/         ( See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'/           http://www.boost.org/LICENSE_1_0.txt  )','line_number':8,'multiline':False]['text':'/ @version 0.1','line_number':9,'multiline':False]['text':'/','line_number':10,'multiline':False]['text':'/ @remarks','line_number':11,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':12,'multiline':False]['text':'#include <boost/sort/common/atomic.hpp>','line_number':16,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':34,'multiline':False]['text':'                   Variables','line_number':35,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':36,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':39,'multiline':False]['text':'                   Functions','line_number':40,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':41,'multiline':False]['text':'','line_number':54,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':55,'multiline':False]['text':'  function : rearrange','line_number':56,'multiline':False]['text':'/ @brief This function transform a logical sort of the elements in the index  ','line_number':57,'multiline':False]['text':'/        of iterators in a physical sort. ','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':'/ @param global_first : iterator to the first element of the data','line_number':60,'multiline':False]['text':'/ @param [in] index : vector of the iterators','line_number':61,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':62,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':67,'multiline':False]['text':'                    Metaprogramming','line_number':68,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':69,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':73,'multiline':False]['text':'                     Code','line_number':74,'multiline':False]['text':'-------------------------------------------------------------------------	','line_number':75,'multiline':False]['text':'
 //
 //-----------------------------------------------------------------------------
 //  function : rearrange_pos
 /// @brief This function transform a logical sort of the elements in the index  
 ///        of iterators in a physical sort. 
 //
 /// @param global_first : iterator to the first element of the data
 /// @param [in] index : vector of the iterators
 //-----------------------------------------------------------------------------
 template < class Iter_t, class Number >
 void rearrange_pos (Iter_t global_first, std::vector< Number> &index)
 {	
 //-------------------------------------------------------------------------
 //          METAPROGRAMMING AND DEFINITIONS
 //-------------------------------------------------------------------------
 static_assert ( std::is_integral<Number>::value, "Incompatible Types");
 typedef iter_value< Iter_t > value_t;

 //-------------------------------------------------------------------------
 //                     CODE
 //-------------------------------------------------------------------------
 size_t pos_dest = 0;
 size_t pos_src = 0;
 size_t pos_ini = 0;
 size_t nelem = index.size ( );
 Iter_t it_dest (global_first), it_src(global_first);

 while (pos_ini < nelem)
 {
 while (pos_ini < nelem and
 index[pos_ini] == pos_ini)
 {
 ++pos_ini;
 };

 if (pos_ini == nelem) return;
 pos_dest = pos_src = pos_ini;
 it_dest = global_first + pos_dest;
 value_t Aux = std::move (*it_dest);

 while ((pos_src = index[pos_dest]) != pos_ini)
 {
 index[pos_dest] = it_dest - global_first;
 it_src = global_first + pos_src;
 *it_dest = std::move (*it_src);
 it_dest = it_src;
 pos_dest = pos_src;
 };

 *it_dest = std::move (Aux);
 index[pos_dest] = it_dest - global_first;
 ++pos_ini;
 };
 };
 ','line_number':105,'multiline':True]['text':'','line_number':161,'multiline':False]['text':'****************************************************************************','line_number':162,'multiline':False]['text':'    End namespace common','line_number':163,'multiline':False]['text':'    End namespace sort','line_number':164,'multiline':False]['text':'    End namespace boost','line_number':165,'multiline':False]['text':'****************************************************************************','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]