['text':'','line_number':1,'multiline':False]['text':' execution/schedule.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ A customisation point that is used to obtain a sender from a scheduler.','line_number':32,'multiline':False]['text':'*
 * The name <tt>execution::schedule</tt> denotes a customisation point object.
 * For some subexpression <tt>s</tt>, let <tt>S</tt> be a type such that
 * <tt>decltype((s))</tt> is <tt>S</tt>. The expression
 * <tt>execution::schedule(s)</tt> is expression-equivalent to:
 *
 * @li <tt>s.schedule()</tt>, if that expression is valid and its type models
 *   <tt>sender</tt>.
 *
 * @li Otherwise, <tt>schedule(s)</tt>, if that expression is valid and its
 *   type models <tt>sender</tt> with overload resolution performed in a context
 *   that includes the declaration <tt>void schedule();</tt> and that does not
 *   include a declaration of <tt>execution::schedule</tt>.
 *
 * @li Otherwise, <tt>S</tt> if <tt>S</tt> satisfies <tt>executor</tt>.
 *
 * @li Otherwise, <tt>execution::schedule(s)</tt> is ill-formed.
 ','line_number':33,'multiline':True]['text':'/ A type trait that determines whether a @c schedule expression is','line_number':53,'multiline':False]['text':'/ well-formed.','line_number':54,'multiline':False]['text':'*
 * Class template @c can_schedule is a trait that is derived from @c true_type
 * if the expression <tt>execution::schedule(std::declval<S>())</tt> is well
 * formed; otherwise @c false_type.
 ','line_number':55,'multiline':True]['text':' namespace execution','line_number':66,'multiline':False]['text':' namespace asio','line_number':67,'multiline':False]['text':' namespace boost','line_number':68,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':70,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':139,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':141,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':182,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':230,'multiline':False]['text':' namespace boost_asio_execution_schedule_fn','line_number':242,'multiline':False]['text':' namespace','line_number':251,'multiline':False]['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':266,'multiline':False]['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':281,'multiline':False]['text':' namespace execution','line_number':283,'multiline':False]['text':' namespace asio','line_number':284,'multiline':False]['text':' namespace boost','line_number':285,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':287,'multiline':False]['text':' BOOST_ASIO_EXECUTION_SCHEDULE_HPP','line_number':291,'multiline':False]