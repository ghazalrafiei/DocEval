['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':9,'multiline':False]['text':' transform_width.hpp','line_number':10,'multiline':False]['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .','line_number':12,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':13,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':17,'multiline':False]['text':' iterator which takes elements of x bits and returns elements of y bits.','line_number':19,'multiline':False]['text':' used to change streams of 8 bit characters into streams of 6 bit characters.','line_number':20,'multiline':False]['text':' and vice-versa for implementing base64 encodeing/decoding. Be very careful','line_number':21,'multiline':False]['text':' when using and end iterator.  end is only reliable detected when the input','line_number':22,'multiline':False]['text':' stream length is some common multiple of x and y.  E.G. Base64 6 bit','line_number':23,'multiline':False]['text':' character and 8 bit bytes. Lowest common multiple is 24 => 4 6 bit characters','line_number':24,'multiline':False]['text':' or 3 8 bit characters','line_number':25,'multiline':False]['text':' std::min','line_number':30,'multiline':False]['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':36,'multiline':False]['text':' class used by text archives to translate char strings to wchar_t','line_number':37,'multiline':False]['text':' strings of the currently selected locale','line_number':38,'multiline':False]['text':' output character','line_number':43,'multiline':False]['text':' discard any left over bits','line_number':75,'multiline':False]['text':' BitsIn > BitsOut  // zero fill','line_number':78,'multiline':False]['text':' standard iterator interface','line_number':87,'multiline':False]['text':' last read element from input','line_number':99,'multiline':False]['text':' number of bits to left in the input buffer.','line_number':102,'multiline':False]['text':' flag to indicate we've reached end of data.','line_number':105,'multiline':False]['text':' make composible buy using templated constructor','line_number':109,'multiline':False]['text':' To disable GCC warning, but not truly necessary','line_number':115,'multiline':False]['text':'(m_buffer_in will be initialized later before being','line_number':116,'multiline':False]['text':'used because m_remaining_bits == 0)','line_number':117,'multiline':False]['text':' intel 7.1 doesn't like default copy constructor','line_number':122,'multiline':False]['text':' append these bits to the next output','line_number':154,'multiline':False]['text':' up to the size of the output','line_number':155,'multiline':False]['text':' shift interesting bits to least significant position','line_number':157,'multiline':False]['text':' and mask off the un interesting higher bits','line_number':159,'multiline':False]['text':' note presumption of twos complement notation','line_number':160,'multiline':False]['text':' append then interesting bits to the output value','line_number':162,'multiline':False]['text':' and update counters','line_number':166,'multiline':False]['text':' namespace iterators','line_number':173,'multiline':False]['text':' namespace archive','line_number':174,'multiline':False]['text':' namespace boost','line_number':175,'multiline':False]['text':' BOOST_ARCHIVE_ITERATORS_TRANSFORM_WIDTH_HPP','line_number':177,'multiline':False]