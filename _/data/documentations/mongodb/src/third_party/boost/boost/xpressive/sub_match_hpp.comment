['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file sub_match.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of the class template sub_match\<\>','line_number':3,'multiline':False]['text':'/ and associated helper functions','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':6,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':7,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':13,'multiline':False]['text':'{{AFX_DOC_COMMENT','line_number':30,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':31,'multiline':False]['text':' This is a hack to get Doxygen to show the inheritance relation between','line_number':32,'multiline':False]['text':' sub_match<T> and std::pair<T,T>.','line_number':33,'multiline':False]['text':'/ INTERNAL ONLY','line_number':35,'multiline':False]['text':'/ INTERNAL ONLY','line_number':38,'multiline':False]['text':'}}AFX_DOC_COMMENT','line_number':42,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]['text':' sub_match','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'/ \brief Class template \c sub_match denotes the sequence of characters matched by a particular','line_number':50,'multiline':False]['text':'/ marked sub-expression.','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ When the marked sub-expression denoted by an object of type \c sub_match\<\> participated in a','line_number':53,'multiline':False]['text':'/ regular expression match then member \c matched evaluates to \c true, and members \c first and \c second','line_number':54,'multiline':False]['text':'/ denote the range of characters <tt>[first,second)</tt> which formed that match. Otherwise \c matched is \c false,','line_number':55,'multiline':False]['text':'/ and members \c first and \c second contained undefined values.','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/ If an object of type \c sub_match\<\> represents sub-expression 0 - that is to say the whole match -','line_number':58,'multiline':False]['text':'/ then member \c matched is always \c true, unless a partial match was obtained as a result of the flag','line_number':59,'multiline':False]['text':'/ \c match_partial being passed to a regular expression algorithm, in which case member \c matched is','line_number':60,'multiline':False]['text':'/ \c false, and members \c first and \c second represent the character range that formed the partial match.','line_number':61,'multiline':False]['text':'/ INTERNAL ONLY','line_number':67,'multiline':False]['text':'/','line_number':68,'multiline':False]['text':'/ \brief Performs a lexicographic string comparison','line_number':115,'multiline':False]['text':'/ \param str the string against which to compare','line_number':116,'multiline':False]['text':'/ \return the results of <tt>(*this).str().compare(str)</tt>','line_number':117,'multiline':False]['text':'/ \overload','line_number':123,'multiline':False]['text':'/','line_number':124,'multiline':False]['text':'/ \overload','line_number':130,'multiline':False]['text':'/','line_number':131,'multiline':False]['text':'/ \brief true if this sub-match participated in the full match.','line_number':137,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':141,'multiline':False]['text':'/ \brief \c range_begin() to make \c sub_match\<\> a valid range','line_number':142,'multiline':False]['text':'/ \param sub the \c sub_match\<\> object denoting the range','line_number':143,'multiline':False]['text':'/ \return \c sub.first','line_number':144,'multiline':False]['text':'/ \pre \c sub.first is not singular','line_number':145,'multiline':False]['text':'/ \overload','line_number':152,'multiline':False]['text':'/','line_number':153,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':160,'multiline':False]['text':'/ \brief \c range_end() to make \c sub_match\<\> a valid range','line_number':161,'multiline':False]['text':'/ \param sub the \c sub_match\<\> object denoting the range','line_number':162,'multiline':False]['text':'/ \return \c sub.second','line_number':163,'multiline':False]['text':'/ \pre \c sub.second is not singular','line_number':164,'multiline':False]['text':'/ \overload','line_number':171,'multiline':False]['text':'/','line_number':172,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':179,'multiline':False]['text':'/ \brief insertion operator for sending sub-matches to ostreams','line_number':180,'multiline':False]['text':'/ \param sout output stream.','line_number':181,'multiline':False]['text':'/ \param sub sub_match object to be written to the stream.','line_number':182,'multiline':False]['text':'/ \return sout \<\< sub.str()','line_number':183,'multiline':False]['text':' BUGBUG make these more efficient','line_number':206,'multiline':False]['text':' Operator+ convenience function','line_number':388,'multiline':False]['text':' namespace boost::xpressive','line_number':438,'multiline':False]['text':' Hook the Boost.Range customization points to make sub_match a valid range.','line_number':440,'multiline':False]['text':'/ INTERNAL ONLY','line_number':443,'multiline':False]['text':'/','line_number':444,'multiline':False]['text':'/ INTERNAL ONLY','line_number':451,'multiline':False]['text':'/','line_number':452,'multiline':False]