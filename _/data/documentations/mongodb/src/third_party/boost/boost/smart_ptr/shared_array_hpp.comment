['text':'','line_number':4,'multiline':False]['text':'  shared_array.hpp','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  (C) Copyright Greg Colvin and Beman Dawes 1998, 1999.','line_number':7,'multiline':False]['text':'  Copyright (c) 2001, 2002, 2012 Peter Dimov','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':10,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':11,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' for broken compiler workarounds','line_number':17,'multiline':False]['text':' TR1 cyclic inclusion fix','line_number':19,'multiline':False]['text':' for std::ptrdiff_t','line_number':30,'multiline':False]['text':' for std::swap','line_number':31,'multiline':False]['text':' for std::less','line_number':32,'multiline':False]['text':'','line_number':37,'multiline':False]['text':'  shared_array','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'  shared_array extends shared_ptr to arrays.','line_number':40,'multiline':False]['text':'  The array pointed to is deleted when the last shared_array pointing to it','line_number':41,'multiline':False]['text':'  is destroyed or reset.','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' Borland 5.5.1 specific workarounds','line_number':49,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' Requirements: D's copy constructor must not throw','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' shared_array will release p by calling d(p)','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' As above, but with allocator. A's copy constructor shall not throw.','line_number':86,'multiline':False]['text':'  generated copy constructor, destructor are fine...','line_number':93,'multiline':False]['text':' ... except in C++0x, move disables the implicit copy','line_number':97,'multiline':False]['text':' conversion','line_number':111,'multiline':False]['text':' aliasing','line_number':128,'multiline':False]['text':' assignment','line_number':135,'multiline':False]['text':' Y must be complete','line_number':176,'multiline':False]['text':' catch self-reset errors','line_number':178,'multiline':False]['text':' implicit conversion to "bool"','line_number':209,'multiline':False]['text':' contained pointer','line_number':237,'multiline':False]['text':' reference counter','line_number':238,'multiline':False]['text':' shared_array','line_number':240,'multiline':False]['text':' namespace boost','line_number':291,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_SHARED_ARRAY_HPP_INCLUDED','line_number':293,'multiline':False]