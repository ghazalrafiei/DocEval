['text':' Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':' ::tolower(int)','line_number':24,'multiline':False]['text':' std::tolower(char, locale)','line_number':26,'multiline':False]['text':'! A function to replace the std::transform( , , ,tolower) construct','line_number':32,'multiline':False]['text':'! This function simply takes a string, and changes all the characters
   * in that string to lowercase (according to the default system locale).
   * In the event that a compiler does not support locales, the old
   * C style tolower() is used.
   ','line_number':33,'multiline':True]['text':' tolower and others were brought in to std for borland >= v564','line_number':51,'multiline':False]['text':' in compiler_config.hpp','line_number':52,'multiline':False]['text':'! Helper function for parse_date.','line_number':59,'multiline':False]['text':'c++98 support','line_number':68,'multiline':False]['text':'c+11 and beyond','line_number':97,'multiline':False]['text':' intentionally out of range - name not found','line_number':118,'multiline':False]['text':'! Generic function to parse a delimited date (eg: 2002-02-10)','line_number':122,'multiline':False]['text':'! Accepted formats are: "2003-02-10" or " 2003-Feb-10" or
     * "2003-Feburary-10"
     * The order in which the Month, Day, & Year appear in the argument
     * string can be accomodated by passing in the appropriate ymd_order_spec
     ','line_number':123,'multiline':True]['text':' (order_spec == ymd_order_us)','line_number':138,'multiline':False]['text':' may need more delimiters, these work for the regression tests','line_number':153,'multiline':False]['text':'switch','line_number':177,'multiline':False]['text':'! Generic function to parse undelimited date (eg: 20020201)','line_number':182,'multiline':False]['text':'typename date_type::ymd_type ymd((year_type::min)(),1,1);','line_number':188,'multiline':False]['text':' The two bool arguments state that parsing will not wrap
       * (only the first 8 characters will be parsed) and partial
       * strings will not be parsed.
       * Ex:
       * "2005121" will parse 2005 & 12, but not the "1" ','line_number':191,'multiline':True]['text':'! Helper function for 'date gregorian::from_stream()'','line_number':215,'multiline':False]['text':'! Creates a string from the iterators that reference the
     * begining & end of a char[] or string. All elements are
     * used in output string ','line_number':216,'multiline':True]['text':'! Helper function for 'date gregorian::from_stream()'','line_number':233,'multiline':False]['text':'! Returns the first string found in the stream referenced by the
     * begining & end iterators ','line_number':234,'multiline':True]['text':' end ','line_number':240,'multiline':True]['text':' I believe the wchar stuff would be best elsewhere, perhaps in
     * parse_date<>()? In the mean time this gets us started... ','line_number':246,'multiline':True]['text':'! Helper function for 'date gregorian::from_stream()'','line_number':248,'multiline':False]['text':'! Creates a string from the iterators that reference the
     * begining & end of a wstring. All elements are
     * used in output string ','line_number':249,'multiline':True]['text':' 'X' will cause exception to be thrown','line_number':263,'multiline':False]['text':' 'X' will cause exception to be thrown','line_number':267,'multiline':False]['text':'! Helper function for 'date gregorian::from_stream()'','line_number':277,'multiline':False]['text':'! Creates a string from the first wstring found in the stream
     * referenced by the begining & end iterators ','line_number':278,'multiline':True]['text':' end ','line_number':284,'multiline':True]['text':' 'X' will cause exception to be thrown','line_number':293,'multiline':False]['text':' 'X' will cause exception to be thrown','line_number':297,'multiline':False]['text':' BOOST_NO_STD_WSTRING','line_number':306,'multiline':False]['text':' This function cannot be compiled with MSVC 6.0 due to internal compiler shorcomings','line_number':308,'multiline':False]['text':'! function called by wrapper functions: date_period_from_(w)string()','line_number':310,'multiline':False]['text':' get 2 string iterators and generate a date from them','line_number':324,'multiline':False]['text':' next token','line_number':329,'multiline':False]['text':'namespace date_time','line_number':336,'multiline':False]