['text':' boost random/independent_bits.hpp header file
 *
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 ','line_number':1,'multiline':True]['text':'*
 * An instantiation of class template @c independent_bits_engine
 * model a \pseudo_random_number_generator.  It generates random
 * numbers distributed between [0, 2^w) by combining one or
 * more invocations of the base engine.
 *
 * Requires: 0 < w <= std::numeric_limits<UIntType>::digits
 ','line_number':35,'multiline':True]['text':' Required by old Boost.Random concept','line_number':51,'multiline':False]['text':'* Returns the smallest value that the generator can produce. ','line_number':54,'multiline':True]['text':'* Returns the largest value that the generator can produce. ','line_number':57,'multiline':True]['text':'*
     * Constructs an @c independent_bits_engine using the
     * default constructor of the base generator.
     ','line_number':61,'multiline':True]['text':'*
     * Constructs an @c independent_bits_engine, using seed as
     * the constructor argument for both base generators.
     ','line_number':67,'multiline':True]['text':'*
     * Constructs an @c independent_bits_engine, using seq as
     * the constructor argument for the base generator.
     ','line_number':77,'multiline':True]['text':'* Constructs an @c independent_bits_engine by copying @c base. ','line_number':85,'multiline':True]['text':'*
     * Contructs an @c independent_bits_engine with
     * values from the range defined by the input iterators first
     * and last.  first will be modified to point to the element
     * after the last one used.
     *
     * Throws: @c std::invalid_argument if the input range is too small.
     *
     * Exception Safety: Basic
     ','line_number':88,'multiline':True]['text':'*
     * Seeds an @c independent_bits_engine using the default
     * seed of the base generator.
     ','line_number':101,'multiline':True]['text':'*
     * Seeds an @c independent_bits_engine, using @c seed as the
     * seed for the base generator.
     ','line_number':107,'multiline':True]['text':'*
     * Seeds an @c independent_bits_engine, using @c seq to
     * seed the base generator.
     ','line_number':115,'multiline':True]['text':'*
     * Seeds an @c independent_bits_engine with
     * values from the range defined by the input iterators first
     * and last.  first will be modified to point to the element
     * after the last one used.
     *
     * Throws: @c std::invalid_argument if the input range is too small.
     *
     * Exception Safety: Basic
     ','line_number':123,'multiline':True]['text':'* Returns the next value of the generator. ','line_number':136,'multiline':True]['text':' While it may seem wasteful to recalculate this','line_number':139,'multiline':False]['text':' every time, both msvc and gcc can propagate','line_number':140,'multiline':False]['text':' constants, resolving this at compile time.','line_number':141,'multiline':False]['text':' increment n and try again.','line_number':154,'multiline':False]['text':' special case to avoid undefined behavior from shifting','line_number':163,'multiline':False]['text':'* Fills a range with random values ','line_number':191,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':196,'multiline':True]['text':'*
     * Writes the textual representation if the generator to a @c std::ostream.
     * The textual representation of the engine is the textual representation
     * of the base engine.
     ','line_number':206,'multiline':True]['text':'*
     * Reads the state of an @c independent_bits_engine from a
     * @c std::istream.
     ','line_number':217,'multiline':True]['text':'*
     * Returns: true iff the two @c independent_bits_engines will
     * produce the same sequence of values.
     ','line_number':227,'multiline':True]['text':'*
     * Returns: true iff the two @c independent_bits_engines will
     * produce different sequences of values.
     ','line_number':233,'multiline':True]['text':'/ \cond show_private','line_number':241,'multiline':False]['text':' We have a multiprecision integer type:','line_number':250,'multiline':False]['text':'/ \endcond','line_number':270,'multiline':False]['text':' namespace random','line_number':280,'multiline':False]['text':' namespace boost','line_number':281,'multiline':False]['text':' BOOST_RANDOM_INDEPENDENT_BITS_HPP','line_number':283,'multiline':False]