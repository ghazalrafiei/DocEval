['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file symbols.hpp','line_number':2,'multiline':False]['text':'/   Contains the Ternary Search Trie implementation.','line_number':3,'multiline':False]['text':'/ Based on the following papers:','line_number':4,'multiline':False]['text':'/ J. Bentley and R. Sedgewick. (1998) Ternary search trees. Dr. Dobbs Journal','line_number':5,'multiline':False]['text':'/ G. Badr and B.J. Oommen. (2005) Self-Adjusting of Ternary Search Tries Using','line_number':6,'multiline':False]['text':'/     Conditional Rotations and Randomized Heuristics','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'  Copyright 2007 David Jenkins.','line_number':9,'multiline':False]['text':'  Copyright 2007 Eric Niebler.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':12,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':13,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':14,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':19,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':34,'multiline':False]['text':' symbols (using a ternary search trie)','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' copies of this symbol table share the TST','line_number':47,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':77,'multiline':False]['text':' struct node : a node in the TST. ','line_number':78,'multiline':False]['text':'     The "eq" field stores the result pointer when ch is zero.','line_number':79,'multiline':False]['text':' ','line_number':80,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':126,'multiline':False]['text':' insert : insert a string into the TST','line_number':127,'multiline':False]['text':' ','line_number':128,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':168,'multiline':False]['text':' conditional rotation : the goal is to minimize the overall','line_number':169,'multiline':False]['text':'     weighted path length of each binary search tree','line_number':170,'multiline':False]['text':' ','line_number':171,'multiline':False]['text':' don't rotate top node in binary search tree','line_number':174,'multiline':False]['text':' calculate psi (the rotation condition)','line_number':177,'multiline':False]['text':' recalculate the tau values','line_number':183,'multiline':False]['text':' fixup links and swap nodes','line_number':186,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':202,'multiline':False]['text':' search : find a string in the TST','line_number':203,'multiline':False]['text':' ','line_number':204,'multiline':False]['text':' conditional rotation test','line_number':221,'multiline':False]['text':' it's a match!','line_number':228,'multiline':False]['text':' search for the longest match first','line_number':235,'multiline':False]['text':' search for a match ending here','line_number':239,'multiline':False]['text':' (c1 > p->ch)','line_number':256,'multiline':False]['text':' namespace boost::xpressive::detail','line_number':282,'multiline':False]