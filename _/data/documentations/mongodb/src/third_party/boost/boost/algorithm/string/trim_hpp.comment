['text':'  Boost string_algo library trim.hpp header file  ---------------------------//','line_number':1,'multiline':False]['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':'! \file
    Defines trim algorithms.
    Trim algorithms are used to remove trailing and leading spaces from a 
    sequence (string). Space is recognized using given locales.

    Parametric (\c _if) variants use a predicate (functor) to select which characters
    are to be trimmed.. 
    Functions take a selection predicate as a parameter, which is used to determine 
    whether a character is a space. Common predicates are provided in classification.hpp header.

','line_number':26,'multiline':True]['text':'  left trim  -----------------------------------------------//','line_number':41,'multiline':False]['text':'! Left trim - parametric','line_number':44,'multiline':False]['text':'!
            Remove all leading spaces from the input. 
            The supplied predicate is used to determine which characters are considered spaces.
            The result is a trimmed copy of the input. It is returned as a sequence 
            or copied to the output iterator

            \param Output An output iterator to which the result will be copied
            \param Input An input range
            \param IsSpace A unary predicate identifying spaces
            \return 
                An output iterator pointing just after the last inserted character or
                a copy of the input

               \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':45,'multiline':True]['text':'! Left trim - parametric','line_number':79,'multiline':False]['text':'!
            \overload
        ','line_number':80,'multiline':True]['text':'! Left trim - parametric','line_number':94,'multiline':False]['text':'!
            Remove all leading spaces from the input. 
            The result is a trimmed copy of the input.

            \param Input An input sequence
            \param Loc a locale used for 'space' classification
            \return A trimmed copy of the input

            \note This function provides the strong exception-safety guarantee
        ','line_number':95,'multiline':True]['text':'! Left trim','line_number':114,'multiline':False]['text':'!
            Remove all leading spaces from the input. The supplied predicate is 
            used to determine which characters are considered spaces.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param IsSpace A unary predicate identifying spaces
        ','line_number':115,'multiline':True]['text':'! Left trim','line_number':134,'multiline':False]['text':'!
            Remove all leading spaces from the input.
            The Input sequence is modified in-place.

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
        ','line_number':135,'multiline':True]['text':'  right trim  -----------------------------------------------//','line_number':150,'multiline':False]['text':'! Right trim - parametric','line_number':152,'multiline':False]['text':'!
            Remove all trailing spaces from the input.             
            The supplied predicate is used to determine which characters are considered spaces.
            The result is a trimmed copy of the input. It is returned as a sequence 
            or copied to the output iterator

            \param Output An output iterator to which the result will be copied
            \param Input An input range
            \param IsSpace A unary predicate identifying spaces
            \return 
                An output iterator pointing just after the last inserted character or
                a copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':153,'multiline':True]['text':'! Right trim - parametric','line_number':187,'multiline':False]['text':'!
            \overload
         ','line_number':188,'multiline':True]['text':'! Right trim','line_number':203,'multiline':False]['text':'!
            Remove all trailing spaces from the input. 
            The result is a trimmed copy of the input

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input

            \note This function provides the strong exception-safety guarantee
        ','line_number':204,'multiline':True]['text':'! Right trim - parametric','line_number':224,'multiline':False]['text':'!
            Remove all trailing spaces from the input.
            The supplied predicate is used to determine which characters are considered spaces.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param IsSpace A unary predicate identifying spaces
        ','line_number':225,'multiline':True]['text':'! Right trim','line_number':246,'multiline':False]['text':'!
            Remove all trailing spaces from the input. 
            The input sequence is modified in-place.

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
        ','line_number':247,'multiline':True]['text':'  both side trim  -----------------------------------------------//','line_number':262,'multiline':False]['text':'! Trim - parametric','line_number':264,'multiline':False]['text':'!
            Remove all trailing and leading spaces from the input. 
            The supplied predicate is used to determine which characters are considered spaces.
            The result is a trimmed copy of the input. It is returned as a sequence 
            or copied to the output iterator

            \param Output An output iterator to which the result will be copied
            \param Input An input range
            \param IsSpace A unary predicate identifying spaces
            \return 
                An output iterator pointing just after the last inserted character or
                a copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':265,'multiline':True]['text':'! Trim - parametric','line_number':305,'multiline':False]['text':'!
            \overload
         ','line_number':306,'multiline':True]['text':'! Trim','line_number':328,'multiline':False]['text':'!
            Remove all leading and trailing spaces from the input. 
            The result is a trimmed copy of the input

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input

            \note This function provides the strong exception-safety guarantee
        ','line_number':329,'multiline':True]['text':'! Trim','line_number':348,'multiline':False]['text':'!
            Remove all leading and trailing spaces from the input. 
            The supplied predicate is used to determine which characters are considered spaces.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param IsSpace A unary predicate identifying spaces
        ','line_number':349,'multiline':True]['text':'! Trim','line_number':364,'multiline':False]['text':'!
            Remove all leading and trailing spaces from the input. 
            The input sequence is modified in-place.

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
        ','line_number':365,'multiline':True]['text':' namespace algorithm ','line_number':380,'multiline':False]['text':' pull names to the boost namespace','line_number':382,'multiline':False]['text':' namespace boost','line_number':396,'multiline':False]['text':' BOOST_STRING_TRIM_HPP','line_number':398,'multiline':False]