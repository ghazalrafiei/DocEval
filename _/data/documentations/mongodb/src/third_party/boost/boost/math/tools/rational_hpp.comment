['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' This just allows dependency trackers to find the headers','line_number':46,'multiline':False]['text':' used in the above PP-magic.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' Forward declaration to keep two phase lookup happy:','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' namespace detail','line_number':181,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' Polynomial evaluation with runtime size.','line_number':184,'multiline':False]['text':' This requires a for-loop which may be more expensive than','line_number':185,'multiline':False]['text':' the loop expanded versions above:','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' Compile time sized polynomials, just inline forwarders to the','line_number':201,'multiline':False]['text':' implementations above:','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' Even polynomials are trivial: just square the argument!','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' Odd polynomials come next:','line_number':238,'multiline':False]['text':'','line_number':239,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' Rational functions: numerator and denominator must be','line_number':273,'multiline':False]['text':' equal in size.  These always have a for-loop and so may be less','line_number':274,'multiline':False]['text':' efficient than evaluating a pair of polynomials. However, there','line_number':275,'multiline':False]['text':' are some tricks we can use to prevent overflow that might otherwise','line_number':276,'multiline':False]['text':' occur in polynomial evaluation, if z is large.  This is important','line_number':277,'multiline':False]['text':' in our Lanczos code for example.','line_number':278,'multiline':False]['text':'','line_number':279,'multiline':False]['text':' namespace tools','line_number':325,'multiline':False]['text':' namespace math','line_number':326,'multiline':False]['text':' namespace boost','line_number':327,'multiline':False]['text':' BOOST_MATH_TOOLS_RATIONAL_HPP','line_number':329,'multiline':False]