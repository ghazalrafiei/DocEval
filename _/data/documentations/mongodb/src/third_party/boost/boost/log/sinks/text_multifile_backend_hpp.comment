['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   text_multifile_backend.hpp
 * \author Andrey Semashev
 * \date   09.06.2009
 *
 * The header contains implementation of a text multi-file sink backend.
 ','line_number':7,'multiline':True]['text':'!
     * An adapter class that allows to use regular formatters as file name generators.
     ','line_number':48,'multiline':True]['text':'! Functor result type','line_number':55,'multiline':False]['text':'! File name character type','line_number':57,'multiline':False]['text':'! The adopted formatter type','line_number':59,'multiline':False]['text':'! Formatting stream type','line_number':61,'multiline':False]['text':'! The adopted formatter','line_number':65,'multiline':False]['text':'! Formatted file name storage','line_number':67,'multiline':False]['text':'! Formatting stream','line_number':69,'multiline':False]['text':'!
         * Initializing constructor
         ','line_number':73,'multiline':True]['text':'!
         * Copy constructor
         ','line_number':83,'multiline':True]['text':'!
         * Assignment
         ','line_number':93,'multiline':True]['text':'!
         * The operator generates a file name based on the log record
         ','line_number':102,'multiline':True]['text':'!
     * The function adopts a log record formatter into a file name generator
     *
     * \param fmt The formatter function object to adopt
     * \param loc The locale to use to character code conversion and formatting
     ','line_number':117,'multiline':True]['text':' namespace file','line_number':130,'multiline':False]['text':'!
 * \brief An implementation of a text multiple files logging sink backend
 *
 * The sink backend puts formatted log records to one of the text files.
 * The particular file is chosen upon each record's attribute values, which allows
 * to distribute records into individual files or to group records related to
 * some entity or process in a separate file.
 ','line_number':133,'multiline':True]['text':'! Base type','line_number':144,'multiline':False]['text':'! Character type','line_number':148,'multiline':False]['text':'! String type to be used as a message text holder','line_number':150,'multiline':False]['text':'! File name composer functor type','line_number':153,'multiline':False]['text':'! \cond','line_number':157,'multiline':False]['text':'! \endcond','line_number':162,'multiline':False]['text':'!
     * Default constructor. The constructed sink backend has no file name composer and
     * thus will not write any files. All other parameters are set to their defaults.
     ','line_number':165,'multiline':True]['text':'!
     * Constructor. Creates a sink backend with the specified named parameters.
     * The following named parameters are supported:
     *
     * \li \c auto_newline_mode - Specifies automatic trailing newline insertion mode. Must be a value of
     *                            the \c auto_newline_mode enum. By default, is <tt>auto_newline_mode::insert_if_missing</tt>.
     ','line_number':171,'multiline':True]['text':'!
     * Destructor
     ','line_number':185,'multiline':True]['text':'!
     * The method sets file name composer functional object. Log record formatters are accepted, too.
     *
     * \param composer File name composer functor
     ','line_number':190,'multiline':True]['text':'!
     * Selects whether a trailing newline should be automatically inserted after every log record. See
     * \c auto_newline_mode description for the possible modes of operation.
     *
     * \param mode The trailing newline insertion mode.
     ','line_number':201,'multiline':True]['text':'!
     * The method writes the message to the sink
     ','line_number':209,'multiline':True]['text':'! Constructor implementation','line_number':216,'multiline':False]['text':'! Constructor implementation','line_number':222,'multiline':False]['text':'! The method sets the file name composer','line_number':225,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':227,'multiline':False]['text':' namespace sinks','line_number':230,'multiline':False]['text':' namespace log','line_number':232,'multiline':False]['text':' namespace boost','line_number':234,'multiline':False]['text':' BOOST_LOG_SINKS_TEXT_MULTIFILE_BACKEND_HPP_INCLUDED_','line_number':238,'multiline':False]