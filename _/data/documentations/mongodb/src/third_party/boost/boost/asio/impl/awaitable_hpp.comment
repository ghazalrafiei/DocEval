['text':'','line_number':1,'multiline':False]['text':' impl/awaitable.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' An awaitable_thread represents a thread-of-execution that is composed of one','line_number':41,'multiline':False]['text':' or more "stack frames", with each frame represented by an awaitable_frame.','line_number':42,'multiline':False]['text':' All execution occurs in the context of the awaitable_thread's executor. An','line_number':43,'multiline':False]['text':' awaitable_thread continues to "pump" the stack frames by repeatedly resuming','line_number':44,'multiline':False]['text':' the top stack frame until the stack is empty, or until ownership of the','line_number':45,'multiline':False]['text':' stack is transferred to another awaitable_thread object.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'                +------------------------------------+','line_number':48,'multiline':False]['text':'                | top_of_stack_                      |','line_number':49,'multiline':False]['text':'                |                                    V','line_number':50,'multiline':False]['text':' +--------------+---+                            +-----------------+','line_number':51,'multiline':False]['text':' |                  |                            |                 |','line_number':52,'multiline':False]['text':' | awaitable_thread |<---------------------------+ awaitable_frame |','line_number':53,'multiline':False]['text':' |                  |           attached_thread_ |                 |','line_number':54,'multiline':False]['text':' +--------------+---+           (Set only when   +---+-------------+','line_number':55,'multiline':False]['text':'                |               frames are being     |','line_number':56,'multiline':False]['text':'                |               actively pumped      | caller_','line_number':57,'multiline':False]['text':'                |               by a thread, and     |','line_number':58,'multiline':False]['text':'                |               then only for        V','line_number':59,'multiline':False]['text':'                |               the top frame.)  +-----------------+','line_number':60,'multiline':False]['text':'                |                                |                 |','line_number':61,'multiline':False]['text':'                |                                | awaitable_frame |','line_number':62,'multiline':False]['text':'                |                                |                 |','line_number':63,'multiline':False]['text':'                |                                +---+-------------+','line_number':64,'multiline':False]['text':'                |                                    |','line_number':65,'multiline':False]['text':'                |                                    | caller_','line_number':66,'multiline':False]['text':'                |                                    :','line_number':67,'multiline':False]['text':'                |                                    :','line_number':68,'multiline':False]['text':'                |                                    |','line_number':69,'multiline':False]['text':'                |                                    V','line_number':70,'multiline':False]['text':'                |                                +-----------------+','line_number':71,'multiline':False]['text':'                | bottom_of_stack_               |                 |','line_number':72,'multiline':False]['text':'                +------------------------------->| awaitable_frame |','line_number':73,'multiline':False]['text':'                                                 |                 |','line_number':74,'multiline':False]['text':'                                                 +-----------------+','line_number':75,'multiline':False]['text':' !defined(BOOST_ASIO_DISABLE_AWAITABLE_FRAME_RECYCLING)','line_number':97,'multiline':False]['text':' The frame starts in a suspended state until the awaitable_thread object','line_number':99,'multiline':False]['text':' pumps the stack.','line_number':100,'multiline':False]['text':' On final suspension the frame is popped from the top of the stack.','line_number':106,'multiline':False]['text':' This await transformation obtains the associated executor of the thread of','line_number':169,'multiline':False]['text':' execution.','line_number':170,'multiline':False]['text':' This await transformation obtains the associated cancellation state of the','line_number':195,'multiline':False]['text':' thread of execution.','line_number':196,'multiline':False]['text':' This await transformation resets the associated cancellation state.','line_number':221,'multiline':False]['text':' This await transformation resets the associated cancellation state.','line_number':246,'multiline':False]['text':' This await transformation resets the associated cancellation state.','line_number':275,'multiline':False]['text':' This await transformation determines whether cancellation is propagated as','line_number':309,'multiline':False]['text':' an exception.','line_number':310,'multiline':False]['text':' This await transformation sets whether cancellation is propagated as an','line_number':336,'multiline':False]['text':' exception.','line_number':337,'multiline':False]['text':' This await transformation is used to run an async operation's initiation','line_number':364,'multiline':False]['text':' function object after the coroutine has been suspended. This ensures that','line_number':365,'multiline':False]['text':' immediate resumption of the coroutine in another thread does not cause a','line_number':366,'multiline':False]['text':' race condition.','line_number':367,'multiline':False]['text':' Access the awaitable thread's has_context_switched_ flag.','line_number':400,'multiline':False]['text':' Construct from the entry point of a new thread of execution.','line_number':608,'multiline':False]['text':' Transfer ownership from another awaitable_thread.','line_number':621,'multiline':False]['text':' Clean up with a last ditch effort to ensure the thread is unwound within','line_number':627,'multiline':False]['text':' the context of the executor.','line_number':628,'multiline':False]['text':' Coroutine "stack unwinding" must be performed through the executor.','line_number':633,'multiline':False]['text':' Launch a new thread of execution.','line_number':698,'multiline':False]['text':' Repeatedly resume the top stack frame until the stack is empty or until it','line_number':708,'multiline':False]['text':' has been transferred to another resumable_thread object.','line_number':709,'multiline':False]['text':' namespace detail','line_number':727,'multiline':False]['text':' namespace asio','line_number':728,'multiline':False]['text':' namespace boost','line_number':729,'multiline':False]['text':' namespace std','line_number':742,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_COROUTINE)','line_number':744,'multiline':False]['text':' namespace std::experimental','line_number':754,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_COROUTINE)','line_number':756,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':757,'multiline':False]['text':' BOOST_ASIO_IMPL_AWAITABLE_HPP','line_number':761,'multiline':False]