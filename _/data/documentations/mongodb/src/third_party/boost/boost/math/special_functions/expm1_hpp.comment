['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' This is the only way we can avoid','line_number':27,'multiline':False]['text':' warning: non-standard suffix on floating constant [-Wpedantic]','line_number':28,'multiline':False]['text':' when building with -Wall -pedantic.  Neither __extension__','line_number':29,'multiline':False]['text':' nor #pragma diagnostic ignored work :(','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' Functor expm1_series returns the next term in the Taylor series','line_number':39,'multiline':False]['text':' x^k / k!','line_number':40,'multiline':False]['text':' each time that operator() is invoked.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' Algorithm expm1 is part of C99, but is not yet provided by many compilers.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' This version uses a Taylor series expansion for 0.5 > |x| > epsilon.','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' namespace detail','line_number':259,'multiline':False]['text':' pol ','line_number':262,'multiline':True]['text':' namespace math','line_number':313,'multiline':False]['text':' namespace boost','line_number':314,'multiline':False]['text':' BOOST_MATH_HYPOT_INCLUDED','line_number':316,'multiline':False]