['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file pass_through.hpp','line_number':2,'multiline':False]['text':'/','line_number':3,'multiline':False]['text':'/ Definition of the pass_through transform, which is the default transform','line_number':4,'multiline':False]['text':'/ of all of the expression generator metafunctions such as unary_plus<>, plus<>','line_number':5,'multiline':False]['text':'/ and nary_expr<>.','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':8,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':9,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':10,'multiline':False]['text':' function 'xxx' marked as __forceinline not inlined','line_number':29,'multiline':False]['text':'/ \param e An expression','line_number':55,'multiline':False]['text':'/ \return \c e','line_number':56,'multiline':False]['text':'/ \throw nothrow','line_number':57,'multiline':False]['text':' namespace detail','line_number':70,'multiline':False]['text':'/ \brief A PrimitiveTransform that transforms the child expressions','line_number':72,'multiline':False]['text':'/ of an expression node according to the corresponding children of','line_number':73,'multiline':False]['text':'/ a Grammar.','line_number':74,'multiline':False]['text':'/','line_number':75,'multiline':False]['text':'/ Given a Grammar such as <tt>plus\<T0, T1\></tt>, an expression type','line_number':76,'multiline':False]['text':'/ that matches the grammar such as <tt>plus\<E0, E1\>::type</tt>, a','line_number':77,'multiline':False]['text':'/ state \c S and a data \c V, the result of applying the','line_number':78,'multiline':False]['text':'/ <tt>pass_through\<plus\<T0, T1\> \></tt> transform is:','line_number':79,'multiline':False]['text':'/','line_number':80,'multiline':False]['text':'/ \code','line_number':81,'multiline':False]['text':'/ plus<','line_number':82,'multiline':False]['text':'/     T0::result<T0(E0, S, V)>::type','line_number':83,'multiline':False]['text':'/   , T1::result<T1(E1, S, V)>::type','line_number':84,'multiline':False]['text':'/ >::type','line_number':85,'multiline':False]['text':'/ \endcode','line_number':86,'multiline':False]['text':'/','line_number':87,'multiline':False]['text':'/ The above demonstrates how child transforms and child expressions','line_number':88,'multiline':False]['text':'/ are applied pairwise, and how the results are reassembled into a new','line_number':89,'multiline':False]['text':'/ expression node with the same tag type as the original.','line_number':90,'multiline':False]['text':'/','line_number':91,'multiline':False]['text':'/ The explicit use of <tt>pass_through\<\></tt> is not usually needed,','line_number':92,'multiline':False]['text':'/ since the expression generator metafunctions such as','line_number':93,'multiline':False]['text':'/ <tt>plus\<\></tt> have <tt>pass_through\<\></tt> as their default','line_number':94,'multiline':False]['text':'/ transform. So, for instance, these are equivalent:','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':'/ \code','line_number':97,'multiline':False]['text':'/ // Within a grammar definition, these are equivalent:','line_number':98,'multiline':False]['text':'/ when< plus<X, Y>, pass_through< plus<X, Y> > >','line_number':99,'multiline':False]['text':'/ when< plus<X, Y>, plus<X, Y> >','line_number':100,'multiline':False]['text':'/ when< plus<X, Y> > // because of when<class X, class Y=X>','line_number':101,'multiline':False]['text':'/ plus<X, Y>         // because plus<> is both a','line_number':102,'multiline':False]['text':'/                    //   grammar and a transform','line_number':103,'multiline':False]['text':'/ \endcode','line_number':104,'multiline':False]['text':'/','line_number':105,'multiline':False]['text':'/ For example, consider the following transform that promotes all','line_number':106,'multiline':False]['text':'/ \c float terminals in an expression to \c double.','line_number':107,'multiline':False]['text':'/','line_number':108,'multiline':False]['text':'/ \code','line_number':109,'multiline':False]['text':'/ // This transform finds all float terminals in an expression and promotes','line_number':110,'multiline':False]['text':'/ // them to doubles.','line_number':111,'multiline':False]['text':'/ struct Promote','line_number':112,'multiline':False]['text':'/  : or_<','line_number':113,'multiline':False]['text':'/         when<terminal<float>, terminal<double>::type(_value) >','line_number':114,'multiline':False]['text':'/         // terminal<>'s default transform is a no-op:','line_number':115,'multiline':False]['text':'/       , terminal<_>','line_number':116,'multiline':False]['text':'/         // nary_expr<> has a pass_through<> transform:','line_number':117,'multiline':False]['text':'/       , nary_expr<_, vararg<Promote> >','line_number':118,'multiline':False]['text':'/     >','line_number':119,'multiline':False]['text':'/ {};','line_number':120,'multiline':False]['text':'/ \endcode','line_number':121,'multiline':False]['text':' = deduce_domain','line_number':122,'multiline':True]['text':'/ INTERNAL ONLY','line_number':132,'multiline':False]['text':'/','line_number':133,'multiline':False]['text':' namespace boost::proto','line_number':139,'multiline':False]