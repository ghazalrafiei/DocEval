['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'/ \file when.hpp','line_number':12,'multiline':False]['text':'/ Definition of when transform.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':15,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':16,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':17,'multiline':False]['text':'/ \brief A grammar element and a PrimitiveTransform that associates','line_number':35,'multiline':False]['text':'/ a transform with the grammar.','line_number':36,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ Use <tt>when\<\></tt> to override a grammar's default transform','line_number':38,'multiline':False]['text':'/ with a custom transform. It is for used when composing larger','line_number':39,'multiline':False]['text':'/ transforms by associating smaller transforms with individual','line_number':40,'multiline':False]['text':'/ rules in your grammar, as in the following transform which','line_number':41,'multiline':False]['text':'/ counts the number of terminals in an expression.','line_number':42,'multiline':False]['text':'/','line_number':43,'multiline':False]['text':'/ \code','line_number':44,'multiline':False]['text':'/ // Count the terminals in an expression tree.','line_number':45,'multiline':False]['text':'/ // Must be invoked with initial state == mpl::int_<0>().','line_number':46,'multiline':False]['text':'/ struct CountLeaves','line_number':47,'multiline':False]['text':'/   : or_<','line_number':48,'multiline':False]['text':'/         when<terminal<_>, mpl::next<_state>()>','line_number':49,'multiline':False]['text':'/       , otherwise<fold<_, _state, CountLeaves> >','line_number':50,'multiline':False]['text':'/     >','line_number':51,'multiline':False]['text':'/ {};','line_number':52,'multiline':False]['text':'/ \endcode','line_number':53,'multiline':False]['text':'/','line_number':54,'multiline':False]['text':'/ The <tt>when\<G, R(A0,A1,...)\></tt> form accepts either a','line_number':55,'multiline':False]['text':'/ CallableTransform or an ObjectTransform as its second parameter.','line_number':56,'multiline':False]['text':'/ <tt>when\<\></tt> uses <tt>is_callable\<R\>::value</tt> to','line_number':57,'multiline':False]['text':'/ distinguish between the two, and uses <tt>call\<\></tt> to','line_number':58,'multiline':False]['text':'/ evaluate CallableTransforms and <tt>make\<\></tt> to evaluate','line_number':59,'multiline':False]['text':'/ ObjectTransforms.','line_number':60,'multiline':False]['text':'/ \brief A grammar element and a PrimitiveTransform that associates','line_number':67,'multiline':False]['text':'/ a transform with the grammar.','line_number':68,'multiline':False]['text':'/','line_number':69,'multiline':False]['text':'/ Use <tt>when\<\></tt> to override a grammar's default transform','line_number':70,'multiline':False]['text':'/ with a custom transform. It is for used when composing larger','line_number':71,'multiline':False]['text':'/ transforms by associating smaller transforms with individual','line_number':72,'multiline':False]['text':'/ rules in your grammar, as in the following transform which','line_number':73,'multiline':False]['text':'/ counts the number of terminals in an expression.','line_number':74,'multiline':False]['text':'/','line_number':75,'multiline':False]['text':'/ \code','line_number':76,'multiline':False]['text':'/ // Count the terminals in an expression tree.','line_number':77,'multiline':False]['text':'/ // Must be invoked with initial state == mpl::int_<0>().','line_number':78,'multiline':False]['text':'/ struct CountLeaves','line_number':79,'multiline':False]['text':'/   : or_<','line_number':80,'multiline':False]['text':'/         when<terminal<_>, mpl::next<_state>()>','line_number':81,'multiline':False]['text':'/       , otherwise<fold<_, _state, CountLeaves> >','line_number':82,'multiline':False]['text':'/     >','line_number':83,'multiline':False]['text':'/ {};','line_number':84,'multiline':False]['text':'/ \endcode','line_number':85,'multiline':False]['text':'/','line_number':86,'multiline':False]['text':'/ The <tt>when\<G, R(A0,A1,...)\></tt> form accepts either a','line_number':87,'multiline':False]['text':'/ CallableTransform or an ObjectTransform as its second parameter.','line_number':88,'multiline':False]['text':'/ <tt>when\<\></tt> uses <tt>is_callable\<R\>::value</tt> to','line_number':89,'multiline':False]['text':'/ distinguish between the two, and uses <tt>call\<\></tt> to','line_number':90,'multiline':False]['text':'/ evaluate CallableTransforms and <tt>make\<\></tt> to evaluate','line_number':91,'multiline':False]['text':'/ ObjectTransforms.','line_number':92,'multiline':False]