['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':' (C) Copyright John Maddock 2000.','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2015.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/move for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' The alignment and Type traits implementation comes from','line_number':11,'multiline':False]['text':' John Maddock's TypeTraits library.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Some other tricks come from Howard Hinnant's papers and StackOverflow replies','line_number':14,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':15,'multiline':False]['text':' move/detail','line_number':30,'multiline':False]['text':' other','line_number':32,'multiline':False]['text':' std','line_number':35,'multiline':False]['text':'Use of Boost.TypeTraits leads to long preprocessed source code due to','line_number':38,'multiline':False]['text':'MPL dependencies. We'll use intrinsics directly and make or own','line_number':39,'multiline':False]['text':'simplified version of TypeTraits.','line_number':40,'multiline':False]['text':'If someday Boost.TypeTraits dependencies are minimized, we should','line_number':41,'multiline':False]['text':'revisit this file redirecting code to Boost.TypeTraits traits.','line_number':42,'multiline':False]['text':'These traits don't care about volatile, reference or other checks','line_number':44,'multiline':False]['text':'made by Boost.TypeTraits because no volatile or reference types','line_number':45,'multiline':False]['text':'can be hold in Boost.Containers. This helps to avoid any Boost.TypeTraits','line_number':46,'multiline':False]['text':'dependency.','line_number':47,'multiline':False]['text':' Helper macros for builtin compiler support.','line_number':49,'multiline':False]['text':' If your compiler has builtin support for any of the following','line_number':50,'multiline':False]['text':' traits concepts, then redefine the appropriate macros to pick','line_number':51,'multiline':False]['text':' up on the compiler support:','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' (these should largely ignore cv-qualifiers)','line_number':54,'multiline':False]['text':' BOOST_MOVE_IS_POD(T) should evaluate to true if T is a POD type','line_number':55,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_CONSTRUCTOR(T) should evaluate to true if "T x;" has no effect','line_number':56,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_COPY(T) should evaluate to true if T(t) <==> memcpy','line_number':57,'multiline':False]['text':' (Note: this trait does not guarantee T is copy constructible, the copy constructor could be deleted but still be trivial)','line_number':58,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_MOVE_CONSTRUCTOR(T) should evaluate to true if T(boost::move(t)) <==> memcpy','line_number':59,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_ASSIGN(T) should evaluate to true if t = u <==> memcpy','line_number':60,'multiline':False]['text':' (Note: this trait does not guarantee T is assignable , the copy assignmen could be deleted but still be trivial)','line_number':61,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_MOVE_ASSIGN(T) should evaluate to true if t = boost::move(u) <==> memcpy','line_number':62,'multiline':False]['text':' BOOST_MOVE_HAS_TRIVIAL_DESTRUCTOR(T) should evaluate to true if ~T() has no effect','line_number':63,'multiline':False]['text':' BOOST_MOVE_HAS_NOTHROW_CONSTRUCTOR(T) should evaluate to true if "T x;" can not throw','line_number':64,'multiline':False]['text':' BOOST_MOVE_HAS_NOTHROW_COPY(T) should evaluate to true if T(t) can not throw','line_number':65,'multiline':False]['text':' BOOST_MOVE_HAS_NOTHROW_ASSIGN(T) should evaluate to true if t = u can not throw','line_number':66,'multiline':False]['text':' BOOST_MOVE_IS_ENUM(T) should evaluate to true it t is a union type.','line_number':67,'multiline':False]['text':' BOOST_MOVE_HAS_NOTHROW_MOVE_CONSTRUCTOR(T) should evaluate to true if T has a non-throwing move constructor.','line_number':68,'multiline':False]['text':' BOOST_MOVE_HAS_NOTHROW_MOVE_ASSIGN(T) should evaluate to true if T has a non-throwing move assignment operator.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' The following can also be defined: when detected our implementation is greatly simplified.','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' BOOST_ALIGNMENT_OF(T) should evaluate to the alignment requirements of type T.','line_number':73,'multiline':False]['text':' Metrowerks compiler is acquiring intrinsic type traits support','line_number':76,'multiline':False]['text':' post version 8.  We hook into the published interface to pick up','line_number':77,'multiline':False]['text':' user defined specializations as well as compiler intrinsics as','line_number':78,'multiline':False]['text':' and when they become available:','line_number':79,'multiline':False]['text':'    BOOST_MOVE_HAS_TRAIT','line_number':114,'multiline':False]['text':'    BOOST_MOVE_IS_UNION','line_number':123,'multiline':False]['text':'    BOOST_MOVE_IS_ENUM','line_number':128,'multiline':False]['text':'    BOOST_MOVE_IS_POD','line_number':133,'multiline':False]['text':'    BOOST_MOVE_IS_EMPTY','line_number':138,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_CONSTRUCTOR','line_number':143,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_COPY','line_number':150,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_ASSIGN','line_number':157,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_DESTRUCTOR','line_number':164,'multiline':False]['text':'    BOOST_MOVE_HAS_NOTHROW_CONSTRUCTOR','line_number':171,'multiline':False]['text':'    BOOST_MOVE_HAS_NOTHROW_COPY','line_number':178,'multiline':False]['text':'    BOOST_MOVE_HAS_NOTHROW_ASSIGN','line_number':185,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_MOVE_CONSTRUCTOR','line_number':192,'multiline':False]['text':'    BOOST_MOVE_HAS_TRIVIAL_MOVE_ASSIGN','line_number':199,'multiline':False]['text':'    BOOST_MOVE_HAS_NOTHROW_MOVE_CONSTRUCTOR','line_number':206,'multiline':False]['text':'    BOOST_MOVE_HAS_NOTHROW_MOVE_ASSIGN','line_number':213,'multiline':False]['text':'    BOOST_MOVE_ALIGNMENT_OF','line_number':220,'multiline':False]['text':'#if defined(BOOST_CLANG)','line_number':223,'multiline':False]['text':' __is_assignable / __is_constructible implemented','line_number':257,'multiline':False]['text':' BOOST_MOVE_ALIGNMENT_OF','line_number':336,'multiline':False]['text':' GCC sometimes lies about alignment requirements','line_number':338,'multiline':False]['text':' of type double on 32-bit unix platforms, use the','line_number':339,'multiline':False]['text':' old implementation instead in that case:','line_number':340,'multiline':False]['text':'Fallback definitions','line_number':379,'multiline':False]['text':'in some compilers the intrinsic is limited to class types so add scalar and void','line_number':388,'multiline':False]['text':'////////////////////////','line_number':482,'multiline':False]['text':'    is_reference','line_number':483,'multiline':False]['text':'////////////////////////','line_number':484,'multiline':False]['text':'////////////////////////','line_number':499,'multiline':False]['text':'    is_pointer','line_number':500,'multiline':False]['text':'////////////////////////','line_number':501,'multiline':False]['text':'////////////////////////','line_number':510,'multiline':False]['text':'       is_const','line_number':511,'multiline':False]['text':'////////////////////////','line_number':512,'multiline':False]['text':'////////////////////////','line_number':521,'multiline':False]['text':'       unvoid_ref','line_number':522,'multiline':False]['text':'////////////////////////','line_number':523,'multiline':False]['text':'////////////////////////','line_number':534,'multiline':False]['text':'    add_const_reference','line_number':535,'multiline':False]['text':'////////////////////////','line_number':536,'multiline':False]['text':'////////////////////////','line_number':545,'multiline':False]['text':'    add_const_if_c','line_number':546,'multiline':False]['text':'////////////////////////','line_number':547,'multiline':False]['text':'////////////////////////','line_number':553,'multiline':False]['text':'    remove_const','line_number':554,'multiline':False]['text':'////////////////////////','line_number':555,'multiline':False]['text':'////////////////////////','line_number':564,'multiline':False]['text':'    remove_cv','line_number':565,'multiline':False]['text':'////////////////////////','line_number':566,'multiline':False]['text':'////////////////////////','line_number':572,'multiline':False]['text':'    remove_cvref','line_number':573,'multiline':False]['text':'////////////////////////','line_number':574,'multiline':False]['text':'////////////////////////','line_number':581,'multiline':False]['text':'    make_unsigned','line_number':582,'multiline':False]['text':'////////////////////////','line_number':583,'multiline':False]['text':'////////////////////////','line_number':599,'multiline':False]['text':'    is_floating_point','line_number':600,'multiline':False]['text':'////////////////////////','line_number':601,'multiline':False]['text':'////////////////////////','line_number':612,'multiline':False]['text':'    is_integral','line_number':613,'multiline':False]['text':'////////////////////////','line_number':614,'multiline':False]['text':'////////////////////////////////////','line_number':645,'multiline':False]['text':'          remove_all_extents','line_number':646,'multiline':False]['text':'////////////////////////////////////','line_number':647,'multiline':False]['text':'////////////////////////','line_number':660,'multiline':False]['text':'    is_scalar','line_number':661,'multiline':False]['text':'////////////////////////','line_number':662,'multiline':False]['text':'////////////////////////','line_number':667,'multiline':False]['text':'       is_void','line_number':668,'multiline':False]['text':'////////////////////////','line_number':669,'multiline':False]['text':'////////////////////////////////////','line_number':683,'multiline':False]['text':'          is_array','line_number':684,'multiline':False]['text':'////////////////////////////////////','line_number':685,'multiline':False]['text':'////////////////////////////////////','line_number':698,'multiline':False]['text':'           is_member_pointer','line_number':699,'multiline':False]['text':'////////////////////////////////////','line_number':700,'multiline':False]['text':'////////////////////////////////////','line_number':709,'multiline':False]['text':'          is_nullptr_t','line_number':710,'multiline':False]['text':'////////////////////////////////////','line_number':711,'multiline':False]['text':'////////////////////////////////////','line_number':732,'multiline':False]['text':'          is_function','line_number':733,'multiline':False]['text':'////////////////////////////////////','line_number':734,'multiline':False]['text':'Inspired by libc++, thanks to Howard Hinnant','line_number':735,'multiline':False]['text':'For a function to pointer an lvalue of function type T can be implicitly converted to a prvalue','line_number':736,'multiline':False]['text':'pointer to that function. This does not apply to non-static member functions because lvalues','line_number':737,'multiline':False]['text':'that refer to non-static member functions do not exist.','line_number':738,'multiline':False]['text':'Filter out:','line_number':748,'multiline':False]['text':' - class types that might have implicit conversions','line_number':749,'multiline':False]['text':' - void (to avoid forming a reference to void later)','line_number':750,'multiline':False]['text':' - references (e.g.: filtering reference to functions)','line_number':751,'multiline':False]['text':' - nullptr_t (convertible to pointer)','line_number':752,'multiline':False]['text':'////////////////////////////////////','line_number':770,'multiline':False]['text':'       is_union','line_number':771,'multiline':False]['text':'////////////////////////////////////','line_number':772,'multiline':False]['text':'////////////////////////////////////','line_number':782,'multiline':False]['text':'             is_class','line_number':783,'multiline':False]['text':'////////////////////////////////////','line_number':784,'multiline':False]['text':'////////////////////////////////////','line_number':792,'multiline':False]['text':'             is_arithmetic','line_number':793,'multiline':False]['text':'////////////////////////////////////','line_number':794,'multiline':False]['text':'////////////////////////////////////','line_number':802,'multiline':False]['text':'    is_member_function_pointer','line_number':803,'multiline':False]['text':'////////////////////////////////////','line_number':804,'multiline':False]['text':'////////////////////////////////////','line_number':821,'multiline':False]['text':'             is_enum','line_number':822,'multiline':False]['text':'////////////////////////////////////','line_number':823,'multiline':False]['text':'Based on (http://howardhinnant.github.io/TypeHiearchy.pdf)','line_number':825,'multiline':False]['text':'////////////////////////////////////','line_number':845,'multiline':False]['text':'       is_pod','line_number':846,'multiline':False]['text':'////////////////////////////////////','line_number':847,'multiline':False]['text':'for non-c++11 compilers, a safe fallback','line_number':849,'multiline':False]['text':'////////////////////////////////////','line_number':857,'multiline':False]['text':'             is_empty','line_number':858,'multiline':False]['text':'////////////////////////////////////','line_number':859,'multiline':False]['text':' hh compiler bug workaround','line_number':865,'multiline':False]['text':'////////////////////////////////////','line_number':905,'multiline':False]['text':'       is_copy_constructible','line_number':906,'multiline':False]['text':'////////////////////////////////////','line_number':907,'multiline':False]['text':' Intel compiler has problems with SFINAE for copy constructors and deleted functions:','line_number':917,'multiline':False]['text':'','line_number':918,'multiline':False]['text':' error: function *function_name* cannot be referenced -- it is a deleted function','line_number':919,'multiline':False]['text':' static yes_type test(U&, decltype(U(boost::declval<U&>()))* = 0);','line_number':920,'multiline':False]['text':'                                                        ^ ','line_number':921,'multiline':False]['text':' MSVC 12.0 (Visual 2013) has problems when the copy constructor has been deleted. See:','line_number':922,'multiline':False]['text':' https://connect.microsoft.com/VisualStudio/feedback/details/800328/std-is-copy-constructible-is-broken','line_number':923,'multiline':False]['text':'////////////////////////////////////','line_number':941,'multiline':False]['text':'       is_copy_assignable','line_number':942,'multiline':False]['text':'////////////////////////////////////','line_number':943,'multiline':False]['text':' Intel compiler has problems with SFINAE for copy constructors and deleted functions:','line_number':953,'multiline':False]['text':'','line_number':954,'multiline':False]['text':' error: function *function_name* cannot be referenced -- it is a deleted function','line_number':955,'multiline':False]['text':' static boost::type_traits::yes_type test(T1&, decltype(T1(boost::declval<T1&>()))* = 0);','line_number':956,'multiline':False]['text':'                                                        ^ ','line_number':957,'multiline':False]['text':'','line_number':958,'multiline':False]['text':' MSVC 12.0 (Visual 2013) has problems when the copy constructor has been deleted. See:','line_number':959,'multiline':False]['text':' https://connect.microsoft.com/VisualStudio/feedback/details/800328/std-is-copy-constructible-is-broken','line_number':960,'multiline':False]['text':'////////////////////////////////////','line_number':975,'multiline':False]['text':'       is_trivially_destructible','line_number':976,'multiline':False]['text':'////////////////////////////////////','line_number':977,'multiline':False]['text':'////////////////////////////////////','line_number':982,'multiline':False]['text':'       is_trivially_default_constructible','line_number':983,'multiline':False]['text':'////////////////////////////////////','line_number':984,'multiline':False]['text':'////////////////////////////////////','line_number':989,'multiline':False]['text':'       is_trivially_copy_constructible','line_number':990,'multiline':False]['text':'////////////////////////////////////','line_number':991,'multiline':False]['text':'////////////////////////////////////','line_number':998,'multiline':False]['text':'       is_trivially_move_constructible','line_number':999,'multiline':False]['text':'////////////////////////////////////','line_number':1000,'multiline':False]['text':'////////////////////////////////////','line_number':1005,'multiline':False]['text':'       is_trivially_copy_assignable','line_number':1006,'multiline':False]['text':'////////////////////////////////////','line_number':1007,'multiline':False]['text':'////////////////////////////////////','line_number':1014,'multiline':False]['text':'       is_trivially_move_assignable','line_number':1015,'multiline':False]['text':'////////////////////////////////////','line_number':1016,'multiline':False]['text':'////////////////////////////////////','line_number':1021,'multiline':False]['text':'       is_nothrow_default_constructible','line_number':1022,'multiline':False]['text':'////////////////////////////////////','line_number':1023,'multiline':False]['text':'////////////////////////////////////','line_number':1028,'multiline':False]['text':'    is_nothrow_copy_constructible','line_number':1029,'multiline':False]['text':'////////////////////////////////////','line_number':1030,'multiline':False]['text':'////////////////////////////////////','line_number':1035,'multiline':False]['text':'    is_nothrow_move_constructible','line_number':1036,'multiline':False]['text':'////////////////////////////////////','line_number':1037,'multiline':False]['text':'////////////////////////////////////','line_number':1042,'multiline':False]['text':'       is_nothrow_copy_assignable','line_number':1043,'multiline':False]['text':'////////////////////////////////////','line_number':1044,'multiline':False]['text':'////////////////////////////////////','line_number':1049,'multiline':False]['text':'    is_nothrow_move_assignable','line_number':1050,'multiline':False]['text':'////////////////////////////////////','line_number':1051,'multiline':False]['text':'////////////////////////////////////','line_number':1056,'multiline':False]['text':'    is_nothrow_swappable','line_number':1057,'multiline':False]['text':'////////////////////////////////////','line_number':1058,'multiline':False]['text':'////////////////////////////////////','line_number':1065,'multiline':False]['text':'       alignment_of','line_number':1066,'multiline':False]['text':'////////////////////////////////////','line_number':1067,'multiline':False]['text':' With MSVC both the native __alignof operator','line_number':1085,'multiline':False]['text':' and our own logic gets things wrong from time to time :-(','line_number':1086,'multiline':False]['text':' Using a combination of the two seems to make the most of a bad job:','line_number':1087,'multiline':False]['text':'///////////////////////////','line_number':1109,'multiline':False]['text':'    max_align_t','line_number':1110,'multiline':False]['text':'///////////////////////////','line_number':1111,'multiline':False]['text':'This is not standard, but should work with all compilers','line_number':1112,'multiline':False]['text':'///////////////////////////','line_number':1133,'multiline':False]['text':'    aligned_storage','line_number':1134,'multiline':False]['text':'///////////////////////////','line_number':1135,'multiline':False]['text':' Special version for usual alignments on x86 MSVC because it might crash','line_number':1139,'multiline':False]['text':' when passsing aligned types by value even for 8 byte alignment.','line_number':1140,'multiline':False]['text':'','line_number':1187,'multiline':False]['text':'Up to 4K alignment (typical page size)','line_number':1189,'multiline':False]['text':' Workaround for bogus [-Wignored-attributes] warning on GCC 6.x/7.x: don't use a type that "directly" carries the alignment attribute.','line_number':1206,'multiline':False]['text':' See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82270','line_number':1207,'multiline':False]['text':'BOOST_NO_ALIGNMENT','line_number':1222,'multiline':False]['text':'End of search defaults to max_align_t','line_number':1241,'multiline':False]['text':'Now define a search list through types','line_number':1246,'multiline':False]['text':'','line_number':1252,'multiline':False]['text':'Sanity checks for input parameters','line_number':1276,'multiline':False]['text':'Sanity checks for output type','line_number':1279,'multiline':False]['text':'Just in case someone instantiates aligned_storage','line_number':1285,'multiline':False]['text':'instead of aligned_storage::type (typical error).','line_number':1286,'multiline':False]['text':'namespace move_detail {','line_number':1291,'multiline':False]['text':'namespace boost {','line_number':1292,'multiline':False]['text':'#ifndef BOOST_MOVE_DETAIL_TYPE_TRAITS_HPP','line_number':1296,'multiline':False]