['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2007-2014','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' The option that yields to non-floating point 1/sqrt(2) alpha is taken','line_number':13,'multiline':False]['text':' from the scapegoat tree implementation of the PSPP library.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':16,'multiline':False]['text':'std::pair','line_number':41,'multiline':False]['text':'/ @cond','line_number':51,'multiline':False]['text':'///////////////////////////////////////////////////////////','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':'       Halpha for fixed floating_point<false> option','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':'///////////////////////////////////////////////////////////','line_number':59,'multiline':False]['text':'! Returns floor(log2(n)/log2(sqrt(2))) -> floor(2*log2(n))','line_number':61,'multiline':False]['text':'! Undefined if N is 0.','line_number':62,'multiline':False]['text':'!','line_number':63,'multiline':False]['text':'! This function does not use float point operations.','line_number':64,'multiline':False]['text':'///////////////////////////////////////////////////////////','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':'       Halpha for fixed floating_point<true> option','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':'///////////////////////////////////////////////////////////','line_number':93,'multiline':False]['text':'//////////////////////////////////////////////////////////','line_number':103,'multiline':False]['text':' This function must return "floor(log2(1/alpha(n)))" ->','line_number':104,'multiline':False]['text':'    floor(log2(n)/log(1/alpha)) ->','line_number':105,'multiline':False]['text':'    floor(log2(n)/-log2(alpha))','line_number':106,'multiline':False]['text':'    floor(log2(n)*(1/-log2(alpha)))','line_number':107,'multiline':False]['text':'//////////////////////////////////////////////////////////','line_number':108,'multiline':False]['text':'Since the function will be repeatedly called','line_number':113,'multiline':False]['text':'precalculate constant data to avoid repeated','line_number':114,'multiline':False]['text':'calls to log and division.','line_number':115,'multiline':False]['text':'This will store 1/(-std::log2(alpha_))','line_number':116,'multiline':False]['text':' ~1/sqrt(2)','line_number':141,'multiline':False]['text':'This specialization uses alpha = 1/sqrt(2)','line_number':170,'multiline':False]['text':'without using floating point operations','line_number':171,'multiline':False]['text':'Downside: alpha CAN't be changed.','line_number':172,'multiline':False]['text':'alpha CAN't be changed.','line_number':184,'multiline':False]['text':'namespace detail{','line_number':201,'multiline':False]['text':'/ @endcond','line_number':209,'multiline':False]['text':'! The class template sgtree is an intrusive scapegoat tree container, that','line_number':211,'multiline':False]['text':'! is used to construct intrusive sg_set and sg_multiset containers.','line_number':212,'multiline':False]['text':'! The no-throw guarantee holds only, if the value_compare object','line_number':213,'multiline':False]['text':'! doesn't throw.','line_number':214,'multiline':False]['text':'!','line_number':215,'multiline':False]['text':'! The template parameter \c T is the type to be managed by the container.','line_number':216,'multiline':False]['text':'! The user can specify additional options and if no options are provided','line_number':217,'multiline':False]['text':'! default options are used.','line_number':218,'multiline':False]['text':'!','line_number':219,'multiline':False]['text':'! The container supports the following options:','line_number':220,'multiline':False]['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':221,'multiline':False]['text':'! \c floating_point<>, \c size_type<> and','line_number':222,'multiline':False]['text':'! \c compare<>.','line_number':223,'multiline':False]['text':'/ @cond','line_number':230,'multiline':False]['text':'/ @endcond','line_number':233,'multiline':False]['text':'/ @cond','line_number':237,'multiline':False]['text':'/ @endcond','line_number':242,'multiline':False]['text':'/ @cond','line_number':269,'multiline':False]['text':'noncopyable','line_number':272,'multiline':False]['text':'/ @endcond','line_number':284,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bstree()','line_number':290,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bstree(const key_compare &,const value_traits &)','line_number':295,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bstree(bool,Iterator,Iterator,const key_compare &,const value_traits &)','line_number':300,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bstree(bstree &&)','line_number':313,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::operator=(bstree &&)','line_number':318,'multiline':False]['text':'/ @cond','line_number':325,'multiline':False]['text':'/ @endcond','line_number':340,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::~bstree()','line_number':345,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::begin()','line_number':348,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::begin()const','line_number':351,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::cbegin()const','line_number':354,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::end()','line_number':357,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::end()const','line_number':360,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::cend()const','line_number':363,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rbegin()','line_number':366,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rbegin()const','line_number':369,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::crbegin()const','line_number':372,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rend()','line_number':375,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rend()const','line_number':378,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::crend()const','line_number':381,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::root()','line_number':384,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::root()const','line_number':387,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::croot()const','line_number':390,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::container_from_end_iterator(iterator)','line_number':393,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::container_from_end_iterator(const_iterator)','line_number':396,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::container_from_iterator(iterator)','line_number':399,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::container_from_iterator(const_iterator)','line_number':402,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::key_comp()const','line_number':405,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::value_comp()const','line_number':408,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::empty()const','line_number':411,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::size()const','line_number':414,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':417,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::swap','line_number':419,'multiline':False]['text':'This can throw','line_number':422,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::clone_from(const bstree&,Cloner,Disposer)','line_number':427,'multiline':False]['text':'! Additional notes: it also copies the alpha factor from the source container.','line_number':428,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::clone_from(bstree&&,Cloner,Disposer)','line_number':436,'multiline':False]['text':'! Additional notes: it also copies the alpha factor from the source container.','line_number':437,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_equal(reference)','line_number':445,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_equal(const_iterator,reference)','line_number':459,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_equal(Iterator,Iterator)','line_number':473,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique(reference)','line_number':482,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique(const_iterator,reference)','line_number':493,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique_check(const KeyType&,KeyTypeKeyCompare,insert_commit_data&)','line_number':504,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique_check(const_iterator,const KeyType&,KeyTypeKeyCompare,insert_commit_data&)','line_number':519,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique_check(const key_type&,insert_commit_data&)','line_number':531,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique_check(const_iterator,const key_type&,insert_commit_data&)','line_number':536,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique_commit','line_number':541,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_unique(Iterator,Iterator)','line_number':555,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::insert_before','line_number':570,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::push_back','line_number':584,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::push_front','line_number':597,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase(const_iterator)','line_number':611,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase(const_iterator,const_iterator)','line_number':629,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase(const key_type &)','line_number':633,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase(const KeyType&,KeyTypeKeyCompare)','line_number':637,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase_and_dispose(const_iterator,Disposer)','line_number':649,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase_and_dispose(const_iterator,const_iterator,Disposer)','line_number':665,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase_and_dispose(const key_type &, Disposer)','line_number':670,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::erase_and_dispose(const KeyType&,KeyTypeKeyCompare,Disposer)','line_number':680,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::clear','line_number':692,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::clear_and_dispose','line_number':699,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::merge_unique','line_number':708,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::merge_equal','line_number':739,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::count(const key_type &)const','line_number':768,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::count(const KeyType&,KeyTypeKeyCompare)const','line_number':771,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const key_type &)','line_number':775,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const KeyType&,KeyTypeKeyCompare)','line_number':778,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const key_type &)const','line_number':782,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const KeyType&,KeyTypeKeyCompare)const','line_number':785,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const key_type &)','line_number':789,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const KeyType&,KeyTypeKeyCompare)','line_number':792,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const key_type &)const','line_number':796,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const KeyType&,KeyTypeKeyCompare)const','line_number':799,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const key_type &)','line_number':803,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const KeyType&,KeyTypeKeyCompare)','line_number':806,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const key_type &)const','line_number':810,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const KeyType&,KeyTypeKeyCompare)const','line_number':813,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const key_type &)','line_number':817,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const KeyType&,KeyTypeKeyCompare)','line_number':820,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const key_type &)const','line_number':824,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const KeyType&,KeyTypeKeyCompare)const','line_number':828,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const key_type &,const key_type &,bool,bool)','line_number':833,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const KeyType&,const KeyType&,KeyTypeKeyCompare,bool,bool)','line_number':837,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const key_type &,const key_type &,bool,bool)const','line_number':842,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const KeyType&,const KeyType&,KeyTypeKeyCompare,bool,bool)const','line_number':846,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::s_iterator_to(reference)','line_number':851,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::s_iterator_to(const_reference)','line_number':854,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::iterator_to(reference)','line_number':857,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::iterator_to(const_reference)const','line_number':860,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::init_node(reference)','line_number':863,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::unlink_leftmost_without_rebalance','line_number':866,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::replace_node','line_number':869,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::remove_node','line_number':872,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rebalance','line_number':875,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::rebalance_subtree','line_number':878,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':895,'multiline':False]['text':'! <b>Returns</b>: The balance factor (alpha) used in this tree','line_number':897,'multiline':False]['text':'!','line_number':898,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':899,'multiline':False]['text':'!','line_number':900,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':901,'multiline':False]['text':'! <b>Requires</b>: new_alpha must be a value between 0.5 and 1.0','line_number':905,'multiline':False]['text':'!','line_number':906,'multiline':False]['text':'! <b>Effects</b>: Establishes a new balance factor (alpha) and rebalances','line_number':907,'multiline':False]['text':'!   the tree if the new balance factor is stricter (less) than the old factor.','line_number':908,'multiline':False]['text':'!','line_number':909,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':910,'multiline':False]['text':'!','line_number':911,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements in the subtree.','line_number':912,'multiline':False]['text':'The alpha factor CAN't be changed if the fixed, floating operation-less','line_number':915,'multiline':False]['text':'1/sqrt(2) alpha factor option is activated','line_number':916,'multiline':False]['text':'/ @cond','line_number':929,'multiline':False]['text':'/ @endcond','line_number':945,'multiline':False]['text':'! Helper metafunction to define a \c sgtree that yields to the same type when the','line_number':949,'multiline':False]['text':'! same options (either explicitly or implicitly) are used.','line_number':950,'multiline':False]['text':'/ @cond','line_number':960,'multiline':False]['text':'/ @endcond','line_number':981,'multiline':False]['text':'Assert if passed value traits are compatible with the type','line_number':1020,'multiline':False]['text':'namespace intrusive','line_number':1068,'multiline':False]['text':'namespace boost','line_number':1069,'multiline':False]['text':'BOOST_INTRUSIVE_SGTREE_HPP','line_number':1073,'multiline':False]