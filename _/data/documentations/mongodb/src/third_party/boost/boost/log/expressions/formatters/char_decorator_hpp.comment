['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   formatters/char_decorator.hpp
 * \author Andrey Semashev
 * \date   17.11.2012
 *
 * The header contains implementation of a character decorator.
 ','line_number':7,'multiline':True]['text':' namespace aux','line_number':72,'multiline':False]['text':'!
 * A simple character decorator implementation. This implementation replaces string patterns in the source string with
 * the fixed replacements. Source patterns and replacements can be specified at the object construction.
 ','line_number':74,'multiline':True]['text':'! Result type','line_number':82,'multiline':False]['text':'! Character type','line_number':85,'multiline':False]['text':'! String type','line_number':87,'multiline':False]['text':'! Lengths of source pattern and replacement','line_number':91,'multiline':False]['text':'! List of the decorations to apply','line_number':97,'multiline':False]['text':'! Characters of the interleaved source patterns and replacements','line_number':101,'multiline':False]['text':'! List of the decorations to apply','line_number':103,'multiline':False]['text':'!
     * Initializing constructor. Creates a pattern replacer with the specified \a decorations.
     * The provided decorations must be a sequence of \c std::pair of strings. The first element
     * of each pair is the source pattern, and the second one is the corresponding replacement.
     ','line_number':107,'multiline':True]['text':' This is needed for a workaround against an MSVC-10 and older bug in constructor overload resolution','line_number':115,'multiline':False]['text':'!
     * Initializing constructor. Creates a pattern replacer with decorations specified
     * in form of two same-sized string sequences. Each <tt>i</tt>'th decoration will be
     * <tt>from[i]</tt> -> <tt>to[i]</tt>.
     ','line_number':139,'multiline':True]['text':' Both sequences should be of the same size','line_number':169,'multiline':False]['text':'! Copy constructor','line_number':173,'multiline':False]['text':'! Applies string replacements starting from the specified position','line_number':178,'multiline':False]['text':'! Character decorator stream output terminal','line_number':229,'multiline':False]['text':'! Self type','line_number':234,'multiline':False]['text':'! Internal typedef for type categorization','line_number':239,'multiline':False]['text':'! Implementation type','line_number':243,'multiline':False]['text':'! Character type','line_number':246,'multiline':False]['text':'! String type','line_number':248,'multiline':False]['text':'! Adopted actor type','line_number':250,'multiline':False]['text':'! Result type definition','line_number':253,'multiline':False]['text':'! Left argument actor','line_number':269,'multiline':False]['text':'! Adopted formatter actor','line_number':271,'multiline':False]['text':'! Implementation type','line_number':273,'multiline':False]['text':'!
     * Initializing constructor. Creates decorator of the \a fmt formatter with the specified \a decorations.
     ','line_number':277,'multiline':True]['text':'!
     * Copy constructor
     ','line_number':284,'multiline':True]['text':'!
     * Invokation operator
     ','line_number':292,'multiline':True]['text':' Flush the stream and keep the current write position in the target string','line_number':298,'multiline':False]['text':' Invoke the adopted formatter','line_number':304,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':307,'multiline':False]['text':'!
     * Invokation operator
     ','line_number':315,'multiline':True]['text':' Flush the stream and keep the current write position in the target string','line_number':321,'multiline':False]['text':' Invoke the adopted formatter','line_number':327,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':330,'multiline':False]['text':' namespace aux','line_number':341,'multiline':False]['text':'!
 * Character decorator terminal class. This formatter allows to modify strings generated by other
 * formatters on character level. The most obvious application of decorators is replacing
 * a certain set of characters with decorated equivalents to satisfy requirements of
 * text-based sinks.
 *
 * The \c char_decorator_terminal class aggregates the formatter being decorated, and a set
 * of string pairs that are used as decorations. All decorations are applied sequentially.
 * The \c char_decorator_terminal class is a formatter itself, so it can be used to construct
 * more complex formatters, including nesting decorators.
 ','line_number':343,'multiline':True]['text':'! Self type','line_number':358,'multiline':False]['text':'! Internal typedef for type categorization','line_number':363,'multiline':False]['text':'! Implementation type','line_number':367,'multiline':False]['text':'! Character type','line_number':369,'multiline':False]['text':'! String type','line_number':371,'multiline':False]['text':'! Stream type','line_number':373,'multiline':False]['text':'! Adopted actor type','line_number':375,'multiline':False]['text':'! Result type definition','line_number':378,'multiline':False]['text':'! Adopted formatter actor','line_number':382,'multiline':False]['text':'! Implementation','line_number':384,'multiline':False]['text':'!
     * Initializing constructor.
     ','line_number':388,'multiline':True]['text':'!
     * Copy constructor
     ','line_number':394,'multiline':True]['text':'!
     * \returns Adopted subactor
     ','line_number':401,'multiline':True]['text':'!
     * \returns Implementation
     ','line_number':409,'multiline':True]['text':'!
     * Invokation operator
     ','line_number':417,'multiline':True]['text':' Invoke the adopted formatter','line_number':426,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':442,'multiline':False]['text':'!
     * Invokation operator
     ','line_number':449,'multiline':True]['text':' Invoke the adopted formatter','line_number':458,'multiline':False]['text':' Flush the buffered characters and apply decorations','line_number':474,'multiline':False]['text':'!
 * Character decorator actor
 ','line_number':484,'multiline':True]['text':'! Base terminal type','line_number':492,'multiline':False]['text':'! Character type','line_number':494,'multiline':False]['text':'! Base actor type','line_number':497,'multiline':False]['text':'! Initializing constructor','line_number':501,'multiline':False]['text':'! Returns reference to the terminal','line_number':506,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':529,'multiline':False]['text':' namespace aux','line_number':582,'multiline':False]['text':'!
 * The function returns a decorator generator object. The generator provides <tt>operator[]</tt> that can be used
 * to construct the actual decorator.
 *
 * \param decorations A sequence of string pairs that will be used as decorations. Every <tt>decorations[i].first</tt>
 *                    substring occurrence in the output will be replaced with <tt>decorations[i].second</tt>.
 ','line_number':584,'multiline':True]['text':'!
 * The function returns a decorator generator object. The generator provides <tt>operator[]</tt> that can be used
 * to construct the actual decorator.
 *
 * \param from A sequence of strings that will be sought in the output.
 * \param to A sequence of strings that will be used as replacements.
 *
 * \note The \a from and \a to sequences mush be of the same size. Every <tt>from[i]</tt>
 *       substring occurrence in the output will be replaced with <tt>to[i]</tt>.
 ','line_number':597,'multiline':True]['text':' namespace expressions','line_number':613,'multiline':False]['text':' namespace log','line_number':615,'multiline':False]['text':' namespace result_of','line_number':635,'multiline':False]['text':' namespace phoenix','line_number':637,'multiline':False]['text':' namespace boost','line_number':641,'multiline':False]['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_CHAR_DECORATOR_HPP_INCLUDED_','line_number':645,'multiline':False]