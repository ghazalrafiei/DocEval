['text':'  (c) Copyright Fernando Luis Cacciola Carballal 2000-2004','line_number':1,'multiline':False]['text':'  Use, modification, and distribution is subject to the Boost Software','line_number':2,'multiline':False]['text':'  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'  See library home page at http://www.boost.org/libs/numeric/conversion','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Contact the author at: fernando_cacciola@hotmail.com','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Integral Constants representing rounding modes','line_number':25,'multiline':False]['text':' Metafunction:','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'   for_round_style<RoundStyle,RoundToZero,RoundToNearest,RoundToInf,RoundToNegInf>::type','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' {RoundStyle} Integral Constant specifying a round style as declared above.','line_number':35,'multiline':False]['text':' {RoundToZero,RoundToNearest,RoundToInf,RoundToNegInf} arbitrary types.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' Selects one of the 4 types according to the value of RoundStyle.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' round2neg_inf_c','line_number':44,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':68,'multiline':False]['text':'                             Range Checking Logic.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' The range checking logic is built up by combining 1 or 2 predicates.','line_number':71,'multiline':False]['text':' Each predicate is encapsulated in a template class and exposes','line_number':72,'multiline':False]['text':' the static member function 'apply'.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':75,'multiline':False]['text':' Because a particular logic can combine either 1 or two predicates, the following','line_number':78,'multiline':False]['text':' tags are used to allow the predicate applier to receive 2 preds, but optimize away','line_number':79,'multiline':False]['text':' one of them if it is 'non-applicable'','line_number':80,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':'                      Range Checking Logic implementations.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' The following classes, collectivelly named 'Predicates', are instantiated within','line_number':89,'multiline':False]['text':' the corresponding range checkers.','line_number':90,'multiline':False]['text':' Their static member function 'apply' is called to perform the actual range checking logic.','line_number':91,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':92,'multiline':False]['text':' s < Lowest(T) ? cNegOverflow : cInRange','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':' s < 0 ? cNegOverflow : cInRange','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' s <= Lowest(T)-1 ? cNegOverflow : cInRange','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':' s < Lowest(T)-0.5 ? cNegOverflow : cInRange','line_number':139,'multiline':False]['text':'','line_number':140,'multiline':False]['text':' s > Highest(T) ? cPosOverflow : cInRange','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' s >= Lowest(T) + 1 ? cPosOverflow : cInRange','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':' s >= Lowest(T) + 0.5 ? cPosgOverflow : cInRange','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':' Predicate Combiner.','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' This helper classes are used to possibly combine the range checking logic','line_number':208,'multiline':False]['text':' individually performed by the predicates','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':211,'multiline':False]['text':' Applies both predicates: first 'PredA', and if it equals 'cInRange', 'PredB'','line_number':214,'multiline':False]['text':' 'None' is defined as a macro in (/usr/X11R6/include/X11/X.h)','line_number':233,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':252,'multiline':False]['text':'                             Range Checker classes.','line_number':253,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' The following classes are VISIBLE base classes of the user-level converter<> class.','line_number':255,'multiline':False]['text':' They supply the optimized 'out_of_range()' and 'validate_range()' static member functions','line_number':256,'multiline':False]['text':' visible in the user interface.','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':259,'multiline':False]['text':' Dummy range checker.','line_number':261,'multiline':False]['text':' Generic range checker.','line_number':271,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' All the range checking logic for all possible combinations of source and target','line_number':273,'multiline':False]['text':' can be arranged in terms of one or two predicates, which test overflow on both neg/pos 'sides'','line_number':274,'multiline':False]['text':' of the ranges.','line_number':275,'multiline':False]['text':'','line_number':276,'multiline':False]['text':' These predicates are given here as IsNegOverflow and IsPosOverflow.','line_number':277,'multiline':False]['text':'','line_number':278,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':299,'multiline':False]['text':'','line_number':300,'multiline':False]['text':' Selectors for the optimized Range Checker class.','line_number':301,'multiline':False]['text':'','line_number':302,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':303,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':440,'multiline':False]['text':'                             Converter classes.','line_number':441,'multiline':False]['text':'','line_number':442,'multiline':False]['text':' The following classes are VISIBLE base classes of the user-level converter<> class.','line_number':443,'multiline':False]['text':' They supply the optimized 'nearbyint()' and 'convert()' static member functions','line_number':444,'multiline':False]['text':' visible in the user interface.','line_number':445,'multiline':False]['text':'','line_number':446,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':447,'multiline':False]['text':'','line_number':449,'multiline':False]['text':' Trivial Converter : used when (cv-unqualified) T == (cv-unqualified)  S','line_number':450,'multiline':False]['text':'','line_number':451,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' Rounding Converter : used for float to integral conversions.','line_number':468,'multiline':False]['text':'','line_number':469,'multiline':False]['text':'','line_number':494,'multiline':False]['text':' Non-Rounding Converter : used for all other conversions.','line_number':495,'multiline':False]['text':'','line_number':496,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':522,'multiline':False]['text':'','line_number':523,'multiline':False]['text':' Selectors for the optimized Converter class.','line_number':524,'multiline':False]['text':'','line_number':525,'multiline':False]['text':'--------------------------------------------------------------------------','line_number':526,'multiline':False]['text':' bcc55 prefers sometimes template parameters to be explicit local types.','line_number':565,'multiline':False]['text':' (notice that is is illegal to reuse the names like this)','line_number':566,'multiline':False]['text':' namespace boost::numeric::convdetail','line_number':589,'multiline':False]