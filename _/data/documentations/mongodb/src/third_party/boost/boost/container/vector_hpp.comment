['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':25,'multiline':False]['text':'new_allocator','line_number':28,'multiline':False]['text':' container detail','line_number':31,'multiline':False]['text':'equal()','line_number':33,'multiline':False]['text':' intrusive','line_number':47,'multiline':False]['text':' move','line_number':49,'multiline':False]['text':' move/detail','line_number':54,'multiline':False]['text':' move/algo','line_number':59,'multiline':False]['text':' other','line_number':64,'multiline':False]['text':'std','line_number':69,'multiline':False]['text':'for std::initializer_list','line_number':71,'multiline':False]['text':'Defining element_type to make libstdc++'s std::pointer_traits well-formed leads to ambiguity','line_number':90,'multiline':False]['text':'due to LWG3446. So we need to specialize std::pointer_traits. See ','line_number':91,'multiline':False]['text':'https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96416 for details. Many thanks to Jonathan Wakely','line_number':92,'multiline':False]['text':'for explaining the issue.','line_number':93,'multiline':False]['text':'Define element_','line_number':95,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':135,'multiline':False]['text':'Constructors','line_number':139,'multiline':False]['text':'Value initialization to achieve "null iterators" (N3644)','line_number':141,'multiline':False]['text':'Pointer like operators','line_number':155,'multiline':False]['text':'Increment / Decrement','line_number':168,'multiline':False]['text':'Arithmetic','line_number':181,'multiline':False]['text':'Difference','line_number':200,'multiline':False]['text':'Comparison operators','line_number':205,'multiline':False]['text':'This is the anti-exception array destructor','line_number':286,'multiline':False]['text':'to deallocate values already constructed','line_number':287,'multiline':False]['text':'This is the anti-exception array deallocator','line_number':293,'multiline':False]['text':'!This struct deallocates and allocated memory','line_number':297,'multiline':False]['text':'Constructor, does not throw','line_number':335,'multiline':False]['text':'Constructor, does not throw','line_number':341,'multiline':False]['text':'Constructor, does not throw','line_number':347,'multiline':False]['text':'Size is initialized here so vector should only call uninitialized_xxx after this','line_number':352,'multiline':False]['text':'Constructor, does not throw','line_number':367,'multiline':False]['text':'Size is initialized here so vector should only call uninitialized_xxx after this','line_number':372,'multiline':False]['text':'n is guaranteed to fit into stored_size_type','line_number':402,'multiline':False]['text':'There is not enough memory, try to expand the old one','line_number':457,'multiline':False]['text':'Check for forward expansion','line_number':462,'multiline':False]['text':'First detect overflow on smaller stored_size_types','line_number':546,'multiline':False]['text':'First detect overflow on smaller stored_size_types','line_number':561,'multiline':False]['text':'Allocate memory ','line_number':566,'multiline':False]['text':'If after allocation prefer_in_recvd_out_size is not representable by stored_size_type, truncate it.','line_number':568,'multiline':False]['text':'!This struct deallocates and allocated memory','line_number':574,'multiline':False]['text':'Constructor, does not throw','line_number':594,'multiline':False]['text':'Constructor, does not throw','line_number':600,'multiline':False]['text':'Constructor, does not throw','line_number':606,'multiline':False]['text':'Size is initialized here...','line_number':610,'multiline':False]['text':'... and capacity here, so vector, must call uninitialized_xxx in the derived constructor','line_number':612,'multiline':False]['text':'Constructor, does not throw','line_number':616,'multiline':False]['text':'Size is initialized here...','line_number':619,'multiline':False]['text':'... and capacity here, so vector, must call uninitialized_xxx in the derived constructor','line_number':621,'multiline':False]['text':'Size is initialized here so vector should only call uninitialized_xxx after this','line_number':627,'multiline':False]['text':'Initialize it to m_size as first_allocation can only succeed or abort','line_number':639,'multiline':False]['text':'Different allocator type so we must check we have enough storage','line_number':641,'multiline':False]['text':'Containers with version 0 allocators can't be moved without moving elements one by one','line_number':681,'multiline':False]['text':'Containers with version 0 allocators can't be moved without moving elements one by one','line_number':686,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':742,'multiline':False]['text':'! A vector is a sequence that supports random access to elements, constant','line_number':744,'multiline':False]['text':'! time insertion and removal of elements at the end, and linear time insertion','line_number':745,'multiline':False]['text':'! and removal of elements at the beginning or in the middle. The number of','line_number':746,'multiline':False]['text':'! elements in a vector may vary dynamically; memory management is automatic.','line_number':747,'multiline':False]['text':'!','line_number':748,'multiline':False]['text':'! \tparam T The type of object that is stored in the vector','line_number':749,'multiline':False]['text':'! \tparam A The allocator used for all internal memory management, use void','line_number':750,'multiline':False]['text':'!   for the default allocator','line_number':751,'multiline':False]['text':'! \tparam Options A type produced from \c boost::container::vector_options.','line_number':752,'multiline':False]['text':'////////////////////////////////////////////','line_number':757,'multiline':False]['text':'','line_number':758,'multiline':False]['text':'                    types','line_number':759,'multiline':False]['text':'','line_number':760,'multiline':False]['text':'////////////////////////////////////////////','line_number':761,'multiline':False]['text':'If provided the stored_size option must specify a type that is equal or a type that is smaller.','line_number':788,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':813,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':834,'multiline':False]['text':'////////////////////////////////////////////','line_number':837,'multiline':False]['text':'','line_number':838,'multiline':False]['text':'          construct/copy/destroy','line_number':839,'multiline':False]['text':'','line_number':840,'multiline':False]['text':'////////////////////////////////////////////','line_number':841,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector taking the allocator as parameter.','line_number':843,'multiline':False]['text':'!','line_number':844,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':845,'multiline':False]['text':'!','line_number':846,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':847,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector taking the allocator as parameter.','line_number':852,'multiline':False]['text':'!','line_number':853,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':854,'multiline':False]['text':'!','line_number':855,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':856,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector and inserts n value initialized values.','line_number':861,'multiline':False]['text':'!','line_number':862,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':863,'multiline':False]['text':'!   throws or T's value initialization throws.','line_number':864,'multiline':False]['text':'!','line_number':865,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':866,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':877,'multiline':False]['text':'!   and inserts n value initialized values.','line_number':878,'multiline':False]['text':'!','line_number':879,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':880,'multiline':False]['text':'!   throws or T's value initialization throws.','line_number':881,'multiline':False]['text':'!','line_number':882,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':883,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':894,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':895,'multiline':False]['text':'!','line_number':896,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':897,'multiline':False]['text':'!   throws or T's default initialization throws.','line_number':898,'multiline':False]['text':'!','line_number':899,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':900,'multiline':False]['text':'!','line_number':901,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':902,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':913,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':914,'multiline':False]['text':'!','line_number':915,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':916,'multiline':False]['text':'!   throws or T's default initialization throws.','line_number':917,'multiline':False]['text':'!','line_number':918,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':919,'multiline':False]['text':'!','line_number':920,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':921,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector','line_number':932,'multiline':False]['text':'!   and inserts n copies of value.','line_number':933,'multiline':False]['text':'!','line_number':934,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':935,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':936,'multiline':False]['text':'!','line_number':937,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':938,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':949,'multiline':False]['text':'!   and inserts n copies of value.','line_number':950,'multiline':False]['text':'!','line_number':951,'multiline':False]['text':'! <b>Throws</b>: If allocation','line_number':952,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':953,'multiline':False]['text':'!','line_number':954,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':955,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector','line_number':966,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the vector.','line_number':967,'multiline':False]['text':'!','line_number':968,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':969,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':970,'multiline':False]['text':'!','line_number':971,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':972,'multiline':False]['text':'    template <class InIt>','line_number':973,'multiline':False]['text':'    vector(InIt first, InIt last','line_number':974,'multiline':False]['text':'           BOOST_CONTAINER_DOCIGN(BOOST_MOVE_I typename dtl::disable_if_c','line_number':975,'multiline':False]['text':'                                  < dtl::is_convertible<InIt BOOST_MOVE_I size_type>::value','line_number':976,'multiline':False]['text':'                                  BOOST_MOVE_I dtl::nat >::type * = 0)','line_number':977,'multiline':False]['text':'           ) -> vector<typename iterator_traits<InIt>::value_type, new_allocator<typename iterator_traits<InIt>::value_type>>;','line_number':978,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':988,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the vector.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':991,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':992,'multiline':False]['text':'!','line_number':993,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':994,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a vector.','line_number':1004,'multiline':False]['text':'!','line_number':1005,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':1006,'multiline':False]['text':'!','line_number':1007,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's allocation','line_number':1008,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':1009,'multiline':False]['text':'!','line_number':1010,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':1011,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':1025,'multiline':False]['text':'!','line_number':1026,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1027,'multiline':False]['text':'!','line_number':1028,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1029,'multiline':False]['text':'! <b>Effects</b>: Constructs a vector that will use a copy of allocator a','line_number':1035,'multiline':False]['text':'!  and inserts a copy of the range [il.begin(), il.last()) in the vector','line_number':1036,'multiline':False]['text':'!','line_number':1037,'multiline':False]['text':'! <b>Throws</b>: If T's constructor taking a dereferenced initializer_list iterator throws.','line_number':1038,'multiline':False]['text':'!','line_number':1039,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':1040,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':1055,'multiline':False]['text':'!','line_number':1056,'multiline':False]['text':'! <b>Throws</b>: If T's move constructor or allocation throws','line_number':1057,'multiline':False]['text':'!','line_number':1058,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1059,'multiline':False]['text':'!','line_number':1060,'multiline':False]['text':'! <b>Note</b>: Non-standard extension to support static_vector','line_number':1061,'multiline':False]['text':' defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1070,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a vector using the specified allocator.','line_number':1072,'multiline':False]['text':'!','line_number':1073,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':1074,'multiline':False]['text':'!','line_number':1075,'multiline':False]['text':'! <b>Throws</b>: If allocation','line_number':1076,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':1077,'multiline':False]['text':'!','line_number':1078,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':1079,'multiline':False]['text':'! <b>Effects</b>: Move constructor using the specified allocator.','line_number':1091,'multiline':False]['text':'!                 Moves x's resources to *this if a == allocator_type().','line_number':1092,'multiline':False]['text':'!                 Otherwise copies values from x to *this.','line_number':1093,'multiline':False]['text':'!','line_number':1094,'multiline':False]['text':'! <b>Throws</b>: If allocation or T's copy constructor throws.','line_number':1095,'multiline':False]['text':'!','line_number':1096,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':1097,'multiline':False]['text':'In this allocator move constructor the allocator won't be propagated --v','line_number':1100,'multiline':False]['text':'In this allocator move constructor the allocator won't be propagated ---v','line_number':1104,'multiline':False]['text':'! <b>Effects</b>: Destroys the vector. All stored values are destroyed','line_number':1119,'multiline':False]['text':'!   and used memory is deallocated.','line_number':1120,'multiline':False]['text':'!','line_number':1121,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1122,'multiline':False]['text':'!','line_number':1123,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements.','line_number':1124,'multiline':False]['text':'vector_alloc_holder deallocates the data','line_number':1129,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':1132,'multiline':False]['text':'!','line_number':1133,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':1134,'multiline':False]['text':'! of each of x's elements.','line_number':1135,'multiline':False]['text':'!','line_number':1136,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy/move constructor/assignment throws.','line_number':1137,'multiline':False]['text':'!','line_number':1138,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':1139,'multiline':False]['text':'! <b>Effects</b>: Make *this container contains elements from il.','line_number':1149,'multiline':False]['text':'!','line_number':1150,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':1151,'multiline':False]['text':'! <b>Effects</b>: Move assignment. All x's values are transferred to *this.','line_number':1159,'multiline':False]['text':'!','line_number':1160,'multiline':False]['text':'! <b>Postcondition</b>: x.empty(). *this contains a the elements x had','line_number':1161,'multiline':False]['text':'!   before the function.','line_number':1162,'multiline':False]['text':'!','line_number':1163,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':1164,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':1165,'multiline':False]['text':'!','line_number':1166,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':1167,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':1168,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':1169,'multiline':False]['text':'! <b>Effects</b>: Move assignment. All x's values are transferred to *this.','line_number':1182,'multiline':False]['text':'!','line_number':1183,'multiline':False]['text':'! <b>Postcondition</b>: x.empty(). *this contains a the elements x had','line_number':1184,'multiline':False]['text':'!   before the function.','line_number':1185,'multiline':False]['text':'!','line_number':1186,'multiline':False]['text':'! <b>Throws</b>: If move constructor/assignment of T throws or allocation throws','line_number':1187,'multiline':False]['text':'!','line_number':1188,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1189,'multiline':False]['text':'!','line_number':1190,'multiline':False]['text':'! <b>Note</b>: Non-standard extension to support static_vector','line_number':1191,'multiline':False]['text':'! <b>Effects</b>: Copy assignment. All x's values are copied to *this.','line_number':1204,'multiline':False]['text':'!','line_number':1205,'multiline':False]['text':'! <b>Postcondition</b>: x.empty(). *this contains a the elements x had','line_number':1206,'multiline':False]['text':'!   before the function.','line_number':1207,'multiline':False]['text':'!','line_number':1208,'multiline':False]['text':'! <b>Throws</b>: If move constructor/assignment of T throws or allocation throws','line_number':1209,'multiline':False]['text':'!','line_number':1210,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1211,'multiline':False]['text':'!','line_number':1212,'multiline':False]['text':'! <b>Note</b>: Non-standard extension to support static_vector','line_number':1213,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [first, last) to *this.','line_number':1228,'multiline':False]['text':'!','line_number':1229,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy/move constructor/assignment or','line_number':1230,'multiline':False]['text':'!   T's constructor/assignment from dereferencing InpIt throws.','line_number':1231,'multiline':False]['text':'!','line_number':1232,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1233,'multiline':False]['text':'Input iterators or version 0 allocator','line_number':1236,'multiline':False]['text':'Overwrite all elements we can from [first, last)','line_number':1247,'multiline':False]['text':'There are no more elements in the sequence, erase remaining','line_number':1255,'multiline':False]['text':'There are more elements in the range, insert the remaining ones','line_number':1261,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [il.begin(), il.end()) to *this.','line_number':1267,'multiline':False]['text':'!','line_number':1268,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1269,'multiline':False]['text':'!   T's constructor from dereferencing iniializer_list iterator throws.','line_number':1270,'multiline':False]['text':'!','line_number':1271,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [first, last) to *this.','line_number':1278,'multiline':False]['text':'!','line_number':1279,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy/move constructor/assignment or','line_number':1280,'multiline':False]['text':'!   T's constructor/assignment from dereferencing InpIt throws.','line_number':1281,'multiline':False]['text':'!','line_number':1282,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1283,'multiline':False]['text':'Forward iterators and version > 0 allocator','line_number':1286,'multiline':False]['text':'For Fwd iterators the standard only requires EmplaceConstructible and assignable from *first','line_number':1296,'multiline':False]['text':'so we can't do any backwards allocation','line_number':1297,'multiline':False]['text':'If input range is too big, we need to reallocate','line_number':1305,'multiline':False]['text':'New allocation, just emplace new values','line_number':1309,'multiline':False]['text':'Forward expansion, use assignment + back deletion/construction that comes later','line_number':1329,'multiline':False]['text':'! <b>Effects</b>: Assigns the n copies of val to *this.','line_number':1337,'multiline':False]['text':'!','line_number':1338,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1339,'multiline':False]['text':'!   T's copy/move constructor/assignment throws.','line_number':1340,'multiline':False]['text':'!','line_number':1341,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1342,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':1346,'multiline':False]['text':'!','line_number':1347,'multiline':False]['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':1348,'multiline':False]['text':'!','line_number':1349,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1350,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':1354,'multiline':False]['text':'!','line_number':1355,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1356,'multiline':False]['text':'!','line_number':1357,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1358,'multiline':False]['text':'!','line_number':1359,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1360,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':1365,'multiline':False]['text':'!','line_number':1366,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1367,'multiline':False]['text':'!','line_number':1368,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1369,'multiline':False]['text':'!','line_number':1370,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1371,'multiline':False]['text':'////////////////////////////////////////////','line_number':1376,'multiline':False]['text':'','line_number':1377,'multiline':False]['text':'                iterators','line_number':1378,'multiline':False]['text':'','line_number':1379,'multiline':False]['text':'////////////////////////////////////////////','line_number':1380,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the vector.','line_number':1382,'multiline':False]['text':'!','line_number':1383,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1384,'multiline':False]['text':'!','line_number':1385,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1386,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the vector.','line_number':1390,'multiline':False]['text':'!','line_number':1391,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1392,'multiline':False]['text':'!','line_number':1393,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1394,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the vector.','line_number':1398,'multiline':False]['text':'!','line_number':1399,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1400,'multiline':False]['text':'!','line_number':1401,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1402,'multiline':False]['text':'Adding zero to null pointer is allowed (non-UB)','line_number':1407,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the vector.','line_number':1410,'multiline':False]['text':'!','line_number':1411,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1412,'multiline':False]['text':'!','line_number':1413,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1414,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':1418,'multiline':False]['text':'! of the reversed vector.','line_number':1419,'multiline':False]['text':'!','line_number':1420,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1421,'multiline':False]['text':'!','line_number':1422,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1423,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1427,'multiline':False]['text':'! of the reversed vector.','line_number':1428,'multiline':False]['text':'!','line_number':1429,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1430,'multiline':False]['text':'!','line_number':1431,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1432,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':1436,'multiline':False]['text':'! of the reversed vector.','line_number':1437,'multiline':False]['text':'!','line_number':1438,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1439,'multiline':False]['text':'!','line_number':1440,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1441,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1445,'multiline':False]['text':'! of the reversed vector.','line_number':1446,'multiline':False]['text':'!','line_number':1447,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1448,'multiline':False]['text':'!','line_number':1449,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1450,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the vector.','line_number':1454,'multiline':False]['text':'!','line_number':1455,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1456,'multiline':False]['text':'!','line_number':1457,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1458,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the vector.','line_number':1462,'multiline':False]['text':'!','line_number':1463,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1464,'multiline':False]['text':'!','line_number':1465,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1466,'multiline':False]['text':'Adding zero to null pointer is allowed (non-UB)','line_number':1471,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1474,'multiline':False]['text':'! of the reversed vector.','line_number':1475,'multiline':False]['text':'!','line_number':1476,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1477,'multiline':False]['text':'!','line_number':1478,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1479,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1483,'multiline':False]['text':'! of the reversed vector.','line_number':1484,'multiline':False]['text':'!','line_number':1485,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1486,'multiline':False]['text':'!','line_number':1487,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1488,'multiline':False]['text':'////////////////////////////////////////////','line_number':1492,'multiline':False]['text':'','line_number':1493,'multiline':False]['text':'                capacity','line_number':1494,'multiline':False]['text':'','line_number':1495,'multiline':False]['text':'////////////////////////////////////////////','line_number':1496,'multiline':False]['text':'! <b>Effects</b>: Returns true if the vector contains no elements.','line_number':1498,'multiline':False]['text':'!','line_number':1499,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1500,'multiline':False]['text':'!','line_number':1501,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1502,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the vector.','line_number':1506,'multiline':False]['text':'!','line_number':1507,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1508,'multiline':False]['text':'!','line_number':1509,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1510,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the vector.','line_number':1514,'multiline':False]['text':'!','line_number':1515,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1516,'multiline':False]['text':'!','line_number':1517,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1518,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1522,'multiline':False]['text':'!   the size becomes n. New elements are value initialized.','line_number':1523,'multiline':False]['text':'!','line_number':1524,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy/move or value initialization throws.','line_number':1525,'multiline':False]['text':'!','line_number':1526,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1527,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1531,'multiline':False]['text':'!   the size becomes n. New elements are default initialized.','line_number':1532,'multiline':False]['text':'!','line_number':1533,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy/move or default initialization throws.','line_number':1534,'multiline':False]['text':'!','line_number':1535,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1536,'multiline':False]['text':'!','line_number':1537,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1538,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1542,'multiline':False]['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':1543,'multiline':False]['text':'!','line_number':1544,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy/move constructor throws.','line_number':1545,'multiline':False]['text':'!','line_number':1546,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1547,'multiline':False]['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':1551,'multiline':False]['text':'!   capacity() is always greater than or equal to size().','line_number':1552,'multiline':False]['text':'!','line_number':1553,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1554,'multiline':False]['text':'!','line_number':1555,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1556,'multiline':False]['text':'! <b>Effects</b>: If n is less than or equal to capacity(), this call has no','line_number':1560,'multiline':False]['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':1561,'multiline':False]['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':1562,'multiline':False]['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':1563,'multiline':False]['text':'!','line_number':1564,'multiline':False]['text':'! <b>Throws</b>: If memory allocation allocation throws or T's copy/move constructor throws.','line_number':1565,'multiline':False]['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':1573,'multiline':False]['text':'!   with previous allocations. The size of the vector is unchanged','line_number':1574,'multiline':False]['text':'!','line_number':1575,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy/move constructor throws.','line_number':1576,'multiline':False]['text':'!','line_number':1577,'multiline':False]['text':'! <b>Complexity</b>: Linear to size().','line_number':1578,'multiline':False]['text':'////////////////////////////////////////////','line_number':1582,'multiline':False]['text':'','line_number':1583,'multiline':False]['text':'               element access','line_number':1584,'multiline':False]['text':'','line_number':1585,'multiline':False]['text':'////////////////////////////////////////////','line_number':1586,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1588,'multiline':False]['text':'!','line_number':1589,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first','line_number':1590,'multiline':False]['text':'!   element of the container.','line_number':1591,'multiline':False]['text':'!','line_number':1592,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1593,'multiline':False]['text':'!','line_number':1594,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1595,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1602,'multiline':False]['text':'!','line_number':1603,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first','line_number':1604,'multiline':False]['text':'!   element of the container.','line_number':1605,'multiline':False]['text':'!','line_number':1606,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1607,'multiline':False]['text':'!','line_number':1608,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1609,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1616,'multiline':False]['text':'!','line_number':1617,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the last','line_number':1618,'multiline':False]['text':'!   element of the container.','line_number':1619,'multiline':False]['text':'!','line_number':1620,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1621,'multiline':False]['text':'!','line_number':1622,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1623,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1630,'multiline':False]['text':'!','line_number':1631,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the last','line_number':1632,'multiline':False]['text':'!   element of the container.','line_number':1633,'multiline':False]['text':'!','line_number':1634,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1635,'multiline':False]['text':'!','line_number':1636,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1637,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1644,'multiline':False]['text':'!','line_number':1645,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1646,'multiline':False]['text':'!   from the beginning of the container.','line_number':1647,'multiline':False]['text':'!','line_number':1648,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1649,'multiline':False]['text':'!','line_number':1650,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1651,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1658,'multiline':False]['text':'!','line_number':1659,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1660,'multiline':False]['text':'!   from the beginning of the container.','line_number':1661,'multiline':False]['text':'!','line_number':1662,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1663,'multiline':False]['text':'!','line_number':1664,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1665,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1673,'multiline':False]['text':'!','line_number':1674,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the nth element','line_number':1675,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1676,'multiline':False]['text':'!   if n == size().','line_number':1677,'multiline':False]['text':'!','line_number':1678,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1679,'multiline':False]['text':'!','line_number':1680,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1681,'multiline':False]['text':'!','line_number':1682,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1683,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1691,'multiline':False]['text':'!','line_number':1692,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the nth element','line_number':1693,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1694,'multiline':False]['text':'!   if n == size().','line_number':1695,'multiline':False]['text':'!','line_number':1696,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1697,'multiline':False]['text':'!','line_number':1698,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1699,'multiline':False]['text':'!','line_number':1700,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1701,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1709,'multiline':False]['text':'!','line_number':1710,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1711,'multiline':False]['text':'!   and size() if p == end().','line_number':1712,'multiline':False]['text':'!','line_number':1713,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1714,'multiline':False]['text':'!','line_number':1715,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1716,'multiline':False]['text':'!','line_number':1717,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1718,'multiline':False]['text':'Range check assert done in priv_index_of','line_number':1722,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1726,'multiline':False]['text':'!','line_number':1727,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1728,'multiline':False]['text':'!   and size() if p == end().','line_number':1729,'multiline':False]['text':'!','line_number':1730,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1731,'multiline':False]['text':'!','line_number':1732,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1733,'multiline':False]['text':'!','line_number':1734,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1735,'multiline':False]['text':'Range check assert done in priv_index_of','line_number':1739,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1743,'multiline':False]['text':'!','line_number':1744,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1745,'multiline':False]['text':'!   from the beginning of the container.','line_number':1746,'multiline':False]['text':'!','line_number':1747,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1748,'multiline':False]['text':'!','line_number':1749,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1750,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1757,'multiline':False]['text':'!','line_number':1758,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1759,'multiline':False]['text':'!   from the beginning of the container.','line_number':1760,'multiline':False]['text':'!','line_number':1761,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1762,'multiline':False]['text':'!','line_number':1763,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1764,'multiline':False]['text':'////////////////////////////////////////////','line_number':1771,'multiline':False]['text':'','line_number':1772,'multiline':False]['text':'                 data access','line_number':1773,'multiline':False]['text':'','line_number':1774,'multiline':False]['text':'////////////////////////////////////////////','line_number':1775,'multiline':False]['text':'! <b>Returns</b>: A pointer such that [data(),data() + size()) is a valid range.','line_number':1777,'multiline':False]['text':'!   For a non-empty vector, data() == &front().','line_number':1778,'multiline':False]['text':'!','line_number':1779,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1780,'multiline':False]['text':'!','line_number':1781,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1782,'multiline':False]['text':'! <b>Returns</b>: A pointer such that [data(),data() + size()) is a valid range.','line_number':1786,'multiline':False]['text':'!   For a non-empty vector, data() == &front().','line_number':1787,'multiline':False]['text':'!','line_number':1788,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1789,'multiline':False]['text':'!','line_number':1790,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1791,'multiline':False]['text':'////////////////////////////////////////////','line_number':1795,'multiline':False]['text':'','line_number':1796,'multiline':False]['text':'                modifiers','line_number':1797,'multiline':False]['text':'','line_number':1798,'multiline':False]['text':'////////////////////////////////////////////','line_number':1799,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1802,'multiline':False]['text':'!   std::forward<Args>(args)... in the end of the vector.','line_number':1803,'multiline':False]['text':'!','line_number':1804,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':1805,'multiline':False]['text':'!','line_number':1806,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws or','line_number':1807,'multiline':False]['text':'!   T's copy/move constructor throws.','line_number':1808,'multiline':False]['text':'!','line_number':1809,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1810,'multiline':False]['text':'There is more memory, just construct a new object at the end','line_number':1816,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1828,'multiline':False]['text':'!   std::forward<Args>(args)... in the end of the vector.','line_number':1829,'multiline':False]['text':'!','line_number':1830,'multiline':False]['text':'! <b>Throws</b>: If the in-place constructor throws.','line_number':1831,'multiline':False]['text':'!','line_number':1832,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1833,'multiline':False]['text':'!','line_number':1834,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1835,'multiline':False]['text':'There is more memory, just construct a new object at the end','line_number':1841,'multiline':False]['text':'! <b>Requires</b>: position must be a valid iterator of *this.','line_number':1848,'multiline':False]['text':'!','line_number':1849,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1850,'multiline':False]['text':'!   std::forward<Args>(args)... before position','line_number':1851,'multiline':False]['text':'!','line_number':1852,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws or','line_number':1853,'multiline':False]['text':'!   T's copy/move constructor/assignment throws.','line_number':1854,'multiline':False]['text':'!','line_number':1855,'multiline':False]['text':'! <b>Complexity</b>: If position is end(), amortized constant time','line_number':1856,'multiline':False]['text':'!   Linear time otherwise.','line_number':1857,'multiline':False]['text':'Just call more general insert(pos, size, value) and return iterator','line_number':1862,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1868,'multiline':False]['text':'','line_number':1907,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the end of the vector.','line_number':1914,'multiline':False]['text':'!','line_number':1915,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1916,'multiline':False]['text':'!   T's copy/move constructor throws.','line_number':1917,'multiline':False]['text':'!','line_number':1918,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1919,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the end of the vector','line_number':1922,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':1923,'multiline':False]['text':'!','line_number':1924,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1925,'multiline':False]['text':'!   T's copy/move constructor throws.','line_number':1926,'multiline':False]['text':'!','line_number':1927,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1928,'multiline':False]['text':'! <b>Requires</b>: position must be a valid iterator of *this.','line_number':1935,'multiline':False]['text':'!','line_number':1936,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of x before position.','line_number':1937,'multiline':False]['text':'!','line_number':1938,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy/move constructor/assignment throws.','line_number':1939,'multiline':False]['text':'!','line_number':1940,'multiline':False]['text':'! <b>Complexity</b>: If position is end(), amortized constant time','line_number':1941,'multiline':False]['text':'!   Linear time otherwise.','line_number':1942,'multiline':False]['text':'! <b>Requires</b>: position must be a valid iterator of *this.','line_number':1945,'multiline':False]['text':'!','line_number':1946,'multiline':False]['text':'! <b>Effects</b>: Insert a new element before position with x's resources.','line_number':1947,'multiline':False]['text':'!','line_number':1948,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1949,'multiline':False]['text':'!','line_number':1950,'multiline':False]['text':'! <b>Complexity</b>: If position is end(), amortized constant time','line_number':1951,'multiline':False]['text':'!   Linear time otherwise.','line_number':1952,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1958,'multiline':False]['text':'!','line_number':1959,'multiline':False]['text':'! <b>Effects</b>: Insert n copies of x before pos.','line_number':1960,'multiline':False]['text':'!','line_number':1961,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if n is 0.','line_number':1962,'multiline':False]['text':'!','line_number':1963,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy/move constructor throws.','line_number':1964,'multiline':False]['text':'!','line_number':1965,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1966,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1974,'multiline':False]['text':'!','line_number':1975,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before pos.','line_number':1976,'multiline':False]['text':'!','line_number':1977,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or pos if first == last.','line_number':1978,'multiline':False]['text':'!','line_number':1979,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1980,'multiline':False]['text':'!   dereferenced InpIt throws or T's copy/move constructor/assignment throws.','line_number':1981,'multiline':False]['text':'!','line_number':1982,'multiline':False]['text':'! <b>Complexity</b>: Linear to boost::container::iterator_distance [first, last).','line_number':1983,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this. num, must','line_number':2027,'multiline':False]['text':'!   be equal to boost::container::iterator_distance(first, last)','line_number':2028,'multiline':False]['text':'!','line_number':2029,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before pos.','line_number':2030,'multiline':False]['text':'!','line_number':2031,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or pos if first == last.','line_number':2032,'multiline':False]['text':'!','line_number':2033,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':2034,'multiline':False]['text':'!   dereferenced InpIt throws or T's copy/move constructor/assignment throws.','line_number':2035,'multiline':False]['text':'!','line_number':2036,'multiline':False]['text':'! <b>Complexity</b>: Linear to boost::container::iterator_distance [first, last).','line_number':2037,'multiline':False]['text':'!','line_number':2038,'multiline':False]['text':'! <b>Note</b>: This function avoids a linear operation to calculate boost::container::iterator_distance[first, last)','line_number':2039,'multiline':False]['text':'!   for forward and bidirectional iterators, and a one by one insertion for input iterators. This is a','line_number':2040,'multiline':False]['text':'!   a non-standard extension.','line_number':2041,'multiline':False]['text':'! <b>Requires</b>: position must be a valid iterator of *this.','line_number':2056,'multiline':False]['text':'!','line_number':2057,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [il.begin(), il.end()) range before position.','line_number':2058,'multiline':False]['text':'!','line_number':2059,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or position if first == last.','line_number':2060,'multiline':False]['text':'!','line_number':2061,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':2062,'multiline':False]['text':'Assertion done in insert()','line_number':2065,'multiline':False]['text':'! <b>Effects</b>: Removes the last element from the container.','line_number':2070,'multiline':False]['text':'!','line_number':2071,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2072,'multiline':False]['text':'!','line_number':2073,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':2074,'multiline':False]['text':'Destroy last element','line_number':2078,'multiline':False]['text':'! <b>Effects</b>: Erases the element at position pos.','line_number':2083,'multiline':False]['text':'!','line_number':2084,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2085,'multiline':False]['text':'!','line_number':2086,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements between pos and the','line_number':2087,'multiline':False]['text':'!   last element. Constant if pos is the last element.','line_number':2088,'multiline':False]['text':'Move elements forward and destroy last','line_number':2096,'multiline':False]['text':'! <b>Effects</b>: Erases the elements pointed by [first, last).','line_number':2107,'multiline':False]['text':'!','line_number':2108,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2109,'multiline':False]['text':'!','line_number':2110,'multiline':False]['text':'! <b>Complexity</b>: Linear to the distance between first and last','line_number':2111,'multiline':False]['text':'!   plus linear to the elements between pos and the last element.','line_number':2112,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':2132,'multiline':False]['text':'!','line_number':2133,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2134,'multiline':False]['text':'!','line_number':2135,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2136,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':2147,'multiline':False]['text':'!','line_number':2148,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2149,'multiline':False]['text':'!','line_number':2150,'multiline':False]['text':'! <b>Complexity</b>: Linear','line_number':2151,'multiline':False]['text':'!','line_number':2152,'multiline':False]['text':'! <b>Note</b>: Non-standard extension to support static_vector','line_number':2153,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2164,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the vector.','line_number':2166,'multiline':False]['text':'!','line_number':2167,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2168,'multiline':False]['text':'!','line_number':2169,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2170,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':2174,'multiline':False]['text':'!','line_number':2175,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2176,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':2180,'multiline':False]['text':'!','line_number':2181,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2182,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':2186,'multiline':False]['text':'!','line_number':2187,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2188,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':2192,'multiline':False]['text':'!','line_number':2193,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2194,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':2198,'multiline':False]['text':'!','line_number':2199,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2200,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':2204,'multiline':False]['text':'!','line_number':2205,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2206,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':2210,'multiline':False]['text':'!','line_number':2211,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2212,'multiline':False]['text':'! <b>Effects</b>: If n is less than or equal to capacity(), this call has no','line_number':2218,'multiline':False]['text':'!   effect. Otherwise, it is a request for allocation of additional memory','line_number':2219,'multiline':False]['text':'!   (memory expansion) that will not invalidate iterators.','line_number':2220,'multiline':False]['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':2221,'multiline':False]['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':2222,'multiline':False]['text':'!','line_number':2223,'multiline':False]['text':'! <b>Throws</b>: If memory allocation allocation throws or T's copy/move constructor throws.','line_number':2224,'multiline':False]['text':'!','line_number':2225,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':2226,'multiline':False]['text':'Absolutely experimental. This function might change, disappear or simply crash!','line_number':2233,'multiline':False]['text':'If not input iterator and new elements don't fit in the remaining capacity, merge in new buffer','line_number':2252,'multiline':False]['text':'Exception rollback. If any copy throws before the hole is filled, values','line_number':2292,'multiline':False]['text':'already inserted/copied at the end of the buffer will be destroyed.','line_number':2293,'multiline':False]['text':'Loop for each insertion backwards, first moving the elements after the insertion point,','line_number':2296,'multiline':False]['text':'then inserting the element.','line_number':2297,'multiline':False]['text':'If needed shift the range after the insertion point and the previous insertion point.','line_number':2302,'multiline':False]['text':'Function will take care if the shift crosses the size() boundary, using copy/move','line_number':2303,'multiline':False]['text':'or uninitialized copy/move if necessary.','line_number':2304,'multiline':False]['text':'The hole was reduced by priv_insert_ordered_at_shift_range so expand exception rollback range backwards','line_number':2310,'multiline':False]['text':'Insert the new value in the hole','line_number':2312,'multiline':False]['text':'The hole was reduced by the new insertion by one','line_number':2315,'multiline':False]['text':'Hole was just filled, disable exception rollback and change vector size','line_number':2319,'multiline':False]['text':'Hole was just filled by priv_insert_ordered_at_shift_range, disable exception rollback and change vector size','line_number':2326,'multiline':False]['text':'Insert the new value in the already constructed range','line_number':2330,'multiline':False]['text':'Reallocation happened, update range','line_number':2357,'multiline':False]['text':'Merge in new buffer loop','line_number':2396,'multiline':False]['text':'maintain stability moving external values only if they are strictly less','line_number':2406,'multiline':False]['text':'Nothrow operations','line_number':2422,'multiline':False]['text':'Not emptying the source container seems to be confusing for users as drop-in','line_number':2464,'multiline':False]['text':'replacement for non-static vectors, so clear it.','line_number':2465,'multiline':False]['text':'for move assignment, no aliasing (&x != this) is assumed.','line_number':2477,'multiline':False]['text':'x.size() == 0 is allowed for buggy std libraries.','line_number':2478,'multiline':False]['text':'In this allocator move constructor the allocator maybe will be propagated -----------------------v','line_number':2484,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':2487,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':2488,'multiline':False]['text':'Else do a one by one move. Also, clear the source as users find confusing','line_number':2495,'multiline':False]['text':'elements are still alive in the source container.','line_number':2496,'multiline':False]['text':'Move allocator if needed','line_number':2503,'multiline':False]['text':'Template it to avoid it in explicit instantiations','line_number':2544,'multiline':False]['text':'version_0','line_number':2545,'multiline':False]['text':'Template it to avoid it in explicit instantiations','line_number':2548,'multiline':False]['text':'version_N','line_number':2549,'multiline':False]['text':'Just swap internals','line_number':2557,'multiline':False]['text':'Else swap element by element...','line_number':2561,'multiline':False]['text':'For empty containers, maybe storage can be moved from the other (just like in the move constructor)         ','line_number':2566,'multiline':False]['text':'Else swap element by element...','line_number':2573,'multiline':False]['text':'... and move-insert the remaining range','line_number':2578,'multiline':False]['text':'Destroy remaining elements','line_number':2583,'multiline':False]['text':'And now swap the allocator','line_number':2587,'multiline':False]['text':'There is not enough memory, allocate a new buffer','line_number':2602,'multiline':False]['text':'Pass the hint so that allocators can take advantage of this.','line_number':2603,'multiline':False]['text':'We will reuse insert code, so create a dummy input iterator','line_number':2608,'multiline':False]['text':'There is not enough memory, allocate a new','line_number':2615,'multiline':False]['text':'buffer or expand the old one.','line_number':2616,'multiline':False]['text':'Check for forward expansion','line_number':2622,'multiline':False]['text':'If there is no forward expansion, move objects, we will reuse insertion code','line_number':2630,'multiline':False]['text':'Backwards (and possibly forward) expansion','line_number':2633,'multiline':False]['text':'New buffer','line_number':2640,'multiline':False]['text':'Overload to support compiler errors that instantiate too much','line_number':2684,'multiline':False]['text':'Check if we have enough memory or try to expand current memory','line_number':2756,'multiline':False]['text':'Pass the hint so that allocators can take advantage of this.','line_number':2760,'multiline':False]['text':'Check if we have enough memory or try to expand current memory','line_number':2773,'multiline':False]['text':'There is not enough memory, allocate a new','line_number':2776,'multiline':False]['text':'buffer or expand the old one.','line_number':2777,'multiline':False]['text':'Buffer reallocated','line_number':2783,'multiline':False]['text':'Forward expansion, delay insertion','line_number':2785,'multiline':False]['text':'Expand forward','line_number':2791,'multiline':False]['text':'Backwards (and possibly forward) expansion','line_number':2795,'multiline':False]['text':'New buffer','line_number':2804,'multiline':False]['text':'Check if we have enough memory or try to expand current memory','line_number':2822,'multiline':False]['text':'Expand forward','line_number':2824,'multiline':False]['text':'This will trigger an error','line_number':2839,'multiline':False]['text':'Destroy last elements','line_number':2843,'multiline':False]['text':'Destroy last elements','line_number':2858,'multiline':False]['text':'Takes the range pointed by [first_pos, last_pos) and shifts it to the right','line_number':2866,'multiline':False]['text':'by 'shift_count'. 'limit_pos' marks the end of constructed elements.','line_number':2867,'multiline':False]['text':'','line_number':2868,'multiline':False]['text':'Precondition: first_pos <= last_pos <= limit_pos','line_number':2869,'multiline':False]['text':'','line_number':2870,'multiline':False]['text':'The shift operation might cross limit_pos so elements to moved beyond limit_pos','line_number':2871,'multiline':False]['text':'are uninitialized_moved with an allocator. Other elements are moved.','line_number':2872,'multiline':False]['text':'','line_number':2873,'multiline':False]['text':'The shift operation might left uninitialized elements after limit_pos','line_number':2874,'multiline':False]['text':'and the number of uninitialized elements is returned by the function.','line_number':2875,'multiline':False]['text':'','line_number':2876,'multiline':False]['text':'Old situation:','line_number':2877,'multiline':False]['text':'       first_pos   last_pos         old_limit','line_number':2878,'multiline':False]['text':'             |       |                  |','line_number':2879,'multiline':False]['text':' ____________V_______V__________________V_____________','line_number':2880,'multiline':False]['text':'|   prefix   | range |     suffix       |raw_mem      ~','line_number':2881,'multiline':False]['text':'|____________|_______|__________________|_____________~','line_number':2882,'multiline':False]['text':'','line_number':2883,'multiline':False]['text':'New situation in Case A (hole_size == 0):','line_number':2884,'multiline':False]['text':' range is moved through move assignments','line_number':2885,'multiline':False]['text':'','line_number':2886,'multiline':False]['text':'       first_pos   last_pos         limit_pos','line_number':2887,'multiline':False]['text':'             |       |                  |','line_number':2888,'multiline':False]['text':' ____________V_______V__________________V_____________','line_number':2889,'multiline':False]['text':'|   prefix'  |       |  | range |suffix'|raw_mem      ~','line_number':2890,'multiline':False]['text':'|________________+______|___^___|_______|_____________~','line_number':2891,'multiline':False]['text':'                 |          |','line_number':2892,'multiline':False]['text':'                 |_>_>_>_>_>^','line_number':2893,'multiline':False]['text':'','line_number':2894,'multiline':False]['text':'','line_number':2895,'multiline':False]['text':'New situation in Case B (hole_size >= 0):','line_number':2896,'multiline':False]['text':' range is moved through uninitialized moves','line_number':2897,'multiline':False]['text':'','line_number':2898,'multiline':False]['text':'       first_pos   last_pos         limit_pos','line_number':2899,'multiline':False]['text':'             |       |                  |','line_number':2900,'multiline':False]['text':' ____________V_______V__________________V________________','line_number':2901,'multiline':False]['text':'|    prefix' |       |                  | [hole] | range |','line_number':2902,'multiline':False]['text':'|_______________________________________|________|___^___|','line_number':2903,'multiline':False]['text':'                 |                                   |','line_number':2904,'multiline':False]['text':'                 |_>_>_>_>_>_>_>_>_>_>_>_>_>_>_>_>_>_^','line_number':2905,'multiline':False]['text':'','line_number':2906,'multiline':False]['text':'New situation in Case C (hole_size == 0):','line_number':2907,'multiline':False]['text':' range is moved through move assignments and uninitialized moves','line_number':2908,'multiline':False]['text':'','line_number':2909,'multiline':False]['text':'       first_pos   last_pos         limit_pos','line_number':2910,'multiline':False]['text':'             |       |                  |','line_number':2911,'multiline':False]['text':' ____________V_______V__________________V___','line_number':2912,'multiline':False]['text':'|   prefix'  |       |              | range |','line_number':2913,'multiline':False]['text':'|___________________________________|___^___|','line_number':2914,'multiline':False]['text':'                 |                      |','line_number':2915,'multiline':False]['text':'                 |_>_>_>_>_>_>_>_>_>_>_>^','line_number':2916,'multiline':False]['text':'','line_number':2922,'multiline':False]['text':'Case A:','line_number':2928,'multiline':False]['text':'All move assigned','line_number':2930,'multiline':False]['text':'Case B:','line_number':2933,'multiline':False]['text':'All uninitialized_moved','line_number':2935,'multiline':False]['text':'Cast in case size_type is narrower than int, promotions are applied','line_number':2938,'multiline':False]['text':'and Wconversion is in place','line_number':2939,'multiline':False]['text':'Case C:','line_number':2942,'multiline':False]['text':'Some uninitialized_moved','line_number':2944,'multiline':False]['text':'The rest is move assigned','line_number':2948,'multiline':False]['text':'inline single-element version as it is significantly smaller','line_number':2961,'multiline':False]['text':'There is enough memory','line_number':2966,'multiline':False]['text':'New elements can be just copied.','line_number':2975,'multiline':False]['text':'Move to uninitialized memory last objects','line_number':2976,'multiline':False]['text':'Copy previous to last objects to the initialized end','line_number':2981,'multiline':False]['text':'Insert new objects in the raw_pos','line_number':2983,'multiline':False]['text':'There is enough memory','line_number':2991,'multiline':False]['text':'n can be zero, if we want to reallocate!','line_number':3001,'multiline':False]['text':'Destroy and deallocate old elements','line_number':3010,'multiline':False]['text':'n can be zero to just expand capacity','line_number':3027,'multiline':False]['text':'Backup old data','line_number':3028,'multiline':False]['text':'Update the vector buffer information to a safe state','line_number':3034,'multiline':False]['text':'We can have 8 possibilities:','line_number':3039,'multiline':False]['text':'If anything goes wrong, this object will destroy','line_number':3046,'multiline':False]['text':'all the old objects to fulfill previous vector state','line_number':3047,'multiline':False]['text':'Check if s_before is big enough to hold the beginning of old data + new data','line_number':3049,'multiline':False]['text':'Copy first old values before pos, after that the new objects','line_number':3051,'multiline':False]['text':'Check if s_before is so big that even copying the old data + new data','line_number':3058,'multiline':False]['text':'there is a gap between the new data and the old data','line_number':3059,'multiline':False]['text':'Old situation:','line_number':3061,'multiline':False]['text':' _________________________________________________________','line_number':3062,'multiline':False]['text':'|            raw_mem                | old_begin | old_end |','line_number':3063,'multiline':False]['text':'| __________________________________|___________|_________|','line_number':3064,'multiline':False]['text':'','line_number':3065,'multiline':False]['text':'New situation:','line_number':3066,'multiline':False]['text':' _________________________________________________________','line_number':3067,'multiline':False]['text':'| old_begin |    new   | old_end |         raw_mem        |','line_number':3068,'multiline':False]['text':'|___________|__________|_________|________________________|','line_number':3069,'multiline':False]['text':'','line_number':3070,'multiline':False]['text':'Now initialize the rest of memory with the last old values','line_number':3071,'multiline':False]['text':'Special case to avoid operations in back insertion','line_number':3072,'multiline':False]['text':'All new elements correctly constructed, avoid new element destruction','line_number':3074,'multiline':False]['text':'Old values destroyed automatically with "old_values_destroyer"','line_number':3077,'multiline':False]['text':'when "old_values_destroyer" goes out of scope unless the have trivial','line_number':3078,'multiline':False]['text':'destructor after move.','line_number':3079,'multiline':False]['text':'s_before is so big that divides old_end','line_number':3083,'multiline':False]['text':'Old situation:','line_number':3085,'multiline':False]['text':' __________________________________________________','line_number':3086,'multiline':False]['text':'|            raw_mem         | old_begin | old_end |','line_number':3087,'multiline':False]['text':'| ___________________________|___________|_________|','line_number':3088,'multiline':False]['text':'','line_number':3089,'multiline':False]['text':'New situation:','line_number':3090,'multiline':False]['text':' __________________________________________________','line_number':3091,'multiline':False]['text':'| old_begin |   new    | old_end |  raw_mem        |','line_number':3092,'multiline':False]['text':'|___________|__________|_________|_________________|','line_number':3093,'multiline':False]['text':'','line_number':3094,'multiline':False]['text':'Now initialize the rest of memory with the last old values','line_number':3095,'multiline':False]['text':'All new elements correctly constructed, avoid new element destruction','line_number':3096,'multiline':False]['text':'Now initialize the rest of s_before memory with the','line_number':3099,'multiline':False]['text':'first of elements after new values','line_number':3100,'multiline':False]['text':'Now we have a contiguous buffer so program trailing element destruction','line_number':3102,'multiline':False]['text':'and update size to the final size.','line_number':3103,'multiline':False]['text':'Now move remaining last objects in the old buffer begin','line_number':3106,'multiline':False]['text':'Make sure data has to be moved','line_number':3108,'multiline':False]['text':'Once moved, avoid calling the destructors if trivial after move','line_number':3111,'multiline':False]['text':'If trivial destructor, we can uninitialized copy + copy in a single uninitialized copy','line_number':3116,'multiline':False]['text':'Check if we have to do the insertion in two phases','line_number':3125,'multiline':False]['text':'since maybe s_before is not big enough and','line_number':3126,'multiline':False]['text':'the buffer was expanded both sides','line_number':3127,'multiline':False]['text':'','line_number':3128,'multiline':False]['text':'Old situation:','line_number':3129,'multiline':False]['text':' _________________________________________________','line_number':3130,'multiline':False]['text':'| raw_mem | old_begin + old_end |  raw_mem        |','line_number':3131,'multiline':False]['text':'|_________|_____________________|_________________|','line_number':3132,'multiline':False]['text':'','line_number':3133,'multiline':False]['text':'New situation with do_after:','line_number':3134,'multiline':False]['text':' _________________________________________________','line_number':3135,'multiline':False]['text':'|     old_begin + new + old_end     |  raw_mem    |','line_number':3136,'multiline':False]['text':'|___________________________________|_____________|','line_number':3137,'multiline':False]['text':'','line_number':3138,'multiline':False]['text':'New without do_after:','line_number':3139,'multiline':False]['text':' _________________________________________________','line_number':3140,'multiline':False]['text':'| old_begin + new + old_end  |  raw_mem           |','line_number':3141,'multiline':False]['text':'|____________________________|____________________|','line_number':3142,'multiline':False]['text':'','line_number':3143,'multiline':False]['text':'Now we can have two situations: the raw_mem of the','line_number':3146,'multiline':False]['text':'beginning divides the old_begin, or the new elements:','line_number':3147,'multiline':False]['text':'The raw memory divides the old_begin group:','line_number':3149,'multiline':False]['text':'','line_number':3150,'multiline':False]['text':'If we need two phase construction (do_after)','line_number':3151,'multiline':False]['text':'new group is divided in new = new_beg + new_end groups','line_number':3152,'multiline':False]['text':'In this phase only new_beg will be inserted','line_number':3153,'multiline':False]['text':'','line_number':3154,'multiline':False]['text':'Old situation:','line_number':3155,'multiline':False]['text':' _________________________________________________','line_number':3156,'multiline':False]['text':'| raw_mem | old_begin | old_end |  raw_mem        |','line_number':3157,'multiline':False]['text':'|_________|___________|_________|_________________|','line_number':3158,'multiline':False]['text':'','line_number':3159,'multiline':False]['text':'New situation with do_after(1):','line_number':3160,'multiline':False]['text':'This is not definitive situation, the second phase','line_number':3161,'multiline':False]['text':'will include','line_number':3162,'multiline':False]['text':' _________________________________________________','line_number':3163,'multiline':False]['text':'| old_begin | new_beg | old_end |  raw_mem        |','line_number':3164,'multiline':False]['text':'|___________|_________|_________|_________________|','line_number':3165,'multiline':False]['text':'','line_number':3166,'multiline':False]['text':'New situation without do_after:','line_number':3167,'multiline':False]['text':' _________________________________________________','line_number':3168,'multiline':False]['text':'| old_begin | new | old_end |  raw_mem            |','line_number':3169,'multiline':False]['text':'|___________|_____|_________|_____________________|','line_number':3170,'multiline':False]['text':'','line_number':3171,'multiline':False]['text':'Copy the first part of old_begin to raw_mem','line_number':3172,'multiline':False]['text':'The buffer is all constructed until old_end,','line_number':3174,'multiline':False]['text':'so program trailing destruction and assign final size','line_number':3175,'multiline':False]['text':'if !do_after, s_before+n otherwise.','line_number':3176,'multiline':False]['text':'release destroyer and update size','line_number':3180,'multiline':False]['text':'Now copy the second part of old_begin overwriting itself','line_number':3193,'multiline':False]['text':'Now copy the new_beg elements','line_number':3195,'multiline':False]['text':'If there is no after work and the last old part needs to be moved to front, do it','line_number':3198,'multiline':False]['text':'Now displace old_end elements','line_number':3200,'multiline':False]['text':'If we have to expand both sides,','line_number':3205,'multiline':False]['text':'we will play if the first new values so','line_number':3206,'multiline':False]['text':'calculate the upper bound of new values','line_number':3207,'multiline':False]['text':'The raw memory divides the new elements','line_number':3209,'multiline':False]['text':'','line_number':3210,'multiline':False]['text':'If we need two phase construction (do_after)','line_number':3211,'multiline':False]['text':'new group is divided in new = new_beg + new_end groups','line_number':3212,'multiline':False]['text':'In this phase only new_beg will be inserted','line_number':3213,'multiline':False]['text':'','line_number':3214,'multiline':False]['text':'Old situation:','line_number':3215,'multiline':False]['text':' _______________________________________________________','line_number':3216,'multiline':False]['text':'|   raw_mem     | old_begin | old_end |  raw_mem        |','line_number':3217,'multiline':False]['text':'|_______________|___________|_________|_________________|','line_number':3218,'multiline':False]['text':'','line_number':3219,'multiline':False]['text':'New situation with do_after():','line_number':3220,'multiline':False]['text':' ____________________________________________________','line_number':3221,'multiline':False]['text':'| old_begin |    new_beg    | old_end |  raw_mem     |','line_number':3222,'multiline':False]['text':'|___________|_______________|_________|______________|','line_number':3223,'multiline':False]['text':'','line_number':3224,'multiline':False]['text':'New situation without do_after:','line_number':3225,'multiline':False]['text':' ______________________________________________________','line_number':3226,'multiline':False]['text':'| old_begin | new | old_end |  raw_mem                 |','line_number':3227,'multiline':False]['text':'|___________|_____|_________|__________________________|','line_number':3228,'multiline':False]['text':'','line_number':3229,'multiline':False]['text':'First copy whole old_begin and part of new to raw_mem','line_number':3230,'multiline':False]['text':'The buffer is all constructed until old_end,','line_number':3236,'multiline':False]['text':'release destroyer','line_number':3237,'multiline':False]['text':'Copy new_beg part','line_number':3242,'multiline':False]['text':'Copy all new elements','line_number':3246,'multiline':False]['text':'Displace old_end, but make sure data has to be moved','line_number':3251,'multiline':False]['text':'To avoid warnings of unused initialization for move_end in case','line_number':3254,'multiline':False]['text':'trivial_dctr_after_move is true','line_number':3255,'multiline':False]['text':'Destroy remaining moved elements from old_end except if they','line_number':3256,'multiline':False]['text':'have trivial destructor after being moved','line_number':3257,'multiline':False]['text':'This is only executed if two phase construction is needed','line_number':3266,'multiline':False]['text':'The raw memory divides the new elements','line_number':3268,'multiline':False]['text':'','line_number':3269,'multiline':False]['text':'Old situation:','line_number':3270,'multiline':False]['text':' ______________________________________________________','line_number':3271,'multiline':False]['text':'|   raw_mem    | old_begin |  old_end   |  raw_mem     |','line_number':3272,'multiline':False]['text':'|______________|___________|____________|______________|','line_number':3273,'multiline':False]['text':'','line_number':3274,'multiline':False]['text':'New situation with do_after(1):','line_number':3275,'multiline':False]['text':' _______________________________________________________','line_number':3276,'multiline':False]['text':'| old_begin   +   new_beg  | new_end |old_end | raw_mem |','line_number':3277,'multiline':False]['text':'|__________________________|_________|________|_________|','line_number':3278,'multiline':False]['text':'','line_number':3279,'multiline':False]['text':'New situation with do_after(2):','line_number':3280,'multiline':False]['text':' ______________________________________________________','line_number':3281,'multiline':False]['text':'| old_begin      +       new            | old_end |raw |','line_number':3282,'multiline':False]['text':'|_______________________________________|_________|____|','line_number':3283,'multiline':False]['text':'','line_number':3284,'multiline':False]['text':'We can have two situations:','line_number':3288,'multiline':False]['text':'The raw_mem from end will divide displaced old_end','line_number':3290,'multiline':False]['text':'','line_number':3291,'multiline':False]['text':'Old situation:','line_number':3292,'multiline':False]['text':' ______________________________________________________','line_number':3293,'multiline':False]['text':'|   raw_mem    | old_begin |  old_end   |  raw_mem     |','line_number':3294,'multiline':False]['text':'|______________|___________|____________|______________|','line_number':3295,'multiline':False]['text':'','line_number':3296,'multiline':False]['text':'New situation with do_after(1):','line_number':3297,'multiline':False]['text':' _______________________________________________________','line_number':3298,'multiline':False]['text':'| old_begin   +   new_beg  | new_end |old_end | raw_mem |','line_number':3299,'multiline':False]['text':'|__________________________|_________|________|_________|','line_number':3300,'multiline':False]['text':'','line_number':3301,'multiline':False]['text':'First copy the part of old_end raw_mem','line_number':3302,'multiline':False]['text':'Displace the rest of old_end to the new position','line_number':3306,'multiline':False]['text':'Now overwrite with new_end','line_number':3308,'multiline':False]['text':'The new_end part is [first + (n - n_after), last)','line_number':3309,'multiline':False]['text':'The raw_mem from end will divide new_end part','line_number':3313,'multiline':False]['text':'','line_number':3314,'multiline':False]['text':'Old situation:','line_number':3315,'multiline':False]['text':' _____________________________________________________________','line_number':3316,'multiline':False]['text':'|   raw_mem    | old_begin |  old_end   |  raw_mem            |','line_number':3317,'multiline':False]['text':'|______________|___________|____________|_____________________|','line_number':3318,'multiline':False]['text':'','line_number':3319,'multiline':False]['text':'New situation with do_after(2):','line_number':3320,'multiline':False]['text':' _____________________________________________________________','line_number':3321,'multiline':False]['text':'| old_begin   +   new_beg  |     new_end   |old_end | raw_mem |','line_number':3322,'multiline':False]['text':'|__________________________|_______________|________|_________|','line_number':3323,'multiline':False]['text':'First initialize data in raw memory','line_number':3325,'multiline':False]['text':'Copy to the old_end part to the uninitialized zone leaving a gap.','line_number':3328,'multiline':False]['text':'Copy the first part to the already constructed old_end zone','line_number':3333,'multiline':False]['text':'Copy the rest to the uninitialized zone filling the gap','line_number':3335,'multiline':False]['text':'If n is out of range, throw an out_of_range exception','line_number':3346,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3371,'multiline':False]['text':'namespace boost::container','line_number':3387,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':3393,'multiline':False]['text':'!specialization for optimizations','line_number':3394,'multiline':False]['text':'See comments on vec_iterator::element_type to know why is this needed','line_number':3406,'multiline':False]['text':'BOOST_GNU_STDLIB','line_number':3418,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3420,'multiline':False]['text':'   #ifndef  BOOST_CONTAINER_CONTAINER_VECTOR_HPP','line_number':3424,'multiline':False]