['text':' Boost Lambda Library -  function_adaptors.hpp ----------------------------','line_number':1,'multiline':False]['text':' Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' For more information, see www.boost.org','line_number':9,'multiline':False]['text':' Support functors that use the boost::result_of return type convention.','line_number':51,'multiline':False]['text':' we do not know the return type off-hand, we must ask it from Func','line_number':155,'multiline':False]['text':' To sig we pass a cons list, where the head is the function object type','line_number':156,'multiline':False]['text':' itself (potentially cv-qualified)','line_number':157,'multiline':False]['text':' and the tail contains the types of the actual arguments to be passed','line_number':158,'multiline':False]['text':' to the function object. The arguments can be cv qualified','line_number':159,'multiline':False]['text':' as well.','line_number':160,'multiline':False]['text':' BOOST_NO_RESULT_OF','line_number':169,'multiline':False]['text':' error ','line_number':230,'multiline':False]['text':' -- function adaptors with data member access','line_number':232,'multiline':False]['text':'  typedef detail::unspecified type;','line_number':236,'multiline':False]['text':' T can have qualifiers and can be a reference type','line_number':238,'multiline':False]['text':' We get the return type by adding const, if the object through which','line_number':239,'multiline':False]['text':' the data member is accessed is const, and finally adding a reference','line_number':240,'multiline':False]['text':' -- function adaptors with 1 argument apply','line_number':299,'multiline':False]['text':' -- function adaptors with 2 argument apply','line_number':322,'multiline':False]['text':' -- function adaptors with 3 argument apply','line_number':372,'multiline':False]['text':' -- function adaptors with 4 argument apply','line_number':424,'multiline':False]['text':' -- function adaptors with 5 argument apply','line_number':474,'multiline':False]['text':' -- function adaptors with 6 argument apply','line_number':524,'multiline':False]['text':' -- function adaptors with 7 argument apply','line_number':574,'multiline':False]['text':' -- function adaptors with 8 argument apply','line_number':624,'multiline':False]['text':' -- function adaptors with 9 argument apply','line_number':674,'multiline':False]['text':' -- function adaptors with 10 argument apply','line_number':724,'multiline':False]['text':' namespace lambda','line_number':773,'multiline':False]['text':' namespace boost','line_number':774,'multiline':False]