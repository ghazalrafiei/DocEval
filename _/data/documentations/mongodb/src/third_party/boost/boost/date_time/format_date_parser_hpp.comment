['text':' Copyright (c) 2004-2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':5,'multiline':True]['text':'! Helper function for parsing fixed length strings into integers','line_number':36,'multiline':False]['text':'! Will consume 'length' number of characters from stream. Consumed
 * character are transfered to parse_match_result struct.
 * Returns '-1' if no number can be parsed or incorrect number of
 * digits in stream. ','line_number':37,'multiline':True]['text':'typedef std::basic_string<charT>  string_type;','line_number':50,'multiline':False]['text':'string_type s;','line_number':52,'multiline':False]['text':' Since a fill_char can be anything, we convert it to a zero.
       * lexical_cast will behave predictably when zero is used as fill. ','line_number':56,'multiline':True]['text':' mr.cache will hold leading zeros. size() tells us when input is too short.','line_number':67,'multiline':False]['text':' we want to return -1 if the cast fails so nothing to do here','line_number':74,'multiline':False]['text':'! Helper function for parsing fixed length strings into integers','line_number':79,'multiline':False]['text':'! Will consume 'length' number of characters from stream. Consumed
 * character are transfered to parse_match_result struct.
 * Returns '-1' if no number can be parsed or incorrect number of
 * digits in stream. ','line_number':80,'multiline':True]['text':'! Helper function for parsing varied length strings into integers','line_number':95,'multiline':False]['text':'! Will consume 'max_length' characters from stream only if those
 * characters are digits. Returns '-1' if no number can be parsed.
 * Will not parse a number preceeded by a '+' or '-'. ','line_number':96,'multiline':True]['text':'! Class with generic date parsing using a format string','line_number':122,'multiline':False]['text':'! The following is the set of recognized format specifiers
 -  %a - Short weekday name
 -  %A - Long weekday name
 -  %b - Abbreviated month name
 -  %B - Full month name
 -  %d - Day of the month as decimal 01 to 31
 -  %j - Day of year as decimal from 001 to 366
 -  %m - Month name as a decimal 01 to 12
 -  %U - Week number 00 to 53 with first Sunday as the first day of week 1?
 -  %w - Weekday as decimal number 0 to 6 where Sunday == 0
 -  %W - Week number 00 to 53 where Monday is first day of week 1
 -  %x - facet default date representation
 -  %y - Year without the century - eg: 04 for 2004
 -  %Y - Year with century

 The weekday specifiers (%a and %A) do not add to the date construction,
 but they provide a way to skip over the weekday names for formats that
 provide them.

 todo -- Another interesting feature that this approach could provide is
         an option to fill in any missing fields with the current values
         from the clock.  So if you have %m-%d the parser would detect
         the missing year value and fill it in using the clock.

 todo -- What to do with the %x.  %x in the classic facet is just bad...

 ','line_number':123,'multiline':True]['text':' TODO sv_parser uses its default constructor - write the others','line_number':168,'multiline':False]['text':'! Of all the objects that the format_date_parser can parse, only a
   * date can be a special value. Therefore, only parse_date checks
   * for special_values. ','line_number':246,'multiline':True]['text':' skip leading whitespace','line_number':257,'multiline':False]['text':' wkday(0);','line_number':260,'multiline':False]['text':' Initialized the following to their minimum values. These intermediate
     * objects are used so we get specific exceptions when part of the input
     * is unparsable.
     * Ex: "205-Jan-15" will throw a bad_year, "2005-Jsn-15"- bad_month, etc.','line_number':261,'multiline':True]['text':'this value is just throw away.  It could be used for','line_number':280,'multiline':False]['text':'error checking potentially, but it isn't helpful in','line_number':281,'multiline':False]['text':'actually constructing the date - we just need to get it','line_number':282,'multiline':False]['text':'out of the stream','line_number':283,'multiline':False]['text':' check special_values','line_number':286,'multiline':False]['text':'this value is just throw away.  It could be used for','line_number':299,'multiline':False]['text':'error checking potentially, but it isn't helpful in','line_number':300,'multiline':False]['text':'actually constructing the date - we just need to get it','line_number':301,'multiline':False]['text':'out of the stream','line_number':302,'multiline':False]['text':' check special_values','line_number':305,'multiline':False]['text':' check special_values','line_number':320,'multiline':False]['text':' check special_values','line_number':335,'multiline':False]['text':' these next two lines are so we get an exception with bad input','line_number':379,'multiline':False]['text':'make 2 digit years in this century','line_number':417,'multiline':False]['text':'ignore those we don't understand','line_number':422,'multiline':False]['text':'switch','line_number':424,'multiline':False]['text':' itr == '%', second consecutive','line_number':427,'multiline':False]['text':'advance past format specifier','line_number':431,'multiline':False]['text':'skip past chars in format and in buffer','line_number':433,'multiline':False]['text':'end of prior year','line_number':445,'multiline':False]['text':' exceptions were thrown earlier','line_number':449,'multiline':False]['text':' if input was no good','line_number':450,'multiline':False]['text':'! Throws bad_month if unable to parse','line_number':453,'multiline':False]['text':'! Throws bad_month if unable to parse','line_number':463,'multiline':False]['text':' skip leading whitespace','line_number':472,'multiline':False]['text':' var_string_to_int returns -1 if parse failed. That will','line_number':505,'multiline':False]['text':' cause a bad_month exception to be thrown so we do nothing here','line_number':506,'multiline':False]['text':'ignore those we don't understand','line_number':510,'multiline':False]['text':'switch','line_number':512,'multiline':False]['text':' itr == '%', second consecutive','line_number':515,'multiline':False]['text':'advance past format specifier','line_number':519,'multiline':False]['text':'skip past chars in format and in buffer','line_number':521,'multiline':False]['text':' throws bad_month exception when values are zero','line_number':532,'multiline':False]['text':'! Expects 1 or 2 digits 1-31. Throws bad_day_of_month if unable to parse','line_number':535,'multiline':False]['text':' skip leading whitespace','line_number':540,'multiline':False]['text':'! Expects 2 digits 01-31. Throws bad_day_of_month if unable to parse','line_number':545,'multiline':False]['text':' skip leading whitespace','line_number':550,'multiline':False]['text':'return day_type(var_string_to_int<short, charT>(sitr, stream_end, 2));','line_number':553,'multiline':False]['text':' skip leading whitespace','line_number':574,'multiline':False]['text':'this value is just throw away.  It could be used for','line_number':588,'multiline':False]['text':'error checking potentially, but it isn't helpful in','line_number':589,'multiline':False]['text':'actually constructing the date - we just need to get it','line_number':590,'multiline':False]['text':'out of the stream','line_number':591,'multiline':False]['text':'this value is just throw away.  It could be used for','line_number':601,'multiline':False]['text':'error checking potentially, but it isn't helpful in','line_number':602,'multiline':False]['text':'actually constructing the date - we just need to get it','line_number':603,'multiline':False]['text':'out of the stream','line_number':604,'multiline':False]['text':' weekday as number 0-6, Sunday == 0','line_number':614,'multiline':False]['text':'ignore those we don't understand','line_number':619,'multiline':False]['text':'switch','line_number':621,'multiline':False]['text':' itr == '%', second consecutive','line_number':624,'multiline':False]['text':'advance past format specifier','line_number':628,'multiline':False]['text':'skip past chars in format and in buffer','line_number':630,'multiline':False]['text':' throws bad_day_of_month exception','line_number':641,'multiline':False]['text':' when values are zero','line_number':642,'multiline':False]['text':'! throws bad_year if unable to parse','line_number':645,'multiline':False]['text':'! throws bad_year if unable to parse','line_number':655,'multiline':False]['text':' skip leading whitespace','line_number':662,'multiline':False]['text':'match_results mr;','line_number':673,'multiline':False]['text':' year from 4 digit string','line_number':677,'multiline':False]['text':' year from 2 digit string (no century)','line_number':683,'multiline':False]['text':'make 2 digit years in this century','line_number':685,'multiline':False]['text':'ignore those we don't understand','line_number':689,'multiline':False]['text':'switch','line_number':691,'multiline':False]['text':' itr == '%', second consecutive','line_number':694,'multiline':False]['text':'advance past format specifier','line_number':698,'multiline':False]['text':'skip past chars in format and in buffer','line_number':700,'multiline':False]['text':' throws bad_year exception when values are zero','line_number':706,'multiline':False]['text':'namespace','line_number':719,'multiline':False]