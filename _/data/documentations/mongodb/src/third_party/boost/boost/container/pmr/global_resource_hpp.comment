['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'! <b>Returns</b>: A pointer to a static-duration object of a type derived from','line_number':29,'multiline':False]['text':'!   memory_resource that can serve as a resource for allocating memory using','line_number':30,'multiline':False]['text':'!   global `operator new` and global `operator delete`. The same value is returned every time this function','line_number':31,'multiline':False]['text':'!   is called. For return value p and memory resource r, p->is_equal(r) returns &r == p.','line_number':32,'multiline':False]['text':'! <b>Returns</b>: A pointer to a static-duration object of a type derived from','line_number':35,'multiline':False]['text':'!   memory_resource for which allocate() always throws bad_alloc and for which','line_number':36,'multiline':False]['text':'!   deallocate() has no effect. The same value is returned every time this function','line_number':37,'multiline':False]['text':'!   is called. For return value p and memory resource r, p->is_equal(r) returns &r == p.','line_number':38,'multiline':False]['text':'! <b>Effects</b>: If r is non-null, sets the value of the default memory resource','line_number':41,'multiline':False]['text':'!   pointer to r, otherwise sets the default memory resource pointer to new_delete_resource().','line_number':42,'multiline':False]['text':'!','line_number':43,'multiline':False]['text':'! <b>Postconditions</b>: get_default_resource() == r.','line_number':44,'multiline':False]['text':'!','line_number':45,'multiline':False]['text':'! <b>Returns</b>: The previous value of the default memory resource pointer.','line_number':46,'multiline':False]['text':'!','line_number':47,'multiline':False]['text':'! <b>Remarks</b>: Calling the set_default_resource and get_default_resource functions shall','line_number':48,'multiline':False]['text':'!   not incur a data race. A call to the set_default_resource function shall synchronize','line_number':49,'multiline':False]['text':'!   with subsequent calls to the set_default_resource and get_default_resource functions.','line_number':50,'multiline':False]['text':'! <b>Returns</b>: The current value of the default','line_number':53,'multiline':False]['text':'!   memory resource pointer.','line_number':54,'multiline':False]['text':'namespace pmr {','line_number':57,'multiline':False]['text':'namespace container {','line_number':58,'multiline':False]['text':'namespace boost {','line_number':59,'multiline':False]['text':'BOOST_CONTAINER_PMR_GLOBAL_RESOURCE_HPP','line_number':63,'multiline':False]