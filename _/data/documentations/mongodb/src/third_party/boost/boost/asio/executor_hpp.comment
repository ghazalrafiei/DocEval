['text':'','line_number':1,'multiline':False]['text':' executor.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Exception thrown when trying to access an empty polymorphic executor.','line_number':34,'multiline':False]['text':'/ Constructor.','line_number':39,'multiline':False]['text':'/ Obtain message associated with exception.','line_number':42,'multiline':False]['text':'/ Polymorphic wrapper for executors.','line_number':47,'multiline':False]['text':'/ Default constructor.','line_number':51,'multiline':False]['text':'/ Construct from nullptr.','line_number':57,'multiline':False]['text':'/ Copy constructor.','line_number':63,'multiline':False]['text':'/ Move constructor.','line_number':70,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':76,'multiline':False]['text':'/ Construct a polymorphic wrapper for the specified executor.','line_number':78,'multiline':False]['text':'/ Allocator-aware constructor to create a polymorphic wrapper for the','line_number':82,'multiline':False]['text':'/ specified executor.','line_number':83,'multiline':False]['text':'/ Destructor.','line_number':87,'multiline':False]['text':'/ Assignment operator.','line_number':93,'multiline':False]['text':' Move assignment operator.','line_number':102,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':110,'multiline':False]['text':'/ Assignment operator for nullptr_t.','line_number':112,'multiline':False]['text':'/ Assignment operator to create a polymorphic wrapper for the specified','line_number':120,'multiline':False]['text':'/ executor.','line_number':121,'multiline':False]['text':'/ Obtain the underlying execution context.','line_number':132,'multiline':False]['text':'/ Inform the executor that it has some outstanding work to do.','line_number':138,'multiline':False]['text':'/ Inform the executor that some work is no longer outstanding.','line_number':144,'multiline':False]['text':'/ Request the executor to invoke the given function object.','line_number':150,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make a copy
   * of the handler object as required. The function signature of the function
   * object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':151,'multiline':True]['text':'/ Request the executor to invoke the given function object.','line_number':166,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':167,'multiline':True]['text':'/ Request the executor to invoke the given function object.','line_number':182,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object is executed according to the rules of the
   * target executor object.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':183,'multiline':True]['text':'/ Operator to test if the executor contains a valid target.','line_number':202,'multiline':False]['text':'/ Obtain type information for the target executor object.','line_number':208,'multiline':False]['text':'*
   * @returns If @c *this has a target type of type @c T, <tt>typeid(T)</tt>;
   * otherwise, <tt>typeid(void)</tt>.
   ','line_number':209,'multiline':True]['text':' !defined(BOOST_ASIO_NO_TYPEID) || defined(GENERATING_DOCUMENTATION)','line_number':218,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TYPEID) || defined(GENERATING_DOCUMENTATION)','line_number':223,'multiline':False]['text':'/ Obtain a pointer to the target executor object.','line_number':225,'multiline':False]['text':'*
   * @returns If <tt>target_type() == typeid(T)</tt>, a pointer to the stored
   * executor target; otherwise, a null pointer.
   ','line_number':226,'multiline':True]['text':'/ Obtain a pointer to the target executor object.','line_number':233,'multiline':False]['text':'*
   * @returns If <tt>target_type() == typeid(T)</tt>, a pointer to the stored
   * executor target; otherwise, a null pointer.
   ','line_number':234,'multiline':True]['text':'/ Compare two executors for equality.','line_number':241,'multiline':False]['text':'/ Compare two executors for inequality.','line_number':252,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TYPEID)','line_number':266,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TYPEID)','line_number':268,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TYPEID)','line_number':275,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TYPEID)','line_number':278,'multiline':False]['text':' Base class for all polymorphic executor implementations.','line_number':281,'multiline':False]['text':' Helper function to check and return the implementation pointer.','line_number':307,'multiline':False]['text':' Helper function to clone another implementation.','line_number':318,'multiline':False]['text':' Helper function to destroy an implementation.','line_number':324,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':332,'multiline':False]['text':' namespace asio','line_number':335,'multiline':False]['text':' namespace boost','line_number':336,'multiline':False]['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':345,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':347,'multiline':False]['text':' BOOST_ASIO_EXECUTOR_HPP','line_number':349,'multiline':False]