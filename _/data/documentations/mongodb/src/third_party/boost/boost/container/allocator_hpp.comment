['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2007-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'!\file','line_number':36,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':61,'multiline':False]['text':'!Obtains an allocator that allocates','line_number':63,'multiline':False]['text':'!objects of type T2','line_number':64,'multiline':False]['text':'!Default constructor','line_number':75,'multiline':False]['text':'!Never throws','line_number':76,'multiline':False]['text':'!Constructor from other allocator.','line_number':80,'multiline':False]['text':'!Never throws','line_number':81,'multiline':False]['text':'!Constructor from related allocator.','line_number':85,'multiline':False]['text':'!Never throws','line_number':86,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':92,'multiline':False]['text':'! This class is an extended STL-compatible that offers advanced allocation mechanism','line_number':94,'multiline':False]['text':'!(in-place expansion, shrinking, burst-allocation...)','line_number':95,'multiline':False]['text':'!','line_number':96,'multiline':False]['text':'! This allocator is a wrapper around a modified DLmalloc.','line_number':97,'multiline':False]['text':'! If Version is 1, the allocator is a STL conforming allocator. If Version is 2,','line_number':98,'multiline':False]['text':'! the allocator offers advanced expand in place and burst allocation capabilities.','line_number':99,'multiline':False]['text':'!','line_number':100,'multiline':False]['text':'! AllocationDisableMask works only if Version is 2 and it can be an inclusive OR','line_number':101,'multiline':False]['text':'! of allocation types the user wants to disable.','line_number':102,'multiline':False]['text':'Self type','line_number':112,'multiline':False]['text':'Not assignable from related allocator','line_number':115,'multiline':False]['text':'The mask can't disable all the allocation types','line_number':122,'multiline':False]['text':'The mask is only valid for version 2 allocators','line_number':125,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':128,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':149,'multiline':False]['text':'!Obtains an allocator that allocates','line_number':151,'multiline':False]['text':'!objects of type T2','line_number':152,'multiline':False]['text':'!Default constructor','line_number':159,'multiline':False]['text':'!Never throws','line_number':160,'multiline':False]['text':'!Constructor from other allocator.','line_number':164,'multiline':False]['text':'!Never throws','line_number':165,'multiline':False]['text':'!Constructor from related allocator.','line_number':169,'multiline':False]['text':'!Never throws','line_number':170,'multiline':False]['text':'!Allocates memory for an array of count elements.','line_number':179,'multiline':False]['text':'!Throws bad_alloc if there is no enough memory','line_number':180,'multiline':False]['text':'!If Version is 2, this allocated memory can only be deallocated','line_number':181,'multiline':False]['text':'!with deallocate() or (for Version == 2) deallocate_many()','line_number':182,'multiline':False]['text':'!Deallocates previously allocated memory.','line_number':194,'multiline':False]['text':'!Never throws','line_number':195,'multiline':False]['text':'!Returns the maximum number of elements that could be allocated.','line_number':199,'multiline':False]['text':'!Never throws','line_number':200,'multiline':False]['text':'!Swaps two allocators, does nothing','line_number':204,'multiline':False]['text':'!because this allocator is stateless','line_number':205,'multiline':False]['text':'!An allocator always compares to true, as memory allocated with one','line_number':209,'multiline':False]['text':'!instance can be deallocated by another instance','line_number':210,'multiline':False]['text':'!An allocator always compares to false, as memory allocated with one','line_number':215,'multiline':False]['text':'!instance can be deallocated by another instance','line_number':216,'multiline':False]['text':'!An advanced function that offers in-place expansion shrink to fit and new allocation','line_number':221,'multiline':False]['text':'!capabilities. Memory allocated with this function can only be deallocated with deallocate()','line_number':222,'multiline':False]['text':'!or deallocate_many().','line_number':223,'multiline':False]['text':'!This function is available only with Version == 2','line_number':224,'multiline':False]['text':'!Returns maximum the number of objects the previously allocated memory','line_number':239,'multiline':False]['text':'!pointed by p can hold.','line_number':240,'multiline':False]['text':'!Memory must not have been allocated with','line_number':241,'multiline':False]['text':'!allocate_one or allocate_individual.','line_number':242,'multiline':False]['text':'!This function is available only with Version == 2','line_number':243,'multiline':False]['text':'!Allocates just one object. Memory allocated with this function','line_number':250,'multiline':False]['text':'!must be deallocated only with deallocate_one().','line_number':251,'multiline':False]['text':'!Throws bad_alloc if there is no enough memory','line_number':252,'multiline':False]['text':'!This function is available only with Version == 2','line_number':253,'multiline':False]['text':'!Allocates many elements of size == 1.','line_number':260,'multiline':False]['text':'!Elements must be individually deallocated with deallocate_one()','line_number':261,'multiline':False]['text':'!This function is available only with Version == 2','line_number':262,'multiline':False]['text':'!Deallocates memory previously allocated with allocate_one().','line_number':269,'multiline':False]['text':'!You should never use deallocate_one to deallocate memory allocated','line_number':270,'multiline':False]['text':'!with other functions different from allocate_one() or allocate_individual.','line_number':271,'multiline':False]['text':'Never throws','line_number':272,'multiline':False]['text':'!Deallocates memory allocated with allocate_one() or allocate_individual().','line_number':279,'multiline':False]['text':'!This function is available only with Version == 2','line_number':280,'multiline':False]['text':'!Allocates many elements of size elem_size.','line_number':288,'multiline':False]['text':'!Elements must be individually deallocated with deallocate()','line_number':289,'multiline':False]['text':'!This function is available only with Version == 2','line_number':290,'multiline':False]['text':'
      if(!dlmalloc_multialloc_nodes( n_elements, elem_size*sizeof(T), BOOST_CONTAINER_DL_MULTIALLOC_DEFAULT_CONTIGUOUS
                                   , move_detail::force_ptr<dlmalloc_memchain *>(&chain))){
         boost::container::throw_bad_alloc();
      }','line_number':303,'multiline':True]['text':'!Allocates n_elements elements, each one of size elem_sizes[i]','line_number':310,'multiline':False]['text':'!Elements must be individually deallocated with deallocate()','line_number':311,'multiline':False]['text':'!This function is available only with Version == 2','line_number':312,'multiline':False]['text':'
      if(!dlmalloc_multialloc_arrays( n_elements, elem_sizes, sizeof(T), BOOST_CONTAINER_DL_MULTIALLOC_DEFAULT_CONTIGUOUS
                                    , move_detail::force_ptr<dlmalloc_memchain *>(&chain))){
         boost::container::throw_bad_alloc();
      }','line_number':325,'multiline':True]['text':'!Deallocates several elements allocated by','line_number':332,'multiline':False]['text':'!allocate_many(), allocate(), or allocation_command().','line_number':333,'multiline':False]['text':'!This function is available only with Version == 2','line_number':334,'multiline':False]['text':'dlmalloc_multidealloc(move_detail::force_ptr<dlmalloc_memchain *>(&chain));','line_number':343,'multiline':False]['text':'namespace container {','line_number':371,'multiline':False]['text':'namespace boost {','line_number':372,'multiline':False]['text':'BOOST_CONTAINER_ALLOCATOR_HPP','line_number':376,'multiline':False]