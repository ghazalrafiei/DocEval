['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2021-2021.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'The following is used to support high precision time clocks','line_number':33,'multiline':False]['text':' gmtime_r() not in namespace std???','line_number':81,'multiline':False]['text':' BOOST_DATE_TIME_HAS_REENTRANT_STD_FUNCTIONS','line_number':94,'multiline':False]['text':' Clang has to be checked before MSVC','line_number':96,'multiline':False]['text':' preserve warning settings','line_number':100,'multiline':False]['text':' disable depricated localtime/gmtime warning on vc8','line_number':101,'multiline':False]['text':' Clang has to be checked before MSVC','line_number':110,'multiline':False]['text':' restore warnings to previous state','line_number':113,'multiline':False]['text':' BOOST_DATE_TIME_HAS_REENTRANT_STD_FUNCTIONS','line_number':116,'multiline':False]['text':'!
* The function converts file_time into number of microseconds elapsed since 1970-Jan-01
*
* \note Only dates after 1970-Jan-01 are supported. Dates before will be wrapped.
','line_number':119,'multiline':True]['text':' shift is difference between 1970-Jan-01 & 1601-Jan-01','line_number':126,'multiline':False]['text':' in 100-nanosecond units','line_number':127,'multiline':False]['text':' (27111902 << 32) + 3577643008','line_number':128,'multiline':False]['text':' 100-nanos since 1601-Jan-01','line_number':130,'multiline':False]['text':' filetime is now 100-nanos since 1970-Jan-01','line_number':133,'multiline':False]['text':' truncate to microseconds','line_number':134,'multiline':False]['text':'gettimeofday does not support TZ adjust on Linux.','line_number':231,'multiline':False]['text':' it will not wrap, since ft is the current time','line_number':237,'multiline':False]['text':' and cannot be before 1970-Jan-01','line_number':238,'multiline':False]['text':' seconds since epoch','line_number':239,'multiline':False]['text':' microseconds -- static casts suppress warnings','line_number':240,'multiline':False]['text':'The following line will adjust the fractional second tick in terms','line_number':252,'multiline':False]['text':'of the current time system.  For example, if the time system','line_number':253,'multiline':False]['text':'doesn't support fractional seconds then res_adjust returns 0','line_number':254,'multiline':False]['text':'and all the fractional seconds return 0.','line_number':255,'multiline':False]['text':'gettimeofday does not support TZ adjust on Linux.','line_number':275,'multiline':False]['text':' it will not wrap, since ft is the current time','line_number':281,'multiline':False]['text':' and cannot be before 1970-Jan-01','line_number':282,'multiline':False]['text':'
template<class Duration>
inline ustime duration_to_timepoint(const Duration &dur, typename enable_if_ptime<Duration>::type* = 0)
{
   return dur.is_pos_infinity();
}

template<class Duration>
inline bool duration_to_timepoint(const Duration &, typename disable_if_ptime<Duration>::type* = 0)
{
   return false;
}
','line_number':323,'multiline':True]['text':' duration_to_milliseconds','line_number':337,'multiline':False]['text':' duration_to_usduration','line_number':357,'multiline':False]['text':' duration_to_ustime','line_number':372,'multiline':False]['text':'namespace ipcdetail {','line_number':381,'multiline':False]['text':'namespace interprocess {','line_number':382,'multiline':False]['text':'namespace boost {','line_number':383,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DETAIL_TIMED_UTILS_HPP','line_number':387,'multiline':False]