['text':'  (C) Copyright Edward Diener 2011-2015','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]['text':'

  The succeeding comments in this file are in doxygen format.

','line_number':14,'multiline':True]['text':'* \file
','line_number':20,'multiline':True]['text':'* \def BOOST_VMD_ASSERT_IS_TYPE(sequence)

    \brief Asserts that the sequence is a VMD type.

    The macro checks that the sequence is a VMD type.
    If it is not a VMD type, it forces a compiler error.
    
    The macro normally checks for a VMD type only in 
    debug mode. However an end-user can force the macro 
    to check or not check by defining the macro 
    BOOST_VMD_ASSERT_DATA to 1 or 0 respectively.

    sequence = a possible VMD type.

  @code
  
    returns = Normally the macro returns nothing. 
    
              If the sequence is a VMD type, nothing is 
              output.
              
              For VC++, because there is no sure way of forcing  
              a compiler error from within a macro without producing
              output, if the sequence is not a VMD type the 
              macro forces a compiler error by outputting invalid C++.
              
              For all other compilers a compiler error is forced 
              without producing output if the sequence is not a 
              VMD type.
    
  @endcode
  
','line_number':23,'multiline':True]['text':'* \def BOOST_VMD_ASSERT_IS_TYPE_D(d,sequence)

    \brief Asserts that the sequence is a VMD type. Re-entrant version.

    The macro checks that the sequence is a VMD type.
    If it is not a VMD type, it forces a compiler error.
    
    The macro normally checks for a VMD type only in 
    debug mode. However an end-user can force the macro 
    to check or not check by defining the macro 
    BOOST_VMD_ASSERT_DATA to 1 or 0 respectively.

    d       = The next available BOOST_PP_WHILE iteration. <br/>
    sequence = a possible VMD type.

  @code
  
    returns = Normally the macro returns nothing. 
    
              If the sequence is a VMD type, nothing is 
              output.
              
              For VC++, because there is no sure way of forcing  
              a compiler error from within a macro without producing
              output, if the sequence is not a VMD type the 
              macro forces a compiler error by outputting invalid C++.
              
              For all other compilers a compiler error is forced 
              without producing output if the sequence is not a 
              VMD type.
    
  @endcode
  
','line_number':57,'multiline':True]['text':'','line_number':108,'multiline':True]['text':'','line_number':116,'multiline':True]['text':' !BOOST_VMD_ASSERT_DATA','line_number':118,'multiline':False]['text':' BOOST_PP_VARIADICS ','line_number':120,'multiline':True]['text':' BOOST_VMD_ASSERT_IS_TYPE_HPP ','line_number':121,'multiline':True]