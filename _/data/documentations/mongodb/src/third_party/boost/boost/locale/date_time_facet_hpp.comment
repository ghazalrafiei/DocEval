['text':'','line_number':1,'multiline':False]['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'/','line_number':22,'multiline':False]['text':'/ \brief Namespace that contains various types for manipulation with dates','line_number':23,'multiline':False]['text':'/','line_number':24,'multiline':False]['text':'/','line_number':26,'multiline':False]['text':'/ \brief This namespace holds a enum of various period types like era, year, month, etc..','line_number':27,'multiline':False]['text':'/','line_number':28,'multiline':False]['text':'/ \brief the type that defines a flag that holds a period identifier','line_number':30,'multiline':False]['text':'/< Special invalid value, should not be used directly','line_number':32,'multiline':False]['text':'/< Era i.e. AC, BC in Gregorian and Julian calendar, range [0,1]','line_number':33,'multiline':False]['text':'/< Year, it is calendar specific, for example 2011 in Gregorian calendar.','line_number':34,'multiline':False]['text':'/< Extended year for Gregorian/Julian calendars, where 1 BC == 0, 2 BC == -1.','line_number':35,'multiline':False]['text':'/< The month of year, calendar specific, in Gregorian [0..11]','line_number':36,'multiline':False]['text':'/< The day of month, calendar specific, in Gregorian [1..31]','line_number':37,'multiline':False]['text':'/< The number of day in year, starting from 1, in Gregorian  [1..366]','line_number':38,'multiline':False]['text':'/< Day of week, Sunday=1, Monday=2,..., Saturday=7.','line_number':39,'multiline':False]['text':'/< Note that updating this value respects local day of week, so for example,','line_number':40,'multiline':False]['text':'/< If first day of week is Monday and the current day is Tuesday then setting','line_number':41,'multiline':False]['text':'/< the value to Sunday (1) would forward the date by 5 days forward and not backward','line_number':42,'multiline':False]['text':'/< by two days as it could be expected if the numbers were taken as is.','line_number':43,'multiline':False]['text':'/< Original number of the day of the week in month. For example 1st Sunday, ','line_number':44,'multiline':False]['text':'/< 2nd Sunday, etc. in Gregorian [1..5]','line_number':45,'multiline':False]['text':'/< Local day of week, for example in France Monday is 1, in US Sunday is 1, [1..7]','line_number':46,'multiline':False]['text':'/< 24 clock hour [0..23]','line_number':47,'multiline':False]['text':'/< 12 clock hour [0..11]','line_number':48,'multiline':False]['text':'/< am or pm marker [0..1]','line_number':49,'multiline':False]['text':'/< minute [0..59]','line_number':50,'multiline':False]['text':'/< second [0..59]','line_number':51,'multiline':False]['text':'/< The week number in the year','line_number':52,'multiline':False]['text':'/< The week number within current month','line_number':53,'multiline':False]['text':'/< First day of week, constant, for example Sunday in US = 1, Monday in France = 2','line_number':54,'multiline':False]['text':' marks','line_number':57,'multiline':False]['text':'/','line_number':59,'multiline':False]['text':'/ \brief This class holds a type that represents certain period of time like','line_number':60,'multiline':False]['text':'/ year, hour, second and so on.','line_number':61,'multiline':False]['text':'/','line_number':62,'multiline':False]['text':'/ It can be created from either marks::period_mark type or by using shortcuts in period','line_number':63,'multiline':False]['text':'/ namespace - calling functions like period::year(), period::hour() and so on.','line_number':64,'multiline':False]['text':'/','line_number':65,'multiline':False]['text':'/ Basically it represents the same object as enum marks::period_mark but allows to','line_number':66,'multiline':False]['text':'/ provide save operator overloading that would not collide with casing of enum to','line_number':67,'multiline':False]['text':'/ numeric values.','line_number':68,'multiline':False]['text':'/','line_number':69,'multiline':False]['text':'/','line_number':72,'multiline':False]['text':'/ Create a period of specific type, default is invalid.','line_number':73,'multiline':False]['text':'/','line_number':74,'multiline':False]['text':'/','line_number':79,'multiline':False]['text':'/ Get the value of marks::period_mark it was created with.','line_number':80,'multiline':False]['text':'/ ','line_number':81,'multiline':False]['text':'/','line_number':87,'multiline':False]['text':'/ Check if two periods are the same','line_number':88,'multiline':False]['text':'/','line_number':89,'multiline':False]['text':'/','line_number':94,'multiline':False]['text':'/ Check if two periods are different','line_number':95,'multiline':False]['text':'/','line_number':96,'multiline':False]['text':' namespace period','line_number':105,'multiline':False]['text':'/','line_number':107,'multiline':False]['text':'/ Structure that define POSIX time, seconds and milliseconds','line_number':108,'multiline':False]['text':'/ since Jan 1, 1970, 00:00 not including leap seconds.','line_number':109,'multiline':False]['text':'/','line_number':110,'multiline':False]['text':'/< Seconds since epoch','line_number':112,'multiline':False]['text':'/< Nanoseconds resolution','line_number':113,'multiline':False]['text':'/','line_number':116,'multiline':False]['text':'/ This class defines generic calendar class, it is used by date_time and calendar','line_number':117,'multiline':False]['text':'/ objects internally. It is less useful for end users, but it is build for localization','line_number':118,'multiline':False]['text':'/ backend implementation','line_number':119,'multiline':False]['text':'/','line_number':120,'multiline':False]['text':'/','line_number':125,'multiline':False]['text':'/ Type that defines how to fetch the value','line_number':126,'multiline':False]['text':'/','line_number':127,'multiline':False]['text':'/< Absolute possible minimum for the value, for example for day is 1','line_number':129,'multiline':False]['text':'/< Actual minimal value for this period.','line_number':130,'multiline':False]['text':'/< Maximal minimum value that can be for this period','line_number':131,'multiline':False]['text':'/< Current value of this period','line_number':132,'multiline':False]['text':'/< The last maximal value for this period, For example for Gregorian calendar','line_number':133,'multiline':False]['text':'/< day it is 28','line_number':134,'multiline':False]['text':'/< Actual maximum, for it can be 28, 29, 30, 31 for day according to current month','line_number':135,'multiline':False]['text':'/< Maximal value, for Gregorian day it would be 31.','line_number':136,'multiline':False]['text':'/','line_number':139,'multiline':False]['text':'/ A way to update the value','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/< Change the value up or down effecting others for example 1990-12-31 + 1 day = 1991-01-01','line_number':143,'multiline':False]['text':'/< Change the value up or down not effecting others for example 1990-12-31 + 1 day = 1990-12-01','line_number':144,'multiline':False]['text':'/','line_number':147,'multiline':False]['text':'/ Information about calendar','line_number':148,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'/< Check if the calendar is Gregorian','line_number':151,'multiline':False]['text':'/< Check if the current time is in daylight time savings','line_number':152,'multiline':False]['text':'/','line_number':155,'multiline':False]['text':'/ Make a polymorphic copy of the calendar','line_number':156,'multiline':False]['text':'/','line_number':157,'multiline':False]['text':'/','line_number':160,'multiline':False]['text':'/ Set specific \a value for period \a p, note not all values are settable.','line_number':161,'multiline':False]['text':'/','line_number':162,'multiline':False]['text':'/ After call of set_value you may want to call normalize() function to make sure','line_number':163,'multiline':False]['text':'/ vall periods are updated, if you set sereral fields that are part of single','line_number':164,'multiline':False]['text':'/ date/time representation you should call set_value several times and then','line_number':165,'multiline':False]['text':'/ call normalize().','line_number':166,'multiline':False]['text':'/','line_number':167,'multiline':False]['text':'/ If normalize() is not called after set_value, the behavior is undefined','line_number':168,'multiline':False]['text':'/','line_number':169,'multiline':False]['text':'/','line_number':172,'multiline':False]['text':'/ Recalculate all periods after setting them, should be called after use of set_value() function.','line_number':173,'multiline':False]['text':'/','line_number':174,'multiline':False]['text':'/','line_number':177,'multiline':False]['text':'/ Get specific value for period \a p according to a value_type \a v','line_number':178,'multiline':False]['text':'/','line_number':179,'multiline':False]['text':'/','line_number':182,'multiline':False]['text':'/ Set current time point','line_number':183,'multiline':False]['text':'/','line_number':184,'multiline':False]['text':'/','line_number':186,'multiline':False]['text':'/ Get current time point','line_number':187,'multiline':False]['text':'/','line_number':188,'multiline':False]['text':'/','line_number':191,'multiline':False]['text':'/ Set option for calendar, for future use','line_number':192,'multiline':False]['text':'/','line_number':193,'multiline':False]['text':'/','line_number':195,'multiline':False]['text':'/ Get option for calendar, currently only check if it is Gregorian calendar','line_number':196,'multiline':False]['text':'/','line_number':197,'multiline':False]['text':'/','line_number':200,'multiline':False]['text':'/ Adjust period's \a p value by \a difference items using a update_type \a u.','line_number':201,'multiline':False]['text':'/ Note: not all values are adjustable','line_number':202,'multiline':False]['text':'/','line_number':203,'multiline':False]['text':'/','line_number':206,'multiline':False]['text':'/ Calculate the difference between this calendar  and \a other in \a p units','line_number':207,'multiline':False]['text':'/','line_number':208,'multiline':False]['text':'/','line_number':211,'multiline':False]['text':'/ Set time zone, empty - use system','line_number':212,'multiline':False]['text':'/','line_number':213,'multiline':False]['text':'/','line_number':215,'multiline':False]['text':'/ Get current time zone, empty - system one','line_number':216,'multiline':False]['text':'/','line_number':217,'multiline':False]['text':'/','line_number':220,'multiline':False]['text':'/ Check of two calendars have same rules','line_number':221,'multiline':False]['text':'/','line_number':222,'multiline':False]['text':'/','line_number':231,'multiline':False]['text':'/ \brief the facet that generates calendar for specific locale','line_number':232,'multiline':False]['text':'/','line_number':233,'multiline':False]['text':'/','line_number':236,'multiline':False]['text':'/ Basic constructor','line_number':237,'multiline':False]['text':'/','line_number':238,'multiline':False]['text':'/','line_number':242,'multiline':False]['text':'/ Create a new calendar that points to current point of time.','line_number':243,'multiline':False]['text':'/','line_number':244,'multiline':False]['text':'/','line_number':247,'multiline':False]['text':'/ Locale id (needed to work with std::locale)','line_number':248,'multiline':False]['text':'/','line_number':249,'multiline':False]['text':' locale','line_number':253,'multiline':False]['text':' boost','line_number':254,'multiline':False]['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':262,'multiline':False]