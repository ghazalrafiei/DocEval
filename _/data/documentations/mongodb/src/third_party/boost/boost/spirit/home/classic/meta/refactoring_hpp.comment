['text':'=============================================================================
    Copyright (c) 2002-2003 Hartmut Kaiser
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':19,'multiline':False]['text':'assignment operator could not be generated','line_number':26,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':'  refactor_unary_parser class','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'      This helper template allows to attach an unary operation to a newly','line_number':33,'multiline':False]['text':'      constructed parser, which combines the subject of the left operand of','line_number':34,'multiline':False]['text':'      the original given parser (BinaryT) with the right operand of the','line_number':35,'multiline':False]['text':'      original binary parser through the original binary operation and','line_number':36,'multiline':False]['text':'      rewraps the resulting parser with the original unary operator.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'      For instance given the parser:','line_number':39,'multiline':False]['text':'          *some_parser - another_parser','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'      will be refactored to:','line_number':42,'multiline':False]['text':'          *(some_parser - another_parser)','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':'      If the parser to refactor is not a unary parser, no refactoring is done','line_number':45,'multiline':False]['text':'      at all.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'      The original parser should be a binary_parser_category parser,','line_number':48,'multiline':False]['text':'      else the compilation will fail','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':51,'multiline':False]['text':'  the parser to refactor has to be at least a binary_parser_category','line_number':61,'multiline':False]['text':'  parser','line_number':62,'multiline':False]['text':'////////////////////////////////','line_number':88,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':'  refactor_action_parser class','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':'      This helper template allows to attach an action taken from the left','line_number':116,'multiline':False]['text':'      operand of the given binary parser to a newly constructed parser,','line_number':117,'multiline':False]['text':'      which combines the subject of the left operand of the original binary','line_number':118,'multiline':False]['text':'      parser with the right operand of the original binary parser by means of','line_number':119,'multiline':False]['text':'      the original binary operator parser.','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'      For instance the parser:','line_number':122,'multiline':False]['text':'          some_parser[some_attached_functor] - another_parser','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':'      will be refactored to:','line_number':125,'multiline':False]['text':'          (some_parser - another_parser)[some_attached_functor]','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'      If the left operand to refactor is not an action parser, no refactoring','line_number':128,'multiline':False]['text':'      is done at all.','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':'      The original parser should be a binary_parser_category parser,','line_number':131,'multiline':False]['text':'      else the compilation will fail','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':134,'multiline':False]['text':'  the parser to refactor has to be at least a binary_parser_category','line_number':144,'multiline':False]['text':'  parser','line_number':145,'multiline':False]['text':'////////////////////////////////','line_number':171,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':195,'multiline':False]['text':'','line_number':196,'multiline':False]['text':'  attach_action_parser class','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':'      This helper template allows to attach an action given separately','line_number':199,'multiline':False]['text':'      to all parsers, out of which the given parser is constructed and','line_number':200,'multiline':False]['text':'      reconstructs a new parser having the same structure.','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':'      For instance the parser:','line_number':203,'multiline':False]['text':'          (some_parser >> another_parser)[some_attached_functor]','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':'      will be refactored to:','line_number':206,'multiline':False]['text':'          some_parser[some_attached_functor]','line_number':207,'multiline':False]['text':'              >> another_parser[some_attached_functor]','line_number':208,'multiline':False]['text':'','line_number':209,'multiline':False]['text':'      The original parser should be a action_parser_category parser,','line_number':210,'multiline':False]['text':'      else the compilation will fail.','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':'      If the parser, to which the action is attached is not an binary parser,','line_number':213,'multiline':False]['text':'      no refactoring is done at all.','line_number':214,'multiline':False]['text':'','line_number':215,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':216,'multiline':False]['text':'  the parser to refactor has to be at least a action_parser_category','line_number':226,'multiline':False]['text':'  parser','line_number':227,'multiline':False]['text':'////////////////////////////////','line_number':253,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':281,'multiline':False]['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':284,'multiline':False]['text':' BOOST_SPIRIT_REFACTORING_HPP','line_number':286,'multiline':False]