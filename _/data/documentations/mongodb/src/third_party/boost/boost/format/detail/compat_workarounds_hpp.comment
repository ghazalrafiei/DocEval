['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':'  compat_workarounds : general framework for non-conformance workarounds','line_number':2,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':3,'multiline':False]['text':'  Copyright Samuel Krempp 2003. Use, modification, and distribution are','line_number':5,'multiline':False]['text':'  subject to the Boost Software License, Version 1.0. (See accompanying','line_number':6,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':' see http://www.boost.org/libs/format for library home page','line_number':9,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':11,'multiline':False]['text':'  this file defines  wrapper classes to hide non-conforming ','line_number':14,'multiline':False]['text':' std::char_traits<>  and std::allocator<> traits','line_number':15,'multiline':False]['text':'  and Includes : config_macros.hpp (defines config macros','line_number':16,'multiline':False]['text':'  and compiler-specific switches)','line_number':17,'multiline':False]['text':' Non-conformant Std-libs fail to supply conformant traits (std::char_traits,','line_number':19,'multiline':False]['text':'  std::allocator) and/or  the std::string doesnt support them.','line_number':20,'multiline':False]['text':' We don't want to have hundreds of #ifdef workarounds, so we define ','line_number':21,'multiline':False]['text':' replacement traits.','line_number':22,'multiline':False]['text':' But both char_traits and allocator traits are visible in the interface, ','line_number':23,'multiline':False]['text':' (inside the final string type),  thus we need to keep both ','line_number':24,'multiline':False]['text':' the replacement type (typedefed to 'compatible_type') for real use,','line_number':25,'multiline':False]['text':' and the original stdlib type (typedef to 'type_for_string') for interface','line_number':26,'multiline':False]['text':'  visibility. This is what Compat* classes do (as well as be transparent ','line_number':27,'multiline':False]['text':' when good allocator and char traits are present)','line_number':28,'multiline':False]['text':' gcc-2.95 char traits (non-conformantly named string_char_traits) ','line_number':36,'multiline':False]['text':' lack several functions so we extend them in a replacement class.','line_number':37,'multiline':False]['text':' std::allocator<Ch> in gcc-2.95 is ok, but basic_string only works ','line_number':41,'multiline':False]['text':' with plain 'std::alloc' still, alt_stringbuf requires a functionnal','line_number':42,'multiline':False]['text':' alloc template argument, so we need a replacement allocator','line_number':43,'multiline':False]['text':' N.S. io','line_number':46,'multiline':False]['text':' N.S. boost','line_number':47,'multiline':False]['text':' sets-up macros and load compiler-specific workarounds headers.','line_number':51,'multiline':False]['text':' workarounds-gcc-2.95 might have defined own streambuf','line_number':54,'multiline':False]['text':' workarounds-gcc-2.95 might already have included <iostream>','line_number':59,'multiline':False]['text':' **** CompatTraits general definitions : ----------------------------','line_number':68,'multiline':False]['text':' general case : be transparent','line_number':71,'multiline':False]['text':' **** CompatAlloc general definitions : -----------------------------','line_number':76,'multiline':False]['text':' general case : be transparent','line_number':79,'multiline':False]['text':'N.S. io','line_number':84,'multiline':False]['text':' N.S. boost','line_number':85,'multiline':False]['text':' include guard','line_number':86,'multiline':False]