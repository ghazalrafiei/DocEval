['text':' 
   Copyright (c) Marshall Clow 2010-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    For more information, see http://www.boost.org
','line_number':1,'multiline':True]['text':' for std::iterator_traits','line_number':14,'multiline':False]['text':' #define  BOOST_ALGORITHM_KNUTH_MORRIS_PRATT_DEBUG','line_number':28,'multiline':False]['text':' #define  NEW_KMP','line_number':32,'multiline':False]['text':'
    A templated version of the Knuth-Morris-Pratt searching algorithm.
    
    Requirements:
        * Random-access iterators
        * The two iterator types (I1 and I2) must "point to" the same underlying type.

    http://en.wikipedia.org/wiki/Knuth-Morris-Pratt_algorithm
    http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/kmpen.htm
','line_number':34,'multiline':True]['text':'/ \fn operator ( corpusIter corpus_first, corpusIter corpus_last, Pred p )','line_number':65,'multiline':False]['text':'/ \brief Searches the corpus for the pattern that was passed into the constructor','line_number':66,'multiline':False]['text':'/ ','line_number':67,'multiline':False]['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':68,'multiline':False]['text':'/ \param corpus_last  One past the end of the data to search','line_number':69,'multiline':False]['text':'/ \param p            A predicate used for the search comparisons.','line_number':70,'multiline':False]['text':'/','line_number':71,'multiline':False]['text':' if nothing to search, we didn't find it!','line_number':79,'multiline':False]['text':' empty pattern matches at start','line_number':80,'multiline':False]['text':'  If the pattern is larger than the corpus, we can't find it!','line_number':83,'multiline':False]['text':'/ \cond DOXYGEN_HIDE','line_number':97,'multiline':False]['text':'/ \fn operator ( corpusIter corpus_first, corpusIter corpus_last, Pred p )','line_number':102,'multiline':False]['text':'/ \brief Searches the corpus for the pattern that was passed into the constructor','line_number':103,'multiline':False]['text':'/ ','line_number':104,'multiline':False]['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':105,'multiline':False]['text':'/ \param corpus_last  One past the end of the data to search','line_number':106,'multiline':False]['text':'/ \param p            A predicate used for the search comparisons.','line_number':107,'multiline':False]['text':'/','line_number':108,'multiline':False]['text':' position in the corpus that we're matching','line_number':113,'multiline':False]['text':'<--- Shifting the pattern on mismatch','line_number':119,'multiline':False]['text':'<--- corpus is always increased by 1','line_number':122,'multiline':False]['text':'  At this point, we know:','line_number':129,'multiline':False]['text':'          k_pattern_length <= k_corpus_length','line_number':130,'multiline':False]['text':'          for all elements of skip, it holds -1 .. k_pattern_length','line_number':131,'multiline':False]['text':'      ','line_number':132,'multiline':False]['text':'          In the loop, we have the following invariants','line_number':133,'multiline':False]['text':'              idx is in the range 0 .. k_pattern_length','line_number':134,'multiline':False]['text':'              match_start is in the range 0 .. k_corpus_length - k_pattern_length + 1','line_number':135,'multiline':False]['text':' position in the pattern we're comparing','line_number':138,'multiline':False]['text':'  Figure out where to start searching again','line_number':145,'multiline':False]['text':'   assert ( idx - skip_ [ idx ] > 0 ); // we're always moving forward','line_number':146,'multiline':False]['text':'   assert ( idx >= 0 && idx < k_pattern_length );','line_number':149,'multiline':False]['text':'  We didn't find anything','line_number':153,'multiline':False]['text':' \endcond','line_number':193,'multiline':False]['text':'  Two ranges as inputs gives us four possibilities; with 2,3,3,4 parameters
    Use a bit of TMP to disambiguate the 3-argument templates ','line_number':197,'multiline':True]['text':'/ \fn knuth_morris_pratt_search ( corpusIter corpus_first, corpusIter corpus_last, ','line_number':200,'multiline':False]['text':'/       patIter pat_first, patIter pat_last )','line_number':201,'multiline':False]['text':'/ \brief Searches the corpus for the pattern.','line_number':202,'multiline':False]['text':'/ ','line_number':203,'multiline':False]['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':204,'multiline':False]['text':'/ \param corpus_last  One past the end of the data to search','line_number':205,'multiline':False]['text':'/ \param pat_first    The start of the pattern to search for (Random Access Iterator)','line_number':206,'multiline':False]['text':'/ \param pat_last     One past the end of the data to search for','line_number':207,'multiline':False]['text':'/','line_number':208,'multiline':False]['text':'  Creator functions -- take a pattern range, return an object','line_number':248,'multiline':False]['text':' BOOST_ALGORITHM_KNUTH_MORRIS_PRATT_SEARCH_HPP','line_number':264,'multiline':False]