['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'work around compilers without limits','line_number':14,'multiline':False]['text':' conditional expression is constant','line_number':23,'multiline':False]['text':'! Adapter to create integer types with +-infinity, and not a value','line_number':31,'multiline':False]['text':'! This class is used internally in counted date/time representations.
 *  It adds the floating point like features of infinities and
 *  not a number. It also provides mathmatical operations with
 *  consideration to special values following these rules:
 *@code
 *  +infinity  -  infinity  == Not A Number (NAN)
 *   infinity  *  non-zero  == infinity
 *   infinity  *  zero      == NAN
 *  +infinity  * -integer   == -infinity
 *   infinity  /  infinity  == NAN
 *   infinity  *  infinity  == infinity 
 *@endcode 
 ','line_number':32,'multiline':True]['text':'! Returns either special value type or is_not_special','line_number':104,'multiline':False]['text':'-3 leaves room for representations of infinity and not a date','line_number':113,'multiline':False]['text':' quiets compiler warnings','line_number':175,'multiline':False]['text':'! Returns either special value type or is_not_special','line_number':193,'multiline':False]['text':'creates nasty ambiguities','line_number':198,'multiline':False]['text':'   operator int_type() const','line_number':199,'multiline':False]['text':'   {','line_number':200,'multiline':False]['text':'     return value_;','line_number':201,'multiline':False]['text':'   }','line_number':202,'multiline':False]['text':'! Operator allows for adding dissimilar int_adapter types.
   * The return type will match that of the the calling object's type ','line_number':204,'multiline':True]['text':'! Operator allows for subtracting dissimilar int_adapter types.
   * The return type will match that of the the calling object's type ','line_number':254,'multiline':True]['text':' should templatize this to be consistant with op +-','line_number':304,'multiline':False]['text':'! Provided for cases when automatic conversion from 
   * 'int' to 'int_adapter' causes incorrect results. ','line_number':315,'multiline':True]['text':' should templatize this to be consistant with op +-','line_number':327,'multiline':False]['text':' let divide by zero blow itself up','line_number':341,'multiline':False]['text':'NOLINT','line_number':342,'multiline':False]['text':'! Provided for cases when automatic conversion from 
   * 'int' to 'int_adapter' causes incorrect results. ','line_number':348,'multiline':True]['text':' let divide by zero blow itself up like int','line_number':357,'multiline':False]['text':'NOLINT','line_number':358,'multiline':False]['text':' should templatize this to be consistant with op +-','line_number':361,'multiline':False]['text':' let divide by zero blow itself up','line_number':375,'multiline':False]['text':'NOLINT','line_number':376,'multiline':False]['text':'! Provided for cases when automatic conversion from 
   * 'int' to 'int_adapter' causes incorrect results. ','line_number':382,'multiline':True]['text':' let divide by zero blow itself up','line_number':391,'multiline':False]['text':'NOLINT','line_number':392,'multiline':False]['text':'! returns -1, 0, 1, or 2 if 'this' is <, ==, >, or 'nan comparison' rhs','line_number':398,'multiline':False]['text':' equal','line_number':406,'multiline':False]['text':' nan','line_number':409,'multiline':False]['text':' less than','line_number':415,'multiline':False]['text':' greater than','line_number':419,'multiline':False]['text':' implied-> if(value_ == rhs.value_) ','line_number':424,'multiline':False]['text':' When multiplying and dividing with at least 1 special value
   * very simmilar rules apply. In those cases where the rules
   * are different, they are handled in the respective operator 
   * function. ','line_number':428,'multiline':True]['text':'! Assumes at least 'this' or 'rhs' is a special value','line_number':432,'multiline':False]['text':'implied -> if(this->value_ == 0 || rhs.value_ == 0)','line_number':446,'multiline':False]['text':' Overloaded function necessary because of special
   * situation where int_adapter is instantiated with 
   * 'unsigned' and func is called with negative int.
   * It would produce incorrect results since 'unsigned'
   * wraps around when initialized with a negative value ','line_number':450,'multiline':True]['text':'! Assumes 'this' is a special value','line_number':455,'multiline':False]['text':'implied -> if(this->value_ == 0 || rhs.value_ == 0)','line_number':469,'multiline':False]['text':'! Expected output is either a numeric representation 
   * or a special values representation.<BR> 
   * Ex. "12", "+infinity", "not-a-number", etc. ','line_number':476,'multiline':True]['text':'template<class charT = char, class traits = std::traits<charT>, typename int_type>','line_number':479,'multiline':False]['text':' switch copied from date_names_put.hpp','line_number':486,'multiline':False]['text':'namespace date_time','line_number':510,'multiline':False]