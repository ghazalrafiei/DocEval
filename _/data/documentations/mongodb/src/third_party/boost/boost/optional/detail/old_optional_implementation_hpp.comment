['text':' Copyright (C) 2003, 2008 Fernando Luis Cacciola Carballal.','line_number':1,'multiline':False]['text':' Copyright (C) 2014-2016 Andrzej Krzemienski.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Use, modification, and distribution is subject to the Boost Software','line_number':4,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/optional for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' You are welcome to contact the maintainer at:','line_number':10,'multiline':False]['text':'  akrzemi1@gmail.com','line_number':11,'multiline':False]['text':' GCC 4.4 has support for an early draft of rvalue references. The conforming version below','line_number':35,'multiline':False]['text':' causes warnings about returning references to a temporary.','line_number':36,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':117,'multiline':False]['text':' No-throw','line_number':118,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':123,'multiline':False]['text':' No-throw','line_number':124,'multiline':False]['text':' Creates an optional<T> initialized with 'val'.','line_number':129,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':130,'multiline':False]['text':' move-construct an optional<T> initialized from an rvalue-ref to 'val'.','line_number':139,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':140,'multiline':False]['text':' Creates an optional<T> initialized with 'val' IFF cond is true, otherwise creates an uninitialized optional<T>.','line_number':149,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':150,'multiline':False]['text':' Creates a deep copy of another optional<T>','line_number':159,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':160,'multiline':False]['text':' Creates a deep move of another optional<T>','line_number':170,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':171,'multiline':False]['text':' This is used for both converting and in-place constructions.','line_number':192,'multiline':False]['text':' Derived classes use the 'tag' to select the appropriate','line_number':193,'multiline':False]['text':' implementation (the correct 'construct()' overload)','line_number':194,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':206,'multiline':False]['text':' Assigns from another optional<T> (deep-copies the rhs value)','line_number':209,'multiline':False]['text':' Assigns from another optional<T> (deep-moves the rhs value)','line_number':226,'multiline':False]['text':' Assigns from another _convertible_ optional<U> (deep-copies the rhs value)','line_number':243,'multiline':False]['text':' move-assigns from another _convertible_ optional<U> (deep-moves from the rhs value)','line_number':270,'multiline':False]['text':' Assigns from a T (deep-copies the rhs value)','line_number':289,'multiline':False]['text':' Assigns from a T (deep-moves the rhs value)','line_number':298,'multiline':False]['text':' Assigns from "none", destroying the current value, if any, leaving this UNINITIALIZED','line_number':307,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':308,'multiline':False]['text':' Destroys the current value, if any, leaving this UNINITIALIZED','line_number':335,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':336,'multiline':False]['text':' **DEPPRECATED** Replaces the current value -if any- with 'val'','line_number':339,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise,','line_number':342,'multiline':False]['text':' returns NULL.','line_number':343,'multiline':False]['text':' No-throw','line_number':344,'multiline':False]['text':' Constructs in-place','line_number':368,'multiline':False]['text':' upon exception *this is always uninitialized','line_number':369,'multiline':False]['text':' Constructs in-place using the given factory','line_number':420,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':429,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':445,'multiline':False]['text':' Constructs in-place using the given factory','line_number':454,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':463,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':479,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':491,'multiline':False]['text':' of a one-argument T constructor.','line_number':492,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':493,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':494,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':502,'multiline':False]['text':' of a T's assignment operator.','line_number':503,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':504,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':505,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':512,'multiline':False]['text':' of a one-argument T constructor.','line_number':513,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':514,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':515,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':523,'multiline':False]['text':' of a T's assignment operator.','line_number':524,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':525,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':526,'multiline':False]['text':' BCB5.64 (and probably lower versions) workaround.','line_number':536,'multiline':False]['text':'   The in-place factories are supported by means of catch-all constructors','line_number':537,'multiline':False]['text':'   and assignment operators (the functions are parameterized in terms of','line_number':538,'multiline':False]['text':'   an arbitrary 'Expr' type)','line_number':539,'multiline':False]['text':'   This compiler incorrectly resolves the overload set and sinks optional<T> and optional<U>','line_number':540,'multiline':False]['text':'   to the 'Expr'-taking functions even though explicit overloads are present for them.','line_number':541,'multiline':False]['text':'   Thus, the following overload is needed to properly handle the case when the 'lhs'','line_number':542,'multiline':False]['text':'   is another optional.','line_number':543,'multiline':False]['text':'','line_number':544,'multiline':False]['text':' For VC<=70 compilers this workaround dosen't work becasue the comnpiler issues and error','line_number':545,'multiline':False]['text':' instead of choosing the wrong overload','line_number':546,'multiline':False]['text':'','line_number':547,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not optional_base<..>)','line_number':549,'multiline':False]['text':' An exception can be thrown here.','line_number':555,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':556,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not optional_base<..>)','line_number':562,'multiline':False]['text':' An exception can be thrown here.','line_number':568,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':569,'multiline':False]['text':' defined BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION','line_number':575,'multiline':False]['text':' internal_type can be either T or reference_content<T>','line_number':598,'multiline':False]['text':' This workaround is supposed to silence GCC warnings about broken strict aliasing rules','line_number':600,'multiline':False]['text':' reference_content<T> lacks an implicit conversion to T&, so the following is needed to obtain a proper reference.','line_number':616,'multiline':False]['text':' If T is of reference type, trying to get a pointer to the held value must result in a compile-time error.','line_number':630,'multiline':False]['text':' Decent compilers should disallow conversions from reference_content<T>* to T*, but just in case,','line_number':631,'multiline':False]['text':' the following olverloads are used to filter out the case and guarantee an error in case of T being a reference.','line_number':632,'multiline':False]['text':' namespace optional_detail','line_number':642,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':664,'multiline':False]['text':' No-throw','line_number':665,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':668,'multiline':False]['text':' No-throw','line_number':669,'multiline':False]['text':' Creates an optional<T> initialized with 'val'.','line_number':672,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':673,'multiline':False]['text':' Creates an optional<T> initialized with 'move(val)'.','line_number':677,'multiline':False]['text':' Can throw if T::T(T &&) does','line_number':678,'multiline':False]['text':' Creates an optional<T> initialized with 'val' IFF cond is true, otherwise creates an uninitialized optional.','line_number':683,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':684,'multiline':False]['text':' NOTE: MSVC needs templated versions first','line_number':687,'multiline':False]['text':' Creates a deep copy of another convertible optional<U>','line_number':689,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':690,'multiline':False]['text':' Can throw if T::T(U const&) does','line_number':691,'multiline':False]['text':' Creates a deep move of another convertible optional<U>','line_number':702,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':703,'multiline':False]['text':' Can throw if T::T(U&&) does','line_number':704,'multiline':False]['text':' Creates an optional<T> with an expression which can be either','line_number':716,'multiline':False]['text':'  (a) An instance of InPlaceFactory (i.e. in_place(a,b,...,n);','line_number':717,'multiline':False]['text':'  (b) An instance of TypedInPlaceFactory ( i.e. in_place<T>(a,b,...,n);','line_number':718,'multiline':False]['text':'  (c) Any expression implicitly convertible to the single type','line_number':719,'multiline':False]['text':'      of a one-argument T's constructor.','line_number':720,'multiline':False]['text':'  (d*) Weak compilers (BCB) might also resolved Expr as optional<T> and optional<U>','line_number':721,'multiline':False]['text':'       even though explicit overloads are present for these.','line_number':722,'multiline':False]['text':' Depending on the above some T ctor is called.','line_number':723,'multiline':False]['text':' Can throw if the resolved T ctor throws.','line_number':724,'multiline':False]['text':' !defined BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':740,'multiline':False]['text':' !defined BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT','line_number':741,'multiline':False]['text':' Creates a deep copy of another optional<T>','line_number':743,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':744,'multiline':False]['text':' Creates a deep move of another optional<T>','line_number':748,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':749,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':756,'multiline':False]['text':' Assigns from an expression. See corresponding constructor.','line_number':760,'multiline':False]['text':' Basic Guarantee: If the resolved T ctor throws, this is left UNINITIALIZED','line_number':761,'multiline':False]['text':' !defined  BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':784,'multiline':False]['text':' !defined(BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT) && !defined(BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION)','line_number':785,'multiline':False]['text':' Copy-assigns from another convertible optional<U> (converts && deep-copies the rhs value)','line_number':787,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':788,'multiline':False]['text':' Basic Guarantee: If T::T( U const& ) throws, this is left UNINITIALIZED','line_number':789,'multiline':False]['text':' Move-assigns from another convertible optional<U> (converts && deep-moves the rhs value)','line_number':798,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':799,'multiline':False]['text':' Basic Guarantee: If T::T( U && ) throws, this is left UNINITIALIZED','line_number':800,'multiline':False]['text':' Assigns from another optional<T> (deep-copies the rhs value)','line_number':809,'multiline':False]['text':' Basic Guarantee: If T::T( T const& ) throws, this is left UNINITIALIZED','line_number':810,'multiline':False]['text':'  (NOTE: On BCB, this operator is not actually called and left is left UNMODIFIED in case of a throw)','line_number':811,'multiline':False]['text':' Assigns from another optional<T> (deep-moves the rhs value)','line_number':819,'multiline':False]['text':' Assigns from a T (deep-copies the rhs value)','line_number':828,'multiline':False]['text':' Basic Guarantee: If T::( T const& ) throws, this is left UNINITIALIZED','line_number':829,'multiline':False]['text':' Assigns from a T (deep-moves the rhs value)','line_number':837,'multiline':False]['text':' Assigns from a "none"','line_number':846,'multiline':False]['text':' Which destroys the current value, if any, leaving this UNINITIALIZED','line_number':847,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':848,'multiline':False]['text':' Constructs in-place','line_number':856,'multiline':False]['text':' upon exception *this is always uninitialized','line_number':857,'multiline':False]['text':' allow for Koenig lookup','line_number':896,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise,','line_number':901,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':902,'multiline':False]['text':' No-throw','line_number':903,'multiline':False]['text':' Returns a copy of the value if this is initialized, 'v' otherwise','line_number':907,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise,','line_number':911,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':912,'multiline':False]['text':' No-throw','line_number':913,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise,','line_number':917,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':918,'multiline':False]['text':' No-throw','line_number':919,'multiline':False]['text':' !defined BOOST_NO_CXX11_REF_QUALIFIERS','line_number':927,'multiline':False]['text':' namespace boost','line_number':1055,'multiline':False]['text':' header guard','line_number':1058,'multiline':False]