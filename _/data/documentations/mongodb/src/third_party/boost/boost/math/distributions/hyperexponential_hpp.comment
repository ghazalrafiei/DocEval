['text':'  Copyright 2014 Marco Guazzone (marco.guazzone@gmail.com)','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This module implements the Hyper-Exponential distribution.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' References:','line_number':9,'multiline':False]['text':' - "Queueing Theory in Manufacturing Systems Analysis and Design" by H.T. Papadopolous, C. Heavey and J. Browne (Chapman & Hall/CRC, 1993)','line_number':10,'multiline':False]['text':' - http://reference.wolfram.com/language/ref/HyperexponentialDistribution.html','line_number':11,'multiline':False]['text':' - http://en.wikipedia.org/wiki/Hyperexponential_distribution','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' conditional expression is constant','line_number':39,'multiline':False]['text':' '==' : signed/unsigned mismatch in test_tools','line_number':40,'multiline':False]['text':' _MSC_VER','line_number':41,'multiline':False]['text':' Namespace detail','line_number':50,'multiline':False]['text':'<unnamed>','line_number':57,'multiline':True]['text':' Our error handlers will get this later','line_number':63,'multiline':False]['text':' avoids round off errors, ensures the probs really do sum to 1.','line_number':74,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' We try to keep phase probabilities correctly normalized in the distribution constructors,','line_number':99,'multiline':False]['text':' however in practice we have to allow for a very slight divergence from a sum of exactly 1:','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Don't have a closed form so try to numerically solve the inverse CDF...','line_number':175,'multiline':False]['text':' A possible (but inaccurate) approximation is given below, where the','line_number':198,'multiline':False]['text':' quantile is given by the weighted sum of exponential quantiles:','line_number':199,'multiline':False]['text':' Fast return in case the Hyper-Exponential is essentially an Exponential','line_number':220,'multiline':False]['text':' Namespace <unnamed>::hyperexp_detail','line_number':238,'multiline':False]['text':' Four arg constructor: no ambiguity here, the arguments must be two pairs of iterators:','line_number':260,'multiline':False]['text':' std::iterator_traits<T>::difference_type returns void for invalid types','line_number':284,'multiline':False]['text':' Two arg constructor from 2 ranges, we SFINAE this out of existence if','line_number':288,'multiline':False]['text':' either argument type is incrementable as in that case the type is','line_number':289,'multiline':False]['text':' probably an iterator:','line_number':290,'multiline':False]['text':' Two arg constructor for a pair of iterators: we SFINAE this out of','line_number':309,'multiline':False]['text':' existence if neither argument types are incrementable.','line_number':310,'multiline':False]['text':' Note that we allow different argument types here to allow for','line_number':311,'multiline':False]['text':' construction from an array plus a pointer into that array.','line_number':312,'multiline':False]['text':' will be normalized below','line_number':318,'multiline':False]['text':' Initializer list constructor: allows for construction from array literals:','line_number':331,'multiline':False]['text':' Single argument constructor: argument must be a range.','line_number':360,'multiline':False]['text':' will be normalized below','line_number':363,'multiline':False]['text':' class hyperexponential_distribution','line_number':394,'multiline':False]['text':' Convenient type synonym for double.','line_number':397,'multiline':False]['text':' Range of permissible values for random variable x','line_number':401,'multiline':False]['text':' 0 to +inf.','line_number':407,'multiline':False]['text':' 0 to +<max value>','line_number':410,'multiline':False]['text':' Range of supported values for random variable x.','line_number':413,'multiline':False]['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':414,'multiline':False]['text':' <min value> to +<max value>.','line_number':418,'multiline':False]['text':'result += probs[i]*rates[i]*exp(-rates[i]*x);','line_number':441,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i}','line_number':562,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i^2}','line_number':563,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i^3}','line_number':564,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i}','line_number':592,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i^2}','line_number':593,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i^3}','line_number':594,'multiline':False]['text':' \sum_{i=1}^n \frac{p_i}{\lambda_i^4}','line_number':595,'multiline':False]['text':'dist','line_number':625,'multiline':True]['text':' namespace boost::math','line_number':630,'multiline':False]['text':' This include must be at the end, *after* the accessors','line_number':635,'multiline':False]['text':' for this distribution have been defined, in order to','line_number':636,'multiline':False]['text':' keep compilers that support two-phase lookup happy.','line_number':637,'multiline':False]['text':' BOOST_MATH_DISTRIBUTIONS_HYPEREXPONENTIAL','line_number':641,'multiline':False]