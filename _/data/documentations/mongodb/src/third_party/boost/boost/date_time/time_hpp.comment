['text':' Copyright (c) 2002,2003,2005,2020 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! @file time.hpp
  This file contains the interface for the time associated classes.
','line_number':13,'multiline':True]['text':'! Representation of a precise moment in time, including the date.','line_number':24,'multiline':False]['text':'! 
    This class is a skeleton for the interface of a temporal type
    with a resolution that is higher than a day.  It is intended that 
    this class be the base class and that the actual time 
    class be derived using the BN pattern.  In this way, the derived 
    class can make decisions such as 'should there be a default constructor' 
    and what should it set its value to, should there be optional constructors
    say allowing only an time_durations that generate a time from a clock,etc.
    So, in fact multiple time types can be created for a time_system with
    different construction policies, and all of them can perform basic
    operations by only writing a copy constructor.  Finally, compiler 
    errors are also shorter. 
    
    The real behavior of the time class is provided by the time_system
    template parameter.  This class must provide all the logic
    for addition, subtraction, as well as define all the interface
    types.
    
  ','line_number':25,'multiline':True]['text':' A tag for type categorization. Can be used to detect Boost.DateTime time points in generic code.','line_number':52,'multiline':False]['text':'typedef typename time_system::hms_type hms_type;','line_number':59,'multiline':False]['text':'! Optional bool parameter will return time zone as an offset 
     * (ie "+07:00"). Empty string is returned for classes that do 
     * not use a time_zone ','line_number':85,'multiline':True]['text':'as_offset','line_number':88,'multiline':True]['text':'! Optional bool parameter will return time zone as an offset 
     * (ie "+07:00"). Empty string is returned for classes that do 
     * not use a time_zone ','line_number':92,'multiline':True]['text':'as_offset','line_number':95,'multiline':True]['text':'! An empty string is returned for classes that do not use a time_zone','line_number':99,'multiline':False]['text':'! check to see if date is not a value','line_number':105,'multiline':False]['text':'! check to see if date is one of the infinity values','line_number':111,'multiline':False]['text':'! check to see if date is greater than all possible dates','line_number':117,'multiline':False]['text':'! check to see if date is greater than all possible dates','line_number':123,'multiline':False]['text':'! check to see if time is a special value','line_number':129,'multiline':False]['text':'!Equality operator -- others generated by boost::equality_comparable','line_number':135,'multiline':False]['text':'!Equality operator -- others generated by boost::less_than_comparable','line_number':141,'multiline':False]['text':'! difference between two times','line_number':147,'multiline':False]['text':'! add date durations','line_number':153,'multiline':False]['text':'! subtract date durations','line_number':165,'multiline':False]['text':'! add time durations','line_number':177,'multiline':False]['text':'! subtract time durations','line_number':189,'multiline':False]['text':'namespace date_time::boost','line_number':210,'multiline':False]