['text':' boost random/inversive_congruential.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]['text':' Eichenauer and Lehn 1986','line_number':35,'multiline':False]['text':'*
 * Instantiations of class template @c inversive_congruential_engine model a
 * \pseudo_random_number_generator. It uses the inversive congruential
 * algorithm (ICG) described in
 *
 *  @blockquote
 *  "Inversive pseudorandom number generators: concepts, results and links",
 *  Peter Hellekalek, In: "Proceedings of the 1995 Winter Simulation
 *  Conference", C. Alexopoulos, K. Kang, W.R. Lilegdon, and D. Goldsman
 *  (editors), 1995, pp. 255-262. ftp://random.mat.sbg.ac.at/pub/data/wsc95.ps
 *  @endblockquote
 *
 * The output sequence is defined by x(n+1) = (a*inv(x(n)) - b) (mod p),
 * where x(0), a, b, and the prime number p are parameters of the generator.
 * The expression inv(k) denotes the multiplicative inverse of k in the
 * field of integer numbers modulo p, with inv(0) := 0.
 *
 * The template parameter IntType shall denote a signed integral type large
 * enough to hold p; a, b, and p are the parameters of the generators. The
 * template parameter val is the validation value checked by validation.
 *
 * @xmlnote
 * The implementation currently uses the Euclidian Algorithm to compute
 * the multiplicative inverse. Therefore, the inversive generators are about
 * 10-20 times slower than the others (see section"performance"). However,
 * the paper talks of only 3x slowdown, so the Euclidian Algorithm is probably
 * not optimal for calculating the multiplicative inverse.
 * @endxmlnote
 ','line_number':36,'multiline':True]['text':'*
     * Constructs an @c inversive_congruential_engine, seeding it with
     * the default seed.
     ','line_number':80,'multiline':True]['text':'*
     * Constructs an @c inversive_congruential_engine, seeding it with @c x0.
     ','line_number':86,'multiline':True]['text':'*
     * Constructs an @c inversive_congruential_engine, seeding it with values
     * produced by a call to @c seq.generate().
     ','line_number':93,'multiline':True]['text':'*
     * Constructs an @c inversive_congruential_engine, seeds it
     * with values taken from the itrator range [first, last),
     * and adjusts first to point to the element after the last one
     * used.  If there are not enough elements, throws @c std::invalid_argument.
     *
     * first and last must be input iterators.
     ','line_number':101,'multiline':True]['text':'*
     * Calls seed(default_seed)
     ','line_number':112,'multiline':True]['text':'*
     * If c mod m is zero and x0 mod m is zero, changes the current value of
     * the generator to 1. Otherwise, changes it to x0 mod m. If c is zero,
     * distinct seeds in the range [1,m) will leave the generator in distinct
     * states. If c is not zero, the range is [0,m).
     ','line_number':117,'multiline':True]['text':' wrap _x if it doesn't fit in the destination','line_number':125,'multiline':False]['text':' handle negative seeds','line_number':131,'multiline':False]['text':' adjust to the correct range','line_number':135,'multiline':False]['text':'*
     * Seeds an @c inversive_congruential_engine using values from a SeedSeq.
     ','line_number':143,'multiline':True]['text':'*
     * seeds an @c inversive_congruential_engine with values taken
     * from the itrator range [first, last) and adjusts @c first to
     * point to the element after the last one used.  If there are
     * not enough elements, throws @c std::invalid_argument.
     *
     * @c first and @c last must be input iterators.
     ','line_number':149,'multiline':True]['text':'* Returns the next output of the generator. ','line_number':160,'multiline':True]['text':'* Fills a range with random values ','line_number':168,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':173,'multiline':True]['text':'*
     * Writes the textual representation of the generator to a @c std::ostream.
     ','line_number':181,'multiline':True]['text':'*
     * Reads the textual representation of the generator from a @c std::istream.
     ','line_number':190,'multiline':True]['text':'*
     * Returns true if the two generators will produce identical
     * sequences of outputs.
     ','line_number':199,'multiline':True]['text':'*
     * Returns true if the two generators will produce different
     * sequences of outputs.
     ','line_number':206,'multiline':True]['text':'  A definition is required even for integral static constants','line_number':217,'multiline':False]['text':'/ \cond show_deprecated','line_number':230,'multiline':False]['text':' provided for backwards compatibility','line_number':232,'multiline':False]['text':'/ \endcond','line_number':243,'multiline':False]['text':'*
 * The specialization hellekalek1995 was suggested in
 *
 *  @blockquote
 *  "Inversive pseudorandom number generators: concepts, results and links",
 *  Peter Hellekalek, In: "Proceedings of the 1995 Winter Simulation
 *  Conference", C. Alexopoulos, K. Kang, W.R. Lilegdon, and D. Goldsman
 *  (editors), 1995, pp. 255-262. ftp://random.mat.sbg.ac.at/pub/data/wsc95.ps
 *  @endblockquote
 ','line_number':245,'multiline':True]['text':' namespace random','line_number':258,'multiline':False]['text':' namespace boost','line_number':262,'multiline':False]['text':' BOOST_RANDOM_INVERSIVE_CONGRUENTIAL_HPP','line_number':266,'multiline':False]