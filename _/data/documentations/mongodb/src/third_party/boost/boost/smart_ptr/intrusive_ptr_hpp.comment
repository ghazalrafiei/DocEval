['text':'','line_number':4,'multiline':False]['text':'  intrusive_ptr.hpp','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Copyright (c) 2001, 2002 Peter Dimov','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' for std::less','line_number':24,'multiline':False]['text':' for std::basic_ostream','line_number':28,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'  intrusive_ptr','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'  A smart pointer that uses intrusive reference counting.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'  Relies on unqualified calls to','line_number':43,'multiline':False]['text':'  ','line_number':44,'multiline':False]['text':'      void intrusive_ptr_add_ref(T * p);','line_number':45,'multiline':False]['text':'      void intrusive_ptr_release(T * p);','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'          (p != 0)','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'  The object is responsible for destroying itself.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Move support','line_number':111,'multiline':False]['text':' implicit conversion to "bool"','line_number':203,'multiline':False]['text':' Resolve the ambiguity between our op!= and the one in rel_ops','line_number':250,'multiline':False]['text':' mem_fn support','line_number':293,'multiline':False]['text':' pointer casts','line_number':300,'multiline':False]['text':' defined( BOOST_NO_CXX11_RVALUE_REFERENCES )','line_number':340,'multiline':False]['text':' operator<<','line_number':342,'multiline':False]['text':' in STLport's no-iostreams mode no iostream symbols can be used','line_number':356,'multiline':False]['text':' MSVC6 has problems finding std::basic_ostream through the using declaration in namespace _STL','line_number':360,'multiline':False]['text':' _STLP_NO_IOSTREAMS','line_number':371,'multiline':False]['text':' __GNUC__ < 3','line_number':373,'multiline':False]['text':' !defined(BOOST_NO_IOSTREAM)','line_number':375,'multiline':False]['text':' hash_value','line_number':377,'multiline':False]['text':' namespace boost','line_number':386,'multiline':False]['text':' std::hash','line_number':388,'multiline':False]['text':' namespace std','line_number':403,'multiline':False]['text':' #if !defined(BOOST_NO_CXX11_HDR_FUNCTIONAL)','line_number':405,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_INTRUSIVE_PTR_HPP_INCLUDED','line_number':407,'multiline':False]