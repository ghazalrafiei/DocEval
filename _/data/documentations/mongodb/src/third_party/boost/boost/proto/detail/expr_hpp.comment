['text':'/ INTERNAL ONLY','line_number':11,'multiline':False]['text':'/','line_number':12,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':16,'multiline':True]['text':'/ INTERNAL ONLY','line_number':18,'multiline':False]['text':'/','line_number':19,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':22,'multiline':True]['text':' Generate variadic versions of expr','line_number':24,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]['text':'/ \file expr_variadic.hpp','line_number':30,'multiline':False]['text':'/ Contains definition of expr\<\> class template.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':33,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':34,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':35,'multiline':False]['text':' The expr<> specializations are actually defined here.','line_number':41,'multiline':False]['text':' Generate non-variadic versions of expr','line_number':52,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':57,'multiline':False]['text':'/ \file expr.hpp','line_number':58,'multiline':False]['text':'/ Contains definition of expr\<\> class template.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':61,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':62,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':63,'multiline':False]['text':' The expr<> specializations are actually defined here.','line_number':67,'multiline':False]['text':'/ \brief Representation of a node in an expression tree.','line_number':87,'multiline':False]['text':'/','line_number':88,'multiline':False]['text':'/ \c proto::expr\<\> is a node in an expression template tree. It','line_number':89,'multiline':False]['text':'/ is a container for its child sub-trees. It also serves as','line_number':90,'multiline':False]['text':'/ the terminal nodes of the tree.','line_number':91,'multiline':False]['text':'/','line_number':92,'multiline':False]['text':'/ \c Tag is type that represents the operation encoded by','line_number':93,'multiline':False]['text':'/             this expression. It is typically one of the structs','line_number':94,'multiline':False]['text':'/             in the \c boost::proto::tag namespace, but it doesn't','line_number':95,'multiline':False]['text':'/             have to be.','line_number':96,'multiline':False]['text':'/','line_number':97,'multiline':False]['text':'/ \c Args is a type list representing the type of the children','line_number':98,'multiline':False]['text':'/             of this expression. It is an instantiation of one','line_number':99,'multiline':False]['text':'/             of \c proto::list1\<\>, \c proto::list2\<\>, etc. The','line_number':100,'multiline':False]['text':'/             child types must all themselves be either \c expr\<\>','line_number':101,'multiline':False]['text':'/             or <tt>proto::expr\<\>&</tt>. If \c Args is an','line_number':102,'multiline':False]['text':'/             instantiation of \c proto::term\<\> then this','line_number':103,'multiline':False]['text':'/             \c expr\<\> type represents a terminal expression;','line_number':104,'multiline':False]['text':'/             the parameter to the \c proto::term\<\> template','line_number':105,'multiline':False]['text':'/             represents the terminal's value type.','line_number':106,'multiline':False]['text':'/','line_number':107,'multiline':False]['text':'/ \c Arity is an integral constant representing the number of child','line_number':108,'multiline':False]['text':'/             nodes this node contains. If \c Arity is 0, then this','line_number':109,'multiline':False]['text':'/             node is a terminal.','line_number':110,'multiline':False]['text':'/','line_number':111,'multiline':False]['text':'/ \c proto::expr\<\> is a valid Fusion random-access sequence, where','line_number':112,'multiline':False]['text':'/ the elements of the sequence are the child expressions.','line_number':113,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':136,'multiline':True]['text':'/ \return *this','line_number':141,'multiline':False]['text':'/','line_number':142,'multiline':False]['text':'/ \overload','line_number':149,'multiline':False]['text':'/','line_number':150,'multiline':False]['text':'/ \return A new \c expr\<\> object initialized with the specified','line_number':158,'multiline':False]['text':'/ arguments.','line_number':159,'multiline':False]['text':'/','line_number':160,'multiline':False]['text':'/ \overload','line_number':168,'multiline':False]['text':'/','line_number':169,'multiline':False]['text':'/ \return A new \c expr\<\> object initialized with the specified','line_number':177,'multiline':False]['text':'/ arguments.','line_number':178,'multiline':False]['text':'/','line_number':179,'multiline':False]['text':'/ If \c Tag is \c boost::proto::tag::address_of and \c proto_child0 is','line_number':190,'multiline':False]['text':'/ <tt>T&</tt>, then \c address_of_hack_type_ is <tt>T*</tt>.','line_number':191,'multiline':False]['text':'/ Otherwise, it is some undefined type.','line_number':192,'multiline':False]['text':'/ \return The address of <tt>this->child0</tt> if \c Tag is','line_number':195,'multiline':False]['text':'/ \c boost::proto::tag::address_of. Otherwise, this function will','line_number':196,'multiline':False]['text':'/ fail to compile.','line_number':197,'multiline':False]['text':'/','line_number':198,'multiline':False]['text':'/ \attention Proto overloads <tt>operator&</tt>, which means that','line_number':199,'multiline':False]['text':'/ proto-ified objects cannot have their addresses taken, unless we use','line_number':200,'multiline':False]['text':'/ the following hack to make \c &x implicitly convertible to \c X*.','line_number':201,'multiline':False]['text':'/ INTERNAL ONLY','line_number':208,'multiline':False]['text':'/','line_number':209,'multiline':False]['text':'/ Assignment','line_number':213,'multiline':False]['text':'/','line_number':214,'multiline':False]['text':'/ \param a The rhs.','line_number':215,'multiline':False]['text':'/ \return A new \c expr\<\> node representing an assignment of \c that to \c *this.','line_number':216,'multiline':False]['text':'/ Assignment','line_number':233,'multiline':False]['text':'/','line_number':234,'multiline':False]['text':'/ \param a The rhs.','line_number':235,'multiline':False]['text':'/ \return A new \c expr\<\> node representing an assignment of \c a to \c *this.','line_number':236,'multiline':False]['text':'/ \overload','line_number':254,'multiline':False]['text':'/','line_number':255,'multiline':False]['text':'/ \overload','line_number':274,'multiline':False]['text':'/','line_number':275,'multiline':False]['text':'/ \overload','line_number':293,'multiline':False]['text':'/','line_number':294,'multiline':False]['text':'/ Subscript','line_number':313,'multiline':False]['text':'/','line_number':314,'multiline':False]['text':'/ \param a The rhs.','line_number':315,'multiline':False]['text':'/ \return A new \c expr\<\> node representing \c *this subscripted with \c a.','line_number':316,'multiline':False]['text':'/ \overload','line_number':334,'multiline':False]['text':'/','line_number':335,'multiline':False]['text':'/ \overload','line_number':354,'multiline':False]['text':'/','line_number':355,'multiline':False]['text':'/ \overload','line_number':373,'multiline':False]['text':'/','line_number':374,'multiline':False]['text':'/ Encodes the return type of \c expr\<\>::operator(), for use with \c boost::result_of\<\>','line_number':393,'multiline':False]['text':'/','line_number':394,'multiline':False]['text':'/ \overload','line_number':402,'multiline':False]['text':'/','line_number':403,'multiline':False]['text':'/ \overload','line_number':421,'multiline':False]['text':'/','line_number':422,'multiline':False]['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':440,'multiline':False]['text':'/ Function call','line_number':442,'multiline':False]['text':'/','line_number':443,'multiline':False]['text':'/ \return A new \c expr\<\> node representing the function invocation of \c (*this)().','line_number':444,'multiline':False]['text':'/ \overload','line_number':454,'multiline':False]['text':'/','line_number':455,'multiline':False]