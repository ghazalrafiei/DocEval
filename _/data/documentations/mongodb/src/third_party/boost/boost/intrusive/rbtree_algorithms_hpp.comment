['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2006-2014.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' The tree destruction algorithm is based on Julienne Walker and The EC Team code:','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' This code is in the public domain. Anyone may use it or change it in any way that','line_number':16,'multiline':False]['text':' they see fit. The author assumes no responsibility for damages incurred through','line_number':17,'multiline':False]['text':' use of the original code or any variations thereof.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' It is requested, but not required, that due credit is given to the original author','line_number':20,'multiline':False]['text':' and anyone who has modified the code through a header comment, such as this one.','line_number':21,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':47,'multiline':False]['text':'Red nodes have black children','line_number':94,'multiline':False]['text':'Red node can't be root','line_number':99,'multiline':False]['text':'Every path to p contains the same number of black nodes','line_number':102,'multiline':False]['text':' namespace detail','line_number':111,'multiline':False]['text':'#ifndef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':113,'multiline':False]['text':'! rbtree_algorithms provides basic algorithms to manipulate','line_number':115,'multiline':False]['text':'! nodes forming a red-black tree. The insertion and deletion algorithms are','line_number':116,'multiline':False]['text':'! based on those in Cormen, Leiserson, and Rivest, Introduction to Algorithms','line_number':117,'multiline':False]['text':'! (MIT Press, 1990), except that','line_number':118,'multiline':False]['text':'!','line_number':119,'multiline':False]['text':'! (1) the header node is maintained with links not only to the root','line_number':120,'multiline':False]['text':'! but also to the leftmost node of the tree, to enable constant time','line_number':121,'multiline':False]['text':'! begin(), and to the rightmost node of the tree, to enable linear time','line_number':122,'multiline':False]['text':'! performance when used with the generic set algorithms (set_union,','line_number':123,'multiline':False]['text':'! etc.);','line_number':124,'multiline':False]['text':'!','line_number':125,'multiline':False]['text':'! (2) when a node being deleted has two children its successor node is','line_number':126,'multiline':False]['text':'! relinked into its place, rather than copied, so that the only','line_number':127,'multiline':False]['text':'! pointers invalidated are those referring to the deleted node.','line_number':128,'multiline':False]['text':'!','line_number':129,'multiline':False]['text':'! rbtree_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':130,'multiline':False]['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':131,'multiline':False]['text':'! following interface:','line_number':132,'multiline':False]['text':'!','line_number':133,'multiline':False]['text':'! <b>Typedefs</b>:','line_number':134,'multiline':False]['text':'!','line_number':135,'multiline':False]['text':'! <tt>node</tt>: The type of the node that forms the binary search tree','line_number':136,'multiline':False]['text':'!','line_number':137,'multiline':False]['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':138,'multiline':False]['text':'!','line_number':139,'multiline':False]['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':140,'multiline':False]['text':'!','line_number':141,'multiline':False]['text':'! <tt>color</tt>: The type that can store the color of a node','line_number':142,'multiline':False]['text':'!','line_number':143,'multiline':False]['text':'! <b>Static functions</b>:','line_number':144,'multiline':False]['text':'!','line_number':145,'multiline':False]['text':'! <tt>static node_ptr get_parent(const_node_ptr n);</tt>','line_number':146,'multiline':False]['text':'!','line_number':147,'multiline':False]['text':'! <tt>static void set_parent(node_ptr n, node_ptr parent);</tt>','line_number':148,'multiline':False]['text':'!','line_number':149,'multiline':False]['text':'! <tt>static node_ptr get_left(const_node_ptr n);</tt>','line_number':150,'multiline':False]['text':'!','line_number':151,'multiline':False]['text':'! <tt>static void set_left(node_ptr n, node_ptr left);</tt>','line_number':152,'multiline':False]['text':'!','line_number':153,'multiline':False]['text':'! <tt>static node_ptr get_right(const_node_ptr n);</tt>','line_number':154,'multiline':False]['text':'!','line_number':155,'multiline':False]['text':'! <tt>static void set_right(node_ptr n, node_ptr right);</tt>','line_number':156,'multiline':False]['text':'!','line_number':157,'multiline':False]['text':'! <tt>static color get_color(const_node_ptr n);</tt>','line_number':158,'multiline':False]['text':'!','line_number':159,'multiline':False]['text':'! <tt>static void set_color(node_ptr n, color c);</tt>','line_number':160,'multiline':False]['text':'!','line_number':161,'multiline':False]['text':'! <tt>static color black();</tt>','line_number':162,'multiline':False]['text':'!','line_number':163,'multiline':False]['text':'! <tt>static color red();</tt>','line_number':164,'multiline':False]['text':'/ @cond','line_number':178,'multiline':False]['text':'/ @endcond','line_number':183,'multiline':False]['text':'! This type is the information that will be','line_number':187,'multiline':False]['text':'! filled by insert_unique_check','line_number':188,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::get_header(const_node_ptr)','line_number':193,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::begin_node','line_number':196,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::end_node','line_number':199,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_tree','line_number':202,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':205,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr)','line_number':207,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr,node_ptr,node_ptr)','line_number':217,'multiline':False]['text':'Swap color','line_number':223,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr)','line_number':229,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr,node_ptr)','line_number':237,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink(node_ptr)','line_number':244,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink_leftmost_without_rebalance','line_number':256,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unique(const_node_ptr)','line_number':259,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::size(const_node_ptr)','line_number':262,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::next_node(const_node_ptr)','line_number':265,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::prev_node(const_node_ptr)','line_number':268,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init(node_ptr)','line_number':271,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':273,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init_header(node_ptr)','line_number':275,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::erase(node_ptr,node_ptr)','line_number':282,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_unique','line_number':291,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_equal','line_number':305,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clone(const_node_ptr,node_ptr,Cloner,Disposer)','line_number':316,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clear_and_dispose(const_node_ptr,Disposer)','line_number':326,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':330,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':335,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr, const KeyType&,KeyNodePtrCompare)','line_number':340,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':345,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':350,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':356,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':360,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_upper_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':362,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_lower_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':372,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal(node_ptr,node_ptr,node_ptr,NodePtrCompare)','line_number':382,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_before(node_ptr,node_ptr,node_ptr)','line_number':392,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_back(node_ptr,node_ptr)','line_number':401,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_front(node_ptr,node_ptr)','line_number':408,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':416,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,const_node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':422,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':427,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_commit(node_ptr,node_ptr,const insert_commit_data&)','line_number':429,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':437,'multiline':False]['text':'/ @cond','line_number':444,'multiline':False]['text':'Rebalance rbtree if needed','line_number':458,'multiline':False]['text':'Don't cache x_is_leftchild or similar because x can be null and','line_number':470,'multiline':False]['text':'equal to both x_parent_left and x_parent_right','line_number':471,'multiline':False]['text':'x is left child','line_number':473,'multiline':False]['text':' same as above, with right_ <-> left_.','line_number':509,'multiline':False]['text':'Final step','line_number':568,'multiline':False]['text':'p_parent is left child','line_number':570,'multiline':False]['text':'p is right child','line_number':571,'multiline':False]['text':'No need to link p and p_grandparent:','line_number':573,'multiline':False]['text':'    [NodeTraits::set_parent(p, p_grandparent) + NodeTraits::set_left(p_grandparent, p)]','line_number':574,'multiline':False]['text':'as p_grandparent is not the header, another rotation is coming and p_parent','line_number':575,'multiline':False]['text':'will be the left child of p_grandparent','line_number':576,'multiline':False]['text':'p_parent is right child','line_number':581,'multiline':False]['text':'p is left child','line_number':582,'multiline':False]['text':'No need to link p and p_grandparent:','line_number':584,'multiline':False]['text':'    [NodeTraits::set_parent(p, p_grandparent) + NodeTraits::set_right(p_grandparent, p)]','line_number':585,'multiline':False]['text':'as p_grandparent is not the header, another rotation is coming and p_parent','line_number':586,'multiline':False]['text':'will be the right child of p_grandparent','line_number':587,'multiline':False]['text':'/ @endcond','line_number':598,'multiline':False]['text':'/ @cond','line_number':601,'multiline':False]['text':'/ @endcond','line_number':615,'multiline':False]['text':'namespace intrusive','line_number':617,'multiline':False]['text':'namespace boost','line_number':618,'multiline':False]['text':'BOOST_INTRUSIVE_RBTREE_ALGORITHMS_HPP','line_number':622,'multiline':False]