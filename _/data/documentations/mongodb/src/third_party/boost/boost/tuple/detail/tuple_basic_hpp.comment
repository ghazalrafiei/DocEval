['text':'  tuple_basic.hpp -----------------------------------------------------','line_number':1,'multiline':False]['text':' Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':' For more information, see http://www.boost.org','line_number':9,'multiline':False]['text':' Outside help:','line_number':11,'multiline':False]['text':' This and that, Gary Powell.','line_number':12,'multiline':False]['text':' Fixed return types for get_head/get_tail','line_number':13,'multiline':False]['text':' ( and other bugs ) per suggestion of Jens Maurer','line_number':14,'multiline':False]['text':' simplified element type accessors + bug fix  (Jeremy Siek)','line_number':15,'multiline':False]['text':' Several changes/additions according to suggestions by Douglas Gregor,','line_number':16,'multiline':False]['text':' William Kempf, Vesa Karvonen, John Max Skaller, Ed Brey, Beman Dawes,','line_number':17,'multiline':False]['text':' David Abrahams.','line_number':18,'multiline':False]['text':' Revision history:','line_number':20,'multiline':False]['text':' 2002 05 01 Hugo Duncan: Fix for Borland after Jaakko's previous changes','line_number':21,'multiline':False]['text':' 2002 04 18 Jaakko: tuple element types can be void or plain function','line_number':22,'multiline':False]['text':'                    types, as long as no object is created.','line_number':23,'multiline':False]['text':'                    Tuple objects can no hold even noncopyable types','line_number':24,'multiline':False]['text':'                    such as arrays.','line_number':25,'multiline':False]['text':' 2001 10 22 John Maddock','line_number':26,'multiline':False]['text':'      Fixes for Borland C++','line_number':27,'multiline':False]['text':' 2001 08 30 David Abrahams','line_number':28,'multiline':False]['text':'      Added default constructor for cons<>.','line_number':29,'multiline':False]['text':' -----------------------------------------------------------------','line_number':30,'multiline':False]['text':' needed for the assignment from pair to tuple','line_number':36,'multiline':False]['text':' for std::size_t','line_number':37,'multiline':False]['text':' needed for BOOST_WORKAROUND','line_number':44,'multiline':False]['text':' -- null_type --------------------------------------------------------','line_number':54,'multiline':False]['text':' a helper function to provide a const null_type type temporary','line_number':57,'multiline':False]['text':' -- if construct ------------------------------------------------','line_number':62,'multiline':False]['text':' Proposed by Krzysztof Czarnecki and Ulrich Eisenecker','line_number':63,'multiline':False]['text':' end detail','line_number':71,'multiline':False]['text':' - cons forward declaration -----------------------------------------------','line_number':73,'multiline':False]['text':' - tuple forward declaration -----------------------------------------------','line_number':77,'multiline':False]['text':' tuple_length forward declaration','line_number':85,'multiline':False]['text':' -- generate error template, referencing to non-existing members of this','line_number':92,'multiline':False]['text':' template is used to produce compilation errors intentionally','line_number':93,'multiline':False]['text':' end of namespace detail','line_number':121,'multiline':False]['text':' -cons type accessors ----------------------------------------','line_number':124,'multiline':False]['text':' typename tuples::element<N,T>::type gets the type of the','line_number':125,'multiline':False]['text':' Nth element ot T, first element is at index 0','line_number':126,'multiline':False]['text':' -------------------------------------------------------','line_number':127,'multiline':False]['text':' def BOOST_NO_CV_SPECIALIZATIONS','line_number':151,'multiline':False]['text':' IsConst ','line_number':163,'multiline':True]['text':' end of namespace detail','line_number':170,'multiline':False]['text':' -get function templates -----------------------------------------------','line_number':182,'multiline':False]['text':' Usage: get<N>(aTuple)','line_number':183,'multiline':False]['text':' -- some traits classes for get functions','line_number':185,'multiline':False]['text':' access traits lifted from detail namespace to be part of the interface,','line_number':187,'multiline':False]['text':' (Joel de Guzman's suggestion). Rationale: get functions are part of the','line_number':188,'multiline':False]['text':' interface, so should the way to express their return types be.','line_number':189,'multiline':False]['text':' used as the tuple constructors parameter types','line_number':197,'multiline':False]['text':' Rationale: non-reference tuple element types can be cv-qualified.','line_number':198,'multiline':False]['text':' It should be possible to initialize such types with temporaries,','line_number':199,'multiline':False]['text':' and when binding temporaries to references, the reference must','line_number':200,'multiline':False]['text':' be non-volatile and const. 8.5.3. (5)','line_number':201,'multiline':False]['text':' get function for non-const cons-lists, returns a reference to the element','line_number':212,'multiline':False]['text':' get function for const cons-lists, returns a const reference to','line_number':225,'multiline':False]['text':' the element. If the element is a reference, returns the reference','line_number':226,'multiline':False]['text':' as such (that is, can return a non-const reference)','line_number':227,'multiline':False]['text':' -- the cons template  --------------------------------------------------','line_number':238,'multiline':False]['text':'  These helper templates wrap void types and plain function types.','line_number':241,'multiline':False]['text':'  The reationale is to allow one to write tuple types with those types','line_number':242,'multiline':False]['text':'  as elements, even though it is not possible to instantiate such object.','line_number':243,'multiline':False]['text':'  E.g: typedef tuple<void> some_type; // ok','line_number':244,'multiline':False]['text':'  but: some_type x; // fails','line_number':245,'multiline':False]['text':' detail','line_number':260,'multiline':False]['text':'  cons() : head(detail::default_arg<HT>::f()), tail() {}','line_number':287,'multiline':False]['text':' the argument for head is not strictly needed, but it prevents','line_number':289,'multiline':False]['text':' array type elements. This is good, since array type elements','line_number':290,'multiline':False]['text':' cannot be supported properly in any case (no assignment,','line_number':291,'multiline':False]['text':' copy works only if the tails are exactly the same type, ...)','line_number':292,'multiline':False]['text':'t1','line_number':308,'multiline':True]['text':' must define assignment operator explicitly, implicit version is','line_number':324,'multiline':False]['text':' illformed if HT is a reference (12.8. (12))','line_number':325,'multiline':False]['text':' check length = 2','line_number':332,'multiline':False]['text':' get member functions (non-const and const)','line_number':336,'multiline':False]['text':' delegate to non-member get','line_number':342,'multiline':False]['text':' delegate to non-member get','line_number':350,'multiline':False]['text':'  cons() : head(detail::default_arg<HT>::f()) {}','line_number':375,'multiline':False]['text':' must define assignment operator explicitely, implicit version','line_number':403,'multiline':False]['text':' is illformed if HT is a reference','line_number':404,'multiline':False]['text':' templates for finding out the length of the tuple -------------------','line_number':425,'multiline':False]['text':' Tuple to cons mapper --------------------------------------------------','line_number':454,'multiline':False]['text':' The empty tuple is a null_type','line_number':465,'multiline':False]['text':' end detail','line_number':472,'multiline':False]['text':' -------------------------------------------------------------------','line_number':474,'multiline':False]['text':' -- tuple ------------------------------------------------------','line_number':475,'multiline':False]['text':' access_traits<T>::parameter_type takes non-reference types as const T&','line_number':489,'multiline':False]['text':' check_length = 2','line_number':591,'multiline':False]['text':' The empty tuple','line_number':599,'multiline':False]['text':' Swallows any assignment   (by Doug Gregor)','line_number':609,'multiline':False]['text':' namespace detail','line_number':623,'multiline':False]['text':' "ignore" allows tuple positions to be ignored when using "tie".','line_number':625,'multiline':False]['text':' ---------------------------------------------------------------------------','line_number':628,'multiline':False]['text':' The call_traits for make_tuple','line_number':629,'multiline':False]['text':' Honours the reference_wrapper class.','line_number':630,'multiline':False]['text':' Must be instantiated with plain or const plain types (not with references)','line_number':632,'multiline':False]['text':' from template<class T> foo(const T& t) : make_tuple_traits<const T>::type','line_number':634,'multiline':False]['text':' from template<class T> foo(T& t) : make_tuple_traits<T>::type','line_number':635,'multiline':False]['text':' Conversions:','line_number':637,'multiline':False]['text':' T -> T,','line_number':638,'multiline':False]['text':' references -> compile_time_error','line_number':639,'multiline':False]['text':' reference_wrapper<T> -> T&','line_number':640,'multiline':False]['text':' const reference_wrapper<T> -> T&','line_number':641,'multiline':False]['text':' array -> const ref array','line_number':642,'multiline':False]['text':' commented away, see below  (JJ)','line_number':649,'multiline':False]['text':'  typedef typename IF<','line_number':650,'multiline':False]['text':'  boost::is_function<T>::value,','line_number':651,'multiline':False]['text':'  T&,','line_number':652,'multiline':False]['text':'  T>::RET type;','line_number':653,'multiline':False]['text':' The is_function test was there originally for plain function types,','line_number':657,'multiline':False]['text':' which can't be stored as such (we must either store them as references or','line_number':658,'multiline':False]['text':' pointers). Such a type could be formed if make_tuple was called with a','line_number':659,'multiline':False]['text':' reference to a function.','line_number':660,'multiline':False]['text':' But this would mean that a const qualified function type was formed in','line_number':661,'multiline':False]['text':' the make_tuple function and hence make_tuple can't take a function','line_number':662,'multiline':False]['text':' reference as a parameter, and thus T can't be a function type.','line_number':663,'multiline':False]['text':' So is_function test was removed.','line_number':664,'multiline':False]['text':' (14.8.3. says that type deduction fails if a cv-qualified function type','line_number':665,'multiline':False]['text':' is created. (It only applies for the case of explicitly specifying template','line_number':666,'multiline':False]['text':' args, though?)) (JJ)','line_number':667,'multiline':False]['text':' Arrays can't be stored as plain types; convert them to references.','line_number':676,'multiline':False]['text':' All arrays are converted to const. This is because make_tuple takes its','line_number':677,'multiline':False]['text':' parameters as const T& and thus the knowledge of the potential','line_number':678,'multiline':False]['text':' non-constness of actual argument is lost.','line_number':679,'multiline':False]['text':' a helper traits to make the make_tuple functions shorter (Vesa Karvonen's','line_number':717,'multiline':False]['text':' suggestion)','line_number':718,'multiline':False]['text':' end detail','line_number':739,'multiline':False]['text':' -make_tuple function templates -----------------------------------','line_number':741,'multiline':False]['text':' Tie function templates -------------------------------------------------','line_number':872,'multiline':False]['text':' end of namespace tuples','line_number':983,'multiline':False]['text':' end of namespace boost','line_number':984,'multiline':False]['text':' BOOST_TUPLE_BASIC_HPP','line_number':992,'multiline':False]