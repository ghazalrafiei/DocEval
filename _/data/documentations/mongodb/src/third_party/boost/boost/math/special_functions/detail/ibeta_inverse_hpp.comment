['text':'  Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Copyright Paul A. Bristow 2007','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' Helper object used by root finding','line_number':22,'multiline':False]['text':' code to convert eta to x.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' ADL of std names','line_number':32,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' See:','line_number':53,'multiline':False]['text':' "Asymptotic Inversion of the Incomplete Beta Function"','line_number':54,'multiline':False]['text':' N.M. Temme','line_number':55,'multiline':False]['text':' Journal of Computation and Applied Mathematics 41 (1992) 145-157.','line_number':56,'multiline':False]['text':' Section 2.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' ADL of std names','line_number':62,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' get the first approximation for eta from the inverse','line_number':66,'multiline':False]['text':' error function (Eq: 2.9 and 2.10).','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' calculate powers:','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':'','line_number':80,'multiline':False]['text':' Calculate correction terms:','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' See eq following 2.15:','line_number':84,'multiline':False]['text':' Eq Following 2.17:','line_number':91,'multiline':False]['text':' Eq Following 2.17:','line_number':100,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' Bring them together to get a final estimate for eta:','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' now we need to convert eta to x, by solving the appropriate','line_number':111,'multiline':False]['text':' quadratic equation:','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':'','line_number':130,'multiline':False]['text':' See:','line_number':131,'multiline':False]['text':' "Asymptotic Inversion of the Incomplete Beta Function"','line_number':132,'multiline':False]['text':' N.M. Temme','line_number':133,'multiline':False]['text':' Journal of Computation and Applied Mathematics 41 (1992) 145-157.','line_number':134,'multiline':False]['text':' Section 3.','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':'a','line_number':138,'multiline':True]['text':'b','line_number':138,'multiline':True]['text':' ADL of std names','line_number':140,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' Get first estimate for eta, see Eq 3.9 and 3.10,','line_number':143,'multiline':False]['text':' but note there is a typo in Eq 3.10:','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' Now we need to perturb eta0 to get eta, which we do by','line_number':152,'multiline':False]['text':' evaluating the polynomial in 1/r at the bottom of page 151,','line_number':153,'multiline':False]['text':' to do this we first need the error terms e1, e2 e3','line_number':154,'multiline':False]['text':' which we'll fill into the array "terms".  Since these','line_number':155,'multiline':False]['text':' terms are themselves polynomials, we'll need another','line_number':156,'multiline':False]['text':' array "workspace" to calculate those...','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' some powers of sin(theta)cos(theta) that we'll need later:','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' Calculate e1 and put it in terms[1], see the middle of page 151:','line_number':172,'multiline':False]['text':'','line_number':173,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' Now evaluate e2 and put it in terms[2]:','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':'','line_number':196,'multiline':False]['text':' And e3, and put it in terms[3]:','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' Bring the correction terms together to evaluate eta,','line_number':207,'multiline':False]['text':' this is the last equation on page 151:','line_number':208,'multiline':False]['text':'','line_number':209,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' Now that we have eta we need to back solve for x,','line_number':212,'multiline':False]['text':' we seek the value of x that gives eta in Eq 3.2.','line_number':213,'multiline':False]['text':' The two methods used are described in section 5.','line_number':214,'multiline':False]['text':'','line_number':215,'multiline':False]['text':' Begin by defining a few variables we'll need later:','line_number':216,'multiline':False]['text':'','line_number':217,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' Temme doesn't specify what value to switch on here,','line_number':225,'multiline':False]['text':' but this seems to work pretty well:','line_number':226,'multiline':False]['text':'','line_number':227,'multiline':False]['text':'','line_number':230,'multiline':False]['text':' Small eta use the expansion Temme gives in the second equation','line_number':231,'multiline':False]['text':' of section 5, it's a polynomial in eta:','line_number':232,'multiline':False]['text':'','line_number':233,'multiline':False]['text':'','line_number':248,'multiline':False]['text':' If eta is large we need to solve Eq 3.2 more directly,','line_number':249,'multiline':False]['text':' begin by getting an initial approximation for x from','line_number':250,'multiline':False]['text':' the last equation on page 155, this is a polynomial in u:','line_number':251,'multiline':False]['text':'','line_number':252,'multiline':False]['text':'','line_number':261,'multiline':False]['text':' At this point we may or may not have the right answer, Eq-3.2 has','line_number':262,'multiline':False]['text':' two solutions for x for any given eta, however the mapping in 3.2','line_number':263,'multiline':False]['text':' is 1:1 with the sign of eta and x-sin^2(theta) being the same.','line_number':264,'multiline':False]['text':' So we can check if we have the right root of 3.2, and if not','line_number':265,'multiline':False]['text':' switch x for 1-x.  This transformation is motivated by the fact','line_number':266,'multiline':False]['text':' that the distribution is *almost* symmetric so 1-x will be in the right','line_number':267,'multiline':False]['text':' ball park for the solution:','line_number':268,'multiline':False]['text':'','line_number':269,'multiline':False]['text':'','line_number':276,'multiline':False]['text':' The final step is a few Newton-Raphson iterations to','line_number':277,'multiline':False]['text':' clean up our approximation for x, this is pretty cheap','line_number':278,'multiline':False]['text':' in general, and very cheap compared to an incomplete beta','line_number':279,'multiline':False]['text':' evaluation.  The limits set on x come from the observation','line_number':280,'multiline':False]['text':' that the sign of eta and x-sin^2(theta) are the same.','line_number':281,'multiline':False]['text':'','line_number':282,'multiline':False]['text':'','line_number':294,'multiline':False]['text':' If our initial approximation is out of bounds then bisect:','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':'','line_number':299,'multiline':False]['text':' And iterate:','line_number':300,'multiline':False]['text':'','line_number':301,'multiline':False]['text':'','line_number':307,'multiline':False]['text':' See:','line_number':308,'multiline':False]['text':' "Asymptotic Inversion of the Incomplete Beta Function"','line_number':309,'multiline':False]['text':' N.M. Temme','line_number':310,'multiline':False]['text':' Journal of Computation and Applied Mathematics 41 (1992) 145-157.','line_number':311,'multiline':False]['text':' Section 4.','line_number':312,'multiline':False]['text':'','line_number':313,'multiline':False]['text':' ADL of std names','line_number':317,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' Begin by getting an initial approximation for the quantity','line_number':320,'multiline':False]['text':' eta from the dominant part of the incomplete beta:','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':'','line_number':329,'multiline':False]['text':' Define the variables and powers we'll need later on:','line_number':330,'multiline':False]['text':'','line_number':331,'multiline':False]['text':'','line_number':351,'multiline':False]['text':' Now we need to compute the perturbation error terms that','line_number':352,'multiline':False]['text':' convert eta0 to eta, these are all polynomials of polynomials.','line_number':353,'multiline':False]['text':' Probably these should be re-written to use tabulated data','line_number':354,'multiline':False]['text':' (see examples above), but it's less of a win in this case as we','line_number':355,'multiline':False]['text':' need to calculate the individual powers for the denominator terms','line_number':356,'multiline':False]['text':' anyway, so we might as well use them for the numerator-polynomials','line_number':357,'multiline':False]['text':' as well....','line_number':358,'multiline':False]['text':'','line_number':359,'multiline':False]['text':' Refer to p154-p155 for the details of these expansions:','line_number':360,'multiline':False]['text':'','line_number':361,'multiline':False]['text':'','line_number':376,'multiline':False]['text':' Combine eta0 and the error terms to compute eta (Second equation p155):','line_number':377,'multiline':False]['text':'','line_number':378,'multiline':False]['text':'','line_number':380,'multiline':False]['text':' Now we need to solve Eq 4.2 to obtain x.  For any given value of','line_number':381,'multiline':False]['text':' eta there are two solutions to this equation, and since the distribution','line_number':382,'multiline':False]['text':' may be very skewed, these are not related by x ~ 1-x we used when','line_number':383,'multiline':False]['text':' implementing section 3 above.  However we know that:','line_number':384,'multiline':False]['text':'','line_number':385,'multiline':False]['text':'  cross < x <= 1       ; iff eta < mu','line_number':386,'multiline':False]['text':'          x == cross   ; iff eta == mu','line_number':387,'multiline':False]['text':'     0 <= x < cross    ; iff eta > mu','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':' Where cross == 1 / (1 + mu)','line_number':390,'multiline':False]['text':' Many thanks to Prof Temme for clarifying this point.','line_number':391,'multiline':False]['text':'','line_number':392,'multiline':False]['text':' Therefore we'll just jump straight into Newton iterations','line_number':393,'multiline':False]['text':' to solve Eq 4.2 using these bounds, and simple bisection','line_number':394,'multiline':False]['text':' as the first guess, in practice this converges pretty quickly','line_number':395,'multiline':False]['text':' and we only need a few digits correct anyway:','line_number':396,'multiline':False]['text':'','line_number':397,'multiline':False]['text':' ADL of std names','line_number':421,'multiline':False]['text':' make sure we don't have a zero derivative:','line_number':441,'multiline':False]['text':' For ADL of math functions.','line_number':455,'multiline':False]['text':'','line_number':457,'multiline':False]['text':' The flag invert is set to true if we swap a for b and p for q,','line_number':458,'multiline':False]['text':' in which case the result has to be subtracted from 1:','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':'','line_number':462,'multiline':False]['text':' Handle trivial cases first:','line_number':463,'multiline':False]['text':'','line_number':464,'multiline':False]['text':' Change things around so we can handle as b == 1 special case below:','line_number':482,'multiline':False]['text':'','line_number':487,'multiline':False]['text':' Depending upon which approximation method we use, we may end up','line_number':488,'multiline':False]['text':' calculating either x or y initially (where y = 1-x):','line_number':489,'multiline':False]['text':'','line_number':490,'multiline':False]['text':' Set to a safe zero to avoid a','line_number':491,'multiline':False]['text':' MSVC 2005 warning C4701: potentially uninitialized local variable 'x' used','line_number':492,'multiline':False]['text':' But code inspection appears to ensure that x IS assigned whatever the code path.','line_number':493,'multiline':False]['text':' For some of the methods we can put tighter bounds','line_number':496,'multiline':False]['text':' on the result than simply [0,1]:','line_number':497,'multiline':False]['text':'','line_number':498,'multiline':False]['text':'','line_number':501,'multiline':False]['text':' Student's T with b = 0.5 gets handled as a special case, swap','line_number':502,'multiline':False]['text':' around if the arguments are in the "wrong" order:','line_number':503,'multiline':False]['text':'','line_number':504,'multiline':False]['text':'','line_number':525,'multiline':False]['text':' Select calculation method for the initial estimate:','line_number':526,'multiline':False]['text':'','line_number':527,'multiline':False]['text':'','line_number':530,'multiline':False]['text':' We have a Student's T distribution:','line_number':531,'multiline':False]['text':'','line_number':562,'multiline':False]['text':' When a+b is large then we can use one of Prof Temme's','line_number':563,'multiline':False]['text':' asymptotic expansions, begin by swapping things around','line_number':564,'multiline':False]['text':' so that p < 0.5, we do this to avoid cancellations errors','line_number':565,'multiline':False]['text':' when p is large.','line_number':566,'multiline':False]['text':'','line_number':567,'multiline':False]['text':'','line_number':578,'multiline':False]['text':' When a and b differ by a small amount','line_number':579,'multiline':False]['text':' the curve is quite symmetrical and we can use an error','line_number':580,'multiline':False]['text':' function to approximate the inverse. This is the cheapest','line_number':581,'multiline':False]['text':' of the three Temme expansions, and the calculated value','line_number':582,'multiline':False]['text':' for x will never be much larger than p, so we don't have','line_number':583,'multiline':False]['text':' to worry about cancellation as long as p is small.','line_number':584,'multiline':False]['text':'','line_number':585,'multiline':False]['text':'','line_number':596,'multiline':False]['text':' The second error function case is the next cheapest','line_number':597,'multiline':False]['text':' to use, it brakes down when the result is likely to be','line_number':598,'multiline':False]['text':' very small, if a+b is also small, but we can use a','line_number':599,'multiline':False]['text':' cheaper expansion there in any case.  As before x won't','line_number':600,'multiline':False]['text':' be much larger than p, so as long as p is small we should','line_number':601,'multiline':False]['text':' be free of cancellation error.','line_number':602,'multiline':False]['text':'','line_number':603,'multiline':False]['text':'','line_number':615,'multiline':False]['text':' If we get here then a and b are very different in magnitude','line_number':616,'multiline':False]['text':' and we need to use the third of Temme's methods which','line_number':617,'multiline':False]['text':' involves inverting the incomplete gamma.  This is much more','line_number':618,'multiline':False]['text':' expensive than the other methods.  We also can only use this','line_number':619,'multiline':False]['text':' method when a > b, which can lead to cancellation errors','line_number':620,'multiline':False]['text':' if we really want y (as we will when x is close to 1), so','line_number':621,'multiline':False]['text':' a different expansion is used in that case.','line_number':622,'multiline':False]['text':'','line_number':623,'multiline':False]['text':'','line_number':630,'multiline':False]['text':' Try and compute the easy way first:','line_number':631,'multiline':False]['text':'','line_number':632,'multiline':False]['text':'','line_number':653,'multiline':False]['text':' Both a and b less than 1,','line_number':654,'multiline':False]['text':' there is a point of inflection at xs:','line_number':655,'multiline':False]['text':'','line_number':656,'multiline':False]['text':'','line_number':658,'multiline':False]['text':' Now we need to ensure that we start our iteration from the','line_number':659,'multiline':False]['text':' right side of the inflection point:','line_number':660,'multiline':False]['text':'','line_number':661,'multiline':False]['text':' The result is at the point of inflection, best just return it:','line_number':665,'multiline':False]['text':' nothing interesting going on here.','line_number':682,'multiline':False]['text':'','line_number':684,'multiline':False]['text':' The call to beta may overflow, plus the alternative using lgamma may do the same','line_number':685,'multiline':False]['text':' if T is a type where 1/T is infinite for small values (denorms for example).','line_number':686,'multiline':False]['text':'','line_number':687,'multiline':False]['text':'','line_number':706,'multiline':False]['text':' And finally we know that our result is below the inflection','line_number':707,'multiline':False]['text':' point, so set an upper limit on our search:','line_number':708,'multiline':False]['text':'','line_number':709,'multiline':False]['text':'','line_number':716,'multiline':False]['text':' Small a and b, both greater than 1,','line_number':717,'multiline':False]['text':' there is a point of inflection at xs,','line_number':718,'multiline':False]['text':' and it's complement is xs2, we must always','line_number':719,'multiline':False]['text':' start our iteration from the right side of the','line_number':720,'multiline':False]['text':' point of inflection.','line_number':721,'multiline':False]['text':'','line_number':722,'multiline':False]['text':'','line_number':734,'multiline':False]['text':' Estimate x and y, using expm1 to get a good estimate','line_number':735,'multiline':False]['text':' for y when it's very small:','line_number':736,'multiline':False]['text':'','line_number':737,'multiline':False]['text':'','line_number':744,'multiline':False]['text':' Under a limited range of circumstances we can improve','line_number':745,'multiline':False]['text':' our estimate for x, frankly it's clear if this has much effect!','line_number':746,'multiline':False]['text':'','line_number':747,'multiline':False]['text':'','line_number':762,'multiline':False]['text':' And finally we know that our result is below the inflection','line_number':763,'multiline':False]['text':' point, so set an upper limit on our search:','line_number':764,'multiline':False]['text':'','line_number':765,'multiline':False]['text':'if((a <= 1) != (b <= 1))','line_number':770,'multiline':True]['text':'','line_number':772,'multiline':False]['text':' If all else fails we get here, only one of a and b','line_number':773,'multiline':False]['text':' is above 1, and a+b is small.  Start by swapping','line_number':774,'multiline':False]['text':' things around so that we have a concave curve with b > a','line_number':775,'multiline':False]['text':' and no points of inflection in [0,1].  As long as we expect','line_number':776,'multiline':False]['text':' x to be small then we can use the simple (and cheap) power','line_number':777,'multiline':False]['text':' term to estimate x, but when we expect x to be large then','line_number':778,'multiline':False]['text':' this greatly underestimates x and leaves us trying to','line_number':779,'multiline':False]['text':' iterate "round the corner" which may take almost forever...','line_number':780,'multiline':False]['text':'','line_number':781,'multiline':False]['text':' We could use Temme's inverse gamma function case in that case,','line_number':782,'multiline':False]['text':' this works really rather well (albeit expensively) even though','line_number':783,'multiline':False]['text':' strictly speaking we're outside it's defined range.','line_number':784,'multiline':False]['text':'','line_number':785,'multiline':False]['text':' However it's expensive to compute, and an alternative approach','line_number':786,'multiline':False]['text':' which models the curve as a distorted quarter circle is much','line_number':787,'multiline':False]['text':' cheaper to compute, and still keeps the number of iterations','line_number':788,'multiline':False]['text':' required down to a reasonable level.  With thanks to Prof Temme','line_number':789,'multiline':False]['text':' for this suggestion.','line_number':790,'multiline':False]['text':'','line_number':791,'multiline':False]['text':'if(pow(q, 1/b) < 0.1)','line_number':805,'multiline':True]['text':' model a distorted quarter circle:','line_number':807,'multiline':False]['text':'','line_number':815,'multiline':False]['text':' Now we have a guess for x (and for y) we can set things up for','line_number':816,'multiline':False]['text':' iteration.  If x > 0.5 it pays to swap things round:','line_number':817,'multiline':False]['text':'','line_number':818,'multiline':False]['text':'','line_number':830,'multiline':False]['text':' lower bound for our search:','line_number':831,'multiline':False]['text':'','line_number':832,'multiline':False]['text':' We're not interested in denormalised answers as these tend to','line_number':833,'multiline':False]['text':' these tend to take up lots of iterations, given that we can't get','line_number':834,'multiline':False]['text':' accurate derivatives in this area (they tend to be infinite).','line_number':835,'multiline':False]['text':'','line_number':836,'multiline':False]['text':'','line_number':841,'multiline':False]['text':' We're not interested in answers smaller than machine epsilon:','line_number':842,'multiline':False]['text':'','line_number':843,'multiline':False]['text':'','line_number':853,'multiline':False]['text':' Figure out how many digits to iterate towards:','line_number':854,'multiline':False]['text':'','line_number':855,'multiline':False]['text':'','line_number':859,'multiline':False]['text':' If we're in a region where the first derivative is very','line_number':860,'multiline':False]['text':' large, then we have to take care that the root-finder','line_number':861,'multiline':False]['text':' doesn't terminate prematurely.  We'll bump the precision','line_number':862,'multiline':False]['text':' up to avoid this, but we have to take care not to set the','line_number':863,'multiline':False]['text':' precision too high or the last few iterations will just','line_number':864,'multiline':False]['text':' thrash around and convergence may be slow in this case.','line_number':865,'multiline':False]['text':' Try 3/4 of machine epsilon:','line_number':866,'multiline':False]['text':'','line_number':867,'multiline':False]['text':'','line_number':871,'multiline':False]['text':' Now iterate, we can use either p or q as the target here','line_number':872,'multiline':False]['text':' depending on which is smaller:','line_number':873,'multiline':False]['text':'','line_number':874,'multiline':False]['text':'','line_number':879,'multiline':False]['text':' We don't really want these asserts here, but they are useful for sanity','line_number':880,'multiline':False]['text':' checking that we have the limits right, uncomment if you suspect bugs *only*.','line_number':881,'multiline':False]['text':'','line_number':882,'multiline':False]['text':'BOOST_MATH_ASSERT(x != upper);','line_number':883,'multiline':False]['text':'BOOST_MATH_ASSERT((x != lower) || (x == boost::math::tools::min_value<T>()) || (x == boost::math::tools::epsilon<T>()));','line_number':884,'multiline':False]['text':'','line_number':885,'multiline':False]['text':' Tidy up, if we "lower" was too high then zero is the best answer we have:','line_number':886,'multiline':False]['text':'','line_number':887,'multiline':False]['text':' namespace detail','line_number':895,'multiline':False]['text':' namespace math','line_number':1013,'multiline':False]['text':' namespace boost','line_number':1014,'multiline':False]['text':' BOOST_MATH_SPECIAL_FUNCTIONS_IGAMMA_INVERSE_HPP','line_number':1016,'multiline':False]