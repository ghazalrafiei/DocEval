['text':'  (C) Copyright 2007-8 Anthony Williams','line_number':3,'multiline':False]['text':'  (C) Copyright 2012 Vicente J. Botet Escriba','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':6,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'for gettimeofday and timeval','line_number':29,'multiline':False]['text':' mach_absolute_time, mach_timebase_info_data_t','line_number':30,'multiline':False]['text':' for clock_gettime','line_number':33,'multiline':False]['text':'typedef boost::int_least64_t time_max_t;','line_number':42,'multiline':False]['text':' steady_clock','line_number':52,'multiline':False]['text':' Note, in this implementation steady_clock and high_resolution_clock','line_number':54,'multiline':False]['text':'   are the same clock.  They are both based on mach_absolute_time().','line_number':55,'multiline':False]['text':'   mach_absolute_time() * MachInfo.numer / MachInfo.denom is the number of','line_number':56,'multiline':False]['text':'   nanoseconds since the computer booted up.  MachInfo.numer and MachInfo.denom','line_number':57,'multiline':False]['text':'   are run time constants supplied by the OS.  This clock has no relationship','line_number':58,'multiline':False]['text':'   to the Gregorian calendar.  It's main use is as a high resolution timer.','line_number':59,'multiline':False]['text':' MachInfo.numer / MachInfo.denom is often 1 on the latest equipment.  Specialize','line_number':61,'multiline':False]['text':'   for that case as an optimization.','line_number':62,'multiline':False]['text':' ceil/floor away from zero','line_number':172,'multiline':False]['text':' return ceiling of positive numbers','line_number':175,'multiline':False]['text':' return floor of negative numbers','line_number':180,'multiline':False]['text':' never fails','line_number':297,'multiline':False]['text':' This conversion assumes that chrono::steady_clock::time_point and mono_platform_timepoint share the same epoch.','line_number':333,'multiline':False]['text':' can't name this max() since that is a macro on some Windows systems','line_number':339,'multiline':False]['text':' Use QueryPerformanceCounter() to match the implementation in Boost','line_number':401,'multiline':False]['text':' Chrono so that chrono::steady_clock::now() and this function share the','line_number':402,'multiline':False]['text':' same epoch and so can be converted between each other.','line_number':403,'multiline':False]['text':' Use GetTickCount64() because it's more reliable on older','line_number':430,'multiline':False]['text':' systems like Windows XP and Windows Server 2003.','line_number':431,'multiline':False]