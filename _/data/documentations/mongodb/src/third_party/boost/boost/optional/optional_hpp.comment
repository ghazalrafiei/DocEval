['text':' Copyright (C) 2003, 2008 Fernando Luis Cacciola Carballal.','line_number':1,'multiline':False]['text':' Copyright (C) 2014 - 2021 Andrzej Krzemienski.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Use, modification, and distribution is subject to the Boost Software','line_number':4,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/optional for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' You are welcome to contact the author at:','line_number':10,'multiline':False]['text':'  fernando_cacciola@hotmail.com','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' Revisions:','line_number':13,'multiline':False]['text':' 27 Apr 2008 (improved swap) Fernando Cacciola, Niels Dekker, Thorsten Ottosen','line_number':14,'multiline':False]['text':' 05 May 2014 (Added move semantics) Andrzej Krzemienski','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' BOOST_NO_IOSTREAM','line_number':23,'multiline':False]['text':' namespace boost::optional_detail','line_number':82,'multiline':False]['text':' a tag for in-place initialization of contained value','line_number':91,'multiline':False]['text':' a tag for conditional in-place initialization of contained value','line_number':99,'multiline':False]['text':' namespace optional_ns','line_number':107,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':145,'multiline':False]['text':' No-throw','line_number':146,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':151,'multiline':False]['text':' No-throw','line_number':152,'multiline':False]['text':' Creates an optional<T> initialized with 'val'.','line_number':157,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':158,'multiline':False]['text':' move-construct an optional<T> initialized from an rvalue-ref to 'val'.','line_number':167,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':168,'multiline':False]['text':' Creates an optional<T> initialized with 'val' IFF cond is true, otherwise creates an uninitialized optional<T>.','line_number':177,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':178,'multiline':False]['text':' Creates an optional<T> initialized with 'move(val)' IFF cond is true, otherwise creates an uninitialized optional<T>.','line_number':188,'multiline':False]['text':' Can throw if T::T(T &&) does','line_number':189,'multiline':False]['text':' Creates a deep copy of another optional<T>','line_number':199,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':200,'multiline':False]['text':' Creates a deep move of another optional<T>','line_number':210,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':211,'multiline':False]['text':' This is used for both converting and in-place constructions.','line_number':233,'multiline':False]['text':' Derived classes use the 'tag' to select the appropriate','line_number':234,'multiline':False]['text':' implementation (the correct 'construct()' overload)','line_number':235,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':261,'multiline':False]['text':' Assigns from another optional<T> (deep-copies the rhs value)','line_number':264,'multiline':False]['text':' Assigns from another optional<T> (deep-moves the rhs value)','line_number':281,'multiline':False]['text':' Assigns from another _convertible_ optional<U> (deep-copies the rhs value)','line_number':298,'multiline':False]['text':' move-assigns from another _convertible_ optional<U> (deep-moves from the rhs value)','line_number':325,'multiline':False]['text':' Assigns from a T (deep-copies the rhs value)','line_number':344,'multiline':False]['text':' Assigns from a T (deep-moves the rhs value)','line_number':353,'multiline':False]['text':' Assigns from "none", destroying the current value, if any, leaving this UNINITIALIZED','line_number':362,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':363,'multiline':False]['text':' Destroys the current value, if any, leaving this UNINITIALIZED','line_number':390,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':391,'multiline':False]['text':' **DEPPRECATED** Replaces the current value -if any- with 'val'','line_number':394,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise,','line_number':397,'multiline':False]['text':' returns NULL.','line_number':398,'multiline':False]['text':' No-throw','line_number':399,'multiline':False]['text':' Constructs in-place','line_number':423,'multiline':False]['text':' upon exception *this is always uninitialized','line_number':424,'multiline':False]['text':' Constructs in-place using the given factory','line_number':603,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':611,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':626,'multiline':False]['text':' Constructs in-place using the given factory','line_number':635,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':643,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':658,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':670,'multiline':False]['text':' of a one-argument T constructor.','line_number':671,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':672,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':673,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':681,'multiline':False]['text':' of a T's assignment operator.','line_number':682,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':683,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':684,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':691,'multiline':False]['text':' of a one-argument T constructor.','line_number':692,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':693,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':694,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':702,'multiline':False]['text':' of a T's assignment operator.','line_number':703,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':704,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':705,'multiline':False]['text':' BCB5.64 (and probably lower versions) workaround.','line_number':715,'multiline':False]['text':'   The in-place factories are supported by means of catch-all constructors','line_number':716,'multiline':False]['text':'   and assignment operators (the functions are parameterized in terms of','line_number':717,'multiline':False]['text':'   an arbitrary 'Expr' type)','line_number':718,'multiline':False]['text':'   This compiler incorrectly resolves the overload set and sinks optional<T> and optional<U>','line_number':719,'multiline':False]['text':'   to the 'Expr'-taking functions even though explicit overloads are present for them.','line_number':720,'multiline':False]['text':'   Thus, the following overload is needed to properly handle the case when the 'lhs'','line_number':721,'multiline':False]['text':'   is another optional.','line_number':722,'multiline':False]['text':'','line_number':723,'multiline':False]['text':' For VC<=70 compilers this workaround dosen't work becasue the comnpiler issues and error','line_number':724,'multiline':False]['text':' instead of choosing the wrong overload','line_number':725,'multiline':False]['text':'','line_number':726,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not optional_base<..>)','line_number':728,'multiline':False]['text':' An exception can be thrown here.','line_number':734,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':735,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not optional_base<..>)','line_number':741,'multiline':False]['text':' An exception can be thrown here.','line_number':747,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':748,'multiline':False]['text':' defined BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION','line_number':754,'multiline':False]['text':' definition of metafunction is_optional_val_init_candidate','line_number':787,'multiline':False]['text':' is_convertible condition','line_number':829,'multiline':False]['text':' for is_assignable','line_number':832,'multiline':False]['text':' On some initial rvalue reference implementations GCC does it in a strange way,','line_number':835,'multiline':False]['text':' preferring perfect-forwarding constructor to implicit copy constructor.','line_number':836,'multiline':False]['text':' namespace optional_detail','line_number':885,'multiline':False]['text':' namespace optional_config','line_number':895,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':928,'multiline':False]['text':' No-throw','line_number':929,'multiline':False]['text':' Creates an optional<T> uninitialized.','line_number':932,'multiline':False]['text':' No-throw','line_number':933,'multiline':False]['text':' Creates an optional<T> initialized with 'val'.','line_number':936,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':937,'multiline':False]['text':' Creates an optional<T> initialized with 'move(val)'.','line_number':941,'multiline':False]['text':' Can throw if T::T(T &&) does','line_number':942,'multiline':False]['text':' Creates an optional<T> initialized with 'val' IFF cond is true, otherwise creates an uninitialized optional.','line_number':947,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':948,'multiline':False]['text':'/ Creates an optional<T> initialized with 'val' IFF cond is true, otherwise creates an uninitialized optional.','line_number':952,'multiline':False]['text':' Can throw if T::T(T &&) does','line_number':953,'multiline':False]['text':' NOTE: MSVC needs templated versions first','line_number':958,'multiline':False]['text':' Creates a deep copy of another convertible optional<U>','line_number':960,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':961,'multiline':False]['text':' Can throw if T::T(U const&) does','line_number':962,'multiline':False]['text':' Creates a deep move of another convertible optional<U>','line_number':977,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':978,'multiline':False]['text':' Can throw if T::T(U&&) does','line_number':979,'multiline':False]['text':' Creates an optional<T> with an expression which can be either','line_number':995,'multiline':False]['text':'  (a) An instance of InPlaceFactory (i.e. in_place(a,b,...,n);','line_number':996,'multiline':False]['text':'  (b) An instance of TypedInPlaceFactory ( i.e. in_place<T>(a,b,...,n);','line_number':997,'multiline':False]['text':'  (c) Any expression implicitly convertible to the single type','line_number':998,'multiline':False]['text':'      of a one-argument T's constructor.','line_number':999,'multiline':False]['text':'  (d*) Weak compilers (BCB) might also resolved Expr as optional<T> and optional<U>','line_number':1000,'multiline':False]['text':'       even though explicit overloads are present for these.','line_number':1001,'multiline':False]['text':' Depending on the above some T ctor is called.','line_number':1002,'multiline':False]['text':' Can throw if the resolved T ctor throws.','line_number':1003,'multiline':False]['text':' !defined BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':1017,'multiline':False]['text':' !defined BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT','line_number':1018,'multiline':False]['text':' Creates a deep copy of another optional<T>','line_number':1020,'multiline':False]['text':' Can throw if T::T(T const&) does','line_number':1021,'multiline':False]['text':' Creates a deep move of another optional<T>','line_number':1029,'multiline':False]['text':' Can throw if T::T(T&&) does','line_number':1030,'multiline':False]['text':'  On old MSVC compilers the implicitly declared dtor is not called','line_number':1044,'multiline':False]['text':' Assigns from an expression. See corresponding constructor.','line_number':1050,'multiline':False]['text':' Basic Guarantee: If the resolved T ctor throws, this is left UNINITIALIZED','line_number':1051,'multiline':False]['text':' !defined  BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':1069,'multiline':False]['text':' !defined(BOOST_OPTIONAL_NO_INPLACE_FACTORY_SUPPORT) && !defined(BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION)','line_number':1070,'multiline':False]['text':' Copy-assigns from another convertible optional<U> (converts && deep-copies the rhs value)','line_number':1072,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':1073,'multiline':False]['text':' Basic Guarantee: If T::T( U const& ) throws, this is left UNINITIALIZED','line_number':1074,'multiline':False]['text':' Move-assigns from another convertible optional<U> (converts && deep-moves the rhs value)','line_number':1083,'multiline':False]['text':' Requires a valid conversion from U to T.','line_number':1084,'multiline':False]['text':' Basic Guarantee: If T::T( U && ) throws, this is left UNINITIALIZED','line_number':1085,'multiline':False]['text':' Assigns from another optional<T> (deep-copies the rhs value)','line_number':1094,'multiline':False]['text':' Basic Guarantee: If T::T( T const& ) throws, this is left UNINITIALIZED','line_number':1095,'multiline':False]['text':'  (NOTE: On BCB, this operator is not actually called and left is left UNMODIFIED in case of a throw)','line_number':1096,'multiline':False]['text':' Assigns from another optional<T> (deep-moves the rhs value)','line_number':1108,'multiline':False]['text':' BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':1120,'multiline':False]['text':' Assigns from a T (deep-moves/copies the rhs value)','line_number':1124,'multiline':False]['text':' Assigns from a T (deep-copies the rhs value)','line_number':1135,'multiline':False]['text':' Basic Guarantee: If T::( T const& ) throws, this is left UNINITIALIZED','line_number':1136,'multiline':False]['text':' Assigns from a T (deep-moves the rhs value)','line_number':1144,'multiline':False]['text':' BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX','line_number':1152,'multiline':False]['text':' Assigns from a "none"','line_number':1154,'multiline':False]['text':' Which destroys the current value, if any, leaving this UNINITIALIZED','line_number':1155,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':1156,'multiline':False]['text':' Constructs in-place','line_number':1164,'multiline':False]['text':' upon exception *this is always uninitialized','line_number':1165,'multiline':False]['text':' allow for Koenig lookup','line_number':1261,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise,','line_number':1266,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':1267,'multiline':False]['text':' No-throw','line_number':1268,'multiline':False]['text':' Returns a copy of the value if this is initialized, 'v' otherwise','line_number':1272,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise,','line_number':1276,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':1277,'multiline':False]['text':' No-throw','line_number':1278,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise,','line_number':1282,'multiline':False]['text':' the behaviour is UNDEFINED','line_number':1283,'multiline':False]['text':' No-throw','line_number':1284,'multiline':False]['text':' !defined BOOST_NO_CXX11_REF_QUALIFIERS','line_number':1292,'multiline':False]['text':' namespace boost','line_number':1514,'multiline':False]['text':' BOOST_OPTIONAL_CONFIG_USE_OLD_IMPLEMENTATION_OF_OPTIONAL','line_number':1516,'multiline':False]['text':' namespace boost','line_number':1528,'multiline':False]['text':' Returns optional<T>(cond,v)','line_number':1545,'multiline':False]['text':' Returns optional<T>(v)','line_number':1555,'multiline':False]['text':' Returns optional<T>(cond,v)','line_number':1563,'multiline':False]['text':' BOOST_OPTIONAL_DETAIL_NO_RVALUE_REFERENCES','line_number':1571,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise, the behaviour is UNDEFINED.','line_number':1573,'multiline':False]['text':' No-throw','line_number':1574,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise, returns NULL.','line_number':1591,'multiline':False]['text':' No-throw','line_number':1592,'multiline':False]['text':' Returns a reference to the value if this is initialized, otherwise, the behaviour is UNDEFINED.','line_number':1609,'multiline':False]['text':' No-throw','line_number':1610,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise, returns NULL.','line_number':1627,'multiline':False]['text':' No-throw','line_number':1628,'multiline':False]['text':' namespace boost','line_number':1645,'multiline':False]['text':' The following declaration prevents a bug where operator safe-bool is used upon streaming optional object if you forget the IO header.','line_number':1650,'multiline':False]['text':' namespace boost','line_number':1659,'multiline':False]['text':' BOOST_NO_IOSTREAM','line_number':1660,'multiline':False]['text':' header guard','line_number':1665,'multiline':False]