['text':'  (C) Copyright John Maddock 2001 - 2003.','line_number':1,'multiline':False]['text':'  (C) Copyright David Abrahams 2002 - 2003.','line_number':2,'multiline':False]['text':'  (C) Copyright Aleksey Gurtovoy 2002.','line_number':3,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':4,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'  See http://www.boost.org for most recent version.','line_number':8,'multiline':False]['text':'  CodeGear C++ compiler setup:','line_number':10,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' versions check:','line_number':13,'multiline':False]['text':' last known and checked version is 0x740','line_number':14,'multiline':False]['text':' Clang enhanced Windows compiler','line_number':23,'multiline':False]['text':' This bug has been reported to Embarcadero','line_number':29,'multiline':False]['text':' The clang-based compilers can not do 128 atomic exchanges','line_number':38,'multiline':False]['text':' 32 functions are missing from the current RTL in cwchar, so it really can not be used even if it exists','line_number':42,'multiline':False]['text':' If compiling in single-threaded mode, assume there is no CXX11_HDR_ATOMIC ','line_number':46,'multiline':True]['text':' temporarily disable this until we can link against fegetround fesetround feholdexcept ','line_number':50,'multiline':True]['text':' Reported this bug to Embarcadero with the latest C++ Builder Rio release ','line_number':54,'multiline':True]['text':'','line_number':58,'multiline':False]['text':' check for exception handling support:','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':'

// On non-Win32 platforms let the platform config figure this out:
#ifdef _WIN32
#  define BOOST_HAS_STDINT_H
#endif

//
// __int64:
//
#if !defined(__STRICT_ANSI__)
#  define BOOST_HAS_MS_INT64
#endif
//
// all versions have a <dirent.h>:
//
#if !defined(__STRICT_ANSI__)
#  define BOOST_HAS_DIRENT_H
#endif
//
// Disable Win32 support in ANSI mode:
//
#  pragma defineonoption BOOST_DISABLE_WIN32 -A
//
// MSVC compatibility mode does some nasty things:
// TODO: look up if this doesn't apply to the whole 12xx range
//
#if defined(_MSC_VER) && (_MSC_VER <= 1200)
#  define BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP
#  define BOOST_NO_VOID_RETURNS
#endif
//

','line_number':65,'multiline':True]['text':' Specific settings for Embarcadero drivers','line_number':100,'multiline':False]['text':' Detecting which Embarcadero driver is being used','line_number':106,'multiline':False]['text':' defined(BOOST_ASSERT_CONFIG) ','line_number':134,'multiline':True]['text':' defined(BOOST_EMBTC) ','line_number':136,'multiline':True]['text':' #  define __CODEGEARC_CLANG__ __CODEGEARC__','line_number':152,'multiline':False]['text':' #  define __EMBARCADERO_CLANG__ __CODEGEARC__','line_number':153,'multiline':False]['text':' #  define __BORLANDC_CLANG__ __BORLANDC__','line_number':154,'multiline':False]['text':' #if !defined(__clang__)','line_number':156,'multiline':False]['text':' these warnings occur frequently in optimized template code','line_number':162,'multiline':False]['text':' var assigned value, but never used','line_number':163,'multiline':False]['text':' condition always true/false','line_number':164,'multiline':False]['text':' dead code can never execute','line_number':165,'multiline':False]['text':' static members with ctors not threadsafe','line_number':166,'multiline':False]['text':' reference member in class without ctors','line_number':167,'multiline':False]['text':' CodeGear C++ Builder 2009','line_number':170,'multiline':False]['text':' we shouldn't really need this - but too many things choke','line_number':176,'multiline':False]['text':' without it, this needs more investigation:','line_number':177,'multiline':False]['text':' CodeGear C++ Builder 2010','line_number':182,'multiline':False]['text':' Cannot use typename keyword when making temporaries of a dependant type','line_number':184,'multiline':False]['text':' TC1 gives nested classes access rights as any other member','line_number':187,'multiline':False]['text':' Temporary hack, until specific MPL preprocessed headers are generated','line_number':190,'multiline':False]['text':' CodeGear has not yet completely implemented value-initialization, for','line_number':193,'multiline':False]['text':' example for array types, as I reported in 2010: Embarcadero Report 83751,','line_number':194,'multiline':False]['text':' "Value-initialization: arrays should have each element value-initialized",','line_number':195,'multiline':False]['text':' http://qc.embarcadero.com/wc/qcmain.aspx?d=83751','line_number':196,'multiline':False]['text':' Last checked version: Embarcadero C++ 6.21','line_number':197,'multiline':False]['text':' See also: http://www.boost.org/libs/utility/value_init.htm#compiler_issues','line_number':198,'multiline':False]['text':' (Niels Dekker, LKEB, April 2010)','line_number':199,'multiline':False]['text':' fix broken <cstring> so that Boost.test works:','line_number':203,'multiline':False]['text':' fix broken errno declaration:','line_number':207,'multiline':False]['text':' Reportedly, #pragma once is supported since C++ Builder 2010','line_number':215,'multiline':False]['text':'','line_number':222,'multiline':False]['text':' C++0x macros:','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' #define BOOST_HAS_ALIGNOF','line_number':233,'multiline':False]['text':' #define BOOST_HAS_RVALUE_REFS','line_number':236,'multiline':False]['text':' #define BOOST_HAS_STATIC_ASSERT','line_number':238,'multiline':False]['text':' C++ 14:','line_number':272,'multiline':False]['text':' There's no SD6 check for this....','line_number':285,'multiline':False]['text':' C++17','line_number':301,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' TR1 macros:','line_number':319,'multiline':False]['text':'','line_number':320,'multiline':False]['text':' On non-Win32 platforms let the platform config figure this out:','line_number':330,'multiline':False]['text':'','line_number':335,'multiline':False]['text':' __int64:','line_number':336,'multiline':False]['text':'','line_number':337,'multiline':False]['text':'','line_number':341,'multiline':False]['text':' check for exception handling support:','line_number':342,'multiline':False]['text':'','line_number':343,'multiline':False]['text':'','line_number':347,'multiline':False]['text':' all versions have a <dirent.h>:','line_number':348,'multiline':False]['text':'','line_number':349,'multiline':False]['text':'','line_number':353,'multiline':False]['text':' all versions support __declspec:','line_number':354,'multiline':False]['text':'','line_number':355,'multiline':False]['text':' config/platform/win32.hpp will define BOOST_SYMBOL_EXPORT, etc., unless already defined','line_number':357,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' ABI fixing headers:','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':'','line_number':369,'multiline':False]['text':' Disable Win32 support in ANSI mode:','line_number':370,'multiline':False]['text':'','line_number':371,'multiline':False]['text':'','line_number':373,'multiline':False]['text':' MSVC compatibility mode does some nasty things:','line_number':374,'multiline':False]['text':' TODO: look up if this doesn't apply to the whole 12xx range','line_number':375,'multiline':False]['text':'','line_number':376,'multiline':False]['text':' #if !defined(__clang__)','line_number':384,'multiline':False]