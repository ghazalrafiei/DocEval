['text':'=============================================================================
    Copyright (c) 2001-2019 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser
    http://spirit.sourceforge.net/

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':' 'p': unreferenced formal parameter','line_number':29,'multiline':False]['text':' conditional expression is constant','line_number':30,'multiline':False]['text':' at the lowest extremes, we compensate for floating point','line_number':42,'multiline':False]['text':' roundoff errors by doing imprecise computation using T','line_number':43,'multiline':False]['text':' no need to compensate','line_number':52,'multiline':False]['text':' return false if exp exceeds the max_exp','line_number':71,'multiline':False]['text':' do this check only for primitive types!','line_number':72,'multiline':False]['text':' return false if exp still exceeds the min_exp','line_number':85,'multiline':False]['text':' do this check only for primitive types!','line_number':86,'multiline':False]['text':'exp','line_number':102,'multiline':True]['text':'n','line_number':102,'multiline':True]['text':'acc_n','line_number':102,'multiline':True]['text':' no-op for unused_type','line_number':104,'multiline':False]['text':'exp','line_number':116,'multiline':True]['text':'frac','line_number':116,'multiline':True]['text':'n','line_number':116,'multiline':True]['text':' no-op for unused_type','line_number':118,'multiline':False]['text':'neg','line_number':148,'multiline':True]['text':' no-op for unused_type','line_number':150,'multiline':False]['text':' first ','line_number':175,'multiline':True]['text':' last ','line_number':175,'multiline':True]['text':' Start by parsing the sign. neg will be true if','line_number':204,'multiline':False]['text':' we got a "-" sign, false otherwise.','line_number':205,'multiline':False]['text':' Now attempt to parse an integer','line_number':208,'multiline':False]['text':' If we did not get a number it might be a NaN, Inf or a leading','line_number':215,'multiline':False]['text':' dot.','line_number':216,'multiline':False]['text':' Check whether the number to parse is a NaN or Inf','line_number':219,'multiline':False]['text':' If we got a negative sign, negate the number','line_number':223,'multiline':False]['text':' got a NaN or Inf, return early','line_number':225,'multiline':False]['text':' If we did not get a number and our policies do not','line_number':228,'multiline':False]['text':' allow a leading dot, fail and return early (no-match)','line_number':229,'multiline':False]['text':' We got a number and we still see digits. This happens if acc_n (an integer)','line_number':238,'multiline':False]['text':' exceeds the integer's capacity. Collect the excess digits.','line_number':239,'multiline':False]['text':' Try to parse the dot ('.' decimal point)','line_number':247,'multiline':False]['text':' We got the decimal point. Now we will try to parse','line_number':250,'multiline':False]['text':' the fraction if it is there. If not, it defaults','line_number':251,'multiline':False]['text':' to zero (0) only if we already got a number.','line_number':252,'multiline':False]['text':' We skip the fractions if we already exceeded our digits capacity','line_number':255,'multiline':False]['text':' We did not get a fraction. If we still haven't got a','line_number':264,'multiline':False]['text':' number and our policies do not allow a trailing dot,','line_number':265,'multiline':False]['text':' return no-match.','line_number':266,'multiline':False]['text':' Now, let's see if we can parse the exponent prefix','line_number':271,'multiline':False]['text':' No dot and no number! Return no-match.','line_number':277,'multiline':False]['text':' If we must expect a dot and we didn't see an exponent','line_number':284,'multiline':False]['text':' prefix, return no-match.','line_number':285,'multiline':False]['text':' We got the exponent prefix. Now we will try to parse the','line_number':297,'multiline':False]['text':' actual exponent.','line_number':298,'multiline':False]['text':' Got the exponent value. Scale the number by','line_number':302,'multiline':False]['text':' exp + excess_n - frac_digits.','line_number':303,'multiline':False]['text':' If there is no number, disregard the exponent altogether.','line_number':309,'multiline':False]['text':' by resetting 'first' prior to the exponent prefix (e|E)','line_number':310,'multiline':False]['text':' Scale the number by -frac_digits.','line_number':312,'multiline':False]['text':' No exponent found. Scale the number by -frac_digits.','line_number':319,'multiline':False]['text':' If we got a negative sign, negate the number','line_number':336,'multiline':False]['text':' Success!!!','line_number':339,'multiline':False]