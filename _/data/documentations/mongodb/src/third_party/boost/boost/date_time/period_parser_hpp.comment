['text':' Copyright (c) 2002-2004 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':5,'multiline':True]['text':'! Not a facet, but a class used to specify and control period parsing','line_number':26,'multiline':False]['text':'! Provides settings for the following:
   *   - period_separator -- default '/'
   *   - period_open_start_delimeter -- default '['
   *   - period_open_range_end_delimeter -- default ')'
   *   - period_closed_range_end_delimeter -- default ']'
   *   - display_as_open_range, display_as_closed_range -- default closed_range
   *
   *  For a typical date_period, the contents of the input stream would be
   *@code
   *  [2004-Jan-04/2004-Feb-01]
   *@endcode
   * where the date format is controlled by the date facet
   ','line_number':27,'multiline':True]['text':'typedef typename std::basic_string<char_type>::const_iterator const_itr_type;','line_number':45,'multiline':False]['text':'! Constructor that sets up period parser options','line_number':58,'multiline':False]['text':'! Generic code to parse a period -- no matter the period type.','line_number':96,'multiline':False]['text':'! This generic code will parse any period using a facet to
     *  to get the 'elements'.  For example, in the case of a date_period
     *  the elements will be instances of a date which will be parsed
     *  according the to setup in the passed facet parameter.
     *
     *  The steps for parsing a period are always the same:
     *  - consume the start delimiter
     *  - get start element
     *  - consume the separator
     *  - get either last or end element depending on range settings
     *  - consume the end delimeter depending on range settings
     *
     *  Thus for a typical date period the contents of the input stream
     *  might look like this:
     *@code
     *
     *    [March 01, 2004/June 07, 2004]   <-- closed range
     *    [March 01, 2004/June 08, 2004)   <-- open range
     *
     *@endcode
     ','line_number':97,'multiline':True]['text':' p ','line_number':122,'multiline':True]['text':' skip leading whitespace','line_number':126,'multiline':False]['text':' start delim','line_number':133,'multiline':False]['text':' first point','line_number':134,'multiline':False]['text':' separator','line_number':135,'multiline':False]['text':' second point','line_number':136,'multiline':False]['text':' period construction parameters are always open range [begin, end)','line_number':138,'multiline':False]['text':' end delim','line_number':140,'multiline':False]['text':' add 1 duration unit to p2 to make range open','line_number':141,'multiline':False]['text':' end delim','line_number':145,'multiline':False]['text':'! throws ios_base::failure if delimiter and parsed data do not match','line_number':157,'multiline':False]['text':' string_parse_tree will not parse a string of punctuation characters
       * without knowing exactly how many characters to process
       * Ex [2000. Will not parse out the '[' string without knowing
       * to process only one character. By using length of the delimiter
       * string we can safely iterate past it. ','line_number':162,'multiline':True]['text':'namespace boost::date_time','line_number':195,'multiline':False]['text':' DATETIME_PERIOD_PARSER_HPP___','line_number':197,'multiline':False]