['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   console.hpp
 * \author Andrey Semashev
 * \date   16.05.2008
 *
 * The header contains implementation of convenience functions for enabling logging to console.
 ','line_number':7,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':47,'multiline':False]['text':' The function creates and initializes the sink','line_number':55,'multiline':False]['text':' BOOST_LOG_USE_CHAR','line_number':93,'multiline':False]['text':' BOOST_LOG_USE_WCHAR_T','line_number':101,'multiline':False]['text':' namespace aux','line_number':103,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':169,'multiline':False]['text':'!
 * The function constructs sink for the specified console stream and adds it to the core
 *
 * \param strm One of the standard console streams: <tt>std::cout</tt>, <tt>std::cerr</tt> or <tt>std::clog</tt>
 *             (or the corresponding wide-character analogues).
 * \param args Optional additional named arguments for the sink initialization. The following arguments are supported:
 *             \li \c filter Specifies a filter to install into the sink. May be a string that represents a filter,
 *                           or a filter lambda expression.
 *             \li \c format Specifies a formatter to install into the sink. May be a string that represents a formatter,
 *                           or a formatter lambda expression (either streaming or Boost.Format-like notation).
 *             \li \c auto_flush A boolean flag that shows whether the sink should automatically flush the stream
 *                               after each written record.
 *             \li \c auto_newline_mode - Specifies automatic trailing newline insertion mode. Must be a value of
 *                                        the \c auto_newline_mode enum. By default, is <tt>auto_newline_mode::insert_if_missing</tt>.
 * \return Pointer to the constructed sink.
 ','line_number':171,'multiline':True]['text':'!
 * Equivalent to: <tt>add_console_log(std::clog);</tt> or <tt>add_console_log(std::wclog);</tt>,
 * depending on the \c CharT type.
 *
 * \overload
 ','line_number':194,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':207,'multiline':False]['text':'!
 * The function constructs sink for the <tt>std::clog</tt> stream and adds it to the core
 *
 * \overload
 *
 * \return Pointer to the constructed sink.
 ','line_number':211,'multiline':True]['text':' BOOST_LOG_USE_CHAR','line_number':227,'multiline':False]['text':'!
 * The function constructs sink for the <tt>std::wclog</tt> stream and adds it to the core
 *
 * \return Pointer to the constructed sink.
 ','line_number':231,'multiline':True]['text':' BOOST_LOG_USE_WCHAR_T','line_number':245,'multiline':False]['text':' namespace log','line_number':247,'multiline':False]['text':' namespace boost','line_number':249,'multiline':False]['text':' BOOST_LOG_UTILITY_SETUP_CONSOLE_HPP_INCLUDED_','line_number':255,'multiline':False]