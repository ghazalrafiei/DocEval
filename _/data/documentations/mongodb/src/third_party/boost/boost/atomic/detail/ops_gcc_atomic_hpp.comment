['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/ops_gcc_atomic.hpp
 *
 * This header contains implementation of the \c operations template.
 ','line_number':8,'multiline':True]['text':' There are platforms where we need to use larger storage types','line_number':32,'multiline':False]['text':' This is used to suppress warning #32013 described below for Intel Compiler.','line_number':42,'multiline':False]['text':' In debug builds the compiler does not inline any functions, so basically','line_number':43,'multiline':False]['text':' every atomic function call results in this warning. I don't know any other','line_number':44,'multiline':False]['text':' way to selectively disable just this one warning.','line_number':45,'multiline':False]['text':'!
 * The function converts \c boost::memory_order values to the compiler-specific constants.
 *
 * NOTE: The intention is that the function is optimized away by the compiler, and the
 *       compiler-specific constants are passed to the intrinsics. Unfortunately, constexpr doesn't
 *       work in this case because the standard atomics interface require memory ordering
 *       constants to be passed as function arguments, at which point they stop being constexpr.
 *       However, it is crucial that the compiler sees constants and not runtime values,
 *       because otherwise it just ignores the ordering value and always uses seq_cst.
 *       This is the case with Intel C++ Compiler 14.0.3 (Composer XE 2013 SP1, update 3) and
 *       gcc 4.8.2. Intel Compiler issues a warning in this case:
 *
 *       warning #32013: Invalid memory order specified. Defaulting to seq_cst memory order.
 *
 *       while gcc acts silently.
 *
 *       To mitigate the problem ALL functions, including the atomic<> members must be
 *       declared with BOOST_FORCEINLINE. In this case the compilers are able to see that
 *       all functions are called with constant orderings and call intrinstcts properly.
 *
 *       Unfortunately, this still doesn't work in debug mode as the compiler doesn't
 *       propagate constants even when functions are marked with BOOST_FORCEINLINE. In this case
 *       all atomic operaions will be executed with seq_cst semantics.
 ','line_number':53,'multiline':True]['text':' Note: In the current implementation, gcc_atomic_operations are used only when the particularly sized __atomic','line_number':94,'multiline':False]['text':' intrinsics are always lock-free (i.e. the corresponding LOCK_FREE macro is 2). Therefore it is safe to','line_number':95,'multiline':False]['text':' always set is_always_lock_free to true here.','line_number':96,'multiline':False]['text':' Workaround for clang bug: http://llvm.org/bugs/show_bug.cgi?id=19149','line_number':175,'multiline':False]['text':' Clang 3.4 does not implement 128-bit __atomic* intrinsics even though it defines __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16','line_number':176,'multiline':False]['text':' A similar problem exists with gcc 7 as well, as it requires to link with libatomic to use 16-byte intrinsics:','line_number':177,'multiline':False]['text':' https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80878','line_number':178,'multiline':False]['text':' Workaround for clang bug http://llvm.org/bugs/show_bug.cgi?id=19355','line_number':202,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_INT64_EXTENDED)','line_number':253,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_INT64_EXTENDED)','line_number':261,'multiline':False]['text':' namespace detail','line_number':388,'multiline':False]['text':' namespace atomics','line_number':389,'multiline':False]['text':' namespace boost','line_number':390,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_OPS_GCC_ATOMIC_HPP_INCLUDED_','line_number':392,'multiline':False]