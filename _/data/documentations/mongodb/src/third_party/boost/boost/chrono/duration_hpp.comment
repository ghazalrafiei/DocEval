['text':'  duration.hpp  --------------------------------------------------------------//','line_number':1,'multiline':False]['text':'  Copyright 2008 Howard Hinnant','line_number':3,'multiline':False]['text':'  Copyright 2008 Beman Dawes','line_number':4,'multiline':False]['text':'  Copyright 2009-2011 Vicente J. Botet Escriba','line_number':5,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':7,'multiline':False]['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':8,'multiline':False]['text':'

This code was derived by Beman Dawes from Howard Hinnant's time2_demo prototype.
Many thanks to Howard for making his code available under the Boost license.
The original code was modified to conform to Boost conventions and to section
20.9 Time utilities [time] of the C++ committee's working paper N2798.
See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2798.pdf.

time2_demo contained this comment:

    Much thanks to Andrei Alexandrescu,
                   Walter Brown,
                   Peter Dimov,
                   Jeff Garland,
                   Terry Golubiewski,
                   Daniel Krugler,
                   Anthony Williams.
','line_number':10,'multiline':True]['text':' this must occur after all of the includes and before any code appears:','line_number':62,'multiline':False]['text':' must be the last #include','line_number':63,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':66,'multiline':False]['text':'                                                                            //','line_number':67,'multiline':False]['text':'                        20.9 Time utilities [time]                          //','line_number':68,'multiline':False]['text':'                                 synopsis                                   //','line_number':69,'multiline':False]['text':'                                                                            //','line_number':70,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':71,'multiline':False]['text':'/','line_number':118,'multiline':False]['text':'typedef typename common_type<Rep1, Rep2>::type type;','line_number':139,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'boost::is_convertible<typename Duration::rep,','line_number':157,'multiline':False]['text':'typename common_type<typename Duration::rep, Rep2>::type>::value','line_number':158,'multiline':False]['text':'&&','line_number':159,'multiline':False]['text':' namespace detail','line_number':180,'multiline':False]['text':' namespace chrono','line_number':181,'multiline':False]['text':' common_type trait specializations','line_number':184,'multiline':False]['text':' customization traits','line_number':193,'multiline':False]['text':' convenience typedefs','line_number':197,'multiline':False]['text':' at least 64 bits needed','line_number':198,'multiline':False]['text':' at least 55 bits needed','line_number':199,'multiline':False]['text':' at least 45 bits needed','line_number':200,'multiline':False]['text':' at least 35 bits needed','line_number':201,'multiline':False]['text':' at least 29 bits needed','line_number':202,'multiline':False]['text':' at least 23 bits needed','line_number':203,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':205,'multiline':False]['text':'                          duration helpers                                  //','line_number':206,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':207,'multiline':False]['text':' duration_cast','line_number':212,'multiline':False]['text':' duration_cast is the heart of this whole prototype.  It can convert any','line_number':214,'multiline':False]['text':'   duration to any other.  It is also (implicitly) used in converting','line_number':215,'multiline':False]['text':'   time_points.  The conversion is always exact if possible.  And it is','line_number':216,'multiline':False]['text':'   always as efficient as hand written code.  If different representations','line_number':217,'multiline':False]['text':'   are involved, care is taken to never require implicit conversions.','line_number':218,'multiline':False]['text':'   Instead static_cast is used explicitly for every required conversion.','line_number':219,'multiline':False]['text':'   If there are a mixture of integral and floating point representations,','line_number':220,'multiline':False]['text':'   the use of common_type ensures that the most logical "intermediate"','line_number':221,'multiline':False]['text':'   representation is used.','line_number':222,'multiline':False]['text':' When the two periods are the same, all that is left to do is static_cast from','line_number':229,'multiline':False]['text':'   the source representation to the target representation (which may be a no-op).','line_number':230,'multiline':False]['text':'   This conversion is always exact as long as the static_cast from the source','line_number':231,'multiline':False]['text':'   representation to the destination representation is exact.','line_number':232,'multiline':False]['text':' When the numerator of FromPeriod / ToPeriod is 1, then all we need to do is','line_number':242,'multiline':False]['text':'   divide by the denominator of FromPeriod / ToPeriod.  The common_type of','line_number':243,'multiline':False]['text':'   the two representations is used for the intermediate computation before','line_number':244,'multiline':False]['text':'   static_cast'ing to the destination.','line_number':245,'multiline':False]['text':'   This conversion is generally not exact because of the division (but could be','line_number':246,'multiline':False]['text':'   if you get lucky on the run time value of fd.count()).','line_number':247,'multiline':False]['text':' When the denominator of FromPeriod / ToPeriod is 1, then all we need to do is','line_number':262,'multiline':False]['text':'   multiply by the numerator of FromPeriod / ToPeriod.  The common_type of','line_number':263,'multiline':False]['text':'   the two representations is used for the intermediate computation before','line_number':264,'multiline':False]['text':'   static_cast'ing to the destination.','line_number':265,'multiline':False]['text':'   This conversion is always exact as long as the static_cast's involved are exact.','line_number':266,'multiline':False]['text':' When neither the numerator or denominator of FromPeriod / ToPeriod is 1, then we need to','line_number':281,'multiline':False]['text':'   multiply by the numerator and divide by the denominator of FromPeriod / ToPeriod.  The','line_number':282,'multiline':False]['text':'   common_type of the two representations is used for the intermediate computation before','line_number':283,'multiline':False]['text':'   static_cast'ing to the destination.','line_number':284,'multiline':False]['text':'   This conversion is generally not exact because of the division (but could be','line_number':285,'multiline':False]['text':'   if you get lucky on the run time value of fd.count()).','line_number':286,'multiline':False]['text':' namespace detail','line_number':319,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':321,'multiline':False]['text':'                                                                            //','line_number':322,'multiline':False]['text':'      20.9.2 Time-related traits [time.traits]                              //','line_number':323,'multiline':False]['text':'                                                                            //','line_number':324,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':325,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':326,'multiline':False]['text':'      20.9.2.1 treat_as_floating_point [time.traits.is_fp]                        //','line_number':327,'multiline':False]['text':'      Probably should have been treat_as_floating_point. Editor notifed.    //','line_number':328,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':329,'multiline':False]['text':' Support bidirectional (non-exact) conversions for floating point rep types','line_number':331,'multiline':False]['text':'   (or user defined rep types which specialize treat_as_floating_point).','line_number':332,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':336,'multiline':False]['text':'      20.9.2.2 duration_values [time.traits.duration_values]                //','line_number':337,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':338,'multiline':False]['text':' namespace chrono','line_number':395,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':397,'multiline':False]['text':'      20.9.2.3 Specializations of common_type [time.traits.specializations] //','line_number':398,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':399,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':410,'multiline':False]['text':'                                                                            //','line_number':411,'multiline':False]['text':'         20.9.3 Class template duration [time.duration]                     //','line_number':412,'multiline':False]['text':'                                                                            //','line_number':413,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':414,'multiline':False]['text':'BOOST_CHRONO_STATIC_ASSERT(boost::is_integral<Rep>::value, BOOST_CHRONO_A_DURATION_REPRESENTATION_MUST_BE_INTEGRAL, ());','line_number':422,'multiline':False]['text':' conversions','line_number':469,'multiline':False]['text':' observer','line_number':485,'multiline':False]['text':' arithmetic','line_number':490,'multiline':False]['text':' 20.9.3.4 duration special values [time.duration.special]','line_number':517,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':533,'multiline':False]['text':'      20.9.3.5 duration non-member arithmetic [time.duration.nonmember]     //','line_number':534,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':535,'multiline':False]['text':' Duration +','line_number':537,'multiline':False]['text':' Duration -','line_number':550,'multiline':False]['text':' Duration *','line_number':563,'multiline':False]['text':' Duration /','line_number':595,'multiline':False]['text':' Duration %','line_number':634,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':661,'multiline':False]['text':'      20.9.3.6 duration comparisons [time.duration.comparisons]             //','line_number':662,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':663,'multiline':False]['text':' namespace detail','line_number':705,'multiline':False]['text':' Duration ==','line_number':707,'multiline':False]['text':' Duration !=','line_number':719,'multiline':False]['text':' Duration <','line_number':730,'multiline':False]['text':' Duration >','line_number':742,'multiline':False]['text':' Duration <=','line_number':753,'multiline':False]['text':' Duration >=','line_number':764,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':775,'multiline':False]['text':'      20.9.3.7 duration_cast [time.duration.cast]                           //','line_number':776,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':777,'multiline':False]['text':' Compile-time select the most efficient algorithm for the conversion...','line_number':779,'multiline':False]['text':' namespace chrono','line_number':790,'multiline':False]['text':' namespace boost','line_number':791,'multiline':False]['text':' the suffix header occurs after all of our code:','line_number':794,'multiline':False]['text':' pops abi_prefix.hpp pragmas','line_number':795,'multiline':False]['text':' BOOST_CHRONO_DURATION_HPP','line_number':798,'multiline':False]