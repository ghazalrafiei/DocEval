['text':'
 *
 * Copyright (c) 2004
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         icu.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Unicode regular expressions on top of the ICU Library.
  ','line_number':12,'multiline':True]['text':' ','line_number':41,'multiline':False]['text':' Implementation details:','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' The ICU locale that we're using','line_number':85,'multiline':False]['text':' The full collation object','line_number':86,'multiline':False]['text':' The primary collation object','line_number':87,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' define the bitmasks offsets we need for additional character properties:','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':'','line_number':198,'multiline':False]['text':' and now the masks:','line_number':199,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' namespace boost','line_number':216,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' template instances:','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' types:','line_number':238,'multiline':False]['text':'','line_number':243,'multiline':False]['text':' Construction of 32-bit regex types from UTF-8 and UTF-16 primitives:','line_number':244,'multiline':False]['text':'','line_number':245,'multiline':False]['text':' BOOST_REGEX_UCHAR_IS_WCHAR_T','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' Source inspection of unicode/umachine.h in ICU version 59 indicates that:','line_number':340,'multiline':False]['text':'','line_number':341,'multiline':False]['text':' On version 59, UChar is always char16_t in C++ mode (and uint16_t in C mode)','line_number':342,'multiline':False]['text':'','line_number':343,'multiline':False]['text':' On earlier versions, the logic is','line_number':344,'multiline':False]['text':'','line_number':345,'multiline':False]['text':' #if U_SIZEOF_WCHAR_T==2','line_number':346,'multiline':False]['text':'   typedef wchar_t OldUChar;','line_number':347,'multiline':False]['text':' #elif defined(__CHAR16_TYPE__)','line_number':348,'multiline':False]['text':'   typedef __CHAR16_TYPE__ OldUChar;','line_number':349,'multiline':False]['text':' #else','line_number':350,'multiline':False]['text':'   typedef uint16_t OldUChar;','line_number':351,'multiline':False]['text':' #endif','line_number':352,'multiline':False]['text':'','line_number':353,'multiline':False]['text':' That is, UChar is wchar_t only on versions below 59, when U_SIZEOF_WCHAR_T==2','line_number':354,'multiline':False]['text':'','line_number':355,'multiline':False]['text':' Hence,','line_number':356,'multiline':False]['text':'','line_number':366,'multiline':False]['text':' Construction from an iterator pair:','line_number':367,'multiline':False]['text':'','line_number':368,'multiline':False]['text':'','line_number':376,'multiline':False]['text':' construction from UTF-8 nul-terminated strings:','line_number':377,'multiline':False]['text':'','line_number':378,'multiline':False]['text':'','line_number':387,'multiline':False]['text':' construction from UTF-16 nul-terminated strings:','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':'','line_number':402,'multiline':False]['text':' construction from basic_string class-template:','line_number':403,'multiline':False]['text':'','line_number':404,'multiline':False]['text':'','line_number':410,'multiline':False]['text':' Construction from ICU string type:','line_number':411,'multiline':False]['text':'','line_number':412,'multiline':False]['text':'','line_number':418,'multiline':False]['text':' regex_match overloads that widen the character type as appropriate:','line_number':419,'multiline':False]['text':'','line_number':420,'multiline':False]['text':' copy results from an adapted MR2 match_results:','line_number':425,'multiline':False]['text':' Copy full capture info as well:','line_number':438,'multiline':False]['text':'typedef typename match_type::allocator_type        alloc_type;','line_number':473,'multiline':False]['text':' copy results across to m:','line_number':476,'multiline':False]['text':'typedef typename match_type::allocator_type        alloc_type;','line_number':489,'multiline':False]['text':' copy results across to m:','line_number':492,'multiline':False]['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':496,'multiline':False]['text':'','line_number':559,'multiline':False]['text':' regex_match overloads that do not return what matched:','line_number':560,'multiline':False]['text':'','line_number':561,'multiline':False]['text':'','line_number':624,'multiline':False]['text':' regex_search overloads that widen the character type as appropriate:','line_number':625,'multiline':False]['text':'','line_number':626,'multiline':False]['text':'typedef typename match_type::allocator_type        alloc_type;','line_number':648,'multiline':False]['text':' copy results across to m:','line_number':651,'multiline':False]['text':'typedef typename match_type::allocator_type        alloc_type;','line_number':665,'multiline':False]['text':' copy results across to m:','line_number':668,'multiline':False]['text':'','line_number':806,'multiline':False]['text':' overloads for regex_replace with utf-8 and utf-16 data types:','line_number':807,'multiline':False]['text':'','line_number':808,'multiline':False]['text':' unfortunately we have to copy the format string in order to pass in onward:','line_number':872,'multiline':False]['text':' BOOST_REGEX_DETAIL_NS','line_number':926,'multiline':False]['text':' namespace boost.','line_number':1060,'multiline':False]