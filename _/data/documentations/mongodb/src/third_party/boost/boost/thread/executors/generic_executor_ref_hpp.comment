['text':' Copyright (C) 2014 Vicente J. Botet Escriba','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'/ type-erasure to store the works to do','line_number':31,'multiline':False]['text':'/ executor is not copyable.','line_number':34,'multiline':False]['text':'*
     * \par Effects
     * Destroys the executor.
     *
     * \par Synchronization
     * The completion of all the closures happen before the completion of the executor destructor.
     ','line_number':38,'multiline':True]['text':'*
     * \par Effects
     * Close the \c executor for submissions.
     * The worker threads will work until there is no more closures to run.
     ','line_number':47,'multiline':True]['text':'*
     * \par Returns
     * Whether the pool is closed for submissions.
     ','line_number':54,'multiline':True]['text':'*
     * \par Effects
     * The specified closure will be scheduled for execution at some point in the future.
     * If invoked closure throws an exception the executor will call std::terminate, as is the case with threads.
     *
     * \par Synchronization
     * Ccompletion of closure on a particular thread happens before destruction of thread's thread local variables.
     *
     * \par Throws
     * \c sync_queue_is_closed if the thread pool is closed.
     * Whatever exception that can be throw while storing the closure.
     ','line_number':60,'multiline':True]['text':'    void submit(work& closure) {','line_number':75,'multiline':False]['text':'      ex.submit(closure);','line_number':76,'multiline':False]['text':'    }','line_number':77,'multiline':False]['text':'*
     * \par Effects
     * Try to execute one task.
     *
     * \par Returns
     * Whether a task has been executed.
     *
     * \par Throws
     * Whatever the current task constructor throws or the task() throws.
     ','line_number':80,'multiline':True]['text':'/ type-erasure to store the works to do','line_number':98,'multiline':False]['text':': ex(make_shared<executor_ref<Executor> >(ex_)) // todo check why this doesn't works with C++03','line_number':103,'multiline':False]['text':'generic_executor_ref(generic_executor_ref const& other) noexcept    {}','line_number':108,'multiline':False]['text':'generic_executor_ref& operator=(generic_executor_ref const& other) noexcept    {}','line_number':109,'multiline':False]['text':'*
     * \par Effects
     * Close the \c executor for submissions.
     * The worker threads will work until there is no more closures to run.
     ','line_number':112,'multiline':True]['text':'*
     * \par Returns
     * Whether the pool is closed for submissions.
     ','line_number':119,'multiline':True]['text':'*
     * \par Requires
     * \c Closure is a model of Callable(void()) and a model of CopyConstructible/MoveConstructible.
     *
     * \par Effects
     * The specified closure will be scheduled for execution at some point in the future.
     * If invoked closure throws an exception the thread pool will call std::terminate, as is the case with threads.
     *
     * \par Synchronization
     * Completion of closure on a particular thread happens before destruction of thread's thread local variables.
     *
     * \par Throws
     * \c sync_queue_is_closed if the thread pool is closed.
     * Whatever exception that can be throw while storing the closure.
     ','line_number':125,'multiline':True]['text':'work w ((closure));','line_number':150,'multiline':False]['text':'submit(boost::move(w));','line_number':151,'multiline':False]['text':'submit(work(closure));','line_number':159,'multiline':False]['text':'    size_t num_pending_closures() const','line_number':169,'multiline':False]['text':'    {','line_number':170,'multiline':False]['text':'      return ex->num_pending_closures();','line_number':171,'multiline':False]['text':'    }','line_number':172,'multiline':False]['text':'*
     * \par Effects
     * Try to execute one task.
     *
     * \par Returns
     * Whether a task has been executed.
     *
     * \par Throws
     * Whatever the current task constructor throws or the task() throws.
     ','line_number':174,'multiline':True]['text':'*
     * \par Requires
     * This must be called from an scheduled task.
     *
     * \par Effects
     * reschedule functions until pred()
     ','line_number':186,'multiline':True]['text':'schedule_one_or_yield();','line_number':197,'multiline':False]