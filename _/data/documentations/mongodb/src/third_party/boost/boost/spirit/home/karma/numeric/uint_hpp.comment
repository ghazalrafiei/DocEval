['text':'  Copyright (c) 2001-2011 Hartmut Kaiser','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////','line_number':51,'multiline':False]['text':' This one is the class that the user can instantiate directly in','line_number':52,'multiline':False]['text':' order to create a customized int generator','line_number':53,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':60,'multiline':False]['text':' Enablers','line_number':61,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':62,'multiline':False]['text':' enables ushort_','line_number':64,'multiline':False]['text':' enables uint_','line_number':68,'multiline':False]['text':' enables ulong_','line_number':72,'multiline':False]['text':' enables bin','line_number':76,'multiline':False]['text':' enables oct','line_number':80,'multiline':False]['text':' enables hex','line_number':84,'multiline':False]['text':' enables ulong_long','line_number':89,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':93,'multiline':False]['text':' enables lit(unsigned short(0))','line_number':95,'multiline':False]['text':' enables lit(0U)','line_number':100,'multiline':False]['text':' enables lit(0UL)','line_number':104,'multiline':False]['text':' enables lit(0ULL)','line_number':109,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':114,'multiline':False]['text':' enables ushort_(...)','line_number':116,'multiline':False]['text':' enables uint_(...)','line_number':121,'multiline':False]['text':' enables ulong_(...)','line_number':126,'multiline':False]['text':' enables bin(...)','line_number':131,'multiline':False]['text':' enables oct(...)','line_number':136,'multiline':False]['text':' enables hex(...)','line_number':141,'multiline':False]['text':' enables ulong_long(...)','line_number':147,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':152,'multiline':False]['text':' enables *lazy* ushort_(...)','line_number':153,'multiline':False]['text':' enables *lazy* uint_(...)','line_number':157,'multiline':False]['text':' enables *lazy* ulong_(...)','line_number':161,'multiline':False]['text':' enables *lazy* bin(...)','line_number':165,'multiline':False]['text':' enables *lazy* oct(...)','line_number':169,'multiline':False]['text':' enables *lazy* hex(...)','line_number':173,'multiline':False]['text':' enables *lazy* ulong_long(...)','line_number':178,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':183,'multiline':False]['text':' enables any custom uint_generator','line_number':184,'multiline':False]['text':' enables any custom uint_generator(...)','line_number':189,'multiline':False]['text':' enables *lazy* custom uint_generator','line_number':195,'multiline':False]['text':' arity','line_number':200,'multiline':False]['text':' enables lit(uint)','line_number':203,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':211,'multiline':False]['text':' lit(1U) is equivalent to 1U','line_number':225,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':240,'multiline':False]['text':'  This specialization is used for unsigned int generators not having a','line_number':241,'multiline':False]['text':'  direct initializer: uint_, ulong_ etc. These generators must be used in','line_number':242,'multiline':False]['text':'  conjunction with an Attribute.','line_number':243,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':244,'multiline':False]['text':' check template Attribute 'Radix' for validity','line_number':255,'multiline':False]['text':' the following is a workaround for STLPort, where the simpler','line_number':260,'multiline':False]['text':' `!std::numeric_limits<T>::is_signed` wouldn't compile','line_number':261,'multiline':False]['text':' int has a Attribute attached','line_number':265,'multiline':False]['text':' fail if it's an uninitialized optional','line_number':273,'multiline':False]['text':' always do post-delimiting','line_number':277,'multiline':False]['text':' this int has no Attribute attached, it needs to have been','line_number':280,'multiline':False]['text':' initialized from a direct literal','line_number':281,'multiline':False]['text':' It is not possible (doesn't make sense) to use numeric generators','line_number':286,'multiline':False]['text':' without providing any attribute, as the generator doesn't 'know'','line_number':287,'multiline':False]['text':' what to output. The following assertion fires if this situation','line_number':288,'multiline':False]['text':' is detected in your code.','line_number':289,'multiline':False]['text':'context','line_number':295,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////','line_number':301,'multiline':False]['text':'  This specialization is used for unsigned int generators having a direct','line_number':302,'multiline':False]['text':'  initializer: uint_(10), ulong_(20) etc.','line_number':303,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':304,'multiline':False]['text':' check template Attribute 'Radix' for validity','line_number':320,'multiline':False]['text':' the following is a workaround for STLPort, where the simpler','line_number':325,'multiline':False]['text':' `!std::numeric_limits<T>::is_signed wouldn't` compile','line_number':326,'multiline':False]['text':' A uint(1U) which additionally has an associated attribute emits','line_number':330,'multiline':False]['text':' its immediate literal only if it matches the attribute, otherwise','line_number':331,'multiline':False]['text':' it fails.','line_number':332,'multiline':False]['text':' always do post-delimiting','line_number':345,'multiline':False]['text':' A uint(1U) without any associated attribute just emits its','line_number':348,'multiline':False]['text':' immediate literal','line_number':349,'multiline':False]['text':' always do post-delimiting','line_number':355,'multiline':False]['text':'context','line_number':359,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////','line_number':367,'multiline':False]['text':' Generator generators: make_xxx function (objects)','line_number':368,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':369,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':395,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':430,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':501,'multiline':False]['text':' lit(uint)','line_number':548,'multiline':False]