['text':'','line_number':1,'multiline':False]['text':' ip/address_v4.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_HASH)','line_number':29,'multiline':False]['text':' !defined(BOOST_ASIO_NO_IOSTREAM)','line_number':33,'multiline':False]['text':'/ Implements IP version 4 style addresses.','line_number':41,'multiline':False]['text':'*
 * The boost::asio::ip::address_v4 class provides the ability to use and
 * manipulate IP version 4 addresses.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':42,'multiline':True]['text':'/ The type used to represent an address as an unsigned integer.','line_number':53,'multiline':False]['text':'/ The type used to represent an address as an array of bytes.','line_number':56,'multiline':False]['text':'*
   * @note This type is defined in terms of the C++0x template @c std::array
   * when it is available. Otherwise, it uses @c boost:array.
   ','line_number':57,'multiline':True]['text':'/ Default constructor.','line_number':67,'multiline':False]['text':'*
   * Initialises the @c address_v4 object such that:
   * @li <tt>to_bytes()</tt> yields <tt>{0, 0, 0, 0}</tt>; and
   * @li <tt>to_uint() == 0</tt>.
   ','line_number':68,'multiline':True]['text':'/ Construct an address from raw bytes.','line_number':78,'multiline':False]['text':'*
   * Initialises the @c address_v4 object such that <tt>to_bytes() ==
   * bytes</tt>.
   *
   * @throws out_of_range Thrown if any element in @c bytes is not in the range
   * <tt>0 - 0xFF</tt>. Note that no range checking is required for platforms
   * where <tt>std::numeric_limits<unsigned char>::max()</tt> is <tt>0xFF</tt>.
   ','line_number':79,'multiline':True]['text':'/ Construct an address from an unsigned integer in host byte order.','line_number':89,'multiline':False]['text':'*
   * Initialises the @c address_v4 object such that <tt>to_uint() == addr</tt>.
   ','line_number':90,'multiline':True]['text':'/ Copy constructor.','line_number':95,'multiline':False]['text':'/ Move constructor.','line_number':102,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':107,'multiline':False]['text':'/ Assign from another address.','line_number':109,'multiline':False]['text':'/ Move-assign from another address.','line_number':117,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':123,'multiline':False]['text':'/ Get the address in bytes, in network byte order.','line_number':125,'multiline':False]['text':'/ Get the address as an unsigned integer in host byte order','line_number':128,'multiline':False]['text':'/ Get the address as an unsigned long in host byte order','line_number':132,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':134,'multiline':False]['text':'/ Get the address as a string in dotted decimal format.','line_number':136,'multiline':False]['text':'/ (Deprecated: Use other overload.) Get the address as a string in dotted','line_number':140,'multiline':False]['text':'/ decimal format.','line_number':141,'multiline':False]['text':'/ (Deprecated: Use make_address_v4().) Create an address from an IP address','line_number':144,'multiline':False]['text':'/ string in dotted decimal form.','line_number':145,'multiline':False]['text':'/ (Deprecated: Use make_address_v4().) Create an address from an IP address','line_number':148,'multiline':False]['text':'/ string in dotted decimal form.','line_number':149,'multiline':False]['text':'/ (Deprecated: Use make_address_v4().) Create an address from an IP address','line_number':153,'multiline':False]['text':'/ string in dotted decimal form.','line_number':154,'multiline':False]['text':'/ (Deprecated: Use make_address_v4().) Create an address from an IP address','line_number':157,'multiline':False]['text':'/ string in dotted decimal form.','line_number':158,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':161,'multiline':False]['text':'/ Determine whether the address is a loopback address.','line_number':163,'multiline':False]['text':'*
   * This function tests whether the address is in the address block
   * <tt>127.0.0.0/8</tt>, which corresponds to the address range
   * <tt>127.0.0.0 - 127.255.255.255</tt>.
   *
   * @returns <tt>(to_uint() & 0xFF000000) == 0x7F000000</tt>.
   ','line_number':164,'multiline':True]['text':'/ Determine whether the address is unspecified.','line_number':173,'multiline':False]['text':'*
   * This function tests whether the address is the unspecified address
   * <tt>0.0.0.0</tt>.
   *
   * @returns <tt>to_uint() == 0</tt>.
   ','line_number':174,'multiline':True]['text':'/ (Deprecated: Use network_v4 class.) Determine whether the address is a','line_number':183,'multiline':False]['text':'/ class A address.','line_number':184,'multiline':False]['text':'/ (Deprecated: Use network_v4 class.) Determine whether the address is a','line_number':187,'multiline':False]['text':'/ class B address.','line_number':188,'multiline':False]['text':'/ (Deprecated: Use network_v4 class.) Determine whether the address is a','line_number':191,'multiline':False]['text':'/ class C address.','line_number':192,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':194,'multiline':False]['text':'/ Determine whether the address is a multicast address.','line_number':196,'multiline':False]['text':'*
   * This function tests whether the address is in the multicast address block
   * <tt>224.0.0.0/4</tt>, which corresponds to the address range
   * <tt>224.0.0.0 - 239.255.255.255</tt>.
   *
   * @returns <tt>(to_uint() & 0xF0000000) == 0xE0000000</tt>.
   ','line_number':197,'multiline':True]['text':'/ Compare two addresses for equality.','line_number':206,'multiline':False]['text':'/ Compare two addresses for inequality.','line_number':213,'multiline':False]['text':'/ Compare addresses for ordering.','line_number':220,'multiline':False]['text':'*
   * Compares two addresses in host byte order.
   *
   * @returns <tt>a1.to_uint() < a2.to_uint()</tt>.
   ','line_number':221,'multiline':True]['text':'/ Compare addresses for ordering.','line_number':232,'multiline':False]['text':'*
   * Compares two addresses in host byte order.
   *
   * @returns <tt>a1.to_uint() > a2.to_uint()</tt>.
   ','line_number':233,'multiline':True]['text':'/ Compare addresses for ordering.','line_number':244,'multiline':False]['text':'*
   * Compares two addresses in host byte order.
   *
   * @returns <tt>a1.to_uint() <= a2.to_uint()</tt>.
   ','line_number':245,'multiline':True]['text':'/ Compare addresses for ordering.','line_number':256,'multiline':False]['text':'*
   * Compares two addresses in host byte order.
   *
   * @returns <tt>a1.to_uint() >= a2.to_uint()</tt>.
   ','line_number':257,'multiline':True]['text':'/ Obtain an address object that represents any address.','line_number':268,'multiline':False]['text':'*
   * This functions returns an address that represents the "any" address
   * <tt>0.0.0.0</tt>.
   *
   * @returns A default-constructed @c address_v4 object.
   ','line_number':269,'multiline':True]['text':'/ Obtain an address object that represents the loopback address.','line_number':280,'multiline':False]['text':'*
   * This function returns an address that represents the well-known loopback
   * address <tt>127.0.0.1</tt>.
   *
   * @returns <tt>address_v4(0x7F000001)</tt>.
   ','line_number':281,'multiline':True]['text':'/ Obtain an address object that represents the broadcast address.','line_number':292,'multiline':False]['text':'*
   * This function returns an address that represents the broadcast address
   * <tt>255.255.255.255</tt>.
   *
   * @returns <tt>address_v4(0xFFFFFFFF)</tt>.
   ','line_number':293,'multiline':True]['text':'/ (Deprecated: Use network_v4 class.) Obtain an address object that','line_number':305,'multiline':False]['text':'/ represents the broadcast address that corresponds to the specified','line_number':306,'multiline':False]['text':'/ address and netmask.','line_number':307,'multiline':False]['text':'/ (Deprecated: Use network_v4 class.) Obtain the netmask that corresponds','line_number':311,'multiline':False]['text':'/ to the address, based on its address class.','line_number':312,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':314,'multiline':False]['text':' The underlying IPv4 address.','line_number':317,'multiline':False]['text':'/ Create an IPv4 address from raw bytes in network order.','line_number':321,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':322,'multiline':True]['text':'/ Create an IPv4 address from an unsigned integer in host byte order.','line_number':330,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':331,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':339,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':340,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':345,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':346,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':352,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':353,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':358,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':359,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':368,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':369,'multiline':True]['text':'/ Create an IPv4 address from an IP address string in dotted decimal form.','line_number':374,'multiline':False]['text':'*
 * @relates address_v4
 ','line_number':375,'multiline':True]['text':' defined(BOOST_ASIO_HAS_STRING_VIEW)','line_number':381,'multiline':False]['text':'  || defined(GENERATING_DOCUMENTATION)','line_number':382,'multiline':False]['text':'/ Output an address as a string.','line_number':386,'multiline':False]['text':'*
 * Used to output a human-readable string for a specified address.
 *
 * @param os The output stream to which the string will be written.
 *
 * @param addr The address to be written.
 *
 * @return The output stream.
 *
 * @relates boost::asio::ip::address_v4
 ','line_number':387,'multiline':True]['text':' !defined(BOOST_ASIO_NO_IOSTREAM)','line_number':402,'multiline':False]['text':' namespace ip','line_number':404,'multiline':False]['text':' namespace asio','line_number':405,'multiline':False]['text':' namespace boost','line_number':406,'multiline':False]['text':' namespace std','line_number':421,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_HASH)','line_number':422,'multiline':False]['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':429,'multiline':False]['text':' BOOST_ASIO_IP_ADDRESS_V4_HPP','line_number':431,'multiline':False]