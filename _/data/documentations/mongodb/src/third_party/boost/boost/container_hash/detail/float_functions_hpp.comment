['text':' Copyright 2005-2009 Daniel James.','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' Set BOOST_HASH_CONFORMANT_FLOATS to 1 for libraries known to have','line_number':16,'multiline':False]['text':' sufficiently good floating point support to not require any','line_number':17,'multiline':False]['text':' workarounds.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' When set to 0, the library tries to automatically','line_number':20,'multiline':False]['text':' use the best available implementation. This normally works well, but','line_number':21,'multiline':False]['text':' breaks when ambiguities are created by odd namespacing of the functions.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' Note that if this is set to 0, the library should still take full','line_number':24,'multiline':False]['text':' advantage of the platform's floating point support.','line_number':25,'multiline':False]['text':' Rogue Wave library:','line_number':32,'multiline':False]['text':' libc++','line_number':35,'multiline':False]['text':' GNU libstdc++ 3','line_number':38,'multiline':False]['text':' generic SGI STL','line_number':45,'multiline':False]['text':' MSL standard lib:','line_number':48,'multiline':False]['text':' VACPP std lib (probably conformant for much earlier version).','line_number':51,'multiline':False]['text':' Modena C++ standard library','line_number':58,'multiline':False]['text':' Dinkumware Library (this has to appear after any possible replacement libraries):','line_number':61,'multiline':False]['text':' The standard library is known to be compliant, so don't use the','line_number':73,'multiline':False]['text':' configuration mechanism.','line_number':74,'multiline':False]['text':' BOOST_HASH_CONFORMANT_FLOATS == 0','line_number':102,'multiline':False]['text':' The C++ standard requires that the C float functions are overloarded','line_number':104,'multiline':False]['text':' for float, double and long double in the std namespace, but some of the older','line_number':105,'multiline':False]['text':' library implementations don't support this. On some that don't, the C99','line_number':106,'multiline':False]['text':' float functions (frexpf, frexpl, etc.) are available.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' The following tries to automatically detect which are available.','line_number':109,'multiline':False]['text':' Returned by dummy versions of the float functions.','line_number':114,'multiline':False]['text':' Implicitly convertible to float and long double in order to avoid','line_number':117,'multiline':False]['text':' a compile error when the dummy float functions are used.','line_number':118,'multiline':False]['text':' A type for detecting the return type of functions.','line_number':124,'multiline':False]['text':' Used to convert the return type of a function to a type for sizeof.','line_number':132,'multiline':False]['text':' call_ldexp','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' This will get specialized for float and long double','line_number':138,'multiline':False]['text':' call_frexp','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' This will get specialized for float and long double','line_number':153,'multiline':False]['text':' A namespace for dummy functions to detect when the actual function we want','line_number':168,'multiline':False]['text':' isn't available. ldexpl, ldexpf etc. might be added tby the macros below.','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' AFAICT these have to be outside of the boost namespace, as if they're in','line_number':171,'multiline':False]['text':' the boost namespace they'll always be preferable to any other function','line_number':172,'multiline':False]['text':' (since the arguments are built in types, ADL can't be used).','line_number':173,'multiline':False]['text':' Macros for generating specializations of call_ldexp and call_frexp.','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' check_cpp and check_c99 check if the C++ or C99 functions are available.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' Then the call_* functions select an appropriate implementation.','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':' I used c99_func in a few places just to get a unique name.','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' Important: when using 'using namespace' at namespace level, include as','line_number':188,'multiline':False]['text':' little as possible in that namespace, as Visual C++ has an odd bug which','line_number':189,'multiline':False]['text':' can cause the namespace to be imported at the global level. This seems to','line_number':190,'multiline':False]['text':' happen mainly when there's a template in the same namesapce.','line_number':191,'multiline':False]['text':' select_hash_type','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':' If there is support for a particular floating point type, use that','line_number':323,'multiline':False]['text':' otherwise use double (there's always support for double).','line_number':324,'multiline':False]['text':' BOOST_HASH_CONFORMANT_FLOATS','line_number':334,'multiline':False]