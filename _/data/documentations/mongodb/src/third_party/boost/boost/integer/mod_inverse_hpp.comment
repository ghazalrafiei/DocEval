['text':'
 *  (C) Copyright Nick Thompson 2018.
 *  Use, modification and distribution are subject to the
 *  Boost Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':' From "The Joy of Factoring", Algorithm 2.7.','line_number':15,'multiline':False]['text':' Here's some others names I've found for this function:','line_number':16,'multiline':False]['text':' PowerMod[a, -1, m] (Mathematica)','line_number':17,'multiline':False]['text':' mpz_invert (gmplib)','line_number':18,'multiline':False]['text':' modinv (some dude on stackoverflow)','line_number':19,'multiline':False]['text':' Would mod_inverse be sometimes mistaken as the modular *additive* inverse?','line_number':20,'multiline':False]['text':' In any case, I think this is the best name we can get for this function without agonizing.','line_number':21,'multiline':False]['text':' make sure a < modulus:','line_number':29,'multiline':False]['text':' a doesn't have a modular multiplicative inverse:','line_number':33,'multiline':False]['text':' x might not be in the range 0 < x < m, let's fix that:','line_number':41,'multiline':False]['text':' While indeed this is an inexpensive and comforting check,','line_number':46,'multiline':False]['text':' the multiplication overflows and hence makes the check itself buggy.','line_number':47,'multiline':False]['text':'BOOST_ASSERT(u.x*a % modulus == 1);','line_number':48,'multiline':False]