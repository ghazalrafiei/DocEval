['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2013-2014','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'size_t...','line_number':48,'multiline':False]['text':'less, equal_to','line_number':49,'multiline':False]['text':'/ @cond','line_number':58,'multiline':False]['text':'For sgtree','line_number':74,'multiline':False]['text':'For treap','line_number':75,'multiline':False]['text':'Put the (possibly empty) functor in the first position to get EBO in MSVC','line_number':272,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':273,'multiline':False]['text':'lower_bound','line_number':323,'multiline':False]['text':'upper_bound','line_number':344,'multiline':False]['text':'find','line_number':375,'multiline':False]['text':'equal_range','line_number':396,'multiline':False]['text':'lower_bound_range','line_number':423,'multiline':False]['text':'bounded_range','line_number':450,'multiline':False]['text':'insert_unique_check','line_number':481,'multiline':False]['text':'Due to MSVC's EBO implementation, to save space and maintain the ABI, we must put the non-empty size member','line_number':515,'multiline':False]['text':'in the first position, but if size is not going to be stored then we'll use an specialization','line_number':516,'multiline':False]['text':'that doesn't inherit from size_holder','line_number':517,'multiline':False]['text':'Specialization for ConstantTimeSize == false','line_number':546,'multiline':False]['text':'This class will','line_number':564,'multiline':False]['text':'Detach all inserted nodes. This will add exception safety to bstree_impl','line_number':586,'multiline':False]['text':'constructors inserting elements.','line_number':587,'multiline':False]['text':'/ @endcond','line_number':601,'multiline':False]['text':'! The class template bstree is an unbalanced intrusive binary search tree','line_number':603,'multiline':False]['text':'! container. The no-throw guarantee holds only, if the key_compare object','line_number':604,'multiline':False]['text':'! doesn't throw.','line_number':605,'multiline':False]['text':'!','line_number':606,'multiline':False]['text':'! The complexity guarantees only hold if the tree is balanced, logarithmic','line_number':607,'multiline':False]['text':'! complexity would increase to linear if the tree is totally unbalanced.','line_number':608,'multiline':False]['text':'!','line_number':609,'multiline':False]['text':'! The template parameter \c T is the type to be managed by the container.','line_number':610,'multiline':False]['text':'! The user can specify additional options and if no options are provided','line_number':611,'multiline':False]['text':'! default options are used.','line_number':612,'multiline':False]['text':'!','line_number':613,'multiline':False]['text':'! The container supports the following options:','line_number':614,'multiline':False]['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':615,'multiline':False]['text':'! \c constant_time_size<>, \c size_type<> and','line_number':616,'multiline':False]['text':'! \c compare<>.','line_number':617,'multiline':False]['text':'/ @cond','line_number':627,'multiline':False]['text':'/ @endcond','line_number':631,'multiline':False]['text':'/ @cond','line_number':653,'multiline':False]['text':'/ @endcond','line_number':655,'multiline':False]['text':'/ @cond','line_number':660,'multiline':False]['text':'noncopyable','line_number':663,'multiline':False]['text':'Constant-time size is incompatible with auto-unlink hooks!','line_number':668,'multiline':False]['text':'/ @endcond','line_number':675,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container.','line_number':681,'multiline':False]['text':'!','line_number':682,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':683,'multiline':False]['text':'!','line_number':684,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':685,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':686,'multiline':False]['text':'!   or the copy constructor of the key_compare object throws. Basic guarantee.','line_number':687,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container with given comparison and traits.','line_number':692,'multiline':False]['text':'!','line_number':693,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':694,'multiline':False]['text':'!','line_number':695,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':696,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':697,'multiline':False]['text':'!   or the copy constructor of the key_compare object throws. Basic guarantee.','line_number':698,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue of type value_type.','line_number':703,'multiline':False]['text':'!   cmp must be a comparison function that induces a strict weak ordering.','line_number':704,'multiline':False]['text':'!','line_number':705,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container and inserts elements from','line_number':706,'multiline':False]['text':'!   [b, e).','line_number':707,'multiline':False]['text':'!','line_number':708,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if [b, e) is already sorted using','line_number':709,'multiline':False]['text':'!   comp and otherwise N * log N, where N is the distance between first and last.','line_number':710,'multiline':False]['text':'!','line_number':711,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':712,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':713,'multiline':False]['text':'!   or the copy constructor/operator() of the key_compare object throws. Basic guarantee.','line_number':714,'multiline':False]['text':'bstbase releases elements in case of exceptions','line_number':721,'multiline':False]['text':'! <b>Effects</b>: Constructs a container moving resources from another container.','line_number':728,'multiline':False]['text':'!   Internal comparison object and value traits are move constructed and','line_number':729,'multiline':False]['text':'!   nodes belonging to x (except the node representing the "end") are linked to *this.','line_number':730,'multiline':False]['text':'!','line_number':731,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':732,'multiline':False]['text':'!','line_number':733,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node's','line_number':734,'multiline':False]['text':'!   move constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':735,'multiline':False]['text':'!   or the move constructor of the comparison objet throws.','line_number':736,'multiline':False]['text':'! <b>Effects</b>: Equivalent to swap','line_number':743,'multiline':False]['text':'!','line_number':744,'multiline':False]['text':'! <b>Effects</b>: Detaches all elements from this. The objects in the set','line_number':749,'multiline':False]['text':'!   are not deleted (i.e. no destructors are called), but the nodes according to','line_number':750,'multiline':False]['text':'!   the value_traits template parameter are reinitialized and thus can be reused.','line_number':751,'multiline':False]['text':'!','line_number':752,'multiline':False]['text':'! <b>Complexity</b>: Linear to elements contained in *this.','line_number':753,'multiline':False]['text':'!','line_number':754,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':755,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator pointing to the beginning of the container.','line_number':759,'multiline':False]['text':'!','line_number':760,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':761,'multiline':False]['text':'!','line_number':762,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':763,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the beginning of the container.','line_number':766,'multiline':False]['text':'!','line_number':767,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':768,'multiline':False]['text':'!','line_number':769,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':770,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the beginning of the container.','line_number':773,'multiline':False]['text':'!','line_number':774,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':775,'multiline':False]['text':'!','line_number':776,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':777,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator pointing to the end of the container.','line_number':780,'multiline':False]['text':'!','line_number':781,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':782,'multiline':False]['text':'!','line_number':783,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':784,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the end of the container.','line_number':787,'multiline':False]['text':'!','line_number':788,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':789,'multiline':False]['text':'!','line_number':790,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':791,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the end of the container.','line_number':794,'multiline':False]['text':'!','line_number':795,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':796,'multiline':False]['text':'!','line_number':797,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':798,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning of the','line_number':801,'multiline':False]['text':'!    reversed container.','line_number':802,'multiline':False]['text':'!','line_number':803,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':804,'multiline':False]['text':'!','line_number':805,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':806,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':809,'multiline':False]['text':'!    of the reversed container.','line_number':810,'multiline':False]['text':'!','line_number':811,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':812,'multiline':False]['text':'!','line_number':813,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':814,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':817,'multiline':False]['text':'!    of the reversed container.','line_number':818,'multiline':False]['text':'!','line_number':819,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':820,'multiline':False]['text':'!','line_number':821,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':822,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':825,'multiline':False]['text':'!    of the reversed container.','line_number':826,'multiline':False]['text':'!','line_number':827,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':828,'multiline':False]['text':'!','line_number':829,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':830,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':833,'multiline':False]['text':'!    of the reversed container.','line_number':834,'multiline':False]['text':'!','line_number':835,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':836,'multiline':False]['text':'!','line_number':837,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':838,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':841,'multiline':False]['text':'!    of the reversed container.','line_number':842,'multiline':False]['text':'!','line_number':843,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':844,'multiline':False]['text':'!','line_number':845,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':846,'multiline':False]['text':'! <b>Effects</b>: Returns a iterator pointing to the root node of the container or end() if not present.','line_number':849,'multiline':False]['text':'!','line_number':850,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':851,'multiline':False]['text':'!','line_number':852,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':853,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the root node of the container or cend() if not present.','line_number':856,'multiline':False]['text':'!','line_number':857,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':858,'multiline':False]['text':'!','line_number':859,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':860,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the root node of the container or cend() if not present.','line_number':863,'multiline':False]['text':'!','line_number':864,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':865,'multiline':False]['text':'!','line_number':866,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':867,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':870,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end iterator','line_number':872,'multiline':False]['text':'!   of the container.','line_number':873,'multiline':False]['text':'!','line_number':874,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the container associated to the end iterator','line_number':875,'multiline':False]['text':'!','line_number':876,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':877,'multiline':False]['text':'!','line_number':878,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':879,'multiline':False]['text':'! <b>Precondition</b>: end_iterator must be a valid end const_iterator','line_number':886,'multiline':False]['text':'!   of the container.','line_number':887,'multiline':False]['text':'!','line_number':888,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the container associated to the iterator','line_number':889,'multiline':False]['text':'!','line_number':890,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':891,'multiline':False]['text':'!','line_number':892,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':893,'multiline':False]['text':'! <b>Precondition</b>: it must be a valid iterator','line_number':900,'multiline':False]['text':'!   of the container.','line_number':901,'multiline':False]['text':'!','line_number':902,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the container associated to the iterator','line_number':903,'multiline':False]['text':'!','line_number':904,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':905,'multiline':False]['text':'!','line_number':906,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':907,'multiline':False]['text':'! <b>Precondition</b>: it must be a valid end const_iterator','line_number':911,'multiline':False]['text':'!   of container.','line_number':912,'multiline':False]['text':'!','line_number':913,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the container associated to the end iterator','line_number':914,'multiline':False]['text':'!','line_number':915,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':916,'multiline':False]['text':'!','line_number':917,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':918,'multiline':False]['text':'! <b>Effects</b>: Returns the key_compare object used by the container.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':926,'multiline':False]['text':'!','line_number':927,'multiline':False]['text':'! <b>Throws</b>: If key_compare copy-constructor throws.','line_number':928,'multiline':False]['text':'! <b>Effects</b>: Returns the value_compare object used by the container.','line_number':931,'multiline':False]['text':'!','line_number':932,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':933,'multiline':False]['text':'!','line_number':934,'multiline':False]['text':'! <b>Throws</b>: If value_compare copy-constructor throws.','line_number':935,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':938,'multiline':False]['text':'! <b>Effects</b>: Returns true if the container is empty.','line_number':940,'multiline':False]['text':'!','line_number':941,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':942,'multiline':False]['text':'!','line_number':943,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':944,'multiline':False]['text':'! <b>Effects</b>: Returns the number of elements stored in the container.','line_number':955,'multiline':False]['text':'!','line_number':956,'multiline':False]['text':'! <b>Complexity</b>: Linear to elements contained in *this','line_number':957,'multiline':False]['text':'!   if constant-time size option is disabled. Constant time otherwise.','line_number':958,'multiline':False]['text':'!','line_number':959,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':960,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of two containers.','line_number':970,'multiline':False]['text':'!','line_number':971,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':972,'multiline':False]['text':'!','line_number':973,'multiline':False]['text':'! <b>Throws</b>: If the comparison functor's swap call throws.','line_number':974,'multiline':False]['text':'This can throw','line_number':977,'multiline':False]['text':'These can't throw','line_number':979,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':984,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':985,'multiline':False]['text':'!','line_number':986,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':987,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':988,'multiline':False]['text':'!   elements from src calling Cloner::operator()(const_reference )','line_number':989,'multiline':False]['text':'!   and inserts them on *this. Copies the predicate from the source container.','line_number':990,'multiline':False]['text':'!','line_number':991,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':992,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':993,'multiline':False]['text':'!','line_number':994,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':995,'multiline':False]['text':'!','line_number':996,'multiline':False]['text':'! <b>Throws</b>: If cloner throws or predicate copy assignment throws. Basic guarantee.','line_number':997,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1016,'multiline':False]['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':1017,'multiline':False]['text':'!','line_number':1018,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':1019,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':1020,'multiline':False]['text':'!   elements from src calling Cloner::operator()(reference)','line_number':1021,'multiline':False]['text':'!   and inserts them on *this. Copies the predicate from the source container.','line_number':1022,'multiline':False]['text':'!','line_number':1023,'multiline':False]['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':1024,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':1025,'multiline':False]['text':'!','line_number':1026,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':1027,'multiline':False]['text':'!','line_number':1028,'multiline':False]['text':'! <b>Throws</b>: If cloner throws or predicate copy assignment throws. Basic guarantee.','line_number':1029,'multiline':False]['text':'!','line_number':1030,'multiline':False]['text':'! <b>Note</b>: This version can modify the source container, useful to implement','line_number':1031,'multiline':False]['text':'!    move semantics.','line_number':1032,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue','line_number':1051,'multiline':False]['text':'!','line_number':1052,'multiline':False]['text':'! <b>Effects</b>: Inserts value into the container before the upper bound.','line_number':1053,'multiline':False]['text':'!','line_number':1054,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':1055,'multiline':False]['text':'!   most logarithmic.','line_number':1056,'multiline':False]['text':'!','line_number':1057,'multiline':False]['text':'! <b>Throws</b>: If the internal key_compare ordering function throws. Strong guarantee.','line_number':1058,'multiline':False]['text':'!','line_number':1059,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1060,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1061,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue, and "hint" must be','line_number':1072,'multiline':False]['text':'!   a valid iterator.','line_number':1073,'multiline':False]['text':'!','line_number':1074,'multiline':False]['text':'! <b>Effects</b>: Inserts x into the container, using "hint" as a hint to','line_number':1075,'multiline':False]['text':'!   where it will be inserted. If "hint" is the upper_bound','line_number':1076,'multiline':False]['text':'!   the insertion takes constant time (two comparisons in the worst case)','line_number':1077,'multiline':False]['text':'!','line_number':1078,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic in general, but it is amortized','line_number':1079,'multiline':False]['text':'!   constant time if t is inserted immediately before hint.','line_number':1080,'multiline':False]['text':'!','line_number':1081,'multiline':False]['text':'! <b>Throws</b>: If the internal key_compare ordering function throws. Strong guarantee.','line_number':1082,'multiline':False]['text':'!','line_number':1083,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1084,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1085,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':1096,'multiline':False]['text':'!   of type value_type.','line_number':1097,'multiline':False]['text':'!','line_number':1098,'multiline':False]['text':'! <b>Effects</b>: Inserts a each element of a range into the container','line_number':1099,'multiline':False]['text':'!   before the upper bound of the key of each element.','line_number':1100,'multiline':False]['text':'!','line_number':1101,'multiline':False]['text':'! <b>Complexity</b>: Insert range is in general O(N * log(N)), where N is the','line_number':1102,'multiline':False]['text':'!   size of the range. However, it is linear in N if the range is already sorted','line_number':1103,'multiline':False]['text':'!   by value_comp().','line_number':1104,'multiline':False]['text':'!','line_number':1105,'multiline':False]['text':'! <b>Throws</b>: If the comparison functor call throws.','line_number':1106,'multiline':False]['text':'!','line_number':1107,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1108,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1109,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue','line_number':1118,'multiline':False]['text':'!','line_number':1119,'multiline':False]['text':'! <b>Effects</b>: Inserts value into the container if the value','line_number':1120,'multiline':False]['text':'!   is not already present.','line_number':1121,'multiline':False]['text':'!','line_number':1122,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':1123,'multiline':False]['text':'!   most logarithmic.','line_number':1124,'multiline':False]['text':'!','line_number':1125,'multiline':False]['text':'! <b>Throws</b>: If the comparison functor call throws.','line_number':1126,'multiline':False]['text':'!','line_number':1127,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1128,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1129,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue, and "hint" must be','line_number':1142,'multiline':False]['text':'!   a valid iterator','line_number':1143,'multiline':False]['text':'!','line_number':1144,'multiline':False]['text':'! <b>Effects</b>: Tries to insert x into the container, using "hint" as a hint','line_number':1145,'multiline':False]['text':'!   to where it will be inserted.','line_number':1146,'multiline':False]['text':'!','line_number':1147,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic in general, but it is amortized','line_number':1148,'multiline':False]['text':'!   constant time (two comparisons in the worst case)','line_number':1149,'multiline':False]['text':'!   if t is inserted immediately before hint.','line_number':1150,'multiline':False]['text':'!','line_number':1151,'multiline':False]['text':'! <b>Throws</b>: If the comparison functor call throws.','line_number':1152,'multiline':False]['text':'!','line_number':1153,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1154,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1155,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':1166,'multiline':False]['text':'!   of type value_type.','line_number':1167,'multiline':False]['text':'!','line_number':1168,'multiline':False]['text':'! <b>Effects</b>: Tries to insert each element of a range into the container.','line_number':1169,'multiline':False]['text':'!','line_number':1170,'multiline':False]['text':'! <b>Complexity</b>: Insert range is in general O(N * log(N)), where N is the','line_number':1171,'multiline':False]['text':'!   size of the range. However, it is linear in N if the range is already sorted','line_number':1172,'multiline':False]['text':'!   by value_comp().','line_number':1173,'multiline':False]['text':'!','line_number':1174,'multiline':False]['text':'! <b>Throws</b>: If the comparison functor call throws.','line_number':1175,'multiline':False]['text':'!','line_number':1176,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':1177,'multiline':False]['text':'!   No copy-constructors are called.','line_number':1178,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':1195,'multiline':False]['text':'!   a user provided key instead of the value itself.','line_number':1196,'multiline':False]['text':'!','line_number':1197,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':1198,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':1199,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':1200,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':1201,'multiline':False]['text':'!   the "insert_commit" function.','line_number':1202,'multiline':False]['text':'!','line_number':1203,'multiline':False]['text':'! <b>Complexity</b>: Average complexity is at most logarithmic.','line_number':1204,'multiline':False]['text':'!','line_number':1205,'multiline':False]['text':'! <b>Throws</b>: If the comp ordering function throws. Strong guarantee.','line_number':1206,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':1209,'multiline':False]['text':'!   a user provided key instead of the value itself, using "hint"','line_number':1210,'multiline':False]['text':'!   as a hint to where it will be inserted.','line_number':1211,'multiline':False]['text':'!','line_number':1212,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':1213,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':1214,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':1215,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':1216,'multiline':False]['text':'!   the "insert_commit" function.','line_number':1217,'multiline':False]['text':'!','line_number':1218,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic in general, but it's amortized','line_number':1219,'multiline':False]['text':'!   constant time if t is inserted immediately before hint.','line_number':1220,'multiline':False]['text':'!','line_number':1221,'multiline':False]['text':'! <b>Throws</b>: If the comp ordering function throws. Strong guarantee.','line_number':1222,'multiline':False]['text':'! <b>Requires</b>: comp must be a comparison function that induces','line_number':1225,'multiline':False]['text':'!   the same strict weak ordering as key_compare. The difference is that','line_number':1226,'multiline':False]['text':'!   comp compares an arbitrary key with the contained values.','line_number':1227,'multiline':False]['text':'!','line_number':1228,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':1229,'multiline':False]['text':'!   a user provided key instead of the value itself.','line_number':1230,'multiline':False]['text':'!','line_number':1231,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':1232,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':1233,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':1234,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':1235,'multiline':False]['text':'!   the "insert_commit" function.','line_number':1236,'multiline':False]['text':'!','line_number':1237,'multiline':False]['text':'! <b>Complexity</b>: Average complexity is at most logarithmic.','line_number':1238,'multiline':False]['text':'!','line_number':1239,'multiline':False]['text':'! <b>Throws</b>: If the comp ordering function throws. Strong guarantee.','line_number':1240,'multiline':False]['text':'!','line_number':1241,'multiline':False]['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':1242,'multiline':False]['text':'!   a value_type is expensive: if there is an equivalent value','line_number':1243,'multiline':False]['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':1244,'multiline':False]['text':'!   node that is used to impose the order is much cheaper to construct','line_number':1245,'multiline':False]['text':'!   than the value_type and this function offers the possibility to use that','line_number':1246,'multiline':False]['text':'!   part to check if the insertion will be successful.','line_number':1247,'multiline':False]['text':'!','line_number':1248,'multiline':False]['text':'!   If the check is successful, the user can construct the value_type and use','line_number':1249,'multiline':False]['text':'!   "insert_commit" to insert the object in constant-time. This gives a total','line_number':1250,'multiline':False]['text':'!   logarithmic complexity to the insertion: check(O(log(N)) + commit(O(1)).','line_number':1251,'multiline':False]['text':'!','line_number':1252,'multiline':False]['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':1253,'multiline':False]['text':'!   objects are inserted or erased from the container.','line_number':1254,'multiline':False]['text':'! <b>Requires</b>: comp must be a comparison function that induces','line_number':1259,'multiline':False]['text':'!   the same strict weak ordering as key_compare. The difference is that','line_number':1260,'multiline':False]['text':'!   comp compares an arbitrary key with the contained values.','line_number':1261,'multiline':False]['text':'!','line_number':1262,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':1263,'multiline':False]['text':'!   a user provided key instead of the value itself, using "hint"','line_number':1264,'multiline':False]['text':'!   as a hint to where it will be inserted.','line_number':1265,'multiline':False]['text':'!','line_number':1266,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':1267,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':1268,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':1269,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':1270,'multiline':False]['text':'!   the "insert_commit" function.','line_number':1271,'multiline':False]['text':'!','line_number':1272,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic in general, but it's amortized','line_number':1273,'multiline':False]['text':'!   constant time if t is inserted immediately before hint.','line_number':1274,'multiline':False]['text':'!','line_number':1275,'multiline':False]['text':'! <b>Throws</b>: If the comp ordering function throws. Strong guarantee.','line_number':1276,'multiline':False]['text':'!','line_number':1277,'multiline':False]['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':1278,'multiline':False]['text':'!   a value_type is expensive: if there is an equivalent value','line_number':1279,'multiline':False]['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':1280,'multiline':False]['text':'!   constructing that is used to impose the order is much cheaper to construct','line_number':1281,'multiline':False]['text':'!   than the value_type and this function offers the possibility to use that key','line_number':1282,'multiline':False]['text':'!   to check if the insertion will be successful.','line_number':1283,'multiline':False]['text':'!','line_number':1284,'multiline':False]['text':'!   If the check is successful, the user can construct the value_type and use','line_number':1285,'multiline':False]['text':'!   "insert_commit" to insert the object in constant-time. This can give a total','line_number':1286,'multiline':False]['text':'!   constant-time complexity to the insertion: check(O(1)) + commit(O(1)).','line_number':1287,'multiline':False]['text':'!','line_number':1288,'multiline':False]['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':1289,'multiline':False]['text':'!   objects are inserted or erased from the container.','line_number':1290,'multiline':False]['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':1296,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue of type value_type. commit_data','line_number':1298,'multiline':False]['text':'!   must have been obtained from a previous call to "insert_check".','line_number':1299,'multiline':False]['text':'!   No objects should have been inserted or erased from the container between','line_number':1300,'multiline':False]['text':'!   the "insert_check" that filled "commit_data" and the call to "insert_commit".','line_number':1301,'multiline':False]['text':'!','line_number':1302,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the container using the information obtained','line_number':1303,'multiline':False]['text':'!   from the "commit_data" that a previous "insert_check" filled.','line_number':1304,'multiline':False]['text':'!','line_number':1305,'multiline':False]['text':'! <b>Returns</b>: An iterator to the newly inserted object.','line_number':1306,'multiline':False]['text':'!','line_number':1307,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1308,'multiline':False]['text':'!','line_number':1309,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1310,'multiline':False]['text':'!','line_number':1311,'multiline':False]['text':'! <b>Notes</b>: This function has only sense if a "insert_check" has been','line_number':1312,'multiline':False]['text':'!   previously executed to fill "commit_data". No value should be inserted or','line_number':1313,'multiline':False]['text':'!   erased between the "insert_check" and "insert_commit" calls.','line_number':1314,'multiline':False]['text':'Test insertion position is correct','line_number':1321,'multiline':False]['text':'Check if the insertion point is correct to detect wrong','line_number':1326,'multiline':False]['text':'uses insert_unique_check','line_number':1327,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue, "pos" must be','line_number':1338,'multiline':False]['text':'!   a valid iterator (or end) and must be the succesor of value','line_number':1339,'multiline':False]['text':'!   once inserted according to the predicate','line_number':1340,'multiline':False]['text':'!','line_number':1341,'multiline':False]['text':'! <b>Effects</b>: Inserts x into the container before "pos".','line_number':1342,'multiline':False]['text':'!','line_number':1343,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1344,'multiline':False]['text':'!','line_number':1345,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1346,'multiline':False]['text':'!','line_number':1347,'multiline':False]['text':'! <b>Note</b>: This function does not check preconditions so if "pos" is not','line_number':1348,'multiline':False]['text':'! the successor of "value" container ordering invariant will be broken.','line_number':1349,'multiline':False]['text':'! This is a low-level function to be used only for performance reasons','line_number':1350,'multiline':False]['text':'! by advanced users.','line_number':1351,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue, and it must be no less','line_number':1361,'multiline':False]['text':'!   than the greatest inserted key','line_number':1362,'multiline':False]['text':'!','line_number':1363,'multiline':False]['text':'! <b>Effects</b>: Inserts x into the container in the last position.','line_number':1364,'multiline':False]['text':'!','line_number':1365,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1366,'multiline':False]['text':'!','line_number':1367,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1368,'multiline':False]['text':'!','line_number':1369,'multiline':False]['text':'! <b>Note</b>: This function does not check preconditions so if value is','line_number':1370,'multiline':False]['text':'!   less than the greatest inserted key container ordering invariant will be broken.','line_number':1371,'multiline':False]['text':'!   This function is slightly more efficient than using "insert_before".','line_number':1372,'multiline':False]['text':'!   This is a low-level function to be used only for performance reasons','line_number':1373,'multiline':False]['text':'!   by advanced users.','line_number':1374,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue, and it must be no greater','line_number':1383,'multiline':False]['text':'!   than the minimum inserted key','line_number':1384,'multiline':False]['text':'!','line_number':1385,'multiline':False]['text':'! <b>Effects</b>: Inserts x into the container in the first position.','line_number':1386,'multiline':False]['text':'!','line_number':1387,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1388,'multiline':False]['text':'!','line_number':1389,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1390,'multiline':False]['text':'!','line_number':1391,'multiline':False]['text':'! <b>Note</b>: This function does not check preconditions so if value is','line_number':1392,'multiline':False]['text':'!   greater than the minimum inserted key container ordering invariant will be broken.','line_number':1393,'multiline':False]['text':'!   This function is slightly more efficient than using "insert_before".','line_number':1394,'multiline':False]['text':'!   This is a low-level function to be used only for performance reasons','line_number':1395,'multiline':False]['text':'!   by advanced users.','line_number':1396,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':1405,'multiline':False]['text':'!','line_number':1406,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for erase element is constant time.','line_number':1407,'multiline':False]['text':'!','line_number':1408,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1409,'multiline':False]['text':'!','line_number':1410,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1411,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1412,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':1426,'multiline':False]['text':'!','line_number':1427,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for erase range is at most','line_number':1428,'multiline':False]['text':'!   O(log(size() + N)), where N is the number of elements in the range.','line_number':1429,'multiline':False]['text':'!','line_number':1430,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1431,'multiline':False]['text':'!','line_number':1432,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1433,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1434,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':1438,'multiline':False]['text':'!','line_number':1439,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':1440,'multiline':False]['text':'!','line_number':1441,'multiline':False]['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':1442,'multiline':False]['text':'!','line_number':1443,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1444,'multiline':False]['text':'!','line_number':1445,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1446,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1447,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1451,'multiline':False]['text':'!   comp(nk, key) and !comp(key, nk), with comp(nk, key) implying !comp(key, nk),','line_number':1452,'multiline':False]['text':'!   with nk the key_type of a value_type inserted into `*this`.','line_number':1453,'multiline':False]['text':'!','line_number':1454,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given key.','line_number':1455,'multiline':False]['text':'!   according to the comparison functor "comp".','line_number':1456,'multiline':False]['text':'!','line_number':1457,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':1458,'multiline':False]['text':'!','line_number':1459,'multiline':False]['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':1460,'multiline':False]['text':'!','line_number':1461,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1462,'multiline':False]['text':'!','line_number':1463,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1464,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1465,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1477,'multiline':False]['text':'!','line_number':1478,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':1479,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':1480,'multiline':False]['text':'!','line_number':1481,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for erase element is constant time.','line_number':1482,'multiline':False]['text':'!','line_number':1483,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1484,'multiline':False]['text':'!','line_number':1485,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':1486,'multiline':False]['text':'!    to the erased elements.','line_number':1487,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1497,'multiline':False]['text':'!','line_number':1498,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':1499,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1500,'multiline':False]['text':'!','line_number':1501,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':1502,'multiline':False]['text':'!','line_number':1503,'multiline':False]['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':1504,'multiline':False]['text':'!','line_number':1505,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1506,'multiline':False]['text':'!','line_number':1507,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1508,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1509,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1519,'multiline':False]['text':'!','line_number':1520,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':1521,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1522,'multiline':False]['text':'!','line_number':1523,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for erase range is at most','line_number':1524,'multiline':False]['text':'!   O(log(size() + N)), where N is the number of elements in the range.','line_number':1525,'multiline':False]['text':'!','line_number':1526,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1527,'multiline':False]['text':'!','line_number':1528,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':1529,'multiline':False]['text':'!    to the erased elements.','line_number':1530,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1535,'multiline':False]['text':'!   comp(nk, key) and !comp(key, nk), with comp(nk, key) implying !comp(key, nk)','line_number':1536,'multiline':False]['text':'!   and nk the key_type of a value_type inserted into `*this`.','line_number':1537,'multiline':False]['text':'!','line_number':1538,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':1539,'multiline':False]['text':'!','line_number':1540,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given key.','line_number':1541,'multiline':False]['text':'!   according to the comparison functor "comp".','line_number':1542,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':1543,'multiline':False]['text':'!','line_number':1544,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':1545,'multiline':False]['text':'!','line_number':1546,'multiline':False]['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':1547,'multiline':False]['text':'!','line_number':1548,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1549,'multiline':False]['text':'!','line_number':1550,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':1551,'multiline':False]['text':'!    to the erased elements.','line_number':1552,'multiline':False]['text':'! <b>Effects</b>: Erases all of the elements.','line_number':1564,'multiline':False]['text':'!','line_number':1565,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements on the container.','line_number':1566,'multiline':False]['text':'!   if it's a safe-mode or auto-unlink value_type. Constant time otherwise.','line_number':1567,'multiline':False]['text':'!','line_number':1568,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1569,'multiline':False]['text':'!','line_number':1570,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1571,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':1572,'multiline':False]['text':'! <b>Effects</b>: Erases all of the elements calling disposer(p) for','line_number':1584,'multiline':False]['text':'!   each node to be erased.','line_number':1585,'multiline':False]['text':'! <b>Complexity</b>: Average complexity for is at most O(log(size() + N)),','line_number':1586,'multiline':False]['text':'!   where N is the number of elements in the container.','line_number':1587,'multiline':False]['text':'!','line_number':1588,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1589,'multiline':False]['text':'!','line_number':1590,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1591,'multiline':False]['text':'!    to the erased elements. Calls N times to disposer functor.','line_number':1592,'multiline':False]['text':'! <b>Effects</b>: Returns the number of contained elements with the given value','line_number':1602,'multiline':False]['text':'!','line_number':1603,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic to the number of elements contained plus lineal','line_number':1604,'multiline':False]['text':'!   to number of objects with the given value.','line_number':1605,'multiline':False]['text':'!','line_number':1606,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1607,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1611,'multiline':False]['text':'!   comp(nk, key) and !comp(key, nk), with comp(nk, key) implying !comp(key, nk),','line_number':1612,'multiline':False]['text':'!   and nk the key_type of a value_type inserted into `*this`.','line_number':1613,'multiline':False]['text':'!','line_number':1614,'multiline':False]['text':'! <b>Effects</b>: Returns the number of contained elements with the given key','line_number':1615,'multiline':False]['text':'!','line_number':1616,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic to the number of elements contained plus lineal','line_number':1617,'multiline':False]['text':'!   to number of objects with the given key.','line_number':1618,'multiline':False]['text':'!','line_number':1619,'multiline':False]['text':'! <b>Throws</b>: If `comp` throws.','line_number':1620,'multiline':False]['text':'Add non-const overloads to theoretically const members','line_number':1632,'multiline':False]['text':'as some algorithms have different behavior when non-const versions are used (like splay trees).','line_number':1633,'multiline':False]['text':'defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':1646,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element whose','line_number':1648,'multiline':False]['text':'!   key is not less than k or end() if that element does not exist.','line_number':1649,'multiline':False]['text':'!','line_number':1650,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1651,'multiline':False]['text':'!','line_number':1652,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1653,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element whose','line_number':1656,'multiline':False]['text':'!   key is not less than k or end() if that element does not exist.','line_number':1657,'multiline':False]['text':'!','line_number':1658,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1659,'multiline':False]['text':'!','line_number':1660,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1661,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const key_type &)','line_number':1664,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const KeyType&,KeyTypeKeyCompare)','line_number':1668,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element whose','line_number':1672,'multiline':False]['text':'!   key is greater than k or end() if that element does not exist.','line_number':1673,'multiline':False]['text':'!','line_number':1674,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1675,'multiline':False]['text':'!','line_number':1676,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1677,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1680,'multiline':False]['text':'!   !comp(key, nk), with nk the key_type of a value_type inserted into `*this`.','line_number':1681,'multiline':False]['text':'!','line_number':1682,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element whose','line_number':1683,'multiline':False]['text':'!   key is greater than k according to comp or end() if that element','line_number':1684,'multiline':False]['text':'!   does not exist.','line_number':1685,'multiline':False]['text':'!','line_number':1686,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1687,'multiline':False]['text':'!','line_number':1688,'multiline':False]['text':'! <b>Throws</b>: If `comp` throws.','line_number':1689,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const key_type &)','line_number':1693,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const KeyType&,KeyTypeKeyCompare)','line_number':1696,'multiline':False]['text':'! <b>Effects</b>: Finds an iterator to the first element whose key is','line_number':1700,'multiline':False]['text':'!   k or end() if that element does not exist.','line_number':1701,'multiline':False]['text':'!','line_number':1702,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1703,'multiline':False]['text':'!','line_number':1704,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1705,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1708,'multiline':False]['text':'!   comp(nk, key) and !comp(key, nk), with comp(nk, key) implying !comp(key, nk),','line_number':1709,'multiline':False]['text':'!   and nk the key_type of a value_type inserted into `*this`.','line_number':1710,'multiline':False]['text':'!','line_number':1711,'multiline':False]['text':'! <b>Effects</b>: Finds an iterator to the first element whose key is','line_number':1712,'multiline':False]['text':'!   k or end() if that element does not exist.','line_number':1713,'multiline':False]['text':'!','line_number':1714,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1715,'multiline':False]['text':'!','line_number':1716,'multiline':False]['text':'! <b>Throws</b>: If `comp` throws.','line_number':1717,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const key_type &)','line_number':1721,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::find(const KeyType&,KeyTypeKeyCompare)','line_number':1724,'multiline':False]['text':'! <b>Effects</b>: Finds a range containing all elements whose key is k or','line_number':1728,'multiline':False]['text':'!   an empty range that indicates the position where those elements would be','line_number':1729,'multiline':False]['text':'!   if they there is no elements with key k.','line_number':1730,'multiline':False]['text':'!','line_number':1731,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1732,'multiline':False]['text':'!','line_number':1733,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1734,'multiline':False]['text':'! <b>Requires</b>: key is a value such that `*this` is partitioned with respect to','line_number':1737,'multiline':False]['text':'!   comp(nk, key) and !comp(key, nk), with comp(nk, key) implying !comp(key, nk),','line_number':1738,'multiline':False]['text':'!   with nk the key_type of a value_type inserted into `*this`.','line_number':1739,'multiline':False]['text':'!','line_number':1740,'multiline':False]['text':'! <b>Effects</b>: Finds a range containing all elements whose key is k or','line_number':1741,'multiline':False]['text':'!   an empty range that indicates the position where those elements would be','line_number':1742,'multiline':False]['text':'!   if they there is no elements with key k.','line_number':1743,'multiline':False]['text':'!','line_number':1744,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1745,'multiline':False]['text':'!','line_number':1746,'multiline':False]['text':'! <b>Throws</b>: If `comp` throws.','line_number':1747,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const key_type &)','line_number':1751,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const KeyType&,KeyTypeKeyCompare)','line_number':1754,'multiline':False]['text':'! <b>Requires</b>:','line_number':1759,'multiline':False]['text':'!   `upper_key` shall not precede `lower_key` according to key_compare.','line_number':1760,'multiline':False]['text':'!   [key_comp()(upper_key, lower_key) shall be false]','line_number':1761,'multiline':False]['text':'!','line_number':1762,'multiline':False]['text':'!   If `lower_key` is equivalent to `upper_key`','line_number':1763,'multiline':False]['text':'!   [!key_comp()(upper_key, lower_key) && !key_comp()(lower_key, upper_key)] then','line_number':1764,'multiline':False]['text':'!   ('left_closed' || 'right_closed') must be false.','line_number':1765,'multiline':False]['text':'!','line_number':1766,'multiline':False]['text':'! <b>Effects</b>: Returns an a pair with the following criteria:','line_number':1767,'multiline':False]['text':'!','line_number':1768,'multiline':False]['text':'!   first = lower_bound(lower_key) if left_closed, upper_bound(lower_key) otherwise','line_number':1769,'multiline':False]['text':'!','line_number':1770,'multiline':False]['text':'!   second = upper_bound(upper_key) if right_closed, lower_bound(upper_key) otherwise','line_number':1771,'multiline':False]['text':'!','line_number':1772,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1773,'multiline':False]['text':'!','line_number':1774,'multiline':False]['text':'! <b>Throws</b>: If `key_compare` throws.','line_number':1775,'multiline':False]['text':'!','line_number':1776,'multiline':False]['text':'! <b>Note</b>: This function can be more efficient than calling upper_bound','line_number':1777,'multiline':False]['text':'!   and lower_bound for lower_value and upper_value.','line_number':1778,'multiline':False]['text':'!','line_number':1779,'multiline':False]['text':'! <b>Note</b>: Experimental function, the interface might change in future releases.','line_number':1780,'multiline':False]['text':'! <b>Requires</b>:','line_number':1784,'multiline':False]['text':'!   `lower_key` is a value such that `*this` is partitioned with respect to','line_number':1785,'multiline':False]['text':'!   comp(nk, lower_key) if left_closed is true, with respect to !comp(lower_key, nk) otherwise.','line_number':1786,'multiline':False]['text':'!','line_number':1787,'multiline':False]['text':'! `upper_key` is a value such that `*this` is partitioned with respect to','line_number':1788,'multiline':False]['text':'!   !comp(upper_key, nk) if right_closed is true, with respect to comp(nk, upper_key) otherwise.','line_number':1789,'multiline':False]['text':'!','line_number':1790,'multiline':False]['text':'!   `upper_key` shall not precede `lower_key` according to comp','line_number':1791,'multiline':False]['text':'!   [comp(upper_key, lower_key) shall be false]','line_number':1792,'multiline':False]['text':'!','line_number':1793,'multiline':False]['text':'!   If `lower_key` is equivalent to `upper_key`','line_number':1794,'multiline':False]['text':'!   [!comp(upper_key, lower_key) && !comp(lower_key, upper_key)] then','line_number':1795,'multiline':False]['text':'!   ('left_closed' || 'right_closed') must be false.','line_number':1796,'multiline':False]['text':'!','line_number':1797,'multiline':False]['text':'! <b>Effects</b>: Returns an a pair with the following criteria:','line_number':1798,'multiline':False]['text':'!','line_number':1799,'multiline':False]['text':'!   first = lower_bound(lower_key, comp) if left_closed, upper_bound(lower_key, comp) otherwise','line_number':1800,'multiline':False]['text':'!','line_number':1801,'multiline':False]['text':'!   second = upper_bound(upper_key, comp) if right_closed, lower_bound(upper_key, comp) otherwise','line_number':1802,'multiline':False]['text':'!','line_number':1803,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':1804,'multiline':False]['text':'!','line_number':1805,'multiline':False]['text':'! <b>Throws</b>: If `comp` throws.','line_number':1806,'multiline':False]['text':'!','line_number':1807,'multiline':False]['text':'! <b>Note</b>: This function can be more efficient than calling upper_bound','line_number':1808,'multiline':False]['text':'!   and lower_bound for lower_key and upper_key.','line_number':1809,'multiline':False]['text':'!','line_number':1810,'multiline':False]['text':'! <b>Note</b>: Experimental function, the interface might change in future releases.','line_number':1811,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const key_type &,const key_type &,bool,bool)','line_number':1816,'multiline':False]['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const KeyType&,const KeyType&,KeyTypeKeyCompare,bool,bool)','line_number':1820,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a set of','line_number':1825,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':1826,'multiline':False]['text':'!','line_number':1827,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid iterator i belonging to the set','line_number':1828,'multiline':False]['text':'!   that points to the value','line_number':1829,'multiline':False]['text':'!','line_number':1830,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1831,'multiline':False]['text':'!','line_number':1832,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1833,'multiline':False]['text':'!','line_number':1834,'multiline':False]['text':'! <b>Note</b>: This static function is available only if the <i>value traits</i>','line_number':1835,'multiline':False]['text':'!   is stateless.','line_number':1836,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a set of','line_number':1839,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':1840,'multiline':False]['text':'!','line_number':1841,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid const_iterator i belonging to the','line_number':1842,'multiline':False]['text':'!   set that points to the value','line_number':1843,'multiline':False]['text':'!','line_number':1844,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1845,'multiline':False]['text':'!','line_number':1846,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1847,'multiline':False]['text':'!','line_number':1848,'multiline':False]['text':'! <b>Note</b>: This static function is available only if the <i>value traits</i>','line_number':1849,'multiline':False]['text':'!   is stateless.','line_number':1850,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a set of','line_number':1853,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':1854,'multiline':False]['text':'!','line_number':1855,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid iterator i belonging to the set','line_number':1856,'multiline':False]['text':'!   that points to the value','line_number':1857,'multiline':False]['text':'!','line_number':1858,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1859,'multiline':False]['text':'!','line_number':1860,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1861,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a set of','line_number':1864,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':1865,'multiline':False]['text':'!','line_number':1866,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid const_iterator i belonging to the','line_number':1867,'multiline':False]['text':'!   set that points to the value','line_number':1868,'multiline':False]['text':'!','line_number':1869,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1870,'multiline':False]['text':'!','line_number':1871,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1872,'multiline':False]['text':'! <b>Requires</b>: value shall not be in a container.','line_number':1875,'multiline':False]['text':'!','line_number':1876,'multiline':False]['text':'! <b>Effects</b>: init_node puts the hook of a value in a well-known default','line_number':1877,'multiline':False]['text':'!   state.','line_number':1878,'multiline':False]['text':'!','line_number':1879,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1880,'multiline':False]['text':'!','line_number':1881,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1882,'multiline':False]['text':'!','line_number':1883,'multiline':False]['text':'! <b>Note</b>: This function puts the hook in the well-known default state','line_number':1884,'multiline':False]['text':'!   used by auto_unlink and safe hooks.','line_number':1885,'multiline':False]['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':1888,'multiline':False]['text':'! <b>Effects</b>: Unlinks the leftmost node from the container.','line_number':1890,'multiline':False]['text':'!','line_number':1891,'multiline':False]['text':'! <b>Complexity</b>: Average complexity is constant time.','line_number':1892,'multiline':False]['text':'!','line_number':1893,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1894,'multiline':False]['text':'!','line_number':1895,'multiline':False]['text':'! <b>Notes</b>: This function breaks the container and the container can','line_number':1896,'multiline':False]['text':'!   only be used for more unlink_leftmost_without_rebalance calls.','line_number':1897,'multiline':False]['text':'!   This function is normally used to achieve a step by step','line_number':1898,'multiline':False]['text':'!   controlled destruction of the container.','line_number':1899,'multiline':False]['text':'If this is commented does not work with normal_link','line_number':1907,'multiline':False]['text':'! <b>Requires</b>: replace_this must be a valid iterator of *this','line_number':1914,'multiline':False]['text':'!   and with_this must not be inserted in any container.','line_number':1915,'multiline':False]['text':'!','line_number':1916,'multiline':False]['text':'! <b>Effects</b>: Replaces replace_this in its position in the','line_number':1917,'multiline':False]['text':'!   container with with_this. The container does not need to be rebalanced.','line_number':1918,'multiline':False]['text':'!','line_number':1919,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1920,'multiline':False]['text':'!','line_number':1921,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1922,'multiline':False]['text':'!','line_number':1923,'multiline':False]['text':'! <b>Note</b>: This function will break container ordering invariants if','line_number':1924,'multiline':False]['text':'!   with_this is not equivalent to *replace_this according to the','line_number':1925,'multiline':False]['text':'!   ordering rules. This function is faster than erasing and inserting','line_number':1926,'multiline':False]['text':'!   the node, since no rebalancing or comparison is needed.','line_number':1927,'multiline':False]['text':'! <b>Effects</b>: Rebalances the tree.','line_number':1930,'multiline':False]['text':'!','line_number':1931,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1932,'multiline':False]['text':'!','line_number':1933,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1934,'multiline':False]['text':'! <b>Requires</b>: old_root is a node of a tree.','line_number':1937,'multiline':False]['text':'!','line_number':1938,'multiline':False]['text':'! <b>Effects</b>: Rebalances the subtree rooted at old_root.','line_number':1939,'multiline':False]['text':'!','line_number':1940,'multiline':False]['text':'! <b>Returns</b>: The new root of the subtree.','line_number':1941,'multiline':False]['text':'!','line_number':1942,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1943,'multiline':False]['text':'!','line_number':1944,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements in the subtree.','line_number':1945,'multiline':False]['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':1948,'multiline':False]['text':'! <b>Effects</b>: removes "value" from the container.','line_number':1950,'multiline':False]['text':'!','line_number':1951,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1952,'multiline':False]['text':'!','line_number':1953,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic time.','line_number':1954,'multiline':False]['text':'!','line_number':1955,'multiline':False]['text':'! <b>Note</b>: This static function is only usable with non-constant','line_number':1956,'multiline':False]['text':'! time size containers that have stateless comparison functors.','line_number':1957,'multiline':False]['text':'!','line_number':1958,'multiline':False]['text':'! If the user calls','line_number':1959,'multiline':False]['text':'! this function with a constant time size container or stateful comparison','line_number':1960,'multiline':False]['text':'! functor a compilation error will be issued.','line_number':1961,'multiline':False]['text':'! <b>Requires</b>: "source" container's Options can only can differ in the comparison','line_number':1971,'multiline':False]['text':'!   function from *this.','line_number':1972,'multiline':False]['text':'! ','line_number':1973,'multiline':False]['text':'! <b>Effects</b>: Attempts to extract each element in source and insert it into a using','line_number':1974,'multiline':False]['text':'!   the comparison object of *this. If there is an element in a with key equivalent to the','line_number':1975,'multiline':False]['text':'!   key of an element from source, then that element is not extracted from source.','line_number':1976,'multiline':False]['text':'! ','line_number':1977,'multiline':False]['text':'! <b>Postcondition</b>: Pointers and references to the transferred elements of source refer','line_number':1978,'multiline':False]['text':'!   to those same elements but as members of *this. Iterators referring to the transferred','line_number':1979,'multiline':False]['text':'!   elements will continue to refer to their elements, but they now behave as iterators into *this,','line_number':1980,'multiline':False]['text':'!   not into source.','line_number':1981,'multiline':False]['text':'!','line_number':1982,'multiline':False]['text':'! <b>Throws</b>: Nothing unless the comparison object throws.','line_number':1983,'multiline':False]['text':'!','line_number':1984,'multiline':False]['text':'! <b>Complexity</b>: N log(a.size() + N) (N has the value source.size())','line_number':1985,'multiline':False]['text':'! <b>Requires</b>: "source" container's Options can only can differ in the comparison','line_number':2008,'multiline':False]['text':'!   function from *this.','line_number':2009,'multiline':False]['text':'! ','line_number':2010,'multiline':False]['text':'! <b>Effects</b>: Extracts each element in source and insert it into a using','line_number':2011,'multiline':False]['text':'!   the comparison object of *this.','line_number':2012,'multiline':False]['text':'! ','line_number':2013,'multiline':False]['text':'! <b>Postcondition</b>: Pointers and references to the transferred elements of source refer','line_number':2014,'multiline':False]['text':'!   to those same elements but as members of *this. Iterators referring to the transferred','line_number':2015,'multiline':False]['text':'!   elements will continue to refer to their elements, but they now behave as iterators into *this,','line_number':2016,'multiline':False]['text':'!   not into source.','line_number':2017,'multiline':False]['text':'!','line_number':2018,'multiline':False]['text':'! <b>Throws</b>: Nothing unless the comparison object throws.','line_number':2019,'multiline':False]['text':'!','line_number':2020,'multiline':False]['text':'! <b>Complexity</b>: N log(a.size() + N) (N has the value source.size())','line_number':2021,'multiline':False]['text':'! <b>Effects</b>: Asserts the integrity of the container with additional checks provided by the user.','line_number':2043,'multiline':False]['text':'!','line_number':2044,'multiline':False]['text':'! <b>Complexity</b>: Linear time.','line_number':2045,'multiline':False]['text':'!','line_number':2046,'multiline':False]['text':'! <b>Note</b>: The method might not have effect when asserts are turned off (e.g., with NDEBUG).','line_number':2047,'multiline':False]['text':'!   Experimental function, interface might change in future versions.','line_number':2048,'multiline':False]['text':'! <b>Effects</b>: Asserts the integrity of the container.','line_number':2060,'multiline':False]['text':'!','line_number':2061,'multiline':False]['text':'! <b>Complexity</b>: Linear time.','line_number':2062,'multiline':False]['text':'!','line_number':2063,'multiline':False]['text':'! <b>Note</b>: The method has no effect when asserts are turned off (e.g., with NDEBUG).','line_number':2064,'multiline':False]['text':'!   Experimental function, interface might change in future versions.','line_number':2065,'multiline':False]['text':'/ @cond','line_number':2097,'multiline':False]['text':'/ @endcond','line_number':2113,'multiline':False]['text':'! Helper metafunction to define a \c bstree that yields to the same type when the','line_number':2116,'multiline':False]['text':'! same options (either explicitly or implicitly) are used.','line_number':2117,'multiline':False]['text':'/ @cond','line_number':2127,'multiline':False]['text':'/ @endcond','line_number':2149,'multiline':False]['text':'Assert if passed value traits are compatible with the type','line_number':2186,'multiline':False]['text':'namespace intrusive','line_number':2233,'multiline':False]['text':'namespace boost','line_number':2234,'multiline':False]['text':'BOOST_INTRUSIVE_BSTREE_HPP','line_number':2238,'multiline':False]