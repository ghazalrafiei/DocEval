['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/gcc_arm_asm_common.hpp
 *
 * This header contains basic utilities for gcc asm-based ARM backend.
 ','line_number':10,'multiline':True]['text':' A memory barrier is effected using a "co-processor 15" instruction,','line_number':26,'multiline':False]['text':' though a separate assembler mnemonic is available for it in v7.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' "Thumb 1" is a subset of the ARM instruction set that uses a 16-bit encoding.  It','line_number':29,'multiline':False]['text':' doesn't include all instructions and in particular it doesn't include the co-processor','line_number':30,'multiline':False]['text':' instruction used for the memory barrier or the load-locked/store-conditional','line_number':31,'multiline':False]['text':' instructions.  So, if we're compiling in "Thumb 1" mode, we need to wrap all of our','line_number':32,'multiline':False]['text':' asm blocks with code to temporarily change to ARM mode.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' You can only change between ARM and Thumb modes when branching using the bx instruction.','line_number':35,'multiline':False]['text':' bx takes an address specified in a register.  The least significant bit of the address','line_number':36,'multiline':False]['text':' indicates the mode, so 1 is added to indicate that the destination code is Thumb.','line_number':37,'multiline':False]['text':' A temporary register is needed for the address and is passed as an argument to these','line_number':38,'multiline':False]['text':' macros.  It must be one of the "low" registers accessible to Thumb code, specified','line_number':39,'multiline':False]['text':' using the "l" attribute in the asm statement.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' Architecture v7 introduces "Thumb 2", which does include (almost?) all of the ARM','line_number':42,'multiline':False]['text':' instruction set.  (Actually, there was an extension of v6 called v6T2 which supported','line_number':43,'multiline':False]['text':' "Thumb 2" mode, but its architecture manual is no longer available, referring to v7.)','line_number':44,'multiline':False]['text':' So in v7 we don't need to change to ARM mode; we can write "universal','line_number':45,'multiline':False]['text':' assembler" which will assemble to Thumb 2 or ARM code as appropriate.  The only thing','line_number':46,'multiline':False]['text':' we need to do to make this "universal" assembler mode work is to insert "IT" instructions','line_number':47,'multiline':False]['text':' to annotate the conditional instructions.  These are ignored in other modes (e.g. v6),','line_number':48,'multiline':False]['text':' so they can always be present.','line_number':49,'multiline':False]['text':' A note about memory_order_consume. Technically, this architecture allows to avoid','line_number':51,'multiline':False]['text':' unnecessary memory barrier after consume load since it supports data dependency ordering.','line_number':52,'multiline':False]['text':' However, some compiler optimizations may break a seemingly valid code relying on data','line_number':53,'multiline':False]['text':' dependency tracking by injecting bogus branches to aid out of order execution.','line_number':54,'multiline':False]['text':' This may happen not only in Boost.Atomic code but also in user's code, which we have no','line_number':55,'multiline':False]['text':' control of. See this thread: http://lists.boost.org/Archives/boost/2014/06/213890.php.','line_number':56,'multiline':False]['text':' For this reason we promote memory_order_consume to memory_order_acquire.','line_number':57,'multiline':False]['text':' Indicate that start/end macros are empty and the tmpreg is not needed','line_number':64,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_GCC_ARM_ASM_COMMON_HPP_INCLUDED_','line_number':79,'multiline':False]