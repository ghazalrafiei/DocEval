['text':'=============================================================================
    Phoenix V1.2.1
    Copyright (c) 2001-2003 Joel de Guzman
    Copyright (c) 2001-2003 Hartmut Kaiser

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':13,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':18,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':'  Phoenix predefined maximum construct_ limit. This limit defines the maximum','line_number':23,'multiline':False]['text':'  number of parameters supported for calles to the set of construct_ template','line_number':24,'multiline':False]['text':'  functions (lazy object construction, see below). This number defaults to 3.','line_number':25,'multiline':False]['text':'  The actual maximum is rounded up in multiples of 3. Thus, if this value','line_number':26,'multiline':False]['text':'  is 4, the actual limit is 6. The ultimate maximum limit in this','line_number':27,'multiline':False]['text':'  implementation is 15.','line_number':28,'multiline':False]['text':'  PHOENIX_CONSTRUCT_LIMIT should NOT be greater than PHOENIX_LIMIT!','line_number':29,'multiline':False]['text':' ensure PHOENIX_CONSTRUCT_LIMIT <= PHOENIX_LIMIT','line_number':35,'multiline':False]['text':' ensure PHOENIX_CONSTRUCT_LIMIT <= 15','line_number':38,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'  Lazy C++ casts','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':'      The set of lazy C++ cast template classes and functions provide a way','line_number':45,'multiline':False]['text':'      of lazily casting certain type to another during parsing.','line_number':46,'multiline':False]['text':'      The lazy C++ templates are (syntactically) used very much like','line_number':47,'multiline':False]['text':'      the well known C++ casts:','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'          A *a = static_cast_<A *>(...actor returning a convertible type...);','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':'      where the given parameter should be an actor, which eval() function','line_number':52,'multiline':False]['text':'      returns a convertible type.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':55,'multiline':False]['text':'////////////////////////////////','line_number':75,'multiline':False]['text':'////////////////////////////////','line_number':84,'multiline':False]['text':'////////////////////////////////','line_number':104,'multiline':False]['text':'////////////////////////////////','line_number':113,'multiline':False]['text':'////////////////////////////////','line_number':133,'multiline':False]['text':'////////////////////////////////','line_number':142,'multiline':False]['text':'////////////////////////////////','line_number':162,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':'  construct_','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':'      Lazy object construction','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':'      The set of construct_<> template classes and functions provide a way','line_number':177,'multiline':False]['text':'      of lazily constructing certain object from a arbitrary set of','line_number':178,'multiline':False]['text':'      actors during parsing.','line_number':179,'multiline':False]['text':'      The construct_ templates are (syntactically) used very much like','line_number':180,'multiline':False]['text':'      the well known C++ casts:','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':'          A a = construct_<A>(...arbitrary list of actors...);','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':'      where the given parameters are submitted as parameters to the','line_number':185,'multiline':False]['text':'      constructor of the object of type A. (This certainly implies, that','line_number':186,'multiline':False]['text':'      type A has a constructor with a fitting set of parameter types','line_number':187,'multiline':False]['text':'      defined.)','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':'      The maximum number of needed parameters is controlled through the','line_number':190,'multiline':False]['text':'      preprocessor constant PHOENIX_CONSTRUCT_LIMIT. Note though, that this','line_number':191,'multiline':False]['text':'      limit should not be greater than PHOENIX_LIMIT.','line_number':192,'multiline':False]['text':'','line_number':193,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':194,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':854,'multiline':False]['text':'','line_number':855,'multiline':False]['text':'  The following specializations are needed because Borland and CodeWarrior','line_number':856,'multiline':False]['text':'  does not accept default template arguments in nested template classes in','line_number':857,'multiline':False]['text':'  classes (i.e construct_l::result)','line_number':858,'multiline':False]['text':'','line_number':859,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':860,'multiline':False]['text':'////////////////////////////////','line_number':867,'multiline':False]['text':'////////////////////////////////','line_number':875,'multiline':False]['text':'////////////////////////////////','line_number':883,'multiline':False]['text':'////////////////////////////////','line_number':892,'multiline':False]['text':'////////////////////////////////','line_number':901,'multiline':False]['text':'////////////////////////////////','line_number':910,'multiline':False]['text':'////////////////////////////////','line_number':921,'multiline':False]['text':'////////////////////////////////','line_number':931,'multiline':False]['text':'////////////////////////////////','line_number':941,'multiline':False]['text':'////////////////////////////////','line_number':952,'multiline':False]['text':'////////////////////////////////','line_number':962,'multiline':False]['text':'////////////////////////////////','line_number':973,'multiline':False]['text':'////////////////////////////////','line_number':985,'multiline':False]['text':'////////////////////////////////','line_number':996,'multiline':False]['text':'////////////////////////////////','line_number':1007,'multiline':False]['text':'////////////////////////////////','line_number':1024,'multiline':False]['text':'////////////////////////////////','line_number':1036,'multiline':False]['text':'////////////////////////////////','line_number':1050,'multiline':False]['text':'////////////////////////////////','line_number':1065,'multiline':False]['text':'////////////////////////////////','line_number':1082,'multiline':False]['text':'////////////////////////////////','line_number':1104,'multiline':False]['text':'////////////////////////////////','line_number':1127,'multiline':False]['text':'////////////////////////////////','line_number':1154,'multiline':False]['text':'////////////////////////////////','line_number':1181,'multiline':False]['text':'////////////////////////////////','line_number':1209,'multiline':False]['text':'////////////////////////////////','line_number':1239,'multiline':False]['text':'////////////////////////////////','line_number':1272,'multiline':False]['text':'////////////////////////////////','line_number':1307,'multiline':False]['text':'////////////////////////////////','line_number':1345,'multiline':False]['text':'////////////////////////////////','line_number':1383,'multiline':False]['text':'////////////////////////////////','line_number':1422,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1467,'multiline':False]['text':'  namespace phoenix','line_number':1468,'multiline':False]