['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Copyright (C) 2002-2006 Marcin Kalicinski','line_number':2,'multiline':False]['text':' Copyright (C) 2009 Sebastian Redl','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':5,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' For more information, see www.boost.org','line_number':9,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' for std::less','line_number':17,'multiline':False]['text':' for std::allocator','line_number':18,'multiline':False]['text':' Classes','line_number':27,'multiline':False]['text':' Texas-style concepts for documentation only.','line_number':38,'multiline':False]['text':' The key type for which this path works.','line_number':41,'multiline':False]['text':' Return the key that the first segment of the path names.','line_number':43,'multiline':False]['text':' Split the head off the state.','line_number':44,'multiline':False]['text':' Return true if the path is empty.','line_number':47,'multiline':False]['text':' Return true if the path contains a single element.','line_number':50,'multiline':False]['text':' Dump as a std::string, for exception messages.','line_number':53,'multiline':False]['text':'/ If you want to use a custom key type, specialize this struct for it','line_number':68,'multiline':False]['text':'/ and give it a 'type' typedef that specifies your path type. The path','line_number':69,'multiline':False]['text':'/ type must conform to the Path concept described in the documentation.','line_number':70,'multiline':False]['text':'/ This is already specialized for std::basic_string.','line_number':71,'multiline':False]['text':'/ Specialize this struct to specify a default translator between the data','line_number':75,'multiline':False]['text':'/ in a tree whose data_type is Internal, and the external data_type','line_number':76,'multiline':False]['text':'/ specified in a get_value, get, put_value or put operation.','line_number':77,'multiline':False]['text':'/ This is already specialized for Internal being std::basic_string.','line_number':78,'multiline':False]['text':' Typedefs','line_number':86,'multiline':False]['text':'* Implements a path using a std::string as the key. ','line_number':88,'multiline':True]['text':'*
     * A property tree with std::string for key and data, and default
     * comparison.
     ','line_number':91,'multiline':True]['text':'*
     * A property tree with std::string for key and data, and case-insensitive
     * comparison.
     ','line_number':97,'multiline':True]['text':'* Implements a path using a std::wstring as the key. ','line_number':106,'multiline':True]['text':'*
     * A property tree with std::wstring for key and data, and default
     * comparison.
     * @note The type only exists if the platform supports @c wchar_t.
     ','line_number':109,'multiline':True]['text':'*
     * A property tree with std::wstring for key and data, and case-insensitive
     * comparison.
     * @note The type only exists if the platform supports @c wchar_t.
     ','line_number':116,'multiline':True]['text':' Free functions','line_number':126,'multiline':False]['text':'*
     * Swap two property tree instances.
     ','line_number':128,'multiline':True]['text':' Throwing macro to avoid no return warnings portably','line_number':139,'multiline':False]