['text':' Copyright (c) 2003-2005 CrystalClear Software, Inc.
 * Subject to the Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! simple exception for UTC and Daylight savings start/end offsets','line_number':28,'multiline':False]['text':'! simple exception for UTC daylight savings adjustment','line_number':34,'multiline':False]['text':'! A time zone class constructed from a POSIX time zone string','line_number':43,'multiline':False]['text':'! A POSIX time zone string takes the form of:<br>
   * "std offset dst [offset],start[/time],end[/time]" (w/no spaces)
   * 'std' specifies the abbrev of the time zone.<br>
   * 'offset' is the offset from UTC.<br>
   * 'dst' specifies the abbrev of the time zone during daylight savings time.<br>
   * The second offset is how many hours changed during DST. Default=1<br>
   * 'start' and'end' are the dates when DST goes into (and out of) effect.<br>
   * 'offset' takes the form of: [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}<br>
   * 'time' and 'offset' take the same form. Time defaults=02:00:00<br>
   * 'start' and 'end' can be one of three forms:<br>
   * Mm.w.d {month=1-12, week=1-5 (5 is always last), day=0-6}<br>
   * Jn {n=1-365 Feb29 is never counted}<br>
   * n  {n=0-365 Feb29 is counted in leap years}<br>
   * Example "PST-5PDT01:00:00,M4.1.0/02:00:00,M10.1.0/02:00:00"
   * <br>
   * Exceptions will be thrown under these conditions:<br>
   * An invalid date spec (see date class)<br>
   * A boost::local_time::bad_offset exception will be thrown for:<br>
   * A DST start or end offset that is negative or more than 24 hours<br>
   * A UTC zone that is greater than +14 or less than -12 hours<br>
   * A boost::local_time::bad_adjustment exception will be thrown for:<br>
   * A DST adjustment that is 24 hours or more (positive or negative)<br>
   *
   * Note that UTC zone offsets can be greater than +12:
   * http://www.worldtimezone.com/utc/utc+1200.html
   ','line_number':44,'multiline':True]['text':'! Construct from a POSIX time zone string','line_number':85,'multiline':False]['text':'zone_names_("std_name","std_abbrev","no-dst","no-dst"),','line_number':87,'multiline':False]['text':' Work around bug in aC++ compiler: see QXCR1000880488 in the','line_number':95,'multiline':False]['text':' HP bug tracking system','line_number':96,'multiline':False]['text':'!String for the zone when not in daylight savings (eg: EST)','line_number':120,'multiline':False]['text':'!String for the timezone when in daylight savings (eg: EDT)','line_number':125,'multiline':False]['text':'! For those time zones that have no DST, an empty string is used ','line_number':126,'multiline':True]['text':'!String for the zone when not in daylight savings (eg: Eastern Standard Time)','line_number':131,'multiline':False]['text':'! The full STD name is not extracted from the posix time zone string.
     * Therefore, the STD abbreviation is used in it's place ','line_number':132,'multiline':True]['text':'!String for the timezone when in daylight savings (eg: Eastern Daylight Time)','line_number':138,'multiline':False]['text':'! The full DST name is not extracted from the posix time zone string.
     * Therefore, the STD abbreviation is used in it's place. For time zones
     * that have no DST, an empty string is used ','line_number':139,'multiline':True]['text':'! True if zone uses daylight savings adjustments otherwise false','line_number':146,'multiline':False]['text':'! Local time that DST starts -- NADT if has_dst is false','line_number':151,'multiline':False]['text':'! Local time that DST ends -- NADT if has_dst is false','line_number':161,'multiline':False]['text':'! Base offset from UTC for zone (eg: -07:30:00)','line_number':171,'multiline':False]['text':'! Adjustment forward or back made while DST is in effect','line_number':176,'multiline':False]['text':'! Returns a POSIX time_zone string for this object','line_number':182,'multiline':False]['text':' std offset dst [offset],start[/time],end[/time] - w/o spaces','line_number':185,'multiline':False]['text':' std','line_number':189,'multiline':False]['text':' offset','line_number':191,'multiline':False]['text':' inverting the sign guarantees we get two digits','line_number':193,'multiline':False]['text':' dst','line_number':206,'multiline':False]['text':' dst offset','line_number':208,'multiline':False]['text':' inverting the sign guarantees we get two digits','line_number':210,'multiline':False]['text':' start/time','line_number':222,'multiline':False]['text':' end/time','line_number':229,'multiline':False]['text':'! Extract time zone abbreviations for STD & DST as well
     * as the offsets for the time shift that occurs and how
     * much of a shift. At this time full time zone names are
     * NOT extracted so the abbreviations are used in their place ','line_number':247,'multiline':True]['text':' get 'std' name/abbrev','line_number':257,'multiline':False]['text':' get UTC offset','line_number':264,'multiline':False]['text':' get duration','line_number':266,'multiline':False]['text':' base offset must be within range of -12 hours to +14 hours','line_number':273,'multiline':False]['text':' get DST data if given','line_number':281,'multiline':False]['text':' get 'dst' name/abbrev','line_number':285,'multiline':False]['text':' get DST offset if given','line_number':292,'multiline':False]['text':' get duration','line_number':294,'multiline':False]['text':' default DST offset','line_number':301,'multiline':False]['text':' adjustment must be within +|- 1 day','line_number':305,'multiline':False]['text':' full names not extracted so abbrevs used in their place','line_number':312,'multiline':False]['text':' Work around bug in aC++ compiler: see QXCR1000880488 in the','line_number':318,'multiline':False]['text':' HP bug tracking system','line_number':319,'multiline':False]['text':' generate date spec','line_number':330,'multiline':False]['text':' generate durations','line_number':344,'multiline':False]['text':' starting offset','line_number':345,'multiline':False]['text':' default','line_number':350,'multiline':False]['text':' start/end offsets must fall on given date','line_number':353,'multiline':False]['text':' ending offset','line_number':360,'multiline':False]['text':' default','line_number':365,'multiline':False]['text':' start/end offsets must fall on given date','line_number':368,'multiline':False]['text':' Parses out a start/end date spec from a posix time zone string.
     * Date specs come in three possible formats, this function handles
     * the 'M' spec. Ex "M2.2.4" => 2nd month, 2nd week, 4th day .
     ','line_number':376,'multiline':True]['text':' start/end month,week,day','line_number':382,'multiline':False]['text':' Work around bug in aC++ compiler: see QXCR1000880488 in the','line_number':384,'multiline':False]['text':' HP bug tracking system','line_number':385,'multiline':False]['text':'! Julian day. Feb29 is never counted, even in leap years','line_number':413,'multiline':False]['text':' expects range of 1-365','line_number':414,'multiline':False]['text':' Non-leap year','line_number':417,'multiline':False]['text':' skip 'J'','line_number':420,'multiline':False]['text':' skip 'J'','line_number':426,'multiline':False]['text':'! Julian day. Feb29 is always counted, but exception thrown in non-leap years','line_number':441,'multiline':False]['text':' expects range of 0-365','line_number':442,'multiline':False]['text':' args are 0-365','line_number':449,'multiline':False]['text':' pd expects 1-366','line_number':450,'multiline':False]['text':'! helper function used when throwing exceptions','line_number':455,'multiline':False]['text':' namespace boost::local_time','line_number':472,'multiline':False]['text':' _DATE_TIME_POSIX_TIME_ZONE__','line_number':475,'multiline':False]