['text':' (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)','line_number':1,'multiline':False]['text':' (C) Copyright 2004-2007 Jonathan Turkanis','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)','line_number':4,'multiline':False]['text':' See http://www.boost.org/libs/iostreams for documentation.','line_number':6,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Intended as an alternative to type_traits::yes_type and type_traits::no_type.','line_number':9,'multiline':False]['text':' Provides an arbitrary number of types (case_<0>, case_<1>, ...) for','line_number':10,'multiline':False]['text':' determining the results of overload resultion using 'sizeof', plus a uniform','line_number':11,'multiline':False]['text':' means of using the result. yes_type and no_type are typedefs for case_<1>','line_number':12,'multiline':False]['text':' and case_<0>. A single case with negative argument, case_<-1>, is also ','line_number':13,'multiline':False]['text':' provided, for convenience.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' This header may be included any number of times, with','line_number':16,'multiline':False]['text':' BOOST_SELECT_BY_SIZE_MAX_CASE defined to be the largest N such that case_<N>','line_number':17,'multiline':False]['text':' is needed for a particular application. It defaults to 20.','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' This header depends only on Boost.Config and Boost.Preprocessor. Dependence','line_number':20,'multiline':False]['text':' on Type Traits or MPL was intentionally avoided, to leave open the ','line_number':21,'multiline':False]['text':' possibility that select_by_size could be used by these libraries.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' Example usage:','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':'    #define BOOST_SELECT_BY_SIZE_MAX_CASE 7   // (Needed when default was 2)','line_number':26,'multiline':False]['text':'    #include <boost/utility/select_by_size.hpp>','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':'    using namespace boost::utility;','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':'    case_<0> helper(bool);','line_number':31,'multiline':False]['text':'    case_<1> helper(int);','line_number':32,'multiline':False]['text':'    case_<2> helper(unsigned);','line_number':33,'multiline':False]['text':'    case_<3> helper(long);','line_number':34,'multiline':False]['text':'    case_<4> helper(unsigned long);','line_number':35,'multiline':False]['text':'    case_<5> helper(float);','line_number':36,'multiline':False]['text':'    case_<6> helper(double);','line_number':37,'multiline':False]['text':'    case_<7> helper(const char*);','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'    struct test {','line_number':40,'multiline':False]['text':'        static const int value =','line_number':41,'multiline':False]['text':'            select_by_size< sizeof(helper(9876UL)) >::value;','line_number':42,'multiline':False]['text':'        BOOST_STATIC_ASSERT(value == 4);','line_number':43,'multiline':False]['text':'    };','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' For compilers with integral constant expression problems, e.g. Borland 5.x,','line_number':46,'multiline':False]['text':' one can also write','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':'    struct test {','line_number':49,'multiline':False]['text':'        BOOST_SELECT_BY_SIZE(int, value, helper(9876UL));','line_number':50,'multiline':False]['text':'    };','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' to define a static integral constant 'value' equal to','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':'    select_by_size< sizeof(helper(9876UL)) >::value.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' Include guards surround all contents of this header except for explicit','line_number':58,'multiline':False]['text':' specializations of select_by_size for case_<N> with N > 2.','line_number':59,'multiline':False]['text':' The lowest N for which select_by_size< sizeof(case_<N>) > has not been','line_number':64,'multiline':False]['text':' specialized.','line_number':65,'multiline':False]['text':' BOOST_STATIC_CONSTANT.','line_number':68,'multiline':False]['text':' Alternative implementation using max_align. 

#include <boost/type_traits/alignment_of.hpp>
#include <boost/type_traits/type_with_alignment.hpp>

namespace boost { namespace utility {

template<int N>
struct case_ { char c[(N + 1) * alignment_of<detail::max_align>::value]; };

template<unsigned Size>
struct select_by_size {
    BOOST_STATIC_CONSTANT(int, value = 
        (Size / alignment_of<detail::max_align>::value - 1));
};

} } // End namespaces utility, boost.

','line_number':72,'multiline':True]['text':' End alternate implementation.','line_number':90,'multiline':False]['text':'--------------Definition of case_-------------------------------------------//','line_number':94,'multiline':False]['text':'--------------Declaration of select_by_size---------------------------------//','line_number':101,'multiline':False]['text':' End namespaces detail, iostreams, boost.','line_number':105,'multiline':False]['text':'--------------Definition of SELECT_BY_SIZE_SPEC-----------------------------//','line_number':107,'multiline':False]['text':' Sepecializes select_by_size for sizeof(case<n-1>). The decrement is used','line_number':109,'multiline':False]['text':' here because the preprocessor library doesn't handle negative integers.','line_number':110,'multiline':False]['text':'','line_number':120,'multiline':True]['text':'--------------Default specializations of select_by_size---------------------//','line_number':122,'multiline':False]['text':'--------------Definition of SELECT_BY_SIZE----------------------------------//','line_number':129,'multiline':False]['text':'','line_number':143,'multiline':True]['text':' #ifndef BOOST_IOSTREAMS_DETAIL_SELECT_BY_SIZE_HPP_INCLUDED','line_number':145,'multiline':False]['text':'----------Specializations of SELECT_BY_SIZE (outside main inclued guards)---//','line_number':147,'multiline':False]['text':'','line_number':155,'multiline':True]