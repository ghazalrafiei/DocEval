['text':'','line_number':1,'multiline':False]['text':' basic_socket_iostream.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' A macro that should expand to:','line_number':30,'multiline':False]['text':'   template <typename T1, ..., typename Tn>','line_number':31,'multiline':False]['text':'   explicit basic_socket_iostream(T1 x1, ..., Tn xn)','line_number':32,'multiline':False]['text':'     : std::basic_iostream<char>(','line_number':33,'multiline':False]['text':'         &this->detail::socket_iostream_base<','line_number':34,'multiline':False]['text':'           Protocol, Clock, WaitTraits>::streambuf_)','line_number':35,'multiline':False]['text':'   {','line_number':36,'multiline':False]['text':'     if (rdbuf()->connect(x1, ..., xn) == 0)','line_number':37,'multiline':False]['text':'       this->setstate(std::ios_base::failbit);','line_number':38,'multiline':False]['text':'   }','line_number':39,'multiline':False]['text':' This macro should only persist within this file.','line_number':40,'multiline':False]['text':'','line_number':53,'multiline':True]['text':' A macro that should expand to:','line_number':55,'multiline':False]['text':'   template <typename T1, ..., typename Tn>','line_number':56,'multiline':False]['text':'   void connect(T1 x1, ..., Tn xn)','line_number':57,'multiline':False]['text':'   {','line_number':58,'multiline':False]['text':'     if (rdbuf()->connect(x1, ..., xn) == 0)','line_number':59,'multiline':False]['text':'       this->setstate(std::ios_base::failbit);','line_number':60,'multiline':False]['text':'   }','line_number':61,'multiline':False]['text':' This macro should only persist within this file.','line_number':62,'multiline':False]['text':'','line_number':71,'multiline':True]['text':' !defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':73,'multiline':False]['text':' A separate base class is used to ensure that the streambuf is initialised','line_number':81,'multiline':False]['text':' prior to the basic_socket_iostream's basic_iostream base class.','line_number':82,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':107,'multiline':False]['text':' namespace detail','line_number':112,'multiline':False]['text':' Forward declaration with defaulted arguments.','line_number':117,'multiline':False]['text':' defined(BOOST_ASIO_HAS_BOOST_DATE_TIME)','line_number':123,'multiline':False]['text':' && defined(BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':124,'multiline':False]['text':' defined(BOOST_ASIO_HAS_BOOST_DATE_TIME)','line_number':127,'multiline':False]['text':' && defined(BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':128,'multiline':False]['text':' !defined(BOOST_ASIO_BASIC_SOCKET_IOSTREAM_FWD_DECL)','line_number':131,'multiline':False]['text':'/ Iostream interface for a socket.','line_number':133,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':138,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':140,'multiline':False]['text':' These typedefs are intended keep this class's implementation independent','line_number':146,'multiline':False]['text':' of whether it's using Boost.DateClock, Boost.Chrono or std::chrono.','line_number':147,'multiline':False]['text':' defined(BOOST_ASIO_HAS_BOOST_DATE_TIME)','line_number':151,'multiline':False]['text':' && defined(BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':152,'multiline':False]['text':' defined(BOOST_ASIO_HAS_BOOST_DATE_TIME)','line_number':154,'multiline':False]['text':' && defined(BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM)','line_number':155,'multiline':False]['text':'/ The protocol type.','line_number':158,'multiline':False]['text':'/ The endpoint type.','line_number':161,'multiline':False]['text':'/ The clock type.','line_number':164,'multiline':False]['text':'/ (Deprecated: Use time_point.) The time type.','line_number':168,'multiline':False]['text':'/ The time type.','line_number':171,'multiline':False]['text':'/ (Deprecated: Use duration.) The duration type.','line_number':174,'multiline':False]['text':'/ The duration type.','line_number':177,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':183,'multiline':False]['text':'/ Construct a basic_socket_iostream without establishing a connection.','line_number':188,'multiline':False]['text':'/ Construct a basic_socket_iostream from the supplied socket.','line_number':198,'multiline':False]['text':'/ Move-construct a basic_socket_iostream from another.','line_number':211,'multiline':False]['text':'/ Move-assign a basic_socket_iostream from another.','line_number':221,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_IOSTREAM_MOVE)','line_number':229,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':230,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':231,'multiline':False]['text':'/ Establish a connection to an endpoint corresponding to a resolver query.','line_number':234,'multiline':False]['text':'*
   * This constructor automatically establishes a connection based on the
   * supplied resolver query parameters. The arguments are used to construct
   * a resolver query object.
   ','line_number':235,'multiline':True]['text':'/ Establish a connection to an endpoint corresponding to a resolver query.','line_number':258,'multiline':False]['text':'*
   * This function automatically establishes a connection based on the supplied
   * resolver query parameters. The arguments are used to construct a resolver
   * query object.
   ','line_number':259,'multiline':True]['text':'/ Close the connection.','line_number':277,'multiline':False]['text':'/ Return a pointer to the underlying streambuf.','line_number':284,'multiline':False]['text':'/ Get a reference to the underlying socket.','line_number':292,'multiline':False]['text':'/ Get the last error associated with the stream.','line_number':298,'multiline':False]['text':'*
   * @return An \c error_code corresponding to the last error from the stream.
   *
   * @par Example
   * To print the error associated with a failure to establish a connection:
   * @code tcp::iostream s("www.boost.org", "http");
   * if (!s)
   * {
   *   std::cout << "Error: " << s.error().message() << std::endl;
   * } @endcode
   ','line_number':299,'multiline':True]['text':'/ (Deprecated: Use expiry().) Get the stream's expiry time as an absolute','line_number':316,'multiline':False]['text':'/ time.','line_number':317,'multiline':False]['text':'*
   * @return An absolute time value representing the stream's expiry time.
   ','line_number':318,'multiline':True]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':325,'multiline':False]['text':'/ Get the stream's expiry time as an absolute time.','line_number':327,'multiline':False]['text':'*
   * @return An absolute time value representing the stream's expiry time.
   ','line_number':328,'multiline':True]['text':'/ Set the stream's expiry time as an absolute time.','line_number':336,'multiline':False]['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * boost::asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the stream.
   ','line_number':337,'multiline':True]['text':'/ Set the stream's expiry time relative to now.','line_number':350,'multiline':False]['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * boost::asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the timer.
   ','line_number':351,'multiline':True]['text':'/ (Deprecated: Use expiry().) Get the stream's expiry time relative to now.','line_number':365,'multiline':False]['text':'*
   * @return A relative time value representing the stream's expiry time.
   ','line_number':366,'multiline':True]['text':'/ (Deprecated: Use expires_after().) Set the stream's expiry time relative','line_number':374,'multiline':False]['text':'/ to now.','line_number':375,'multiline':False]['text':'*
   * This function sets the expiry time associated with the stream. Stream
   * operations performed after this time (where the operations cannot be
   * completed using the internal buffers) will fail with the error
   * boost::asio::error::operation_aborted.
   *
   * @param expiry_time The expiry time to be used for the timer.
   ','line_number':376,'multiline':True]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':388,'multiline':False]['text':' Disallow copying and assignment.','line_number':391,'multiline':False]['text':' namespace asio','line_number':397,'multiline':False]['text':' namespace boost','line_number':398,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':405,'multiline':False]['text':' !defined(BOOST_ASIO_NO_IOSTREAM)','line_number':407,'multiline':False]['text':' BOOST_ASIO_BASIC_SOCKET_IOSTREAM_HPP','line_number':409,'multiline':False]