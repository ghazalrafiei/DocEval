['text':' boost random/traits.hpp header file
 *
 * Copyright John Maddock 2015
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * These traits classes serve two purposes: they are designed to mostly
 * work out of the box for multiprecision types (ie number types that are
 * C++ class types and not integers or floats from type-traits point of view),
 * they are also a potential point of specialization for user-defined
 * number types.
 *
 * $Id$
 ','line_number':1,'multiline':True]['text':' \cond show_private','line_number':31,'multiline':False]['text':' \endcond','line_number':45,'multiline':False]['text':'* \brief Converts the argument type T to an unsigned type.
   *
   * This trait has a single member `type` which is the unsigned type corresponding to T.
   * Note that
   * if T is signed, then member `type` *should define a type with one more bit precision than T*.  For built-in
   * types this trait defaults to `boost::make_unsigned<T>::type`.  For user defined types it simply asserts that
   * the argument type T is an unsigned integer (using std::numeric_limits).
   * User defined specializations may be provided for other cases.
   ','line_number':46,'multiline':True]['text':' \cond show_private','line_number':57,'multiline':False]['text':' \endcond','line_number':59,'multiline':False]['text':' \cond show_private','line_number':61,'multiline':False]['text':' \endcond','line_number':75,'multiline':False]['text':'* \brief Converts the argument type T to either an unsigned type or an unbounded integer type.
   *
   * This trait has a single member `type` which is either the unsigned type corresponding to T or an unbounded
   * integer type.  This trait is used to generate types suitable for the calculation of a range: as a result
   * if T is signed, then member `type` *should define a type with one more bit precision than T*.  For built-in
   * types this trait defaults to `boost::make_unsigned<T>::type`.  For user defined types it simply asserts that
   * the argument type T is either an unbounded integer, or an unsigned one (using std::numeric_limits).
   * User defined specializations may be provided for other cases.
   ','line_number':76,'multiline':True]['text':' \cond show_private','line_number':87,'multiline':False]['text':' \endcond','line_number':89,'multiline':False]['text':'* \brief Traits class that indicates whether type T is an integer
   ','line_number':91,'multiline':True]['text':'* \brief Traits class that indicates whether type T is a signed integer
   ','line_number':97,'multiline':True]