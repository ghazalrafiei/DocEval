['text':'
 *
 * Copyright (c) 2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         perl_matcher_common.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
  *                common to both the recursive and non-recursive versions.
  ','line_number':12,'multiline':True]['text':' precondition failure: e is not a valid regex.','line_number':46,'multiline':False]['text':' find the value to use for matching word boundaries:','line_number':79,'multiline':False]['text':' find bitmask to use for matching '.':','line_number':81,'multiline':False]['text':' Disable match_any if requested in the state machine:','line_number':83,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' How many states should we allow our machine to visit before giving up?','line_number':95,'multiline':False]['text':' This is a heuristic: it takes the greater of O(N^2) and O(NS^2)','line_number':96,'multiline':False]['text':' where N is the length of the string, and S is the number of states','line_number':97,'multiline':False]['text':' in the machine.  It's tempting to up this to O(N^2S) or even O(N^2S^2)','line_number':98,'multiline':False]['text':' but these take unreasonably amounts of time to bale out in pathological','line_number':99,'multiline':False]['text':' cases.','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Calculate NS^2 first:','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' Now calculate N^2:','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' N^2 can be a very large number indeed, to prevent things getting out','line_number':149,'multiline':False]['text':' of control, cap the max states:','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':'','line_number':154,'multiline':False]['text':' If (the possibly capped) N^2 is larger than our first estimate,','line_number':155,'multiline':False]['text':' use this instead:','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' we don't know how long the sequence is:','line_number':165,'multiline':False]['text':' initialise our stack if we are non-recursive:','line_number':178,'multiline':False]['text':' reset our state machine:','line_number':185,'multiline':False]['text':' unwind all pushed states, apart from anything else this','line_number':204,'multiline':False]['text':' ensures that all the states are correctly destructed','line_number':205,'multiline':False]['text':' not just the memory freed.','line_number':206,'multiline':False]['text':' initialise our stack if we are non-recursive:','line_number':233,'multiline':False]['text':' reset our state machine:','line_number':243,'multiline':False]['text':' start again:','line_number':253,'multiline':False]['text':' If last match was null and match_not_null was not set then increment','line_number':255,'multiline':False]['text':' our start position, otherwise we go into an infinite loop:','line_number':256,'multiline':False]['text':' reset $` start:','line_number':264,'multiline':False]['text':'if((base != search_base) && (base == backstop))','line_number':266,'multiline':False]['text':'   m_match_flags |= match_prev_avail;','line_number':267,'multiline':False]['text':' find out what kind of expression we have:','line_number':276,'multiline':False]['text':' call the appropriate search routine:','line_number':281,'multiline':False]['text':' unwind all pushed states, apart from anything else this','line_number':289,'multiline':False]['text':' ensures that all the states are correctly destructed','line_number':290,'multiline':False]['text':' not just the memory freed.','line_number':291,'multiline':False]['text':'','line_number':320,'multiline':False]['text':' we have a match, reverse the capture information:','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':' reset search postion','line_number':331,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' compare string with what we stored in','line_number':341,'multiline':False]['text':' our records:','line_number':342,'multiline':False]['text':' check the previous value character:','line_number':370,'multiline':False]['text':' we're not yet at the end so *first is always valid:','line_number':396,'multiline':False]['text':' check that we're not in the middle of \r\n sequence','line_number':401,'multiline':False]['text':' indcates whether next character is a word character','line_number':438,'multiline':False]['text':' prev and this character must be opposites:','line_number':441,'multiline':False]['text':' no match if we get to here...','line_number':468,'multiline':False]['text':'
   if(position == last)
      return false;
   // both prev and this character must be m_word_mask:
   bool prev = traits_inst.isctype(*position, m_word_mask);
   {
      bool b;
      if((position == backstop) && ((m_match_flags & match_prev_avail) == 0)) 
         return false;
      else
      {
         --position;
         b = traits_inst.isctype(*position, m_word_mask);
         ++position;
      }
      if(b == prev)
      {
         pstate = pstate->next.p;
         return true;
      }
   }
   return false;
   ','line_number':478,'multiline':True]['text':' can't be starting a word if we're already at the end of input','line_number':507,'multiline':False]['text':' next character isn't a word character','line_number':509,'multiline':False]['text':' no previous input','line_number':513,'multiline':False]['text':' otherwise inside buffer:','line_number':517,'multiline':False]['text':' previous character not non-word','line_number':521,'multiline':False]['text':' OK we have a match:','line_number':523,'multiline':False]['text':' start of buffer can't be end of word','line_number':532,'multiline':False]['text':' previous character wasn't a word character','line_number':536,'multiline':False]['text':' end of buffer but not end of word','line_number':541,'multiline':False]['text':' otherwise inside buffer:','line_number':545,'multiline':False]['text':' next character is a word character','line_number':547,'multiline':False]['text':' if we fall through to here then we've succeeded','line_number':550,'multiline':False]['text':' OK match:','line_number':558,'multiline':False]['text':' OK match:','line_number':568,'multiline':False]['text':'','line_number':576,'multiline':False]['text':' Compare with what we previously matched.','line_number':577,'multiline':False]['text':' Note that this succeeds if the backref did not partisipate','line_number':578,'multiline':False]['text':' in the match, this is in line with ECMAScript, but not Perl','line_number':579,'multiline':False]['text':' or PCRE.','line_number':580,'multiline':False]['text':'','line_number':581,'multiline':False]['text':' let the traits class do the work:','line_number':614,'multiline':False]['text':' return true if marked sub-expression N has been matched:','line_number':720,'multiline':False]['text':' Magic value for a (DEFINE) block:','line_number':725,'multiline':False]['text':' Have we matched subexpression "index"?','line_number':730,'multiline':False]['text':' Check if index is a hash value:','line_number':731,'multiline':False]['text':' Have we recursed into subexpression "index"?','line_number':753,'multiline':False]['text':' If index == 0 then check for any recursion at all, otherwise for recursion to -index-1.','line_number':754,'multiline':False]['text':' Just force a backtrack:','line_number':779,'multiline':False]['text':' skip everything we can't match:','line_number':806,'multiline':False]['text':' run out of characters, try a null match if possible:','line_number':811,'multiline':False]['text':' now try and obtain a match:','line_number':816,'multiline':False]['text':' do search optimised for word starts:','line_number':836,'multiline':False]['text':' do search optimised for line starts:','line_number':868,'multiline':False]['text':'++position;','line_number':893,'multiline':False]['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':912,'multiline':False]['text':' namespace boost','line_number':914,'multiline':False]