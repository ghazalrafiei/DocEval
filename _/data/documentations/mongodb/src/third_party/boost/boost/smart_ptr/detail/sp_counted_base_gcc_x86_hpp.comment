['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'  detail/sp_counted_base_gcc_x86.hpp - g++ on 486+ or AMD64','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.','line_number':13,'multiline':False]['text':'  Copyright 2004-2005 Peter Dimov','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':16,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':17,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':'  Lock-free algorithm by Alexander Terekhov','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':'  Thanks to Ben Hitchings for the #weak + (#shared != 0)','line_number':23,'multiline':False]['text':'  formulation','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' int r = *pw;','line_number':48,'multiline':False]['text':' *pw += dv;','line_number':49,'multiline':False]['text':' return r;','line_number':50,'multiline':False]['text':' outputs (%0, %1)','line_number':58,'multiline':False]['text':' inputs (%2, %3 == %1)','line_number':59,'multiline':False]['text':' clobbers','line_number':60,'multiline':False]['text':'atomic_exchange_and_add( pw, 1 );','line_number':68,'multiline':False]['text':' output (%0)','line_number':74,'multiline':False]['text':' input (%1)','line_number':75,'multiline':False]['text':' clobbers','line_number':76,'multiline':False]['text':' int rv = *pw;','line_number':82,'multiline':False]['text':' if( rv != 0 ) ++*pw;','line_number':83,'multiline':False]['text':' return rv;','line_number':84,'multiline':False]['text':' outputs (%0, %1, %2)','line_number':100,'multiline':False]['text':' input (%3)','line_number':101,'multiline':False]['text':' clobbers','line_number':102,'multiline':False]['text':' #shared','line_number':115,'multiline':False]['text':' #weak + (#shared != 0)','line_number':116,'multiline':False]['text':' nothrow','line_number':124,'multiline':False]['text':' dispose() is called when use_count_ drops to zero, to release','line_number':128,'multiline':False]['text':' the resources managed by *this.','line_number':129,'multiline':False]['text':' nothrow','line_number':131,'multiline':False]['text':' destroy() is called when weak_count_ drops to zero.','line_number':133,'multiline':False]['text':' nothrow','line_number':135,'multiline':False]['text':' true on success','line_number':149,'multiline':False]['text':' nothrow','line_number':154,'multiline':False]['text':' nothrow','line_number':163,'multiline':False]['text':' nothrow','line_number':168,'multiline':False]['text':' nothrow','line_number':176,'multiline':False]['text':' namespace detail','line_number':182,'multiline':False]['text':' namespace boost','line_number':184,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_GCC_X86_HPP_INCLUDED','line_number':186,'multiline':False]