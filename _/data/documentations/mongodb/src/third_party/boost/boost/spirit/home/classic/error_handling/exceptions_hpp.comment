['text':'=============================================================================
    Copyright (c) 2001-2003 Joel de Guzman
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':'  parser_error_base class','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'      This is the base class of parser_error (see below). This may be','line_number':28,'multiline':False]['text':'      used to catch any type of parser error.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':'      This exception shouldn't propagate outside the parser. However to','line_number':31,'multiline':False]['text':'      avoid quirks of many platforms/implementations which fall outside','line_number':32,'multiline':False]['text':'      the C++ standard, we derive parser_error_base from std::exception','line_number':33,'multiline':False]['text':'      to allow a single catch handler to catch all exceptions.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':36,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':'  parser_error class','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':'      Generic parser exception class. This is the base class for all','line_number':58,'multiline':False]['text':'      parser exceptions. The exception holds the iterator position','line_number':59,'multiline':False]['text':'      where the error was encountered in its member variable "where".','line_number':60,'multiline':False]['text':'      The parser_error also holds information regarding the error','line_number':61,'multiline':False]['text':'      (error descriptor) in its member variable "descriptor".','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'      The throw_ function creates and throws a parser_error given','line_number':64,'multiline':False]['text':'      an iterator and an error descriptor.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':67,'multiline':False]['text':'////////////////////////////////','line_number':102,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':'  assertive_parser class','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':'      An assertive_parser class is a parser that throws an exception','line_number':115,'multiline':False]['text':'      in response to a parsing failure. The assertive_parser throws a','line_number':116,'multiline':False]['text':'      parser_error exception rather than returning an unsuccessful','line_number':117,'multiline':False]['text':'      match to signal that the parser failed to match the input.','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':120,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':'  assertion class','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':'      assertive_parsers are never instantiated directly. The assertion','line_number':159,'multiline':False]['text':'      class is used to indirectly create an assertive_parser object.','line_number':160,'multiline':False]['text':'      Before declaring the grammar, we declare some assertion objects.','line_number':161,'multiline':False]['text':'      Examples:','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':'          enum Errors','line_number':164,'multiline':False]['text':'          {','line_number':165,'multiline':False]['text':'              program_expected, begin_expected, end_expected','line_number':166,'multiline':False]['text':'          };','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':'          assertion<Errors>   expect_program(program_expected);','line_number':169,'multiline':False]['text':'          assertion<Errors>   expect_begin(begin_expected);','line_number':170,'multiline':False]['text':'          assertion<Errors>   expect_end(end_expected);','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':'      Now, we can use these assertions as wrappers around parsers:','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':'          expect_end(str_p("end"))','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':'      Take note that although the example uses enums to hold the','line_number':177,'multiline':False]['text':'      information regarding the error (error desccriptor), we are free','line_number':178,'multiline':False]['text':'      to use other types such as integers and strings. Enums are','line_number':179,'multiline':False]['text':'      convenient for error handlers to easily catch since C++ treats','line_number':180,'multiline':False]['text':'      enums as unique types.','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':183,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':'  error_status<T>','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':'      Where T is an attribute type compatible with the match attribute','line_number':204,'multiline':False]['text':'      of the fallback_parser's subject (defaults to nil_t). The class','line_number':205,'multiline':False]['text':'      error_status reports the result of an error handler (see','line_number':206,'multiline':False]['text':'      fallback_parser). result can be one of:','line_number':207,'multiline':False]['text':'','line_number':208,'multiline':False]['text':'          fail:       quit and fail (return a no_match)','line_number':209,'multiline':False]['text':'          retry:      attempt error recovery, possibly moving the scanner','line_number':210,'multiline':False]['text':'          accept:     force success returning a matching length, moving','line_number':211,'multiline':False]['text':'                      the scanner appropriately and returning an attribute','line_number':212,'multiline':False]['text':'                      value','line_number':213,'multiline':False]['text':'          rethrow:    rethrows the error.','line_number':214,'multiline':False]['text':'','line_number':215,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':216,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':233,'multiline':False]['text':'','line_number':234,'multiline':False]['text':'  fallback_parser class','line_number':235,'multiline':False]['text':'','line_number':236,'multiline':False]['text':'      Handles exceptions of type parser_error<ErrorDescrT, IteratorT>','line_number':237,'multiline':False]['text':'      thrown somewhere inside its embedded ParserT object. The class','line_number':238,'multiline':False]['text':'      sets up a try block before delegating parsing to its subject.','line_number':239,'multiline':False]['text':'      When an exception is caught, the catch block then calls the','line_number':240,'multiline':False]['text':'      HandlerT object. HandlerT may be a function or a functor (with','line_number':241,'multiline':False]['text':'      an operator() member function) compatible with the interface:','line_number':242,'multiline':False]['text':'','line_number':243,'multiline':False]['text':'          error_status<T>','line_number':244,'multiline':False]['text':'          handler(ScannerT const& scan, ErrorT error);','line_number':245,'multiline':False]['text':'','line_number':246,'multiline':False]['text':'      Where scan points to the scanner state prior to parsing and error','line_number':247,'multiline':False]['text':'      is the error that arose (see parser_error). The handler must','line_number':248,'multiline':False]['text':'      return an error_status<T> object (see above).','line_number':249,'multiline':False]['text':'','line_number':250,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':251,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':292,'multiline':False]['text':'','line_number':293,'multiline':False]['text':'  guard class','line_number':294,'multiline':False]['text':'','line_number':295,'multiline':False]['text':'      fallback_parser objects are not instantiated directly. The guard','line_number':296,'multiline':False]['text':'      class is used to indirectly create a fallback_parser object.','line_number':297,'multiline':False]['text':'      guards are typically predeclared just like assertions (see the','line_number':298,'multiline':False]['text':'      assertion class above; the example extends the previous example','line_number':299,'multiline':False]['text':'      introduced in the assertion class above):','line_number':300,'multiline':False]['text':'','line_number':301,'multiline':False]['text':'          guard<Errors>   my_guard;','line_number':302,'multiline':False]['text':'','line_number':303,'multiline':False]['text':'      Errors, in this example is the error descriptor type we want to','line_number':304,'multiline':False]['text':'      detect; This is essentially the ErrorDescrT template parameter','line_number':305,'multiline':False]['text':'      of the fallback_parser class.','line_number':306,'multiline':False]['text':'','line_number':307,'multiline':False]['text':'      my_guard may now be used in a grammar declaration as:','line_number':308,'multiline':False]['text':'','line_number':309,'multiline':False]['text':'          my_guard(p)[h]','line_number':310,'multiline':False]['text':'','line_number':311,'multiline':False]['text':'      where p is a parser, h is a function or functor compatible with','line_number':312,'multiline':False]['text':'      fallback_parser's HandlerT (see above).','line_number':313,'multiline':False]['text':'','line_number':314,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':315,'multiline':False]['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':360,'multiline':False]