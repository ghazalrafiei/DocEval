['text':' Copyright 2003-2020 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]['text':' Common code for sequenced_index memfuns having templatized and
 * non-templatized versions.
 ','line_number':30,'multiline':True]['text':' sorting  ','line_number':74,'multiline':True]['text':' auxiliary stuff ','line_number':76,'multiline':True]['text':' Some versions of CGG require a bogus typename in counter_spc
 * inside sequenced_index_sort if the following is defined
 * also inside sequenced_index_sort.
 ','line_number':103,'multiline':True]['text':' Musser's mergesort, see http://www.cs.rpi.edu/~musser/gp/List/lists1.html.
   * The implementation is a little convoluted: in the original code
   * counter elements and carry are std::lists: here we do not want
   * to use multi_index instead, so we do things at a lower level, managing
   * directly the internal node representation.
   * Incidentally, the implementations I've seen of this algorithm (SGI,
   * Dinkumware, STLPort) are not exception-safe: this is. Moreover, we do not
   * use any dynamic storage.
   ','line_number':118,'multiline':True]['text':' namespace multi_index::detail ','line_number':197,'multiline':True]['text':' namespace multi_index ','line_number':199,'multiline':True]['text':' namespace boost ','line_number':201,'multiline':True]