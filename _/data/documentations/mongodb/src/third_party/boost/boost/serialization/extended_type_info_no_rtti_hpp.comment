['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':4,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':5,'multiline':False]['text':' extended_type_info_no_rtti.hpp: implementation for version that depends','line_number':10,'multiline':False]['text':' on runtime typing (rtti - typeid) but uses a user specified string','line_number':11,'multiline':False]['text':' as the portable class identifier.','line_number':12,'multiline':False]['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .','line_number':14,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':15,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':16,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':17,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':19,'multiline':False]['text':' hijack serialization access','line_number':36,'multiline':False]['text':' must be the last header','line_number':39,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]['text':' define a special type_info that doesn't depend on rtti which is not','line_number':48,'multiline':False]['text':' available in all situations.','line_number':49,'multiline':False]['text':' common base class to share type_info_key.  This is used to','line_number':53,'multiline':False]['text':' identify the method used to keep track of the extended type','line_number':54,'multiline':False]['text':' no_rtti_system','line_number':68,'multiline':False]['text':' if your program traps here - you failed to','line_number':83,'multiline':False]['text':' export a guid for this type.  the no_rtti','line_number':84,'multiline':False]['text':' system requires export for types serialized','line_number':85,'multiline':False]['text':' as pointers.','line_number':86,'multiline':False]['text':' find the type that corresponds to the most derived type.','line_number':111,'multiline':False]['text':' this implementation doesn't depend on typeid() but assumes','line_number':112,'multiline':False]['text':' that the specified type has a function of the following signature.','line_number':113,'multiline':False]['text':' A common implemention of such a function is to define as a virtual','line_number':114,'multiline':False]['text':' function. So if the is not a polymorphic type it's likely an error','line_number':115,'multiline':False]['text':' count up the arguments','line_number':128,'multiline':False]['text':' too many arguments','line_number':143,'multiline':False]['text':' throw exception here?','line_number':144,'multiline':False]['text':'delete static_cast<T const * const>(p) ;','line_number':152,'multiline':False]['text':' namespace serialization','line_number':156,'multiline':False]['text':' namespace boost','line_number':157,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':159,'multiline':False]['text':' If no other implementation has been designated as default,','line_number':160,'multiline':False]['text':' use this one.  To use this implementation as the default, specify it','line_number':161,'multiline':False]['text':' before any of the other headers.','line_number':162,'multiline':False]['text':' namespace serialization','line_number':173,'multiline':False]['text':' namespace boost','line_number':174,'multiline':False]['text':' pops abi_suffix.hpp pragmas','line_number':180,'multiline':False]['text':' BOOST_EXTENDED_TYPE_INFO_NO_RTTI_HPP','line_number':182,'multiline':False]