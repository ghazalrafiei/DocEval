['text':' Copyright Vladimir Prus 2004.','line_number':1,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt','line_number':3,'multiline':False]['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'* Class which specifies how the option's value is to be parsed
        and converted into C++ types.
    ','line_number':23,'multiline':True]['text':'* Returns the name of the option. The name is only meaningful
            for automatic help message.
         ','line_number':28,'multiline':True]['text':'* The minimum number of tokens for this option that
            should be present on the command line. ','line_number':33,'multiline':True]['text':'* The maximum number of tokens for this option that
            should be present on the command line. ','line_number':37,'multiline':True]['text':'* Returns true if values from different sources should be composed.
            Otherwise, value from the first source is used and values from
            other sources are discarded.
        ','line_number':41,'multiline':True]['text':'* Returns true if value must be given. Non-optional value

        ','line_number':47,'multiline':True]['text':'* Parses a group of tokens that specify a value of option.
            Stores the result in 'value_store', using whatever representation
            is desired. May be be called several times if value of the same
            option is specified more than once.
        ','line_number':52,'multiline':True]['text':'* Called to assign default value to 'value_store'. Returns
            true if default value is assigned, and false if no default
            value exists. ','line_number':62,'multiline':True]['text':'* Called when final value of an option is determined. 
        ','line_number':67,'multiline':True]['text':'* Helper class which perform necessary character conversions in the 
        'parse' method and forwards the data further.
    ','line_number':74,'multiline':True]['text':' Nothing here. Specializations to follow.','line_number':79,'multiline':False]['text':'* Helper conversion class for values that accept ascii
        strings as input.
        Overrides the 'parse' method and defines new 'xparse'
        method taking std::string. Depending on whether input
        to parse is ascii or UTF8, will pass it to xparse unmodified,
        or with UTF8->ascii conversion.
    ','line_number':82,'multiline':True]['text':' base overrides','line_number':92,'multiline':False]['text':' interface for derived classes.','line_number':96,'multiline':False]['text':'* Helper conversion class for values that accept ascii
        strings as input.
        Overrides the 'parse' method and defines new 'xparse'
        method taking std::wstring. Depending on whether input
        to parse is ascii or UTF8, will recode input to Unicode, or
        pass it unmodified.
    ','line_number':102,'multiline':True]['text':' base overrides','line_number':112,'multiline':False]['text':' interface for derived classes.','line_number':116,'multiline':False]['text':'* Class which specifies a simple handling of a value: the value will
        have string type and only one token is allowed. ','line_number':124,'multiline':True]['text':'* If 'value_store' is already initialized, or new_tokens
            has more than one elements, throws. Otherwise, assigns
            the first string from 'new_tokens' to 'value_store', without
            any modifications.
         ','line_number':142,'multiline':True]['text':'* Does nothing. ','line_number':150,'multiline':True]['text':'* Does nothing. ','line_number':153,'multiline':True]['text':'* Base class for all option that have a fixed type, and are
        willing to announce this type to the outside world.
        Any 'value_semantics' for which you want to find out the
        type can be dynamic_cast-ed to typed_value_base. If conversion
        succeeds, the 'type' method can be called.
    ','line_number':160,'multiline':True]['text':' Returns the type of the value described by this','line_number':169,'multiline':False]['text':' object.','line_number':170,'multiline':False]['text':' Not really needed, since deletion from this','line_number':172,'multiline':False]['text':' class is silly, but just in case.','line_number':173,'multiline':False]['text':'* Class which handles value of a specific type. ','line_number':179,'multiline':True]['text':'* Ctor. The 'store_to' parameter tells where to store
            the value when it's known. The parameter can be NULL. ','line_number':187,'multiline':True]['text':'* Specifies default value, which will be used
            if none is explicitly specified. The type 'T' should
            provide operator<< for ostream.
        ','line_number':195,'multiline':True]['text':'* Specifies default value, which will be used
            if none is explicitly specified. Unlike the above overload,
            the type 'T' need not provide operator<< for ostream,
            but textual representation of default value must be provided
            by the user.
        ','line_number':206,'multiline':True]['text':'* Specifies an implicit value, which will be used
            if the option is given, but without an adjacent value.
            Using this implies that an explicit value is optional,
        ','line_number':219,'multiline':True]['text':'* Specifies the name used to to the value in help message.  ','line_number':231,'multiline':True]['text':'* Specifies an implicit value, which will be used
            if the option is given, but without an adjacent value.
            Using this implies that an explicit value is optional, but if
            given, must be strictly adjacent to the option, i.e.: '-ovalue'
            or '--option=value'.  Giving '-o' or '--option' will cause the
            implicit value to be applied.
            Unlike the above overload, the type 'T' need not provide
            operator<< for ostream, but textual representation of default
            value must be provided by the user.
        ','line_number':238,'multiline':True]['text':'* Specifies a function to be called when the final value
            is determined. ','line_number':255,'multiline':True]['text':'* Specifies that the value is composing. See the 'is_composing' 
            method for explanation. 
        ','line_number':263,'multiline':True]['text':'* Specifies that the value can span multiple tokens. 
        ','line_number':272,'multiline':True]['text':'* Specifies that no tokens may be provided as the value of
            this option, which means that only presense of the option
            is significant. For such option to be useful, either the
            'validate' function should be specialized, or the 
            'implicit_value' method should be also used. In most
            cases, you can use the 'bool_switch' function instead of
            using this method. ','line_number':280,'multiline':True]['text':'* Specifies that the value must occur. ','line_number':293,'multiline':True]['text':' value semantic overrides','line_number':300,'multiline':False]['text':'* Creates an instance of the 'validator' class and calls
            its operator() to perform the actual conversion. ','line_number':327,'multiline':True]['text':'* If default value was specified via previous call to 
            'default_value', stores that value into 'value_store'.
            Returns true if default value was stored.
        ','line_number':333,'multiline':True]['text':'* If an address of variable to store value was specified
            when creating *this, stores the value there. Otherwise,
            does nothing. ','line_number':347,'multiline':True]['text':' typed_value_base overrides','line_number':352,'multiline':False]['text':' Default value is stored as boost::any and not','line_number':365,'multiline':False]['text':' as boost::optional to avoid unnecessary instantiations.','line_number':366,'multiline':False]['text':'* Creates a typed_value<T> instance. This function is the primary
        method to create value_semantic instance for a specific type, which
        can later be passed to 'option_description' constructor.
        The second overload is used when it's additionally desired to store the 
        value of option into program variable.
    ','line_number':377,'multiline':True]['text':'* @overload 
    ','line_number':387,'multiline':True]['text':'* Creates a typed_value<T> instance. This function is the primary
        method to create value_semantic instance for a specific type, which
        can later be passed to 'option_description' constructor.
    ','line_number':393,'multiline':True]['text':'* @overload   
    ','line_number':401,'multiline':True]['text':'* Works the same way as the 'value<bool>' function, but the created
        value_semantic won't accept any explicit value. So, if the option 
        is present on the command line, the value will be 'true'.
    ','line_number':407,'multiline':True]['text':'* @overload
    ','line_number':414,'multiline':True]