['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':9,'multiline':False]['text':' binary_from_base64.hpp','line_number':10,'multiline':False]['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .','line_number':12,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software','line_number':13,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':17,'multiline':False]['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':31,'multiline':False]['text':' convert base64 characters to binary data','line_number':32,'multiline':False]['text':' render '=' as 0','line_number':44,'multiline':False]['text':' metrowerks trips this assertion - how come?','line_number':50,'multiline':False]['text':' namespace detail','line_number':65,'multiline':False]['text':' note: what we would like to do is','line_number':67,'multiline':False]['text':' template<class Base, class CharType = typename Base::value_type>','line_number':68,'multiline':False]['text':'  typedef transform_iterator<','line_number':69,'multiline':False]['text':'      from_6_bit<CharType>,','line_number':70,'multiline':False]['text':'      transform_width<Base, 6, sizeof(Base::value_type) * 8, CharType>','line_number':71,'multiline':False]['text':'  > base64_from_binary;','line_number':72,'multiline':False]['text':' but C++ won't accept this.  Rather than using a "type generator" and','line_number':73,'multiline':False]['text':' using a different syntax, make a derivation which should be equivalent.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' Another issue addressed here is that the transform_iterator doesn't have','line_number':76,'multiline':False]['text':' a templated constructor.  This makes it incompatible with the dataflow','line_number':77,'multiline':False]['text':' ideal.  This is also addressed here.','line_number':78,'multiline':False]['text':' make composible buy using templated constructor','line_number':96,'multiline':False]['text':' intel 7.1 doesn't like default copy constructor','line_number':104,'multiline':False]['text':'    binary_from_base64(){};','line_number':111,'multiline':False]['text':' namespace iterators','line_number':114,'multiline':False]['text':' namespace archive','line_number':115,'multiline':False]['text':' namespace boost','line_number':116,'multiline':False]['text':' BOOST_ARCHIVE_ITERATORS_BINARY_FROM_BASE64_HPP','line_number':118,'multiline':False]