['text':'','line_number':1,'multiline':False]['text':' ip/basic_endpoint.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_HASH)','line_number':25,'multiline':False]['text':' !defined(BOOST_ASIO_NO_IOSTREAM)','line_number':29,'multiline':False]['text':'/ Type used for storing port numbers.','line_number':37,'multiline':False]['text':'/ Describes an endpoint for a version-independent IP socket.','line_number':40,'multiline':False]['text':'*
 * The boost::asio::ip::basic_endpoint class template describes an endpoint that
 * may be associated with a particular socket.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Concepts:
 * Endpoint.
 ','line_number':41,'multiline':True]['text':'/ The protocol type associated with the endpoint.','line_number':56,'multiline':False]['text':'/ The type of the endpoint structure. This type is dependent on the','line_number':59,'multiline':False]['text':'/ underlying implementation of the socket layer.','line_number':60,'multiline':False]['text':'/ Default constructor.','line_number':67,'multiline':False]['text':'/ Construct an endpoint using a port number, specified in the host's byte','line_number':73,'multiline':False]['text':'/ order. The IP address will be the any address (i.e. INADDR_ANY or','line_number':74,'multiline':False]['text':'/ in6addr_any). This constructor would typically be used for accepting new','line_number':75,'multiline':False]['text':'/ connections.','line_number':76,'multiline':False]['text':'*
   * @par Examples
   * To initialise an IPv4 TCP endpoint for port 1234, use:
   * @code
   * boost::asio::ip::tcp::endpoint ep(boost::asio::ip::tcp::v4(), 1234);
   * @endcode
   *
   * To specify an IPv6 UDP endpoint for port 9876, use:
   * @code
   * boost::asio::ip::udp::endpoint ep(boost::asio::ip::udp::v6(), 9876);
   * @endcode
   ','line_number':77,'multiline':True]['text':'/ Construct an endpoint using a port number and an IP address. This','line_number':95,'multiline':False]['text':'/ constructor may be used for accepting connections on a specific interface','line_number':96,'multiline':False]['text':'/ or for making a connection to a remote endpoint.','line_number':97,'multiline':False]['text':'/ Copy constructor.','line_number':104,'multiline':False]['text':'/ Move constructor.','line_number':111,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':116,'multiline':False]['text':'/ Assign from another endpoint.','line_number':118,'multiline':False]['text':'/ Move-assign from another endpoint.','line_number':126,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':132,'multiline':False]['text':'/ The protocol associated with the endpoint.','line_number':134,'multiline':False]['text':'/ Get the underlying endpoint in the native type.','line_number':142,'multiline':False]['text':'/ Get the underlying endpoint in the native type.','line_number':148,'multiline':False]['text':'/ Get the underlying size of the endpoint in the native type.','line_number':154,'multiline':False]['text':'/ Set the underlying size of the endpoint in the native type.','line_number':160,'multiline':False]['text':'/ Get the capacity of the endpoint in the native type.','line_number':166,'multiline':False]['text':'/ Get the port associated with the endpoint. The port number is always in','line_number':172,'multiline':False]['text':'/ the host's byte order.','line_number':173,'multiline':False]['text':'/ Set the port associated with the endpoint. The port number is always in','line_number':179,'multiline':False]['text':'/ the host's byte order.','line_number':180,'multiline':False]['text':'/ Get the IP address associated with the endpoint.','line_number':186,'multiline':False]['text':'/ Set the IP address associated with the endpoint.','line_number':192,'multiline':False]['text':'/ Compare two endpoints for equality.','line_number':198,'multiline':False]['text':'/ Compare two endpoints for inequality.','line_number':205,'multiline':False]['text':'/ Compare endpoints for ordering.','line_number':212,'multiline':False]['text':'/ Compare endpoints for ordering.','line_number':219,'multiline':False]['text':'/ Compare endpoints for ordering.','line_number':226,'multiline':False]['text':'/ Compare endpoints for ordering.','line_number':233,'multiline':False]['text':' The underlying IP endpoint.','line_number':241,'multiline':False]['text':'/ Output an endpoint as a string.','line_number':247,'multiline':False]['text':'*
 * Used to output a human-readable string for a specified endpoint.
 *
 * @param os The output stream to which the string will be written.
 *
 * @param endpoint The endpoint to be written.
 *
 * @return The output stream.
 *
 * @relates boost::asio::ip::basic_endpoint
 ','line_number':248,'multiline':True]['text':' !defined(BOOST_ASIO_NO_IOSTREAM)','line_number':264,'multiline':False]['text':' namespace ip','line_number':266,'multiline':False]['text':' namespace asio','line_number':267,'multiline':False]['text':' namespace boost','line_number':268,'multiline':False]['text':' namespace std','line_number':286,'multiline':False]['text':' defined(BOOST_ASIO_HAS_STD_HASH)','line_number':287,'multiline':False]['text':' BOOST_ASIO_IP_BASIC_ENDPOINT_HPP','line_number':293,'multiline':False]