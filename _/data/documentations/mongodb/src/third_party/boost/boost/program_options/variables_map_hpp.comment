['text':' Copyright Vladimir Prus 2002-2004.','line_number':1,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt','line_number':3,'multiline':False]['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' 'boost::program_options::variable_value::v' : class 'boost::any' needs to have dll-interface to be used by clients of class 'boost::program_options::variable_value','line_number':21,'multiline':False]['text':' forward declaration','line_number':32,'multiline':False]['text':'* Stores in 'm' all options that are defined in 'options'.
        If 'm' already has a non-defaulted value of an option, that value
        is not changed, even if 'options' specify some value.
    ','line_number':34,'multiline':True]['text':'* Stores in 'm' all options that are defined in 'options'.
        If 'm' already has a non-defaulted value of an option, that value
        is not changed, even if 'options' specify some value.
        This is wide character variant.
    ','line_number':42,'multiline':True]['text':'* Runs all 'notify' function for options in 'm'. ','line_number':52,'multiline':True]['text':'* Class holding value of option. Contains details about how the
        value is set and allows to conveniently obtain the value.
    ','line_number':55,'multiline':True]['text':'* If stored value if of type T, returns that value. Otherwise,
            throws boost::bad_any_cast exception. ','line_number':65,'multiline':True]['text':'* @overload ','line_number':71,'multiline':True]['text':'/ Returns true if no value is stored.','line_number':77,'multiline':False]['text':'* Returns true if the value was not explicitly
            given, but has default value. ','line_number':79,'multiline':True]['text':'* Returns the contained value. ','line_number':82,'multiline':True]['text':'* Returns the contained value. ','line_number':85,'multiline':True]['text':' Internal reference to value semantic. We need to run','line_number':90,'multiline':False]['text':' notifications when *final* values of options are known, and','line_number':91,'multiline':False]['text':' they are known only after all sources are stored. By that','line_number':92,'multiline':False]['text':' time options_description for the first source might not','line_number':93,'multiline':False]['text':' be easily accessible, so we need to store semantic here.','line_number':94,'multiline':False]['text':'* Implements string->string mapping with convenient value casting
        facilities. ','line_number':104,'multiline':True]['text':'* Obtains the value of variable 'name', from *this and
            possibly from the chain of variable maps.

            - if there's no value in *this.
                - if there's next variable map, returns value from it
                - otherwise, returns empty value

            - if there's defaulted value
                - if there's next variable map, which has a non-defaulted
                  value, return that
                - otherwise, return value from *this

            - if there's a non-defaulted value, returns it.
        ','line_number':113,'multiline':True]['text':'* Sets next variable map, which will be used to find
           variables not found in *this. ','line_number':129,'multiline':True]['text':'* Returns value of variable 'name' stored in *this, or
            empty value otherwise. ','line_number':134,'multiline':True]['text':'* Concrete variables map which store variables in real map.

        This class is derived from std::map<std::string, variable_value>,
        so you can use all map operators to examine its content.
    ','line_number':141,'multiline':True]['text':' Resolve conflict between inherited operators.','line_number':153,'multiline':False]['text':' Override to clear some extra fields.','line_number':157,'multiline':False]['text':'* Implementation of abstract_variables_map::get
            which does 'find' in *this. ','line_number':163,'multiline':True]['text':'* Names of option with 'final' values \-- which should not
            be changed by subsequence assignments. ','line_number':167,'multiline':True]['text':'* Names of required options, filled by parser which has
            access to options_description.
            The map values are the "canonical" names for each corresponding option.
            This is useful in creating diagnostic messages when the option is absent. ','line_number':176,'multiline':True]['text':'
     * Templates/inlines
     ','line_number':184,'multiline':True]