['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Parts of the pthread code come from Boost Threads code.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':13,'multiline':False]['text':'Experimental...','line_number':38,'multiline':False]['text':'spin_mutex is used','line_number':42,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':55,'multiline':False]['text':'!\file','line_number':57,'multiline':False]['text':'!Describes a mutex class that can be placed in memory shared by','line_number':58,'multiline':False]['text':'!several processes.','line_number':59,'multiline':False]['text':'!Wraps a interprocess_mutex that can be placed in shared memory and can be','line_number':66,'multiline':False]['text':'!shared between processes. Allows timed lock tries','line_number':67,'multiline':False]['text':'Non-copyable','line_number':71,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':89,'multiline':False]['text':'!Constructor.','line_number':92,'multiline':False]['text':'!Throws interprocess_exception on error.','line_number':93,'multiline':False]['text':'!Destructor. If any process uses the mutex after the destructor is called','line_number':96,'multiline':False]['text':'!the result is undefined. Does not throw.','line_number':97,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':100,'multiline':False]['text':'!','line_number':101,'multiline':False]['text':'!Effects: The calling thread tries to obtain ownership of the mutex, and','line_number':102,'multiline':False]['text':'!   if another thread has ownership of the mutex, it waits until it can','line_number':103,'multiline':False]['text':'!   obtain the ownership. If a thread takes ownership of the mutex the','line_number':104,'multiline':False]['text':'!   mutex must be unlocked by the same mutex.','line_number':105,'multiline':False]['text':'!Throws: interprocess_exception on error.','line_number':106,'multiline':False]['text':'! ','line_number':107,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':108,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':109,'multiline':False]['text':'!   an exception could be thrown.','line_number':110,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':113,'multiline':False]['text':'!','line_number':114,'multiline':False]['text':'!Effects: The calling thread tries to obtain ownership of the mutex, and','line_number':115,'multiline':False]['text':'!   if another thread has ownership of the mutex returns immediately.','line_number':116,'multiline':False]['text':'!Returns: If the thread acquires ownership of the mutex, returns true, if','line_number':117,'multiline':False]['text':'!   the another thread has ownership of the mutex, returns false.','line_number':118,'multiline':False]['text':'!Throws: interprocess_exception on error.','line_number':119,'multiline':False]['text':'! ','line_number':120,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':121,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':122,'multiline':False]['text':'!   an exception could be thrown.','line_number':123,'multiline':False]['text':'!Requires: The calling thread does not own the mutex.','line_number':126,'multiline':False]['text':'!','line_number':127,'multiline':False]['text':'!Effects: The calling thread will try to obtain exclusive ownership of the','line_number':128,'multiline':False]['text':'!   mutex if it can do so in until the specified time is reached. If the','line_number':129,'multiline':False]['text':'!   mutex supports recursive locking, the mutex must be unlocked the same','line_number':130,'multiline':False]['text':'!   number of times it is locked.','line_number':131,'multiline':False]['text':'!Returns: If the thread acquires ownership of the mutex, returns true, if','line_number':132,'multiline':False]['text':'!   the timeout expires returns false.','line_number':133,'multiline':False]['text':'!Throws: interprocess_exception on error.','line_number':134,'multiline':False]['text':'! ','line_number':135,'multiline':False]['text':'!Note: A program may deadlock if the thread that has ownership calls ','line_number':136,'multiline':False]['text':'!   this function. If the implementation can detect the deadlock,','line_number':137,'multiline':False]['text':'!   an exception could be thrown.','line_number':138,'multiline':False]['text':'!Same as `timed_lock`, but this function is modeled after the','line_number':142,'multiline':False]['text':'!standard library interface.','line_number':143,'multiline':False]['text':'!Same as `timed_lock`, but this function is modeled after the','line_number':147,'multiline':False]['text':'!standard library interface.','line_number':148,'multiline':False]['text':'!Effects: The calling thread releases the exclusive ownership of the mutex.','line_number':152,'multiline':False]['text':'!Throws: interprocess_exception on error.','line_number':153,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':165,'multiline':False]['text':'namespace interprocess {','line_number':168,'multiline':False]['text':'namespace boost {','line_number':169,'multiline':False]['text':'namespace interprocess {','line_number':192,'multiline':False]['text':'namespace boost {','line_number':193,'multiline':False]['text':'BOOST_INTERPROCESS_MUTEX_HPP','line_number':197,'multiline':False]