['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2012-2012.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]['text':'! \file','line_number':12,'multiline':False]['text':'! This header defines core utilities to ease the development','line_number':13,'multiline':False]['text':'! of move-aware functions. This header minimizes dependencies','line_number':14,'multiline':False]['text':'! from other libraries.','line_number':15,'multiline':False]['text':'forceinline','line_number':29,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':'                            move()','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':48,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':'                            forward()','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':87,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':'                        move_if_not_lvalue_reference()','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':115,'multiline':False]['text':'namespace boost','line_number':158,'multiline':False]['text':'#if defined(BOOST_NO_CXX11_RVALUE_REFERENCES) && !defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':160,'multiline':False]['text':'namespace boost','line_number':170,'multiline':False]['text':'!BOOST_MOVE_USE_STANDARD_LIBRARY_MOVE','line_number':172,'multiline':False]['text':'! This trait's internal boolean `value` is false in compilers with rvalue references','line_number':176,'multiline':False]['text':'! and true in compilers without rvalue references.','line_number':177,'multiline':False]['text':'!','line_number':178,'multiline':False]['text':'! A user can specialize this trait for a type T to false to SFINAE out `move` and `forward`','line_number':179,'multiline':False]['text':'! so that the user can define a different move emulation for that type in namespace boost','line_number':180,'multiline':False]['text':'! (e.g. another Boost library for its types) and avoid any overload ambiguity.','line_number':181,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':'                                  move','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':192,'multiline':False]['text':'! This function provides a way to convert a reference into a rvalue reference','line_number':195,'multiline':False]['text':'! in compilers with rvalue references. For other compilers if `T` is Boost.Move','line_number':196,'multiline':False]['text':'! enabled type then it converts `T&` into <tt>::boost::rv<T> &</tt> so that','line_number':197,'multiline':False]['text':'! move emulation is activated, else it returns `T &`.','line_number':198,'multiline':False]['text':'Old move approach, lvalues could bind to rvalue references','line_number':204,'multiline':False]['text':'BOOST_MOVE_OLD_RVALUE_REF_BINDING_RULES','line_number':209,'multiline':False]['text':'BOOST_MOVE_OLD_RVALUE_REF_BINDING_RULES','line_number':215,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':'                                  forward','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':221,'multiline':False]['text':'! This function provides limited form of forwarding that is usually enough for','line_number':225,'multiline':False]['text':'! in-place construction and avoids the exponential overloading for','line_number':226,'multiline':False]['text':'! achieve the limited forwarding in C++03.','line_number':227,'multiline':False]['text':'!','line_number':228,'multiline':False]['text':'! For compilers with rvalue references this function provides perfect forwarding.','line_number':229,'multiline':False]['text':'!','line_number':230,'multiline':False]['text':'! Otherwise:','line_number':231,'multiline':False]['text':'! * If input_reference binds to const ::boost::rv<T> & then it output_reference is','line_number':232,'multiline':False]['text':'!   ::boost::rv<T> &','line_number':233,'multiline':False]['text':'!','line_number':234,'multiline':False]['text':'! * Else, output_reference is equal to input_reference.','line_number':235,'multiline':False]['text':'Old move approach, lvalues could bind to rvalue references','line_number':239,'multiline':False]['text':'Old move','line_number':245,'multiline':False]['text':'"boost::forward<T> error: 'T' is a lvalue reference, can't forward as rvalue.";','line_number':254,'multiline':False]['text':'BOOST_MOVE_DOXYGEN_INVOKED','line_number':259,'multiline':False]['text':'namespace boost {','line_number':261,'multiline':False]['text':'BOOST_MOVE_USE_STANDARD_LIBRARY_MOVE','line_number':263,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':265,'multiline':False]['text':'','line_number':266,'multiline':False]['text':'                         move_if_not_lvalue_reference','line_number':267,'multiline':False]['text':'','line_number':268,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':269,'multiline':False]['text':'! <b>Effects</b>: Calls `boost::move` if `input_reference` is not a lvalue reference.','line_number':274,'multiline':False]['text':'!   Otherwise returns the reference','line_number':275,'multiline':False]['text':'Old move approach, lvalues could bind to rvalue references','line_number':279,'multiline':False]['text':'Old move','line_number':285,'multiline':False]['text':'"boost::forward<T> error: 'T' is a lvalue reference, can't forward as rvalue.";','line_number':294,'multiline':False]['text':'BOOST_MOVE_DOXYGEN_INVOKED','line_number':299,'multiline':False]['text':'namespace boost {','line_number':301,'multiline':False]['text':'BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':303,'multiline':False]['text':'namespace move_detail{','line_number':313,'multiline':False]['text':'namespace boost{','line_number':314,'multiline':False]['text':'#if !defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':316,'multiline':False]['text':'#ifndef BOOST_MOVE_MOVE_UTILITY_CORE_HPP','line_number':321,'multiline':False]