['text':' Copyright Aleksey Gurtovoy 2000-2006','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':7,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':8,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' See http://www.boost.org/libs/mpl for documentation.','line_number':11,'multiline':False]['text':' $Id$','line_number':13,'multiline':False]['text':' $Date$','line_number':14,'multiline':False]['text':' $Revision$','line_number':15,'multiline':False]['text':' make sure 'size_t' is placed into 'std'','line_number':35,'multiline':False]['text':' agurt, 10/nov/06: use enums for Borland (which cannot cope with static constants) ','line_number':55,'multiline':False]['text':' and GCC (which issues "unused variable" warnings when static constants are used ','line_number':56,'multiline':False]['text':' at a function scope)','line_number':57,'multiline':False]['text':' agurt, 24/aug/04: MSVC 7.1 workaround here and below: return/accept ','line_number':70,'multiline':False]['text':' 'assert<false>' by reference; can't apply it unconditionally -- apparently it','line_number':71,'multiline':False]['text':' degrades the quality of GCC diagnostics','line_number':72,'multiline':False]['text':' BOOST_MPL_CFG_ASSERT_USE_RELATION_NAMES','line_number':125,'multiline':False]['text':' BOOST_MPL_CFG_ASSERT_BROKEN_POINTER_TO_POINTER_TO_MEMBER','line_number':217,'multiline':False]['text':' BOOST_MPL_CFG_ASSERT_BROKEN_POINTER_TO_POINTER_TO_MEMBER','line_number':253,'multiline':False]['text':' BOOST_MPL_ASSERT((pred<x,...>))','line_number':261,'multiline':False]['text':'','line_number':274,'multiline':True]['text':' BOOST_MPL_ASSERT_NOT((pred<x,...>))','line_number':276,'multiline':False]['text':'','line_number':289,'multiline':True]['text':' BOOST_MPL_ASSERT((pred<x,...>))','line_number':293,'multiline':False]['text':'','line_number':304,'multiline':True]['text':' BOOST_MPL_ASSERT_NOT((pred<x,...>))','line_number':306,'multiline':False]['text':'','line_number':317,'multiline':True]['text':'','line_number':328,'multiline':True]['text':' BOOST_MPL_ASSERT_RELATION(x, ==|!=|<=|<|>=|>, y)','line_number':333,'multiline':False]['text':' agurt, 9/nov/06: 'enum' below is a workaround for gcc 4.0.4/4.1.1 bugs #29522 and #29518','line_number':338,'multiline':False]['text':'','line_number':354,'multiline':True]['text':'','line_number':376,'multiline':True]['text':'','line_number':381,'multiline':True]['text':' !BOOST_MPL_CFG_ASSERT_USE_RELATION_NAMES','line_number':383,'multiline':False]['text':'','line_number':395,'multiline':True]['text':'','line_number':405,'multiline':True]['text':' BOOST_MPL_ASSERT_MSG( (pred<x,...>::value), USER_PROVIDED_MESSAGE, (types<x,...>) ) ','line_number':411,'multiline':False]['text':'','line_number':428,'multiline':True]['text':'','line_number':443,'multiline':True]['text':' Work around BOOST_MPL_ASSERT_MSG_IMPL generating multiple definition linker errors on VC++8.','line_number':447,'multiline':False]['text':' #if defined(BOOST_MSVC) && BOOST_MSVC < 1500','line_number':448,'multiline':False]['text':'','line_number':452,'multiline':True]['text':'','line_number':456,'multiline':True]['text':' BOOST_MPL_ASSERT_HPP_INCLUDED','line_number':459,'multiline':False]