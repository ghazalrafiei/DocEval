['text':' Copyright (c) 2001 Ronald Garcia, Indiana University (garcia@osl.iu.edu)','line_number':1,'multiline':False]['text':' Andrew Lumsdaine, Indiana University (lums@osl.iu.edu).','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompany-','line_number':3,'multiline':False]['text':' ing file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':9,'multiline':False]['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':14,'multiline':False]['text':' utf8_codecvt_facet.hpp','line_number':15,'multiline':False]['text':' This header defines class utf8_codecvt_facet, derived from','line_number':17,'multiline':False]['text':' std::codecvt<wchar_t, char>, which can be used to convert utf8 data in','line_number':18,'multiline':False]['text':' files into wchar_t strings in the application.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' The header is NOT STANDALONE, and is not to be included by the USER.','line_number':21,'multiline':False]['text':' There are at least two libraries which want to use this functionality, and','line_number':22,'multiline':False]['text':' we want to avoid code duplication. It would be possible to create utf8','line_number':23,'multiline':False]['text':' library, but:','line_number':24,'multiline':False]['text':' - this requires review process first','line_number':25,'multiline':False]['text':' - in the case, when linking the a library which uses utf8','line_number':26,'multiline':False]['text':'   (say 'program_options'), user should also link to the utf8 library.','line_number':27,'multiline':False]['text':'   This seems inconvenient, and asking a user to link to an unrevieved','line_number':28,'multiline':False]['text':'   library is strange.','line_number':29,'multiline':False]['text':' Until the above points are fixed, a library which wants to use utf8 must:','line_number':30,'multiline':False]['text':' - include this header in one of it's headers or sources','line_number':31,'multiline':False]['text':' - include the corresponding boost/detail/utf8_codecvt_facet.ipp file in one','line_number':32,'multiline':False]['text':'   of its sources','line_number':33,'multiline':False]['text':' - before including either file, the library must define','line_number':34,'multiline':False]['text':'   - BOOST_UTF8_BEGIN_NAMESPACE to the namespace declaration that must be used','line_number':35,'multiline':False]['text':'   - BOOST_UTF8_END_NAMESPACE to the code to close the previous namespace','line_number':36,'multiline':False]['text':'     declaration.','line_number':37,'multiline':False]['text':'   - BOOST_UTF8_DECL -- to the code which must be used for all 'exportable'','line_number':38,'multiline':False]['text':'     symbols.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' For example, program_options library might contain:','line_number':41,'multiline':False]['text':'    #define BOOST_UTF8_BEGIN_NAMESPACE <backslash character>','line_number':42,'multiline':False]['text':'             namespace boost { namespace program_options {','line_number':43,'multiline':False]['text':'    #define BOOST_UTF8_END_NAMESPACE }}','line_number':44,'multiline':False]['text':'    #define BOOST_UTF8_DECL BOOST_PROGRAM_OPTIONS_DECL','line_number':45,'multiline':False]['text':'    #include <boost/detail/utf8_codecvt_facet.ipp>','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' Essentially, each library will have its own copy of utf8 code, in','line_number':48,'multiline':False]['text':' different namespaces.','line_number':49,'multiline':False]['text':' Note:(Robert Ramey).  I have made the following alterations in the original','line_number':51,'multiline':False]['text':' code.','line_number':52,'multiline':False]['text':' a) Rendered utf8_codecvt<wchar_t, char>  with using templates','line_number':53,'multiline':False]['text':' b) Move longer functions outside class definition to prevent inlining','line_number':54,'multiline':False]['text':' and make code smaller','line_number':55,'multiline':False]['text':' c) added on a derived class to permit translation to/from current','line_number':56,'multiline':False]['text':' locale to utf8','line_number':57,'multiline':False]['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':59,'multiline':False]['text':' archives stored as text - note these ar templated on the basic','line_number':61,'multiline':False]['text':' stream templates to accommodate wide (and other?) kind of characters','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' note the fact that on libraries without wide characters, ostream is','line_number':64,'multiline':False]['text':' is not a specialization of basic_ostream which in fact is not defined','line_number':65,'multiline':False]['text':' in such cases.   So we can't use basic_ostream<OStream::char_type> but rather','line_number':66,'multiline':False]['text':' use two template parameters','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' utf8_codecvt_facet','line_number':69,'multiline':False]['text':'   This is an implementation of a std::codecvt facet for translating','line_number':70,'multiline':False]['text':'   from UTF-8 externally to UCS-4.  Note that this is not tied to','line_number':71,'multiline':False]['text':'   any specific types in order to allow customization on platforms','line_number':72,'multiline':False]['text':'   where wchar_t is not big enough.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' NOTES:  The current implementation jumps through some unpleasant hoops in','line_number':75,'multiline':False]['text':' order to deal with signed character types.  As a std::codecvt_base::result,','line_number':76,'multiline':False]['text':' it is necessary  for the ExternType to be convertible to unsigned  char.','line_number':77,'multiline':False]['text':' I chose not to tie the extern_type explicitly to char. But if any combination','line_number':78,'multiline':False]['text':' of types other than <wchar_t,char_t> is used, then std::codecvt must be','line_number':79,'multiline':False]['text':' specialized on those types for this to work.','line_number':80,'multiline':False]['text':' for mbstate_t','line_number':83,'multiline':False]['text':' for std::size_t','line_number':84,'multiline':False]['text':' maximum lenght of a multibyte string','line_number':96,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':101,'multiline':False]['text':'                                                                            //','line_number':102,'multiline':False]['text':'                          utf8_codecvt_facet                                //','line_number':103,'multiline':False]['text':'                                                                            //','line_number':104,'multiline':False]['text':'            See utf8_codecvt_facet.ipp for the implementation.              //','line_number':105,'multiline':False]['text':'----------------------------------------------------------------------------//','line_number':106,'multiline':False]['text':' continuing octets = octets except for the leading octet','line_number':149,'multiline':False]['text':' How many "continuing octets" will be needed for this word','line_number':156,'multiline':False]['text':' ==   total octets - 1.','line_number':157,'multiline':False]['text':' UTF-8 isn't really stateful since we rewind on partial conversions','line_number':164,'multiline':False]['text':'to','line_number':168,'multiline':True]['text':' How many char objects can I process to get <= max_limit','line_number':180,'multiline':False]['text':' wchar_t objects?','line_number':181,'multiline':False]['text':' Nonstandard override','line_number':193,'multiline':False]['text':' Largest possible value do_length(state,from,from_end,1) could return.','line_number':212,'multiline':False]['text':' largest UTF-8 encoding of a UCS-4 character','line_number':214,'multiline':False]['text':' BOOST_UTF8_CODECVT_FACET_HPP','line_number':220,'multiline':False]