['text':'','line_number':1,'multiline':False]['text':' thread_pool.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' namespace detail','line_number':38,'multiline':False]['text':'/ A simple fixed-size thread pool.','line_number':40,'multiline':False]['text':'*
 * The thread pool class is an execution context where functions are permitted
 * to run on one of a fixed number of threads.
 *
 * @par Submitting tasks to the pool
 *
 * To submit functions to the thread pool, use the @ref boost::asio::dispatch,
 * @ref boost::asio::post or @ref boost::asio::defer free functions.
 *
 * For example:
 *
 * @code void my_task()
 * {
 *   ...
 * }
 *
 * ...
 *
 * // Launch the pool with four threads.
 * boost::asio::thread_pool pool(4);
 *
 * // Submit a function to the pool.
 * boost::asio::post(pool, my_task);
 *
 * // Submit a lambda object to the pool.
 * boost::asio::post(pool,
 *     []()
 *     {
 *       ...
 *     });
 *
 * // Wait for all tasks in the pool to complete.
 * pool.join(); @endcode
 ','line_number':41,'multiline':True]['text':'/ Executor used to submit functions to a thread pool.','line_number':85,'multiline':False]['text':'/ Scheduler used to schedule receivers on a thread pool.','line_number':88,'multiline':False]['text':'/ Constructs a pool with an automatically determined number of threads.','line_number':92,'multiline':False]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':94,'multiline':False]['text':'/ Constructs a pool with a specified number of threads.','line_number':96,'multiline':False]['text':'/ Destructor.','line_number':99,'multiline':False]['text':'*
   * Automatically stops and joins the pool, if not explicitly done beforehand.
   ','line_number':100,'multiline':True]['text':'/ Obtains the executor associated with the pool.','line_number':105,'multiline':False]['text':'/ Obtains the executor associated with the pool.','line_number':108,'multiline':False]['text':'/ Obtains the scheduler associated with the pool.','line_number':111,'multiline':False]['text':'/ Stops the threads.','line_number':114,'multiline':False]['text':'*
   * This function stops the threads as soon as possible. As a result of calling
   * @c stop(), pending function objects may be never be invoked.
   ','line_number':115,'multiline':True]['text':'/ Attaches the current thread to the pool.','line_number':121,'multiline':False]['text':'*
   * This function attaches the current thread to the pool so that it may be
   * used for executing submitted function objects. Blocks the calling thread
   * until the pool is stopped or joined and has no outstanding work.
   ','line_number':122,'multiline':True]['text':'/ Joins the threads.','line_number':129,'multiline':False]['text':'*
   * This function blocks until the threads in the pool have completed. If @c
   * stop() is not called prior to @c join(), the @c join() call will wait
   * until the pool has no more outstanding work.
   ','line_number':130,'multiline':True]['text':'/ Waits for threads to complete.','line_number':137,'multiline':False]['text':'*
   * This function blocks until the threads in the pool have completed. If @c
   * stop() is not called prior to @c wait(), the @c wait() call will wait
   * until the pool has no more outstanding work.
   ','line_number':138,'multiline':True]['text':' Helper function to create the underlying scheduler.','line_number':151,'multiline':False]['text':' The underlying scheduler.','line_number':154,'multiline':False]['text':' The threads in the pool.','line_number':157,'multiline':False]['text':' The current number of threads in the pool.','line_number':160,'multiline':False]['text':'/ Executor implementation type used to submit functions to a thread pool.','line_number':164,'multiline':False]['text':'/ The sender type, when this type is used as a scheduler.','line_number':169,'multiline':False]['text':'/ The bulk execution shape type.','line_number':172,'multiline':False]['text':'/ The bulk execution index type.','line_number':175,'multiline':False]['text':' defined(BOOST_ASIO_HAS_DEDUCED_EXECUTION_IS_TYPED_SENDER_TRAIT)','line_number':189,'multiline':False]['text':'   && defined(BOOST_ASIO_HAS_STD_EXCEPTION_PTR)','line_number':190,'multiline':False]['text':'/ Copy constructor.','line_number':192,'multiline':False]['text':'/ Move constructor.','line_number':205,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':214,'multiline':False]['text':'/ Destructor.','line_number':216,'multiline':False]['text':'/ Assignment operator.','line_number':224,'multiline':False]['text':'/ Move assignment operator.','line_number':229,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':232,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':238,'multiline':False]['text':'/ Obtain an executor with the @c blocking.possibly property.','line_number':240,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.possibly); @endcode
   ','line_number':241,'multiline':True]['text':'/ Obtain an executor with the @c blocking.always property.','line_number':258,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.always); @endcode
   ','line_number':259,'multiline':True]['text':'/ Obtain an executor with the @c blocking.never property.','line_number':277,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.never); @endcode
   ','line_number':278,'multiline':True]['text':'/ Obtain an executor with the @c relationship.fork property.','line_number':295,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.fork); @endcode
   ','line_number':296,'multiline':True]['text':'/ Obtain an executor with the @c relationship.continuation property.','line_number':312,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.continuation); @endcode
   ','line_number':313,'multiline':True]['text':'/ Obtain an executor with the @c outstanding_work.tracked property.','line_number':329,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::outstanding_work.tracked); @endcode
   ','line_number':330,'multiline':True]['text':'/ Obtain an executor with the @c outstanding_work.untracked property.','line_number':347,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::outstanding_work.untracked); @endcode
   ','line_number':348,'multiline':True]['text':'/ Obtain an executor with the specified @c allocator property.','line_number':365,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator(my_allocator)); @endcode
   ','line_number':366,'multiline':True]['text':'/ Obtain an executor with the default @c allocator property.','line_number':383,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_thread_pool.executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':384,'multiline':True]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':405,'multiline':False]['text':'/ Query the current value of the @c bulk_guarantee property.','line_number':407,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * if (boost::asio::query(ex, boost::asio::execution::bulk_guarantee)
   *       == boost::asio::execution::bulk_guarantee.parallel)
   *   ... @endcode
   ','line_number':408,'multiline':True]['text':'/ Query the current value of the @c mapping property.','line_number':424,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * if (boost::asio::query(ex, boost::asio::execution::mapping)
   *       == boost::asio::execution::mapping.thread)
   *   ... @endcode
   ','line_number':425,'multiline':True]['text':'/ Query the current value of the @c context property.','line_number':441,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * boost::asio::thread_pool& pool = boost::asio::query(
   *     ex, boost::asio::execution::context); @endcode
   ','line_number':442,'multiline':True]['text':'/ Query the current value of the @c blocking property.','line_number':456,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * if (boost::asio::query(ex, boost::asio::execution::blocking)
   *       == boost::asio::execution::blocking.always)
   *   ... @endcode
   ','line_number':457,'multiline':True]['text':'/ Query the current value of the @c relationship property.','line_number':477,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * if (boost::asio::query(ex, boost::asio::execution::relationship)
   *       == boost::asio::execution::relationship.continuation)
   *   ... @endcode
   ','line_number':478,'multiline':True]['text':'/ Query the current value of the @c outstanding_work property.','line_number':496,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * if (boost::asio::query(ex, boost::asio::execution::outstanding_work)
   *       == boost::asio::execution::outstanding_work.tracked)
   *   ... @endcode
   ','line_number':497,'multiline':True]['text':'/ Query the current value of the @c allocator property.','line_number':515,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':516,'multiline':True]['text':'/ Query the current value of the @c allocator property.','line_number':532,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':533,'multiline':True]['text':'/ Query the occupancy (recommended number of work items) for the pool.','line_number':548,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * std::size_t occupancy = boost::asio::query(
   *     ex, boost::asio::execution::occupancy); @endcode
   ','line_number':549,'multiline':True]['text':'/ Determine whether the thread pool is running in the current thread.','line_number':564,'multiline':False]['text':'*
   * @return @c true if the current thread is running the thread pool. Otherwise
   * returns @c false.
   ','line_number':565,'multiline':True]['text':'/ Compare two executors for equality.','line_number':571,'multiline':False]['text':'*
   * Two executors are equal if they refer to the same underlying thread pool.
   ','line_number':572,'multiline':True]['text':'/ Compare two executors for inequality.','line_number':583,'multiline':False]['text':'*
   * Two executors are equal if they refer to the same underlying thread pool.
   ','line_number':584,'multiline':True]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':598,'multiline':False]['text':'/ Execution function.','line_number':600,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::execute customisation point.
   *
   * For example:
   * @code auto ex = my_thread_pool.executor();
   * execution::execute(ex, my_function_object); @endcode
   ','line_number':601,'multiline':True]['text':'/ Bulk execution function.','line_number':617,'multiline':False]['text':'/ Schedule function.','line_number':625,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::schedule customisation point.
   *
   * @return An object that satisfies the sender concept.
   ','line_number':626,'multiline':True]['text':'/ Connect function.','line_number':637,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::connect customisation point.
   *
   * @return An object of an unspecified type that satisfies the @c
   * operation_state concept.
   ','line_number':638,'multiline':True]['text':' defined(GENERATING_DOCUMENTATION)','line_number':648,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':650,'multiline':False]['text':'/ Obtain the underlying execution context.','line_number':658,'multiline':False]['text':'/ Inform the thread pool that it has some outstanding work to do.','line_number':661,'multiline':False]['text':'*
   * This function is used to inform the thread pool that some work has begun.
   * This ensures that the thread pool's join() function will not return while
   * the work is underway.
   ','line_number':662,'multiline':True]['text':'/ Inform the thread pool that some work is no longer outstanding.','line_number':669,'multiline':False]['text':'*
   * This function is used to inform the thread pool that some work has
   * finished. Once the count of unfinished work reaches zero, the thread
   * pool's join() function is permitted to exit.
   ','line_number':670,'multiline':True]['text':'/ Request the thread pool to invoke the given function object.','line_number':677,'multiline':False]['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. If the current thread belongs to the pool, @c dispatch() executes
   * the function before returning. Otherwise, the function will be scheduled
   * to run on the thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':678,'multiline':True]['text':'/ Request the thread pool to invoke the given function object.','line_number':695,'multiline':False]['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. The function object will never be executed inside @c post().
   * Instead, it will be scheduled to run on the thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':696,'multiline':True]['text':'/ Request the thread pool to invoke the given function object.','line_number':712,'multiline':False]['text':'*
   * This function is used to ask the thread pool to execute the given function
   * object. The function object will never be executed inside @c defer().
   * Instead, it will be scheduled to run on the thread pool.
   *
   * If the current thread belongs to the thread pool, @c defer() will delay
   * scheduling the function object until the current thread returns control to
   * the pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':713,'multiline':True]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':732,'multiline':False]['text':' Constructor used by thread_pool::get_executor().','line_number':738,'multiline':False]['text':' Constructor used by require().','line_number':748,'multiline':False]['text':'/ Execution helper implementation for possibly and never blocking.','line_number':760,'multiline':False]['text':'/ Execution helper implementation for always blocking.','line_number':764,'multiline':False]['text':'/ Bulk execution helper implementation for possibly and never blocking.','line_number':768,'multiline':False]['text':'/ Bulk execution helper implementation for always blocking.','line_number':773,'multiline':False]['text':' The underlying thread pool.','line_number':778,'multiline':False]['text':' The allocator used for execution functions.','line_number':781,'multiline':False]['text':' The runtime-switched properties of the thread pool executor.','line_number':784,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)','line_number':803,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':818,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_SCHEDULE_MEMBER_TRAIT)','line_number':833,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_CONNECT_MEMBER_TRAIT)','line_number':850,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)','line_number':963,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)','line_number':1035,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':1117,'multiline':False]['text':' namespace traits','line_number':1119,'multiline':False]['text':' namespace execution','line_number':1128,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':1130,'multiline':False]['text':' namespace asio','line_number':1132,'multiline':False]['text':' namespace boost','line_number':1133,'multiline':False]['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':1140,'multiline':False]['text':' BOOST_ASIO_THREAD_POOL_HPP','line_number':1142,'multiline':False]