['text':'','line_number':1,'multiline':False]['text':' experimental/coro.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2021-2022 Klemens D. Morgenstern','line_number':5,'multiline':False]['text':'                         (klemens dot morgenstern at gmx dot net)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':17,'multiline':False]['text':' namespace detail','line_number':39,'multiline':False]['text':'/ The main type of a resumable coroutine.','line_number':41,'multiline':False]['text':'*
 * Template parameter @c Yield specifies type or signature used by co_yield,
 * @c Return specifies the type used for co_return, and @c Executor specifies
 * the underlying executor type.
 ','line_number':42,'multiline':True]['text':'/ The traits of the coroutine. See boost::asio::experimental::coro_traits','line_number':51,'multiline':False]['text':'/ for details.','line_number':52,'multiline':False]['text':'/ The value that can be passed into a symmetrical cororoutine. @c void if','line_number':55,'multiline':False]['text':'/ asymmetrical.','line_number':56,'multiline':False]['text':'/ The type that can be passed out through a co_yield.','line_number':59,'multiline':False]['text':'/ The type that can be passed out through a co_return.','line_number':62,'multiline':False]['text':'/ The type received by a co_await or async_resume. Its a combination of','line_number':65,'multiline':False]['text':'/ yield and return.','line_number':66,'multiline':False]['text':'/ The signature used by the async_resume.','line_number':69,'multiline':False]['text':'/ Whether or not the coroutine is noexcept.','line_number':72,'multiline':False]['text':'/ The error type of the coroutine. Void for noexcept','line_number':75,'multiline':False]['text':'/ Completion handler type used by async_resume.','line_number':78,'multiline':False]['text':'/ The internal promise-type of the coroutine.','line_number':81,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':87,'multiline':False]['text':'/ The executor type.','line_number':89,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':94,'multiline':False]['text':'/ The default constructor, gives an invalid coroutine.','line_number':96,'multiline':False]['text':'/ Move constructor.','line_number':99,'multiline':False]['text':'/ Move assignment.','line_number':107,'multiline':False]['text':'/ Destructor. Destroys the coroutine, if it holds a valid one.','line_number':116,'multiline':False]['text':'*
   * @note This does not cancel an active coroutine. Destructing a resumable
   * coroutine, i.e. one with a call to async_resume that has not completed, is
   * undefined behaviour.
   ','line_number':117,'multiline':True]['text':'/ Get the used executor.','line_number':157,'multiline':False]['text':'/ Resume the coroutine.','line_number':169,'multiline':False]['text':'*
   * @param token The completion token of the async resume.
   *
   * @attention Calling an invalid coroutine with a noexcept signature is
   * undefined behaviour.
   *
   * @note This overload is only available for coroutines without an input
   * value.
   ','line_number':170,'multiline':True]['text':'/ Resume the coroutine.','line_number':188,'multiline':False]['text':'*
   * @param token The completion token of the async resume.
   *
   * @attention Calling an invalid coroutine with a noexcept signature is
   * undefined behaviour.
   *
   * @note This overload is only available for coroutines with an input value.
   ','line_number':189,'multiline':True]['text':'/ Operator used for coroutines without input value.','line_number':205,'multiline':False]['text':'/ Operator used for coroutines with input value.','line_number':211,'multiline':False]['text':'*
   * @param ip The input value
   *
   * @returns An awaitable handle.
   *
   * @code
   * coro<void> push_values(coro<double(int)> c)
   * {
   *    std::optional<double> res = co_await c(42);
   * }
   * @endcode
   ','line_number':212,'multiline':True]['text':'/ Check whether the coroutine is open, i.e. can be resumed.','line_number':231,'multiline':False]['text':'/ Check whether the coroutine is open, i.e. can be resumed.','line_number':244,'multiline':False]['text':' namespace experimental','line_number':257,'multiline':False]['text':' namespace asio','line_number':258,'multiline':False]['text':' namespace boost','line_number':259,'multiline':False]['text':' BOOST_ASIO_EXPERIMENTAL_CORO_HPP','line_number':265,'multiline':False]