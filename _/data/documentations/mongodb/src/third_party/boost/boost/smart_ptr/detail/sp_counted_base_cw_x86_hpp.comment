['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'  detail/sp_counted_base_cw_x86.hpp - CodeWarrion on 486+','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.','line_number':13,'multiline':False]['text':'  Copyright 2004-2005 Peter Dimov','line_number':14,'multiline':False]['text':'  Copyright 2005 Rene Rivera','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':17,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':18,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':'  Lock-free algorithm by Alexander Terekhov','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':'  Thanks to Ben Hitchings for the #weak + (#shared != 0)','line_number':24,'multiline':False]['text':'  formulation','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' int r = *pw;','line_number':39,'multiline':False]['text':' *pw += dv;','line_number':40,'multiline':False]['text':' return r;','line_number':41,'multiline':False]['text':'atomic_exchange_and_add( pw, 1 );','line_number':53,'multiline':False]['text':' int rv = *pw;','line_number':64,'multiline':False]['text':' if( rv != 0 ) ++*pw;','line_number':65,'multiline':False]['text':' return rv;','line_number':66,'multiline':False]['text':' #shared','line_number':90,'multiline':False]['text':' #weak + (#shared != 0)','line_number':91,'multiline':False]['text':' nothrow','line_number':99,'multiline':False]['text':' dispose() is called when use_count_ drops to zero, to release','line_number':103,'multiline':False]['text':' the resources managed by *this.','line_number':104,'multiline':False]['text':' nothrow','line_number':106,'multiline':False]['text':' destroy() is called when weak_count_ drops to zero.','line_number':108,'multiline':False]['text':' nothrow','line_number':110,'multiline':False]['text':' true on success','line_number':124,'multiline':False]['text':' nothrow','line_number':129,'multiline':False]['text':' nothrow','line_number':138,'multiline':False]['text':' nothrow','line_number':143,'multiline':False]['text':' nothrow','line_number':151,'multiline':False]['text':' namespace detail','line_number':157,'multiline':False]['text':' namespace boost','line_number':159,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_CW_X86_HPP_INCLUDED','line_number':161,'multiline':False]