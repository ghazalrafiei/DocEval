['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'Experimental...','line_number':37,'multiline':False]['text':'spin_condition is used','line_number':42,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':46,'multiline':False]['text':'!\file','line_number':48,'multiline':False]['text':'!Describes process-shared variables interprocess_condition class','line_number':49,'multiline':False]['text':'!This class is a condition variable that can be placed in shared memory or','line_number':56,'multiline':False]['text':'!memory mapped files.','line_number':57,'multiline':False]['text':'!Destroys the object of type std::condition_variable_any','line_number':58,'multiline':False]['text':'!','line_number':59,'multiline':False]['text':'!Unlike std::condition_variable in C++11, it is NOT safe to invoke the destructor if all','line_number':60,'multiline':False]['text':'!threads have been only notified. It is required that they have exited their respective wait','line_number':61,'multiline':False]['text':'!functions.','line_number':62,'multiline':False]['text':'Non-copyable','line_number':66,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':70,'multiline':False]['text':'!Constructs a interprocess_condition. On error throws interprocess_exception.','line_number':73,'multiline':False]['text':'!Destroys *this','line_number':77,'multiline':False]['text':'!liberating system resources.','line_number':78,'multiline':False]['text':'!If there is a thread waiting on *this, change that','line_number':82,'multiline':False]['text':'!thread's state to ready. Otherwise there is no effect.','line_number':83,'multiline':False]['text':'!Change the state of all threads waiting on *this to ready.','line_number':87,'multiline':False]['text':'!If there are no waiting threads, notify_all() has no effect.','line_number':88,'multiline':False]['text':'!Releases the lock on the interprocess_mutex object associated with lock, blocks','line_number':92,'multiline':False]['text':'!the current thread of execution until readied by a call to','line_number':93,'multiline':False]['text':'!this->notify_one() or this->notify_all(), and then reacquires the lock.','line_number':94,'multiline':False]['text':'!The same as:','line_number':102,'multiline':False]['text':'!while (!pred()) wait(lock)','line_number':103,'multiline':False]['text':'!Releases the lock on the interprocess_mutex object associated with lock, blocks','line_number':111,'multiline':False]['text':'!the current thread of execution until readied by a call to','line_number':112,'multiline':False]['text':'!this->notify_one() or this->notify_all(), or until time abs_time is reached,','line_number':113,'multiline':False]['text':'!and then reacquires the lock.','line_number':114,'multiline':False]['text':'!Returns: false if time abs_time is reached, otherwise true.','line_number':115,'multiline':False]['text':'!The same as:   while (!pred()) {','line_number':123,'multiline':False]['text':'!                  if (!timed_wait(lock, abs_time)) return pred();','line_number':124,'multiline':False]['text':'!               } return true;','line_number':125,'multiline':False]['text':'!Same as `timed_wait`, but this function is modeled after the','line_number':133,'multiline':False]['text':'!standard library interface.','line_number':134,'multiline':False]['text':'!Same as `timed_wait`, but this function is modeled after the','line_number':139,'multiline':False]['text':'!standard library interface.','line_number':140,'multiline':False]['text':'!Same as `timed_wait`, but this function is modeled after the','line_number':145,'multiline':False]['text':'!standard library interface and uses relative timeouts.','line_number':146,'multiline':False]['text':'!Same as `timed_wait`, but this function is modeled after the','line_number':151,'multiline':False]['text':'!standard library interface and uses relative timeouts','line_number':152,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':168,'multiline':False]['text':'namespace interprocess','line_number':171,'multiline':False]['text':' namespace boost','line_number':172,'multiline':False]['text':' BOOST_INTERPROCESS_CONDITION_HPP','line_number':176,'multiline':False]