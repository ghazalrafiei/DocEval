['text':'  Copyright John Maddock 2005-2008.','line_number':1,'multiline':False]['text':'  Copyright (c) 2006-2008 Johan Rade','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'!
  \file fpclassify.hpp
  \brief Classify floating-point value as normal, subnormal, zero, infinite, or NaN.
  \version 1.0
  \author John Maddock
 ','line_number':20,'multiline':True]['text':'

1. If the platform is C99 compliant, then the native floating point
classification functions are used.  However, note that we must only
define the functions which call std::fpclassify etc if that function
really does exist: otherwise a compiler may reject the code even though
the template is never instantiated.

2. If the platform is not C99 compliant, and the binary format for
a floating point type (float, double or long double) can be determined
at compile time, then the following algorithm is used:

        If all exponent bits, the flag bit (if there is one),
        and all significand bits are 0, then the number is zero.

        If all exponent bits and the flag bit (if there is one) are 0,
        and at least one significand bit is 1, then the number is subnormal.

        If all exponent bits are 1 and all significand bits are 0,
        then the number is infinity.

        If all exponent bits are 1 and at least one significand bit is 1,
        then the number is a not-a-number.

        Otherwise the number is normal.

        This algorithm works for the IEEE 754 representation,
        and also for several non IEEE 754 formats.

    Most formats have the structure
        sign bit + exponent bits + significand bits.

    A few have the structure
        sign bit + exponent bits + flag bit + significand bits.
    The flag bit is 0 for zero and subnormal numbers,
        and 1 for normal numbers and NaN.
        It is 0 (Motorola 68K) or 1 (Intel) for infinity.

    To get the bits, the four or eight most significant bytes are copied
    into an uint32_t or uint64_t and bit masks are applied.
    This covers all the exponent bits and the flag bit (if there is one),
    but not always all the significand bits.
    Some of the functions below have two implementations,
    depending on whether all the significand bits are copied or not.

3. If the platform is not C99 compliant, and the binary format for
a floating point type (float, double or long double) can not be determined
at compile time, then comparison with std::numeric_limits values
is used.

','line_number':27,'multiline':True]['text':'','line_number':97,'multiline':False]['text':' This must not be located in any namespace under boost::math','line_number':98,'multiline':False]['text':' otherwise we can get into an infinite loop if isnan is','line_number':99,'multiline':False]['text':' a #define for "isnan" !','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' BOOST_HAS_FPCLASSIFY','line_number':117,'multiline':False]['text':' whenever possible check for Nan's first:','line_number':163,'multiline':False]['text':' std::fabs broken on a few systems especially for long long!!!!','line_number':174,'multiline':False]['text':' Use a process of exclusion to figure out','line_number':177,'multiline':False]['text':' what kind of type we have, this relies on','line_number':178,'multiline':False]['text':' IEEE conforming reals that will treat','line_number':179,'multiline':False]['text':' Nan's as unordered.  Some compilers','line_number':180,'multiline':False]['text':' don't do this once optimisations are','line_number':181,'multiline':False]['text':' turned on, hence the check for nan's above.','line_number':182,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' An unknown type with no numeric_limits support,','line_number':202,'multiline':False]['text':' so what are we supposed to do we do here?','line_number':203,'multiline':False]['text':'','line_number':204,'multiline':False]['text':' namespace detail','line_number':273,'multiline':False]['text':' warning suppression.','line_number':331,'multiline':False]['text':'!< \brief return true if floating-point type t is finite.','line_number':356,'multiline':False]['text':' typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':359,'multiline':False]['text':'!< \brief return true if floating-point type t is finite.','line_number':367,'multiline':False]['text':'typedef boost::is_floating_point<long double>::type fp_tag;','line_number':370,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':376,'multiline':False]['text':'typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':430,'multiline':False]['text':'typedef boost::is_floating_point<long double>::type fp_tag;','line_number':441,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':447,'multiline':False]['text':' in case the compiler thinks that x is unused because std::numeric_limits<T>::has_infinity is false','line_number':462,'multiline':False]['text':' warning suppression.','line_number':475,'multiline':False]['text':' namespace detail','line_number':512,'multiline':False]['text':' typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':519,'multiline':False]['text':'typedef boost::is_floating_point<long double>::type fp_tag;','line_number':530,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':543,'multiline':False]['text':' warning suppression','line_number':570,'multiline':False]['text':' namespace detail','line_number':602,'multiline':False]['text':'!< \brief return true if floating-point type t is NaN (Not A Number).','line_number':606,'multiline':False]['text':' typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':609,'multiline':False]['text':'!< \brief return true if floating-point type t is NaN (Not A Number).','line_number':620,'multiline':False]['text':'typedef boost::is_floating_point<long double>::type fp_tag;','line_number':623,'multiline':False]['text':' namespace math','line_number':635,'multiline':False]['text':' namespace boost','line_number':636,'multiline':False]['text':' BOOST_MATH_FPCLASSIFY_HPP','line_number':637,'multiline':False]