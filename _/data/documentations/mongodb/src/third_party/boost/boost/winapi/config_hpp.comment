['text':'
 * Copyright 2013, 2017 Andrey Semashev
 * Copyright 2017 James E. King, III
 *
 * Distributed under the Boost Software License, Version 1.0.
 * See http://www.boost.org/LICENSE_1_0.txt
 ','line_number':1,'multiline':True]['text':' Cygwin 64 compiler does not define _WIN64 and instead defines it in a private header. We can't define _WIN64 ourselves because','line_number':15,'multiline':False]['text':' the header defines the macro unconditionally and if the user includes both Boost.WinAPI and Cygwin WinAPI headers there will be conflict.','line_number':16,'multiline':False]['text':' MinGW and MinGW-w64 define __MINGW32_VERSION_MAJOR/MINOR and __MINGW64_VERSION_MAJOR/MINOR macros in a private header.','line_number':20,'multiline':False]['text':' BOOST_WINAPI_IS_MINGW indicates that the target Windows SDK is provided by MinGW (http://mingw.org/).','line_number':24,'multiline':False]['text':' BOOST_WINAPI_IS_MINGW_W64 indicates that the target Windows SDK is provided by MinGW-w64 (http://mingw-w64.org).','line_number':25,'multiline':False]['text':' BOOST_WINAPI_IS_CYGWIN indicates that the target Windows SDK is provided by MinGW variant from Cygwin (https://cygwin.com/).','line_number':26,'multiline':False]['text':' These constants reflect _WIN32_WINNT_* macros from sdkddkver.h','line_number':37,'multiline':False]['text':' See also: http://msdn.microsoft.com/en-us/library/windows/desktop/aa383745%28v=vs.85%29.aspx#setting_winver_or__win32_winnt','line_number':38,'multiline':False]['text':' These constants reflect NTDDI_* macros from sdkddkver.h','line_number':53,'multiline':False]['text':' Not defined in Windows SDK','line_number':92,'multiline':False]['text':' By default use Windows 7 API on compilers that support it and Vista or XP on the others','line_number':111,'multiline':False]['text':' Default to respective Windows version with the latest Service Pack','line_number':125,'multiline':False]['text':' Known Windows SDK versions, taken from VER_PRODUCTBUILD macro value defined in ntverp.h.','line_number':143,'multiline':False]['text':' These values can be used to compare with BOOST_PLAT_WINDOWS_SDK_VERSION from Boost.Predef.','line_number':144,'multiline':False]['text':' Windows SDK bundled with MSVC 7.1','line_number':145,'multiline':False]['text':' Windows SDK bundled with MSVC 8','line_number':146,'multiline':False]['text':' Windows SDK 6.0','line_number':147,'multiline':False]['text':' Windows SDK 7.0, 7.1','line_number':148,'multiline':False]['text':' Windows SDK 8.0','line_number':149,'multiline':False]['text':' Windows SDK 8.1','line_number':150,'multiline':False]['text':' Windows SDK 10.0','line_number':151,'multiline':False]['text':' MinGW does not have the ntverp.h header but it defines VER_PRODUCTBUILD in ddk/ntifs.h.','line_number':152,'multiline':False]['text':' Cygwin MinGW also defines this version.','line_number':153,'multiline':False]['text':' MinGW-w64 defines the same version as the Windows SDK bundled with MSVC 8','line_number':155,'multiline':False]['text':' If none is specified, default to a desktop application which is the most','line_number':162,'multiline':False]['text':' backwards compatible to previous ways of doing things, if families are even','line_number':163,'multiline':False]['text':' defined.','line_number':164,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' UWP Support','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' On platforms without windows family partition support it is assumed one','line_number':172,'multiline':False]['text':' has all APIs and access is controlled by _WIN32_WINNT or similar mechanisms.','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' Leveraging Boost.Predef here','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' BOOST_PLAT_WINDOWS_UWP','line_number':184,'multiline':False]['text':' BOOST_PLAT_WINDOWS_UWP','line_number':191,'multiline':False]['text':'','line_number':193,'multiline':False]['text':' Windows 8.x SDK defines some items in the DESKTOP partition and then Windows SDK 10.0 defines','line_number':194,'multiline':False]['text':' the same items to be in APP or SYSTEM partitions, and APP expands to DESKTOP or PC or PHONE.','line_number':195,'multiline':False]['text':' The definition of BOOST_WINAPI_PARTITION_APP_SYSTEM provides a universal way to get this','line_number':196,'multiline':False]['text':' right as it is seen in a number of places in the SDK.','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':' Simiarly, some other symbols were re-classified as DESKTOP or SYSTEM','line_number':205,'multiline':False]['text':' We have to define the version macros so that windows.h provides the necessary symbols','line_number':213,'multiline':False]['text':' BOOST_WINAPI_CONFIG_HPP_INCLUDED_','line_number':245,'multiline':False]