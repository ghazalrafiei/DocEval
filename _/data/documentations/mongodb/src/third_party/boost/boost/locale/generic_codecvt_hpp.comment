['text':'','line_number':1,'multiline':False]['text':'  Copyright (c) 2015 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' Make sure that mbstate can keep 16 bit of UTF-16 sequence','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' up to MSVC 11 (2012) do_length is non-standard it counts wide characters instead of narrow and does not change mbstate','line_number':27,'multiline':False]['text':'/','line_number':31,'multiline':False]['text':'/ \brief A base class that used to define constants for generic_codecvt','line_number':32,'multiline':False]['text':'/','line_number':33,'multiline':False]['text':'/','line_number':36,'multiline':False]['text':'/ Initail state for converting to or from unicode code points, used by initial_state in derived classes','line_number':37,'multiline':False]['text':'/','line_number':38,'multiline':False]['text':'/< The state would be used by to_unicode functions','line_number':40,'multiline':False]['text':'/< The state would be used by from_unicode functions','line_number':41,'multiline':False]['text':'/','line_number':45,'multiline':False]['text':'/ \brief Geneneric generic codecvt facet, various stateless encodings to UTF-16 and UTF-32 using wchar_t, char32_t and char16_t','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/ Implementations should dervide from this class defining itself as CodecvtImpl and provide following members','line_number':48,'multiline':False]['text':'/','line_number':49,'multiline':False]['text':'/ - `state_type` - a type of special object that allows to store intermediate cached data, for example `iconv_t` descriptor ','line_number':50,'multiline':False]['text':'/ - `state_type initial_state(generic_codecvt_base::initial_convertion_state direction) const` - member function that creates initial state','line_number':51,'multiline':False]['text':'/ - `int max_encoding_length() const` - a maximal length that one Unicode code point is represented, for UTF-8 for example it is 4 from ISO-8859-1 it is 1','line_number':52,'multiline':False]['text':'/ - `utf::code_point to_unicode(state_type &state,char const *&begin,char const *end)` - extract first code point from the text in range [begin,end), in case of success begin would point to the next character sequence to be encoded to next code point, in case of incomplete sequence - utf::incomplete shell be returned, and in case of invalid input sequence utf::illegal shell be returned and begin would remain unmodified','line_number':53,'multiline':False]['text':'/ - `utf::code_point from_unicode(state_type &state,utf::code_point u,char *begin,char const *end)` - convert a unicode code point `u` into a character seqnece at [begin,end). Return the length of the sequence in case of success, utf::incomplete in case of not enough room to encode the code point of utf::illegal in case conversion can not be performed','line_number':54,'multiline':False]['text':'/','line_number':55,'multiline':False]['text':'/','line_number':56,'multiline':False]['text':'/ For example implementaion of codecvt for latin1/ISO-8859-1 character set','line_number':57,'multiline':False]['text':'/','line_number':58,'multiline':False]['text':'/ \code','line_number':59,'multiline':False]['text':'/','line_number':60,'multiline':False]['text':'/ template<typename CharType>','line_number':61,'multiline':False]['text':'/ class latin1_codecvt :boost::locale::generic_codecvt<CharType,latin1_codecvt<CharType> > ','line_number':62,'multiline':False]['text':'/ {','line_number':63,'multiline':False]['text':'/ public:','line_number':64,'multiline':False]['text':'/    ','line_number':65,'multiline':False]['text':'/     /* Standard codecvt constructor */ ','line_number':66,'multiline':False]['text':'/     latin1_codecvt(size_t refs = 0) : boost::locale::generic_codecvt<CharType,latin1_codecvt<CharType> >(refs) ','line_number':67,'multiline':False]['text':'/     {','line_number':68,'multiline':False]['text':'/     }','line_number':69,'multiline':False]['text':'/','line_number':70,'multiline':False]['text':'/     /* State is unused but required by generic_codecvt */','line_number':71,'multiline':False]['text':'/     struct state_type {};','line_number':72,'multiline':False]['text':'/','line_number':73,'multiline':False]['text':'/     state_type initial_state(generic_codecvt_base::initial_convertion_state /*unused*/) const','line_number':74,'multiline':False]['text':'/     {','line_number':75,'multiline':False]['text':'/         return state_type();','line_number':76,'multiline':False]['text':'/     }','line_number':77,'multiline':False]['text':'/     ','line_number':78,'multiline':False]['text':'/     int max_encoding_length() const','line_number':79,'multiline':False]['text':'/     {','line_number':80,'multiline':False]['text':'/         return 1;','line_number':81,'multiline':False]['text':'/     }','line_number':82,'multiline':False]['text':'/','line_number':83,'multiline':False]['text':'/     boost::locale::utf::code_point to_unicode(state_type &,char const *&begin,char const *end) const','line_number':84,'multiline':False]['text':'/     {','line_number':85,'multiline':False]['text':'/        if(begin == end)','line_number':86,'multiline':False]['text':'/           return boost::locale::utf::incomplete;','line_number':87,'multiline':False]['text':'/        return *begin++; ','line_number':88,'multiline':False]['text':'/     }','line_number':89,'multiline':False]['text':'/','line_number':90,'multiline':False]['text':'/     boost::locale::utf::code_point from_unicode(state_type &,boost::locale::utf::code_point u,char *begin,char const *end) const','line_number':91,'multiline':False]['text':'/     {','line_number':92,'multiline':False]['text':'/        if(u >= 256)','line_number':93,'multiline':False]['text':'/           return boost::locale::utf::illegal;','line_number':94,'multiline':False]['text':'/        if(begin == end)','line_number':95,'multiline':False]['text':'/           return boost::locale::utf::incomplete;','line_number':96,'multiline':False]['text':'/        *begin = u;','line_number':97,'multiline':False]['text':'/        return 1; ','line_number':98,'multiline':False]['text':'/     }','line_number':99,'multiline':False]['text':'/ };','line_number':100,'multiline':False]['text':'/ ','line_number':101,'multiline':False]['text':'/ \endcode','line_number':102,'multiline':False]['text':'/ ','line_number':103,'multiline':False]['text':'/ When external tools used for encoding conversion, the `state_type` is useful to save objects used for conversions. For example,','line_number':104,'multiline':False]['text':'/ icu::UConverter can be saved in such a state for an efficient use:','line_number':105,'multiline':False]['text':'/','line_number':106,'multiline':False]['text':'/ \code','line_number':107,'multiline':False]['text':'/ template<typename CharType>','line_number':108,'multiline':False]['text':'/ class icu_codecvt :boost::locale::generic_codecvt<CharType,icu_codecvt<CharType> > ','line_number':109,'multiline':False]['text':'/ {','line_number':110,'multiline':False]['text':'/ public:','line_number':111,'multiline':False]['text':'/    ','line_number':112,'multiline':False]['text':'/     /* Standard codecvt constructor */ ','line_number':113,'multiline':False]['text':'/     icu_codecvt(std::string const &name,refs = 0) : ','line_number':114,'multiline':False]['text':'/         boost::locale::generic_codecvt<CharType,latin1_codecvt<CharType> >(refs)','line_number':115,'multiline':False]['text':'/     { ... }','line_number':116,'multiline':False]['text':'/','line_number':117,'multiline':False]['text':'/     /* State is unused but required by generic_codecvt */','line_number':118,'multiline':False]['text':'/     struct std::unique_ptr<UConverter,void (*)(UConverter*)> state_type;','line_number':119,'multiline':False]['text':'/','line_number':120,'multiline':False]['text':'/     state_type &&initial_state(generic_codecvt_base::initial_convertion_state /*unused*/) const','line_number':121,'multiline':False]['text':'/     {','line_number':122,'multiline':False]['text':'/         UErrorCode err = U_ZERO_ERROR;','line_number':123,'multiline':False]['text':'/         state_type ptr(ucnv_safeClone(converter_,0,0,&err,ucnv_close);','line_number':124,'multiline':False]['text':'/         return std::move(ptr);','line_number':125,'multiline':False]['text':'/     }','line_number':126,'multiline':False]['text':'/     ','line_number':127,'multiline':False]['text':'/     boost::locale::utf::code_point to_unicode(state_type &ptr,char const *&begin,char const *end) const','line_number':128,'multiline':False]['text':'/     {','line_number':129,'multiline':False]['text':'/         UErrorCode err = U_ZERO_ERROR;','line_number':130,'multiline':False]['text':'/         boost::locale::utf::code_point cp = ucnv_getNextUChar(ptr.get(),&begin,end,&err);','line_number':131,'multiline':False]['text':'/         ...','line_number':132,'multiline':False]['text':'/     }','line_number':133,'multiline':False]['text':'/     ...','line_number':134,'multiline':False]['text':'/ };','line_number':135,'multiline':False]['text':'/ \endcode','line_number':136,'multiline':False]['text':'/','line_number':137,'multiline':False]['text':'/','line_number':138,'multiline':False]['text':'/','line_number':142,'multiline':False]['text':'/ \brief UTF-16 to/from UTF-8 codecvt facet to use with char16_t or wchar_t on Windows','line_number':143,'multiline':False]['text':'/','line_number':144,'multiline':False]['text':'/ Note in order to fit the requirements of usability by std::wfstream it uses mbstate_t','line_number':145,'multiline':False]['text':'/ to handle intermediate states in handling of variable length UTF-16 sequences','line_number':146,'multiline':False]['text':'/','line_number':147,'multiline':False]['text':'/ Its member functions implement standard virtual functions of basic codecvt','line_number':148,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'to','line_number':169,'multiline':True]['text':' mbstate_t is POD type and should be initialized to 0 (i.a. state = stateT())','line_number':250,'multiline':False]['text':' according to standard. We use it to keep a flag 0/1 for surrogate pair writing','line_number':251,'multiline':False]['text':'','line_number':252,'multiline':False]['text':' if 0 no code above >0xFFFF observed, of 1 a code above 0xFFFF observerd','line_number':253,'multiline':False]['text':' and first pair is written, but no input consumed','line_number':254,'multiline':False]['text':' Normal codepoints go direcly to stream','line_number':279,'multiline':False]['text':' for  other codepoints we do following','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':' 1. We can't consume our input as we may find ourselfs','line_number':286,'multiline':False]['text':'    in state where all input consumed but not all output written,i.e. only','line_number':287,'multiline':False]['text':'    1st pair is written','line_number':288,'multiline':False]['text':' 2. We only write first pair and mark this in the state, we also revert back','line_number':289,'multiline':False]['text':'    the from pointer in order to make sure this codepoint would be read','line_number':290,'multiline':False]['text':'    once again and then we would consume our input together with writing','line_number':291,'multiline':False]['text':'    second surrogate pair','line_number':292,'multiline':False]['text':' mbstate_t is POD type and should be initialized to 0 (i.a. state = stateT())','line_number':345,'multiline':False]['text':' according to standard. We assume that sizeof(mbstate_t) >=2 in order','line_number':346,'multiline':False]['text':' to be able to store first observerd surrogate pair','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' State: state!=0 - a first surrogate pair was observerd (state = first pair),','line_number':349,'multiline':False]['text':' we expect the second one to come and then zero the state','line_number':350,'multiline':False]['text':'/','line_number':351,'multiline':False]['text':' if the state idecates that 1st surrogate pair was written','line_number':364,'multiline':False]['text':' we should make sure that the second one that comes is actually','line_number':365,'multiline':False]['text':' second surrogate','line_number':366,'multiline':False]['text':' we don't forward from as writing may fail to incomplete or','line_number':369,'multiline':False]['text':' partial conversion','line_number':370,'multiline':False]['text':' Invalid surrogate','line_number':377,'multiline':False]['text':' if this is a first surrogate pair we put','line_number':385,'multiline':False]['text':' it into the state and consume it, note we don't','line_number':386,'multiline':False]['text':' go forward as it should be illegal so we increase','line_number':387,'multiline':False]['text':' the from pointer manually','line_number':388,'multiline':False]['text':' if we observe second surrogate pair and ','line_number':394,'multiline':False]['text':' first only may be expected we should break from the loop with error','line_number':395,'multiline':False]['text':' as it is illegal input','line_number':396,'multiline':False]['text':'/','line_number':447,'multiline':False]['text':'/ \brief UTF-32 to/from UTF-8 codecvt facet to use with char32_t or wchar_t on POSIX platforms','line_number':448,'multiline':False]['text':'/','line_number':449,'multiline':False]['text':'/ Its member functions implement standard virtual functions of basic codecvt.','line_number':450,'multiline':False]['text':'/ mbstate_t is not used for UTF-32 handling due to fixed length encoding','line_number':451,'multiline':False]['text':'/','line_number':452,'multiline':False]['text':'s','line_number':471,'multiline':True]['text':'to','line_number':471,'multiline':True]['text':'state','line_number':494,'multiline':True]['text':'state','line_number':524,'multiline':True]['text':' mbstate_t is POD type and should be initialized to 0 (i.a. state = stateT())','line_number':534,'multiline':False]['text':' according to standard. We use it to keep a flag 0/1 for surrogate pair writing','line_number':535,'multiline':False]['text':'','line_number':536,'multiline':False]['text':' if 0 no code above >0xFFFF observed, of 1 a code above 0xFFFF observerd','line_number':537,'multiline':False]['text':' and first pair is written, but no input consumed','line_number':538,'multiline':False]['text':'std_state','line_number':591,'multiline':True]['text':' locale','line_number':671,'multiline':False]['text':' namespace boost','line_number':672,'multiline':False]['text':'/','line_number':675,'multiline':False]['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':676,'multiline':False]