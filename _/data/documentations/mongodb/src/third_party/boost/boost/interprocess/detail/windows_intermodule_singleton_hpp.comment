['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2009-2012. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'This global map will be implemented using 3 sync primitives:','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':'1)  A named mutex that will implement global mutual exclusion between','line_number':47,'multiline':False]['text':'    threads from different modules/dlls','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'2)  A semaphore that will act as a global counter for modules attached to the global map','line_number':50,'multiline':False]['text':'    so that the global map can be destroyed when the last module is detached.','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':'3)  A semaphore that will be hacked to hold the address of a heap-allocated map in the','line_number':53,'multiline':False]['text':'    max and current semaphore count.','line_number':54,'multiline':False]['text':'Windows user address space sizes:','line_number':66,'multiline':False]['text':'32 bit windows: [32 bit processes] 2GB or 3GB (31/32 bits)','line_number':67,'multiline':False]['text':'64 bit windows: [32 bit processes] 2GB or 4GB (31/32 bits)','line_number':68,'multiline':False]['text':'                [64 bit processes] 2GB or 8TB (31/43 bits)','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':'Windows semaphores use 'long' parameters (32 bits in LLP64 data model) and','line_number':71,'multiline':False]['text':'those values can't be negative, so we have 31 bits to store something','line_number':72,'multiline':False]['text':'in max_count and initial count parameters.','line_number':73,'multiline':False]['text':'Also, max count must be bigger than 0 and bigger or equal than initial count.','line_number':74,'multiline':False]['text':'This means that for 32 bit processes, a semaphore count (31 usable bits) is','line_number':76,'multiline':False]['text':'enough to store 4 byte aligned memory (4GB -> 32 bits - 2 bits = 30 bits).','line_number':77,'multiline':False]['text':'The max count will hold the pointer value and current semaphore count','line_number':78,'multiline':False]['text':'will be zero.','line_number':79,'multiline':False]['text':'','line_number':80,'multiline':False]['text':'Relying in UB with a cast through union, but all known windows compilers','line_number':81,'multiline':False]['text':'accept this (C11 also accepts this).','line_number':82,'multiline':False]['text':'memory is at least 4 byte aligned in windows','line_number':89,'multiline':False]['text':'Relying in UB with a cast through union, but all known windows compilers','line_number':94,'multiline':False]['text':'accept this (C11 accepts this).','line_number':95,'multiline':False]['text':'We'll encode the address using 30 bits in each 32 bit high and low parts.','line_number':102,'multiline':False]['text':'High part will be the sem max count, low part will be the sem initial count.','line_number':103,'multiline':False]['text':'(restrictions: max count > 0, initial count >= 0 and max count >= initial count):','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' - Low part will be shifted two times (4 byte alignment) so that top','line_number':106,'multiline':False]['text':'   two bits are cleared (the top one for sign, the next one to','line_number':107,'multiline':False]['text':'   assure low part value is always less than the high part value.','line_number':108,'multiline':False]['text':' - The top bit of the high part will be cleared and the next bit will be 1','line_number':109,'multiline':False]['text':'   (so high part is always bigger than low part due to the quasi-top bit).','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':'   This means that the addresses we can store must be 4 byte aligned','line_number':112,'multiline':False]['text':'   and less than 1 ExbiBytes ( 2^60 bytes, ~1 ExaByte). User-level address space in Windows 64','line_number':113,'multiline':False]['text':'   is much less than this (8TB, 2^43 bytes): "1 EByte (or it was 640K?) ought to be enough for anybody" ;-).','line_number':114,'multiline':False]['text':'Make sure top two bits are zero','line_number':120,'multiline':False]['text':'Set quasi-top bit','line_number':122,'multiline':False]['text':'winapi_xxx wrappers do the cleanup...','line_number':144,'multiline':False]['text':'Clear quasi-top bit','line_number':178,'multiline':False]['text':'First close sems to protect this with the external mutex','line_number':231,'multiline':False]['text':'Once scoped_lock unlocks the mutex, the destructor will close the handle...','line_number':234,'multiline':False]['text':'namespace intermodule_singleton_helpers {','line_number':297,'multiline':False]['text':'namespace ipcdetail{','line_number':309,'multiline':False]['text':'namespace interprocess{','line_number':310,'multiline':False]['text':'namespace boost{','line_number':311,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_WINDOWS_INTERMODULE_SINGLETON_HPP','line_number':315,'multiline':False]