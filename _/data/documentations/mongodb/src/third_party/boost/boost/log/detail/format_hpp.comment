['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   format.hpp
 * \author Andrey Semashev
 * \date   15.11.2012
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]['text':'! An element (either literal or placeholder) of the format string','line_number':42,'multiline':False]['text':'! Argument placeholder number or -1 if it's not a placeholder (i.e. a literal)','line_number':45,'multiline':False]['text':'! If the element describes a constant literal, the starting character and length of the literal','line_number':47,'multiline':False]['text':'! Parsed format string description','line_number':71,'multiline':False]['text':'! Character type','line_number':78,'multiline':False]['text':'! String type','line_number':80,'multiline':False]['text':'! Array of format element descriptors','line_number':83,'multiline':False]['text':'! Characters of all literal parts of the format string','line_number':86,'multiline':False]['text':'! Format element descriptors','line_number':88,'multiline':False]['text':'! Parses format string','line_number':111,'multiline':False]['text':'! Parses format string','line_number':115,'multiline':False]['text':'! Parses format string','line_number':122,'multiline':False]['text':'! Formatter object','line_number':130,'multiline':False]['text':'! Character type','line_number':135,'multiline':False]['text':'! String type','line_number':137,'multiline':False]['text':'! Stream type','line_number':139,'multiline':False]['text':'! Format description type','line_number':141,'multiline':False]['text':'! The pump receives arguments and formats them into strings. At destruction the pump composes the final string in the attached stream.','line_number':144,'multiline':False]['text':'! Formatting params for a single placeholder in the format string','line_number':149,'multiline':False]['text':'! Formatting element index in the format description','line_number':152,'multiline':False]['text':'! Formatting result','line_number':154,'multiline':False]['text':'! Format string description','line_number':162,'multiline':False]['text':'! Formatting parameters for all placeholders','line_number':164,'multiline':False]['text':'! Current formatting position','line_number':166,'multiline':False]['text':'! Initializing constructor','line_number':170,'multiline':False]['text':'! Initializing constructor','line_number':175,'multiline':False]['text':'! Clears all formatted strings and resets the current formatting position','line_number':181,'multiline':False]['text':'! Creates a pump that will receive all format arguments and put the formatted string into the stream','line_number':191,'multiline':False]['text':' Flush the stream beforehand so that the pump can safely switch the stream storage string','line_number':194,'multiline':False]['text':'! Composes the final string from the formatted pieces','line_number':199,'multiline':False]['text':'! Initializes the formatting params','line_number':208,'multiline':False]['text':'! Composes the final string from the formatted pieces','line_number':223,'multiline':False]['text':' This is a placeholder','line_number':232,'multiline':False]['text':' This is a literal','line_number':238,'multiline':False]['text':'! The pump receives arguments and formats them into strings. At destruction the pump composes the final string in the attached stream.','line_number':246,'multiline':False]['text':'! The guard temporarily replaces storage string in the specified stream','line_number':253,'multiline':False]['text':'! Reference to the owner','line_number':271,'multiline':False]['text':'! Reference to the stream','line_number':273,'multiline':False]['text':'! Unhandled exception count','line_number':275,'multiline':False]['text':'! Initializing constructor','line_number':279,'multiline':False]['text':'! Move constructor','line_number':284,'multiline':False]['text':'! Destructor','line_number':291,'multiline':False]['text':' Whether or not the destructor is called because of an exception, the format object has to be cleared','line_number':296,'multiline':False]['text':' Compose the final string in the stream buffer','line_number':302,'multiline':False]['text':'!
     * Puts an argument to the formatter. Note the pump has to be returned by value and not by reference in order this to
     * work with Boost.Phoenix expressions. Otherwise the pump that is returned from \c basic_format::make_pump is
     * destroyed after the first call to \c operator%, and the returned reference becomes dangling.
     ','line_number':309,'multiline':True]['text':' namespace aux','line_number':333,'multiline':False]['text':' namespace log','line_number':335,'multiline':False]['text':' namespace boost','line_number':337,'multiline':False]['text':' BOOST_LOG_DETAIL_FORMAT_HPP_INCLUDED_','line_number':341,'multiline':False]