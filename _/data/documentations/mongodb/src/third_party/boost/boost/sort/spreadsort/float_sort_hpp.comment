['text':'Templated Spreadsort-based implementation of float_sort and float_mem_cast','line_number':1,'multiline':False]['text':'          Copyright Steven J. Ross 2001 - 2014.','line_number':3,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/sort/ for library home page.','line_number':8,'multiline':False]['text':'
Some improvements suggested by:
Phil Endecott and Frank Gennari
float_mem_cast fix provided by:
Scott McMurray
','line_number':10,'multiline':True]['text':'!
  \brief Casts a float to the specified integer type.

  \tparam Data_type Floating-point IEEE 754/IEC559 type.
  \tparam Cast_type Integer type (same size) to which to cast.

  \par Example:
  \code
  struct rightshift {
    int operator()(const DATA_TYPE &x, const unsigned offset) const {
      return float_mem_cast<KEY_TYPE, CAST_TYPE>(x.key) >> offset;
    }
  };
  \endcode
  ','line_number':33,'multiline':True]['text':' Only cast IEEE floating-point numbers, and only to a same-sized integer.','line_number':52,'multiline':False]['text':'!
    \brief @c float_sort with casting to the appropriate size.

    \param[in] first Iterator pointer to first element.
    \param[in] last Iterator pointing to one beyond the end of data.

Some performance plots of runtime vs. n and log(range) are provided:\n
   <a href="../../doc/graph/windows_float_sort.htm"> windows_float_sort</a>
   \n
   <a href="../../doc/graph/osx_float_sort.htm"> osx_float_sort</a>



   \par A simple example of sorting some floating-point is:
   \code
     vector<float> vec;
     vec.push_back(1.0);
     vec.push_back(2.3);
     vec.push_back(1.3);
     spreadsort(vec.begin(), vec.end());
   \endcode
   \par The sorted vector contains ascending values "1.0 1.3 2.3".

  ','line_number':62,'multiline':True]['text':'!
    \brief Floating-point sort algorithm using range.

    \param[in] range Range [first, last) for sorting.

  ','line_number':95,'multiline':True]['text':'!
    \brief Floating-point sort algorithm using random access iterators with just right-shift functor.

    \param[in] first Iterator pointer to first element.
    \param[in] last Iterator pointing to one beyond the end of data.
    \param[in] rshift Functor that returns the result of shifting the value_type right a specified number of bits.

  ','line_number':107,'multiline':True]['text':'!
    \brief Floating-point sort algorithm using range with just right-shift functor.

    \param[in] range Range [first, last) for sorting.
    \param[in] rshift Functor that returns the result of shifting the value_type right a specified number of bits.

  ','line_number':125,'multiline':True]['text':'!
   \brief Float sort algorithm using random access iterators with both right-shift and user-defined comparison operator.

   \param[in] first Iterator pointer to first element.
   \param[in] last Iterator pointing to one beyond the end of data.
   \param[in] rshift Functor that returns the result of shifting the value_type right a specified number of bits.
   \param[in] comp A binary functor that returns whether the first element passed to it should go before the second in order.
  ','line_number':139,'multiline':True]['text':'!
   \brief Float sort algorithm using range with both right-shift and user-defined comparison operator.

   \param[in] range Range [first, last) for sorting.
   \param[in] rshift Functor that returns the result of shifting the value_type right a specified number of bits.
   \param[in] comp A binary functor that returns whether the first element passed to it should go before the second in order.
  ','line_number':159,'multiline':True]