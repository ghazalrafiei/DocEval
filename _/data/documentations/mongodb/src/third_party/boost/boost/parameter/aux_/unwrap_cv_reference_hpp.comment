['text':' Copyright Daniel Wallin, David Abrahams 2005.','line_number':1,'multiline':False]['text':' Copyright Cromwell D. Enage 2017.','line_number':2,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':3,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':' namespace boost','line_number':14,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' reference_wrapper support -- if perfect forwarding is unsupported,','line_number':21,'multiline':False]['text':' then when passing arguments positionally by non-const reference,','line_number':22,'multiline':False]['text':' we ask users of named parameter interfaces to use ref(x) to wrap them.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' namespace boost::parameter::aux','line_number':33,'multiline':False]['text':' Support for std::ref(x) -- Cromwell D. Enage','line_number':42,'multiline':False]['text':' namespace boost::parameter::aux','line_number':48,'multiline':False]['text':' !defined(BOOST_PARAMETER_CAN_USE_MP11) || MSVC-14.0','line_number':60,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11 && not MSVC-14.0','line_number':67,'multiline':False]['text':' This metafunction returns mp11::mp_true if T is of type','line_number':75,'multiline':False]['text':' reference_wrapper<U> cv.','line_number':76,'multiline':False]['text':' Needed for unwrap_cv_reference below. T might be const, so','line_number':88,'multiline':False]['text':' mp_eval_if<> might fail because of deriving from T const on EDG.','line_number':89,'multiline':False]['text':' Produces the unwrapped type to hold a reference to in','line_number':93,'multiline':False]['text':' tagged_argument<>.  Can't use boost::unwrap_reference<> here','line_number':94,'multiline':False]['text':' because it doesn't handle the case where T = reference_wrapper<U> cv.','line_number':95,'multiline':False]['text':' !defined(BOOST_PARAMETER_CAN_USE_MP11) || MSVC-14.0','line_number':103,'multiline':False]['text':' This metafunction returns mpl::true_ if T is of type','line_number':104,'multiline':False]['text':' reference_wrapper<U> cv.','line_number':105,'multiline':False]['text':' no Borland or GCC 3- workarounds needed','line_number':149,'multiline':False]['text':' Needed for unwrap_cv_reference below. T might be const, so','line_number':150,'multiline':False]['text':' eval_if<> might fail because of deriving from T const on EDG.','line_number':151,'multiline':False]['text':' Produces the unwrapped type to hold a reference to in','line_number':157,'multiline':False]['text':' tagged_argument<>.  Can't use boost::unwrap_reference<> here','line_number':158,'multiline':False]['text':' because it doesn't handle the case where T = reference_wrapper<U> cv.','line_number':159,'multiline':False]['text':' Borland or GCC 3- workarounds needed','line_number':169,'multiline':False]['text':' BOOST_PARAMETER_CAN_USE_MP11 && not MSVC-14.0','line_number':170,'multiline':False]['text':' namespace boost::parameter::aux','line_number':171,'multiline':False]['text':' include guard','line_number':173,'multiline':False]