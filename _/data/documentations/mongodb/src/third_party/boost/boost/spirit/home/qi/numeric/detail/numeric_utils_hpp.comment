['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser
    Copyright (c) 2011 Jan Frederick Eick
    Copyright (c) 2011 Christopher Jefferson
    Copyright (c) 2006 Stephen Nutt

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':' for std::iterator_traits','line_number':34,'multiline':False]['text':' conditional expression is constant','line_number':38,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':'  The maximum radix digits that can be represented without','line_number':49,'multiline':False]['text':'  overflow:','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':'          template<typename T, unsigned Radix>','line_number':52,'multiline':False]['text':'          struct digits_traits::value;','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':55,'multiline':False]['text':' lookup table for log2(x) : 2 <= x <= 36','line_number':62,'multiline':False]['text':'*','line_number':70,'multiline':True]['text':'*','line_number':79,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////','line_number':98,'multiline':False]['text':'','line_number':99,'multiline':False]['text':'  Traits class for radix specific number conversion','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':'      Test the validity of a single character:','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'          template<typename Char> static bool is_valid(Char ch);','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':'      Convert a digit from character representation to binary','line_number':106,'multiline':False]['text':'      representation:','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':'          template<typename Char> static int digit(Char ch);','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':111,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':132,'multiline':False]['text':'  positive_accumulator/negative_accumulator: Accumulator policies for','line_number':133,'multiline':False]['text':'  extracting integers. Use positive_accumulator if number is positive.','line_number':134,'multiline':False]['text':'  Use negative_accumulator if number is negative.','line_number':135,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':136,'multiline':False]['text':' unchecked add','line_number':141,'multiline':False]['text':' checked add','line_number':148,'multiline':False]['text':' Ensure n *= Radix will not overflow','line_number':150,'multiline':False]['text':' Ensure n += digit will not overflow','line_number':159,'multiline':False]['text':' unchecked subtract','line_number':173,'multiline':False]['text':' checked subtract','line_number':180,'multiline':False]['text':' Ensure n *= Radix will not underflow','line_number':182,'multiline':False]['text':' Ensure n -= digit will not underflow','line_number':191,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':201,'multiline':False]['text':'  Common code for extract_int::parse specializations','line_number':202,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':203,'multiline':False]['text':'  over/underflow!','line_number':220,'multiline':False]['text':'count','line_number':227,'multiline':True]['text':' no need to check for overflow','line_number':229,'multiline':False]['text':'ch','line_number':236,'multiline':True]['text':'count','line_number':236,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////','line_number':256,'multiline':False]['text':'  End of loop checking: check if the number of digits','line_number':257,'multiline':False]['text':'  being parsed exceeds MaxDigits. Note: if MaxDigits == -1','line_number':258,'multiline':False]['text':'  we don't do any checking.','line_number':259,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':260,'multiline':False]['text':' bounded','line_number':267,'multiline':False]['text':'count','line_number':275,'multiline':True]['text':' unbounded','line_number':277,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':281,'multiline':False]['text':'  extract_int: main code for extracting integers','line_number':282,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':283,'multiline':False]['text':'','line_number':306,'multiline':True]['text':' conditional expression is constant','line_number':318,'multiline':False]['text':' skip leading zeros','line_number':335,'multiline':False]['text':' must calculate value to detect over/underflow','line_number':377,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':393,'multiline':False]['text':'  extract_int: main code for extracting integers','line_number':394,'multiline':False]['text':'  common case where MinDigits == 1 and MaxDigits = -1','line_number':395,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':396,'multiline':False]['text':'','line_number':414,'multiline':True]['text':' conditional expression is constant','line_number':421,'multiline':False]['text':' skip leading zeros','line_number':438,'multiline':False]['text':' must have at least one digit','line_number':447,'multiline':False]['text':' must have at least one digit','line_number':464,'multiline':False]['text':' count = 0; $$$ verify: I think this is wrong $$$','line_number':471,'multiline':False]['text':' must calculate value to detect over/underflow','line_number':495,'multiline':False]