['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2012 Hartmut Kaiser
 * Copyright (c) 2014-2018, 2020-2021 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/config.hpp
 *
 * This header defines configuraion macros for Boost.Atomic
 ','line_number':9,'multiline':True]['text':' nvcc does not support alternatives ("q,m") in asm statement constraints','line_number':25,'multiline':False]['text':' nvcc does not support condition code register ("cc") clobber in asm statements','line_number':27,'multiline':False]['text':' This macro indicates that the compiler does not support allocating eax:edx or rax:rdx register pairs ("A") in asm blocks','line_number':40,'multiline':False]['text':' This macro indicates that asm blocks should preserve ebx value unchanged. Some compilers are able to maintain ebx themselves','line_number':45,'multiline':False]['text':' around the asm blocks. For those compilers we don't need to save/restore ebx in asm blocks.','line_number':46,'multiline':False]['text':' libstdc++ from gcc >= 4.7 in C++11 mode ','line_number':51,'multiline':True]['text':' This macro indicates that there is not even a basic <type_traits> standard header that is sufficient for most Boost.Atomic needs.','line_number':52,'multiline':False]['text':' defined(BOOST_NO_CXX11_HDR_TYPE_TRAITS)','line_number':55,'multiline':False]['text':' gcc prior to 4.9 doesn't support alignas with a constant expression as an argument.','line_number':60,'multiline':False]['text':' MSVC 14.0 does support alignas, but in 32-bit mode emits "error C2719: formal parameter with requested alignment of N won't be aligned" for N > 4,','line_number':61,'multiline':False]['text':' when aligned types are used in function arguments, even though the std::max_align_t type has alignment of 8.','line_number':62,'multiline':False]['text':' This macro indicates that the compiler doesn't support constexpr constructors that initialize one member','line_number':67,'multiline':False]['text':' of an anonymous union member of the class.','line_number':68,'multiline':False]['text':' Enable pointer/reference casts between storage and value when possible.','line_number':82,'multiline':False]['text':' Note: Despite that MSVC does not employ strict aliasing rules for optimizations','line_number':83,'multiline':False]['text':' and does not require an explicit markup for types that may alias, we still don't','line_number':84,'multiline':False]['text':' enable the optimization for this compiler because at least MSVC-8 and 9 are known','line_number':85,'multiline':False]['text':' to generate broken code sometimes when casts are used.','line_number':86,'multiline':False]['text':' The compiler supports output values in flag registers.','line_number':93,'multiline':False]['text':' See: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html, Section 6.44.3.','line_number':94,'multiline':False]['text':' Intel compiler (at least 18.0 update 1) breaks if noexcept specification is used in defaulted function declarations:','line_number':101,'multiline':False]['text':' error: the default constructor of "boost::atomics::atomic<T>" cannot be referenced -- it is a deleted function','line_number':102,'multiline':False]['text':' GCC 4.6 doesn't seem to support that either. Clang 3.1 deduces wrong noexcept for the defaulted function and fails as well.','line_number':103,'multiline':False]['text':' Note that as of MSVC 19.29 this intrinsic does not clear padding in unions:','line_number':131,'multiline':False]['text':' https://developercommunity.visualstudio.com/t/__builtin_zero_non_value_bits-does-not-c/1551510','line_number':132,'multiline':False]['text':' This macro indicates that integer and floating point endianness is the same','line_number':143,'multiline':False]['text':' Deprecated symbols markup','line_number':147,'multiline':False]['text':' MSVC 7.1 only supports the attribute without a message','line_number':152,'multiline':False]['text':' gcc since 4.5 supports deprecated attribute with a message; older versions support the attribute without a message.','line_number':163,'multiline':False]['text':' Oracle Studio 12.4 supports deprecated attribute with a message; this is the first release that supports the attribute.','line_number':164,'multiline':False]['text':' In Boost.Atomic 1.73 we deprecated atomic<>::storage() accessor in favor of atomic<>::value(). In future releases storage() will be removed.','line_number':189,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_CONFIG_HPP_INCLUDED_','line_number':196,'multiline':False]