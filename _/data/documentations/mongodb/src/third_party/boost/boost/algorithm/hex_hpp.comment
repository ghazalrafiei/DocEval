['text':'
   Copyright (c) Marshall Clow 2011-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

   Thanks to Nevin for his comments/help.
','line_number':1,'multiline':True]['text':'
    General problem - turn a sequence of integral types into a sequence of hexadecimal characters.
    - and back.
','line_number':10,'multiline':True]['text':'/ \file  hex.hpp','line_number':15,'multiline':False]['text':'/ \brief Convert sequence of integral types into a sequence of hexadecimal','line_number':16,'multiline':False]['text':'/     characters and back. Based on the MySQL functions HEX and UNHEX','line_number':17,'multiline':False]['text':'/ \author Marshall Clow','line_number':18,'multiline':False]['text':' for std::iterator_traits','line_number':23,'multiline':False]['text':'!
    \struct hex_decode_error
    \brief  Base exception class for all hex decoding errors
','line_number':39,'multiline':True]['text':'!
    \struct non_hex_input
    \brief  Thrown when a non-hex value (0-9, A-F) encountered when decoding.
                Contains the offending character
','line_number':42,'multiline':True]['text':'!
    \struct not_enough_input
    \brief  Thrown when the input sequence unexpectedly ends

','line_number':46,'multiline':True]['text':'/ \cond DOXYGEN_HIDE','line_number':57,'multiline':False]['text':'  My own iterator_traits class.','line_number':80,'multiline':False]['text':'  It is here so that I can "reach inside" some kinds of output iterators','line_number':81,'multiline':False]['text':'      and get the type to write.','line_number':82,'multiline':False]['text':'  ostream_iterators have three template parameters.','line_number':103,'multiline':False]['text':'  The first one is the output type, the second one is the character type of','line_number':104,'multiline':False]['text':'  the underlying stream, the third is the character traits.','line_number':105,'multiline':False]['text':'      We only care about the first one.','line_number':106,'multiline':False]['text':'end','line_number':116,'multiline':True]['text':'  What can we assume here about the inputs?','line_number':118,'multiline':False]['text':'      is std::iterator_traits<InputIterator>::value_type always 'char' ?','line_number':119,'multiline':False]['text':'  Could it be wchar_t, say? Does it matter?','line_number':120,'multiline':False]['text':'      We are assuming ASCII for the values - but what about the storage?','line_number':121,'multiline':False]['text':'  Need to make sure that we get can read that many chars here.','line_number':128,'multiline':False]['text':'/ \endcond','line_number':138,'multiline':False]['text':'/ \fn hex ( InputIterator first, InputIterator last, OutputIterator out )','line_number':142,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a hexadecimal sequence of characters.','line_number':143,'multiline':False]['text':'/','line_number':144,'multiline':False]['text':'/ \param first    The start of the input sequence','line_number':145,'multiline':False]['text':'/ \param last     One past the end of the input sequence','line_number':146,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':147,'multiline':False]['text':'/ \return         The updated output iterator','line_number':148,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':149,'multiline':False]['text':'/ \fn hex_lower ( InputIterator first, InputIterator last, OutputIterator out )','line_number':159,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a lower case hexadecimal sequence of characters.','line_number':160,'multiline':False]['text':'/','line_number':161,'multiline':False]['text':'/ \param first    The start of the input sequence','line_number':162,'multiline':False]['text':'/ \param last     One past the end of the input sequence','line_number':163,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':164,'multiline':False]['text':'/ \return         The updated output iterator','line_number':165,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':166,'multiline':False]['text':'/ \fn hex ( const T *ptr, OutputIterator out )','line_number':176,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a hexadecimal sequence of characters.','line_number':177,'multiline':False]['text':'/','line_number':178,'multiline':False]['text':'/ \param ptr      A pointer to a 0-terminated sequence of data.','line_number':179,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':180,'multiline':False]['text':'/ \return         The updated output iterator','line_number':181,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':182,'multiline':False]['text':'/ \fn hex_lower ( const T *ptr, OutputIterator out )','line_number':192,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a lower case hexadecimal sequence of characters.','line_number':193,'multiline':False]['text':'/','line_number':194,'multiline':False]['text':'/ \param ptr      A pointer to a 0-terminated sequence of data.','line_number':195,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':196,'multiline':False]['text':'/ \return         The updated output iterator','line_number':197,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':198,'multiline':False]['text':'/ \fn hex ( const Range &r, OutputIterator out )','line_number':208,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a hexadecimal sequence of characters.','line_number':209,'multiline':False]['text':'/','line_number':210,'multiline':False]['text':'/ \param r        The input range','line_number':211,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':212,'multiline':False]['text':'/ \return         The updated output iterator','line_number':213,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':214,'multiline':False]['text':'/ \fn hex_lower ( const Range &r, OutputIterator out )','line_number':222,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a lower case hexadecimal sequence of characters.','line_number':223,'multiline':False]['text':'/','line_number':224,'multiline':False]['text':'/ \param r        The input range','line_number':225,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':226,'multiline':False]['text':'/ \return         The updated output iterator','line_number':227,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':228,'multiline':False]['text':'/ \fn unhex ( InputIterator first, InputIterator last, OutputIterator out )','line_number':236,'multiline':False]['text':'/ \brief   Converts a sequence of hexadecimal characters into a sequence of integers.','line_number':237,'multiline':False]['text':'/','line_number':238,'multiline':False]['text':'/ \param first    The start of the input sequence','line_number':239,'multiline':False]['text':'/ \param last     One past the end of the input sequence','line_number':240,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':241,'multiline':False]['text':'/ \return         The updated output iterator','line_number':242,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':243,'multiline':False]['text':'/ \fn unhex ( const T *ptr, OutputIterator out )','line_number':252,'multiline':False]['text':'/ \brief   Converts a sequence of hexadecimal characters into a sequence of integers.','line_number':253,'multiline':False]['text':'/','line_number':254,'multiline':False]['text':'/ \param ptr      A pointer to a null-terminated input sequence.','line_number':255,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':256,'multiline':False]['text':'/ \return         The updated output iterator','line_number':257,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':258,'multiline':False]['text':'  If we run into the terminator while decoding, we will throw a','line_number':261,'multiline':False]['text':'      malformed input exception. It would be nicer to throw a 'Not enough input'','line_number':262,'multiline':False]['text':'      exception - but how much extra work would that require?','line_number':263,'multiline':False]['text':'/ \fn OutputIterator unhex ( const Range &r, OutputIterator out )','line_number':270,'multiline':False]['text':'/ \brief   Converts a sequence of hexadecimal characters into a sequence of integers.','line_number':271,'multiline':False]['text':'/','line_number':272,'multiline':False]['text':'/ \param r        The input range','line_number':273,'multiline':False]['text':'/ \param out      An output iterator to the results into','line_number':274,'multiline':False]['text':'/ \return         The updated output iterator','line_number':275,'multiline':False]['text':'/ \note           Based on the MySQL function of the same name','line_number':276,'multiline':False]['text':'/ \fn String hex ( const String &input )','line_number':283,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a hexadecimal sequence of characters.','line_number':284,'multiline':False]['text':'/','line_number':285,'multiline':False]['text':'/ \param input    A container to be converted','line_number':286,'multiline':False]['text':'/ \return         A container with the encoded text','line_number':287,'multiline':False]['text':'/ \fn String hex_lower ( const String &input )','line_number':297,'multiline':False]['text':'/ \brief   Converts a sequence of integral types into a lower case hexadecimal sequence of characters.','line_number':298,'multiline':False]['text':'/','line_number':299,'multiline':False]['text':'/ \param input    A container to be converted','line_number':300,'multiline':False]['text':'/ \return         A container with the encoded text','line_number':301,'multiline':False]['text':'/ \fn String unhex ( const String &input )','line_number':311,'multiline':False]['text':'/ \brief   Converts a sequence of hexadecimal characters into a sequence of characters.','line_number':312,'multiline':False]['text':'/','line_number':313,'multiline':False]['text':'/ \param input    A container to be converted','line_number':314,'multiline':False]['text':'/ \return         A container with the decoded text','line_number':315,'multiline':False]['text':' BOOST_ALGORITHM_HEXHPP','line_number':326,'multiline':False]