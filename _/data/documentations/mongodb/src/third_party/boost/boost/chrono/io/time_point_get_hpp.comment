['text':'  (C) Copyright Howard Hinnant','line_number':1,'multiline':False]['text':'  (C) Copyright 2011 Vicente J. Botet Escriba','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'*
 * Duration formatting facet for input.
 ','line_number':19,'multiline':True]['text':'*
       * Type of character the facet is instantiated on.
       ','line_number':31,'multiline':True]['text':'*
       * Type of iterator used to scan the character buffer.
       ','line_number':35,'multiline':True]['text':'*
       * Construct a @c time_point_get facet.
       * @param refs
       * @Effects Construct a @c time_point_get facet.
       * If the @c refs argument is @c 0 then destruction of the object is
       * delegated to the @c locale, or locales, containing it. This allows
       * the user to ignore lifetime management issues. On the other had,
       * if @c refs is @c 1 then the object must be explicitly deleted;
       * the @c locale will not do so. In this case, the object can be
       * maintained across the lifetime of multiple locales.
       ','line_number':40,'multiline':True]['text':'*
       * @param s start input stream iterator
       * @param end end input stream iterator
       * @param ios a reference to a ios_base
       * @param err the ios_base state
       * @param d the duration
       * @param pattern begin of the formatting pattern
       * @param pat_end end of the formatting pattern
       *
       * Requires: [pattern,pat_end) shall be a valid range.
       *
       * Effects: The function starts by evaluating err = std::ios_base::goodbit.
       * It then enters a loop, reading zero or more characters from s at
       * each iteration. Unless otherwise specified below, the loop
       * terminates when the first of the following conditions holds:
       * - The expression pattern == pat_end evaluates to true.
       * - The expression err == std::ios_base::goodbit evaluates to false.
       * - The expression s == end evaluates to true, in which case the
       * function evaluates err = std::ios_base::eofbit | std::ios_base::failbit.
       * - The next element of pattern is equal to '%', followed by a conversion
       * specifier character, the functions @c get_duration or @c get_epoch are called depending on
       * whether the format is @c 'd' or @c 'e'.
       * If the number of elements in the range [pattern,pat_end) is not
       * sufficient to unambiguously determine whether the conversion
       * specification is complete and valid, the function evaluates
       * err = std::ios_base::failbit. Otherwise, the function evaluates
       * s = do_get(s, end, ios, err, d). If err == std::ios_base::goodbit holds after
       * the evaluation of the expression, the function increments pattern to
       * point just past the end of the conversion specification and continues
       * looping.
       * - The expression isspace(*pattern, ios.getloc()) evaluates to true, in
       * which case the function first increments pattern until
       * pattern == pat_end || !isspace(*pattern, ios.getloc()) evaluates to true,
       * then advances s until s == end || !isspace(*s, ios.getloc()) is true,
       * and finally resumes looping.
       * - The next character read from s matches the element pointed to by
       * pattern in a case-insensitive comparison, in which case the function
       * evaluates ++pattern, ++s and continues looping. Otherwise, the function
       * evaluates err = std::ios_base::failbit.
       *
       * Returns: s
       ','line_number':57,'multiline':True]['text':' Success!  Store it.','line_number':199,'multiline':False]['text':'*
       *
       * @param s an input stream iterator
       * @param ios a reference to a ios_base
       * @param d the duration
       * Stores the duration pattern from the @c duration_unit facet in let say @c str. Last as if
       * @code
       *   return get(s, end, ios, err, ios, d, str.data(), str.data() + str.size());
       * @codeend
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid name
       ','line_number':204,'multiline':True]['text':'*
       * As if
       * @code
       * return facet.get(s, end, ios, err, d);
       * @endcode
       * where @c facet is either the @c duration_get facet associated to the @c ios or an instance of the default @c duration_get facet.
       *
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid duration.
       ','line_number':233,'multiline':True]['text':'*
       *
       * @Effects Let @c facet be the @c time_point_units facet associated to @c is or a new instance of the default @c time_point_units_default facet.
       * Let @c epoch be the epoch string associated to the Clock using this facet.
       * Scans @c i to match @c epoch or @c e is reached.
       *
       * If not match before the @c e is reached @c std::ios_base::failbit is set in @c err.
       * If @c e is reached @c std::ios_base::failbit is set in @c err.
       *
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid epoch.
       ','line_number':265,'multiline':True]['text':'~ std::use_facet<std::ctype<CharT> >(ios.getloc()),','line_number':297,'multiline':False]['text':'*
       * Unique identifier for this type of facet.
       ','line_number':307,'multiline':True]['text':'*
       * @Effects Destroy the facet
       ','line_number':312,'multiline':True]['text':'*
     * Unique identifier for this type of facet.
     ','line_number':320,'multiline':True]['text':' chrono','line_number':326,'multiline':False]['text':' boost','line_number':328,'multiline':False]['text':' header','line_number':330,'multiline':False]