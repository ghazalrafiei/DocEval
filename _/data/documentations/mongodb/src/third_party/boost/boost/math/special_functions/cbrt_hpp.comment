['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' cbrt approximation for z in the range [0.5,1]','line_number':45,'multiline':False]['text':' It's hard to say what number of terms gives the optimum','line_number':46,'multiline':False]['text':' trade off between precision and performance, this seems','line_number':47,'multiline':False]['text':' to be about the best for double precision.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' Maximum Deviation Found:                     1.231e-006','line_number':50,'multiline':False]['text':' Expected Error Term:                         -1.231e-006','line_number':51,'multiline':False]['text':' Maximum Relative Change in Control Points:   5.982e-004','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' 2^-2/3','line_number':63,'multiline':False]['text':' 2^-1/3','line_number':64,'multiline':False]['text':' 2^1/3','line_number':66,'multiline':False]['text':' 2^2/3','line_number':67,'multiline':False]['text':' save for later','line_number':84,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' Now inline Halley iteration.','line_number':106,'multiline':False]['text':' We do this here rather than calling tools::halley_iterate since we can','line_number':107,'multiline':False]['text':' simplify the expressions algebraically, and don't need most of the error','line_number':108,'multiline':False]['text':' checking of the boilerplate version as we know in advance that the function','line_number':109,'multiline':False]['text':' is well behaved...','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' Epsilon calculation uses compile time arithmetic when it's available for type T,','line_number':117,'multiline':False]['text':' otherwise uses ldexp to calculate at runtime:','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' Safe from overflow, use the fast method:','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'','line_number':138,'multiline':False]['text':' Either we're ready to overflow, or we can't tell because numeric_limits isn't','line_number':139,'multiline':False]['text':' available for type T:','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' namespace detail','line_number':154,'multiline':False]['text':' namespace math','line_number':170,'multiline':False]['text':' namespace boost','line_number':171,'multiline':False]['text':' BOOST_MATH_SF_CBRT_HPP','line_number':173,'multiline':False]