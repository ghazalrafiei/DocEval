['text':'','line_number':1,'multiline':False]['text':' recycling_allocator.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ An allocator that caches memory blocks in thread-local storage for reuse.','line_number':26,'multiline':False]['text':'*
 * The @recycling_allocator uses a simple strategy where a limited number of
 * small memory blocks are cached in thread-local storage, if the current
 * thread is running an @c io_context or is part of a @c thread_pool.
 ','line_number':27,'multiline':True]['text':'/ The type of object allocated by the recycling allocator.','line_number':36,'multiline':False]['text':'/ Rebind the allocator to another value_type.','line_number':39,'multiline':False]['text':'/ The rebound @c allocator type.','line_number':43,'multiline':False]['text':'/ Default constructor.','line_number':47,'multiline':False]['text':'/ Converting constructor.','line_number':52,'multiline':False]['text':'/ Equality operator. Always returns true.','line_number':59,'multiline':False]['text':'/ Inequality operator. Always returns false.','line_number':66,'multiline':False]['text':'/ Allocate memory for the specified number of values.','line_number':73,'multiline':False]['text':'/ Deallocate memory for the specified number of values.','line_number':79,'multiline':False]['text':'/ A proto-allocator that caches memory blocks in thread-local storage for','line_number':86,'multiline':False]['text':'/ reuse.','line_number':87,'multiline':False]['text':'*
 * The @recycling_allocator uses a simple strategy where a limited number of
 * small memory blocks are cached in thread-local storage, if the current
 * thread is running an @c io_context or is part of a @c thread_pool.
 ','line_number':88,'multiline':True]['text':'/ No values are allocated by a proto-allocator.','line_number':97,'multiline':False]['text':'/ Rebind the allocator to another value_type.','line_number':100,'multiline':False]['text':'/ The rebound @c allocator type.','line_number':104,'multiline':False]['text':'/ Default constructor.','line_number':108,'multiline':False]['text':'/ Converting constructor.','line_number':113,'multiline':False]['text':'/ Equality operator. Always returns true.','line_number':120,'multiline':False]['text':'/ Inequality operator. Always returns false.','line_number':127,'multiline':False]['text':' namespace asio','line_number':135,'multiline':False]['text':' namespace boost','line_number':136,'multiline':False]['text':' BOOST_ASIO_RECYCLING_ALLOCATOR_HPP','line_number':140,'multiline':False]