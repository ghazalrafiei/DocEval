['text':' boost random/uniform_01.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]['text':'*
 * The distribution function uniform_01 models a \random_distribution.
 * On each invocation, it returns a random floating-point value
 * uniformly distributed in the range [0..1).
 *
 * The template parameter RealType shall denote a float-like value type
 * with support for binary operators +, -, and /.
 *
 * Note: The current implementation is buggy, because it may not fill
 * all of the mantissa with random bits. I'm unsure how to fill a
 * (to-be-invented) @c boost::bigfloat class with random bits efficiently.
 * It's probably time for a traits class.
 ','line_number':33,'multiline':True]['text':' compiler-generated copy ctor and copy assignment are fine','line_number':86,'multiline':False]['text':' compiler-generated copy ctor and copy assignment are fine','line_number':142,'multiline':False]['text':'  A definition is required even for integral static constants','line_number':183,'multiline':False]['text':' Because it is so commonly used: uniform distribution on the real [0..1)','line_number':210,'multiline':False]['text':' range.  This allows for specializations to avoid a costly int -> float','line_number':211,'multiline':False]['text':' conversion plus float multiplication','line_number':212,'multiline':False]['text':' namespace random','line_number':249,'multiline':False]['text':' namespace boost','line_number':253,'multiline':False]['text':' BOOST_RANDOM_UNIFORM_01_HPP','line_number':257,'multiline':False]