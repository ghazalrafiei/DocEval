['text':'','line_number':1,'multiline':False]['text':' basic_random_access_file.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' Forward declaration with defaulted arguments.','line_number':39,'multiline':False]['text':' !defined(BOOST_ASIO_BASIC_RANDOM_ACCESS_FILE_FWD_DECL)','line_number':43,'multiline':False]['text':'/ Provides random-access file functionality.','line_number':45,'multiline':False]['text':'*
 * The basic_random_access_file class template provides asynchronous and
 * blocking random-access file functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * Synchronous @c read_some_at and @c write_some_at operations are thread safe
 * with respect to each other, if the underlying operating system calls are
 * also thread safe. This means that it is permitted to perform concurrent
 * calls to these synchronous operations on a single file object. Other
 * synchronous operations, such as @c open or @c close, are not thread safe.
 ','line_number':46,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':65,'multiline':False]['text':'/ Rebinds the file type to another executor.','line_number':68,'multiline':False]['text':'/ The file type when rebound to the specified executor.','line_number':72,'multiline':False]['text':'/ The native representation of a file.','line_number':76,'multiline':False]['text':'/ Construct a basic_random_access_file without opening it.','line_number':83,'multiline':False]['text':'*
   * This constructor initialises a file without opening it. The file needs to
   * be opened before data can be read from or or written to it.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   ','line_number':84,'multiline':True]['text':'/ Construct a basic_random_access_file without opening it.','line_number':96,'multiline':False]['text':'*
   * This constructor initialises a file without opening it. The file needs to
   * be opened before data can be read from or or written to it.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   ','line_number':97,'multiline':True]['text':'/ Construct and open a basic_random_access_file.','line_number':115,'multiline':False]['text':'*
   * This constructor initialises and opens a file.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':116,'multiline':True]['text':'/ Construct and open a basic_random_access_file.','line_number':135,'multiline':False]['text':'*
   * This constructor initialises and opens a file.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':136,'multiline':True]['text':'/ Construct and open a basic_random_access_file.','line_number':161,'multiline':False]['text':'*
   * This constructor initialises and opens a file.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':162,'multiline':True]['text':'/ Construct and open a basic_random_access_file.','line_number':181,'multiline':False]['text':'*
   * This constructor initialises and opens a file.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':182,'multiline':True]['text':'/ Construct a basic_random_access_file on an existing native file.','line_number':207,'multiline':False]['text':'*
   * This constructor initialises a random-access file object to hold an
   * existing native file.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param native_file The new underlying file implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':208,'multiline':True]['text':'/ Construct a basic_random_access_file on an existing native file.','line_number':225,'multiline':False]['text':'*
   * This constructor initialises a random-access file object to hold an
   * existing native file.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param native_file The new underlying file implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':226,'multiline':True]['text':'/ Move-construct a basic_random_access_file from another.','line_number':250,'multiline':False]['text':'*
   * This constructor moves a random-access file from one object to another.
   *
   * @param other The other basic_random_access_file object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_file(const executor_type&)
   * constructor.
   ','line_number':251,'multiline':True]['text':'/ Move-assign a basic_random_access_file from another.','line_number':266,'multiline':False]['text':'*
   * This assignment operator moves a random-access file from one object to
   * another.
   *
   * @param other The other basic_random_access_file object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_file(const executor_type&)
   * constructor.
   ','line_number':267,'multiline':True]['text':'/ Move-construct a basic_random_access_file from a file of another executor','line_number':284,'multiline':False]['text':'/ type.','line_number':285,'multiline':False]['text':'*
   * This constructor moves a random-access file from one object to another.
   *
   * @param other The other basic_random_access_file object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_file(const executor_type&)
   * constructor.
   ','line_number':286,'multiline':True]['text':'/ Move-assign a basic_random_access_file from a file of another executor','line_number':306,'multiline':False]['text':'/ type.','line_number':307,'multiline':False]['text':'*
   * This assignment operator moves a random-access file from one object to
   * another.
   *
   * @param other The other basic_random_access_file object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_file(const executor_type&)
   * constructor.
   ','line_number':308,'multiline':True]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':328,'multiline':False]['text':'/ Destroys the file.','line_number':330,'multiline':False]['text':'*
   * This function destroys the file, cancelling any outstanding asynchronous
   * operations associated with the file as if by calling @c cancel.
   ','line_number':331,'multiline':True]['text':'/ Write some data to the handle at the specified offset.','line_number':339,'multiline':False]['text':'*
   * This function is used to write data to the random-access handle. The
   * function call will block until one or more bytes of the data has been
   * written successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   *
   * @returns The number of bytes written.
   *
   * @throws boost::system::system_error Thrown on failure. An error code of
   * boost::asio::error::eof indicates that the end of the file was reached.
   *
   * @note The write_some_at operation may not write all of the data. Consider
   * using the @ref write_at function if you need to ensure that all data is
   * written before the blocking operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.write_some_at(42, boost::asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':340,'multiline':True]['text':'/ Write some data to the handle at the specified offset.','line_number':378,'multiline':False]['text':'*
   * This function is used to write data to the random-access handle. The
   * function call will block until one or more bytes of the data has been
   * written successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes written. Returns 0 if an error occurred.
   *
   * @note The write_some operation may not write all of the data to the
   * file. Consider using the @ref write_at function if you need to ensure that
   * all data is written before the blocking operation completes.
   ','line_number':379,'multiline':True]['text':'/ Start an asynchronous write at the specified offset.','line_number':404,'multiline':False]['text':'*
   * This function is used to asynchronously write data to the random-access
   * handle. It is an initiating function for an @ref asynchronous_operation,
   * and always returns immediately.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the completion handler is called.
   *
   * @param token The @ref completion_token that will be used to produce a
   * completion handler, which will be called when the write completes.
   * Potential completion tokens include @ref use_future, @ref use_awaitable,
   * @ref yield_context, or a function object with the correct completion
   * signature. The function signature of the completion handler must be:
   * @code void handler(
   *   const boost::system::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred // Number of bytes written.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the completion handler will not be invoked from within this function.
   * On immediate completion, invocation of the handler will be performed in a
   * manner equivalent to using boost::asio::post().
   *
   * @par Completion Signature
   * @code void(boost::system::error_code, std::size_t) @endcode
   *
   * @note The write operation may not write all of the data to the file.
   * Consider using the @ref async_write_at function if you need to ensure that
   * all data is written before the asynchronous operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.async_write_some_at(42, boost::asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   *
   * @par Per-Operation Cancellation
   * This asynchronous operation supports cancellation for the following
   * boost::asio::cancellation_type values:
   *
   * @li @c cancellation_type::terminal
   *
   * @li @c cancellation_type::partial
   *
   * @li @c cancellation_type::total
   ','line_number':405,'multiline':True]['text':'/ Read some data from the handle at the specified offset.','line_number':473,'multiline':False]['text':'*
   * This function is used to read data from the random-access handle. The
   * function call will block until one or more bytes of data has been read
   * successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @returns The number of bytes read.
   *
   * @throws boost::system::system_error Thrown on failure. An error code of
   * boost::asio::error::eof indicates that the end of the file was reached.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read_at function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.read_some_at(42, boost::asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':474,'multiline':True]['text':'/ Read some data from the handle at the specified offset.','line_number':513,'multiline':False]['text':'*
   * This function is used to read data from the random-access handle. The
   * function call will block until one or more bytes of data has been read
   * successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes read. Returns 0 if an error occurred.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read_at function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   ','line_number':514,'multiline':True]['text':'/ Start an asynchronous read at the specified offset.','line_number':540,'multiline':False]['text':'*
   * This function is used to asynchronously read data from the random-access
   * handle. It is an initiating function for an @ref asynchronous_operation,
   * and always returns immediately.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the completion handler is called.
   *
   * @param token The @ref completion_token that will be used to produce a
   * completion handler, which will be called when the read completes.
   * Potential completion tokens include @ref use_future, @ref use_awaitable,
   * @ref yield_context, or a function object with the correct completion
   * signature. The function signature of the completion handler must be:
   * @code void handler(
   *   const boost::system::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred // Number of bytes read.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the completion handler will not be invoked from within this function.
   * On immediate completion, invocation of the handler will be performed in a
   * manner equivalent to using boost::asio::post().
   *
   * @par Completion Signature
   * @code void(boost::system::error_code, std::size_t) @endcode
   *
   * @note The read operation may not read all of the requested number of bytes.
   * Consider using the @ref async_read_at function if you need to ensure that
   * the requested amount of data is read before the asynchronous operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.async_read_some_at(42, boost::asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   *
   * @par Per-Operation Cancellation
   * This asynchronous operation supports cancellation for the following
   * boost::asio::cancellation_type values:
   *
   * @li @c cancellation_type::terminal
   *
   * @li @c cancellation_type::partial
   *
   * @li @c cancellation_type::total
   ','line_number':541,'multiline':True]['text':' Disallow copying and assignment.','line_number':611,'multiline':False]['text':' If you get an error on the following line it means that your handler','line_number':635,'multiline':False]['text':' does not meet the documented type requirements for a WriteHandler.','line_number':636,'multiline':False]['text':' If you get an error on the following line it means that your handler','line_number':668,'multiline':False]['text':' does not meet the documented type requirements for a ReadHandler.','line_number':669,'multiline':False]['text':' namespace asio','line_number':683,'multiline':False]['text':' namespace boost','line_number':684,'multiline':False]['text':' defined(BOOST_ASIO_HAS_FILE)','line_number':688,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':689,'multiline':False]['text':' BOOST_ASIO_BASIC_RANDOM_ACCESS_FILE_HPP','line_number':691,'multiline':False]