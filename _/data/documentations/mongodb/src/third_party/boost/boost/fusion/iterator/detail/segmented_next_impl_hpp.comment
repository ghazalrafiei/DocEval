['text':'=============================================================================
    Copyright (c) 2011 Eric Niebler

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]['text':'bool is_invalid(stack)','line_number':31,'multiline':False]['text':'{','line_number':32,'multiline':False]['text':'  return empty(car(stack));','line_number':33,'multiline':False]['text':'}','line_number':34,'multiline':False]['text':'//Advance the first iterator in the seq at the','line_number':44,'multiline':False]['text':'//top of a stack of iterator ranges. Return the','line_number':45,'multiline':False]['text':'//new stack.','line_number':46,'multiline':False]['text':'auto pop_front_car(stack)','line_number':47,'multiline':False]['text':'{','line_number':48,'multiline':False]['text':'  return cons(iterator_range(next(begin(car(stack))), end(car(stack))), cdr(stack));','line_number':49,'multiline':False]['text':'}','line_number':50,'multiline':False]['text':' Handle the case where the top of the stack has no usable ','line_number':84,'multiline':False]['text':'auto segmented_next_impl_recurse3(stack)','line_number':85,'multiline':False]['text':'{','line_number':86,'multiline':False]['text':'  if (size(stack) == 1)','line_number':87,'multiline':False]['text':'    return cons(iterator_range(end(car(stack)), end(car(stack))), nil_);','line_number':88,'multiline':False]['text':'  else','line_number':89,'multiline':False]['text':'    return segmented_next_impl_recurse(stack.cdr);','line_number':90,'multiline':False]['text':'}','line_number':91,'multiline':False]['text':'auto segmented_next_impl_recurse2(stack)','line_number':122,'multiline':False]['text':'{','line_number':123,'multiline':False]['text':'  auto res = segmented_begin_impl(front(car(stack)), stack);','line_number':124,'multiline':False]['text':'  if (is_invalid(res))','line_number':125,'multiline':False]['text':'    return segmented_next_impl_recurse3(stack);','line_number':126,'multiline':False]['text':'  else','line_number':127,'multiline':False]['text':'    return res;','line_number':128,'multiline':False]['text':'}','line_number':129,'multiline':False]['text':'auto segmented_next_impl_recurse(stack)','line_number':169,'multiline':False]['text':'{','line_number':170,'multiline':False]['text':'  auto next = pop_front_car(stack);','line_number':171,'multiline':False]['text':'  if (is_invalid(next))','line_number':172,'multiline':False]['text':'    if (1 == size(stack))','line_number':173,'multiline':False]['text':'      return next;','line_number':174,'multiline':False]['text':'    else','line_number':175,'multiline':False]['text':'      return segmented_next_impl_recurse(cdr(stack));','line_number':176,'multiline':False]['text':'  else','line_number':177,'multiline':False]['text':'    return segmented_next_impl_recurse2(next)','line_number':178,'multiline':False]['text':'}','line_number':179,'multiline':False]['text':'auto segmented_next_impl(stack)','line_number':220,'multiline':False]['text':'{','line_number':221,'multiline':False]['text':'  // car(stack) is a seq of values, not a seq of segments','line_number':222,'multiline':False]['text':'  auto next = pop_front_car(stack);','line_number':223,'multiline':False]['text':'  if (is_invalid(next))','line_number':224,'multiline':False]['text':'    return segmented_next_impl_recurse(cdr(next));','line_number':225,'multiline':False]['text':'  else','line_number':226,'multiline':False]['text':'    return next;','line_number':227,'multiline':False]['text':'}','line_number':228,'multiline':False]