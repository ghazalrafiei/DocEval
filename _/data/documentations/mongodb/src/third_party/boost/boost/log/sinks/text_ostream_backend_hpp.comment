['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   text_ostream_backend.hpp
 * \author Andrey Semashev
 * \date   22.04.2007
 *
 * The header contains implementation of a text output stream sink backend.
 ','line_number':7,'multiline':True]['text':'!
 * \brief An implementation of a text output stream logging sink backend
 *
 * The sink backend puts formatted log records to one or more text streams.
 ','line_number':39,'multiline':True]['text':'! Base type','line_number':51,'multiline':False]['text':'! Character type','line_number':58,'multiline':False]['text':'! String type to be used as a message text holder','line_number':60,'multiline':False]['text':'! Output stream type','line_number':62,'multiline':False]['text':'! \cond','line_number':66,'multiline':False]['text':'! \endcond','line_number':71,'multiline':False]['text':'!
     * Constructor. No streams attached to the constructed backend, auto flush feature disabled.
     ','line_number':74,'multiline':True]['text':'!
     * Constructor. Creates a sink backend with the specified named parameters.
     * The following named parameters are supported:
     *
     * \li \c auto_flush - Specifies a flag, whether or not to automatically flush the attached streams after each
     *                     written log record. By default, is \c false.
     * \li \c auto_newline_mode - Specifies automatic trailing newline insertion mode. Must be a value of
     *                            the \c auto_newline_mode enum. By default, is <tt>auto_newline_mode::insert_if_missing</tt>.
     ','line_number':79,'multiline':True]['text':'!
     * Destructor
     ','line_number':95,'multiline':True]['text':'!
     * The method adds a new stream to the sink.
     *
     * \param strm Pointer to the stream. Must not be NULL.
     ','line_number':100,'multiline':True]['text':'!
     * The method removes a stream from the sink. If the stream is not attached to the sink,
     * the method has no effect.
     *
     * \param strm Pointer to the stream. Must not be NULL.
     ','line_number':106,'multiline':True]['text':'!
     * Sets the flag to automatically flush buffers of all attached streams after each log record.
     *
     * \param enable The flag indicates whether the automatic buffer flush should be performed.
     ','line_number':114,'multiline':True]['text':'!
     * Selects whether a trailing newline should be automatically inserted after every log record. See
     * \c auto_newline_mode description for the possible modes of operation.
     *
     * \param mode The trailing newline insertion mode.
     ','line_number':121,'multiline':True]['text':'!
     * The method writes the message to the sink.
     ','line_number':129,'multiline':True]['text':'!
     * The method flushes all attached streams.
     ','line_number':134,'multiline':True]['text':'! Constructor implementation','line_number':141,'multiline':False]['text':'! Constructor implementation','line_number':149,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':151,'multiline':False]['text':'!< Convenience typedef for narrow-character logging','line_number':155,'multiline':False]['text':'!< Convenience typedef for wide-character logging','line_number':158,'multiline':False]['text':' namespace sinks','line_number':161,'multiline':False]['text':' namespace log','line_number':163,'multiline':False]['text':' namespace boost','line_number':165,'multiline':False]['text':' BOOST_LOG_SINKS_TEXT_OSTREAM_BACKEND_HPP_INCLUDED_','line_number':169,'multiline':False]