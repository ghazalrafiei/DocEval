['text':'  scan_keyword.hpp  --------------------------------------------------------------//','line_number':1,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'                     The LLVM Compiler Infrastructure','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This file is dual licensed under the MIT and the University of Illinois Open','line_number':6,'multiline':False]['text':' Source Licenses. See LICENSE.TXT for details.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':9,'multiline':False]['text':'  Adaptation to Boost of the libcxx','line_number':10,'multiline':False]['text':'  Copyright 2010 Vicente J. Botet Escriba','line_number':12,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':14,'multiline':False]['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':15,'multiline':False]['text':' scan_keyword','line_number':36,'multiline':False]['text':' Scans [b, e) until a match is found in the basic_strings range','line_number':37,'multiline':False]['text':'  [kb, ke) or until it can be shown that there is no match in [kb, ke).','line_number':38,'multiline':False]['text':'  b will be incremented (visibly), consuming CharT until a match is found','line_number':39,'multiline':False]['text':'  or proved to not exist.  A keyword may be "", in which will match anything.','line_number':40,'multiline':False]['text':'  If one keyword is a prefix of another, and the next CharT in the input','line_number':41,'multiline':False]['text':'  might match another keyword, the algorithm will attempt to find the longest','line_number':42,'multiline':False]['text':'  matching keyword.  If the longer matching keyword ends up not matching, then','line_number':43,'multiline':False]['text':'  no keyword match is found.  If no keyword match is found, ke is returned','line_number':44,'multiline':False]['text':'  and failbit is set in err.','line_number':45,'multiline':False]['text':'  Else an iterator pointing to the matching keyword is found.  If more than','line_number':46,'multiline':False]['text':'  one keyword matches, an iterator to the first matching keyword is returned.','line_number':47,'multiline':False]['text':'  If on exit b == e, eofbit is set in err.','line_number':48,'multiline':False]['text':'  Examples:','line_number':49,'multiline':False]['text':'  Keywords:  "a", "abb"','line_number':50,'multiline':False]['text':'  If the input is "a", the first keyword matches and eofbit is set.','line_number':51,'multiline':False]['text':'  If the input is "abc", no match is found and "ab" are consumed.','line_number':52,'multiline':False]['text':'  Change free by free_aux to avoid','line_number':68,'multiline':False]['text':' Error: Could not find a match for boost::interprocess::unique_ptr<unsigned char, void(*)(void*)>::unique_ptr(int, extern "C" void(void*))','line_number':69,'multiline':False]['text':' At this point, any keyword might match','line_number':78,'multiline':False]['text':' but none of them definitely do','line_number':79,'multiline':False]['text':' Initialize all statuses to might_match, except for "" keywords are does_match','line_number':80,'multiline':False]['text':' While there might be a match, test keywords against the next CharT','line_number':93,'multiline':False]['text':' Peek at the next CharT but don't consume it','line_number':96,'multiline':False]['text':' For each keyword which might match, see if the indx character is c','line_number':99,'multiline':False]['text':' If a match if found, consume c','line_number':100,'multiline':False]['text':' If a match is found, and that is the last character in the keyword,','line_number':101,'multiline':False]['text':'    then that keyword matches.','line_number':102,'multiline':False]['text':' If the keyword doesn't match this character, then change the keyword','line_number':103,'multiline':False]['text':'    to doesn't match','line_number':104,'multiline':False]['text':' consume if we matched a character','line_number':128,'multiline':False]['text':' If we consumed a character and there might be a matched keyword that','line_number':132,'multiline':False]['text':'   was marked matched on a previous iteration, then such keywords','line_number':133,'multiline':False]['text':'   which are now marked as not matching.','line_number':134,'multiline':False]['text':' We've exited the loop because we hit eof and/or we have no more "might matches".','line_number':149,'multiline':False]['text':' Return the first matching result','line_number':152,'multiline':False]['text':' BOOST_CHRONO_DETAIL_SCAN_KEYWORD_HPP','line_number':163,'multiline':False]