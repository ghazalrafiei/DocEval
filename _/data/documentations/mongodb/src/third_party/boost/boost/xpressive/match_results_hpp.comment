['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file match_results.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of the match_results type and associated helpers.','line_number':3,'multiline':False]['text':'/ The match_results type holds the results of a regex_match() or','line_number':4,'multiline':False]['text':'/ regex_search() operation.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Acknowledgements: Thanks to Markus Schoepflin for helping to track down','line_number':11,'multiline':False]['text':' a tricky formatting bug on HP Tru64, and to Steven Watanabe for suggesting','line_number':12,'multiline':False]['text':' the fix.','line_number':13,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':18,'multiline':False]['text':' Doxygen can't handle proto :-(','line_number':61,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':70,'multiline':False]['text':' type_info_less','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':81,'multiline':False]['text':' ActionArgBinding','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':89,'multiline':False]['text':' results_extras','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':100,'multiline':False]['text':' char_overflow_handler_','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':' throw(regex_error)','line_number':105,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':119,'multiline':False]['text':' transform_op enum','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':125,'multiline':False]['text':' case_converting_iterator','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':209,'multiline':False]['text':' noop_output_iterator','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' work around gcc-4.0.1 compiler bug wrt function references','line_number':338,'multiline':False]['text':' detail','line_number':347,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':349,'multiline':False]['text':' match_results','line_number':350,'multiline':False]['text':'/ \brief Class template match_results\<\> holds the results of a regex_match() or a','line_number':351,'multiline':False]['text':'/ regex_search() as a collection of sub_match objects.','line_number':352,'multiline':False]['text':'/','line_number':353,'multiline':False]['text':'/ Class template match_results\<\> denotes a collection of sequences representing the result of','line_number':354,'multiline':False]['text':'/ a regular expression match. Storage for the collection is allocated and freed as necessary by','line_number':355,'multiline':False]['text':'/ the member functions of class match_results\<\>.','line_number':356,'multiline':False]['text':'/','line_number':357,'multiline':False]['text':'/ The class template match_results\<\> conforms to the requirements of a Sequence, as specified','line_number':358,'multiline':False]['text':'/ in (lib.sequence.reqmts), except that only operations defined for const-qualified Sequences are','line_number':359,'multiline':False]['text':'/ supported.','line_number':360,'multiline':False]['text':'/ INTERNAL ONLY','line_number':365,'multiline':False]['text':'/','line_number':366,'multiline':False]['text':'/ \post regex_id() == 0','line_number':383,'multiline':False]['text':'/ \post size()     == 0','line_number':384,'multiline':False]['text':'/ \post empty()    == true','line_number':385,'multiline':False]['text':'/ \post str()      == string_type()','line_number':386,'multiline':False]['text':'/ \param that The match_results object to copy','line_number':401,'multiline':False]['text':'/ \post regex_id()  == that.regex_id().','line_number':402,'multiline':False]['text':'/ \post size()      == that.size().','line_number':403,'multiline':False]['text':'/ \post empty()     == that.empty().','line_number':404,'multiline':False]['text':'/ \post str(n)      == that.str(n) for all positive integers n \< that.size().','line_number':405,'multiline':False]['text':'/ \post prefix()    == that.prefix().','line_number':406,'multiline':False]['text':'/ \post suffix()    == that.suffix().','line_number':407,'multiline':False]['text':'/ \post (*this)[n]  == that[n] for all positive integers n \< that.size().','line_number':408,'multiline':False]['text':'/ \post length(n)   == that.length(n) for all positive integers n \< that.size().','line_number':409,'multiline':False]['text':'/ \post position(n) == that.position(n) for all positive integers n \< that.size().','line_number':410,'multiline':False]['text':' BUGBUG this doesn't share the extras::sequence_stack','line_number':433,'multiline':False]['text':'/ \param that The match_results object to copy.','line_number':443,'multiline':False]['text':'/ \post regex_id()  == that.regex_id().','line_number':444,'multiline':False]['text':'/ \post size()      == that.size().','line_number':445,'multiline':False]['text':'/ \post empty()     == that.empty().','line_number':446,'multiline':False]['text':'/ \post str(n)      == that.str(n) for all positive integers n \< that.size().','line_number':447,'multiline':False]['text':'/ \post prefix()    == that.prefix().','line_number':448,'multiline':False]['text':'/ \post suffix()    == that.suffix().','line_number':449,'multiline':False]['text':'/ \post (*this)[n]  == that[n] for all positive integers n \< that.size().','line_number':450,'multiline':False]['text':'/ \post length(n)   == that.length(n) for all positive integers n \< that.size().','line_number':451,'multiline':False]['text':'/ \post position(n) == that.position(n) for all positive integers n \< that.size().','line_number':452,'multiline':False]['text':'/ Returns one plus the number of marked sub-expressions in the regular','line_number':459,'multiline':False]['text':'/ expression that was matched if *this represents the result of a','line_number':460,'multiline':False]['text':'/ successful match. Otherwise returns 0.','line_number':461,'multiline':False]['text':'/ Returns size() == 0.','line_number':467,'multiline':False]['text':'/','line_number':468,'multiline':False]['text':'/ Returns (*this)[sub].length().','line_number':474,'multiline':False]['text':'/','line_number':475,'multiline':False]['text':'/ If !(*this)[sub].matched then returns -1. Otherwise returns std::distance(base, (*this)[sub].first),','line_number':481,'multiline':False]['text':'/ where base is the start iterator of the sequence that was searched. [Note - unless this is part','line_number':482,'multiline':False]['text':'/ of a repeated search with a regex_iterator then base is the same as prefix().first - end note]','line_number':483,'multiline':False]['text':'/ Returns (*this)[sub].str().','line_number':489,'multiline':False]['text':'/','line_number':490,'multiline':False]['text':'/ Returns a reference to the sub_match object representing the sequence that','line_number':496,'multiline':False]['text':'/ matched marked sub-expression sub. If sub == 0 then returns a reference to','line_number':497,'multiline':False]['text':'/ a sub_match object representing the sequence that matched the whole regular','line_number':498,'multiline':False]['text':'/ expression. If sub >= size() then returns a sub_match object representing an','line_number':499,'multiline':False]['text':'/ unmatched sub-expression.','line_number':500,'multiline':False]['text':'/ Returns a reference to the sub_match object representing the character sequence from','line_number':507,'multiline':False]['text':'/ the start of the string being matched/searched, to the start of the match found.','line_number':508,'multiline':False]['text':'/','line_number':509,'multiline':False]['text':'/ \pre (*this)[0].matched is true','line_number':510,'multiline':False]['text':'/ Returns a reference to the sub_match object representing the character sequence from','line_number':516,'multiline':False]['text':'/ the end of the match found to the end of the string being matched/searched.','line_number':517,'multiline':False]['text':'/','line_number':518,'multiline':False]['text':'/ \pre (*this)[0].matched is true','line_number':519,'multiline':False]['text':'/ Returns a starting iterator that enumerates over all the marked sub-expression matches','line_number':525,'multiline':False]['text':'/ stored in *this.','line_number':526,'multiline':False]['text':'/','line_number':527,'multiline':False]['text':'/ Returns a terminating iterator that enumerates over all the marked sub-expression','line_number':533,'multiline':False]['text':'/ matches stored in *this.','line_number':534,'multiline':False]['text':'/','line_number':535,'multiline':False]['text':'/ Returns a true value if (*this)[0].matched, else returns a false value.','line_number':541,'multiline':False]['text':'/','line_number':542,'multiline':False]['text':'/ Returns true if empty() || !(*this)[0].matched, else returns false.','line_number':548,'multiline':False]['text':'/','line_number':549,'multiline':False]['text':'/ Returns the id of the basic_regex object most recently used with this match_results object.','line_number':555,'multiline':False]['text':'/','line_number':556,'multiline':False]['text':'/ Returns a Sequence of nested match_results elements.','line_number':562,'multiline':False]['text':'/','line_number':563,'multiline':False]['text':'/ If \c Format models \c ForwardRange or is a null-terminated string, this function','line_number':569,'multiline':False]['text':'/ copies the character sequence in \c fmt to \c OutputIterator \c out. For each format','line_number':570,'multiline':False]['text':'/ specifier or escape sequence in \c fmt, replace that sequence with either the character(s) it','line_number':571,'multiline':False]['text':'/ represents, or the sequence within <tt>*this</tt> to which it refers. The bitmasks specified in flags','line_number':572,'multiline':False]['text':'/ determines what format specifiers or escape sequences are recognized. By default, this is the','line_number':573,'multiline':False]['text':'/ format used by ECMA-262, ECMAScript Language Specification, Chapter 15 part 5.4.11 String.prototype.replace.','line_number':574,'multiline':False]['text':'/','line_number':575,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\>, OutputIterator, regex_constants::match_flag_type\></tt>,','line_number':576,'multiline':False]['text':'/ this function returns <tt>fmt(*this, out, flags)</tt>.','line_number':577,'multiline':False]['text':'/','line_number':578,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\>, OutputIterator\></tt>, this function','line_number':579,'multiline':False]['text':'/ returns <tt>fmt(*this, out)</tt>.','line_number':580,'multiline':False]['text':'/','line_number':581,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\> \></tt>, this function','line_number':582,'multiline':False]['text':'/ returns <tt>std::copy(x.begin(), x.end(), out)</tt>, where \c x is the result of','line_number':583,'multiline':False]['text':'/ calling <tt>fmt(*this)</tt>.','line_number':584,'multiline':False]['text':' Is this a formatter object, or a format string?','line_number':594,'multiline':False]['text':'/ \overload','line_number':606,'multiline':False]['text':'/','line_number':607,'multiline':False]['text':'/ If \c Format models \c ForwardRange or is a null-terminated string, this function','line_number':619,'multiline':False]['text':'/ returns a copy of the character sequence \c fmt. For each format specifier or escape sequence in \c fmt,','line_number':620,'multiline':False]['text':'/ replace that sequence with either the character(s) it represents, or the sequence within','line_number':621,'multiline':False]['text':'/ <tt>*this</tt> to which it refers. The bitmasks specified in \c flags determines what format specifiers','line_number':622,'multiline':False]['text':'/ or escape sequences are recognized. By default this is the format used by ECMA-262,','line_number':623,'multiline':False]['text':'/ ECMAScript Language Specification, Chapter 15 part 5.4.11 String.prototype.replace.','line_number':624,'multiline':False]['text':'/','line_number':625,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\>, OutputIterator, regex_constants::match_flag_type\></tt>,','line_number':626,'multiline':False]['text':'/ this function returns a \c string_type object \c x populated by calling <tt>fmt(*this, out, flags)</tt>,','line_number':627,'multiline':False]['text':'/ where \c out is a \c back_insert_iterator into \c x.','line_number':628,'multiline':False]['text':'/','line_number':629,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\>, OutputIterator\></tt>, this function','line_number':630,'multiline':False]['text':'/ returns a \c string_type object \c x populated by calling <tt>fmt(*this, out)</tt>,','line_number':631,'multiline':False]['text':'/ where \c out is a \c back_insert_iterator into \c x.','line_number':632,'multiline':False]['text':'/','line_number':633,'multiline':False]['text':'/ Otherwise, if \c Format models <tt>Callable\<match_results\<BidiIter\> \></tt>, this function','line_number':634,'multiline':False]['text':'/ returns <tt>fmt(*this)</tt>.','line_number':635,'multiline':False]['text':'/ \overload','line_number':649,'multiline':False]['text':'/','line_number':650,'multiline':False]['text':'/ Swaps the contents of two match_results objects. Guaranteed not to throw.','line_number':662,'multiline':False]['text':'/ \param that The match_results object to swap with.','line_number':663,'multiline':False]['text':'/ \post *this contains the sequence of matched sub-expressions that were in that,','line_number':664,'multiline':False]['text':'/ that contains the sequence of matched sub-expressions that were in *this.','line_number':665,'multiline':False]['text':'/ \throw nothrow','line_number':666,'multiline':False]['text':' throw()','line_number':667,'multiline':False]['text':'/ TODO document me','line_number':681,'multiline':False]['text':'/','line_number':682,'multiline':False]['text':'/ INTERNAL ONLY','line_number':696,'multiline':False]['text':'/','line_number':697,'multiline':False]['text':' BUGBUG this is linear, make it O(1)','line_number':700,'multiline':False]['text':'/ INTERNAL ONLY','line_number':712,'multiline':False]['text':'/','line_number':713,'multiline':False]['text':'/ INTERNAL ONLY','line_number':724,'multiline':False]['text':'/','line_number':725,'multiline':False]['text':'/ INTERNAL ONLY','line_number':741,'multiline':False]['text':'/','line_number':742,'multiline':False]['text':'/ INTERNAL ONLY','line_number':753,'multiline':False]['text':'/','line_number':754,'multiline':False]['text':'/ INTERNAL ONLY','line_number':769,'multiline':False]['text':'/','line_number':770,'multiline':False]['text':'/ INTERNAL ONLY','line_number':776,'multiline':False]['text':'/','line_number':777,'multiline':False]['text':'/ INTERNAL ONLY','line_number':790,'multiline':False]['text':'/','line_number':791,'multiline':False]['text':'/ INTERNAL ONLY','line_number':797,'multiline':False]['text':'/','line_number':798,'multiline':False]['text':'/ INTERNAL ONLY','line_number':804,'multiline':False]['text':'/','line_number':805,'multiline':False]['text':' Should never execute, but if it does, this returns','line_number':818,'multiline':False]['text':' a "null" sub_match.','line_number':819,'multiline':False]['text':'/ INTERNAL ONLY','line_number':823,'multiline':False]['text':'/','line_number':824,'multiline':False]['text':'/ INTERNAL ONLY','line_number':830,'multiline':False]['text':'/','line_number':831,'multiline':False]['text':'/ INTERNAL ONLY','line_number':838,'multiline':False]['text':'/','line_number':839,'multiline':False]['text':'/ INTERNAL ONLY','line_number':852,'multiline':False]['text':'/','line_number':853,'multiline':False]['text':'/ INTERNAL ONLY','line_number':886,'multiline':False]['text':'/','line_number':887,'multiline':False]['text':'/ INTERNAL ONLY','line_number':904,'multiline':False]['text':'/','line_number':905,'multiline':False]['text':'/ INTERNAL ONLY','line_number':922,'multiline':False]['text':'/','line_number':923,'multiline':False]['text':'/ INTERNAL ONLY','line_number':940,'multiline':False]['text':'/','line_number':941,'multiline':False]['text':' detail::ReplaceAlgo may be an incomplete type at this point, so','line_number':951,'multiline':False]['text':' we can't construct it directly.','line_number':952,'multiline':False]['text':'/ INTERNAL ONLY','line_number':957,'multiline':False]['text':'/','line_number':958,'multiline':False]['text':'/ INTERNAL ONLY','line_number':979,'multiline':False]['text':'/','line_number':980,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1006,'multiline':False]['text':'/','line_number':1007,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1041,'multiline':False]['text':'/','line_number':1042,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1053,'multiline':False]['text':'/','line_number':1054,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1125,'multiline':False]['text':'/','line_number':1126,'multiline':False]['text':' whole match','line_number':1143,'multiline':False]['text':' prefix','line_number':1148,'multiline':False]['text':' suffix','line_number':1153,'multiline':False]['text':' a sub-match','line_number':1158,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1175,'multiline':False]['text':'/','line_number':1176,'multiline':False]['text':' define an unsigned type the same size as char_type','line_number':1187,'multiline':False]['text':' Convert to character according to ECMA-262, section 15.10.2.10:','line_number':1258,'multiline':False]['text':' BUGBUG what about backreferences like \12 ?','line_number':1299,'multiline':False]['text':'/ INTERNAL ONLY','line_number':1316,'multiline':False]['text':'/','line_number':1317,'multiline':False]['text':' Should never get here','line_number':1346,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1362,'multiline':False]['text':' regex_id_filter_predicate','line_number':1363,'multiline':False]['text':'','line_number':1364,'multiline':False]['text':' namespace boost::xpressive','line_number':1386,'multiline':False]['text':' Better living through concepts. :-P','line_number':1389,'multiline':False]