['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'! A synchronized_pool_resource is a general-purpose memory resources having','line_number':31,'multiline':False]['text':'! the following qualities:','line_number':32,'multiline':False]['text':'!','line_number':33,'multiline':False]['text':'! - Each resource owns the allocated memory, and frees it on destruction,','line_number':34,'multiline':False]['text':'!   even if deallocate has not been called for some of the allocated blocks.','line_number':35,'multiline':False]['text':'!','line_number':36,'multiline':False]['text':'! - A pool resource consists of a collection of pools, serving','line_number':37,'multiline':False]['text':'!   requests for different block sizes. Each individual pool manages a','line_number':38,'multiline':False]['text':'!   collection of chunks that are in turn divided into blocks of uniform size,','line_number':39,'multiline':False]['text':'!   returned via calls to do_allocate. Each call to do_allocate(size, alignment)','line_number':40,'multiline':False]['text':'!   is dispatched to the pool serving the smallest blocks accommodating at','line_number':41,'multiline':False]['text':'!   least size bytes.','line_number':42,'multiline':False]['text':'!','line_number':43,'multiline':False]['text':'! - When a particular pool is exhausted, allocating a block from that pool','line_number':44,'multiline':False]['text':'!   results in the allocation of an additional chunk of memory from the upstream','line_number':45,'multiline':False]['text':'!   allocator (supplied at construction), thus replenishing the pool. With','line_number':46,'multiline':False]['text':'!   each successive replenishment, the chunk size obtained increases','line_number':47,'multiline':False]['text':'!   geometrically. [ Note: By allocating memory in chunks, the pooling strategy','line_number':48,'multiline':False]['text':'!   increases the chance that consecutive allocations will be close together','line_number':49,'multiline':False]['text':'!   in memory. - end note ]','line_number':50,'multiline':False]['text':'!','line_number':51,'multiline':False]['text':'! - Allocation requests that exceed the largest block size of any pool are','line_number':52,'multiline':False]['text':'!   fulfilled directly from the upstream allocator.','line_number':53,'multiline':False]['text':'!','line_number':54,'multiline':False]['text':'! - A pool_options struct may be passed to the pool resource constructors to','line_number':55,'multiline':False]['text':'!   tune the largest block size and the maximum chunk size.','line_number':56,'multiline':False]['text':'!','line_number':57,'multiline':False]['text':'! A synchronized_pool_resource may be accessed from multiple threads without','line_number':58,'multiline':False]['text':'! external synchronization and may have thread-specific pools to reduce','line_number':59,'multiline':False]['text':'! synchronization costs.','line_number':60,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(const pool_options&,memory_resource*)','line_number':69,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource()','line_number':72,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(memory_resource*)','line_number':75,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(const pool_options&)','line_number':78,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource()','line_number':91,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::release()','line_number':94,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::upstream_resource()const','line_number':97,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::options()const','line_number':100,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::do_allocate()','line_number':105,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::do_deallocate(void*,std::size_t,std::size_t)','line_number':108,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::do_is_equal(const memory_resource&)const','line_number':111,'multiline':False]['text':'Non-standard observers','line_number':114,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::pool_count()','line_number':117,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::pool_index(std::size_t)const','line_number':120,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::pool_next_blocks_per_chunk(std::size_t)const','line_number':123,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::pool_block(std::size_t)const','line_number':126,'multiline':False]['text':'! @copydoc ::boost::container::pmr::unsynchronized_pool_resource::pool_cached_blocks(std::size_t)const','line_number':129,'multiline':False]['text':'namespace pmr {','line_number':133,'multiline':False]['text':'namespace container {','line_number':134,'multiline':False]['text':'namespace boost {','line_number':135,'multiline':False]['text':'BOOST_CONTAINER_PMR_SYNCHRONIZED_POOL_RESOURCE_HPP','line_number':139,'multiline':False]