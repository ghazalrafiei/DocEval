['text':'-----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' boost variant/recursive_wrapper_fwd.hpp header file','line_number':2,'multiline':False]['text':' See http://www.boost.org for updates, documentation, and revision history.','line_number':3,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Copyright (c) 2002 Eric Friedman, Itay Maman','line_number':6,'multiline':False]['text':' Copyright (c) 2016-2022 Antony Polukhin','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Portions Copyright (C) 2002 David Abrahams','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':11,'multiline':False]['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':12,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':13,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////','line_number':27,'multiline':False]['text':' class template recursive_wrapper','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' Enables recursive types in templates by breaking cyclic dependencies.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' For example:','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'   class my;','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':'   typedef variant< int, recursive_wrapper<my> > var;','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':'   class my {','line_number':38,'multiline':False]['text':'     var var_;','line_number':39,'multiline':False]['text':'     ...','line_number':40,'multiline':False]['text':'   };','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':46,'multiline':False]['text':' metafunction is_constructible partial specializations.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' recursive_wrapper<T> is constructible only from T and recursive_wrapper<T>.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' recursive_wrapper is not nothrow move constructible, because it's constructor does dynamic memory allocation.','line_number':69,'multiline':False]['text':' This specialisation is required to workaround GCC6 issue: https://svn.boost.org/trac/boost/ticket/12680','line_number':70,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':73,'multiline':False]['text':' metafunction is_recursive_wrapper (modeled on code by David Abrahams)','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' True if specified type matches recursive_wrapper<T>.','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' namespace detail','line_number':95,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':104,'multiline':False]['text':' metafunction unwrap_recursive','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' If specified type T matches recursive_wrapper<U>, then U; else T.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' namespace boost','line_number':128,'multiline':False]['text':' BOOST_VARIANT_RECURSIVE_WRAPPER_FWD_HPP','line_number':130,'multiline':False]