['text':'=============================================================================
    Copyright (c) 2007-2011 Hartmut Kaiser
    Copyright (c) Christopher Diggins 2005
    Copyright (c) Pablo Aguilar 2005
    Copyright (c) Kevlin Henney 2001

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    The class boost::spirit::hold_any is built based on the any class
    published here: http://www.codeproject.com/cpp/dynamic_typing.asp. It adds
    support for std streaming operator<<() and operator>>().
==============================================================================','line_number':1,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':35,'multiline':False]['text':' 'x': unreferenced formal parameter','line_number':38,'multiline':False]['text':' conditional expression is constant','line_number':39,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':42,'multiline':False]['text':' function pointer table','line_number':63,'multiline':False]['text':' static functions for small value-types','line_number':76,'multiline':False]['text':' static functions for big value-types (bigger than a void*)','line_number':122,'multiline':False]['text':' destruct and free memory','line_number':135,'multiline':False]['text':' destruct only, we'll reuse memory','line_number':140,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////','line_number':189,'multiline':False]['text':' If this assertion fires you tried to insert from a std istream','line_number':196,'multiline':False]['text':' into an empty hold_any instance. This simply can't work, because','line_number':197,'multiline':False]['text':' there is no way to figure out what type to extract from the','line_number':198,'multiline':False]['text':' stream.','line_number':199,'multiline':False]['text':' The only way to make this work is to assign an arbitrary','line_number':200,'multiline':False]['text':' value of the required type to the hold_any instance you want to','line_number':201,'multiline':False]['text':' stream to. This assignment has to be executed before the actual','line_number':202,'multiline':False]['text':' call to the operator>>().','line_number':203,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':218,'multiline':False]['text':' constructors','line_number':223,'multiline':False]['text':' assignment','line_number':250,'multiline':False]['text':' are we copying between the same type?','line_number':254,'multiline':False]['text':' if so, we can avoid reallocation','line_number':256,'multiline':False]['text':' are we copying between the same type?','line_number':271,'multiline':False]['text':' if so, we can avoid deallocating and re-use memory','line_number':275,'multiline':False]['text':' first destruct the old content','line_number':276,'multiline':False]['text':' create copy on-top of object pointer itself','line_number':278,'multiline':False]['text':' create copy on-top of old version','line_number':282,'multiline':False]['text':' create copy on-top of object pointer itself','line_number':288,'multiline':False]['text':' first destruct the old content','line_number':289,'multiline':False]['text':' first delete the old content','line_number':293,'multiline':False]['text':' update table pointer','line_number':296,'multiline':False]['text':' assignment operator','line_number':313,'multiline':False]['text':' copy assignment operator','line_number':333,'multiline':False]['text':' utility functions','line_number':339,'multiline':False]['text':' implicit casting is disabled by default for compatibility with boost::any','line_number':363,'multiline':False]['text':' automatic casting operator','line_number':365,'multiline':False]['text':' implicit casting','line_number':368,'multiline':False]['text':' these functions have been added in the assumption that the embedded','line_number':385,'multiline':False]['text':' type has a corresponding operator defined, which is completely safe','line_number':386,'multiline':False]['text':' because spirit::hold_any is used only in contexts where these operators','line_number':387,'multiline':False]['text':' do exist','line_number':388,'multiline':False]['text':' types','line_number':404,'multiline':False]['text':' types (public so any_cast can be non-friend)','line_number':408,'multiline':False]['text':' fields','line_number':410,'multiline':False]['text':' boost::any-like casting','line_number':415,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':454,'multiline':False]['text':' backwards compatibility','line_number':455,'multiline':False]['text':' namespace boost::spirit','line_number':468,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':470,'multiline':False]