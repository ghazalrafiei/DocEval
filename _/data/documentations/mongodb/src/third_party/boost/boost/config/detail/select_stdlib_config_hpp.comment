['text':'  Boost compiler configuration selection header file','line_number':1,'multiline':False]['text':'  (C) Copyright John Maddock 2001 - 2003. ','line_number':3,'multiline':False]['text':'  (C) Copyright Jens Maurer 2001 - 2002. ','line_number':4,'multiline':False]['text':'  Use, modification and distribution are subject to the ','line_number':5,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file ','line_number':6,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org for most recent version.','line_number':10,'multiline':False]['text':' locate which std lib we are using and define BOOST_STDLIB_CONFIG as needed:','line_number':12,'multiline':False]['text':' First, check if __has_include is available and <version> include can be located,','line_number':14,'multiline':False]['text':' otherwise include <cstddef> to determine if some version of STLport is in use as the std lib','line_number':15,'multiline':False]['text':' (do not rely on this header being included since users can short-circuit this header ','line_number':16,'multiline':False]['text':'  if they know whose std lib they are using.)','line_number':17,'multiline':False]['text':' It should be safe to include `<version>` when it is present without checking','line_number':20,'multiline':False]['text':' the actual C++ language version as it consists solely of macro definitions.','line_number':21,'multiline':False]['text':' [version.syn] p1: The header <version> supplies implementation-dependent','line_number':22,'multiline':False]['text':' information about the C++ standard library (e.g., version number and release date).','line_number':23,'multiline':False]['text':' STLPort library; this _must_ come first, otherwise since','line_number':35,'multiline':False]['text':' STLport typically sits on top of some other library, we','line_number':36,'multiline':False]['text':' can end up detecting that first rather than STLport:','line_number':37,'multiline':False]['text':' If our std lib was not some version of STLport, and has not otherwise','line_number':42,'multiline':False]['text':' been detected, then include <utility> as it is about ','line_number':43,'multiline':False]['text':' the smallest of the std lib headers that includes real C++ stuff.','line_number':44,'multiline':False]['text':' Some std libs do not include their C++-related macros in <cstddef> ','line_number':45,'multiline':False]['text':' so this additional include makes sure we get those definitions.','line_number':46,'multiline':False]['text':' Note: do not rely on this header being included since users can short-circuit this ','line_number':47,'multiline':False]['text':' #include if they know whose std lib they are using.','line_number':48,'multiline':False]['text':' Comeau STL:','line_number':57,'multiline':False]['text':' Rogue Wave library:','line_number':61,'multiline':False]['text':' libc++','line_number':65,'multiline':False]['text':' GNU libstdc++ 3','line_number':69,'multiline':False]['text':' generic SGI STL','line_number':73,'multiline':False]['text':' MSL standard lib:','line_number':77,'multiline':False]['text':' IBM z/OS XL C/C++','line_number':81,'multiline':False]['text':' take the default VACPP std lib','line_number':85,'multiline':False]['text':' Modena C++ standard library','line_number':89,'multiline':False]['text':' Dinkumware Library (this has to appear after any possible replacement libraries):','line_number':93,'multiline':False]['text':' this must come last - generate an error if we don't','line_number':97,'multiline':False]['text':' recognise the library:','line_number':98,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' This section allows dependency scanners to find all the files we *might* include:','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]