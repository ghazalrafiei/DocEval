['text':'','line_number':1,'multiline':False]['text':' strand.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Provides serialised function invocation for any executor type.','line_number':30,'multiline':False]['text':'/ The type of the underlying executor.','line_number':35,'multiline':False]['text':'/ Default constructor.','line_number':38,'multiline':False]['text':'*
   * This constructor is only valid if the underlying executor type is default
   * constructible.
   ','line_number':39,'multiline':True]['text':'/ Construct a strand for the specified executor.','line_number':49,'multiline':False]['text':'/ Copy constructor.','line_number':64,'multiline':False]['text':'/ Converting constructor.','line_number':71,'multiline':False]['text':'*
   * This constructor is only valid if the @c OtherExecutor type is convertible
   * to @c Executor.
   ','line_number':72,'multiline':True]['text':'/ Assignment operator.','line_number':84,'multiline':False]['text':'/ Converting assignment operator.','line_number':92,'multiline':False]['text':'*
   * This assignment operator is only valid if the @c OtherExecutor type is
   * convertible to @c Executor.
   ','line_number':93,'multiline':True]['text':'/ Move constructor.','line_number':107,'multiline':False]['text':'/ Converting move constructor.','line_number':114,'multiline':False]['text':'*
   * This constructor is only valid if the @c OtherExecutor type is convertible
   * to @c Executor.
   ','line_number':115,'multiline':True]['text':'/ Move assignment operator.','line_number':126,'multiline':False]['text':'/ Converting move assignment operator.','line_number':134,'multiline':False]['text':'*
   * This assignment operator is only valid if the @c OtherExecutor type is
   * convertible to @c Executor.
   ','line_number':135,'multiline':True]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':146,'multiline':False]['text':'/ Destructor.','line_number':148,'multiline':False]['text':'/ Obtain the underlying executor.','line_number':153,'multiline':False]['text':'/ Forward a query to the underlying executor.','line_number':159,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::strand<my_executor_type> ex = ...;
   * if (boost::asio::query(ex, boost::asio::execution::blocking)
   *       == boost::asio::execution::blocking.never)
   *   ... @endcode
   ','line_number':160,'multiline':True]['text':'/ Forward a requirement to the underlying executor.','line_number':186,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::strand<my_executor_type> ex1 = ...;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.never); @endcode
   ','line_number':187,'multiline':True]['text':'/ Forward a preference to the underlying executor.','line_number':212,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::prefer customisation point.
   *
   * For example:
   * @code boost::asio::strand<my_executor_type> ex1 = ...;
   * auto ex2 = boost::asio::prefer(ex1,
   *     boost::asio::execution::blocking.never); @endcode
   ','line_number':213,'multiline':True]['text':'/ Obtain the underlying execution context.','line_number':239,'multiline':False]['text':'/ Inform the strand that it has some outstanding work to do.','line_number':245,'multiline':False]['text':'*
   * The strand delegates this call to its underlying executor.
   ','line_number':246,'multiline':True]['text':'/ Inform the strand that some work is no longer outstanding.','line_number':254,'multiline':False]['text':'*
   * The strand delegates this call to its underlying executor.
   ','line_number':255,'multiline':True]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':262,'multiline':False]['text':'/ Request the strand to invoke the given function object.','line_number':264,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::execute customisation point.
   *
   * For example:
   * @code boost::asio::strand<my_executor_type> ex = ...;
   * execution::execute(ex, my_function_object); @endcode
   *
   * This function is used to ask the strand to execute the given function
   * object on its underlying executor. The function object will be executed
   * according to the properties of the underlying executor.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   ','line_number':265,'multiline':True]['text':'/ Request the strand to invoke the given function object.','line_number':292,'multiline':False]['text':'*
   * This function is used to ask the strand to execute the given function
   * object on its underlying executor. The function object will be executed
   * inside this function if the strand is not otherwise busy and if the
   * underlying executor's @c dispatch() function is also able to execute the
   * function before returning.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':293,'multiline':True]['text':'/ Request the strand to invoke the given function object.','line_number':314,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled by the underlying executor's defer function.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':315,'multiline':True]['text':'/ Request the strand to invoke the given function object.','line_number':334,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled by the underlying executor's defer function.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':335,'multiline':True]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':353,'multiline':False]['text':'/ Determine whether the strand is running in the current thread.','line_number':355,'multiline':False]['text':'*
   * @return @c true if the current thread is executing a function that was
   * submitted to the strand using post(), dispatch() or defer(). Otherwise
   * returns @c false.
   ','line_number':356,'multiline':True]['text':'/ Compare two strands for equality.','line_number':366,'multiline':False]['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':367,'multiline':True]['text':'/ Compare two strands for inequality.','line_number':376,'multiline':False]['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':377,'multiline':True]['text':' defined(GENERATING_DOCUMENTATION)','line_number':388,'multiline':False]['text':'* @defgroup make_strand boost::asio::make_strand
 *
 * @brief The boost::asio::make_strand function creates a @ref strand object for
 * an executor or execution context.
 ','line_number':437,'multiline':True]['text':'@{','line_number':442,'multiline':True]['text':'/ Create a @ref strand object for an executor.','line_number':444,'multiline':False]['text':'*
 * @param ex An executor.
 *
 * @returns A strand constructed with the specified executor.
 ','line_number':445,'multiline':True]['text':'/ Create a @ref strand object for an execution context.','line_number':459,'multiline':False]['text':'*
 * @param ctx An execution context, from which an executor will be obtained.
 *
 * @returns A strand constructed with the execution context's executor, obtained
 * by performing <tt>ctx.get_executor()</tt>.
 ','line_number':460,'multiline':True]['text':'@}','line_number':476,'multiline':True]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)','line_number':491,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':506,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':525,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)','line_number':544,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_PREFER_MEMBER_TRAIT)','line_number':563,'multiline':False]['text':' namespace traits','line_number':565,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':567,'multiline':False]['text':' namespace asio','line_number':569,'multiline':False]['text':' namespace boost','line_number':570,'multiline':False]['text':' If both io_context.hpp and strand.hpp have been included, automatically','line_number':574,'multiline':False]['text':' include the header file needed for the io_context::strand class.','line_number':575,'multiline':False]['text':' defined(BOOST_ASIO_IO_CONTEXT_HPP)','line_number':579,'multiline':False]['text':' !defined(BOOST_ASIO_NO_EXTENSIONS)','line_number':580,'multiline':False]['text':' BOOST_ASIO_STRAND_HPP','line_number':582,'multiline':False]