['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':25,'multiline':False]['text':' container/detail','line_number':28,'multiline':False]['text':' intrusive','line_number':38,'multiline':False]['text':' other','line_number':43,'multiline':False]['text':'namespace adaptive_pool_flag{','line_number':58,'multiline':False]['text':'Test if v should be swapped with next (optimization)','line_number':130,'multiline':False]['text':'///////////////////////////','line_number':208,'multiline':False]['text':'','line_number':209,'multiline':False]['text':'    adaptive_pool_types','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':'///////////////////////////','line_number':212,'multiline':False]['text':'An intrusive list of free node from this block','line_number':228,'multiline':False]['text':'///////////////////////////////////////////','line_number':243,'multiline':False]['text':'','line_number':244,'multiline':False]['text':'       candidate_power_of_2_ct','line_number':245,'multiline':False]['text':'','line_number':246,'multiline':False]['text':'///////////////////////////////////////////','line_number':247,'multiline':False]['text':'///////////////////////////////////////////','line_number':363,'multiline':False]['text':'','line_number':364,'multiline':False]['text':'       candidate_power_of_2_rt','line_number':365,'multiline':False]['text':'','line_number':366,'multiline':False]['text':'///////////////////////////////////////////','line_number':367,'multiline':False]['text':'///////////////////////////////////////////','line_number':418,'multiline':False]['text':'','line_number':419,'multiline':False]['text':' private_adaptive_node_pool_impl_common','line_number':420,'multiline':False]['text':'','line_number':421,'multiline':False]['text':'///////////////////////////////////////////','line_number':422,'multiline':False]['text':'!Segment manager typedef','line_number':427,'multiline':False]['text':'Flags','line_number':431,'multiline':False]['text':'align_only','line_number':432,'multiline':False]['text':'Segment manager','line_number':461,'multiline':False]['text':'Intrusive block list','line_number':462,'multiline':False]['text':'Free blocks','line_number':463,'multiline':False]['text':'This macro will activate invariant checking. Slow, but helpful for debugging the code.','line_number':501,'multiline':False]['text':'#define BOOST_CONTAINER_ADAPTIVE_NODE_POOL_CHECK_INVARIANTS','line_number':502,'multiline':False]['text':'Check that the total totally free blocks are correct','line_number':507,'multiline':False]['text':'Try to do checks in a single iteration','line_number':513,'multiline':False]['text':'Check order invariant','line_number':519,'multiline':False]['text':'free_nodes invariant','line_number':526,'multiline':False]['text':'Acummulate total_free_nodes and total_free_blocks','line_number':531,'multiline':False]['text':'Check that header offsets are correct','line_number':536,'multiline':False]['text':'Trampoline function to ease inlining','line_number':556,'multiline':False]['text':'Now check if we've reached the free nodes limit','line_number':585,'multiline':False]['text':'and check if we have free blocks. If so, deallocate as much','line_number':586,'multiline':False]['text':'as we can to stay below the limit','line_number':587,'multiline':False]['text':'First add all possible nodes to the chain','line_number':631,'multiline':False]['text':'Now store remaining nodes in the free list','line_number':636,'multiline':False]['text':'!Allocates a several blocks of nodes. Can throw','line_number':643,'multiline':False]['text':'We allocate a new NodeBlock and put it the last','line_number':657,'multiline':False]['text':'element of the tree','line_number':658,'multiline':False]['text':'In case of error, free memory deallocating all nodes (the new ones allocated','line_number':662,'multiline':False]['text':'in this function plus previously stored nodes in chain).','line_number':663,'multiline':False]['text':'We allocate a new NodeBlock and put it the last','line_number':696,'multiline':False]['text':'element of the tree','line_number':697,'multiline':False]['text':'In case of error, free memory deallocating all nodes (the new ones allocated','line_number':701,'multiline':False]['text':'in this function plus previously stored nodes in chain).','line_number':702,'multiline':False]['text':'First initialize header information on the last subblock','line_number':706,'multiline':False]['text':'Some structural checks','line_number':709,'multiline':False]['text':'Initialize header offset mark','line_number':715,'multiline':False]['text':'!Allocates array of count elements. Can throw','line_number':729,'multiline':False]['text':'If there are no free nodes we allocate a new block','line_number':734,'multiline':False]['text':'We take the first free node the multiset can't be empty','line_number':736,'multiline':False]['text':'If there are no free nodes we allocate all needed blocks','line_number':766,'multiline':False]['text':'chain.splice_after(chain.last(), free_nodes, it_bbeg, it_bend, num_elems);','line_number':791,'multiline':False]['text':'!Deallocates an array pointed by ptr. Never throws','line_number':812,'multiline':False]['text':'We put the node at the beginning of the free node list','line_number':822,'multiline':False]['text':'The loop reinserts all blocks except the last one','line_number':825,'multiline':False]['text':'To take advantage of node locality, wait until two','line_number':836,'multiline':False]['text':'nodes belong to different blocks. Only then reinsert','line_number':837,'multiline':False]['text':'the block of the first node in the block tree.','line_number':838,'multiline':False]['text':'Cache of the previous block','line_number':839,'multiline':False]['text':'If block was empty before this call, it's not already','line_number':842,'multiline':False]['text':'inserted in the block tree.','line_number':843,'multiline':False]['text':'If block change is detected calculate the cached block position in the tree','line_number':856,'multiline':False]['text':'Make sure we skip the initial "dummy" cache','line_number':858,'multiline':False]['text':'Update cache with new data','line_number':865,'multiline':False]['text':'The loop reinserts all blocks except the last one','line_number':874,'multiline':False]['text':'Cache the free nodes from the block','line_number':887,'multiline':False]['text':'Update free block count','line_number':891,'multiline':False]['text':'!Deallocates all used memory. Never throws','line_number':921,'multiline':False]['text':'Check for memory leak','line_number':929,'multiline':False]['text':'Check for memory leaks','line_number':935,'multiline':False]['text':'General purpose allocator','line_number':946,'multiline':False]['text':'!Returns the segment manager. Never throws','line_number':970,'multiline':False]['text':'///////////////////////////////////////////','line_number':1023,'multiline':False]['text':'','line_number':1024,'multiline':False]['text':'    private_adaptive_node_pool_impl_ct','line_number':1025,'multiline':False]['text':'','line_number':1026,'multiline':False]['text':'///////////////////////////////////////////','line_number':1027,'multiline':False]['text':'Non-copyable','line_number':1039,'multiline':False]['text':'align_only','line_number':1052,'multiline':False]['text':'Round the size to a power of two value.','line_number':1066,'multiline':False]['text':'This is the total memory size (including payload) that we want to','line_number':1067,'multiline':False]['text':'allocate from the general-purpose allocator','line_number':1068,'multiline':False]['text':'!Constructor from a segment manager. Never throws','line_number':1075,'multiline':False]['text':'General purpose allocator','line_number':1077,'multiline':False]['text':'!Destructor. Deallocates all allocated blocks. Never throws','line_number':1081,'multiline':False]['text':'!Allocates array of count elements. Can throw','line_number':1088,'multiline':False]['text':'!Allocates n nodes.','line_number':1095,'multiline':False]['text':'!Can throw','line_number':1096,'multiline':False]['text':'!Deallocates an array pointed by ptr. Never throws','line_number':1103,'multiline':False]['text':'!Deallocates a linked list of nodes. Never throws','line_number':1109,'multiline':False]['text':'Deprecated, use deallocate_free_blocks','line_number':1118,'multiline':False]['text':'///////////////////////////////////////////','line_number':1123,'multiline':False]['text':'','line_number':1124,'multiline':False]['text':'    private_adaptive_node_pool_impl_rt','line_number':1125,'multiline':False]['text':'','line_number':1126,'multiline':False]['text':'///////////////////////////////////////////','line_number':1127,'multiline':False]['text':'Round the size to a power of two value.','line_number':1140,'multiline':False]['text':'This is the total memory size (including payload) that we want to','line_number':1141,'multiline':False]['text':'allocate from the general-purpose allocator','line_number':1142,'multiline':False]['text':'This is the real number of nodes per block','line_number':1145,'multiline':False]['text':'Non-copyable','line_number':1158,'multiline':False]['text':'Flags','line_number':1171,'multiline':False]['text':'align_only','line_number':1172,'multiline':False]['text':'!Segment manager typedef','line_number':1180,'multiline':False]['text':'!Constructor from a segment manager. Never throws','line_number':1183,'multiline':False]['text':'!Destructor. Deallocates all allocated blocks. Never throws','line_number':1212,'multiline':False]['text':'!Allocates array of count elements. Can throw','line_number':1219,'multiline':False]['text':'!Allocates n nodes.','line_number':1226,'multiline':False]['text':'!Can throw','line_number':1227,'multiline':False]['text':'!Deallocates an array pointed by ptr. Never throws','line_number':1235,'multiline':False]['text':'!Deallocates a linked list of nodes. Never throws','line_number':1241,'multiline':False]['text':'Deprecated, use deallocate_free_blocks','line_number':1250,'multiline':False]['text':'namespace dtl {','line_number':1255,'multiline':False]['text':'namespace container {','line_number':1256,'multiline':False]['text':'namespace boost {','line_number':1257,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DETAIL_ADAPTIVE_NODE_POOL_IMPL_HPP','line_number':1261,'multiline':False]