['text':'
 *          Copyright Andrey Semashev 2007 - 2013.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   intrusive_ref_counter.hpp
 * \author Andrey Semashev
 * \date   12.03.2009
 *
 * This header contains a reference counter class for \c intrusive_ptr.
 ','line_number':7,'multiline':True]['text':' This is a bogus MSVC warning, which is flagged by friend declarations of intrusive_ptr_add_ref and intrusive_ptr_release in intrusive_ref_counter:','line_number':28,'multiline':False]['text':' 'name' : the inline specifier cannot be used when a friend declaration refers to a specialization of a function template','line_number':29,'multiline':False]['text':' Note that there is no inline specifier in the declarations.','line_number':30,'multiline':False]['text':'!
 * \brief Thread unsafe reference counter policy for \c intrusive_ref_counter
 *
 * The policy instructs the \c intrusive_ref_counter base class to implement
 * a reference counter suitable for single threaded use only. Pointers to the same
 * object with this kind of reference counter must not be used by different threads.
 ','line_number':38,'multiline':True]['text':'!
 * \brief Thread safe reference counter policy for \c intrusive_ref_counter
 *
 * The policy instructs the \c intrusive_ref_counter base class to implement
 * a thread-safe reference counter, if the target platform supports multithreading.
 ','line_number':65,'multiline':True]['text':'!
 * \brief A reference counter base class
 *
 * This base class can be used with user-defined classes to add support
 * for \c intrusive_ptr. The class contains a reference counter defined by the \c CounterPolicyT.
 * Upon releasing the last \c intrusive_ptr referencing the object
 * derived from the \c intrusive_ref_counter class, operator \c delete
 * is automatically called on the pointer to the object.
 *
 * The other template parameter, \c DerivedT, is the user's class that derives from \c intrusive_ref_counter.
 ','line_number':99,'multiline':True]['text':'! Reference counter type','line_number':114,'multiline':False]['text':'! Reference counter','line_number':116,'multiline':False]['text':'!
     * Default constructor
     *
     * \post <tt>use_count() == 0</tt>
     ','line_number':120,'multiline':True]['text':'!
     * Copy constructor
     *
     * \post <tt>use_count() == 0</tt>
     ','line_number':129,'multiline':True]['text':'!
     * Assignment
     *
     * \post The reference counter is not modified after assignment
     ','line_number':138,'multiline':True]['text':'!
     * \return The reference counter
     ','line_number':145,'multiline':True]['text':'!
     * Destructor
     ','line_number':154,'multiline':True]['text':' namespace sp_adl_block','line_number':176,'multiline':False]['text':' namespace boost','line_number':182,'multiline':False]['text':' BOOST_SMART_PTR_INTRUSIVE_REF_COUNTER_HPP_INCLUDED_','line_number':188,'multiline':False]