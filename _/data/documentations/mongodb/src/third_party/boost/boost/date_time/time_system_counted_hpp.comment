['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'! Time representation that uses a single integer count','line_number':22,'multiline':False]['text':'std::cout << time_count_ << std::endl;','line_number':41,'multiline':False]['text':'std::cout << "time_rep here:" << dc << std::endl;','line_number':63,'multiline':False]['text':'int_type day_count() const','line_number':68,'multiline':False]['text':' resolution_traits::as_number returns a boost::int64_t &
       * frac_sec_per_day is also a boost::int64_t so, naturally,
       * the division operation returns a boost::int64_t.
       * The static_cast to an unsigned long is ok (results in no data loss)
       * because frac_sec_per_day is either the number of
       * microseconds per day, or the number of nanoseconds per day.
       * Worst case scenario: resolution_traits::as_number returns the
       * maximum value an int64_t can hold and frac_sec_per_day
       * is microseconds per day (lowest possible value).
       * The division operation will then return a value of 106751991 -
       * easily fitting in an unsigned long.
       ','line_number':72,'multiline':True]['text':'! An unadjusted time system implementation.','line_number':124,'multiline':False]['text':'namespace date_time','line_number':264,'multiline':False]