['text':'  (C) Copyright 2009-2011 Frederic Bron, Robert Stewart, Steven Watanabe & Roman Perepelitsa.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':7,'multiline':False]['text':' avoid warnings','line_number':74,'multiline':False]['text':' This namespace ensures that argument-dependent name lookup does not mess things up.','line_number':88,'multiline':False]['text':' 1. a function to have an instance of type T without requiring T to be default','line_number':91,'multiline':False]['text':' constructible','line_number':92,'multiline':False]['text':' 2. we provide our operator definition for types that do not have one already','line_number':96,'multiline':False]['text':' a type returned from operator BOOST_TT_TRAIT_OP when no such operator is','line_number':98,'multiline':False]['text':' found in the type's own namespace (our own operator is used) so that we have','line_number':99,'multiline':False]['text':' a means to know that our operator was used','line_number':100,'multiline':False]['text':' this class allows implicit conversions and makes the following operator','line_number':103,'multiline':False]['text':' definition less-preferred than any other such operators that might be found','line_number':104,'multiline':False]['text':' via argument-dependent name lookup','line_number':105,'multiline':False]['text':' when operator BOOST_TT_TRAIT_OP is not available, this one is used','line_number':108,'multiline':False]['text':' 3. checks if the operator returns void or not','line_number':112,'multiline':False]['text':' conditions: Lhs!=void','line_number':113,'multiline':False]['text':' we first redefine "operator," so that we have no compilation error if','line_number':115,'multiline':False]['text':' operator BOOST_TT_TRAIT_OP returns void and we can use the return type of','line_number':116,'multiline':False]['text':' (lhs BOOST_TT_TRAIT_OP, returns_void_t()) to deduce if','line_number':117,'multiline':False]['text':' operator BOOST_TT_TRAIT_OP returns void or not:','line_number':118,'multiline':False]['text':' - operator BOOST_TT_TRAIT_OP returns void   -> (lhs BOOST_TT_TRAIT_OP, returns_void_t()) returns returns_void_t','line_number':119,'multiline':False]['text':' - operator BOOST_TT_TRAIT_OP returns !=void -> (lhs BOOST_TT_TRAIT_OP, returns_void_t()) returns int','line_number':120,'multiline':False]['text':' this intermediate trait has member value of type bool:','line_number':125,'multiline':False]['text':' - value==true -> operator BOOST_TT_TRAIT_OP returns void','line_number':126,'multiline':False]['text':' - value==false -> operator BOOST_TT_TRAIT_OP does not return void','line_number':127,'multiline':False]['text':' overloads of function returns_void make the difference','line_number':130,'multiline':False]['text':' yes_type and no_type have different size by construction','line_number':131,'multiline':False]['text':' 4. checks if the return type is Ret or Ret==dont_care','line_number':138,'multiline':False]['text':' conditions: Lhs!=void','line_number':139,'multiline':False]['text':' otherwise checks if it is convertible to Ret using the sizeof trick','line_number':171,'multiline':False]['text':' based on overload resolution','line_number':172,'multiline':False]['text':' condition: Ret!=void and Ret!=dont_care and the operator does not return void','line_number':173,'multiline':False]['text':' this version is preferred for types convertible to Ret','line_number':176,'multiline':False]['text':' this version is used otherwise','line_number':177,'multiline':False]['text':' 5. checks for operator existence','line_number':183,'multiline':False]['text':' condition: Lhs!=void','line_number':184,'multiline':False]['text':' checks if our definition of operator BOOST_TT_TRAIT_OP is used or an other','line_number':186,'multiline':False]['text':' existing one;','line_number':187,'multiline':False]['text':' this is done with redefinition of "operator," that returns no_operator or has_operator','line_number':188,'multiline':False]['text':' this version is preferred when operator exists','line_number':194,'multiline':False]['text':' this version is used otherwise','line_number':195,'multiline':False]['text':' 6. main trait: to avoid any compilation error, this class behaves','line_number':201,'multiline':False]['text':' differently when operator BOOST_TT_TRAIT_OP(Lhs) is forbidden by the','line_number':202,'multiline':False]['text':' standard.','line_number':203,'multiline':False]['text':' Forbidden_if is a bool that is:','line_number':204,'multiline':False]['text':' - true when the operator BOOST_TT_TRAIT_OP(Lhs) is forbidden by the standard','line_number':205,'multiline':False]['text':'   (would yield compilation error if used)','line_number':206,'multiline':False]['text':' - false otherwise','line_number':207,'multiline':False]['text':' specialization needs to be declared for the special void case','line_number':222,'multiline':False]['text':' defines some typedef for convenience','line_number':228,'multiline':False]['text':' namespace impl','line_number':237,'multiline':False]['text':' namespace detail','line_number':238,'multiline':False]['text':' this is the accessible definition of the trait to end user','line_number':240,'multiline':False]['text':' namespace boost','line_number':244,'multiline':False]