['text':'','line_number':1,'multiline':False]['text':' system_executor.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ An executor that uses arbitrary threads.','line_number':29,'multiline':False]['text':'*
 * The system executor represents an execution context where functions are
 * permitted to run on arbitrary threads. When the blocking.never property is
 * established, the system executor will schedule the function to run on an
 * unspecified system thread pool. When either blocking.possibly or
 * blocking.always is established, the executor invokes the function
 * immediately.
 ','line_number':30,'multiline':True]['text':'/ Default constructor.','line_number':42,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':52,'multiline':False]['text':'/ Obtain an executor with the @c blocking.possibly property.','line_number':54,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.possibly); @endcode
   ','line_number':55,'multiline':True]['text':'/ Obtain an executor with the @c blocking.always property.','line_number':72,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.always); @endcode
   ','line_number':73,'multiline':True]['text':'/ Obtain an executor with the @c blocking.never property.','line_number':90,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.never); @endcode
   ','line_number':91,'multiline':True]['text':'/ Obtain an executor with the @c relationship.continuation property.','line_number':108,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.continuation); @endcode
   ','line_number':109,'multiline':True]['text':'/ Obtain an executor with the @c relationship.fork property.','line_number':126,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.fork); @endcode
   ','line_number':127,'multiline':True]['text':'/ Obtain an executor with the specified @c allocator property.','line_number':144,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator(my_allocator)); @endcode
   ','line_number':145,'multiline':True]['text':'/ Obtain an executor with the default @c allocator property.','line_number':162,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex1;
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':163,'multiline':True]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':186,'multiline':False]['text':'/ Query the current value of the @c mapping property.','line_number':188,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * if (boost::asio::query(ex, boost::asio::execution::mapping)
   *       == boost::asio::execution::mapping.thread)
   *   ... @endcode
   ','line_number':189,'multiline':True]['text':'/ Query the current value of the @c context property.','line_number':205,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * boost::asio::system_context& pool = boost::asio::query(
   *     ex, boost::asio::execution::context); @endcode
   ','line_number':206,'multiline':True]['text':'/ Query the current value of the @c blocking property.','line_number':217,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * if (boost::asio::query(ex, boost::asio::execution::blocking)
   *       == boost::asio::execution::blocking.always)
   *   ... @endcode
   ','line_number':218,'multiline':True]['text':'/ Query the current value of the @c relationship property.','line_number':234,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * if (boost::asio::query(ex, boost::asio::execution::relationship)
   *       == boost::asio::execution::relationship.continuation)
   *   ... @endcode
   ','line_number':235,'multiline':True]['text':'/ Query the current value of the @c allocator property.','line_number':251,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':252,'multiline':True]['text':'/ Query the current value of the @c allocator property.','line_number':268,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':269,'multiline':True]['text':'/ Query the occupancy (recommended number of work items) for the system','line_number':284,'multiline':False]['text':'/ context.','line_number':285,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * std::size_t occupancy = boost::asio::query(
   *     ex, boost::asio::execution::occupancy); @endcode
   ','line_number':286,'multiline':True]['text':'/ Compare two executors for equality.','line_number':298,'multiline':False]['text':'*
   * Two executors are equal if they refer to the same underlying io_context.
   ','line_number':299,'multiline':True]['text':'/ Compare two executors for inequality.','line_number':308,'multiline':False]['text':'*
   * Two executors are equal if they refer to the same underlying io_context.
   ','line_number':309,'multiline':True]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':321,'multiline':False]['text':'/ Execution function.','line_number':323,'multiline':False]['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::execute customisation point.
   *
   * For example:
   * @code boost::asio::system_executor ex;
   * execution::execute(ex, my_function_object); @endcode
   ','line_number':324,'multiline':True]['text':'/ Obtain the underlying execution context.','line_number':340,'multiline':False]['text':'/ Inform the executor that it has some outstanding work to do.','line_number':343,'multiline':False]['text':'*
   * For the system executor, this is a no-op.
   ','line_number':344,'multiline':True]['text':'/ Inform the executor that some work is no longer outstanding.','line_number':351,'multiline':False]['text':'*
   * For the system executor, this is a no-op.
   ','line_number':352,'multiline':True]['text':'/ Request the system executor to invoke the given function object.','line_number':359,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will always be executed inside this function.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':360,'multiline':True]['text':'/ Request the system executor to invoke the given function object.','line_number':374,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled to run on an unspecified system thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':375,'multiline':True]['text':'/ Request the system executor to invoke the given function object.','line_number':390,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled to run on an unspecified system thread pool.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':391,'multiline':True]['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':405,'multiline':False]['text':' Constructor used by require().','line_number':410,'multiline':False]['text':'/ Execution helper implementation for the possibly blocking property.','line_number':416,'multiline':False]['text':'/ Execution helper implementation for the always blocking property.','line_number':421,'multiline':False]['text':'/ Execution helper implementation for the never blocking property.','line_number':426,'multiline':False]['text':' The allocator used for execution functions.','line_number':431,'multiline':False]['text':'/ An executor that uses arbitrary threads.','line_number':435,'multiline':False]['text':'*
 * The system executor represents an execution context where functions are
 * permitted to run on arbitrary threads. When the blocking.never property is
 * established, the system executor will schedule the function to run on an
 * unspecified system thread pool. When either blocking.possibly or
 * blocking.always is established, the executor invokes the function
 * immediately.
 ','line_number':436,'multiline':True]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)','line_number':463,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':479,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)','line_number':573,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)','line_number':600,'multiline':False]['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':673,'multiline':False]['text':' namespace traits','line_number':675,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':677,'multiline':False]['text':' namespace asio','line_number':679,'multiline':False]['text':' namespace boost','line_number':680,'multiline':False]['text':' BOOST_ASIO_SYSTEM_EXECUTOR_HPP','line_number':686,'multiline':False]