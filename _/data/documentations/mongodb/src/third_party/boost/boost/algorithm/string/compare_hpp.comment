['text':'  Boost string_algo library compare.hpp header file  -------------------------//','line_number':1,'multiline':False]['text':'  Copyright Pavol Droba 2002-2006.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':'! \file
    Defines element comparison predicates. Many algorithms in this library can
    take an additional argument with a predicate used to compare elements.
    This makes it possible, for instance, to have case insensitive versions
    of the algorithms.
','line_number':17,'multiline':True]['text':'  is_equal functor  -----------------------------------------------//','line_number':27,'multiline':False]['text':'! is_equal functor','line_number':29,'multiline':False]['text':'!
            Standard STL equal_to only handle comparison between arguments
            of the same type. This is a less restrictive version which wraps operator ==.
        ','line_number':30,'multiline':True]['text':'! Function operator','line_number':36,'multiline':False]['text':'!
                Compare two operands for equality
            ','line_number':37,'multiline':True]['text':'! case insensitive version of is_equal','line_number':47,'multiline':False]['text':'!
            Case insensitive comparison predicate. Comparison is done using
            specified locales.
        ','line_number':48,'multiline':True]['text':'! Constructor','line_number':54,'multiline':False]['text':'!
                \param Loc locales used for comparison
            ','line_number':55,'multiline':True]['text':'! Function operator','line_number':61,'multiline':False]['text':'!
                Compare two operands. Case is ignored.
            ','line_number':62,'multiline':True]['text':'  is_less functor  -----------------------------------------------//','line_number':79,'multiline':False]['text':'! is_less functor','line_number':81,'multiline':False]['text':'!
            Convenient version of standard std::less. Operation is templated, therefore it is 
            not required to specify the exact types upon the construction
         ','line_number':82,'multiline':True]['text':'! Functor operation','line_number':88,'multiline':False]['text':'!
                Compare two operands using > operator
             ','line_number':89,'multiline':True]['text':'! case insensitive version of is_less','line_number':100,'multiline':False]['text':'!
            Case insensitive comparison predicate. Comparison is done using
            specified locales.
        ','line_number':101,'multiline':True]['text':'! Constructor','line_number':107,'multiline':False]['text':'!
                \param Loc locales used for comparison
            ','line_number':108,'multiline':True]['text':'! Function operator','line_number':114,'multiline':False]['text':'!
                Compare two operands. Case is ignored.
            ','line_number':115,'multiline':True]['text':'  is_not_greater functor  -----------------------------------------------//','line_number':132,'multiline':False]['text':'! is_not_greater functor','line_number':134,'multiline':False]['text':'!
            Convenient version of standard std::not_greater_to. Operation is templated, therefore it is 
            not required to specify the exact types upon the construction
         ','line_number':135,'multiline':True]['text':'! Functor operation','line_number':141,'multiline':False]['text':'!
                Compare two operands using > operator
             ','line_number':142,'multiline':True]['text':'! case insensitive version of is_not_greater','line_number':153,'multiline':False]['text':'!
            Case insensitive comparison predicate. Comparison is done using
            specified locales.
        ','line_number':154,'multiline':True]['text':'! Constructor','line_number':160,'multiline':False]['text':'!
                \param Loc locales used for comparison
            ','line_number':161,'multiline':True]['text':'! Function operator','line_number':167,'multiline':False]['text':'!
                Compare two operands. Case is ignored.
            ','line_number':168,'multiline':True]['text':' namespace algorithm','line_number':186,'multiline':False]['text':' pull names to the boost namespace','line_number':188,'multiline':False]['text':' namespace boost','line_number':196,'multiline':False]['text':' BOOST_STRING_COMPARE_HPP','line_number':199,'multiline':False]