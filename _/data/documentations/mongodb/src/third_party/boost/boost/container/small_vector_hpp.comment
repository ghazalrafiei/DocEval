['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':25,'multiline':False]['text':'new_allocator','line_number':29,'multiline':False]['text':' container/detail','line_number':30,'multiline':False]['text':'move','line_number':34,'multiline':False]['text':'move/detail','line_number':38,'multiline':False]['text':'std','line_number':44,'multiline':False]['text':'for std::initializer_list','line_number':46,'multiline':False]['text':'namespace dtl','line_number':93,'multiline':False]['text':'! A non-standard allocator used to implement `small_vector`.','line_number':95,'multiline':False]['text':'! Users should never use it directly. It is described here','line_number':96,'multiline':False]['text':'! for documentation purposes.','line_number':97,'multiline':False]['text':'! ','line_number':98,'multiline':False]['text':'! This allocator inherits from a standard-conforming allocator','line_number':99,'multiline':False]['text':'! and forwards member functions to the standard allocator except','line_number':100,'multiline':False]['text':'! when internal storage is being used as memory source.','line_number':101,'multiline':False]['text':'!','line_number':102,'multiline':False]['text':'! This allocator is a "partially_propagable" allocator and','line_number':103,'multiline':False]['text':'! defines `is_partially_propagable` as true_type.','line_number':104,'multiline':False]['text':'! ','line_number':105,'multiline':False]['text':'! A partially propagable allocator means that not all storage','line_number':106,'multiline':False]['text':'! allocatod by an instance of `small_vector_allocator` can be','line_number':107,'multiline':False]['text':'! deallocated by another instance of this type, even if both','line_number':108,'multiline':False]['text':'! instances compare equal or an instance is propagated to another','line_number':109,'multiline':False]['text':'! one using the copy/move constructor or assignment. The storage that','line_number':110,'multiline':False]['text':'! can never be propagated is identified by `storage_is_unpropagable(p)`.','line_number':111,'multiline':False]['text':'!','line_number':112,'multiline':False]['text':'! `boost::container::vector` supports partially propagable allocators','line_number':113,'multiline':False]['text':'! fallbacking to deep copy/swap/move operations when internal storage','line_number':114,'multiline':False]['text':'! is being used to store vector elements.','line_number':115,'multiline':False]['text':'!','line_number':116,'multiline':False]['text':'! `small_vector_allocator` assumes that will be instantiated as','line_number':117,'multiline':False]['text':'! `boost::container::vector< T, small_vector_allocator<T, Allocator> >`','line_number':118,'multiline':False]['text':'! and internal storage can be obtained downcasting that vector','line_number':119,'multiline':False]['text':'! to `small_vector_base<T>`.','line_number':120,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':139,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':144,'multiline':False]['text':'! An integral constant with member `value == false`','line_number':159,'multiline':False]['text':'! An integral constant with member `value == true`','line_number':161,'multiline':False]['text':'!Obtains an small_vector_allocator that allocates','line_number':166,'multiline':False]['text':'!objects of type T2','line_number':167,'multiline':False]['text':'!Constructor from other small_vector_allocator.','line_number':177,'multiline':False]['text':'!Never throws','line_number':178,'multiline':False]['text':'!Move constructor from small_vector_allocator.','line_number':184,'multiline':False]['text':'!Never throws','line_number':185,'multiline':False]['text':'!Constructor from related small_vector_allocator.','line_number':191,'multiline':False]['text':'!Never throws','line_number':192,'multiline':False]['text':'!Move constructor from related small_vector_allocator.','line_number':199,'multiline':False]['text':'!Never throws','line_number':200,'multiline':False]['text':'!Constructor from allocator_type.','line_number':207,'multiline':False]['text':'!Never throws','line_number':208,'multiline':False]['text':'!Assignment from other small_vector_allocator.','line_number':214,'multiline':False]['text':'!Never throws','line_number':215,'multiline':False]['text':'!Move assignment from other small_vector_allocator.','line_number':220,'multiline':False]['text':'!Never throws','line_number':221,'multiline':False]['text':'!Assignment from related small_vector_allocator.','line_number':226,'multiline':False]['text':'!Never throws','line_number':227,'multiline':False]['text':'!Move assignment from related small_vector_allocator.','line_number':233,'multiline':False]['text':'!Never throws','line_number':234,'multiline':False]['text':'!Move assignment from allocator_type.','line_number':240,'multiline':False]['text':'!Never throws','line_number':241,'multiline':False]['text':'!Allocates storage from the standard-conforming allocator','line_number':246,'multiline':False]['text':'!Deallocates previously allocated memory.','line_number':250,'multiline':False]['text':'!Never throws','line_number':251,'multiline':False]['text':'!Returns the maximum number of elements that could be allocated.','line_number':258,'multiline':False]['text':'!Never throws','line_number':259,'multiline':False]['text':'!Swaps two allocators, does nothing','line_number':269,'multiline':False]['text':'!because this small_vector_allocator is stateless','line_number':270,'multiline':False]['text':'!An small_vector_allocator always compares to true, as memory allocated with one','line_number':274,'multiline':False]['text':'!instance can be deallocated by another instance (except for unpropagable storage)','line_number':275,'multiline':False]['text':'!An small_vector_allocator always compares to false, as memory allocated with one','line_number':279,'multiline':False]['text':'!instance can be deallocated by another instance','line_number':280,'multiline':False]['text':'
   //!An advanced function that offers in-place expansion shrink to fit and new allocation
   //!capabilities. Memory allocated with this function can only be deallocated with deallocate()
   //!or deallocate_many().
   //!This function is available only with Version == 2
   pointer allocation_command(allocation_type command,
                         size_type limit_size,
                         size_type &prefer_in_recvd_out_size,
                         pointer &reuse)
   {  return allocator_traits_type::allocation_command(command, limit_size, prefer_in_recvd_out_size, reuse);  }

   //!Returns maximum the number of objects the previously allocated memory
   //!pointed by p can hold.
   //!Memory must not have been allocated with
   //!allocate_one or allocate_individual.
   //!This function is available only with Version == 2
   size_type size(pointer p) const BOOST_NOEXCEPT_OR_NOTHROW
   {  return allocator_traits_type::size(p);  }
   ','line_number':285,'multiline':True]['text':'
   //!Allocates just one object. Memory allocated with this function
   //!must be deallocated only with deallocate_one().
   //!Throws bad_alloc if there is no enough memory
   //!This function is available only with Version == 2
   using allocator_type::allocate_one;
   using allocator_type::allocate_individual;
   using allocator_type::deallocate_one;
   using allocator_type::deallocate_individual;
   using allocator_type::allocate_many;
   using allocator_type::deallocate_many;','line_number':305,'multiline':True]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':341,'multiline':False]['text':'! This class consists of common code from all small_vector<T, N> types that don't depend on the','line_number':344,'multiline':False]['text':'! "N" template parameter. This class is non-copyable and non-destructible, so this class typically','line_number':345,'multiline':False]['text':'! used as reference argument to functions that read or write small vectors. Since `small_vector<T, N>`','line_number':346,'multiline':False]['text':'! derives from `small_vector_base<T>`, the conversion to `small_vector_base` is implicit','line_number':347,'multiline':False]['text':'! <pre>','line_number':348,'multiline':False]['text':'!','line_number':349,'multiline':False]['text':'! //Clients can pass any small_vector<Foo, N>.','line_number':350,'multiline':False]['text':'! void read_any_small_vector_of_foo(const small_vector_base<Foo> &in_parameter);','line_number':351,'multiline':False]['text':'!','line_number':352,'multiline':False]['text':'! void modify_any_small_vector_of_foo(small_vector_base<Foo> &in_out_parameter);','line_number':353,'multiline':False]['text':'!','line_number':354,'multiline':False]['text':'! void some_function()','line_number':355,'multiline':False]['text':'! {','line_number':356,'multiline':False]['text':'! ','line_number':357,'multiline':False]['text':'!    small_vector<Foo, 8> myvector;','line_number':358,'multiline':False]['text':'!','line_number':359,'multiline':False]['text':'!    read_any_small_vector_of_foo(myvector);   // Reads myvector','line_number':360,'multiline':False]['text':'!','line_number':361,'multiline':False]['text':'!    modify_any_small_vector_of_foo(myvector); // Modifies myvector','line_number':362,'multiline':False]['text':'! ','line_number':363,'multiline':False]['text':'! }','line_number':364,'multiline':False]['text':'! </pre>','line_number':365,'multiline':False]['text':'!','line_number':366,'multiline':False]['text':'! All `boost::container:vector` member functions are inherited. See `vector` documentation for details.','line_number':367,'multiline':False]['text':'!','line_number':368,'multiline':False]['text':'Make it public as it will be inherited by small_vector and container','line_number':375,'multiline':False]['text':'must have this public member','line_number':376,'multiline':False]['text':'~small_vector_base(){}','line_number':435,'multiline':False]['text':'The only member','line_number':438,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':441,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':467,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':472,'multiline':False]['text':'','line_number':473,'multiline':False]['text':'          small_vector_storage_calculator','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':476,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':508,'multiline':False]['text':'','line_number':509,'multiline':False]['text':'          small_vector_storage_definer','line_number':510,'multiline':False]['text':'','line_number':511,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':512,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':533,'multiline':False]['text':'! small_vector is a vector-like container optimized for the case when it contains few elements.','line_number':535,'multiline':False]['text':'! It contains some preallocated elements in-place, which can avoid the use of dynamic storage allocation','line_number':536,'multiline':False]['text':'! when the actual number of elements is below that preallocated threshold.','line_number':537,'multiline':False]['text':'!','line_number':538,'multiline':False]['text':'! `small_vector<T, N, Allocator, Options>` is convertible to `small_vector_base<T, Allocator, Options>` that is independent','line_number':539,'multiline':False]['text':'! from the preallocated element capacity, so client code does not need to be templated on that N argument.','line_number':540,'multiline':False]['text':'!','line_number':541,'multiline':False]['text':'! All `boost::container::vector` member functions are inherited. See `vector` documentation for details.','line_number':542,'multiline':False]['text':'!','line_number':543,'multiline':False]['text':'! \tparam T The type of object that is stored in the small_vector','line_number':544,'multiline':False]['text':'! \tparam N The number of preallocated elements stored inside small_vector. It shall be less than Allocator::max_size();','line_number':545,'multiline':False]['text':'! \tparam Allocator The allocator used for memory management when the number of elements exceeds N. Use void','line_number':546,'multiline':False]['text':'!   for the default allocator','line_number':547,'multiline':False]['text':'! |tparam Options A type produced from \c boost::container::small_vector_options.','line_number':548,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':581,'multiline':False]['text':'! @brief The capacity/max size of the container','line_number':583,'multiline':False]['text':'
namespace boost {

//!has_trivial_destructor_after_move<> == true_type
//!specialization for optimizations
template <class T, class Allocator>
struct has_trivial_destructor_after_move<boost::container::vector<T, Allocator> >
{
   typedef typename ::boost::container::allocator_traits<Allocator>::pointer pointer;
   static const bool value = ::boost::has_trivial_destructor_after_move<Allocator>::value &&
                             ::boost::has_trivial_destructor_after_move<pointer>::value;
};

}
','line_number':695,'multiline':True]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':710,'multiline':False]['text':'   #ifndef  BOOST_CONTAINER_CONTAINER_SMALL_VECTOR_HPP','line_number':714,'multiline':False]