['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'','line_number':34,'multiline':False]['text':'','line_number':36,'multiline':False]['text':'!\file','line_number':40,'multiline':False]['text':'!Describes a named shared memory allocation user class.','line_number':41,'multiline':False]['text':'!','line_number':42,'multiline':False]['text':'!This class is designed to be a base class to classes that manage','line_number':61,'multiline':False]['text':'!creation of objects in a fixed size memory buffer. Apart','line_number':62,'multiline':False]['text':'!from allocating raw memory, the user can construct named objects. To','line_number':63,'multiline':False]['text':'!achieve this, this class uses the reserved space provided by the allocation','line_number':64,'multiline':False]['text':'!algorithm to place a named_allocator_algo, who takes care of name mappings.','line_number':65,'multiline':False]['text':'!The class can be customized with the char type used for object names','line_number':66,'multiline':False]['text':'!and the memory allocation algorithm to be used.*/','line_number':67,'multiline':False]['text':'Non-copyable','line_number':75,'multiline':False]['text':'Experimental. Don't use.','line_number':101,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':105,'multiline':False]['text':'Increase file size','line_number':117,'multiline':False]['text':'Grow always works','line_number':127,'multiline':False]['text':'Decrease file size','line_number':151,'multiline':False]['text':'!Constructor. Allocates basic resources. Never throws.','line_number':159,'multiline':False]['text':'!Destructor. Calls close. Never throws.','line_number':163,'multiline':False]['text':'!Places segment manager in the reserved space. This can throw.','line_number':167,'multiline':False]['text':'Check if there is enough space','line_number':172,'multiline':False]['text':'This function should not throw. The index construction can','line_number':176,'multiline':False]['text':'throw if constructor allocates memory. So we must catch it.','line_number':177,'multiline':False]['text':'Let's construct the allocator in memory','line_number':179,'multiline':False]['text':'!Connects to a segment manager in the reserved buffer. Never throws.','line_number':189,'multiline':False]['text':'!Frees resources. Never throws.','line_number':197,'multiline':False]['text':'!Frees resources and destroys common resources. Never throws.','line_number':205,'multiline':False]['text':'!','line_number':215,'multiline':False]['text':'!Returns segment manager. Never throws.','line_number':224,'multiline':False]['text':'!Returns the base address of the memory in this process. Never throws.','line_number':228,'multiline':False]['text':'!Returns the size of memory segment. Never throws.','line_number':232,'multiline':False]['text':'!Returns the number of free bytes of the memory','line_number':236,'multiline':False]['text':'!segment','line_number':237,'multiline':False]['text':'!Returns the result of "all_memory_deallocated()" function','line_number':241,'multiline':False]['text':'!of the used memory algorithm','line_number':242,'multiline':False]['text':'!Returns the result of "check_sanity()" function','line_number':246,'multiline':False]['text':'!of the used memory algorithm','line_number':247,'multiline':False]['text':'!Writes to zero free memory (memory not yet allocated) of','line_number':251,'multiline':False]['text':'!the memory algorithm','line_number':252,'multiline':False]['text':'!Transforms an absolute address into an offset from base address.','line_number':256,'multiline':False]['text':'!The address must belong to the memory segment. Never throws.','line_number':257,'multiline':False]['text':'!Returns true if the address belongs to the managed memory segment','line_number':264,'multiline':False]['text':'!Transforms previously obtained offset into an absolute address in the','line_number':271,'multiline':False]['text':'!process space of the current process. Never throws.*/','line_number':272,'multiline':False]['text':'!Searches for nbytes of free memory in the segment, marks the','line_number':276,'multiline':False]['text':'!memory as used and return the pointer to the memory. If no','line_number':277,'multiline':False]['text':'!memory is available throws a boost::interprocess::bad_alloc exception','line_number':278,'multiline':False]['text':'!Searches for nbytes of free memory in the segment, marks the','line_number':282,'multiline':False]['text':'!memory as used and return the pointer to the memory. If no memory','line_number':283,'multiline':False]['text':'!is available returns 0. Never throws.','line_number':284,'multiline':False]['text':'!Allocates nbytes bytes aligned to "alignment" bytes. "alignment"','line_number':288,'multiline':False]['text':'!must be power of two. If no memory','line_number':289,'multiline':False]['text':'!is available returns 0. Never throws.','line_number':290,'multiline':False]['text':'!Allocates nbytes bytes aligned to "alignment" bytes. "alignment"','line_number':299,'multiline':False]['text':'!must be power of two. If no','line_number':300,'multiline':False]['text':'!memory is available throws a boost::interprocess::bad_alloc exception','line_number':301,'multiline':False]['text':'Experimental. Don't use.','line_number':307,'multiline':False]['text':'!Allocates n_elements of elem_bytes bytes.','line_number':309,'multiline':False]['text':'!Throws bad_alloc on failure. chain.size() is not increased on failure.','line_number':310,'multiline':False]['text':'!Allocates n_elements, each one of element_lengths[i]*sizeof_element bytes.','line_number':314,'multiline':False]['text':'!Throws bad_alloc on failure. chain.size() is not increased on failure.','line_number':315,'multiline':False]['text':'!Allocates n_elements of elem_bytes bytes.','line_number':319,'multiline':False]['text':'!Non-throwing version. chain.size() is not increased on failure.','line_number':320,'multiline':False]['text':'!Allocates n_elements, each one of','line_number':324,'multiline':False]['text':'!element_lengths[i]*sizeof_element bytes.','line_number':325,'multiline':False]['text':'!Non-throwing version. chain.size() is not increased on failure.','line_number':326,'multiline':False]['text':'!Deallocates all elements contained in chain.','line_number':330,'multiline':False]['text':'!Never throws.','line_number':331,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':335,'multiline':False]['text':'!Marks previously allocated memory as free. Never throws.','line_number':337,'multiline':False]['text':'!Tries to find a previous named allocation address. Returns a memory','line_number':341,'multiline':False]['text':'!buffer and the object count. If not found returned pointer is 0.','line_number':342,'multiline':False]['text':'!Never throws.','line_number':343,'multiline':False]['text':'!Creates a named object or array in memory','line_number':348,'multiline':False]['text':'!','line_number':349,'multiline':False]['text':'!Allocates and constructs a T object or an array of T in memory,','line_number':350,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':351,'multiline':False]['text':'!created object. If an array is being constructed all objects are','line_number':352,'multiline':False]['text':'!created using the same parameters given to this function.','line_number':353,'multiline':False]['text':'!','line_number':354,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':355,'multiline':False]['text':'!','line_number':356,'multiline':False]['text':'!-> Throws boost::interprocess::bad_alloc if there is no available memory','line_number':357,'multiline':False]['text':'!','line_number':358,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':359,'multiline':False]['text':'!','line_number':360,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and if an','line_number':361,'multiline':False]['text':'!array was being constructed, destructors of created objects are called','line_number':362,'multiline':False]['text':'!before freeing the memory.','line_number':363,'multiline':False]['text':'!Finds or creates a named object or array in memory','line_number':369,'multiline':False]['text':'!','line_number':370,'multiline':False]['text':'!Tries to find an object with the given name in memory. If','line_number':371,'multiline':False]['text':'!found, returns the pointer to this pointer. If the object is not found,','line_number':372,'multiline':False]['text':'!allocates and constructs a T object or an array of T in memory,','line_number':373,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':374,'multiline':False]['text':'!created object. If an array is being constructed all objects are','line_number':375,'multiline':False]['text':'!created using the same parameters given to this function.','line_number':376,'multiline':False]['text':'!','line_number':377,'multiline':False]['text':'!-> Throws boost::interprocess::bad_alloc if there is no available memory','line_number':378,'multiline':False]['text':'!','line_number':379,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':380,'multiline':False]['text':'!','line_number':381,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and if an','line_number':382,'multiline':False]['text':'!array was being constructed, destructors of created objects are called','line_number':383,'multiline':False]['text':'!before freeing the memory.','line_number':384,'multiline':False]['text':'!Creates a named object or array in memory','line_number':390,'multiline':False]['text':'!','line_number':391,'multiline':False]['text':'!Allocates and constructs a T object or an array of T in memory,','line_number':392,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':393,'multiline':False]['text':'!created object. If an array is being constructed all objects are','line_number':394,'multiline':False]['text':'!created using the same parameters given to this function.','line_number':395,'multiline':False]['text':'!','line_number':396,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':397,'multiline':False]['text':'!','line_number':398,'multiline':False]['text':'!-> Returns 0 if there is no available memory','line_number':399,'multiline':False]['text':'!','line_number':400,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':401,'multiline':False]['text':'!','line_number':402,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and if an','line_number':403,'multiline':False]['text':'!array was being constructed, destructors of created objects are called','line_number':404,'multiline':False]['text':'!before freeing the memory.','line_number':405,'multiline':False]['text':'!Finds or creates a named object or array in memory','line_number':411,'multiline':False]['text':'!','line_number':412,'multiline':False]['text':'!Tries to find an object with the given name in memory. If','line_number':413,'multiline':False]['text':'!found, returns the pointer to this pointer. If the object is not found,','line_number':414,'multiline':False]['text':'!allocates and constructs a T object or an array of T in memory,','line_number':415,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':416,'multiline':False]['text':'!created object. If an array is being constructed all objects are','line_number':417,'multiline':False]['text':'!created using the same parameters given to this function.','line_number':418,'multiline':False]['text':'!','line_number':419,'multiline':False]['text':'!-> Returns 0 if there is no available memory','line_number':420,'multiline':False]['text':'!','line_number':421,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':422,'multiline':False]['text':'!','line_number':423,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and if an','line_number':424,'multiline':False]['text':'!array was being constructed, destructors of created objects are called','line_number':425,'multiline':False]['text':'!before freeing the memory.','line_number':426,'multiline':False]['text':'!Creates a named array from iterators in memory','line_number':432,'multiline':False]['text':'!','line_number':433,'multiline':False]['text':'!Allocates and constructs an array of T in memory,','line_number':434,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':435,'multiline':False]['text':'!created object. Each element in the array is created using the','line_number':436,'multiline':False]['text':'!objects returned when dereferencing iterators as parameters','line_number':437,'multiline':False]['text':'!and incrementing all iterators for each element.','line_number':438,'multiline':False]['text':'!','line_number':439,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':440,'multiline':False]['text':'!','line_number':441,'multiline':False]['text':'!-> Throws boost::interprocess::bad_alloc if there is no available memory','line_number':442,'multiline':False]['text':'!','line_number':443,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':444,'multiline':False]['text':'!','line_number':445,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and','line_number':446,'multiline':False]['text':'!destructors of created objects are called before freeing the memory.','line_number':447,'multiline':False]['text':'!Finds or creates a named array from iterators in memory','line_number':453,'multiline':False]['text':'!','line_number':454,'multiline':False]['text':'!Tries to find an object with the given name in memory. If','line_number':455,'multiline':False]['text':'!found, returns the pointer to this pointer. If the object is not found,','line_number':456,'multiline':False]['text':'!allocates and constructs an array of T in memory,','line_number':457,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':458,'multiline':False]['text':'!created object. Each element in the array is created using the','line_number':459,'multiline':False]['text':'!objects returned when dereferencing iterators as parameters','line_number':460,'multiline':False]['text':'!and incrementing all iterators for each element.','line_number':461,'multiline':False]['text':'!','line_number':462,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':463,'multiline':False]['text':'!','line_number':464,'multiline':False]['text':'!-> Throws boost::interprocess::bad_alloc if there is no available memory','line_number':465,'multiline':False]['text':'!','line_number':466,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':467,'multiline':False]['text':'!','line_number':468,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and','line_number':469,'multiline':False]['text':'!destructors of created objects are called before freeing the memory.','line_number':470,'multiline':False]['text':'!Creates a named array from iterators in memory','line_number':476,'multiline':False]['text':'!','line_number':477,'multiline':False]['text':'!Allocates and constructs an array of T in memory,','line_number':478,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':479,'multiline':False]['text':'!created object. Each element in the array is created using the','line_number':480,'multiline':False]['text':'!objects returned when dereferencing iterators as parameters','line_number':481,'multiline':False]['text':'!and incrementing all iterators for each element.','line_number':482,'multiline':False]['text':'!','line_number':483,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':484,'multiline':False]['text':'!','line_number':485,'multiline':False]['text':'!-> If there is no available memory, returns 0.','line_number':486,'multiline':False]['text':'!','line_number':487,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and','line_number':490,'multiline':False]['text':'!destructors of created objects are called before freeing the memory.*/','line_number':491,'multiline':False]['text':'!Finds or creates a named array from iterators in memory','line_number':497,'multiline':False]['text':'!','line_number':498,'multiline':False]['text':'!Tries to find an object with the given name in memory. If','line_number':499,'multiline':False]['text':'!found, returns the pointer to this pointer. If the object is not found,','line_number':500,'multiline':False]['text':'!allocates and constructs an array of T in memory,','line_number':501,'multiline':False]['text':'!associates this with the given name and returns a pointer to the','line_number':502,'multiline':False]['text':'!created object. Each element in the array is created using the','line_number':503,'multiline':False]['text':'!objects returned when dereferencing iterators as parameters','line_number':504,'multiline':False]['text':'!and incrementing all iterators for each element.','line_number':505,'multiline':False]['text':'!','line_number':506,'multiline':False]['text':'!-> If the name was previously used, returns 0.','line_number':507,'multiline':False]['text':'!','line_number':508,'multiline':False]['text':'!-> If there is no available memory, returns 0.','line_number':509,'multiline':False]['text':'!','line_number':510,'multiline':False]['text':'!-> If T's constructor throws, the function throws that exception.','line_number':511,'multiline':False]['text':'!','line_number':512,'multiline':False]['text':'!Memory is freed automatically if T's constructor throws and','line_number':513,'multiline':False]['text':'!destructors of created objects are called before freeing the memory.*/','line_number':514,'multiline':False]['text':'!Calls a functor and guarantees that no new construction, search or','line_number':520,'multiline':False]['text':'!destruction will be executed by any process while executing the object','line_number':521,'multiline':False]['text':'!function call. If the functor throws, this function throws.','line_number':522,'multiline':False]['text':'!Tries to call a functor guaranteeing that no new construction, search or','line_number':527,'multiline':False]['text':'!destruction will be executed by any process while executing the object','line_number':528,'multiline':False]['text':'!function call. If the atomic function can't be immediatelly executed','line_number':529,'multiline':False]['text':'!because the internal mutex is already locked, returns false.','line_number':530,'multiline':False]['text':'!If the functor throws, this function throws.','line_number':531,'multiline':False]['text':'!Destroys a named memory object or array.','line_number':536,'multiline':False]['text':'!','line_number':537,'multiline':False]['text':'!Finds the object with the given name, calls its destructors,','line_number':538,'multiline':False]['text':'!frees used memory and returns true.','line_number':539,'multiline':False]['text':'!','line_number':540,'multiline':False]['text':'!-> If the object is not found, it returns false.','line_number':541,'multiline':False]['text':'!','line_number':542,'multiline':False]['text':'!Exception Handling:','line_number':543,'multiline':False]['text':'!','line_number':544,'multiline':False]['text':'!When deleting a dynamically object or array, the Standard','line_number':545,'multiline':False]['text':'!does not guarantee that dynamically allocated memory, will be released.','line_number':546,'multiline':False]['text':'!Also, when deleting arrays, the Standard doesn't require calling','line_number':547,'multiline':False]['text':'!destructors for the rest of the objects if for one of them the destructor','line_number':548,'multiline':False]['text':'!terminated with an exception.','line_number':549,'multiline':False]['text':'!','line_number':550,'multiline':False]['text':'!Destroying an object:','line_number':551,'multiline':False]['text':'!','line_number':552,'multiline':False]['text':'!If the destructor throws, the memory will be freed and that exception','line_number':553,'multiline':False]['text':'!will be thrown.','line_number':554,'multiline':False]['text':'!','line_number':555,'multiline':False]['text':'!Destroying an array:','line_number':556,'multiline':False]['text':'!','line_number':557,'multiline':False]['text':'!When destroying an array, if a destructor throws, the rest of','line_number':558,'multiline':False]['text':'!destructors are called. If any of these throws, the exceptions are','line_number':559,'multiline':False]['text':'!ignored. The name association will be erased, memory will be freed and','line_number':560,'multiline':False]['text':'!the first exception will be thrown. This guarantees the unlocking of','line_number':561,'multiline':False]['text':'!mutexes and other resources.','line_number':562,'multiline':False]['text':'!','line_number':563,'multiline':False]['text':'!For all theses reasons, classes with throwing destructors are not','line_number':564,'multiline':False]['text':'!recommended.','line_number':565,'multiline':False]['text':'!Destroys the unique instance of type T','line_number':570,'multiline':False]['text':'!','line_number':571,'multiline':False]['text':'!Calls the destructor, frees used memory and returns true.','line_number':572,'multiline':False]['text':'!','line_number':573,'multiline':False]['text':'!Exception Handling:','line_number':574,'multiline':False]['text':'!','line_number':575,'multiline':False]['text':'!When deleting a dynamically object, the Standard does not','line_number':576,'multiline':False]['text':'!guarantee that dynamically allocated memory will be released.','line_number':577,'multiline':False]['text':'!','line_number':578,'multiline':False]['text':'!Destroying an object:','line_number':579,'multiline':False]['text':'!','line_number':580,'multiline':False]['text':'!If the destructor throws, the memory will be freed and that exception','line_number':581,'multiline':False]['text':'!will be thrown.','line_number':582,'multiline':False]['text':'!','line_number':583,'multiline':False]['text':'!For all theses reasons, classes with throwing destructors are not','line_number':584,'multiline':False]['text':'!recommended for  memory.','line_number':585,'multiline':False]['text':'!Destroys the object (named, unique, or anonymous)','line_number':590,'multiline':False]['text':'!','line_number':591,'multiline':False]['text':'!Calls the destructor, frees used memory and returns true.','line_number':592,'multiline':False]['text':'!','line_number':593,'multiline':False]['text':'!Exception Handling:','line_number':594,'multiline':False]['text':'!','line_number':595,'multiline':False]['text':'!When deleting a dynamically object, the Standard does not','line_number':596,'multiline':False]['text':'!guarantee that dynamically allocated memory will be released.','line_number':597,'multiline':False]['text':'!','line_number':598,'multiline':False]['text':'!Destroying an object:','line_number':599,'multiline':False]['text':'!','line_number':600,'multiline':False]['text':'!If the destructor throws, the memory will be freed and that exception','line_number':601,'multiline':False]['text':'!will be thrown.','line_number':602,'multiline':False]['text':'!','line_number':603,'multiline':False]['text':'!For all theses reasons, classes with throwing destructors are not','line_number':604,'multiline':False]['text':'!recommended for  memory.','line_number':605,'multiline':False]['text':'!Returns the name of an object created with construct/find_or_construct','line_number':610,'multiline':False]['text':'!functions. If ptr points to an unique instance typeid(T).name() is returned.','line_number':611,'multiline':False]['text':'!Returns is the type an object created with construct/find_or_construct','line_number':616,'multiline':False]['text':'!functions. Does not throw.','line_number':617,'multiline':False]['text':'!Returns the length of an object created with construct/find_or_construct','line_number':622,'multiline':False]['text':'!functions (1 if is a single element, >=1 if it's an array). Does not throw.','line_number':623,'multiline':False]['text':'!Preallocates needed index resources to optimize the','line_number':628,'multiline':False]['text':'!creation of "num" named objects in the  memory segment.','line_number':629,'multiline':False]['text':'!Can throw boost::interprocess::bad_alloc if there is no enough memory.','line_number':630,'multiline':False]['text':'!Preallocates needed index resources to optimize the','line_number':634,'multiline':False]['text':'!creation of "num" unique objects in the  memory segment.','line_number':635,'multiline':False]['text':'!Can throw boost::interprocess::bad_alloc if there is no enough memory.','line_number':636,'multiline':False]['text':'!Calls shrink_to_fit in both named and unique object indexes','line_number':640,'multiline':False]['text':'to try to free unused memory from those indexes.','line_number':641,'multiline':False]['text':'!Returns the number of named objects stored','line_number':645,'multiline':False]['text':'!in the managed segment.','line_number':646,'multiline':False]['text':'!Returns the number of unique objects stored','line_number':650,'multiline':False]['text':'!in the managed segment.','line_number':651,'multiline':False]['text':'!Returns a constant iterator to the index storing the','line_number':655,'multiline':False]['text':'!named allocations. NOT thread-safe. Never throws.','line_number':656,'multiline':False]['text':'!Returns a constant iterator to the end of the index','line_number':660,'multiline':False]['text':'!storing the named allocations. NOT thread-safe. Never throws.','line_number':661,'multiline':False]['text':'!Returns a constant iterator to the index storing the','line_number':665,'multiline':False]['text':'!unique allocations. NOT thread-safe. Never throws.','line_number':666,'multiline':False]['text':'!Returns a constant iterator to the end of the index','line_number':670,'multiline':False]['text':'!storing the unique allocations. NOT thread-safe. Never throws.','line_number':671,'multiline':False]['text':'!This is the default allocator to allocate types T','line_number':675,'multiline':False]['text':'!from this managed segment','line_number':676,'multiline':False]['text':'!Returns an instance of the default allocator for type T','line_number':683,'multiline':False]['text':'!initialized that allocates memory from this segment manager.','line_number':684,'multiline':False]['text':'!This is the default deleter to delete types T','line_number':690,'multiline':False]['text':'!from this managed segment.','line_number':691,'multiline':False]['text':'!Returns an instance of the default allocator for type T','line_number':698,'multiline':False]['text':'!initialized that allocates memory from this segment manager.','line_number':699,'multiline':False]['text':'!Tries to find a previous named allocation address. Returns a memory','line_number':706,'multiline':False]['text':'!buffer and the object count. If not found returned pointer is 0.','line_number':707,'multiline':False]['text':'!Never throws.','line_number':708,'multiline':False]['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':712,'multiline':False]['text':'!Swaps the segment manager's managed by this managed memory segment.','line_number':715,'multiline':False]['text':'!NOT thread-safe. Never throws.','line_number':716,'multiline':False]['text':'Check for overflow','line_number':738,'multiline':False]['text':'The minimum size is not representable by std::size_t','line_number':754,'multiline':False]['text':'namespace ipcdetail {','line_number':768,'multiline':False]['text':'namespace interprocess {','line_number':769,'multiline':False]['text':'namespace boost {','line_number':770,'multiline':False]['text':'BOOST_INTERPROCESS_DETAIL_MANAGED_MEMORY_IMPL_HPP','line_number':774,'multiline':False]