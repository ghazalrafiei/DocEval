['text':'  (C) Copyright Greg Colvin and Beman Dawes 1998, 1999.','line_number':4,'multiline':False]['text':'  Copyright (c) 2001, 2002 Peter Dimov','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':7,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':8,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':11,'multiline':False]['text':' for std::auto_ptr','line_number':22,'multiline':False]['text':' Debug hooks','line_number':33,'multiline':False]['text':'  scoped_ptr mimics a built-in pointer except that it guarantees deletion','line_number':42,'multiline':False]['text':'  of the object pointed to, either on destruction of the scoped_ptr or via','line_number':43,'multiline':False]['text':'  an explicit reset(). scoped_ptr is a simple solution for simple needs;','line_number':44,'multiline':False]['text':'  use shared_ptr or std::auto_ptr if your needs are more complex.','line_number':45,'multiline':False]['text':' noncopyable','line_number':47,'multiline':False]['text':' catch self-reset errors','line_number':93,'multiline':False]['text':' implicit conversion to "bool"','line_number':114,'multiline':False]['text':' get_pointer(p) is a generic way to say p.get()','line_number':154,'multiline':False]['text':' namespace boost','line_number':161,'multiline':False]['text':' #ifndef BOOST_SMART_PTR_SCOPED_PTR_HPP_INCLUDED','line_number':167,'multiline':False]