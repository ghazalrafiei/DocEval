['text':' Boost.Container static_vector','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Copyright (c) 2012-2013 Adam Wulkiewicz, Lodz, Poland.','line_number':3,'multiline':False]['text':' Copyright (c) 2011-2013 Andrew Hundt.','line_number':4,'multiline':False]['text':' Copyright (c) 2013-2014 Ion Gaztanaga','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Use, modification and distribution is subject to the Boost Software License,','line_number':7,'multiline':False]['text':' Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':8,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'namespace dtl {','line_number':120,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':122,'multiline':False]['text':'!','line_number':124,'multiline':False]['text':'!@brief A variable-size array container with fixed capacity.','line_number':125,'multiline':False]['text':'!','line_number':126,'multiline':False]['text':'!static_vector is a sequence container like boost::container::vector with contiguous storage that can','line_number':127,'multiline':False]['text':'!change in size, along with the static allocation, low overhead, and fixed capacity of boost::array.','line_number':128,'multiline':False]['text':'!','line_number':129,'multiline':False]['text':'!A static_vector is a sequence that supports random access to elements, constant time insertion and','line_number':130,'multiline':False]['text':'!removal of elements at the end, and linear time insertion and removal of elements at the beginning or','line_number':131,'multiline':False]['text':'!in the middle. The number of elements in a static_vector may vary dynamically up to a fixed capacity','line_number':132,'multiline':False]['text':'!because elements are stored within the object itself similarly to an array. However, objects are','line_number':133,'multiline':False]['text':'!initialized as they are inserted into static_vector unlike C arrays or std::array which must construct','line_number':134,'multiline':False]['text':'!all elements on instantiation. The behavior of static_vector enables the use of statically allocated','line_number':135,'multiline':False]['text':'!elements in cases with complex object lifetime requirements that would otherwise not be trivially','line_number':136,'multiline':False]['text':'!possible.','line_number':137,'multiline':False]['text':'!','line_number':138,'multiline':False]['text':'!@par Error Handling','line_number':139,'multiline':False]['text':'! Insertion beyond the capacity result in throwing bad_alloc() if exceptions are enabled or','line_number':140,'multiline':False]['text':'! calling throw_bad_alloc() if not enabled.','line_number':141,'multiline':False]['text':'!','line_number':142,'multiline':False]['text':'! out_of_range is thrown if out of bounds access is performed in <code>at()</code> if exceptions are','line_number':143,'multiline':False]['text':'! enabled, throw_out_of_range() if not enabled.','line_number':144,'multiline':False]['text':'!','line_number':145,'multiline':False]['text':'!@tparam T    The type of element that will be stored.','line_number':146,'multiline':False]['text':'!@tparam Capacity The maximum number of elements static_vector can store, fixed at compile time.','line_number':147,'multiline':False]['text':'!@tparam Options A type produced from \c boost::container::static_vector_options. If no option','line_number':148,'multiline':False]['text':'! is specified, by default throw_on_overflow<true> option is set.','line_number':149,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':165,'multiline':False]['text':'! @brief The type of elements stored in the container.','line_number':168,'multiline':False]['text':'! @brief The unsigned integral type used by the container.','line_number':170,'multiline':False]['text':'! @brief The pointers difference type.','line_number':172,'multiline':False]['text':'! @brief The pointer type.','line_number':174,'multiline':False]['text':'! @brief The const pointer type.','line_number':176,'multiline':False]['text':'! @brief The value reference type.','line_number':178,'multiline':False]['text':'! @brief The value const reference type.','line_number':180,'multiline':False]['text':'! @brief The iterator type.','line_number':182,'multiline':False]['text':'! @brief The const iterator type.','line_number':184,'multiline':False]['text':'! @brief The reverse iterator type.','line_number':186,'multiline':False]['text':'! @brief The const reverse iterator.','line_number':188,'multiline':False]['text':'! @brief The capacity/max size of the container','line_number':191,'multiline':False]['text':'! @brief Constructs an empty static_vector.','line_number':194,'multiline':False]['text':'!','line_number':195,'multiline':False]['text':'! @par Throws','line_number':196,'multiline':False]['text':'!   Nothing.','line_number':197,'multiline':False]['text':'!','line_number':198,'multiline':False]['text':'! @par Complexity','line_number':199,'multiline':False]['text':'!   Constant O(1).','line_number':200,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':205,'multiline':False]['text':'!','line_number':206,'multiline':False]['text':'! @brief Constructs a static_vector containing count value initialized values.','line_number':207,'multiline':False]['text':'!','line_number':208,'multiline':False]['text':'! @param count    The number of values which will be contained in the container.','line_number':209,'multiline':False]['text':'!','line_number':210,'multiline':False]['text':'! @par Throws','line_number':211,'multiline':False]['text':'!   @li If T's value initialization throws','line_number':212,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':213,'multiline':False]['text':'!','line_number':214,'multiline':False]['text':'! @par Complexity','line_number':215,'multiline':False]['text':'!   Linear O(N).','line_number':216,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':221,'multiline':False]['text':'!','line_number':222,'multiline':False]['text':'! @brief Constructs a static_vector containing count default initialized values.','line_number':223,'multiline':False]['text':'!','line_number':224,'multiline':False]['text':'! @param count    The number of values which will be contained in the container.','line_number':225,'multiline':False]['text':'!','line_number':226,'multiline':False]['text':'! @par Throws','line_number':227,'multiline':False]['text':'!   @li If T's default initialization throws.','line_number':228,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':229,'multiline':False]['text':'!','line_number':230,'multiline':False]['text':'! @par Complexity','line_number':231,'multiline':False]['text':'!   Linear O(N).','line_number':232,'multiline':False]['text':'!','line_number':233,'multiline':False]['text':'! @par Note','line_number':234,'multiline':False]['text':'!   Non-standard extension','line_number':235,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':240,'multiline':False]['text':'!','line_number':241,'multiline':False]['text':'! @brief Constructs a static_vector containing count copies of value.','line_number':242,'multiline':False]['text':'!','line_number':243,'multiline':False]['text':'! @param count    The number of copies of a values that will be contained in the container.','line_number':244,'multiline':False]['text':'! @param value    The value which will be used to copy construct values.','line_number':245,'multiline':False]['text':'!','line_number':246,'multiline':False]['text':'! @par Throws','line_number':247,'multiline':False]['text':'!   @li If T's copy constructor throws.','line_number':248,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':249,'multiline':False]['text':'!','line_number':250,'multiline':False]['text':'! @par Complexity','line_number':251,'multiline':False]['text':'!   Linear O(N).','line_number':252,'multiline':False]['text':'! @pre','line_number':257,'multiline':False]['text':'!  @li <tt>distance(first, last) <= capacity()</tt>','line_number':258,'multiline':False]['text':'!  @li Iterator must meet the \c ForwardTraversalIterator concept.','line_number':259,'multiline':False]['text':'!','line_number':260,'multiline':False]['text':'! @brief Constructs a static_vector containing copy of a range <tt>[first, last)</tt>.','line_number':261,'multiline':False]['text':'!','line_number':262,'multiline':False]['text':'! @param first    The iterator to the first element in range.','line_number':263,'multiline':False]['text':'! @param last     The iterator to the one after the last element in range.','line_number':264,'multiline':False]['text':'!','line_number':265,'multiline':False]['text':'! @par Throws','line_number':266,'multiline':False]['text':'!   @li If T's constructor taking a dereferenced Iterator throws.','line_number':267,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':268,'multiline':False]['text':'!','line_number':269,'multiline':False]['text':'! @par Complexity','line_number':270,'multiline':False]['text':'!   Linear O(N).','line_number':271,'multiline':False]['text':'! @pre','line_number':278,'multiline':False]['text':'!  @li <tt>distance(il.begin(), il.end()) <= capacity()</tt>','line_number':279,'multiline':False]['text':'!','line_number':280,'multiline':False]['text':'! @brief Constructs a static_vector containing copy of a range <tt>[il.begin(), il.end())</tt>.','line_number':281,'multiline':False]['text':'!','line_number':282,'multiline':False]['text':'! @param il       std::initializer_list with values to initialize vector.','line_number':283,'multiline':False]['text':'!','line_number':284,'multiline':False]['text':'! @par Throws','line_number':285,'multiline':False]['text':'!   @li If T's constructor taking a dereferenced std::initializer_list throws.','line_number':286,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':287,'multiline':False]['text':'!','line_number':288,'multiline':False]['text':'! @par Complexity','line_number':289,'multiline':False]['text':'!   Linear O(N).','line_number':290,'multiline':False]['text':'! @brief Constructs a copy of other static_vector.','line_number':296,'multiline':False]['text':'!','line_number':297,'multiline':False]['text':'! @param other    The static_vector which content will be copied to this one.','line_number':298,'multiline':False]['text':'!','line_number':299,'multiline':False]['text':'! @par Throws','line_number':300,'multiline':False]['text':'!   If T's copy constructor throws.','line_number':301,'multiline':False]['text':'!','line_number':302,'multiline':False]['text':'! @par Complexity','line_number':303,'multiline':False]['text':'!   Linear O(N).','line_number':304,'multiline':False]['text':'! @pre <tt>other.size() <= capacity()</tt>.','line_number':322,'multiline':False]['text':'!','line_number':323,'multiline':False]['text':'! @brief Constructs a copy of other static_vector.','line_number':324,'multiline':False]['text':'!','line_number':325,'multiline':False]['text':'! @param other    The static_vector which content will be copied to this one.','line_number':326,'multiline':False]['text':'!','line_number':327,'multiline':False]['text':'! @par Throws','line_number':328,'multiline':False]['text':'!   @li If T's copy constructor throws.','line_number':329,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':330,'multiline':False]['text':'!','line_number':331,'multiline':False]['text':'! @par Complexity','line_number':332,'multiline':False]['text':'!   Linear O(N).','line_number':333,'multiline':False]['text':'! @brief Move constructor. Moves Values stored in the other static_vector to this one.','line_number':339,'multiline':False]['text':'!','line_number':340,'multiline':False]['text':'! @param other    The static_vector which content will be moved to this one.','line_number':341,'multiline':False]['text':'!','line_number':342,'multiline':False]['text':'! @par Throws','line_number':343,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor throws.','line_number':344,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor throws.','line_number':345,'multiline':False]['text':'!','line_number':346,'multiline':False]['text':'! @par Complexity','line_number':347,'multiline':False]['text':'!   Linear O(N).','line_number':348,'multiline':False]['text':'! @pre <tt>other.size() <= capacity()</tt>','line_number':354,'multiline':False]['text':'!','line_number':355,'multiline':False]['text':'! @brief Move constructor. Moves Values stored in the other static_vector to this one.','line_number':356,'multiline':False]['text':'!','line_number':357,'multiline':False]['text':'! @param other    The static_vector which content will be moved to this one.','line_number':358,'multiline':False]['text':'!','line_number':359,'multiline':False]['text':'! @par Throws','line_number':360,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor throws.','line_number':361,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor throws.','line_number':362,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':363,'multiline':False]['text':'!','line_number':364,'multiline':False]['text':'! @par Complexity','line_number':365,'multiline':False]['text':'!   Linear O(N).','line_number':366,'multiline':False]['text':'! @brief Copy assigns Values stored in the other static_vector to this one.','line_number':372,'multiline':False]['text':'!','line_number':373,'multiline':False]['text':'! @param other    The static_vector which content will be copied to this one.','line_number':374,'multiline':False]['text':'!','line_number':375,'multiline':False]['text':'! @par Throws','line_number':376,'multiline':False]['text':'!   If T's copy constructor or copy assignment throws.','line_number':377,'multiline':False]['text':'!','line_number':378,'multiline':False]['text':'! @par Complexity','line_number':379,'multiline':False]['text':'! Linear O(N).','line_number':380,'multiline':False]['text':'! @brief Copy assigns Values stored in std::initializer_list to *this.','line_number':387,'multiline':False]['text':'!','line_number':388,'multiline':False]['text':'! @param il    The std::initializer_list which content will be copied to this one.','line_number':389,'multiline':False]['text':'!','line_number':390,'multiline':False]['text':'! @par Throws','line_number':391,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws.','line_number':392,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':393,'multiline':False]['text':'!','line_number':394,'multiline':False]['text':'! @par Complexity','line_number':395,'multiline':False]['text':'! Linear O(N).','line_number':396,'multiline':False]['text':'! @pre <tt>other.size() <= capacity()</tt>','line_number':401,'multiline':False]['text':'!','line_number':402,'multiline':False]['text':'! @brief Copy assigns Values stored in the other static_vector to this one.','line_number':403,'multiline':False]['text':'!','line_number':404,'multiline':False]['text':'! @param other    The static_vector which content will be copied to this one.','line_number':405,'multiline':False]['text':'!','line_number':406,'multiline':False]['text':'! @par Throws','line_number':407,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws.','line_number':408,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':409,'multiline':False]['text':'!','line_number':410,'multiline':False]['text':'! @par Complexity','line_number':411,'multiline':False]['text':'!   Linear O(N).','line_number':412,'multiline':False]['text':'! @brief Move assignment. Moves Values stored in the other static_vector to this one.','line_number':420,'multiline':False]['text':'!','line_number':421,'multiline':False]['text':'! @param other    The static_vector which content will be moved to this one.','line_number':422,'multiline':False]['text':'!','line_number':423,'multiline':False]['text':'! @par Throws','line_number':424,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor or move assignment throws.','line_number':425,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor or copy assignment throws.','line_number':426,'multiline':False]['text':'!','line_number':427,'multiline':False]['text':'! @par Complexity','line_number':428,'multiline':False]['text':'!   Linear O(N).','line_number':429,'multiline':False]['text':'! @pre <tt>other.size() <= capacity()</tt>','line_number':436,'multiline':False]['text':'!','line_number':437,'multiline':False]['text':'! @brief Move assignment. Moves Values stored in the other static_vector to this one.','line_number':438,'multiline':False]['text':'!','line_number':439,'multiline':False]['text':'! @param other    The static_vector which content will be moved to this one.','line_number':440,'multiline':False]['text':'!','line_number':441,'multiline':False]['text':'! @par Throws','line_number':442,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor or move assignment throws.','line_number':443,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor or copy assignment throws.','line_number':444,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':445,'multiline':False]['text':'!','line_number':446,'multiline':False]['text':'! @par Complexity','line_number':447,'multiline':False]['text':'!   Linear O(N).','line_number':448,'multiline':False]['text':'! @brief Destructor. Destroys Values stored in this container.','line_number':458,'multiline':False]['text':'!','line_number':459,'multiline':False]['text':'! @par Throws','line_number':460,'multiline':False]['text':'!   Nothing','line_number':461,'multiline':False]['text':'!','line_number':462,'multiline':False]['text':'! @par Complexity','line_number':463,'multiline':False]['text':'!   Linear O(N).','line_number':464,'multiline':False]['text':'! @brief Swaps contents of the other static_vector and this one.','line_number':467,'multiline':False]['text':'!','line_number':468,'multiline':False]['text':'! @param other    The static_vector which content will be swapped with this one's content.','line_number':469,'multiline':False]['text':'!','line_number':470,'multiline':False]['text':'! @par Throws','line_number':471,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor or move assignment throws,','line_number':472,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor or copy assignment throws,','line_number':473,'multiline':False]['text':'!','line_number':474,'multiline':False]['text':'! @par Complexity','line_number':475,'multiline':False]['text':'!   Linear O(N).','line_number':476,'multiline':False]['text':'! @pre <tt>other.size() <= capacity() && size() <= other.capacity()</tt>','line_number':479,'multiline':False]['text':'!','line_number':480,'multiline':False]['text':'! @brief Swaps contents of the other static_vector and this one.','line_number':481,'multiline':False]['text':'!','line_number':482,'multiline':False]['text':'! @param other    The static_vector which content will be swapped with this one's content.','line_number':483,'multiline':False]['text':'!','line_number':484,'multiline':False]['text':'! @par Throws','line_number':485,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c true and T's move constructor or move assignment throws,','line_number':486,'multiline':False]['text':'!   @li If \c has_nothrow_move<T>::value is \c false and T's copy constructor or copy assignment throws,','line_number':487,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'! @par Complexity','line_number':490,'multiline':False]['text':'!   Linear O(N).','line_number':491,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':495,'multiline':False]['text':'!','line_number':496,'multiline':False]['text':'! @brief Inserts or erases elements at the end such that','line_number':497,'multiline':False]['text':'!   the size becomes count. New elements are value initialized.','line_number':498,'multiline':False]['text':'!','line_number':499,'multiline':False]['text':'! @param count    The number of elements which will be stored in the container.','line_number':500,'multiline':False]['text':'!','line_number':501,'multiline':False]['text':'! @par Throws','line_number':502,'multiline':False]['text':'!   @li If T's value initialization throws.','line_number':503,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':504,'multiline':False]['text':'!','line_number':505,'multiline':False]['text':'! @par Complexity','line_number':506,'multiline':False]['text':'!   Linear O(N).','line_number':507,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':510,'multiline':False]['text':'!','line_number':511,'multiline':False]['text':'! @brief Inserts or erases elements at the end such that','line_number':512,'multiline':False]['text':'!   the size becomes count. New elements are default initialized.','line_number':513,'multiline':False]['text':'!','line_number':514,'multiline':False]['text':'! @param count    The number of elements which will be stored in the container.','line_number':515,'multiline':False]['text':'!','line_number':516,'multiline':False]['text':'! @par Throws','line_number':517,'multiline':False]['text':'!   @li If T's default initialization throws.','line_number':518,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':519,'multiline':False]['text':'!','line_number':520,'multiline':False]['text':'! @par Complexity','line_number':521,'multiline':False]['text':'!   Linear O(N).','line_number':522,'multiline':False]['text':'!','line_number':523,'multiline':False]['text':'! @par Note','line_number':524,'multiline':False]['text':'!   Non-standard extension','line_number':525,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':528,'multiline':False]['text':'!','line_number':529,'multiline':False]['text':'! @brief Inserts or erases elements at the end such that','line_number':530,'multiline':False]['text':'!   the size becomes count. New elements are copy constructed from value.','line_number':531,'multiline':False]['text':'!','line_number':532,'multiline':False]['text':'! @param count    The number of elements which will be stored in the container.','line_number':533,'multiline':False]['text':'! @param value    The value used to copy construct the new element.','line_number':534,'multiline':False]['text':'!','line_number':535,'multiline':False]['text':'! @par Throws','line_number':536,'multiline':False]['text':'!   @li If T's copy constructor throws.','line_number':537,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':538,'multiline':False]['text':'!','line_number':539,'multiline':False]['text':'! @par Complexity','line_number':540,'multiline':False]['text':'!   Linear O(N).','line_number':541,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':544,'multiline':False]['text':'!','line_number':545,'multiline':False]['text':'! @brief This call has no effect because the Capacity of this container is constant.','line_number':546,'multiline':False]['text':'!','line_number':547,'multiline':False]['text':'! @param count    The number of elements which the container should be able to contain.','line_number':548,'multiline':False]['text':'!','line_number':549,'multiline':False]['text':'! @par Throws','line_number':550,'multiline':False]['text':'!   If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':551,'multiline':False]['text':'!','line_number':552,'multiline':False]['text':'! @par Complexity','line_number':553,'multiline':False]['text':'!   Constant O(1).','line_number':554,'multiline':False]['text':'! @pre <tt>size() < capacity()</tt>','line_number':557,'multiline':False]['text':'!','line_number':558,'multiline':False]['text':'! @brief Adds a copy of value at the end.','line_number':559,'multiline':False]['text':'!','line_number':560,'multiline':False]['text':'! @param value    The value used to copy construct the new element.','line_number':561,'multiline':False]['text':'!','line_number':562,'multiline':False]['text':'! @par Throws','line_number':563,'multiline':False]['text':'!   @li If T's copy constructor throws.','line_number':564,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':565,'multiline':False]['text':'!','line_number':566,'multiline':False]['text':'! @par Complexity','line_number':567,'multiline':False]['text':'!   Constant O(1).','line_number':568,'multiline':False]['text':'! @pre <tt>size() < capacity()</tt>','line_number':571,'multiline':False]['text':'!','line_number':572,'multiline':False]['text':'! @brief Moves value to the end.','line_number':573,'multiline':False]['text':'!','line_number':574,'multiline':False]['text':'! @param value    The value to move construct the new element.','line_number':575,'multiline':False]['text':'!','line_number':576,'multiline':False]['text':'! @par Throws','line_number':577,'multiline':False]['text':'!   @li If T's move constructor throws.','line_number':578,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':579,'multiline':False]['text':'!','line_number':580,'multiline':False]['text':'! @par Complexity','line_number':581,'multiline':False]['text':'!   Constant O(1).','line_number':582,'multiline':False]['text':'! @pre <tt>!empty()</tt>','line_number':585,'multiline':False]['text':'!','line_number':586,'multiline':False]['text':'! @brief Destroys last value and decreases the size.','line_number':587,'multiline':False]['text':'!','line_number':588,'multiline':False]['text':'! @par Throws','line_number':589,'multiline':False]['text':'!   Nothing.','line_number':590,'multiline':False]['text':'!','line_number':591,'multiline':False]['text':'! @par Complexity','line_number':592,'multiline':False]['text':'!   Constant O(1).','line_number':593,'multiline':False]['text':'! @pre','line_number':596,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>.','line_number':597,'multiline':False]['text':'!  @li <tt>size() < capacity()</tt>','line_number':598,'multiline':False]['text':'!','line_number':599,'multiline':False]['text':'! @brief Inserts a copy of element at p.','line_number':600,'multiline':False]['text':'!','line_number':601,'multiline':False]['text':'! @param p     The position at which the new value will be inserted.','line_number':602,'multiline':False]['text':'! @param value The value used to copy construct the new element.','line_number':603,'multiline':False]['text':'!','line_number':604,'multiline':False]['text':'! @par Throws','line_number':605,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws','line_number':606,'multiline':False]['text':'!   @li If T's move constructor or move assignment throws.','line_number':607,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':608,'multiline':False]['text':'!','line_number':609,'multiline':False]['text':'! @par Complexity','line_number':610,'multiline':False]['text':'!   Constant or linear.','line_number':611,'multiline':False]['text':'! @pre','line_number':614,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>.','line_number':615,'multiline':False]['text':'!  @li <tt>size() < capacity()</tt>','line_number':616,'multiline':False]['text':'!','line_number':617,'multiline':False]['text':'! @brief Inserts a move-constructed element at p.','line_number':618,'multiline':False]['text':'!','line_number':619,'multiline':False]['text':'! @param p     The position at which the new value will be inserted.','line_number':620,'multiline':False]['text':'! @param value The value used to move construct the new element.','line_number':621,'multiline':False]['text':'!','line_number':622,'multiline':False]['text':'! @par Throws','line_number':623,'multiline':False]['text':'!   @li If T's move constructor or move assignment throws.','line_number':624,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':625,'multiline':False]['text':'!','line_number':626,'multiline':False]['text':'! @par Complexity','line_number':627,'multiline':False]['text':'!   Constant or linear.','line_number':628,'multiline':False]['text':'! @pre','line_number':631,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>.','line_number':632,'multiline':False]['text':'!  @li <tt>size() + count <= capacity()</tt>','line_number':633,'multiline':False]['text':'!','line_number':634,'multiline':False]['text':'! @brief Inserts a count copies of value at p.','line_number':635,'multiline':False]['text':'!','line_number':636,'multiline':False]['text':'! @param p     The position at which new elements will be inserted.','line_number':637,'multiline':False]['text':'! @param count The number of new elements which will be inserted.','line_number':638,'multiline':False]['text':'! @param value The value used to copy construct new elements.','line_number':639,'multiline':False]['text':'!','line_number':640,'multiline':False]['text':'! @par Throws','line_number':641,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws.','line_number':642,'multiline':False]['text':'!   @li If T's move constructor or move assignment throws.','line_number':643,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':644,'multiline':False]['text':'!','line_number':645,'multiline':False]['text':'! @par Complexity','line_number':646,'multiline':False]['text':'!   Linear O(N).','line_number':647,'multiline':False]['text':'! @pre','line_number':650,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>.','line_number':651,'multiline':False]['text':'!  @li <tt>distance(first, last) <= capacity()</tt>','line_number':652,'multiline':False]['text':'!  @li \c Iterator must meet the \c ForwardTraversalIterator concept.','line_number':653,'multiline':False]['text':'!','line_number':654,'multiline':False]['text':'! @brief Inserts a copy of a range <tt>[first, last)</tt> at p.','line_number':655,'multiline':False]['text':'!','line_number':656,'multiline':False]['text':'! @param p     The position at which new elements will be inserted.','line_number':657,'multiline':False]['text':'! @param first The iterator to the first element of a range used to construct new elements.','line_number':658,'multiline':False]['text':'! @param last  The iterator to the one after the last element of a range used to construct new elements.','line_number':659,'multiline':False]['text':'!','line_number':660,'multiline':False]['text':'! @par Throws','line_number':661,'multiline':False]['text':'!   @li If T's constructor and assignment taking a dereferenced \c Iterator.','line_number':662,'multiline':False]['text':'!   @li If T's move constructor or move assignment throws.','line_number':663,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':664,'multiline':False]['text':'!','line_number':665,'multiline':False]['text':'! @par Complexity','line_number':666,'multiline':False]['text':'!   Linear O(N).','line_number':667,'multiline':False]['text':'! @pre','line_number':671,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>.','line_number':672,'multiline':False]['text':'!  @li <tt>distance(il.begin(), il.end()) <= capacity()</tt>','line_number':673,'multiline':False]['text':'!','line_number':674,'multiline':False]['text':'! @brief Inserts a copy of a range <tt>[il.begin(), il.end())</tt> at p.','line_number':675,'multiline':False]['text':'!','line_number':676,'multiline':False]['text':'! @param p     The position at which new elements will be inserted.','line_number':677,'multiline':False]['text':'! @param il    The std::initializer_list which contains elements that will be inserted.','line_number':678,'multiline':False]['text':'!','line_number':679,'multiline':False]['text':'! @par Throws','line_number':680,'multiline':False]['text':'!   @li If T's constructor and assignment taking a dereferenced std::initializer_list iterator.','line_number':681,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':682,'multiline':False]['text':'!','line_number':683,'multiline':False]['text':'! @par Complexity','line_number':684,'multiline':False]['text':'!   Linear O(N).','line_number':685,'multiline':False]['text':'! @pre \c p must be a valid iterator of \c *this in range <tt>[begin(), end())</tt>','line_number':688,'multiline':False]['text':'!','line_number':689,'multiline':False]['text':'! @brief Erases T from p.','line_number':690,'multiline':False]['text':'!','line_number':691,'multiline':False]['text':'! @param p    The position of the element which will be erased from the container.','line_number':692,'multiline':False]['text':'!','line_number':693,'multiline':False]['text':'! @par Throws','line_number':694,'multiline':False]['text':'!   If T's move assignment throws.','line_number':695,'multiline':False]['text':'!','line_number':696,'multiline':False]['text':'! @par Complexity','line_number':697,'multiline':False]['text':'!   Linear O(N).','line_number':698,'multiline':False]['text':'! @pre','line_number':701,'multiline':False]['text':'!  @li \c first and \c last must define a valid range','line_number':702,'multiline':False]['text':'!  @li iterators must be in range <tt>[begin(), end()]</tt>','line_number':703,'multiline':False]['text':'!','line_number':704,'multiline':False]['text':'! @brief Erases Values from a range <tt>[first, last)</tt>.','line_number':705,'multiline':False]['text':'!','line_number':706,'multiline':False]['text':'! @param first    The position of the first element of a range which will be erased from the container.','line_number':707,'multiline':False]['text':'! @param last     The position of the one after the last element of a range which will be erased from the container.','line_number':708,'multiline':False]['text':'!','line_number':709,'multiline':False]['text':'! @par Throws','line_number':710,'multiline':False]['text':'!   If T's move assignment throws.','line_number':711,'multiline':False]['text':'!','line_number':712,'multiline':False]['text':'! @par Complexity','line_number':713,'multiline':False]['text':'!   Linear O(N).','line_number':714,'multiline':False]['text':'! @pre <tt>distance(first, last) <= capacity()</tt>','line_number':717,'multiline':False]['text':'!','line_number':718,'multiline':False]['text':'! @brief Assigns a range <tt>[first, last)</tt> of Values to this container.','line_number':719,'multiline':False]['text':'!','line_number':720,'multiline':False]['text':'! @param first       The iterator to the first element of a range used to construct new content of this container.','line_number':721,'multiline':False]['text':'! @param last        The iterator to the one after the last element of a range used to construct new content of this container.','line_number':722,'multiline':False]['text':'!','line_number':723,'multiline':False]['text':'! @par Throws','line_number':724,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws,','line_number':725,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':726,'multiline':False]['text':'!','line_number':727,'multiline':False]['text':'! @par Complexity','line_number':728,'multiline':False]['text':'!   Linear O(N).','line_number':729,'multiline':False]['text':'! @pre <tt>distance(il.begin(), il.end()) <= capacity()</tt>','line_number':733,'multiline':False]['text':'!','line_number':734,'multiline':False]['text':'! @brief Assigns a range <tt>[il.begin(), il.end())</tt> of Values to this container.','line_number':735,'multiline':False]['text':'!','line_number':736,'multiline':False]['text':'! @param il       std::initializer_list with values used to construct new content of this container.','line_number':737,'multiline':False]['text':'!','line_number':738,'multiline':False]['text':'! @par Throws','line_number':739,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws,','line_number':740,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':741,'multiline':False]['text':'!','line_number':742,'multiline':False]['text':'! @par Complexity','line_number':743,'multiline':False]['text':'!   Linear O(N).','line_number':744,'multiline':False]['text':'! @pre <tt>count <= capacity()</tt>','line_number':747,'multiline':False]['text':'!','line_number':748,'multiline':False]['text':'! @brief Assigns a count copies of value to this container.','line_number':749,'multiline':False]['text':'!','line_number':750,'multiline':False]['text':'! @param count       The new number of elements which will be container in the container.','line_number':751,'multiline':False]['text':'! @param value       The value which will be used to copy construct the new content.','line_number':752,'multiline':False]['text':'!','line_number':753,'multiline':False]['text':'! @par Throws','line_number':754,'multiline':False]['text':'!   @li If T's copy constructor or copy assignment throws.','line_number':755,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':756,'multiline':False]['text':'!','line_number':757,'multiline':False]['text':'! @par Complexity','line_number':758,'multiline':False]['text':'!   Linear O(N).','line_number':759,'multiline':False]['text':'! @pre <tt>size() < capacity()</tt>','line_number':762,'multiline':False]['text':'!','line_number':763,'multiline':False]['text':'! @brief Inserts a T constructed with','line_number':764,'multiline':False]['text':'!   \c std::forward<Args>(args)... in the end of the container.','line_number':765,'multiline':False]['text':'!','line_number':766,'multiline':False]['text':'! @return A reference to the created object.','line_number':767,'multiline':False]['text':'!','line_number':768,'multiline':False]['text':'! @param args     The arguments of the constructor of the new element which will be created at the end of the container.','line_number':769,'multiline':False]['text':'!','line_number':770,'multiline':False]['text':'! @par Throws','line_number':771,'multiline':False]['text':'!   @li If in-place constructor throws or T's move constructor throws.','line_number':772,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':773,'multiline':False]['text':'!','line_number':774,'multiline':False]['text':'! @par Complexity','line_number':775,'multiline':False]['text':'!   Constant O(1).','line_number':776,'multiline':False]['text':'! @pre','line_number':780,'multiline':False]['text':'!  @li \c p must be a valid iterator of \c *this in range <tt>[begin(), end()]</tt>','line_number':781,'multiline':False]['text':'!  @li <tt>size() < capacity()</tt>','line_number':782,'multiline':False]['text':'!','line_number':783,'multiline':False]['text':'! @brief Inserts a T constructed with','line_number':784,'multiline':False]['text':'!   \c std::forward<Args>(args)... before p','line_number':785,'multiline':False]['text':'!','line_number':786,'multiline':False]['text':'! @param p     The position at which new elements will be inserted.','line_number':787,'multiline':False]['text':'! @param args  The arguments of the constructor of the new element.','line_number':788,'multiline':False]['text':'!','line_number':789,'multiline':False]['text':'! @par Throws','line_number':790,'multiline':False]['text':'!   @li If in-place constructor throws or if T's move constructor or move assignment throws.','line_number':791,'multiline':False]['text':'!   @li If \c throw_on_overflow<true> option is set and the container runs out of capacity.','line_number':792,'multiline':False]['text':'!','line_number':793,'multiline':False]['text':'! @par Complexity','line_number':794,'multiline':False]['text':'!   Constant or linear.','line_number':795,'multiline':False]['text':'! @brief Removes all elements from the container.','line_number':799,'multiline':False]['text':'!','line_number':800,'multiline':False]['text':'! @par Throws','line_number':801,'multiline':False]['text':'!   Nothing.','line_number':802,'multiline':False]['text':'!','line_number':803,'multiline':False]['text':'! @par Complexity','line_number':804,'multiline':False]['text':'!   Constant O(1).','line_number':805,'multiline':False]['text':'! @pre <tt>i < size()</tt>','line_number':808,'multiline':False]['text':'!','line_number':809,'multiline':False]['text':'! @brief Returns reference to the i-th element.','line_number':810,'multiline':False]['text':'!','line_number':811,'multiline':False]['text':'! @param i    The element's index.','line_number':812,'multiline':False]['text':'!','line_number':813,'multiline':False]['text':'! @return reference to the i-th element','line_number':814,'multiline':False]['text':'!   from the beginning of the container.','line_number':815,'multiline':False]['text':'!','line_number':816,'multiline':False]['text':'! @par Throws','line_number':817,'multiline':False]['text':'!   \c out_of_range exception by default.','line_number':818,'multiline':False]['text':'!','line_number':819,'multiline':False]['text':'! @par Complexity','line_number':820,'multiline':False]['text':'!   Constant O(1).','line_number':821,'multiline':False]['text':'! @pre <tt>i < size()</tt>','line_number':824,'multiline':False]['text':'!','line_number':825,'multiline':False]['text':'! @brief Returns const reference to the i-th element.','line_number':826,'multiline':False]['text':'!','line_number':827,'multiline':False]['text':'! @param i    The element's index.','line_number':828,'multiline':False]['text':'!','line_number':829,'multiline':False]['text':'! @return const reference to the i-th element','line_number':830,'multiline':False]['text':'!   from the beginning of the container.','line_number':831,'multiline':False]['text':'!','line_number':832,'multiline':False]['text':'! @par Throws','line_number':833,'multiline':False]['text':'!   \c out_of_range exception by default.','line_number':834,'multiline':False]['text':'!','line_number':835,'multiline':False]['text':'! @par Complexity','line_number':836,'multiline':False]['text':'!   Constant O(1).','line_number':837,'multiline':False]['text':'! @pre <tt>i < size()</tt>','line_number':840,'multiline':False]['text':'!','line_number':841,'multiline':False]['text':'! @brief Returns reference to the i-th element.','line_number':842,'multiline':False]['text':'!','line_number':843,'multiline':False]['text':'! @param i    The element's index.','line_number':844,'multiline':False]['text':'!','line_number':845,'multiline':False]['text':'! @return reference to the i-th element','line_number':846,'multiline':False]['text':'!   from the beginning of the container.','line_number':847,'multiline':False]['text':'!','line_number':848,'multiline':False]['text':'! @par Throws','line_number':849,'multiline':False]['text':'!   Nothing.','line_number':850,'multiline':False]['text':'!','line_number':851,'multiline':False]['text':'! @par Complexity','line_number':852,'multiline':False]['text':'!   Constant O(1).','line_number':853,'multiline':False]['text':'! @pre <tt>i < size()</tt>','line_number':856,'multiline':False]['text':'!','line_number':857,'multiline':False]['text':'! @brief Returns const reference to the i-th element.','line_number':858,'multiline':False]['text':'!','line_number':859,'multiline':False]['text':'! @param i    The element's index.','line_number':860,'multiline':False]['text':'!','line_number':861,'multiline':False]['text':'! @return const reference to the i-th element','line_number':862,'multiline':False]['text':'!   from the beginning of the container.','line_number':863,'multiline':False]['text':'!','line_number':864,'multiline':False]['text':'! @par Throws','line_number':865,'multiline':False]['text':'!   Nothing.','line_number':866,'multiline':False]['text':'!','line_number':867,'multiline':False]['text':'! @par Complexity','line_number':868,'multiline':False]['text':'!   Constant O(1).','line_number':869,'multiline':False]['text':'! @pre <tt>i =< size()</tt>','line_number':872,'multiline':False]['text':'!','line_number':873,'multiline':False]['text':'! @brief Returns a iterator to the i-th element.','line_number':874,'multiline':False]['text':'!','line_number':875,'multiline':False]['text':'! @param i    The element's index.','line_number':876,'multiline':False]['text':'!','line_number':877,'multiline':False]['text':'! @return a iterator to the i-th element.','line_number':878,'multiline':False]['text':'!','line_number':879,'multiline':False]['text':'! @par Throws','line_number':880,'multiline':False]['text':'!   Nothing.','line_number':881,'multiline':False]['text':'!','line_number':882,'multiline':False]['text':'! @par Complexity','line_number':883,'multiline':False]['text':'!   Constant O(1).','line_number':884,'multiline':False]['text':'! @pre <tt>i =< size()</tt>','line_number':887,'multiline':False]['text':'!','line_number':888,'multiline':False]['text':'! @brief Returns a const_iterator to the i-th element.','line_number':889,'multiline':False]['text':'!','line_number':890,'multiline':False]['text':'! @param i    The element's index.','line_number':891,'multiline':False]['text':'!','line_number':892,'multiline':False]['text':'! @return a const_iterator to the i-th element.','line_number':893,'multiline':False]['text':'!','line_number':894,'multiline':False]['text':'! @par Throws','line_number':895,'multiline':False]['text':'!   Nothing by default.','line_number':896,'multiline':False]['text':'!','line_number':897,'multiline':False]['text':'! @par Complexity','line_number':898,'multiline':False]['text':'!   Constant O(1).','line_number':899,'multiline':False]['text':'! @pre <tt>begin() <= p <= end()</tt>','line_number':902,'multiline':False]['text':'!','line_number':903,'multiline':False]['text':'! @brief Returns the index of the element pointed by p.','line_number':904,'multiline':False]['text':'!','line_number':905,'multiline':False]['text':'! @param p    An iterator to the element.','line_number':906,'multiline':False]['text':'!','line_number':907,'multiline':False]['text':'! @return The index of the element pointed by p.','line_number':908,'multiline':False]['text':'!','line_number':909,'multiline':False]['text':'! @par Throws','line_number':910,'multiline':False]['text':'!   Nothing.','line_number':911,'multiline':False]['text':'!','line_number':912,'multiline':False]['text':'! @par Complexity','line_number':913,'multiline':False]['text':'!   Constant O(1).','line_number':914,'multiline':False]['text':'! @pre <tt>begin() <= p <= end()</tt>','line_number':917,'multiline':False]['text':'!','line_number':918,'multiline':False]['text':'! @brief Returns the index of the element pointed by p.','line_number':919,'multiline':False]['text':'!','line_number':920,'multiline':False]['text':'! @param p    A const_iterator to the element.','line_number':921,'multiline':False]['text':'!','line_number':922,'multiline':False]['text':'! @return a const_iterator to the i-th element.','line_number':923,'multiline':False]['text':'!','line_number':924,'multiline':False]['text':'! @par Throws','line_number':925,'multiline':False]['text':'!   Nothing.','line_number':926,'multiline':False]['text':'!','line_number':927,'multiline':False]['text':'! @par Complexity','line_number':928,'multiline':False]['text':'!   Constant O(1).','line_number':929,'multiline':False]['text':'! @pre \c !empty()','line_number':932,'multiline':False]['text':'!','line_number':933,'multiline':False]['text':'! @brief Returns reference to the first element.','line_number':934,'multiline':False]['text':'!','line_number':935,'multiline':False]['text':'! @return reference to the first element','line_number':936,'multiline':False]['text':'!   from the beginning of the container.','line_number':937,'multiline':False]['text':'!','line_number':938,'multiline':False]['text':'! @par Throws','line_number':939,'multiline':False]['text':'!   Nothing.','line_number':940,'multiline':False]['text':'!','line_number':941,'multiline':False]['text':'! @par Complexity','line_number':942,'multiline':False]['text':'!   Constant O(1).','line_number':943,'multiline':False]['text':'! @pre \c !empty()','line_number':946,'multiline':False]['text':'!','line_number':947,'multiline':False]['text':'! @brief Returns const reference to the first element.','line_number':948,'multiline':False]['text':'!','line_number':949,'multiline':False]['text':'! @return const reference to the first element','line_number':950,'multiline':False]['text':'!   from the beginning of the container.','line_number':951,'multiline':False]['text':'!','line_number':952,'multiline':False]['text':'! @par Throws','line_number':953,'multiline':False]['text':'!   Nothing.','line_number':954,'multiline':False]['text':'!','line_number':955,'multiline':False]['text':'! @par Complexity','line_number':956,'multiline':False]['text':'!   Constant O(1).','line_number':957,'multiline':False]['text':'! @pre \c !empty()','line_number':960,'multiline':False]['text':'!','line_number':961,'multiline':False]['text':'! @brief Returns reference to the last element.','line_number':962,'multiline':False]['text':'!','line_number':963,'multiline':False]['text':'! @return reference to the last element','line_number':964,'multiline':False]['text':'!   from the beginning of the container.','line_number':965,'multiline':False]['text':'!','line_number':966,'multiline':False]['text':'! @par Throws','line_number':967,'multiline':False]['text':'!   Nothing.','line_number':968,'multiline':False]['text':'!','line_number':969,'multiline':False]['text':'! @par Complexity','line_number':970,'multiline':False]['text':'!   Constant O(1).','line_number':971,'multiline':False]['text':'! @pre \c !empty()','line_number':974,'multiline':False]['text':'!','line_number':975,'multiline':False]['text':'! @brief Returns const reference to the first element.','line_number':976,'multiline':False]['text':'!','line_number':977,'multiline':False]['text':'! @return const reference to the last element','line_number':978,'multiline':False]['text':'!   from the beginning of the container.','line_number':979,'multiline':False]['text':'!','line_number':980,'multiline':False]['text':'! @par Throws','line_number':981,'multiline':False]['text':'!   Nothing.','line_number':982,'multiline':False]['text':'!','line_number':983,'multiline':False]['text':'! @par Complexity','line_number':984,'multiline':False]['text':'!   Constant O(1).','line_number':985,'multiline':False]['text':'! @brief Pointer such that <tt>[data(), data() + size())</tt> is a valid range.','line_number':988,'multiline':False]['text':'!   For a non-empty vector <tt>data() == &front()</tt>.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! @par Throws','line_number':991,'multiline':False]['text':'!   Nothing.','line_number':992,'multiline':False]['text':'!','line_number':993,'multiline':False]['text':'! @par Complexity','line_number':994,'multiline':False]['text':'!   Constant O(1).','line_number':995,'multiline':False]['text':'! @brief Const pointer such that <tt>[data(), data() + size())</tt> is a valid range.','line_number':998,'multiline':False]['text':'!   For a non-empty vector <tt>data() == &front()</tt>.','line_number':999,'multiline':False]['text':'!','line_number':1000,'multiline':False]['text':'! @par Throws','line_number':1001,'multiline':False]['text':'!   Nothing.','line_number':1002,'multiline':False]['text':'!','line_number':1003,'multiline':False]['text':'! @par Complexity','line_number':1004,'multiline':False]['text':'!   Constant O(1).','line_number':1005,'multiline':False]['text':'! @brief Returns iterator to the first element.','line_number':1008,'multiline':False]['text':'!','line_number':1009,'multiline':False]['text':'! @return iterator to the first element contained in the vector.','line_number':1010,'multiline':False]['text':'!','line_number':1011,'multiline':False]['text':'! @par Throws','line_number':1012,'multiline':False]['text':'!   Nothing.','line_number':1013,'multiline':False]['text':'!','line_number':1014,'multiline':False]['text':'! @par Complexity','line_number':1015,'multiline':False]['text':'!   Constant O(1).','line_number':1016,'multiline':False]['text':'! @brief Returns const iterator to the first element.','line_number':1019,'multiline':False]['text':'!','line_number':1020,'multiline':False]['text':'! @return const_iterator to the first element contained in the vector.','line_number':1021,'multiline':False]['text':'!','line_number':1022,'multiline':False]['text':'! @par Throws','line_number':1023,'multiline':False]['text':'!   Nothing.','line_number':1024,'multiline':False]['text':'!','line_number':1025,'multiline':False]['text':'! @par Complexity','line_number':1026,'multiline':False]['text':'!   Constant O(1).','line_number':1027,'multiline':False]['text':'! @brief Returns const iterator to the first element.','line_number':1030,'multiline':False]['text':'!','line_number':1031,'multiline':False]['text':'! @return const_iterator to the first element contained in the vector.','line_number':1032,'multiline':False]['text':'!','line_number':1033,'multiline':False]['text':'! @par Throws','line_number':1034,'multiline':False]['text':'!   Nothing.','line_number':1035,'multiline':False]['text':'!','line_number':1036,'multiline':False]['text':'! @par Complexity','line_number':1037,'multiline':False]['text':'!   Constant O(1).','line_number':1038,'multiline':False]['text':'! @brief Returns iterator to the one after the last element.','line_number':1041,'multiline':False]['text':'!','line_number':1042,'multiline':False]['text':'! @return iterator pointing to the one after the last element contained in the vector.','line_number':1043,'multiline':False]['text':'!','line_number':1044,'multiline':False]['text':'! @par Throws','line_number':1045,'multiline':False]['text':'!   Nothing.','line_number':1046,'multiline':False]['text':'!','line_number':1047,'multiline':False]['text':'! @par Complexity','line_number':1048,'multiline':False]['text':'!   Constant O(1).','line_number':1049,'multiline':False]['text':'! @brief Returns const iterator to the one after the last element.','line_number':1052,'multiline':False]['text':'!','line_number':1053,'multiline':False]['text':'! @return const_iterator pointing to the one after the last element contained in the vector.','line_number':1054,'multiline':False]['text':'!','line_number':1055,'multiline':False]['text':'! @par Throws','line_number':1056,'multiline':False]['text':'!   Nothing.','line_number':1057,'multiline':False]['text':'!','line_number':1058,'multiline':False]['text':'! @par Complexity','line_number':1059,'multiline':False]['text':'!   Constant O(1).','line_number':1060,'multiline':False]['text':'! @brief Returns const iterator to the one after the last element.','line_number':1063,'multiline':False]['text':'!','line_number':1064,'multiline':False]['text':'! @return const_iterator pointing to the one after the last element contained in the vector.','line_number':1065,'multiline':False]['text':'!','line_number':1066,'multiline':False]['text':'! @par Throws','line_number':1067,'multiline':False]['text':'!   Nothing.','line_number':1068,'multiline':False]['text':'!','line_number':1069,'multiline':False]['text':'! @par Complexity','line_number':1070,'multiline':False]['text':'!   Constant O(1).','line_number':1071,'multiline':False]['text':'! @brief Returns reverse iterator to the first element of the reversed container.','line_number':1074,'multiline':False]['text':'!','line_number':1075,'multiline':False]['text':'! @return reverse_iterator pointing to the beginning','line_number':1076,'multiline':False]['text':'! of the reversed static_vector.','line_number':1077,'multiline':False]['text':'!','line_number':1078,'multiline':False]['text':'! @par Throws','line_number':1079,'multiline':False]['text':'!   Nothing.','line_number':1080,'multiline':False]['text':'!','line_number':1081,'multiline':False]['text':'! @par Complexity','line_number':1082,'multiline':False]['text':'!   Constant O(1).','line_number':1083,'multiline':False]['text':'! @brief Returns const reverse iterator to the first element of the reversed container.','line_number':1086,'multiline':False]['text':'!','line_number':1087,'multiline':False]['text':'! @return const_reverse_iterator pointing to the beginning','line_number':1088,'multiline':False]['text':'! of the reversed static_vector.','line_number':1089,'multiline':False]['text':'!','line_number':1090,'multiline':False]['text':'! @par Throws','line_number':1091,'multiline':False]['text':'!   Nothing.','line_number':1092,'multiline':False]['text':'!','line_number':1093,'multiline':False]['text':'! @par Complexity','line_number':1094,'multiline':False]['text':'!   Constant O(1).','line_number':1095,'multiline':False]['text':'! @brief Returns const reverse iterator to the first element of the reversed container.','line_number':1098,'multiline':False]['text':'!','line_number':1099,'multiline':False]['text':'! @return const_reverse_iterator pointing to the beginning','line_number':1100,'multiline':False]['text':'! of the reversed static_vector.','line_number':1101,'multiline':False]['text':'!','line_number':1102,'multiline':False]['text':'! @par Throws','line_number':1103,'multiline':False]['text':'!   Nothing.','line_number':1104,'multiline':False]['text':'!','line_number':1105,'multiline':False]['text':'! @par Complexity','line_number':1106,'multiline':False]['text':'!   Constant O(1).','line_number':1107,'multiline':False]['text':'! @brief Returns reverse iterator to the one after the last element of the reversed container.','line_number':1110,'multiline':False]['text':'!','line_number':1111,'multiline':False]['text':'! @return reverse_iterator pointing to the one after the last element','line_number':1112,'multiline':False]['text':'! of the reversed static_vector.','line_number':1113,'multiline':False]['text':'!','line_number':1114,'multiline':False]['text':'! @par Throws','line_number':1115,'multiline':False]['text':'!   Nothing.','line_number':1116,'multiline':False]['text':'!','line_number':1117,'multiline':False]['text':'! @par Complexity','line_number':1118,'multiline':False]['text':'!   Constant O(1).','line_number':1119,'multiline':False]['text':'! @brief Returns const reverse iterator to the one after the last element of the reversed container.','line_number':1122,'multiline':False]['text':'!','line_number':1123,'multiline':False]['text':'! @return const_reverse_iterator pointing to the one after the last element','line_number':1124,'multiline':False]['text':'! of the reversed static_vector.','line_number':1125,'multiline':False]['text':'!','line_number':1126,'multiline':False]['text':'! @par Throws','line_number':1127,'multiline':False]['text':'!   Nothing.','line_number':1128,'multiline':False]['text':'!','line_number':1129,'multiline':False]['text':'! @par Complexity','line_number':1130,'multiline':False]['text':'!   Constant O(1).','line_number':1131,'multiline':False]['text':'! @brief Returns const reverse iterator to the one after the last element of the reversed container.','line_number':1134,'multiline':False]['text':'!','line_number':1135,'multiline':False]['text':'! @return const_reverse_iterator pointing to the one after the last element','line_number':1136,'multiline':False]['text':'! of the reversed static_vector.','line_number':1137,'multiline':False]['text':'!','line_number':1138,'multiline':False]['text':'! @par Throws','line_number':1139,'multiline':False]['text':'!   Nothing.','line_number':1140,'multiline':False]['text':'!','line_number':1141,'multiline':False]['text':'! @par Complexity','line_number':1142,'multiline':False]['text':'!   Constant O(1).','line_number':1143,'multiline':False]['text':'#ifdef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1146,'multiline':False]['text':'! @brief Returns container's capacity.','line_number':1148,'multiline':False]['text':'!','line_number':1149,'multiline':False]['text':'! @return container's capacity.','line_number':1150,'multiline':False]['text':'!','line_number':1151,'multiline':False]['text':'! @par Throws','line_number':1152,'multiline':False]['text':'!   Nothing.','line_number':1153,'multiline':False]['text':'!','line_number':1154,'multiline':False]['text':'! @par Complexity','line_number':1155,'multiline':False]['text':'!   Constant O(1).','line_number':1156,'multiline':False]['text':'! @brief Returns container's capacity.','line_number':1160,'multiline':False]['text':'!','line_number':1161,'multiline':False]['text':'! @return container's capacity.','line_number':1162,'multiline':False]['text':'!','line_number':1163,'multiline':False]['text':'! @par Throws','line_number':1164,'multiline':False]['text':'!   Nothing.','line_number':1165,'multiline':False]['text':'!','line_number':1166,'multiline':False]['text':'! @par Complexity','line_number':1167,'multiline':False]['text':'!   Constant O(1).','line_number':1168,'multiline':False]['text':'! @brief Returns the number of stored elements.','line_number':1174,'multiline':False]['text':'!','line_number':1175,'multiline':False]['text':'! @return Number of elements contained in the container.','line_number':1176,'multiline':False]['text':'!','line_number':1177,'multiline':False]['text':'! @par Throws','line_number':1178,'multiline':False]['text':'!   Nothing.','line_number':1179,'multiline':False]['text':'!','line_number':1180,'multiline':False]['text':'! @par Complexity','line_number':1181,'multiline':False]['text':'!   Constant O(1).','line_number':1182,'multiline':False]['text':'! @brief Queries if the container contains elements.','line_number':1185,'multiline':False]['text':'!','line_number':1186,'multiline':False]['text':'! @return true if the number of elements contained in the','line_number':1187,'multiline':False]['text':'!   container is equal to 0.','line_number':1188,'multiline':False]['text':'!','line_number':1189,'multiline':False]['text':'! @par Throws','line_number':1190,'multiline':False]['text':'!   Nothing.','line_number':1191,'multiline':False]['text':'!','line_number':1192,'multiline':False]['text':'! @par Complexity','line_number':1193,'multiline':False]['text':'!   Constant O(1).','line_number':1194,'multiline':False]['text':' BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1204,'multiline':False]['text':'! @brief Checks if contents of two static_vectors are equal.','line_number':1210,'multiline':False]['text':'!','line_number':1211,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1212,'multiline':False]['text':'!','line_number':1213,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1214,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1215,'multiline':False]['text':'!','line_number':1216,'multiline':False]['text':'! @return     \c true if containers have the same size and elements in both containers are equal.','line_number':1217,'multiline':False]['text':'!','line_number':1218,'multiline':False]['text':'! @par Complexity','line_number':1219,'multiline':False]['text':'!   Linear O(N).','line_number':1220,'multiline':False]['text':'! @brief Checks if contents of two static_vectors are not equal.','line_number':1224,'multiline':False]['text':'!','line_number':1225,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1226,'multiline':False]['text':'!','line_number':1227,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1228,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1229,'multiline':False]['text':'!','line_number':1230,'multiline':False]['text':'! @return     \c true if containers have different size or elements in both containers are not equal.','line_number':1231,'multiline':False]['text':'!','line_number':1232,'multiline':False]['text':'! @par Complexity','line_number':1233,'multiline':False]['text':'!   Linear O(N).','line_number':1234,'multiline':False]['text':'! @brief Lexicographically compares static_vectors.','line_number':1238,'multiline':False]['text':'!','line_number':1239,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1240,'multiline':False]['text':'!','line_number':1241,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1242,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1243,'multiline':False]['text':'!','line_number':1244,'multiline':False]['text':'! @return     \c true if x compares lexicographically less than y.','line_number':1245,'multiline':False]['text':'!','line_number':1246,'multiline':False]['text':'! @par Complexity','line_number':1247,'multiline':False]['text':'!   Linear O(N).','line_number':1248,'multiline':False]['text':'! @brief Lexicographically compares static_vectors.','line_number':1252,'multiline':False]['text':'!','line_number':1253,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1254,'multiline':False]['text':'!','line_number':1255,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1256,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1257,'multiline':False]['text':'!','line_number':1258,'multiline':False]['text':'! @return     \c true if y compares lexicographically less than x.','line_number':1259,'multiline':False]['text':'!','line_number':1260,'multiline':False]['text':'! @par Complexity','line_number':1261,'multiline':False]['text':'!   Linear O(N).','line_number':1262,'multiline':False]['text':'! @brief Lexicographically compares static_vectors.','line_number':1266,'multiline':False]['text':'!','line_number':1267,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1268,'multiline':False]['text':'!','line_number':1269,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1270,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1271,'multiline':False]['text':'!','line_number':1272,'multiline':False]['text':'! @return     \c true if y don't compare lexicographically less than x.','line_number':1273,'multiline':False]['text':'!','line_number':1274,'multiline':False]['text':'! @par Complexity','line_number':1275,'multiline':False]['text':'!   Linear O(N).','line_number':1276,'multiline':False]['text':'! @brief Lexicographically compares static_vectors.','line_number':1280,'multiline':False]['text':'!','line_number':1281,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1282,'multiline':False]['text':'!','line_number':1283,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1284,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1285,'multiline':False]['text':'!','line_number':1286,'multiline':False]['text':'! @return     \c true if x don't compare lexicographically less than y.','line_number':1287,'multiline':False]['text':'!','line_number':1288,'multiline':False]['text':'! @par Complexity','line_number':1289,'multiline':False]['text':'!   Linear O(N).','line_number':1290,'multiline':False]['text':'! @brief Swaps contents of two static_vectors.','line_number':1294,'multiline':False]['text':'!','line_number':1295,'multiline':False]['text':'! This function calls static_vector::swap().','line_number':1296,'multiline':False]['text':'!','line_number':1297,'multiline':False]['text':'! @ingroup static_vector_non_member','line_number':1298,'multiline':False]['text':'!','line_number':1299,'multiline':False]['text':'! @param x    The first static_vector.','line_number':1300,'multiline':False]['text':'! @param y    The second static_vector.','line_number':1301,'multiline':False]['text':'!','line_number':1302,'multiline':False]['text':'! @par Complexity','line_number':1303,'multiline':False]['text':'!   Linear O(N).','line_number':1304,'multiline':False]['text':' BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1319,'multiline':False]['text':' namespace boost::container','line_number':1321,'multiline':False]['text':' BOOST_CONTAINER_STATIC_VECTOR_HPP','line_number':1325,'multiline':False]