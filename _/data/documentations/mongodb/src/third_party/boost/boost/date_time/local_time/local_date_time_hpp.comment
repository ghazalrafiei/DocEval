['text':' Copyright (c) 2003-2005 CrystalClear Software, Inc.
 * Subject to the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]['text':'todo remove?','line_number':18,'multiline':False]['text':' absolute_value','line_number':23,'multiline':False]['text':'! simple exception for reporting when STD or DST cannot be determined','line_number':28,'multiline':False]['text':'! simple exception for when time label given cannot exist','line_number':34,'multiline':False]['text':'TODO: I think these should be in local_date_time_base and not','line_number':46,'multiline':False]['text':' necessarily brought into the namespace','line_number':47,'multiline':False]['text':'! Representation of "wall-clock" time in a particular time zone','line_number':54,'multiline':False]['text':'! Representation of "wall-clock" time in a particular time zone
   * Local_date_time_base holds a time value (date and time offset from 00:00)
   * along with a time zone. The time value is stored as UTC and conversions
   * to wall clock time are made as needed. This approach allows for
   * operations between wall-clock times in different time zones, and
   * daylight savings time considerations, to be made. Time zones are
   * required to be in the form of a boost::shared_ptr<time_zone_base>.
   ','line_number':55,'multiline':True]['text':'! This constructor interprets the passed time as a UTC time.
     *  So, for example, if the passed timezone is UTC-5 then the
     *  time will be adjusted back 5 hours.  The time zone allows for
     *  automatic calculation of whether the particular time is adjusted for
     *  daylight savings, etc.
     *  If the time zone shared pointer is null then time stays unadjusted.
     *@param t A UTC time
     *@param tz Timezone for to adjust the UTC time to.
     ','line_number':73,'multiline':True]['text':' param was already utc so nothing more to do','line_number':87,'multiline':False]['text':'! This constructs a local time -- the passed time information
     * understood to be in the passed tz. The DST flag must be passed
     * to indicate whether the time is in daylight savings or not.
     *  @throws -- time_label_invalid if the time passed does not exist in
     *             the given locale. The non-existent case occurs typically
     *             during the shift-back from daylight savings time.  When
     *             the clock is shifted forward a range of times
     *             (2 am to 3 am in the US) is skipped and hence is invalid.
     *  @throws -- dst_not_valid if the DST flag is passed for a period
     *             where DST is not active.
     ','line_number':90,'multiline':True]['text':'necessary for constr_adj()','line_number':104,'multiline':False]['text':' d & td are already local so we use them','line_number':110,'multiline':False]['text':' less processing than is_dst()','line_number':112,'multiline':False]['text':' ambig occurs at end, invalid at start','line_number':114,'multiline':False]['text':' Ex: 2:15am local on trans-in day in nyc, dst_flag irrelevant','line_number':116,'multiline':False]['text':' is dst_flag accurate?','line_number':122,'multiline':False]['text':' Ex: false flag in NYC in June','line_number':123,'multiline':False]['text':' everything checks out and conversion to utc already done','line_number':130,'multiline':False]['text':'TODO maybe not the right set...Ignore the last 2 for now...','line_number':134,'multiline':False]['text':'ASSUME_DST_ON_ERROR, ASSUME_NOT_DST_ON_ERROR };','line_number':136,'multiline':False]['text':'! This constructs a local time -- the passed time information
     * understood to be in the passed tz.  The DST flag is calculated
     * according to the specified rule.
     ','line_number':138,'multiline':True]['text':' dummy value - time_ is set in constructor code','line_number':146,'multiline':False]['text':' NADT on error','line_number':157,'multiline':False]['text':' NADT on error','line_number':167,'multiline':False]['text':'! Determines if given time label is in daylight savings for given zone','line_number':186,'multiline':False]['text':'! Determines if given time label is in daylight savings for given zone.
     * Takes a date and time_duration representing a local time, along
     * with time zone, and returns a time_is_dst_result object as result.
     ','line_number':187,'multiline':True]['text':'! Simple destructor, releases time zone if last referrer','line_number':211,'multiline':False]['text':'! Copy constructor','line_number':214,'multiline':False]['text':'! Special values constructor','line_number':220,'multiline':False]['text':'! returns time zone associated with calling instance','line_number':227,'multiline':False]['text':'! returns false is time_zone is NULL and if time value is a special_value','line_number':232,'multiline':False]['text':' check_dst takes a local time, *this is utc','line_number':236,'multiline':False]['text':' dst_offset only needs to be considered with ambiguous time labels','line_number':239,'multiline':False]['text':' make that adjustment there','line_number':240,'multiline':False]['text':'! Returns object's time value as a utc representation','line_number':261,'multiline':False]['text':'! Returns object's time value as a local representation','line_number':266,'multiline':False]['text':'! Returns string in the form "2003-Aug-20 05:00:00 EDT"','line_number':278,'multiline':False]['text':'! Returns string in the form "2003-Aug-20 05:00:00 EDT". If
     * time_zone is NULL the time zone abbreviation will be "UTC". The time
     * zone abbrev will not be included if calling object is a special_value','line_number':279,'multiline':True]['text':'TODO is this a temporary function ???','line_number':284,'multiline':False]['text':'! returns a local_date_time_base in the given time zone with the
     * optional time_duration added. ','line_number':308,'multiline':True]['text':'! Returns name of associated time zone or "Coordinated Universal Time".','line_number':316,'multiline':False]['text':'! Optional bool parameter will return time zone as an offset
     * (ie "+07:00" extended iso format). Empty string is returned for
     * classes that do not use a time_zone ','line_number':317,'multiline':True]['text':'! Returns abbreviation of associated time zone or "UTC".','line_number':350,'multiline':False]['text':'! Optional bool parameter will return time zone as an offset
     * (ie "+0700" iso format). Empty string is returned for classes
     * that do not use a time_zone ','line_number':351,'multiline':True]['text':'! returns a posix_time_zone string for the associated time_zone. If no time_zone, "UTC+00" is returned.','line_number':385,'multiline':False]['text':'! Equality comparison operator','line_number':394,'multiline':False]['text':'bool operator==(const date_time::base_time<boost::posix_time::ptime,boost::posix_time::posix_time_system>& rhs) const
    { // fails due to rhs.time_ being protected
      return date_time::base_time<boost::posix_time::ptime,boost::posix_time::posix_time_system>::operator==(rhs);
      //return this->time_ == rhs.time_;
    }','line_number':395,'multiline':True]['text':'! Equality comparison operator','line_number':400,'multiline':False]['text':'! Non-Equality comparison operator','line_number':405,'multiline':False]['text':'! Less than comparison operator','line_number':410,'multiline':False]['text':'! Less than or equal to comparison operator','line_number':415,'multiline':False]['text':'! Greater than comparison operator','line_number':420,'multiline':False]['text':'! Greater than or equal to comparison operator','line_number':425,'multiline':False]['text':'! Local_date_time + date_duration','line_number':431,'multiline':False]['text':'! Local_date_time += date_duration','line_number':436,'multiline':False]['text':'! Local_date_time - date_duration','line_number':442,'multiline':False]['text':'! Local_date_time -= date_duration','line_number':447,'multiline':False]['text':'! Local_date_time + time_duration','line_number':453,'multiline':False]['text':'! Local_date_time += time_duration','line_number':458,'multiline':False]['text':'! Local_date_time - time_duration','line_number':464,'multiline':False]['text':'! Local_date_time -= time_duration','line_number':469,'multiline':False]['text':'! local_date_time -= local_date_time --> time_duration_type','line_number':475,'multiline':False]['text':'bool is_dst_;','line_number':482,'multiline':False]['text':'! Adjust the passed in time to UTC?
     ','line_number':484,'multiline':True]['text':' else no adjust','line_number':493,'multiline':False]['text':'! Simple formatting code -- todo remove this?
     ','line_number':499,'multiline':True]['text':' a negative duration is represented as "-[h]h:mm"','line_number':506,'multiline':False]['text':' we require two digits for the hour. A positive duration','line_number':507,'multiline':False]['text':' with the %H flag will always give two digits','line_number':508,'multiline':False]['text':'!Use the default parameters to define local_date_time','line_number':523,'multiline':False]