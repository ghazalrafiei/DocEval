['text':'  (C) Copyright Steve Cleary, Beman Dawes, Howard Hinnant & John Maddock 2000.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':2,'multiline':False]['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':6,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' Helper macros for builtin compiler support.','line_number':20,'multiline':False]['text':' If your compiler has builtin support for any of the following','line_number':21,'multiline':False]['text':' traits concepts, then redefine the appropriate macros to pick','line_number':22,'multiline':False]['text':' up on the compiler support:','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' (these should largely ignore cv-qualifiers)','line_number':25,'multiline':False]['text':' BOOST_IS_UNION(T) should evaluate to true if T is a union type','line_number':26,'multiline':False]['text':' BOOST_IS_POD(T) should evaluate to true if T is a POD type','line_number':27,'multiline':False]['text':' BOOST_IS_EMPTY(T) should evaluate to true if T is an empty class type (and not a union)','line_number':28,'multiline':False]['text':' BOOST_HAS_TRIVIAL_CONSTRUCTOR(T) should evaluate to true if "T x;" has no effect','line_number':29,'multiline':False]['text':' BOOST_HAS_TRIVIAL_COPY(T) should evaluate to true if T(t) <==> memcpy','line_number':30,'multiline':False]['text':' BOOST_HAS_TRIVIAL_MOVE_CONSTRUCTOR(T) should evaluate to true if T(boost::move(t)) <==> memcpy','line_number':31,'multiline':False]['text':' BOOST_HAS_TRIVIAL_ASSIGN(T) should evaluate to true if t = u <==> memcpy','line_number':32,'multiline':False]['text':' BOOST_HAS_TRIVIAL_MOVE_ASSIGN(T) should evaluate to true if t = boost::move(u) <==> memcpy','line_number':33,'multiline':False]['text':' BOOST_HAS_TRIVIAL_DESTRUCTOR(T) should evaluate to true if ~T() has no effect','line_number':34,'multiline':False]['text':' BOOST_HAS_NOTHROW_CONSTRUCTOR(T) should evaluate to true if "T x;" can not throw','line_number':35,'multiline':False]['text':' BOOST_HAS_NOTHROW_COPY(T) should evaluate to true if T(t) can not throw','line_number':36,'multiline':False]['text':' BOOST_HAS_NOTHROW_ASSIGN(T) should evaluate to true if t = u can not throw','line_number':37,'multiline':False]['text':' BOOST_HAS_VIRTUAL_DESTRUCTOR(T) should evaluate to true T has a virtual destructor','line_number':38,'multiline':False]['text':' BOOST_IS_NOTHROW_MOVE_CONSTRUCT(T) should evaluate to true if T has a non-throwing move constructor.','line_number':39,'multiline':False]['text':' BOOST_IS_NOTHROW_MOVE_ASSIGN(T) should evaluate to true if T has a non-throwing move assignment operator.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' The following can also be defined: when detected our implementation is greatly simplified.','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' BOOST_IS_ABSTRACT(T) true if T is an abstract type','line_number':44,'multiline':False]['text':' BOOST_IS_BASE_OF(T,U) true if T is a base class of U','line_number':45,'multiline':False]['text':' BOOST_IS_CLASS(T) true if T is a class type (and not a union)','line_number':46,'multiline':False]['text':' BOOST_IS_CONVERTIBLE(T,U) true if T is convertible to U','line_number':47,'multiline':False]['text':' BOOST_IS_ENUM(T) true is T is an enum','line_number':48,'multiline':False]['text':' BOOST_IS_POLYMORPHIC(T) true if T is a polymorphic type','line_number':49,'multiline':False]['text':' BOOST_ALIGNMENT_OF(T) should evaluate to the alignment requirements of type T.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' define BOOST_TT_DISABLE_INTRINSICS to prevent any intrinsics being used (mostly used when testing)','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' Hook into SGI's __type_traits class, this will pick up user supplied','line_number':56,'multiline':False]['text':' specializations as well as SGI - compiler supplied specializations.','line_number':57,'multiline':False]['text':' There are two different versions of type_traits.h on NetBSD on Spark','line_number':60,'multiline':False]['text':' use an implicit include via algorithm instead, to make sure we get','line_number':61,'multiline':False]['text':' the same version as the std lib:','line_number':62,'multiline':False]['text':' Metrowerks compiler is acquiring intrinsic type traits support','line_number':79,'multiline':False]['text':' post version 8.  We hook into the published interface to pick up','line_number':80,'multiline':False]['text':' user defined specializations as well as compiler intrinsics as ','line_number':81,'multiline':False]['text':' and when they become available:','line_number':82,'multiline':False]['text':'','line_number':95,'multiline':False]['text':' Note that even though these intrinsics rely on other type traits classes','line_number':96,'multiline':False]['text':' we do not #include those here as it produces cyclic dependencies and','line_number':97,'multiline':False]['text':' can cause the intrinsics to not even be used at all!','line_number':98,'multiline':False]['text':'','line_number':99,'multiline':False]['text':'  This one fails if the default alignment has been changed with /Zp:','line_number':122,'multiline':False]['text':'  #   define BOOST_ALIGNMENT_OF(T) __alignof(T)','line_number':123,'multiline':False]['text':'  This one doesn't quite always do the right thing on older VC++ versions','line_number':133,'multiline':False]['text':'  we really need it when the final keyword is supported though:','line_number':134,'multiline':False]['text':' For Digital Mars C++, www.digitalmars.com','line_number':148,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' Note that these intrinsics are disabled for the CUDA meta-compiler as it appears','line_number':165,'multiline':False]['text':' to not support them, even though the underlying clang compiler does so.','line_number':166,'multiline':False]['text':' This is a rubbish fix as it basically stops type traits from working correctly, ','line_number':167,'multiline':False]['text':' but maybe the best we can do for now.  See https://svn.boost.org/trac/boost/ticket/10694','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' Note that even though these intrinsics rely on other type traits classes','line_number':171,'multiline':False]['text':' we do not #include those here as it produces cyclic dependencies and','line_number':172,'multiline':False]['text':' can cause the intrinsics to not even be used at all!','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' GCC sometimes lies about alignment requirements','line_number':237,'multiline':False]['text':' of type double on 32-bit unix platforms, use the','line_number':238,'multiline':False]['text':' old implementation instead in that case:','line_number':239,'multiline':False]['text':'','line_number':250,'multiline':False]['text':' Note that even though these intrinsics rely on other type traits classes','line_number':251,'multiline':False]['text':' we do not #include those here as it produces cyclic dependencies and','line_number':252,'multiline':False]['text':' can cause the intrinsics to not even be used at all!','line_number':253,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' GCC sometimes lies about alignment requirements','line_number':291,'multiline':False]['text':' of type double on 32-bit unix platforms, use the','line_number':292,'multiline':False]['text':' old implementation instead in that case:','line_number':293,'multiline':False]['text':'  __oracle_has_nothrow_copy appears to behave the same as __oracle_has_nothrow_assign, disabled for now:','line_number':317,'multiline':False]['text':'#   define BOOST_HAS_NOTHROW_COPY(T) ((__oracle_has_nothrow_copy(T) || __oracle_has_trivial_copy(T) || __oracle_is_trivial(T)) && !is_volatile<T>::value && !is_reference<T>::value && is_copy_constructible<T>::value)','line_number':318,'multiline':False]['text':'#   define BOOST_IS_BASE_OF(T,U) (__is_base_of(T,U) && !is_same<T,U>::value)','line_number':323,'multiline':False]['text':' BOOST_TT_DISABLE_INTRINSICS','line_number':388,'multiline':False]['text':' BOOST_TT_INTRINSICS_HPP_INCLUDED','line_number':390,'multiline':False]