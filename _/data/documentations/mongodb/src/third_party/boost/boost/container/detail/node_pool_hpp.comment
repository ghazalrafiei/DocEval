['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'!Pooled memory allocator using single segregated storage. Includes','line_number':37,'multiline':False]['text':'!a reference count but the class does not delete itself, this is','line_number':38,'multiline':False]['text':'!responsibility of user classes. Node size (NodeSize) and the number of','line_number':39,'multiline':False]['text':'!nodes allocated per block (NodesPerBlock) are known at compile time','line_number':40,'multiline':False]['text':'Inherit from the implementation to avoid template bloat','line_number':43,'multiline':False]['text':'Non-copyable','line_number':49,'multiline':False]['text':'!Constructor from a segment manager. Never throws','line_number':57,'multiline':False]['text':'!Constructor from a segment manager. Never throws','line_number':77,'multiline':False]['text':'!Destructor. Deallocates all allocated blocks. Never throws','line_number':81,'multiline':False]['text':'!Allocates array of count elements. Can throw bad_alloc','line_number':85,'multiline':False]['text':'-----------------------','line_number':88,'multiline':False]['text':'-----------------------','line_number':90,'multiline':False]['text':'!Deallocates an array pointed by ptr. Never throws','line_number':94,'multiline':False]['text':'-----------------------','line_number':97,'multiline':False]['text':'-----------------------','line_number':99,'multiline':False]['text':'!Allocates a singly linked list of n nodes ending in null pointer.','line_number':103,'multiline':False]['text':'!can throw bad_alloc','line_number':104,'multiline':False]['text':'-----------------------','line_number':107,'multiline':False]['text':'-----------------------','line_number':109,'multiline':False]['text':'-----------------------','line_number':115,'multiline':False]['text':'-----------------------','line_number':117,'multiline':False]['text':'!Deallocates all the free blocks of memory. Never throws','line_number':121,'multiline':False]['text':'-----------------------','line_number':124,'multiline':False]['text':'-----------------------','line_number':126,'multiline':False]['text':'!Deallocates all blocks. Never throws','line_number':130,'multiline':False]['text':'-----------------------','line_number':133,'multiline':False]['text':'-----------------------','line_number':135,'multiline':False]['text':'-----------------------','line_number':141,'multiline':False]['text':'-----------------------','line_number':143,'multiline':False]['text':'namespace dtl {','line_number':151,'multiline':False]['text':'namespace container {','line_number':152,'multiline':False]['text':'namespace boost {','line_number':153,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DETAIL_NODE_POOL_HPP','line_number':157,'multiline':False]