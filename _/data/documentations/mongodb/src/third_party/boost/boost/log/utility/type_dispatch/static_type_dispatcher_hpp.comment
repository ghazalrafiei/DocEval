['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   static_type_dispatcher.hpp
 * \author Andrey Semashev
 * \date   15.04.2007
 *
 * The header contains implementation of a compile-time type dispatcher.
 ','line_number':7,'multiline':True]['text':'! Ordering predicate for type dispatching map','line_number':48,'multiline':False]['text':'! Dispatching map filler','line_number':59,'multiline':False]['text':'! A base class for a dispatcher that supports a sequence of types','line_number':97,'multiline':False]['text':'! Dispatching map element type','line_number':102,'multiline':False]['text':'! Dispatching map','line_number':106,'multiline':False]['text':'! Dispatching map size','line_number':108,'multiline':False]['text':'! Pointer to the receiver function','line_number':110,'multiline':False]['text':'! Initializing constructor','line_number':114,'multiline':False]['text':'! The get_callback method implementation','line_number':124,'multiline':False]['text':'  Copying and assignment closed','line_number':144,'multiline':False]['text':'! A dispatcher that supports a sequence of types','line_number':149,'multiline':False]['text':'! Type sequence of the supported types','line_number':155,'multiline':False]['text':'! The dispatching map','line_number':159,'multiline':False]['text':'!
     * Constructor. Initializes the dispatcher internals.
     ','line_number':166,'multiline':True]['text':'! The method returns the dispatching map instance','line_number':176,'multiline':False]['text':'  Copying and assignment closed','line_number':200,'multiline':False]['text':'! A base class for a single-type dispatcher','line_number':205,'multiline':False]['text':'! The type to match against','line_number':210,'multiline':False]['text':'! A callback for the supported type','line_number':212,'multiline':False]['text':'! Initializing constructor','line_number':216,'multiline':False]['text':'! The get_callback method implementation','line_number':225,'multiline':False]['text':'  Copying and assignment closed','line_number':235,'multiline':False]['text':'! A simple dispatcher that only supports one type','line_number':240,'multiline':False]['text':'! Constructor','line_number':249,'multiline':False]['text':'  Copying and assignment closed','line_number':256,'multiline':False]['text':' namespace aux','line_number':261,'multiline':False]['text':'!
 * \brief A static type dispatcher class
 *
 * The type dispatcher can be used to pass objects of arbitrary types from one
 * component to another. With regard to the library, the type dispatcher
 * can be used to extract attribute values.
 *
 * Static type dispatchers allow to specify one or several supported types at compile
 * time.
 ','line_number':263,'multiline':True]['text':'! Base type','line_number':285,'multiline':False]['text':'!
     * Constructor. Initializes the dispatcher internals.
     *
     * The \a receiver object is not copied inside the dispatcher, but references to
     * it may be kept by the dispatcher after construction. The receiver object must remain
     * valid until the dispatcher is destroyed.
     *
     * \param receiver Unary function object that will be called on a dispatched value. The receiver
     *                 must be callable with an argument of any of the supported types of the dispatcher.
     ','line_number':293,'multiline':True]['text':'  Copying and assignment prohibited','line_number':309,'multiline':False]['text':' namespace log','line_number':314,'multiline':False]['text':' namespace boost','line_number':316,'multiline':False]['text':' BOOST_LOG_STATIC_TYPE_DISPATCHER_HPP_INCLUDED_','line_number':320,'multiline':False]