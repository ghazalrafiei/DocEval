['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/int_sizes.hpp
 *
 * This header defines macros for testing buitin integer type sizes
 ','line_number':8,'multiline':True]['text':' GCC and compatible compilers define internal macros with builtin type traits','line_number':23,'multiline':False]['text':' Try to deduce sizes from limits','line_number':53,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_SHORT)','line_number':72,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_INT)','line_number':84,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG)','line_number':96,'multiline':False]['text':' HP-UX's value of ULONG_LONG_MAX is unusable in preprocessor expressions','line_number':99,'multiline':False]['text':' The list of the non-standard macros (the ones except ULLONG_MAX) is taken from cstdint.hpp','line_number':103,'multiline':False]['text':' strangely enough, this one seems to be holding the limit for the unsigned integer','line_number':110,'multiline':False]['text':' defined(__hpux)','line_number':124,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LLONG)','line_number':125,'multiline':False]['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_POINTER) && defined(UINTPTR_MAX)','line_number':135,'multiline':False]['text':' MSVC 7.1 and MSVC 8 (arm) define WCHAR_MAX to a value not suitable for constant expressions','line_number':145,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_INT_SIZES_HPP_INCLUDED_','line_number':164,'multiline':False]