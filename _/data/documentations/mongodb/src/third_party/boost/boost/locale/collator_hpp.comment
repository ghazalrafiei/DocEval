['text':'','line_number':1,'multiline':False]['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'/','line_number':24,'multiline':False]['text':'/ \defgroup collation Collation ','line_number':25,'multiline':False]['text':'/','line_number':26,'multiline':False]['text':'/ This module introduces collation related classes','line_number':27,'multiline':False]['text':'/','line_number':28,'multiline':False]['text':'/ @{','line_number':29,'multiline':False]['text':'/','line_number':31,'multiline':False]['text':'/ \brief a base class that includes collation level flags','line_number':32,'multiline':False]['text':'/','line_number':33,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ Unicode collation level types','line_number':38,'multiline':False]['text':'/','line_number':39,'multiline':False]['text':'/< 1st collation level: base letters','line_number':41,'multiline':False]['text':'/< 2nd collation level: letters and accents','line_number':42,'multiline':False]['text':'/< 3rd collation level: letters, accents and case','line_number':43,'multiline':False]['text':'/< 4th collation level: letters, accents, case and punctuation','line_number':44,'multiline':False]['text':'/< identical collation level: include code-point comparison','line_number':45,'multiline':False]['text':'/','line_number':49,'multiline':False]['text':'/ \brief Collation facet. ','line_number':50,'multiline':False]['text':'/','line_number':51,'multiline':False]['text':'/ It reimplements standard C++ std::collate,','line_number':52,'multiline':False]['text':'/ allowing usage of std::locale for direct string comparison','line_number':53,'multiline':False]['text':'/','line_number':54,'multiline':False]['text':'/','line_number':61,'multiline':False]['text':'/ Type of the underlying character','line_number':62,'multiline':False]['text':'/','line_number':63,'multiline':False]['text':'/','line_number':65,'multiline':False]['text':'/ Type of string used with this facet','line_number':66,'multiline':False]['text':'/','line_number':67,'multiline':False]['text':'/','line_number':71,'multiline':False]['text':'/ Compare two strings in rage [b1,e1),  [b2,e2) according using a collation level \a level. Calls do_compare','line_number':72,'multiline':False]['text':'/','line_number':73,'multiline':False]['text':'/ Returns -1 if the first of the two strings sorts before the seconds, returns 1 if sorts after and 0 if','line_number':74,'multiline':False]['text':'/ they considered equal.','line_number':75,'multiline':False]['text':'/','line_number':76,'multiline':False]['text':'/','line_number':83,'multiline':False]['text':'/ Create a binary string that can be compared to other in order to get collation order. The string is created','line_number':84,'multiline':False]['text':'/ for text in range [b,e). It is useful for collation of multiple strings for text.','line_number':85,'multiline':False]['text':'/','line_number':86,'multiline':False]['text':'/ The transformation follows these rules:','line_number':87,'multiline':False]['text':'/ \code','line_number':88,'multiline':False]['text':'/   compare(level,b1,e1,b2,e2) == sign( transform(level,b1,e1).compare(transform(level,b2,e2)) );','line_number':89,'multiline':False]['text':'/ \endcode','line_number':90,'multiline':False]['text':'/','line_number':91,'multiline':False]['text':'/ Calls do_transform','line_number':92,'multiline':False]['text':'/','line_number':93,'multiline':False]['text':'/','line_number':99,'multiline':False]['text':'/ Calculate a hash of a text in range [b,e). The value can be used for collation sensitive string comparison.','line_number':100,'multiline':False]['text':'/','line_number':101,'multiline':False]['text':'/ If compare(level,b1,e1,b2,e2) == 0 then hash(level,b1,e1) == hash(level,b2,e2)','line_number':102,'multiline':False]['text':'/','line_number':103,'multiline':False]['text':'/ Calls do_hash','line_number':104,'multiline':False]['text':'/','line_number':105,'multiline':False]['text':'/','line_number':111,'multiline':False]['text':'/ Compare two strings \a l and \a r using collation level \a level','line_number':112,'multiline':False]['text':'/','line_number':113,'multiline':False]['text':'/ Returns -1 if the first of the two strings sorts before the seconds, returns 1 if sorts after and 0 if','line_number':114,'multiline':False]['text':'/ they considered equal.','line_number':115,'multiline':False]['text':'/','line_number':116,'multiline':False]['text':'/','line_number':117,'multiline':False]['text':'/','line_number':123,'multiline':False]['text':'/ Calculate a hash that can be used for collation sensitive string comparison of a string \a s','line_number':124,'multiline':False]['text':'/','line_number':125,'multiline':False]['text':'/ If compare(level,s1,s2) == 0 then hash(level,s1) == hash(level,s2)','line_number':126,'multiline':False]['text':'/','line_number':127,'multiline':False]['text':'/','line_number':133,'multiline':False]['text':'/ Create a binary string from string \a s, that can be compared to other, useful for collation of multiple','line_number':134,'multiline':False]['text':'/ strings.','line_number':135,'multiline':False]['text':'/','line_number':136,'multiline':False]['text':'/ The transformation follows these rules:','line_number':137,'multiline':False]['text':'/ \code','line_number':138,'multiline':False]['text':'/   compare(level,s1,s2) == sign( transform(level,s1).compare(transform(level,s2)) );','line_number':139,'multiline':False]['text':'/ \endcode','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/','line_number':149,'multiline':False]['text':'/ constructor of the collator object','line_number':150,'multiline':False]['text':'/','line_number':151,'multiline':False]['text':'/','line_number':160,'multiline':False]['text':'/ This function is used to override default collation function that does not take in account collation level.','line_number':161,'multiline':False]['text':'/ Uses primary level','line_number':162,'multiline':False]['text':'/','line_number':163,'multiline':False]['text':'/','line_number':169,'multiline':False]['text':'/ This function is used to override default collation function that does not take in account collation level.','line_number':170,'multiline':False]['text':'/ Uses primary level','line_number':171,'multiline':False]['text':'/','line_number':172,'multiline':False]['text':'/','line_number':177,'multiline':False]['text':'/ This function is used to override default collation function that does not take in account collation level.','line_number':178,'multiline':False]['text':'/ Uses primary level','line_number':179,'multiline':False]['text':'/','line_number':180,'multiline':False]['text':'/','line_number':186,'multiline':False]['text':'/ Actual function that performs comparison between the strings. For details see compare member function. Can be overridden. ','line_number':187,'multiline':False]['text':'/','line_number':188,'multiline':False]['text':'/','line_number':192,'multiline':False]['text':'/ Actual function that performs transformation. For details see transform member function. Can be overridden. ','line_number':193,'multiline':False]['text':'/','line_number':194,'multiline':False]['text':'/','line_number':196,'multiline':False]['text':'/ Actual function that calculates hash. For details see hash member function. Can be overridden. ','line_number':197,'multiline':False]['text':'/','line_number':198,'multiline':False]['text':'/','line_number':204,'multiline':False]['text':'/ \brief This class can be used in STL algorithms and containers for comparison of strings','line_number':205,'multiline':False]['text':'/ with a level other than primary','line_number':206,'multiline':False]['text':'/','line_number':207,'multiline':False]['text':'/ For example:','line_number':208,'multiline':False]['text':'/','line_number':209,'multiline':False]['text':'/ \code','line_number':210,'multiline':False]['text':'/  std::map<std::string,std::string,comparator<char,collator_base::secondary> > data;','line_number':211,'multiline':False]['text':'/ \endcode','line_number':212,'multiline':False]['text':'/ ','line_number':213,'multiline':False]['text':'/ Would create a map the keys of which are sorted using secondary collation level','line_number':214,'multiline':False]['text':'/','line_number':215,'multiline':False]['text':'/','line_number':220,'multiline':False]['text':'/ Create a comparator class for locale \a l and with collation leval \a level','line_number':221,'multiline':False]['text':'/','line_number':222,'multiline':False]['text':'/ \note throws std::bad_cast if l does not have \ref collator facet installed','line_number':223,'multiline':False]['text':'/ ','line_number':224,'multiline':False]['text':'/','line_number':231,'multiline':False]['text':'/ Compare two strings -- equivalent to return left < right according to collation rules','line_number':232,'multiline':False]['text':'/','line_number':233,'multiline':False]['text':'/','line_number':244,'multiline':False]['text':'/@}','line_number':245,'multiline':False]['text':'/','line_number':246,'multiline':False]['text':' locale','line_number':248,'multiline':False]['text':' boost','line_number':249,'multiline':False]['text':'/','line_number':257,'multiline':False]['text':'/ \example collate.cpp','line_number':258,'multiline':False]['text':'/ Example of using collation functions','line_number':259,'multiline':False]['text':'/','line_number':260,'multiline':False]['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':261,'multiline':False]