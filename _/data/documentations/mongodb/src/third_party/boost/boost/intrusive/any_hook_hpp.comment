['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2006-2013','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'! Helper metafunction to define a \c \c any_base_hook that yields to the same','line_number':31,'multiline':False]['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':32,'multiline':False]['text':'/ @cond','line_number':40,'multiline':False]['text':'/ @endcond','line_number':57,'multiline':False]['text':'! Derive a class from this hook in order to store objects of that class','line_number':61,'multiline':False]['text':'! in an intrusive container.','line_number':62,'multiline':False]['text':'!','line_number':63,'multiline':False]['text':'! The hook admits the following options: \c tag<>, \c void_pointer<> and','line_number':64,'multiline':False]['text':'! \c link_mode<>.','line_number':65,'multiline':False]['text':'!','line_number':66,'multiline':False]['text':'! \c tag<> defines a tag to identify the node.','line_number':67,'multiline':False]['text':'! The same tag value can be used in different classes, but if a class is','line_number':68,'multiline':False]['text':'! derived from more than one \c any_base_hook, then each \c any_base_hook needs its','line_number':69,'multiline':False]['text':'! unique tag.','line_number':70,'multiline':False]['text':'!','line_number':71,'multiline':False]['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link, \c safe_link).','line_number':72,'multiline':False]['text':'!','line_number':73,'multiline':False]['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':74,'multiline':False]['text':'! and the container configured to use this hook.','line_number':75,'multiline':False]['text':'! <b>Effects</b>: If link_mode is or \c safe_link','line_number':92,'multiline':False]['text':'!   initializes the node to an unlinked state.','line_number':93,'multiline':False]['text':'!','line_number':94,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':95,'multiline':False]['text':'! <b>Effects</b>: If link_mode is or \c safe_link','line_number':98,'multiline':False]['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':99,'multiline':False]['text':'!','line_number':100,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':101,'multiline':False]['text':'!','line_number':102,'multiline':False]['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':103,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':104,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':105,'multiline':False]['text':'!   move-semantics.','line_number':106,'multiline':False]['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':109,'multiline':False]['text':'!','line_number':110,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':111,'multiline':False]['text':'!','line_number':112,'multiline':False]['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':113,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':114,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':115,'multiline':False]['text':'!   move-semantics.','line_number':116,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':119,'multiline':False]['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':120,'multiline':False]['text':'!   object is stored in a container an assertion is raised.','line_number':121,'multiline':False]['text':'!','line_number':122,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':123,'multiline':False]['text':'! <b>Precondition</b>: link_mode must be \c safe_link.','line_number':126,'multiline':False]['text':'!','line_number':127,'multiline':False]['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':128,'multiline':False]['text':'!   otherwise. This function can be used to test whether \c container::iterator_to','line_number':129,'multiline':False]['text':'!   will return a valid iterator.','line_number':130,'multiline':False]['text':'!','line_number':131,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':132,'multiline':False]['text':'! Helper metafunction to define a \c \c any_member_hook that yields to the same','line_number':137,'multiline':False]['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':138,'multiline':False]['text':'/ @cond','line_number':146,'multiline':False]['text':'/ @endcond','line_number':163,'multiline':False]['text':'! Store this hook in a class to be inserted','line_number':167,'multiline':False]['text':'! in an intrusive container.','line_number':168,'multiline':False]['text':'!','line_number':169,'multiline':False]['text':'! The hook admits the following options: \c void_pointer<> and','line_number':170,'multiline':False]['text':'! \c link_mode<>.','line_number':171,'multiline':False]['text':'!','line_number':172,'multiline':False]['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link or \c safe_link).','line_number':173,'multiline':False]['text':'!','line_number':174,'multiline':False]['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':175,'multiline':False]['text':'! and the container configured to use this hook.','line_number':176,'multiline':False]['text':'! <b>Effects</b>: If link_mode is or \c safe_link','line_number':193,'multiline':False]['text':'!   initializes the node to an unlinked state.','line_number':194,'multiline':False]['text':'!','line_number':195,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':196,'multiline':False]['text':'! <b>Effects</b>: If link_mode is or \c safe_link','line_number':199,'multiline':False]['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':200,'multiline':False]['text':'!','line_number':201,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':202,'multiline':False]['text':'!','line_number':203,'multiline':False]['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':204,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':205,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':206,'multiline':False]['text':'!   move-semantics.','line_number':207,'multiline':False]['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':210,'multiline':False]['text':'!','line_number':211,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':212,'multiline':False]['text':'!','line_number':213,'multiline':False]['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':214,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':215,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':216,'multiline':False]['text':'!   move-semantics.','line_number':217,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':220,'multiline':False]['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':221,'multiline':False]['text':'!   object is stored in a container an assertion is raised.','line_number':222,'multiline':False]['text':'!','line_number':223,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':224,'multiline':False]['text':'! <b>Precondition</b>: link_mode must be \c safe_link.','line_number':227,'multiline':False]['text':'!','line_number':228,'multiline':False]['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':229,'multiline':False]['text':'!   otherwise. This function can be used to test whether \c container::iterator_to','line_number':230,'multiline':False]['text':'!   will return a valid iterator.','line_number':231,'multiline':False]['text':'!','line_number':232,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':233,'multiline':False]['text':'/ @cond','line_number':238,'multiline':False]['text':'!This option setter specifies that the container','line_number':244,'multiline':False]['text':'!must use the specified base hook','line_number':245,'multiline':False]['text':'proto_value_traits::hooktags::is_base_hook is used by get_value_traits','line_number':256,'multiline':False]['text':'to detect base hooks, so mark it in case BasicHook has it.','line_number':257,'multiline':False]['text':'namespace detail{','line_number':274,'multiline':False]['text':'/ @endcond','line_number':276,'multiline':False]['text':'!This option setter specifies that','line_number':278,'multiline':False]['text':'!any hook should behave as an slist hook','line_number':279,'multiline':False]['text':'/ @cond','line_number':282,'multiline':False]['text':'/ @endcond','line_number':284,'multiline':False]['text':'!This option setter specifies that','line_number':287,'multiline':False]['text':'!any hook should behave as an list hook','line_number':288,'multiline':False]['text':'/ @cond','line_number':291,'multiline':False]['text':'/ @endcond','line_number':293,'multiline':False]['text':'!This option setter specifies that','line_number':296,'multiline':False]['text':'!any hook should behave as a set hook','line_number':297,'multiline':False]['text':'/ @cond','line_number':300,'multiline':False]['text':'/ @endcond','line_number':302,'multiline':False]['text':'!This option setter specifies that','line_number':305,'multiline':False]['text':'!any hook should behave as an avl_set hook','line_number':306,'multiline':False]['text':'/ @cond','line_number':309,'multiline':False]['text':'/ @endcond','line_number':311,'multiline':False]['text':'!This option setter specifies that any','line_number':314,'multiline':False]['text':'!hook should behave as a bs_set hook','line_number':315,'multiline':False]['text':'/ @cond','line_number':318,'multiline':False]['text':'/ @endcond','line_number':320,'multiline':False]['text':'!This option setter specifies that any hook','line_number':323,'multiline':False]['text':'!should behave as an unordered set hook','line_number':324,'multiline':False]['text':'/ @cond','line_number':327,'multiline':False]['text':'/ @endcond','line_number':329,'multiline':False]['text':'namespace intrusive','line_number':333,'multiline':False]['text':'namespace boost','line_number':334,'multiline':False]['text':'BOOST_INTRUSIVE_ANY_HOOK_HPP','line_number':338,'multiline':False]