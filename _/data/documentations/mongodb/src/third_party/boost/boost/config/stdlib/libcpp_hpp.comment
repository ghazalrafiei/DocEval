['text':'  (C) Copyright Christopher Jefferson 2011.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'  See http://www.boost.org for most recent version.','line_number':6,'multiline':False]['text':'  config for libc++','line_number':8,'multiline':False]['text':'  Might need more in here later.','line_number':9,'multiline':False]['text':' BOOST_NO_CXX11_ALLOCATOR should imply no support for the C++11','line_number':26,'multiline':False]['text':' allocator model. The C++11 allocator model requires a conforming','line_number':27,'multiline':False]['text':' std::allocator_traits which is only possible with C++11 template','line_number':28,'multiline':False]['text':' aliases since members rebind_alloc and rebind_traits require it.','line_number':29,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' These two appear to be somewhat useable in C++03 mode, there may be others...','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'#  define BOOST_NO_CXX11_HDR_ARRAY','line_number':39,'multiline':False]['text':'#  define BOOST_NO_CXX11_HDR_FORWARD_LIST','line_number':40,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' These appear to be unusable/incomplete so far:','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' libc++ uses a non-standard messages_base','line_number':81,'multiline':False]['text':' C++14 features','line_number':85,'multiline':False]['text':' C++17 features','line_number':90,'multiline':False]['text':' as_writable_bytes is missing.','line_number':119,'multiline':False]['text':' Invoke support is incomplete (no invoke_result)','line_number':124,'multiline':False]['text':' Invoke support is incomplete (no invoke_result)','line_number':128,'multiline':False]['text':' What's the correct version check here?','line_number':132,'multiline':False]['text':' This is a bit of a sledgehammer, because really it's just libc++abi that has no','line_number':137,'multiline':False]['text':' support for thread_local, leading to linker errors such as','line_number':138,'multiline':False]['text':' "undefined reference to `__cxa_thread_atexit'".  It is fixed in the','line_number':139,'multiline':False]['text':' most recent releases of libc++abi though...','line_number':140,'multiline':False]['text':' After libc++-dev is installed on Trusty, clang++-libc++ almost works,','line_number':145,'multiline':False]['text':' except uses of `thread_local` fail with undefined reference to','line_number':146,'multiline':False]['text':' `__cxa_thread_atexit`.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' clang's libc++abi provides an implementation by deferring to the glibc','line_number':149,'multiline':False]['text':' implementation, which may or may not be available (it is not on Trusty).','line_number':150,'multiline':False]['text':' clang 4's libc++abi will provide an implementation if one is not in glibc','line_number':151,'multiline':False]['text':' though, so thread local support should work with clang 4 and above as long','line_number':152,'multiline':False]['text':' as libc++abi is linked in.','line_number':153,'multiline':False]['text':'  --- end ---','line_number':171,'multiline':False]