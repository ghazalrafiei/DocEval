['text':' boost random/xor_combine.hpp header file
 *
 * Copyright Jens Maurer 2002
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 ','line_number':1,'multiline':True]['text':' for std::min and std::max','line_number':20,'multiline':False]['text':' uint32_t','line_number':23,'multiline':False]['text':'*
 * Instantiations of @c xor_combine_engine model a
 * \pseudo_random_number_generator.  To produce its output it
 * invokes each of the base generators, shifts their results
 * and xors them together.
 ','line_number':32,'multiline':True]['text':'*
     * Constructors a @c xor_combine_engine by default constructing
     * both base generators.
     ','line_number':50,'multiline':True]['text':'* Constructs a @c xor_combine by copying two base generators. ','line_number':56,'multiline':True]['text':'*
     * Constructs a @c xor_combine_engine, seeding both base generators
     * with @c v.
     *
     * @xmlwarning
     * The exact algorithm used by this function may change in the future.
     * @endxmlwarning
     ','line_number':60,'multiline':True]['text':'*
     * Constructs a @c xor_combine_engine, seeding both base generators
     * with values produced by @c seq.
     ','line_number':72,'multiline':True]['text':'*
     * Constructs a @c xor_combine_engine, seeding both base generators
     * with values from the iterator range [first, last) and changes
     * first to point to the element after the last one used.  If there
     * are not enough elements in the range to seed both generators,
     * throws @c std::invalid_argument.
     ','line_number':80,'multiline':True]['text':' advanced by other call ','line_number':88,'multiline':True]['text':'* Calls @c seed() for both base generators. ','line_number':90,'multiline':True]['text':'* @c seeds both base generators with @c v. ','line_number':93,'multiline':True]['text':'* @c seeds both base generators with values produced by @c seq. ','line_number':97,'multiline':True]['text':'*
     * seeds both base generators with values from the iterator
     * range [first, last) and changes first to point to the element
     * after the last one used.  If there are not enough elements in
     * the range to seed both generators, throws @c std::invalid_argument.
     ','line_number':101,'multiline':True]['text':'* Returns the first base generator. ','line_number':113,'multiline':True]['text':'* Returns the second base generator. ','line_number':116,'multiline':True]['text':'* Returns the next value of the generator. ','line_number':119,'multiline':True]['text':'* Fills a range with random values ','line_number':125,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':130,'multiline':True]['text':'* Returns the smallest value that the generator can produce. ','line_number':137,'multiline':True]['text':'* Returns the largest value that the generator can produce. ','line_number':140,'multiline':True]['text':'*
     * Writes the textual representation of the generator to a @c std::ostream.
     ','line_number':144,'multiline':True]['text':'*
     * Reads the textual representation of the generator from a @c std::istream.
     ','line_number':153,'multiline':True]['text':'* Returns true if the two generators will produce identical sequences. ','line_number':162,'multiline':True]['text':'* Returns true if the two generators will produce different sequences. ','line_number':166,'multiline':True]['text':'  A definition is required even for integral static constants','line_number':175,'multiline':False]['text':'/ \cond show_private','line_number':184,'multiline':False]['text':'* Provided for backwards compatibility. ','line_number':186,'multiline':True]['text':'/ \endcond','line_number':205,'multiline':False]['text':' namespace random','line_number':207,'multiline':False]['text':' namespace boost','line_number':208,'multiline':False]['text':' BOOST_RANDOM_XOR_COMBINE_HPP','line_number':210,'multiline':False]