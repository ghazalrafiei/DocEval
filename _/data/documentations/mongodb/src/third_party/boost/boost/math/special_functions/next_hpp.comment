['text':'  (C) Copyright John Maddock 2008.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' numeric_limits lies about denorms being present - particularly','line_number':88,'multiline':False]['text':' when this can be turned on or off at runtime, as is the case','line_number':89,'multiline':False]['text':' when using the SSE2 registers in DAZ or FTZ mode.','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' Returns the smallest value that won't generate denorms when','line_number':117,'multiline':False]['text':' we calculate the value of the least-significant-bit:','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'','line_number':213,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm, and the result','line_number':214,'multiline':False]['text':' would not be a denorm, then shift the input, increment, and shift back.','line_number':215,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':216,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' reduce exponent when val is a power of two, and negative.','line_number':222,'multiline':False]['text':' float_next_imp','line_number':227,'multiline':False]['text':'','line_number':228,'multiline':False]['text':' Special version for some base other than 2:','line_number':229,'multiline':False]['text':'','line_number':230,'multiline':False]['text':'','line_number':262,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm, and the result','line_number':263,'multiline':False]['text':' would not be a denorm, then shift the input, increment, and shift back.','line_number':264,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':265,'multiline':False]['text':'','line_number':266,'multiline':False]['text':' reduce exponent when val is a power of base, and negative.','line_number':272,'multiline':False]['text':' float_next_imp','line_number':277,'multiline':False]['text':' namespace detail','line_number':279,'multiline':False]['text':'def BOOST_MSVC','line_number':288,'multiline':False]['text':'','line_number':289,'multiline':False]['text':' We used to use ::_nextafter here, but doing so fails when using','line_number':290,'multiline':False]['text':' the SSE2 registers if the FTZ or DAZ flags are set, so use our own','line_number':291,'multiline':False]['text':' - albeit slower - code instead as at least that gives the correct answer.','line_number':292,'multiline':False]['text':'','line_number':293,'multiline':False]['text':'','line_number':347,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm, and the result','line_number':348,'multiline':False]['text':' would not be a denorm, then shift the input, increment, and shift back.','line_number':349,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':350,'multiline':False]['text':'','line_number':351,'multiline':False]['text':' when val is a power of two we must reduce the exponent','line_number':357,'multiline':False]['text':' float_prior_imp','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' Special version for bases other than 2:','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':'','line_number':397,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm, and the result','line_number':398,'multiline':False]['text':' would not be a denorm, then shift the input, increment, and shift back.','line_number':399,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':400,'multiline':False]['text':'','line_number':401,'multiline':False]['text':' when val is a power of two we must reduce the exponent','line_number':408,'multiline':False]['text':' float_prior_imp','line_number':413,'multiline':False]['text':' namespace detail','line_number':415,'multiline':False]['text':'def BOOST_MSVC','line_number':424,'multiline':False]['text':'','line_number':425,'multiline':False]['text':' We used to use ::_nextafter here, but doing so fails when using','line_number':426,'multiline':False]['text':' the SSE2 registers if the FTZ or DAZ flags are set, so use our own','line_number':427,'multiline':False]['text':' - albeit slower - code instead as at least that gives the correct answer.','line_number':428,'multiline':False]['text':'','line_number':429,'multiline':False]['text':'','line_number':472,'multiline':False]['text':' Error handling:','line_number':473,'multiline':False]['text':'','line_number':474,'multiline':False]['text':'','line_number':484,'multiline':False]['text':' Special cases:','line_number':485,'multiline':False]['text':'','line_number':486,'multiline':False]['text':'','line_number':498,'multiline':False]['text':' By the time we get here, both a and b must have the same sign, we want','line_number':499,'multiline':False]['text':' b > a and both positive for the following logic:','line_number':500,'multiline':False]['text':'','line_number':501,'multiline':False]['text':'','line_number':509,'multiline':False]['text':' Note that if a is a denorm then the usual formula fails','line_number':510,'multiline':False]['text':' because we actually have fewer than tools::digits<T>()','line_number':511,'multiline':False]['text':' significant bits in the representation:','line_number':512,'multiline':False]['text':'','line_number':513,'multiline':False]['text':'','line_number':517,'multiline':False]['text':' If b is greater than upper, then we *must* split the calculation','line_number':518,'multiline':False]['text':' as the size of the ULP changes with each order of magnitude change:','line_number':519,'multiline':False]['text':'','line_number':520,'multiline':False]['text':'','line_number':529,'multiline':False]['text':' Use compensated double-double addition to avoid rounding','line_number':530,'multiline':False]['text':' errors in the subtraction:','line_number':531,'multiline':False]['text':'','line_number':532,'multiline':False]['text':'','line_number':537,'multiline':False]['text':' Special case - either one end of the range is a denormal, or else the difference is.','line_number':538,'multiline':False]['text':' The regular code will fail if we're using the SSE2 registers on Intel and either','line_number':539,'multiline':False]['text':' the FTZ or DAZ flags are set.','line_number':540,'multiline':False]['text':'','line_number':541,'multiline':False]['text':'','line_number':564,'multiline':False]['text':' Result must be an integer:','line_number':565,'multiline':False]['text':'','line_number':566,'multiline':False]['text':' float_distance_imp','line_number':569,'multiline':False]['text':'','line_number':570,'multiline':False]['text':' Special versions for bases other than 2:','line_number':571,'multiline':False]['text':'','line_number':572,'multiline':False]['text':'','line_number':580,'multiline':False]['text':' Error handling:','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'','line_number':592,'multiline':False]['text':' Special cases:','line_number':593,'multiline':False]['text':'','line_number':594,'multiline':False]['text':'','line_number':606,'multiline':False]['text':' By the time we get here, both a and b must have the same sign, we want','line_number':607,'multiline':False]['text':' b > a and both positive for the following logic:','line_number':608,'multiline':False]['text':'','line_number':609,'multiline':False]['text':'','line_number':617,'multiline':False]['text':' Note that if a is a denorm then the usual formula fails','line_number':618,'multiline':False]['text':' because we actually have fewer than tools::digits<T>()','line_number':619,'multiline':False]['text':' significant bits in the representation:','line_number':620,'multiline':False]['text':'','line_number':621,'multiline':False]['text':'','line_number':625,'multiline':False]['text':' If b is greater than upper, then we *must* split the calculation','line_number':626,'multiline':False]['text':' as the size of the ULP changes with each order of magnitude change:','line_number':627,'multiline':False]['text':'','line_number':628,'multiline':False]['text':'','line_number':636,'multiline':False]['text':' Use compensated double-double addition to avoid rounding','line_number':637,'multiline':False]['text':' errors in the subtraction:','line_number':638,'multiline':False]['text':'','line_number':639,'multiline':False]['text':'','line_number':644,'multiline':False]['text':' Special case - either one end of the range is a denormal, or else the difference is.','line_number':645,'multiline':False]['text':' The regular code will fail if we're using the SSE2 registers on Intel and either','line_number':646,'multiline':False]['text':' the FTZ or DAZ flags are set.','line_number':647,'multiline':False]['text':'','line_number':648,'multiline':False]['text':'','line_number':671,'multiline':False]['text':' Result must be an integer:','line_number':672,'multiline':False]['text':'','line_number':673,'multiline':False]['text':' float_distance_imp','line_number':676,'multiline':False]['text':' namespace detail','line_number':678,'multiline':False]['text':'','line_number':683,'multiline':False]['text':' We allow ONE of a and b to be an integer type, otherwise both must be the SAME type.','line_number':684,'multiline':False]['text':'','line_number':685,'multiline':False]['text':'','line_number':726,'multiline':False]['text':' Error handling:','line_number':727,'multiline':False]['text':'','line_number':728,'multiline':False]['text':'','line_number':749,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm,','line_number':750,'multiline':False]['text':' implement in terms of float_next/float_prior.','line_number':751,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':752,'multiline':False]['text':'','line_number':753,'multiline':False]['text':' float_advance_imp','line_number':801,'multiline':False]['text':'','line_number':802,'multiline':False]['text':' Special version for bases other than 2:','line_number':803,'multiline':False]['text':'','line_number':804,'multiline':False]['text':'','line_number':812,'multiline':False]['text':' Error handling:','line_number':813,'multiline':False]['text':'','line_number':814,'multiline':False]['text':'','line_number':835,'multiline':False]['text':' Special case: if the value of the least significant bit is a denorm,','line_number':836,'multiline':False]['text':' implement in terms of float_next/float_prior.','line_number':837,'multiline':False]['text':' This avoids issues with the Intel SSE2 registers when the FTZ or DAZ flags are set.','line_number':838,'multiline':False]['text':'','line_number':839,'multiline':False]['text':'expon = 1 + ilogb(val);
   if((1 == scalbn(val, 1 + expon)) && (distance < 0))
      --expon;','line_number':878,'multiline':True]['text':' float_advance_imp','line_number':887,'multiline':False]['text':' namespace detail','line_number':889,'multiline':False]['text':' boost math namespaces','line_number':904,'multiline':False]['text':' BOOST_MATH_SPECIAL_NEXT_HPP','line_number':906,'multiline':False]