['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2007-2013','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'! Helper metafunction to define a \c bs_set_base_hook that yields to the same','line_number':31,'multiline':False]['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':32,'multiline':False]['text':'/ @cond','line_number':40,'multiline':False]['text':'/ @endcond','line_number':56,'multiline':False]['text':'! Derive a class from bs_set_base_hook in order to store objects in','line_number':60,'multiline':False]['text':'! in a bs_set/bs_multiset. bs_set_base_hook holds the data necessary to maintain','line_number':61,'multiline':False]['text':'! the bs_set/bs_multiset and provides an appropriate value_traits class for bs_set/bs_multiset.','line_number':62,'multiline':False]['text':'!','line_number':63,'multiline':False]['text':'! The hook admits the following options: \c tag<>, \c void_pointer<>,','line_number':64,'multiline':False]['text':'! \c link_mode<>.','line_number':65,'multiline':False]['text':'!','line_number':66,'multiline':False]['text':'! \c tag<> defines a tag to identify the node.','line_number':67,'multiline':False]['text':'! The same tag value can be used in different classes, but if a class is','line_number':68,'multiline':False]['text':'! derived from more than one \c list_base_hook, then each \c list_base_hook needs its','line_number':69,'multiline':False]['text':'! unique tag.','line_number':70,'multiline':False]['text':'!','line_number':71,'multiline':False]['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':72,'multiline':False]['text':'! and the container configured to use this hook.','line_number':73,'multiline':False]['text':'!','line_number':74,'multiline':False]['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link,','line_number':75,'multiline':False]['text':'! \c auto_unlink or \c safe_link).','line_number':76,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':94,'multiline':False]['text':'!   initializes the node to an unlinked state.','line_number':95,'multiline':False]['text':'!','line_number':96,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':97,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':100,'multiline':False]['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':101,'multiline':False]['text':'!','line_number':102,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':103,'multiline':False]['text':'!','line_number':104,'multiline':False]['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':105,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':106,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':107,'multiline':False]['text':'!   move-semantics.','line_number':108,'multiline':False]['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':111,'multiline':False]['text':'!','line_number':112,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':113,'multiline':False]['text':'!','line_number':114,'multiline':False]['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':115,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':116,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':117,'multiline':False]['text':'!   move-semantics.','line_number':118,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':121,'multiline':False]['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':122,'multiline':False]['text':'!   object is stored in a set an assertion is raised. If link_mode is','line_number':123,'multiline':False]['text':'!   \c auto_unlink and \c is_linked() is true, the node is unlinked.','line_number':124,'multiline':False]['text':'!','line_number':125,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':126,'multiline':False]['text':'! <b>Effects</b>: Swapping two nodes swaps the position of the elements','line_number':129,'multiline':False]['text':'!   related to those nodes in one or two containers. That is, if the node','line_number':130,'multiline':False]['text':'!   this is part of the element e1, the node x is part of the element e2','line_number':131,'multiline':False]['text':'!   and both elements are included in the containers s1 and s2, then after','line_number':132,'multiline':False]['text':'!   the swap-operation e1 is in s2 at the position of e2 and e2 is in s1','line_number':133,'multiline':False]['text':'!   at the position of e1. If one element is not in a container, then','line_number':134,'multiline':False]['text':'!   after the swap-operation the other element is not in a container.','line_number':135,'multiline':False]['text':'!   Iterators to e1 and e2 related to those nodes are invalidated.','line_number':136,'multiline':False]['text':'!','line_number':137,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':138,'multiline':False]['text':'!','line_number':139,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':140,'multiline':False]['text':'! <b>Precondition</b>: link_mode must be \c safe_link or \c auto_unlink.','line_number':143,'multiline':False]['text':'!','line_number':144,'multiline':False]['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':145,'multiline':False]['text':'!   otherwise. This function can be used to test whether \c set::iterator_to','line_number':146,'multiline':False]['text':'!   will return a valid iterator.','line_number':147,'multiline':False]['text':'!','line_number':148,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':149,'multiline':False]['text':'! <b>Effects</b>: Removes the node if it's inserted in a container.','line_number':152,'multiline':False]['text':'!   This function is only allowed if link_mode is \c auto_unlink.','line_number':153,'multiline':False]['text':'!','line_number':154,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':155,'multiline':False]['text':'! Helper metafunction to define a \c bs_set_member_hook that yields to the same','line_number':160,'multiline':False]['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':161,'multiline':False]['text':'/ @cond','line_number':169,'multiline':False]['text':'/ @endcond','line_number':186,'multiline':False]['text':'! Put a public data member bs_set_member_hook in order to store objects of this class in','line_number':190,'multiline':False]['text':'! a bs_set/bs_multiset. bs_set_member_hook holds the data necessary for maintaining the','line_number':191,'multiline':False]['text':'! bs_set/bs_multiset and provides an appropriate value_traits class for bs_set/bs_multiset.','line_number':192,'multiline':False]['text':'!','line_number':193,'multiline':False]['text':'! The hook admits the following options: \c void_pointer<>, \c link_mode<>.','line_number':194,'multiline':False]['text':'!','line_number':195,'multiline':False]['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':196,'multiline':False]['text':'! and the container configured to use this hook.','line_number':197,'multiline':False]['text':'!','line_number':198,'multiline':False]['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link,','line_number':199,'multiline':False]['text':'! \c auto_unlink or \c safe_link).','line_number':200,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':217,'multiline':False]['text':'!   initializes the node to an unlinked state.','line_number':218,'multiline':False]['text':'!','line_number':219,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':220,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':223,'multiline':False]['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':224,'multiline':False]['text':'!','line_number':225,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':226,'multiline':False]['text':'!','line_number':227,'multiline':False]['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':228,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':229,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':230,'multiline':False]['text':'!   move-semantics.','line_number':231,'multiline':False]['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':234,'multiline':False]['text':'!','line_number':235,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':236,'multiline':False]['text':'!','line_number':237,'multiline':False]['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':238,'multiline':False]['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':239,'multiline':False]['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':240,'multiline':False]['text':'!   move-semantics.','line_number':241,'multiline':False]['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':244,'multiline':False]['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':245,'multiline':False]['text':'!   object is stored in a set an assertion is raised. If link_mode is','line_number':246,'multiline':False]['text':'!   \c auto_unlink and \c is_linked() is true, the node is unlinked.','line_number':247,'multiline':False]['text':'!','line_number':248,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':249,'multiline':False]['text':'! <b>Effects</b>: Swapping two nodes swaps the position of the elements','line_number':252,'multiline':False]['text':'!   related to those nodes in one or two containers. That is, if the node','line_number':253,'multiline':False]['text':'!   this is part of the element e1, the node x is part of the element e2','line_number':254,'multiline':False]['text':'!   and both elements are included in the containers s1 and s2, then after','line_number':255,'multiline':False]['text':'!   the swap-operation e1 is in s2 at the position of e2 and e2 is in s1','line_number':256,'multiline':False]['text':'!   at the position of e1. If one element is not in a container, then','line_number':257,'multiline':False]['text':'!   after the swap-operation the other element is not in a container.','line_number':258,'multiline':False]['text':'!   Iterators to e1 and e2 related to those nodes are invalidated.','line_number':259,'multiline':False]['text':'!','line_number':260,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':261,'multiline':False]['text':'!','line_number':262,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':263,'multiline':False]['text':'! <b>Precondition</b>: link_mode must be \c safe_link or \c auto_unlink.','line_number':266,'multiline':False]['text':'!','line_number':267,'multiline':False]['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':268,'multiline':False]['text':'!   otherwise. This function can be used to test whether \c set::iterator_to','line_number':269,'multiline':False]['text':'!   will return a valid iterator.','line_number':270,'multiline':False]['text':'!','line_number':271,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':272,'multiline':False]['text':'! <b>Effects</b>: Removes the node if it's inserted in a container.','line_number':275,'multiline':False]['text':'!   This function is only allowed if link_mode is \c auto_unlink.','line_number':276,'multiline':False]['text':'!','line_number':277,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':278,'multiline':False]['text':'namespace intrusive','line_number':283,'multiline':False]['text':'namespace boost','line_number':284,'multiline':False]['text':'BOOST_INTRUSIVE_BS_SET_HOOK_HPP','line_number':288,'multiline':False]