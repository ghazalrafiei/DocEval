['text':'','line_number':1,'multiline':False]['text':' Copyright 2013-2022 Antony Polukhin.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':5,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' for std::basic_ostream','line_number':19,'multiline':False]['text':'/ \class type_index_facade','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ This class takes care about the comparison operators, hash functions and ','line_number':33,'multiline':False]['text':'/ ostream operators. Use this class as a public base class for defining new','line_number':34,'multiline':False]['text':'/ type_info-conforming classes.','line_number':35,'multiline':False]['text':'/','line_number':36,'multiline':False]['text':'/ \b Example:','line_number':37,'multiline':False]['text':'/ \code','line_number':38,'multiline':False]['text':'/ class stl_type_index: public type_index_facade<stl_type_index, std::type_info> ','line_number':39,'multiline':False]['text':'/ {','line_number':40,'multiline':False]['text':'/ public:','line_number':41,'multiline':False]['text':'/     typedef std::type_info type_info_t;','line_number':42,'multiline':False]['text':'/ private:','line_number':43,'multiline':False]['text':'/     const type_info_t* data_;','line_number':44,'multiline':False]['text':'/','line_number':45,'multiline':False]['text':'/ public:','line_number':46,'multiline':False]['text':'/     stl_type_index(const type_info_t& data) noexcept','line_number':47,'multiline':False]['text':'/         : data_(&data)','line_number':48,'multiline':False]['text':'/     {}','line_number':49,'multiline':False]['text':'/ // ...','line_number':50,'multiline':False]['text':'/ };','line_number':51,'multiline':False]['text':'/ \endcode','line_number':52,'multiline':False]['text':'/','line_number':53,'multiline':False]['text':'/ \tparam Derived Class derived from type_index_facade.','line_number':54,'multiline':False]['text':'/ \tparam TypeInfo Class that will be used as a base type_info class.','line_number':55,'multiline':False]['text':'/ \note Take a look at the protected methods. They are \b not \b defined in type_index_facade. ','line_number':56,'multiline':False]['text':'/ Protected member functions raw_name() \b must be defined in Derived class. All the other ','line_number':57,'multiline':False]['text':'/ methods are mandatory.','line_number':58,'multiline':False]['text':'/ \see 'Making a custom type_index' section for more information about ','line_number':59,'multiline':False]['text':'/ creating your own type_index using type_index_facade.','line_number':60,'multiline':False]['text':'/ @cond','line_number':64,'multiline':False]['text':'/ @endcond','line_number':68,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides \b must not throw.','line_number':72,'multiline':False]['text':'/ \return Name of a type. By default returns Derived::raw_name().','line_number':73,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides may throw.','line_number':78,'multiline':False]['text':'/ \return Human readable type name. By default returns Derived::name().','line_number':79,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides \b must not throw.','line_number':84,'multiline':False]['text':'/ \return True if two types are equal. By default compares types by raw_name().','line_number':85,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides \b must not throw.','line_number':92,'multiline':False]['text':'/ \return True if rhs is greater than this. By default compares types by raw_name().','line_number':93,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides \b must not throw.','line_number':100,'multiline':False]['text':'/ \return Hash code of a type. By default hashes types by raw_name().','line_number':101,'multiline':False]['text':'/ \note Derived class header \b must include <boost/container_hash/hash.hpp>, \b unless this function is redefined in','line_number':102,'multiline':False]['text':'/ Derived class to not use boost::hash_range().','line_number':103,'multiline':False]['text':'/ \b Override: This function \b must be redefined in Derived class. Overrides \b must not throw.','line_number':111,'multiline':False]['text':'/ \return Pointer to unredable/raw type name.','line_number':112,'multiline':False]['text':'/ \b Override: This function \b may be redefined in Derived class. Overrides \b must not throw.','line_number':115,'multiline':False]['text':'/ \return Const reference to underlying low level type_info_t.','line_number':116,'multiline':False]['text':'/ This is a factory method that is used to create instances of Derived classes.','line_number':119,'multiline':False]['text':'/ boost::typeindex::type_id() will call this method, if Derived has same type as boost::typeindex::type_index.','line_number':120,'multiline':False]['text':'/','line_number':121,'multiline':False]['text':'/ \b Override: This function \b may be redefined and made public in Derived class. Overrides \b must not throw. ','line_number':122,'multiline':False]['text':'/ Overrides \b must remove const, volatile && and & modifiers from T.','line_number':123,'multiline':False]['text':'/ \tparam T Type for which type_index must be created.','line_number':124,'multiline':False]['text':'/ \return type_index for type T.','line_number':125,'multiline':False]['text':'/ This is a factory method that is used to create instances of Derived classes.','line_number':129,'multiline':False]['text':'/ boost::typeindex::type_id_with_cvr() will call this method, if Derived has same type as boost::typeindex::type_index.','line_number':130,'multiline':False]['text':'/','line_number':131,'multiline':False]['text':'/ \b Override: This function \b may be redefined and made public in Derived class. Overrides \b must not throw. ','line_number':132,'multiline':False]['text':'/ Overrides \b must \b not remove const, volatile && and & modifiers from T.','line_number':133,'multiline':False]['text':'/ \tparam T Type for which type_index must be created.','line_number':134,'multiline':False]['text':'/ \return type_index for type T.','line_number':135,'multiline':False]['text':'/ This is a factory method that is used to create instances of Derived classes.','line_number':139,'multiline':False]['text':'/ boost::typeindex::type_id_runtime(const T&) will call this method, if Derived has same type as boost::typeindex::type_index.','line_number':140,'multiline':False]['text':'/','line_number':141,'multiline':False]['text':'/ \b Override: This function \b may be redefined and made public in Derived class.','line_number':142,'multiline':False]['text':'/ \param variable Variable which runtime type will be stored in type_index.','line_number':143,'multiline':False]['text':'/ \return type_index with runtime type of variable.','line_number':144,'multiline':False]['text':'/ @cond','line_number':152,'multiline':False]['text':' ######################### COMPARISONS with Derived ############################ //','line_number':185,'multiline':False]['text':' ######################### COMPARISONS with Derived END ############################ //','line_number':247,'multiline':False]['text':'/ @endcond','line_number':249,'multiline':False]['text':'/ noexcept comparison operators for type_index_facade classes.','line_number':253,'multiline':False]['text':'/ noexcept comparison operators for type_index_facade and it's TypeInfo classes.','line_number':256,'multiline':False]['text':'/ noexcept comparison operators for type_index_facade's TypeInfo and type_index_facade classes.','line_number':259,'multiline':False]['text':'/ @cond','line_number':266,'multiline':False]['text':'/ Ostream operator that will output demangled name','line_number':267,'multiline':False]['text':'/ @endcond','line_number':273,'multiline':False]['text':'/ Ostream operator that will output demangled name.','line_number':275,'multiline':False]['text':' BOOST_NO_TEMPLATED_IOSTREAMS','line_number':284,'multiline':False]['text':' BOOST_NO_IOSTREAM','line_number':285,'multiline':False]['text':'/ This free function is used by Boost's unordered containers.','line_number':287,'multiline':False]['text':'/ \note <boost/container_hash/hash.hpp> has to be included if this function is used.','line_number':288,'multiline':False]['text':' namespace boost::typeindex','line_number':294,'multiline':False]['text':' BOOST_TYPE_INDEX_TYPE_INDEX_FACADE_HPP','line_number':296,'multiline':False]