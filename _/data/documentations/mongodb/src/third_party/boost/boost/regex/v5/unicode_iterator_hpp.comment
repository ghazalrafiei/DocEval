['text':'
 *
 * Copyright (c) 2004
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         unicode_iterator.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Iterator adapters for converting between different Unicode encodings.
  ','line_number':12,'multiline':True]['text':'***************************************************************************

Contents:
~~~~~~~~~

1) Read Only, Input Adapters:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

template <class BaseIterator, class U8Type = std::uint8_t>
class u32_to_u8_iterator;

Adapts sequence of UTF-32 code points to "look like" a sequence of UTF-8.

template <class BaseIterator, class U32Type = std::uint32_t>
class u8_to_u32_iterator;

Adapts sequence of UTF-8 code points to "look like" a sequence of UTF-32.

template <class BaseIterator, class U16Type = std::uint16_t>
class u32_to_u16_iterator;

Adapts sequence of UTF-32 code points to "look like" a sequence of UTF-16.

template <class BaseIterator, class U32Type = std::uint32_t>
class u16_to_u32_iterator;

Adapts sequence of UTF-16 code points to "look like" a sequence of UTF-32.

2) Single pass output iterator adapters:

template <class BaseIterator>
class utf8_output_iterator;

Accepts UTF-32 code points and forwards them on as UTF-8 code points.

template <class BaseIterator>
class utf16_output_iterator;

Accepts UTF-32 code points and forwards them on as UTF-16 code points.

***************************************************************************','line_number':19,'multiline':True]['text':' CHAR_BIT','line_number':68,'multiline':False]['text':' if the most significant bit with a zero in it is in position','line_number':98,'multiline':False]['text':' 8-N then there are N bytes in this UTF-8 sequence:','line_number':99,'multiline':False]['text':' namespace detail','line_number':138,'multiline':False]['text':' Both m_currents must be equal, or both even','line_number':165,'multiline':False]['text':' this is the same as saying their sum must be even:','line_number':166,'multiline':False]['text':' if we have a pending read then read now, so that we know whether','line_number':177,'multiline':False]['text':' to skip a position, or move to a low-surrogate:','line_number':178,'multiline':False]['text':' pending read:','line_number':181,'multiline':False]['text':' move to the next surrogate position:','line_number':184,'multiline':False]['text':' if we've reached the end skip a position:','line_number':186,'multiline':False]['text':' decrementing an iterator always leads to a valid position:','line_number':204,'multiline':False]['text':' construct:','line_number':225,'multiline':False]['text':' begin by checking for a code point out of range:','line_number':242,'multiline':False]['text':' split into two surrogates:','line_number':248,'multiline':False]['text':' 16-bit code point:','line_number':257,'multiline':False]['text':' value must not be a surrogate:','line_number':261,'multiline':False]['text':' special values for pending iterator reads:','line_number':274,'multiline':False]['text':' skip high surrogate first if there is one:','line_number':305,'multiline':False]['text':' if we have a low surrogate then go back one more:','line_number':320,'multiline':False]['text':' construct:','line_number':336,'multiline':False]['text':'','line_number':345,'multiline':False]['text':' Range checked version:','line_number':346,'multiline':False]['text':'','line_number':347,'multiline':False]['text':'','line_number':351,'multiline':False]['text':' The range must not start with a low surrogate, or end in a high surrogate,','line_number':352,'multiline':False]['text':' otherwise we run the risk of running outside the underlying input range.','line_number':353,'multiline':False]['text':' Likewise b must not be located at a low surrogate.','line_number':354,'multiline':False]['text':'','line_number':355,'multiline':False]['text':' if the last value is a high surrogate then adjust m_position and m_value as needed:','line_number':388,'multiline':False]['text':' precondition; next value must have be a low-surrogate:','line_number':391,'multiline':False]['text':' postcondition; result must not be a surrogate:','line_number':399,'multiline':False]['text':' either the m_current's must be equal, or one must be 0 and ','line_number':432,'multiline':False]['text':' the other 4: which means neither must have bits 1 or 2 set:','line_number':433,'multiline':False]['text':' if we have a pending read then read now, so that we know whether','line_number':445,'multiline':False]['text':' to skip a position, or move to a low-surrogate:','line_number':446,'multiline':False]['text':' pending read:','line_number':449,'multiline':False]['text':' move to the next surrogate position:','line_number':452,'multiline':False]['text':' if we've reached the end skip a position:','line_number':454,'multiline':False]['text':' construct:','line_number':492,'multiline':False]['text':' special values for pending iterator reads:','line_number':554,'multiline':False]['text':' We must not start with a continuation character:','line_number':585,'multiline':False]['text':' skip high surrogate first if there is one:','line_number':588,'multiline':False]['text':' Since we haven't read in a value, we need to validate the code points:','line_number':592,'multiline':False]['text':' We must have a continuation byte:','line_number':596,'multiline':False]['text':' Keep backtracking until we don't have a trailing character:','line_number':616,'multiline':False]['text':' now check that the sequence was valid:','line_number':619,'multiline':False]['text':' construct:','line_number':635,'multiline':False]['text':'','line_number':644,'multiline':False]['text':' Checked constructor:','line_number':645,'multiline':False]['text':'','line_number':646,'multiline':False]['text':'','line_number':650,'multiline':False]['text':' We must not start with a continuation character, or end with a ','line_number':651,'multiline':False]['text':' truncated UTF-8 sequence otherwise we run the risk of going past','line_number':652,'multiline':False]['text':' the start/end of the underlying sequence:','line_number':653,'multiline':False]['text':'','line_number':654,'multiline':False]['text':' we must not have a continuation character:','line_number':686,'multiline':False]['text':' see how many extra bytes we have:','line_number':689,'multiline':False]['text':' extract the extra bits, 6 from each extra byte:','line_number':691,'multiline':False]['text':' We must have a continuation byte:','line_number':697,'multiline':False]['text':' we now need to remove a few of the leftmost bits, but how many depends','line_number':702,'multiline':False]['text':' upon how many extra bytes we've extracted:','line_number':703,'multiline':False]['text':' check the result is in range:','line_number':712,'multiline':False]['text':' The result must not be a surrogate:','line_number':715,'multiline':False]['text':' We should not have had an invalidly encoded UTF8 sequence:','line_number':718,'multiline':False]['text':' begin by checking for a code point out of range:','line_number':770,'multiline':False]['text':' split into two surrogates:','line_number':773,'multiline':False]['text':' 16-bit code point:','line_number':779,'multiline':False]['text':' value must not be a surrogate:','line_number':780,'multiline':False]['text':' namespace boost','line_number':859,'multiline':False]['text':' BOOST_REGEX_UNICODE_ITERATOR_HPP','line_number':861,'multiline':False]