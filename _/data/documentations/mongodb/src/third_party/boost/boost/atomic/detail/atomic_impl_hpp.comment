['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2011 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014-2020 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/atomic_impl.hpp
 *
 * This header contains implementation of \c atomic template.
 ','line_number':10,'multiline':True]['text':'
 * IMPLEMENTATION NOTE: All interface functions MUST be declared with BOOST_FORCEINLINE,
 *                      see comment for convert_memory_order_to_gcc in gcc_atomic_memory_order_utils.hpp.
 ','line_number':55,'multiline':True]['text':' C++17 requires all instances of atomic<> return a value consistent with is_always_lock_free here.','line_number':109,'multiline':False]['text':' Boost.Atomic also enforces the required alignment of the atomic storage, so we can always return is_always_lock_free.','line_number':110,'multiline':False]['text':'! General template. Implementation for user-defined types, such as structs, and pointers to non-object types','line_number':185,'multiline':False]['text':'! Implementation for enums','line_number':308,'multiline':False]['text':'! Implementation for integers','line_number':428,'multiline':False]['text':' Standard methods','line_number':458,'multiline':False]['text':' Boost.Atomic extensions','line_number':534,'multiline':False]['text':' Operators','line_number':668,'multiline':False]['text':'! Implementation for bool','line_number':753,'multiline':False]['text':' Standard methods','line_number':781,'multiline':False]['text':'! Implementation for floating point types','line_number':874,'multiline':False]['text':' Boost.Atomic extensions','line_number':971,'multiline':False]['text':' Operators','line_number':1007,'multiline':False]['text':' !defined(BOOST_ATOMIC_NO_FLOATING_POINT)','line_number':1057,'multiline':False]['text':'! Implementation for pointers to object types','line_number':1060,'multiline':False]['text':' uintptr_storage_type is the minimal storage type that is enough to store pointers. The actual storage_type theoretically may be larger,','line_number':1086,'multiline':False]['text':' if the target architecture only supports atomic ops on larger data. Typically, though, they are the same type.','line_number':1087,'multiline':False]['text':' Standard methods','line_number':1097,'multiline':False]['text':' Boost.Atomic extensions','line_number':1158,'multiline':False]['text':' Operators','line_number':1189,'multiline':False]['text':' namespace detail','line_number':1259,'multiline':False]['text':' namespace atomics','line_number':1260,'multiline':False]['text':' namespace boost','line_number':1261,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_ATOMIC_IMPl_HPP_INCLUDED_','line_number':1265,'multiline':False]