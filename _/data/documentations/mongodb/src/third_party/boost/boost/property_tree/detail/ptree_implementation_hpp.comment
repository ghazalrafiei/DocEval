['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Copyright (C) 2002-2006 Marcin Kalicinski','line_number':2,'multiline':False]['text':' Copyright (C) 2009 Sebastian Redl','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' For more information, see www.boost.org','line_number':9,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' The actual child container.','line_number':33,'multiline':False]['text':' MSVC 10 has moved std::pair's members to a base','line_number':35,'multiline':False]['text':' class. Unfortunately this does break the interface.','line_number':36,'multiline':False]['text':' The by-name lookup index.','line_number':56,'multiline':False]['text':' Access functions for getting to the children of a tree.','line_number':60,'multiline':False]['text':' multi_index doesn't allow modification of its values, because','line_number':90,'multiline':False]['text':' indexes could sort by anything, and modification screws that up.','line_number':91,'multiline':False]['text':' However, we only sort by the key, and it's protected against','line_number':92,'multiline':False]['text':' modification in the value_type, so this const_cast is safe.','line_number':93,'multiline':False]['text':' Big five','line_number':173,'multiline':False]['text':' Perhaps the children collection could be created on-demand only, to','line_number':175,'multiline':False]['text':' reduce heap traffic. But that's a lot more work to implement.','line_number':176,'multiline':False]['text':' Void pointers, no ADL necessary','line_number':215,'multiline':False]['text':' Container view','line_number':219,'multiline':False]['text':' Assumes ch1.size() == ch2.size()','line_number':409,'multiline':False]['text':' Equality','line_number':428,'multiline':False]['text':' The size test is cheap, so add it as an optimization','line_number':434,'multiline':False]['text':' Associative view','line_number':446,'multiline':False]['text':' Property tree view','line_number':546,'multiline':False]['text':' Got the parent. Now get the correct child.','line_number':639,'multiline':False]['text':' If the new child exists, replace it.','line_number':642,'multiline':False]['text':' Got the parent.','line_number':657,'multiline':False]['text':' I'm the child we're looking for.','line_number':888,'multiline':False]['text':' Recurse down the tree to find the path.','line_number':891,'multiline':False]['text':' No such child.','line_number':895,'multiline':False]['text':' Not done yet, recurse.','line_number':898,'multiline':False]['text':' I'm the parent we're looking for.','line_number':907,'multiline':False]['text':' If we've found an existing child, go down that path. Else','line_number':912,'multiline':False]['text':' create a new one.','line_number':913,'multiline':False]['text':' Free functions','line_number':919,'multiline':False]