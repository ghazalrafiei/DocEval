['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file   formatters/csv_decorator.hpp
 * \author Andrey Semashev
 * \date   18.11.2012
 *
 * The header contains implementation of a CSV-style character decorator.
 * See: http://en.wikipedia.org/wiki/Comma-separated_values
 ','line_number':7,'multiline':True]['text':' BOOST_LOG_USE_CHAR','line_number':60,'multiline':False]['text':' BOOST_LOG_USE_WCHAR_T','line_number':83,'multiline':False]['text':' namespace aux','line_number':102,'multiline':False]['text':'!
 * CSV-style decorator generator object. The decorator doubles double quotes that may be found
 * in the output. See http://en.wikipedia.org/wiki/Comma-separated_values for more information on
 * the CSV format. The generator provides <tt>operator[]</tt> that can be used to construct
 * the actual decorator. For example:
 *
 * <code>
 * csv_decor[ stream << attr< std::string >("MyAttr") ]
 * </code>
 *
 * For wide-character formatting there is the similar \c wcsv_decor decorator generator object.
 ','line_number':104,'multiline':True]['text':'!
 * The function creates an CSV-style decorator generator for arbitrary character type.
 ','line_number':123,'multiline':True]['text':' namespace expressions','line_number':132,'multiline':False]['text':' namespace log','line_number':134,'multiline':False]['text':' namespace boost','line_number':136,'multiline':False]['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_CSV_DECORATOR_HPP_INCLUDED_','line_number':140,'multiline':False]