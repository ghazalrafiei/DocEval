['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':24,'multiline':False]['text':'new_allocator','line_number':27,'multiline':False]['text':' container/detail','line_number':28,'multiline':False]['text':' move','line_number':31,'multiline':False]['text':' move/detail','line_number':34,'multiline':False]['text':' intrusive/detail','line_number':39,'multiline':False]['text':'pair','line_number':40,'multiline':False]['text':'less, equal','line_number':41,'multiline':False]['text':' std','line_number':42,'multiline':False]['text':'! flat_set is a Sorted Associative Container that stores objects of type Key.','line_number':55,'multiline':False]['text':'! It is also a Unique Associative Container, meaning that no two elements are the same.','line_number':56,'multiline':False]['text':'!','line_number':57,'multiline':False]['text':'! flat_set is similar to std::set but it's implemented by as an ordered sequence container.','line_number':58,'multiline':False]['text':'! The underlying sequence container is by default <i>vector</i> but it can also work','line_number':59,'multiline':False]['text':'! user-provided vector-like SequenceContainers (like <i>static_vector</i> or <i>small_vector</i>).','line_number':60,'multiline':False]['text':'!','line_number':61,'multiline':False]['text':'! Using vector-like sequence containers means that inserting a new element into a flat_set might invalidate','line_number':62,'multiline':False]['text':'! previous iterators and references (unless that sequence container is <i>stable_vector</i> or a similar','line_number':63,'multiline':False]['text':'! container that offers stable pointers and references). Similarly, erasing an element might invalidate','line_number':64,'multiline':False]['text':'! iterators and references pointing to elements that come after (their keys are bigger) the erased element.','line_number':65,'multiline':False]['text':'!','line_number':66,'multiline':False]['text':'! This container provides random-access iterators.','line_number':67,'multiline':False]['text':'!','line_number':68,'multiline':False]['text':'! \tparam Key is the type to be inserted in the set, which is also the key_type','line_number':69,'multiline':False]['text':'! \tparam Compare is the comparison functor used to order keys','line_number':70,'multiline':False]['text':'! \tparam AllocatorOrContainer is either:','line_number':71,'multiline':False]['text':'!   - The allocator to allocate <code>value_type</code>s (e.g. <i>allocator< std::pair<Key, T> > </i>).','line_number':72,'multiline':False]['text':'!     (in this case <i>sequence_type</i> will be vector<value_type, AllocatorOrContainer>)','line_number':73,'multiline':False]['text':'!   - The SequenceContainer to be used as the underlying <i>sequence_type</i>. It must be a vector-like','line_number':74,'multiline':False]['text':'!     sequence container with random-access iterators.','line_number':75,'multiline':False]['text':'/@cond','line_number':82,'multiline':False]['text':'/@endcond','line_number':84,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':98,'multiline':False]['text':'////////////////////////////////////////////','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':'                    types','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':'////////////////////////////////////////////','line_number':105,'multiline':False]['text':'////////////////////////////////////////////','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':'          construct/copy/destroy','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':'////////////////////////////////////////////','line_number':131,'multiline':False]['text':'! <b>Effects</b>: Default constructs an empty container.','line_number':133,'multiline':False]['text':'!','line_number':134,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':135,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified','line_number':142,'multiline':False]['text':'! comparison object.','line_number':143,'multiline':False]['text':'!','line_number':144,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':145,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified allocator.','line_number':151,'multiline':False]['text':'!','line_number':152,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':153,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified','line_number':159,'multiline':False]['text':'! comparison object and allocator.','line_number':160,'multiline':False]['text':'!','line_number':161,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':162,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container and','line_number':168,'multiline':False]['text':'! inserts elements from the range [first ,last ).','line_number':169,'multiline':False]['text':'!','line_number':170,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':171,'multiline':False]['text':'! comp and otherwise N logN, where N is last - first.','line_number':172,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified','line_number':179,'multiline':False]['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':180,'multiline':False]['text':'!','line_number':181,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':182,'multiline':False]['text':'! comp and otherwise N logN, where N is last - first.','line_number':183,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':190,'multiline':False]['text':'! inserts elements from the range [first ,last ).','line_number':191,'multiline':False]['text':'!','line_number':192,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':193,'multiline':False]['text':'! comp and otherwise N logN, where N is last - first.','line_number':194,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':201,'multiline':False]['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':202,'multiline':False]['text':'!','line_number':203,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':204,'multiline':False]['text':'! comp and otherwise N logN, where N is last - first.','line_number':205,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container and','line_number':212,'multiline':False]['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':213,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':214,'multiline':False]['text':'!','line_number':215,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':216,'multiline':False]['text':'! unique values.','line_number':217,'multiline':False]['text':'!','line_number':218,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':219,'multiline':False]['text':'!','line_number':220,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':221,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':228,'multiline':False]['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':229,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':230,'multiline':False]['text':'!','line_number':231,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':232,'multiline':False]['text':'! unique values.','line_number':233,'multiline':False]['text':'!','line_number':234,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':235,'multiline':False]['text':'!','line_number':236,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':237,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':244,'multiline':False]['text':'! allocator, and inserts elements from the ordered unique range [first ,last). This function','line_number':245,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':246,'multiline':False]['text':'!','line_number':247,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':248,'multiline':False]['text':'! unique values.','line_number':249,'multiline':False]['text':'!','line_number':250,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':251,'multiline':False]['text':'!','line_number':252,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':253,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified allocator and','line_number':260,'multiline':False]['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':261,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':262,'multiline':False]['text':'!','line_number':263,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':264,'multiline':False]['text':'! unique values.','line_number':265,'multiline':False]['text':'!','line_number':266,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':267,'multiline':False]['text':'!','line_number':268,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':269,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container and','line_number':277,'multiline':False]['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':278,'multiline':False]['text':'!','line_number':279,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':280,'multiline':False]['text':'! comp and otherwise N logN, where N is il.begin() - il.end().','line_number':281,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified','line_number':286,'multiline':False]['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':287,'multiline':False]['text':'!','line_number':288,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':289,'multiline':False]['text':'! comp and otherwise N logN, where N is il.begin() - il.end().','line_number':290,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':295,'multiline':False]['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':296,'multiline':False]['text':'!','line_number':297,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':298,'multiline':False]['text':'! comp and otherwise N logN, where N is il.begin() - il.end().','line_number':299,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':304,'multiline':False]['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':305,'multiline':False]['text':'!','line_number':306,'multiline':False]['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':307,'multiline':False]['text':'! comp and otherwise N logN, where N is il.begin() - il.end().','line_number':308,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':313,'multiline':False]['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':314,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':315,'multiline':False]['text':'!','line_number':316,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':317,'multiline':False]['text':'! unique values.','line_number':318,'multiline':False]['text':'!','line_number':319,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':320,'multiline':False]['text':'!','line_number':321,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':322,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':327,'multiline':False]['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':328,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':329,'multiline':False]['text':'!','line_number':330,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':331,'multiline':False]['text':'! unique values.','line_number':332,'multiline':False]['text':'!','line_number':333,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':334,'multiline':False]['text':'!','line_number':335,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':336,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':341,'multiline':False]['text':'! allocator, and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':342,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':343,'multiline':False]['text':'!','line_number':344,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':345,'multiline':False]['text':'! unique values.','line_number':346,'multiline':False]['text':'!','line_number':347,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':348,'multiline':False]['text':'!','line_number':349,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':350,'multiline':False]['text':'! <b>Effects</b>: Copy constructs the container.','line_number':356,'multiline':False]['text':'!','line_number':357,'multiline':False]['text':'! <b>Complexity</b>: Linear in x.size().','line_number':358,'multiline':False]['text':'! <b>Effects</b>: Move constructs thecontainer. Constructs *this using x's resources.','line_number':363,'multiline':False]['text':'!','line_number':364,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':365,'multiline':False]['text':'!','line_number':366,'multiline':False]['text':'! <b>Postcondition</b>: x is emptied.','line_number':367,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a container using the specified allocator.','line_number':373,'multiline':False]['text':'!','line_number':374,'multiline':False]['text':'! <b>Complexity</b>: Linear in x.size().','line_number':375,'multiline':False]['text':'! <b>Effects</b>: Move constructs a container using the specified allocator.','line_number':380,'multiline':False]['text':'!                 Constructs *this using x's resources.','line_number':381,'multiline':False]['text':'!','line_number':382,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise','line_number':383,'multiline':False]['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':388,'multiline':False]['text':'!','line_number':389,'multiline':False]['text':'! <b>Complexity</b>: Linear in x.size().','line_number':390,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':394,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':395,'multiline':False]['text':'!','line_number':396,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':397,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':398,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':399,'multiline':False]['text':'! <b>Effects</b>: Copy all elements from il to *this.','line_number':407,'multiline':False]['text':'!','line_number':408,'multiline':False]['text':'! <b>Complexity</b>: Linear in il.size().','line_number':409,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the allocator that','line_number':419,'multiline':False]['text':'!   was passed to the object's constructor.','line_number':420,'multiline':False]['text':'!','line_number':421,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':422,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':425,'multiline':False]['text':'!','line_number':426,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':427,'multiline':False]['text':'!','line_number':428,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':429,'multiline':False]['text':'!','line_number':430,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':431,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':434,'multiline':False]['text':'!','line_number':435,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':436,'multiline':False]['text':'!','line_number':437,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':438,'multiline':False]['text':'!','line_number':439,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':440,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the container.','line_number':443,'multiline':False]['text':'!','line_number':444,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':445,'multiline':False]['text':'!','line_number':446,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':447,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':450,'multiline':False]['text':'!','line_number':451,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':452,'multiline':False]['text':'!','line_number':453,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':454,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the container.','line_number':457,'multiline':False]['text':'!','line_number':458,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':459,'multiline':False]['text':'!','line_number':460,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':461,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':464,'multiline':False]['text':'!','line_number':465,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':466,'multiline':False]['text':'!','line_number':467,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':468,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':471,'multiline':False]['text':'! of the reversed container.','line_number':472,'multiline':False]['text':'!','line_number':473,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':474,'multiline':False]['text':'!','line_number':475,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':476,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':479,'multiline':False]['text':'! of the reversed container.','line_number':480,'multiline':False]['text':'!','line_number':481,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':482,'multiline':False]['text':'!','line_number':483,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':484,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':487,'multiline':False]['text':'! of the reversed container.','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':490,'multiline':False]['text':'!','line_number':491,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':492,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':495,'multiline':False]['text':'! of the reversed container.','line_number':496,'multiline':False]['text':'!','line_number':497,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':498,'multiline':False]['text':'!','line_number':499,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':500,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':503,'multiline':False]['text':'!','line_number':504,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':505,'multiline':False]['text':'!','line_number':506,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':507,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':510,'multiline':False]['text':'!','line_number':511,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':512,'multiline':False]['text':'!','line_number':513,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':514,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':517,'multiline':False]['text':'! of the reversed container.','line_number':518,'multiline':False]['text':'!','line_number':519,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':520,'multiline':False]['text':'!','line_number':521,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':522,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':525,'multiline':False]['text':'! of the reversed container.','line_number':526,'multiline':False]['text':'!','line_number':527,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':528,'multiline':False]['text':'!','line_number':529,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':530,'multiline':False]['text':'! <b>Effects</b>: Returns true if the container contains no elements.','line_number':533,'multiline':False]['text':'!','line_number':534,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':535,'multiline':False]['text':'!','line_number':536,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':537,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the container.','line_number':540,'multiline':False]['text':'!','line_number':541,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':542,'multiline':False]['text':'!','line_number':543,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':544,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the container.','line_number':547,'multiline':False]['text':'!','line_number':548,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':549,'multiline':False]['text':'!','line_number':550,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':551,'multiline':False]['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':554,'multiline':False]['text':'!   capacity() is always greater than or equal to size().','line_number':555,'multiline':False]['text':'!','line_number':556,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':557,'multiline':False]['text':'!','line_number':558,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':559,'multiline':False]['text':'! <b>Effects</b>: If n is less than or equal to capacity(), or the','line_number':562,'multiline':False]['text':'!   underlying container has no `reserve` member, this call has no','line_number':563,'multiline':False]['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':564,'multiline':False]['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':565,'multiline':False]['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':566,'multiline':False]['text':'!','line_number':567,'multiline':False]['text':'! <b>Throws</b>: If memory allocation allocation throws or T's copy constructor throws.','line_number':568,'multiline':False]['text':'!','line_number':569,'multiline':False]['text':'! <b>Note</b>: If capacity() is less than "cnt", iterators and references to','line_number':570,'multiline':False]['text':'!   to values might be invalidated.','line_number':571,'multiline':False]['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':574,'multiline':False]['text':'    with previous allocations. The size of the vector is unchanged','line_number':575,'multiline':False]['text':'!','line_number':576,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or Key's copy constructor throws.','line_number':577,'multiline':False]['text':'!','line_number':578,'multiline':False]['text':'! <b>Complexity</b>: Linear to size().','line_number':579,'multiline':False]['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':582,'multiline':False]['text':'////////////////////////////////////////////','line_number':584,'multiline':False]['text':'','line_number':585,'multiline':False]['text':'                modifiers','line_number':586,'multiline':False]['text':'','line_number':587,'multiline':False]['text':'////////////////////////////////////////////','line_number':588,'multiline':False]['text':'! <b>Effects</b>: Inserts an object x of type Key constructed with','line_number':592,'multiline':False]['text':'!   std::forward<Args>(args)... if and only if there is no element in the container','line_number':593,'multiline':False]['text':'!   with key equivalent to the key of x.','line_number':594,'multiline':False]['text':'!','line_number':595,'multiline':False]['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':596,'multiline':False]['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':597,'multiline':False]['text':'!   points to the element with key equivalent to the key of x.','line_number':598,'multiline':False]['text':'!','line_number':599,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':600,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':601,'multiline':False]['text':'!','line_number':602,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':603,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type Key constructed with','line_number':608,'multiline':False]['text':'!   std::forward<Args>(args)... in the container if and only if there is','line_number':609,'multiline':False]['text':'!   no element in the container with key equivalent to the key of x.','line_number':610,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':611,'multiline':False]['text':'!','line_number':612,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':613,'multiline':False]['text':'!   to the key of x.','line_number':614,'multiline':False]['text':'!','line_number':615,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':616,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':617,'multiline':False]['text':'!','line_number':618,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':619,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':624,'multiline':False]['text':'','line_number':634,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':638,'multiline':False]['text':'! <b>Effects</b>: Inserts x if and only if there is no element in the container','line_number':641,'multiline':False]['text':'!   with key equivalent to the key of x.','line_number':642,'multiline':False]['text':'!','line_number':643,'multiline':False]['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':644,'multiline':False]['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':645,'multiline':False]['text':'!   points to the element with key equivalent to the key of x.','line_number':646,'multiline':False]['text':'!','line_number':647,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':648,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':649,'multiline':False]['text':'!','line_number':650,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':651,'multiline':False]['text':'! <b>Effects</b>: Inserts a new value_type move constructed from the pair if and','line_number':654,'multiline':False]['text':'! only if there is no element in the container with key equivalent to the key of x.','line_number':655,'multiline':False]['text':'!','line_number':656,'multiline':False]['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':657,'multiline':False]['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':658,'multiline':False]['text':'!   points to the element with key equivalent to the key of x.','line_number':659,'multiline':False]['text':'!','line_number':660,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':661,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':662,'multiline':False]['text':'!','line_number':663,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':664,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x in the container if and only if there is','line_number':674,'multiline':False]['text':'!   no element in the container with key equivalent to the key of x.','line_number':675,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':676,'multiline':False]['text':'!','line_number':677,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':678,'multiline':False]['text':'!   to the key of x.','line_number':679,'multiline':False]['text':'!','line_number':680,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':681,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':682,'multiline':False]['text':'!','line_number':683,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':684,'multiline':False]['text':'! <b>Effects</b>: Inserts an element move constructed from x in the container.','line_number':687,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':688,'multiline':False]['text':'!','line_number':689,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.','line_number':690,'multiline':False]['text':'!','line_number':691,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':692,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':693,'multiline':False]['text':'!','line_number':694,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':695,'multiline':False]['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':701,'multiline':False]['text':'!','line_number':702,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':703,'multiline':False]['text':'!   if there is no element with key equivalent to the key of that element.','line_number':704,'multiline':False]['text':'!','line_number':705,'multiline':False]['text':'! <b>Complexity</b>: N log(N).','line_number':706,'multiline':False]['text':'!','line_number':707,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':708,'multiline':False]['text':'! <b>Requires</b>: first, last are not iterators into *this and','line_number':713,'multiline':False]['text':'! must be ordered according to the predicate and must be','line_number':714,'multiline':False]['text':'! unique values.','line_number':715,'multiline':False]['text':'!','line_number':716,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [first,last) .This function','line_number':717,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':718,'multiline':False]['text':'!','line_number':719,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':720,'multiline':False]['text':'!','line_number':721,'multiline':False]['text':'! <b>Note</b>: Non-standard extension. If an element is inserted it might invalidate elements.','line_number':722,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) if and only','line_number':728,'multiline':False]['text':'!   if there is no element with key equivalent to the key of that element.','line_number':729,'multiline':False]['text':'!','line_number':730,'multiline':False]['text':'! <b>Complexity</b>: N log(N).','line_number':731,'multiline':False]['text':'!','line_number':732,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':733,'multiline':False]['text':'! <b>Requires</b>: Range [il.begin(), il.end()) must be ordered according to the predicate','line_number':737,'multiline':False]['text':'! and must be unique values.','line_number':738,'multiline':False]['text':'!','line_number':739,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) .This function','line_number':740,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':741,'multiline':False]['text':'!','line_number':742,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':743,'multiline':False]['text':'!','line_number':744,'multiline':False]['text':'! <b>Note</b>: Non-standard extension. If an element is inserted it might invalidate elements.','line_number':745,'multiline':False]['text':'! @copydoc ::boost::container::flat_map::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':750,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::merge(flat_set<Key, C2, AllocatorOrContainer>&)','line_number':755,'multiline':False]['text':'! @copydoc ::boost::container::flat_map::merge(flat_multimap<Key, T, C2, AllocatorOrContainer>&)','line_number':760,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::merge(flat_multiset<Key, C2, AllocatorOrContainer>&)','line_number':765,'multiline':False]['text':'! <b>Effects</b>: If present, erases the element in the container with key equivalent to x.','line_number':770,'multiline':False]['text':'!','line_number':771,'multiline':False]['text':'! <b>Returns</b>: Returns the number of erased elements (0/1).','line_number':772,'multiline':False]['text':'!','line_number':773,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':774,'multiline':False]['text':'!   linear to the elements with bigger keys.','line_number':775,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed to by p.','line_number':781,'multiline':False]['text':'!','line_number':782,'multiline':False]['text':'! <b>Returns</b>: Returns an iterator pointing to the element immediately','line_number':783,'multiline':False]['text':'!   following q prior to the element being erased. If no such element exists,','line_number':784,'multiline':False]['text':'!   returns end().','line_number':785,'multiline':False]['text':'!','line_number':786,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements with keys bigger than p','line_number':787,'multiline':False]['text':'!','line_number':788,'multiline':False]['text':'! <b>Note</b>: Invalidates elements with keys','line_number':789,'multiline':False]['text':'!   not less than the erased element.','line_number':790,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements in the range [first, last).','line_number':793,'multiline':False]['text':'!','line_number':794,'multiline':False]['text':'! <b>Returns</b>: Returns last.','line_number':795,'multiline':False]['text':'!','line_number':796,'multiline':False]['text':'! <b>Complexity</b>: size()*N where N is the distance from first to last.','line_number':797,'multiline':False]['text':'!','line_number':798,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':799,'multiline':False]['text':'!   linear to the elements with bigger keys.','line_number':800,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':803,'multiline':False]['text':'!','line_number':804,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':805,'multiline':False]['text':'!','line_number':806,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':807,'multiline':False]['text':'! <b>Effects</b>: erase(begin(),end()).','line_number':812,'multiline':False]['text':'!','line_number':813,'multiline':False]['text':'! <b>Postcondition</b>: size() == 0.','line_number':814,'multiline':False]['text':'!','line_number':815,'multiline':False]['text':'! <b>Complexity</b>: linear in size().','line_number':816,'multiline':False]['text':'! <b>Effects</b>: Returns the comparison object out','line_number':819,'multiline':False]['text':'!   of which a was constructed.','line_number':820,'multiline':False]['text':'!','line_number':821,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':822,'multiline':False]['text':'! <b>Effects</b>: Returns an object of value_compare constructed out','line_number':825,'multiline':False]['text':'!   of the comparison object.','line_number':826,'multiline':False]['text':'!','line_number':827,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':828,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':831,'multiline':False]['text':'!   equivalent to x, or end() if such an element is not found.','line_number':832,'multiline':False]['text':'!','line_number':833,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':834,'multiline':False]['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':837,'multiline':False]['text':'!   equivalent to x, or end() if such an element is not found.','line_number':838,'multiline':False]['text':'!','line_number':839,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':840,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':843,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':844,'multiline':False]['text':'!','line_number':845,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':846,'multiline':False]['text':'!   equivalent to x, or end() if such an element is not found.','line_number':847,'multiline':False]['text':'!','line_number':848,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':849,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':853,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':854,'multiline':False]['text':'!','line_number':855,'multiline':False]['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':856,'multiline':False]['text':'!   equivalent to x, or end() if such an element is not found.','line_number':857,'multiline':False]['text':'!','line_number':858,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic.','line_number':859,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':863,'multiline':False]['text':'!','line_number':864,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the nth element','line_number':865,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':866,'multiline':False]['text':'!   if n == size().','line_number':867,'multiline':False]['text':'!','line_number':868,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':869,'multiline':False]['text':'!','line_number':870,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':871,'multiline':False]['text':'!','line_number':872,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':873,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':876,'multiline':False]['text':'!','line_number':877,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the nth element','line_number':878,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':879,'multiline':False]['text':'!   if n == size().','line_number':880,'multiline':False]['text':'!','line_number':881,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':882,'multiline':False]['text':'!','line_number':883,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':884,'multiline':False]['text':'!','line_number':885,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':886,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':889,'multiline':False]['text':'!','line_number':890,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':891,'multiline':False]['text':'!   and size() if p == end().','line_number':892,'multiline':False]['text':'!','line_number':893,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':894,'multiline':False]['text':'!','line_number':895,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':896,'multiline':False]['text':'!','line_number':897,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':898,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':901,'multiline':False]['text':'!','line_number':902,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':903,'multiline':False]['text':'!   and size() if p == end().','line_number':904,'multiline':False]['text':'!','line_number':905,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':906,'multiline':False]['text':'!','line_number':907,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':908,'multiline':False]['text':'!','line_number':909,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':910,'multiline':False]['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':915,'multiline':False]['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':917,'multiline':False]['text':'!','line_number':918,'multiline':False]['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':919,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':923,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':926,'multiline':False]['text':'!','line_number':927,'multiline':False]['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':928,'multiline':False]['text':'Don't use find() != end optimization here as transparent comparators with key K might','line_number':931,'multiline':False]['text':'return a different range than key_type (which can only return a single element range)','line_number':932,'multiline':False]['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':937,'multiline':False]['text':'!   equivalent to key in the container, otherwise false.','line_number':938,'multiline':False]['text':'!','line_number':939,'multiline':False]['text':'! <b>Complexity</b>: log(size()).','line_number':940,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':943,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':944,'multiline':False]['text':'!','line_number':945,'multiline':False]['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':946,'multiline':False]['text':'!   equivalent to key in the container, otherwise false.','line_number':947,'multiline':False]['text':'!','line_number':948,'multiline':False]['text':'! <b>Complexity</b>: log(size()).','line_number':949,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':953,'multiline':False]['text':'!   than x, or end() if such an element is not found.','line_number':954,'multiline':False]['text':'!','line_number':955,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':956,'multiline':False]['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':959,'multiline':False]['text':'!   less than x, or end() if such an element is not found.','line_number':960,'multiline':False]['text':'!','line_number':961,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':962,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':965,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':966,'multiline':False]['text':'!','line_number':967,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':968,'multiline':False]['text':'!   than x, or end() if such an element is not found.','line_number':969,'multiline':False]['text':'!','line_number':970,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':971,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':975,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':976,'multiline':False]['text':'!','line_number':977,'multiline':False]['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':978,'multiline':False]['text':'!   less than x, or end() if such an element is not found.','line_number':979,'multiline':False]['text':'!','line_number':980,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':981,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':985,'multiline':False]['text':'!   than x, or end() if such an element is not found.','line_number':986,'multiline':False]['text':'!','line_number':987,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':988,'multiline':False]['text':'! <b>Returns</b>: A const iterator pointing to the first element with key ','line_number':991,'multiline':False]['text':'!   greater than x, or end() if such an element is not found.','line_number':992,'multiline':False]['text':'!','line_number':993,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':994,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':997,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':998,'multiline':False]['text':'!','line_number':999,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':1000,'multiline':False]['text':'!   than x, or end() if such an element is not found.','line_number':1001,'multiline':False]['text':'!','line_number':1002,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1003,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':1007,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':1008,'multiline':False]['text':'!','line_number':1009,'multiline':False]['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':1010,'multiline':False]['text':'!   greater than x, or end() if such an element is not found.','line_number':1011,'multiline':False]['text':'!','line_number':1012,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1013,'multiline':False]['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1017,'multiline':False]['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1019,'multiline':False]['text':'!','line_number':1020,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1021,'multiline':False]['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1025,'multiline':False]['text':'!','line_number':1026,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1027,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':1031,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':1032,'multiline':False]['text':'!','line_number':1033,'multiline':False]['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1034,'multiline':False]['text':'!','line_number':1035,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1036,'multiline':False]['text':'Don't use lower_bound_range optimization here as transparent comparators with key K might','line_number':1039,'multiline':False]['text':'return a different range than key_type (which can only return a single element range)','line_number':1040,'multiline':False]['text':'! <b>Requires</b>: This overload is available only if','line_number':1043,'multiline':False]['text':'! key_compare::is_transparent exists.','line_number':1044,'multiline':False]['text':'!','line_number':1045,'multiline':False]['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1046,'multiline':False]['text':'!','line_number':1047,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic','line_number':1048,'multiline':False]['text':'Don't use lower_bound_range optimization here as transparent comparators with key K might','line_number':1051,'multiline':False]['text':'return a different range than key_type (which can only return a single element range)','line_number':1052,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1057,'multiline':False]['text':'!','line_number':1058,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1059,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1062,'multiline':False]['text':'!','line_number':1063,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1064,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1067,'multiline':False]['text':'!','line_number':1068,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1069,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1072,'multiline':False]['text':'!','line_number':1073,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1074,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1077,'multiline':False]['text':'!','line_number':1078,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1079,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1082,'multiline':False]['text':'!','line_number':1083,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1084,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1087,'multiline':False]['text':'!','line_number':1088,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1089,'multiline':False]['text':'! <b>Effects</b>: Extracts the internal sequence container.','line_number':1094,'multiline':False]['text':'!','line_number':1095,'multiline':False]['text':'! <b>Complexity</b>: Same as the move constructor of sequence_type, usually constant.','line_number':1096,'multiline':False]['text':'!','line_number':1097,'multiline':False]['text':'! <b>Postcondition</b>: this->empty()','line_number':1098,'multiline':False]['text':'!','line_number':1099,'multiline':False]['text':'! <b>Throws</b>: If secuence_type's move constructor throws ','line_number':1100,'multiline':False]['text':'#ifdef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1103,'multiline':False]['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1105,'multiline':False]['text':'!   one passed externally using the move assignment. Erases non-unique elements.','line_number':1106,'multiline':False]['text':'!','line_number':1107,'multiline':False]['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(NlogN) with N = seq.size()','line_number':1108,'multiline':False]['text':'!','line_number':1109,'multiline':False]['text':'! <b>Throws</b>: If the comparison or the move constructor throws','line_number':1110,'multiline':False]['text':'! <b>Requires</b>: seq shall be ordered according to this->compare()','line_number':1114,'multiline':False]['text':'!   and shall contain unique elements.','line_number':1115,'multiline':False]['text':'!','line_number':1116,'multiline':False]['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1117,'multiline':False]['text':'!   one passed externally using the move assignment.','line_number':1118,'multiline':False]['text':'!','line_number':1119,'multiline':False]['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(1)','line_number':1120,'multiline':False]['text':'!','line_number':1121,'multiline':False]['text':'! <b>Throws</b>: If the move assignment throws','line_number':1122,'multiline':False]['text':' Compare','line_number':1136,'multiline':False]['text':' Allocator','line_number':1141,'multiline':False]['text':' Compare','line_number':1164,'multiline':False]['text':' Allocator','line_number':1169,'multiline':False]['text':'namespace container {','line_number':1188,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1190,'multiline':False]['text':'!specialization for optimizations','line_number':1191,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1201,'multiline':False]['text':'! flat_multiset is a Sorted Associative Container that stores objects of type Key and','line_number':1203,'multiline':False]['text':'! can store multiple copies of the same key value.','line_number':1204,'multiline':False]['text':'!','line_number':1205,'multiline':False]['text':'! flat_multiset is similar to std::multiset but it's implemented by as an ordered sequence container.','line_number':1206,'multiline':False]['text':'! The underlying sequence container is by default <i>vector</i> but it can also work','line_number':1207,'multiline':False]['text':'! user-provided vector-like SequenceContainers (like <i>static_vector</i> or <i>small_vector</i>).','line_number':1208,'multiline':False]['text':'!','line_number':1209,'multiline':False]['text':'! Using vector-like sequence containers means that inserting a new element into a flat_multiset might invalidate','line_number':1210,'multiline':False]['text':'! previous iterators and references (unless that sequence container is <i>stable_vector</i> or a similar','line_number':1211,'multiline':False]['text':'! container that offers stable pointers and references). Similarly, erasing an element might invalidate','line_number':1212,'multiline':False]['text':'! iterators and references pointing to elements that come after (their keys are bigger) the erased element.','line_number':1213,'multiline':False]['text':'!','line_number':1214,'multiline':False]['text':'! This container provides random-access iterators.','line_number':1215,'multiline':False]['text':'!','line_number':1216,'multiline':False]['text':'! \tparam Key is the type to be inserted in the multiset, which is also the key_type','line_number':1217,'multiline':False]['text':'! \tparam Compare is the comparison functor used to order keys','line_number':1218,'multiline':False]['text':'! \tparam AllocatorOrContainer is either:','line_number':1219,'multiline':False]['text':'!   - The allocator to allocate <code>value_type</code>s (e.g. <i>allocator< std::pair<Key, T> > </i>).','line_number':1220,'multiline':False]['text':'!     (in this case <i>sequence_type</i> will be vector<value_type, AllocatorOrContainer>)','line_number':1221,'multiline':False]['text':'!   - The SequenceContainer to be used as the underlying <i>sequence_type</i>. It must be a vector-like','line_number':1222,'multiline':False]['text':'!     sequence container with random-access iterators.','line_number':1223,'multiline':False]['text':'/@cond','line_number':1230,'multiline':False]['text':'/@endcond','line_number':1232,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1245,'multiline':False]['text':'////////////////////////////////////////////','line_number':1248,'multiline':False]['text':'','line_number':1249,'multiline':False]['text':'                    types','line_number':1250,'multiline':False]['text':'','line_number':1251,'multiline':False]['text':'////////////////////////////////////////////','line_number':1252,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set()','line_number':1273,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(const Compare&)','line_number':1279,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(const allocator_type&)','line_number':1284,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(const Compare&, const allocator_type&)','line_number':1289,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(InputIterator, InputIterator)','line_number':1294,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(InputIterator, InputIterator, const allocator_type&)','line_number':1300,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(InputIterator, InputIterator, const Compare& comp)','line_number':1306,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(InputIterator, InputIterator, const Compare& comp, const allocator_type&)','line_number':1312,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty flat_multiset and','line_number':1318,'multiline':False]['text':'! inserts elements from the ordered range [first ,last ). This function','line_number':1319,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1320,'multiline':False]['text':'!','line_number':1321,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1322,'multiline':False]['text':'!','line_number':1323,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1324,'multiline':False]['text':'!','line_number':1325,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1326,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty flat_multiset using the specified comparison object and','line_number':1332,'multiline':False]['text':'! inserts elements from the ordered range [first ,last ). This function','line_number':1333,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1334,'multiline':False]['text':'!','line_number':1335,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1336,'multiline':False]['text':'!','line_number':1337,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1338,'multiline':False]['text':'!','line_number':1339,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1340,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty flat_multiset using the specified comparison object and','line_number':1346,'multiline':False]['text':'! allocator, and inserts elements from the ordered range [first, last ). This function','line_number':1347,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1348,'multiline':False]['text':'!','line_number':1349,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1350,'multiline':False]['text':'!','line_number':1351,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1352,'multiline':False]['text':'!','line_number':1353,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1354,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty flat_multiset using the specified allocator and','line_number':1360,'multiline':False]['text':'! inserts elements from the ordered range [first ,last ). This function','line_number':1361,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1362,'multiline':False]['text':'!','line_number':1363,'multiline':False]['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1364,'multiline':False]['text':'!','line_number':1365,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1366,'multiline':False]['text':'!','line_number':1367,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1368,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(std::initializer_list<value_type)','line_number':1375,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(std::initializer_list<value_type>, const allocator_type&)','line_number':1380,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(std::initializer_list<value_type>, const Compare& comp)','line_number':1385,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(std::initializer_list<value_type>, const Compare& comp, const allocator_type&)','line_number':1390,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty containerand','line_number':1395,'multiline':False]['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':1396,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1397,'multiline':False]['text':'!','line_number':1398,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1399,'multiline':False]['text':'!','line_number':1400,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1401,'multiline':False]['text':'!','line_number':1402,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1403,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':1408,'multiline':False]['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':1409,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1410,'multiline':False]['text':'!','line_number':1411,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1412,'multiline':False]['text':'!','line_number':1413,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1414,'multiline':False]['text':'!','line_number':1415,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1416,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container using the specified comparison object and','line_number':1421,'multiline':False]['text':'! allocator, and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':1422,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1423,'multiline':False]['text':'!','line_number':1424,'multiline':False]['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1425,'multiline':False]['text':'!','line_number':1426,'multiline':False]['text':'! <b>Complexity</b>: Linear in N.','line_number':1427,'multiline':False]['text':'!','line_number':1428,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1429,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(const flat_set &)','line_number':1435,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(flat_set &&)','line_number':1440,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(const flat_set &, const allocator_type &)','line_number':1446,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::flat_set(flat_set &&, const allocator_type &)','line_number':1451,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::operator=(const flat_set &)','line_number':1456,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::operator=(flat_set &&)','line_number':1460,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::operator=(std::initializer_list<value_type>)','line_number':1468,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::get_allocator()','line_number':1479,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::get_stored_allocator()','line_number':1482,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::get_stored_allocator() const','line_number':1485,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::begin()','line_number':1488,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::begin() const','line_number':1491,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::cbegin() const','line_number':1494,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::end()','line_number':1497,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::end() const','line_number':1500,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::cend() const','line_number':1503,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::rbegin()','line_number':1506,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::rbegin() const','line_number':1509,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::crbegin() const','line_number':1512,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::rend()','line_number':1515,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::rend() const','line_number':1518,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::crend() const','line_number':1521,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::empty() const','line_number':1524,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::size() const','line_number':1527,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::max_size() const','line_number':1530,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::capacity() const','line_number':1533,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::reserve(size_type)','line_number':1536,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::shrink_to_fit()','line_number':1539,'multiline':False]['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1542,'multiline':False]['text':'////////////////////////////////////////////','line_number':1544,'multiline':False]['text':'','line_number':1545,'multiline':False]['text':'                modifiers','line_number':1546,'multiline':False]['text':'','line_number':1547,'multiline':False]['text':'////////////////////////////////////////////','line_number':1548,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type Key constructed with','line_number':1552,'multiline':False]['text':'!   std::forward<Args>(args)... and returns the iterator pointing to the','line_number':1553,'multiline':False]['text':'!   newly inserted element.','line_number':1554,'multiline':False]['text':'!','line_number':1555,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1556,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':1557,'multiline':False]['text':'!','line_number':1558,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1559,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type Key constructed with','line_number':1564,'multiline':False]['text':'!   std::forward<Args>(args)... in the container.','line_number':1565,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1566,'multiline':False]['text':'!','line_number':1567,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1568,'multiline':False]['text':'!   to the key of x.','line_number':1569,'multiline':False]['text':'!','line_number':1570,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1571,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1572,'multiline':False]['text':'!','line_number':1573,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1574,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1579,'multiline':False]['text':'','line_number':1589,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1593,'multiline':False]['text':'! <b>Effects</b>: Inserts x and returns the iterator pointing to the','line_number':1596,'multiline':False]['text':'!   newly inserted element.','line_number':1597,'multiline':False]['text':'!','line_number':1598,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1599,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':1600,'multiline':False]['text':'!','line_number':1601,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1602,'multiline':False]['text':'! <b>Effects</b>: Inserts a new value_type move constructed from x','line_number':1605,'multiline':False]['text':'!   and returns the iterator pointing to the newly inserted element.','line_number':1606,'multiline':False]['text':'!','line_number':1607,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1608,'multiline':False]['text':'!   to the elements with bigger keys than x.','line_number':1609,'multiline':False]['text':'!','line_number':1610,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1611,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x in the container.','line_number':1618,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1619,'multiline':False]['text':'!','line_number':1620,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1621,'multiline':False]['text':'!   to the key of x.','line_number':1622,'multiline':False]['text':'!','line_number':1623,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1624,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1625,'multiline':False]['text':'!','line_number':1626,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1627,'multiline':False]['text':'! <b>Effects</b>: Inserts a new value move constructed  from x in the container.','line_number':1630,'multiline':False]['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1631,'multiline':False]['text':'!','line_number':1632,'multiline':False]['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1633,'multiline':False]['text':'!   to the key of x.','line_number':1634,'multiline':False]['text':'!','line_number':1635,'multiline':False]['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1636,'multiline':False]['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1637,'multiline':False]['text':'!','line_number':1638,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1639,'multiline':False]['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':1645,'multiline':False]['text':'!','line_number':1646,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [first,last) .','line_number':1647,'multiline':False]['text':'!','line_number':1648,'multiline':False]['text':'! <b>Complexity</b>: N log(N).','line_number':1649,'multiline':False]['text':'!','line_number':1650,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1651,'multiline':False]['text':'! <b>Requires</b>: first, last are not iterators into *this and','line_number':1656,'multiline':False]['text':'! must be ordered according to the predicate.','line_number':1657,'multiline':False]['text':'!','line_number':1658,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [first,last) .This function','line_number':1659,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1660,'multiline':False]['text':'!','line_number':1661,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1662,'multiline':False]['text':'!','line_number':1663,'multiline':False]['text':'! <b>Note</b>: Non-standard extension. If an element is inserted it might invalidate elements.','line_number':1664,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()).','line_number':1670,'multiline':False]['text':'!','line_number':1671,'multiline':False]['text':'! <b>Complexity</b>: N log(N).','line_number':1672,'multiline':False]['text':'!','line_number':1673,'multiline':False]['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1674,'multiline':False]['text':'! <b>Requires</b>: Range [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1678,'multiline':False]['text':'!','line_number':1679,'multiline':False]['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()). This function','line_number':1680,'multiline':False]['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1681,'multiline':False]['text':'!','line_number':1682,'multiline':False]['text':'! <b>Complexity</b>: Linear.','line_number':1683,'multiline':False]['text':'!','line_number':1684,'multiline':False]['text':'! <b>Note</b>: Non-standard extension. If an element is inserted it might invalidate elements.','line_number':1685,'multiline':False]['text':'! @copydoc ::boost::container::flat_multimap::merge(flat_multimap<Key, T, C2, AllocatorOrContainer>&)','line_number':1690,'multiline':False]['text':'! @copydoc ::boost::container::flat_multiset::merge(flat_multiset<Key, C2, AllocatorOrContainer>&)','line_number':1695,'multiline':False]['text':'! @copydoc ::boost::container::flat_multimap::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':1700,'multiline':False]['text':'! @copydoc ::boost::container::flat_multiset::merge(flat_set<Key, C2, AllocatorOrContainer>&)','line_number':1705,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::erase(const_iterator)','line_number':1712,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::erase(const key_type&)','line_number':1715,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::erase(const_iterator,const_iterator)','line_number':1718,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::swap','line_number':1721,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::clear','line_number':1726,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::key_comp','line_number':1729,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::value_comp','line_number':1732,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::find(const key_type& )','line_number':1735,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::find(const key_type& ) const','line_number':1738,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::nth(size_type)','line_number':1741,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::nth(size_type) const','line_number':1744,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::index_of(iterator)','line_number':1747,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::index_of(const_iterator) const','line_number':1750,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::count(const key_type& ) const','line_number':1753,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::contains(const key_type& ) const','line_number':1756,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::contains(const K& ) const','line_number':1759,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::lower_bound(const key_type& )','line_number':1763,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::lower_bound(const key_type& ) const','line_number':1766,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::upper_bound(const key_type& )','line_number':1769,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::upper_bound(const key_type& ) const','line_number':1772,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::equal_range(const key_type& ) const','line_number':1775,'multiline':False]['text':'! @copydoc ::boost::container::flat_set::equal_range(const key_type& )','line_number':1778,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1781,'multiline':False]['text':'!','line_number':1782,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1783,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1786,'multiline':False]['text':'!','line_number':1787,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1788,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1791,'multiline':False]['text':'!','line_number':1792,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1793,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1796,'multiline':False]['text':'!','line_number':1797,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1798,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1801,'multiline':False]['text':'!','line_number':1802,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1803,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1806,'multiline':False]['text':'!','line_number':1807,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1808,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1811,'multiline':False]['text':'!','line_number':1812,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1813,'multiline':False]['text':'! <b>Effects</b>: Extracts the internal sequence container.','line_number':1818,'multiline':False]['text':'!','line_number':1819,'multiline':False]['text':'! <b>Complexity</b>: Same as the move constructor of sequence_type, usually constant.','line_number':1820,'multiline':False]['text':'!','line_number':1821,'multiline':False]['text':'! <b>Postcondition</b>: this->empty()','line_number':1822,'multiline':False]['text':'!','line_number':1823,'multiline':False]['text':'! <b>Throws</b>: If secuence_type's move constructor throws ','line_number':1824,'multiline':False]['text':'#ifdef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1827,'multiline':False]['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1829,'multiline':False]['text':'!   one passed externally using the move assignment.','line_number':1830,'multiline':False]['text':'!','line_number':1831,'multiline':False]['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(NlogN) with N = seq.size()','line_number':1832,'multiline':False]['text':'!','line_number':1833,'multiline':False]['text':'! <b>Throws</b>: If the comparison or the move constructor throws','line_number':1834,'multiline':False]['text':'! <b>Requires</b>: seq shall be ordered according to this->compare()','line_number':1838,'multiline':False]['text':'!','line_number':1839,'multiline':False]['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1840,'multiline':False]['text':'!   one passed externally using the move assignment.','line_number':1841,'multiline':False]['text':'!','line_number':1842,'multiline':False]['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(1)','line_number':1843,'multiline':False]['text':'!','line_number':1844,'multiline':False]['text':'! <b>Throws</b>: If the move assignment throws','line_number':1845,'multiline':False]['text':' Compare','line_number':1860,'multiline':False]['text':' Allocator','line_number':1865,'multiline':False]['text':' Compare','line_number':1887,'multiline':False]['text':' Allocator','line_number':1892,'multiline':False]['text':'namespace container {','line_number':1911,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1913,'multiline':False]['text':'!specialization for optimizations','line_number':1914,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1924,'multiline':False]['text':' BOOST_CONTAINER_FLAT_SET_HPP','line_number':1930,'multiline':False]