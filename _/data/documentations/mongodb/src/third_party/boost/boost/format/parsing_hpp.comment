['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' parsing.hpp :  implementation of the parsing member functions','line_number':2,'multiline':False]['text':'                      ( parse, parse_printf_directive)','line_number':3,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':4,'multiline':False]['text':'  Copyright Samuel Krempp 2003. Use, modification, and distribution are','line_number':6,'multiline':False]['text':'  subject to the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' see http://www.boost.org/libs/format for library home page','line_number':10,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':12,'multiline':False]['text':' streams will be used for narrow / widen. but these methods are not const','line_number':30,'multiline':False]['text':' Input : [start, last) iterators range and a','line_number':66,'multiline':False]['text':'          a Facet to use its widen/narrow member function','line_number':67,'multiline':False]['text':' Effects : read sequence and convert digits into integral n, of type Res','line_number':68,'multiline':False]['text':' Returns : n','line_number':69,'multiline':False]['text':' cant fail.','line_number':78,'multiline':False]['text':' 22.2.1.1.2.13 of the C++ standard','line_number':80,'multiline':False]['text':' auxiliary func called by parse_printf_directive','line_number':85,'multiline':False]['text':' for centralising error handling','line_number':86,'multiline':False]['text':' it either throws if user sets the corresponding flag, or does nothing.','line_number':87,'multiline':False]['text':' Input: the position of a printf-directive in the format-string','line_number':96,'multiline':False]['text':'    a basic_ios& merely to use its widen/narrow member function','line_number':97,'multiline':False]['text':'    a bitset'exceptions' telling whether to throw exceptions on errors.','line_number':98,'multiline':False]['text':' Returns:','line_number':99,'multiline':False]['text':'  true if parse succeeded (ignore some errors if exceptions disabled)','line_number':100,'multiline':False]['text':'  false if it failed so bad that the directive should be printed verbatim','line_number':101,'multiline':False]['text':' Effects:','line_number':102,'multiline':False]['text':'  start is incremented so that *start is the first char after','line_number':103,'multiline':False]['text':'     this directive','line_number':104,'multiline':False]['text':'  *fpar is set with the parameters read in the directive','line_number':105,'multiline':False]['text':' if no positional-directive','line_number':114,'multiline':False]['text':' empty directive : this is a trailing %','line_number':121,'multiline':False]['text':' the flag '0' would be picked as a digit for argument order, but here it's a flag :','line_number':134,'multiline':False]['text':' handle argument order (%2$d)  or possibly width specification: %2d','line_number':138,'multiline':False]['text':' %N% case : this is already the end of the directive','line_number':147,'multiline':False]['text':' non-positional directive','line_number':161,'multiline':False]['text':' handle flags','line_number':169,'multiline':False]['text':' as long as char is one of + - = _ # 0 or ' '','line_number':170,'multiline':False]['text':' no effect yet. (painful to implement)','line_number':173,'multiline':False]['text':' need to know alignment before really setting flags,','line_number':191,'multiline':False]['text':' so just add 'zeropad' flag for now, it will be processed later.','line_number':192,'multiline':False]['text':' loop on flag.','line_number':201,'multiline':False]['text':' first skip 'asterisk fields' : * or num (length)','line_number':208,'multiline':False]['text':' handle precision spec','line_number':220,'multiline':False]['text':' argument type modifiers','line_number':233,'multiline':False]['text':' boost::format ignores argument type modifiers as it relies on','line_number':241,'multiline':False]['text':' the type of the argument fed into it by operator %','line_number':242,'multiline':False]['text':' Note that the ptrdiff_t argument type 't' from C++11 is not honored','line_number':245,'multiline':False]['text':' because it was already in use as the tabulation specifier in boost::format','line_number':246,'multiline':False]['text':' case 't':','line_number':247,'multiline':False]['text':' Microsoft extensions:','line_number':249,'multiline':False]['text':' https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx','line_number':250,'multiline':False]['text':' loop on argument type modifiers to pick up 'hh', 'll', and the more complex microsoft ones','line_number':292,'multiline':False]['text':' The default flags are "dec" and "skipws"','line_number':305,'multiline':False]['text':' so if changing the base, need to unset basefield first','line_number':306,'multiline':False]['text':' Boolean','line_number':310,'multiline':False]['text':' Decimal','line_number':315,'multiline':False]['text':' Defaults are sufficient','line_number':319,'multiline':False]['text':' Hex','line_number':322,'multiline':False]['text':' pointer => set hex.','line_number':327,'multiline':False]['text':' Octal','line_number':332,'multiline':False]['text':' Floating','line_number':338,'multiline':False]['text':' default flags are correct here','line_number':363,'multiline':False]['text':' Tabulation (a boost::format extension)','line_number':366,'multiline':False]['text':' Character','line_number':384,'multiline':False]['text':' String','line_number':390,'multiline':False]['text':' handle truncation manually, with own parameter.','line_number':393,'multiline':False]['text':' default stream precision.','line_number':395,'multiline':False]['text':' %n is insecure and ignored by boost::format','line_number':398,'multiline':False]['text':' -end parse_printf_directive()','line_number':417,'multiline':False]['text':' quick-parsing of the format-string to count arguments mark (arg_mark, '%')','line_number':425,'multiline':False]['text':' returns : upper bound on the number of format items in the format strings','line_number':426,'multiline':False]['text':' must not end in ".. %"','line_number':433,'multiline':False]['text':' escaped "%%"','line_number':439,'multiline':False]['text':' in case of %N% directives, dont count it double (wastes allocations..) :','line_number':444,'multiline':False]['text':' detail namespace','line_number':459,'multiline':False]['text':' io namespace','line_number':460,'multiline':False]['text':' -----------------------------------------------','line_number':464,'multiline':False]['text':'  format :: parse(..)','line_number':465,'multiline':False]['text':' parse the format-string','line_number':470,'multiline':False]['text':'has widen and narrow even on compilers without locale','line_number':476,'multiline':False]['text':' A: find upper_bound on num_items and allocates arrays','line_number':483,'multiline':False]['text':' B: Now the real parsing of the format string :','line_number':487,'multiline':False]['text':' escaped mark, '%%'','line_number':495,'multiline':False]['text':' the directive will be printed verbatim','line_number':511,'multiline':False]['text':' process complex options, like zeropad, into params','line_number':514,'multiline':False]['text':' loop on %'s','line_number':525,'multiline':False]['text':' store the final piece of string','line_number':528,'multiline':False]['text':' dont mix positional with non-positionnal directives','line_number':535,'multiline':False]['text':' else do nothing. => positionnal arguments are processed as non-positionnal','line_number':539,'multiline':False]['text':' set things like it would have been with positional directives :','line_number':541,'multiline':False]['text':' C: set some member data :','line_number':551,'multiline':False]['text':' namespace boost','line_number':561,'multiline':False]['text':'  BOOST_FORMAT_PARSING_HPP','line_number':564,'multiline':False]