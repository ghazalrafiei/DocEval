['text':'  Boost string_algo library predicate.hpp header file  ---------------------------//','line_number':1,'multiline':False]['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':'! \file boost/algorithm/string/predicate.hpp
    Defines string-related predicates. 
    The predicates determine whether a substring is contained in the input string 
    under various conditions: a string starts with the substring, ends with the 
    substring, simply contains the substring or if both strings are equal.
    Additionaly the algorithm \c all() checks all elements of a container to satisfy a 
    condition.

    All predicates provide the strong exception guarantee.
','line_number':27,'multiline':True]['text':'  starts_with predicate  -----------------------------------------------//','line_number':41,'multiline':False]['text':'! 'Starts with' predicate','line_number':43,'multiline':False]['text':'!
            This predicate holds when the test string is a prefix of the Input.
            In other words, if the input starts with the test.
            When the optional predicate is specified, it is used for character-wise
            comparison.

            \param Input An input sequence
            \param Test A test sequence
            \param Comp An element comparison predicate
            \return The result of the test

              \note This function provides the strong exception-safety guarantee
        ','line_number':44,'multiline':True]['text':'! 'Starts with' predicate','line_number':87,'multiline':False]['text':'!
            \overload
        ','line_number':88,'multiline':True]['text':'! 'Starts with' predicate ( case insensitive )','line_number':99,'multiline':False]['text':'!
            This predicate holds when the test string is a prefix of the Input.
            In other words, if the input starts with the test.
            Elements are compared case insensitively.

            \param Input An input sequence
            \param Test A test sequence
            \param Loc A locale used for case insensitive comparison
            \return The result of the test

            \note This function provides the strong exception-safety guarantee
        ','line_number':100,'multiline':True]['text':'  ends_with predicate  -----------------------------------------------//','line_number':122,'multiline':False]['text':'! 'Ends with' predicate','line_number':124,'multiline':False]['text':'!
            This predicate holds when the test string is a suffix of the Input.
            In other words, if the input ends with the test.
            When the optional predicate is specified, it is used for character-wise
            comparison.


            \param Input An input sequence
            \param Test A test sequence
            \param Comp An element comparison predicate
            \return The result of the test

              \note This function provides the strong exception-safety guarantee
        ','line_number':125,'multiline':True]['text':'! 'Ends with' predicate','line_number':164,'multiline':False]['text':'!
            \overload
        ','line_number':165,'multiline':True]['text':'! 'Ends with' predicate ( case insensitive )','line_number':176,'multiline':False]['text':'!
            This predicate holds when the test container is a suffix of the Input.
            In other words, if the input ends with the test.
            Elements are compared case insensitively.

            \param Input An input sequence
            \param Test A test sequence
            \param Loc A locale used for case insensitive comparison
            \return The result of the test

            \note This function provides the strong exception-safety guarantee
        ','line_number':177,'multiline':True]['text':'  contains predicate  -----------------------------------------------//','line_number':198,'multiline':False]['text':'! 'Contains' predicate','line_number':200,'multiline':False]['text':'!
            This predicate holds when the test container is contained in the Input.
            When the optional predicate is specified, it is used for character-wise
            comparison.

            \param Input An input sequence
            \param Test A test sequence
            \param Comp An element comparison predicate
            \return The result of the test

               \note This function provides the strong exception-safety guarantee
        ','line_number':201,'multiline':True]['text':' Empty range is contained always','line_number':224,'multiline':False]['text':' Use the temporary variable to make VACPP happy','line_number':228,'multiline':False]['text':'! 'Contains' predicate','line_number':233,'multiline':False]['text':'!
            \overload
        ','line_number':234,'multiline':True]['text':'! 'Contains' predicate ( case insensitive )','line_number':245,'multiline':False]['text':'!
            This predicate holds when the test container is contained in the Input.
            Elements are compared case insensitively.

            \param Input An input sequence
            \param Test A test sequence
            \param Loc A locale used for case insensitive comparison
            \return The result of the test

            \note This function provides the strong exception-safety guarantee
        ','line_number':246,'multiline':True]['text':'  equals predicate  -----------------------------------------------//','line_number':266,'multiline':False]['text':'! 'Equals' predicate','line_number':268,'multiline':False]['text':'!
            This predicate holds when the test container is equal to the
            input container i.e. all elements in both containers are same.
            When the optional predicate is specified, it is used for character-wise
            comparison.

            \param Input An input sequence
            \param Test A test sequence
            \param Comp An element comparison predicate
            \return The result of the test

            \note This is a two-way version of \c std::equal algorithm

            \note This function provides the strong exception-safety guarantee
        ','line_number':269,'multiline':True]['text':'! 'Equals' predicate','line_number':314,'multiline':False]['text':'!
            \overload
        ','line_number':315,'multiline':True]['text':'! 'Equals' predicate ( case insensitive )','line_number':326,'multiline':False]['text':'!
            This predicate holds when the test container is equal to the
            input container i.e. all elements in both containers are same.
            Elements are compared case insensitively.

            \param Input An input sequence
            \param Test A test sequence
            \param Loc A locale used for case insensitive comparison
            \return The result of the test

            \note This is a two-way version of \c std::equal algorithm

            \note This function provides the strong exception-safety guarantee
        ','line_number':327,'multiline':True]['text':' lexicographical_compare predicate -----------------------------//','line_number':350,'multiline':False]['text':'! Lexicographical compare predicate','line_number':352,'multiline':False]['text':'!
             This predicate is an overload of std::lexicographical_compare
             for range arguments

             It check whether the first argument is lexicographically less
             then the second one.

             If the optional predicate is specified, it is used for character-wise
             comparison

             \param Arg1 First argument 
             \param Arg2 Second argument
             \param Pred Comparison predicate
             \return The result of the test

             \note This function provides the strong exception-safety guarantee
         ','line_number':353,'multiline':True]['text':'! Lexicographical compare predicate','line_number':387,'multiline':False]['text':'!
            \overload
         ','line_number':388,'multiline':True]['text':'! Lexicographical compare predicate (case-insensitive)','line_number':399,'multiline':False]['text':'!
            This predicate is an overload of std::lexicographical_compare
            for range arguments.
            It check whether the first argument is lexicographically less
            then the second one.
            Elements are compared case insensitively


             \param Arg1 First argument 
             \param Arg2 Second argument
             \param Loc A locale used for case insensitive comparison
             \return The result of the test

             \note This function provides the strong exception-safety guarantee
         ','line_number':400,'multiline':True]['text':'  all predicate  -----------------------------------------------//','line_number':425,'multiline':False]['text':'! 'All' predicate','line_number':427,'multiline':False]['text':'!
            This predicate holds it all its elements satisfy a given 
            condition, represented by the predicate.
            
            \param Input An input sequence
            \param Pred A predicate
            \return The result of the test

            \note This function provides the strong exception-safety guarantee
        ','line_number':428,'multiline':True]['text':' namespace algorithm','line_number':458,'multiline':False]['text':' pull names to the boost namespace','line_number':460,'multiline':False]['text':' namespace boost','line_number':473,'multiline':False]['text':' BOOST_STRING_PREDICATE_HPP','line_number':476,'multiline':False]