['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':' width_of.hpp','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':4,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':11,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':34,'multiline':False]['text':' add_widths','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':57,'multiline':False]['text':' or_widths','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':70,'multiline':False]['text':' width_of_terminal','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' xpressive literals','line_number':75,'multiline':False]['text':' unknown literals (eg, basic_string, basic_regex, etc.)','line_number':80,'multiline':False]['text':' char literals','line_number':85,'multiline':False]['text':' char literals','line_number':90,'multiline':False]['text':' char literals','line_number':95,'multiline':False]['text':' string literals','line_number':100,'multiline':False]['text':' string literals','line_number':105,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':108,'multiline':False]['text':' width_of','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' either (s1 = ...) or (a1 = ...) or (set = ...)','line_number':155,'multiline':False]['text':' keep() is used to turn off backtracking, so they should only be used','line_number':182,'multiline':False]['text':' for things that are variable-width (eg. quantified)','line_number':183,'multiline':False]['text':' TODO: keep() now has a second meaning: execute actions immediately.','line_number':188,'multiline':False]['text':' In that sense, it is perfectly reasonable to put a fixed-width','line_number':189,'multiline':False]['text':' sub-expression in a keep. Can fixed-width keep() sub-expressions','line_number':190,'multiline':False]['text':' use the simple_repeat_matcher?','line_number':191,'multiline':False]['text':' when complementing a set or an assertion, the width is that of the set (1) or the assertion (0)','line_number':231,'multiline':False]['text':' The comma is used in list-initialized sets, and the width of sets are 1','line_number':237,'multiline':False]['text':' The subscript operator[] is used for sets, as in set['a' | range('b','h')],','line_number':243,'multiline':False]['text':' or for actions as in (any >> expr)[ action ]','line_number':244,'multiline':False]['text':' If Left is "set" then make sure that Right has a width_of 1','line_number':254,'multiline':False]['text':' namespace boost::xpressive::detail','line_number':266,'multiline':False]