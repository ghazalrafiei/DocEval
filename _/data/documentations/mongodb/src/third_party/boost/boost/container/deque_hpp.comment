['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':23,'multiline':False]['text':'new_allocator','line_number':26,'multiline':False]['text':' container/detail','line_number':29,'multiline':False]['text':'algo_equal(), algo_lexicographical_compare','line_number':31,'multiline':False]['text':' move','line_number':41,'multiline':False]['text':' move/detail','line_number':46,'multiline':False]['text':' other','line_number':51,'multiline':False]['text':' std','line_number':54,'multiline':False]['text':' Class invariants:','line_number':86,'multiline':False]['text':'  For any nonsingular iterator i:','line_number':87,'multiline':False]['text':'    i.node is the address of an element in the map array.  The','line_number':88,'multiline':False]['text':'      contents of i.node is a pointer to the beginning of a node.','line_number':89,'multiline':False]['text':'    i.first == //(i.node)','line_number':90,'multiline':False]['text':'    i.last  == i.first + node_size','line_number':91,'multiline':False]['text':'    i.cur is a pointer in the range [i.first, i.last).  NOTE:','line_number':92,'multiline':False]['text':'      the implication of this is that i.cur is always a dereferenceable','line_number':93,'multiline':False]['text':'      pointer, even if i is a past-the-end iterator.','line_number':94,'multiline':False]['text':'  Start and Finish are always nonsingular iterators.  NOTE: this means','line_number':95,'multiline':False]['text':'    that an empty deque must have one node, and that a deque','line_number':96,'multiline':False]['text':'    with N elements, where N is the buffer size, must have two nodes.','line_number':97,'multiline':False]['text':'  For every node other than start.node and finish.node, every element','line_number':98,'multiline':False]['text':'    in the node is an initialized object.  If start.node == finish.node,','line_number':99,'multiline':False]['text':'    then [start.cur, finish.cur) are initialized objects, and','line_number':100,'multiline':False]['text':'    the elements outside that range are uninitialized storage.  Otherwise,','line_number':101,'multiline':False]['text':'    [start.cur, start.last) and [finish.first, finish.cur) are initialized','line_number':102,'multiline':False]['text':'    objects, and [start.first, start.cur) and [finish.cur, finish.last)','line_number':103,'multiline':False]['text':'    are uninitialized storage.','line_number':104,'multiline':False]['text':'  [map, map + map_size) is a valid, non-empty range.','line_number':105,'multiline':False]['text':'  [start.node, finish.node] is a valid range contained within','line_number':106,'multiline':False]['text':'    [map, map + map_size).','line_number':107,'multiline':False]['text':'  A pointer in the range [map, map + map_size) points to an allocated node','line_number':108,'multiline':False]['text':'    if and only if the pointer is in the range [start.node, finish.node].','line_number':109,'multiline':False]['text':'Value initialization to achieve "null iterators" (N3644)','line_number':160,'multiline':False]['text':'Comparisons','line_number':277,'multiline':False]['text':'namespace dtl {','line_number':317,'multiline':False]['text':' Deque base class.  It has two purposes.  First, its constructor','line_number':331,'multiline':False]['text':'  and destructor allocate (but don't initialize) storage.  This makes','line_number':332,'multiline':False]['text':'  exception safety easier.','line_number':333,'multiline':False]['text':'      if(num_elements){','line_number':428,'multiline':False]['text':'      }','line_number':452,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':532,'multiline':False]['text':'! A double-ended queue is a sequence that supports random access to elements, constant time insertion','line_number':535,'multiline':False]['text':'! and removal of elements at the end of the sequence, and linear time insertion and removal of elements in the middle.','line_number':536,'multiline':False]['text':'!','line_number':537,'multiline':False]['text':'! \tparam T The type of object that is stored in the deque','line_number':538,'multiline':False]['text':'! \tparam A The allocator used for all internal memory management, use void','line_number':539,'multiline':False]['text':'!   for the default allocator','line_number':540,'multiline':False]['text':'! \tparam Options A type produced from \c boost::container::deque_options.','line_number':541,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':551,'multiline':False]['text':'////////////////////////////////////////////','line_number':557,'multiline':False]['text':'','line_number':558,'multiline':False]['text':'                    types','line_number':559,'multiline':False]['text':'','line_number':560,'multiline':False]['text':'////////////////////////////////////////////','line_number':561,'multiline':False]['text':' Internal typedefs','line_number':579,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':584,'multiline':False]['text':'////////////////////////////////////////////','line_number':593,'multiline':False]['text':'','line_number':594,'multiline':False]['text':'          construct/copy/destroy','line_number':595,'multiline':False]['text':'','line_number':596,'multiline':False]['text':'////////////////////////////////////////////','line_number':597,'multiline':False]['text':'! <b>Effects</b>: Default constructors a deque.','line_number':599,'multiline':False]['text':'!','line_number':600,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor throws.','line_number':601,'multiline':False]['text':'!','line_number':602,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':603,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque taking the allocator as parameter.','line_number':609,'multiline':False]['text':'!','line_number':610,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':611,'multiline':False]['text':'!','line_number':612,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':613,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque','line_number':618,'multiline':False]['text':'!   and inserts n value initialized values.','line_number':619,'multiline':False]['text':'!','line_number':620,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':621,'multiline':False]['text':'!   throws or T's value initialization throws.','line_number':622,'multiline':False]['text':'!','line_number':623,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':624,'multiline':False]['text':'deque_base will deallocate in case of exception...','line_number':630,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque','line_number':633,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':634,'multiline':False]['text':'!','line_number':635,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':636,'multiline':False]['text':'!   throws or T's default initialization or copy constructor throws.','line_number':637,'multiline':False]['text':'!','line_number':638,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':639,'multiline':False]['text':'!','line_number':640,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':641,'multiline':False]['text':'deque_base will deallocate in case of exception...','line_number':647,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':650,'multiline':False]['text':'!   and inserts n value initialized values.','line_number':651,'multiline':False]['text':'!','line_number':652,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':653,'multiline':False]['text':'!   throws or T's value initialization throws.','line_number':654,'multiline':False]['text':'!','line_number':655,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':656,'multiline':False]['text':'deque_base will deallocate in case of exception...','line_number':662,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':665,'multiline':False]['text':'!   and inserts n default initialized values.','line_number':666,'multiline':False]['text':'!','line_number':667,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':668,'multiline':False]['text':'!   throws or T's default initialization or copy constructor throws.','line_number':669,'multiline':False]['text':'!','line_number':670,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':671,'multiline':False]['text':'!','line_number':672,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':673,'multiline':False]['text':'deque_base will deallocate in case of exception...','line_number':679,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':682,'multiline':False]['text':'!   and inserts n copies of value.','line_number':683,'multiline':False]['text':'!','line_number':684,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':685,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':686,'multiline':False]['text':'!','line_number':687,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':688,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':693,'multiline':False]['text':'!   and inserts n copies of value.','line_number':694,'multiline':False]['text':'!','line_number':695,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':696,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':697,'multiline':False]['text':'!','line_number':698,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':699,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':704,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the deque.','line_number':705,'multiline':False]['text':'!','line_number':706,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':707,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':708,'multiline':False]['text':'!','line_number':709,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':710,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':723,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the deque.','line_number':724,'multiline':False]['text':'!','line_number':725,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':726,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':727,'multiline':False]['text':'!','line_number':728,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':729,'multiline':False]['text':'! <b>Effects</b>: Constructs a deque that will use a copy of allocator a','line_number':743,'multiline':False]['text':'!   and inserts a copy of the range [il.begin(), il.end()) in the deque.','line_number':744,'multiline':False]['text':'!','line_number':745,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':746,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced std::initializer_list iterator throws.','line_number':747,'multiline':False]['text':'!','line_number':748,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':749,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a deque.','line_number':757,'multiline':False]['text':'!','line_number':758,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':759,'multiline':False]['text':'!','line_number':760,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':761,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':772,'multiline':False]['text':'!','line_number':773,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':774,'multiline':False]['text':'!','line_number':775,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':776,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a vector using the specified allocator.','line_number':781,'multiline':False]['text':'!','line_number':782,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':783,'multiline':False]['text':'!','line_number':784,'multiline':False]['text':'! <b>Throws</b>: If allocation','line_number':785,'multiline':False]['text':'!   throws or T's copy constructor throws.','line_number':786,'multiline':False]['text':'!','line_number':787,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':788,'multiline':False]['text':'! <b>Effects</b>: Move constructor using the specified allocator.','line_number':799,'multiline':False]['text':'!                 Moves x's resources to *this if a == allocator_type().','line_number':800,'multiline':False]['text':'!                 Otherwise copies values from x to *this.','line_number':801,'multiline':False]['text':'!','line_number':802,'multiline':False]['text':'! <b>Throws</b>: If allocation or T's copy constructor throws.','line_number':803,'multiline':False]['text':'!','line_number':804,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':805,'multiline':False]['text':'! <b>Effects</b>: Destroys the deque. All stored values are destroyed','line_number':822,'multiline':False]['text':'!   and used memory is deallocated.','line_number':823,'multiline':False]['text':'!','line_number':824,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':825,'multiline':False]['text':'!','line_number':826,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements.','line_number':827,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':833,'multiline':False]['text':'!','line_number':834,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':835,'multiline':False]['text':'! of each of x's elements.','line_number':836,'multiline':False]['text':'!','line_number':837,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':838,'multiline':False]['text':'!','line_number':839,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':840,'multiline':False]['text':'! <b>Effects</b>: Move assignment. All x's values are transferred to *this.','line_number':859,'multiline':False]['text':'!','line_number':860,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':861,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':862,'multiline':False]['text':'!','line_number':863,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':864,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':865,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':866,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':878,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':879,'multiline':False]['text':'Destroy objects but retain memory in case x reuses it in the future','line_number':881,'multiline':False]['text':'Move allocator if needed','line_number':883,'multiline':False]['text':'Nothrow swap','line_number':886,'multiline':False]['text':'Else do a one by one move','line_number':889,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as il.','line_number':899,'multiline':False]['text':'!','line_number':900,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == il.size(). *this contains a copy','line_number':901,'multiline':False]['text':'! of each of x's elements.','line_number':902,'multiline':False]['text':'!','line_number':903,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':904,'multiline':False]['text':'!','line_number':905,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in il.','line_number':906,'multiline':False]['text':'! <b>Effects</b>: Assigns the n copies of val to *this.','line_number':914,'multiline':False]['text':'!','line_number':915,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':916,'multiline':False]['text':'!','line_number':917,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':918,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [first, last) to *this.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':926,'multiline':False]['text':'!   T's constructor from dereferencing InIt throws.','line_number':927,'multiline':False]['text':'!','line_number':928,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':929,'multiline':False]['text':'! <b>Effects</b>: Assigns the the range [il.begin(), il.end()) to *this.','line_number':977,'multiline':False]['text':'!','line_number':978,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':979,'multiline':False]['text':'!   T's constructor from dereferencing std::initializer_list iterator throws.','line_number':980,'multiline':False]['text':'!','line_number':981,'multiline':False]['text':'! <b>Complexity</b>: Linear to il.size().','line_number':982,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':987,'multiline':False]['text':'!','line_number':988,'multiline':False]['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':991,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':996,'multiline':False]['text':'!','line_number':997,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':998,'multiline':False]['text':'!','line_number':999,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1000,'multiline':False]['text':'!','line_number':1001,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1002,'multiline':False]['text':'////////////////////////////////////////////','line_number':1007,'multiline':False]['text':'','line_number':1008,'multiline':False]['text':'                iterators','line_number':1009,'multiline':False]['text':'','line_number':1010,'multiline':False]['text':'////////////////////////////////////////////','line_number':1011,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':1013,'multiline':False]['text':'!','line_number':1014,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1015,'multiline':False]['text':'!','line_number':1016,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1017,'multiline':False]['text':'!','line_number':1018,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':1019,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the deque.','line_number':1024,'multiline':False]['text':'!','line_number':1025,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1026,'multiline':False]['text':'!','line_number':1027,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1028,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the deque.','line_number':1033,'multiline':False]['text':'!','line_number':1034,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1035,'multiline':False]['text':'!','line_number':1036,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1037,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the deque.','line_number':1042,'multiline':False]['text':'!','line_number':1043,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1044,'multiline':False]['text':'!','line_number':1045,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1046,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the deque.','line_number':1051,'multiline':False]['text':'!','line_number':1052,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1053,'multiline':False]['text':'!','line_number':1054,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1055,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':1060,'multiline':False]['text':'! of the reversed deque.','line_number':1061,'multiline':False]['text':'!','line_number':1062,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1063,'multiline':False]['text':'!','line_number':1064,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1065,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1070,'multiline':False]['text':'! of the reversed deque.','line_number':1071,'multiline':False]['text':'!','line_number':1072,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1073,'multiline':False]['text':'!','line_number':1074,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1075,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':1080,'multiline':False]['text':'! of the reversed deque.','line_number':1081,'multiline':False]['text':'!','line_number':1082,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1083,'multiline':False]['text':'!','line_number':1084,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1085,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1090,'multiline':False]['text':'! of the reversed deque.','line_number':1091,'multiline':False]['text':'!','line_number':1092,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1093,'multiline':False]['text':'!','line_number':1094,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1095,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the deque.','line_number':1100,'multiline':False]['text':'!','line_number':1101,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1102,'multiline':False]['text':'!','line_number':1103,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1104,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the deque.','line_number':1109,'multiline':False]['text':'!','line_number':1110,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1111,'multiline':False]['text':'!','line_number':1112,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1113,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1118,'multiline':False]['text':'! of the reversed deque.','line_number':1119,'multiline':False]['text':'!','line_number':1120,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1121,'multiline':False]['text':'!','line_number':1122,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1123,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1128,'multiline':False]['text':'! of the reversed deque.','line_number':1129,'multiline':False]['text':'!','line_number':1130,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1131,'multiline':False]['text':'!','line_number':1132,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1133,'multiline':False]['text':'////////////////////////////////////////////','line_number':1138,'multiline':False]['text':'','line_number':1139,'multiline':False]['text':'                capacity','line_number':1140,'multiline':False]['text':'','line_number':1141,'multiline':False]['text':'////////////////////////////////////////////','line_number':1142,'multiline':False]['text':'! <b>Effects</b>: Returns true if the deque contains no elements.','line_number':1144,'multiline':False]['text':'!','line_number':1145,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1146,'multiline':False]['text':'!','line_number':1147,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1148,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the deque.','line_number':1153,'multiline':False]['text':'!','line_number':1154,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1155,'multiline':False]['text':'!','line_number':1156,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1157,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the deque.','line_number':1162,'multiline':False]['text':'!','line_number':1163,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1164,'multiline':False]['text':'!','line_number':1165,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1166,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1171,'multiline':False]['text':'!   the size becomes n. New elements are value initialized.','line_number':1172,'multiline':False]['text':'!','line_number':1173,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's constructor throws.','line_number':1174,'multiline':False]['text':'!','line_number':1175,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1176,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1189,'multiline':False]['text':'!   the size becomes n. New elements are default initialized.','line_number':1190,'multiline':False]['text':'!','line_number':1191,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's constructor throws.','line_number':1192,'multiline':False]['text':'!','line_number':1193,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1194,'multiline':False]['text':'!','line_number':1195,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1196,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1209,'multiline':False]['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':1210,'multiline':False]['text':'!','line_number':1211,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':1212,'multiline':False]['text':'!','line_number':1213,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1214,'multiline':False]['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':1224,'multiline':False]['text':'!   with previous allocations. The size of the deque is unchanged','line_number':1225,'multiline':False]['text':'!','line_number':1226,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1227,'multiline':False]['text':'!','line_number':1228,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1229,'multiline':False]['text':'This deque implementation already','line_number':1232,'multiline':False]['text':'deallocates excess nodes when erasing','line_number':1233,'multiline':False]['text':'so there is nothing to do except for','line_number':1234,'multiline':False]['text':'empty deque','line_number':1235,'multiline':False]['text':'////////////////////////////////////////////','line_number':1241,'multiline':False]['text':'','line_number':1242,'multiline':False]['text':'               element access','line_number':1243,'multiline':False]['text':'','line_number':1244,'multiline':False]['text':'////////////////////////////////////////////','line_number':1245,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1247,'multiline':False]['text':'!','line_number':1248,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first','line_number':1249,'multiline':False]['text':'!   element of the container.','line_number':1250,'multiline':False]['text':'!','line_number':1251,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1252,'multiline':False]['text':'!','line_number':1253,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1254,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1262,'multiline':False]['text':'!','line_number':1263,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first element','line_number':1264,'multiline':False]['text':'!   from the beginning of the container.','line_number':1265,'multiline':False]['text':'!','line_number':1266,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1267,'multiline':False]['text':'!','line_number':1268,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1269,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1277,'multiline':False]['text':'!','line_number':1278,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the last','line_number':1279,'multiline':False]['text':'!   element of the container.','line_number':1280,'multiline':False]['text':'!','line_number':1281,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1282,'multiline':False]['text':'!','line_number':1283,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1284,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':1292,'multiline':False]['text':'!','line_number':1293,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the last','line_number':1294,'multiline':False]['text':'!   element of the container.','line_number':1295,'multiline':False]['text':'!','line_number':1296,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1297,'multiline':False]['text':'!','line_number':1298,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1299,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1307,'multiline':False]['text':'!','line_number':1308,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1309,'multiline':False]['text':'!   from the beginning of the container.','line_number':1310,'multiline':False]['text':'!','line_number':1311,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1312,'multiline':False]['text':'!','line_number':1313,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1314,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1322,'multiline':False]['text':'!','line_number':1323,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1324,'multiline':False]['text':'!   from the beginning of the container.','line_number':1325,'multiline':False]['text':'!','line_number':1326,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1327,'multiline':False]['text':'!','line_number':1328,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1329,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1337,'multiline':False]['text':'!','line_number':1338,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the nth element','line_number':1339,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1340,'multiline':False]['text':'!   if n == size().','line_number':1341,'multiline':False]['text':'!','line_number':1342,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1343,'multiline':False]['text':'!','line_number':1344,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1345,'multiline':False]['text':'!','line_number':1346,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1347,'multiline':False]['text':'! <b>Requires</b>: size() >= n.','line_number':1355,'multiline':False]['text':'!','line_number':1356,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the nth element','line_number':1357,'multiline':False]['text':'!   from the beginning of the container. Returns end()','line_number':1358,'multiline':False]['text':'!   if n == size().','line_number':1359,'multiline':False]['text':'!','line_number':1360,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1361,'multiline':False]['text':'!','line_number':1362,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1363,'multiline':False]['text':'!','line_number':1364,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1365,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1373,'multiline':False]['text':'!','line_number':1374,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1375,'multiline':False]['text':'!   and size() if p == end().','line_number':1376,'multiline':False]['text':'!','line_number':1377,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1378,'multiline':False]['text':'!','line_number':1379,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1380,'multiline':False]['text':'!','line_number':1381,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1382,'multiline':False]['text':'Range checked priv_index_of','line_number':1386,'multiline':False]['text':'! <b>Requires</b>: begin() <= p <= end().','line_number':1390,'multiline':False]['text':'!','line_number':1391,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the element pointed by p','line_number':1392,'multiline':False]['text':'!   and size() if p == end().','line_number':1393,'multiline':False]['text':'!','line_number':1394,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1395,'multiline':False]['text':'!','line_number':1396,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1397,'multiline':False]['text':'!','line_number':1398,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1399,'multiline':False]['text':'Range checked priv_index_of','line_number':1403,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1407,'multiline':False]['text':'!','line_number':1408,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1409,'multiline':False]['text':'!   from the beginning of the container.','line_number':1410,'multiline':False]['text':'!','line_number':1411,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1412,'multiline':False]['text':'!','line_number':1413,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1414,'multiline':False]['text':'! <b>Requires</b>: size() > n.','line_number':1422,'multiline':False]['text':'!','line_number':1423,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1424,'multiline':False]['text':'!   from the beginning of the container.','line_number':1425,'multiline':False]['text':'!','line_number':1426,'multiline':False]['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1427,'multiline':False]['text':'!','line_number':1428,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1429,'multiline':False]['text':'////////////////////////////////////////////','line_number':1437,'multiline':False]['text':'','line_number':1438,'multiline':False]['text':'                modifiers','line_number':1439,'multiline':False]['text':'','line_number':1440,'multiline':False]['text':'////////////////////////////////////////////','line_number':1441,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1445,'multiline':False]['text':'!   std::forward<Args>(args)... in the beginning of the deque.','line_number':1446,'multiline':False]['text':'!','line_number':1447,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':1448,'multiline':False]['text':'!','line_number':1449,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws.','line_number':1450,'multiline':False]['text':'!','line_number':1451,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time','line_number':1452,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1471,'multiline':False]['text':'!   std::forward<Args>(args)... in the end of the deque.','line_number':1472,'multiline':False]['text':'!','line_number':1473,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':1474,'multiline':False]['text':'!','line_number':1475,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws.','line_number':1476,'multiline':False]['text':'!','line_number':1477,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time','line_number':1478,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1497,'multiline':False]['text':'!','line_number':1498,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1499,'multiline':False]['text':'!   std::forward<Args>(args)... before p','line_number':1500,'multiline':False]['text':'!','line_number':1501,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or the in-place constructor throws.','line_number':1502,'multiline':False]['text':'!','line_number':1503,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1504,'multiline':False]['text':'!   Linear time otherwise.','line_number':1505,'multiline':False]['text':'!defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1524,'multiline':False]['text':'','line_number':1579,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1583,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the front of the deque.','line_number':1586,'multiline':False]['text':'!','line_number':1587,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1588,'multiline':False]['text':'!   T's copy constructor throws.','line_number':1589,'multiline':False]['text':'!','line_number':1590,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1591,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the front of the deque','line_number':1594,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':1595,'multiline':False]['text':'!','line_number':1596,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1597,'multiline':False]['text':'!','line_number':1598,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1599,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the end of the deque.','line_number':1606,'multiline':False]['text':'!','line_number':1607,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':1608,'multiline':False]['text':'!   T's copy constructor throws.','line_number':1609,'multiline':False]['text':'!','line_number':1610,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1611,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the end of the deque','line_number':1614,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':1615,'multiline':False]['text':'!','line_number':1616,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1617,'multiline':False]['text':'!','line_number':1618,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1619,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1627,'multiline':False]['text':'!','line_number':1628,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of x before p.','line_number':1629,'multiline':False]['text':'!','line_number':1630,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':1631,'multiline':False]['text':'!','line_number':1632,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or x's copy constructor throws.','line_number':1633,'multiline':False]['text':'!','line_number':1634,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1635,'multiline':False]['text':'!   Linear time otherwise.','line_number':1636,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':1639,'multiline':False]['text':'!','line_number':1640,'multiline':False]['text':'! <b>Effects</b>: Insert a new element before p with x's resources.','line_number':1641,'multiline':False]['text':'!','line_number':1642,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':1643,'multiline':False]['text':'!','line_number':1644,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':1645,'multiline':False]['text':'!','line_number':1646,'multiline':False]['text':'! <b>Complexity</b>: If p is end(), amortized constant time','line_number':1647,'multiline':False]['text':'!   Linear time otherwise.','line_number':1648,'multiline':False]['text':'! <b>Requires</b>: pos must be a valid iterator of *this.','line_number':1654,'multiline':False]['text':'!','line_number':1655,'multiline':False]['text':'! <b>Effects</b>: Insert n copies of x before pos.','line_number':1656,'multiline':False]['text':'!','line_number':1657,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or pos if n is 0.','line_number':1658,'multiline':False]['text':'!','line_number':1659,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':1660,'multiline':False]['text':'!','line_number':1661,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':1662,'multiline':False]['text':'Range check of p is done by insert()','line_number':1665,'multiline':False]['text':'! <b>Requires</b>: pos must be a valid iterator of *this.','line_number':1669,'multiline':False]['text':'!','line_number':1670,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before pos.','line_number':1671,'multiline':False]['text':'!','line_number':1672,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or pos if first == last.','line_number':1673,'multiline':False]['text':'!','line_number':1674,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1675,'multiline':False]['text':'!   dereferenced InIt throws or T's copy constructor throws.','line_number':1676,'multiline':False]['text':'!','line_number':1677,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [first, last).','line_number':1678,'multiline':False]['text':'! <b>Requires</b>: pos must be a valid iterator of *this.','line_number':1702,'multiline':False]['text':'!','line_number':1703,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [il.begin(), il.end()) range before pos.','line_number':1704,'multiline':False]['text':'!','line_number':1705,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or pos if il.begin() == il.end().','line_number':1706,'multiline':False]['text':'!','line_number':1707,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':1708,'multiline':False]['text':'!   dereferenced std::initializer_list throws or T's copy constructor throws.','line_number':1709,'multiline':False]['text':'!','line_number':1710,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [il.begin(), il.end()).','line_number':1711,'multiline':False]['text':'Range check os pos is done in insert()','line_number':1714,'multiline':False]['text':'! <b>Effects</b>: Removes the first element from the deque.','line_number':1737,'multiline':False]['text':'!','line_number':1738,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1739,'multiline':False]['text':'!','line_number':1740,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1741,'multiline':False]['text':'! <b>Effects</b>: Removes the last element from the deque.','line_number':1756,'multiline':False]['text':'!','line_number':1757,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1758,'multiline':False]['text':'!','line_number':1759,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':1760,'multiline':False]['text':'! <b>Effects</b>: Erases the element at p.','line_number':1775,'multiline':False]['text':'!','line_number':1776,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1777,'multiline':False]['text':'!','line_number':1778,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements between pos and the','line_number':1779,'multiline':False]['text':'!   last element (if pos is near the end) or the first element','line_number':1780,'multiline':False]['text':'!   if(pos is near the beginning).','line_number':1781,'multiline':False]['text':'!   Constant if pos is the first or the last element.','line_number':1782,'multiline':False]['text':'! <b>Effects</b>: Erases the elements pointed by [first, last).','line_number':1800,'multiline':False]['text':'!','line_number':1801,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1802,'multiline':False]['text':'!','line_number':1803,'multiline':False]['text':'! <b>Complexity</b>: Linear to the distance between first and','line_number':1804,'multiline':False]['text':'!   last plus the elements between pos and the','line_number':1805,'multiline':False]['text':'!   last element (if pos is near the end) or the first element','line_number':1806,'multiline':False]['text':'!   if(pos is near the beginning).','line_number':1807,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':1837,'multiline':False]['text':'!','line_number':1838,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1839,'multiline':False]['text':'!','line_number':1840,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1841,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the deque.','line_number':1852,'multiline':False]['text':'!','line_number':1853,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1854,'multiline':False]['text':'!','line_number':1855,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the deque.','line_number':1856,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1880,'multiline':False]['text':'!','line_number':1881,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1882,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1887,'multiline':False]['text':'!','line_number':1888,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1889,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1894,'multiline':False]['text':'!','line_number':1895,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1896,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1901,'multiline':False]['text':'!','line_number':1902,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1903,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1908,'multiline':False]['text':'!','line_number':1909,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1910,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1915,'multiline':False]['text':'!','line_number':1916,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1917,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1922,'multiline':False]['text':'!','line_number':1923,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1924,'multiline':False]['text':' Precondition: this->members_.m_start and this->members_.m_finish have already been initialized,','line_number':2174,'multiline':False]['text':' but none of the deque's elements have yet been constructed.','line_number':2175,'multiline':False]['text':' Called only if this->members_.m_finish.m_cur == this->members_.m_finish.m_first.','line_number':2233,'multiline':False]['text':' Called only if this->members_.m_start.m_cur == this->members_.m_start.m_last - 1.  Note that','line_number':2245,'multiline':False]['text':' if the deque has at least one element (a precondition for this member','line_number':2246,'multiline':False]['text':' function), and if this->members_.m_start.m_cur == this->members_.m_start.m_last, then the deque','line_number':2247,'multiline':False]['text':' must have at least two nodes.','line_number':2248,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2342,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':2358,'multiline':False]['text':'!specialization for optimizations','line_number':2359,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2371,'multiline':False]['text':'   #ifndef  BOOST_CONTAINER_DEQUE_HPP','line_number':2375,'multiline':False]