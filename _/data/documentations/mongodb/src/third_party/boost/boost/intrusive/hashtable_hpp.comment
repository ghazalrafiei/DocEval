['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga  2006-2015','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'General intrusive utilities','line_number':18,'multiline':False]['text':'Implementation utilities','line_number':31,'multiline':False]['text':'boost','line_number':37,'multiline':False]['text':'std C++','line_number':44,'multiline':False]['text':'std::equal_to','line_number':45,'multiline':False]['text':'std::pair','line_number':46,'multiline':False]['text':'std::lower_bound, std::upper_bound','line_number':47,'multiline':False]['text':'std::size_t','line_number':48,'multiline':False]['text':'/ @cond','line_number':57,'multiline':False]['text':'Efficiently compare identical prefixes: O(N) if sequences','line_number':89,'multiline':False]['text':'have the same elements in the same order.','line_number':90,'multiline':False]['text':'Establish last2 assuming equal ranges by iterating over the','line_number':99,'multiline':False]['text':'rest of the list.','line_number':100,'multiline':False]['text':'We've seen this one before.','line_number':105,'multiline':False]['text':' sizeof(SizeType) < sizeof(std::size_t)','line_number':120,'multiline':False]['text':' sizeof(SizeType) == sizeof(std::size_t)','line_number':126,'multiline':False]['text':'sizeof(SizeType) > sizeof(std::size_t)','line_number':132,'multiline':False]['text':'sizeof(SizeType) > sizeof(std::size_t)','line_number':141,'multiline':False]['text':'Tables have upper SIZE_MAX, so we must always found an entry','line_number':173,'multiline':False]['text':'We only support LLP64(Win64) or LP64(most Unix) data models','line_number':205,'multiline':False]['text':'In 64 bit windows sizeof(size_t) == sizeof(unsigned long long)','line_number':206,'multiline':False]['text':'In 32 bit windows and 32/64 bit unixes sizeof(size_t) == sizeof(unsigned long)','line_number':209,'multiline':False]['text':'Taken from Boost.MultiIndex code, thanks to Joaquin M Lopez Munoz.','line_number':233,'multiline':False]['text':'Upper limit, just in case','line_number':250,'multiline':False]['text':'Upper limit, just in case','line_number':252,'multiline':False]['text':'#if !defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':259,'multiline':False]['text':'           A group is reverse-linked','line_number':349,'multiline':False]['text':'','line_number':350,'multiline':False]['text':'          A is "first in group"','line_number':351,'multiline':False]['text':'          C is "last  in group"','line_number':352,'multiline':False]['text':'           __________________','line_number':353,'multiline':False]['text':'          |  _____   _____   |','line_number':354,'multiline':False]['text':'          | |     | |      | |  <- Group links','line_number':355,'multiline':False]['text':'          ^ V     ^ V      ^ V','line_number':356,'multiline':False]['text':'           _       _        _      _','line_number':357,'multiline':False]['text':'         A|_|    B|_|     C|_|   D|_|','line_number':358,'multiline':False]['text':'','line_number':359,'multiline':False]['text':'          ^ |     ^ |      ^ |    ^ V  <- Bucket links','line_number':360,'multiline':False]['text':'   _ _____| |_____| |______| |____| |','line_number':361,'multiline':False]['text':'  |B|                               |','line_number':362,'multiline':False]['text':'   ^________________________________|','line_number':363,'multiline':False]['text':'','line_number':364,'multiline':False]['text':'First find the last node of p's group.','line_number':380,'multiline':False]['text':'This requires checking the first node of the next group or','line_number':381,'multiline':False]['text':'the bucket node.','line_number':382,'multiline':False]['text':'If we've reached the bucket node just return it.','line_number':391,'multiline':False]['text':'Otherwise, iterate using group links until the bucket node','line_number':396,'multiline':False]['text':'go to last in group','line_number':414,'multiline':False]['text':'Check if the next node is in the group (not end node) and reverse linked to','line_number':422,'multiline':False]['text':''to_erase_ptr'. Erase if that's the case.','line_number':423,'multiline':False]['text':'If an exception is thrown, just put all moved nodes back in the old bucket','line_number':495,'multiline':False]['text':'and move back the split mark.','line_number':496,'multiline':False]['text':'namespace detail {','line_number':534,'multiline':False]['text':'!This metafunction will obtain the type of a bucket','line_number':536,'multiline':False]['text':'!from the value_traits or hook option to be used with','line_number':537,'multiline':False]['text':'!a hash container.','line_number':538,'multiline':False]['text':'!This metafunction will obtain the type of a bucket pointer','line_number':547,'multiline':False]['text':'!from the value_traits or hook option to be used with','line_number':548,'multiline':False]['text':'!a hash container.','line_number':549,'multiline':False]['text':'!This metafunction will obtain the type of the default bucket traits','line_number':558,'multiline':False]['text':'!(when the user does not specify the bucket_traits<> option) from the','line_number':559,'multiline':False]['text':'!value_traits or hook option to be used with','line_number':560,'multiline':False]['text':'!a hash container.','line_number':561,'multiline':False]['text':'hashtable default hook traits','line_number':577,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':631,'multiline':False]['text':'bucket_plus_vtraits stores ValueTraits + BucketTraits','line_number':653,'multiline':False]['text':'this data is needed by iterators to obtain the','line_number':654,'multiline':False]['text':'value from the iterator and detect the bucket','line_number':655,'multiline':False]['text':'bucket_value_traits','line_number':705,'multiline':False]['text':'','line_number':706,'multiline':False]['text':'value traits','line_number':716,'multiline':False]['text':'','line_number':717,'multiline':False]['text':'bucket_traits','line_number':724,'multiline':False]['text':'','line_number':725,'multiline':False]['text':'bucket operations','line_number':732,'multiline':False]['text':'optimize multikey','line_number':758,'multiline':False]['text':' The node is at the beginning of a group.','line_number':768,'multiline':False]['text':'Both first and last in the same group','line_number':777,'multiline':False]['text':'so join group1 and group2','line_number':778,'multiline':False]['text':'optimize multikey','line_number':798,'multiline':False]['text':'optimize multikey','line_number':811,'multiline':False]['text':'Node is the first of the group','line_number':820,'multiline':False]['text':'Unlink the rest of the group if it's not the last node of its group','line_number':823,'multiline':False]['text':'Node is not the end of the group','line_number':829,'multiline':False]['text':'Node is the end of the group','line_number':834,'multiline':False]['text':'optimize multikey','line_number':843,'multiline':False]['text':'optimize multikey','line_number':870,'multiline':False]['text':'First find the last node of p's group.','line_number':872,'multiline':False]['text':'This requires checking the first node of the next group or','line_number':873,'multiline':False]['text':'the bucket node.','line_number':874,'multiline':False]['text':'No need to init group links as we'll delete all bucket nodes','line_number':895,'multiline':False]['text':'NOT optimize multikey','line_number':902,'multiline':False]['text':'optimize multikey','line_number':905,'multiline':False]['text':'NOT optimize multikey','line_number':917,'multiline':False]['text':'optimize multikey','line_number':920,'multiline':False]['text':'Now get the bucket_impl from the iterator','line_number':928,'multiline':False]['text':'Now just calculate the index b has in the bucket array','line_number':931,'multiline':False]['text':'NO optimize multikey','line_number':935,'multiline':False]['text':'The end node is embedded in the singly linked list:','line_number':942,'multiline':False]['text':'iterate until we reach it.','line_number':943,'multiline':False]['text':'Now get the bucket_impl from the iterator','line_number':948,'multiline':False]['text':'Now just calculate the index b has in the bucket array','line_number':952,'multiline':False]['text':'store_hash','line_number':956,'multiline':False]['text':'NO store_hash','line_number':959,'multiline':False]['text':'For store_hash == true','line_number':987,'multiline':False]['text':'Public functions:','line_number':1002,'multiline':False]['text':'bucket_hash_t','line_number':1075,'multiline':False]['text':'Stores bucket_plus_vtraits plust the hash function','line_number':1076,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':1079,'multiline':False]['text':'4','line_number':1086,'multiline':False]['text':'For store_hash == true','line_number':1111,'multiline':False]['text':'For store_hash == false','line_number':1113,'multiline':False]['text':'bucket_hash_equal_t','line_number':1129,'multiline':False]['text':'Stores bucket_hash_t and the equality function when the first','line_number':1130,'multiline':False]['text':'non-empty bucket shall not be cached.','line_number':1131,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':1134,'multiline':False]['text':'3','line_number':1135,'multiline':False]['text':'equal','line_number':1136,'multiline':False]['text':'bucket_hash_equal_t','line_number':1201,'multiline':False]['text':'Stores bucket_hash_t and the equality function when the first','line_number':1202,'multiline':False]['text':'non-empty bucket shall be cached.','line_number':1203,'multiline':False]['text':'cache_begin == true version','line_number':1204,'multiline':False]['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':1206,'multiline':False]['text':'2','line_number':1207,'multiline':False]['text':'If the last bucket is the end, the cache must be updated','line_number':1272,'multiline':False]['text':'to the last position if all','line_number':1273,'multiline':False]['text':'This wrapper around size_traits is used','line_number':1299,'multiline':False]['text':'to maintain minimal container size with compilers like MSVC','line_number':1300,'multiline':False]['text':'that have problems with EBO and multiple empty base classes','line_number':1301,'multiline':False]['text':'size_traits','line_number':1314,'multiline':False]['text':'hashdata_internal','line_number':1350,'multiline':False]['text':'Stores bucket_hash_equal_t and split_traits','line_number':1351,'multiline':False]['text':'2','line_number':1359,'multiline':False]['text':'2','line_number':1369,'multiline':False]['text':'','line_number':1425,'multiline':False]['text':'public functions','line_number':1473,'multiline':False]['text':'Public functions for hashtable_impl','line_number':1572,'multiline':False]['text':'/ @endcond','line_number':1590,'multiline':False]['text':'! The class template hashtable is an intrusive hash table container, that','line_number':1592,'multiline':False]['text':'! is used to construct intrusive unordered_set and unordered_multiset containers. The','line_number':1593,'multiline':False]['text':'! no-throw guarantee holds only, if the VoidOrKeyEqual object and Hasher don't throw.','line_number':1594,'multiline':False]['text':'!','line_number':1595,'multiline':False]['text':'! hashtable is a semi-intrusive container: each object to be stored in the','line_number':1596,'multiline':False]['text':'! container must contain a proper hook, but the container also needs','line_number':1597,'multiline':False]['text':'! additional auxiliary memory to work: hashtable needs a pointer to an array','line_number':1598,'multiline':False]['text':'! of type `bucket_type` to be passed in the constructor. This bucket array must','line_number':1599,'multiline':False]['text':'! have at least the same lifetime as the container. This makes the use of','line_number':1600,'multiline':False]['text':'! hashtable more complicated than purely intrusive containers.','line_number':1601,'multiline':False]['text':'! `bucket_type` is default-constructible, copyable and assignable','line_number':1602,'multiline':False]['text':'!','line_number':1603,'multiline':False]['text':'! The template parameter \c T is the type to be managed by the container.','line_number':1604,'multiline':False]['text':'! The user can specify additional options and if no options are provided','line_number':1605,'multiline':False]['text':'! default options are used.','line_number':1606,'multiline':False]['text':'!','line_number':1607,'multiline':False]['text':'! The container supports the following options:','line_number':1608,'multiline':False]['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':1609,'multiline':False]['text':'! \c constant_time_size<>, \c size_type<>, \c hash<> and \c equal<>','line_number':1610,'multiline':False]['text':'! \c bucket_traits<>, power_2_buckets<>, cache_begin<> and incremental<>.','line_number':1611,'multiline':False]['text':'!','line_number':1612,'multiline':False]['text':'! hashtable only provides forward iterators but it provides 4 iterator types:','line_number':1613,'multiline':False]['text':'! iterator and const_iterator to navigate through the whole container and','line_number':1614,'multiline':False]['text':'! local_iterator and const_local_iterator to navigate through the values','line_number':1615,'multiline':False]['text':'! stored in a single bucket. Local iterators are faster and smaller.','line_number':1616,'multiline':False]['text':'!','line_number':1617,'multiline':False]['text':'! It's not recommended to use non constant-time size hashtables because several','line_number':1618,'multiline':False]['text':'! key functions, like "empty()", become non-constant time functions. Non','line_number':1619,'multiline':False]['text':'! constant_time size hashtables are mainly provided to support auto-unlink hooks.','line_number':1620,'multiline':False]['text':'!','line_number':1621,'multiline':False]['text':'! hashtables, does not make automatic rehashings nor','line_number':1622,'multiline':False]['text':'! offers functions related to a load factor. Rehashing can be explicitly requested','line_number':1623,'multiline':False]['text':'! and the user must provide a new bucket array that will be used from that moment.','line_number':1624,'multiline':False]['text':'!','line_number':1625,'multiline':False]['text':'! Since no automatic rehashing is done, iterators are never invalidated when','line_number':1626,'multiline':False]['text':'! inserting or erasing elements. Iterators are only invalidated when rehashing.','line_number':1627,'multiline':False]['text':'1','line_number':1639,'multiline':False]['text':'1','line_number':1650,'multiline':False]['text':'/ @cond','line_number':1663,'multiline':False]['text':'/ @endcond','line_number':1686,'multiline':False]['text':'/ @cond','line_number':1734,'multiline':False]['text':'Configuration error: compare_hash<> can't be specified without store_hash<>','line_number':1738,'multiline':False]['text':'See documentation for more explanations','line_number':1739,'multiline':False]['text':'We'll define group traits, but these won't be instantiated if','line_number':1746,'multiline':False]['text':'optimize_multikey is not true','line_number':1747,'multiline':False]['text':'noncopyable, movable','line_number':1759,'multiline':False]['text':'Constant-time size is incompatible with auto-unlink hooks!','line_number':1764,'multiline':False]['text':'Cache begin is incompatible with auto-unlink hooks!','line_number':1766,'multiline':False]['text':'/ @endcond','line_number':1785,'multiline':False]['text':'! <b>Requires</b>: buckets must not be being used by any other resource.','line_number':1793,'multiline':False]['text':'!','line_number':1794,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty unordered_set, storing a reference','line_number':1795,'multiline':False]['text':'!   to the bucket array and copies of the key_hasher and equal_func functors.','line_number':1796,'multiline':False]['text':'!','line_number':1797,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1798,'multiline':False]['text':'!','line_number':1799,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':1800,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1801,'multiline':False]['text':'!   or the copy constructor or invocation of hash_func or equal_func throws.','line_number':1802,'multiline':False]['text':'!','line_number':1803,'multiline':False]['text':'! <b>Notes</b>: buckets array must be disposed only after','line_number':1804,'multiline':False]['text':'!   *this is disposed.','line_number':1805,'multiline':False]['text':'Check power of two bucket array if the option is activated','line_number':1816,'multiline':False]['text':'! <b>Requires</b>: buckets must not be being used by any other resource','line_number':1822,'multiline':False]['text':'!   and dereferencing iterator must yield an lvalue of type value_type.','line_number':1823,'multiline':False]['text':'!','line_number':1824,'multiline':False]['text':'! <b>Effects</b>: Constructs an empty container and inserts elements from','line_number':1825,'multiline':False]['text':'!   [b, e).','line_number':1826,'multiline':False]['text':'!','line_number':1827,'multiline':False]['text':'! <b>Complexity</b>: If N is distance(b, e): Average case is O(N)','line_number':1828,'multiline':False]['text':'!   (with a good hash function and with buckets_len >= N),worst case O(N^2).','line_number':1829,'multiline':False]['text':'!','line_number':1830,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':1831,'multiline':False]['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1832,'multiline':False]['text':'!   or the copy constructor or invocation of hasher or key_equal throws.','line_number':1833,'multiline':False]['text':'!','line_number':1834,'multiline':False]['text':'! <b>Notes</b>: buckets array must be disposed only after','line_number':1835,'multiline':False]['text':'!   *this is disposed.','line_number':1836,'multiline':False]['text':'Check power of two bucket array if the option is activated','line_number':1849,'multiline':False]['text':'Now insert','line_number':1853,'multiline':False]['text':'! <b>Effects</b>: Constructs a container moving resources from another container.','line_number':1860,'multiline':False]['text':'!   Internal value traits, bucket traits, hasher and comparison are move constructed and','line_number':1861,'multiline':False]['text':'!   nodes belonging to x are linked to *this.','line_number':1862,'multiline':False]['text':'!','line_number':1863,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1864,'multiline':False]['text':'!','line_number':1865,'multiline':False]['text':'! <b>Throws</b>: If value_traits::node_traits::node's','line_number':1866,'multiline':False]['text':'!   move constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':1867,'multiline':False]['text':'!   or the move constructor of value traits, bucket traits, hasher or comparison throws.','line_number':1868,'multiline':False]['text':'! <b>Effects</b>: Equivalent to swap.','line_number':1884,'multiline':False]['text':'!','line_number':1885,'multiline':False]['text':'! <b>Effects</b>: Detaches all elements from this. The objects in the unordered_set','line_number':1890,'multiline':False]['text':'!   are not deleted (i.e. no destructors are called).','line_number':1891,'multiline':False]['text':'!','line_number':1892,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the unordered_set, if','line_number':1893,'multiline':False]['text':'!   it's a safe-mode or auto-unlink value. Otherwise constant.','line_number':1894,'multiline':False]['text':'!','line_number':1895,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1896,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator pointing to the beginning of the unordered_set.','line_number':1899,'multiline':False]['text':'!','line_number':1900,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1901,'multiline':False]['text':'!   Worst case (empty unordered_set): O(this->bucket_count())','line_number':1902,'multiline':False]['text':'!','line_number':1903,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1904,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the beginning','line_number':1907,'multiline':False]['text':'!   of the unordered_set.','line_number':1908,'multiline':False]['text':'!','line_number':1909,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1910,'multiline':False]['text':'!   Worst case (empty unordered_set): O(this->bucket_count())','line_number':1911,'multiline':False]['text':'!','line_number':1912,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1913,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the beginning','line_number':1916,'multiline':False]['text':'!   of the unordered_set.','line_number':1917,'multiline':False]['text':'!','line_number':1918,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':1919,'multiline':False]['text':'!   Worst case (empty unordered_set): O(this->bucket_count())','line_number':1920,'multiline':False]['text':'!','line_number':1921,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1922,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator pointing to the end of the unordered_set.','line_number':1925,'multiline':False]['text':'!','line_number':1926,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1927,'multiline':False]['text':'!','line_number':1928,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1929,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the end of the unordered_set.','line_number':1932,'multiline':False]['text':'!','line_number':1933,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1934,'multiline':False]['text':'!','line_number':1935,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1936,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator pointing to the end of the unordered_set.','line_number':1939,'multiline':False]['text':'!','line_number':1940,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1941,'multiline':False]['text':'!','line_number':1942,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1943,'multiline':False]['text':'! <b>Effects</b>: Returns the hasher object used by the unordered_set.','line_number':1946,'multiline':False]['text':'!','line_number':1947,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1948,'multiline':False]['text':'!','line_number':1949,'multiline':False]['text':'! <b>Throws</b>: If hasher copy-constructor throws.','line_number':1950,'multiline':False]['text':'! <b>Effects</b>: Returns the key_equal object used by the unordered_set.','line_number':1953,'multiline':False]['text':'!','line_number':1954,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1955,'multiline':False]['text':'!','line_number':1956,'multiline':False]['text':'! <b>Throws</b>: If key_equal copy-constructor throws.','line_number':1957,'multiline':False]['text':'! <b>Effects</b>: Returns true if the container is empty.','line_number':1962,'multiline':False]['text':'!','line_number':1963,'multiline':False]['text':'! <b>Complexity</b>: if constant-time size and cache_begin options are disabled,','line_number':1964,'multiline':False]['text':'!   average constant time (worst case, with empty() == true: O(this->bucket_count()).','line_number':1965,'multiline':False]['text':'!   Otherwise constant.','line_number':1966,'multiline':False]['text':'!','line_number':1967,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1968,'multiline':False]['text':'! <b>Effects</b>: Returns the number of elements stored in the unordered_set.','line_number':1989,'multiline':False]['text':'!','line_number':1990,'multiline':False]['text':'! <b>Complexity</b>: Linear to elements contained in *this if','line_number':1991,'multiline':False]['text':'!   constant_time_size is false. Constant-time otherwise.','line_number':1992,'multiline':False]['text':'!','line_number':1993,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1994,'multiline':False]['text':'! <b>Requires</b>: the hasher and the equality function unqualified swap','line_number':2011,'multiline':False]['text':'!   call should not throw.','line_number':2012,'multiline':False]['text':'!','line_number':2013,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of two unordered_sets.','line_number':2014,'multiline':False]['text':'!   Swaps also the contained bucket array and equality and hasher functors.','line_number':2015,'multiline':False]['text':'!','line_number':2016,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2017,'multiline':False]['text':'!','line_number':2018,'multiline':False]['text':'! <b>Throws</b>: If the swap() call for the comparison or hash functors','line_number':2019,'multiline':False]['text':'!   found using ADL throw. Basic guarantee.','line_number':2020,'multiline':False]['text':'These can throw','line_number':2023,'multiline':False]['text':'These can't throw','line_number':2026,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw','line_number':2034,'multiline':False]['text':'!   Cloner should yield to nodes that compare equal and produce the same','line_number':2035,'multiline':False]['text':'!   hash than the original node.','line_number':2036,'multiline':False]['text':'!','line_number':2037,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':2038,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':2039,'multiline':False]['text':'!   elements from src calling Cloner::operator()(const_reference )','line_number':2040,'multiline':False]['text':'!   and inserts them on *this. The hash function and the equality','line_number':2041,'multiline':False]['text':'!   predicate are copied from the source.','line_number':2042,'multiline':False]['text':'!','line_number':2043,'multiline':False]['text':'!   If store_hash option is true, this method does not use the hash function.','line_number':2044,'multiline':False]['text':'!','line_number':2045,'multiline':False]['text':'!   If any operation throws, all cloned elements are unlinked and disposed','line_number':2046,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':2047,'multiline':False]['text':'!','line_number':2048,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':2049,'multiline':False]['text':'!','line_number':2050,'multiline':False]['text':'! <b>Throws</b>: If cloner or hasher throw or hash or equality predicate copying','line_number':2051,'multiline':False]['text':'!   throws. Basic guarantee.','line_number':2052,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw','line_number':2057,'multiline':False]['text':'!   Cloner should yield to nodes that compare equal and produce the same','line_number':2058,'multiline':False]['text':'!   hash than the original node.','line_number':2059,'multiline':False]['text':'!','line_number':2060,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':2061,'multiline':False]['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':2062,'multiline':False]['text':'!   elements from src calling Cloner::operator()(reference)','line_number':2063,'multiline':False]['text':'!   and inserts them on *this. The hash function and the equality','line_number':2064,'multiline':False]['text':'!   predicate are copied from the source.','line_number':2065,'multiline':False]['text':'!','line_number':2066,'multiline':False]['text':'!   If store_hash option is true, this method does not use the hash function.','line_number':2067,'multiline':False]['text':'!','line_number':2068,'multiline':False]['text':'!   If any operation throws, all cloned elements are unlinked and disposed','line_number':2069,'multiline':False]['text':'!   calling Disposer::operator()(pointer).','line_number':2070,'multiline':False]['text':'!','line_number':2071,'multiline':False]['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':2072,'multiline':False]['text':'!','line_number':2073,'multiline':False]['text':'! <b>Throws</b>: If cloner or hasher throw or hash or equality predicate copying','line_number':2074,'multiline':False]['text':'!   throws. Basic guarantee.','line_number':2075,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue','line_number':2080,'multiline':False]['text':'!','line_number':2081,'multiline':False]['text':'! <b>Effects</b>: Inserts the value into the unordered_set.','line_number':2082,'multiline':False]['text':'!','line_number':2083,'multiline':False]['text':'! <b>Returns</b>: An iterator to the inserted value.','line_number':2084,'multiline':False]['text':'!','line_number':2085,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2086,'multiline':False]['text':'!','line_number':2087,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws. Strong guarantee.','line_number':2088,'multiline':False]['text':'!','line_number':2089,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':2090,'multiline':False]['text':'!   No copy-constructors are called.','line_number':2091,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':2103,'multiline':False]['text':'!   of type value_type.','line_number':2104,'multiline':False]['text':'!','line_number':2105,'multiline':False]['text':'! <b>Effects</b>: Equivalent to this->insert_equal(t) for each element in [b, e).','line_number':2106,'multiline':False]['text':'!','line_number':2107,'multiline':False]['text':'! <b>Complexity</b>: Average case O(N), where N is distance(b, e).','line_number':2108,'multiline':False]['text':'!   Worst case O(N*this->size()).','line_number':2109,'multiline':False]['text':'!','line_number':2110,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws. Basic guarantee.','line_number':2111,'multiline':False]['text':'!','line_number':2112,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':2113,'multiline':False]['text':'!   No copy-constructors are called.','line_number':2114,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue','line_number':2122,'multiline':False]['text':'!','line_number':2123,'multiline':False]['text':'! <b>Effects</b>: Tries to inserts value into the unordered_set.','line_number':2124,'multiline':False]['text':'!','line_number':2125,'multiline':False]['text':'! <b>Returns</b>: If the value','line_number':2126,'multiline':False]['text':'!   is not already present inserts it and returns a pair containing the','line_number':2127,'multiline':False]['text':'!   iterator to the new value and true. If there is an equivalent value','line_number':2128,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':2129,'multiline':False]['text':'!   and false.','line_number':2130,'multiline':False]['text':'!','line_number':2131,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2132,'multiline':False]['text':'!','line_number':2133,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws. Strong guarantee.','line_number':2134,'multiline':False]['text':'!','line_number':2135,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':2136,'multiline':False]['text':'!   No copy-constructors are called.','line_number':2137,'multiline':False]['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':2148,'multiline':False]['text':'!   of type value_type.','line_number':2149,'multiline':False]['text':'!','line_number':2150,'multiline':False]['text':'! <b>Effects</b>: Equivalent to this->insert_unique(t) for each element in [b, e).','line_number':2151,'multiline':False]['text':'!','line_number':2152,'multiline':False]['text':'! <b>Complexity</b>: Average case O(N), where N is distance(b, e).','line_number':2153,'multiline':False]['text':'!   Worst case O(N*this->size()).','line_number':2154,'multiline':False]['text':'!','line_number':2155,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws. Basic guarantee.','line_number':2156,'multiline':False]['text':'!','line_number':2157,'multiline':False]['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':2158,'multiline':False]['text':'!   No copy-constructors are called.','line_number':2159,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2167,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2168,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2169,'multiline':False]['text':'!','line_number':2170,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2171,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2172,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2173,'multiline':False]['text':'!','line_number':2174,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the unordered_set, using','line_number':2175,'multiline':False]['text':'!   a user provided key instead of the value itself.','line_number':2176,'multiline':False]['text':'!','line_number':2177,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':2178,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':2179,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':2180,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':2181,'multiline':False]['text':'!   the "insert_commit" function.','line_number':2182,'multiline':False]['text':'!','line_number':2183,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2184,'multiline':False]['text':'!','line_number':2185,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal_func throw. Strong guarantee.','line_number':2186,'multiline':False]['text':'!','line_number':2187,'multiline':False]['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':2188,'multiline':False]['text':'!   a value_type is expensive: if there is an equivalent value','line_number':2189,'multiline':False]['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':2190,'multiline':False]['text':'!   node that is used to impose the hash or the equality is much cheaper to','line_number':2191,'multiline':False]['text':'!   construct than the value_type and this function offers the possibility to','line_number':2192,'multiline':False]['text':'!   use that the part to check if the insertion will be successful.','line_number':2193,'multiline':False]['text':'!','line_number':2194,'multiline':False]['text':'!   If the check is successful, the user can construct the value_type and use','line_number':2195,'multiline':False]['text':'!   "insert_commit" to insert the object in constant-time.','line_number':2196,'multiline':False]['text':'!','line_number':2197,'multiline':False]['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':2198,'multiline':False]['text':'!   objects are inserted or erased from the unordered_set.','line_number':2199,'multiline':False]['text':'!','line_number':2200,'multiline':False]['text':'!   After a successful rehashing insert_commit_data remains valid.','line_number':2201,'multiline':False]['text':'! <b>Effects</b>: Checks if a value can be inserted in the unordered_set, using','line_number':2217,'multiline':False]['text':'!   a user provided key instead of the value itself.','line_number':2218,'multiline':False]['text':'!','line_number':2219,'multiline':False]['text':'! <b>Returns</b>: If there is an equivalent value','line_number':2220,'multiline':False]['text':'!   returns a pair containing an iterator to the already present value','line_number':2221,'multiline':False]['text':'!   and false. If the value can be inserted returns true in the returned','line_number':2222,'multiline':False]['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':2223,'multiline':False]['text':'!   the "insert_commit" function.','line_number':2224,'multiline':False]['text':'!','line_number':2225,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2226,'multiline':False]['text':'!','line_number':2227,'multiline':False]['text':'! <b>Throws</b>: If hasher or key_compare throw. Strong guarantee.','line_number':2228,'multiline':False]['text':'!','line_number':2229,'multiline':False]['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':2230,'multiline':False]['text':'!   a value_type is expensive: if there is an equivalent value','line_number':2231,'multiline':False]['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':2232,'multiline':False]['text':'!   node that is used to impose the hash or the equality is much cheaper to','line_number':2233,'multiline':False]['text':'!   construct than the value_type and this function offers the possibility to','line_number':2234,'multiline':False]['text':'!   use that the part to check if the insertion will be successful.','line_number':2235,'multiline':False]['text':'!','line_number':2236,'multiline':False]['text':'!   If the check is successful, the user can construct the value_type and use','line_number':2237,'multiline':False]['text':'!   "insert_commit" to insert the object in constant-time.','line_number':2238,'multiline':False]['text':'!','line_number':2239,'multiline':False]['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':2240,'multiline':False]['text':'!   objects are inserted or erased from the unordered_set.','line_number':2241,'multiline':False]['text':'!','line_number':2242,'multiline':False]['text':'!   After a successful rehashing insert_commit_data remains valid.','line_number':2243,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue of type value_type. commit_data','line_number':2248,'multiline':False]['text':'!   must have been obtained from a previous call to "insert_check".','line_number':2249,'multiline':False]['text':'!   No objects should have been inserted or erased from the unordered_set between','line_number':2250,'multiline':False]['text':'!   the "insert_check" that filled "commit_data" and the call to "insert_commit".','line_number':2251,'multiline':False]['text':'!','line_number':2252,'multiline':False]['text':'! <b>Effects</b>: Inserts the value in the unordered_set using the information obtained','line_number':2253,'multiline':False]['text':'!   from the "commit_data" that a previous "insert_check" filled.','line_number':2254,'multiline':False]['text':'!','line_number':2255,'multiline':False]['text':'! <b>Returns</b>: An iterator to the newly inserted object.','line_number':2256,'multiline':False]['text':'!','line_number':2257,'multiline':False]['text':'! <b>Complexity</b>: Constant time.','line_number':2258,'multiline':False]['text':'!','line_number':2259,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2260,'multiline':False]['text':'!','line_number':2261,'multiline':False]['text':'! <b>Notes</b>: This function has only sense if a "insert_check" has been','line_number':2262,'multiline':False]['text':'!   previously executed to fill "commit_data". No value should be inserted or','line_number':2263,'multiline':False]['text':'!   erased between the "insert_check" and "insert_commit" calls.','line_number':2264,'multiline':False]['text':'!','line_number':2265,'multiline':False]['text':'!   After a successful rehashing insert_commit_data remains valid.','line_number':2266,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':2280,'multiline':False]['text':'!','line_number':2281,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2282,'multiline':False]['text':'!','line_number':2283,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2284,'multiline':False]['text':'!','line_number':2285,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2286,'multiline':False]['text':'!    to the erased element. No destructors are called.','line_number':2287,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':2291,'multiline':False]['text':'!','line_number':2292,'multiline':False]['text':'! <b>Complexity</b>: Average case O(distance(b, e)),','line_number':2293,'multiline':False]['text':'!   worst case O(this->size()).','line_number':2294,'multiline':False]['text':'!','line_number':2295,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2296,'multiline':False]['text':'!','line_number':2297,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2298,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2299,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':2303,'multiline':False]['text':'!','line_number':2304,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':2305,'multiline':False]['text':'!','line_number':2306,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)).','line_number':2307,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2308,'multiline':False]['text':'!','line_number':2309,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2310,'multiline':False]['text':'!   Basic guarantee.','line_number':2311,'multiline':False]['text':'!','line_number':2312,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2313,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2314,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2318,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2319,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2320,'multiline':False]['text':'!','line_number':2321,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2322,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2323,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2324,'multiline':False]['text':'!','line_number':2325,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements that have the same hash and','line_number':2326,'multiline':False]['text':'!   compare equal with the given key.','line_number':2327,'multiline':False]['text':'!','line_number':2328,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':2329,'multiline':False]['text':'!','line_number':2330,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)).','line_number':2331,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2332,'multiline':False]['text':'!','line_number':2333,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal_func throw. Basic guarantee.','line_number':2334,'multiline':False]['text':'!','line_number':2335,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2336,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2337,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':2342,'multiline':False]['text':'!','line_number':2343,'multiline':False]['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':2344,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':2345,'multiline':False]['text':'!','line_number':2346,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2347,'multiline':False]['text':'!','line_number':2348,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2349,'multiline':False]['text':'!','line_number':2350,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':2351,'multiline':False]['text':'!    to the erased elements.','line_number':2352,'multiline':False]['text':'Get the bucket number and local iterator for both iterators','line_number':2358,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':2366,'multiline':False]['text':'!','line_number':2367,'multiline':False]['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':2368,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':2369,'multiline':False]['text':'!','line_number':2370,'multiline':False]['text':'! <b>Complexity</b>: Average case O(distance(b, e)),','line_number':2371,'multiline':False]['text':'!   worst case O(this->size()).','line_number':2372,'multiline':False]['text':'!','line_number':2373,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2374,'multiline':False]['text':'!','line_number':2375,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':2376,'multiline':False]['text':'!    to the erased elements.','line_number':2377,'multiline':False]['text':'Get the bucket number and local iterator for both iterators','line_number':2382,'multiline':False]['text':'For the end iterator, we will assign the end iterator','line_number':2391,'multiline':False]['text':'of the last bucket','line_number':2392,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':2409,'multiline':False]['text':'!','line_number':2410,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':2411,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':2412,'multiline':False]['text':'!','line_number':2413,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':2414,'multiline':False]['text':'!','line_number':2415,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)).','line_number':2416,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2417,'multiline':False]['text':'!','line_number':2418,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2419,'multiline':False]['text':'!   Basic guarantee.','line_number':2420,'multiline':False]['text':'!','line_number':2421,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2422,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2423,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':2428,'multiline':False]['text':'!','line_number':2429,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements with the given key.','line_number':2430,'multiline':False]['text':'!   according to the comparison functor "equal_func".','line_number':2431,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':2432,'multiline':False]['text':'!','line_number':2433,'multiline':False]['text':'! <b>Returns</b>: The number of erased elements.','line_number':2434,'multiline':False]['text':'!','line_number':2435,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)).','line_number':2436,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2437,'multiline':False]['text':'!','line_number':2438,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal_func throw. Basic guarantee.','line_number':2439,'multiline':False]['text':'!','line_number':2440,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators','line_number':2441,'multiline':False]['text':'!    to the erased elements.','line_number':2442,'multiline':False]['text':'! <b>Effects</b>: Erases all of the elements.','line_number':2477,'multiline':False]['text':'!','line_number':2478,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements on the container.','line_number':2479,'multiline':False]['text':'!   if it's a safe-mode or auto-unlink value_type. Constant time otherwise.','line_number':2480,'multiline':False]['text':'!','line_number':2481,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2482,'multiline':False]['text':'!','line_number':2483,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2484,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2485,'multiline':False]['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':2492,'multiline':False]['text':'!','line_number':2493,'multiline':False]['text':'! <b>Effects</b>: Erases all of the elements.','line_number':2494,'multiline':False]['text':'!','line_number':2495,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements on the container.','line_number':2496,'multiline':False]['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':2497,'multiline':False]['text':'!','line_number':2498,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2499,'multiline':False]['text':'!','line_number':2500,'multiline':False]['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':2501,'multiline':False]['text':'!    to the erased elements. No destructors are called.','line_number':2502,'multiline':False]['text':'! <b>Effects</b>: Returns the number of contained elements with the given value','line_number':2518,'multiline':False]['text':'!','line_number':2519,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2520,'multiline':False]['text':'!','line_number':2521,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2522,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2526,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2527,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2528,'multiline':False]['text':'!','line_number':2529,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2530,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2531,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2532,'multiline':False]['text':'!','line_number':2533,'multiline':False]['text':'! <b>Effects</b>: Returns the number of contained elements with the given key','line_number':2534,'multiline':False]['text':'!','line_number':2535,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2536,'multiline':False]['text':'!','line_number':2537,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal throw.','line_number':2538,'multiline':False]['text':'! <b>Effects</b>: Finds an iterator to the first element is equal to','line_number':2548,'multiline':False]['text':'!   "value" or end() if that element does not exist.','line_number':2549,'multiline':False]['text':'!','line_number':2550,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2551,'multiline':False]['text':'!','line_number':2552,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2553,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2557,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2558,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2559,'multiline':False]['text':'!','line_number':2560,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2561,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2562,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2563,'multiline':False]['text':'!','line_number':2564,'multiline':False]['text':'! <b>Effects</b>: Finds an iterator to the first element whose key is','line_number':2565,'multiline':False]['text':'!   "key" according to the given hash and equality functor or end() if','line_number':2566,'multiline':False]['text':'!   that element does not exist.','line_number':2567,'multiline':False]['text':'!','line_number':2568,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2569,'multiline':False]['text':'!','line_number':2570,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal_func throw.','line_number':2571,'multiline':False]['text':'!','line_number':2572,'multiline':False]['text':'! <b>Note</b>: This function is used when constructing a value_type','line_number':2573,'multiline':False]['text':'!   is expensive and the value_type can be compared with a cheaper','line_number':2574,'multiline':False]['text':'!   key type. Usually this key is part of the value_type.','line_number':2575,'multiline':False]['text':'! <b>Effects</b>: Finds a const_iterator to the first element whose key is','line_number':2586,'multiline':False]['text':'!   "key" or end() if that element does not exist.','line_number':2587,'multiline':False]['text':'!','line_number':2588,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2589,'multiline':False]['text':'!','line_number':2590,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2591,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2595,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2596,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2597,'multiline':False]['text':'!','line_number':2598,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2599,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2600,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2601,'multiline':False]['text':'!','line_number':2602,'multiline':False]['text':'! <b>Effects</b>: Finds an iterator to the first element whose key is','line_number':2603,'multiline':False]['text':'!   "key" according to the given hasher and equality functor or end() if','line_number':2604,'multiline':False]['text':'!   that element does not exist.','line_number':2605,'multiline':False]['text':'!','line_number':2606,'multiline':False]['text':'! <b>Complexity</b>: Average case O(1), worst case O(this->size()).','line_number':2607,'multiline':False]['text':'!','line_number':2608,'multiline':False]['text':'! <b>Throws</b>: If hash_func or equal_func throw.','line_number':2609,'multiline':False]['text':'!','line_number':2610,'multiline':False]['text':'! <b>Note</b>: This function is used when constructing a value_type','line_number':2611,'multiline':False]['text':'!   is expensive and the value_type can be compared with a cheaper','line_number':2612,'multiline':False]['text':'!   key type. Usually this key is part of the value_type.','line_number':2613,'multiline':False]['text':'! <b>Effects</b>: Returns a range containing all elements with values equivalent','line_number':2625,'multiline':False]['text':'!   to value. Returns std::make_pair(this->end(), this->end()) if no such','line_number':2626,'multiline':False]['text':'!   elements exist.','line_number':2627,'multiline':False]['text':'!','line_number':2628,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)). Worst case O(this->size()).','line_number':2629,'multiline':False]['text':'!','line_number':2630,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2631,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2635,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2636,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2637,'multiline':False]['text':'!','line_number':2638,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2639,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2640,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2641,'multiline':False]['text':'!','line_number':2642,'multiline':False]['text':'! <b>Effects</b>: Returns a range containing all elements with equivalent','line_number':2643,'multiline':False]['text':'!   keys. Returns std::make_pair(this->end(), this->end()) if no such','line_number':2644,'multiline':False]['text':'!   elements exist.','line_number':2645,'multiline':False]['text':'!','line_number':2646,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(key, hash_func, equal_func)).','line_number':2647,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2648,'multiline':False]['text':'!','line_number':2649,'multiline':False]['text':'! <b>Throws</b>: If hash_func or the equal_func throw.','line_number':2650,'multiline':False]['text':'!','line_number':2651,'multiline':False]['text':'! <b>Note</b>: This function is used when constructing a value_type','line_number':2652,'multiline':False]['text':'!   is expensive and the value_type can be compared with a cheaper','line_number':2653,'multiline':False]['text':'!   key type. Usually this key is part of the value_type.','line_number':2654,'multiline':False]['text':'! <b>Effects</b>: Returns a range containing all elements with values equivalent','line_number':2666,'multiline':False]['text':'!   to value. Returns std::make_pair(this->end(), this->end()) if no such','line_number':2667,'multiline':False]['text':'!   elements exist.','line_number':2668,'multiline':False]['text':'!','line_number':2669,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(value)). Worst case O(this->size()).','line_number':2670,'multiline':False]['text':'!','line_number':2671,'multiline':False]['text':'! <b>Throws</b>: If the internal hasher or the equality functor throws.','line_number':2672,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2677,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2678,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2679,'multiline':False]['text':'!','line_number':2680,'multiline':False]['text':'!   "equal_func" must be a equality function that induces','line_number':2681,'multiline':False]['text':'!   the same equality as key_equal. The difference is that','line_number':2682,'multiline':False]['text':'!   "equal_func" compares an arbitrary key with the contained values.','line_number':2683,'multiline':False]['text':'!','line_number':2684,'multiline':False]['text':'! <b>Effects</b>: Returns a range containing all elements with equivalent','line_number':2685,'multiline':False]['text':'!   keys. Returns std::make_pair(this->end(), this->end()) if no such','line_number':2686,'multiline':False]['text':'!   elements exist.','line_number':2687,'multiline':False]['text':'!','line_number':2688,'multiline':False]['text':'! <b>Complexity</b>: Average case O(this->count(key, hash_func, equal_func)).','line_number':2689,'multiline':False]['text':'!   Worst case O(this->size()).','line_number':2690,'multiline':False]['text':'!','line_number':2691,'multiline':False]['text':'! <b>Throws</b>: If the hasher or equal_func throw.','line_number':2692,'multiline':False]['text':'!','line_number':2693,'multiline':False]['text':'! <b>Note</b>: This function is used when constructing a value_type','line_number':2694,'multiline':False]['text':'!   is expensive and the value_type can be compared with a cheaper','line_number':2695,'multiline':False]['text':'!   key type. Usually this key is part of the value_type.','line_number':2696,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2710,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2711,'multiline':False]['text':'!','line_number':2712,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid iterator belonging to the unordered_set','line_number':2713,'multiline':False]['text':'!   that points to the value','line_number':2714,'multiline':False]['text':'!','line_number':2715,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2716,'multiline':False]['text':'!','line_number':2717,'multiline':False]['text':'! <b>Throws</b>: If the internal hash function throws.','line_number':2718,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2721,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2722,'multiline':False]['text':'!','line_number':2723,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid const_iterator belonging to the','line_number':2724,'multiline':False]['text':'!   unordered_set that points to the value','line_number':2725,'multiline':False]['text':'!','line_number':2726,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2727,'multiline':False]['text':'!','line_number':2728,'multiline':False]['text':'! <b>Throws</b>: If the internal hash function throws.','line_number':2729,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2732,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2733,'multiline':False]['text':'!','line_number':2734,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid local_iterator belonging to the unordered_set','line_number':2735,'multiline':False]['text':'!   that points to the value','line_number':2736,'multiline':False]['text':'!','line_number':2737,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2738,'multiline':False]['text':'!','line_number':2739,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2740,'multiline':False]['text':'!','line_number':2741,'multiline':False]['text':'! <b>Note</b>: This static function is available only if the <i>value traits</i>','line_number':2742,'multiline':False]['text':'!   is stateless.','line_number':2743,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2746,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2747,'multiline':False]['text':'!','line_number':2748,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid const_local_iterator belonging to','line_number':2749,'multiline':False]['text':'!   the unordered_set that points to the value','line_number':2750,'multiline':False]['text':'!','line_number':2751,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2752,'multiline':False]['text':'!','line_number':2753,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2754,'multiline':False]['text':'!','line_number':2755,'multiline':False]['text':'! <b>Note</b>: This static function is available only if the <i>value traits</i>','line_number':2756,'multiline':False]['text':'!   is stateless.','line_number':2757,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2760,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2761,'multiline':False]['text':'!','line_number':2762,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid local_iterator belonging to the unordered_set','line_number':2763,'multiline':False]['text':'!   that points to the value','line_number':2764,'multiline':False]['text':'!','line_number':2765,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2766,'multiline':False]['text':'!','line_number':2767,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2768,'multiline':False]['text':'! <b>Requires</b>: value must be an lvalue and shall be in a unordered_set of','line_number':2771,'multiline':False]['text':'!   appropriate type. Otherwise the behavior is undefined.','line_number':2772,'multiline':False]['text':'!','line_number':2773,'multiline':False]['text':'! <b>Effects</b>: Returns: a valid const_local_iterator belonging to','line_number':2774,'multiline':False]['text':'!   the unordered_set that points to the value','line_number':2775,'multiline':False]['text':'!','line_number':2776,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2777,'multiline':False]['text':'!','line_number':2778,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2779,'multiline':False]['text':'! <b>Effects</b>: Returns the number of buckets passed in the constructor','line_number':2782,'multiline':False]['text':'!   or the last rehash function.','line_number':2783,'multiline':False]['text':'!','line_number':2784,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2785,'multiline':False]['text':'!','line_number':2786,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2787,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2790,'multiline':False]['text':'!','line_number':2791,'multiline':False]['text':'! <b>Effects</b>: Returns the number of elements in the nth bucket.','line_number':2792,'multiline':False]['text':'!','line_number':2793,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2794,'multiline':False]['text':'!','line_number':2795,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2796,'multiline':False]['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':2798,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the bucket in which elements','line_number':2800,'multiline':False]['text':'!   with keys equivalent to k would be found, if any such element existed.','line_number':2801,'multiline':False]['text':'!','line_number':2802,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2803,'multiline':False]['text':'!','line_number':2804,'multiline':False]['text':'! <b>Throws</b>: If the hash functor throws.','line_number':2805,'multiline':False]['text':'!','line_number':2806,'multiline':False]['text':'! <b>Note</b>: the return value is in the range [0, this->bucket_count()).','line_number':2807,'multiline':False]['text':'! <b>Requires</b>: "hash_func" must be a hash function that induces','line_number':2811,'multiline':False]['text':'!   the same hash values as the stored hasher. The difference is that','line_number':2812,'multiline':False]['text':'!   "hash_func" hashes the given key instead of the value_type.','line_number':2813,'multiline':False]['text':'!','line_number':2814,'multiline':False]['text':'! <b>Effects</b>: Returns the index of the bucket in which elements','line_number':2815,'multiline':False]['text':'!   with keys equivalent to k would be found, if any such element existed.','line_number':2816,'multiline':False]['text':'!','line_number':2817,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2818,'multiline':False]['text':'!','line_number':2819,'multiline':False]['text':'! <b>Throws</b>: If hash_func throws.','line_number':2820,'multiline':False]['text':'!','line_number':2821,'multiline':False]['text':'! <b>Note</b>: the return value is in the range [0, this->bucket_count()).','line_number':2822,'multiline':False]['text':'! <b>Effects</b>: Returns the bucket array pointer passed in the constructor','line_number':2828,'multiline':False]['text':'!   or the last rehash function.','line_number':2829,'multiline':False]['text':'!','line_number':2830,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2831,'multiline':False]['text':'!','line_number':2832,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2833,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2836,'multiline':False]['text':'!','line_number':2837,'multiline':False]['text':'! <b>Effects</b>: Returns a local_iterator pointing to the beginning','line_number':2838,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2839,'multiline':False]['text':'!','line_number':2840,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2841,'multiline':False]['text':'!','line_number':2842,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2843,'multiline':False]['text':'!','line_number':2844,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2845,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2846,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2849,'multiline':False]['text':'!','line_number':2850,'multiline':False]['text':'! <b>Effects</b>: Returns a const_local_iterator pointing to the beginning','line_number':2851,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2852,'multiline':False]['text':'!','line_number':2853,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2854,'multiline':False]['text':'!','line_number':2855,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2856,'multiline':False]['text':'!','line_number':2857,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2858,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2859,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2862,'multiline':False]['text':'!','line_number':2863,'multiline':False]['text':'! <b>Effects</b>: Returns a const_local_iterator pointing to the beginning','line_number':2864,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2865,'multiline':False]['text':'!','line_number':2866,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2867,'multiline':False]['text':'!','line_number':2868,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2869,'multiline':False]['text':'!','line_number':2870,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2871,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2872,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2875,'multiline':False]['text':'!','line_number':2876,'multiline':False]['text':'! <b>Effects</b>: Returns a local_iterator pointing to the end','line_number':2877,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2878,'multiline':False]['text':'!','line_number':2879,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2880,'multiline':False]['text':'!','line_number':2881,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2882,'multiline':False]['text':'!','line_number':2883,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2884,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2885,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2888,'multiline':False]['text':'!','line_number':2889,'multiline':False]['text':'! <b>Effects</b>: Returns a const_local_iterator pointing to the end','line_number':2890,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2891,'multiline':False]['text':'!','line_number':2892,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2893,'multiline':False]['text':'!','line_number':2894,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2895,'multiline':False]['text':'!','line_number':2896,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2897,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2898,'multiline':False]['text':'! <b>Requires</b>: n is in the range [0, this->bucket_count()).','line_number':2901,'multiline':False]['text':'!','line_number':2902,'multiline':False]['text':'! <b>Effects</b>: Returns a const_local_iterator pointing to the end','line_number':2903,'multiline':False]['text':'!   of the sequence stored in the bucket n.','line_number':2904,'multiline':False]['text':'!','line_number':2905,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':2906,'multiline':False]['text':'!','line_number':2907,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':2908,'multiline':False]['text':'!','line_number':2909,'multiline':False]['text':'! <b>Note</b>:  [this->begin(n), this->end(n)) is a valid range','line_number':2910,'multiline':False]['text':'!   containing all of the elements in the nth bucket.','line_number':2911,'multiline':False]['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':2913,'multiline':False]['text':'! <b>Requires</b>: new_bucket_traits can hold a pointer to a new bucket array','line_number':2915,'multiline':False]['text':'!   or the same as the old bucket array with a different length. new_size is the length of the','line_number':2916,'multiline':False]['text':'!   the array pointed by new_buckets. If new_bucket_traits.bucket_begin() == this->bucket_pointer()','line_number':2917,'multiline':False]['text':'!   new_bucket_traits.bucket_count() can be bigger or smaller than this->bucket_count().','line_number':2918,'multiline':False]['text':'!   'new_bucket_traits' copy constructor should not throw.','line_number':2919,'multiline':False]['text':'!','line_number':2920,'multiline':False]['text':'! <b>Effects</b>:','line_number':2921,'multiline':False]['text':'!   If `new_bucket_traits.bucket_begin() == this->bucket_pointer()` is false,','line_number':2922,'multiline':False]['text':'!   unlinks values from the old bucket and inserts then in the new one according','line_number':2923,'multiline':False]['text':'!   to the hash value of values.','line_number':2924,'multiline':False]['text':'!','line_number':2925,'multiline':False]['text':'!   If `new_bucket_traits.bucket_begin() == this->bucket_pointer()` is true,','line_number':2926,'multiline':False]['text':'!   the implementations avoids moving values as much as possible.','line_number':2927,'multiline':False]['text':'!','line_number':2928,'multiline':False]['text':'!   Bucket traits hold by *this is assigned from new_bucket_traits.','line_number':2929,'multiline':False]['text':'!   If the container is configured as incremental<>, the split bucket is set','line_number':2930,'multiline':False]['text':'!   to the new bucket_count().','line_number':2931,'multiline':False]['text':'!','line_number':2932,'multiline':False]['text':'!   If store_hash option is true, this method does not use the hash function.','line_number':2933,'multiline':False]['text':'!   If false, the implementation tries to minimize calls to the hash function','line_number':2934,'multiline':False]['text':'!	 (e.g. once for equivalent values if optimize_multikey<true> is true).','line_number':2935,'multiline':False]['text':'!','line_number':2936,'multiline':False]['text':'!   If rehash is successful updates the internal bucket_traits with new_bucket_traits.','line_number':2937,'multiline':False]['text':'!','line_number':2938,'multiline':False]['text':'! <b>Complexity</b>: Average case linear in this->size(), worst case quadratic.','line_number':2939,'multiline':False]['text':'!','line_number':2940,'multiline':False]['text':'! <b>Throws</b>: If the hasher functor throws. Basic guarantee.','line_number':2941,'multiline':False]['text':'! <b>Note</b>: This function is used when keys from inserted elements are changed ','line_number':2945,'multiline':False]['text':'!  (e.g. a language change when key is a string) but uniqueness and hash properties are','line_number':2946,'multiline':False]['text':'!  preserved so a fast full rehash recovers invariants for *this without extracting and','line_number':2947,'multiline':False]['text':'!  reinserting all elements again.','line_number':2948,'multiline':False]['text':'!','line_number':2949,'multiline':False]['text':'! <b>Requires</b>: Calls produced to the hash function should not alter the value uniqueness','line_number':2950,'multiline':False]['text':'!  properties of already inserted elements. If hasher(key1) == hasher(key2) was true when','line_number':2951,'multiline':False]['text':'!  elements were inserted, it shall be true during calls produced in the execution of this function.','line_number':2952,'multiline':False]['text':'!','line_number':2953,'multiline':False]['text':'!  key_equal is not called inside this function so it is assumed that key_equal(value1, value2)','line_number':2954,'multiline':False]['text':'!  should produce the same results as before for inserted elements.','line_number':2955,'multiline':False]['text':'!','line_number':2956,'multiline':False]['text':'! <b>Effects</b>: Reprocesses all values hold by *this, recalculating their hash values','line_number':2957,'multiline':False]['text':'!   and redistributing them though the buckets.','line_number':2958,'multiline':False]['text':'!','line_number':2959,'multiline':False]['text':'!   If store_hash option is true, this method uses the hash function and updates the stored hash value.','line_number':2960,'multiline':False]['text':'!','line_number':2961,'multiline':False]['text':'! <b>Complexity</b>: Average case linear in this->size(), worst case quadratic.','line_number':2962,'multiline':False]['text':'!','line_number':2963,'multiline':False]['text':'! <b>Throws</b>: If the hasher functor throws. Basic guarantee.','line_number':2964,'multiline':False]['text':'! <b>Requires</b>:','line_number':2968,'multiline':False]['text':'!','line_number':2969,'multiline':False]['text':'! <b>Effects</b>:','line_number':2970,'multiline':False]['text':'!','line_number':2971,'multiline':False]['text':'! <b>Complexity</b>:','line_number':2972,'multiline':False]['text':'!','line_number':2973,'multiline':False]['text':'! <b>Throws</b>:','line_number':2974,'multiline':False]['text':'!','line_number':2975,'multiline':False]['text':'! <b>Note</b>: this method is only available if incremental<true> option is activated.','line_number':2976,'multiline':False]['text':'This function is only available for containers with incremental hashing','line_number':2979,'multiline':False]['text':'Test if the split variable can be changed','line_number':2986,'multiline':False]['text':'Anti-exception stuff: if an exception is thrown while','line_number':2992,'multiline':False]['text':'moving elements from old_bucket to the target bucket, all moved','line_number':2993,'multiline':False]['text':'elements are moved back to the original one.','line_number':2994,'multiline':False]['text':'!grow','line_number':3015,'multiline':False]['text':'! <b>Effects</b>: If new_bucket_traits.bucket_count() is not','line_number':3026,'multiline':False]['text':'!   this->bucket_count()/2 or this->bucket_count()*2, or','line_number':3027,'multiline':False]['text':'!   this->split_bucket() != new_bucket_traits.bucket_count() returns false','line_number':3028,'multiline':False]['text':'!   and does nothing.','line_number':3029,'multiline':False]['text':'!','line_number':3030,'multiline':False]['text':'!   Otherwise, copy assigns new_bucket_traits to the internal bucket_traits','line_number':3031,'multiline':False]['text':'!   and transfers all the objects from old buckets to the new ones.','line_number':3032,'multiline':False]['text':'!','line_number':3033,'multiline':False]['text':'! <b>Complexity</b>: Linear to size().','line_number':3034,'multiline':False]['text':'!','line_number':3035,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':3036,'multiline':False]['text':'!','line_number':3037,'multiline':False]['text':'! <b>Note</b>: this method is only available if incremental<true> option is activated.','line_number':3038,'multiline':False]['text':'This function is only available for containers with incremental hashing','line_number':3041,'multiline':False]['text':'Test new bucket size is consistent with internal bucket size and split count','line_number':3049,'multiline':False]['text':'Put cache to safe position','line_number':3071,'multiline':False]['text':'! <b>Requires</b>: incremental<> option must be set','line_number':3080,'multiline':False]['text':'!','line_number':3081,'multiline':False]['text':'! <b>Effects</b>: returns the current split count','line_number':3082,'multiline':False]['text':'!','line_number':3083,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':3084,'multiline':False]['text':'!','line_number':3085,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':3086,'multiline':False]['text':'! <b>Effects</b>: Returns the nearest new bucket count optimized for','line_number':3089,'multiline':False]['text':'!   the container that is bigger or equal than n. This suggestion can be','line_number':3090,'multiline':False]['text':'!   used to create bucket arrays with a size that will usually improve','line_number':3091,'multiline':False]['text':'!   container's performance. If such value does not exist, the','line_number':3092,'multiline':False]['text':'!   higher possible value is returned.','line_number':3093,'multiline':False]['text':'!','line_number':3094,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':3095,'multiline':False]['text':'!','line_number':3096,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':3097,'multiline':False]['text':'! <b>Effects</b>: Returns the nearest new bucket count optimized for','line_number':3100,'multiline':False]['text':'!   the container that is smaller or equal than n. This suggestion can be','line_number':3101,'multiline':False]['text':'!   used to create bucket arrays with a size that will usually improve','line_number':3102,'multiline':False]['text':'!   container's performance. If such value does not exist, the','line_number':3103,'multiline':False]['text':'!   lowest possible value is returned.','line_number':3104,'multiline':False]['text':'!','line_number':3105,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':3106,'multiline':False]['text':'!','line_number':3107,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':3108,'multiline':False]['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':3110,'multiline':False]['text':'Taken from N3068','line_number':3115,'multiline':False]['text':'/ @cond','line_number':3147,'multiline':False]['text':'Check power of two bucket array if the option is activated','line_number':3161,'multiline':False]['text':'If the new bucket length is a common factor','line_number':3167,'multiline':False]['text':'of the old one we can avoid hash calculations.','line_number':3168,'multiline':False]['text':'If we are shrinking the same bucket array and it's','line_number':3171,'multiline':False]['text':'is a fast shrink, just rehash the last nodes','line_number':3172,'multiline':False]['text':'Anti-exception stuff: they destroy the elements if something goes wrong.','line_number':3179,'multiline':False]['text':'If the source and destination buckets are the same, the second rollback function','line_number':3180,'multiline':False]['text':'is harmless, because all elements have been already unlinked and destroyed','line_number':3181,'multiline':False]['text':'Put size in a safe value for rollback exception','line_number':3188,'multiline':False]['text':'Put cache to safe position','line_number':3191,'multiline':False]['text':'Iterate through nodes','line_number':3195,'multiline':False]['text':'First obtain hash value (and store it if do_full_rehash)','line_number':3203,'multiline':False]['text':'Now calculate the new bucket position','line_number':3215,'multiline':False]['text':'Update first used bucket cache','line_number':3219,'multiline':False]['text':'If the target bucket is new, transfer the whole group','line_number':3223,'multiline':False]['text':'Check power of two bucket array if the option is activated','line_number':3266,'multiline':False]['text':'If src bucket count is bigger or equal, structural copy is possible','line_number':3271,'multiline':False]['text':'Unlike previous cloning algorithm, this can throw','line_number':3278,'multiline':False]['text':'if cloner, hasher or comparison functor throw','line_number':3279,'multiline':False]['text':'No need to check for duplicates and insert it in the first position','line_number':3287,'multiline':False]['text':'as this is an unordered container. So use minimal insertion code','line_number':3288,'multiline':False]['text':'No need to check for duplicates and insert it in the first position','line_number':3306,'multiline':False]['text':'as this is an unordered container. So use minimal insertion code','line_number':3307,'multiline':False]['text':'std::size_t const hash_value = this->priv_stored_or_compute_hash(src_ref, store_hash_t());;','line_number':3308,'multiline':False]['text':'size_type const bucket_number = this->priv_hash_to_bucket(hash_value);','line_number':3309,'multiline':False]['text':'Just check if the cloned node is equal to the first inserted value in the new bucket','line_number':3312,'multiline':False]['text':'as equal src values were contiguous and they should be already inserted in the','line_number':3313,'multiline':False]['text':'destination bucket.','line_number':3314,'multiline':False]['text':'First clone the first ones','line_number':3324,'multiline':False]['text':'Now insert the remaining ones using the modulo trick','line_number':3334,'multiline':False]['text':'"constructed" already initialized','line_number':3335,'multiline':False]['text':'Since incremental hashing can't be structurally copied, avoid hash_to_bucket_split','line_number':3338,'multiline':False]['text':'Now store hash if needed','line_number':3367,'multiline':False]['text':'Checks for some modes','line_number':3370,'multiline':False]['text':'Shortcut to optimize_multikey cases','line_number':3372,'multiline':False]['text':'Update cache and increment size if needed','line_number':3376,'multiline':False]['text':'Insert the element in the bucket after it','line_number':3379,'multiline':False]['text':'In case it is not found previt is bucket.before_begin()','line_number':3384,'multiline':False]['text':'return previous iterator to the next equal range group in case','line_number':3399,'multiline':False]['text':'In case it is not found previt is bucket.before_begin()','line_number':3408,'multiline':False]['text':'Let's see if the element is present','line_number':3436,'multiline':False]['text':'If it's present, find the first that it's not equal in','line_number':3447,'multiline':False]['text':'the same bucket','line_number':3448,'multiline':False]['text':'At least one is found','line_number':3451,'multiline':False]['text':'Let's see if the element is present','line_number':3478,'multiline':False]['text':'If not, find the next element as ".second" if ".second" local iterator','line_number':3481,'multiline':False]['text':'is not pointing to an element.','line_number':3482,'multiline':False]['text':'store_hash','line_number':3503,'multiline':False]['text':'NO store_hash','line_number':3509,'multiline':False]['text':'/ @endcond','line_number':3515,'multiline':False]['text':'/ @cond','line_number':3518,'multiline':False]['text':'Real value traits must be calculated from options','line_number':3525,'multiline':False]['text':'Real bucket traits must be calculated from options and calculated value_traits','line_number':3531,'multiline':False]['text':'/ @endcond','line_number':3546,'multiline':False]['text':'! Helper metafunction to define a \c hashtable that yields to the same type when the','line_number':3548,'multiline':False]['text':'! same options (either explicitly or implicitly) are used.','line_number':3549,'multiline':False]['text':'/ @cond','line_number':3562,'multiline':False]['text':'/ @endcond','line_number':3593,'multiline':False]['text':'Assert if passed value traits are compatible with the type','line_number':3632,'multiline':False]['text':'namespace intrusive','line_number':3660,'multiline':False]['text':'namespace boost','line_number':3661,'multiline':False]['text':'BOOST_INTRUSIVE_HASHTABLE_HPP','line_number':3665,'multiline':False]