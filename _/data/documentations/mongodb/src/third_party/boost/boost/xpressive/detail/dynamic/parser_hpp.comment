['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file parser.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of regex_compiler, a factory for building regex objects','line_number':3,'multiline':False]['text':'/ from strings.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':6,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':7,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':13,'multiline':False]['text':' conditional expression is constant','line_number':17,'multiline':False]['text':' The Regular Expression grammar, in pseudo BNF:','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' expression   = alternates ;','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' alternates   = sequence, *('|', sequence) ;','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' sequence     = quant, *(quant) ;','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' quant        = atom, [*+?] ;','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' atom         = literal             |','line_number':37,'multiline':False]['text':'                '.'                 |','line_number':38,'multiline':False]['text':'                '\' any             |','line_number':39,'multiline':False]['text':'                '(' expression ')' ;','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' literal      = not a meta-character ;','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':48,'multiline':False]['text':' make_char_xpression','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':71,'multiline':False]['text':' make_any_xpression','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':108,'multiline':False]['text':' make_literal_xpression','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':137,'multiline':False]['text':' make_backref_xpression','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':164,'multiline':False]['text':' merge_charset','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':209,'multiline':False]['text':' make_charset_xpression','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' don't care about compile speed -- fold eveything into a bitset<256>','line_number':224,'multiline':False]['text':' special case to make [[:digit:]] fast','line_number':243,'multiline':False]['text':' default, slow','line_number':251,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':267,'multiline':False]['text':' make_posix_charset_xpression','line_number':268,'multiline':False]['text':'','line_number':269,'multiline':False]['text':'flags','line_number':275,'multiline':False]['text':'traits','line_number':276,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':283,'multiline':False]['text':' make_assert_begin_line','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':304,'multiline':False]['text':' make_assert_end_line','line_number':305,'multiline':False]['text':'','line_number':306,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':325,'multiline':False]['text':' make_assert_word','line_number':326,'multiline':False]['text':'','line_number':327,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':337,'multiline':False]['text':' make_independent_end_xpression','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' namespace boost::xpressive::detail','line_number':353,'multiline':False]