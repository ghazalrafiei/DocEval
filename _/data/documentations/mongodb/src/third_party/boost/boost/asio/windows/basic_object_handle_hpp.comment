['text':'','line_number':1,'multiline':False]['text':' windows/basic_object_handle.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':' Copyright (c) 2011 Boris Schaeling (boris@highscore.de)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':17,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':34,'multiline':False]['text':'/ Provides object-oriented handle functionality.','line_number':42,'multiline':False]['text':'*
 * The windows::basic_object_handle class provides asynchronous and blocking
 * object-oriented handle functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':43,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':55,'multiline':False]['text':'/ Rebinds the handle type to another executor.','line_number':58,'multiline':False]['text':'/ The handle type when rebound to the specified executor.','line_number':62,'multiline':False]['text':'/ The native representation of a handle.','line_number':66,'multiline':False]['text':'/ An object handle is always the lowest layer.','line_number':74,'multiline':False]['text':'/ Construct an object handle without opening it.','line_number':77,'multiline':False]['text':'*
   * This constructor creates an object handle without opening it.
   *
   * @param ex The I/O executor that the object handle will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the
   * object handle.
   ','line_number':78,'multiline':True]['text':'/ Construct an object handle without opening it.','line_number':90,'multiline':False]['text':'*
   * This constructor creates an object handle without opening it.
   *
   * @param context An execution context which provides the I/O executor that
   * the object handle will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the object handle.
   ','line_number':91,'multiline':True]['text':'/ Construct an object handle on an existing native handle.','line_number':108,'multiline':False]['text':'*
   * This constructor creates an object handle object to hold an existing native
   * handle.
   *
   * @param ex The I/O executor that the object handle will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the
   * object handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':109,'multiline':True]['text':'/ Construct an object handle on an existing native handle.','line_number':130,'multiline':False]['text':'*
   * This constructor creates an object handle object to hold an existing native
   * handle.
   *
   * @param context An execution context which provides the I/O executor that
   * the object handle will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the object handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':131,'multiline':True]['text':'/ Move-construct an object handle from another.','line_number':157,'multiline':False]['text':'*
   * This constructor moves an object handle from one object to another.
   *
   * @param other The other object handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_object_handle(const executor_type&)
   * constructor.
   ','line_number':158,'multiline':True]['text':'/ Move-assign an object handle from another.','line_number':173,'multiline':False]['text':'*
   * This assignment operator moves an object handle from one object to another.
   *
   * @param other The other object handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_object_handle(const executor_type&)
   * constructor.
   ','line_number':174,'multiline':True]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':189,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':191,'multiline':False]['text':'/ Get a reference to the lowest layer.','line_number':197,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since an object handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':198,'multiline':True]['text':'/ Get a const reference to the lowest layer.','line_number':211,'multiline':False]['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since an object handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':212,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':225,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':226,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':240,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':241,'multiline':True]['text':'/ Determine whether the handle is open.','line_number':255,'multiline':False]['text':'/ Close the handle.','line_number':261,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':262,'multiline':True]['text':'/ Close the handle.','line_number':276,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':277,'multiline':True]['text':'/ Get the native handle representation.','line_number':290,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * handle. This is intended to allow access to native handle functionality
   * that is not otherwise provided.
   ','line_number':291,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':301,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':302,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':316,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':317,'multiline':True]['text':'/ Perform a blocking wait on the object handle.','line_number':330,'multiline':False]['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':331,'multiline':True]['text':'/ Perform a blocking wait on the object handle.','line_number':345,'multiline':False]['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':346,'multiline':True]['text':'/ Start an asynchronous wait on the object handle.','line_number':358,'multiline':False]['text':'*
   * This function is be used to initiate an asynchronous wait against the
   * object handle. It is an initiating function for an @ref
   * asynchronous_operation, and always returns immediately.
   *
   * @param token The @ref completion_token that will be used to produce a
   * completion handler, which will be called when the wait completes.
   * Potential completion tokens include @ref use_future, @ref use_awaitable,
   * @ref yield_context, or a function object with the correct completion
   * signature. The function signature of the completion handler must be:
   * @code void handler(
   *   const boost::system::error_code& error // Result of operation.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the completion handler will not be invoked from within this function.
   * On immediate completion, invocation of the handler will be performed in a
   * manner equivalent to using boost::asio::post().
   *
   * @par Completion Signature
   * @code void(boost::system::error_code) @endcode
   ','line_number':359,'multiline':True]['text':' Disallow copying and assignment.','line_number':394,'multiline':False]['text':' If you get an error on the following line it means that your handler','line_number':416,'multiline':False]['text':' does not meet the documented type requirements for a WaitHandler.','line_number':417,'multiline':False]['text':' namespace windows','line_number':434,'multiline':False]['text':' namespace asio','line_number':435,'multiline':False]['text':' namespace boost','line_number':436,'multiline':False]['text':' defined(BOOST_ASIO_HAS_WINDOWS_OBJECT_HANDLE)','line_number':440,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':441,'multiline':False]['text':' BOOST_ASIO_WINDOWS_BASIC_OBJECT_HANDLE_HPP','line_number':443,'multiline':False]