['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' Computation of the Incomplete Gamma Function Ratios and their Inverse','line_number':27,'multiline':False]['text':' ARMIDO R. DIDONATO and ALFRED H. MORRIS, JR.','line_number':28,'multiline':False]['text':' ACM Transactions on Mathematical Software, Vol. 12, No. 4,','line_number':29,'multiline':False]['text':' December 1986, Pages 377-393.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' See equation 32.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' Computation of the Incomplete Gamma Function Ratios and their Inverse','line_number':56,'multiline':False]['text':' ARMIDO R. DIDONATO and ALFRED H. MORRIS, JR.','line_number':57,'multiline':False]['text':' ACM Transactions on Mathematical Software, Vol. 12, No. 4,','line_number':58,'multiline':False]['text':' December 1986, Pages 377-393.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' See equation 34.','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' Computation of the Incomplete Gamma Function Ratios and their Inverse','line_number':83,'multiline':False]['text':' ARMIDO R. DIDONATO and ALFRED H. MORRIS, JR.','line_number':84,'multiline':False]['text':' ACM Transactions on Mathematical Software, Vol. 12, No. 4,','line_number':85,'multiline':False]['text':' December 1986, Pages 377-393.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' See equation 34.','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' In order to understand what's going on here, you will','line_number':99,'multiline':False]['text':' need to refer to:','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Computation of the Incomplete Gamma Function Ratios and their Inverse','line_number':102,'multiline':False]['text':' ARMIDO R. DIDONATO and ALFRED H. MORRIS, JR.','line_number':103,'multiline':False]['text':' ACM Transactions on Mathematical Software, Vol. 12, No. 4,','line_number':104,'multiline':False]['text':' December 1986, Pages 377-393.','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' DiDonato & Morris Eq 21: ','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' There is a slight variation from DiDonato and Morris here:','line_number':127,'multiline':False]['text':' the first form given here is unstable when p is close to 1,','line_number':128,'multiline':False]['text':' making it impossible to compute the inverse of Q(a,x) for small','line_number':129,'multiline':False]['text':' q.  Fortunately the second form works perfectly well in this case.','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' DiDonato & Morris Eq 22:','line_number':148,'multiline':False]['text':' DiDonato & Morris Eq 23:','line_number':156,'multiline':False]['text':' DiDonato & Morris Eq 24:','line_number':164,'multiline':False]['text':' DiDonato & Morris Eq 25:','line_number':172,'multiline':False]['text':' DiDonato and Morris Eq 31:','line_number':201,'multiline':False]['text':' DiDonato and Morris Eq 25:','line_number':241,'multiline':False]['text':' DiDonato and Morris Eq 33:','line_number':267,'multiline':False]['text':' DiDonato and Morris Eq 35:','line_number':281,'multiline':False]['text':' DiDonato and Morris Eq 36:','line_number':302,'multiline':False]['text':'','line_number':320,'multiline':False]['text':' If p is too near 1 then P(x) - p suffers from cancellation','line_number':321,'multiline':False]['text':' errors causing our root-finding algorithms to "thrash", better','line_number':322,'multiline':False]['text':' to invert in this case and calculate Q(x) - (1-p) instead.','line_number':323,'multiline':False]['text':'','line_number':324,'multiline':False]['text':' Of course if p is *very* close to 1, then the answer we get will','line_number':325,'multiline':False]['text':' be inaccurate anyway (because there's not enough information in p)','line_number':326,'multiline':False]['text':' but at least we will converge on the (inaccurate) answer quickly.','line_number':327,'multiline':False]['text':'','line_number':328,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' Calculate P(x) - p and the first two derivates, or if the invert','line_number':340,'multiline':False]['text':' flag is set, then Q(x) - q and it's derivatives.','line_number':341,'multiline':False]['text':'','line_number':342,'multiline':False]['text':' typedef typename lanczos::lanczos<T, Policy>::type evaluation_type;','line_number':344,'multiline':False]['text':' For ADL of std functions.','line_number':352,'multiline':False]['text':' overflow:','line_number':367,'multiline':False]['text':' ADL of std functions.','line_number':391,'multiline':False]['text':'','line_number':414,'multiline':False]['text':' Work out how many digits to converge to, normally this is','line_number':415,'multiline':False]['text':' 2/3 of the digits in T, but if the first derivative is very','line_number':416,'multiline':False]['text':' large convergence is slow, so we'll bump it up to full ','line_number':417,'multiline':False]['text':' precision to prevent premature termination of the root-finding routine.','line_number':418,'multiline':False]['text':'','line_number':419,'multiline':False]['text':'','line_number':433,'multiline':False]['text':' Go ahead and iterate:','line_number':434,'multiline':False]['text':'','line_number':435,'multiline':False]['text':' ADL of std functions.','line_number':454,'multiline':False]['text':'','line_number':473,'multiline':False]['text':' Work out how many digits to converge to, normally this is','line_number':474,'multiline':False]['text':' 2/3 of the digits in T, but if the first derivative is very','line_number':475,'multiline':False]['text':' large convergence is slow, so we'll bump it up to full ','line_number':476,'multiline':False]['text':' precision to prevent premature termination of the root-finding routine.','line_number':477,'multiline':False]['text':'','line_number':478,'multiline':False]['text':'','line_number':492,'multiline':False]['text':' Go ahead and iterate:','line_number':493,'multiline':False]['text':'','line_number':494,'multiline':False]['text':' namespace detail','line_number':509,'multiline':False]['text':' namespace math','line_number':545,'multiline':False]['text':' namespace boost','line_number':546,'multiline':False]['text':' BOOST_MATH_SPECIAL_FUNCTIONS_IGAMMA_INVERSE_HPP','line_number':548,'multiline':False]