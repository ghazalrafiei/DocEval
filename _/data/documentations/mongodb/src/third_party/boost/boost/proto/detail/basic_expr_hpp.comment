['text':'/ INTERNAL ONLY','line_number':7,'multiline':False]['text':'/','line_number':8,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':12,'multiline':True]['text':'/ INTERNAL ONLY','line_number':14,'multiline':False]['text':'/','line_number':15,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':18,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':24,'multiline':False]['text':'/ \file basic_expr.hpp','line_number':25,'multiline':False]['text':'/ Contains definition of basic_expr\<\> class template.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':28,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':29,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':30,'multiline':False]['text':' The expr<> specializations are actually defined here.','line_number':36,'multiline':False]['text':'/ \brief Simplified representation of a node in an expression tree.','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/ \c proto::basic_expr\<\> is a node in an expression template tree. It','line_number':58,'multiline':False]['text':'/ is a container for its child sub-trees. It also serves as','line_number':59,'multiline':False]['text':'/ the terminal nodes of the tree.','line_number':60,'multiline':False]['text':'/','line_number':61,'multiline':False]['text':'/ \c Tag is type that represents the operation encoded by','line_number':62,'multiline':False]['text':'/             this expression. It is typically one of the structs','line_number':63,'multiline':False]['text':'/             in the \c boost::proto::tag namespace, but it doesn't','line_number':64,'multiline':False]['text':'/             have to be.','line_number':65,'multiline':False]['text':'/','line_number':66,'multiline':False]['text':'/ \c Args is a type list representing the type of the children','line_number':67,'multiline':False]['text':'/             of this expression. It is an instantiation of one','line_number':68,'multiline':False]['text':'/             of \c proto::list1\<\>, \c proto::list2\<\>, etc. The','line_number':69,'multiline':False]['text':'/             child types must all themselves be either \c expr\<\>','line_number':70,'multiline':False]['text':'/             or <tt>proto::expr\<\>&</tt>. If \c Args is an','line_number':71,'multiline':False]['text':'/             instantiation of \c proto::term\<\> then this','line_number':72,'multiline':False]['text':'/             \c expr\<\> type represents a terminal expression;','line_number':73,'multiline':False]['text':'/             the parameter to the \c proto::term\<\> template','line_number':74,'multiline':False]['text':'/             represents the terminal's value type.','line_number':75,'multiline':False]['text':'/','line_number':76,'multiline':False]['text':'/ \c Arity is an integral constant representing the number of child','line_number':77,'multiline':False]['text':'/             nodes this node contains. If \c Arity is 0, then this','line_number':78,'multiline':False]['text':'/             node is a terminal.','line_number':79,'multiline':False]['text':'/','line_number':80,'multiline':False]['text':'/ \c proto::basic_expr\<\> is a valid Fusion random-access sequence, where','line_number':81,'multiline':False]['text':'/ the elements of the sequence are the child expressions.','line_number':82,'multiline':False]['text':'*< INTERNAL ONLY ','line_number':105,'multiline':True]['text':'/ \return *this','line_number':110,'multiline':False]['text':'/','line_number':111,'multiline':False]['text':'/ \overload','line_number':118,'multiline':False]['text':'/','line_number':119,'multiline':False]['text':'/ \return A new \c expr\<\> object initialized with the specified','line_number':127,'multiline':False]['text':'/ arguments.','line_number':128,'multiline':False]['text':'/','line_number':129,'multiline':False]['text':'/ \overload','line_number':137,'multiline':False]['text':'/','line_number':138,'multiline':False]['text':'/ \return A new \c expr\<\> object initialized with the specified','line_number':146,'multiline':False]['text':'/ arguments.','line_number':147,'multiline':False]['text':'/','line_number':148,'multiline':False]['text':'/ If \c Tag is \c boost::proto::tag::address_of and \c proto_child0 is','line_number':159,'multiline':False]['text':'/ <tt>T&</tt>, then \c address_of_hack_type_ is <tt>T*</tt>.','line_number':160,'multiline':False]['text':'/ Otherwise, it is some undefined type.','line_number':161,'multiline':False]['text':'/ \return The address of <tt>this->child0</tt> if \c Tag is','line_number':164,'multiline':False]['text':'/ \c boost::proto::tag::address_of. Otherwise, this function will','line_number':165,'multiline':False]['text':'/ fail to compile.','line_number':166,'multiline':False]['text':'/','line_number':167,'multiline':False]['text':'/ \attention Proto overloads <tt>operator&</tt>, which means that','line_number':168,'multiline':False]['text':'/ proto-ified objects cannot have their addresses taken, unless we use','line_number':169,'multiline':False]['text':'/ the following hack to make \c &x implicitly convertible to \c X*.','line_number':170,'multiline':False]['text':'/ INTERNAL ONLY','line_number':177,'multiline':False]['text':'/','line_number':178,'multiline':False]