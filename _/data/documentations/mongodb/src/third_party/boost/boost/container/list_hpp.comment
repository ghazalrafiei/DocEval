['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2005-2015. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':' container','line_number':24,'multiline':False]['text':'new_allocator','line_number':26,'multiline':False]['text':' container/detail','line_number':28,'multiline':False]['text':' move','line_number':37,'multiline':False]['text':' move/detail','line_number':41,'multiline':False]['text':' intrusive','line_number':48,'multiline':False]['text':' other','line_number':51,'multiline':False]['text':' std','line_number':53,'multiline':False]['text':'namespace dtl {','line_number':97,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':98,'multiline':False]['text':'! A list is a doubly linked list. That is, it is a Sequence that supports both','line_number':100,'multiline':False]['text':'! forward and backward traversal, and (amortized) constant time insertion and','line_number':101,'multiline':False]['text':'! removal of elements at the beginning or the end, or in the middle. Lists have','line_number':102,'multiline':False]['text':'! the important property that insertion and splicing do not invalidate iterators','line_number':103,'multiline':False]['text':'! to list elements, and that even removal invalidates only the iterators that point','line_number':104,'multiline':False]['text':'! to the elements that are removed. The ordering of iterators may be changed','line_number':105,'multiline':False]['text':'! (that is, list<T>::iterator might have a different predecessor or successor','line_number':106,'multiline':False]['text':'! after a list operation than it did before), but the iterators themselves will','line_number':107,'multiline':False]['text':'! not be invalidated or made to point to different elements unless that invalidation','line_number':108,'multiline':False]['text':'! or mutation is explicit.','line_number':109,'multiline':False]['text':'!','line_number':110,'multiline':False]['text':'! \tparam T The type of object that is stored in the list','line_number':111,'multiline':False]['text':'! \tparam Allocator The allocator used for all internal memory management, use void','line_number':112,'multiline':False]['text':'!   for the default allocator','line_number':113,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':143,'multiline':False]['text':'////////////////////////////////////////////','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':'                    types','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':'////////////////////////////////////////////','line_number':150,'multiline':False]['text':'////////////////////////////////////////////','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':'          construct/copy/destroy','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':'////////////////////////////////////////////','line_number':170,'multiline':False]['text':'! <b>Effects</b>: Default constructs a list.','line_number':172,'multiline':False]['text':'!','line_number':173,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor throws.','line_number':174,'multiline':False]['text':'!','line_number':175,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':176,'multiline':False]['text':'! <b>Effects</b>: Constructs a list taking the allocator as parameter.','line_number':181,'multiline':False]['text':'!','line_number':182,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':183,'multiline':False]['text':'!','line_number':184,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':185,'multiline':False]['text':'! <b>Effects</b>: Constructs a list','line_number':190,'multiline':False]['text':'!   and inserts n value-initialized value_types.','line_number':191,'multiline':False]['text':'!','line_number':192,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':193,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':194,'multiline':False]['text':'!','line_number':195,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':196,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':201,'multiline':False]['text':'!   and inserts n copies of value.','line_number':202,'multiline':False]['text':'!','line_number':203,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':204,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':205,'multiline':False]['text':'!','line_number':206,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':207,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':212,'multiline':False]['text':'!   and inserts n copies of value.','line_number':213,'multiline':False]['text':'!','line_number':214,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':215,'multiline':False]['text':'!   throws or T's default or copy constructor throws.','line_number':216,'multiline':False]['text':'!','line_number':217,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':218,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a list.','line_number':223,'multiline':False]['text':'!','line_number':224,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':225,'multiline':False]['text':'!','line_number':226,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor throws.','line_number':227,'multiline':False]['text':'!','line_number':228,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':229,'multiline':False]['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':234,'multiline':False]['text':'!','line_number':235,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's copy constructor throws.','line_number':236,'multiline':False]['text':'!','line_number':237,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':238,'multiline':False]['text':'! <b>Effects</b>: Copy constructs a list using the specified allocator.','line_number':243,'multiline':False]['text':'!','line_number':244,'multiline':False]['text':'! <b>Postcondition</b>: x == *this.','line_number':245,'multiline':False]['text':'!','line_number':246,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor or copy constructor throws.','line_number':247,'multiline':False]['text':'!','line_number':248,'multiline':False]['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':249,'multiline':False]['text':'! <b>Effects</b>: Move constructor sing the specified allocator.','line_number':254,'multiline':False]['text':'!                 Moves x's resources to *this.','line_number':255,'multiline':False]['text':'!','line_number':256,'multiline':False]['text':'! <b>Throws</b>: If allocation or value_type's copy constructor throws.','line_number':257,'multiline':False]['text':'!','line_number':258,'multiline':False]['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':259,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':271,'multiline':False]['text':'!   and inserts a copy of the range [first, last) in the list.','line_number':272,'multiline':False]['text':'!','line_number':273,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':274,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced InIt throws.','line_number':275,'multiline':False]['text':'!','line_number':276,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [first, last).','line_number':277,'multiline':False]['text':'! <b>Effects</b>: Constructs a list that will use a copy of allocator a','line_number':285,'multiline':False]['text':'!   and inserts a copy of the range [il.begin(), il.end()) in the list.','line_number':286,'multiline':False]['text':'!','line_number':287,'multiline':False]['text':'! <b>Throws</b>: If allocator_type's default constructor','line_number':288,'multiline':False]['text':'!   throws or T's constructor taking a dereferenced','line_number':289,'multiline':False]['text':'!   std::initializer_list iterator throws.','line_number':290,'multiline':False]['text':'!','line_number':291,'multiline':False]['text':'! <b>Complexity</b>: Linear to the range [il.begin(), il.end()).','line_number':292,'multiline':False]['text':'! <b>Effects</b>: Destroys the list. All stored values are destroyed','line_number':298,'multiline':False]['text':'!   and used memory is deallocated.','line_number':299,'multiline':False]['text':'!','line_number':300,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':301,'multiline':False]['text':'!','line_number':302,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements.','line_number':303,'multiline':False]['text':'AllocHolder clears the list','line_number':305,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as x.','line_number':307,'multiline':False]['text':'!','line_number':308,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == x.size(). *this contains a copy','line_number':309,'multiline':False]['text':'! of each of x's elements.','line_number':310,'multiline':False]['text':'!','line_number':311,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':312,'multiline':False]['text':'!','line_number':313,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':314,'multiline':False]['text':'! <b>Effects</b>: Move assignment. All x's values are transferred to *this.','line_number':331,'multiline':False]['text':'!','line_number':332,'multiline':False]['text':'! <b>Postcondition</b>: x.empty(). *this contains a the elements x had','line_number':333,'multiline':False]['text':'!   before the function.','line_number':334,'multiline':False]['text':'!','line_number':335,'multiline':False]['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':336,'multiline':False]['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':337,'multiline':False]['text':'!','line_number':338,'multiline':False]['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':339,'multiline':False]['text':'!   propagate_on_container_move_assignment is true or','line_number':340,'multiline':False]['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':341,'multiline':False]['text':'Resources can be transferred if both allocators are','line_number':352,'multiline':False]['text':'going to be equal after this function (either propagated or already equal)','line_number':353,'multiline':False]['text':'Destroy','line_number':355,'multiline':False]['text':'Move allocator if needed','line_number':357,'multiline':False]['text':'Obtain resources','line_number':359,'multiline':False]['text':'Else do a one by one move','line_number':362,'multiline':False]['text':'! <b>Effects</b>: Makes *this contain the same elements as il.','line_number':372,'multiline':False]['text':'!','line_number':373,'multiline':False]['text':'! <b>Postcondition</b>: this->size() == il.size(). *this contains a copy','line_number':374,'multiline':False]['text':'! of each of x's elements.','line_number':375,'multiline':False]['text':'!','line_number':376,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':377,'multiline':False]['text':'!','line_number':378,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in x.','line_number':379,'multiline':False]['text':'! <b>Effects</b>: Assigns the n copies of val to *this.','line_number':387,'multiline':False]['text':'!','line_number':388,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':389,'multiline':False]['text':'!','line_number':390,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':391,'multiline':False]['text':'! <b>Effects</b>: Assigns the range [first, last) to *this.','line_number':398,'multiline':False]['text':'!','line_number':399,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':400,'multiline':False]['text':'!   T's constructor from dereferencing InpIt throws.','line_number':401,'multiline':False]['text':'!','line_number':402,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':403,'multiline':False]['text':'! <b>Effects</b>: Assigns the range [il.begin(), il.end()) to *this.','line_number':423,'multiline':False]['text':'!','line_number':424,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':425,'multiline':False]['text':'!   T's constructor from dereferencing std::initializer_list iterator throws.','line_number':426,'multiline':False]['text':'!','line_number':427,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':428,'multiline':False]['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':433,'multiline':False]['text':'!','line_number':434,'multiline':False]['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':435,'multiline':False]['text':'!','line_number':436,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':437,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':442,'multiline':False]['text':'!','line_number':443,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':444,'multiline':False]['text':'!','line_number':445,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':446,'multiline':False]['text':'!','line_number':447,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':448,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':453,'multiline':False]['text':'!','line_number':454,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':455,'multiline':False]['text':'!','line_number':456,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':457,'multiline':False]['text':'!','line_number':458,'multiline':False]['text':'! <b>Note</b>: Non-standard extension.','line_number':459,'multiline':False]['text':'////////////////////////////////////////////','line_number':464,'multiline':False]['text':'','line_number':465,'multiline':False]['text':'                iterators','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':'////////////////////////////////////////////','line_number':468,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the list.','line_number':470,'multiline':False]['text':'!','line_number':471,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':472,'multiline':False]['text':'!','line_number':473,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':474,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':479,'multiline':False]['text':'!','line_number':480,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':481,'multiline':False]['text':'!','line_number':482,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':483,'multiline':False]['text':'! <b>Effects</b>: Returns an iterator to the end of the list.','line_number':488,'multiline':False]['text':'!','line_number':489,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':490,'multiline':False]['text':'!','line_number':491,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':492,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':497,'multiline':False]['text':'!','line_number':498,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':499,'multiline':False]['text':'!','line_number':500,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':501,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':506,'multiline':False]['text':'! of the reversed list.','line_number':507,'multiline':False]['text':'!','line_number':508,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':509,'multiline':False]['text':'!','line_number':510,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':511,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':516,'multiline':False]['text':'! of the reversed list.','line_number':517,'multiline':False]['text':'!','line_number':518,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':519,'multiline':False]['text':'!','line_number':520,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':521,'multiline':False]['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':526,'multiline':False]['text':'! of the reversed list.','line_number':527,'multiline':False]['text':'!','line_number':528,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':529,'multiline':False]['text':'!','line_number':530,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':531,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':536,'multiline':False]['text':'! of the reversed list.','line_number':537,'multiline':False]['text':'!','line_number':538,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':539,'multiline':False]['text':'!','line_number':540,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':541,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the list.','line_number':546,'multiline':False]['text':'!','line_number':547,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':548,'multiline':False]['text':'!','line_number':549,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':550,'multiline':False]['text':'! <b>Effects</b>: Returns a const_iterator to the end of the list.','line_number':555,'multiline':False]['text':'!','line_number':556,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':557,'multiline':False]['text':'!','line_number':558,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':559,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':564,'multiline':False]['text':'! of the reversed list.','line_number':565,'multiline':False]['text':'!','line_number':566,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':567,'multiline':False]['text':'!','line_number':568,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':569,'multiline':False]['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':574,'multiline':False]['text':'! of the reversed list.','line_number':575,'multiline':False]['text':'!','line_number':576,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':577,'multiline':False]['text':'!','line_number':578,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':579,'multiline':False]['text':'////////////////////////////////////////////','line_number':584,'multiline':False]['text':'','line_number':585,'multiline':False]['text':'                capacity','line_number':586,'multiline':False]['text':'','line_number':587,'multiline':False]['text':'////////////////////////////////////////////','line_number':588,'multiline':False]['text':'! <b>Effects</b>: Returns true if the list contains no elements.','line_number':590,'multiline':False]['text':'!','line_number':591,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':592,'multiline':False]['text':'!','line_number':593,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':594,'multiline':False]['text':'! <b>Effects</b>: Returns the number of the elements contained in the list.','line_number':599,'multiline':False]['text':'!','line_number':600,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':601,'multiline':False]['text':'!','line_number':602,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':603,'multiline':False]['text':'! <b>Effects</b>: Returns the largest possible size of the list.','line_number':608,'multiline':False]['text':'!','line_number':609,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':610,'multiline':False]['text':'!','line_number':611,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':612,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':617,'multiline':False]['text':'!   the size becomes n. New elements are value initialized.','line_number':618,'multiline':False]['text':'!','line_number':619,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':620,'multiline':False]['text':'!','line_number':621,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':622,'multiline':False]['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':631,'multiline':False]['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':632,'multiline':False]['text':'!','line_number':633,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':634,'multiline':False]['text':'!','line_number':635,'multiline':False]['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':636,'multiline':False]['text':'////////////////////////////////////////////','line_number':644,'multiline':False]['text':'','line_number':645,'multiline':False]['text':'               element access','line_number':646,'multiline':False]['text':'','line_number':647,'multiline':False]['text':'////////////////////////////////////////////','line_number':648,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':650,'multiline':False]['text':'!','line_number':651,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first element','line_number':652,'multiline':False]['text':'!   from the beginning of the container.','line_number':653,'multiline':False]['text':'!','line_number':654,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':655,'multiline':False]['text':'!','line_number':656,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':657,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':665,'multiline':False]['text':'!','line_number':666,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first element','line_number':667,'multiline':False]['text':'!   from the beginning of the container.','line_number':668,'multiline':False]['text':'!','line_number':669,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':670,'multiline':False]['text':'!','line_number':671,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':672,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':680,'multiline':False]['text':'!','line_number':681,'multiline':False]['text':'! <b>Effects</b>: Returns a reference to the first element','line_number':682,'multiline':False]['text':'!   from the beginning of the container.','line_number':683,'multiline':False]['text':'!','line_number':684,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':685,'multiline':False]['text':'!','line_number':686,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':687,'multiline':False]['text':'! <b>Requires</b>: !empty()','line_number':695,'multiline':False]['text':'!','line_number':696,'multiline':False]['text':'! <b>Effects</b>: Returns a const reference to the first element','line_number':697,'multiline':False]['text':'!   from the beginning of the container.','line_number':698,'multiline':False]['text':'!','line_number':699,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':700,'multiline':False]['text':'!','line_number':701,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':702,'multiline':False]['text':'////////////////////////////////////////////','line_number':710,'multiline':False]['text':'','line_number':711,'multiline':False]['text':'                modifiers','line_number':712,'multiline':False]['text':'','line_number':713,'multiline':False]['text':'////////////////////////////////////////////','line_number':714,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':718,'multiline':False]['text':'!   std::forward<Args>(args)... in the end of the list.','line_number':719,'multiline':False]['text':'!','line_number':720,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':721,'multiline':False]['text':'!','line_number':722,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':723,'multiline':False]['text':'!   T's in-place constructor throws.','line_number':724,'multiline':False]['text':'!','line_number':725,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':726,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':731,'multiline':False]['text':'!   std::forward<Args>(args)... in the beginning of the list.','line_number':732,'multiline':False]['text':'!','line_number':733,'multiline':False]['text':'! <b>Returns</b>: A reference to the created object.','line_number':734,'multiline':False]['text':'!','line_number':735,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':736,'multiline':False]['text':'!   T's in-place constructor throws.','line_number':737,'multiline':False]['text':'!','line_number':738,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':739,'multiline':False]['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':744,'multiline':False]['text':'!   std::forward<Args>(args)... before p.','line_number':745,'multiline':False]['text':'!','line_number':746,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':747,'multiline':False]['text':'!   T's in-place constructor throws.','line_number':748,'multiline':False]['text':'!','line_number':749,'multiline':False]['text':'! <b>Complexity</b>: Constant','line_number':750,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':759,'multiline':False]['text':'','line_number':777,'multiline':False]['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':781,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the beginning of the list.','line_number':784,'multiline':False]['text':'!','line_number':785,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':786,'multiline':False]['text':'!   T's copy constructor throws.','line_number':787,'multiline':False]['text':'!','line_number':788,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':789,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the beginning of the list','line_number':792,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':793,'multiline':False]['text':'!','line_number':794,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':795,'multiline':False]['text':'!','line_number':796,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':797,'multiline':False]['text':'! <b>Effects</b>: Inserts a copy of x at the end of the list.','line_number':804,'multiline':False]['text':'!','line_number':805,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or','line_number':806,'multiline':False]['text':'!   T's copy constructor throws.','line_number':807,'multiline':False]['text':'!','line_number':808,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':809,'multiline':False]['text':'! <b>Effects</b>: Constructs a new element in the end of the list','line_number':812,'multiline':False]['text':'!   and moves the resources of x to this new element.','line_number':813,'multiline':False]['text':'!','line_number':814,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':815,'multiline':False]['text':'!','line_number':816,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':817,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':824,'multiline':False]['text':'!','line_number':825,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of x before p.','line_number':826,'multiline':False]['text':'!','line_number':827,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':828,'multiline':False]['text':'!','line_number':829,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or x's copy constructor throws.','line_number':830,'multiline':False]['text':'!','line_number':831,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':832,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':835,'multiline':False]['text':'!','line_number':836,'multiline':False]['text':'! <b>Effects</b>: Insert a new element before p with x's resources.','line_number':837,'multiline':False]['text':'!','line_number':838,'multiline':False]['text':'! <b>Returns</b>: an iterator to the inserted element.','line_number':839,'multiline':False]['text':'!','line_number':840,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws.','line_number':841,'multiline':False]['text':'!','line_number':842,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':843,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':849,'multiline':False]['text':'!','line_number':850,'multiline':False]['text':'! <b>Effects</b>: Inserts n copies of x before p.','line_number':851,'multiline':False]['text':'!','line_number':852,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if n is 0.','line_number':853,'multiline':False]['text':'!','line_number':854,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws or T's copy constructor throws.','line_number':855,'multiline':False]['text':'!','line_number':856,'multiline':False]['text':'! <b>Complexity</b>: Linear to n.','line_number':857,'multiline':False]['text':'range check is done by insert','line_number':860,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':865,'multiline':False]['text':'!','line_number':866,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [first, last) range before p.','line_number':867,'multiline':False]['text':'!','line_number':868,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if first == last.','line_number':869,'multiline':False]['text':'!','line_number':870,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':871,'multiline':False]['text':'!   dereferenced InpIt throws.','line_number':872,'multiline':False]['text':'!','line_number':873,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [first, last).','line_number':874,'multiline':False]['text':'Optimized allocation and construction','line_number':912,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':922,'multiline':False]['text':'!','line_number':923,'multiline':False]['text':'! <b>Effects</b>: Insert a copy of the [il.begin(), il.end()) range before p.','line_number':924,'multiline':False]['text':'!','line_number':925,'multiline':False]['text':'! <b>Returns</b>: an iterator to the first inserted element or p if if.begin() == il.end().','line_number':926,'multiline':False]['text':'!','line_number':927,'multiline':False]['text':'! <b>Throws</b>: If memory allocation throws, T's constructor from a','line_number':928,'multiline':False]['text':'!   dereferenced std::initializer_list iterator throws.','line_number':929,'multiline':False]['text':'!','line_number':930,'multiline':False]['text':'! <b>Complexity</b>: Linear to distance [il.begin(), il.end()).','line_number':931,'multiline':False]['text':'position range check is done by insert()','line_number':934,'multiline':False]['text':'! <b>Effects</b>: Removes the first element from the list.','line_number':939,'multiline':False]['text':'!','line_number':940,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':941,'multiline':False]['text':'!','line_number':942,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':943,'multiline':False]['text':'! <b>Effects</b>: Removes the last element from the list.','line_number':950,'multiline':False]['text':'!','line_number':951,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':952,'multiline':False]['text':'!','line_number':953,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':954,'multiline':False]['text':'! <b>Requires</b>: p must be a valid iterator of *this.','line_number':962,'multiline':False]['text':'!','line_number':963,'multiline':False]['text':'! <b>Effects</b>: Erases the element at p.','line_number':964,'multiline':False]['text':'!','line_number':965,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':966,'multiline':False]['text':'!','line_number':967,'multiline':False]['text':'! <b>Complexity</b>: Amortized constant time.','line_number':968,'multiline':False]['text':'! <b>Requires</b>: first and last must be valid iterator to elements in *this.','line_number':975,'multiline':False]['text':'!','line_number':976,'multiline':False]['text':'! <b>Effects</b>: Erases the elements pointed by [first, last).','line_number':977,'multiline':False]['text':'!','line_number':978,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':979,'multiline':False]['text':'!','line_number':980,'multiline':False]['text':'! <b>Complexity</b>: Linear to the distance between first and last.','line_number':981,'multiline':False]['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':989,'multiline':False]['text':'!','line_number':990,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':991,'multiline':False]['text':'!','line_number':992,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':993,'multiline':False]['text':'! <b>Effects</b>: Erases all the elements of the list.','line_number':1004,'multiline':False]['text':'!','line_number':1005,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1006,'multiline':False]['text':'!','line_number':1007,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the list.','line_number':1008,'multiline':False]['text':'////////////////////////////////////////////','line_number':1012,'multiline':False]['text':'','line_number':1013,'multiline':False]['text':'              slist operations','line_number':1014,'multiline':False]['text':'','line_number':1015,'multiline':False]['text':'////////////////////////////////////////////','line_number':1016,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1018,'multiline':False]['text':'!   by the list. x != *this. this' allocator and x's allocator shall compare equal','line_number':1019,'multiline':False]['text':'!','line_number':1020,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':1021,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':1022,'multiline':False]['text':'!','line_number':1023,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1024,'multiline':False]['text':'!','line_number':1025,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1026,'multiline':False]['text':'!','line_number':1027,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':1028,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':1029,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1038,'multiline':False]['text':'!   by the list. x != *this. this' allocator and x's allocator shall compare equal','line_number':1039,'multiline':False]['text':'!','line_number':1040,'multiline':False]['text':'! <b>Effects</b>: Transfers all the elements of list x to this list, before the','line_number':1041,'multiline':False]['text':'!   the element pointed by p. No destructors or copy constructors are called.','line_number':1042,'multiline':False]['text':'!','line_number':1043,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1044,'multiline':False]['text':'!','line_number':1045,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1046,'multiline':False]['text':'!','line_number':1047,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of','line_number':1048,'multiline':False]['text':'!    this list. Iterators of this list and all the references are not invalidated.','line_number':1049,'multiline':False]['text':'Checks done in splice','line_number':1052,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1056,'multiline':False]['text':'!   by this list. i must point to an element contained in list x.','line_number':1057,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal','line_number':1058,'multiline':False]['text':'!','line_number':1059,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1060,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1061,'multiline':False]['text':'!   If p == i or p == ++i, this function is a null operation.','line_number':1062,'multiline':False]['text':'!','line_number':1063,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1064,'multiline':False]['text':'!','line_number':1065,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1066,'multiline':False]['text':'!','line_number':1067,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1068,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1069,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1077,'multiline':False]['text':'!   by this list. i must point to an element contained in list x.','line_number':1078,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1079,'multiline':False]['text':'!','line_number':1080,'multiline':False]['text':'! <b>Effects</b>: Transfers the value pointed by i, from list x to this list,','line_number':1081,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1082,'multiline':False]['text':'!   If p == i or p == ++i, this function is a null operation.','line_number':1083,'multiline':False]['text':'!','line_number':1084,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1085,'multiline':False]['text':'!','line_number':1086,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1087,'multiline':False]['text':'!','line_number':1088,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1089,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1090,'multiline':False]['text':'Additional checks done in splice()','line_number':1094,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1098,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1099,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal','line_number':1100,'multiline':False]['text':'!','line_number':1101,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1102,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1103,'multiline':False]['text':'!','line_number':1104,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1105,'multiline':False]['text':'!','line_number':1106,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred.','line_number':1107,'multiline':False]['text':'!','line_number':1108,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1109,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1110,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1120,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1121,'multiline':False]['text':'!   this' allocator and x's allocator shall compare equal.','line_number':1122,'multiline':False]['text':'!','line_number':1123,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1124,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1125,'multiline':False]['text':'!','line_number':1126,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1127,'multiline':False]['text':'!','line_number':1128,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements transferred.','line_number':1129,'multiline':False]['text':'!','line_number':1130,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1131,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1132,'multiline':False]['text':'Additional checks done in splice()','line_number':1136,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1140,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1141,'multiline':False]['text':'!   n == distance(first, last). this' allocator and x's allocator shall compare equal','line_number':1142,'multiline':False]['text':'!','line_number':1143,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1144,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1145,'multiline':False]['text':'!','line_number':1146,'multiline':False]['text':'! <b>Throws</b>:  Nothing','line_number':1147,'multiline':False]['text':'!','line_number':1148,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1149,'multiline':False]['text':'!','line_number':1150,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1151,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1152,'multiline':False]['text':'!','line_number':1153,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1154,'multiline':False]['text':'! <b>Requires</b>: p must point to an element contained','line_number':1161,'multiline':False]['text':'!   by this list. first and last must point to elements contained in list x.','line_number':1162,'multiline':False]['text':'!   n == distance(first, last). this' allocator and x's allocator shall compare equal','line_number':1163,'multiline':False]['text':'!','line_number':1164,'multiline':False]['text':'! <b>Effects</b>: Transfers the range pointed by first and last from list x to this list,','line_number':1165,'multiline':False]['text':'!   before the element pointed by p. No destructors or copy constructors are called.','line_number':1166,'multiline':False]['text':'!','line_number':1167,'multiline':False]['text':'! <b>Throws</b>: Nothing','line_number':1168,'multiline':False]['text':'!','line_number':1169,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1170,'multiline':False]['text':'!','line_number':1171,'multiline':False]['text':'! <b>Note</b>: Iterators of values obtained from list x now point to elements of this','line_number':1172,'multiline':False]['text':'!   list. Iterators of this list and all the references are not invalidated.','line_number':1173,'multiline':False]['text':'!','line_number':1174,'multiline':False]['text':'! <b>Note</b>: Non-standard extension','line_number':1175,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements that compare equal to value.','line_number':1179,'multiline':False]['text':'!','line_number':1180,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1181,'multiline':False]['text':'!','line_number':1182,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() comparisons for equality.','line_number':1183,'multiline':False]['text':'!','line_number':1184,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1185,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1186,'multiline':False]['text':'! <b>Effects</b>: Removes all the elements for which a specified','line_number':1190,'multiline':False]['text':'!   predicate is satisfied.','line_number':1191,'multiline':False]['text':'!','line_number':1192,'multiline':False]['text':'! <b>Throws</b>: If pred throws.','line_number':1193,'multiline':False]['text':'!','line_number':1194,'multiline':False]['text':'! <b>Complexity</b>: Linear time. It performs exactly size() calls to the predicate.','line_number':1195,'multiline':False]['text':'!','line_number':1196,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1197,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1198,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1206,'multiline':False]['text':'!   elements that are equal from the list.','line_number':1207,'multiline':False]['text':'!','line_number':1208,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1209,'multiline':False]['text':'!','line_number':1210,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons equality comparisons).','line_number':1211,'multiline':False]['text':'!','line_number':1212,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1213,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1214,'multiline':False]['text':'! <b>Effects</b>: Removes adjacent duplicate elements or adjacent','line_number':1218,'multiline':False]['text':'!   elements that satisfy some binary predicate from the list.','line_number':1219,'multiline':False]['text':'!','line_number':1220,'multiline':False]['text':'! <b>Throws</b>: If pred throws.','line_number':1221,'multiline':False]['text':'!','line_number':1222,'multiline':False]['text':'! <b>Complexity</b>: Linear time (size()-1 comparisons calls to pred()).','line_number':1223,'multiline':False]['text':'!','line_number':1224,'multiline':False]['text':'! <b>Note</b>: The relative order of elements that are not removed is unchanged,','line_number':1225,'multiline':False]['text':'!   and iterators to elements that are not removed remain valid.','line_number':1226,'multiline':False]['text':'! <b>Requires</b>: The lists x and *this must be distinct.','line_number':1234,'multiline':False]['text':'!','line_number':1235,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1236,'multiline':False]['text':'!   in order into *this according to std::less<value_type>. The merge is stable;','line_number':1237,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1238,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1239,'multiline':False]['text':'!','line_number':1240,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1241,'multiline':False]['text':'!','line_number':1242,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1243,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1244,'multiline':False]['text':'! <b>Requires</b>: The lists x and *this must be distinct.','line_number':1248,'multiline':False]['text':'!','line_number':1249,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1250,'multiline':False]['text':'!   in order into *this according to std::less<value_type>. The merge is stable;','line_number':1251,'multiline':False]['text':'!   that is, if an element from *this is equivalent to one from x, then the element','line_number':1252,'multiline':False]['text':'!   from *this will precede the one from x.','line_number':1253,'multiline':False]['text':'!','line_number':1254,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1255,'multiline':False]['text':'!','line_number':1256,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1257,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1258,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1262,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1263,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1264,'multiline':False]['text':'!','line_number':1265,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1266,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1267,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1268,'multiline':False]['text':'!','line_number':1269,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1270,'multiline':False]['text':'!','line_number':1271,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1272,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1273,'multiline':False]['text':'!','line_number':1274,'multiline':False]['text':'! <b>Note</b>: Iterators and references to *this are not invalidated.','line_number':1275,'multiline':False]['text':'! <b>Requires</b>: p must be a comparison function that induces a strict weak','line_number':1284,'multiline':False]['text':'!   ordering and both *this and x must be sorted according to that ordering','line_number':1285,'multiline':False]['text':'!   The lists x and *this must be distinct.','line_number':1286,'multiline':False]['text':'!','line_number':1287,'multiline':False]['text':'! <b>Effects</b>: This function removes all of x's elements and inserts them','line_number':1288,'multiline':False]['text':'!   in order into *this. The merge is stable; that is, if an element from *this is','line_number':1289,'multiline':False]['text':'!   equivalent to one from x, then the element from *this will precede the one from x.','line_number':1290,'multiline':False]['text':'!','line_number':1291,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1292,'multiline':False]['text':'!','line_number':1293,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time: it performs at most','line_number':1294,'multiline':False]['text':'!   size() + x.size() - 1 comparisons.','line_number':1295,'multiline':False]['text':'!','line_number':1296,'multiline':False]['text':'! <b>Note</b>: Iterators and references to *this are not invalidated.','line_number':1297,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to std::less<value_type>.','line_number':1302,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':1303,'multiline':False]['text':'!','line_number':1304,'multiline':False]['text':'! <b>Throws</b>: If comparison throws.','line_number':1305,'multiline':False]['text':'!','line_number':1306,'multiline':False]['text':'! <b>Notes</b>: Iterators and references are not invalidated.','line_number':1307,'multiline':False]['text':'!','line_number':1308,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1309,'multiline':False]['text':'!   is the list's size.','line_number':1310,'multiline':False]['text':'! <b>Effects</b>: This function sorts the list *this according to std::less<value_type>.','line_number':1314,'multiline':False]['text':'!   The sort is stable, that is, the relative order of equivalent elements is preserved.','line_number':1315,'multiline':False]['text':'!','line_number':1316,'multiline':False]['text':'! <b>Throws</b>: If comp throws.','line_number':1317,'multiline':False]['text':'!','line_number':1318,'multiline':False]['text':'! <b>Notes</b>: Iterators and references are not invalidated.','line_number':1319,'multiline':False]['text':'!','line_number':1320,'multiline':False]['text':'! <b>Complexity</b>: The number of comparisons is approximately N log N, where N','line_number':1321,'multiline':False]['text':'!   is the list's size.','line_number':1322,'multiline':False]['text':' nothing if the list has length 0 or 1.','line_number':1326,'multiline':False]['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':1333,'multiline':False]['text':'!','line_number':1334,'multiline':False]['text':'! <b>Throws</b>: Nothing.','line_number':1335,'multiline':False]['text':'!','line_number':1336,'multiline':False]['text':'! <b>Complexity</b>: This function is linear time.','line_number':1337,'multiline':False]['text':'!','line_number':1338,'multiline':False]['text':'! <b>Note</b>: Iterators and references are not invalidated','line_number':1339,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1343,'multiline':False]['text':'!','line_number':1344,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1345,'multiline':False]['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1350,'multiline':False]['text':'!','line_number':1351,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1352,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1357,'multiline':False]['text':'!','line_number':1358,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1359,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1364,'multiline':False]['text':'!','line_number':1365,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1366,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1371,'multiline':False]['text':'!','line_number':1372,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1373,'multiline':False]['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1378,'multiline':False]['text':'!','line_number':1379,'multiline':False]['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1380,'multiline':False]['text':'! <b>Effects</b>: x.swap(y)','line_number':1385,'multiline':False]['text':'!','line_number':1386,'multiline':False]['text':'! <b>Complexity</b>: Constant.','line_number':1387,'multiline':False]['text':'This list is circular including end nodes','line_number':1398,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1474,'multiline':False]['text':'namespace container {','line_number':1490,'multiline':False]['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1492,'multiline':False]['text':'!specialization for optimizations','line_number':1493,'multiline':False]['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1505,'multiline':False]['text':' BOOST_CONTAINER_LIST_HPP','line_number':1511,'multiline':False]