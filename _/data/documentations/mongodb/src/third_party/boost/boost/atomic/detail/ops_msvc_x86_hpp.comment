['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2012 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]['text':'!
 * \file   atomic/detail/ops_msvc_x86.hpp
 *
 * This header contains implementation of the \c operations template.
 ','line_number':10,'multiline':True]['text':' frame pointer register 'ebx' modified by inline assembly code. See the note below.','line_number':42,'multiline':False]['text':'
 * Implementation note for asm blocks.
 *
 * http://msdn.microsoft.com/en-us/data/k1a8ss06%28v=vs.105%29
 *
 * Some SSE types require eight-byte stack alignment, forcing the compiler to emit dynamic stack-alignment code.
 * To be able to access both the local variables and the function parameters after the alignment, the compiler
 * maintains two frame pointers. If the compiler performs frame pointer omission (FPO), it will use EBP and ESP.
 * If the compiler does not perform FPO, it will use EBX and EBP. To ensure code runs correctly, do not modify EBX
 * in asm code if the function requires dynamic stack alignment as it could modify the frame pointer.
 * Either move the eight-byte aligned types out of the function, or avoid using EBX.
 *
 * Since we have no way of knowing that the compiler uses FPO, we have to always save and restore ebx
 * whenever we have to clobber it. Additionally, we disable warning C4731 above so that the compiler
 * doesn't spam about ebx use.
 ','line_number':57,'multiline':True]['text':' On x86 and x86_64 there is no need for a hardware barrier,','line_number':103,'multiline':False]['text':' even if seq_cst memory order is requested, because all','line_number':104,'multiline':False]['text':' seq_cst writes are implemented with lock-prefixed operations','line_number':105,'multiline':False]['text':' or xchg which has implied lock prefix. Therefore normal loads','line_number':106,'multiline':False]['text':' are already ordered with seq_cst stores on these architectures.','line_number':107,'multiline':False]['text':' The success and failure fences are equivalent anyway','line_number':330,'multiline':False]['text':' The success and failure fences are equivalent anyway','line_number':505,'multiline':False]['text':' Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3A, 8.1.1. Guaranteed Atomic Operations:','line_number':599,'multiline':False]['text':'','line_number':600,'multiline':False]['text':' The Pentium processor (and newer processors since) guarantees that the following additional memory operations will always be carried out atomically:','line_number':601,'multiline':False]['text':' * Reading or writing a quadword aligned on a 64-bit boundary','line_number':602,'multiline':False]['text':'','line_number':603,'multiline':False]['text':' Luckily, the memory is almost always 8-byte aligned in our case because atomic<> uses 64 bit native types for storage and dynamic memory allocations','line_number':604,'multiline':False]['text':' have at least 8 byte alignment. The only unfortunate case is when atomic is placed on the stack and it is not 8-byte aligned (like on 32 bit Windows).','line_number':605,'multiline':False]['text':' We don't care for comparison result here; the previous value will be stored into value anyway.','line_number':697,'multiline':False]['text':' Also we don't care for ebx and ecx values, they just have to be equal to eax and edx before cmpxchg8b.','line_number':698,'multiline':False]['text':' MSVC-11 in 32-bit mode sometimes generates messed up code without compiler barriers,','line_number':718,'multiline':False]['text':' even though the _InterlockedCompareExchange64 intrinsic already provides one.','line_number':719,'multiline':False]['text':' defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG16B)','line_number':884,'multiline':False]['text':' namespace detail','line_number':900,'multiline':False]['text':' namespace atomics','line_number':901,'multiline':False]['text':' namespace boost','line_number':902,'multiline':False]['text':' BOOST_ATOMIC_DETAIL_OPS_MSVC_X86_HPP_INCLUDED_','line_number':908,'multiline':False]