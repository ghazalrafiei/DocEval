['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' (C) Copyright Ion Gaztanaga 2012-2013. Distributed under the Boost','line_number':3,'multiline':False]['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]['text':'for std exception base','line_number':27,'multiline':False]['text':'for std::out_of_range, std::length_error, std::logic_error, std::runtime_error','line_number':30,'multiline':False]['text':'for implicit std::string conversion','line_number':31,'multiline':False]['text':'for std::bad_alloc','line_number':32,'multiline':False]['text':'namespace boost::container','line_number':43,'multiline':False]['text':'!BOOST_CONTAINER_USE_STD_EXCEPTIONS','line_number':45,'multiline':False]['text':'msg must be a static string (guaranteed by callers)','line_number':57,'multiline':False]['text':' namespace boost {','line_number':124,'multiline':False]['text':' namespace container {','line_number':125,'multiline':False]['text':'for std::abort','line_number':130,'multiline':False]['text':'The user must provide definitions for the following functions','line_number':137,'multiline':False]['text':'defined(BOOST_NO_EXCEPTIONS)','line_number':185,'multiline':False]['text':'! Exception callback called by Boost.Container when fails to allocate the requested storage space.','line_number':187,'multiline':False]['text':'! <ul>','line_number':188,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined','line_number':189,'multiline':False]['text':'!   <code>boost::container::bad_alloc(str)</code> is thrown.</li>','line_number':190,'multiline':False]['text':'!','line_number':191,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined','line_number':192,'multiline':False]['text':'!   <code>std::bad_alloc(str)</code> is thrown.</li>','line_number':193,'multiline':False]['text':'!','line_number':194,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS','line_number':195,'multiline':False]['text':'!   is NOT defined <code>BOOST_ASSERT(!"boost::container bad_alloc thrown")</code> is called','line_number':196,'multiline':False]['text':'!   and <code>std::abort()</code> if the former returns.</li>','line_number':197,'multiline':False]['text':'!','line_number':198,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined','line_number':199,'multiline':False]['text':'!   the user must provide an implementation and the function should not return.</li>','line_number':200,'multiline':False]['text':'! </ul>','line_number':201,'multiline':False]['text':'! Exception callback called by Boost.Container to signal arguments out of range.','line_number':207,'multiline':False]['text':'! <ul>','line_number':208,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined','line_number':209,'multiline':False]['text':'!   <code>boost::container::out_of_range(str)</code> is thrown.</li>','line_number':210,'multiline':False]['text':'!','line_number':211,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined','line_number':212,'multiline':False]['text':'!   <code>std::out_of_range(str)</code> is thrown.</li>','line_number':213,'multiline':False]['text':'!','line_number':214,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS','line_number':215,'multiline':False]['text':'!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container out_of_range thrown", str)</code> is called','line_number':216,'multiline':False]['text':'!   and <code>std::abort()</code> if the former returns.</li>','line_number':217,'multiline':False]['text':'!','line_number':218,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined','line_number':219,'multiline':False]['text':'!   the user must provide an implementation and the function should not return.</li>','line_number':220,'multiline':False]['text':'! </ul>','line_number':221,'multiline':False]['text':'! Exception callback called by Boost.Container to signal errors resizing.','line_number':227,'multiline':False]['text':'! <ul>','line_number':228,'multiline':False]['text':'!','line_number':229,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined','line_number':230,'multiline':False]['text':'!   <code>boost::container::length_error(str)</code> is thrown.</li>','line_number':231,'multiline':False]['text':'!','line_number':232,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined','line_number':233,'multiline':False]['text':'!   <code>std::length_error(str)</code> is thrown.</li>','line_number':234,'multiline':False]['text':'!','line_number':235,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS','line_number':236,'multiline':False]['text':'!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container length_error thrown", str)</code> is called','line_number':237,'multiline':False]['text':'!   and <code>std::abort()</code> if the former returns.</li>','line_number':238,'multiline':False]['text':'!','line_number':239,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined','line_number':240,'multiline':False]['text':'!   the user must provide an implementation and the function should not return.</li>','line_number':241,'multiline':False]['text':'! </ul>','line_number':242,'multiline':False]['text':'! Exception callback called by Boost.Container  to report errors in the internal logical','line_number':248,'multiline':False]['text':'! of the program, such as violation of logical preconditions or class invariants.','line_number':249,'multiline':False]['text':'! <ul>','line_number':250,'multiline':False]['text':'!','line_number':251,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined','line_number':252,'multiline':False]['text':'!   <code>boost::container::logic_error(str)</code> is thrown.</li>','line_number':253,'multiline':False]['text':'!','line_number':254,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined','line_number':255,'multiline':False]['text':'!   <code>std::logic_error(str)</code> is thrown.</li>','line_number':256,'multiline':False]['text':'!','line_number':257,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS','line_number':258,'multiline':False]['text':'!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container logic_error thrown", str)</code> is called','line_number':259,'multiline':False]['text':'!   and <code>std::abort()</code> if the former returns.</li>','line_number':260,'multiline':False]['text':'!','line_number':261,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined','line_number':262,'multiline':False]['text':'!   the user must provide an implementation and the function should not return.</li>','line_number':263,'multiline':False]['text':'! </ul>','line_number':264,'multiline':False]['text':'! Exception callback called by Boost.Container  to report errors that can only be detected during runtime.','line_number':270,'multiline':False]['text':'! <ul>','line_number':271,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined','line_number':272,'multiline':False]['text':'!   <code>boost::container::runtime_error(str)</code> is thrown.</li>','line_number':273,'multiline':False]['text':'!','line_number':274,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined','line_number':275,'multiline':False]['text':'!   <code>std::runtime_error(str)</code> is thrown.</li>','line_number':276,'multiline':False]['text':'!','line_number':277,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS','line_number':278,'multiline':False]['text':'!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container runtime_error thrown", str)</code> is called','line_number':279,'multiline':False]['text':'!   and <code>std::abort()</code> if the former returns.</li>','line_number':280,'multiline':False]['text':'!','line_number':281,'multiline':False]['text':'! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined','line_number':282,'multiline':False]['text':'!   the user must provide an implementation and the function should not return.</li>','line_number':283,'multiline':False]['text':'! </ul>','line_number':284,'multiline':False]['text':'namespace boost { namespace container {','line_number':292,'multiline':False]['text':'#ifndef BOOST_CONTAINER_THROW_EXCEPTION_HPP','line_number':296,'multiline':False]