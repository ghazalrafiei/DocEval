['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':' list.hpp','line_number':2,'multiline':False]['text':'    A simple implementation of std::list that allows incomplete','line_number':3,'multiline':False]['text':'    types, does no dynamic allocation in the default constructor,','line_number':4,'multiline':False]['text':'    and has a guarnteed O(1) splice.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'  Copyright 2009 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':14,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]['text':' list','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' throw()','line_number':107,'multiline':False]['text':' move that to temp','line_number':110,'multiline':False]['text':' move this to that','line_number':111,'multiline':False]['text':' move temp to this','line_number':112,'multiline':False]['text':' namespace boost::xpressive::detail','line_number':241,'multiline':False]