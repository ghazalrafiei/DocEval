['text':'=============================================================================
    Copyright (c) 1998-2003 Joel de Guzman
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':15,'multiline':False]['text':'assignment operator could not be generated','line_number':22,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':'  unary class.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':'      Composite class composed of a single subject. This template class','line_number':29,'multiline':False]['text':'      is parameterized by the subject type S and a base class to','line_number':30,'multiline':False]['text':'      inherit from, BaseT. The unary class is meant to be a base class','line_number':31,'multiline':False]['text':'      to inherit from. The inheritance structure, given the BaseT','line_number':32,'multiline':False]['text':'      template parameter places the unary class in the middle of a','line_number':33,'multiline':False]['text':'      linear, single parent hierarchy. For instance, given a class S','line_number':34,'multiline':False]['text':'      and a base class B, a class D can derive from unary:','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':'          struct D : public unary<S, B> {...};','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'      The inheritance structure is thus:','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'            B','line_number':41,'multiline':False]['text':'            |','line_number':42,'multiline':False]['text':'          unary (has S)','line_number':43,'multiline':False]['text':'            |','line_number':44,'multiline':False]['text':'            D','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':'      The subject can be accessed from the derived class D as:','line_number':47,'multiline':False]['text':'      this->subject();','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'      Typically, the subject S is specified as typename S::embed_t.','line_number':50,'multiline':False]['text':'      embed_t specifies how the subject is embedded in the composite','line_number':51,'multiline':False]['text':'      (See parser.hpp for details).','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':54,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'  binary class.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':'      Composite class composed of a pair (left and right). This','line_number':85,'multiline':False]['text':'      template class is parameterized by the left and right subject','line_number':86,'multiline':False]['text':'      types A and B and a base class to inherit from, BaseT. The binary','line_number':87,'multiline':False]['text':'      class is meant to be a base class to inherit from. The','line_number':88,'multiline':False]['text':'      inheritance structure, given the BaseT template parameter places','line_number':89,'multiline':False]['text':'      the binary class in the middle of a linear, single parent','line_number':90,'multiline':False]['text':'      hierarchy. For instance, given classes X and Y and a base class','line_number':91,'multiline':False]['text':'      B, a class D can derive from binary:','line_number':92,'multiline':False]['text':'','line_number':93,'multiline':False]['text':'          struct D : public binary<X, Y, B> {...};','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':'      The inheritance structure is thus:','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':'            B','line_number':98,'multiline':False]['text':'            |','line_number':99,'multiline':False]['text':'          binary (has X and Y)','line_number':100,'multiline':False]['text':'            |','line_number':101,'multiline':False]['text':'            D','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'      The left and right subjects can be accessed from the derived','line_number':104,'multiline':False]['text':'      class D as: this->left(); and this->right();','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':'      Typically, the pairs X and Y are specified as typename X::embed_t','line_number':107,'multiline':False]['text':'      and typename Y::embed_t. embed_t specifies how the subject is','line_number':108,'multiline':False]['text':'      embedded in the composite (See parser.hpp for details).','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':111,'multiline':False]['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':149,'multiline':False]