['text':' Copyright (C) 2013,2014 Vicente J. Botet Escriba','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' 2013/09 Vicente J. Botet Escriba','line_number':6,'multiline':False]['text':'    Adapt to boost from CCIA C++11 implementation','line_number':7,'multiline':False]['text':'*
   * Polymorphic adaptor of a model of Executor to an executor.
   ','line_number':23,'multiline':True]['text':'/ type-erasure to store the works to do','line_number':31,'multiline':False]['text':'/ executor is not copyable.','line_number':34,'multiline':False]['text':'*
     * executor_adaptor constructor
     ','line_number':37,'multiline':True]['text':'*
     * executor_adaptor constructor
     ','line_number':44,'multiline':True]['text':'*
     * \b Effects: close the \c executor for submissions.
     * The worker threads will work until there is no more closures to run.
     ','line_number':79,'multiline':True]['text':'*
     * \b Returns: whether the pool is closed for submissions.
     ','line_number':85,'multiline':True]['text':'*
     * \b Effects: The specified closure will be scheduled for execution at some point in the future.
     * If invoked closure throws an exception the executor will call std::terminate, as is the case with threads.
     *
     * \b Synchronization: completion of closure on a particular thread happens before destruction of thread's thread local variables.
     *
     * \b Throws: \c sync_queue_is_closed if the thread pool is closed.
     * Whatever exception that can be throw while storing the closure.
     ','line_number':90,'multiline':True]['text':'submit(work(boost::forward<Closure>(closure)));','line_number':118,'multiline':False]['text':'*
     * Effects: try to execute one task.
     * Returns: whether a task has been executed.
     * Throws: whatever the current task constructor throws or the task() throws.
     ','line_number':123,'multiline':True]