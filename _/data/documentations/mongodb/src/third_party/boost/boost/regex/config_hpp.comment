['text':'
 *
 * Copyright (c) 1998-2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the
 * Boost Software License, Version 1.0. (See accompanying file
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         config.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: regex extended config setup.
  ','line_number':12,'multiline':True]['text':'
 * Borland C++ Fix/error check
 * this has to go *before* we include any std lib headers:
 ','line_number':36,'multiline':True]['text':'************************************************************************
*
* Asserts:
*
************************************************************************','line_number':47,'multiline':True]['text':'****************************************************************************
 *
 *  Include all the headers we need here:
 *
 ***************************************************************************','line_number':61,'multiline':True]['text':'
    * C build,
    * don't include <boost/config.hpp> because that may
    * do C++ specific things in future...
    ','line_number':81,'multiline':True]['text':'***************************************************************************
*
* Legacy support:
*
******************************************************************************','line_number':94,'multiline':True]['text':'****************************************************************************
 *
 *  Boilerplate regex config options:
 *
 ***************************************************************************','line_number':108,'multiline':True]['text':' Obsolete macro, use BOOST_VERSION instead: ','line_number':114,'multiline':True]['text':' fix: ','line_number':117,'multiline':True]['text':'
* Define a macro for the namespace that details are placed in, this includes the Boost
* version number to avoid mismatched header and library versions:
','line_number':154,'multiline':True]['text':'
 * Fix for gcc prior to 3.4: std::ctype<wchar_t> doesn't allow
 * masks to be combined, for example:
 * std::use_facet<std::ctype<wchar_t> >.is(std::ctype_base::lower|std::ctype_base::upper, L'a');
 * returns *false*.
 ','line_number':160,'multiline':True]['text':'
 * If there isn't good enough wide character support then there will
 * be no wide character regular expressions:
 ','line_number':170,'multiline':True]['text':' STLPort on IRIX is misconfigured: <cwctype> does not compile
       * as a temporary fix include <wctype.h> instead and prevent inclusion
       * of STLPort version of <cwctype> ','line_number':180,'multiline':True]['text':'
 * If Win32 support has been disabled for boost in general, then
 * it is for regex in particular:
 ','line_number':194,'multiline':True]['text':' disable our own file-iterators and mapfiles if we can't
 * support them: ','line_number':202,'multiline':True]['text':' defined(_WIN32) ','line_number':208,'multiline':True]['text':' backwards compatibitity: ','line_number':214,'multiline':True]['text':' gcc on win32 has problems if you include <windows.h>
   (sporadically generates bad code). ','line_number':220,'multiline':True]['text':'****************************************************************************
 *
 *  Set up dll import/export options:
 *
 ***************************************************************************','line_number':237,'multiline':True]['text':'****************************************************************************
 *
 *  Set up function call type:
 *
 ***************************************************************************','line_number':267,'multiline':True]['text':'****************************************************************************
 *
 *  Set up localisation model:
 *
 ***************************************************************************','line_number':299,'multiline':True]['text':' backwards compatibility: ','line_number':305,'multiline':True]['text':' use C++ locale when targeting windows store ','line_number':318,'multiline':True]['text':' Win32 defaults to native Win32 locale: ','line_number':324,'multiline':True]['text':' otherwise use C++ locale if supported: ','line_number':333,'multiline':True]['text':' otherwise use C locale: ','line_number':337,'multiline':True]['text':'****************************************************************************
 *
 *  Error Handling for exception free compilers:
 *
 ***************************************************************************','line_number':347,'multiline':True]['text':'
 * If there are no exceptions then we must report critical-errors
 * the only way we know how; by terminating.
 ','line_number':354,'multiline':True]['text':'
 * With exceptions then error handling is taken care of and
 * there is no need for these checks:
 ','line_number':371,'multiline':True]['text':'****************************************************************************
 *
 *  Stack protection under MS Windows:
 *
 ***************************************************************************','line_number':379,'multiline':True]['text':'****************************************************************************
 *
 *  Algorithm selection and configuration.
 *  These options are now obsolete for C++11 and later (regex v5).
 *
 ***************************************************************************','line_number':409,'multiline':True]['text':'****************************************************************************
 *
 *  Diagnostics:
 *
 ***************************************************************************','line_number':446,'multiline':True]