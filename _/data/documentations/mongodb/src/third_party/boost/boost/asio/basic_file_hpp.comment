['text':'','line_number':1,'multiline':False]['text':' basic_file.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':44,'multiline':False]['text':' Forward declaration with defaulted arguments.','line_number':54,'multiline':False]['text':' !defined(BOOST_ASIO_BASIC_FILE_FWD_DECL)','line_number':58,'multiline':False]['text':'/ Provides file functionality.','line_number':60,'multiline':False]['text':'*
 * The basic_file class template provides functionality that is common to both
 * stream-oriented and random-access files.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':61,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':74,'multiline':False]['text':'/ Rebinds the file type to another executor.','line_number':77,'multiline':False]['text':'/ The file type when rebound to the specified executor.','line_number':81,'multiline':False]['text':'/ The native representation of a file.','line_number':85,'multiline':False]['text':'/ Construct a basic_file without opening it.','line_number':94,'multiline':False]['text':'*
   * This constructor initialises a file without opening it.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   ','line_number':95,'multiline':True]['text':'/ Construct a basic_file without opening it.','line_number':106,'multiline':False]['text':'*
   * This constructor initialises a file without opening it.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   ','line_number':107,'multiline':True]['text':'/ Construct and open a basic_file.','line_number':124,'multiline':False]['text':'*
   * This constructor initialises a file and opens it.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   ','line_number':125,'multiline':True]['text':'/ Construct a basic_file without opening it.','line_number':145,'multiline':False]['text':'*
   * This constructor initialises a file and opens it.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   ','line_number':146,'multiline':True]['text':'/ Construct and open a basic_file.','line_number':172,'multiline':False]['text':'*
   * This constructor initialises a file and opens it.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   ','line_number':173,'multiline':True]['text':'/ Construct a basic_file without opening it.','line_number':194,'multiline':False]['text':'*
   * This constructor initialises a file and opens it.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   ','line_number':195,'multiline':True]['text':'/ Construct a basic_file on an existing native file handle.','line_number':222,'multiline':False]['text':'*
   * This constructor initialises a file object to hold an existing native file.
   *
   * @param ex The I/O executor that the file will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the file.
   *
   * @param native_file A native file handle.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':223,'multiline':True]['text':'/ Construct a basic_file on an existing native file.','line_number':242,'multiline':False]['text':'*
   * This constructor initialises a file object to hold an existing native file.
   *
   * @param context An execution context which provides the I/O executor that
   * the file will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the file.
   *
   * @param native_file A native file.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':243,'multiline':True]['text':'/ Move-construct a basic_file from another.','line_number':269,'multiline':False]['text':'*
   * This constructor moves a file from one object to another.
   *
   * @param other The other basic_file object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_file(const executor_type&) constructor.
   ','line_number':270,'multiline':True]['text':'/ Move-assign a basic_file from another.','line_number':284,'multiline':False]['text':'*
   * This assignment operator moves a file from one object to another.
   *
   * @param other The other basic_file object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_file(const executor_type&) constructor.
   ','line_number':285,'multiline':True]['text':' All files have access to each other's implementations.','line_number':300,'multiline':False]['text':'/ Move-construct a basic_file from a file of another executor type.','line_number':304,'multiline':False]['text':'*
   * This constructor moves a file from one object to another.
   *
   * @param other The other basic_file object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_file(const executor_type&) constructor.
   ','line_number':305,'multiline':True]['text':'/ Move-assign a basic_file from a file of another executor type.','line_number':324,'multiline':False]['text':'*
   * This assignment operator moves a file from one object to another.
   *
   * @param other The other basic_file object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_file(const executor_type&) constructor.
   ','line_number':325,'multiline':True]['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':344,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':346,'multiline':False]['text':'/ Open the file using the specified path.','line_number':352,'multiline':False]['text':'*
   * This function opens the file so that it will use the specified path.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @par Example
   * @code
   * boost::asio::stream_file file(my_context);
   * file.open("/path/to/my/file", boost::asio::stream_file::read_only);
   * @endcode
   ','line_number':353,'multiline':True]['text':'/ Open the file using the specified path.','line_number':376,'multiline':False]['text':'*
   * This function opens the file so that it will use the specified path.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @par Example
   * @code
   * boost::asio::stream_file file(my_context);
   * boost::system::error_code ec;
   * file.open("/path/to/my/file", boost::asio::stream_file::read_only, ec);
   * if (ec)
   * {
   *   // An error occurred.
   * }
   * @endcode
   ','line_number':377,'multiline':True]['text':'/ Open the file using the specified path.','line_number':405,'multiline':False]['text':'*
   * This function opens the file so that it will use the specified path.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @par Example
   * @code
   * boost::asio::stream_file file(my_context);
   * file.open("/path/to/my/file", boost::asio::stream_file::read_only);
   * @endcode
   ','line_number':406,'multiline':True]['text':'/ Open the file using the specified path.','line_number':430,'multiline':False]['text':'*
   * This function opens the file so that it will use the specified path.
   *
   * @param path The path name identifying the file to be opened.
   *
   * @param open_flags A set of flags that determine how the file should be
   * opened.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @par Example
   * @code
   * boost::asio::stream_file file(my_context);
   * boost::system::error_code ec;
   * file.open("/path/to/my/file", boost::asio::stream_file::read_only, ec);
   * if (ec)
   * {
   *   // An error occurred.
   * }
   * @endcode
   ','line_number':431,'multiline':True]['text':'/ Assign an existing native file to the file.','line_number':460,'multiline':False]['text':'
   * This function opens the file to hold an existing native file.
   *
   * @param native_file A native file.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':461,'multiline':True]['text':'/ Assign an existing native file to the file.','line_number':476,'multiline':False]['text':'
   * This function opens the file to hold an existing native file.
   *
   * @param native_file A native file.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':477,'multiline':True]['text':'/ Determine whether the file is open.','line_number':492,'multiline':False]['text':'/ Close the file.','line_number':498,'multiline':False]['text':'*
   * This function is used to close the file. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   ','line_number':499,'multiline':True]['text':'/ Close the file.','line_number':514,'multiline':False]['text':'*
   * This function is used to close the file. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any. Note that, even if
   * the function indicates an error, the underlying descriptor is closed.
   *
   * @par Example
   * @code
   * boost::asio::stream_file file(my_context);
   * ...
   * boost::system::error_code ec;
   * file.close(ec);
   * if (ec)
   * {
   *   // An error occurred.
   * }
   * @endcode
   ','line_number':515,'multiline':True]['text':'/ Release ownership of the underlying native file.','line_number':541,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read and write
   * operations to finish immediately, and the handlers for cancelled
   * operations will be passed the boost::asio::error::operation_aborted error.
   * Ownership of the native file is then transferred to the caller.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @note This function is unsupported on Windows versions prior to Windows
   * 8.1, and will fail with boost::asio::error::operation_not_supported on
   * these platforms.
   ','line_number':542,'multiline':True]['text':'/ Release ownership of the underlying native file.','line_number':569,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read and write
   * operations to finish immediately, and the handlers for cancelled
   * operations will be passed the boost::asio::error::operation_aborted error.
   * Ownership of the native file is then transferred to the caller.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note This function is unsupported on Windows versions prior to Windows
   * 8.1, and will fail with boost::asio::error::operation_not_supported on
   * these platforms.
   ','line_number':570,'multiline':True]['text':'/ Get the native file representation.','line_number':593,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * file. This is intended to allow access to native file functionality
   * that is not otherwise provided.
   ','line_number':594,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the file.','line_number':604,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read and write
   * operations to finish immediately, and the handlers for cancelled
   * operations will be passed the boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @note Calls to cancel() will always fail with
   * boost::asio::error::operation_not_supported when run on Windows XP, Windows
   * Server 2003, and earlier versions of Windows, unless
   * BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo function has
   * two issues that should be considered before enabling its use:
   *
   * @li It will only cancel asynchronous operations that were initiated in the
   * current thread.
   *
   * @li It can appear to complete without error, but the request to cancel the
   * unfinished operations may be silently ignored by the operating system.
   * Whether it works or not seems to depend on the drivers that are installed.
   *
   * For portable cancellation, consider using the close() function to
   * simultaneously cancel the outstanding operations and close the file.
   *
   * When running on Windows Vista, Windows Server 2008, and later, the
   * CancelIoEx function is always used. This function does not have the
   * problems described above.
   ','line_number':605,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the file.','line_number':646,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read and write
   * operations to finish immediately, and the handlers for cancelled
   * operations will be passed the boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Calls to cancel() will always fail with
   * boost::asio::error::operation_not_supported when run on Windows XP, Windows
   * Server 2003, and earlier versions of Windows, unless
   * BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo function has
   * two issues that should be considered before enabling its use:
   *
   * @li It will only cancel asynchronous operations that were initiated in the
   * current thread.
   *
   * @li It can appear to complete without error, but the request to cancel the
   * unfinished operations may be silently ignored by the operating system.
   * Whether it works or not seems to depend on the drivers that are installed.
   *
   * For portable cancellation, consider using the close() function to
   * simultaneously cancel the outstanding operations and close the file.
   *
   * When running on Windows Vista, Windows Server 2008, and later, the
   * CancelIoEx function is always used. This function does not have the
   * problems described above.
   ','line_number':647,'multiline':True]['text':'/ Get the size of the file.','line_number':687,'multiline':False]['text':'*
   * This function determines the size of the file, in bytes.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':688,'multiline':True]['text':'/ Get the size of the file.','line_number':701,'multiline':False]['text':'*
   * This function determines the size of the file, in bytes.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':702,'multiline':True]['text':'/ Alter the size of the file.','line_number':712,'multiline':False]['text':'*
   * This function resizes the file to the specified size, in bytes. If the
   * current file size exceeds @c n then any extra data is discarded. If the
   * current size is less than @c n then the file is extended and filled with
   * zeroes.
   *
   * @param n The new size for the file.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':713,'multiline':True]['text':'/ Alter the size of the file.','line_number':730,'multiline':False]['text':'*
   * This function resizes the file to the specified size, in bytes. If the
   * current file size exceeds @c n then any extra data is discarded. If the
   * current size is less than @c n then the file is extended and filled with
   * zeroes.
   *
   * @param n The new size for the file.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':731,'multiline':True]['text':'/ Synchronise the file to disk.','line_number':747,'multiline':False]['text':'*
   * This function synchronises the file data and metadata to disk. Note that
   * the semantics of this synchronisation vary between operation systems.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':748,'multiline':True]['text':'/ Synchronise the file to disk.','line_number':761,'multiline':False]['text':'*
   * This function synchronises the file data and metadata to disk. Note that
   * the semantics of this synchronisation vary between operation systems.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':762,'multiline':True]['text':'/ Synchronise the file data to disk.','line_number':774,'multiline':False]['text':'*
   * This function synchronises the file data to disk. Note that the semantics
   * of this synchronisation vary between operation systems.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':775,'multiline':True]['text':'/ Synchronise the file data to disk.','line_number':788,'multiline':False]['text':'*
   * This function synchronises the file data to disk. Note that the semantics
   * of this synchronisation vary between operation systems.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':789,'multiline':True]['text':'/ Protected destructor to prevent deletion through this type.','line_number':802,'multiline':False]['text':'*
   * This function destroys the file, cancelling any outstanding asynchronous
   * operations associated with the file as if by calling @c cancel.
   ','line_number':803,'multiline':True]['text':' Disallow copying and assignment.','line_number':818,'multiline':False]['text':' namespace asio','line_number':823,'multiline':False]['text':' namespace boost','line_number':824,'multiline':False]['text':' defined(BOOST_ASIO_HAS_FILE)','line_number':828,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':829,'multiline':False]['text':' BOOST_ASIO_BASIC_FILE_HPP','line_number':831,'multiline':False]