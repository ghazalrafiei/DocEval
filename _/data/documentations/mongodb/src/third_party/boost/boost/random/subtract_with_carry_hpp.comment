['text':' boost random/subtract_with_carry.hpp header file
 *
 * Copyright Jens Maurer 2002
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2002-03-02  created
 ','line_number':1,'multiline':True]['text':' std::pow','line_number':19,'multiline':False]['text':' std::equal','line_number':21,'multiline':False]['text':' increment k until it becomes 0.','line_number':54,'multiline':False]['text':' main loop: update full blocks from k = 0 to long_lag','line_number':73,'multiline':False]['text':' Update the last partial block','line_number':83,'multiline':False]['text':'*
 * Instantiations of @c subtract_with_carry_engine model a
 * \pseudo_random_number_generator.  The algorithm is
 * described in
 *
 *  @blockquote
 *  "A New Class of Random Number Generators", George
 *  Marsaglia and Arif Zaman, Annals of Applied Probability,
 *  Volume 1, Number 3 (1991), 462-480.
 *  @endblockquote
 ','line_number':99,'multiline':True]['text':' Required by the old Boost.Random concepts','line_number':120,'multiline':False]['text':' Backwards compatibility','line_number':122,'multiline':False]['text':'*
     * Constructs a new @c subtract_with_carry_engine and seeds
     * it with the default seed.
     ','line_number':127,'multiline':True]['text':'*
     * Constructs a new @c subtract_with_carry_engine and seeds
     * it with @c value.
     ','line_number':132,'multiline':True]['text':'*
     * Constructs a new @c subtract_with_carry_engine and seeds
     * it with values produced by @c seq.generate().
     ','line_number':139,'multiline':True]['text':'*
     * Constructs a new @c subtract_with_carry_engine and seeds
     * it with values from a range.  first is updated to point
     * one past the last value consumed.  If there are not
     * enough elements in the range to fill the entire state of
     * the generator, throws @c std::invalid_argument.
     ','line_number':146,'multiline':True]['text':' compiler-generated copy ctor and assignment operator are fine','line_number':156,'multiline':False]['text':'* Seeds the generator with the default seed. ','line_number':158,'multiline':True]['text':'* Seeds the generator with values produced by @c seq.generate(). ','line_number':169,'multiline':True]['text':'*
     * Seeds the generator with values from a range.  Updates @c first to
     * point one past the last consumed value.  If the range does not
     * contain enough elements to fill the entire state of the generator,
     * throws @c std::invalid_argument.
     ','line_number':177,'multiline':True]['text':'* Returns the smallest value that the generator can produce. ','line_number':191,'multiline':True]['text':'* Returns the largest value that the generator can produce. ','line_number':194,'multiline':True]['text':'* Returns the next value of the generator. ','line_number':198,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':213,'multiline':True]['text':'* Fills a range with random values. ','line_number':219,'multiline':True]['text':'* Writes a @c subtract_with_carry_engine to a @c std::ostream. ','line_number':224,'multiline':True]['text':'* Reads a @c subtract_with_carry_engine from a @c std::istream. ','line_number':233,'multiline':True]['text':'*
     * Returns true if the two generators will produce identical
     * sequences of values.
     ','line_number':243,'multiline':True]['text':'*
     * Returns true if the two generators will produce different
     * sequences of values.
     ','line_number':255,'multiline':True]['text':'/ \cond show_private','line_number':262,'multiline':False]['text':' returns x(i-r+index), where index is in 0..r-1','line_number':263,'multiline':False]['text':' x(n) >= 0','line_number':276,'multiline':False]['text':' x(n) < 0','line_number':280,'multiline':False]['text':'/ \endcond','line_number':287,'multiline':False]['text':' state representation; next output (state) is x(i)','line_number':289,'multiline':False]['text':'   x[0]  ... x[k] x[k+1] ... x[long_lag-1]     represents','line_number':290,'multiline':False]['text':'  x(i-k) ... x(i) x(i+1) ... x(i-k+long_lag-1)','line_number':291,'multiline':False]['text':' speed: base: 20-25 nsec','line_number':292,'multiline':False]['text':' ranlux_4: 230 nsec, ranlux_7: 430 nsec, ranlux_14: 810 nsec','line_number':293,'multiline':False]['text':' This state representation makes operator== and save/restore more','line_number':294,'multiline':False]['text':' difficult, because we've already computed "too much" and thus','line_number':295,'multiline':False]['text':' have to undo some steps to get at x(i-r) etc.','line_number':296,'multiline':False]['text':' state representation: next output (state) is x(i)','line_number':298,'multiline':False]['text':'   x[0]  ... x[k] x[k+1]          ... x[long_lag-1]     represents','line_number':299,'multiline':False]['text':'  x(i-k) ... x(i) x(i-long_lag+1) ... x(i-k-1)','line_number':300,'multiline':False]['text':' speed: base 28 nsec','line_number':301,'multiline':False]['text':' ranlux_4: 370 nsec, ranlux_7: 688 nsec, ranlux_14: 1343 nsec','line_number':302,'multiline':False]['text':'  A definition is required even for integral static constants','line_number':309,'multiline':False]['text':' use a floating-point representation to produce values in [0..1)','line_number':325,'multiline':False]['text':'*
 * Instantiations of \subtract_with_carry_01_engine model a
 * \pseudo_random_number_generator.  The algorithm is
 * described in
 *
 *  @blockquote
 *  "A New Class of Random Number Generators", George
 *  Marsaglia and Arif Zaman, Annals of Applied Probability,
 *  Volume 1, Number 3 (1991), 462-480.
 *  @endblockquote
 ','line_number':326,'multiline':True]['text':'* Creates a new \subtract_with_carry_01_engine using the default seed. ','line_number':350,'multiline':True]['text':'* Creates a new subtract_with_carry_01_engine and seeds it with value. ','line_number':352,'multiline':True]['text':'*
     * Creates a new \subtract_with_carry_01_engine and seeds with values
     * produced by seq.generate().
     ','line_number':356,'multiline':True]['text':'*
     * Creates a new \subtract_with_carry_01_engine and seeds it with values
     * from a range.  Advances first to point one past the last consumed
     * value.  If the range does not contain enough elements to fill the
     * entire state, throws @c std::invalid_argument.
     ','line_number':363,'multiline':True]['text':'/ \cond show_private','line_number':373,'multiline':False]['text':' allow for Koenig lookup','line_number':377,'multiline':False]['text':'/ \endcond','line_number':382,'multiline':False]['text':' compiler-generated copy ctor and assignment operator are fine','line_number':385,'multiline':False]['text':'* Seeds the generator with the default seed. ','line_number':387,'multiline':True]['text':'* Seeds the generator with @c value. ','line_number':390,'multiline':True]['text':'* Seeds the generator with values produced by @c seq.generate(). ','line_number':400,'multiline':True]['text':'*
     * Seeds the generator with values from a range.  Updates first to
     * point one past the last consumed element.  If there are not
     * enough elements in the range to fill the entire state, throws
     * @c std::invalid_argument.
     ','line_number':409,'multiline':True]['text':'* Returns the smallest value that the generator can produce. ','line_number':423,'multiline':True]['text':'* Returns the largest value that the generator can produce. ','line_number':426,'multiline':True]['text':'* Returns the next value of the generator. ','line_number':430,'multiline':True]['text':'* Advances the state of the generator by @c z. ','line_number':445,'multiline':True]['text':'* Fills a range with random values. ','line_number':449,'multiline':True]['text':'* Writes a \subtract_with_carry_01_engine to a @c std::ostream. ','line_number':454,'multiline':True]['text':'* Reads a \subtract_with_carry_01_engine from a @c std::istream. ','line_number':466,'multiline':True]['text':'* Returns true if the two generators will produce identical sequences. ','line_number':480,'multiline':True]['text':'* Returns true if the two generators will produce different sequences. ','line_number':489,'multiline':True]['text':'/ \cond show_private','line_number':493,'multiline':False]['text':'/ \endcond','line_number':513,'multiline':False]['text':'  A definition is required even for integral static constants','line_number':521,'multiline':False]['text':'/ \cond show_deprecated','line_number':535,'multiline':False]['text':'/ \endcond','line_number':591,'multiline':False]['text':' namespace random','line_number':610,'multiline':False]['text':' namespace boost','line_number':611,'multiline':False]['text':' BOOST_RANDOM_SUBTRACT_WITH_CARRY_HPP','line_number':613,'multiline':False]