['text':'  Copyright John Maddock 2006.','line_number':1,'multiline':False]['text':'  Copyright Paul A. Bristow 2006.','line_number':2,'multiline':False]['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':' TODO deal with infinity as special better - or remove.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' http://www.itl.nist.gov/div898/handbook/eda/section3/eda3668.htm','line_number':13,'multiline':False]['text':' http://mathworld.wolfram.com/UniformDistribution.html','line_number':14,'multiline':False]['text':' http://documents.wolfram.com/calculationcenter/v2/Functions/ListsMatrices/Statistics/UniformDistribution.html','line_number':15,'multiline':False]['text':' http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29','line_number':16,'multiline':False]['text':' any finite value is OK.','line_number':35,'multiline':False]['text':' Not finite.','line_number':39,'multiline':False]['text':' bool check_uniform_lower(','line_number':45,'multiline':False]['text':' Any finite value is OK.','line_number':54,'multiline':False]['text':' Not finite.','line_number':58,'multiline':False]['text':' bool check_uniform_upper(','line_number':64,'multiline':False]['text':' Any finite value is OK','line_number':73,'multiline':False]['text':' Not finite..','line_number':77,'multiline':False]['text':' bool check_uniform_x','line_number':83,'multiline':False]['text':' If lower == upper then 1 / (upper-lower) = 1/0 = +infinity!','line_number':97,'multiline':False]['text':' upper and lower have been checked before, so must be lower >= upper.','line_number':98,'multiline':False]['text':' All OK,','line_number':105,'multiline':False]['text':' bool check_uniform(','line_number':108,'multiline':False]['text':' namespace detail','line_number':110,'multiline':False]['text':' Constructor.','line_number':119,'multiline':False]['text':' Default is standard uniform distribution.','line_number':120,'multiline':False]['text':' Accessor functions.','line_number':125,'multiline':False]['text':' Data members:','line_number':136,'multiline':False]['text':' distribution lower aka a.','line_number':137,'multiline':False]['text':' distribution upper aka b.','line_number':138,'multiline':False]['text':' class uniform_distribution','line_number':139,'multiline':False]['text':' dist ','line_number':151,'multiline':True]['text':' Range of permissible values for random variable x.','line_number':152,'multiline':False]['text':' - to + 'infinity'.','line_number':154,'multiline':False]['text':' Note RealType infinity is NOT permitted, only max_value.','line_number':155,'multiline':False]['text':' Range of supported values for random variable x.','line_number':160,'multiline':False]['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':161,'multiline':False]['text':' of checks.','line_number':171,'multiline':False]['text':' RealType pdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)','line_number':189,'multiline':False]['text':' of checks.','line_number':196,'multiline':False]['text':' lower <= x <= upper','line_number':213,'multiline':False]['text':' RealType cdf(const uniform_distribution<RealType, Policy>& dist, const RealType& x)','line_number':214,'multiline':False]['text':' of checks','line_number':221,'multiline':False]['text':' RealType quantile(const uniform_distribution<RealType, Policy>& dist, const RealType& p)','line_number':239,'multiline':False]['text':' of checks.','line_number':247,'multiline':False]['text':' RealType cdf(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)','line_number':265,'multiline':False]['text':' of checks.','line_number':273,'multiline':False]['text':' RealType quantile(const complemented2_type<uniform_distribution<RealType, Policy>, RealType>& c)','line_number':291,'multiline':False]['text':' of checks.','line_number':298,'multiline':False]['text':' RealType mean(const uniform_distribution<RealType, Policy>& dist)','line_number':304,'multiline':False]['text':' of checks.','line_number':311,'multiline':False]['text':' for standard uniform = 0.833333333333333333333333333333333333333333;','line_number':317,'multiline':False]['text':' RealType variance(const uniform_distribution<RealType, Policy>& dist)','line_number':318,'multiline':False]['text':' of checks.','line_number':325,'multiline':False]['text':' Any value [lower, upper] but arbitrarily choose lower.','line_number':330,'multiline':False]['text':' of checks.','line_number':339,'multiline':False]['text':'','line_number':344,'multiline':False]['text':' of checks.','line_number':351,'multiline':False]['text':' RealType skewness(const uniform_distribution<RealType, Policy>& dist)','line_number':357,'multiline':False]['text':' of checks.','line_number':364,'multiline':False]['text':'  -6/5 = -1.2;','line_number':369,'multiline':False]['text':' RealType kurtosis_excess(const uniform_distribution<RealType, Policy>& dist)','line_number':370,'multiline':False]['text':' namespace math','line_number':385,'multiline':False]['text':' namespace boost','line_number':386,'multiline':False]['text':' This include must be at the end, *after* the accessors','line_number':388,'multiline':False]['text':' for this distribution have been defined, in order to','line_number':389,'multiline':False]['text':' keep compilers that support two-phase lookup happy.','line_number':390,'multiline':False]['text':' BOOST_STATS_UNIFORM_HPP','line_number':393,'multiline':False]