['text':'','line_number':1,'multiline':False]['text':' execution/start.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ A customisation point that notifies an operation state object to start','line_number':31,'multiline':False]['text':'/ its associated operation.','line_number':32,'multiline':False]['text':'*
 * The name <tt>execution::start</tt> denotes a customisation point object.
 * The expression <tt>execution::start(R)</tt> for some subexpression
 * <tt>R</tt> is expression-equivalent to:
 *
 * @li <tt>R.start()</tt>, if that expression is valid.
 *
 * @li Otherwise, <tt>start(R)</tt>, if that expression is valid, with
 * overload resolution performed in a context that includes the declaration
 * <tt>void start();</tt> and that does not include a declaration of
 * <tt>execution::start</tt>.
 *
 * @li Otherwise, <tt>execution::start(R)</tt> is ill-formed.
 ','line_number':33,'multiline':True]['text':'/ A type trait that determines whether a @c start expression is','line_number':49,'multiline':False]['text':'/ well-formed.','line_number':50,'multiline':False]['text':'*
 * Class template @c can_start is a trait that is derived from
 * @c true_type if the expression <tt>execution::start(std::declval<R>(),
 * std::declval<E>())</tt> is well formed; otherwise @c false_type.
 ','line_number':51,'multiline':True]['text':' namespace execution','line_number':62,'multiline':False]['text':' namespace asio','line_number':63,'multiline':False]['text':' namespace boost','line_number':64,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':66,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':142,'multiline':False]['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':190,'multiline':False]['text':' namespace boost_asio_execution_start_fn','line_number':202,'multiline':False]['text':' namespace','line_number':211,'multiline':False]['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':226,'multiline':False]['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':241,'multiline':False]['text':' namespace execution','line_number':243,'multiline':False]['text':' namespace asio','line_number':244,'multiline':False]['text':' namespace boost','line_number':245,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':247,'multiline':False]['text':' BOOST_ASIO_EXECUTION_START_HPP','line_number':251,'multiline':False]