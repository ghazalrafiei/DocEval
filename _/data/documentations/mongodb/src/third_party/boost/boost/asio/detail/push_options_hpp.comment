['text':'','line_number':1,'multiline':False]['text':' detail/push_options.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' No header guard','line_number':11,'multiline':False]['text':' Comeau C++','line_number':15,'multiline':False]['text':' Digital Mars C++','line_number':19,'multiline':False]['text':' Intel C++','line_number':24,'multiline':False]['text':' !defined(BOOST_ASIO_DISABLE_VISIBILITY)','line_number':29,'multiline':False]['text':' (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)','line_number':30,'multiline':False]['text':' Clang','line_number':34,'multiline':False]['text':' !defined(BOOST_ASIO_DISABLE_VISIBILITY)','line_number':51,'multiline':False]['text':' !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32)','line_number':52,'multiline':False]['text':' (__clang_major__ >= 6)','line_number':58,'multiline':False]['text':' GNU C++','line_number':71,'multiline':False]['text':' !defined(BOOST_ASIO_DISABLE_VISIBILITY)','line_number':92,'multiline':False]['text':' (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)','line_number':93,'multiline':False]['text':' (__GNUC__ == 4 && __GNUC_MINOR__ >= 7) || (__GNUC__ > 4)','line_number':99,'multiline':False]['text':' (__GNUC__ >= 7)','line_number':102,'multiline':False]['text':' Kai C++','line_number':115,'multiline':False]['text':' SGI MIPSpro C++','line_number':119,'multiline':False]['text':' Compaq Tru64 Unix cxx','line_number':123,'multiline':False]['text':' Greenhills C++','line_number':127,'multiline':False]['text':' Borland C++','line_number':131,'multiline':False]['text':' !defined(__MT__)','line_number':138,'multiline':False]['text':' Metrowerks CodeWarrior','line_number':142,'multiline':False]['text':' Sun Workshop Compiler C++','line_number':146,'multiline':False]['text':' HP aCC','line_number':150,'multiline':False]['text':' MPW MrCpp or SCpp','line_number':154,'multiline':False]['text':' IBM Visual Age','line_number':158,'multiline':False]['text':' Microsoft Visual C++','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':' Must remain the last #elif since some other vendors (Metrowerks, for example)','line_number':164,'multiline':False]['text':' also #define _MSC_VER','line_number':165,'multiline':False]['text':' Visual Studio 2008 generates spurious warnings about unused parameters.','line_number':179,'multiline':False]['text':' (_MSC_VER < 1600)','line_number':181,'multiline':False]['text':' The /Wp64 option is broken. If you want to check 64 bit portability, use a','line_number':183,'multiline':False]['text':' 64 bit compiler!','line_number':184,'multiline':False]['text':' defined(_M_IX86) && defined(_Wp64)','line_number':187,'multiline':False]['text':' Note that if the /Og optimisation flag is enabled with MSVC6, the compiler','line_number':189,'multiline':False]['text':' has a tendency to incorrectly optimise away some calls to member template','line_number':190,'multiline':False]['text':' functions, even though those functions contain code that should not be','line_number':191,'multiline':False]['text':' optimised away! Therefore we will always disable this optimisation option','line_number':192,'multiline':False]['text':' for the MSVC6 compiler.','line_number':193,'multiline':False]['text':' !defined(_MT)','line_number':199,'multiline':False]