['text':' Copyright (C) 2003, 2008 Fernando Luis Cacciola Carballal.','line_number':1,'multiline':False]['text':' Copyright (C) 2015 - 2017 Andrzej Krzemienski.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Use, modification, and distribution is subject to the Boost Software','line_number':4,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' See http://www.boost.org/libs/optional for documentation.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' You are welcome to contact the author at:','line_number':10,'multiline':False]['text':'  akrzemi1@gmail.com','line_number':11,'multiline':False]['text':' AFAICT only Intel 7 correctly resolves the overload set','line_number':24,'multiline':False]['text':' that includes the in-place factory taking functions,','line_number':25,'multiline':False]['text':' so for the other icc versions, in-place factory support','line_number':26,'multiline':False]['text':' is disabled','line_number':27,'multiline':False]['text':' BCB (5.5.1) cannot parse the nested template struct in an inplace factory.','line_number':32,'multiline':False]['text':' BCB (up to 5.64) has the following bug:','line_number':38,'multiline':False]['text':'   If there is a member function/operator template of the form','line_number':39,'multiline':False]['text':'     template<class Expr> mfunc( Expr expr ) ;','line_number':40,'multiline':False]['text':'   some calls are resolved to this even if there are other better matches.','line_number':41,'multiline':False]['text':'   The effect of this bug is that calls to converting ctors and assignments','line_number':42,'multiline':False]['text':'   are incorrectly sink to this general catch-all member function template as shown above.','line_number':43,'multiline':False]['text':' GCC since 3.3 and some other compilers have may_alias attribute that helps to alleviate','line_number':48,'multiline':False]['text':' optimizer issues with regard to violation of the strict aliasing rules. The optional< T >','line_number':49,'multiline':False]['text':' storage type is marked with this attribute in order to let the compiler know that it will','line_number':50,'multiline':False]['text':' alias objects of type T and silence compilation warnings.','line_number':51,'multiline':False]['text':' on MSCV 2013 and earlier an unwanted temporary is created when you assign from','line_number':56,'multiline':False]['text':' a const lvalue of integral type. Thus we bind not to the original address but','line_number':57,'multiline':False]['text':' to a temporary. ','line_number':58,'multiline':False]['text':' On some GCC versions an unwanted temporary is created when you copy-initialize','line_number':63,'multiline':False]['text':' from a const lvalue of integral type. Thus we bind not to the original address but','line_number':64,'multiline':False]['text':' to a temporary.','line_number':65,'multiline':False]['text':' defined(__GNUC__)','line_number':83,'multiline':False]['text':' On some initial rvalue reference implementations GCC does it in a strange way,','line_number':86,'multiline':False]['text':' preferring perfect-forwarding constructor to implicit copy constructor.','line_number':87,'multiline':False]['text':' defined(__GNUC__)','line_number':97,'multiline':False]['text':' this condition is a copy paste from is_constructible.hpp','line_number':100,'multiline':False]['text':' I also disable SUNPRO, as it seems not to support type_traits correctly','line_number':101,'multiline':False]['text':' Detect suport for defaulting move operations','line_number':117,'multiline':False]['text':' (some older compilers implement rvalue references,','line_number':118,'multiline':False]['text':' defaulted funcitons but move operations are not special members and cannot be defaulted)','line_number':119,'multiline':False]['text':' header guard','line_number':135,'multiline':False]