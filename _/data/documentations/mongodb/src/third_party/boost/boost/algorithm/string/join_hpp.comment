['text':'  Boost string_algo library join.hpp header file  ---------------------------//','line_number':1,'multiline':False]['text':'  Copyright Pavol Droba 2002-2006.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]['text':'! \file
    Defines join algorithm. 

    Join algorithm is a counterpart to split algorithms.
    It joins strings from a 'list' by adding user defined separator.
    Additionally there is a version that allows simple filtering
    by providing a predicate.
','line_number':19,'multiline':True]['text':'  join --------------------------------------------------------------//','line_number':31,'multiline':False]['text':'! Join algorithm','line_number':33,'multiline':False]['text':'!
            This algorithm joins all strings in a 'list' into one long string.
            Segments are concatenated by given separator.

            \param Input A container that holds the input strings. It must be a container-of-containers.
            \param Separator A string that will separate the joined segments.
            \return Concatenated string.

            \note This function provides the strong exception-safety guarantee
        ','line_number':34,'multiline':True]['text':' Define working types','line_number':50,'multiline':False]['text':' Parse input','line_number':54,'multiline':False]['text':' Construct container to hold the result','line_number':58,'multiline':False]['text':' Append first element','line_number':61,'multiline':False]['text':' Add separator','line_number':70,'multiline':False]['text':' Add element','line_number':72,'multiline':False]['text':' join_if ----------------------------------------------------------//','line_number':79,'multiline':False]['text':'! Conditional join algorithm','line_number':81,'multiline':False]['text':'!
            This algorithm joins all strings in a 'list' into one long string.
            Segments are concatenated by given separator. Only segments that
            satisfy the predicate will be added to the result.

            \param Input A container that holds the input strings. It must be a container-of-containers.
            \param Separator A string that will separate the joined segments.
            \param Pred A segment selection predicate
            \return Concatenated string.

            \note This function provides the strong exception-safety guarantee
        ','line_number':82,'multiline':True]['text':' Define working types','line_number':101,'multiline':False]['text':' Parse input','line_number':105,'multiline':False]['text':' Construct container to hold the result','line_number':109,'multiline':False]['text':' Roll to the first element that will be added','line_number':112,'multiline':False]['text':' Add this element','line_number':114,'multiline':False]['text':' Add separator','line_number':125,'multiline':False]['text':' Add element','line_number':127,'multiline':False]['text':' namespace algorithm','line_number':135,'multiline':False]['text':' pull names to the boost namespace','line_number':137,'multiline':False]['text':' namespace boost','line_number':141,'multiline':False]['text':' BOOST_STRING_JOIN_HPP','line_number':144,'multiline':False]