['text':' Copyright (C) 2017 Andrzej Krzemienski.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Use, modification, and distribution is subject to the Boost Software','line_number':3,'multiline':False]['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' See http://www.boost.org/libs/optional for documentation.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' You are welcome to contact the author at:','line_number':9,'multiline':False]['text':'  akrzemi1@gmail.com','line_number':10,'multiline':False]['text':' trivilally-copyable version of the storage','line_number':12,'multiline':False]['text':' tc_optional_base ( tc_optional_base const& ) = default;','line_number':52,'multiline':False]['text':' This is used for both converting and in-place constructions.','line_number':66,'multiline':False]['text':' Derived classes use the 'tag' to select the appropriate','line_number':67,'multiline':False]['text':' implementation (the correct 'construct()' overload)','line_number':68,'multiline':False]['text':' tc_optional_base& operator= ( tc_optional_base const& ) = default;','line_number':79,'multiline':False]['text':' ~tc_optional_base() = default;','line_number':80,'multiline':False]['text':' Assigns from another optional<T> (deep-copies the rhs value)','line_number':82,'multiline':False]['text':' Assigns from another _convertible_ optional<U> (deep-copies the rhs value)','line_number':88,'multiline':False]['text':' move-assigns from another _convertible_ optional<U> (deep-moves from the rhs value)','line_number':103,'multiline':False]['text':' Destroys the current value, if any, leaving this UNINITIALIZED','line_number':141,'multiline':False]['text':' No-throw (assuming T::~T() doesn't)','line_number':142,'multiline':False]['text':' **DEPPRECATED** Replaces the current value -if any- with 'val'','line_number':145,'multiline':False]['text':' Returns a pointer to the value if this is initialized, otherwise,','line_number':148,'multiline':False]['text':' returns NULL.','line_number':149,'multiline':False]['text':' No-throw','line_number':150,'multiline':False]['text':' Constructs in-place','line_number':166,'multiline':False]['text':' upon exception *this is always uninitialized','line_number':167,'multiline':False]['text':' Constructs in-place using the given factory','line_number':337,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':345,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':360,'multiline':False]['text':' Constructs in-place using the given factory','line_number':369,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':377,'multiline':False]['text':' Constructs in-place using the given typed factory','line_number':392,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':404,'multiline':False]['text':' of a one-argument T constructor.','line_number':405,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':406,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':407,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':415,'multiline':False]['text':' of a T's assignment operator.','line_number':416,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':417,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':418,'multiline':False]['text':' Constructs using any expression implicitly convertible to the single argument','line_number':425,'multiline':False]['text':' of a one-argument T constructor.','line_number':426,'multiline':False]['text':' Converting constructions of optional<T> from optional<U> uses this function with','line_number':427,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting constructor of T from U.','line_number':428,'multiline':False]['text':' Assigns using a form any expression implicitly convertible to the single argument','line_number':436,'multiline':False]['text':' of a T's assignment operator.','line_number':437,'multiline':False]['text':' Converting assignments of optional<T> from optional<U> uses this function with','line_number':438,'multiline':False]['text':' 'Expr' being of type 'U' and relying on a converting assignment of T from U.','line_number':439,'multiline':False]['text':' BCB5.64 (and probably lower versions) workaround.','line_number':449,'multiline':False]['text':'   The in-place factories are supported by means of catch-all constructors','line_number':450,'multiline':False]['text':'   and assignment operators (the functions are parameterized in terms of','line_number':451,'multiline':False]['text':'   an arbitrary 'Expr' type)','line_number':452,'multiline':False]['text':'   This compiler incorrectly resolves the overload set and sinks optional<T> and optional<U>','line_number':453,'multiline':False]['text':'   to the 'Expr'-taking functions even though explicit overloads are present for them.','line_number':454,'multiline':False]['text':'   Thus, the following overload is needed to properly handle the case when the 'lhs'','line_number':455,'multiline':False]['text':'   is another optional.','line_number':456,'multiline':False]['text':'','line_number':457,'multiline':False]['text':' For VC<=70 compilers this workaround dosen't work becasue the comnpiler issues and error','line_number':458,'multiline':False]['text':' instead of choosing the wrong overload','line_number':459,'multiline':False]['text':'','line_number':460,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not tc_optional_base<..>)','line_number':462,'multiline':False]['text':' An exception can be thrown here.','line_number':468,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':469,'multiline':False]['text':' Notice that 'Expr' will be optional<T> or optional<U> (but not tc_optional_base<..>)','line_number':475,'multiline':False]['text':' An exception can be thrown here.','line_number':481,'multiline':False]['text':' It it happens, THIS will be left uninitialized.','line_number':482,'multiline':False]['text':' defined BOOST_OPTIONAL_WEAK_OVERLOAD_RESOLUTION','line_number':488,'multiline':False]