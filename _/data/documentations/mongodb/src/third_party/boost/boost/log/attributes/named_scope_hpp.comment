['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]['text':'!
 * \file
 * \author Andrey Semashev
 * \date   24.06.2007
 *
 * The header contains implementation of named scope container and an attribute that allows to
 * put the named scope to log. A number of convenience macros are also provided.
 ','line_number':7,'multiline':True]['text':'! Double-linked list node','line_number':46,'multiline':False]['text':' namespace aux','line_number':55,'multiline':False]['text':'!
 * \brief The structure contains all information about a named scope
 *
 * The named scope entries are stored as elements of \c basic_named_scope_list container, which
 * in turn can be acquired either from the \c basic_named_scope attribute value or from a thread-local
 * instance.
 ','line_number':57,'multiline':True]['text':'! \cond','line_number':65,'multiline':False]['text':'! \endcond','line_number':67,'multiline':False]['text':'!
     * \brief Scope entry type
     *
     * Describes scope name specifics
     ','line_number':69,'multiline':True]['text':'!< The scope name contains some unstructured string that should not be interpreted by the library','line_number':76,'multiline':False]['text':'!< The scope name contains a function signature','line_number':77,'multiline':False]['text':'!
     * The scope name (e.g. a function signature)
     ','line_number':80,'multiline':True]['text':'!
     * The source file name
     ','line_number':84,'multiline':True]['text':'!
     * The line number in the source file
     ','line_number':88,'multiline':True]['text':'!
     * The scope name type
     ','line_number':92,'multiline':True]['text':'!
     * Initializing constructor
     *
     * \post <tt>scope_name == sn && file_name == fn && line == ln</tt>
     *
     * \b Throws: Nothing.
     ','line_number':97,'multiline':True]['text':'!
 * \brief The class implements the list of scopes
 *
 * The scope list provides a read-only access to a doubly-linked list of scopes.
 ','line_number':113,'multiline':True]['text':'! \cond','line_number':119,'multiline':False]['text':'! \endcond','line_number':121,'multiline':False]['text':'! Allocator type','line_number':124,'multiline':False]['text':'  Standard types','line_number':127,'multiline':False]['text':'! Iterator class','line_number':139,'multiline':False]['text':'  Standard typedefs','line_number':150,'multiline':False]['text':'  Constructors','line_number':166,'multiline':False]['text':'! Assignment','line_number':171,'multiline':False]['text':'  Comparison','line_number':179,'multiline':False]['text':'  Modification','line_number':185,'multiline':False]['text':'  Dereferencing','line_number':209,'multiline':False]['text':'! The root node of the container','line_number':224,'multiline':False]['text':'! The size of the container','line_number':226,'multiline':False]['text':'! The flag shows if the contained elements are dynamically allocated','line_number':228,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':231,'multiline':False]['text':'!
     * A constant iterator to the sequence of scopes. Complies to bidirectional iterator requirements.
     ','line_number':233,'multiline':True]['text':'!
     * An iterator to the sequence of scopes. Complies to bidirectional iterator requirements.
     ','line_number':237,'multiline':True]['text':'!
     * A constant reverse iterator to the sequence of scopes. Complies to bidirectional iterator requirements.
     ','line_number':241,'multiline':True]['text':'!
     * A reverse iterator to the sequence of scopes. Complies to bidirectional iterator requirements.
     ','line_number':245,'multiline':True]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':250,'multiline':False]['text':'!
     * Default constructor
     *
     * \post <tt>empty() == true</tt>
     ','line_number':253,'multiline':True]['text':'!
     * Copy constructor
     *
     * \post <tt>std::equal(begin(), end(), that.begin()) == true</tt>
     ','line_number':259,'multiline':True]['text':'!
     * Destructor. Destroys the stored entries.
     ','line_number':265,'multiline':True]['text':'!
     * Assignment operator
     *
     * \post <tt>std::equal(begin(), end(), that.begin()) == true</tt>
     ','line_number':270,'multiline':True]['text':'!
     * \return Constant iterator to the first element of the container.
     ','line_number':285,'multiline':True]['text':'!
     * \return Constant iterator to the after-the-last element of the container.
     ','line_number':289,'multiline':True]['text':'!
     * \return Constant iterator to the last element of the container.
     ','line_number':293,'multiline':True]['text':'!
     * \return Constant iterator to the before-the-first element of the container.
     ','line_number':297,'multiline':True]['text':'!
     * \return The number of elements in the container
     ','line_number':302,'multiline':True]['text':'!
     * \return true if the container is empty and false otherwise
     ','line_number':306,'multiline':True]['text':'!
     * Swaps two instances of the container
     ','line_number':311,'multiline':True]['text':'!
     * \return Last pushed scope entry
     ','line_number':316,'multiline':True]['text':'!
     * \return First pushed scope entry
     ','line_number':320,'multiline':True]['text':'! Stream output operator','line_number':326,'multiline':False]['text':'!
 * \brief A class of an attribute that holds stack of named scopes of the current thread
 *
 * The basic_named_scope attribute is essentially a hook to the thread-specific instance of
 * scope list. This means that the attribute will generate different values if get_value is
 * called in different threads. The attribute generates value with stored type
 * <tt>basic_named_scope_list< CharT ></tt>.
 *
 * The attribute class can also be used to gain access to the scope stack instance, e.g. to
 * get its copy or to push or pop a scope entry. However, it is highly not recommended to
 * maintain scope list manually. Use \c BOOST_LOG_NAMED_SCOPE or \c BOOST_LOG_FUNCTION macros instead.
 ','line_number':343,'multiline':True]['text':'! Scope names stack (the attribute value type)','line_number':359,'multiline':False]['text':'! Scope entry','line_number':361,'multiline':False]['text':'! Sentry object class to automatically push and pop scopes','line_number':364,'multiline':False]['text':'!
         * Constructor. Pushes the specified scope to the end of the thread-local list of scopes.
         *
         * \param sn Scope name.
         * \param fn File name, in which the scope is located.
         * \param ln Line number in the file.
         * \param t Scope name type.
         ','line_number':367,'multiline':True]['text':'!
         * Destructor. Removes the last pushed scope from the thread-local list of scopes.
         ','line_number':381,'multiline':True]['text':'! Attribute implementation class','line_number':397,'multiline':False]['text':'!
     * Constructor. Creates an attribute.
     ','line_number':401,'multiline':True]['text':'!
     * Constructor for casting support
     ','line_number':405,'multiline':True]['text':'!
     * The method pushes the scope to the back of the current thread's scope list
     *
     * \b Throws: Nothing.
     ','line_number':410,'multiline':True]['text':'!
     * The method pops the last pushed scope from the current thread's scope list
     *
     * \b Throws: Nothing.
     ','line_number':416,'multiline':True]['text':'!
     *  \return The current thread's list of scopes
     *
     *  \note The returned reference is only valid until the current thread ends. The scopes in the
     *        returned container may change if the execution scope is changed (i.e. either \c push_scope
     *        or \c pop_scope is called). User has to copy the stack if he wants to keep it intact regardless
     *        of the execution scope.
     ','line_number':423,'multiline':True]['text':' namespace attributes','line_number':434,'multiline':False]['text':' namespace log','line_number':436,'multiline':False]['text':' namespace boost','line_number':438,'multiline':False]['text':' BOOST_LOG_DOXYGEN_PASS','line_number':445,'multiline':False]['text':'!
 * Macro for scope markup. The specified scope name is pushed to the end of the current thread scope list.
 ','line_number':447,'multiline':True]['text':'!
 * Macro for function scope markup. The scope name is constructed with help of compiler and contains the current function signature.
 * The scope name is pushed to the end of the current thread scope list.
 *
 * Not all compilers have support for this macro. The exact form of the scope name may vary from one compiler to another.
 ','line_number':453,'multiline':True]['text':'!
 * Macro for function scope markup. The scope name is constructed with help of compiler and contains the current function name. It may be shorter than what \c BOOST_LOG_FUNCTION macro produces.
 * The scope name is pushed to the end of the current thread scope list.
 *
 * Not all compilers have support for this macro. The exact form of the scope name may vary from one compiler to another.
 ','line_number':462,'multiline':True]['text':' BOOST_LOG_ATTRIBUTES_NAMED_SCOPE_HPP_INCLUDED_','line_number':476,'multiline':False]