['text':'','line_number':1,'multiline':False]['text':' experimental/deferred.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Trait for detecting objects that are usable as deferred operations.','line_number':30,'multiline':False]['text':' Helper trait for getting the completion signature from an async operation.','line_number':38,'multiline':False]['text':' Helper trait for getting the completion signature of the tail in a sequence','line_number':55,'multiline':False]['text':' when invoked with the specified arguments.','line_number':56,'multiline':False]['text':' Completion handler for the head component of a deferred sequence.','line_number':73,'multiline':False]['text':'private:','line_number':94,'multiline':False]['text':' namespace detail','line_number':99,'multiline':False]['text':'/ Used to represent an empty deferred action.','line_number':101,'multiline':False]['text':'/ No effect.','line_number':104,'multiline':False]['text':'/ No effect.','line_number':111,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':116,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':124,'multiline':False]['text':'/ Tag type to disambiguate deferred constructors.','line_number':126,'multiline':False]['text':'/ Wraps a function object so that it may be used as an element in a deferred','line_number':129,'multiline':False]['text':'/ composition.','line_number':130,'multiline':False]['text':'/ Constructor. ','line_number':135,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':159,'multiline':False]['text':'private:','line_number':161,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':170,'multiline':False]['text':'/ Encapsulates deferred values.','line_number':172,'multiline':False]['text':'/ Construct a deferred asynchronous operation from the arguments to an','line_number':200,'multiline':False]['text':'/ initiation function object.','line_number':201,'multiline':False]['text':'/ Initiate the deferred operation using the supplied completion token.','line_number':209,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':227,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':235,'multiline':False]['text':'/ Encapsulates a deferred asynchronous operation.','line_number':237,'multiline':False]['text':'/ Construct a deferred asynchronous operation from the arguments to an','line_number':257,'multiline':False]['text':'/ initiation function object.','line_number':258,'multiline':False]['text':'/ Initiate the asynchronous operation using the supplied completion token.','line_number':268,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':286,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':295,'multiline':False]['text':'/ Defines a link between two consecutive operations in a sequence.','line_number':297,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':332,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':359,'multiline':False]['text':'/ Used to represent a deferred conditional branch.','line_number':361,'multiline':False]['text':'/ Construct a deferred conditional with the value to determine which branch','line_number':367,'multiline':False]['text':'/ will be executed.','line_number':368,'multiline':False]['text':'/ Invoke the conditional branch bsaed on the stored alue.','line_number':376,'multiline':False]['text':' defined(BOOST_ASIO_HAS_REF_QUALIFIED_FUNCTIONS)','line_number':399,'multiline':False]['text':'/ Set the true branch of the conditional.','line_number':401,'multiline':False]['text':'/ Set the false branch of the conditional.','line_number':419,'multiline':False]['text':' Helper constructor.','line_number':446,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':466,'multiline':False]['text':'/ Class used to specify that an asynchronous operation should return a','line_number':468,'multiline':False]['text':'/ function object to lazily launch the operation.','line_number':469,'multiline':False]['text':'*
 * The deferred_t class is used to indicate that an asynchronous operation
 * should return a function object which is itself an initiation function. A
 * deferred_t object may be passed as a completion token to an asynchronous
 * operation, typically using the special value @c boost::asio::deferred. For
 * example:
 *
 * @code auto my_deferred_op
 *   = my_socket.async_read_some(my_buffer,
 *       boost::asio::experimental::deferred); @endcode
 *
 * The initiating function (async_read_some in the above example) returns a
 * function object that will lazily initiate the operation.
 ','line_number':470,'multiline':True]['text':'/ Default constructor.','line_number':487,'multiline':False]['text':'/ Adapts an executor to add the @c deferred_t completion token as the','line_number':492,'multiline':False]['text':'/ default.','line_number':493,'multiline':False]['text':'/ Specify @c deferred_t as the default completion token type.','line_number':497,'multiline':False]['text':'/ Construct the adapted executor from the inner executor type.','line_number':500,'multiline':False]['text':'/ Type alias to adapt an I/O object to use @c deferred_t as its','line_number':515,'multiline':False]['text':'/ default completion token type.','line_number':516,'multiline':False]['text':' defined(BOOST_ASIO_HAS_ALIAS_TEMPLATES)','line_number':522,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':523,'multiline':False]['text':'/ Function helper to adapt an I/O object to use @c deferred_t as its','line_number':525,'multiline':False]['text':'/ default completion token type.','line_number':526,'multiline':False]['text':'/ Creates a new deferred from a function.','line_number':538,'multiline':False]['text':'/ Passes through anything that is already deferred.','line_number':549,'multiline':False]['text':'/ Returns a deferred operation that returns the provided values.','line_number':559,'multiline':False]['text':'/ Creates a conditional object for branching deferred operations.','line_number':568,'multiline':False]['text':'/ Pipe operator used to chain deferred operations.','line_number':575,'multiline':False]['text':'/ A @ref completion_token object used to specify that an asynchronous','line_number':588,'multiline':False]['text':'/ operation should return a function object to lazily launch the operation.','line_number':589,'multiline':False]['text':'*
 * See the documentation for boost::asio::experimental::deferred_t for a usage
 * example.
 ','line_number':590,'multiline':True]['text':' namespace experimental','line_number':600,'multiline':False]['text':' namespace asio','line_number':601,'multiline':False]['text':' namespace boost','line_number':602,'multiline':False]['text':' BOOST_ASIO_EXPERIMENTAL_DEFERRED_HPP','line_number':608,'multiline':False]