['text':'','line_number':1,'multiline':False]['text':' io_context_strand.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Provides serialised handler execution.','line_number':34,'multiline':False]['text':'*
 * The io_context::strand class provides the ability to post and dispatch
 * handlers with the guarantee that none of those handlers will execute
 * concurrently.
 *
 * @par Order of handler invocation
 * Given:
 *
 * @li a strand object @c s
 *
 * @li an object @c a meeting completion handler requirements
 *
 * @li an object @c a1 which is an arbitrary copy of @c a made by the
 * implementation
 *
 * @li an object @c b meeting completion handler requirements
 *
 * @li an object @c b1 which is an arbitrary copy of @c b made by the
 * implementation
 *
 * if any of the following conditions are true:
 *
 * @li @c s.post(a) happens-before @c s.post(b)
 * 
 * @li @c s.post(a) happens-before @c s.dispatch(b), where the latter is
 * performed outside the strand
 * 
 * @li @c s.dispatch(a) happens-before @c s.post(b), where the former is
 * performed outside the strand
 * 
 * @li @c s.dispatch(a) happens-before @c s.dispatch(b), where both are
 * performed outside the strand
 *   
 * then @c asio_handler_invoke(a1, &a1) happens-before
 * @c asio_handler_invoke(b1, &b1).
 * 
 * Note that in the following case:
 * @code async_op_1(..., s.wrap(a));
 * async_op_2(..., s.wrap(b)); @endcode
 * the completion of the first async operation will perform @c s.dispatch(a),
 * and the second will perform @c s.dispatch(b), but the order in which those
 * are performed is unspecified. That is, you cannot state whether one
 * happens-before the other. Therefore none of the above conditions are met and
 * no ordering guarantee is made.
 *
 * @note The implementation makes no guarantee that handlers posted or
 * dispatched through different @c strand objects will be invoked concurrently.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Safe.
 *
 * @par Concepts:
 * Dispatcher.
 ','line_number':35,'multiline':True]['text':'/ Constructor.','line_number':93,'multiline':False]['text':'*
   * Constructs the strand.
   *
   * @param io_context The io_context object that the strand will use to
   * dispatch handlers that are ready to be run.
   ','line_number':94,'multiline':True]['text':'/ Destructor.','line_number':107,'multiline':False]['text':'*
   * Destroys a strand.
   *
   * Handlers posted through the strand that have not yet been invoked will
   * still be dispatched in a way that meets the guarantee of non-concurrency.
   ','line_number':108,'multiline':True]['text':'/ Obtain the underlying execution context.','line_number':118,'multiline':False]['text':'/ Inform the strand that it has some outstanding work to do.','line_number':124,'multiline':False]['text':'*
   * The strand delegates this call to its underlying io_context.
   ','line_number':125,'multiline':True]['text':'/ Inform the strand that some work is no longer outstanding.','line_number':133,'multiline':False]['text':'*
   * The strand delegates this call to its underlying io_context.
   ','line_number':134,'multiline':True]['text':'/ Request the strand to invoke the given function object.','line_number':142,'multiline':False]['text':'*
   * This function is used to ask the strand to execute the given function
   * object on its underlying io_context. The function object will be executed
   * inside this function if the strand is not otherwise busy and if the
   * underlying io_context's executor's @c dispatch() function is also able to
   * execute the function before returning.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':143,'multiline':True]['text':'/ (Deprecated: Use boost::asio::dispatch().) Request the strand to invoke','line_number':166,'multiline':False]['text':'/ the given handler.','line_number':167,'multiline':False]['text':'*
   * This function is used to ask the strand to execute the given handler.
   *
   * The strand object guarantees that handlers posted or dispatched through
   * the strand will not be executed concurrently. The handler may be executed
   * inside this function if the guarantee can be met. If this function is
   * called from within a handler that was posted or dispatched through the same
   * strand, then the new handler will be executed immediately.
   *
   * The strand's guarantee is in addition to the guarantee provided by the
   * underlying io_context. The io_context guarantees that the handler will only
   * be called in a thread in which the io_context's run member function is
   * currently being invoked.
   *
   * @param handler The handler to be called. The strand will make a copy of the
   * handler object as required. The function signature of the handler must be:
   * @code void handler(); @endcode
   ','line_number':168,'multiline':True]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':193,'multiline':False]['text':'/ Request the strand to invoke the given function object.','line_number':195,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled to run by the underlying io_context.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':196,'multiline':True]['text':'/ (Deprecated: Use boost::asio::post().) Request the strand to invoke the','line_number':217,'multiline':False]['text':'/ given handler and return immediately.','line_number':218,'multiline':False]['text':'*
   * This function is used to ask the strand to execute the given handler, but
   * without allowing the strand to call the handler from inside this function.
   *
   * The strand object guarantees that handlers posted or dispatched through
   * the strand will not be executed concurrently. The strand's guarantee is in
   * addition to the guarantee provided by the underlying io_context. The
   * io_context guarantees that the handler will only be called in a thread in
   * which the io_context's run member function is currently being invoked.
   *
   * @param handler The handler to be called. The strand will make a copy of the
   * handler object as required. The function signature of the handler must be:
   * @code void handler(); @endcode
   ','line_number':219,'multiline':True]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':240,'multiline':False]['text':'/ Request the strand to invoke the given function object.','line_number':242,'multiline':False]['text':'*
   * This function is used to ask the executor to execute the given function
   * object. The function object will never be executed inside this function.
   * Instead, it will be scheduled to run by the underlying io_context.
   *
   * @param f The function object to be called. The executor will make
   * a copy of the handler object as required. The function signature of the
   * function object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':243,'multiline':True]['text':'/ (Deprecated: Use boost::asio::bind_executor().) Create a new handler that','line_number':264,'multiline':False]['text':'/ automatically dispatches the wrapped handler on the strand.','line_number':265,'multiline':False]['text':'*
   * This function is used to create a new handler function object that, when
   * invoked, will automatically pass the wrapped handler to the strand's
   * dispatch function.
   *
   * @param handler The handler to be wrapped. The strand will make a copy of
   * the handler object as required. The function signature of the handler must
   * be: @code void handler(A1 a1, ... An an); @endcode
   *
   * @return A function object that, when invoked, passes the wrapped handler to
   * the strand's dispatch function. Given a function object with the signature:
   * @code R f(A1 a1, ... An an); @endcode
   * If this function object is passed to the wrap function like so:
   * @code strand.wrap(f); @endcode
   * then the return value is a function object with the signature
   * @code void g(A1 a1, ... An an); @endcode
   * that, when invoked, executes code equivalent to:
   * @code strand.dispatch(boost::bind(f, a1, ... an)); @endcode
   ','line_number':266,'multiline':True]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':296,'multiline':False]['text':'/ Determine whether the strand is running in the current thread.','line_number':298,'multiline':False]['text':'*
   * @return @c true if the current thread is executing a handler that was
   * submitted to the strand using post(), dispatch() or wrap(). Otherwise
   * returns @c false.
   ','line_number':299,'multiline':True]['text':'/ Compare two strands for equality.','line_number':309,'multiline':False]['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':310,'multiline':True]['text':'/ Compare two strands for inequality.','line_number':319,'multiline':False]['text':'*
   * Two strands are equal if they refer to the same ordered, non-concurrent
   * state.
   ','line_number':320,'multiline':True]['text':' If you get an error on the following line it means that your','line_number':337,'multiline':False]['text':' handler does not meet the documented type requirements for a','line_number':338,'multiline':False]['text':' LegacyCompletionHandler.','line_number':339,'multiline':False]['text':' If you get an error on the following line it means that your','line_number':354,'multiline':False]['text':' handler does not meet the documented type requirements for a','line_number':355,'multiline':False]['text':' LegacyCompletionHandler.','line_number':356,'multiline':False]['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':364,'multiline':False]['text':' namespace asio','line_number':370,'multiline':False]['text':' namespace boost','line_number':371,'multiline':False]['text':' !defined(BOOST_ASIO_NO_EXTENSIONS)','line_number':375,'multiline':False]['text':'   && !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':376,'multiline':False]['text':' BOOST_ASIO_IO_CONTEXT_STRAND_HPP','line_number':378,'multiline':False]