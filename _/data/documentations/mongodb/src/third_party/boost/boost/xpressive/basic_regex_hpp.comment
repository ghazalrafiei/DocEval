['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file basic_regex.hpp','line_number':2,'multiline':False]['text':'/ Contains the definition of the basic_regex\<\> class template and its','line_number':3,'multiline':False]['text':'/ associated helper functions.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':6,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':7,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':' MS compatible compilers support #pragma once','line_number':13,'multiline':False]['text':' Doxygen can't handle proto :-(','line_number':26,'multiline':False]['text':' for _exception_code()','line_number':33,'multiline':False]['text':' for _resetstkoflw()','line_number':34,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':48,'multiline':False]['text':' basic_regex','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':'/ \brief Class template basic_regex\<\> is a class for holding a compiled regular expression.','line_number':51,'multiline':False]['text':' For compatibility with std::basic_regex','line_number':67,'multiline':False]['text':'/ \post regex_id()    == 0','line_number':82,'multiline':False]['text':'/ \post mark_count()  == 0','line_number':83,'multiline':False]['text':'/ \param that The basic_regex object to copy.','line_number':89,'multiline':False]['text':'/ \post regex_id()    == that.regex_id()','line_number':90,'multiline':False]['text':'/ \post mark_count()  == that.mark_count()','line_number':91,'multiline':False]['text':'/ \param that The basic_regex object to copy.','line_number':97,'multiline':False]['text':'/ \post regex_id()    == that.regex_id()','line_number':98,'multiline':False]['text':'/ \post mark_count()  == that.mark_count()','line_number':99,'multiline':False]['text':'/ \return *this','line_number':100,'multiline':False]['text':'/ Construct from a static regular expression.','line_number':107,'multiline':False]['text':'/','line_number':108,'multiline':False]['text':'/ \param  expr The static regular expression','line_number':109,'multiline':False]['text':'/ \pre    Expr is the type of a static regular expression.','line_number':110,'multiline':False]['text':'/ \post   regex_id()   != 0','line_number':111,'multiline':False]['text':'/ \post   mark_count() \>= 0','line_number':112,'multiline':False]['text':'/ Construct from a static regular expression.','line_number':121,'multiline':False]['text':'/','line_number':122,'multiline':False]['text':'/ \param  expr The static regular expression.','line_number':123,'multiline':False]['text':'/ \pre    Expr is the type of a static regular expression.','line_number':124,'multiline':False]['text':'/ \post   regex_id()   != 0','line_number':125,'multiline':False]['text':'/ \post   mark_count() \>= 0','line_number':126,'multiline':False]['text':'/ \throw  std::bad_alloc on out of memory','line_number':127,'multiline':False]['text':'/ \return *this','line_number':128,'multiline':False]['text':'/ Returns the count of capturing sub-expressions in this regular expression','line_number':137,'multiline':False]['text':'/','line_number':138,'multiline':False]['text':'/ Returns a token which uniquely identifies this regular expression.','line_number':144,'multiline':False]['text':'/','line_number':145,'multiline':False]['text':'/ Swaps the contents of this basic_regex object with another.','line_number':151,'multiline':False]['text':'/','line_number':152,'multiline':False]['text':'/ \param      that The other basic_regex object.','line_number':153,'multiline':False]['text':'/ \attention  This is a shallow swap that does not do reference tracking.','line_number':154,'multiline':False]['text':'/             If you embed a basic_regex object by reference in another','line_number':155,'multiline':False]['text':'/             regular expression and then swap its contents with another','line_number':156,'multiline':False]['text':'/             basic_regex object, the change will not be visible to the','line_number':157,'multiline':False]['text':'/             enclosing regular expression. It is done this way to ensure','line_number':158,'multiline':False]['text':'/             that swap() cannot throw.','line_number':159,'multiline':False]['text':'/ \throw      nothrow','line_number':160,'multiline':False]['text':' throw()','line_number':161,'multiline':False]['text':'/ Factory method for building a regex object from a range of characters.','line_number':166,'multiline':False]['text':'/ Equivalent to regex_compiler\< BidiIter \>().compile(begin, end, flags);','line_number':167,'multiline':False]['text':'/','line_number':168,'multiline':False]['text':'/ \param  begin The beginning of a range of characters representing the','line_number':169,'multiline':False]['text':'/         regular expression to compile.','line_number':170,'multiline':False]['text':'/ \param  end The end of a range of characters representing the','line_number':171,'multiline':False]['text':'/         regular expression to compile.','line_number':172,'multiline':False]['text':'/ \param  flags Optional bitmask that determines how the pat string is','line_number':173,'multiline':False]['text':'/         interpreted. (See syntax_option_type.)','line_number':174,'multiline':False]['text':'/ \return A basic_regex object corresponding to the regular expression','line_number':175,'multiline':False]['text':'/         represented by the character range.','line_number':176,'multiline':False]['text':'/ \pre    [begin,end) is a valid range.','line_number':177,'multiline':False]['text':'/ \pre    The range of characters specified by [begin,end) contains a','line_number':178,'multiline':False]['text':'/         valid string-based representation of a regular expression.','line_number':179,'multiline':False]['text':'/ \throw  regex_error when the range of characters has invalid regular','line_number':180,'multiline':False]['text':'/         expression syntax.','line_number':181,'multiline':False]['text':'/ \overload','line_number':188,'multiline':False]['text':'/','line_number':189,'multiline':False]['text':'/ \overload','line_number':196,'multiline':False]['text':'/','line_number':197,'multiline':False]['text':'/ \overload','line_number':203,'multiline':False]['text':'/','line_number':204,'multiline':False]['text':' Avoid a common programming mistake. Construction from a string is','line_number':213,'multiline':False]['text':' ambiguous. It could mean:','line_number':214,'multiline':False]['text':'   sregex rx = sregex::compile(str); // compile the string into a regex','line_number':215,'multiline':False]['text':' or','line_number':216,'multiline':False]['text':'   sregex rx = as_xpr(str);          // treat the string as a literal','line_number':217,'multiline':False]['text':' Since there is no easy way to disambiguate, it is disallowed. You must','line_number':218,'multiline':False]['text':' say what you mean.','line_number':219,'multiline':False]['text':'/ INTERNAL ONLY','line_number':221,'multiline':False]['text':'/ INTERNAL ONLY','line_number':223,'multiline':False]['text':'/ INTERNAL ONLY','line_number':226,'multiline':False]['text':' Compiles valid static regexes into a state machine.','line_number':247,'multiline':False]['text':'/ INTERNAL ONLY','line_number':248,'multiline':False]['text':' No-op for invalid static regexes.','line_number':255,'multiline':False]['text':'/ INTERNAL ONLY','line_number':256,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':275,'multiline':False]['text':' swap','line_number':276,'multiline':False]['text':'/ \brief      Swaps the contents of two basic_regex objects.','line_number':277,'multiline':False]['text':'/ \param      left The first basic_regex object.','line_number':278,'multiline':False]['text':'/ \param      right The second basic_regex object.','line_number':279,'multiline':False]['text':'/ \attention  This is a shallow swap that does not do reference tracking.','line_number':280,'multiline':False]['text':'/             If you embed a basic_regex object by reference in another','line_number':281,'multiline':False]['text':'/             regular expression and then swap its contents with another','line_number':282,'multiline':False]['text':'/             basic_regex object, the change will not be visible to the','line_number':283,'multiline':False]['text':'/             enclosing regular expression. It is done this way to ensure','line_number':284,'multiline':False]['text':'/             that swap() cannot throw.','line_number':285,'multiline':False]['text':'/ \throw      nothrow','line_number':286,'multiline':False]['text':' throw()','line_number':288,'multiline':False]['text':' namespace boost::xpressive','line_number':293,'multiline':False]['text':' BOOST_XPRESSIVE_BASIC_REGEX_HPP_EAN_10_04_2005','line_number':295,'multiline':False]