['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]['text':'/ \file repeat.hpp','line_number':2,'multiline':False]['text':'/ Contains macros to ease the generation of repetitious code constructs','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]['text':' for BOOST_PROTO_MAX_ARITY','line_number':19,'multiline':False]['text':'//////////////////////////////////////////','line_number':21,'multiline':False]['text':'/ INTERNAL ONLY','line_number':22,'multiline':False]['text':'/ \brief Generates a sequence like <tt>typename A0, typename A1, ...</tt>','line_number':26,'multiline':False]['text':'/','line_number':27,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0 const &, A1 const &, ...</tt>','line_number':31,'multiline':False]['text':'/','line_number':32,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0 &, A1 &, ...</tt>','line_number':36,'multiline':False]['text':'/','line_number':37,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0, A1, ...</tt>','line_number':41,'multiline':False]['text':'/','line_number':42,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0 const, A1 const, ...</tt>','line_number':46,'multiline':False]['text':'/','line_number':47,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0 const &a0, A1 const &a0, ...</tt>','line_number':51,'multiline':False]['text':'/','line_number':52,'multiline':False]['text':'/ \brief Generates a sequence like <tt>A0 &a0, A1 &a0, ...</tt>','line_number':56,'multiline':False]['text':'/','line_number':57,'multiline':False]['text':'/ \brief Generates a sequence like <tt>boost::ref(a0), boost::ref(a1), ...</tt>','line_number':61,'multiline':False]['text':'/','line_number':62,'multiline':False]['text':'/ \brief Generates a sequence like <tt>a0, a1, ...</tt>','line_number':66,'multiline':False]['text':'/','line_number':67,'multiline':False]['text':'//////////////////////////////////////////','line_number':71,'multiline':False]['text':'/ INTERNAL ONLY','line_number':72,'multiline':False]['text':'/ \brief Repeatedly invoke the specified macro.','line_number':76,'multiline':False]['text':'/','line_number':77,'multiline':False]['text':'/ BOOST_PROTO_REPEAT_FROM_TO_EX() is used generate the kind of repetitive code that is typical','line_number':78,'multiline':False]['text':'/ of EDSLs built with Proto. BOOST_PROTO_REPEAT_FROM_TO_EX(FROM, TO, MACRO, typename_A, A, A_a, a)  is equivalent to:','line_number':79,'multiline':False]['text':'/','line_number':80,'multiline':False]['text':'/ \code','line_number':81,'multiline':False]['text':'/ MACRO(FROM, typename_A, A, A_a, a)','line_number':82,'multiline':False]['text':'/ MACRO(FROM+1, typename_A, A, A_a, a)','line_number':83,'multiline':False]['text':'/ ...','line_number':84,'multiline':False]['text':'/ MACRO(TO-1, typename_A, A, A_a, a)','line_number':85,'multiline':False]['text':'/ \endcode','line_number':86,'multiline':False]['text':'/ \brief Repeatedly invoke the specified macro.','line_number':90,'multiline':False]['text':'/','line_number':91,'multiline':False]['text':'/ BOOST_PROTO_REPEAT_FROM_TO() is used generate the kind of repetitive code that is typical','line_number':92,'multiline':False]['text':'/ of EDSLs built with Proto. BOOST_PROTO_REPEAT_FROM_TO(FROM, TO, MACRO)  is equivalent to:','line_number':93,'multiline':False]['text':'/','line_number':94,'multiline':False]['text':'/ \code','line_number':95,'multiline':False]['text':'/ MACRO(FROM, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':96,'multiline':False]['text':'/ MACRO(FROM+1, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':97,'multiline':False]['text':'/ ...','line_number':98,'multiline':False]['text':'/ MACRO(TO-1, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':99,'multiline':False]['text':'/ \endcode','line_number':100,'multiline':False]['text':'/','line_number':101,'multiline':False]['text':'/ Example:','line_number':102,'multiline':False]['text':'/','line_number':103,'multiline':False]['text':'* \code

// Generate BOOST_PROTO_MAX_ARITY-1 overloads of the
// following construct() function template.
#define M0(N, typename_A, A_const_ref, A_const_ref_a, ref_a)      \
template<typename T, typename_A(N)>                               \
typename proto::result_of::make_expr<                             \
    proto::tag::function                                          \
  , construct_helper<T>                                           \
  , A_const_ref(N)                                                \
>::type const                                                     \
construct(A_const_ref_a(N))                                       \
{                                                                 \
    return proto::make_expr<                                      \
        proto::tag::function                                      \
    >(                                                            \
        construct_helper<T>()                                     \
      , ref_a(N)                                                  \
    );                                                            \
}
BOOST_PROTO_REPEAT_FROM_TO(1, BOOST_PROTO_MAX_ARITY, M0)
#undef M0

\endcode
*','line_number':104,'multiline':True]['text':'/ The above invocation of BOOST_PROTO_REPEAT_FROM_TO()  will generate','line_number':129,'multiline':False]['text':'/ the following code:','line_number':130,'multiline':False]['text':'/','line_number':131,'multiline':False]['text':'/ \code','line_number':132,'multiline':False]['text':'/ template<typename T, typename A0>','line_number':133,'multiline':False]['text':'/ typename proto::result_of::make_expr<','line_number':134,'multiline':False]['text':'/     proto::tag::function','line_number':135,'multiline':False]['text':'/   , construct_helper<T>','line_number':136,'multiline':False]['text':'/  , A0 const &','line_number':137,'multiline':False]['text':'/ >::type const','line_number':138,'multiline':False]['text':'/ construct(A0 const & a0)','line_number':139,'multiline':False]['text':'/ {','line_number':140,'multiline':False]['text':'/     return proto::make_expr<','line_number':141,'multiline':False]['text':'/         proto::tag::function','line_number':142,'multiline':False]['text':'/     >(','line_number':143,'multiline':False]['text':'/         construct_helper<T>()','line_number':144,'multiline':False]['text':'/       , boost::ref(a0)','line_number':145,'multiline':False]['text':'/     );','line_number':146,'multiline':False]['text':'/ }','line_number':147,'multiline':False]['text':'/','line_number':148,'multiline':False]['text':'/ template<typename T, typename A0, typename A1>','line_number':149,'multiline':False]['text':'/ typename proto::result_of::make_expr<','line_number':150,'multiline':False]['text':'/     proto::tag::function','line_number':151,'multiline':False]['text':'/   , construct_helper<T>','line_number':152,'multiline':False]['text':'/   , A0 const &','line_number':153,'multiline':False]['text':'/   , A1 const &','line_number':154,'multiline':False]['text':'/ >::type const','line_number':155,'multiline':False]['text':'/ construct(A0 const & a0, A1 const & a1)','line_number':156,'multiline':False]['text':'/ {','line_number':157,'multiline':False]['text':'/     return proto::make_expr<','line_number':158,'multiline':False]['text':'/         proto::tag::function','line_number':159,'multiline':False]['text':'/     >(','line_number':160,'multiline':False]['text':'/         construct_helper<T>()','line_number':161,'multiline':False]['text':'/       , boost::ref(a0)','line_number':162,'multiline':False]['text':'/       , boost::ref(a1)','line_number':163,'multiline':False]['text':'/     );','line_number':164,'multiline':False]['text':'/ }','line_number':165,'multiline':False]['text':'/','line_number':166,'multiline':False]['text':'/ // ... and so on, up to BOOST_PROTO_MAX_ARITY-1 arguments ...','line_number':167,'multiline':False]['text':'/ \endcode','line_number':168,'multiline':False]['text':'/ \brief Repeatedly invoke the specified macro.','line_number':172,'multiline':False]['text':'/','line_number':173,'multiline':False]['text':'/ BOOST_PROTO_REPEAT_EX() is used generate the kind of repetitive code that is typical','line_number':174,'multiline':False]['text':'/ of EDSLs built with Proto. BOOST_PROTO_REPEAT_EX(MACRO, typename_A, A, A_a, a)  is equivalent to:','line_number':175,'multiline':False]['text':'/','line_number':176,'multiline':False]['text':'/ \code','line_number':177,'multiline':False]['text':'/ MACRO(1, typename_A, A, A_a, a)','line_number':178,'multiline':False]['text':'/ MACRO(2, typename_A, A, A_a, a)','line_number':179,'multiline':False]['text':'/ ...','line_number':180,'multiline':False]['text':'/ MACRO(BOOST_PROTO_MAX_ARITY, typename_A, A, A_a, a)','line_number':181,'multiline':False]['text':'/ \endcode','line_number':182,'multiline':False]['text':'/ \brief Repeatedly invoke the specified macro.','line_number':186,'multiline':False]['text':'/','line_number':187,'multiline':False]['text':'/ BOOST_PROTO_REPEAT() is used generate the kind of repetitive code that is typical','line_number':188,'multiline':False]['text':'/ of EDSLs built with Proto. BOOST_PROTO_REPEAT(MACRO)  is equivalent to:','line_number':189,'multiline':False]['text':'/','line_number':190,'multiline':False]['text':'/ \code','line_number':191,'multiline':False]['text':'/ MACRO(1, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':192,'multiline':False]['text':'/ MACRO(2, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':193,'multiline':False]['text':'/ ...','line_number':194,'multiline':False]['text':'/ MACRO(BOOST_PROTO_MAX_ARITY, BOOST_PROTO_typename_A, BOOST_PROTO_A_const_ref, BOOST_PROTO_A_const_ref_a, BOOST_PROTO_ref_a)','line_number':195,'multiline':False]['text':'/ \endcode','line_number':196,'multiline':False]['text':'/ \brief Repeatedly invoke the specified macro.','line_number':200,'multiline':False]['text':'/','line_number':201,'multiline':False]['text':'/ BOOST_PROTO_LOCAL_ITERATE() is used generate the kind of repetitive code that is typical','line_number':202,'multiline':False]['text':'/ of EDSLs built with Proto. This macro causes the user-defined macro BOOST_PROTO_LOCAL_MACRO to','line_number':203,'multiline':False]['text':'/ be expanded with values in the range specified by BOOST_PROTO_LOCAL_LIMITS.','line_number':204,'multiline':False]['text':'/','line_number':205,'multiline':False]['text':'/ Usage:','line_number':206,'multiline':False]['text':'/','line_number':207,'multiline':False]['text':'/ \code','line_number':208,'multiline':False]['text':'/ #include BOOST_PROTO_LOCAL_ITERATE()','line_number':209,'multiline':False]['text':'/ \endcode','line_number':210,'multiline':False]['text':'/','line_number':211,'multiline':False]['text':'/ Example:','line_number':212,'multiline':False]['text':'/','line_number':213,'multiline':False]['text':'* \code

// Generate BOOST_PROTO_MAX_ARITY-1 overloads of the
// following construct() function template.
#define BOOST_PROTO_LOCAL_MACRO(N, typename_A, A_const_ref,       \
  A_const_ref_a, ref_a)                                           \
template<typename T, typename_A(N)>                               \
typename proto::result_of::make_expr<                             \
    proto::tag::function                                          \
  , construct_helper<T>                                           \
  , A_const_ref(N)                                                \
>::type const                                                     \
construct(A_const_ref_a(N))                                       \
{                                                                 \
    return proto::make_expr<                                      \
        proto::tag::function                                      \
    >(                                                            \
        construct_helper<T>()                                     \
      , ref_a(N)                                                  \
    );                                                            \
}
#define BOOST_PROTO_LOCAL_LIMITS (1, BOOST_PP_DEC(BOOST_PROTO_MAX_ARITY))
#include BOOST_PROTO_LOCAL_ITERATE()

\endcode
*','line_number':214,'multiline':True]['text':'/ The above inclusion of BOOST_PROTO_LOCAL_ITERATE() will generate','line_number':240,'multiline':False]['text':'/ the following code:','line_number':241,'multiline':False]['text':'/','line_number':242,'multiline':False]['text':'/ \code','line_number':243,'multiline':False]['text':'/ template<typename T, typename A0>','line_number':244,'multiline':False]['text':'/ typename proto::result_of::make_expr<','line_number':245,'multiline':False]['text':'/     proto::tag::function','line_number':246,'multiline':False]['text':'/   , construct_helper<T>','line_number':247,'multiline':False]['text':'/  , A0 const &','line_number':248,'multiline':False]['text':'/ >::type const','line_number':249,'multiline':False]['text':'/ construct(A0 const & a0)','line_number':250,'multiline':False]['text':'/ {','line_number':251,'multiline':False]['text':'/     return proto::make_expr<','line_number':252,'multiline':False]['text':'/         proto::tag::function','line_number':253,'multiline':False]['text':'/     >(','line_number':254,'multiline':False]['text':'/         construct_helper<T>()','line_number':255,'multiline':False]['text':'/       , boost::ref(a0)','line_number':256,'multiline':False]['text':'/     );','line_number':257,'multiline':False]['text':'/ }','line_number':258,'multiline':False]['text':'/','line_number':259,'multiline':False]['text':'/ template<typename T, typename A0, typename A1>','line_number':260,'multiline':False]['text':'/ typename proto::result_of::make_expr<','line_number':261,'multiline':False]['text':'/     proto::tag::function','line_number':262,'multiline':False]['text':'/   , construct_helper<T>','line_number':263,'multiline':False]['text':'/   , A0 const &','line_number':264,'multiline':False]['text':'/   , A1 const &','line_number':265,'multiline':False]['text':'/ >::type const','line_number':266,'multiline':False]['text':'/ construct(A0 const & a0, A1 const & a1)','line_number':267,'multiline':False]['text':'/ {','line_number':268,'multiline':False]['text':'/     return proto::make_expr<','line_number':269,'multiline':False]['text':'/         proto::tag::function','line_number':270,'multiline':False]['text':'/     >(','line_number':271,'multiline':False]['text':'/         construct_helper<T>()','line_number':272,'multiline':False]['text':'/       , boost::ref(a0)','line_number':273,'multiline':False]['text':'/       , boost::ref(a1)','line_number':274,'multiline':False]['text':'/     );','line_number':275,'multiline':False]['text':'/ }','line_number':276,'multiline':False]['text':'/','line_number':277,'multiline':False]['text':'/ // ... and so on, up to BOOST_PROTO_MAX_ARITY-1 arguments ...','line_number':278,'multiline':False]['text':'/ \endcode','line_number':279,'multiline':False]['text':'/','line_number':280,'multiline':False]['text':'/ If BOOST_PROTO_LOCAL_LIMITS is not defined by the user, it defaults','line_number':281,'multiline':False]['text':'/ to (1, BOOST_PROTO_MAX_ARITY)','line_number':282,'multiline':False]['text':'/','line_number':283,'multiline':False]['text':'/ At each iteration, BOOST_PROTO_LOCAL_MACRO is invoked with the current','line_number':284,'multiline':False]['text':'/ iteration number and the following 4 macro parameters:','line_number':285,'multiline':False]['text':'/','line_number':286,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_typename_A','line_number':287,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_A','line_number':288,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_A_a','line_number':289,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_a','line_number':290,'multiline':False]['text':'/','line_number':291,'multiline':False]['text':'/ If these macros are not defined by the user, they default respectively to:','line_number':292,'multiline':False]['text':'/','line_number':293,'multiline':False]['text':'/ \li BOOST_PROTO_typename_A','line_number':294,'multiline':False]['text':'/ \li BOOST_PROTO_A_const_ref','line_number':295,'multiline':False]['text':'/ \li BOOST_PROTO_A_const_ref_a','line_number':296,'multiline':False]['text':'/ \li BOOST_PROTO_ref_a','line_number':297,'multiline':False]['text':'/','line_number':298,'multiline':False]['text':'/ After including BOOST_PROTO_LOCAL_ITERATE(), the following macros are','line_number':299,'multiline':False]['text':'/ automatically undefined:','line_number':300,'multiline':False]['text':'/','line_number':301,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_MACRO','line_number':302,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_LIMITS','line_number':303,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_typename_A','line_number':304,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_A','line_number':305,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_A_a','line_number':306,'multiline':False]['text':'/ \li BOOST_PROTO_LOCAL_a','line_number':307,'multiline':False]