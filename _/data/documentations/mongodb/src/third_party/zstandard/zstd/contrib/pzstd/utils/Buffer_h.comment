['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 ','line_number':1,'multiline':True]['text':'*
 * A `Buffer` has a pointer to a shared buffer, and a range of the buffer that
 * it owns.
 * The idea is that you can allocate one buffer, and write chunks into it
 * and break off those chunks.
 * The underlying buffer is reference counted, and will be destroyed when all
 * `Buffer`s that reference it are destroyed.
 ','line_number':19,'multiline':True]['text':'/ Construct an empty buffer that owns no data.','line_number':36,'multiline':False]['text':'/ Construct a `Buffer` that owns a new underlying buffer of size `size`.','line_number':39,'multiline':False]['text':'*
   * Splits the data into two pieces: [begin, begin + n), [begin + n, end).
   * Their data both points into the same underlying buffer.
   * Modifies the original `Buffer` to point to only [begin + n, end).
   *
   * @param n  The offset to split at.
   * @returns  A buffer that owns the data [begin, begin + n).
   ','line_number':50,'multiline':True]['text':'/ Modifies the buffer to point to the range [begin + n, end).','line_number':64,'multiline':False]['text':'/ Modifies the buffer to point to the range [begin, end - n).','line_number':69,'multiline':False]['text':'/ Returns a read only `Range` pointing to the `Buffer`s data.','line_number':74,'multiline':False]['text':'/ Returns a mutable `Range` pointing to the `Buffer`s data.','line_number':78,'multiline':False]