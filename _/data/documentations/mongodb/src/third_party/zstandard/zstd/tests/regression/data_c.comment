['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' free() ','line_number':17,'multiline':True]['text':'*
 * Data objects
 ','line_number':28,'multiline':True]['text':'*
 * data helpers.
 ','line_number':97,'multiline':True]['text':'*
 * data buffer helper functions (documented in header).
 ','line_number':105,'multiline':True]['text':'*
 * data filenames helpers.
 ','line_number':190,'multiline':True]['text':' followLinks ','line_number':197,'multiline':True]['text':'*
 * data buffers helpers.
 ','line_number':200,'multiline':True]['text':'*
 * Frees the data buffers.
 ','line_number':236,'multiline':True]['text':'*
 * Initialization and download functions.
 ','line_number':243,'multiline':True]['text':' mkdir -p ','line_number':249,'multiline':True]['text':' Find the next directory level. ','line_number':259,'multiline':True]['text':' End the string there, make the directory, and restore the string. ','line_number':262,'multiline':True]['text':' Its okay if the directory already exists. ','line_number':268,'multiline':True]['text':'* Concatenate 3 strings into a new buffer. ','line_number':282,'multiline':True]['text':'*
 * State needed by the curl callback.
 * It takes data from curl, hashes it, and writes it to the file.
 ','line_number':303,'multiline':True]['text':'* Create the curl state. ','line_number':313,'multiline':True]['text':' Decompress the resource and store to the path. ','line_number':324,'multiline':True]['text':' Decompress and extract the resource to the cache directory. ','line_number':333,'multiline':True]['text':'* Free the curl state. ','line_number':349,'multiline':True]['text':'* curl callback. Updates the hash, and writes to the file. ','line_number':354,'multiline':True]['text':' Download the data. ','line_number':367,'multiline':True]['text':' check that the file exists. ','line_number':389,'multiline':True]['text':' Check that the hash matches. ','line_number':399,'multiline':True]['text':'* Download a single data object. ','line_number':412,'multiline':True]['text':'* Download all the data. ','line_number':426,'multiline':True]['text':'* Fill the path member variable of the data objects. ','line_number':458,'multiline':True]['text':'* Free the path member variable of the data objects. ','line_number':476,'multiline':True]['text':'* Hash the data to create the stamp. ','line_number':496,'multiline':True]['text':' We don't care about the URL that we fetch from. ','line_number':504,'multiline':True]['text':' The path is derived from the name. ','line_number':505,'multiline':True]['text':'* Check if the stamp matches the stamp in the cache directory. ','line_number':514,'multiline':True]['text':'* On success write a new stamp, on failure delete the old stamp. ','line_number':554,'multiline':True]['text':' Ignore errors. ','line_number':581,'multiline':True]['text':' This must be first to simplify logic. ','line_number':595,'multiline':True]['text':' Save the cache directory. ','line_number':600,'multiline':True]['text':' If the stamp matches then we are good to go.
     * This must be called before any modifications to the data cache.
     * After this point, we MUST call stamp_write() to update the STAMP,
     * since we've updated the data cache.
     ','line_number':609,'multiline':True]['text':' This must be last, since it must know if data_init() succeeded. ','line_number':622,'multiline':True]