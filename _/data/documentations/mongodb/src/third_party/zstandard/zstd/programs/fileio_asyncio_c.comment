['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' fprintf, open, fdopen, fread, _fileno, stdin, stdout ','line_number':12,'multiline':True]['text':' malloc, free ','line_number':13,'multiline':True]['text':' errno ','line_number':15,'multiline':True]['text':' **********************************************************************
 *  Sparse write
 ***********************************************************************','line_number':25,'multiline':True]['text':'* AIO_fwriteSparse() :
*  @return : storedSkips,
*            argument for next call to AIO_fwriteSparse() or AIO_fwriteSparseEnd() ','line_number':29,'multiline':True]['text':' Buffer is supposed malloc'ed, hence aligned on size_t ','line_number':38,'multiline':True]['text':' check every 32 KB ','line_number':42,'multiline':True]['text':' do not output anything in test mode ','line_number':44,'multiline':True]['text':' normal write ','line_number':46,'multiline':True]['text':' avoid int overflow ','line_number':54,'multiline':True]['text':' adjust last segment if < 32 KB ','line_number':64,'multiline':True]['text':' count leading zeroes ','line_number':69,'multiline':True]['text':' not all 0s ','line_number':73,'multiline':True]['text':' skip leading zeros ','line_number':75,'multiline':True]['text':' write the rest ','line_number':79,'multiline':True]['text':' size not multiple of sizeof(size_t) : implies end of block ','line_number':89,'multiline':True]['text':' not all remaining bytes are 0 ','line_number':97,'multiline':True]['text':' storedSkips>0 implies sparse support is enabled ','line_number':115,'multiline':True]['text':' assert can be disabled, in which case prefs becomes unused ','line_number':116,'multiline':True]['text':' last zero must be explicitly written,
         * so that skipped ones get implicitly translated as zero by FS ','line_number':119,'multiline':True]['text':' **********************************************************************
 *  AsyncIO functionality
 ***********************************************************************','line_number':128,'multiline':True]['text':' AIO_supported:
 * Returns 1 if AsyncIO is supported on the system, 0 otherwise. ','line_number':132,'multiline':True]['text':' ***********************************
 *  Generic IoPool implementation
 ************************************','line_number':142,'multiline':True]['text':' AIO_IOPool_createThreadPool:
 * Creates a thread pool and a mutex for threaded IO pool.
 * Displays warning if asyncio is requested but MT isn't available. ','line_number':161,'multiline':True]['text':' We want MAX_IO_JOBS-2 queue items because we need to always have 1 free buffer to
         * decompress into and 1 buffer that's actively written to disk and owned by the writing thread. ','line_number':170,'multiline':True]['text':' AIO_IOPool_init:
 * Allocates and sets and a new I/O thread pool including its included availableJobs. ','line_number':180,'multiline':True]['text':' AIO_IOPool_threadPoolActive:
 * Check if current operation uses thread pool.
 * Note that in some cases we have a thread pool initialized but choose not to use it. ','line_number':197,'multiline':True]['text':' AIO_IOPool_lockJobsMutex:
 * Locks the IO jobs mutex if threading is active ','line_number':205,'multiline':True]['text':' AIO_IOPool_unlockJobsMutex:
 * Unlocks the IO jobs mutex if threading is active ','line_number':212,'multiline':True]['text':' AIO_IOPool_releaseIoJob:
 * Releases an acquired job back to the pool. Doesn't execute the job. ','line_number':219,'multiline':True]['text':' AIO_IOPool_join:
 * Waits for all tasks in the pool to finish executing. ','line_number':229,'multiline':True]['text':' AIO_IOPool_setThreaded:
 * Allows (de)activating threaded mode, to be used when the expected overhead
 * of threading costs more than the expected gains. ','line_number':236,'multiline':True]['text':' AIO_IOPool_free:
 * Release a previously allocated IO thread pool. Makes sure all tasks are done and released. ','line_number':248,'multiline':True]['text':' Make sure we finish all tasks and then free the resources ','line_number':253,'multiline':True]['text':' Make sure we are not leaking availableJobs ','line_number':255,'multiline':True]['text':' AIO_IOPool_acquireJob:
 * Returns an available io job to be used for a future io. ','line_number':268,'multiline':True]['text':' AIO_IOPool_setFile:
 * Sets the destination file for future files in the pool.
 * Requires completion of all queued jobs and release of all otherwise acquired jobs. ','line_number':284,'multiline':True]['text':' AIO_IOPool_enqueueJob:
 * Enqueues an io job for execution.
 * The queued job shouldn't be used directly after queueing it. ','line_number':298,'multiline':True]['text':' ***********************************
 *  WritePool implementation
 ************************************','line_number':309,'multiline':True]['text':' AIO_WritePool_acquireJob:
 * Returns an available write job to be used for a future write. ','line_number':313,'multiline':True]['text':' AIO_WritePool_enqueueAndReacquireWriteJob:
 * Queues a write job for execution and acquires a new one.
 * After execution `job`'s pointed value would change to the newly acquired job.
 * Make sure to set `usedBufferSize` to the wanted length before call.
 * The queued job shouldn't be used directly after queueing it. ','line_number':319,'multiline':True]['text':' AIO_WritePool_sparseWriteEnd:
 * Ends sparse writes to the current file.
 * Blocks on completion of all current write jobs before executing. ','line_number':329,'multiline':True]['text':' AIO_WritePool_setFile:
 * Sets the destination file for future writes in the pool.
 * Requires completion of all queues write jobs and release of all otherwise acquired jobs.
 * Also requires ending of sparse write if a previous file was used in sparse mode. ','line_number':339,'multiline':True]['text':' AIO_WritePool_getFile:
 * Returns the file the writePool is currently set to write to. ','line_number':348,'multiline':True]['text':' AIO_WritePool_releaseIoJob:
 * Releases an acquired job back to the pool. Doesn't execute the job. ','line_number':354,'multiline':True]['text':' AIO_WritePool_closeFile:
 * Ends sparse write and closes the writePool's current file and sets the file to NULL.
 * Requires completion of all queues write jobs and release of all otherwise acquired jobs.  ','line_number':360,'multiline':True]['text':' AIO_WritePool_executeWriteJob:
 * Executes a write job synchronously. Can be used as a function for a thread pool. ','line_number':371,'multiline':True]['text':' AIO_WritePool_create:
 * Allocates and sets and a new write pool including its included jobs. ','line_number':380,'multiline':True]['text':' AIO_WritePool_free:
 * Frees and releases a writePool and its resources. Closes destination file if needs to. ','line_number':390,'multiline':True]['text':' Make sure we finish all tasks and then free the resources ','line_number':393,'multiline':True]['text':' AIO_WritePool_setAsync:
 * Allows (de)activating async mode, to be used when the expected overhead
 * of asyncio costs more than the expected gains. ','line_number':401,'multiline':True]['text':' ***********************************
 *  ReadPool implementation
 ************************************','line_number':409,'multiline':True]['text':' AIO_ReadPool_findNextWaitingOffsetCompletedJob_locked:
 * Looks through the completed jobs for a job matching the waitingOnOffset and returns it,
 * if job wasn't found returns NULL.
 * IMPORTANT: assumes ioJobsMutex is locked. ','line_number':432,'multiline':True]['text':' This implementation goes through all completed jobs and looks for the one matching the next offset.
     * While not strictly needed for a single threaded reader implementation (as in such a case we could expect
     * reads to be completed in order) this implementation was chosen as it better fits other asyncio
     * interfaces (such as io_uring) that do not provide promises regarding order of completion. ','line_number':439,'multiline':True]['text':' AIO_ReadPool_numReadsInFlight:
 * Returns the number of IO read jobs currently in flight. ','line_number':453,'multiline':True]['text':' AIO_ReadPool_getNextCompletedJob:
 * Returns a completed IOJob_t for the next read in line based on waitingOnOffset and advances waitingOnOffset.
 * Would block. ','line_number':460,'multiline':True]['text':' As long as we didn't find the job matching the next read, and we have some reads in flight continue waiting ','line_number':469,'multiline':True]['text':' we shouldn't be here if we work in sync mode ','line_number':471,'multiline':True]['text':' AIO_ReadPool_executeReadJob:
 * Executes a read job synchronously. Can be used as a function for a thread pool. ','line_number':486,'multiline':True]['text':' AIO_ReadPool_setFile:
 * Sets the source file for future read in the pool. Initiates reading immediately if file is not NULL.
 * Waits for all current enqueued tasks to complete if a previous file was set. ','line_number':523,'multiline':True]['text':' AIO_ReadPool_create:
 * Allocates and sets and a new readPool including its included jobs.
 * bufferSize should be set to the maximal buffer we want to read at a time, will also be used
 * as our basic read size. ','line_number':544,'multiline':True]['text':' AIO_ReadPool_free:
 * Frees and releases a readPool and its resources. Closes source file. ','line_number':566,'multiline':True]['text':' AIO_ReadPool_consumeBytes:
 * Consumes byes from srcBuffer's beginning and updates srcBufferLoaded accordingly. ','line_number':578,'multiline':True]['text':' AIO_ReadPool_releaseCurrentlyHeldAndGetNext:
 * Release the current held job and get the next one, returns NULL if no next job available. ','line_number':586,'multiline':True]['text':' AIO_ReadPool_fillBuffer:
 * Tries to fill the buffer with at least n or jobBufferSize bytes (whichever is smaller).
 * Returns if srcBuffer has at least the expected number of bytes loaded or if we've reached the end of the file.
 * Return value is the number of bytes added to the buffer.
 * Note that srcBuffer might have up to 2 times jobBufferSize bytes. ','line_number':598,'multiline':True]['text':' We are good, don't read anything ','line_number':609,'multiline':True]['text':' We still have bytes loaded, but not enough to satisfy caller. We need to get the next job
     * and coalesce the remaining bytes with the next job's buffer ','line_number':613,'multiline':True]['text':' Read the next chunk ','line_number':621,'multiline':True]['text':' AIO_ReadPool_consumeAndRefill:
 * Consumes the current buffer and refills it with bufferSize bytes. ','line_number':637,'multiline':True]['text':' AIO_ReadPool_getFile:
 * Returns the current file set for the read pool. ','line_number':644,'multiline':True]['text':' AIO_ReadPool_closeFile:
 * Closes the current set file. Waits for all current enqueued tasks to complete and resets state. ','line_number':650,'multiline':True]['text':' AIO_ReadPool_setAsync:
 * Allows (de)activating async mode, to be used when the expected overhead
 * of asyncio costs more than the expected gains. ','line_number':658,'multiline':True]