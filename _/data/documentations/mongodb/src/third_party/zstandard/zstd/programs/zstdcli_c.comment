['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':'-************************************
*  Tuning parameters
*************************************','line_number':12,'multiline':True]['text':' without using --ultra ','line_number':20,'multiline':True]['text':'-************************************
*  Dependencies
*************************************','line_number':27,'multiline':True]['text':' PLATFORM_POSIX_VERSION ','line_number':30,'multiline':True]['text':' UTIL_HAS_CREATEFILELIST, UTIL_createFileList, UTIL_isConsole ','line_number':31,'multiline':True]['text':' getenv ','line_number':32,'multiline':True]['text':' strcmp, strlen ','line_number':33,'multiline':True]['text':' fprintf(), stdin, stdout, stderr ','line_number':34,'multiline':True]['text':' errno ','line_number':35,'multiline':True]['text':' assert ','line_number':36,'multiline':True]['text':' stdinmark, stdoutmark, ZSTD_EXTENSION ','line_number':38,'multiline':True]['text':' BMK_benchFilesAdvanced ','line_number':40,'multiline':True]['text':' ZDICT_cover_params_t, DiB_trainFromFiles() ','line_number':43,'multiline':True]['text':' ZSTD_VERSION_STRING, ZSTD_minCLevel, ZSTD_maxCLevel ','line_number':48,'multiline':True]['text':'-************************************
*  Constants
*************************************','line_number':52,'multiline':True]['text':' Default for parameters where 0 is valid ','line_number':88,'multiline':True]['text':'-************************************
*  Display Macros
*************************************','line_number':100,'multiline':True]['text':' 0 : no display,  1: errors,  2 : + result + interaction + warnings,  3 : + progression,  4 : + information ','line_number':107,'multiline':True]['text':'-************************************
*  Check Version (when CLI linked to dynamic library)
*************************************','line_number':110,'multiline':True]['text':' Due to usage of experimental symbols and capabilities by the CLI,
 * the CLI must be linked against a dynamic library of same version ','line_number':114,'multiline':True]['text':'! exeNameMatch() :
    @return : a non-zero value if exeName matches test, excluding the extension
   ','line_number':128,'multiline':True]['text':'-************************************
*  Command Line
*************************************','line_number':137,'multiline':True]['text':' print help either in `stderr` or `stdout` depending on originating request
 * error (badusage) => stderr
 * help (usage_advanced) => stdout
 ','line_number':140,'multiline':True]['text':' behave like gzip ','line_number':153,'multiline':True]['text':' ZSTD_NOCOMPRESS ','line_number':217,'multiline':True]['text':' behave like gzip ','line_number':228,'multiline':True]['text':' !ZSTD_NOCOMPRESS ','line_number':268,'multiline':True]['text':' ZSTD_NODECOMPRESS ','line_number':290,'multiline':True]['text':' windows ','line_number':337,'multiline':True]['text':'! readU32FromCharChecked() :
 * @return 0 if success, and store the result in *value.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 * @return 1 if an overflow error occurs ','line_number':346,'multiline':True]['text':' overflow error ','line_number':357,'multiline':True]['text':' overflow error ','line_number':360,'multiline':True]['text':' overflow error ','line_number':365,'multiline':True]['text':' overflow error ','line_number':368,'multiline':True]['text':' skip `K` or `M` ','line_number':371,'multiline':True]['text':'! readU32FromChar() :
 * @return : unsigned integer value read from input in `char` format.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 *  Note : function will exit() program if digit sequence overflows ','line_number':379,'multiline':True]['text':'! readIntFromChar() :
 * @return : signed integer value read from input in `char` format.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 *  Note : function will exit() program if digit sequence overflows ','line_number':391,'multiline':True]['text':'! readSizeTFromCharChecked() :
 * @return 0 if success, and store the result in *value.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 * @return 1 if an overflow error occurs ','line_number':408,'multiline':True]['text':' overflow error ','line_number':419,'multiline':True]['text':' overflow error ','line_number':422,'multiline':True]['text':' overflow error ','line_number':427,'multiline':True]['text':' overflow error ','line_number':430,'multiline':True]['text':' skip `K` or `M` ','line_number':433,'multiline':True]['text':'! readSizeTFromChar() :
 * @return : size_t value read from input in `char` format.
 *  allows and interprets K, KB, KiB, M, MB and MiB suffix.
 *  Will also modify `*stringPtr`, advancing it to position where it stopped reading.
 *  Note : function will exit() program if digit sequence overflows ','line_number':441,'multiline':True]['text':'* longCommandWArg() :
 *  check if *stringPtr is the same as longCommand.
 *  If yes, @return 1 and advances *stringPtr to the position which immediately follows longCommand.
 * @return 0 and doesn't modify *stringPtr otherwise.
 ','line_number':453,'multiline':True]['text':'*
 * parseCoverParameters() :
 * reads cover parameters from *stringPtr (e.g. "--train-cover=k=48,d=8,steps=32") into *params
 * @return 1 means that cover parameters were correct
 * @return 0 in case of malformed parameters
 ','line_number':470,'multiline':True]['text':'*
 * parseFastCoverParameters() :
 * reads fastcover parameters from *stringPtr (e.g. "--train-fastcover=k=48,d=8,f=20,steps=32,accel=2") into *params
 * @return 1 means that fastcover parameters were correct
 * @return 0 in case of malformed parameters
 ','line_number':508,'multiline':True]['text':'*
 * parseLegacyParameters() :
 * reads legacy dictionary builder parameters from *stringPtr (e.g. "--train-legacy=selectivity=8") into *selectivity
 * @return 1 means that legacy dictionary builder parameters were correct
 * @return 0 in case of malformed parameters
 ','line_number':548,'multiline':True]['text':' different from default splitPoint of cover ','line_number':582,'multiline':True]['text':'* parseAdaptParameters() :
 *  reads adapt parameters from *stringPtr (e.g. "--zstd=min=1,max=19) and store them into adaptMinPtr and adaptMaxPtr.
 *  Both adaptMinPtr and adaptMaxPtr must be already allocated and correctly initialized.
 *  There is no guarantee that any of these values will be updated.
 *  @return 1 means that parsing was successful,
 *  @return 0 in case of malformed parameters
 ','line_number':591,'multiline':True]['text':' check the end of string ','line_number':606,'multiline':True]['text':'* parseCompressionParameters() :
 *  reads compression parameters from *stringPtr (e.g. "--zstd=wlog=23,clog=23,hlog=22,slog=6,mml=3,tlen=48,strat=6") into *params
 *  @return 1 means that compression parameters were correct
 *  @return 0 in case of malformed parameters
 ','line_number':615,'multiline':True]['text':' check the end of string ','line_number':641,'multiline':True]['text':' format support ','line_number':654,'multiline':True]['text':' library versions ','line_number':670,'multiline':True]['text':' posix support ','line_number':675,'multiline':True]['text':' Environment variables for parameter setting ','line_number':730,'multiline':True]['text':' takes lower precedence than directly specifying -T# in the CLI ','line_number':732,'multiline':True]['text':' pick up environment variable ','line_number':734,'multiline':True]['text':' symbols from compression library are not defined and should not be invoked ','line_number':823,'multiline':True]['text':' would be better if this value was synchronized from bench ','line_number':860,'multiline':True]['text':' lower than minimum ','line_number':869,'multiline':True]['text':' argCount >= 1 ','line_number':872,'multiline':True]['text':' argCount >= 1 ','line_number':873,'multiline':True]['text':' init ','line_number':900,'multiline':True]['text':' not used when ZSTD_NOBENCH set ','line_number':902,'multiline':True]['text':' preset behaviors ','line_number':911,'multiline':True]['text':' supports multiple formats ','line_number':914,'multiline':True]['text':' behave like zcat, also supports multiple formats ','line_number':915,'multiline':True]['text':' behave like gzip ','line_number':916,'multiline':True]['text':' gzip default is -6 ','line_number':918,'multiline':True]['text':' behave like gunzip, also supports multiple formats ','line_number':920,'multiline':True]['text':' behave like gzcat, also supports multiple formats ','line_number':921,'multiline':True]['text':' behave like lzma ','line_number':922,'multiline':True]['text':' behave like unlzma, also supports multiple formats ','line_number':923,'multiline':True]['text':' behave like xz ','line_number':924,'multiline':True]['text':' behave like unxz, also supports multiple formats ','line_number':925,'multiline':True]['text':' behave like lz4 ','line_number':926,'multiline':True]['text':' behave like unlz4, also supports multiple formats ','line_number':927,'multiline':True]['text':' init crash handler ','line_number':930,'multiline':True]['text':' command switches ','line_number':933,'multiline':True]['text':' Protection if argument empty ','line_number':936,'multiline':True]['text':' "-" means stdin/stdout ','line_number':943,'multiline':True]['text':' Decode commands (note : aggregated commands are allowed) ','line_number':949,'multiline':True]['text':' long commands (--long-word) ','line_number':953,'multiline':True]['text':' only file names allowed from now on ','line_number':954,'multiline':True]['text':' behave like gzip ','line_number':993,'multiline':True]['text':' ignore for now ','line_number':995,'multiline':True]['text':' long commands with arguments ','line_number':1016,'multiline':True]['text':' Allow optional arguments following an = ','line_number':1023,'multiline':True]['text':' Allow optional arguments following an = ','line_number':1034,'multiline':True]['text':' Allow optional arguments following an = ','line_number':1045,'multiline':True]['text':' Parse optional window log ','line_number':1095,'multiline':True]['text':' Invalid character following --long ','line_number':1100,'multiline':True]['text':' Only set windowLog if not already set by --zstd ','line_number':1106,'multiline':True]['text':' linking ZSTD_minCLevel() requires compression support ','line_number':1111,'multiline':True]['text':' Parse optional acceleration factor ','line_number':1113,'multiline':True]['text':' Invalid character following --fast ','line_number':1127,'multiline':True]['text':' default for --fast ','line_number':1131,'multiline':True]['text':' fall-through, will trigger bad_usage() later on ','line_number':1144,'multiline':True]['text':' compression Level ','line_number':1151,'multiline':True]['text':' Display help ','line_number':1160,'multiline':True]['text':' Version Only ','line_number':1161,'multiline':True]['text':' Compress ','line_number':1165,'multiline':True]['text':' Decoding ','line_number':1168,'multiline':True]['text':' benchmark decode (hidden option) ','line_number':1172,'multiline':True]['text':' Force stdout, even if stdout==console ','line_number':1176,'multiline':True]['text':' do not store filename - gzip compatibility - nothing to do ','line_number':1179,'multiline':True]['text':' Use file content as dictionary ','line_number':1182,'multiline':True]['text':' Overwrite ','line_number':1185,'multiline':True]['text':' Verbose mode ','line_number':1188,'multiline':True]['text':' Quiet mode ','line_number':1191,'multiline':True]['text':' keep source file (default) ','line_number':1194,'multiline':True]['text':' Checksum ','line_number':1197,'multiline':True]['text':' test compressed file ','line_number':1200,'multiline':True]['text':' destination file name ','line_number':1203,'multiline':True]['text':' limit memory ','line_number':1206,'multiline':True]['text':' recursive ','line_number':1213,'multiline':True]['text':' Benchmark ','line_number':1218,'multiline':True]['text':' range bench (benchmark only) ','line_number':1224,'multiline':True]['text':' compression Level ','line_number':1226,'multiline':True]['text':' Modify Nb Iterations (benchmark only) ','line_number':1231,'multiline':True]['text':' cut input into blocks (benchmark only) ','line_number':1237,'multiline':True]['text':' benchmark files separately (hidden option) ','line_number':1243,'multiline':True]['text':' ZSTD_NOBENCH ','line_number':1249,'multiline':True]['text':' nb of threads (hidden option) ','line_number':1251,'multiline':True]['text':' Dictionary Selection level ','line_number':1257,'multiline':True]['text':' Pause at the end (-p) or set an additional param (-p#) (hidden option) ','line_number':1263,'multiline':True]['text':' Select compressibility of synthetic sample ','line_number':1273,'multiline':True]['text':' unknown command ','line_number':1279,'multiline':True]['text':' if (argument[0]=='-') ','line_number':1284,'multiline':True]['text':' none of the above : add filename to list ','line_number':1286,'multiline':True]['text':' Welcome message (if verbose) ','line_number':1290,'multiline':True]['text':' automatically set # workers based on # of reported cpus ','line_number':1298,'multiline':True]['text':' all names are eliminated ','line_number':1325,'multiline':True]['text':' if (!followLinks) ','line_number':1328,'multiline':True]['text':' read names from a file ','line_number':1330,'multiline':True]['text':' saving number of input files ','line_number':1344,'multiline':True]['text':' at this stage, filenameTable is a list of paths, which can contain both files and directories ','line_number':1346,'multiline':True]['text':' Check if benchmark is selected ','line_number':1363,'multiline':True]['text':' Check if dictionary builder is selected ','line_number':1415,'multiline':True]['text':' not used when ZSTD_NODICT set ','line_number':1440,'multiline':True]['text':' test mode ','line_number':1448,'multiline':True]['text':' No input filename ==> use stdin and stdout ','line_number':1451,'multiline':True]['text':' It is possible that the input
       was a number of empty directories. In this case
       stdin and stdout should not be used ','line_number':1453,'multiline':True]['text':' when input is stdin, default output is stdout ','line_number':1464,'multiline':True]['text':' Check if input/output defined as console; trigger an error in this case ','line_number':1466,'multiline':True]['text':' check compression level limits ','line_number':1483,'multiline':True]['text':' No status message by default when output is stdout ','line_number':1508,'multiline':True]['text':' when stderr is not the console, do not pollute it with progress updates (unless requested) ','line_number':1512,'multiline':True]['text':' don't remove source files when output is stdout ','line_number':1516,'multiline':True]['text':' IO Stream/File ','line_number':1523,'multiline':True]['text':' Compare strategies constant with the ground truth ','line_number':1565,'multiline':True]['text':' these variables are only used when compression mode is enabled ','line_number':1587,'multiline':True]['text':' decompression or test ','line_number':1594,'multiline':True]