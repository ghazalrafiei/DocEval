['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':'-************************************
 *  Compiler specific
 *************************************','line_number':12,'multiline':True]['text':' Visual Studio ','line_number':15,'multiline':True]['text':' fgets ','line_number':16,'multiline':True]['text':' disable: C4127: conditional expression is constant ','line_number':17,'multiline':True]['text':' disable: C4146: minus unsigned expression ','line_number':18,'multiline':True]['text':'-************************************
 *  Includes
 *************************************','line_number':22,'multiline':True]['text':' free ','line_number':25,'multiline':True]['text':' fgets, sscanf ','line_number':26,'multiline':True]['text':' strcmp ','line_number':27,'multiline':True]['text':' time_t, time(), to randomize seed ','line_number':28,'multiline':True]['text':' assert ','line_number':29,'multiline':True]['text':' UTIL_time_t, UTIL_getTime ','line_number':30,'multiline':True]['text':' No deprecation warnings, we still test some deprecated functions ','line_number':32,'multiline':True]['text':' ZSTD_maxCLevel, ZSTD_customMem, ZSTD_getDictID_fromFrame ','line_number':33,'multiline':True]['text':' ZSTD_compressBound ','line_number':34,'multiline':True]['text':' ZSTD_error_srcSize_wrong ','line_number':35,'multiline':True]['text':' ZDICT_trainFromBuffer ','line_number':36,'multiline':True]['text':' RDG_genBuffer ','line_number':37,'multiline':True]['text':' XXH64_state_t ','line_number':38,'multiline':True]['text':' XXH64_* ','line_number':39,'multiline':True]['text':' UTIL_time_t, UTIL_clockSpanMicro, UTIL_getTime ','line_number':42,'multiline':True]['text':' zstreamSequenceProducer, EMF_testCase ','line_number':43,'multiline':True]['text':'-************************************
 *  Constants
 *************************************','line_number':45,'multiline':True]['text':'-************************************
 *  Display Macros
 *************************************','line_number':59,'multiline':True]['text':'-*******************************************************
 *  Check macros
 ********************************************************','line_number':79,'multiline':True]['text':'! FUZ_rand() :
    @return : a 27 bits random value, from a 32-bits `seed`.
    `seed` is also modified ','line_number':86,'multiline':True]['text':'======================================================
 *   Basic Unit tests
 *======================================================','line_number':131,'multiline':True]['text':' Round trips data and updates xxh with the decompressed data produced ','line_number':169,'multiline':True]['text':' Generates some data and round trips it ','line_number':206,'multiline':True]['text':' this name to conform with CHECK_Z macro display ','line_number':275,'multiline':True]['text':' Create compressible test buffer ','line_number':286,'multiline':True]['text':' Create dictionary ','line_number':295,'multiline':True]['text':' Basic compression test ','line_number':304,'multiline':True]['text':' cLevel ','line_number':306,'multiline':True]['text':' entire input should be consumed ','line_number':314,'multiline':True]['text':' error, or some data not flushed ','line_number':316,'multiline':True]['text':' generate skippable frame ','line_number':319,'multiline':True]['text':' Basic compression test using dict ','line_number':324,'multiline':True]['text':' entire input should be consumed ','line_number':337,'multiline':True]['text':' error, or some data not flushed ','line_number':339,'multiline':True]['text':' context size functions ','line_number':344,'multiline':True]['text':' uses ZSTD_initCStream_usingDict() ','line_number':348,'multiline':True]['text':' context size functions ','line_number':354,'multiline':True]['text':' Attempt bad compression parameters ','line_number':374,'multiline':True]['text':' skippable frame test ','line_number':384,'multiline':True]['text':' skippable frame output len is 0 ','line_number':397,'multiline':True]['text':' Basic decompression test ','line_number':400,'multiline':True]['text':' large limit ','line_number':404,'multiline':True]['text':' should reach end of frame == 0; otherwise, some data left, or an error ','line_number':406,'multiline':True]['text':' should regenerate the same amount ','line_number':407,'multiline':True]['text':' should have read the entire frame ','line_number':408,'multiline':True]['text':' Re-use without init ','line_number':411,'multiline':True]['text':' should reach end of frame == 0; otherwise, some data left, or an error ','line_number':415,'multiline':True]['text':' should regenerate the same amount ','line_number':416,'multiline':True]['text':' should have read the entire frame ','line_number':417,'multiline':True]['text':' check regenerated data is byte exact ','line_number':420,'multiline':True]['text':' check decompression fails early if first bytes are wrong ','line_number':428,'multiline':True]['text':' too short, not enough to start decoding header ','line_number':430,'multiline':True]['text':' should have errored out immediately (note: this does not test the exact error code) ','line_number':433,'multiline':True]['text':' context size functions ','line_number':437,'multiline':True]['text':' uses ZSTD_initDStream_usingDict() ','line_number':445,'multiline':True]['text':' Decompression by small increment ','line_number':457,'multiline':True]['text':' skippable frame ','line_number':459,'multiline':True]['text':' skippable frame ','line_number':466,'multiline':True]['text':' normal frame ','line_number':475,'multiline':True]['text':' avoid having both sizes at 0 => would trigger a no_forward_progress error ','line_number':480,'multiline':True]['text':' should regenerate the same amount ','line_number':489,'multiline':True]['text':' should have read the entire frame ','line_number':491,'multiline':True]['text':' check regenerated data is byte exact ','line_number':494,'multiline':True]['text':' Decompression forward progress ','line_number':502,'multiline':True]['text':' skippable frame ','line_number':504,'multiline':True]['text':' 1 byte missing ','line_number':514,'multiline':True]['text':' should have triggered no_forward_progress error ','line_number':522,'multiline':True]['text':' _srcSize compression test ','line_number':583,'multiline':True]['text':' wrong _srcSize compression test ','line_number':606,'multiline':True]['text':' entire input should be consumed ','line_number':619,'multiline':True]['text':' must fail : wrong srcSize ','line_number':621,'multiline':True]['text':' wrong _srcSize compression test ','line_number':624,'multiline':True]['text':' must fail : wrong srcSize ','line_number':637,'multiline':True]['text':' must fail : wrong srcSize ','line_number':652,'multiline':True]['text':' Compression state re-use scenario ','line_number':656,'multiline':True]['text':' memory allocation issue ','line_number':660,'multiline':True]['text':' use 1 ','line_number':661,'multiline':True]['text':' entire input should be consumed ','line_number':675,'multiline':True]['text':' error, or some data not flushed ','line_number':677,'multiline':True]['text':' use 2 ','line_number':679,'multiline':True]['text':' will not continue, because tables auto-adjust and are therefore different size ','line_number':680,'multiline':True]['text':' entire input should be consumed ','line_number':693,'multiline':True]['text':' error, or some data not flushed ','line_number':695,'multiline':True]['text':' Decompression single pass with empty frame ','line_number':699,'multiline':True]['text':' Decompression with ZSTD_d_stableOutBuffer ','line_number':725,'multiline':True]['text':' Compression with ZSTD_c_stable{In,Out}Buffer ','line_number':811,'multiline':True]['text':' @cctxSize2 : sizeof_CCtx when doing full streaming (no stable in/out) ','line_number':828,'multiline':True]['text':' @cctxSize1 : sizeof_CCtx when doing single-shot compression (no streaming) ','line_number':837,'multiline':True]['text':' stableSrc + streaming ','line_number':915,'multiline':True]['text':' stableSrc + streaming ','line_number':945,'multiline':True]['text':' CDict scenario ','line_number':1021,'multiline':True]['text':'byRef','line_number':1023,'multiline':True]['text':' entire input should be consumed ','line_number':1035,'multiline':True]['text':' error, or some data not flushed ','line_number':1038,'multiline':True]['text':' DDict scenario ','line_number':1057,'multiline':True]['text':' should reach end of frame == 0; otherwise, some data left, or an error ','line_number':1069,'multiline':True]['text':' should regenerate the same amount ','line_number':1070,'multiline':True]['text':' should have read the entire frame ','line_number':1071,'multiline':True]['text':' Memory restriction ','line_number':1076,'multiline':True]['text':' too small limit ','line_number':1079,'multiline':True]['text':' must fail : frame requires > 100 bytes ','line_number':1087,'multiline':True]['text':' leave zd in good shape for next tests ','line_number':1089,'multiline':True]['text':' first level with zstd_opt ','line_number':1093,'multiline':True]['text':' We should fail to decompress without a dictionary. ','line_number':1139,'multiline':True]['text':' We should succeed to decompress with the dictionary. ','line_number':1146,'multiline':True]['text':' The dictionary should persist across calls. ','line_number':1154,'multiline':True]['text':' The dictionary should not be cleared by ZSTD_reset_session_only. ','line_number':1160,'multiline':True]['text':' When we reset the context the dictionary is cleared. ','line_number':1167,'multiline':True]['text':' We should succeed to decompress with the dictionary. ','line_number':1181,'multiline':True]['text':' The dictionary should not be cleared by ZSTD_resetDStream(). ','line_number':1189,'multiline':True]['text':' The dictionary should be cleared by ZSTD_initDStream(). ','line_number':1196,'multiline':True]['text':' We should succeed to decompress with the ddict. ','line_number':1211,'multiline':True]['text':' The ddict should persist across calls. ','line_number':1219,'multiline':True]['text':' When we reset the context the ddict is cleared. ','line_number':1225,'multiline':True]['text':' We should succeed to decompress with the prefix. ','line_number':1240,'multiline':True]['text':' The prefix should be cleared after the first compression. ','line_number':1248,'multiline':True]['text':' We should succeed to decompress with the dictionary. ','line_number':1263,'multiline':True]['text':' The dictionary should persist across calls. ','line_number':1266,'multiline':True]['text':' We should succeed to decompress with the ddict. ','line_number':1268,'multiline':True]['text':' The ddict should persist across calls. ','line_number':1271,'multiline':True]['text':' When we reset the context the ddict is cleared. ','line_number':1273,'multiline':True]['text':' contentSize ','line_number':1284,'multiline':True]['text':' checksum ','line_number':1284,'multiline':True]['text':' noDictID ','line_number':1284,'multiline':True]['text':' entire input should be consumed ','line_number':1295,'multiline':True]['text':' error, or some data not flushed ','line_number':1297,'multiline':True]['text':' must fail : dictionary not used ','line_number':1311,'multiline':True]['text':' entire input should be consumed ','line_number':1324,'multiline':True]['text':' entire input should be consumed ','line_number':1337,'multiline':True]['text':' must regenerate whole input ','line_number':1338,'multiline':True]['text':' must fail : dictionary not used ','line_number':1343,'multiline':True]['text':' entire input should be consumed ','line_number':1355,'multiline':True]['text':' Empty srcSize ','line_number':1363,'multiline':True]['text':' pledgedSrcSize==0 means "empty" when params.fParams.contentSizeFlag is set ','line_number':1367,'multiline':True]['text':' cstream advanced shall write content size = 0 ','line_number':1368,'multiline':True]['text':' cstream advanced shall write content size = 0 ','line_number':1385,'multiline':True]['text':' Basic multithreading compression test ','line_number':1411,'multiline':True]['text':' compression must be completed in a single round ','line_number':1426,'multiline':True]['text':' entire input should be consumed ','line_number':1428,'multiline':True]['text':' must be a full valid frame ','line_number':1430,'multiline':True]['text':' Complex multithreading + dictionary test ','line_number':1434,'multiline':True]['text':' we want each job to have predictable size ','line_number':1437,'multiline':True]['text':' must be larger than window defined in cdict ','line_number':1439,'multiline':True]['text':' create a long repetition at long distance for job 2 ','line_number':1449,'multiline':True]['text':' intentionally lies on estimatedSrcSize, to push cdict into targeting a small window size ','line_number':1457,'multiline':True]['text':' do not keep a reference to cdict, as its lifetime ends ','line_number':1462,'multiline':True]['text':' entire input should be consumed ','line_number':1465,'multiline':True]['text':' avoid shortcut to single-pass mode ','line_number':1480,'multiline':True]['text':' entire input should be consumed ','line_number':1484,'multiline':True]['text':' Test all values < 300 ','line_number':1511,'multiline':True]['text':' Test values 2^8 to 2^17 ','line_number':1517,'multiline':True]['text':' Test offset values up to the max window log ','line_number':1524,'multiline':True]['text':' Force enable the row based match finder ','line_number':1575,'multiline':True]['text':' Set windowLog to 29 so the hashLog doesn't get sized down ','line_number':1578,'multiline':True]['text':' Compress with continue first so the hashLog doesn't get sized down ','line_number':1582,'multiline':True]['text':' Overlen overwriting window data bug ','line_number':1647,'multiline':True]['text':' This test has a window size of 1024 bytes and consists of 3 blocks:
            1. 'a' repeated 517 times
            2. 'b' repeated 516 times
            3. a compressed block with no literals and 3 sequence commands:
                litlength = 0, offset = 24, match length = 24
                litlength = 0, offset = 24, match length = 3 (this one creates an overlength write of length 2*WILDCOPY_OVERLENGTH - 3)
                litlength = 0, offset = 1021, match length = 3 (this one will try to read from overwritten data if the buffer is too small) ','line_number':1649,'multiline':True]['text':' Small Sequence Section bug ','line_number':1680,'multiline':True]['text':' This test consists of 3 blocks. Each block has one sequence.
            The sequence has literal length of 10, match length of 10 and offset of 10.
            The sequence value and compression mode for the blocks are following:
            The order of values are ll, ml, of.
              - First block  : (10, 7, 13) (rle, rle, rle)
                 - size of sequences section: 6 bytes (1 byte for nbSeq, 1 byte for encoding mode, 3 bytes for rle, 1 byte bitstream)
              - Second block : (10, 7, 1) (repeat, repeat, rle)
                 - size of sequences section: 4 bytes (1 byte for nbSeq, 1 byte for encoding mode, 1 bytes for rle, 1 byte bitstream)
              - Third block  : (10, 7, 1) (repeat, repeat, repeat)
                 - size of sequences section: 3 bytes (1 byte for nbSeq, 1 byte for encoding mode, 1 byte bitstream) ','line_number':1682,'multiline':True]['text':' 2 blocks ','line_number':1775,'multiline':True]['text':' first block is uncompressible ','line_number':1787,'multiline':True]['text':' second block is compressible ','line_number':1792,'multiline':True]['text':' and includes a very long backref ','line_number':1797,'multiline':True]['text':' and includes a very long backref ','line_number':1802,'multiline':True]['text':' Write a bunch of 6 byte blocks ','line_number':1835,'multiline':True]['text':' Write several very long offset matches into the dictionary ','line_number':1845,'multiline':True]['text':' Ensure decompression works ','line_number':1852,'multiline':True]['text':' Reference external matchfinder outside the test loop to
         * check that the reference is preserved across compressions ','line_number':1872,'multiline':True]['text':' Test compression with external matchfinder + empty src buffer ','line_number':1936,'multiline':True]['text':' Test that reset clears the external matchfinder ','line_number':1948,'multiline':True]['text':' ensure zstd will fail if the matchfinder wasn't cleared ','line_number':1950,'multiline':True]['text':' Test that registering mFinder == NULL clears the external matchfinder ','line_number':1954,'multiline':True]['text':' ensure zstd will fail if the matchfinder wasn't cleared ','line_number':1957,'multiline':True]['text':' clear the external matchfinder ','line_number':1959,'multiline':True]['text':' Test that external matchfinder doesn't interact with older APIs ','line_number':1962,'multiline':True]['text':' ensure zstd will fail if the matchfinder is used ','line_number':1965,'multiline':True]['text':' Test that compression returns the correct error with LDM ','line_number':1969,'multiline':True]['text':' Test that compression returns the correct error with nbWorkers > 0 ','line_number':1984,'multiline':True]['text':' Test maxBlockSize cctx param functionality ','line_number':2005,'multiline':True]['text':' Quick test to make sure maxBlockSize bounds are enforced ','line_number':2010,'multiline':True]['text':' Test maxBlockSize < windowSize and windowSize < maxBlockSize','line_number':2014,'multiline':True]['text':' maxBlockSize = 1KB ','line_number':2025,'multiline':True]['text':' maxBlockSize = 3KB ','line_number':2033,'multiline':True]['text':' We add another RLE block with header + character ','line_number':2041,'multiline':True]['text':' Compressed output should not be equal ','line_number':2042,'multiline':True]['text':' maxBlockSize = 1KB, windowLog = 10 ','line_number':2044,'multiline':True]['text':' maxBlockSize = 3KB, windowLog = 10 ','line_number':2053,'multiline':True]['text':' Compressed output should be equal ','line_number':2063,'multiline':True]['text':' Test maxBlockSize = 0 is valid ','line_number':2070,'multiline':True]['text':' maxBlockSize = 0 ','line_number':2079,'multiline':True]['text':' maxBlockSize = ZSTD_BLOCKSIZE_MAX ','line_number':2087,'multiline':True]['text':' Compressed output should be equal ','line_number':2096,'multiline':True]['text':' Test Sequence Validation ','line_number':2103,'multiline':True]['text':' Test minMatch >= 4, matchLength < 4 ','line_number':2108,'multiline':True]['text':' Test with sequence validation ','line_number':2124,'multiline':True]['text':' maxNbSeq is too small and an assert will fail ','line_number':2133,'multiline':True]['text':' fails sequence validation ','line_number':2134,'multiline':True]['text':' Test without sequence validation ','line_number':2138,'multiline':True]['text':' maxNbSeq is too small and an assert will fail ','line_number':2147,'multiline':True]['text':' fails sequence validation ','line_number':2148,'multiline':True]['text':' Test with no block delim ','line_number':2156,'multiline':True]['text':' Test with sequence validation ','line_number':2170,'multiline':True]['text':' Test case with two additional sequences ','line_number':2189,'multiline':True]['text':' maxNbSeq is too small and an assert will fail ','line_number':2215,'multiline':True]['text':' fails sequence validation ','line_number':2216,'multiline':True]['text':' Test without sequence validation ','line_number':2220,'multiline':True]['text':' maxNbSeq is too small and an assert will fail ','line_number':2229,'multiline':True]['text':' fails sequence validation ','line_number':2230,'multiline':True]['text':' Test large offset, small window size','line_number':2244,'multiline':True]['text':' Generate large dictionary ','line_number':2257,'multiline':True]['text':' ======   Fuzzer tests   ====== ','line_number':2315,'multiline':True]['text':' Return value in range minVal <= v <= maxVal ','line_number':2355,'multiline':True]['text':' will be re-created sometimes ','line_number':2377,'multiline':True]['text':' will be re-created sometimes ','line_number':2378,'multiline':True]['text':' can keep same dict on 2 consecutive tests ','line_number':2381,'multiline':True]['text':' allocations ','line_number':2386,'multiline':True]['text':' Create initial samples ','line_number':2396,'multiline':True]['text':' pure noise ','line_number':2397,'multiline':True]['text':' barely compressible ','line_number':2398,'multiline':True]['text':' highly compressible ','line_number':2400,'multiline':True]['text':' sparse content ','line_number':2401,'multiline':True]['text':' make copyBuffer considered initialized ','line_number':2402,'multiline':True]['text':' ensure at least one init ','line_number':2403,'multiline':True]['text':' catch up testNb ','line_number':2405,'multiline':True]['text':' test loop ','line_number':2409,'multiline':True]['text':' init ','line_number':2419,'multiline':True]['text':' states full reset (deliberately not synchronized) ','line_number':2428,'multiline':True]['text':' some issues can only happen when reusing states ','line_number':2429,'multiline':True]['text':' ensure at least one init ','line_number':2440,'multiline':True]['text':' srcBuffer selection [0-4] ','line_number':2443,'multiline':True]['text':' most common : compressible (P) ','line_number':2445,'multiline':True]['text':' barely/highly compressible ','line_number':2449,'multiline':True]['text':' not compressible / sparse ','line_number':2452,'multiline':True]['text':' compression init ','line_number':2458,'multiline':True]['text':' at beginning, to keep same nb of rand ','line_number':2459,'multiline':True]['text':' at least one test happened ','line_number':2460,'multiline':True]['text':' random dictionary selection ','line_number':2477,'multiline':True]['text':' multi-segments compression test ','line_number':2492,'multiline':True]['text':' compress random chunks into randomly sized dst buffers ','line_number':2498,'multiline':True]['text':' random flush operation, to mess around ','line_number':2514,'multiline':True]['text':' final frame epilogue ','line_number':2522,'multiline':True]['text':' multi - fragments decompression test ','line_number':2535,'multiline':True]['text':' don't reset if dictionary : could be different ','line_number':2536,'multiline':True]['text':'=====   noisy/erroneous src decompression test   =====','line_number':2567,'multiline':True]['text':' add some noise ','line_number':2569,'multiline':True]['text':' try decompression on noisy data ','line_number':2579,'multiline':True]['text':' note : no dictionary ','line_number':2580,'multiline':True]['text':' error correctly detected ','line_number':2591,'multiline':True]['text':' No forward progress possible ','line_number':2592,'multiline':True]['text':'* If useOpaqueAPI, sets param in cctxParams.
 *  Otherwise, sets the param in zc. ','line_number':2616,'multiline':True]['text':' Tests for ZSTD_compress_generic() API ','line_number':2629,'multiline':True]['text':' will be reset sometimes ','line_number':2646,'multiline':True]['text':' will be reset sometimes ','line_number':2647,'multiline':True]['text':' can keep same dict on 2 consecutive tests ','line_number':2650,'multiline':True]['text':' can survive between 2 loops ','line_number':2653,'multiline':True]['text':' allocations ','line_number':2658,'multiline':True]['text':' Create initial samples ','line_number':2668,'multiline':True]['text':' pure noise ','line_number':2669,'multiline':True]['text':' barely compressible ','line_number':2670,'multiline':True]['text':' highly compressible ','line_number':2672,'multiline':True]['text':' sparse content ','line_number':2673,'multiline':True]['text':' make copyBuffer considered initialized ','line_number':2674,'multiline':True]['text':' ensure at least one init ','line_number':2675,'multiline':True]['text':' catch up testNb ','line_number':2677,'multiline':True]['text':' test loop ','line_number':2681,'multiline':True]['text':' init ','line_number':2695,'multiline':True]['text':' states full reset (deliberately not synchronized) ','line_number':2703,'multiline':True]['text':' some issues can only happen when reusing states ','line_number':2704,'multiline':True]['text':' ensure at least one init ','line_number':2716,'multiline':True]['text':' srcBuffer selection [0-4] ','line_number':2719,'multiline':True]['text':' most common : compressible (P) ','line_number':2721,'multiline':True]['text':' barely/highly compressible ','line_number':2725,'multiline':True]['text':' not compressible / sparse ','line_number':2728,'multiline':True]['text':' compression init ','line_number':2734,'multiline':True]['text':' cancel previous dict /','line_number':2735,'multiline':True]['text':' at beginning, to keep same nb of rand ','line_number':2736,'multiline':True]['text':' at least one test happened ','line_number':2737,'multiline':True]['text':' just set a compression level ','line_number':2739,'multiline':True]['text':' random dictionary selection ','line_number':2758,'multiline':True]['text':' mess with compression parameters ','line_number':2771,'multiline':True]['text':' guaranteed by ZSTD_adjustCParams() ','line_number':2785,'multiline':True]['text':' mess with long distance matching parameters ','line_number':2800,'multiline':True]['text':' mess with frame parameters ','line_number':2810,'multiline':True]['text':' multi-threading parameters. Only adjust occasionally for small tests. ','line_number':2825,'multiline':True]['text':' Enable rsyncable mode 1 in 4 times. ','line_number':2838,'multiline':True]['text':' Apply parameters ','line_number':2848,'multiline':True]['text':' multi-segments compression test ','line_number':2868,'multiline':True]['text':' Need to reload the prefix because it gets dropped after one compression ','line_number':2882,'multiline':True]['text':' Adjust number of workers occasionally - result must be deterministic independent of nbWorkers ','line_number':2886,'multiline':True]['text':' compress random chunks into randomly sized dst buffers ','line_number':2904,'multiline':True]['text':' We've completed the flush ','line_number':2924,'multiline':True]['text':' Ensure maximal forward progress for determinism ','line_number':2928,'multiline':True]['text':' final frame epilogue ','line_number':2938,'multiline':True]['text':' ZSTD_e_end guarantees maximal forward progress ','line_number':2946,'multiline':True]['text':' multi - fragments decompression test ','line_number':2964,'multiline':True]['text':' don't reset if dictionary : could be different ','line_number':2968,'multiline':True]['text':'=====   noisy/erroneous src decompression test   =====','line_number':3007,'multiline':True]['text':' add some noise ','line_number':3009,'multiline':True]['text':' try decompression on noisy data ','line_number':3019,'multiline':True]['text':' error correctly detected ','line_number':3038,'multiline':True]['text':' Good so far, but no more progress possible ','line_number':3039,'multiline':True]['text':'-*******************************************************
*  Command line
********************************************************','line_number':3064,'multiline':True]['text':' Check command line ','line_number':3100,'multiline':True]['text':' Parsing commands. Aggregated commands are allowed ','line_number':3105,'multiline':True]['text':' pause at the end ','line_number':3129,'multiline':True]['text':' limit tests by nb of iterations (default) ','line_number':3134,'multiline':True]['text':' limit tests by time ','line_number':3144,'multiline':True]['text':' -T1m == -T60 ','line_number':3152,'multiline':True]['text':' -T1mn == -T60 ','line_number':3154,'multiline':True]['text':' -T10s == -T10 ','line_number':3155,'multiline':True]['text':' manually select seed ','line_number':3159,'multiline':True]['text':' select starting test number ','line_number':3170,'multiline':True]['text':' compressibility % ','line_number':3180,'multiline':True]['text':' for(argNb=1; argNb<argc; argNb++) ','line_number':3195,'multiline':True]['text':' Get Seed ','line_number':3197,'multiline':True]['text':' constant seed for predictability ','line_number':3212,'multiline':True]['text':' impossible ','line_number':3225,'multiline':True]