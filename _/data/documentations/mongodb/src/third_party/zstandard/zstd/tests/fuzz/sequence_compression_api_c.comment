['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':'*
 * This fuzz target performs a zstd round-trip test by generating an arbitrary
 * array of sequences, generating the associated source buffer, calling
 * ZSTD_compressSequences(), and then decompresses and compares the result with
 * the original generated source buffer.
 ','line_number':11,'multiline':True]['text':' Allow up to 1MB generated data ','line_number':40,'multiline':True]['text':' Fixed size 1MB literals buffer ','line_number':41,'multiline':True]['text':' Allow up to 256KB matches ','line_number':42,'multiline':True]['text':' Allow up to 1 << ZSTD_WINDOWLOG_MAX_32 dictionary ','line_number':43,'multiline':True]['text':' Maximum of 128K sequences ','line_number':44,'multiline':True]['text':' Deterministic random number generator ','line_number':46,'multiline':True]['text':' Make a pseudorandom string - this simple function exists to avoid
 * taking a dependency on datagen.h to have RDG_genBuffer().
 ','line_number':60,'multiline':True]['text':' Returns size of source buffer ','line_number':75,'multiline':True]['text':' block boundary ','line_number':91,'multiline':True]['text':' Copy over the match ','line_number':103,'multiline':True]['text':' Offset goes into the dictionary ','line_number':108,'multiline':True]['text':' Returns nb sequences generated
 * Note : random sequences are always valid in ZSTD_sf_noBlockDelimiters mode.
 * However, it can fail with ZSTD_sf_explicitBlockDelimiters,
 * due to potential lack of space in
 ','line_number':137,'multiline':True]['text':' not used by sequence ingestion api ','line_number':146,'multiline':True]['text':' ensure that no sequence can be larger than one block ','line_number':156,'multiline':True]['text':' extra room for explicit delimiters ','line_number':161,'multiline':True]['text':' Prevent match length from being such that it would be associated with an offset too large
             * from the decoder's perspective. If not possible (match would be too small),
             * then reduce the offset if necessary.
             ','line_number':177,'multiline':True]['text':' reaching limit : must end block now ','line_number':201,'multiline':True]['text':' always end sequences with a block delimiter ','line_number':222,'multiline':True]['text':' Valid scenario : in explicit delimiter mode,
         * it might be possible for the compressed size to outgrow dstCapacity.
         * In which case, it's still a valid fuzzer scenario,
         * but no roundtrip shall be possible ','line_number':250,'multiline':True]['text':' round-trip ','line_number':256,'multiline':True]['text':' Generate window log first so we don't generate offsets too large ','line_number':293,'multiline':True]['text':' Generate global dictionary buffer ','line_number':313,'multiline':True]['text':' Generate a large dictionary buffer ','line_number':316,'multiline':True]['text':' Create global cdict and ddict ','line_number':320,'multiline':True]['text':' Note : in explicit block delimiters mode,
     * the fuzzer might generate a lot of small blocks.
     * In which case, the final compressed size might be > ZSTD_compressBound().
     * This is still a valid scenario fuzzer though, which makes it possible to check under-sized dstCapacity.
     * The test just doesn't roundtrip. ','line_number':350,'multiline':True]['text':' can be 0 when no round-trip ','line_number':366,'multiline':True]