['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' *************************************
*  Compiler Options
**************************************','line_number':12,'multiline':True]['text':' Visual ','line_number':15,'multiline':True]['text':' disable: C4127: conditional expression is constant ','line_number':16,'multiline':True]['text':' non-constant aggregate initializer ','line_number':17,'multiline':True]['text':' disable %llu warnings with MinGW on Windows ','line_number':20,'multiline':True]['text':'-*************************************
*  Includes
**************************************','line_number':23,'multiline':True]['text':' Large Files support, SET_BINARY_MODE ','line_number':26,'multiline':True]['text':' UTIL_getFileSize, UTIL_isRegularFile, UTIL_isSameFile ','line_number':27,'multiline':True]['text':' fprintf, open, fdopen, fread, _fileno, stdin, stdout ','line_number':28,'multiline':True]['text':' malloc, free ','line_number':29,'multiline':True]['text':' strcmp, strlen ','line_number':30,'multiline':True]['text':' clock_t, to measure process time ','line_number':31,'multiline':True]['text':' O_WRONLY ','line_number':32,'multiline':True]['text':' errno ','line_number':34,'multiline':True]['text':' INT_MAX ','line_number':35,'multiline':True]['text':' UTIL_getTime, UTIL_clockSpanMicro ','line_number':37,'multiline':True]['text':' ZSTD_magicNumber, ZSTD_frameHeaderSize_max ','line_number':51,'multiline':True]['text':' ZSTD_error_frameParameter_windowTooLarge ','line_number':53,'multiline':True]['text':' LZ4_versionString() added in v1.7.3 ','line_number':85,'multiline':True]['text':'-*************************************
*  Constants
**************************************','line_number':108,'multiline':True]['text':' 8 MB ','line_number':111,'multiline':True]['text':' protection against large input (attack scenario) ','line_number':112,'multiline':True]['text':' Default file permissions 0666 (modulated by umask) ','line_number':116,'multiline':True]['text':' Temporary restricted file permissions are used when we're going to
 * chmod/chown at the end of the operation. ','line_number':117,'multiline':True]['text':' These macros aren't defined on windows. ','line_number':120,'multiline':True]['text':'-************************************
*  Signal (Ctrl-C trapping)
*************************************','line_number':128,'multiline':True]['text':' this invocation generates a buggy warning in Visual Studio ','line_number':136,'multiline':True]['text':' Idempotent ','line_number':154,'multiline':True]['text':'-*********************************************************
*  Termination signal trapping (Print debug stack trace)
**********************************************************','line_number':162,'multiline':True]['text':' Clang compiler ','line_number':165,'multiline':True]['text':' __has_feature(address_sanitizer) ','line_number':168,'multiline':True]['text':' GCC compiler ','line_number':169,'multiline':True]['text':' automatic detector : backtrace enabled by default on linux+glibc and osx ','line_number':174,'multiline':True]['text':' note : after this point, BACKTRACE_ENABLE is necessarily defined ','line_number':183,'multiline':True]['text':' backtrace, backtrace_symbols ','line_number':188,'multiline':True]['text':' Retrieve current stack addresses. ','line_number':208,'multiline':True]['text':' Create readable strings to each frame. ','line_number':214,'multiline':True]['text':' Print the stack trace, excluding calls handling the signal. ','line_number':216,'multiline':True]['text':' Reset and raise the signal so default handler runs. ','line_number':221,'multiline':True]['text':'-*************************************
*  Parameters: FIO_ctx_t
**************************************','line_number':238,'multiline':True]['text':' typedef'd to FIO_ctx_t within fileio.h ','line_number':242,'multiline':True]['text':' file i/o info ','line_number':245,'multiline':True]['text':' file i/o state ','line_number':250,'multiline':True]['text':'-*************************************
*  Parameters: Initialization
**************************************','line_number':270,'multiline':True]['text':' initializing this value requires a constant, so ZSTD_minCLevel() doesn't work ','line_number':295,'multiline':True]['text':' initializing this value requires a constant, so ZSTD_maxCLevel() doesn't work ','line_number':296,'multiline':True]['text':'-*************************************
*  Parameters: Display Options
**************************************','line_number':340,'multiline':True]['text':'-*************************************
*  Parameters: Setters
**************************************','line_number':349,'multiline':True]['text':' FIO_prefs_t functions ','line_number':353,'multiline':True]['text':' FIO_ctx_t functions ','line_number':493,'multiline':True]['text':'-*************************************
*  Functions
**************************************','line_number':514,'multiline':True]['text':'* FIO_removeFile() :
 * @result : Unlink `fileName`, even if it's read-only ','line_number':517,'multiline':True]['text':' windows doesn't allow remove read-only files,
     * so try to make it writable first ','line_number':531,'multiline':True]['text':'* FIO_openSrcFile() :
 *  condition : `srcFileName` must be non-NULL. `prefs` may be NULL.
 * @result : FILE* to `srcFileName`, or NULL if it fails ','line_number':540,'multiline':True]['text':'* FIO_openDstFile() :
 *  condition : `dstFileName` must be non-NULL.
 * @result : FILE* to `dstFileName`, or NULL if it fails ','line_number':576,'multiline':True]['text':' do not open file in test mode ','line_number':586,'multiline':True]['text':' ensure dst is not the same as src ','line_number':599,'multiline':True]['text':' invoke once ','line_number':605,'multiline':True]['text':' Check if destination file already exists ','line_number':615,'multiline':True]['text':' this test does not work on Windows :
         * `NUL` and `nul` are detected as regular files ','line_number':617,'multiline':True]['text':' No interaction possible ','line_number':626,'multiline':True]['text':' need to unlink ','line_number':635,'multiline':True]['text':' Windows requires opening the file as a "binary" file to avoid
         * mangling. This macro doesn't exist on unix. ','line_number':641,'multiline':True]['text':' An increased buffer size can provide a significant performance
             * boost on some platforms. Note that providing a NULL buf with a
             * size that's not 0 is not defined in ANSI C, but is defined in an
             * extension. There are three possibilities here:
             * 1. Libc supports the extended version and everything is good.
             * 2. Libc ignores the size when buf is NULL, in which case
             *    everything will continue as if we didn't call `setvbuf()`.
             * 3. We fail the call and execution continues but a warning
             *    message might be shown.
             * In all cases due execution continues. For now, I believe that
             * this is a more cost-effective solution than managing the buffers
             * allocations ourselves (will require an API change).
             ','line_number':660,'multiline':True]['text':' FIO_getDictFileStat() :
 ','line_number':682,'multiline':True]['text':'  FIO_setDictBufferMalloc() :
 *  allocates a buffer, pointed by `dict->dictBuffer`,
 *  loads `filename` content into it, up to DICTSIZE_MAX bytes.
 * @return : loaded size
 *  if fileName==NULL, returns 0 and a NULL pointer
 ','line_number':697,'multiline':True]['text':' avoid extreme cases ','line_number':727,'multiline':True]['text':' avoid extreme cases ','line_number':774,'multiline':True]['text':' avoid extreme cases ','line_number':817,'multiline':True]['text':' we can only cast to DWORD here because dictSize <= 2GB ','line_number':826,'multiline':True]['text':' Should not reach this case ','line_number':852,'multiline':True]['text':' Should not reach this case ','line_number':863,'multiline':True]['text':' FIO_checkFilenameCollisions() :
 * Checks for and warns if there are any files that would have the same output path
 ','line_number':868,'multiline':True]['text':' FIO_createFilename_fromOutDir() :
 * Takes a source file name and specified output directory, and
 * allocates memory for and returns a pointer to final path.
 * This function never returns an error (it may abort() in case of pb)
 ','line_number':911,'multiline':True]['text':' windows support ','line_number':923,'multiline':True]['text':' windows support ','line_number':930,'multiline':True]['text':' sometimes, '/' separator is also used on Windows (mingw+msys2) ','line_number':931,'multiline':True]['text':' FIO_highbit64() :
 * gives position of highest bit.
 * note : only works for v > 0 !
 ','line_number':950,'multiline':True]['text':' FIO_multiFilesConcatWarning() :
 * This function handles logic when processing multiple files with -o or -c, displaying the appropriate warnings/prompts.
 * Returns 1 if the console should abort, 0 if console should proceed.
 *
 * If output is stdout or test mode is active, check that `--rm` disabled.
 *
 * If there is just 1 file to process, zstd will proceed as usual.
 * If each file get processed into its own separate destination file, proceed as usual.
 *
 * When multiple files are processed into a single output,
 * display a warning message, then disable --rm if it's set.
 *
 * If -f is specified or if output is stdout, just proceed.
 * If output is set with -o, prompt for confirmation.
 ','line_number':977,'multiline':True]['text':' this should not happen ; hard fail, to protect user's data
             * note: this should rather be an assert(), but we want to be certain that user's data will not be wiped out in case it nonetheless happen ','line_number':996,'multiline':True]['text':' this should not happen ; hard fail, to protect user's data
             * note: this should rather be an assert(), but we want to be certain that user's data will not be wiped out in case it nonetheless happen ','line_number':1004,'multiline':True]['text':' multi-input into single output : --rm is not allowed ','line_number':1024,'multiline':True]['text':' multiple files concatenated into single destination file using -o without -f ','line_number':1033,'multiline':True]['text':' quiet mode => no prompt => fail automatically ','line_number':1035,'multiline':True]['text':' normal mode => prompt ','line_number':1040,'multiline':True]['text':' **********************************************************************
 *  Compression
 ***********************************************************************','line_number':1064,'multiline':True]['text':'* ZSTD_cycleLog() :
 *  condition for correct operation : hashLog > 1 ','line_number':1076,'multiline':True]['text':' need to update memLimit before calling createDictBuffer
     * because of memLimit check inside it ','line_number':1128,'multiline':True]['text':' works with dictFileName==NULL ','line_number':1138,'multiline':True]['text':' Advanced parameters, including dictionary ','line_number':1143,'multiline':True]['text':' always enable content size when available (note: supposed to be default) ','line_number':1151,'multiline':True]['text':' compression level ','line_number':1154,'multiline':True]['text':' max compressed block size ','line_number':1156,'multiline':True]['text':' source size hint ','line_number':1158,'multiline':True]['text':' long distance matching ','line_number':1160,'multiline':True]['text':' compression parameters ','line_number':1171,'multiline':True]['text':' multi-threading ','line_number':1181,'multiline':True]['text':' dictionary ','line_number':1192,'multiline':True]['text':' never fails ','line_number':1207,'multiline':True]['text':' buffers & handlers are used, but not changed ','line_number':1213,'multiline':True]['text':' maxWindowLogSize ','line_number':1229,'multiline':True]['text':' gzip only ','line_number':1229,'multiline':True]['text':' see https://www.zlib.net/manual.html ','line_number':1230,'multiline':True]['text':' LZMA ','line_number':1325,'multiline':True]['text':' XZ ','line_number':1329,'multiline':True]['text':' autoflush off to mitigate a bug in lz4<=1.9.3 for compression level 12 ','line_number':1418,'multiline':True]['text':' Read first block ','line_number':1438,'multiline':True]['text':' Main Loop ','line_number':1441,'multiline':True]['text':' Write Block ','line_number':1460,'multiline':True]['text':' Read next block ','line_number':1464,'multiline':True]['text':' End of Stream mark ','line_number':1469,'multiline':True]['text':' stats ','line_number':1503,'multiline':True]['text':' init ','line_number':1519,'multiline':True]['text':' unknown source size; use the declared stream size ','line_number':1524,'multiline':True]['text':' If long mode is set without a window size libzstd will set this size internally ','line_number':1535,'multiline':True]['text':' Main compression loop ','line_number':1547,'multiline':True]['text':' Fill input Buffer ','line_number':1550,'multiline':True]['text':' input buffer must be entirely ingested ','line_number':1560,'multiline':True]['text':' count stats ','line_number':1569,'multiline':True]['text':' input buffer is full and can't take any more : input speed is faster than consumption rate ','line_number':1571,'multiline':True]['text':' Write compressed stream ','line_number':1574,'multiline':True]['text':' adaptive mode : statistics measurement and speed correction ','line_number':1583,'multiline':True]['text':' check output speed ','line_number':1589,'multiline':True]['text':' only possible if nbWorkers >= 1 ','line_number':1590,'multiline':True]['text':' test if compression is blocked
                        * either because output is slow and all buffers are full
                        * or because input is slow and no job can start while waiting for at least one buffer to be filled.
                        * note : exclude starting part, since currentJobID > 1 ','line_number':1597,'multiline':True]['text':' no data compressed : no data available, or no more buffer to compress to, OR compression is really slow (compression of a single block is slower than update rate)','line_number':1601,'multiline':True]['text':' confirmed : no compression ongoing ','line_number':1602,'multiline':True]['text':' compression produces more data than output can flush (though production can be spiky, due to work unit : (N==4)*block sizes) ','line_number':1610,'multiline':True]['text':' flush speed was never slowed by lack of production, so it's operating at max capacity ','line_number':1611,'multiline':True]['text':' course correct only if there is at least one new job completed ','line_number':1619,'multiline':True]['text':' check input speed ','line_number':1623,'multiline':True]['text':' warm up period, to fill all workers ','line_number':1624,'multiline':True]['text':' input is waiting often, because input buffers is full : compression or output too slow ','line_number':1639,'multiline':True]['text':' flush everything that is produced ','line_number':1640,'multiline':True]['text':' input speed as fast or faster than compression speed ','line_number':1641,'multiline':True]['text':' skip 0 ','line_number':1657,'multiline':True]['text':' skip 0 ','line_number':1664,'multiline':True]['text':' if (zfp.currentJobID > lastJobID) ','line_number':1670,'multiline':True]['text':' if (prefs->adaptiveMode && UTIL_clockSpanMicro(lastAdaptTime) > adaptEveryMicro) ','line_number':1671,'multiline':True]['text':' display notification ','line_number':1673,'multiline':True]['text':'avoid div0','line_number':1676,'multiline':True]['text':' display progress notifications ','line_number':1683,'multiline':True]['text':' Clear out the current displayed line ','line_number':1684,'multiline':True]['text':' Verbose progress update ','line_number':1686,'multiline':True]['text':' Require level 2 or forcibly displayed progress counter for summarized updates ','line_number':1695,'multiline':True]['text':' Ensure that the string we print is roughly the same size each time ','line_number':1698,'multiline':True]['text':' if (SHOULD_DISPLAY_PROGRESS() && READY_FOR_UPDATE()) ','line_number':1713,'multiline':True]['text':' while ((inBuff.pos != inBuff.size) ','line_number':1714,'multiline':True]['text':'! FIO_compressFilename_internal() :
 *  same as FIO_compressFilename_extRess(), with `ress.desFile` already opened.
 *  @return : 0 : compression completed correctly,
 *            1 : missing or pb opening srcFileName
 ','line_number':1728,'multiline':True]['text':' compression format selection ','line_number':1747,'multiline':True]['text':' Status ','line_number':1786,'multiline':True]['text':' Elapsed Time and CPU Load ','line_number':1809,'multiline':True]['text':'! FIO_compressFilename_dstFile() :
 *  open dstFileName, or pass-through if ress.file != NULL,
 *  then start compression with FIO_compressFilename_internal().
 *  Manages source removal (--rm) and file permissions transfer.
 *  note : ress.srcFile must be != NULL,
 *  so reach this function through FIO_compressFilename_srcFile().
 *  @return : 0 : compression completed correctly,
 *            1 : pb
 ','line_number':1822,'multiline':True]['text':' could not open dstFileName ','line_number':1858,'multiline':True]['text':' Must only be added after FIO_openDstFile() succeeds.
         * Otherwise we may delete the destination file if it already exists,
         * and the user presses Ctrl-C when asked if they wish to overwrite.
         ','line_number':1861,'multiline':True]['text':' error closing file ','line_number':1878,'multiline':True]['text':' operation failure ','line_number':1887,'multiline':True]['text':' special case : don't remove() stdout ','line_number':1888,'multiline':True]['text':' remove compression artefact; note don't do anything special if remove() fails ','line_number':1890,'multiline':True]['text':' List used to compare file extensions (used with --exclude-compressed flag)
* Different from the suffixList and should only apply to ZSTD compress operationResult
','line_number':1897,'multiline':True]['text':'! FIO_compressFilename_srcFile() :
 *  @return : 0 : compression completed correctly,
 *            1 : missing or pb opening srcFileName
 ','line_number':1913,'multiline':True]['text':' failure to stat at all is handled during opening ','line_number':1933,'multiline':True]['text':' ensure src is not a directory ','line_number':1935,'multiline':True]['text':' ensure src is not the same as dict (if present) ','line_number':1941,'multiline':True]['text':' Check if "srcFile" is compressed. Only done if --exclude-compressed flag is used
    * YES => ZSTD will skip compression of the file and will return 0.
    * NO => ZSTD will resume with compress operation.
    ','line_number':1949,'multiline':True]['text':' srcFile could not be opened ','line_number':1959,'multiline':True]['text':' Don't use AsyncIO for small files ','line_number':1961,'multiline':True]['text':' Stdin doesn't have stats ','line_number':1962,'multiline':True]['text':' --rm ','line_number':1979,'multiline':True]['text':' success ','line_number':1980,'multiline':True]['text':' exception : don't erase stdin ','line_number':1981,'multiline':True]['text':' We must clear the handler, since after this point calling it would
         * delete both the source and destination files.
         ','line_number':1983,'multiline':True]['text':' Necessary to avoid warnings since -O3 will omit the above `assert` ','line_number':1996,'multiline':True]['text':' FIO_determineCompressedName() :
 * create a destination filename for compressed srcFileName.
 * @return a pointer to it.
 * This function never returns an error (it may abort() in case of pb)
 ','line_number':2052,'multiline':True]['text':' using static allocation : this function cannot be multi-threaded ','line_number':2061,'multiline':True]['text':' resize buffer for dstName ','line_number':2077,'multiline':True]['text':' Include terminating null ','line_number':2093,'multiline':True]['text':' FIO_compressMultipleFilenames() :
 * compress nbFiles files
 * into either one destination (outFileName),
 * or into one file each (outFileName == NULL, but suffix != NULL),
 * or into a destination folder (specified with -O)
 ','line_number':2108,'multiline':True]['text':' init ','line_number':2129,'multiline':True]['text':' output into a single destination (stdout typically) ','line_number':2131,'multiline':True]['text':' displayLevelCutoff ','line_number':2133,'multiline':True]['text':' could not open outFileName ','line_number':2138,'multiline':True]['text':' cannot fail ','line_number':2169,'multiline':True]['text':' #ifndef ZSTD_NOCOMPRESS ','line_number':2203,'multiline':True]['text':' **************************************************************************
 *  Decompression
 **************************************************************************','line_number':2209,'multiline':True]['text':' just use the dict size ','line_number':2232,'multiline':True]['text':' Allocation ','line_number':2235,'multiline':True]['text':' dictionary ','line_number':2242,'multiline':True]['text':' FIO_passThrough() : just copy input into output, for compatibility with gzip -df mode
 * @return : 0 (no error) ','line_number':2269,'multiline':True]['text':' FIO_zstdErrorHelp() :
 * detailed error message when requested window size is too large ','line_number':2293,'multiline':True]['text':' Help message only for one specific error ','line_number':2303,'multiline':True]['text':' Try to decode the frame header ','line_number':2307,'multiline':True]['text':' ensure now overflow for windowMB ','line_number':2317,'multiline':True]['text':'* FIO_decompressFrame() :
 *  @return : size of decoded zstd frame, or an error code
 ','line_number':2326,'multiline':True]['text':' for multi-frames streams ','line_number':2334,'multiline':True]['text':' display last 20 characters only ','line_number':2339,'multiline':True]['text':' Header loading : ensures ZSTD_getFrameHeader() will succeed ','line_number':2346,'multiline':True]['text':' Main decompression Loop ','line_number':2349,'multiline':True]['text':' Write block ','line_number':2363,'multiline':True]['text':' end of frame ','line_number':2385,'multiline':True]['text':' Fill input buffer ','line_number':2387,'multiline':True]['text':' support large skippable frames ','line_number':2388,'multiline':True]['text':' see https://www.zlib.net/manual.html ','line_number':2421,'multiline':True]['text':' maxWindowLogSize ','line_number':2422,'multiline':True]['text':' gzip only ','line_number':2422,'multiline':True]['text':' release resources ; error detected ','line_number':2462,'multiline':True]['text':' LZMA ','line_number':2488,'multiline':True]['text':' XZ ','line_number':2490,'multiline':True]['text':' Main Loop ','line_number':2562,'multiline':True]['text':' Read input ','line_number':2568,'multiline':True]['text':' reached end of file ','line_number':2570,'multiline':True]['text':' still to read, or still to flush ','line_number':2572,'multiline':True]['text':' Decode Input (at least partially) ','line_number':2573,'multiline':True]['text':' Write Block ','line_number':2587,'multiline':True]['text':'* FIO_decompressFrames() :
 *  Find and decode frames inside srcFile
 *  srcFile presumed opened and valid
 * @return : 0 : OK
 *           1 : error
 ','line_number':2616,'multiline':True]['text':' If pass-through mode is not explicitly enabled or disabled,
         * default to the legacy behavior of enabling it if we are writing
         * to stdout with the overwrite flag enabled.
         ','line_number':2631,'multiline':True]['text':' for each frame ','line_number':2639,'multiline':True]['text':' check magic number -> version ','line_number':2641,'multiline':True]['text':' srcFile is empty (which is invalid) ','line_number':2647,'multiline':True]['text':' else, just reached frame boundary ','line_number':2650,'multiline':True]['text':' no more input ','line_number':2651,'multiline':True]['text':' there is at least 1 byte in srcFile ','line_number':2653,'multiline':True]['text':' not enough input to check magic number ','line_number':2654,'multiline':True]['text':' gz magic number ','line_number':2665,'multiline':True]['text':' xz magic number ','line_number':2674,'multiline':True]['text':' lzma header (no magic number) ','line_number':2675,'multiline':True]['text':' for each frame ','line_number':2698,'multiline':True]['text':' Final Status ','line_number':2700,'multiline':True]['text':'* FIO_decompressDstFile() :
    open `dstFileName`, or pass-through if writeCtx's file is already != 0,
    then start decompression process (FIO_decompressFrames()).
    @return : 0 : OK
              1 : operation aborted
','line_number':2709,'multiline':True]['text':' special case : don't transfer permissions from stdin ','line_number':2730,'multiline':True]['text':' Must only be added after FIO_openDstFile() succeeds.
         * Otherwise we may delete the destination file if it already exists,
         * and the user presses Ctrl-C when asked if they wish to overwrite.
         ','line_number':2744,'multiline':True]['text':' operation failure ','line_number':2769,'multiline':True]['text':' special case : don't remove() stdout ','line_number':2770,'multiline':True]['text':' remove decompression artefact; note: don't do anything special if remove() fails ','line_number':2772,'multiline':True]['text':'* FIO_decompressSrcFile() :
    Open `srcFileName`, transfer control to decompressDstFile()
    @return : 0 : OK
              1 : error
','line_number':2780,'multiline':True]['text':' Don't use AsyncIO for small files ','line_number':2800,'multiline':True]['text':' Stdin doesn't have stats ','line_number':2801,'multiline':True]['text':' Close file ','line_number':2817,'multiline':True]['text':' error should not happen ','line_number':2819,'multiline':True]['text':' --rm ','line_number':2822,'multiline':True]['text':' decompression successful ','line_number':2823,'multiline':True]['text':' not stdin ','line_number':2824,'multiline':True]['text':' We must clear the handler, since after this point calling it would
         * delete both the source and destination files.
         ','line_number':2825,'multiline':True]['text':' failed to remove src file ','line_number':2830,'multiline':True]['text':' FIO_determineDstName() :
 * create a destination filename from a srcFileName.
 * @return a pointer to it.
 * @return == NULL if there is an error ','line_number':2888,'multiline':True]['text':' using static allocation : this function cannot be multi-threaded ','line_number':2896,'multiline':True]['text':' check suffix is authorized ','line_number':2929,'multiline':True]['text':' allocate enough space to write dstFilename into it ','line_number':2952,'multiline':True]['text':' return dst name == src name truncated from suffix ','line_number':2961,'multiline':True]['text':' The short tar extensions tzst, tgz, txz and tlz4 files should have "tar"
     * extension on decompression. Also writes terminating null. ','line_number':2971,'multiline':True]['text':' note : dstFileNameBuffer memory is not going to be free ','line_number':2976,'multiline':True]['text':' displayLevelCutoff ','line_number':2992,'multiline':True]['text':' create dstFileName ','line_number':3013,'multiline':True]['text':' **************************************************************************
 *  .zst file info (--list command)
 **************************************************************************','line_number':3046,'multiline':True]['text':' begin analyzing frame ','line_number':3082,'multiline':True]['text':' correct end of file => success ','line_number':3097,'multiline':True]['text':' Zstandard frame ','line_number':3103,'multiline':True]['text':' move to the end of the frame header ','line_number':3122,'multiline':True]['text':' skip all blocks in the frame ','line_number':3129,'multiline':True]['text':' check if checksum is used ','line_number':3148,'multiline':True]['text':' Skippable frame ','line_number':3158,'multiline':True]['text':' unknown content ','line_number':3166,'multiline':True]['text':' magic number analysis ','line_number':3170,'multiline':True]['text':' end analyzing frames ','line_number':3171,'multiline':True]['text':'* getFileInfo() :
 *  Reads information from file, stores in *info
 * @return : InfoError status
 ','line_number':3193,'multiline':True]['text':' display error, but provide output ','line_number':3283,'multiline':True]['text':' error occurred while opening the file ','line_number':3291,'multiline':True]['text':' ensure no specified input is stdin (needs fseek() capability) ','line_number':3312,'multiline':True]['text':' --list each file, and check for any error ','line_number':3334,'multiline':True]['text':' display total ','line_number':3339,'multiline':True]['text':' #ifndef ZSTD_NODECOMPRESS ','line_number':3364,'multiline':True]