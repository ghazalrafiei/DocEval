['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' *********************************************************
*  Turn on Large Files support (>4GB) for 32-bit Linux/Unix
**********************************************************','line_number':11,'multiline':True]['text':' No point defining Large file for 64 bit but MinGW-w64 requires it ','line_number':14,'multiline':True]['text':' turn off_t into a 64-bit type for ftello, fseeko ','line_number':16,'multiline':True]['text':' obsolete macro, replaced with _FILE_OFFSET_BITS ','line_number':18,'multiline':True]['text':' Large File Support extension (LFS) - fseeko, ftello ','line_number':19,'multiline':True]['text':' Large file support on 32-bits AIX and HP-UX ','line_number':22,'multiline':True]['text':' ************************************************************
*  Detect POSIX version
*  PLATFORM_POSIX_VERSION = 0 for non-Unix e.g. Windows
*  PLATFORM_POSIX_VERSION = 1 for Unix-like but non-POSIX
*  PLATFORM_POSIX_VERSION > 1 is equal to found _POSIX_VERSION
*  Value of PLATFORM_POSIX_VERSION can be forced on command line
**************************************************************','line_number':26,'multiline':True]['text':' POSIX.1-2001 (SUSv3) conformant ','line_number':35,'multiline':True]['text':' BSD distros ','line_number':36,'multiline':True]['text':' exception rule : force posix version to 200112L,
      * note: it's better to use unistd.h's _POSIX_VERSION whenever possible ','line_number':37,'multiline':True]['text':' try to determine posix version through official unistd.h's _POSIX_VERSION (https://pubs.opengroup.org/onlinepubs/7908799/xsh/unistd.h.html).
 * note : there is no simple way to know in advance if <unistd.h> is present or not on target system,
 * Posix specification mandates its presence and its content, but target system must respect this spec.
 * It's necessary to _not_ #include <unistd.h> whenever target OS is not unix-like
 * otherwise it will block preprocessing stage.
 * The following list of build macros tries to "guess" if target OS is likely unix-like, and therefore can #include <unistd.h>
 ','line_number':41,'multiline':True]['text':' feature test macro : https://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html ','line_number':54,'multiline':True]['text':' declares _POSIX_VERSION ','line_number':57,'multiline':True]['text':' POSIX compliant ','line_number':58,'multiline':True]['text':' enable st_mtim on uclibc ','line_number':66,'multiline':True]['text':' non-unix target platform (like Windows) ','line_number':70,'multiline':True]['text':' PLATFORM_POSIX_VERSION ','line_number':74,'multiline':True]['text':' ************************************************************
* Avoid fseek()'s 2GiB barrier with MSVC, macOS, *BSD, MinGW
**************************************************************','line_number':77,'multiline':True]['text':' No point defining Large file for 64 bit ','line_number':82,'multiline':True]['text':' malloc, free ','line_number':108,'multiline':True]['text':' FILE* ','line_number':109,'multiline':True]['text':' UNIT_MAX ','line_number':110,'multiline':True]['text':' Special-case callbacks for FILE* and in-memory modes, so that we can treat
 * them the same way as the advanced API ','line_number':134,'multiline':True]['text':' not possible ','line_number':185,'multiline':True]['text':' need to do our own input buffering ','line_number':217,'multiline':True]['text':' so we can efficiently decompress the
                                         starts of chunks before we get to the
                                         desired section ','line_number':218,'multiline':True]['text':' maintain continuity across ZSTD_seekable_decompress operations ','line_number':221,'multiline':True]['text':' for `src.opaque` in in-memory mode ','line_number':222,'multiline':True]['text':' also initializes stage to zsds_init ','line_number':232,'multiline':True]['text':' support free on null ','line_number':246,'multiline':True]['text':' Allocate an extra entry at the end to match logic of initial allocation ','line_number':261,'multiline':True]['text':' support free on null ','line_number':276,'multiline':True]['text':'* ZSTD_seekable_offsetToFrameIndex() :
 *  Performs a binary search to find the last frame with a decompressed offset
 *  <= pos
 *  @return : the frame's index ','line_number':282,'multiline':True]['text':' read the footer, fixed size ','line_number':373,'multiline':True]['text':' check reserved bits ','line_number':384,'multiline':True]['text':' don't need to re-read footer ','line_number':394,'multiline':True]['text':' Allocate an extra entry at the end so that we can do size
             * computations on the last element without special case ','line_number':408,'multiline':True]['text':' compute cumulative positions ','line_number':420,'multiline':True]['text':' move any data we haven't read yet ','line_number':425,'multiline':True]['text':' check if we can continue from a previous decompress job ','line_number':495,'multiline':True]['text':' dummy decompressions until we get to the target offset ','line_number':519,'multiline':True]['text':' frame complete ','line_number':548,'multiline':True]['text':' verify checksum ','line_number':550,'multiline':True]['text':' go back to the start and force a reset of the stream ','line_number':558,'multiline':True]['text':' in this case it will fail later with corruption_detected, since last block does not have checksum ','line_number':560,'multiline':True]['text':' read in more data if we're done with this buffer ','line_number':566,'multiline':True]['text':' while (zs->decompressedOffset < offset + len) ','line_number':573,'multiline':True]