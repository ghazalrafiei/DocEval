['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' benchzstd :
  * benchmark Zstandard compression / decompression
  * over a set of files or buffers
  * and display progress result and final summary
  ','line_number':11,'multiline':True]['text':' ===  Dependencies  === ','line_number':24,'multiline':True]['text':' size_t ','line_number':25,'multiline':True]['text':' ZSTD_compressionParameters ','line_number':26,'multiline':True]['text':' ZSTD_compressionParameters ','line_number':27,'multiline':True]['text':' ===  Constants  === ','line_number':30,'multiline':True]['text':' ===  Benchmark functions  === ','line_number':35,'multiline':True]['text':' Creates a variant `typeName`, able to express "error or valid result".
 * Functions with return type `typeName`
 * must first check if result is valid, using BMK_isSuccessful_*(),
 * and only then can extract `baseType`.
 ','line_number':37,'multiline':True]['text':' bytes / sec ','line_number':52,'multiline':True]['text':' memory usage during compression ','line_number':54,'multiline':True]['text':' check first if the return structure represents an error or a valid result ','line_number':59,'multiline':True]['text':' extract result from variant type.
 * note : this function will abort() program execution if result is not valid
 *        check result validity first, by using BMK_isSuccessful_benchOutcome()
 ','line_number':62,'multiline':True]['text':'! BMK_benchFiles() -- called by zstdcli ','line_number':69,'multiline':True]['text':'  Loads files from fileNamesTable into memory,
 *  and an optional dictionary from dictFileName (can be NULL),
 *  then uses benchMem().
 *  fileNamesTable - name of files to benchmark.
 *  nbFiles - number of files (size of fileNamesTable), must be > 0.
 *  dictFileName - name of dictionary file to load.
 *  cLevel - compression level to benchmark, errors if invalid.
 *  compressionParams - advanced compression Parameters.
 *  displayLevel - what gets printed:
 *      0 : no display;
 *      1 : errors;
 *      2 : + result + interaction + warnings;
 *      3 : + information;
 *      4 : + debug
 * @return: 0 on success, !0 on error
 ','line_number':70,'multiline':True]['text':' 0: all, 1: compress only 2: decode only ','line_number':100,'multiline':True]['text':' default timing is in nbSeconds ','line_number':101,'multiline':True]['text':' Maximum size of each block','line_number':102,'multiline':True]['text':' multithreading ','line_number':103,'multiline':True]['text':' real time priority ','line_number':104,'multiline':True]['text':' used by python speed benchmark ','line_number':105,'multiline':True]['text':' enables long distance matching ','line_number':106,'multiline':True]['text':' below: parameters for long distance matching, see zstd.1.md ','line_number':107,'multiline':True]['text':' use row-based matchfinder if possible ','line_number':112,'multiline':True]['text':' returns default parameters used by nonAdvanced functions ','line_number':115,'multiline':True]['text':'! BMK_benchFilesAdvanced():
 *  Same as BMK_benchFiles(),
 *  with more controls, provided through advancedParams_t structure ','line_number':118,'multiline':True]['text':'! BMK_syntheticTest() -- called from zstdcli ','line_number':127,'multiline':True]['text':'  Generates a sample with datagen, using compressibility argument ','line_number':128,'multiline':True]['text':'  cLevel - compression level to benchmark, errors if invalid
 *  compressibility - determines compressibility of sample
 *  compressionParams - basic compression Parameters
 *  displayLevel - see benchFiles
 *  adv - see advanced_Params_t
 * @return: 0 on success, !0 on error
 ','line_number':129,'multiline':True]['text':' ===  Benchmark Zstandard in a memory-to-memory scenario  === ','line_number':142,'multiline':True]['text':'* BMK_benchMem() -- core benchmarking function, called in paramgrill
 *  applies ZSTD_compress_generic() and ZSTD_decompress_generic() on data in srcBuffer
 *  with specific compression parameters provided by other arguments using benchFunction
 *  (cLevel, comprParams + adv in advanced Mode) ','line_number':144,'multiline':True]['text':'  srcBuffer - data source, expected to be valid compressed data if in Decode Only Mode
 *  srcSize - size of data in srcBuffer
 *  fileSizes - srcBuffer is considered cut into 1+ segments, to compress separately.
 *              note : sum(fileSizes) must be == srcSize.  (<== ensure it's properly checked)
 *  nbFiles - nb of segments
 *  cLevel - compression level
 *  comprParams - basic compression parameters
 *  dictBuffer - a dictionary if used, null otherwise
 *  dictBufferSize - size of dictBuffer, 0 otherwise
 *  displayLevel - see BMK_benchFiles
 *  displayName - name used by display
 * @return:
 *      a variant, which expresses either an error, or a valid result.
 *      Use BMK_isSuccessful_benchOutcome() to check if function was successful.
 *      If yes, extract the valid result with BMK_extract_benchResult(),
 *      it will contain :
 *          .cSpeed: compression speed in bytes per second,
 *          .dSpeed: decompression speed in bytes per second,
 *          .cSize : compressed size, in bytes
 *          .cMem  : memory budget required for the compression context
 ','line_number':148,'multiline':True]['text':' BMK_benchMemAdvanced() : used by Paramgrill
 * same as BMK_benchMem() with following additional options :
 * dstBuffer - destination buffer to write compressed output in, NULL if none provided.
 * dstCapacity - capacity of destination buffer, give 0 if dstBuffer = NULL
 * adv = see advancedParams_t
 ','line_number':176,'multiline':True]['text':' BENCH_ZSTD_H_3242387 ','line_number':192,'multiline':True]