['text':'
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 ','line_number':1,'multiline':True]['text':' **************************************
*  Compiler Warnings
***************************************','line_number':13,'multiline':True]['text':' disable: C4127: conditional expression is constant ','line_number':17,'multiline':True]['text':'-*************************************
*  Includes
**************************************','line_number':21,'multiline':True]['text':' Large Files support ','line_number':24,'multiline':True]['text':' UTIL_getFileSize, UTIL_getTotalFileSize ','line_number':25,'multiline':True]['text':' malloc, free ','line_number':26,'multiline':True]['text':' memset ','line_number':27,'multiline':True]['text':' fprintf, fopen, ftello64 ','line_number':28,'multiline':True]['text':' errno ','line_number':29,'multiline':True]['text':' UTIL_time_t, UTIL_clockSpanMicro, UTIL_getTime ','line_number':31,'multiline':True]['text':' assert ','line_number':32,'multiline':True]['text':' read ','line_number':33,'multiline':True]['text':'-*************************************
*  Constants
**************************************','line_number':38,'multiline':True]['text':' rough estimation : memory cost to analyze 1 byte of sample ','line_number':46,'multiline':True]['text':' rough estimation : memory cost to analyze 1 byte of sample ','line_number':47,'multiline':True]['text':' rough estimation : memory cost to analyze 1 byte of sample ','line_number':48,'multiline':True]['text':' training dataset limited to 2GB ','line_number':52,'multiline':True]['text':'-*************************************
*  Console display
**************************************','line_number':55,'multiline':True]['text':'-*************************************
*  Exceptions
**************************************','line_number':69,'multiline':True]['text':' ********************************************************
*  Helper functions
*********************************************************','line_number':86,'multiline':True]['text':'*
  Returns the size of a file.
  If error returns -1.
','line_number':92,'multiline':True]['text':' ********************************************************
*  File related operations
*********************************************************','line_number':102,'multiline':True]['text':'* DiB_loadFiles() :
 *  load samples from files listed in fileNamesTable into buffer.
 *  works even if buffer is too small to load all samples.
 *  Also provides the size of each sample into sampleSizes table
 *  which must be sized correctly, using DiB_fileStats().
 * @return : nb of samples effectively loaded into `buffer`
 * *bufferSizePtr is modified, it provides the amount data loaded within buffer.
 *  sampleSizes is filled with the size of each sample.
 ','line_number':105,'multiline':True]['text':' skip if zero-size or file error ','line_number':132,'multiline':True]['text':' Load the first chunk of data from the file ','line_number':142,'multiline':True]['text':' If file-chunking is enabled, load the rest of the file as more samples ','line_number':153,'multiline':True]['text':' buffer is full ','line_number':157,'multiline':True]['text':' DiB_shuffle() :
 * shuffle a table of file names in a semi-random way
 * It improves dictionary quality by reducing "locality" impact, so if sample set is very large,
 * it will load random elements from it, instead of just the first ones. ','line_number':193,'multiline':True]['text':'-********************************************************
*  Dictionary training functions
*********************************************************','line_number':211,'multiline':True]['text':'! DiB_fileStats() :
 *  Given a list of files, and a chunkSize (0 == no chunk, whole files)
 *  provides the amount of data to be loaded and the resulting nb of samples.
 *  This is useful primarily for allocation purpose => sample buffer, and sample sizes table.
 ','line_number':266,'multiline':True]['text':' We assume that if chunking is requested, the chunk size is < SAMPLESIZE_MAX ','line_number':277,'multiline':True]['text':' TODO: is there a minimum sample size? What if the file is 1-byte? ','line_number':282,'multiline':True]['text':' the case where we are breaking up files in sample chunks ','line_number':288,'multiline':True]['text':' TODO: is there a minimum sample size? Can we have a 1-byte sample? ','line_number':290,'multiline':True]['text':' the case where one file is one sample ','line_number':295,'multiline':True]['text':' flag excessively large sample files ','line_number':297,'multiline':True]['text':' Limit to the first SAMPLESIZE_MAX (128kB) of the file ','line_number':300,'multiline':True]['text':' vector of sample sizes. Each sample can be up to SAMPLESIZE_MAX ','line_number':318,'multiline':True]['text':' nb of samples effectively loaded in srcBuffer ','line_number':319,'multiline':True]['text':' total data loaded in srcBuffer for all samples ','line_number':320,'multiline':True]['text':' contiguous buffer with training data/samples ','line_number':321,'multiline':True]['text':' Shuffle input files before we start assessing how much sample datA to load.
       The purpose of the shuffle is to pick random samples when the sample
       set is larger than what we can load in memory. ','line_number':329,'multiline':True]['text':' Figure out how much sample data to load with how many samples ','line_number':335,'multiline':True]['text':' Limit the size of the training data to the free memory ','line_number':343,'multiline':True]['text':' Limit the size of the training data to 2GB ','line_number':344,'multiline':True]['text':' TODO: there is opportunity to stop DiB_fileStats() early when the data limit is reached ','line_number':345,'multiline':True]['text':' Checks ','line_number':356,'multiline':True]['text':' should not happen ','line_number':358,'multiline':True]['text':' we now clearly forbid this case ','line_number':368,'multiline':True]['text':' init ','line_number':375,'multiline':True]['text':' Load input buffer ','line_number':381,'multiline':True]['text':' guard band, for end of buffer condition ','line_number':388,'multiline':True]['text':' Impossible ','line_number':422,'multiline':True]['text':' should not happen ','line_number':425,'multiline':True]['text':' save dict ','line_number':429,'multiline':True]['text':' clean up ','line_number':434,'multiline':True]