['text':' gzlib.c contains minimal changes required to be compiled with zlibWrapper:
 * - gz_statep was converted to union to work with -Wstrict-aliasing=1      ','line_number':1,'multiline':True]['text':' gzlib.c -- zlib functions common to reading and writing gzip files
 * Copyright (C) 2004-2017 Mark Adler
 * For conditions of distribution and use, see https://www.zlib.net/zlib_license.html
 ','line_number':4,'multiline':True]['text':' Local functions ','line_number':21,'multiline':True]['text':' Map the Windows error number in ERROR to a locale-dependent error message
   string and return a pointer to it.  Typically, the values for ERROR come
   from GetLastError.

   The string pointed to shall not be modified by the application, but may be
   overwritten by a subsequent call to gz_strwinerror

   The gz_strwinerror function does not change the current setting of
   GetLastError. ','line_number':27,'multiline':True]['text':' Default language ','line_number':47,'multiline':True]['text':' If there is an \r\n appended, zap it.  ','line_number':52,'multiline':True]['text':' UNDER_CE ','line_number':75,'multiline':True]['text':' Reset gzip file state ','line_number':77,'multiline':True]['text':' no output data available ','line_number':81,'multiline':True]['text':' for reading ... ','line_number':82,'multiline':True]['text':' not at end of file ','line_number':83,'multiline':True]['text':' have not read past end yet ','line_number':84,'multiline':True]['text':' look for gzip header ','line_number':85,'multiline':True]['text':' no seek request pending ','line_number':87,'multiline':True]['text':' clear error ','line_number':88,'multiline':True]['text':' no uncompressed data yet ','line_number':89,'multiline':True]['text':' no input data yet ','line_number':90,'multiline':True]['text':' Open a gzip file either by name or file descriptor. ','line_number':93,'multiline':True]['text':' check input ','line_number':109,'multiline':True]['text':' allocate gzFile structure to return ','line_number':113,'multiline':True]['text':' no buffers allocated yet ','line_number':117,'multiline':True]['text':' requested buffer size ','line_number':118,'multiline':True]['text':' no error message yet ','line_number':119,'multiline':True]['text':' interpret mode ','line_number':121,'multiline':True]['text':' can't read and write at the same time ','line_number':142,'multiline':True]['text':' ignore -- will request binary anyway ','line_number':145,'multiline':True]['text':' could consider as an error, but just ignore ','line_number':172,'multiline':True]['text':' must provide an "r", "w", or "a" ','line_number':178,'multiline':True]['text':' can't force transparent read ','line_number':184,'multiline':True]['text':' for empty file ','line_number':190,'multiline':True]['text':' save the path name for error messages ','line_number':193,'multiline':True]['text':' compute the flags for open() ','line_number':222,'multiline':True]['text':' open the file with the appropriate flags (or just use fd) ','line_number':243,'multiline':True]['text':' so gzoffset() is correct ','line_number':255,'multiline':True]['text':' simplify later checks ','line_number':256,'multiline':True]['text':' save the current position for rewinding (only if reading) ','line_number':259,'multiline':True]['text':' initialize stream ','line_number':265,'multiline':True]['text':' return stream ','line_number':268,'multiline':True]['text':' -- see zlib.h -- ','line_number':272,'multiline':True]['text':' -- see zlib.h -- ','line_number':280,'multiline':True]['text':' -- see zlib.h -- ','line_number':288,'multiline':True]['text':' identifier for error messages ','line_number':293,'multiline':True]['text':' for debugging ','line_number':301,'multiline':True]['text':' -- see zlib.h -- ','line_number':308,'multiline':True]['text':' -- see zlib.h -- ','line_number':318,'multiline':True]['text':' get internal structure and check integrity ','line_number':325,'multiline':True]['text':' make sure we haven't already allocated memory ','line_number':332,'multiline':True]['text':' check and set requested size ','line_number':336,'multiline':True]['text':' need to be able to double it ','line_number':338,'multiline':True]['text':' need two bytes to check magic header ','line_number':340,'multiline':True]['text':' -- see zlib.h -- ','line_number':345,'multiline':True]['text':' get internal structure ','line_number':351,'multiline':True]['text':' check that we're reading and that there's no error ','line_number':356,'multiline':True]['text':' back up and start over ','line_number':361,'multiline':True]['text':' -- see zlib.h -- ','line_number':368,'multiline':True]['text':' get internal structure and check integrity ','line_number':378,'multiline':True]['text':' check that there's no error ','line_number':385,'multiline':True]['text':' can only seek from start or relative to current position ','line_number':389,'multiline':True]['text':' normalize offset to a SEEK_CUR specification ','line_number':393,'multiline':True]['text':' if within raw area while reading, just go there ','line_number':400,'multiline':True]['text':' calculate skip amount, rewinding if needed for back seek when reading ','line_number':416,'multiline':True]['text':' writing -- can't go backwards ','line_number':418,'multiline':True]['text':' before start of file! ','line_number':421,'multiline':True]['text':' rewind, then skip to offset ','line_number':423,'multiline':True]['text':' if reading, skip what's in output buffer (one less gzgetc() check) ','line_number':427,'multiline':True]['text':' request skip (if not zero) ','line_number':437,'multiline':True]['text':' -- see zlib.h -- ','line_number':445,'multiline':True]['text':' -- see zlib.h -- ','line_number':457,'multiline':True]['text':' get internal structure and check integrity ','line_number':463,'multiline':True]['text':' return position ','line_number':470,'multiline':True]['text':' -- see zlib.h -- ','line_number':474,'multiline':True]['text':' -- see zlib.h -- ','line_number':484,'multiline':True]['text':' get internal structure and check integrity ','line_number':491,'multiline':True]['text':' compute and return effective offset in file ','line_number':498,'multiline':True]['text':' reading ','line_number':502,'multiline':True]['text':' don't count buffered input ','line_number':503,'multiline':True]['text':' -- see zlib.h -- ','line_number':507,'multiline':True]['text':' -- see zlib.h -- ','line_number':517,'multiline':True]['text':' get internal structure and check integrity ','line_number':523,'multiline':True]['text':' return end-of-file state ','line_number':530,'multiline':True]['text':' -- see zlib.h -- ','line_number':534,'multiline':True]['text':' get internal structure and check integrity ','line_number':541,'multiline':True]['text':' return error information ','line_number':548,'multiline':True]['text':' -- see zlib.h -- ','line_number':555,'multiline':True]['text':' get internal structure and check integrity ','line_number':561,'multiline':True]['text':' clear error and end-of-file ','line_number':568,'multiline':True]['text':' Create an error message in allocated memory and set state.state->err and
   state.state->msg accordingly.  Free any previous error message already there.  Do
   not try to free or allocate space if the error is Z_MEM_ERROR (out of
   memory).  Simply save the error message as a static string.  If there is an
   allocation failure constructing the error message, then convert the error to
   out of memory. ','line_number':576,'multiline':True]['text':' free previously allocated message and clear ','line_number':587,'multiline':True]['text':' if fatal, set state.state->x.have to 0 so that the gzgetc() macro fails ','line_number':594,'multiline':True]['text':' set error code, and if no message, then done ','line_number':598,'multiline':True]['text':' for an out of memory error, return literal string when requested ','line_number':603,'multiline':True]['text':' construct error message with path ','line_number':607,'multiline':True]['text':' portably return maximum value for an int (when limits.h presumed not
   available) -- we need to do this to cover cases where 2's complement not
   used, since C standard permits 1's complement and sign-bit representations,
   otherwise we could just use ((unsigned)-1) >> 1 ','line_number':624,'multiline':True]