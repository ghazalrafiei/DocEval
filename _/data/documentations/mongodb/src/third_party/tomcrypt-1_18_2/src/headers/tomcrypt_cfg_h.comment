['text':' LibTomCrypt, modular cryptographic library -- Tom St Denis
 *
 * LibTomCrypt is a library that provides various cryptographic
 * algorithms in a highly modular and flexible manner.
 *
 * The library is free for all purposes without any express
 * guarantee it works.
 ','line_number':1,'multiline':True]['text':' This is the build config file.
 *
 * With this you can setup what to inlcude/exclude automatically during any build.  Just comment
 * out the line that #define's the word for the thing you want to remove.  phew!
 ','line_number':10,'multiline':True]['text':' certain platforms use macros for these, making the prototypes broken ','line_number':29,'multiline':True]['text':' you can change how memory allocation works ... ','line_number':32,'multiline':True]['text':' change the clock function too ','line_number':41,'multiline':True]['text':' various other functions ','line_number':44,'multiline':True]['text':' some compilers do not like "inline" (or maybe "static inline"), namely: HP cc, IBM xlc ','line_number':53,'multiline':True]['text':' type of argument checking, 0=default, 1=fatal and 2=error+continue, 3=nothing ','line_number':62,'multiline':True]['text':' Controls endianess and size of registers.  Leave uncommented to get platform neutral [slower] code
 *
 * Note: in order to use the optimized macros your platform must support unaligned 32 and 64 bit read/writes.
 * The x86 platforms allow this but some others [ARM for instance] do not.  On those platforms you **MUST**
 * use the portable [slower] macros.
 ','line_number':72,'multiline':True]['text':' detect x86/i386 32bit ','line_number':78,'multiline':True]['text':' detect amd64/x64 ','line_number':85,'multiline':True]['text':' detect PPC32 ','line_number':92,'multiline':True]['text':' detects MIPS R5900 processors (PS2) ','line_number':99,'multiline':True]['text':' detect AIX ','line_number':109,'multiline':True]['text':' detect HP-UX ','line_number':119,'multiline':True]['text':' detect Apple OS X ','line_number':129,'multiline':True]['text':' detect SPARC and SPARC64 ','line_number':143,'multiline':True]['text':' detect IBM S390(x) ','line_number':153,'multiline':True]['text':' detect PPC64 ','line_number':163,'multiline':True]['text':' endianness fallback ','line_number':174,'multiline':True]['text':' ulong64: 64-bit data type ','line_number':195,'multiline':True]['text':' ulong32: "32-bit at least" data type ','line_number':204,'multiline':True]['text':' No asm is a quick way to disable anything "not portable" ','line_number':228,'multiline':True]['text':' No LTC_FAST if: explicitly disabled OR non-gcc/non-clang compiler OR old gcc OR using -ansi -std=c99 ','line_number':238,'multiline':True]['text':' gcc 4.3 and up has a bswap builtin; detect it by gcc version.
 * clang also supports the bswap builtin, and although clang pretends
 * to be gcc (macro-wise, anyway), clang pretends to be a version
 * prior to gcc 4.3, so we can't detect bswap that way.  Instead,
 * clang has a __has_builtin mechanism that can be used to check
 * for builtins:
 * http://clang.llvm.org/docs/LanguageExtensions.html#feature_check ','line_number':264,'multiline':True]['text':' ref:         HEAD -> master, tag: v1.18.2 ','line_number':281,'multiline':True]['text':' git commit:  7e7eb695d581782f04b24dc444cbfde86af59853 ','line_number':282,'multiline':True]['text':' commit time: 2018-07-01 22:49:01 +0200 ','line_number':283,'multiline':True]