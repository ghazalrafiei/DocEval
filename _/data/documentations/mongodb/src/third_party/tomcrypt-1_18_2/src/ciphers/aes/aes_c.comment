['text':' LibTomCrypt, modular cryptographic library -- Tom St Denis
 *
 * LibTomCrypt is a library that provides various cryptographic
 * algorithms in a highly modular and flexible manner.
 *
 * The library is free for all purposes without any express
 * guarantee it works.
 ','line_number':1,'multiline':True]['text':' AES implementation by Tom St Denis
 *
 * Derived from the Public Domain source code by

---
  * rijndael-alg-fst.c
  *
  * @version 3.0 (December 2000)
  *
  * Optimised ANSI C code for the Rijndael cipher (now AES)
  *
  * @author Vincent Rijmen <vincent.rijmen@esat.kuleuven.ac.be>
  * @author Antoon Bosselaers <antoon.bosselaers@esat.kuleuven.ac.be>
  * @author Paulo Barreto <paulo.barreto@terra.com.br>
---
 ','line_number':10,'multiline':True]['text':'*
  @file aes.c
  Implementation of AES
','line_number':26,'multiline':True]['text':'*
    Initialize the AES (Rijndael) block cipher
    @param key The symmetric key you wish to pass
    @param keylen The key length in bytes
    @param num_rounds The number of rounds desired (0 for default)
    @param skey The key in as scheduled by this function.
    @return CRYPT_OK if successful
 ','line_number':112,'multiline':True]['text':' setup the forward key ','line_number':140,'multiline':True]['text':' this can't happen ','line_number':205,'multiline':True]['text':' coverity[dead_error_line] ','line_number':206,'multiline':True]['text':' setup the inverse key now ','line_number':211,'multiline':True]['text':' apply the inverse MixColumn transform to all round keys but the first and the last: ','line_number':215,'multiline':True]['text':' copy first ','line_number':216,'multiline':True]['text':' copy last ','line_number':264,'multiline':True]['text':' ENCRYPT_ONLY ','line_number':271,'multiline':True]['text':'*
  Encrypts a block of text with AES
  @param pt The input plaintext (16 bytes)
  @param ct The output ciphertext (16 bytes)
  @param skey The key as scheduled
  @return CRYPT_OK if successful
','line_number':276,'multiline':True]['text':'
     * map byte array block to cipher state
     * and add initial round key:
     ','line_number':299,'multiline':True]['text':'
     * Nr - 1 full rounds:
     ','line_number':345,'multiline':True]['text':'
     * apply last round and
     * map cipher state to byte array block:
     ','line_number':408,'multiline':True]['text':'*
  Decrypts a block of text with AES
  @param ct The input ciphertext (16 bytes)
  @param pt The output plaintext (16 bytes)
  @param skey The key as scheduled
  @return CRYPT_OK if successful
','line_number':455,'multiline':True]['text':'
     * map byte array block to cipher state
     * and add initial round key:
     ','line_number':478,'multiline':True]['text':'
     * Nr - 1 full rounds:
     ','line_number':523,'multiline':True]['text':'
     * apply last round and
     * map cipher state to byte array block:
     ','line_number':587,'multiline':True]['text':'*
  Performs a self-test of the AES block cipher
  @return CRYPT_OK if functional, CRYPT_NOP if self-test has been disabled
','line_number':633,'multiline':True]['text':' now see if we can encrypt all zero bytes 1000 times, decrypt and come back where we started ','line_number':693,'multiline':True]['text':' ENCRYPT_ONLY ','line_number':703,'multiline':True]['text':'* Terminate the context
   @param skey    The scheduled key
','line_number':706,'multiline':True]['text':'*
  Gets suitable key size
  @param keysize [in/out] The length of the recommended key (in bytes).  This function will store the suitable size back in this variable.
  @return CRYPT_OK if the input key size is acceptable.
','line_number':715,'multiline':True]['text':' ref:         HEAD -> master, tag: v1.18.2 ','line_number':741,'multiline':True]['text':' git commit:  7e7eb695d581782f04b24dc444cbfde86af59853 ','line_number':742,'multiline':True]['text':' commit time: 2018-07-01 22:49:01 +0200 ','line_number':743,'multiline':True]