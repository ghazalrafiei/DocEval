['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' A template class for tagged unions. ','line_number':7,'multiline':True]['text':' namespace IPC','line_number':25,'multiline':False]['text':' namespace ipc','line_number':32,'multiline':False]['text':' Nth<N, types...>::Type is the Nth type (0-based) in the list of types Ts.','line_number':39,'multiline':False]['text':'/ SelectVariantTypeHelper is used in the implementation of SelectVariantType.','line_number':53,'multiline':False]['text':'*
 * SelectVariantType takes a type T and a list of variant types Variants and
 * yields a type Type, selected from Variants, that can store a value of type T
 * or a reference to type T. If no such type was found, Type is not defined.
 * SelectVariantType also has a `count` member that contains the total number of
 * selectable types (which will be used to check that a requested type is not
 * ambiguously present twice.)
 ','line_number':94,'multiline':True]['text':' Compute a fast, compact type that can be used to hold integral values that','line_number':107,'multiline':False]['text':' distinctly map to every type in Ts.','line_number':108,'multiline':False]['text':' stop caring past a certain','line_number':118,'multiline':False]['text':' point :-)','line_number':119,'multiline':False]['text':' TagHelper gets the given sentinel tag value for the given type T. This has to','line_number':123,'multiline':False]['text':' be split out from VariantImplementation because you can't nest a partial','line_number':124,'multiline':False]['text':' template specialization within a template class.','line_number':125,'multiline':False]['text':' In the case where T != U, we continue recursion.','line_number':131,'multiline':False]['text':' In the case where T == U, return the tag number.','line_number':137,'multiline':False]['text':' The VariantImplementation template provides the guts of mozilla::Variant.  We','line_number':143,'multiline':False]['text':' create a VariantImplementation for each T in Ts... which handles','line_number':144,'multiline':False]['text':' construction, destruction, etc for when the Variant's type is T.  If the','line_number':145,'multiline':False]['text':' Variant's type isn't T, it punts the request on to the next','line_number':146,'multiline':False]['text':' VariantImplementation.','line_number':147,'multiline':False]['text':' The singly typed Variant / recursion base case.','line_number':152,'multiline':False]['text':' VariantImplementation for some variant type T.','line_number':208,'multiline':False]['text':' The next recursive VariantImplementation.','line_number':211,'multiline':False]['text':' If you're seeing compilation errors here like "no matching','line_number':270,'multiline':False]['text':' function for call to 'match'" then that means that the','line_number':271,'multiline':False]['text':' Matcher doesn't exhaust all variant types. There must exist a','line_number':272,'multiline':False]['text':' Matcher::operator()(T&) for every variant type T.','line_number':273,'multiline':False]['text':'','line_number':274,'multiline':False]['text':' If you're seeing compilation errors here like "cannot initialize','line_number':275,'multiline':False]['text':' return object of type <...> with an rvalue of type <...>" then that','line_number':276,'multiline':False]['text':' means that the Matcher::operator()(T&) overloads are returning','line_number':277,'multiline':False]['text':' different types. They must all return the same type.','line_number':278,'multiline':False]['text':' If you're seeing compilation errors here like "no matching','line_number':313,'multiline':False]['text':' function for call to 'match'" then that means that the','line_number':314,'multiline':False]['text':' Matchers don't exhaust all variant types. There must exist a','line_number':315,'multiline':False]['text':' Matcher (with its operator()(T&)) for every variant type T, in the','line_number':316,'multiline':False]['text':' exact same order.','line_number':317,'multiline':False]['text':'*
 * AsVariantTemporary stores a value of type T to allow construction of a
 * Variant value via type inference. Because T is copied and there's no
 * guarantee that the copy can be elided, AsVariantTemporary is best used with
 * primitive or very small types.
 ','line_number':324,'multiline':True]['text':' namespace detail','line_number':350,'multiline':False]['text':' Used to unambiguously specify one of the Variant's type.','line_number':352,'multiline':False]['text':' Used to specify one of the Variant's type by index.','line_number':358,'multiline':False]['text':'*
 * # mozilla::Variant
 *
 * A variant / tagged union / heterogenous disjoint union / sum-type template
 * class. Similar in concept to (but not derived from) `boost::variant`.
 *
 * Sometimes, you may wish to use a C union with non-POD types. However, this is
 * forbidden in C++ because it is not clear which type in the union should have
 * its constructor and destructor run on creation and deletion
 * respectively. This is the problem that `mozilla::Variant` solves.
 *
 * ## Usage
 *
 * A `mozilla::Variant` instance is constructed (via move or copy) from one of
 * its variant types (ignoring const and references). It does *not* support
 * construction from subclasses of variant types or types that coerce to one of
 * the variant types.
 *
 *     Variant<char, uint32_t> v1('a');
 *     Variant<UniquePtr<A>, B, C> v2(MakeUnique<A>());
 *     Variant<bool, char> v3(VariantType<char>, 0); // disambiguation needed
 *     Variant<int, int> v4(VariantIndex<1>, 0); // 2nd int
 *
 * Because specifying the full type of a Variant value is often verbose,
 * there are two easier ways to construct values:
 *
 * A. AsVariant() can be used to construct a Variant value using type inference
 * in contexts such as expressions or when returning values from functions.
 * Because AsVariant() must copy or move the value into a temporary and this
 * cannot necessarily be elided by the compiler, it's mostly appropriate only
 * for use with primitive or very small types.
 *
 *     Variant<char, uint32_t> Foo() { return AsVariant('x'); }
 *     // ...
 *     Variant<char, uint32_t> v1 = Foo();  // v1 holds char('x').
 *
 * B. Brace-construction with VariantType or VariantIndex; this also allows
 * in-place construction with any number of arguments.
 *
 *     struct AB { AB(int, int){...} };
 *     static Variant<AB, bool> foo()
 *     {
 *       return {VariantIndex<0>{}, 1, 2};
 *     }
 *     // ...
 *     Variant<AB, bool> v0 = Foo();  // v0 holds AB(1,2).
 *
 * All access to the contained value goes through type-safe accessors.
 * Either the stored type, or the type index may be provided.
 *
 *     void
 *     Foo(Variant<A, B, C> v)
 *     {
 *       if (v.is<A>()) {
 *         A& ref = v.as<A>();
 *         ...
 *       } else (v.is<1>()) { // Instead of v.is<B>.
 *         ...
 *       } else {
 *         ...
 *       }
 *     }
 *
 * In some situation, a Variant may be constructed from templated types, in
 * which case it is possible that the same type could be given multiple times by
 * an external developer. Or seemingly-different types could be aliases.
 * In this case, repeated types can only be accessed through their index, to
 * prevent ambiguous access by type.
 *
 *    // Bad!
 *    template <typename T>
 *    struct ResultOrError
 *    {
 *      Variant<T, int> m;
 *      ResultOrError() : m(int(0)) {} // Error '0' by default
 *      ResultOrError(const T& r) : m(r) {}
 *      bool IsResult() const { return m.is<T>(); }
 *      bool IsError() const { return m.is<int>(); }
 *    };
 *    // Now instantiante with the result being an int too:
 *    ResultOrError<int> myResult(123); // Fail!
 *    // In Variant<int, int>, which 'int' are we refering to, from inside
 *    // ResultOrError functions?
 *
 *    // Good!
 *    template <typename T>
 *    struct ResultOrError
 *    {
 *      Variant<T, int> m;
 *      ResultOrError() : m(VariantIndex<1>{}, 0) {} // Error '0' by default
 *      ResultOrError(const T& r) : m(VariantIndex<0>{}, r) {}
 *      bool IsResult() const { return m.is<0>(); } // 0 -> T
 *      bool IsError() const { return m.is<1>(); } // 1 -> int
 *    };
 *    // Now instantiante with the result being an int too:
 *    ResultOrError<int> myResult(123); // It now works!
 *
 * Attempting to use the contained value as type `T1` when the `Variant`
 * instance contains a value of type `T2` causes an assertion failure.
 *
 *     A a;
 *     Variant<A, B, C> v(a);
 *     v.as<B>(); // <--- Assertion failure!
 *
 * Trying to use a `Variant<Ts...>` instance as some type `U` that is not a
 * member of the set of `Ts...` is a compiler error.
 *
 *     A a;
 *     Variant<A, B, C> v(a);
 *     v.as<SomeRandomType>(); // <--- Compiler error!
 *
 * Additionally, you can turn a `Variant` that `is<T>` into a `T` by moving it
 * out of the containing `Variant` instance with the `extract<T>` method:
 *
 *     Variant<UniquePtr<A>, B, C> v(MakeUnique<A>());
 *     auto ptr = v.extract<UniquePtr<A>>();
 *
 * Finally, you can exhaustively match on the contained variant and branch into
 * different code paths depending on which type is contained. This is preferred
 * to manually checking every variant type T with is<T>() because it provides
 * compile-time checking that you handled every type, rather than runtime
 * assertion failures.
 *
 *     // Bad!
 *     char* foo(Variant<A, B, C, D>& v) {
 *       if (v.is<A>()) {
 *         return ...;
 *       } else if (v.is<B>()) {
 *         return ...;
 *       } else {
 *         return doSomething(v.as<C>()); // Forgot about case D!
 *       }
 *     }
 *
 *     // Instead, a single function object (that can deal with all possible
 *     // options) may be provided:
 *     struct FooMatcher
 *     {
 *       // The return type of all matchers must be identical.
 *       char* operator()(A& a) { ... }
 *       char* operator()(B& b) { ... }
 *       char* operator()(C& c) { ... }
 *       char* operator()(D& d) { ... } // Compile-time error to forget D!
 *     }
 *     char* foo(Variant<A, B, C, D>& v) {
 *       return v.match(FooMatcher());
 *     }
 *
 *     // In some situations, a single generic lambda may also be appropriate:
 *     char* foo(Variant<A, B, C, D>& v) {
 *       return v.match([](auto&) {...});
 *     }
 *
 *     // Alternatively, multiple function objects may be provided, each one
 *     // corresponding to an option, in the same order:
 *     char* foo(Variant<A, B, C, D>& v) {
 *       return v.match([](A&) { ... },
 *                      [](B&) { ... },
 *                      [](C&) { ... },
 *                      [](D&) { ... });
 *     }
 *
 *     // In rare cases, the index of the currently-active alternative is
 *     // needed, it may be obtained by adding a first parameter in the matcner
 *     // callback, which will receive the index in its most compact type (just
 *     // use `size_t` if the exact type is not important), e.g.:
 *     char* foo(Variant<A, B, C, D>& v) {
 *       return v.match([](auto aIndex, auto& aAlternative) {...});
 *       // --OR--
 *       return v.match([](size_t aIndex, auto& aAlternative) {...});
 *     }
 *
 * ## Examples
 *
 * A tree is either an empty leaf, or a node with a value and two children:
 *
 *     struct Leaf { };
 *
 *     template<typename T>
 *     struct Node
 *     {
 *       T value;
 *       Tree<T>* left;
 *       Tree<T>* right;
 *     };
 *
 *     template<typename T>
 *     using Tree = Variant<Leaf, Node<T>>;
 *
 * A copy-on-write string is either a non-owning reference to some existing
 * string, or an owning reference to our copy:
 *
 *     class CopyOnWriteString
 *     {
 *       Variant<const char*, UniquePtr<char[]>> string;
 *
 *       ...
 *     };
 *
 * Because Variant must be aligned suitable to hold any value stored within it,
 * and because |alignas| requirements don't affect platform ABI with respect to
 * how parameters are laid out in memory, Variant can't be used as the type of a
 * function parameter.  Pass Variant to functions by pointer or reference
 * instead.
 ','line_number':364,'multiline':True]['text':' Raw storage for the contained variant value.','line_number':580,'multiline':False]['text':' Each type is given a unique tag value that lets us keep track of the','line_number':583,'multiline':False]['text':' contained variant value's type.','line_number':584,'multiline':False]['text':' Some versions of GCC treat it as a -Wstrict-aliasing violation (ergo a','line_number':587,'multiline':False]['text':' -Werror compile error) to reinterpret_cast<> |rawData| to |T*|, even','line_number':588,'multiline':False]['text':' through |void*|.  Placing the latter cast in these separate functions','line_number':589,'multiline':False]['text':' breaks the chain such that affected GCC versions no longer warn/error.','line_number':590,'multiline':False]['text':'* Perfect forwarding construction for some variant type T. ','line_number':596,'multiline':True]['text':' RefT captures both const& as well as && (as intended, to support','line_number':598,'multiline':False]['text':' perfect forwarding), so we have to remove those qualifiers here','line_number':599,'multiline':False]['text':' when ensuring that T is a variant of this type, and getting T's','line_number':600,'multiline':False]['text':' tag, etc.','line_number':601,'multiline':False]['text':'*
   * Perfect forwarding construction for some variant type T, by
   * explicitly giving the type.
   * This is necessary to construct from any number of arguments,
   * or to convert from a type that is not in the Variant's type list.
   ','line_number':610,'multiline':True]['text':'*
   * Perfect forwarding construction for some variant type T, by
   * explicitly giving the type index.
   * This is necessary to construct from any number of arguments,
   * or to convert from a type that is not in the Variant's type list,
   * or to construct a type that is present more than once in the Variant.
   ','line_number':622,'multiline':True]['text':'*
   * Constructs this Variant from an AsVariantTemporary<T> such that T can be
   * stored in one of the types allowable in this Variant. This is used in the
   * implementation of AsVariant().
   ','line_number':635,'multiline':True]['text':'* Copy construction. ','line_number':651,'multiline':True]['text':'* Move construction. ','line_number':656,'multiline':True]['text':'* Copy assignment. ','line_number':661,'multiline':True]['text':'* Move assignment. ','line_number':669,'multiline':True]['text':'* Move assignment from AsVariant(). ','line_number':677,'multiline':True]['text':'* Check which variant type is currently contained. ','line_number':707,'multiline':True]['text':'*
   * Operator == overload that defers to the variant type's operator==
   * implementation if the rhs is tagged as the same type as this one.
   ','line_number':723,'multiline':True]['text':'*
   * Operator != overload that defers to the negation of the variant type's
   * operator== implementation if the rhs is tagged as the same type as this
   * one.
   ','line_number':731,'multiline':True]['text':' Accessors for working with the contained variant value.','line_number':738,'multiline':False]['text':'* Mutable lvalue-reference. ','line_number':740,'multiline':True]['text':'* Immutable const lvalue-reference. ','line_number':758,'multiline':True]['text':'* Mutable rvalue-reference. ','line_number':775,'multiline':True]['text':'* Immutable const rvalue-reference. ','line_number':794,'multiline':True]['text':'*
   * Extract the contained variant value from this container into a temporary
   * value.  On completion, the value in the variant will be in a
   * safely-destructible state, as determined by the behavior of T's move
   * constructor when provided the variant's internal value.
   ','line_number':812,'multiline':True]['text':' Exhaustive matching of all variant types on the contained value.','line_number':835,'multiline':False]['text':'* Match on an immutable const lvalue-reference. ','line_number':837,'multiline':True]['text':'* Match on a mutable non-const lvalue-reference. ','line_number':849,'multiline':True]['text':'* Match on an immutable const rvalue-reference. ','line_number':861,'multiline':True]['text':'* Match on a mutable non-const rvalue-reference. ','line_number':873,'multiline':True]['text':'*
   * Incorporate the current variant's tag into hashValue.
   * Note that this does not hash the actual contents; you must take
   * care of that yourself, perhaps by using a match.
   ','line_number':885,'multiline':True]['text':'
 * AsVariant() is used to construct a Variant<T,...> value containing the
 * provided T value using type inference. It can be used to construct Variant
 * values in expressions or return them from functions without specifying the
 * entire Variant type.
 *
 * Because AsVariant() must copy or move the value into a temporary and this
 * cannot necessarily be elided by the compiler, it's mostly appropriate only
 * for use with primitive or very small types.
 *
 * AsVariant() returns a AsVariantTemporary value which is implicitly
 * convertible to any Variant that can hold a value of type T.
 ','line_number':908,'multiline':True]['text':' namespace mozilla','line_number':926,'multiline':False]['text':' mozilla_Variant_h ','line_number':928,'multiline':True]