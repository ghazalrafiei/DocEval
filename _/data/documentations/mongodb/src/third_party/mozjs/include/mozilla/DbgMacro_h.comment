['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' a MOZ_DBG macro that outputs a wrapped value to stderr then returns it ','line_number':10,'multiline':True]['text':' Predicate to check whether T can be inserted into an ostream.','line_number':29,'multiline':False]['text':' namespace detail','line_number':38,'multiline':False]['text':' Helper function to write a value to an ostream.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' This handles pointer values where the type being pointed to supports being','line_number':42,'multiline':False]['text':' inserted into an ostream, and we write out the value being pointed to in','line_number':43,'multiline':False]['text':' addition to the pointer value.','line_number':44,'multiline':False]['text':' Helper function to write a value to an ostream.','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' This handles all pointer types that cannot be dereferenced and inserted into','line_number':58,'multiline':False]['text':' an ostream.','line_number':59,'multiline':False]['text':' Helper function to write a value to an ostream.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' This handles XPCOM string types.','line_number':69,'multiline':False]['text':' Helper function to write a value to an ostream.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' This handles all other types.','line_number':80,'multiline':False]['text':' Helper function template for MOZ_DBG.','line_number':91,'multiline':False]['text':' namespace detail','line_number':107,'multiline':False]['text':' namespace mozilla','line_number':109,'multiline':False]['text':' Don't define this for char[], since operator<<(ostream&, char*) is already','line_number':124,'multiline':False]['text':' defined.','line_number':125,'multiline':False]['text':' MOZ_DBG is a macro like the Rust dbg!() macro -- it will print out the','line_number':132,'multiline':False]['text':' expression passed to it to stderr and then return the value.  It is not','line_number':133,'multiline':False]['text':' available in MOZILLA_OFFICIAL builds, so you shouldn't land any uses of it in','line_number':134,'multiline':False]['text':' the tree.','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':' It should work for any type T that has an operator<<(std::ostream&, const T&)','line_number':137,'multiline':False]['text':' defined for it.','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' Note 1: Using MOZ_DBG may cause copies to be made of temporary values:','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'   struct A {','line_number':142,'multiline':False]['text':'     A(int);','line_number':143,'multiline':False]['text':'     A(const A&);','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':'     int x;','line_number':146,'multiline':False]['text':'   };','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':'   void f(A);','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':'   f(A{1});  // may (and, in C++17, will) elide the creation of a temporary','line_number':151,'multiline':False]['text':'             // for A{1} and instead initialize the function argument','line_number':152,'multiline':False]['text':'             // directly using the A(int) constructor','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':'   f(MOZ_DBG(A{1}));  // will create and return a temporary for A{1}, which','line_number':155,'multiline':False]['text':'                      // then will be passed to the A(const A&) copy','line_number':156,'multiline':False]['text':'                      // constructor to initialize f's argument','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':' Note 2: MOZ_DBG cannot be used to wrap a prvalue that is being used to','line_number':159,'multiline':False]['text':' initialize an object if its type has no move constructor:','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':'   struct B {','line_number':162,'multiline':False]['text':'     B() = default;','line_number':163,'multiline':False]['text':'     B(B&&) = delete;','line_number':164,'multiline':False]['text':'   };','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':'   B b1 = B();  // fine, initializes b1 directly','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':'   B b2 = MOZ_DBG(B());  // compile error: MOZ_DBG needs to materialize a','line_number':169,'multiline':False]['text':'                         // temporary for B() so it can be passed to','line_number':170,'multiline':False]['text':'                         // operator<<, but that temporary is returned from','line_number':171,'multiline':False]['text':'                         // MOZ_DBG as an rvalue reference and so wants to','line_number':172,'multiline':False]['text':'                         // invoke B's move constructor to initialize b2','line_number':173,'multiline':False]['text':' Helper macro for MOZ_DEFINE_DBG.','line_number':179,'multiline':False]['text':' Macro to define an operator<<(ostream&) for a struct or class that displays','line_number':182,'multiline':False]['text':' the type name and the values of the specified member variables.  Must be','line_number':183,'multiline':False]['text':' called inside the struct or class.','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':' For example:','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':'   struct Point {','line_number':188,'multiline':False]['text':'     float x;','line_number':189,'multiline':False]['text':'     float y;','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':'     MOZ_DEFINE_DBG(Point, x, y)','line_number':192,'multiline':False]['text':'   };','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' generates an operator<< that outputs strings like','line_number':195,'multiline':False]['text':' "Point { x = 1.0, y = 2.0 }".','line_number':196,'multiline':False]['text':' mozilla_DbgMacro_h','line_number':206,'multiline':False]