['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':10,'multiline':False]['text':' size_t','line_number':12,'multiline':False]['text':' uint16_t, uint32_t','line_number':13,'multiline':False]['text':' JS::CallArgs, JS::detail::CallArgsBase, JSNative','line_number':15,'multiline':False]['text':' JS::{,Mutable}Handle, JS::Rooted','line_number':16,'multiline':False]['text':' JS::Value, JSValueType','line_number':17,'multiline':False]['text':' namespace jit','line_number':25,'multiline':False]['text':' namespace js','line_number':27,'multiline':False]['text':'*
 * A class, expected to be passed by value, which represents the CallArgs for a
 * JSJitGetterOp.
 ','line_number':29,'multiline':True]['text':'*
 * A class, expected to be passed by value, which represents the CallArgs for a
 * JSJitSetterOp.
 ','line_number':47,'multiline':True]['text':' Add get() or maybe hasDefined() as needed','line_number':66,'multiline':False]['text':'*
 * A class, expected to be passed by reference, which represents the CallArgs
 * for a JSJitMethodOp.
 ','line_number':71,'multiline':True]['text':' We can't use Base::callee() because that will try to poke at','line_number':98,'multiline':False]['text':' this->usedRval_, which we don't have.','line_number':99,'multiline':False]['text':' Can just forward to Base, since it only needs the length and we','line_number':107,'multiline':False]['text':' forward that already.','line_number':108,'multiline':False]['text':'*
 * This struct contains metadata passed from the DOM to the JS Engine for JIT
 * optimizations on DOM property accessors.
 *
 * Eventually, this should be made available to general JSAPI users as *not*
 * experimental and *not* a friend API, but we're not ready to do so yet.
 ','line_number':125,'multiline':True]['text':' Must be last','line_number':141,'multiline':False]['text':' Basic types','line_number':146,'multiline':False]['text':' Only 32-bit or less','line_number':148,'multiline':False]['text':' Maybe we want to add Float sometime too','line_number':149,'multiline':False]['text':' And derived types','line_number':154,'multiline':False]['text':' Should "Primitive" use the WebIDL definition, which','line_number':156,'multiline':False]['text':' excludes string and null, or the typical JS one that includes them?','line_number':157,'multiline':False]['text':' Our sentinel value.','line_number':162,'multiline':False]['text':'*
   * An enum that describes what this getter/setter/method aliases.  This
   * determines what things can be hoisted past this call, and if this
   * call is movable what it can be hoisted past.
   ','line_number':173,'multiline':True]['text':'*
     * Alias nothing: a constant value, getting it can't affect any other
     * values, nothing can affect it.
     ','line_number':179,'multiline':True]['text':'*
     * Alias things that can modify the DOM but nothing else.  Doing the
     * call can't affect the behavior of any other function.
     ','line_number':185,'multiline':True]['text':'*
     * Alias the world.  Calling this can change arbitrary values anywhere
     * in the system.  Most things fall in this bucket.
     ','line_number':191,'multiline':True]['text':'* Must be last. ','line_number':197,'multiline':True]['text':'* A DOM static method, used for Promise wrappers ','line_number':217,'multiline':True]['text':' Additional opcode for some InlinableNative functions.','line_number':234,'multiline':False]['text':' These fields are carefully packed to take up 4 bytes.  If you need more','line_number':238,'multiline':False]['text':' bits for whatever reason, please see if you can steal bits from existing','line_number':239,'multiline':False]['text':' fields before adding more members to this structure.','line_number':240,'multiline':False]['text':'* The OpType that says what sort of function we are. ','line_number':246,'multiline':True]['text':'*
   * The alias set for this op.  This is a _minimal_ alias set; in
   * particular for a method it does not include whatever argument
   * conversions might do.  That's covered by argTypes and runtime
   * analysis of the actual argument types being passed in.
   ','line_number':249,'multiline':True]['text':'* The return type tag.  Might be JSVAL_TYPE_UNKNOWN. ','line_number':257,'multiline':True]['text':'* Is op fallible? False in setters. ','line_number':267,'multiline':True]['text':'*
   * Is op movable?  To be movable the op must
   * not AliasEverything, but even that might
   * not be enough (e.g. in cases when it can
   * throw or is explicitly not movable).
   ','line_number':270,'multiline':True]['text':'*
   * Can op be dead-code eliminated? Again, this
   * depends on whether the op can throw, in
   * addition to the alias set.
   ','line_number':278,'multiline':True]['text':' XXXbz should we have a JSValueType for the type of the member?','line_number':285,'multiline':False]['text':'*
   * True if this is a getter that can always
   * get the value from a slot of the "this" object.
   ','line_number':286,'multiline':True]['text':'*
   * True if this is a getter that can sometimes (if the slot doesn't contain
   * UndefinedValue()) get the value from a slot of the "this" object.
   ','line_number':292,'multiline':True]['text':'* True if this is an instance of JSTypedMethodJitInfo. ','line_number':298,'multiline':True]['text':'*
   * If isAlwaysInSlot or isSometimesInSlot is true,
   * the index of the slot to get the value from.
   * Otherwise 0.
   ','line_number':301,'multiline':True]['text':' We use C-style inheritance here, rather than C++ style inheritance','line_number':318,'multiline':False]['text':' because not all compilers support brace-initialization for non-aggregate','line_number':319,'multiline':False]['text':' classes. Using C++ style inheritance and constructors instead of','line_number':320,'multiline':False]['text':' brace-initialization would also force the creation of static','line_number':321,'multiline':False]['text':' constructors (on some compilers) when JSJitInfo and JSTypedMethodJitInfo','line_number':322,'multiline':False]['text':' structures are declared. Since there can be several thousand of these','line_number':323,'multiline':False]['text':' structures present and we want to have roughly equivalent performance','line_number':324,'multiline':False]['text':' across a range of compilers, we do things manually.','line_number':325,'multiline':False]['text':' For a method, a list of sets of
                                               types that the function
                                               expects.  This can be used,
                                               for example, to figure out
                                               when argument coercions can
                                               have side-effects. ','line_number':328,'multiline':True]['text':' js_experimental_JitInfo_h','line_number':336,'multiline':False]