['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JavaScript module (as in, the syntactic construct) operations. ','line_number':7,'multiline':True]['text':' uint32_t','line_number':12,'multiline':False]['text':' JS_PUBLIC_API','line_number':14,'multiline':False]['text':' JS::ReadOnlyCompileOptions','line_number':16,'multiline':False]['text':' JS::{Mutable,}Handle','line_number':17,'multiline':False]['text':' JS::Value','line_number':18,'multiline':False]['text':' namespace JS','line_number':28,'multiline':False]['text':'*
 * Get the HostResolveImportedModule hook for the runtime.
 ','line_number':39,'multiline':True]['text':'*
 * Set the HostResolveImportedModule hook for the runtime to the given function.
 ','line_number':44,'multiline':True]['text':'*
 * Get the hook for populating the import.meta metadata object.
 ','line_number':53,'multiline':True]['text':'*
 * Set the hook for populating the import.meta metadata object to the given
 * function.
 ','line_number':58,'multiline':True]['text':'*
 * Get the HostImportModuleDynamically hook for the runtime.
 ','line_number':70,'multiline':True]['text':'*
 * Set the HostImportModuleDynamically hook for the runtime to the given
 * function.
 *
 * If this hook is not set (or set to nullptr) then the JS engine will throw an
 * exception if dynamic module import is attempted.
 ','line_number':76,'multiline':True]['text':'*
 * Passed to FinishDynamicModuleImport to indicate the result of the dynamic
 * import operation.
 ','line_number':86,'multiline':True]['text':'*
 * This must be called after a dynamic import operation is complete.
 *
 * If |evaluationPromise| is rejected, the rejection reason will be used to
 * complete the user's promise.
 ','line_number':92,'multiline':True]['text':'*
 * This must be called after a dynamic import operation is complete.
 *
 * This is used so that Top Level Await functionality can be turned off
 * entirely. It will be removed in bug#1676612.
 *
 * If |status| is Failed, any pending exception on the context will be used to
 * complete the user's promise.
 ','line_number':103,'multiline':True]['text':'*
 * Parse the given source buffer as a module in the scope of the current global
 * of cx and return a source text module record.
 ','line_number':116,'multiline':True]['text':'*
 * Parse the given source buffer as a module in the scope of the current global
 * of cx and return a source text module record.  An error is reported if a
 * UTF-8 encoding error is encountered.
 ','line_number':124,'multiline':True]['text':'*
 * Set a private value associated with a source text module record.
 ','line_number':133,'multiline':True]['text':'*
 * Get the private value associated with a source text module record.
 ','line_number':139,'multiline':True]['text':'
 * Perform the ModuleInstantiate operation on the given source text module
 * record.
 *
 * This transitively resolves all module dependencies (calling the
 * HostResolveImportedModule hook) and initializes the environment record for
 * the module.
 ','line_number':144,'multiline':True]['text':'
 * Perform the ModuleEvaluate operation on the given source text module record
 * and returns a bool. A result value is returned in result and is either
 * undefined (and ignored) or a promise (if Top Level Await is enabled).
 *
 * If this module has already been evaluated, it returns the evaluation
 * promise. Otherwise, it transitively evaluates all dependences of this module
 * and then evaluates this module.
 *
 * ModuleInstantiate must have completed prior to calling this.
 ','line_number':155,'multiline':True]['text':'
 * If a module evaluation fails, unwrap the resulting evaluation promise
 * and rethrow.
 *
 * This does nothing if this module succeeds in evaluation. Otherwise, it
 * takes the reason for the module throwing, unwraps it and throws it as a
 * regular error rather than as an uncaught promise.
 *
 * ModuleEvaluate must have completed prior to calling this.
 ','line_number':170,'multiline':True]['text':'
 * Get a list of the module specifiers used by a source text module
 * record to request importation of modules.
 *
 * The result is a JavaScript array of object values.  To extract the individual
 * values use only JS::GetArrayLength and JS_GetElement with indices 0 to length
 * - 1.
 *
 * The element values are objects with the following properties:
 *  - moduleSpecifier: the module specifier string
 *  - lineNumber: the line number of the import in the source text
 *  - columnNumber: the column number of the import in the source text
 *
 * These property values can be extracted with GetRequestedModuleSpecifier() and
 * GetRequestedModuleSourcePos()
 ','line_number':183,'multiline':True]['text':'
 * Get the top-level script for a module which has not yet been executed.
 ','line_number':209,'multiline':True]['text':' namespace JS','line_number':219,'multiline':False]['text':' js_Modules_h','line_number':221,'multiline':False]