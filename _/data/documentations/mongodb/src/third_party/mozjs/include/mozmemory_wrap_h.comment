['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' This header contains #defines which tweak the names of various memory','line_number':10,'multiline':False]['text':' allocation functions.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' There are several types of functions related to memory allocation','line_number':13,'multiline':False]['text':' that are meant to be used publicly by the Gecko codebase:','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' - malloc implementation functions:','line_number':16,'multiline':False]['text':'   - malloc','line_number':17,'multiline':False]['text':'   - posix_memalign','line_number':18,'multiline':False]['text':'   - aligned_alloc','line_number':19,'multiline':False]['text':'   - calloc','line_number':20,'multiline':False]['text':'   - realloc','line_number':21,'multiline':False]['text':'   - free','line_number':22,'multiline':False]['text':'   - memalign','line_number':23,'multiline':False]['text':'   - valloc','line_number':24,'multiline':False]['text':'   - malloc_usable_size','line_number':25,'multiline':False]['text':'   - malloc_good_size','line_number':26,'multiline':False]['text':'   Some of these functions are specific to some systems, but for','line_number':27,'multiline':False]['text':'   convenience, they are treated as being cross-platform, and available','line_number':28,'multiline':False]['text':'   as such.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' - duplication functions:','line_number':31,'multiline':False]['text':'   - strndup','line_number':32,'multiline':False]['text':'   - strdup','line_number':33,'multiline':False]['text':'   - wcsdup (Windows only)','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' - jemalloc specific functions:','line_number':36,'multiline':False]['text':'   - jemalloc_stats','line_number':37,'multiline':False]['text':'   - jemalloc_purge_freed_pages','line_number':38,'multiline':False]['text':'   - jemalloc_free_dirty_pages','line_number':39,'multiline':False]['text':'   - jemalloc_thread_local_arena','line_number':40,'multiline':False]['text':'   - jemalloc_ptr_info','line_number':41,'multiline':False]['text':'   (these functions are native to mozjemalloc)','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' These functions are all exported as part of libmozglue (see','line_number':44,'multiline':False]['text':' $(topsrcdir)/mozglue/build/Makefile.in), with a few implementation','line_number':45,'multiline':False]['text':' peculiarities:','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' - On Windows, the malloc implementation functions are all prefixed with','line_number':48,'multiline':False]['text':'   "je_", the duplication functions are prefixed with "wrap_", and jemalloc','line_number':49,'multiline':False]['text':'   specific functions are left unprefixed. All these functions are however','line_number':50,'multiline':False]['text':'   aliased when exporting them, such that the resulting mozglue.dll exports','line_number':51,'multiline':False]['text':'   them unprefixed (see $(topsrcdir)/mozglue/build/mozglue.def.in). The','line_number':52,'multiline':False]['text':'   prefixed malloc implementation and duplication functions are not','line_number':53,'multiline':False]['text':'   exported.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' - On MacOSX, the system libc has a zone allocator, which allows us to','line_number':56,'multiline':False]['text':'   hook custom malloc implementation functions without exporting them.','line_number':57,'multiline':False]['text':'   However, since we want things in Firefox to skip the system zone','line_number':58,'multiline':False]['text':'   allocator, the malloc implementation functions are all exported','line_number':59,'multiline':False]['text':'   unprefixed, as well as duplication functions.','line_number':60,'multiline':False]['text':'   Jemalloc-specific functions are also left unprefixed.','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' - On Android all functions are left unprefixed.','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' - On other systems (mostly Linux), all functions are left unprefixed.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' On all platforms, C++ allocation functions are also exported.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Proper exporting of the various functions is done with the MOZ_MEMORY_API','line_number':69,'multiline':False]['text':' and MOZ_JEMALLOC_API macros. MOZ_MEMORY_API is meant to be used for malloc','line_number':70,'multiline':False]['text':' implementation and duplication functions, while MOZ_JEMALLOC_API is','line_number':71,'multiline':False]['text':' dedicated to jemalloc specific functions.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' All these functions are meant to be called with no prefix from Gecko code.','line_number':75,'multiline':False]['text':' In most cases, this is because that's how they are available at runtime.','line_number':76,'multiline':False]['text':' However, on Android, this relies on faulty.lib (the custom dynamic linker)','line_number':77,'multiline':False]['text':' resolving mozglue symbols before libc symbols, which is guaranteed by the','line_number':78,'multiline':False]['text':' way faulty.lib works (it respects the DT_NEEDED order, and libc always','line_number':79,'multiline':False]['text':' appears after mozglue ; which we double check when building anyways)','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' Within libmozglue (when MOZ_MEMORY_IMPL is defined), all the functions','line_number':83,'multiline':False]['text':' should be suffixed with "_impl" both for declarations and use.','line_number':84,'multiline':False]['text':' That is, the implementation declaration for e.g. strdup would look like:','line_number':85,'multiline':False]['text':'   char* strdup_impl(const char *)','line_number':86,'multiline':False]['text':' That implementation would call malloc by using "malloc_impl".','line_number':87,'multiline':False]['text':' mozilla/Types.h was already included','line_number':90,'multiline':False]['text':' Malloc implementation functions','line_number':137,'multiline':False]['text':' Duplication functions','line_number':149,'multiline':False]['text':' String functions','line_number':157,'multiline':False]['text':' Bug 801571 and Bug 879668, libstagefright uses vasprintf, causing malloc()/','line_number':159,'multiline':False]['text':' free() to be mismatched between bionic and mozglue implementation.','line_number':160,'multiline':False]['text':' mozmemory_wrap_h','line_number':165,'multiline':False]