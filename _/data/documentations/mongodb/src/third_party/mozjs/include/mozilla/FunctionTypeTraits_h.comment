['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Helpers to manipulate function types that don't fit in TypeTraits.h ','line_number':7,'multiline':True]['text':' for size_t ','line_number':12,'multiline':True]['text':' Main FunctionTypeTraits declaration, taking one template argument.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Given a function type, FunctionTypeTraits will expose the following members:','line_number':19,'multiline':False]['text':' - ReturnType: Return type.','line_number':20,'multiline':False]['text':' - arity: Number of parameters (size_t).','line_number':21,'multiline':False]['text':' - ParameterType<N>: Type of the Nth** parameter, 0-indexed.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' ** `ParameterType<N>` with `N` >= `arity` is allowed and gives `void`.','line_number':24,'multiline':False]['text':' This prevents compilation errors when trying to access a type outside of the','line_number':25,'multiline':False]['text':' function's parameters, which is useful for parameters checks, e.g.:','line_number':26,'multiline':False]['text':'   template<typename F>','line_number':27,'multiline':False]['text':'   auto foo(F&&)','line_number':28,'multiline':False]['text':'    -> enable_if(FunctionTypeTraits<F>::arity == 1 &&','line_number':29,'multiline':False]['text':'                 is_same<FunctionTypeTraits<F>::template ParameterType<0>,','line_number':30,'multiline':False]['text':'                         int>::value,','line_number':31,'multiline':False]['text':'                 void)','line_number':32,'multiline':False]['text':'   {','line_number':33,'multiline':False]['text':'     // This function will only be enabled if `F` takes one `int`.','line_number':34,'multiline':False]['text':'     // Without the permissive ParameterType<any N>, it wouldn't even compile.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Note: FunctionTypeTraits does not work with generic lambdas `[](auto&) {}`,','line_number':37,'multiline':False]['text':' because parameter types cannot be known until an actual invocation when types','line_number':38,'multiline':False]['text':' are inferred from the given arguments.','line_number':39,'multiline':False]['text':' Remove reference and pointer wrappers, if any.','line_number':43,'multiline':False]['text':' Extract `operator()` function from callables (e.g. lambdas, std::function).','line_number':51,'multiline':False]['text':' If `safe`, retrieve the `N`th type from `As`, otherwise `void`.','line_number':58,'multiline':False]['text':' See top description for reason.','line_number':59,'multiline':False]['text':' namespace detail','line_number':80,'multiline':False]['text':' Specialization for free functions.','line_number':82,'multiline':False]['text':' Specialization for non-const member functions.','line_number':87,'multiline':False]['text':' Specialization for const member functions.','line_number':92,'multiline':False]['text':' Specialization for __stdcall free functions.','line_number':98,'multiline':False]['text':' Specialization for __stdcall non-const member functions.','line_number':103,'multiline':False]['text':' Specialization for __stdcall const member functions.','line_number':108,'multiline':False]['text':' NS_HAVE_STDCALL','line_number':112,'multiline':False]['text':' namespace mozilla','line_number':114,'multiline':False]['text':' mozilla_FunctionTypeTraits_h','line_number':116,'multiline':False]