['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Options specified when creating a realm to determine its behavior, immutable
 * options determining the behavior of an existing realm, and mutable options on
 * an existing realm that may be changed when desired.
 ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':16,'multiline':False]['text':' JS_PUBLIC_API','line_number':18,'multiline':False]['text':' JSTraceOp','line_number':20,'multiline':False]['text':' namespace JS','line_number':31,'multiline':False]['text':'*
 * Specification for which compartment/zone a newly created realm should use.
 ','line_number':35,'multiline':True]['text':' Create a new realm and compartment in the single runtime wide system','line_number':39,'multiline':False]['text':' zone. The meaning of this zone is left to the embedder.','line_number':40,'multiline':False]['text':' Create a new realm and compartment in a particular existing zone.','line_number':43,'multiline':False]['text':' Create a new zone/compartment.','line_number':46,'multiline':False]['text':' Create a new realm in an existing compartment.','line_number':49,'multiline':False]['text':' Internal use only. Create the self-hosting compartment.','line_number':52,'multiline':False]['text':'*
 * Specification for whether weak refs should be enabled and if so whether the
 * FinalizationRegistry.cleanupSome method should be present.
 ','line_number':56,'multiline':True]['text':'*
 * RealmCreationOptions specifies options relevant to creating a new realm, that
 * are either immutable characteristics of that realm or that are discarded
 * after the realm has been created.
 *
 * Access to these options on an existing realm is read-only: if you need
 * particular selections, you must make them before you create the realm.
 ','line_number':66,'multiline':True]['text':' Set the compartment/zone to use for the realm. See CompartmentSpecifier','line_number':94,'multiline':False]['text':' above.','line_number':95,'multiline':False]['text':' Certain compartments are implementation details of the embedding, and','line_number':103,'multiline':False]['text':' references to them should never leak out to script. This flag causes this','line_number':104,'multiline':False]['text':' realm to skip firing onNewGlobalObject and makes addDebuggee a no-op for','line_number':105,'multiline':False]['text':' this global.','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' Debugger visibility is per-compartment, not per-realm (it's only practical','line_number':108,'multiline':False]['text':' to enforce visibility on compartment boundaries), so if a realm is being','line_number':109,'multiline':False]['text':' created in an extant compartment, its requested visibility must match that','line_number':110,'multiline':False]['text':' of the compartment.','line_number':111,'multiline':False]['text':' Realms used for off-thread compilation have their contents merged into a','line_number':118,'multiline':False]['text':' target realm when the compilation is finished. This is only allowed if','line_number':119,'multiline':False]['text':' this flag is set. The invisibleToDebugger flag must also be set for such','line_number':120,'multiline':False]['text':' realms.','line_number':121,'multiline':False]['text':' Determines whether this realm should preserve JIT code on non-shrinking','line_number':128,'multiline':False]['text':' GCs.','line_number':129,'multiline':False]['text':' Determines whether 1) the global Atomic property is defined and atomic','line_number':136,'multiline':False]['text':' operations are supported, and 2) whether shared-memory operations are','line_number':137,'multiline':False]['text':' supported.','line_number':138,'multiline':False]['text':' Determines (if getSharedMemoryAndAtomicsEnabled() is true) whether the','line_number':142,'multiline':False]['text':' global SharedArrayBuffer property is defined.  If the property is not','line_number':143,'multiline':False]['text':' defined, shared array buffer functionality can only be invoked if the','line_number':144,'multiline':False]['text':' host/embedding specifically acts to expose it.','line_number':145,'multiline':False]['text':'','line_number':146,'multiline':False]['text':' This option defaults to true: embeddings unable to tolerate a global','line_number':147,'multiline':False]['text':' SharedAraryBuffer property must opt out of it.','line_number':148,'multiline':False]['text':' Structured clone operations support the cloning of shared memory objects','line_number':157,'multiline':False]['text':' (SharedArrayBuffer or or a shared WASM Memory object) *optionally* -- at','line_number':158,'multiline':False]['text':' the discretion of the embedder code that performs the cloning.  When a','line_number':159,'multiline':False]['text':' structured clone operation encounters a shared memory object and cloning','line_number':160,'multiline':False]['text':' shared memory objects has not been enabled, the clone fails and an','line_number':161,'multiline':False]['text':' error is thrown.','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':' In the web embedding context, shared memory object cloning is disabled','line_number':164,'multiline':False]['text':' either because','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':'   1) *no* way of supporting it is available (because the','line_number':167,'multiline':False]['text':'      Cross-Origin-Opener-Policy and Cross-Origin-Embedder-Policy HTTP','line_number':168,'multiline':False]['text':'      headers are not respected to force the page into its own process), or','line_number':169,'multiline':False]['text':'   2) the aforementioned HTTP headers don't specify that the page should be','line_number':170,'multiline':False]['text':'      opened in its own process.','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':' These two scenarios demand different error messages, and this option can be','line_number':173,'multiline':False]['text':' used to specify which scenario is in play.','line_number':174,'multiline':False]['text':'','line_number':175,'multiline':False]['text':' In the former case, if COOP/COEP support is not enabled, set this option to','line_number':176,'multiline':False]['text':' false.  (This is the default.)','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' In the latter case, if COOP/COEP weren't used to force this page into its','line_number':179,'multiline':False]['text':' own process, set this option to true.','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' (Embeddings that are not the web and do not wish to support structured','line_number':182,'multiline':False]['text':' cloning of shared memory objects will get a "bad" web-centric error message','line_number':183,'multiline':False]['text':' no matter what.  At present, SpiderMonkey does not offer a way for such','line_number':184,'multiline':False]['text':' embeddings to use an embedding-specific error message.)','line_number':185,'multiline':False]['text':' This flag doesn't affect JS engine behavior.  It is used by Gecko to','line_number':245,'multiline':False]['text':' mark whether content windows and workers are "Secure Context"s. See','line_number':246,'multiline':False]['text':' https://w3c.github.io/webappsec-secure-contexts/','line_number':247,'multiline':False]['text':' https://bugzilla.mozilla.org/show_bug.cgi?id=1162772#c34','line_number':248,'multiline':False]['text':'*
 * RealmBehaviors specifies behaviors of a realm that can be changed after the
 * realm's been created.
 ','line_number':287,'multiline':True]['text':' For certain globals, we know enough about the code that will run in them','line_number':295,'multiline':False]['text':' that we can discard script source entirely.','line_number':296,'multiline':False]['text':' A Realm can stop being "live" in all the ways that matter before its global','line_number':332,'multiline':False]['text':' is actually GCed.  Consumers that tear down parts of a Realm or its global','line_number':333,'multiline':False]['text':' before that point should set isNonLive accordingly.','line_number':334,'multiline':False]['text':'*
 * RealmOptions specifies realm characteristics: both those that can't be
 * changed on a realm once it's been created (RealmCreationOptions), and those
 * that can be changed on an existing realm (RealmBehaviors).
 ','line_number':347,'multiline':True]['text':' RealmCreationOptions specify fundamental realm characteristics that must','line_number':360,'multiline':False]['text':' be specified when the realm is created, that can't be changed after the','line_number':361,'multiline':False]['text':' realm is created.','line_number':362,'multiline':False]['text':' RealmBehaviors specify realm characteristics that can be changed after','line_number':368,'multiline':False]['text':' the realm is created.','line_number':369,'multiline':False]['text':' namespace JS','line_number':390,'multiline':False]['text':' js_RealmOptions_h','line_number':392,'multiline':False]