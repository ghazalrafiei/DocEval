['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':'
 * Simple function interception.
 *
 * We have two separate mechanisms for intercepting a function: We can use the
 * built-in nop space, if it exists, or we can create a detour.
 *
 * Using the built-in nop space works as follows: On x86-32, DLL functions
 * begin with a two-byte nop (mov edi, edi) and are preceeded by five bytes of
 * NOP instructions.
 *
 * When we detect a function with this prelude, we do the following:
 *
 * 1. Write a long jump to our interceptor function into the five bytes of NOPs
 *    before the function.
 *
 * 2. Write a short jump -5 into the two-byte nop at the beginning of the
 *    function.
 *
 * This mechanism is nice because it's thread-safe.  It's even safe to do if
 * another thread is currently running the function we're modifying!
 *
 * When the WindowsDllNopSpacePatcher is destroyed, we overwrite the short jump
 * but not the long jump, so re-intercepting the same function won't work,
 * because its prelude won't match.
 *
 *
 * Unfortunately nop space patching doesn't work on functions which don't have
 * this magic prelude (and in particular, x86-64 never has the prelude).  So
 * when we can't use the built-in nop space, we fall back to using a detour,
 * which works as follows:
 *
 * 1. Save first N bytes of OrigFunction to trampoline, where N is a
 *    number of bytes >= 5 that are instruction aligned.
 *
 * 2. Replace first 5 bytes of OrigFunction with a jump to the Hook
 *    function.
 *
 * 3. After N bytes of the trampoline, add a jump to OrigFunction+N to
 *    continue original program flow.
 *
 * 4. Hook function needs to call the trampoline during its execution,
 *    to invoke the original function (so address of trampoline is
 *    returned).
 *
 * When the WindowsDllDetourPatcher object is destructed, OrigFunction is
 * patched again to jump directly to the trampoline instead of going through
 * the hook function. As such, re-intercepting the same function won't work, as
 * jump instructions are not supported.
 *
 * Note that this is not thread-safe.  Sad day.
 *
 ','line_number':33,'multiline':True]['text':' On x86, nop-space patches return to the second instruction of their target.','line_number':87,'multiline':False]['text':' This is a deliberate violation of Control Flow Guard, so disable the check.','line_number':88,'multiline':False]['text':' nothing ','line_number':91,'multiline':True]['text':' defined(_M_IX86)','line_number':115,'multiline':False]['text':' One-time init stuff cannot be moved or copied','line_number':155,'multiline':False]['text':' defined(DEBUG)','line_number':222,'multiline':False]['text':'*
   * NB: This operator is only meaningful when invoked in the target process!
   ','line_number':249,'multiline':True]['text':' defined(DEBUG)','line_number':262,'multiline':False]['text':' defined(_M_IX86)','line_number':311,'multiline':False]['text':' defined(_M_IX86)','line_number':322,'multiline':False]['text':'* Force a specific configuration for testing purposes. NOT to be used in
      production code! *','line_number':355,'multiline':True]['text':' defined(_M_IX86)','line_number':369,'multiline':False]['text':' NB: We intentionally leak mModule','line_number':372,'multiline':False]['text':' defined(NIGHTLY_BUILD)','line_number':379,'multiline':False]['text':'*
   * Hook/detour the method aName from the DLL we set in Init so that it calls
   * aHookDest instead.  Returns the original method pointer in aOrigFunc
   * and returns true if successful.
   *
   * IMPORTANT: If you use this method, please add your case to the
   * TestDllInterceptor in order to detect future failures.  Even if this
   * succeeds now, updates to the hooked DLL could cause it to fail in
   * the future.
   ','line_number':391,'multiline':True]['text':' Use a nop space patch if possible, otherwise fall back to a detour.','line_number':402,'multiline':False]['text':' This should be the preferred method for adding hooks.','line_number':403,'multiline':False]['text':' defined(_M_IX86)','line_number':433,'multiline':False]['text':'*
   * Detour the method aName from the DLL we set in Init so that it calls
   * aHookDest instead.  Returns the original method pointer in aOrigFunc
   * and returns true if successful.
   *
   * IMPORTANT: If you use this method, please add your case to the
   * TestDllInterceptor in order to detect future failures.  Even if this
   * succeeds now, updates to the detoured DLL could cause it to fail in
   * the future.
   ','line_number':438,'multiline':True]['text':' Generally, code should not call this method directly. Use AddHook unless','line_number':449,'multiline':False]['text':' there is a specific need to avoid nop space patches.','line_number':450,'multiline':False]['text':' NTDLL hooks should attempt to use a 10-byte patch because some','line_number':485,'multiline':False]['text':' injected DLLs do the same and interfere with our stuff.','line_number':486,'multiline':False]['text':' CloseHandle on Windows 8/8.1 only accomodates 10-byte patches.','line_number':497,'multiline':False]['text':' CreateFileA and DuplicateHandle on Windows 8 require 10-byte patches.','line_number':502,'multiline':False]['text':' Because we can't detour Win8's KERNELBASE!DuplicateHandle,','line_number':513,'multiline':False]['text':' we detour kernel32!DuplicateHandle (See bug 1659398).','line_number':514,'multiline':False]['text':' defined(_M_X64)','line_number':517,'multiline':False]['text':'*
 * IAT patching is intended for use when we only want to intercept a function
 * call originating from a specific module.
 ','line_number':533,'multiline':True]['text':' PE Spec requires ASCII names for imported module names','line_number':560,'multiline':False]['text':' PE Spec requires ASCII names for imported function names','line_number':567,'multiline':False]['text':' Either aFromModule does not import aToModuleName at load-time, or','line_number':582,'multiline':False]['text':' aToModuleName is a (currently unsupported) delay-load import.','line_number':583,'multiline':False]['text':' Resolve the import name table (INT).','line_number':587,'multiline':False]['text':' Scan the INT for the location of the thunk for the function named','line_number':596,'multiline':False]['text':' 'aTargetFnName'.','line_number':597,'multiline':False]['text':' Currently not supporting import by ordinal; this isn't hard to add,','line_number':601,'multiline':False]['text':' but we won't bother unless necessary.','line_number':602,'multiline':False]['text':' Looks like we have a bad name descriptor. Try to continue.','line_number':611,'multiline':False]['text':' Function name checks MUST be case-sensitive!','line_number':615,'multiline':False]['text':' We found the thunk. Save the index of this thunk, as the IAT thunk','line_number':617,'multiline':False]['text':' is located at the same index in that table as in the INT.','line_number':618,'multiline':False]['text':' We never found a thunk for that function. Perhaps it's not imported?','line_number':625,'multiline':False]['text':' That's just wrong.','line_number':630,'multiline':False]['text':' Resolve the IAT thunk for the function we want','line_number':640,'multiline':False]['text':' Now we can just change out its pointer with our hook function.','line_number':648,'multiline':False]['text':' We do the exchange this way to ensure that *aOutOrigFunc is always valid','line_number':654,'multiline':False]['text':' once the atomic exchange has taken place.','line_number':655,'multiline':False]['text':' defined(DEBUG)','line_number':685,'multiline':False]['text':' We offer this overload in case the client wants finer-grained control over','line_number':697,'multiline':False]['text':' loading aFromModule.','line_number':698,'multiline':False]['text':' If we successfully set the hook then we must retain a strong reference','line_number':711,'multiline':False]['text':' to the module that we modified.','line_number':712,'multiline':False]['text':' One-time init stuff cannot be moved or copied','line_number':727,'multiline':False]['text':' defined(DEBUG)','line_number':732,'multiline':False]['text':' never freed','line_number':776,'multiline':False]['text':'*
 * This class applies an irreversible patch to jump to a target function
 * without backing up the original function.
 ','line_number':780,'multiline':True]['text':' namespace interceptor','line_number':807,'multiline':False]['text':' namespace mozilla','line_number':817,'multiline':False]['text':' NS_WINDOWS_DLL_INTERCEPTOR_H_ ','line_number':819,'multiline':True]