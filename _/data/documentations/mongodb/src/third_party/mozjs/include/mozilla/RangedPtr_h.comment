['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':'
 * Implements a smart pointer asserted to remain within a range specified at
 * construction.
 ','line_number':7,'multiline':True]['text':'
 * RangedPtr is a smart pointer restricted to an address range specified at
 * creation.  The pointer (and any smart pointers derived from it) must remain
 * within the range [start, end] (inclusive of end to facilitate use as
 * sentinels).  Dereferencing or indexing into the pointer (or pointers derived
 * from it) must remain within the range [start, end).  All the standard pointer
 * operators are defined on it; in debug builds these operations assert that the
 * range specified at construction is respected.
 *
 * In theory passing a smart pointer instance as an argument can be slightly
 * slower than passing a T* (due to ABI requirements for passing structs versus
 * passing pointers), if the method being called isn't inlined.  If you are in
 * extremely performance-critical code, you may want to be careful using this
 * smart pointer as an argument type.
 *
 * RangedPtr<T> intentionally does not implicitly convert to T*.  Use get() to
 * explicitly convert to T*.  Keep in mind that the raw pointer of course won't
 * implement bounds checking in debug builds.
 ','line_number':24,'multiline':True]['text':' Creates a new pointer for |aPtr|, restricted to this pointer's range. ','line_number':60,'multiline':True]['text':' Equivalent to RangedPtr(aPtr, aPtr, aLength). ','line_number':97,'multiline':True]['text':' Equivalent to RangedPtr(aArr, aArr, N). ','line_number':112,'multiline':True]['text':'
   * You can only assign one RangedPtr into another if the two pointers have
   * the same valid range:
   *
   *   char arr1[] = "hi";
   *   char arr2[] = "bye";
   *   RangedPtr<char> p1(arr1, 2);
   *   p1 = RangedPtr<char>(arr1 + 1, arr1, arr1 + 2); // works
   *   p1 = RangedPtr<char>(arr2, 3);                  // asserts
   ','line_number':167,'multiline':True]['text':'
   * You can assign a raw pointer into a RangedPtr if the raw pointer is
   * within the range specified at creation.
   ','line_number':196,'multiline':True]['text':' namespace mozilla ','line_number':306,'multiline':True]['text':' mozilla_RangedPtr_h ','line_number':308,'multiline':True]