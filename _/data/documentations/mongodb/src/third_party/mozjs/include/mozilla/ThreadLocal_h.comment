['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Cross-platform lightweight thread local data wrappers. ','line_number':7,'multiline':True]['text':'
 * Thread Local Storage helpers.
 *
 * Usage:
 *
 * Do not directly instantiate this class.  Instead, use the
 * MOZ_THREAD_LOCAL macro to declare or define instances.  The macro
 * takes a type name as its argument.
 *
 * Declare like this:
 * extern MOZ_THREAD_LOCAL(int) tlsInt;
 * Define like this:
 * MOZ_THREAD_LOCAL(int) tlsInt;
 * or:
 * static MOZ_THREAD_LOCAL(int) tlsInt;
 *
 * Only static-storage-duration (e.g. global variables, or static class members)
 * objects of this class should be instantiated. This class relies on
 * zero-initialization, which is implicit for static-storage-duration objects.
 * It doesn't have a custom default constructor, to avoid static initializers.
 *
 * API usage:
 *
 * // Create a TLS item.
 * //
 * // Note that init() should be invoked before the first use of set()
 * // or get().  It is ok to call it multiple times.  This must be
 * // called in a way that avoids possible races with other threads.
 * MOZ_THREAD_LOCAL(int) tlsKey;
 * if (!tlsKey.init()) {
 *   // deal with the error
 * }
 *
 * // Set the TLS value
 * tlsKey.set(123);
 *
 * // Get the TLS value
 * int value = tlsKey.get();
 ','line_number':33,'multiline':True]['text':' Integral types narrower than void* must be extended to avoid','line_number':73,'multiline':False]['text':' warnings from valgrind on some platforms.  This helper type','line_number':74,'multiline':False]['text':' achieves that without penalizing the common case of ThreadLocals','line_number':75,'multiline':False]['text':' instantiated using a pointer type.','line_number':76,'multiline':False]['text':'
 * ThreadLocalKeyStorage uses Thread Local APIs that are declared in
 * processthreadsapi.h. To use this class on Windows, include that file
 * (or windows.h) before including ThreadLocal.h.
 *
 * TLS_OUT_OF_INDEXES is a #define that is used to detect whether
 * an appropriate header has been included prior to this file
 ','line_number':88,'multiline':True]['text':' Despite not being used for MOZ_THREAD_LOCAL, we expose an implementation for
 * Windows for cases where it's not desirable to use thread_local ','line_number':97,'multiline':True]['text':' There are no threads on WASI, so we just use a global variable.','line_number':124,'multiline':False]['text':' __thread does not allow non-trivial constructors, but we can','line_number':175,'multiline':False]['text':' instead rely on zero-initialization.','line_number':176,'multiline':False]['text':' namespace detail','line_number':253,'multiline':False]['text':' namespace mozilla','line_number':254,'multiline':False]['text':' mozilla_ThreadLocal_h ','line_number':256,'multiline':True]