['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' A class holding a pair of objects that tries to conserve storage space. ','line_number':7,'multiline':True]['text':' Optimize storage using the Empty Base Optimization -- that empty base classes','line_number':24,'multiline':False]['text':' don't take up space -- to optimize size when one or the other class is','line_number':25,'multiline':False]['text':' stateless and can be used as a base class.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' The extra conditions on storage for B are necessary so that CompactPairHelper','line_number':28,'multiline':False]['text':' won't ambiguously inherit from either A or B, such that one or the other base','line_number':29,'multiline':False]['text':' class would be inaccessible.','line_number':30,'multiline':False]['text':' namespace detail','line_number':163,'multiline':False]['text':'*
 * CompactPair is the logical concatenation of an instance of A with an instance
 * B. Space is conserved when possible.  Neither A nor B may be a final class.
 *
 * In general if space conservation is not critical is preferred to use
 * std::pair.
 *
 * It's typically clearer to have individual A and B member fields.  Except if
 * you want the space-conserving qualities of CompactPair, you're probably
 * better off not using this!
 *
 * No guarantees are provided about the memory layout of A and B, the order of
 * initialization or destruction of A and B, and so on.  (This is approximately
 * required to optimize space usage.)  The first/second names are merely
 * conceptual!
 ','line_number':165,'multiline':True]['text':'* The A instance. ','line_number':199,'multiline':True]['text':'* The B instance. ','line_number':201,'multiline':True]['text':'* Swap this pair with another pair. ','line_number':204,'multiline':True]['text':'*
 * MakeCompactPair allows you to construct a CompactPair instance using type
 * inference. A call like this:
 *
 *   MakeCompactPair(Foo(), Bar())
 *
 * will return a CompactPair<Foo, Bar>.
 ','line_number':208,'multiline':True]['text':'*
 * CompactPair equality comparison
 ','line_number':225,'multiline':True]['text':' namespace mozilla','line_number':233,'multiline':False]['text':' namespace std','line_number':242,'multiline':False]['text':' mozilla_CompactPair_h ','line_number':244,'multiline':True]