['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Forward declarations of all the types a TraceKind can denote.','line_number':14,'multiline':False]['text':' namespace jit','line_number':27,'multiline':False]['text':' namespace js','line_number':28,'multiline':False]['text':' When tracing a thing, the GC needs to know about the layout of the object it','line_number':32,'multiline':False]['text':' is looking at. There are a fixed number of different layouts that the GC','line_number':33,'multiline':False]['text':' knows about. The "trace kind" is a static map which tells which layout a GC','line_number':34,'multiline':False]['text':' thing has.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Although this map is public, the details are completely hidden. Not all of','line_number':37,'multiline':False]['text':' the matching C++ types are exposed, and those that are, are opaque.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' See Value::gcKind() and JSTraceCallback in Tracer.h for more details.','line_number':40,'multiline':False]['text':' These trace kinds have a publicly exposed, although opaque, C++ type.','line_number':42,'multiline':False]['text':' Note: The order here is determined by our Value packing. Other users','line_number':43,'multiline':False]['text':'       should sort alphabetically, for consistency.','line_number':44,'multiline':False]['text':' Shape details are exposed through JS_TraceShapeCycleCollectorChildren.','line_number':50,'multiline':False]['text':' The kind associated with a nullptr.','line_number':55,'multiline':False]['text':' The following kinds do not have an exposed C++ idiom.','line_number':58,'multiline':False]['text':' GCCellPtr packs the trace kind into the low bits of the pointer for common','line_number':67,'multiline':False]['text':' kinds.','line_number':68,'multiline':False]['text':' When this header is imported inside SpiderMonkey, the class definitions are','line_number':73,'multiline':False]['text':' available and we can query those definitions to find the correct kind','line_number':74,'multiline':False]['text':' directly from the class hierarchy.','line_number':75,'multiline':False]['text':' When this header is used outside SpiderMonkey, the class definitions are not','line_number':81,'multiline':False]['text':' available, so the following table containing all public GC types is used.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':' canBeGray: GC can mark things of this kind gray. The cycle collector','line_number':84,'multiline':False]['text':'            traverses gray GC things when looking for cycles.','line_number':85,'multiline':False]['text':' inCCGraph: Things of this kind are represented as nodes in the CC graph. This','line_number':86,'multiline':False]['text':'            also means they can be used as a keys in WeakMap.','line_number':87,'multiline':False]['text':' clang-format off','line_number':89,'multiline':False]['text':' name         type              canBeGray       inCCGraph ','line_number':91,'multiline':True]['text':' clang-format on','line_number':104,'multiline':False]['text':' Returns true if the JS::TraceKind is represented as a node in cycle collector','line_number':106,'multiline':False]['text':' graph.','line_number':107,'multiline':False]['text':' Helper for SFINAE to ensure certain methods are only used on appropriate base','line_number':120,'multiline':False]['text':' types. This avoids common footguns such as `Cell::is<JSFunction>()` which','line_number':121,'multiline':False]['text':' match any type of JSObject.','line_number':122,'multiline':False]['text':' Map from all public types to their trace kind.','line_number':135,'multiline':False]['text':' RootKind is closely related to TraceKind. Whereas TraceKind's indices are','line_number':157,'multiline':False]['text':' laid out for convenient embedding as a pointer tag, the indicies of RootKind','line_number':158,'multiline':False]['text':' are designed for use as array keys via EnumeratedArray.','line_number':159,'multiline':False]['text':' These map 1:1 with trace kinds.','line_number':161,'multiline':False]['text':' These tagged pointers are special-cased for performance.','line_number':166,'multiline':False]['text':' Everything else.','line_number':170,'multiline':False]['text':' Most RootKind correspond directly to a trace kind.','line_number':176,'multiline':False]['text':' Specify the RootKind for all types. Value and jsid map to special cases;','line_number':187,'multiline':False]['text':' Cell pointer types we can derive directly from the TraceKind; everything else','line_number':188,'multiline':False]['text':' should go in the Traceable list and use GCPolicy<T>::trace for tracing.','line_number':189,'multiline':False]['text':' Not a pointer to a GC cell. Use GCPolicy.','line_number':201,'multiline':False]['text':' Fortunately, few places in the system need to deal with fully abstract','line_number':217,'multiline':False]['text':' cells. In those places that do, we generally want to move to a layout','line_number':218,'multiline':False]['text':' templated function as soon as possible. This template wraps the upcast','line_number':219,'multiline':False]['text':' for that dispatch.','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':' Given a call:','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':'    DispatchTraceKindTyped(f, thing, traceKind, ... args)','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' Downcast the |void *thing| to the specific type designated by |traceKind|,','line_number':226,'multiline':False]['text':' and pass it to the functor |f| along with |... args|, forwarded. Pass the','line_number':227,'multiline':False]['text':' type designated by |traceKind| as the functor's template argument. The','line_number':228,'multiline':False]['text':' |thing| parameter is optional; without it, we simply pass through |... args|.','line_number':229,'multiline':False]['text':' Given a GC thing specified by pointer and trace kind, calls the functor |f|','line_number':243,'multiline':False]['text':' with a template argument of the actual type of the pointer and returns the','line_number':244,'multiline':False]['text':' result.','line_number':245,'multiline':False]['text':' Given a GC thing specified by pointer and trace kind, calls the functor |f|','line_number':259,'multiline':False]['text':' with a template argument of the actual type of the pointer and ignores the','line_number':260,'multiline':False]['text':' result.','line_number':261,'multiline':False]['text':' This function doesn't do anything but is supplied for symmetry with other','line_number':264,'multiline':False]['text':' MapGCThingTyped/ApplyGCThingTyped implementations that have to wrap the','line_number':265,'multiline':False]['text':' functor to return a dummy value that is ignored.','line_number':266,'multiline':False]['text':' namespace JS','line_number':270,'multiline':False]['text':' js_TraceKind_h','line_number':272,'multiline':False]