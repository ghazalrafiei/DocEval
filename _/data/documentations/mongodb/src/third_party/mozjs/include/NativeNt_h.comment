['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' defined(MOZILLA_INTERNAL_API)','line_number':30,'multiline':False]['text':' The declarations within this #if block are intended to be used for initial','line_number':32,'multiline':False]['text':' process initialization ONLY. You probably don't want to be using these in','line_number':33,'multiline':False]['text':' normal Gecko code!','line_number':34,'multiline':False]['text':' !defined(STATUS_ACCESS_DENIED)','line_number':41,'multiline':False]['text':' !defined(STATUS_DLL_NOT_FOUND)','line_number':45,'multiline':False]['text':' !defined(STATUS_UNSUCCESSFUL)','line_number':49,'multiline':False]['text':' NB: When allocating, space for the buffer must also be included','line_number':70,'multiline':False]['text':' extern "C"','line_number':114,'multiline':False]['text':' !defined(MOZILLA_INTERNAL_API)','line_number':116,'multiline':False]['text':' extern "C"','line_number':134,'multiline':False]['text':'*
 * This class encapsulates a UNICODE_STRING that owns its own buffer. The
 * buffer is always NULL terminated, thus allowing us to cast to a wide C-string
 * without requiring any mutation.
 *
 * We only allow creation of this owned buffer from outside XUL.
 ','line_number':139,'multiline':True]['text':' defined(MOZILLA_INTERNAL_API)','line_number':189,'multiline':False]['text':' We can use nsDependentString here as we guaranteed null termination','line_number':221,'multiline':False]['text':' when we allocated the string.','line_number':222,'multiline':False]['text':' defined(MOZILLA_INTERNAL_API)','line_number':225,'multiline':False]['text':' We duplicate with null termination so that this string may be used','line_number':232,'multiline':False]['text':' as a wide C-string without any further manipulation.','line_number':233,'multiline':False]['text':' Make sure that mUnicodeString does not contain bogus data','line_number':238,'multiline':False]['text':' (since not all callers zero it out before invoking)','line_number':239,'multiline':False]['text':' !defined(MOZILLA_INTERNAL_API)','line_number':256,'multiline':False]['text':' We cannot use default copy here because mSectionFileName.Buffer needs to','line_number':285,'multiline':False]['text':' be updated to point to |this->mBuf|, not |aOther.mBuf|.','line_number':286,'multiline':False]['text':' Native NT paths, so we can't assume MAX_PATH. Use a larger buffer.','line_number':307,'multiline':False]['text':' Allow move & Disallow copy','line_number':350,'multiline':False]['text':' Quick check: If the string is too short, don't bother','line_number':396,'multiline':False]['text':' (We need at least 12 hex digits, one char for '.', and 3 for extension)','line_number':397,'multiline':False]['text':' Quick check: If the string is too short, don't bother','line_number':426,'multiline':False]['text':' (We need 16 hex digits, one char for '.', and 3 for extension)','line_number':427,'multiline':False]['text':' At this point, either cur points to the final backslash, or it points to','line_number':463,'multiline':False]['text':' buf - 1. Either way, we're interested in cur + 1 as the desired buffer.','line_number':464,'multiline':False]['text':' !defined(MOZILLA_INTERNAL_API)','line_number':470,'multiline':False]['text':' No backslash in the string','line_number':487,'multiline':False]['text':' defined(MOZILLA_INTERNAL_API)','line_number':490,'multiline':False]['text':' A UTF-8 string, according to','line_number':536,'multiline':False]['text':' https://github.com/Microsoft/microsoft-pdb/blob/082c5290e5aff028ae84e43affa8be717aa7af73/PDB/dbi/locator.cpp#L785','line_number':537,'multiline':False]['text':'*
   * This structure is documented on MSDN as VS_VERSIONINFO, but is not present
   * in SDK headers because it cannot be specified as a C struct. The following
   * structure contains the fixed-length fields at the beginning of
   * VS_VERSIONINFO.
   ','line_number':542,'multiline':True]['text':' ArrayLength(L"VS_VERSION_INFO")','line_number':552,'multiline':False]['text':' Additional data goes here, aligned on a 4-byte boundary','line_number':553,'multiline':False]['text':' The lowest two bits of an HMODULE are used as flags. Stripping those bits','line_number':557,'multiline':False]['text':' from the HMODULE yields the base address of the binary's memory mapping.','line_number':558,'multiline':False]['text':' (See LoadLibraryEx docs on MSDN)','line_number':559,'multiline':False]['text':' This is a coarse-grained check to ensure that the image size is','line_number':591,'multiline':False]['text':' reasonable. It we aren't big enough to contain headers, we have a','line_number':592,'multiline':False]['text':' problem!','line_number':593,'multiline':False]['text':'*
   * This overload computes absolute virtual addresses relative to the base
   * address of the binary.
   ','line_number':611,'multiline':True]['text':'*
   * This overload computes a result by adding aRva to aBase, but also ensures
   * that the resulting pointer falls within the bounds of this binary's memory
   * mapping.
   ','line_number':620,'multiline':True]['text':' If the import directory is already tampered, we skip bounds check','line_number':662,'multiline':False]['text':' because it could be located outside the mapped image.','line_number':663,'multiline':False]['text':' RT_VERSION == 16','line_number':703,'multiline':False]['text':' Version resources require an id of 1','line_number':704,'multiline':False]['text':' curImpDesc now points to the IAT for the module we're interested in','line_number':744,'multiline':False]['text':'*
   * If |aBoundaries| is given, this method checks whether each IAT entry is
   * within the given range, and if any entry is out of the range, we return
   * Nothing().
   ','line_number':766,'multiline':True]['text':' Find the length by iterating through the table until we find a null entry','line_number':785,'multiline':False]['text':'*
   * Resources are stored in a three-level tree. To locate a particular entry,
   * you must supply a resource type, the resource id, and then the language id.
   * If aLangId == 0, we just resolve the first entry regardless of language.
   ','line_number':803,'multiline':True]['text':' We found the section but it does not have the expected','line_number':865,'multiline':False]['text':' characteristics','line_number':866,'multiline':False]['text':' There may be other code sections in the binary besides .text','line_number':887,'multiline':False]['text':' Use the unchecked version because the entrypoint may be tampered.','line_number':904,'multiline':False]['text':' This private variant does not have bounds checks, because we need to be','line_number':937,'multiline':False]['text':' able to resolve the bounds themselves.','line_number':938,'multiline':False]['text':' The Windows loader has an internal limit of 96 sections (per PE spec)','line_number':948,'multiline':False]['text':' Immediately after the IMAGE_RESOURCE_DIRECTORY structure is an array','line_number':960,'multiline':False]['text':' of IMAGE_RESOURCE_DIRECTORY_ENTRY structures. Since this function','line_number':961,'multiline':False]['text':' searches by ID, we need to skip past any named entries before iterating.','line_number':962,'multiline':False]['text':' Immediately after the IMAGE_RESOURCE_DIRECTORY structure is an array','line_number':977,'multiline':False]['text':' of IMAGE_RESOURCE_DIRECTORY_ENTRY structures. We just return the first','line_number':978,'multiline':False]['text':' entry, regardless of whether it is indexed by name or by id.','line_number':979,'multiline':False]['text':' Fixed file info does not exist','line_number':1005,'multiline':False]['text':' Align up to 4-byte boundary','line_number':1012,'multiline':False]['text':' This class represents an export section of a local/remote process.','line_number':1035,'multiline':False]['text':' This is a coarse-grained check to ensure that the image size is','line_number':1095,'multiline':False]['text':' reasonable. It we aren't big enough to contain headers, we have a','line_number':1096,'multiline':False]['text':' problem!','line_number':1097,'multiline':False]['text':' Because PEExportSection doesn't use MMPolicy::Reserve(), a boolified','line_number':1143,'multiline':False]['text':' mMMPolicy is expected to be false.  We don't check mMMPolicy here.','line_number':1144,'multiline':False]['text':'*
   * This functions searches the export table for a given string as
   * GetProcAddress does, but this returns a matched entry of the Export
   * Address Table i.e. a pointer to an RVA of a matched function instead
   * of a function address.  If the entry is forwarded, this function
   * returns nullptr.
   ','line_number':1162,'multiline':True]['text':' If an entry points to an address within the export section, the','line_number':1212,'multiline':False]['text':' field is a forwarder RVA.  We return nullptr because the entry is','line_number':1213,'multiline':False]['text':' not a function address but a null-terminated string used for export','line_number':1214,'multiline':False]['text':' forwarding.','line_number':1215,'multiline':False]['text':'*
   * This functions behaves the same as the native ::GetProcAddress except
   * the following cases:
   * - Returns nullptr if a target entry is forwarded to another dll.
   ','line_number':1222,'multiline':True]['text':' When the high-order word of |aFunctionNameASCII| is zero, it's not','line_number':1229,'multiline':False]['text':' a string but an ordinal value.','line_number':1230,'multiline':False]['text':' defined(MOZILLA_INTERNAL_API)','line_number':1303,'multiline':False]['text':'*
 * This function relies on a specific offset into the mostly-undocumented PEB
 * structure. The risk is reduced thanks to the fact that the Chromium sandbox
 * relies on the location of this field. It is unlikely to change at this point.
 * To further reduce the risk, we also check for the magic 'MZ' signature that
 * should indicate the beginning of a PE image.
 ','line_number':1341,'multiline':True]['text':' peb.ImageBaseAddress','line_number':1371,'multiline':False]['text':' This class manages data transfer from the local process's executable','line_number':1401,'multiline':False]['text':' to another process's executable via WriteProcessMemory.','line_number':1402,'multiline':False]['text':' Bug 1662560 told us the same executable may be mapped onto a different','line_number':1403,'multiline':False]['text':' address in a different process.  This means when we transfer data within','line_number':1404,'multiline':False]['text':' the mapped executable such as a global variable or IAT from the current','line_number':1405,'multiline':False]['text':' process to another process, we need to shift its address by the difference','line_number':1406,'multiline':False]['text':' between two executable's mapped imagebase.','line_number':1407,'multiline':False]['text':' If EnsureRemoteImagebase() fails, a subsequent operaion will fail.','line_number':1471,'multiline':False]['text':' !defined(MOZILLA_INTERNAL_API)','line_number':1579,'multiline':False]['text':' Allow move & Disallow copy','line_number':1675,'multiline':False]['text':' namespace nt','line_number':1703,'multiline':False]['text':' namespace mozilla','line_number':1704,'multiline':False]['text':' mozilla_NativeNt_h','line_number':1706,'multiline':False]