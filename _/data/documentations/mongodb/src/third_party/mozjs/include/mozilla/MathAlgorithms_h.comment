['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' mfbt maths algorithms. ','line_number':7,'multiline':True]['text':' Greatest Common Divisor','line_number':21,'multiline':False]['text':' Euclid's algorithm; O(N) in the worst case.  (There are better','line_number':24,'multiline':False]['text':' ways, but we don't need them for the current use of this algo.)','line_number':25,'multiline':False]['text':' Least Common Multiple','line_number':40,'multiline':False]['text':' Divide first to reduce overflow risk.','line_number':43,'multiline':False]['text':' namespace detail','line_number':65,'multiline':False]['text':' DO NOT USE DeprecatedAbs.  It exists only until its callers can be converted','line_number':67,'multiline':False]['text':' to Abs below, and it will be removed when all callers have been changed.','line_number':68,'multiline':False]['text':' The absolute value of the smallest possible value of a signed-integer type','line_number':72,'multiline':False]['text':' won't fit in that type (on twos-complement systems -- and we're blithely','line_number':73,'multiline':False]['text':' assuming we're on such systems, for the non-<stdint.h> types listed above),','line_number':74,'multiline':False]['text':' so assert that the input isn't that value.','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' This is the case if: the value is non-negative; or if adding one (giving a','line_number':77,'multiline':False]['text':' value in the range [-maxvalue, 0]), then negating (giving a value in the','line_number':78,'multiline':False]['text':' range [0, maxvalue]), doesn't produce maxvalue (because in twos-complement,','line_number':79,'multiline':False]['text':' (minvalue + 1) == -maxvalue).','line_number':80,'multiline':False]['text':' namespace detail','line_number':103,'multiline':False]['text':' namespace mozilla','line_number':126,'multiline':False]['text':' namespace detail','line_number':236,'multiline':False]['text':'*
 * Compute the number of high-order zero bits in the NON-ZERO number |aValue|.
 * That is, looking at the bitwise representation of the number, with the
 * highest- valued bits at the start, return the number of zeroes before the
 * first one is observed.
 *
 * CountLeadingZeroes32(0xF0FF1000) is 0;
 * CountLeadingZeroes32(0x7F8F0001) is 1;
 * CountLeadingZeroes32(0x3FFF0100) is 2;
 * CountLeadingZeroes32(0x1FF50010) is 3; and so on.
 ','line_number':238,'multiline':True]['text':'*
 * Compute the number of low-order zero bits in the NON-ZERO number |aValue|.
 * That is, looking at the bitwise representation of the number, with the
 * lowest- valued bits at the start, return the number of zeroes before the
 * first one is observed.
 *
 * CountTrailingZeroes32(0x0100FFFF) is 0;
 * CountTrailingZeroes32(0x7000FFFE) is 1;
 * CountTrailingZeroes32(0x0080FFFC) is 2;
 * CountTrailingZeroes32(0x0080FFF8) is 3; and so on.
 ','line_number':254,'multiline':True]['text':'*
 * Compute the number of one bits in the number |aValue|,
 ','line_number':270,'multiline':True]['text':'* Analogous to CountPopulation32, but for 64-bit numbers ','line_number':277,'multiline':True]['text':'* Analogous to CountLeadingZeroes32, but for 64-bit numbers. ','line_number':282,'multiline':True]['text':'* Analogous to CountTrailingZeroes32, but for 64-bit numbers. ','line_number':288,'multiline':True]['text':' Check for <= 1 to avoid the == 0 undefined case.','line_number':303,'multiline':False]['text':' Check for <= 1 to avoid the == 0 undefined case.','line_number':312,'multiline':False]['text':' namespace detail','line_number':317,'multiline':False]['text':'*
 * Compute the log of the least power of 2 greater than or equal to |aValue|.
 *
 * CeilingLog2(0..1) is 0;
 * CeilingLog2(2) is 1;
 * CeilingLog2(3..4) is 2;
 * CeilingLog2(5..8) is 3;
 * CeilingLog2(9..16) is 4; and so on.
 ','line_number':319,'multiline':True]['text':'* A CeilingLog2 variant that accepts only size_t. ','line_number':333,'multiline':True]['text':' namespace detail','line_number':359,'multiline':False]['text':'*
 * Compute the log of the greatest power of 2 less than or equal to |aValue|.
 *
 * FloorLog2(0..1) is 0;
 * FloorLog2(2..3) is 1;
 * FloorLog2(4..7) is 2;
 * FloorLog2(8..15) is 3; and so on.
 ','line_number':361,'multiline':True]['text':'* A FloorLog2 variant that accepts only size_t. ','line_number':374,'multiline':True]['text':'
 * Compute the smallest power of 2 greater than or equal to |x|.  |x| must not
 * be so great that the computed value would overflow |size_t|.
 ','line_number':377,'multiline':True]['text':'*
 * Rotates the bits of the given value left by the amount of the shift width.
 ','line_number':387,'multiline':True]['text':'*
 * Rotates the bits of the given value right by the amount of the shift width.
 ','line_number':405,'multiline':True]['text':'*
 * Returns true if |x| is a power of two.
 * Zero is not an integer power of two. (-Inf is not an integer)
 ','line_number':423,'multiline':True]['text':' namespace mozilla ','line_number':448,'multiline':True]['text':' mozilla_MathAlgorithms_h ','line_number':450,'multiline':True]