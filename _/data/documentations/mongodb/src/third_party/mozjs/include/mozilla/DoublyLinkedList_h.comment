['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':'* A doubly-linked list with flexible next/prev naming. ','line_number':7,'multiline':True]['text':'*
 * Where mozilla::LinkedList strives for ease of use above all other
 * considerations, mozilla::DoublyLinkedList strives for flexibility. The
 * following are things that can be done with mozilla::DoublyLinkedList that
 * cannot be done with mozilla::LinkedList:
 *
 *   * Arbitrary next/prev placement and naming. With the tools provided here,
 *     the next and previous pointers can be at the end of the structure, in a
 *     sub-structure, stored with a tag, in a union, wherever, as long as you
 *     can look them up and set them on demand.
 *   * Can be used without deriving from a new base and, thus, does not require
 *     use of constructors.
 *
 * Example:
 *
 *   class Observer : public DoublyLinkedListElement<Observer>
 *   {
 *   public:
 *     void observe(char* aTopic) { ... }
 *   };
 *
 *   class ObserverContainer
 *   {
 *   private:
 *     DoublyLinkedList<Observer> mList;
 *
 *   public:
 *     void addObserver(Observer* aObserver)
 *     {
 *       // Will assert if |aObserver| is part of another list.
 *       mList.pushBack(aObserver);
 *     }
 *
 *     void removeObserver(Observer* aObserver)
 *     {
 *       // Will assert if |aObserver| is not part of |list|.
 *       mList.remove(aObserver);
 *     }
 *
 *     void notifyObservers(char* aTopic)
 *     {
 *       for (Observer* o : mList) {
 *         o->observe(aTopic);
 *       }
 *     }
 *   };
 ','line_number':19,'multiline':True]['text':'*
 *  Deriving from this will allow T to be inserted into and removed from a
 *  DoublyLinkedList.
 ','line_number':69,'multiline':True]['text':'*
 * Provides access to a DoublyLinkedListElement within T.
 *
 * The default implementation of this template works for types that derive
 * from DoublyLinkedListElement, but one can specialize for their class so
 * that some appropriate DoublyLinkedListElement reference is returned.
 *
 * For more complex cases (multiple DoublyLinkedListElements, for example),
 * one can define their own trait class and use that as ElementAccess for
 * DoublyLinkedList. See TestDoublyLinkedList.cpp for an example.
 ','line_number':85,'multiline':True]['text':'*
 * A doubly linked list. |T| is the type of element stored in this list. |T|
 * must contain or have access to unique next and previous element pointers.
 * The template argument |ElementAccess| provides code to tell this list how to
 * get a reference to a DoublyLinkedListElement that may reside anywhere.
 ','line_number':104,'multiline':True]['text':'*
   * Checks that either the list is empty and both mHead and mTail are nullptr
   * or the list has entries and both mHead and mTail are non-null.
   ','line_number':115,'multiline':True]['text':' Both mNext and mPrev being NULL can mean two things:','line_number':123,'multiline':False]['text':' - the element is not in the list.','line_number':124,'multiline':False]['text':' - the element is the first and only element in the list.','line_number':125,'multiline':False]['text':' So check for the latter.','line_number':126,'multiline':False]['text':'*
   * Returns true if the list contains no elements.
   ','line_number':192,'multiline':True]['text':'*
   * Inserts aElm into the list at the head position. |aElm| must not already
   * be in a list.
   ','line_number':200,'multiline':True]['text':'*
   * Remove the head of the list and return it. Calling this on an empty list
   * will assert.
   ','line_number':221,'multiline':True]['text':'*
   * Inserts aElm into the list at the tail position. |aElm| must not already
   * be in a list.
   ','line_number':247,'multiline':True]['text':'*
   * Remove the tail of the list and return it. Calling this on an empty list
   * will assert.
   ','line_number':269,'multiline':True]['text':'*
   * Insert the given |aElm| *before* |aIter|.
   ','line_number':295,'multiline':True]['text':'*
   * Removes the given element from the list. The element must be in this list.
   ','line_number':319,'multiline':True]['text':'*
   * Returns an iterator referencing the first found element whose value matches
   * the given element according to operator==.
   ','line_number':347,'multiline':True]['text':'*
   * Returns whether the given element is in the list. Note that this uses
   * T::operator==, not pointer comparison.
   ','line_number':353,'multiline':True]['text':'*
   * Returns whether the given element might be in the list. Note that this
   * assumes the element is either in the list or not in the list, and ignores
   * the case where the element might be in another list in order to make the
   * check fast.
   ','line_number':359,'multiline':True]['text':' namespace mozilla','line_number':373,'multiline':False]['text':' mozilla_DoublyLinkedList_h','line_number':375,'multiline':False]