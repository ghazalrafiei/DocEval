['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':'
 * Operations for zeroing POD types, arrays, and so on.
 *
 * These operations are preferable to memset, memcmp, and the like because they
 * don't require remembering to multiply by sizeof(T), array lengths, and so on
 * everywhere.
 ','line_number':7,'multiline':True]['text':'* Set the contents of |aT| to 0. ','line_number':32,'multiline':True]['text':'* Set the contents of |aNElem| elements starting at |aT| to 0. ','line_number':38,'multiline':True]['text':'
   * This function is often called with 'aNElem' small; we use an inline loop
   * instead of calling 'memset' with a non-constant length.  The compiler
   * should inline the memset call with constant size, though.
   ','line_number':41,'multiline':True]['text':'* Set the contents of |aNElem| elements starting at |aT| to 0. ','line_number':51,'multiline':True]['text':'
 * Arrays implicitly convert to pointers to their first element, which is
 * dangerous when combined with the above PodZero definitions.  Adding an
 * overload for arrays is ambiguous, so we need another identifier.  The
 * ambiguous overload is left to catch mistaken uses of PodZero; if you get a
 * compile error involving PodZero and array types, use PodArrayZero instead.
 ','line_number':57,'multiline':True]['text':'* Set the contents of the array |aT| to zero. ','line_number':69,'multiline':True]['text':'*
 * Assign |*aSrc| to |*aDst|.  The locations must not be the same and must not
 * overlap.
 ','line_number':80,'multiline':True]['text':'*
 * Copy |aNElem| T elements from |aSrc| to |aDst|.  The two memory ranges must
 * not overlap!
 ','line_number':92,'multiline':True]['text':'
     * Avoid using operator= in this loop, as it may have been
     * intentionally deleted by the POD type.
     ','line_number':101,'multiline':True]['text':'
   * Volatile |aDst| requires extra work, because it's undefined behavior to
   * modify volatile objects using the mem* functions.  Just write out the
   * loops manually, using operator= rather than memcpy for the same reason,
   * and let the compiler optimize to the extent it can.
   ','line_number':119,'multiline':True]['text':'
 * Copy the contents of the array |aSrc| into the array |aDst|, both of size N.
 * The arrays must not overlap!
 ','line_number':131,'multiline':True]['text':'*
 * Copy the memory for |aNElem| T elements from |aSrc| to |aDst|.  If the two
 * memory ranges overlap, then the effect is as if the |aNElem| elements are
 * first copied from |aSrc| to a temporary array, and then from the temporary
 * array to |aDst|.
 ','line_number':140,'multiline':True]['text':'*
 * Looking for a PodEqual? Use ArrayEqual from ArrayUtils.h.
 * Note that we *cannot* use memcmp for this, due to padding bytes, etc..
 ','line_number':153,'multiline':True]['text':' namespace mozilla','line_number':158,'multiline':False]['text':' mozilla_PodOperations_h ','line_number':160,'multiline':True]