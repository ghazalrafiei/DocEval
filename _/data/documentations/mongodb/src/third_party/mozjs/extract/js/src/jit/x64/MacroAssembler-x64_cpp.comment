['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::jit::JitActivation','line_number':16,'multiline':False]['text':' The constants will be stored in a pool appended to the text (see','line_number':32,'multiline':False]['text':' finish()), so they will always be a fixed distance from the','line_number':33,'multiline':False]['text':' instructions which reference them. This allows the instructions to use','line_number':34,'multiline':False]['text':' PC-relative addressing. Use "jump" label support code, because we need','line_number':35,'multiline':False]['text':' the same PC-relative address patching that jumps use.','line_number':36,'multiline':False]['text':' See comment in loadConstantDouble','line_number':49,'multiline':False]['text':' Using linkJump here is safe, as explained in the comment in','line_number':396,'multiline':False]['text':' loadConstantDouble.','line_number':397,'multiline':False]['text':' SIMD memory values must be suitably aligned.','line_number':419,'multiline':False]['text':' Reserve space for exception information.','line_number':450,'multiline':False]['text':' Call the handler.','line_number':454,'multiline':False]['text':' Invalid kind.','line_number':486,'multiline':False]['text':' No exception handler. Load the error value, load the new stack pointer','line_number':488,'multiline':False]['text':' and return from the entry frame.','line_number':489,'multiline':False]['text':' If we found a catch handler, this must be a baseline frame. Restore state','line_number':495,'multiline':False]['text':' and jump to the catch block.','line_number':496,'multiline':False]['text':' If we found a finally block, this must be a baseline frame. Push','line_number':503,'multiline':False]['text':' two values expected by JSOp::Retsub: BooleanValue(true) and the','line_number':504,'multiline':False]['text':' exception.','line_number':505,'multiline':False]['text':' Only used in debug mode. Return BaselineFrame->returnValue() to the caller.','line_number':518,'multiline':False]['text':' If profiling is enabled, then update the lastProfilingFrame to refer to','line_number':527,'multiline':False]['text':' caller frame before returning.','line_number':528,'multiline':False]['text':' If we are bailing out to baseline to handle an exception, jump to the','line_number':541,'multiline':False]['text':' bailout tail stub. Load 1 (true) in ReturnReg to indicate success.','line_number':542,'multiline':False]['text':' If we are throwing and the innermost frame was a wasm frame, reset SP and','line_number':548,'multiline':False]['text':' FP; SP is pointing to the unwound return address to the wasm entry, so','line_number':549,'multiline':False]['text':' we can just ret().','line_number':550,'multiline':False]['text':' Found a wasm catch handler, restore state and jump to it.','line_number':556,'multiline':False]['text':' On windows, we cannot skip very far down the stack without touching the','line_number':588,'multiline':False]['text':' memory pages in-between.  This is a corner-case code for situations where','line_number':589,'multiline':False]['text':' the Ion frame data for a piece of code is very large.  To handle this','line_number':590,'multiline':False]['text':' special case, for frames over 4k in size we allocate memory on the stack','line_number':591,'multiline':False]['text':' incrementally, touching it as we go.','line_number':592,'multiline':False]['text':'','line_number':593,'multiline':False]['text':' When the amount is quite large, which it can be, we emit an actual loop,','line_number':594,'multiline':False]['text':' in order to keep the function prologue compact.  Compactness is a','line_number':595,'multiline':False]['text':' requirement for eg Wasm's CodeRange data structure, which can encode only','line_number':596,'multiline':False]['text':' 8-bit offsets.','line_number':597,'multiline':False]['text':' Check for -0.0','line_number':627,'multiline':False]['text':'{{{ check_macroassembler_style','line_number':640,'multiline':False]['text':' ===============================================================','line_number':641,'multiline':False]['text':' ABI function calls.','line_number':642,'multiline':False]['text':' sizeof(intptr_t) accounts for the saved stack pointer pushed by','line_number':658,'multiline':False]['text':' setupUnalignedABICall.','line_number':659,'multiline':False]['text':' Position all arguments.','line_number':671,'multiline':False]['text':' Callee register may be clobbered for an argument. Move the callee to','line_number':711,'multiline':False]['text':' r10, a volatile, non-argument register.','line_number':712,'multiline':False]['text':' Callee register may be clobbered for an argument. Move the callee to','line_number':730,'multiline':False]['text':' r10, a volatile, non-argument register.','line_number':731,'multiline':False]['text':' ===============================================================','line_number':745,'multiline':False]['text':' Move instructions','line_number':746,'multiline':False]['text':' ===============================================================','line_number':785,'multiline':False]['text':' Branch functions','line_number':786,'multiline':False]['text':' ========================================================================','line_number':853,'multiline':False]['text':' Memory access primitives.','line_number':854,'multiline':False]['text':' For known integers and booleans, we can just store the unboxed value if','line_number':864,'multiline':False]['text':' the slot has the same type.','line_number':865,'multiline':False]['text':' ========================================================================','line_number':903,'multiline':False]['text':' wasm support','line_number':904,'multiline':False]['text':' vmovss does the right thing also for access.isZeroExtendSimd128Load()','line_number':935,'multiline':False]['text':' vmovsd does the right thing also for access.isZeroExtendSimd128Load()','line_number':965,'multiline':False]['text':' Int32 to int64 moves zero-extend by default.','line_number':1005,'multiline':False]['text':' Check that the result is in the uint32_t range.','line_number':1072,'multiline':False]['text':' Check that the result is in the uint32_t range.','line_number':1085,'multiline':False]['text':' If the input < INT64_MAX, vcvttsd2sq will do the right thing, so','line_number':1113,'multiline':False]['text':' we use it directly. Else, we subtract INT64_MAX, convert to int64,','line_number':1114,'multiline':False]['text':' and then add INT64_MAX to the result.','line_number':1115,'multiline':False]['text':' If the input < INT64_MAX, vcvttss2sq will do the right thing, so','line_number':1142,'multiline':False]['text':' we use it directly. Else, we subtract INT64_MAX, convert to int64,','line_number':1143,'multiline':False]['text':' and then add INT64_MAX to the result.','line_number':1144,'multiline':False]['text':' ========================================================================','line_number':1168,'multiline':False]['text':' Convert floating point.','line_number':1169,'multiline':False]['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1173,'multiline':False]['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1181,'multiline':False]['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1192,'multiline':False]['text':' If the input's sign bit is not set we use vcvtsq2sd directly.','line_number':1195,'multiline':False]['text':' Else, we divide by 2 and keep the LSB, convert to double, and multiply','line_number':1196,'multiline':False]['text':' the result by 2.','line_number':1197,'multiline':False]['text':' Zero the output register to break dependencies, see convertInt32ToDouble.','line_number':1224,'multiline':False]['text':' See comment in convertUInt64ToDouble.','line_number':1227,'multiline':False]['text':' ========================================================================','line_number':1255,'multiline':False]['text':' Primitive atomic operations.','line_number':1256,'multiline':False]['text':'}}} check_macroassembler_style','line_number':1498,'multiline':False]