['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::jit::JitActivation','line_number':21,'multiline':False]['text':' All registers to save and restore. This includes the stack pointer, since we','line_number':30,'multiline':False]['text':' use the ability to reference register values on the stack by index.','line_number':31,'multiline':False]['text':' non-volatile registers.','line_number':50,'multiline':False]['text':' Save reg_vp(a7) on stack, use it after call jit code.','line_number':61,'multiline':False]['text':' Restore non-volatile registers','line_number':69,'multiline':False]['text':' Restore non-volatile floating point registers','line_number':77,'multiline':False]['text':' Restore non-volatile registers','line_number':83,'multiline':False]['text':' Restore non-volatile floating point registers','line_number':95,'multiline':False]['text':' Generates a trampoline for calling Jit compiled code from a C++ function.','line_number':151,'multiline':False]['text':' The trampoline use the EnterJitCode signature, with the standard x64 fastcall','line_number':152,'multiline':False]['text':' calling convention.','line_number':153,'multiline':False]['text':' Save stack pointer into s4','line_number':170,'multiline':False]['text':' Save stack pointer as baseline frame.','line_number':173,'multiline':False]['text':' Load the number of actual arguments into s3.','line_number':176,'multiline':False]['text':'**************************************************************
  Loop over argv vector, push arguments onto stack in reverse order
  **************************************************************','line_number':179,'multiline':True]['text':' if we are constructing, that also needs to include newTarget','line_number':183,'multiline':False]['text':' Make stack algined','line_number':194,'multiline':False]['text':' Value* argv','line_number':205,'multiline':False]['text':' s0 = &argv[argc]','line_number':206,'multiline':False]['text':' Loop over arguments, copying them from an unknown buffer onto the Ion','line_number':208,'multiline':False]['text':' stack so they can be accessed from JIT'ed code.','line_number':209,'multiline':False]['text':' If there aren't any arguments, don't do anything','line_number':211,'multiline':False]['text':' Create the frame descriptor.','line_number':227,'multiline':False]['text':' actual arguments','line_number':233,'multiline':False]['text':' callee token','line_number':234,'multiline':False]['text':' descriptor','line_number':236,'multiline':False]['text':' Handle Interpreter -> Baseline OSR.','line_number':241,'multiline':False]['text':' Push return address.','line_number':256,'multiline':False]['text':' Push previous frame pointer.','line_number':261,'multiline':False]['text':' Reserve frame.','line_number':265,'multiline':False]['text':' Reserve space for locals and stack values.','line_number':270,'multiline':False]['text':' Enter exit frame.','line_number':274,'multiline':False]['text':' Push frame descriptor and fake return address.','line_number':281,'multiline':False]['text':' Frame descriptor','line_number':284,'multiline':False]['text':' fake return address','line_number':285,'multiline':False]['text':' No GC things to mark, push a bare token.','line_number':287,'multiline':False]['text':' BaselineFrame','line_number':293,'multiline':False]['text':' jitcode','line_number':294,'multiline':False]['text':' BaselineFrame','line_number':299,'multiline':False]['text':' InterpreterFrame','line_number':300,'multiline':False]['text':' If OSR-ing, then emit instrumentation for setting lastProfilerFrame','line_number':316,'multiline':False]['text':' if profiler instrumentation is enabled.','line_number':317,'multiline':False]['text':' OOM: load error value, discard return address and previous frame','line_number':332,'multiline':False]['text':' pointer and return.','line_number':333,'multiline':False]['text':' Load the scope chain in R1.','line_number':342,'multiline':False]['text':' The call will push the return address on the stack, thus we check that','line_number':347,'multiline':False]['text':' the stack would be aligned once the call is complete.','line_number':348,'multiline':False]['text':' Call the function with pushing return address to stack.','line_number':351,'multiline':False]['text':' Interpreter -> Baseline OSR will return here.','line_number':355,'multiline':False]['text':' s0 <- 8*argc (size of all arguments we pushed on the stack)','line_number':362,'multiline':False]['text':' Discard calleeToken, numActualArgs.','line_number':366,'multiline':False]['text':' Pop arguments off the stack.','line_number':369,'multiline':False]['text':' Store the returned value into the vp','line_number':372,'multiline':False]['text':' Restore non-volatile registers and return.','line_number':376,'multiline':False]['text':' static','line_number':380,'multiline':False]['text':' Not supported, or not implemented yet.','line_number':383,'multiline':False]['text':' TODO: Implement along with the corresponding stack-walker changes, in','line_number':384,'multiline':False]['text':' coordination with the Gecko Profiler, see bug 1635987 and follow-ups.','line_number':385,'multiline':False]['text':' Stack has to be alligned here. If not, we will have to fix it.','line_number':392,'multiline':False]['text':' Push registers such that we can access them from [base + code].','line_number':395,'multiline':False]['text':' Pass pointer to InvalidationBailoutStack structure.','line_number':398,'multiline':False]['text':' Reserve place for return value and BailoutInfo pointer','line_number':401,'multiline':False]['text':' Pass pointer to return value.','line_number':403,'multiline':False]['text':' Pass pointer to BailoutInfo','line_number':405,'multiline':False]['text':' Remove the return address, the IonScript, the register state','line_number':419,'multiline':False]['text':' (InvaliationBailoutStack) and the space that was allocated for the','line_number':420,'multiline':False]['text':' return value.','line_number':421,'multiline':False]['text':' remove the space that this frame was using before the bailout','line_number':424,'multiline':False]['text':' (computed by InvalidationBailout)','line_number':425,'multiline':False]['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r2.','line_number':428,'multiline':False]['text':' Do not erase the frame pointer in this function.','line_number':434,'multiline':False]['text':' Caller:','line_number':446,'multiline':False]['text':' [arg2] [arg1] [this] [[argc] [callee] [descr] [raddr]] <- sp','line_number':447,'multiline':False]['text':' Add |this|, in the counter of known arguments.','line_number':449,'multiline':False]['text':' Load |nformals| into numArgsReg.','line_number':458,'multiline':False]['text':' Stash another copy in t3, since we are going to do destructive operations','line_number':467,'multiline':False]['text':' on numArgsReg','line_number':468,'multiline':False]['text':' Including |this|, and |new.target|, there are (|nformals| + 1 +','line_number':477,'multiline':False]['text':' isConstructing) arguments to push to the stack.  Then we push a','line_number':478,'multiline':False]['text':' JitFrameLayout.  We compute the padding expressed in the number of extra','line_number':479,'multiline':False]['text':' |undefined| values to push on the stack.','line_number':480,'multiline':False]['text':' for padding ','line_number':490,'multiline':True]['text':' for |this| ','line_number':490,'multiline':True]['text':' Load the number of |undefined|s to push into t1.','line_number':495,'multiline':False]['text':' Caller:','line_number':498,'multiline':False]['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ] <- sp <- t2','line_number':499,'multiline':False]['text':' '------ s3 -------'','line_number':500,'multiline':False]['text':'','line_number':501,'multiline':False]['text':' Rectifier frame:','line_number':502,'multiline':False]['text':' [undef] [undef] [undef] [arg2] [arg1] [this] [ [argc] [callee]','line_number':503,'multiline':False]['text':'                                                [descr] [raddr] ]','line_number':504,'multiline':False]['text':' '-------- t1 ---------' '------- s3 -------'','line_number':505,'multiline':False]['text':' Copy number of actual arguments into numActArgsReg','line_number':507,'multiline':False]['text':' Save %sp.','line_number':514,'multiline':False]['text':' Push undefined. (including the padding)','line_number':516,'multiline':False]['text':' Get the topmost argument.','line_number':528,'multiline':False]['text':' | - sizeof(Value)| is used to put rcx such that we can read the last','line_number':531,'multiline':False]['text':' argument, and not the value which is after.','line_number':532,'multiline':False]['text':' t0 <- nargs * 8','line_number':533,'multiline':False]['text':' t1 <- t2(saved sp) + nargs * 8','line_number':534,'multiline':False]['text':' Copy & Push arguments, |nargs| + 1 times (to include |this|).','line_number':537,'multiline':False]['text':' if constructing, copy newTarget','line_number':551,'multiline':False]['text':' thisFrame[numFormals] = prevFrame[argc]','line_number':559,'multiline':False]['text':' +1 for |this|. We want vp[argc], so don't subtract 1','line_number':562,'multiline':False]['text':' Again, 1 for |this|','line_number':567,'multiline':False]['text':' Caller:','line_number':574,'multiline':False]['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ] <- t2','line_number':575,'multiline':False]['text':'','line_number':576,'multiline':False]['text':'','line_number':577,'multiline':False]['text':' Rectifier frame:','line_number':578,'multiline':False]['text':' [undef] [undef] [undef] [arg2] [arg1] [this] <- sp [ [argc] [callee]','line_number':579,'multiline':False]['text':'                                                      [descr] [raddr] ]','line_number':580,'multiline':False]['text':' Construct sizeDescriptor.','line_number':582,'multiline':False]['text':' Construct JitFrameLayout.','line_number':586,'multiline':False]['text':' Push actual arguments.','line_number':588,'multiline':False]['text':' Push callee token.','line_number':590,'multiline':False]['text':' Push frame descriptor.','line_number':592,'multiline':False]['text':' Call the target function.','line_number':595,'multiline':False]['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':608,'multiline':False]['text':' Remove the rectifier frame.','line_number':616,'multiline':False]['text':' t2 <- descriptor with FrameType.','line_number':617,'multiline':False]['text':' t2 <- descriptor.','line_number':619,'multiline':False]['text':' Discard descriptor, calleeToken and number of actual arguments.','line_number':621,'multiline':False]['text':' Discard pushed arguments.','line_number':624,'multiline':False]['text':' - When bailout is done via out of line code (lazy bailout).
 * Frame size is stored in $ra (look at
 * CodeGeneratorMIPS64::generateOutOfLineCode()) and thunk code should save it
 * on stack. Other difference is that members snapshotOffset_ and padding_ are
 * pushed to the stack by CodeGeneratorMIPS64::visitOutOfLineBailout(). Field
 * frameClassId_ is forced to be NO_FRAME_SIZE_CLASS_ID
 * (See: JitRuntime::generateBailoutHandler).
 ','line_number':630,'multiline':True]['text':' Push the frameSize_ stored in ra','line_number':639,'multiline':False]['text':' See: CodeGeneratorMIPS64::generateOutOfLineCode()','line_number':640,'multiline':False]['text':' Push registers such that we can access them from [base + code].','line_number':643,'multiline':False]['text':' Put pointer to BailoutStack as first argument to the Bailout()','line_number':646,'multiline':False]['text':' Put pointer to BailoutInfo','line_number':654,'multiline':False]['text':' Get BailoutInfo pointer','line_number':666,'multiline':False]['text':' Stack is:','line_number':669,'multiline':False]['text':'     [frame]','line_number':670,'multiline':False]['text':'     snapshotOffset','line_number':671,'multiline':False]['text':'     frameSize','line_number':672,'multiline':False]['text':'     [bailoutFrame]','line_number':673,'multiline':False]['text':'     [bailoutInfo]','line_number':674,'multiline':False]['text':'','line_number':675,'multiline':False]['text':' Remove both the bailout frame and the topmost Ion frame's stack.','line_number':676,'multiline':False]['text':' Load frameSize from stack','line_number':677,'multiline':False]['text':' Remove complete BailoutStack class and data after it','line_number':681,'multiline':False]['text':' Remove frame size srom stack','line_number':683,'multiline':False]['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in a2.','line_number':686,'multiline':False]['text':' Avoid conflicts with argument registers while discarding the result after','line_number':708,'multiline':False]['text':' the function call.','line_number':709,'multiline':False]['text':' The context is the first argument; a0 is the first argument register.','line_number':716,'multiline':False]['text':' If it isn't a tail call, then the return address needs to be saved','line_number':720,'multiline':False]['text':' We're aligned to an exit frame, so link it up.','line_number':725,'multiline':False]['text':' Save the base of the argument set stored on the stack.','line_number':729,'multiline':False]['text':' Use temporary register.','line_number':732,'multiline':False]['text':' Reserve space for the outparameter.','line_number':738,'multiline':False]['text':' Reserve 4-byte space to make stack aligned to 8-byte.','line_number':756,'multiline':False]['text':' Copy any arguments.','line_number':787,'multiline':False]['text':' Copy the implicit outparam, if any.','line_number':811,'multiline':False]['text':' Test for failure.','line_number':823,'multiline':False]['text':' Called functions return bools, which are 0/false and non-zero/true','line_number':829,'multiline':False]['text':' Load the outparam and free any allocated stack.','line_number':838,'multiline':False]['text':' Call into C++ to mark this GC thing.','line_number':903,'multiline':False]['text':'','line_number':965,'multiline':False]['text':' The code generated below expects that the current stack pointer points','line_number':966,'multiline':False]['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':967,'multiline':False]['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':968,'multiline':False]['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':969,'multiline':False]['text':' callee script that jumped to this code.','line_number':970,'multiline':False]['text':'','line_number':971,'multiline':False]['text':' Thus the expected stack is:','line_number':972,'multiline':False]['text':'','line_number':973,'multiline':False]['text':'                                   StackPointer ----+','line_number':974,'multiline':False]['text':'                                                    v','line_number':975,'multiline':False]['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':976,'multiline':False]['text':' MEM-HI                                       MEM-LOW','line_number':977,'multiline':False]['text':'','line_number':978,'multiline':False]['text':'','line_number':979,'multiline':False]['text':' The generated jitcode is responsible for overwriting the','line_number':980,'multiline':False]['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':981,'multiline':False]['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':982,'multiline':False]['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':983,'multiline':False]['text':' the return address into that frame.  The frame could either be an','line_number':984,'multiline':False]['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':985,'multiline':False]['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':986,'multiline':False]['text':' was entered by some caller jit-frame further down the stack).','line_number':987,'multiline':False]['text':'','line_number':988,'multiline':False]['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':989,'multiline':False]['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':990,'multiline':False]['text':' return address into the appropriate fields on the current jitActivation.','line_number':991,'multiline':False]['text':'','line_number':992,'multiline':False]['text':' There are a fixed number of different path types that can lead to the','line_number':993,'multiline':False]['text':' current frame, which is either a baseline or ion frame:','line_number':994,'multiline':False]['text':'','line_number':995,'multiline':False]['text':' <Baseline-Or-Ion>','line_number':996,'multiline':False]['text':' ^','line_number':997,'multiline':False]['text':' |','line_number':998,'multiline':False]['text':' ^--- Ion','line_number':999,'multiline':False]['text':' |','line_number':1000,'multiline':False]['text':' ^--- Baseline Stub <---- Baseline','line_number':1001,'multiline':False]['text':' |','line_number':1002,'multiline':False]['text':' ^--- Argument Rectifier','line_number':1003,'multiline':False]['text':' |    ^','line_number':1004,'multiline':False]['text':' |    |','line_number':1005,'multiline':False]['text':' |    ^--- Ion','line_number':1006,'multiline':False]['text':' |    |','line_number':1007,'multiline':False]['text':' |    ^--- Baseline Stub <---- Baseline','line_number':1008,'multiline':False]['text':' |','line_number':1009,'multiline':False]['text':' ^--- Entry Frame (From C++)','line_number':1010,'multiline':False]['text':'','line_number':1011,'multiline':False]['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':1023,'multiline':False]['text':' Load the frame descriptor into |scratch1|, figure out what to do depending','line_number':1036,'multiline':False]['text':' on its type.','line_number':1037,'multiline':False]['text':' Going into the conditionals, we will have:','line_number':1041,'multiline':False]['text':'      FrameDescriptor.size in scratch1','line_number':1042,'multiline':False]['text':'      FrameDescriptor.type in scratch2','line_number':1043,'multiline':False]['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':1047,'multiline':False]['text':' The WasmToJSJit is just another kind of entry.','line_number':1068,'multiline':False]['text':'','line_number':1075,'multiline':False]['text':' FrameType::IonJS','line_number':1076,'multiline':False]['text':'','line_number':1077,'multiline':False]['text':' Stack layout:','line_number':1078,'multiline':False]['text':'                  ...','line_number':1079,'multiline':False]['text':'                  Ion-Descriptor','line_number':1080,'multiline':False]['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':1081,'multiline':False]['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':1082,'multiline':False]['text':'                  ... arguments ...           |','line_number':1083,'multiline':False]['text':'                  ActualArgc          |','line_number':1084,'multiline':False]['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':1085,'multiline':False]['text':'                  Descriptor          |','line_number':1086,'multiline':False]['text':'        FP -----> ReturnAddr          |','line_number':1087,'multiline':False]['text':'','line_number':1088,'multiline':False]['text':' |scratch1| contains Descriptor.size','line_number':1091,'multiline':False]['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1093,'multiline':False]['text':' in lastProfilingCallSite.','line_number':1094,'multiline':False]['text':' Store return frame in lastProfilingFrame.','line_number':1099,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1100,'multiline':False]['text':'','line_number':1107,'multiline':False]['text':' FrameType::BaselineStub','line_number':1108,'multiline':False]['text':'','line_number':1109,'multiline':False]['text':' Look past the stub and store the frame pointer to','line_number':1110,'multiline':False]['text':' the baselineJS frame prior to it.','line_number':1111,'multiline':False]['text':'','line_number':1112,'multiline':False]['text':' Stack layout:','line_number':1113,'multiline':False]['text':'              ...','line_number':1114,'multiline':False]['text':'              BL-Descriptor','line_number':1115,'multiline':False]['text':' Prev-FP ---> BL-ReturnAddr','line_number':1116,'multiline':False]['text':'      +-----> BL-PrevFramePointer','line_number':1117,'multiline':False]['text':'      |       ... BL-FrameData ...','line_number':1118,'multiline':False]['text':'      |       BLStub-Descriptor','line_number':1119,'multiline':False]['text':'      |       BLStub-ReturnAddr','line_number':1120,'multiline':False]['text':'      |       BLStub-StubPointer          |','line_number':1121,'multiline':False]['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1122,'multiline':False]['text':'              ... arguments ...           |','line_number':1123,'multiline':False]['text':'              ActualArgc          |','line_number':1124,'multiline':False]['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1125,'multiline':False]['text':'              Descriptor          |','line_number':1126,'multiline':False]['text':'    FP -----> ReturnAddr          |','line_number':1127,'multiline':False]['text':'','line_number':1128,'multiline':False]['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1129,'multiline':False]['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1130,'multiline':False]['text':' be avoided.','line_number':1131,'multiline':False]['text':'','line_number':1132,'multiline':False]['text':' Skip past BL-PrevFramePtr','line_number':1145,'multiline':False]['text':'','line_number':1150,'multiline':False]['text':' FrameType::Rectifier','line_number':1151,'multiline':False]['text':'','line_number':1152,'multiline':False]['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1153,'multiline':False]['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1154,'multiline':False]['text':'','line_number':1155,'multiline':False]['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1156,'multiline':False]['text':'','line_number':1157,'multiline':False]['text':'              Ion-Descriptor','line_number':1158,'multiline':False]['text':'              Ion-ReturnAddr','line_number':1159,'multiline':False]['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1160,'multiline':False]['text':'              < COMMON LAYOUT >','line_number':1161,'multiline':False]['text':'','line_number':1162,'multiline':False]['text':' Stack layout if caller of rectifier was Baseline:','line_number':1163,'multiline':False]['text':'','line_number':1164,'multiline':False]['text':'              BL-Descriptor','line_number':1165,'multiline':False]['text':' Prev-FP ---> BL-ReturnAddr','line_number':1166,'multiline':False]['text':'      +-----> BL-SavedFramePointer','line_number':1167,'multiline':False]['text':'      |       ... baseline frame data ...','line_number':1168,'multiline':False]['text':'      |       BLStub-Descriptor','line_number':1169,'multiline':False]['text':'      |       BLStub-ReturnAddr','line_number':1170,'multiline':False]['text':'      |       BLStub-StubPointer          |','line_number':1171,'multiline':False]['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1172,'multiline':False]['text':'              ... args to rectifier ...   |','line_number':1173,'multiline':False]['text':'              < COMMON LAYOUT >','line_number':1174,'multiline':False]['text':'','line_number':1175,'multiline':False]['text':' Common stack layout:','line_number':1176,'multiline':False]['text':'','line_number':1177,'multiline':False]['text':'              ActualArgc          |','line_number':1178,'multiline':False]['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1179,'multiline':False]['text':'              Rect-Descriptor     |','line_number':1180,'multiline':False]['text':'              Rect-ReturnAddr     |','line_number':1181,'multiline':False]['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1182,'multiline':False]['text':'              ActualArgc      |','line_number':1183,'multiline':False]['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1184,'multiline':False]['text':'              Descriptor      |','line_number':1185,'multiline':False]['text':'    FP -----> ReturnAddr      |','line_number':1186,'multiline':False]['text':'','line_number':1187,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1190,'multiline':False]['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1198,'multiline':False]['text':' and |scratch2| points to Rectifier frame','line_number':1199,'multiline':False]['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1200,'multiline':False]['text':' Check for either Ion or BaselineStub frame.','line_number':1204,'multiline':False]['text':' Handle Rectifier <- IonJS','line_number':1209,'multiline':False]['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1210,'multiline':False]['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1216,'multiline':False]['text':'             RectifierFrameLayout::Size()','line_number':1217,'multiline':False]['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1225,'multiline':False]['text':' frame.','line_number':1226,'multiline':False]['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1230,'multiline':False]['text':' FrameType::IonICCall','line_number':1246,'multiline':False]['text':'','line_number':1247,'multiline':False]['text':' The caller is always an IonJS frame.','line_number':1248,'multiline':False]['text':'','line_number':1249,'multiline':False]['text':'              Ion-Descriptor','line_number':1250,'multiline':False]['text':'              Ion-ReturnAddr','line_number':1251,'multiline':False]['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1252,'multiline':False]['text':'              StubCode               |','line_number':1253,'multiline':False]['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1254,'multiline':False]['text':'              ICCallFrame-ReturnAddr |','line_number':1255,'multiline':False]['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1256,'multiline':False]['text':'              ActualArgc      |','line_number':1257,'multiline':False]['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1258,'multiline':False]['text':'              Descriptor      |','line_number':1259,'multiline':False]['text':'    FP -----> ReturnAddr      |','line_number':1260,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1263,'multiline':False]['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1267,'multiline':False]['text':' Assert previous frame is an IonJS frame.','line_number':1271,'multiline':False]['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1284,'multiline':False]['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1290,'multiline':False]['text':'                       IonICCallFrameLayout::Size()','line_number':1291,'multiline':False]['text':'','line_number':1298,'multiline':False]['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1299,'multiline':False]['text':'','line_number':1300,'multiline':False]['text':' If at an entry frame, store null into both fields.','line_number':1301,'multiline':False]['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1302,'multiline':False]['text':' of view of the JIT.','line_number':1303,'multiline':False]['text':'','line_number':1304,'multiline':False]