['text':' @(#)s_expm1.c 5.1 93/09/24 ','line_number':1,'multiline':True]['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':2,'multiline':True]['text':'#include <sys/cdefs.h>','line_number':13,'multiline':False]['text':'__FBSDID("$FreeBSD$");','line_number':14,'multiline':False]['text':' expm1(x)
 * Returns exp(x)-1, the exponential of x minus 1.
 *
 * Method
 *   1. Argument reduction:
 *	Given x, find r and integer k such that
 *
 *               x = k*ln2 + r,  |r| <= 0.5*ln2 ~ 0.34658
 *
 *      Here a correction term c will be computed to compensate
 *	the error in r when rounded to a floating-point number.
 *
 *   2. Approximating expm1(r) by a special rational function on
 *	the interval [0,0.34658]:
 *	Since
 *	    r*(exp(r)+1)/(exp(r)-1) = 2+ r^2/6 - r^4/360 + ...
 *	we define R1(r*r) by
 *	    r*(exp(r)+1)/(exp(r)-1) = 2+ r^2/6 * R1(r*r)
 *	That is,
 *	    R1(r**2) = 6/r *((exp(r)+1)/(exp(r)-1) - 2/r)
 *		     = 6/r * ( 1 + 2.0*(1/(exp(r)-1) - 1/r))
 *		     = 1 - r^2/60 + r^4/2520 - r^6/100800 + ...
 *      We use a special Reme algorithm on [0,0.347] to generate
 * 	a polynomial of degree 5 in r*r to approximate R1. The
 *	maximum error of this polynomial approximation is bounded
 *	by 2**-61. In other words,
 *	    R1(z) ~ 1.0 + Q1*z + Q2*z**2 + Q3*z**3 + Q4*z**4 + Q5*z**5
 *	where 	Q1  =  -1.6666666666666567384E-2,
 * 		Q2  =   3.9682539681370365873E-4,
 * 		Q3  =  -9.9206344733435987357E-6,
 * 		Q4  =   2.5051361420808517002E-7,
 * 		Q5  =  -6.2843505682382617102E-9;
 *		z   =  r*r,
 *	with error bounded by
 *	    |                  5           |     -61
 *	    | 1.0+Q1*z+...+Q5*z   -  R1(z) | <= 2
 *	    |                              |
 *
 *	expm1(r) = exp(r)-1 is then computed by the following
 * 	specific way which minimize the accumulation rounding error:
 *			       2     3
 *			      r     r    [ 3 - (R1 + R1*r/2)  ]
 *	      expm1(r) = r + --- + --- * [--------------------]
 *		              2     2    [ 6 - r*(3 - R1*r/2) ]
 *
 *	To compensate the error in the argument reduction, we use
 *		expm1(r+c) = expm1(r) + c + expm1(r)*c
 *			   ~ expm1(r) + c + r*c
 *	Thus c+r*c will be added in as the correction terms for
 *	expm1(r+c). Now rearrange the term to avoid optimization
 * 	screw up:
 *		        (      2                                    2 )
 *		        ({  ( r    [ R1 -  (3 - R1*r/2) ]  )  }    r  )
 *	 expm1(r+c)~r - ({r*(--- * [--------------------]-c)-c} - --- )
 *	                ({  ( 2    [ 6 - r*(3 - R1*r/2) ]  )  }    2  )
 *                      (                                             )
 *
 *		   = r - E
 *   3. Scale back to obtain expm1(x):
 *	From step 1, we have
 *	   expm1(x) = either 2^k*[expm1(r)+1] - 1
 *		    = or     2^k*[expm1(r) + (1-2^-k)]
 *   4. Implementation notes:
 *	(A). To save one multiplication, we scale the coefficient Qi
 *	     to Qi*2^i, and replace z by (x^2)/2.
 *	(B). To achieve maximum accuracy, we compute expm1(x) by
 *	  (i)   if x < -56*ln2, return -1.0, (raise inexact if x!=inf)
 *	  (ii)  if k=0, return r-E
 *	  (iii) if k=-1, return 0.5*(r-E)-0.5
 *        (iv)	if k=1 if r < -0.25, return 2*((r+0.5)- E)
 *	       	       else	     return  1.0+2.0*(r-E);
 *	  (v)   if (k<-2||k>56) return 2^k(1-(E-r)) - 1 (or exp(x)-1)
 *	  (vi)  if k <= 20, return 2^k((1-2^-k)-(E-r)), else
 *	  (vii) return 2^k(1-((E+2^-k)-r))
 *
 * Special cases:
 *	expm1(INF) is INF, expm1(NaN) is NaN;
 *	expm1(-INF) is -1, and
 *	for finite argument, only expm1(0)=0 is exact.
 *
 * Accuracy:
 *	according to an error analysis, the error is always less than
 *	1 ulp (unit in the last place).
 *
 * Misc. info.
 *	For IEEE double
 *	    if x >  7.09782712893383973096e+02 then expm1(x) overflow
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following
 * constants. The decimal values may be used, provided that the
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 ','line_number':16,'multiline':True]['text':' 0x40862E42, 0xFEFA39EF ','line_number':118,'multiline':True]['text':' 0x3fe62e42, 0xfee00000 ','line_number':119,'multiline':True]['text':' 0x3dea39ef, 0x35793c76 ','line_number':120,'multiline':True]['text':' 0x3ff71547, 0x652b82fe ','line_number':121,'multiline':True]['text':' Scaled Q's: Qn_here = 2**n * Qn_above, for R(2*z) where z = hxs = x*x/2: ','line_number':122,'multiline':True]['text':' BFA11111 111110F4 ','line_number':123,'multiline':True]['text':' 3F5A01A0 19FE5585 ','line_number':124,'multiline':True]['text':' BF14CE19 9EAADBB7 ','line_number':125,'multiline':True]['text':' 3ED0CFCA 86E65239 ','line_number':126,'multiline':True]['text':' BE8AFDB7 6E09C32D ','line_number':127,'multiline':True]['text':' sign bit of x ','line_number':139,'multiline':True]['text':' high word of |x| ','line_number':140,'multiline':True]['text':' filter out huge and non-finite argument ','line_number':142,'multiline':True]['text':' if |x|>=56*ln2 ','line_number':143,'multiline':True]['text':' if |x|>=709.78... ','line_number':144,'multiline':True]['text':' NaN ','line_number':149,'multiline':True]['text':' exp(+-inf)={inf,-1} ','line_number':150,'multiline':True]['text':' overflow ','line_number':152,'multiline':True]['text':' x < -56*ln2, return -1.0 with inexact ','line_number':154,'multiline':True]['text':' raise inexact ','line_number':155,'multiline':True]['text':' return -1 ','line_number':156,'multiline':True]['text':' argument reduction ','line_number':160,'multiline':True]['text':' if  |x| > 0.5 ln2 ','line_number':161,'multiline':True]['text':' and |x| < 1.5 ln2 ','line_number':162,'multiline':True]['text':' t*ln2_hi is exact here ','line_number':170,'multiline':True]['text':' when |x|<2**-54, return x ','line_number':176,'multiline':True]['text':' return x with inexact flags when x!=0 ','line_number':177,'multiline':True]['text':' x is now in primary range ','line_number':182,'multiline':True]['text':' c is 0 ','line_number':188,'multiline':True]['text':' 2^k ','line_number':190,'multiline':True]['text':' suffice to return exp(x)-1 ','line_number':198,'multiline':True]['text':' t=1-2^-k ','line_number':209,'multiline':True]['text':' 2^-k ','line_number':213,'multiline':True]