['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
***************************************************************************
*   Copyright (C) 1999-2016 International Business Machines Corporation
*   and others. All rights reserved.
***************************************************************************
','line_number':3,'multiline':True]['text':'','line_number':9,'multiline':False]['text':'  file:  rbbi.cpp  Contains the implementation of the rule based break iterator','line_number':10,'multiline':False]['text':'                   runtime engine and the API implementation for','line_number':11,'multiline':False]['text':'                   class RuleBasedBreakIterator','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' for 'typeid' to work','line_number':15,'multiline':False]['text':' The state number of the starting state','line_number':47,'multiline':False]['text':' The state-transition value indicating "stop"','line_number':50,'multiline':False]['text':'=======================================================================','line_number':57,'multiline':False]['text':' constructors','line_number':58,'multiline':False]['text':'=======================================================================','line_number':59,'multiline':False]['text':'*
 * Constructs a RuleBasedBreakIterator that uses the already-created
 * tables object that is passed in as a parameter.
 ','line_number':61,'multiline':True]['text':' status checked in constructor','line_number':69,'multiline':False]['text':'','line_number':85,'multiline':False]['text':'  Construct from precompiled binary rules (tables).  This constructor is public API,','line_number':86,'multiline':False]['text':'  taking the rules as a (const uint8_t *) to match the type produced by getBinaryRules().','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':'   Constructor   from a UDataMemory handle to precompiled break rules','line_number':126,'multiline':False]['text':'                 stored in an ICU data file.','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':129,'multiline':False]['text':' status checked in constructor','line_number':134,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':152,'multiline':False]['text':'','line_number':153,'multiline':False]['text':'   Constructor       from a set of rules supplied as a string.','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':156,'multiline':False]['text':' Note:  This is a bit awkward.  The RBBI ruleBuilder has a factory method that','line_number':166,'multiline':False]['text':'        creates and returns a complete RBBI.  From here, in a constructor, we','line_number':167,'multiline':False]['text':'        can't just return the object created by the builder factory, hence','line_number':168,'multiline':False]['text':'        the assignment of the factory created object to "this".','line_number':169,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' Default Constructor.      Create an empty shell that can be set up later.','line_number':179,'multiline':False]['text':'                           Used when creating a RuleBasedBreakIterator from a set','line_number':180,'multiline':False]['text':'                           of rules.','line_number':181,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':182,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':'   Copy constructor.  Will produce a break iterator with the same behavior,','line_number':193,'multiline':False]['text':'                      and which iterates over the same text, as the one passed in.','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':196,'multiline':False]['text':'*
 * Destructor
 ','line_number':207,'multiline':True]['text':' fCharIter was adopted from the outside.','line_number':212,'multiline':False]['text':'*
 * Assignment operator.  Sets this iterator to have the same behavior,
 * and iterate over the same text, as the one passed in.
 * TODO: needs better handling of memory allocation errors.
 ','line_number':239,'multiline':True]['text':' Just rebuild for now','line_number':253,'multiline':False]['text':' TODO: clone fLanguageBreakEngines from "that"','line_number':255,'multiline':False]['text':' This is a little bit tricky - it will intially appear that','line_number':265,'multiline':False]['text':'  this->fCharIter is adopted, even if that->fCharIter was','line_number':266,'multiline':False]['text':'  not adopted.  That's ok.','line_number':267,'multiline':False]['text':' TODO: both the dictionary and the main cache need to be copied.','line_number':295,'multiline':False]['text':'       Current position could be within a dictionary range. Trying to continue','line_number':296,'multiline':False]['text':'       the iteration without the caches present would go to the rules, with','line_number':297,'multiline':False]['text':'       the assumption that the current position is on a rule boundary.','line_number':298,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':307,'multiline':False]['text':'','line_number':308,'multiline':False]['text':'    init()      Shared initialization routine.   Used by all the constructors.','line_number':309,'multiline':False]['text':'                Initializes all fields, leaving the object in a consistent state.','line_number':310,'multiline':False]['text':'','line_number':311,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':312,'multiline':False]['text':' Note: IBM xlC is unable to assign or initialize member fText from UTEXT_INITIALIZER.','line_number':326,'multiline':False]['text':' fText                 = UTEXT_INITIALIZER;','line_number':327,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':356,'multiline':False]['text':'','line_number':357,'multiline':False]['text':'    clone - Returns a newly-constructed RuleBasedBreakIterator with the same','line_number':358,'multiline':False]['text':'            behavior, and iterating over the same text, as this one.','line_number':359,'multiline':False]['text':'            Virtual function: does the right thing with subclasses.','line_number':360,'multiline':False]['text':'','line_number':361,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':362,'multiline':False]['text':'*
 * Equality operator.  Returns TRUE if both BreakIterators are of the
 * same class, have the same behavior, and iterate over the same text.
 ','line_number':368,'multiline':True]['text':' The base class BreakIterator carries no state that participates in equality,','line_number':381,'multiline':False]['text':' and does not implement an equality function that would otherwise be','line_number':382,'multiline':False]['text':' checked at this point.','line_number':383,'multiline':False]['text':' The two break iterators are operating on different text,','line_number':388,'multiline':False]['text':'   or have a different iteration position.','line_number':389,'multiline':False]['text':'   Note that fText's position is always the same as the break iterator's position.','line_number':390,'multiline':False]['text':' The two break iterators are using the same rules.','line_number':402,'multiline':False]['text':'*
 * Compute a hash code for this BreakIterator
 * @return A hash code
 ','line_number':408,'multiline':True]['text':' Set up a dummy CharacterIterator to be returned if anyone','line_number':430,'multiline':False]['text':'   calls getText().  With input from UText, there is no reasonable','line_number':431,'multiline':False]['text':'   way to return a characterIterator over the actual input text.','line_number':432,'multiline':False]['text':'   Return one over an empty string instead - this is the closest','line_number':433,'multiline':False]['text':'   we can come to signaling a failure.','line_number':434,'multiline':False]['text':'   (GetText() is obsolete, this failure is sort of OK)','line_number':435,'multiline':False]['text':' existing fCharIter was adopted from the outside.  Delete it now.','line_number':439,'multiline':False]['text':'=======================================================================','line_number':454,'multiline':False]['text':' BreakIterator overrides','line_number':455,'multiline':False]['text':'=======================================================================','line_number':456,'multiline':False]['text':'*
 * Return a CharacterIterator over the text being analyzed.
 ','line_number':458,'multiline':True]['text':'*
 * Set the iterator to analyze a new piece of text.  This function resets
 * the current iteration position to the beginning of the text.
 * @param newText An iterator over the text to analyze.
 ','line_number':466,'multiline':True]['text':' If we are holding a CharacterIterator adopted from a','line_number':473,'multiline':False]['text':'   previous call to this function, delete it now.','line_number':474,'multiline':False]['text':' startIndex !=0 wants to be an error, but there's no way to report it.','line_number':484,'multiline':False]['text':' Make the iterator text be an empty string.','line_number':485,'multiline':False]['text':'*
 * Set the iterator to analyze a new piece of text.  This function resets
 * the current iteration position to the beginning of the text.
 * @param newText An iterator over the text to analyze.
 ','line_number':493,'multiline':True]['text':' Set up a character iterator on the string.','line_number':505,'multiline':False]['text':'   Needed in case someone calls getText().','line_number':506,'multiline':False]['text':'  Can not, unfortunately, do this lazily on the (probably never)','line_number':507,'multiline':False]['text':'  call to getText(), because getText is const.','line_number':508,'multiline':False]['text':' old fCharIter was adopted from the outside.  Delete it.','line_number':512,'multiline':False]['text':'*
 *  Provide a new UText for the input text.  Must reference text with contents identical
 *  to the original.
 *  Intended for use with text data originating in Java (garbage collected) environments
 *  where the data may be moved in memory at arbitrary times.
 ','line_number':521,'multiline':True]['text':'  Shallow read-only clone of the new UText into the existing input UText','line_number':536,'multiline':False]['text':' Sanity check.  The new input utext is supposed to have the exact same','line_number':543,'multiline':False]['text':' contents as the old.  If we can't set to the same position, it doesn't.','line_number':544,'multiline':False]['text':' The contents underlying the old utext might be invalid at this point,','line_number':545,'multiline':False]['text':' so it's not safe to check directly.','line_number':546,'multiline':False]['text':'*
 * Sets the current iteration position to the beginning of the text, position zero.
 * @return The new iterator position, which is zero.
 ','line_number':553,'multiline':True]['text':'*
 * Sets the current iteration position to the end of the text.
 * @return The text's past-the-end offset.
 ','line_number':567,'multiline':True]['text':' Has side effect of setting iterator position.','line_number':573,'multiline':False]['text':'*
 * Advances the iterator either forward or backward the specified number of steps.
 * Negative values move backward, and positive values move forward.  This is
 * equivalent to repeatedly calling next() or previous().
 * @param n The number of steps to move.  The sign indicates the direction
 * (negative is backwards, and positive is forwards).
 * @return The character offset of the boundary position n boundaries away from
 * the current one.
 ','line_number':580,'multiline':True]['text':'*
 * Advances the iterator to the next boundary position.
 * @return The position of the first boundary after this one.
 ','line_number':605,'multiline':True]['text':'*
 * Move the iterator backwards, to the boundary preceding the current one.
 *
 *         Starts from the current position within fText.
 *         Starting position need not be on a boundary.
 *
 * @return The position of the boundary position immediately preceding the starting position.
 ','line_number':614,'multiline':True]['text':'*
 * Sets the iterator to refer to the first boundary position following
 * the specified position.
 * @param startPos The position from which to begin searching for a break position.
 * @return The position of the first break after the current position.
 ','line_number':628,'multiline':True]['text':' if the supplied position is before the beginning, return the','line_number':635,'multiline':False]['text':' text's starting offset','line_number':636,'multiline':False]['text':' Move requested offset to a code point start. It might be on a trail surrogate,','line_number':641,'multiline':False]['text':' or on a trail byte if the input is UTF-8. Or it may be beyond the end of the text.','line_number':642,'multiline':False]['text':'*
 * Sets the iterator to refer to the last boundary position before the
 * specified position.
 * @param offset The position to begin searching for a break from.
 * @return The position of the last boundary before the starting position.
 ','line_number':651,'multiline':True]['text':' Move requested offset to a code point start. It might be on a trail surrogate,','line_number':662,'multiline':False]['text':' or on a trail byte if the input is UTF-8.','line_number':663,'multiline':False]['text':'*
 * Returns true if the specfied position is a boundary position.  As a side
 * effect, leaves the iterator pointing to the first boundary position at
 * or after "offset".
 *
 * @param offset the offset to check.
 * @return True if "offset" is a boundary position.
 ','line_number':673,'multiline':True]['text':' out-of-range indexes are never boundary positions','line_number':682,'multiline':False]['text':' For side effects on current position, tag values.','line_number':684,'multiline':False]['text':' Adjust offset to be on a code point boundary and not beyond the end of the text.','line_number':688,'multiline':False]['text':' Note that isBoundary() is always false for offsets that are not on code point boundaries.','line_number':689,'multiline':False]['text':' But we still need the side effect of leaving iteration at the following boundary.','line_number':690,'multiline':False]['text':' Original offset is beyond the end of the text. Return FALSE, it's not a boundary,','line_number':702,'multiline':False]['text':' but the iteration position remains set to the end of the text, which is a boundary.','line_number':703,'multiline':False]['text':' Not on a boundary. isBoundary() must leave iterator on the following boundary.','line_number':707,'multiline':False]['text':' Cache->seek(), above, left us on the preceding boundary, so advance one.','line_number':708,'multiline':False]['text':'*
 * Returns the current iteration position.
 * @return The current iteration position.
 ','line_number':715,'multiline':True]['text':'=======================================================================','line_number':724,'multiline':False]['text':' implementation','line_number':725,'multiline':False]['text':'=======================================================================','line_number':726,'multiline':False]['text':'','line_number':728,'multiline':False]['text':' RBBIRunMode  -  the state machine runs an extra iteration at the beginning and end','line_number':729,'multiline':False]['text':'                 of user text.  A variable with this enum type keeps track of where we','line_number':730,'multiline':False]['text':'                 are.  The state machine only fetches user input while in the RUN mode.','line_number':731,'multiline':False]['text':'','line_number':732,'multiline':False]['text':' state machine processing is before first char of input','line_number':734,'multiline':False]['text':' state machine processing is in the user text','line_number':735,'multiline':False]['text':' state machine processing is after end of user text.','line_number':736,'multiline':False]['text':' Wrapper functions to select the appropriate handleNext() or handleSafePrevious()','line_number':740,'multiline':False]['text':' instantiation, based on whether an 8 or 16 bit table is required.','line_number':741,'multiline':False]['text':'','line_number':742,'multiline':False]['text':' These Trie access functions will be inlined within the handleNext()/Previous() instantions.','line_number':743,'multiline':False]['text':'-----------------------------------------------------------------------------------','line_number':789,'multiline':False]['text':'','line_number':790,'multiline':False]['text':'  handleNext()','line_number':791,'multiline':False]['text':'     Run the state machine to find a boundary','line_number':792,'multiline':False]['text':'','line_number':793,'multiline':False]['text':'-----------------------------------------------------------------------------------','line_number':794,'multiline':False]['text':' handleNext always sets the break tag value.','line_number':815,'multiline':False]['text':' Set the default for it.','line_number':816,'multiline':False]['text':' if we're already at the end of the text, return DONE.','line_number':821,'multiline':False]['text':'  Set the initial state for the state machine','line_number':831,'multiline':False]['text':'(statetable->fTableData + (statetable->fRowLen * state));','line_number':834,'multiline':False]['text':' loop until we reach the end of the text or transition to state 0','line_number':845,'multiline':False]['text':'','line_number':846,'multiline':False]['text':' Reached end of input string.','line_number':849,'multiline':False]['text':' We have already run the loop one last time with the','line_number':851,'multiline':False]['text':'   character set to the psueudo {eof} value.  Now it is time','line_number':852,'multiline':False]['text':'   to unconditionally bail out.','line_number':853,'multiline':False]['text':' Run the loop one last time with the fake end-of-input character category.','line_number':856,'multiline':False]['text':'','line_number':861,'multiline':False]['text':' Get the char category.  An incoming category of 1 or 2 means that','line_number':862,'multiline':False]['text':'      we are preset for doing the beginning or end of input, and','line_number':863,'multiline':False]['text':'      that we shouldn't get a category from an actual text input character.','line_number':864,'multiline':False]['text':'','line_number':865,'multiline':False]['text':' look up the current character's character category, which tells us','line_number':867,'multiline':False]['text':' which column in the state table to look at.','line_number':868,'multiline':False]['text':' State Transition - move machine to its next state','line_number':885,'multiline':False]['text':'','line_number':886,'multiline':False]['text':' fNextState is a variable-length array.','line_number':888,'multiline':False]['text':'Not accessing beyond memory','line_number':890,'multiline':True]['text':' (statetable->fTableData + (statetable->fRowLen * state));','line_number':892,'multiline':False]['text':' Match found, common case.','line_number':898,'multiline':False]['text':' Remember the break status (tag) values.','line_number':902,'multiline':False]['text':' Lookahead match is completed.','line_number':904,'multiline':False]['text':' If we are at the position of the '/' in a look-ahead (hard break) rule;','line_number':914,'multiline':False]['text':' record the current position, to be returned later, if the full rule matches.','line_number':915,'multiline':False]['text':' TODO: Move this check before the previous check of fAccepting.','line_number':916,'multiline':False]['text':'       This would enable hard-break rules with no following context.','line_number':917,'multiline':False]['text':'       But there are line break test failures when trying this. Investigate.','line_number':918,'multiline':False]['text':'       Issue ICU-20837','line_number':919,'multiline':False]['text':' This is the normal exit from the lookup state machine.','line_number':929,'multiline':False]['text':' We have advanced through the string until it is certain that no','line_number':930,'multiline':False]['text':'   longer match is possible, no matter what characters follow.','line_number':931,'multiline':False]['text':' Advance to the next character.','line_number':935,'multiline':False]['text':' If this is a beginning-of-input loop iteration, don't advance','line_number':936,'multiline':False]['text':'    the input position.  The next iteration will be processing the','line_number':937,'multiline':False]['text':'    first real input character.','line_number':938,'multiline':False]['text':' The state machine is done.  Check whether it found a match...','line_number':948,'multiline':False]['text':' If the iterator failed to advance in the match engine, force it ahead by one.','line_number':950,'multiline':False]['text':'   (This really indicates a defect in the break rules.  They should always match','line_number':951,'multiline':False]['text':'    at least one character.)','line_number':952,'multiline':False]['text':' Leave the iterator at our result position.','line_number':960,'multiline':False]['text':'-----------------------------------------------------------------------------------','line_number':971,'multiline':False]['text':'','line_number':972,'multiline':False]['text':'  handleSafePrevious()','line_number':973,'multiline':False]['text':'','line_number':974,'multiline':False]['text':'      Iterate backwards using the safe reverse rules.','line_number':975,'multiline':False]['text':'      The logic of this function is similar to handleNext(), but simpler','line_number':976,'multiline':False]['text':'      because the safe table does not require as many options.','line_number':977,'multiline':False]['text':'','line_number':978,'multiline':False]['text':'-----------------------------------------------------------------------------------','line_number':979,'multiline':False]['text':' if we're already at the start of the text, return DONE.','line_number':997,'multiline':False]['text':'  Set the initial state for the state machine','line_number':1002,'multiline':False]['text':' loop until we reach the start of the text or transition to state 0','line_number':1008,'multiline':False]['text':'','line_number':1009,'multiline':False]['text':' look up the current character's character category, which tells us','line_number':1012,'multiline':False]['text':' which column in the state table to look at.','line_number':1013,'multiline':False]['text':'','line_number':1014,'multiline':False]['text':'  Off the dictionary flag bit. For reverse iteration it is not used.','line_number':1015,'multiline':False]['text':' State Transition - move machine to its next state','line_number':1030,'multiline':False]['text':'','line_number':1031,'multiline':False]['text':' fNextState is a variable-length array.','line_number':1032,'multiline':False]['text':'Not accessing beyond memory','line_number':1034,'multiline':True]['text':' This is the normal exit from the lookup state machine.','line_number':1039,'multiline':False]['text':' Transistion to state zero means we have found a safe point.','line_number':1040,'multiline':False]['text':' The state machine is done.  Check whether it found a match...','line_number':1045,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':1056,'multiline':False]['text':'','line_number':1057,'multiline':False]['text':'   getRuleStatus()   Return the break rule tag associated with the current','line_number':1058,'multiline':False]['text':'                     iterator position.  If the iterator arrived at its current','line_number':1059,'multiline':False]['text':'                     position by iterating forwards, the value will have been','line_number':1060,'multiline':False]['text':'                     cached by the handleNext() function.','line_number':1061,'multiline':False]['text':'','line_number':1062,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':1063,'multiline':False]['text':' fLastRuleStatusIndex indexes to the start of the appropriate status record','line_number':1067,'multiline':False]['text':'                                                 (the number of status values.)','line_number':1068,'multiline':False]['text':'   This function returns the last (largest) of the array of status values.','line_number':1069,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':1098,'multiline':False]['text':'','line_number':1099,'multiline':False]['text':'   getBinaryRules        Access to the compiled form of the rules,','line_number':1100,'multiline':False]['text':'                         for use by build system tools that save the data','line_number':1101,'multiline':False]['text':'                         for standard iterator types.','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':1104,'multiline':False]['text':'stackBuffer','line_number':1118,'multiline':True]['text':' preflighting for deprecated functionality','line_number':1124,'multiline':False]['text':'*
 * Release all static memory held by breakiterator.
 ','line_number':1145,'multiline':True]['text':'-------------------------------------------------------------------------------','line_number':1211,'multiline':False]['text':'','line_number':1212,'multiline':False]['text':'  getLanguageBreakEngine  Find an appropriate LanguageBreakEngine for the','line_number':1213,'multiline':False]['text':'                          the character c.','line_number':1214,'multiline':False]['text':'','line_number':1215,'multiline':False]['text':'-------------------------------------------------------------------------------','line_number':1216,'multiline':False]['text':' No existing dictionary took the character. See if a factory wants to','line_number':1239,'multiline':False]['text':' give us a new LanguageBreakEngine for this character.','line_number':1240,'multiline':False]['text':' If we got one, use it and push it on our stack.','line_number':1243,'multiline':False]['text':' Even if we can't remember it, we can keep looking it up, so','line_number':1246,'multiline':False]['text':' return it even if the push fails.','line_number':1247,'multiline':False]['text':' No engine is forthcoming for this character. Add it to the','line_number':1251,'multiline':False]['text':' reject set. Create the reject break engine if needed.','line_number':1252,'multiline':False]['text':' Put it last so that scripts for which we have an engine get tried','line_number':1259,'multiline':False]['text':' first.','line_number':1260,'multiline':False]['text':' If we can't insert it, or creation failed, get rid of it','line_number':1262,'multiline':False]['text':' Tell the reject engine about the character; at its discretion, it may','line_number':1270,'multiline':False]['text':' add more than just the one character.','line_number':1271,'multiline':False]['text':'*
 * Returns the description used to create this iterator
 ','line_number':1285,'multiline':True]['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':1301,'multiline':True]