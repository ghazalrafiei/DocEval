['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  ucnvbocu.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002mar27
*   created by: Markus W. Scherer
*
*   This is an implementation of the Binary Ordered Compression for Unicode,
*   in its MIME-friendly form as defined in http://www.unicode.org/notes/tn6/
','line_number':3,'multiline':True]['text':' BOCU-1 constants and macros ---------------------------------------------- ','line_number':34,'multiline':True]['text':'
 * BOCU-1 encodes the code points of a Unicode string as
 * a sequence of byte-encoded differences (slope detection),
 * preserving lexical order.
 *
 * Optimize the difference-taking for runs of Unicode text within
 * small scripts:
 *
 * Most small scripts are allocated within aligned 128-blocks of Unicode
 * code points. Lexical order is preserved if the "previous code point" state
 * is always moved into the middle of such a block.
 *
 * Additionally, "prev" is moved from anywhere in the Unihan and Hangul
 * areas into the middle of those areas.
 *
 * C0 control codes and space are encoded with their US-ASCII bytes.
 * "prev" is reset for C0 controls but not for space.
 ','line_number':36,'multiline':True]['text':' initial value for "prev": middle of the ASCII range ','line_number':55,'multiline':True]['text':' bounding byte values for differences ','line_number':58,'multiline':True]['text':' number of lead bytes ','line_number':65,'multiline':True]['text':' adjust trail byte counts for the use of some C0 control byte values ','line_number':68,'multiline':True]['text':' number of trail bytes ','line_number':72,'multiline':True]['text':'
 * number of positive and negative single-byte codes
 * (counting 0==BOCU1_MIDDLE among the positive ones)
 ','line_number':75,'multiline':True]['text':' number of lead bytes for positive and negative 2/3/4-byte sequences ','line_number':81,'multiline':True]['text':' The difference value range for single-byters. ','line_number':86,'multiline':True]['text':' The difference value range for double-byters. ','line_number':90,'multiline':True]['text':' The difference value range for 3-byters. ','line_number':94,'multiline':True]['text':' The lead byte start values. ','line_number':100,'multiline':True]['text':' ==BOCU1_MAX_LEAD ','line_number':104,'multiline':True]['text':' ==BOCU1_MIN+1 ','line_number':109,'multiline':True]['text':' The length of a byte sequence, according to the lead byte (!=BOCU1_RESET). ','line_number':111,'multiline':True]['text':' The length of a byte sequence, according to its packed form. ','line_number':117,'multiline':True]['text':'
 * 12 commonly used C0 control codes (and space) are only used to encode
 * themselves directly,
 * which makes BOCU-1 MIME-usable and reasonably safe for
 * ASCII-oriented software.
 *
 * These controls are
 *  0   NUL
 *
 *  7   BEL
 *  8   BS
 *
 *  9   TAB
 *  a   LF
 *  b   VT
 *  c   FF
 *  d   CR
 *
 *  e   SO
 *  f   SI
 *
 * 1a   SUB
 * 1b   ESC
 *
 * The other 20 C0 controls are also encoded directly (to preserve order)
 * but are also used as trail bytes in difference encoding
 * (for better compression).
 ','line_number':121,'multiline':True]['text':'
 * Byte value map for control codes,
 * from external byte values 0x00..0x20
 * to trail byte values 0..19 (0..0x13) as used in the difference calculation.
 * External byte values that are illegal as trail bytes are mapped to -1.
 ','line_number':151,'multiline':True]['text':'  0     1     2     3     4     5     6     7    ','line_number':159,'multiline':True]['text':'  8     9     a     b     c     d     e     f    ','line_number':162,'multiline':True]['text':'  10    11    12    13    14    15    16    17   ','line_number':165,'multiline':True]['text':'  18    19    1a    1b    1c    1d    1e    1f   ','line_number':168,'multiline':True]['text':'  20   ','line_number':171,'multiline':True]['text':'
 * Byte value map for control codes,
 * from trail byte values 0..19 (0..0x13) as used in the difference calculation
 * to external byte values 0x00..0x20.
 ','line_number':175,'multiline':True]['text':'  0     1     2     3     4     5     6     7    ','line_number':182,'multiline':True]['text':'  8     9     a     b     c     d     e     f    ','line_number':185,'multiline':True]['text':'  10    11    12    13   ','line_number':188,'multiline':True]['text':'*
 * Integer division and modulo with negative numerators
 * yields negative modulo results and quotients that are one more than
 * what we need here.
 * This macro adjust the results so that the modulo-value m is always >=0.
 *
 * For positive n, the if() condition is always FALSE.
 *
 * @param n Number to be split into quotient and rest.
 *          Will be modified to contain the quotient.
 * @param d Divisor.
 * @param m Output variable for the rest (modulo result).
 ','line_number':192,'multiline':True]['text':' Faster versions of packDiff() for single-byte-encoded diff values. ','line_number':214,'multiline':True]['text':'* Is a diff value encodable in a single byte? ','line_number':216,'multiline':True]['text':'* Encode a diff value in a single byte. ','line_number':219,'multiline':True]['text':'* Is a diff value encodable in two bytes? ','line_number':222,'multiline':True]['text':' BOCU-1 implementation functions ------------------------------------------ ','line_number':225,'multiline':True]['text':'*
 * Compute the next "previous" value for differencing
 * from the current code point.
 *
 * @param c current code point, 0x3040..0xd7a3 (rest handled by macro below)
 * @return "previous code point" state value
 ','line_number':229,'multiline':True]['text':' compute new prev ','line_number':238,'multiline':True]['text':' 0x3040<=c && ','line_number':239,'multiline':True]['text':' Hiragana is not 128-aligned ','line_number':240,'multiline':True]['text':' CJK Unihan ','line_number':243,'multiline':True]['text':' && c<=0xd7a3 ','line_number':245,'multiline':True]['text':' Korean Hangul ','line_number':246,'multiline':True]['text':' mostly small scripts ','line_number':249,'multiline':True]['text':'* Fast version of bocu1Prev() for most scripts. ','line_number':254,'multiline':True]['text':'
 * The BOCU-1 converter uses the standard setup code in ucnv.c/ucnv_bld.c.
 * The UConverter fields are used as follows:
 *
 * fromUnicodeStatus    encoder's prev (0 will be interpreted as BOCU1_ASCII_PREV)
 *
 * toUnicodeStatus      decoder's prev (0 will be interpreted as BOCU1_ASCII_PREV)
 * mode                 decoder's incomplete (diff<<2)|count (ignored when toULength==0)
 ','line_number':257,'multiline':True]['text':' BOCU-1-from-Unicode conversion functions --------------------------------- ','line_number':267,'multiline':True]['text':'*
 * Encode a difference -0x10ffff..0x10ffff in 1..4 bytes
 * and return a packed integer with them.
 *
 * The encoding favors small absolute differences with short encodings
 * to compress runs of same-script characters.
 *
 * Optimized version with unrolled loops and fewer floating-point operations
 * than the standard packDiff().
 *
 * @param diff difference value -0x10ffff..0x10ffff
 * @return
 *      0x010000zz for 1-byte sequence zz
 *      0x0200yyzz for 2-byte sequence yy zz
 *      0x03xxyyzz for 3-byte sequence xx yy zz
 *      0xwwxxyyzz for 4-byte sequence ww xx yy zz (ww>0x03)
 ','line_number':269,'multiline':True]['text':' assume we won't be called where diff==BOCU1_REACH_NEG_1=-64 ','line_number':290,'multiline':True]['text':' mostly positive differences, and single-byte negative ones ','line_number':292,'multiline':True]['text':' single-byte case handled in macros, see below ','line_number':293,'multiline':True]['text':' single byte ','line_number':295,'multiline':True]['text':' two bytes ','line_number':300,'multiline':True]['text':' three bytes ','line_number':310,'multiline':True]['text':' four bytes ','line_number':324,'multiline':True]['text':'
             * We know that / and % would deliver quotient 0 and rest=diff.
             * Avoid division and modulo for performance.
             ','line_number':335,'multiline':True]['text':' two- to four-byte negative differences ','line_number':344,'multiline':True]['text':' two bytes ','line_number':346,'multiline':True]['text':' three bytes ','line_number':355,'multiline':True]['text':' four bytes ','line_number':367,'multiline':True]['text':'
             * We know that NEGDIVMOD would deliver
             * quotient -1 and rest=diff+BOCU1_TRAIL_COUNT.
             * Avoid division and modulo for performance.
             ','line_number':376,'multiline':True]['text':' set up the local pointers ','line_number':404,'multiline':True]['text':' get the converter state from UConverter ','line_number':412,'multiline':True]['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':419,'multiline':True]['text':' conversion loop ','line_number':423,'multiline':True]['text':' fast loop for single-byte differences ','line_number':429,'multiline':True]['text':' use only one loop counter variable, targetCapacity, not also source ','line_number':430,'multiline':True]['text':' restore real values ','line_number':457,'multiline':True]['text':' wrong if offsets==NULL but does not matter ','line_number':459,'multiline':True]['text':' regular loop for all cases ','line_number':461,'multiline':True]['text':'
                 * ISO C0 control & space:
                 * Encode directly for MIME compatibility,
                 * and reset state except for space, to not disrupt compression.
                 ','line_number':468,'multiline':True]['text':' test the following code unit ','line_number':487,'multiline':True]['text':' no more input ','line_number':495,'multiline':True]['text':' negative lead surrogate as "incomplete" indicator to avoid c=0 everywhere else ','line_number':496,'multiline':True]['text':'
             * all other Unicode code points c==U+0021..U+10ffff
             * are encoded with the difference c-prev
             *
             * a new prev is computed from c,
             * placed in the middle of a 0x80-block (for most small scripts) or
             * in the middle of the Unihan and Hangul blocks
             * to statistically minimize the following difference
             ','line_number':501,'multiline':True]['text':' optimize 2-byte case ','line_number':521,'multiline':True]['text':' will be 2..4 ','line_number':541,'multiline':True]['text':' write the output character bytes from diff and length ','line_number':546,'multiline':True]['text':' from the first if in the loop we know that targetCapacity>0 ','line_number':547,'multiline':True]['text':' each branch falls through to the next one ','line_number':550,'multiline':True]['text':' case 1: handled above ','line_number':562,'multiline':True]['text':' will never occur ','line_number':567,'multiline':True]['text':'
                     * We actually do this backwards here:
                     * In order to save an intermediate variable, we output
                     * first to the overflow buffer what does not fit into the
                     * regular target.
                     ','line_number':575,'multiline':True]['text':' we know that 1<=targetCapacity<length<=4 ','line_number':581,'multiline':True]['text':' each branch falls through to the next one ','line_number':585,'multiline':True]['text':' will never occur ','line_number':596,'multiline':True]['text':' now output what fits into the regular target ','line_number':601,'multiline':True]['text':' length was reduced by targetCapacity ','line_number':602,'multiline':True]['text':' each branch falls through to the next one ','line_number':604,'multiline':True]['text':' will never occur ','line_number':618,'multiline':True]['text':' target overflow ','line_number':622,'multiline':True]['text':' target is full ','line_number':629,'multiline':True]['text':' set the converter state back into UConverter ','line_number':635,'multiline':True]['text':' write back the updated pointers ','line_number':639,'multiline':True]['text':'
 * Identical to _Bocu1FromUnicodeWithOffsets but without offset handling.
 * If a change is made in the original function, then either
 * change this function the same way or
 * re-copy the original function and remove the variables
 * offsets, sourceIndex, and nextSourceIndex.
 ','line_number':645,'multiline':True]['text':' set up the local pointers ','line_number':662,'multiline':True]['text':' get the converter state from UConverter ','line_number':669,'multiline':True]['text':' conversion loop ','line_number':676,'multiline':True]['text':' fast loop for single-byte differences ','line_number':682,'multiline':True]['text':' use only one loop counter variable, targetCapacity, not also source ','line_number':683,'multiline':True]['text':' restore real values ','line_number':706,'multiline':True]['text':' regular loop for all cases ','line_number':709,'multiline':True]['text':'
                 * ISO C0 control & space:
                 * Encode directly for MIME compatibility,
                 * and reset state except for space, to not disrupt compression.
                 ','line_number':715,'multiline':True]['text':' test the following code unit ','line_number':731,'multiline':True]['text':' no more input ','line_number':738,'multiline':True]['text':' negative lead surrogate as "incomplete" indicator to avoid c=0 everywhere else ','line_number':739,'multiline':True]['text':'
             * all other Unicode code points c==U+0021..U+10ffff
             * are encoded with the difference c-prev
             *
             * a new prev is computed from c,
             * placed in the middle of a 0x80-block (for most small scripts) or
             * in the middle of the Unihan and Hangul blocks
             * to statistically minimize the following difference
             ','line_number':744,'multiline':True]['text':' optimize 2-byte case ','line_number':762,'multiline':True]['text':' will be 2..4 ','line_number':779,'multiline':True]['text':' write the output character bytes from diff and length ','line_number':784,'multiline':True]['text':' from the first if in the loop we know that targetCapacity>0 ','line_number':785,'multiline':True]['text':' each branch falls through to the next one ','line_number':788,'multiline':True]['text':' case 2: handled above ','line_number':794,'multiline':True]['text':' case 1: handled above ','line_number':796,'multiline':True]['text':' will never occur ','line_number':800,'multiline':True]['text':'
                     * We actually do this backwards here:
                     * In order to save an intermediate variable, we output
                     * first to the overflow buffer what does not fit into the
                     * regular target.
                     ','line_number':807,'multiline':True]['text':' we know that 1<=targetCapacity<length<=4 ','line_number':813,'multiline':True]['text':' each branch falls through to the next one ','line_number':817,'multiline':True]['text':' will never occur ','line_number':828,'multiline':True]['text':' now output what fits into the regular target ','line_number':833,'multiline':True]['text':' length was reduced by targetCapacity ','line_number':834,'multiline':True]['text':' each branch falls through to the next one ','line_number':836,'multiline':True]['text':' will never occur ','line_number':847,'multiline':True]['text':' target overflow ','line_number':851,'multiline':True]['text':' target is full ','line_number':858,'multiline':True]['text':' set the converter state back into UConverter ','line_number':864,'multiline':True]['text':' write back the updated pointers ','line_number':868,'multiline':True]['text':' BOCU-1-to-Unicode conversion functions ----------------------------------- ','line_number':873,'multiline':True]['text':'*
 * Function for BOCU-1 decoder; handles multi-byte lead bytes.
 *
 * @param b lead byte;
 *          BOCU1_MIN<=b<BOCU1_START_NEG_2 or BOCU1_START_POS_2<=b<BOCU1_MAX_LEAD
 * @return (diff<<2)|count
 ','line_number':875,'multiline':True]['text':' positive difference ','line_number':887,'multiline':True]['text':' two bytes ','line_number':889,'multiline':True]['text':' three bytes ','line_number':893,'multiline':True]['text':' four bytes ','line_number':897,'multiline':True]['text':' negative difference ','line_number':902,'multiline':True]['text':' two bytes ','line_number':904,'multiline':True]['text':' three bytes ','line_number':908,'multiline':True]['text':' four bytes ','line_number':912,'multiline':True]['text':' return the state for decoding the trail byte(s) ','line_number':918,'multiline':True]['text':'*
 * Function for BOCU-1 decoder; handles multi-byte trail bytes.
 *
 * @param count number of remaining trail bytes including this one
 * @param b trail byte
 * @return new delta for diff including b - <0 indicates an error
 *
 * @see decodeBocu1
 ','line_number':922,'multiline':True]['text':' skip some C0 controls and make the trail byte range contiguous ','line_number':934,'multiline':True]['text':' b<0 for an illegal trail byte value will result in return<0 below ','line_number':936,'multiline':True]['text':' add trail byte into difference and decrement count ','line_number':945,'multiline':True]['text':' count==3 ','line_number':950,'multiline':True]['text':' set up the local pointers ','line_number':971,'multiline':True]['text':' get the converter state from UConverter ','line_number':979,'multiline':True]['text':' mode may be set to UCNV_SI by ucnv_bld.c but then toULength==0 ','line_number':984,'multiline':True]['text':' sourceIndex=-1 if the current character began in the previous buffer ','line_number':991,'multiline':True]['text':' conversion "loop" similar to _SCSUToUnicodeWithOffsets() ','line_number':995,'multiline':True]['text':' fast loop for single-byte differences ','line_number':1001,'multiline':True]['text':' use count as the only loop counter variable ','line_number':1002,'multiline':True]['text':' wrong if offsets==NULL but does not matter ','line_number':1030,'multiline':True]['text':' decode a sequence of single and lead bytes ','line_number':1032,'multiline':True]['text':' target is full ','line_number':1035,'multiline':True]['text':' Write a code point directly from a single-byte difference. ','line_number':1043,'multiline':True]['text':'
             * Direct-encoded C0 control code or space.
             * Reset prev for C0 control codes but not for space.
             ','line_number':1053,'multiline':True]['text':' Optimize two-byte case. ','line_number':1065,'multiline':True]['text':' trail byte ','line_number':1072,'multiline':True]['text':' only reset the state, no code point ','line_number':1083,'multiline':True]['text':'
             * For multi-byte difference lead bytes, set the decoder state
             * with the partial difference value from the lead byte and
             * with the number of trail bytes.
             ','line_number':1088,'multiline':True]['text':' trail byte in any position ','line_number':1107,'multiline':True]['text':' final trail byte, deliver a code point ','line_number':1116,'multiline':True]['text':' calculate the next prev and output c ','line_number':1128,'multiline':True]['text':' output surrogate pair ','line_number':1134,'multiline':True]['text':' target overflow ','line_number':1141,'multiline':True]['text':' set the converter state in UConverter to deal with the next character ','line_number':1154,'multiline':True]['text':' set the converter state back into UConverter ','line_number':1158,'multiline':True]['text':' write back the updated pointers ','line_number':1164,'multiline':True]['text':'
 * Identical to _Bocu1ToUnicodeWithOffsets but without offset handling.
 * If a change is made in the original function, then either
 * change this function the same way or
 * re-copy the original function and remove the variables
 * offsets, sourceIndex, and nextSourceIndex.
 ','line_number':1171,'multiline':True]['text':' set up the local pointers ','line_number':1191,'multiline':True]['text':' get the converter state from UConverter ','line_number':1198,'multiline':True]['text':' mode may be set to UCNV_SI by ucnv_bld.c but then toULength==0 ','line_number':1203,'multiline':True]['text':' conversion "loop" similar to _SCSUToUnicodeWithOffsets() ','line_number':1210,'multiline':True]['text':' fast loop for single-byte differences ','line_number':1216,'multiline':True]['text':' use count as the only loop counter variable ','line_number':1217,'multiline':True]['text':' decode a sequence of single and lead bytes ','line_number':1244,'multiline':True]['text':' target is full ','line_number':1247,'multiline':True]['text':' Write a code point directly from a single-byte difference. ','line_number':1254,'multiline':True]['text':'
             * Direct-encoded C0 control code or space.
             * Reset prev for C0 control codes but not for space.
             ','line_number':1262,'multiline':True]['text':' Optimize two-byte case. ','line_number':1272,'multiline':True]['text':' trail byte ','line_number':1279,'multiline':True]['text':' only reset the state, no code point ','line_number':1289,'multiline':True]['text':'
             * For multi-byte difference lead bytes, set the decoder state
             * with the partial difference value from the lead byte and
             * with the number of trail bytes.
             ','line_number':1293,'multiline':True]['text':' trail byte in any position ','line_number':1311,'multiline':True]['text':' final trail byte, deliver a code point ','line_number':1320,'multiline':True]['text':' calculate the next prev and output c ','line_number':1332,'multiline':True]['text':' output surrogate pair ','line_number':1337,'multiline':True]['text':' target overflow ','line_number':1342,'multiline':True]['text':' set the converter state in UConverter to deal with the next character ','line_number':1353,'multiline':True]['text':' set the converter state back into UConverter ','line_number':1357,'multiline':True]['text':' write back the updated pointers ','line_number':1363,'multiline':True]['text':' miscellaneous ------------------------------------------------------------ ','line_number':1369,'multiline':True]['text':' CCSID for BOCU-1 ','line_number':1400,'multiline':True]['text':' one UChar generates at least 1 byte and at most 4 bytes ','line_number':1402,'multiline':True]['text':' BOCU-1 never needs to write a subchar ','line_number':1403,'multiline':True]['text':' reserved ','line_number':1407,'multiline':True]