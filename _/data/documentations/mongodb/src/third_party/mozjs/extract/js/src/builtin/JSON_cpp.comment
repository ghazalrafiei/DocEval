['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':21,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':22,'multiline':False]['text':' JS::GetBuiltinClass','line_number':23,'multiline':False]['text':' js::PlainObject','line_number':32,'multiline':False]['text':' js_*_str','line_number':33,'multiline':False]['text':' ES5 15.12.3 Quote.
 * Requires that the destination has enough space allocated for src after
 * escaping (that is, `2 + 6 * (srcEnd - srcBegin)` characters).
 ','line_number':49,'multiline':True]['text':' Maps characters < 256 to the value that must follow the '\\' in the quoted','line_number':57,'multiline':False]['text':' string. Entries with 'u' are handled as \\u00xy, and entries with 0 are not','line_number':58,'multiline':False]['text':' escaped in any way. Characters >= 256 are all assumed to be unescaped.','line_number':59,'multiline':False]['text':' clang-format off','line_number':61,'multiline':False]['text':' rest are all zeros','line_number':71,'multiline':False]['text':' clang-format on','line_number':72,'multiline':False]['text':' Step 1. ','line_number':75,'multiline':True]['text':' Step 2. ','line_number':83,'multiline':True]['text':' Handle the Latin-1 cases.','line_number':87,'multiline':False]['text':' Directly copy non-escaped code points.','line_number':91,'multiline':False]['text':' Escape the rest, elaborating Unicode escapes when needed.','line_number':97,'multiline':False]['text':' Non-ASCII non-surrogates are directly copied.','line_number':114,'multiline':False]['text':' So too for complete surrogate pairs.','line_number':120,'multiline':False]['text':' But lone surrogates are Unicode-escaped.','line_number':128,'multiline':False]['text':' Steps 3-4. ','line_number':138,'multiline':True]['text':' We resize the backing buffer to the maximum size we could possibly need,','line_number':168,'multiline':False]['text':' write the escaped string into it, and shrink it back to the size we ended','line_number':169,'multiline':False]['text':' up needing.','line_number':170,'multiline':False]['text':' anonymous namespace ','line_number':229,'multiline':True]['text':' anonymous namespace ','line_number':280,'multiline':True]['text':'
 * ES5 15.12.3 Str, steps 2-4, extracted to enable preprocessing of property
 * values when stringifying objects in JO.
 ','line_number':282,'multiline':True]['text':' We don't want to do any preprocessing here if scx->maybeSafely,','line_number':289,'multiline':False]['text':' since the stuff we do here can have side-effects.','line_number':290,'multiline':False]['text':' Step 2. Modified by BigInt spec 6.1 to check for a toJSON method on the','line_number':297,'multiline':False]['text':' BigInt prototype when the value is a BigInt, and to pass the BigInt','line_number':298,'multiline':False]['text':' primitive value as receiver.','line_number':299,'multiline':False]['text':' Step 3. ','line_number':324,'multiline':True]['text':' Step 4. ','line_number':343,'multiline':True]['text':'
 * Determines whether a value which has passed by ES5 150.2.3 Str steps 1-4's
 * gauntlet will result in Str returning |undefined|.  This function is used to
 * properly omit properties resulting in such values when stringifying objects,
 * while properly stringifying such properties as null when they're encountered
 * in arrays.
 ','line_number':378,'multiline':True]['text':' ES5 15.12.3 JO. ','line_number':420,'multiline':True]['text':'
   * This method implements the JO algorithm in ES5 15.12.3, but:
   *
   *   * The algorithm is somewhat reformulated to allow the final string to
   *     be streamed into a single buffer, rather than be created and copied
   *     into place incrementally as the ES5 algorithm specifies it.  This
   *     requires moving portions of the Str call in 8a into this algorithm
   *     (and in JA as well).
   ','line_number':422,'multiline':True]['text':' Steps 1-2, 11. ','line_number':434,'multiline':True]['text':' Steps 5-7. ','line_number':444,'multiline':True]['text':' NOTE: We can't assert |IsArray(scx->replacer)| because the replacer','line_number':448,'multiline':False]['text':'       might have been a revocable proxy to an array.  Such a proxy','line_number':449,'multiline':False]['text':'       satisfies |IsArray|, but any side effect of JSON.stringify','line_number':450,'multiline':False]['text':'       could revoke the proxy so that |!IsArray(scx->replacer)|.  See','line_number':451,'multiline':False]['text':'       bug 1196497.','line_number':452,'multiline':False]['text':' My kingdom for not-quite-initialized-from-the-start references. ','line_number':463,'multiline':True]['text':' Steps 8-10, 13. ','line_number':466,'multiline':True]['text':'
     * Steps 8a-8b.  Note that the call to Str is broken up into 1) getting
     * the property; 2) processing for toJSON, calling the replacer, and
     * handling boxed Number/String/Boolean objects; 3) filtering out
     * values which process to |undefined|, and 4) stringifying all values
     * which pass the filter.
     ','line_number':474,'multiline':True]['text':' DEBUG','line_number':493,'multiline':False]['text':' Output a comma unless this is the first member to write. ','line_number':504,'multiline':True]['text':' For JSON.stringify and JSON.parse with a reviver function, we need to know','line_number':533,'multiline':False]['text':' the length of an object for which JS::IsArray returned true. This must be','line_number':534,'multiline':False]['text':' either an ArrayObject or a proxy wrapping one.','line_number':535,'multiline':False]['text':' A scripted proxy wrapping an array can return a length value larger than','line_number':551,'multiline':False]['text':' UINT32_MAX. Stringification will likely report an OOM in this case. Match','line_number':552,'multiline':False]['text':' other JS engines and report an early error in this case, although','line_number':553,'multiline':False]['text':' technically this is observable, for example when stringifying with a','line_number':554,'multiline':False]['text':' replacer function.','line_number':555,'multiline':False]['text':' ES5 15.12.3 JA. ','line_number':565,'multiline':True]['text':'
   * This method implements the JA algorithm in ES5 15.12.3, but:
   *
   *   * The algorithm is somewhat reformulated to allow the final string to
   *     be streamed into a single buffer, rather than be created and copied
   *     into place incrementally as the ES5 algorithm specifies it.  This
   *     requires moving portions of the Str call in 8a into this algorithm
   *     (and in JO as well).
   ','line_number':567,'multiline':True]['text':' Steps 1-2, 11. ','line_number':577,'multiline':True]['text':' Step 6. ','line_number':587,'multiline':True]['text':' Steps 7-10. ','line_number':593,'multiline':True]['text':' Steps 4, 10b(i). ','line_number':595,'multiline':True]['text':' Steps 7-10. ','line_number':600,'multiline':True]['text':'
       * Steps 8a-8c.  Again note how the call to the spec's Str method
       * is broken up into getting the property, running it past toJSON
       * and the replacer and maybe unboxing, and interpreting some
       * values as |null| in separate steps.
       ','line_number':607,'multiline':True]['text':'
         * Trying to do a JS_AlreadyHasOwnElement runs the risk of
         * hitting OOM on jsid creation.  Let's just assert sanity for
         * small enough indices.
         ','line_number':615,'multiline':True]['text':' Steps 3, 4, 10b(i). ','line_number':651,'multiline':True]['text':' Step 10(b)(iii). ','line_number':662,'multiline':True]['text':' Step 11 must be handled by the caller. ','line_number':672,'multiline':True]['text':'
   * This method implements the Str algorithm in ES5 15.12.3, but:
   *
   *   * We move property retrieval (step 1) into callers to stream the
   *     stringification process and avoid constantly copying strings.
   *   * We move the preprocessing in steps 2-4 into a helper function to
   *     allow both JO and JA to use this method.  While JA could use it
   *     without this move, JO must omit any |undefined|-valued property per
   *     so it can't stream out a value using the Str method exactly as
   *     defined by ES5.
   *   * We move step 11 into callers, again to ease streaming.
   ','line_number':680,'multiline':True]['text':' Step 8. ','line_number':693,'multiline':True]['text':' Step 5. ','line_number':698,'multiline':True]['text':' Steps 6-7. ','line_number':703,'multiline':True]['text':' Step 9. ','line_number':708,'multiline':True]['text':' Step 10 in the BigInt proposal. ','line_number':722,'multiline':True]['text':' Step 10. ','line_number':729,'multiline':True]['text':' ES6 24.3.2. ','line_number':749,'multiline':True]['text':'*
   * This uses MOZ_ASSERT, since it's actually asserting something jsapi
   * consumers could get wrong, so needs a better error message.
   ','line_number':760,'multiline':True]['text':' Step 4. ','line_number':769,'multiline':True]['text':' Step 4a(i): use replacer to transform values.  ','line_number':774,'multiline':True]['text':' Step 4b(iii). ','line_number':778,'multiline':True]['text':' Step 4b(iii)(2-3). ','line_number':780,'multiline':True]['text':' Cap the initial size to a moderately small value.  This avoids','line_number':786,'multiline':False]['text':' ridiculous over-allocation if an array with bogusly-huge length','line_number':787,'multiline':False]['text':' is passed in.  If we end up having to add elements past this','line_number':788,'multiline':False]['text':' size, the set will naturally resize to accommodate them.','line_number':789,'multiline':False]['text':' Step 4b(iii)(4). ','line_number':794,'multiline':True]['text':' Step 4b(iii)(5). ','line_number':797,'multiline':True]['text':' Step 4b(iii)(5)(a-b). ','line_number':804,'multiline':True]['text':' Step 4b(iii)(5)(c-g). ','line_number':809,'multiline':True]['text':' Step 4b(iii)(5)(g). ','line_number':833,'multiline':True]['text':' Step 4b(iii)(5)(g)(i). ','line_number':836,'multiline':True]['text':' Step 5. ','line_number':847,'multiline':True]['text':' Step 6. ','line_number':874,'multiline':True]['text':' Step 7. ','line_number':882,'multiline':True]['text':' Step 8. ','line_number':892,'multiline':True]['text':' We can skip creating the initial wrapper object if no replacer','line_number':899,'multiline':False]['text':' function is present.','line_number':900,'multiline':False]['text':' Step 9. ','line_number':902,'multiline':True]['text':' Steps 10-11. ','line_number':908,'multiline':True]['text':' Step 12. ','line_number':914,'multiline':True]['text':' ES5 15.12.2 Walk. ','line_number':927,'multiline':True]['text':' Step 1. ','line_number':935,'multiline':True]['text':' Step 2. ','line_number':941,'multiline':True]['text':' Step 2a(ii). ','line_number':951,'multiline':True]['text':' Step 2a(i), 2a(iii-iv). ','line_number':957,'multiline':True]['text':' Step 2a(iii)(1). ','line_number':969,'multiline':True]['text':' Step 2a(iii)(2). The spec deliberately ignores strict failure. ','line_number':976,'multiline':True]['text':' Step 2a(iii)(3). The spec deliberately ignores strict failure. ','line_number':981,'multiline':True]['text':' Step 2b(i). ','line_number':993,'multiline':True]['text':' Step 2b(ii). ','line_number':999,'multiline':True]['text':' Step 2b(ii)(1). ','line_number':1007,'multiline':True]['text':' Step 2b(ii)(2). The spec deliberately ignores strict failure. ','line_number':1015,'multiline':True]['text':' Step 2b(ii)(3). The spec deliberately ignores strict failure. ','line_number':1020,'multiline':True]['text':' Step 3. ','line_number':1034,'multiline':True]['text':' 15.12.2 steps 2-3. ','line_number':1062,'multiline':True]['text':' 15.12.2 steps 4-5. ','line_number':1069,'multiline':True]['text':' ES5 15.12.2. ','line_number':1090,'multiline':True]['text':' Step 1. ','line_number':1094,'multiline':True]['text':' Steps 2-5. ','line_number':1113,'multiline':True]['text':' ES6 24.3.2. ','line_number':1121,'multiline':True]['text':' XXX This can never happen to nsJSON.cpp, but the JSON object','line_number':1135,'multiline':False]['text':' needs to support returning undefined. So this is a little awkward','line_number':1136,'multiline':False]['text':' for the API, because we want to support streaming writers.','line_number':1137,'multiline':False]