['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 *************************************************************************
 * COPYRIGHT: 
 * Copyright (c) 1996-2012, International Business Machines Corporation and
 * others. All Rights Reserved.
 *************************************************************************
 ','line_number':3,'multiline':True]['text':' for uniset_getUnicode32Instance()','line_number':24,'multiline':False]['text':' System can define move32 intrinsics, but the char iters define move32 method','line_number':27,'multiline':False]['text':' using same undef trick in headers, so undef here to re-enable the method.','line_number':28,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':36,'multiline':False]['text':' Constructors and other boilerplate','line_number':37,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':38,'multiline':False]['text':'*
 * Generates a hash code for this iterator.
 ','line_number':103,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':123,'multiline':False]['text':' Static utility methods','line_number':124,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':125,'multiline':False]['text':' the source and result strings are the same object, use a temporary one','line_number':144,'multiline':False]['text':' the right and result strings are the same object, use a temporary one','line_number':229,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':249,'multiline':False]['text':' Iteration API','line_number':250,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':251,'multiline':False]['text':'*
 * Return the current character in the normalized text.
 ','line_number':253,'multiline':True]['text':'*
 * Return the next character in the normalized text and advance
 * the iteration position by one.  If the end
 * of the text has already been reached, {@link #DONE} is returned.
 ','line_number':264,'multiline':True]['text':'*
 * Return the previous character in the normalized text and decrement
 * the iteration position by one.  If the beginning
 * of the text has already been reached, {@link #DONE} is returned.
 ','line_number':279,'multiline':True]['text':' pins index','line_number':301,'multiline':False]['text':'*
 * Return the first character in the normalized text.  This resets
 * the <tt>Normalizer's</tt> position to the beginning of the text.
 ','line_number':306,'multiline':True]['text':'*
 * Return the last character in the normalized text.  This resets
 * the <tt>Normalizer's</tt> position to be just before the
 * the input text corresponding to that normalized character.
 ','line_number':315,'multiline':True]['text':'*
 * Retrieve the current iteration position in the input text that is
 * being normalized.  This method is useful in applications such as
 * searching, where you need to be able to determine the position in
 * the input text that corresponds to a given normalized output character.
 * <p>
 * <b>Note:</b> This method sets the position in the <em>input</em>, while
 * {@link #next} and {@link #previous} iterate through characters in the
 * <em>output</em>.  This means that there is not necessarily a one-to-one
 * correspondence between characters returned by <tt>next</tt> and
 * <tt>previous</tt> and the indices passed to and returned from
 * <tt>setIndex</tt> and {@link #getIndex}.
 *
 ','line_number':326,'multiline':True]['text':'*
 * Retrieve the index of the start of the input text.  This is the begin index
 * of the <tt>CharacterIterator</tt> or the start (i.e. 0) of the <tt>String</tt>
 * over which this <tt>Normalizer</tt> is iterating
 ','line_number':348,'multiline':True]['text':'*
 * Retrieve the index of the end of the input text.  This is the end index
 * of the <tt>CharacterIterator</tt> or the length of the <tt>String</tt>
 * over which this <tt>Normalizer</tt> is iterating
 ','line_number':357,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':366,'multiline':False]['text':' Property access methods','line_number':367,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':368,'multiline':False]['text':'*
 * Set the input text over which this <tt>Normalizer</tt> will iterate.
 * The iteration position is set to the beginning of the input text.
 ','line_number':401,'multiline':True]['text':'*
 * Set the input text over which this <tt>Normalizer</tt> will iterate.
 * The iteration position is set to the beginning of the string.
 ','line_number':422,'multiline':True]['text':'*
 * Copies the text under iteration into the UnicodeString referred to by "result".
 * @param result Receives a copy of the text under iteration.
 ','line_number':461,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':471,'multiline':False]['text':' Private utility methods','line_number':472,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':473,'multiline':False]['text':' Skip at least one character so we make progress.','line_number':488,'multiline':False]['text':' #if !UCONFIG_NO_NORMALIZATION ','line_number':529,'multiline':True]