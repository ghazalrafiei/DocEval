['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::Scalar::Type','line_number':29,'multiline':False]['text':'
 * Global object slots are reserved as follows:
 *
 * [0, APPLICATION_SLOTS)
 *   Pre-reserved slots in all global objects set aside for the embedding's
 *   use. As with all reserved slots these start out as UndefinedValue() and
 *   are traced for GC purposes. Apart from that the engine never touches
 *   these slots, so the embedding can do whatever it wants with them.
 * [APPLICATION_SLOTS, APPLICATION_SLOTS + JSProto_LIMIT)
 *   Stores the original value of the constructor for the corresponding
 *   JSProtoKey.
 * [APPLICATION_SLOTS + JSProto_LIMIT, APPLICATION_SLOTS + 2 * JSProto_LIMIT)
 *   Stores the prototype, if any, for the constructor for the corresponding
 *   JSProtoKey offset from JSProto_LIMIT.
 * [APPLICATION_SLOTS + 2 * JSProto_LIMIT, RESERVED_SLOTS)
 *   Various one-off values: ES5 13.2.3's [[ThrowTypeError]], RegExp statics,
 *   the original eval for this global object (implementing |var eval =
 *   otherWindow.eval; eval(...)| as an indirect eval), a bit indicating
 *   whether this object has been cleared (see JS_ClearScope), and a cache for
 *   whether eval is allowed (per the global's Content Security Policy).
 *
 * The two JSProto_LIMIT-sized ranges are necessary to implement
 * js::FindClassObject, and spec language speaking in terms of "the original
 * Array prototype object", or "as if by the expression new Array()" referring
 * to the original Array constructor. The actual (writable and even deletable)
 * Object, Array, &c. properties are not stored in reserved slots.
 ','line_number':57,'multiline':True]['text':' Count of slots set aside for application use. ','line_number':85,'multiline':True]['text':'
   * Count of slots to store built-in prototypes and initial visible
   * properties for the constructors.
   ','line_number':88,'multiline':True]['text':' Various function values needed by the engine. ','line_number':95,'multiline':True]['text':' One-off properties stored after slots for built-ins. ','line_number':99,'multiline':True]['text':' Total reserved-slot count for global objects. ','line_number':129,'multiline':True]['text':'
   * The slot count must be in the public API for JSCLASS_GLOBAL_FLAGS, and
   * we won't expose GlobalObject, so just assert that the two values are
   * synchronized.
   ','line_number':133,'multiline':True]['text':'
   * Lazy standard classes need a way to indicate they have been initialized.
   * Otherwise, when we delete them, we might accidentally recreate them via
   * a lazy initialization. We use the presence of an object in the
   * getConstructor(key) reserved slot to indicate that they've been
   * initialized.
   *
   * Note: A few builtin objects, like JSON and Math, are not constructors,
   * so getConstructor is a bit of a misnomer.
   ','line_number':232,'multiline':True]['text':' If the constructor is undefined, then it hasn't been initialized.','line_number':243,'multiline':False]['text':' Disallow use of unqualified JSObject::create in GlobalObject.','line_number':263,'multiline':False]['text':'
   * Create a constructor function with the specified name and length using
   * ctor, a method which creates objects with the given class.
   ','line_number':275,'multiline':True]['text':'
   * Create an object to serve as [[Prototype]] for instances of the given
   * class, using |Object.prototype| as its [[Prototype]].  Users creating
   * prototype objects with particular internal structure (e.g. reserved
   * slots guaranteed to contain values of particular types) must immediately
   * complete the minimal initialization to make the returned object safe to
   * touch.
   ','line_number':284,'multiline':True]['text':'
   * Identical to createBlankPrototype, but uses proto as the [[Prototype]]
   * of the returned blank prototype.
   ','line_number':296,'multiline':True]['text':' return getOrCreateObject(cx, global, ASYNC_ITERATOR_PROTO,','line_number':662,'multiline':False]['text':'                         initAsyncIteratorProto);','line_number':663,'multiline':False]['text':' If we're in the self-hosting compartment itself, the','line_number':744,'multiline':False]['text':' intrinsics-holder isn't initialized at this point.','line_number':745,'multiline':False]['text':' Infallibly test whether the given value is the eval function for this','line_number':824,'multiline':False]['text':' global.','line_number':825,'multiline':False]['text':' Implemented in vm/Iteration.cpp.','line_number':828,'multiline':False]['text':' Implemented in vm/AsyncIteration.cpp.','line_number':836,'multiline':False]['text':' Implemented in builtin/MapObject.cpp.','line_number':842,'multiline':False]['text':' Implemented in builtin/ModuleObject.cpp','line_number':846,'multiline':False]['text':' This is called at the start of shrinking GCs, so avoids barriers.','line_number':895,'multiline':False]['text':' Returns an object that represents the realm, used by embedder.','line_number':909,'multiline':False]['text':' A class used in place of a prototype during off-thread parsing.','line_number':913,'multiline':False]['text':'
 * Unless otherwise specified, define ctor.prototype = proto as non-enumerable,
 * non-configurable, and non-writable; and define proto.constructor = ctor as
 * non-enumerable but configurable and writable.
 ','line_number':936,'multiline':True]['text':'
 * Define properties and/or functions on any object. Either ps or fs, or both,
 * may be null.
 ','line_number':946,'multiline':True]['text':'
 * Convenience templates to generic constructor and prototype creation functions
 * for ClassSpecs.
 ','line_number':956,'multiline':True]['text':' Note - We duplicate the trick from ClassName() so that we don't need to','line_number':964,'multiline':False]['text':' include vm/JSAtom-inl.h here.','line_number':965,'multiline':False]['text':' namespace js','line_number':990,'multiline':False]['text':' vm_GlobalObject_h ','line_number':997,'multiline':True]