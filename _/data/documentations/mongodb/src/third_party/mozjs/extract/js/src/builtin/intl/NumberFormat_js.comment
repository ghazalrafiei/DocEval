['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Portions Copyright Norbert Lindenberg 2011-2012. ','line_number':5,'multiline':True]['text':'*
 * NumberFormat internal properties.
 *
 * Spec: ECMAScript Internationalization API Specification, 9.1 and 11.3.3.
 ','line_number':9,'multiline':True]['text':'*
 * Compute an internal properties object from |lazyNumberFormatData|.
 ','line_number':19,'multiline':True]['text':' Compute effective locale.','line_number':29,'multiline':False]['text':' Step 7.','line_number':31,'multiline':False]['text':' Step 8.','line_number':34,'multiline':False]['text':' Steps 9-10. (Step 11 is not relevant to our implementation.)','line_number':41,'multiline':False]['text':' Compute formatting options.','line_number':45,'multiline':False]['text':' Step 13.','line_number':46,'multiline':False]['text':' Steps 17, 19.','line_number':50,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':57,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':63,'multiline':False]['text':' Step 22.','line_number':67,'multiline':False]['text':' Note: Intl.NumberFormat.prototype.resolvedOptions() exposes the','line_number':71,'multiline':False]['text':' actual presence (versus undefined-ness) of these properties.','line_number':72,'multiline':False]['text':' Note: Intl.NumberFormat.prototype.resolvedOptions() exposes the','line_number':79,'multiline':False]['text':' actual presence (versus undefined-ness) of these properties.','line_number':80,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':86,'multiline':False]['text':' Step 24.','line_number':90,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':93,'multiline':False]['text':' The caller is responsible for associating |internalProps| with the right','line_number':96,'multiline':False]['text':' object using |setInternalProperties|.','line_number':97,'multiline':False]['text':'*
 * Returns an object containing the NumberFormat internal properties of |obj|.
 ','line_number':101,'multiline':True]['text':' If internal properties have already been computed, use them.','line_number':112,'multiline':False]['text':' Otherwise it's time to fully create them.','line_number':117,'multiline':False]['text':'*
 * 11.1.11 UnwrapNumberFormat( nf )
 ','line_number':123,'multiline':True]['text':' Steps 2 and 4 (error handling moved to caller).','line_number':127,'multiline':False]['text':'*
 * Applies digit options used for number formatting onto the intl object.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.1.1.
 ','line_number':138,'multiline':True]['text':' We skip step 1 because we set the properties on a lazyData object.','line_number':144,'multiline':False]['text':' Steps 2-4.','line_number':146,'multiline':False]['text':' Steps 5-9.','line_number':153,'multiline':False]['text':' Step 10.','line_number':160,'multiline':False]['text':' Step 11.','line_number':163,'multiline':False]['text':' Step 11.a (Omitted).','line_number':165,'multiline':False]['text':' Step 11.b.','line_number':167,'multiline':False]['text':' Step 11.c.','line_number':170,'multiline':False]['text':' Step 11.d.','line_number':173,'multiline':False]['text':' Step 11.e.','line_number':176,'multiline':False]['text':' Step 12.','line_number':180,'multiline':False]['text':' Step 12.a (Omitted).','line_number':182,'multiline':False]['text':' Step 12.b.','line_number':184,'multiline':False]['text':' Step 12.c.','line_number':187,'multiline':False]['text':' Steps 12.d-e.','line_number':190,'multiline':False]['text':' Inlined DefaultNumberOption, only the fallback case applies here.','line_number':191,'multiline':False]['text':' Step 12.f.','line_number':197,'multiline':False]['text':' Inlined DefaultNumberOption, only the fallback case applies here.','line_number':198,'multiline':False]['text':' Step 12.g.','line_number':203,'multiline':False]['text':' Step 12.h.','line_number':208,'multiline':False]['text':' Step 12.i.','line_number':211,'multiline':False]['text':' Step 13.','line_number':215,'multiline':False]['text':' Step 13.a (Omitted).','line_number':217,'multiline':False]['text':' Step 14.','line_number':220,'multiline':False]['text':' Step 14.a (Omitted).','line_number':222,'multiline':False]['text':' Step 14.b.','line_number':224,'multiline':False]['text':' Step 14.c.','line_number':227,'multiline':False]['text':'*
 * Convert s to upper case, but limited to characters a-z.
 *
 * Spec: ECMAScript Internationalization API Specification, 6.1.
 ','line_number':232,'multiline':True]['text':' String.prototype.toUpperCase may map non-ASCII characters into ASCII,','line_number':240,'multiline':False]['text':' so go character by character (actually code unit by code unit, but','line_number':241,'multiline':False]['text':' since we only care about ASCII characters here, that's OK).','line_number':242,'multiline':False]['text':'*
 * Verifies that the given string is a well-formed ISO 4217 currency code.
 *
 * Spec: ECMAScript Internationalization API Specification, 6.3.1.
 ','line_number':253,'multiline':True]['text':'*
 * Verifies that the given string is a well-formed core unit identifier as
 * defined in UTS #35, Part 2, Section 6. In addition to obeying the UTS #35
 * core unit identifier syntax, |unitIdentifier| must be one of the identifiers
 * sanctioned by UTS #35 or be a compound unit composed of two sanctioned simple
 * units.
 *
 * Intl.NumberFormat Unified API Proposal
 ','line_number':264,'multiline':True]['text':' Step 1.','line_number':276,'multiline':False]['text':' Step 2.','line_number':280,'multiline':False]['text':' Steps 3 and 5.','line_number':287,'multiline':False]['text':' Steps 4 and 6.','line_number':291,'multiline':False]['text':'*
 * Verifies that the given string is a sanctioned simple core unit identifier.
 *
 * Intl.NumberFormat Unified API Proposal
 *
 * Also see: https://unicode.org/reports/tr35/tr35-general.html#Unit_Elements
 ','line_number':302,'multiline':True]['text':' A system ICU may support fewer measurement units, so we need to make','line_number':322,'multiline':False]['text':' sure the unit is actually supported.','line_number':323,'multiline':False]['text':' Otherwise just assert that the sanctioned unit is also supported.','line_number':326,'multiline':False]['text':'*
 * Initializes an object as a NumberFormat.
 *
 * This method is complicated a moderate bit by its implementing initialization
 * as a *lazy* concept.  Everything that must happen now, does -- but we defer
 * all the work we can until the object is actually used as a NumberFormat.
 * This later work occurs in |resolveNumberFormatInternals|; steps not noted
 * here occur there.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.1.2.
 ','line_number':339,'multiline':True]['text':' Lazy NumberFormat data has the following structure:','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':'   {','line_number':357,'multiline':False]['text':'     requestedLocales: List of locales,','line_number':358,'multiline':False]['text':'     style: "decimal" / "percent" / "currency" / "unit",','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':'     // fields present only if style === "currency":','line_number':361,'multiline':False]['text':'     currency: a well-formed currency code (IsWellFormedCurrencyCode),','line_number':362,'multiline':False]['text':'     currencyDisplay: "code" / "symbol" / "narrowSymbol" / "name",','line_number':363,'multiline':False]['text':'     currencySign: "standard" / "accounting",','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':'     // fields present only if style === "unit":','line_number':366,'multiline':False]['text':'     unit: a well-formed unit identifier (IsWellFormedUnitIdentifier),','line_number':367,'multiline':False]['text':'     unitDisplay: "short" / "narrow" / "long",','line_number':368,'multiline':False]['text':'','line_number':369,'multiline':False]['text':'     opt: // opt object computed in InitializeNumberFormat','line_number':370,'multiline':False]['text':'       {','line_number':371,'multiline':False]['text':'         localeMatcher: "lookup" / "best fit",','line_number':372,'multiline':False]['text':'','line_number':373,'multiline':False]['text':'         nu: string matching a Unicode extension type, // optional','line_number':374,'multiline':False]['text':'       }','line_number':375,'multiline':False]['text':'','line_number':376,'multiline':False]['text':'     minimumIntegerDigits: integer ∈ [1, 21],','line_number':377,'multiline':False]['text':'','line_number':378,'multiline':False]['text':'     // optional, mutually exclusive with the significant-digits option','line_number':379,'multiline':False]['text':'     minimumFractionDigits: integer ∈ [0, 20],','line_number':380,'multiline':False]['text':'     maximumFractionDigits: integer ∈ [0, 20],','line_number':381,'multiline':False]['text':'','line_number':382,'multiline':False]['text':'     // optional, mutually exclusive with the fraction-digits option','line_number':383,'multiline':False]['text':'     minimumSignificantDigits: integer ∈ [1, 21],','line_number':384,'multiline':False]['text':'     maximumSignificantDigits: integer ∈ [1, 21],','line_number':385,'multiline':False]['text':'','line_number':386,'multiline':False]['text':'     useGrouping: true / false,','line_number':387,'multiline':False]['text':'','line_number':388,'multiline':False]['text':'     notation: "standard" / "scientific" / "engineering" / "compact",','line_number':389,'multiline':False]['text':'','line_number':390,'multiline':False]['text':'     // optional, if notation is "compact"','line_number':391,'multiline':False]['text':'     compactDisplay: "short" / "long",','line_number':392,'multiline':False]['text':'','line_number':393,'multiline':False]['text':'     signDisplay: "auto" / "never" / "always" / "exceptZero",','line_number':394,'multiline':False]['text':'   }','line_number':395,'multiline':False]['text':'','line_number':396,'multiline':False]['text':' Note that lazy data is only installed as a final step of initialization,','line_number':397,'multiline':False]['text':' so every NumberFormat lazy data object has *all* these properties, never a','line_number':398,'multiline':False]['text':' subset of them.','line_number':399,'multiline':False]['text':' Step 1.','line_number':402,'multiline':False]['text':' Steps 2-3.','line_number':406,'multiline':False]['text':'','line_number':407,'multiline':False]['text':' If we ever need more speed here at startup, we should try to detect the','line_number':408,'multiline':False]['text':' case where |options === undefined| and then directly use the default','line_number':409,'multiline':False]['text':' value for each option.  For now, just keep it simple.','line_number':410,'multiline':False]['text':' Compute options that impact interpretation of locale.','line_number':416,'multiline':False]['text':' Step 4.','line_number':417,'multiline':False]['text':' Steps 5-6.','line_number':421,'multiline':False]['text':' Compute formatting options.','line_number':435,'multiline':False]['text':' Step 12.','line_number':436,'multiline':False]['text':' Steps 14-17.','line_number':441,'multiline':False]['text':' Per the Intl.NumberFormat Unified API Proposal, this check should only','line_number':444,'multiline':False]['text':' happen for |style === "currency"|, which seems inconsistent, given that','line_number':445,'multiline':False]['text':' we normally validate all options when present, even the ones which are','line_number':446,'multiline':False]['text':' unused.','line_number':447,'multiline':False]['text':' TODO: File issue at <https://github.com/tc39/proposal-unified-intl-numberformat>.','line_number':448,'multiline':False]['text':' Steps 19.a-c.','line_number':457,'multiline':False]['text':' Step 18.','line_number':463,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':469,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':475,'multiline':False]['text':' Aligned with |currency| check from above, see note about spec issue there.','line_number':478,'multiline':False]['text':' Steps 20-21.','line_number':493,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':503,'multiline':False]['text':' Step 22.','line_number':508,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':511,'multiline':False]['text':' Steps 23.','line_number':517,'multiline':False]['text':' Intl.NumberFormat Unified API Proposal','line_number':521,'multiline':False]['text':' Step 31.','line_number':526,'multiline':False]['text':'','line_number':527,'multiline':False]['text':' We've done everything that must be done now: mark the lazy data as fully','line_number':528,'multiline':False]['text':' computed and install it.','line_number':529,'multiline':False]['text':' 11.2.1, steps 4-5.','line_number':532,'multiline':False]['text':' 11.2.1, step 6.','line_number':542,'multiline':False]['text':'*
 * Returns the number of decimal digits to be used for the given currency.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.1.3.
 ','line_number':546,'multiline':True]['text':'*
 * Returns the subset of the given locale list for which this locale list has a
 * matching (possibly fallback) locale. Locales appear in the same order in the
 * returned list as in the input list.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.3.2.
 ','line_number':561,'multiline':True]['text':', options','line_number':568,'multiline':True]['text':' Step 1.','line_number':571,'multiline':False]['text':' Step 2.','line_number':574,'multiline':False]['text':' Step 3.','line_number':577,'multiline':False]['text':' ICU doesn't have an API to determine the set of numbering systems','line_number':582,'multiline':False]['text':' supported for a locale; it generally pretends that any numbering system','line_number':583,'multiline':False]['text':' can be used with any locale. Supporting a decimal numbering system','line_number':584,'multiline':False]['text':' (where only the digits are replaced) is easy, so we offer them all here.','line_number':585,'multiline':False]['text':' Algorithmic numbering systems are typically tied to one locale, so for','line_number':586,'multiline':False]['text':' lack of information we don't offer them.','line_number':587,'multiline':False]['text':' The one thing we can find out from ICU is the default numbering system','line_number':588,'multiline':False]['text':' for a locale.','line_number':589,'multiline':False]['text':'*
 * Create function to be cached and returned by Intl.NumberFormat.prototype.format.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.1.4.
 ','line_number':606,'multiline':True]['text':' This function is not inlined in $Intl_NumberFormat_format_get to avoid','line_number':612,'multiline':False]['text':' creating a call-object on each call to $Intl_NumberFormat_format_get.','line_number':613,'multiline':False]['text':' Step 1 (implicit).','line_number':615,'multiline':False]['text':' Step 2.','line_number':617,'multiline':False]['text':' Steps 3-4.','line_number':622,'multiline':False]['text':' Step 5.','line_number':625,'multiline':False]['text':' formatToParts = ','line_number':626,'multiline':True]['text':'*
 * Returns a function bound to this NumberFormat that returns a String value
 * representing the result of calling ToNumber(value) according to the
 * effective locale and the formatting options of this NumberFormat.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.4.3.
 ','line_number':630,'multiline':True]['text':' Uncloned functions with `$` prefix are allocated as extended function','line_number':637,'multiline':False]['text':' to store the original name in `SetCanonicalName`.','line_number':638,'multiline':False]['text':' Steps 1-3.','line_number':640,'multiline':False]['text':' Step 4.','line_number':650,'multiline':False]['text':' Steps 4.a-c.','line_number':652,'multiline':False]['text':' Step 5.','line_number':656,'multiline':False]['text':'*
 * 11.4.4 Intl.NumberFormat.prototype.formatToParts ( value )
 ','line_number':661,'multiline':True]['text':' Step 1.','line_number':665,'multiline':False]['text':' Steps 2-3.','line_number':668,'multiline':False]['text':' Step 4.','line_number':674,'multiline':False]['text':' Step 5.','line_number':677,'multiline':False]['text':' formatToParts = ','line_number':678,'multiline':True]['text':'*
 * Returns the resolved options for a NumberFormat object.
 *
 * Spec: ECMAScript Internationalization API Specification, 11.4.5.
 ','line_number':681,'multiline':True]['text':' Steps 1-3.','line_number':687,'multiline':False]['text':' Steps 4-5.','line_number':697,'multiline':False]['text':' currency, currencyDisplay, and currencySign are only present for currency','line_number':704,'multiline':False]['text':' formatters.','line_number':705,'multiline':False]['text':' unit and unitDisplay are only present for unit formatters.','line_number':719,'multiline':False]['text':' Min/Max fraction digits are either both present or not present at all.','line_number':732,'multiline':False]['text':' Min/Max significant digits are either both present or not present at all.','line_number':742,'multiline':False]['text':' Step 6.','line_number':764,'multiline':False]