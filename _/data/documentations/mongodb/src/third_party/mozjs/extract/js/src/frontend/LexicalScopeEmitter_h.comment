['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':10,'multiline':False]['text':' MOZ_STACK_CLASS','line_number':11,'multiline':False]['text':' Maybe','line_number':12,'multiline':False]['text':' EmitterScope','line_number':14,'multiline':False]['text':' TDZCheckCache','line_number':15,'multiline':False]['text':' JS::Handle','line_number':16,'multiline':False]['text':' ScopeKind, LexicalScope','line_number':17,'multiline':False]['text':' Class for emitting bytecode for lexical scope.','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' In addition to emitting code for entering and leaving a scope, this RAII','line_number':26,'multiline':False]['text':' guard affects the code emitted for `break` and other non-structured','line_number':27,'multiline':False]['text':' control flow. See NonLocalExitControl::prepareForNonLocalJump().','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' Usage: (check for the return value is omitted for simplicity)','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':'   `{ ... }` -- lexical scope with no bindings','line_number':32,'multiline':False]['text':'     LexicalScopeEmitter lse(this);','line_number':33,'multiline':False]['text':'     lse.emitEmptyScope();','line_number':34,'multiline':False]['text':'     emit(scopeBody);','line_number':35,'multiline':False]['text':'     lse.emitEnd();','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':'   `{ let a; body }`','line_number':38,'multiline':False]['text':'     LexicalScopeEmitter lse(this);','line_number':39,'multiline':False]['text':'     lse.emitScope(ScopeKind::Lexical, scopeBinding);','line_number':40,'multiline':False]['text':'     emit(let_and_body);','line_number':41,'multiline':False]['text':'     lse.emitEnd();','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':'   `catch (e) { body }`','line_number':44,'multiline':False]['text':'     LexicalScopeEmitter lse(this);','line_number':45,'multiline':False]['text':'     lse.emitScope(ScopeKind::SimpleCatch, scopeBinding);','line_number':46,'multiline':False]['text':'     emit(body);','line_number':47,'multiline':False]['text':'     lse.emitEnd();','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'   `catch ([a, b]) { body }`','line_number':50,'multiline':False]['text':'     LexicalScopeEmitter lse(this);','line_number':51,'multiline':False]['text':'     lse.emitScope(ScopeKind::Catch, scopeBinding);','line_number':52,'multiline':False]['text':'     emit(body);','line_number':53,'multiline':False]['text':'     lse.emitEnd();','line_number':54,'multiline':False]['text':' The state of this emitter.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' +-------+ emitScope  +-------+ emitEnd  +-----+','line_number':64,'multiline':False]['text':' | Start |----------->| Scope |--------->| End |','line_number':65,'multiline':False]['text':' +-------+            +-------+          +-----+','line_number':66,'multiline':False]['text':' The initial state.','line_number':68,'multiline':False]['text':' After calling emitScope/emitEmptyScope.','line_number':71,'multiline':False]['text':' After calling emitEnd.','line_number':74,'multiline':False]['text':' Returns the scope object for non-empty scope.','line_number':83,'multiline':False]['text':' namespace frontend ','line_number':93,'multiline':True]['text':' namespace js ','line_number':94,'multiline':True]['text':' frontend_LexicalScopeEmitter_h ','line_number':96,'multiline':True]