['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*   Copyright (C) 2003-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  utrace.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
','line_number':3,'multiline':True]['text':'*
 * \var utrace_level
 * Trace level variable. Negative for "off".
 ','line_number':26,'multiline':True]['text':' Check whether a start of line indenting is needed.  Three cases:
     *   1.  At the start of the first line  (output index == 0).
     *   2.  At the start of subsequent lines  (preceeding char in buffer == '\n')
     *   3.  When preflighting buffer len (buffer capacity is exceeded), when
     *       a \n is output.  Ideally we wouldn't do the indent until the following char
     *       is received, but that won't work because there's no place to remember that
     *       the preceding char was \n.  Meaning that we may overstimate the
     *       buffer size needed.  No harm done.
     ','line_number':94,'multiline':True]['text':' case 1. ','line_number':103,'multiline':True]['text':' case 2. ','line_number':104,'multiline':True]['text':' case 3 ','line_number':105,'multiline':True]['text':' At the start of a line.  Indent. ','line_number':107,'multiline':True]['text':' Nulls only appear as end-of-string terminators.  Move them to the output
         *  buffer, but do not update the length of the buffer, so that any
         *  following output will overwrite the null. ','line_number':120,'multiline':True]['text':' Output a pointer value in hex.  Work with any size of pointer   ','line_number':137,'multiline':True]['text':' +1 for big endian, -1 for little endian          ','line_number':140,'multiline':True]['text':' point to current byte to output in the ptr val  ','line_number':141,'multiline':True]['text':' Little Endian.  Move p to most significant end of the value      ','line_number':144,'multiline':True]['text':' Loop through the bytes of the ptr as it sits in memory, from 
     * most significant to least significant end                    ','line_number':149,'multiline':True]['text':'   Loop runs once for each character in the format string.
     ','line_number':200,'multiline':True]['text':' Literal character, not part of a %sequence.  Just copy it to the output. ','line_number':205,'multiline':True]['text':' We hit the null that terminates the format string.
                 * This is the normal (and only) exit from the loop that
                 * interprets the format
                 ','line_number':208,'multiline':True]['text':' We encountered a '%'.  Pick up the following format char ','line_number':217,'multiline':True]['text':' single 8 bit char   ','line_number':222,'multiline':True]['text':' char * string, null terminated.  ','line_number':228,'multiline':True]['text':' UChar * string, with length, len==-1 for null terminated. ','line_number':234,'multiline':True]['text':' Ptr    ','line_number':235,'multiline':True]['text':' Length ','line_number':236,'multiline':True]['text':'  8 bit int  ','line_number':241,'multiline':True]['text':'  16 bit int  ','line_number':247,'multiline':True]['text':'  32 bit int  ','line_number':253,'multiline':True]['text':'  64 bit long  ','line_number':259,'multiline':True]['text':'  Pointers.   ','line_number':265,'multiline':True]['text':' Single '%' at end of fmt string.  Output as literal '%'.   
             * Back up index into format string so that the terminating null will be
             * re-fetched in the outer loop, causing it to terminate.
             ','line_number':271,'multiline':True]['text':' Vector of values, e.g. %vh ','line_number':281,'multiline':True]['text':' b, h, d, l, p, etc. ','line_number':292,'multiline':True]['text':' test for null terminated array. ','line_number':326,'multiline':True]['text':' for test for null terminated array. ','line_number':332,'multiline':True]['text':' for test for null term. array. ','line_number':339,'multiline':True]['text':' for test for null term. array. ','line_number':347,'multiline':True]['text':' %. in format string, where . is some character not in the set
             *    of recognized format chars.  Just output it as if % wasn't there.
             *    (Covers "%%" outputing a single '%')
             ','line_number':370,'multiline':True]['text':' Make sure that output is null terminated  ','line_number':377,'multiline':True]['text':' outIx + 1 because outIx does not increment when outputing final null. ','line_number':378,'multiline':True]