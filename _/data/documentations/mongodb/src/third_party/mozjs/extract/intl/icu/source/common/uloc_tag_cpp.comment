['text':' © 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
**********************************************************************
*   Copyright (C) 2009-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':3,'multiline':True]['text':' struct holding a single variant ','line_number':28,'multiline':True]['text':' struct holding a single attribute value ','line_number':34,'multiline':True]['text':' struct holding a single extension ','line_number':40,'multiline':True]['text':' holding parsed subtags ','line_number':49,'multiline':True]['text':'
 Updated on 2018-09-12 from
 https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry .

 This table has 2 parts. The part for
 legacy language tags (marked as “Type: grandfathered” in BCP 47)
 is generated by the following scripts from the IANA language tag registry.

 curl  https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry |\
 egrep -A 7 'Type: grandfathered' | \
 egrep 'Tag|Prefe' | grep -B1 'Preferred' | grep -v '^--' | \
 awk -n '/Tag/ {printf("    \"%s\", ", $2);} /Preferred/ {printf("\"%s\",\n", $2);}' |\
 tr 'A-Z' 'a-z'


 The 2nd part is made of five ICU-specific entries. They're kept for
 the backward compatibility for now, even though there are no preferred
 values. They may have to be removed for the strict BCP 47 compliance.

','line_number':85,'multiline':True]['text':'  legacy          preferred ','line_number':106,'multiline':True]['text':' Legacy tags with no preferred value in the IANA','line_number':129,'multiline':False]['text':' registry. Kept for now for the backward compatibility','line_number':130,'multiline':False]['text':' because ICU has mapped them this way.','line_number':131,'multiline':False]['text':'
 Updated on 2018-09-12 from
 https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry .

 The table lists redundant tags with preferred value in the IANA languate tag registry.
 It's generated with the following command:

 curl  https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry |\
 grep 'Type: redundant' -A 5 | egrep '^(Tag:|Prefer)' | grep -B1 'Preferred' | \
 awk -n '/Tag/ {printf("    \"%s\",       ", $2);} /Preferred/ {printf("\"%s\",\n", $2);}' | \
 tr 'A-Z' 'a-z'

 In addition, ja-latn-hepburn-heploc is mapped to ja-latn-alalc97 because
 a variant tag 'hepburn-heploc' has the preferred subtag, 'alaic97'.
','line_number':138,'multiline':True]['text':'  redundant       preferred','line_number':155,'multiline':False]['text':' variant tag with preferred value','line_number':182,'multiline':False]['text':'
  Updated on 2018-09-12 from
  https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry .

  grep 'Type: language' -A 7 language-subtag-registry  | egrep 'Subtag|Prefe' | \
  grep -B1 'Preferred' | grep -v '^--' | \
  awk -n '/Subtag/ {printf("    \"%s\",       ", $2);} /Preferred/ {printf("\"%s\",\n", $2);}'

  Make sure that 2-letter language subtags come before 3-letter subtags.
','line_number':186,'multiline':True]['text':'  deprecated  new ','line_number':197,'multiline':True]['text':'
  Updated on 2018-04-24 from

  curl  https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry | \
  grep 'Type: region' -A 7 | egrep 'Subtag|Prefe' | \
  grep -B1 'Preferred' | \
  awk -n '/Subtag/ {printf("    \"%s\",       ", $2);} /Preferred/ {printf("\"%s\",\n", $2);}'
','line_number':278,'multiline':True]['text':'  deprecated  new ','line_number':287,'multiline':True]['text':'
* -------------------------------------------------
*
* These ultag_ functions may be exposed as APIs later
*
* -------------------------------------------------
','line_number':296,'multiline':True]['text':'*
 * \class LocalULanguageTagPointer
 * "Smart pointer" class, closes a ULanguageTag via ultag_close().
 * For most methods see the LocalPointerBase base class.
 *
 * @see LocalPointerBase
 * @see LocalPointer
 * @internal
 ','line_number':355,'multiline':True]['text':'
* -------------------------------------------------
*
* Language subtag syntax validation functions
*
* -------------------------------------------------
','line_number':368,'multiline':True]['text':'
     * unicode_language_subtag = alpha{2,3} | alpha{5,8};
     * NOTE: Per ICUTC 2019/01/23- accepting alpha 4
     * See ICU-20372
     ','line_number':422,'multiline':True]['text':'
     * extlang       = 3ALPHA              ; selected ISO 639 codes
     *                 *2("-" 3ALPHA)      ; permanently reserved
     ','line_number':438,'multiline':True]['text':'
     * script        = 4ALPHA              ; ISO 15924 code
     ','line_number':453,'multiline':True]['text':'
     * region        = 2ALPHA              ; ISO 3166-1 code
     *               / 3DIGIT              ; UN M.49 code
     ','line_number':467,'multiline':True]['text':'
     * variant       = 5*8alphanum         ; registered variants
     *               / (DIGIT 3alphanum)
     ','line_number':485,'multiline':True]['text':' This is for the ICU-specific "lvariant" handling.','line_number':535,'multiline':False]['text':'
     * variant       = 1*8alphanum         ; registered variants
     *               / (DIGIT 3alphanum)
     ','line_number':538,'multiline':True]['text':'
     * extension     = singleton 1*("-" (2*8alphanum))
     *
     * singleton     = DIGIT               ; 0 - 9
     *               / %x41-57             ; A - W
     *               / %x59-5A             ; Y - Z
     *               / %x61-77             ; a - w
     *               / %x79-7A             ; y - z
     ','line_number':547,'multiline':True]['text':'
     * extension     = singleton 1*("-" (2*8alphanum))
     ','line_number':567,'multiline':True]['text':'
     * privateuse    = "x" 1*("-" (1*8alphanum))
     ','line_number':580,'multiline':True]['text':'
     * attribute = alphanum{3,8} ;
     ','line_number':593,'multiline':True]['text':'
     * key = alphanum alpha ;
     ','line_number':606,'multiline':True]['text':'
     * alphanum{3,8}
     ','line_number':620,'multiline':True]['text':'
     * type = alphanum{3,8} (sep alphanum{3,8})* ;
     ','line_number':628,'multiline':True]['text':'
     * tkey = alpha digit ;
     ','line_number':637,'multiline':True]['text':'
     * tvalue = (sep alphanum{3,8})+ ;
     ','line_number':668,'multiline':True]['text':' Start, wait for unicode_language_subtag, tkey or end','line_number':677,'multiline':False]['text':' Got unicode_language_subtag, wait for unicode_script_subtag,','line_number':678,'multiline':False]['text':' unicode_region_subtag, unicode_variant_subtag, tkey or end','line_number':679,'multiline':False]['text':' Got unicode_script_subtag, wait for unicode_region_subtag,','line_number':680,'multiline':False]['text':' unicode_variant_subtag, tkey, or end','line_number':681,'multiline':False]['text':' Got unicode_region_subtag, wait for unicode_variant_subtag,','line_number':682,'multiline':False]['text':' tkey, or end.','line_number':683,'multiline':False]['text':' Got unicode_variant_subtag, wait for unicode_variant_subtag','line_number':684,'multiline':False]['text':' tkey or end.','line_number':685,'multiline':False]['text':' Got tkey, wait for tvalue. ERROR if stop here.','line_number':686,'multiline':False]['text':' Got tvalue, wait for tkey, tvalue or end','line_number':687,'multiline':False]['text':' Start, wait for a key or attribute or end','line_number':750,'multiline':False]['text':' Got a key, wait for type or key or end','line_number':751,'multiline':False]['text':' Got a type, wait for key or end','line_number':752,'multiline':False]['text':'
* -------------------------------------------------
*
* Helper functions
*
* -------------------------------------------------
','line_number':828,'multiline':True]['text':' variants order should be preserved ','line_number':847,'multiline':True]['text':' Checking for duplicate variant ','line_number':857,'multiline':True]['text':' duplicated variant ','line_number':860,'multiline':True]['text':' reorder variants in alphabetical order ','line_number':883,'multiline':True]['text':' duplicated variant ','line_number':903,'multiline':True]['text':' reorder variants in alphabetical order ','line_number':927,'multiline':True]['text':' special handling for locale to bcp conversion ','line_number':937,'multiline':True]['text':' Both are u extension keys - we need special handling for 'attribute' ','line_number':959,'multiline':True]['text':' duplicated extension key ','line_number':981,'multiline':True]['text':' Note: returned language code is in lower case letters ','line_number':1033,'multiline':True]['text':' invalid language code ','line_number':1038,'multiline':True]['text':' resolve deprecated ','line_number':1045,'multiline':True]['text':' 2-letter deprecated subtags are listede before 3-letter','line_number':1047,'multiline':False]['text':' ones in DEPRECATEDLANGS[]. Get out of loop on coming','line_number':1048,'multiline':False]['text':' across the 1st 3-letter subtag, if the input is a 2-letter code.','line_number':1049,'multiline':False]['text':' to avoid continuing to try when there's no match.','line_number':1050,'multiline':False]['text':' invalid script code ','line_number':1082,'multiline':True]['text':' invalid region code ','line_number':1114,'multiline':True]['text':' resolve deprecated ','line_number':1121,'multiline':True]['text':' Swap var1->variant and var2->variant.','line_number':1137,'multiline':False]['text':' terminate ','line_number':1178,'multiline':True]['text':' ignore empty variant ','line_number':1185,'multiline':True]['text':' ICU uses upper case letters for variants, but
                       the canonical format is lowercase in BCP47 ','line_number':1187,'multiline':True]['text':' validate ','line_number':1193,'multiline':True]['text':' emit the variant to the list ','line_number':1196,'multiline':True]['text':' duplicated variant ','line_number':1204,'multiline':True]['text':' Special handling for POSIX variant, need to remember that we had it and then ','line_number':1212,'multiline':True]['text':' treat it like an extension later. ','line_number':1213,'multiline':True]['text':' Handle private use subtags separately ','line_number':1220,'multiline':True]['text':' reset variant starting position ','line_number':1224,'multiline':True]['text':' per UTS35, we should sort the variants ','line_number':1236,'multiline':True]['text':' write out validated/normalized variants to the target ','line_number':1239,'multiline':True]['text':' clean up ','line_number':1250,'multiline':True]['text':' reorder extensions ','line_number':1278,'multiline':True]['text':' ignore this keyword ','line_number':1313,'multiline':True]['text':' special keyword used for representing Unicode locale attributes ','line_number':1321,'multiline':True]['text':' create AttributeListEntry ','line_number':1342,'multiline':True]['text':' for a place holder ExtensionListEntry ','line_number':1366,'multiline':True]['text':' we've checked buf is null-terminated above ','line_number':1380,'multiline':True]['text':'
                    When uloc_toUnicodeLocaleType(key, buf) returns the
                    input value as is, the value is well-formed, but has
                    no known mapping. This implementation normalizes the
                    value to lower case
                    ','line_number':1390,'multiline':True]['text':' create ExtensionListEntry ','line_number':1442,'multiline':True]['text':' Special handling for POSIX variant - add the keywords for POSIX ','line_number':1459,'multiline':True]['text':' create ExtensionListEntry for POSIX ','line_number':1461,'multiline':True]['text':' Silently ignore errors.','line_number':1471,'multiline':False]['text':' first LDML u singlton extension ','line_number':1479,'multiline':True]['text':' write out the sorted BCP47 attributes, extensions and private use ','line_number':1484,'multiline':True]['text':' write the value for the attributes ','line_number':1486,'multiline':True]['text':'*
 * Append keywords parsed from LDML extension value
 * e.g. "u-ca-gregory-co-trad" -> {calendar = gregorian} {collation = traditional}
 * Note: char* buf is used for storing keywords
 ','line_number':1506,'multiline':True]['text':' beginning of current subtag ','line_number':1513,'multiline':True]['text':' beginning of key-type pairs ','line_number':1514,'multiline':True]['text':' first LDML keyword ','line_number':1517,'multiline':True]['text':' Reset the posixVariant value ','line_number':1522,'multiline':True]['text':' first attribute ','line_number':1529,'multiline':True]['text':' Iterate through u extension attributes ','line_number':1537,'multiline':True]['text':' locate next separator char ','line_number':1539,'multiline':True]['text':' add this attribute to the list ','line_number':1547,'multiline':True]['text':' duplicate attribute is ignored, causes no error.','line_number':1564,'multiline':False]['text':' next tag ','line_number':1567,'multiline':True]['text':' next to the separator ','line_number':1570,'multiline':True]['text':' emit attributes as an LDML keyword, e.g. attribute=attr1-attr2 ','line_number':1576,'multiline':True]['text':' attribute subtags sorted in alphabetical order as type ','line_number':1590,'multiline':True]['text':' u extenstion key subtag ','line_number':1615,'multiline':True]['text':' beginning of u extension type subtag(s) ','line_number':1616,'multiline':True]['text':' BCP47 representation of LDML key/type pairs ','line_number':1622,'multiline':True]['text':' locate next separator char ','line_number':1629,'multiline':True]['text':' within LDML type subtags ','line_number':1643,'multiline':True]['text':' next tag ','line_number':1652,'multiline':True]['text':' next to the separator ','line_number':1655,'multiline':True]['text':' processing last one ','line_number':1659,'multiline':True]['text':' LDML key ','line_number':1665,'multiline':True]['text':' LDML type ','line_number':1666,'multiline':True]['text':' BCP key length is always 2 for now ','line_number':1668,'multiline':True]['text':' the BCP key is invalid ','line_number':1673,'multiline':True]['text':' u extension key to LDML key ','line_number':1682,'multiline':True]['text':'
                    The key returned by toLegacyKey points to the input buffer.
                    We normalize the result key to lower case.
                    ','line_number':1689,'multiline':True]['text':' practically long enough even considering multiple subtag type ','line_number':1706,'multiline':True]['text':' the BCP type is too long ','line_number':1708,'multiline':True]['text':' BCP type to locale type ','line_number':1716,'multiline':True]['text':'
                        The type returned by toLegacyType points to the input buffer.
                        We normalize the result type to lower case.
                        ','line_number':1723,'multiline':True]['text':' normalize to lower case ','line_number':1727,'multiline':True]['text':' typeless - default type value is "yes" ','line_number':1740,'multiline':True]['text':' Special handling for u-va-posix, since we want to treat this as a variant, 
                   not as a keyword ','line_number':1744,'multiline':True]['text':' create an ExtensionListEntry for this keyword ','line_number':1749,'multiline':True]['text':' duplicate keyword is allowed, Only the first','line_number':1760,'multiline':False]['text':' is honored.','line_number':1761,'multiline':False]['text':' resolve locale keywords and reordering keys ','line_number':1799,'multiline':True]['text':' Determine if variants already exists ','line_number':1804,'multiline':True]['text':' add private use as a keyword ','line_number':1831,'multiline':True]['text':' If a POSIX variant was in the extensions, write it out before writing the keywords. ','line_number':1845,'multiline':True]['text':' write out the sorted keywords ','line_number':1853,'multiline':True]['text':' key ','line_number':1864,'multiline':True]['text':' type ','line_number':1869,'multiline':True]['text':' terminate ','line_number':1914,'multiline':True]['text':' Private use in the canonical format is lowercase in BCP47 ','line_number':1917,'multiline':True]['text':' validate ','line_number':1922,'multiline':True]['text':' reset private use starting position ','line_number':1972,'multiline':True]['text':'
* -------------------------------------------------
*
* ultag_ functions
*
* -------------------------------------------------
','line_number':1991,'multiline':True]['text':' Bit flags used by the parser ','line_number':1999,'multiline':True]['text':'*
 * Ticket #12705 - The optimizer in Visual Studio 2015 Update 3 has problems optimizing this function.
 * As a work-around, optimization is disabled for this function on VS2015 and VS2017.
 * This work-around should be removed once the following versions of Visual Studio are no
 * longer supported: All versions of VS2015/VS2017, and versions of VS2019 below 16.4.
 ','line_number':2009,'multiline':True]['text':' copy the entire string ','line_number':2044,'multiline':True]['text':' create a ULanguageTag ','line_number':2056,'multiline':True]['text':' the input tag is too short - return empty ULanguageTag ','line_number':2068,'multiline':True]['text':' Legacy tag will be consider together. Legacy tag with intervening','line_number':2073,'multiline':False]['text':' script and region such as art-DE-lojban or art-Latn-lojban won't be','line_number':2074,'multiline':False]['text':' matched.','line_number':2075,'multiline':False]['text':' check if the tag is legacy ','line_number':2076,'multiline':True]['text':' make sure next char is '-'.','line_number':2083,'multiline':False]['text':' back up for output parsedLen ','line_number':2089,'multiline':True]['text':' The preferred tag for a redundant tag is always shorter than redundant','line_number':2115,'multiline':False]['text':' tag. A redundant tag may or may not be followed by other subtags.','line_number':2116,'multiline':False]['text':' (i.e. "zh-yue" or "zh-yue-u-co-pinyin").','line_number':2117,'multiline':False]['text':' parsedLen should be the length of the input','line_number':2131,'multiline':False]['text':' before redundantTag is replaced by preferredTag.','line_number':2132,'multiline':False]['text':' Save the delta to add it back later.','line_number':2133,'multiline':False]['text':'
     * langtag      =   language
     *                  ["-" script]
     *                  ["-" region]
     *                  *("-" variant)
     *                  *("-" extension)
     *                  ["-" privateuse]
     ','line_number':2141,'multiline':True]['text':' locate next separator char ','line_number':2162,'multiline':True]['text':' last subtag ','line_number':2171,'multiline':True]['text':' terminate ','line_number':2180,'multiline':True]['text':' TODO: move deprecated language code handling here.','line_number':2181,'multiline':False]['text':' to title case ','line_number':2211,'multiline':True]['text':' TODO: move deprecated region code handling here.','line_number':2228,'multiline':False]['text':' duplicated variant entry ','line_number':2251,'multiline':True]['text':' the previous extension is incomplete ','line_number':2264,'multiline':True]['text':' terminate the previous extension value ','line_number':2270,'multiline':True]['text':' insert the extension to the list ','line_number':2274,'multiline':True]['text':' stop parsing here ','line_number':2278,'multiline':True]['text':' create a new extension ','line_number':2285,'multiline':True]['text':' will be set later ','line_number':2293,'multiline':True]['text':'
                 * reset the start and the end location of extension value
                 * subtags for this extension
                 ','line_number':2295,'multiline':True]['text':' if the start postion of this extension's value is not yet,
                        this one is the first value subtag ','line_number':2309,'multiline':True]['text':' Mark the end of this subtag ','line_number':2314,'multiline':True]['text':' Process the last extension ','line_number':2326,'multiline':True]['text':' the previous extension is incomplete ','line_number':2328,'multiline':True]['text':' terminate the previous extension value ','line_number':2333,'multiline':True]['text':' insert the extension to the list ','line_number':2337,'multiline':True]['text':' stop parsing here ','line_number':2342,'multiline':True]['text':' The rest of part will be private use value subtags ','line_number':2350,'multiline':True]['text':' empty private use subtag ','line_number':2352,'multiline':True]['text':' back up the private use value start position ','line_number':2355,'multiline':True]['text':' validate private use value subtags ','line_number':2358,'multiline':True]['text':' last subtag ','line_number':2369,'multiline':True]['text':' No more subtags, exiting the parse loop ','line_number':2396,'multiline':True]['text':' If we fell through here, it means this subtag is illegal - quit parsing ','line_number':2402,'multiline':True]['text':' Process the last extension ','line_number':2407,'multiline':True]['text':' the previous extension is incomplete ','line_number':2409,'multiline':True]['text':' terminate the previous extension value ','line_number':2412,'multiline':True]['text':' insert the extension to the list ','line_number':2415,'multiline':True]['text':' Ticket #12705 - Turn optimization back on.','line_number':2431,'multiline':False]['text':'
* -------------------------------------------------
*
* Locale/BCP47 conversion APIs, exposed as uloc_*
*
* -------------------------------------------------
','line_number':2603,'multiline':True]['text':' Note: uloc_canonicalize returns "en_US_POSIX" for input locale ID "".  See #6835 ','line_number':2650,'multiline':True]['text':'minCapacity=','line_number':2657,'multiline':True]['text':'desiredCapacityHint=','line_number':2658,'multiline':True]['text':' Terminators provided by CharString.','line_number':2685,'multiline':False]['text':' For handling special case - private use only tag ','line_number':2694,'multiline':True]['text':' return private use only tag ','line_number':2716,'multiline':True]['text':' if not strict mode, then "und" will be returned ','line_number':2724,'multiline':True]['text':' language ','line_number':2792,'multiline':True]['text':' script ','line_number':2802,'multiline':True]['text':' write out the script in title case ','line_number':2809,'multiline':True]['text':' region ','line_number':2815,'multiline':True]['text':' write out the region in upper case ','line_number':2822,'multiline':True]['text':' variants ','line_number':2832,'multiline':True]['text':' write out the variant in upper case ','line_number':2845,'multiline':True]['text':' keywords ','line_number':2855,'multiline':True]['text':' need a language ','line_number':2860,'multiline':True]