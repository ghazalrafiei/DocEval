['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' BufferList represents a sequence of buffers of data. A BufferList can choose','line_number':21,'multiline':False]['text':' to own its buffers or not. The class handles writing to the buffers,','line_number':22,'multiline':False]['text':' iterating over them, and reading data out. Unlike SegmentedVector, the','line_number':23,'multiline':False]['text':' buffers may be of unequal size. Like SegmentedVector, BufferList is a nice','line_number':24,'multiline':False]['text':' way to avoid large contiguous allocations (which can trigger OOMs).','line_number':25,'multiline':False]['text':' Each buffer in a BufferList has a size and a capacity. The first mSize','line_number':33,'multiline':False]['text':' bytes are initialized and the remaining |mCapacity - mSize| bytes are free.','line_number':34,'multiline':False]['text':' For the convenience of callers, all segments are required to be a multiple','line_number':57,'multiline':False]['text':' of 8 bytes in capacity. Also, every buffer except the last one is required','line_number':58,'multiline':False]['text':' to be full (i.e., size == capacity). Therefore, a byte at offset N within','line_number':59,'multiline':False]['text':' the BufferList and stored in memory at an address A will satisfy','line_number':60,'multiline':False]['text':' (N % Align == A % Align) if Align == 2, 4, or 8.','line_number':61,'multiline':False]['text':' Allocate a BufferList. The BufferList will free all its buffers when it is','line_number':64,'multiline':False]['text':' destroyed. If an infallible allocator is used, an initial buffer of size','line_number':65,'multiline':False]['text':' aInitialSize and capacity aInitialCapacity is allocated automatically. This','line_number':66,'multiline':False]['text':' data will be contiguous and can be accessed via |Start()|. If a fallible','line_number':67,'multiline':False]['text':' alloc policy is used, aInitialSize must be 0, and the fallible |Init()|','line_number':68,'multiline':False]['text':' method may be called instead. Subsequent buffers will be allocated with','line_number':69,'multiline':False]['text':' capacity aStandardCapacity.','line_number':70,'multiline':False]['text':' Initializes the BufferList with a segment of the given size and capacity.','line_number':117,'multiline':False]['text':' May only be called once, before any segments have been allocated.','line_number':118,'multiline':False]['text':' We don't make an exact copy of aOther. Instead, create a single segment','line_number':132,'multiline':False]['text':' with enough space to hold all data in aOther.','line_number':133,'multiline':False]['text':' Returns the sum of the sizes of all the buffers.','line_number':149,'multiline':False]['text':' Iterates over bytes in the segments. You can advance it by as many bytes as','line_number':171,'multiline':False]['text':' you choose.','line_number':172,'multiline':False]['text':' Invariants:','line_number':174,'multiline':False]['text':'   (0) mSegment <= bufferList.mSegments.length()','line_number':175,'multiline':False]['text':'   (1) mData <= mDataEnd','line_number':176,'multiline':False]['text':'   (2) If mSegment is not the last segment, mData < mDataEnd','line_number':177,'multiline':False]['text':' Returns a pointer to the raw data. It is valid to access up to','line_number':193,'multiline':False]['text':' RemainingInSegment bytes of this buffer.','line_number':194,'multiline':False]['text':' Returns true if the memory in the range [Data(), Data() + aBytes) is all','line_number':200,'multiline':False]['text':' part of one contiguous buffer.','line_number':201,'multiline':False]['text':' Returns the largest value aBytes for which HasRoomFor(aBytes) will be','line_number':206,'multiline':False]['text':' true.','line_number':207,'multiline':False]['text':' Returns true if there are at least aBytes entries remaining in the','line_number':213,'multiline':False]['text':' BufferList after this iterator.','line_number':214,'multiline':False]['text':' Returns the largest value `aBytes` for which HasBytesAvailable(aBytes)','line_number':219,'multiline':False]['text':' will be true.','line_number':220,'multiline':False]['text':' Advances the iterator by aBytes bytes. aBytes must be less than','line_number':225,'multiline':False]['text':' RemainingInSegment(). If advancing by aBytes takes the iterator to the','line_number':226,'multiline':False]['text':' end of a buffer, it will be moved to the beginning of the next buffer','line_number':227,'multiline':False]['text':' unless it is the last buffer.','line_number':228,'multiline':False]['text':' Advance the iterator by aBytes, possibly crossing segments. This function','line_number':248,'multiline':False]['text':' returns false if it runs out of buffers to advance through. Otherwise it','line_number':249,'multiline':False]['text':' returns true.','line_number':250,'multiline':False]['text':' If we don't need to cross segments, we can directly use `Advance` to','line_number':252,'multiline':False]['text':' get to our destination.','line_number':253,'multiline':False]['text':' Check if we have enough bytes to scan this far forward.','line_number':259,'multiline':False]['text':' Compare the distance to our target offset from the end of the','line_number':264,'multiline':False]['text':' BufferList to the distance from the start of our next segment.','line_number':265,'multiline':False]['text':' Depending on which is closer, we'll advance either forwards or','line_number':266,'multiline':False]['text':' backwards.','line_number':267,'multiline':False]['text':' Advance through the buffer list until we reach the desired absolute','line_number':271,'multiline':False]['text':' offset.','line_number':272,'multiline':False]['text':' Scanning starting from the end of the BufferList. We advance','line_number':281,'multiline':False]['text':' backwards from the final segment until we find the segment to end in.','line_number':282,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' If we end on a segment boundary, make sure to place the cursor at the','line_number':284,'multiline':False]['text':' beginning of the next segment.','line_number':285,'multiline':False]['text':' Returns true when the iterator reaches the end of the BufferList.','line_number':299,'multiline':False]['text':' The absolute offset of this iterator within the BufferList.','line_number':302,'multiline':False]['text':' Special convenience method that returns Iter().Data().','line_number':313,'multiline':False]['text':' Copies aSize bytes from aData into the BufferList. The storage for these','line_number':322,'multiline':False]['text':' bytes may be split across multiple buffers. Size() is increased by aSize.','line_number':323,'multiline':False]['text':' Allocates a buffer of at most |aMaxBytes| bytes and, if successful, returns','line_number':326,'multiline':False]['text':' that buffer, and places its size in |aSize|. If unsuccessful, returns null','line_number':327,'multiline':False]['text':' and leaves |aSize| undefined.','line_number':328,'multiline':False]['text':' Copies possibly non-contiguous byte range starting at aIter into','line_number':331,'multiline':False]['text':' aData. aIter is advanced by aSize bytes. Returns false if it runs out of','line_number':332,'multiline':False]['text':' data before aSize.','line_number':333,'multiline':False]['text':' Return a new BufferList that shares storage with this BufferList. The new','line_number':336,'multiline':False]['text':' BufferList is read-only. It allows iteration over aSize bytes starting at','line_number':337,'multiline':False]['text':' aIter. Borrow can fail, in which case *aSuccess will be false upon','line_number':338,'multiline':False]['text':' return. The borrowed BufferList can use a different AllocPolicy than the','line_number':339,'multiline':False]['text':' original one. However, it is not responsible for freeing buffers, so the','line_number':340,'multiline':False]['text':' AllocPolicy is only used for the buffer vector.','line_number':341,'multiline':False]['text':' Return a new BufferList and move storage from this BufferList to it. The','line_number':347,'multiline':False]['text':' new BufferList owns the buffers. Move can fail, in which case *aSuccess','line_number':348,'multiline':False]['text':' will be false upon return. The new BufferList can use a different','line_number':349,'multiline':False]['text':' AllocPolicy than the original one. The new OtherAllocPolicy is responsible','line_number':350,'multiline':False]['text':' for freeing buffers, so the OtherAllocPolicy must use freeing method','line_number':351,'multiline':False]['text':' compatible to the original one.','line_number':352,'multiline':False]['text':' Return a new BufferList that adopts the byte range starting at Iter so that','line_number':357,'multiline':False]['text':' range [aIter, aIter + aSize) is transplanted to the returned BufferList.','line_number':358,'multiline':False]['text':' Contents of the buffer before aIter + aSize is left undefined.','line_number':359,'multiline':False]['text':' Extract can fail, in which case *aSuccess will be false upon return. The','line_number':360,'multiline':False]['text':' moved buffers are erased from the original BufferList. In case of extract','line_number':361,'multiline':False]['text':' fails, the original BufferList is intact.  All other iterators except aIter','line_number':362,'multiline':False]['text':' are invalidated.','line_number':363,'multiline':False]['text':' This method requires aIter and aSize to be 8-byte aligned.','line_number':364,'multiline':False]['text':' Return the number of bytes from 'start' to 'end', two iterators within','line_number':367,'multiline':False]['text':' this BufferList.','line_number':368,'multiline':False]['text':' This takes ownership of the data','line_number':374,'multiline':False]['text':' Truncate this BufferList at the given iterator location, discarding all','line_number':388,'multiline':False]['text':' data after this point. After this call, all other iterators will be','line_number':389,'multiline':False]['text':' invalidated, and the passed-in iterator will be "Done".','line_number':390,'multiline':False]['text':'','line_number':391,'multiline':False]['text':' Returns the number of bytes discarded by this truncation.','line_number':392,'multiline':False]['text':' We've run out of data in the last segment.','line_number':489,'multiline':False]['text':' Number of segments we'll need to copy data from to satisfy the request.','line_number':569,'multiline':False]['text':' If this is None then the last segment is a full segment, otherwise we need','line_number':571,'multiline':False]['text':' to copy this many bytes.','line_number':572,'multiline':False]['text':' Copy of the iterator to walk the BufferList and see how many segments we','line_number':575,'multiline':False]['text':' need to copy.','line_number':576,'multiline':False]['text':' We reached the end of the BufferList and there wasn't enough data to','line_number':588,'multiline':False]['text':' satisfy the request.','line_number':589,'multiline':False]['text':' The last block also counts as a segment. This makes the conditionals','line_number':593,'multiline':False]['text':' on segmentsNeeded work in the rest of the function.','line_number':594,'multiline':False]['text':' Copy the first segment, it's special because we can't just steal the','line_number':604,'multiline':False]['text':' entire Segment struct from this->mSegments.','line_number':605,'multiline':False]['text':'','line_number':606,'multiline':False]['text':' As we leave the data before the new `aIter` position as "unspecified", we','line_number':607,'multiline':False]['text':' leave this data in the existing buffer, despite copying it into the new','line_number':608,'multiline':False]['text':' buffer.','line_number':609,'multiline':False]['text':' The entirety of the request wasn't in the first segment, now copy the','line_number':617,'multiline':False]['text':' rest.','line_number':618,'multiline':False]['text':' Pre-allocate the final segment so that if this fails, we return before','line_number':622,'multiline':False]['text':' we delete the elements from |this->mSegments|.','line_number':623,'multiline':False]['text':' Copy segments from this over to the result and remove them from our','line_number':634,'multiline':False]['text':' storage. Not needed if the only segment we need to copy is the last','line_number':635,'multiline':False]['text':' partial one.','line_number':636,'multiline':False]['text':' Due to the way IterImpl works, there are two cases here: (1) if we've','line_number':645,'multiline':False]['text':' consumed the entirety of the BufferList, then the iterator is pointed at','line_number':646,'multiline':False]['text':' the end of the final segment, (2) otherwise it is pointed at the start','line_number':647,'multiline':False]['text':' of the next segment. We want to verify that we really consumed all','line_number':648,'multiline':False]['text':' |segmentsToCopy| segments.','line_number':649,'multiline':False]['text':' Reset the iter's position for what we just deleted.','line_number':656,'multiline':False]['text':' If our iterator is already at the end, we just removed the very last','line_number':661,'multiline':False]['text':' segment of our buffer list and need to shift the iterator back to point','line_number':662,'multiline':False]['text':' at the end of the previous segment.','line_number':663,'multiline':False]['text':' We called reserve() on result.mSegments so infallibleAppend is safe.','line_number':676,'multiline':False]['text':' Ensure that the iterator is still valid when Extract returns.','line_number':690,'multiline':False]['text':' Remove any segments after the iterator's current segment.','line_number':712,'multiline':False]['text':' The last segment is now aIter's current segment. Truncate or remove it.','line_number':722,'multiline':False]['text':' Correct `aIter` to point to the new end of the BufferList.','line_number':734,'multiline':False]['text':' namespace mozilla','line_number':749,'multiline':False]['text':' mozilla_BufferList_h ','line_number':751,'multiline':True]