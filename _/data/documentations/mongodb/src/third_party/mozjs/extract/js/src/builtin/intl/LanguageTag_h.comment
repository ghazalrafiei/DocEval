['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Structured representation of Unicode locale IDs used with Intl functions. ','line_number':7,'multiline':True]['text':'*
 * Return true if |language| is a valid language subtag.
 ','line_number':40,'multiline':True]['text':'*
 * Return true if |script| is a valid script subtag.
 ','line_number':46,'multiline':True]['text':'*
 * Return true if |region| is a valid region subtag.
 ','line_number':52,'multiline':True]['text':'*
 * Return true if |variant| is a valid variant subtag.
 ','line_number':59,'multiline':True]['text':'*
 * Return true if |extension| is a valid Unicode extension subtag.
 ','line_number':64,'multiline':True]['text':'*
 * Return true if |privateUse| is a valid private-use subtag.
 ','line_number':70,'multiline':True]['text':' Tell the analysis the |std::transform| function can't GC.','line_number':91,'multiline':False]['text':' Tell the analysis the |std::transform| function can't GC.','line_number':100,'multiline':False]['text':' Constants for language subtag lengths.','line_number':115,'multiline':False]['text':' unicode_language_subtag = alpha{2,3} | alpha{5,8} ;','line_number':118,'multiline':False]['text':' unicode_script_subtag = alpha{4} ;','line_number':121,'multiline':False]['text':' unicode_region_subtag = (alpha{2} | digit{3}) ;','line_number':124,'multiline':False]['text':' key = alphanum alpha ;','line_number':129,'multiline':False]['text':' tkey = alpha digit ;','line_number':132,'multiline':False]['text':' namespace LanguageTagLimits','line_number':135,'multiline':False]['text':' Fixed size language subtag which is stored inline in LanguageTag.','line_number':137,'multiline':False]['text':' zero initialize','line_number':141,'multiline':False]['text':' The toXYZCase() methods are using |Length| instead of |length()|, because','line_number':162,'multiline':False]['text':' current compilers (tested GCC and Clang) can't infer the maximum string','line_number':163,'multiline':False]['text':' length - even when using hints like |std::min| - and instead are emitting','line_number':164,'multiline':False]['text':' SIMD optimized code. Using a fixed sized length avoids emitting the SIMD','line_number':165,'multiline':False]['text':' code. (Emitting SIMD code doesn't make sense here, because the SIMD code','line_number':166,'multiline':False]['text':' only kicks in for long strings.) A fixed length will additionally ensure','line_number':167,'multiline':False]['text':' the compiler unrolls the loop in the case conversion code.','line_number':168,'multiline':False]['text':'*
 * Object representing a language tag.
 *
 * All subtags are already in canonicalized case.
 ','line_number':189,'multiline':True]['text':'*
   * Given a Unicode key and type, return the null-terminated preferred
   * replacement for that type if there is one, or null if there is none, e.g.
   * in effect
   * |replaceUnicodeExtensionType("ca", "islamicc") == "islamic-civil"|
   * and
   * |replaceUnicodeExtensionType("ca", "islamic-civil") == nullptr|.
   ','line_number':236,'multiline':True]['text':'*
   * Return the Unicode extension subtag or nullptr if not present.
   ','line_number':260,'multiline':True]['text':'*
   * Set the language subtag. The input must be a valid language subtag.
   ','line_number':269,'multiline':True]['text':'*
   * Set the language subtag. The input must be a valid language subtag.
   ','line_number':279,'multiline':True]['text':'*
   * Set the script subtag. The input must be a valid script subtag.
   ','line_number':287,'multiline':True]['text':'*
   * Set the script subtag. The input must be a valid script subtag or the empty
   * string.
   ','line_number':297,'multiline':True]['text':'*
   * Set the region subtag. The input must be a valid region subtag.
   ','line_number':306,'multiline':True]['text':'*
   * Set the region subtag. The input must be a valid region subtag or the empty
   * empty string.
   ','line_number':316,'multiline':True]['text':'*
   * Removes all variant subtags.
   ','line_number':325,'multiline':True]['text':'*
   * Set the Unicode extension subtag. The input must be a valid Unicode
   * extension subtag.
   ','line_number':330,'multiline':True]['text':'*
   * Remove any Unicode extension subtag if present.
   ','line_number':336,'multiline':True]['text':'*
   * Set the private-use subtag. The input must be a valid private-use subtag
   * or nullptr.
   ','line_number':341,'multiline':True]['text':'* Canonicalize the base-name (language, script, region, variant) subtags. ','line_number':352,'multiline':True]['text':'*
   * Canonicalize all extension subtags.
   ','line_number':355,'multiline':True]['text':'*
   * Canonicalizes the given structurally valid Unicode BCP 47 locale
   * identifier, including regularized case of subtags. For example, the
   * language tag Zh-haNS-bu-variant2-Variant1-u-ca-chinese-t-Zh-laTN-x-PRIVATE,
   * where
   *
   *     Zh             ; 2*3ALPHA
   *     -haNS          ; ["-" script]
   *     -bu            ; ["-" region]
   *     -variant2      ; *("-" variant)
   *     -Variant1
   *     -u-ca-chinese  ; *("-" extension)
   *     -t-Zh-laTN
   *     -x-PRIVATE     ; ["-" privateuse]
   *
   * becomes zh-Hans-MM-variant1-variant2-t-zh-latn-u-ca-chinese-x-private
   *
   * Spec: ECMAScript Internationalization API Specification, 6.2.3.
   ','line_number':360,'multiline':True]['text':'*
   * Return the string representation of this language tag.
   ','line_number':383,'multiline':True]['text':'*
   * Return the string representation of this language tag as a null-terminated
   * C-string.
   ','line_number':388,'multiline':True]['text':'*
   * Add likely-subtags to the language tag.
   *
   * Spec: <https://www.unicode.org/reports/tr35/#Likely_Subtags>
   ','line_number':394,'multiline':True]['text':'*
   * Remove likely-subtags from the language tag.
   *
   * Spec: <https://www.unicode.org/reports/tr35/#Likely_Subtags>
   ','line_number':401,'multiline':True]['text':'*
 * Parser for Unicode BCP 47 locale identifiers.
 *
 * <https://unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers>
 ','line_number':409,'multiline':True]['text':' Exposed as |public| for |MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS|.','line_number':416,'multiline':False]['text':' Copy the token characters into |subtag|.','line_number':468,'multiline':False]['text':' Create a string copy of |length| characters starting at |index|.','line_number':482,'multiline':False]['text':' Create a string copy of the token characters.','line_number':485,'multiline':False]['text':' unicode_language_subtag = alpha{2,3} | alpha{5,8} ;','line_number':500,'multiline':False]['text':'','line_number':501,'multiline':False]['text':' Four character language subtags are not allowed in Unicode BCP 47 locale','line_number':502,'multiline':False]['text':' identifiers. Also see the comparison to Unicode CLDR locale identifiers in','line_number':503,'multiline':False]['text':' <https://unicode.org/reports/tr35/#BCP_47_Conformance>.','line_number':504,'multiline':False]['text':' unicode_script_subtag = alpha{4} ;','line_number':510,'multiline':False]['text':' unicode_region_subtag = (alpha{2} | digit{3}) ;','line_number':515,'multiline':False]['text':' unicode_variant_subtag = (alphanum{5,8} | digit alphanum{3}) ;','line_number':521,'multiline':False]['text':' Returns the code unit of the first character at the given singleton token.','line_number':527,'multiline':False]['text':' Always returns the lower case form of an alphabetical character.','line_number':528,'multiline':False]['text':' extensions = unicode_locale_extensions |','line_number':534,'multiline':False]['text':'              transformed_extensions |','line_number':535,'multiline':False]['text':'              other_extensions ;','line_number':536,'multiline':False]['text':'','line_number':537,'multiline':False]['text':' unicode_locale_extensions = sep [uU] ((sep keyword)+ |','line_number':538,'multiline':False]['text':'                                       (sep attribute)+ (sep keyword)*) ;','line_number':539,'multiline':False]['text':'','line_number':540,'multiline':False]['text':' transformed_extensions = sep [tT] ((sep tlang (sep tfield)*) |','line_number':541,'multiline':False]['text':'                                    (sep tfield)+) ;','line_number':542,'multiline':False]['text':'','line_number':543,'multiline':False]['text':' other_extensions = sep [alphanum-[tTuUxX]] (sep alphanum{2,8})+ ;','line_number':544,'multiline':False]['text':' other_extensions = sep [alphanum-[tTuUxX]] (sep alphanum{2,8})+ ;','line_number':549,'multiline':False]['text':' unicode_locale_extensions = sep [uU] ((sep keyword)+ |','line_number':554,'multiline':False]['text':'                                       (sep attribute)+ (sep keyword)*) ;','line_number':555,'multiline':False]['text':' keyword = key (sep type)? ;','line_number':556,'multiline':False]['text':' attribute = alphanum{3,8} ;','line_number':562,'multiline':False]['text':' key = alphanum alpha ;','line_number':567,'multiline':False]['text':' type = alphanum{3,8} (sep alphanum{3,8})* ;','line_number':572,'multiline':False]['text':' tkey = alpha digit ;','line_number':577,'multiline':False]['text':' tvalue = (sep alphanum{3,8})+ ;','line_number':583,'multiline':False]['text':' pu_extensions = sep [xX] (sep alphanum{1,8})+ ;','line_number':588,'multiline':False]['text':' pu_extensions = sep [xX] (sep alphanum{1,8})+ ;','line_number':593,'multiline':False]['text':' Helper function for use in |parseBaseName| and','line_number':598,'multiline':False]['text':' |parseTlangInTransformExtension|.  Do not use this directly!','line_number':599,'multiline':False]['text':' Parse the `unicode_language_id` production, i.e. the','line_number':604,'multiline':False]['text':' language/script/region/variants portion of a language tag, into |tag|.','line_number':605,'multiline':False]['text':' |tok| must be the current token.','line_number':606,'multiline':False]['text':' Parse the `tlang` production within a parsed 't' transform extension.','line_number':612,'multiline':False]['text':' The precise requirements for "previously parsed" are:','line_number':613,'multiline':False]['text':'','line_number':614,'multiline':False]['text':'   * the input begins from current token |tok| with a valid `tlang`','line_number':615,'multiline':False]['text':'   * the `tlang` is wholly lowercase (*not* canonical case)','line_number':616,'multiline':False]['text':'   * variant subtags in the `tlang` may contain duplicates and be','line_number':617,'multiline':False]['text':'     unordered','line_number':618,'multiline':False]['text':'','line_number':619,'multiline':False]['text':' Return an error on internal failure. Otherwise, return a success value. If','line_number':620,'multiline':False]['text':' there was no `tlang`, then |tag.language().missing()|. But if there was a','line_number':621,'multiline':False]['text':' `tlang`, then |tag| is filled with subtags exactly as they appeared in the','line_number':622,'multiline':False]['text':' parse input.','line_number':623,'multiline':False]['text':' Parse |extension|, which must be a validated, fully lowercase','line_number':654,'multiline':False]['text':' `transformed_extensions` subtag, and fill |tag| and |fields| from the','line_number':655,'multiline':False]['text':' `tlang` and `tfield` components. Data in |tag| is lowercase, consistent','line_number':656,'multiline':False]['text':' with |extension|.','line_number':657,'multiline':False]['text':' Parse |extension|, which must be a validated, fully lowercase','line_number':662,'multiline':False]['text':' `unicode_locale_extensions` subtag, and fill |attributes| and |keywords|','line_number':663,'multiline':False]['text':' from the `attribute` and `keyword` components.','line_number':664,'multiline':False]['text':' Parse the input string as a language tag. Reports an error to the context','line_number':673,'multiline':False]['text':' if the input can't be parsed completely.','line_number':674,'multiline':False]['text':' Parse the input string as a language tag. Reports an error to the context','line_number':677,'multiline':False]['text':' if the input can't be parsed completely.','line_number':678,'multiline':False]['text':' Parse the input string as a language tag. Returns Ok(true) if the input','line_number':682,'multiline':False]['text':' could be completely parsed, Ok(false) if the input couldn't be parsed,','line_number':683,'multiline':False]['text':' or Err() in case of internal error.','line_number':684,'multiline':False]['text':' Parse the input string as a language tag. Returns Ok(true) if the input','line_number':688,'multiline':False]['text':' could be completely parsed, Ok(false) if the input couldn't be parsed,','line_number':689,'multiline':False]['text':' or Err() in case of internal error.','line_number':690,'multiline':False]['text':' Parse the input string as the base-name parts (language, script, region,','line_number':695,'multiline':False]['text':' variants) of a language tag. Ignores any trailing characters.','line_number':696,'multiline':False]['text':' Parse the input string as the base-name parts (language, script, region,','line_number':700,'multiline':False]['text':' variants) of a language tag. Returns Ok(true) if the input could be','line_number':701,'multiline':False]['text':' completely parsed, Ok(false) if the input couldn't be parsed, or Err() in','line_number':702,'multiline':False]['text':' case of internal error.','line_number':703,'multiline':False]['text':' Return true iff |extension| can be parsed as a Unicode extension subtag.','line_number':708,'multiline':False]['text':' Return true iff |unicodeType| can be parsed as a Unicode extension type.','line_number':711,'multiline':False]['text':'*
 * Parse a string as a standalone |language| tag. If |str| is a standalone
 * language tag, store it in |result| and return true. Otherwise return false.
 ','line_number':717,'multiline':True]['text':'*
 * Parse a string as a standalone |script| tag. If |str| is a standalone script
 * tag, store it in |result| and return true. Otherwise return false.
 ','line_number':724,'multiline':True]['text':'*
 * Parse a string as a standalone |region| tag. If |str| is a standalone region
 * tag, store it in |result| and return true. Otherwise return false.
 ','line_number':731,'multiline':True]['text':'*
 * Parse a string as an ISO-639 language code. Return |nullptr| in the result if
 * the input could not be parsed or the canonical form of the resulting language
 * tag contains more than a single language subtag.
 ','line_number':738,'multiline':True]['text':' namespace intl','line_number':768,'multiline':False]['text':' namespace js','line_number':770,'multiline':False]['text':' builtin_intl_LanguageTag_h ','line_number':772,'multiline':True]