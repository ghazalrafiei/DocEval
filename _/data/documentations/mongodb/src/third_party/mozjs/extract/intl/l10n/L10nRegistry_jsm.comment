['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' eslint-disable-next-line mozilla/use-services','line_number':7,'multiline':False]['text':'*
 * L10nRegistry is a localization resource management system for Gecko.
 *
 * It manages the list of resource sources provided with the app and allows
 * for additional sources to be added and updated.
 *
 * It's primary purpose is to allow for building an iterator over FluentBundle objects
 * that will be utilized by a localization API.
 *
 * The generator creates all possible permutations of locales and sources to allow for
 * complete fallbacking.
 *
 * Example:
 *
 *   FileSource1:
 *     name: 'app'
 *     locales: ['en-US', 'de']
 *     resources: [
 *       '/browser/menu.ftl',
 *       '/platform/toolkit.ftl',
 *     ]
 *   FileSource2:
 *     name: 'platform'
 *     locales: ['en-US', 'de']
 *     resources: [
 *       '/platform/toolkit.ftl',
 *     ]
 *
 * If the user will request:
 *   L10nRegistry.generateBundles(['de', 'en-US'], [
 *     '/browser/menu.ftl',
 *     '/platform/toolkit.ftl'
 *   ]);
 *
 * the generator will return an async iterator over the following contexts:
 *
 *   {
 *     locale: 'de',
 *     resources: [
 *       ['app', '/browser/menu.ftl'],
 *       ['app', '/platform/toolkit.ftl'],
 *     ]
 *   },
 *   {
 *     locale: 'de',
 *     resources: [
 *       ['app', '/browser/menu.ftl'],
 *       ['platform', '/platform/toolkit.ftl'],
 *     ]
 *   },
 *   {
 *     locale: 'en-US',
 *     resources: [
 *       ['app', '/browser/menu.ftl'],
 *       ['app', '/platform/toolkit.ftl'],
 *     ]
 *   },
 *   {
 *     locale: 'en-US',
 *     resources: [
 *       ['app', '/browser/menu.ftl'],
 *       ['platform', '/platform/toolkit.ftl'],
 *     ]
 *   }
 *
 * This allows the localization API to consume the FluentBundle and lazily fallback
 * on the next in case of a missing string or error.
 *
 * If during the life-cycle of the app a new source is added, the generator can be called again
 * and will produce a new set of permutations placing the language pack provided resources
 * at the top.
 *
 * Notice: L10nRegistry is primarily an asynchronous API, but
 * it does provide a synchronous version of it's main method
 * for use  by the `Localization` class when in `sync` state.
 * This API should be only used in very specialized cases and
 * the uses should be reviewed by the toolkit owner/peer.
 ','line_number':18,'multiline':True]['text':' Categories are sorted alphabetically, so we name our sources:','line_number':102,'multiline':False]['text':'   - 0-toolkit','line_number':103,'multiline':False]['text':'   - 5-browser','line_number':104,'multiline':False]['text':'   - langpack-{locale}','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' This should ensure that they're returned in the correct order.','line_number':107,'multiline':False]['text':'*
   * Empty the sources to mimic shutdown for testing from xpcshell.
   ','line_number':121,'multiline':True]['text':'*
   * Based on the list of requested languages and resource Ids,
   * this function returns an lazy iterator over message context permutations.
   *
   * Notice: Any changes to this method should be copied
   * to the `generateBundlesSync` equivalent below.
   *
   * @param {Array} requestedLangs
   * @param {Array} resourceIds
   * @returns {AsyncIterator<FluentBundle>}
   ','line_number':137,'multiline':True]['text':'*
   * This is a synchronous version of the `generateBundles`
   * method and should stay completely in sync with it at all
   * times except of the async/await changes.
   *
   * Notice: This method should be avoided at all costs
   * You can think of it similarly to a synchronous XMLHttpRequest.
   *
   * @param {Array} requestedLangs
   * @param {Array} resourceIds
   * @returns {Iterator<FluentBundle>}
   ','line_number':169,'multiline':True]['text':'*
   * Check whether a source with the given known is already registered.
   *
   * @param {String} sourceName
   * @returns {boolean} whether or not a source by that name is known.
   ','line_number':202,'multiline':True]['text':'*
   * Adds new resource source(s) to the L10nRegistry.
   *
   * Notice: Each invocation of this method flushes any changes out to extant
   * content processes, which is expensive. Please coalesce multiple
   * registrations into a single sources array and then call this method once.
   *
   * @param {Array<FileSource>} sources
   ','line_number':212,'multiline':True]['text':'*
   * Updates existing sources in the L10nRegistry
   *
   * That will usually happen when a new version of a source becomes
   * available (for example, an updated version of a language pack).
   *
   * Notice: Each invocation of this method flushes any changes out to extant
   * content processes, which is expensive. Please coalesce multiple updates
   * into a single sources array and then call this method once.
   *
   * @param {Array<FileSource>} sources
   ','line_number':234,'multiline':True]['text':'*
   * Removes sources from the L10nRegistry.
   *
   * Notice: Each invocation of this method flushes any changes out to extant
   * content processes, which is expensive. Please coalesce multiple removals
   * into a single sourceNames array and then call this method once.
   *
   * @param {Array<String>} sourceNames
   ','line_number':259,'multiline':True]['text':' We must explicitly flush or else flushing won't happen until the main','line_number':291,'multiline':False]['text':' thread goes idle.','line_number':292,'multiline':False]['text':'*
   * Returns a list of locales for which at least one source
   * has resources.
   *
   * @returns {Array<String>}
   ','line_number':319,'multiline':True]['text':'*
 * This function generates an iterator over FluentBundles for a single locale
 * for a given list of resourceIds for all possible combinations of sources.
 *
 * This function is called recursively to generate all possible permutations
 * and uses the last, optional parameter, to pass the already resolved
 * sources order.
 *
 * Notice: Any changes to this method should be copied
 * to the `generateResourceSetsForLocaleSync` equivalent below.
 *
 * @param {String} locale
 * @param {Array} sourcesOrder
 * @param {Array} resourceIds
 * @param {Array} [resolvedOrder]
 * @returns {AsyncIterator<FluentBundle>}
 ','line_number':337,'multiline':True]['text':' Inside that loop we have a list of resources and the sources for them, like this:','line_number':358,'multiline':False]['text':'   ['test.ftl', 'menu.ftl', 'foo.ftl']','line_number':359,'multiline':False]['text':'   ['app', 'platform', 'app']','line_number':360,'multiline':False]['text':' We want to bail out early if we know that any of','line_number':364,'multiline':False]['text':' the (res)x(source) combinations in the permutation','line_number':365,'multiline':False]['text':' are unavailable.','line_number':366,'multiline':False]['text':' The combination may have been `undefined` when we','line_number':367,'multiline':False]['text':' stepped into this branch, and now is resolved to','line_number':368,'multiline':False]['text':' `false`.','line_number':369,'multiline':False]['text':'','line_number':370,'multiline':False]['text':' If the combination resolved to `false` is the last','line_number':371,'multiline':False]['text':' in the resolvedOrder, we want to continue in this','line_number':372,'multiline':False]['text':' loop, but if it's somewhere in the middle, we can','line_number':373,'multiline':False]['text':' safely bail from the whole branch.','line_number':374,'multiline':False]['text':' If the number of resolved sources equals the number of resources,','line_number':386,'multiline':False]['text':' create the right context and return it if it loads.','line_number':387,'multiline':False]['text':' Here we check again to see if the newly resolved','line_number':390,'multiline':False]['text':' resources returned `false` on any position.','line_number':391,'multiline':False]['text':' otherwise recursively load another generator that walks over the','line_number':396,'multiline':False]['text':' partially resolved list of sources.','line_number':397,'multiline':False]['text':'*
 * This is a synchronous version of the `generateResourceSetsForLocale`
 * method and should stay completely in sync with it at all
 * times except of the async/await changes.
 *
 * @param {String} locale
 * @param {Array} sourcesOrder
 * @param {Array} resourceIds
 * @param {Array} [resolvedOrder]
 * @returns {Iterator<FluentBundle>}
 ','line_number':403,'multiline':True]['text':' Inside that loop we have a list of resources and the sources for them, like this:','line_number':418,'multiline':False]['text':'   ['test.ftl', 'menu.ftl', 'foo.ftl']','line_number':419,'multiline':False]['text':'   ['app', 'platform', 'app']','line_number':420,'multiline':False]['text':' We want to bail out early if we know that any of','line_number':424,'multiline':False]['text':' the (res)x(source) combinations in the permutation','line_number':425,'multiline':False]['text':' are unavailable.','line_number':426,'multiline':False]['text':' The combination may have been `undefined` when we','line_number':427,'multiline':False]['text':' stepped into this branch, and now is resolved to','line_number':428,'multiline':False]['text':' `false`.','line_number':429,'multiline':False]['text':'','line_number':430,'multiline':False]['text':' If the combination resolved to `false` is the last','line_number':431,'multiline':False]['text':' in the resolvedOrder, we want to continue in this','line_number':432,'multiline':False]['text':' loop, but if it's somewhere in the middle, we can','line_number':433,'multiline':False]['text':' safely bail from the whole branch.','line_number':434,'multiline':False]['text':' If the number of resolved sources equals the number of resources,','line_number':446,'multiline':False]['text':' create the right context and return it if it loads.','line_number':447,'multiline':False]['text':' Here we check again to see if the newly resolved','line_number':450,'multiline':False]['text':' resources returned `false` on any position.','line_number':451,'multiline':False]['text':' otherwise recursively load another generator that walks over the','line_number':456,'multiline':False]['text':' partially resolved list of sources.','line_number':457,'multiline':False]['text':' Temporarily disable bidi isolation due to Microsoft not supporting FSI/PDI.','line_number':464,'multiline':False]['text':' See bug 1439018 for details.','line_number':465,'multiline':False]['text':'*
 * Generates a single FluentBundle by loading all resources
 * from the listed sources for a given locale.
 *
 * The function casts all error cases into a Promise that resolves with
 * value `null`.
 * This allows the caller to be an async generator without using
 * try/catch clauses.
 *
 * Notice: Any changes to this method should be copied
 * to the `generateResourceSetSync` equivalent below.
 *
 * @param {String} locale
 * @param {Array} sourcesOrder
 * @param {Array} resourceIds
 * @returns {Promise<FluentBundle>}
 ','line_number':469,'multiline':True]['text':'*
 * This is a synchronous version of the `generateResourceSet`
 * method and should stay completely in sync with it at all
 * times except of the async/await changes.
 *
 * @param {String} locale
 * @param {Array} sourcesOrder
 * @param {Array} resourceIds
 * @returns {FluentBundle}
 ','line_number':496,'multiline':True]['text':'*
 * This is a basic Source for L10nRegistry.
 * It registers its own locales and a pre-path, and when asked for a file
 * it attempts to download and cache it.
 *
 * The Source caches the downloaded files so any consecutive loads will
 * come from the cache.
 *','line_number':516,'multiline':True]['text':'*
   * @param {string}         name
   * @param {Array<string>}  locales
   * @param {string}         prePath
   *
   * @returns {FileSource}
   ','line_number':525,'multiline':True]['text':' The cache object stores information about the resources available','line_number':538,'multiline':False]['text':' in the Source.','line_number':539,'multiline':False]['text':'','line_number':540,'multiline':False]['text':' It can take one of three states:','line_number':541,'multiline':False]['text':'   * true - the resource is available but not fetched yet','line_number':542,'multiline':False]['text':'   * false - the resource is not available','line_number':543,'multiline':False]['text':'   * Promise - the resource has been fetched','line_number':544,'multiline':False]['text':'','line_number':545,'multiline':False]['text':' If the cache has no entry for a given path, that means that there','line_number':546,'multiline':False]['text':' is no information available about whether the resource is available.','line_number':547,'multiline':False]['text':'','line_number':548,'multiline':False]['text':' If the `indexed` property is set to `true` it will be treated as the','line_number':549,'multiline':False]['text':' resource not being available. Otherwise, the resource may be','line_number':550,'multiline':False]['text':' available and we do not have any information about it yet.','line_number':551,'multiline':False]['text':' This is a special case for the only not BCP47-conformant locale','line_number':556,'multiline':False]['text':' code we have resources for.','line_number':557,'multiline':False]['text':' `true` means that the file is indexed, but hasn't','line_number':593,'multiline':False]['text':' been fetched yet.','line_number':594,'multiline':False]['text':' async','line_number':618,'multiline':False]['text':'*
 * This is an extension of the FileSource which should be used
 * for sources that can provide the list of files available in the source.
 *
 * This allows for a faster lookup in cases where the source does not
 * contain most of the files that the app will request for (e.g. an addon).
 *','line_number':631,'multiline':True]['text':'*
   * @param {string}         name
   * @param {Array<string>}  locales
   * @param {string}         prePath
   * @param {Array<string>}  paths
   *
   * @returns {IndexedFileSource}
   ','line_number':639,'multiline':True]['text':'*
 * The low level wrapper around Fetch API. It unifies the error scenarios to
 * always produce a promise rejection.
 *
 * We keep it as a method to make it easier to override for testing purposes.
 *
 * @param {string} url
 *
 * @returns {Promise<string>}
 ','line_number':658,'multiline':True]['text':'*
 * This is a synchronous version of the `load`
 * function and should stay completely in sync with it at all
 * times except of the async/await changes.
 *
 * Notice: Any changes to this method should be copied
 * to the `generateResourceSetSync` equivalent below.
 *
 * @param {string} url
 *
 * @returns {string}
 ','line_number':677,'multiline':True]['text':' The preloader doesn't support this url or isn't initialized','line_number':700,'multiline':False]['text':' (xpcshell test). Try a synchronous channel load.','line_number':701,'multiline':False]