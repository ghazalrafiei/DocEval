['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JSJit{Getter,Setter}CallArgs, JSJitMethodCallArgsTraits, JSJitInfo','line_number':57,'multiline':False]['text':' JS::ExpandoAndGeneration','line_number':58,'multiline':False]['text':' JS::RegExpFlag','line_number':59,'multiline':False]['text':' js::Scalar::Type','line_number':60,'multiline':False]['text':' js::FunctionFlags','line_number':68,'multiline':False]['text':' js::PlainObject','line_number':70,'multiline':False]['text':' Handle live GPRs.','line_number':116,'multiline':False]['text':' To use the original value of the activation register (that's','line_number':122,'multiline':False]['text':' now on top of the stack), we need the scratch register.','line_number':123,'multiline':False]['text':' Handle live FPRs.','line_number':133,'multiline':False]['text':' Ensure the live registers stored by callVM did not change between','line_number':190,'multiline':False]['text':' the call and this OsiPoint. Try-catch relies on this invariant.','line_number':191,'multiline':False]['text':' Load pointer to the JitActivation in a scratch register.','line_number':193,'multiline':False]['text':' If we should not check registers (because the instruction did not call','line_number':199,'multiline':False]['text':' into the VM, or a GC happened), we're done.','line_number':200,'multiline':False]['text':' Having more than one VM function call made in one visit function at','line_number':205,'multiline':False]['text':' runtime is a sec-ciritcal error, because if we conservatively assume that','line_number':206,'multiline':False]['text':' one of the function call can re-enter Ion, then the invalidation process','line_number':207,'multiline':False]['text':' will potentially add a call at a random location, by patching the code','line_number':208,'multiline':False]['text':' before the return address.','line_number':209,'multiline':False]['text':' Set checkRegs to 0, so that we don't try to verify registers after we','line_number':212,'multiline':False]['text':' return from this script to the caller.','line_number':213,'multiline':False]['text':' Ignore clobbered registers. Some instructions (like LValueToInt32) modify','line_number':216,'multiline':False]['text':' temps after calling into the VM. This is fine because no other','line_number':217,'multiline':False]['text':' instructions (including this OsiPoint) will depend on them. Also','line_number':218,'multiline':False]['text':' backtracking can also use the same register for an input and an output.','line_number':219,'multiline':False]['text':' These are marked as clobbered and shouldn't get checked.','line_number':220,'multiline':False]['text':' Do not profile the callWithABI that occurs below.  This is to avoid a','line_number':231,'multiline':False]['text':' rare corner case that occurs when profiling interacts with itself:','line_number':232,'multiline':False]['text':'','line_number':233,'multiline':False]['text':' When slow profiling assertions are turned on, FunctionBoundary ops','line_number':234,'multiline':False]['text':' (which update the profiler pseudo-stack) may emit a callVM, which','line_number':235,'multiline':False]['text':' forces them to have an osi point associated with them.  The','line_number':236,'multiline':False]['text':' FunctionBoundary for inline function entry is added to the caller's','line_number':237,'multiline':False]['text':' graph with a PC from the caller's code, but during codegen it modifies','line_number':238,'multiline':False]['text':' Gecko Profiler instrumentation to add the callee as the current top-most','line_number':239,'multiline':False]['text':' script. When codegen gets to the OSIPoint, and the callWithABI below is','line_number':240,'multiline':False]['text':' emitted, the codegen thinks that the current frame is the callee, but','line_number':241,'multiline':False]['text':' the PC it's using from the OSIPoint refers to the caller.  This causes','line_number':242,'multiline':False]['text':' the profiler instrumentation of the callWithABI below to ASSERT, since','line_number':243,'multiline':False]['text':' the script and pc are mismatched.  To avoid this, we simply omit','line_number':244,'multiline':False]['text':' instrumentation for these callWithABIs.','line_number':245,'multiline':False]['text':' Any live register captured by a safepoint (other than temp registers)','line_number':247,'multiline':False]['text':' must remain unchanged between the call and the OsiPoint instruction.','line_number':248,'multiline':False]['text':' No registers to check.','line_number':263,'multiline':False]['text':' Set checkRegs to 0. If we perform a VM call, the instruction','line_number':274,'multiline':False]['text':' will set it to 1.','line_number':275,'multiline':False]['text':' Store a copy of all live registers before performing the call.','line_number':286,'multiline':False]['text':' When we reach the OsiPoint, we can use this to check nothing','line_number':287,'multiline':False]['text':' modified them in the meantime.','line_number':288,'multiline':False]['text':' Load pointer to the JitActivation in a scratch register.','line_number':290,'multiline':False]['text':' CHECK_OSIPOINT_REGISTERS','line_number':304,'multiline':False]['text':' Before doing any call to Cpp, you should ensure that volatile','line_number':306,'multiline':False]['text':' registers are evicted by the register allocator.','line_number':307,'multiline':False]['text':' Stack is:','line_number':313,'multiline':False]['text':'    ... frame ...','line_number':314,'multiline':False]['text':'    [args]','line_number':315,'multiline':False]['text':' If this MIR instruction has an overridden AliasSet, set the JitRuntime's','line_number':333,'multiline':False]['text':' disallowArbitraryCode_ flag so we can assert this VMFunction doesn't call','line_number':334,'multiline':False]['text':' RunScript. Whitelist MInterruptCheck and MCheckOverRecursed because','line_number':335,'multiline':False]['text':' interrupt callbacks can call JS (chrome JS or shell testing functions).','line_number':336,'multiline':False]['text':' Push an exit frame descriptor. If |dynStack| is a valid pointer to a','line_number':346,'multiline':False]['text':' register, then its value is added to the value of the |framePushed()| to','line_number':347,'multiline':False]['text':' fill the frame descriptor.','line_number':348,'multiline':False]['text':' descriptor','line_number':353,'multiline':False]['text':' Call the wrapper function.  The wrapper is in charge to unwind the stack','line_number':358,'multiline':False]['text':' when returning from the call.  Failures are handled with exceptions based','line_number':359,'multiline':False]['text':' on the return value of the C functions.  To guard the outcome of the','line_number':360,'multiline':False]['text':' returned value, use another LIR instruction.','line_number':361,'multiline':False]['text':' Reset the disallowArbitraryCode flag after the call.','line_number':366,'multiline':False]['text':' Remove rest of the frame left on the stack. We remove the return address','line_number':376,'multiline':False]['text':' which is implicitly poped when returning.','line_number':377,'multiline':False]['text':' Pop arguments from framePushed.','line_number':380,'multiline':False]['text':' Stack is:','line_number':382,'multiline':False]['text':'    ... frame ...','line_number':383,'multiline':False]['text':' ArgSeq store arguments for OutOfLineCallVM.','line_number':392,'multiline':False]['text':'','line_number':393,'multiline':False]['text':' OutOfLineCallVM are created with "oolCallVM" function. The third argument of','line_number':394,'multiline':False]['text':' this function is an instance of a class which provides a "generate" in charge','line_number':395,'multiline':False]['text':' of pushing the argument, with "pushArg", for a VMFunction.','line_number':396,'multiline':False]['text':'','line_number':397,'multiline':False]['text':' Such list of arguments can be created by using the "ArgList" function which','line_number':398,'multiline':False]['text':' creates one instance of "ArgSeq", where the type of the arguments are','line_number':399,'multiline':False]['text':' inferred from the type of the arguments.','line_number':400,'multiline':False]['text':'','line_number':401,'multiline':False]['text':' The list of arguments must be written in the same order as if you were','line_number':402,'multiline':False]['text':' calling the function in C++.','line_number':403,'multiline':False]['text':'','line_number':404,'multiline':False]['text':' Example:','line_number':405,'multiline':False]['text':'   ArgList(ToRegister(lir->lhs()), ToRegister(lir->rhs()))','line_number':406,'multiline':False]['text':' Arguments are pushed in reverse order, from last argument to first','line_number':415,'multiline':False]['text':' argument.','line_number':416,'multiline':False]['text':' Store wrappers, to generate the right move of data after the VM call.','line_number':438,'multiline':False]['text':' No register gets clobbered','line_number':443,'multiline':False]['text':' It's okay to use storePointerResultTo here - the VMFunction wrapper','line_number':455,'multiline':False]['text':' ensures the upper bytes are zero for bool/int32 return values.','line_number':456,'multiline':False]['text':' The binding of the initial jump is done in','line_number':572,'multiline':False]['text':' CodeGenerator::visitOutOfLineICFallback.','line_number':573,'multiline':False]['text':' Register the location of the OOL path in the IC.','line_number':617,'multiline':False]['text':' We can only handle strings in truncation contexts, like bitwise','line_number':982,'multiline':False]['text':' operations.','line_number':983,'multiline':False]['text':' NaN triggers the failure path for branchTruncateDoubleToInt32() on x86,','line_number':1014,'multiline':False]['text':' x64, and ARM64, so handle it here. In all other cases bail out.','line_number':1015,'multiline':False]['text':' ToInteger(NaN) is 0.','line_number':1024,'multiline':False]['text':' Set if we can handle other primitives beside strings, as long as they're','line_number':1035,'multiline':False]['text':' guaranteed to never throw. This rules out symbols and BigInts, but allows','line_number':1036,'multiline':False]['text':' booleans, undefined, and null.','line_number':1037,'multiline':False]['text':' Set if we can handle other primitives beside strings, as long as they're','line_number':1090,'multiline':False]['text':' guaranteed to never throw. This rules out symbols and BigInts, but allows','line_number':1091,'multiline':False]['text':' booleans, undefined, and null.','line_number':1092,'multiline':False]['text':' ARM and MIPS may not have a double register available if we've','line_number':1137,'multiline':False]['text':' allocated output as a float32.','line_number':1138,'multiline':False]['text':' ToBigInt(object) can have side-effects; all other types throw a TypeError.','line_number':1169,'multiline':False]['text':' This is a no-op if the input can't be negative. In debug builds assert','line_number':1240,'multiline':False]['text':' (1) the upper 32 bits are zero and (2) the value <= INT32_MAX so that sign','line_number':1241,'multiline':False]['text':' extension isn't needed.','line_number':1242,'multiline':False]['text':' Base out-of-line code generator for all tests of the truthiness of an','line_number':1319,'multiline':False]['text':' object, where the object might not be truthy.  (Recall that per spec all','line_number':1320,'multiline':False]['text':' objects are truthy, but we implement the JSCLASS_EMULATES_UNDEFINED class','line_number':1321,'multiline':False]['text':' flag to permit objects to look like |undefined| in certain contexts,','line_number':1322,'multiline':False]['text':' including in object truthiness testing.)  We check truthiness inline except','line_number':1323,'multiline':False]['text':' when we're testing it on a proxy (or if TI guarantees us that the specified','line_number':1324,'multiline':False]['text':' object will never emulate |undefined|), in which case out-of-line code will','line_number':1325,'multiline':False]['text':' call EmulatesUndefined for a conclusive answer.','line_number':1326,'multiline':False]['text':' Specify the register where the object to be tested is found, labels to','line_number':1348,'multiline':False]['text':' jump to if the object is truthy or falsy, and a scratch register for','line_number':1349,'multiline':False]['text':' use in the out-of-line path.','line_number':1350,'multiline':False]['text':' A subclass of OutOfLineTestObject containing two extra labels, for use when','line_number':1362,'multiline':False]['text':' the ifTruthy/ifFalsy labels are needed in inline code as well as out-of-line','line_number':1363,'multiline':False]['text':' code.  The user should bind these labels in inline code, and specify them as','line_number':1364,'multiline':False]['text':' targets via setInputAndTargets, as appropriate.','line_number':1365,'multiline':False]['text':' Perform a fast-path check of the object's class flags if the object's','line_number':1384,'multiline':False]['text':' not a proxy.  Let out-of-line code handle the slow cases that require','line_number':1385,'multiline':False]['text':' saving registers, making a function call, and restoring registers.','line_number':1386,'multiline':False]['text':' Handle irregular types first.','line_number':1426,'multiline':False]['text':' Undefined and null are falsy.','line_number':1430,'multiline':False]['text':' Symbols are truthy.','line_number':1438,'multiline':False]['text':' Check the type of the value (unless this is the last possible type).','line_number':1460,'multiline':False]['text':' Branch if the value is falsy.','line_number':1466,'multiline':False]['text':' If we reach this point, the value is truthy.  We fall through for','line_number':1494,'multiline':False]['text':' truthy on the last test; otherwise, branch.','line_number':1495,'multiline':False]['text':' Generate tests for previously observed types first.','line_number':1525,'multiline':False]['text':' The TypeDataList is sorted by descending frequency.','line_number':1526,'multiline':False]['text':'skipTypeTest','line_number':1531,'multiline':True]['text':' Generate tests for remaining types.','line_number':1537,'multiline':False]['text':' We don't need a type test for the last possible type.','line_number':1539,'multiline':False]['text':' We fall through if the final test is truthy.','line_number':1547,'multiline':False]['text':' Fast path for small integers.','line_number':1620,'multiline':False]['text':' Try double to integer conversion and run integer to string code.','line_number':1647,'multiline':False]['text':' String','line_number':1666,'multiline':False]['text':' Integer','line_number':1675,'multiline':False]['text':' Double','line_number':1686,'multiline':False]['text':' Note: no fastpath. Need two extra registers and can only convert doubles','line_number':1688,'multiline':False]['text':' that fit integers and are smaller than StaticStrings::INT_STATIC_LIMIT.','line_number':1689,'multiline':False]['text':' Undefined','line_number':1693,'multiline':False]['text':' Null','line_number':1702,'multiline':False]['text':' Boolean','line_number':1711,'multiline':False]['text':' Objects/symbols are only possible when |mir->mightHaveSideEffects()|.','line_number':1724,'multiline':False]['text':' Object','line_number':1726,'multiline':False]['text':' Bail.','line_number':1730,'multiline':False]['text':' Symbol','line_number':1737,'multiline':False]['text':' Bail.','line_number':1741,'multiline':False]['text':' BigInt','line_number':1749,'multiline':False]['text':' No fastpath currently implemented.','line_number':1751,'multiline':False]['text':' Call into the VM to barrier the write. The only registers that need to','line_number':1770,'multiline':False]['text':' be preserved are those in liveVolatiles, so once they are saved on the','line_number':1771,'multiline':False]['text':' stack all volatile registers are available for use.','line_number':1772,'multiline':False]['text':' Warning: this function modifies prev and next.','line_number':1802,'multiline':False]['text':' if (next && (buffer = next->storeBuffer()))','line_number':1809,'multiline':False]['text':' but we never pass in nullptr for next.','line_number':1810,'multiline':False]['text':' if (prev && prev->storeBuffer())','line_number':1815,'multiline':False]['text':' buffer->putCell(cellp)','line_number':1820,'multiline':False]['text':' if (prev && (buffer = prev->storeBuffer()))','line_number':1826,'multiline':False]['text':' Amount of space to reserve on the stack when executing RegExps inline.','line_number':1857,'multiline':False]['text':' When the unicode flag is set, if lastIndex points to a trail','line_number':1873,'multiline':False]['text':' surrogate, we should step back to the corresponding lead surrogate.','line_number':1874,'multiline':False]['text':' See ExecuteRegExp in builtin/RegExp.cpp for more detail.','line_number':1875,'multiline':False]['text':' If the unicode flag is not set, there is nothing to do.','line_number':1881,'multiline':False]['text':' If the input is latin1, there can't be any surrogates.','line_number':1886,'multiline':False]['text':' Check if |lastIndex > 0 && lastIndex < input->length()|.','line_number':1889,'multiline':False]['text':' lastIndex should already have no sign here.','line_number':1890,'multiline':False]['text':' For TrailSurrogateMin ≤ x ≤ TrailSurrogateMax and','line_number':1895,'multiline':False]['text':' LeadSurrogateMin ≤ x ≤ LeadSurrogateMax, the following','line_number':1896,'multiline':False]['text':' equations hold.','line_number':1897,'multiline':False]['text':'','line_number':1898,'multiline':False]['text':'    SurrogateMin ≤ x ≤ SurrogateMax','line_number':1899,'multiline':False]['text':' <> SurrogateMin ≤ x ≤ SurrogateMin + 2^10 - 1','line_number':1900,'multiline':False]['text':' <> ((x - SurrogateMin) >>> 10) = 0    where >>> is an unsigned-shift','line_number':1901,'multiline':False]['text':' See Hacker's Delight, section 4-1 for details.','line_number':1902,'multiline':False]['text':'','line_number':1903,'multiline':False]['text':'    ((x - SurrogateMin) >>> 10) = 0','line_number':1904,'multiline':False]['text':' <> floor((x - SurrogateMin) / 1024) = 0','line_number':1905,'multiline':False]['text':' <> floor((x / 1024) - (SurrogateMin / 1024)) = 0','line_number':1906,'multiline':False]['text':' <> floor(x / 1024) = SurrogateMin / 1024','line_number':1907,'multiline':False]['text':' <> floor(x / 1024) * 1024 = SurrogateMin','line_number':1908,'multiline':False]['text':' <> (x >>> 10) << 10 = SurrogateMin','line_number':1909,'multiline':False]['text':' <> x & ~(2^10 - 1) = SurrogateMin','line_number':1910,'multiline':False]['text':' Check if input[lastIndex] is trail surrogate.','line_number':1917,'multiline':False]['text':' Check if input[lastIndex-1] is lead surrogate.','line_number':1923,'multiline':False]['text':' Move lastIndex back to lead surrogate.','line_number':1930,'multiline':False]['text':' Writing into RegExpStatics tenured memory; must post-barrier.','line_number':1953,'multiline':False]['text':' prev ','line_number':1963,'multiline':True]['text':' next ','line_number':1963,'multiline':True]['text':' prev ','line_number':1970,'multiline':True]['text':' next ','line_number':1970,'multiline':True]['text':' Prepare an InputOutputData and optional MatchPairs which space has been','line_number':1991,'multiline':False]['text':' allocated for on the stack, and try to execute a RegExp on a string input.','line_number':1992,'multiline':False]['text':' If the RegExp was successfully executed and matched the input, fallthrough.','line_number':1993,'multiline':False]['text':' Otherwise, jump to notFound or failure.','line_number':1994,'multiline':False]['text':'
   * [SMDOC] Stack layout for PrepareAndExecuteRegExp
   *
   * Before this function is called, the caller is responsible for
   * allocating enough stack space for the following data:
   *
   * inputOutputDataStartOffset +-----> +---------------+
   *                                    |InputOutputData|
   *          inputStartAddress +---------->  inputStart|
   *            inputEndAddress +---------->    inputEnd|
   *          startIndexAddress +---------->  startIndex|
   *             matchesAddress +---------->     matches|-----+
   *                                    +---------------+     |
   * matchPairs(Address|Offset) +-----> +---------------+  <--+
   *                                    |  MatchPairs   |
   *           pairCountAddress +---------->    count   |
   *        pairsPointerAddress +---------->    pairs   |-----+
   *                                    +---------------+     |
   * pairsArray(Address|Offset) +-----> +---------------+  <--+
   *                                    |   MatchPair   |
   *     firstMatchStartAddress +---------->    start   |  <--+
   *                                    |       limit   |     |
   *                                    +---------------+     |
   *                                           .              |
   *                                           .  Reserved space for
   *                                           .  RegExpObject::MaxPairCount
   *                                           .  MatchPair objects
   *                                           .              |
   *                                    +---------------+     |
   *                                    |   MatchPair   |     |
   *                                    |       start   |     |
   *                                    |       limit   |  <--+
   *                                    +---------------+
   ','line_number':2006,'multiline':True]['text':' First, fill in a skeletal MatchPairs instance on the stack. This will be','line_number':2064,'multiline':False]['text':' passed to the OOL stub in the caller if we aren't able to execute the','line_number':2065,'multiline':False]['text':' RegExp inline, and that stub needs to be able to determine whether the','line_number':2066,'multiline':False]['text':' execution finished successfully.','line_number':2067,'multiline':False]['text':' Initialize MatchPairs::pairCount to 1. The correct value can only','line_number':2069,'multiline':False]['text':' be determined after loading the RegExpShared. If the RegExpShared','line_number':2070,'multiline':False]['text':' has Kind::Atom, this is the correct pairCount.','line_number':2071,'multiline':False]['text':' Initialize MatchPairs::pairs pointer','line_number':2074,'multiline':False]['text':' Initialize MatchPairs::pairs[0]::start to MatchPair::NoMatch','line_number':2078,'multiline':False]['text':' Check for a linear input string.','line_number':2081,'multiline':False]['text':' Load the RegExpShared.','line_number':2084,'multiline':False]['text':' Handle Atom matches','line_number':2091,'multiline':False]['text':' Don't handle regexps with too many capture pairs.','line_number':2121,'multiline':False]['text':' Fill in the pair count in the MatchPairs on the stack.','line_number':2126,'multiline':False]['text':' Update lastIndex if necessary.','line_number':2129,'multiline':False]['text':' Load code pointer and length of input (in bytes).','line_number':2132,'multiline':False]['text':' Store the input start in the InputOutputData.','line_number':2133,'multiline':False]['text':' Note: temp1 was previously regexpReg.','line_number':2134,'multiline':False]['text':' Two-byte input','line_number':2142,'multiline':False]['text':'latin1 =','line_number':2146,'multiline':True]['text':' Latin1 input','line_number':2151,'multiline':False]['text':'latin1 =','line_number':2156,'multiline':True]['text':' Store end pointer','line_number':2161,'multiline':False]['text':' Guard that the RegExpShared has been compiled for this type of input.','line_number':2166,'multiline':False]['text':' If it has not been compiled, we fall back to the OOL case, which will','line_number':2167,'multiline':False]['text':' do a VM call into the interpreter.','line_number':2168,'multiline':False]['text':' TODO: add an interpreter trampoline?','line_number':2169,'multiline':False]['text':' Finish filling in the InputOutputData instance on the stack','line_number':2173,'multiline':False]['text':' Save any volatile inputs.','line_number':2178,'multiline':False]['text':' Execute the RegExp.','line_number':2197,'multiline':False]['text':' Lazily update the RegExpStatics.','line_number':2220,'multiline':False]['text':' Generate code that creates DependentString.','line_number':2264,'multiline':False]['text':' Caller should call generateFallback after masm.ret(), to generate','line_number':2265,'multiline':False]['text':' fallback path.','line_number':2266,'multiline':False]['text':' Generate fallback path for creating DependentString.','line_number':2272,'multiline':False]['text':' Compute the string length.','line_number':2306,'multiline':False]['text':' Zero length matches use the empty string.','line_number':2313,'multiline':False]['text':' Complete matches use the base string.','line_number':2320,'multiline':False]['text':' Make a thin or fat inline string.','line_number':2337,'multiline':False]['text':' One character Latin-1 strings can be loaded directly from the','line_number':2346,'multiline':False]['text':' static strings table.','line_number':2347,'multiline':False]['text':' Adjust the start index address for the above pushes.','line_number':2379,'multiline':False]['text':' Load chars pointer for the new string.','line_number':2384,'multiline':False]['text':' Load the source characters pointer.','line_number':2387,'multiline':False]['text':' Make a dependent string.','line_number':2403,'multiline':False]['text':' Warning: string may be tenured (if the fallback case is hit), so','line_number':2404,'multiline':False]['text':' stores into it must be post barriered.','line_number':2405,'multiline':False]['text':' Follow any base pointer if the input is itself a dependent string.','line_number':2417,'multiline':False]['text':' Watch for undepended strings, which have a base pointer but don't','line_number':2418,'multiline':False]['text':' actually share their characters with it.','line_number':2419,'multiline':False]['text':' Post-barrier the base store, whether it was the direct or indirect','line_number':2429,'multiline':False]['text':' base (both will end up in temp1 here).','line_number':2430,'multiline':False]['text':' We are free to clobber all registers, as LRegExpMatcher is a call','line_number':2532,'multiline':False]['text':' instruction.','line_number':2533,'multiline':False]['text':' There are not enough registers on x86.','line_number':2545,'multiline':False]['text':' The template object should have enough space for the maximum number of','line_number':2558,'multiline':False]['text':' pairs this stub can handle.','line_number':2559,'multiline':False]['text':' The InputOutputData is placed above the return address on the stack.','line_number':2569,'multiline':False]['text':' If a regexp has named captures, fall back to the OOL stub, which','line_number':2579,'multiline':False]['text':' will end up calling CreateRegExpMatchResults.','line_number':2580,'multiline':False]['text':' Similarly, if the |hasIndices| flag is set, fall back to the OOL stub.','line_number':2589,'multiline':False]['text':' Construct the result.','line_number':2594,'multiline':False]['text':' Dynamic slot count is always one less than a power of 2.','line_number':2602,'multiline':False]['text':' Initialize the slots of the result object with the dummy values','line_number':2611,'multiline':False]['text':' defined in createMatchResultTemplateObject.','line_number':2612,'multiline':False]['text':' clang-format off','line_number':2624,'multiline':False]['text':'
    * [SMDOC] Stack layout for the RegExpMatcher stub
    *
    *                                    +---------------+
    *                                    |Return-Address |
    *                                    +---------------+
    * inputOutputDataStartOffset +-----> +---------------+
    *                                    |InputOutputData|
    *                                    +---------------+
    *                                    +---------------+
    *                                    |  MatchPairs   |
    *           pairsCountAddress +----------->  count   |
    *                                    |       pairs   |
    *                                    |               |
    *                                    +---------------+
    *     pairsVectorStartOffset +-----> +---------------+
    *                                    |   MatchPair   |
    *             matchPairStart +------------>  start   |  <-------+
    *             matchPairLimit +------------>  limit   |          | Reserved space for
    *                                    +---------------+          | `RegExpObject::MaxPairCount`
    *                                           .                   | MatchPair objects.
    *                                           .                   |
    *                                           .                   | `count` objects will be
    *                                    +---------------+          | initialized and can be
    *                                    |   MatchPair   |          | accessed below.
    *                                    |       start   |  <-------+
    *                                    |       limit   |
    *                                    +---------------+
    ','line_number':2625,'multiline':True]['text':' clang-format on','line_number':2654,'multiline':False]['text':' Incremented by one below for each match pair.','line_number':2669,'multiline':False]['text':' The element in which to store the result of the current match.','line_number':2673,'multiline':False]['text':' The current match pair's "start" and "limit" member.','line_number':2677,'multiline':False]['text':' We don't have enough registers for a fifth temporary. Reuse','line_number':2685,'multiline':False]['text':' |lastIndex| as a temporary. We don't need to restore its value,','line_number':2686,'multiline':False]['text':' because |lastIndex| is no longer used after a successful match.','line_number':2687,'multiline':False]['text':' (Neither here nor in the OOL path, cf. js::RegExpMatcherRaw.)','line_number':2688,'multiline':False]['text':' Loop to construct the match strings. There are two different loops,','line_number':2694,'multiline':False]['text':' depending on whether the input is a Two-Byte or a Latin-1 string.','line_number':2695,'multiline':False]['text':' Storing into nursery-allocated results object's elements; no post','line_number':2724,'multiline':False]['text':' barrier.','line_number':2725,'multiline':False]['text':' Fill in the rest of the output object.','line_number':2746,'multiline':False]['text':' No post barrier needed (address is within nursery object.)','line_number':2760,'multiline':False]['text':' All done!','line_number':2763,'multiline':False]['text':' Fallback paths for CreateDependentString.','line_number':2771,'multiline':False]['text':' Fallback path for createGCObject.','line_number':2776,'multiline':False]['text':' Use an undefined value to signal to the caller that the OOL stub needs to','line_number':2781,'multiline':False]['text':' be called.','line_number':2782,'multiline':False]['text':' We are not using oolCallVM because we are in a Call, and that live','line_number':2836,'multiline':False]['text':' registers are already saved by the the register allocator.','line_number':2837,'multiline':False]['text':' We are free to clobber all registers, as LRegExpSearcher is a call','line_number':2891,'multiline':False]['text':' instruction.','line_number':2892,'multiline':False]['text':' The InputOutputData is placed above the return address on the stack.','line_number':2908,'multiline':False]['text':' clang-format off','line_number':2918,'multiline':False]['text':'
     * [SMDOC] Stack layout for the RegExpSearcher stub
     *
     *                                    +---------------+
     *                                    |Return-Address |
     *                                    +---------------+
     * inputOutputDataStartOffset +-----> +---------------+
     *                                    |InputOutputData|
     *                                    +---------------+
     *                                    +---------------+
     *                                    |  MatchPairs   |
     *                                    |       count   |
     *                                    |       pairs   |
     *                                    |               |
     *                                    +---------------+
     *     pairsVectorStartOffset +-----> +---------------+
     *                                    |   MatchPair   |
     *             matchPairStart +------------>  start   |  <-------+
     *             matchPairLimit +------------>  limit   |          | Reserved space for
     *                                    +---------------+          | `RegExpObject::MaxPairCount`
     *                                           .                   | MatchPair objects.
     *                                           .                   |
     *                                           .                   | Only a single object will
     *                                    +---------------+          | be initialized and can be
     *                                    |   MatchPair   |          | accessed below.
     *                                    |       start   |  <-------+
     *                                    |       limit   |
     *                                    +---------------+
     ','line_number':2919,'multiline':True]['text':' clang-format on','line_number':2948,'multiline':False]['text':' We are not using oolCallVM because we are in a Call, and that live','line_number':3020,'multiline':False]['text':' registers are already saved by the the register allocator.','line_number':3021,'multiline':False]['text':' We are free to clobber all registers, as LRegExpTester is a call','line_number':3072,'multiline':False]['text':' instruction.','line_number':3073,'multiline':False]['text':' In visitRegExpMatcher and visitRegExpSearcher, we reserve stack space','line_number':3094,'multiline':False]['text':' before calling the stub. For RegExpTester we call the stub before reserving','line_number':3095,'multiline':False]['text':' stack space, so the offset of the InputOutputData is 0.','line_number':3096,'multiline':False]['text':' RegExpTester returns the end index of the match to update lastIndex.','line_number':3104,'multiline':False]['text':' We are not using oolCallVM because we are in a Call, and that live','line_number':3158,'multiline':False]['text':' registers are already saved by the the register allocator.','line_number':3159,'multiline':False]['text':' Initialize extended slots. Lexical |this| is stored in the first one.','line_number':3517,'multiline':False]['text':' Initialize nargs and flags. We do this with a single uint32 to avoid','line_number':3533,'multiline':False]['text':' 16-bit writes.','line_number':3534,'multiline':False]['text':' No post barrier needed because output is guaranteed to be allocated in','line_number':3551,'multiline':False]['text':' the nursery.','line_number':3552,'multiline':False]['text':' Note: markOsiPoint ensures enough space exists between the last','line_number':3581,'multiline':False]['text':' LOsiPoint and this one to patch adjacent call instructions.','line_number':3582,'multiline':False]['text':' There should be no movegroups or other instructions between','line_number':3593,'multiline':False]['text':' an instruction and its OsiPoint. This is necessary because','line_number':3594,'multiline':False]['text':' we use the OsiPoint's snapshot from within VM calls.','line_number':3595,'multiline':False]['text':' The input is a double, so try and convert it to an integer.','line_number':3628,'multiline':False]['text':' If it does not fit in an integer, take the default case.','line_number':3629,'multiline':False]['text':' We must be inside a function.','line_number':3682,'multiline':False]['text':' The low bit indicates whether this call is constructing, just clear the','line_number':3685,'multiline':False]['text':' other bits.','line_number':3686,'multiline':False]['text':' Don't emit a jump to the return label if this is the last block, as','line_number':3704,'multiline':False]['text':' it'll fall through to the epilogue.','line_number':3705,'multiline':False]['text':'','line_number':3706,'multiline':False]['text':' This is -not- true however for a Generator-return, which may appear in the','line_number':3707,'multiline':False]['text':' middle of the last block, so we should always emit the jump there.','line_number':3708,'multiline':False]['text':' Remember the OSR entry offset into the code buffer.','line_number':3717,'multiline':False]['text':' If profiling, save the current frame pointer to a per-thread global field.','line_number':3728,'multiline':False]['text':' Allocate the full frame for this function','line_number':3733,'multiline':False]['text':' Note we have a new entry here. So we reset MacroAssembler::framePushed()','line_number':3734,'multiline':False]['text':' to 0, before reserving the stack.','line_number':3735,'multiline':False]['text':' Ensure that the Ion frames is properly aligned.','line_number':3739,'multiline':False]['text':' No bogus moves.','line_number':3833,'multiline':False]['text':' Load a pointer to the entry in IonScript's nursery objects list.','line_number':3906,'multiline':False]['text':' Load the JSObject*.','line_number':3910,'multiline':False]['text':' No-op.','line_number':3915,'multiline':False]['text':' We won't encounter a lazy proto, because the prototype is guaranteed to','line_number':4000,'multiline':False]['text':' either be a JSFunction or a PlainObject, and only proxy objects can have a','line_number':4001,'multiline':False]['text':' lazy proto.','line_number':4002,'multiline':False]['text':' idVal will be in vp[0], result will be stored in vp[1].','line_number':4244,'multiline':False]['text':' Discard result Value.','line_number':4263,'multiline':False]['text':' idVal will be in vp[0], result will be stored in vp[1].','line_number':4312,'multiline':False]['text':' Discard result Value.','line_number':4335,'multiline':False]['text':' GetIndexFromString returns a negative value on failure.','line_number':4428,'multiline':False]['text':' Use indexed value as fast path if possible.','line_number':4456,'multiline':False]['text':' Reserve stack for holding the result value of the call.','line_number':4463,'multiline':False]['text':' OOM path, recovered by StringToNumberPure.','line_number':4486,'multiline':False]['text':'','line_number':4487,'multiline':False]['text':' Use addToStackPtr instead of freeStack as freeStack tracks stack height','line_number':4488,'multiline':False]['text':' flow-insensitively, and using it here would confuse the stack height','line_number':4489,'multiline':False]['text':' tracking.','line_number':4490,'multiline':False]['text':' Load obj->elements.','line_number':4506,'multiline':False]['text':' Make sure there are no dense elements.','line_number':4509,'multiline':False]['text':' Jump to fail if this is the last check and we fail it,','line_number':4556,'multiline':False]['text':' otherwise to the next test.','line_number':4557,'multiline':False]['text':' BigInt.','line_number':4575,'multiline':False]['text':' Boolean','line_number':4582,'multiline':False]['text':' String','line_number':4589,'multiline':False]['text':' Out-of-line path to update the store buffer.','line_number':4736,'multiline':False]['text':' Check whether this is the sentinel set and if so call the VM to allocate','line_number':4773,'multiline':False]['text':' one for this arena.','line_number':4774,'multiline':False]['text':' Add the cell to the set.','line_number':4779,'multiline':False]['text':' We already have a fast path to check whether a global is in the store','line_number':4795,'multiline':False]['text':' buffer.','line_number':4796,'multiline':False]['text':' Call into the VM to barrier the write.','line_number':4802,'multiline':False]['text':' Check whether an object is a global that we have already barriered before','line_number':4859,'multiline':False]['text':' calling into the VM.','line_number':4860,'multiline':False]['text':'','line_number':4861,'multiline':False]['text':' We only check for the script's global, not other globals within the same','line_number':4862,'multiline':False]['text':' compartment, because we bake in a pointer to realm->globalWriteBarriered','line_number':4863,'multiline':False]['text':' and doing that would be invalid for other realms because they could be','line_number':4864,'multiline':False]['text':' collected before the Ion code is discarded.','line_number':4865,'multiline':False]['text':' Constant nursery objects cannot appear here, see','line_number':4891,'multiline':False]['text':' LIRGenerator::visitPostWriteElementBarrier.','line_number':4892,'multiline':False]['text':' Constant nursery objects cannot appear here, see','line_number':4923,'multiline':False]['text':' LIRGenerator::visitPostWriteElementBarrier.','line_number':4924,'multiline':False]['text':' Out-of-line path to update the store buffer.','line_number':4959,'multiline':False]['text':' Registers used for callWithABI() argument-passing.','line_number':5056,'multiline':False]['text':' Misc. temporary registers.','line_number':5061,'multiline':False]['text':' Native functions have the signature:','line_number':5068,'multiline':False]['text':'  bool (*)(JSContext*, unsigned, Value* vp)','line_number':5069,'multiline':False]['text':' Where vp[0] is space for an outparam, vp[1] is |this|, and vp[2] onward','line_number':5070,'multiline':False]['text':' are the function arguments.','line_number':5071,'multiline':False]['text':' Allocate space for the outparam, moving the StackPointer to what will be','line_number':5073,'multiline':False]['text':' &vp[1].','line_number':5074,'multiline':False]['text':' Push a Value containing the callee object: natives are allowed to access','line_number':5077,'multiline':False]['text':' their callee before setting the return value. The StackPointer is moved','line_number':5078,'multiline':False]['text':' to &vp[0].','line_number':5079,'multiline':False]['text':' Preload arguments into registers.','line_number':5082,'multiline':False]['text':' Construct native exit frame.','line_number':5094,'multiline':False]['text':' Construct and execute call.','line_number':5105,'multiline':False]['text':' Test for failure.','line_number':5124,'multiline':False]['text':' Load the outparam vp[0] into output register(s).','line_number':5131,'multiline':False]['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':5136,'multiline':False]['text':' execution from returning any private data.','line_number':5137,'multiline':False]['text':' The next instruction is removing the footer of the exit frame, so there','line_number':5143,'multiline':False]['text':' is no need for leaveFakeExitFrame.','line_number':5144,'multiline':False]['text':' Move the StackPointer back to its original location, unwinding the native','line_number':5146,'multiline':False]['text':' exit frame.','line_number':5147,'multiline':False]['text':' Load the value in DOM_OBJECT_SLOT for a native or proxy DOM object. This','line_number':5154,'multiline':False]['text':' will be in the first slot but may be fixed or non-fixed.','line_number':5155,'multiline':False]['text':' Check if it's a proxy.','line_number':5158,'multiline':False]['text':' If it's a native object, the value must be in a fixed slot.','line_number':5165,'multiline':False]['text':' Sanity check: it must be a DOM proxy.','line_number':5176,'multiline':False]['text':' Registers used for callWithABI() argument-passing.','line_number':5201,'multiline':False]['text':' DOM methods have the signature:','line_number':5211,'multiline':False]['text':'  bool (*)(JSContext*, HandleObject, void* private, const','line_number':5212,'multiline':False]['text':'  JSJitMethodCallArgs& args)','line_number':5213,'multiline':False]['text':' Where args is initialized from an argc and a vp, vp[0] is space for an','line_number':5214,'multiline':False]['text':' outparam and the callee, vp[1] is |this|, and vp[2] onward are the','line_number':5215,'multiline':False]['text':' function arguments.  Note that args stores the argv, not the vp, and','line_number':5216,'multiline':False]['text':' argv == vp + 2.','line_number':5217,'multiline':False]['text':' Nestle the stack up against the pushed arguments, leaving StackPointer at','line_number':5219,'multiline':False]['text':' &vp[1]','line_number':5220,'multiline':False]['text':' argObj is filled with the extracted object, then returned.','line_number':5222,'multiline':False]['text':' Push a Value containing the callee object: natives are allowed to access','line_number':5226,'multiline':False]['text':' their callee before setting the return value. After this the StackPointer','line_number':5227,'multiline':False]['text':' points to &vp[0].','line_number':5228,'multiline':False]['text':' Now compute the argv value.  Since StackPointer is pointing to &vp[0] and','line_number':5231,'multiline':False]['text':' argv is &vp[2] we just need to add 2*sizeof(Value) to the current','line_number':5232,'multiline':False]['text':' StackPointer.','line_number':5233,'multiline':False]['text':' Push argc from the call instruction into what will become the IonExitFrame','line_number':5243,'multiline':False]['text':' Push our argv onto the stack','line_number':5246,'multiline':False]['text':' And store our JSJitMethodCallArgs* in argArgs.','line_number':5248,'multiline':False]['text':' Push |this| object for passing HandleObject. We push after argc to','line_number':5251,'multiline':False]['text':' maintain the same sp-relative location of the object pointer with other','line_number':5252,'multiline':False]['text':' DOMExitFrames.','line_number':5253,'multiline':False]['text':' We use argJSContext as scratch register here.','line_number':5258,'multiline':False]['text':' Construct native exit frame.','line_number':5263,'multiline':False]['text':' Construct and execute call.','line_number':5271,'multiline':False]['text':' Test for failure.','line_number':5287,'multiline':False]['text':' Load the outparam vp[0] into output register(s).','line_number':5290,'multiline':False]['text':' Switch back to the current realm if needed. Note: if the DOM method threw','line_number':5296,'multiline':False]['text':' an exception, the exception handler will do this.','line_number':5297,'multiline':False]['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':5304,'multiline':False]['text':' execution from returning any private data.','line_number':5305,'multiline':False]['text':' The next instruction is removing the footer of the exit frame, so there','line_number':5310,'multiline':False]['text':' is no need for leaveFakeExitFrame.','line_number':5311,'multiline':False]['text':' Move the StackPointer back to its original location, unwinding the native','line_number':5313,'multiline':False]['text':' exit frame.','line_number':5314,'multiline':False]['text':' Nestle %esp up to the argument vector.','line_number':5329,'multiline':False]['text':' Each path must account for framePushed_ separately, for callVM to be valid.','line_number':5330,'multiline':False]['text':' argv.','line_number':5333,'multiline':False]['text':' argc.','line_number':5334,'multiline':False]['text':' constructing.','line_number':5336,'multiline':False]['text':' JSFunction*.','line_number':5337,'multiline':False]['text':' Un-nestle %esp from the argument vector. No prefix was pushed.','line_number':5343,'multiline':False]['text':' Known-target case is handled by LCallKnown.','line_number':5354,'multiline':False]['text':' Guard that calleereg is actually a function object.','line_number':5359,'multiline':False]['text':' Guard that callee allows the [[Call]] or [[Construct]] operation required.','line_number':5365,'multiline':False]['text':' Use the slow path if CreateThis was unable to create the |this| object.','line_number':5374,'multiline':False]['text':' Load jitCodeRaw for callee if it exists.','line_number':5391,'multiline':False]['text':' Target may be a different realm even if same compartment.','line_number':5396,'multiline':False]['text':' Nestle the StackPointer up to the argument vector.','line_number':5401,'multiline':False]['text':' Construct the IonFramePrefix.','line_number':5404,'multiline':False]['text':' Check whether the provided arguments satisfy target argc.','line_number':5411,'multiline':False]['text':' We cannot have lowered to LCallGeneric with a known target. Assert that we','line_number':5412,'multiline':False]['text':' didn't add any undefineds in WarpBuilder. NB: MCall::numStackArgs includes','line_number':5413,'multiline':False]['text':' |this|.','line_number':5414,'multiline':False]['text':' Argument fixup needed. Load the ArgumentsRectifier.','line_number':5424,'multiline':False]['text':' Finally call the function in objreg.','line_number':5432,'multiline':False]['text':' Increment to remove IonFramePrefix; decrement to fill FrameSizeClass.','line_number':5443,'multiline':False]['text':' The return address has already been removed from the Ion frame.','line_number':5444,'multiline':False]['text':' Handle uncompiled or native functions.','line_number':5449,'multiline':False]['text':' If the return value of the constructing function is Primitive,','line_number':5457,'multiline':False]['text':' replace the return value with the Object from CreateThis.','line_number':5458,'multiline':False]['text':' Native single targets (except wasm) are handled by LCallNative.','line_number':5475,'multiline':False]['text':' Missing arguments must have been explicitly appended by WarpBuilder.','line_number':5478,'multiline':False]['text':' Nestle the StackPointer up to the argument vector.','line_number':5504,'multiline':False]['text':' Construct the IonFramePrefix.','line_number':5507,'multiline':False]['text':' Finally call the function in objreg.','line_number':5514,'multiline':False]['text':' Increment to remove IonFramePrefix; decrement to fill FrameSizeClass.','line_number':5524,'multiline':False]['text':' The return address has already been removed from the Ion frame.','line_number':5525,'multiline':False]['text':' If the return value of the constructing function is Primitive,','line_number':5529,'multiline':False]['text':' replace the return value with the Object from CreateThis.','line_number':5530,'multiline':False]['text':' Push the space used by the arguments.','line_number':5546,'multiline':False]['text':' argv.','line_number':5550,'multiline':False]['text':' argc.','line_number':5551,'multiline':False]['text':' ignoresReturnValue.','line_number':5552,'multiline':False]['text':' isConstructing.','line_number':5553,'multiline':False]['text':' JSFunction*.','line_number':5554,'multiline':False]['text':' This specialization of callVM restores the extraStackSize after the call.','line_number':5556,'multiline':False]['text':' Do not bailout after the execution of this function since the stack no longer','line_number':5564,'multiline':False]['text':' correspond to what is expected by the snapshots.','line_number':5565,'multiline':False]['text':' Initialize the loop counter AND Compute the stack usage (if == 0)','line_number':5568,'multiline':False]['text':' Align the JitFrameLayout on the JitStackAlignment.','line_number':5571,'multiline':False]['text':' if the number of arguments is odd, then we do not need any padding.','line_number':5577,'multiline':False]['text':' Reserve space for copying the arguments.','line_number':5583,'multiline':False]['text':' Put a magic value in the space reserved for padding. Note, this code','line_number':5589,'multiline':False]['text':' cannot be merged with the previous test, as not all architectures can','line_number':5590,'multiline':False]['text':' write below their stack pointers.','line_number':5591,'multiline':False]['text':' if the number of arguments is odd, then we do not need any padding.','line_number':5595,'multiline':False]['text':' Do not bailout after the execution of this function since the stack no longer','line_number':5604,'multiline':False]['text':' correspond to what is expected by the snapshots.','line_number':5605,'multiline':False]['text':' Align the JitFrameLayout on the JitStackAlignment. Contrary to','line_number':5608,'multiline':False]['text':' |emitAllocateSpaceForApply()|, we're always pushing a magic value, because','line_number':5609,'multiline':False]['text':' we can't write to |newTargetAndExtraStackSpace| before |new.target| has','line_number':5610,'multiline':False]['text':' been pushed onto the stack.','line_number':5611,'multiline':False]['text':' If the number of arguments is even, then we do not need any padding.','line_number':5618,'multiline':False]['text':' Push |new.target| after the padding value, but before any arguments.','line_number':5624,'multiline':False]['text':' Initialize the loop counter AND compute the stack usage.','line_number':5627,'multiline':False]['text':' Reserve space for copying the arguments.','line_number':5630,'multiline':False]['text':' Account for |new.target| which has already been pushed onto the stack.','line_number':5635,'multiline':False]['text':' And account for the padding.','line_number':5638,'multiline':False]['text':' If the number of arguments is even, then we do not need any padding.','line_number':5645,'multiline':False]['text':' Destroys argvIndex and copyreg.','line_number':5652,'multiline':False]['text':' As argvIndex is off by 1, and we use the decBranchPtr instruction','line_number':5660,'multiline':False]['text':' to loop back, we have to substract the size of the word which are','line_number':5661,'multiline':False]['text':' copied.','line_number':5662,'multiline':False]['text':' Handle 32 bits architectures.','line_number':5669,'multiline':False]['text':' Pop |this| and Arguments.','line_number':5683,'multiline':False]['text':' Holds the function nargs. Initially the number of args to the caller.','line_number':5689,'multiline':False]['text':' Skip the copy of arguments if there are none.','line_number':5696,'multiline':False]['text':' clang-format off','line_number':5699,'multiline':False]['text':'','line_number':5700,'multiline':False]['text':' We are making a copy of the arguments which are above the JitFrameLayout','line_number':5701,'multiline':False]['text':' of the current Ion frame.','line_number':5702,'multiline':False]['text':'','line_number':5703,'multiline':False]['text':' [arg1] [arg0] <- src [this] [JitFrameLayout] [.. frameSize ..] [pad] [arg1] [arg0] <- dst','line_number':5704,'multiline':False]['text':'','line_number':5705,'multiline':False]['text':' clang-format on','line_number':5706,'multiline':False]['text':' Compute the source and destination offsets into the stack.','line_number':5708,'multiline':False]['text':' Save the extra stack space, and re-use the register as a base.','line_number':5712,'multiline':False]['text':' Save the actual number of register, and re-use the register as an index','line_number':5718,'multiline':False]['text':' register.','line_number':5719,'multiline':False]['text':' srcPtr = (StackPointer + extraStackSpace) + argvSrcOffset','line_number':5725,'multiline':False]['text':' dstPtr = (StackPointer                  ) + argvDstOffset','line_number':5726,'multiline':False]['text':' Copy arguments.','line_number':5729,'multiline':False]['text':' Restore argcreg and the extra stack space counter.','line_number':5733,'multiline':False]['text':' Join with all arguments copied and the extra stack usage computed.','line_number':5737,'multiline':False]['text':' Push |this|.','line_number':5740,'multiline':False]['text':' argc and argsObj are mapped to the same calltemp register.','line_number':5747,'multiline':False]['text':' Load argc into tmpArgc.','line_number':5753,'multiline':False]['text':' Allocate space on the stack for arguments. This modifies extraStackSpace.','line_number':5758,'multiline':False]['text':' Load arguments data','line_number':5761,'multiline':False]['text':' This is the end of the lifetime of argsObj.','line_number':5766,'multiline':False]['text':' After this call, the argsObj register holds the argument count instead.','line_number':5767,'multiline':False]['text':' Preconditions:','line_number':5778,'multiline':False]['text':' 1. |tmpArgc| * sizeof(Value) bytes have been allocated at the top of','line_number':5779,'multiline':False]['text':'    the stack to hold arguments.','line_number':5780,'multiline':False]['text':' 2. |srcBaseAndArgc| + |srcOffset| points to an array of |tmpArgc| values.','line_number':5781,'multiline':False]['text':'','line_number':5782,'multiline':False]['text':' Postconditions:','line_number':5783,'multiline':False]['text':' 1. The arguments at |srcBaseAndArgc| + |srcOffset| have been copied into','line_number':5784,'multiline':False]['text':'    the allocated space.','line_number':5785,'multiline':False]['text':' 2. |srcBaseAndArgc| now contains the original value of |tmpArgc|.','line_number':5786,'multiline':False]['text':'','line_number':5787,'multiline':False]['text':' |scratch| is used as a temp register within this function. It is','line_number':5788,'multiline':False]['text':' restored before returning.','line_number':5789,'multiline':False]['text':' Skip the copy of arguments if there are none.','line_number':5793,'multiline':False]['text':' Copy the values.  This code is skipped entirely if there are','line_number':5796,'multiline':False]['text':' no values.','line_number':5797,'multiline':False]['text':' Copy','line_number':5810,'multiline':False]['text':' Restore.','line_number':5814,'multiline':False]['text':' srcBaseAndArgc now contains argc.','line_number':5815,'multiline':False]['text':' Clear argc if we skipped the copy step.','line_number':5819,'multiline':False]['text':' Join with all arguments copied and the extra stack usage computed.','line_number':5823,'multiline':False]['text':' Note, "srcBase" has become "argc".','line_number':5824,'multiline':False]['text':' Invariants guarded in the caller:','line_number':5833,'multiline':False]['text':'  - the array is not too long','line_number':5834,'multiline':False]['text':'  - the array length equals its initialized length','line_number':5835,'multiline':False]['text':' The array length is our argc for the purposes of allocating space.','line_number':5837,'multiline':False]['text':' Allocate space for the values.','line_number':5842,'multiline':False]['text':' After this call "elements" has become "argc".','line_number':5845,'multiline':False]['text':' Push |this|.','line_number':5850,'multiline':False]['text':' Invariants guarded in the caller:','line_number':5862,'multiline':False]['text':'  - the array is not too long','line_number':5863,'multiline':False]['text':'  - the array length equals its initialized length','line_number':5864,'multiline':False]['text':' The array length is our argc for the purposes of allocating space.','line_number':5866,'multiline':False]['text':' Allocate space for the values.','line_number':5871,'multiline':False]['text':' After this call "elements" has become "argc" and "newTarget" has become','line_number':5874,'multiline':False]['text':' "extraStackSpace".','line_number':5875,'multiline':False]['text':' Push |this|.','line_number':5880,'multiline':False]['text':' Holds the function object.','line_number':5887,'multiline':False]['text':' Temporary register for modifying the function object.','line_number':5890,'multiline':False]['text':' Holds the function nargs, computed in the invoker or (for ApplyArray,','line_number':5894,'multiline':False]['text':' ConstructArray, or ApplyArgsObj) in the argument pusher.','line_number':5895,'multiline':False]['text':' Copy the arguments of the current function.','line_number':5898,'multiline':False]['text':'','line_number':5899,'multiline':False]['text':' In the case of ApplyArray, ConstructArray, or ApplyArgsObj, also','line_number':5900,'multiline':False]['text':' compute argc. The argc register and the elements/argsObj register','line_number':5901,'multiline':False]['text':' are the same; argc must not be referenced before the call to','line_number':5902,'multiline':False]['text':' emitPushArguments() and elements/argsObj must not be referenced','line_number':5903,'multiline':False]['text':' after it returns.','line_number':5904,'multiline':False]['text':'','line_number':5905,'multiline':False]['text':' In the case of ConstructArray, also overwrite newTarget with','line_number':5906,'multiline':False]['text':' extraStackSpace; newTarget must not be referenced after this point.','line_number':5907,'multiline':False]['text':'','line_number':5908,'multiline':False]['text':' objreg is dead across this call.','line_number':5909,'multiline':False]['text':'','line_number':5910,'multiline':False]['text':' extraStackSpace is garbage on entry (for ApplyArray and ApplyArgs) and','line_number':5911,'multiline':False]['text':' defined on exit.','line_number':5912,'multiline':False]['text':' If the function is native, only emit the call to InvokeFunction.','line_number':5919,'multiline':False]['text':' Native constructors are guaranteed to return an Object value, so we never','line_number':5925,'multiline':False]['text':' have to replace a primitive result with the previously allocated Object','line_number':5926,'multiline':False]['text':' from CreateThis.','line_number':5927,'multiline':False]['text':' Unless already known, guard that calleereg is actually a function object.','line_number':5943,'multiline':False]['text':' Guard that calleereg is an interpreted function with a JSScript.','line_number':5949,'multiline':False]['text':' Guard that callee allows the [[Call]] or [[Construct]] operation required.','line_number':5952,'multiline':False]['text':' Use the slow path if CreateThis was unable to create the |this| object.','line_number':5961,'multiline':False]['text':' Call with an Ion frame or a rectifier frame.','line_number':5967,'multiline':False]['text':' Knowing that calleereg is a non-native function, load jitcode.','line_number':5973,'multiline':False]['text':' Create the frame descriptor.','line_number':5976,'multiline':False]['text':' descriptor','line_number':5985,'multiline':False]['text':' Check whether the provided arguments satisfy target argc.','line_number':5989,'multiline':False]['text':' Skip the construction of the rectifier frame because we have no','line_number':6000,'multiline':False]['text':' underflow.','line_number':6001,'multiline':False]['text':' Argument fixup needed. Get ready to call the argumentsRectifier.','line_number':6004,'multiline':False]['text':' Hardcode the address of the argumentsRectifier code.','line_number':6008,'multiline':False]['text':' Finally call the function in objreg, as assigned by one of the paths','line_number':6016,'multiline':False]['text':' above.','line_number':6017,'multiline':False]['text':' Recover the number of arguments from the frame descriptor.','line_number':6027,'multiline':False]['text':' Increment to remove IonFramePrefix; decrement to fill FrameSizeClass.','line_number':6032,'multiline':False]['text':' The return address has already been removed from the Ion frame.','line_number':6033,'multiline':False]['text':' Handle uncompiled or native functions.','line_number':6039,'multiline':False]['text':' If the return value of the constructing function is Primitive,','line_number':6047,'multiline':False]['text':' replace the return value with the Object from CreateThis.','line_number':6048,'multiline':False]['text':' Pop arguments and continue.','line_number':6057,'multiline':False]['text':' Ensure that we have a reasonable number of arguments.','line_number':6065,'multiline':False]['text':' Ensure that we have a reasonable number of arguments.','line_number':6091,'multiline':False]['text':' Ensure that the array does not contain an uninitialized tail.','line_number':6094,'multiline':False]['text':' Ensure that we have a reasonable number of arguments.','line_number':6112,'multiline':False]['text':' Ensure that the array does not contain an uninitialized tail.','line_number':6115,'multiline':False]['text':' Out-of-line path to report over-recursed error and fail.','line_number':6143,'multiline':False]['text':' If we don't push anything on the stack, skip the check.','line_number':6158,'multiline':False]['text':' Ensure that this frame will not cross the stack limit.','line_number':6163,'multiline':False]['text':' This is a weak check, justified by Ion using the C stack: we must always','line_number':6164,'multiline':False]['text':' be some distance away from the actual limit, since if the limit is','line_number':6165,'multiline':False]['text':' crossed, an error must be thrown, which requires more frames.','line_number':6166,'multiline':False]['text':'','line_number':6167,'multiline':False]['text':' It must always be possible to trespass past the stack limit.','line_number':6168,'multiline':False]['text':' Ion may legally place frames very close to the limit. Calling additional','line_number':6169,'multiline':False]['text':' C functions may then violate the limit without any checking.','line_number':6170,'multiline':False]['text':'','line_number':6171,'multiline':False]['text':' Since Ion frames exist on the C stack, the stack limit may be','line_number':6172,'multiline':False]['text':' dynamically set by JS_SetThreadStackLimit() and JS_SetNativeStackQuota().','line_number':6173,'multiline':False]['text':' Conditional forward (unlikely) branch to failure.','line_number':6178,'multiline':False]['text':' The OOL path is hit if the recursion depth has been exceeded.','line_number':6187,'multiline':False]['text':' Throw an InternalError for over-recursion.','line_number':6188,'multiline':False]['text':' LFunctionEnvironment can appear before LCheckOverRecursed, so we have','line_number':6190,'multiline':False]['text':' to save all live registers to avoid crashes if CheckOverRecursed triggers','line_number':6191,'multiline':False]['text':' a GC.','line_number':6192,'multiline':False]['text':' If scripts are being profiled, create a new IonScriptCounts for the','line_number':6203,'multiline':False]['text':' profiling data, which will be attached to the associated JSScript or','line_number':6204,'multiline':False]['text':' wasm module after code generation finishes.','line_number':6205,'multiline':False]['text':' This test inhibits IonScriptCount creation for wasm code which is','line_number':6210,'multiline':False]['text':' currently incompatible with wasm codegen for two reasons: (1) wasm code','line_number':6211,'multiline':False]['text':' must be serializable and script count codegen bakes in absolute','line_number':6212,'multiline':False]['text':' addresses, (2) wasm code does not have a JSScript with which to associate','line_number':6213,'multiline':False]['text':' code coverage data.','line_number':6214,'multiline':False]['text':' Find a PC offset in the outermost script to use. If this','line_number':6231,'multiline':False]['text':' block is from an inlined script, find a location in the','line_number':6232,'multiline':False]['text':' outer script to associate information about the inlining','line_number':6233,'multiline':False]['text':' with.','line_number':6234,'multiline':False]['text':' Get the filename and line number of the inner script.','line_number':6241,'multiline':False]['text':' Structure for managing the state tracked for a block by script counters.','line_number':6266,'multiline':False]['text':' Bump the hit count for the block at the start. This code is not','line_number':6282,'multiline':False]['text':' included in either the text for the block or the instruction byte','line_number':6283,'multiline':False]['text':' counts.','line_number':6284,'multiline':False]['text':' Collect human readable assembly for the code generated in the block.','line_number':6287,'multiline':False]['text':' Prefix stream of assembly instructions with their LIR instruction','line_number':6295,'multiline':False]['text':' name and any associated high level info.','line_number':6296,'multiline':False]['text':' If IonScript::invalidationCount_ != 0, the script has been invalidated.','line_number':6318,'multiline':False]['text':' Don't check if the script has been invalidated. In that case invalid','line_number':6337,'multiline':False]['text':' types are expected (until we reach the OsiPoint and bailout).','line_number':6338,'multiline':False]['text':' Check that we have a valid GC pointer.','line_number':6343,'multiline':False]['text':' Disable for wasm because we don't have a context on wasm compilation','line_number':6344,'multiline':False]['text':' threads and this needs a context.','line_number':6345,'multiline':False]['text':' Also disable for simulator builds because the C++ call is a lot slower','line_number':6346,'multiline':False]['text':' there than on actual hardware.','line_number':6347,'multiline':False]['text':' Don't check if the script has been invalidated. In that case invalid','line_number':6398,'multiline':False]['text':' types are expected (until we reach the OsiPoint and bailout).','line_number':6399,'multiline':False]['text':' Check that we have a valid GC pointer.','line_number':6403,'multiline':False]['text':' In debug builds, check that LIR instructions return valid values.','line_number':6456,'multiline':False]['text':' Don't emit any code for trivial blocks, containing just a goto. Such','line_number':6536,'multiline':False]['text':' blocks are created to split critical edges, and if we didn't end up','line_number':6537,'multiline':False]['text':' putting any instructions in them, we can skip them.','line_number':6538,'multiline':False]['text':' needed to encode correct snapshot location.','line_number':6618,'multiline':False]['text':' Out-of-line object allocation for LNewArray.','line_number':6657,'multiline':False]['text':' Try to do the allocation inline if the template object is big enough','line_number':6802,'multiline':False]['text':' for the length in lengthReg. If the length is bigger we could still','line_number':6803,'multiline':False]['text':' use the template object and not allocate the elements, but it's more','line_number':6804,'multiline':False]['text':' efficient to do a single big allocation than (repeatedly) reallocating','line_number':6805,'multiline':False]['text':' the array later on when filling it.','line_number':6806,'multiline':False]['text':' Out-of-line object allocation for JSOp::NewObject.','line_number':6935,'multiline':False]['text':' If we're making a new object with a class prototype (that is, an object','line_number':6957,'multiline':False]['text':' that derives its class from its prototype instead of being','line_number':6958,'multiline':False]['text':' PlainObject::class_'d) from self-hosted code, we need a different init','line_number':6959,'multiline':False]['text':' function.','line_number':6960,'multiline':False]['text':' Look for StoreFixedSlot instructions following an object allocation','line_number':6999,'multiline':False]['text':' that write to this object before a GC is triggered or this object is','line_number':7000,'multiline':False]['text':' passed to a VM call. If all fixed slots will be initialized, the','line_number':7001,'multiline':False]['text':' allocation code doesn't need to set the slots to |undefined|.','line_number':7002,'multiline':False]['text':' Only optimize if all fixed slots are initially |undefined|, so that we','line_number':7009,'multiline':False]['text':' can assume incremental pre-barriers are not necessary. See also the','line_number':7010,'multiline':False]['text':' comment below.','line_number':7011,'multiline':False]['text':' Keep track of the fixed slots that are initialized. initializedSlots is','line_number':7018,'multiline':False]['text':' a bit mask with a bit for each slot.','line_number':7019,'multiline':False]['text':' Skip the allocation instruction.','line_number':7029,'multiline':False]['text':' These instructions won't trigger a GC or read object slots.','line_number':7037,'multiline':False]['text':' We may not initialize this object slot on allocation, so the','line_number':7047,'multiline':False]['text':' pre-barrier could read uninitialized memory. Simply disable','line_number':7048,'multiline':False]['text':' the barrier for this store: the object was just initialized','line_number':7049,'multiline':False]['text':' so the barrier is not necessary.','line_number':7050,'multiline':False]['text':' All fixed slots will be initialized.','line_number':7060,'multiline':False]['text':' Unhandled instruction, assume it bails or reads object slots.','line_number':7076,'multiline':False]['text':' If we have a template object, we can inline call object creation.','line_number':7179,'multiline':False]['text':' Inline call object creation, using the OOL path only for tricky cases.','line_number':7205,'multiline':False]['text':' Allocate. If the FreeList is empty, call to VM, which may GC.','line_number':7307,'multiline':False]['text':' This should be getting constructed in the first block only, and not any OSR','line_number':7318,'multiline':False]['text':' entry blocks.','line_number':7319,'multiline':False]['text':' Try to allocate an arguments object. This will leave the reserved','line_number':7332,'multiline':False]['text':' slots uninitialized, so it's important we don't GC until we','line_number':7333,'multiline':False]['text':' initialize these slots in ArgumentsObject::finishForIonPure.','line_number':7334,'multiline':False]['text':' initContents = ','line_number':7339,'multiline':True]['text':' Discard saved callObj on the stack.','line_number':7357,'multiline':False]['text':' TODO: Do we have to worry about alignment here?','line_number':7383,'multiline':False]['text':' Create a contiguous array of values for ArgumentsObject::create','line_number':7385,'multiline':False]['text':' by pushing the arguments onto the stack in reverse order.','line_number':7386,'multiline':False]['text':' Discard the array of values.','line_number':7406,'multiline':False]['text':' Check the first n-1 possible indices.','line_number':7417,'multiline':False]['text':' The index has already been bounds-checked, so load the last argument.','line_number':7437,'multiline':False]['text':' Value is not an object. Return that other object.','line_number':7525,'multiline':False]['text':' Value is an object. Return unbox(Value).','line_number':7529,'multiline':False]['text':' Bail out if the length doesn't fit in int32.','line_number':7617,'multiline':False]['text':' Get the JSFunction flags.','line_number':7646,'multiline':False]['text':' Functions with a SelfHostedLazyScript must be compiled with the slow-path','line_number':7649,'multiline':False]['text':' before the function length is known. If the length was previously resolved,','line_number':7650,'multiline':False]['text':' the length property may be shadowed.','line_number':7651,'multiline':False]['text':' We can add sizeof(Data) to |front| to select the next element, because','line_number':7719,'multiline':False]['text':' |front| and |range.ht.data[i]| point to the same location.','line_number':7720,'multiline':False]['text':' Self-hosted code is responsible for ensuring GetNextEntryForIterator is','line_number':7821,'multiline':False]['text':' only called with the correct iterator class. Assert here all self-','line_number':7822,'multiline':False]['text':' hosted callers of GetNextEntryForIterator perform this class check.','line_number':7823,'multiline':False]['text':' No Spectre mitigations are needed because this is DEBUG-only code.','line_number':7824,'multiline':False]['text':' The point of these is to inform Ion of where these values already are; they','line_number':7885,'multiline':False]['text':' don't normally generate code.  Still, visitWasmRegisterResult is','line_number':7886,'multiline':False]['text':' per-platform.','line_number':7887,'multiline':False]['text':' Zero out ref stack results.','line_number':7897,'multiline':False]['text':' LWasmCallBase::isCallPreserved() assumes that all MWasmCalls preserve the','line_number':7927,'multiline':False]['text':' TLS and pinned regs. The only case where where we don't have to reload','line_number':7928,'multiline':False]['text':' the TLS and pinned regs is when the callee preserves them.','line_number':7929,'multiline':False]['text':' Note the assembler offset for the associated LSafePoint.','line_number':7962,'multiline':False]['text':' Now that all the outbound in-memory args are on the stack, note the','line_number':7965,'multiline':False]['text':' required lower boundary point of the associated StackMap.','line_number':7966,'multiline':False]['text':' This could be correct, but it would be a new usage, so check carefully.','line_number':8030,'multiline':False]['text':' The postbarrier is handled separately.','line_number':8061,'multiline':False]['text':' Substitute the invalid index with an arbitrary out-of-bounds index.','line_number':8156,'multiline':False]['text':' For Abs*, lowering will have tied input to output on platforms where that is','line_number':8214,'multiline':False]['text':' sensible, and otherwise left them untied.','line_number':8215,'multiline':False]['text':' Hacker's Delight, 2nd edition, theorem D2.','line_number':8297,'multiline':False]['text':' Take bailout if |power| is greater-or-equals |log_y(2^31)| or is negative.','line_number':8300,'multiline':False]['text':' |2^(n*y) < 2^31| must hold, hence |n*y < 31| resp. |y < 31/n|.','line_number':8301,'multiline':False]['text':'','line_number':8302,'multiline':False]['text':' Note: it's important for this condition to match the code in CacheIR.cpp','line_number':8303,'multiline':False]['text':' (CanAttachInt32Pow) to prevent failure loops.','line_number':8304,'multiline':False]['text':' Compute (2^n)^y as 2^(n*y) using repeated shifts. We could directly scale','line_number':8308,'multiline':False]['text':' |power| and perform a single shift, but due to the lack of necessary','line_number':8309,'multiline':False]['text':' MacroAssembler functionality, like multiplying a register with an','line_number':8310,'multiline':False]['text':' immediate, we restrict the number of generated shift instructions when','line_number':8311,'multiline':False]['text':' lowering this operation.','line_number':8312,'multiline':False]['text':' Compute |n % d| using |copysign(n - (d * trunc(n / d)), n)|.','line_number':8425,'multiline':False]['text':'','line_number':8426,'multiline':False]['text':' This doesn't work if |d| isn't a power of two, because we may lose too much','line_number':8427,'multiline':False]['text':' precision. For example |Number.MAX_VALUE % 3 == 2|, but','line_number':8428,'multiline':False]['text':' |3 * trunc(Number.MAX_VALUE / 3) == Infinity|.','line_number':8429,'multiline':False]['text':' Subnormals can lead to performance degradation, which can make calling','line_number':8435,'multiline':False]['text':' |fmod| faster than this inline implementation. Work around this issue by','line_number':8436,'multiline':False]['text':' directly returning the input for any value in the interval ]-1, +1[.','line_number':8437,'multiline':False]['text':' The pattern |n % 1 == 0| is used to detect integer numbers. We can skip','line_number':8452,'multiline':False]['text':' the multiplication by one in this case.','line_number':8453,'multiline':False]['text':' 0n + x == x','line_number':8505,'multiline':False]['text':' x + 0n == x','line_number':8512,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8519,'multiline':False]['text':' register.','line_number':8520,'multiline':False]['text':' Create and return the result.','line_number':8526,'multiline':False]['text':' x - 0n == x','line_number':8544,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8551,'multiline':False]['text':' register.','line_number':8552,'multiline':False]['text':' Create and return the result.','line_number':8558,'multiline':False]['text':' 0n * x == 0n','line_number':8576,'multiline':False]['text':' x * 0n == 0n','line_number':8583,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8590,'multiline':False]['text':' register.','line_number':8591,'multiline':False]['text':' Create and return the result.','line_number':8597,'multiline':False]['text':' x / 0 throws an error.','line_number':8615,'multiline':False]['text':' 0n / x == 0n','line_number':8620,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8627,'multiline':False]['text':' register.','line_number':8628,'multiline':False]['text':' |BigInt::div()| returns |lhs| for |lhs / 1n|, which means there's no','line_number':8632,'multiline':False]['text':' allocation which might trigger a minor GC to free up nursery space. This','line_number':8633,'multiline':False]['text':' requires us to apply the same optimization here, otherwise we'd end up with','line_number':8634,'multiline':False]['text':' always entering the OOL call, because the nursery is never evicted.','line_number':8635,'multiline':False]['text':' Handle an integer overflow from INT{32,64}_MIN / -1.','line_number':8645,'multiline':False]['text':' x % 0 throws an error.','line_number':8667,'multiline':False]['text':' 0n % x == 0n','line_number':8672,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8679,'multiline':False]['text':' register.','line_number':8680,'multiline':False]['text':' Similar to the case for BigInt division, we must apply the same allocation','line_number':8684,'multiline':False]['text':' optimizations as performed in |BigInt::mod()|.','line_number':8685,'multiline':False]['text':' Convert both digits to signed pointer-sized values.','line_number':8692,'multiline':False]['text':' Handle an integer overflow from INT{32,64}_MIN / -1.','line_number':8699,'multiline':False]['text':' x ** -y throws an error.','line_number':8722,'multiline':False]['text':' p = 1','line_number':8732,'multiline':False]['text':' 1n ** y == 1n','line_number':8734,'multiline':False]['text':' -1n ** y == 1n when y is even','line_number':8735,'multiline':False]['text':' -1n ** y == -1n when y is odd','line_number':8736,'multiline':False]['text':' x ** 0n == 1n','line_number':8754,'multiline':False]['text':' 0n ** y == 0n with y != 0n','line_number':8757,'multiline':False]['text':' Call into the VM when the exponent can't be loaded into a pointer-sized','line_number':8766,'multiline':False]['text':' register.','line_number':8767,'multiline':False]['text':' x ** y with x > 1 and y >= DigitBits can't be pointer-sized.','line_number':8770,'multiline':False]['text':' x ** 1n == x','line_number':8774,'multiline':False]['text':' Call into the VM when the base operand can't be loaded into a pointer-sized','line_number':8783,'multiline':False]['text':' register.','line_number':8784,'multiline':False]['text':' MacroAssembler::pow32() adjusted to work on pointer-sized registers.','line_number':8787,'multiline':False]['text':' m = base','line_number':8789,'multiline':False]['text':' n = exponent','line_number':8790,'multiline':False]['text':' m *= m','line_number':8796,'multiline':False]['text':' if ((n & 1) != 0) p *= m','line_number':8801,'multiline':False]['text':' n >>= 1','line_number':8807,'multiline':False]['text':' if (n == 0) return p','line_number':8808,'multiline':False]['text':' Create and return the result.','line_number':8814,'multiline':False]['text':' 0n & x == 0n','line_number':8833,'multiline':False]['text':' x & 0n == 0n','line_number':8840,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8847,'multiline':False]['text':' register.','line_number':8848,'multiline':False]['text':' Create and return the result.','line_number':8854,'multiline':False]['text':' 0n | x == x','line_number':8872,'multiline':False]['text':' x | 0n == x','line_number':8879,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8886,'multiline':False]['text':' register.','line_number':8887,'multiline':False]['text':' Create and return the result.','line_number':8893,'multiline':False]['text':' 0n ^ x == x','line_number':8911,'multiline':False]['text':' x ^ 0n == x','line_number':8918,'multiline':False]['text':' Call into the VM when either operand can't be loaded into a pointer-sized','line_number':8925,'multiline':False]['text':' register.','line_number':8926,'multiline':False]['text':' Create and return the result.','line_number':8932,'multiline':False]['text':' 0n << x == 0n','line_number':8951,'multiline':False]['text':' x << 0n == x','line_number':8958,'multiline':False]['text':' Inline |BigInt::lsh| for the case when |lhs| contains a single digit.','line_number':8965,'multiline':False]['text':' Call into the VM when the left-hand side operand can't be loaded into a','line_number':8970,'multiline':False]['text':' pointer-sized register.','line_number':8971,'multiline':False]['text':' Handle shifts exceeding |BigInt::DigitBits| first.','line_number':8974,'multiline':False]['text':' x << DigitBits with x != 0n always exceeds pointer-sized storage.','line_number':8980,'multiline':False]['text':' x << -DigitBits == x >> DigitBits, which is either 0n or -1n.','line_number':8983,'multiline':False]['text':' |x << -y| is computed as |x >> y|.','line_number':8996,'multiline':False]['text':' For negative numbers, round down if any bit was shifted out.','line_number':8999,'multiline':False]['text':' Compute |mask = (static_cast<Digit>(1) << shift) - 1|.','line_number':9002,'multiline':False]['text':' Add plus one when |(lhs.digit(0) & mask) != 0|.','line_number':9007,'multiline':False]['text':' Compute |grow = lhs.digit(0) >> (DigitBits - shift)|.','line_number':9016,'multiline':False]['text':' Call into the VM when any bit will be shifted out.','line_number':9022,'multiline':False]['text':' Create and return the result.','line_number':9030,'multiline':False]['text':' Set the sign bit when the left-hand side is negative.','line_number':9034,'multiline':False]['text':' 0n >> x == 0n','line_number':9054,'multiline':False]['text':' x >> 0n == x','line_number':9061,'multiline':False]['text':' Inline |BigInt::rsh| for the case when |lhs| contains a single digit.','line_number':9068,'multiline':False]['text':' Call into the VM when the left-hand side operand can't be loaded into a','line_number':9073,'multiline':False]['text':' pointer-sized register.','line_number':9074,'multiline':False]['text':' Handle shifts exceeding |BigInt::DigitBits| first.','line_number':9077,'multiline':False]['text':' x >> -DigitBits == x << DigitBits, which exceeds pointer-sized storage.','line_number':9083,'multiline':False]['text':' x >> DigitBits is either 0n or -1n.','line_number':9086,'multiline':False]['text':' Compute |grow = lhs.digit(0) >> (DigitBits - shift)|.','line_number':9099,'multiline':False]['text':' Call into the VM when any bit will be shifted out.','line_number':9105,'multiline':False]['text':' |x >> -y| is computed as |x << y|.','line_number':9108,'multiline':False]['text':' For negative numbers, round down if any bit was shifted out.','line_number':9119,'multiline':False]['text':' Compute |mask = (static_cast<Digit>(1) << shift) - 1|.','line_number':9122,'multiline':False]['text':' Add plus one when |(lhs.digit(0) & mask) != 0|.','line_number':9127,'multiline':False]['text':' Create and return the result.','line_number':9133,'multiline':False]['text':' Set the sign bit when the left-hand side is negative.','line_number':9137,'multiline':False]['text':' Call into the VM when the input can't be loaded into a pointer-sized','line_number':9155,'multiline':False]['text':' register.','line_number':9156,'multiline':False]['text':' Create and return the result.','line_number':9162,'multiline':False]['text':' Call into the VM when the input can't be loaded into a pointer-sized','line_number':9179,'multiline':False]['text':' register.','line_number':9180,'multiline':False]['text':' Create and return the result.','line_number':9186,'multiline':False]['text':' -0n == 0n','line_number':9202,'multiline':False]['text':' Call into the VM when the input uses heap digits.','line_number':9209,'multiline':False]['text':' Flip the sign bit.','line_number':9213,'multiline':False]['text':' This follows the C++ implementation because it let's us support the full','line_number':9232,'multiline':False]['text':' range [-2^64, 2^64 - 1] on 64-bit resp. [-2^32, 2^32 - 1] on 32-bit.','line_number':9233,'multiline':False]['text':' ~(-x) == ~(~(x-1)) == x-1','line_number':9237,'multiline':False]['text':' ~x == -x-1 == -(x+1)','line_number':9243,'multiline':False]['text':' Create and return the result.','line_number':9249,'multiline':False]['text':' Set the sign bit when the input is positive.','line_number':9253,'multiline':False]['text':' Push the operands in reverse order for JSOp::Le:','line_number':9354,'multiline':False]['text':' - |left <= right| is implemented as |right >= left|.','line_number':9355,'multiline':False]['text':' Push the operands in reverse order for JSOp::Gt:','line_number':9360,'multiline':False]['text':' - |left > right| is implemented as |right < left|.','line_number':9361,'multiline':False]['text':' Jump to |notSameSign| when the sign aren't the same.','line_number':9403,'multiline':False]['text':' Jump to |notSameLength| when the digits length is different.','line_number':9409,'multiline':False]['text':' Both BigInts have the same sign and the same number of digits. Loop over','line_number':9414,'multiline':False]['text':' each digit, starting with the left-most one, and break from the loop when','line_number':9415,'multiline':False]['text':' the first non-matching digit was found.','line_number':9416,'multiline':False]['text':' No different digits were found, both BigInts are equal to each other.','line_number':9440,'multiline':False]['text':' There are two cases when sign(left) != sign(right):','line_number':9454,'multiline':False]['text':' 1. sign(left) = positive and sign(right) = negative,','line_number':9455,'multiline':False]['text':' 2. or the dual case with reversed signs.','line_number':9456,'multiline':False]['text':'','line_number':9457,'multiline':False]['text':' For case 1, |left| <cmp> |right| is true for cmp=Gt or cmp=Ge and false','line_number':9458,'multiline':False]['text':' for cmp=Lt or cmp=Le. Initialize the result for case 1 and handle case 2','line_number':9459,'multiline':False]['text':' with |invertWhenNegative|.','line_number':9460,'multiline':False]['text':' For sign(left) = sign(right) and len(digits(left)) != len(digits(right)),','line_number':9465,'multiline':False]['text':' we have to consider the two cases:','line_number':9466,'multiline':False]['text':' 1. len(digits(left)) < len(digits(right))','line_number':9467,'multiline':False]['text':' 2. len(digits(left)) > len(digits(right))','line_number':9468,'multiline':False]['text':'','line_number':9469,'multiline':False]['text':' For |left| <cmp> |right| with cmp=Lt:','line_number':9470,'multiline':False]['text':' Assume both BigInts are positive, then |left < right| is true for case 1','line_number':9471,'multiline':False]['text':' and false for case 2. When both are negative, the result is reversed.','line_number':9472,'multiline':False]['text':'','line_number':9473,'multiline':False]['text':' The other comparison operators can be handled similarly.','line_number':9474,'multiline':False]['text':'','line_number':9475,'multiline':False]['text':' |temp1| holds the digits length of the right-hand side operand.','line_number':9476,'multiline':False]['text':' isSigned = ','line_number':9478,'multiline':True]['text':' Similar to the case above, compare the current digit to determine the','line_number':9482,'multiline':False]['text':' overall comparison result.','line_number':9483,'multiline':False]['text':'','line_number':9484,'multiline':False]['text':' |temp2| points to the current digit of the left-hand side operand.','line_number':9485,'multiline':False]['text':' |output| holds the current digit of the right-hand side operand.','line_number':9486,'multiline':False]['text':' isSigned = ','line_number':9488,'multiline':True]['text':' Push the operands in reverse order for JSOp::Le and JSOp::Gt:','line_number':9530,'multiline':False]['text':' - |left <= right| is implemented as |right >= left|.','line_number':9531,'multiline':False]['text':' - |left > right| is implemented as |right < left|.','line_number':9532,'multiline':False]['text':' Push the operands in reverse order for JSOp::Le and JSOp::Gt:','line_number':9588,'multiline':False]['text':' - |left <= right| is implemented as |right >= left|.','line_number':9589,'multiline':False]['text':' - |left > right| is implemented as |right < left|.','line_number':9590,'multiline':False]['text':' Check whether it's a truthy object or a falsy object that emulates','line_number':9663,'multiline':False]['text':' undefined.','line_number':9664,'multiline':False]['text':' fall through','line_number':9673,'multiline':False]['text':' It's not null or undefined, and if it's an object it doesn't','line_number':9677,'multiline':False]['text':' emulate undefined, so it's not like undefined.','line_number':9678,'multiline':False]['text':' Both branches meet here.','line_number':9685,'multiline':False]['text':' Swap branches.','line_number':9718,'multiline':False]['text':' Objects that emulate undefined are loosely equal to null/undefined.','line_number':9740,'multiline':False]['text':' Swap branches.','line_number':9808,'multiline':False]['text':' Objects that emulate undefined are loosely equal to null/undefined.','line_number':9821,'multiline':False]['text':' First check to see if the values have identical bits.','line_number':9846,'multiline':False]['text':' This is correct for SameValue because SameValue(NaN,NaN) is true,','line_number':9847,'multiline':False]['text':' and SameValue(0,-0) is false.','line_number':9848,'multiline':False]['text':' If this fails, call SameValue.','line_number':9853,'multiline':False]['text':' Copy |len| char16_t code units from |from| to |to|. Assumes len > 0','line_number':9896,'multiline':False]['text':' (checked below in debug builds), and when done |to| must point to the','line_number':9897,'multiline':False]['text':' next available char.','line_number':9898,'multiline':False]['text':' destChars is TwoByte and input is a Latin1 or TwoByte string, so we may','line_number':9933,'multiline':False]['text':' have to inflate.','line_number':9934,'multiline':False]['text':' State: result length in temp2.','line_number':9963,'multiline':False]['text':' Ensure both strings are linear.','line_number':9965,'multiline':False]['text':' Allocate a JSThinInlineString or JSFatInlineString.','line_number':9969,'multiline':False]['text':' Store length.','line_number':9999,'multiline':False]['text':' Load chars pointer in temp2.','line_number':10002,'multiline':False]['text':' Copy lhs chars. Note that this advances temp2 to point to the next','line_number':10016,'multiline':False]['text':' char. This also clobbers the lhs register.','line_number':10017,'multiline':False]['text':' Copy rhs chars. Clobbers the rhs register.','line_number':10020,'multiline':False]['text':' On x86 there are not enough registers. In that case reuse the string','line_number':10034,'multiline':False]['text':' register as temporary.','line_number':10035,'multiline':False]['text':' For every edge case use the C++ variant.','line_number':10043,'multiline':False]['text':' Note: we also use this upon allocation failure in newGCString and','line_number':10044,'multiline':False]['text':' newGCFatInlineString. To squeeze out even more performance those failures','line_number':10045,'multiline':False]['text':' can be handled by allocate in ool code and returning to jit code to fill','line_number':10046,'multiline':False]['text':' in all data.','line_number':10047,'multiline':False]['text':' Zero length, return emptystring.','line_number':10055,'multiline':False]['text':' Use slow path for ropes.','line_number':10061,'multiline':False]['text':' Handle inlined strings by creating a FatInlineString.','line_number':10065,'multiline':False]['text':' Handle other cases with a DependentString.','line_number':10097,'multiline':False]['text':' If lhs is empty, return rhs.','line_number':10140,'multiline':False]['text':' If rhs is empty, return lhs.','line_number':10145,'multiline':False]['text':' Check if we can use a JSFatInlineString. The result is a Latin1 string if','line_number':10152,'multiline':False]['text':' lhs and rhs are both Latin1, so we AND the flags.','line_number':10153,'multiline':False]['text':' Keep AND'ed flags in temp1.','line_number':10175,'multiline':False]['text':' Ensure result length <= JSString::MAX_LENGTH.','line_number':10177,'multiline':False]['text':' Allocate a new rope, guaranteed to be in the nursery if','line_number':10180,'multiline':False]['text':' stringsCanBeInNursery. (As a result, no post barriers are needed below.)','line_number':10181,'multiline':False]['text':' Store rope length and flags. temp1 still holds the result of AND'ing the','line_number':10184,'multiline':False]['text':' lhs and rhs flags, so we just have to clear the other flags to get our rope','line_number':10185,'multiline':False]['text':' flags (Latin1 if both lhs and rhs are Latin1).','line_number':10186,'multiline':False]['text':' Store left and right nodes.','line_number':10193,'multiline':False]['text':' Restore the return address such that the emitPrologue function of the','line_number':10286,'multiline':False]['text':' CodeGenerator can push it back on the stack with pushReturnAddress.','line_number':10287,'multiline':False]['text':' InvokeFromInterpreterStub stores the return value in argv[0], where the','line_number':10319,'multiline':False]['text':' caller stored |this|.','line_number':10320,'multiline':False]['text':' negativeZeroCheck = ','line_number':10335,'multiline':True]['text':' force = ','line_number':10356,'multiline':True]['text':' force = ','line_number':10358,'multiline':True]['text':' force = ','line_number':10368,'multiline':True]['text':' force = ','line_number':10370,'multiline':True]['text':' OOL path if code >= UNIT_STATIC_LIMIT.','line_number':10402,'multiline':False]['text':' The OOL path is only taken when we can't allocate the inline string.','line_number':10419,'multiline':False]['text':' Use a bailout if the input is not a valid code point, because','line_number':10440,'multiline':False]['text':' MFromCodePoint is movable and it'd be observable when a moved','line_number':10441,'multiline':False]['text':' fromCodePoint throws an exception before its actual call site.','line_number':10442,'multiline':False]['text':' Allocate a JSThinInlineString.','line_number':10446,'multiline':False]['text':' Store length.','line_number':10461,'multiline':False]['text':' Load chars pointer in temp1.','line_number':10464,'multiline':False]['text':' Store length.','line_number':10473,'multiline':False]['text':' Load chars pointer in temp1.','line_number':10476,'multiline':False]['text':' Inlined unicode::LeadSurrogate(uint32_t).','line_number':10479,'multiline':False]['text':' Inlined unicode::TrailSurrogate(uint32_t).','line_number':10487,'multiline':False]['text':' fall through','line_number':10550,'multiline':False]['text':' Note that the testValueTruthyKernel call above may choose to fall through','line_number':10578,'multiline':False]['text':' to ifTruthy instead of branching there.','line_number':10579,'multiline':False]['text':' both branches meet here.','line_number':10587,'multiline':False]['text':' Use uint32 so that the comparison is unsigned.','line_number':10618,'multiline':False]['text':' If the minimum and maximum differ then do an underflow check first.','line_number':10693,'multiline':False]['text':' If the two are the same then doing an unsigned comparison on the','line_number':10694,'multiline':False]['text':' length will also catch a negative index.','line_number':10695,'multiline':False]['text':' Compute the maximum possible index. No overflow check is needed when','line_number':10723,'multiline':False]['text':' max > 0. We can only wraparound to a negative number, which will test as','line_number':10724,'multiline':False]['text':' larger than all nonnegative numbers in the unsigned comparison, and the','line_number':10725,'multiline':False]['text':' length is required to be nonnegative (else testing a negative length','line_number':10726,'multiline':False]['text':' would succeed on any nonnegative index).','line_number':10727,'multiline':False]['text':' If index == initializedLength, try to bump the initialized length inline.','line_number':10964,'multiline':False]['text':' If index > initializedLength, call a stub. Note that this relies on the','line_number':10965,'multiline':False]['text':' condition flags sticking from the incoming branch.','line_number':10966,'multiline':False]['text':' Also note: this branch does not need Spectre mitigations, doing that for','line_number':10967,'multiline':False]['text':' the capacity check below is sufficient.','line_number':10968,'multiline':False]['text':' Had to reimplement for MIPS because there are no flags.','line_number':10970,'multiline':False]['text':' Check array capacity.','line_number':10977,'multiline':False]['text':' Update initialized length. The capacity guard above ensures this won't','line_number':10982,'multiline':False]['text':' overflow, due to MAX_DENSE_ELEMENTS_COUNT.','line_number':10983,'multiline':False]['text':' Update length if length < initializedLength.','line_number':10988,'multiline':False]['text':' The inline path for StoreElementHoleT does not always store the type tag,','line_number':10999,'multiline':False]['text':' so we do the store on the OOL path. We use MIRType::None for the element','line_number':11000,'multiline':False]['text':' type so that emitStoreElementTyped will always store the type tag.','line_number':11001,'multiline':False]['text':' Jump to the inline path where we will store the value.','line_number':11006,'multiline':False]['text':' Load elements and length.','line_number':11058,'multiline':False]['text':' TODO(post-Warp): reuse/share the CacheIR implementation when IonBuilder and','line_number':11062,'multiline':False]['text':' TI are gone (bug 1654180).','line_number':11063,'multiline':False]['text':' Bailout if the incremented length does not fit in int32.','line_number':11065,'multiline':False]['text':' Guard length == initializedLength.','line_number':11069,'multiline':False]['text':' Guard length < capacity.','line_number':11073,'multiline':False]['text':' Do the store.','line_number':11077,'multiline':False]['text':' Update length and initialized length.','line_number':11082,'multiline':False]['text':' Try to allocate an object.','line_number':11103,'multiline':False]['text':' Fast path for simple length <= 1 cases.','line_number':11133,'multiline':False]['text':' Check for length == 0','line_number':11139,'multiline':False]['text':' Check for length == 1, initializedLength >= 1, arr[0].isString()','line_number':11148,'multiline':False]['text':' At this point, 'output' can be used as a scratch register, since we're','line_number':11155,'multiline':False]['text':' guaranteed to succeed.','line_number':11156,'multiline':False]['text':' read number of actual arguments from the JS frame.','line_number':11224,'multiline':False]['text':' Compute actuals() + numFormals.','line_number':11252,'multiline':False]['text':' Compute numActuals - numFormals.','line_number':11257,'multiline':False]['text':' Create a stackmap from the given safepoint, with the structure:','line_number':11313,'multiline':False]['text':'','line_number':11314,'multiline':False]['text':'   <reg dump area, if trap>','line_number':11315,'multiline':False]['text':'   |       ++ <body (general spill)>','line_number':11316,'multiline':False]['text':'   |               ++ <space for Frame>','line_number':11317,'multiline':False]['text':'   |                       ++ <inbound args>','line_number':11318,'multiline':False]['text':'   |                                       |','line_number':11319,'multiline':False]['text':'   Lowest Addr                             Highest Addr','line_number':11320,'multiline':False]['text':'','line_number':11321,'multiline':False]['text':' The caller owns the resulting stackmap.  This assumes a grow-down stack.','line_number':11322,'multiline':False]['text':'','line_number':11323,'multiline':False]['text':' For non-debug builds, if the stackmap would contain no pointers, no','line_number':11324,'multiline':False]['text':' stackmap is created, and nullptr is returned.  For a debug build, a','line_number':11325,'multiline':False]['text':' stackmap is always created and returned.','line_number':11326,'multiline':False]['text':' Ensure this is defined on all return paths.','line_number':11332,'multiline':False]['text':' The size of the wasm::Frame itself.','line_number':11335,'multiline':False]['text':' This is the number of bytes in the general spill area, below the Frame.','line_number':11338,'multiline':False]['text':' This is the number of bytes in the general spill area, the Frame, and the','line_number':11341,'multiline':False]['text':' incoming args, but not including any trap (register dump) area.','line_number':11342,'multiline':False]['text':' This is the total number of bytes covered by the map.','line_number':11346,'multiline':False]['text':' Create the stackmap initially in this vector.  Since most frames will','line_number':11351,'multiline':False]['text':' contain 128 or fewer words, heap allocation is avoided in the majority of','line_number':11352,'multiline':False]['text':' cases.  vec[0] is for the lowest address in the map, vec[N-1] is for the','line_number':11353,'multiline':False]['text':' highest address in the map.','line_number':11354,'multiline':False]['text':' Keep track of whether we've actually seen any refs.','line_number':11357,'multiline':False]['text':' REG DUMP AREA, if any.','line_number':11360,'multiline':False]['text':' Deal with roots in registers.  This can only happen for safepoints','line_number':11364,'multiline':False]['text':' associated with a trap.  For safepoints associated with a call, we','line_number':11365,'multiline':False]['text':' don't expect to have any live values in registers, hence no roots in','line_number':11366,'multiline':False]['text':' registers.','line_number':11367,'multiline':False]['text':' If this doesn't hold, the associated register wasn't saved by','line_number':11376,'multiline':False]['text':' the trap exit stub.  Better to crash now than much later, in','line_number':11377,'multiline':False]['text':' some obscure place, and possibly with security consequences.','line_number':11378,'multiline':False]['text':' offsetFromTop is an offset in words down from the highest','line_number':11381,'multiline':False]['text':' address in the exit stub save area.  Switch it around to be an','line_number':11382,'multiline':False]['text':' offset up from the bottom of the (integer register) save area.','line_number':11383,'multiline':False]['text':' This map is associated with a call instruction.  We expect there to be','line_number':11390,'multiline':False]['text':' no live ref-carrying registers, and if there are we're in deep trouble.','line_number':11391,'multiline':False]['text':' BODY (GENERAL SPILL) AREA and FRAME and INCOMING ARGS','line_number':11395,'multiline':False]['text':' Deal with roots on the stack.','line_number':11396,'multiline':False]['text':' The following needs to correspond with JitFrameLayout::slotRef','line_number':11403,'multiline':False]['text':' gcSlot.stack == 0 means the slot is in the args area','line_number':11404,'multiline':False]['text':' It's a slot in the body allocation, so .slot is interpreted','line_number':11406,'multiline':False]['text':' as an index downwards from the Frame*','line_number':11407,'multiline':False]['text':' It's an argument slot','line_number':11413,'multiline':False]['text':' We saw no references, and this is a non-debug build, so don't bother','line_number':11423,'multiline':False]['text':' building the stackmap.','line_number':11424,'multiline':False]['text':' Convert vec into a wasm::StackMap.','line_number':11430,'multiline':False]['text':' Record in the map, how far down from the highest address the Frame* is.','line_number':11441,'multiline':False]['text':' Take the opportunity to check that we haven't marked any part of the','line_number':11442,'multiline':False]['text':' Frame itself as a pointer.','line_number':11443,'multiline':False]['text':' In debug builds, we'll always have a stack map, even if there are no','line_number':11489,'multiline':False]['text':' refs to track.','line_number':11490,'multiline':False]['text':' Note the end of the inline code and start of the OOL code.','line_number':11511,'multiline':False]['text':' Convert the safepoints to stackmaps and add them to our running','line_number':11537,'multiline':False]['text':' collection thereof.','line_number':11538,'multiline':False]['text':' In debug builds, we'll always have a stack map.','line_number':11547,'multiline':False]['text':' Initialize native code table with an entry to the start of','line_number':11568,'multiline':False]['text':' top-level script.','line_number':11569,'multiline':False]['text':' Reset native => bytecode map table with top-level script and startPc.','line_number':11589,'multiline':False]['text':' Reset native => bytecode map table with top-level script and startPc.','line_number':11598,'multiline':False]['text':' Reset native => bytecode map table with top-level script and startPc.','line_number':11607,'multiline':False]['text':' Note the end of the inline code and start of the OOL code.','line_number':11614,'multiline':False]['text':' native => bytecode entries for OOL code will be added','line_number':11618,'multiline':False]['text':' by CodeGeneratorShared::generateOutOfLineCode','line_number':11619,'multiline':False]['text':' Add terminal entry.','line_number':11624,'multiline':False]['text':' Dump Native to bytecode entries to spew.','line_number':11629,'multiline':False]['text':' TODO(post-Warp): This matches FinishCompilation and is necessary to','line_number':11650,'multiline':False]['text':' ensure in-progress compilations are canceled when an inlined functon','line_number':11651,'multiline':False]['text':' becomes a debuggee. See the breakpoint-14.js jit-test.','line_number':11652,'multiline':False]['text':' When TI is gone, try to clean this up by moving AddInlinedCompilations to','line_number':11653,'multiline':False]['text':' WarpOracle so that we can handle this as part of addPendingRecompile','line_number':11654,'multiline':False]['text':' instead of requiring this separate check.','line_number':11655,'multiline':False]['text':' We cancel off-thread Ion compilations in a few places during GC, but if','line_number':11671,'multiline':False]['text':' this compilation was performed off-thread it will already have been','line_number':11672,'multiline':False]['text':' removed from the relevant lists by this point. Don't allow GC here.','line_number':11673,'multiline':False]['text':' Perform any read barriers which were skipped while compiling the','line_number':11679,'multiline':False]['text':' script, which may have happened off-thread.','line_number':11680,'multiline':False]['text':' Check to make sure we didn't have a mid-build invalidation. If so, we','line_number':11689,'multiline':False]['text':' will trickle to jit::Compile() and return Method_Skipped.','line_number':11690,'multiline':False]['text':' Record constraints. If an error occured, returns false and potentially','line_number':11700,'multiline':False]['text':' prevent future compilations. Otherwise, if an invalidation occured, then','line_number':11701,'multiline':False]['text':' skip the current compilation.','line_number':11702,'multiline':False]['text':' If an inlined script is invalidated (for example, by attaching','line_number':11705,'multiline':False]['text':' a debugger), we must also invalidate the parent IonScript.','line_number':11706,'multiline':False]['text':' IonMonkey could have inferred better type information during','line_number':11714,'multiline':False]['text':' compilation. Since adding the new information to the actual type','line_number':11715,'multiline':False]['text':' information can reset the usecount, increase it back to what it was','line_number':11716,'multiline':False]['text':' before.','line_number':11717,'multiline':False]['text':' We encode safepoints after the OSI-point offsets have been determined.','line_number':11728,'multiline':False]['text':' Use js_free instead of IonScript::Destroy: the cache list is still','line_number':11749,'multiline':False]['text':' uninitialized.','line_number':11750,'multiline':False]['text':' Encode native to bytecode map if profiling is enabled.','line_number':11760,'multiline':False]['text':' Generate native-to-bytecode main table.','line_number':11762,'multiline':False]['text':' Construct the IonEntry that will go into the global table.','line_number':11771,'multiline':False]['text':' nativeToBytecodeScriptList_ is no longer needed.','line_number':11780,'multiline':False]['text':' Add entry to the global table.','line_number':11783,'multiline':False]['text':' Memory may have been allocated for the entry.','line_number':11787,'multiline':False]['text':' Mark the jitcode as having a bytecode map.','line_number':11792,'multiline':False]['text':' Add a dumy jitcodeGlobalTable entry.','line_number':11795,'multiline':False]['text':' Add entry to the global table.','line_number':11799,'multiline':False]['text':' Memory may have been allocated for the entry.','line_number':11803,'multiline':False]['text':' Mark the jitcode as having a bytecode map.','line_number':11808,'multiline':False]['text':' If the Gecko Profiler is enabled, mark IonScript as having been','line_number':11814,'multiline':False]['text':' instrumented accordingly.','line_number':11815,'multiline':False]['text':' for generating inline caches during the execution.','line_number':11867,'multiline':False]['text':' for marking during GC.','line_number':11906,'multiline':False]['text':' for reconvering from an Ion Frame.','line_number':11914,'multiline':False]['text':' Attach any generated script counts to the script.','line_number':11942,'multiline':False]['text':' WARNING: Code after this point must be infallible!','line_number':11947,'multiline':False]['text':' Copy the list of nursery objects. Note that the store buffer can add','line_number':11949,'multiline':False]['text':' HeapPtr edges that must be cleared in IonScript::Destroy. See the','line_number':11950,'multiline':False]['text':' infallibility warning above.','line_number':11951,'multiline':False]['text':' Transfer ownership of the IonScript to the JitScript. At this point enough','line_number':11957,'multiline':False]['text':' of the IonScript must be initialized for IonScript::Destroy to work.','line_number':11958,'multiline':False]['text':' An out-of-line path to convert a boxed int32 to either a float or double.','line_number':11965,'multiline':False]['text':' Out-of-line path to convert int32 to double or bailout','line_number':11986,'multiline':False]['text':' if this instruction is fallible.','line_number':11987,'multiline':False]['text':' Perform the store. No pre-barrier required since this is a new','line_number':12155,'multiline':False]['text':' initialization.','line_number':12156,'multiline':False]['text':' Perform the store. No pre-barrier required since this is a new','line_number':12200,'multiline':False]['text':' initialization.','line_number':12201,'multiline':False]['text':' The input may be a callable object (result is "function") or','line_number':12469,'multiline':False]['text':' may emulate undefined (result is "undefined"). Use an OOL path.','line_number':12470,'multiline':False]['text':' Generate checks for previously observed types first.','line_number':12510,'multiline':False]['text':' The TypeDataList is sorted by descending frequency.','line_number':12511,'multiline':False]['text':' Unify number types.','line_number':12515,'multiline':False]['text':' Generate checks for remaining types.','line_number':12526,'multiline':False]['text':' We can skip the check for the last remaining type.','line_number':12529,'multiline':False]['text':' If the index is out of bounds, load |undefined|. Otherwise, load the','line_number':12646,'multiline':False]['text':' value.','line_number':12647,'multiline':False]['text':' If a hole check is needed, and the value wasn't a hole, we're done.','line_number':12653,'multiline':False]['text':' Otherwise, we'll load undefined.','line_number':12654,'multiline':False]['text':' Directly load if no byte swap is needed and the platform supports unaligned','line_number':12735,'multiline':False]['text':' accesses for floating point registers.','line_number':12736,'multiline':False]['text':' Load the value into a gpr register.','line_number':12753,'multiline':False]['text':' Swap the bytes in the loaded value.','line_number':12783,'multiline':False]['text':' Move the value into the output register.','line_number':12824,'multiline':False]['text':' Bail out if the value doesn't fit into a signed int32 value. This','line_number':12834,'multiline':False]['text':' is what allows MLoadDataViewElement to have a type() of','line_number':12835,'multiline':False]['text':' MIRType::Int32 for UInt32 array loads.','line_number':12836,'multiline':False]['text':' Load the length.','line_number':12865,'multiline':False]['text':' Load undefined if index >= length.','line_number':12871,'multiline':False]['text':' Load the elements vector.','line_number':12875,'multiline':False]['text':' On x86 there are not enough registers. In that case reuse the output's','line_number':12903,'multiline':False]['text':' type register as temporary.','line_number':12904,'multiline':False]['text':' Load the length.','line_number':12913,'multiline':False]['text':' Load undefined if index >= length.','line_number':12918,'multiline':False]['text':' Load the elements vector.','line_number':12922,'multiline':False]['text':' Register an entry in the switch table.','line_number':12983,'multiline':False]['text':' Register the code, to which the table will jump to.','line_number':12992,'multiline':False]['text':' Bind the address of the jump table and reserve the space for code','line_number':13023,'multiline':False]['text':' pointers to jump in the newly generated code.','line_number':13024,'multiline':False]['text':' Register all reserved pointers of the jump table to target labels. The','line_number':13033,'multiline':False]['text':' entries of the jump table need to be absolute addresses and thus must be','line_number':13034,'multiline':False]['text':' patched after codegen is finished.','line_number':13035,'multiline':False]['text':' Directly store if no byte swap is needed and the platform supports','line_number':13116,'multiline':False]['text':' unaligned accesses for floating point registers.','line_number':13117,'multiline':False]['text':' Load the value into a gpr register.','line_number':13128,'multiline':False]['text':' Swap the bytes in the loaded value.','line_number':13164,'multiline':False]['text':' Store the value into the destination.','line_number':13201,'multiline':False]['text':' This path implements fun_hasInstance when the function's prototype is','line_number':13407,'multiline':False]['text':' known to be prototypeObject.','line_number':13408,'multiline':False]['text':' If the lhs is a primitive, the result is false.','line_number':13413,'multiline':False]['text':' Crawl the lhs's prototype chain in a loop to search for prototypeObject.','line_number':13435,'multiline':False]['text':' This follows the main loop of js::IsPrototypeOf, though additionally breaks','line_number':13436,'multiline':False]['text':' out of the loop on Proxy::LazyProto.','line_number':13437,'multiline':False]['text':' Load the lhs's prototype.','line_number':13439,'multiline':False]['text':' Test for the target prototype object.','line_number':13447,'multiline':False]['text':' Test for nullptr or Proxy::LazyProto','line_number':13462,'multiline':False]['text':' Load the current object's prototype.','line_number':13465,'multiline':False]['text':' Make a VM call if an object with a lazy proto was found on the prototype','line_number':13471,'multiline':False]['text':' chain. This currently occurs only for cross compartment wrappers, which','line_number':13472,'multiline':False]['text':' we do not expect to be compared with non-wrapper functions from this','line_number':13473,'multiline':False]['text':' compartment. Otherwise, we stopped on a nullptr prototype and the output','line_number':13474,'multiline':False]['text':' register is already correct.','line_number':13475,'multiline':False]['text':' Regenerate the original lhs object for the VM call.','line_number':13487,'multiline':False]['text':' The Lowering ensures that RHS is an object, and that LHS is a value.','line_number':13512,'multiline':False]['text':' It's a bit annoying to redo these slot calculations, which duplcate','line_number':13532,'multiline':False]['text':' LSlots and a few other things like that, but I'm not sure there's a','line_number':13533,'multiline':False]['text':' way to reuse those here.','line_number':13534,'multiline':False]['text':'','line_number':13535,'multiline':False]['text':' If this ever gets fixed to work with proxies (by not assuming that','line_number':13536,'multiline':False]['text':' reserved slot indices, which is what domMemberSlotIndex() returns,','line_number':13537,'multiline':False]['text':' match fixed slot indices), we can reenable MGetDOMProperty for','line_number':13538,'multiline':False]['text':' proxies in IonBuilder.','line_number':13539,'multiline':False]['text':' It's a dynamic slot.','line_number':13544,'multiline':False]['text':' Use PrivateReg as a scratch register for the slots pointer.','line_number':13546,'multiline':False]['text':' Make space for the outparam.  Pre-initialize it to UndefinedValue so we','line_number':13559,'multiline':False]['text':' can trace it at GC time.','line_number':13560,'multiline':False]['text':' We pass the pointer to our out param as an instance of','line_number':13562,'multiline':False]['text':' JSJitGetterCallArgs, since on the binary level it's the same thing.','line_number':13563,'multiline':False]['text':' Rooting will happen at GC time.','line_number':13571,'multiline':False]['text':' We use JSContextReg as scratch register here.','line_number':13576,'multiline':False]['text':' Switch back to the current realm if needed. Note: if the getter threw an','line_number':13609,'multiline':False]['text':' exception, the exception handler will do this.','line_number':13610,'multiline':False]['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':13617,'multiline':False]['text':' execution from returning any private data.','line_number':13618,'multiline':False]['text':' It's simpler to duplicate visitLoadFixedSlotV here than it is to try to','line_number':13631,'multiline':False]['text':' use an LLoadFixedSlotV or some subclass of it for this case: that would','line_number':13632,'multiline':False]['text':' require us to have MGetDOMMember inherit from MLoadFixedSlot, and then','line_number':13633,'multiline':False]['text':' we'd have to duplicate a bunch of stuff we now get for free from','line_number':13634,'multiline':False]['text':' MGetDOMProperty.','line_number':13635,'multiline':False]['text':'','line_number':13636,'multiline':False]['text':' If this ever gets fixed to work with proxies (by not assuming that','line_number':13637,'multiline':False]['text':' reserved slot indices, which is what domMemberSlotIndex() returns,','line_number':13638,'multiline':False]['text':' match fixed slot indices), we can reenable MGetDOMMember for','line_number':13639,'multiline':False]['text':' proxies in IonBuilder.','line_number':13640,'multiline':False]['text':' It's simpler to duplicate visitLoadFixedSlotT here than it is to try to','line_number':13650,'multiline':False]['text':' use an LLoadFixedSlotT or some subclass of it for this case: that would','line_number':13651,'multiline':False]['text':' require us to have MGetDOMMember inherit from MLoadFixedSlot, and then','line_number':13652,'multiline':False]['text':' we'd have to duplicate a bunch of stuff we now get for free from','line_number':13653,'multiline':False]['text':' MGetDOMProperty.','line_number':13654,'multiline':False]['text':'','line_number':13655,'multiline':False]['text':' If this ever gets fixed to work with proxies (by not assuming that','line_number':13656,'multiline':False]['text':' reserved slot indices, which is what domMemberSlotIndex() returns,','line_number':13657,'multiline':False]['text':' match fixed slot indices), we can reenable MGetDOMMember for','line_number':13658,'multiline':False]['text':' proxies in IonBuilder.','line_number':13659,'multiline':False]['text':' Push the argument. Rooting will happen at GC time.','line_number':13679,'multiline':False]['text':' We pass the pointer to our out param as an instance of','line_number':13682,'multiline':False]['text':' JSJitGetterCallArgs, since on the binary level it's the same thing.','line_number':13683,'multiline':False]['text':' Rooting will happen at GC time.','line_number':13691,'multiline':False]['text':' We use JSContextReg as scratch register here.','line_number':13696,'multiline':False]['text':' Switch back to the current realm if needed. Note: if the setter threw an','line_number':13719,'multiline':False]['text':' exception, the exception handler will do this.','line_number':13720,'multiline':False]['text':' Load the ExpandoAndGeneration* from the PrivateValue.','line_number':13761,'multiline':False]['text':' Load expandoAndGeneration->expando into the output Value register.','line_number':13767,'multiline':False]['text':' The expando object is not used in this case, so we don't need Spectre','line_number':13782,'multiline':False]['text':' mitigations.','line_number':13783,'multiline':False]['text':' Branch to OOL path if it's a proxy.','line_number':13909,'multiline':False]['text':' The "outermost" JSScript means the script that we are compiling','line_number':14023,'multiline':False]['text':' basically; this is not always the script associated with the','line_number':14024,'multiline':False]['text':' current basic block, which might be an inlined script.','line_number':14025,'multiline':False]['text':' The current JSScript means the script for the current','line_number':14033,'multiline':False]['text':' basic block. This may be an inlined script.','line_number':14034,'multiline':False]['text':' branchTestObjClass may zero the object register on speculative paths','line_number':14053,'multiline':False]['text':' (we should have a defineReuseInput allocation in this case).','line_number':14054,'multiline':False]['text':' Can't return null-return here, so bail.','line_number':14062,'multiline':False]['text':' Don't emit a jump to the return label if this is the last block.','line_number':14085,'multiline':False]['text':' Don't emit a jump to the return label if this is the last block.','line_number':14092,'multiline':False]['text':' Don't emit a jump to the return label if this is the last block.','line_number':14099,'multiline':False]['text':' Check the lower bound.','line_number':14107,'multiline':False]['text':' Check the upper bound.','line_number':14123,'multiline':False]['text':' For r->canHaveFractionalPart(), r->canBeNegativeZero(), and','line_number':14139,'multiline':False]['text':' r->exponent(), there's nothing to check, because if we ended up in the','line_number':14140,'multiline':False]['text':' integer range checking code, the value is already in an integer register','line_number':14141,'multiline':False]['text':' in the integer range.','line_number':14142,'multiline':False]['text':' Check the lower bound.','line_number':14147,'multiline':False]['text':' Check the upper bound.','line_number':14160,'multiline':False]['text':' This code does not yet check r->canHaveFractionalPart(). This would require','line_number':14173,'multiline':False]['text':' new assembler interfaces to make rounding instructions available.','line_number':14174,'multiline':False]['text':' First, test for being equal to 0.0, which also includes -0.0.','line_number':14179,'multiline':False]['text':' The easiest way to distinguish -0.0 from 0.0 is that 1.0/-0.0 is','line_number':14184,'multiline':False]['text':' -Infinity instead of Infinity.','line_number':14185,'multiline':False]['text':' Check the bounds implied by the maximum exponent.','line_number':14197,'multiline':False]['text':' If we think the value can't be NaN, check that it isn't.','line_number':14214,'multiline':False]['text':' If we think the value also can't be an infinity, check that it isn't.','line_number':14220,'multiline':False]['text':' Note that masm.framePushed() doesn't include the register dump area.','line_number':14362,'multiline':False]['text':' That will be taken into account when the StackMap is created from the','line_number':14363,'multiline':False]['text':' LSafepoint.','line_number':14364,'multiline':False]['text':' 64-bit bounds checks are used only on 64-bit systems.','line_number':14394,'multiline':False]['text':' The code depends on the JitScript* not being discarded without also','line_number':14433,'multiline':False]['text':' invalidating Ion code. Assert this.','line_number':14434,'multiline':False]['text':' if (isConstructing) output = argv[Max(numActualArgs, numFormalArgs)]','line_number':14508,'multiline':False]['text':' else output = undefined','line_number':14542,'multiline':False]['text':' Compute the bound function length: Max(0, target.length - argCount).','line_number':14799,'multiline':False]['text':' Call into the VM if the target's name atom contains the bound','line_number':14814,'multiline':False]['text':' function prefix.','line_number':14815,'multiline':False]['text':' Bound functions reuse HAS_GUESSED_ATOM for','line_number':14820,'multiline':False]['text':' HAS_BOUND_FUNCTION_NAME_PREFIX, so skip the guessed atom check below.','line_number':14821,'multiline':False]['text':' An absent name property defaults to the empty string.','line_number':14839,'multiline':False]['text':' Set the BOUND_FN flag and, if the target is a constructor, the','line_number':14847,'multiline':False]['text':' CONSTRUCTOR flag.','line_number':14848,'multiline':False]['text':' Take the slow path if the target is not a JSFunction.','line_number':14882,'multiline':False]['text':' Take the slow path if we'd need to adjust the [[Prototype]].','line_number':14886,'multiline':False]['text':' Get the function flags.','line_number':14891,'multiline':False]['text':' Functions with a SelfHostedLazyScript must be compiled with the slow-path','line_number':14894,'multiline':False]['text':' before the function length is known. If the length or name property is','line_number':14895,'multiline':False]['text':' resolved, it might be shadowed.','line_number':14896,'multiline':False]['text':' Store the bound function's length into the extended slot.','line_number':14903,'multiline':False]['text':' Store the target's name atom in the bound function as is.','line_number':14907,'multiline':False]['text':' Update the bound function's flags.','line_number':14912,'multiline':False]['text':' Call into the VM for lazy prototypes.','line_number':14953,'multiline':False]['text':' We shouldn't encounter a null or lazy proto.','line_number':14979,'multiline':False]['text':' Load prototype of callee','line_number':15009,'multiline':False]['text':' We won't encounter a lazy proto, because |callee| is guaranteed to be a','line_number':15013,'multiline':False]['text':' JSFunction and only proxy objects can have a lazy proto.','line_number':15014,'multiline':False]['text':' Box prototype and return','line_number':15026,'multiline':False]['text':' If both lhs and rhs are numbers, can't use tag comparison to do inequality','line_number':15070,'multiline':False]['text':' comparison','line_number':15071,'multiline':False]['text':' Load obj->elements.','line_number':15135,'multiline':False]['text':' Ensure index >= initLength.','line_number':15138,'multiline':False]['text':' Load obj->elements.','line_number':15153,'multiline':False]['text':' If length is writable, branch to &success.  All indices are writable.','line_number':15158,'multiline':False]['text':' Otherwise, ensure index is in bounds.','line_number':15164,'multiline':False]['text':' Load the BigInt value as an int64.','line_number':15270,'multiline':False]['text':' Create a new BigInt when the input exceeds the int64 range.','line_number':15273,'multiline':False]['text':' And create a new BigInt when the value and the BigInt have different signs.','line_number':15277,'multiline':False]['text':' Load the absolute value of the first digit.','line_number':15302,'multiline':False]['text':' If the absolute value exceeds the int32 range, create a new BigInt.','line_number':15305,'multiline':False]['text':' Also create a new BigInt if we have more than one digit.','line_number':15308,'multiline':False]['text':' |temp| stores the absolute value, negate it when the sign flag is set.','line_number':15314,'multiline':False]['text':' Load the BigInt value as an uint64.','line_number':15347,'multiline':False]['text':' Create a new BigInt when the input exceeds the uint64 range.','line_number':15350,'multiline':False]['text':' And create a new BigInt when the input has the sign flag set.','line_number':15354,'multiline':False]['text':' Load the absolute value of the first digit.','line_number':15373,'multiline':False]['text':' If the absolute value exceeds the uint32 range, create a new BigInt.','line_number':15376,'multiline':False]['text':' Also create a new BigInt if we have more than one digit.','line_number':15381,'multiline':False]['text':' And create a new BigInt when the input has the sign flag set.','line_number':15385,'multiline':False]['text':' |temp| stores the absolute value, negate it when the sign flag is set.','line_number':15390,'multiline':False]['text':' AnyRef is boxed on the JS side, so passed as a pointer here.','line_number':15429,'multiline':False]['text':' The wasm stubs layer unboxes anything that needs to be unboxed','line_number':15503,'multiline':False]['text':' and leaves it in a Value.  A FuncRef/EqRef we could in principle','line_number':15504,'multiline':False]['text':' leave it as a raw object pointer but for now it complicates the','line_number':15505,'multiline':False]['text':' API to do so.','line_number':15506,'multiline':False]['text':' Add the instance object to the constant pool, so it is transferred to','line_number':15525,'multiline':False]['text':' the owning IonScript and so that it gets traced as long as the IonScript','line_number':15526,'multiline':False]['text':' lives.','line_number':15527,'multiline':False]['text':' Simple codegen for platforms where some values may be stack allocated,','line_number':15549,'multiline':False]['text':' compare types and instruction result are limited to i32, and the "true" input','line_number':15550,'multiline':False]['text':' is reused for the output.  See ditto code in Lowering-shared.cpp.','line_number':15551,'multiline':False]['text':' On arm32, this is the only one of the four cases that can actually','line_number':15570,'multiline':False]['text':' happen, since |rhs| and |falseExpr| are marked useAny() by','line_number':15571,'multiline':False]['text':' LIRGenerator::visitWasmSelect, and useAny() means "register only"','line_number':15572,'multiline':False]['text':' on arm32.','line_number':15573,'multiline':False]['text':' See the definition of AnyRef for a discussion of pointer representation.','line_number':15616,'multiline':False]['text':' See the definition of AnyRef for a discussion of pointer representation.','line_number':15621,'multiline':False]['text':' See the definition of AnyRef for a discussion of pointer representation.','line_number':15631,'multiline':False]['text':' namespace jit','line_number':15640,'multiline':False]['text':' namespace js','line_number':15641,'multiline':False]