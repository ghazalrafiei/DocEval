['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ReadableStream controller classes and functions. ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':12,'multiline':False]['text':' uint32_t','line_number':14,'multiline':False]['text':' js::ReadableStream','line_number':16,'multiline':False]['text':' js::StreamController','line_number':17,'multiline':False]['text':' JSClass, js::ClassSpec','line_number':18,'multiline':False]['text':' JS::Handle','line_number':19,'multiline':False]['text':' JS::ReadableStreamUnderlyingSource','line_number':20,'multiline':False]['text':' JS::Value, JS::{Number,Object,Private,Undefined}Value, JS::UndefinedHandleValue','line_number':21,'multiline':False]['text':' js::ListObject','line_number':22,'multiline':False]['text':' js::NativeObject','line_number':23,'multiline':False]['text':'*
   * Memory layout for ReadableStream controllers, starting after the slots
   * reserved for queue container usage.
   *
   * Storage of the internal slots listed in the standard is fairly
   * straightforward except for [[pullAlgorithm]] and [[cancelAlgorithm]].
   * These algorithms are not stored as JSFunction objects. Rather, there are
   * three cases:
   *
   * -   Streams created with `new ReadableStream`: The methods are stored
   *     in Slot_PullMethod and Slot_CancelMethod. The underlying source
   *     object (`this` for these methods) is in Slot_UnderlyingSource.
   *
   * -   External source streams. Slot_UnderlyingSource is a PrivateValue
   *     pointing to the JS::ReadableStreamUnderlyingSource object. The
   *     algorithms are implemented using the .pull() and .cancel() methods
   *     of that object. Slot_Pull/CancelMethod are undefined.
   *
   * -   Tee streams. Slot_UnderlyingSource is a TeeState object. The
   *     pull/cancel algorithms are implemented as separate functions in
   *     Stream.cpp. Slot_Pull/CancelMethod are undefined.
   *
   * UnderlyingSource, PullMethod, and CancelMethod can be wrappers to objects
   * in other compartments.
   *
   * StrategyHWM and Flags are both primitive (numeric) values.
   ','line_number':31,'multiline':True]['text':'*
   * Memory layout for ReadableStreamDefaultControllers, starting after the
   * slots shared among all types of controllers.
   *
   * StrategySize is treated as an opaque value when stored. The only use site
   * ensures that it's wrapped into the current cx compartment.
   ','line_number':159,'multiline':True]['text':'*
   * Memory layout for ReadableByteStreamControllers, starting after the
   * slots shared among all types of controllers.
   *
   * PendingPullIntos is guaranteed to be in the same compartment as the
   * controller, but might contain wrappers for objects from other
   * compartments.
   *
   * AutoAllocateSize is a primitive (numeric) value.
   ','line_number':186,'multiline':True]['text':' namespace js','line_number':243,'multiline':False]['text':' namespace js','line_number':264,'multiline':False]['text':' builtin_streams_ReadableStreamController_h','line_number':266,'multiline':False]