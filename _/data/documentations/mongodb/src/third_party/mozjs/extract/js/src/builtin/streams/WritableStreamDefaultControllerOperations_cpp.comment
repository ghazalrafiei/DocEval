['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Writable stream default controller abstract operations. ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':11,'multiline':False]['text':' JS_ReportErrorASCII','line_number':13,'multiline':False]['text':' js::CreateAlgorithmFromUnderlyingMethod, js::InvokeOrNoop','line_number':15,'multiline':False]['text':' js::{EnqueueValueWithSize,QueueIsEmpty,ResetQueue}','line_number':16,'multiline':False]['text':' js::WritableStream','line_number':17,'multiline':False]['text':' js::WritableStreamDefaultController','line_number':18,'multiline':False]['text':' js::WritableStream{CloseQueuedOrInFlight,DealWithRejection,{Start,Finish}Erroring,UpdateBackpressure,Mark{Close,FirstWrite}RequestInFlight}','line_number':19,'multiline':False]['text':' JS::CallArgs{,FromVp}','line_number':20,'multiline':False]['text':' JS::AddPromiseReactions','line_number':21,'multiline':False]['text':' JS::Handle, JS::Rooted','line_number':22,'multiline':False]['text':' JS::{,Int32,Magic,Object}Value, JS::UndefinedHandleValue, JS_WRITABLESTREAM_CLOSE_RECORD','line_number':23,'multiline':False]['text':' JS::Compartment','line_number':24,'multiline':False]['text':' JSContext','line_number':25,'multiline':False]['text':' JSObject','line_number':26,'multiline':False]['text':' js::ListObject','line_number':27,'multiline':False]['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':28,'multiline':False]['text':' JSAtomState','line_number':29,'multiline':False]['text':' js::TargetFromHandler','line_number':31,'multiline':False]['text':' js::PromiseCall','line_number':32,'multiline':False]['text':' js::PeekQueueValue','line_number':33,'multiline':False]['text':' JS::Compartment::wrap','line_number':34,'multiline':False]['text':' JSContext::check','line_number':35,'multiline':False]['text':' js::IsCallable, js::NewBuiltinClassInstance, js::NewObjectWithClassProto','line_number':36,'multiline':False]['text':' js::AutoRealm','line_number':37,'multiline':False]['text':'** 4.7. Writable stream default controller internal methods **************','line_number':64,'multiline':True]['text':'*
 * Streams spec, 4.7.5.1.
 *      [[AbortSteps]]( reason )
 ','line_number':66,'multiline':True]['text':' Step 1: Let result be the result of performing this.[[abortAlgorithm]],','line_number':75,'multiline':False]['text':'         passing reason.','line_number':76,'multiline':False]['text':' CreateAlgorithmFromUnderlyingMethod(underlyingSink, "abort", 1, « »)','line_number':77,'multiline':False]['text':' CreateAlgorithmFromUnderlyingMethod step 7.','line_number':81,'multiline':False]['text':' CreateAlgorithmFromUnderlyingMethod step 6.c.i-ii.','line_number':87,'multiline':False]['text':' Step 2: Perform ! WritableStreamDefaultControllerClearAlgorithms(this).','line_number':111,'multiline':False]['text':' Step 3: Return result.','line_number':114,'multiline':False]['text':'*
 * Streams spec, 4.7.5.2.
 *      [[ErrorSteps]]()
 ','line_number':118,'multiline':True]['text':' Step 1: Perform ! ResetQueue(this).','line_number':125,'multiline':False]['text':'** 4.8. Writable stream default controller abstract operations ***********','line_number':129,'multiline':True]['text':'*
 * Streams spec, 4.8.2. SetUpWritableStreamDefaultController, step 16:
 *      Upon fulfillment of startPromise, [...]
 ','line_number':135,'multiline':True]['text':' Step a: Assert: stream.[[state]] is "writable" or "erroring".','line_number':145,'multiline':False]['text':' Step b: Set controller.[[started]] to true.','line_number':151,'multiline':False]['text':' Step c: Perform','line_number':154,'multiline':False]['text':'      ! WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller).','line_number':155,'multiline':False]['text':'*
 * Streams spec, 4.8.2. SetUpWritableStreamDefaultController, step 17:
 *      Upon rejection of startPromise with reason r, [...]
 ','line_number':165,'multiline':True]['text':' Step a: Assert: stream.[[state]] is "writable" or "erroring".','line_number':177,'multiline':False]['text':' Step b: Set controller.[[started]] to true.','line_number':180,'multiline':False]['text':' Step c: Perform ! WritableStreamDealWithRejection(stream, r).','line_number':183,'multiline':False]['text':'*
 * Streams spec, 4.8.2.
 *      SetUpWritableStreamDefaultController(stream, controller,
 *          startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,
 *          highWaterMark, sizeAlgorithm )
 *
 * The standard algorithm takes a `controller` argument which must be a new,
 * blank object. This implementation creates a new controller instead.
 *
 * In the spec, four algorithms (startAlgorithm, writeAlgorithm, closeAlgorithm,
 * abortAlgorithm) are passed as arguments to this routine. This implementation
 * passes these "algorithms" as data, using five arguments: sinkAlgorithms,
 * underlyingSink, writeMethod, closeMethod, and abortMethod. The sinkAlgorithms
 * argument tells how to interpret the other three:
 *
 * -   SinkAlgorithms::Script - We're creating a stream from a JS source.  The
 *     caller is `new WritableStream(underlyingSink)` or
 *     `JS::NewWritableDefaultStreamObject`. `underlyingSink` is the sink;
 *     `writeMethod`, `closeMethod`, and `abortMethod` are its .write, .close,
 *     and .abort methods, which the caller has already extracted and
 *     type-checked: each one must be either a callable JS object or undefined.
 *
 *     Script streams use the start/write/close/abort algorithms defined in
 *     4.8.3. SetUpWritableStreamDefaultControllerFromUnderlyingSink, which
 *     call JS methods of the underlyingSink.
 *
 * -   SinkAlgorithms::Transform - We're creating a transform stream.
 *     `underlyingSink` is a Transform object. `writeMethod`, `closeMethod, and
 *     `abortMethod` are undefined.
 *
 *     Transform streams use the write/close/abort algorithms given in
 *     5.3.2 InitializeTransformStream.
 *
 * An additional sizeAlgorithm in the spec is an algorithm used to compute the
 * size of a chunk.  Per MakeSizeAlgorithmFromSizeFunction, we just save the
 * |size| value used to create that algorithm, then -- inline -- perform the
 * requisite algorithm steps.  (Hence the unadorned name |size|.)
 *
 * Note: All arguments must be same-compartment with cx.  WritableStream
 * controllers are always created in the same compartment as the stream.
 ','line_number':192,'multiline':True]['text':' Done elsewhere in the standard: Create the new controller.','line_number':250,'multiline':False]['text':' Step 1: Assert: ! IsWritableStream(stream) is true.','line_number':257,'multiline':False]['text':' (guaranteed by |stream|'s type)','line_number':258,'multiline':False]['text':' Step 2: Assert: stream.[[writableStreamController]] is undefined.','line_number':260,'multiline':False]['text':' Step 3: Set controller.[[controlledWritableStream]] to stream.','line_number':263,'multiline':False]['text':' Step 4: Set stream.[[writableStreamController]] to controller.','line_number':266,'multiline':False]['text':' Step 5: Perform ! ResetQueue(controller).','line_number':269,'multiline':False]['text':' Step 6: Set controller.[[started]] to false.','line_number':274,'multiline':False]['text':' Step 7: Set controller.[[strategySizeAlgorithm]] to sizeAlgorithm.','line_number':278,'multiline':False]['text':' Step 8: Set controller.[[strategyHWM]] to highWaterMark.','line_number':281,'multiline':False]['text':' Step 9: Set controller.[[writeAlgorithm]] to writeAlgorithm.','line_number':284,'multiline':False]['text':' Step 10: Set controller.[[closeAlgorithm]] to closeAlgorithm.','line_number':285,'multiline':False]['text':' Step 11: Set controller.[[abortAlgorithm]] to abortAlgorithm.','line_number':286,'multiline':False]['text':' (In this implementation, all [[*Algorithm]] are determined by the','line_number':287,'multiline':False]['text':' underlyingSink in combination with the corresponding *Method field.)','line_number':288,'multiline':False]['text':' Step 12: Let backpressure be','line_number':294,'multiline':False]['text':'          ! WritableStreamDefaultControllerGetBackpressure(controller).','line_number':295,'multiline':False]['text':' Step 13: Perform ! WritableStreamUpdateBackpressure(stream, backpressure).','line_number':299,'multiline':False]['text':' Step 14: Let startResult be the result of performing startAlgorithm. (This','line_number':304,'multiline':False]['text':'          may throw an exception.)','line_number':305,'multiline':False]['text':' Step 15: Let startPromise be a promise resolved with startResult.','line_number':315,'multiline':False]['text':' Step 16: Upon fulfillment of startPromise,','line_number':322,'multiline':False]['text':'    Assert: stream.[[state]] is "writable" or "erroring".','line_number':323,'multiline':False]['text':'    Set controller.[[started]] to true.','line_number':324,'multiline':False]['text':'  Perform ! WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller).','line_number':325,'multiline':False]['text':' Step 17: Upon rejection of startPromise with reason r,','line_number':326,'multiline':False]['text':'    Assert: stream.[[state]] is "writable" or "erroring".','line_number':327,'multiline':False]['text':'    Set controller.[[started]] to true.','line_number':328,'multiline':False]['text':'    Perform ! WritableStreamDealWithRejection(stream, r).','line_number':329,'multiline':False]['text':'*
 * Streams spec, 4.8.3.
 *      SetUpWritableStreamDefaultControllerFromUnderlyingSink( stream,
 *          underlyingSink, highWaterMark, sizeAlgorithm )
 ','line_number':346,'multiline':True]['text':' Step 1: Assert: underlyingSink is not undefined.','line_number':358,'multiline':False]['text':' Step 2: Let controller be ObjectCreate(the original value of','line_number':361,'multiline':False]['text':'         WritableStreamDefaultController's prototype property).','line_number':362,'multiline':False]['text':' (Deferred to SetUpWritableStreamDefaultController.)','line_number':363,'multiline':False]['text':' Step 3: Let startAlgorithm be the following steps:','line_number':365,'multiline':False]['text':'         a. Return ? InvokeOrNoop(underlyingSink, "start",','line_number':366,'multiline':False]['text':'                                  « controller »).','line_number':367,'multiline':False]['text':' Step 4: Let writeAlgorithm be','line_number':370,'multiline':False]['text':'         ? CreateAlgorithmFromUnderlyingMethod(underlyingSink, "write", 1,','line_number':371,'multiline':False]['text':'                                               « controller »).','line_number':372,'multiline':False]['text':' Step 5: Let closeAlgorithm be','line_number':380,'multiline':False]['text':'         ? CreateAlgorithmFromUnderlyingMethod(underlyingSink, "close", 0,','line_number':381,'multiline':False]['text':'                                               « »).','line_number':382,'multiline':False]['text':' Step 6: Let abortAlgorithm be','line_number':390,'multiline':False]['text':'         ? CreateAlgorithmFromUnderlyingMethod(underlyingSink, "abort", 1,','line_number':391,'multiline':False]['text':'                                               « »).','line_number':392,'multiline':False]['text':' Step 6. Perform ? SetUpWritableStreamDefaultController(stream,','line_number':400,'multiline':False]['text':'             controller, startAlgorithm, writeAlgorithm, closeAlgorithm,','line_number':401,'multiline':False]['text':'             abortAlgorithm, highWaterMark, sizeAlgorithm).','line_number':402,'multiline':False]['text':'*
 * Streams spec, 4.8.4.
 *      WritableStreamDefaultControllerClearAlgorithms ( controller )
 ','line_number':408,'multiline':True]['text':' Note: This operation will be performed multiple times in some edge cases,','line_number':414,'multiline':False]['text':'       so it can't assert that the various algorithms initially haven't been','line_number':415,'multiline':False]['text':'       cleared.','line_number':416,'multiline':False]['text':' Step 1: Set controller.[[writeAlgorithm]] to undefined.','line_number':418,'multiline':False]['text':' Step 2: Set controller.[[closeAlgorithm]] to undefined.','line_number':421,'multiline':False]['text':' Step 3: Set controller.[[abortAlgorithm]] to undefined.','line_number':424,'multiline':False]['text':' Step 4: Set controller.[[strategySizeAlgorithm]] to undefined.','line_number':427,'multiline':False]['text':'*
 * Streams spec, 4.8.5.
 *      WritableStreamDefaultControllerClose ( controller )
 ','line_number':431,'multiline':True]['text':' Step 1: Perform ! EnqueueValueWithSize(controller, "close", 0).','line_number':438,'multiline':False]['text':' Step 2: Perform','line_number':447,'multiline':False]['text':'         ! WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller).','line_number':448,'multiline':False]['text':'*
 * Streams spec, 4.8.6.
 *      WritableStreamDefaultControllerGetChunkSize ( controller, chunk )
 ','line_number':453,'multiline':True]['text':' Step 1: Let returnValue be the result of performing','line_number':462,'multiline':False]['text':'         controller.[[strategySizeAlgorithm]], passing in chunk, and','line_number':463,'multiline':False]['text':'         interpreting the result as an ECMAScript completion value.','line_number':464,'multiline':False]['text':' We don't store a literal [[strategySizeAlgorithm]], only the value that if','line_number':466,'multiline':False]['text':' passed through |MakeSizeAlgorithmFromSizeFunction| wouldn't have triggered','line_number':467,'multiline':False]['text':' an error.  Perform the algorithm that function would return.','line_number':468,'multiline':False]['text':' 6.3.8 step 1: If size is undefined, return an algorithm that returns 1.','line_number':471,'multiline':False]['text':' ...and then from this function...','line_number':472,'multiline':False]['text':' Step 3: Return returnValue.[[Value]].','line_number':473,'multiline':False]['text':' 6.3.8 step 3 (of |MakeSizeAlgorithmFromSizeFunction|):','line_number':491,'multiline':False]['text':'         Return an algorithm that performs the following steps, taking a','line_number':492,'multiline':False]['text':'         chunk argument:','line_number':493,'multiline':False]['text':'     a. Return ? Call(size, undefined, « chunk »).','line_number':494,'multiline':False]['text':' Step 3: (If returnValue is [not] an abrupt completion, )','line_number':499,'multiline':False]['text':'         Return returnValue.[[Value]].  (reordered for readability)','line_number':500,'multiline':False]['text':' Step 2: If returnValue is an abrupt completion,','line_number':506,'multiline':False]['text':' Uncatchable error.  Die immediately without erroring the stream.','line_number':508,'multiline':False]['text':' Step 2.a: Perform','line_number':515,'multiline':False]['text':'           ! WritableStreamDefaultControllerErrorIfNeeded(','line_number':516,'multiline':False]['text':'                 controller, returnValue.[[Value]]).','line_number':517,'multiline':False]['text':' Step 2.b: Return 1.','line_number':523,'multiline':False]['text':'*
 * Streams spec, 4.8.7.
 *      WritableStreamDefaultControllerGetDesiredSize ( controller )
 ','line_number':528,'multiline':True]['text':'*
 * Streams spec, 4.8.8.
 *      WritableStreamDefaultControllerWrite ( controller, chunk, chunkSize )
 ','line_number':537,'multiline':True]['text':' Step 1: Let writeRecord be Record {[[chunk]]: chunk}.','line_number':548,'multiline':False]['text':' Step 2: Let enqueueResult be','line_number':549,'multiline':False]['text':'         EnqueueValueWithSize(controller, writeRecord, chunkSize).','line_number':550,'multiline':False]['text':' Step 3: If enqueueResult is an abrupt completion,','line_number':554,'multiline':False]['text':' Uncatchable error.  Die immediately without erroring the stream.','line_number':558,'multiline':False]['text':' Step 3.a: Perform ! WritableStreamDefaultControllerErrorIfNeeded(','line_number':565,'multiline':False]['text':'                 controller, enqueueResult.[[Value]]).','line_number':566,'multiline':False]['text':' Step 3.b: Return.','line_number':567,'multiline':False]['text':' Step 4: Let stream be controller.[[controlledWritableStream]].','line_number':572,'multiline':False]['text':' Step 5: If ! WritableStreamCloseQueuedOrInFlight(stream) is false and','line_number':575,'multiline':False]['text':'         stream.[[state]] is "writable",','line_number':576,'multiline':False]['text':' Step 5.a: Let backpressure be','line_number':579,'multiline':False]['text':'           ! WritableStreamDefaultControllerGetBackpressure(controller).','line_number':580,'multiline':False]['text':' Step 5.b: Perform','line_number':584,'multiline':False]['text':'           ! WritableStreamUpdateBackpressure(stream, backpressure).','line_number':585,'multiline':False]['text':' Step 6: Perform','line_number':591,'multiline':False]['text':'         ! WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller).','line_number':592,'multiline':False]['text':'*
 * Streams spec, 4.8.9.
 *      WritableStreamDefaultControllerAdvanceQueueIfNeeded ( controller )
 ','line_number':601,'multiline':True]['text':' Step 2: If controller.[[started]] is false, return.','line_number':608,'multiline':False]['text':' Step 1: Let stream be controller.[[controlledWritableStream]].','line_number':613,'multiline':False]['text':' Step 3: If stream.[[inFlightWriteRequest]] is not undefined, return.','line_number':616,'multiline':False]['text':' Step 4: Let state be stream.[[state]].','line_number':621,'multiline':False]['text':' Step 5: Assert: state is not "closed" or "errored".','line_number':622,'multiline':False]['text':' Step 6: If state is "erroring",','line_number':623,'multiline':False]['text':' Step 6a: Perform ! WritableStreamFinishErroring(stream).','line_number':627,'multiline':False]['text':' Step 6b: Return.','line_number':628,'multiline':False]['text':' Step 7: If controller.[[queue]] is empty, return.','line_number':632,'multiline':False]['text':' Step 8: Let writeRecord be ! PeekQueueValue(controller).','line_number':633,'multiline':False]['text':' Step 9: If writeRecord is "close", perform','line_number':634,'multiline':False]['text':'         ! WritableStreamDefaultControllerProcessClose(controller).','line_number':635,'multiline':False]['text':' Step 10: Otherwise, perform','line_number':636,'multiline':False]['text':'          ! WritableStreamDefaultControllerProcessWrite(','line_number':637,'multiline':False]['text':'              controller, writeRecord.[[chunk]]).','line_number':638,'multiline':False]['text':'*
 * Streams spec, 4.8.10.
 *      WritableStreamDefaultControllerErrorIfNeeded ( controller, error )
 ','line_number':643,'multiline':True]['text':' Step 1: If controller.[[controlledWritableStream]].[[state]] is "writable",','line_number':652,'multiline':False]['text':'         perform ! WritableStreamDefaultControllerError(controller, error).','line_number':653,'multiline':False]['text':' 4.8.11 step 5: Let sinkClosePromise be the result of performing','line_number':663,'multiline':False]['text':'                controller.[[closeAlgorithm]].','line_number':664,'multiline':False]['text':' 4.8.3 step 5: Let closeAlgorithm be','line_number':668,'multiline':False]['text':'               ? CreateAlgorithmFromUnderlyingMethod(underlyingSink,','line_number':669,'multiline':False]['text':'                                                     "close", 0, « »).','line_number':670,'multiline':False]['text':' Step 1: Assert: underlyingObject is not undefined.','line_number':672,'multiline':False]['text':' Step 2: Assert: ! IsPropertyKey(methodName) is true (implicit).','line_number':673,'multiline':False]['text':' Step 3: Assert: algoArgCount is 0 or 1 (omitted).','line_number':674,'multiline':False]['text':' Step 4: Assert: extraArgs is a List (omitted).','line_number':675,'multiline':False]['text':' Step 5: Let method be ? GetV(underlyingObject, methodName).','line_number':676,'multiline':False]['text':'','line_number':677,'multiline':False]['text':' These steps were performed in |CreateAlgorithmFromUnderlyingMethod|.  The','line_number':678,'multiline':False]['text':' spec stores away algorithms for later invocation; we instead store the','line_number':679,'multiline':False]['text':' value that determines the algorithm to be created -- either |undefined|, or','line_number':680,'multiline':False]['text':' a callable object that's called with context-specific arguments.','line_number':681,'multiline':False]['text':' Step 7: (If method is undefined,) Return an algorithm which returns a','line_number':683,'multiline':False]['text':'         promise resolved with undefined (implicit).','line_number':684,'multiline':False]['text':' Step 6: If method is not undefined,','line_number':689,'multiline':False]['text':' Step 6.a: If ! IsCallable(method) is false, throw a TypeError exception.','line_number':691,'multiline':False]['text':' Step 6.b: If algoArgCount is 0, return an algorithm that performs the','line_number':694,'multiline':False]['text':'           following steps:','line_number':695,'multiline':False]['text':' Step 6.b.ii: Return ! PromiseCall(method, underlyingObject, extraArgs).','line_number':696,'multiline':False]['text':' 4.8.12 step 3: Let sinkWritePromise be the result of performing','line_number':710,'multiline':False]['text':'                controller.[[writeAlgorithm]], passing in chunk.','line_number':711,'multiline':False]['text':' 4.8.3 step 4: Let writeAlgorithm be','line_number':717,'multiline':False]['text':'               ? CreateAlgorithmFromUnderlyingMethod(underlyingSink,','line_number':718,'multiline':False]['text':'                                                     "write", 1,','line_number':719,'multiline':False]['text':'                                                     « controller »).','line_number':720,'multiline':False]['text':' Step 1: Assert: underlyingObject is not undefined.','line_number':722,'multiline':False]['text':' Step 2: Assert: ! IsPropertyKey(methodName) is true (implicit).','line_number':723,'multiline':False]['text':' Step 3: Assert: algoArgCount is 0 or 1 (omitted).','line_number':724,'multiline':False]['text':' Step 4: Assert: extraArgs is a List (omitted).','line_number':725,'multiline':False]['text':' Step 5: Let method be ? GetV(underlyingObject, methodName).','line_number':726,'multiline':False]['text':'','line_number':727,'multiline':False]['text':' These steps were performed in |CreateAlgorithmFromUnderlyingMethod|.  The','line_number':728,'multiline':False]['text':' spec stores away algorithms for later invocation; we instead store the','line_number':729,'multiline':False]['text':' value that determines the algorithm to be created -- either |undefined|, or','line_number':730,'multiline':False]['text':' a callable object that's called with context-specific arguments.','line_number':731,'multiline':False]['text':' Step 7: (If method is undefined,) Return an algorithm which returns a','line_number':733,'multiline':False]['text':'         promise resolved with undefined (implicit).','line_number':734,'multiline':False]['text':' Step 6: If method is not undefined,','line_number':739,'multiline':False]['text':' Step 6.a: If ! IsCallable(method) is false, throw a TypeError exception.','line_number':741,'multiline':False]['text':' Step 6.c: Otherwise (if algoArgCount is not 0), return an algorithm that','line_number':744,'multiline':False]['text':'           performs the following steps, taking an arg argument:','line_number':745,'multiline':False]['text':' Step 6.c.i:  Let fullArgs be a List consisting of arg followed by the','line_number':746,'multiline':False]['text':'              elements of extraArgs in order.','line_number':747,'multiline':False]['text':' Step 6.c.ii: Return ! PromiseCall(method, underlyingObject, fullArgs).','line_number':748,'multiline':False]['text':'*
 * Streams spec, 4.8.11 step 7:
 * Upon fulfillment of sinkClosePromise,
 ','line_number':767,'multiline':True]['text':' Step 7.a: Perform ! WritableStreamFinishInFlightClose(stream).','line_number':778,'multiline':False]['text':'*
 * Streams spec, 4.8.11 step 8:
 * Upon rejection of sinkClosePromise with reason reason,
 ','line_number':787,'multiline':True]['text':' Step 8.a: Perform','line_number':799,'multiline':False]['text':'           ! WritableStreamFinishInFlightCloseWithError(stream, reason).','line_number':800,'multiline':False]['text':'*
 * Streams spec, 4.8.12 step 4:
 * Upon fulfillment of sinkWritePromise,
 ','line_number':810,'multiline':True]['text':' Step 4.a: Perform ! WritableStreamFinishInFlightWrite(stream).','line_number':821,'multiline':False]['text':' Step 4.b: Let state be stream.[[state]].','line_number':826,'multiline':False]['text':' Step 4.c: Assert: state is "writable" or "erroring".','line_number':827,'multiline':False]['text':' Step 4.d: Perform ! DequeueValue(controller).','line_number':830,'multiline':False]['text':' Step 4.e: If ! WritableStreamCloseQueuedOrInFlight(stream) is false and','line_number':833,'multiline':False]['text':'           state is "writable",','line_number':834,'multiline':False]['text':' Step 4.e.i: Let backpressure be','line_number':837,'multiline':False]['text':'             ! WritableStreamDefaultControllerGetBackpressure(','line_number':838,'multiline':False]['text':'                   controller).','line_number':839,'multiline':False]['text':' Step 4.e.ii: Perform','line_number':843,'multiline':False]['text':'              ! WritableStreamUpdateBackpressure(stream, backpressure).','line_number':844,'multiline':False]['text':' Step 4.f: Perform','line_number':850,'multiline':False]['text':'           ! WritableStreamDefaultControllerAdvanceQueueIfNeeded(','line_number':851,'multiline':False]['text':'                 controller).','line_number':852,'multiline':False]['text':'*
 * Streams spec, 4.8.12 step 5:
 * Upon rejection of sinkWritePromise with reason,
 ','line_number':864,'multiline':True]['text':' Step 5.a: If stream.[[state]] is "writable", perform','line_number':876,'multiline':False]['text':'           ! WritableStreamDefaultControllerClearAlgorithms(controller).','line_number':877,'multiline':False]['text':' Step 5.b: Perform','line_number':883,'multiline':False]['text':'           ! WritableStreamFinishInFlightWriteWithError(stream, reason).','line_number':884,'multiline':False]['text':'*
 * Streams spec, 4.8.9 (steps 7-10),
 *      WritableStreamDefaultControllerAdvanceQueueIfNeeded ( controller )
 * Streams spec, 4.8.11.
 *      WritableStreamDefaultControllerProcessClose ( controller )
 * Streams spec, 4.8.12.
 *      WritableStreamDefaultControllerProcessWrite ( controller, chunk )
 ','line_number':894,'multiline':True]['text':' Step 7: If controller.[[queue]] is empty, return.','line_number':905,'multiline':False]['text':' Step 8: Let writeRecord be ! PeekQueueValue(controller).','line_number':911,'multiline':False]['text':' Step 9: If writeRecord is "close", perform','line_number':912,'multiline':False]['text':'         ! WritableStreamDefaultControllerProcessClose(controller).','line_number':913,'multiline':False]['text':' Step 10: Otherwise, perform','line_number':914,'multiline':False]['text':'          ! WritableStreamDefaultControllerProcessWrite(','line_number':915,'multiline':False]['text':'                controller, writeRecord.[[chunk]]).','line_number':916,'multiline':False]['text':' 4.8.11 step 1: Let stream be controller.[[controlledWritableStream]].','line_number':925,'multiline':False]['text':' 4.8.11 step 2: Perform ! WritableStreamMarkCloseRequestInFlight(stream).','line_number':926,'multiline':False]['text':' 4.8.11 step 3: Perform ! DequeueValue(controller).','line_number':929,'multiline':False]['text':' 4.8.11 step 4: Assert: controller.[[queue]] is empty.','line_number':932,'multiline':False]['text':' 4.8.11 step 5: Let sinkClosePromise be the result of performing','line_number':935,'multiline':False]['text':'         controller.[[closeAlgorithm]].','line_number':936,'multiline':False]['text':' 4.8.12 step 1: Let stream be controller.[[controlledWritableStream]].','line_number':947,'multiline':False]['text':' 4.8.12 step 2: Perform','line_number':948,'multiline':False]['text':'                ! WritableStreamMarkFirstWriteRequestInFlight(stream).','line_number':949,'multiline':False]['text':' 4.8.12 step 3: Let sinkWritePromise be the result of performing','line_number':952,'multiline':False]['text':'                controller.[[writeAlgorithm]], passing in chunk.','line_number':953,'multiline':False]['text':' Step 7: Upon fulfillment of sinkClosePromise,','line_number':966,'multiline':False]['text':' Step 4: Upon fulfillment of sinkWritePromise,','line_number':967,'multiline':False]['text':' Step 8: Upon rejection of sinkClosePromise with reason reason,','line_number':968,'multiline':False]['text':' Step 5: Upon rejection of sinkWritePromise with reason,','line_number':969,'multiline':False]['text':'*
 * Streams spec, 4.8.13.
 *      WritableStreamDefaultControllerGetBackpressure ( controller )
 ','line_number':982,'multiline':True]['text':'*
 * Streams spec, 4.8.14.
 *      WritableStreamDefaultControllerError ( controller, error )
 ','line_number':992,'multiline':True]['text':' Step 1: Let stream be controller.[[controlledWritableStream]].','line_number':1001,'multiline':False]['text':' Step 2: Assert: stream.[[state]] is "writable".','line_number':1004,'multiline':False]['text':' Step 3: Perform','line_number':1007,'multiline':False]['text':'         ! WritableStreamDefaultControllerClearAlgorithms(controller).','line_number':1008,'multiline':False]['text':' Step 4: Perform ! WritableStreamStartErroring(stream, error).','line_number':1011,'multiline':False]