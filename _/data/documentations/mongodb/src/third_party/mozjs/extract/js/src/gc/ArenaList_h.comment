['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * GC-internal definitions of ArenaList and associated heap data structures.
 ','line_number':7,'multiline':True]['text':'
 * A single segment of a SortedArenaList. Each segment has a head and a tail,
 * which track the start and end of a segment for O(1) append and concatenation.
 ','line_number':37,'multiline':True]['text':' Appends |arena| to this segment.','line_number':52,'multiline':False]['text':' Points the tail of this segment at |arena|, which may be null. Note','line_number':55,'multiline':False]['text':' that this does not change the tail itself, but merely which arena','line_number':56,'multiline':False]['text':' follows it. This essentially turns the tail into a cursor (see also the','line_number':57,'multiline':False]['text':' description of ArenaList), but from the perspective of a SortedArenaList','line_number':58,'multiline':False]['text':' this makes no difference.','line_number':59,'multiline':False]['text':'
 * Arena lists contain a singly linked lists of arenas starting from a head
 * pointer.
 *
 * They also have a cursor, which conceptually lies on arena boundaries,
 * i.e. before the first arena, between two arenas, or after the last arena.
 *
 * Arenas are usually sorted in order of increasing free space, with the cursor
 * following the Arena currently being allocated from. This ordering should not
 * be treated as an invariant, however, as the free lists may be cleared,
 * leaving arenas previously used for allocation partially full. Sorting order
 * is restored during sweeping.
 *
 * Arenas following the cursor should not be full.
 ','line_number':63,'multiline':True]['text':' The cursor is implemented via an indirect pointer, |cursorp_|, to allow','line_number':79,'multiline':False]['text':' for efficient list insertion at the cursor point and other list','line_number':80,'multiline':False]['text':' manipulations.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' - If the list is empty: |head| is null, |cursorp_| points to |head|, and','line_number':83,'multiline':False]['text':'   therefore |*cursorp_| is null.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' - If the list is not empty: |head| is non-null, and...','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':'   - If the cursor is at the start of the list: |cursorp_| points to','line_number':88,'multiline':False]['text':'     |head|, and therefore |*cursorp_| points to the first arena.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':'   - If cursor is at the end of the list: |cursorp_| points to the |next|','line_number':91,'multiline':False]['text':'     field of the last arena, and therefore |*cursorp_| is null.','line_number':92,'multiline':False]['text':'','line_number':93,'multiline':False]['text':'   - If the cursor is at neither the start nor the end of the list:','line_number':94,'multiline':False]['text':'     |cursorp_| points to the |next| field of the arena preceding the','line_number':95,'multiline':False]['text':'     cursor, and therefore |*cursorp_| points to the arena following the','line_number':96,'multiline':False]['text':'     cursor.','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' |cursorp_| is never null.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' Transfers the contents of |other| to this list and clears |other|.','line_number':104,'multiline':False]['text':' It doesn't make sense for arenas to be present in more than one list, so','line_number':114,'multiline':False]['text':' list copy operations are not provided.','line_number':115,'multiline':False]['text':' This returns nullptr if the list is empty.','line_number':126,'multiline':False]['text':' This can return nullptr.','line_number':132,'multiline':False]['text':' This returns the arena after the cursor and moves the cursor past it.','line_number':135,'multiline':False]['text':' This does two things.','line_number':138,'multiline':False]['text':' - Inserts |a| at the cursor.','line_number':139,'multiline':False]['text':' - Leaves the cursor sitting just before |a|, if |a| is not full, or just','line_number':140,'multiline':False]['text':'   after |a|, if |a| is full.','line_number':141,'multiline':False]['text':' Inserts |a| at the cursor, then moves the cursor past it.','line_number':144,'multiline':False]['text':' This inserts the contents of |other|, which must be full, at the cursor of','line_number':147,'multiline':False]['text':' |this| and clears |other|.','line_number':148,'multiline':False]['text':'
 * A class that holds arenas in sorted order by appending arenas to specific
 * segments. Each segment has a head and a tail, which can be linked up to
 * other segments to create a contiguous ArenaList.
 ','line_number':162,'multiline':True]['text':' The minimum size, in bytes, of a GC thing.','line_number':169,'multiline':False]['text':' The maximum number of GC things that an arena can hold.','line_number':181,'multiline':False]['text':' Convenience functions to get the nth head and tail.','line_number':188,'multiline':False]['text':' Resets the first |thingsPerArena| segments of this list for further use.','line_number':197,'multiline':False]['text':' Inserts an arena, which has room for |nfree| more things, in its segment.','line_number':200,'multiline':False]['text':' Remove all empty arenas, inserting them as a linked list.','line_number':203,'multiline':False]['text':' Links up the tail of each non-empty segment to the head of the next','line_number':206,'multiline':False]['text':' non-empty segment, creating a contiguous list that is returned as an','line_number':207,'multiline':False]['text':' ArenaList. This is not a destructive operation: neither the head nor tail','line_number':208,'multiline':False]['text':' of any segment is modified. However, note that the Arenas in the','line_number':209,'multiline':False]['text':' resulting ArenaList should be treated as read-only unless the','line_number':210,'multiline':False]['text':' SortedArenaList is no longer needed: inserting or removing arenas would','line_number':211,'multiline':False]['text':' invalidate the SortedArenaList.','line_number':212,'multiline':False]['text':' For each arena kind its free list is represented as the first span with free','line_number':221,'multiline':False]['text':' things. Initially all the spans are initialized as empty. After we find a new','line_number':222,'multiline':False]['text':' arena with available things we move its first free span into the list and set','line_number':223,'multiline':False]['text':' the arena as fully allocated. That way we do not need to update the arena','line_number':224,'multiline':False]['text':' after the initial allocation. When starting the GC we only move the head of','line_number':225,'multiline':False]['text':' the of the list of spans back to the arena only for the arena that was not','line_number':226,'multiline':False]['text':' fully allocated.','line_number':227,'multiline':False]['text':' Because the JITs can allocate from the free lists, they cannot be null.','line_number':232,'multiline':False]['text':' We use a placeholder FreeSpan that is empty (and wihout an associated','line_number':233,'multiline':False]['text':' Arena) so the JITs can fall back gracefully.','line_number':234,'multiline':False]['text':' Whether this structure can be accessed by other threads.','line_number':270,'multiline':False]['text':' The main list of arenas for each alloc kind. ','line_number':275,'multiline':True]['text':' For each arena kind, a list of arenas allocated during marking. ','line_number':278,'multiline':True]['text':' For each arena kind, a list of arenas remaining to be swept. ','line_number':281,'multiline':True]['text':' During incremental sweeping, a list of the arenas already swept. ','line_number':284,'multiline':True]['text':' Arena lists which have yet to be swept, but need additional foreground','line_number':288,'multiline':False]['text':' processing before they are swept.','line_number':289,'multiline':False]['text':' The list of empty arenas which are collected during the sweep phase and','line_number':293,'multiline':False]['text':' released at the end of sweeping every sweep group.','line_number':294,'multiline':False]['text':' Clear the free lists so we won't try to allocate from swept arenas. ','line_number':321,'multiline':True]['text':' Moves all arenas from |fromArenaLists| into |this|. ','line_number':328,'multiline':True]['text':' namespace gc ','line_number':402,'multiline':True]['text':' namespace js ','line_number':403,'multiline':True]['text':' gc_ArenaList_h ','line_number':405,'multiline':True]