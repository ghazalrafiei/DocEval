['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2013-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationbuilder.cpp
*
* (replaced the former ucol_bld.cpp)
*
* created on: 2013may06
* created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':'errorReason','line_number':71,'multiline':True]['text':' namespace','line_number':75,'multiline':False]['text':' RuleBasedCollator implementation ---------------------------------------- ***','line_number':77,'multiline':False]['text':' These methods are here, rather than in rulebasedcollator.cpp,','line_number':79,'multiline':False]['text':' for modularization:','line_number':80,'multiline':False]['text':' Most code using Collator does not need to build a Collator from rules.','line_number':81,'multiline':False]['text':' By moving these constructors and helper methods to a separate file,','line_number':82,'multiline':False]['text':' most code will not have a static dependency on the builder code.','line_number':83,'multiline':False]['text':' Set attributes after building the collator,','line_number':182,'multiline':False]['text':' to keep the default settings consistent with the rule string.','line_number':183,'multiline':False]['text':' CollationBuilder implementation ----------------------------------------- ***','line_number':192,'multiline':False]['text':' Some compilers don't care if constants are defined in the .cpp file.','line_number':194,'multiline':False]['text':' MS Visual C++ does not like it, but gcc requires it. clang does not care.','line_number':195,'multiline':False]['text':' Note: This always bases &[last variable] and &[first regular]','line_number':251,'multiline':False]['text':' on the root collator's maxVariable/variableTop.','line_number':252,'multiline':False]['text':' If we wanted this to change after [maxVariable x], then we would keep','line_number':253,'multiline':False]['text':' the tailoring.settings pointer here and read its variableTop when we need it.','line_number':254,'multiline':False]['text':' See http://unicode.org/cldr/trac/ticket/6070','line_number':255,'multiline':False]['text':' Copy all of ASCII, and Latin-1 letters, into each tailoring.','line_number':267,'multiline':False]['text':' Hangul is decomposed on the fly during collation,','line_number':270,'multiline':False]['text':' and the tailoring data is always built with HANGUL_TAG specials.','line_number':271,'multiline':False]['text':' ensure NUL-termination','line_number':288,'multiline':False]['text':' normal reset to a character or string','line_number':304,'multiline':False]['text':' simple reset-at-position','line_number':317,'multiline':False]['text':' &[before strength]position','line_number':319,'multiline':False]['text':' If the index is for a "weaker" node,','line_number':325,'multiline':False]['text':' then skip backwards over this and further "weaker" nodes.','line_number':326,'multiline':False]['text':' Find or insert a node whose index we will put into a temporary CE.','line_number':332,'multiline':False]['text':' Reset to just before this same-strength tailored node.','line_number':334,'multiline':False]['text':' root primary node (has no previous index)','line_number':337,'multiline':False]['text':' There is no primary gap between ignorables and the space-first-primary.','line_number':345,'multiline':False]['text':' We do not support tailoring to an unassigned-implicit CE.','line_number':351,'multiline':False]['text':' Go to the last node in this list:','line_number':358,'multiline':False]['text':' Tailor after the last node between adjacent root nodes.','line_number':359,'multiline':False]['text':' &[before 2] or &[before 3]','line_number':367,'multiline':False]['text':' findCommonNode() stayed on the stronger node or moved to','line_number':372,'multiline':False]['text':' an explicit common-weight node of the reset-before strength.','line_number':373,'multiline':False]['text':' Found a same-strength node with an explicit weight.','line_number':376,'multiline':False]['text':' Reset to just before this node.','line_number':388,'multiline':False]['text':' Insert the preceding same-level explicit weight if it is not there already.','line_number':389,'multiline':False]['text':' Which explicit weight immediately precedes this one?','line_number':390,'multiline':False]['text':' Does this preceding weight have a node?','line_number':392,'multiline':False]['text':' Either the reset element has an above-common weight and','line_number':400,'multiline':False]['text':' the parent node provides the implied common weight,','line_number':401,'multiline':False]['text':' or the reset element has a weight<=common in the node','line_number':402,'multiline':False]['text':' right after the parent, and we need to insert the preceding weight.','line_number':403,'multiline':False]['text':' Skip weaker nodes and same-level tailored nodes.','line_number':410,'multiline':False]['text':' The preceding weight has a node,','line_number':413,'multiline':False]['text':' maybe with following weaker or tailored nodes.','line_number':414,'multiline':False]['text':' Reset to the last of them.','line_number':415,'multiline':False]['text':' Insert a node with the preceding weight, reset to that.','line_number':418,'multiline':False]['text':' Found a stronger node with implied strength-common weight.','line_number':423,'multiline':False]['text':' Strength of the temporary CE = strength of its reset position.','line_number':427,'multiline':False]['text':' Code above raises an error if the before-strength is stronger.','line_number':428,'multiline':False]['text':' Collect the root CE weights if this node is for a root CE.','line_number':441,'multiline':False]['text':' If it is not, then return the low non-primary boundary for a tailored CE.','line_number':442,'multiline':False]['text':' Stronger node with implied common weight.','line_number':447,'multiline':False]['text':' Stronger node with implied common weight.','line_number':460,'multiline':False]['text':' [p, s, t] is a root CE. Return the preceding weight for the requested level.','line_number':469,'multiline':False]['text':' Quaternary CEs are not supported.','line_number':492,'multiline':False]['text':' Non-zero quaternary weights are possible only on tertiary or stronger CEs.','line_number':493,'multiline':False]['text':' Look for a tailored tertiary node after [0, 0, 0].','line_number':498,'multiline':False]['text':' No need to look for nodeHasAnyBefore() on a tertiary node.','line_number':510,'multiline':False]['text':' Look for a tailored secondary node after [0, 0, *].','line_number':517,'multiline':False]['text':' FractionalUCA.txt: FDD1 00A0, SPACE first primary','line_number':547,'multiline':False]['text':' FractionalUCA.txt: FDD1 263A, SYMBOL first primary','line_number':554,'multiline':False]['text':' Use the Hani-first-primary rather than the actual last "regular" CE before it,','line_number':557,'multiline':False]['text':' for backward compatibility with behavior before the introduction of','line_number':558,'multiline':False]['text':' script-first-primary CEs in the root collator.','line_number':559,'multiline':False]['text':' We do not support tailoring to an unassigned-implicit CE.','line_number':567,'multiline':False]['text':' trailing first primary (there is no mapping for it)','line_number':573,'multiline':False]['text':' even pos = [first xyz]','line_number':587,'multiline':False]['text':' A <group> first primary boundary is artificially added to FractionalUCA.txt.','line_number':589,'multiline':False]['text':' It is reachable via its special contraction, but is not normally used.','line_number':590,'multiline':False]['text':' Find the first character tailored after the boundary CE,','line_number':591,'multiline':False]['text':' or the first real root CE after it.','line_number':592,'multiline':False]['text':' If there is a following node, then it must be tailored','line_number':594,'multiline':False]['text':' because there are no root CEs with a boundary primary','line_number':595,'multiline':False]['text':' and non-common secondary/tertiary weights.','line_number':596,'multiline':False]['text':' Get the first node that was tailored before this one at a weaker strength.','line_number':613,'multiline':False]['text':' odd pos = [last xyz]','line_number':625,'multiline':False]['text':' Find the last node that was tailored after the [last xyz]','line_number':626,'multiline':False]['text':' at a strength no greater than the position's strength.','line_number':627,'multiline':False]['text':' Do not make a temporary CE for a root node.','line_number':636,'multiline':False]['text':' This last node might be the node for the root CE itself,','line_number':637,'multiline':False]['text':' or a node with a common secondary or tertiary weight.','line_number':638,'multiline':False]['text':' The runtime code decomposes Hangul syllables on the fly,','line_number':665,'multiline':False]['text':' with recursive processing but without making the Jamo pieces visible for matching.','line_number':666,'multiline':False]['text':' It does not work with certain types of contextual mappings.','line_number':667,'multiline':False]['text':' While handling a Hangul syllable, contractions starting with Jamo L or V','line_number':672,'multiline':False]['text':' would not see the following Jamo of that syllable.','line_number':673,'multiline':False]['text':' A contraction ending with Jamo L or L+V would require','line_number':681,'multiline':False]['text':' generating Hangul syllables in addTailComposites() (588 for a Jamo L),','line_number':682,'multiline':False]['text':' or decomposing a following Hangul syllable on the fly, during contraction matching.','line_number':683,'multiline':False]['text':' A Hangul syllable completely inside a contraction is ok.','line_number':688,'multiline':False]['text':' Note: If there is a prefix, then the parser checked that','line_number':690,'multiline':False]['text':' both the prefix and the string begin with NFC boundaries (not Jamo V or T).','line_number':691,'multiline':False]['text':' Therefore: prefix.isEmpty() || !isJamoVOrT(nfdString.charAt(0))','line_number':692,'multiline':False]['text':' (While handling a Hangul syllable, prefixes on Jamo V or T','line_number':693,'multiline':False]['text':' would not see the previous Jamo of that syllable.)','line_number':694,'multiline':False]['text':' Find the node index after which we insert the new tailored node.','line_number':697,'multiline':False]['text':' There is no primary gap between ignorables and the space-first-primary.','line_number':702,'multiline':False]['text':' The CE data structure does not support non-zero quaternary weights','line_number':708,'multiline':False]['text':' on tertiary ignorables.','line_number':709,'multiline':False]['text':' Insert the new tailored node.','line_number':714,'multiline':False]['text':' Strength of the temporary CE:','line_number':720,'multiline':False]['text':' The new relation may yield a stronger CE but not a weaker one.','line_number':721,'multiline':False]['text':' Map from the original input to the CEs.','line_number':748,'multiline':False]['text':' We do this in case the canonical closure is incomplete,','line_number':749,'multiline':False]['text':' so that it is possible to explicitly provide the missing mappings.','line_number':750,'multiline':False]['text':' Find the last CE that is at least as "strong" as the requested difference.','line_number':767,'multiline':False]['text':' Note: Stronger is smaller (UCOL_PRIMARY=0).','line_number':768,'multiline':False]['text':' No need to findCommonNode() here for lower levels','line_number':782,'multiline':False]['text':' because insertTailoredNodeAfter() will do that anyway.','line_number':783,'multiline':False]['text':' root CE','line_number':787,'multiline':False]['text':' Find or insert the node for each of the root CE's weights,','line_number':801,'multiline':False]['text':' down to the requested level/strength.','line_number':802,'multiline':False]['text':' Root CEs must have common=zero quaternary weights (for which we never insert any nodes).','line_number':803,'multiline':False]['text':'*
 * Like Java Collections.binarySearch(List, key, Comparator).
 *
 * @return the index>=0 where the item was found,
 *         or the index<0 for inserting the string at ~index in sorted order
 *         (index into rootPrimaryIndexes)
 ','line_number':819,'multiline':True]['text':' weight32FromNode(node)','line_number':835,'multiline':False]['text':' insert s before i','line_number':840,'multiline':False]['text':' insert s after i','line_number':845,'multiline':False]['text':' namespace','line_number':852,'multiline':False]['text':' Start a new list of nodes with this primary.','line_number':863,'multiline':False]['text':' If this will be the first below-common weight for the parent node,','line_number':881,'multiline':False]['text':' then we will also need to insert a common weight after it.','line_number':882,'multiline':False]['text':' parent node is stronger','line_number':884,'multiline':False]['text':' The parent node has an implied level-common weight.','line_number':888,'multiline':False]['text':' Move the HAS_BEFORE3 flag from the parent node','line_number':892,'multiline':False]['text':' to the new secondary common node.','line_number':893,'multiline':False]['text':' Insert below-common-weight node.','line_number':898,'multiline':False]['text':' Insert common-weight node.','line_number':902,'multiline':False]['text':' Return index of below-common-weight node.','line_number':904,'multiline':False]['text':' Find the root CE's weight for this level.','line_number':909,'multiline':False]['text':' Postpone insertion if not found:','line_number':910,'multiline':False]['text':' Insert the new root node before the next stronger node,','line_number':911,'multiline':False]['text':' or before the next root node with the same strength and a larger weight.','line_number':912,'multiline':False]['text':' Insert before a stronger node.','line_number':918,'multiline':False]['text':' nextStrength == level','line_number':920,'multiline':False]['text':' Found the node for the root CE up to this level.','line_number':924,'multiline':False]['text':' Insert before a node with a larger same-strength weight.','line_number':927,'multiline':False]['text':' Skip the next node.','line_number':931,'multiline':False]['text':' Postpone insertion:','line_number':948,'multiline':False]['text':' Insert the new node before the next one with a strength at least as strong.','line_number':949,'multiline':False]['text':' Skip the next node which has a weaker (larger) strength than the new one.','line_number':955,'multiline':False]['text':' Append the new node and link it to the existing nodes.','line_number':969,'multiline':False]['text':' nodes[index].nextIndex = newIndex','line_number':974,'multiline':False]['text':' nodes[nextIndex].previousIndex = newIndex','line_number':977,'multiline':False]['text':' The current node is no stronger.','line_number':990,'multiline':False]['text':' The current node implies the strength-common weight.','line_number':994,'multiline':False]['text':' Skip to the explicit common node.','line_number':1001,'multiline':False]['text':' We should not be able to get too many case bits because','line_number':1020,'multiline':False]['text':' cesLength<=31==MAX_EXPANSION_LENGTH.','line_number':1021,'multiline':False]['text':' 31 pairs of case bits fit into an int64_t without setting its sign bit.','line_number':1022,'multiline':False]['text':' lowercase or uppercase, no mixed case in any base CE','line_number':1043,'multiline':False]['text':' There are more base primary CEs than tailored primaries.','line_number':1049,'multiline':False]['text':' Set mixed case if the case bits of the remainder differ.','line_number':1050,'multiline':False]['text':' Nothing more can change.','line_number':1052,'multiline':False]['text':' clear old case bits','line_number':1063,'multiline':False]['text':' Tertiary CEs must have uppercase bits.','line_number':1069,'multiline':False]['text':' See the LDML spec, and comments in class CollationCompare.','line_number':1070,'multiline':False]['text':' Tertiary ignorable CEs must have 0 case bits.','line_number':1073,'multiline':False]['text':' We set 0 case bits for secondary CEs too','line_number':1074,'multiline':False]['text':' since currently only U+0345 is cased and maps to a secondary CE,','line_number':1075,'multiline':False]['text':' and it is lowercase. Other secondaries are uncased.','line_number':1076,'multiline':False]['text':' See [[:Cased:]&[:uca1=:]] where uca1 queries the root primary weight.','line_number':1077,'multiline':False]['text':' parserErrorReason ','line_number':1093,'multiline':True]['text':' Map from the NFD input to the CEs.','line_number':1103,'multiline':False]['text':' Map from canonically equivalent input to the CEs. (But not from the all-NFD input.)','line_number':1116,'multiline':False]['text':' Look for the last starter in the NFD string.','line_number':1155,'multiline':False]['text':' no starter at all','line_number':1159,'multiline':False]['text':' No closure to Hangul syllables since we decompose them on the fly.','line_number':1164,'multiline':False]['text':' Are there any composites whose decomposition starts with the lastStarter?','line_number':1167,'multiline':False]['text':' Note: Normalizer2Impl does not currently return start sets for NFC_QC=Maybe characters.','line_number':1168,'multiline':False]['text':' We might find some more equivalent mappings here if it did.','line_number':1169,'multiline':False]['text':' Ignore mappings that we cannot store.','line_number':1187,'multiline':False]['text':' Note: It is possible that the newCEs do not make use of the mapping','line_number':1190,'multiline':False]['text':' for which we are adding the tail composites, in which case we might be adding','line_number':1191,'multiline':False]['text':' unnecessary mappings.','line_number':1192,'multiline':False]['text':' For example, when we add tail composites for ae^ (^=combining circumflex),','line_number':1193,'multiline':False]['text':' UCA discontiguous-contraction matching does not find any matches','line_number':1194,'multiline':False]['text':' for ae_^ (_=any combining diacritic below) *unless* there is also','line_number':1195,'multiline':False]['text':' a contraction mapping for ae.','line_number':1196,'multiline':False]['text':' Thus, if there is no ae contraction, then the ae^ mapping is ignored','line_number':1197,'multiline':False]['text':' while fetching the newCEs for ae_^.','line_number':1198,'multiline':False]['text':' TODO: Try to detect this effectively.','line_number':1199,'multiline':False]['text':' (Alternatively, print a warning when prefix contractions are missing.)','line_number':1200,'multiline':False]['text':' We do not need an explicit mapping for the NFD strings.','line_number':1202,'multiline':False]['text':' It is fine if the NFD input collates like this via a sequence of mappings.','line_number':1203,'multiline':False]['text':' It also saves a little bit of space, and may reduce the set of characters with contractions.','line_number':1204,'multiline':False]['text':' was different, was added','line_number':1208,'multiline':False]['text':' Singleton decompositions should be found by addWithClosure()','line_number':1224,'multiline':False]['text':' and the CanonicalIterator, so we can ignore them here.','line_number':1225,'multiline':False]['text':' same strings, nothing new to be found here','line_number':1230,'multiline':False]['text':' Make new FCD strings that combine a composite, or its decomposition,','line_number':1234,'multiline':False]['text':' into the nfdString's last starter and the combining marks following it.','line_number':1235,'multiline':False]['text':' Make an NFD version, and a version with the composite.','line_number':1236,'multiline':False]['text':' The following is related to discontiguous contraction matching,','line_number':1240,'multiline':False]['text':' but builds only FCD strings (or else returns FALSE).','line_number':1241,'multiline':False]['text':' Small optimization: We keep the source character across loop iterations','line_number':1244,'multiline':False]['text':' because we do not always consume it,','line_number':1245,'multiline':False]['text':' and then need not fetch it again nor look up its combining class again.','line_number':1246,'multiline':False]['text':' The cc variables need to be declared before the loop so that at the end','line_number':1248,'multiline':False]['text':' they are set to the last combining classes seen.','line_number':1249,'multiline':False]['text':' We consume a decomposition character in each iteration.','line_number':1259,'multiline':False]['text':' Compare the two characters and their combining classes.','line_number':1263,'multiline':False]['text':' Unable to merge because the source contains a non-zero combining mark','line_number':1265,'multiline':False]['text':' but the composite's decomposition contains another starter.','line_number':1266,'multiline':False]['text':' The strings would not be equivalent.','line_number':1267,'multiline':False]['text':' Composite + sourceChar would not be FCD.','line_number':1270,'multiline':False]['text':' Blocked because same combining class.','line_number':1276,'multiline':False]['text':' match: decompChar == sourceChar','line_number':1278,'multiline':False]['text':' We are at the end of at least one of the two inputs.','line_number':1285,'multiline':False]['text':' more characters from nfdString but not from decomp','line_number':1286,'multiline':False]['text':' Appending the next source character to the composite would not be FCD.','line_number':1288,'multiline':False]['text':' more characters from decomp, not from nfdString','line_number':1293,'multiline':False]['text':' canonically equivalent','line_number':1298,'multiline':False]['text':' Do not map non-FCD prefixes.','line_number':1304,'multiline':False]['text':' Do not map non-FCD strings.','line_number':1310,'multiline':False]['text':' Do not map strings that start with Hangul syllables: We decompose those on the fly.','line_number':1311,'multiline':False]['text':' Java: static final','line_number':1322,'multiline':False]['text':' Hangul is decomposed on the fly during collation.','line_number':1324,'multiline':False]['text':' empty','line_number':1326,'multiline':False]['text':' Too many CEs from the decomposition (unusual), ignore this composite.','line_number':1334,'multiline':False]['text':' We could add a capacity parameter to getCEs() and reallocate if necessary.','line_number':1335,'multiline':False]['text':' However, this can only really happen in contrived cases.','line_number':1336,'multiline':False]['text':' First tailored tertiary node for [p, s].','line_number':1433,'multiline':False]['text':' Gap at the beginning of the tertiary CE range.','line_number':1438,'multiline':False]['text':' p and s are root weights.','line_number':1442,'multiline':False]['text':' [p, s] is tailored.','line_number':1447,'multiline':False]['text':' First tailored secondary node for p.','line_number':1476,'multiline':False]['text':' Gap at the beginning of the secondary CE range.','line_number':1481,'multiline':False]['text':' p is a root primary.','line_number':1485,'multiline':False]['text':' p is a tailored primary.','line_number':1490,'multiline':False]['text':' Do not tailor into the getSortKey() range of','line_number':1495,'multiline':False]['text':' compressed common secondaries.','line_number':1496,'multiline':False]['text':' UCOL_PRIMARY ','line_number':1521,'multiline':True]['text':' First tailored primary node in this list.','line_number':1527,'multiline':False]['text':' TODO: introduce a more specific UErrorCode?','line_number':1535,'multiline':False]['text':' retain case bits','line_number':1587,'multiline':False]['text':' retain case bits','line_number':1595,'multiline':False]['text':' The @internal ucol_getUnsafeSet() was moved here from ucol_sit.cpp','line_number':1662,'multiline':False]['text':' because it calls UnicodeSet "builder" code that depends on all Unicode properties,','line_number':1663,'multiline':False]['text':' and the rest of the collation "runtime" code only depends on normalization.','line_number':1664,'multiline':False]['text':' This function is not related to the collation builder,','line_number':1665,'multiline':False]['text':' but it did not seem worth moving it into its own .cpp file,','line_number':1666,'multiline':False]['text':' nor rewriting it to use lower-level UnicodeSet and Normalizer2Impl methods.','line_number':1667,'multiline':False]['text':' cccpattern = "[[:^tccc=0:][:^lccc=0:]]", unfortunately variant','line_number':1678,'multiline':False]['text':' add chars that fail the fcd check','line_number':1682,'multiline':False]['text':' add lead/trail surrogates','line_number':1685,'multiline':False]['text':' (trail surrogates should need to be unsafe only if the caller tests for UTF-16 code *units*,','line_number':1686,'multiline':False]['text':' not when testing code *points*)','line_number':1687,'multiline':False]['text':' Contraction set consists only of strings','line_number':1696,'multiline':False]['text':' to get unsafe code points, we need to','line_number':1697,'multiline':False]['text':' break the strings apart and add them to the unsafe set','line_number':1698,'multiline':False]['text':' !UCONFIG_NO_COLLATION','line_number':1717,'multiline':False]