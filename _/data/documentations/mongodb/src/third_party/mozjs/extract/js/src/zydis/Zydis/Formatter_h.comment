['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   Functions for formatting instructions to human-readable text.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':45,'multiline':True]['text':' Constants                                                                                      ','line_number':46,'multiline':True]['text':' ============================================================================================== ','line_number':47,'multiline':True]['text':'*
 * @brief   Use this constant as value for `runtime_address` in `ZydisFormatterFormatInstruction`/
 *          `ZydisFormatterFormatInstructionEx` or `ZydisFormatterFormatOperand`/
 *          `ZydisFormatterFormatOperandEx` to print relative values for all addresses.
 ','line_number':49,'multiline':True]['text':' ============================================================================================== ','line_number':56,'multiline':True]['text':' Enums and types                                                                                ','line_number':57,'multiline':True]['text':' ============================================================================================== ','line_number':58,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':60,'multiline':True]['text':' Formatter style                                                                                ','line_number':61,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':62,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterStyle` enum.
 ','line_number':64,'multiline':True]['text':'*
     * @brief   Generates `AT&T`-style disassembly.
     ','line_number':69,'multiline':True]['text':'*
     * @brief   Generates `Intel`-style disassembly.
     ','line_number':73,'multiline':True]['text':'*
     * @brief   Generates `MASM`-style disassembly that is directly accepted as input for the
     *          `MASM` assembler.
     *
     * The runtime-address is ignored in this mode.
     ','line_number':77,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':85,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':89,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':95,'multiline':True]['text':' Properties                                                                                     ','line_number':96,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':97,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterProperty` enum.
 ','line_number':99,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':104,'multiline':True]['text':' General                                                                                  ','line_number':105,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':106,'multiline':True]['text':'*
     * @brief   Controls the printing of effective operand-size suffixes (`AT&T`) or operand-sizes
     *          of memory operands (`INTEL`).
     *
     * Pass `ZYAN_TRUE` as value to force the formatter to always print the size, or `ZYAN_FALSE`
     * to only print it if needed.
     ','line_number':108,'multiline':True]['text':'*
     * @brief   Controls the printing of segment prefixes.
     *
     * Pass `ZYAN_TRUE` as value to force the formatter to always print the segment register of
     * memory-operands or `ZYAN_FALSE` to omit implicit `DS`/`SS` segments.
     ','line_number':116,'multiline':True]['text':'*
     * @brief   Controls the printing of branch addresses.
     *
     * Pass `ZYAN_TRUE` as value to force the formatter to always print relative branch addresses
     * or `ZYAN_FALSE` to use absolute addresses, if a runtime-address different to
     * `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.
     ','line_number':123,'multiline':True]['text':'*
     * @brief   Controls the printing of `EIP`/`RIP`-relative addresses.
     *
     * Pass `ZYAN_TRUE` as value to force the formatter to always print relative addresses for
     * `EIP`/`RIP`-relative operands or `ZYAN_FALSE` to use absolute addresses, if a runtime-
     * address different to `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.
     ','line_number':131,'multiline':True]['text':'*
     * @brief   Controls the printing of branch-instructions sizes.
     *
     * Pass `ZYAN_TRUE` as value to print the size (`short`, `near`) of branch
     * instructions or `ZYAN_FALSE` to hide it.
     *
     * Note that the `far`/`l` modifier is always printed.
     ','line_number':139,'multiline':True]['text':'*
     * @brief   Controls the printing of instruction prefixes.
     *
     * Pass `ZYAN_TRUE` as value to print all instruction-prefixes (even ignored or duplicate
     * ones) or `ZYAN_FALSE` to only print prefixes that are effectively used by the instruction.
     ','line_number':149,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':157,'multiline':True]['text':' Numeric values                                                                           ','line_number':158,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':159,'multiline':True]['text':'*
     * @brief   Controls the base of address values.
     ','line_number':161,'multiline':True]['text':'*
     * @brief   Controls the signedness of relative addresses. Absolute addresses are always
     *          unsigned.
     ','line_number':165,'multiline':True]['text':'*
     * @brief   Controls the padding of absolute address values.
     *
     * Pass `ZYDIS_PADDING_DISABLED` to disable padding, `ZYDIS_PADDING_AUTO` to padd all
     * addresses to the current stack width (hexadecimal only), or any other integer value for
     * custom padding.
     ','line_number':170,'multiline':True]['text':'*
     * @brief   Controls the padding of relative address values.
     *
     * Pass `ZYDIS_PADDING_DISABLED` to disable padding, `ZYDIS_PADDING_AUTO` to padd all
     * addresses to the current stack width (hexadecimal only), or any other integer value for
     * custom padding.
     ','line_number':178,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':187,'multiline':True]['text':'*
     * @brief   Controls the base of displacement values.
     ','line_number':189,'multiline':True]['text':'*
     * @brief   Controls the signedness of displacement values.
     ','line_number':193,'multiline':True]['text':'*
     * @brief   Controls the padding of displacement values.
     *
     * Pass `ZYDIS_PADDING_DISABLED` to disable padding, or any other integer value for custom
     * padding.
     ','line_number':197,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':205,'multiline':True]['text':'*
     * @brief   Controls the base of immediate values.
     ','line_number':207,'multiline':True]['text':'*
     * @brief   Controls the signedness of immediate values.
     *
     * Pass `ZYDIS_SIGNEDNESS_AUTO` to automatically choose the most suitable mode based on the
     * operands `ZydisDecodedOperand.imm.is_signed` attribute.
     ','line_number':211,'multiline':True]['text':'*
     * @brief   Controls the padding of immediate values.
     *
     * Pass `ZYDIS_PADDING_DISABLED` to disable padding, `ZYDIS_PADDING_AUTO` to padd all
     * immediates to the operand-width (hexadecimal only), or any other integer value for custom
     * padding.
     ','line_number':218,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':227,'multiline':True]['text':' Text formatting                                                                          ','line_number':228,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':229,'multiline':True]['text':'*
     * @brief   Controls the letter-case for prefixes.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.
     ','line_number':231,'multiline':True]['text':'*
     * @brief   Controls the letter-case for the mnemonic.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.
     ','line_number':237,'multiline':True]['text':'*
     * @brief   Controls the letter-case for registers.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.
     ','line_number':243,'multiline':True]['text':'*
     * @brief   Controls the letter-case for typecasts.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.
     ','line_number':249,'multiline':True]['text':'*
     * @brief   Controls the letter-case for decorators.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.
     ','line_number':255,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':262,'multiline':True]['text':' Number formatting                                                                        ','line_number':263,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':264,'multiline':True]['text':'*
     * @brief   Controls the prefix for decimal values.
     *
     * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters
     * to set a custom prefix, or `ZYAN_NULL` to disable it.
     *
     * The string is deep-copied into an internal buffer.
     ','line_number':266,'multiline':True]['text':'*
     * @brief   Controls the suffix for decimal values.
     *
     * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters
     * to set a custom suffix, or `ZYAN_NULL` to disable it.
     *
     * The string is deep-copied into an internal buffer.
     ','line_number':275,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':285,'multiline':True]['text':'*
     * @brief   Controls the letter-case of hexadecimal values.
     *
     * Pass `ZYAN_TRUE` as value to format in uppercase and `ZYAN_FALSE` to format in lowercase.
     *
     * The default value is `ZYAN_TRUE`.
     ','line_number':287,'multiline':True]['text':'*
     * @brief   Controls the prefix for hexadecimal values.
     *
     * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters
     * to set a custom prefix, or `ZYAN_NULL` to disable it.
     *
     * The string is deep-copied into an internal buffer.
     ','line_number':295,'multiline':True]['text':'*
     * @brief   Controls the suffix for hexadecimal values.
     *
     * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters
     * to set a custom suffix, or `ZYAN_NULL` to disable it.
     *
     * The string is deep-copied into an internal buffer.
     ','line_number':304,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':314,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':316,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':320,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':326,'multiline':True]['text':'*
 * @brief   Defines the `ZydisNumericBase` enum.
 ','line_number':328,'multiline':True]['text':'*
     * @brief   Decimal system.
     ','line_number':333,'multiline':True]['text':'*
     * @brief   Hexadecimal system.
     ','line_number':337,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':342,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':346,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':352,'multiline':True]['text':'*
 * @brief   Defines the `ZydisSignedness` enum.
 ','line_number':354,'multiline':True]['text':'*
     * @brief   Automatically choose the most suitable mode based on the operands
     *          `ZydisDecodedOperand.imm.is_signed` attribute.
     ','line_number':359,'multiline':True]['text':'*
     * @brief   Force signed values.
     ','line_number':364,'multiline':True]['text':'*
     * @brief   Force unsigned values.
     ','line_number':368,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':373,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':377,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':383,'multiline':True]['text':'*
 * @brief   Defines the `ZydisPadding` enum.
 ','line_number':385,'multiline':True]['text':'*
     * @brief   Disables padding.
     ','line_number':390,'multiline':True]['text':'*
     * @brief   Padds the value to the current stack-width for addresses, or to the operand-width
     *          for immediate values (hexadecimal only).
     ','line_number':394,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':400,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':404,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':410,'multiline':True]['text':' Function types                                                                                 ','line_number':411,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':412,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterFunction` enum.
 *
 * Do NOT change the order of the values this enum or the function fields inside the
 * `ZydisFormatter` struct.
 ','line_number':414,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':422,'multiline':True]['text':' Instruction                                                                              ','line_number':423,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':424,'multiline':True]['text':'*
     * @brief   This function is invoked before the formatter formats an instruction.
     ','line_number':426,'multiline':True]['text':'*
     * @brief   This function is invoked after the formatter formatted an instruction.
     ','line_number':430,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':435,'multiline':True]['text':'*
     * @brief   This function refers to the main formatting function.
     *
     * Replacing this function allows for complete custom formatting, but indirectly disables all
     * other hooks except for `ZYDIS_FORMATTER_FUNC_PRE_INSTRUCTION` and
     * `ZYDIS_FORMATTER_FUNC_POST_INSTRUCTION`.
     ','line_number':437,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':446,'multiline':True]['text':' Operands                                                                                 ','line_number':447,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':448,'multiline':True]['text':'*
     * @brief   This function is invoked before the formatter formats an operand.
     ','line_number':450,'multiline':True]['text':'*
     * @brief   This function is invoked after the formatter formatted an operand.
     ','line_number':454,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':459,'multiline':True]['text':'*
     * @brief   This function is invoked to format a register operand.
     ','line_number':461,'multiline':True]['text':'*
     * @brief   This function is invoked to format a memory operand.
     *
     * Replacing this function might indirectly disable some specific calls to the
     * `ZYDIS_FORMATTER_FUNC_PRINT_TYPECAST`, `ZYDIS_FORMATTER_FUNC_PRINT_SEGMENT`,
     * `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS` and `ZYDIS_FORMATTER_FUNC_PRINT_DISP` functions.
     ','line_number':465,'multiline':True]['text':'*
     * @brief   This function is invoked to format a pointer operand.
     ','line_number':473,'multiline':True]['text':'*
     * @brief   This function is invoked to format an immediate operand.
     *
     * Replacing this function might indirectly disable some specific calls to the
     * `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS`, `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_REL` and
     * `ZYDIS_FORMATTER_FUNC_PRINT_IMM` functions.
     ','line_number':477,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':486,'multiline':True]['text':' Elemental tokens                                                                         ','line_number':487,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':488,'multiline':True]['text':'*
     * @brief   This function is invoked to print the instruction mnemonic.
     ','line_number':490,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':495,'multiline':True]['text':'*
     * @brief   This function is invoked to print a register.
     ','line_number':497,'multiline':True]['text':'*
     * @brief   This function is invoked to print absolute addresses.
     *
     * Conditionally invoked, if a runtime-address different to `ZYDIS_RUNTIME_ADDRESS_NONE` was
     * passed:
     * - `IMM` operands with relative address (e.g. `JMP`, `CALL`, ...)
     * - `MEM` operands with `EIP`/`RIP`-relative address (e.g. `MOV RAX, [RIP+0x12345678]`)
     *
     * Always invoked for:
     * - `MEM` operands with absolute address (e.g. `MOV RAX, [0x12345678]`)
     ','line_number':501,'multiline':True]['text':'*
     * @brief   This function is invoked to print relative addresses.
     *
     * Conditionally invoked, if `ZYDIS_RUNTIME_ADDRESS_NONE` was passed as runtime-address:
     * - `IMM` operands with relative address (e.g. `JMP`, `CALL`, ...)
     ','line_number':513,'multiline':True]['text':'*
     * @brief   This function is invoked to print a memory displacement value.
     *
     * If the memory displacement contains an address and a runtime-address different to
     * `ZYDIS_RUNTIME_ADDRESS_NONE` was passed, `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS` is called
     * instead.
     ','line_number':520,'multiline':True]['text':'*
     * @brief   This function is invoked to print an immediate value.
     *
     * If the immediate contains an address and a runtime-address different to
     * `ZYDIS_RUNTIME_ADDRESS_NONE` was passed, `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS` is called
     * instead.
     *
     * If the immediate contains an address and `ZYDIS_RUNTIME_ADDRESS_NONE` was passed as
     * runtime-address, `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_REL` is called instead.
     ','line_number':528,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':540,'multiline':True]['text':' Optional tokens                                                                          ','line_number':541,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':542,'multiline':True]['text':'*
     * @brief   This function is invoked to print the size of a memory operand (`INTEL` only).
     ','line_number':544,'multiline':True]['text':'*
     * @brief   This function is invoked to print the segment-register of a memory operand.
     ','line_number':548,'multiline':True]['text':'*
     * @brief   This function is invoked to print the instruction prefixes.
     ','line_number':552,'multiline':True]['text':'*
     * @brief   This function is invoked after formatting an operand to print a `EVEX`/`MVEX`
     *          decorator.
     ','line_number':556,'multiline':True]['text':' ---------------------------------------------------------------------------------------- ','line_number':562,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':564,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':568,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':574,'multiline':True]['text':' Decorator types                                                                                ','line_number':575,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':576,'multiline':True]['text':'*
 * @brief   Defines the `ZydisDecorator` enum.
 ','line_number':578,'multiline':True]['text':'*
     * @brief   The embedded-mask decorator.
     ','line_number':584,'multiline':True]['text':'*
     * @brief   The broadcast decorator.
     ','line_number':588,'multiline':True]['text':'*
     * @brief   The rounding-control decorator.
     ','line_number':592,'multiline':True]['text':'*
     * @brief   The suppress-all-exceptions decorator.
     ','line_number':596,'multiline':True]['text':'*
     * @brief   The register-swizzle decorator.
     ','line_number':600,'multiline':True]['text':'*
     * @brief   The conversion decorator.
     ','line_number':604,'multiline':True]['text':'*
     * @brief   The eviction-hint decorator.
     ','line_number':608,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':613,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':617,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':623,'multiline':True]['text':' Formatter context                                                                              ','line_number':624,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':625,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterContext` struct.
 ','line_number':629,'multiline':True]['text':'*
     * @brief   A pointer to the `ZydisDecodedInstruction` struct.
     ','line_number':634,'multiline':True]['text':'*
     * @brief   A pointer to the `ZydisDecodedOperand` struct.
     ','line_number':638,'multiline':True]['text':'*
     * @brief   The runtime address of the instruction.
     ','line_number':642,'multiline':True]['text':'*
     * @brief   A pointer to user-defined data.
     ','line_number':646,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':652,'multiline':True]['text':' Function prototypes                                                                            ','line_number':653,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':654,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterFunc` function prototype.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   buffer      A pointer to the `ZydisFormatterBuffer` struct.
 * @param   context     A pointer to the `ZydisFormatterContext` struct.
 *
 * @return  A zyan status code.
 *
 * Returning a status code other than `ZYAN_STATUS_SUCCESS` will immediately cause the formatting
 * process to fail (see exceptions below).
 *
 * Returning `ZYDIS_STATUS_SKIP_TOKEN` is valid for functions of the following types and will
 * instruct the formatter to omit the whole operand:
 * - `ZYDIS_FORMATTER_FUNC_PRE_OPERAND`
 * - `ZYDIS_FORMATTER_FUNC_POST_OPERAND`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_REG`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_MEM`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_PTR`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_IMM`
 *
 * This function prototype is used by functions of the following types:
 * - `ZYDIS_FORMATTER_FUNC_PRE_INSTRUCTION`
 * - `ZYDIS_FORMATTER_FUNC_POST_INSTRUCTION`
 * - `ZYDIS_FORMATTER_FUNC_PRE_OPERAND`
 * - `ZYDIS_FORMATTER_FUNC_POST_OPERAND`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_INSTRUCTION`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_MNEMONIC`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_PREFIXES`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_REG`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_MEM`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_PTR`
 * - `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_IMM`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_REL`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_DISP`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_IMM`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_TYPECAST`
 * - `ZYDIS_FORMATTER_FUNC_PRINT_SEGMENT`
 ','line_number':656,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterRegisterFunc` function prototype.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   buffer      A pointer to the `ZydisFormatterBuffer` struct.
 * @param   context     A pointer to the `ZydisFormatterContext` struct.
 * @param   reg         The register.
 *
 * @return  Returning a status code other than `ZYAN_STATUS_SUCCESS` will immediately cause the
 *          formatting process to fail.
 *
 * This function prototype is used by functions of the following types:
 * - `ZYDIS_FORMATTER_FUNC_PRINT_REGISTER`.
 ','line_number':699,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatterDecoratorFunc` function prototype.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   buffer      A pointer to the `ZydisFormatterBuffer` struct.
 * @param   context     A pointer to the `ZydisFormatterContext` struct.
 * @param   decorator   The decorator type.
 *
 * @return  Returning a status code other than `ZYAN_STATUS_SUCCESS` will immediately cause the
 *          formatting process to fail.
 *
 * This function type is used for:
 * - `ZYDIS_FORMATTER_FUNC_PRINT_DECORATOR`
 ','line_number':716,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':733,'multiline':True]['text':' Formatter struct                                                                               ','line_number':734,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':735,'multiline':True]['text':'*
 * @brief   Defines the `ZydisFormatter` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 *
 * Do NOT change the order of the function fields or the values of the `ZydisFormatterFunction`
 * enum.
 ','line_number':737,'multiline':True]['text':'*
     * @brief   The formatter style.
     ','line_number':748,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_PROP_FORCE_SIZE` property.
     ','line_number':752,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_PROP_FORCE_SEGMENT` property.
     ','line_number':756,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_PROP_FORCE_RELATIVE_BRANCHES` property.
     ','line_number':760,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_PROP_FORCE_RELATIVE_RIPREL` property.
     ','line_number':764,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_PROP_PRINT_BRANCH_SIZE` property.
     ','line_number':768,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_DETAILED_PREFIXES` property.
     ','line_number':772,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_ADDR_BASE` property.
     ','line_number':776,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_ADDR_SIGNEDNESS` property.
     ','line_number':780,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_ADDR_PADDING_ABSOLUTE` property.
     ','line_number':784,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_ADDR_PADDING_RELATIVE` property.
     ','line_number':788,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_DISP_BASE` property.
     ','line_number':792,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_DISP_SIGNEDNESS` property.
     ','line_number':796,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_DISP_PADDING` property.
     ','line_number':800,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_IMM_BASE` property.
     ','line_number':804,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_IMM_SIGNEDNESS` property.
     ','line_number':808,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_IMM_PADDING` property.
     ','line_number':812,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_UPPERCASE_PREFIXES` property.
     ','line_number':816,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_UPPERCASE_MNEMONIC` property.
     ','line_number':820,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_UPPERCASE_REGISTERS` property.
     ','line_number':824,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_UPPERCASE_TYPECASTS` property.
     ','line_number':828,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_UPPERCASE_DECORATORS` property.
     ','line_number':832,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_HEX_UPPERCASE` property.
     ','line_number':836,'multiline':True]['text':'*
     * @brief   The number formats for all numeric bases.
     *
     * Index 0 = prefix
     * Index 1 = suffix
     ','line_number':840,'multiline':True]['text':'*
         * @brief   A pointer to the `ZyanStringView` to use as prefix/suffix.
         ','line_number':848,'multiline':True]['text':'*
         * @brief   The `ZyanStringView` to use as prefix/suffix
         ','line_number':852,'multiline':True]['text':'*
         * @brief   The actual string data.
         ','line_number':856,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRE_INSTRUCTION` function.
     ','line_number':861,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_POST_INSTRUCTION` function.
     ','line_number':865,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_FORMAT_INSTRUCTION` function.
     ','line_number':869,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRE_OPERAND` function.
     ','line_number':873,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_POST_OPERAND` function.
     ','line_number':877,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_REG` function.
     ','line_number':881,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_MEM` function.
     ','line_number':885,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_PTR` function.
     ','line_number':889,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_FORMAT_OPERAND_IMM` function.
     ','line_number':893,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_MNEMONIC function.
     ','line_number':897,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_REGISTER` function.
     ','line_number':901,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_ABS` function.
     ','line_number':905,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_ADDRESS_REL` function.
     ','line_number':909,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_DISP` function.
     ','line_number':913,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_IMM` function.
     ','line_number':917,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_TYPECAST` function.
     ','line_number':921,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_SEGMENT` function.
     ','line_number':925,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_PREFIXES` function.
     ','line_number':929,'multiline':True]['text':'*
     * @brief   The `ZYDIS_FORMATTER_FUNC_PRINT_DECORATOR` function.
     ','line_number':933,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':939,'multiline':True]['text':' ============================================================================================== ','line_number':941,'multiline':True]['text':' Exported functions                                                                             ','line_number':942,'multiline':True]['text':' ============================================================================================== ','line_number':943,'multiline':True]['text':'*
 * @addtogroup formatter Formatter
 * @brief Functions allowing formatting of previously decoded instructions to human readable text.
 * @{
 ','line_number':945,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':951,'multiline':True]['text':' Initialization                                                                                 ','line_number':952,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':953,'multiline':True]['text':'*
 * @brief   Initializes the given `ZydisFormatter` instance.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   style       The base formatter style (either `AT&T` or `Intel` style).
 *
 * @return  A zyan status code.
 ','line_number':955,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':965,'multiline':True]['text':' Setter                                                                                         ','line_number':966,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':967,'multiline':True]['text':'*
 * @brief   Changes the value of the specified formatter `property`.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   property    The id of the formatter-property.
 * @param   value       The new value.
 *
 * @return  A zyan status code.
 *
 * This function returns `ZYAN_STATUS_INVALID_OPERATION` if a property can't be changed for the
 * current formatter-style.
 ','line_number':969,'multiline':True]['text':'*
 * @brief   Replaces a formatter function with a custom callback and/or retrieves the currently
 *          used function.
 *
 * @param   formatter   A pointer to the `ZydisFormatter` instance.
 * @param   type        The formatter function-type.
 * @param   callback    A pointer to a variable that contains the pointer of the callback function
 *                      and receives the pointer of the currently used function.
 *
 * @return  A zyan status code.
 *
 * Call this function with `callback` pointing to a `ZYAN_NULL` value to retrieve the currently
 * used function without replacing it.
 *
 * This function returns `ZYAN_STATUS_INVALID_OPERATION` if a function can't be replaced for the
 * current formatter-style.
 ','line_number':984,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1004,'multiline':True]['text':' Formatting                                                                                     ','line_number':1005,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1006,'multiline':True]['text':'*
 * @brief   Formats the given instruction and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in characters).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 *
 * @return  A zyan status code.
 ','line_number':1008,'multiline':True]['text':'*
 * @brief   Formats the given instruction and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in characters).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   user_data       A pointer to user-defined data which can be used in custom formatter
 *                          callbacks.
 *
 * @return  A zyan status code.
 ','line_number':1024,'multiline':True]['text':'*
 * @brief   Formats the given operand and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   index           The index of the operand to format.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in characters).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 *
 * @return  A zyan status code.
 *
 * Use `ZydisFormatterFormatInstruction` or `ZydisFormatterFormatInstructionEx` to format a
 * complete instruction.
 ','line_number':1042,'multiline':True]['text':'*
 * @brief   Formats the given operand and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   index           The index of the operand to format.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in characters).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   user_data       A pointer to user-defined data which can be used in custom formatter
 *                          callbacks.
 *
 * @return  A zyan status code.
 *
 * Use `ZydisFormatterFormatInstruction` or `ZydisFormatterFormatInstructionEx` to format a
 * complete instruction.
 ','line_number':1062,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1084,'multiline':True]['text':' Tokenizing                                                                                     ','line_number':1085,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1086,'multiline':True]['text':'*
 * @brief   Tokenizes the given instruction and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in bytes).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   token           Receives a pointer to the first token in the output buffer.
 *
 * @return  A zyan status code.
 ','line_number':1088,'multiline':True]['text':'*
 * @brief   Tokenizes the given instruction and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in bytes).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   token           Receives a pointer to the first token in the output buffer.
 * @param   user_data       A pointer to user-defined data which can be used in custom formatter
 *                          callbacks.
 *
 * @return  A zyan status code.
 ','line_number':1105,'multiline':True]['text':'*
 * @brief   Tokenizes the given operand and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   index           The index of the operand to format.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in bytes).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   token           Receives a pointer to the first token in the output buffer.
 *
 * @return  A zyan status code.
 *
 * Use `ZydisFormatterTokenizeInstruction` or `ZydisFormatterTokenizeInstructionEx` to tokenize a
 * complete instruction.
 ','line_number':1124,'multiline':True]['text':'*
 * @brief   Tokenizes the given operand and writes it into the output buffer.
 *
 * @param   formatter       A pointer to the `ZydisFormatter` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   index           The index of the operand to format.
 * @param   buffer          A pointer to the output buffer.
 * @param   length          The length of the output buffer (in bytes).
 * @param   runtime_address The runtime address of the instruction or `ZYDIS_RUNTIME_ADDRESS_NONE`
 *                          to print relative addresses.
 * @param   token           Receives a pointer to the first token in the output buffer.
 * @param   user_data       A pointer to user-defined data which can be used in custom formatter
 *                          callbacks.
 *
 * @return  A zyan status code.
 *
 * Use `ZydisFormatterTokenizeInstruction` or `ZydisFormatterTokenizeInstructionEx` to tokenize a
 * complete instruction.
 ','line_number':1145,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1168,'multiline':True]['text':'*
 * @}
 ','line_number':1170,'multiline':True]['text':' ============================================================================================== ','line_number':1174,'multiline':True]['text':' ZYDIS_FORMATTER_H ','line_number':1180,'multiline':True]