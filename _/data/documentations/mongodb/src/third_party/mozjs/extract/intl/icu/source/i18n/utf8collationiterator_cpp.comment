['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2012-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* utf8collationiterator.cpp
*
* created on: 2012nov12 (from utf16collationiterator.cpp & uitercollationiterator.cpp)
* created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':'errorCode','line_number':45,'multiline':True]['text':' Optimized combination of U8_NEXT_OR_FFFD() and UTRIE2_U8_NEXT32().','line_number':50,'multiline':False]['text':' ASCII 00..7F','line_number':53,'multiline':False]['text':' U+0800..U+FFFF except surrogates','line_number':61,'multiline':False]['text':' U+0080..U+07FF','line_number':66,'multiline':False]['text':' Function call for supplementary code points and error cases.','line_number':72,'multiline':False]['text':' Illegal byte sequences yield U+FFFD.','line_number':73,'multiline':False]['text':'errorCode','line_number':95,'multiline':True]['text':'errorCode','line_number':109,'multiline':True]['text':'errorCode','line_number':119,'multiline':True]['text':'errorCode','line_number':124,'multiline':True]['text':' FCDUTF8CollationIterator ------------------------------------------------ ***','line_number':128,'multiline':False]['text':' Combination of UTF8CollationIterator::handleNextCE32() with FCD check fastpath.','line_number':154,'multiline':False]['text':' ASCII 00..7F','line_number':161,'multiline':False]['text':' U+0800..U+FFFF except surrogates','line_number':169,'multiline':False]['text':' return CE32(BMP)','line_number':177,'multiline':False]['text':' U+0080..U+07FF','line_number':180,'multiline':False]['text':' Function call for supplementary code points and error cases.','line_number':190,'multiline':False]['text':' Illegal byte sequences yield U+FFFD.','line_number':191,'multiline':False]['text':' The lowest code point with ccc!=0 is U+0300 which is CC 80 in UTF-8.','line_number':224,'multiline':False]['text':' CJK U+4000..U+DFFF except U+Axxx are also FCD-inert. (Lead bytes E4..ED except EA.)','line_number':225,'multiline':False]['text':' c is not FCD-inert, therefore it is not U+FFFD and it has a valid byte sequence','line_number':280,'multiline':False]['text':' and we can use U8_LENGTH() rather than a previous-position variable.','line_number':281,'multiline':False]['text':' c is not FCD-inert, therefore it is not U+FFFD and it has a valid byte sequence','line_number':318,'multiline':False]['text':' and we can use U8_LENGTH() rather than a previous-position variable.','line_number':319,'multiline':False]['text':' Specify the class to avoid a virtual-function indirection.','line_number':342,'multiline':False]['text':' In Java, we would declare this class final.','line_number':343,'multiline':False]['text':' Specify the class to avoid a virtual-function indirection.','line_number':351,'multiline':False]['text':' In Java, we would declare this class final.','line_number':352,'multiline':False]['text':' Turn around from backward checking.','line_number':364,'multiline':False]['text':' Check forward.','line_number':367,'multiline':False]['text':' pos < limit','line_number':368,'multiline':False]['text':' Stay in FCD segment.','line_number':369,'multiline':False]['text':' Reached the end of the FCD segment.','line_number':372,'multiline':False]['text':' The input text segment is FCD, extend it forward.','line_number':374,'multiline':False]['text':' The input text segment needed to be normalized.','line_number':376,'multiline':False]['text':' Switch to checking forward from it.','line_number':377,'multiline':False]['text':' The input text [start..pos[ passes the FCD check.','line_number':388,'multiline':False]['text':' Collect the characters being checked, in case they need to be normalized.','line_number':390,'multiline':False]['text':' Fetch the next character and its fcd16 value.','line_number':394,'multiline':False]['text':' FCD boundary before this character.','line_number':401,'multiline':False]['text':' Fails FCD check. Find the next FCD boundary and normalize.','line_number':407,'multiline':False]['text':' FCD boundary after the last character.','line_number':426,'multiline':False]['text':' Turn around from forward checking.','line_number':443,'multiline':False]['text':' Check backward.','line_number':446,'multiline':False]['text':' pos > start','line_number':447,'multiline':False]['text':' Stay in FCD segment.','line_number':448,'multiline':False]['text':' Reached the start of the FCD segment.','line_number':451,'multiline':False]['text':' The input text segment is FCD, extend it backward.','line_number':453,'multiline':False]['text':' The input text segment needed to be normalized.','line_number':455,'multiline':False]['text':' Switch to checking backward from it.','line_number':456,'multiline':False]['text':' The input text [pos..limit[ passes the FCD check.','line_number':467,'multiline':False]['text':' Collect the characters being checked, in case they need to be normalized.','line_number':469,'multiline':False]['text':' Fetch the previous character and its fcd16 value.','line_number':473,'multiline':False]['text':' FCD boundary after this character.','line_number':480,'multiline':False]['text':' Fails FCD check. Find the previous FCD boundary and normalize.','line_number':487,'multiline':False]['text':' FCD boundary before the following character.','line_number':508,'multiline':False]['text':' NFD without argument checking.','line_number':521,'multiline':False]['text':' !UCONFIG_NO_COLLATION','line_number':529,'multiline':False]