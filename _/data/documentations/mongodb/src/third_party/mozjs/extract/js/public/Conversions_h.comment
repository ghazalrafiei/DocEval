['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ECMAScript conversion operations. ','line_number':7,'multiline':True]['text':' size_t','line_number':19,'multiline':False]['text':' {u,}int{8,16,32,64}_t','line_number':20,'multiline':False]['text':' JS_PUBLIC_API','line_number':24,'multiline':False]['text':' DO NOT CALL THIS. Use JS::ToBoolean. ','line_number':31,'multiline':True]['text':' DO NOT CALL THIS.  Use JS::ToNumber. ','line_number':34,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToInt8. ','line_number':38,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToUint8. ','line_number':42,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToInt16. ','line_number':46,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToInt32. ','line_number':50,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToUint32. ','line_number':54,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToUint16. ','line_number':58,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToInt64. ','line_number':62,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToUint64. ','line_number':66,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToString. ','line_number':70,'multiline':True]['text':' DO NOT CALL THIS. Use JS::ToObject. ','line_number':73,'multiline':True]['text':' namespace js','line_number':77,'multiline':False]['text':'*
 * Assert that we're not doing GC on cx, that we're in a request as
 * needed, and that the compartments for cx and v are correct.
 * Also check that GC would be safe at this point.
 ','line_number':84,'multiline':True]['text':' JS_DEBUG ','line_number':92,'multiline':True]['text':' namespace detail','line_number':94,'multiline':False]['text':'*
 * ES6 draft 20141224, 7.1.1, second algorithm.
 *
 * Most users shouldn't call this -- use JS::ToBoolean, ToNumber, or ToString
 * instead.  This will typically only be called from custom convert hooks that
 * wish to fall back to the ES6 default conversion behavior shared by most
 * objects in JS, codified as OrdinaryToPrimitive.
 ','line_number':96,'multiline':True]['text':' ES6 draft 20141224, 7.1.2. ','line_number':108,'multiline':True]['text':' The slow path handles strings, BigInts and objects. ','line_number':127,'multiline':True]['text':' ES6 draft 20141224, 7.1.3. ','line_number':131,'multiline':True]['text':' ES2020 draft rev 6b05bc56ba4e3c7a2b9922c4282d9eb844426d9b','line_number':142,'multiline':False]['text':' 7.1.5 ToInteger ( argument )','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' Specialized for double values.','line_number':145,'multiline':False]['text':' Add zero to convert -0 to +0.','line_number':158,'multiline':False]['text':' ES6 draft 20141224, 7.1.5. ','line_number':161,'multiline':True]['text':' ES6 draft 20141224, 7.1.6. ','line_number':172,'multiline':True]['text':' ES6 draft 20141224, 7.1.7. ','line_number':183,'multiline':True]['text':' ES6 draft 20141224, 7.1.8. ','line_number':194,'multiline':True]['text':' ES6 draft 20141224, 7.1.9 ','line_number':205,'multiline':True]['text':' ES6 ECMA-262, 7.1.10 ','line_number':216,'multiline':True]['text':'
 * Non-standard, with behavior similar to that of ToInt32, except in its
 * producing an int64_t.
 ','line_number':227,'multiline':True]['text':'
 * Non-standard, with behavior similar to that of ToUint32, except in its
 * producing a uint64_t.
 ','line_number':241,'multiline':True]['text':' ES6 draft 20141224, 7.1.12. ','line_number':255,'multiline':True]['text':' ES6 draft 20141224, 7.1.13. ','line_number':265,'multiline':True]['text':'*
 * Convert a double value to UnsignedInteger (an unsigned integral type) using
 * ECMAScript-style semantics (that is, in like manner to how ECMAScript's
 * ToInt32 converts to int32_t).
 *
 *   If d is infinite or NaN, return 0.
 *   Otherwise compute d2 = sign(d) * floor(abs(d)), and return the
 *   UnsignedInteger value congruent to d2 % 2**(bit width of UnsignedInteger).
 *
 * The algorithm below is inspired by that found in
 * <https://trac.webkit.org/changeset/67825/webkit/trunk/JavaScriptCore/runtime/JSValue.cpp>
 * but has been generalized to all integer widths.
 ','line_number':275,'multiline':True]['text':' Extract the exponent component.  (Be careful here!  It's not technically','line_number':296,'multiline':False]['text':' the exponent in NaN, infinities, and subnormals.)','line_number':297,'multiline':False]['text':' If the exponent's less than zero, abs(d) < 1, so the result is 0.  (This','line_number':303,'multiline':False]['text':' also handles subnormals.)','line_number':304,'multiline':False]['text':' If the exponent is greater than or equal to the bits of precision of a','line_number':311,'multiline':False]['text':' double plus UnsignedInteger's width, the number is either infinite, NaN,','line_number':312,'multiline':False]['text':' or too large to have lower-order bits in the congruent value.  (Example:','line_number':313,'multiline':False]['text':' 2**84 is exactly representable as a double.  The next exact double is','line_number':314,'multiline':False]['text':' 2**84 + 2**32.  Thus if UnsignedInteger is uint32_t, an exponent >= 84','line_number':315,'multiline':False]['text':' implies floor(abs(d)) == 0 mod 2**32.)  Return 0 in all these cases.','line_number':316,'multiline':False]['text':' The significand contains the bits that will determine the final result.','line_number':322,'multiline':False]['text':' Shift those bits left or right, according to the exponent, to their','line_number':323,'multiline':False]['text':' locations in the unsigned binary representation of floor(abs(d)).','line_number':324,'multiline':False]['text':' Two further complications remain.  First, |result| may contain bogus','line_number':332,'multiline':False]['text':' sign/exponent bits.  Second, IEEE-754 numbers' significands (excluding','line_number':333,'multiline':False]['text':' subnormals, but we already handled those) have an implicit leading 1','line_number':334,'multiline':False]['text':' which may affect the final result.','line_number':335,'multiline':False]['text':'','line_number':336,'multiline':False]['text':' It may appear that there's complexity here depending on how ResultWidth','line_number':337,'multiline':False]['text':' and DoubleExponentShift relate, but it turns out there's not.','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' Assume ResultWidth < DoubleExponentShift:','line_number':340,'multiline':False]['text':'   Only right-shifts leave bogus bits in |result|.  For this to happen,','line_number':341,'multiline':False]['text':'   we must right-shift by > |DoubleExponentShift - ResultWidth|, implying','line_number':342,'multiline':False]['text':'   |exponent < ResultWidth|.','line_number':343,'multiline':False]['text':'   The implicit leading bit only matters if it appears in the final','line_number':344,'multiline':False]['text':'   result -- if |2**exponent mod 2**ResultWidth != 0|.  This implies','line_number':345,'multiline':False]['text':'   |exponent < ResultWidth|.','line_number':346,'multiline':False]['text':' Otherwise assume ResultWidth >= DoubleExponentShift:','line_number':347,'multiline':False]['text':'   Any left-shift less than |ResultWidth - DoubleExponentShift| leaves','line_number':348,'multiline':False]['text':'   bogus bits in |result|.  This implies |exponent < ResultWidth|.  Any','line_number':349,'multiline':False]['text':'   right-shift less than |ResultWidth| does too, which implies','line_number':350,'multiline':False]['text':'   |DoubleExponentShift - ResultWidth < exponent|.  By assumption, then,','line_number':351,'multiline':False]['text':'   |exponent| is negative, but we excluded that above.  So bogus bits','line_number':352,'multiline':False]['text':'   need only |exponent < ResultWidth|.','line_number':353,'multiline':False]['text':'   The implicit leading bit matters identically to the other case, so','line_number':354,'multiline':False]['text':'   again, |exponent < ResultWidth|.','line_number':355,'multiline':False]['text':' remove bogus bits','line_number':359,'multiline':False]['text':' add the implicit bit','line_number':360,'multiline':False]['text':' Compute the congruent value in the signed range.','line_number':363,'multiline':False]['text':' clang crashes compiling this when targeting arm:','line_number':379,'multiline':False]['text':' https://llvm.org/bugs/show_bug.cgi?id=22974','line_number':380,'multiline':False]['text':' We use a pure integer solution here. In the 'softfp' ABI, the argument','line_number':390,'multiline':False]['text':' will start in r0 and r1, and VFP can't do all of the necessary ECMA','line_number':391,'multiline':False]['text':' conversions by itself so some integer code will be required anyway. A','line_number':392,'multiline':False]['text':' hybrid solution is faster on A9, but this pure integer solution is','line_number':393,'multiline':False]['text':' notably faster for A8.','line_number':394,'multiline':False]['text':' %0 is the result register, and may alias either of the %[QR]1','line_number':396,'multiline':False]['text':'    registers.','line_number':397,'multiline':False]['text':' %Q4 holds the lower part of the mantissa.','line_number':398,'multiline':False]['text':' %R4 holds the sign, exponent, and the upper part of the mantissa.','line_number':399,'multiline':False]['text':' %1, %2 and %3 are used as temporary values.','line_number':400,'multiline':False]['text':' Extract the exponent.','line_number':402,'multiline':False]['text':' Clear the sign.','line_number':404,'multiline':False]['text':' Set the implicit top bit of the mantissa. This clobbers a bit of the','line_number':406,'multiline':False]['text':' exponent, but we have already extracted that.','line_number':407,'multiline':False]['text':' Special Cases','line_number':410,'multiline':False]['text':'   We should return zero in the following special cases:','line_number':411,'multiline':False]['text':'    - Exponent is 0x000 - 1023: +/-0 or subnormal.','line_number':412,'multiline':False]['text':'    - Exponent is 0x7ff - 1023: +/-INFINITY or NaN','line_number':413,'multiline':False]['text':'      - This case is implicitly handled by the standard code path','line_number':414,'multiline':False]['text':'        anyway, as shifting the mantissa up by the exponent will','line_number':415,'multiline':False]['text':'        result in '0'.','line_number':416,'multiline':False]['text':'','line_number':417,'multiline':False]['text':' The result is composed of the mantissa, prepended with '1' and','line_number':418,'multiline':False]['text':' bit-shifted left by the (decoded) exponent. Note that because the','line_number':419,'multiline':False]['text':' r1[20] is the bit with value '1', r1 is effectively already shifted','line_number':420,'multiline':False]['text':' (left) by 20 bits, and r0 is already shifted by 52 bits.','line_number':421,'multiline':False]['text':' Adjust the exponent to remove the encoding offset. If the decoded','line_number':423,'multiline':False]['text':' exponent is negative, quickly bail out with '0' as such values round to','line_number':424,'multiline':False]['text':' zero anyway. This also catches +/-0 and subnormals.','line_number':425,'multiline':False]['text':'  %1 = (decoded) exponent >= 0','line_number':430,'multiline':False]['text':'  %R4 = upper mantissa and sign','line_number':431,'multiline':False]['text':' ---- Lower Mantissa ----','line_number':433,'multiline':False]['text':' Calculate exp-52','line_number':434,'multiline':False]['text':' Shift r0 left by exp-52.','line_number':437,'multiline':False]['text':' Ensure that we don't overflow ARM's 8-bit shift operand range.','line_number':438,'multiline':False]['text':' We need to handle anything up to an 11-bit value here as we know that','line_number':439,'multiline':False]['text':' 52 <= exp <= 1024 (0x400). Any shift beyond 31 bits results in zero','line_number':440,'multiline':False]['text':' anyway, so as long as we don't touch the bottom 5 bits, we can use','line_number':441,'multiline':False]['text':' a logical OR to push long shifts into the 32 <= (exp&0xff) <= 255','line_number':442,'multiline':False]['text':' range.','line_number':443,'multiline':False]['text':' We can now perform a straight shift, avoiding the need for any','line_number':446,'multiline':False]['text':' conditional instructions or extra branches.','line_number':447,'multiline':False]['text':' Shift r0 right by 52-exp.','line_number':450,'multiline':False]['text':' We know that 0 <= exp < 52, and we can shift up to 255 bits so','line_number':451,'multiline':False]['text':' 52-exp will always be a valid shift and we can sk%3 the range','line_number':452,'multiline':False]['text':' check for this case.','line_number':453,'multiline':False]['text':'  %1 = (decoded) exponent','line_number':457,'multiline':False]['text':'  %R4 = upper mantissa and sign','line_number':458,'multiline':False]['text':'  %Q4 = partially-converted integer','line_number':459,'multiline':False]['text':' ---- Upper Mantissa ----','line_number':462,'multiline':False]['text':' This is much the same as the lower mantissa, with a few different','line_number':463,'multiline':False]['text':' boundary checks and some masking to hide the exponent & sign bit in the','line_number':464,'multiline':False]['text':' upper word.','line_number':465,'multiline':False]['text':' Note that the upper mantissa is pre-shifted by 20 in %R4, but we shift','line_number':466,'multiline':False]['text':' it left more to remove the sign and exponent so it is effectively','line_number':467,'multiline':False]['text':' pre-shifted by 31 bits.','line_number':468,'multiline':False]['text':' Calculate exp-31','line_number':469,'multiline':False]['text':' Re-use %1 as a temporary register.','line_number':470,'multiline':False]['text':' Shift %R4 left by exp-31.','line_number':473,'multiline':False]['text':' Avoid overflowing the 8-bit shift range, as before.','line_number':474,'multiline':False]['text':' Perform the shift.','line_number':477,'multiline':False]['text':' Shift r1 right by 31-exp.','line_number':480,'multiline':False]['text':' We know that 0 <= exp < 31, and we can shift up to 255 bits so','line_number':481,'multiline':False]['text':' 31-exp will always be a valid shift and we can skip the range','line_number':482,'multiline':False]['text':' check for this case.','line_number':483,'multiline':False]['text':' Calculate 31-exp from -(exp-31)','line_number':484,'multiline':False]['text':' Thumb-2 can't do "LSR %3" in "orr".','line_number':485,'multiline':False]['text':'  %Q4 = partially-converted integer (lower)','line_number':487,'multiline':False]['text':'  %R4 = upper mantissa and sign','line_number':488,'multiline':False]['text':'  %2 = partially-converted integer (upper)','line_number':489,'multiline':False]['text':' Combine the converted parts.','line_number':492,'multiline':False]['text':' Negate the result if we have to, and move it to %0 in the process. To','line_number':494,'multiline':False]['text':' avoid conditionals, we can do this by inverting on %R4[31], then adding','line_number':495,'multiline':False]['text':' %R4[31]>>31.','line_number':496,'multiline':False]['text':' +/-INFINITY, +/-0, subnormals, NaNs, and anything else out-of-range','line_number':501,'multiline':False]['text':' that will result in a conversion of '0'.','line_number':502,'multiline':False]['text':' defined (__arm__) && MOZ_IS_GCC','line_number':511,'multiline':False]['text':' namespace detail','line_number':533,'multiline':False]['text':' WEBIDL 4.2.4 ','line_number':540,'multiline':True]['text':' ECMA-262 7.1.10 ToUInt8() specialized for doubles. ','line_number':543,'multiline':True]['text':' WEBIDL 4.2.6 ','line_number':546,'multiline':True]['text':' ES5 9.5 ToInt32 (specialized for doubles). ','line_number':551,'multiline':True]['text':' ES5 9.6 (specialized for doubles). ','line_number':554,'multiline':True]['text':' WEBIDL 4.2.10 ','line_number':557,'multiline':True]['text':' WEBIDL 4.2.11 ','line_number':560,'multiline':True]['text':'*
 * An amount of space large enough to store the null-terminated result of
 * |ToString| on any Number.
 *
 * The <https://tc39.es/ecma262/#sec-tostring-applied-to-the-number-type>
 * |NumberToString| algorithm is specified in terms of results, not an
 * algorithm.  It is extremely unclear from the algorithm's definition what its
 * longest output can be.  |-(2**-19 - 2**-72)| requires 25 + 1 characters and
 * is believed to be at least *very close* to the upper bound, so we round that
 * *very generously* upward to a 64-bit pointer-size boundary (to be extra
 * cautious) and assume that's adequate.
 *
 * If you can supply better reasoning for a tighter bound, file a bug to improve
 * this!
 ','line_number':563,'multiline':True]['text':'*
 * Store in |out| the null-terminated, base-10 result of |ToString| applied to
 * |d| per <https://tc39.es/ecma262/#sec-tostring-applied-to-the-number-type>.
 * (This will produce "NaN", "-Infinity", or "Infinity" for non-finite |d|.)
 ','line_number':580,'multiline':True]['text':' namespace JS','line_number':588,'multiline':False]['text':' js_Conversions_h ','line_number':590,'multiline':True]