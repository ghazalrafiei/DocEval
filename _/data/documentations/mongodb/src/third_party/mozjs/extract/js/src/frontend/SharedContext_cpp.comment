['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' FunctionSyntaxKind','line_number':12,'multiline':False]['text':' js::FunctionFlags','line_number':14,'multiline':False]['text':' js::GeneratorKind, js::FunctionAsyncKind','line_number':15,'multiline':False]['text':' js::FillImmutableFlagsFromCompileOptionsForTopLevel, js::FillImmutableFlagsFromCompileOptionsForFunction','line_number':16,'multiline':False]['text':' ImmutableScriptFlagsEnum','line_number':17,'multiline':False]['text':' Compute the script kind "input" flags.','line_number':41,'multiline':False]['text':' Initialize the transitive "input" flags. These are applied to all','line_number':53,'multiline':False]['text':' SharedContext in this compilation and generally cannot be determined from','line_number':54,'multiline':False]['text':' the source text alone.','line_number':55,'multiline':False]['text':' Initialize the strict flag. This may be updated by the parser as we observe','line_number':64,'multiline':False]['text':' further directives in the body.','line_number':65,'multiline':False]['text':' Eval inherits syntax and binding rules from enclosing environment.','line_number':87,'multiline':False]['text':' HasModuleGoal and useAsm are inherited from enclosing context.','line_number':154,'multiline':False]['text':' Arrow functions don't have their own `this` binding.','line_number':158,'multiline':False]['text':' Record this function into the enclosing class statement so that','line_number':167,'multiline':False]['text':' finishClassConstructor can final processing. Due to aborted syntax','line_number':168,'multiline':False]['text':' parses (eg, because of asm.js), this may have already been set with an','line_number':169,'multiline':False]['text':' early FunctionBox. In that case, the FunctionNode should still match.','line_number':170,'multiline':False]['text':' For lazy functions inside a function which is being compiled, we cache','line_number':261,'multiline':False]['text':' the incomplete scope object while compiling, and store it to the','line_number':262,'multiline':False]['text':' BaseScript once the enclosing script successfully finishes compilation','line_number':263,'multiline':False]['text':' in FunctionBox::finish.','line_number':264,'multiline':False]['text':' Update flags we will use to allocate the JSFunction.','line_number':277,'multiline':False]['text':' isGenerator = ','line_number':300,'multiline':True]['text':' isAsync = ','line_number':301,'multiline':True]['text':' We are delazifying and the original PrivateScriptData has the member','line_number':377,'multiline':False]['text':' initializer information already. See: JSScript::fullyInitFromStencil.','line_number':378,'multiline':False]['text':' namespace frontend','line_number':405,'multiline':False]['text':' namespace js','line_number':406,'multiline':False]