['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' for Span','line_number':14,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':20,'multiline':False]['text':' js::wasm::DebugFrame','line_number':28,'multiline':False]['text':' namespace wasm','line_number':51,'multiline':False]['text':' [SMDOC] VM stack layout','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' A JSRuntime's stack consists of a linked list of activations. Every','line_number':55,'multiline':False]['text':' activation contains a number of scripted frames that are either running in','line_number':56,'multiline':False]['text':' the interpreter (InterpreterActivation) or JIT code (JitActivation). The','line_number':57,'multiline':False]['text':' frames inside a single activation are contiguous: whenever C++ calls back','line_number':58,'multiline':False]['text':' into JS, a new activation is pushed.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' Every activation is tied to a single JSContext and JS::Compartment. This','line_number':61,'multiline':False]['text':' means we can reconstruct a given context's stack by skipping activations','line_number':62,'multiline':False]['text':' belonging to other contexts. This happens whenever an embedding enters the JS','line_number':63,'multiline':False]['text':' engine on cx1 and then, from a native called by the JS engine, reenters the','line_number':64,'multiline':False]['text':' VM on cx2.','line_number':65,'multiline':False]['text':' Interpreter frames (InterpreterFrame)','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' Each interpreter script activation (global or function code) is given a','line_number':69,'multiline':False]['text':' fixed-size header (js::InterpreterFrame). The frame contains bookkeeping','line_number':70,'multiline':False]['text':' information about the activation and links to the previous frame.','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' The values after an InterpreterFrame in memory are its locals followed by its','line_number':73,'multiline':False]['text':' expression stack. InterpreterFrame::argv_ points to the frame's arguments.','line_number':74,'multiline':False]['text':' Missing formal arguments are padded with |undefined|, so the number of','line_number':75,'multiline':False]['text':' arguments is always >= the number of formals.','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' The top of an activation's current frame's expression stack is pointed to by','line_number':78,'multiline':False]['text':' the activation's "current regs", which contains the stack pointer 'sp'. In','line_number':79,'multiline':False]['text':' the interpreter, sp is adjusted as individual values are pushed and popped','line_number':80,'multiline':False]['text':' from the stack and the InterpreterRegs struct (pointed to by the','line_number':81,'multiline':False]['text':' InterpreterActivation) is a local var of js::Interpret.','line_number':82,'multiline':False]['text':' namespace js','line_number':87,'multiline':False]['text':'***************************************************************************','line_number':89,'multiline':True]['text':' namespace jit','line_number':96,'multiline':False]['text':'*
 * Pointer to a live JS or WASM stack frame.
 ','line_number':98,'multiline':True]['text':'***************************************************************************','line_number':267,'multiline':True]['text':' frame is for a constructor invocation ','line_number':271,'multiline':True]['text':' frame is for a resumed generator invocation ','line_number':273,'multiline':True]['text':' Function prologue state ','line_number':275,'multiline':True]['text':' callobj created for function or var env for eval ','line_number':277,'multiline':True]['text':' ArgumentsObject created for needsArgsObj script ','line_number':278,'multiline':True]['text':' Lazy frame initialization ','line_number':280,'multiline':True]['text':' frame has rval_ set ','line_number':281,'multiline':True]['text':' Debugger state ','line_number':283,'multiline':True]['text':' see DebugScopes::updateLiveScopes ','line_number':284,'multiline':True]['text':'
     * See comment above 'isDebuggee' in Realm.h for explanation of
     * invariants of debuggee compartments, scripts, and frames.
     ','line_number':286,'multiline':True]['text':' Execution is being observed by Debugger ','line_number':290,'multiline':True]['text':' Used in tracking calls and profiling (see vm/GeckoProfiler.cpp) ','line_number':292,'multiline':True]['text':' Gecko Profiler was notified of entry ','line_number':293,'multiline':True]['text':'
     * If set, we entered one of the JITs and ScriptFrameIter should skip
     * this frame.
     ','line_number':295,'multiline':True]['text':'
     * If set, this frame has been on the stack when
     * |js::SavedStacks::saveCurrentStack| was called, and so there is a
     * |js::SavedFrame| object cached for this frame.
     ','line_number':301,'multiline':True]['text':' bits described by Flags ','line_number':309,'multiline':True]['text':' number of actual arguments, for function frames ','line_number':310,'multiline':True]['text':' the script we're executing ','line_number':311,'multiline':True]['text':' current environment chain ','line_number':312,'multiline':True]['text':' if HAS_RVAL, return value of the frame ','line_number':313,'multiline':True]['text':' if HAS_ARGS_OBJ, the call's arguments object ','line_number':314,'multiline':True]['text':'
   * Previous frame and its pc and sp. Always nullptr for
   * InterpreterActivation's entry frame, always non-nullptr for inline
   * frames.
   ','line_number':316,'multiline':True]['text':'
   * For an eval-in-frame DEBUGGER_EVAL frame, the frame in whose scope
   * we're evaluating code. Iteration treats this as our previous frame.
   ','line_number':325,'multiline':True]['text':' If hasArgs(), points to frame's arguments. ','line_number':331,'multiline':True]['text':' Used to release memory for this frame. ','line_number':332,'multiline':True]['text':'
   * The utilities are private since they are not able to assert that only
   * unaliased vars/formals are accessed. Normal code should prefer the
   * InterpreterFrame::unaliased* members (or InterpreterRegs::stackDepth for
   * the usual "depth is at least" assertions).
   ','line_number':339,'multiline':True]['text':'
   * Frame initialization, called by InterpreterStack operations after acquiring
   * the raw memory for the frame:
   ','line_number':353,'multiline':True]['text':' Used for Invoke and Interpret. ','line_number':358,'multiline':True]['text':' Used for eval, module or global frames. ','line_number':363,'multiline':True]['text':'
   * Frame prologue/epilogue
   *
   * Every stack frame must have 'prologue' called before executing the
   * first op and 'epilogue' called after executing the last op and before
   * popping the frame (whether the exit is exceptional or not).
   *
   * For inline JS calls/returns, it is easy to call the prologue/epilogue
   * exactly once. When calling JS from C++, Invoke/Execute push the stack
   * frame but do *not* call the prologue/epilogue. That means Interpret
   * must call the prologue/epilogue for the entry frame. This scheme
   * simplifies jit compilation.
   *
   * An important corner case is what happens when an error occurs (OOM,
   * over-recursed) after pushing the stack frame but before 'prologue' is
   * called or completes fully. To simplify usage, 'epilogue' does not assume
   * 'prologue' has completed and handles all the intermediate state details.
   ','line_number':369,'multiline':True]['text':'
   * Initialize locals of newly-pushed frame to undefined.
   ','line_number':395,'multiline':True]['text':'
   * Stack frame type
   *
   * A stack frame may have one of four types, which determines which
   * members of the frame may be accessed and other invariants:
   *
   *  global frame:   execution of global code
   *  function frame: execution of function code
   *  module frame:   execution of a module
   *  eval frame:     execution of eval code
   ','line_number':400,'multiline':True]['text':'
   * Previous frame
   *
   * A frame's 'prev' frame is either null or the previous frame pointed to
   * by cx->regs->fp when this frame was pushed. Often, given two prev-linked
   * frames, the next-frame is a function or eval that was called by the
   * prev-frame, but not always: the prev-frame may have called a native that
   * reentered the VM through JS_CallFunctionValue on the same context
   * (without calling JS_SaveFrameChain) which pushed the next-frame. Thus,
   * 'prev' has little semantic meaning and basically just tells the VM what
   * to set cx->regs->fp to when this frame is popped.
   ','line_number':420,'multiline':True]['text':'
   * (Unaliased) locals and arguments
   *
   * Only non-eval function frames have arguments. The arguments pushed by
   * the caller are the 'actual' arguments. The declared arguments of the
   * callee are the 'formal' arguments. When the caller passes less actual
   * arguments, missing formal arguments are padded with |undefined|.
   *
   * When a local/formal variable is aliased (accessed by nested closures,
   * environment operations, or 'arguments'), the canonical location for
   * that value is the slot of an environment object.  Aliased locals don't
   * have stack slots assigned to them.  These functions assert that
   * accesses to stack values are unaliased.
   ','line_number':440,'multiline':True]['text':' Watch out, this exposes a pointer to the unaliased formal arg array. ','line_number':474,'multiline':True]['text':'
   * Arguments object
   *
   * If a non-eval function has script->needsArgsObj, an arguments object is
   * created in the prologue and stored in the local variable for the
   * 'arguments' binding (script->argumentsLocal). Since this local is
   * mutable, the arguments object can be overwritten and we can "lose" the
   * arguments object. Thus, InterpreterFrame keeps an explicit argsObj_ field
   * so that the original arguments object is always available.
   ','line_number':480,'multiline':True]['text':'
   * Environment chain
   *
   * In theory, the environment chain would contain an object for every
   * lexical scope. However, only objects that are required for dynamic
   * lookup are actually created.
   *
   * Given that an InterpreterFrame corresponds roughly to a ES Execution
   * Context (ES 10.3), GetVariablesObject corresponds to the
   * VariableEnvironment component of a Exection Context. Intuitively, the
   * variables object is where new bindings (variables and functions) are
   * stored. One might expect that this is either the Call object or
   * envChain.globalObj for function or global code, respectively, however
   * the JSAPI allows calls of Execute to specify a variables object on the
   * environment chain other than the call/global object. This allows
   * embeddings to run multiple scripts under the same global, each time
   * using a new variables object to collect and discard the script's global
   * variables.
   ','line_number':496,'multiline':True]['text':' Push a VarEnvironmentObject for function frames of functions that have','line_number':532,'multiline':False]['text':' parameter expressions with closed over var bindings.','line_number':533,'multiline':False]['text':'
   * For lexical envs with aliased locals, these interfaces push and pop
   * entries on the environment chain.  The "freshen" operation replaces the
   * current lexical env with a fresh copy of it, to implement semantics
   * providing distinct bindings per iteration of a for(;;) loop whose head
   * has a lexical declaration.  The "recreate" operation replaces the
   * current lexical env with a copy of it containing uninitialized
   * bindings, to implement semantics providing distinct bindings per
   * iteration of a for-in/of loop.
   ','line_number':536,'multiline':True]['text':'
   * Script
   *
   * All frames have an associated JSScript which holds the bytecode being
   * executed for the frame.
   ','line_number':553,'multiline':True]['text':' Return the previous frame's pc. ','line_number':562,'multiline':True]['text':' Return the previous frame's sp. ','line_number':568,'multiline':True]['text':'
   * Return the 'this' argument passed to a non-eval function frame. This is
   * not necessarily the frame's this-binding, for instance non-strict
   * functions will box primitive 'this' values and thisArgument() will
   * return the original, unboxed Value.
   ','line_number':574,'multiline':True]['text':'
   * Callee
   *
   * Only function frames have a true callee. An eval frame in a function has
   * the same callee as its containing function frame. An async module has to
   * create a wrapper callee to allow passing the script to generators for
   * pausing and resuming.
   ','line_number':585,'multiline':True]['text':'
   * New Target
   *
   * Only function frames have a meaningful newTarget. An eval frame in a
   * function will have a copy of the newTarget of the enclosing function
   * frame.
   ','line_number':604,'multiline':True]['text':' Profiler flags ','line_number':629,'multiline':True]['text':' Return value ','line_number':639,'multiline':True]['text':' Copy values from this frame into a private Array, owned by the','line_number':657,'multiline':False]['text':' GeneratorObject, for suspending.','line_number':658,'multiline':False]['text':' Copy values from the Array into this stack frame, for resuming.','line_number':662,'multiline':False]['text':'
   * Other flags
   ','line_number':672,'multiline':True]['text':'
   * These two queries should not be used in general: the presence/absence of
   * the call/args object is determined by the static(ish) properties of the
   * JSFunction/JSScript. These queries should only be performed when probing
   * a stack frame that may be in the middle of the prologue (during which
   * time the call/args object are created).
   ','line_number':681,'multiline':True]['text':'
   * Debugger eval frames.
   *
   * - If evalInFramePrev_ is non-null, frame was created for an "eval in
   *   frame" call, which can push a successor to any live frame; so its
   *   logical "prev" frame is not necessarily the previous frame in memory.
   *   Iteration should treat evalInFramePrev_ as this frame's previous frame.
   *
   * - Don't bother to JIT it, because it's probably short-lived.
   *
   * - It is required to have a environment chain object outside the
   *   js::EnvironmentObject hierarchy: either a global object, or a
   *   DebugEnvironmentProxy.
   ','line_number':700,'multiline':True]['text':' Entered Baseline/Ion from the interpreter.','line_number':738,'multiline':False]['text':'***************************************************************************','line_number':744,'multiline':True]['text':' This code is called when resuming from async and generator code.','line_number':771,'multiline':False]['text':' In the case of modules, we don't have arguments, so we can't use','line_number':772,'multiline':False]['text':' numActualArgs, which asserts 'hasArgs'.','line_number':773,'multiline':False]['text':'***************************************************************************','line_number':800,'multiline':True]['text':' Number of interpreter frames on the stack, for over-recursion checks.','line_number':808,'multiline':False]['text':' For execution of eval, module or global code.','line_number':830,'multiline':False]['text':' Called to invoke a function.','line_number':836,'multiline':False]['text':' The interpreter can push light-weight, "inline" frames without entering a','line_number':840,'multiline':False]['text':' new InterpreterActivation or recursively calling Interpret.','line_number':841,'multiline':False]['text':'***************************************************************************','line_number':860,'multiline':True]['text':'* Base class for all function call args. ','line_number':862,'multiline':True]['text':'* Base class for all function construction args. ','line_number':865,'multiline':True]['text':' Only js::Construct (or internal methods that call the qualified CallArgs','line_number':867,'multiline':False]['text':' versions) should do these things!','line_number':868,'multiline':False]['text':'* Function call/construct args of statically-unknown count. ','line_number':877,'multiline':True]['text':' callee, this, arguments[, new.target iff constructing]','line_number':894,'multiline':False]['text':' no overflow','line_number':896,'multiline':False]['text':'* Function call/construct args of statically-known count. ','line_number':910,'multiline':True]['text':' Add +1 here to avoid noisy warning on gcc when N=0 (0 <= unsigned).','line_number':914,'multiline':False]['text':' namespace detail','line_number':929,'multiline':False]['text':'* Function call args of statically-unknown count. ','line_number':931,'multiline':True]['text':'* Function call args of statically-unknown count. ','line_number':939,'multiline':True]['text':'* Function call args of statically-known count. ','line_number':956,'multiline':True]['text':'* Function construct args of statically-unknown count. ','line_number':965,'multiline':True]['text':'* Function call args of statically-known count. ','line_number':973,'multiline':True]['text':' namespace js','line_number':997,'multiline':False]['text':' namespace mozilla','line_number':1014,'multiline':False]['text':' vm_Stack_h','line_number':1016,'multiline':False]