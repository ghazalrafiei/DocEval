['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2009-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  normalizer2impl.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009nov22
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':' When the nfc.nrm data is *not* hardcoded into the common library','line_number':36,'multiline':False]['text':' (with this constant set to 0),','line_number':37,'multiline':False]['text':' then it needs to be built into the data package:','line_number':38,'multiline':False]['text':' Add nfc.nrm to icu4c/source/data/Makefile.in DAT_FILES_SHORT','line_number':39,'multiline':False]['text':' Korean Hangul and Jamo constants ','line_number':53,'multiline':True]['text':' "lead" jamo ','line_number':55,'multiline':True]['text':' "vowel" jamo ','line_number':57,'multiline':True]['text':' "trail" jamo ','line_number':59,'multiline':True]['text':' not JAMO_T_BASE itself','line_number':91,'multiline':False]['text':'*
     * Decomposes c, which must be a Hangul syllable, into buffer
     * and returns the length of the decomposition (2 or 3).
     ','line_number':98,'multiline':True]['text':'*
     * Decomposes c, which must be a Hangul syllable, into buffer.
     * This is the raw, not recursive, decomposition. Its length is always 2.
     ','line_number':116,'multiline':True]['text':' LV syllable','line_number':129,'multiline':False]['text':' no instantiation','line_number':134,'multiline':False]['text':'* Constructs only; init() should be called. ','line_number':141,'multiline':True]['text':'* Constructs, removes the string contents, and initializes for a small initial capacity. ','line_number':146,'multiline':True]['text':'
     * TODO: Revisit whether it makes sense to track reorderStart.
     * It is set to after the last known character with cc<=1,
     * which stops previousCC() before it reads that character and looks up its cc.
     * previousCC() is normally only called from insert().
     * In other words, reorderStart speeds up the insertion of a combining mark
     * into a multi-combining mark sequence where it does not belong at the end.
     * This might not be worth the trouble.
     * On the other hand, it's not a huge amount of trouble.
     *
     * We probably need it for UNORM_SIMPLE_APPEND.
     ','line_number':201,'multiline':True]['text':' private backward iterator','line_number':232,'multiline':False]['text':' Requires start<codePointStart.','line_number':234,'multiline':False]['text':' Returns 0 if there is no previous character.','line_number':235,'multiline':False]['text':'*
 * Low-level implementation of the Unicode Normalization Algorithm.
 * For the data structure and details see the documentation at the end of
 * this normalizer2impl.h and in the design doc at
 * http://site.icu-project.org/design/normalization/custom
 ','line_number':240,'multiline':True]['text':' low-level properties ------------------------------------------------ ***','line_number':258,'multiline':False]['text':' The trie stores values for lead surrogate code *units*.','line_number':262,'multiline':False]['text':' Surrogate code *points* are inert.','line_number':263,'multiline':False]['text':'*
     * Returns the FCD data for code point c.
     * @param c A Unicode code point.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':304,'multiline':True]['text':'*
     * Returns the FCD data for the next code point (post-increment).
     * Might skip only a lead surrogate rather than the whole surrogate pair if none of
     * the supplementary code points associated with the lead surrogate have non-zero FCD data.
     * @param s A valid pointer into a string. Requires s!=limit.
     * @param limit The end of the string, or NULL.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':317,'multiline':True]['text':'*
     * Returns the FCD data for the previous code point (pre-decrement).
     * @param start The start of the string.
     * @param s A valid pointer into a string. Requires start<s.
     * @return The lccc(c) in bits 15..8 and tccc(c) in bits 7..0.
     ','line_number':337,'multiline':True]['text':'* Returns true if the single-or-lead code unit c might have non-zero FCD data. ','line_number':362,'multiline':True]['text':' 0<=lead<=0xffff','line_number':364,'multiline':False]['text':'* Returns the FCD value from the regular normalization data. ','line_number':369,'multiline':True]['text':'*
     * Gets the decomposition for one code point.
     * @param c code point
     * @param buffer out-only buffer for algorithmic decompositions
     * @param length out-only, takes the length of the decomposition, if any
     * @return pointer to the decomposition, or NULL if none
     ','line_number':372,'multiline':True]['text':'*
     * Gets the raw decomposition for one code point.
     * @param c code point
     * @param buffer out-only buffer for algorithmic decompositions
     * @param length out-only, takes the length of the decomposition, if any
     * @return pointer to the decomposition, or NULL if none
     ','line_number':381,'multiline':True]['text':' Fixed norm16 values.','line_number':396,'multiline':False]['text':' offset=1 hasCompBoundaryAfter=false','line_number':400,'multiline':False]['text':' offset=0 hasCompBoundaryAfter=true','line_number':401,'multiline':False]['text':' norm16 bit 0 is comp-boundary-after.','line_number':403,'multiline':False]['text':' For algorithmic one-way mappings, norm16 bits 2..1 indicate the','line_number':407,'multiline':False]['text':' tccc (0, 1, >1) for quick FCC boundary-after tests.','line_number':408,'multiline':False]['text':' Byte offsets from the start of the data, after the generic header.','line_number':419,'multiline':False]['text':' Code point thresholds for quick check codes.','line_number':429,'multiline':False]['text':' Norm16 value thresholds for quick check combinations and types of extra data.','line_number':433,'multiline':False]['text':'* Mappings & compositions in [minYesNo..minYesNoMappingsOnly[. ','line_number':435,'multiline':True]['text':'* Mappings are comp-normalized. ','line_number':437,'multiline':True]['text':'* Mappings only in [minYesNoMappingsOnly..minNoNo[. ','line_number':442,'multiline':True]['text':'* Mappings are not comp-normalized but have a comp boundary before. ','line_number':444,'multiline':True]['text':'* Mappings do not have a comp boundary before. ','line_number':446,'multiline':True]['text':'* Mappings to the empty string. ','line_number':448,'multiline':True]['text':' unused bit 0x20,','line_number':459,'multiline':False]['text':' 10-1 for the "triple" bit','line_number':468,'multiline':False]['text':' higher-level functionality ------------------------------------------ ***','line_number':473,'multiline':False]['text':' NFD without an NFD Normalizer2 instance.','line_number':475,'multiline':False]['text':'*
     * Decomposes [src, limit[ and writes the result to dest.
     * limit can be NULL if src is NUL-terminated.
     * destLengthEstimate is the initial dest buffer capacity and can be -1.
     ','line_number':478,'multiline':True]['text':'* sink==nullptr: isNormalized()/spanQuickCheckYes() ','line_number':495,'multiline':True]['text':'* sink==nullptr: isNormalized() ','line_number':515,'multiline':True]['text':' UBool isCompYes(uint16_t norm16) const {','line_number':565,'multiline':False]['text':'     return norm16>=MIN_YES_YES_WITH_CC || norm16<minNoNo;','line_number':566,'multiline':False]['text':' }','line_number':567,'multiline':False]['text':' UBool isCompYesOrMaybe(uint16_t norm16) const {','line_number':568,'multiline':False]['text':'     return norm16<minNoNo || minMaybeYes<=norm16;','line_number':569,'multiline':False]['text':' }','line_number':570,'multiline':False]['text':' UBool hasZeroCCFromDecompYes(uint16_t norm16) const {','line_number':571,'multiline':False]['text':'     return norm16<=MIN_NORMAL_MAYBE_YES || norm16==JAMO_VT;','line_number':572,'multiline':False]['text':' }','line_number':573,'multiline':False]['text':'*
     * A little faster and simpler than isDecompYesAndZeroCC() but does not include
     * the MaybeYes which combine-forward and have ccc=0.
     * (Standard Unicode 10 normalization does not have such characters.)
     ','line_number':579,'multiline':True]['text':' For use with isCompYes().','line_number':589,'multiline':False]['text':' Perhaps the compiler can combine the two tests for MIN_YES_YES_WITH_CC.','line_number':590,'multiline':False]['text':' static uint8_t getCCFromYes(uint16_t norm16) {','line_number':591,'multiline':False]['text':'     return norm16>=MIN_YES_YES_WITH_CC ? getCCFromNormalYesOrMaybe(norm16) : 0;','line_number':592,'multiline':False]['text':' }','line_number':593,'multiline':False]['text':' requires that the [cpStart..cpLimit[ character passes isCompYesAndZeroCC()','line_number':602,'multiline':False]['text':' yesYes and Hangul LV have ccc=tccc=0','line_number':605,'multiline':False]['text':' For Hangul LVT we harmlessly fetch a firstUnit with tccc=0 here.','line_number':607,'multiline':False]['text':' tccc from yesNo','line_number':608,'multiline':False]['text':' Requires algorithmic-NoNo.','line_number':614,'multiline':False]['text':' Requires minYesNo<norm16<limitNoNo.','line_number':622,'multiline':False]['text':' for yesYes; if Jamo L: harmless empty list','line_number':628,'multiline':False]['text':' A composite has both mapping & compositions list.','line_number':634,'multiline':False]['text':' mapping pointer','line_number':636,'multiline':False]['text':' +1 to skip the first unit with the mapping length','line_number':637,'multiline':False]['text':' + mapping length','line_number':638,'multiline':False]['text':' minMaybeYes<=norm16<MIN_NORMAL_MAYBE_YES','line_number':641,'multiline':False]['text':'*
     * @param c code point must have compositions
     * @return compositions list pointer
     ','line_number':644,'multiline':True]['text':'* For FCC: Given norm16 HAS_COMP_BOUNDARY_AFTER, does it have tccc<=1? ','line_number':692,'multiline':True]['text':' UVersionInfo dataVersion;','line_number':710,'multiline':False]['text':' BMP code point thresholds for quick check loops looking at single UTF-16 code units.','line_number':712,'multiline':False]['text':' Norm16 value thresholds for quick check combinations and types of extra data.','line_number':717,'multiline':False]['text':' mappings and/or compositions for yesYes, yesNo & noNo characters','line_number':730,'multiline':False]['text':' [0x100] one bit per 32 BMP code points, set if any FCD!=0','line_number':731,'multiline':False]['text':' bits in canonIterData','line_number':737,'multiline':False]['text':'*
 * ICU-internal shortcut for quick access to standard Unicode normalization.
 ','line_number':743,'multiline':True]['text':' Get the Impl instance of the Normalizer2.','line_number':758,'multiline':False]['text':' Must be used only when it is known that norm2 is a Normalizer2WithImpl instance.','line_number':759,'multiline':False]['text':' No instantiation.','line_number':762,'multiline':False]['text':'*
 * Get the NF*_QC property for a code point, for u_getIntPropertyValue().
 * @internal
 ','line_number':772,'multiline':True]['text':'*
 * Gets the 16-bit FCD value (lead & trail CCs) for a code point, for u_getIntPropertyValue().
 * @internal
 ','line_number':779,'multiline':True]['text':'*
 * Format of Normalizer2 .nrm data files.
 * Format version 4.0.
 *
 * Normalizer2 .nrm data files provide data for the Unicode Normalization algorithms.
 * ICU ships with data files for standard Unicode Normalization Forms
 * NFC and NFD (nfc.nrm), NFKC and NFKD (nfkc.nrm) and NFKC_Casefold (nfkc_cf.nrm).
 * Custom (application-specific) data can be built into additional .nrm files
 * with the gennorm2 build tool.
 * ICU ships with one such file, uts46.nrm, for the implementation of UTS #46.
 *
 * Normalizer2.getInstance() causes a .nrm file to be loaded, unless it has been
 * cached already. Internally, Normalizer2Impl.load() reads the .nrm file.
 *
 * A .nrm file begins with a standard ICU data file header
 * (DataHeader, see ucmndata.h and unicode/udata.h).
 * The UDataInfo.dataVersion field usually contains the Unicode version
 * for which the data was generated.
 *
 * After the header, the file contains the following parts.
 * Constants are defined as enum values of the Normalizer2Impl class.
 *
 * Many details of the data structures are described in the design doc
 * which is at http://site.icu-project.org/design/normalization/custom
 *
 * int32_t indexes[indexesLength]; -- indexesLength=indexes[IX_NORM_TRIE_OFFSET]/4;
 *
 *      The first eight indexes are byte offsets in ascending order.
 *      Each byte offset marks the start of the next part in the data file,
 *      and the end of the previous one.
 *      When two consecutive byte offsets are the same, then the corresponding part is empty.
 *      Byte offsets are offsets from after the header,
 *      that is, from the beginning of the indexes[].
 *      Each part starts at an offset with proper alignment for its data.
 *      If necessary, the previous part may include padding bytes to achieve this alignment.
 *
 *      minDecompNoCP=indexes[IX_MIN_DECOMP_NO_CP] is the lowest code point
 *      with a decomposition mapping, that is, with NF*D_QC=No.
 *      minCompNoMaybeCP=indexes[IX_MIN_COMP_NO_MAYBE_CP] is the lowest code point
 *      with NF*C_QC=No (has a one-way mapping) or Maybe (combines backward).
 *      minLcccCP=indexes[IX_MIN_LCCC_CP] (index 18, new in formatVersion 3)
 *      is the lowest code point with lccc!=0.
 *
 *      The next eight indexes are thresholds of 16-bit trie values for ranges of
 *      values indicating multiple normalization properties.
 *      They are listed here in threshold order, not in the order they are stored in the indexes.
 *          minYesNo=indexes[IX_MIN_YES_NO];
 *          minYesNoMappingsOnly=indexes[IX_MIN_YES_NO_MAPPINGS_ONLY];
 *          minNoNo=indexes[IX_MIN_NO_NO];
 *          minNoNoCompBoundaryBefore=indexes[IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE];
 *          minNoNoCompNoMaybeCC=indexes[IX_MIN_NO_NO_COMP_NO_MAYBE_CC];
 *          minNoNoEmpty=indexes[IX_MIN_NO_NO_EMPTY];
 *          limitNoNo=indexes[IX_LIMIT_NO_NO];
 *          minMaybeYes=indexes[IX_MIN_MAYBE_YES];
 *      See the normTrie description below and the design doc for details.
 *
 * UCPTrie normTrie; -- see ucptrie_impl.h and ucptrie.h, same as Java CodePointTrie
 *
 *      The trie holds the main normalization data. Each code point is mapped to a 16-bit value.
 *      Rather than using independent bits in the value (which would require more than 16 bits),
 *      information is extracted primarily via range checks.
 *      Except, format version 3 uses bit 0 for hasCompBoundaryAfter().
 *      For example, a 16-bit value norm16 in the range minYesNo<=norm16<minNoNo
 *      means that the character has NF*C_QC=Yes and NF*D_QC=No properties,
 *      which means it has a two-way (round-trip) decomposition mapping.
 *      Values in the range 2<=norm16<limitNoNo are also directly indexes into the extraData
 *      pointing to mappings, compositions lists, or both.
 *      Value norm16==INERT (0 in versions 1 & 2, 1 in version 3)
 *      means that the character is normalization-inert, that is,
 *      it does not have a mapping, does not participate in composition, has a zero
 *      canonical combining class, and forms a boundary where text before it and after it
 *      can be normalized independently.
 *      For details about how multiple properties are encoded in 16-bit values
 *      see the design doc.
 *      Note that the encoding cannot express all combinations of the properties involved;
 *      it only supports those combinations that are allowed by
 *      the Unicode Normalization algorithms. Details are in the design doc as well.
 *      The gennorm2 tool only builds .nrm files for data that conforms to the limitations.
 *
 *      The trie has a value for each lead surrogate code unit representing the "worst case"
 *      properties of the 1024 supplementary characters whose UTF-16 form starts with
 *      the lead surrogate. If all of the 1024 supplementary characters are normalization-inert,
 *      then their lead surrogate code unit has the trie value INERT.
 *      When the lead surrogate unit's value exceeds the quick check minimum during processing,
 *      the properties for the full supplementary code point need to be looked up.
 *
 * uint16_t maybeYesCompositions[MIN_NORMAL_MAYBE_YES-minMaybeYes];
 * uint16_t extraData[];
 *
 *      There is only one byte offset for the end of these two arrays.
 *      The split between them is given by the constant and variable mentioned above.
 *      In version 3, the difference must be shifted right by OFFSET_SHIFT.
 *
 *      The maybeYesCompositions array contains compositions lists for characters that
 *      combine both forward (as starters in composition pairs)
 *      and backward (as trailing characters in composition pairs).
 *      Such characters do not occur in Unicode 5.2 but are allowed by
 *      the Unicode Normalization algorithms.
 *      If there are no such characters, then minMaybeYes==MIN_NORMAL_MAYBE_YES
 *      and the maybeYesCompositions array is empty.
 *      If there are such characters, then minMaybeYes is subtracted from their norm16 values
 *      to get the index into this array.
 *
 *      The extraData array contains compositions lists for "YesYes" characters,
 *      followed by mappings and optional compositions lists for "YesNo" characters,
 *      followed by only mappings for "NoNo" characters.
 *      (Referring to pairs of NFC/NFD quick check values.)
 *      The norm16 values of those characters are directly indexes into the extraData array.
 *      In version 3, the norm16 values must be shifted right by OFFSET_SHIFT
 *      for accessing extraData.
 *
 *      The data structures for compositions lists and mappings are described in the design doc.
 *
 * uint8_t smallFCD[0x100]; -- new in format version 2
 *
 *      This is a bit set to help speed up FCD value lookups in the absence of a full
 *      UTrie2 or other large data structure with the full FCD value mapping.
 *
 *      Each smallFCD bit is set if any of the corresponding 32 BMP code points
 *      has a non-zero FCD value (lccc!=0 or tccc!=0).
 *      Bit 0 of smallFCD[0] is for U+0000..U+001F. Bit 7 of smallFCD[0xff] is for U+FFE0..U+FFFF.
 *      A bit for 32 lead surrogates is set if any of the 32k corresponding
 *      _supplementary_ code points has a non-zero FCD value.
 *
 *      This bit set is most useful for the large blocks of CJK characters with FCD=0.
 *
 * Changes from format version 1 to format version 2 ---------------------------
 *
 * - Addition of data for raw (not recursively decomposed) mappings.
 *   + The MAPPING_NO_COMP_BOUNDARY_AFTER bit in the extraData is now also set when
 *     the mapping is to an empty string or when the character combines-forward.
 *     This subsumes the one actual use of the MAPPING_PLUS_COMPOSITION_LIST bit which
 *     is then repurposed for the MAPPING_HAS_RAW_MAPPING bit.
 *   + For details see the design doc.
 * - Addition of indexes[IX_MIN_YES_NO_MAPPINGS_ONLY] and separation of the yesNo extraData into
 *   distinct ranges (combines-forward vs. not)
 *   so that a range check can be used to find out if there is a compositions list.
 *   This is fully equivalent with formatVersion 1's MAPPING_PLUS_COMPOSITION_LIST flag.
 *   It is needed for the new (in ICU 49) composePair(), not for other normalization.
 * - Addition of the smallFCD[] bit set.
 *
 * Changes from format version 2 to format version 3 (ICU 60) ------------------
 *
 * - norm16 bit 0 indicates hasCompBoundaryAfter(),
 *   except that for contiguous composition (FCC) the tccc must be checked as well.
 *   Data indexes and ccc values are shifted left by one (OFFSET_SHIFT).
 *   Thresholds like minNoNo are tested before shifting.
 *
 * - Algorithmic mapping deltas are shifted left by two more bits (total DELTA_SHIFT),
 *   to make room for two bits (three values) indicating whether the tccc is 0, 1, or greater.
 *   See DELTA_TCCC_MASK etc.
 *   This helps with fetching tccc/FCD values and FCC hasCompBoundaryAfter().
 *   minMaybeYes is 8-aligned so that the DELTA_TCCC_MASK bits can be tested directly.
 *
 * - Algorithmic mappings are only used for mapping to "comp yes and ccc=0" characters,
 *   and ASCII characters are mapped algorithmically only to other ASCII characters.
 *   This helps with hasCompBoundaryBefore() and compose() fast paths.
 *   It is never necessary any more to loop for algorithmic mappings.
 *
 * - Addition of indexes[IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE],
 *   indexes[IX_MIN_NO_NO_COMP_NO_MAYBE_CC], and indexes[IX_MIN_NO_NO_EMPTY],
 *   and separation of the noNo extraData into distinct ranges.
 *   With this, the noNo norm16 value indicates whether the mapping is
 *   compose-normalized, not normalized but hasCompBoundaryBefore(),
 *   not even that, or maps to an empty string.
 *   hasCompBoundaryBefore() can be determined solely from the norm16 value.
 *
 * - The norm16 value for Hangul LVT is now different from that for Hangul LV,
 *   so that hasCompBoundaryAfter() need not check for the syllable type.
 *   For Hangul LV, minYesNo continues to be used (no comp-boundary-after).
 *   For Hangul LVT, minYesNoMappingsOnly|HAS_COMP_BOUNDARY_AFTER is used.
 *   The extraData units at these indexes are set to firstUnit=2 and firstUnit=3, respectively,
 *   to simplify some code.
 *
 * - The extraData firstUnit bit 5 is no longer necessary
 *   (norm16 bit 0 used instead of firstUnit MAPPING_NO_COMP_BOUNDARY_AFTER),
 *   is reserved again, and always set to 0.
 *
 * - Addition of indexes[IX_MIN_LCCC_CP], the first code point where lccc!=0.
 *   This used to be hardcoded to U+0300, but in data like NFKC_Casefold it is lower:
 *   U+00AD Soft Hyphen maps to an empty string,
 *   which is artificially assigned "worst case" values lccc=1 and tccc=255.
 *
 * - A mapping to an empty string has explicit lccc=1 and tccc=255 values.
 *
 * Changes from format version 3 to format version 4 (ICU 63) ------------------
 *
 * Switched from UTrie2 to UCPTrie/CodePointTrie.
 *
 * The new trie no longer stores different values for surrogate code *units* vs.
 * surrogate code *points*.
 * Lead surrogates still have values for optimized UTF-16 string processing.
 * When looking up code point properties, the code now checks for lead surrogates and
 * treats them as inert.
 *
 * gennorm2 now has to reject mappings for surrogate code points.
 * UTS #46 maps unpaired surrogates to U+FFFD in code rather than via its
 * custom normalization data file.
 ','line_number':786,'multiline':True]['text':' !UCONFIG_NO_NORMALIZATION ','line_number':986,'multiline':True]['text':' __NORMALIZER2IMPL_H__ ','line_number':987,'multiline':True]