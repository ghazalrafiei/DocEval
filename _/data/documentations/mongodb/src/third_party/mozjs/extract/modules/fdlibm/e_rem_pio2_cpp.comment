['text':' @(#)e_rem_pio2.c 1.4 95/01/18 ','line_number':2,'multiline':True]['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 *
 * Optimized by Bruce D. Evans.
 ','line_number':3,'multiline':True]['text':'#include <sys/cdefs.h>','line_number':16,'multiline':False]['text':'__FBSDID("$FreeBSD$");','line_number':17,'multiline':False]['text':' __ieee754_rem_pio2(x,y)
 * 
 * return the remainder of x rem pi/2 in y[0]+y[1] 
 * use __kernel_rem_pio2()
 ','line_number':19,'multiline':True]['text':'
 * invpio2:  53 bits of 2/pi
 * pio2_1:   first  33 bit of pi/2
 * pio2_1t:  pi/2 - pio2_1
 * pio2_2:   second 33 bit of pi/2
 * pio2_2t:  pi/2 - (pio2_1+pio2_2)
 * pio2_3:   third  33 bit of pi/2
 * pio2_3t:  pi/2 - (pio2_1+pio2_2+pio2_3)
 ','line_number':29,'multiline':True]['text':' 0x00000000, 0x00000000 ','line_number':40,'multiline':True]['text':' 0x41700000, 0x00000000 ','line_number':41,'multiline':True]['text':' 0x3FE45F30, 0x6DC9C883 ','line_number':42,'multiline':True]['text':' 0x3FF921FB, 0x54400000 ','line_number':43,'multiline':True]['text':' 0x3DD0B461, 0x1A626331 ','line_number':44,'multiline':True]['text':' 0x3DD0B461, 0x1A600000 ','line_number':45,'multiline':True]['text':' 0x3BA3198A, 0x2E037073 ','line_number':46,'multiline':True]['text':' 0x3BA3198A, 0x2E000000 ','line_number':47,'multiline':True]['text':' 0x397B839A, 0x252049C1 ','line_number':48,'multiline':True]['text':' high word of x ','line_number':61,'multiline':True]['text':' Must be handled in caller. ','line_number':63,'multiline':True]['text':' |x| ~<= pi/4 , no need for reduction ','line_number':64,'multiline':True]['text':' |x| ~<= 5pi/4 ','line_number':67,'multiline':True]['text':' |x| ~= pi/2 or 2pi/2 ','line_number':68,'multiline':True]['text':' cancellation -- use medium case ','line_number':69,'multiline':True]['text':' |x| ~<= 3pi/4 ','line_number':70,'multiline':True]['text':' one round good to 85 bits ','line_number':72,'multiline':True]['text':' |x| ~<= 9pi/4 ','line_number':96,'multiline':True]['text':' |x| ~<= 7pi/4 ','line_number':97,'multiline':True]['text':' |x| ~= 3pi/2 ','line_number':98,'multiline':True]['text':' |x| ~= 4pi/2 ','line_number':112,'multiline':True]['text':' |x| ~< 2^20*(pi/2), medium size ','line_number':127,'multiline':True]['text':' 1st round good to 85 bit ','line_number':132,'multiline':True]['text':' 2nd iteration needed, good to 118 ','line_number':139,'multiline':True]['text':' 3rd iteration need, 151 bits acc ','line_number':147,'multiline':True]['text':' will cover all possible cases ','line_number':148,'multiline':True]['text':' 
     * all other (large) arguments
     ','line_number':159,'multiline':True]['text':' x is inf or NaN ','line_number':162,'multiline':True]['text':' set z = scalbn(|x|,ilogb(x)-23) ','line_number':165,'multiline':True]['text':' e0 = ilogb(z)-23; ','line_number':167,'multiline':True]['text':' skip zero term ','line_number':175,'multiline':True]