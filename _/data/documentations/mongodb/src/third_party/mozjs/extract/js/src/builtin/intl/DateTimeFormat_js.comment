['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Portions Copyright Norbert Lindenberg 2011-2012. ','line_number':5,'multiline':True]['text':'*
 * Compute an internal properties object from |lazyDateTimeFormatData|.
 ','line_number':7,'multiline':True]['text':' Lazy DateTimeFormat data has the following structure:','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'   {','line_number':15,'multiline':False]['text':'     requestedLocales: List of locales,','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':'     localeOpt: // *first* opt computed in InitializeDateTimeFormat','line_number':18,'multiline':False]['text':'       {','line_number':19,'multiline':False]['text':'         localeMatcher: "lookup" / "best fit",','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':'         ca: string matching a Unicode extension type, // optional','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':'         nu: string matching a Unicode extension type, // optional','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':'         hc: "h11" / "h12" / "h23" / "h24", // optional','line_number':26,'multiline':False]['text':'       }','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':'     timeZone: IANA time zone name,','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':'     formatOpt: // *second* opt computed in InitializeDateTimeFormat','line_number':31,'multiline':False]['text':'       {','line_number':32,'multiline':False]['text':'         // all the properties/values listed in Table 3','line_number':33,'multiline':False]['text':'         // (weekday, era, year, month, day, &c.)','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':'         hour12: true / false,  // optional','line_number':36,'multiline':False]['text':'       }','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'     formatMatcher: "basic" / "best fit",','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'     dateStyle: "full" / "long" / "medium" / "short" / undefined,','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'     timeStyle: "full" / "long" / "medium" / "short" / undefined,','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':'     patternOption:','line_number':45,'multiline':False]['text':'       String representing LDML Date Format pattern or undefined','line_number':46,'multiline':False]['text':'   }','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' Note that lazy data is only installed as a final step of initialization,','line_number':49,'multiline':False]['text':' so every DateTimeFormat lazy data object has *all* these properties,','line_number':50,'multiline':False]['text':' never a subset of them.','line_number':51,'multiline':False]['text':' Compute effective locale.','line_number':57,'multiline':False]['text':' Step 10.','line_number':59,'multiline':False]['text':' Step 11.','line_number':62,'multiline':False]['text':' Steps 12-13, 15.','line_number':69,'multiline':False]['text':' Compute formatting options.','line_number':74,'multiline':False]['text':' Step 16.','line_number':75,'multiline':False]['text':' Allow the calendar field to modify the pattern selection choice.','line_number':78,'multiline':False]['text':' Step 20.','line_number':81,'multiline':False]['text':' Step 21.','line_number':84,'multiline':False]['text':' Step 14.','line_number':87,'multiline':False]['text':' Copy the hourCycle setting, if present, to the format options. But','line_number':88,'multiline':False]['text':' only do this if no hour12 option is present, because the latter takes','line_number':89,'multiline':False]['text':' precedence over hourCycle.','line_number':90,'multiline':False]['text':' Steps 26-30, more or less - see comment after this function.','line_number':94,'multiline':False]['text':' Step 31.','line_number':119,'multiline':False]['text':' The caller is responsible for associating |internalProps| with the right','line_number':123,'multiline':False]['text':' object using |setInternalProperties|.','line_number':124,'multiline':False]['text':'*
 * Returns an object containing the DateTimeFormat internal properties of |obj|.
 ','line_number':128,'multiline':True]['text':' If internal properties have already been computed, use them.','line_number':139,'multiline':False]['text':' Otherwise it's time to fully create them.','line_number':144,'multiline':False]['text':'*
 * 12.1.10 UnwrapDateTimeFormat( dtf )
 ','line_number':150,'multiline':True]['text':' Steps 2 and 4 (error handling moved to caller).','line_number':154,'multiline':False]['text':'*
 * 6.4.2 CanonicalizeTimeZoneName ( timeZone )
 *
 * Canonicalizes the given IANA time zone name.
 *
 * ES2017 Intl draft rev 4a23f407336d382ed5e3471200c690c9b020b5f3
 ','line_number':165,'multiline':True]['text':' Step 1. (Not applicable, the input is already a valid IANA time zone.)','line_number':175,'multiline':False]['text':' Step 2.','line_number':179,'multiline':False]['text':' Step 3.','line_number':184,'multiline':False]['text':' Step 4.','line_number':189,'multiline':False]['text':'*
 * 6.4.3 DefaultTimeZone ()
 *
 * Returns the IANA time zone name for the host environment's current time zone.
 *
 * ES2017 Intl draft rev 4a23f407336d382ed5e3471200c690c9b020b5f3
 ','line_number':198,'multiline':True]['text':' Verify that the current ICU time zone is a valid ECMA-402 time zone.','line_number':209,'multiline':False]['text':' Before defaulting to "UTC", try to represent the default time zone','line_number':213,'multiline':False]['text':' using the Etc/GMT + offset format. This format only accepts full','line_number':214,'multiline':False]['text':' hour offsets.','line_number':215,'multiline':False]['text':' Etc/GMT + offset uses POSIX-style signs, i.e. a positive offset','line_number':222,'multiline':False]['text':' means a location west of GMT.','line_number':223,'multiline':False]['text':' Check if the fallback is valid.','line_number':226,'multiline':False]['text':' Fallback to "UTC" if everything else fails.','line_number':230,'multiline':False]['text':' Canonicalize the ICU time zone, e.g. change Etc/UTC to UTC.','line_number':235,'multiline':False]['text':'*
 * Initializes an object as a DateTimeFormat.
 *
 * This method is complicated a moderate bit by its implementing initialization
 * as a *lazy* concept.  Everything that must happen now, does -- but we defer
 * all the work we can until the object is actually used as a DateTimeFormat.
 * This later work occurs in |resolveDateTimeFormatInternals|; steps not noted
 * here occur there.
 *
 * Spec: ECMAScript Internationalization API Specification, 12.1.1.
 ','line_number':244,'multiline':True]['text':' Lazy DateTimeFormat data has the following structure:','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':'   {','line_number':262,'multiline':False]['text':'     requestedLocales: List of locales,','line_number':263,'multiline':False]['text':'','line_number':264,'multiline':False]['text':'     localeOpt: // *first* opt computed in InitializeDateTimeFormat','line_number':265,'multiline':False]['text':'       {','line_number':266,'multiline':False]['text':'         localeMatcher: "lookup" / "best fit",','line_number':267,'multiline':False]['text':'','line_number':268,'multiline':False]['text':'         ca: string matching a Unicode extension type, // optional','line_number':269,'multiline':False]['text':'','line_number':270,'multiline':False]['text':'         nu: string matching a Unicode extension type, // optional','line_number':271,'multiline':False]['text':'','line_number':272,'multiline':False]['text':'         hc: "h11" / "h12" / "h23" / "h24", // optional','line_number':273,'multiline':False]['text':'       }','line_number':274,'multiline':False]['text':'','line_number':275,'multiline':False]['text':'     timeZone: IANA time zone name,','line_number':276,'multiline':False]['text':'','line_number':277,'multiline':False]['text':'     formatOpt: // *second* opt computed in InitializeDateTimeFormat','line_number':278,'multiline':False]['text':'       {','line_number':279,'multiline':False]['text':'         // all the properties/values listed in Table 3','line_number':280,'multiline':False]['text':'         // (weekday, era, year, month, day, &c.)','line_number':281,'multiline':False]['text':'','line_number':282,'multiline':False]['text':'         hour12: true / false,  // optional','line_number':283,'multiline':False]['text':'       }','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':'     formatMatcher: "basic" / "best fit",','line_number':286,'multiline':False]['text':'   }','line_number':287,'multiline':False]['text':'','line_number':288,'multiline':False]['text':' Note that lazy data is only installed as a final step of initialization,','line_number':289,'multiline':False]['text':' so every DateTimeFormat lazy data object has *all* these properties,','line_number':290,'multiline':False]['text':' never a subset of them.','line_number':291,'multiline':False]['text':' Step 1.','line_number':294,'multiline':False]['text':' Step 2.','line_number':298,'multiline':False]['text':' Compute options that impact interpretation of locale.','line_number':301,'multiline':False]['text':' Step 3.','line_number':302,'multiline':False]['text':' Steps 4-5.','line_number':306,'multiline':False]['text':' Step 6.','line_number':330,'multiline':False]['text':' Step 7.','line_number':333,'multiline':False]['text':' Step 8.','line_number':336,'multiline':False]['text':' The "hourCycle" option is ignored if "hr12" is also present.','line_number':338,'multiline':False]['text':' Step 9.','line_number':342,'multiline':False]['text':' Steps 10-16 (see resolveDateTimeFormatInternals).','line_number':345,'multiline':False]['text':' Steps 17-20.','line_number':347,'multiline':False]['text':' Step 18.a.','line_number':350,'multiline':False]['text':' Step 18.b.','line_number':353,'multiline':False]['text':' Step 18.c.','line_number':358,'multiline':False]['text':' Step 19.','line_number':361,'multiline':False]['text':' Step 21.','line_number':366,'multiline':False]['text':' Step 22.','line_number':375,'multiline':False]['text':' 12.1, Table 5: Components of date and time formats.','line_number':376,'multiline':False]['text':' Steps 23-24 provided by ICU - see comment after this function.','line_number':395,'multiline':False]['text':' Step 25.','line_number':397,'multiline':False]['text':'','line_number':398,'multiline':False]['text':' For some reason (ICU not exposing enough interface?) we drop the','line_number':399,'multiline':False]['text':' requested format matcher on the floor after this.  In any case, even if','line_number':400,'multiline':False]['text':' doing so is justified, we have to do this work here in case it triggers','line_number':401,'multiline':False]['text':' getters or similar. (bug 852837)','line_number':402,'multiline':False]['text':' "DateTimeFormat dateStyle & timeStyle" propsal','line_number':408,'multiline':False]['text':' https://github.com/tc39/proposal-intl-datetime-style','line_number':409,'multiline':False]['text':' Steps 26-28 provided by ICU, more or less - see comment after this function.','line_number':433,'multiline':False]['text':' Steps 29-30.','line_number':435,'multiline':False]['text':' Pass hr12 on to ICU.','line_number':436,'multiline':False]['text':' Step 32.','line_number':440,'multiline':False]['text':'','line_number':441,'multiline':False]['text':' We've done everything that must be done now: mark the lazy data as fully','line_number':442,'multiline':False]['text':' computed and install it.','line_number':443,'multiline':False]['text':' 12.2.1, steps 4-5.','line_number':446,'multiline':False]['text':' 12.2.1, step 6.','line_number':456,'multiline':False]['text':' Intl.DateTimeFormat and ICU skeletons and patterns','line_number':460,'multiline':False]['text':' ==================================================','line_number':461,'multiline':False]['text':'','line_number':462,'multiline':False]['text':' Different locales have different ways to display dates using the same','line_number':463,'multiline':False]['text':' basic components. For example, en-US might use "Sept. 24, 2012" while','line_number':464,'multiline':False]['text':' fr-FR might use "24 Sept. 2012". The intent of Intl.DateTimeFormat is to','line_number':465,'multiline':False]['text':' permit production of a format for the locale that best matches the','line_number':466,'multiline':False]['text':' set of date-time components and their desired representation as specified','line_number':467,'multiline':False]['text':' by the API client.','line_number':468,'multiline':False]['text':'','line_number':469,'multiline':False]['text':' ICU supports specification of date and time formats in three ways:','line_number':470,'multiline':False]['text':'','line_number':471,'multiline':False]['text':' 1) A style is just one of the identifiers FULL, LONG, MEDIUM, or SHORT.','line_number':472,'multiline':False]['text':'    The date-time components included in each style and their representation','line_number':473,'multiline':False]['text':'    are defined by ICU using CLDR locale data (CLDR is the Unicode','line_number':474,'multiline':False]['text':'    Consortium's Common Locale Data Repository).','line_number':475,'multiline':False]['text':'','line_number':476,'multiline':False]['text':' 2) A skeleton is a string specifying which date-time components to include,','line_number':477,'multiline':False]['text':'    and which representations to use for them. For example, "yyyyMMMMdd"','line_number':478,'multiline':False]['text':'    specifies a year with at least four digits, a full month name, and a','line_number':479,'multiline':False]['text':'    two-digit day. It does not specify in which order the components appear,','line_number':480,'multiline':False]['text':'    how they are separated, the localized strings for textual components','line_number':481,'multiline':False]['text':'    (such as weekday or month), whether the month is in format or','line_number':482,'multiline':False]['text':'    stand-alone form¹, or the numbering system used for numeric components.','line_number':483,'multiline':False]['text':'    All that information is filled in by ICU using CLDR locale data.','line_number':484,'multiline':False]['text':'    ¹ The format form is the one used in formatted strings that include a','line_number':485,'multiline':False]['text':'    day; the stand-alone form is used when not including days, e.g., in','line_number':486,'multiline':False]['text':'    calendar headers. The two forms differ at least in some Slavic languages,','line_number':487,'multiline':False]['text':'    e.g. Russian: "22 марта 2013 г." vs. "Март 2013".','line_number':488,'multiline':False]['text':'','line_number':489,'multiline':False]['text':' 3) A pattern is a string specifying which date-time components to include,','line_number':490,'multiline':False]['text':'    in which order, with which separators, in which grammatical case. For','line_number':491,'multiline':False]['text':'    example, "EEEE, d MMMM y" specifies the full localized weekday name,','line_number':492,'multiline':False]['text':'    followed by comma and space, followed by the day, followed by space,','line_number':493,'multiline':False]['text':'    followed by the full month name in format form, followed by space,','line_number':494,'multiline':False]['text':'    followed by the full year. It','line_number':495,'multiline':False]['text':'    still does not specify localized strings for textual components and the','line_number':496,'multiline':False]['text':'    numbering system - these are determined by ICU using CLDR locale data or','line_number':497,'multiline':False]['text':'    possibly API parameters.','line_number':498,'multiline':False]['text':'','line_number':499,'multiline':False]['text':' All actual formatting in ICU is done with patterns; styles and skeletons','line_number':500,'multiline':False]['text':' have to be mapped to patterns before processing.','line_number':501,'multiline':False]['text':'','line_number':502,'multiline':False]['text':' The options of DateTimeFormat most closely correspond to ICU skeletons. This','line_number':503,'multiline':False]['text':' implementation therefore, in the toBestICUPattern function, converts','line_number':504,'multiline':False]['text':' DateTimeFormat options to ICU skeletons, and then lets ICU map skeletons to','line_number':505,'multiline':False]['text':' actual ICU patterns. The pattern may not directly correspond to what the','line_number':506,'multiline':False]['text':' skeleton requests, as the mapper (UDateTimePatternGenerator) is constrained','line_number':507,'multiline':False]['text':' by the available locale data for the locale. The resulting ICU pattern is','line_number':508,'multiline':False]['text':' kept as the DateTimeFormat's [[pattern]] internal property and passed to ICU','line_number':509,'multiline':False]['text':' in the format method.','line_number':510,'multiline':False]['text':'','line_number':511,'multiline':False]['text':' An ICU pattern represents the information of the following DateTimeFormat','line_number':512,'multiline':False]['text':' internal properties described in the specification, which therefore don't','line_number':513,'multiline':False]['text':' exist separately in the implementation:','line_number':514,'multiline':False]['text':' - [[weekday]], [[era]], [[year]], [[month]], [[day]], [[hour]], [[minute]],','line_number':515,'multiline':False]['text':'   [[second]], [[timeZoneName]]','line_number':516,'multiline':False]['text':' - [[hour12]]','line_number':517,'multiline':False]['text':' - [[hourCycle]]','line_number':518,'multiline':False]['text':' - [[hourNo0]]','line_number':519,'multiline':False]['text':' When needed for the resolvedOptions method, the resolveICUPattern function','line_number':520,'multiline':False]['text':' maps the instance's ICU pattern back to the specified properties of the','line_number':521,'multiline':False]['text':' object returned by resolvedOptions.','line_number':522,'multiline':False]['text':'','line_number':523,'multiline':False]['text':' ICU date-time skeletons and patterns aren't fully documented in the ICU','line_number':524,'multiline':False]['text':' documentation (see http://bugs.icu-project.org/trac/ticket/9627). The best','line_number':525,'multiline':False]['text':' documentation at this point is in UTR 35:','line_number':526,'multiline':False]['text':' http://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns','line_number':527,'multiline':False]['text':' eslint-disable complexity ','line_number':529,'multiline':True]['text':'*
 * Returns an ICU skeleton string representing the specified options.
 ','line_number':530,'multiline':True]['text':' Create an ICU skeleton representing the specified options. See','line_number':534,'multiline':False]['text':' http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table','line_number':535,'multiline':False]['text':' If hour12 and hourCycle are both present, hour12 takes precedence.','line_number':591,'multiline':False]['text':' ICU requires that "B" is set after the "j" hour skeleton symbol.','line_number':618,'multiline':False]['text':' https://unicode-org.atlassian.net/browse/ICU-20731','line_number':619,'multiline':False]['text':' eslint-enable complexity ','line_number':680,'multiline':True]['text':'*
 * Returns an ICU pattern string for the given locale and representing the
 * specified skeleton as closely as possible given available locale data.
 ','line_number':682,'multiline':True]['text':' Let ICU convert the ICU skeleton to an ICU pattern for the given locale.','line_number':687,'multiline':False]['text':'*
 * Returns a new options object that includes the provided options (if any)
 * and fills in default components if required components are not defined.
 * Required can be "date", "time", or "any".
 * Defaults can be "date", "time", or "all".
 *
 * Spec: ECMAScript Internationalization API Specification, 12.1.1.
 ','line_number':691,'multiline':True]['text':' Steps 1-2.','line_number':703,'multiline':False]['text':' Step 3.','line_number':710,'multiline':False]['text':' Step 4.','line_number':713,'multiline':False]['text':' Step 5.','line_number':725,'multiline':False]['text':' "DateTimeFormat dateStyle & timeStyle" propsal','line_number':739,'multiline':False]['text':' https://github.com/tc39/proposal-intl-datetime-style','line_number':740,'multiline':False]['text':' Step 6.','line_number':753,'multiline':False]['text':' The specification says to call [[DefineOwnProperty]] with false for','line_number':755,'multiline':False]['text':' the Throw parameter, while Object.defineProperty uses true. For the','line_number':756,'multiline':False]['text':' calls here, the difference doesn't matter because we're adding','line_number':757,'multiline':False]['text':' properties to a new object.','line_number':758,'multiline':False]['text':' Step 7.','line_number':764,'multiline':False]['text':' See comment for step 7.','line_number':766,'multiline':False]['text':' Step 8.','line_number':772,'multiline':False]['text':'*
 * Returns the subset of the given locale list for which this locale list has a
 * matching (possibly fallback) locale. Locales appear in the same order in the
 * returned list as in the input list.
 *
 * Spec: ECMAScript Internationalization API Specification, 12.3.2.
 ','line_number':776,'multiline':True]['text':', options','line_number':783,'multiline':True]['text':' Step 1.','line_number':786,'multiline':False]['text':' Step 2.','line_number':789,'multiline':False]['text':' Step 3.','line_number':792,'multiline':False]['text':'*
 * DateTimeFormat internal properties.
 *
 * Spec: ECMAScript Internationalization API Specification, 9.1 and 12.3.3.
 ','line_number':796,'multiline':True]['text':'*
 * Create function to be cached and returned by Intl.DateTimeFormat.prototype.format.
 *
 * Spec: ECMAScript Internationalization API Specification, 12.1.5.
 ','line_number':823,'multiline':True]['text':' This function is not inlined in $Intl_DateTimeFormat_format_get to avoid','line_number':829,'multiline':False]['text':' creating a call-object on each call to $Intl_DateTimeFormat_format_get.','line_number':830,'multiline':False]['text':' Step 1 (implicit).','line_number':832,'multiline':False]['text':' Step 2.','line_number':834,'multiline':False]['text':' Steps 3-4.','line_number':839,'multiline':False]['text':' Step 5.','line_number':842,'multiline':False]['text':' formatToParts = ','line_number':843,'multiline':True]['text':'*
 * Returns a function bound to this DateTimeFormat that returns a String value
 * representing the result of calling ToNumber(date) according to the
 * effective locale and the formatting options of this DateTimeFormat.
 *
 * Spec: ECMAScript Internationalization API Specification, 12.4.3.
 ','line_number':847,'multiline':True]['text':' Uncloned functions with `$` prefix are allocated as extended function','line_number':854,'multiline':False]['text':' to store the original name in `SetCanonicalName`.','line_number':855,'multiline':False]['text':' Steps 1-3.','line_number':857,'multiline':False]['text':' Step 4.','line_number':867,'multiline':False]['text':' Steps 4.a-c.','line_number':869,'multiline':False]['text':' Step 5.','line_number':873,'multiline':False]['text':'*
 * Intl.DateTimeFormat.prototype.formatToParts ( date )
 *
 * Spec: ECMAScript Internationalization API Specification, 12.4.4.
 ','line_number':878,'multiline':True]['text':' Step 1.','line_number':884,'multiline':False]['text':' Steps 2-3.','line_number':887,'multiline':False]['text':' Steps 4-5.','line_number':893,'multiline':False]['text':' Ensure the DateTimeFormat internals are resolved.','line_number':896,'multiline':False]['text':' Step 6.','line_number':899,'multiline':False]['text':' formatToParts = ','line_number':900,'multiline':True]['text':'*
 * Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )
 *
 * Spec: Intl.DateTimeFormat.prototype.formatRange proposal
 ','line_number':903,'multiline':True]['text':' Step 1.','line_number':909,'multiline':False]['text':' Steps 2-3.','line_number':912,'multiline':False]['text':' Step 4.','line_number':918,'multiline':False]['text':' Step 5.','line_number':924,'multiline':False]['text':' Step 6.','line_number':927,'multiline':False]['text':' Step 7.','line_number':930,'multiline':False]['text':' Ensure the DateTimeFormat internals are resolved.','line_number':935,'multiline':False]['text':' Step 8.','line_number':938,'multiline':False]['text':' formatToParts = ','line_number':939,'multiline':True]['text':'*
 * Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )
 *
 * Spec: Intl.DateTimeFormat.prototype.formatRange proposal
 ','line_number':942,'multiline':True]['text':' Step 1.','line_number':948,'multiline':False]['text':' Steps 2-3.','line_number':951,'multiline':False]['text':' Step 4.','line_number':957,'multiline':False]['text':' Step 5.','line_number':963,'multiline':False]['text':' Step 6.','line_number':966,'multiline':False]['text':' Step 7.','line_number':969,'multiline':False]['text':' Ensure the DateTimeFormat internals are resolved.','line_number':974,'multiline':False]['text':' Step 8.','line_number':977,'multiline':False]['text':' formatToParts = ','line_number':978,'multiline':True]['text':'*
 * Returns the resolved options for a DateTimeFormat object.
 *
 * Spec: ECMAScript Internationalization API Specification, 12.4.5.
 ','line_number':981,'multiline':True]['text':' Steps 1-3.','line_number':987,'multiline':False]['text':' Steps 4-5.','line_number':997,'multiline':False]['text':' timeStyle (unlike dateStyle) requires resolving the pattern to','line_number':1014,'multiline':False]['text':' ensure "hourCycle" and "hour12" properties are added to |result|.','line_number':1015,'multiline':False]['text':' includeDateTimeFields = ','line_number':1016,'multiline':True]['text':' includeDateTimeFields = ','line_number':1025,'multiline':True]['text':' Step 6.','line_number':1028,'multiline':False]['text':' eslint-disable complexity ','line_number':1032,'multiline':True]['text':'*
 * Maps an ICU pattern string to a corresponding set of date-time components
 * and their values, and adds properties for these components to the result
 * object, which will be returned by the resolvedOptions method. For the
 * interpretation of ICU pattern characters, see
 * http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 ','line_number':1033,'multiline':True]['text':' "text" cases','line_number':1061,'multiline':False]['text':' "number" cases','line_number':1077,'multiline':False]['text':' "text & number" cases','line_number':1091,'multiline':False]['text':' skip other pattern characters and literal text','line_number':1109,'multiline':False]['text':' Map ICU pattern characters back to the corresponding date-time','line_number':1112,'multiline':False]['text':' components of DateTimeFormat. See','line_number':1113,'multiline':False]['text':' http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table','line_number':1114,'multiline':False]['text':' eslint-enable complexity ','line_number':1216,'multiline':True]