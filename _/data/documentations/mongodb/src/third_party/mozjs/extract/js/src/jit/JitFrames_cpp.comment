['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::DumpObject, js::DumpValue','line_number':31,'multiline':False]['text':' Given a slot index, returns the offset, in bytes, of that slot from an','line_number':53,'multiline':False]['text':' JitFrameLayout. Slot distances are uniform across architectures, however,','line_number':54,'multiline':False]['text':' the distance does depend on the size of the frame header.','line_number':55,'multiline':False]['text':' Skip stack slots until we reach the iterator object on the stack. For','line_number':104,'multiline':False]['text':' the destructuring case, we also need to get the "done" value.','line_number':105,'multiline':False]['text':' Do not call IteratorClose if the destructuring iterator is already','line_number':124,'multiline':False]['text':' done.','line_number':125,'multiline':False]['text':' Bail out if we're propagating a forced return, even if the realm is no','line_number':170,'multiline':False]['text':' longer a debuggee.','line_number':171,'multiline':False]['text':' Bail out if there's a catchable exception and we are the debuggee of a','line_number':180,'multiline':False]['text':' Debugger with a live onExceptionUnwind hook.','line_number':181,'multiline':False]['text':' Bail out if a Debugger has observed this frame (e.g., for onPop).','line_number':187,'multiline':False]['text':' We do the following:','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':'   1. Bailout to baseline to reconstruct a baseline frame.','line_number':200,'multiline':False]['text':'   2. Resume immediately into the exception tail afterwards, and','line_number':201,'multiline':False]['text':'      handle the exception again with the top frame now a baseline','line_number':202,'multiline':False]['text':'      frame.','line_number':203,'multiline':False]['text':'','line_number':204,'multiline':False]['text':' An empty exception info denotes that we're propagating an Ion','line_number':205,'multiline':False]['text':' exception due to debug mode, which BailoutIonToBaseline needs to','line_number':206,'multiline':False]['text':' know. This is because we might not be able to fully reconstruct up','line_number':207,'multiline':False]['text':' to the stack depth at the snapshot, as we could've thrown in the','line_number':208,'multiline':False]['text':' middle of a call.','line_number':209,'multiline':False]['text':' Ion can compile try-catch, but bailing out to catch','line_number':229,'multiline':False]['text':' exceptions is slow. Reset the warm-up counter so that if we','line_number':230,'multiline':False]['text':' catch many exceptions we won't Ion-compile the script.','line_number':231,'multiline':False]['text':' Bailout at the start of the catch block.','line_number':238,'multiline':False]['text':' Record exception locations to allow scope unwinding in','line_number':243,'multiline':False]['text':' |FinishBailoutToBaseline|','line_number':244,'multiline':False]['text':' TryNoteKind::ForOfIterclose is handled internally by the try note','line_number':261,'multiline':False]['text':' iterator.','line_number':262,'multiline':False]['text':' Unwind environment chain (pop block objects).','line_number':294,'multiline':False]['text':' Compute base pointer and stack pointer.','line_number':299,'multiline':False]['text':' Compute the pc.','line_number':303,'multiline':False]['text':' Close all live iterators on a BaselineFrame due to exception unwinding. The','line_number':330,'multiline':False]['text':' pc parameter is updated to where the envs have been unwound to.','line_number':331,'multiline':False]['text':' If we're closing a legacy generator, we have to skip catch','line_number':368,'multiline':False]['text':' blocks.','line_number':369,'multiline':False]['text':' Ion can compile try-catch, but bailing out to catch','line_number':376,'multiline':False]['text':' exceptions is slow. Reset the warm-up counter so that if we','line_number':377,'multiline':False]['text':' catch many exceptions we won't Ion-compile the script.','line_number':378,'multiline':False]['text':' Resume at the start of the catch block.','line_number':381,'multiline':False]['text':' Drop the exception instead of leaking cross compartment data.','line_number':399,'multiline':False]['text':' Note: if this ever changes, also update the','line_number':424,'multiline':False]['text':' TryNoteKind::Destructuring code in WarpBuilder.cpp!','line_number':425,'multiline':False]['text':' TryNoteKind::ForOfIterClose is handled internally by the try note','line_number':444,'multiline':False]['text':' iterator.','line_number':445,'multiline':False]['text':' Ensure the BaselineFrame is an interpreter frame. This is easy to do and','line_number':462,'multiline':False]['text':' simplifies the code below and interaction with DebugModeOSR.','line_number':463,'multiline':False]['text':'','line_number':464,'multiline':False]['text':' Note that we never return to this frame via the previous frame's return','line_number':465,'multiline':False]['text':' address. We could set the return address to nullptr to ensure it's never','line_number':466,'multiline':False]['text':' used, but the profiler expects a non-null return value for its JitCode map','line_number':467,'multiline':False]['text':' lookup so we have to use an address in the interpreter code instead.','line_number':468,'multiline':False]['text':' Suppress profiler sampling while we fix up the frame to ensure the','line_number':475,'multiline':False]['text':' sampler thread doesn't see an inconsistent state.','line_number':476,'multiline':False]['text':' Ensure the current iterator's resumePCInCurrentFrame_ isn't used','line_number':481,'multiline':False]['text':' anywhere.','line_number':482,'multiline':False]['text':' If we failed to allocate, then skip the increment and continue to','line_number':491,'multiline':False]['text':' handle the exception.','line_number':492,'multiline':False]['text':' Ensure that the debugger hasn't returned 'true' while clearing the','line_number':508,'multiline':False]['text':' exception state.','line_number':509,'multiline':False]['text':' No need to increment the PCCounts number of execution here,','line_number':519,'multiline':False]['text':' as the interpreter increments any PCCounts if present.','line_number':520,'multiline':False]['text':' We may be propagating a forced return from a debugger hook function.','line_number':532,'multiline':False]['text':' The following all return into baseline frames.','line_number':548,'multiline':False]['text':' When resuming into a bailed-out ion frame, use the bailout info to','line_number':554,'multiline':False]['text':' find the frame we are resuming into.','line_number':555,'multiline':False]['text':' mustUnwindActivation = ','line_number':604,'multiline':True]['text':' If a wasm try-catch handler is found, we can immediately jump to it','line_number':610,'multiline':False]['text':' and quit iterating through the stack.','line_number':611,'multiline':False]['text':' JIT code can enter same-compartment realms, so reset cx->realm to','line_number':623,'multiline':False]['text':' this frame's realm.','line_number':624,'multiline':False]['text':' Search each inlined frame for live iterator objects, and close','line_number':630,'multiline':False]['text':' them.','line_number':631,'multiline':False]['text':' Invalidation state will be the same for all inlined scripts in the','line_number':634,'multiline':False]['text':' frame.','line_number':635,'multiline':False]['text':' force = ','line_number':641,'multiline':True]['text':' If we hit OOM or overrecursion while bailing out, we don't','line_number':648,'multiline':False]['text':' attempt to bail out a second time for this Ion frame. Just unwind','line_number':649,'multiline':False]['text':' and continue at the next frame.','line_number':650,'multiline':False]['text':' When profiling, each frame popped needs a notification that','line_number':665,'multiline':False]['text':' the function has exited, so invoke the probe that a function','line_number':666,'multiline':False]['text':' is exiting.','line_number':667,'multiline':False]['text':' popProfilerFrame = ','line_number':671,'multiline':True]['text':' Remove left-over state which might have been needed for bailout.','line_number':680,'multiline':False]['text':' If invalidated, decrement the number of frames remaining on the','line_number':684,'multiline':False]['text':' stack for the given IonScript.','line_number':685,'multiline':False]['text':' Unwind profiler pseudo-stack','line_number':701,'multiline':False]['text':' popProfilerFrame = ','line_number':704,'multiline':True]['text':' Wasm sets its own value of SP in HandleExceptionWasm.','line_number':715,'multiline':False]['text':' Turns a JitFrameLayout into an ExitFrameLayout. Note that it has to be a','line_number':721,'multiline':False]['text':' bare exit frame so it's ignored by TraceJitExitFrame.','line_number':722,'multiline':False]['text':' If we already called this function for the current frame, do','line_number':727,'multiline':False]['text':' nothing.','line_number':728,'multiline':False]['text':' Trace |this| and any extra actual arguments for an Ion frame. Tracing','line_number':801,'multiline':False]['text':' of formal arguments is taken care of by the frame's safepoint/snapshot,','line_number':802,'multiline':False]['text':' except when the script might have lazy arguments or rest, in which case','line_number':803,'multiline':False]['text':' we trace them as well. We also have to trace formals if we have a','line_number':804,'multiline':False]['text':' LazyLink frame or an InterpreterStub frame or a special JSJit to wasm','line_number':805,'multiline':False]['text':' frame (since wasm doesn't use snapshots).','line_number':806,'multiline':False]['text':' Trace |this|.','line_number':826,'multiline':False]['text':' Trace actual arguments beyond the formals. Note + 1 for thisv.','line_number':829,'multiline':False]['text':' Always trace the new.target from the frame. It's not in the snapshots.','line_number':834,'multiline':False]['text':' +1 to pass |this|','line_number':835,'multiline':False]['text':' This frame has been invalidated, meaning that its IonScript is no','line_number':860,'multiline':False]['text':' longer reachable through the callee token (JSFunction/JSScript->ion','line_number':861,'multiline':False]['text':' is now nullptr or recompiled). Manually trace it here.','line_number':862,'multiline':False]['text':' Scan through slots which contain pointers (or on punboxing systems,','line_number':875,'multiline':False]['text':' actual values).','line_number':876,'multiline':False]['text':' GC moved the value, replace the stored payload.','line_number':914,'multiline':False]['text':' We have to trace the list of actual arguments, as only formal arguments','line_number':927,'multiline':False]['text':' are represented in the Snapshot.','line_number':928,'multiline':False]['text':' Under a bailout, do not have a Safepoint to only iterate over GC-things.','line_number':931,'multiline':False]['text':' Thus we use a SnapshotIterator to trace all the locations which would be','line_number':932,'multiline':False]['text':' used to reconstruct the Baseline frame.','line_number':933,'multiline':False]['text':'','line_number':934,'multiline':False]['text':' Note that at the time where this function is called, we have not yet','line_number':935,'multiline':False]['text':' started to reconstruct baseline frames.','line_number':936,'multiline':False]['text':' The vector of recover instructions is already traced as part of the','line_number':938,'multiline':False]['text':' JitActivation.','line_number':939,'multiline':False]['text':' For each instruction, we read the allocations without evaluating the','line_number':943,'multiline':False]['text':' recover instruction, nor reconstructing the frame. We are only looking at','line_number':944,'multiline':False]['text':' tracing readable allocations.','line_number':945,'multiline':False]['text':' Minor GCs may move slots/elements allocated in the nursery. Update','line_number':960,'multiline':False]['text':' any slots/elements pointers stored in this frame.','line_number':961,'multiline':False]['text':' This frame has been invalidated, meaning that its IonScript is no','line_number':967,'multiline':False]['text':' longer reachable through the callee token (JSFunction/JSScript->ion','line_number':968,'multiline':False]['text':' is now nullptr or recompiled).','line_number':969,'multiline':False]['text':' Skip to the right place in the safepoint','line_number':990,'multiline':False]['text':' Trace the ICStub pointer stored in the stub frame. This is necessary','line_number':1010,'multiline':False]['text':' so that we don't destroy the stub code after unlinking the stub.','line_number':1011,'multiline':False]['text':' Fallback stubs use runtime-wide trampoline code we don't need to trace.','line_number':1018,'multiline':False]['text':' Arguments with double size can only have RootValue type.','line_number':1051,'multiline':False]['text':' This is NO-OP on other platforms.','line_number':1065,'multiline':False]['text':' This corresponds to the case where we have build a fake exit frame which','line_number':1072,'multiline':False]['text':' handles the case of a native function call. We need to trace the argument','line_number':1073,'multiline':False]['text':' vector of the function call, and also new.target if it was a constructing','line_number':1074,'multiline':False]['text':' call.','line_number':1075,'multiline':False]['text':' Nothing needs to be traced here at the moment -- the arguments to the','line_number':1133,'multiline':False]['text':' callee are traced by the callee, and the inlined caller does not push','line_number':1134,'multiline':False]['text':' anything else.','line_number':1135,'multiline':False]['text':' Nothing to trace. Fake exit frame pushed for VM functions with','line_number':1140,'multiline':False]['text':' nothing to trace on the stack.','line_number':1141,'multiline':False]['text':' Trace arguments of the VM wrapper.','line_number':1150,'multiline':False]['text':' Sometimes we can bake in HandleObjects to nullptr.','line_number':1157,'multiline':False]['text':' Trace thisv.','line_number':1230,'multiline':False]['text':'','line_number':1231,'multiline':False]['text':' Baseline JIT code generated as part of the ICCall_Fallback stub may use','line_number':1232,'multiline':False]['text':' it if we're calling a constructor that returns a primitive value.','line_number':1233,'multiline':False]['text':' This is doing a subset of TraceIonJSFrame, since the callee doesn't','line_number':1239,'multiline':False]['text':' have a script.','line_number':1240,'multiline':False]['text':' GC can modify spilled registers, breaking our register checks.','line_number':1249,'multiline':False]['text':' To handle this, we disable these checks for the current VM call','line_number':1250,'multiline':False]['text':' when a GC happens.','line_number':1251,'multiline':False]['text':' This is used for sanity checking continuity of the sequence of wasm stack','line_number':1259,'multiline':False]['text':' maps as we unwind.  It has no functional purpose.','line_number':1260,'multiline':False]['text':' Ignore: this is a special marker used to let the','line_number':1289,'multiline':False]['text':' JitFrameIter know the frame above is a wasm frame, handled','line_number':1290,'multiline':False]['text':' in the next iteration.','line_number':1291,'multiline':False]['text':' "unknown" ','line_number':1299,'multiline':True]['text':' Recover the return address so that we can look it up in the','line_number':1350,'multiline':False]['text':' PcScriptCache, as script/pc computation is expensive.','line_number':1351,'multiline':False]['text':' Skip rectifier frames.','line_number':1358,'multiline':False]['text':' Skip Baseline/Ion stub and IC call frames.','line_number':1365,'multiline':False]['text':' Don't use the return address and the cache if the BaselineFrame is','line_number':1376,'multiline':False]['text':' running in the Baseline Interpreter. In this case the bytecode pc is','line_number':1377,'multiline':False]['text':' cheap to get, so we won't benefit from the cache, and the return address','line_number':1378,'multiline':False]['text':' does not map to a single bytecode pc.','line_number':1379,'multiline':False]['text':' Lazily initialize the cache. The allocation may safely fail and will not','line_number':1396,'multiline':False]['text':' GC.','line_number':1397,'multiline':False]['text':' Lookup failed: undertake expensive process to determine script and pc.','line_number':1409,'multiline':False]['text':' Add entry to cache.','line_number':1419,'multiline':False]['text':' results_ is freed by the UniquePtr.','line_number':1443,'multiline':False]['text':' Note: The vector necessary exists, otherwise this object would not have','line_number':1477,'multiline':False]['text':' been stored on the activation from where the trace function is called.','line_number':1478,'multiline':False]['text':' If we have to recover stores, and if we are not interested in the','line_number':1544,'multiline':False]['text':' default value of the instruction, then we have to check if the recover','line_number':1545,'multiline':False]['text':' instruction results are available.','line_number':1546,'multiline':False]['text':' The register contains the encoding of a float32. We just read','line_number':1608,'multiline':False]['text':' the bits without making any conversion.','line_number':1609,'multiline':False]['text':' Code paths which are calling maybeRead are not always capable of','line_number':1709,'multiline':False]['text':' returning an error code, as these code paths used to be infallible.','line_number':1710,'multiline':False]['text':' Assume that we are always going to be writing on the default value','line_number':1786,'multiline':False]['text':' while tracing.','line_number':1787,'multiline':False]['text':' If there is only one resume point in the list of instructions, then there','line_number':1840,'multiline':False]['text':' is no instruction to recover, and thus no need to register any results.','line_number':1841,'multiline':False]['text':' We do not have the result yet, which means that an observable stack','line_number':1851,'multiline':False]['text':' slot is requested.  As we do not want to bailout every time for the','line_number':1852,'multiline':False]['text':' same reason, we need to recompile without optimizing away the','line_number':1853,'multiline':False]['text':' observable stack slots.  The script would later be recompiled to have','line_number':1854,'multiline':False]['text':' support for Argument objects.','line_number':1855,'multiline':False]['text':' resetUses = ','line_number':1858,'multiline':True]['text':' Register the list of result on the activation.  We need to do that','line_number':1862,'multiline':False]['text':' before we initialize the list such as if any recover instruction','line_number':1863,'multiline':False]['text':' cause a GC, we can ensure that the results are properly traced by the','line_number':1864,'multiline':False]['text':' activation.','line_number':1865,'multiline':False]['text':' Start a new snapshot at the beginning of the JSJitFrameIter.  This','line_number':1873,'multiline':False]['text':' SnapshotIterator is used for evaluating the content of all recover','line_number':1874,'multiline':False]['text':' instructions.  The result is then saved on the JitActivation.','line_number':1875,'multiline':False]['text':' If the evaluation failed because of OOMs, then we discard the','line_number':1879,'multiline':False]['text':' current set of result that we collected so far.','line_number':1880,'multiline':False]['text':' The last instruction will always be a resume point.','line_number':1897,'multiline':False]['text':' No need to iterate over the only resume point.','line_number':1904,'multiline':False]['text':' Avoid invoking the object metadata callback, which could try to walk the','line_number':1910,'multiline':False]['text':' stack while bailing out.','line_number':1911,'multiline':False]['text':' Fill with the results of recover instructions.','line_number':1915,'multiline':False]['text':' Skip resume point and only interpret recover instructions.','line_number':1919,'multiline':False]['text':' Check that the current instruction can still be use.','line_number':1948,'multiline':False]['text':' This MaybeReadFallback method cannot GC.','line_number':1968,'multiline':False]['text':' findNextFrame will iterate to the next frame and init. everything.','line_number':2005,'multiline':False]['text':' Therefore to settle on the same frame, we report one frame less readed.','line_number':2006,'multiline':False]['text':' Read the initial frame out of the C stack.','line_number':2029,'multiline':False]['text':' Settle on the outermost frame without evaluating any instructions before','line_number':2035,'multiline':False]['text':' looking for a pc.','line_number':2036,'multiline':False]['text':' This unfortunately is O(n*m), because we must skip over outer frames','line_number':2042,'multiline':False]['text':' before reading inner ones.','line_number':2043,'multiline':False]['text':' The first time (frameCount_ == UINT32_MAX) we do not know the number of','line_number':2045,'multiline':False]['text':' frames that we are going to inspect.  So we are iterating until there is','line_number':2046,'multiline':False]['text':' no more frames, to settle on the inner most frame and to count the number','line_number':2047,'multiline':False]['text':' of frames.','line_number':2048,'multiline':False]['text':' Recover the number of actual arguments from the script.','line_number':2055,'multiline':False]['text':' Skip over non-argument slots, as well as |this|.','line_number':2074,'multiline':False]['text':' This value should correspond to the function which is being inlined.','line_number':2082,'multiline':False]['text':' The value must be readable to iterate over the inline frame. Most of','line_number':2083,'multiline':False]['text':' the time, these functions are stored as JSFunction constants,','line_number':2084,'multiline':False]['text':' register which are holding the JSFunction pointer, or recover','line_number':2085,'multiline':False]['text':' instruction with Default value.','line_number':2086,'multiline':False]['text':' Skip extra value allocations.','line_number':2089,'multiline':False]['text':' The first time we do not know the number of frames, we only settle on the','line_number':2103,'multiline':False]['text':' last frame, and update the number of frames based on the number of','line_number':2104,'multiline':False]['text':' iteration that we have done.','line_number':2105,'multiline':False]['text':' :TODO: Handle allocation failures from recover instruction.','line_number':2122,'multiline':False]['text':' If we cannot recover then we cannot GC.','line_number':2139,'multiline':False]['text':' Note we can hit this case even for functions with a CallObject, in case','line_number':2147,'multiline':False]['text':' we are walking the frame during the function prologue, before the env','line_number':2148,'multiline':False]['text':' chain has been initialized.','line_number':2149,'multiline':False]['text':' Ion does not handle non-function scripts that have anything other than','line_number':2158,'multiline':False]['text':' the global on their env chain.','line_number':2159,'multiline':False]['text':' No SIMD support in bailouts, SIMD is internal to wasm','line_number':2226,'multiline':False]['text':' Skip the current frame and look at the caller's.','line_number':2238,'multiline':False]['text':' Inlined Getters and Setters are never constructing.','line_number':2243,'multiline':False]['text':' In the case of a JS frame, look up the pc from the snapshot.','line_number':2249,'multiline':False]['text':' frame pointer ','line_number':2383,'multiline':True]['text':' |this| argument ','line_number':2386,'multiline':True]['text':' new.target ','line_number':2387,'multiline':True]['text':' For the moment, we do not keep the JitStackAlignment','line_number':2396,'multiline':False]['text':' alignment for exit frames.','line_number':2397,'multiline':False]['text':' Ideally, we should not have such requirement, but keep the','line_number':2402,'multiline':False]['text':' alignment-delta as part of the Safepoint such that we can pad','line_number':2403,'multiline':False]['text':' accordingly when making out-of-line calls.  In the mean time,','line_number':2404,'multiline':False]['text':' let us have check-points where we can garantee that','line_number':2405,'multiline':False]['text':' everything can properly be aligned before adding complexity.','line_number':2406,'multiline':False]['text':' The stack is dynamically aligned by baseline stubs before calling','line_number':2418,'multiline':False]['text':' any jitted code.','line_number':2419,'multiline':False]['text':' namespace jit','line_number':2445,'multiline':False]['text':' namespace js','line_number':2446,'multiline':False]