['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' std::max, std::min','line_number':22,'multiline':False]['text':' std::uninitialized_copy_n','line_number':23,'multiline':False]['text':' std::tuple','line_number':28,'multiline':False]['text':' JS_IsArrayBufferViewObject','line_number':44,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':45,'multiline':False]['text':' js::WarnNumberASCII','line_number':56,'multiline':False]['text':' js::AutoRealm','line_number':66,'multiline':False]['text':' If there are too many wasm memory buffers (typically 6GB each) live we run up','line_number':81,'multiline':False]['text':' against system resource exhaustion (address space or number of memory map','line_number':82,'multiline':False]['text':' descriptors), see bug 1068684, bug 1073934, bug 1517412, bug 1502733 for','line_number':83,'multiline':False]['text':' details.  The limiting case seems to be Android on ARM64, where the','line_number':84,'multiline':False]['text':' per-process address space is limited to 4TB (39 bits) by the organization of','line_number':85,'multiline':False]['text':' the page tables.  An earlier problem was Windows Vista Home 64-bit, where the','line_number':86,'multiline':False]['text':' per-process address space is limited to 8TB (40 bits).','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' Thus we track the number of live objects if we are using large mappings, and','line_number':89,'multiline':False]['text':' set a limit of the number of live buffer objects per process. We trigger GC','line_number':90,'multiline':False]['text':' work when we approach the limit and we throw an OOM error if the per-process','line_number':91,'multiline':False]['text':' limit is exceeded. The limit (MaximumLiveMappedBuffers) is specific to','line_number':92,'multiline':False]['text':' architecture, OS, and OS configuration.','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' Since the MaximumLiveMappedBuffers limit is not generally accounted for by','line_number':95,'multiline':False]['text':' any existing GC-trigger heuristics, we need an extra heuristic for triggering','line_number':96,'multiline':False]['text':' GCs when the caller is allocating memories rapidly without other garbage.','line_number':97,'multiline':False]['text':' Thus, once the live buffer count crosses the threshold','line_number':98,'multiline':False]['text':' StartTriggeringAtLiveBufferCount, we start triggering GCs every','line_number':99,'multiline':False]['text':' AllocatedBuffersPerTrigger allocations.  Once we reach','line_number':100,'multiline':False]['text':' StartSyncFullGCAtLiveBufferCount live buffers, we perform expensive','line_number':101,'multiline':False]['text':' non-incremental full GCs as a last-ditch effort to avoid unnecessary failure.','line_number':102,'multiline':False]['text':' Once we reach MaximumLiveMappedBuffers, we perform further full GCs before','line_number':103,'multiline':False]['text':' giving up.','line_number':104,'multiline':False]['text':' With 6GB mappings, the hard limit is 84 buffers.  75 cuts it close.','line_number':107,'multiline':False]['text':' ASAN and TSAN use a ton of vmem for bookkeeping leaving a lot less for the','line_number':110,'multiline':False]['text':' program so use a lower limit.','line_number':111,'multiline':False]['text':' StartTriggeringAtLiveBufferCount + AllocatedBuffersPerTrigger must be well','line_number':117,'multiline':False]['text':' below StartSyncFullGCAtLiveBufferCount in order to provide enough time for','line_number':118,'multiline':False]['text':' incremental GC to do its job.','line_number':119,'multiline':False]['text':' Refuse to allocate too large buffers.','line_number':142,'multiline':False]['text':' Test >= to guard against the case where multiple extant runtimes','line_number':164,'multiline':False]['text':' race to allocate.','line_number':165,'multiline':False]['text':' !XP_WIN && !__wasi__','line_number':193,'multiline':False]['text':' Note we will waste a page on zero-sized memories here','line_number':201,'multiline':False]['text':' !XP_WIN && !__wasi__','line_number':206,'multiline':False]['text':' posix_memalign'd memory is already committed','line_number':228,'multiline':False]['text':' XP_WIN','line_number':234,'multiline':False]['text':' Note this will not move memory (no MREMAP_MAYMOVE specified)','line_number':260,'multiline':False]['text':' No mechanism for remapping on MacOS and other Unices. Luckily','line_number':266,'multiline':False]['text':' shouldn't need it here as most of these are 64-bit.','line_number':267,'multiline':False]['text':' XP_WIN','line_number':281,'multiline':False]['text':' Decrement the buffer counter at the end -- otherwise, a race condition','line_number':290,'multiline':False]['text':' could enable the creation of unlimited buffers.','line_number':291,'multiline':False]['text':'
 * ArrayBufferObject
 *
 * This class holds the underlying raw buffer that the TypedArrayObject classes
 * access.  It can be created explicitly and passed to a TypedArrayObject, or
 * can be created implicitly by constructing a TypedArrayObject with a size.
 ','line_number':296,'multiline':True]['text':'
 * ArrayBufferObject (base)
 ','line_number':304,'multiline':True]['text':' addProperty','line_number':309,'multiline':False]['text':' delProperty','line_number':310,'multiline':False]['text':' enumerate','line_number':311,'multiline':False]['text':' newEnumerate','line_number':312,'multiline':False]['text':' resolve','line_number':313,'multiline':False]['text':' mayResolve','line_number':314,'multiline':False]['text':' finalize','line_number':315,'multiline':False]['text':' call','line_number':316,'multiline':False]['text':' hasInstance','line_number':317,'multiline':False]['text':' construct','line_number':318,'multiline':False]['text':' trace','line_number':319,'multiline':False]['text':' objectMovedOp','line_number':345,'multiline':False]['text':'
 * ArrayBuffer.isView(obj); ES6 (Dec 2013 draft) 24.1.3.1
 ','line_number':379,'multiline':True]['text':' ES2017 draft 24.1.2.1','line_number':389,'multiline':False]['text':' Step 1.','line_number':394,'multiline':False]['text':' Step 2.','line_number':399,'multiline':False]['text':' Step 3 (Inlined 24.1.1.1 AllocateArrayBuffer).','line_number':405,'multiline':False]['text':' 24.1.1.1, step 1 (Inlined 9.1.14 OrdinaryCreateFromConstructor).','line_number':406,'multiline':False]['text':' 24.1.1.1, step 3 (Inlined 6.2.6.1 CreateByteDataBlock, step 2).','line_number':413,'multiline':False]['text':' 24.1.1.1, steps 1 and 4-6.','line_number':418,'multiline':False]['text':' First attempt a normal allocation.','line_number':431,'multiline':False]['text':' Otherwise attempt a large allocation, calling the','line_number':435,'multiline':False]['text':' large-allocation-failure callback if necessary.','line_number':436,'multiline':False]['text':' First attempt a normal allocation.','line_number':449,'multiline':False]['text':' Otherwise attempt a large allocation, calling the','line_number':453,'multiline':False]['text':' large-allocation-failure callback if necessary.','line_number':454,'multiline':False]['text':' static ','line_number':477,'multiline':True]['text':' Update all views of the buffer to account for the buffer having been','line_number':483,'multiline':False]['text':' detached, and clear the buffer's data and list of views.','line_number':484,'multiline':False]['text':'','line_number':485,'multiline':False]['text':' Typed object buffers are not exposed and cannot be detached.','line_number':486,'multiline':False]['text':'
 * [SMDOC] WASM Linear Memory structure
 *
 * Wasm Raw Buf Linear Memory Structure
 *
 * The linear heap in Wasm is an mmaped array buffer. Several
 * constants manage its lifetime:
 *
 *  - length - the wasm-visible current length of the buffer. Accesses in the
 *    range [0, length] succeed. May only increase.
 *
 *  - boundsCheckLimit - the size against which we perform bounds checks. It is
 *    always a constant offset smaller than mappedSize. Currently that constant
 *    offset is 64k (wasm::GuardSize).
 *
 *  - maxSize - the optional declared limit on how much length can grow.
 *
 *  - mappedSize - the actual mmaped size. Access in the range
 *    [0, mappedSize] will either succeed, or be handled by the wasm signal
 *    handlers.
 *
 * The below diagram shows the layout of the wasm heap. The wasm-visible
 * portion of the heap starts at 0. There is one extra page prior to the
 * start of the wasm heap which contains the WasmArrayRawBuffer struct at
 * its end (i.e. right before the start of the WASM heap).
 *
 *  WasmArrayRawBuffer
 *      \    ArrayBufferObject::dataPointer()
 *       \  /
 *        \ |
 *  ______|_|____________________________________________________________
 * |______|_|______________|___________________|____________|____________|
 *          0          length              maxSize  boundsCheckLimit  mappedSize
 *
 * \_______________________/
 *          COMMITED
 *                          \____________________________________________/
 *                                           SLOP
 * \_____________________________________________________________________/
 *                         MAPPED
 *
 * Invariants:
 *  - length only increases
 *  - 0 <= length <= maxSize (if present) <= boundsCheckLimit <= mappedSize
 *  - on ARM boundsCheckLimit must be a valid ARM immediate.
 *  - if maxSize is not specified, boundsCheckLimit/mappedSize may grow. They
 *    are otherwise constant.
 *
 * NOTE: For asm.js on non-x64 we guarantee that
 *
 * length == maxSize == boundsCheckLimit == mappedSize
 *
 * That is, signal handlers will not be invoked, since they cannot emulate
 * asm.js accesses on non-x64 architectures.
 *
 * The region between length and mappedSize is the SLOP - an area where we use
 * signal handlers to catch things that slip by bounds checks. Logically it has
 * two parts:
 *
 *  - from length to boundsCheckLimit - this part of the SLOP serves to catch
 *  accesses to memory we have reserved but not yet grown into. This allows us
 *  to grow memory up to max (when present) without having to patch/update the
 *  bounds checks.
 *
 *  - from boundsCheckLimit to mappedSize - this part of the SLOP allows us to
 *  bounds check against base pointers and fold some constant offsets inside
 *  loads. This enables better Bounds Check Elimination.
 *
 ','line_number':511,'multiline':True]['text':' static ','line_number':630,'multiline':True]['text':' Prior code has asserted that initial pages is within our implementation','line_number':634,'multiline':False]['text':' limits (wasm::MaxMemory32Pages) and we can assume it is a valid size_t.','line_number':635,'multiline':False]['text':' static ','line_number':667,'multiline':True]['text':' On 64-bit platforms when we aren't using huge memory and we're using','line_number':686,'multiline':False]['text':' Cranelift, clamp clampedMaxSize to a value that satisfies the 32-bit','line_number':687,'multiline':False]['text':' invariants clampedMaxSize + wasm::PageSize < UINT32_MAX and','line_number':688,'multiline':False]['text':' clampedMaxSize % wasm::PageSize == 0.','line_number':689,'multiline':False]['text':'','line_number':690,'multiline':False]['text':' Note MaxMemory32LimitField*PageSize == UINT32_MAX+1 == 4GB, as you would','line_number':691,'multiline':False]['text':' expect for a 32-bit memory.','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' Note that this will correspond with MaxMemory32BoundsCheckLimit().','line_number':694,'multiline':False]['text':'','line_number':695,'multiline':False]['text':' We do this only when Cranelift is present because Cranelift has not been','line_number':696,'multiline':False]['text':' updated to handle a 64-bit boundsCheckLimit field on 64-bit systems.','line_number':697,'multiline':False]['text':' On 32-bit platforms, prevent applications specifying a large max','line_number':707,'multiline':False]['text':' (like UINT32_MAX) from unintentially OOMing the browser: they just','line_number':708,'multiline':False]['text':' want "a lot of memory". Maintain the invariant that','line_number':709,'multiline':False]['text':' initialSize <= clampedMaxSize.','line_number':710,'multiline':False]['text':' Adjust the maximum pages specified to conform to extra invariants in the','line_number':732,'multiline':False]['text':' engine.','line_number':733,'multiline':False]['text':' Override the mapped size if we are using huge memory. If we are not, then','line_number':740,'multiline':False]['text':' it will be calculated by the raw buffer we are using.','line_number':741,'multiline':False]['text':' If we fail, and have a maxPages, try to reserve the biggest chunk','line_number':759,'multiline':False]['text':' in the range [initialPages, maxPages) using log backoff.','line_number':760,'multiline':False]['text':' Try to grow our chunk as much as possible.','line_number':784,'multiline':False]['text':' ObjT::createFromNewRawBuffer assumes ownership of |buffer| even in case','line_number':790,'multiline':False]['text':' of failure.','line_number':791,'multiline':False]['text':' See MaximumLiveMappedBuffers comment above.','line_number':800,'multiline':False]['text':' Log the result with details on the memory allocation','line_number':816,'multiline':False]['text':' It's okay if this uselessly sets the flag a second time.','line_number':868,'multiline':False]['text':' asm.js code and associated buffers are potentially long-lived.  Yet a','line_number':884,'multiline':False]['text':' buffer of user-owned data *must* be detached by the user before the','line_number':885,'multiline':False]['text':' user-owned data is disposed.  No caller wants to use a user-owned','line_number':886,'multiline':False]['text':' ArrayBuffer with asm.js, so just don't support this and avoid a mess of','line_number':887,'multiline':False]['text':' complexity.','line_number':888,'multiline':False]['text':' wasm buffers can be detached at any time.','line_number':890,'multiline':False]['text':' Inline data doesn't require releasing.','line_number':931,'multiline':False]['text':' There's nothing to release if there's no data.','line_number':938,'multiline':False]['text':' User-owned data is released by, well, the user.','line_number':942,'multiline':False]['text':' The analyzer can't know for sure whether the embedder-supplied','line_number':955,'multiline':False]['text':' free function will GC. We give the analyzer a hint here.','line_number':956,'multiline':False]['text':' (Doing a GC in the free function is considered a programmer','line_number':957,'multiline':False]['text':' error.)','line_number':958,'multiline':False]['text':' static ','line_number':1052,'multiline':True]['text':' The caller must verify that the new page size won't overflow when','line_number':1060,'multiline':False]['text':' converted to a byte length.','line_number':1061,'multiline':False]['text':' On failure, do not throw and ensure that the original buffer is','line_number':1064,'multiline':False]['text':' unmodified and valid. After WasmArrayRawBuffer::growToPagesInPlace(), the','line_number':1065,'multiline':False]['text':' wasm-visible length of the buffer has been increased so it must be the','line_number':1066,'multiline':False]['text':' last fallible operation.','line_number':1067,'multiline':False]['text':' Note, caller must guard on limit appropriate for the memory type','line_number':1069,'multiline':False]['text':' Extract the grown contents from |oldBuf|.','line_number':1086,'multiline':False]['text':' Overwrite |oldBuf|'s data pointer *without* releasing old data.','line_number':1089,'multiline':False]['text':' Detach |oldBuf| now that doing so won't release |oldContents|.','line_number':1092,'multiline':False]['text':' Set |newBuf|'s contents to |oldBuf|'s original contents.','line_number':1097,'multiline':False]['text':' static ','line_number':1104,'multiline':True]['text':' On failure, do not throw and ensure that the original buffer is','line_number':1108,'multiline':False]['text':' unmodified and valid.','line_number':1109,'multiline':False]['text':' The caller must verify that the new page size won't overflow when','line_number':1111,'multiline':False]['text':' converted to a byte length.','line_number':1112,'multiline':False]['text':' Note, caller must guard on the limit appropriate to the memory type','line_number':1115,'multiline':False]['text':' 24.1.1.1, step 3 (Inlined 6.2.6.1 CreateByteDataBlock, step 2).','line_number':1176,'multiline':False]['text':' Some |contents| kinds need to store extra data in the ArrayBuffer beyond a','line_number':1181,'multiline':False]['text':' data pointer.  If needed for the particular kind, add extra fixed slots to','line_number':1182,'multiline':False]['text':' the ArrayBuffer for use as raw storage to store such information.','line_number':1183,'multiline':False]['text':' No accounting to do in this case.','line_number':1189,'multiline':False]['text':' Store the FreeInfo in the inline data slots so that we','line_number':1191,'multiline':False]['text':' don't use up slots for it in non-refcounted array buffers.','line_number':1192,'multiline':False]['text':' The ABO is taking ownership, so account the bytes against the zone.','line_number':1198,'multiline':False]['text':' static ','line_number':1233,'multiline':True]['text':' = nullptr ','line_number':1236,'multiline':True]['text':' Try fitting the data inline with the object by repurposing fixed-slot','line_number':1240,'multiline':False]['text':' storage.  Add extra fixed slots if necessary to accomplish this, but don't','line_number':1241,'multiline':False]['text':' exceed the maximum number of fixed slots!','line_number':1242,'multiline':False]['text':' static ','line_number':1287,'multiline':True]['text':' = nullptr ','line_number':1310,'multiline':True]['text':' 24.1.1.1, step 3 (Inlined 6.2.6.1 CreateByteDataBlock, step 2).','line_number':1311,'multiline':False]['text':' static ','line_number':1357,'multiline':True]['text':' Overwrite the old data pointer *without* releasing the contents','line_number':1369,'multiline':False]['text':' being stolen.','line_number':1370,'multiline':False]['text':' Detach |buffer| now that doing so won't free |stolenData|.','line_number':1373,'multiline':False]['text':' We can't use these data types directly.  Make a copy to return.','line_number':1383,'multiline':False]['text':' Detach |buffer|.  This immediately releases the currently owned','line_number':1389,'multiline':False]['text':' contents, freeing or unmapping data in the MAPPED and EXTERNAL cases.','line_number':1390,'multiline':False]['text':' static ','line_number':1411,'multiline':True]['text':' Overwrite the old data pointer *without* releasing old data.','line_number':1438,'multiline':False]['text':' Detach |buffer| now that doing so won't release |oldContents|.','line_number':1441,'multiline':False]['text':' static ','line_number':1466,'multiline':True]['text':' Inline data's size should be reported by this object's size-class','line_number':1472,'multiline':False]['text':' reporting.','line_number':1473,'multiline':False]['text':' No data is no memory.','line_number':1485,'multiline':False]['text':' User-owned data should be accounted for by the user.','line_number':1489,'multiline':False]['text':' External data will be accounted for by the owner of the buffer,','line_number':1492,'multiline':False]['text':' not this view.','line_number':1493,'multiline':False]['text':' static ','line_number':1508,'multiline':True]['text':' static ','line_number':1513,'multiline':True]['text':' static ','line_number':1527,'multiline':True]['text':' Fix up possible inline data pointer.','line_number':1532,'multiline':False]['text':'
 * InnerViewTable
 ','line_number':1559,'multiline':True]['text':' ArrayBufferObject entries are only added when there are multiple views.','line_number':1567,'multiline':False]['text':' Only add the entry to |nurseryKeys| if it isn't already there.','line_number':1580,'multiline':False]['text':' To avoid quadratic blowup, skip the loop below if we end up','line_number':1582,'multiline':False]['text':' adding enormous numbers of views for the same object.','line_number':1583,'multiline':False]['text':' ViewVector has one inline element, so the first insertion is','line_number':1604,'multiline':False]['text':' guaranteed to succeed.','line_number':1605,'multiline':False]['text':' static ','line_number':1632,'multiline':True]['text':' If the current element is garbage then remove it from the','line_number':1642,'multiline':False]['text':' vector by moving the last one into its place.','line_number':1643,'multiline':False]['text':' Do the required sweeping by looking at every map entry.','line_number':1673,'multiline':False]['text':' Don't pass nulled contents to |createForContents|.','line_number':1774,'multiline':False]