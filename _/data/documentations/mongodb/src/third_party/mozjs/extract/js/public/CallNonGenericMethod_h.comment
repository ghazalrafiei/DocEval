['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Returns true if |v| is considered an acceptable this-value.','line_number':16,'multiline':False]['text':' Implements the guts of a method; guaranteed to be provided an acceptable','line_number':19,'multiline':False]['text':' this-value, as determined by a corresponding IsAcceptableThis method.','line_number':20,'multiline':False]['text':' DON'T CALL THIS DIRECTLY.  It's for use only by CallNonGenericMethod!','line_number':25,'multiline':False]['text':' namespace detail','line_number':31,'multiline':False]['text':' Methods usually act upon |this| objects only from a single global object and','line_number':33,'multiline':False]['text':' compartment.  Sometimes, however, a method must act upon |this| values from','line_number':34,'multiline':False]['text':' multiple global objects or compartments.  In such cases the |this| value a','line_number':35,'multiline':False]['text':' method might see will be wrapped, such that various access to the object --','line_number':36,'multiline':False]['text':' to its class, its private data, its reserved slots, and so on -- will not','line_number':37,'multiline':False]['text':' work properly without entering that object's compartment.  This method','line_number':38,'multiline':False]['text':' implements a solution to this problem.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' To implement a method that accepts |this| values from multiple compartments,','line_number':41,'multiline':False]['text':' define two functions.  The first function matches the IsAcceptableThis type','line_number':42,'multiline':False]['text':' and indicates whether the provided value is an acceptable |this| for the','line_number':43,'multiline':False]['text':' method; it must be a pure function only of its argument.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':'   static const JSClass AnswerClass = { ... };','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'   static bool','line_number':48,'multiline':False]['text':'   IsAnswerObject(const Value& v)','line_number':49,'multiline':False]['text':'   {','line_number':50,'multiline':False]['text':'       if (!v.isObject()) {','line_number':51,'multiline':False]['text':'           return false;','line_number':52,'multiline':False]['text':'       }','line_number':53,'multiline':False]['text':'       return JS_GetClass(&v.toObject()) == &AnswerClass;','line_number':54,'multiline':False]['text':'   }','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' The second function implements the NativeImpl signature and defines the','line_number':57,'multiline':False]['text':' behavior of the method when it is provided an acceptable |this| value.','line_number':58,'multiline':False]['text':' Aside from some typing niceties -- see the CallArgs interface for details --','line_number':59,'multiline':False]['text':' its interface is the same as that of JSNative.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'   static bool','line_number':62,'multiline':False]['text':'   answer_getAnswer_impl(JSContext* cx, JS::CallArgs args)','line_number':63,'multiline':False]['text':'   {','line_number':64,'multiline':False]['text':'       args.rval().setInt32(42);','line_number':65,'multiline':False]['text':'       return true;','line_number':66,'multiline':False]['text':'   }','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' The implementation function is guaranteed to be called *only* with a |this|','line_number':69,'multiline':False]['text':' value which is considered acceptable.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' Now to implement the actual method, write a JSNative that calls the method','line_number':72,'multiline':False]['text':' declared below, passing the appropriate template and runtime arguments.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'   static bool','line_number':75,'multiline':False]['text':'   answer_getAnswer(JSContext* cx, unsigned argc, JS::Value* vp)','line_number':76,'multiline':False]['text':'   {','line_number':77,'multiline':False]['text':'       JS::CallArgs args = JS::CallArgsFromVp(argc, vp);','line_number':78,'multiline':False]['text':'       return JS::CallNonGenericMethod<IsAnswerObject,','line_number':79,'multiline':False]['text':'                                       answer_getAnswer_impl>(cx, args);','line_number':80,'multiline':False]['text':'   }','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' Note that, because they are used as template arguments, the predicate','line_number':83,'multiline':False]['text':' and implementation functions must have external linkage. (This is','line_number':84,'multiline':False]['text':' unfortunate, but GCC wasn't inlining things as one would hope when we','line_number':85,'multiline':False]['text':' passed them as function arguments.)','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' JS::CallNonGenericMethod will test whether |args.thisv()| is acceptable.  If','line_number':88,'multiline':False]['text':' it is, it will call the provided implementation function, which will return','line_number':89,'multiline':False]['text':' a value and indicate success.  If it is not, it will attempt to unwrap','line_number':90,'multiline':False]['text':' |this| and call the implementation function on the unwrapped |this|.  If','line_number':91,'multiline':False]['text':' that succeeds, all well and good.  If it doesn't succeed, a TypeError will','line_number':92,'multiline':False]['text':' be thrown.','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' Note: JS::CallNonGenericMethod will only work correctly if it's called in','line_number':95,'multiline':False]['text':'       tail position in a JSNative.  Do not call it from any other place.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' namespace JS','line_number':121,'multiline':False]['text':' js_CallNonGenericMethod_h ','line_number':123,'multiline':True]