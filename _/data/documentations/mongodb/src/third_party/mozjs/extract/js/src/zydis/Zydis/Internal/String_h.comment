['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd, Joel Hoener

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   Provides some internal, more performant, but unsafe helper functions for the
 *          `ZyanString` data-type.
 *
 * Most of these functions are very similar to the ones in `Zycore/String.h`, but inlined and
 * without optional overhead like parameter-validation checks, etc ...
 *
 * The `ZyanString` data-type is able to dynamically allocate memory on the heap, but as `Zydis` is
 * designed to be a non-'malloc'ing library, all functions in this file assume that the instances
 * they are operating on are created with a user-defined static-buffer.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':53,'multiline':True]['text':' Enums and types                                                                                ','line_number':54,'multiline':True]['text':' ============================================================================================== ','line_number':55,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':57,'multiline':True]['text':' Letter Case                                                                                    ','line_number':58,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':59,'multiline':True]['text':'*
 * @brief   Defines the `ZydisLetterCase` enum.
 ','line_number':61,'multiline':True]['text':'*
     * @brief   Uses the given text "as is".
     ','line_number':66,'multiline':True]['text':'*
     * @brief   Converts the given text to lowercase letters.
     ','line_number':70,'multiline':True]['text':'*
     * @brief   Converts the given text to uppercase letters.
     ','line_number':74,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':79,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':83,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':89,'multiline':True]['text':' ============================================================================================== ','line_number':91,'multiline':True]['text':' Macros                                                                                         ','line_number':92,'multiline':True]['text':' ============================================================================================== ','line_number':93,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':95,'multiline':True]['text':' Internal macros                                                                                ','line_number':96,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':97,'multiline':True]['text':'*
 * @brief   Checks for a terminating '\0' character at the end of the string data.
 ','line_number':99,'multiline':True]['text':'*
 * @brief   Writes a terminating '\0' character at the end of the string data.
 ','line_number':105,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':111,'multiline':True]['text':' ============================================================================================== ','line_number':113,'multiline':True]['text':' Internal Functions                                                                             ','line_number':114,'multiline':True]['text':' ============================================================================================== ','line_number':115,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':117,'multiline':True]['text':' Appending                                                                                      ','line_number':118,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':119,'multiline':True]['text':'*
 * @brief   Appends the content of the source string to the end of the destination string.
 *
 * @param   destination The destination string.
 * @param   source      The source string.
 *
 * @return  A zyan status code.
 ','line_number':121,'multiline':True]['text':'*
 * @brief   Appends the content of the source string to the end of the destination string,
 *          converting the characters to the specified letter-case.
 *
 * @param   destination The destination string.
 * @param   source      The source string.
 * @param   letter_case The desired letter-case.
 *
 * @return  A zyan status code.
 ','line_number':149,'multiline':True]['text':'*
 * @brief   Appends the content of the source short-string to the end of the destination string.
 *
 * @param   destination The destination string.
 * @param   source      The source string.
 *
 * @return  A zyan status code.
 ','line_number':220,'multiline':True]['text':'*
 * @brief   Appends the content of the source short-string to the end of the destination string,
 *          converting the characters to the specified letter-case.
 *
 * @param   destination The destination string.
 * @param   source      The source string.
 * @param   letter_case The desired letter-case.
 *
 * @return  A zyan status code.
 ','line_number':249,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':320,'multiline':True]['text':' Formatting                                                                                     ','line_number':321,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':322,'multiline':True]['text':'*
 * @brief   Formats the given unsigned ordinal `value` to its decimal text-representation and
 *          appends it to the `string`.
 *
 * @param   string          A pointer to the `ZyanString` instance.
 * @param   value           The value.
 * @param   padding_length  Padds the converted value with leading zeros, if the number of chars is
 *                          less than the `padding_length`.
 * @param   prefix          The string to use as prefix or `ZYAN_NULL`, if not needed.
 * @param   suffix          The string to use as suffix or `ZYAN_NULL`, if not needed.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':324,'multiline':True]['text':'*
 * @brief   Formats the given signed ordinal `value` to its decimal text-representation and
 *          appends it to the `string`.
 *
 * @param   string          A pointer to the `ZyanString` instance.
 * @param   value           The value.
 * @param   padding_length  Padds the converted value with leading zeros, if the number of chars is
 *                          less than the `padding_length`.
 * @param   force_sign      Set `ZYAN_TRUE`, to force printing of the `+` sign for positive numbers.
 * @param   prefix          The string to use as prefix or `ZYAN_NULL`, if not needed.
 * @param   suffix          The string to use as suffix or `ZYAN_NULL`, if not needed.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':343,'multiline':True]['text':'*
 * @brief   Formats the given unsigned ordinal `value` to its hexadecimal text-representation and
 *          appends it to the `string`.
 *
 * @param   string          A pointer to the `ZyanString` instance.
 * @param   value           The value.
 * @param   padding_length  Padds the converted value with leading zeros, if the number of chars is
 *                          less than the `padding_length`.
 * @param   uppercase       Set `ZYAN_TRUE` to use uppercase letters ('A'-'F') instead of lowercase
 *                          ones ('a'-'f').
 * @param   prefix          The string to use as prefix or `ZYAN_NULL`, if not needed.
 * @param   suffix          The string to use as suffix or `ZYAN_NULL`, if not needed.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':386,'multiline':True]['text':'*
 * @brief   Formats the given signed ordinal `value` to its hexadecimal text-representation and
 *          appends it to the `string`.
 *
 * @param   string          A pointer to the string.
 * @param   value           The value.
 * @param   padding_length  Padds the converted value with leading zeros, if the number of chars is
 *                          less than the `padding_length` (the sign char is ignored).
 * @param   uppercase       Set `ZYAN_TRUE` to print the hexadecimal value in uppercase letters
 *                          instead of lowercase ones.
 * @param   force_sign      Set to `ZYAN_TRUE`, to force printing of the `+` sign for positive
 *                          numbers.
 * @param   prefix          The string to use as prefix or `NULL`, if not needed.
 * @param   suffix          The string to use as suffix or `NULL`, if not needed.
 *
 * @return  `ZYAN_STATUS_SUCCESS`, if the function succeeded, or
 *          `ZYAN_STATUS_INSUFFICIENT_BUFFER_SIZE`, if the size of the buffer was not
 *          sufficient to append the given `value`.
 *
 * The string-buffer pointer is increased by the number of chars written, if the call was
 * successful.
 ','line_number':407,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':455,'multiline':True]['text':' ============================================================================================== ','line_number':457,'multiline':True]['text':' ZYDIS_INTERNAL_STRING_H','line_number':463,'multiline':False]