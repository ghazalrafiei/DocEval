['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Base class for entries mapping a pc offset to a native code offset.','line_number':47,'multiline':False]['text':' Class used during Baseline compilation to store the native code offset for','line_number':59,'multiline':False]['text':' resume offset ops.','line_number':60,'multiline':False]['text':' Largest script that the baseline compiler will attempt to compile.','line_number':69,'multiline':False]['text':' ARM branches can only reach 32MB, and the macroassembler doesn't mitigate','line_number':71,'multiline':False]['text':' that limitation. Use a stricter limit on the acceptable script size to','line_number':72,'multiline':False]['text':' avoid crashing when branches go out of range.','line_number':73,'multiline':False]['text':' Limit the locals on a given script so that stack check on baseline frames','line_number':79,'multiline':False]['text':' doesn't overflow a uint32_t value.','line_number':80,'multiline':False]['text':' (BaselineMaxScriptSlots * sizeof(Value)) must fit within a uint32_t.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' This also applies to the Baseline Interpreter: it ensures we don't run out','line_number':83,'multiline':False]['text':' of stack space (and throw over-recursion exceptions) for scripts with a huge','line_number':84,'multiline':False]['text':' number of locals. The C++ interpreter avoids this by having heap-allocated','line_number':85,'multiline':False]['text':' stack frames.','line_number':86,'multiline':False]['text':' An entry in the BaselineScript return address table. These entries are used','line_number':89,'multiline':False]['text':' to determine the bytecode pc for a return address into Baseline code.','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' There must be an entry for each location where we can end up calling into','line_number':92,'multiline':False]['text':' C++ (directly or via script/trampolines) and C++ can request the current','line_number':93,'multiline':False]['text':' bytecode pc (this includes anything that may throw an exception, GC, or walk','line_number':94,'multiline':False]['text':' the stack). We currently add entries for each:','line_number':95,'multiline':False]['text':'','line_number':96,'multiline':False]['text':' * callVM','line_number':97,'multiline':False]['text':' * IC','line_number':98,'multiline':False]['text':' * DebugTrap (trampoline call)','line_number':99,'multiline':False]['text':' * JSOp::Resume (because this is like a scripted call)','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Note: see also BaselineFrame::HAS_OVERRIDE_PC.','line_number':102,'multiline':False]['text':' Offset from the start of the JIT code where call instruction is.','line_number':104,'multiline':False]['text':' The offset of this bytecode op within the JSScript.','line_number':107,'multiline':False]['text':' An IC for a JOF_IC op.','line_number':112,'multiline':False]['text':' A callVM for an op.','line_number':115,'multiline':False]['text':' A callVM not for an op (e.g., in the prologue) that can't','line_number':118,'multiline':False]['text':' trigger debug mode.','line_number':119,'multiline':False]['text':' A callVM for the over-recursion check on function entry.','line_number':122,'multiline':False]['text':' A callVM for an interrupt check.','line_number':125,'multiline':False]['text':' DebugTrapHandler (for debugger breakpoints/stepping).','line_number':128,'multiline':False]['text':' A callVM for Debug{Prologue,AfterYield,Epilogue}.','line_number':131,'multiline':False]['text':' What this entry is for.','line_number':140,'multiline':False]['text':' The pc offset must fit in at least 28 bits, since we shave off 4 for','line_number':151,'multiline':False]['text':' the Kind enum.','line_number':152,'multiline':False]['text':' [SMDOC] BaselineScript','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' This holds the metadata generated by the BaselineCompiler. The machine code','line_number':177,'multiline':False]['text':' associated with this is owned by a JitCode instance. This class instance is','line_number':178,'multiline':False]['text':' followed by several arrays:','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':'    <BaselineScript itself>','line_number':181,'multiline':False]['text':'    --','line_number':182,'multiline':False]['text':'    uint8_t*[]              resumeEntryList()','line_number':183,'multiline':False]['text':'    RetAddrEntry[]          retAddrEntries()','line_number':184,'multiline':False]['text':'    OSREntry[]              osrEntries()','line_number':185,'multiline':False]['text':'    DebugTrapEntry[]        debugTrapEntries()','line_number':186,'multiline':False]['text':'    uint32_t[]              traceLoggerToggleOffsets()','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' Note: The arrays are arranged in order of descending alignment requires so','line_number':189,'multiline':False]['text':' that padding is not required.','line_number':190,'multiline':False]['text':' Code pointer containing the actual method.','line_number':193,'multiline':False]['text':' An ion compilation that is ready, but isn't linked yet.','line_number':196,'multiline':False]['text':' Baseline Interpreter can enter Baseline Compiler code at this address. This','line_number':199,'multiline':False]['text':' is right after the warm-up counter check in the prologue.','line_number':200,'multiline':False]['text':' The offsets for the toggledJump instructions for profiler instrumentation.','line_number':203,'multiline':False]['text':' The offsets and event used for Tracelogger toggling.','line_number':207,'multiline':False]['text':' Offset (in bytes) from `this` to the start of each trailing array. Each','line_number':217,'multiline':False]['text':' array ends where following one begins. There is no implicit padding (except','line_number':218,'multiline':False]['text':' possible at very end).','line_number':219,'multiline':False]['text':' See `Flag` type below.','line_number':227,'multiline':False]['text':' End of fields.','line_number':230,'multiline':False]['text':' Flag set when compiled for use with Debugger. Handles various','line_number':234,'multiline':False]['text':' Debugger hooks and compiles toggled calls for traps.','line_number':235,'multiline':False]['text':' Flag is set if this script has profiling instrumentation turned on.','line_number':238,'multiline':False]['text':' Native code offset for OSR from Baseline Interpreter into Baseline JIT at','line_number':242,'multiline':False]['text':' JSOp::LoopHead ops.','line_number':243,'multiline':False]['text':' Native code offset for a debug trap when the script is compiled with debug','line_number':249,'multiline':False]['text':' instrumentation.','line_number':250,'multiline':False]['text':' Layout helpers','line_number':257,'multiline':False]['text':' Use BaselineScript::New to create new instances. It will properly','line_number':267,'multiline':False]['text':' allocate trailing objects.','line_number':268,'multiline':False]['text':' We store the native code address corresponding to each bytecode offset in','line_number':281,'multiline':False]['text':' the script's resumeOffsets list.','line_number':282,'multiline':False]['text':' See each type for documentation of these arrays.','line_number':287,'multiline':False]['text':' By default tracelogger is disabled. Therefore we disable the logging code','line_number':300,'multiline':False]['text':' by default. We store the offsets we must patch to enable the logging.','line_number':301,'multiline':False]['text':' Copy resumeOffsets list from |script| and convert the pcOffsets','line_number':362,'multiline':False]['text':' to native addresses in the Baseline code based on |entries|.','line_number':363,'multiline':False]['text':' Return the bytecode offset for a given native code address. Be careful','line_number':367,'multiline':False]['text':' when using this method: it's an approximation and not guaranteed to be the','line_number':368,'multiline':False]['text':' correct pc.','line_number':369,'multiline':False]['text':' Toggle debug traps (used for breakpoints and step mode) in the script.','line_number':373,'multiline':False]['text':' If |pc| is nullptr, toggle traps for all ops in the script. Else, only','line_number':374,'multiline':False]['text':' toggle traps at |pc|.','line_number':375,'multiline':False]['text':' Called by the Baseline Interpreter to compile a script for the Baseline JIT.','line_number':431,'multiline':False]['text':' |res| is set to the native code address in the BaselineScript to jump to, or','line_number':432,'multiline':False]['text':' nullptr if we were unable to compile this script.','line_number':433,'multiline':False]['text':' Pointer into the current C stack, where overwriting will start.','line_number':448,'multiline':False]['text':' The top and bottom heapspace addresses of the reconstructed stack','line_number':451,'multiline':False]['text':' which will be copied to the bottom.','line_number':452,'multiline':False]['text':' The value of the frame pointer register on resume.','line_number':456,'multiline':False]['text':' The native code address to resume into.','line_number':459,'multiline':False]['text':' The bytecode pc of try block and fault block.','line_number':462,'multiline':False]['text':' Number of baseline frames to push on the stack.','line_number':466,'multiline':False]['text':' Size of the innermost BaselineFrame. This is equivalent to','line_number':469,'multiline':False]['text':' BaselineFrame::debugFrameSize_ in debug builds.','line_number':470,'multiline':False]['text':' The bailout kind.','line_number':473,'multiline':False]['text':' Class storing the generated Baseline Interpreter code for the runtime.','line_number':492,'multiline':False]['text':' The interpreter code.','line_number':508,'multiline':False]['text':' Offset of the code to start interpreting a bytecode op.','line_number':511,'multiline':False]['text':' Like interpretOpOffset_ but skips the debug trap for the current op.','line_number':514,'multiline':False]['text':' Early Ion bailouts will enter at this address. This is after frame','line_number':517,'multiline':False]['text':' construction and environment initialization.','line_number':518,'multiline':False]['text':' The offsets for the toggledJump instructions for profiler instrumentation.','line_number':521,'multiline':False]['text':' Offset of the jump (tail call) to the debug trap handler trampoline code.','line_number':525,'multiline':False]['text':' When the debugger is enabled, NOPs are patched to calls to this location.','line_number':526,'multiline':False]['text':' The offsets of toggled jumps for debugger instrumentation.','line_number':529,'multiline':False]['text':' Offsets of toggled calls to the DebugTrapHandler trampoline (for','line_number':533,'multiline':False]['text':' breakpoints and stepping).','line_number':534,'multiline':False]['text':' Offsets of toggled jumps for code coverage.','line_number':537,'multiline':False]['text':' Offsets of IC calls for IsIonInlinableOp ops, for Ion bailouts.','line_number':540,'multiline':False]['text':' Offsets of some callVMs for BaselineDebugModeOSR.','line_number':543,'multiline':False]['text':' namespace jit','line_number':617,'multiline':False]['text':' namespace js','line_number':618,'multiline':False]['text':' namespace JS','line_number':631,'multiline':False]['text':' jit_BaselineJIT_h ','line_number':633,'multiline':True]