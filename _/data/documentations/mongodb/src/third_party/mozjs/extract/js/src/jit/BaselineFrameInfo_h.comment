['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] Baseline FrameInfo overview.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' FrameInfo is used by BaselineCodeGen to track values stored in the frame.','line_number':29,'multiline':False]['text':' There are two implementations:','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' InterpreterFrameInfo','line_number':32,'multiline':False]['text':' --------------------','line_number':33,'multiline':False]['text':' The InterpreterFrameInfo class is used by the interpreter generator and is','line_number':34,'multiline':False]['text':' a very simple interface on top of the MacroAssembler, because the stack is','line_number':35,'multiline':False]['text':' always synced.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' CompilerFrameInfo','line_number':38,'multiline':False]['text':' -----------------','line_number':39,'multiline':False]['text':' The CompilerFrameInfo class is more complicated because it maintains a','line_number':40,'multiline':False]['text':' virtual stack to optimize some common stack operations. Locals and arguments','line_number':41,'multiline':False]['text':' are always fully synced. Stack values can either be synced, stored as','line_number':42,'multiline':False]['text':' constant, stored in a Value register or refer to a local slot. Syncing a','line_number':43,'multiline':False]['text':' StackValue ensures it's stored on the stack, e.g. kind == Stack.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' To see how this works, consider the following statement:','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'    var y = x + 9;','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' Here two values are pushed: StackValue(LocalSlot(0)) and','line_number':50,'multiline':False]['text':' StackValue(Int32Value(9)). Only when we reach the ADD op, code is generated','line_number':51,'multiline':False]['text':' to load the operands directly into the right operand registers and sync all','line_number':52,'multiline':False]['text':' other stack values.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' For stack values, the following invariants hold (and are checked between','line_number':55,'multiline':False]['text':' ops):','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' (1) If a value is synced (kind == Stack), all values below it must also be','line_number':58,'multiline':False]['text':'     synced. In other words, values with kind other than Stack can only appear','line_number':59,'multiline':False]['text':'     on top of the abstract stack.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' (2) When we call a stub or IC, all values still on the stack must be synced.','line_number':62,'multiline':False]['text':' Represents a value pushed on the stack. Note that StackValue is not used for','line_number':64,'multiline':False]['text':' locals or arguments since these are always fully synced.','line_number':65,'multiline':False]['text':' In debug builds, assert Kind is initialized.','line_number':77,'multiline':False]['text':' |constant| has a non-trivial constructor and therefore MUST be','line_number':92,'multiline':False]['text':' placement-new'd into existence.','line_number':93,'multiline':False]['text':' Assert the state is valid before excuting "pc".','line_number':364,'multiline':False]['text':' These methods are no-ops in the interpreter, because we don't have a','line_number':375,'multiline':False]['text':' virtual stack there.','line_number':376,'multiline':False]['text':' sp := sp + reg * sizeof(Value)','line_number':409,'multiline':False]['text':' On arm64, SP may be < PSP now (that's OK).','line_number':412,'multiline':False]['text':' eg testcase: tests/arguments/strict-args-generator-flushstack.js','line_number':413,'multiline':False]['text':' namespace jit','line_number':450,'multiline':False]['text':' namespace js','line_number':451,'multiline':False]['text':' jit_BaselineFrameInfo_h ','line_number':453,'multiline':True]