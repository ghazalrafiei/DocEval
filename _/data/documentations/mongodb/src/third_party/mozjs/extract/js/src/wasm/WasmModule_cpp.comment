['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' JS::BuildIdCharVector','line_number':24,'multiline':False]['text':' JS_NewUint8Array','line_number':25,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':26,'multiline':False]['text':' Tier2GeneratorTask','line_number':28,'multiline':False]['text':' js::PlainObject','line_number':29,'multiline':False]['text':' During shutdown the main thread will wait for any ongoing (cancelled)','line_number':73,'multiline':False]['text':' tier-2 generation to shut down normally.  To do so, it waits on the','line_number':74,'multiline':False]['text':' HelperThreadState's condition variable for the count of finished','line_number':75,'multiline':False]['text':' generators to rise.','line_number':76,'multiline':False]['text':' The task is finished, release it.','line_number':79,'multiline':False]['text':' Note: Modules can be destroyed on any thread.','line_number':89,'multiline':False]['text':' These will be cleared asynchronously by ~Tier2GeneratorTaskImpl() if not','line_number':103,'multiline':False]['text':' sooner by finishTier2().','line_number':104,'multiline':False]['text':' Install the data in the data structures. They will not be visible','line_number':116,'multiline':False]['text':' until commitTier2().','line_number':117,'multiline':False]['text':' Before we can make tier-2 live, we need to compile tier2 versions of any','line_number':123,'multiline':False]['text':' extant tier1 lazy stubs (otherwise, tiering would break the assumption','line_number':124,'multiline':False]['text':' that any extant exported wasm function has had a lazy entry stub already','line_number':125,'multiline':False]['text':' compiled for it).','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':' Also see doc block for stubs in WasmJS.cpp.','line_number':128,'multiline':False]['text':' We need to prevent new tier1 stubs generation until we've committed','line_number':130,'multiline':False]['text':' the newer tier2 stubs, otherwise we might not generate one tier2','line_number':131,'multiline':False]['text':' stub that has been generated for tier1 before we committed.','line_number':132,'multiline':False]['text':' Now that we can't fail or otherwise abort tier2, make it live.','line_number':162,'multiline':False]['text':' And we update the jump vectors with pointers to tier-2 functions and eager','line_number':170,'multiline':False]['text':' stubs.  Callers will continue to invoke tier-1 code until, suddenly, they','line_number':171,'multiline':False]['text':' will invoke tier-2 code.  This is benign.','line_number':172,'multiline':False]['text':' These are racy writes that we just want to be visible, atomically,','line_number':176,'multiline':False]['text':' eventually.  All hardware we care about will do this right.  But','line_number':177,'multiline':False]['text':' we depend on the compiler not splitting the stores hidden inside the','line_number':178,'multiline':False]['text':' set*Entry functions.','line_number':179,'multiline':False]['text':' Tier-2 is done; let everyone know. Mark tier-2 active for testing','line_number':187,'multiline':False]['text':' purposes so that wasmHasTier2CompilationCompleted() only returns true','line_number':188,'multiline':False]['text':' after tier-2 has been fully cached.','line_number':189,'multiline':False]['text':' virtual ','line_number':206,'multiline':True]['text':' virtual ','line_number':223,'multiline':True]['text':' static ','line_number':249,'multiline':True]['text':' loggingDeserialized = ','line_number':331,'multiline':True]['text':' virtual ','line_number':346,'multiline':True]['text':' virtual ','line_number':357,'multiline':True]['text':' Use nullptr to get the default object prototype. These objects are never','line_number':359,'multiline':False]['text':' exposed to script for asm.js.','line_number':360,'multiline':False]['text':' From a JS API perspective, the "build id" covers everything that can','line_number':365,'multiline':False]['text':' cause machine code to become invalid, so include both the actual build-id','line_number':366,'multiline':False]['text':' and cpu-id.','line_number':367,'multiline':False]['text':' "()" + 8 nibbles + "m[+-]" ','line_number':376,'multiline':True]['text':' virtual ','line_number':393,'multiline':True]['text':' The size doesn't have to be exact so use the serialization framework to','line_number':413,'multiline':False]['text':' calculate a value.','line_number':414,'multiline':False]['text':' Extracting machine code as JS object. The result has the "code" property, as','line_number':422,'multiline':False]['text':' a Uint8Array, and the "segments" property as array objects. The objects','line_number':423,'multiline':False]['text':' contain offsets in the "code" array and basic information about a code','line_number':424,'multiline':False]['text':' segment/function body.','line_number':425,'multiline':False]['text':' This function is only used for testing purposes so we can simply','line_number':433,'multiline':False]['text':' block on tiered compilation to complete.','line_number':434,'multiline':False]['text':' Write data/elem segments into memories/tables.','line_number':535,'multiline':False]['text':' OOM','line_number':542,'multiline':False]['text':' OOM','line_number':555,'multiline':False]['text':' memcpy ','line_number':563,'multiline':True]['text':' OOM','line_number':573,'multiline':False]['text':' asm.js module instantiation supplies its own buffer, but for wasm, create and','line_number':695,'multiline':False]['text':' initialize the buffer if one is requested. Either way, the buffer is wrapped','line_number':696,'multiline':False]['text':' in a WebAssembly.Memory object which is what the Instance stores.','line_number':697,'multiline':False]['text':' defaultMax ','line_number':714,'multiline':True]['text':' actualLength ','line_number':715,'multiline':True]['text':' The check whether the EventDesc signature matches the exnObj value types','line_number':756,'multiline':False]['text':' is done by js::wasm::GetImports().','line_number':757,'multiline':False]['text':' Collects the exception tag from the imported exception.','line_number':759,'multiline':False]['text':' Extend exnObjs in anticipation of an exported exception object.','line_number':775,'multiline':False]['text':' If the exception description is exported, create an export exception','line_number':782,'multiline':False]['text':' object for it.','line_number':783,'multiline':False]['text':' Take the exception tag that was created inside the WasmExceptionObject.','line_number':791,'multiline':False]['text':' Save the new export exception object.','line_number':793,'multiline':False]['text':' Create a new tag for every non exported exception.','line_number':796,'multiline':False]['text':' The exnObj is null if the exception is neither exported nor imported.','line_number':801,'multiline':False]['text':' Collect a tag for every exception.','line_number':803,'multiline':False]['text':' declaredMin ','line_number':842,'multiline':True]['text':' actualLength ','line_number':843,'multiline':True]['text':' HandleWasmTableObject = ','line_number':882,'multiline':True]['text':' Note, appending a null pointer for non-exported local tables.','line_number':889,'multiline':False]['text':' If this is an import, then this must be a constant global that was','line_number':936,'multiline':False]['text':' provided without a global object. We must initialize it with the','line_number':937,'multiline':False]['text':' provided value while we still can differentiate this case.','line_number':938,'multiline':False]['text':' If this is not an import, then the initial value will be set by','line_number':942,'multiline':False]['text':' Instance::init() for indirect globals or else by CreateExportObject().','line_number':943,'multiline':False]['text':' In either case, we initialize with a default value here.','line_number':944,'multiline':False]['text':' If there are exported globals that aren't in globalObjs because they','line_number':969,'multiline':False]['text':' originate in this module or because they were immutable imports that came','line_number':970,'multiline':False]['text':' in as primitive values then we must create cells in the globalObjs for','line_number':971,'multiline':False]['text':' them here, as WasmInstanceObject::create() and CreateExportObject() will','line_number':972,'multiline':False]['text':' need the cells to exist.','line_number':973,'multiline':False]['text':' Imported globals that are not re-exported may also have received only a','line_number':989,'multiline':False]['text':' primitive value; these globals are always immutable.  Assert that we do','line_number':990,'multiline':False]['text':' not need to create any additional Global objects for such imports.','line_number':991,'multiline':False]['text':' The first time through, use the pre-linked code in the module but','line_number':1017,'multiline':False]['text':' mark it as having been claimed. Subsequently, instantiate the copy of the','line_number':1018,'multiline':False]['text':' code bytes that we keep around for debugging instead, because the','line_number':1019,'multiline':False]['text':' debugger may patch the pre-linked code at any time.','line_number':1020,'multiline':False]['text':' A global object for this index is guaranteed to exist by','line_number':1077,'multiline':False]['text':' instantiateGlobals.','line_number':1078,'multiline':False]['text':' We are responsible to set the initial value of the global object here if','line_number':1082,'multiline':False]['text':' it's not imported or indirect. Imported global objects have their initial','line_number':1083,'multiline':False]['text':' value set by their defining module, or are set by','line_number':1084,'multiline':False]['text':' EnsureExportedGlobalObject when a constant value is provided as an import.','line_number':1085,'multiline':False]['text':' Indirect exported globals that are not imported, are initialized in','line_number':1086,'multiline':False]['text':' Instance::init.','line_number':1087,'multiline':False]['text':' This must be an exported immutable global defined in this module. The','line_number':1092,'multiline':False]['text':' instance either has compiled the value into the code or has its own copy','line_number':1093,'multiline':False]['text':' in its global data area. Either way, we must initialize the global object','line_number':1094,'multiline':False]['text':' with the same initial value.','line_number':1095,'multiline':False]['text':' Note that the following will extend imports.exceptionObjs with wrappers for','line_number':1218,'multiline':False]['text':' the local (non-imported) exceptions of the module.','line_number':1219,'multiline':False]['text':' The resulting vector is sparse, i.e., it will be null in slots that contain','line_number':1220,'multiline':False]['text':' exceptions that are neither exported or imported.','line_number':1221,'multiline':False]['text':' On the contrary, all the slots of exceptionTags will be filled with','line_number':1222,'multiline':False]['text':' unique tags.','line_number':1223,'multiline':False]['text':' Note that tableObjs is sparse: it will be null in slots that contain','line_number':1232,'multiline':False]['text':' tables that are neither exported nor imported.','line_number':1233,'multiline':False]['text':' Register the instance with the Realm so that it can find out about global','line_number':1283,'multiline':False]['text':' events like profiling being enabled in the realm. Registration does not','line_number':1284,'multiline':False]['text':' require a fully-initialized instance and must precede initSegments as the','line_number':1285,'multiline':False]['text':' final pre-requisite for a live instance.','line_number':1286,'multiline':False]['text':' Perform initialization as the final step after the instance is fully','line_number':1292,'multiline':False]['text':' constructed since this can make the instance live to content (even if the','line_number':1293,'multiline':False]['text':' start function fails).','line_number':1294,'multiline':False]['text':' Now that the instance is fully live and initialized, the start function.','line_number':1300,'multiline':False]['text':' Note that failure may cause instantiation to throw, but the instance may','line_number':1301,'multiline':False]['text':' still be live via edges created by initSegments or the start function.','line_number':1302,'multiline':False]