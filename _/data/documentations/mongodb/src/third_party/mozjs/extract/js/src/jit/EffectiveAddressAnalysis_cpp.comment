['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Transform:','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':'   [AddI]','line_number':127,'multiline':False]['text':'   addl       $9, %esi','line_number':128,'multiline':False]['text':'   [LoadUnboxedScalar]','line_number':129,'multiline':False]['text':'   movsd      0x0(%rbx,%rsi,8), %xmm4','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' into:','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':'   [LoadUnboxedScalar]','line_number':134,'multiline':False]['text':'   movsd      0x48(%rbx,%rsi,8), %xmm4','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':' This is possible when the AddI is only used by the LoadUnboxedScalar opcode.','line_number':137,'multiline':False]['text':' If the index is within the minimum heap length, we can optimize','line_number':202,'multiline':False]['text':' away the bounds check.','line_number':203,'multiline':False]['text':' This analysis converts patterns of the form:','line_number':214,'multiline':False]['text':'   truncate(x + (y << {0,1,2,3}))','line_number':215,'multiline':False]['text':'   truncate(x + (y << {0,1,2,3}) + imm32)','line_number':216,'multiline':False]['text':' into a single lea instruction, and patterns of the form:','line_number':217,'multiline':False]['text':'   asmload(x + imm32)','line_number':218,'multiline':False]['text':'   asmload(x << {0,1,2,3})','line_number':219,'multiline':False]['text':'   asmload((x << {0,1,2,3}) + imm32)','line_number':220,'multiline':False]['text':'   asmload((x << {0,1,2,3}) & mask)            (where mask is redundant','line_number':221,'multiline':False]['text':'                                                with shift)','line_number':222,'multiline':False]['text':'   asmload(((x << {0,1,2,3}) + imm32) & mask)  (where mask is redundant','line_number':223,'multiline':False]['text':'                                                with shift + imm32)','line_number':224,'multiline':False]['text':' into a single asmload instruction (and for asmstore too).','line_number':225,'multiline':False]['text':'','line_number':226,'multiline':False]['text':' Additionally, we should consider the general forms:','line_number':227,'multiline':False]['text':'   truncate(x + y + imm32)','line_number':228,'multiline':False]['text':'   truncate((y << {0,1,2,3}) + imm32)','line_number':229,'multiline':False]['text':' Note that we don't check for MWasmCompareExchangeHeap','line_number':239,'multiline':False]['text':' or MWasmAtomicBinopHeap, because the backend and the OOB','line_number':240,'multiline':False]['text':' mechanism don't support non-zero offsets for them yet','line_number':241,'multiline':False]['text':' (TODO bug 1254935).','line_number':242,'multiline':False]