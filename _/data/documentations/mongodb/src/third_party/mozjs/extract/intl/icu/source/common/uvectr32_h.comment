['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
**********************************************************************
*   Copyright (C) 1999-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':3,'multiline':True]['text':'','line_number':10,'multiline':False]['text':'  UVector32 is a class implementing a vector of 32 bit integers.','line_number':11,'multiline':False]['text':'            It is similar to UVector, but holds int32_t values rather than pointers.','line_number':12,'multiline':False]['text':'            Most of the code is unchanged from UVector.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':'*
 * <p>Ultralightweight C++ implementation of a <tt>void*</tt> vector
 * that is (mostly) compatible with java.util.Vector.
 *
 * <p>This is a very simple implementation, written to satisfy an
 * immediate porting need.  As such, it is not completely fleshed out,
 * and it aims for simplicity and conformity.  Nonetheless, it serves
 * its purpose (porting code from java that uses java.util.Vector)
 * well, and it could be easily made into a more robust vector class.
 *
 * <p><b>Design notes</b>
 *
 * <p>There is index bounds checking, but little is done about it.  If
 * indices are out of bounds, either nothing happens, or zero is
 * returned.  We <em>do</em> avoid indexing off into the weeds.
 *
 * <p>There is detection of out of memory, but the handling is very
 * coarse-grained -- similar to UnicodeString's protocol, but even
 * coarser.  The class contains <em>one static flag</em> that is set
 * when any call to <tt>new</tt> returns zero.  This allows the caller
 * to use several vectors and make just one check at the end to see if
 * a memory failure occurred.  This is more efficient than making a
 * check after each call on each vector when doing many operations on
 * multiple vectors.  The single static flag works best when memory
 * failures are infrequent, and when recovery options are limited or
 * nonexistent.
 *
 * <p><b>To do</b>
 *
 * <p>Improve the handling of index out of bounds errors.
 *
 * @author Alan Liu
 ','line_number':28,'multiline':True]['text':' Limit beyond which capacity is not permitted to grow.','line_number':67,'multiline':False]['text':'*
     * Assign this object to another (make this a copy of 'other').
     * Use the 'assign' function to assign each element.
     ','line_number':78,'multiline':True]['text':'*
     * Compare this vector with another.  They will be considered
     * equal if they are of the same size and all elements are equal,
     * as compared using this object's comparer.
     ','line_number':84,'multiline':True]['text':'*
     * Equivalent to !operator==()
     ','line_number':91,'multiline':True]['text':'------------------------------------------------------------','line_number':96,'multiline':False]['text':' java.util.Vector API','line_number':97,'multiline':False]['text':'------------------------------------------------------------','line_number':98,'multiline':False]['text':' Inline.  Use this one for speedy size check.','line_number':130,'multiline':False]['text':' Out-of-line, handles actual growth.  Called by ensureCapacity() when necessary.','line_number':133,'multiline':False]['text':'*
     * Change the size of this vector as follows: If newSize is
     * smaller, then truncate the array, possibly deleting held
     * elements for i >= newSize.  If newSize is larger, grow the
     * array, filling in new slows with zero.
     ','line_number':136,'multiline':True]['text':'------------------------------------------------------------','line_number':144,'multiline':False]['text':' New API','line_number':145,'multiline':False]['text':'------------------------------------------------------------','line_number':146,'multiline':False]['text':'*
     * Returns true if this vector contains none of the elements
     * of the given vector.
     * @param other vector to be checked for containment
     * @return true if the test condition is met
     ','line_number':148,'multiline':True]['text':'*
     * Insert the given integer into this vector at its sorted position.
     * The current elements are assumed to be sorted already.
     ','line_number':157,'multiline':True]['text':'*
     * Returns a pointer to the internal array holding the vector.
     ','line_number':163,'multiline':True]['text':'*
     * Set the maximum allowed buffer capacity for this vector/stack.
     * Default with no limit set is unlimited, go until malloc() fails.
     * A Limit of zero means unlimited capacity.
     * Units are vector elements (32 bits each), not bytes.
     ','line_number':168,'multiline':True]['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     ','line_number':176,'multiline':True]['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     ','line_number':181,'multiline':True]['text':' Disallow','line_number':189,'multiline':False]['text':' Disallow','line_number':192,'multiline':False]['text':'  API Functions for Stack operations.','line_number':196,'multiline':False]['text':'  In the original UVector, these were in a separate derived class, UStack.','line_number':197,'multiline':False]['text':'  Here in UVector32, they are all together.','line_number':198,'multiline':False]['text':' TODO:  redundant, same as empty().  Remove it?','line_number':200,'multiline':False]['text':' UVector32 inlines','line_number':213,'multiline':False]['text':' UStack inlines','line_number':280,'multiline':False]