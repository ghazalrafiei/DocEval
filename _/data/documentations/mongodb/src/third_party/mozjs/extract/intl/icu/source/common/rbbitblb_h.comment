['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  rbbitblb.h','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'
**********************************************************************
*   Copyright (c) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':7,'multiline':True]['text':'','line_number':34,'multiline':False]['text':'  class RBBITableBuilder is part of the RBBI rule compiler.','line_number':35,'multiline':False]['text':'                         It builds the state transition table used by the RBBI runtime','line_number':36,'multiline':False]['text':'                         from the expression syntax tree generated by the rule scanner.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'                         This class is part of the RBBI implementation only.','line_number':39,'multiline':False]['text':'                         There is no user-visible public API here.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'* Return the runtime size in bytes of the built state table.  ','line_number':50,'multiline':True]['text':'* Fill in the runtime state table. Sufficient memory must exist at the specified location.
     ','line_number':53,'multiline':True]['text':'* Use 8 bits to encode the forward table ','line_number':57,'multiline':True]['text':'*
     *  Find duplicate (redundant) character classes. Begin looking with categories.first.
     *  Duplicate, if found are returned in the categories parameter.
     *  This is an iterator-like function, used to identify character classes
     *  (state table columns) that can be eliminated.
     *  @param categories in/out parameter, specifies where to start looking for duplicates,
     *                and returns the first pair of duplicates found, if any.
     *  @return true if duplicate char classes were found, false otherwise.
     ','line_number':60,'multiline':True]['text':'* Remove a column from the state table. Used when two character categories
     *  have been found equivalent, and merged together, to eliminate the uneeded table column.
     ','line_number':71,'multiline':True]['text':'*
     * Check for, and remove dupicate states (table rows).
     * @return the number of states removed.
     ','line_number':76,'multiline':True]['text':'* Build the safe reverse table from the already-constructed forward table. ','line_number':82,'multiline':True]['text':'* Return the runtime size in bytes of the built safe reverse state table. ','line_number':85,'multiline':True]['text':'* Fill in the runtime safe state table. Sufficient memory must exist at the specified location.
     ','line_number':88,'multiline':True]['text':'* Use 8 bits to encode the safe reverse table ','line_number':92,'multiline':True]['text':'*
     * Merge redundant state table columns, eliminating character classes with identical behavior.
     * Done after the state tables are generated, just before converting to their run-time format.
     ','line_number':109,'multiline':True]['text':'*
     *  Find duplicate (redundant) states, beginning at the specified pair,
     *  within this state table. This is an iterator-like function, used to
     *  identify states (state table rows) that can be eliminated.
     *  @param states in/out parameter, specifies where to start looking for duplicates,
     *                and returns the first pair of duplicates found, if any.
     *  @return true if duplicate states were found, false otherwise.
     ','line_number':117,'multiline':True]['text':'* Remove a duplicate state.
     * @param duplStates The duplicate states. The first is kept, the second is removed.
     *                   All references to the second in the state table are retargeted
     *                   to the first.
     ','line_number':127,'multiline':True]['text':'* Find the next duplicate state in the safe reverse table. An iterator function.
     *  @param states in/out parameter, specifies where to start looking for duplicates,
     *                and returns the first pair of duplicates found, if any.
     *  @return true if a duplicate pair of states was found.
     ','line_number':134,'multiline':True]['text':'* Remove a duplicate state from the safe table.
     * @param duplStates The duplicate states. The first is kept, the second is removed.
     *                   All references to the second in the state table are retargeted
     *                   to the first.
     ','line_number':141,'multiline':True]['text':' Set functions for UVector.','line_number':148,'multiline':False]['text':'   TODO:  make a USet subclass of UVector','line_number':149,'multiline':False]['text':' = NULL','line_number':159,'multiline':True]['text':' The root node of the parse tree to build a','line_number':173,'multiline':False]['text':'   table for.','line_number':174,'multiline':False]['text':'* State Descriptors, UVector<RBBIStateDescriptor> ','line_number':177,'multiline':True]['text':'  D states (Aho's terminology)','line_number':178,'multiline':False]['text':'  Index is state number','line_number':179,'multiline':False]['text':'  Contents are RBBIStateDescriptor pointers.','line_number':180,'multiline':False]['text':'* Synthesized safe table, UVector of UnicodeString, one string per table row.   ','line_number':182,'multiline':True]['text':'* Map from rule number (fVal in look ahead nodes) to sequential lookahead index. ','line_number':185,'multiline':True]['text':' Counter used when assigning lookahead rule numbers.
     * Contains the last look-ahead number already in use.
     * The first look-ahead number is 2; Number 1 (ACCEPTING_UNCONDITIONAL) is reserved
     * for non-lookahead accepting states. See the declarations of RBBIStateTableRowT.   ','line_number':188,'multiline':True]['text':' forbid copying of this class','line_number':195,'multiline':False]['text':' forbid copying of this class','line_number':196,'multiline':False]['text':'','line_number':199,'multiline':False]['text':'  RBBIStateDescriptor - The DFA is constructed as a set of these descriptors,','line_number':200,'multiline':False]['text':'                        one for each state.','line_number':201,'multiline':False]['text':' Set of parse tree positions associated','line_number':209,'multiline':False]['text':'   with this state.  Unordered (it's a set).','line_number':210,'multiline':False]['text':'   UVector contents are RBBINode *','line_number':211,'multiline':False]['text':' Transitions out of this state.','line_number':213,'multiline':False]['text':'   indexed by input character','line_number':214,'multiline':False]['text':'   contents is int index of dest state','line_number':215,'multiline':False]['text':'   in RBBITableBuilder.fDStates','line_number':216,'multiline':False]['text':' forbid copying of this class','line_number':222,'multiline':False]['text':' forbid copying of this class','line_number':223,'multiline':False]['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':230,'multiline':True]