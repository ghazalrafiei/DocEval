['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':'','line_number':7,'multiline':False]['text':' Implement TimeStamp::Now() with mach_absolute_time','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' The "tick" unit for mach_absolute_time is defined using mach_timebase_info()','line_number':10,'multiline':False]['text':' which gives a conversion ratio to nanoseconds. For more information see','line_number':11,'multiline':False]['text':' Apple's QA1398.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' This code is inspired by Chromium's time_mac.cc. The biggest','line_number':14,'multiline':False]['text':' differences are that we explicitly initialize using','line_number':15,'multiline':False]['text':' TimeStamp::Initialize() instead of lazily in Now() and that','line_number':16,'multiline':False]['text':' we store the time value in ticks and convert when needed instead','line_number':17,'multiline':False]['text':' of storing the time value in nanoseconds.','line_number':18,'multiline':False]['text':' Estimate of the smallest duration of time we can measure.','line_number':29,'multiline':False]['text':' mach_absolute_time is it when it comes to ticks on the Mac.  Other calls','line_number':42,'multiline':False]['text':' with less precision (such as TickCount) just call through to','line_number':43,'multiline':False]['text':' mach_absolute_time.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' At the time of writing mach_absolute_time returns the number of nanoseconds','line_number':46,'multiline':False]['text':' since boot. This won't overflow 64bits for 500+ years so we aren't going','line_number':47,'multiline':False]['text':' to worry about that possiblity','line_number':48,'multiline':False]['text':' 10 total trials is arbitrary: what we're trying to avoid by','line_number':57,'multiline':False]['text':' looping is getting unlucky and being interrupted by a context','line_number':58,'multiline':False]['text':' switch or signal, or being bitten by paging/cache effects','line_number':59,'multiline':False]['text':' measurable resolution is either incredibly low, ~1ns, or very','line_number':71,'multiline':False]['text':' high.  fall back on NSPR's resolution assumption','line_number':72,'multiline':False]['text':' don't report a value < mResolution ...','line_number':88,'multiline':False]['text':' and chop off insignificant digits','line_number':90,'multiline':False]['text':' Apple's QA1398 suggests that the output from mach_timebase_info','line_number':119,'multiline':False]['text':' will not change while a program is running, so it should be safe','line_number':120,'multiline':False]['text':' to cache the result.','line_number':121,'multiline':False]['text':' find the number of significant digits in sResolution, for the','line_number':131,'multiline':False]['text':' sake of ToSecondsSigDigits()','line_number':132,'multiline':False]['text':' Computes and returns the process uptime in microseconds.','line_number':153,'multiline':False]['text':' Returns 0 if an error was encountered.','line_number':154,'multiline':False]['text':' namespace mozilla','line_number':191,'multiline':False]