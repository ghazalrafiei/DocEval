['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':9,'multiline':False]['text':' BytecodeEmitter','line_number':11,'multiline':False]['text':' StatementKind','line_number':12,'multiline':False]['text':' JSTRY_CATCH, JSTRY_FINALLY','line_number':13,'multiline':False]['text':' JSOp','line_number':14,'multiline':False]['text':' Since an exception can be thrown at any place inside the try block,','line_number':41,'multiline':False]['text':' we need to restore the stack and the scope chain before we transfer','line_number':42,'multiline':False]['text':' the control to the exception handler.','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' For that we store in a try note associated with the catch or','line_number':45,'multiline':False]['text':' finally block the stack depth upon the try entry. The interpreter','line_number':46,'multiline':False]['text':' uses this depth to properly unwind the stack and the scope chain.','line_number':47,'multiline':False]['text':' Gosub to finally, if present.','line_number':65,'multiline':False]['text':' Emit jump over catch and/or finally.','line_number':72,'multiline':False]['text':' Clear the frame's return value that might have been set by the','line_number':93,'multiline':False]['text':' try block:','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':'   eval("try { 1; throw 2 } catch(e) {}"); // undefined, not 1','line_number':96,'multiline':False]['text':' gosub <finally>, if required.','line_number':122,'multiline':False]['text':' Jump over the finally block.','line_number':129,'multiline':False]['text':' = Nothing() ','line_number':139,'multiline':True]['text':' If we are using controlInfo_ (i.e., emitting a syntactic try','line_number':140,'multiline':False]['text':' blocks), we must have specified up front if there will be a finally','line_number':141,'multiline':False]['text':' close. For internal non-syntactic try blocks, like those emitted for','line_number':142,'multiline':False]['text':' yield* and IteratorClose inside for-of loops, we can emitFinally even','line_number':143,'multiline':False]['text':' without specifying up front, since the internal non-syntactic try','line_number':144,'multiline':False]['text':' blocks emit no GOSUBs.','line_number':145,'multiline':False]['text':' Fix up the gosubs that might have been emitted before non-local','line_number':173,'multiline':False]['text':' jumps to the finally code.','line_number':174,'multiline':False]['text':' Indicate that we're emitting a subroutine body.','line_number':177,'multiline':False]['text':' Clear the frame's return value to make break/continue return','line_number':194,'multiline':False]['text':' correct value even if there's no other statement before them:','line_number':195,'multiline':False]['text':'','line_number':196,'multiline':False]['text':'   eval("x: try { 1 } finally { break x; }"); // undefined, not 1','line_number':197,'multiline':False]['text':' Fix up the end-of-try/catch jumps to come here.','line_number':244,'multiline':False]['text':' Add the try note last, to let post-order give us the right ordering','line_number':249,'multiline':False]['text':' (first to last for a given nesting level, inner to outer by level).','line_number':250,'multiline':False]['text':' If we've got a finally, mark try+catch region with additional','line_number':258,'multiline':False]['text':' trynote to catch exceptions (re)thrown from a catch block or','line_number':259,'multiline':False]['text':' for the try{}finally{} case.','line_number':260,'multiline':False]