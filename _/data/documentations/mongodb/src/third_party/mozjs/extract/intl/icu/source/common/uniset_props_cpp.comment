['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uniset_props.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2004aug25
*   created by: Markus W. Scherer
*
*   Character property dependent functions moved here from uniset.cpp
','line_number':3,'multiline':True]['text':' Special property set IDs','line_number':50,'multiline':False]['text':' [\u0000-\U0010FFFF]','line_number':51,'multiline':False]['text':' [\u0000-\u007F]','line_number':52,'multiline':False]['text':' [:^Cn:]','line_number':53,'multiline':False]['text':' Unicode name property alias','line_number':55,'multiline':False]['text':' Cached sets ------------------------------------------------------------- ***','line_number':59,'multiline':False]['text':'*
 * Cleanup function for UnicodeSet
 ','line_number':67,'multiline':True]['text':' Cache some sets for other services -------------------------------------- ***','line_number':83,'multiline':False]['text':' helper functions for matching of pattern syntax pieces ------------------ ***','line_number':102,'multiline':False]['text':' these functions are parallel to the PERL_OPEN etc. strings above','line_number':103,'multiline':False]['text':' using these functions is not only faster than UnicodeString::compare() and','line_number':105,'multiline':False]['text':' caseCompare(), but they also make UnicodeSet work for simple patterns when','line_number':106,'multiline':False]['text':' no Unicode properties data is available - when caseCompare() fails','line_number':107,'multiline':False]['text':'static inline UBool
isPerlClose(const UnicodeString &pattern, int32_t pos) {
    return pattern.charAt(pos)==u'}';
}','line_number':115,'multiline':True]['text':'static inline UBool
isPOSIXClose(const UnicodeString &pattern, int32_t pos) {
    return pattern.charAt(pos)==u':' && pattern.charAt(pos+1)==u']';
}','line_number':130,'multiline':True]['text':' TODO memory debugging provided inside uniset.cpp','line_number':135,'multiline':False]['text':' could be made available here but probably obsolete with use of modern','line_number':136,'multiline':False]['text':' memory leak checker tools','line_number':137,'multiline':False]['text':' namespace','line_number':140,'multiline':False]['text':'----------------------------------------------------------------','line_number':142,'multiline':False]['text':' Constructors &c','line_number':143,'multiline':False]['text':'----------------------------------------------------------------','line_number':144,'multiline':False]['text':'*
 * Constructs a set from the given pattern, optionally ignoring
 * white space.  See the class description for the syntax of the
 * pattern language.
 * @param pattern a string specifying what characters are in the set
 ','line_number':146,'multiline':True]['text':'----------------------------------------------------------------','line_number':158,'multiline':False]['text':' Public API','line_number':159,'multiline':False]['text':'----------------------------------------------------------------','line_number':160,'multiline':False]['text':' Equivalent to','line_number':164,'multiline':False]['text':'   return applyPattern(pattern, USET_IGNORE_SPACE, NULL, status);','line_number':165,'multiline':False]['text':' but without dependency on closeOver().','line_number':166,'multiline':False]['text':' Skip over trailing whitespace','line_number':172,'multiline':False]['text':' Need to build the pattern in a temporary string because','line_number':192,'multiline':False]['text':' _applyPattern calls add() etc., which set pat to empty.','line_number':193,'multiline':False]['text':' syntaxError(chars, "Extra chars in variable value");','line_number':199,'multiline':False]['text':'*
 * Return true if the given position, in the given pattern, appears
 * to be the start of a UnicodeSet pattern.
 ','line_number':206,'multiline':True]['text':'[','line_number':212,'multiline':True]['text':'----------------------------------------------------------------','line_number':216,'multiline':False]['text':' Implementation: Pattern parsing','line_number':217,'multiline':False]['text':'----------------------------------------------------------------','line_number':218,'multiline':False]['text':'*
 * A small all-inline class to manage a UnicodeSet pointer.  Add
 * operator->() etc. as needed.
 ','line_number':222,'multiline':True]['text':' namespace','line_number':242,'multiline':False]['text':'*
 * Parse the pattern from the given RuleCharacterIterator.  The
 * iterator is advanced over the parsed pattern.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be advanced to the first character after the parsed
 * pattern, or the end of the iteration if all characters are
 * parsed.
 * @param symbols symbol table to use to parse and dereference
 * variables, or null if none.
 * @param rebuiltPat the pattern that was parsed, rebuilt or
 * copied from the input pattern, as appropriate.
 * @param options a bit mask of zero or more of the following:
 * IGNORE_SPACE, CASE.
 ','line_number':244,'multiline':True]['text':' Syntax characters: [ ] ^ - & { }','line_number':271,'multiline':False]['text':' Recognized special forms for chars, sets: c-c s-s s&s','line_number':273,'multiline':False]['text':' mode: 0=before [, 1=between [...], 2=after ]','line_number':286,'multiline':False]['text':' lastItem: 0=none, 1=char, 2=set','line_number':287,'multiline':False]['text':' alias - do not delete','line_number':303,'multiline':False]['text':' -------- Check for property pattern','line_number':305,'multiline':False]['text':' setMode: 0=none, 1=unicodeset, 2=propertypat, 3=preparsed','line_number':307,'multiline':False]['text':' -------- Parse '[' of opening delimiter OR nested set.','line_number':313,'multiline':False]['text':' If there is a nested set, use `setMode' to define how','line_number':314,'multiline':False]['text':' the set should be parsed.  If the '[' is part of the','line_number':315,'multiline':False]['text':' opening delimiter for this pattern, parse special','line_number':316,'multiline':False]['text':' strings "[", "[^", "[-", and "[^-".  Check for stand-in','line_number':317,'multiline':False]['text':' characters representing a nested set in the symbol','line_number':318,'multiline':False]['text':' table.','line_number':319,'multiline':False]['text':' Prepare to backup if necessary','line_number':322,'multiline':False]['text':' backup','line_number':329,'multiline':False]['text':' Handle opening '[' delimiter','line_number':332,'multiline':False]['text':' prepare to backup','line_number':335,'multiline':False]['text':' prepare to backup','line_number':341,'multiline':False]['text':' Fall through to handle special leading '-';','line_number':345,'multiline':False]['text':' otherwise restart loop for nested [], \p{}, etc.','line_number':346,'multiline':False]['text':' Fall through to handle literal '-' below','line_number':349,'multiline':False]['text':' backup','line_number':351,'multiline':False]['text':' casting away const, but `nested' won't be modified','line_number':363,'multiline':False]['text':' (important not to modify stored set)','line_number':364,'multiline':False]['text':' -------- Handle a nested set.  This either is inline in','line_number':371,'multiline':False]['text':' the pattern or represented by a stand-in that has','line_number':372,'multiline':False]['text':' previously been parsed and was looked up in the symbol','line_number':373,'multiline':False]['text':' table.','line_number':374,'multiline':False]['text':' syntaxError(chars, "Char expected after operator");','line_number':379,'multiline':False]['text':' lazy allocation','line_number':394,'multiline':False]['text':' `nested' already parsed','line_number':410,'multiline':False]['text':' Entire pattern is a category; leave parse loop','line_number':418,'multiline':False]['text':' syntaxError(chars, "Missing '['");','line_number':443,'multiline':False]['text':' -------- Parse special (syntax) characters.  If the','line_number':448,'multiline':False]['text':' current character is not special, or if it is escaped,','line_number':449,'multiline':False]['text':' then fall through and handle it below.','line_number':450,'multiline':False]['text':' Treat final trailing '-' as a literal','line_number':459,'multiline':False]['text':' syntaxError(chars, "Trailing '&'");','line_number':464,'multiline':False]['text':' Treat final trailing '-' as a literal','line_number':477,'multiline':False]['text':' syntaxError(chars, "'-' not after char or set");','line_number':488,'multiline':False]['text':' syntaxError(chars, "'&' not after set");','line_number':496,'multiline':False]['text':' syntaxError(chars, "'^' not after '['");','line_number':500,'multiline':False]['text':' syntaxError(chars, "Missing operand after operator");','line_number':505,'multiline':False]['text':' syntaxError(chars, "Invalid multicharacter string");','line_number':527,'multiline':False]['text':' We have new string. Add it to set and continue;','line_number':532,'multiline':False]['text':' we don't need to drop through to the further','line_number':533,'multiline':False]['text':' processing','line_number':534,'multiline':False]['text':'         symbols  nosymbols','line_number':541,'multiline':False]['text':' [a-$]   error    error (ambiguous)','line_number':542,'multiline':False]['text':' [a$]    anchor   anchor','line_number':543,'multiline':False]['text':' [a-$x]  var "x"* literal '$'','line_number':544,'multiline':False]['text':' [a-$.]  error    literal '$'','line_number':545,'multiline':False]['text':' *We won't get here in the case of var "x"','line_number':546,'multiline':False]['text':' literal '$'','line_number':555,'multiline':False]['text':' syntaxError(chars, "Unquoted '$'");','line_number':569,'multiline':False]['text':' -------- Parse literal characters.  This includes both','line_number':578,'multiline':False]['text':' escaped chars ("\u4E01") and non-syntax characters','line_number':579,'multiline':False]['text':' ("a").','line_number':580,'multiline':False]['text':' Don't allow redundant (a-a) or empty (b-a) ranges;','line_number':590,'multiline':False]['text':' these are most likely typos.','line_number':591,'multiline':False]['text':' syntaxError(chars, "Invalid range");','line_number':592,'multiline':False]['text':' syntaxError(chars, "Set expected after operator");','line_number':610,'multiline':False]['text':' syntaxError(chars, "Missing ']'");','line_number':621,'multiline':False]['text':'*
     * Handle global flags (invert, case insensitivity).  If this
     * pattern should be compiled case-insensitive, then we need
     * to close over case BEFORE COMPLEMENTING.  This makes
     * patterns like /[^abc]/i work.
     ','line_number':628,'multiline':True]['text':' Use the rebuilt pattern (patLocal) only if necessary.  Prefer the','line_number':644,'multiline':False]['text':' generated pattern.','line_number':645,'multiline':False]['text':' We likely ran out of memory. AHHH!','line_number':652,'multiline':False]['text':'----------------------------------------------------------------','line_number':657,'multiline':False]['text':' Property set implementation','line_number':658,'multiline':False]['text':'----------------------------------------------------------------','line_number':659,'multiline':False]['text':' namespace','line_number':694,'multiline':False]['text':'*
 * Generic filter-based scanning code for UCD property UnicodeSets.
 ','line_number':696,'multiline':True]['text':' Logically, walk through all Unicode characters, noting the start','line_number':705,'multiline':False]['text':' and end of each range for which filter.contain(c) is','line_number':706,'multiline':False]['text':' true.  Add each range to a set.','line_number':707,'multiline':False]['text':'','line_number':708,'multiline':False]['text':' To improve performance, use an inclusions set which','line_number':709,'multiline':False]['text':' encodes information about character ranges that are known','line_number':710,'multiline':False]['text':' to have identical properties.','line_number':711,'multiline':False]['text':' inclusions contains the first characters of','line_number':712,'multiline':False]['text':' same-value ranges for the given property.','line_number':713,'multiline':False]['text':' get current range','line_number':721,'multiline':False]['text':' for all the code points in the range, process','line_number':725,'multiline':False]['text':' only add to this UnicodeSet on inflection points --','line_number':727,'multiline':False]['text':' where the hasProperty value changes to false','line_number':728,'multiline':False]['text':' We likely ran out of memory. AHHH!','line_number':743,'multiline':False]['text':' Note: we use ' ' in compiler code page ','line_number':751,'multiline':True]['text':' make room for term. zero ','line_number':754,'multiline':True]['text':' namespace','line_number':767,'multiline':False]['text':'----------------------------------------------------------------','line_number':769,'multiline':False]['text':' Property set API','line_number':770,'multiline':False]['text':'----------------------------------------------------------------','line_number':771,'multiline':False]['text':' prop and value used to be converted to char * using the default','line_number':815,'multiline':False]['text':' converter instead of the invariant conversion.','line_number':816,'multiline':False]['text':' This should not be necessary because all Unicode property and value','line_number':817,'multiline':False]['text':' names use only invariant characters.','line_number':818,'multiline':False]['text':' If there are any variant characters, then we won't find them anyway.','line_number':819,'multiline':False]['text':' Checking first avoids assertion failures in the conversion.','line_number':820,'multiline':False]['text':' Treat gc as gcm','line_number':839,'multiline':False]['text':' Handle numeric CCC','line_number':849,'multiline':False]['text':' Anything between 0 and 255 is valid even if unused.','line_number':855,'multiline':False]['text':' Cast double->int only after range check.','line_number':856,'multiline':False]['text':' We catch NaN here because comparing it with both 0 and 255 will be false','line_number':857,'multiline':False]['text':' (as are all comparisons with NaN).','line_number':858,'multiline':False]['text':' non-integral value or outside 0..255, or trailing junk','line_number':861,'multiline':False]['text':' Must munge name, since u_charFromName() does not do','line_number':886,'multiline':False]['text':' 'loose' matching.','line_number':887,'multiline':False]['text':' it suffices that this be > uprv_getMaxCharNameLength','line_number':888,'multiline':False]['text':' ICU 49 deprecates the Unicode_1_Name property APIs.','line_number':900,'multiline':False]['text':' Must munge name, since u_versionFromString() does not do','line_number':904,'multiline':False]['text':' 'loose' matching.','line_number':905,'multiline':False]['text':' fall through to calling applyIntPropertyValue()','line_number':919,'multiline':False]['text':' p is a non-binary, non-enumerated property that we','line_number':922,'multiline':False]['text':' don't support (yet).','line_number':923,'multiline':False]['text':' value is empty.  Interpret as General Category, Script, or','line_number':930,'multiline':False]['text':' Binary property.','line_number':931,'multiline':False]['text':' [:Assigned:]=[:^Cn:]','line_number':948,'multiline':False]['text':' We likely ran out of memory. AHHH!','line_number':965,'multiline':False]['text':'----------------------------------------------------------------','line_number':971,'multiline':False]['text':' Property set patterns','line_number':972,'multiline':False]['text':'----------------------------------------------------------------','line_number':973,'multiline':False]['text':'*
 * Return true if the given position, in the given pattern, appears
 * to be the start of a property set pattern.
 ','line_number':975,'multiline':True]['text':' Patterns are at least 5 characters long','line_number':981,'multiline':False]['text':' Look for an opening [:, [:^, \p, or \P','line_number':986,'multiline':False]['text':'*
 * Return true if the given iterator appears to point at a
 * property pattern.  Regardless of the result, return with the
 * iterator unchanged.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be unchanged.
 * @param iterOpts RuleCharacterIterator options
 ','line_number':990,'multiline':True]['text':' NOTE: literal will always be FALSE, because we don't parse escapes.','line_number':1000,'multiline':False]['text':'*
 * Parse the given property pattern at the given parse position.
 ','line_number':1017,'multiline':True]['text':' true for [:pat:], false for \p{pat} \P{pat} \N{pat}','line_number':1025,'multiline':False]['text':' true for \N{pat}, o/w false','line_number':1026,'multiline':False]['text':' Minimum length is 5 characters, e.g. \p{L}','line_number':1031,'multiline':False]['text':' On entry, ppos should point to one of the following locations:','line_number':1036,'multiline':False]['text':' Look for an opening [:, [:^, \p, or \P','line_number':1037,'multiline':False]['text':' Syntax error; "\p" or "\P" not followed by "{"','line_number':1053,'multiline':False]['text':' Open delimiter not seen','line_number':1057,'multiline':False]['text':' Look for the matching close delimiter, either :] or }','line_number':1061,'multiline':False]['text':' Syntax error; close delimiter missing','line_number':1069,'multiline':False]['text':' Look for an '=' sign.  If this is present, we will parse a','line_number':1073,'multiline':False]['text':' medium \p{gc=Cf} or long \p{GeneralCategory=Format}','line_number':1074,'multiline':False]['text':' pattern.','line_number':1075,'multiline':False]['text':' Equals seen; parse medium/long pattern','line_number':1079,'multiline':False]['text':' Handle case where no '=' is seen, and \N{}','line_number':1085,'multiline':False]['text':' Handle \N{name}','line_number':1088,'multiline':False]['text':' This is a little inefficient since it means we have to','line_number':1090,'multiline':False]['text':' parse NAME_PROP back to UCHAR_NAME even though we already','line_number':1091,'multiline':False]['text':' know it's UCHAR_NAME.  If we refactor the API to','line_number':1092,'multiline':False]['text':' support args of (UProperty, char*) then we can remove','line_number':1093,'multiline':False]['text':' NAME_PROP and make this a little more efficient.','line_number':1094,'multiline':False]['text':' Move to the limit position after the close delimiter if the','line_number':1107,'multiline':False]['text':' parse succeeded.','line_number':1108,'multiline':False]['text':'*
 * Parse a property pattern.
 * @param chars iterator over the pattern characters.  Upon return
 * it will be advanced to the first character after the parsed
 * pattern, or the end of the iteration if all characters are
 * parsed.
 * @param rebuiltPat the pattern that was parsed, rebuilt or
 * copied from the input pattern, as appropriate.
 ','line_number':1115,'multiline':True]['text':' syntaxError(chars, "Invalid property pattern");','line_number':1134,'multiline':False]