['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' nothing ','line_number':25,'multiline':True]['text':'
 * System allocation functions generally require the allocation size
 * to be an integer multiple of the page size of the running process.
 ','line_number':42,'multiline':True]['text':' The OS allocation granularity may not match the page size. ','line_number':48,'multiline':True]['text':' The number of bits used by addresses on this platform. ','line_number':51,'multiline':True]['text':' An estimate of the number of bytes available for virtual memory. ','line_number':54,'multiline':True]['text':'
 * System allocation functions may hand out regions of memory in increasing or
 * decreasing order. This ordering is used as a hint during chunk alignment to
 * reduce the number of system calls. On systems with 48-bit addresses, our
 * workarounds to obtain 47-bit pointers cause addresses to be handed out in
 * increasing order.
 *
 * We do not use the growth direction on Windows, as constraints on VirtualAlloc
 * would make its application failure prone and complex. Tests indicate that
 * VirtualAlloc always hands out regions of memory in increasing order.
 ','line_number':57,'multiline':True]['text':'
 * Data from OOM crashes shows there may be up to 24 chunk-sized but unusable
 * chunks available in low memory situations. These chunks may all need to be
 * used up before we gain access to remaining *alignable* chunk-sized regions,
 * so we use a generous limit of 32 unusable chunks to ensure we reach them.
 ','line_number':74,'multiline':True]['text':'
 * On some 64-bit platforms we can use a random, scattershot allocator that
 * tries addresses from the available range at random. If the address range
 * is large enough this will have a high chance of success and additionally
 * makes the memory layout of our process less predictable.
 *
 * However, not all 64-bit platforms have a very large address range. For
 * example, AArch64 on Linux defaults to using 39-bit addresses to limit the
 * number of translation tables used. On such configurations the scattershot
 * approach to allocation creates a conflict with our desire to reserve large
 * regions of memory for applications like WebAssembly: Small allocations may
 * inadvertently block off all available 4-6GiB regions, and conversely
 * reserving such regions may lower the success rate for smaller allocations to
 * unacceptable levels.
 *
 * So we make a compromise: Instead of using the scattershot on all 64-bit
 * platforms, we only use it on platforms that meet a minimum requirement for
 * the available address range. In addition we split the address range,
 * reserving the upper half for huge allocations and the lower half for smaller
 * allocations. We use a limit of 43 bits so that at least 42 bits are available
 * for huge allocations - this matches the 8TiB per process address space limit
 * that we're already subject to on Windows.
 ','line_number':83,'multiline':True]['text':' The lower limit for huge allocations. This is fairly arbitrary. ','line_number':108,'multiline':True]['text':' The minimum and maximum valid addresses that can be allocated into. ','line_number':111,'multiline':True]['text':' The upper limit for smaller allocations and the lower limit for huge ones. ','line_number':115,'multiline':True]['text':' wasi','line_number':173,'multiline':False]['text':' Returns the offset from the nearest aligned address at or below |region|. ','line_number':186,'multiline':True]['text':'
 * Attempts to map memory at the given address, but allows the system
 * to return a different address that may still be suitable.
 ','line_number':239,'multiline':True]['text':' Note that some platforms treat the requested address as a hint, so the','line_number':248,'multiline':False]['text':' returned address might not match the requested address.','line_number':249,'multiline':False]['text':'
 * Attempts to map memory at the given address, returning nullptr if
 * the system returns any address other than the requested one.
 ','line_number':253,'multiline':True]['text':' On some platforms mmap treats the desired address as a hint, so','line_number':267,'multiline':False]['text':' check that the address we got is the address we requested.','line_number':268,'multiline':False]['text':' Returns a random number in the given range. ','line_number':278,'multiline':True]['text':'
 * The address range available to applications depends on both hardware and
 * kernel configuration. For example, AArch64 on Linux uses addresses with
 * 39 significant bits by default, but can be configured to use addresses with
 * 48 significant bits by enabling a 4th translation table. Unfortunately,
 * there appears to be no standard way to query the limit at runtime
 * (Windows exposes this via GetSystemInfo()).
 *
 * This function tries to find the address limit by performing a binary search
 * on the index of the most significant set bit in the addresses it attempts to
 * allocate. As the requested address is often treated as a hint by the
 * operating system, we use the actual returned addresses to narrow the range.
 * We return the number of bits of an address that may be set.
 ','line_number':299,'multiline':True]['text':' Use 32 bits as a lower bound in case we keep getting nullptr.','line_number':314,'multiline':False]['text':' Exclude 48-bit and 47-bit addresses first.','line_number':318,'multiline':False]['text':' If those didn't work, perform a modified binary search.','line_number':324,'multiline':False]['text':' We can be sure of the lower bound, but check the upper bound again.','line_number':333,'multiline':False]['text':' `low` is the highest set bit, so `low + 1` is the number of bits.','line_number':340,'multiline':False]['text':' Used as both length and alignment.','line_number':345,'multiline':False]['text':' !defined(XP_WIN)','line_number':368,'multiline':False]['text':' defined(JS_64BIT)','line_number':370,'multiline':False]['text':' No standard way to determine these, so fall back to FindAddressLimit().','line_number':389,'multiline':False]['text':' Sanity check the address to ensure we don't use more than 47 bits.','line_number':394,'multiline':False]['text':' !defined(JS_64BIT)','line_number':402,'multiline':False]['text':' The JS engine uses 47-bit pointers; all higher bits must be clear. ','line_number':416,'multiline':True]['text':' Smaller alignments aren't supported by the allocation functions.','line_number':430,'multiline':False]['text':' Use the scattershot allocator if the address range is large enough.','line_number':447,'multiline':False]['text':' Try to allocate the region. If the returned address is aligned,','line_number':458,'multiline':False]['text':' either we OOMed (region is nullptr) or we're done.','line_number':459,'multiline':False]['text':' Try to align the region. On success, TryToAlignChunk() returns','line_number':465,'multiline':False]['text':' true and we can return the aligned region immediately.','line_number':466,'multiline':False]['text':' On failure, the unaligned region is retained unless we OOMed. We don't','line_number':474,'multiline':False]['text':' use the retained region on this path (see the last ditch allocator).','line_number':475,'multiline':False]['text':' If it fails to align the given region, TryToAlignChunk() returns the','line_number':480,'multiline':False]['text':' next valid region that we might be able to align (unless we OOMed).','line_number':481,'multiline':False]['text':' Since we couldn't align the first region, fall back to allocating a','line_number':487,'multiline':False]['text':' region large enough that we can definitely align it.','line_number':488,'multiline':False]['text':' If there wasn't enough contiguous address space left for that,','line_number':491,'multiline':False]['text':' try to find an alignable region using the last ditch allocator.','line_number':492,'multiline':False]['text':' At this point we should either have an aligned region or nullptr.','line_number':496,'multiline':False]['text':' !__wasi__','line_number':499,'multiline':False]['text':'
 * This allocator takes advantage of the large address range on some 64-bit
 * platforms to allocate in a scattershot manner, choosing addresses at random
 * from the range. By controlling the range we can avoid returning addresses
 * that have more than 47 significant bits (as required by SpiderMonkey).
 * This approach also has some other advantages over the methods employed by
 * the other allocation functions in this file:
 * 1) Allocations are extremely likely to succeed on the first try.
 * 2) The randomness makes our memory layout becomes harder to predict.
 * 3) The low probability of reusing regions guards against use-after-free.
 *
 * The main downside is that detecting physical OOM situations becomes more
 * difficult; to guard against this, we occasionally try a regular allocation.
 * In addition, sprinkling small allocations throughout the full address range
 * might get in the way of large address space reservations such as those
 * employed by WebAssembly. To avoid this (or the opposite problem of such
 * reservations reducing the chance of success for smaller allocations) we
 * split the address range in half, with one half reserved for huge allocations
 * and the other for regular (usually chunk sized) allocations.
 ','line_number':504,'multiline':True]['text':' Use the lower half of the range.','line_number':527,'multiline':False]['text':' Use the upper half of the range.','line_number':531,'multiline':False]['text':' Try to allocate in random aligned locations.','line_number':536,'multiline':False]['text':' Check for OOM.','line_number':546,'multiline':False]['text':' Try the reliable fallback of overallocating.','line_number':570,'multiline':False]['text':' Note: This will not respect the address space split.','line_number':571,'multiline':False]['text':' defined(JS_64BIT)','line_number':584,'multiline':False]['text':' Don't commit the requested pages as we won't use the region directly.','line_number':592,'multiline':False]['text':' Windows requires that map and unmap calls be matched, so deallocate','line_number':603,'multiline':False]['text':' and immediately reallocate at the desired (aligned) address.','line_number':604,'multiline':False]['text':' munmap allows us to simply unmap the pages that don't interest us.','line_number':608,'multiline':False]['text':' On Windows we may have raced with another thread; if so, try again.','line_number':620,'multiline':False]['text':' wasi','line_number':625,'multiline':False]['text':'
 * In a low memory or high fragmentation situation, alignable chunks of the
 * desired length may still be available, even if there are no more contiguous
 * free chunks that meet the |length + alignment - pageSize| requirement of
 * MapAlignedPagesSlow. In this case, try harder to find an alignable chunk
 * by temporarily holding onto the unaligned parts of each chunk until the
 * allocator gives us a chunk that either is, or can be aligned.
 ','line_number':627,'multiline':True]['text':' Success!','line_number':646,'multiline':False]['text':' We ran out of memory, so give up.','line_number':649,'multiline':False]['text':'
 * On Windows, map and unmap calls must be matched, so we deallocate the
 * unaligned chunk, then reallocate the unaligned part to block off the
 * old address and force the allocator to give us a new one.
 ','line_number':664,'multiline':True]['text':' If the address is aligned, either we hit OOM or we're done.','line_number':680,'multiline':False]['text':' If retainedRegion is null here, we raced with another thread.','line_number':688,'multiline':False]['text':' !defined(XP_WIN)','line_number':702,'multiline':False]['text':'
 * mmap calls don't have to be matched with calls to munmap, so we can unmap
 * just the pages we don't need. However, as we don't know a priori if addresses
 * are handed out in increasing or decreasing order, we have to try both
 * directions (depending on the environment, one will always fail).
 ','line_number':704,'multiline':True]['text':' If we're confident in the growth direction, don't try the other.','line_number':747,'multiline':False]['text':' If our current chunk cannot be aligned, just get a new one.','line_number':757,'multiline':False]['text':' Our new region might happen to already be aligned.','line_number':760,'multiline':False]['text':' ASan does not automatically unpoison memory, so we have to do this here.','line_number':780,'multiline':False]['text':' pageSize == ArenaSize doesn't necessarily hold, but this function is','line_number':790,'multiline':False]['text':' used by the GC to decommit unused Arenas, so we don't want to assert','line_number':791,'multiline':False]['text':' if pageSize > ArenaSize.','line_number':792,'multiline':False]['text':' We preallocate the mapping using MapAlignedPages, which expects','line_number':909,'multiline':False]['text':' the length parameter to be an integer multiple of the page size.','line_number':910,'multiline':False]['text':' This call will fail if the file does not exist.','line_number':919,'multiline':False]['text':' The value of a pointer is technically only defined while the region','line_number':930,'multiline':False]['text':' it points to is allocated, so explicitly treat this one as a number.','line_number':931,'multiline':False]['text':' If the offset or length are out of bounds, this call will fail.','line_number':937,'multiline':False]['text':' Retry if another thread mapped the address we were trying to use.','line_number':942,'multiline':False]['text':' This just decreases the file mapping object's internal reference count;','line_number':948,'multiline':False]['text':' it won't actually be destroyed until we unmap the associated view.','line_number':949,'multiline':False]['text':' !defined(XP_WIN)','line_number':955,'multiline':False]['text':' Sanity check the offset and length, as mmap does not do this for us.','line_number':956,'multiline':False]['text':' Calling mmap with MAP_FIXED will replace the previous mapping, allowing','line_number':968,'multiline':False]['text':' us to reuse the region we obtained without racing with other threads.','line_number':969,'multiline':False]['text':' Zero out data before and after the desired mapping to catch errors early.','line_number':980,'multiline':False]['text':' __wasi__','line_number':990,'multiline':False]['text':' Due to bug 1502562, the following assertion does not currently hold.','line_number':1001,'multiline':False]['text':' MOZ_RELEASE_ASSERT(length > 0);','line_number':1002,'multiline':False]['text':' Calculate the address originally returned by the system call.','line_number':1004,'multiline':False]['text':' This is needed because AllocateMappedContent returns a pointer','line_number':1005,'multiline':False]['text':' that might be offset from the mapping, as the beginning of a','line_number':1006,'multiline':False]['text':' mapping must be aligned with the allocation granularity.','line_number':1007,'multiline':False]['text':' __wasi__','line_number':1017,'multiline':False]['text':' nothing ','line_number':1028,'multiline':True]['text':' namespace gc','line_number':1046,'multiline':False]['text':' namespace js','line_number':1047,'multiline':False]