['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
******************************************************************************
*   file name:  nfrs.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
* Modification history
* Date        Name      Comments
* 10/11/2001  Doug      Ported from ICU4J
','line_number':3,'multiline':True]['text':'* -x ','line_number':33,'multiline':True]['text':'* x.x ','line_number':35,'multiline':True]['text':'* 0.x ','line_number':37,'multiline':True]['text':'* x.0 ','line_number':39,'multiline':True]['text':'* Inf ','line_number':41,'multiline':True]['text':'* NaN ','line_number':43,'multiline':True]['text':' euclid's algorithm works with doubles','line_number':51,'multiline':False]['text':' note, doubles only get us up to one quadrillion or so, which','line_number':52,'multiline':False]['text':' isn't as much range as we get with longs.  We probably still','line_number':53,'multiline':False]['text':' want either 64-bit math, or BigInteger.','line_number':54,'multiline':False]['text':'*
 * Calculates the least common multiple of x and y.
 ','line_number':77,'multiline':True]['text':' binary gcd algorithm from Knuth, "The Art of Computer Programming,"','line_number':83,'multiline':False]['text':' vol. 2, 1st ed., pp. 298-299','line_number':84,'multiline':False]['text':' x * y == gcd(x, y) * lcm(x, y)','line_number':116,'multiline':False]['text':' "%%" ','line_number':129,'multiline':True]['text':' "@noparse" ','line_number':134,'multiline':True]['text':' !!! make sure index is valid','line_number':153,'multiline':False]['text':' throw new IllegalArgumentException("Empty rule set description");','line_number':156,'multiline':False]['text':' if the description begins with a rule set name (the rule set','line_number':161,'multiline':False]['text':' name can be omitted in formatter descriptions that consist','line_number':162,'multiline':False]['text':' of only one rule set), copy it out into our "name" member','line_number':163,'multiline':False]['text':' and delete it from the description','line_number':164,'multiline':False]['text':' throw new IllegalArgumentException("Rule set name doesn't end in colon");','line_number':168,'multiline':False]['text':' throw new IllegalArgumentException("Empty rule set description");','line_number':181,'multiline':False]['text':' remove the @noparse from the name','line_number':189,'multiline':False]['text':' all of the other members of NFRuleSet are initialized','line_number':192,'multiline':False]['text':' by parseRules()','line_number':193,'multiline':False]['text':' start by creating a Vector whose elements are Strings containing','line_number':199,'multiline':False]['text':' the descriptions of the rules (one rule per element).  The rules','line_number':200,'multiline':False]['text':' are separated by semicolons (there's no escape facility: ALL','line_number':201,'multiline':False]['text':' semicolons are rule delimiters)','line_number':202,'multiline':False]['text':' ensure we are starting with an empty rule list','line_number':208,'multiline':False]['text':' dlf - the original code kept a separate description array for no reason,','line_number':211,'multiline':False]['text':' so I got rid of it.  The loop was too complex so I simplified it.','line_number':212,'multiline':False]['text':' for rules that didn't specify a base value, their base values','line_number':226,'multiline':False]['text':' were initialized to 0.  Make another pass through the list and','line_number':227,'multiline':False]['text':' set all those rules' base values.  We also remove any special','line_number':228,'multiline':False]['text':' rules from the list and put them into their own member variables','line_number':229,'multiline':False]['text':' (this isn't a for loop because we might be deleting items from','line_number':232,'multiline':False]['text':' the vector-- we want to make sure we only increment i when','line_number':233,'multiline':False]['text':' we _didn't_ delete anything from the vector)','line_number':234,'multiline':False]['text':' if the rule's base value is 0, fill in a default','line_number':241,'multiline':False]['text':' base value (this will be 1 plus the preceding','line_number':242,'multiline':False]['text':' rule's base value for regular rule sets, and the','line_number':243,'multiline':False]['text':' same as the preceding rule's base value in fraction','line_number':244,'multiline':False]['text':' rule sets)','line_number':245,'multiline':False]['text':' if it's a regular rule that already knows its base value,','line_number':249,'multiline':False]['text':' check to make sure the rules are in order, and update','line_number':250,'multiline':False]['text':' the default base value for the next rule','line_number':251,'multiline':False]['text':' throw new IllegalArgumentException("Rules are not in order");','line_number':253,'multiline':False]['text':'*
 * Set one of the non-numerical rules.
 * @param rule The rule to set.
 ','line_number':265,'multiline':True]['text':'*
 * Determine the best fraction rule to use. Rules matching the decimal point from
 * DecimalFormatSymbols become the main set of rules to use.
 * @param originalIndex The index into nonNumericalRules
 * @param newRule The new rule to consider
 * @param rememberRule Should the new rule be added to fractionRules.
 ','line_number':294,'multiline':True]['text':' We have more than one. Which one is better?','line_number':310,'multiline':False]['text':' else leave it alone','line_number':317,'multiline':False]['text':' else it will be deleted via NFRuleList fractionRules','line_number':330,'multiline':False]['text':' ...then compare the non-numerical rule lists...','line_number':354,'multiline':False]['text':' ...then compare the rule lists...','line_number':361,'multiline':False]['text':' Switch the fraction rules to mirror the DecimalFormatSymbols.','line_number':377,'multiline':False]['text':' stop recursion','line_number':403,'multiline':False]['text':' else error, but can't report it','line_number':408,'multiline':False]['text':' stop recursion','line_number':417,'multiline':False]['text':' else error, but can't report it','line_number':422,'multiline':False]['text':' if this is a fraction rule set, use findFractionRuleSetRule()','line_number':430,'multiline':False]['text':' if the number is negative, return the negative number rule','line_number':443,'multiline':False]['text':' (if there isn't a negative-number rule, we pretend it's a','line_number':444,'multiline':False]['text':' positive number)','line_number':445,'multiline':False]['text':' if the number isn't an integer, we use one of the fraction rules...','line_number':462,'multiline':False]['text':' if the number is between 0 and 1, return the proper','line_number':464,'multiline':False]['text':' fraction rule','line_number':465,'multiline':False]['text':' otherwise, return the improper fraction rule','line_number':469,'multiline':False]['text':' if there's a default rule, use it to format the number','line_number':475,'multiline':False]['text':' and if we haven't yet returned a rule, use findNormalRule()','line_number':480,'multiline':False]['text':' to find the applicable rule','line_number':481,'multiline':False]['text':' if this is a fraction rule set, use findFractionRuleSetRule()','line_number':489,'multiline':False]['text':' to find the rule (we should only go into this clause if the','line_number':490,'multiline':False]['text':' value is 0)','line_number':491,'multiline':False]['text':' if the number is negative, return the negative-number rule','line_number':496,'multiline':False]['text':' (if there isn't one, pretend the number is positive)','line_number':497,'multiline':False]['text':' we have to repeat the preceding two checks, even though we','line_number':506,'multiline':False]['text':' do them in findRule(), because the version of format() that','line_number':507,'multiline':False]['text':' takes a long bypasses findRule() and goes straight to this','line_number':508,'multiline':False]['text':' function.  This function does skip the fraction rules since','line_number':509,'multiline':False]['text':' we know the value is an integer (it also skips the default','line_number':510,'multiline':False]['text':' rule, since it's considered a fraction rule.  Skipping the','line_number':511,'multiline':False]['text':' default rule in this function is also how we avoid infinite','line_number':512,'multiline':False]['text':' recursion)','line_number':513,'multiline':False]['text':' {dlf} unfortunately this fails if there are no rules except','line_number':515,'multiline':False]['text':' special rules.  If there are no rules, use the default rule.','line_number':516,'multiline':False]['text':' binary-search the rule list for the applicable rule','line_number':518,'multiline':False]['text':' (a rule is used for all values from its base value to','line_number':519,'multiline':False]['text':' the next rule's base value)','line_number':520,'multiline':False]['text':' bad rule set, minimum base > 0','line_number':537,'multiline':False]['text':' want to throw exception here','line_number':538,'multiline':False]['text':' use shouldRollBack() to see whether we need to invoke the','line_number':543,'multiline':False]['text':' rollback rule (see shouldRollBack()'s documentation for','line_number':544,'multiline':False]['text':' an explanation of the rollback rule).  If we do, roll back','line_number':545,'multiline':False]['text':' one rule and return that one instead of the one we'd normally','line_number':546,'multiline':False]['text':' return','line_number':547,'multiline':False]['text':' bad rule set, no prior rule to rollback to from this base','line_number':549,'multiline':False]['text':' else use the default rule','line_number':556,'multiline':False]['text':'*
 * If this rule is a fraction rule set, this function is used by
 * findRule() to select the most appropriate rule for formatting
 * the number.  Basically, the base value of each rule in the rule
 * set is treated as the denominator of a fraction.  Whichever
 * denominator can produce the fraction closest in value to the
 * number passed in is the result.  If there's a tie, the earlier
 * one in the list wins.  (If there are two rules in a row with the
 * same base value, the first one is used when the numerator of the
 * fraction would be 1, and the second rule is used the rest of the
 * time.
 * @param number The number being formatted (which will always be
 * a number between 0 and 1)
 * @return The rule to use to format this number
 ','line_number':560,'multiline':True]['text':' the obvious way to do this (multiply the value being formatted','line_number':578,'multiline':False]['text':' by each rule's base value until you get an integral result)','line_number':579,'multiline':False]['text':' doesn't work because of rounding error.  This method is more','line_number':580,'multiline':False]['text':' accurate','line_number':581,'multiline':False]['text':' find the least common multiple of the rules' base values','line_number':583,'multiline':False]['text':' and multiply this by the number being formatted.  This is','line_number':584,'multiline':False]['text':' all the precision we need, and we can do all of the rest','line_number':585,'multiline':False]['text':' of the math using integer arithmetic','line_number':586,'multiline':False]['text':' for each rule, do the following...','line_number':595,'multiline':False]['text':' "numerator" is the numerator of the fraction if the','line_number':600,'multiline':False]['text':' denominator is the LCD.  The numerator if the rule's','line_number':601,'multiline':False]['text':' base value is the denominator is "numerator" times the','line_number':602,'multiline':False]['text':' base value divided bythe LCD.  Here we check to see if','line_number':603,'multiline':False]['text':' that's an integer, and if not, how close it is to being','line_number':604,'multiline':False]['text':' an integer.','line_number':605,'multiline':False]['text':' normalize the result of the above calculation: we want','line_number':609,'multiline':False]['text':' the numerator's distance from the CLOSEST multiple','line_number':610,'multiline':False]['text':' of the LCD','line_number':611,'multiline':False]['text':' if this is as close as we've come, keep track of how close','line_number':616,'multiline':False]['text':' that is, and the line number of the rule that did it.  If','line_number':617,'multiline':False]['text':' we've scored a direct hit, we don't have to look at any more','line_number':618,'multiline':False]['text':' rules','line_number':619,'multiline':False]['text':' if we have two successive rules that both have the winning base','line_number':629,'multiline':False]['text':' value, then the first one (the one we found above) is used if','line_number':630,'multiline':False]['text':' the numerator of the fraction is 1 and the second one is used if','line_number':631,'multiline':False]['text':' the numerator of the fraction is anything else (this lets us','line_number':632,'multiline':False]['text':' do things like "one third"/"two thirds" without haveing to define','line_number':633,'multiline':False]['text':' a whole bunch of extra rule sets)','line_number':634,'multiline':False]['text':' finally, return the winning rule','line_number':643,'multiline':False]['text':'*
 * Parses a string.  Matches the string to be parsed against each
 * of its rules (with a base value less than upperBound) and returns
 * the value produced by the rule that matched the most characters
 * in the source string.
 * @param text The string to parse
 * @param parsePosition The initial position is ignored and assumed
 * to be 0.  On exit, this object has been updated to point to the
 * first character position this rule set didn't consume.
 * @param upperBound Limits the rules that can be allowed to match.
 * Only rules whose base values are strictly less than upperBound
 * are considered.
 * @return The numerical result of parsing this string.  This will
 * be the matching rule's base value, composed appropriately with
 * the results of matching any of its substitutions.  The object
 * will be an instance of Long if it's an integral value; otherwise,
 * it will be an instance of Double.  This function always returns
 * a valid object: If nothing matched the input string at all,
 * this function returns new Long(0), and the parse position is
 * left unchanged.
 ','line_number':647,'multiline':True]['text':'new char[len+1];','line_number':673,'multiline':False]['text':'delete[] buf;','line_number':678,'multiline':False]['text':' try matching each rule in the rule set against the text being','line_number':686,'multiline':False]['text':' parsed.  Whichever one matches the most characters is the one','line_number':687,'multiline':False]['text':' that determines the value we return.','line_number':688,'multiline':False]['text':' dump out if there's no text to parse','line_number':692,'multiline':False]['text':' Try each of the negative rules, fraction rules, infinity rules and NaN rules','line_number':708,'multiline':False]['text':' Mark this rule as being executed so that we don't try to execute it again.','line_number':711,'multiline':False]['text':' finally, go through the regular rules one at a time.  We start','line_number':729,'multiline':False]['text':' at the end of the list because we want to try matching the most','line_number':730,'multiline':False]['text':' sigificant rule first (this helps ensure that we parse','line_number':731,'multiline':False]['text':' "five thousand three hundred six" as','line_number':732,'multiline':False]['text':' "(five thousand) (three hundred) (six)" rather than','line_number':733,'multiline':False]['text':' "((five thousand three) hundred) (six)").  Skip rules whose','line_number':734,'multiline':False]['text':' base values are higher than the upper bound (again, this helps','line_number':735,'multiline':False]['text':' limit ambiguity by making sure the rules that match a rule's','line_number':736,'multiline':False]['text':' are less significant than the rule containing the substitutions)/','line_number':737,'multiline':False]['text':' finally, update the parse postion we were passed to point to the','line_number':765,'multiline':False]['text':' first character we didn't use, and return the result that','line_number':766,'multiline':False]['text':' corresponds to that string of characters','line_number':767,'multiline':False]['text':' the rule set name goes first...','line_number':778,'multiline':False]['text':' followed by the regular rules...','line_number':783,'multiline':False]['text':' followed by the special rules (if they exist)','line_number':789,'multiline':False]['text':' utility functions','line_number':813,'multiline':False]['text':' null terminate if room for caller convenience','line_number':968,'multiline':False]['text':' null terminate if room for caller convenience','line_number':1014,'multiline':False]['text':' U_HAVE_RBNF ','line_number':1034,'multiline':True]