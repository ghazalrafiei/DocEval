['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::{ByteLength,Count}QueueingStrategy','line_number':34,'multiline':False]['text':' js::ReadableStream','line_number':35,'multiline':False]['text':' js::Readable{StreamDefault,ByteStream}Controller','line_number':36,'multiline':False]['text':' js::ReadableStreamDefaultReader','line_number':37,'multiline':False]['text':' js::WritableStream','line_number':38,'multiline':False]['text':' js::WritableStreamDefaultController','line_number':39,'multiline':False]['text':' js::WritableStreamDefaultWriter','line_number':40,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':47,'multiline':False]['text':' js::ToWindowProxyIfWindow','line_number':48,'multiline':False]['text':' js::UseOffThreadParseGlobal','line_number':49,'multiline':False]['text':' namespace js','line_number':81,'multiline':False]['text':' static ','line_number':96,'multiline':True]['text':' Return true if the given constructor has been disabled at run-time.','line_number':193,'multiline':False]['text':' static','line_number':212,'multiline':True]['text':' |global| must be same-compartment but make sure we're in its realm: the','line_number':220,'multiline':False]['text':' code below relies on this.','line_number':221,'multiline':False]['text':' Prohibit collection of allocation metadata. Metadata builders shouldn't','line_number':230,'multiline':False]['text':' need to observe lazily-constructed prototype objects coming into','line_number':231,'multiline':False]['text':' existence. And assertions start to fail when the builder itself attempts','line_number':232,'multiline':False]['text':' an allocation that re-entrantly tries to create the same prototype.','line_number':233,'multiline':False]['text':' Constructor resolution may execute self-hosted scripts. These','line_number':236,'multiline':False]['text':' self-hosted scripts do not call out to user code by construction. Allow','line_number':237,'multiline':False]['text':' all scripts to execute, even in debuggee compartments that are paused.','line_number':238,'multiline':False]['text':' Some classes can be disabled at compile time, others at run time;','line_number':241,'multiline':False]['text':' if a feature is compile-time disabled, clasp is null.','line_number':242,'multiline':False]['text':' Class spec must have a constructor defined.','line_number':254,'multiline':False]['text':' We need to create the prototype first, and immediately stash it in the','line_number':261,'multiline':False]['text':' slot. This is so the following bootstrap ordering is possible:','line_number':262,'multiline':False]['text':' * Object.prototype','line_number':263,'multiline':False]['text':' * Function.prototype','line_number':264,'multiline':False]['text':' * Function','line_number':265,'multiline':False]['text':' * Object','line_number':266,'multiline':False]['text':'','line_number':267,'multiline':False]['text':' We get the above when Object is resolved before Function. If Function','line_number':268,'multiline':False]['text':' is resolved before Object, we'll end up re-entering resolveConstructor','line_number':269,'multiline':False]['text':' for Function, which is a problem. So if Function is being resolved','line_number':270,'multiline':False]['text':' before Object.prototype exists, we just resolve Object instead, since we','line_number':271,'multiline':False]['text':' know that Function will also be resolved before we return.','line_number':272,'multiline':False]['text':' %IteratorPrototype%.map.[[Prototype]] is %Generator% and','line_number':279,'multiline':False]['text':' %Generator%.prototype.[[Prototype]] is %IteratorPrototype%.','line_number':280,'multiline':False]['text':' A workaround in initIteratorProto prevents runaway mutual recursion while','line_number':281,'multiline':False]['text':' setting these up. Ensure the workaround is triggered already:','line_number':282,'multiline':False]['text':' If iterator helpers are enabled, populating %IteratorPrototype% will','line_number':289,'multiline':False]['text':' have recursively gone through here.','line_number':290,'multiline':False]['text':' We don't always have a prototype (i.e. Math and JSON). If we don't,','line_number':296,'multiline':False]['text':' |createPrototype|, |prototypeFunctions|, and |prototypeProperties|','line_number':297,'multiline':False]['text':' should all be null.','line_number':298,'multiline':False]['text':' Make sure that creating the prototype didn't recursively resolve','line_number':308,'multiline':False]['text':' our own constructor. We can't just assert that there's no','line_number':309,'multiline':False]['text':' prototype; OOMs can result in incomplete resolutions in which','line_number':310,'multiline':False]['text':' the prototype is saved but not the constructor. So use the same','line_number':311,'multiline':False]['text':' criteria that protects entry into this function.','line_number':312,'multiline':False]['text':' Create the constructor.','line_number':319,'multiline':False]['text':' If we're operating on the self-hosting global, we don't want any','line_number':337,'multiline':False]['text':' functions and properties on the builtins and their prototypes.','line_number':338,'multiline':False]['text':' If the prototype exists, link it with the constructor.','line_number':362,'multiline':False]['text':' Call the post-initialization hook, if provided.','line_number':367,'multiline':False]['text':' Any operations that modifies the global object should be placed','line_number':375,'multiline':False]['text':' after any other fallible operations.','line_number':376,'multiline':False]['text':' Fallible operation that modifies the global object.','line_number':378,'multiline':False]['text':' On the web, it isn't presently possible to expose the global','line_number':382,'multiline':False]['text':' "SharedArrayBuffer" property unless the page is cross-site-isolated.','line_number':383,'multiline':False]['text':' Only define this constructor if an option on the realm indicates that','line_number':384,'multiline':False]['text':' it should be defined.','line_number':385,'multiline':False]['text':' Infallible operations that modify the global object.','line_number':405,'multiline':False]['text':' Resolve a "globalThis" self-referential property if necessary,','line_number':415,'multiline':False]['text':' per a stage-3 proposal. https://github.com/tc39/ecma262/pull/702','line_number':416,'multiline':False]['text':'','line_number':417,'multiline':False]['text':' We could also do this in |FinishObjectClassInit| to trim the global','line_number':418,'multiline':False]['text':' resolve hook.  Unfortunately, |ToWindowProxyIfWindow| doesn't work then:','line_number':419,'multiline':False]['text':' the browser's |nsGlobalWindow::SetNewDocument| invokes Object init','line_number':420,'multiline':False]['text':' *before* it sets the global's WindowProxy using |js::SetWindowProxy|.','line_number':421,'multiline':False]['text':'','line_number':422,'multiline':False]['text':' Refactoring global object creation code to support this approach is a','line_number':423,'multiline':False]['text':' challenge for another day.','line_number':424,'multiline':False]['text':' static ','line_number':425,'multiline':True]['text':' static ','line_number':443,'multiline':True]['text':' static ','line_number':478,'multiline':True]['text':' static ','line_number':495,'multiline':True]['text':' Don't resolve constructors for off-thread parse globals. Instead create a','line_number':499,'multiline':False]['text':' placeholder object for the prototype which we can use to find the real','line_number':500,'multiline':False]['text':' prototype when the off-thread compartment is merged back into the target','line_number':501,'multiline':False]['text':' compartment.','line_number':502,'multiline':False]['text':' static ','line_number':526,'multiline':True]['text':' Don't create prototype objects for off-thread parse globals. Instead','line_number':530,'multiline':False]['text':' create a placeholder object which we can use to find the real prototype','line_number':531,'multiline':False]['text':' when the off-thread compartment is merged back into the target','line_number':532,'multiline':False]['text':' compartment.','line_number':533,'multiline':False]['text':' static ','line_number':553,'multiline':True]['text':' reserved slots already allocated','line_number':558,'multiline':False]['text':' static ','line_number':581,'multiline':True]['text':' Construct the unique [[%ThrowTypeError%]] function object, used only for','line_number':590,'multiline':False]['text':' "callee" and "caller" accessors on strict mode arguments objects.  (The','line_number':591,'multiline':False]['text':' spec also uses this for "arguments" and "caller" on various functions,','line_number':592,'multiline':False]['text':' but we're experimenting with implementing them using accessors on','line_number':593,'multiline':False]['text':' |Function.prototype| right now.)','line_number':594,'multiline':False]['text':' The "length" property of %ThrowTypeError% is non-configurable.','line_number':602,'multiline':False]['text':' The "name" property of %ThrowTypeError% is non-configurable, adjust','line_number':615,'multiline':False]['text':' the default property attributes accordingly.','line_number':616,'multiline':False]['text':' Initialize the private slot to null if present, as GC can call class','line_number':642,'multiline':False]['text':' hooks before the caller gets to set this to a non-garbage value.','line_number':643,'multiline':False]['text':' static ','line_number':671,'multiline':True]['text':' If we are creating a new global in an existing compartment, make sure the','line_number':679,'multiline':False]['text':' compartment has a live global at all times (by rooting it here).','line_number':680,'multiline':False]['text':' See bug 1530364.','line_number':681,'multiline':False]['text':' The lexical environment is marked when marking the global, so we don't need','line_number':712,'multiline':False]['text':' a read barrier here because we know the global is live.','line_number':713,'multiline':False]['text':' static ','line_number':723,'multiline':True]['text':' static ','line_number':738,'multiline':True]['text':' Define a top-level property 'undefined' with the undefined value. ','line_number':741,'multiline':True]['text':' Resolve a "globalThis" self-referential property if necessary.','line_number':748,'multiline':False]['text':' static ','line_number':766,'multiline':True]['text':' static ','line_number':773,'multiline':True]['text':'
     * If there are callbacks, make sure that the CSP callback is installed
     * and that it permits runtime code generation.
     ','line_number':778,'multiline':True]['text':' Let's cache the result only if the contentSecurityPolicyAllows callback','line_number':788,'multiline':False]['text':' is not set. In this way, contentSecurityPolicyAllows callback is executed','line_number':789,'multiline':False]['text':' each time, with the current HandleValue code.','line_number':790,'multiline':False]['text':' static ','line_number':796,'multiline':True]['text':' static ','line_number':826,'multiline':True]['text':' static ','line_number':838,'multiline':True]['text':' static ','line_number':878,'multiline':True]['text':' static ','line_number':895,'multiline':True]['text':' static ','line_number':913,'multiline':True]['text':' nfixed = ','line_number':930,'multiline':True]['text':' static ','line_number':933,'multiline':True]['text':' Define a top-level property 'undefined' with the undefined value.','line_number':954,'multiline':False]['text':' Install the intrinsics holder in the intrinsics.','line_number':961,'multiline':False]['text':' static ','line_number':966,'multiline':True]['text':' This function was initially cloned because it was called by','line_number':984,'multiline':False]['text':' other self-hosted code, so the clone kept its self-hosted name,','line_number':985,'multiline':False]['text':' instead of getting the name it's intended to have in content','line_number':986,'multiline':False]['text':' compartments. This can happen when a lazy builtin is initialized','line_number':987,'multiline':False]['text':' after self-hosted code for another builtin used the same','line_number':988,'multiline':False]['text':' function. In that case, we need to change the function's name,','line_number':989,'multiline':False]['text':' which is ok because it can't have been exposed to content','line_number':990,'multiline':False]['text':' before.','line_number':991,'multiline':False]['text':' The function might be installed multiple times on the same or','line_number':996,'multiline':False]['text':' different builtins, under different property names, so its name','line_number':997,'multiline':False]['text':' might be neither "selfHostedName" nor "name". In that case, its','line_number':998,'multiline':False]['text':' canonical name must've been set using the `_SetCanonicalName`','line_number':999,'multiline':False]['text':' intrinsic.','line_number':1000,'multiline':False]['text':' static ','line_number':1015,'multiline':True]['text':' It's possible in certain edge cases that cloning the value ended up','line_number':1024,'multiline':False]['text':' defining the intrinsic. For instance, cloning can call NewArray, which','line_number':1025,'multiline':False]['text':' resolves Array.prototype, which defines some self-hosted functions. If this','line_number':1026,'multiline':False]['text':' happens we use the value already defined on the intrinsics holder.','line_number':1027,'multiline':False]['text':' static ','line_number':1039,'multiline':True]['text':' static ','line_number':1062,'multiline':True]['text':' Note: if you arrived here because you're removing UseOffThreadParseGlobal,','line_number':1066,'multiline':False]['text':' please also remove the setUsedAsPrototype argument and the lambda below.','line_number':1067,'multiline':False]['text':' static ','line_number':1101,'multiline':True]['text':' static ','line_number':1116,'multiline':True]