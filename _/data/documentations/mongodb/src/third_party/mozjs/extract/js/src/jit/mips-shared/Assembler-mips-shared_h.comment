['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Helper classes for ScratchRegister usage. Asserts that only one piece','line_number':65,'multiline':False]['text':' of code thinks it has exclusive ownership of each scratch register.','line_number':66,'multiline':False]['text':' Use arg reg from EnterJIT function as OsrFrameReg.','line_number':76,'multiline':False]['text':' used by Odin','line_number':91,'multiline':False]['text':' used by Odin','line_number':92,'multiline':False]['text':' A bias applied to the GlobalReg to allow the use of instructions with small','line_number':105,'multiline':False]['text':' negative immediate offsets which doubles the range of global data that can be','line_number':106,'multiline':False]['text':' accessed with a single instruction.','line_number':107,'multiline':False]['text':' Registerd used in RegExpMatcher instruction (do not use JSReturnOperand).','line_number':110,'multiline':False]['text':' Registerd used in RegExpTester instruction (do not use ReturnReg).','line_number':115,'multiline':False]['text':' clang-format off ','line_number':122,'multiline':True]['text':' MIPS instruction types','line_number':123,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':124,'multiline':False]['text':'                |    6      |    5    |    5    |    5    |    5    |    6      |','line_number':125,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':126,'multiline':False]['text':' Register type  |  Opcode   |    Rs   |    Rt   |    Rd   |    Sa   | Function  |','line_number':127,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':128,'multiline':False]['text':'                |    6      |    5    |    5    |               16              |','line_number':129,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':130,'multiline':False]['text':' Immediate type |  Opcode   |    Rs   |    Rt   |    2's complement constant    |','line_number':131,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':132,'multiline':False]['text':'                |    6      |                        26                         |','line_number':133,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':134,'multiline':False]['text':' Jump type      |  Opcode   |                    jump_target                    |','line_number':135,'multiline':False]['text':'                +---------------------------------------------------------------+','line_number':136,'multiline':False]['text':'                31 bit                                                      bit 0','line_number':137,'multiline':False]['text':' clang-format on ','line_number':138,'multiline':True]['text':' MIPS instruction encoding constants.','line_number':140,'multiline':False]['text':' MIPS instruction  field bit masks.','line_number':179,'multiline':False]['text':' BRK_OVERFLOW','line_number':193,'multiline':False]['text':' MIPS enums for instruction fields','line_number':216,'multiline':False]['text':' cop1 encoding of RS field.','line_number':289,'multiline':False]['text':' regimm  encoding of RT field.','line_number':313,'multiline':False]['text':' special encoding of function field.','line_number':321,'multiline':False]['text':' special2 encoding of function field.','line_number':397,'multiline':False]['text':' special3 encoding of function field.','line_number':411,'multiline':False]['text':' cop1 encoding of function field.','line_number':427,'multiline':False]['text':' Loongson encoding of function field.','line_number':483,'multiline':False]['text':' A BOffImm16 is a 16 bit immediate that is used for branches.','line_number':502,'multiline':False]['text':' A JOffImm26 is a 26 bit immediate that is used for unconditional jumps.','line_number':538,'multiline':False]['text':' These conditions will only evaluate to true if the comparison is ordered','line_number':739,'multiline':False]['text':' - i.e. neither operand is NaN.','line_number':740,'multiline':False]['text':' If either operand is NaN, these conditions always evaluate to true.','line_number':748,'multiline':False]['text':' :( this should be protected, but since CodeGenerator','line_number':778,'multiline':False]['text':' wants to use it, It needs to go out here :(','line_number':779,'multiline':False]['text':' structure for fixing up pc-relative loads/jumps when a the machine code','line_number':786,'multiline':False]['text':' gets moved (executable copy, gc, etc.)','line_number':787,'multiline':False]['text':' the offset within the code buffer where the value is loaded that','line_number':789,'multiline':False]['text':' we want to fix-up','line_number':790,'multiline':False]['text':' As opposed to x86/x64 version, the data relocation has to be executed','line_number':822,'multiline':False]['text':' before to recover the pointer, and not after.','line_number':823,'multiline':False]['text':' Raw GC pointer relocations and Value relocations both end up in','line_number':825,'multiline':False]['text':' TraceOneDataRelocation.','line_number':826,'multiline':False]['text':' Buffer to hold the formatted string. Note that this may contain','line_number':871,'multiline':False]['text':' '%' characters, so do not pass it directly to printf functions.','line_number':872,'multiline':False]['text':' Size of the instruction stream, in bytes.','line_number':899,'multiline':False]['text':' Size of the jump relocation table, in bytes.','line_number':901,'multiline':False]['text':' Size of the data table, in bytes.','line_number':905,'multiline':False]['text':' Write a blob of binary into the instruction stream *OR*','line_number':908,'multiline':False]['text':' into a destination address. If dest is nullptr (the default), then the','line_number':909,'multiline':False]['text':' instruction gets written into the instruction stream. If dest is not null','line_number':910,'multiline':False]['text':' it is interpreted as a pointer to the location that we want the','line_number':911,'multiline':False]['text':' instruction to be written.','line_number':912,'multiline':False]['text':' A static variant for the cases where we don't want to have an assembler','line_number':914,'multiline':False]['text':' object at all. Normally, you would use the dummy (nullptr) object.','line_number':915,'multiline':False]['text':' Branch and jump instructions','line_number':923,'multiline':False]['text':' Arithmetic instructions','line_number':938,'multiline':False]['text':' Logical instructions','line_number':973,'multiline':False]['text':' Shift instructions','line_number':984,'multiline':False]['text':' as_sll(zero, zero, x) instructions are reserved as nop','line_number':985,'multiline':False]['text':' Load and store instructions','line_number':1007,'multiline':False]['text':' Loongson-specific load and store instructions','line_number':1032,'multiline':False]['text':' Move from HI/LO register.','line_number':1044,'multiline':False]['text':' Set on less than.','line_number':1048,'multiline':False]['text':' Conditional move.','line_number':1054,'multiline':False]['text':' Bit twiddling.','line_number':1062,'multiline':False]['text':' Sign extend','line_number':1077,'multiline':False]['text':' FP instructions','line_number':1081,'multiline':False]['text':' Loongson-specific FP load and store instructions','line_number':1089,'multiline':False]['text':' FP convert instructions','line_number':1126,'multiline':False]['text':' FP arithmetic instructions','line_number':1150,'multiline':False]['text':' FP compare instructions','line_number':1173,'multiline':False]['text':' FP conditional move.','line_number':1191,'multiline':False]['text':' Conditional trap operations','line_number':1201,'multiline':False]['text':' label operations','line_number':1209,'multiline':False]['text':' Implement this if we implement a disassembler.','line_number':1277,'multiline':False]['text':' AssemblerMIPSShared','line_number':1279,'multiline':False]['text':' sll zero, zero, 0','line_number':1281,'multiline':False]['text':' An Instruction is a structure for both encoding and decoding any and all','line_number':1284,'multiline':False]['text':' MIPS instructions.','line_number':1285,'multiline':False]['text':' Standard constructor','line_number':1290,'multiline':False]['text':' You should never create an instruction directly.  You should create a','line_number':1293,'multiline':False]['text':' more specific instruction which will eventually call one of these','line_number':1294,'multiline':False]['text':' constructors for you.','line_number':1295,'multiline':False]['text':' Extract the one particular bit.','line_number':1308,'multiline':False]['text':' Extract a bit field out of the instruction','line_number':1310,'multiline':False]['text':' Since all MIPS instructions have opcode, the opcode','line_number':1314,'multiline':False]['text':' extractor resides in the base class.','line_number':1315,'multiline':False]['text':' Return the fields at their original place in the instruction encoding.','line_number':1319,'multiline':False]['text':' Get the next instruction in the instruction stream.','line_number':1324,'multiline':False]['text':' This does neat things like ignoreconstant pools and their guards.','line_number':1325,'multiline':False]['text':' Sometimes, an api wants a uint32_t (or a pointer to it) rather than','line_number':1328,'multiline':False]['text':' an instruction.  raw() just coerces this into a pointer to a uint32_t','line_number':1329,'multiline':False]['text':' Instruction','line_number':1332,'multiline':False]['text':' make sure that it is the right size','line_number':1334,'multiline':False]['text':' Class for register type instructions.','line_number':1343,'multiline':False]['text':' for float point','line_number':1367,'multiline':False]['text':' Class for branch, load and store instructions with immediate offset.','line_number':1402,'multiline':False]['text':' For floating-point loads and stores.','line_number':1416,'multiline':False]['text':' Reset immediate field and replace it','line_number':1435,'multiline':False]['text':' Reset immediate field and replace it','line_number':1439,'multiline':False]['text':' Class for Jump type instructions.','line_number':1444,'multiline':False]['text':' Class for Loongson-specific instructions','line_number':1454,'multiline':False]['text':' For indexed loads and stores.','line_number':1457,'multiline':False]['text':' For quad-word loads and stores.','line_number':1464,'multiline':False]['text':' For floating-point unaligned loads and stores.','line_number':1472,'multiline':False]['text':' namespace jit','line_number':1492,'multiline':False]['text':' namespace js','line_number':1493,'multiline':False]['text':' jit_mips_shared_Assembler_mips_shared_h ','line_number':1495,'multiline':True]