['text':' Copyright 2013, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' If this environment variable is present, trace the executed instructions.','line_number':59,'multiline':False]['text':' (Very helpful for debugging code generation crashes.)','line_number':60,'multiline':False]['text':' The decoder may outlive the simulator.','line_number':71,'multiline':False]['text':' Reset the system registers.','line_number':87,'multiline':False]['text':' Reset registers to 0.','line_number':91,'multiline':False]['text':' Set FP registers to a value that is a NaN in both 32-bit and 64-bit FP.','line_number':97,'multiline':False]['text':' Returning to address 0 exits the Simulator.','line_number':104,'multiline':False]['text':' Ensure that shift operations act as the simulator expects.','line_number':110,'multiline':False]['text':' Set up the decoder.','line_number':116,'multiline':False]['text':' Allocate and set up the simulator stack.','line_number':131,'multiline':False]['text':' Configure the starting stack pointer.','line_number':138,'multiline':False]['text':'  - Find the top of the stack.','line_number':139,'multiline':False]['text':'  - There's a protection region at both ends of the stack.','line_number':141,'multiline':False]['text':'  - The stack pointer must be 16-byte aligned.','line_number':143,'multiline':False]['text':' Set the sample period to 10, as the VIXL examples and tests are short.','line_number':147,'multiline':False]['text':' Print a warning about exclusive-access instructions, but only the first','line_number':156,'multiline':False]['text':' time they are encountered. This warning can be silenced using','line_number':157,'multiline':False]['text':' SilenceExclusiveAccessWarning().','line_number':158,'multiline':False]['text':' FIXME: This just leaks the Decoder object for now, which is probably OK.','line_number':184,'multiline':False]['text':' FIXME: We should free it at some point.','line_number':185,'multiline':False]['text':' FIXME: Note that it can't be stored in the SimulatorRuntime due to lifetime conflicts.','line_number':186,'multiline':False]['text':' Check if Simulator:init ran out of memory.','line_number':194,'multiline':False]['text':' Register the simulator in the Simulator process to handle cache flushes','line_number':200,'multiline':False]['text':' across threads.','line_number':201,'multiline':False]['text':' The program counter should always be aligned.','line_number':225,'multiline':False]['text':' We're here emulating the behavior of the membarrier carried over on','line_number':229,'multiline':False]['text':' real hardware does; see syscalls to membarrier in MozCpu-vixl.cpp.','line_number':230,'multiline':False]['text':' There's a slight difference that the simulator is not being','line_number':231,'multiline':False]['text':' interrupted: instead, we effectively run the icache flush request','line_number':232,'multiline':False]['text':' before executing the next instruction, which is close enough and','line_number':233,'multiline':False]['text':' sufficient for our use case.','line_number':234,'multiline':False]['text':' First eight arguments passed in registers.','line_number':283,'multiline':False]['text':' This code should use the type of the called function','line_number':285,'multiline':False]['text':' (with templates, like the callVM machinery), but since the','line_number':286,'multiline':False]['text':' number of called functions is miniscule, their types have been','line_number':287,'multiline':False]['text':' divined from the number of arguments.','line_number':288,'multiline':False]['text':' EnterJitData::jitcode.','line_number':290,'multiline':False]['text':' EnterJitData::maxArgc.','line_number':292,'multiline':False]['text':' EnterJitData::maxArgv.','line_number':294,'multiline':False]['text':' EnterJitData::osrFrame.','line_number':296,'multiline':False]['text':' EnterJitData::calleeToken.','line_number':298,'multiline':False]['text':' EnterJitData::scopeChain.','line_number':300,'multiline':False]['text':' EnterJitData::osrNumStackValues.','line_number':302,'multiline':False]['text':' Address of EnterJitData::result.','line_number':304,'multiline':False]['text':' EntryArg* args','line_number':307,'multiline':False]['text':' uint8_t* GlobalData','line_number':309,'multiline':False]['text':' irregexp','line_number':311,'multiline':False]['text':' InputOutputData& data','line_number':312,'multiline':False]['text':' testsJit.cpp','line_number':314,'multiline':False]['text':' accept.','line_number':315,'multiline':False]['text':' Call must transition back to native code on exit.','line_number':322,'multiline':False]['text':' Execute the simulation.','line_number':325,'multiline':False]['text':' When the generated code calls a VM function (masm.callWithABI) we need to','line_number':339,'multiline':False]['text':' call that function instead of trying to execute it with the simulator','line_number':340,'multiline':False]['text':' (because it's x64 code instead of AArch64 code). We do that by redirecting the VM','line_number':341,'multiline':False]['text':' call to a svc (Supervisor Call) instruction that is handled by the','line_number':342,'multiline':False]['text':' simulator. We write the original destination of the jump just at a known','line_number':343,'multiline':False]['text':' offset from the svc instruction so the simulator knows what to call.','line_number':344,'multiline':False]['text':' TODO: Store srt_ in the simulator for this assertion.','line_number':369,'multiline':False]['text':' VIXL_ASSERT_IF(pt->simulator(), pt->simulator()->srt_ == srt);','line_number':370,'multiline':False]['text':' Note: we can't use js_new here because the constructor is private.','line_number':380,'multiline':False]['text':' The SVC instruction is hijacked by the JIT as a pseudo-instruction','line_number':443,'multiline':False]['text':' causing the Simulator to execute host-native code for callWithABI.','line_number':444,'multiline':False]['text':' Simulator support for callWithABI().','line_number':586,'multiline':False]['text':' Stack must be aligned prior to the call.','line_number':596,'multiline':False]['text':' FIXME: It's actually our job to perform the alignment...','line_number':597,'multiline':False]['text':'VIXL_ASSERT((xreg(31, Reg31IsStackPointer) & (StackAlignment - 1)) == 0);','line_number':598,'multiline':False]['text':' Used to assert that callee-saved registers are preserved.','line_number':600,'multiline':False]['text':' Remember LR for returning from the "call".','line_number':614,'multiline':False]['text':' Allow recursive Simulator calls: returning from the call must stop','line_number':617,'multiline':False]['text':' the simulation and transition back to native Simulator code.','line_number':618,'multiline':False]['text':' Store argument register values in local variables for ease of use below.','line_number':621,'multiline':False]['text':' Dispatch the call and set the return value.','line_number':637,'multiline':False]['text':' Cases with int64_t return type.','line_number':639,'multiline':False]['text':' Cases with GPR return type. This can be int32 or int64, but int64 is a safer assumption.','line_number':696,'multiline':False]['text':' Cases with float return type.','line_number':726,'multiline':False]['text':' Cases with double return type.','line_number':743,'multiline':False]['text':' Nuke the volatile registers. x0-x7 are used as result registers, but except','line_number':897,'multiline':False]['text':' for x0, none are used in the above signatures.','line_number':898,'multiline':False]['text':' Code feed 1 bad data','line_number':900,'multiline':False]['text':' Assert that callee-saved registers are unchanged.','line_number':904,'multiline':False]['text':' Assert that the stack is unchanged.','line_number':917,'multiline':False]['text':' Simulate a return.','line_number':920,'multiline':False]['text':' Flush the caches recorded by the current thread as well as what got','line_number':931,'multiline':False]['text':' recorded from other threads before this call.','line_number':932,'multiline':False]['text':' namespace vixl','line_number':1001,'multiline':False]['text':' !JS_CACHE_SIMULATOR_ARM64','line_number':1052,'multiline':False]['text':' namespace jit','line_number':1054,'multiline':False]['text':' namespace js','line_number':1055,'multiline':False]