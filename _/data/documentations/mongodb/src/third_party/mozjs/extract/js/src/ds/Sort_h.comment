['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Helper function for MergeSort. ','line_number':25,'multiline':True]['text':' Copy runs already in sorted order. ','line_number':32,'multiline':True]['text':' Runs are not already sorted, merge them. ','line_number':40,'multiline':True]['text':' namespace detail ','line_number':64,'multiline':True]['text':'
 * Sort the array using the merge sort algorithm. The scratch should point to
 * a temporary storage that can hold nelems elements.
 *
 * The comparator must provide the () operator with the following signature:
 *
 *     bool operator()(const T& a, const T& a, bool* lessOrEqualp);
 *
 * It should return true on success and set *lessOrEqualp to the result of
 * a <= b operation. If it returns false, the sort terminates immediately with
 * the false result. In this case the content of the array and scratch is
 * arbitrary.
 *
 * Note: The merge sort algorithm is a stable sort, preserving relative ordering
 * of entries that compare equal. This makes it a useful substitute for
 * |std::stable_sort|, which can't be used in SpiderMonkey because it internally
 * allocates memory without using SpiderMonkey's allocator.
 ','line_number':66,'multiline':True]['text':'
   * Apply insertion sort to small chunks to reduce the number of merge
   * passes needed.
   ','line_number':93,'multiline':True]['text':' namespace js ','line_number':145,'multiline':True]['text':' ds_Sort_h ','line_number':147,'multiline':True]