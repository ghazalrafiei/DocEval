['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Copyright 2020 the V8 project authors. All rights reserved.','line_number':7,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':8,'multiline':False]['text':' found in the LICENSE file.','line_number':9,'multiline':False]['text':' This file implements the NativeRegExpMacroAssembler interface for','line_number':11,'multiline':False]['text':' SpiderMonkey. It provides the same interface as each of V8's','line_number':12,'multiline':False]['text':' architecture-specific implementations.','line_number':13,'multiline':False]['text':' Character position at the start of the input, stored as a','line_number':25,'multiline':False]['text':' negative offset from the end of the string (input_end_pointer_).','line_number':26,'multiline':False]['text':' The backtrack_stack_pointer_ register points to the top of the stack.','line_number':29,'multiline':False]['text':' This points to the bottom of the backtrack stack.','line_number':30,'multiline':False]['text':' Copy of the input MatchPairs.','line_number':33,'multiline':False]['text':' pointer to capture array','line_number':34,'multiline':False]['text':' size of capture array','line_number':35,'multiline':False]['text':' Push a register on the backtrack stack.','line_number':117,'multiline':False]['text':' Pop a value from the backtrack stack.','line_number':120,'multiline':False]['text':' MacroAssembler methods that take a Label can be called with a','line_number':139,'multiline':False]['text':' null label, which means that we should backtrack if we would jump','line_number':140,'multiline':False]['text':' to that label. This is a helper to avoid writing out the same','line_number':141,'multiline':False]['text':' logic a dozen times.','line_number':142,'multiline':False]['text':' The stack-pointer-relative location of a regexp register.','line_number':182,'multiline':False]['text':'
   * This assembler uses the following registers:
   *
   * - current_character_:
   *     Contains the character (or characters) currently being examined.
   *     Must be loaded using LoadCurrentCharacter before using any of the
   *     dispatch methods. After a matching pass for a global regexp,
   *     temporarily stores the index of capture start.
   * - current_position_:
   *     Current position in input *as negative byte offset from end of string*.
   * - input_end_pointer_:
   *     Points to byte after last character in the input. current_position_ is
   *     relative to this.
   * - backtrack_stack_pointer_:
   *     Points to tip of the (heap-allocated) backtrack stack. The stack grows
   *     downward (like the native stack).
   * - temp0_, temp1_, temp2_:
   *     Scratch registers.
   *
   * The native stack pointer is used to access arguments (InputOutputData),
   * local variables (FrameData), and irregexp's internal virtual registers
   * (see register_location).
   ','line_number':200,'multiline':True]['text':' These labels are used in various API calls and bound (if used) in','line_number':230,'multiline':False]['text':' GetCode. If we abort in the middle of a compilation, as may','line_number':231,'multiline':False]['text':' happen if a regexp is too big, they may be used but not','line_number':232,'multiline':False]['text':' bound.','line_number':233,'multiline':False]['text':' When we generate the code to push a backtrack label's address','line_number':242,'multiline':False]['text':' onto the backtrack stack, we don't know its final address. We','line_number':243,'multiline':False]['text':' have to patch it after linking. This is slightly delicate, as the','line_number':244,'multiline':False]['text':' Label itself (which is allocated on the stack) may not exist by','line_number':245,'multiline':False]['text':' the time we link. The approach is as follows:','line_number':246,'multiline':False]['text':'','line_number':247,'multiline':False]['text':' 1. When we push a label on the backtrack stack (PushBacktrack),','line_number':248,'multiline':False]['text':'    we bind the label's patchOffset_ field to the offset within','line_number':249,'multiline':False]['text':'    the code that should be overwritten. This works because each','line_number':250,'multiline':False]['text':'    label is only pushed by a single instruction.','line_number':251,'multiline':False]['text':'','line_number':252,'multiline':False]['text':' 2. When we bind a label (Bind), we check to see if it has a','line_number':253,'multiline':False]['text':'    bound patchOffset_. If it does, we create a LabelPatch mapping','line_number':254,'multiline':False]['text':'    its patch offset to the offset of the label itself.','line_number':255,'multiline':False]['text':'','line_number':256,'multiline':False]['text':' 3. While linking the code, we walk the list of label patches','line_number':257,'multiline':False]['text':'    and patch the code accordingly.','line_number':258,'multiline':False]['text':' namespace internal','line_number':296,'multiline':False]['text':' namespace v8','line_number':297,'multiline':False]['text':' RegexpMacroAssemblerArch_h','line_number':299,'multiline':False]