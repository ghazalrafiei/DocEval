['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':17,'multiline':False]['text':' js::NewPlainObjectWithProperties','line_number':19,'multiline':False]['text':' \r\n is treated as a single newline.','line_number':68,'multiline':False]['text':'
   * JSONString:
   *   /^"([^\u0000-\u001F"\\]|\\(["/\\bfnrt]|u[0-9a-fA-F]{4}))*"$/
   ','line_number':108,'multiline':True]['text':'
   * Optimization: if the source contains no escaped characters, create the
   * string directly from the source text.
   ','line_number':118,'multiline':True]['text':'
   * Slow case: string contains escaped characters.  Copy a maximal sequence
   * of unescaped characters into a temporary buffer, then an escaped
   * character, and repeat until the entire string is consumed.
   ','line_number':147,'multiline':True]['text':' Point to the first non-hexadecimal character (which may be','line_number':213,'multiline':False]['text':' missing).','line_number':214,'multiline':False]['text':' already at correct location','line_number':216,'multiline':False]['text':'
   * JSONNumber:
   *   /^-?(0|[1-9][0-9]+)(\.[0-9]+)?([eE][\+\-]?[0-9]+)?$/
   ','line_number':263,'multiline':True]['text':' -? ','line_number':270,'multiline':True]['text':' 0|[1-9][0-9]+ ','line_number':278,'multiline':True]['text':' Fast path: no fractional or exponent part. ','line_number':291,'multiline':True]['text':' If the decimal number is shorter than the length of 2**53, (the','line_number':296,'multiline':False]['text':' largest number a double can represent with integral precision),','line_number':297,'multiline':False]['text':' parse it using a decimal-only parser.  This comparison is','line_number':298,'multiline':False]['text':' conservative but faster than a fully-precise check.','line_number':299,'multiline':False]['text':' (\.[0-9]+)? ','line_number':312,'multiline':True]['text':' ([eE][\+\-]?[0-9]+)? ','line_number':329,'multiline':True]['text':'
   * We're past an arbitrary JSON value, so the previous character is
   * *somewhat* constrained, even if this assertion is pretty broad.  Don't
   * knock it till you tried it: this assertion *did* catch a bug once.
   ','line_number':472,'multiline':True]['text':' FALL THROUGH ','line_number':650,'multiline':True]['text':' In |JSON.parse|, "__proto__" is a property like any other and may','line_number':657,'multiline':False]['text':' appear multiple times. In object literal syntax, "__proto__" is','line_number':658,'multiline':False]['text':' prototype mutation and can appear at most once. |JSONParser| only','line_number':659,'multiline':False]['text':' supports the former semantics, so if this parse attempt is for','line_number':660,'multiline':False]['text':' |eval|, return true (without reporting an error) to indicate the','line_number':661,'multiline':False]['text':' JSON parse attempt was unsuccessful.','line_number':662,'multiline':False]['text':' Move the current pointer backwards so that the position','line_number':782,'multiline':False]['text':' reported in the error message is correct.','line_number':783,'multiline':False]