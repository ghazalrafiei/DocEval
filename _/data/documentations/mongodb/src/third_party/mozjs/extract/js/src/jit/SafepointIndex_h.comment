['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Two-tuple that lets you look up the safepoint entry given the','line_number':22,'multiline':False]['text':' displacement of a call instruction within the JIT code.','line_number':23,'multiline':False]['text':' The displacement is the distance from the first byte of the JIT'd code','line_number':25,'multiline':False]['text':' to the return address (of the call that the safepoint was generated for).','line_number':26,'multiline':False]['text':' Offset within the safepoint buffer.','line_number':29,'multiline':False]['text':' The OSI point is patched to a call instruction. Therefore, the','line_number':55,'multiline':False]['text':' returnPoint for an OSI call is the address immediately following that','line_number':56,'multiline':False]['text':' call instruction. The displacement of that point within the assembly','line_number':57,'multiline':False]['text':' buffer is the |returnPointDisplacement|.','line_number':58,'multiline':False]['text':' namespace jit ','line_number':73,'multiline':True]['text':' namespace js ','line_number':74,'multiline':True]['text':' jit_SafepointIndex_h ','line_number':76,'multiline':True]