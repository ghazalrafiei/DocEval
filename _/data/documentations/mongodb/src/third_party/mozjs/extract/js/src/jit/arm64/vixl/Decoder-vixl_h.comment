['text':' Copyright 2014, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' List macro containing all visitors needed by the decoder class.','line_number':37,'multiline':False]['text':' The Visitor interface. Disassembler and simulator (and other tools)','line_number':119,'multiline':False]['text':' must provide implementations for all of these functions.','line_number':120,'multiline':False]['text':' Top-level wrappers around the actual decoding function.','line_number':151,'multiline':False]['text':' Register a new visitor class with the decoder.','line_number':164,'multiline':False]['text':' Decode() will call the corresponding visitor method from all registered','line_number':165,'multiline':False]['text':' visitor classes when decoding reaches the leaf node of the instruction','line_number':166,'multiline':False]['text':' decode tree.','line_number':167,'multiline':False]['text':' Visitors are called in order.','line_number':168,'multiline':False]['text':' A visitor can be registered multiple times.','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':'   d.AppendVisitor(V1);','line_number':171,'multiline':False]['text':'   d.AppendVisitor(V2);','line_number':172,'multiline':False]['text':'   d.PrependVisitor(V2);','line_number':173,'multiline':False]['text':'   d.AppendVisitor(V3);','line_number':174,'multiline':False]['text':'','line_number':175,'multiline':False]['text':'   d.Decode(i);','line_number':176,'multiline':False]['text':'','line_number':177,'multiline':False]['text':' will call in order visitor methods in V2, V1, V2, V3.','line_number':178,'multiline':False]['text':' These helpers register `new_visitor` before or after the first instance of','line_number':181,'multiline':False]['text':' `registered_visiter` in the list.','line_number':182,'multiline':False]['text':' So if','line_number':183,'multiline':False]['text':'   V1, V2, V1, V2','line_number':184,'multiline':False]['text':' are registered in this order in the decoder, calls to','line_number':185,'multiline':False]['text':'   d.InsertVisitorAfter(V3, V1);','line_number':186,'multiline':False]['text':'   d.InsertVisitorBefore(V4, V2);','line_number':187,'multiline':False]['text':' will yield the order','line_number':188,'multiline':False]['text':'   V1, V3, V4, V2, V1, V2','line_number':189,'multiline':False]['text':'','line_number':190,'multiline':False]['text':' For more complex modifications of the order of registered visitors, one can','line_number':191,'multiline':False]['text':' directly access and modify the list of visitors via the `visitors()'','line_number':192,'multiline':False]['text':' accessor.','line_number':193,'multiline':False]['text':' Remove all instances of a previously registered visitor class from the list','line_number':199,'multiline':False]['text':' of visitors stored by the decoder.','line_number':200,'multiline':False]['text':' Decodes an instruction and calls the visitor functions registered with the','line_number':209,'multiline':False]['text':' Decoder class.','line_number':210,'multiline':False]['text':' Decode the PC relative addressing instruction, and call the corresponding','line_number':213,'multiline':False]['text':' visitors.','line_number':214,'multiline':False]['text':' On entry, instruction bits 27:24 = 0x0.','line_number':215,'multiline':False]['text':' Decode the add/subtract immediate instruction, and call the correspoding','line_number':218,'multiline':False]['text':' visitors.','line_number':219,'multiline':False]['text':' On entry, instruction bits 27:24 = 0x1.','line_number':220,'multiline':False]['text':' Decode the branch, system command, and exception generation parts of','line_number':223,'multiline':False]['text':' the instruction tree, and call the corresponding visitors.','line_number':224,'multiline':False]['text':' On entry, instruction bits 27:24 = {0x4, 0x5, 0x6, 0x7}.','line_number':225,'multiline':False]['text':' Decode the load and store parts of the instruction tree, and call','line_number':228,'multiline':False]['text':' the corresponding visitors.','line_number':229,'multiline':False]['text':' On entry, instruction bits 27:24 = {0x8, 0x9, 0xC, 0xD}.','line_number':230,'multiline':False]['text':' Decode the logical immediate and move wide immediate parts of the','line_number':233,'multiline':False]['text':' instruction tree, and call the corresponding visitors.','line_number':234,'multiline':False]['text':' On entry, instruction bits 27:24 = 0x2.','line_number':235,'multiline':False]['text':' Decode the bitfield and extraction parts of the instruction tree,','line_number':238,'multiline':False]['text':' and call the corresponding visitors.','line_number':239,'multiline':False]['text':' On entry, instruction bits 27:24 = 0x3.','line_number':240,'multiline':False]['text':' Decode the data processing parts of the instruction tree, and call the','line_number':243,'multiline':False]['text':' corresponding visitors.','line_number':244,'multiline':False]['text':' On entry, instruction bits 27:24 = {0x1, 0xA, 0xB}.','line_number':245,'multiline':False]['text':' Decode the floating point parts of the instruction tree, and call the','line_number':248,'multiline':False]['text':' corresponding visitors.','line_number':249,'multiline':False]['text':' On entry, instruction bits 27:24 = {0xE, 0xF}.','line_number':250,'multiline':False]['text':' Decode the Advanced SIMD (NEON) load/store part of the instruction tree,','line_number':253,'multiline':False]['text':' and call the corresponding visitors.','line_number':254,'multiline':False]['text':' On entry, instruction bits 29:25 = 0x6.','line_number':255,'multiline':False]['text':' Decode the Advanced SIMD (NEON) vector data processing part of the','line_number':258,'multiline':False]['text':' instruction tree, and call the corresponding visitors.','line_number':259,'multiline':False]['text':' On entry, instruction bits 28:25 = 0x7.','line_number':260,'multiline':False]['text':' Decode the Advanced SIMD (NEON) scalar data processing part of the','line_number':263,'multiline':False]['text':' instruction tree, and call the corresponding visitors.','line_number':264,'multiline':False]['text':' On entry, instruction bits 28:25 = 0xF.','line_number':265,'multiline':False]['text':' Visitors are registered in a list.','line_number':269,'multiline':False]['text':' namespace vixl','line_number':273,'multiline':False]['text':' VIXL_A64_DECODER_A64_H_','line_number':275,'multiline':False]