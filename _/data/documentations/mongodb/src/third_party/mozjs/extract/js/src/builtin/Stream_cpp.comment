['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' int32_t','line_number':11,'multiline':False]['text':' JS_STREAMS_CLASS_SPEC','line_number':13,'multiline':False]['text':' js::CreateAlgorithmFromUnderlyingMethod, js::InvokeOrNoop, js::IsMaybeWrapped, js::PromiseCall, js::PromiseRejectedWithPendingError','line_number':14,'multiline':False]['text':' js::PullIntoDescriptor','line_number':15,'multiline':False]['text':' js::{EnqueueValueWithSize,ResetQueue}','line_number':16,'multiline':False]['text':' js::ReadableStream, js::SetUpExternalReadableByteStreamController','line_number':17,'multiline':False]['text':' js::ReadableStream{,Default}Controller, js::ReadableStreamDefaultControllerPullSteps, js::ReadableStreamControllerStart{,Failed}Handler','line_number':18,'multiline':False]['text':' js::ReadableStreamControllerClearAlgorithms','line_number':19,'multiline':False]['text':' js::ReadableStream{AddReadOrReadIntoRequest,CloseInternal,CreateReadResult,ErrorInternal,FulfillReadOrReadIntoRequest,GetNumReadRequests,HasDefaultReader}','line_number':20,'multiline':False]['text':' js::ReadableStream{,Default}Reader, js::CreateReadableStreamDefaultReader, js::ReadableStreamReaderGeneric{Cancel,Initialize,Release}, js::ReadableStreamDefaultReaderRead','line_number':21,'multiline':False]['text':' JS::NewArrayBuffer','line_number':22,'multiline':False]['text':' JS_GetArrayBufferViewData, JS_NewUint8Array{,WithBuffer}','line_number':23,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':24,'multiline':False]['text':' js::PlainObject','line_number':28,'multiline':False]['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':29,'multiline':False]['text':' js::NewHandler','line_number':32,'multiline':False]['text':' js::Unwrap{ReaderFromStream{,NoThrow},StreamFromReader}','line_number':33,'multiline':False]['text':' js::ListObject, js::StoreNewListInFixedSlot','line_number':35,'multiline':False]['text':' disable user-defined byte streams','line_number':40,'multiline':False]['text':' user-defined byte streams','line_number':87,'multiline':False]['text':'** 3.3. ReadableStreamAsyncIteratorPrototype *****************************','line_number':89,'multiline':True]['text':' Not implemented.','line_number':91,'multiline':False]['text':'** 3.7. Class ReadableStreamBYOBReader ***********************************','line_number':93,'multiline':True]['text':' Not implemented.','line_number':95,'multiline':False]['text':'** 3.11. Class ReadableByteStreamController ******************************','line_number':97,'multiline':True]['text':' disable user-defined byte streams','line_number':99,'multiline':False]['text':'*
 * Streams spec, 3.10.3
 *      new ReadableByteStreamController ( stream, underlyingSource,
 *                                         highWaterMark )
 * Steps 3 - 16.
 *
 * Note: All arguments must be same-compartment with cx. ReadableStream
 * controllers are always created in the same compartment as the stream.
 ','line_number':101,'multiline':True]['text':' Step 3: Set this.[[controlledReadableStream]] to stream.','line_number':124,'multiline':False]['text':' Step 4: Set this.[[underlyingByteSource]] to underlyingByteSource.','line_number':127,'multiline':False]['text':' Step 5: Set this.[[pullAgain]], and this.[[pulling]] to false.','line_number':130,'multiline':False]['text':' Step 6: Perform ! ReadableByteStreamControllerClearPendingPullIntos(this).','line_number':133,'multiline':False]['text':' Step 7: Perform ! ResetQueue(this).','line_number':138,'multiline':False]['text':' Step 8: Set this.[[started]] and this.[[closeRequested]] to false.','line_number':143,'multiline':False]['text':' These should be false by default, unchanged since step 5.','line_number':144,'multiline':False]['text':' Step 9: Set this.[[strategyHWM]] to','line_number':147,'multiline':False]['text':'         ? ValidateAndNormalizeHighWaterMark(highWaterMark).','line_number':148,'multiline':False]['text':' Step 10: Let autoAllocateChunkSize be','line_number':155,'multiline':False]['text':'          ? GetV(underlyingByteSource, "autoAllocateChunkSize").','line_number':156,'multiline':False]['text':' Step 11: If autoAllocateChunkSize is not undefined,','line_number':164,'multiline':False]['text':' Step a: If ! IsInteger(autoAllocateChunkSize) is false, or if','line_number':166,'multiline':False]['text':'         autoAllocateChunkSize ≤ 0, throw a RangeError exception.','line_number':167,'multiline':False]['text':' Step 12: Set this.[[autoAllocateChunkSize]] to autoAllocateChunkSize.','line_number':175,'multiline':False]['text':' Step 13: Set this.[[pendingPullIntos]] to a new empty List.','line_number':178,'multiline':False]['text':' Step 14: Let controller be this (implicit).','line_number':184,'multiline':False]['text':' Step 15: Let startResult be','line_number':186,'multiline':False]['text':'          ? InvokeOrNoop(underlyingSource, "start", « this »).','line_number':187,'multiline':False]['text':' Step 16: Let startPromise be a promise resolved with startResult:','line_number':194,'multiline':False]['text':' user-defined byte streams','line_number':217,'multiline':False]['text':'*
 * Streams spec, 3.11.3.
 * new ReadableByteStreamController ( stream, underlyingByteSource,
 *                                    highWaterMark )
 ','line_number':219,'multiline':True]['text':' Step 1: Throw a TypeError exception.','line_number':226,'multiline':False]['text':' Disconnect the source from a controller without calling finalize() on it,','line_number':233,'multiline':False]['text':' unless this class is reset(). This ensures that finalize() will not be called','line_number':234,'multiline':False]['text':' on the source if setting up the controller fails.','line_number':235,'multiline':False]['text':' finalizeSource ','line_number':246,'multiline':True]['text':'*
 * Version of SetUpReadableByteStreamController that's specialized for handling
 * external, embedding-provided, underlying sources.
 ','line_number':253,'multiline':True]['text':' Done elsewhere in the standard: Create the controller object.','line_number':260,'multiline':False]['text':' Step 1: Assert: stream.[[readableStreamController]] is undefined.','line_number':269,'multiline':False]['text':' Step 2: If autoAllocateChunkSize is not undefined, [...]','line_number':272,'multiline':False]['text':' (It's treated as undefined.)','line_number':273,'multiline':False]['text':' Step 3: Set controller.[[controlledReadableByteStream]] to stream.','line_number':275,'multiline':False]['text':' Step 4: Set controller.[[pullAgain]] and controller.[[pulling]] to false.','line_number':278,'multiline':False]['text':' Step 5: Perform','line_number':283,'multiline':False]['text':'         ! ReadableByteStreamControllerClearPendingPullIntos(controller).','line_number':284,'multiline':False]['text':' Omitted. This step is apparently redundant; see','line_number':285,'multiline':False]['text':' <https://github.com/whatwg/streams/issues/975>.','line_number':286,'multiline':False]['text':' Step 6: Perform ! ResetQueue(this).','line_number':288,'multiline':False]['text':' Step 7: Set controller.[[closeRequested]] and controller.[[started]] to','line_number':291,'multiline':False]['text':'         false (implicit).','line_number':292,'multiline':False]['text':' Step 8: Set controller.[[strategyHWM]] to','line_number':296,'multiline':False]['text':'         ? ValidateAndNormalizeHighWaterMark(highWaterMark).','line_number':297,'multiline':False]['text':' Step 9: Set controller.[[pullAlgorithm]] to pullAlgorithm.','line_number':300,'multiline':False]['text':' Step 10: Set controller.[[cancelAlgorithm]] to cancelAlgorithm.','line_number':301,'multiline':False]['text':' (These algorithms are given by source's virtual methods.)','line_number':302,'multiline':False]['text':' Step 11: Set controller.[[autoAllocateChunkSize]] to','line_number':305,'multiline':False]['text':'          autoAllocateChunkSize (implicit).','line_number':306,'multiline':False]['text':' Step 12: Set this.[[pendingPullIntos]] to a new empty List.','line_number':309,'multiline':False]['text':' Step 13: Set stream.[[readableStreamController]] to controller.','line_number':316,'multiline':False]['text':' Step 14: Let startResult be the result of performing startAlgorithm.','line_number':319,'multiline':False]['text':' (For external sources, this algorithm does nothing and returns undefined.)','line_number':320,'multiline':False]['text':' Step 15: Let startPromise be a promise resolved with startResult.','line_number':321,'multiline':False]['text':' Step 16: Upon fulfillment of startPromise, [...]','line_number':327,'multiline':False]['text':' Step 17: Upon rejection of startPromise with reason r, [...]','line_number':328,'multiline':False]['text':' addProperty','line_number':372,'multiline':False]['text':' delProperty','line_number':373,'multiline':False]['text':' enumerate','line_number':374,'multiline':False]['text':' newEnumerate','line_number':375,'multiline':False]['text':' resolve','line_number':376,'multiline':False]['text':' mayResolve','line_number':377,'multiline':False]['text':' finalize','line_number':378,'multiline':False]['text':' call','line_number':379,'multiline':False]['text':' hasInstance','line_number':380,'multiline':False]['text':' construct','line_number':381,'multiline':False]['text':' trace','line_number':382,'multiline':False]['text':' Streams spec, 3.11.5.1. [[CancelSteps]] ()','line_number':390,'multiline':False]['text':' Unified with 3.9.5.1 above.','line_number':391,'multiline':False]['text':'*
 * Streams spec, 3.11.5.2. [[PullSteps]] ( forAuthorCode )
 ','line_number':396,'multiline':True]['text':' Step 1: Let stream be this.[[controlledReadableByteStream]].','line_number':401,'multiline':False]['text':' Step 2: Assert: ! ReadableStreamHasDefaultReader(stream) is true.','line_number':404,'multiline':False]['text':' Step 3: If this.[[queueTotalSize]] > 0,','line_number':414,'multiline':False]['text':' Step 3.a: Assert: ! ReadableStreamGetNumReadRequests(_stream_) is 0.','line_number':417,'multiline':False]['text':' disable user-defined byte streams','line_number':424,'multiline':False]['text':' user-defined byte streams','line_number':426,'multiline':False]['text':' disable user-defined byte streams','line_number':451,'multiline':False]['text':' Step 3.b: Let entry be the first element of this.[[queue]].','line_number':453,'multiline':False]['text':' Step 3.c: Remove entry from this.[[queue]], shifting all other','line_number':454,'multiline':False]['text':'           elements downward (so that the second becomes the','line_number':455,'multiline':False]['text':'           first, and so on).','line_number':456,'multiline':False]['text':' Step 3.f: Let view be ! Construct(%Uint8Array%,','line_number':467,'multiline':False]['text':'                                   « entry.[[buffer]],','line_number':468,'multiline':False]['text':'                                     entry.[[byteOffset]],','line_number':469,'multiline':False]['text':'                                     entry.[[byteLength]] »).','line_number':470,'multiline':False]['text':' (reordered)','line_number':471,'multiline':False]['text':' user-defined byte streams','line_number':483,'multiline':False]['text':' Step 3.d: Set this.[[queueTotalSize]] to','line_number':485,'multiline':False]['text':'           this.[[queueTotalSize]] − entry.[[byteLength]].','line_number':486,'multiline':False]['text':' (reordered)','line_number':487,'multiline':False]['text':' Step 3.e: Perform ! ReadableByteStreamControllerHandleQueueDrain(this).','line_number':490,'multiline':False]['text':' (reordered)','line_number':491,'multiline':False]['text':' Step 3.g: Return a promise resolved with','line_number':497,'multiline':False]['text':'           ! ReadableStreamCreateReadResult(view, false, forAuthorCode).','line_number':498,'multiline':False]['text':' Step 4: Let autoAllocateChunkSize be this.[[autoAllocateChunkSize]].','line_number':516,'multiline':False]['text':' Step 5: If autoAllocateChunkSize is not undefined,','line_number':519,'multiline':False]['text':' Step 5.a: Let buffer be','line_number':523,'multiline':False]['text':'           Construct(%ArrayBuffer%, « autoAllocateChunkSize »).','line_number':524,'multiline':False]['text':' Step 5.b: If buffer is an abrupt completion,','line_number':527,'multiline':False]['text':'           return a promise rejected with buffer.[[Value]].','line_number':528,'multiline':False]['text':' Step 5.c: Let pullIntoDescriptor be','line_number':535,'multiline':False]['text':'           Record {[[buffer]]: buffer.[[Value]],','line_number':536,'multiline':False]['text':'                   [[byteOffset]]: 0,','line_number':537,'multiline':False]['text':'                   [[byteLength]]: autoAllocateChunkSize,','line_number':538,'multiline':False]['text':'                   [[bytesFilled]]: 0,','line_number':539,'multiline':False]['text':'                   [[elementSize]]: 1,','line_number':540,'multiline':False]['text':'                   [[ctor]]: %Uint8Array%,','line_number':541,'multiline':False]['text':'                   [[readerType]]: `"default"`}.','line_number':542,'multiline':False]['text':' Step 5.d: Append pullIntoDescriptor as the last element of','line_number':550,'multiline':False]['text':'           this.[[pendingPullIntos]].','line_number':551,'multiline':False]['text':' Step 6: Let promise be ! ReadableStreamAddReadRequest(stream,','line_number':560,'multiline':False]['text':'                                                       forAuthorCode).','line_number':561,'multiline':False]['text':' Step 7: Perform ! ReadableByteStreamControllerCallPullIfNeeded(this).','line_number':568,'multiline':False]['text':' Step 8: Return promise.','line_number':573,'multiline':False]['text':'*
 * Unified implementation of ReadableStream controllers' [[PullSteps]] internal
 * methods.
 * Streams spec, 3.9.5.2. [[PullSteps]] ( forAuthorCode )
 * and
 * Streams spec, 3.11.5.2. [[PullSteps]] ( forAuthorCode )
 ','line_number':577,'multiline':True]['text':'** 3.13. Readable stream BYOB controller abstract operations *************','line_number':598,'multiline':True]['text':' Streams spec, 3.13.1. IsReadableStreamBYOBRequest ( x )','line_number':600,'multiline':False]['text':' Implemented via is<ReadableStreamBYOBRequest>()','line_number':601,'multiline':False]['text':' Streams spec, 3.13.2. IsReadableByteStreamController ( x )','line_number':603,'multiline':False]['text':' Implemented via is<ReadableByteStreamController>()','line_number':604,'multiline':False]['text':' Streams spec, 3.13.3.','line_number':606,'multiline':False]['text':'      ReadableByteStreamControllerCallPullIfNeeded ( controller )','line_number':607,'multiline':False]['text':' Unified with 3.9.2 above.','line_number':608,'multiline':False]['text':'*
 * Streams spec, 3.13.5.
 *      ReadableByteStreamControllerClearPendingPullIntos ( controller )
 ','line_number':613,'multiline':True]['text':' Step 1: Perform','line_number':619,'multiline':False]['text':'         ! ReadableByteStreamControllerInvalidateBYOBRequest(controller).','line_number':620,'multiline':False]['text':' Step 2: Set controller.[[pendingPullIntos]] to a new empty List.','line_number':626,'multiline':False]['text':'*
 * Streams spec, 3.13.6. ReadableByteStreamControllerClose ( controller )
 ','line_number':632,'multiline':True]['text':' Step 1: Let stream be controller.[[controlledReadableByteStream]].','line_number':637,'multiline':False]['text':' Step 2: Assert: controller.[[closeRequested]] is false.','line_number':640,'multiline':False]['text':' Step 3: Assert: stream.[[state]] is "readable".','line_number':643,'multiline':False]['text':' Step 4: If controller.[[queueTotalSize]] > 0,','line_number':646,'multiline':False]['text':' Step a: Set controller.[[closeRequested]] to true.','line_number':648,'multiline':False]['text':' Step b: Return.','line_number':651,'multiline':False]['text':' Step 5: If controller.[[pendingPullIntos]] is not empty,','line_number':655,'multiline':False]['text':' Step a: Let firstPendingPullInto be the first element of','line_number':659,'multiline':False]['text':'         controller.[[pendingPullIntos]].','line_number':660,'multiline':False]['text':' Step b: If firstPendingPullInto.[[bytesFilled]] > 0,','line_number':668,'multiline':False]['text':' Step i: Let e be a new TypeError exception.','line_number':670,'multiline':False]['text':' Uncatchable error. Die immediately without erroring the','line_number':678,'multiline':False]['text':' stream.','line_number':679,'multiline':False]['text':' Step ii: Perform ! ReadableByteStreamControllerError(controller, e).','line_number':683,'multiline':False]['text':' Step iii: Throw e.','line_number':688,'multiline':False]['text':' Step 6: Perform ! ReadableByteStreamControllerClearAlgorithms(controller).','line_number':694,'multiline':False]['text':' Step 7: Perform ! ReadableStreamClose(stream).','line_number':697,'multiline':False]['text':' Streams spec, 3.13.11. ReadableByteStreamControllerError ( controller, e )','line_number':701,'multiline':False]['text':' Unified with 3.10.7 above.','line_number':702,'multiline':False]['text':' Streams spec 3.13.14.','line_number':704,'multiline':False]['text':'      ReadableByteStreamControllerGetDesiredSize ( controller )','line_number':705,'multiline':False]['text':' Unified with 3.10.8 above.','line_number':706,'multiline':False]['text':'*
 * Streams spec, 3.13.15.
 *      ReadableByteStreamControllerHandleQueueDrain ( controller )
 ','line_number':708,'multiline':True]['text':' Step 1: Assert: controller.[[controlledReadableStream]].[[state]]','line_number':716,'multiline':False]['text':'                 is "readable".','line_number':717,'multiline':False]['text':' Step 2: If controller.[[queueTotalSize]] is 0 and','line_number':721,'multiline':False]['text':'         controller.[[closeRequested]] is true,','line_number':722,'multiline':False]['text':' Step a: Perform','line_number':725,'multiline':False]['text':'         ! ReadableByteStreamControllerClearAlgorithms(controller).','line_number':726,'multiline':False]['text':' Step b: Perform','line_number':729,'multiline':False]['text':'         ! ReadableStreamClose(controller.[[controlledReadableStream]]).','line_number':730,'multiline':False]['text':' Step 3: Otherwise,','line_number':734,'multiline':False]['text':' Step a: Perform ! ReadableByteStreamControllerCallPullIfNeeded(controller).','line_number':735,'multiline':False]['text':'*
 * Streams spec 3.13.16.
 *      ReadableByteStreamControllerInvalidateBYOBRequest ( controller )
 ','line_number':745,'multiline':True]['text':' Step 1: If controller.[[byobRequest]] is undefined, return.','line_number':751,'multiline':False]['text':' Step 2: Set controller.[[byobRequest]]','line_number':763,'multiline':False]['text':'                       .[[associatedReadableByteStreamController]]','line_number':764,'multiline':False]['text':'         to undefined.','line_number':765,'multiline':False]['text':' Step 3: Set controller.[[byobRequest]].[[view]] to undefined.','line_number':769,'multiline':False]['text':' Step 4: Set controller.[[byobRequest]] to undefined.','line_number':772,'multiline':False]['text':' Streams spec, 3.13.25.','line_number':778,'multiline':False]['text':'      ReadableByteStreamControllerShouldCallPull ( controller )','line_number':779,'multiline':False]['text':' Unified with 3.10.3 above.','line_number':780,'multiline':False]