['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 2007-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  unisetspan.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2007mar01
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':'
 * List of offsets from the current position from where to try matching
 * a code point or a string.
 * Store offsets rather than indexes to simplify the code and use the same list
 * for both increments (in span()) and decrements (in spanBack()).
 *
 * Assumption: The maximum offset is limited, and the offsets that are stored
 * at any one time are relatively dense, that is, there are normally no gaps of
 * hundreds or thousands of offset values.
 *
 * The implementation uses a circular buffer of byte flags,
 * each indicating whether the corresponding offset is in the list.
 * This avoids inserting into a sorted list of offsets (or absolute indexes) and
 * physically moving part of the list.
 *
 * Note: In principle, the caller should setMaxLength() to the maximum of the
 * max string length and U16_LENGTH/U8_LENGTH to account for
 * "long" single code points.
 * However, this implementation uses at least a staticList with more than
 * U8_LENGTH entries anyway.
 *
 * Note: If maxLength were guaranteed to be no more than 32 or 64,
 * the list could be stored as bit flags in a single integer.
 * Rather than handling a circular buffer with a start list index,
 * the integer would simply be shifted when lower offsets are removed.
 * UnicodeSet does not have a limit on the lengths of strings.
 ','line_number':30,'multiline':True]['text':' Only ever stack-allocated, does not need to inherit UMemory.','line_number':57,'multiline':False]['text':' Call exactly once if the list is to be used.','line_number':67,'multiline':False]['text':' Reduce all stored offsets by delta, used when the current position','line_number':90,'multiline':False]['text':' moves by delta.','line_number':91,'multiline':False]['text':' There must not be any offsets lower than delta.','line_number':92,'multiline':False]['text':' If there is an offset equal to delta, it is removed.','line_number':93,'multiline':False]['text':' delta=[1..maxLength]','line_number':94,'multiline':False]['text':' Add an offset. The list must not contain it yet.','line_number':107,'multiline':False]['text':' offset=[1..maxLength]','line_number':108,'multiline':False]['text':' offset=[1..maxLength]','line_number':118,'multiline':False]['text':' Find the lowest stored offset from a non-empty list, remove it,','line_number':127,'multiline':False]['text':' and reduce all other offsets by this minimum.','line_number':128,'multiline':False]['text':' Returns [1..maxLength].','line_number':129,'multiline':False]['text':' Look for the next offset in list[start+1..capacity-1].','line_number':131,'multiline':False]['text':' i==capacity','line_number':142,'multiline':False]['text':' Wrap around and look for the next offset in list[0..start].','line_number':144,'multiline':False]['text':' Since the list is not empty, there will be one.','line_number':145,'multiline':False]['text':' Get the number of UTF-8 bytes for a UTF-16 (sub)string.','line_number':166,'multiline':False]['text':' The string contains an unpaired surrogate.','line_number':175,'multiline':False]['text':' Ignore this string.','line_number':176,'multiline':False]['text':' Append the UTF-8 version of the string to t and return the appended UTF-8 length.','line_number':181,'multiline':False]['text':' The string contains an unpaired surrogate.','line_number':190,'multiline':False]['text':' Ignore this string.','line_number':191,'multiline':False]['text':' 0xfe==UnicodeSetStringSpan::LONG_SPAN','line_number':198,'multiline':False]['text':' Construct for all variants of span(), or only for any one variant.','line_number':202,'multiline':False]['text':' Initialize as little as possible, for single use.','line_number':203,'multiline':False]['text':' Default to the same sets.','line_number':214,'multiline':False]['text':' addToSpanNotSet() will create a separate set if necessary.','line_number':215,'multiline':False]['text':' Determine if the strings even need to be taken into account at all for span() etc.','line_number':219,'multiline':False]['text':' If any string is relevant, then all strings need to be used for','line_number':220,'multiline':False]['text':' span(longest match) but only the relevant ones for span(while contained).','line_number':221,'multiline':False]['text':' TODO: Possible optimization: Distinguish CONTAINED vs. LONGEST_MATCH','line_number':222,'multiline':False]['text':'   and do not store UTF-8 strings if !thisRelevant and CONTAINED.','line_number':223,'multiline':False]['text':'   (Only store irrelevant UTF-8 strings for LONGEST_MATCH where they are relevant after all.)','line_number':224,'multiline':False]['text':' Also count the lengths of the UTF-8 versions of the strings for memory allocation.','line_number':225,'multiline':False]['text':' skip the empty string','line_number':235,'multiline':False]['text':' Relevant string.','line_number':239,'multiline':False]['text':' Freeze after checking for the need to use strings at all because freezing','line_number':260,'multiline':False]['text':' a set takes some time and memory which are wasted if there are no relevant strings.','line_number':261,'multiline':False]['text':' Allocate a block of meta data.','line_number':270,'multiline':False]['text':' UTF-8 lengths, 4 sets of span lengths, UTF-8 strings.','line_number':273,'multiline':False]['text':' One set of span lengths.','line_number':276,'multiline':False]['text':' UTF-8 lengths and UTF-8 strings.','line_number':278,'multiline':False]['text':' Prevent usage by making needsStringSpanUTF16/8() return FALSE.','line_number':287,'multiline':False]['text':' Out of memory.','line_number':288,'multiline':False]['text':' Store span lengths for all span() variants.','line_number':293,'multiline':False]['text':' Store span lengths for only one span() variant.','line_number':300,'multiline':False]['text':' Set the meta data and pSpanNotSet and write the UTF-8 strings.','line_number':310,'multiline':False]['text':' Count UTF-8 bytes written so far.','line_number':311,'multiline':False]['text':' Relevant string.','line_number':318,'multiline':False]['text':' not CONTAINED, not all, but NOT_CONTAINED ','line_number':328,'multiline':True]['text':' Only store a relevant/irrelevant flag.','line_number':329,'multiline':False]['text':' Irrelevant for UTF-8 because not representable in UTF-8.','line_number':336,'multiline':False]['text':' Relevant for UTF-8.','line_number':338,'multiline':False]['text':' not CONTAINED, not all, but NOT_CONTAINED ','line_number':348,'multiline':True]['text':' Only store a relevant/irrelevant flag.','line_number':349,'multiline':False]['text':' Add string start and end code points to the spanNotSet so that','line_number':354,'multiline':False]['text':' a span(while not contained) stops before any string.','line_number':355,'multiline':False]['text':' Irrelevant string. (Also the empty string.)','line_number':368,'multiline':False]['text':' Only necessary for LONGEST_MATCH.','line_number':370,'multiline':False]['text':' All spanXYZLengths pointers contain the same address.','line_number':383,'multiline':False]['text':' Finish.','line_number':389,'multiline':False]['text':' Copy constructor. Assumes which==ALL for a frozen set.','line_number':395,'multiline':False]['text':' Allocate a block of meta data.','line_number':409,'multiline':False]['text':' UTF-8 lengths, 4 sets of span lengths, UTF-8 strings.','line_number':410,'multiline':False]['text':' Prevent usage by making needsStringSpanUTF16/8() return FALSE.','line_number':418,'multiline':False]['text':' Out of memory.','line_number':419,'multiline':False]['text':' Nothing to do.','line_number':440,'multiline':False]['text':' Out of memory.','line_number':444,'multiline':False]['text':' Compare strings without any argument checks. Requires length>0.','line_number':452,'multiline':False]['text':' Compare 16-bit Unicode strings (which may be malformed UTF-16)','line_number':473,'multiline':False]['text':' at code point boundaries.','line_number':474,'multiline':False]['text':' That is, each edge of a match must not be in the middle of a surrogate pair.','line_number':475,'multiline':False]['text':' Does the set contain the next code point?','line_number':485,'multiline':False]['text':' If so, return its length; otherwise return its negative length.','line_number':486,'multiline':False]['text':' Take advantage of non-ASCII fastpaths in U8_NEXT_OR_FFFD().','line_number':511,'multiline':False]['text':'
 * Note: In span() when spanLength==0 (after a string match, or at the beginning
 * after an empty code point span) and in spanNot() and spanNotUTF8(),
 * string matching could use a binary search
 * because all string matches are done from the same start index.
 *
 * For UTF-8, this would require a comparison function that returns UTF-16 order.
 *
 * This optimization should not be necessary for normal UnicodeSets because
 * most sets have no strings, and most sets with strings have
 * very few very short strings.
 * For cases with many strings, it might be better to use a different API
 * and implementation with a DFA (state machine).
 ','line_number':529,'multiline':True]['text':'
 * Algorithm for span(USET_SPAN_CONTAINED)
 *
 * Theoretical algorithm:
 * - Iterate through the string, and at each code point boundary:
 *   + If the code point there is in the set, then remember to continue after it.
 *   + If a set string matches at the current position, then remember to continue after it.
 *   + Either recursively span for each code point or string match,
 *     or recursively span for all but the shortest one and
 *     iteratively continue the span with the shortest local match.
 *   + Remember the longest recursive span (the farthest end point).
 *   + If there is no match at the current position, neither for the code point there
 *     nor for any set string, then stop and return the longest recursive span length.
 *
 * Optimized implementation:
 *
 * (We assume that most sets will have very few very short strings.
 * A span using a string-less set is extremely fast.)
 *
 * Create and cache a spanSet which contains all of the single code points
 * of the original set but none of its strings.
 *
 * - Start with spanLength=spanSet.span(USET_SPAN_CONTAINED).
 * - Loop:
 *   + Try to match each set string at the end of the spanLength.
 *     ~ Set strings that start with set-contained code points must be matched
 *       with a partial overlap because the recursive algorithm would have tried
 *       to match them at every position.
 *     ~ Set strings that entirely consist of set-contained code points
 *       are irrelevant for span(USET_SPAN_CONTAINED) because the
 *       recursive algorithm would continue after them anyway
 *       and find the longest recursive match from their end.
 *     ~ Rather than recursing, note each end point of a set string match.
 *   + If no set string matched after spanSet.span(), then return
 *     with where the spanSet.span() ended.
 *   + If at least one set string matched after spanSet.span(), then
 *     pop the shortest string match end point and continue
 *     the loop, trying to match all set strings from there.
 *   + If at least one more set string matched after a previous string match,
 *     then test if the code point after the previous string match is also
 *     contained in the set.
 *     Continue the loop with the shortest end point of either this code point
 *     or a matching set string.
 *   + If no more set string matched after a previous string match,
 *     then try another spanLength=spanSet.span(USET_SPAN_CONTAINED).
 *     Stop if spanLength==0, otherwise continue the loop.
 *
 * By noting each end point of a set string match,
 * the function visits each string position at most once and finishes
 * in linear time.
 *
 * The recursive algorithm may visit the same string position many times
 * if multiple paths lead to it and finishes in exponential time.
 ','line_number':544,'multiline':True]['text':'
 * Algorithm for span(USET_SPAN_SIMPLE)
 *
 * Theoretical algorithm:
 * - Iterate through the string, and at each code point boundary:
 *   + If the code point there is in the set, then remember to continue after it.
 *   + If a set string matches at the current position, then remember to continue after it.
 *   + Continue from the farthest match position and ignore all others.
 *   + If there is no match at the current position,
 *     then stop and return the current position.
 *
 * Optimized implementation:
 *
 * (Same assumption and spanSet as above.)
 *
 * - Start with spanLength=spanSet.span(USET_SPAN_CONTAINED).
 * - Loop:
 *   + Try to match each set string at the end of the spanLength.
 *     ~ Set strings that start with set-contained code points must be matched
 *       with a partial overlap because the standard algorithm would have tried
 *       to match them earlier.
 *     ~ Set strings that entirely consist of set-contained code points
 *       must be matched with a full overlap because the longest-match algorithm
 *       would hide set string matches that end earlier.
 *       Such set strings need not be matched earlier inside the code point span
 *       because the standard algorithm would then have continued after
 *       the set string match anyway.
 *     ~ Remember the longest set string match (farthest end point) from the earliest
 *       starting point.
 *   + If no set string matched after spanSet.span(), then return
 *     with where the spanSet.span() ended.
 *   + If at least one set string matched, then continue the loop after the
 *     longest match from the earliest position.
 *   + If no more set string matched after a previous string match,
 *     then try another spanLength=spanSet.span(USET_SPAN_CONTAINED).
 *     Stop if spanLength==0, otherwise continue the loop.
 ','line_number':599,'multiline':True]['text':' Consider strings; they may overlap with the span.','line_number':646,'multiline':False]['text':' Use offset list to try all possibilities.','line_number':649,'multiline':False]['text':' Irrelevant string. (Also the empty string.)','line_number':659,'multiline':False]['text':' Try to match this string at pos-overlap..pos.','line_number':666,'multiline':False]['text':' While contained: No point matching fully inside the code point span.','line_number':669,'multiline':False]['text':' Length of the string minus the last code point.','line_number':670,'multiline':False]['text':' Keep overlap+inc==length16.','line_number':675,'multiline':False]['text':' Try to match if the increment is not listed already.','line_number':680,'multiline':False]['text':' Reached the end of the string.','line_number':683,'multiline':False]['text':' USET_SPAN_SIMPLE ','line_number':694,'multiline':True]['text':' For longest match, we do need to try to match even an all-contained string','line_number':698,'multiline':False]['text':' to find the match from the earliest start.','line_number':699,'multiline':False]['text':' skip the empty string','line_number':705,'multiline':False]['text':' Try to match this string at pos-overlap..pos.','line_number':708,'multiline':False]['text':' Longest match: Need to match fully inside the code point span','line_number':711,'multiline':False]['text':' to find the match from the earliest start.','line_number':712,'multiline':False]['text':' Keep overlap+inc==length16.','line_number':717,'multiline':False]['text':' Try to match if the string is longer or starts earlier.','line_number':722,'multiline':False]['text':' redundant overlap==maxOverlap && ','line_number':723,'multiline':True]['text':' Longest match from earliest start.','line_number':726,'multiline':False]['text':' Longest-match algorithm, and there was a string match.','line_number':736,'multiline':False]['text':' Simply continue after it.','line_number':737,'multiline':False]['text':' Reached the end of the string.','line_number':741,'multiline':False]['text':' Match strings from after a string match.','line_number':743,'multiline':False]['text':' Finished trying to match all strings at pos.','line_number':747,'multiline':False]['text':' The position is after an unlimited code point span (spanLength!=0),','line_number':750,'multiline':False]['text':' not after a string match.','line_number':751,'multiline':False]['text':' The only position where spanLength==0 after a span is pos==0.','line_number':752,'multiline':False]['text':' Otherwise, an unlimited code point span is only tried again when no','line_number':753,'multiline':False]['text':' strings match, and if such a non-initial span fails we stop.','line_number':754,'multiline':False]['text':' No strings matched after a span.','line_number':756,'multiline':False]['text':' Match strings from after the next string match.','line_number':758,'multiline':False]['text':' The position is after a string match (or a single code point).','line_number':760,'multiline':False]['text':' No more strings matched after a previous string match.','line_number':762,'multiline':False]['text':' Try another code point span from after the last string match.','line_number':763,'multiline':False]['text':' Reached the end of the string, or','line_number':765,'multiline':False]['text':' neither strings nor span progressed.','line_number':766,'multiline':False]['text':' spanLength>0: Match strings from after a span.','line_number':772,'multiline':False]['text':' Try to match only one code point from after a string match if some','line_number':774,'multiline':False]['text':' string matched beyond it, so that we try all possible positions','line_number':775,'multiline':False]['text':' and don't overshoot.','line_number':776,'multiline':False]['text':' Reached the end of the string.','line_number':780,'multiline':False]['text':' Match strings after this code point.','line_number':782,'multiline':False]['text':' There cannot be any increments below it because UnicodeSet strings','line_number':783,'multiline':False]['text':' contain multiple code points.','line_number':784,'multiline':False]['text':' Match strings from after a single code point.','line_number':789,'multiline':False]['text':' Match strings from after the next string match.','line_number':791,'multiline':False]['text':' Match strings from after a string match.','line_number':797,'multiline':False]['text':' Consider strings; they may overlap with the span.','line_number':811,'multiline':False]['text':' Use offset list to try all possibilities.','line_number':814,'multiline':False]['text':' Irrelevant string. (Also the empty string.)','line_number':827,'multiline':False]['text':' Try to match this string at pos-(length16-overlap)..pos-length16.','line_number':834,'multiline':False]['text':' While contained: No point matching fully inside the code point span.','line_number':837,'multiline':False]['text':' Length of the string minus the first code point.','line_number':840,'multiline':False]['text':' Keep dec+overlap==length16.','line_number':845,'multiline':False]['text':' Try to match if the decrement is not listed already.','line_number':850,'multiline':False]['text':' Reached the start of the string.','line_number':853,'multiline':False]['text':' USET_SPAN_SIMPLE ','line_number':864,'multiline':True]['text':' For longest match, we do need to try to match even an all-contained string','line_number':868,'multiline':False]['text':' to find the match from the latest end.','line_number':869,'multiline':False]['text':' skip the empty string','line_number':875,'multiline':False]['text':' Try to match this string at pos-(length16-overlap)..pos-length16.','line_number':878,'multiline':False]['text':' Longest match: Need to match fully inside the code point span','line_number':881,'multiline':False]['text':' to find the match from the latest end.','line_number':882,'multiline':False]['text':' Keep dec+overlap==length16.','line_number':887,'multiline':False]['text':' Try to match if the string is longer or ends later.','line_number':892,'multiline':False]['text':' redundant overlap==maxOverlap && ','line_number':893,'multiline':True]['text':' Longest match from latest end.','line_number':896,'multiline':False]['text':' Longest-match algorithm, and there was a string match.','line_number':906,'multiline':False]['text':' Simply continue before it.','line_number':907,'multiline':False]['text':' Reached the start of the string.','line_number':910,'multiline':False]['text':' Match strings from before a string match.','line_number':912,'multiline':False]['text':' Finished trying to match all strings at pos.','line_number':916,'multiline':False]['text':' The position is before an unlimited code point span (spanLength!=0),','line_number':919,'multiline':False]['text':' not before a string match.','line_number':920,'multiline':False]['text':' The only position where spanLength==0 before a span is pos==length.','line_number':921,'multiline':False]['text':' Otherwise, an unlimited code point span is only tried again when no','line_number':922,'multiline':False]['text':' strings match, and if such a non-initial span fails we stop.','line_number':923,'multiline':False]['text':' No strings matched before a span.','line_number':925,'multiline':False]['text':' Match strings from before the next string match.','line_number':927,'multiline':False]['text':' The position is before a string match (or a single code point).','line_number':929,'multiline':False]['text':' No more strings matched before a previous string match.','line_number':931,'multiline':False]['text':' Try another code point span from before the last string match.','line_number':932,'multiline':False]['text':' Reached the start of the string, or','line_number':936,'multiline':False]['text':' neither strings nor span progressed.','line_number':937,'multiline':False]['text':' spanLength>0: Match strings from before a span.','line_number':941,'multiline':False]['text':' Try to match only one code point from before a string match if some','line_number':943,'multiline':False]['text':' string matched beyond it, so that we try all possible positions','line_number':944,'multiline':False]['text':' and don't overshoot.','line_number':945,'multiline':False]['text':' Reached the start of the string.','line_number':949,'multiline':False]['text':' Match strings before this code point.','line_number':951,'multiline':False]['text':' There cannot be any decrements below it because UnicodeSet strings','line_number':952,'multiline':False]['text':' contain multiple code points.','line_number':953,'multiline':False]['text':' Match strings from before a single code point.','line_number':957,'multiline':False]['text':' Match strings from before the next string match.','line_number':959,'multiline':False]['text':' Match strings from before a string match.','line_number':963,'multiline':False]['text':' Consider strings; they may overlap with the span.','line_number':976,'multiline':False]['text':' Use offset list to try all possibilities.','line_number':979,'multiline':False]['text':' String not representable in UTF-8.','line_number':995,'multiline':False]['text':' Irrelevant string.','line_number':1000,'multiline':False]['text':' Try to match this string at pos-overlap..pos.','line_number':1003,'multiline':False]['text':' While contained: No point matching fully inside the code point span.','line_number':1006,'multiline':False]['text':' Length of the string minus the last code point.','line_number':1007,'multiline':False]['text':' Keep overlap+inc==length8.','line_number':1012,'multiline':False]['text':' Try to match if the increment is not listed already.','line_number':1017,'multiline':False]['text':' Match at code point boundaries. (The UTF-8 strings were converted','line_number':1018,'multiline':False]['text':' from UTF-16 and are guaranteed to be well-formed.)','line_number':1019,'multiline':False]['text':' Reached the end of the string.','line_number':1024,'multiline':False]['text':' USET_SPAN_SIMPLE ','line_number':1036,'multiline':True]['text':' String not representable in UTF-8.','line_number':1041,'multiline':False]['text':' For longest match, we do need to try to match even an all-contained string','line_number':1044,'multiline':False]['text':' to find the match from the earliest start.','line_number':1045,'multiline':False]['text':' Try to match this string at pos-overlap..pos.','line_number':1047,'multiline':False]['text':' Longest match: Need to match fully inside the code point span','line_number':1050,'multiline':False]['text':' to find the match from the earliest start.','line_number':1051,'multiline':False]['text':' Keep overlap+inc==length8.','line_number':1056,'multiline':False]['text':' Try to match if the string is longer or starts earlier.','line_number':1061,'multiline':False]['text':' Match at code point boundaries. (The UTF-8 strings were converted','line_number':1062,'multiline':False]['text':' from UTF-16 and are guaranteed to be well-formed.)','line_number':1063,'multiline':False]['text':' redundant overlap==maxOverlap && ','line_number':1066,'multiline':True]['text':' Longest match from earliest start.','line_number':1068,'multiline':False]['text':' Longest-match algorithm, and there was a string match.','line_number':1079,'multiline':False]['text':' Simply continue after it.','line_number':1080,'multiline':False]['text':' Reached the end of the string.','line_number':1084,'multiline':False]['text':' Match strings from after a string match.','line_number':1086,'multiline':False]['text':' Finished trying to match all strings at pos.','line_number':1090,'multiline':False]['text':' The position is after an unlimited code point span (spanLength!=0),','line_number':1093,'multiline':False]['text':' not after a string match.','line_number':1094,'multiline':False]['text':' The only position where spanLength==0 after a span is pos==0.','line_number':1095,'multiline':False]['text':' Otherwise, an unlimited code point span is only tried again when no','line_number':1096,'multiline':False]['text':' strings match, and if such a non-initial span fails we stop.','line_number':1097,'multiline':False]['text':' No strings matched after a span.','line_number':1099,'multiline':False]['text':' Match strings from after the next string match.','line_number':1101,'multiline':False]['text':' The position is after a string match (or a single code point).','line_number':1103,'multiline':False]['text':' No more strings matched after a previous string match.','line_number':1105,'multiline':False]['text':' Try another code point span from after the last string match.','line_number':1106,'multiline':False]['text':' Reached the end of the string, or','line_number':1108,'multiline':False]['text':' neither strings nor span progressed.','line_number':1109,'multiline':False]['text':' spanLength>0: Match strings from after a span.','line_number':1115,'multiline':False]['text':' Try to match only one code point from after a string match if some','line_number':1117,'multiline':False]['text':' string matched beyond it, so that we try all possible positions','line_number':1118,'multiline':False]['text':' and don't overshoot.','line_number':1119,'multiline':False]['text':' Reached the end of the string.','line_number':1123,'multiline':False]['text':' Match strings after this code point.','line_number':1125,'multiline':False]['text':' There cannot be any increments below it because UnicodeSet strings','line_number':1126,'multiline':False]['text':' contain multiple code points.','line_number':1127,'multiline':False]['text':' Match strings from after a single code point.','line_number':1132,'multiline':False]['text':' Match strings from after the next string match.','line_number':1134,'multiline':False]['text':' Match strings from after a string match.','line_number':1140,'multiline':False]['text':' Consider strings; they may overlap with the span.','line_number':1154,'multiline':False]['text':' Use offset list to try all possibilities.','line_number':1157,'multiline':False]['text':' String not representable in UTF-8.','line_number':1172,'multiline':False]['text':' Irrelevant string.','line_number':1177,'multiline':False]['text':' Try to match this string at pos-(length8-overlap)..pos-length8.','line_number':1180,'multiline':False]['text':' While contained: No point matching fully inside the code point span.','line_number':1183,'multiline':False]['text':' Length of the string minus the first code point.','line_number':1186,'multiline':False]['text':' Keep dec+overlap==length8.','line_number':1191,'multiline':False]['text':' Try to match if the decrement is not listed already.','line_number':1196,'multiline':False]['text':' Match at code point boundaries. (The UTF-8 strings were converted','line_number':1197,'multiline':False]['text':' from UTF-16 and are guaranteed to be well-formed.)','line_number':1198,'multiline':False]['text':' Reached the start of the string.','line_number':1204,'multiline':False]['text':' USET_SPAN_SIMPLE ','line_number':1216,'multiline':True]['text':' String not representable in UTF-8.','line_number':1221,'multiline':False]['text':' For longest match, we do need to try to match even an all-contained string','line_number':1224,'multiline':False]['text':' to find the match from the latest end.','line_number':1225,'multiline':False]['text':' Try to match this string at pos-(length8-overlap)..pos-length8.','line_number':1227,'multiline':False]['text':' Longest match: Need to match fully inside the code point span','line_number':1230,'multiline':False]['text':' to find the match from the latest end.','line_number':1231,'multiline':False]['text':' Keep dec+overlap==length8.','line_number':1236,'multiline':False]['text':' Try to match if the string is longer or ends later.','line_number':1241,'multiline':False]['text':' Match at code point boundaries. (The UTF-8 strings were converted','line_number':1242,'multiline':False]['text':' from UTF-16 and are guaranteed to be well-formed.)','line_number':1243,'multiline':False]['text':' redundant overlap==maxOverlap && ','line_number':1245,'multiline':True]['text':' Longest match from latest end.','line_number':1248,'multiline':False]['text':' Longest-match algorithm, and there was a string match.','line_number':1259,'multiline':False]['text':' Simply continue before it.','line_number':1260,'multiline':False]['text':' Reached the start of the string.','line_number':1263,'multiline':False]['text':' Match strings from before a string match.','line_number':1265,'multiline':False]['text':' Finished trying to match all strings at pos.','line_number':1269,'multiline':False]['text':' The position is before an unlimited code point span (spanLength!=0),','line_number':1272,'multiline':False]['text':' not before a string match.','line_number':1273,'multiline':False]['text':' The only position where spanLength==0 before a span is pos==length.','line_number':1274,'multiline':False]['text':' Otherwise, an unlimited code point span is only tried again when no','line_number':1275,'multiline':False]['text':' strings match, and if such a non-initial span fails we stop.','line_number':1276,'multiline':False]['text':' No strings matched before a span.','line_number':1278,'multiline':False]['text':' Match strings from before the next string match.','line_number':1280,'multiline':False]['text':' The position is before a string match (or a single code point).','line_number':1282,'multiline':False]['text':' No more strings matched before a previous string match.','line_number':1284,'multiline':False]['text':' Try another code point span from before the last string match.','line_number':1285,'multiline':False]['text':' Reached the start of the string, or','line_number':1289,'multiline':False]['text':' neither strings nor span progressed.','line_number':1290,'multiline':False]['text':' spanLength>0: Match strings from before a span.','line_number':1294,'multiline':False]['text':' Try to match only one code point from before a string match if some','line_number':1296,'multiline':False]['text':' string matched beyond it, so that we try all possible positions','line_number':1297,'multiline':False]['text':' and don't overshoot.','line_number':1298,'multiline':False]['text':' Reached the start of the string.','line_number':1302,'multiline':False]['text':' Match strings before this code point.','line_number':1304,'multiline':False]['text':' There cannot be any decrements below it because UnicodeSet strings','line_number':1305,'multiline':False]['text':' contain multiple code points.','line_number':1306,'multiline':False]['text':' Match strings from before a single code point.','line_number':1310,'multiline':False]['text':' Match strings from before the next string match.','line_number':1312,'multiline':False]['text':' Match strings from before a string match.','line_number':1316,'multiline':False]['text':'
 * Algorithm for spanNot()==span(USET_SPAN_NOT_CONTAINED)
 *
 * Theoretical algorithm:
 * - Iterate through the string, and at each code point boundary:
 *   + If the code point there is in the set, then return with the current position.
 *   + If a set string matches at the current position, then return with the current position.
 *
 * Optimized implementation:
 *
 * (Same assumption as for span() above.)
 *
 * Create and cache a spanNotSet which contains all of the single code points
 * of the original set but none of its strings.
 * For each set string add its initial code point to the spanNotSet.
 * (Also add its final code point for spanNotBack().)
 *
 * - Loop:
 *   + Do spanLength=spanNotSet.span(USET_SPAN_NOT_CONTAINED).
 *   + If the current code point is in the original set, then
 *     return the current position.
 *   + If any set string matches at the current position, then
 *     return the current position.
 *   + If there is no match at the current position, neither for the code point there
 *     nor for any set string, then skip this code point and continue the loop.
 *     This happens for set-string-initial code points that were added to spanNotSet
 *     when there is not actually a match for such a set string.
 ','line_number':1320,'multiline':True]['text':' Span until we find a code point from the set,','line_number':1353,'multiline':False]['text':' or a code point that starts or ends some string.','line_number':1354,'multiline':False]['text':' Reached the end of the string.','line_number':1357,'multiline':False]['text':' Check whether the current code point is in the original set,','line_number':1362,'multiline':False]['text':' without the string starts and ends.','line_number':1363,'multiline':False]['text':' There is a set element at pos.','line_number':1366,'multiline':False]['text':' Try to match the strings at pos.','line_number':1369,'multiline':False]['text':' Irrelevant string. (Also the empty string.)','line_number':1372,'multiline':False]['text':' There is a set element at pos.','line_number':1379,'multiline':False]['text':' The span(while not contained) ended on a string start/end which is','line_number':1383,'multiline':False]['text':' not in the original set. Skip this code point and continue.','line_number':1384,'multiline':False]['text':' cpLength<0','line_number':1385,'multiline':False]['text':' Reached the end of the string.','line_number':1389,'multiline':False]['text':' Span until we find a code point from the set,','line_number':1396,'multiline':False]['text':' or a code point that starts or ends some string.','line_number':1397,'multiline':False]['text':' Reached the start of the string.','line_number':1400,'multiline':False]['text':' Check whether the current code point is in the original set,','line_number':1403,'multiline':False]['text':' without the string starts and ends.','line_number':1404,'multiline':False]['text':' There is a set element at pos.','line_number':1407,'multiline':False]['text':' Try to match the strings at pos.','line_number':1410,'multiline':False]['text':' Use spanLengths rather than a spanBackLengths pointer because','line_number':1412,'multiline':False]['text':' it is easier and we only need to know whether the string is irrelevant','line_number':1413,'multiline':False]['text':' which is the same in either array.','line_number':1414,'multiline':False]['text':' Irrelevant string. (Also the empty string.)','line_number':1416,'multiline':False]['text':' There is a set element at pos.','line_number':1423,'multiline':False]['text':' The span(while not contained) ended on a string start/end which is','line_number':1427,'multiline':False]['text':' not in the original set. Skip this code point and continue.','line_number':1428,'multiline':False]['text':' cpLength<0','line_number':1429,'multiline':False]['text':' Reached the start of the string.','line_number':1432,'multiline':False]['text':' Span until we find a code point from the set,','line_number':1443,'multiline':False]['text':' or a code point that starts or ends some string.','line_number':1444,'multiline':False]['text':' Reached the end of the string.','line_number':1447,'multiline':False]['text':' Check whether the current code point is in the original set,','line_number':1452,'multiline':False]['text':' without the string starts and ends.','line_number':1453,'multiline':False]['text':' There is a set element at pos.','line_number':1456,'multiline':False]['text':' Try to match the strings at pos.','line_number':1459,'multiline':False]['text':' ALL_CP_CONTAINED: Irrelevant string.','line_number':1464,'multiline':False]['text':' There is a set element at pos.','line_number':1466,'multiline':False]['text':' The span(while not contained) ended on a string start/end which is','line_number':1471,'multiline':False]['text':' not in the original set. Skip this code point and continue.','line_number':1472,'multiline':False]['text':' cpLength<0','line_number':1473,'multiline':False]['text':' Reached the end of the string.','line_number':1477,'multiline':False]['text':' Span until we find a code point from the set,','line_number':1488,'multiline':False]['text':' or a code point that starts or ends some string.','line_number':1489,'multiline':False]['text':' Reached the start of the string.','line_number':1492,'multiline':False]['text':' Check whether the current code point is in the original set,','line_number':1495,'multiline':False]['text':' without the string starts and ends.','line_number':1496,'multiline':False]['text':' There is a set element at pos.','line_number':1499,'multiline':False]['text':' Try to match the strings at pos.','line_number':1502,'multiline':False]['text':' ALL_CP_CONTAINED: Irrelevant string.','line_number':1507,'multiline':False]['text':' There is a set element at pos.','line_number':1509,'multiline':False]['text':' The span(while not contained) ended on a string start/end which is','line_number':1514,'multiline':False]['text':' not in the original set. Skip this code point and continue.','line_number':1515,'multiline':False]['text':' cpLength<0','line_number':1516,'multiline':False]['text':' Reached the start of the string.','line_number':1519,'multiline':False]