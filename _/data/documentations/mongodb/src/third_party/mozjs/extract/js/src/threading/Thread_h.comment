['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' namespace detail','line_number':37,'multiline':False]['text':' Execute the given functor concurrent with the currently executing instruction','line_number':39,'multiline':False]['text':' stream and within the current address space. Use with care.','line_number':40,'multiline':False]['text':' Provides optional parameters to a Thread.','line_number':43,'multiline':False]['text':' Create a Thread in an initially unjoinable state. A thread of execution can','line_number':57,'multiline':False]['text':' be created for this Thread by calling |init|. Some of the thread's','line_number':58,'multiline':False]['text':' properties may be controlled by passing options to this constructor.','line_number':59,'multiline':False]['text':' SFINAE to make sure we don't try and treat functors for the other','line_number':61,'multiline':False]['text':' constructor as an Options and vice versa.','line_number':62,'multiline':False]['text':' Start a thread of execution at functor |f| with parameters |args|. This','line_number':71,'multiline':False]['text':' method will return false if thread creation fails. This Thread must not','line_number':72,'multiline':False]['text':' already have been created. Note that the arguments must be either POD or','line_number':73,'multiline':False]['text':' rvalue references (std::move). Attempting to pass a reference will','line_number':74,'multiline':False]['text':' result in the value being copied, which may not be the intended behavior.','line_number':75,'multiline':False]['text':' See the comment below on ThreadTrampoline::args for an explanation.','line_number':76,'multiline':False]['text':' We hold this lock while create() sets the thread id.','line_number':87,'multiline':False]['text':' The thread must be joined or detached before destruction.','line_number':92,'multiline':False]['text':' Move the thread into the detached state without blocking. In the detatched','line_number':95,'multiline':False]['text':' state, the thread continues to run until it exits, but cannot be joined.','line_number':96,'multiline':False]['text':' After this method returns, this Thread no longer represents a thread of','line_number':97,'multiline':False]['text':' execution. When the thread exits, its resources will be cleaned up by the','line_number':98,'multiline':False]['text':' system. At process exit, if the thread is still running, the thread's TLS','line_number':99,'multiline':False]['text':' storage will be destructed, but the thread stack will *not* be unrolled.','line_number':100,'multiline':False]['text':' Block the current thread until this Thread returns from the functor it was','line_number':103,'multiline':False]['text':' created with. The thread's resources will be cleaned up before this','line_number':104,'multiline':False]['text':' function returns. After this method returns, this Thread no longer','line_number':105,'multiline':False]['text':' represents a thread of execution.','line_number':106,'multiline':False]['text':' Return true if this thread has not yet been joined or detached. If this','line_number':109,'multiline':False]['text':' method returns false, this Thread does not have an associated thread of','line_number':110,'multiline':False]['text':' execution, for example, if it has been previously moved or joined.','line_number':111,'multiline':False]['text':' Returns the id of this thread if this represents a thread of execution or','line_number':114,'multiline':False]['text':' the default constructed Id() if not. The thread ID is guaranteed to','line_number':115,'multiline':False]['text':' uniquely identify a thread and can be compared with the == operator.','line_number':116,'multiline':False]['text':' Allow threads to be moved so that they can be stored in containers.','line_number':119,'multiline':False]['text':' Disallow copy as that's not sensible for unique resources.','line_number':124,'multiline':False]['text':' Provide a process global ID to each thread.','line_number':128,'multiline':False]['text':' Overridable thread creation options.','line_number':131,'multiline':False]['text':' Dispatch to per-platform implementation of thread creation.','line_number':134,'multiline':False]['text':' An internal version of JS_IsInitialized() that returns whether SpiderMonkey','line_number':138,'multiline':False]['text':' is currently initialized or is in the process of being initialized.','line_number':139,'multiline':False]['text':' Set the current thread name. Note that setting the thread name may not be','line_number':149,'multiline':False]['text':' available on all platforms; on these platforms setName() will simply do','line_number':150,'multiline':False]['text':' nothing.','line_number':151,'multiline':False]['text':' Get the current thread name. As with SetName, not available on all','line_number':154,'multiline':False]['text':' platforms. On these platforms getName() will give back an empty string (by','line_number':155,'multiline':False]['text':' storing NUL in nameBuffer[0]). 'len' is the bytes available to be written in','line_number':156,'multiline':False]['text':' 'nameBuffer', including the terminating NUL.','line_number':157,'multiline':False]['text':' Causes the current thread to sleep until the','line_number':160,'multiline':False]['text':' number of real-time milliseconds specified have elapsed.','line_number':161,'multiline':False]['text':' namespace ThisThread','line_number':164,'multiline':False]['text':' Platform thread APIs allow passing a single void* argument to the target','line_number':168,'multiline':False]['text':' thread. This class is responsible for safely ferrying the arg pack and','line_number':169,'multiline':False]['text':' functor across that void* membrane and running it in the other thread.','line_number':170,'multiline':False]['text':' The functor to call.','line_number':173,'multiline':False]['text':' A std::decay copy of the arguments, as specified by std::thread. Using an','line_number':176,'multiline':False]['text':' rvalue reference for the arguments to Thread and ThreadTrampoline gives us','line_number':177,'multiline':False]['text':' move semantics for large structures, allowing us to quickly and easily pass','line_number':178,'multiline':False]['text':' enormous amounts of data to a new thread. Unfortunately, there is a','line_number':179,'multiline':False]['text':' downside: rvalue references becomes lvalue references when used with POD','line_number':180,'multiline':False]['text':' types. This becomes dangerous when attempting to pass POD stored on the','line_number':181,'multiline':False]['text':' stack to the new thread; the rvalue reference will implicitly become an','line_number':182,'multiline':False]['text':' lvalue reference to the stack location. Thus, the value may not exist if','line_number':183,'multiline':False]['text':' the parent thread leaves the frame before the read happens in the new','line_number':184,'multiline':False]['text':' thread. To avoid this dangerous and highly non-obvious footgun, the','line_number':185,'multiline':False]['text':' standard requires a "decay" copy of the arguments at the cost of making it','line_number':186,'multiline':False]['text':' impossible to pass references between threads.','line_number':187,'multiline':False]['text':' Protect the thread id during creation.','line_number':190,'multiline':False]['text':' Thread can access createMutex.','line_number':193,'multiline':False]['text':' Note that this template instatiation duplicates and is identical to the','line_number':197,'multiline':False]['text':' class template instantiation. It is required for perfect forwarding of','line_number':198,'multiline':False]['text':' rvalue references, which is only enabled for calls to a function template,','line_number':199,'multiline':False]['text':' even if the class template arguments are correct.','line_number':200,'multiline':False]['text':' Pretend createMutex is a semaphore and wait for a notification that the','line_number':216,'multiline':False]['text':' thread that spawned us is ready.','line_number':217,'multiline':False]['text':' namespace detail','line_number':224,'multiline':False]['text':' namespace js','line_number':225,'multiline':False]['text':' threading_Thread_h','line_number':229,'multiline':False]