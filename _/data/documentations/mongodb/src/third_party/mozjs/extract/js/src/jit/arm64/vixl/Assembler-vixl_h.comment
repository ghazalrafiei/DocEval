['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' Registers.','line_number':62,'multiline':False]['text':' Some CPURegister methods can return Register or VRegister types, so we need','line_number':64,'multiline':False]['text':' to declare them in advance.','line_number':65,'multiline':False]['text':' The kInvalid value is used to detect uninitialized static instances,','line_number':72,'multiline':False]['text':' which are always zero-initialized before any constructors are called.','line_number':73,'multiline':False]['text':' This assert is hit when the register has not been properly initialized.','line_number':149,'multiline':False]['text':' One cause for this can be an initialisation order fiasco. See','line_number':150,'multiline':False]['text':' https://isocpp.org/wiki/faq/ctors#static-init-order for some details.','line_number':151,'multiline':False]['text':' kNoRegister types should always have size 0 and code 0.','line_number':176,'multiline':False]['text':' These assertions ensure that the size and type of the register are as','line_number':218,'multiline':False]['text':' described. They do not consider the number of lanes that make up a vector.','line_number':219,'multiline':False]['text':' So, for example, Is8B() implies IsD(), and Is1D() implies IsD, but IsD()','line_number':220,'multiline':False]['text':' does not imply Is1D() or Is8B().','line_number':221,'multiline':False]['text':' Check the number of lanes, ie. the format of the vector, using methods such','line_number':222,'multiline':False]['text':' as Is8B(), Is1D(), etc. in the VRegister class.','line_number':223,'multiline':False]['text':' asUnsized() is only ever used on temp registers or on registers that','line_number':275,'multiline':False]['text':' are known not to be SP, and there should be no risk of it being','line_number':276,'multiline':False]['text':' applied to SP.  Check anyway.','line_number':277,'multiline':False]['text':' VIXL_ASSERT(IsPowerOf2(lanes_) && (lanes_ <= 16));','line_number':302,'multiline':False]['text':' For consistency, we assert the number of lanes of these scalar registers,','line_number':346,'multiline':False]['text':' even though there are no vectors of equivalent total size with which they','line_number':347,'multiline':False]['text':' could alias.','line_number':348,'multiline':False]['text':' Backward compatibility for FPRegisters.','line_number':402,'multiline':False]['text':' No*Reg is used to indicate an unused argument, or an error case. Note that','line_number':405,'multiline':False]['text':' these all compare equal (using the Is() method). The Register and VRegister','line_number':406,'multiline':False]['text':' variants are provided for convenience.','line_number':407,'multiline':False]['text':' For backward compatibility.','line_number':410,'multiline':False]['text':' Registers aliases.','line_number':434,'multiline':False]['text':' AreAliased returns true if any of the named registers overlap. Arguments','line_number':442,'multiline':False]['text':' set to NoReg are ignored. The system stack pointer may be specified.','line_number':443,'multiline':False]['text':' AreSameSizeAndType returns true if all of the specified registers have the','line_number':454,'multiline':False]['text':' same size, and are of the same type. The system stack pointer may be','line_number':455,'multiline':False]['text':' specified. Arguments set to NoReg are ignored, as are any subsequent','line_number':456,'multiline':False]['text':' arguments. At least one argument (reg1) must be valid (not NoCPUReg).','line_number':457,'multiline':False]['text':' AreSameFormat returns true if all of the specified VRegisters have the same','line_number':468,'multiline':False]['text':' vector format. Arguments set to NoReg are ignored, as are any subsequent','line_number':469,'multiline':False]['text':' arguments. At least one argument (reg1) must be valid (not NoVReg).','line_number':470,'multiline':False]['text':' AreConsecutive returns true if all of the specified VRegisters are','line_number':477,'multiline':False]['text':' consecutive in the register file. Arguments set to NoReg are ignored, as are','line_number':478,'multiline':False]['text':' any subsequent arguments. At least one argument (reg1) must be valid','line_number':479,'multiline':False]['text':' (not NoVReg).','line_number':480,'multiline':False]['text':' Lists of registers.','line_number':487,'multiline':False]['text':' Combine another CPURegList into this one. Registers that already exist in','line_number':523,'multiline':False]['text':' this list are left unchanged. The type and size of the registers in the','line_number':524,'multiline':False]['text':' 'other' list must match those in this list.','line_number':525,'multiline':False]['text':' Remove every register in the other CPURegList from this one. Registers that','line_number':533,'multiline':False]['text':' do not exist in this list are ignored. The type and size of the registers','line_number':534,'multiline':False]['text':' in the 'other' list must match those in this list.','line_number':535,'multiline':False]['text':' Variants of Combine and Remove which take a single register.','line_number':543,'multiline':False]['text':' Variants of Combine and Remove which take a single register by its code;','line_number':556,'multiline':False]['text':' the type and size of the register is inferred from this list.','line_number':557,'multiline':False]['text':' Remove all callee-saved registers from the list. This can be useful when','line_number':611,'multiline':False]['text':' preparing registers for an AAPCS64 function call, for example.','line_number':612,'multiline':False]['text':' AAPCS64 callee-saved registers.','line_number':618,'multiline':False]['text':' AAPCS64 caller-saved registers. Note that this includes lr.','line_number':622,'multiline':False]['text':' TODO(all): Determine how we handle d8-d15 being callee-saved, but the top','line_number':623,'multiline':False]['text':' 64-bits being caller-saved.','line_number':624,'multiline':False]['text':' AAPCS64 callee-saved registers.','line_number':673,'multiline':False]['text':' AAPCS64 caller-saved registers. Note that this includes lr.','line_number':678,'multiline':False]['text':' Operand.','line_number':683,'multiline':False]['text':' #<immediate>','line_number':686,'multiline':False]['text':' where <immediate> is int64_t.','line_number':687,'multiline':False]['text':' This is allowed to be an implicit constructor because Operand is','line_number':688,'multiline':False]['text':' a wrapper class that doesn't normally perform any type conversion.','line_number':689,'multiline':False]['text':' NOLINT(runtime/explicit)','line_number':690,'multiline':False]['text':' rm, {<shift> #<shift_amount>}','line_number':692,'multiline':False]['text':' where <shift> is one of {LSL, LSR, ASR, ROR}.','line_number':693,'multiline':False]['text':'       <shift_amount> is uint6_t.','line_number':694,'multiline':False]['text':' This is allowed to be an implicit constructor because Operand is','line_number':695,'multiline':False]['text':' a wrapper class that doesn't normally perform any type conversion.','line_number':696,'multiline':False]['text':' NOLINT(runtime/explicit)','line_number':699,'multiline':False]['text':' rm, {<extend> {#<shift_amount>}}','line_number':701,'multiline':False]['text':' where <extend> is one of {UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX}.','line_number':702,'multiline':False]['text':'       <shift_amount> is uint2_t.','line_number':703,'multiline':False]['text':' This returns an LSL shift (<= 4) operand as an equivalent extend operand,','line_number':711,'multiline':False]['text':' which helps in the encoding of instructions that use the stack pointer.','line_number':712,'multiline':False]['text':' MemOperand represents the addressing mode of a load or store instruction.','line_number':755,'multiline':False]['text':' Adapter constructors using C++11 delegating.','line_number':773,'multiline':False]['text':' TODO: If sp == kSPRegInternalCode, the xzr check isn't necessary.','line_number':774,'multiline':False]['text':' Control whether or not position-independent code should be emitted.','line_number':805,'multiline':False]['text':' All code generated will be position-independent; all branches and','line_number':807,'multiline':False]['text':' references to labels generated with the Label class will use PC-relative','line_number':808,'multiline':False]['text':' addressing.','line_number':809,'multiline':False]['text':' Allow VIXL to generate code that refers to absolute addresses. With this','line_number':812,'multiline':False]['text':' option, it will not be possible to copy the code buffer and run it from a','line_number':813,'multiline':False]['text':' different address; code must be generated in its final location.','line_number':814,'multiline':False]['text':' Allow VIXL to assume that the bottom 12 bits of the address will be','line_number':817,'multiline':False]['text':' constant, but that the top 48 bits may change. This allows `adrp` to','line_number':818,'multiline':False]['text':' function in systems which copy code between pages, but otherwise maintain','line_number':819,'multiline':False]['text':' 4KB page alignment.','line_number':820,'multiline':False]['text':' Control how scaled- and unscaled-offset loads and stores are generated.','line_number':825,'multiline':False]['text':' Prefer scaled-immediate-offset instructions, but emit unscaled-offset,','line_number':827,'multiline':False]['text':' register-offset, pre-index or post-index instructions if necessary.','line_number':828,'multiline':False]['text':' Prefer unscaled-immediate-offset instructions, but emit scaled-offset,','line_number':831,'multiline':False]['text':' register-offset, pre-index or post-index instructions if necessary.','line_number':832,'multiline':False]['text':' Require scaled-immediate-offset instructions.','line_number':835,'multiline':False]['text':' Require unscaled-immediate-offset instructions.','line_number':838,'multiline':False]['text':' Assembler.','line_number':843,'multiline':False]['text':' System functions.','line_number':848,'multiline':False]['text':' Finalize a code buffer of generated instructions. This function must be','line_number':850,'multiline':False]['text':' called before executing or copying code from the buffer.','line_number':851,'multiline':False]['text':' Bit set when a DoubleCondition does not map to a single ARM condition.','line_number':879,'multiline':False]['text':' The MacroAssembler must special-case these conditions, or else','line_number':880,'multiline':False]['text':' ConditionFromDoubleCondition will complain.','line_number':881,'multiline':False]['text':' Could also use Condition::mi.','line_number':890,'multiline':False]['text':' If either operand is NaN, these conditions always evaluate to true.','line_number':893,'multiline':False]['text':' Conditions al and nv behave identically, as "always true". They can't be','line_number':904,'multiline':False]['text':' inverted, because there is no "always false" condition.','line_number':905,'multiline':False]['text':' This is chaging the condition codes for cmp a, b to the same codes for cmp b, a.','line_number':910,'multiline':False]['text':' Conditions al and nv behave identically, as "always true". They can't be','line_number':912,'multiline':False]['text':' inverted, because there is no "always false" condition.','line_number':913,'multiline':False]['text':' Instruction set functions.','line_number':984,'multiline':False]['text':' Branch / Jump instructions.','line_number':986,'multiline':False]['text':' Branch to register.','line_number':987,'multiline':False]['text':' Branch with link to register.','line_number':991,'multiline':False]['text':' Branch to register with return hint.','line_number':995,'multiline':False]['text':' Unconditional branch to label.','line_number':998,'multiline':False]['text':' Conditional branch to label.','line_number':1001,'multiline':False]['text':' Unconditional branch to PC offset.','line_number':1004,'multiline':False]['text':' Conditional branch to PC offset.','line_number':1008,'multiline':False]['text':' Branch with link to label.','line_number':1012,'multiline':False]['text':' Branch with link to PC offset.','line_number':1015,'multiline':False]['text':' Compare and branch to label if zero.','line_number':1019,'multiline':False]['text':' Compare and branch to PC offset if zero.','line_number':1022,'multiline':False]['text':' Compare and branch to label if not zero.','line_number':1026,'multiline':False]['text':' Compare and branch to PC offset if not zero.','line_number':1029,'multiline':False]['text':' Table lookup from one register.','line_number':1033,'multiline':False]['text':' Table lookup from two registers.','line_number':1038,'multiline':False]['text':' Table lookup from three registers.','line_number':1044,'multiline':False]['text':' Table lookup from four registers.','line_number':1051,'multiline':False]['text':' Table lookup extension from one register.','line_number':1059,'multiline':False]['text':' Table lookup extension from two registers.','line_number':1064,'multiline':False]['text':' Table lookup extension from three registers.','line_number':1070,'multiline':False]['text':' Table lookup extension from four registers.','line_number':1077,'multiline':False]['text':' Test bit and branch to label if zero.','line_number':1085,'multiline':False]['text':' Test bit and branch to PC offset if zero.','line_number':1088,'multiline':False]['text':' Test bit and branch to label if not zero.','line_number':1092,'multiline':False]['text':' Test bit and branch to PC offset if not zero.','line_number':1095,'multiline':False]['text':' Address calculation instructions.','line_number':1099,'multiline':False]['text':' Calculate a PC-relative address. Unlike for branches the offset in adr is','line_number':1100,'multiline':False]['text':' unscaled (i.e. the result can be unaligned).','line_number':1101,'multiline':False]['text':' Calculate the address of a label.','line_number':1103,'multiline':False]['text':' Calculate the address of a PC offset.','line_number':1106,'multiline':False]['text':' Calculate the page address of a label.','line_number':1110,'multiline':False]['text':' Calculate the page address of a PC offset.','line_number':1113,'multiline':False]['text':' Data Processing instructions.','line_number':1117,'multiline':False]['text':' Add.','line_number':1118,'multiline':False]['text':' Add and update status flags.','line_number':1123,'multiline':False]['text':' Compare negative.','line_number':1128,'multiline':False]['text':' Subtract.','line_number':1131,'multiline':False]['text':' Subtract and update status flags.','line_number':1136,'multiline':False]['text':' Compare.','line_number':1141,'multiline':False]['text':' Negate.','line_number':1144,'multiline':False]['text':' Negate and update status flags.','line_number':1148,'multiline':False]['text':' Add with carry bit.','line_number':1152,'multiline':False]['text':' Add with carry bit and update status flags.','line_number':1157,'multiline':False]['text':' Subtract with carry bit.','line_number':1162,'multiline':False]['text':' Subtract with carry bit and update status flags.','line_number':1167,'multiline':False]['text':' Negate with carry bit.','line_number':1172,'multiline':False]['text':' Negate with carry bit and update status flags.','line_number':1176,'multiline':False]['text':' Logical instructions.','line_number':1180,'multiline':False]['text':' Bitwise and (A & B).','line_number':1181,'multiline':False]['text':' Bitwise and (A & B) and update status flags.','line_number':1186,'multiline':False]['text':' Bit test and set flags.','line_number':1191,'multiline':False]['text':' Bit clear (A & ~B).','line_number':1194,'multiline':False]['text':' Bit clear (A & ~B) and update status flags.','line_number':1199,'multiline':False]['text':' Bitwise or (A | B).','line_number':1204,'multiline':False]['text':' Bitwise nor (A | ~B).','line_number':1207,'multiline':False]['text':' Bitwise eor/xor (A ^ B).','line_number':1210,'multiline':False]['text':' Bitwise enor/xnor (A ^ ~B).','line_number':1213,'multiline':False]['text':' Logical shift left by variable.','line_number':1216,'multiline':False]['text':' Logical shift right by variable.','line_number':1219,'multiline':False]['text':' Arithmetic shift right by variable.','line_number':1222,'multiline':False]['text':' Rotate right by variable.','line_number':1225,'multiline':False]['text':' Bitfield instructions.','line_number':1228,'multiline':False]['text':' Bitfield move.','line_number':1229,'multiline':False]['text':' Signed bitfield move.','line_number':1235,'multiline':False]['text':' Unsigned bitfield move.','line_number':1241,'multiline':False]['text':' Bfm aliases.','line_number':1247,'multiline':False]['text':' Bitfield insert.','line_number':1248,'multiline':False]['text':' Bitfield extract and insert low.','line_number':1258,'multiline':False]['text':' Sbfm aliases.','line_number':1268,'multiline':False]['text':' Arithmetic shift right.','line_number':1269,'multiline':False]['text':' Signed bitfield insert with zero at right.','line_number':1275,'multiline':False]['text':' Signed bitfield extract.','line_number':1285,'multiline':False]['text':' Signed extend byte.','line_number':1295,'multiline':False]['text':' Signed extend halfword.','line_number':1300,'multiline':False]['text':' Signed extend word.','line_number':1305,'multiline':False]['text':' Ubfm aliases.','line_number':1310,'multiline':False]['text':' Logical shift left.','line_number':1311,'multiline':False]['text':' Logical shift right.','line_number':1318,'multiline':False]['text':' Unsigned bitfield insert with zero at right.','line_number':1324,'multiline':False]['text':' Unsigned bitfield extract.','line_number':1334,'multiline':False]['text':' Unsigned extend byte.','line_number':1344,'multiline':False]['text':' Unsigned extend halfword.','line_number':1349,'multiline':False]['text':' Unsigned extend word.','line_number':1354,'multiline':False]['text':' Extract.','line_number':1359,'multiline':False]['text':' Conditional select: rd = cond ? rn : rm.','line_number':1365,'multiline':False]['text':' Conditional select increment: rd = cond ? rn : rm + 1.','line_number':1371,'multiline':False]['text':' Conditional select inversion: rd = cond ? rn : ~rm.','line_number':1377,'multiline':False]['text':' Conditional select negation: rd = cond ? rn : -rm.','line_number':1383,'multiline':False]['text':' Conditional set: rd = cond ? 1 : 0.','line_number':1389,'multiline':False]['text':' Conditional set mask: rd = cond ? -1 : 0.','line_number':1392,'multiline':False]['text':' Conditional increment: rd = cond ? rn + 1 : rn.','line_number':1395,'multiline':False]['text':' Conditional invert: rd = cond ? ~rn : rn.','line_number':1398,'multiline':False]['text':' Conditional negate: rd = cond ? -rn : rn.','line_number':1401,'multiline':False]['text':' Rotate right.','line_number':1404,'multiline':False]['text':' Conditional comparison.','line_number':1409,'multiline':False]['text':' Conditional compare negative.','line_number':1410,'multiline':False]['text':' Conditional compare.','line_number':1416,'multiline':False]['text':' CRC-32 checksum from byte.','line_number':1422,'multiline':False]['text':' CRC-32 checksum from half-word.','line_number':1427,'multiline':False]['text':' CRC-32 checksum from word.','line_number':1432,'multiline':False]['text':' CRC-32 checksum from double word.','line_number':1437,'multiline':False]['text':' CRC-32 C checksum from byte.','line_number':1442,'multiline':False]['text':' CRC-32 C checksum from half-word.','line_number':1447,'multiline':False]['text':' CRC-32 C checksum from word.','line_number':1452,'multiline':False]['text':' CRC-32C checksum from double word.','line_number':1457,'multiline':False]['text':' Multiply.','line_number':1462,'multiline':False]['text':' Negated multiply.','line_number':1465,'multiline':False]['text':' Signed long multiply: 32 x 32 -> 64-bit.','line_number':1468,'multiline':False]['text':' Signed multiply high: 64 x 64 -> 64-bit <127:64>.','line_number':1471,'multiline':False]['text':' Multiply and accumulate.','line_number':1474,'multiline':False]['text':' Multiply and subtract.','line_number':1480,'multiline':False]['text':' Signed long multiply and accumulate: 32 x 32 + 64 -> 64-bit.','line_number':1486,'multiline':False]['text':' Unsigned long multiply and accumulate: 32 x 32 + 64 -> 64-bit.','line_number':1492,'multiline':False]['text':' Unsigned long multiply: 32 x 32 -> 64-bit.','line_number':1498,'multiline':False]['text':' Unsigned multiply high: 64 x 64 -> 64-bit <127:64>.','line_number':1505,'multiline':False]['text':' Signed long multiply and subtract: 64 - (32 x 32) -> 64-bit.','line_number':1510,'multiline':False]['text':' Unsigned long multiply and subtract: 64 - (32 x 32) -> 64-bit.','line_number':1516,'multiline':False]['text':' Signed integer divide.','line_number':1522,'multiline':False]['text':' Unsigned integer divide.','line_number':1525,'multiline':False]['text':' Bit reverse.','line_number':1528,'multiline':False]['text':' Reverse bytes in 16-bit half words.','line_number':1531,'multiline':False]['text':' Reverse bytes in 32-bit words.','line_number':1534,'multiline':False]['text':' Reverse bytes.','line_number':1537,'multiline':False]['text':' Count leading zeroes.','line_number':1540,'multiline':False]['text':' Count leading sign bits.','line_number':1543,'multiline':False]['text':' Memory instructions.','line_number':1546,'multiline':False]['text':' Load integer or FP register.','line_number':1547,'multiline':False]['text':' Store integer or FP register.','line_number':1551,'multiline':False]['text':' Load word with sign extension.','line_number':1555,'multiline':False]['text':' Load byte.','line_number':1559,'multiline':False]['text':' Store byte.','line_number':1563,'multiline':False]['text':' Load byte with sign extension.','line_number':1567,'multiline':False]['text':' Load half-word.','line_number':1571,'multiline':False]['text':' Store half-word.','line_number':1575,'multiline':False]['text':' Load half-word with sign extension.','line_number':1579,'multiline':False]['text':' Load integer or FP register (with unscaled offset).','line_number':1583,'multiline':False]['text':' Store integer or FP register (with unscaled offset).','line_number':1587,'multiline':False]['text':' Load word with sign extension.','line_number':1591,'multiline':False]['text':' Load byte (with unscaled offset).','line_number':1595,'multiline':False]['text':' Store byte (with unscaled offset).','line_number':1599,'multiline':False]['text':' Load byte with sign extension (and unscaled offset).','line_number':1603,'multiline':False]['text':' Load half-word (with unscaled offset).','line_number':1607,'multiline':False]['text':' Store half-word (with unscaled offset).','line_number':1611,'multiline':False]['text':' Load half-word with sign extension (and unscaled offset).','line_number':1615,'multiline':False]['text':' Load integer or FP register pair.','line_number':1619,'multiline':False]['text':' Store integer or FP register pair.','line_number':1623,'multiline':False]['text':' Load word pair with sign extension.','line_number':1627,'multiline':False]['text':' Load integer or FP register pair, non-temporal.','line_number':1630,'multiline':False]['text':' Store integer or FP register pair, non-temporal.','line_number':1634,'multiline':False]['text':' Load integer or FP register from pc + imm19 << 2.','line_number':1638,'multiline':False]['text':' Load word with sign extension from pc + imm19 << 2.','line_number':1642,'multiline':False]['text':' Store exclusive byte.','line_number':1645,'multiline':False]['text':' Store exclusive half-word.','line_number':1648,'multiline':False]['text':' Store exclusive register.','line_number':1651,'multiline':False]['text':' Load exclusive byte.','line_number':1654,'multiline':False]['text':' Load exclusive half-word.','line_number':1657,'multiline':False]['text':' Load exclusive register.','line_number':1660,'multiline':False]['text':' Store exclusive register pair.','line_number':1663,'multiline':False]['text':' Load exclusive register pair.','line_number':1669,'multiline':False]['text':' Store-release exclusive byte.','line_number':1672,'multiline':False]['text':' Store-release exclusive half-word.','line_number':1675,'multiline':False]['text':' Store-release exclusive register.','line_number':1678,'multiline':False]['text':' Load-acquire exclusive byte.','line_number':1681,'multiline':False]['text':' Load-acquire exclusive half-word.','line_number':1684,'multiline':False]['text':' Load-acquire exclusive register.','line_number':1687,'multiline':False]['text':' Store-release exclusive register pair.','line_number':1690,'multiline':False]['text':' Load-acquire exclusive register pair.','line_number':1696,'multiline':False]['text':' Store-release byte.','line_number':1699,'multiline':False]['text':' Store-release half-word.','line_number':1702,'multiline':False]['text':' Store-release register.','line_number':1705,'multiline':False]['text':' Load-acquire byte.','line_number':1708,'multiline':False]['text':' Load-acquire half-word.','line_number':1711,'multiline':False]['text':' Load-acquire register.','line_number':1714,'multiline':False]['text':' Prefetch memory.','line_number':1717,'multiline':False]['text':' Prefetch memory (with unscaled offset).','line_number':1721,'multiline':False]['text':' Prefetch from pc + imm19 << 2.','line_number':1725,'multiline':False]['text':' Move instructions. The default shift of -1 indicates that the move','line_number':1728,'multiline':False]['text':' instruction will calculate an appropriate 16-bit immediate and left shift','line_number':1729,'multiline':False]['text':' that is equal to the 64-bit immediate argument. If an explicit left shift','line_number':1730,'multiline':False]['text':' is specified (0, 16, 32 or 48), the immediate must be a 16-bit value.','line_number':1731,'multiline':False]['text':'','line_number':1732,'multiline':False]['text':' For movk, an explicit shift can be used to indicate which half word should','line_number':1733,'multiline':False]['text':' be overwritten, eg. movk(x0, 0, 0) will overwrite the least-significant','line_number':1734,'multiline':False]['text':' half word with zero, whereas movk(x0, 0, 48) will overwrite the','line_number':1735,'multiline':False]['text':' most-significant.','line_number':1736,'multiline':False]['text':' Move immediate and keep.','line_number':1738,'multiline':False]['text':' Move inverted immediate.','line_number':1743,'multiline':False]['text':' Move immediate.','line_number':1748,'multiline':False]['text':' Misc instructions.','line_number':1753,'multiline':False]['text':' Monitor debug-mode breakpoint.','line_number':1754,'multiline':False]['text':' Halting debug-mode breakpoint.','line_number':1757,'multiline':False]['text':' Generate exception targeting EL1.','line_number':1760,'multiline':False]['text':' Move register to register.','line_number':1764,'multiline':False]['text':' Move inverted operand to register.','line_number':1767,'multiline':False]['text':' System instructions.','line_number':1770,'multiline':False]['text':' Move to register from system register.','line_number':1771,'multiline':False]['text':' Move from register to system register.','line_number':1774,'multiline':False]['text':' System instruction.','line_number':1777,'multiline':False]['text':' System instruction with pre-encoded op (op1:crn:crm:op2).','line_number':1780,'multiline':False]['text':' System data cache operation.','line_number':1783,'multiline':False]['text':' System instruction cache operation.','line_number':1786,'multiline':False]['text':' System hint.','line_number':1789,'multiline':False]['text':' Clear exclusive monitor.','line_number':1793,'multiline':False]['text':' Data memory barrier.','line_number':1796,'multiline':False]['text':' Data synchronization barrier.','line_number':1799,'multiline':False]['text':' Instruction synchronization barrier.','line_number':1802,'multiline':False]['text':' Alias for system instructions.','line_number':1805,'multiline':False]['text':' No-op.','line_number':1806,'multiline':False]['text':' Alias for system instructions.','line_number':1812,'multiline':False]['text':' Conditional speculation barrier.','line_number':1813,'multiline':False]['text':' FP and NEON instructions.','line_number':1819,'multiline':False]['text':' Move double precision immediate to FP register.','line_number':1820,'multiline':False]['text':' Move single precision immediate to FP register.','line_number':1823,'multiline':False]['text':' Move FP register to register.','line_number':1826,'multiline':False]['text':' Move register to FP register.','line_number':1829,'multiline':False]['text':' Move FP register to FP register.','line_number':1832,'multiline':False]['text':' Move 64-bit register to top half of 128-bit FP register.','line_number':1835,'multiline':False]['text':' Move top half of 128-bit FP register to 64-bit register.','line_number':1838,'multiline':False]['text':' FP add.','line_number':1841,'multiline':False]['text':' FP subtract.','line_number':1844,'multiline':False]['text':' FP multiply.','line_number':1847,'multiline':False]['text':' FP fused multiply-add.','line_number':1850,'multiline':False]['text':' FP fused multiply-subtract.','line_number':1856,'multiline':False]['text':' FP fused multiply-add and negate.','line_number':1862,'multiline':False]['text':' FP fused multiply-subtract and negate.','line_number':1868,'multiline':False]['text':' FP multiply-negate scalar.','line_number':1874,'multiline':False]['text':' FP reciprocal exponent scalar.','line_number':1879,'multiline':False]['text':' FP divide.','line_number':1883,'multiline':False]['text':' FP maximum.','line_number':1886,'multiline':False]['text':' FP minimum.','line_number':1889,'multiline':False]['text':' FP maximum number.','line_number':1892,'multiline':False]['text':' FP minimum number.','line_number':1895,'multiline':False]['text':' FP absolute.','line_number':1898,'multiline':False]['text':' FP negate.','line_number':1901,'multiline':False]['text':' FP square root.','line_number':1904,'multiline':False]['text':' FP round to integer, nearest with ties to away.','line_number':1907,'multiline':False]['text':' FP round to integer, implicit rounding.','line_number':1910,'multiline':False]['text':' FP round to integer, toward minus infinity.','line_number':1913,'multiline':False]['text':' FP round to integer, nearest with ties to even.','line_number':1916,'multiline':False]['text':' FP round to integer, toward plus infinity.','line_number':1919,'multiline':False]['text':' FP round to integer, exact, implicit rounding.','line_number':1922,'multiline':False]['text':' FP round to integer, towards zero.','line_number':1925,'multiline':False]['text':' FP compare registers.','line_number':1936,'multiline':False]['text':' FP compare immediate.','line_number':1939,'multiline':False]['text':' FP conditional compare.','line_number':1948,'multiline':False]['text':' FP signaling compare registers.','line_number':1954,'multiline':False]['text':' FP signaling compare immediate.','line_number':1957,'multiline':False]['text':' FP conditional signaling compare.','line_number':1960,'multiline':False]['text':' FP conditional select.','line_number':1966,'multiline':False]['text':' Common FP Convert functions.','line_number':1972,'multiline':False]['text':' FP convert between precisions.','line_number':1980,'multiline':False]['text':' FP convert to higher precision.','line_number':1983,'multiline':False]['text':' FP convert to higher precision (second part).','line_number':1986,'multiline':False]['text':' FP convert to lower precision.','line_number':1989,'multiline':False]['text':' FP convert to lower prevision (second part).','line_number':1992,'multiline':False]['text':' FP convert to lower precision, rounding to odd.','line_number':1995,'multiline':False]['text':' FP convert to lower precision, rounding to odd (second part).','line_number':1998,'multiline':False]['text':' FP convert to signed integer, nearest with ties to away.','line_number':2001,'multiline':False]['text':' FP convert to unsigned integer, nearest with ties to away.','line_number':2004,'multiline':False]['text':' FP convert to signed integer, nearest with ties to away.','line_number':2007,'multiline':False]['text':' FP convert to unsigned integer, nearest with ties to away.','line_number':2010,'multiline':False]['text':' FP convert to signed integer, round towards -infinity.','line_number':2013,'multiline':False]['text':' FP convert to unsigned integer, round towards -infinity.','line_number':2016,'multiline':False]['text':' FP convert to signed integer, round towards -infinity.','line_number':2019,'multiline':False]['text':' FP convert to unsigned integer, round towards -infinity.','line_number':2022,'multiline':False]['text':' FP convert to signed integer, nearest with ties to even.','line_number':2025,'multiline':False]['text':' FP convert to unsigned integer, nearest with ties to even.','line_number':2028,'multiline':False]['text':' FP convert to signed integer, nearest with ties to even.','line_number':2031,'multiline':False]['text':' FP JavaScript convert to signed integer, rounding toward zero [Armv8.3].','line_number':2034,'multiline':False]['text':' FP convert to unsigned integer, nearest with ties to even.','line_number':2037,'multiline':False]['text':' FP convert to signed integer or fixed-point, round towards zero.','line_number':2040,'multiline':False]['text':' FP convert to unsigned integer or fixed-point, round towards zero.','line_number':2043,'multiline':False]['text':' FP convert to signed integer or fixed-point, round towards zero.','line_number':2046,'multiline':False]['text':' FP convert to unsigned integer or fixed-point, round towards zero.','line_number':2049,'multiline':False]['text':' FP convert to signed integer, round towards +infinity.','line_number':2052,'multiline':False]['text':' FP convert to unsigned integer, round towards +infinity.','line_number':2055,'multiline':False]['text':' FP convert to signed integer, round towards +infinity.','line_number':2058,'multiline':False]['text':' FP convert to unsigned integer, round towards +infinity.','line_number':2061,'multiline':False]['text':' Convert signed integer or fixed point to FP.','line_number':2064,'multiline':False]['text':' Convert unsigned integer or fixed point to FP.','line_number':2067,'multiline':False]['text':' Convert signed integer or fixed-point to FP.','line_number':2070,'multiline':False]['text':' Convert unsigned integer or fixed-point to FP.','line_number':2073,'multiline':False]['text':' Unsigned absolute difference.','line_number':2076,'multiline':False]['text':' Signed absolute difference.','line_number':2081,'multiline':False]['text':' Unsigned absolute difference and accumulate.','line_number':2086,'multiline':False]['text':' Signed absolute difference and accumulate.','line_number':2091,'multiline':False]['text':' Add.','line_number':2096,'multiline':False]['text':' Subtract.','line_number':2101,'multiline':False]['text':' Unsigned halving add.','line_number':2106,'multiline':False]['text':' Signed halving add.','line_number':2111,'multiline':False]['text':' Unsigned rounding halving add.','line_number':2116,'multiline':False]['text':' Signed rounding halving add.','line_number':2121,'multiline':False]['text':' Unsigned halving sub.','line_number':2126,'multiline':False]['text':' Signed halving sub.','line_number':2131,'multiline':False]['text':' Unsigned saturating add.','line_number':2136,'multiline':False]['text':' Signed saturating add.','line_number':2141,'multiline':False]['text':' Unsigned saturating subtract.','line_number':2146,'multiline':False]['text':' Signed saturating subtract.','line_number':2151,'multiline':False]['text':' Add pairwise.','line_number':2156,'multiline':False]['text':' Add pair of elements scalar.','line_number':2161,'multiline':False]['text':' Multiply-add to accumulator.','line_number':2165,'multiline':False]['text':' Multiply-subtract to accumulator.','line_number':2170,'multiline':False]['text':' Multiply.','line_number':2175,'multiline':False]['text':' Multiply by scalar element.','line_number':2180,'multiline':False]['text':' Multiply-add by scalar element.','line_number':2186,'multiline':False]['text':' Multiply-subtract by scalar element.','line_number':2192,'multiline':False]['text':' Signed long multiply-add by scalar element.','line_number':2198,'multiline':False]['text':' Signed long multiply-add by scalar element (second part).','line_number':2204,'multiline':False]['text':' Unsigned long multiply-add by scalar element.','line_number':2210,'multiline':False]['text':' Unsigned long multiply-add by scalar element (second part).','line_number':2216,'multiline':False]['text':' Signed long multiply-sub by scalar element.','line_number':2222,'multiline':False]['text':' Signed long multiply-sub by scalar element (second part).','line_number':2228,'multiline':False]['text':' Unsigned long multiply-sub by scalar element.','line_number':2234,'multiline':False]['text':' Unsigned long multiply-sub by scalar element (second part).','line_number':2240,'multiline':False]['text':' Signed long multiply by scalar element.','line_number':2246,'multiline':False]['text':' Signed long multiply by scalar element (second part).','line_number':2252,'multiline':False]['text':' Unsigned long multiply by scalar element.','line_number':2258,'multiline':False]['text':' Unsigned long multiply by scalar element (second part).','line_number':2264,'multiline':False]['text':' Signed saturating double long multiply by element.','line_number':2270,'multiline':False]['text':' Signed saturating double long multiply by element (second part).','line_number':2276,'multiline':False]['text':' Signed saturating doubling long multiply-add by element.','line_number':2282,'multiline':False]['text':' Signed saturating doubling long multiply-add by element (second part).','line_number':2288,'multiline':False]['text':' Signed saturating doubling long multiply-sub by element.','line_number':2294,'multiline':False]['text':' Signed saturating doubling long multiply-sub by element (second part).','line_number':2300,'multiline':False]['text':' Compare equal.','line_number':2306,'multiline':False]['text':' Compare signed greater than or equal.','line_number':2311,'multiline':False]['text':' Compare signed greater than.','line_number':2316,'multiline':False]['text':' Compare unsigned higher.','line_number':2321,'multiline':False]['text':' Compare unsigned higher or same.','line_number':2326,'multiline':False]['text':' Compare bitwise test bits nonzero.','line_number':2331,'multiline':False]['text':' Compare bitwise to zero.','line_number':2336,'multiline':False]['text':' Compare signed greater than or equal to zero.','line_number':2341,'multiline':False]['text':' Compare signed greater than zero.','line_number':2346,'multiline':False]['text':' Compare signed less than or equal to zero.','line_number':2351,'multiline':False]['text':' Compare signed less than zero.','line_number':2356,'multiline':False]['text':' Signed shift left by register.','line_number':2361,'multiline':False]['text':' Unsigned shift left by register.','line_number':2366,'multiline':False]['text':' Signed saturating shift left by register.','line_number':2371,'multiline':False]['text':' Unsigned saturating shift left by register.','line_number':2376,'multiline':False]['text':' Signed rounding shift left by register.','line_number':2381,'multiline':False]['text':' Unsigned rounding shift left by register.','line_number':2386,'multiline':False]['text':' Signed saturating rounding shift left by register.','line_number':2391,'multiline':False]['text':' Unsigned saturating rounding shift left by register.','line_number':2396,'multiline':False]['text':' Bitwise and.','line_number':2401,'multiline':False]['text':' Bitwise or.','line_number':2406,'multiline':False]['text':' Bitwise or immediate.','line_number':2411,'multiline':False]['text':' Move register to register.','line_number':2416,'multiline':False]['text':' Bitwise orn.','line_number':2420,'multiline':False]['text':' Bitwise eor.','line_number':2425,'multiline':False]['text':' Bit clear immediate.','line_number':2430,'multiline':False]['text':' Bit clear.','line_number':2435,'multiline':False]['text':' Bitwise insert if false.','line_number':2440,'multiline':False]['text':' Bitwise insert if true.','line_number':2445,'multiline':False]['text':' Bitwise select.','line_number':2450,'multiline':False]['text':' Polynomial multiply.','line_number':2455,'multiline':False]['text':' Vector move immediate.','line_number':2460,'multiline':False]['text':' Bitwise not.','line_number':2466,'multiline':False]['text':' Vector move inverted immediate.','line_number':2470,'multiline':False]['text':' Signed saturating accumulate of unsigned value.','line_number':2476,'multiline':False]['text':' Unsigned saturating accumulate of signed value.','line_number':2480,'multiline':False]['text':' Absolute value.','line_number':2484,'multiline':False]['text':' Signed saturating absolute value.','line_number':2488,'multiline':False]['text':' Negate.','line_number':2492,'multiline':False]['text':' Signed saturating negate.','line_number':2496,'multiline':False]['text':' Bitwise not.','line_number':2500,'multiline':False]['text':' Extract narrow.','line_number':2504,'multiline':False]['text':' Extract narrow (second part).','line_number':2508,'multiline':False]['text':' Signed saturating extract narrow.','line_number':2512,'multiline':False]['text':' Signed saturating extract narrow (second part).','line_number':2516,'multiline':False]['text':' Unsigned saturating extract narrow.','line_number':2520,'multiline':False]['text':' Unsigned saturating extract narrow (second part).','line_number':2524,'multiline':False]['text':' Signed saturating extract unsigned narrow.','line_number':2528,'multiline':False]['text':' Signed saturating extract unsigned narrow (second part).','line_number':2532,'multiline':False]['text':' Extract vector from pair of vectors.','line_number':2536,'multiline':False]['text':' Duplicate vector element to vector or scalar.','line_number':2542,'multiline':False]['text':' Move vector element to scalar.','line_number':2547,'multiline':False]['text':' Duplicate general-purpose register to vector.','line_number':2552,'multiline':False]['text':' Insert vector element from another vector element.','line_number':2556,'multiline':False]['text':' Move vector element to another vector element.','line_number':2562,'multiline':False]['text':' Insert vector element from general-purpose register.','line_number':2568,'multiline':False]['text':' Move general-purpose register to a vector element.','line_number':2573,'multiline':False]['text':' Unsigned move vector element to general-purpose register.','line_number':2578,'multiline':False]['text':' Move vector element to general-purpose register.','line_number':2583,'multiline':False]['text':' Signed move vector element to general-purpose register.','line_number':2588,'multiline':False]['text':' One-element structure load to one register.','line_number':2593,'multiline':False]['text':' One-element structure load to two registers.','line_number':2597,'multiline':False]['text':' One-element structure load to three registers.','line_number':2602,'multiline':False]['text':' One-element structure load to four registers.','line_number':2608,'multiline':False]['text':' One-element single structure load to one lane.','line_number':2615,'multiline':False]['text':' One-element single structure load to all lanes.','line_number':2620,'multiline':False]['text':' Two-element structure load.','line_number':2624,'multiline':False]['text':' Two-element single structure load to one lane.','line_number':2629,'multiline':False]['text':' Two-element single structure load to all lanes.','line_number':2635,'multiline':False]['text':' Three-element structure load.','line_number':2640,'multiline':False]['text':' Three-element single structure load to one lane.','line_number':2646,'multiline':False]['text':' Three-element single structure load to all lanes.','line_number':2653,'multiline':False]['text':' Four-element structure load.','line_number':2659,'multiline':False]['text':' Four-element single structure load to one lane.','line_number':2666,'multiline':False]['text':' Four-element single structure load to all lanes.','line_number':2674,'multiline':False]['text':' Count leading sign bits.','line_number':2681,'multiline':False]['text':' Count leading zero bits (vector).','line_number':2685,'multiline':False]['text':' Population count per byte.','line_number':2689,'multiline':False]['text':' Reverse bit order.','line_number':2693,'multiline':False]['text':' Reverse elements in 16-bit halfwords.','line_number':2697,'multiline':False]['text':' Reverse elements in 32-bit words.','line_number':2701,'multiline':False]['text':' Reverse elements in 64-bit doublewords.','line_number':2705,'multiline':False]['text':' Unsigned reciprocal square root estimate.','line_number':2709,'multiline':False]['text':' Unsigned reciprocal estimate.','line_number':2713,'multiline':False]['text':' Signed pairwise long add.','line_number':2717,'multiline':False]['text':' Unsigned pairwise long add.','line_number':2721,'multiline':False]['text':' Signed pairwise long add and accumulate.','line_number':2725,'multiline':False]['text':' Unsigned pairwise long add and accumulate.','line_number':2729,'multiline':False]['text':' Shift left by immediate.','line_number':2733,'multiline':False]['text':' Signed saturating shift left by immediate.','line_number':2738,'multiline':False]['text':' Signed saturating shift left unsigned by immediate.','line_number':2743,'multiline':False]['text':' Unsigned saturating shift left by immediate.','line_number':2748,'multiline':False]['text':' Signed shift left long by immediate.','line_number':2753,'multiline':False]['text':' Signed shift left long by immediate (second part).','line_number':2758,'multiline':False]['text':' Signed extend long.','line_number':2763,'multiline':False]['text':' Signed extend long (second part).','line_number':2767,'multiline':False]['text':' Unsigned shift left long by immediate.','line_number':2771,'multiline':False]['text':' Unsigned shift left long by immediate (second part).','line_number':2776,'multiline':False]['text':' Shift left long by element size.','line_number':2781,'multiline':False]['text':' Shift left long by element size (second part).','line_number':2786,'multiline':False]['text':' Unsigned extend long.','line_number':2791,'multiline':False]['text':' Unsigned extend long (second part).','line_number':2795,'multiline':False]['text':' Shift left by immediate and insert.','line_number':2799,'multiline':False]['text':' Shift right by immediate and insert.','line_number':2804,'multiline':False]['text':' Signed maximum.','line_number':2809,'multiline':False]['text':' Signed pairwise maximum.','line_number':2814,'multiline':False]['text':' Add across vector.','line_number':2819,'multiline':False]['text':' Signed add long across vector.','line_number':2823,'multiline':False]['text':' Unsigned add long across vector.','line_number':2827,'multiline':False]['text':' FP maximum number across vector.','line_number':2831,'multiline':False]['text':' FP maximum across vector.','line_number':2835,'multiline':False]['text':' FP minimum number across vector.','line_number':2839,'multiline':False]['text':' FP minimum across vector.','line_number':2843,'multiline':False]['text':' Signed maximum across vector.','line_number':2847,'multiline':False]['text':' Signed minimum.','line_number':2851,'multiline':False]['text':' Signed minimum pairwise.','line_number':2856,'multiline':False]['text':' Signed minimum across vector.','line_number':2861,'multiline':False]['text':' One-element structure store from one register.','line_number':2865,'multiline':False]['text':' One-element structure store from two registers.','line_number':2869,'multiline':False]['text':' One-element structure store from three registers.','line_number':2874,'multiline':False]['text':' One-element structure store from four registers.','line_number':2880,'multiline':False]['text':' One-element single structure store from one lane.','line_number':2887,'multiline':False]['text':' Two-element structure store from two registers.','line_number':2892,'multiline':False]['text':' Two-element single structure store from two lanes.','line_number':2897,'multiline':False]['text':' Three-element structure store from three registers.','line_number':2903,'multiline':False]['text':' Three-element single structure store from three lanes.','line_number':2909,'multiline':False]['text':' Four-element structure store from four registers.','line_number':2916,'multiline':False]['text':' Four-element single structure store from four lanes.','line_number':2923,'multiline':False]['text':' Unsigned add long.','line_number':2931,'multiline':False]['text':' Unsigned add long (second part).','line_number':2936,'multiline':False]['text':' Unsigned add wide.','line_number':2941,'multiline':False]['text':' Unsigned add wide (second part).','line_number':2946,'multiline':False]['text':' Signed add long.','line_number':2951,'multiline':False]['text':' Signed add long (second part).','line_number':2956,'multiline':False]['text':' Signed add wide.','line_number':2961,'multiline':False]['text':' Signed add wide (second part).','line_number':2966,'multiline':False]['text':' Unsigned subtract long.','line_number':2971,'multiline':False]['text':' Unsigned subtract long (second part).','line_number':2976,'multiline':False]['text':' Unsigned subtract wide.','line_number':2981,'multiline':False]['text':' Unsigned subtract wide (second part).','line_number':2986,'multiline':False]['text':' Signed subtract long.','line_number':2991,'multiline':False]['text':' Signed subtract long (second part).','line_number':2996,'multiline':False]['text':' Signed integer subtract wide.','line_number':3001,'multiline':False]['text':' Signed integer subtract wide (second part).','line_number':3006,'multiline':False]['text':' Unsigned maximum.','line_number':3011,'multiline':False]['text':' Unsigned pairwise maximum.','line_number':3016,'multiline':False]['text':' Unsigned maximum across vector.','line_number':3021,'multiline':False]['text':' Unsigned minimum.','line_number':3025,'multiline':False]['text':' Unsigned pairwise minimum.','line_number':3030,'multiline':False]['text':' Unsigned minimum across vector.','line_number':3035,'multiline':False]['text':' Transpose vectors (primary).','line_number':3039,'multiline':False]['text':' Transpose vectors (secondary).','line_number':3044,'multiline':False]['text':' Unzip vectors (primary).','line_number':3049,'multiline':False]['text':' Unzip vectors (secondary).','line_number':3054,'multiline':False]['text':' Zip vectors (primary).','line_number':3059,'multiline':False]['text':' Zip vectors (secondary).','line_number':3064,'multiline':False]['text':' Signed shift right by immediate.','line_number':3069,'multiline':False]['text':' Unsigned shift right by immediate.','line_number':3074,'multiline':False]['text':' Signed rounding shift right by immediate.','line_number':3079,'multiline':False]['text':' Unsigned rounding shift right by immediate.','line_number':3084,'multiline':False]['text':' Signed shift right by immediate and accumulate.','line_number':3089,'multiline':False]['text':' Unsigned shift right by immediate and accumulate.','line_number':3094,'multiline':False]['text':' Signed rounding shift right by immediate and accumulate.','line_number':3099,'multiline':False]['text':' Unsigned rounding shift right by immediate and accumulate.','line_number':3104,'multiline':False]['text':' Shift right narrow by immediate.','line_number':3109,'multiline':False]['text':' Shift right narrow by immediate (second part).','line_number':3114,'multiline':False]['text':' Rounding shift right narrow by immediate.','line_number':3119,'multiline':False]['text':' Rounding shift right narrow by immediate (second part).','line_number':3124,'multiline':False]['text':' Unsigned saturating shift right narrow by immediate.','line_number':3129,'multiline':False]['text':' Unsigned saturating shift right narrow by immediate (second part).','line_number':3134,'multiline':False]['text':' Unsigned saturating rounding shift right narrow by immediate.','line_number':3139,'multiline':False]['text':' Unsigned saturating rounding shift right narrow by immediate (second part).','line_number':3144,'multiline':False]['text':' Signed saturating shift right narrow by immediate.','line_number':3149,'multiline':False]['text':' Signed saturating shift right narrow by immediate (second part).','line_number':3154,'multiline':False]['text':' Signed saturating rounded shift right narrow by immediate.','line_number':3159,'multiline':False]['text':' Signed saturating rounded shift right narrow by immediate (second part).','line_number':3164,'multiline':False]['text':' Signed saturating shift right unsigned narrow by immediate.','line_number':3169,'multiline':False]['text':' Signed saturating shift right unsigned narrow by immediate (second part).','line_number':3174,'multiline':False]['text':' Signed sat rounded shift right unsigned narrow by immediate.','line_number':3179,'multiline':False]['text':' Signed sat rounded shift right unsigned narrow by immediate (second part).','line_number':3184,'multiline':False]['text':' FP reciprocal step.','line_number':3189,'multiline':False]['text':' FP reciprocal estimate.','line_number':3194,'multiline':False]['text':' FP reciprocal square root estimate.','line_number':3198,'multiline':False]['text':' FP reciprocal square root step.','line_number':3202,'multiline':False]['text':' Signed absolute difference and accumulate long.','line_number':3207,'multiline':False]['text':' Signed absolute difference and accumulate long (second part).','line_number':3212,'multiline':False]['text':' Unsigned absolute difference and accumulate long.','line_number':3217,'multiline':False]['text':' Unsigned absolute difference and accumulate long (second part).','line_number':3222,'multiline':False]['text':' Signed absolute difference long.','line_number':3227,'multiline':False]['text':' Signed absolute difference long (second part).','line_number':3232,'multiline':False]['text':' Unsigned absolute difference long.','line_number':3237,'multiline':False]['text':' Unsigned absolute difference long (second part).','line_number':3242,'multiline':False]['text':' Polynomial multiply long.','line_number':3247,'multiline':False]['text':' Polynomial multiply long (second part).','line_number':3252,'multiline':False]['text':' Signed long multiply-add.','line_number':3257,'multiline':False]['text':' Signed long multiply-add (second part).','line_number':3262,'multiline':False]['text':' Unsigned long multiply-add.','line_number':3267,'multiline':False]['text':' Unsigned long multiply-add (second part).','line_number':3272,'multiline':False]['text':' Signed long multiply-sub.','line_number':3277,'multiline':False]['text':' Signed long multiply-sub (second part).','line_number':3282,'multiline':False]['text':' Unsigned long multiply-sub.','line_number':3287,'multiline':False]['text':' Unsigned long multiply-sub (second part).','line_number':3292,'multiline':False]['text':' Signed long multiply.','line_number':3297,'multiline':False]['text':' Signed long multiply (second part).','line_number':3302,'multiline':False]['text':' Signed saturating doubling long multiply-add.','line_number':3307,'multiline':False]['text':' Signed saturating doubling long multiply-add (second part).','line_number':3312,'multiline':False]['text':' Signed saturating doubling long multiply-subtract.','line_number':3317,'multiline':False]['text':' Signed saturating doubling long multiply-subtract (second part).','line_number':3322,'multiline':False]['text':' Signed saturating doubling long multiply.','line_number':3327,'multiline':False]['text':' Signed saturating doubling long multiply (second part).','line_number':3332,'multiline':False]['text':' Signed saturating doubling multiply returning high half.','line_number':3337,'multiline':False]['text':' Signed saturating rounding doubling multiply returning high half.','line_number':3342,'multiline':False]['text':' Signed saturating doubling multiply element returning high half.','line_number':3347,'multiline':False]['text':' Signed saturating rounding doubling multiply element returning high half.','line_number':3353,'multiline':False]['text':' Unsigned long multiply long.','line_number':3359,'multiline':False]['text':' Unsigned long multiply (second part).','line_number':3364,'multiline':False]['text':' Add narrow returning high half.','line_number':3369,'multiline':False]['text':' Add narrow returning high half (second part).','line_number':3374,'multiline':False]['text':' Rounding add narrow returning high half.','line_number':3379,'multiline':False]['text':' Rounding add narrow returning high half (second part).','line_number':3384,'multiline':False]['text':' Subtract narrow returning high half.','line_number':3389,'multiline':False]['text':' Subtract narrow returning high half (second part).','line_number':3394,'multiline':False]['text':' Rounding subtract narrow returning high half.','line_number':3399,'multiline':False]['text':' Rounding subtract narrow returning high half (second part).','line_number':3404,'multiline':False]['text':' FP vector multiply accumulate.','line_number':3409,'multiline':False]['text':' FP vector multiply subtract.','line_number':3414,'multiline':False]['text':' FP vector multiply extended.','line_number':3419,'multiline':False]['text':' FP absolute greater than or equal.','line_number':3424,'multiline':False]['text':' FP absolute greater than.','line_number':3429,'multiline':False]['text':' FP multiply by element.','line_number':3434,'multiline':False]['text':' FP fused multiply-add to accumulator by element.','line_number':3440,'multiline':False]['text':' FP fused multiply-sub from accumulator by element.','line_number':3446,'multiline':False]['text':' FP multiply extended by element.','line_number':3452,'multiline':False]['text':' FP compare equal.','line_number':3458,'multiline':False]['text':' FP greater than.','line_number':3463,'multiline':False]['text':' FP greater than or equal.','line_number':3468,'multiline':False]['text':' FP compare equal to zero.','line_number':3473,'multiline':False]['text':' FP greater than zero.','line_number':3478,'multiline':False]['text':' FP greater than or equal to zero.','line_number':3483,'multiline':False]['text':' FP less than or equal to zero.','line_number':3488,'multiline':False]['text':' FP less than to zero.','line_number':3493,'multiline':False]['text':' FP absolute difference.','line_number':3498,'multiline':False]['text':' FP pairwise add vector.','line_number':3503,'multiline':False]['text':' FP pairwise add scalar.','line_number':3508,'multiline':False]['text':' FP pairwise maximum vector.','line_number':3512,'multiline':False]['text':' FP pairwise maximum scalar.','line_number':3517,'multiline':False]['text':' FP pairwise minimum vector.','line_number':3521,'multiline':False]['text':' FP pairwise minimum scalar.','line_number':3526,'multiline':False]['text':' FP pairwise maximum number vector.','line_number':3530,'multiline':False]['text':' FP pairwise maximum number scalar.','line_number':3535,'multiline':False]['text':' FP pairwise minimum number vector.','line_number':3539,'multiline':False]['text':' FP pairwise minimum number scalar.','line_number':3544,'multiline':False]['text':' Emit generic instructions.','line_number':3548,'multiline':False]['text':' Emit raw instructions into the instruction stream.','line_number':3549,'multiline':False]['text':' Emit 32 bits of data into the instruction stream.','line_number':3552,'multiline':False]['text':' Emit 64 bits of data into the instruction stream.','line_number':3557,'multiline':False]['text':' Code generation helpers.','line_number':3562,'multiline':False]['text':' Register encoding.','line_number':3564,'multiline':False]['text':' These encoding functions allow the stack pointer to be encoded, and','line_number':3606,'multiline':False]['text':' disallow the zero register.','line_number':3607,'multiline':False]['text':' Flags encoding.','line_number':3618,'multiline':False]['text':' PC-relative address encoding.','line_number':3633,'multiline':False]['text':' Branch encoding.','line_number':3642,'multiline':False]['text':' Subtract five from the shift offset, as we need bit 5 from bit_pos.','line_number':3665,'multiline':False]['text':' Data Processing encoding.','line_number':3673,'multiline':False]['text':' No shift required.','line_number':3680,'multiline':False]['text':' MemOperand offset encoding.','line_number':3759,'multiline':False]['text':' Move immediates encoding.','line_number':3837,'multiline':False]['text':' FP Immediates.','line_number':3848,'multiline':False]['text':' FP register type.','line_number':3852,'multiline':False]['text':' Immediate field checking helpers.','line_number':3862,'multiline':False]['text':' Instruction bits for vector format in data processing operations.','line_number':3878,'multiline':False]['text':' Instruction bits for vector format in floating point data processing','line_number':3899,'multiline':False]['text':' operations.','line_number':3900,'multiline':False]['text':' Floating point scalar formats.','line_number':3903,'multiline':False]['text':' Two lane floating point vector formats.','line_number':3908,'multiline':False]['text':' Four lane floating point vector format.','line_number':3914,'multiline':False]['text':' Instruction bits for vector format in load and store operations.','line_number':3919,'multiline':False]['text':' Instruction bits for scalar format in data processing operations.','line_number':3941,'multiline':False]['text':' Functions for emulating operands not directly supported by the instruction','line_number':4094,'multiline':False]['text':' set.','line_number':4095,'multiline':False]['text':' Find an appropriate LoadStoreOp or LoadStorePairOp for the specified','line_number':4116,'multiline':False]['text':' registers. Only simple loads are supported; sign- and zero-extension (such','line_number':4117,'multiline':False]['text':' as in LDPSW_x or LDRB_w) are not supported.','line_number':4118,'multiline':False]['text':' Convenience pass-through for CPU feature checks.','line_number':4131,'multiline':False]['text':' Determine whether the target CPU has the specified registers, based on the','line_number':4139,'multiline':False]['text':' currently-enabled CPU features. Presence of a register does not imply','line_number':4140,'multiline':False]['text':' support for arbitrary operations on it. For example, CPUs with FP have H','line_number':4141,'multiline':False]['text':' registers, but most half-precision operations require the FPHalf feature.','line_number':4142,'multiline':False]['text':'','line_number':4143,'multiline':False]['text':' These are used to check CPU features in loads and stores that have the same','line_number':4144,'multiline':False]['text':' entry point for both integer and FP registers.','line_number':4145,'multiline':False]['text':' Instruction helpers.','line_number':4155,'multiline':False]['text':' Encode the specified MemOperand for the specified access size and scaling','line_number':4292,'multiline':False]['text':' preference.','line_number':4293,'multiline':False]['text':' Prevent generation of a literal pool for the next |maxInst| instructions.','line_number':4299,'multiline':False]['text':' Guarantees instruction linearity.','line_number':4300,'multiline':False]['text':' Buffer where the code is emitted.','line_number':4315,'multiline':False]['text':' namespace vixl','line_number':4325,'multiline':False]['text':' VIXL_A64_ASSEMBLER_A64_H_','line_number':4327,'multiline':False]