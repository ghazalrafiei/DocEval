['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
**********************************************************************
*   Copyright (c) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':3,'multiline':True]['text':'','line_number':9,'multiline':False]['text':'  rbbitblb.cpp','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' fDStates is UVector<RBBIStateDescriptor *>','line_number':42,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'   RBBITableBuilder::buildForwardTable  -  This is the main function for building','line_number':64,'multiline':False]['text':'                               the DFA state transition table from the RBBI rules parse tree.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':67,'multiline':False]['text':' If there were no rules, just return.  This situation can easily arise','line_number':74,'multiline':False]['text':'   for the reverse rules.','line_number':75,'multiline':False]['text':'','line_number':80,'multiline':False]['text':' Walk through the tree, replacing any references to $variables with a copy of the','line_number':81,'multiline':False]['text':'   parse tree for the substition expression.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' If the rules contained any references to {bof} ','line_number':93,'multiline':False]['text':'   add a {bof} <cat> <former root of tree> to the','line_number':94,'multiline':False]['text':'   tree.  Means that all matches must start out with the ','line_number':95,'multiline':False]['text':'   {bof} fake character.','line_number':96,'multiline':False]['text':' ','line_number':97,'multiline':False]['text':' Delete and exit if memory allocation failed.','line_number':101,'multiline':False]['text':' Reserved value for {bof}.','line_number':111,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' Add a unique right-end marker to the expression.','line_number':116,'multiline':False]['text':'   Appears as a cat-node, left child being the original tree,','line_number':117,'multiline':False]['text':'   right child being the end marker.','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':' Exit if memory allocation failed.','line_number':121,'multiline':False]['text':' Delete and exit if memory allocation failed.','line_number':129,'multiline':False]['text':'','line_number':138,'multiline':False]['text':'  Replace all references to UnicodeSets with the tree for the equivalent','line_number':139,'multiline':False]['text':'      expression.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' calculate the functions nullable, firstpos, lastpos and followpos on','line_number':152,'multiline':False]['text':' nodes in the parse tree.','line_number':153,'multiline':False]['text':'    See the algorithm description in Aho.','line_number':154,'multiline':False]['text':'    Understanding how this works by looking at the code alone will be','line_number':155,'multiline':False]['text':'       nearly impossible.','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':'','line_number':167,'multiline':False]['text':'  For "chained" rules, modify the followPos sets','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':'','line_number':174,'multiline':False]['text':'  BOF (start of input) test fixup.','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' Build the DFA state transition tables.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':'','line_number':190,'multiline':False]['text':' Update the global table of rule status {tag} values','line_number':191,'multiline':False]['text':' The rule builder has a global vector of status values that are common','line_number':192,'multiline':False]['text':'    for all tables.  Merge the ones from this table into the global set.','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':'   calcNullable.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':204,'multiline':False]['text':' These are non-empty leaf node types.','line_number':211,'multiline':False]['text':' Lookahead marker node.  It's a leaf, so no recursion on children.','line_number':217,'multiline':False]['text':' It's nullable because it does not match any literal text from the input stream.','line_number':218,'multiline':False]['text':' The node is not a leaf.','line_number':224,'multiline':False]['text':'  Calculate nullable on its children.','line_number':225,'multiline':False]['text':' Apply functions from table 3.40 in Aho','line_number':229,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':247,'multiline':False]['text':'','line_number':248,'multiline':False]['text':'   calcFirstPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':249,'multiline':False]['text':'','line_number':250,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':251,'multiline':False]['text':' These are non-empty leaf node types.','line_number':260,'multiline':False]['text':' Note: In order to maintain the sort invariant on the set,','line_number':261,'multiline':False]['text':' this function should only be called on a node whose set is','line_number':262,'multiline':False]['text':' empty to start with.','line_number':263,'multiline':False]['text':' The node is not a leaf.','line_number':268,'multiline':False]['text':'  Calculate firstPos on its children.','line_number':269,'multiline':False]['text':' Apply functions from table 3.40 in Aho','line_number':273,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':293,'multiline':False]['text':'','line_number':294,'multiline':False]['text':'   calcLastPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':297,'multiline':False]['text':' These are non-empty leaf node types.','line_number':306,'multiline':False]['text':' Note: In order to maintain the sort invariant on the set,','line_number':307,'multiline':False]['text':' this function should only be called on a node whose set is','line_number':308,'multiline':False]['text':' empty to start with.','line_number':309,'multiline':False]['text':' The node is not a leaf.','line_number':314,'multiline':False]['text':'  Calculate lastPos on its children.','line_number':315,'multiline':False]['text':' Apply functions from table 3.40 in Aho','line_number':319,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':'   calcFollowPos.    Impossible to explain succinctly.  See Aho, section 3.9','line_number':341,'multiline':False]['text':'','line_number':342,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':343,'multiline':False]['text':' Aho rule #1','line_number':354,'multiline':False]['text':' is 'i' in Aho's description','line_number':356,'multiline':False]['text':' Aho rule #2','line_number':367,'multiline':False]['text':' again, n and i are the names from Aho's description.','line_number':370,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':'    addRuleRootNodes    Recursively walk a parse tree, adding all nodes flagged','line_number':385,'multiline':False]['text':'                        as roots of a rule to a destination vector.','line_number':386,'multiline':False]['text':'','line_number':387,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':388,'multiline':False]['text':' Note: rules cannot nest. If we found a rule start node,','line_number':395,'multiline':False]['text':'       no child node can also be a start node.','line_number':396,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':403,'multiline':False]['text':'','line_number':404,'multiline':False]['text':'   calcChainedFollowPos.    Modify the previously calculated followPos sets','line_number':405,'multiline':False]['text':'                            to implement rule chaining.  NOT described by Aho','line_number':406,'multiline':False]['text':'','line_number':407,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':408,'multiline':False]['text':' get a list all leaf nodes','line_number':416,'multiline':False]['text':' Collect all leaf nodes that can start matches for rules','line_number':422,'multiline':False]['text':' with inbound chaining enabled, which is the union of the ','line_number':423,'multiline':False]['text':' firstPosition sets from each of the rule root nodes.','line_number':424,'multiline':False]['text':' Identify leaf nodes that correspond to overall rule match positions.','line_number':446,'multiline':False]['text':' These include the endMarkNode in their followPos sets.','line_number':447,'multiline':False]['text':'','line_number':448,'multiline':False]['text':' Note: do not consider other end marker nodes, those that are added to','line_number':449,'multiline':False]['text':'       look-ahead rules. These can't chain; a match immediately stops','line_number':450,'multiline':False]['text':'       further matching. This leaves exactly one end marker node, the one','line_number':451,'multiline':False]['text':'       at the end of the complete tree.','line_number':452,'multiline':False]['text':' We've got a node that can end a match.','line_number':458,'multiline':False]['text':' !!LBCMNoChain implementation:  If this node's val correspond to','line_number':460,'multiline':False]['text':' the Line Break $CM char class, don't chain from it.','line_number':461,'multiline':False]['text':' TODO:  Remove this. !!LBCMNoChain is deprecated, and is not used','line_number':462,'multiline':False]['text':'        by any of the standard ICU rules.','line_number':463,'multiline':False]['text':' c == -1 occurs with sets containing only the {eof} marker string.','line_number':467,'multiline':False]['text':' Now iterate over the nodes that can start a match, looking for ones','line_number':475,'multiline':False]['text':'   with the same char class as our ending node.','line_number':476,'multiline':False]['text':' The end val (character class) of one possible match is the','line_number':485,'multiline':False]['text':'   same as the start of another.','line_number':486,'multiline':False]['text':' Add all nodes from the followPos of the start node to the','line_number':488,'multiline':False]['text':'  followPos set of the end node, which will have the effect of','line_number':489,'multiline':False]['text':'  letting matches transition from a match state at endNode','line_number':490,'multiline':False]['text':'  to the second char of a match starting with startNode.','line_number':491,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':499,'multiline':False]['text':'','line_number':500,'multiline':False]['text':'   bofFixup.    Fixup for state tables that include {bof} beginning of input testing.','line_number':501,'multiline':False]['text':'                Do an swizzle similar to chaining, modifying the followPos set of','line_number':502,'multiline':False]['text':'                the bofNode to include the followPos nodes from other {bot} nodes','line_number':503,'multiline':False]['text':'                scattered through the tree.','line_number':504,'multiline':False]['text':'','line_number':505,'multiline':False]['text':'                This function has much in common with calcChainedFollowPos().','line_number':506,'multiline':False]['text':'','line_number':507,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':508,'multiline':False]['text':'   The parse tree looks like this ...','line_number':515,'multiline':False]['text':'         fTree root  --->       <cat>','line_number':516,'multiline':False]['text':'                               /     \       .','line_number':517,'multiline':False]['text':'                            <cat>   <#end node>','line_number':518,'multiline':False]['text':'                           /     \  .','line_number':519,'multiline':False]['text':'                     <bofNode>   rest','line_number':520,'multiline':False]['text':'                               of tree','line_number':521,'multiline':False]['text':'','line_number':522,'multiline':False]['text':'    We will be adding things to the followPos set of the <bofNode>','line_number':523,'multiline':False]['text':'','line_number':524,'multiline':False]['text':' Get all nodes that can be the start a match of the user-written rules','line_number':529,'multiline':False]['text':'  (excluding the fake bofNode)','line_number':530,'multiline':False]['text':'  We want the nodes that can start a match in the','line_number':531,'multiline':False]['text':'     part labeled "rest of tree"','line_number':532,'multiline':False]['text':' ','line_number':533,'multiline':False]['text':'  We found a leaf node corresponding to a {bof} that was','line_number':545,'multiline':False]['text':'    explicitly written into a rule.','line_number':546,'multiline':False]['text':'  Add everything from the followPos set of this node to the','line_number':547,'multiline':False]['text':'    followPos set of the fake bofNode at the start of the tree.','line_number':548,'multiline':False]['text':'  ','line_number':549,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':555,'multiline':False]['text':'','line_number':556,'multiline':False]['text':'   buildStateTable()    Determine the set of runtime DFA states and the','line_number':557,'multiline':False]['text':'                        transition tables for these states, by the algorithm','line_number':558,'multiline':False]['text':'                        of fig. 3.44 in Aho.','line_number':559,'multiline':False]['text':'','line_number':560,'multiline':False]['text':'                        Most of the comments are quotes of Aho's psuedo-code.','line_number':561,'multiline':False]['text':'','line_number':562,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':563,'multiline':False]['text':' Set it to NULL to avoid uninitialized warning','line_number':569,'multiline':False]['text':'','line_number':571,'multiline':False]['text':' Add a dummy state 0 - the stop state.  Not from Aho.','line_number':572,'multiline':False]['text':' initially, the only unmarked state in Dstates is firstpos(root),','line_number':591,'multiline':False]['text':'       where toot is the root of the syntax tree for (r)#;','line_number':592,'multiline':False]['text':' while there is an unmarked state T in Dstates do begin','line_number':613,'multiline':False]['text':' mark T;','line_number':629,'multiline':False]['text':' for each input symbol a do begin','line_number':632,'multiline':False]['text':' let U be the set of positions that are in followpos(p)','line_number':635,'multiline':False]['text':'    for some position p in T','line_number':636,'multiline':False]['text':'    such that the symbol at position p is a;','line_number':637,'multiline':False]['text':' if U is not empty and not in DStates then','line_number':655,'multiline':False]['text':' Add U as an unmarked state to Dstates','line_number':673,'multiline':False]['text':' Dtran[T, a] := U;','line_number':691,'multiline':False]['text':' delete local pointers only if error occured.','line_number':697,'multiline':False]['text':'*
 * mapLookAheadRules
 *
 ','line_number':704,'multiline':True]['text':' Establish the look-ahead slot for this state, if the state covers','line_number':722,'multiline':False]['text':' any look-ahead nodes - corresponding to the '/' in look-ahead rules.','line_number':723,'multiline':False]['text':' If any of the look-ahead nodes already have a slot assigned, use it,','line_number':725,'multiline':False]['text':' otherwise assign a new one.','line_number':726,'multiline':False]['text':' Set when rule was originally parsed.','line_number':735,'multiline':False]['text':' TODO: figure out if this can fail, change to setting an error code if so.','line_number':743,'multiline':False]['text':' For each look ahead node covered by this state,','line_number':756,'multiline':False]['text':' set the mapping from the node's rule number to the look ahead slot.','line_number':757,'multiline':False]['text':' There can be multiple nodes/rule numbers going to the same la slot.','line_number':758,'multiline':False]['text':' Set when rule was originally parsed.','line_number':765,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':775,'multiline':False]['text':'','line_number':776,'multiline':False]['text':'   flagAcceptingStates    Identify accepting states.','line_number':777,'multiline':False]['text':'                          First get a list of all of the end marker nodes.','line_number':778,'multiline':False]['text':'                          Then, for each state s,','line_number':779,'multiline':False]['text':'                              if s contains one of the end marker nodes in its list of tree positions then','line_number':780,'multiline':False]['text':'                                  s is an accepting state.','line_number':781,'multiline':False]['text':'','line_number':782,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':783,'multiline':False]['text':' Any non-zero value for fAccepting means this is an accepting node.','line_number':807,'multiline':False]['text':' The value is what will be returned to the user as the break status.','line_number':808,'multiline':False]['text':' If no other value was specified, force it to ACCEPTING_UNCONDITIONAL (1).','line_number':809,'multiline':False]['text':' State hasn't been marked as accepting yet.  Do it now.','line_number':812,'multiline':False]['text':' Both lookahead and non-lookahead accepting for this state.','line_number':819,'multiline':False]['text':' Favor the look-ahead, because a look-ahead match needs to','line_number':820,'multiline':False]['text':' immediately stop the run-time engine. First match, not longest.','line_number':821,'multiline':False]['text':' implicit else:','line_number':824,'multiline':False]['text':' if sd->fAccepting already had a value other than 0 or 1, leave it be.','line_number':825,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':832,'multiline':False]['text':'','line_number':833,'multiline':False]['text':'    flagLookAheadStates   Very similar to flagAcceptingStates, above.','line_number':834,'multiline':False]['text':'','line_number':835,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':836,'multiline':False]['text':' if (sd->fLookAhead != 0 && sd->fLookAhead != lookaheadSlot) {','line_number':861,'multiline':False]['text':'     printf("%s:%d Bingo. sd->fLookAhead:%d   lookaheadSlot:%d\n",','line_number':862,'multiline':False]['text':'            __FILE__, __LINE__, sd->fLookAhead, lookaheadSlot);','line_number':863,'multiline':False]['text':' }','line_number':864,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':874,'multiline':False]['text':'','line_number':875,'multiline':False]['text':'    flagTaggedStates','line_number':876,'multiline':False]['text':'','line_number':877,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':878,'multiline':False]['text':' For each tag node t (all of 'em)','line_number':895,'multiline':False]['text':'    For each state  s (row in the state table)','line_number':898,'multiline':False]['text':'       if  s include the tag node t','line_number':900,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':910,'multiline':False]['text':'','line_number':911,'multiline':False]['text':'  mergeRuleStatusVals','line_number':912,'multiline':False]['text':'','line_number':913,'multiline':False]['text':'      Update the global table of rule status {tag} values','line_number':914,'multiline':False]['text':'      The rule builder has a global vector of status values that are common','line_number':915,'multiline':False]['text':'      for all tables.  Merge the ones from this table into the global set.','line_number':916,'multiline':False]['text':'','line_number':917,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':918,'multiline':False]['text':'','line_number':920,'multiline':False]['text':'  The basic outline of what happens here is this...','line_number':921,'multiline':False]['text':'','line_number':922,'multiline':False]['text':'    for each state in this state table','line_number':923,'multiline':False]['text':'       if the status tag list for this state is in the global statuses list','line_number':924,'multiline':False]['text':'           record where and','line_number':925,'multiline':False]['text':'           continue with the next state','line_number':926,'multiline':False]['text':'       else','line_number':927,'multiline':False]['text':'           add the tag list for this state to the global list.','line_number':928,'multiline':False]['text':'','line_number':929,'multiline':False]['text':' Pre-set a single tag of {0} into the table.','line_number':933,'multiline':False]['text':'   We will need this as a default, for rule sets with no explicit tagging.','line_number':934,'multiline':False]['text':' Num of statuses in group','line_number':936,'multiline':False]['text':'   and our single status of zero','line_number':937,'multiline':False]['text':'    For each state','line_number':940,'multiline':False]['text':' No tag values are explicitly associated with this state.','line_number':945,'multiline':False]['text':'   Set the default tag value.','line_number':946,'multiline':False]['text':' There are tag(s) associated with this state.','line_number':951,'multiline':False]['text':'   fTagsIdx will be the index into the global tag list for this state's tag values.','line_number':952,'multiline':False]['text':'   Initial value of -1 flags that we haven't got it set yet.','line_number':953,'multiline':False]['text':' indexes into the global rule status vals list','line_number':955,'multiline':False]['text':' Loop runs once per group of tags in the global list','line_number':958,'multiline':False]['text':' The number of tags for this state is different from','line_number':963,'multiline':False]['text':'    the number of tags in this group from the global list.','line_number':964,'multiline':False]['text':'    Continue with the next group from the global list.','line_number':965,'multiline':False]['text':' The lengths match, go ahead and compare the actual tag values','line_number':968,'multiline':False]['text':'    between this state and the group from the global list.','line_number':969,'multiline':False]['text':' Mismatch.','line_number':973,'multiline':False]['text':' We found a set of tag values in the global list that match','line_number':979,'multiline':False]['text':'   those for this state.  Use them.','line_number':980,'multiline':False]['text':' No suitable entry in the global tag list already.  Add one','line_number':987,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1003,'multiline':False]['text':'','line_number':1004,'multiline':False]['text':'  sortedAdd  Add a value to a vector of sorted values (ints).','line_number':1005,'multiline':False]['text':'             Do not replicate entries; if the value is already there, do not','line_number':1006,'multiline':False]['text':'                add a second one.','line_number':1007,'multiline':False]['text':'             Lazily create the vector if it does not already exist.','line_number':1008,'multiline':False]['text':'','line_number':1009,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1010,'multiline':False]['text':' The value is already in the vector.  Don't add it again.','line_number':1025,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1037,'multiline':False]['text':'','line_number':1038,'multiline':False]['text':'  setAdd     Set operation on UVector','line_number':1039,'multiline':False]['text':'             dest = dest union source','line_number':1040,'multiline':False]['text':'             Elements may only appear once and must be sorted.','line_number':1041,'multiline':False]['text':'','line_number':1042,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1043,'multiline':False]['text':' Handle small cases without malloc','line_number':1048,'multiline':False]['text':' destArray.getArrayLimit()?','line_number':1058,'multiline':False]['text':' sourceArray.getArrayLimit()?','line_number':1066,'multiline':False]['text':' Avoid multiple "get element" calls by getting the contents into arrays','line_number':1068,'multiline':False]['text':' This check is required for machines with segmented memory, like i5/OS.','line_number':1079,'multiline':False]['text':' Direct pointer comparison is not recommended.','line_number':1080,'multiline':False]['text':' *sourcePtr < *destPtr ','line_number':1084,'multiline':True]['text':' At most one of these two cleanup loops will execute','line_number':1089,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':'  setEqual    Set operation on UVector.','line_number':1104,'multiline':False]['text':'              Compare for equality.','line_number':1105,'multiline':False]['text':'              Elements must be sorted.','line_number':1106,'multiline':False]['text':'','line_number':1107,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1108,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1114,'multiline':False]['text':'','line_number':1115,'multiline':False]['text':'  printPosSets   Debug function.  Dump Nullable, firstpos, lastpos and followpos','line_number':1116,'multiline':False]['text':'                 for each node in the tree.','line_number':1117,'multiline':False]['text':'','line_number':1118,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1119,'multiline':False]['text':'','line_number':1144,'multiline':False]['text':'    findDuplCharClassFrom()','line_number':1145,'multiline':False]['text':'','line_number':1146,'multiline':False]['text':' Note: dictionary & non-dictionary columns cannot be merged.','line_number':1152,'multiline':False]['text':'       The limitSecond value prevents considering mixed pairs.','line_number':1153,'multiline':False]['text':'       Dictionary categories are >= DictCategoriesStart.','line_number':1154,'multiline':False]['text':'       Non dict categories are   <  DictCategoriesStart.','line_number':1155,'multiline':False]['text':' Initialized to different values to prevent returning true if numStates = 0 (implies no duplicates).','line_number':1159,'multiline':False]['text':'','line_number':1179,'multiline':False]['text':'    removeColumn()','line_number':1180,'multiline':False]['text':'','line_number':1181,'multiline':False]['text':'
 * findDuplicateState
 ','line_number':1191,'multiline':True]['text':' Note that fSafeTable has a deleter function','line_number':1288,'multiline':False]['text':' and will auto-delete the removed element.','line_number':1289,'multiline':False]['text':'
 * RemoveDuplicateStates
 ','line_number':1308,'multiline':True]['text':' printf("Removing duplicate states (%d, %d)\n", dupls.first, dupls.second);','line_number':1316,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1324,'multiline':False]['text':'','line_number':1325,'multiline':False]['text':'   getTableSize()    Calculate the size of the runtime form of this','line_number':1326,'multiline':False]['text':'                     state transition table.','line_number':1327,'multiline':False]['text':'','line_number':1328,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1329,'multiline':False]['text':' The header, with no rows to the table.','line_number':1340,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1358,'multiline':False]['text':'','line_number':1359,'multiline':False]['text':'   exportTable()    export the state transition table in the format required','line_number':1360,'multiline':False]['text':'                    by the runtime engine.  getTableSize() bytes of memory','line_number':1361,'multiline':False]['text':'                    must be available at the output address "where".','line_number':1362,'multiline':False]['text':'','line_number':1363,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1364,'multiline':False]['text':'*
 *   Synthesize a safe state table from the main state table.
 ','line_number':1428,'multiline':True]['text':' The safe table creation has three steps:','line_number':1432,'multiline':False]['text':' 1. Identifiy pairs of character classes that are "safe." Safe means that boundaries','line_number':1434,'multiline':False]['text':' following the pair do not depend on context or state before the pair. To test','line_number':1435,'multiline':False]['text':' whether a pair is safe, run it through the main forward state table, starting','line_number':1436,'multiline':False]['text':' from each state. If the the final state is the same, no matter what the starting state,','line_number':1437,'multiline':False]['text':' the pair is safe.','line_number':1438,'multiline':False]['text':'','line_number':1439,'multiline':False]['text':' 2. Build a state table that recognizes the safe pairs. It's similar to their','line_number':1440,'multiline':False]['text':' forward table, with a column for each input character [class], and a row for','line_number':1441,'multiline':False]['text':' each state. Row 1 is the start state, and row 0 is the stop state. Initially','line_number':1442,'multiline':False]['text':' create an additional state for each input character category; being in','line_number':1443,'multiline':False]['text':' one of these states means that the character has been seen, and is potentially','line_number':1444,'multiline':False]['text':' the first of a pair. In each of these rows, the entry for the second character','line_number':1445,'multiline':False]['text':' of a safe pair is set to the stop state (0), indicating that a match was found.','line_number':1446,'multiline':False]['text':' All other table entries are set to the state corresponding the current input','line_number':1447,'multiline':False]['text':' character, allowing that charcter to be the of a start following pair.','line_number':1448,'multiline':False]['text':'','line_number':1449,'multiline':False]['text':' Because the safe rules are to be run in reverse, moving backwards in the text,','line_number':1450,'multiline':False]['text':' the first and second pair categories are swapped when building the table.','line_number':1451,'multiline':False]['text':'','line_number':1452,'multiline':False]['text':' 3. Compress the table. There are typically many rows (states) that are','line_number':1453,'multiline':False]['text':' equivalent - that have zeroes (match completed) in the same columns -','line_number':1454,'multiline':False]['text':' and can be folded together.','line_number':1455,'multiline':False]['text':' Each safe pair is stored as two UChars in the safePair string.','line_number':1457,'multiline':False]['text':' printf("(%d, %d) ", c1, c2);','line_number':1483,'multiline':False]['text':' printf("\n");','line_number':1486,'multiline':False]['text':' Populate the initial safe table.','line_number':1489,'multiline':False]['text':' The table as a whole is UVector<UnicodeString>','line_number':1490,'multiline':False]['text':' Each row is represented by a UnicodeString, being used as a Vector<int16>.','line_number':1491,'multiline':False]['text':' Row 0 is the stop state.','line_number':1492,'multiline':False]['text':' Row 1 is the start sate.','line_number':1493,'multiline':False]['text':' Row 2 and beyond are other states, initially one per char class, but','line_number':1494,'multiline':False]['text':'   after initial construction, many of the states will be combined, compacting the table.','line_number':1495,'multiline':False]['text':' The String holds the nextState data only. The four leading fields of a row, fAccepting,','line_number':1496,'multiline':False]['text':' fLookAhead, etc. are not needed for the safe table, and are omitted at this stage of building.','line_number':1497,'multiline':False]['text':' From the start state, each input char class transitions to the state for that input.','line_number':1505,'multiline':False]['text':' Note: +2 for the start & stop state.','line_number':1508,'multiline':False]['text':' Initially make every other state table row look like the start state row,','line_number':1512,'multiline':False]['text':' UnicodeString assignment, copies contents.','line_number':1515,'multiline':False]['text':' Run through the safe pairs, set the next state to zero when pair has been seen.','line_number':1518,'multiline':False]['text':' Zero being the stop state, meaning we found a safe point.','line_number':1519,'multiline':False]['text':' Remove duplicate or redundant rows from the table.','line_number':1528,'multiline':False]['text':' printf("Removing duplicate safe states (%d, %d)\n", states.first, states.second);','line_number':1531,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1537,'multiline':False]['text':'','line_number':1538,'multiline':False]['text':'   getSafeTableSize()    Calculate the size of the runtime form of this','line_number':1539,'multiline':False]['text':'                         safe state table.','line_number':1540,'multiline':False]['text':'','line_number':1541,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1542,'multiline':False]['text':' The header, with no rows to the table.','line_number':1553,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1571,'multiline':False]['text':'','line_number':1572,'multiline':False]['text':'   exportSafeTable()   export the state transition table in the format required','line_number':1573,'multiline':False]['text':'                       by the runtime engine.  getTableSize() bytes of memory','line_number':1574,'multiline':False]['text':'                       must be available at the output address "where".','line_number':1575,'multiline':False]['text':'','line_number':1576,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1577,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1629,'multiline':False]['text':'','line_number':1630,'multiline':False]['text':'   printSet    Debug function.   Print the contents of a UVector','line_number':1631,'multiline':False]['text':'','line_number':1632,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1633,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1646,'multiline':False]['text':'','line_number':1647,'multiline':False]['text':'   printStates    Debug Function.  Dump the fully constructed state transition table.','line_number':1648,'multiline':False]['text':'','line_number':1649,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1650,'multiline':False]['text':' input "character"','line_number':1653,'multiline':False]['text':' state number','line_number':1654,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1682,'multiline':False]['text':'','line_number':1683,'multiline':False]['text':'   printSafeTable    Debug Function.  Dump the fully constructed safe table.','line_number':1684,'multiline':False]['text':'','line_number':1685,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1686,'multiline':False]['text':' input "character"','line_number':1689,'multiline':False]['text':' state number','line_number':1690,'multiline':False]['text':' Accepting, LookAhead, Tags','line_number':1712,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1724,'multiline':False]['text':'','line_number':1725,'multiline':False]['text':'   printRuleStatusTable    Debug Function.  Dump the common rule status table','line_number':1726,'multiline':False]['text':'','line_number':1727,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1728,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1753,'multiline':False]['text':'','line_number':1754,'multiline':False]['text':'   RBBIStateDescriptor     Methods.  This is a very struct-like class','line_number':1755,'multiline':False]['text':'                           Most access is directly to the fields.','line_number':1756,'multiline':False]['text':'','line_number':1757,'multiline':False]['text':'-----------------------------------------------------------------------------','line_number':1758,'multiline':False]['text':' fDtran needs to be pre-sized.','line_number':1777,'multiline':False]['text':'   It is indexed by input symbols, and will','line_number':1778,'multiline':False]['text':'   hold  the next state number for each','line_number':1779,'multiline':False]['text':'   symbol.','line_number':1780,'multiline':False]['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':1795,'multiline':True]