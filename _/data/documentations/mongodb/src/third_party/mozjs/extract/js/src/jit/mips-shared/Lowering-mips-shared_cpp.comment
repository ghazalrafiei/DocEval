['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' x = !y','line_number':36,'multiline':False]['text':' z = x+y','line_number':45,'multiline':False]['text':' See the documentation on willHaveDifferentLIRNodes; that test does not','line_number':76,'multiline':False]['text':' allow additional constraints.','line_number':77,'multiline':False]['text':' See special cases in CodeGeneratorMIPSShared::visitMulI64','line_number':83,'multiline':False]['text':' Division instructions are slow. Division by constant denominators can be','line_number':230,'multiline':False]['text':' rewritten to use other instructions.','line_number':231,'multiline':False]['text':' Check for division by a positive power of two, which is an easy and','line_number':234,'multiline':False]['text':' important case to optimize. Note that other optimizations are also','line_number':235,'multiline':False]['text':' possible; division by negative powers of two can be optimized in a','line_number':236,'multiline':False]['text':' similar manner as positive powers of two, and division by other','line_number':237,'multiline':False]['text':' constants can be optimized by a reciprocal multiplication technique.','line_number':238,'multiline':False]['text':' For MIPS it is best to keep the 'base' in a register if a bounds check','line_number':576,'multiline':False]['text':' is needed.','line_number':577,'multiline':False]['text':' A bounds check is only skipped for a positive index.','line_number':579,'multiline':False]['text':' If the target is a floating register then we need a temp at the','line_number':652,'multiline':False]['text':' CodeGenerator level for creating the result.','line_number':653,'multiline':False]['text':' If the target is a floating register then we need a temp at the','line_number':700,'multiline':False]['text':' CodeGenerator level for creating the result.','line_number':701,'multiline':False]['text':' Case 1: the result of the operation is not used.','line_number':840,'multiline':False]['text':'','line_number':841,'multiline':False]['text':' We can omit allocating the result BigInt.','line_number':842,'multiline':False]['text':' Case 2: the result of the operation is used.','line_number':851,'multiline':False]['text':' For a Uint32Array with a known double result we need a temp for','line_number':878,'multiline':False]['text':' the intermediate output.','line_number':879,'multiline':False]['text':' Probably many we want to do here','line_number':943,'multiline':False]