['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * SharedArrayRawBuffer
 *
 * A bookkeeping object always stored immediately before the raw buffer.
 * The buffer itself is mmap()'d and refcounted.
 * SharedArrayBufferObjects and structured clone objects may hold references.
 *
 *           |<------ sizeof ------>|<- length ->|
 *
 *   | waste | SharedArrayRawBuffer | data array | waste |
 *
 * Observe that if we want to map the data array on a specific address, such
 * as absolute zero (bug 1056027), then the SharedArrayRawBuffer cannot be
 * prefixed to the data array, it has to be a separate object, also in
 * shared memory.  (That would get rid of ~4KB of waste, as well.)  Very little
 * else would have to change throughout the engine, the SARB would point to
 * the data array using a constant pointer, instead of computing its
 * address.
 *
 * If preparedForWasm_ is true then length_ can change following initialization;
 * it may grow toward maxSize_.  See extensive comments above WasmArrayRawBuffer
 * in ArrayBufferObject.cpp.
 *
 * length_ only grows when the lock is held.
 ','line_number':25,'multiline':True]['text':' The maximum size of this buffer in wasm pages. If this buffer was not','line_number':55,'multiline':False]['text':' prepared for wasm, then this is zero.','line_number':56,'multiline':False]['text':' Does not include the page for the header','line_number':58,'multiline':False]['text':' A list of structures representing tasks waiting on some','line_number':61,'multiline':False]['text':' location within this buffer.','line_number':62,'multiline':False]['text':' we trust you won't abuse it ','line_number':68,'multiline':True]['text':' Allocate a SharedArrayRawBuffer for either Wasm or other users.','line_number':84,'multiline':False]['text':' `wasmMaxPages` must always be something for wasm and nothing for other','line_number':85,'multiline':False]['text':' users.','line_number':86,'multiline':False]['text':' This may be called from multiple threads.  The caller must take','line_number':110,'multiline':False]['text':' care of mutual exclusion.','line_number':111,'multiline':False]['text':' This may be called from multiple threads.  The caller must take','line_number':114,'multiline':False]['text':' care of mutual exclusion.','line_number':115,'multiline':False]['text':'
 * SharedArrayBufferObject
 *
 * When transferred to a WebWorker, the buffer is not detached on the
 * parent side, and both child and parent reference the same buffer.
 *
 * The underlying memory is memory-mapped and reference counted
 * (across workers and/or processes).  The SharedArrayBuffer object
 * has a finalizer that decrements the refcount, the last one to leave
 * (globally) unmaps the memory.  The sender ups the refcount before
 * transmitting the memory to another worker.
 *
 * SharedArrayBufferObject (or really the underlying memory) /is
 * racy/: more than one worker can access the memory at the same time.
 *
 * A TypedArrayObject (a view) references a SharedArrayBuffer
 * and keeps it alive.  The SharedArrayBuffer does /not/ reference its
 * views.
 ','line_number':153,'multiline':True]['text':' RAWBUF_SLOT holds a pointer (as "private" data) to the','line_number':176,'multiline':False]['text':' SharedArrayRawBuffer object, which is manually managed storage.','line_number':177,'multiline':False]['text':' LENGTH_SLOT holds the length of the underlying buffer as it was when this','line_number':180,'multiline':False]['text':' object was created.  For JS use cases this is the same length as the','line_number':181,'multiline':False]['text':' buffer, but for Wasm the buffer can grow, and the buffer's length may be','line_number':182,'multiline':False]['text':' greater than the object's length.','line_number':183,'multiline':False]['text':' Create a SharedArrayBufferObject with a new SharedArrayRawBuffer.','line_number':202,'multiline':False]['text':' Create a SharedArrayBufferObject using an existing SharedArrayRawBuffer,','line_number':206,'multiline':False]['text':' recording the given length in the SharedArrayBufferObject.','line_number':207,'multiline':False]['text':' Invariant: This method does not cause GC and can be called','line_number':226,'multiline':False]['text':' without anchoring the object it is called on.','line_number':227,'multiline':False]['text':' The buffer address is good enough as an ID provided the memory is not','line_number':229,'multiline':False]['text':' shared between processes or, if it is, it is mapped to the same address','line_number':230,'multiline':False]['text':' in every process.  (At the moment, shared memory cannot be shared between','line_number':231,'multiline':False]['text':' processes.)','line_number':232,'multiline':False]['text':' WebAssembly support:','line_number':245,'multiline':False]['text':' Create a SharedArrayBufferObject using the provided buffer and size.','line_number':247,'multiline':False]['text':' Assumes ownership of a reference to |buffer| even in case of failure,','line_number':248,'multiline':False]['text':' i.e. on failure |buffer->dropReference()| is performed.','line_number':249,'multiline':False]['text':' namespace js','line_number':271,'multiline':False]['text':' vm_SharedArrayObject_h','line_number':273,'multiline':False]