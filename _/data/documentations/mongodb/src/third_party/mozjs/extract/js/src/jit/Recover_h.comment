['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] IonMonkey Recover Instructions','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' This file contains all recover instructions.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' A recover instruction is an equivalent of a MIR instruction which is executed','line_number':24,'multiline':False]['text':' before the reconstruction of a baseline frame. Recover instructions are used','line_number':25,'multiline':False]['text':' by resume points to fill the value which are not produced by the code','line_number':26,'multiline':False]['text':' compiled by IonMonkey. For example, if a value is optimized away by','line_number':27,'multiline':False]['text':' IonMonkey, but required by Baseline, then we should have a recover','line_number':28,'multiline':False]['text':' instruction to fill the missing baseline frame slot.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' Recover instructions are executed either during a bailout, or under a call','line_number':31,'multiline':False]['text':' when the stack frame is introspected. If the stack is introspected, then any','line_number':32,'multiline':False]['text':' use of recover instruction must lead to an invalidation of the code.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' For each MIR instruction where |canRecoverOnBailout| might return true, we','line_number':35,'multiline':False]['text':' have a RInstruction of the same name.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' Recover instructions are encoded by the code generator into a compact buffer','line_number':38,'multiline':False]['text':' (RecoverWriter). The MIR instruction method |writeRecoverData| should write a','line_number':39,'multiline':False]['text':' tag in the |CompactBufferWriter| which is used by','line_number':40,'multiline':False]['text':' |RInstruction::readRecoverData| to dispatch to the right Recover','line_number':41,'multiline':False]['text':' instruction. Then |writeRecoverData| writes any local fields which are','line_number':42,'multiline':False]['text':' necessary for the execution of the |recover| method. These fields are decoded','line_number':43,'multiline':False]['text':' by the Recover instruction constructor which has a |CompactBufferReader| as','line_number':44,'multiline':False]['text':' argument. The constructor of the Recover instruction should follow the same','line_number':45,'multiline':False]['text':' sequence as the |writeRecoverData| method of the MIR instruction.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' Recover instructions are decoded by the |SnapshotIterator| (RecoverReader),','line_number':48,'multiline':False]['text':' which is given as argument of the |recover| methods, in order to read the','line_number':49,'multiline':False]['text':' operands.  The number of operands read should be the same as the result of','line_number':50,'multiline':False]['text':' |numOperands|, which corresponds to the number of operands of the MIR','line_number':51,'multiline':False]['text':' instruction.  Operands should be decoded in the same order as the operands of','line_number':52,'multiline':False]['text':' the MIR instruction.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' The result of the |recover| method should either be a failure, or a value','line_number':55,'multiline':False]['text':' stored on the |SnapshotIterator|, by using the |storeInstructionResult|','line_number':56,'multiline':False]['text':' method.','line_number':57,'multiline':False]['text':' As opposed to the MIR, there is no need to add more methods as every','line_number':155,'multiline':False]['text':' other instruction is well abstracted under the "recover" method.','line_number':156,'multiline':False]['text':' Call the copy constructor of a specific RInstruction, to do a copy of the','line_number':160,'multiline':False]['text':' RInstruction content.','line_number':161,'multiline':False]['text':' Number of allocations which are encoded in the Snapshot for recovering','line_number':164,'multiline':False]['text':' the current instruction.','line_number':165,'multiline':False]['text':' Function used to recover the value computed by this instruction. This','line_number':168,'multiline':False]['text':' function reads its arguments from the allocations listed on the snapshot','line_number':169,'multiline':False]['text':' iterator and stores its returned value on the snapshot iterator too.','line_number':170,'multiline':False]['text':' Decode an RInstruction on top of the reserved storage space, based on the','line_number':174,'multiline':False]['text':' tag written by the writeRecoverData function of the corresponding MIR','line_number':175,'multiline':False]['text':' instruction.','line_number':176,'multiline':False]['text':' Offset from script->code.','line_number':211,'multiline':False]['text':' Number of slots.','line_number':212,'multiline':False]['text':' Number of slots.','line_number':836,'multiline':False]['text':' +1 for the object.','line_number':843,'multiline':False]['text':' +1 for the array.','line_number':860,'multiline':False]['text':' +1 for the initalized length.','line_number':861,'multiline':False]['text':' +1 for the callObj.','line_number':918,'multiline':False]['text':' +1 for the callee.','line_number':919,'multiline':False]['text':' namespace jit','line_number':944,'multiline':False]['text':' namespace js','line_number':945,'multiline':False]['text':' jit_Recover_h ','line_number':947,'multiline':True]