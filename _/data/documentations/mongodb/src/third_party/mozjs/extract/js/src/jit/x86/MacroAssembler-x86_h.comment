['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::BigInt','line_number':13,'multiline':False]['text':' See documentation for ScratchTagScope and ScratchTagScopeRelease in','line_number':20,'multiline':False]['text':' MacroAssembler-x64.h.','line_number':21,'multiline':False]['text':' Perform a downcast. Should be removed by Bug 996602.','line_number':40,'multiline':False]['text':' If we are basing off %esp, the address will be invalid after the','line_number':49,'multiline':False]['text':' first push.','line_number':50,'multiline':False]['text':' The buffer is about to be linked, make sure any constant pools or excess','line_number':92,'multiline':False]['text':' bookkeeping has been flushed to the instruction stream.','line_number':93,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':96,'multiline':False]['text':' X86-specific interface.','line_number':97,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':98,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':149,'multiline':False]['text':' X86/X64-common interface.','line_number':150,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':151,'multiline':False]['text':' Ensure that loading the payload does not erase the pointer to the','line_number':186,'multiline':False]['text':' Value in memory or the index.','line_number':187,'multiline':False]['text':' If we have a BaseIndex that uses both result registers, first compute','line_number':193,'multiline':False]['text':' the address and then load the Value from there.','line_number':194,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':580,'multiline':False]['text':' Common interface.','line_number':581,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':582,'multiline':False]['text':' Spectre mitigation: We zero the payload if the tag does not match the','line_number':697,'multiline':False]['text':' expected type and if this is a pointer type.','line_number':698,'multiline':False]['text':' We zero the destination register and move the payload into it if','line_number':705,'multiline':False]['text':' the tag corresponds to the given type.','line_number':706,'multiline':False]['text':' UnboxedLayout::makeConstructorCode calls extractObject with a','line_number':715,'multiline':False]['text':' scratch register which aliases the tag register, thus we cannot','line_number':716,'multiline':False]['text':' assert the above condition.','line_number':717,'multiline':False]['text':' The destination register aliases one of the operands. We create a','line_number':721,'multiline':False]['text':' zero value either in a scratch register or on the stack and use it','line_number':722,'multiline':False]['text':' to reset the destination register after reading both the tag and the','line_number':723,'multiline':False]['text':' payload.','line_number':724,'multiline':False]['text':' Due to Spectre mitigation logic (see Value.h), if the value is an Object','line_number':792,'multiline':False]['text':' then this yields the object; otherwise it yields zero (null), as desired.','line_number':793,'multiline':False]['text':' See comment in MacroAssembler-x64.h.','line_number':830,'multiline':False]['text':' Extended unboxing API. If the payload is already in a register, returns','line_number':841,'multiline':False]['text':' that register. Otherwise, provides a move to the given scratch register,','line_number':842,'multiline':False]['text':' and returns that.','line_number':843,'multiline':False]['text':' Note: this function clobbers the source register.','line_number':1001,'multiline':False]['text':' Note: this function clobbers the source register.','line_number':1004,'multiline':False]['text':' x86 doesn't have any pinned registers.','line_number':1020,'multiline':False]['text':' Used from within an Exit frame to handle a pending exception.','line_number':1024,'multiline':False]['text':' Instrumentation for entering and leaving the profiler.','line_number':1027,'multiline':False]['text':' namespace jit','line_number':1034,'multiline':False]['text':' namespace js','line_number':1035,'multiline':False]['text':' jit_x86_MacroAssembler_x86_h ','line_number':1037,'multiline':True]