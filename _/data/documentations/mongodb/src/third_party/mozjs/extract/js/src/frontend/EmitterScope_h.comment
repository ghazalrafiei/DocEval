['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' TaggedParserAtomIndex','line_number':19,'multiline':False]['text':' JSOp','line_number':22,'multiline':False]['text':' GCThingIndex','line_number':23,'multiline':False]['text':' A scope that introduces bindings.','line_number':33,'multiline':False]['text':' The cache of bound names that may be looked up in the','line_number':35,'multiline':False]['text':' scope. Initially populated as the set of names this scope binds. As','line_number':36,'multiline':False]['text':' names are looked up in enclosing scopes, they are cached on the','line_number':37,'multiline':False]['text':' current scope.','line_number':38,'multiline':False]['text':' If this scope's cache does not include free names, such as the','line_number':41,'multiline':False]['text':' global scope, the NameLocation to return.','line_number':42,'multiline':False]['text':' True if there is a corresponding EnvironmentObject on the environment','line_number':45,'multiline':False]['text':' chain, false if all bindings are stored in frame slots on the stack.','line_number':46,'multiline':False]['text':' The number of enclosing environments. Used for error checking.','line_number':49,'multiline':False]['text':' The next usable slot on the frame for not-closed over bindings.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' The initial frame slot when assigning slots to bindings is the','line_number':54,'multiline':False]['text':' enclosing scope's nextFrameSlot. For the first scope in a frame,','line_number':55,'multiline':False]['text':' the initial frame slot is 0.','line_number':56,'multiline':False]['text':' The index in the BytecodeEmitter's interned scope vector, otherwise','line_number':59,'multiline':False]['text':' ScopeNote::NoScopeIndex.','line_number':60,'multiline':False]['text':' If kind is Lexical, Catch, or With, the index in the BytecodeEmitter's','line_number':63,'multiline':False]['text':' block scope note list. Otherwise ScopeNote::NoScopeNote.','line_number':64,'multiline':False]['text':' The first frame slot used.','line_number':146,'multiline':False]['text':' The last frame slot used + 1.','line_number':154,'multiline':False]['text':' Find both the slot associated with a private name and the location of the','line_number':163,'multiline':False]['text':' corresponding `.privateBrand` binding.','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' Simply doing two separate lookups, one for `name` and another for','line_number':166,'multiline':False]['text':' `.privateBrand`, would give the wrong answer in this case:','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':'     class Outer {','line_number':169,'multiline':False]['text':'       #outerMethod() { reutrn "ok"; }','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':'       test() {','line_number':172,'multiline':False]['text':'         class Inner {','line_number':173,'multiline':False]['text':'           #innerMethod() {}','line_number':174,'multiline':False]['text':'           test(outer) {','line_number':175,'multiline':False]['text':'             return outer.#outerMethod();','line_number':176,'multiline':False]['text':'           }','line_number':177,'multiline':False]['text':'         }','line_number':178,'multiline':False]['text':'         return new Inner().test(this);','line_number':179,'multiline':False]['text':'       }','line_number':180,'multiline':False]['text':'     }','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':'    new Outer().test();  // should return "ok"','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' At the point in Inner.test where `#outerMethod` is called, we need to','line_number':185,'multiline':False]['text':' check for the private brand of `Outer`, not `Inner`; but both class bodies','line_number':186,'multiline':False]['text':' have `.privateBrand` bindings. In a normal `lookup`, the inner binding','line_number':187,'multiline':False]['text':' would shadow the outer one.','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':' This method instead sets `brandLoc` to the location of the `.privateBrand`','line_number':190,'multiline':False]['text':' binding in the same class body as the private name `name`, ignoring','line_number':191,'multiline':False]['text':' shadowing. If `name` refers to a name that is actually stamped onto the','line_number':192,'multiline':False]['text':' target object (anything other than a non-static private method), then','line_number':193,'multiline':False]['text':' `brandLoc` is set to Nothing.','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':' To handle cases where it's not possible to find the private brand, this','line_number':196,'multiline':False]['text':' method has to be fallible.','line_number':197,'multiline':False]['text':' For a given emitter scope, return the number of enclosing environments in','line_number':204,'multiline':False]['text':' the current compilation (this excludes environments that could enclose the','line_number':205,'multiline':False]['text':' compilation, like would happen for an eval copmilation).','line_number':206,'multiline':False]['text':' namespace frontend ','line_number':211,'multiline':True]['text':' namespace js ','line_number':212,'multiline':True]['text':' frontend_EmitterScope_h ','line_number':214,'multiline':True]