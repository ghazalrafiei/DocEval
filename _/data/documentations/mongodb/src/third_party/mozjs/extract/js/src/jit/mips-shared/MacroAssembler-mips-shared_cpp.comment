['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' This method generates lui and ori instruction pair that can be modified by','line_number':40,'multiline':False]['text':' UpdateLuiOriValue, either during compilation (eg. Assembler::bind), or','line_number':41,'multiline':False]['text':' during execution (eg. jit::PatchJump).','line_number':42,'multiline':False]['text':' Shifts','line_number':49,'multiline':False]['text':' Bit extract/insert','line_number':132,'multiline':False]['text':' Sign extend','line_number':172,'multiline':False]['text':' And.','line_number':191,'multiline':False]['text':' Or.','line_number':209,'multiline':False]['text':' xor','line_number':227,'multiline':False]['text':' word swap bytes within halfwords','line_number':245,'multiline':False]['text':' Arithmetic-based ops.','line_number':259,'multiline':False]['text':' Add.','line_number':261,'multiline':False]['text':' Subtract.','line_number':297,'multiline':False]['text':' MATH:','line_number':388,'multiline':False]['text':' We wish to compute x % (1<<y) - 1 for a known constant, y.','line_number':389,'multiline':False]['text':' First, let b = (1<<y) and C = (1<<y)-1, then think of the 32 bit','line_number':390,'multiline':False]['text':' dividend as a number in base b, namely','line_number':391,'multiline':False]['text':' c_0*1 + c_1*b + c_2*b^2 ... c_n*b^n','line_number':392,'multiline':False]['text':' now, since both addition and multiplication commute with modulus,','line_number':393,'multiline':False]['text':' x % C == (c_0 + c_1*b + ... + c_n*b^n) % C ==','line_number':394,'multiline':False]['text':' (c_0 % C) + (c_1%C) * (b % C) + (c_2 % C) * (b^2 % C)...','line_number':395,'multiline':False]['text':' now, since b == C + 1, b % C == 1, and b^n % C == 1','line_number':396,'multiline':False]['text':' this means that the whole thing simplifies to:','line_number':397,'multiline':False]['text':' c_0 + c_1 + c_2 ... c_n % C','line_number':398,'multiline':False]['text':' each c_n can easily be computed by a shift/bitextract, and the modulus','line_number':399,'multiline':False]['text':' can be maintained by simply subtracting by C whenever the number gets','line_number':400,'multiline':False]['text':' over C.','line_number':401,'multiline':False]['text':' hold holds -1 if the value was negative, 1 otherwise.','line_number':405,'multiline':False]['text':' remain holds the remaining bits that have not been processed','line_number':406,'multiline':False]['text':' SecondScratchReg serves as a temporary location to store extracted bits','line_number':407,'multiline':False]['text':' into as well as holding the trial subtraction as a temp value dest is','line_number':408,'multiline':False]['text':' the accumulator (and holds the final result)','line_number':409,'multiline':False]['text':' move the whole value into the remain.','line_number':411,'multiline':False]['text':' Zero out the dest.','line_number':413,'multiline':False]['text':' Set the hold appropriately.','line_number':415,'multiline':False]['text':' Begin the main loop.','line_number':424,'multiline':False]['text':' Extract the bottom bits into SecondScratchReg.','line_number':427,'multiline':False]['text':' Add those bits to the accumulator.','line_number':429,'multiline':False]['text':' Do a trial subtraction','line_number':431,'multiline':False]['text':' If (sum - C) > 0, store sum - C back into sum, thus performing a','line_number':433,'multiline':False]['text':' modulus.','line_number':434,'multiline':False]['text':' Get rid of the bits that we extracted before.','line_number':438,'multiline':False]['text':' If the shift produced zero, finish, otherwise, continue in the loop.','line_number':440,'multiline':False]['text':' Check the hold to see if we need to negate the result.','line_number':442,'multiline':False]['text':' If the hold was non-zero, negate the result to be in line with','line_number':445,'multiline':False]['text':' what JS wants','line_number':446,'multiline':False]['text':' Jump out in case of negative zero.','line_number':448,'multiline':False]['text':' Memory.','line_number':458,'multiline':False]['text':' Make sure that SecondScratchReg contains absolute address so that','line_number':753,'multiline':False]['text':' offset is 0.','line_number':754,'multiline':False]['text':' Scrach register is free now, use it for loading imm value','line_number':757,'multiline':False]['text':' with offset=0 ScratchRegister will not be used in ma_store()','line_number':760,'multiline':False]['text':' so we can use it as a parameter here','line_number':761,'multiline':False]['text':' Branches when done from within mips-specific code.','line_number':896,'multiline':False]['text':' This condition is always false. No branch required.','line_number':929,'multiline':False]['text':' bgtu s,t,label =>','line_number':964,'multiline':False]['text':'   sltu at,t,s','line_number':965,'multiline':False]['text':'   bne at,$zero,offs','line_number':966,'multiline':False]['text':' bgeu s,t,label =>','line_number':970,'multiline':False]['text':'   sltu at,s,t','line_number':971,'multiline':False]['text':'   beq at,$zero,offs','line_number':972,'multiline':False]['text':' bltu s,t,label =>','line_number':976,'multiline':False]['text':'   sltu at,s,t','line_number':977,'multiline':False]['text':'   bne at,$zero,offs','line_number':978,'multiline':False]['text':' bleu s,t,label =>','line_number':982,'multiline':False]['text':'   sltu at,t,s','line_number':983,'multiline':False]['text':'   beq at,$zero,offs','line_number':984,'multiline':False]['text':' bgt s,t,label =>','line_number':988,'multiline':False]['text':'   slt at,t,s','line_number':989,'multiline':False]['text':'   bne at,$zero,offs','line_number':990,'multiline':False]['text':' bge s,t,label =>','line_number':994,'multiline':False]['text':'   slt at,s,t','line_number':995,'multiline':False]['text':'   beq at,$zero,offs','line_number':996,'multiline':False]['text':' blt s,t,label =>','line_number':1000,'multiline':False]['text':'   slt at,s,t','line_number':1001,'multiline':False]['text':'   bne at,$zero,offs','line_number':1002,'multiline':False]['text':' ble s,t,label =>','line_number':1006,'multiline':False]['text':'   slt at,t,s','line_number':1007,'multiline':False]['text':'   beq at,$zero,offs','line_number':1008,'multiline':False]['text':' lhs <= rhs via lhs < rhs + 1 if rhs + 1 does not overflow','line_number':1027,'multiline':False]['text':' lhs <= rhs via lhs < rhs + 1.','line_number':1048,'multiline':False]['text':' seq d,s,t =>','line_number':1075,'multiline':False]['text':'   xor d,s,t','line_number':1076,'multiline':False]['text':'   sltiu d,d,1','line_number':1077,'multiline':False]['text':' sne d,s,t =>','line_number':1082,'multiline':False]['text':'   xor d,s,t','line_number':1083,'multiline':False]['text':'   sltu d,$zero,d','line_number':1084,'multiline':False]['text':' sgtu d,s,t =>','line_number':1089,'multiline':False]['text':'   sltu d,t,s','line_number':1090,'multiline':False]['text':' sgeu d,s,t =>','line_number':1094,'multiline':False]['text':'   sltu d,s,t','line_number':1095,'multiline':False]['text':'   xori d,d,1','line_number':1096,'multiline':False]['text':' sltu d,s,t','line_number':1101,'multiline':False]['text':' sleu d,s,t =>','line_number':1105,'multiline':False]['text':'   sltu d,t,s','line_number':1106,'multiline':False]['text':'   xori d,d,1','line_number':1107,'multiline':False]['text':' sgt d,s,t =>','line_number':1112,'multiline':False]['text':'   slt d,t,s','line_number':1113,'multiline':False]['text':' sge d,s,t =>','line_number':1117,'multiline':False]['text':'   slt d,s,t','line_number':1118,'multiline':False]['text':'   xori d,d,1','line_number':1119,'multiline':False]['text':' slt d,s,t','line_number':1124,'multiline':False]['text':' sle d,s,t =>','line_number':1128,'multiline':False]['text':'   slt d,t,s','line_number':1129,'multiline':False]['text':'   xori d,d,1','line_number':1130,'multiline':False]['text':' seq d,s,$zero =>','line_number':1136,'multiline':False]['text':'   sltiu d,s,1','line_number':1137,'multiline':False]['text':' sne d,s,$zero =>','line_number':1142,'multiline':False]['text':'   sltu d,$zero,s','line_number':1143,'multiline':False]['text':' sge d,s,$zero =>','line_number':1152,'multiline':False]['text':'   slt d,s,$zero','line_number':1153,'multiline':False]['text':'   xori d,d,1','line_number':1154,'multiline':False]['text':' fp instructions','line_number':1351,'multiline':False]['text':' First or second is NaN, result is NaN.','line_number':1447,'multiline':False]['text':' Make sure we handle -0 and 0 right.','line_number':1456,'multiline':False]['text':' Check for zero.','line_number':1463,'multiline':False]['text':' So now both operands are either -0 or 0.','line_number':1469,'multiline':False]['text':' -0 + -0 = -0 and -0 + 0 = 0.','line_number':1471,'multiline':False]['text':' First is 0 or -0, move max/min to it, else just return it.','line_number':1479,'multiline':False]['text':' First or second is NaN, result is NaN.','line_number':1500,'multiline':False]['text':' Make sure we handle -0 and 0 right.','line_number':1509,'multiline':False]['text':' Check for zero.','line_number':1516,'multiline':False]['text':' So now both operands are either -0 or 0.','line_number':1522,'multiline':False]['text':' -0 + -0 = -0 and -0 + 0 = 0.','line_number':1524,'multiline':False]['text':' First is 0 or -0, move max/min to it, else just return it.','line_number':1532,'multiline':False]['text':'{{{ check_macroassembler_style','line_number':1595,'multiline':False]['text':' ===============================================================','line_number':1596,'multiline':False]['text':' MacroAssembler high-level usage.','line_number':1597,'multiline':False]['text':' ===============================================================','line_number':1601,'multiline':False]['text':' Stack manipulation functions.','line_number':1602,'multiline':False]['text':' ===============================================================','line_number':1656,'multiline':False]['text':' Simple call functions.','line_number':1657,'multiline':False]['text':' Allocate space which will be patched by patchCall().','line_number':1673,'multiline':False]['text':' Allocate space which will be patched by patchFarJump().','line_number':1702,'multiline':False]['text':' MIPS32   //MIPS64','line_number':1745,'multiline':False]['text':' lui      // lui','line_number':1746,'multiline':False]['text':' ori      // ori','line_number':1747,'multiline':False]['text':' jalr     // drotr32','line_number':1748,'multiline':False]['text':' ori','line_number':1749,'multiline':False]['text':' jalr','line_number':1751,'multiline':False]['text':' six nops ','line_number':1759,'multiline':True]['text':' four nops ','line_number':1763,'multiline':True]['text':' six nops ','line_number':1772,'multiline':True]['text':' four nops ','line_number':1774,'multiline':True]['text':' ===============================================================','line_number':1791,'multiline':False]['text':' Jit Frames.','line_number':1792,'multiline':False]['text':' ===============================================================','line_number':1829,'multiline':False]['text':' WebAssembly','line_number':1830,'multiline':False]['text':' Positive overflow is already saturated to INT32_MAX, so we only have','line_number':1921,'multiline':False]['text':' to handle NaN and negative overflow here.','line_number':1922,'multiline':False]['text':' Saturating callouts don't use ool path.','line_number':1969,'multiline':False]['text':' Positive overflow is already saturated to INT64_MAX, so we only have','line_number':1993,'multiline':False]['text':' to handle NaN and negative overflow here.','line_number':1994,'multiline':False]['text':' Only possible valid input that produces INT64_MIN result.','line_number':2031,'multiline':False]['text':' Maybe add the offset.','line_number':2103,'multiline':False]['text':' Maybe add the offset.','line_number':2185,'multiline':False]['text':' Only the last emitted instruction is a memory access.','line_number':2256,'multiline':False]['text':' ========================================================================','line_number':2266,'multiline':False]['text':' Primitive atomic operations.','line_number':2267,'multiline':False]['text':' ========================================================================','line_number':2880,'multiline':False]['text':' JS atomic operations.','line_number':2881,'multiline':False]['text':' ========================================================================','line_number':3057,'multiline':False]['text':' Spectre Mitigations.','line_number':3058,'multiline':False]['text':' If Nan, 0 or -0 check for bailout','line_number':3068,'multiline':False]['text':' If binary value is not zero, it is NaN or -0, so we bail.','line_number':3072,'multiline':False]['text':' Input was zero, so return zero.','line_number':3076,'multiline':False]['text':' If Nan, 0 or -0 check for bailout','line_number':3096,'multiline':False]['text':' If high part is not zero, it is NaN or -0, so we bail.','line_number':3100,'multiline':False]['text':' Input was zero, so return zero.','line_number':3104,'multiline':False]['text':' If x < -1 or x > 0 then perform ceil.','line_number':3124,'multiline':False]['text':' If binary value is not zero, the input was not 0, so we bail.','line_number':3130,'multiline':False]['text':' Input was zero, so return zero.','line_number':3134,'multiline':False]['text':' If x < -1 or x > 0 then perform ceil.','line_number':3154,'multiline':False]['text':' If high part is not zero, the input was not 0, so we bail.','line_number':3160,'multiline':False]['text':' Input was zero, so return zero.','line_number':3164,'multiline':False]['text':' Load biggest number less than 0.5 in the temp register.','line_number':3184,'multiline':False]['text':' Branch to a slow path for negative inputs. Doesn't catch NaN or -0.','line_number':3187,'multiline':False]['text':' If Nan, 0 or -0 check for bailout','line_number':3191,'multiline':False]['text':' If binary value is not zero, it is NaN or -0, so we bail.','line_number':3194,'multiline':False]['text':' Input was zero, so return zero.','line_number':3198,'multiline':False]['text':' Input is negative, but isn't -0.','line_number':3213,'multiline':False]['text':' Inputs in ]-0.5; 0] need to be added 0.5, other negative inputs need to','line_number':3216,'multiline':False]['text':' be added the biggest double less than 0.5.','line_number':3217,'multiline':False]['text':' If input + 0.5 >= 0, input is a negative number >= -0.5 and the','line_number':3226,'multiline':False]['text':' result is -0.','line_number':3227,'multiline':False]['text':' Truncate and round toward zero.','line_number':3230,'multiline':False]['text':' This is off-by-one for everything but integer-valued inputs.','line_number':3231,'multiline':False]['text':' Load biggest number less than 0.5 in the temp register.','line_number':3246,'multiline':False]['text':' Branch to a slow path for negative inputs. Doesn't catch NaN or -0.','line_number':3249,'multiline':False]['text':' If Nan, 0 or -0 check for bailout','line_number':3253,'multiline':False]['text':' If high part is not zero, it is NaN or -0, so we bail.','line_number':3256,'multiline':False]['text':' Input was zero, so return zero.','line_number':3260,'multiline':False]['text':' Input is negative, but isn't -0.','line_number':3275,'multiline':False]['text':' Inputs in ]-0.5; 0] need to be added 0.5, other negative inputs need to','line_number':3278,'multiline':False]['text':' be added the biggest double less than 0.5.','line_number':3279,'multiline':False]['text':' If input + 0.5 >= 0, input is a negative number >= -0.5 and the','line_number':3288,'multiline':False]['text':' result is -0.','line_number':3289,'multiline':False]['text':' Truncate and round toward zero.','line_number':3292,'multiline':False]['text':' This is off-by-one for everything but integer-valued inputs.','line_number':3293,'multiline':False]['text':' Check if src is in ]-1; -0] range by checking the sign bit.','line_number':3312,'multiline':False]['text':' Check if src is in ]-1; -0] range by checking the sign bit.','line_number':3329,'multiline':False]['text':'}}} check_macroassembler_style','line_number':3351,'multiline':False]