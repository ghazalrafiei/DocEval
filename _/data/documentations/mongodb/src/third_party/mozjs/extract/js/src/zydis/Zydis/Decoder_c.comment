['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':' ============================================================================================== ','line_number':33,'multiline':True]['text':' Internal enums and types                                                                       ','line_number':34,'multiline':True]['text':' ============================================================================================== ','line_number':35,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':37,'multiline':True]['text':' Decoder context                                                                                ','line_number':38,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':39,'multiline':True]['text':'*
 * @brief   Defines the `ZydisDecoderContext` struct.
 ','line_number':41,'multiline':True]['text':'*
     * @brief   A pointer to the `ZydisDecoder` instance.
     ','line_number':46,'multiline':True]['text':'*
     * @brief   The input buffer.
     ','line_number':50,'multiline':True]['text':'*
     * @brief   The input buffer length.
     ','line_number':54,'multiline':True]['text':'*
         * @brief   Signals, if the instruction has a `LOCK` prefix (`F0`).
         *
         * This prefix originally belongs to group 1, but separating it from the other ones makes
         * parsing easier for us later.
         ','line_number':60,'multiline':True]['text':'*
         * @brief   The effective prefix of group 1 (either `F2` or `F3`).
         ','line_number':67,'multiline':True]['text':'*
         * @brief   The effective prefix of group 3 (`2E`,`36`, `3E`, `26`, `64` or `65`).
         ','line_number':71,'multiline':True]['text':'*
         * @brief   Signals, if the instruction has an operand-size override prefix (`66`).
         *
         * This is the only prefix in group 3.
         ','line_number':75,'multiline':True]['text':' ZyanBool has_osz_override;','line_number':80,'multiline':False]['text':'*
         * @brief   Signals, if the instruction has an address-size override prefix (`67`).
         *
         * This is the only prefix in group 4.
         ','line_number':81,'multiline':True]['text':' ZyanBool has_asz_override;','line_number':86,'multiline':False]['text':'*
         * @brief   The effective segment prefix.
         ','line_number':87,'multiline':True]['text':'*
         * @brief   The prefix that should be treated as the mandatory-prefix, if the current
         *          instruction needs one.
         *
         * The last `F3`/`F2` prefix has precedence over previous ones and `F3`/`F2` in general
         * have precedence over `66`.
         ','line_number':91,'multiline':True]['text':'*
         * @brief   The offset of the effective `LOCK` prefix.
         ','line_number':99,'multiline':True]['text':'*
         * @brief   The offset of the effective prefix in group 1.
         ','line_number':103,'multiline':True]['text':'*
         * @brief   The offset of the effective prefix in group 2.
         ','line_number':107,'multiline':True]['text':'*
         * @brief   The offset of the operand-size override prefix (`66`).
         *
         * This is the only prefix in group 3.
         ','line_number':111,'multiline':True]['text':'*
         * @brief   The offset of the address-size override prefix (`67`).
         *
         * This is the only prefix in group 4.
         ','line_number':117,'multiline':True]['text':'*
         * @brief   The offset of the effective segment prefix.
         ','line_number':123,'multiline':True]['text':'*
         * @brief   The offset of the mandatory-candidate prefix.
         ','line_number':127,'multiline':True]['text':'*
     * @brief   Contains the effective operand-size index.
     *
     * 0 = 16 bit, 1 = 32 bit, 2 = 64 bit
     ','line_number':132,'multiline':True]['text':'*
     * @brief   Contains the effective address-size index.
     *
     * 0 = 16 bit, 1 = 32 bit, 2 = 64 bit
     ','line_number':138,'multiline':True]['text':'*
     * @brief   Contains some cached REX/XOP/VEX/EVEX/MVEX values to provide uniform access.
     ','line_number':144,'multiline':True]['text':'*
     * @brief   Internal EVEX-specific information.
     ','line_number':161,'multiline':True]['text':'*
         * @brief   The EVEX tuple-type.
         ','line_number':166,'multiline':True]['text':'*
         * @brief   The EVEX element-size.
         ','line_number':170,'multiline':True]['text':'*
     * @brief   Internal MVEX-specific information.
     ','line_number':177,'multiline':True]['text':'*
         * @brief   The MVEX functionality.
         ','line_number':182,'multiline':True]['text':'*
     * @brief   The scale factor for EVEX/MVEX compressed 8-bit displacement values.
     ','line_number':189,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':196,'multiline':True]['text':' Register encoding                                                                              ','line_number':197,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':198,'multiline':True]['text':'*
 * @brief   Defines the `ZydisRegisterEncoding` enum.
 ','line_number':200,'multiline':True]['text':'*
     * @brief   The register-id is encoded as part of the opcode.
     *
     * Possible extension by `REX/XOP/VEX/EVEX/MVEX.B`.
     ','line_number':206,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `modrm.reg`.
     *
     * Possible extension by `EVEX/MVEX.R'` (vector only) and `REX/XOP/VEX/EVEX/MVEX.R`.
     ','line_number':212,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `XOP/VEX/EVEX/MVEX.vvvv`.
     *
     * Possible extension by `EVEX/MVEX.v'` (vector only).
     ','line_number':218,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `modrm.rm`.
     *
     * Possible extension by `EVEX/MVEX.X` (vector only) and `REX/XOP/VEX/EVEX/MVEX.B`.
     ','line_number':224,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `modrm.rm` or `sib.base` (if SIB is present).
     *
     * Possible extension by `REX/XOP/VEX/EVEX/MVEX.B`.
     ','line_number':230,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `sib.index`.
     *
     * Possible extension by `REX/XOP/VEX/EVEX/MVEX.X`.
     ','line_number':236,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `sib.index`.
     *
     * Possible extension by `EVEX/MVEX.V'` (vector only) and `REX/XOP/VEX/EVEX/MVEX.X`.
     ','line_number':242,'multiline':True]['text':'*
     * @brief   The register-id is encoded in an additional 8-bit immediate value.
     *
     * Bits [7:4] in 64-bit mode with possible extension by bit [3] (vector only), bits [7:5] for
     * all other modes.
     ','line_number':248,'multiline':True]['text':'*
     * @brief   The register-id is encoded in `EVEX.aaa/MVEX.kkk`.
     ','line_number':255,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':260,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':264,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':270,'multiline':True]['text':' ============================================================================================== ','line_number':272,'multiline':True]['text':' Internal functions                                                                             ','line_number':273,'multiline':True]['text':' ============================================================================================== ','line_number':274,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':276,'multiline':True]['text':' Input helper functions                                                                         ','line_number':277,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':278,'multiline':True]['text':'*
 * @brief   Reads one byte from the current read-position of the input data-source.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   value       A pointer to the memory that receives the byte from the input data-source.
 *
 * @return  A zyan status code.
 *
 * This function may fail, if the `ZYDIS_MAX_INSTRUCTION_LENGTH` limit got exceeded, or no more
 * data is available.
 ','line_number':280,'multiline':True]['text':'*
 * @brief   Increases the read-position of the input data-source by one byte.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` instance
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 *
 * This function is supposed to get called ONLY after a successful call of `ZydisInputPeek`.
 *
 * This function increases the `length` field of the `ZydisDecodedInstruction` struct by one.
 ','line_number':313,'multiline':True]['text':'*
 * @brief   Reads one byte from the current read-position of the input data-source and increases
 *          the read-position by one byte afterwards.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   value       A pointer to the memory that receives the byte from the input data-source.
 *
 * @return  A zyan status code.
 *
 * This function acts like a subsequent call of `ZydisInputPeek` and `ZydisInputSkip`.
 ','line_number':334,'multiline':True]['text':'*
 * @brief   Reads a variable amount of bytes from the current read-position of the input
 *          data-source and increases the read-position by specified amount of bytes afterwards.
 *
 * @param   context         A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   value           A pointer to the memory that receives the byte from the input
 *                          data-source.
 * @param   number_of_bytes The number of bytes to read from the input data-source.
 *
 * @return  A zyan status code.
 *
 * This function acts like a subsequent call of `ZydisInputPeek` and `ZydisInputSkip`.
 ','line_number':369,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':409,'multiline':True]['text':' Decode functions                                                                               ','line_number':410,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':411,'multiline':True]['text':'*
 * @brief   Decodes the `REX`-prefix.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `REX` byte.
 ','line_number':413,'multiline':True]['text':' Update internal fields','line_number':432,'multiline':False]['text':'*
 * @brief   Decodes the `XOP`-prefix.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `XOP` bytes.
 *
 * @return  A zyan status code.
 ','line_number':439,'multiline':True]['text':' Invalid according to the AMD documentation','line_number':464,'multiline':False]['text':' Update internal fields','line_number':473,'multiline':False]['text':'*
 * @brief   Decodes the `VEX`-prefix.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `VEX` bytes.
 *
 * @return  A zyan status code.
 ','line_number':485,'multiline':True]['text':' Map 0 is only valid for some KNC instructions','line_number':531,'multiline':False]['text':' Invalid according to the intel documentation','line_number':538,'multiline':False]['text':' Update internal fields','line_number':542,'multiline':False]['text':'*
 * @brief   Decodes the `EVEX`-prefix.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `EVEX` bytes.
 *
 * @return  A zyan status code.
 ','line_number':555,'multiline':True]['text':' Invalid according to the intel documentation','line_number':579,'multiline':False]['text':' Invalid according to the intel documentation','line_number':587,'multiline':False]['text':' TODO: Dedicated status code','line_number':613,'multiline':False]['text':' Update internal fields','line_number':616,'multiline':False]['text':' LL = 3 is only valid for instructions with embedded rounding control','line_number':634,'multiline':False]['text':'*
 * @brief   Decodes the `MVEX`-prefix.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `MVEX` bytes.
 *
 * @return  A zyan status code.
 ','line_number':643,'multiline':True]['text':' Invalid according to the intel documentation','line_number':668,'multiline':False]['text':' Update internal fields','line_number':683,'multiline':False]['text':'*
 * @brief   Decodes the `ModRM`-byte.
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   data        The `ModRM` byte.
 ','line_number':699,'multiline':True]['text':'*
 * @brief   Decodes the `SIB`-byte.
 *
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct
 * @param   data        The `SIB` byte.
 ','line_number':717,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':737,'multiline':True]['text':'*
 * @brief   Reads a displacement value.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   size        The physical size of the displacement value.
 *
 * @return  A zyan status code.
 ','line_number':739,'multiline':True]['text':' TODO: Fix endianess on big-endian systems','line_number':792,'multiline':False]['text':'*
 * @brief   Reads an immediate value.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   id          The immediate id (either `0` or `1`).
 * @param   size        The physical size of the immediate value.
 * @param   is_signed   Signals, if the immediate value is signed.
 * @param   is_relative Signals, if the immediate value is a relative offset.
 *
 * @return  A zyan status code.
 ','line_number':797,'multiline':True]['text':' TODO: Fix endianess on big-endian systems','line_number':881,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':886,'multiline':True]['text':' Semantical instruction decoding                                                                ','line_number':887,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':888,'multiline':True]['text':'*
 * @brief   Calculates the register-id for a specific register-encoding and register-class.
 *
 * @param   context         A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction     A pointer to the ` ZydisDecodedInstruction` struct.
 * @param   encoding        The register-encoding.
 * @param   register_class  The register-class.
 *
 * @return  A zyan status code.
 *
 * This function calculates the register-id by combining different fields and flags of previously
 * decoded structs.
 ','line_number':891,'multiline':True]['text':' R' only exists for EVEX and MVEX. No encoding check needed','line_number':1003,'multiline':False]['text':' v' only exists for EVEX and MVEX. No encoding check needed','line_number':1017,'multiline':False]['text':' We have to check the instruction-encoding, because the extension by X is only valid','line_number':1049,'multiline':False]['text':' for EVEX and MVEX instructions','line_number':1050,'multiline':False]['text':' v' only exists for EVEX and MVEX. No encoding check needed','line_number':1088,'multiline':False]['text':' We have to check the instruction-encoding, because the extension by bit [3] is only','line_number':1094,'multiline':False]['text':' valid for EVEX and MVEX instructions','line_number':1095,'multiline':False]['text':'*
 * @brief   Sets the operand-size and element-specific information for the given operand.
 *
 * @param   context         A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand         A pointer to the `ZydisDecodedOperand` struct.
 * @param   definition      A pointer to the `ZydisOperandDefinition` struct.
 ','line_number':1123,'multiline':True]['text':' Operand size','line_number':1140,'multiline':False]['text':' Operand size is hardcoded','line_number':1179,'multiline':False]['text':' Operand size depends on the tuple-type, the element-size and the number of','line_number':1183,'multiline':False]['text':' elements','line_number':1184,'multiline':False]['text':' Operand size is hardcoded','line_number':1220,'multiline':False]['text':' Nothing to do here','line_number':1305,'multiline':False]['text':' Element-type and -size','line_number':1340,'multiline':False]['text':' The element size is the same as the operand size. This is used for single element','line_number':1347,'multiline':False]['text':' scaling operands','line_number':1348,'multiline':False]['text':' Element count','line_number':1353,'multiline':False]['text':'*
 * @brief   Decodes an register-operand.
 *
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand         A pointer to the `ZydisDecodedOperand` struct.
 * @param   register_class   The register class.
 * @param   register_id      The register id.
 *
 * @return  A zyan status code.
 ','line_number':1365,'multiline':True]['text':'if (!operand->reg.value)
        {
            return ZYAN_STATUS_BAD_REGISTER;
        }','line_number':1396,'multiline':True]['text':'*
 * @brief   Decodes a memory operand.
 *
 * @param   context             A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction         A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand             A pointer to the `ZydisDecodedOperand` struct.
 * @param   vidx_register_class The register-class to use as the index register-class for
 *                              instructions with `VSIB` addressing.
 *
 * @return  A zyan status code.
 ','line_number':1407,'multiline':True]['text':'*
 * @brief   Decodes an implicit register operand.
 *
 * @param   context         A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand         A pointer to the `ZydisDecodedOperand` struct.
 * @param   definition      A pointer to the `ZydisOperandDefinition` struct.
 ','line_number':1601,'multiline':True]['text':'*
 * @brief   Decodes an implicit memory operand.
 *
 * @param   context         A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction     A pointer to the `ZydisDecodedInstruction` struct.
 * @param   operand         A pointer to the `ZydisDecodedOperand` struct.
 * @param   definition      A pointer to the `ZydisOperandDefinition` struct.
 ','line_number':1674,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1746,'multiline':True]['text':'*
 * @brief   Decodes the instruction operands.
 *
 * @param   context     A pointer to the`ZydisDecoderContext` struct.
 * @param   instruction A pointer to the`ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the`ZydisInstructionDefinition` struct.
 *
 * @return  A zyan status code.
 ','line_number':1749,'multiline':True]['text':' Implicit operands','line_number':1787,'multiline':False]['text':' Register operands','line_number':1815,'multiline':False]['text':' Memory operands','line_number':1943,'multiline':False]['text':' TODO: Remove after generator update','line_number':1975,'multiline':False]['text':' TODO: Remove after generator update','line_number':1989,'multiline':False]['text':' Relative addressing is not allowed for this type of memory-operand','line_number':1994,'multiline':False]['text':' Handle compressed 8-bit displacement','line_number':2007,'multiline':False]['text':' Immediate operands','line_number':2019,'multiline':False]['text':' The upper half of the 8-bit immediate is used to encode a register specifier','line_number':2030,'multiline':False]['text':' Set segment-register for memory operands','line_number':2048,'multiline':False]['text':' Fix operand-action for EVEX/MVEX instructions with merge-mask','line_number':2099,'multiline':False]['text':'*
 * @brief   Sets attributes for the given instruction.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the `ZydisInstructionDefinition` struct.
 ','line_number':2128,'multiline':True]['text':' NONE      ','line_number':2146,'multiline':True]['text':' READ      ','line_number':2147,'multiline':True]['text':' WRITE     ','line_number':2148,'multiline':True]['text':' READWRITE ','line_number':2149,'multiline':True]['text':' NONE      ','line_number':2159,'multiline':True]['text':' READ      ','line_number':2160,'multiline':True]['text':' WRITE     ','line_number':2161,'multiline':True]['text':' READWRITE ','line_number':2162,'multiline':True]['text':' NONE      ','line_number':2172,'multiline':True]['text':' READ      ','line_number':2173,'multiline':True]['text':' WRITE     ','line_number':2174,'multiline':True]['text':' READWRITE ','line_number':2175,'multiline':True]['text':'*
 * @brief   Sets AVX-specific information for the given instruction.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the `ZydisInstructionDefinition` struct.
 *
 * Information set for `XOP`:
 * - Vector Length
 *
 * Information set for `VEX`:
 * - Vector length
 * - Static broadcast-factor
 *
 * Information set for `EVEX`:
 * - Vector length
 * - Broadcast-factor (static and dynamic)
 * - Rounding-mode and SAE
 * - Mask mode
 * - Compressed 8-bit displacement scale-factor
 *
 * Information set for `MVEX`:
 * - Vector length
 * - Broadcast-factor (static and dynamic)
 * - Rounding-mode and SAE
 * - Swizzle- and conversion-mode
 * - Mask mode
 * - Eviction hint
 * - Compressed 8-bit displacement scale-factor
 ','line_number':2392,'multiline':True]['text':' Vector length','line_number':2433,'multiline':False]['text':' Vector length','line_number':2445,'multiline':False]['text':' Static broadcast-factor','line_number':2454,'multiline':False]['text':' Vector length','line_number':2480,'multiline':False]['text':' Element size','line_number':2501,'multiline':False]['text':' Compressed disp8 scale and broadcast-factor','line_number':2509,'multiline':False]['text':'B0','line_number':2524,'multiline':True]['text':'W0','line_number':2524,'multiline':True]['text':'W1','line_number':2524,'multiline':True]['text':'B1','line_number':2525,'multiline':True]['text':'W0','line_number':2525,'multiline':True]['text':'W1','line_number':2525,'multiline':True]['text':'B0','line_number':2529,'multiline':True]['text':'W0','line_number':2531,'multiline':True]['text':'W1','line_number':2537,'multiline':True]['text':'B1','line_number':2544,'multiline':True]['text':'W0','line_number':2546,'multiline':True]['text':'W1','line_number':2552,'multiline':True]['text':'B0','line_number':2574,'multiline':True]['text':'B1','line_number':2575,'multiline':True]['text':'B0','line_number':2579,'multiline':True]['text':'B1','line_number':2585,'multiline':True]['text':'   ','line_number':2622,'multiline':True]['text':'  8','line_number':2623,'multiline':True]['text':' 16','line_number':2624,'multiline':True]['text':' 32','line_number':2625,'multiline':True]['text':' 64','line_number':2626,'multiline':True]['text':'128','line_number':2627,'multiline':True]['text':' Static broadcast-factor','line_number':2739,'multiline':False]['text':' Rounding mode and SAE','line_number':2764,'multiline':False]['text':' Noting to do here','line_number':2771,'multiline':False]['text':' Intentional fallthrough','line_number':2775,'multiline':False]['text':' Mask','line_number':2784,'multiline':False]['text':' Vector length','line_number':2812,'multiline':False]['text':' Static broadcast-factor','line_number':2818,'multiline':False]['text':' Compressed disp8 scale and broadcast-factor','line_number':2847,'multiline':False]['text':' Nothing to do here','line_number':2856,'multiline':False]['text':' Rounding mode, sae, swizzle, convert','line_number':2939,'multiline':False]['text':' Nothing to do here','line_number':2949,'multiline':False]['text':' Eviction hint','line_number':3098,'multiline':False]['text':' Mask','line_number':3104,'multiline':False]['text':' Nothing to do here','line_number':3113,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':3119,'multiline':True]['text':' Physical instruction decoding                                                                  ','line_number':3120,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':3121,'multiline':True]['text':'*
 * @brief   Collects optional instruction prefixes.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 *
 * @return  A zyan status code.
 *
 * This function sets the corresponding flag for each prefix and automatically decodes the last
 * `REX`-prefix (if exists).
 ','line_number':3123,'multiline':True]['text':' context->prefixes.has_osz_override = ZYAN_TRUE;','line_number':3188,'multiline':False]['text':' context->prefixes.has_asz_override = ZYAN_TRUE;','line_number':3198,'multiline':False]['text':' Invalidate `REX`, if it's not the last legacy prefix','line_number':3216,'multiline':False]['text':'*
 * @brief   Decodes optional instruction parts like the ModRM byte, the SIB byte and additional
 *          displacements and/or immediate values.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   info        A pointer to the `ZydisInstructionEncodingInfo` struct.
 *
 * @return  A zyan status code.
 ','line_number':3247,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':3377,'multiline':True]['text':'*
 * @brief   Sets the effective operand size for the given instruction.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the `ZydisInstructionDefinition` struct.
 ','line_number':3379,'multiline':True]['text':' Default for most instructions','line_number':3395,'multiline':False]['text':' 16 __ W0','line_number':3397,'multiline':False]['text':' 16 66 W0','line_number':3398,'multiline':False]['text':' 32 __ W0','line_number':3399,'multiline':False]['text':' 32 66 W0','line_number':3400,'multiline':False]['text':' 64 __ W0','line_number':3401,'multiline':False]['text':' 64 66 W0','line_number':3402,'multiline':False]['text':' 64 __ W1','line_number':3403,'multiline':False]['text':' 64 66 W1','line_number':3404,'multiline':False]['text':' Operand size is forced to 8-bit (this is done later to preserve the `eosz_index`)','line_number':3406,'multiline':False]['text':' 16 __ W0','line_number':3408,'multiline':False]['text':' 16 66 W0','line_number':3409,'multiline':False]['text':' 32 __ W0','line_number':3410,'multiline':False]['text':' 32 66 W0','line_number':3411,'multiline':False]['text':' 64 __ W0','line_number':3412,'multiline':False]['text':' 64 66 W0','line_number':3413,'multiline':False]['text':' 64 __ W1','line_number':3414,'multiline':False]['text':' 64 66 W1','line_number':3415,'multiline':False]['text':' Operand size override 0x66 is ignored','line_number':3417,'multiline':False]['text':' 16 __ W0','line_number':3419,'multiline':False]['text':' 16 66 W0','line_number':3420,'multiline':False]['text':' 32 __ W0','line_number':3421,'multiline':False]['text':' 32 66 W0','line_number':3422,'multiline':False]['text':' 64 __ W0','line_number':3423,'multiline':False]['text':' 64 66 W0','line_number':3424,'multiline':False]['text':' 64 __ W1','line_number':3425,'multiline':False]['text':' 64 66 W1','line_number':3426,'multiline':False]['text':' REX.W promotes to 32-bit instead of 64-bit','line_number':3428,'multiline':False]['text':' 16 __ W0','line_number':3430,'multiline':False]['text':' 16 66 W0','line_number':3431,'multiline':False]['text':' 32 __ W0','line_number':3432,'multiline':False]['text':' 32 66 W0','line_number':3433,'multiline':False]['text':' 64 __ W0','line_number':3434,'multiline':False]['text':' 64 66 W0','line_number':3435,'multiline':False]['text':' 64 __ W1','line_number':3436,'multiline':False]['text':' 64 66 W1','line_number':3437,'multiline':False]['text':' Operand size defaults to 64-bit in 64-bit mode','line_number':3439,'multiline':False]['text':' 16 __ W0','line_number':3441,'multiline':False]['text':' 16 66 W0','line_number':3442,'multiline':False]['text':' 32 __ W0','line_number':3443,'multiline':False]['text':' 32 66 W0','line_number':3444,'multiline':False]['text':' 64 __ W0','line_number':3445,'multiline':False]['text':' 64 66 W0','line_number':3446,'multiline':False]['text':' 64 __ W1','line_number':3447,'multiline':False]['text':' 64 66 W1','line_number':3448,'multiline':False]['text':' Operand size is forced to 64-bit in 64-bit mode','line_number':3450,'multiline':False]['text':' 16 __ W0','line_number':3452,'multiline':False]['text':' 16 66 W0','line_number':3453,'multiline':False]['text':' 32 __ W0','line_number':3454,'multiline':False]['text':' 32 66 W0','line_number':3455,'multiline':False]['text':' 64 __ W0','line_number':3456,'multiline':False]['text':' 64 66 W0','line_number':3457,'multiline':False]['text':' 64 __ W1','line_number':3458,'multiline':False]['text':' 64 66 W1','line_number':3459,'multiline':False]['text':' Operand size is forced to 32-bit, if no REX.W is present.','line_number':3461,'multiline':False]['text':' 16 __ W0','line_number':3463,'multiline':False]['text':' 16 66 W0','line_number':3464,'multiline':False]['text':' 32 __ W0','line_number':3465,'multiline':False]['text':' 32 66 W0','line_number':3466,'multiline':False]['text':' 64 __ W0','line_number':3467,'multiline':False]['text':' 64 66 W0','line_number':3468,'multiline':False]['text':' 64 __ W1','line_number':3469,'multiline':False]['text':' 64 66 W1','line_number':3470,'multiline':False]['text':' Operand size is forced to 64-bit in 64-bit mode and forced to 32-bit in all other modes.','line_number':3472,'multiline':False]['text':' This is used for e.g. `mov CR, GPR` and `mov GPR, CR`.','line_number':3473,'multiline':False]['text':' 16 __ W0','line_number':3475,'multiline':False]['text':' 16 66 W0','line_number':3476,'multiline':False]['text':' 32 __ W0','line_number':3477,'multiline':False]['text':' 32 66 W0','line_number':3478,'multiline':False]['text':' 64 __ W0','line_number':3479,'multiline':False]['text':' 64 66 W0','line_number':3480,'multiline':False]['text':' 64 __ W1','line_number':3481,'multiline':False]['text':' 64 66 W1','line_number':3482,'multiline':False]['text':' TODO: Cleanup code and remove hardcoded condition','line_number':3526,'multiline':False]['text':'*
 * @brief   Sets the effective address width for the given instruction.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` struct.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the `ZydisInstructionDefinition` struct.
 ','line_number':3533,'multiline':True]['text':' Default for most instructions','line_number':3548,'multiline':False]['text':' 16 __','line_number':3550,'multiline':False]['text':' 16 67','line_number':3551,'multiline':False]['text':' 32 __','line_number':3552,'multiline':False]['text':' 32 67','line_number':3553,'multiline':False]['text':' 64 __','line_number':3554,'multiline':False]['text':' 64 67','line_number':3555,'multiline':False]['text':' The address-size override is ignored','line_number':3557,'multiline':False]['text':' 16 __','line_number':3559,'multiline':False]['text':' 16 67','line_number':3560,'multiline':False]['text':' 32 __','line_number':3561,'multiline':False]['text':' 32 67','line_number':3562,'multiline':False]['text':' 64 __','line_number':3563,'multiline':False]['text':' 64 67','line_number':3564,'multiline':False]['text':' The address-size is forced to 64-bit in 64-bit mode and 32-bit in non 64-bit mode. This','line_number':3566,'multiline':False]['text':' is used by e.g. `ENCLS`, `ENCLV`, `ENCLU`.','line_number':3567,'multiline':False]['text':' 16 __','line_number':3569,'multiline':False]['text':' 16 67','line_number':3570,'multiline':False]['text':' 32 __','line_number':3571,'multiline':False]['text':' 32 67','line_number':3572,'multiline':False]['text':' 64 __','line_number':3573,'multiline':False]['text':' 64 67','line_number':3574,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':3614,'multiline':True]['text':' Handle possible encoding-prefix and opcode-map changes','line_number':3687,'multiline':False]['text':' Read additional 3-byte VEX-prefix data','line_number':3727,'multiline':False]['text':' Read additional 2-byte VEX-prefix data','line_number':3733,'multiline':False]['text':' Read additional EVEX/MVEX-prefix data','line_number':3739,'multiline':False]['text':' Decode VEX-prefix','line_number':3754,'multiline':False]['text':' `KNC` instructions are only valid in 64-bit mode.','line_number':3769,'multiline':False]['text':' This condition catches the `MVEX` encoded ones to save a bunch of','line_number':3770,'multiline':False]['text':' `mode` filters in the data-tables.','line_number':3771,'multiline':False]['text':' `KNC` instructions with `VEX` encoding still require a `mode` filter.','line_number':3772,'multiline':False]['text':' Decode MVEX-prefix','line_number':3777,'multiline':False]['text':' Decode EVEX-prefix','line_number':3789,'multiline':False]['text':' Read additional xop-prefix data','line_number':3829,'multiline':False]['text':' Decode xop-prefix','line_number':3831,'multiline':False]['text':' Nothing to do here','line_number':3869,'multiline':False]['text':' All 3DNOW (0x0F 0x0F) instructions are using the same operand encoding. We just','line_number':3876,'multiline':False]['text':' decode a random (pi2fw) instruction and extract the actual opcode later.','line_number':3877,'multiline':False]['text':' TODO: Consume prefix and make sure it's available again, if we need to fallback','line_number':4014,'multiline':False]['text':'if (instruction->attributes & ZYDIS_ATTRIB_HAS_ADDRESSSIZE)
    {
        instruction->raw.prefixes[context->prefixes.offset_asz_override].type = 
            ZYDIS_PREFIX_TYPE_EFFECTIVE;
    }','line_number':4063,'multiline':True]['text':' nothing to do here','line_number':4127,'multiline':False]['text':' nothing to do here','line_number':4158,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':4205,'multiline':True]['text':'*
 * @brief   Checks for certain post-decode error-conditions.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 * @param   definition  A pointer to the `ZydisInstructionDefinition` struct.
 *
 * @return  A zyan status code.
 *
 * This function is called immediately after a valid instruction-definition was found.
 ','line_number':4207,'multiline':True]['text':' We set this to `NONE` instead of `UNUSED` to save up some unnecessary runtime checks','line_number':4223,'multiline':False]['text':' Check for invalid zero-mask','line_number':4278,'multiline':False]['text':' TODO: Dedicated status code','line_number':4281,'multiline':False]['text':' Check for invalid MVEX.SSS values','line_number':4297,'multiline':False]['text':' ZYDIS_MVEX_FUNC_IGNORED','line_number':4300,'multiline':False]['text':' ZYDIS_MVEX_FUNC_INVALID','line_number':4302,'multiline':False]['text':' ZYDIS_MVEX_FUNC_RC','line_number':4304,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SAE','line_number':4306,'multiline':False]['text':' ZYDIS_MVEX_FUNC_F_32','line_number':4308,'multiline':False]['text':' ZYDIS_MVEX_FUNC_I_32','line_number':4310,'multiline':False]['text':' ZYDIS_MVEX_FUNC_F_64','line_number':4312,'multiline':False]['text':' ZYDIS_MVEX_FUNC_I_64','line_number':4314,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SWIZZLE_32','line_number':4316,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SWIZZLE_64','line_number':4318,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SF_32','line_number':4320,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SF_32_BCST','line_number':4322,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SF_32_BCST_4TO16','line_number':4324,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SF_64','line_number':4326,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SI_32','line_number':4328,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SI_32_BCST','line_number':4330,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SI_32_BCST_4TO16','line_number':4332,'multiline':False]['text':' ZYDIS_MVEX_FUNC_SI_64','line_number':4334,'multiline':False]['text':' ZYDIS_MVEX_FUNC_UF_32','line_number':4336,'multiline':False]['text':' ZYDIS_MVEX_FUNC_UF_64','line_number':4338,'multiline':False]['text':' ZYDIS_MVEX_FUNC_UI_32','line_number':4340,'multiline':False]['text':' ZYDIS_MVEX_FUNC_UI_64','line_number':4342,'multiline':False]['text':' ZYDIS_MVEX_FUNC_DF_32','line_number':4344,'multiline':False]['text':' ZYDIS_MVEX_FUNC_DF_64','line_number':4346,'multiline':False]['text':' ZYDIS_MVEX_FUNC_DI_32','line_number':4348,'multiline':False]['text':' ZYDIS_MVEX_FUNC_DI_64','line_number':4350,'multiline':False]['text':' Validate register constraints','line_number':4368,'multiline':False]['text':' `ZYDIS_REGISTER_CR` is not allowed as `MOV` target','line_number':4381,'multiline':False]['text':' Attempts to reference CR1, CR5, CR6, CR7, and CR9CR15 result in undefined opcode (#UD)','line_number':4397,'multiline':False]['text':' exceptions','line_number':4398,'multiline':False]['text':' Attempts to reference DR8DR15 result in undefined opcode (#UD) exceptions. DR4 and DR5','line_number':4412,'multiline':False]['text':' are only valid, if the debug extension (DE) flag in CR4 is set. As we can't check this,','line_number':4413,'multiline':False]['text':' we just allow them.','line_number':4414,'multiline':False]['text':' `ZYDIS_REGISTER_CR` is not allowed as `MOV` target','line_number':4443,'multiline':False]['text':' `.vvvv` is not allowed, if the instruction does not encode a NDS/NDD operand','line_number':4474,'multiline':False]['text':' `.v'` is not allowed, if the instruction does not encode a NDS/NDD or VSIB operand','line_number':4479,'multiline':False]['text':' `.v'` is invalid for GPR-registers','line_number':4490,'multiline':False]['text':' Check gather registers','line_number':4507,'multiline':False]['text':' Ignore the high-register bits in 16- and 32-bit mode','line_number':4534,'multiline':False]['text':' Some gather instructions (like `VGATHERPF0{D|Q}{PS|PD}`) do not have a destination','line_number':4545,'multiline':False]['text':' operand','line_number':4546,'multiline':False]['text':' If any pair of the index, mask, or destination registers are the same, the instruction','line_number':4555,'multiline':False]['text':' results a UD fault.','line_number':4556,'multiline':False]['text':' Check for invalid MASK registers','line_number':4564,'multiline':False]['text':' Nothing to do here','line_number':4569,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':4591,'multiline':True]['text':'*
 * @brief   Uses the decoder-tree to decode the current instruction.
 *
 * @param   context     A pointer to the `ZydisDecoderContext` instance.
 * @param   instruction A pointer to the `ZydisDecodedInstruction` struct.
 *
 * @return  A zyan status code.
 ','line_number':4593,'multiline':True]['text':' Iterate through the decoder tree','line_number':4607,'multiline':False]['text':' TODO: Return to this point, if index == 0 contains a value and the previous path','line_number':4678,'multiline':False]['text':' TODO: was not successfull','line_number':4679,'multiline':False]['text':' TODO: Restore consumed prefix','line_number':4680,'multiline':False]['text':' Get actual 3dnow opcode and definition','line_number':4746,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':4815,'multiline':True]['text':' ============================================================================================== ','line_number':4817,'multiline':True]['text':' Exported functions                                                                             ','line_number':4818,'multiline':True]['text':' ============================================================================================== ','line_number':4819,'multiline':True]['text':' ZYDIS_DECODER_MODE_MINIMAL','line_number':4827,'multiline':False]['text':' ZYDIS_DECODER_MODE_MINIMAL','line_number':4829,'multiline':False]['text':' ZYDIS_DECODER_MODE_AMD_BRANCHES','line_number':4831,'multiline':False]['text':' ZYDIS_DECODER_MODE_KNC','line_number':4832,'multiline':False]['text':' ZYDIS_DECODER_MODE_MPX','line_number':4833,'multiline':False]['text':' ZYDIS_DECODER_MODE_CET','line_number':4834,'multiline':False]['text':' ZYDIS_DECODER_MODE_LZCNT','line_number':4835,'multiline':False]['text':' ZYDIS_DECODER_MODE_TZCNT','line_number':4836,'multiline':False]['text':' ZYDIS_DECODER_MODE_WBNOINVD','line_number':4837,'multiline':False]['text':' ZYDIS_DECODER_MODE_CLDEMOTE','line_number':4838,'multiline':False]['text':' ============================================================================================== ','line_number':4926,'multiline':True]