['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Forward declaration','line_number':22,'multiline':False]['text':' Note: the order of fields in this enum matters for parsing.','line_number':25,'multiline':False]['text':'* Render using normal positive subpattern rules ','line_number':27,'multiline':True]['text':'* Render using rules to force the display of a plus sign ','line_number':29,'multiline':True]['text':'* Render using negative subpattern rules ','line_number':31,'multiline':True]['text':'* Count for looping over the possibilities ','line_number':33,'multiline':True]['text':' Exported as U_I18N_API because it is a public member field of exported ParsedSubpatternInfo','line_number':37,'multiline':False]['text':' Exported as U_I18N_API because it is a public member field of exported ParsedPatternInfo','line_number':43,'multiline':False]['text':' for convenience','line_number':50,'multiline':False]['text':' for convenience','line_number':53,'multiline':False]['text':' Note: NullableValue causes issues here with std::move.','line_number':56,'multiline':False]['text':' Exported as U_I18N_API because it is needed for the unit test PatternStringTest','line_number':73,'multiline':False]['text':' Need to declare this explicitly because of the destructor','line_number':84,'multiline':False]['text':' reference to the parent','line_number':109,'multiline':False]['text':' Leave pattern reference alone; it will continue to point to the same place in memory,','line_number':116,'multiline':False]['text':' which gets overwritten by ParsedPatternInfo's implicit move assignment.','line_number':117,'multiline':False]['text':' TODO: We don't currently do anything with the message string.','line_number':126,'multiline':False]['text':' This method is here as a shell for Java compatibility.','line_number':127,'multiline':False]['text':' NOTE: In Java, these are written as pure functions.','line_number':131,'multiline':False]['text':' In C++, they're written as methods.','line_number':132,'multiline':False]['text':' The behavior is the same.','line_number':133,'multiline':False]['text':' Mutable transient pointer:','line_number':135,'multiline':False]['text':' In Java, "negative == null" tells us whether or not we had a negative subpattern.','line_number':138,'multiline':False]['text':' In C++, we need to remember in another boolean.','line_number':139,'multiline':False]['text':'* Run the recursive descent parser. ','line_number':144,'multiline':True]['text':'*
     * Runs the recursive descent parser on the given pattern string, returning a data structure with raw information
     * about the pattern string.
     *
     * <p>
     * To obtain a more useful form of the data, consider using {@link #parseToProperties} instead.
     *
     * TODO: Change argument type to const char16_t* instead of UnicodeString?
     *
     * @param patternString
     *            The LDML decimal format pattern (Excel-style pattern) to parse.
     * @return The results of the parse.
     ','line_number':172,'multiline':True]['text':'*
     * Parses a pattern string into a new property bag.
     *
     * @param pattern
     *            The pattern string, like "#,##0.00"
     * @param ignoreRounding
     *            Whether to leave out rounding information (minFrac, maxFrac, and rounding increment) when parsing the
     *            pattern. This may be desirable if a custom rounding mode, such as CurrencyUsage, is to be used
     *            instead.
     * @return A property bag object.
     * @throws IllegalArgumentException
     *             If there is a syntax error in the pattern string.
     ','line_number':188,'multiline':True]['text':'*
     * Parses a pattern string into an existing property bag. All properties that can be encoded into a pattern string
     * will be overwritten with either their default value or with the value coming from the pattern string. Properties
     * that cannot be encoded into a pattern string, such as rounding mode, are not modified.
     *
     * @param pattern
     *            The pattern string, like "#,##0.00"
     * @param properties
     *            The property bag object to overwrite.
     * @param ignoreRounding
     *            See {@link #parseToProperties(String pattern, int ignoreRounding)}.
     * @throws IllegalArgumentException
     *             If there was a syntax error in the pattern string.
     ','line_number':206,'multiline':True]['text':'* Finalizes the temporary data stored in the ParsedPatternInfo to the Properties. ','line_number':229,'multiline':True]['text':'*
     * Determine whether a given roundingIncrement should be ignored for formatting
     * based on the current maxFrac value (maximum fraction digits). For example a
     * roundingIncrement of 0.01 should be ignored if maxFrac is 1, but not if maxFrac
     * is 2 or more. Note that roundingIncrements are rounded up in significance, so
     * a roundingIncrement of 0.006 is treated like 0.01 for this determination, i.e.
     * it should not be ignored if maxFrac is 2 or more (but a roundingIncrement of
     * 0.005 is treated like 0.001 for significance).
     *
     * This test is needed for both NumberPropertyMapper::oldToNew and 
     * PatternStringUtils::propertiesToPatternString. In Java it cannot be
     * exported by NumberPropertyMapper (package provate) so it is in
     * PatternStringUtils, do the same in C.
     *
     * @param roundIncr
     *            The roundingIncrement to be checked. Must be non-zero.
     * @param maxFrac
     *            The current maximum fraction digits value.
     * @return true if roundIncr should be ignored for formatting.
     ','line_number':237,'multiline':True]['text':'*
     * Creates a pattern string from a property bag.
     *
     * <p>
     * Since pattern strings support only a subset of the functionality available in a property bag, a new property bag
     * created from the string returned by this function may not be the same as the original property bag.
     *
     * @param properties
     *            The property bag to serialize.
     * @return A pattern string approximately serializing the property bag.
     ','line_number':259,'multiline':True]['text':'*
     * Converts a pattern between standard notation and localized notation. Localized notation means that instead of
     * using generic placeholders in the pattern, you use the corresponding locale-specific characters instead. For
     * example, in locale <em>fr-FR</em>, the period in the pattern "0.000" means "decimal" in standard notation (as it
     * does in every other locale), but it means "grouping" in localized notation.
     *
     * <p>
     * A greedy string-substitution strategy is used to substitute locale symbols. If two symbols are ambiguous or have
     * the same prefix, the result is not well-defined.
     *
     * <p>
     * Locale symbols are not allowed to contain the ASCII quote character.
     *
     * <p>
     * This method is provided for backwards compatibility and should not be used in any new code.
     *
     * TODO(C++): This method is not yet implemented.
     *
     * @param input
     *            The pattern to convert.
     * @param symbols
     *            The symbols corresponding to the localized pattern.
     * @param toLocalized
     *            true to convert from standard to localized notation; false to convert from localized to standard
     *            notation.
     * @return The pattern expressed in the other notation.
     ','line_number':274,'multiline':True]['text':'*
     * This method contains the heart of the logic for rendering LDML affix strings. It handles
     * sign-always-shown resolution, whether to use the positive or negative subpattern, permille
     * substitution, and plural forms for CurrencyPluralInfo.
     ','line_number':304,'multiline':True]['text':'* @return The number of chars inserted. ','line_number':317,'multiline':True]['text':' namespace impl','line_number':322,'multiline':False]['text':' namespace number','line_number':323,'multiline':False]['text':'__NUMBER_PATTERNSTRING_H__','line_number':327,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':329,'multiline':True]