['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':'  file:  rbbiscan.cpp','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'  Copyright (C) 2002-2016, International Business Machines Corporation and others.','line_number':6,'multiline':False]['text':'  All Rights Reserved.','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'  This file contains the Rule Based Break Iterator Rule Builder functions for','line_number':9,'multiline':False]['text':'   scanning the rules and assembling a parse tree.  This is the first phase','line_number':10,'multiline':False]['text':'   of compiling the rules.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'  The overall of the rules is managed by class RBBIRuleBuilder, which will','line_number':13,'multiline':False]['text':'  create and use an instance of this class as part of the process.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' Contains state table for the rbbi rules parser.','line_number':30,'multiline':False]['text':'   generated by a Perl script.','line_number':31,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' Unicode Set init strings for each of the character classes needed for parsing a rule file.','line_number':41,'multiline':False]['text':'               (Initialized with hex values for portability to EBCDIC based machines.','line_number':42,'multiline':False]['text':'                Really ugly, but there's no good way to avoid it.)','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':'              The sets are referred to by name in the rbbirpt.txt, which is the','line_number':45,'multiline':False]['text':'              source form of the state transition table for the RBBI rule parser.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':48,'multiline':False]['text':' Characters that may appear as literals in patterns without escaping or quoting.','line_number':50,'multiline':False]['text':'   [    ^      [    \     p     {      Z     }     \     u    0      0    2      0','line_number':51,'multiline':False]['text':'   -    \      u    0     0     7      f     ]     -     [    \      p','line_number':53,'multiline':False]['text':'   {     L     }    ]     -     [      \     p     {     N    }      ]     ]','line_number':55,'multiline':False]['text':'    [    _      \    p     {     L      }     \     p     {    N      }     ]','line_number':59,'multiline':False]['text':'    [    0      -    9     ]','line_number':63,'multiline':False]['text':'    [    _      \    p     {     L      }     ]','line_number':67,'multiline':False]['text':' "any"','line_number':70,'multiline':False]['text':' Note:  px->val is owned by the linked list "fSetsListHead" in scanner.','line_number':77,'multiline':False]['text':'        Don't delete the value nodes here.','line_number':78,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':'  Constructor.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':89,'multiline':False]['text':' Do not check status until after all critical fields are sufficiently initialized','line_number':115,'multiline':False]['text':'   that the destructor can run cleanly.','line_number':116,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'  Set up the constant Unicode Sets.','line_number':122,'multiline':False]['text':'     Note:  These could be made static, lazily initialized, and shared among','line_number':123,'multiline':False]['text':'            all instances of RBBIRuleScanners.  BUT this is quite a bit simpler,','line_number':124,'multiline':False]['text':'            and the time to build these few sets should be small compared to a','line_number':125,'multiline':False]['text':'            full break iterator build.','line_number':126,'multiline':False]['text':' fRuleSets[kRuleSet_white_space-128] = [:Pattern_White_Space:]','line_number':129,'multiline':False]['text':' This case happens if ICU's data is missing.  UnicodeSet tries to look up property','line_number':139,'multiline':False]['text':'   names from the init string, can't find them, and claims an illegal argument.','line_number':140,'multiline':False]['text':'   Change the error so that the actual problem will be clearer to users.','line_number':141,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':'  Destructor','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':166,'multiline':False]['text':' Node Stack.','line_number':176,'multiline':False]['text':'   Normally has one entry, which is the entire parse tree for the rules.','line_number':177,'multiline':False]['text':'   If errors occured, there may be additional subtrees left on the stack.','line_number':178,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':'  doParseAction        Do some action during rule parsing.','line_number':188,'multiline':False]['text':'                       Called by the parse state machine.','line_number':189,'multiline':False]['text':'                       Actions build the parse tree and Unicode Sets,','line_number':190,'multiline':False]['text':'                       and maintain the parse stack for nested expressions.','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':'                       TODO:  unify EParseAction and RBBI_RuleParseAction enum types.','line_number':193,'multiline':False]['text':'                              They represent exactly the same thing.  They're separate','line_number':194,'multiline':False]['text':'                              only to work around enum forward declaration restrictions','line_number':195,'multiline':False]['text':'                              in some compilers, while at the same time avoiding multiple','line_number':196,'multiline':False]['text':'                              definitions problems.  I'm sure that there's a better way.','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':199,'multiline':False]['text':' Scanned a '^' while on the rule start state.','line_number':215,'multiline':False]['text':' concatenation operator.','line_number':234,'multiline':False]['text':' For the implicit concatenation of adjacent terms in an expression that are','line_number':235,'multiline':False]['text':'   not separated by any other operator.  Action is invoked between the','line_number':236,'multiline':False]['text':'   actions for the two terms.','line_number':237,'multiline':False]['text':' Open Paren.','line_number':251,'multiline':False]['text':'   The openParen node is a dummy operation type with a low precedence,','line_number':252,'multiline':False]['text':'     which has the affect of ensuring that any real binary op that','line_number':253,'multiline':False]['text':'     follows within the parens binds more tightly to the operands than','line_number':254,'multiline':False]['text':'     stuff outside of the parens.','line_number':255,'multiline':False]['text':' We've just scanned "$variable = "','line_number':267,'multiline':False]['text':' The top of the node stack has the $variable ref node.','line_number':268,'multiline':False]['text':' Save the start position of the RHS text in the StartExpression node','line_number':270,'multiline':False]['text':'   that precedes the $variableReference node on the stack.','line_number':271,'multiline':False]['text':'   This will eventually be used when saving the full $variable replacement','line_number':272,'multiline':False]['text':'   text as a string.','line_number':273,'multiline':False]['text':' move past the '='','line_number':275,'multiline':False]['text':' Push a new start-of-expression node; needed to keep parse of the','line_number':277,'multiline':False]['text':'   RHS expression happy.','line_number':278,'multiline':False]['text':' We have reached the end of an assignment statement.','line_number':287,'multiline':False]['text':'   Current scan char is the ';' that terminates the assignment.','line_number':288,'multiline':False]['text':' Terminate expression, leaves expression parse tree rooted in TOS node.','line_number':290,'multiline':False]['text':' Save original text of right side of assignment, excluding the terminating ';'','line_number':297,'multiline':False]['text':'  in the root of the node for the right-hand-side expression.','line_number':298,'multiline':False]['text':' Expression parse tree becomes l. child of the $variable reference node.','line_number':303,'multiline':False]['text':' Make a symbol table entry for the $variableRef node.','line_number':307,'multiline':False]['text':' This is a round-about way to get the parse position set','line_number':310,'multiline':False]['text':'  so that duplicate symbols error messages include a line number.','line_number':311,'multiline':False]['text':' Clean up the stack.','line_number':317,'multiline':False]['text':' Terminate expression, leaves expression','line_number':325,'multiline':False]['text':'   parse tree rooted in TOS node.','line_number':326,'multiline':False]['text':' If this rule includes a look-ahead '/', add a endMark node to the','line_number':335,'multiline':False]['text':'   expression tree.','line_number':336,'multiline':False]['text':' TODO: Disable chaining out of look-ahead (hard break) rules.','line_number':351,'multiline':False]['text':'   The break on rule match is forced, so there is no point in building up','line_number':352,'multiline':False]['text':'   the state table to chain into another rule for a longer match.','line_number':353,'multiline':False]['text':' Mark this node as being the root of a rule.','line_number':356,'multiline':False]['text':' Flag if chaining into this rule is wanted.','line_number':359,'multiline':False]['text':'    ','line_number':360,'multiline':False]['text':' If rule chaining is enabled globally via !!chain','line_number':361,'multiline':False]['text':'     and no '^' chain-in inhibit was on this rule','line_number':362,'multiline':False]['text':' All rule expressions are ORed together.','line_number':367,'multiline':False]['text':' The ';' that terminates an expression really just functions as a '|' with','line_number':368,'multiline':False]['text':'   a low operator prededence.','line_number':369,'multiline':False]['text':'','line_number':370,'multiline':False]['text':' Each of the four sets of rules are collected separately.','line_number':371,'multiline':False]['text':'  (forward, reverse, safe_forward, safe_reverse)','line_number':372,'multiline':False]['text':'  OR this rule into the appropriate group of them.','line_number':373,'multiline':False]['text':'','line_number':374,'multiline':False]['text':' This is not the first rule encounted.','line_number':378,'multiline':False]['text':' OR previous stuff  (from *destRules)','line_number':379,'multiline':False]['text':' with the current rule expression (on the Node Stack)','line_number':380,'multiline':False]['text':'  with the resulting OR expression going to *destRules','line_number':381,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' This is the first rule encountered (for this direction).','line_number':397,'multiline':False]['text':' Just move its parse tree from the stack to *destRules.','line_number':398,'multiline':False]['text':' in preparation for the next rule.','line_number':401,'multiline':False]['text':'','line_number':420,'multiline':False]['text':'  Unary operands  + ? *','line_number':421,'multiline':False]['text':'    These all appear after the operand to which they apply.','line_number':422,'multiline':False]['text':'    When we hit one, the operand (may be a whole sub expression)','line_number':423,'multiline':False]['text':'    will be on the top of the stack.','line_number':424,'multiline':False]['text':'    Unary Operator becomes TOS, with the old TOS as its one child.','line_number':425,'multiline':False]['text':' A "Rule Character" is any single character that is a literal part','line_number':463,'multiline':False]['text':' of the regular expression.  Like a, b and c in the expression "(abc*) | [:L:]"','line_number':464,'multiline':False]['text':' These are pretty uncommon in break rules; the terms are more commonly','line_number':465,'multiline':False]['text':'  sets.  To keep things uniform, treat these characters like as','line_number':466,'multiline':False]['text':' sets that just happen to contain only one character.','line_number':467,'multiline':False]['text':' scanned a ".", meaning match any single character.','line_number':481,'multiline':False]['text':' Scanned a '/', which identifies a look-ahead break position in a rule.','line_number':495,'multiline':False]['text':' Scanned a '{', the opening delimiter for a tag value within a rule.','line_number':509,'multiline':False]['text':' Just scanned a decimal digit that's part of a tag value','line_number':520,'multiline':False]['text':' Scanning a !!option.   At the start of string.','line_number':541,'multiline':False]['text':' Look the newly scanned name up in the symbol table','line_number':592,'multiline':False]['text':'   If there's an entry, set the l. child of the var ref to the replacement expression.','line_number':593,'multiline':False]['text':'   (We also pass through here when scanning assignments, but no harm is done, other','line_number':594,'multiline':False]['text':'    than a slight wasted effort that seems hard to avoid.  Lookup will be null)','line_number':595,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':634,'multiline':False]['text':'','line_number':635,'multiline':False]['text':'  Error         Report a rule parse error.','line_number':636,'multiline':False]['text':'                Only report it if no previous error has been recorded.','line_number':637,'multiline':False]['text':'','line_number':638,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':639,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':655,'multiline':False]['text':'','line_number':656,'multiline':False]['text':'  fixOpStack   The parse stack holds partially assembled chunks of the parse tree.','line_number':657,'multiline':False]['text':'               An entry on the stack may be as small as a single setRef node,','line_number':658,'multiline':False]['text':'               or as large as the parse tree','line_number':659,'multiline':False]['text':'               for an entire expression (this will be the one item left on the stack','line_number':660,'multiline':False]['text':'               when the parsing of an RBBI rule completes.','line_number':661,'multiline':False]['text':'','line_number':662,'multiline':False]['text':'               This function is called when a binary operator is encountered.','line_number':663,'multiline':False]['text':'               It looks back up the stack for operators that are not yet associated','line_number':664,'multiline':False]['text':'               with a right operand, and if the precedence of the stacked operator >=','line_number':665,'multiline':False]['text':'               the precedence of the current operator, binds the operand left,','line_number':666,'multiline':False]['text':'               to the previously encountered operator.','line_number':667,'multiline':False]['text':'','line_number':668,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':669,'multiline':False]['text':' printNodeStack("entering fixOpStack()");','line_number':672,'multiline':False]['text':' an operator node','line_number':674,'multiline':False]['text':' The most recent operand goes with the current operator,','line_number':682,'multiline':False]['text':'   not with the previously stacked one.','line_number':683,'multiline':False]['text':' Stack operator is a binary op  ( '|' or concatenation)','line_number':686,'multiline':False]['text':'   TOS operand becomes right child of this operator.','line_number':687,'multiline':False]['text':'   Resulting subexpression becomes the TOS operand.','line_number':688,'multiline':False]['text':' printNodeStack("looping in fixOpStack()   ");','line_number':692,'multiline':False]['text':' Scan is at a right paren or end of expression.','line_number':696,'multiline':False]['text':'  The scanned item must match the stack, or else there was an error.','line_number':697,'multiline':False]['text':'  Discard the left paren (or start expr) node from the stack,','line_number':698,'multiline':False]['text':'  leaving the completed (sub)expression as TOS.','line_number':699,'multiline':False]['text':' Right paren encountered matched start of expression node, or','line_number':701,'multiline':False]['text':' end of expression matched with a left paren node.','line_number':702,'multiline':False]['text':' Delete the now-discarded LParen or Start node.','line_number':707,'multiline':False]['text':' printNodeStack("leaving fixOpStack()");','line_number':710,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':716,'multiline':False]['text':'','line_number':717,'multiline':False]['text':'   findSetFor    given a UnicodeString,','line_number':718,'multiline':False]['text':'                  - find the corresponding Unicode Set  (uset node)','line_number':719,'multiline':False]['text':'                         (create one if necessary)','line_number':720,'multiline':False]['text':'                  - Set fLeftChild of the caller's node (should be a setRef node)','line_number':721,'multiline':False]['text':'                         to the uset node','line_number':722,'multiline':False]['text':'                 Maintain a hash table of uset nodes, so the same one is always used','line_number':723,'multiline':False]['text':'                    for the same string.','line_number':724,'multiline':False]['text':'                 If a "to adopt" set is provided and we haven't seen this key before,','line_number':725,'multiline':False]['text':'                    add the provided set to the hash table.','line_number':726,'multiline':False]['text':'                 If the string is one (32 bit) char in length, the set contains','line_number':727,'multiline':False]['text':'                    just one element which is the char in question.','line_number':728,'multiline':False]['text':'                 If the string is "any", return a set containing all chars.','line_number':729,'multiline':False]['text':'','line_number':730,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':731,'multiline':False]['text':' First check whether we've already cached a set for this string.','line_number':736,'multiline':False]['text':' If so, just use the cached set in the new node.','line_number':737,'multiline':False]['text':'   delete any set provided by the caller, since we own it.','line_number':738,'multiline':False]['text':' Haven't seen this set before.','line_number':747,'multiline':False]['text':' If the caller didn't provide us with a prebuilt set,','line_number':748,'multiline':False]['text':'   create a new UnicodeSet now.','line_number':749,'multiline':False]['text':'','line_number':760,'multiline':False]['text':' Make a new uset node to refer to this UnicodeSet','line_number':761,'multiline':False]['text':' This new uset node becomes the child of the caller's setReference node.','line_number':762,'multiline':False]['text':'','line_number':763,'multiline':False]['text':'','line_number':775,'multiline':False]['text':' Add the new uset node to the list of all uset nodes.','line_number':776,'multiline':False]['text':'','line_number':777,'multiline':False]['text':'','line_number':781,'multiline':False]['text':' Add the new set to the set hash table.','line_number':782,'multiline':False]['text':'','line_number':783,'multiline':False]['text':' Delete to avoid memory leak','line_number':787,'multiline':False]['text':'','line_number':807,'multiline':False]['text':'  Assorted Unicode character constants.','line_number':808,'multiline':False]['text':'     Numeric because there is no portable way to enter them as literals.','line_number':809,'multiline':False]['text':'     (Think EBCDIC).','line_number':810,'multiline':False]['text':'','line_number':811,'multiline':False]['text':' New lines, for terminating comments.','line_number':812,'multiline':False]['text':'    NEL newline variant','line_number':814,'multiline':False]['text':'    Unicode Line Separator','line_number':815,'multiline':False]['text':'  single quote, for quoted chars.','line_number':816,'multiline':False]['text':' '#', introduces a comment.','line_number':817,'multiline':False]['text':' '\'  introduces a char escape','line_number':818,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':823,'multiline':False]['text':'','line_number':824,'multiline':False]['text':'  stripRules    Return a rules string without extra spaces.','line_number':825,'multiline':False]['text':'                (Comments are removed separately, during rule parsing.)','line_number':826,'multiline':False]['text':'','line_number':827,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':828,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':845,'multiline':False]['text':'','line_number':846,'multiline':False]['text':'  nextCharLL    Low Level Next Char from rule input source.','line_number':847,'multiline':False]['text':'                Get a char from the input character iterator,','line_number':848,'multiline':False]['text':'                keep track of input position for error reporting.','line_number':849,'multiline':False]['text':'','line_number':850,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':851,'multiline':False]['text':' Character is starting a new line.  Bump up the line number, and','line_number':869,'multiline':False]['text':'  reset the column to 0.','line_number':870,'multiline':False]['text':' Character is not starting a new line.  Except in the case of a','line_number':879,'multiline':False]['text':'   LF following a CR, increment the column position.','line_number':880,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':890,'multiline':False]['text':'','line_number':891,'multiline':False]['text':'   nextChar     for rules scanning.  At this level, we handle stripping','line_number':892,'multiline':False]['text':'                out comments and processing backslash character escapes.','line_number':893,'multiline':False]['text':'                The rest of the rules grammar is handled at the next level up.','line_number':894,'multiline':False]['text':'','line_number':895,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':896,'multiline':False]['text':' Unicode Character constants needed for the processing done by nextChar(),','line_number':899,'multiline':False]['text':'   in hex because literals wont work on EBCDIC machines.','line_number':900,'multiline':False]['text':'','line_number':906,'multiline':False]['text':'  check for '' sequence.','line_number':907,'multiline':False]['text':'  These are recognized in all contexts, whether in quoted text or not.','line_number':908,'multiline':False]['text':'','line_number':909,'multiline':False]['text':' get nextChar officially so character counts','line_number':912,'multiline':False]['text':'   stay correct.','line_number':913,'multiline':False]['text':' Single quote, by itself.','line_number':917,'multiline':False]['text':'   Toggle quoting mode.','line_number':918,'multiline':False]['text':'   Return either '('  or ')', because quotes cause a grouping of the quoted text.','line_number':919,'multiline':False]['text':' The paren that we return is not escaped.','line_number':926,'multiline':False]['text':' We are not in a 'quoted region' of the source.','line_number':936,'multiline':False]['text':'','line_number':937,'multiline':False]['text':' Start of a comment.  Consume the rest of it.','line_number':939,'multiline':False]['text':'  The new-line char that terminates the comment is always returned.','line_number':940,'multiline':False]['text':'  It will be treated as white-space, and serves to break up anything','line_number':941,'multiline':False]['text':'    that might otherwise incorrectly clump together with a comment in','line_number':942,'multiline':False]['text':'    the middle (a variable name, for example.)','line_number':943,'multiline':False]['text':' EOF','line_number':947,'multiline':False]['text':'','line_number':961,'multiline':False]['text':'  check for backslash escaped characters.','line_number':962,'multiline':False]['text':'  Use UnicodeString::unescapeAt() to handle them.','line_number':963,'multiline':False]['text':'','line_number':964,'multiline':False]['text':' putc(c.fChar, stdout);','line_number':975,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':978,'multiline':False]['text':'','line_number':979,'multiline':False]['text':'  Parse RBBI rules.   The state machine for rules parsing is here.','line_number':980,'multiline':False]['text':'                      The state tables are hand-written in the file rbbirpt.txt,','line_number':981,'multiline':False]['text':'                      and converted to the form used here by a perl','line_number':982,'multiline':False]['text':'                      script rbbicst.pl','line_number':983,'multiline':False]['text':'','line_number':984,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':985,'multiline':False]['text':'','line_number':996,'multiline':False]['text':' Main loop for the rule parsing state machine.','line_number':997,'multiline':False]['text':'   Runs once per state transition.','line_number':998,'multiline':False]['text':'   Each time through optionally performs, depending on the state table,','line_number':999,'multiline':False]['text':'      - an advance to the the next input char','line_number':1000,'multiline':False]['text':'      - an action to be performed.','line_number':1001,'multiline':False]['text':'      - pushing or popping a state to/from the local state return stack.','line_number':1002,'multiline':False]['text':'','line_number':1003,'multiline':False]['text':'  Bail out if anything has gone wrong.','line_number':1005,'multiline':False]['text':'  RBBI rule file parsing stops on the first error encountered.','line_number':1006,'multiline':False]['text':' Quit if state == 0.  This is the normal way to exit the state machine.','line_number':1011,'multiline':False]['text':'','line_number':1012,'multiline':False]['text':' Find the state table element that matches the input char from the rule, or the','line_number':1017,'multiline':False]['text':'    class of the input character.  Start with the first table row for this','line_number':1018,'multiline':False]['text':'    state, then linearly scan forward until we find a row that matches the','line_number':1019,'multiline':False]['text':'    character.  The last row for each state always matches all characters, so','line_number':1020,'multiline':False]['text':'    the search will stop there, if not before.','line_number':1021,'multiline':False]['text':'','line_number':1022,'multiline':False]['text':' Table row specified an individual character, not a set, and','line_number':1036,'multiline':False]['text':'   the input character is not escaped, and','line_number':1037,'multiline':False]['text':'   the input character matched it.','line_number':1038,'multiline':False]['text':' Table row specified default, match anything character class.','line_number':1042,'multiline':False]['text':' Table row specified "escaped" and the char was escaped.','line_number':1046,'multiline':False]['text':' Table row specified "escaped P" and the char is either 'p' or 'P'.','line_number':1051,'multiline':False]['text':' Table row specified eof and we hit eof on the input.','line_number':1055,'multiline':False]['text':' Table specs a char class &&','line_number':1059,'multiline':False]['text':'   char is not escaped &&','line_number':1060,'multiline':False]['text':'   char is not EOF','line_number':1061,'multiline':False]['text':' Table row specified a character class, or set of characters,','line_number':1064,'multiline':False]['text':'   and the current char matches it.','line_number':1065,'multiline':False]['text':' No match on this row, advance to the next  row for this state,','line_number':1070,'multiline':False]['text':'','line_number':1075,'multiline':False]['text':' We've found the row of the state table that matches the current input','line_number':1076,'multiline':False]['text':'   character from the rules string.','line_number':1077,'multiline':False]['text':' Perform any action specified  by this row in the state table.','line_number':1078,'multiline':False]['text':' Break out of the state machine loop if the','line_number':1080,'multiline':False]['text':'   the action signalled some kind of error, or','line_number':1081,'multiline':False]['text':'   the action was to exit, occurs on normal end-of-rules-input.','line_number':1082,'multiline':False]['text':' Get the next state from the table entry, or from the','line_number':1100,'multiline':False]['text':'   state stack if the next state was specified as "pop".','line_number':1101,'multiline':False]['text':' If there are no forward rules set an error.','line_number':1120,'multiline':False]['text':'','line_number':1121,'multiline':False]['text':'','line_number':1127,'multiline':False]['text':' Parsing of the input RBBI rules is complete.','line_number':1128,'multiline':False]['text':' We now have a parse tree for the rule expressions','line_number':1129,'multiline':False]['text':' and a list of all UnicodeSets that are referenced.','line_number':1130,'multiline':False]['text':'','line_number':1131,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1148,'multiline':False]['text':'','line_number':1149,'multiline':False]['text':'  printNodeStack     for debugging...','line_number':1150,'multiline':False]['text':'','line_number':1151,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1152,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1164,'multiline':False]['text':'','line_number':1165,'multiline':False]['text':'  pushNewNode   create a new RBBINode of the specified type and push it','line_number':1166,'multiline':False]['text':'                onto the stack of nodes.','line_number':1167,'multiline':False]['text':'','line_number':1168,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1169,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1189,'multiline':False]['text':'','line_number':1190,'multiline':False]['text':'  scanSet    Construct a UnicodeSet from the text at the current scan','line_number':1191,'multiline':False]['text':'             position.  Advance the scan position to the first character','line_number':1192,'multiline':False]['text':'             after the set.','line_number':1193,'multiline':False]['text':'','line_number':1194,'multiline':False]['text':'             A new RBBI setref node referring to the set is pushed onto the node','line_number':1195,'multiline':False]['text':'             stack.','line_number':1196,'multiline':False]['text':'','line_number':1197,'multiline':False]['text':'             The scan position is normally under the control of the state machine','line_number':1198,'multiline':False]['text':'             that controls rule parsing.  UnicodeSets, however, are parsed by','line_number':1199,'multiline':False]['text':'             the UnicodeSet constructor, not by the RBBI rule parser.','line_number':1200,'multiline':False]['text':'','line_number':1201,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1202,'multiline':False]['text':'  TODO:  Get more accurate position of the error from UnicodeSet's return info.','line_number':1223,'multiline':False]['text':'         UnicodeSet appears to not be reporting correctly at this time.','line_number':1224,'multiline':False]['text':' Verify that the set contains at least one code point.','line_number':1233,'multiline':False]['text':'','line_number':1234,'multiline':False]['text':' This set is empty.','line_number':1237,'multiline':False]['text':'  Make it an error, because it almost certainly is not what the user wanted.','line_number':1238,'multiline':False]['text':'  Also, avoids having to think about corner cases in the tree manipulation code','line_number':1239,'multiline':False]['text':'   that occurs later on.','line_number':1240,'multiline':False]['text':' Advance the RBBI parse postion over the UnicodeSet pattern.','line_number':1247,'multiline':False]['text':'   Don't just set fScanIndex because the line/char positions maintained','line_number':1248,'multiline':False]['text':'   for error reporting would be thrown off.','line_number':1249,'multiline':False]['text':'  findSetFor() serves several purposes here:','line_number':1268,'multiline':False]['text':'     - Adopts storage for the UnicodeSet, will be responsible for deleting.','line_number':1269,'multiline':False]['text':'     - Mantains collection of all sets in use, needed later for establishing','line_number':1270,'multiline':False]['text':'          character categories for run time engine.','line_number':1271,'multiline':False]['text':'     - Eliminates mulitiple instances of the same set.','line_number':1272,'multiline':False]['text':'     - Creates a new uset node if necessary (if this isn't a duplicate.)','line_number':1273,'multiline':False]['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':1285,'multiline':True]