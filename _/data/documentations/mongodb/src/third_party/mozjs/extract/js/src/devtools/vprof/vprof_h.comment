['text':' -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: t; tab-width: 4 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':'','line_number':6,'multiline':False]['text':'  Here are a few examples of using the value-profiling utility:','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'  _vprof (e);','line_number':9,'multiline':False]['text':'    at the end of program execution, you'll get a dump of the source location','line_number':10,'multiline':False]['text':'    of this probe, its min, max, average, the total sum of all instances of e,','line_number':11,'multiline':False]['text':'    and the total number of times this probe was called.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':'  _vprof (x > 0);','line_number':14,'multiline':False]['text':'    shows how many times and what percentage of the cases x was > 0,','line_number':15,'multiline':False]['text':'    that is the probablitiy that x > 0.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' _vprof (n % 2 == 0);','line_number':18,'multiline':False]['text':'    shows how many times n was an even number','line_number':19,'multiline':False]['text':'    as well as th probablitiy of n being an even number.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' _hprof (n, 4, 1000, 5000, 5001, 10000);','line_number':22,'multiline':False]['text':'    gives you the histogram of n over the given 4 bucket boundaries:','line_number':23,'multiline':False]['text':'        # cases <  1000','line_number':24,'multiline':False]['text':'        # cases >= 1000 and < 5000','line_number':25,'multiline':False]['text':'        # cases >= 5000 and < 5001','line_number':26,'multiline':False]['text':'        # cases >= 5001 and < 10000','line_number':27,'multiline':False]['text':'        # cases >= 10000','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' _nvprof ("event name", value);','line_number':30,'multiline':False]['text':'    all instances with the same name are merged','line_number':31,'multiline':False]['text':'    so, you can call _vprof with the same event name at difference places','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' _vprof (e, myProbe);','line_number':34,'multiline':False]['text':'    value profile e and call myProbe (void* vprofID) at the profiling point.','line_number':35,'multiline':False]['text':'    inside the probe, the client has the predefined variables:','line_number':36,'multiline':False]['text':'    _VAL, _COUNT, _SUM, _MIN, _MAX, and the general purpose registers','line_number':37,'multiline':False]['text':'    _IVAR1, ..., IVAR4      general integer registrs','line_number':38,'multiline':False]['text':'    _I64VAR1, ..., I64VAR4  general integer64 registrs','line_number':39,'multiline':False]['text':'    _DVAR1, ..., _DVAR4     general double registers','line_number':40,'multiline':False]['text':'    _GENPTR a generic pointer that can be used by the client','line_number':41,'multiline':False]['text':'    the number of registers can be changed in vprof.h','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' If the application for which you want to use vprof is threaded, THREADED must','line_number':48,'multiline':False]['text':' be defined as 1, otherwise define it as 0','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' If your application is not threaded, define THREAD_SAFE 0,','line_number':51,'multiline':False]['text':' otherwise, you have the option of setting THREAD_SAFE to 1 which results in','line_number':52,'multiline':False]['text':' exact counts or to 0 which results in a much more efficient but non-exact','line_number':53,'multiline':False]['text':' counts','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' Note, this is not supported in configurations with more than one AvmCore','line_number':61,'multiline':False]['text':' running in the same process.','line_number':62,'multiline':False]['text':' portable align macro','line_number':64,'multiline':False]['text':'#define DOPROF','line_number':89,'multiline':False]['text':' ! VMCFG_SYMBIAN','line_number':105,'multiline':False]['text':' Historical/compatibility note:','line_number':108,'multiline':False]['text':' The macros below were originally written using conditional expressions, not','line_number':109,'multiline':False]['text':' if/else.  The original author said that this was done to allow _vprof and','line_number':110,'multiline':False]['text':' _nvprof to be used in an expression context, but the old code had already','line_number':111,'multiline':False]['text':' wrapped the macro bodies in { }, so it is not clear how this could have','line_number':112,'multiline':False]['text':' worked.  At present, the profiling macros must appear in a statement context','line_number':113,'multiline':False]['text':' only.','line_number':114,'multiline':False]['text':' Profile execution time between _ntprof_begin(e) and _ntprof_end(e).','line_number':147,'multiline':False]['text':' The tag 'e' must match at the beginning and end of the region to','line_number':148,'multiline':False]['text':' be timed.  Regions may be nested or overlap arbitrarily, as it is','line_number':149,'multiline':False]['text':' the tag alone that defines the begin/end correspondence.','line_number':150,'multiline':False]['text':' Assume 2.6 Ghz CPU','line_number':159,'multiline':False]['text':' These macros separate the creation of a profile record from its later usage.','line_number':172,'multiline':False]['text':' They are intended for profiling JIT-generated code.  Once created, the JIT','line_number':173,'multiline':False]['text':' can bind a pointer to the profile record into the generated code, which can','line_number':174,'multiline':False]['text':' then record profile events during execution.','line_number':175,'multiline':False]['text':' Calls to the _jvprof and _jhprof macros must be wrapped in a non-inline','line_number':192,'multiline':False]['text':' function in order to be invoked from JIT-compiled code.','line_number':193,'multiline':False]['text':' exposed to the clients','line_number':237,'multiline':False]['text':'','line_number':242,'multiline':False]['text':' avoid false sharing','line_number':244,'multiline':False]['text':' devtools_vprof_vprof_h ','line_number':270,'multiline':True]