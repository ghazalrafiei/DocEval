['text':' -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':' Type traits for enums. ','line_number':6,'multiline':True]['text':' Signed enum, signed storage.','line_number':22,'multiline':False]['text':' Signed enum, unsigned storage.','line_number':27,'multiline':False]['text':' Unsigned enum, signed storage.','line_number':32,'multiline':False]['text':' Unsigned enum, unsigned storage.','line_number':37,'multiline':False]['text':' namespace detail','line_number':42,'multiline':False]['text':'
 * Type trait that determines whether the enum type T can fit within the
 * integral type Storage without data loss. This trait should be used with
 * caution with an enum type whose underlying type has not been explicitly
 * specified: for such enums, the C++ implementation is free to choose a type
 * no smaller than int whose range encompasses all possible values of the enum.
 * So for an enum with only small non-negative values, the underlying type may
 * be either int or unsigned int, depending on the whims of the implementation.
 ','line_number':44,'multiline':True]['text':'
 * Provides information about highest enum member value.
 * Each specialization of struct MaxEnumValue should define
 * "static constexpr unsigned int value".
 *
 * example:
 *
 *   enum ExampleEnum
 *   {
 *     CAT = 0,
 *     DOG,
 *     HAMSTER
 *   };
 *
 *   template <>
 *   struct MaxEnumValue<ExampleEnum>
 *   {
 *     static constexpr unsigned int value = static_cast<unsigned int>(HAMSTER);
 *   };
 ','line_number':64,'multiline':True]['text':' no need to define the primary template','line_number':85,'multiline':False]['text':'*
 * Get the underlying value of an enum, but typesafe.
 *
 * example:
 *
 *   enum class Pet : int16_t {
 *     Cat,
 *     Dog,
 *     Fish
 *   };
 *   enum class Plant {
 *     Flower,
 *     Tree,
 *     Vine
 *   };
 *   UnderlyingValue(Pet::Fish) -> int16_t(2)
 *   UnderlyingValue(Plant::Tree) -> int(1)
 ','line_number':87,'multiline':True]['text':' namespace mozilla','line_number':111,'multiline':False]['text':' mozilla_EnumTypeTraits_h ','line_number':113,'multiline':True]