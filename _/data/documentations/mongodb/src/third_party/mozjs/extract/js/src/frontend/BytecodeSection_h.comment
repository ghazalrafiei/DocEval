['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_STACK_CLASS','line_number':10,'multiline':False]['text':' mozilla::Maybe','line_number':11,'multiline':False]['text':' mozilla::Span','line_number':12,'multiline':False]['text':' ptrdiff_t, size_t','line_number':14,'multiline':False]['text':' uint16_t, int32_t, uint32_t','line_number':15,'multiline':False]['text':' JS_PUBLIC_API','line_number':17,'multiline':False]['text':' ValueVector','line_number':18,'multiline':False]['text':' AbstractScopePtr, ScopeIndex','line_number':20,'multiline':False]['text':' BytecodeOffset','line_number':21,'multiline':False]['text':' CompilationStencil, CompilationGCOutput','line_number':22,'multiline':False]['text':' JumpTarget','line_number':23,'multiline':False]['text':' AtomIndexMap, PooledMapPtr','line_number':24,'multiline':False]['text':' ObjLiteralStencil','line_number':25,'multiline':False]['text':' BigIntLiteral','line_number':26,'multiline':False]['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':27,'multiline':False]['text':' SrcNote','line_number':28,'multiline':False]['text':' Stencils','line_number':29,'multiline':False]['text':' JS::Rooted','line_number':30,'multiline':False]['text':' GCPolicy<mozilla::Variant>','line_number':31,'multiline':False]['text':' GCVector','line_number':32,'multiline':False]['text':' jsbytecode, JSContext','line_number':33,'multiline':False]['text':' JS::Vector','line_number':34,'multiline':False]['text':' Vector','line_number':35,'multiline':False]['text':' JSOpLength_JumpTarget','line_number':36,'multiline':False]['text':' TryNote, ScopeNote, GCThingIndex','line_number':37,'multiline':False]['text':' TryNoteKind','line_number':38,'multiline':False]['text':' The BCE accumulates TaggedScriptThingIndex items so use a vector type. We','line_number':49,'multiline':False]['text':' reserve some stack slots to avoid allocating for most small scripts.','line_number':50,'multiline':False]['text':' Index of the first scope in the vector.','line_number':56,'multiline':False]['text':' Index of scope within CompilationStencil or Nothing is the scope is','line_number':121,'multiline':False]['text':' EmptyGlobalScopeType.','line_number':122,'multiline':False]['text':' Have a few inline elements, so as to avoid heap allocation for tiny','line_number':180,'multiline':False]['text':' sequences.  See bug 1390526.','line_number':181,'multiline':False]['text':' Bytecode and all data directly associated with specific opcode/index inside','line_number':185,'multiline':False]['text':' bytecode is stored in this class.','line_number':186,'multiline':False]['text':' ---- Bytecode ----','line_number':191,'multiline':False]['text':' ---- Source notes ----','line_number':203,'multiline':False]['text':' ---- Jump ----','line_number':211,'multiline':False]['text':' Check if the last emitted opcode is a jump target.','line_number':218,'multiline':False]['text':' JumpTarget should not be part of the emitted statement, as they can be','line_number':225,'multiline':False]['text':' aliased by multiple statements. If we included the jump target as part of','line_number':226,'multiline':False]['text':' the statement we might have issues where the enclosing statement might','line_number':227,'multiline':False]['text':' not contain all the opcodes of the enclosed statements.','line_number':228,'multiline':False]['text':' ---- Stack ----','line_number':233,'multiline':False]['text':' ---- Try notes ----','line_number':242,'multiline':False]['text':' ---- Scope ----','line_number':247,'multiline':False]['text':' ---- Generator ----','line_number':252,'multiline':False]['text':' ---- Line and column ----','line_number':262,'multiline':False]['text':' ---- JIT ----','line_number':301,'multiline':False]['text':' ---- Bytecode ----','line_number':311,'multiline':False]['text':' Bytecode.','line_number':313,'multiline':False]['text':' ---- Source notes ----','line_number':316,'multiline':False]['text':' Source notes','line_number':318,'multiline':False]['text':' Code offset for last source note','line_number':321,'multiline':False]['text':' ---- Jump ----','line_number':324,'multiline':False]['text':' Last jump target emitted.','line_number':326,'multiline':False]['text':' ---- Stack ----','line_number':329,'multiline':False]['text':' Maximum number of expression stack slots so far.','line_number':331,'multiline':False]['text':' Current stack depth in script frame.','line_number':334,'multiline':False]['text':' ---- Try notes ----','line_number':337,'multiline':False]['text':' List of emitted try notes.','line_number':339,'multiline':False]['text':' ---- Scope ----','line_number':342,'multiline':False]['text':' List of emitted block scope notes.','line_number':344,'multiline':False]['text':' ---- Generator ----','line_number':347,'multiline':False]['text':' Certain ops (yield, await, gosub) have an entry in the script's','line_number':349,'multiline':False]['text':' resumeOffsets list. This can be used to map from the op's resumeIndex to','line_number':350,'multiline':False]['text':' the bytecode offset of the next pc. This indirection makes it easy to','line_number':351,'multiline':False]['text':' resume in the JIT (because BaselineScript stores a resumeIndex => native','line_number':352,'multiline':False]['text':' code array).','line_number':353,'multiline':False]['text':' Number of yield instructions emitted. Does not include JSOp::Await.','line_number':356,'multiline':False]['text':' ---- Line and column ----','line_number':359,'multiline':False]['text':' Line number for srcnotes.','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':' WARNING: If this becomes out of sync with already-emitted srcnotes,','line_number':363,'multiline':False]['text':' we can get undefined behavior.','line_number':364,'multiline':False]['text':' Zero-based column index on currentLine_ of last','line_number':367,'multiline':False]['text':' SrcNoteType::ColSpan-annotated opcode.','line_number':368,'multiline':False]['text':'','line_number':369,'multiline':False]['text':' WARNING: If this becomes out of sync with already-emitted srcnotes,','line_number':370,'multiline':False]['text':' we can get undefined behavior.','line_number':371,'multiline':False]['text':' The last code unit used for srcnotes.','line_number':374,'multiline':False]['text':' The offset, line and column numbers of the last opcode for the','line_number':377,'multiline':False]['text':' breakpoint for step execution.','line_number':378,'multiline':False]['text':' ---- JIT ----','line_number':384,'multiline':False]['text':' Number of ICEntries in the script. There's one ICEntry for each JOF_IC op','line_number':386,'multiline':False]['text':' and, if the script is a function, for |this| and each formal argument.','line_number':387,'multiline':False]['text':' Data that is not directly associated with specific opcode/index inside','line_number':391,'multiline':False]['text':' bytecode, but referred from bytecode is stored in this class.','line_number':392,'multiline':False]['text':' List of emitted scopes/objects/bigints.','line_number':407,'multiline':False]['text':' Map from atom to index.','line_number':410,'multiline':False]['text':' namespace frontend ','line_number':414,'multiline':True]['text':' namespace js ','line_number':415,'multiline':True]['text':' frontend_BytecodeSection_h ','line_number':417,'multiline':True]