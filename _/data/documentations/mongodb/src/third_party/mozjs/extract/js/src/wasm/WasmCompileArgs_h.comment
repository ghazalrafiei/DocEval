['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' Code can be compiled either with the Baseline compiler or the Ion compiler,','line_number':34,'multiline':False]['text':' and tier-variant data are tagged with the Tier value.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' A tier value is used to request tier-variant aspects of code, metadata, or','line_number':37,'multiline':False]['text':' linkdata.  The tiers are normally explicit (Baseline and Ion); implicit tiers','line_number':38,'multiline':False]['text':' can be obtained through accessors on Code objects (eg, stableTier).','line_number':39,'multiline':False]['text':' Iterator over tiers present in a tiered data structure.','line_number':48,'multiline':False]['text':' Describes per-compilation settings that are controlled by an options bag','line_number':71,'multiline':False]['text':' passed to compilation and validation functions.  (Nonstandard extension','line_number':72,'multiline':False]['text':' available under prefs.)','line_number':73,'multiline':False]['text':' May be set if javascript.options.wasm_simd_wormhole==true.','line_number':78,'multiline':False]['text':' Describes the features that control wasm compilation.','line_number':82,'multiline':False]['text':' Describes the JS scripted caller of a request to compile a wasm module.','line_number':109,'multiline':False]['text':' Describes all the parameters that control wasm compilation.','line_number':119,'multiline':False]['text':' CompileArgs has two constructors:','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':' - one through a factory function `build`, which checks that flags are','line_number':139,'multiline':False]['text':' consistent with each other.','line_number':140,'multiline':False]['text':' - one that gives complete access to underlying fields.','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' You should use the first one in general, unless you have a very good','line_number':143,'multiline':False]['text':' reason (i.e. no JSContext around and you know which flags have been used).','line_number':144,'multiline':False]['text':' CompilerEnvironment holds any values that will be needed to compute','line_number':158,'multiline':False]['text':' compilation parameters once the module's feature opt-in sections have been','line_number':159,'multiline':False]['text':' parsed.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' Subsequent to construction a computeParameters() call will compute the final','line_number':162,'multiline':False]['text':' compilation parameters, and the object can then be queried for their values.','line_number':163,'multiline':False]['text':' The object starts in one of two "initial" states; computeParameters moves','line_number':169,'multiline':False]['text':' it into the "computed" state.','line_number':170,'multiline':False]['text':' Value if the state_ == InitialWithArgs.','line_number':175,'multiline':False]['text':' Value in the other two states.','line_number':178,'multiline':False]['text':' Retain a reference to the CompileArgs. A subsequent computeParameters()','line_number':188,'multiline':False]['text':' will compute all parameters from the CompileArgs and additional values.','line_number':189,'multiline':False]['text':' Save the provided values for mode, tier, and debug, and the initial value','line_number':192,'multiline':False]['text':' for gc/refTypes. A subsequent computeParameters() will compute the','line_number':193,'multiline':False]['text':' final value of gc/refTypes.','line_number':194,'multiline':False]['text':' Compute any remaining compilation parameters.','line_number':199,'multiline':False]['text':' Compute any remaining compilation parameters.  Only use this method if','line_number':202,'multiline':False]['text':' the CompilerEnvironment was created with values for mode, tier, and','line_number':203,'multiline':False]['text':' debug.','line_number':204,'multiline':False]['text':' namespace wasm','line_number':227,'multiline':False]['text':' namespace js','line_number':228,'multiline':False]['text':' wasm_compile_args_h','line_number':230,'multiline':False]