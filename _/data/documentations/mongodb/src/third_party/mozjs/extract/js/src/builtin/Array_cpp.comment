['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JSJitGetterOp, JSJitInfo','line_number':28,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':29,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':30,'multiline':False]['text':' js::PlainObject','line_number':42,'multiline':False]['text':' js::ValueToSource','line_number':45,'multiline':False]['text':' js_*_str','line_number':47,'multiline':False]['text':' ES2017 7.1.15 ToLength.','line_number':106,'multiline':False]['text':' Fast path for array functions where the object is expected to be an array.','line_number':154,'multiline':False]['text':'
 * Determine if the id represents an array index.
 *
 * An id is an array index according to ECMA by (15.4):
 *
 * "Array objects give special treatment to a certain class of property names.
 * A property name P (in the form of a string value) is an array index if and
 * only if ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
 * to 2^32-1."
 *
 * This means the largest allowed index is actually 2^32-2 (4294967294).
 *
 * In our implementation, it would be sufficient to check for id.isInt32()
 * except that by using signed 31-bit integers we miss the top half of the
 * valid range. This function checks the string representation itself; note
 * that calling a standard conversion routine might allow strings such as
 * "08" or "4.0" as array indices, which they are not.
 *
 ','line_number':166,'multiline':True]['text':'
 * If the property at the given index exists, get its value into |vp| and set
 * |*hole| to false. Otherwise set |*hole| to true and |vp| to Undefined.
 ','line_number':230,'multiline':True]['text':' No other indexed properties so hole => undefined.','line_number':358,'multiline':False]['text':' Set the value of the property at the given index to v.','line_number':440,'multiline':False]['text':'
 * Attempt to delete the element |index| from |obj| as if by
 * |obj.[[Delete]](index)|.
 *
 * If an error occurs while attempting to delete the element (that is, the call
 * to [[Delete]] threw), return false.
 *
 * Otherwise call result.succeed() or result.fail() to indicate whether the
 * deletion attempt succeeded (that is, whether the call to [[Delete]] returned
 * true or false).  (Deletes generally fail only when the property is
 * non-configurable, but proxies may implement different semantics.)
 ','line_number':451,'multiline':True]['text':' ES6 draft rev 32 (2 Febr 2015) 7.3.7 ','line_number':492,'multiline':True]['text':' Skip forward to the initialized elements of this array.','line_number':514,'multiline':False]['text':' ES6 draft rev 34 (2015 Feb 20) 9.4.2.4 ArraySetLength ','line_number':596,'multiline':True]['text':' Step 1.','line_number':603,'multiline':False]['text':' The spec has us calling OrdinaryDefineOwnProperty if','line_number':606,'multiline':False]['text':' Desc.[[Value]] is absent, but our implementation is so different that','line_number':607,'multiline':False]['text':' this is impossible. Instead, set newLen to the current length and','line_number':608,'multiline':False]['text':' proceed to step 9.','line_number':609,'multiline':False]['text':' Step 2 is irrelevant in our implementation.','line_number':612,'multiline':False]['text':' Step 3.','line_number':614,'multiline':False]['text':' Step 4.','line_number':619,'multiline':False]['text':' Step 5.','line_number':625,'multiline':False]['text':' Steps 6-8 are irrelevant in our implementation.','line_number':632,'multiline':False]['text':' Steps 9-11.','line_number':635,'multiline':False]['text':' Part of steps 1.a, 12.a, and 16: Fail if we're being asked to change','line_number':646,'multiline':False]['text':' enumerability or configurability, or otherwise break the object','line_number':647,'multiline':False]['text':' invariants. (ES6 checks these by calling OrdinaryDefineOwnProperty, but','line_number':648,'multiline':False]['text':' in SM, the array length property is hardly ordinary.)','line_number':649,'multiline':False]['text':' Steps 12-13 for arrays with non-writable length.','line_number':656,'multiline':False]['text':' Step 19.','line_number':665,'multiline':False]['text':' The initialized length and capacity of an array only need updating','line_number':668,'multiline':False]['text':' when non-hole elements are added or removed, which doesn't happen','line_number':669,'multiline':False]['text':' when array length stays the same or increases.','line_number':670,'multiline':False]['text':' Attempt to propagate dense-element optimization tricks, if possible,','line_number':675,'multiline':False]['text':' and avoid the generic (and accordingly slow) deletion code below.','line_number':676,'multiline':False]['text':' We can only do this if there are only densely-indexed elements.','line_number':677,'multiline':False]['text':' Once there's a sparse indexed element, there's no good way to know,','line_number':678,'multiline':False]['text':' save by enumerating all the properties to find it.  But we *have* to','line_number':679,'multiline':False]['text':' know in case that sparse indexed element is non-configurable, as','line_number':680,'multiline':False]['text':' that element must prevent any deletions below it.  Bug 586842 should','line_number':681,'multiline':False]['text':' fix this inefficiency by moving indexed storage to be entirely','line_number':682,'multiline':False]['text':' separate from non-indexed storage.','line_number':683,'multiline':False]['text':' A second reason for this optimization to be invalid is an active','line_number':684,'multiline':False]['text':' for..in iteration over the array. Keys deleted before being reached','line_number':685,'multiline':False]['text':' during the iteration must not be visited, and suppressing them here','line_number':686,'multiline':False]['text':' would be too costly.','line_number':687,'multiline':False]['text':' This optimization is also invalid when there are sealed','line_number':688,'multiline':False]['text':' (non-configurable) elements.','line_number':689,'multiline':False]['text':' We've done the work of deleting any dense elements needing','line_number':707,'multiline':False]['text':' deletion, and there are no sparse elements.  Thus we can skip','line_number':708,'multiline':False]['text':' straight to defining the length.','line_number':709,'multiline':False]['text':' Step 15.','line_number':713,'multiline':False]['text':'','line_number':714,'multiline':False]['text':' Attempt to delete all elements above the new length, from greatest','line_number':715,'multiline':False]['text':' to least.  If any of these deletions fails, we're supposed to define','line_number':716,'multiline':False]['text':' the length to one greater than the index that couldn't be deleted,','line_number':717,'multiline':False]['text':' *with the property attributes specified*.  This might convert the','line_number':718,'multiline':False]['text':' length to be not the value specified, yet non-writable.  (You may be','line_number':719,'multiline':False]['text':' forgiven for thinking these are interesting semantics.)  Example:','line_number':720,'multiline':False]['text':'','line_number':721,'multiline':False]['text':'   var arr =','line_number':722,'multiline':False]['text':'     Object.defineProperty([0, 1, 2, 3], 1, { writable: false });','line_number':723,'multiline':False]['text':'   Object.defineProperty(arr, "length",','line_number':724,'multiline':False]['text':'                         { value: 0, writable: false });','line_number':725,'multiline':False]['text':'','line_number':726,'multiline':False]['text':' will convert |arr| to an array of non-writable length two, then','line_number':727,'multiline':False]['text':' throw a TypeError.','line_number':728,'multiline':False]['text':'','line_number':729,'multiline':False]['text':' We implement this behavior, in the relevant lops below, by setting','line_number':730,'multiline':False]['text':' |succeeded| to false.  Then we exit the loop, define the length','line_number':731,'multiline':False]['text':' appropriately, and only then throw a TypeError, if necessary.','line_number':732,'multiline':False]['text':' If we're removing a relatively small number of elements, just do','line_number':736,'multiline':False]['text':' it exactly by the spec.','line_number':737,'multiline':False]['text':' Step 15a.','line_number':739,'multiline':False]['text':' Steps 15b-d.','line_number':742,'multiline':False]['text':' If we're removing a large number of elements from an array','line_number':754,'multiline':False]['text':' that's probably sparse, try a different tack.  Get all the own','line_number':755,'multiline':False]['text':' property names, sift out the indexes in the deletion range into','line_number':756,'multiline':False]['text':' a vector, sort the vector greatest to least, then delete the','line_number':757,'multiline':False]['text':' indexes greatest to least using that vector.  See bug 322135.','line_number':758,'multiline':False]['text':'','line_number':759,'multiline':False]['text':' This heuristic's kind of a huge guess -- "large number of','line_number':760,'multiline':False]['text':' elements" and "probably sparse" are completely unprincipled','line_number':761,'multiline':False]['text':' predictions.  In the long run, bug 586842 will support the right','line_number':762,'multiline':False]['text':' fix: store sparse elements in a sorted data structure that','line_number':763,'multiline':False]['text':' permits fast in-reverse-order traversal and concurrent removals.','line_number':764,'multiline':False]['text':' We should use radix sort to be O(n), but this is uncommon','line_number':793,'multiline':False]['text':' enough that we'll punt til someone complains.','line_number':794,'multiline':False]['text':' Steps 15b-d.','line_number':808,'multiline':False]['text':' Update array length. Technically we should have been doing this','line_number':822,'multiline':False]['text':' throughout the loop, in step 19.d.iii.','line_number':823,'multiline':False]['text':' Step 20.','line_number':826,'multiline':False]['text':' All operations past here until the |!succeeded| code must be infallible,','line_number':838,'multiline':False]['text':' so that all element fields remain properly synchronized.','line_number':839,'multiline':False]['text':' Trim the initialized length, if needed, to preserve the <= length','line_number':841,'multiline':False]['text':' invariant.  (Capacity was already reduced during element deletion, if','line_number':842,'multiline':False]['text':' necessary.)','line_number':843,'multiline':False]['text':'
 * Whether obj may have indexed properties anywhere besides its dense
 * elements. This includes other indexed properties in its shape hierarchy, and
 * indexed properties or elements along its prototype chain.
 ','line_number':897,'multiline':True]['text':' no extra indexed properties found','line_number':916,'multiline':False]['text':' Add the 'length' property for a newly created array.','line_number':929,'multiline':False]['text':' Note: this also returns true for cross-realm Array constructors in the','line_number':940,'multiline':False]['text':' same compartment.','line_number':941,'multiline':False]['text':' We assume DOM proxies never return true for IsArray.','line_number':969,'multiline':False]['text':' 9.4.2.3 Step 4. Non-array objects always use the default constructor.','line_number':979,'multiline':False]['text':' 9.4.2.3 Step 6.c. Use the current realm's constructor if |ctor| is a','line_number':999,'multiline':False]['text':' cross-realm Array constructor.','line_number':1000,'multiline':False]['text':' Get element's character string. ','line_number':1070,'multiline':True]['text':' Append element to buffer. ','line_number':1081,'multiline':True]['text':' Finalize the buffer. ','line_number':1096,'multiline':True]['text':' This loop handles all elements up to initializedLength. If','line_number':1151,'multiline':False]['text':' length > initLength we rely on the second loop to add the','line_number':1152,'multiline':False]['text':' other elements.','line_number':1153,'multiline':False]['text':' Step 7.b.','line_number':1165,'multiline':False]['text':' Steps 7.c-d.','line_number':1168,'multiline':False]['text':'
       * Object stringifying could modify the initialized length or make
       * the array sparse. Delegate it to a separate loop to keep this
       * one tight.
       *
       * Symbol stringifying is a TypeError, so into the slow path
       * with those as well.
       ','line_number':1182,'multiline':True]['text':' ToString(bigint) doesn't access bigint.toString or','line_number':1192,'multiline':False]['text':' anything like that, so it can't mutate the array we're','line_number':1193,'multiline':False]['text':' walking through, so it *could* be handled here. We don't','line_number':1194,'multiline':False]['text':' do so yet for reasons of initial-implementation economy.','line_number':1195,'multiline':False]['text':' Steps 7.a, 7.e.','line_number':1201,'multiline':False]['text':' Step 6.','line_number':1213,'multiline':False]['text':' Step 7.','line_number':1223,'multiline':False]['text':' Step 7.b.','line_number':1231,'multiline':False]['text':' Steps 7.c-d.','line_number':1236,'multiline':False]['text':' Steps 7.a, 7.e.','line_number':1243,'multiline':False]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':1253,'multiline':False]['text':' 22.1.3.13 Array.prototype.join ( separator )','line_number':1254,'multiline':False]['text':' Step 1.','line_number':1266,'multiline':False]['text':' Step 2.','line_number':1282,'multiline':False]['text':' Steps 3-4.','line_number':1288,'multiline':False]['text':' Steps 5-8 (When the length is zero, directly return the empty string).','line_number':1303,'multiline':False]['text':' An optimized version of a special case of steps 5-8: when length==1 and','line_number':1309,'multiline':False]['text':' the 0th element is a string, ToString() of that element is a no-op and','line_number':1310,'multiline':False]['text':' so it can be immediately returned as the result.','line_number':1311,'multiline':False]['text':' Step 5.','line_number':1323,'multiline':False]['text':' The separator will be added |length - 1| times, reserve space for that','line_number':1329,'multiline':False]['text':' so that we don't have to unnecessarily grow the buffer.','line_number':1330,'multiline':False]['text':' Various optimized versions of steps 6-7.','line_number':1349,'multiline':False]['text':' Step 8.','line_number':1375,'multiline':False]['text':' ES2017 draft rev f8a9be8ea4bd97237d176907a1e3080dce20c68f','line_number':1385,'multiline':False]['text':' 22.1.3.27 Array.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])','line_number':1386,'multiline':False]['text':' ES2017 Intl draft rev 78bbe7d1095f5ff3760ac4017ed366026e4cb276','line_number':1387,'multiline':False]['text':' 13.4.1 Array.prototype.toLocaleString ([ locales [ , options ]])','line_number':1388,'multiline':False]['text':' Step 1','line_number':1397,'multiline':False]['text':' Avoid calling into self-hosted code if the array is empty.','line_number':1403,'multiline':False]['text':' Steps 2-10.','line_number':1424,'multiline':False]['text':' vector must point to rooted memory. ','line_number':1430,'multiline':True]['text':' If there are no elements, we're done.','line_number':1473,'multiline':False]['text':'
     * It's actually surprisingly complicated to reverse an array due
     * to the orthogonality of array length and array capacity while
     * handling leading and trailing holes correctly.  Reversing seems
     * less likely to be a common operation than other array
     * mass-mutation methods, so for now just take a probably-small
     * memory hit (in the absence of too many holes in the array at
     * its start) and ensure that the capacity is sufficient to hold
     * all the elements in the array if it were full.
     ','line_number':1483,'multiline':True]['text':' Fill out the array's initialized length to its proper length. ','line_number':1498,'multiline':True]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':1536,'multiline':False]['text':' 22.1.3.21 Array.prototype.reverse ( )','line_number':1537,'multiline':False]['text':' Step 1.','line_number':1544,'multiline':False]['text':' Step 2.','line_number':1550,'multiline':False]['text':' An empty array or an array with length 1 is already reversed.','line_number':1556,'multiline':False]['text':'
       * Per ECMA-262, don't update the length of the array, even if the new
       * array has trailing holes (and thus the original array began with
       * holes).
       ','line_number':1566,'multiline':True]['text':' Steps 3-5.','line_number':1576,'multiline':False]['text':' No action required.','line_number':1608,'multiline':False]['text':' Step 6.','line_number':1612,'multiline':False]['text':'
   * This is just floor_log10(n) + 1
   * Algorithm taken from
   * http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10
   ','line_number':1639,'multiline':True]['text':'
   * If both numbers are equal ... trivial
   * If only one of both is negative --> arithmetic comparison as char code
   * of '-' is always less than any other digit
   * If both numbers are negative convert them to positive and continue
   * handling ...
   ','line_number':1654,'multiline':True]['text':'
     *  ... get number of digits of both integers.
     * If they have the same number of digits --> arithmetic comparison.
     * If digits_a > digits_b: a < b*10e(digits_a - digits_b).
     * If digits_b > digits_a: a*10e(digits_b - digits_a) <= b.
     ','line_number':1671,'multiline':True]['text':' if (digitsb > digitsa) ','line_number':1685,'multiline':True]['text':' Note: Values for this enum must match up with SortComparatorNumerics','line_number':1804,'multiline':False]['text':' and SortComparatorInt32s.','line_number':1805,'multiline':False]['text':' namespace','line_number':1813,'multiline':False]['text':'
 * Specialize behavior for comparator functions with particular common bytecode
 * patterns: namely, |return x - y| and |return y - x|.
 ','line_number':1815,'multiline':True]['text':' Sort keys. ','line_number':1875,'multiline':True]['text':'
   * Reorder vec by keys in-place, going element by element.  When an out-of-
   * place element is encountered, move that element to its proper position,
   * displacing whatever element was at *that* point to its proper position,
   * and so on until an element must be moved to the current position.
   *
   * At each outer iteration all elements up to |i| are sorted.  If
   * necessary each inner iteration moves some number of unsorted elements
   * (including |i|) directly to sorted position.  Thus on completion |*vec|
   * is sorted, and out-of-position elements have moved once.  Complexity is
   * Θ(len) + O(len) == O(2*len), with each element visited at most twice.
   ','line_number':1880,'multiline':True]['text':' fixed point','line_number':1895,'multiline':False]['text':' We could assert the loop invariant that |i == keys[i].elementIndex|','line_number':1907,'multiline':False]['text':' here if we synced |keys[i].elementIndex|.  But doing so would render','line_number':1908,'multiline':False]['text':' the assertion vacuous, so don't bother, even in debug builds.','line_number':1909,'multiline':False]['text':'
 * Sort Values as strings.
 *
 * To minimize #conversions, SortLexicographically() first converts all Values
 * to strings at once, then sorts the elements by these cached strings.
 ','line_number':1916,'multiline':True]['text':' MergeSort uses the upper half as scratch space. ','line_number':1930,'multiline':True]['text':' Convert Values to strings. ','line_number':1935,'multiline':True]['text':' Sort Values in vec alphabetically. ','line_number':1950,'multiline':True]['text':'
 * Sort Values as numbers.
 *
 * To minimize #conversions, SortNumerically first converts all Values to
 * numerics at once, then sorts the elements by these cached numerics.
 ','line_number':1955,'multiline':True]['text':' MergeSort uses the upper half as scratch space. ','line_number':1967,'multiline':True]['text':' Convert Values to numerics. ','line_number':1972,'multiline':True]['text':' Sort Values in vec numerically. ','line_number':1986,'multiline':True]['text':' This function is called from the self-hosted Array.prototype.sort','line_number':2043,'multiline':False]['text':' implementation. It returns |true| if the array was sorted, otherwise it','line_number':2044,'multiline':False]['text':' returns |false| to notify the self-hosted code to perform the sorting.','line_number':2045,'multiline':False]['text':' Non-optimized user supplied comparators perform much better when','line_number':2060,'multiline':False]['text':' called from within a self-hosted sorting function.','line_number':2061,'multiline':False]['text':' [] and [a] remain unchanged when sorted. ','line_number':2076,'multiline':True]['text':'
   * We need a temporary array of 2 * len Value to hold the array elements
   * and the scratch space for merge sort. Check that its size does not
   * overflow size_t, which would allow for indexing beyond the end of the
   * malloc'd vector.
   ','line_number':2087,'multiline':True]['text':'
     * By ECMA 262, 15.4.4.11, a property that does not exist (which we
     * call a "hole") is always greater than an existing property with
     * value undefined and that is always greater than any other property.
     * Thus to sort holes and undefs we simply count them, sort the rest
     * of elements, append undefs after them and then make holes after
     * undefs.
     ','line_number':2107,'multiline':True]['text':'
     * If the array only contains holes, we're done.  But if it contains
     * undefs, those must be sorted to the front of the array.
     ','line_number':2160,'multiline':True]['text':' Here len == n + undefs + number_of_holes. ','line_number':2170,'multiline':True]['text':'
       * Sort using the default comparator converting all elements to
       * strings.
       ','line_number':2172,'multiline':True]['text':' Set undefs that sorted after the rest of elements. ','line_number':2212,'multiline':True]['text':' Re-create any holes that sorted to the end of the array. ','line_number':2220,'multiline':True]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':2249,'multiline':False]['text':' 22.1.3.18 Array.prototype.push ( ...items )','line_number':2250,'multiline':False]['text':' Step 1.','line_number':2257,'multiline':False]['text':' Step 2.','line_number':2263,'multiline':False]['text':' setOrExtendDenseElements takes care of updating the length for','line_number':2281,'multiline':False]['text':' arrays. Handle updates to the length of non-arrays here.','line_number':2282,'multiline':False]['text':' Step 5.','line_number':2292,'multiline':False]['text':' Steps 3-6.','line_number':2300,'multiline':False]['text':' Steps 7-8.','line_number':2305,'multiline':False]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':2310,'multiline':False]['text':' 22.1.3.17 Array.prototype.pop ( )','line_number':2311,'multiline':False]['text':' Step 1.','line_number':2318,'multiline':False]['text':' Step 2.','line_number':2324,'multiline':False]['text':' Steps 3-4.','line_number':2330,'multiline':False]['text':' Step 3.b.','line_number':2332,'multiline':False]['text':' Steps 4.a-b.','line_number':2335,'multiline':False]['text':' Steps 4.c, 4.f.','line_number':2338,'multiline':False]['text':' Steps 4.d.','line_number':2343,'multiline':False]['text':' Steps 3.a, 4.e.','line_number':2349,'multiline':False]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':2414,'multiline':False]['text':' 22.1.3.22 Array.prototype.shift ( )','line_number':2415,'multiline':False]['text':' Step 1.','line_number':2422,'multiline':False]['text':' Step 2.','line_number':2428,'multiline':False]['text':' Step 3.','line_number':2434,'multiline':False]['text':' Step 3.a.','line_number':2436,'multiline':False]['text':' Step 3.b.','line_number':2441,'multiline':False]['text':' Fast paths. ','line_number':2448,'multiline':True]['text':' Steps 4, 9.','line_number':2462,'multiline':False]['text':' Steps 5-6.','line_number':2470,'multiline':False]['text':' Step 7.','line_number':2491,'multiline':False]['text':' Step 8.','line_number':2496,'multiline':False]['text':' ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce','line_number':2500,'multiline':False]['text':' 22.1.3.29 Array.prototype.unshift ( ...items )','line_number':2501,'multiline':False]['text':' Step 1.','line_number':2508,'multiline':False]['text':' Step 2.','line_number':2514,'multiline':False]['text':' Steps 3-4.','line_number':2520,'multiline':False]['text':' Step 4.a.','line_number':2566,'multiline':False]['text':' Steps 4.b-c.','line_number':2573,'multiline':False]['text':' Steps 4.d-f.','line_number':2597,'multiline':False]['text':' Copy from args to the bottom of the array. ','line_number':2598,'multiline':True]['text':' Step 5.','line_number':2605,'multiline':False]['text':' Step 6.','line_number':2611,'multiline':False]['text':' Follow Perl by returning the new array length. ','line_number':2612,'multiline':True]['text':'
 * Returns true if this is a dense array whose properties ending at |endIndex|
 * (exclusive) may be accessed (get, set, delete) directly through its
 * contiguous vector of elements without fear of getters, setters, etc. along
 * the prototype chain, or of enumerators requiring notification of
 * modifications.
 ','line_number':2619,'multiline':True]['text':' If the desired properties overflow dense storage, we can't optimize. ','line_number':2628,'multiline':True]['text':'
     * Dense storage read access is possible for any packed array as long
     * as we only access properties within the initialized length. In all
     * other cases we need to ensure there are no other indexed properties
     * on this object or on the prototype chain. Callers are required to
     * clamp the read length, so it doesn't exceed the initialized length.
     ','line_number':2634,'multiline':True]['text':' There's no optimizing possible if it's not an array. ','line_number':2648,'multiline':True]['text':' If the length is non-writable, always pick the slow path ','line_number':2653,'multiline':True]['text':' Also pick the slow path if the object is non-extensible. ','line_number':2658,'multiline':True]['text':' Also pick the slow path if the object is being iterated over. ','line_number':2663,'multiline':True]['text':' Or we attempt to write to indices outside the initialized length. ','line_number':2668,'multiline':True]['text':'
   * Now watch out for getters and setters along the prototype chain or in
   * other indexed properties on the object. Packed arrays don't have any
   * other indexed properties by definition.
   ','line_number':2673,'multiline':True]['text':' Use dense storage for new indexed properties where possible.','line_number':2714,'multiline':False]['text':' Copy any remaining elements.','line_number':2745,'multiline':False]['text':' Step 1. ','line_number':2767,'multiline':True]['text':' Step 2. ','line_number':2773,'multiline':True]['text':' Step 3. ','line_number':2779,'multiline':True]['text':' Step 4. ','line_number':2785,'multiline':True]['text':' Step 5. ','line_number':2793,'multiline':True]['text':' Step 5.b. ','line_number':2796,'multiline':True]['text':' Step 6.b. ','line_number':2799,'multiline':True]['text':' Steps 7.b. ','line_number':2802,'multiline':True]['text':' Step 7.c. ','line_number':2808,'multiline':True]['text':' Step 8. ','line_number':2812,'multiline':True]['text':' Steps 9-12. ','line_number':2839,'multiline':True]['text':' Step 9. ','line_number':2847,'multiline':True]['text':' Steps 10-11. ','line_number':2853,'multiline':True]['text':' Step 12 (implicit). ','line_number':2859,'multiline':True]['text':' Steps 9. ','line_number':2862,'multiline':True]['text':' Steps 10, 11, 11.d. ','line_number':2867,'multiline':True]['text':' Step 11.a (implicit). ','line_number':2870,'multiline':True]['text':' Steps 11.b, 11.c.i. ','line_number':2876,'multiline':True]['text':' Step 11.c. ','line_number':2882,'multiline':True]['text':' Step 11.c.ii. ','line_number':2884,'multiline':True]['text':' Step 12. ','line_number':2891,'multiline':True]['text':' Step 14. ','line_number':2897,'multiline':True]['text':' Step 15: the array is being shrunk. ','line_number':2902,'multiline':True]['text':' Steps 15.a-b. ','line_number':2912,'multiline':True]['text':' Steps 15.c-d. ','line_number':2919,'multiline':True]['text':'
       * This is all very slow if the length is very large. We don't yet
       * have the ability to iterate in sorted order, so we just do the
       * pessimistic thing and let CheckForInterrupt handle the
       * fallout.
       ','line_number':2922,'multiline':True]['text':' Steps 15.a-b. ','line_number':2929,'multiline':True]['text':' Steps 15.b.i-ii (implicit). ','line_number':2933,'multiline':True]['text':' Steps 15.b.iii, 15.b.iv.1. ','line_number':2939,'multiline':True]['text':' Steps 15.b.iv. ','line_number':2945,'multiline':True]['text':' Steps 15.b.v.1. ','line_number':2947,'multiline':True]['text':' Step 15.b.iv.2. ','line_number':2952,'multiline':True]['text':' Steps 15.c-d. ','line_number':2959,'multiline':True]['text':' Step 16. ','line_number':2968,'multiline':True]['text':' Fast path for when we can simply extend and move the dense elements.','line_number':2970,'multiline':False]['text':' Ensure there are no getters/setters or other extra indexed properties.','line_number':2980,'multiline':False]['text':' Watch out for arrays with non-writable length or non-extensible arrays.','line_number':2985,'multiline':False]['text':' In these cases `splice` may have to throw an exception so we let the','line_number':2986,'multiline':False]['text':' slow path handle it. We also have to ensure we maintain the','line_number':2987,'multiline':False]['text':' |capacity <= initializedLength| invariant for such objects. See','line_number':2988,'multiline':False]['text':' NativeObject::shrinkCapacityToInitializedLength.','line_number':2989,'multiline':False]['text':' Also use the slow path if there might be an active for-in iterator so','line_number':2995,'multiline':False]['text':' that we don't have to worry about suppressing deleted properties.','line_number':2996,'multiline':False]['text':' Steps 16.a-b. ','line_number':3024,'multiline':True]['text':' Step 16.b.i. ','line_number':3035,'multiline':True]['text':' Step 16.b.ii. ','line_number':3038,'multiline':True]['text':' Steps 16.b.iii, 16.b.iv.1. ','line_number':3041,'multiline':True]['text':' Steps 16.b.iv. ','line_number':3047,'multiline':True]['text':' Step 16.b.v.1. ','line_number':3049,'multiline':True]['text':' Step 16.b.iv.2. ','line_number':3054,'multiline':True]['text':' Step 13 (reordered). ','line_number':3063,'multiline':True]['text':' Steps 17-18. ','line_number':3066,'multiline':True]['text':' Step 19. ','line_number':3071,'multiline':True]['text':' Step 20. ','line_number':3076,'multiline':True]['text':' ES 2016 draft Mar 25, 2016 22.1.3.26. ','line_number':3084,'multiline':True]['text':' Returns all indexed properties in the range [begin, end) found on |obj| or','line_number':3100,'multiline':False]['text':' its proto chain. This function does not handle proxies, objects with','line_number':3101,'multiline':False]['text':' resolve/lookupProperty hooks or indexed getters, as those can introduce','line_number':3102,'multiline':False]['text':' new properties. In those cases, *success is set to |false|.','line_number':3103,'multiline':False]['text':' TODO: Add IdIsIndex with support for large indices.','line_number':3110,'multiline':False]['text':' First, look for proxies or class hooks that can introduce extra','line_number':3116,'multiline':False]['text':' properties.','line_number':3117,'multiline':False]['text':' Collect indexed property names.','line_number':3126,'multiline':False]['text':' Append dense elements.','line_number':3129,'multiline':False]['text':' Append typed array elements.','line_number':3141,'multiline':False]['text':' Append sparse elements.','line_number':3151,'multiline':False]['text':' Watch out for getters, they can add new properties.','line_number':3165,'multiline':False]['text':' Sort the indexes.','line_number':3177,'multiline':False]['text':' Remove duplicates.','line_number':3187,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 22.1.3.23. ','line_number':3347,'multiline':True]['text':' Step 1. ','line_number':3354,'multiline':True]['text':' Step 2. ','line_number':3360,'multiline':True]['text':' Step 3. ','line_number':3370,'multiline':True]['text':' Step 4. ','line_number':3375,'multiline':True]['text':' Step 5. ','line_number':3379,'multiline':True]['text':' Step 6. ','line_number':3384,'multiline':True]['text':' Steps 7-12: Optimized for ordinary array. ','line_number':3390,'multiline':True]['text':' Step 7. ','line_number':3394,'multiline':True]['text':' Step 8. ','line_number':3397,'multiline':True]['text':' Step 9. ','line_number':3403,'multiline':True]['text':' Step 10. ','line_number':3406,'multiline':True]['text':' Steps 10.a-b, and 10.c.i. ','line_number':3413,'multiline':True]['text':' Step 10.c. ','line_number':3419,'multiline':True]['text':' Steps 10.c.ii. ','line_number':3421,'multiline':True]['text':' Step 10.d. ','line_number':3426,'multiline':True]['text':' Step 10.e. ','line_number':3429,'multiline':True]['text':' Step 11. ','line_number':3433,'multiline':True]['text':' Step 12. ','line_number':3438,'multiline':True]['text':' Slower path if the JIT wasn't able to allocate an object inline.','line_number':3485,'multiline':False]['text':' isArrayConstructor will usually be true in practice. This is the most','line_number':3530,'multiline':False]['text':' common path.','line_number':3531,'multiline':False]['text':' Step 4.','line_number':3535,'multiline':False]['text':' Step 8.','line_number':3547,'multiline':False]['text':' Steps 9-10.','line_number':3554,'multiline':False]['text':' Step 11.','line_number':3559,'multiline':False]['text':' unused ','line_number':3566,'multiline':True]['text':' unused ','line_number':3567,'multiline':True]['text':' Perl-ish methods. ','line_number':3578,'multiline':True]['text':' Pythonic sequence methods. ','line_number':3588,'multiline':True]['text':' ES6 additions ','line_number':3602,'multiline':True]['text':' ES7 additions ','line_number':3614,'multiline':True]['text':' ES2020 ','line_number':3617,'multiline':True]['text':' Proposal ','line_number':3621,'multiline':True]['text':' We're emulating |new Array(n)| with |std_Array(n)| in self-hosted JS,','line_number':3643,'multiline':False]['text':' and the proto should be %ArrayPrototype% regardless of the callee.','line_number':3644,'multiline':False]['text':' ES5 15.4.2 ','line_number':3683,'multiline':True]['text':' isConstructor = ','line_number':3686,'multiline':True]['text':' isConstructor = ','line_number':3694,'multiline':True]['text':' JIT code can call this with a template object from a different realm when','line_number':3700,'multiline':False]['text':' calling another realm's Array constructor.','line_number':3701,'multiline':False]['text':' Add Array.prototype[@@unscopables]. ECMA-262 draft (2016 Mar 19) 22.1.3.32.','line_number':3748,'multiline':False]['text':' addProperty','line_number':3777,'multiline':False]['text':' delProperty','line_number':3778,'multiline':False]['text':' enumerate','line_number':3779,'multiline':False]['text':' newEnumerate','line_number':3780,'multiline':False]['text':' resolve','line_number':3781,'multiline':False]['text':' mayResolve','line_number':3782,'multiline':False]['text':' finalize','line_number':3783,'multiline':False]['text':' call','line_number':3784,'multiline':False]['text':' hasInstance','line_number':3785,'multiline':False]['text':' construct','line_number':3786,'multiline':False]['text':' trace','line_number':3787,'multiline':False]['text':'
 * Array allocation functions.
 ','line_number':3805,'multiline':True]['text':'
   * If ensureElements creates dynamically allocated slots, then having
   * fixedSlots is a waste.
   ','line_number':3811,'multiline':True]['text':' Fixup the elements pointer and length, which may be incorrect. ','line_number':3855,'multiline':True]['text':'
   * Get a shape with zero fixed slots, regardless of the size class.
   * See JSObject::createArray.
   ','line_number':3868,'multiline':True]['text':' = nullptr ','line_number':3917,'multiline':True]['text':' = nullptr ','line_number':3922,'multiline':True]['text':' = nullptr ','line_number':3927,'multiline':True]['text':' = GenericObject ','line_number':3928,'multiline':True]['text':' = nullptr ','line_number':3929,'multiline':True]['text':' = nullptr ','line_number':3934,'multiline':True]['text':' = GenericObject ','line_number':3935,'multiline':True]['text':' = nullptr ','line_number':3941,'multiline':True]['text':' = GenericObject ','line_number':3942,'multiline':True]['text':' values must point at already-rooted Value objects','line_number':3946,'multiline':False]['text':' = nullptr ','line_number':3949,'multiline':True]['text':' = GenericObject ','line_number':3950,'multiline':True]['text':' TODO(no-TI): clean up.','line_number':3992,'multiline':False]['text':' Ion can call this with a shape from a different realm when calling','line_number':3995,'multiline':False]['text':' another realm's Array constructor.','line_number':3996,'multiline':False]['text':' Get the canonical Array.prototype.','line_number':4037,'multiline':False]['text':' Leave the cache uninitialized if the Array class itself is not yet','line_number':4040,'multiline':False]['text':' initialized.','line_number':4041,'multiline':False]['text':' Get the canonical Array constructor.','line_number':4046,'multiline':False]['text':' Shortcut returns below means Array[@@species] will never be','line_number':4053,'multiline':False]['text':' optimizable, set to disabled now, and clear it later when we succeed.','line_number':4054,'multiline':False]['text':' Look up Array.prototype[@@iterator] and ensure it's a data property.','line_number':4057,'multiline':False]['text':' Get the referred value, and ensure it holds the canonical Array','line_number':4064,'multiline':False]['text':' constructor.','line_number':4065,'multiline':False]['text':' Look up the '@@species' value on Array','line_number':4074,'multiline':False]['text':' Get the referred value, ensure it holds the canonical Array[@@species]','line_number':4081,'multiline':False]['text':' function.','line_number':4082,'multiline':False]['text':' Store raw pointers below. This is okay to do here, because all objects','line_number':4093,'multiline':False]['text':' are in the tenured heap.','line_number':4094,'multiline':False]['text':' Ensure that Array.prototype still has the expected shape.','line_number':4120,'multiline':False]['text':' Ensure that Array.prototype.constructor contains the canonical Array','line_number':4125,'multiline':False]['text':' constructor function.','line_number':4126,'multiline':False]['text':' Ensure that Array still has the expected shape.','line_number':4132,'multiline':False]['text':' Ensure the species getter contains the canonical @@species function.','line_number':4137,'multiline':False]['text':' If the cache is not initialized, initialize it.','line_number':4145,'multiline':False]['text':' Otherwise, if the array state is no longer sane, reinitialize.','line_number':4148,'multiline':False]['text':' If the cache is disabled or still uninitialized, don't bother trying to','line_number':4153,'multiline':False]['text':' optimize.','line_number':4154,'multiline':False]['text':' By the time we get here, we should have a sane array state.','line_number':4159,'multiline':False]['text':' Ensure |array|'s prototype is the actual Array.prototype.','line_number':4162,'multiline':False]['text':' Ensure |array| doesn't define any own properties besides its','line_number':4167,'multiline':False]['text':' non-deletable "length" property. This serves as a quick check to make','line_number':4168,'multiline':False]['text':' sure |array| doesn't define an own "constructor" property which may','line_number':4169,'multiline':False]['text':' shadow Array.prototype.constructor.','line_number':4170,'multiline':False]