['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'***********************************************************************
 * Copyright (C) 1996-2008, International Business Machines Corporation *
 * and others. All Rights Reserved.                                     *
 ************************************************************************
 *  2003-nov-07   srl       Port from Java
 ','line_number':3,'multiline':True]['text':' for Math','line_number':17,'multiline':False]['text':'*
 * <code>CalendarAstronomer</code> is a class that can perform the calculations to
 * determine the positions of the sun and moon, the time of sunrise and
 * sunset, and other astronomy-related data.  The calculations it performs
 * are in some cases quite complicated, and this utility class saves you
 * the trouble of worrying about them.
 * <p>
 * The measurement of time is a very important part of astronomy.  Because
 * astronomical bodies are constantly in motion, observations are only valid
 * at a given moment in time.  Accordingly, each <code>CalendarAstronomer</code>
 * object has a <code>time</code> property that determines the date
 * and time for which its calculations are performed.  You can set and
 * retrieve this property with {@link #setDate setDate}, {@link #getDate getDate}
 * and related methods.
 * <p>
 * Almost all of the calculations performed by this class, or by any
 * astronomer, are approximations to various degrees of accuracy.  The
 * calculations in this class are mostly modelled after those described
 * in the book
 * <a href="http://www.amazon.com/exec/obidos/ISBN=0521356997" target="_top">
 * Practical Astronomy With Your Calculator</a>, by Peter J.
 * Duffett-Smith, Cambridge University Press, 1990.  This is an excellent
 * book, and if you want a greater understanding of how these calculations
 * are performed it a very good, readable starting point.
 * <p>
 * <strong>WARNING:</strong> This class is very early in its development, and
 * it is highly likely that its API will change to some degree in the future.
 * At the moment, it basically does just enough to support {@link IslamicCalendar}
 * and {@link ChineseCalendar}.
 *
 * @author Laura Werner
 * @author Alan Liu
 * @internal
 ','line_number':22,'multiline':True]['text':' some classes','line_number':58,'multiline':False]['text':'*
   * Represents the position of an object in the sky relative to the ecliptic,
   * the plane of the earth's orbit around the Sun.
   * This is a spherical coordinate system in which the latitude
   * specifies the position north or south of the plane of the ecliptic.
   * The longitude specifies the position along the ecliptic plane
   * relative to the "First Point of Aries", which is the Sun's position in the sky
   * at the Vernal Equinox.
   * <p>
   * Note that Ecliptic objects are immutable and cannot be modified
   * once they are constructed.  This allows them to be passed and returned by
   * value without worrying about whether other code will modify them.
   *
   * @see CalendarAstronomer.Equatorial
   * @see CalendarAstronomer.Horizon
   * @internal
   ','line_number':61,'multiline':True]['text':'*
     * Constructs an Ecliptic coordinate object.
     * <p>
     * @param lat The ecliptic latitude, measured in radians.
     * @param lon The ecliptic longitude, measured in radians.
     * @internal
     ','line_number':80,'multiline':True]['text':'*
     * Setter for Ecliptic Coordinate object
     * @param lat The ecliptic latitude, measured in radians.
     * @param lon The ecliptic longitude, measured in radians.
     * @internal
     ','line_number':92,'multiline':True]['text':'*
     * Return a string representation of this object
     * @internal
     ','line_number':103,'multiline':True]['text':'*
     * The ecliptic latitude, in radians.  This specifies an object's
     * position north or south of the plane of the ecliptic,
     * with positive angles representing north.
     * @internal
     ','line_number':109,'multiline':True]['text':'*
     * The ecliptic longitude, in radians.
     * This specifies an object's position along the ecliptic plane
     * relative to the "First Point of Aries", which is the Sun's position
     * in the sky at the Vernal Equinox,
     * with positive angles representing east.
     * <p>
     * A bit of trivia: the first point of Aries is currently in the
     * constellation Pisces, due to the precession of the earth's axis.
     * @internal
     ','line_number':117,'multiline':True]['text':'*
   * Represents the position of an
   * object in the sky relative to the plane of the earth's equator.
   * The <i>Right Ascension</i> specifies the position east or west
   * along the equator, relative to the sun's position at the vernal
   * equinox.  The <i>Declination</i> is the position north or south
   * of the equatorial plane.
   * <p>
   * Note that Equatorial objects are immutable and cannot be modified
   * once they are constructed.  This allows them to be passed and returned by
   * value without worrying about whether other code will modify them.
   *
   * @see CalendarAstronomer.Ecliptic
   * @see CalendarAstronomer.Horizon
   * @internal
   ','line_number':131,'multiline':True]['text':'*
     * Constructs an Equatorial coordinate object.
     * <p>
     * @param asc The right ascension, measured in radians.
     * @param dec The declination, measured in radians.
     * @internal
     ','line_number':149,'multiline':True]['text':'*
     * Setter
     * @param asc The right ascension, measured in radians.
     * @param dec The declination, measured in radians.
     * @internal
     ','line_number':159,'multiline':True]['text':'*
     * Return a string representation of this object, with the
     * angles measured in degrees.
     * @internal
     ','line_number':170,'multiline':True]['text':'*
     * Return a string representation of this object with the right ascension
     * measured in hours, minutes, and seconds.
     * @internal
     ','line_number':177,'multiline':True]['text':'String toHmsString() {','line_number':182,'multiline':False]['text':'return radToHms(ascension) + "," + radToDms(declination);','line_number':183,'multiline':False]['text':'}','line_number':184,'multiline':False]['text':'*
     * The right ascension, in radians.
     * This is the position east or west along the equator
     * relative to the sun's position at the vernal equinox,
     * with positive angles representing East.
     * @internal
     ','line_number':186,'multiline':True]['text':'*
     * The declination, in radians.
     * This is the position north or south of the equatorial plane,
     * with positive angles representing north.
     * @internal
     ','line_number':195,'multiline':True]['text':'*
   * Represents the position of an  object in the sky relative to
   * the local horizon.
   * The <i>Altitude</i> represents the object's elevation above the horizon,
   * with objects below the horizon having a negative altitude.
   * The <i>Azimuth</i> is the geographic direction of the object from the
   * observer's position, with 0 representing north.  The azimuth increases
   * clockwise from north.
   * <p>
   * Note that Horizon objects are immutable and cannot be modified
   * once they are constructed.  This allows them to be passed and returned by
   * value without worrying about whether other code will modify them.
   *
   * @see CalendarAstronomer.Ecliptic
   * @see CalendarAstronomer.Equatorial
   * @internal
   ','line_number':204,'multiline':True]['text':'*
     * Constructs a Horizon coordinate object.
     * <p>
     * @param alt  The altitude, measured in radians above the horizon.
     * @param azim The azimuth, measured in radians clockwise from north.
     * @internal
     ','line_number':223,'multiline':True]['text':'*
     * Setter for Ecliptic Coordinate object
     * @param alt  The altitude, measured in radians above the horizon.
     * @param azim The azimuth, measured in radians clockwise from north.
     * @internal
     ','line_number':233,'multiline':True]['text':'*
     * Return a string representation of this object, with the
     * angles measured in degrees.
     * @internal
     ','line_number':244,'multiline':True]['text':'*
     * The object's altitude above the horizon, in radians.
     * @internal
     ','line_number':251,'multiline':True]['text':'*
     * The object's direction, in radians clockwise from north.
     * @internal
     ','line_number':257,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':265,'multiline':False]['text':' Assorted private data used for conversions','line_number':266,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':267,'multiline':False]['text':' My own copies of these so compilers are more likely to optimize them away','line_number':269,'multiline':False]['text':'*
   * The average number of solar days from one new moon to the next.  This is the time
   * it takes for the moon to return the same ecliptic longitude as the sun.
   * It is longer than the sidereal month because the sun's longitude increases
   * during the year due to the revolution of the earth around the sun.
   * Approximately 29.53.
   *
   * @see #SIDEREAL_MONTH
   * @internal
   * @deprecated ICU 2.4. This class may be removed or modified.
   ','line_number':272,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':285,'multiline':False]['text':' Constructors','line_number':286,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':287,'multiline':False]['text':'*
   * Construct a new <code>CalendarAstronomer</code> object that is initialized to
   * the current date and time.
   * @internal
   ','line_number':289,'multiline':True]['text':'*
   * Construct a new <code>CalendarAstronomer</code> object that is initialized to
   * the specified date and time.
   * @internal
   ','line_number':296,'multiline':True]['text':'*
   * Construct a new <code>CalendarAstronomer</code> object with the given
   * latitude and longitude.  The object's time is set to the current
   * date and time.
   * <p>
   * @param longitude The desired longitude, in <em>degrees</em> east of
   *                  the Greenwich meridian.
   *
   * @param latitude  The desired latitude, in <em>degrees</em>.  Positive
   *                  values signify North, negative South.
   *
   * @see java.util.Date#getTime()
   * @internal
   ','line_number':303,'multiline':True]['text':'*
   * Destructor
   * @internal
   ','line_number':319,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':325,'multiline':False]['text':' Time and date getters and setters','line_number':326,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':327,'multiline':False]['text':'*
   * Set the current date and time of this <code>CalendarAstronomer</code> object.  All
   * astronomical calculations are performed based on this time setting.
   *
   * @param aTime the date and time, expressed as the number of milliseconds since
   *              1/1/1970 0:00 GMT (Gregorian).
   *
   * @see #setDate
   * @see #getTime
   * @internal
   ','line_number':329,'multiline':True]['text':'*
   * Set the current date and time of this <code>CalendarAstronomer</code> object.  All
   * astronomical calculations are performed based on this time setting.
   *
   * @param aTime the date and time, expressed as the number of milliseconds since
   *              1/1/1970 0:00 GMT (Gregorian).
   *
   * @see #getTime
   * @internal
   ','line_number':343,'multiline':True]['text':'*
   * Set the current date and time of this <code>CalendarAstronomer</code> object.  All
   * astronomical calculations are performed based on this time setting.
   *
   * @param jdn   the desired time, expressed as a "julian day number",
   *              which is the number of elapsed days since
   *              1/1/4713 BC (Julian), 12:00 GMT.  Note that julian day
   *              numbers start at <em>noon</em>.  To get the jdn for
   *              the corresponding midnight, subtract 0.5.
   *
   * @see #getJulianDay
   * @see #JULIAN_EPOCH_MS
   * @internal
   ','line_number':355,'multiline':True]['text':'*
   * Get the current time of this <code>CalendarAstronomer</code> object,
   * represented as the number of milliseconds since
   * 1/1/1970 AD 0:00 GMT (Gregorian).
   *
   * @see #setTime
   * @see #getDate
   * @internal
   ','line_number':371,'multiline':True]['text':'*
   * Get the current time of this <code>CalendarAstronomer</code> object,
   * expressed as a "julian day number", which is the number of elapsed
   * days since 1/1/4713 BC (Julian), 12:00 GMT.
   *
   * @see #setJulianDay
   * @see #JULIAN_EPOCH_MS
   * @internal
   ','line_number':382,'multiline':True]['text':'*
   * Return this object's time expressed in julian centuries:
   * the number of centuries after 1/1/1900 AD, 12:00 GMT
   *
   * @see #getJulianDay
   * @internal
   ','line_number':393,'multiline':True]['text':'*
   * Returns the current Greenwich sidereal time, measured in hours
   * @internal
   ','line_number':402,'multiline':True]['text':'*
   * Returns the current local sidereal time, measured in hours
   * @internal
   ','line_number':411,'multiline':True]['text':'*
   * Converts local sidereal time to Universal Time.
   *
   * @param lst   The Local Sidereal Time, in hours since sidereal midnight
   *              on this object's current date.
   *
   * @return      The corresponding Universal Time, in milliseconds since
   *              1 Jan 1970, GMT.
   ','line_number':417,'multiline':True]['text':'private:','line_number':426,'multiline':False]['text':'*
   *
   * Convert from ecliptic to equatorial coordinates.
   *
   * @param ecliptic     The ecliptic
   * @param result       Fillin result
   * @return reference to result
   ','line_number':429,'multiline':True]['text':'*
   * Convert from ecliptic to equatorial coordinates.
   *
   * @param eclipLong     The ecliptic longitude
   * @param eclipLat      The ecliptic latitude
   *
   * @return              The corresponding point in equatorial coordinates.
   * @internal
   ','line_number':439,'multiline':True]['text':'*
   * Convert from ecliptic longitude to equatorial coordinates.
   *
   * @param eclipLong     The ecliptic longitude
   *
   * @return              The corresponding point in equatorial coordinates.
   * @internal
   ','line_number':450,'multiline':True]['text':'*
   * @internal
   ','line_number':460,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':465,'multiline':False]['text':' The Sun','line_number':466,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':467,'multiline':False]['text':'*
   * The longitude of the sun at the time specified by this object.
   * The longitude is measured in radians along the ecliptic
   * from the "first point of Aries," the point at which the ecliptic
   * crosses the earth's equatorial plane at the vernal equinox.
   * <p>
   * Currently, this method uses an approximation of the two-body Kepler's
   * equation for the earth and the sun.  It does not take into account the
   * perturbations caused by the other planets, the moon, etc.
   * @internal
   ','line_number':469,'multiline':True]['text':'*
   * TODO Make this public when the entire class is package-private.
   ','line_number':482,'multiline':True]['text':'public','line_number':485,'multiline':True]['text':'*
   * The position of the sun at this object's current date and time,
   * in equatorial coordinates.
   * @param result fillin for the result
   * @internal
   ','line_number':487,'multiline':True]['text':'*
   * Constant representing the vernal equinox.
   * For use with {@link #getSunTime getSunTime}.
   * Note: In this case, "vernal" refers to the northern hemisphere's seasons.
   * @internal
   ','line_number':496,'multiline':True]['text':'  static double VERNAL_EQUINOX();','line_number':502,'multiline':False]['text':'*
   * Constant representing the summer solstice.
   * For use with {@link #getSunTime getSunTime}.
   * Note: In this case, "summer" refers to the northern hemisphere's seasons.
   * @internal
   ','line_number':504,'multiline':True]['text':'*
   * Constant representing the autumnal equinox.
   * For use with {@link #getSunTime getSunTime}.
   * Note: In this case, "autumn" refers to the northern hemisphere's seasons.
   * @internal
   ','line_number':512,'multiline':True]['text':'  static double AUTUMN_EQUINOX();','line_number':518,'multiline':False]['text':'*
   * Constant representing the winter solstice.
   * For use with {@link #getSunTime getSunTime}.
   * Note: In this case, "winter" refers to the northern hemisphere's seasons.
   * @internal
   ','line_number':520,'multiline':True]['text':'*
   * Find the next time at which the sun's ecliptic longitude will have
   * the desired value.
   * @internal
   ','line_number':528,'multiline':True]['text':'*
   * Returns the time (GMT) of sunrise or sunset on the local date to which
   * this calendar is currently set.
   *
   * NOTE: This method only works well if this object is set to a
   * time near local noon.  Because of variations between the local
   * official time zone and the geographic longitude, the
   * computation can flop over into an adjacent day if this object
   * is set to a time near local midnight.
   *
   * @internal
   ','line_number':535,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':549,'multiline':False]['text':' The Moon','line_number':550,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':551,'multiline':False]['text':'*
   * The position of the moon at the time set on this
   * object, in equatorial coordinates.
   * @internal
   * @return const reference to internal field of calendar astronomer. Do not use outside of the lifetime of this astronomer.
   ','line_number':553,'multiline':True]['text':'*
   * The "age" of the moon at the time specified in this object.
   * This is really the angle between the
   * current ecliptic longitudes of the sun and the moon,
   * measured in radians.
   *
   * @see #getMoonPhase
   * @internal
   ','line_number':561,'multiline':True]['text':'*
   * Calculate the phase of the moon at the time set in this object.
   * The returned phase is a <code>double</code> in the range
   * <code>0 <= phase < 1</code>, interpreted as follows:
   * <ul>
   * <li>0.00: New moon
   * <li>0.25: First quarter
   * <li>0.50: Full moon
   * <li>0.75: Last quarter
   * </ul>
   *
   * @see #getMoonAge
   * @internal
   ','line_number':572,'multiline':True]['text':'*
   * Constant representing a new moon.
   * For use with {@link #getMoonTime getMoonTime}
   * @internal
   ','line_number':596,'multiline':True]['text':'*
   * Constant representing the moon's first quarter.
   * For use with {@link #getMoonTime getMoonTime}
   * @internal
   ','line_number':603,'multiline':True]['text':'  static const MoonAge FIRST_QUARTER();','line_number':608,'multiline':False]['text':'*
   * Constant representing a full moon.
   * For use with {@link #getMoonTime getMoonTime}
   * @internal
   ','line_number':610,'multiline':True]['text':'*
   * Constant representing the moon's last quarter.
   * For use with {@link #getMoonTime getMoonTime}
   * @internal
   ','line_number':617,'multiline':True]['text':'  static const MoonAge LAST_QUARTER();','line_number':622,'multiline':False]['text':'*
   * Find the next or previous time at which the Moon's ecliptic
   * longitude will have the desired value.
   * <p>
   * @param desired   The desired longitude.
   * @param next      <tt>true</tt> if the next occurrance of the phase
   *                  is desired, <tt>false</tt> for the previous occurrance.
   * @internal
   ','line_number':624,'multiline':True]['text':'*
   * Returns the time (GMT) of sunrise or sunset on the local date to which
   * this calendar is currently set.
   * @internal
   ','line_number':636,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':643,'multiline':False]['text':' Interpolation methods for finding the time at which a given event occurs','line_number':644,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':645,'multiline':False]['text':' private','line_number':647,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':669,'multiline':False]['text':' Other utility methods','line_number':670,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':671,'multiline':False]['text':'*
   * Return the obliquity of the ecliptic (the angle between the ecliptic
   * and the earth's equator) at the current time.  This varies due to
   * the precession of the earth's axis.
   *
   * @return  the obliquity of the ecliptic relative to the equator,
   *          measured in radians.
   ','line_number':674,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':684,'multiline':False]['text':' Private data','line_number':685,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':686,'multiline':False]['text':'*
   * Current time in milliseconds since 1/1/1970 AD
   * @see java.util.Date#getTime
   ','line_number':688,'multiline':True]['text':' These aren't used yet, but they'll be needed for sunset calculations
   * and equatorial to horizon coordinate conversions
   ','line_number':694,'multiline':True]['text':'','line_number':701,'multiline':False]['text':' The following fields are used to cache calculated results for improved','line_number':702,'multiline':False]['text':' performance.  These values all depend on the current time setting','line_number':703,'multiline':False]['text':' of this object, so the clearCache method is provided.','line_number':704,'multiline':False]['text':'','line_number':705,'multiline':False]['text':'*
   * @internal
   ','line_number':723,'multiline':True]['text':'  UDate local(UDate localMillis);','line_number':726,'multiline':False]['text':'*
 * Cache of month -> julian day
 * @internal
 ','line_number':735,'multiline':True]['text':'*
   * not implemented
   ','line_number':747,'multiline':True]