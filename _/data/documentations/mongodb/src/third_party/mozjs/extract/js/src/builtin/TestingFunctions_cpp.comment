['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::ParseCompileOptions','line_number':47,'multiline':False]['text':' frontend::CanLazilyParse','line_number':51,'multiline':False]['text':' frontend::CompilationStencil','line_number':52,'multiline':False]['text':' JS::NewArrayObject','line_number':63,'multiline':False]['text':' JS::{DetachArrayBuffer,GetArrayBufferLengthAndData,NewArrayBufferWithContents}','line_number':64,'multiline':False]['text':' js::GetCodeCoverageSummary','line_number':70,'multiline':False]['text':' JS::Stencil','line_number':71,'multiline':False]['text':' JS::{Start,Stop}PCCountProfiling, JS::PurgePCCounts, JS::GetPCCountScript{Count,Summary,Contents}','line_number':72,'multiline':False]['text':' JS_GetObjectAsUint8Array','line_number':73,'multiline':False]['text':' js::Dump{Backtrace,Heap,Object}, JS::FormatStackDump, js::IgnoreNurseryObjects','line_number':74,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':75,'multiline':False]['text':' js::ToWindowProxyIfWindow','line_number':76,'multiline':False]['text':' js::UseOffThreadParseGlobal','line_number':79,'multiline':False]['text':' JS::RegExpFlag, JS::RegExpFlags','line_number':82,'multiline':False]['text':' JS::GetLinearStringLength, JS::StringToLinearString','line_number':85,'multiline':False]['text':' js::PlainObject','line_number':113,'multiline':False]['text':' js::PromiseObject, js::PromiseSlot_*','line_number':114,'multiline':False]['text':' StencilObject, StencilXDRBufferObject','line_number':119,'multiline':False]['text':' If fuzzingSafe is set, remove functionality that could cause problems with','line_number':157,'multiline':False]['text':' fuzzers. Set this via the environment variable MOZ_FUZZING_SAFE.','line_number':158,'multiline':False]['text':' If disableOOMFunctions is set, disable functionality that causes artificial','line_number':161,'multiline':False]['text':' OOM conditions.','line_number':162,'multiline':False]['text':'
   * If the first argument is 'zone', we collect any zones previously
   * scheduled for GC via schedulegc. If the first argument is an object, we
   * collect the object's zone (and any other zones scheduled for
   * GC). Otherwise, we collect all zones.
   ','line_number':563,'multiline':True]['text':' Request mode.','line_number':722,'multiline':False]['text':' Relazifying functions on GC is usually only done for compartments that are','line_number':774,'multiline':False]['text':' not active. To aid fuzzing, this testing function allows us to relazify','line_number':775,'multiline':False]['text':' even if the compartment is active.','line_number':776,'multiline':False]['text':' Disable relazification of all scripts on stack. It is a pervasive','line_number':780,'multiline':False]['text':' assumption in the engine that running scripts still have bytecode.','line_number':781,'multiline':False]['text':' This triplet of predicates will select zero or one baseline compiler and','line_number':921,'multiline':False]['text':' zero or one optimizing compiler.','line_number':922,'multiline':False]['text':' namespace wasm','line_number':1003,'multiline':False]['text':' namespace js','line_number':1004,'multiline':False]['text':' Unstable API for white-box testing of SIMD optimizations.','line_number':1006,'multiline':False]['text':'','line_number':1007,'multiline':False]['text':' Current API: takes no arguments, returns a string describing the last Simd','line_number':1008,'multiline':False]['text':' simplification applied.','line_number':1009,'multiline':False]['text':' Get the type of the value','line_number':1038,'multiline':False]['text':' Get the array buffer for the value','line_number':1044,'multiline':False]['text':' Only allow POD to be created from bytes','line_number':1053,'multiline':False]['text':' Check we have all the bytes we need','line_number':1067,'multiline':False]['text':' Copy the bytes from buffer into a tagged val','line_number':1073,'multiline':False]['text':' Create the global object','line_number':1077,'multiline':False]['text':' Get the global value','line_number':1151,'multiline':False]['text':' Check that we have a v128 value','line_number':1160,'multiline':False]['text':' Get the passed interpretation of lanes','line_number':1167,'multiline':False]['text':' Get the lane to extract','line_number':1173,'multiline':False]['text':' Check that the lane interp is valid','line_number':1179,'multiline':False]['text':' Don't know the interpretation of the v128, so we only can do an exact','line_number':1263,'multiline':False]['text':' bitwise equality. Testing code can use wasmGlobalExtractLane to','line_number':1264,'multiline':False]['text':' workaround this if needed.','line_number':1265,'multiline':False]['text':' Flavors of NaN values for WebAssembly.','line_number':1281,'multiline':False]['text':' See','line_number':1282,'multiline':False]['text':' https://webassembly.github.io/spec/core/syntax/values.html#floating-point.','line_number':1283,'multiline':False]['text':' A canonical NaN value.','line_number':1285,'multiline':False]['text':'  - the sign bit is unspecified,','line_number':1286,'multiline':False]['text':'  - the 8-bit exponent is set to all 1s','line_number':1287,'multiline':False]['text':'  - the MSB of the payload is set to 1 (a quieted NaN) and all others to 0.','line_number':1288,'multiline':False]['text':' An arithmetic NaN. This is the same as a canonical NaN including that the','line_number':1290,'multiline':False]['text':' payload MSB is set to 1, but one or more of the remaining payload bits MAY','line_number':1291,'multiline':False]['text':' BE set to 1 (a canonical NaN specifies all 0s).','line_number':1292,'multiline':False]['text':' Get the instance and funcIndex for calling the function','line_number':1481,'multiline':False]['text':' Set up a modified call frame following the standard JS','line_number':1485,'multiline':False]['text':' [callee, this, arguments...] convention.','line_number':1486,'multiline':False]['text':' Copy over the arguments needed to invoke the provided wasm function,','line_number':1494,'multiline':False]['text':' skipping the wasm function we're calling that is at `args.get(0)`.','line_number':1495,'multiline':False]['text':' Invoke the function with the new call frame','line_number':1503,'multiline':False]['text':' Assign the wasm rval to our rval','line_number':1506,'multiline':False]['text':' You can omit the argument but you can't pass just anything you like','line_number':1540,'multiline':False]['text':' NOTE: We use RefPtr below to keep the data alive across possible GC since','line_number':2030,'multiline':False]['text':'       the functions may be in different Zones.','line_number':2031,'multiline':False]['text':' Fetch next zeal trigger only. ','line_number':2161,'multiline':True]['text':' Schedule a GC to happen after |arg| allocations. ','line_number':2163,'multiline':True]['text':'
   * The selectedForMarking set is intended to be manually marked at slice
   * start to detect missing pre-barriers. It is invalid for nursery things
   * to be in the set, so evict the nursery before adding items.
   ','line_number':2182,'multiline':True]['text':' This is a no-op since the post barrier verifier was removed.','line_number':2216,'multiline':False]['text':' JS_GC_ZEAL ','line_number':2323,'multiline':True]['text':' Ensure that |zone| is collected during the next GC.','line_number':2362,'multiline':False]['text':' This allows us to schedule the atoms zone for GC.','line_number':2366,'multiline':False]['text':' Either one or the other of the seed arguments must be non-zero;','line_number':2596,'multiline':False]['text':' make this true no matter what value 'seed' has.','line_number':2597,'multiline':False]['text':' Accept all filenames that start with "safe". In system code also accept','line_number':2778,'multiline':False]['text':' filenames starting with "system".','line_number':2779,'multiline':False]['text':' false if not given (or otherwise undefined)','line_number':2833,'multiline':False]['text':' Ownership was transferred.','line_number':2865,'multiline':False]['text':' Normal behavior: auto-deflate to latin1 if possible.','line_number':2884,'multiline':False]['text':' Warning! This will let you create ropes that I'm not sure would be possible','line_number':2897,'multiline':False]['text':' otherwise, specifically:','line_number':2898,'multiline':False]['text':'','line_number':2899,'multiline':False]['text':'   - a rope with a zero-length child','line_number':2900,'multiline':False]['text':'   - a rope that would fit into an inline string','line_number':2901,'multiline':False]['text':'','line_number':2902,'multiline':False]['text':' Iterative failure testing: test a function by simulating failures at indexed','line_number':3084,'multiline':False]['text':' locations throughout the normal execution path and checking that the','line_number':3085,'multiline':False]['text':' resulting state of the environment is consistent with the error result.','line_number':3086,'multiline':False]['text':'','line_number':3087,'multiline':False]['text':' For example, trigger OOM at every allocation point and test that the function','line_number':3088,'multiline':False]['text':' either recovers and succeeds or raises an exception and fails.','line_number':3089,'multiline':False]['text':' Disallow nested tests.','line_number':3122,'multiline':False]['text':' Delazify the function here if necessary so we don't end up testing that.','line_number':3136,'multiline':False]['text':' Note that it is possible that the function throws an exception','line_number':3181,'multiline':False]['text':' unconnected to the simulated failure, in which case we ignore','line_number':3182,'multiline':False]['text':' it. More correct would be to have the caller pass some kind of','line_number':3183,'multiline':False]['text':' exception specification and to check the exception against it.','line_number':3184,'multiline':False]['text':' Some tests create a new compartment or zone on every','line_number':3196,'multiline':False]['text':' iteration. Our GC is triggered by GC allocations and not by','line_number':3197,'multiline':False]['text':' number of compartments or zones, so these won't normally get','line_number':3198,'multiline':False]['text':' cleaned up. The check here stops some tests running out of','line_number':3199,'multiline':False]['text':' memory. ("Gentlemen, you can't fight in here! This is the','line_number':3200,'multiline':False]['text':' War oom!")','line_number':3201,'multiline':False]['text':' Reset the TraceLogger state if enabled.','line_number':3208,'multiline':False]['text':' There are some places where we do fail without raising an exception, so','line_number':3287,'multiline':False]['text':' we can't expose this to the fuzzers by default.','line_number':3288,'multiline':False]['text':' Test all threads by default except worker threads.','line_number':3293,'multiline':False]['text':' Test a single thread type if specified by the OOM_THREAD environment','line_number':3297,'multiline':False]['text':' variable.','line_number':3298,'multiline':False]['text':' defined(DEBUG) || defined(JS_OOM_BREAKPOINT)','line_number':3429,'multiline':False]['text':' addProperty','line_number':3587,'multiline':False]['text':' delProperty','line_number':3588,'multiline':False]['text':' enumerate','line_number':3589,'multiline':False]['text':' newEnumerate','line_number':3590,'multiline':False]['text':' resolve','line_number':3591,'multiline':False]['text':' mayResolve','line_number':3592,'multiline':False]['text':' finalize','line_number':3593,'multiline':False]['text':' call','line_number':3594,'multiline':False]['text':' hasInstance','line_number':3595,'multiline':False]['text':' construct','line_number':3596,'multiline':False]['text':' trace','line_number':3597,'multiline':False]['text':' Print a message to stderr in differential testing to help jsfunfuzz','line_number':3673,'multiline':False]['text':' find uncatchable-exception bugs.','line_number':3674,'multiline':False]['text':' Return boolean 'false' if profiler is not enabled.','line_number':3687,'multiline':False]['text':' Array holding physical jit stack frames.','line_number':3693,'multiline':False]['text':' If profiler sampling has been suppressed, return an empty','line_number':3699,'multiline':False]['text':' stack.','line_number':3700,'multiline':False]['text':' Array holding all inline frames in a single physical jit stack frame.','line_number':3768,'multiline':False]['text':' Object holding frame info.','line_number':3776,'multiline':False]['text':' Push inline array into main array.','line_number':3811,'multiline':False]['text':' NOP when not in IonMonkey','line_number':3925,'multiline':False]['text':' Force JIT code to be recompiled with (or without) instrumentation.','line_number':3943,'multiline':False]['text':' If the topmost frame is Ion/Warp, find the IonScript and invalidate it.','line_number':3958,'multiline':False]['text':' Use frame iterator to inspect caller.','line_number':3985,'multiline':False]['text':' We may be invoked directly, not in a JS context, e.g. if inJit is added as','line_number':3988,'multiline':False]['text':' a callback on the event queue.','line_number':3989,'multiline':False]['text':' Detect repeated attempts to compile, resetting the counter if inJit','line_number':3996,'multiline':False]['text':' succeeds. Note: This script may have be inlined into its caller.','line_number':3997,'multiline':False]['text':' Returns true for any JIT (including WASM).','line_number':4006,'multiline':False]['text':' Use frame iterator to inspect caller.','line_number':4019,'multiline':False]['text':' We may be invoked directly, not in a JS context, e.g. if inJson is added as','line_number':4022,'multiline':False]['text':' a callback on the event queue.','line_number':4023,'multiline':False]['text':' Detect repeated attempts to compile, resetting the counter if inIon','line_number':4030,'multiline':False]['text':' succeeds. Note: This script may have be inlined into its caller.','line_number':4031,'multiline':False]['text':' NOP when not in IonMonkey','line_number':4053,'multiline':False]['text':' NOP when not in IonMonkey','line_number':4075,'multiline':False]['text':' A JSObject that holds structured clone data, similar to the C++ class','line_number':4112,'multiline':False]['text':' JSAutoStructuredCloneBuffer.','line_number':4113,'multiline':False]['text':' Discard an owned clone buffer.','line_number':4172,'multiline':False]['text':' addProperty','line_number':4338,'multiline':False]['text':' delProperty','line_number':4339,'multiline':False]['text':' enumerate','line_number':4340,'multiline':False]['text':' newEnumerate','line_number':4341,'multiline':False]['text':' resolve','line_number':4342,'multiline':False]['text':' mayResolve','line_number':4343,'multiline':False]['text':' finalize','line_number':4344,'multiline':False]['text':' call','line_number':4345,'multiline':False]['text':' hasInstance','line_number':4346,'multiline':False]['text':' construct','line_number':4347,'multiline':False]['text':' trace','line_number':4348,'multiline':False]['text':' default','line_number':4413,'multiline':False]['text':' default','line_number':4494,'multiline':False]['text':' Clone buffer was already consumed?','line_number':4527,'multiline':False]['text':' Consume any clone buffer with transferables; throw an error if it is','line_number':4547,'multiline':False]['text':' deserialized again.','line_number':4548,'multiline':False]['text':' Always return 0 to get consistent output with and without --no-threads.','line_number':4582,'multiline':False]['text':' JS_TRACE_LOGGING','line_number':4624,'multiline':False]['text':' ShapeSnapshot holds information about an object's properties. This is used','line_number':4626,'multiline':False]['text':' for checking object and shape changes between two points in time.','line_number':4627,'multiline':False]['text':' A JSObject that holds a ShapeSnapshot.','line_number':4673,'multiline':False]['text':' The snapshot may not be present yet if we GC during initialization.','line_number':4683,'multiline':False]['text':'static ','line_number':4707,'multiline':True]['text':' addProperty','line_number':4708,'multiline':False]['text':' delProperty','line_number':4709,'multiline':False]['text':' enumerate','line_number':4710,'multiline':False]['text':' newEnumerate','line_number':4711,'multiline':False]['text':' resolve','line_number':4712,'multiline':False]['text':' mayResolve','line_number':4713,'multiline':False]['text':' finalize','line_number':4714,'multiline':False]['text':' call','line_number':4715,'multiline':False]['text':' hasInstance','line_number':4716,'multiline':False]['text':' construct','line_number':4717,'multiline':False]['text':' trace','line_number':4718,'multiline':False]['text':'static ','line_number':4721,'multiline':True]['text':' Snapshot the slot values.','line_number':4736,'multiline':False]['text':' Snapshot property information.','line_number':4745,'multiline':False]['text':' Assertions based on a single snapshot.','line_number':4778,'multiline':False]['text':' Non-dictionary shapes must not be mutated.','line_number':4780,'multiline':False]['text':' Skip if the map no longer matches the snapshotted data. This can','line_number':4791,'multiline':False]['text':' only happen for non-configurable dictionary properties.','line_number':4792,'multiline':False]['text':' Ensure ObjectFlags depending on property information are set if needed.','line_number':4799,'multiline':False]['text':' Accessors must have a PrivateGCThingValue(GetterSetter*) slot value.','line_number':4805,'multiline':False]['text':' Data properties must not have a PrivateGCThingValue slot value.','line_number':4812,'multiline':False]['text':' Snapshots are for different objects. Assert dictionary shapes aren't','line_number':4825,'multiline':False]['text':' shared.','line_number':4826,'multiline':False]['text':' We have two snapshots for the same object. Check the shape information','line_number':4836,'multiline':False]['text':' wasn't changed in invalid ways.','line_number':4837,'multiline':False]['text':' If the Shape is still the same, the object must have the same BaseShape,','line_number':4839,'multiline':False]['text':' ObjectFlags and property information.','line_number':4840,'multiline':False]['text':' Non-configurable accessor properties and non-configurable, non-writable','line_number':4849,'multiline':False]['text':' data properties shouldn't have had their slot mutated.','line_number':4850,'multiline':False]['text':' Object flags should not be lost. The exception is the Indexed flag, it','line_number':4862,'multiline':False]['text':' can be cleared when densifying elements, so clear that flag first.','line_number':4863,'multiline':False]['text':' If the HadGetterSetterChange flag wasn't set, all GetterSetter slots must','line_number':4872,'multiline':False]['text':' be unchanged.','line_number':4873,'multiline':False]['text':' static','line_number':4885,'multiline':False]['text':' Get the object to use from the snapshot if the second argument is not an','line_number':4931,'multiline':False]['text':' object.','line_number':4932,'multiline':False]['text':'safeish','line_number':5062,'multiline':True]['text':' An edge to a node from its predecessor in a path through the graph.','line_number':5174,'multiline':False]['text':' The node from which this edge starts.','line_number':5176,'multiline':False]['text':' The name of this edge.','line_number':5179,'multiline':False]['text':' Construct an initialized back edge, taking ownership of |name|.','line_number':5184,'multiline':False]['text':' No copy constructor or copying assignment.','line_number':5200,'multiline':False]['text':' A path-finding handler class for use with JS::ubi::BreadthFirst.','line_number':5205,'multiline':False]['text':' We take care of each node the first time we visit it, so there's','line_number':5221,'multiline':False]['text':' nothing to be done on subsequent visits.','line_number':5222,'multiline':False]['text':' Record how we reached this node. This is the last edge on a','line_number':5227,'multiline':False]['text':' shortest path to this node.','line_number':5228,'multiline':False]['text':' Have we reached our final target node?','line_number':5236,'multiline':False]['text':' Record the path that got us here, which must be a shortest path.','line_number':5238,'multiline':False]['text':' We've found a path to our target. Walk the backlinks to produce the','line_number':5249,'multiline':False]['text':' (reversed) path, saving the path in |nodes| and |edges|. |nodes| is','line_number':5250,'multiline':False]['text':' rooted, so it can hold the path's nodes as we leave the scope of','line_number':5251,'multiline':False]['text':' the AutoCheckCannotGC. Note that nodes are added to |visited| after we','line_number':5252,'multiline':False]['text':' return from operator() so we have to pass the target BackEdge* to this','line_number':5253,'multiline':False]['text':' function.','line_number':5254,'multiline':False]['text':' The node we're starting from.','line_number':5278,'multiline':False]['text':' The node we're looking for.','line_number':5281,'multiline':False]['text':' True if we found a path to target, false if we didn't.','line_number':5284,'multiline':False]['text':' The nodes and edges of the path --- should we find one. The path is','line_number':5287,'multiline':False]['text':' stored in reverse order, because that's how it's easiest for us to','line_number':5288,'multiline':False]['text':' construct it:','line_number':5289,'multiline':False]['text':' - edges[i] is the name of the edge from nodes[i] to nodes[i-1].','line_number':5290,'multiline':False]['text':' - edges[0] is the name of the edge from nodes[0] to the target.','line_number':5291,'multiline':False]['text':' - The last node, nodes[n-1], is the start node.','line_number':5292,'multiline':False]['text':' namespace heaptools','line_number':5297,'multiline':False]['text':' We don't ToString non-objects given as 'start' or 'target', because this','line_number':5305,'multiline':False]['text':' test is all about object identity, and ToString doesn't preserve that.','line_number':5306,'multiline':False]['text':' Non-GCThing endpoints don't make much sense.','line_number':5307,'multiline':False]['text':' We can't tolerate the GC moving things around while we're searching','line_number':5324,'multiline':False]['text':' the heap. Check that nothing we do causes a GC.','line_number':5325,'multiline':False]['text':' We didn't find any paths from the start to the target.','line_number':5345,'multiline':False]['text':' |nodes| and |edges| contain the path from |start| to |target|, reversed.','line_number':5351,'multiline':False]['text':' Construct a JavaScript array describing the path from the start to the','line_number':5352,'multiline':False]['text':' target. Each element has the form:','line_number':5353,'multiline':False]['text':'','line_number':5354,'multiline':False]['text':'   {','line_number':5355,'multiline':False]['text':'     node: <object or string or symbol>,','line_number':5356,'multiline':False]['text':'     edge: <string describing outgoing edge from node>','line_number':5357,'multiline':False]['text':'   }','line_number':5358,'multiline':False]['text':'','line_number':5359,'multiline':False]['text':' or, if the node is some internal thing that isn't a proper JavaScript','line_number':5360,'multiline':False]['text':' value:','line_number':5361,'multiline':False]['text':'','line_number':5362,'multiline':False]['text':'   { node: undefined, edge: <string> }','line_number':5363,'multiline':False]['text':' Walk |nodes| and |edges| in the stored order, and construct the result','line_number':5371,'multiline':False]['text':' array in start-to-target order.','line_number':5372,'multiline':False]['text':' Build an object describing the node and edge.','line_number':5374,'multiline':False]['text':' Non-GCThing endpoints don't make much sense.','line_number':5459,'multiline':False]['text':' We accumulate the results into a GC-stable form, due to the fact that the','line_number':5486,'multiline':False]['text':' JS::ubi::ShortestPaths lifetime (when operating on the live heap graph)','line_number':5487,'multiline':False]['text':' is bounded within an AutoCheckCannotGC.','line_number':5488,'multiline':False]['text':' stopAtWindowProxy = ','line_number':5672,'multiline':True]['text':' If we're switching globals here, ExecuteInFrameScriptEnvironment will','line_number':5688,'multiline':False]['text':' take care of cloning the script into that compartment before','line_number':5689,'multiline':False]['text':' executing it.','line_number':5690,'multiline':False]['text':' stopAtWindowProxy = ','line_number':5759,'multiline':True]['text':' We can't tolerate the GC moving things around while we're using a','line_number':5790,'multiline':False]['text':' ubi::Node. Check that nothing we do causes a GC.','line_number':5791,'multiline':False]['text':' We can't tolerate the GC moving things around while we're using a','line_number':5828,'multiline':False]['text':' ubi::Node. Check that nothing we do causes a GC.','line_number':5829,'multiline':False]['text':' Linearize the string to obtain a char16_t* range. ','line_number':5917,'multiline':True]['text':' Prepare the input byte array. ','line_number':5967,'multiline':True]['text':' Prepare the CompilationStencil for decoding. ','line_number':5998,'multiline':True]['text':' Instantiate the stencil. ','line_number':6005,'multiline':True]['text':' Obtain the JSScript and evaluate it. ','line_number':6012,'multiline':True]['text':' Linearize the string to obtain a char16_t* range. ','line_number':6035,'multiline':True]['text':' Compile the script text to stencil. ','line_number':6062,'multiline':True]['text':' Serialize the stencil to XDR. ','line_number':6071,'multiline':True]['text':' Prepare the input byte array. ','line_number':6098,'multiline':True]['text':' Prepare the CompilationStencil for decoding. ','line_number':6123,'multiline':True]['text':' Deserialize the stencil from XDR. ','line_number':6131,'multiline':True]['text':' Instantiate the stencil. ','line_number':6142,'multiline':True]['text':' Obtain the JSScript and evaluate it. ','line_number':6149,'multiline':True]['text':' Process global, should really be runtime-local.','line_number':6236,'multiline':False]['text':' namespace gcCallback ','line_number':6245,'multiline':True]['text':' DEBUG','line_number':6402,'multiline':False]['text':' stopAtWindowProxy = ','line_number':6442,'multiline':True]['text':' HAVE_LOCALTIME_R ','line_number':6532,'multiline':True]['text':' HAVE_TM_ZONE_TM_GMTOFF ','line_number':6538,'multiline':True]['text':' _WIN32 ','line_number':6540,'multiline':True]['text':' __wasi__ ','line_number':6550,'multiline':True]['text':' _WIN32 ','line_number':6576,'multiline':True]['text':' _WIN32 ','line_number':6584,'multiline':True]['text':' _WIN32 ','line_number':6619,'multiline':True]['text':' __wasi__ ','line_number':6623,'multiline':True]['text':' The std::chrono symbols are too new to be present in STL on all platforms we','line_number':6734,'multiline':False]['text':' care about, so use raw POSIX clock APIs when it might be necessary.','line_number':6735,'multiline':False]['text':' Use a monotonic clock if available.','line_number':6743,'multiline':False]['text':' Use a realtime clock as fallback.','line_number':6746,'multiline':False]['text':' Fail if no clock is available.','line_number':6748,'multiline':False]['text':' Manually enforce atomicity on a non-monotonic clock.','line_number':6755,'multiline':False]['text':' XP_UNIX && !XP_DARWIN','line_number':6774,'multiline':False]['text':' Create the amounts array early so that the raw pointer into Uint8Array','line_number':6981,'multiline':False]['text':' data has as short a lifetime as possible','line_number':6982,'multiline':False]['text':' excluded views of SharedArrayBuffers','line_number':6995,'multiline':False]['text':' exclude views of detached ArrayBuffers','line_number':6996,'multiline':False]['text':' = nullptr ','line_number':7019,'multiline':True]['text':' To convert a string to a script, compile it. Parse it as an ES6 Program.','line_number':7021,'multiline':False]['text':' Unwrap bound functions.','line_number':7048,'multiline':False]['text':' In order to check for differential behaviour, baselineCompile should have','line_number':7112,'multiline':False]['text':' the same output whether --no-baseline is used or not.','line_number':7113,'multiline':False]['text':' There isn't an easy way to do this for a script that might be on','line_number':7122,'multiline':False]['text':' stack right now. See','line_number':7123,'multiline':False]['text':' js::jit::RecompileOnStackBaselineScriptsForDebugMode.','line_number':7124,'multiline':False]['text':' clang-format off','line_number':7412,'multiline':False]['text':' defined(DEBUG) || defined(JS_OOM_BREAKPOINT)','line_number':7613,'multiline':False]['text':' DEBUG','line_number':8228,'multiline':False]['text':' clang-format on','line_number':8384,'multiline':False]['text':' clang-format off','line_number':8386,'multiline':False]['text':' clang-format on','line_number':8406,'multiline':False]['text':' clang-format off','line_number':8408,'multiline':False]['text':' clang-format on','line_number':8438,'multiline':False]