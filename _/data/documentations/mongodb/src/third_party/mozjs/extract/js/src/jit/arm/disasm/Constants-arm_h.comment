['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 ','line_number':1,'multiline':True]['text':' Copyright 2011 the V8 project authors. All rights reserved.','line_number':4,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':5,'multiline':False]['text':' found in the LICENSE file.','line_number':6,'multiline':False]['text':' Constant pool marker.','line_number':22,'multiline':False]['text':' Use UDF, the permanently undefined instruction.','line_number':23,'multiline':False]['text':' Used in code age prologue - ldr(pc, MemOperand(pc, -4))','line_number':38,'multiline':False]['text':' Number of registers in normal ARM mode.','line_number':41,'multiline':False]['text':' VFP support.','line_number':44,'multiline':False]['text':' PC is register 15.','line_number':49,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':53,'multiline':False]['text':' Conditions.','line_number':54,'multiline':False]['text':' Defines constants and accessor classes to assemble, disassemble and','line_number':56,'multiline':False]['text':' simulate ARM instructions.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' Section references in the code refer to the "ARM Architecture Reference','line_number':59,'multiline':False]['text':' Manual" from July 2005 (available at http://www.arm.com/miscPDFs/14128.pdf)','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' Constants for specific fields are defined in their respective named enums.','line_number':62,'multiline':False]['text':' General constants are in an anonymous enum in class Instr.','line_number':63,'multiline':False]['text':' Values for the condition field as defined in section A3.2','line_number':65,'multiline':False]['text':' Z set            Equal.','line_number':69,'multiline':False]['text':' Z clear          Not equal.','line_number':70,'multiline':False]['text':' C set            Unsigned higher or same.','line_number':71,'multiline':False]['text':' C clear          Unsigned lower.','line_number':72,'multiline':False]['text':' N set            Negative.','line_number':73,'multiline':False]['text':' N clear          Positive or zero.','line_number':74,'multiline':False]['text':' V set            Overflow.','line_number':75,'multiline':False]['text':' V clear          No overflow.','line_number':76,'multiline':False]['text':' C set, Z clear   Unsigned higher.','line_number':77,'multiline':False]['text':' C clear or Z set Unsigned lower or same.','line_number':78,'multiline':False]['text':' N == V           Greater or equal.','line_number':79,'multiline':False]['text':' N != V           Less than.','line_number':80,'multiline':False]['text':' Z clear, N == V  Greater than.','line_number':81,'multiline':False]['text':' Z set or N != V  Less then or equal','line_number':82,'multiline':False]['text':'                  Always.','line_number':83,'multiline':False]['text':' Special condition (refer to section A3.2.1).','line_number':85,'multiline':False]['text':' Aliases.','line_number':88,'multiline':False]['text':' C set            Unsigned higher or same.','line_number':89,'multiline':False]['text':' C clear          Unsigned lower.','line_number':90,'multiline':False]['text':' Commute a condition such that {a cond b == b cond' a}.','line_number':98,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':122,'multiline':False]['text':' Instructions encoding.','line_number':123,'multiline':False]['text':' Instr is merely used by the Assembler to distinguish 32bit integers','line_number':125,'multiline':False]['text':' representing instructions from usual 32 bit values.','line_number':126,'multiline':False]['text':' Instruction objects are pointers to 32bit values, and provide methods to','line_number':127,'multiline':False]['text':' access the various ISA fields.','line_number':128,'multiline':False]['text':' Opcodes for Data-processing instructions (instructions with a type 0 and 1)','line_number':131,'multiline':False]['text':' as defined in section A3.4','line_number':132,'multiline':False]['text':' Logical AND.','line_number':134,'multiline':False]['text':' Logical Exclusive OR.','line_number':135,'multiline':False]['text':' Subtract.','line_number':136,'multiline':False]['text':' Reverse Subtract.','line_number':137,'multiline':False]['text':' Add.','line_number':138,'multiline':False]['text':' Add with Carry.','line_number':139,'multiline':False]['text':' Subtract with Carry.','line_number':140,'multiline':False]['text':' Reverse Subtract with Carry.','line_number':141,'multiline':False]['text':' Test.','line_number':142,'multiline':False]['text':' Test Equivalence.','line_number':143,'multiline':False]['text':' Compare.','line_number':144,'multiline':False]['text':' Compare Negated.','line_number':145,'multiline':False]['text':' Logical (inclusive) OR.','line_number':146,'multiline':False]['text':' Move.','line_number':147,'multiline':False]['text':' Bit Clear.','line_number':148,'multiline':False]['text':' Move Not.','line_number':149,'multiline':False]['text':' The bits for bit 7-4 for some type 0 miscellaneous instructions.','line_number':152,'multiline':False]['text':' With bits 22-21 01.','line_number':154,'multiline':False]['text':' With bits 22-21 11.','line_number':160,'multiline':False]['text':' Load and store exclusive instructions.','line_number':164,'multiline':False]['text':' Bit positions.','line_number':166,'multiline':False]['text':' Hi bit of opcode field','line_number':168,'multiline':False]['text':' Lo bit of opcode field','line_number':169,'multiline':False]['text':' Hi bit of operand size field','line_number':170,'multiline':False]['text':' Lo bit of operand size field','line_number':171,'multiline':False]['text':' Bit indicating load','line_number':172,'multiline':False]['text':' Opcode bits for exclusive instructions.','line_number':175,'multiline':False]['text':' Operand size, Bits(ExclusiveSizeHi,ExclusiveSizeLo).','line_number':178,'multiline':False]['text':' Instruction encoding bits and masks.','line_number':186,'multiline':False]['text':' Halfword (or byte).','line_number':188,'multiline':False]['text':' Signed (or unsigned).','line_number':189,'multiline':False]['text':' Load (or store).','line_number':190,'multiline':False]['text':' Set condition code (or leave unchanged).','line_number':191,'multiline':False]['text':' Writeback base register (or leave unchanged).','line_number':192,'multiline':False]['text':' Accumulate in multiply instruction (or not).','line_number':193,'multiline':False]['text':' Unsigned byte (or word).','line_number':194,'multiline':False]['text':' Long (or short).','line_number':195,'multiline':False]['text':' Positive (or negative) offset/index.','line_number':196,'multiline':False]['text':' Offset/pre-indexed addressing (or post-indexed addressing).','line_number':197,'multiline':False]['text':' Immediate shifter operand (or not).','line_number':198,'multiline':False]['text':' Instruction bit masks.','line_number':221,'multiline':False]['text':' In str instruction.','line_number':224,'multiline':False]['text':' In data-processing instructions.','line_number':226,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':234,'multiline':False]['text':' Addressing modes and instruction variants.','line_number':235,'multiline':False]['text':' Condition code updating mode.','line_number':237,'multiline':False]['text':' Set condition code.','line_number':239,'multiline':False]['text':' Leave condition code unchanged.','line_number':240,'multiline':False]['text':' Status register selection.','line_number':243,'multiline':False]['text':' Shifter types for Data-processing operands as defined in section A5.1.2.','line_number':246,'multiline':False]['text':' Logical shift left.','line_number':248,'multiline':False]['text':' Logical shift right.','line_number':249,'multiline':False]['text':' Arithmetic shift right.','line_number':250,'multiline':False]['text':' Rotate right.','line_number':251,'multiline':False]['text':' RRX is encoded as ROR with shift_imm == 0.','line_number':253,'multiline':False]['text':' Use a special code to make the distinction. The RRX ShiftOp is only used','line_number':254,'multiline':False]['text':' as an argument, and will never actually be encoded. The Assembler will','line_number':255,'multiline':False]['text':' detect it and emit the correct ROR shift operand with shift_imm == 0.','line_number':256,'multiline':False]['text':' Status register fields.','line_number':261,'multiline':False]['text':' Status register field mask (or'ed SRegisterField enum values).','line_number':273,'multiline':False]['text':' Memory operand addressing mode.','line_number':276,'multiline':False]['text':' Bit encoding P U W.','line_number':278,'multiline':False]['text':' Offset (without writeback to base).','line_number':279,'multiline':False]['text':' Pre-indexed addressing with writeback.','line_number':280,'multiline':False]['text':' Post-indexed addressing with writeback.','line_number':281,'multiline':False]['text':' Negative offset (without writeback to base).','line_number':283,'multiline':False]['text':' Negative pre-indexed with writeback.','line_number':284,'multiline':False]['text':' Negative post-indexed with writeback.','line_number':285,'multiline':False]['text':' Load/store multiple addressing mode.','line_number':288,'multiline':False]['text':' Bit encoding P U W .','line_number':290,'multiline':False]['text':' Decrement after.','line_number':291,'multiline':False]['text':' Increment after.','line_number':292,'multiline':False]['text':' Decrement before.','line_number':293,'multiline':False]['text':' Increment before.','line_number':294,'multiline':False]['text':' Decrement after with writeback to base.','line_number':295,'multiline':False]['text':' Increment after with writeback to base.','line_number':296,'multiline':False]['text':' Decrement before with writeback to base.','line_number':297,'multiline':False]['text':' Increment before with writeback to base.','line_number':298,'multiline':False]['text':' Alias modes for comparison when writeback does not matter.','line_number':300,'multiline':False]['text':' Decrement after.','line_number':301,'multiline':False]['text':' Increment after.','line_number':302,'multiline':False]['text':' Decrement before.','line_number':303,'multiline':False]['text':' Increment before.','line_number':304,'multiline':False]['text':' Coprocessor load/store operand size.','line_number':309,'multiline':False]['text':' Long load/store coprocessor.','line_number':311,'multiline':False]['text':' Short load/store coprocessor.','line_number':312,'multiline':False]['text':' NEON data type','line_number':315,'multiline':False]['text':' U = 0, imm3 = 0b001','line_number':317,'multiline':False]['text':' U = 0, imm3 = 0b010','line_number':318,'multiline':False]['text':' U = 0, imm3 = 0b100','line_number':319,'multiline':False]['text':' U = 1, imm3 = 0b001','line_number':320,'multiline':False]['text':' U = 1, imm3 = 0b010','line_number':321,'multiline':False]['text':' U = 1, imm3 = 0b100','line_number':322,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':331,'multiline':False]['text':' Supervisor Call (svc) specific support.','line_number':332,'multiline':False]['text':' Special Software Interrupt codes when used in the presence of the ARM','line_number':334,'multiline':False]['text':' simulator.','line_number':335,'multiline':False]['text':' svc (formerly swi) provides a 24bit immediate value. Use bits 22:0 for','line_number':336,'multiline':False]['text':' standard SoftwareInterrupCode. Bit 23 is reserved for the stop feature.','line_number':337,'multiline':False]['text':' transition to C code','line_number':339,'multiline':False]['text':' break point','line_number':341,'multiline':False]['text':' stop','line_number':343,'multiline':False]['text':' Type of VFP register. Determines register encoding.','line_number':350,'multiline':False]['text':' VFP FPSCR constants.','line_number':353,'multiline':False]['text':' This mask does not include the "inexact" or "input denormal" cumulative','line_number':356,'multiline':False]['text':' exceptions flags, because we usually don't want to check for it.','line_number':357,'multiline':False]['text':' VFP rounding modes. See ARM DDI 0406B Page A2-29.','line_number':371,'multiline':False]['text':' Round to Nearest.','line_number':373,'multiline':False]['text':' Round towards Plus Infinity.','line_number':374,'multiline':False]['text':' Round towards Minus Infinity.','line_number':375,'multiline':False]['text':' Round towards zero.','line_number':376,'multiline':False]['text':' Aliases.','line_number':378,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':392,'multiline':False]['text':' Hints.','line_number':393,'multiline':False]['text':' Branch hints are not used on the ARM.  They are defined so that they can','line_number':395,'multiline':False]['text':' appear in shared function signatures, but will be ignored in ARM','line_number':396,'multiline':False]['text':' implementations.','line_number':397,'multiline':False]['text':' Hints are not used on the arm.  Negating is trivial.','line_number':400,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':403,'multiline':False]['text':' Instruction abstraction.','line_number':404,'multiline':False]['text':' The class Instruction enables access to individual fields defined in the ARM','line_number':406,'multiline':False]['text':' architecture instruction set encoding as described in figure A3-1.','line_number':407,'multiline':False]['text':' Note that the Assembler uses typedef int32_t Instr.','line_number':408,'multiline':False]['text':'','line_number':409,'multiline':False]['text':' Example: Test whether the instruction at ptr does set the condition code','line_number':410,'multiline':False]['text':' bits.','line_number':411,'multiline':False]['text':'','line_number':412,'multiline':False]['text':' bool InstructionSetsConditionCodes(byte* ptr) {','line_number':413,'multiline':False]['text':'   Instruction* instr = Instruction::At(ptr);','line_number':414,'multiline':False]['text':'   int type = instr->TypeValue();','line_number':415,'multiline':False]['text':'   return ((type == 0) || (type == 1)) && instr->HasS();','line_number':416,'multiline':False]['text':' }','line_number':417,'multiline':False]['text':'','line_number':418,'multiline':False]['text':' Helper macro to define static accessors.','line_number':423,'multiline':False]['text':' We use the cast to char* trick to bypass the strict anti-aliasing rules.','line_number':424,'multiline':False]['text':' Get the raw instruction bits.','line_number':433,'multiline':False]['text':' Set the raw instruction bits to value.','line_number':438,'multiline':False]['text':' Read one particular bit out of the instruction bits.','line_number':443,'multiline':False]['text':' Read a bit field's value out of the instruction bits.','line_number':446,'multiline':False]['text':' Read a bit field out of the instruction bits.','line_number':451,'multiline':False]['text':' Static support.','line_number':456,'multiline':False]['text':' Read one particular bit out of the instruction bits.','line_number':458,'multiline':False]['text':' Read the value of a bit field out of the instruction bits.','line_number':461,'multiline':False]['text':' Read a bit field out of the instruction bits.','line_number':466,'multiline':False]['text':' Accessors for the different named fields used in the ARM encoding.','line_number':471,'multiline':False]['text':' The naming of these accessor corresponds to figure A3-1.','line_number':472,'multiline':False]['text':'','line_number':473,'multiline':False]['text':' Two kind of accessors are declared:','line_number':474,'multiline':False]['text':' - <Name>Field() will return the raw field, i.e. the field's bits at their','line_number':475,'multiline':False]['text':'   original place in the instruction encoding.','line_number':476,'multiline':False]['text':'   e.g. if instr is the 'addgt r0, r1, r2' instruction, encoded as','line_number':477,'multiline':False]['text':'   0xC0810002 ConditionField(instr) will return 0xC0000000.','line_number':478,'multiline':False]['text':' - <Name>Value() will return the field value, shifted back to bit 0.','line_number':479,'multiline':False]['text':'   e.g. if instr is the 'addgt r0, r1, r2' instruction, encoded as','line_number':480,'multiline':False]['text':'   0xC0810002 ConditionField(instr) will return 0xC.','line_number':481,'multiline':False]['text':' Generally applicable fields','line_number':483,'multiline':False]['text':' Support for VFP.','line_number':502,'multiline':False]['text':' Vn(19-16) | Vd(15-12) |  Vm(3-0)','line_number':503,'multiline':False]['text':' Fields used in Data processing instructions','line_number':531,'multiline':False]['text':' with register','line_number':537,'multiline':False]['text':' with immediate','line_number':547,'multiline':False]['text':' Fields used in Load/Store instructions','line_number':558,'multiline':False]['text':' with register uses same fields as Data processing instructions above','line_number':564,'multiline':False]['text':' with immediate','line_number':565,'multiline':False]['text':' multiple','line_number':567,'multiline':False]['text':' extra loads and stores','line_number':569,'multiline':False]['text':' Fields used in Branch instructions','line_number':575,'multiline':False]['text':' Fields used in Software interrupt instructions','line_number':579,'multiline':False]['text':' Test for special encodings of type 0 instructions (extra loads and stores,','line_number':584,'multiline':False]['text':' as well as multiplications).','line_number':585,'multiline':False]['text':' Test for miscellaneous instructions encodings of type 0 instructions.','line_number':588,'multiline':False]['text':' Test for a nop instruction, which falls under type 1.','line_number':594,'multiline':False]['text':' Test for a nop instruction, which falls under type 1.','line_number':597,'multiline':False]['text':' Test for a stop instruction.','line_number':600,'multiline':False]['text':' Special accessors that test for existence of a value.','line_number':605,'multiline':False]['text':' Decoding the double immediate in the vmov instruction.','line_number':615,'multiline':False]['text':' Instructions are read of out a code stream. The only way to get a','line_number':618,'multiline':False]['text':' reference to an instruction is to convert a pointer. There is no way','line_number':619,'multiline':False]['text':' to allocate or create instances of class Instruction.','line_number':620,'multiline':False]['text':' Use the At(pc) function to create references to Instruction.','line_number':621,'multiline':False]['text':' Join split register codes, depending on single or double precision.','line_number':627,'multiline':False]['text':' four_bit is the position of the least-significant bit of the four','line_number':628,'multiline':False]['text':' bit specifier. one_bit is the position of the additional single bit','line_number':629,'multiline':False]['text':' specifier.','line_number':630,'multiline':False]['text':' We need to prevent the creation of instances of class Instruction.','line_number':638,'multiline':False]['text':' Helper functions for converting between register numbers and names.','line_number':644,'multiline':False]['text':' Return the name of the register.','line_number':647,'multiline':False]['text':' Lookup the register number for the name provided.','line_number':650,'multiline':False]['text':' Helper functions for converting between VFP register numbers and names.','line_number':663,'multiline':False]['text':' Return the name of the register.','line_number':666,'multiline':False]['text':' Lookup the register number for the name provided.','line_number':669,'multiline':False]['text':' Set flag pointed by is_double to true if register','line_number':670,'multiline':False]['text':' is double-precision.','line_number':671,'multiline':False]['text':' namespace disasm','line_number':678,'multiline':False]['text':' namespace jit','line_number':679,'multiline':False]['text':' namespace js','line_number':680,'multiline':False]['text':' JS_DISASM_ARM','line_number':682,'multiline':False]['text':' jit_arm_disasm_Constants_arm_h','line_number':684,'multiline':False]