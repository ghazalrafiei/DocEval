['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' The public JS engine namespace. ','line_number':26,'multiline':True]['text':' The mozilla-shared reusable template/utility namespace. ','line_number':29,'multiline':True]['text':' The private JS engine namespace. ','line_number':32,'multiline':True]['text':'
 * Custom allocator support for SpiderMonkey
 ','line_number':39,'multiline':True]['text':'
 * Thread types are used to tag threads for certain kinds of testing (see
 * below), and also used to characterize threads in the thread scheduler (see
 * js/src/vm/HelperThreads.cpp).
 *
 * Please update oom::FirstThreadTypeToTest and oom::LastThreadTypeToTest when
 * adding new thread types.
 ','line_number':48,'multiline':True]['text':' 0','line_number':57,'multiline':False]['text':' 1','line_number':58,'multiline':False]['text':' 2','line_number':59,'multiline':False]['text':' 3','line_number':60,'multiline':False]['text':' 4','line_number':61,'multiline':False]['text':' 5','line_number':62,'multiline':False]['text':' 6','line_number':63,'multiline':False]['text':' 7','line_number':64,'multiline':False]['text':' 8','line_number':65,'multiline':False]['text':' 9','line_number':66,'multiline':False]['text':' 10','line_number':67,'multiline':False]['text':' 11','line_number':68,'multiline':False]['text':' Used to check shell function arguments','line_number':69,'multiline':False]['text':'
 * Theads are tagged only in certain debug contexts.  Notably, to make testing
 * OOM in certain helper threads more effective, we allow restricting the OOM
 * testing to a certain helper thread type. This allows us to fail e.g. in
 * off-thread script parsing without causing an OOM in the active thread first.
 *
 * Getter/Setter functions to encapsulate mozilla::ThreadLocal, implementation
 * is in util/Utility.cpp.
 ','line_number':74,'multiline':True]['text':' Define the range of threads tested by simulated OOM testing and the','line_number':85,'multiline':False]['text':' like. Testing worker threads is not supported.','line_number':86,'multiline':False]['text':' namespace oom ','line_number':105,'multiline':True]['text':' namespace js ','line_number':106,'multiline':True]['text':'
 * Out of memory testing support.  We provide various testing functions to
 * simulate OOM conditions and so we can test that they are handled correctly.
 ','line_number':129,'multiline':True]['text':'
 * Out of stack space testing support, similar to OOM testing functions.
 ','line_number':199,'multiline':True]['text':'
 * Interrupt testing support, similar to OOM testing functions.
 ','line_number':215,'multiline':True]['text':' namespace oom ','line_number':231,'multiline':True]['text':' namespace js ','line_number':232,'multiline':True]['text':' namespace oom ','line_number':275,'multiline':True]['text':' namespace js ','line_number':276,'multiline':True]['text':' DEBUG || JS_OOM_BREAKPOINT ','line_number':278,'multiline':True]['text':' namespace oom ','line_number':285,'multiline':True]['text':' namespace js ','line_number':286,'multiline':True]['text':' Disable OOM testing in sections which are not OOM safe. ','line_number':306,'multiline':True]['text':' Used to catch concurrent use from other threads.','line_number':336,'multiline':False]['text':' namespace js ','line_number':343,'multiline':True]['text':' Malloc allocation.','line_number':345,'multiline':False]['text':' This is a no-op if built without MOZ_MEMORY and MOZ_DEBUG.','line_number':356,'multiline':False]['text':' namespace js ','line_number':359,'multiline':True]['text':' realloc() with zero size is not portable, as some implementations may','line_number':393,'multiline':False]['text':' return nullptr on success and free |p| for this.  We assume nullptr','line_number':394,'multiline':False]['text':' indicates failure and that |p| is still valid.','line_number':395,'multiline':False]['text':' TODO: This should call |moz_arena_free(js::MallocArena, p)| but we','line_number':408,'multiline':False]['text':' currently can't enforce that all memory freed here was allocated by','line_number':409,'multiline':False]['text':' js_malloc().','line_number':410,'multiline':False]['text':' JS_USE_CUSTOM_ALLOCATOR ','line_number':413,'multiline':True]['text':'
 * [SMDOC] Low-level memory management in SpiderMonkey
 *
 *  ** Do not use the standard malloc/free/realloc: SpiderMonkey allows these
 *     to be redefined (via JS_USE_CUSTOM_ALLOCATOR) and Gecko even #define's
 *     these symbols.
 *
 *  ** Do not use the builtin C++ operator new and delete: these throw on
 *     error and we cannot override them not to.
 *
 * Allocation:
 *
 * - If the lifetime of the allocation is tied to the lifetime of a GC-thing
 *   (that is, finalizing the GC-thing will free the allocation), call one of
 *   the following functions:
 *
 *     JSContext::{pod_malloc,pod_calloc,pod_realloc}
 *     Zone::{pod_malloc,pod_calloc,pod_realloc}
 *
 *   These functions accumulate the number of bytes allocated which is used as
 *   part of the GC-triggering heuristics.
 *
 *   The difference between the JSContext and Zone versions is that the
 *   cx version report an out-of-memory error on OOM. (This follows from the
 *   general SpiderMonkey idiom that a JSContext-taking function reports its
 *   own errors.)
 *
 *   If you don't want to report an error on failure, there are maybe_ versions
 *   of these methods available too, e.g. maybe_pod_malloc.
 *
 *   The methods above use templates to allow allocating memory suitable for an
 *   array of a given type and number of elements. There are _with_extra
 *   versions to allow allocating an area of memory which is larger by a
 *   specified number of bytes, e.g. pod_malloc_with_extra.
 *
 *   These methods are available on a JSRuntime, but calling them is
 *   discouraged. Memory attributed to a runtime can only be reclaimed by full
 *   GCs, and we try to avoid those where possible.
 *
 * - Otherwise, use js_malloc/js_realloc/js_calloc/js_new
 *
 * Deallocation:
 *
 * - Ordinarily, use js_free/js_delete.
 *
 * - For deallocations during GC finalization, use one of the following
 *   operations on the JSFreeOp provided to the finalizer:
 *
 *     JSFreeOp::{free_,delete_}
 ','line_number':417,'multiline':True]['text':'
 * Given a class which should provide a 'new' method, add
 * JS_DECLARE_NEW_METHODS (see js::MallocProvider for an example).
 *
 * Note: Do not add a ; at the end of a use of JS_DECLARE_NEW_METHODS,
 * or the build will break.
 ','line_number':468,'multiline':True]['text':'
 * Given a class which should provide a 'new' method that takes an arena as
 * its first argument, add JS_DECLARE_NEW_ARENA_METHODS
 * (see js::MallocProvider for an example).
 *
 * Note: Do not add a ; at the end of a use of JS_DECLARE_NEW_ARENA_METHODS,
 * or the build will break.
 ','line_number':483,'multiline':True]['text':'
 * Given a class which should provide 'make' methods, add
 * JS_DECLARE_MAKE_METHODS (see js::MallocProvider for an example).  This
 * method is functionally the same as JS_DECLARE_NEW_METHODS: it just declares
 * methods that return mozilla::UniquePtr instances that will singly-manage
 * ownership of the created object.
 *
 * Note: Do not add a ; at the end of a use of JS_DECLARE_MAKE_METHODS,
 * or the build will break.
 ','line_number':499,'multiline':True]['text':'
 * Calculate the number of bytes needed to allocate |numElems| contiguous
 * instances of type |T|.  Return false if the calculation overflowed.
 ','line_number':523,'multiline':True]['text':'
 * Calculate the number of bytes needed to allocate a single instance of type
 * |T| followed by |numExtra| contiguous instances of type |Extra|.  Return
 * false if the calculation overflowed.
 ','line_number':534,'multiline':True]['text':' namespace js ','line_number':547,'multiline':True]['text':' namespace JS','line_number':636,'multiline':False]['text':' sixgill annotation defines ','line_number':638,'multiline':True]['text':' XGILL_PLUGIN ','line_number':656,'multiline':True]['text':' nothing ','line_number':657,'multiline':True]['text':' nothing ','line_number':658,'multiline':True]['text':' nothing ','line_number':659,'multiline':True]['text':' nothing ','line_number':660,'multiline':True]['text':' nothing ','line_number':661,'multiline':True]['text':' nothing ','line_number':662,'multiline':True]['text':' nothing ','line_number':664,'multiline':True]['text':' XGILL_PLUGIN ','line_number':666,'multiline':True]['text':' HAVE_STATIC_ANNOTATIONS ','line_number':668,'multiline':True]['text':' js_Utility_h ','line_number':670,'multiline':True]