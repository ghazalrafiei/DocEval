['text':' -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2018 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' This is an ADT-style C API to the WebAssembly per-function compilation state,','line_number':19,'multiline':False]['text':' allowing Rust to access constant metadata and produce output.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' This file is input to Rust's bindgen, so as to create primitive APIs for the','line_number':22,'multiline':False]['text':' Cranelift pipeline to access compilation metadata. The actual Rust API then','line_number':23,'multiline':False]['text':' wraps these primitive APIs.  See src/bindings/mod.rs.','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' This file can be included in SpiderMonkey's C++ code, where all the prefixes','line_number':26,'multiline':False]['text':' must be obeyed.  The purpose of the prefixes is to avoid type confusion.  See','line_number':27,'multiline':False]['text':' js/src/wasm/WasmCraneliftCompile.cpp.','line_number':28,'multiline':False]['text':' DO NOT INCLUDE SPIDERMONKEY HEADER FILES INTO THIS FILE.','line_number':33,'multiline':False]['text':' wasm/*.{cpp,h}, class and struct types that are opaque to us here','line_number':40,'multiline':False]['text':' wasm/WasmGenerator.h','line_number':43,'multiline':False]['text':' wasm/WasmTypes.h','line_number':45,'multiline':False]['text':' wasm/WasmValidate.h','line_number':50,'multiline':False]['text':' namespace wasm','line_number':52,'multiline':False]['text':' namespace js','line_number':53,'multiline':False]['text':' This struct contains all the information that can be computed once for the','line_number':55,'multiline':False]['text':' entire process and then should never change. It contains a mix of CPU','line_number':56,'multiline':False]['text':' feature detection flags, and static information the C++ compile has access','line_number':57,'multiline':False]['text':' to, but which can't be automatically provided to Rust.','line_number':58,'multiline':False]['text':' Not bindgen'd because it's inlined.','line_number':85,'multiline':False]['text':' This structure proxies the C++ ModuleEnvironment and the information it','line_number':89,'multiline':False]['text':' contains.','line_number':90,'multiline':False]['text':' This is a pointer and not a reference to work-around a bug in bindgen.','line_number':93,'multiline':False]['text':' Not bindgen'd because it's inlined.','line_number':97,'multiline':False]['text':' Data for a single wasm function to be compiled by Cranelift.','line_number':104,'multiline':False]['text':' This information is all from the corresponding `js::wasm::FuncCompileInput`','line_number':105,'multiline':False]['text':' struct, but formatted in a Rust-friendly way.','line_number':106,'multiline':False]['text':' The stackmaps sink to use when compiling this function.','line_number':114,'multiline':False]['text':' Not bindgen'd because it's inlined.','line_number':117,'multiline':False]['text':' A single entry in all the metadata array provided after the compilation of a','line_number':121,'multiline':False]['text':' single wasm function. The meaning of the field extra depends on the enum','line_number':122,'multiline':False]['text':' value.','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':' XXX should we use a union for this instead? bindgen seems to be able to','line_number':125,'multiline':False]['text':' handle them, with a lot of unsafe'ing.','line_number':126,'multiline':False]['text':' The result of a single function compilation, containing the machine code','line_number':135,'multiline':False]['text':' generated by Cranelift, as well as some useful metadata to generate the','line_number':136,'multiline':False]['text':' prologue/epilogue etc.','line_number':137,'multiline':False]['text':' The compiled code comprises machine code, relocatable jump tables, and','line_number':146,'multiline':False]['text':' copyable read-only data, concatenated without padding.  The "...Size"','line_number':147,'multiline':False]['text':' members give the sizes of the individual sections.  The code starts at','line_number':148,'multiline':False]['text':' offsets 0; the other offsets can be derived from the sizes.','line_number':149,'multiline':False]['text':' Relocation information for instructions that reference into the jump tables','line_number':156,'multiline':False]['text':' and read-only data segments.  The relocation information is','line_number':157,'multiline':False]['text':' machine-specific.','line_number':158,'multiline':False]['text':' Possible constant values for initializing globals.','line_number':163,'multiline':False]['text':' Little-endian','line_number':173,'multiline':False]['text':' A subset of the wasm SymbolicAddress enum. This is converted to wasm using','line_number':181,'multiline':False]['text':' ToSymbolicAddress in WasmCraneliftCompile.','line_number':182,'multiline':False]['text':'/ Returns the maximum memory size as an uint32, or UINT32_MAX if not defined.','line_number':231,'multiline':False]['text':' Returns the maximum limit as an uint32, or UINT32_MAX if not defined.','line_number':266,'multiline':False]['text':' extern "C"','line_number':282,'multiline':False]['text':' wasm_cranelift_baldrapi_h','line_number':284,'multiline':False]