['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':10,'multiline':False]['text':' MOZ_IMPLICIT','line_number':11,'multiline':False]['text':' size_t','line_number':13,'multiline':False]['text':' uint32_t, uint64_t','line_number':14,'multiline':False]['text':' std::{true_type, false_type, is_trivial_v, is_trivially_copyable_v, is_trivially_destructible_v}','line_number':15,'multiline':False]['text':' std::forward','line_number':16,'multiline':False]['text':' InlineMap, DefaultKeyPolicy','line_number':18,'multiline':False]['text':' AtomVector, FunctionBoxVector','line_number':19,'multiline':False]['text':' TaggedParserAtomIndex, TrivialTaggedParserAtomIndex','line_number':20,'multiline':False]['text':' TrivialTaggedParserAtomIndexHasher','line_number':21,'multiline':False]['text':' SystemAllocPolicy, ReportOutOfMemory','line_number':22,'multiline':False]['text':' js_new, js_delete','line_number':23,'multiline':False]['text':' Vector','line_number':24,'multiline':False]['text':' For InlineMap<TrivialTaggedParserAtomIndex>.','line_number':32,'multiline':False]['text':' See DefaultKeyPolicy definition in InlineTable.h for more details.','line_number':33,'multiline':False]['text':' namespace detail','line_number':48,'multiline':False]['text':' A pool of recyclable containers for use in the frontend. The Parser and','line_number':54,'multiline':False]['text':' BytecodeEmitter create many maps for name analysis that are short-lived','line_number':55,'multiline':False]['text':' (i.e., for the duration of parsing or emitting a lexical scope). Making','line_number':56,'multiline':False]['text':' them recyclable cuts down significantly on allocator churn.','line_number':57,'multiline':False]['text':' Fallibly aquire one of the supported collection types from the pool.','line_number':95,'multiline':False]['text':' Release a collection back to the pool.','line_number':113,'multiline':False]['text':' Make sure the collection is in |all_| but not already in |recyclable_|.','line_number':121,'multiline':False]['text':' Reserved in allocateFresh.','line_number':135,'multiline':False]['text':' Define wrapper methods to accept TaggedParserAtomIndex.','line_number':176,'multiline':False]['text':' Cannot use GCThingIndex here because it's not trivial type.','line_number':203,'multiline':False]['text':' We can't directly check |std::is_trivial<EntryType>|, because neither','line_number':235,'multiline':False]['text':' mozilla::HashMapEntry nor IsRecyclableAtomMapValueWrapper are trivially','line_number':236,'multiline':False]['text':' default constructible. Instead we check that the key and the unwrapped','line_number':237,'multiline':False]['text':' value are trivial and additionally ensure that the entry itself is','line_number':238,'multiline':False]['text':' trivially copyable and destructible.','line_number':239,'multiline':False]['text':' namespace frontend','line_number':449,'multiline':False]['text':' namespace js','line_number':450,'multiline':False]['text':' frontend_NameCollections_h','line_number':452,'multiline':False]