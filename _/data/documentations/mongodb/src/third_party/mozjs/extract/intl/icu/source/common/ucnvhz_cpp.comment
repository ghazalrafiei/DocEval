['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'  
**********************************************************************
*   Copyright (C) 2000-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   file name:  ucnvhz.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2000oct16
*   created by: Ram Viswanadha
*   10/31/2000  Ram     Implemented offsets logic function
*   
','line_number':3,'multiline':True]['text':' ~ ','line_number':32,'multiline':True]['text':' { ','line_number':33,'multiline':True]['text':' } ','line_number':34,'multiline':True]['text':' errorCode carries result ','line_number':75,'multiline':True]['text':'*************************************HZ Encoding*************************************************
* Rules for HZ encoding
* 
*   In ASCII mode, a byte is interpreted as an ASCII character, unless a
*   '~' is encountered. The character '~' is an escape character. By
*   convention, it must be immediately followed ONLY by '~', '{' or '\n'
*   (<LF>), with the following special meaning.

*   1. The escape sequence '~~' is interpreted as a '~'.
*   2. The escape-to-GB sequence '~{' switches the mode from ASCII to GB.
*   3. The escape sequence '~\n' is a line-continuation marker to be
*     consumed with no output produced.
*   In GB mode, characters are interpreted two bytes at a time as (pure)
*   GB codes until the escape-from-GB code '~}' is read. This code
*   switches the mode from GB back to ASCII.  (Note that the escape-
*   from-GB code '~}' ($7E7D) is outside the defined GB range.)
*
*   Source: RFC 1842
*
*   Note that the formal syntax in RFC 1842 is invalid. I assume that the
*   intended definition of single-byte-segment is as follows (pedberg):
*   single-byte-segment = single-byte-seq 1*single-byte-char
','line_number':130,'multiline':True]['text':' Calling code already handles this situation. ','line_number':168,'multiline':True]['text':'if ((args->converter == NULL) || (args->targetLimit < args->target) || (mySourceLimit < args->source)){
        *err = U_ILLEGAL_ARGUMENT_ERROR;
        return;
    }','line_number':169,'multiline':True]['text':' second byte after ~ ','line_number':181,'multiline':True]['text':' no output for ~\n (line-continuation marker) ','line_number':185,'multiline':True]['text':' we are handling it, reset to avoid future spurious errors ','line_number':198,'multiline':True]['text':' if the first byte is equal to TILDE and the trail byte
                     * is not a valid byte then it is an error condition
                     ','line_number':211,'multiline':True]['text':'
                     * Ticket 5691: consistent illegal sequences:
                     * - We include at least the first byte in the illegal sequence.
                     * - If any of the non-initial bytes could be the start of a character,
                     *   we stop the illegal sequence before the first one of those.
                     ','line_number':214,'multiline':True]['text':' different error here, reset this to avoid spurious future error ','line_number':220,'multiline':True]['text':' The current byte could be the start of a character: Back it out. ','line_number':227,'multiline':True]['text':' Include the current byte in the illegal sequence. ','line_number':231,'multiline':True]['text':' lead byte ','line_number':241,'multiline':True]['text':' add another bit to distinguish a 0 byte from not having seen a lead byte ','line_number':245,'multiline':True]['text':' the segment has something, either valid or will produce a different error, so reset this ','line_number':247,'multiline':True]['text':' trail byte ','line_number':252,'multiline':True]['text':'
                     * Ticket 5691: consistent illegal sequences:
                     * - We include at least the first byte in the illegal sequence.
                     * - If any of the non-initial bytes could be the start of a character,
                     *   we stop the illegal sequence before the first one of those.
                     *
                     * In HZ DBCS, if the second byte is in the 21..7e range,
                     * we report only the first byte as the illegal sequence.
                     * Otherwise we convert or report the pair of bytes.
                     ','line_number':256,'multiline':True]['text':' report a single illegal byte and continue with the following DBCS starter byte ','line_number':275,'multiline':True]['text':' report a pair of illegal bytes if the second byte is not a DBCS starter ','line_number':279,'multiline':True]['text':' add another bit so that the code below writes 2 bytes in case of error ','line_number':280,'multiline':True]['text':' ASCII ','line_number':291,'multiline':True]['text':' the segment has something valid ','line_number':292,'multiline':True]['text':' different error here, reset this to avoid spurious future error ','line_number':295,'multiline':True]['text':' targetUniChar>=0xfffe ','line_number':305,'multiline':True]['text':' Calling code already handles this situation. ','line_number':353,'multiline':True]['text':'if ((args->converter == NULL) || (args->targetLimit < myTarget) || (args->sourceLimit < args->source)){
        *err = U_ILLEGAL_ARGUMENT_ERROR;
        return;
    }','line_number':354,'multiline':True]['text':'writing the char to the output stream ','line_number':361,'multiline':True]['text':'concatEscape(args, &myTargetIndex, &targetLength,"\x7E\x7E",err,2,&mySourceIndex);','line_number':371,'multiline':True]['text':' we can only use lead bytes 21..7D and trail bytes 21..7E ','line_number':381,'multiline':True]['text':'Shifting from a double byte to single byte mode','line_number':394,'multiline':True]['text':' Shifting from a single byte to double byte mode','line_number':401,'multiline':True]['text':' oops.. the code point is unassigned ','line_number':446,'multiline':True]['text':'Handle surrogates ','line_number':447,'multiline':True]['text':'check if the char is a First surrogate','line_number':448,'multiline':True]['text':'look ahead to find the trail surrogate','line_number':453,'multiline':True]['text':' test the following code unit ','line_number':455,'multiline':True]['text':' there are no surrogates in GB2312','line_number':461,'multiline':True]['text':' exit this condition tree ','line_number':463,'multiline':True]['text':' this is an unmatched lead code unit (1st surrogate) ','line_number':465,'multiline':True]['text':' callback(illegal) ','line_number':466,'multiline':True]['text':' no more input ','line_number':470,'multiline':True]['text':' this is an unmatched trail code unit (2nd surrogate) ','line_number':474,'multiline':True]['text':' callback(illegal) ','line_number':475,'multiline':True]['text':' callback(unassigned) for a BMP code point ','line_number':479,'multiline':True]['text':'
 * Structure for cloning an HZ converter into a single memory block.
 ','line_number':519,'multiline':True]['text':' 'preflighting' request - set needed size into *pBufferSize ','line_number':543,'multiline':True]['text':' ucnv.c/ucnv_safeClone() copied the main UConverter already ','line_number':549,'multiline':True]['text':' deep-clone the sub-converter ','line_number':555,'multiline':True]['text':' HZ converts all of ASCII ','line_number':568,'multiline':True]['text':' add all of the code points that the sub-converter handles ','line_number':571,'multiline':True]['text':' reserved ','line_number':618,'multiline':True]['text':' #if !UCONFIG_NO_CONVERSION && !UCONFIG_NO_LEGACY_CONVERSION && !UCONFIG_ONLY_HTML_CONVERSION ','line_number':625,'multiline':True]