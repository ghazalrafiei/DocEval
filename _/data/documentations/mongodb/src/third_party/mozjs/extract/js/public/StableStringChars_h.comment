['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':'
 * Safely access the contents of a string even as GC can cause the string's
 * contents to move around in memory.
 ','line_number':6,'multiline':True]['text':' MOZ_ASSERT','line_number':14,'multiline':False]['text':' MOZ_INIT_OUTSIDE_CTOR, MOZ_STACK_CLASS','line_number':15,'multiline':False]['text':' mozilla::Maybe','line_number':16,'multiline':False]['text':' mozilla::Range','line_number':17,'multiline':False]['text':' size_t','line_number':19,'multiline':False]['text':' uint8_t','line_number':20,'multiline':False]['text':' JS_PUBLIC_API','line_number':22,'multiline':False]['text':' JS::Handle, JS::Rooted','line_number':25,'multiline':False]['text':' JS::GetStringLength','line_number':26,'multiline':False]['text':' JSContext, JS::Latin1Char, JSString','line_number':27,'multiline':False]['text':' js::Vector','line_number':28,'multiline':False]['text':'*
 * This class provides safe access to a string's chars across a GC. If we ever
 * nursery allocate strings' out of line chars, this class will have to make a
 * copy, so it's best to avoid using this class unless you really need it. It's
 * usually more efficient to use the latin1Chars/twoByteChars JSString methods
 * and often the code can be rewritten so that only indexes instead of char
 * pointers are used in parts of the code that can GC.
 ','line_number':34,'multiline':True]['text':'
   * When copying string char, use this many bytes of inline storage.  This is
   * chosen to allow the inline string types to be copied without allocating.
   * This is asserted in AutoStableStringChars::allocOwnChars.
   ','line_number':43,'multiline':True]['text':' Ensure the string is kept alive while we're using its chars. ','line_number':50,'multiline':True]['text':' Like init(), but Latin1 chars are inflated to TwoByte. ','line_number':66,'multiline':True]['text':' If we own the chars, transfer ownership to the caller. ','line_number':91,'multiline':True]['text':' namespace JS','line_number':115,'multiline':False]['text':' js_StableStringChars_h ','line_number':117,'multiline':True]