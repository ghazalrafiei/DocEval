['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' size_t','line_number':10,'multiline':False]['text':' JS_PUBLIC_API','line_number':12,'multiline':False]['text':' js::Fifo','line_number':14,'multiline':False]['text':' js::SystemAllocPolicy','line_number':15,'multiline':False]['text':' js::DefaultHasher, js::HashSet','line_number':16,'multiline':False]['text':' JS::Dispatchable, JS::Dispatchable::MaybeShuttingDown, JS::DispatchToEventLoopCallback','line_number':17,'multiline':False]['text':' JS::Handle, JS::PersistentRooted','line_number':18,'multiline':False]['text':' js::ConditionVariable','line_number':19,'multiline':False]['text':' js::PromiseObject','line_number':20,'multiline':False]['text':' [SMDOC] OffThreadPromiseTask: an off-main-thread task that resolves a promise','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' An OffThreadPromiseTask is an abstract base class holding a JavaScript','line_number':31,'multiline':False]['text':' promise that will be resolved (fulfilled or rejected) with the results of a','line_number':32,'multiline':False]['text':' task possibly performed by some other thread.','line_number':33,'multiline':False]['text':'','line_number':34,'multiline':False]['text':' An OffThreadPromiseTask's lifecycle is as follows:','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' - Some JavaScript native wishes to return a promise of the result of some','line_number':37,'multiline':False]['text':'   computation that might be performed by other threads (say, helper threads','line_number':38,'multiline':False]['text':'   or the embedding's I/O threads), so it creates a PromiseObject to represent','line_number':39,'multiline':False]['text':'   the result, and an OffThreadPromiseTask referring to it. After handing the','line_number':40,'multiline':False]['text':'   OffThreadPromiseTask to the code doing the actual work, the native is free','line_number':41,'multiline':False]['text':'   to return the PromiseObject to its caller.','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' - When the computation is done, successfully or otherwise, it populates the','line_number':44,'multiline':False]['text':'   OffThreadPromiseTask—which is actually an instance of some concrete','line_number':45,'multiline':False]['text':'   subclass specific to the task—with the information needed to resolve the','line_number':46,'multiline':False]['text':'   promise, and calls OffThreadPromiseTask::dispatchResolveAndDestroy. This','line_number':47,'multiline':False]['text':'   enqueues a runnable on the JavaScript thread to which the promise belongs.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' - When it gets around to the runnable, the JavaScript thread calls the','line_number':50,'multiline':False]['text':'   OffThreadPromiseTask's `resolve` method, which the concrete subclass has','line_number':51,'multiline':False]['text':'   overriden to resolve the promise appropriately. This probably enqueues a','line_number':52,'multiline':False]['text':'   promise reaction job.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' - The JavaScript thread then deletes the OffThreadPromiseTask.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' During shutdown, the process is slightly different. Enqueuing runnables to','line_number':57,'multiline':False]['text':' the JavaScript thread begins to fail. JSRuntime shutdown waits for all','line_number':58,'multiline':False]['text':' outstanding tasks to call dispatchResolveAndDestroy, and then deletes them on','line_number':59,'multiline':False]['text':' the main thread, without calling `resolve`.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' For example, the JavaScript function WebAssembly.compile uses','line_number':62,'multiline':False]['text':' OffThreadPromiseTask to manage the result of a helper thread task, accepting','line_number':63,'multiline':False]['text':' binary WebAssembly code and returning a promise of a compiled','line_number':64,'multiline':False]['text':' WebAssembly.Module. It would like to do this compilation work on a helper','line_number':65,'multiline':False]['text':' thread. When called by JavaScript, WebAssembly.compile creates a promise,','line_number':66,'multiline':False]['text':' builds a CompileBufferTask (the OffThreadPromiseTask concrete subclass) to','line_number':67,'multiline':False]['text':' keep track of it, and then hands that to a helper thread. When the helper','line_number':68,'multiline':False]['text':' thread is done, successfully or otherwise, it calls the CompileBufferTask's','line_number':69,'multiline':False]['text':' dispatchResolveAndDestroy method, which enqueues a runnable to the JavaScript','line_number':70,'multiline':False]['text':' thread to resolve the promise and delete the CompileBufferTask.','line_number':71,'multiline':False]['text':' (CompileBufferTask actually implements PromiseHelperTask, which implements','line_number':72,'multiline':False]['text':' OffThreadPromiseTask; PromiseHelperTask is what our helper thread scheduler','line_number':73,'multiline':False]['text':' requires.)','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' OffThreadPromiseTasks are not limited to use with helper threads. For','line_number':76,'multiline':False]['text':' example, a function returning a promise of the result of a network operation','line_number':77,'multiline':False]['text':' could provide the code collecting the incoming data with an','line_number':78,'multiline':False]['text':' OffThreadPromiseTask for the promise, and let the embedding's network I/O','line_number':79,'multiline':False]['text':' threads call dispatchResolveAndDestroy.','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' OffThreadPromiseTask may also be used purely on the main thread, as a way to','line_number':82,'multiline':False]['text':' "queue a task" in HTML terms. Note that a "task" is not the same as a','line_number':83,'multiline':False]['text':' "microtask" and there are separate queues for tasks and microtasks that are','line_number':84,'multiline':False]['text':' drained at separate times in the browser. The task queue is implemented by','line_number':85,'multiline':False]['text':' the browser's main event loop. The microtask queue is implemented','line_number':86,'multiline':False]['text':' by JS::JobQueue, used for promises and gets drained before returning to','line_number':87,'multiline':False]['text':' the event loop. Thus OffThreadPromiseTask can only be used when the spec','line_number':88,'multiline':False]['text':' says "queue a task", as the WebAssembly APIs do.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' An OffThreadPromiseTask has a JSContext, and must be constructed and have its','line_number':91,'multiline':False]['text':' 'init' method called on that JSContext's thread. Once initialized, its','line_number':92,'multiline':False]['text':' dispatchResolveAndDestroy method may be called from any thread. This is the','line_number':93,'multiline':False]['text':' only safe way to destruct an OffThreadPromiseTask; doing so ensures the','line_number':94,'multiline':False]['text':' OffThreadPromiseTask's destructor will run on the JSContext's thread, either','line_number':95,'multiline':False]['text':' from the event loop or during shutdown.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' OffThreadPromiseTask::dispatchResolveAndDestroy uses the','line_number':98,'multiline':False]['text':' JS::DispatchToEventLoopCallback provided by the embedding to enqueue','line_number':99,'multiline':False]['text':' runnables on the JavaScript thread. See the comments for','line_number':100,'multiline':False]['text':' DispatchToEventLoopCallback for details.','line_number':101,'multiline':False]['text':' To be called by OffThreadPromiseTask and implemented by the derived class.','line_number':118,'multiline':False]['text':' JS::Dispatchable implementation. Ends with 'delete this'.','line_number':121,'multiline':False]['text':' Initializing an OffThreadPromiseTask informs the runtime that it must','line_number':127,'multiline':False]['text':' wait on shutdown for this task to rejoin the active JSContext by calling','line_number':128,'multiline':False]['text':' dispatchResolveAndDestroy().','line_number':129,'multiline':False]['text':' An initialized OffThreadPromiseTask can be dispatched to an active','line_number':132,'multiline':False]['text':' JSContext of its Promise's JSRuntime from any thread. Normally, this will','line_number':133,'multiline':False]['text':' lead to resolve() being called on JSContext thread, given the Promise.','line_number':134,'multiline':False]['text':' However, if shutdown interrupts, resolve() may not be called, though the','line_number':135,'multiline':False]['text':' OffThreadPromiseTask will be destroyed on a JSContext thread.','line_number':136,'multiline':False]['text':' These fields are initialized once before any off-thread usage and thus do','line_number':150,'multiline':False]['text':' not require a lock.','line_number':151,'multiline':False]['text':' A set of all OffThreadPromiseTasks that have successfully called 'init'.','line_number':155,'multiline':False]['text':' OffThreadPromiseTask's destructor removes them from the set.','line_number':156,'multiline':False]['text':' The allCanceled_ condition is waited on and notified during engine','line_number':159,'multiline':False]['text':' shutdown, communicating when all off-thread tasks in live_ are safe to be','line_number':160,'multiline':False]['text':' destroyed from the (shutting down) main thread. This condition is met when','line_number':161,'multiline':False]['text':' live_.count() == numCanceled_ where "canceled" means "the','line_number':162,'multiline':False]['text':' DispatchToEventLoopCallback failed after this task finished execution".','line_number':163,'multiline':False]['text':' The queue of JS::Dispatchables used by the DispatchToEventLoopCallback that','line_number':167,'multiline':False]['text':' calling js::UseInternalJobQueues installs.','line_number':168,'multiline':False]['text':' If initInternalDispatchQueue() was called, internalDrain() can be','line_number':196,'multiline':False]['text':' called to periodically drain the dispatch queue before shutdown.','line_number':197,'multiline':False]['text':' shutdown() must be called by the JSRuntime while the JSRuntime is valid.','line_number':201,'multiline':False]['text':' namespace js','line_number':205,'multiline':False]['text':' vm_OffThreadPromiseRuntimeState_h','line_number':207,'multiline':False]