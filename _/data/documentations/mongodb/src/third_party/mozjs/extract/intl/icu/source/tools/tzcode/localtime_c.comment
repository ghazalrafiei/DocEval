['text':'
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson.
','line_number':1,'multiline':True]['text':'
** Leap second handling from Bradley White.
** POSIX-style TZ environment variable handling from Guy Harris.
','line_number':6,'multiline':True]['text':'LINTLIBRARY','line_number':11,'multiline':True]['text':' !defined TZ_ABBR_MAX_LEN ','line_number':19,'multiline':True]['text':' !defined TZ_ABBR_CHAR_SET ','line_number':24,'multiline':True]['text':' !defined TZ_ABBR_ERR_CHAR ','line_number':28,'multiline':True]['text':'
** SunOS 4.1.1 headers lack O_BINARY.
','line_number':30,'multiline':True]['text':' defined O_BINARY ','line_number':36,'multiline':True]['text':' !defined O_BINARY ','line_number':39,'multiline':True]['text':'
** Someone might make incorrect use of a time zone abbreviation:
**	1.	They might reference tzname[0] before calling tzset (explicitly
**		or implicitly).
**	2.	They might reference tzname[1] before calling tzset (explicitly
**		or implicitly).
**	3.	They might reference tzname[1] after setting to a time zone
**		in which Daylight Saving Time is never observed.
**	4.	They might reference tzname[0] after setting to a time zone
**		in which Standard Time is never observed.
**	5.	They might reference tm.TM_ZONE after calling offtime.
** What's best to do in the above cases is open to debate;
** for now, we just set things up so that in any of the five cases
** WILDABBR is used. Another possibility: initialize tzname[0] to the
** string "tzname[0] used before set", and similarly for the other cases.
** And another: initialize tzname[0] to "ERA", with an explanation in the
** manual page of what this "time zone abbreviation" means (doing this so
** that tzname[0] has the "normal" length of three characters).
','line_number':42,'multiline':True]['text':' !defined WILDABBR ','line_number':62,'multiline':True]['text':'
** The DST rules to use if TZ has no rules and we can't load TZDEFRULES.
** We default to US rules as of 1999-08-17.
** POSIX 1003.1 section 8.1.1 says that the default DST rules are
** implementation dependent; for historical reasons, US rules are a
** common default.
','line_number':68,'multiline':True]['text':' !defined TZDEFDST ','line_number':77,'multiline':True]['text':' time type information ','line_number':79,'multiline':True]['text':' UT offset in seconds ','line_number':80,'multiline':True]['text':' used to set tm_isdst ','line_number':81,'multiline':True]['text':' abbreviation list index ','line_number':82,'multiline':True]['text':' TRUE if transition is std time ','line_number':83,'multiline':True]['text':' TRUE if transition is UT ','line_number':84,'multiline':True]['text':' leap second information ','line_number':87,'multiline':True]['text':' transition time ','line_number':88,'multiline':True]['text':' correction to apply ','line_number':89,'multiline':True]['text':' defined TZNAME_MAX ','line_number':96,'multiline':True]['text':' !defined TZNAME_MAX ','line_number':99,'multiline':True]['text':' for early times or if no transitions ','line_number':114,'multiline':True]['text':' type of rule--see below ','line_number':118,'multiline':True]['text':' day number of rule ','line_number':119,'multiline':True]['text':' week number of rule ','line_number':120,'multiline':True]['text':' month number of rule ','line_number':121,'multiline':True]['text':' transition time of rule ','line_number':122,'multiline':True]['text':' Jn - Julian day ','line_number':125,'multiline':True]['text':' n - day of year ','line_number':126,'multiline':True]['text':' Mm.n.d - month, week, day of week ','line_number':127,'multiline':True]['text':'
** Prototypes for static functions.
','line_number':129,'multiline':True]['text':' defined ALL_STATE ','line_number':186,'multiline':True]['text':' State Farm ','line_number':193,'multiline':True]['text':' !defined TZ_STRLEN_MAX ','line_number':197,'multiline':True]['text':'
** Section 4.12.3 of X3.159-1989 requires that
**	Except for the strftime function, these functions [asctime,
**	ctime, gmtime, localtime] return values in one of two static
**	objects: a broken-down time structure and an array of char.
** Thanks to Paul Eggert for noting this.
','line_number':208,'multiline':True]['text':' defined USG_COMPAT ','line_number':221,'multiline':True]['text':' defined ALTZONE ','line_number':225,'multiline':True]['text':' defined USG_COMPAT ','line_number':261,'multiline':True]['text':' defined ALTZONE ','line_number':264,'multiline':True]['text':'
	** And to get the latest zone names into tzname. . .
	','line_number':269,'multiline':True]['text':' defined USG_COMPAT ','line_number':289,'multiline':True]['text':' defined ALTZONE ','line_number':293,'multiline':True]['text':'
	** Finally, scrub the abbreviations.
	** First, replace bogus characters.
	','line_number':295,'multiline':True]['text':'
	** Second, truncate long abbreviations.
	','line_number':302,'multiline':True]['text':' !defined ALL_STATE ','line_number':340,'multiline':True]['text':' !defined ALL_STATE ','line_number':343,'multiline':True]['text':'
		** Section 4.9.1 of the C standard says that
		** "FILENAME_MAX expands to an integral constant expression
		** that is the size needed for an array of char large enough
		** to hold the longest file name string that the implementation
		** guarantees can be opened."
		','line_number':354,'multiline':True]['text':'
			** Set doaccess if '.' (as in "../") shows up in name.
			','line_number':374,'multiline':True]['text':' ats ','line_number':409,'multiline':True]['text':' types ','line_number':410,'multiline':True]['text':' ttinfos ','line_number':411,'multiline':True]['text':' chars ','line_number':412,'multiline':True]['text':' lsinfos ','line_number':413,'multiline':True]['text':' ttisstds ','line_number':414,'multiline':True]['text':' ttisgmts ','line_number':415,'multiline':True]['text':'
					** Keep the earlier record, but tweak
					** it so that it starts with the
					** minimum time_t value.
					','line_number':427,'multiline':True]['text':' ensure '\0' at end ','line_number':464,'multiline':True]['text':'
		** If this is an old file, we're done.
		','line_number':501,'multiline':True]['text':'
		** If this is a signed narrow time_t system, we're done.
		','line_number':509,'multiline':True]['text':'
	** If type 0 is is unused in transitions,
	** it's the type to use for early times.
	','line_number':566,'multiline':True]['text':'
	** Absent the above,
	** if there are transition times
	** and the first transition is to a daylight time
	** find the standard type less than and closest to
	** the type of the first transition.
	','line_number':574,'multiline':True]['text':'
	** If no result yet, find the first standard type.
	** If there is none, punt to type zero.
	','line_number':587,'multiline':True]['text':' defined ALL_STATE ','line_number':602,'multiline':True]['text':' defined ALL_STATE ','line_number':607,'multiline':True]['text':'
** Given a pointer into a time zone string, scan until a character that is not
** a valid character in a zone name is found. Return a pointer to that
** character.
','line_number':642,'multiline':True]['text':'
** Given a pointer into an extended time zone string, scan until the ending
** delimiter of the zone name is located. Return a pointer to the delimiter.
**
** As with getzname above, the legal character set is actually quite
** restricted, with other characters producing undefined results.
** We don't do any checking here; checking is done later in common-case code.
','line_number':659,'multiline':True]['text':'
** Given a pointer into a time zone string, extract a number from that string.
** Check that the number is within a specified range; if it is not, return
** NULL.
** Otherwise, return a pointer to the first character not part of the number.
','line_number':678,'multiline':True]['text':' illegal value ','line_number':697,'multiline':True]['text':' illegal value ','line_number':701,'multiline':True]['text':'
** Given a pointer into a time zone string, extract a number of seconds,
** in hh[:mm[:ss]] form, from the string.
** If any error occurs, return NULL.
** Otherwise, return a pointer to the first character not part of the number
** of seconds.
','line_number':706,'multiline':True]['text':'
	** `HOURSPERDAY * DAYSPERWEEK - 1' allows quasi-Posix rules like
	** "M10.4.6/26", which does not conform to Posix,
	** but which specifies the equivalent of
	** ``02:00 on the first Sunday on or after 23 Oct''.
	','line_number':719,'multiline':True]['text':' `SECSPERMIN' allows for leap seconds. ','line_number':737,'multiline':True]['text':'
** Given a pointer into a time zone string, extract an offset, in
** [+-]hh[:mm[:ss]] form, from the string.
** If any error occurs, return NULL.
** Otherwise, return a pointer to the first character not part of the time.
','line_number':747,'multiline':True]['text':' illegal time ','line_number':766,'multiline':True]['text':'
** Given a pointer into a time zone string, extract a rule in the form
** date[/time]. See POSIX section 8 for the format of "date" and "time".
** If a valid rule is not found, return NULL.
** Otherwise, return a pointer to the first character not part of the rule.
','line_number':772,'multiline':True]['text':'
		** Julian day.
		','line_number':783,'multiline':True]['text':'
		** Month, week, day.
		','line_number':790,'multiline':True]['text':'
		** Day of year.
		','line_number':807,'multiline':True]['text':' invalid format ','line_number':812,'multiline':True]['text':'
		** Time specified.
		','line_number':816,'multiline':True]['text':' default = 2:00:00 ','line_number':821,'multiline':True]['text':'
** Given a year, a rule, and the offset from UT at the time that rule takes
** effect, calculate the year-relative time that rule takes effect.
','line_number':825,'multiline':True]['text':'
		** Jn - Julian day, 1 == January 1, 60 == March 1 even in leap
		** years.
		** In non-leap years, or if the day number is 59 or less, just
		** add SECSPERDAY times the day number-1 to the time of
		** January 1, midnight, to get the day.
		','line_number':844,'multiline':True]['text':'
		** n - day of year.
		** Just add SECSPERDAY times the day number to the time of
		** January 1, midnight, to get the day.
		','line_number':857,'multiline':True]['text':'
		** Mm.n.d - nth "dth day" of month m.
		','line_number':866,'multiline':True]['text':'
		** Use Zeller's Congruence to get day-of-week of first day of
		** month.
		','line_number':870,'multiline':True]['text':'
		** "dow" is the day-of-week of the first day of the month. Get
		** the day-of-month (zero-origin) of the first "dow" day of the
		** month.
		','line_number':883,'multiline':True]['text':'
		** "d" is the day-of-month (zero-origin) of the day we want.
		','line_number':898,'multiline':True]['text':'
	** "value" is the year-relative time of 00:00:00 UT on the day in
	** question. To get the year-relative time of the specified local
	** time on that day, add the transition time and the current offset
	** from UT.
	','line_number':907,'multiline':True]['text':'
** Given a POSIX section 8-style TZ string, fill in the rule tables as
** appropriate.
','line_number':916,'multiline':True]['text':' length of standard zone name ','line_number':938,'multiline':True]['text':' so, we're off a little ','line_number':964,'multiline':True]['text':' length of DST zone name ','line_number':976,'multiline':True]['text':' standard time and DST ','line_number':1002,'multiline':True]['text':'
			** Two transitions per year, from EPOCH_YEAR forward.
			','line_number':1003,'multiline':True]['text':' Perpetual DST.  ','line_number':1054,'multiline':True]['text':'
			** Initial values of theirstdoffset and theirdstoffset.
			','line_number':1065,'multiline':True]['text':'
			** Initially we're assumed to be in standard time.
			','line_number':1086,'multiline':True]['text':'
			** Now juggle transition times and types
			** tracking offsets as you do.
			','line_number':1091,'multiline':True]['text':' No adjustment to transition time ','line_number':1099,'multiline':True]['text':'
					** If summer time is in effect, and the
					** transition time was not specified as
					** standard time, add the summer time
					** offset to the transition time;
					** otherwise, add the standard time
					** offset to the transition time.
					','line_number':1101,'multiline':True]['text':'
					** Transitions from DST to DDST
					** will effectively disappear since
					** POSIX provides for only one DST
					** offset.
					','line_number':1109,'multiline':True]['text':'
			** Finally, fill in ttis.
			','line_number':1128,'multiline':True]['text':' only standard time ','line_number':1143,'multiline':True]['text':'
** A non-static declaration of tzsetwall in a system header file
** may cause a warning about this upcoming static declaration...
','line_number':1175,'multiline':True]['text':' !defined STD_INSPIRED ','line_number':1180,'multiline':True]['text':' all we can do ','line_number':1192,'multiline':True]['text':' defined ALL_STATE ','line_number':1196,'multiline':True]['text':' all we can do ','line_number':1223,'multiline':True]['text':' defined ALL_STATE ','line_number':1227,'multiline':True]['text':'
		** User wants it fast rather than right.
		','line_number':1229,'multiline':True]['text':' so, we're off a little ','line_number':1232,'multiline':True]['text':'
** The easy way to behave "as if no library function calls" localtime
** is to not call it--so we drop its guts into "localsub", which can be
** freely called. (And no, the PANS doesn't require the above behavior--
** but it *is* desirable.)
**
** The unused offset argument is for the benefit of mktime variants.
','line_number':1245,'multiline':True]['text':'ARGSUSED','line_number':1254,'multiline':True]['text':' "cannot happen" ','line_number':1285,'multiline':True]['text':'
	** To get (wrong) behavior that's compatible with System V Release 2.0
	** you'd replace the statement below with
	**	t += ttisp->tt_gmtoff;
	**	timesub(&t, 0L, sp, tmp);
	','line_number':1316,'multiline':True]['text':' defined TM_ZONE ','line_number':1327,'multiline':True]['text':'
** Re-entrant version of localtime.
','line_number':1338,'multiline':True]['text':'
** gmtsub is to gmtime as localsub is to localtime.
','line_number':1348,'multiline':True]['text':' defined ALL_STATE ','line_number':1362,'multiline':True]['text':'
	** Could get fancy here and deliver something such as
	** "UT+xxxx" or "UT-xxxx" if offset is non-zero,
	** but this is no time for a treasure hunt.
	','line_number':1368,'multiline':True]['text':' defined TM_ZONE ','line_number':1374,'multiline':True]['text':'
* Re-entrant version of gmtime.
','line_number':1384,'multiline':True]['text':' defined STD_INSPIRED ','line_number':1402,'multiline':True]['text':'
** Return the number of leap years through the end of the given year
** where, to make the math easy, the answer for year zero is defined as zero.
','line_number':1404,'multiline':True]['text':' unsigned would be so 2003 ','line_number':1423,'multiline':True]['text':'
	** Given the range, we can now fearlessly cast...
	','line_number':1486,'multiline':True]['text':'
	** The "extra" mods below avoid overflow problems.
	','line_number':1513,'multiline':True]['text':'
	** A positive leap second requires a special
	** representation. This uses "... ??:59:60" et seq.
	','line_number':1528,'multiline':True]['text':' defined TM_GMTOFF ','line_number':1540,'multiline':True]['text':'
** Section 4.12.3.2 of X3.159-1989 requires that
**	The ctime function converts the calendar time pointed to by timer
**	to local time in the form of a string. It is equivalent to
**		asctime(localtime(timer))
','line_number':1547,'multiline':True]['text':'
** Adapted from code provided by Robert Elz, who writes:
**	The "best" way to do mktime I think is based on an idea of Bob
**	Kridle's (so its said...) from a long time ago.
**	It does a binary search of the time_t space. Since time_t's are
**	just 32 bits, its a max of 32 iterations (even at 64 bits it
**	would still be very reasonable).
','line_number':1564,'multiline':True]['text':' !defined WRONG ','line_number':1575,'multiline':True]['text':'
** Normalize logic courtesy Paul Eggert.
','line_number':1577,'multiline':True]['text':'
	** If i >= 0 there can only be overflow if i + j > INT_MAX
	** or if j > INT_MAX - i; given i >= 0, INT_MAX - i cannot overflow.
	** If i < 0 there can only be overflow if i + j < INT_MIN
	** or if j < INT_MIN - i; given i < 0, INT_MIN - i cannot overflow.
	','line_number':1586,'multiline':True]['text':'
	** This is like
	** 'if (! (time_t_min <= *tp + j && *tp + j <= time_t_max)) ...',
	** except that it does the right thing even if *tp + j would overflow.
	','line_number':1612,'multiline':True]['text':'
	** Turn y into an actual year number for now.
	** It is converted back to an offset from TM_YEAR_BASE later.
	','line_number':1699,'multiline':True]['text':'
		** We can't set tm_sec to 0, because that might push the
		** time below the minimum representable time.
		** Set tm_sec to 59 instead.
		** This assumes that the minimum representable time is
		** not in the same minute that a leap second was deleted from,
		** which is a safer assumption than using 58 would be.
		','line_number':1736,'multiline':True]['text':'
	** Do a binary search (this works whatever time_t's type is).
	','line_number':1752,'multiline':True]['text':'
			** Assume that t is too extreme to be represented in
			** a struct tm; arrange things so that it is less
			** extreme on the next pass.
			','line_number':1771,'multiline':True]['text':'
		** Right time, wrong type.
		** Hunt for right time, right type.
		** It's okay to guess wrong since the guess
		** gets checked.
		','line_number':1799,'multiline':True]['text':'
				** We have a match.
				','line_number':1823,'multiline':True]['text':'
	** First try without normalization of seconds
	** (in case tm_sec contains a value associated with a leap second).
	** If that fails, try with normalization of seconds.
	','line_number':1850,'multiline':True]['text':'
		** POSIX Conformance Test Suite code courtesy Grant Sullivan.
		','line_number':1885,'multiline':True]['text':' reset to std and try again ','line_number':1888,'multiline':True]['text':' !defined PCTS ','line_number':1891,'multiline':True]['text':'
	** We're supposed to assume that somebody took a time of one type
	** and did some math on it that yielded a "struct tm" that's bad.
	** We try to divine the type they started from and adjust to the
	** type they need.
	','line_number':1892,'multiline':True]['text':' in case it wasn't initialized ','line_number':1944,'multiline':True]['text':' defined STD_INSPIRED ','line_number':1964,'multiline':True]['text':'
** The following is supplied for compatibility with
** previous versions of the CMUCS runtime library.
','line_number':1968,'multiline':True]['text':' defined CMUCS ','line_number':1983,'multiline':True]['text':'
** XXX--is the below the right way to conditionalize??
','line_number':1985,'multiline':True]['text':'
** IEEE Std 1003.1-1988 (POSIX) legislates that 536457599
** shall correspond to "Wed Dec 31 23:59:59 UTC 1986", which
** is not the case if we are accounting for leap seconds.
** So, we provide the following conversion routines for use
** when exchanging timestamps with POSIX conforming systems.
','line_number':1991,'multiline':True]['text':'
	** For a positive leap second hit, the result
	** is not unique. For a negative leap second
	** hit, the corresponding time doesn't exist,
	** so we return an adjacent second.
	','line_number':2030,'multiline':True]['text':' defined STD_INSPIRED ','line_number':2056,'multiline':True]