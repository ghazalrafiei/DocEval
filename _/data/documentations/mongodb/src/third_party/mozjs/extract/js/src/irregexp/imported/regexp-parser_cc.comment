['text':' Copyright 2016 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]['text':' found in the LICENSE file.','line_number':3,'multiline':False]['text':' V8_INTL_SUPPORT','line_number':15,'multiline':False]['text':' Read the whole surrogate pair in case of unicode flag, if possible.','line_number':47,'multiline':False]['text':' Advance so that position() points to 1-after-the-last-character. This is','line_number':87,'multiline':False]['text':' important so that Reset() to this position works correctly.','line_number':88,'multiline':False]['text':' Do not overwrite any existing error.','line_number':134,'multiline':False]['text':' Zip to the end to make sure no more input is read.','line_number':138,'multiline':False]['text':'','line_number':144,'multiline':True]['text':' Pattern ::','line_number':148,'multiline':False]['text':'   Disjunction','line_number':149,'multiline':False]['text':' If the result of parsing is a literal string atom, and it has the','line_number':154,'multiline':False]['text':' same length as the input, then the atom is identical to the input.','line_number':155,'multiline':False]['text':' Disjunction ::','line_number':163,'multiline':False]['text':'   Alternative','line_number':164,'multiline':False]['text':'   Alternative | Disjunction','line_number':165,'multiline':False]['text':' Alternative ::','line_number':166,'multiline':False]['text':'   [empty]','line_number':167,'multiline':False]['text':'   Term Alternative','line_number':168,'multiline':False]['text':' Term ::','line_number':169,'multiline':False]['text':'   Assertion','line_number':170,'multiline':False]['text':'   Atom','line_number':171,'multiline':False]['text':'   Atom Quantifier','line_number':172,'multiline':False]['text':' Used to store current state while parsing subexpressions.','line_number':174,'multiline':False]['text':' Cache the builder in a local variable for quick access.','line_number':178,'multiline':False]['text':' Inside a parenthesized group when hitting end of input.','line_number':184,'multiline':False]['text':' Parsing completed successfully.','line_number':188,'multiline':False]['text':' End disjunction parsing and convert builder content to new single','line_number':197,'multiline':False]['text':' regexp atom.','line_number':198,'multiline':False]['text':' Build result of subexpression.','line_number':206,'multiline':False]['text':' Restore previous state.','line_number':226,'multiline':False]['text':' For compatibility with JSC and ES3, we allow quantifiers after','line_number':231,'multiline':False]['text':' lookaheads, and break in all cases.','line_number':232,'multiline':False]['text':' Everything.','line_number':271,'multiline':False]['text':' Everything except \x0A, \x0D, \u2028 and \u2029','line_number':274,'multiline':False]['text':' Atom ::','line_number':293,'multiline':False]['text':'   \ AtomEscape','line_number':294,'multiline':False]['text':' AtomEscape ::','line_number':309,'multiline':False]['text':'   CharacterClassEscape','line_number':310,'multiline':False]['text':'','line_number':311,'multiline':False]['text':' CharacterClassEscape :: one of','line_number':312,'multiline':False]['text':'   d D s S w W','line_number':313,'multiline':False]['text':' The back reference is inside the capture group it refers to.','line_number':374,'multiline':False]['text':' Nothing can possibly have been captured yet, so we use empty','line_number':375,'multiline':False]['text':' instead. This ensures that, when checking a back reference,','line_number':376,'multiline':False]['text':' the capture registers of the referenced capture are either','line_number':377,'multiline':False]['text':' both set or both cleared.','line_number':378,'multiline':False]['text':' With /u, no identity escapes except for syntax characters','line_number':388,'multiline':False]['text':' are allowed. Otherwise, all identity escapes are allowed.','line_number':389,'multiline':False]['text':' With /u, decimal escape with leading 0 are not parsed as octal.','line_number':404,'multiline':False]['text':' ControlEscape :: one of','line_number':411,'multiline':False]['text':'   f n r t v','line_number':412,'multiline':False]['text':' Special case if it is an ASCII letter.','line_number':436,'multiline':False]['text':' Convert lower case letters to uppercase.','line_number':437,'multiline':False]['text':' controlLetter is not in range 'A'-'Z' or 'a'-'z'.','line_number':440,'multiline':False]['text':' Read the backslash as a literal character instead of as','line_number':441,'multiline':False]['text':' starting an escape.','line_number':442,'multiline':False]['text':' ES#prod-annexB-ExtendedPatternCharacter','line_number':443,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':445,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':463,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':476,'multiline':False]['text':' Either an identity escape or a named back-reference.  The two','line_number':482,'multiline':False]['text':' interpretations are mutually exclusive: '\k' is interpreted as','line_number':483,'multiline':False]['text':' an identity escape for non-Unicode patterns without named','line_number':484,'multiline':False]['text':' capture groups, and as the beginning of a named back-reference','line_number':485,'multiline':False]['text':' in all other cases.','line_number':486,'multiline':False]['text':' With /u, no identity escapes except for syntax characters','line_number':495,'multiline':False]['text':' are allowed. Otherwise, all identity escapes are allowed.','line_number':496,'multiline':False]['text':' end switch(current())','line_number':522,'multiline':False]['text':' QuantifierPrefix ::','line_number':527,'multiline':False]['text':'   *','line_number':528,'multiline':False]['text':'   +','line_number':529,'multiline':False]['text':'   ?','line_number':530,'multiline':False]['text':'   {','line_number':531,'multiline':False]['text':' With /u, incomplete quantifiers are not allowed.','line_number':554,'multiline':False]['text':' FLAG_regexp_possessive_quantifier is a debug-only flag.','line_number':566,'multiline':False]['text':' Switching on flags.','line_number':610,'multiline':False]['text':' Flush pending text using old flags.','line_number':643,'multiline':False]['text':' These (?i)-style flag switches don't put us in a subexpression','line_number':644,'multiline':False]['text':' at all, they just modify the flags in the rest of the current','line_number':645,'multiline':False]['text':' subexpression.','line_number':646,'multiline':False]['text':' Will break us out of the outer loop.','line_number':654,'multiline':False]['text':' Store current state and begin new disjunction parsing.','line_number':697,'multiline':False]['text':' Currently only used in an DCHECK.','line_number':704,'multiline':False]['text':' In order to know whether an escape is a backreference or not we have to scan','line_number':721,'multiline':False]['text':' the entire regexp and find the number of capturing parentheses.  However we','line_number':722,'multiline':False]['text':' don't want to scan the regexp twice unless it is necessary.  This mini-parser','line_number':723,'multiline':False]['text':' is called when needed.  It can see the difference between capturing and','line_number':724,'multiline':False]['text':' noncapturing parentheses and can skip character classes and backslash-escaped','line_number':725,'multiline':False]['text':' characters.','line_number':726,'multiline':False]['text':' Start with captures started previous to current position','line_number':730,'multiline':False]['text':' Add count of captures after this position.','line_number':732,'multiline':False]['text':' At this point we could be in','line_number':754,'multiline':False]['text':' * a non-capturing group '(:',','line_number':755,'multiline':False]['text':' * a lookbehind assertion '(?<=' '(?<!'','line_number':756,'multiline':False]['text':' * or a named capture '(?<'.','line_number':757,'multiline':False]['text':'','line_number':758,'multiline':False]['text':' Of these, only named captures are capturing groups.','line_number':759,'multiline':False]['text':' Found a possible named capture. It could turn out to be a syntax','line_number':767,'multiline':False]['text':' error (e.g. an unterminated or invalid name), but that distinction','line_number':768,'multiline':False]['text':' does not matter for our purposes.','line_number':769,'multiline':False]['text':' Try to parse a decimal literal that is no greater than the total number','line_number':785,'multiline':False]['text':' of left capturing parentheses in the input.','line_number':786,'multiline':False]['text':' Convert unicode escapes.','line_number':831,'multiline':False]['text':' The backslash char is misclassified as both ID_Start and ID_Continue.','line_number':840,'multiline':False]['text':' Check for duplicates and bail if we find any.','line_number':882,'multiline':False]['text':' The parser is assumed to be on the '<' in \k<name>.','line_number':898,'multiline':False]['text':' Look up and patch the actual capture for each named back reference.','line_number':937,'multiline':False]['text':' Capture used to search the named_captures_ by name, index of the','line_number':942,'multiline':False]['text':' capture is never used.','line_number':943,'multiline':False]['text':' The index for the capture groups are one-based. Its index in the list is','line_number':963,'multiline':False]['text':' zero-based.','line_number':964,'multiline':False]['text':' namespace','line_number':987,'multiline':False]['text':' Named captures are sorted by name (because the set is used to ensure','line_number':994,'multiline':False]['text':' name uniqueness). But the capture name map must to be sorted by index.','line_number':995,'multiline':False]['text':' CSA code in ConstructNewResultFromMatchInfo requires these strings to be','line_number':1012,'multiline':False]['text':' internalized so they can be used as property names in the 'exec' results.','line_number':1013,'multiline':False]['text':' Return true if we found the matching capture index.','line_number':1038,'multiline':False]['text':' Abort if index is larger than what has been parsed up till this state.','line_number':1040,'multiline':False]['text':' QuantifierPrefix ::','line_number':1056,'multiline':False]['text':'   { DecimalDigits }','line_number':1057,'multiline':False]['text':'   { DecimalDigits , }','line_number':1058,'multiline':False]['text':'   { DecimalDigits , DecimalDigits }','line_number':1059,'multiline':False]['text':'','line_number':1060,'multiline':False]['text':' Returns true if parsing succeeds, and set the min_out and max_out','line_number':1061,'multiline':False]['text':' values. Values are truncated to RegExpTree::kInfinity if they overflow.','line_number':1062,'multiline':False]['text':' Overflow. Skip past remaining decimal digits and return -1.','line_number':1075,'multiline':False]['text':' For compatibility with some other browsers (not all), we parse','line_number':1125,'multiline':False]['text':' up to three octal digits with a value below 256.','line_number':1126,'multiline':False]['text':' ES#prod-annexB-LegacyOctalEscapeSequence','line_number':1127,'multiline':False]['text':' This parses RegExpUnicodeEscapeSequence as described in ECMA262.','line_number':1159,'multiline':False]['text':' Accept both \uxxxx and \u{xxxxxx} (if harmony unicode escapes are','line_number':1161,'multiline':False]['text':' allowed). In the latter case, the number of hex digits between { } is','line_number':1162,'multiline':False]['text':' arbitrary. \ and u have already been read.','line_number':1163,'multiline':False]['text':' \u but no {, or \u{...} escapes not allowed.','line_number':1176,'multiline':False]['text':' Attempt to read trail surrogate.','line_number':1180,'multiline':False]['text':' For the property Script_Extensions, we have to do the property value','line_number':1236,'multiline':False]['text':' name lookup as if the property is Script.','line_number':1237,'multiline':False]['text':' We require the property name to match exactly to one of the property value','line_number':1244,'multiline':False]['text':' aliases. However, u_getPropertyValueEnum uses loose matching.','line_number':1245,'multiline':False]['text':' Leave the list of character ranges empty, since the negation of 'Any'','line_number':1278,'multiline':False]['text':' is the empty set.','line_number':1279,'multiline':False]['text':' Explicitly allowlist supported binary properties. The spec forbids supporting','line_number':1296,'multiline':False]['text':' properties outside of this set to ensure interoperability.','line_number':1297,'multiline':False]['text':' 'Any' is not supported by ICU. See LookupSpecialPropertyValueName.','line_number':1301,'multiline':False]['text':' 'ASCII' is not supported by ICU. See LookupSpecialPropertyValueName.','line_number':1302,'multiline':False]['text':' 'Assigned' is not supported by ICU. See LookupSpecialPropertyValueName.','line_number':1304,'multiline':False]['text':' https://tc39.github.io/proposal-regexp-unicode-property-escapes/','line_number':1361,'multiline':False]['text':'','line_number':1362,'multiline':False]['text':' Note that using this to validate each parsed char is quite conservative.','line_number':1363,'multiline':False]['text':' A possible alternative solution would be to only ensure the parsed','line_number':1364,'multiline':False]['text':' property name/value candidate string does not contain '\0' characters and','line_number':1365,'multiline':False]['text':' let ICU lookups trigger the final failure.','line_number':1366,'multiline':False]['text':' anonymous namespace','line_number':1373,'multiline':False]['text':' Parse the property class as follows:','line_number':1379,'multiline':False]['text':' - In \p{name}, 'name' is interpreted','line_number':1380,'multiline':False]['text':'   - either as a general category property value name.','line_number':1381,'multiline':False]['text':'   - or as a binary property name.','line_number':1382,'multiline':False]['text':' - In \p{name=value}, 'name' is interpreted as an enumerated property name,','line_number':1383,'multiline':False]['text':'   and 'value' is interpreted as one of the available property value names.','line_number':1384,'multiline':False]['text':' - Aliases in PropertyAlias.txt and PropertyValueAlias.txt can be used.','line_number':1385,'multiline':False]['text':' - Loose matching is not applied.','line_number':1386,'multiline':False]['text':' Parse \p{[PropertyName=]PropertyNameValue}','line_number':1388,'multiline':False]['text':' null-terminate string.','line_number':1400,'multiline':False]['text':' null-terminate string.','line_number':1406,'multiline':False]['text':' First attempt to interpret as general category property value name.','line_number':1418,'multiline':False]['text':' Interpret "Any", "ASCII", and "Assigned".','line_number':1424,'multiline':False]['text':' Then attempt to interpret as binary property name with value name 'Y'.','line_number':1428,'multiline':False]['text':' Both property name and value name are specified. Attempt to interpret','line_number':1435,'multiline':False]['text':' the property name as enumerated property.','line_number':1436,'multiline':False]['text':' We want to allow aggregate value names such as "Letter".','line_number':1442,'multiline':False]['text':' TODO(yangguo): this creates huge regexp code. Alternative to this is','line_number':1466,'multiline':False]['text':' to create a new operator that checks for these sequences at runtime.','line_number':1467,'multiline':False]['text':' Iterate through list of sequences.','line_number':1469,'multiline':False]['text':' Iterate through sequence.','line_number':1470,'multiline':False]['text':' https://unicode.org/reports/tr51/#def_emoji_keycap_sequence','line_number':1482,'multiline':False]['text':' emoji_keycap_sequence := [0-9#*] \x{FE0F 20E3}','line_number':1483,'multiline':False]['text':' https://unicode.org/reports/tr51/#def_emoji_modifier_sequence','line_number':1496,'multiline':False]['text':' emoji_modifier_sequence := emoji_modifier_base emoji_modifier','line_number':1497,'multiline':False]['text':' V8_INTL_SUPPORT','line_number':1517,'multiline':False]['text':' V8_INTL_SUPPORT','line_number':1535,'multiline':False]['text':' ControlEscape :: one of','line_number':1564,'multiline':False]['text':'   f n r t v','line_number':1565,'multiline':False]['text':' Inside a character class, we also accept digits and underscore as','line_number':1584,'multiline':False]['text':' control characters, unless with /u. See Annex B:','line_number':1585,'multiline':False]['text':' ES#prod-annexB-ClassControlLetter','line_number':1586,'multiline':False]['text':' Control letters mapped to ASCII control characters in the range','line_number':1589,'multiline':False]['text':' 0x00-0x1F.','line_number':1590,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':1594,'multiline':False]['text':' We match JSC in reading the backslash as a literal','line_number':1603,'multiline':False]['text':' character instead of as starting an escape.','line_number':1604,'multiline':False]['text':' TODO(v8:6201): Not yet covered by the spec.','line_number':1605,'multiline':False]['text':' With /u, \0 is interpreted as NUL if not followed by another digit.','line_number':1609,'multiline':False]['text':' For compatibility, we interpret a decimal escape that isn't','line_number':1622,'multiline':False]['text':' a back reference (and therefore either \0 or not valid according','line_number':1623,'multiline':False]['text':' to the specification) as a 1..3 digit octal character code.','line_number':1624,'multiline':False]['text':' ES#prod-annexB-LegacyOctalEscapeSequence','line_number':1625,'multiline':False]['text':' With /u, decimal escape is not interpreted as octal character code.','line_number':1627,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':1637,'multiline':False]['text':' If \x is not followed by a two-digit hexadecimal, treat it','line_number':1641,'multiline':False]['text':' as an identity escape.','line_number':1642,'multiline':False]['text':' With /u, invalid escapes are not treated as identity escapes.','line_number':1650,'multiline':False]['text':' If \u is not followed by a two-digit hexadecimal, treat it','line_number':1654,'multiline':False]['text':' as an identity escape.','line_number':1655,'multiline':False]['text':' With /u, no identity escapes except for syntax characters and '-' are','line_number':1660,'multiline':False]['text':' allowed. Otherwise, all identity escapes are allowed.','line_number':1661,'multiline':False]['text':' If we reach the end we break out of the loop and let the','line_number':1741,'multiline':False]['text':' following code report an error.','line_number':1742,'multiline':False]['text':' Either end is an escaped character class. Treat the '-' verbatim.','line_number':1752,'multiline':False]['text':' ES2015 21.2.2.15.1 step 1.','line_number':1754,'multiline':False]['text':' ES2015 21.2.2.15.1 step 6.','line_number':1762,'multiline':False]['text':' Hold onto the lead surrogate, waiting for a trail surrogate to follow.','line_number':1853,'multiline':False]['text':' A lead or trail surrogate parsed via escape sequence will not','line_number':1952,'multiline':False]['text':' pair up with any preceding lead or following trail surrogate.','line_number':1953,'multiline':False]['text':' With /u, character class needs to be desugared, so it','line_number':1964,'multiline':False]['text':' must be a standalone term instead of being part of a RegExpText.','line_number':1965,'multiline':False]['text':' TODO(yangguo): we could be smarter than this. Case-insensitivity does not','line_number':2031,'multiline':False]['text':' necessarily mean that we need to desugar. It's probably nicer to have a','line_number':2032,'multiline':False]['text':' separate pass to figure out unicode desugarings.','line_number':2033,'multiline':False]['text':' Check for non-BMP characters.','line_number':2040,'multiline':False]['text':' Check for lone surrogates.','line_number':2042,'multiline':False]['text':' In the case where ICU is not included, we act as if the unicode flag is','line_number':2057,'multiline':False]['text':' not set, and do not desugar.','line_number':2058,'multiline':False]['text':' V8_INTL_SUPPORT','line_number':2059,'multiline':False]['text':' Last atom was character.','line_number':2082,'multiline':False]['text':' With /u, lookarounds are not quantifiable.','line_number':2101,'multiline':False]['text':' Lookbehinds are not quantifiable.','line_number':2103,'multiline':False]['text':' Guaranteed to only match an empty string.','line_number':2109,'multiline':False]['text':' Only call immediately after adding an atom or character!','line_number':2118,'multiline':False]['text':' namespace internal','line_number':2127,'multiline':False]['text':' namespace v8','line_number':2128,'multiline':False]