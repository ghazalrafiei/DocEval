['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' Copyright 2012 the V8 project authors. All rights reserved.','line_number':2,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':3,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':4,'multiline':False]['text':' met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':7,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':9,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':10,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':11,'multiline':False]['text':'       with the distribution.','line_number':12,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':13,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':14,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':17,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':18,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':19,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':20,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':21,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':23,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':24,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':25,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':26,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':27,'multiline':False]['text':' Run-time ABI for the ARM architecture specifies that for |INT_MIN / -1|','line_number':53,'multiline':False]['text':' "an implementation is (sic) may return any convenient value, possibly the','line_number':54,'multiline':False]['text':' original numerator."','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' |INT_MIN / -1| traps on x86, which isn't listed as an allowed behavior in','line_number':57,'multiline':False]['text':' the ARM docs, so instead follow LLVM and return the numerator. (And zero','line_number':58,'multiline':False]['text':' for the remainder.)','line_number':59,'multiline':False]['text':' For decoding load-exclusive and store-exclusive instructions.','line_number':80,'multiline':False]['text':' Bit positions.','line_number':83,'multiline':False]['text':' Hi bit of opcode field','line_number':85,'multiline':False]['text':' Lo bit of opcode field','line_number':86,'multiline':False]['text':' Hi bit of operand size field','line_number':87,'multiline':False]['text':' Lo bit of operand size field','line_number':88,'multiline':False]['text':' Bit indicating load','line_number':89,'multiline':False]['text':' Opcode bits for exclusive instructions.','line_number':92,'multiline':False]['text':' Operand size, Bits(ExclusiveSizeHi,ExclusiveSizeLo).','line_number':95,'multiline':False]['text':' namespace excl','line_number':103,'multiline':False]['text':' Load/store multiple addressing mode.','line_number':105,'multiline':False]['text':' Alias modes for comparison when writeback does not matter.','line_number':107,'multiline':False]['text':' Decrement after.','line_number':108,'multiline':False]['text':' Increment after.','line_number':109,'multiline':False]['text':' Decrement before.','line_number':110,'multiline':False]['text':' Increment before.','line_number':111,'multiline':False]['text':' Type of VFP register. Determines register encoding.','line_number':114,'multiline':False]['text':' Supervisor Call (svc) specific support.','line_number':119,'multiline':False]['text':' Special Software Interrupt codes when used in the presence of the ARM','line_number':121,'multiline':False]['text':' simulator.','line_number':122,'multiline':False]['text':' svc (formerly swi) provides a 24bit immediate value. Use bits 22:0 for','line_number':123,'multiline':False]['text':' standard SoftwareInterrupCode. Bit 23 is reserved for the stop feature.','line_number':124,'multiline':False]['text':' Transition to C code.','line_number':126,'multiline':False]['text':' Breakpoint.','line_number':127,'multiline':False]['text':' Stop.','line_number':128,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':134,'multiline':False]['text':' Instruction abstraction.','line_number':135,'multiline':False]['text':' The class Instruction enables access to individual fields defined in the ARM','line_number':137,'multiline':False]['text':' architecture instruction set encoding as described in figure A3-1.','line_number':138,'multiline':False]['text':' Note that the Assembler uses typedef int32_t Instr.','line_number':139,'multiline':False]['text':'','line_number':140,'multiline':False]['text':' Example: Test whether the instruction at ptr does set the condition code','line_number':141,'multiline':False]['text':' bits.','line_number':142,'multiline':False]['text':'','line_number':143,'multiline':False]['text':' bool InstructionSetsConditionCodes(byte* ptr) {','line_number':144,'multiline':False]['text':'   Instruction* instr = Instruction::At(ptr);','line_number':145,'multiline':False]['text':'   int type = instr->TypeValue();','line_number':146,'multiline':False]['text':'   return ((type == 0) || (type == 1)) && instr->hasS();','line_number':147,'multiline':False]['text':' }','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Get the raw instruction bits.','line_number':154,'multiline':False]['text':' Set the raw instruction bits to value.','line_number':159,'multiline':False]['text':' Read one particular bit out of the instruction bits.','line_number':164,'multiline':False]['text':' Read a bit field's value out of the instruction bits.','line_number':167,'multiline':False]['text':' Read a bit field out of the instruction bits.','line_number':172,'multiline':False]['text':' Accessors for the different named fields used in the ARM encoding.','line_number':177,'multiline':False]['text':' The naming of these accessor corresponds to figure A3-1.','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' Two kind of accessors are declared:','line_number':180,'multiline':False]['text':' - <Name>Field() will return the raw field, i.e. the field's bits at their','line_number':181,'multiline':False]['text':'   original place in the instruction encoding.','line_number':182,'multiline':False]['text':'   e.g. if instr is the 'addgt r0, r1, r2' instruction, encoded as','line_number':183,'multiline':False]['text':'   0xC0810002 conditionField(instr) will return 0xC0000000.','line_number':184,'multiline':False]['text':' - <Name>Value() will return the field value, shifted back to bit 0.','line_number':185,'multiline':False]['text':'   e.g. if instr is the 'addgt r0, r1, r2' instruction, encoded as','line_number':186,'multiline':False]['text':'   0xC0810002 conditionField(instr) will return 0xC.','line_number':187,'multiline':False]['text':' Generally applicable fields','line_number':189,'multiline':False]['text':' Support for VFP.','line_number':201,'multiline':False]['text':' Vn(19-16) | Vd(15-12) |  Vm(3-0)','line_number':202,'multiline':False]['text':' Fields used in Data processing instructions.','line_number':230,'multiline':False]['text':' With register.','line_number':237,'multiline':False]['text':' With immediate.','line_number':245,'multiline':False]['text':' Fields used in Load/Store instructions.','line_number':253,'multiline':False]['text':' With register uses same fields as Data processing instructions above with','line_number':260,'multiline':False]['text':' immediate.','line_number':261,'multiline':False]['text':' Multiple.','line_number':264,'multiline':False]['text':' Extra loads and stores.','line_number':267,'multiline':False]['text':' Fields used in Branch instructions.','line_number':273,'multiline':False]['text':' Fields used in Software interrupt instructions.','line_number':277,'multiline':False]['text':' Test for special encodings of type 0 instructions (extra loads and','line_number':282,'multiline':False]['text':' stores, as well as multiplications).','line_number':283,'multiline':False]['text':' Test for miscellaneous instructions encodings of type 0 instructions.','line_number':286,'multiline':False]['text':' Test for a nop instruction, which falls under type 1.','line_number':291,'multiline':False]['text':' Test for a nop instruction, which falls under type 1.','line_number':294,'multiline':False]['text':' Test for a stop instruction.','line_number':297,'multiline':False]['text':' Test for a udf instruction, which falls under type 3.','line_number':302,'multiline':False]['text':' Special accessors that test for existence of a value.','line_number':307,'multiline':False]['text':' Decoding the double immediate in the vmov instruction.','line_number':317,'multiline':False]['text':' Decoding the float32 immediate in the vmov.f32 instruction.','line_number':319,'multiline':False]['text':' Join split register codes, depending on single or double precision.','line_number':323,'multiline':False]['text':' four_bit is the position of the least-significant bit of the four','line_number':324,'multiline':False]['text':' bit specifier. one_bit is the position of the additional single bit','line_number':325,'multiline':False]['text':' specifier.','line_number':326,'multiline':False]['text':' Reconstruct a double from the immediate encoded in the vmov instruction.','line_number':340,'multiline':False]['text':'','line_number':341,'multiline':False]['text':'   instruction: [xxxxxxxx,xxxxabcd,xxxxxxxx,xxxxefgh]','line_number':342,'multiline':False]['text':'   double: [aBbbbbbb,bbcdefgh,00000000,00000000,','line_number':343,'multiline':False]['text':'            00000000,00000000,00000000,00000000]','line_number':344,'multiline':False]['text':'','line_number':345,'multiline':False]['text':' where B = ~b. Only the high 16 bits are affected.','line_number':346,'multiline':False]['text':' xxxxxxxx,xxcdefgh.','line_number':348,'multiline':False]['text':' xxbbbbbb,bbxxxxxx.','line_number':349,'multiline':False]['text':' xBxxxxxx,xxxxxxxx.','line_number':350,'multiline':False]['text':' axxxxxxx,xxxxxxxx.','line_number':351,'multiline':False]['text':' Reconstruct a float32 from the immediate encoded in the vmov instruction.','line_number':358,'multiline':False]['text':'','line_number':359,'multiline':False]['text':'   instruction: [xxxxxxxx,xxxxabcd,xxxxxxxx,xxxxefgh]','line_number':360,'multiline':False]['text':'   float32: [aBbbbbbc, defgh000, 00000000, 00000000]','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':' where B = ~b. Only the high 16 bits are affected.','line_number':363,'multiline':False]['text':' xxxxxxxc,defgh000.0.0','line_number':365,'multiline':False]['text':' xxbbbbbx,xxxxxxxx.0.0','line_number':366,'multiline':False]['text':' xBxxxxxx,xxxxxxxx.0.0','line_number':367,'multiline':False]['text':' axxxxxxx,xxxxxxxx.0.0','line_number':368,'multiline':False]['text':' The cache line is only 4 bytes right now.','line_number':380,'multiline':False]['text':' The cached data.','line_number':391,'multiline':False]['text':' One byte per line.','line_number':393,'multiline':False]['text':' Protects the icache() and redirection() properties of the','line_number':396,'multiline':False]['text':' Simulator.','line_number':397,'multiline':False]['text':' Checking is disabled by default.','line_number':408,'multiline':False]['text':' The ArmDebugger class is used by the simulator while debugging simulated ARM','line_number':461,'multiline':False]['text':' code.','line_number':462,'multiline':False]['text':' Set or delete a breakpoint. Returns true if successful.','line_number':483,'multiline':False]['text':' Undo and redo all breakpoints. This is needed to bracket disassembly and','line_number':487,'multiline':False]['text':' execution to skip past breakpoints when run from the debugger.','line_number':488,'multiline':False]['text':' Get the stop code.','line_number':494,'multiline':False]['text':' Retrieve the encoded address, which comes just after this stop.','line_number':496,'multiline':False]['text':' Update this stop description.','line_number':499,'multiline':False]['text':' Print the stop message and code if it is not the default code.','line_number':503,'multiline':False]['text':' Check if a breakpoint can be set. If not return without any side-effects.','line_number':558,'multiline':False]['text':' Set the breakpoint.','line_number':563,'multiline':False]['text':' Not setting the breakpoint instruction in the code itself. It will be set','line_number':566,'multiline':False]['text':' when the debugger shell continues.','line_number':567,'multiline':False]['text':' fgets got an error. Just give up.','line_number':602,'multiline':False]['text':' Since we read a new line we are done reading the line. This will','line_number':607,'multiline':False]['text':' exit the loop after copying this buffer into the result.','line_number':608,'multiline':False]['text':' Allocate the initial result and make room for the terminating','line_number':612,'multiline':False]['text':' '\0'.','line_number':613,'multiline':False]['text':' Allocate a new result with enough room for the new addition.','line_number':619,'multiline':False]['text':' Copy the existing input into the new array and set the new','line_number':625,'multiline':False]['text':' array as the result.','line_number':626,'multiline':False]['text':' Copy the newly read line into the result.','line_number':630,'multiline':False]['text':' Make sure to have a proper terminating character if reaching the limit.','line_number':655,'multiline':False]['text':' Undo all set breakpoints while running in the debugger shell. This will','line_number':660,'multiline':False]['text':' make them invisible to all commands.','line_number':661,'multiline':False]['text':' Ownership is transferred to sim_;','line_number':694,'multiline':False]['text':' Use sscanf to parse the individual parts of the command line. At the','line_number':698,'multiline':False]['text':' moment no command expects more than two parameters.','line_number':699,'multiline':False]['text':' Execute the one instruction we broke at with breakpoints','line_number':715,'multiline':False]['text':' disabled.','line_number':716,'multiline':False]['text':' Leave the debugger shell.','line_number':720,'multiline':False]['text':' "mem"','line_number':768,'multiline':False]['text':' The argument is an address or a register name.','line_number':805,'multiline':False]['text':' Disassemble 10 instructions at <arg1>.','line_number':809,'multiline':False]['text':' The argument is the number of instructions.','line_number':813,'multiline':False]['text':' Disassemble <arg1> instructions.','line_number':817,'multiline':False]['text':' Remove the current stop.','line_number':882,'multiline':False]['text':' Print information about all/the specified breakpoint(s).','line_number':890,'multiline':False]['text':' Enable all/the specified breakpoint(s).','line_number':903,'multiline':False]['text':' Disable all/the specified breakpoint(s).','line_number':914,'multiline':False]['text':' Add all the breakpoints back to stop execution and enter the debugger','line_number':983,'multiline':False]['text':' shell when hit.','line_number':984,'multiline':False]['text':' Flush from start up to and not including start + size.','line_number':1016,'multiline':False]['text':' static ','line_number':1052,'multiline':True]['text':' Check that the data in memory matches the contents of the I-cache.','line_number':1064,'multiline':False]['text':' Cache miss. Load memory into the cache.','line_number':1070,'multiline':False]['text':' static ','line_number':1091,'multiline':True]['text':' Set up simulator support first. Some of this information is needed to','line_number':1101,'multiline':False]['text':' setup the architecture state.','line_number':1102,'multiline':False]['text':' Note, allocation and anything that depends on allocated memory is','line_number':1104,'multiline':False]['text':' deferred until init(), in order to handle OOM properly.','line_number':1105,'multiline':False]['text':' Set up architecture state.','line_number':1118,'multiline':False]['text':' All registers are initialized to zero to start with.','line_number':1119,'multiline':False]['text':' The lr and pc are initialized to a known bad value that will cause an','line_number':1146,'multiline':False]['text':' access violation if the simulator ever tries to execute it.','line_number':1147,'multiline':False]['text':' Allocate 2MB for the stack. Note that we will only use 1MB, see below.','line_number':1158,'multiline':False]['text':' Leave a safety margin of 1MB to prevent overrunning the stack when','line_number':1165,'multiline':False]['text':' pushing values (total stack size is 2MB).','line_number':1166,'multiline':False]['text':' The sp is initialized to point to the bottom (high address) of the','line_number':1169,'multiline':False]['text':' allocated stack area. To be safe in potential stack underflows we leave','line_number':1170,'multiline':False]['text':' some buffer below.','line_number':1171,'multiline':False]['text':' When the generated code calls a VM function (masm.callWithABI) we need to','line_number':1177,'multiline':False]['text':' call that function instead of trying to execute it with the simulator','line_number':1178,'multiline':False]['text':' (because it's x86 code instead of arm code). We do that by redirecting the VM','line_number':1179,'multiline':False]['text':' call to a svc (Supervisor Call) instruction that is handled by the','line_number':1180,'multiline':False]['text':' simulator. We write the original destination of the jump just at a known','line_number':1181,'multiline':False]['text':' offset from the svc instruction so the simulator knows what to call.','line_number':1182,'multiline':False]['text':' sim's lock must already be held.','line_number':1186,'multiline':False]['text':' Note: we can't use js_new here because the constructor is private.','line_number':1216,'multiline':False]['text':' static ','line_number':1258,'multiline':True]['text':' Sets the register in the architecture state. It will also deal with updating','line_number':1265,'multiline':False]['text':' Simulator internal state for special registers such as PC.','line_number':1266,'multiline':False]['text':' Get the register from the architecture state. This function does handle the','line_number':1275,'multiline':False]['text':' special case of accessing the PC register.','line_number':1276,'multiline':False]['text':' Work around GCC bug: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43949','line_number':1279,'multiline':False]['text':' Read the bits from the unsigned integer register_[] array into the double','line_number':1287,'multiline':False]['text':' precision floating point value and return it.','line_number':1288,'multiline':False]['text':' Raw access to the PC register without the special adjustment when reading.','line_number':1356,'multiline':False]['text':' These forced-instantiations are for jsapi-tests. Evidently, nothing','line_number':1393,'multiline':False]['text':' requires these to be instantiated.','line_number':1394,'multiline':False]['text':' The return value is either in r0/r1 or d0.','line_number':1424,'multiline':False]['text':' Copy result to d0.','line_number':1428,'multiline':False]['text':' Copy result to r0 and r1.','line_number':1433,'multiline':False]['text':' Copy result to s0.','line_number':1442,'multiline':False]['text':' Copy result to r0.','line_number':1447,'multiline':False]['text':' See the comments below in readW.','line_number':1490,'multiline':False]['text':' See the comments below in readW.','line_number':1514,'multiline':False]['text':' In WebAssembly, we want unaligned accesses to either raise a signal or','line_number':1535,'multiline':False]['text':' do the right thing. Making this simulator properly emulate the behavior','line_number':1536,'multiline':False]['text':' of raising a signal is complex, so as a special-case, when in wasm code,','line_number':1537,'multiline':False]['text':' we just do the right thing.','line_number':1538,'multiline':False]['text':' See the comments above in readW.','line_number':1562,'multiline':False]['text':' For the time being, define Relaxed operations in terms of SeqCst','line_number':1573,'multiline':False]['text':' operations - we don't yet need Relaxed operations anywhere else in','line_number':1574,'multiline':False]['text':' the system, and the distinction is not important to the simulation','line_number':1575,'multiline':False]['text':' at the level where we're operating.','line_number':1576,'multiline':False]['text':' The regexp engine emits unaligned loads, so we don't check for them here','line_number':1629,'multiline':False]['text':' like most of the other methods do.','line_number':1630,'multiline':False]['text':' See comments above in readW.','line_number':1636,'multiline':False]['text':' See comments above in readW.','line_number':1659,'multiline':False]['text':' See the comments above in readW.','line_number':1683,'multiline':False]['text':' See the comments above in readW.','line_number':1705,'multiline':False]['text':' The spec says that the low part of value shall be read from addr and','line_number':1858,'multiline':False]['text':' the high part shall be read from addr+4.  On a little-endian system','line_number':1859,'multiline':False]['text':' where we read a 64-bit quadword the low part of the value will be in','line_number':1860,'multiline':False]['text':' the low part of the quadword, and the high part of the value in the','line_number':1861,'multiline':False]['text':' high part of the quadword.','line_number':1862,'multiline':False]['text':' The spec says that value1 shall be stored at addr and value2 at','line_number':1880,'multiline':False]['text':' addr+4.  On a little-endian system that means constructing a 64-bit','line_number':1881,'multiline':False]['text':' value where value1 is in the low half of a 64-bit quadword and value2','line_number':1882,'multiline':False]['text':' is in the high half of the quadword.','line_number':1883,'multiline':False]['text':' Checks if the current instruction should be executed based on its condition','line_number':1910,'multiline':False]['text':' bits.','line_number':1911,'multiline':False]['text':' Calculate and set the Negative and Zero flags.','line_number':1950,'multiline':False]['text':' Set the Carry flag.','line_number':1956,'multiline':False]['text':' Set the oVerflow flag.','line_number':1959,'multiline':False]['text':' Calculate C flag value for additions.','line_number':1962,'multiline':False]['text':' Calculate C flag value for subtractions.','line_number':1971,'multiline':False]['text':' Calculate V flag value for additions and subtractions.','line_number':1978,'multiline':False]['text':' Operands have the same sign.','line_number':1983,'multiline':False]['text':' And operands and result have different sign.','line_number':1985,'multiline':False]['text':' Operands have different signs.','line_number':1988,'multiline':False]['text':' And first operand and result have different signs.','line_number':1990,'multiline':False]['text':' Support for VFP comparisons.','line_number':1996,'multiline':False]['text':' All non-NaN cases.','line_number':2003,'multiline':False]['text':' Case when (val1 > val2).','line_number':2015,'multiline':False]['text':' Addressing Mode 1 - Data-processing operands:','line_number':2030,'multiline':False]['text':' Get the value based on the shifter_operand with register.','line_number':2031,'multiline':False]['text':' By immediate.','line_number':2037,'multiline':False]['text':' By register.','line_number':2104,'multiline':False]['text':' Addressing Mode 1 - Data-processing operands:','line_number':2184,'multiline':False]['text':' Get the value based on the shifter_operand with immediate.','line_number':2185,'multiline':False]['text':' Addressing Mode 4 - Load and Store Multiple','line_number':2223,'multiline':False]['text':' Catch null pointers a little earlier.','line_number':2234,'multiline':False]['text':' Addressing Mode 6 - Load and Store Multiple Coprocessor registers.','line_number':2256,'multiline':False]['text':' Note: With the code below we assume that all runtime calls return a 64 bits','line_number':2312,'multiline':False]['text':' result. If they don't, the r1 result register contains a bogus value, which','line_number':2313,'multiline':False]['text':' is fine because it is caller-saved.','line_number':2314,'multiline':False]['text':' Fill the volatile registers with scratch values.','line_number':2400,'multiline':False]['text':'','line_number':2401,'multiline':False]['text':' Some of the ABI calls assume that the float registers are not scratched,','line_number':2402,'multiline':False]['text':' even though the ABI defines them as volatile - a performance','line_number':2403,'multiline':False]['text':' optimization. These are all calls passing operands in integer registers,','line_number':2404,'multiline':False]['text':' so for now the simulator does not scratch any float registers for these','line_number':2405,'multiline':False]['text':' calls. Should try to narrow it further in future.','line_number':2406,'multiline':False]['text':'','line_number':2407,'multiline':False]['text':' Intra-Procedure-call scratch register.','line_number':2414,'multiline':False]['text':' Link register.','line_number':2415,'multiline':False]['text':' Little-endian order.','line_number':2430,'multiline':False]['text':' Software interrupt instructions are used by the simulator to call into C++.','line_number':2434,'multiline':False]['text':' scratchFloat = true ','line_number':2467,'multiline':True]['text':' scratchFloat = true ','line_number':2475,'multiline':True]['text':' The ARM backend makes calls to __aeabi_idivmod and','line_number':2483,'multiline':False]['text':' __aeabi_uidivmod assuming that the float registers are','line_number':2484,'multiline':False]['text':' non-volatile as a performance optimization, so the float','line_number':2485,'multiline':False]['text':' registers must not be scratch when calling these.','line_number':2486,'multiline':False]['text':' scratchFloat = ','line_number':2489,'multiline':True]['text':' scratchFloat = true','line_number':2497,'multiline':True]['text':' scratchFloat = true','line_number':2505,'multiline':True]['text':' scratchFloat = true ','line_number':2513,'multiline':True]['text':' scratchFloat = true ','line_number':2521,'multiline':True]['text':' scratchFloat = true ','line_number':2530,'multiline':True]['text':' scratchFloat = true ','line_number':2541,'multiline':True]['text':' The int64 arg is not split across register and stack','line_number':2548,'multiline':False]['text':' scratchFloat = true ','line_number':2550,'multiline':True]['text':' scratchFloat = true ','line_number':2559,'multiline':True]['text':' scratchFloat = true ','line_number':2570,'multiline':True]['text':' scratchFloat = true ','line_number':2578,'multiline':True]['text':' scratchFloat = true ','line_number':2589,'multiline':True]['text':' scratchFloat = true ','line_number':2602,'multiline':True]['text':' scratchFloat = true ','line_number':2613,'multiline':True]['text':' scratchFloat = true ','line_number':2627,'multiline':True]['text':' scratchFloat = true ','line_number':2643,'multiline':True]['text':' scratchFloat = true ','line_number':2651,'multiline':True]['text':' scratchFloat = true ','line_number':2659,'multiline':True]['text':' scratchFloat = true ','line_number':2667,'multiline':True]['text':' scratchFloat = true ','line_number':2678,'multiline':True]['text':' scratchFloat = true ','line_number':2689,'multiline':True]['text':' scratchFloat = true ','line_number':2704,'multiline':True]['text':' scratchFloat = true ','line_number':2719,'multiline':True]['text':' scratchFloat = true ','line_number':2735,'multiline':True]['text':' scratchFloat = true ','line_number':2751,'multiline':True]['text':' scratchFloat = true ','line_number':2767,'multiline':True]['text':' the last argument is on stack','line_number':2775,'multiline':False]['text':' scratchFloat = true ','line_number':2780,'multiline':True]['text':' the two last arguments are on stack','line_number':2788,'multiline':False]['text':' scratchFloat = true ','line_number':2795,'multiline':True]['text':' scratchFloat = true ','line_number':2804,'multiline':True]['text':' scratchFloat = true ','line_number':2812,'multiline':True]['text':' scratchFloat = true ','line_number':2820,'multiline':True]['text':' scratchFloat = true ','line_number':2829,'multiline':True]['text':' scratchFloat = true ','line_number':2838,'multiline':True]['text':' scratchFloat = true ','line_number':2847,'multiline':True]['text':' scratchFloat = true ','line_number':2856,'multiline':True]['text':' scratchFloat = true ','line_number':2865,'multiline':True]['text':' scratchFloat = true ','line_number':2875,'multiline':True]['text':' scratchFloat = true ','line_number':2884,'multiline':True]['text':' scratchFloat = true ','line_number':2893,'multiline':True]['text':' scratchFloat = true ','line_number':2901,'multiline':True]['text':' scratchFloat = true ','line_number':2909,'multiline':True]['text':' scratchFloat = true ','line_number':2918,'multiline':True]['text':' scratchFloat = true ','line_number':2926,'multiline':True]['text':' scratchFloat = true ','line_number':2934,'multiline':True]['text':' scratchFloat = true ','line_number':2942,'multiline':True]['text':' Stop uses all codes greater than 1 << 23.','line_number':2964,'multiline':False]['text':' Stop if it is enabled, otherwise go on jumping over the stop and','line_number':2971,'multiline':False]['text':' the message address.','line_number':2972,'multiline':False]['text':' This is not a valid svc code.','line_number':2980,'multiline':False]['text':' Stop helper functions.','line_number':3002,'multiline':False]['text':' Unwatched stops are always enabled.','line_number':3014,'multiline':False]['text':' Print a stop status.','line_number':3048,'multiline':False]['text':' Don't print the state of unused breakpoints.','line_number':3056,'multiline':False]['text':' Instruction types 0 and 1 are both rolled into one function because they only','line_number':3069,'multiline':False]['text':' differ in the handling of the shifter_operand.','line_number':3070,'multiline':False]['text':' Multiply instruction or extra loads and stores.','line_number':3074,'multiline':False]['text':' Raw field decoding here. Multiply instructions have their Rd','line_number':3077,'multiline':False]['text':' in funny places.','line_number':3078,'multiline':False]['text':' The MUL instruction description (A 4.1.33) refers to','line_number':3086,'multiline':False]['text':' Rd as being the destination for the operation, but it','line_number':3087,'multiline':False]['text':' confusingly uses the Rn field to encode it.','line_number':3088,'multiline':False]['text':' Remap the rn field to the Rd register.','line_number':3089,'multiline':False]['text':' The MLA instruction description (A 4.1.28) refers','line_number':3099,'multiline':False]['text':' to the order of registers as "Rd, Rm, Rs,','line_number':3100,'multiline':False]['text':' Rn". But confusingly it uses the Rn field to','line_number':3101,'multiline':False]['text':' encode the Rd register and the Rd field to encode','line_number':3102,'multiline':False]['text':' the Rn register.','line_number':3103,'multiline':False]['text':' The signed/long multiply instructions use the terms RdHi','line_number':3114,'multiline':False]['text':' and RdLo when referring to the target registers. They are','line_number':3115,'multiline':False]['text':' mapped to the Rn and Rd fields as follows:','line_number':3116,'multiline':False]['text':' RdLo == Rd','line_number':3117,'multiline':False]['text':' RdHi == Rn (This is confusingly stored in variable rd here','line_number':3118,'multiline':False]['text':'             because the mul instruction from above uses the','line_number':3119,'multiline':False]['text':'             Rn field to encode the Rd register. Good luck figuring','line_number':3120,'multiline':False]['text':'             this out without reading the ARM instruction manual','line_number':3121,'multiline':False]['text':'             at a very detailed level.)','line_number':3122,'multiline':False]['text':' Remap the rn field to the RdHi register.','line_number':3123,'multiline':False]['text':' Unsigned multiply.','line_number':3134,'multiline':False]['text':' Load-exclusive / store-exclusive.','line_number':3150,'multiline':False]['text':' Not used atm','line_number':3201,'multiline':False]['text':' Extra load/store instructions.','line_number':3205,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':3241,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':3275,'multiline':False]['text':' The strd instruction.','line_number':3283,'multiline':False]['text':' The ldrd instruction.','line_number':3288,'multiline':False]['text':' Signed byte loads.','line_number':3313,'multiline':False]['text':' mrs','line_number':3324,'multiline':False]['text':' CPSR. Note: The Q flag is not yet implemented!','line_number':3328,'multiline':False]['text':' SPSR','line_number':3332,'multiline':False]['text':' msr','line_number':3337,'multiline':False]['text':' Register operand. For now we only emit mask 0b1100.','line_number':3339,'multiline':False]['text':' BX','line_number':3356,'multiline':False]['text':' BLX','line_number':3359,'multiline':False]['text':' BKPT','line_number':3365,'multiline':False]['text':' CLZ','line_number':3384,'multiline':False]['text':' NOP.','line_number':3404,'multiline':False]['text':' Speculation barrier. (No-op for the simulator)','line_number':3406,'multiline':False]['text':' Other instructions matching this pattern are handled in the','line_number':3503,'multiline':False]['text':' miscellaneous instructions part above.','line_number':3504,'multiline':False]['text':' Other instructions matching this pattern are handled in the','line_number':3527,'multiline':False]['text':' miscellaneous instructions part above.','line_number':3528,'multiline':False]['text':' Memop.','line_number':3661,'multiline':False]['text':' Pkhbt.','line_number':3668,'multiline':False]['text':' Pkhtb.','line_number':3675,'multiline':False]['text':' Usat.','line_number':3696,'multiline':False]['text':' LSL','line_number':3702,'multiline':False]['text':' ASR','line_number':3704,'multiline':False]['text':' If saturation occurs, the Q flag should be set in the','line_number':3708,'multiline':False]['text':' CPSR. There is no Q flag yet, and no instruction (MRS)','line_number':3709,'multiline':False]['text':' to read the CPSR directly.','line_number':3710,'multiline':False]['text':' Sxth.','line_number':3730,'multiline':False]['text':' Sxtb.','line_number':3733,'multiline':False]['text':' Rev','line_number':3738,'multiline':False]['text':' Rev16','line_number':3746,'multiline':False]['text':' Uxtb16.','line_number':3762,'multiline':False]['text':' Uxtb.','line_number':3776,'multiline':False]['text':' Uxtab.','line_number':3781,'multiline':False]['text':' Uxth.','line_number':3789,'multiline':False]['text':' Uxtah.','line_number':3794,'multiline':False]['text':' Revsh','line_number':3802,'multiline':False]['text':' sudiv','line_number':3819,'multiline':False]['text':' sdiv (in V8 notation matching ARM ISA format) rn = rm/rs.','line_number':3823,'multiline':False]['text':' udiv (in V8 notation matching ARM ISA format) rn = rm/rs.','line_number':3838,'multiline':False]['text':' ubfx - unsigned bitfield extract.','line_number':3864,'multiline':False]['text':' sbfx - signed bitfield extract.','line_number':3871,'multiline':False]['text':' bfc or bfi - bitfield clear/insert.','line_number':3885,'multiline':False]['text':' bfi - bitfield insert.','line_number':3892,'multiline':False]['text':' Only allowed to be set in privileged mode.','line_number':3933,'multiline':False]['text':' MCR, MCR2','line_number':3965,'multiline':False]['text':' ARMv6 DSB instruction.  We do not use DSB.','line_number':3972,'multiline':False]['text':' ARMv6 DMB instruction.','line_number':3975,'multiline':False]['text':' ARMv6 ISB instruction.  We do not use ISB.','line_number':3978,'multiline':False]['text':' MRC, MRC2','line_number':3987,'multiline':False]['text':' Obtain double precision register codes.','line_number':3996,'multiline':False]['text':' Other data processing instructions.','line_number':4005,'multiline':False]['text':' vmov register to register.','line_number':4007,'multiline':False]['text':' vabs','line_number':4022,'multiline':False]['text':' vneg','line_number':4045,'multiline':False]['text':' vcvt.f64.s32 Dd, Dd, #<fbits>.','line_number':4065,'multiline':False]['text':' vsqrt','line_number':4077,'multiline':False]['text':' vmov immediate.','line_number':4092,'multiline':False]['text':' vmov.f32 immediate.','line_number':4096,'multiline':False]['text':' vsub','line_number':4105,'multiline':False]['text':' vadd','line_number':4114,'multiline':False]['text':' vsub','line_number':4125,'multiline':False]['text':' vadd','line_number':4134,'multiline':False]['text':' vmul','line_number':4145,'multiline':False]['text':' vmla, vmls','line_number':4164,'multiline':False]['text':' Note: we do the mul and add/sub in separate steps to avoid','line_number':4178,'multiline':False]['text':' getting a result with too high precision.','line_number':4179,'multiline':False]['text':' vdiv','line_number':4191,'multiline':False]['text':' vmov (ARM core register to scalar).','line_number':4219,'multiline':False]['text':' vmov (scalar to ARM core register).','line_number':4230,'multiline':False]['text':' vmrs','line_number':4239,'multiline':False]['text':' Emulate FPSCR from the Simulator flags.','line_number':4244,'multiline':False]['text':' vmsr','line_number':4255,'multiline':False]['text':' Comparison.','line_number':4301,'multiline':False]['text':' Raise exceptions for quiet NaNs if necessary.','line_number':4322,'multiline':False]['text':' Raise exceptions for quiet NaNs if necessary.','line_number':4337,'multiline':False]['text':' Check for NaN.','line_number':4379,'multiline':False]['text':' Check for overflow. This code works because 32bit integers can be exactly','line_number':4384,'multiline':False]['text':' represented by ieee-754 64bit floating-point values.','line_number':4385,'multiline':False]['text':' We call this function only if we had a vfp invalid exception.','line_number':4402,'multiline':False]['text':' It returns the correct saturated value.','line_number':4403,'multiline':False]['text':' NaN.','line_number':4405,'multiline':False]['text':' Conversion between floating-point and integer.','line_number':4422,'multiline':False]['text':' We are playing with code close to the C++ standard's limits below,','line_number':4429,'multiline':False]['text':' hence the very simple code and heavy checks.','line_number':4430,'multiline':False]['text':'','line_number':4431,'multiline':False]['text':' Note: C++ defines default type casting from floating point to integer','line_number':4432,'multiline':False]['text':' as (close to) rounding toward zero ("fractional part discarded").','line_number':4433,'multiline':False]['text':' Bit 7 in vcvt instructions indicates if we should use the FPSCR','line_number':4438,'multiline':False]['text':' rounding mode or the default Round to Zero mode.','line_number':4439,'multiline':False]['text':' Round to even if exactly halfway.','line_number':4475,'multiline':False]['text':' Nothing to do.','line_number':4486,'multiline':False]['text':' Update the destination register.','line_number':4494,'multiline':False]['text':' A VFPv3 specific instruction.','line_number':4521,'multiline':False]['text':' Only handling size == 32 for now.','line_number':4534,'multiline':False]['text':' Conversion between floating-point and integer.','line_number':4536,'multiline':False]['text':' We are playing with code close to the C++ standard's limits below,','line_number':4543,'multiline':False]['text':' hence the very simple code and heavy checks.','line_number':4544,'multiline':False]['text':'','line_number':4545,'multiline':False]['text':' Note: C++ defines default type casting from floating point to integer','line_number':4546,'multiline':False]['text':' as (close to) rounding toward zero ("fractional part discarded").','line_number':4547,'multiline':False]['text':' Scale value by specified number of fraction bits.','line_number':4563,'multiline':False]['text':' Rounding down towards zero. No need to account for the rounding error','line_number':4566,'multiline':False]['text':' as this instruction always rounds down towards zero. See SimRZ below.','line_number':4567,'multiline':False]['text':' Update the destination register.','line_number':4583,'multiline':False]['text':' Not implemented, fixed to float.','line_number':4593,'multiline':False]['text':' Load and store single precision float to memory.','line_number':4605,'multiline':False]['text':' Load double from memory: vldr.','line_number':4615,'multiline':False]['text':' Store double to memory: vstr.','line_number':4618,'multiline':False]['text':' Load/store multiple single from memory: vldm/vstm.','line_number':4629,'multiline':False]['text':' Load and store double to two GP registers','line_number':4638,'multiline':False]['text':' Not used atm.','line_number':4640,'multiline':False]['text':' Load and store double to memory.','line_number':4663,'multiline':False]['text':' Load double from memory: vldr.','line_number':4672,'multiline':False]['text':' Store double to memory: vstr.','line_number':4678,'multiline':False]['text':' Load/store multiple double from memory: vldm/vstm.','line_number':4693,'multiline':False]['text':' vmovl signed','line_number':4709,'multiline':False]['text':' vmovl unsigned.','line_number':4737,'multiline':False]['text':' vst1','line_number':4764,'multiline':False]['text':' TODO: We should AllowUnaligned here only if the alignment attribute','line_number':4792,'multiline':False]['text':' of the instruction calls for default alignment.','line_number':4793,'multiline':False]['text':'','line_number':4794,'multiline':False]['text':' Use writeQ to get handling of traps right.  (The spec says to','line_number':4795,'multiline':False]['text':' perform two individual word writes, but let's not worry about','line_number':4796,'multiline':False]['text':' that.)','line_number':4797,'multiline':False]['text':' vld1','line_number':4811,'multiline':False]['text':' TODO: We should AllowUnaligned here only if the alignment attribute','line_number':4838,'multiline':False]['text':' of the instruction calls for default alignment.','line_number':4839,'multiline':False]['text':'','line_number':4840,'multiline':False]['text':' Use readQ to get handling of traps right.  (The spec says to','line_number':4841,'multiline':False]['text':' perform two individual word reads, but let's not worry about that.)','line_number':4842,'multiline':False]['text':' vst1 single element from one lane','line_number':4885,'multiline':False]['text':' vld1 single element to one lane','line_number':4889,'multiline':False]['text':' CLREX','line_number':4911,'multiline':False]['text':' DMB','line_number':4914,'multiline':False]['text':' DSB','line_number':4917,'multiline':False]['text':' We do not use DSB.','line_number':4918,'multiline':False]['text':' ISB','line_number':4920,'multiline':False]['text':' We do not use ISB.','line_number':4921,'multiline':False]['text':' pld: ignore instruction.','line_number':4932,'multiline':False]['text':' MCR, MCR2, MRC, MRC2 with cond == 15','line_number':4940,'multiline':False]['text':' Executes the current instruction.','line_number':4951,'multiline':False]['text':' If the instruction is a non taken conditional stop, we need to skip','line_number':4991,'multiline':False]['text':' the inlined message address.','line_number':4992,'multiline':False]['text':' Get the PC to simulate. Cannot use the accessor here as we need the raw','line_number':5025,'multiline':False]['text':' PC value and not the one used as input to arithmetic instructions.','line_number':5026,'multiline':False]['text':' Prepare to execute the code at entry.','line_number':5053,'multiline':False]['text':' Put down marker for end of simulation. The simulator will stop simulation','line_number':5056,'multiline':False]['text':' when the PC reaches this value. By saving the "end simulation" value into','line_number':5057,'multiline':False]['text':' the LR the simulation stops when returning to this call point.','line_number':5058,'multiline':False]['text':' Remember the values of callee-saved registers. The code below assumes','line_number':5061,'multiline':False]['text':' that r9 is not used as sb (static base) in simulator code and therefore','line_number':5062,'multiline':False]['text':' is regarded as a callee-saved register.','line_number':5063,'multiline':False]['text':' Remember d8 to d15 which are callee-saved.','line_number':5073,'multiline':False]['text':' Set up the callee-saved registers with a known value. To be able to check','line_number':5091,'multiline':False]['text':' that they are preserved properly across JS execution.','line_number':5092,'multiline':False]['text':' Start the simulation.','line_number':5115,'multiline':False]['text':' Check that the callee-saved registers have been preserved.','line_number':5123,'multiline':False]['text':' Restore callee-saved registers with the original value.','line_number':5151,'multiline':False]['text':' First four arguments passed in registers.','line_number':5176,'multiline':False]['text':' Remaining arguments passed on stack.','line_number':5190,'multiline':False]['text':' Store remaining arguments on stack, from low to high memory.','line_number':5199,'multiline':False]['text':' Pop stack passed arguments.','line_number':5209,'multiline':False]['text':' namespace jit','line_number':5223,'multiline':False]['text':' namespace js','line_number':5224,'multiline':False]