['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Allow implicit conversion from char16_t* to UnicodeString for this file:','line_number':8,'multiline':False]['text':' Helpful in toString methods and elsewhere.','line_number':9,'multiline':False]['text':' Helper function for 2-dimensional switch statement','line_number':25,'multiline':False]['text':'noFallback','line_number':40,'multiline':True]['text':' have already seen this pattern','line_number':46,'multiline':False]['text':' have already seen this pattern','line_number':51,'multiline':False]['text':' Fall back to latn if necessary','line_number':102,'multiline':False]['text':' namespace','line_number':110,'multiline':False]['text':' TODO: Get locale from PluralRules instead?','line_number':133,'multiline':False]['text':' If any of the affixes are different, an identity is not possible','line_number':155,'multiline':False]['text':' and we must use formatRange().','line_number':156,'multiline':False]['text':' TODO: Write this as MicroProps operator==() ?','line_number':157,'multiline':False]['text':' TODO: Avoid the redundancy of these equality operations with the','line_number':158,'multiline':False]['text':' ones in formatRange?','line_number':159,'multiline':False]['text':' Check for identity','line_number':168,'multiline':False]['text':' HEURISTIC: Desired modifier order: inner, middle, approximately, outer.','line_number':236,'multiline':False]['text':' modInner is always notation (scientific); collapsable in ALL.','line_number':252,'multiline':False]['text':' modOuter is always units; collapsable in ALL, AUTO, and UNIT.','line_number':253,'multiline':False]['text':' modMiddle could be either; collapsable in ALL and sometimes AUTO and UNIT.','line_number':254,'multiline':False]['text':' Never collapse an outer mod but not an inner mod.','line_number':255,'multiline':False]['text':' OUTER MODIFIER','line_number':262,'multiline':False]['text':' Never collapse inner mods if outer mods are not collapsable','line_number':266,'multiline':False]['text':' MIDDLE MODIFIER','line_number':272,'multiline':False]['text':' Never collapse inner mods if outer mods are not collapsable','line_number':276,'multiline':False]['text':' MIDDLE MODIFIER HEURISTICS','line_number':281,'multiline':False]['text':' (could disable collapsing of the middle modifier)','line_number':282,'multiline':False]['text':' The modifiers are equal by this point, so we can look at just one of them.','line_number':283,'multiline':False]['text':' Only collapse if the modifier is a unit.','line_number':286,'multiline':False]['text':' TODO: Make a better way to check for a unit?','line_number':287,'multiline':False]['text':' TODO: Handle case where the modifier has both notation and unit (compact currency)?','line_number':288,'multiline':False]['text':' Heuristic as of ICU 63: collapse only if the modifier is more than one code point.','line_number':294,'multiline':False]['text':' INNER MODIFIER','line_number':305,'multiline':False]['text':' All done checking for collapsibility.','line_number':308,'multiline':False]['text':' Use #define so that these are evaluated at the call site.','line_number':326,'multiline':False]['text':' SPACING HEURISTIC','line_number':345,'multiline':False]['text':' Add spacing unless all modifiers are collapsed.','line_number':346,'multiline':False]['text':' TODO: add API to control this?','line_number':347,'multiline':False]['text':' TODO: Use a data-driven heuristic like currency spacing?','line_number':348,'multiline':False]['text':' TODO: Use Unicode [:whitespace:] instead of PatternProps whitespace? (consider speed implications)','line_number':349,'multiline':False]['text':' Add spacing if there is not already spacing','line_number':355,'multiline':False]['text':' TODO: Support padding?','line_number':368,'multiline':False]['text':' Now that all pieces are added, save the span info.','line_number':400,'multiline':False]['text':' No plural form; return a fallback (e.g., the first)','line_number':411,'multiline':False]['text':' No plural form; return a fallback (e.g., the first)','line_number':418,'multiline':False]['text':' Get the required plural form from data','line_number':423,'multiline':False]['text':' Get and return the new Modifier','line_number':426,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':434,'multiline':True]