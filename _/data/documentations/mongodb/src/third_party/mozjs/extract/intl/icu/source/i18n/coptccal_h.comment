['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2003 - 2013, International Business Machines Corporation and  *
* others. All Rights Reserved.                                                *
*******************************************************************************
','line_number':3,'multiline':True]['text':'*
 * Implement the Coptic calendar system.
 * @internal
 ','line_number':22,'multiline':True]['text':'*
     * Useful constants for CopticCalendar.
     * @internal
     ','line_number':29,'multiline':True]['text':'* 
         * Constant for &#x03c9;&#x03bf;&#x03b3;&#x03c4;/&#x062a;&#xfeee;&#xfe97;,
         * the 1st month of the Coptic year. 
         ','line_number':34,'multiline':True]['text':'* 
         * Constant for &#x03a0;&#x03b1;&#x03bf;&#x03c0;&#x03b9;/&#xfeea;&#xfe91;&#xfe8e;&#xfe91;,
         * the 2nd month of the Coptic year. 
         ','line_number':40,'multiline':True]['text':'* 
         * Constant for &#x0391;&#x03b8;&#x03bf;&#x03c1;/&#x0631;&#xfeee;&#xfe97;&#xfe8e;&#xfeeb;,
         * the 3rd month of the Coptic year. 
         ','line_number':46,'multiline':True]['text':'* 
         * Constant for &#x03a7;&#x03bf;&#x03b9;&#x03b1;&#x03ba;/&#xfeda;&#xfeec;&#xfef4;&#xfedb;,
         * the 4th month of the Coptic year. 
         ','line_number':52,'multiline':True]['text':'* 
         * Constant for &#x03a4;&#x03c9;&#x03b2;&#x03b9;/&#x0637;&#xfeee;&#xfe92;&#xfeeb;,
         * the 5th month of the Coptic year. 
         ','line_number':58,'multiline':True]['text':'* 
         * Constant for &#x039c;&#x03b5;&#x03e3;&#x03b9;&#x03c1;/&#xfeae;&#xfef4;&#xfeb8;&#xfee3;&#x0623;,
         * the 6th month of the Coptic year. 
         ','line_number':64,'multiline':True]['text':'* 
         * Constant for &#x03a0;&#x03b1;&#x03c1;&#x03b5;&#x03bc;&#x03e9;&#x03b1;&#x03c4;/&#x062a;&#xfe8e;&#xfeec;&#xfee3;&#xfeae;&#xfe91;,
         * the 7th month of the Coptic year. 
         ','line_number':70,'multiline':True]['text':'* 
         * Constant for &#x03a6;&#x03b1;&#x03c1;&#x03bc;&#x03bf;&#x03b8;&#x03b9;/&#x0647;&#x062f;&#xfeee;&#xfee3;&#xfeae;&#xfe91;, 
         * the 8th month of the Coptic year. 
         ','line_number':76,'multiline':True]['text':'* 
         * Constant for &#x03a0;&#x03b1;&#x03e3;&#x03b1;&#x03bd;/&#xfeb2;&#xfee8;&#xfeb8;&#xfe91;,
         * the 9th month of the Coptic year. 
         ','line_number':82,'multiline':True]['text':'* 
         * Constant for &#x03a0;&#x03b1;&#x03c9;&#x03bd;&#x03b9;/&#xfeea;&#xfee7;&#x0624;&#xfeee;&#xfe91;,
         * the 10th month of the Coptic year. 
         ','line_number':88,'multiline':True]['text':'* 
         * Constant for &#x0395;&#x03c0;&#x03b7;&#x03c0;/&#xfe90;&#xfef4;&#xfe91;&#x0623;,
         * the 11th month of the Coptic year. 
         ','line_number':94,'multiline':True]['text':'* 
         * Constant for &#x039c;&#x03b5;&#x03f2;&#x03c9;&#x03c1;&#x03b7;/&#x0649;&#xfeae;&#xfeb4;&#xfee3;,
         * the 12th month of the Coptic year. 
         ','line_number':100,'multiline':True]['text':'* 
         * Constant for &#x03a0;&#x03b9;&#x03ba;&#x03bf;&#x03b3;&#x03eb;&#x03b9;
         * &#x03bc;&#x03b1;&#x03b2;&#x03bf;&#x03c4;/&#xfeae;&#xfef4;&#xfed0;&#xfebc;&#xfedf;&#x0627;
         * &#xfeae;&#xfeec;&#xfeb8;&#xfedf;&#x0627;,
         * the 13th month of the Coptic year. 
         ','line_number':106,'multiline':True]['text':' Before the epoch','line_number':116,'multiline':False]['text':' After the epoch','line_number':117,'multiline':False]['text':'*
     * Constructs a CopticCalendar based on the current time in the default time zone
     * with the given locale.
     *
     * @param aLocale  The given locale.
     * @param success  Indicates the status of CopticCalendar object construction.
     *                 Returns U_ZERO_ERROR if constructed successfully.
     * @internal
     ','line_number':120,'multiline':True]['text':'*
     * Copy Constructor
     * @internal
     ','line_number':131,'multiline':True]['text':'*
     * Destructor.
     * @internal
     ','line_number':137,'multiline':True]['text':'*
     * Create and return a polymorphic copy of this calendar.
     * @return    return a polymorphic copy of this calendar.
     * @internal
     ','line_number':143,'multiline':True]['text':'*
     * return the calendar type, "coptic"
     * @return calendar type
     * @internal
     ','line_number':150,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':158,'multiline':False]['text':' Calendar framework','line_number':159,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':160,'multiline':False]['text':'*
     * Return the extended year defined by the current fields.
     * @internal
     ','line_number':162,'multiline':True]['text':'*
     * Compute fields from the JD
     * @internal
     ','line_number':168,'multiline':True]['text':'*
     * Returns the date of the start of the default century
     * @return start of century - in milliseconds since epoch, 1970
     * @internal
     ','line_number':174,'multiline':True]['text':'*
     * Returns the year in which the default century begins
     * @internal
     ','line_number':181,'multiline':True]['text':'*
     * Return the date offset from Julian
     * @internal
     ','line_number':187,'multiline':True]['text':'*
     * Override Calendar Returns a unique class ID POLYMORPHICALLY. Pure virtual
     * override. This method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone() methods call
     * this method.
     *
     * @return   The class ID for this object. All objects of a given class have the
     *           same class ID. Objects of other classes have different class IDs.
     * @internal
     ','line_number':195,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to a return
     * value from getDynamicClassID(). For example:
     *
     *      Base* polymorphic_pointer = createPolymorphicObject();
     *      if (polymorphic_pointer->getDynamicClassID() ==
     *          Derived::getStaticClassID()) ...
     *
     * @return   The class ID for all objects of this class.
     * @internal
     ','line_number':207,'multiline':True]['text':' We do not want to introduce this API in ICU4C.','line_number':221,'multiline':False]['text':' It was accidentally introduced in ICU4J as a public API.','line_number':222,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':224,'multiline':False]['text':' Calendar system Conversion methods...','line_number':225,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':226,'multiline':False]['text':'*
     * Convert an Coptic year, month, and day to a Julian day.
     *
     * @param year the extended year
     * @param month the month
     * @param day the day
     * @return Julian day
     * @internal
     ','line_number':227,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':242,'multiline':True]['text':' COPTCCAL_H ','line_number':243,'multiline':True]['text':'eof','line_number':244,'multiline':False]