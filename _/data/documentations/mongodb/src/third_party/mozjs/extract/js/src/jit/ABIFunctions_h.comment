['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS_FUNC_TO_DATA_PTR','line_number':10,'multiline':False]['text':' This class is used to ensure that all known targets of callWithABI are','line_number':15,'multiline':False]['text':' registered here. Otherwise, this would raise a static assertion at compile','line_number':16,'multiline':False]['text':' time.','line_number':17,'multiline':False]['text':' If this assertion fails, you are likely in the context of a','line_number':27,'multiline':False]['text':' `callWithABI<Sig, fn>()` call. This error indicates that ABIFunction has','line_number':28,'multiline':False]['text':' not been specialized for `<Sig, fn>` by the time of this call.','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' This can be fixed by adding the function signature to either','line_number':31,'multiline':False]['text':' ABIFUNCTION_LIST or ABIFUNCTION_AND_TYPE_LIST (if overloaded) within','line_number':32,'multiline':False]['text':' `ABIFunctionList-inl.h` and to add an `#include` statement of this header','line_number':33,'multiline':False]['text':' in the file which is making the call to `callWithABI<Sig, fn>()`.','line_number':34,'multiline':False]['text':' If this assertion fails, you are likely in the context of a','line_number':48,'multiline':False]['text':' `DynamicFunction<Sig>(fn)` call. This error indicates that','line_number':49,'multiline':False]['text':' ABIFunctionSignature has not been specialized for `Sig` by the time of this','line_number':50,'multiline':False]['text':' call.','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' This can be fixed by adding the function signature to ABIFUNCTIONSIG_LIST','line_number':53,'multiline':False]['text':' within `ABIFunctionList-inl.h` and to add an `#include` statement of this','line_number':54,'multiline':False]['text':' header in the file which is making the call to `DynamicFunction<Sig>(fn)`.','line_number':55,'multiline':False]['text':' This is a structure created to ensure that the dynamically computed','line_number':60,'multiline':False]['text':' function pointer is well typed.','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' It is meant to be created only through DynamicFunction function calls. In','line_number':63,'multiline':False]['text':' extremelly rare cases, such as VMFunctions, it might be produced as a result','line_number':64,'multiline':False]['text':' of GetVMFunctionTarget.','line_number':65,'multiline':False]['text':' namespace jit','line_number':70,'multiline':False]['text':' namespace js','line_number':71,'multiline':False]['text':' jit_VMFunctions_h ','line_number':73,'multiline':True]