['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS math package.
 ','line_number':7,'multiline':True]['text':' js_*_str','line_number':33,'multiline':False]['text':' NB: Always stored as a double so the math function can be inlined','line_number':69,'multiline':False]['text':' through MMathFunction. We also rely on this to avoid type monitoring','line_number':70,'multiline':False]['text':' in CallIRGenerator::tryAttachMathSqrt.','line_number':71,'multiline':False]['text':' Implements Math.fround (20.2.2.16) up to step 3','line_number':293,'multiline':False]['text':' Math.max(num, NaN) => NaN, Math.max(-0, +0) => +0','line_number':339,'multiline':False]['text':' Math.min(num, NaN) => NaN, Math.min(-0, +0) => -0','line_number':364,'multiline':False]['text':' Unfortunately, we have to be careful when p has reached','line_number':416,'multiline':False]['text':' infinity in the computation, because sometimes the higher','line_number':417,'multiline':False]['text':' internal precision in the pow() implementation would have','line_number':418,'multiline':False]['text':' given us a finite p. This happens very rarely.','line_number':419,'multiline':False]['text':' Avoid pow(double, int).','line_number':423,'multiline':False]['text':'
   * Use powi if the exponent is an integer-valued double. We don't have to
   * check for NaN since a comparison with NaN is always false.
   ','line_number':436,'multiline':True]['text':'
   * Because C99 and ECMA specify different behavior for pow(),
   * we need to wrap the libm call to make it ECMA compliant.
   ','line_number':445,'multiline':True]['text':' pow(x, +-0) is always 1, even for x = NaN (MSVC gets this wrong). ','line_number':453,'multiline':True]['text':'
   * Special case for square roots. Note that pow(x, 0.5) != sqrt(x)
   * when x = -0.0, so we have to guard for this.
   ','line_number':458,'multiline':True]['text':' Use PRMJ_Now() in case we couldn't read random bits from the OS.','line_number':495,'multiline':False]['text':' XorShift128PlusRNG must be initialized with a non-zero seed.','line_number':502,'multiline':False]['text':' Some numbers are so big that adding 0.5 would give the wrong number. ','line_number':563,'multiline':True]['text':' Some numbers are so big that adding 0.5 would give the wrong number. ','line_number':581,'multiline':True]['text':' ES5 15.8.2.15. ','line_number':591,'multiline':True]['text':' Check for infinities or NaNs so that we can return immediately.','line_number':771,'multiline':False]['text':' IonMonkey calls the ecmaHypot function directly if two arguments are','line_number':805,'multiline':False]['text':' given. Do that here as well to get the same results.','line_number':806,'multiline':False]