['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2004-2010, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  xmlparser.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2004jul21
*   created by: Andy Heninger
','line_number':3,'multiline':True]['text':' character constants','line_number':28,'multiline':False]['text':' XML #4','line_number':40,'multiline':False]['text':'  XML #5','line_number':46,'multiline':False]['text':'  XML #6','line_number':49,'multiline':False]['text':'','line_number':57,'multiline':False]['text':'   UXMLParser constructor.   Mostly just initializes the ICU regexes that are','line_number':58,'multiline':False]['text':'                             used for parsing.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':'  XML Declaration.  XML Production #23.','line_number':62,'multiline':False]['text':'      example:  "<?xml version=1.0 encoding="utf-16" ?>','line_number':63,'multiline':False]['text':'      This is a sloppy implementation - just look for the leading <?xml and the closing ?>','line_number':64,'multiline':False]['text':'            allow for a possible leading BOM.','line_number':65,'multiline':False]['text':'  XML Comment   production #15','line_number':68,'multiline':False]['text':'     example:  "<!-- whatever -->','line_number':69,'multiline':False]['text':'       note, does not detect an illegal "--" within comments','line_number':70,'multiline':False]['text':'  XML Spaces','line_number':73,'multiline':False]['text':'      production [3]','line_number':74,'multiline':False]['text':'  XML Doctype decl  production #28','line_number':77,'multiline':False]['text':'     example   "<!DOCTYPE foo SYSTEM "somewhere" >','line_number':78,'multiline':False]['text':'       or      "<!DOCTYPE foo [internal dtd]>','line_number':79,'multiline':False]['text':'    TODO:  we don't actually parse the DOCTYPE or internal subsets.','line_number':80,'multiline':False]['text':'           Some internal dtd subsets could confuse this simple-minded','line_number':81,'multiline':False]['text':'           attempt at skipping over them, specifically, occurrences','line_number':82,'multiline':False]['text':'           of closeing square brackets.  These could appear in comments, ','line_number':83,'multiline':False]['text':'           or in parameter entity declarations, for example.','line_number':84,'multiline':False]['text':'  XML PI     production #16','line_number':89,'multiline':False]['text':'     example   "<?target stuff?>','line_number':90,'multiline':False]['text':'  XML Element Start   Productions #40, #41','line_number':93,'multiline':False]['text':'          example   <foo att1='abc'  att2="d e f" >','line_number':94,'multiline':False]['text':'      capture #1:  the tag name','line_number':95,'multiline':False]['text':'','line_number':96,'multiline':False]['text':' match  "<tag_name"','line_number':97,'multiline':False]['text':' match  "ATTR_NAME = "','line_number':99,'multiline':False]['text':'   * for zero or more attributes.','line_number':101,'multiline':False]['text':' match " >"','line_number':102,'multiline':False]['text':'  XML Element End     production #42','line_number':104,'multiline':False]['text':'     example   </foo>','line_number':105,'multiline':False]['text':' XML Element Empty    production #44','line_number':108,'multiline':False]['text':'     example   <foo att1="abc"   att2="d e f" />','line_number':109,'multiline':False]['text':' match  "<tag_name"','line_number':110,'multiline':False]['text':' match  "ATTR_NAME = "','line_number':112,'multiline':False]['text':'   * for zero or more attributes.','line_number':114,'multiline':False]['text':' match " />"','line_number':115,'multiline':False]['text':' XMLCharData.  Everything but '<'.  Note that & will be dealt with later.','line_number':118,'multiline':False]['text':' Attribute name = "value".  XML Productions 10, 40/41','line_number':121,'multiline':False]['text':'  Capture group 1 is name, ','line_number':122,'multiline':False]['text':'                2 is the attribute value, including the quotes.','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':'   Note that attributes are scanned twice.  The first time is with','line_number':125,'multiline':False]['text':'        the regex for an entire element start.  There, the attributes','line_number':126,'multiline':False]['text':'        are checked syntactically, but not separted out one by one.','line_number':127,'multiline':False]['text':'        Here, we match a single attribute, and make its name and','line_number':128,'multiline':False]['text':'        attribute value available to the parser code.','line_number':129,'multiline':False]['text':' Match any of the new-line sequences in content.','line_number':136,'multiline':False]['text':'   All are changed to \u000a.','line_number':137,'multiline':False]['text':' & char references','line_number':140,'multiline':False]['text':'   We will figure out what we've got based on which capture group has content.','line_number':141,'multiline':False]['text':'   The last one is a catchall for unrecognized entity references..','line_number':142,'multiline':False]['text':'             1     2     3      4      5           6                    7          8','line_number':143,'multiline':False]['text':' Plain new-line string, used in new line normalization.','line_number':149,'multiline':False]['text':' we have already read the entire file','line_number':187,'multiline':False]['text':' get the file length','line_number':190,'multiline':False]['text':'
     * get the charset:
     * 1. Unicode signature
     * 2. treat as ISO-8859-1 and read XML encoding="charser"
     * 3. default to UTF-8
     ','line_number':194,'multiline':True]['text':' open converter according to Unicode signature','line_number':202,'multiline':False]['text':' read as Latin-1 and parse the XML declaration and encoding','line_number':205,'multiline':False]['text':' unexpected error opening Latin-1 converter','line_number':208,'multiline':False]['text':' unexpected failure to reserve some string capacity','line_number':214,'multiline':False]['text':' unexpected error in conversion from Latin-1','line_number':229,'multiline':False]['text':' parse XML declaration','line_number':234,'multiline':False]['text':' go beyond <?xml','line_number':237,'multiline':False]['text':' loop runs once per attribute on this element.','line_number':241,'multiline':False]['text':' Trim the quotes from the att value.  These are left over from the original regex','line_number':245,'multiline':False]['text':'   that parsed the attribute, which couldn't conveniently strip them.','line_number':246,'multiline':False]['text':' one char from the beginning','line_number':247,'multiline':False]['text':' and one from the end.','line_number':248,'multiline':False]['text':' default to UTF-8','line_number':259,'multiline':False]['text':' unable to open the converter','line_number':267,'multiline':False]['text':' convert the file contents','line_number':271,'multiline':False]['text':' estimated capacity','line_number':272,'multiline':False]['text':' zero length','line_number':274,'multiline':False]['text':' convert contents of bytes[bytesLength]','line_number':277,'multiline':False]['text':' unexpected failure to reserve some string capacity','line_number':283,'multiline':False]['text':' increase capacity by 50%','line_number':296,'multiline':False]['text':' conversion error','line_number':303,'multiline':False]['text':' completely converted the file','line_number':307,'multiline':False]['text':' read next block','line_number':310,'multiline':False]['text':' reached end of file, convert once more to flush the converter','line_number':313,'multiline':False]['text':' TODO use just a local pos variable and pass it into functions','line_number':336,'multiline':False]['text':' where necessary?','line_number':337,'multiline':False]['text':' set all matchers to work on the input string','line_number':339,'multiline':False]['text':' Consume the XML Declaration, if present.','line_number':354,'multiline':False]['text':' Consume "misc" [XML production 27] appearing before DocType','line_number':359,'multiline':False]['text':' Consume a DocType declaration, if present.','line_number':362,'multiline':False]['text':' Consume additional "misc" [XML production 27] appearing after the DocType','line_number':367,'multiline':False]['text':' Get the root element','line_number':370,'multiline':False]['text':' Root is an empty element (no nested elements or content)','line_number':372,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' This is the loop that consumes the root element of the document,','line_number':384,'multiline':False]['text':'      including all nested content.   Nested elements are handled by','line_number':385,'multiline':False]['text':'      explicit pushes/pops of the element stack; there is no recursion','line_number':386,'multiline':False]['text':'      in the control flow of this code.','line_number':387,'multiline':False]['text':'      "el" always refers to the current element, the one to which content','line_number':388,'multiline':False]['text':'      is being added.  It is above the top of the element stack.','line_number':389,'multiline':False]['text':' Nested Element Start','line_number':391,'multiline':False]['text':' Text Content.  String is concatenated onto the current node's content,','line_number':401,'multiline':False]['text':'                but only if it contains something other than spaces.','line_number':402,'multiline':False]['text':' This chunk of text contains something other than just','line_number':407,'multiline':False]['text':'  white space. Make a child node for it.','line_number':408,'multiline':False]['text':' The matchers need to stay set to the main input string.','line_number':412,'multiline':False]['text':' Comments.  Discard.','line_number':416,'multiline':False]['text':' PIs.  Discard.','line_number':422,'multiline':False]['text':' Element End','line_number':428,'multiline':False]['text':' Close of the root element.  We're done with the doc.','line_number':437,'multiline':False]['text':' Empty Element.  Stored as a child of the current element, but not stacked.','line_number':445,'multiline':False]['text':' Hit something within the document that doesn't match anything.','line_number':452,'multiline':False]['text':'   It's an error.','line_number':453,'multiline':False]['text':' We bailed out early, for some reason.','line_number':459,'multiline':False]['text':' Root Element parse is complete.','line_number':465,'multiline':False]['text':' Consume the annoying xml "Misc" that can appear at the end of the doc.','line_number':466,'multiline':False]['text':' We should have reached the end of the input','line_number':469,'multiline':False]['text':' Success!','line_number':475,'multiline':False]['text':'','line_number':483,'multiline':False]['text':'  createElement','line_number':484,'multiline':False]['text':'      We've just matched an element start tag.  Create and fill in a UXMLElement object','line_number':485,'multiline':False]['text':'      for it.','line_number':486,'multiline':False]['text':'','line_number':487,'multiline':False]['text':' First capture group is the element's name.','line_number':490,'multiline':False]['text':' Scan for attributes.','line_number':493,'multiline':False]['text':' The position after the end of the tag name','line_number':494,'multiline':False]['text':' loop runs once per attribute on this element.','line_number':496,'multiline':False]['text':' Trim the quotes from the att value.  These are left over from the original regex','line_number':500,'multiline':False]['text':'   that parsed the attribute, which couldn't conveniently strip them.','line_number':501,'multiline':False]['text':' one char from the beginning','line_number':502,'multiline':False]['text':' and one from the end.','line_number':503,'multiline':False]['text':' XML Attribue value normalization. ','line_number':505,'multiline':False]['text':' This is one of the really screwy parts of the XML spec.','line_number':506,'multiline':False]['text':' See http://www.w3.org/TR/2004/REC-xml11-20040204/#AVNormalize','line_number':507,'multiline':False]['text':' Note that non-validating parsers must treat all entities as type CDATA','line_number':508,'multiline':False]['text':'   which simplifies things some.','line_number':509,'multiline':False]['text':' Att normalization step 1:  normalize any newlines in the attribute value','line_number':511,'multiline':False]['text':' Next change all xml white space chars to plain \u0020 spaces.','line_number':515,'multiline':False]['text':' Replace character entities.','line_number':520,'multiline':False]['text':' Save the attribute name and value in our document structure.','line_number':523,'multiline':False]['text':'','line_number':532,'multiline':False]['text':'  parseMisc','line_number':533,'multiline':False]['text':'     Consume XML "Misc" [production #27]','line_number':534,'multiline':False]['text':'        which is any combination of space, PI and comments','line_number':535,'multiline':False]['text':'      Need to watch end-of-input because xml MISC stuff is allowed after','line_number':536,'multiline':False]['text':'        the document element, so we WILL scan off the end in this function','line_number':537,'multiline':False]['text':'','line_number':538,'multiline':False]['text':'','line_number':561,'multiline':False]['text':'  Scan for document content.','line_number':562,'multiline':False]['text':'','line_number':563,'multiline':False]['text':' Normalize the new-lines.  (Before char ref substitution)','line_number':569,'multiline':False]['text':' TODO:  handle CDATA','line_number':573,'multiline':False]['text':'','line_number':580,'multiline':False]['text':'   replaceCharRefs','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'      replace the char entities &lt;  &amp; &#123; &#x12ab; etc. in a string','line_number':583,'multiline':False]['text':'       with the corresponding actual character.','line_number':584,'multiline':False]['text':'','line_number':585,'multiline':False]['text':' See the initialization for the regex matcher mAmps.','line_number':593,'multiline':False]['text':'    Which entity we've matched is determined by which capture group has content,','line_number':594,'multiline':False]['text':'      which is flaged by start() of that group not being -1.','line_number':595,'multiline':False]['text':' TODO:  some verification that the character is valid','line_number':613,'multiline':False]['text':' TODO:  some verification that the character is valid','line_number':621,'multiline':False]['text':' An unrecognized &entity;  Leave it alone.','line_number':624,'multiline':False]['text':'  TODO:  check that it really looks like an entity, and is not some','line_number':625,'multiline':False]['text':'         random & in the text.','line_number':626,'multiline':False]['text':' TODO:  something better here...','line_number':637,'multiline':False]['text':' intern strings like in Java','line_number':651,'multiline':False]['text':' already a known name, return its hashed key pointer','line_number':657,'multiline':False]['text':' add this new name and return its hashed key pointer','line_number':660,'multiline':False]['text':' a known name, return its hashed key pointer','line_number':671,'multiline':False]['text':' unknown name','line_number':674,'multiline':False]['text':' UXMLElement ------------------------------------------------------------- ***','line_number':679,'multiline':False]['text':' attribute names are owned by the UXMLParser, don't delete them here','line_number':693,'multiline':False]['text':' must be a UXMLElement ','line_number':723,'multiline':True]['text':' or return (UnicodeString *)fAttValues.elementAt(i);','line_number':739,'multiline':False]['text':' search for the attribute name by comparing the interned pointer,','line_number':747,'multiline':False]['text':' not the string contents','line_number':748,'multiline':False]['text':' no such attribute seen by the parser at all','line_number':751,'multiline':False]['text':' search for the element name by comparing the interned pointer,','line_number':803,'multiline':False]['text':' not the string contents','line_number':804,'multiline':False]['text':' no such element seen by the parser at all','line_number':807,'multiline':False]['text':' !UCONFIG_NO_REGULAR_EXPRESSIONS ','line_number':826,'multiline':True]