['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' In function scopes with parameter expressions, function special names','line_number':38,'multiline':False]['text':' (like '.this') are declared as vars in the function scope, despite its','line_number':39,'multiline':False]['text':' not being the var scope.','line_number':40,'multiline':False]['text':' Labeled 'break' statements target the nearest labeled statements (could','line_number':70,'multiline':False]['text':' be any kind) with the same label. Unlabeled 'break' statements target','line_number':71,'multiline':False]['text':' the innermost loop or switch statement.','line_number':72,'multiline':False]['text':' Labeled 'continue' statements target the nearest labeled loop','line_number':98,'multiline':False]['text':' statements with the same label. Unlabeled 'continue' statements target','line_number':99,'multiline':False]['text':' the innermost loop statement.','line_number':100,'multiline':False]['text':' Unlabeled statement: we target the innermost loop, so make sure that','line_number':107,'multiline':False]['text':' there is an innermost loop.','line_number':108,'multiline':False]['text':' Labeled statement: targest the nearest labeled loop with the same label.','line_number':115,'multiline':False]['text':' True if we have encountered at least one loop.','line_number':117,'multiline':False]['text':' Is it labeled by our label?','line_number':131,'multiline':False]['text':' Any vars that are redeclared as body-level functions must','line_number':150,'multiline':False]['text':' be recorded as body-level functions.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' In the case of global and eval scripts, GlobalDeclaration-','line_number':153,'multiline':False]['text':' Instantiation [1] and EvalDeclarationInstantiation [2]','line_number':154,'multiline':False]['text':' check for the declarability of global var and function','line_number':155,'multiline':False]['text':' bindings via CanDeclareVar [3] and CanDeclareGlobal-','line_number':156,'multiline':False]['text':' Function [4]. CanDeclareGlobalFunction is strictly more','line_number':157,'multiline':False]['text':' restrictive than CanDeclareGlobalVar, so record the more','line_number':158,'multiline':False]['text':' restrictive kind. These semantics are implemented in','line_number':159,'multiline':False]['text':' CheckCanDeclareGlobalBinding.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' VarForAnnexBLexicalFunction declarations are declared when','line_number':162,'multiline':False]['text':' the var scope exits. It is not possible for a var to be','line_number':163,'multiline':False]['text':' previously declared as VarForAnnexBLexicalFunction and','line_number':164,'multiline':False]['text':' checked for redeclaration.','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':' [1] ES 15.1.11','line_number':167,'multiline':False]['text':' [2] ES 18.2.1.3','line_number':168,'multiline':False]['text':' [3] ES 8.1.1.4.15','line_number':169,'multiline':False]['text':' [4] ES 8.1.1.4.16','line_number':170,'multiline':False]['text':' namespace frontend','line_number':177,'multiline':False]['text':' namespace js','line_number':178,'multiline':False]['text':' frontend_ParseContext_inl_h','line_number':180,'multiline':False]