['text':'
    LZ4 HC - High Compression Mode of LZ4
    Copyright (C) 2011-2017, Yann Collet.

    BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above
    copyright notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    You can contact the author at :
       - LZ4 source repository : https://github.com/lz4/lz4
       - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
','line_number':1,'multiline':True]['text':' note : lz4hc is not an independent module, it requires lz4.h/lz4.c for proper compilation ','line_number':34,'multiline':True]['text':' *************************************
*  Tuning Parameter
**************************************','line_number':37,'multiline':True]['text':'! HEAPMODE :
 *  Select how default compression function will allocate workplace memory,
 *  in stack (0:fastest), or in heap (1:requires malloc()).
 *  Since workplace is rather large, heap mode is recommended.
 ','line_number':41,'multiline':True]['text':'===    Dependency    ===','line_number':51,'multiline':True]['text':'===   Common definitions   ===','line_number':56,'multiline':True]['text':' LZ4_count, constants, mem ','line_number':66,'multiline':True]['text':'===   Enums   ===','line_number':70,'multiline':True]['text':'===   Constants   ===','line_number':74,'multiline':True]['text':'===   Macros   ===','line_number':79,'multiline':True]['text':' flexible, LZ4HC_MAXD dependent ','line_number':83,'multiline':True]['text':' faster ','line_number':84,'multiline':True]['text':' Make fields passed to, and updated by LZ4HC_encodeSequence explicit ','line_number':85,'multiline':True]['text':'*************************************
*  HC Compression
*************************************','line_number':91,'multiline':True]['text':' Update chains up to ip (excluded) ','line_number':117,'multiline':True]['text':'* LZ4HC_countBack() :
 * @return : negative value, nb of common bytes before ip/match ','line_number':138,'multiline':True]['text':' LZ4HC_countPattern() :
 * pattern32 must be a sample of repetitive pattern of length 1, 2 or 4 (but not 3!) ','line_number':169,'multiline':True]['text':' big endian ','line_number':190,'multiline':True]['text':' LZ4HC_reverseCountPattern() :
 * pattern must be a sample of repetitive pattern of length 1, 2 or 4 (but not 3!)
 * read using natural platform endianess ','line_number':202,'multiline':True]['text':' works for any endianess ','line_number':214,'multiline':True]['text':' LZ4HC_protectDictEnd() :
 * Checks if the match is in the last 3 bytes of the dictionary, so reading the
 * 4 byte MINMATCH would overflow.
 * @returns true if the match index is okay.
 ','line_number':222,'multiline':True]['text':' First Match ','line_number':268,'multiline':True]['text':' do nothing ','line_number':279,'multiline':True]['text':' within current Prefix ','line_number':280,'multiline':True]['text':' lowestMatchIndex <= matchIndex < dictLimit ','line_number':295,'multiline':True]['text':' virtual pos, relative to ip, to retrieve offset ','line_number':309,'multiline':True]['text':' better match => select a better chain ','line_number':313,'multiline':True]['text':' search forward only ','line_number':314,'multiline':True]['text':' avoid overflow ','line_number':332,'multiline':True]['text':' may be a repeated pattern ','line_number':340,'multiline':True]['text':' good candidate ','line_number':353,'multiline':True]['text':' Limit backLength not go further than lowestMatchIndex ','line_number':368,'multiline':True]['text':' Adjust to end of pattern if the source pattern fits, otherwise the beginning of the pattern ','line_number':372,'multiline':True]['text':' current pattern segment large enough to contain full srcPatternLength ','line_number':373,'multiline':True]['text':' haven't reached this position yet ','line_number':374,'multiline':True]['text':' best position, full pattern, might be followed by more match ','line_number':375,'multiline':True]['text':' Can only happen if started in the prefix ','line_number':379,'multiline':True]['text':' farthest position in current segment, will find a match of length currentSegmentLength + maybe some back ','line_number':384,'multiline':True]['text':' no back possible ','line_number':390,'multiline':True]['text':' virtual pos, relative to ip, to retrieve offset ','line_number':397,'multiline':True]['text':' avoid overflow ','line_number':401,'multiline':True]['text':' PA optimization ','line_number':406,'multiline':True]['text':' follow current chain ','line_number':408,'multiline':True]['text':' while ((matchIndex>=lowestMatchIndex) && (nbAttempts)) ','line_number':411,'multiline':True]['text':' Index table will be updated ','line_number':446,'multiline':True]['text':' note : LZ4HC_InsertAndGetWiderMatch() is able to modify the starting position of a match (*startpos),
     * but this won't be the case here, as we define iLowLimit==ip,
     * so LZ4HC_InsertAndGetWiderMatch() won't be allowed to search past ip ','line_number':454,'multiline':True]['text':'chainSwap','line_number':457,'multiline':True]['text':' LZ4HC_encodeSequence() :
 * @return : 0 if ok,
 *           1 if buffer issue detected ','line_number':460,'multiline':True]['text':' only works for single segment ','line_number':487,'multiline':True]['text':' g_debuglog_enable = (pos >= 2228) & (pos <= 2262); ','line_number':488,'multiline':True]['text':' Encode Literal length ','line_number':496,'multiline':True]['text':' Check output limit ','line_number':499,'multiline':True]['text':' Copy Literals ','line_number':514,'multiline':True]['text':' Encode Offset ','line_number':518,'multiline':True]['text':' note : consider providing offset as a value, rather than as a pointer difference ','line_number':519,'multiline':True]['text':' Encode MatchLength ','line_number':522,'multiline':True]['text':' Check output limit ','line_number':527,'multiline':True]['text':' Prepare next loop ','line_number':539,'multiline':True]['text':' levels 9+ ','line_number':561,'multiline':True]['text':' init ','line_number':582,'multiline':True]['text':' Hack for support LZ4 format restriction ','line_number':584,'multiline':True]['text':' Input too small, no compression (all literals) ','line_number':585,'multiline':True]['text':' Main Loop ','line_number':587,'multiline':True]['text':' saved, in case we would skip too much ','line_number':592,'multiline':True]['text':' No better match => encode ML1 ','line_number':604,'multiline':True]['text':' first match was skipped at least once ','line_number':610,'multiline':True]['text':' squeezing ML1 between ML0(original ML1) and ML2 ','line_number':611,'multiline':True]['text':' restore initial ML1 ','line_number':612,'multiline':True]['text':' Here, start0==ip ','line_number':615,'multiline':True]['text':' First Match too small : removed ','line_number':616,'multiline':True]['text':' At this stage, we have :
        *  ml2 > ml1, and
        *  ip1+3 <= ip2 (usually < ip1+ml1) ','line_number':624,'multiline':True]['text':' Now, we have start2 = ip+new_ml, with new_ml = min(ml, OPTIMAL_ML=18) ','line_number':639,'multiline':True]['text':' No better match => encode ML1 and ML2 ','line_number':649,'multiline':True]['text':' ip & ref are known; Now for ml ','line_number':650,'multiline':True]['text':' Now, encode 2 sequences ','line_number':652,'multiline':True]['text':' Not enough space for match 2 : remove it ','line_number':665,'multiline':True]['text':' can write Seq1 immediately ==> Seq2 is removed, so Seq3 becomes Seq1 ','line_number':666,'multiline':True]['text':'
        * OK, now we have 3 ascending matches;
        * let's write the first one ML1.
        * ip & ref are known; Now decide ml.
        ','line_number':697,'multiline':True]['text':' ML2 becomes ML1 ','line_number':720,'multiline':True]['text':' ML3 becomes ML2 ','line_number':723,'multiline':True]['text':' let's find a new ML3 ','line_number':726,'multiline':True]['text':' Encode Last Literals ','line_number':731,'multiline':True]['text':' literals ','line_number':732,'multiline':True]['text':' restore correct value ','line_number':735,'multiline':True]['text':' adapt lastRunSize to fill 'dest' ','line_number':738,'multiline':True]['text':'token','line_number':739,'multiline':True]['text':' can be != iend if limit==fillOutput ','line_number':744,'multiline':True]['text':' End ','line_number':758,'multiline':True]['text':' Assumption : ip, anchor, ml and ref must be set correctly ','line_number':764,'multiline':True]['text':' 2 for offset, 1 for token ','line_number':768,'multiline':True]['text':' restore correct out pointer ','line_number':770,'multiline':True]['text':' ll validated; now adjust match length ','line_number':772,'multiline':True]['text':' compression failed ','line_number':782,'multiline':True]['text':' 0, unused ','line_number':814,'multiline':True]['text':' 1, unused ','line_number':815,'multiline':True]['text':' 2, unused ','line_number':816,'multiline':True]['text':' 3 ','line_number':817,'multiline':True]['text':' 4 ','line_number':818,'multiline':True]['text':' 5 ','line_number':819,'multiline':True]['text':' 6 ','line_number':820,'multiline':True]['text':' 7 ','line_number':821,'multiline':True]['text':' 8 ','line_number':822,'multiline':True]['text':' 9 ','line_number':823,'multiline':True]['text':'10==LZ4HC_CLEVEL_OPT_MIN','line_number':824,'multiline':True]['text':'11 ','line_number':825,'multiline':True]['text':' 12==LZ4HC_CLEVEL_MAX ','line_number':826,'multiline':True]['text':' Impossible to store anything ','line_number':832,'multiline':True]['text':' Unsupported input size (too large or negative) ','line_number':833,'multiline':True]['text':' note : convention is different from lz4frame, maybe something to review ','line_number':836,'multiline':True]['text':' ultra mode ','line_number':851,'multiline':True]['text':' effectively disabled ','line_number':929,'multiline':True]['text':' state is presumed correctly initialized,
 * in which case its size and alignment have already been validate ','line_number':933,'multiline':True]['text':' init failure ','line_number':950,'multiline':True]['text':' state is presumed sized correctly (>= sizeof(LZ4_streamHC_t)) ','line_number':969,'multiline':True]['text':' init failure ','line_number':973,'multiline':True]['text':'*************************************
*  Streaming Functions
*************************************','line_number':981,'multiline':True]['text':' allocation ','line_number':984,'multiline':True]['text':' support free on NULL ','line_number':997,'multiline':True]['text':' if compilation fails here, LZ4_STREAMHCSIZE must be increased ','line_number':1006,'multiline':True]['text':' check conditions ','line_number':1009,'multiline':True]['text':' init ','line_number':1013,'multiline':True]['text':' just a stub ','line_number':1020,'multiline':True]['text':' preserve end - base : can trigger clearTable's threshold ','line_number':1033,'multiline':True]['text':' LZ4_loadDictHC() :
 * LZ4_streamHCPtr is presumed properly initialized ','line_number':1058,'multiline':True]['text':' need a full initialization, there are bad side-effects when using resetFast() ','line_number':1070,'multiline':True]['text':' compression ','line_number':1085,'multiline':True]['text':' Referencing remaining dictionary content ','line_number':1091,'multiline':True]['text':' Only one memory segment for extDict, so any previous extDict is lost at this stage ','line_number':1093,'multiline':True]['text':' match referencing will resume from there ','line_number':1099,'multiline':True]['text':' cannot reference an extDict and a dictCtx at the same time ','line_number':1101,'multiline':True]['text':' auto-init if forgotten ','line_number':1115,'multiline':True]['text':' Check overflow ','line_number':1118,'multiline':True]['text':' Check if blocks follow each other ','line_number':1125,'multiline':True]['text':' Check overlapping input/dictionary space ','line_number':1129,'multiline':True]['text':' LZ4_saveDictHC :
 * save history content
 * into a user-provided buffer
 * which is then used to continue compression
 ','line_number':1157,'multiline':True]['text':'**************************************************
*  Deprecated Functions
**************************************************','line_number':1186,'multiline':True]['text':' These functions currently generate deprecation warnings ','line_number':1190,'multiline':True]['text':' Wrappers for deprecated compression functions ','line_number':1192,'multiline':True]['text':' Deprecated streaming functions ','line_number':1205,'multiline':True]['text':' state is presumed correctly sized, aka >= sizeof(LZ4_streamHC_t)
 * @return : 0 on success, !=0 if error ','line_number':1208,'multiline':True]['text':' init failed ','line_number':1213,'multiline':True]['text':' not enough memory ','line_number':1221,'multiline':True]['text':' support free on NULL ','line_number':1228,'multiline':True]['text':' avoid const char * -> char * conversion warning :( ','line_number':1248,'multiline':True]['text':' ================================================
 *  LZ4 Optimal parser (levels [LZ4HC_CLEVEL_OPT_MIN - LZ4HC_CLEVEL_MAX])
 * ===============================================','line_number':1253,'multiline':True]['text':' price in bytes ','line_number':1263,'multiline':True]['text':' requires mlen >= MINMATCH ','line_number':1274,'multiline':True]['text':' token + 16-bit offset ','line_number':1277,'multiline':True]['text':' note : LZ4HC_InsertAndGetWiderMatch() is able to modify the starting position of a match (*startpos),
     * but this won't be the case here, as we define iLowLimit==ip,
     * so LZ4HC_InsertAndGetWiderMatch() won't be allowed to search past ip ','line_number':1304,'multiline':True]['text':'patternAnalysis','line_number':1307,'multiline':True]['text':'chainSwap','line_number':1307,'multiline':True]['text':' favor shortcut ','line_number':1310,'multiline':True]['text':' ~64 KB, which is a bit large for stack... ','line_number':1335,'multiline':True]['text':' overflow - last sequence ','line_number':1346,'multiline':True]['text':' init ','line_number':1349,'multiline':True]['text':' Hack for support LZ4 format restriction ','line_number':1355,'multiline':True]['text':' Main Loop ','line_number':1358,'multiline':True]['text':' good enough solution : immediate encoding ','line_number':1368,'multiline':True]['text':' updates ip, op and anchor ','line_number':1372,'multiline':True]['text':' set prices for first positions (literals) ','line_number':1380,'multiline':True]['text':' set prices using initial match ','line_number':1391,'multiline':True]['text':' necessarily < sufficient_len < LZ4_OPT_NUM ','line_number':1393,'multiline':True]['text':' literal ','line_number':1408,'multiline':True]['text':' check further positions ','line_number':1416,'multiline':True]['text':' not useful to search here if next position has same (or lower) cost ','line_number':1425,'multiline':True]['text':' in some cases, next position has same cost, but cost rises sharply after, so a small match would still be beneficial ','line_number':1427,'multiline':True]['text':'min seq price','line_number':1428,'multiline':True]['text':' not useful to search here if next position has same (or lower) cost ','line_number':1431,'multiline':True]['text':' only test matches of minimum length; slightly faster, but misses a few bytes ','line_number':1439,'multiline':True]['text':' immediate encoding ','line_number':1445,'multiline':True]['text':' before match : set price with literals at beginning ','line_number':1452,'multiline':True]['text':' literal ','line_number':1459,'multiline':True]['text':' set prices using match at position = cur ','line_number':1467,'multiline':True]['text':' last pos of last match ','line_number':1494,'multiline':True]['text':' complete following positions with literals ','line_number':1502,'multiline':True]['text':' literal ','line_number':1505,'multiline':True]['text':' for (cur = 1; cur <= last_match_pos; cur++) ','line_number':1511,'multiline':True]['text':' cur, last_match_pos, best_mlen, best_off must be set ','line_number':1518,'multiline':True]['text':' == 1 when only one candidate ','line_number':1520,'multiline':True]['text':' from end to beginning ','line_number':1525,'multiline':True]['text':' can be 1, means literal ','line_number':1526,'multiline':True]['text':' last match elected, first match to encode ','line_number':1533,'multiline':True]['text':' can be 1, means literal ','line_number':1534,'multiline':True]['text':' encode all recorded sequences in order ','line_number':1538,'multiline':True]['text':' relative position (to ip) ','line_number':1539,'multiline':True]['text':' literal; note: can end up with several literals, in which case, skip them ','line_number':1543,'multiline':True]['text':' updates ip, op and anchor ','line_number':1548,'multiline':True]['text':' while (ip <= mflimit) ','line_number':1553,'multiline':True]['text':' Encode Last Literals ','line_number':1556,'multiline':True]['text':' literals ','line_number':1557,'multiline':True]['text':' restore correct value ','line_number':1560,'multiline':True]['text':' Check output limit ','line_number':1562,'multiline':True]['text':' adapt lastRunSize to fill 'dst' ','line_number':1566,'multiline':True]['text':'token','line_number':1567,'multiline':True]['text':' can be != iend if limit==fillOutput ','line_number':1572,'multiline':True]['text':' End ','line_number':1586,'multiline':True]['text':' Assumption : ip, anchor, ovml and ovref must be set correctly ','line_number':1593,'multiline':True]['text':' 2 for offset, 1 for token ','line_number':1597,'multiline':True]['text':' restore correct out pointer ','line_number':1599,'multiline':True]['text':' ll validated; now adjust match length ','line_number':1601,'multiline':True]