['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' __linux__ / ANDROID','line_number':47,'multiline':False]['text':' TlsContext','line_number':49,'multiline':False]['text':' These definitions come from the Linux kernel source, for kernels before 4.16','line_number':55,'multiline':False]['text':' which didn't have access to these membarrier commands.','line_number':56,'multiline':False]['text':' __aarch64__','line_number':65,'multiline':False]['text':' Currently computes I and D cache line size.','line_number':70,'multiline':False]['text':' The cache type register holds information about the caches, including I','line_number':74,'multiline':False]['text':' D caches line size.','line_number':75,'multiline':False]['text':' The cache type register holds the size of the I and D caches in words as','line_number':81,'multiline':False]['text':' a power of two.','line_number':82,'multiline':False]['text':' Bug 1521158 suggests that having CPU with different cache line sizes could','line_number':91,'multiline':False]['text':' cause issues as we would only invalidate half of the cache line of we','line_number':92,'multiline':False]['text':' invalidate every 128 bytes, but other little cores have a different stride','line_number':93,'multiline':False]['text':' such as 64 bytes. To be conservative, we will try reducing the stride to 32','line_number':94,'multiline':False]['text':' bytes, which should be smaller than any known cache line.','line_number':95,'multiline':False]['text':' Copy the content of the cache type register to a core register.','line_number':105,'multiline':False]['text':' NOLINT','line_number':106,'multiline':False]['text':' This will lead to a cache with 1 byte long lines, which is fine since','line_number':111,'multiline':False]['text':' neither EnsureIAndDCacheCoherency nor the simulator will need this','line_number':112,'multiline':False]['text':' information.','line_number':113,'multiline':False]['text':' On linux, check the kernel supports membarrier(2), that is, it's a kernel','line_number':120,'multiline':False]['text':' above Linux 4.16 included.','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' Note: this code has been extracted (August 2020) from','line_number':123,'multiline':False]['text':' https://android.googlesource.com/platform/art/+/58520dfba31d6eeef75f5babff15e09aa28e5db8/libartbase/base/membarrier.cc#50','line_number':124,'multiline':False]['text':' As a test bed, try to run the syscall with the command registering the','line_number':139,'multiline':False]['text':' intent to use the actual membarrier we'll want to carry out later.','line_number':140,'multiline':False]['text':' On other platforms, we assume that the provided syscall does the right thing.','line_number':151,'multiline':False]['text':' This code attempts to emulate what the following assembly sequence is','line_number':158,'multiline':False]['text':' doing, which is sending the information to all cores that some cache line','line_number':159,'multiline':False]['text':' have to be invalidated and invalidating them only on the current core.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' This is done by recording the current range to be flushed to all','line_number':162,'multiline':False]['text':' simulators, then if there is a simulator associated with the current','line_number':163,'multiline':False]['text':' thread, applying all flushed ranges as the "isb" instruction would do.','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' As we have no control over the CPU cores used by the code generator and the','line_number':166,'multiline':False]['text':' execution threads, this code assumes that each thread runs on its own core.','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':' See Bug 1529933 for more detailed explanation of this issue.','line_number':169,'multiline':False]['text':' We're on a background thread; emulate what the real hardware would do by','line_number':179,'multiline':False]['text':' emitting a membarrier that'll interrupt and cause an icache invalidation','line_number':180,'multiline':False]['text':' on all the threads.','line_number':181,'multiline':False]['text':' Implement the cache synchronisation for all targets where AArch64 is the','line_number':189,'multiline':False]['text':' host, even if we're building the simulator for an AAarch64 host. This','line_number':190,'multiline':False]['text':' allows for cases where the user wants to simulate code as well as run it','line_number':191,'multiline':False]['text':' natively.','line_number':192,'multiline':False]['text':' The code below assumes user space cache operations are allowed.','line_number':198,'multiline':False]['text':' Work out the line sizes for each cache, and use them to determine the','line_number':200,'multiline':False]['text':' start addresses.','line_number':201,'multiline':False]['text':' Cache line sizes are always a power of 2.','line_number':208,'multiline':False]['text':' Clean each line of the D cache containing the target data.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' dc       : Data Cache maintenance','line_number':217,'multiline':False]['text':'     c    : Clean','line_number':218,'multiline':False]['text':'      i   : Invalidate','line_number':219,'multiline':False]['text':'      va  : by (Virtual) Address','line_number':220,'multiline':False]['text':'        c : to the point of Coherency','line_number':221,'multiline':False]['text':' Original implementation used cvau, but changed to civac due to','line_number':222,'multiline':False]['text':' errata on Cortex-A53 819472, 826319, 827319 and 824069.','line_number':223,'multiline':False]['text':' See ARM DDI 0406B page B2-12 for more information.','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' This code does not write to memory, but the "memory" dependency','line_number':229,'multiline':False]['text':' prevents GCC from reordering the code.','line_number':230,'multiline':False]['text':' Make sure that the data cache operations (above) complete before the','line_number':236,'multiline':False]['text':' instruction cache operations (below).','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' dsb      : Data Synchronisation Barrier','line_number':239,'multiline':False]['text':'      ish : Inner SHareable domain','line_number':240,'multiline':False]['text':'','line_number':241,'multiline':False]['text':' The point of unification for an Inner Shareable shareability domain is','line_number':242,'multiline':False]['text':' the point by which the instruction and data caches of all the processors','line_number':243,'multiline':False]['text':' in that Inner Shareable shareability domain are guaranteed to see the','line_number':244,'multiline':False]['text':' same copy of a memory location.  See ARM DDI 0406B page B2-12 for more','line_number':245,'multiline':False]['text':' information.','line_number':246,'multiline':False]['text':' Invalidate each line of the I cache containing the target data.','line_number':252,'multiline':False]['text':'','line_number':253,'multiline':False]['text':' ic      : Instruction Cache maintenance','line_number':254,'multiline':False]['text':'    i    : Invalidate','line_number':255,'multiline':False]['text':'     va  : by Address','line_number':256,'multiline':False]['text':'       u : to the point of Unification','line_number':257,'multiline':False]['text':' Make sure that the instruction cache operations (above) take effect','line_number':266,'multiline':False]['text':' before the isb (below).','line_number':267,'multiline':False]['text':' Ensure that any instructions already in the pipeline are discarded and','line_number':270,'multiline':False]['text':' reloaded from the new data.','line_number':271,'multiline':False]['text':' isb : Instruction Synchronisation Barrier','line_number':272,'multiline':False]['text':' If we're on a background thread, emit a membarrier that will synchronize','line_number':277,'multiline':False]['text':' all the executing threads with the new version of the code.','line_number':278,'multiline':False]['text':' The intent to use this command has been carried over in','line_number':282,'multiline':False]['text':' CanFlushICacheFromBackgroundThreads.','line_number':283,'multiline':False]['text':' Better safe than sorry.','line_number':285,'multiline':False]['text':' If the host isn't AArch64, we must be using the simulator, so this function','line_number':291,'multiline':False]['text':' doesn't have to do anything.','line_number':292,'multiline':False]['text':' namespace vixl','line_number':297,'multiline':False]