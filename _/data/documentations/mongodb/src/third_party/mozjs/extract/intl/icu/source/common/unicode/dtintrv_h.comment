['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2008-2009, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File DTINTRV.H 
*
*******************************************************************************
','line_number':3,'multiline':True]['text':'*
 * \file
 * \brief C++ API: Date Interval data type
 ','line_number':23,'multiline':True]['text':'*
 * This class represents a date interval.
 * It is a pair of UDate representing from UDate 1 to UDate 2.
 * @stable ICU 4.0
*','line_number':31,'multiline':True]['text':'* 
     * Construct a DateInterval given a from date and a to date.
     * @param fromDate  The from date in date interval.
     * @param toDate    The to date in date interval.
     * @stable ICU 4.0
     ','line_number':39,'multiline':True]['text':'*
     * destructor
     * @stable ICU 4.0
     ','line_number':47,'multiline':True]['text':'* 
     * Get the from date.
     * @return  the from date in dateInterval.
     * @stable ICU 4.0
     ','line_number':53,'multiline':True]['text':'* 
     * Get the to date.
     * @return  the to date in dateInterval.
     * @stable ICU 4.0
     ','line_number':60,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to
     * a return value from getDynamicClassID(). For example:
     * <pre>
     * .   Base* polymorphic_pointer = createPolymorphicObject();
     * .   if (polymorphic_pointer->getDynamicClassID() ==
     * .       derived::getStaticClassID()) ...
     * </pre>
     * @return          The class ID for all objects of this class.
     * @stable ICU 4.0
     ','line_number':68,'multiline':True]['text':'*
     * Returns a unique class ID POLYMORPHICALLY. Pure virtual override. This
     * method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone()
     * methods call this method.
     *
     * @return          The class ID for this object. All objects of a
     *                  given class have the same class ID.  Objects of
     *                  other classes have different class IDs.
     * @stable ICU 4.0
     ','line_number':81,'multiline':True]['text':'*
     * Copy constructor.
     * @stable ICU 4.0
     ','line_number':95,'multiline':True]['text':'*
     * Default assignment operator
     * @stable ICU 4.0
     ','line_number':101,'multiline':True]['text':'*
     * Equality operator.
     * @return true if the two DateIntervals are the same
     * @stable ICU 4.0
     ','line_number':107,'multiline':True]['text':'*
     * Non-equality operator
     * @return true if the two DateIntervals are not the same
     * @stable ICU 4.0
     ','line_number':114,'multiline':True]['text':'*
     * clone this object. 
     * The caller owns the result and should delete it when done.
     * @return a cloned DateInterval
     * @stable ICU 4.0
     ','line_number':122,'multiline':True]['text':'* 
     * Default constructor, not implemented.
     ','line_number':131,'multiline':True]['text':' end class DateInterval','line_number':139,'multiline':False]['text':' U_SHOW_CPLUSPLUS_API ','line_number':162,'multiline':True]