['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' JSJitInfo','line_number':32,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':33,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':34,'multiline':False]['text':' ============================================================================','line_number':59,'multiline':False]['text':' WebAssembly builtin C++ functions called from wasm code to implement internal','line_number':60,'multiline':False]['text':' wasm operations: type descriptions.','line_number':61,'multiline':False]['text':' Some abbreviations, for the sake of conciseness.','line_number':63,'multiline':False]['text':' namespace wasm','line_number':256,'multiline':False]['text':' namespace js','line_number':257,'multiline':False]['text':' ============================================================================','line_number':314,'multiline':False]['text':' WebAssembly builtin C++ functions called from wasm code to implement internal','line_number':315,'multiline':False]['text':' wasm operations: implementations.','line_number':316,'multiline':False]['text':' This utility function can only be called for builtins that are called','line_number':327,'multiline':False]['text':' directly from wasm code.','line_number':328,'multiline':False]['text':' The debug trap stub is the innermost frame. It's return address is the','line_number':343,'multiline':False]['text':' actual trap site.','line_number':344,'multiline':False]['text':' Advance to the actual trapping frame.','line_number':348,'multiline':False]['text':' Ignoring forced return because changing code execution order is','line_number':361,'multiline':False]['text':' not yet implemented in the wasm baseline.','line_number':362,'multiline':False]['text':' TODO properly handle forced return and resume wasm execution.','line_number':363,'multiline':False]['text':' TODO properly handle forced return.','line_number':386,'multiline':False]['text':' TODO properly handle forced return.','line_number':397,'multiline':False]['text':' Check if the pending exception, if any, is catchable by wasm.','line_number':407,'multiline':False]['text':' Traps are generally not catchable as wasm exceptions. The only case in','line_number':415,'multiline':False]['text':' which they are catchable is for Trap::ThrowReported, which the wasm','line_number':416,'multiline':False]['text':' compiler uses to throw exceptions and is the source of exceptions from C++.','line_number':417,'multiline':False]['text':' Write the exception out here to exn to avoid having to get the pending','line_number':427,'multiline':False]['text':' exception and checking for OOM multiple times.','line_number':428,'multiline':False]['text':' Check if a JS exception originated from a wasm trap.','line_number':430,'multiline':False]['text':' Unwind the entire activation in response to a thrown exception. This function','line_number':445,'multiline':False]['text':' is responsible for notifying the debugger of each unwound frame. The return','line_number':446,'multiline':False]['text':' value is the new stack address which the calling stub will set to the sp','line_number':447,'multiline':False]['text':' register before executing a return instruction.','line_number':448,'multiline':False]['text':'','line_number':449,'multiline':False]['text':' This function will also look for try-catch handlers and, if not trapping or','line_number':450,'multiline':False]['text':' throwing an uncatchable exception, will write the handler info in the return','line_number':451,'multiline':False]['text':' argument and return true.','line_number':452,'multiline':False]['text':'','line_number':453,'multiline':False]['text':' Returns false if a handler isn't found or shouldn't be used (e.g., traps).','line_number':454,'multiline':False]['text':' WasmFrameIter iterates down wasm frames in the activation starting at','line_number':458,'multiline':False]['text':' JitActivation::wasmExitFP(). Calling WasmFrameIter::startUnwinding pops','line_number':459,'multiline':False]['text':' JitActivation::wasmExitFP() once each time WasmFrameIter is incremented,','line_number':460,'multiline':False]['text':' ultimately leaving exit FP null when the WasmFrameIter is done().  This','line_number':461,'multiline':False]['text':' is necessary to prevent a DebugFrame from being observed again after we','line_number':462,'multiline':False]['text':' just called onLeaveFrame (which would lead to the frame being re-added','line_number':463,'multiline':False]['text':' to the map of live frames, right as it becomes trash).','line_number':464,'multiline':False]['text':' Live wasm code on the stack is kept alive (in TraceJitActivation) by','line_number':470,'multiline':False]['text':' marking the instance of every wasm::Frame found by WasmFrameIter.','line_number':471,'multiline':False]['text':' However, as explained above, we're popping frames while iterating which','line_number':472,'multiline':False]['text':' means that a GC during this loop could collect the code of frames whose','line_number':473,'multiline':False]['text':' code is still on the stack. This is actually mostly fine: as soon as we','line_number':474,'multiline':False]['text':' return to the throw stub, the entire stack will be popped as a whole,','line_number':475,'multiline':False]['text':' returning to the C++ caller. However, we must keep the throw stub alive','line_number':476,'multiline':False]['text':' itself which is owned by the innermost instance.','line_number':477,'multiline':False]['text':' Wasm code can enter same-compartment realms, so reset cx->realm to','line_number':487,'multiline':False]['text':' this frame's realm.','line_number':488,'multiline':False]['text':' Only look for an exception handler if there's a catchable exception.','line_number':492,'multiline':False]['text':' GenerateThrowStub in WasmStubs.cpp expects this argument to be','line_number':511,'multiline':False]['text':' the exception object Value.','line_number':512,'multiline':False]['text':' Make sure to clear trapping state if we got here due to a trap.','line_number':521,'multiline':False]['text':' Assume ResumeMode::Terminate if no exception is pending --','line_number':538,'multiline':False]['text':' no onExceptionUnwind handlers must be fired.','line_number':539,'multiline':False]['text':' Unexpected trap return -- raising error since throw recovery','line_number':544,'multiline':False]['text':' is not yet implemented in the wasm baseline.','line_number':545,'multiline':False]['text':' TODO properly handle forced return and resume wasm execution.','line_number':546,'multiline':False]['text':' Unexpected success from the handler onLeaveFrame -- raising error','line_number':555,'multiline':False]['text':' since throw recovery is not yet implemented in the wasm baseline.','line_number':556,'multiline':False]['text':' TODO properly handle success and resume wasm execution.','line_number':557,'multiline':False]['text':' In case of no handler, exit wasm via ret().','line_number':566,'multiline':False]['text':' FailFP signals to wasm stub to do a failure return.','line_number':567,'multiline':False]['text':' We can ignore the return result here because the throw stub code','line_number':579,'multiline':False]['text':' can just check the resume kind to see if a handler was found or not.','line_number':580,'multiline':False]['text':' Unconditionally returns nullptr per calling convention of HandleTrap().','line_number':585,'multiline':False]['text':' Distinguish exceptions thrown from traps from other RuntimeErrors.','line_number':593,'multiline':False]['text':' Has the same return-value convention as HandleTrap().','line_number':605,'multiline':False]['text':' The calling convention between this function and its caller in the stub','line_number':618,'multiline':False]['text':' generated by GenerateTrapExit() is:','line_number':619,'multiline':False]['text':'   - return nullptr if the stub should jump to the throw stub to unwind','line_number':620,'multiline':False]['text':'     the activation;','line_number':621,'multiline':False]['text':'   - return the (non-null) resumePC that should be jumped if execution should','line_number':622,'multiline':False]['text':'     resume after the trap.','line_number':623,'multiline':False]['text':' TlsData::setInterrupt() causes a fake stack overflow. Since','line_number':652,'multiline':False]['text':' TlsData::setInterrupt() is called racily, it's possible for a real','line_number':653,'multiline':False]['text':' stack overflow to trap, followed by a racy call to setInterrupt().','line_number':654,'multiline':False]['text':' Thus, we must check for a real stack overflow first before we','line_number':655,'multiline':False]['text':' CheckInterrupt() and possibly resume execution.','line_number':656,'multiline':False]['text':' Error was already reported under another name.','line_number':667,'multiline':False]['text':' In this case we store a BigInt value as there is no value type','line_number':754,'multiline':False]['text':' corresponding directly to an I64. The conversion to I64 happens','line_number':755,'multiline':False]['text':' in the JIT entry stub.','line_number':756,'multiline':False]['text':' No need to convert double-to-float for f32, it's done inline','line_number':770,'multiline':False]['text':' in the wasm stub later.','line_number':771,'multiline':False]['text':' Leave Object and Null alone, we will unbox inline.  All we need','line_number':778,'multiline':False]['text':' to do is convert other values to an Object representation.','line_number':779,'multiline':False]['text':' Guarded against by temporarilyUnsupportedReftypeForEntry()','line_number':791,'multiline':False]['text':' Guarded against by hasV128ArgOrRet()','line_number':797,'multiline':False]['text':' Allocate a BigInt without GC, corresponds to the similar VMFunction.','line_number':809,'multiline':False]['text':' Note: INT64_MAX is not representable in double. It is actually','line_number':851,'multiline':False]['text':' INT64_MAX + 1.  Therefore also sending the failure value.','line_number':852,'multiline':False]['text':' Note: UINT64_MAX is not representable in double. It is actually','line_number':860,'multiline':False]['text':' UINT64_MAX + 1.  Therefore also sending the failure value.','line_number':861,'multiline':False]['text':' Handle in-range values (except INT64_MIN).','line_number':869,'multiline':False]['text':' Handle NaN.','line_number':873,'multiline':False]['text':' Handle positive overflow.','line_number':877,'multiline':False]['text':' Handle negative overflow.','line_number':881,'multiline':False]['text':' Handle positive overflow.','line_number':886,'multiline':False]['text':' Handle in-range values.','line_number':890,'multiline':False]['text':' Handle NaN and negative overflow.','line_number':894,'multiline':False]['text':' Some functions don't want to a thunk, because they already have one or','line_number':1305,'multiline':False]['text':' they don't have frame info.','line_number':1306,'multiline':False]['text':' GenerateDebugTrapStub','line_number':1308,'multiline':False]['text':' GenerateThrowStub','line_number':1309,'multiline':False]['text':' GenerateTrapExit','line_number':1310,'multiline':False]['text':' GenerateImportInterpExit','line_number':1311,'multiline':False]['text':' GenerateImportJitExit','line_number':1312,'multiline':False]['text':' Used only in stubs','line_number':1325,'multiline':False]['text':' ============================================================================','line_number':1408,'multiline':False]['text':' JS builtins that can be imported by wasm modules and called efficiently','line_number':1409,'multiline':False]['text':' through thunks. These thunks conform to the internal wasm ABI and thus can be','line_number':1410,'multiline':False]['text':' patched in for import calls. Calling a JS builtin through a thunk is much','line_number':1411,'multiline':False]['text':' faster than calling out through the generic import call trampoline which will','line_number':1412,'multiline':False]['text':' end up in the slowest C++ Instance::callImport path.','line_number':1413,'multiline':False]['text':'','line_number':1414,'multiline':False]['text':' Each JS builtin can have several overloads. These must all be enumerated in','line_number':1415,'multiline':False]['text':' PopulateTypedNatives() so they can be included in the process-wide thunk set.','line_number':1416,'multiline':False]['text':' ============================================================================','line_number':1527,'multiline':False]['text':' Process-wide builtin thunk set','line_number':1528,'multiline':False]['text':'','line_number':1529,'multiline':False]['text':' Thunks are inserted between wasm calls and the C++ callee and achieve two','line_number':1530,'multiline':False]['text':' things:','line_number':1531,'multiline':False]['text':'  - bridging the few differences between the internal wasm ABI and the','line_number':1532,'multiline':False]['text':'    external native ABI (viz. float returns on x86 and soft-fp ARM)','line_number':1533,'multiline':False]['text':'  - executing an exit prologue/epilogue which in turn allows any profiling','line_number':1534,'multiline':False]['text':'    iterator to see the full stack up to the wasm operation that called out','line_number':1535,'multiline':False]['text':'','line_number':1536,'multiline':False]['text':' Thunks are created for two kinds of C++ callees, enumerated above:','line_number':1537,'multiline':False]['text':'  - SymbolicAddress: for statically compiled calls in the wasm module','line_number':1538,'multiline':False]['text':'  - Imported JS builtins: optimized calls to imports','line_number':1539,'multiline':False]['text':'','line_number':1540,'multiline':False]['text':' All thunks are created up front, lazily, when the first wasm module is','line_number':1541,'multiline':False]['text':' compiled in the process. Thunks are kept alive until the JS engine shuts down','line_number':1542,'multiline':False]['text':' in the process. No thunks are created at runtime after initialization. This','line_number':1543,'multiline':False]['text':' simple scheme allows several simplifications:','line_number':1544,'multiline':False]['text':'  - no reference counting to keep thunks alive','line_number':1545,'multiline':False]['text':'  - no problems toggling W^X permissions which, because of multiple executing','line_number':1546,'multiline':False]['text':'    threads, would require each thunk allocation to be on its own page','line_number':1547,'multiline':False]['text':' The cost for creating all thunks at once is relatively low since all thunks','line_number':1548,'multiline':False]['text':' fit within the smallest executable quanta (64k).','line_number':1549,'multiline':False]['text':' Provisional lazy JitEntry stub: This is a shared stub that can be installed','line_number':1643,'multiline':False]['text':' in the jit-entry jump table.  It uses the JIT ABI and when invoked will','line_number':1644,'multiline':False]['text':' retrieve (via TlsContext()) and invoke the context-appropriate','line_number':1645,'multiline':False]['text':' invoke-from-interpreter jit stub, thus serving as the initial, unoptimized','line_number':1646,'multiline':False]['text':' jit-entry stub for any exported wasm function that has a jit-entry.','line_number':1647,'multiline':False]['text':' We need to allow this machine code to bake in a C++ code pointer, so we','line_number':1650,'multiline':False]['text':' disable the wasm restrictions while generating this stub.','line_number':1651,'multiline':False]