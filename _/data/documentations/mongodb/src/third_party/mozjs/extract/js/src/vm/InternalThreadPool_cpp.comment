['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' We want our default stack size limit to be approximately 2MB, to be safe, but','line_number':17,'multiline':False]['text':' expect most threads to use much less. On Linux, however, requesting a stack','line_number':18,'multiline':False]['text':' of 2MB or larger risks the kernel allocating an entire 2MB huge page for it','line_number':19,'multiline':False]['text':' on first access, which we do not want. To avoid this possibility, we subtract','line_number':20,'multiline':False]['text':' 2 standard VM page sizes from our default.','line_number':21,'multiline':False]['text':' TSan enforces a minimum stack size that's just slightly larger than our','line_number':24,'multiline':False]['text':' default helper stack size.  It does this to store blobs of TSan-specific','line_number':25,'multiline':False]['text':' data on each thread's stack.  Unfortunately, that means that even though','line_number':26,'multiline':False]['text':' we'll actually receive a larger stack than we requested, the effective','line_number':27,'multiline':False]['text':' usable space of that stack is significantly less than what we expect.','line_number':28,'multiline':False]['text':' To offset TSan stealing our stack space from underneath us, double the','line_number':29,'multiline':False]['text':' default.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' Note that we don't need this for ASan/MOZ_ASAN because ASan doesn't','line_number':32,'multiline':False]['text':' require all the thread-specific state that TSan does.','line_number':33,'multiline':False]['text':' These macros are identical in function to the same-named ones in','line_number':40,'multiline':False]['text':' GeckoProfiler.h, but they are defined separately because SpiderMonkey can't','line_number':41,'multiline':False]['text':' use GeckoProfiler.h.','line_number':42,'multiline':False]['text':'
   * The profiling thread for this helper thread, which can be used to push
   * and pop label frames.
   * This field being non-null indicates that this thread has been registered
   * and needs to be unregistered at shutdown.
   ','line_number':57,'multiline':True]['text':' namespace js','line_number':90,'multiline':False]['text':' static ','line_number':94,'multiline':True]['text':' static ','line_number':99,'multiline':True]['text':' static ','line_number':146,'multiline':True]['text':' static ','line_number':183,'multiline':True]['text':' static ','line_number':209,'multiline':True]['text':' Note: To avoid dead locks, we should not hold on the helper thread lock','line_number':223,'multiline':False]['text':' while calling this function. This is safe because the registerThread field','line_number':224,'multiline':False]['text':' is a WriteOnceData<> type stored on the global helper tread state.','line_number':225,'multiline':False]['text':' Note: To avoid dead locks, we should not hold on the helper thread lock','line_number':238,'multiline':False]['text':' while calling this function. This is safe because the unregisterThread','line_number':239,'multiline':False]['text':' field is a WriteOnceData<> type stored on the global helper tread state.','line_number':240,'multiline':False]