['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Everything needed to build actual MIR instructions: the actual opcodes and
 * instructions, the instruction interface, and use chains.
 ','line_number':7,'multiline':True]['text':' JSJit{Getter,Setter}Op, JSJitInfo','line_number':34,'multiline':False]['text':' js::Scalar::Type','line_number':37,'multiline':False]['text':' js::FunctionFlags','line_number':44,'multiline':False]['text':' namespace wasm','line_number':59,'multiline':False]['text':' Forward declarations of MIR types.','line_number':70,'multiline':False]['text':' MDefinition visitor which ignores non-overloaded visit functions.','line_number':75,'multiline':False]['text':' Allow passes like LICM to move this instruction ','line_number':112,'multiline':True]['text':' (Debug only) has a virtual register ','line_number':113,'multiline':True]['text':' Not removable if uses == 0 ','line_number':114,'multiline':True]['text':' Flag an instruction to be considered as a Guard if the instructions       \
   * bails out on some inputs.                                                 \
   *                                                                           \
   * Some optimizations can replace an instruction, and leave its operands     \
   * unused. When the type information of the operand got used as a            \
   * predicate of the transformation, then we have to flag the operands as     \
   * GuardRangeBailouts.                                                       \
   *                                                                           \
   * This flag prevents further optimization of instructions, which            \
   * might remove the run-time checks (bailout conditions) used as a           \
   * predicate of the previous transformation.                                 \
   ','line_number':116,'multiline':True]['text':' Some instructions have uses that aren't directly represented in the       \
   * graph, and need to be handled specially. As an example, this is used to   \
   * keep the flagged instruction in resume points, not substituting with an   \
   * UndefinedValue. This can be used by call inlining when a function         \
   * argument is not used by the inlined instructions. It is also used         \
   * to annotate instructions which were used in removed branches.             \
   ','line_number':130,'multiline':True]['text':' The instruction has been marked dead for lazy removal from resume         \
   * points.                                                                   \
   ','line_number':139,'multiline':True]['text':' Marks if the current instruction should go to the bailout paths instead   \
   * of producing code as part of the control flow.  This flag can only be set \
   * on instructions which are only used by ResumePoint or by other flagged    \
   * instructions.                                                             \
   ','line_number':144,'multiline':True]['text':' Some instructions might represent an object, but the memory of these      \
   * objects might be incomplete if we have not recovered all the stores which \
   * were supposed to happen before. This flag is used to annotate             \
   * instructions which might return a pointer to a memory area which is not   \
   * yet fully initialized. This flag is used to ensure that stores are        \
   * executed before returning the value.                                      \
   ','line_number':151,'multiline':True]['text':' For WebAssembly, there are functions with multiple results.  Instead of   \
   * having the results defined by one call instruction, they are instead      \
   * captured in subsequent result capture instructions, because modelling     \
   * multi-value results in Ion is too complicated.  However since they        \
   * capture ambient live registers, it would be an error to move an unrelated \
   * instruction between the call and the result capture.  This flag is used   \
   * to prevent code motion from moving instructions in invalid ways.          \
   ','line_number':160,'multiline':True]['text':' The current instruction got discarded from the MIR Graph. This is useful  \
   * when we want to iterate over resume points and instructions, while        \
   * handling instructions which are discarded without reporting to the        \
   * iterator.                                                                 \
   ','line_number':170,'multiline':True]['text':' Represents a use of a node.','line_number':187,'multiline':False]['text':' Grant access to setProducerUnchecked.','line_number':189,'multiline':False]['text':' MDefinition that is being used.','line_number':193,'multiline':False]['text':' The node that is using this operand.','line_number':194,'multiline':False]['text':' Low-level unchecked edit method for replaceAllUsesWith and','line_number':196,'multiline':False]['text':' MPhi::removeOperand. This doesn't update use lists!','line_number':197,'multiline':False]['text':' replaceAllUsesWith and MPhi::removeOperand do that manually.','line_number':198,'multiline':False]['text':' Default constructor for use in vectors.','line_number':207,'multiline':False]['text':' Move constructor for use in vectors. When an MUse is moved, it stays','line_number':210,'multiline':False]['text':' in its containing use list.','line_number':211,'multiline':False]['text':' Construct an MUse initialized with |producer| and |consumer|.','line_number':217,'multiline':False]['text':' Set this use, which was previously clear.','line_number':222,'multiline':False]['text':' Like init, but works even when the use contains uninitialized data.','line_number':224,'multiline':False]['text':' Like initUnchecked, but set the producer to nullptr.','line_number':226,'multiline':False]['text':' Set this use, which was not previously clear.','line_number':228,'multiline':False]['text':' Clear this use.','line_number':230,'multiline':False]['text':' Return the operand index of this MUse in its consumer. This is DEBUG-only','line_number':244,'multiline':False]['text':' as normal code should instead call indexOf on the cast consumer directly,','line_number':245,'multiline':False]['text':' to allow it to be devirtualized and inlined.','line_number':246,'multiline':False]['text':' A node is an entry in the MIR graph. It has two kinds:','line_number':253,'multiline':False]['text':'   MInstruction: an instruction which appears in the IR stream.','line_number':254,'multiline':False]['text':'   MResumePoint: a list of instructions that correspond to the state of the','line_number':255,'multiline':False]['text':'                 interpreter/Baseline stack.','line_number':256,'multiline':False]['text':'','line_number':257,'multiline':False]['text':' Nodes can hold references to MDefinitions. Each MDefinition has a list of','line_number':258,'multiline':False]['text':' nodes holding such a reference (its use chain).','line_number':259,'multiline':False]['text':' Use a subtraction: if the caller does block()->foo, the compiler','line_number':290,'multiline':False]['text':' will be able to fold it with the load.','line_number':291,'multiline':False]['text':' Returns the definition at a given operand.','line_number':296,'multiline':False]['text':' Sets an already set operand, updating use information. If you're looking','line_number':308,'multiline':False]['text':' for setOperand, this is probably what you want.','line_number':309,'multiline':False]['text':' Resets the operand to an uninitialized state, breaking the link','line_number':312,'multiline':False]['text':' with the previous operand's producer.','line_number':313,'multiline':False]['text':' Need visibility on getUseFor to avoid O(n^2) complexity.','line_number':331,'multiline':False]['text':' Gets the MUse corresponding to given operand.','line_number':334,'multiline':False]['text':' shape, class, slots, length etc.','line_number':346,'multiline':False]['text':' A Value member of obj->elements or','line_number':347,'multiline':False]['text':' a typed object.','line_number':348,'multiline':False]['text':' An unboxed scalar or reference member of','line_number':349,'multiline':False]['text':' typed object.','line_number':350,'multiline':False]['text':' A Value member of obj->slots.','line_number':351,'multiline':False]['text':' A Value member of obj->fixedSlots().','line_number':352,'multiline':False]['text':' A DOM property','line_number':353,'multiline':False]['text':' An asm.js/wasm private global var','line_number':354,'multiline':False]['text':' An asm.js/wasm heap load','line_number':355,'multiline':False]['text':' The asm.js/wasm heap base pointer and','line_number':356,'multiline':False]['text':' bounds check limit, in Tls.','line_number':357,'multiline':False]['text':' An array buffer view's length or byteOffset','line_number':359,'multiline':False]['text':' A wasm global cell','line_number':360,'multiline':False]['text':' An element of a wasm table','line_number':361,'multiline':False]['text':' A stack result from the current function','line_number':362,'multiline':False]['text':' JSContext's exception state. This is used on instructions like MThrow','line_number':364,'multiline':False]['text':' or MNewArrayDynamicLength that throw exceptions (other than OOM) but have','line_number':365,'multiline':False]['text':' no other side effect, to ensure that they get their own up-to-date resume','line_number':366,'multiline':False]['text':' point. (This resume point will be used when constructing the Baseline','line_number':367,'multiline':False]['text':' frame during exception bailouts.)','line_number':368,'multiline':False]['text':' Used for instructions that load the privateSlot of DOM proxies and','line_number':371,'multiline':False]['text':' the ExpandoAndGeneration.','line_number':372,'multiline':False]['text':' Indicates load or store.','line_number':380,'multiline':False]['text':' When a floating-point value is used by nodes which would prefer to','line_number':414,'multiline':False]['text':' receive integer inputs, we may be able to help by computing our result','line_number':415,'multiline':False]['text':' into an integer directly.','line_number':416,'multiline':False]['text':'','line_number':417,'multiline':False]['text':' A value can be truncated in 4 differents ways:','line_number':418,'multiline':False]['text':'   1. Ignore Infinities (x / 0 --> 0).','line_number':419,'multiline':False]['text':'   2. Ignore overflow (INT_MIN / -1 == (INT_MAX + 1) --> INT_MIN)','line_number':420,'multiline':False]['text':'   3. Ignore negative zeros. (-0 --> 0)','line_number':421,'multiline':False]['text':'   4. Ignore remainder. (3 / 4 --> 0)','line_number':422,'multiline':False]['text':'','line_number':423,'multiline':False]['text':' Indirect truncation is used to represent that we are interested in the','line_number':424,'multiline':False]['text':' truncated result, but only if it can safely flow into operations which','line_number':425,'multiline':False]['text':' are computed modulo 2^32, such as (2) and (3). Infinities are not safe,','line_number':426,'multiline':False]['text':' as they would have absorbed other math operations. Remainders are not','line_number':427,'multiline':False]['text':' safe, as fractions can be scaled up by multiplication.','line_number':428,'multiline':False]['text':'','line_number':429,'multiline':False]['text':' Division is a particularly interesting node here because it covers all 4','line_number':430,'multiline':False]['text':' cases even when its own operands are integers.','line_number':431,'multiline':False]['text':'','line_number':432,'multiline':False]['text':' Note that these enum values are ordered from least value-modifying to','line_number':433,'multiline':False]['text':' most value-modifying, and code relies on this ordering.','line_number':434,'multiline':False]['text':' No correction.','line_number':436,'multiline':False]['text':' An integer is desired, but we can't skip bailout checks.','line_number':438,'multiline':False]['text':' The value will be truncated after some arithmetic (see above).','line_number':440,'multiline':False]['text':' Direct and infallible truncation to int32.','line_number':442,'multiline':False]['text':' An MDefinition is an SSA name.','line_number':446,'multiline':False]['text':' Use chain.','line_number':458,'multiline':False]['text':' Instruction ID, which after block re-ordering','line_number':459,'multiline':False]['text':' is sorted within a basic block.','line_number':460,'multiline':False]['text':' Opcode.','line_number':461,'multiline':False]['text':' Bit flags.','line_number':462,'multiline':False]['text':' Any computed range for this def.','line_number':463,'multiline':False]['text':' Implicit dependency (store, call, etc.) of this','line_number':466,'multiline':False]['text':' instruction. Used by alias analysis, GVN and LICM.','line_number':467,'multiline':False]['text':' Used by lowering to map definitions to','line_number':468,'multiline':False]['text':' virtual registers.','line_number':469,'multiline':False]['text':' Track bailouts by storing the current pc in MIR instruction. Also used','line_number':472,'multiline':False]['text':' for profiling and keeping track of what the last known pc was.','line_number':473,'multiline':False]['text':' If we generate a bailout path for this instruction, this is the','line_number':476,'multiline':False]['text':' bailout kind that will be encoded in the snapshot. When we bail out,','line_number':477,'multiline':False]['text':' FinishBailoutToBaseline may take action based on the bailout kind to','line_number':478,'multiline':False]['text':' prevent bailout loops. (For example, if an instruction bails out after','line_number':479,'multiline':False]['text':' being hoisted by LICM, we will disable LICM when recompiling the script.)','line_number':480,'multiline':False]['text':' Representation of result type.','line_number':483,'multiline':False]['text':' Calling isDefinition or isResumePoint on MDefinition is unnecessary.','line_number':498,'multiline':False]['text':' Copying a definition leaves the list of uses empty.','line_number':530,'multiline':False]['text':' Also for LICM. Test whether this definition is likely to be a call, which','line_number':555,'multiline':False]['text':' would clobber all or many of the floating-point registers, such that','line_number':556,'multiline':False]['text':' hoisting floating-point constants out of containing loops isn't likely to','line_number':557,'multiline':False]['text':' be worthwhile.','line_number':558,'multiline':False]['text':' Return the range of this value, *before* any bailout checks. Contrast','line_number':587,'multiline':False]['text':' this with the type() method, and the Range constructor which takes an','line_number':588,'multiline':False]['text':' MDefinition*, which describe the value *after* any bailout checks.','line_number':589,'multiline':False]['text':'','line_number':590,'multiline':False]['text':' Warning: Range analysis is removing the bit-operations such as '| 0' at','line_number':591,'multiline':False]['text':' the end of the transformations. Using this function to analyse any','line_number':592,'multiline':False]['text':' operands after the truncate phase of the range analysis will lead to','line_number':593,'multiline':False]['text':' errors. Instead, one should define the collectRangeInfoPreTrunc() to set','line_number':594,'multiline':False]['text':' the right set of flags which are dependent on the range of the inputs.','line_number':595,'multiline':False]['text':' |needTruncation| records the truncation kind of the results, such that it','line_number':612,'multiline':False]['text':' can be used to truncate the operands of this instruction.  If','line_number':613,'multiline':False]['text':' |needTruncation| function returns true, then the |truncate| function is','line_number':614,'multiline':False]['text':' called on the same instruction to mutate the instruction, such as','line_number':615,'multiline':False]['text':' updating the return type, the range and the specialization of the','line_number':616,'multiline':False]['text':' instruction.','line_number':617,'multiline':False]['text':' Determine what kind of truncate this node prefers for the operand at the','line_number':621,'multiline':False]['text':' given index.','line_number':622,'multiline':False]['text':' Compute an absolute or symbolic range for the value of this node.','line_number':625,'multiline':False]['text':' Collect information from the pre-truncated ranges.','line_number':628,'multiline':False]['text':' Return the type of this value. This may be speculative, and enforced','line_number':657,'multiline':False]['text':' dynamically with the use of bailout checks. If all the bailout checks','line_number':658,'multiline':False]['text':' pass, the value will have this type.','line_number':659,'multiline':False]['text':'','line_number':660,'multiline':False]['text':' Unless this is an MUrsh that has bailouts disabled, which, as a special','line_number':661,'multiline':False]['text':' case, may return a value in (INT32_MAX,UINT32_MAX] even when its type()','line_number':662,'multiline':False]['text':' is MIRType::Int32.','line_number':663,'multiline':False]['text':' Return true if the result-set types are a subset of the given types.','line_number':682,'multiline':False]['text':' Float32 specialization operations (see big comment in IonAnalysis before','line_number':685,'multiline':False]['text':' the Float32 specialization algorithm).','line_number':686,'multiline':False]['text':' Used during the pass that checks that Float32 flow into valid MDefinitions','line_number':692,'multiline':False]['text':' Returns the beginning of this definition's use chain.','line_number':698,'multiline':False]['text':' Returns the end of this definition's use chain.','line_number':701,'multiline':False]['text':' Removes a use at the given position','line_number':706,'multiline':False]['text':' Number of uses of this instruction. This function is only available','line_number':710,'multiline':False]['text':' in DEBUG mode since it requires traversing the list. Most users should','line_number':711,'multiline':False]['text':' use hasUses() or hasOneUse() instead.','line_number':712,'multiline':False]['text':' Number of uses of this instruction (only counting MDefinitions, ignoring','line_number':715,'multiline':False]['text':' MResumePoints). This function is only available in DEBUG mode since it','line_number':716,'multiline':False]['text':' requires traversing the list. Most users should use hasUses() or','line_number':717,'multiline':False]['text':' hasOneUse() instead.','line_number':718,'multiline':False]['text':' Test whether this MDefinition has exactly one use.','line_number':722,'multiline':False]['text':' Test whether this MDefinition has exactly one use.','line_number':725,'multiline':False]['text':' (only counting MDefinitions, ignoring MResumePoints)','line_number':726,'multiline':False]['text':' Test whether this MDefinition has at least one use.','line_number':729,'multiline':False]['text':' (only counting MDefinitions, ignoring MResumePoints)','line_number':730,'multiline':False]['text':' Test whether this MDefinition has at least one non-recovered use.','line_number':733,'multiline':False]['text':' (only counting MDefinitions, ignoring MResumePoints)','line_number':734,'multiline':False]['text':' If this MDefinition has a single use (ignoring MResumePoints), returns that','line_number':739,'multiline':False]['text':' use's definition. Else returns nullptr.','line_number':740,'multiline':False]['text':' Returns the most recently added use (ignoring MResumePoints) for this','line_number':743,'multiline':False]['text':' MDefinition. Returns nullptr if there are no uses. Note that this relies on','line_number':744,'multiline':False]['text':' addUse adding new uses to the front of the list, and should only be called','line_number':745,'multiline':False]['text':' during MIR building (before optimization passes make changes to the uses).','line_number':746,'multiline':False]['text':' Replace the current instruction by a dominating instruction |dom| in all','line_number':762,'multiline':False]['text':' uses of the current instruction.','line_number':763,'multiline':False]['text':' Like replaceAllUsesWith, but doesn't set ImplicitlyUsed on |this|'s','line_number':766,'multiline':False]['text':' operands.','line_number':767,'multiline':False]['text':' Replace the current instruction by an optimized-out constant in all uses','line_number':770,'multiline':False]['text':' of the current instruction. Note, that optimized-out constant should not','line_number':771,'multiline':False]['text':' be observed, and thus they should not flow in any computation.','line_number':772,'multiline':False]['text':' Replace the current instruction by a dominating instruction |dom| in all','line_number':775,'multiline':False]['text':' instruction, but keep the current instruction for resume point and','line_number':776,'multiline':False]['text':' instruction which are recovered on bailouts.','line_number':777,'multiline':False]['text':' Mark this instruction as having replaced all uses of ins, as during GVN,','line_number':780,'multiline':False]['text':' returning false if the replacement should not be performed. For use when','line_number':781,'multiline':False]['text':' GVN eliminates instructions which are not equivalent to one another.','line_number':782,'multiline':False]['text':' Opcode testing and casts.','line_number':797,'multiline':False]['text':' Instructions are effectful by default.','line_number':830,'multiline':False]['text':' Return whether this instruction should have its own resume point.','line_number':855,'multiline':False]['text':' Return whether this load may depend on the specified store, given','line_number':862,'multiline':False]['text':' that the alias sets intersect. This may be refined to exclude','line_number':863,'multiline':False]['text':' possible aliasing in cases where alias set flags are too imprecise.','line_number':864,'multiline':False]['text':' An MUseDefIterator walks over uses in a definition, skipping any use that is','line_number':875,'multiline':False]['text':' not a definition. Items from the use list must not be deleted during','line_number':876,'multiline':False]['text':' iteration.','line_number':877,'multiline':False]['text':' Helper class to check that GC pointers embedded in MIR instructions are not','line_number':912,'multiline':False]['text':' in the nursery. Off-thread compilation and nursery GCs can happen in','line_number':913,'multiline':False]['text':' parallel. Nursery pointers are handled with MNurseryObject and the','line_number':914,'multiline':False]['text':' nurseryObjects lists in WarpSnapshot and IonScript.','line_number':915,'multiline':False]['text':'','line_number':916,'multiline':False]['text':' These GC things are rooted through the WarpSnapshot. Compacting GCs cancel','line_number':917,'multiline':False]['text':' off-thread compilations.','line_number':918,'multiline':False]['text':' An instruction is an SSA name that is inserted into a basic block's IR','line_number':946,'multiline':False]['text':' stream.','line_number':947,'multiline':False]['text':' All MInstructions are using the "MFoo::New(alloc)" notation instead of','line_number':952,'multiline':False]['text':' the TempObject new operator. This code redefines the new operator as','line_number':953,'multiline':False]['text':' protected, and delegates to the TempObject new operator. Thus, the','line_number':954,'multiline':False]['text':' following code prevents calls to "new(alloc) MFoo" outside the MFoo','line_number':955,'multiline':False]['text':' members.','line_number':956,'multiline':False]['text':' Copying an instruction leaves the resume point as empty.','line_number':972,'multiline':False]['text':' Convenient function used for replacing a load by the value of the store','line_number':976,'multiline':False]['text':' if the types are match, and boxing the value if they do not match.','line_number':977,'multiline':False]['text':' For instructions which can be cloned with new inputs, with all other','line_number':987,'multiline':False]['text':' information being the same. clone() implementations do not need to worry','line_number':988,'multiline':False]['text':' about cloning generic MInstruction/MDefinition state like flags and','line_number':989,'multiline':False]['text':' resume points.','line_number':990,'multiline':False]['text':' Instructions needing to hook into type analysis should return a','line_number':997,'multiline':False]['text':' TypePolicy.','line_number':998,'multiline':False]['text':' Note: GenerateOpcodeFiles.py generates MOpcodesGenerated.h based on the','line_number':1003,'multiline':False]['text':' INSTRUCTION_HEADER* macros.','line_number':1004,'multiline':False]['text':' Adds MFoo::New functions which are mirroring the arguments of the','line_number':1024,'multiline':False]['text':' constructors. Opcodes which are using this macro can be called with a','line_number':1025,'multiline':False]['text':' TempAllocator, or the fallible version of the TempAllocator.','line_number':1026,'multiline':False]['text':' These macros are used as a syntactic sugar for writting getOperand','line_number':1037,'multiline':False]['text':' accessors. They are meant to be used in the body of MIR Instructions as','line_number':1038,'multiline':False]['text':' follows:','line_number':1039,'multiline':False]['text':'','line_number':1040,'multiline':False]['text':'   public:','line_number':1041,'multiline':False]['text':'     INSTRUCTION_HEADER(Foo)','line_number':1042,'multiline':False]['text':'     NAMED_OPERANDS((0, lhs), (1, rhs))','line_number':1043,'multiline':False]['text':'','line_number':1044,'multiline':False]['text':' The above example defines 2 accessors, one named "lhs" accessing the first','line_number':1045,'multiline':False]['text':' operand, and a one named "rhs" accessing the second operand.','line_number':1046,'multiline':False]['text':' N.B. use |int| to avoid warnings when Arity == 0','line_number':1086,'multiline':False]['text':' Return if the operands to this instruction are both unsigned.','line_number':1156,'multiline':False]['text':' Replace any wrapping operands with the underlying int32 operands','line_number':1160,'multiline':False]['text':' in case of unsigned operands.','line_number':1161,'multiline':False]['text':' FixedList doesn't initialize its elements, so do an unchecked init.','line_number':1202,'multiline':False]['text':' Will assert if called before initialization.','line_number':1209,'multiline':False]['text':' Truncation barrier. This is intended for protecting its input against','line_number':1228,'multiline':False]['text':' follow-up truncation optimizations.','line_number':1229,'multiline':False]['text':' A constant js::Value.','line_number':1256,'multiline':False]['text':' Try to convert this constant to boolean, similar to js::ToBoolean.','line_number':1307,'multiline':False]['text':' Returns false if the type is MIRType::Magic* or MIRType::Object.','line_number':1308,'multiline':False]['text':' During constant folding, we don't want to replace a float32','line_number':1322,'multiline':False]['text':' value by a double value.','line_number':1323,'multiline':False]['text':' Convert this constant to a js::Value. Float32 constants will be stored','line_number':1415,'multiline':False]['text':' as DoubleValue and NaNs are canonicalized. Callers must be careful: not','line_number':1416,'multiline':False]['text':' all constants can be represented by js::Value (wasm supports int64).','line_number':1417,'multiline':False]['text':' Floating-point value as created by wasm. Just a constant value, used to','line_number':1440,'multiline':False]['text':' effectively inhibit all the MIR optimizations. This uses the same LIR nodes','line_number':1441,'multiline':False]['text':' as a MConstant of the same type would.','line_number':1442,'multiline':False]['text':' The successors of the tableswitch','line_number':1551,'multiline':False]['text':' - First successor = the default case','line_number':1552,'multiline':False]['text':' - Successors 2 and higher = the cases','line_number':1553,'multiline':False]['text':' Index into successors_ sorted on case index','line_number':1555,'multiline':False]['text':' Jump to the start of another basic block.','line_number':1694,'multiline':False]['text':' Variant that may patch the target later.','line_number':1705,'multiline':False]['text':' Tests if the input instruction evaluates to true or false, and jumps to the','line_number':1718,'multiline':False]['text':' start of a corresponding basic block.','line_number':1719,'multiline':False]['text':' Variant which may patch the ifTrue branch later.','line_number':1728,'multiline':False]['text':' Returns from this function to the previous caller.','line_number':1765,'multiline':False]['text':' Number of elements to allocate for the array.','line_number':1782,'multiline':False]['text':' Heap where the array should be allocated.','line_number':1785,'multiline':False]['text':' NewArray is marked as non-effectful because all our allocations are','line_number':1813,'multiline':False]['text':' either lazy when we are using "new Array(length)" or bounded by the','line_number':1814,'multiline':False]['text':' script or the stack size when we are using "new Array(...)" or "[...]"','line_number':1815,'multiline':False]['text':' notations.  So we might have to allocate the array twice if we bail','line_number':1816,'multiline':False]['text':' during the computation of the first element of the square braket','line_number':1817,'multiline':False]['text':' notation.','line_number':1818,'multiline':False]['text':' The template object can safely be used in the recover instruction','line_number':1824,'multiline':False]['text':' because it can never be mutated by any other function execution.','line_number':1825,'multiline':False]['text':' The constant is kept separated in a MConstant, this way we can safely','line_number':1874,'multiline':False]['text':' mark it during GC if we recover the object allocation.  Otherwise, by','line_number':1875,'multiline':False]['text':' making it emittedAtUses, we do not produce register allocations for','line_number':1876,'multiline':False]['text':' it and inline its content inside the code produced by the','line_number':1877,'multiline':False]['text':' CodeGenerator.','line_number':1878,'multiline':False]['text':' The template object can safely be used in the recover instruction','line_number':1906,'multiline':False]['text':' because it can never be mutated by any other function execution.','line_number':1907,'multiline':False]['text':' The shape constant is kept separated in a MConstant. This way we can','line_number':1929,'multiline':False]['text':' safely mark it during GC if we recover the object allocation. Otherwise,','line_number':1930,'multiline':False]['text':' by making it emittedAtUses, we do not produce register allocations for it','line_number':1931,'multiline':False]['text':' and inline its content inside the code produced by the CodeGenerator.','line_number':1932,'multiline':False]['text':' See MNewArray::getAliasSet comment.','line_number':1979,'multiline':False]['text':' Represent the content of all slots of an object.  This instruction is not','line_number':2024,'multiline':False]['text':' lowered and is not used to generate code.','line_number':2025,'multiline':False]['text':' Return the template object of any object creation which can be recovered','line_number':2044,'multiline':False]['text':' on bailout.','line_number':2045,'multiline':False]['text':' As we might do read of uninitialized properties, we have to copy the','line_number':2051,'multiline':False]['text':' initial values from the template object.','line_number':2052,'multiline':False]['text':' Represent the contents of all elements of an array.  This instruction is not','line_number':2091,'multiline':False]['text':' lowered and is not used to generate code.','line_number':2092,'multiline':False]['text':' WrappedFunction stores information about a function that can safely be used','line_number':2134,'multiline':False]['text':' off-thread. In particular, a function's flags can be modified on the main','line_number':2135,'multiline':False]['text':' thread as functions are relazified and delazified, so we must be careful not','line_number':2136,'multiline':False]['text':' to access these flags off-thread.','line_number':2137,'multiline':False]['text':' If this is a native function without a JitEntry, the JSFunction*.','line_number':2139,'multiline':False]['text':' Note: When adding new accessors be sure to add consistency asserts','line_number':2147,'multiline':False]['text':' to the constructor.','line_number':2148,'multiline':False]['text':' These fields never change, they can be accessed off-main thread.','line_number':2159,'multiline':False]['text':' The callee, this, and the actual arguments are all operands of MCall.','line_number':2179,'multiline':False]['text':' Monomorphic cache for MCalls with a single JSFunction target.','line_number':2184,'multiline':False]['text':' Original value of argc from the bytecode.','line_number':2187,'multiline':False]['text':' True if the call is for JSOp::New or JSOp::SuperCall.','line_number':2190,'multiline':False]['text':' True if the caller does not use the return value.','line_number':2193,'multiline':False]['text':' +1 to skip |this|.','line_number':2247,'multiline':False]['text':' For monomorphic callsites.','line_number':2253,'multiline':False]['text':' The number of stack arguments is the max between the number of formal','line_number':2260,'multiline':False]['text':' arguments and the number of actual arguments. The number of stack','line_number':2261,'multiline':False]['text':' argument includes the |undefined| padding added in case of underflow.','line_number':2262,'multiline':False]['text':' Includes |this|.','line_number':2263,'multiline':False]['text':' Does not include |this|.','line_number':2268,'multiline':False]['text':' A method that can be called to tell the MCall to figure out whether it's','line_number':2275,'multiline':False]['text':' movable or not.  This can't be done in the constructor, because it','line_number':2276,'multiline':False]['text':' depends on the arguments to the call, and those aren't passed to the','line_number':2277,'multiline':False]['text':' constructor but are set up later via addArg.','line_number':2278,'multiline':False]['text':' A helper class for MCalls for DOM natives.  Note that this is NOT','line_number':2283,'multiline':False]['text':' actually a separate MIR op from MCall, because all sorts of places use','line_number':2284,'multiline':False]['text':' isCall() to check for calls and all we really want is to overload a few','line_number':2285,'multiline':False]['text':' virtual things from MCall.','line_number':2286,'multiline':False]['text':' If our jitinfo is not marked eliminatable, that means that our C++','line_number':2295,'multiline':False]['text':' implementation is fallible or that it never wants to be eliminated or','line_number':2296,'multiline':False]['text':' that we have no hope of ever doing the sort of argument analysis that','line_number':2297,'multiline':False]['text':' would allow us to detemine that we're side-effect-free.  In the','line_number':2298,'multiline':False]['text':' latter case we wouldn't get DCEd no matter what, but for the former','line_number':2299,'multiline':False]['text':' two cases we have to explicitly say that we can't be DCEd.','line_number':2300,'multiline':False]['text':' fun.apply(self, arguments)','line_number':2325,'multiline':False]['text':' Monomorphic cache of single target from TI, or nullptr.','line_number':2329,'multiline':False]['text':' For TI-informed monomorphic callsites.','line_number':2346,'multiline':False]['text':' fun.apply(fn, array)','line_number':2393,'multiline':False]['text':' Monomorphic cache of single target from TI, or nullptr.','line_number':2396,'multiline':False]['text':' For TI-informed monomorphic callsites.','line_number':2413,'multiline':False]['text':' |new F(...args)| and |super(...args)|.','line_number':2427,'multiline':False]['text':' Monomorphic cache of single target from TI, or nullptr.','line_number':2431,'multiline':False]['text':' For TI-informed monomorphic callsites.','line_number':2451,'multiline':False]['text':' Needed to assert that float32 instructions are correctly recovered.','line_number':2508,'multiline':False]['text':' Anything compared to Undefined','line_number':2535,'multiline':False]['text':' Anything compared to Null','line_number':2538,'multiline':False]['text':' Int32   compared to Int32','line_number':2541,'multiline':False]['text':' Boolean compared to Boolean','line_number':2542,'multiline':False]['text':' Int32 compared as unsigneds','line_number':2545,'multiline':False]['text':' Int64 compared to Int64.','line_number':2548,'multiline':False]['text':' Int64 compared as unsigneds.','line_number':2551,'multiline':False]['text':' IntPtr compared as unsigneds.','line_number':2554,'multiline':False]['text':' Double compared to Double','line_number':2557,'multiline':False]['text':' Float compared to Float','line_number':2560,'multiline':False]['text':' String compared to String','line_number':2563,'multiline':False]['text':' Symbol compared to Symbol','line_number':2566,'multiline':False]['text':' Object compared to Object','line_number':2569,'multiline':False]['text':' BigInt compared to BigInt','line_number':2572,'multiline':False]['text':' BigInt compared to Int32','line_number':2575,'multiline':False]['text':' BigInt compared to Double','line_number':2578,'multiline':False]['text':' BigInt compared to String','line_number':2581,'multiline':False]['text':' Wasm Ref/AnyRef/NullRef compared to Ref/AnyRef/NullRef','line_number':2584,'multiline':False]['text':' When a floating-point comparison is converted to an integer comparison','line_number':2593,'multiline':False]['text':' (when range analysis proves it safe), we need to convert the operands','line_number':2594,'multiline':False]['text':' to integer as well.','line_number':2595,'multiline':False]['text':' Both sides of the compare can be Float32','line_number':2657,'multiline':False]['text':' Takes a typed value and returns an untyped value.','line_number':2679,'multiline':False]['text':' Cannot box a box.','line_number':2682,'multiline':False]['text':' Note: the op may have been inverted during lowering (to put constants in a','line_number':2701,'multiline':False]['text':' position where they can be immediates), so it is important to use the','line_number':2702,'multiline':False]['text':' lir->jsop() instead of the mir->jsop() when it is present.','line_number':2703,'multiline':False]['text':' Takes a typed value and checks if it is a certain type. If so, the payload','line_number':2711,'multiline':False]['text':' is unpacked and returned as that type. Otherwise, it is considered a','line_number':2712,'multiline':False]['text':' deoptimization.','line_number':2713,'multiline':False]['text':' Check the type, and deoptimize if unexpected.','line_number':2717,'multiline':False]['text':' Type guard is not necessary.','line_number':2718,'multiline':False]['text':' Only allow unboxing a non MIRType::Value when input and output types','line_number':2726,'multiline':False]['text':' don't match. This is often used to force a bailout. Boxing happens','line_number':2727,'multiline':False]['text':' during type analysis.','line_number':2728,'multiline':False]['text':' This is the range checked by the assertion. Don't confuse this with the','line_number':2768,'multiline':False]['text':' range_ member or the range() accessor. Since MAssertRange doesn't return','line_number':2769,'multiline':False]['text':' a value, it doesn't use those.','line_number':2770,'multiline':False]['text':' Caller-side allocation of |this| for |new|:','line_number':2830,'multiline':False]['text':' Given a templateobject, construct |this| for JSOp::New.','line_number':2831,'multiline':False]['text':' Not used for JSOp::SuperCall, because Baseline doesn't attach template','line_number':2832,'multiline':False]['text':' objects for super calls.','line_number':2833,'multiline':False]['text':' Template for |this|, provided by TI.','line_number':2848,'multiline':False]['text':' Although creation of |this| modifies global state, it is safely repeatable.','line_number':2855,'multiline':False]['text':' Eager initialization of arguments object.','line_number':2863,'multiline':False]['text':' Eager initialization of arguments object for inlined function','line_number':2889,'multiline':False]['text':' Types of values which can be converted.','line_number':2950,'multiline':False]['text':' Converts a primitive (either typed or untyped) to a double. If the input is','line_number':2965,'multiline':False]['text':' not primitive at runtime, a bailout occurs.','line_number':2966,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':2978,'multiline':False]['text':' Converts a primitive (either typed or untyped) to a float32. If the input is','line_number':3032,'multiline':False]['text':' not primitive at runtime, a bailout occurs.','line_number':3033,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3044,'multiline':False]['text':' Converts a uint32 to a float32 (coming from wasm).','line_number':3084,'multiline':False]['text':' The same as MWasmTruncateToInt64 but with the TLS dependency.','line_number':3163,'multiline':False]['text':' It used only for arm now because on arm we need to call builtin to truncate','line_number':3164,'multiline':False]['text':' to i64.','line_number':3165,'multiline':False]['text':' neither removable nor movable because of possible','line_number':3181,'multiline':False]['text':' side-effects.','line_number':3182,'multiline':False]['text':' neither removable nor movable because of possible','line_number':3213,'multiline':False]['text':' side-effects.','line_number':3214,'multiline':False]['text':' Truncate a value to an int32, with wasm semantics: this will trap when the','line_number':3233,'multiline':False]['text':' value is out of range.','line_number':3234,'multiline':False]['text':' neither removable nor movable because of possible','line_number':3246,'multiline':False]['text':' side-effects.','line_number':3247,'multiline':False]['text':' Converts an int32 value to intptr by sign-extending it.','line_number':3269,'multiline':False]['text':' Converts an IntPtr value >= 0 to Int32. Bails out if the value > INT32_MAX.','line_number':3298,'multiline':False]['text':' Converts an IntPtr value to Double.','line_number':3320,'multiline':False]['text':' Subtracts (byteSize - 1) from the input value. Bails out if the result is','line_number':3339,'multiline':False]['text':' negative. This is used to implement bounds checks for DataView accesses.','line_number':3340,'multiline':False]['text':' It used only for arm now because on arm we need to call builtin to convert','line_number':3406,'multiline':False]['text':' i64 to float.','line_number':3407,'multiline':False]['text':' Applies ECMA's ToNumber on a primitive (either typed or untyped) and expects','line_number':3446,'multiline':False]['text':' the result to be precisely representable as an Int32, otherwise bails.','line_number':3447,'multiline':False]['text':'','line_number':3448,'multiline':False]['text':' If the input is not primitive at runtime, a bailout occurs. If the input','line_number':3449,'multiline':False]['text':' cannot be converted to an int32 without loss (i.e. 5.5 or undefined) then a','line_number':3450,'multiline':False]['text':' bailout occurs.','line_number':3451,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3464,'multiline':False]['text':' this only has backwards information flow.','line_number':3478,'multiline':False]['text':' Applies ECMA's ToInteger on a primitive (either typed or untyped) and expects','line_number':3507,'multiline':False]['text':' the result to be precisely representable as an Int32, otherwise bails.','line_number':3508,'multiline':False]['text':'','line_number':3509,'multiline':False]['text':' NB: Negative zero doesn't lead to a bailout, but instead will be treated the','line_number':3510,'multiline':False]['text':' same as positive zero for this operation.','line_number':3511,'multiline':False]['text':'','line_number':3512,'multiline':False]['text':' If the input is not primitive at runtime, a bailout occurs. If the input','line_number':3513,'multiline':False]['text':' cannot be converted to an int32 without loss (i.e. 2e10 or Infinity) then a','line_number':3514,'multiline':False]['text':' bailout occurs.','line_number':3515,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3522,'multiline':False]['text':' Converts a value or typed input to a truncated int32, for use with bitwise','line_number':3550,'multiline':False]['text':' operations. This is an infallible ValueToECMAInt32.','line_number':3551,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3562,'multiline':False]['text':' It is like MTruncateToInt32 but with tls dependency.','line_number':3602,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3616,'multiline':False]['text':' Converts a primitive (either typed or untyped) to a BigInt. If the input is','line_number':3637,'multiline':False]['text':' not primitive at runtime, a bailout occurs.','line_number':3638,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3645,'multiline':False]['text':' Takes a Value or typed input and returns a suitable Int64 using the','line_number':3663,'multiline':False]['text':' ToBigInt algorithm, possibly calling out to the VM for string, etc inputs.','line_number':3664,'multiline':False]['text':' Guard unless the conversion is known to be non-effectful & non-throwing.','line_number':3670,'multiline':False]['text':' Takes a BigInt pointer and returns its toInt64 value.','line_number':3692,'multiline':False]['text':' Takes an Int64 and returns a fresh BigInt pointer.','line_number':3717,'multiline':False]['text':' Converts any type to a string','line_number':3739,'multiline':False]['text':' MToString has two modes for handling of object/symbol arguments: if the','line_number':3742,'multiline':False]['text':' to-string conversion happens as part of another opcode, we have to bail out','line_number':3743,'multiline':False]['text':' to Baseline. If the conversion is for a stand-alone JSOp we can support','line_number':3744,'multiline':False]['text':' side-effects.','line_number':3745,'multiline':False]['text':' If this instruction is not effectful, mark it as movable and set the','line_number':3763,'multiline':False]['text':' Guard flag if needed. If the operation is effectful it won't be','line_number':3764,'multiline':False]['text':' optimized anyway so there's no need to set any flags.','line_number':3765,'multiline':False]['text':' Objects might override toString; Symbol throws. We bailout in those','line_number':3768,'multiline':False]['text':' cases and run side-effects in baseline instead.','line_number':3769,'multiline':False]['text':' 0 & x => 0;','line_number':3911,'multiline':False]['text':' x & -1 => x','line_number':3914,'multiline':False]['text':' x & x => x;','line_number':3917,'multiline':False]['text':' e.g. for uint16: x & 0xffff => x;','line_number':3920,'multiline':False]['text':' 0 | x => x, so if ith is 0, return (1-i)th','line_number':3944,'multiline':False]['text':' x | -1 => -1','line_number':3947,'multiline':False]['text':' x | x => x','line_number':3950,'multiline':False]['text':' 0 ^ x => x','line_number':3972,'multiline':False]['text':' 0 << x => 0','line_number':4007,'multiline':False]['text':' x << 0 => x','line_number':4008,'multiline':False]['text':' 0 >> x => 0','line_number':4029,'multiline':False]['text':' x >> 0 => x','line_number':4030,'multiline':False]['text':' 0 >>> x => 0','line_number':4059,'multiline':False]['text':' Implicit truncate flag is set by the truncate backward range analysis','line_number':4149,'multiline':False]['text':' optimization phase, and by wasm pre-processing. It is used in','line_number':4150,'multiline':False]['text':' NeedNegativeZeroCheck to check if the result of a multiplication needs to','line_number':4151,'multiline':False]['text':' produce -0 double value, and for avoiding overflow checks.','line_number':4152,'multiline':False]['text':' This optimization happens when the multiplication cannot be truncated','line_number':4154,'multiline':False]['text':' even if all uses are truncating its result, such as when the range','line_number':4155,'multiline':False]['text':' analysis detect a precision loss in the multiplication.','line_number':4156,'multiline':False]['text':' Whether we must preserve NaN semantics, and in particular not fold','line_number':4159,'multiline':False]['text':' (x op id) or (id op x) to x, or replace a division by a multiply of the','line_number':4160,'multiline':False]['text':' exact reciprocal.','line_number':4161,'multiline':False]['text':' Inline implementation of Math.sqrt().','line_number':4402,'multiline':False]['text':' Inline implementation of Math.hypot().','line_number':4450,'multiline':False]['text':' Inline implementation of Math.pow().','line_number':4481,'multiline':False]['text':'','line_number':4482,'multiline':False]['text':' Supports the following three specializations:','line_number':4483,'multiline':False]['text':'','line_number':4484,'multiline':False]['text':' 1. MPow(FloatingPoint, FloatingPoint) -> Double','line_number':4485,'multiline':False]['text':'   - The most general mode, calls js::ecmaPow.','line_number':4486,'multiline':False]['text':'   - Never performs a bailout.','line_number':4487,'multiline':False]['text':' 2. MPow(FloatingPoint, Int32) -> Double','line_number':4488,'multiline':False]['text':'   - Optimization to call js::powi instead of js::ecmaPow.','line_number':4489,'multiline':False]['text':'   - Never performs a bailout.','line_number':4490,'multiline':False]['text':' 3. MPow(Int32, Int32) -> Int32','line_number':4491,'multiline':False]['text':'   - Performs the complete exponentiation operation in assembly code.','line_number':4492,'multiline':False]['text':'   - Bails out if the result doesn't fit in Int32.','line_number':4493,'multiline':False]['text':' If true, the result is guaranteed to never be negative zero, as long as the','line_number':4495,'multiline':False]['text':' power is a positive number.','line_number':4496,'multiline':False]['text':' The result can't be negative zero if the base is an Int32 value.','line_number':4506,'multiline':False]['text':' Helpers for `foldsTo`','line_number':4510,'multiline':False]['text':' Inline implementation of Math.pow(x, 0.5), which subtly differs from','line_number':4537,'multiline':False]['text':' Math.sqrt(x).','line_number':4538,'multiline':False]['text':' A nullptr cache means this function will neither access nor update the','line_number':4611,'multiline':False]['text':' cache.','line_number':4612,'multiline':False]['text':' Annotation the result could be a negative zero','line_number':4743,'multiline':False]['text':' and we need to guard this during execution.','line_number':4744,'multiline':False]['text':' This implements the required behavior for Math.imul, which','line_number':4755,'multiline':False]['text':' can never fail and always truncates its output to int32.','line_number':4756,'multiline':False]['text':' If false, signedness will be derived from operands','line_number':4838,'multiline':False]['text':' not removable because of possible side-effects.','line_number':4867,'multiline':False]['text':' "Dividend" is an ambiguous concept for unsigned truncated','line_number':4893,'multiline':False]['text':' division, because of the truncation procedure:','line_number':4894,'multiline':False]['text':' ((x>>>0)/2)|0, for example, gets transformed in','line_number':4895,'multiline':False]['text':' MDiv::truncate into a node with lhs representing x (not','line_number':4896,'multiline':False]['text':' x>>>0) and rhs representing the constant 2; in other words,','line_number':4897,'multiline':False]['text':' the MIR node corresponds to "cast operands to unsigned and','line_number':4898,'multiline':False]['text':' divide" operation. In this case, is the dividend x or is it','line_number':4899,'multiline':False]['text':' x>>>0? In order to resolve such ambiguities, we disallow','line_number':4900,'multiline':False]['text':' the usage of this method for unsigned division.','line_number':4901,'multiline':False]['text':' If false, signedness will be derived from operands','line_number':4957,'multiline':False]['text':' not removable because of possible side-effects.','line_number':4991,'multiline':False]['text':' "Dividend" is an ambiguous concept for unsigned truncated','line_number':5007,'multiline':False]['text':' division, because of the truncation procedure:','line_number':5008,'multiline':False]['text':' ((x>>>0)/2)|0, for example, gets transformed in','line_number':5009,'multiline':False]['text':' MWasmDiv::truncate into a node with lhs representing x (not','line_number':5010,'multiline':False]['text':' x>>>0) and rhs representing the constant 2; in other words,','line_number':5011,'multiline':False]['text':' the MIR node corresponds to "cast operands to unsigned and','line_number':5012,'multiline':False]['text':' divide" operation. In this case, is the dividend x or is it','line_number':5013,'multiline':False]['text':' x>>>0? In order to resolve such ambiguities, we disallow','line_number':5014,'multiline':False]['text':' the usage of this method for unsigned division.','line_number':5015,'multiline':False]['text':' If false, signedness will be derived from operands','line_number':5032,'multiline':False]['text':' not removable because of possible side-effects.','line_number':5063,'multiline':False]['text':' If false, signedness will be derived from operands','line_number':5161,'multiline':False]['text':' not removable because of possible side-effects.','line_number':5195,'multiline':False]['text':' Don't guard this instruction even though adding two BigInts can throw','line_number':5242,'multiline':False]['text':' JSMSG_BIGINT_TOO_LARGE. This matches the behavior when adding too large','line_number':5243,'multiline':False]['text':' strings in MConcat.','line_number':5244,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5261,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5280,'multiline':False]['text':' Throws when the divisor is zero.','line_number':5303,'multiline':False]['text':' Throws when the divisor is zero.','line_number':5339,'multiline':False]['text':' Throws when the exponent is negative.','line_number':5375,'multiline':False]['text':' We don't need to guard this instruction because it can only fail on OOM.','line_number':5407,'multiline':False]['text':' We don't need to guard this instruction because it can only fail on OOM.','line_number':5426,'multiline':False]['text':' We don't need to guard this instruction because it can only fail on OOM.','line_number':5445,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5462,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5479,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5513,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5530,'multiline':False]['text':' We don't need to guard this instruction because it can only fail on OOM.','line_number':5547,'multiline':False]['text':' See MBigIntAdd for why we don't guard this instruction.','line_number':5564,'multiline':False]['text':' At least one input should be definitely string','line_number':5583,'multiline':False]['text':' This is a 3 state flag used by FlagPhiInputsAsImplicitlyUsed to record and','line_number':5636,'multiline':False]['text':' propagate the information about the consumers of a Phi instruction. This is','line_number':5637,'multiline':False]['text':' then used to set ImplicitlyUsed flags on the inputs of such Phi instructions.','line_number':5638,'multiline':False]['text':' Record the state of the data flow before any mutation made to the control','line_number':5654,'multiline':False]['text':' flow, such that removing branches is properly accounted for.','line_number':5655,'multiline':False]['text':' Assert that this is a phi in a loop header with a unique predecessor and','line_number':5712,'multiline':False]['text':' a unique backedge.','line_number':5713,'multiline':False]['text':' Assuming this phi is in a loop header with a unique loop entry, return','line_number':5719,'multiline':False]['text':' the phi operand along the loop entry.','line_number':5720,'multiline':False]['text':' Assuming this phi is in a loop header with a unique loop entry, return','line_number':5726,'multiline':False]['text':' the phi operand along the loop backedge.','line_number':5727,'multiline':False]['text':' Whether this phi's type already includes information for def.','line_number':5733,'multiline':False]['text':' Mark all phis in |iterators|, and the phis they flow into, as having','line_number':5736,'multiline':False]['text':' implicit uses.','line_number':5737,'multiline':False]['text':' Initializes the operands vector to the given capacity,','line_number':5740,'multiline':False]['text':' permitting use of addInput() instead of addInputSlow().','line_number':5741,'multiline':False]['text':' Use only if capacity has been reserved by reserveLength','line_number':5746,'multiline':False]['text':' Appends a new input to the input vector. May perform reallocation.','line_number':5752,'multiline':False]['text':' Prefer reserveLength() and addInput() instead, where possible.','line_number':5753,'multiline':False]['text':' Appends a new input to the input vector. Infallible because','line_number':5759,'multiline':False]['text':' we know the inputs fits in the vector's inline storage.','line_number':5760,'multiline':False]['text':' The goal of a Beta node is to split a def at a conditionally taken','line_number':5802,'multiline':False]['text':' branch, so that uses dominated by it have a different name.','line_number':5803,'multiline':False]['text':' This is the range induced by a comparison and branch in a preceding','line_number':5806,'multiline':False]['text':' block. Note that this does not reflect any range constraints from','line_number':5807,'multiline':False]['text':' the input value itself, so this value may differ from the range()','line_number':5808,'multiline':False]['text':' range after it is computed.','line_number':5809,'multiline':False]['text':' If input evaluates to false (i.e. it's NaN, 0 or -0), 0 is returned, else the','line_number':5830,'multiline':False]['text':' input is returned','line_number':5831,'multiline':False]['text':' MIR representation of a Value on the OSR BaselineFrame.','line_number':5866,'multiline':False]['text':' The Value is indexed off of OsrFrameReg.','line_number':5867,'multiline':False]['text':' MIR representation of a JSObject scope chain pointer on the OSR','line_number':5888,'multiline':False]['text':' BaselineFrame. The pointer is indexed off of OsrFrameReg.','line_number':5889,'multiline':False]['text':' MIR representation of a JSObject ArgumentsObject pointer on the OSR','line_number':5905,'multiline':False]['text':' BaselineFrame. The pointer is indexed off of OsrFrameReg.','line_number':5906,'multiline':False]['text':' MIR representation of the return value on the OSR BaselineFrame.','line_number':5922,'multiline':False]['text':' The Value is indexed off of OsrFrameReg.','line_number':5923,'multiline':False]['text':' Check whether we need to fire the interrupt handler (in wasm code).','line_number':5950,'multiline':False]['text':' Directly jumps to the indicated trap, leaving Wasm code and reporting a','line_number':5971,'multiline':False]['text':' runtime error.','line_number':5972,'multiline':False]['text':' Checks if a value is JS_UNINITIALIZED_LEXICAL, bailout out if so, leaving','line_number':5994,'multiline':False]['text':' it to baseline to throw at the correct pc.','line_number':5995,'multiline':False]['text':' If this instruction bails out, we will set a flag to prevent','line_number':6003,'multiline':False]['text':' lexical checks in this script from being moved.','line_number':6004,'multiline':False]['text':' Unconditionally throw a known error number.','line_number':6019,'multiline':False]['text':' Codegen assumes string length > 0. Don't allow LICM to move this','line_number':6046,'multiline':False]['text':' before the .length > 1 check in RegExpReplace in RegExp.js.','line_number':6047,'multiline':False]['text':' The functions used in lambdas are the canonical original function in','line_number':6113,'multiline':False]['text':' the script, and are immutable except for delazification. Record this','line_number':6114,'multiline':False]['text':' information while still on the main thread to avoid races.','line_number':6115,'multiline':False]['text':' Be careful when calling this off-thread. Don't call any JSFunction*','line_number':6134,'multiline':False]['text':' methods that depend on script/lazyScript - this can race with','line_number':6135,'multiline':False]['text':' delazification on the main thread.','line_number':6136,'multiline':False]['text':' Convert a Double into an IntPtr value for accessing a TypedArray or DataView','line_number':6236,'multiline':False]['text':' element. If the input is non-finite, not an integer, negative, or outside the','line_number':6237,'multiline':False]['text':' IntPtr range, either bails out or produces a value which is known to trigger','line_number':6238,'multiline':False]['text':' an out-of-bounds access (this depends on the supportOOB flag).','line_number':6239,'multiline':False]['text':' If true, produce an out-of-bounds index for non-IntPtr doubles instead of','line_number':6242,'multiline':False]['text':' bailing out.','line_number':6243,'multiline':False]['text':' Perform !-operation','line_number':6279,'multiline':False]['text':' Bailout if index + minimum < 0 or index + maximum >= length. The length used','line_number':6327,'multiline':False]['text':' in a bounds check must not be negative, or the wrong result may be computed','line_number':6328,'multiline':False]['text':' (unsigned comparisons may be used).','line_number':6329,'multiline':False]['text':' Range over which to perform the bounds check, may be modified by GVN.','line_number':6333,'multiline':False]['text':' Returns the checked index.','line_number':6349,'multiline':False]['text':' Bailout if index < minimum.','line_number':6390,'multiline':False]['text':' Note: this instruction does not need setGuard(): if there are no uses','line_number':6420,'multiline':False]['text':' it's fine for DCE to eliminate this instruction.','line_number':6421,'multiline':False]['text':' Returns the masked index.','line_number':6427,'multiline':False]['text':' Load a value from a dense array's element vector and does a hole check if the','line_number':6445,'multiline':False]['text':' array is not known to be packed.','line_number':6446,'multiline':False]['text':' Uses may be optimized away based on this instruction's result','line_number':6454,'multiline':False]['text':' type. This means it's invalid to DCE this instruction, as we','line_number':6455,'multiline':False]['text':' have to invalidate when we read a hole.','line_number':6456,'multiline':False]['text':' Load a value from the elements vector of a native object. If the index is','line_number':6530,'multiline':False]['text':' out-of-bounds, or the indexed slot has a hole, undefined is returned instead.','line_number':6531,'multiline':False]['text':' Set the guard flag to make sure we bail when we see a negative','line_number':6544,'multiline':False]['text':' index. We can clear this flag (and needsNegativeIntCheck_) in','line_number':6545,'multiline':False]['text':' collectRangeInfoPreTrunc.','line_number':6546,'multiline':False]['text':' Store a value to a dense array slots vector.','line_number':6599,'multiline':False]['text':' Stores MagicValue(JS_ELEMENTS_HOLE) and marks the elements as non-packed.','line_number':6628,'multiline':False]['text':' Like MStoreElement, but supports indexes >= initialized length. The downside','line_number':6649,'multiline':False]['text':' is that we cannot hoist the elements vector and bounds check, since this','line_number':6650,'multiline':False]['text':' instruction may update the (initialized) length and reallocate the elements','line_number':6651,'multiline':False]['text':' vector.','line_number':6652,'multiline':False]['text':' Array.prototype.pop or Array.prototype.shift on a dense array.','line_number':6673,'multiline':False]['text':' All barriered operations - MCompareExchangeTypedArrayElement,','line_number':6700,'multiline':False]['text':' MExchangeTypedArrayElement, and MAtomicTypedArrayElementBinop, as','line_number':6701,'multiline':False]['text':' well as MLoadUnboxedScalar and MStoreUnboxedScalar when they are','line_number':6702,'multiline':False]['text':' marked as requiring a memory barrer - have the following','line_number':6703,'multiline':False]['text':' attributes:','line_number':6704,'multiline':False]['text':'','line_number':6705,'multiline':False]['text':' - Not movable','line_number':6706,'multiline':False]['text':' - Not removable','line_number':6707,'multiline':False]['text':' - Not congruent with any other instruction','line_number':6708,'multiline':False]['text':' - Effectful (they alias every TypedArray store)','line_number':6709,'multiline':False]['text':'','line_number':6710,'multiline':False]['text':' The intended effect of those constraints is to prevent all loads','line_number':6711,'multiline':False]['text':' and stores preceding the barriered operation from being moved to','line_number':6712,'multiline':False]['text':' after the barriered operation, and vice versa, and to prevent the','line_number':6713,'multiline':False]['text':' barriered operation from being removed or hoisted.','line_number':6714,'multiline':False]['text':' Also see comments at MMemoryBarrierRequirement, above.','line_number':6721,'multiline':False]['text':' Load an unboxed scalar value from an array buffer view or other object.','line_number':6723,'multiline':False]['text':' Not removable or movable','line_number':6738,'multiline':False]['text':' Bailout if the result does not fit in an int32.','line_number':6754,'multiline':False]['text':' When a barrier is needed make the instruction effectful by','line_number':6763,'multiline':False]['text':' giving it a "store" effect.','line_number':6764,'multiline':False]['text':' Load an unboxed scalar value from a dataview object.','line_number':6801,'multiline':False]['text':' Bailout if the result does not fit in an int32.','line_number':6826,'multiline':False]['text':' Load a value from a typed array. Out-of-bounds accesses are handled in-line.','line_number':6857,'multiline':False]['text':' Base class for MIR ops that write unboxed scalar values.','line_number':6908,'multiline':False]['text':' Store an unboxed scalar value to an array buffer view or other object.','line_number':6935,'multiline':False]['text':' Not removable or movable','line_number':6949,'multiline':False]['text':' Store an unboxed scalar value to a dataview object.','line_number':6974,'multiline':False]['text':' Compute an "effective address", i.e., a compound computation of the form:','line_number':7039,'multiline':False]['text':'   base + index * scale + displacement','line_number':7040,'multiline':False]['text':' Clamp input to range [0, 255] for Uint8ClampedArray.','line_number':7068,'multiline':False]['text':' Guard the object's proto is |expected|.','line_number':7282,'multiline':False]['text':' These instructions never modify the [[Prototype]].','line_number':7305,'multiline':False]['text':' Guard the object has no proto.','line_number':7313,'multiline':False]['text':' These instructions never modify the [[Prototype]].','line_number':7335,'multiline':False]['text':' Guard on a specific Value.','line_number':7343,'multiline':False]['text':' Guard on function flags','line_number':7377,'multiline':False]['text':' At least one of the expected flags must be set, but not necessarily all','line_number':7380,'multiline':False]['text':' expected flags.','line_number':7381,'multiline':False]['text':' None of the unexpected flags must be set.','line_number':7384,'multiline':False]['text':' Guard on an object's identity, inclusively or exclusively.','line_number':7426,'multiline':False]['text':' Guard on a specific JSFunction. Used instead of MGuardObjectIdentity,','line_number':7460,'multiline':False]['text':' so we can store some metadata related to the expected function.','line_number':7461,'multiline':False]['text':' Load from vp[slot] (slots that are not inline in an object).','line_number':7554,'multiline':False]['text':' Allocate a new BlockLexicalEnvironmentObject.','line_number':7598,'multiline':False]['text':' Store to vp[slot] (slots that are not inline in an object).','line_number':7655,'multiline':False]['text':' We are movable iff the jitinfo says we can be.','line_number':7776,'multiline':False]['text':' If we're not movable, that means we shouldn't be DCEd either,','line_number':7781,'multiline':False]['text':' because we might throw an exception when called, and getting rid','line_number':7782,'multiline':False]['text':' of that is observable.','line_number':7783,'multiline':False]['text':' guard can be null.','line_number':7795,'multiline':False]['text':' globalGuard can be null.','line_number':7796,'multiline':False]['text':' Pin the guard, if we have one as an operand if we want to hoist later.','line_number':7810,'multiline':False]['text':' And the same for the global guard, if we have one.','line_number':7815,'multiline':False]['text':' Checking the jitinfo is the same as checking the constant function','line_number':7841,'multiline':False]['text':' Inlined assembly for Math.floor(double | float32) -> int32.','line_number':7976,'multiline':False]['text':' Inlined assembly version for Math.ceil(double | float32) -> int32.','line_number':8005,'multiline':False]['text':' Inlined version of Math.round(double | float32) -> int32.','line_number':8034,'multiline':False]['text':' Inlined version of Math.trunc(double | float32) -> int32.','line_number':8064,'multiline':False]['text':' NearbyInt rounds the floating-point input to the nearest integer, according','line_number':8094,'multiline':False]['text':' to the RoundingMode.','line_number':8095,'multiline':False]['text':' Implementation for 'in' operator using instruction cache','line_number':8169,'multiline':False]['text':' Test whether the index is in the array bounds or a hole.','line_number':8183,'multiline':False]['text':' Set the guard flag to make sure we bail when we see a negative index.','line_number':8195,'multiline':False]['text':' We can clear this flag (and needsNegativeIntCheck_) in','line_number':8196,'multiline':False]['text':' collectRangeInfoPreTrunc.','line_number':8197,'multiline':False]['text':' Bail when the element is a hole.','line_number':8227,'multiline':False]['text':' Implementation for instanceof operator with specific rhs.','line_number':8280,'multiline':False]['text':' Given a value being written to another object, update the generational store','line_number':8294,'multiline':False]['text':' buffer if the value is in the nursery and object is in the tenured heap.','line_number':8295,'multiline':False]['text':' During lowering, values that neither have object nor value MIR type','line_number':8312,'multiline':False]['text':' are ignored, thus Float32 can show up at this point without any issue.','line_number':8313,'multiline':False]['text':' Given a value being written to another object's elements at the specified','line_number':8321,'multiline':False]['text':' index, update the generational store buffer if the value is in the nursery','line_number':8322,'multiline':False]['text':' and object is in the tenured heap.','line_number':8323,'multiline':False]['text':' During lowering, values that neither have object nor value MIR type','line_number':8342,'multiline':False]['text':' are ignored, thus Float32 can show up at this point without any issue.','line_number':8343,'multiline':False]['text':' This is an alias for MLoadFixedSlot.','line_number':8388,'multiline':False]['text':' EnvironmentObject reserved slots are immutable.','line_number':8401,'multiline':False]['text':' This is an element of a spaghetti stack which is used to represent the memory','line_number':8406,'multiline':False]['text':' context which has to be restored in case of a bailout.','line_number':8407,'multiline':False]['text':' A resume point contains the information needed to reconstruct the Baseline','line_number':8417,'multiline':False]['text':' Interpreter state from a position in Warp JIT code. A resume point is a','line_number':8418,'multiline':False]['text':' mapping of stack slots to MDefinitions.','line_number':8419,'multiline':False]['text':'','line_number':8420,'multiline':False]['text':' We capture stack state at critical points:','line_number':8421,'multiline':False]['text':'   * (1) At the beginning of every basic block.','line_number':8422,'multiline':False]['text':'   * (2) After every effectful operation.','line_number':8423,'multiline':False]['text':'','line_number':8424,'multiline':False]['text':' As long as these two properties are maintained, instructions can be moved,','line_number':8425,'multiline':False]['text':' hoisted, or, eliminated without problems, and ops without side effects do not','line_number':8426,'multiline':False]['text':' need to worry about capturing state at precisely the right point in time.','line_number':8427,'multiline':False]['text':'','line_number':8428,'multiline':False]['text':' Effectful instructions, of course, need to capture state after completion,','line_number':8429,'multiline':False]['text':' where the interpreter will not attempt to repeat the operation. For this,','line_number':8430,'multiline':False]['text':' ResumeAfter must be used. The state is attached directly to the effectful','line_number':8431,'multiline':False]['text':' instruction to ensure that no intermediate instructions could be injected','line_number':8432,'multiline':False]['text':' in between by a future analysis pass.','line_number':8433,'multiline':False]['text':'','line_number':8434,'multiline':False]['text':' During LIR construction, if an instruction can bail back to the interpreter,','line_number':8435,'multiline':False]['text':' we create an LSnapshot, which uses the last known resume point to request','line_number':8436,'multiline':False]['text':' register/stack assignments for every live value.','line_number':8437,'multiline':False]['text':' Resume until before the current instruction','line_number':8446,'multiline':False]['text':' Resume after the current instruction','line_number':8447,'multiline':False]['text':' State before inlining.','line_number':8448,'multiline':False]['text':' List of stack slots needed to reconstruct the BaselineFrame.','line_number':8455,'multiline':False]['text':' List of stores needed to reconstruct the content of objects which are','line_number':8458,'multiline':False]['text':' emulated by EmulateStateOf variants.','line_number':8459,'multiline':False]['text':' Calling isDefinition or isResumePoint on MResumePoint is unnecessary.','line_number':8469,'multiline':False]['text':' Initializes operands_ to an empty array of a fixed length.','line_number':8474,'multiline':False]['text':' The array may then be filled in by inherit().','line_number':8475,'multiline':False]['text':' FixedList doesn't initialize its elements, so do an unchecked init.','line_number':8479,'multiline':False]['text':' FixedList doesn't initialize its elements, so do an unchecked init.','line_number':8503,'multiline':False]['text':' Register a store instruction on the current resume point. This','line_number':8548,'multiline':False]['text':' instruction would be recovered when we are bailing out. The |cache|','line_number':8549,'multiline':False]['text':' argument can be any resume point, it is used to share memory if we are','line_number':8550,'multiline':False]['text':' doing the same modification.','line_number':8551,'multiline':False]['text':' We will bail out if the class type is incorrect, so we need to ensure we','line_number':8625,'multiline':False]['text':' don't eliminate this instruction','line_number':8626,'multiline':False]['text':' Note: we might call a proxy trap, so this instruction is effectful.','line_number':8654,'multiline':False]['text':' Proxy checks may throw, so we're neither removable nor movable.','line_number':8680,'multiline':False]['text':' Allocate the generator object for a frame.','line_number':8701,'multiline':False]['text':' Not removable','line_number':8771,'multiline':False]['text':' Not removable','line_number':8800,'multiline':False]['text':' Not removable','line_number':8836,'multiline':False]['text':' Used to load the prototype of an object known to have','line_number':8865,'multiline':False]['text':' a static prototype.','line_number':8866,'multiline':False]['text':' These instructions never modify the [[Prototype]].','line_number':8888,'multiline':False]['text':' Flips the input's sign bit, independently of the rest of the number's','line_number':8896,'multiline':False]['text':' payload. Note this is different from multiplying by minus-one, which has','line_number':8897,'multiline':False]['text':' side-effects for e.g. NaNs.','line_number':8898,'multiline':False]['text':' Different Tls data have different alias classes and only those classes','line_number':8919,'multiline':False]['text':' are allowed.','line_number':8920,'multiline':False]['text':' The only types supported at the moment.','line_number':8925,'multiline':False]['text':' Bounds check nodes are of type Int32 on 32-bit systems for both wasm and','line_number':8973,'multiline':False]['text':' asm.js code, as well as on 64-bit systems for asm.js code and for wasm code','line_number':8974,'multiline':False]['text':' that is known to have a bounds check limit that fits into 32 bits.  They are','line_number':8975,'multiline':False]['text':' of type Int64 only on 64-bit systems for wasm code with 4GB (or larger)','line_number':8976,'multiline':False]['text':' heaps.  There is no way for nodes of both types to be present in the same','line_number':8977,'multiline':False]['text':' function.  Should this change, then BCE must be updated to take type into','line_number':8978,'multiline':False]['text':' account.','line_number':8979,'multiline':False]['text':' Bounds check is effectful: it throws for OOB.','line_number':8988,'multiline':False]['text':' Alignment check is effectful: it throws for unaligned.','line_number':9047,'multiline':False]['text':' memoryBase is nullptr on some platforms','line_number':9066,'multiline':False]['text':' When a barrier is needed, make the instruction effectful by giving','line_number':9099,'multiline':False]['text':' it a "store" effect.','line_number':9100,'multiline':False]['text':' 1 plus optional memoryBase and','line_number':9168,'multiline':False]['text':' boundsCheckLimit','line_number':9169,'multiline':False]['text':' 2 plus optional memoryBase and','line_number':9220,'multiline':False]['text':' boundsCheckLimit','line_number':9221,'multiline':False]['text':' Not removable','line_number':9278,'multiline':False]['text':' Not removable','line_number':9327,'multiline':False]['text':' Not removable','line_number':9378,'multiline':False]['text':' The default valueHash is good enough, because there are no non-operand','line_number':9464,'multiline':False]['text':' fields.','line_number':9465,'multiline':False]['text':' Represents a known-good derived pointer into an object or memory region (in','line_number':9532,'multiline':False]['text':' the most general sense) that will not move while the derived pointer is live.','line_number':9533,'multiline':False]['text':' The `offset` *must* be a valid offset into the object represented by `base`;','line_number':9534,'multiline':False]['text':' hence overflow in the address calculation will never be an issue.','line_number':9535,'multiline':False]['text':' Offset in bytes from lowest address of stack result area.','line_number':9686,'multiline':False]['text':' Stack index indicating base of stack area.','line_number':9761,'multiline':False]['text':' Prevent reordering.  Although there's no problem eliding call result','line_number':9917,'multiline':False]['text':' definitions, there's also no need, as they cause no codegen.','line_number':9918,'multiline':False]['text':' Wasm SIMD.','line_number':9938,'multiline':False]['text':'','line_number':9939,'multiline':False]['text':' See comment in WasmIonCompile.cpp for a justification for these nodes.','line_number':9940,'multiline':False]['text':' (v128, v128, v128) -> v128 effect-free operation.','line_number':9941,'multiline':False]['text':' If the control mask allows the operation to be specialized as a shuffle','line_number':9963,'multiline':False]['text':' and it is profitable to specialize it on this platform, return true and','line_number':9964,'multiline':False]['text':' the appropriate shuffle mask.','line_number':9965,'multiline':False]['text':' (v128, v128) -> v128 effect-free operations.','line_number':9972,'multiline':False]['text':' Platform-dependent specialization.','line_number':10002,'multiline':False]['text':' (v128, const) -> v128 effect-free operations.','line_number':10008,'multiline':False]['text':' (v128, scalar, imm) -> v128 effect-free operations.','line_number':10039,'multiline':False]['text':' (scalar) -> v128 effect-free operations.','line_number':10071,'multiline':False]['text':' (v128, imm) -> scalar effect-free operations.','line_number':10100,'multiline':False]['text':' memoryBase is nullptr on some platforms','line_number':10133,'multiline':False]['text':' End Wasm SIMD','line_number':10252,'multiline':False]['text':' Used by MIR building to represent the bytecode result of an operation for','line_number':10254,'multiline':False]['text':' which an MBail was generated, to balance the basic block's MDefinition stack.','line_number':10255,'multiline':False]['text':' Implement cast functions now that the compiler can see the inheritance.','line_number':10336,'multiline':False]['text':' Helper functions used to decide how to build MIR.','line_number':10374,'multiline':False]['text':' namespace jit','line_number':10401,'multiline':False]['text':' namespace js','line_number':10402,'multiline':False]['text':' Specialize the AlignmentFinder class to make Result<V, E> works with abstract','line_number':10404,'multiline':False]['text':' classes such as MDefinition*, and MInstruction*','line_number':10405,'multiline':False]['text':' namespace mozilla','line_number':10416,'multiline':False]['text':' jit_MIR_h ','line_number':10418,'multiline':True]