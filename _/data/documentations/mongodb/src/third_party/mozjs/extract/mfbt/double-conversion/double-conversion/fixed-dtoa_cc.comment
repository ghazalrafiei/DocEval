['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':2,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':3,'multiline':False]['text':' met:','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':6,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':7,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':8,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':9,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':10,'multiline':False]['text':'       with the distribution.','line_number':11,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':12,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':13,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':16,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':17,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':18,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':19,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':20,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':21,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':22,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':23,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':24,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':25,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':26,'multiline':False]['text':' Represents a 128bit type. This class should be replaced by a native type on','line_number':35,'multiline':False]['text':' platforms that support 128bit integers.','line_number':36,'multiline':False]['text':' Modifies *this to *this MOD (2^power).','line_number':80,'multiline':False]['text':' Returns *this DIV (2^power).','line_number':81,'multiline':False]['text':' Value == (high_bits_ << 64) + low_bits_','line_number':111,'multiline':False]['text':' Includes the hidden bit.','line_number':117,'multiline':False]['text':' We fill the digits in reverse order and exchange them afterwards.','line_number':132,'multiline':False]['text':' Exchange the digits.','line_number':139,'multiline':False]['text':' For efficiency cut the number into 3 uint32_t parts, and print those.','line_number':156,'multiline':False]['text':' For efficiency cut the number into 3 uint32_t parts, and print those.','line_number':170,'multiline':False]['text':' An empty buffer represents 0.','line_number':190,'multiline':False]['text':' Round the last digit until we either have a digit that was not '9' or until','line_number':197,'multiline':False]['text':' we reached the first digit.','line_number':198,'multiline':False]['text':' If the first digit is now '0' + 10, we would need to set it to '0' and add','line_number':207,'multiline':False]['text':' a '1' in front. However we reach the first digit only if all following','line_number':208,'multiline':False]['text':' digits had been '9' before rounding up. Now all trailing digits are '0' and','line_number':209,'multiline':False]['text':' we simply switch the first digit to '1' and update the decimal-point','line_number':210,'multiline':False]['text':' (indicating that the point is now one digit to the right).','line_number':211,'multiline':False]['text':' The given fractionals number represents a fixed-point number with binary','line_number':219,'multiline':False]['text':' point at bit (-exponent).','line_number':220,'multiline':False]['text':' Preconditions:','line_number':221,'multiline':False]['text':'   -128 <= exponent <= 0.','line_number':222,'multiline':False]['text':'   0 <= fractionals * 2^exponent < 1','line_number':223,'multiline':False]['text':'   The buffer holds the result.','line_number':224,'multiline':False]['text':' The function will round its result. During the rounding-process digits not','line_number':225,'multiline':False]['text':' generated by this function might be updated, and the decimal-point variable','line_number':226,'multiline':False]['text':' might be updated. If this function generates the digits 99 and the buffer','line_number':227,'multiline':False]['text':' already contained "199" (thus yielding a buffer of "19999") then a','line_number':228,'multiline':False]['text':' rounding-up will change the contents of the buffer to "20000".','line_number':229,'multiline':False]['text':' 'fractionals' is a fixed-point number, with binary point at bit','line_number':234,'multiline':False]['text':' (-exponent). Inside the function the non-converted remainder of fractionals','line_number':235,'multiline':False]['text':' is a fixed-point number, with binary point at bit 'point'.','line_number':236,'multiline':False]['text':' One 64 bit number is sufficient.','line_number':238,'multiline':False]['text':' Instead of multiplying by 10 we multiply by 5 and adjust the point','line_number':243,'multiline':False]['text':' location. This way the fractionals variable will not overflow.','line_number':244,'multiline':False]['text':' Invariant at the beginning of the loop: fractionals < 2^point.','line_number':245,'multiline':False]['text':' Initially we have: point <= 64 and fractionals < 2^56','line_number':246,'multiline':False]['text':' After each iteration the point is decremented by one.','line_number':247,'multiline':False]['text':' Note that 5^3 = 125 < 128 = 2^7.','line_number':248,'multiline':False]['text':' Therefore three iterations of this loop will not overflow fractionals','line_number':249,'multiline':False]['text':' (even without the subtraction at the end of the loop body). At this','line_number':250,'multiline':False]['text':' time point will satisfy point <= 61 and therefore fractionals < 2^point','line_number':251,'multiline':False]['text':' and any further multiplication of fractionals by 5 will not overflow.','line_number':252,'multiline':False]['text':' If the first bit after the point is set we have to round up.','line_number':261,'multiline':False]['text':' We need 128 bits.','line_number':266,'multiline':False]['text':' As before: instead of multiplying by 10 we multiply by 5 and adjust the','line_number':273,'multiline':False]['text':' point location.','line_number':274,'multiline':False]['text':' This multiplication will not overflow for the same reasons as before.','line_number':275,'multiline':False]['text':' Removes leading and trailing zeros.','line_number':290,'multiline':False]['text':' If leading zeros are removed then the decimal point position is adjusted.','line_number':291,'multiline':False]['text':' v = significand * 2^exponent (with significand a 53bit integer).','line_number':318,'multiline':False]['text':' If the exponent is larger than 20 (i.e. we may have a 73bit number) then we','line_number':319,'multiline':False]['text':' don't know how to compute the representation. 2^73 ~= 9.5*10^21.','line_number':320,'multiline':False]['text':' If necessary this limit could probably be increased, but we don't need','line_number':321,'multiline':False]['text':' more.','line_number':322,'multiline':False]['text':' At most kDoubleSignificandSize bits of the significand are non-zero.','line_number':326,'multiline':False]['text':' Given a 64 bit integer we have 11 0s followed by 53 potentially non-zero','line_number':327,'multiline':False]['text':' bits:  0..11*..0xxx..53*..xx','line_number':328,'multiline':False]['text':' The exponent must be > 11.','line_number':330,'multiline':False]['text':'','line_number':331,'multiline':False]['text':' We know that v = significand * 2^exponent.','line_number':332,'multiline':False]['text':' And the exponent > 11.','line_number':333,'multiline':False]['text':' We simplify the task by dividing v by 10^17.','line_number':334,'multiline':False]['text':' The quotient delivers the first digits, and the remainder fits into a 64','line_number':335,'multiline':False]['text':' bit number.','line_number':336,'multiline':False]['text':' Dividing by 10^17 is equivalent to dividing by 5^17*2^17.','line_number':337,'multiline':False]['text':' 5^17','line_number':338,'multiline':False]['text':' Let v = f * 2^e with f == significand and e == exponent.','line_number':344,'multiline':False]['text':' Then need q (quotient) and r (remainder) as follows:','line_number':345,'multiline':False]['text':'   v            = q * 10^17       + r','line_number':346,'multiline':False]['text':'   f * 2^e      = q * 10^17       + r','line_number':347,'multiline':False]['text':'   f * 2^e      = q * 5^17 * 2^17 + r','line_number':348,'multiline':False]['text':' If e > 17 then','line_number':349,'multiline':False]['text':'   f * 2^(e-17) = q * 5^17        + r/2^17','line_number':350,'multiline':False]['text':' else','line_number':351,'multiline':False]['text':'   f  = q * 5^17 * 2^(17-e) + r/2^e','line_number':352,'multiline':False]['text':' We only allow exponents of up to 20 and therefore (17 - e) <= 3','line_number':354,'multiline':False]['text':' 0 <= exponent <= 11','line_number':367,'multiline':False]['text':' We have to cut the number.','line_number':372,'multiline':False]['text':' This configuration (with at most 20 digits) means that all digits must be','line_number':384,'multiline':False]['text':' 0.','line_number':385,'multiline':False]['text':' The string is empty and the decimal_point thus has no importance. Mimick','line_number':398,'multiline':False]['text':' Gay's dtoa and and set it to -fractional_count.','line_number':399,'multiline':False]['text':' namespace double_conversion','line_number':405,'multiline':False]