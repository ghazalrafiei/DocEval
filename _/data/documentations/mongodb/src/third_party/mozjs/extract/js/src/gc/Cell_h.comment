['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::shadow::Zone','line_number':19,'multiline':False]['text':' namespace JS ','line_number':25,'multiline':True]['text':' Barriers can't be triggered during backend Ion compilation, which may run on','line_number':36,'multiline':False]['text':' a helper thread.','line_number':37,'multiline':False]['text':' Like gc::MarkColor but allows the possibility of the cell being unmarked.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' This class mimics an enum class, but supports operator overloading.','line_number':64,'multiline':False]['text':' Implement a total ordering for CellColor, with white being 'least marked'','line_number':81,'multiline':False]['text':' and black being 'most marked'.','line_number':82,'multiline':False]['text':' [SMDOC] GC Cell','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' A GC cell is the ultimate base class for all GC things. All types allocated','line_number':112,'multiline':False]['text':' on the GC heap extend either gc::Cell or gc::TenuredCell. If a type is always','line_number':113,'multiline':False]['text':' tenured, prefer the TenuredCell class as base.','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' The first word of Cell is a uintptr_t that reserves the low three bits for GC','line_number':116,'multiline':False]['text':' purposes. The remaining bits are available to sub-classes and can be used','line_number':117,'multiline':False]['text':' store a pointer to another gc::Cell. It can also be used for temporary','line_number':118,'multiline':False]['text':' storage (see setTemporaryGCUnsafeData). To make use of the remaining space,','line_number':119,'multiline':False]['text':' sub-classes derive from a helper class such as TenuredCellWithNonGCPointer.','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':' During moving GC operation a Cell may be marked as forwarded. This indicates','line_number':122,'multiline':False]['text':' that a gc::RelocationOverlay is currently stored in the Cell's memory and','line_number':123,'multiline':False]['text':' should be used to find the new location of the Cell.','line_number':124,'multiline':False]['text':' Cell header word. Stores GC flags and derived class data.','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' This is atomic since it can be read from and written to by different','line_number':129,'multiline':False]['text':' threads during compacting GC, in a limited way. Specifically, writes that','line_number':130,'multiline':False]['text':' update the derived class data can race with reads that check the forwarded','line_number':131,'multiline':False]['text':' flag. The writes do not change the forwarded flag (which is always false in','line_number':132,'multiline':False]['text':' this situation).','line_number':133,'multiline':False]['text':' Indicates whether the cell has been forwarded (moved) by generational or','line_number':142,'multiline':False]['text':' compacting GC and is now a RelocationOverlay.','line_number':143,'multiline':False]['text':' Bits 1 and 2 are reserved for future use by the GC.','line_number':146,'multiline':False]['text':' Note: Unrestricted access to the runtime of a GC thing from an arbitrary','line_number':169,'multiline':False]['text':' thread can easily lead to races. Use this method very carefully.','line_number':170,'multiline':False]['text':' May be overridden by GC thing kinds that have a compartment pointer.','line_number':173,'multiline':False]['text':' The StoreBuffer used to record incoming pointers from the tenured heap.','line_number':176,'multiline':False]['text':' This will return nullptr for a tenured cell.','line_number':177,'multiline':False]['text':' |this|-qualify the |is| call below to avoid compile errors with even','line_number':191,'multiline':False]['text':' fairly recent versions of gcc, e.g. 7.1.1 according to bz.','line_number':192,'multiline':False]['text':' |this|-qualify the |is| call below to avoid compile errors with even','line_number':199,'multiline':False]['text':' fairly recent versions of gcc, e.g. 7.1.1 according to bz.','line_number':200,'multiline':False]['text':' Get the zone for a cell known to be in the nursery.','line_number':208,'multiline':False]['text':' Default implementation for kinds that cannot be permanent. This may be','line_number':212,'multiline':False]['text':' overriden by derived classes.','line_number':213,'multiline':False]['text':' Cells are destroyed by the GC. Do not delete them directly.','line_number':227,'multiline':False]['text':' A GC TenuredCell gets behaviors that are valid for things in the Tenured','line_number':231,'multiline':False]['text':' heap, such as access to the arena and mark bits.','line_number':232,'multiline':False]['text':' Mark bit management.','line_number':240,'multiline':False]['text':' Same as Cell::color, but skips nursery checks.','line_number':245,'multiline':False]['text':' The return value indicates if the cell went from unmarked to marked.','line_number':252,'multiline':False]['text':' Access to the arena.','line_number':259,'multiline':False]['text':' |this|-qualify the |is| call below to avoid compile errors with even','line_number':281,'multiline':False]['text':' fairly recent versions of gcc, e.g. 7.1.1 according to bz.','line_number':282,'multiline':False]['text':' |this|-qualify the |is| call below to avoid compile errors with even','line_number':289,'multiline':False]['text':' fairly recent versions of gcc, e.g. 7.1.1 according to bz.','line_number':290,'multiline':False]['text':' Default implementation for kinds that don't require fixup.','line_number':295,'multiline':False]['text':' static ','line_number':399,'multiline':True]['text':' = Black ','line_number':418,'multiline':True]['text':' Read barrier and pre-write barrier implementation for GC cells.','line_number':457,'multiline':False]['text':' Barriers should not be triggered on main thread while collecting.','line_number':475,'multiline':False]['text':' We should only observe barriers being enabled on the main thread.','line_number':482,'multiline':False]['text':' There shouldn't be anything marked gray unless we're on the main thread.','line_number':489,'multiline':False]['text':' Barriers can be triggered on the main thread while collecting, but are','line_number':510,'multiline':False]['text':' disabled. For example, this happens when destroying HeapPtr wrappers.','line_number':511,'multiline':False]['text':' Barriers can be triggered on off the main thread in two situations:','line_number':518,'multiline':False]['text':'  - background finalization of HeapPtrs to the atoms zone','line_number':519,'multiline':False]['text':'  - while we are verifying pre-barriers for a worker runtime','line_number':520,'multiline':False]['text':' The barrier is not required in either case.','line_number':521,'multiline':False]['text':' Pre-write barrier implementation for structures containing GC cells, taking a','line_number':555,'multiline':False]['text':' functor to trace the structure.','line_number':556,'multiline':False]['text':' Pre-write barrier implementation for structures containing GC cells. T must','line_number':574,'multiline':False]['text':' support a |trace| method.','line_number':575,'multiline':False]['text':' static ','line_number':583,'multiline':True]['text':' Base class for nusery-allocatable GC things that have 32-bit length and','line_number':600,'multiline':False]['text':' 32-bit flags (currently JSString and BigInt).','line_number':601,'multiline':False]['text':'','line_number':602,'multiline':False]['text':' This tries to store both in Cell::header_, but if that isn't large enough the','line_number':603,'multiline':False]['text':' length is stored separately.','line_number':604,'multiline':False]['text':'','line_number':605,'multiline':False]['text':'          32       0','line_number':606,'multiline':False]['text':'  ------------------','line_number':607,'multiline':False]['text':'  | Length | Flags |','line_number':608,'multiline':False]['text':'  ------------------','line_number':609,'multiline':False]['text':'','line_number':610,'multiline':False]['text':' The low bits of the flags word (see CellFlagBitsReservedForGC) are reserved','line_number':611,'multiline':False]['text':' for GC. Derived classes must ensure they don't use these flags for non-GC','line_number':612,'multiline':False]['text':' purposes.','line_number':613,'multiline':False]['text':' Additional storage for length if |header_| is too small to fit both.','line_number':616,'multiline':False]['text':' Returns the offset of header_. JIT code should use offsetOfFlags','line_number':655,'multiline':False]['text':' below.','line_number':656,'multiline':False]['text':' Offsets for direct field from jit code. A number of places directly','line_number':661,'multiline':False]['text':' access 32-bit length and flags fields so do endian trickery here.','line_number':662,'multiline':False]['text':' Base class for non-nursery-allocatable GC things that allows storing a non-GC','line_number':687,'multiline':False]['text':' thing pointer in the first word.','line_number':688,'multiline':False]['text':'','line_number':689,'multiline':False]['text':' The low bits of the word (see CellFlagBitsReservedForGC) are reserved for GC.','line_number':690,'multiline':False]['text':' As above, no flags are expected to be set here.','line_number':714,'multiline':False]['text':' Base class for non-nursery-allocatable GC things that allows storing flags','line_number':727,'multiline':False]['text':' in the first word.','line_number':728,'multiline':False]['text':'','line_number':729,'multiline':False]['text':' The low bits of the flags word (see CellFlagBitsReservedForGC) are reserved','line_number':730,'multiline':False]['text':' for GC.','line_number':731,'multiline':False]['text':' Base class for GC things that have a tenured GC pointer as their first word.','line_number':755,'multiline':False]['text':'','line_number':756,'multiline':False]['text':' The low bits of the first word (see CellFlagBitsReservedForGC) are reserved','line_number':757,'multiline':False]['text':' for GC.','line_number':758,'multiline':False]['text':'','line_number':759,'multiline':False]['text':' This includes a pre write barrier when the pointer is update. No post barrier','line_number':760,'multiline':False]['text':' is necessary as the pointer is always tenured.','line_number':761,'multiline':False]['text':' These static asserts are not in class scope because the PtrT may not be','line_number':765,'multiline':False]['text':' defined when this class template is instantiated.','line_number':766,'multiline':False]['text':' As above, no flags are expected to be set here.','line_number':790,'multiline':False]['text':' These static asserts are not in class scope because the PtrT may not be','line_number':821,'multiline':False]['text':' defined when this class template is instantiated.','line_number':822,'multiline':False]['text':' namespace gc ','line_number':870,'multiline':True]['text':' namespace js ','line_number':871,'multiline':True]['text':' gc_Cell_h ','line_number':873,'multiline':True]