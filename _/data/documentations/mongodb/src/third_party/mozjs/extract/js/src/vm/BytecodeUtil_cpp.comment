['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS bytecode descriptors, disassemblers, and (expression) decompilers.
 ','line_number':7,'multiline':True]['text':' SrcNote, SrcNoteType, SrcNoteIterator','line_number':31,'multiline':False]['text':' IonBlockCounts','line_number':33,'multiline':False]['text':' JS::{Start,Stop}PCCountProfiling, JS::PurgePCCounts, JS::GetPCCountScript{Count,Summary,Contents}','line_number':36,'multiline':False]['text':' js::DumpPC, js::DumpScript','line_number':37,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':38,'multiline':False]['text':' for AllBytecodesIterable','line_number':46,'multiline':False]['text':' js::{,Script}FrameIter','line_number':50,'multiline':False]['text':' js::ValueToSource','line_number':60,'multiline':False]['text':' js_*_str','line_number':61,'multiline':False]['text':'
 * Index limit must stay within 32 bits.
 ','line_number':75,'multiline':True]['text':'
 * Each element of the array is either a source literal associated with JS
 * bytecode or null.
 ','line_number':87,'multiline':True]['text':'
 * Array of JS bytecode names used by PC count JSON, DEBUG-only Disassemble
 * and JIT debug spew.
 ','line_number':97,'multiline':True]['text':'**********************************************************************','line_number':107,'multiline':True]['text':' static ','line_number':112,'multiline':True]['text':' Ensure the Disassemble1 call below does not discard the script counts.','line_number':154,'multiline':False]['text':'///////////////////////////////////////////////////////////////////','line_number':233,'multiline':False]['text':' Bytecode Parser','line_number':234,'multiline':False]['text':'///////////////////////////////////////////////////////////////////','line_number':235,'multiline':False]['text':' Stores the information about the stack slot, where the value comes from.','line_number':237,'multiline':False]['text':' Elements of BytecodeParser::Bytecode.{offsetStack,offsetStackAfter} arrays.','line_number':238,'multiline':False]['text':' The offset of the PC that pushed the value for this slot.','line_number':240,'multiline':False]['text':' The index in `ndefs` for the PC (0-origin)','line_number':243,'multiline':False]['text':' Ignored this value in the expression decompilation.','line_number':249,'multiline':False]['text':' Used by JSOp::NopDestructuring.  See BytecodeParser::simulateOp.','line_number':250,'multiline':False]['text':' The value in this slot comes from 2 or more paths.','line_number':253,'multiline':False]['text':' offset_ and defIndex_ holds the information for the path that','line_number':254,'multiline':False]['text':' reaches here first.','line_number':255,'multiline':False]['text':' Keep offset_ and defIndex_ values for stack dump.','line_number':288,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':325,'multiline':True]['text':' Whether this instruction has been analyzed to get its output defines','line_number':329,'multiline':False]['text':' and stack.','line_number':330,'multiline':False]['text':' Stack depth before this opcode.','line_number':333,'multiline':False]['text':' Pointer to array of |stackDepth| offsets.  An element at position N','line_number':336,'multiline':False]['text':' in the array is the offset of the opcode that defined the','line_number':337,'multiline':False]['text':' corresponding stack slot.  The top of the stack is at position','line_number':338,'multiline':False]['text':' |stackDepth - 1|.','line_number':339,'multiline':False]['text':' stack depth after this opcode.','line_number':343,'multiline':False]['text':' Pointer to array of |stackDepthAfter| offsets.','line_number':346,'multiline':False]['text':' A list of offsets of the bytecode that jumps to this bytecode,','line_number':356,'multiline':False]['text':' exclusing previous bytecode.','line_number':357,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':359,'multiline':True]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':396,'multiline':True]['text':' When control-flow merges, intersect the stacks, marking slots that','line_number':398,'multiline':False]['text':' are defined by different offsets and/or defIndices merged.','line_number':399,'multiline':False]['text':' This is sufficient for forward control-flow.  It doesn't grok loops','line_number':400,'multiline':False]['text':' -- for that you would have to iterate to a fixed point -- but there','line_number':401,'multiline':False]['text':' shouldn't be operands on the stack at a loop back-edge anyway.','line_number':402,'multiline':False]['text':' Dedicated mode for stack dump.','line_number':426,'multiline':False]['text':' Capture stack after each opcode, and also enable special handling for','line_number':427,'multiline':False]['text':' some opcodes to make stack transition clearer.','line_number':428,'multiline':False]['text':' Sometimes the code generator in debug mode asks about the stack depth','line_number':452,'multiline':False]['text':' of unreachable code (bug 932180 comment 22).  Assume that unreachable','line_number':453,'multiline':False]['text':' code has no operands on the stack.','line_number':454,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':518,'multiline':True]['text':' anonymous namespace','line_number':558,'multiline':False]['text':' Opcodes that modifies the object but keeps it on the stack while','line_number':573,'multiline':False]['text':' initialization should be listed here instead of switch below.','line_number':574,'multiline':False]['text':' For error message, they shouldn't be shown as the original object','line_number':575,'multiline':False]['text':' after adding properties.','line_number':576,'multiline':False]['text':' For stack dump, keeping the input is better.','line_number':577,'multiline':False]['text':' Keep the second value.','line_number':587,'multiline':False]['text':' Keep the third value.','line_number':599,'multiline':False]['text':' DEBUG ','line_number':608,'multiline':True]['text':' Mark the current offset as defining its values on the offset stack,','line_number':610,'multiline':False]['text':' unless it just reshuffles the stack.  In that case we want to preserve','line_number':611,'multiline':False]['text':' the opcode that generated the original value.','line_number':612,'multiline':False]['text':' Poison the last offset to not obfuscate the error message.','line_number':621,'multiline':False]['text':' Keep the switch value.','line_number':626,'multiline':False]['text':' Keep the top value.','line_number':699,'multiline':False]['text':' Pop the top value, keep the other value.','line_number':705,'multiline':False]['text':' Pop the top two values, keep the other value.','line_number':711,'multiline':False]['text':' Keep the top value, removing other 1 value.','line_number':722,'multiline':False]['text':' Keep the top value, removing other 2 values.','line_number':730,'multiline':False]['text':' Keep the top value, removing other 3 values.','line_number':738,'multiline':False]['text':' Keep the top value and push one more value.','line_number':748,'multiline':False]['text':' Keep the top two values, and push one new value.','line_number':755,'multiline':False]['text':' DEBUG ','line_number':764,'multiline':True]['text':' If this is a backedge, assert we parsed the target JSOp::LoopHead.','line_number':806,'multiline':False]['text':' DEBUG ','line_number':808,'multiline':True]['text':' Fill in stack depth and definitions at initial bytecode.','line_number':826,'multiline':False]['text':' Fill in stack depth and definitions at initial bytecode.','line_number':833,'multiline':False]['text':' Next bytecode to analyze.','line_number':849,'multiline':False]['text':' Haven't found a path by which this bytecode is reachable.','line_number':856,'multiline':False]['text':' On a jump target, we reload the offsetStack saved for the current','line_number':860,'multiline':False]['text':' bytecode, as it contains either the original offset stack, or the','line_number':861,'multiline':False]['text':' merged offset stack.','line_number':862,'multiline':False]['text':' No need to reparse.','line_number':870,'multiline':False]['text':' DEBUG ','line_number':885,'multiline':True]['text':' Everything between a try and corresponding catch or finally is','line_number':916,'multiline':False]['text':' conditional. Note that there is no problem with code which is skipped','line_number':917,'multiline':False]['text':' by a thrown exception but is not caught by a later handler in the','line_number':918,'multiline':False]['text':' same function: no more code will execute, and it does not matter what','line_number':919,'multiline':False]['text':' is defined.','line_number':920,'multiline':False]['text':' Check basic jump opcodes, which may or may not have a fallthrough.','line_number':944,'multiline':False]['text':' Case instructions do not push the lvalue back when branching.','line_number':946,'multiline':False]['text':' Handle any fallthrough from this opcode.','line_number':959,'multiline':False]['text':'
 * If pc != nullptr, include a prefix indicating whether the PC is at the
 * current line. If showAll is true, include the source note type and the
 * entry stack depth.
 ','line_number':993,'multiline':True]['text':' This will decompile the stack for the same PC many times.','line_number':1389,'multiline':False]['text':' We'll avoid optimizing it since this is a testing function','line_number':1390,'multiline':False]['text':' and it won't be worth managing cached expression here.','line_number':1391,'multiline':False]['text':' Display stack dump before diplaying the offsets for each case.','line_number':1543,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':1661,'multiline':True]['text':'
 * The expression decompiler is invoked by error handling code to produce a
 * string representation of the erroring expression. As it's only a debugging
 * tool, it only supports basic expressions. For anything complicated, it simply
 * puts "(intermediate value)" into the error result.
 *
 * Here's the basic algorithm:
 *
 * 1. Find the stack location of the value whose expression we wish to
 * decompile. The error handler can explicitly pass this as an
 * argument. Otherwise, we search backwards down the stack for the offending
 * value.
 *
 * 2. Instantiate and run a BytecodeParser for the current frame. This creates a
 * stack of pcs parallel to the interpreter stack; given an interpreter stack
 * location, the corresponding pc stack location contains the opcode that pushed
 * the value in the interpreter. Now, with the result of step 1, we have the
 * opcode responsible for pushing the value we want to decompile.
 *
 * 3. Pass the opcode to decompilePC. decompilePC is the main decompiler
 * routine, responsible for a string representation of the expression that
 * generated a certain stack location. decompilePC looks at one opcode and
 * returns the JS source equivalent of that opcode.
 *
 * 4. Expressions can, of course, contain subexpressions. For example, the
 * literals "4" and "5" are subexpressions of the addition operator in "4 +
 * 5". If we need to decompile a subexpression, we call decompilePC (step 2)
 * recursively on the operands' pcs. The result is a depth-first traversal of
 * the expression tree.
 *
 ','line_number':1664,'multiline':True]['text':' Dedicated mode for stack dump.','line_number':1702,'multiline':False]['text':' Generates an expression for stack dump, including internal state,','line_number':1703,'multiline':False]['text':' and also disables special handling for self-hosted code.','line_number':1704,'multiline':False]['text':' Handle simple cases of binary and unary operators.','line_number':1748,'multiline':False]['text':' For self-hosted scripts that are called from non-self-hosted code,','line_number':1778,'multiline':False]['text':' decompiling the parameter name in the self-hosted script is','line_number':1779,'multiline':False]['text':' unhelpful. Decompile the argument name instead.','line_number':1780,'multiline':False]['text':' For stack dump, argument name is not necessary.','line_number':1783,'multiline':False]['text':' DEBUG ','line_number':1785,'multiline':True]['text':' Note that decompiling the argument in the parent frame might','line_number':1792,'multiline':False]['text':' not succeed.','line_number':1793,'multiline':False]['text':' If it fails, do not return parameter name and let the caller','line_number':1798,'multiline':False]['text':' fallback.','line_number':1799,'multiline':False]['text':' NOTE: We don't show the right hand side of the operation because','line_number':1840,'multiline':False]['text':' it's used in error messages like: "a[0] is not readable".','line_number':1841,'multiline':False]['text':'','line_number':1842,'multiline':False]['text':' We could though.','line_number':1843,'multiline':False]['text':' |this| could convert to a very long object initialiser, so cite it by','line_number':1886,'multiline':False]['text':' its keyword name.','line_number':1887,'multiline':False]['text':' INDEX won't be be exposed to error message.','line_number':1966,'multiline':False]['text':' BigInt::dump() only available in this configuration.','line_number':1985,'multiline':False]['text':' Special decompilation for stack dump.','line_number':2003,'multiline':False]['text':' For stack dump, defIndex == 0 is not used.','line_number':2058,'multiline':False]['text':' For stack dump, defIndex == 0 is not used.','line_number':2063,'multiline':False]['text':' For stack dump, defIndex == 0 is not used.','line_number':2081,'multiline':False]['text':' For stack dump, defIndex == 0 is not used.','line_number':2094,'multiline':False]['text':' Printing "yield SOMETHING" is confusing since the operand doesn't','line_number':2120,'multiline':False]['text':' match to the syntax, since the stack operand for "yield 10" is','line_number':2121,'multiline':False]['text':' the result object, not 10.','line_number':2122,'multiline':False]['text':' DEBUG ','line_number':2147,'multiline':True]['text':' DEBUG ','line_number':2178,'multiline':True]['text':' Destructured arguments have no single binding name.','line_number':2218,'multiline':False]['text':' anonymous namespace','line_number':2238,'multiline':False]['text':' The expression decompiler asserts the script is in the current realm.','line_number':2244,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':2271,'multiline':True]['text':' The decompiler may be called from inside functions that are not','line_number':2288,'multiline':False]['text':' called from script, but via the C++ API directly, such as','line_number':2289,'multiline':False]['text':' Invoke. In that case, the youngest script frame may have a','line_number':2290,'multiline':False]['text':' completely unrelated pc and stack depth, so we give up.','line_number':2291,'multiline':False]['text':' We search from fp->sp to base to find the most recently calculated','line_number':2296,'multiline':False]['text':' value matching v under assumption that it is the value that caused','line_number':2297,'multiline':False]['text':' the exception.','line_number':2298,'multiline':False]['text':' If the current PC has fewer values on the stack than the index we are','line_number':2308,'multiline':False]['text':' looking for, the blamed value must be one pushed by the current','line_number':2309,'multiline':False]['text':' bytecode (e.g. JSOp::MoreIter), so restore *valuepc.','line_number':2310,'multiline':False]['text':'
   * Give up if we need deterministic behavior for differential testing.
   * IonMonkey doesn't use InterpreterFrames and this ensures we get the same
   * error messages.
   ','line_number':2331,'multiline':True]['text':'
   * FIXME: Fall back if iter.isIon(), since the stack snapshot may be for the
   * previous pc (see bug 831120).
   ','line_number':2351,'multiline':True]['text':' Give up if in prologue.','line_number':2364,'multiline':False]['text':' Prevent users from seeing "(void 0)"','line_number':2412,'multiline':False]['text':' See note in DecompileExpressionFromStack. ','line_number':2429,'multiline':True]['text':'
   * Settle on the nearest script frame, which should be the builtin that
   * called the intrinsic.
   ','line_number':2434,'multiline':True]['text':'
   * Get the second-to-top frame, the non-self-hosted caller of the builtin
   * that called the intrinsic.
   ','line_number':2442,'multiline':True]['text':' Don't handle getters, setters or calls from fun.call/fun.apply. ','line_number':2461,'multiline':True]['text':' Prevent users from seeing "(void 0)"','line_number':2509,'multiline':False]['text':' This could be faster (by following jump instructions if the target','line_number':2517,'multiline':False]['text':' is <= offset).','line_number':2518,'multiline':False]['text':'
 * There are three possible PCCount profiling states:
 *
 * 1. None: Neither scripts nor the runtime have count information.
 * 2. Profile: Active scripts have count information, the runtime does not.
 * 3. Query: Scripts do not have count information, the runtime does.
 *
 * When starting to profile scripts, counting begins immediately, with all JIT
 * code discarded and recompiled with counts as necessary. Active interpreter
 * frames will not begin profiling until they begin executing another script
 * (via a call or return).
 *
 * The below API functions manage transitions to new states, according
 * to the table below.
 *
 *                                  Old State
 *                          -------------------------
 * Function                 None      Profile   Query
 * --------
 * StartPCCountProfiling    Profile   Profile   Profile
 * StopPCCountProfiling     None      Query     Query
 * PurgePCCounts            None      None      None
 ','line_number':2528,'multiline':True]['text':' If the current instruction is a jump target,','line_number':2745,'multiline':False]['text':' then update the number of hits.','line_number':2746,'multiline':False]['text':' defIndex passed here is not used.','line_number':2762,'multiline':False]['text':' defIndex = ','line_number':2763,'multiline':True]['text':' If the current instruction has thrown,','line_number':2790,'multiline':False]['text':' then decrement the hit counts with the number of throws.','line_number':2791,'multiline':False]['text':' Collect the list of scripts which are part of the current realm.','line_number':2898,'multiline':False]['text':' Hold the scripts that we have already flushed, to avoid flushing them','line_number':2904,'multiline':False]['text':' twice.','line_number':2905,'multiline':False]['text':' Ensure the LCovRealm exists to collect info into.','line_number':2923,'multiline':False]['text':' Collect code coverage info for one realm.','line_number':2929,'multiline':False]['text':' Iterate from the last to the first object in order to have','line_number':2953,'multiline':False]['text':' the functions them visited in the opposite order when popping','line_number':2954,'multiline':False]['text':' elements from the stack of remaining scripts, such that the','line_number':2955,'multiline':False]['text':' functions are more-less listed with increasing line numbers.','line_number':2956,'multiline':False]['text':' Ignore asm.js functions','line_number':2969,'multiline':False]['text':' Queue the script in the list of script associated to the','line_number':2974,'multiline':False]['text':' current source.','line_number':2975,'multiline':False]