['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::Scalar::Type','line_number':22,'multiline':False]['text':' Push return addresses callee-side.','line_number':29,'multiline':False]['text':' JS_CODELABEL_LINKMODE gives labels additional metadata','line_number':35,'multiline':False]['text':' describing how Bind() should patch them.','line_number':36,'multiline':False]['text':' namespace Disassembler','line_number':47,'multiline':False]['text':' Used for 32-bit immediates which do not require relocation.','line_number':94,'multiline':False]['text':' Pointer-sized integer to be embedded as an immediate in an instruction.','line_number':120,'multiline':False]['text':' Used for 64-bit immediates which do not require relocation.','line_number':127,'multiline':False]['text':' Pointer to be embedded as an immediate in an instruction.','line_number':147,'multiline':False]['text':' A special unchecked variant for contexts where we know it is safe to','line_number':154,'multiline':False]['text':' use an immptr. This is assuming the caller knows what they're doing.','line_number':155,'multiline':False]['text':' To make code serialization-safe, wasm compilation should only','line_number':159,'multiline':False]['text':' compile pointer immediates using a SymbolicAddress.','line_number':160,'multiline':False]['text':' The same as ImmPtr except that the intention is to patch this','line_number':191,'multiline':False]['text':' instruction. The initial value of the immediate is 'addr' and this value is','line_number':192,'multiline':False]['text':' either clobbered or used in the patching process.','line_number':193,'multiline':False]['text':' Used for immediates which require relocation.','line_number':204,'multiline':False]['text':' Nursery pointers can't be used if the main thread might be currently','line_number':210,'multiline':False]['text':' performing a minor GC.','line_number':211,'multiline':False]['text':' wasm shouldn't be creating GC things','line_number':214,'multiline':False]['text':' Pointer to trampoline code. Trampoline code is kept alive until the runtime','line_number':222,'multiline':False]['text':' is destroyed, so does not need to be traced.','line_number':223,'multiline':False]['text':' Pointer to be embedded as an immediate that is loaded/stored from by an','line_number':231,'multiline':False]['text':' instruction.','line_number':232,'multiline':False]['text':' The same as AbsoluteAddress except that the intention is to patch this','line_number':245,'multiline':False]['text':' instruction. The initial value of the immediate is 'addr' and this value is','line_number':246,'multiline':False]['text':' either clobbered or used in the patching process.','line_number':247,'multiline':False]['text':' Specifies an address computed in the form of a register base and a constant,','line_number':258,'multiline':False]['text':' 32-bit offset.','line_number':259,'multiline':False]['text':' Specifies an address computed in the form of a register base, a register','line_number':296,'multiline':False]['text':' index with a scale, and a constant, 32-bit offset.','line_number':297,'multiline':False]['text':' A BaseIndex used to access Values.  Note that |offset| is *not* scaled by','line_number':337,'multiline':False]['text':' sizeof(Value).  Use this *only* if you're indexing into a series of Values','line_number':338,'multiline':False]['text':' that aren't object elements or object slots (for example, values on the','line_number':339,'multiline':False]['text':' stack, values in an arguments object, &c.).  If you're indexing into an','line_number':340,'multiline':False]['text':' object's elements or slots, don't use this directly!  Use','line_number':341,'multiline':False]['text':' BaseObject{Element,Slot}Index instead.','line_number':342,'multiline':False]['text':' Specifies the address of an indexed Value within object elements from a','line_number':353,'multiline':False]['text':' base.  The index must not already be scaled by sizeof(Value)!','line_number':354,'multiline':False]['text':' Like BaseObjectElementIndex, except for object slots.','line_number':369,'multiline':False]['text':' The target is immovable, so patching is only needed if the source','line_number':385,'multiline':False]['text':' buffer is relocated and the reference is relative.','line_number':386,'multiline':False]['text':' The target is the start of a JitCode buffer, which must be traced','line_number':389,'multiline':False]['text':' during garbage collection. Relocations and patching may be needed.','line_number':390,'multiline':False]['text':' A code label contains an absolute reference to a point in the code. Thus, it','line_number':422,'multiline':False]['text':' cannot be patched until after linking.','line_number':423,'multiline':False]['text':' When the source label is resolved into a memory address, this address is','line_number':424,'multiline':False]['text':' patched into the destination address.','line_number':425,'multiline':False]['text':' Some need to distinguish between multiple ways of patching that address.','line_number':426,'multiline':False]['text':' See JS_CODELABEL_LINKMODE.','line_number':427,'multiline':False]['text':' The destination position, where the absolute reference should get','line_number':429,'multiline':False]['text':' patched into.','line_number':430,'multiline':False]['text':' The source label (relative) in the code to where the destination should','line_number':433,'multiline':False]['text':' get patched to.','line_number':434,'multiline':False]['text':' namespace jit','line_number':483,'multiline':False]['text':' Represents an instruction to be patched and the intended pointee. These','line_number':487,'multiline':False]['text':' links are accumulated in the MacroAssembler, but patching is done outside','line_number':488,'multiline':False]['text':' the MacroAssembler (in Module::staticallyLink).','line_number':489,'multiline':False]['text':' Describes a single wasm or asm.js memory access for the purpose of generating','line_number':501,'multiline':False]['text':' code and metadata.','line_number':502,'multiline':False]['text':' namespace wasm','line_number':569,'multiline':False]['text':' The base class of all Assemblers for all archs.','line_number':573,'multiline':False]['text':' WebAssembly metadata emitted by masm operations accumulated on the','line_number':607,'multiline':False]['text':' MacroAssembler, and swapped into a wasm::CompiledCode after finish().','line_number':608,'multiline':False]['text':' This one returns an index as the try note so that it can be looked up','line_number':629,'multiline':False]['text':' later to add the end point and stack position of the try block.','line_number':630,'multiline':False]['text':' namespace jit','line_number':647,'multiline':False]['text':' namespace js','line_number':648,'multiline':False]['text':' jit_shared_Assembler_shared_h ','line_number':650,'multiline':True]