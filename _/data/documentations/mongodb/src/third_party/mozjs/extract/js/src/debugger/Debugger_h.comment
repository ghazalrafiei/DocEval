['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' for MOZ_ASSERT_HELPER1','line_number':10,'multiline':False]['text':' for MOZ_RAII','line_number':11,'multiline':False]['text':' for DoublyLinkedListElement','line_number':12,'multiline':False]['text':' for HashSet, DefaultHasher (ptr only)','line_number':13,'multiline':False]['text':' for LinkedList (ptr only)','line_number':14,'multiline':False]['text':' for Maybe, Nothing','line_number':15,'multiline':False]['text':' for Range','line_number':16,'multiline':False]['text':' for Result','line_number':17,'multiline':False]['text':' for TimeStamp','line_number':18,'multiline':False]['text':' for Variant','line_number':19,'multiline':False]['text':' for size_t','line_number':21,'multiline':False]['text':' for uint32_t, uint64_t, uintptr_t','line_number':22,'multiline':False]['text':' for std::move','line_number':23,'multiline':False]['text':' for Handle, UnsafeTraceRoot','line_number':25,'multiline':False]['text':' for JS_GC_ZEAL','line_number':26,'multiline':False]['text':' for Value, HandleObject','line_number':27,'multiline':False]['text':' for DebugAPI','line_number':29,'multiline':False]['text':' for DebuggerObject','line_number':30,'multiline':False]['text':' for TraceableFifo','line_number':31,'multiline':False]['text':' for WeakHeapPtrGlobalObject, HeapPtr','line_number':32,'multiline':False]['text':' for IsAboutToBeFinalized, ToMarkable','line_number':33,'multiline':False]['text':' for HandleSavedFrame, HandleAtom','line_number':34,'multiline':False]['text':' for TraceNullableEdge, TraceEdge','line_number':35,'multiline':False]['text':' for WeakMap','line_number':36,'multiline':False]['text':' for ZoneAllocPolicy','line_number':37,'multiline':False]['text':' for GarbageCollectionEvent','line_number':38,'multiline':False]['text':' for PropertyDescriptor','line_number':39,'multiline':False]['text':' for UncheckedUnwrap','line_number':40,'multiline':False]['text':' for IsDeadProxyObject','line_number':41,'multiline':False]['text':' for AbstractGeneratorObject','line_number':42,'multiline':False]['text':' for GlobalObject','line_number':43,'multiline':False]['text':' for JSContext','line_number':44,'multiline':False]['text':' for JSObject','line_number':45,'multiline':False]['text':' for JSScript, ScriptSourceObject','line_number':46,'multiline':False]['text':' for NativeObject','line_number':47,'multiline':False]['text':' for JSRuntime','line_number':48,'multiline':False]['text':' for SavedFrame','line_number':49,'multiline':False]['text':' for AbstractFramePtr, FrameIter','line_number':50,'multiline':False]['text':' for JSAtom','line_number':51,'multiline':False]['text':' for WasmInstanceObject','line_number':52,'multiline':False]['text':' namespace JS ','line_number':61,'multiline':True]['text':' namespace gc ','line_number':71,'multiline':True]['text':' namespace wasm ','line_number':74,'multiline':True]['text':' namespace js ','line_number':75,'multiline':True]['text':'
 * Windows 3.x used a cooperative multitasking model, with a Yield macro that
 * let you relinquish control to other cooperative threads. Microsoft replaced
 * it with an empty macro long ago. We should be free to use it in our code.
 ','line_number':77,'multiline':True]['text':'*
 * Tells how the JS engine should resume debuggee execution after firing a
 * debugger hook.  Most debugger hooks get to choose how the debuggee proceeds;
 * see js/src/doc/Debugger/Conventions.md under "Resumption Values".
 *
 * Debugger::processHandlerResult() translates between JavaScript values and
 * this enum.
 ','line_number':95,'multiline':True]['text':'*
   * The debuggee should continue unchanged.
   *
   * This corresponds to a resumption value of `undefined`.
   ','line_number':104,'multiline':True]['text':'*
   * Throw an exception in the debuggee.
   *
   * This corresponds to a resumption value of `{throw: <value>}`.
   ','line_number':111,'multiline':True]['text':'*
   * Terminate the debuggee, as if it had been cancelled via the "slow
   * script" ribbon.
   *
   * This corresponds to a resumption value of `null`.
   ','line_number':118,'multiline':True]['text':'*
   * Force the debuggee to return from the current frame.
   *
   * This corresponds to a resumption value of `{return: <value>}`.
   ','line_number':126,'multiline':True]['text':'*
 * A completion value, describing how some sort of JavaScript evaluation
 * completed. This is used to tell an onPop handler what's going on with the
 * frame, and to report the outcome of call, apply, setProperty, and getProperty
 * operations.
 *
 * Local variables of type Completion should be held in Rooted locations,
 * and passed using Handle and MutableHandle.
 ','line_number':134,'multiline':True]['text':' The JS::Result macros want to assign to an existing variable, so having a','line_number':208,'multiline':False]['text':' default constructor is handy.','line_number':209,'multiline':False]['text':' Construct a completion from a specific variant.','line_number':212,'multiline':False]['text':'','line_number':213,'multiline':False]['text':' Unfortunately, using a template here would prevent the implicit definitions','line_number':214,'multiline':False]['text':' of the copy and move constructor and assignment operators, which is icky.','line_number':215,'multiline':False]['text':' Capture a JavaScript operation result as a Completion value. This clears','line_number':229,'multiline':False]['text':' any exception and stack from cx, taking ownership of them itself.','line_number':230,'multiline':False]['text':' Construct a completion given an AbstractFramePtr that is being popped. This','line_number':233,'multiline':False]['text':' clears any exception and stack from cx, taking ownership of them itself.','line_number':234,'multiline':False]['text':' True if this completion is a suspension of a generator or async call. ','line_number':255,'multiline':True]['text':' Set `result` to a Debugger API completion value describing this completion.
   ','line_number':261,'multiline':True]['text':'
   * Set `resumeMode`, `value`, and `exnStack` to values describing this
   * completion.
   ','line_number':266,'multiline':True]['text':'
   * Given a `ResumeMode` and value (typically derived from a resumption value
   * returned by a Debugger hook), update this completion as requested.
   ','line_number':272,'multiline':True]['text':'
 * [SMDOC] Cross-compartment weakmap entries for Debugger API objects
 *
 * The Debugger API creates objects like Debugger.Object, Debugger.Script,
 * Debugger.Environment, etc. to refer to things in the debuggee. Each Debugger
 * gets at most one Debugger.Mumble for each referent: Debugger.Mumbles are
 * unique per referent per Debugger. This is accomplished by storing the
 * debugger objects in a DebuggerWeakMap, using the debuggee thing as the key.
 *
 * Since a Debugger and its debuggee must be in different compartments, a
 * Debugger.Mumble's pointer to its referent is a cross-compartment edge, from
 * the debugger's compartment into the debuggee compartment. Like any other sort
 * of cross-compartment edge, the GC needs to be able to find all of these edges
 * readily. The GC therefore consults the debugger's weakmap tables as
 * necessary.  This allows the garbage collector to easily find edges between
 * debuggee object compartments and debugger compartments when calculating the
 * zone sweep groups.
 *
 * The current implementation results in all debuggee object compartments being
 * swept in the same group as the debugger. This is a conservative approach, and
 * compartments may be unnecessarily grouped. However this results in a simpler
 * and faster implementation.
 ','line_number':297,'multiline':True]['text':'
 * A weakmap from GC thing keys to JSObject values that supports the keys being
 * in different compartments to the values. All values must be in the same
 * compartment.
 *
 * If InvisibleKeysOk is true, then the map can have keys in invisible-to-
 * debugger compartments. If it is false, we assert that such entries are never
 * created.
 *
 * Note that keys in these weakmaps can be in any compartment, debuggee or not,
 * because they are not deleted when a compartment is no longer a debuggee: the
 * values need to maintain object identity across add/remove/add
 * transitions. (Frames are an exception to the rule. Existing Debugger.Frame
 * objects are killed if their realm is removed as a debugger; if the realm
 * beacomes a debuggee again later, new Frame objects are created.)
 ','line_number':321,'multiline':True]['text':' Expose those parts of HashMap public interface that are used by Debugger','line_number':354,'multiline':False]['text':' methods.','line_number':355,'multiline':False]['text':' Expose WeakMap public interface.','line_number':363,'multiline':False]['text':' Let the weak map marking verifier know that this map can','line_number':405,'multiline':False]['text':' contain keys in other zones.','line_number':406,'multiline':False]['text':'
 * Env is the type of what ECMA-262 calls "lexical environments" (the records
 * that represent scopes and bindings). See vm/EnvironmentObject.h.
 *
 * This is JSObject rather than js::EnvironmentObject because GlobalObject and
 * some proxies, despite not being in the EnvironmentObject class hierarchy,
 * can be in environment chains.
 ','line_number':426,'multiline':True]['text':' The referent of a Debugger.Script.','line_number':436,'multiline':False]['text':'','line_number':437,'multiline':False]['text':' - For most scripts, we point at their BaseScript.','line_number':438,'multiline':False]['text':'','line_number':439,'multiline':False]['text':' - For Web Assembly instances for which we are presenting a script-like','line_number':440,'multiline':False]['text':'   interface, we point at their WasmInstanceObject.','line_number':441,'multiline':False]['text':'','line_number':442,'multiline':False]['text':' The DebuggerScript object itself simply stores a Cell* in its private','line_number':443,'multiline':False]['text':' pointer, but when we're working with that pointer in C++ code, we'd rather','line_number':444,'multiline':False]['text':' not pass around a Cell* and be constantly asserting that, yes, this really','line_number':445,'multiline':False]['text':' does point to something okay. Instead, we immediately build an instance of','line_number':446,'multiline':False]['text':' this type from the Cell* and use that instead, so we can benefit from','line_number':447,'multiline':False]['text':' Variant's static checks.','line_number':448,'multiline':False]['text':' The referent of a Debugger.Source.','line_number':452,'multiline':False]['text':'','line_number':453,'multiline':False]['text':' - For most sources, this is a ScriptSourceObject.','line_number':454,'multiline':False]['text':'','line_number':455,'multiline':False]['text':' - For Web Assembly instances for which we are presenting a source-like','line_number':456,'multiline':False]['text':'   interface, we point at their WasmInstanceObject.','line_number':457,'multiline':False]['text':'','line_number':458,'multiline':False]['text':' The DebuggerSource object actually simply stores a Cell* in its private','line_number':459,'multiline':False]['text':' pointer. See the comments for DebuggerScriptReferent for the rationale for','line_number':460,'multiline':False]['text':' this type.','line_number':461,'multiline':False]['text':' bool (Debugger*) ','line_number':465,'multiline':True]['text':' Note: In the general case, 'debuggers' contains references to objects in','line_number':468,'multiline':False]['text':' different compartments--every compartment *except* the debugger's.','line_number':469,'multiline':False]['text':'*
   * The hook function will be called during `init()` to build the list of
   * active debuggers, and again during dispatch to validate that the hook is
   * still active for the given debugger.
   ','line_number':474,'multiline':True]['text':' ResumeMode (Debugger*) ','line_number':486,'multiline':True]['text':' void (Debugger*) ','line_number':489,'multiline':True]['text':' bool (Debugger*, ResumeMode&, MutableHandleValue) ','line_number':492,'multiline':True]['text':' Bring DebugAPI::IsObserving into the Debugger namespace.','line_number':559,'multiline':False]['text':' Return true if the given realm is a debuggee of this debugger,','line_number':564,'multiline':False]['text':' false otherwise.','line_number':565,'multiline':False]['text':' Return true if this Debugger observed a debuggee that participated in the','line_number':568,'multiline':False]['text':' GC identified by the given GC number. Return false otherwise.','line_number':569,'multiline':False]['text':' May return false negatives if we have hit OOM.','line_number':570,'multiline':False]['text':' Notify this Debugger that one or more of its debuggees is participating','line_number':575,'multiline':False]['text':' in the GC identified by the given GC number.','line_number':576,'multiline':False]['text':' The Debugger object. Strong reference. ','line_number':607,'multiline':True]['text':' Debuggee globals. Cross-compartment weak references. ','line_number':609,'multiline':True]['text':' Set of zones that we have debuggees in. ','line_number':610,'multiline':True]['text':' Strong reference. ','line_number':611,'multiline':True]['text':' Whether to enable code coverage on the Debuggee.','line_number':614,'multiline':False]['text':' List of all js::Breakpoints in this debugger.','line_number':624,'multiline':False]['text':' The set of GC numbers for which one or more of this Debugger's observed','line_number':630,'multiline':False]['text':' debuggees participated in.','line_number':631,'multiline':False]['text':'
   * Recompute the set of debuggee zones based on the set of debuggee globals.
   ','line_number':650,'multiline':True]['text':'
   * Return true if there is an existing object metadata callback for the
   * given global's compartment that will prevent our instrumentation of
   * allocations.
   ','line_number':655,'multiline':True]['text':'
   * Add allocations tracking for objects allocated within the given
   * debuggee's compartment. The given debuggee global must be observed by at
   * least one Debugger that is tracking allocations.
   ','line_number':662,'multiline':True]['text':'
   * Remove allocations tracking for objects allocated within the given
   * global's compartment. This is a no-op if there are still Debuggers
   * observing this global and who are tracking allocations.
   ','line_number':670,'multiline':True]['text':'
   * Add or remove allocations tracking for all debuggees.
   ','line_number':677,'multiline':True]['text':'
   * If this Debugger has a onNewGlobalObject handler, then
   * this link is inserted into the list headed by
   * JSRuntime::onNewGlobalObjectWatchers.
   ','line_number':683,'multiline':True]['text':'
   * If this Debugger has a onGarbageCollection handler, then
   * this link is inserted into the list headed by
   * JSRuntime::onGarbageCollectionWatchers.
   ','line_number':690,'multiline':True]['text':'
   * Map from stack frames that are currently on the stack to Debugger.Frame
   * instances.
   *
   * The keys are always live stack frames. We drop them from this map as
   * soon as they leave the stack (see slowPathOnLeaveFrame) and in
   * removeDebuggee.
   *
   * We don't trace the keys of this map (the frames are on the stack and
   * thus necessarily live), but we do trace the values. It's like a WeakMap
   * that way, but since stack frames are not gc-things, the implementation
   * has to be different.
   ','line_number':697,'multiline':True]['text':'
   * Map from generator objects to their Debugger.Frame instances.
   *
   * When a Debugger.Frame is created for a generator frame, it is added to
   * this map and remains there for the lifetime of the generator, whether
   * that frame is on the stack at the moment or not.  This is in addition to
   * the entry in `frames` that exists as long as the generator frame is on
   * the stack.
   *
   * We need to keep the Debugger.Frame object alive to deliver it to the
   * onEnterFrame handler on resume, and to retain onStep and onPop hooks.
   *
   * An entry is present in this table when:
   *  - both the debuggee generator object and the Debugger.Frame object exists
   *  - the debuggee generator object belongs to a realm that is a debuggee of
   *    the Debugger.Frame's owner.
   *
   * regardless of whether the frame is currently suspended. (This list is
   * meant to explain why we update the table in the particular places where
   * we do so.)
   *
   * An entry in this table exists if and only if the Debugger.Frame's
   * GENERATOR_INFO_SLOT is set.
   ','line_number':715,'multiline':True]['text':' An ephemeral map from BaseScript* to Debugger.Script instances.','line_number':743,'multiline':False]['text':' The map from debuggee source script objects to their Debugger.Source','line_number':749,'multiline':False]['text':' instances.','line_number':750,'multiline':False]['text':' The map from debuggee objects to their Debugger.Object instances.','line_number':755,'multiline':False]['text':' The map from debuggee Envs to Debugger.Environment instances.','line_number':759,'multiline':False]['text':' The map from WasmInstanceObjects to synthesized Debugger.Script','line_number':763,'multiline':False]['text':' instances.','line_number':764,'multiline':False]['text':' The map from WasmInstanceObjects to synthesized Debugger.Source','line_number':769,'multiline':False]['text':' instances.','line_number':770,'multiline':False]['text':' Keep track of tracelogger last drained identifiers to know if there are','line_number':775,'multiline':False]['text':' lost events.','line_number':776,'multiline':False]['text':'
   * Handle the result of a hook that is expected to return a resumption
   * value <https://wiki.mozilla.org/Debugger#Resumption_Values>. This is
   * called when we return from a debugging hook to debuggee code.
   *
   * If `success` is false, the hook failed. If an exception is pending in
   * ar.context(), attempt to handle it via the uncaught exception hook,
   * otherwise report it to the AutoRealm's global.
   *
   * If `success` is true, there must be no exception pending in ar.context().
   * `rv` may be:
   *
   *     undefined - Set `resultMode` to `ResumeMode::Continue` to continue
   *         execution normally.
   *
   *     {return: value} or {throw: value} - Call unwrapDebuggeeValue to
   *         unwrap `value`. Store the result in `vp` and set `resultMode` to
   *         `ResumeMode::Return` or `ResumeMode::Throw`. The interpreter
   *         will force the current frame to return or throw an exception.
   *
   *     null - Set `resultMode` to `ResumeMode::Terminate` to terminate the
   *         debuggee with an uncatchable error.
   *
   *     anything else - Make a new TypeError the pending exception and
   *         attempt to handle it with the uncaught exception handler.
   ','line_number':797,'multiline':True]['text':'*
   * Given a resumption return value from a hook, parse and validate it based
   * on the given frame, and split the result into a ResumeMode and Value.
   ','line_number':832,'multiline':True]['text':'*
   * If there is a pending exception and a handler, call the handler with the
   * exception so that it can attempt to resolve the error.
   ','line_number':840,'multiline':True]['text':'*
   * If the context has a pending exception, report it to the current global.
   ','line_number':847,'multiline':True]['text':'
   * Call the uncaught exception handler if there is one, returning true
   * if it handled the error, or false otherwise.
   ','line_number':852,'multiline':True]['text':'*
   * Suspend the DebuggerFrame, clearing on-stack data but leaving it linked
   * with the AbstractGeneratorObject so it can be re-used later.
   ','line_number':893,'multiline':True]['text':'*
   * Terminate the DebuggerFrame, clearing all data associated with the frame
   * so that it cannot be used to introspect stack frame data.
   ','line_number':900,'multiline':True]['text':'*
   * Terminate a given DebuggerFrame, removing all internal state and all
   * references to the frame from the Debugger itself. If the frame is being
   * terminated while 'frames' or 'generatorFrames' are being iterated, pass a
   * pointer to the iteration Enum to remove the entry and ensure that iteration
   * behaves properly.
   *
   * The AbstractFramePtr may be omited in a call so long as it is either
   * called again later with the correct 'frame', or the frame itself has never
   * had on-stack data or a 'frames' entry and has never had an onStep handler.
   ','line_number':906,'multiline':True]['text':' void (Debugger*, DebuggerFrame*) ','line_number':932,'multiline':True]['text':' void (Debugger*, DebuggerFrame*) ','line_number':934,'multiline':True]['text':'
   * Return a vector containing all Debugger.Frame instances referring to
   * |frame|. |global| is |frame|'s global object; if nullptr or omitted, we
   * compute it ourselves from |frame|.
   ','line_number':939,'multiline':True]['text':' Public for DebuggerScript::setBreakpoint.','line_number':949,'multiline':False]['text':' Whether the Debugger instance needs to observe all non-AOT JS','line_number':953,'multiline':False]['text':' execution of its debugees.','line_number':954,'multiline':False]['text':' Whether the Debugger instance needs to observe AOT-compiled asm.js','line_number':957,'multiline':False]['text':' execution of its debuggees.','line_number':958,'multiline':False]['text':' Whether the Debugger instance needs to observe coverage of any JavaScript','line_number':961,'multiline':False]['text':' execution.','line_number':962,'multiline':False]['text':' Whether the Debugger instance needs to observe native call invocations.','line_number':965,'multiline':False]['text':' bool (Debugger*) ','line_number':989,'multiline':True]['text':' void (Debugger*) ','line_number':990,'multiline':True]['text':' bool (Debugger*) ','line_number':994,'multiline':True]['text':' bool (Debugger*, ResumeMode&, MutableHandleValue) ','line_number':994,'multiline':True]['text':' bool () ','line_number':999,'multiline':True]['text':' We do not want errors within one hook to effect errors in other hooks,','line_number':1008,'multiline':False]['text':' so the only errors that we allow to propagate out of a debugger hook','line_number':1009,'multiline':False]['text':' are OOM errors and general terminations.','line_number':1010,'multiline':False]['text':'
   * Helper function to help wrap Debugger objects whose referents may be
   * variants. Currently Debugger.Script and Debugger.Source referents may
   * be variants.
   *
   * Prefer using wrapScript, wrapWasmScript, wrapSource, and wrapWasmSource
   * whenever possible.
   ','line_number':1046,'multiline':True]['text':'
   * Allocate and initialize a Debugger.Script instance whose referent is
   * |referent|.
   ','line_number':1063,'multiline':True]['text':'
   * Allocate and initialize a Debugger.Source instance whose referent is
   * |referent|.
   ','line_number':1070,'multiline':True]['text':'
   * Receive a "new script" event from the engine. A new script was compiled
   * or deserialized.
   ','line_number':1077,'multiline':True]['text':'
   * Receive a "garbage collection" event from the engine. A GC cycle with the
   * given data was recently completed.
   ','line_number':1084,'multiline':True]['text':'** Functions for use by Debugger.cpp. ********************************','line_number':1124,'multiline':True]['text':'
   * If env is nullptr, call vp->setNull() and return true. Otherwise, find
   * or create a Debugger.Environment object for the given Env. On success,
   * store the Environment object in *vp and return true.
   ','line_number':1135,'multiline':True]['text':'
   * Like cx->compartment()->wrap(cx, vp), but for the debugger realm.
   *
   * Preconditions: *vp is a value from a debuggee realm; cx is in the
   * debugger's compartment.
   *
   * If *vp is an object, this produces a (new or existing) Debugger.Object
   * wrapper for it. Otherwise this is the same as Compartment::wrap.
   *
   * If *vp is a magic JS_OPTIMIZED_OUT value, this produces a plain object
   * of the form { optimizedOut: true }.
   *
   * If *vp is a magic JS_MISSING_ARGUMENTS value signifying missing
   * arguments, this produces a plain object of the form { missingArguments:
   * true }.
   *
   * If *vp is a magic JS_UNINITIALIZED_LEXICAL value signifying an
   * unaccessible uninitialized binding, this produces a plain object of the
   * form { uninitialized: true }.
   ','line_number':1145,'multiline':True]['text':'
   * Unwrap a Debug.Object, without rewrapping it for any particular debuggee
   * compartment.
   *
   * Preconditions: cx is in the debugger compartment. *vp is a value in that
   * compartment. (*vp should be a "debuggee value", meaning it is the
   * debugger's reflection of a value in the debuggee.)
   *
   * If *vp is a Debugger.Object, store the referent in *vp. Otherwise, if *vp
   * is an object, throw a TypeError, because it is not a debuggee
   * value. Otherwise *vp is a primitive, so leave it alone.
   *
   * When passing values from the debuggee to the debugger:
   *     enter debugger compartment;
   *     call wrapDebuggeeValue;  // compartment- and debugger-wrapping
   *
   * When passing values from the debugger to the debuggee:
   *     call unwrapDebuggeeValue;  // debugger-unwrapping
   *     enter debuggee realm;
   *     call cx->compartment()->wrap;  // compartment-rewrapping
   *
   * (Extreme nerd sidebar: Unwrapping happens in two steps because there are
   * two different kinds of symmetry at work: regardless of which direction
   * we're going, we want any exceptions to be created and thrown in the
   * debugger compartment--mirror symmetry. But compartment wrapping always
   * happens in the target compartment--rotational symmetry.)
   ','line_number':1171,'multiline':True]['text':'
   * Store the Debugger.Frame object for iter in *vp/result.
   *
   * If this Debugger does not already have a Frame object for the frame
   * `iter` points to, a new Frame object is created, and `iter`'s private
   * data is copied into it.
   ','line_number':1204,'multiline':True]['text':'
   * Return the Debugger.Script object for |script|, or create a new one if
   * needed. The context |cx| must be in the debugger realm; |script| must be
   * a script in a debuggee realm.
   ','line_number':1220,'multiline':True]['text':'
   * Return the Debugger.Script object for |wasmInstance| (the toplevel
   * script), synthesizing a new one if needed. The context |cx| must be in
   * the debugger compartment; |wasmInstance| must be a WasmInstanceObject in
   * the debuggee realm.
   ','line_number':1227,'multiline':True]['text':'
   * Return the Debugger.Source object for |source|, or create a new one if
   * needed. The context |cx| must be in the debugger compartment; |source|
   * must be a script source object in a debuggee realm.
   ','line_number':1236,'multiline':True]['text':'
   * Return the Debugger.Source object for |wasmInstance| (the entire module),
   * synthesizing a new one if needed. The context |cx| must be in the
   * debugger compartment; |wasmInstance| must be a WasmInstanceObject in the
   * debuggee realm.
   ','line_number':1244,'multiline':True]['text':' Specialize InternalBarrierMethods so we can have WeakHeapPtr<Debugger*>.','line_number':1260,'multiline':False]['text':'*
 * This class exists for one specific reason. If a given Debugger object is in
 * a state where:
 *
 *   a) nothing in the system has a reference to the object
 *   b) the debugger is currently attached to a live debuggee
 *   c) the debugger has hooks like 'onEnterFrame'
 *
 * then we don't want the GC to delete the Debugger, because the system could
 * still call the hooks. This means we need to ensure that, whenever the global
 * gets marked, the Debugger will get marked as well. Critically, we _only_
 * want that to happen if the debugger has hooks. If it doesn't, then GCing
 * the debugger is the right think to do.
 *
 * Note that there are _other_ cases where the debugger may be held live, but
 * those are not addressed by this case.
 *
 * To accomplish this, we use a bit of roundabout link approach. Both the
 * Debugger and the debuggees can reach the link object:
 *
 *   Debugger  -> DebuggerDebuggeeLink  <- CCW <- Debuggee Global #1
 *      |                  |    ^   ^---<- CCW <- Debuggee Global #2
 *      \--<<-optional-<<--/     \------<- CCW <- Debuggee Global #3
 *
 * and critically, the Debugger is able to conditionally add or remove the link
 * going from the DebuggerDebuggeeLink _back_ to the Debugger. When this link
 * exists, the GC can trace all the way from the global to the Debugger,
 * meaning that any Debugger with this link will be kept alive as long as any
 * of its debuggees are alive.
 ','line_number':1276,'multiline':True]['text':'
 * A Handler represents a Debugger API reflection object's handler function,
 * like a Debugger.Frame's onStep handler. These handler functions are called by
 * the Debugger API to notify the user of certain events. For each event type,
 * we define a separate subclass of Handler.
 *
 * When a reflection object accepts a Handler, it calls its 'hold' method; and
 * if the Handler is replaced by another, or the reflection object is finalized,
 * the reflection object calls the Handler's 'drop' method. The reflection
 * object does not otherwise manage the Handler's lifetime, say, by calling its
 * destructor or freeing its memory. A simple Handler implementation might have
 * an empty 'hold' method, and have its 'drop' method delete the Handler. A more
 * complex Handler might process many kinds of events, and thus inherit from
 * many Handler subclasses and be held by many reflection objects
 * simultaneously; a handler like this could use 'hold' and 'drop' to manage a
 * reference count.
 *
 * To support SpiderMonkey's memory use tracking, 'hold' and 'drop' also require
 * a pointer to the owning reflection object, so that the Holder implementation
 * can properly report changes in ownership to functions using the
 * js::gc::MemoryUse categories.
 ','line_number':1320,'multiline':True]['text':'
   * If this Handler is a reference to a callable JSObject, return that
   * JSObject. Otherwise, this method returns nullptr.
   *
   * The JavaScript getters for handler properties on reflection objects use
   * this method to obtain the callable the handler represents. When a Handler's
   * 'object' method returns nullptr, that handler is simply not visible to
   * JavaScript.
   ','line_number':1345,'multiline':True]['text':' Report that this Handler is now held by owner. See comment above. ','line_number':1356,'multiline':True]['text':' Report that this Handler is no longer held by owner. See comment above. ','line_number':1359,'multiline':True]['text':'
   * Trace the reference to the handler. This method will be called by the
   * reflection object holding this Handler whenever the former is traced.
   ','line_number':1362,'multiline':True]['text':' Allocation size in bytes for memory accounting purposes. ','line_number':1368,'multiline':True]['text':'*
 * Breakpoint GC rules:
 *
 * BreakpointSites and Breakpoints are owned by the code in which they are set.
 * Tracing a JSScript or WasmInstance traces all BreakpointSites set in it,
 * which traces all Breakpoints; and if the code is garbage collected, the
 * BreakpointSite and the Breakpoints set at it are freed as well. Doing so is
 * not observable to JS, since the handlers would never fire, and there is no
 * way to enumerate all breakpoints without specifying a specific script, in
 * which case it must not have been GC'd.
 *
 * Although BreakpointSites and Breakpoints are not GC things, they should be
 * treated as belonging to the code's compartment. This means that the
 * BreakpointSite concrete subclasses' pointers to the code are not
 * cross-compartment references, but a Breakpoint's pointers to its handler and
 * owning Debugger are cross-compartment references, and go through
 * cross-compartment wrappers.
 ','line_number':1375,'multiline':True]['text':'*
 * A location in a JSScript or WasmInstance at which we have breakpoints. A
 * BreakpointSite owns a linked list of all the breakpoints set at its location.
 * In general, this list contains breakpoints set by multiple Debuggers in
 * various compartments.
 *
 * BreakpointSites are created only as needed, for locations at which
 * breakpoints are currently set. When the last breakpoint is removed from a
 * location, the BreakpointSite is removed as well.
 *
 * This is an abstract base class, with subclasses specialized for the different
 * sorts of code a breakpoint might be set in. JSBreakpointSite manages sites in
 * JSScripts, and WasmBreakpointSite manages sites in WasmInstances.
 ','line_number':1394,'multiline':True]['text':' List of all js::Breakpoints at this instruction.','line_number':1421,'multiline':False]['text':'
 * A breakpoint set at a given BreakpointSite, indicating the owning debugger
 * and the handler object. A Breakpoint is a member of two linked lists: its
 * owning debugger's list and its site's list.
 ','line_number':1447,'multiline':True]['text':' Our owning debugger. ','line_number':1458,'multiline':True]['text':'*
   * A cross-compartment wrapper for our owning debugger's object, a CCW in the
   * code's compartment to the Debugger object in its own compartment. Holding
   * this lets the GC know about the effective cross-compartment reference from
   * the code to the debugger; see "Breakpoint GC Rules", above.
   *
   * This is almost redundant with the `debugger` field, except that we need
   * access to our owning `Debugger` regardless of the relative privilege levels
   * of debugger and debuggee, regardless of whether we're in the midst of a GC,
   * and so on - unwrapping is just too entangled.
   ','line_number':1461,'multiline':True]['text':' The site at which we're inserted. ','line_number':1474,'multiline':True]['text':'*
   * The breakpoint handler object, via a cross-compartment wrapper in the
   * code's compartment.
   *
   * Although eventually we would like this to be a `js::Handler` instance, for
   * now it is just cross-compartment wrapper for the JS object supplied to
   * `setBreakpoint`, hopefully with a callable `hit` property.
   ','line_number':1478,'multiline':True]['text':'*
   * Link elements for each list this breakpoint can be in.
   ','line_number':1488,'multiline':True]['text':'*
   * Unlink this breakpoint from its Debugger's and and BreakpointSite's lists,
   * and free its memory.
   *
   * This is the low-level primitive shared by breakpoint removal and script
   * finalization code. It is only concerned with cleaning up this Breakpoint;
   * it does not check for now-empty BreakpointSites, unneeded DebugScripts, or
   * the like.
   ','line_number':1502,'multiline':True]['text':'*
   * Remove this breakpoint. Unlink it from its Debugger's and BreakpointSite's
   * lists, and if the BreakpointSite is now empty, clean that up and update JIT
   * code as necessary.
   ','line_number':1513,'multiline':True]['text':' namespace js ','line_number':1618,'multiline':True]['text':' debugger_Debugger_h ','line_number':1620,'multiline':True]