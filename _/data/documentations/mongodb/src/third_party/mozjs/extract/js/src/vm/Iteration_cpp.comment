['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JavaScript iterators. ','line_number':7,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':28,'multiline':False]['text':' js::PlainObject','line_number':40,'multiline':False]['text':' js_*_str','line_number':43,'multiline':False]['text':' js::PlainObject::createWithTemplate','line_number':48,'multiline':False]['text':' Beware!  This function may have to trace incompletely-initialized','line_number':64,'multiline':False]['text':' |NativeIterator| allocations if the |IdToString| in that constructor recurs','line_number':65,'multiline':False]['text':' into this code.','line_number':66,'multiline':False]['text':' The limits below are correct at every instant of |NativeIterator|','line_number':71,'multiline':False]['text':' initialization, with the end-pointer incremented as each new shape is','line_number':72,'multiline':False]['text':' created, so they're safe to use here.','line_number':73,'multiline':False]['text':' But as properties must be created *before* shapes, |propertiesBegin()|','line_number':78,'multiline':False]['text':' that depends on |shapesEnd()| having its final value can't safely be','line_number':79,'multiline':False]['text':' used.  Until this is fully initialized, use |propertyCursor_| instead,','line_number':80,'multiline':False]['text':' which points at the start of properties even in partially initialized','line_number':81,'multiline':False]['text':' |NativeIterator|s.  (|propertiesEnd()| is safe at all times with respect','line_number':82,'multiline':False]['text':' to the properly-chosen beginning.)','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' Note that we must trace all properties (not just those not yet visited,','line_number':85,'multiline':False]['text':' or just visited, due to |NativeIterator::previousPropertyWas|) for','line_number':86,'multiline':False]['text':' |NativeIterator|s to be reusable.','line_number':87,'multiline':False]['text':' Properties begin life non-null and never *become*','line_number':91,'multiline':False]['text':' null.  (Deletion-suppression will shift trailing','line_number':92,'multiline':False]['text':' properties over a deleted property in the properties','line_number':93,'multiline':False]['text':' array, but it doesn't null them out.)','line_number':94,'multiline':False]['text':' If we've already seen this, we definitely won't add it.','line_number':107,'multiline':False]['text':' It's not necessary to add properties to the hash set at the end of','line_number':113,'multiline':False]['text':' the prototype chain, but custom enumeration behaviors might return','line_number':114,'multiline':False]['text':' duplicated properties, so always add in such cases.','line_number':115,'multiline':False]['text':' Symbol-keyed properties and nonenumerable properties are skipped unless','line_number':128,'multiline':False]['text':' the caller specifically asks for them. A caller can also filter out','line_number':129,'multiline':False]['text':' non-symbols by asking for JSITER_SYMBOLSONLY. PrivateName symbols are','line_number':130,'multiline':False]['text':' skipped unless JSITER_PRIVATE is passed.','line_number':131,'multiline':False]['text':' The enumerate hook does not indicate whether the properties','line_number':165,'multiline':False]['text':' it returns are enumerable or not. Since we already passed','line_number':166,'multiline':False]['text':' `enumerableOnly` to the hook to filter out non-enumerable','line_number':167,'multiline':False]['text':' properties, it doesn't really matter what we pass here.','line_number':168,'multiline':False]['text':' Collect any dense elements from this object.','line_number':195,'multiline':False]['text':' Dense arrays never get so large that i would not fit into an','line_number':204,'multiline':False]['text':' integer id.','line_number':205,'multiline':False]['text':' enumerable = ','line_number':207,'multiline':True]['text':' Collect any typed array or shared typed array elements from this','line_number':214,'multiline':False]['text':' object.','line_number':215,'multiline':False]['text':' Fail early if the typed array is enormous, because this will be very','line_number':219,'multiline':False]['text':' slow and will likely report OOM. This also means we don't need to','line_number':220,'multiline':False]['text':' handle indices greater than JSID_INT_MAX in the loop below.','line_number':221,'multiline':False]['text':' enumerable = ','line_number':230,'multiline':True]['text':' Collect any sparse elements from this object.','line_number':237,'multiline':False]['text':' If the dense elements didn't have holes, we don't need to include','line_number':240,'multiline':False]['text':' them in the sort.','line_number':241,'multiline':False]['text':' Collect all unique property names from this object's shape. ','line_number':275,'multiline':True]['text':' Do a second pass to collect symbols. ES6 draft rev 25 (2014 May 22)','line_number':301,'multiline':False]['text':' 9.1.12 requires that all symbols appear after all strings in the','line_number':302,'multiline':False]['text':' result.','line_number':303,'multiline':False]['text':' This gets all property keys, both strings and symbols. The call to','line_number':341,'multiline':False]['text':' Enumerate in the loop below will filter out unwanted keys, per the','line_number':342,'multiline':False]['text':' flags.','line_number':343,'multiline':False]['text':' We need to filter, if the caller just wants enumerable symbols.','line_number':352,'multiline':False]['text':' Returns enumerable property names (no symbols).','line_number':369,'multiline':False]['text':' Pick an arbitrary order on jsids that is as stable as possible','line_number':395,'multiline':False]['text':' across executions.','line_number':396,'multiline':False]['text':' Fall through to string comparison on the descriptions. The sort','line_number':433,'multiline':False]['text':' order is nondeterministic if two different unique symbols have','line_number':434,'multiline':False]['text':' the same description.','line_number':435,'multiline':False]['text':' DEBUG ','line_number':457,'multiline':True]['text':' Don't check for duplicates if we're only interested in own properties.','line_number':464,'multiline':False]['text':' This does the right thing for most objects: native objects don't have','line_number':465,'multiline':False]['text':' duplicate property ids and we allow the [[OwnPropertyKeys]] proxy trap to','line_number':466,'multiline':False]['text':' return duplicates.','line_number':467,'multiline':False]['text':'','line_number':468,'multiline':False]['text':' The only special case is when the object has a newEnumerate hook: it','line_number':469,'multiline':False]['text':' can return duplicate properties and we have to filter them. This is','line_number':470,'multiline':False]['text':' handled below.','line_number':471,'multiline':False]['text':' Give the object a chance to resolve all lazy properties','line_number':488,'multiline':False]['text':' The [[Prototype]] chain might be cyclic.','line_number':521,'multiline':False]['text':'
     * In some cases the enumeration order for an object depends on the
     * execution mode (interpreter vs. JIT), especially for native objects
     * with a class enumerate hook (where resolving a property changes the
     * resulting enumeration order). These aren't really bugs, but the
     * differences can change the generated output and confuse correctness
     * fuzzers, so we sort the ids if such a fuzzer is running.
     *
     * We don't do this in the general case because (a) doing so is slow,
     * and (b) it also breaks the web, which expects enumeration order to
     * follow the order in which properties are added, in certain cases.
     * Since ECMA does not specify an enumeration order for objects, both
     * behaviors are technically correct to do.
     ','line_number':529,'multiline':True]['text':' Register non-escaping native enumerators (for-in) with the current','line_number':572,'multiline':False]['text':' context.','line_number':573,'multiline':False]['text':' CodeGenerator::visitIteratorStartO assumes the iterator object is not','line_number':597,'multiline':False]['text':' inside the nursery when deciding whether a barrier is necessary.','line_number':598,'multiline':False]['text':' This also registers |ni| with |propIter|.','line_number':635,'multiline':False]['text':'*
 * Initialize a sentinel NativeIterator whose purpose is only to act as the
 * start/end of the circular linked list of NativeIterators in
 * ObjectRealm::enumerators.
 ','line_number':650,'multiline':True]['text':' Do our best to enforce that nothing in |this| except the two fields set','line_number':656,'multiline':False]['text':' below is ever observed.','line_number':657,'multiline':False]['text':' These are the only two fields in sentinel NativeIterators that are','line_number':661,'multiline':False]['text':' examined, in ObjectRealm::traceWeakNativeIterators. Everything else is','line_number':662,'multiline':False]['text':' only examined *if* it's a NativeIterator being traced by a','line_number':663,'multiline':False]['text':' PropertyIteratorObject that owns it, and nothing owns this iterator.','line_number':664,'multiline':False]['text':'*
 * Initialize a fresh NativeIterator.
 *
 * This definition is a bit tricky: some parts of initializing are fallible, so
 * as we initialize, we must carefully keep this in GC-safe state (see
 * NativeIterator::trace).
 ','line_number':682,'multiline':True]['text':' NativeIterator initially acts (before full initialization) as if it','line_number':696,'multiline':False]['text':' contains no shapes...','line_number':697,'multiline':False]['text':' ...and no properties.','line_number':699,'multiline':False]['text':' note: no Flags::Initialized','line_number':705,'multiline':False]['text':' If there are shapes, the object and all objects on its prototype chain must','line_number':707,'multiline':False]['text':' be native objects. See CanCompareIterableObjectToCache.','line_number':708,'multiline':False]['text':' NOTE: This must be done first thing: The caller can't free `this` on error','line_number':714,'multiline':False]['text':'       because it has GCPtr fields whose barriers have already fired; the','line_number':715,'multiline':False]['text':'       store buffer has pointers to them. Only the GC can free `this` (via','line_number':716,'multiline':False]['text':'       PropertyIteratorObject::finalize).','line_number':717,'multiline':False]['text':' The GC asserts on finalization that `this->allocationSize()` matches the','line_number':720,'multiline':False]['text':' `nbytes` passed to `AddCellMemory`. So once these lines run, we must make','line_number':721,'multiline':False]['text':' `this->allocationSize()` correct. That means infallibly initializing the','line_number':722,'multiline':False]['text':' shapes. It's OK for the constructor to fail after that.','line_number':723,'multiline':False]['text':' Construct shapes into the shapes array.  Also recompute the shapesHash,','line_number':728,'multiline':False]['text':' which incorporates Shape* addresses that could have changed during a GC','line_number':729,'multiline':False]['text':' triggered in (among other places) |IdToString| above.','line_number':730,'multiline':False]['text':' The one caller of this method that passes |numShapes > 0|, does','line_number':747,'multiline':False]['text':' so only if the entire chain consists of cacheable objects (that','line_number':748,'multiline':False]['text':' necessarily have static prototypes).','line_number':749,'multiline':False]['text':' static ','line_number':778,'multiline':True]['text':' Typed arrays have indexed properties not captured by the Shape guard.','line_number':847,'multiline':False]['text':' Enumerate hooks may add extra properties.','line_number':848,'multiline':False]['text':' If we weren't able to use an existing cached iterator, just','line_number':880,'multiline':False]['text':' replace it.','line_number':881,'multiline':False]['text':' If the object has dense elements, mark the dense elements as','line_number':943,'multiline':False]['text':' maybe-in-iteration.','line_number':944,'multiline':False]['text':'','line_number':945,'multiline':False]['text':' The iterator is a snapshot so if indexed properties are added after this','line_number':946,'multiline':False]['text':' point we don't need to do anything. However, the object might have sparse','line_number':947,'multiline':False]['text':' elements now that can be densified later. To account for this, we set the','line_number':948,'multiline':False]['text':' maybe-in-iteration flag also in NativeObject::maybeDensifySparseElements.','line_number':949,'multiline':False]['text':'','line_number':950,'multiline':False]['text':' In debug builds, AssertDenseElementsNotIterated is used to check the flag','line_number':951,'multiline':False]['text':' is set correctly.','line_number':952,'multiline':False]['text':' Cache the iterator object.','line_number':974,'multiline':False]['text':' ES 2017 draft 7.4.7.','line_number':990,'multiline':False]['text':' Step 1 (implicit).','line_number':993,'multiline':False]['text':' Step 2.','line_number':995,'multiline':False]['text':' Step 3.','line_number':1006,'multiline':False]['text':' Step 4.','line_number':1009,'multiline':False]['text':' Step 5.','line_number':1013,'multiline':False]['text':' Create template plain object','line_number':1046,'multiline':False]['text':' Set dummy `value` property','line_number':1055,'multiline':False]['text':' Set dummy `done` property','line_number':1061,'multiline':False]['text':' Make sure that the properties are in the right slots.','line_number':1068,'multiline':False]['text':'** Iterator objects ******************************************************','line_number':1080,'multiline':True]['text':' addProperty','line_number':1102,'multiline':False]['text':' delProperty','line_number':1103,'multiline':False]['text':' enumerate','line_number':1104,'multiline':False]['text':' newEnumerate','line_number':1105,'multiline':False]['text':' resolve','line_number':1106,'multiline':False]['text':' mayResolve','line_number':1107,'multiline':False]['text':' finalize','line_number':1108,'multiline':False]['text':' call','line_number':1109,'multiline':False]['text':' hasInstance','line_number':1110,'multiline':False]['text':' construct','line_number':1111,'multiline':False]['text':' trace','line_number':1112,'multiline':False]['text':' The regular expression used for iteration. May hold the original RegExp','line_number':1192,'multiline':False]['text':' object when it is reused instead of a new RegExp object.','line_number':1193,'multiline':False]['text':' The String value being iterated upon.','line_number':1196,'multiline':False]['text':' The source string of the original RegExp object. Used to validate we can','line_number':1199,'multiline':False]['text':' reuse the original RegExp object for matching.','line_number':1200,'multiline':False]['text':' The flags of the original RegExp object.','line_number':1203,'multiline':False]['text':' When non-negative, this slot holds the current lastIndex position when','line_number':1206,'multiline':False]['text':' reusing the original RegExp object for matching. When set to |-1|, the','line_number':1207,'multiline':False]['text':' iterator has finished. When set to any other negative value, the','line_number':1208,'multiline':False]['text':' iterator is not yet exhausted and we're not on the fast path and we're','line_number':1209,'multiline':False]['text':' not reusing the input RegExp object.','line_number':1210,'multiline':False]['text':' Common case. ','line_number':1269,'multiline':True]['text':'
     * Enumerating over null and undefined gives an empty enumerator, so
     * that |for (var p in <null or undefined>) <loop>;| never executes
     * <loop>, per ES5 12.6.4.
     ','line_number':1272,'multiline':True]['text':' Empty','line_number':1277,'multiline':False]['text':' Remove enumerators from the active list, which is a stack. ','line_number':1291,'multiline':True]['text':' Reset the enumerator; it may still be in the cached iterators for','line_number':1299,'multiline':False]['text':' this thread and can be reused.','line_number':1300,'multiline':False]['text':' Implements IteratorClose (ES 7.4.6) for exception unwinding. See','line_number':1311,'multiline':False]['text':' also the bytecode generated by BytecodeEmitter::emitIteratorClose.','line_number':1312,'multiline':False]['text':' Step 3.','line_number':1314,'multiline':False]['text':'','line_number':1315,'multiline':False]['text':' Get the "return" method.','line_number':1316,'multiline':False]['text':' Step 4.','line_number':1322,'multiline':False]['text':'','line_number':1323,'multiline':False]['text':' Do nothing if "return" is null or undefined. Throw a TypeError if the','line_number':1324,'multiline':False]['text':' method is not IsCallable.','line_number':1325,'multiline':False]['text':' Step 5, 6, 8.','line_number':1333,'multiline':False]['text':'','line_number':1334,'multiline':False]['text':' Call "return" if it is not null or undefined.','line_number':1335,'multiline':False]['text':' Closing an iterator is implemented as an exception, but in spec','line_number':1339,'multiline':False]['text':' terms it is a Completion value with [[Type]] return. In this case','line_number':1340,'multiline':False]['text':' we *do* care if the call threw and if it returned an object.','line_number':1341,'multiline':False]['text':' We don't care if the call threw or that it returned an Object, as','line_number':1349,'multiline':False]['text':' Step 6 says if IteratorClose is being called during a throw, the','line_number':1350,'multiline':False]['text':' original throw has primacy.','line_number':1351,'multiline':False]['text':' Optimization for the following common case:','line_number':1372,'multiline':False]['text':'','line_number':1373,'multiline':False]['text':'    for (var p in o) {','line_number':1374,'multiline':False]['text':'        delete o[p];','line_number':1375,'multiline':False]['text':'    }','line_number':1376,'multiline':False]['text':'','line_number':1377,'multiline':False]['text':' Note that usually both strings will be atoms so we only check for pointer','line_number':1378,'multiline':False]['text':' equality here.','line_number':1379,'multiline':False]['text':' Check whether id is still to come.','line_number':1387,'multiline':False]['text':' Common case: both strings are atoms.','line_number':1391,'multiline':False]['text':' Check whether another property along the prototype chain became','line_number':1402,'multiline':False]['text':' visible as a result of this deletion.','line_number':1403,'multiline':False]['text':' If GetPropertyDescriptor above removed a property from ni, start','line_number':1426,'multiline':False]['text':' over.','line_number':1427,'multiline':False]['text':' No property along the prototype chain stepped in to take the','line_number':1433,'multiline':False]['text':' property's place, so go ahead and delete id from the list.','line_number':1434,'multiline':False]['text':' If it is the next property to be enumerated, just skip it.','line_number':1435,'multiline':False]['text':'
 * Suppress enumeration of deleted properties. This function must be called
 * when a property is deleted and there might be active enumerators.
 *
 * We maintain a list of active non-escaping for-in enumerators. To suppress
 * a property, we check whether each active enumerator contains the (obj, id)
 * pair and has not yet enumerated |id|. If so, and |id| is the next property,
 * we simply advance the cursor. Otherwise, we delete |id| from the list.
 *
 * We do not suppress enumeration of a property deleted along an object's
 * prototype chain. Only direct deletions on the object are handled.
 ','line_number':1456,'multiline':True]['text':' Search for active iterators for |obj| and assert they don't contain any','line_number':1519,'multiline':False]['text':' property keys that are dense elements. This is used to check correctness','line_number':1520,'multiline':False]['text':' of the MAYBE_IN_ITERATION flag on ObjectElements.','line_number':1521,'multiline':False]['text':'','line_number':1522,'multiline':False]['text':' Ignore iterators that may contain indexed properties from objects on the','line_number':1523,'multiline':False]['text':' prototype chain, as that can result in false positives. See bug 1656744.','line_number':1524,'multiline':False]['text':' Limit the number of properties we check to avoid slowing down debug builds','line_number':1526,'multiline':False]['text':' too much.','line_number':1527,'multiline':False]['text':' These methods are only attached to Iterator.prototype when the','line_number':1559,'multiline':False]['text':' Iterator Helpers feature is enabled.','line_number':1560,'multiline':False]['text':' static ','line_number':1577,'multiline':True]['text':' %IteratorPrototype%.map.[[Prototype]] is %Generator% and','line_number':1590,'multiline':False]['text':' %Generator%.prototype.[[Prototype]] is %IteratorPrototype%.','line_number':1591,'multiline':False]['text':' Populate the slot early, to prevent runaway mutual recursion.','line_number':1592,'multiline':False]['text':' In this case, we leave a partially initialized object in the','line_number':1596,'multiline':False]['text':' slot. There's no obvious way to do better, since this object may already','line_number':1597,'multiline':False]['text':' be in the prototype chain of %GeneratorPrototype%.','line_number':1598,'multiline':False]['text':' static ','line_number':1605,'multiline':True]['text':' static ','line_number':1632,'multiline':True]['text':' static ','line_number':1642,'multiline':True]['text':' static ','line_number':1652,'multiline':True]['text':' Iterator Helper Proposal 2.1.3.1 Iterator()','line_number':1663,'multiline':False]['text':' https://tc39.es/proposal-iterator-helpers/#sec-iterator as of revision','line_number':1664,'multiline':False]['text':' ed6e15a','line_number':1665,'multiline':False]['text':' Step 1.','line_number':1669,'multiline':False]['text':' Throw TypeError if NewTarget is the active function object, preventing the','line_number':1673,'multiline':False]['text':' Iterator constructor from being used directly.','line_number':1674,'multiline':False]['text':' Step 2.','line_number':1681,'multiline':False]['text':' Set up WrapForValidIteratorObject class and its prototype.','line_number':1720,'multiline':False]['text':' static ','line_number':1736,'multiline':True]['text':' Common iterator object returned by Iterator Helper methods.','line_number':1755,'multiline':False]['text':' static ','line_number':1768,'multiline':True]