['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' namespace jit','line_number':34,'multiline':False]['text':' Iterates over a linear group of wasm frames of a single wasm JitActivation,','line_number':52,'multiline':False]['text':' called synchronously from C++ in the wasm thread. It will stop at the first','line_number':53,'multiline':False]['text':' frame that is not of the same kind, or at the end of an activation.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' If you want to handle every kind of frames (including JS jit frames), use','line_number':56,'multiline':False]['text':' JitFrameIter.','line_number':57,'multiline':False]['text':' See comment above this class definition.','line_number':80,'multiline':False]['text':' Returns the address of the next instruction that will execute in this','line_number':103,'multiline':False]['text':' frame, once control returns to this frame.','line_number':104,'multiline':False]['text':' An ExitReason describes the possible reasons for leaving compiled wasm','line_number':110,'multiline':False]['text':' code or the state of not having left compiled wasm code','line_number':111,'multiline':False]['text':' (ExitReason::None). It is either a known reason, or a enumeration to a native','line_number':112,'multiline':False]['text':' function that is used for better display in the profiler.','line_number':113,'multiline':False]['text':' default state, the pc is in wasm code','line_number':117,'multiline':False]['text':' slow-path entry call from C++ WasmCall()','line_number':118,'multiline':False]['text':' fast-path call directly into JIT code','line_number':119,'multiline':False]['text':' slow-path call into C++ Invoke()','line_number':120,'multiline':False]['text':' fast-path call directly into native C++ code','line_number':121,'multiline':False]['text':' call to trap handler','line_number':122,'multiline':False]['text':' call to debug trap handler','line_number':123,'multiline':False]['text':' Iterates over the frames of a single wasm JitActivation, given an','line_number':172,'multiline':False]['text':' asynchronously-profiled thread's state.','line_number':173,'multiline':False]['text':' Start unwinding at a non-innermost activation that has necessarily been','line_number':188,'multiline':False]['text':' exited from wasm code (and thus activation.hasWasmExitFP).','line_number':189,'multiline':False]['text':' Start unwinding at a group of wasm frames after unwinding an inner group','line_number':192,'multiline':False]['text':' of JSJit frames.','line_number':193,'multiline':False]['text':' Start unwinding at the innermost activation given the register state when','line_number':196,'multiline':False]['text':' the thread was suspended.','line_number':197,'multiline':False]['text':' Prologue/epilogue code generation','line_number':215,'multiline':False]['text':' Iterates through frames for either possible cross-instance call or an entry','line_number':240,'multiline':False]['text':' stub to obtain tls that corresponds to the passed fp.','line_number':241,'multiline':False]['text':' Describes register state and associated code at a given call frame.','line_number':245,'multiline':False]['text':' Ensures the register state at a call site is consistent: pc must be in the','line_number':255,'multiline':False]['text':' code range of the code described by fp. This prevents issues when using','line_number':256,'multiline':False]['text':' the values of pc/fp, especially at call sites boundaries, where the state','line_number':257,'multiline':False]['text':' hasn't fully transitioned from the caller's to the callee's.','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' unwoundCaller is set to true if we were in a transitional state and had to','line_number':260,'multiline':False]['text':' rewind to the caller's frame instead of the current frame.','line_number':261,'multiline':False]['text':'','line_number':262,'multiline':False]['text':' Returns true if it was possible to get to a clear state, or false if the','line_number':263,'multiline':False]['text':' frame should be ignored.','line_number':264,'multiline':False]['text':' namespace wasm','line_number':269,'multiline':False]['text':' namespace js','line_number':270,'multiline':False]['text':' wasm_frame_iter_h','line_number':272,'multiline':False]