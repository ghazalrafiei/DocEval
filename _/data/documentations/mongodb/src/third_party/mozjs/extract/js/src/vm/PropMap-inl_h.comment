['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' static','line_number':33,'multiline':False]['text':' This function is very hot, so we use a macro to manually unroll the lookups','line_number':40,'multiline':False]['text':' below. Some compilers are able to unroll the equivalent loops, but they're','line_number':41,'multiline':False]['text':' not very consistent about this. The code below results in reasonable code','line_number':42,'multiline':False]['text':' with all compilers we tested.','line_number':43,'multiline':False]['text':' For the last map, only properties in [0, mapLength) are part of the object.','line_number':106,'multiline':False]['text':' static','line_number':115,'multiline':False]['text':' static','line_number':129,'multiline':False]['text':' OOM. Do a linear lookup.','line_number':138,'multiline':False]['text':' static','line_number':145,'multiline':False]['text':' Update the map/mapLength pointers to "remove" the last property. In most','line_number':148,'multiline':False]['text':' cases we can simply decrement *mapLength, but if *mapLength is 1 we have to','line_number':149,'multiline':False]['text':' either start at the previous map or set map/mapLength to nullptr/zero','line_number':150,'multiline':False]['text':' (if there is just one property).','line_number':151,'multiline':False]['text':' static','line_number':171,'multiline':False]['text':' More heuristics: if one of the last two maps has had a dictionary','line_number':202,'multiline':False]['text':' conversion before, or is branchy (indicated by parent != previous), convert','line_number':203,'multiline':False]['text':' to dictionary.','line_number':204,'multiline':False]['text':' We detach the child from the parent if the parent is reachable.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' This test depends on PropMap arenas not being freed until after we finish','line_number':221,'multiline':False]['text':' incrementally sweeping them. If that were not the case the parent pointer','line_number':222,'multiline':False]['text':' could point to a marked cell that had been deallocated and then','line_number':223,'multiline':False]['text':' reallocated, since allocating a cell in a zone that is being marked will','line_number':224,'multiline':False]['text':' set the mark bit for that cell.','line_number':225,'multiline':False]['text':' namespace js','line_number':253,'multiline':False]['text':' vm_PropMap_inl_h ','line_number':255,'multiline':True]