['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Florian Bernd, Joel Hoener

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   General helper and platform detection macros.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':35,'multiline':True]['text':' Meta macros                                                                                    ','line_number':36,'multiline':True]['text':' ============================================================================================== ','line_number':37,'multiline':True]['text':'*
 * @brief   Concatenates two values using the stringify operator (`##`).
 *
 * @brief   x   The first value.
 * @brief   y   The second value.
 *
 * @return  The combined string of the given values.
 ','line_number':39,'multiline':True]['text':'*
 * @brief   Concatenates two values using the stringify operator (`##`) and expands the value to
 *          be used in another macro.
 *
 * @brief   x   The first value.
 * @brief   y   The second value.
 *
 * @return  The combined string of the given values.
 ','line_number':49,'multiline':True]['text':' ============================================================================================== ','line_number':60,'multiline':True]['text':' Compiler detection                                                                             ','line_number':61,'multiline':True]['text':' ============================================================================================== ','line_number':62,'multiline':True]['text':' ============================================================================================== ','line_number':80,'multiline':True]['text':' Platform detection                                                                             ','line_number':81,'multiline':True]['text':' ============================================================================================== ','line_number':82,'multiline':True]['text':' ============================================================================================== ','line_number':109,'multiline':True]['text':' Kernel mode detection                                                                          ','line_number':110,'multiline':True]['text':' ============================================================================================== ','line_number':111,'multiline':True]['text':' ============================================================================================== ','line_number':122,'multiline':True]['text':' Architecture detection                                                                         ','line_number':123,'multiline':True]['text':' ============================================================================================== ','line_number':124,'multiline':True]['text':' Nothing to do, `ZYAN_EMSCRIPTEN` is both platform and arch macro for this one.','line_number':135,'multiline':False]['text':' ============================================================================================== ','line_number':140,'multiline':True]['text':' Debug/Release detection                                                                        ','line_number':141,'multiline':True]['text':' ============================================================================================== ','line_number':142,'multiline':True]['text':' ============================================================================================== ','line_number':160,'multiline':True]['text':' Misc compatibility macros                                                                      ','line_number':161,'multiline':True]['text':' ============================================================================================== ','line_number':162,'multiline':True]['text':' ============================================================================================== ','line_number':170,'multiline':True]['text':' Debugging and optimization macros                                                              ','line_number':171,'multiline':True]['text':' ============================================================================================== ','line_number':172,'multiline':True]['text':'*
 * @brief   Runtime debug assersion.
 ','line_number':174,'multiline':True]['text':'*
 * @brief   Compiler-time assertion.
 ','line_number':187,'multiline':True]['text':'*
 * @brief	Marks the current code path as unreachable.
 ','line_number':201,'multiline':True]['text':' GCC eagerly evals && RHS, we have to use nested ifs.','line_number':205,'multiline':False]['text':' "missing return statement" workaround','line_number':215,'multiline':False]['text':' ============================================================================================== ','line_number':234,'multiline':True]['text':' Utils                                                                                          ','line_number':235,'multiline':True]['text':' ============================================================================================== ','line_number':236,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':238,'multiline':True]['text':' General purpose                                                                                ','line_number':239,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':240,'multiline':True]['text':'*
 * @brief   Marks the specified parameter as unused.
 *
 * @param   x   The name of the unused parameter.
 ','line_number':242,'multiline':True]['text':'*
 * @brief   Intentional fallthrough.
 ','line_number':249,'multiline':True]['text':'*
 * @brief   Declares a bitfield.
 *
 * @param   x   The size (in bits) of the bitfield.
 ','line_number':258,'multiline':True]['text':'*
 * @brief   Marks functions that require libc (cannot be used with `ZYAN_NO_LIBC`).
 ','line_number':265,'multiline':True]['text':'*
 * @brief   Decorator for `printf`-style functions.
 *
 * @param   format_index    The 1-based index of the format string parameter.
 * @param   first_to_check  The 1-based index of the format arguments parameter.
 ','line_number':270,'multiline':True]['text':'*
 * @brief   Decorator for `wprintf`-style functions.
 *
 * @param   format_index    The 1-based index of the format string parameter.
 * @param   first_to_check  The 1-based index of the format arguments parameter.
 ','line_number':286,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':299,'multiline':True]['text':' Arrays                                                                                         ','line_number':300,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':301,'multiline':True]['text':'*
 * @brief   Returns the length (number of elements) of an array.
 *
 * @param   a   The name of the array.
 *
 * @return  The number of elements of the given array.
 ','line_number':303,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':312,'multiline':True]['text':' Arithmetic                                                                                     ','line_number':313,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':314,'multiline':True]['text':'*
 * @brief   Returns the smaller value of `a` or `b`.
 *
 * @param   a   The first value.
 * @param   b   The second value.
 *
 * @return  The smaller value of `a` or `b`.
 ','line_number':316,'multiline':True]['text':'*
 * @brief   Returns the bigger value of `a` or `b`.
 *
 * @param   a   The first value.
 * @param   b   The second value.
 *
 * @return  The bigger value of `a` or `b`.
 ','line_number':326,'multiline':True]['text':'*
 * @brief   Returns the absolute value of `a`.
 *
 * @param   a   The value.
 *
 * @return  The absolute value of `a`.
 ','line_number':336,'multiline':True]['text':'*
 * @brief   Checks, if the given value is a power of 2.
 *
 * @param   x   The value.
 *
 * @return  `ZYAN_TRUE`, if the given value is a power of 2 or `ZYAN_FALSE`, if not.
 *
 * Note that this macro always returns `ZYAN_TRUE` for `x == 0`.
 ','line_number':345,'multiline':True]['text':'*
 * @brief   Checks, if the given value is properly aligned.
 *
 * Note that this macro only works for powers of 2.
 ','line_number':356,'multiline':True]['text':'*
 * @brief   Aligns the value to the nearest given alignment boundary (by rounding it up).
 *
 * @param   x       The value.
 * @param   align   The desired alignment.
 *
 * @return  The aligned value.
 *
 * Note that this macro only works for powers of 2.
 ','line_number':363,'multiline':True]['text':'*
 * @brief   Aligns the value to the nearest given alignment boundary (by rounding it down).
 *
 * @param   x       The value.
 * @param   align   The desired alignment.
 *
 * @return  The aligned value.
 *
 * Note that this macro only works for powers of 2.
 ','line_number':375,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':387,'multiline':True]['text':' Bit operations                                                                                 ','line_number':388,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':389,'multiline':True]['text':'
 * @brief   Checks, if the bit at index `b` is required to present the ordinal value `n`.
 *
 * @param   n   The ordinal value.
 * @param   b   The bit index.
 *
 * @return  `ZYAN_TRUE`, if the bit at index `b` is required to present the ordinal value `n` or
 *          `ZYAN_FALSE`, if not.
 *
 * Note that this macro always returns `ZYAN_FALSE` for `n == 0`.
 ','line_number':391,'multiline':True]['text':'
 * @brief   Returns the number of bits required to represent the ordinal value `n`.
 *
 * @param   n   The ordinal value.
 *
 * @return  The number of bits required to represent the ordinal value `n`.
 *
 * Note that this macro returns `0` for `n == 0`.
 ','line_number':404,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':433,'multiline':True]['text':' ============================================================================================== ','line_number':435,'multiline':True]['text':' ZYCORE_DEFINES_H ','line_number':437,'multiline':True]