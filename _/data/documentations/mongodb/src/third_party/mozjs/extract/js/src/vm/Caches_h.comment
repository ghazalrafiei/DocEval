['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' SrcNote','line_number':13,'multiline':False]['text':'
 * GetSrcNote cache to avoid O(n^2) growth in finding a source note for a
 * given pc in a script. We use the script->code pointer to tag the cache,
 * instead of the script address itself, so that source notes are always found
 * by offset from the bytecode with which they were generated.
 ','line_number':27,'multiline':True]['text':' We sweep this cache before a nursery collection to remove entries with','line_number':52,'multiline':False]['text':' string keys in the nursery.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' The entire cache is purged on a major GC, so we don't need to sweep it','line_number':55,'multiline':False]['text':' then.','line_number':56,'multiline':False]['text':'
 * Cache for speeding up repetitive creation of objects in the VM.
 * When an object is created which matches the criteria in the 'key' section
 * below, an entry is filled with the resulting object.
 ','line_number':77,'multiline':True]['text':' Class of the constructed object. ','line_number':91,'multiline':True]['text':'
     * Key with one of two possible values:
     *
     * - Global for the object. The object must have a standard class and will
     *   have this global's builtin prototype for this class as proto.
     *
     * - Prototype for the object (non-null). Cannot be a global object because
     *   that would be ambiguous (see previous case).
     ','line_number':94,'multiline':True]['text':' Allocation kind for the constructed object. ','line_number':105,'multiline':True]['text':' Number of bytes to copy from the template object. ','line_number':108,'multiline':True]['text':'
     * Template object to copy from, with the initial values of fields,
     * fixed slots (undefined) and private data (nullptr).
     ','line_number':111,'multiline':True]['text':' TODO: reconsider size;','line_number':118,'multiline':False]['text':' zeroes out the array','line_number':125,'multiline':False]['text':' zeroes out the array','line_number':129,'multiline':False]['text':' Remove any cached items keyed on moved objects. ','line_number':132,'multiline':True]['text':'
   * Get the entry index for the given lookup, return whether there was a hit
   * on an existing entry.
   ','line_number':135,'multiline':True]['text':'
   * Return a new object from a cache hit produced by a lookup method, or
   * nullptr if returning the object could possibly trigger GC (does not
   * indicate failure).
   ','line_number':144,'multiline':True]['text':' Fill an entry after a cache miss. ','line_number':153,'multiline':True]['text':' Invalidate any entries which might produce an object with shape. ','line_number':161,'multiline':True]['text':' N.B. Lookups with the same clasp/key but different kinds map to','line_number':176,'multiline':False]['text':' different entries.','line_number':177,'multiline':False]['text':' Initialize with barriers','line_number':202,'multiline':False]['text':' Cache for AtomizeString, mapping JSLinearString* to the corresponding','line_number':207,'multiline':False]['text':' JSAtom*. Also used by nursery GC to de-duplicate strings to atoms.','line_number':208,'multiline':False]['text':' Purged on minor and major GC.','line_number':209,'multiline':False]['text':' Don't use the cache for short strings. Hashing them is less expensive.','line_number':216,'multiline':False]['text':' namespace js','line_number':274,'multiline':False]['text':' vm_Caches_h ','line_number':276,'multiline':True]