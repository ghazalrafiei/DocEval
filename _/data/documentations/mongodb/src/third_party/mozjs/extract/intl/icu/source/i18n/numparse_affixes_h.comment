['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Forward-declaration of implementation classes for friending','line_number':22,'multiline':False]['text':' WARNING: Leaves the object in an unusable state','line_number':33,'multiline':False]['text':' namespace impl','line_number':47,'multiline':False]['text':' namespace numparse','line_number':48,'multiline':False]['text':' Export a explicit template instantiations of MaybeStackArray, MemoryPool and CompactUnicodeString.','line_number':50,'multiline':False]['text':' When building DLLs for Windows this is required even though no direct access leaks out of the i18n library.','line_number':51,'multiline':False]['text':' (See digitlst.h, pluralaffix.h, datefmt.h, and others for similar examples.)','line_number':52,'multiline':False]['text':' Note: These need to be outside of the numparse::impl namespace, or Clang will generate a compile error.','line_number':53,'multiline':False]['text':'*
 * Small helper class that generates matchers for individual tokens for AffixPatternMatcher.
 *
 * In Java, this is called AffixTokenMatcherFactory (a "factory"). However, in C++, it is called a
 * "warehouse", because in addition to generating the matchers, it also retains ownership of them. The
 * warehouse must stay in scope for the whole lifespan of the AffixPatternMatcher that uses matchers from
 * the warehouse.
 *
 * @author sffc
 ','line_number':73,'multiline':True]['text':' Exported as U_I18N_API for tests','line_number':83,'multiline':False]['text':' WARNING: Leaves the object in an unusable state','line_number':86,'multiline':False]['text':' NOTE: The following field may be unsafe to access after construction is done!','line_number':105,'multiline':False]['text':' NOTE: These are default-constructed and should not be used until initialized.','line_number':108,'multiline':False]['text':' Use a child class for code point matchers, since it requires non-default operators.','line_number':115,'multiline':False]['text':'* NOTE: You can build only once! ','line_number':130,'multiline':True]['text':' Exported as U_I18N_API for tests','line_number':146,'multiline':False]['text':' WARNING: Leaves the object in an unusable state','line_number':149,'multiline':False]['text':' WARNING: Leaves the object in an unusable state','line_number':172,'multiline':False]['text':'*
 * A C++-only class to retain ownership of the AffixMatchers needed for parsing.
 ','line_number':193,'multiline':True]['text':' WARNING: Leaves the object in an unusable state','line_number':198,'multiline':False]['text':' 9 is the limit: positive, zero, and negative, each with prefix, suffix, and prefix+suffix','line_number':207,'multiline':False]['text':' 6 is the limit: positive, zero, and negative, a prefix and a suffix for each','line_number':209,'multiline':False]['text':' Reference to the warehouse for tokens used by the AffixPatternMatchers','line_number':211,'multiline':False]['text':' namespace impl','line_number':221,'multiline':False]['text':' namespace numparse','line_number':222,'multiline':False]['text':'__NUMPARSE_AFFIXES_H__','line_number':225,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':226,'multiline':True]