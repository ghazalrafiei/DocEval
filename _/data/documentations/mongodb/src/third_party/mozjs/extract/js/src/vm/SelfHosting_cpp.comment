['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' mozilla::Utf8Unit','line_number':12,'multiline':False]['text':' CompileGlobalScriptToStencil','line_number':45,'multiline':False]['text':' js::frontend::CompilationStencil','line_number':46,'multiline':False]['text':' JS::PrintError','line_number':55,'multiline':False]['text':' JS_GetArrayBufferViewType','line_number':57,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':58,'multiline':False]['text':' JS::GetModulePrivate','line_number':59,'multiline':False]['text':' js::Scalar::Type','line_number':61,'multiline':False]['text':' JS::SourceText','line_number':62,'multiline':False]['text':' JS::{,Set}WarningReporter','line_number':65,'multiline':False]['text':' js::MaybePrintAndClearPendingException','line_number':76,'multiline':False]['text':' js::ScriptFrameIter','line_number':77,'multiline':False]['text':' js::FunctionFlags','line_number':78,'multiline':False]['text':' js::PlainObject','line_number':86,'multiline':False]['text':' js::ValueToSource','line_number':91,'multiline':False]['text':' Inline fast path for the common case.','line_number':177,'multiline':False]['text':'*
 * Handles an assertion failure in self-hosted code just like an assertion
 * failure in C++ code. Information about the failure can be provided in
 * args[0].
 ','line_number':448,'multiline':True]['text':' try to dump the informative string','line_number':457,'multiline':False]['text':'*
 * Dumps a message to stderr, after stringifying it. Doesn't append a newline.
 ','line_number':471,'multiline':True]['text':' try to dump the informative string','line_number':478,'multiline':False]['text':'
 * Used to decompile values in the nearest non-builtin stack frame, falling
 * back to decompiling in the current frame. Helpful for printing higher-order
 * function arguments.
 *
 * The user must supply the argument number of the value in question; it
 * _cannot_ be automatically determined.
 ','line_number':508,'multiline':True]['text':' When DefineDataProperty is called with 3 arguments, it's compiled to','line_number':534,'multiline':False]['text':' JSOp::InitElem in the bytecode emitter so we shouldn't get here.','line_number':535,'multiline':False]['text':' _DefineProperty(object, propertyKey, attributes,','line_number':584,'multiline':False]['text':'                 valueOrGetter, setter, strict)','line_number':585,'multiline':False]['text':' When args[4] is |null|, the data descriptor has a value component.','line_number':614,'multiline':False]['text':' We need to tell our caller Object.defineProperty,','line_number':648,'multiline':False]['text':' that this operation failed, without actually throwing','line_number':649,'multiline':False]['text':' for web-compatibility reasons.','line_number':650,'multiline':False]['text':' Self-hosted code calls this intrinsic with builtin prototypes. These are','line_number':668,'multiline':False]['text':' always native objects.','line_number':669,'multiline':False]['text':' Arguments must both be SharedArrayBuffer or wrapped SharedArrayBuffer.','line_number':1059,'multiline':False]['text':' Return the value of [[ArrayLength]] internal slot of the TypedArray','line_number':1167,'multiline':False]['text':' Extract the TypedArrayObject* underlying |obj| and return it.  This method,','line_number':1214,'multiline':False]['text':' in a TOTALLY UNSAFE manner, completely violates the normal compartment','line_number':1215,'multiline':False]['text':' boundaries, returning an object not necessarily in the current compartment','line_number':1216,'multiline':False]['text':' or in |obj|'s compartment.','line_number':1217,'multiline':False]['text':'','line_number':1218,'multiline':False]['text':' All callers of this method are expected to sigil this TypedArrayObject*, and','line_number':1219,'multiline':False]['text':' all values and information derived from it, with an "unsafe" prefix, to','line_number':1220,'multiline':False]['text':' indicate the extreme caution required when dealing with such values.','line_number':1221,'multiline':False]['text':'','line_number':1222,'multiline':False]['text':' If calling code discipline ever fails to be maintained, it's gonna have a','line_number':1223,'multiline':False]['text':' bad time.','line_number':1224,'multiline':False]['text':' An unwrapped pointer to an object potentially on the other side of a','line_number':1227,'multiline':False]['text':' compartment boundary!  Isn't this such fun?','line_number':1228,'multiline':False]['text':' Be super-duper careful using this, as we've just punched through','line_number':1235,'multiline':False]['text':' the compartment boundary, and things like buffer() on this aren't','line_number':1236,'multiline':False]['text':' same-compartment with anything else in the calling method.','line_number':1237,'multiline':False]['text':' The specification requires us to perform bitwise copying when |sourceType|','line_number':1241,'multiline':False]['text':' and |targetType| are the same (ES2017, ยง22.2.3.24, step 15). Additionally,','line_number':1242,'multiline':False]['text':' as an optimization, we can also perform bitwise copying when |sourceType|','line_number':1243,'multiline':False]['text':' and |targetType| have compatible bit-level representations.','line_number':1244,'multiline':False]['text':' As directed by |DangerouslyUnwrapTypedArray|, sigil this pointer and all','line_number':1292,'multiline':False]['text':' variables derived from it to counsel extreme caution here.','line_number':1293,'multiline':False]['text':' The same-type case requires exact copying preserving the bit-level','line_number':1328,'multiline':False]['text':' encoding of the source data, so use memcpy if possible. If source and','line_number':1329,'multiline':False]['text':' target are the same buffer, we can't use memcpy (or memmove), because','line_number':1330,'multiline':False]['text':' the specification requires sequential copying of the values. This case','line_number':1331,'multiline':False]['text':' is only possible if a @@species constructor created a specifically','line_number':1332,'multiline':False]['text':' crafted typed array. It won't happen in normal code and hence doesn't','line_number':1333,'multiline':False]['text':' need to be optimized.','line_number':1334,'multiline':False]['text':' args[2] should be already in UInt32 range, but it could be double typed,','line_number':1497,'multiline':False]['text':' because of Ion optimization.','line_number':1498,'multiline':False]['text':' This function is called when a self-hosted method is invoked on a','line_number':1513,'multiline':False]['text':' wrapper object, like a CrossCompartmentWrapper. The last argument is','line_number':1514,'multiline':False]['text':' the name of the self-hosted function. The other arguments are the','line_number':1515,'multiline':False]['text':' arguments to pass to this function.','line_number':1516,'multiline':False]['text':' The contract for this function is the same as','line_number':1577,'multiline':False]['text':' CallSelfHostedNonGenericMethod. The normal ReportIncompatible function','line_number':1578,'multiline':False]['text':' doesn't work for selfhosted functions, because they always call the','line_number':1579,'multiline':False]['text':' different CallXXXMethodIfWrapped methods, which would be reported as the','line_number':1580,'multiline':False]['text':' called function instead.','line_number':1581,'multiline':False]['text':' Lookup the selfhosted method that was invoked.  But skip over','line_number':1583,'multiline':False]['text':' internal self-hosted function frames, because those are never the','line_number':1584,'multiline':False]['text':' actual self-hosted callee from external code.  We can't just skip','line_number':1585,'multiline':False]['text':' self-hosted things until we find a non-self-hosted one because of cases','line_number':1586,'multiline':False]['text':' like array.sort(somethingSelfHosted), where we want to report the error','line_number':1587,'multiline':False]['text':' in the somethingSelfHosted, not in the sort() call.','line_number':1588,'multiline':False]['text':'*
 * Returns the default locale as a well-formed, but not necessarily
 * canonicalized, BCP-47 language tag.
 ','line_number':1628,'multiline':True]['text':' |undefined| is the default value when the Intl runtime caches haven't','line_number':1659,'multiline':False]['text':' yet been initialized. Handle it the same way as a cache miss.','line_number':1660,'multiline':False]['text':' JS_HAS_INTL_API','line_number':1682,'multiline':False]['text':' While it may seem like an invariant that in any compartment,','line_number':1750,'multiline':False]['text':' seeing a typed array object implies that the TypedArray constructor','line_number':1751,'multiline':False]['text':' for that type is initialized on the compartment's global, this is not','line_number':1752,'multiline':False]['text':' the case. When we construct a typed array given a cross-compartment','line_number':1753,'multiline':False]['text':' ArrayBuffer, we put the constructed TypedArray in the same compartment','line_number':1754,'multiline':False]['text':' as the ArrayBuffer. Since we use the prototype from the initial','line_number':1755,'multiline':False]['text':' compartment, and never call the constructor in the ArrayBuffer's','line_number':1756,'multiline':False]['text':' compartment from script, we are not guaranteed to have initialized','line_number':1757,'multiline':False]['text':' the constructor.','line_number':1758,'multiline':False]['text':' The property already exists in the evironment but is not writable, so set','line_number':1816,'multiline':False]['text':' the slot directly.','line_number':1817,'multiline':False]['text':' The property already exists in the evironment but is not writable, so set','line_number':1833,'multiline':False]['text':' the slot directly.','line_number':1834,'multiline':False]['text':' Intrinsic helper functions','line_number':2113,'multiline':False]['text':' Intrinsics and standard functions used by Intl API implementation.','line_number':2389,'multiline':False]['text':' JS_HAS_INTL_API','line_number':2476,'multiline':False]['text':' Standard builtins used by self-hosting.','line_number':2478,'multiline':False]['text':'
   * In self-hosting mode, scripts use JSOp::GetIntrinsic instead of
   * JSOp::GetName or JSOp::GetGName to access unbound variables.
   * JSOp::GetIntrinsic does a name lookup on a special object, whose
   * properties are filled in lazily upon first access for a given global.
   *
   * As that object is inaccessible to client code, the lookups are
   * guaranteed to return the original objects, ensuring safe implementation
   * of self-hosted builtins.
   *
   * Additionally, the special syntax callFunction(fun, receiver, ...args)
   * is supported, for which bytecode is emitted that invokes |fun| with
   * |receiver| as the this-object and ...args as the arguments.
   ','line_number':2517,'multiline':True]['text':' Debugging the selfHosted zone is not supported because CCWs are not','line_number':2548,'multiline':False]['text':' allowed in that zone.','line_number':2549,'multiline':False]['text':' addProperty','line_number':2558,'multiline':False]['text':' delProperty','line_number':2559,'multiline':False]['text':' enumerate','line_number':2560,'multiline':False]['text':' newEnumerate','line_number':2561,'multiline':False]['text':' resolve','line_number':2562,'multiline':False]['text':' mayResolve','line_number':2563,'multiline':False]['text':' finalize','line_number':2564,'multiline':False]['text':' call','line_number':2565,'multiline':False]['text':' hasInstance','line_number':2566,'multiline':False]['text':' construct','line_number':2567,'multiline':False]['text':' trace','line_number':2568,'multiline':False]['text':' Exceptions in self-hosted code will usually be printed to stderr in','line_number':2604,'multiline':False]['text':' ErrorToException, but not all exceptions are handled there. For','line_number':2605,'multiline':False]['text':' instance, ReportOutOfMemory will throw the "out of memory" string','line_number':2606,'multiline':False]['text':' without going through ErrorToException. We handle these other','line_number':2607,'multiline':False]['text':' exceptions here.','line_number':2608,'multiline':False]['text':' The `intrinsic_functions` list must be sorted so that we can use','line_number':2615,'multiline':False]['text':' mozilla::BinarySearch to do lookups on demand.','line_number':2616,'multiline':False]['text':' cellIter disallows GCs, but error reporting wants to','line_number':2644,'multiline':False]['text':' have them, so we need to move it out of the loop.','line_number':2645,'multiline':False]['text':' DEBUG','line_number':2656,'multiline':False]['text':' Instantiate the stencil and run the script.','line_number':2664,'multiline':False]['text':' NOTE: Use a block here so the GC roots are dropped before freezing the Zone','line_number':2665,'multiline':False]['text':'       below.','line_number':2666,'multiline':False]['text':' Run the script','line_number':2674,'multiline':False]['text':' Garbage collect the self hosting zone once when it is created. It should','line_number':2686,'multiline':False]['text':' not be modified after this point.','line_number':2687,'multiline':False]['text':'
   * Set a temporary error reporter printing to stderr because it is too
   * early in the startup process for any other reporter to be registered
   * and we don't want errors in self-hosted code to be silently swallowed.
   *
   * This class also overrides the warning reporter to print warnings to
   * stderr. See selfHosting_WarningReporter.
   ','line_number':2709,'multiline':True]['text':' Variables used to instantiate scripts.','line_number':2719,'multiline':False]['text':' Try initializing from Stencil XDR.','line_number':2723,'multiline':False]['text':' Allow the VM to directly use bytecode from the XDR buffer without','line_number':2727,'multiline':False]['text':' copying it. The buffer must outlive all runtimes (including workers).','line_number':2728,'multiline':False]['text':' If script wasn't generated, it means XDR was either not provided or that it','line_number':2747,'multiline':False]['text':' failed the decoding phase. Parse from text as before.','line_number':2748,'multiline':False]['text':' Serialize the stencil to XDR.','line_number':2774,'multiline':False]['text':' Since all atoms used by self-hosting are marked as permanent, the only','line_number':2817,'multiline':False]['text':' reason we'd see a non-permanent atom here is code looking for','line_number':2818,'multiline':False]['text':' properties on the self hosted global which aren't present.','line_number':2819,'multiline':False]['text':' Since we ensure that that can't happen during startup, encountering','line_number':2820,'multiline':False]['text':' non-permanent atoms here should be impossible.','line_number':2821,'multiline':False]['text':' Now our properties are in last-to-first order, so....','line_number':2854,'multiline':False]['text':' Returns the ScriptSourceObject to use for cloned self-hosted scripts in the','line_number':2921,'multiline':False]['text':' current realm.','line_number':2922,'multiline':False]['text':' Object hash identities are owned by the hashed object, which may be on a','line_number':2957,'multiline':False]['text':' different thread than the clone target. In theory, these objects are all','line_number':2958,'multiline':False]['text':' tenured and will not be compacted; however, we simply avoid the issue','line_number':2959,'multiline':False]['text':' altogether by skipping the cycle-detection when off thread.','line_number':2960,'multiline':False]['text':' Arrow functions use the first extended slot for their lexical |this|','line_number':2977,'multiline':False]['text':' value. And methods use the first extended slot for their home-object.','line_number':2978,'multiline':False]['text':' We only expect to see normal functions here.','line_number':2979,'multiline':False]['text':' Save the original function name that we are cloning from. This allows','line_number':3001,'multiline':False]['text':' the function to potentially be relazified in the future.','line_number':3002,'multiline':False]['text':' If |_SetCanonicalName| was called on the function, the function name to','line_number':3006,'multiline':False]['text':' use is stored in the extended slot.','line_number':3007,'multiline':False]['text':' Nothing to do here: these are represented inline in the value.','line_number':3069,'multiline':False]['text':' Well-known symbols are shared.','line_number':3082,'multiline':False]['text':' If there is a a canonical name set, use that instead.','line_number':3104,'multiline':False]['text':' Assert that there are no intervening scopes between the global scope','line_number':3148,'multiline':False]['text':' and the self-hosted script. Toplevel lexicals are explicitly forbidden','line_number':3149,'multiline':False]['text':' by the parser when parsing self-hosted code. The fact they have the','line_number':3150,'multiline':False]['text':' global lexical scope on the scope chain is for uniformity and engine','line_number':3151,'multiline':False]['text':' invariants.','line_number':3152,'multiline':False]['text':' Relazifiable self-hosted function may be relazified later into a','line_number':3164,'multiline':False]['text':' SelfHostedLazyScript. It is important to note that this only applies to','line_number':3165,'multiline':False]['text':' named self-hosted entry points (that use this clone method). Inner','line_number':3166,'multiline':False]['text':' functions clones used by self-hosted are never relazified, even if they','line_number':3167,'multiline':False]['text':' would be able to in normal script.','line_number':3168,'multiline':False]['text':' The target function might have been relazified after its flags changed.','line_number':3177,'multiline':False]['text':'
   * We don't clone if we're operating in the self-hosting global, as that
   * means we're currently executing the self-hosting script while
   * initializing the runtime (see JSRuntime::initSelfHosting).
   ','line_number':3198,'multiline':True]