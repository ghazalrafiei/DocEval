['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GCPtrObject','line_number':10,'multiline':False]['text':' js::gc::TenuredCellWithGCPointer','line_number':11,'multiline':False]['text':' JS::HandleObject','line_number':13,'multiline':False]['text':' JS::ubi::TracerConcrete','line_number':14,'multiline':False]['text':' [SMDOC] Getter/Setter Properties','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' Getter/setter properties are implemented similar to plain data properties:','line_number':20,'multiline':False]['text':' the shape contains the property's key, attributes, and slot number, but the','line_number':21,'multiline':False]['text':' getter/setter objects are stored separately as part of the object.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' To simplify the NativeObject and Shape code, a single slot is allocated for','line_number':24,'multiline':False]['text':' each getter/setter property (again similar to data properties). This slot','line_number':25,'multiline':False]['text':' contains a PrivateGCThingValue pointing to a js::GetterSetter instance.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' js::GetterSetter','line_number':28,'multiline':False]['text':' ================','line_number':29,'multiline':False]['text':' js::GetterSetter is an immutable type that stores the getter/setter objects.','line_number':30,'multiline':False]['text':' Because accessor properties can be defined with only a getter or only a','line_number':31,'multiline':False]['text':' setter, a GetterSetter's objects can be nullptr.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' JIT/IC Guards','line_number':34,'multiline':False]['text':' =============','line_number':35,'multiline':False]['text':' An object's shape implies a certain property is an accessor, but it does not','line_number':36,'multiline':False]['text':' imply the identity of the getter/setter objects. This means IC code needs to','line_number':37,'multiline':False]['text':' guard on the slot value (the GetterSetter*) when optimizing a call to a','line_number':38,'multiline':False]['text':' particular getter/setter function.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' See EmitGuardGetterSetterSlot in jit/CacheIR.cpp.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' HadGetterSetterChange Optimization','line_number':43,'multiline':False]['text':' ==================================','line_number':44,'multiline':False]['text':' Some getters and setters defined on the prototype chain are very hot, for','line_number':45,'multiline':False]['text':' example the 'length' getter for typed arrays. To avoid the GetterSetter guard','line_number':46,'multiline':False]['text':' in the common case, when attaching a stub for a known 'holder' object, we','line_number':47,'multiline':False]['text':' use the HadGetterSetterChange object flag.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' When this flag is not set, the object is guaranteed to get a different shape','line_number':50,'multiline':False]['text':' when an accessor property is either deleted or mutated, because when that','line_number':51,'multiline':False]['text':' happens the HadGetterSetterChange will be set which triggers a shape change.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' This means CacheIR does not have to guard on the GetterSetter slot for','line_number':54,'multiline':False]['text':' accessors on the prototype chain until the first time an accessor property is','line_number':55,'multiline':False]['text':' mutated or deleted.','line_number':56,'multiline':False]['text':' Getter object, stored in the cell header.','line_number':59,'multiline':False]['text':' Ensure size >= MinCellSize on 32-bit platforms.','line_number':65,'multiline':False]['text':' Nothing to do.','line_number':83,'multiline':False]['text':' namespace js','line_number':87,'multiline':False]['text':' JS::ubi::Nodes can point to GetterSetters; they're js::gc::Cell instances','line_number':89,'multiline':False]['text':' with no associated compartment.','line_number':90,'multiline':False]['text':' namespace ubi','line_number':111,'multiline':False]['text':' namespace JS','line_number':112,'multiline':False]['text':' vm_GetterSetter_h','line_number':114,'multiline':False]