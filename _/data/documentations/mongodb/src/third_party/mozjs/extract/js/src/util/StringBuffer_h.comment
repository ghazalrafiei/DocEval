['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':14,'multiline':False]['text':'
 * String builder that eagerly checks for over-allocation past the maximum
 * string length.
 *
 * Any operation which would exceed the maximum string length causes an
 * exception report on the context and results in a failed return value.
 *
 * Well-sized extractions (which waste no more than 1/4 of their char
 * buffer space) are guaranteed for strings built by this interface.
 * See |extractWellSized|.
 ','line_number':61,'multiline':True]['text':'
   * The Vector's buffer may be either stolen or copied, so we need to use
   * TempAllocPolicy and account for the memory manually when stealing.
   ','line_number':77,'multiline':True]['text':'
   * If Latin1 strings are enabled, cb starts out as a Latin1CharBuffer. When
   * a TwoByte char is appended, inflateChars() constructs a TwoByteCharBuffer
   * and copies the Latin1 chars.
   ','line_number':87,'multiline':True]['text':' Number of reserve()'d chars, see inflateChars. ','line_number':94,'multiline':True]['text':'*
   * Interpret the provided count of UTF-8 code units as UTF-8, and append
   * the represented code points to this.  If the code units contain invalid
   * UTF-8, leave the internal buffer in a consistent but unspecified state,
   * report an error, and return false.
   ','line_number':218,'multiline':True]['text':' No trailing '\0'. ','line_number':249,'multiline':True]['text':' Infallible variants usable when the corresponding space is reserved. ','line_number':252,'multiline':True]['text':'
   * Because inflation is fallible, these methods should only be used after
   * calling ensureTwoByteChars().
   ','line_number':274,'multiline':True]['text':' Identical to finishString() except that an atom is created. ','line_number':315,'multiline':True]['text':'
   * Creates a raw string from the characters in this buffer.  The string is
   * exactly the characters in this buffer (inflated to TwoByte), it is *not*
   * null-terminated unless the last appended character was '\0'.
   ','line_number':320,'multiline':True]['text':'
   * Creates a string from the characters in this buffer, then (regardless
   * whether string creation succeeded or failed) empties the buffer.
   ','line_number':333,'multiline':True]['text':' ES5 9.8 ToString, appending the result to the string buffer. ','line_number':427,'multiline':True]['text':' ES5 9.8 ToString for booleans, appending the result to the string buffer. ','line_number':440,'multiline':True]['text':' namespace js ','line_number':445,'multiline':True]['text':' util_StringBuffer_h ','line_number':447,'multiline':True]