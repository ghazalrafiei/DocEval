['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' From the double-conversion library. Original license:','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':6,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':7,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':8,'multiline':False]['text':' met:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':11,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':12,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':13,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':14,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':15,'multiline':False]['text':'       with the distribution.','line_number':16,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':17,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':18,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':21,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':23,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':24,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':25,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':26,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':27,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':28,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':29,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':30,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':31,'multiline':False]['text':' ICU PATCH: ifdef around UCONFIG_NO_FORMATTING','line_number':33,'multiline':False]['text':' ICU PATCH: Use U_ASSERT instead of <assert.h>','line_number':43,'multiline':False]['text':' Not all compilers support __has_attribute and combining a check for both','line_number':69,'multiline':False]['text':' ifdef and __has_attribute on the same preprocessor line isn't portable.','line_number':70,'multiline':False]['text':' Double operations detection based on target architecture.','line_number':91,'multiline':False]['text':' Linux uses a 80bit wide floating point stack on x86. This induces double','line_number':92,'multiline':False]['text':' rounding, which in turn leads to wrong results.','line_number':93,'multiline':False]['text':' An easy way to test if the floating-point operations are correct is to','line_number':94,'multiline':False]['text':' evaluate: 89255.0/1e22. If the floating-point stack is 64 bits wide then','line_number':95,'multiline':False]['text':' the result is equal to 89255e-22.','line_number':96,'multiline':False]['text':' The best way to test this, is to create a division-function and to compare','line_number':97,'multiline':False]['text':' the output of the division with the expected result. (Inlining must be','line_number':98,'multiline':False]['text':' disabled.)','line_number':99,'multiline':False]['text':' On Linux,x86 89255e-22 != Div_double(89255.0/1e22)','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' For example:','line_number':102,'multiline':False]['text':'
// -- in div.c
double Div_double(double x, double y) { return x / y; }

// -- in main.c
double Div_double(double x, double y);  // Forward declaration.

int main(int argc, char** argv) {
  return Div_double(89255.0, 1e22) == 89255e-22;
}
','line_number':103,'multiline':True]['text':' Run as follows ./main || echo "correct"','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' If it prints "correct" then the architecture should be here, in the "correct" section.','line_number':116,'multiline':False]['text':' Windows uses a 64bit wide floating point stack.','line_number':138,'multiline':False]['text':' _WIN32','line_number':142,'multiline':False]['text':' NOLINT','line_number':151,'multiline':False]['text':' NOLINT','line_number':152,'multiline':False]['text':' intptr_t and friends are defined in crtdefs.h through stdio.h.','line_number':157,'multiline':False]['text':' The following macro works on both 32 and 64-bit platforms.','line_number':167,'multiline':False]['text':' Usage: instead of writing 0x1234567890123456','line_number':168,'multiline':False]['text':'      write DOUBLE_CONVERSION_UINT64_2PART_C(0x12345678,90123456);','line_number':169,'multiline':False]['text':' The expression DOUBLE_CONVERSION_ARRAY_SIZE(a) is a compile-time constant of type','line_number':173,'multiline':False]['text':' size_t which represents the number of elements of the given','line_number':174,'multiline':False]['text':' array. You should only use DOUBLE_CONVERSION_ARRAY_SIZE on statically allocated','line_number':175,'multiline':False]['text':' arrays.','line_number':176,'multiline':False]['text':' A macro to disallow the evil copy constructor and operator= functions','line_number':183,'multiline':False]['text':' This should be used in the private: declarations for a class','line_number':184,'multiline':False]['text':' A macro to disallow all the implicit constructors, namely the','line_number':191,'multiline':False]['text':' default constructor, copy constructor and operator= functions.','line_number':192,'multiline':False]['text':'','line_number':193,'multiline':False]['text':' This should be used in the private: declarations for a class','line_number':194,'multiline':False]['text':' that wants to prevent anyone from instantiating it. This is','line_number':195,'multiline':False]['text':' especially useful for classes containing only static methods.','line_number':196,'multiline':False]['text':' ICU PATCH: Wrap in ICU namespace','line_number':203,'multiline':False]['text':' This is a simplified version of V8's Vector class.','line_number':214,'multiline':False]['text':' Returns a vector using the same backing storage as this one,','line_number':223,'multiline':False]['text':' spanning from and including 'from', to but not including 'to'.','line_number':224,'multiline':False]['text':' Returns the length of the vector.','line_number':232,'multiline':False]['text':' Returns whether or not the vector is empty.','line_number':235,'multiline':False]['text':' Returns the pointer to the start of the data in the vector.','line_number':238,'multiline':False]['text':' Access individual vector elements - checks bounds in debug mode.','line_number':241,'multiline':False]['text':' Helper class for building result strings in a character buffer. The','line_number':262,'multiline':False]['text':' purpose of the class is to use safe operations that checks the','line_number':263,'multiline':False]['text':' buffer bounds on all operations in debug mode.','line_number':264,'multiline':False]['text':' Get the current position in the builder.','line_number':274,'multiline':False]['text':' Reset the position.','line_number':280,'multiline':False]['text':' Add a single character to the builder. It is not allowed to add','line_number':283,'multiline':False]['text':' 0-characters; use the Finalize() method to terminate the string','line_number':284,'multiline':False]['text':' instead.','line_number':285,'multiline':False]['text':' Add an entire string to the builder. Uses strlen() internally to','line_number':292,'multiline':False]['text':' compute the length of the input string.','line_number':293,'multiline':False]['text':' Add the first 'n' characters of the given string 's' to the','line_number':298,'multiline':False]['text':' builder. The input string must have enough characters.','line_number':299,'multiline':False]['text':' Add character padding to the builder. If count is non-positive,','line_number':308,'multiline':False]['text':' nothing is added to the builder.','line_number':309,'multiline':False]['text':' Finalize the string by 0-terminating it and returning the buffer.','line_number':316,'multiline':False]['text':' Make sure nobody managed to add a 0-character to the','line_number':320,'multiline':False]['text':' buffer while building the string.','line_number':321,'multiline':False]['text':' The type-based aliasing rule allows the compiler to assume that pointers of','line_number':337,'multiline':False]['text':' different types (for some definition of different) never alias each other.','line_number':338,'multiline':False]['text':' Thus the following code does not work:','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' float f = foo();','line_number':341,'multiline':False]['text':' int fbits = *(int*)(&f);','line_number':342,'multiline':False]['text':'','line_number':343,'multiline':False]['text':' The compiler 'knows' that the int pointer can't refer to f since the types','line_number':344,'multiline':False]['text':' don't match, so the compiler may cache f in a register, leaving random data','line_number':345,'multiline':False]['text':' in fbits.  Using C++ style casts makes no difference, however a pointer to','line_number':346,'multiline':False]['text':' char data is assumed to alias any other pointer.  This is the 'memcpy','line_number':347,'multiline':False]['text':' exception'.','line_number':348,'multiline':False]['text':'','line_number':349,'multiline':False]['text':' Bit_cast uses the memcpy exception to move the bits from a variable of one','line_number':350,'multiline':False]['text':' type of a variable of another type.  Of course the end result is likely to','line_number':351,'multiline':False]['text':' be implementation dependent.  Most compilers (gcc-4.2 and MSVC 2005)','line_number':352,'multiline':False]['text':' will completely optimize BitCast away.','line_number':353,'multiline':False]['text':'','line_number':354,'multiline':False]['text':' There is an additional use for BitCast.','line_number':355,'multiline':False]['text':' Recent gccs will warn when they see casts that may result in breakage due to','line_number':356,'multiline':False]['text':' the type-based aliasing rule.  If you have checked that there is no breakage','line_number':357,'multiline':False]['text':' you can use BitCast to cast one pointer type to another.  This confuses gcc','line_number':358,'multiline':False]['text':' enough that it can no longer see that you have cast one pointer type to','line_number':359,'multiline':False]['text':' another thus avoiding the warning.','line_number':360,'multiline':False]['text':' Compile time assertion: sizeof(Dest) == sizeof(Source)','line_number':363,'multiline':False]['text':' A compile error here means your Dest and Source have different sizes.','line_number':364,'multiline':False]['text':' namespace double_conversion','line_number':383,'multiline':False]['text':' ICU PATCH: Close ICU namespace','line_number':385,'multiline':False]['text':' DOUBLE_CONVERSION_UTILS_H_','line_number':388,'multiline':False]['text':' ICU PATCH: close #if !UCONFIG_NO_FORMATTING','line_number':389,'multiline':False]