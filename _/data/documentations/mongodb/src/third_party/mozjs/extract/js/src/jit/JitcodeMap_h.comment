['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT, MOZ_ASSERT_IF, MOZ_CRASH','line_number':10,'multiline':False]['text':' size_t','line_number':12,'multiline':False]['text':' uint8_t, uint32_t, uint64_t','line_number':13,'multiline':False]['text':' CompactBufferReader, CompactBufferWriter','line_number':15,'multiline':False]['text':' CodeOffset','line_number':16,'multiline':False]['text':' SystemAllocPolicy','line_number':17,'multiline':False]['text':' jsbytecode','line_number':18,'multiline':False]['text':' Vector','line_number':19,'multiline':False]['text':' BytecodeLocation','line_number':20,'multiline':False]['text':' namespace JS','line_number':29,'multiline':False]['text':'
 * The Ion jitcode map implements tables to allow mapping from addresses in ion
 * jitcode to the list of (JSScript*, jsbytecode*) pairs that are implicitly
 * active in the frame at that point in the native code.
 *
 * To represent this information efficiently, a multi-level table is used.
 *
 * At the top level, a global splay-tree of JitcodeGlobalEntry describings the
 * mapping for each individual IonCode script generated by compiles.  The
 * entries are ordered by their nativeStartAddr.
 *
 * Every entry in the table is of fixed size, but there are different entry
 * types, distinguished by the kind field.
 ','line_number':39,'multiline':True]['text':'','line_number':95,'multiline':False]['text':' When stored in a free-list, towers use 'ptrs_[0]' to store a','line_number':96,'multiline':False]['text':' pointer to the next tower.  In this context only, 'ptrs_[0]'','line_number':97,'multiline':False]['text':' may refer to a |JitcodeSkiplistTower*| instead of a','line_number':98,'multiline':False]['text':' |JitcodeGlobalEntry*|.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' If this entry is referenced from the profiler buffer, this is the','line_number':164,'multiline':False]['text':' position where the most recent sample that references it starts.','line_number':165,'multiline':False]['text':' Otherwise set to kNoSampleInBuffer.','line_number':166,'multiline':False]['text':' regionTable_ points to the start of the region table within the','line_number':222,'multiline':False]['text':' packed map for compile represented by this entry.  Since the','line_number':223,'multiline':False]['text':' region table occurs at the tail of the memory region, this pointer','line_number':224,'multiline':False]['text':' points somewhere inside the region memory space, and not to the start','line_number':225,'multiline':False]['text':' of the memory space.','line_number':226,'multiline':False]['text':' Dummy entries are created for jitcode generated when profiling is not','line_number':347,'multiline':False]['text':' turned on, so that they have representation in the global table if they are','line_number':348,'multiline':False]['text':' on the stack when profiling is enabled.','line_number':349,'multiline':False]['text':' QueryEntry is never stored in the table, just used for queries','line_number':375,'multiline':False]['text':' where an instance of JitcodeGlobalEntry is required to do tree','line_number':376,'multiline':False]['text':' lookups.','line_number':377,'multiline':False]['text':' Shadowing BaseEntry instance to allow access to base fields','line_number':390,'multiline':False]['text':' and type extraction.','line_number':391,'multiline':False]['text':' The most common entry type: describing jitcode generated by','line_number':394,'multiline':False]['text':' Ion main-line code.','line_number':395,'multiline':False]['text':' Baseline jitcode.','line_number':398,'multiline':False]['text':' BaselineInterpreter code.','line_number':401,'multiline':False]['text':' Dummy entries.','line_number':404,'multiline':False]['text':' When doing queries on the SplayTree for particular addresses,','line_number':407,'multiline':False]['text':' the query addresses are representd using a QueryEntry.','line_number':408,'multiline':False]['text':' Catch full containment of |entry| within |this|, and partial overlaps.','line_number':484,'multiline':False]['text':' Catch full containment of |this| within |entry|.','line_number':490,'multiline':False]['text':' Read the inline call stack at a given point in the native code and append','line_number':572,'multiline':False]['text':' into the given vector.  Innermost (script,pc) pair will be appended first,','line_number':573,'multiline':False]['text':' and outermost appended last.','line_number':574,'multiline':False]['text':'','line_number':575,'multiline':False]['text':' Returns false on memory failure.','line_number':576,'multiline':False]['text':' Figure out the number of the (JSScript*, jsbytecode*) pairs that are active','line_number':626,'multiline':False]['text':' at this location.','line_number':627,'multiline':False]['text':' Compare two global entries.','line_number':630,'multiline':False]['text':'','line_number':673,'multiline':False]['text':' When stored in a free-list, entries use 'tower_' to store a','line_number':674,'multiline':False]['text':' pointer to the next entry.  In this context only, 'tower_'','line_number':675,'multiline':False]['text':' may refer to a |JitcodeGlobalEntry*| instead of a','line_number':676,'multiline':False]['text':' |JitcodeSkiplistTower*|.','line_number':677,'multiline':False]['text':'','line_number':678,'multiline':False]['text':'
 * Global table of JitcodeGlobalEntry values sorted by native address range.
 ','line_number':704,'multiline':True]['text':' Initialize towerOut such that towerOut[i] (for i in [0, MAX_HEIGHT-1])','line_number':768,'multiline':False]['text':' is a JitcodeGlobalEntry that is sorted to be <query, whose successor at','line_number':769,'multiline':False]['text':' level i is either null, or sorted to be >= query.','line_number':770,'multiline':False]['text':'','line_number':771,'multiline':False]['text':' If entry with the given properties does not exist for level i, then','line_number':772,'multiline':False]['text':' towerOut[i] is initialized to nullptr.','line_number':773,'multiline':False]['text':' Calculate next random tower height.','line_number':780,'multiline':False]['text':' An enumerator class that can remove entries as it enumerates. If this','line_number':815,'multiline':False]['text':' functionality is not needed, use Range instead.','line_number':816,'multiline':False]['text':' clang-format off','line_number':830,'multiline':False]['text':'
 * Container class for main jitcode table.
 * The Region table's memory is structured as follows:
 *
 *      +------------------------------------------------+   |
 *      |  Region 1 Run                                  |   |
 *      |------------------------------------------------|   |
 *      |  Region 2 Run                                  |   |
 *      |                                                |   |
 *      |                                                |   |
 *      |------------------------------------------------|   |
 *      |  Region 3 Run                                  |   |
 *      |                                                |   |
 *      |------------------------------------------------|   |-- Payload
 *      |                                                |   |
 *      |               ...                              |   |
 *      |                                                |   |
 *      |------------------------------------------------|   |
 *      |  Region M Run                                  |   |
 *      |                                                |   |
 *      +================================================+ <- RegionTable pointer points here
 *      | uint23_t numRegions = M                        |   |
 *      +------------------------------------------------+   |
 *      | Region 1                                       |   |
 *      |   uint32_t entryOffset = size(Payload)         |   |
 *      +------------------------------------------------+   |
 *      |                                                |   |-- Table
 *      |   ...                                          |   |
 *      |                                                |   |
 *      +------------------------------------------------+   |
 *      | Region M                                       |   |
 *      |   uint32_t entryOffset                         |   |
 *      +------------------------------------------------+   |
 *
 * The region table is composed of two sections: a tail section that contains a table of
 * fixed-size entries containing offsets into the the head section, and a head section that
 * holds a sequence of variable-sized runs.  The table in the tail section serves to
 * locate the variable-length encoded structures in the head section.
 *
 * The entryOffsets in the table indicate the bytes offset to subtract from the regionTable
 * pointer to arrive at the encoded region in the payload.
 *
 *
 * Variable-length entries in payload
 * ----------------------------------
 * The entryOffsets in the region table's fixed-sized entries refer to a location within the
 * variable-length payload section.  This location contains a compactly encoded "run" of
 * mappings.
 *
 * Each run starts by describing the offset within the native code it starts at, and the
 * sequence of (JSScript*, jsbytecode*) pairs active at that site.  Following that, there
 * are a number of variable-length entries encoding (nativeOffsetDelta, bytecodeOffsetDelta)
 * pairs for the run.
 *
 *      VarUint32 nativeOffset;
 *          - The offset from nativeStartAddr in the global table entry at which
 *            the jitcode for this region starts.
 *
 *      Uint8_t scriptDepth;
 *          - The depth of inlined scripts for this region.
 *
 *      List<VarUint32> inlineScriptPcStack;
 *          - We encode (2 * scriptDepth) VarUint32s here.  Each pair of uint32s are taken
 *            as an index into the scriptList in the global table entry, and a pcOffset
 *            respectively.
 *
 *      List<NativeAndBytecodeDelta> deltaRun;
 *          - The rest of the entry is a deltaRun that stores a series of variable-length
 *            encoded NativeAndBytecodeDelta datums.
 ','line_number':831,'multiline':True]['text':' clang-format on','line_number':901,'multiline':False]['text':' Given a pointer into an array of NativeToBytecode (and a pointer to the end','line_number':922,'multiline':False]['text':' of the array), compute the number of entries that would be consume by','line_number':923,'multiline':False]['text':' outputting a run starting at this one.','line_number':924,'multiline':False]['text':' Write a run, starting at the given NativeToBytecode entry, into the given','line_number':928,'multiline':False]['text':' buffer writer.','line_number':929,'multiline':False]['text':' Delta Run entry formats are encoded little-endian:','line_number':936,'multiline':False]['text':'','line_number':937,'multiline':False]['text':'  byte 0','line_number':938,'multiline':False]['text':'  NNNN-BBB0','line_number':939,'multiline':False]['text':'      Single byte format.  nativeDelta in [0, 15], pcDelta in [0, 7]','line_number':940,'multiline':False]['text':'','line_number':941,'multiline':False]['text':'  byte 1    byte 0','line_number':952,'multiline':False]['text':'  NNNN-NNNN BBBB-BB01','line_number':953,'multiline':False]['text':'      Two-byte format.  nativeDelta in [0, 255], pcDelta in [0, 63]','line_number':954,'multiline':False]['text':'','line_number':955,'multiline':False]['text':'  byte 2    byte 1    byte 0','line_number':966,'multiline':False]['text':'  NNNN-NNNN NNNB-BBBB BBBB-B011','line_number':967,'multiline':False]['text':'      Three-byte format.  nativeDelta in [0, 2047], pcDelta in [-512, 511]','line_number':968,'multiline':False]['text':'','line_number':969,'multiline':False]['text':'  byte 3    byte 2    byte 1    byte 0','line_number':981,'multiline':False]['text':'  NNNN-NNNN NNNN-NNNN BBBB-BBBB BBBB-B111','line_number':982,'multiline':False]['text':'      Three-byte format.  nativeDelta in [0, 65535],','line_number':983,'multiline':False]['text':'                          pcDelta in [-4096, 4095]','line_number':984,'multiline':False]['text':' Unpacked state from jitcode entry.','line_number':1005,'multiline':False]['text':' End of script+pc sequence is the start of the delta run.','line_number':1079,'multiline':False]['text':' Variable length payload section "below" here. ','line_number':1121,'multiline':True]['text':' The beginning of the payload the beginning of the first region are the','line_number':1155,'multiline':False]['text':' same.','line_number':1156,'multiline':False]['text':' namespace jit','line_number':1169,'multiline':False]['text':' namespace js','line_number':1170,'multiline':False]['text':' jit_JitcodeMap_h ','line_number':1172,'multiline':True]