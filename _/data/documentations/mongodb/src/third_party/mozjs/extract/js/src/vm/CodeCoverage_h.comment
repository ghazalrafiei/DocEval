['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Whether the given script name matches this LCovSource.','line_number':28,'multiline':False]['text':' Whether an OOM was seen recording coverage information. This indicates','line_number':31,'multiline':False]['text':' that the resulting coverage information is incomplete.','line_number':32,'multiline':False]['text':' Whether the current source is complete and if it can be flushed.','line_number':35,'multiline':False]['text':' Iterate over the bytecode and collect the lcov output based on the','line_number':38,'multiline':False]['text':' ScriptCounts counters.','line_number':39,'multiline':False]['text':' Write the Lcov output in a buffer, such as the one associated with','line_number':42,'multiline':False]['text':' the runtime code coverage trace file.','line_number':43,'multiline':False]['text':' Name of the source file.','line_number':47,'multiline':False]['text':' LifoAlloc strings which hold the filename of each function as','line_number':50,'multiline':False]['text':' well as the number of hits for each function.','line_number':51,'multiline':False]['text':' LifoAlloc string which hold branches statistics.','line_number':57,'multiline':False]['text':' Holds lines statistics. When processing a line hit count, the hit count','line_number':62,'multiline':False]['text':' is added to any hit count already in the hash map so that we handle','line_number':63,'multiline':False]['text':' lines that belong to more than one JSScript or function in the same','line_number':64,'multiline':False]['text':' source file.','line_number':65,'multiline':False]['text':' Status flags.','line_number':71,'multiline':False]['text':' Write the Lcov output in a buffer, such as the one associated with','line_number':81,'multiline':False]['text':' the runtime code coverage trace file.','line_number':82,'multiline':False]['text':' Write the realm name in outTN_.','line_number':88,'multiline':False]['text':' Return the LCovSource entry which matches the given ScriptSourceObject.','line_number':91,'multiline':False]['text':' Generate escaped form of script atom and allocate inside our LifoAlloc if','line_number':94,'multiline':False]['text':' necessary.','line_number':95,'multiline':False]['text':' LifoAlloc backend for all temporary allocations needed to stash the','line_number':102,'multiline':False]['text':' strings to be written in the file.','line_number':103,'multiline':False]['text':' LifoAlloc string which hold the name of the realm.','line_number':106,'multiline':False]['text':' Vector of all sources which are used in this realm. The entries are','line_number':109,'multiline':False]['text':' allocated within the LifoAlloc.','line_number':110,'multiline':False]['text':' If the environment variable JS_CODE_COVERAGE_OUTPUT_DIR is set to a','line_number':119,'multiline':False]['text':' directory, create a file inside this directory which uses the process','line_number':120,'multiline':False]['text':' ID, the thread ID and a timestamp to ensure the uniqueness of the','line_number':121,'multiline':False]['text':' file.','line_number':122,'multiline':False]['text':'','line_number':123,'multiline':False]['text':' At the end of the execution, this file should contains the LCOV output of','line_number':124,'multiline':False]['text':' all the scripts executed in the current JSRuntime.','line_number':125,'multiline':False]['text':' Write the aggregated result of the code coverage of a realm','line_number':128,'multiline':False]['text':' into a file.','line_number':129,'multiline':False]['text':' When a process forks, the file will remain open, but 2 processes will','line_number':133,'multiline':False]['text':' have the same file. To avoid conflicting writes, we open a new file for','line_number':134,'multiline':False]['text':' the child process.','line_number':135,'multiline':False]['text':' Fill an array with the name of the file. Return false if we are unable to','line_number':138,'multiline':False]['text':' serialize the filename in this array.','line_number':139,'multiline':False]['text':' Finish the current opened file, and remove if it does not have any','line_number':142,'multiline':False]['text':' content.','line_number':143,'multiline':False]['text':' Output file which is created if code coverage is enabled.','line_number':147,'multiline':False]['text':' The process' PID is used to watch for fork. When the process fork,','line_number':150,'multiline':False]['text':' we want to close the current file and open a new one.','line_number':151,'multiline':False]['text':' Flag used to report if the generated file is empty or not. If it is empty','line_number':154,'multiline':False]['text':' when the runtime is destroyed, then the file would be removed as an empty','line_number':155,'multiline':False]['text':' file is not a valid LCov file.','line_number':156,'multiline':False]['text':' Initialize coverage info to track code coverage for a JSScript.','line_number':169,'multiline':False]['text':' Collect the code-coverage data from a script into relevant LCovSource.','line_number':172,'multiline':False]['text':' namespace coverage','line_number':175,'multiline':False]['text':' namespace js','line_number':176,'multiline':False]['text':' vm_Printer_h','line_number':178,'multiline':False]